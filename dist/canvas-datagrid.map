{"version":3,"sources":["webpack://canvasDatagrid/webpack/universalModuleDefinition","webpack://canvasDatagrid/webpack/bootstrap","webpack://canvasDatagrid/./lib/defaults.js","webpack://canvasDatagrid/./lib/publicMethods.js","webpack://canvasDatagrid/./lib/dom.js","webpack://canvasDatagrid/./lib/contextMenu.js","webpack://canvasDatagrid/./lib/intf.js","webpack://canvasDatagrid/./lib/touch.js","webpack://canvasDatagrid/./lib/events.js","webpack://canvasDatagrid/./lib/draw.js","webpack://canvasDatagrid/./lib/component.js","webpack://canvasDatagrid/./lib/main.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_AMD_DEFINE_RESULT__","undefined","self","defaults","attributes","styles","apply","integerToAlpha","ordA","charCodeAt","len","String","fromCharCode","Math","floor","insertColumn","index","getSchema","length","Error","validateColumn","splice","data","forEach","row","applyDefaultValue","intf","schema","deleteColumn","addColumn","push","deleteRow","originalData","setFilter","resize","insertRow","addRow","setRowHeight","rowIndex","height","sizes","rows","draw","setColumnWidth","colIndex","width","columns","resetColumnWidths","resetRowHeights","column","applyFilter","refreshFromOrigialData","keys","columnFilters","filter","header","getHeaderByName","currentFilter","type","findRowScrollTop","scrollCache","y","RangeError","findColumnScrollLeft","columnIndex","max","x","getColummnWidth","orders","gotoCell","offsetX","offsetY","cell","targetX","targetY","sbw","scrollBox","verticalBarVisible","style","scrollBarWidth","sbh","horizontalBarVisible","scrollTo","requestAnimationFrame","getVisibleCellByIndex","scrollLeft","scrollTop","gotoRow","scrollIntoView","visibleCells","setActiveCell","activeCell","selectNone","dontDraw","selections","dispatchEvent","selectedData","getSelectedData","selectionBounds","selectAll","selectArea","top","left","right","bottom","isColumnSelected","colIsSelected","indexOf","forEachSelectedCell","fn","expandToRow","getVisibleSchema","col","selectColumn","ctrl","shift","supressEvent","e","addCol","min","scrollIndexTop","removeCol","getSelectionBounds","selectRow","st","en","ri","dragAddToSelection","dragObject","collapseTree","childGrid","childGrids","openChildren","blur","dispose","trees","cellHeight","expandTree","treeGrid","trArgs","args","treeGridAttributes","columnHeaderCellHeight","getColumnHeaderCellHeight","rowHeaderCellWidth","cornerCell","h","treeGridHeight","debug","saveAppearance","parentNode","parentGrid","nodeType","offsetHeight","offsetWidth","offsetLeft","offsetTop","offsetParent","createGrid","visible","toggleTree","fitColumnToValues","internal","canvas","findColumnMaxTextLength","minColumnWidth","isCellVisible","order","columnName","direction","sortFunction","dontSetStorageData","f","orderBy","sorters","console","warn","sort","string","setStorageData","isInGrid","moveSelection","sel","moveTo","xi","maxRowLength","Infinity","minXi","yi","getVisibleColumnIndexOf","lastSourceIndex","cidx","isColumnVisible","isRowVisible","getCellAt","useTouchScrollZones","getBorder","entitiy","borderResizeZone","border","moveBorder","tsz","touchScrollZone","moveMode","borderDragBehavior","xBorderBehavior","cursorGrab","yBorderBehavior","hasFocus","dragContext","context","test","cellBorderWidth","isScrollBar","isVerticalScrollBar","box","v","scrollBoxHeight","cursor","isHorizontalScrollBar","scrollBoxWidth","selectionBorder","allowColumnResize","allowColumnResizeFromCell","isNormal","allowRowHeaderResize","isRowHeader","isCorner","isColumnHeader","allowRowResize","allowRowResizeFromCell","rowGrabZoneSize","allowRowReordering","isGrid","isBackground","low","high","maxCol","minCol","getSchemaFromData"," ","map","getBestGuessDataType","title","isNaN","parseInt","toUpperCase","storedSettings","visibility","hidden","clearChangeLog","changes","bounds","ev","ctx","font","rowHeaderCellFont","measureText","showNewRow","toString","autosizePadding","autosizeHeaderCellPadding","rowHeaderCellPaddingRight","rowHeaderCellPaddingLeft","tree","treeArrowWidth","treeArrowMarginLeft","treeArrowMarginRight","columnHeaderCellFont","headerCellPaddingRight","headerCellPaddingLeft","cellFont","cellPaddingRight","cellPaddingLeft","cellAutoResizePadding","getHeaderWidth","reduce","total","cellWidth","getRowHeight","scale","formatters","rowHeaderCell","headerCell","number","int","html","asc","a","b","localeCompare","date","Date","getTime","getClippingRect","ele","boundingRect","position","eleRect","scrollOffset","clipRect","w","parentRect","getRowHeaderCellWidth","clipElement","clip","scrollingElement","document","nodeName","resizeEditInput","input","editCell","pos","getBoundingClientRect","bm","gridBorderCollapse","borderWidth","mobile","mobileEditInputHeight","canvasOffsetLeft","canvasOffsetTop","ignoreScrollOffset","getLayerPos","rect","clientX","clientY","isChildGrid","endEdit","abort","newValue","oldValue","defaultValue","aborted","createNewRowData","removeChild","focus","beginEditAt","editable","adjacentCells","enumItems","enu","option","valueInEnum","getAdjacentCells","createElement","multiLine","Array","isArray","val","innerHTML","appendChild","addEventListener","body","createInlineStyle","zIndex","editCellZIndex","fontSize","editCellFontSize","stopPropagation","nx","ny","keyCode","shiftKey","preventDefault","last","first","el","className","css","canvas-datagrid-context-menu-filter-input","verticalAlign","marginLeft","padding","background","contextFilterInputBackground","color","contextFilterInputColor","contextFilterInputBorder","borderRadius","contextFilterInputBorderRadius","lineHeight","fontWeight","fontFamily","contextFilterInputFontFamily","contextFilterInputFontSize","canvas-datagrid-context-menu-filter-button","contextMenuBackground","contextMenuColor","contextFilterButtonBorder","contextFilterButtonBorderRadius","contextMenuFilterButtonFontFamily","contextMenuFilterButtonFontSize","canvas-datagrid-context-child-arrow","cssFloat","childContextMenuArrowColor","contextMenuChildArrowFontSize","contextMenuFontFamily","canvas-datagrid-autocomplete","contextMenuFontSize","contextMenuBorder","contextMenuPadding","contextMenuBorderRadius","opacity","contextMenuOpacity","overflow","canvas-datagrid-autocomplete-item","canvas-datagrid-autocomplete-item:hover","contextMenuHoverBackground","contextMenuHoverColor","canvas-datagrid-canvas","canvas-datagrid","display","canvas-datagrid-control-input","canvas-datagrid-edit-mobile-input","boxSizing","outline","margin","mobileEditFontFamily","mobileEditFontSize","editCellBorder","editCellColor","editCellBackgroundColor","appearance","webkitAppearance","mozAppearance","canvas-datagrid-edit-input","editCellPaddingLeft","editCellFontFamily","boxShadow","editCellBoxShadow","canvas-datagrid-context-menu-item-mobile","contextMenuItemMargin","contextMenuItemBorderRadius","canvas-datagrid-context-menu-item","canvas-datagrid-context-menu-item:hover","canvas-datagrid-context-menu-label","contextMenuLabelMargin","contextMenuLabelDisplay","minWidth","contextMenuLabelMinWidth","maxWidth","contextMenuLabelMaxWidth","canvas-datagrid-context-menu-mobile","whiteSpace","canvas-datagrid-context-menu","contextMenuCursor","canvas-datagrid-invalid-search-regExp","contextMenuFilterInvalidExpresion","prop","appendTo","setDom","controlInput","eventParent","onblur","parentDOMNode","parentIsCanvas","tagName","getContext","textBaseline","parentNodeStyle","setAttribute","target","touchstart","mouseup","mousedown","dblclick","click","mousemove","scrollWheel","contextmenuEvent","copy","cut","paste","keypress","keyup","keydown","zIndexTop","hoverScrollTimeout","autoCompleteContext","applyContextItemStyle","contextItemContainer","createContextMenu","items","parentContextMenu","container","upArrow","downArrow","children","selectedIndex","checkArrowVisibility","scrollHeight","startHoverScroll","contextHoverScrollAmount","setTimeout","contextHoverScrollRateMs","endHoverScroll","clearTimeout","loc","contextMenuZIndex","item","childMenuArrow","removeChildContext","relatedTarget","contextMenu","contains","removeEventListener","contextAddCallback","getAttribute","cPos","childContextMenuMarginLeft","childContextMenuMarginTop","createChildContext","addContent","content","childContextMenuArrowHTML","addItem","contextMenuArrowColor","textAlign","inputDropdown","maxHeight","innerHeight","autocompleteBottomMargin","deltaY","deltaX","contextMenuArrowUpHTML","contextMenuArrowDownHTML","contextMenuWindowMargin","innerWidth","init","clickIndex","idx","Event","set","isFinite","createFilterContextMenuItems","autoCompleteItems","iRect","filterContainer","filterLabel","filterAutoCompleteButton","filterInput","checkRegExpErrorState","invalidFilterRegEx","contextFilterInvalidRegExpBackground","contextFilterInvalidRegExpColor","createAutoCompleteContext","count","maxAutoCompleteItems","disposeAutocomplete","fillAutoComplete","onclick","disposeContextMenu","filterOptionText","replace","contextFilterButtonHTML","cf","removeFilterOptionText","overridePos","contextPosition","NativeEvent","isNormalCell","isColumnHeaderCellCap","showFilter","showCopy","copyText","execCommand","showPaste","clipBoardData","pasteText","showColumnSelector","columnSelectorText","toggleColumnVisibility","columnSelectorHiddenText","columnSelectorVisibleText","hideColumnText","showClearSettingsOption","clearSettingsOptionText","createRowOrders","createColumnOrders","columnWidth","allowSorting","showOrderByOption","showOrderByOptionTextAsc","showOrderByOptionTextDesc","addDefaultContextMenuItem","contextMenuMarginLeft","contextMenuMarginTop","mobileContextMenuMargin","createDiposeEvent","ctor","fillArray","appliedInlineStyles","cellGridAttributes","visibleRowHeights","storageName","invalidSearchExpClass","localStyleLibraryStorageKey","dataType","orderDirection","filters","frozenRow","frozenColumn","ellipsisCache","visibleRows","hovers","parsers","schemaHashes","events","scrollPixelTop","scrollIndexLeft","scrollPixelLeft","scrollModes","componentL1Events","eventNames","mouse","orderedIndex","showColumnHeaders","showRowHeaders","localStorage","setItem","JSON","stringify","tempSchema","newRow","getSchemaNameHash","drawChildGrids","gridKey","resizeChildGrids","autoScrollZone","setTimer","selectionScrollZone","selectionScrollIncrement","currentCell","scrollTimer","scrollRepeatRate","setDefaults","obj1","obj2","def","setAttributes","setStyle","autosize","colName","contextmenu","observer","disconnect","tryLoadStoredSettings","reloadStoredValues","getDomRoot","shadowRoot","host","getFontName","fontStyle","getFontHeight","parseFloat","parseStyleValue","split","initProp","propName","getStyleProperty","styleKeys","setStyleProperty","supressDrawAndEvent","isDim","dehyphenateProperty","getItem","message","parse","initialized","publicStyleKeyIntf","initScrollBox","ie","navigator","userAgent","edge","webKit","moz","cursorGrabing","cursorGrabbing","pointerLockPosition","isComponent","assertPxColor","clearPxColorAssertions","hyphenateProperty","addStyleKeyIfNoneExists","DOMStyles","getComputedStyle","concat","valueObject","filterFor","filterRegExp","pattern","exec","flags","substring","flagLength","RegExp","toLocaleUpperCase","applyComponentStyle","innerText","textContent","TypeError","gridId","currentCursor","find","scrollWidth","dragMode","eventName","scrollIndexRight","scrollIndexBottom","scrollPixelRight","scrollPixelBottom","getTypes","parseInnerHtml","callback","etl","autoGenerateSchema","autoResizeColumns","sHeight","sWidth","setScrollTop","preventScrollEvent","scroll","setScrollLeft","toFixed","widthBoxRatio","heightBoxRatio","supressDrawEvent","touchScrollTimeout","scrollAnimation","touchDelta","touchAnimateTo","animationFrames","getTouchPos","touchIndex","touches","easingFunctions","linear","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easing","touchEasingMethod","calculatePPSTimed","xPPST","touchSigmaTimed","yPPST","performance","now","calculatePPS","xPPS","touchSigma","yPPS","touchEndAnimation","touchReleaseAnimationDurationMs","stopAnimation","touchEditCell","touchCell","clearInterval","calculatePPSTimer","abs","touchDeadZone","touchingCell","changedTouches","touchStart","startingCell","touchContextTimeout","touchStartEvent","zoomAltered","touchLength","touchStart1","touchScrollStart","touchContextMenuTimeMs","setInterval","isHeader","columnHeaderClickBehavior","touchEndEvents","touchmove","passive","touchend","touchcancel","touchSelect","handleType","touchSelecting","selectionMode","ch","rw","rScrollZone","lScrollZone","bScrollZone","tScrollZone","t1","t2","touchPosition","touchPosition1","zoomDeltaStart","startScale","scaleDelta","touchZoomSensitivity","touchZoomMin","touchZoomMax","touchDuration","touchScroll","dz","touchReleaseAcceleration","scrollAnimationPPSThreshold","wheeling","unshift","sfn","defaultPrevented","getRatio","maxPixelRatio","devicePixelRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","backingStorePixelRatio","drawAfterResize","dims","vb","nb","co","isScrollBoxCorner","scrollBarBoxMargin","scrollBarBorderWidth","ratio","cellBorder","columnHeaderCellBorder","columnHeaderCellBorderWidth","dataHeight","dataWidth","accumulator","va","setCanvasSize","setScrollBoxSize","checkScrollBoxVisibility","scrollBarBoxMinSize","scrollBarBoxWidth","entities","horizontalBar","horizontalBox","verticalBar","verticalBox","corner","bar","page","pageUpDownOverlap","overflowX","horizontalBoxVisible","overflowY","verticalBoxVisible","dim","isComponet","dragBounds","sBounds","delta","ctrlKey","metaKey","persistantSelectionMode","previousCell","rowBoundaryCrossed","columnBoundaryCrossed","cellBoundaryCrossed","prefix","draggingItem","dragItem","selecting","reorderObject","dragStart","dragStartObject","ignoreNextClick","grid","checkSelectionChange","treeArrowClickRadius","treeArrowHeight","treeArrowMarginTop","dragResizeColumn","resizingStartingWidth","resizingStartingHeight","minRowHeight","resizeScrollZone","sortColumnIndex","rowOpen","globalRowResize","stopDragResize","scrollGrid","scrollPointerLock","scrollStartMode","movementX","movementY","scrollMode","scrollStart","stopScrollGrid","exitPointerLock","dragReorder","columReorder","rowReorder","allowColumnReordering","source","reorderDeadZone","reorderTarget","dragOffset","stopDragReorder","oIndex","tIndex","cr","row-reorder","column-reorder","dragMove","moveOffset","stopDragMove","movingSelection","freezeMove","freezeMarkerPosition","stopFreezeMove","startFreezeMove","lastMouseDownTarget","button","move","freeze","selected","requestPointerLock","dragging","cols","selectionFollowsActiveCell","deltaMode","touchHaltAnimation","pasteItem","clipData","mimeType","rowData","importingRow","existingRow","colKey","cellData","cName","normalizeRowData","getNextVisibleColumnIndex","visibleColumnIndex","clipboardData","dti","getAsString","outputHeaderKeys","tableRows","textRows","outputHeaders","sData","rowKeys","trRow","textRow","sSorted","fCopyCell","addCellValue","join","addHeaders","setData","htmlSafe","headers","useHtml","hVal","perfCounters","cachedImagesDrawn","drawCount","perfWindowSize","entityCount","scrollDebugCounters","touchPPSCounters","step","drawHtml","img","formattedValue","cacheKey","htmlImageCache","complete","drawImage","Image","onload","loaded","drawOnAllImagesLoaded","src","btoa","radiusRect","radius","beginPath","lineTo","quadraticCurveTo","fillRect","strokeRect","fillText","text","clipFrozenArea","lastFrozenColumnPixel","lastFrozenRowPixel","fillHandle","selectionHandleType","arc","PI","fill","fillCircle","strokeHandle","stroke","strokeCircle","addBorderLine","checkScrollHeight","cx","cy","rowHeight","rd","aCell","bc","selectionBorders","moveBorders","selectionHandles","rowHeaders","u","save","fillStyle","gridBackgroundColor","ln","drawRow","allowFreezingRows","frozenMarkerBorderWidth","frozenMarkerWidth","drawFrozenRows","g","snapToRow","drawCell","restore","drawRows","cl","lineWidth","activeCellOverlayBorderWidth","strokeStyle","activeCellOverlayBorderColor","drawActiveCell","columnHeaderCell","nonFrozenHeaderWidth","drawHeaderColumnRange","start","end","rArgs","rhIndex","rowOrderIndex","drawRowHeader","isColumnHeaderCell","endCap","drawHeaders","my","mx","xHover","yHover","allowFreezingColumns","frozenMarkerHoverColor","frozenMarkerColor","frozenMarkerHoverBorderColor","frozenMarkerBorderColor","frozenMarkerActiveColor","frozenMarkerActiveBorderColor","drawFrozenMarkers","dsb","selectionOverlayBorderWidth","selectionOverlayBorderColor","drawSelectionBorders","allowMovingSelection","selectionHandleBorderWidth","selectionHandleBorderColor","selectionHandleColor","hw","selectionHandleSize","tr","br","tl","bl","addselectionHandle","az","touchSelectHandleZone","ax","ay","reorderMarkerBackgroundColor","reorderMarkerBorderWidth","reorderMarkerBorderColor","reorderMarkerIndexBorderWidth","reorderMarkerIndexBorderColor","sortRowIndex","drawReorderMarkers","moveOverlayBorderWidth","moveOverlayBorderColor","setLineDash","moveOverlayBorderSegments","drawCorner","scrollBarBorderColor","scrollBarBackgroundColor","scrollBarBoxColor","scrollBarActiveColor","scrollBarBoxBorderRadius","scrollBarCornerBorderColor","scrollBarCornerBackgroundColor","drawScrollBars","gridBorderWidth","gridBorderColor","showPerformance","pop","debugFont","perf","perfDelta","frozenColumnsWidth","getFrozenColumnsWidth","htmlImages","scrollIndex","scrollPixel","canvasOffset","touchPPS","touchPPST","size","touch","debugBackgroundColor","debugColor","drawDebug","pw","px","py","ph","debugPerfChartBackground","debugScrollHeightColor","debugScrollWidthColor","debugPerformanceColor","debugEntitiesColor","debugTouchPPSXColor","debugTouchPPSYColor","dpl","perfArr","arrIndex","useAbs","drawPerfLine","debugPerfChartTextColor","drawPerfLines","createBorderOverlayArray","drawArray","propPrefix","offsetPoint","headerIndex","columnOrderIndex","cellStyle","hovered","active","rawValue","activeHeader","orderByArrowSize","treeArrowSize","fontHeight","horizontalAlignment","verticalAlignment","paddingLeft","paddingTop","paddingRight","paddingBottom","cellWhiteSpace","cellLineHeight","lineSpacing","cellLineSpacing","calculatedLineHeight","paddedWidth","paddedHeight","userHeight","userWidth","cellHeightWithChildGrid","cellWidthWithChildGrid","mt","mr","ml","aw","ah","treeArrowColor","treeArrowBorderColor","drawTreeArrow","showRowNumbers","component","cellGridHeight","columnHeaderOrderByArrowMarginTop","columnHeaderOrderByArrowMarginLeft","columnHeaderOrderByArrowMarginRight","columnHeaderOrderByArrowWidth","columnHeaderOrderByArrowHeight","columnHeaderOrderByArrowColor","columnHeaderOrderByArrowBorderColor","drawOrderByArrow","orderByArrowWidth","filterTextPrefix","splitChar","lines","word","elWidth","elClipLength","plWidth","clippedVal","previousLine","words","textHeight","wrap","et","ellipsisText","line","cHeight","measure","wrapText","vPos","hPos","idx_ord","drawText","selectionBorderTop","selectionBorderRight","selectionHandle","selectionBorderLeft","selectionBorderBottom","selectionHandleBehavior","createHandlesOverlayArray","treeHeight","rowSansTreeHeight","__WEBPACK_AMD_DEFINE_ARRAY__","typeMap","getDefaultItem","base","toLowerCase","nextLetterCap","char","cust","supressChangeAndDrawEvents","cStyle","defs","computedStyle","getPropertyValue","strData","strSchema","strNum","boolean","strBool","str","getObservableAttributes","attrs","attr","disconnectedCallback","this","connected","connectedCallback","observe","adoptedCallback","attributeChangedCallback","attrName","oldVal","newVal","tfn","eval","MutationObserver","mutations","checkInnerHTML","checkStyle","mutation","attributeName","addedNodes","characterData","childList","subtree","querySelectorAll","slice","arguments","Grid","createShadowRoot","attachShadow","HTMLElement","customElements","observedAttributes","canvasDatagrid","require","tKeys","argKey","tKey","sKey"],"mappings":"CAAA,SAAAA,EAAAC,GACA,iBAAAC,SAAA,iBAAAC,OACAA,OAAAD,QAAAD,IACA,mBAAAG,eAAAC,IACAD,UAAAH,GACA,iBAAAC,QACAA,QAAA,eAAAD,IAEAD,EAAA,eAAAC,IARA,CASCK,OAAA,WACD,mBCTA,IAAAC,KAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAP,QAGA,IAAAC,EAAAI,EAAAE,IACAC,EAAAD,EACAE,GAAA,EACAT,YAUA,OANAU,EAAAH,GAAAI,KAAAV,EAAAD,QAAAC,IAAAD,QAAAM,GAGAL,EAAAQ,GAAA,EAGAR,EAAAD,QA0DA,OArDAM,EAAAM,EAAAF,EAGAJ,EAAAO,EAAAR,EAGAC,EAAAQ,EAAA,SAAAd,EAAAe,EAAAC,GACAV,EAAAW,EAAAjB,EAAAe,IACAG,OAAAC,eAAAnB,EAAAe,GAA0CK,YAAA,EAAAC,IAAAL,KAK1CV,EAAAgB,EAAA,SAAAtB,GACA,oBAAAuB,eAAAC,aACAN,OAAAC,eAAAnB,EAAAuB,OAAAC,aAAwDC,MAAA,WAExDP,OAAAC,eAAAnB,EAAA,cAAiDyB,OAAA,KAQjDnB,EAAAoB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAAnB,EAAAmB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFAxB,EAAAgB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAAnB,EAAAQ,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAvB,EAAA2B,EAAA,SAAAhC,GACA,IAAAe,EAAAf,KAAA2B,WACA,WAA2B,OAAA3B,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAK,EAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD7B,EAAAgC,EAAA,GAIAhC,IAAAiC,EAAA,qBClFA,IAAAC,OAoTCC,KAlTDD,EAAA,WACA,aACA,gBAAAE,GACAA,EAAAC,UACAC,aACA,6BACA,yBACA,iCACA,yBACA,4BACA,4BACA,4BACA,0BACA,sBACA,8BACA,oBACA,0BACA,yBACA,8BACA,wBACA,mDACA,qCACA,kDACA,4CACA,kCACA,+BACA,+BACA,8BACA,oBACA,aACA,gBACA,uBACA,iCACA,mCACA,uBACA,6BACA,6BACA,iBACA,YACA,wBACA,sBACA,+BACA,iDACA,sBACA,wBACA,sBACA,sBACA,oCACA,yBACA,wBACA,kCACA,mCACA,yBACA,gCACA,2BACA,+BACA,yBACA,0BACA,gBACA,kBACA,kBACA,yBACA,qDACA,uDACA,iBACA,uBACA,sBACA,sBACA,iBACA,+BACA,oBACA,oCACA,iCACA,wCACA,uBACA,6BACA,8BACA,oBACA,sBACA,oBACA,YACA,4BAEAC,SACA,uDACA,mDACA,4BACA,uCACA,qCACA,4DACA,yCACA,4CACA,yDACA,mCACA,8BACA,4BACA,6BACA,2BACA,+DACA,+CACA,yCACA,mEACA,mDACA,gEACA,gDACA,gCACA,gCACA,sBACA,6BACA,iDACA,6CACA,sBACA,iCACA,+BACA,uBACA,kBACA,gCACA,mCACA,sDACA,sCACA,wBACA,sBACA,uBACA,qBACA,yDACA,yCACA,mCACA,kBACA,+BACA,4BACA,qBACA,sBACA,qDACA,yCACA,mCACA,iCACA,6DACA,yDACA,kCACA,gEACA,4DACA,qCACA,gDACA,2CACA,8BACA,+CACA,kEACA,kDACA,oCACA,kCACA,mCACA,iCACA,+CACA,iEACA,0CACA,2DACA,qCACA,yCACA,0CACA,wCACA,qCACA,iEACA,0CACA,uCACA,uDACA,gEACA,uCACA,4CACA,8CACA,sCACA,8DACA,6DACA,gDACA,wCACA,sCACA,mDACA,yDACA,kCACA,yCACA,2CACA,gCACA,mDACA,2CACA,+DACA,uCACA,+BACA,wDACA,iDACA,sCACA,gCACA,2CACA,uCACA,qCACA,oCACA,4BACA,4BACA,8BACA,6BACA,+BACA,0BACA,uDACA,mDACA,6CACA,sCACA,kDACA,gCACA,sDACA,uDACA,qDACA,sDACA,oDACA,mDACA,kDACA,2BACA,oCACA,sDACA,kDACA,0BACA,oCACA,4BACA,0BACA,uBACA,oDACA,0DACA,qDACA,2DACA,+CACA,qDACA,8BACA,wBACA,iDACA,kCACA,6CACA,sBACA,kBACA,wBACA,uBACA,sBACA,wBACA,oBACA,uBACA,+BACA,6BACA,sCACA,8BACA,6BACA,mDACA,sCACA,mBACA,qBACA,qBACA,sDACA,kDACA,kCACA,0DACA,uCACA,0DACA,sDACA,+BACA,6CACA,wCACA,2BACA,4CACA,+DACA,+CACA,iCACA,+BACA,gCACA,8BACA,kEACA,qDACA,4CACA,0BACA,kDACA,sDACA,kDACA,4BACA,mCACA,+CACA,yBACA,2BACA,wBACA,4DACA,wDACA,sBACA,wDACA,mCACA,iDACA,0BACA,iCACA,wDACA,kCACA,kDACA,2BACA,2BACA,4CACA,sBACA,0BACA,2BACA,yBACA,sBACA,uBACA,oBAICC,MAAA9C,SAAAC,EAAAD,QAAAwC,oBCpTD,IAAAA,OA2qCCC,KAzqCDD,EAAA,WACA,aACA,gBAAAE,GAQAA,EAAAK,eAAA,SAAAd,GAKA,IAJA,IAAAe,EAAA,IAAAC,WAAA,GAEAC,EADA,IAAAD,WAAA,GACAD,EAAA,EACAT,EAAA,GACAN,GAAA,GACAM,EAAAY,OAAAC,aAAAnB,EAAAiB,EAAAF,GAAAT,EACAN,EAAAoB,KAAAC,MAAArB,EAAAiB,GAAA,EAEA,OAAAX,GAWAG,EAAAa,aAAA,SAAA1C,EAAA2C,GACA,IAAAjB,EAAAG,EAAAe,YACA,GAAAlB,EAAAmB,OAAAF,EACA,UAAAG,MAAA,6CAEAjB,EAAAkB,eAAA/C,EAAA0B,GACAA,EAAAsB,OAAAL,EAAA,EAAA3C,GACA6B,EAAAoB,KAAAC,QAAA,SAAAC,GACAtB,EAAAuB,kBAAAD,EAAAnD,KAEA6B,EAAAwB,KAAAC,OAAA5B,GAUAG,EAAA0B,aAAA,SAAAZ,GACA,IAAAjB,EAAAG,EAAAe,YAEAf,EAAAoB,KAAAC,QAAA,SAAAC,UACAA,EAAAzB,EAAAiB,GAAAzC,QAEAwB,EAAAsB,OAAAL,EAAA,GACAd,EAAAwB,KAAAC,OAAA5B,GAUAG,EAAA2B,UAAA,SAAAxD,GACA,IAAA0B,EAAAG,EAAAe,YACAf,EAAAkB,eAAA/C,EAAA0B,GACAA,EAAA+B,KAAAzD,GACA6B,EAAAoB,KAAAC,QAAA,SAAAC,GACAtB,EAAAuB,kBAAAD,EAAAnD,KAEA6B,EAAAwB,KAAAC,OAAA5B,GASAG,EAAA6B,UAAA,SAAAf,GACAd,EAAA8B,aAAAX,OAAAL,EAAA,GACAd,EAAA+B,YACA/B,EAAAgC,QAAA,IAUAhC,EAAAiC,UAAA,SAAA7D,EAAA0C,GACA,GAAAd,EAAA8B,aAAAd,OAAAF,EACA,UAAAG,MAAA,8CAEAjB,EAAA8B,aAAAX,OAAAL,EAAA,EAAA1C,GACA4B,EAAAe,YAAAM,QAAA,SAAAlD,QACA4B,IAAA3B,EAAAD,EAAAE,OACA2B,EAAAuB,kBAAAvB,EAAA8B,aAAAhB,GAAA3C,KAGA6B,EAAA+B,YACA/B,EAAAgC,QAAA,IASAhC,EAAAkC,OAAA,SAAA9D,GACA4B,EAAA8B,aAAAF,KAAAxD,GACA4B,EAAAe,YAAAM,QAAA,SAAAlD,QACA4B,IAAA3B,EAAAD,EAAAE,OACA2B,EAAAuB,kBAAAvB,EAAA8B,aAAA9B,EAAA8B,aAAAd,OAAA,GAAA7C,KAGA6B,EAAA+B,YACA/B,EAAAgC,QAAA,IAUAhC,EAAAmC,aAAA,SAAAC,EAAAC,GACArC,EAAAsC,MAAAC,KAAAH,GAAAC,EACArC,EAAAwC,MAAA,IAUAxC,EAAAyC,eAAA,SAAAC,EAAAC,GACA3C,EAAAsC,MAAAM,QAAAF,GAAAC,EACA3C,EAAAwC,MAAA,IASAxC,EAAA6C,kBAAA,WACA7C,EAAAsC,MAAAM,WACA5C,EAAAwC,MAAA,IASAxC,EAAA8C,gBAAA,WACA9C,EAAAsC,MAAAC,QACAvC,EAAAwC,MAAA,IAUAxC,EAAA+B,UAAA,SAAAgB,EAAAhE,GACA,SAAAiE,IACAhD,EAAAiD,yBACAzE,OAAA0E,KAAAlD,EAAAmD,eAAA9B,QAAA,SAAA+B,GACA,IAAAC,EAAArD,EAAAsD,gBAAAP,GACAM,IAGArD,EAAAuD,cAAAF,EAAAD,QAAApD,EAAAoD,OAAAL,EAAAS,MAAA,UACAxD,EAAAoB,KAAApB,EAAAoB,KAAAgC,OAAA,SAAA9B,GACA,OAAAtB,EAAAuD,cAAAjC,EAAA8B,GAAApD,EAAAmD,cAAAC,SAGApD,EAAAgC,SACAhC,EAAAwC,MAAA,GAEA,QAAAzC,IAAAgD,QAAAhD,IAAAhB,EAEA,OADAiB,EAAAmD,iBACAH,KAEAD,GAAA,KAAAhE,QAAAgB,IAAAhB,EAGAiB,EAAAmD,cAAAJ,GAAAhE,SAFAiB,EAAAmD,cAAAJ,GAIAC,KASAhD,EAAAyD,iBAAA,SAAArB,GACA,QAAArC,IAAAC,EAAA0D,YAAAC,EAAAvB,GAA6D,UAAAwB,WAAA,2BAC7D,OAAA5D,EAAA0D,YAAAC,EAAAvB,IASApC,EAAA6D,qBAAA,SAAAC,GACA,IAAAhG,EAAA6C,KAAAoD,IAAAD,EAAA,KACA,QAAA/D,IAAAC,EAAA0D,YAAAM,EAAAlG,GAAsD,UAAAmD,MAAA,8BACtD,OAAAjB,EAAA0D,YAAAM,EAAAlG,GAAAkC,EAAAiE,gBAAAjE,EAAAkE,OAAAtB,QAAAkB,KAYA9D,EAAAmE,SAAA,SAAAH,EAAAL,EAAAS,EAAAC,GACA,IAEAC,EAFAC,OAAAxE,IAAAiE,OAAAjE,EAAAC,EAAA6D,qBAAAG,GACAQ,OAAAzE,IAAA4D,OAAA5D,EAAAC,EAAAyD,iBAAAE,GAEAc,EAAAzE,EAAA0E,UAAA/B,OAAA3C,EAAA0E,UAAAC,mBAAA3E,EAAA4E,MAAAC,eAAA,GACAC,EAAA9E,EAAA0E,UAAArC,QAAArC,EAAA0E,UAAAK,qBAAA/E,EAAA4E,MAAAC,eAAA,GAGAN,GAAAE,GAFAL,OAAArE,IAAAqE,EAAA,EAAAA,GAGAI,GAAAM,GAFAT,OAAAtE,IAAAsE,EAAA,EAAAA,QAGAtE,IAAAiE,QAAAjE,IAAA4D,GACA3D,EAAA0E,UAAAM,SAAAT,EAAAC,GACAS,sBAAA,YACAX,EAAAtE,EAAAkF,sBAAAlB,EAAAL,MAIAY,GAAAD,EAAA3B,MAAAyB,EACAI,GAAAF,EAAAjC,OAAAgC,EACArE,EAAA0E,UAAAM,SAAAT,EAAAC,YAEazE,IAAAiE,EACbhE,EAAA0E,UAAAS,WAAAZ,OACaxE,IAAA4D,IACb3D,EAAA0E,UAAAU,UAAAZ,IAUAxE,EAAAqF,QAAA,SAAA1B,GACA3D,EAAAmE,SAAA,EAAAR,IAYA3D,EAAAsF,eAAA,SAAAtB,EAAAL,EAAAS,EAAAC,GAQiB,IAPjBrE,EAAAuF,aAAAnC,OAAA,SAAAkB,GACA,OAAAA,EAAAlC,WAAAuB,QAAA5D,IAAA4D,KACAW,EAAAR,cAAAE,QAAAjE,IAAAiE,IACAM,EAAAN,EAAA,GACAM,EAAAX,EAAA,GACAW,EAAAN,EAAAM,EAAA3B,MAAA3C,EAAA2C,OACA2B,EAAAX,EAAAW,EAAAjC,OAAArC,EAAAqC,SACiBrB,QACjBhB,EAAAmE,SAAAH,EAAAL,EAAAS,EAAAC,IAWArE,EAAAwF,cAAA,SAAAxB,EAAAL,GACAK,EAAA,IAAwBA,EAAA,GACxBL,EAAA,IAAwBA,EAAA,GACxB3D,EAAAyF,YACArD,SAAAuB,EACAG,YAAAE,IAUAhE,EAAA0F,WAAA,SAAAC,GACA3F,EAAA4F,cACA5F,EAAA6F,cAAA,oBACAC,aAAA9F,EAAA+F,kBACAH,WAAA5F,EAAA4F,WACAI,gBAAAhG,EAAAgG,kBAEAL,GACA3F,EAAAwC,QASAxC,EAAAiG,UAAA,SAAAN,GACA3F,EAAAkG,YACAC,IAAA,EACAC,KAAA,EACAC,MAAArG,EAAAe,YAAAC,OACAsF,OAAAtG,EAAAoB,KAAAJ,OAAA,IAEA2E,GACA3F,EAAAwC,QASAxC,EAAAuG,iBAAA,SAAAzC,GACA,IAAA0C,GAAA,EAMA,OALAxG,EAAAoB,KAAAC,QAAA,SAAAC,EAAAc,GACApC,EAAA4F,WAAAxD,KAAA,IAAApC,EAAA4F,WAAAxD,GAAAqE,QAAAzG,EAAAkE,OAAAtB,QAAAkB,MACA0C,GAAA,KAGAA,GAUAxG,EAAA0G,oBAAA,SAAAC,EAAAC,GACA,IAAAxI,KAAAyB,EAAA+G,EAAA5G,EAAAe,YAAAf,EAAA6G,mBAAA9I,EAAAiC,EAAAoB,KAAAJ,OACAhB,EAAA4F,WAAAvE,QAAA,SAAAC,EAAAR,GACAA,IAAA/C,IACA,IAAAuD,EAAAN,QAIA5C,EAAA0C,MACAQ,EAAAD,QAAA,SAAAyF,IACA,IAAAA,GAAAjH,EAAAiH,IACAH,EAAA3G,EAAAoB,KAAAN,EAAAjB,EAAAiH,GAAAzI,SANAD,EAAA0C,GAAA,SAoBAd,EAAA+G,aAAA,SAAAjD,EAAAkD,EAAAC,EAAAC,GACA,IAAArH,EAAAsH,EAAAnD,EACA,SAAAoD,EAAAtJ,GACAkC,EAAAoB,KAAAC,QAAA,SAAAC,EAAAc,GACApC,EAAA4F,WAAAxD,GAAApC,EAAA4F,WAAAxD,QACA,IAAApC,EAAA4F,WAAAxD,GAAAqE,QAAA3I,IACAkC,EAAA4F,WAAAxD,GAAAR,KAAA9D,KAYA,GAAAmJ,EAAA,CACA,IAAAjH,EAAAyF,WAAuC,OAGvC,IAFA5F,EAAAc,KAAA0G,IAAArH,EAAAyF,WAAA3B,eACAqD,EAAAxG,KAAAoD,IAAA/D,EAAAyF,WAAA3B,eACAE,EAAAnE,EAA2BsH,EAAAnD,EAAOA,GAAA,EAClCoD,EAAApD,GAGAgD,GAAAC,IACAjH,EAAA4F,cACA5F,EAAAyF,WAAA3B,cACA9D,EAAAyF,WAAArD,SAAApC,EAAAsH,gBAEAN,GAAAhH,EAAAuG,iBAAAzC,GArBA,SAAAhG,GACAkC,EAAAoB,KAAAC,QAAA,SAAAC,EAAAc,GACApC,EAAA4F,WAAAxD,GAAApC,EAAA4F,WAAAxD,QACA,IAAApC,EAAA4F,WAAAxD,GAAAqE,QAAA3I,IACAkC,EAAA4F,WAAAxD,GAAAjB,OAAAnB,EAAA4F,WAAAxD,GAAAqE,QAAA3I,GAAA,KAkBAyJ,CAAAzD,GAEAsD,EAAAtD,GAEAoD,GACAlH,EAAA6F,cAAA,oBACAC,aAAA9F,EAAA+F,kBACAH,WAAA5F,EAAA4F,WACAI,gBAAAhG,EAAAwH,wBAaAxH,EAAAyH,UAAA,SAAArF,EAAA4E,EAAAC,EAAAC,GACA,IAAAlD,EAAA0D,EAAAC,EAAA9H,EAAAG,EAAA6G,mBACA,SAAA3E,EAAA0F,GACA5H,EAAA4F,WAAAgC,MACA5H,EAAA4F,WAAAgC,GAAAhG,MAAA,GACA/B,EAAAwB,QAAA,SAAAyF,EAAAhG,GACAd,EAAA4F,WAAAgC,GAAAhG,KAAA5B,EAAAkE,OAAAtB,QAAA6D,QAAAK,EAAAhG,UAGA,QAAAd,EAAA6H,yBAAA9H,IAAAC,EAAA8H,aACA9H,EAAA4F,WAAAxD,IAAApC,EAAA4F,WAAAxD,GAAApB,OAAA,IAAAnB,EAAAmB,SACAgG,EAFA,CAQA,QAAAhH,EAAA6H,yBAAA9H,IAAAC,EAAA8H,WACA,GAAAb,QAAAlH,IAAAC,EAAA8H,WAAA,CACA,IAAA9H,EAAAyF,WAA2C,OAG3C,IAFAiC,EAAA/G,KAAA0G,IAAArH,EAAAyF,WAAArD,YACAuF,EAAAhH,KAAAoD,IAAA/D,EAAAyF,WAAArD,YACA4B,EAAA0D,EAAgCC,GAAA3D,EAASA,GAAA,EACzC9B,EAAA8B,QAGA9B,EAAAE,GAGA8E,GACAlH,EAAA6F,cAAA,oBACAC,aAAA9F,EAAA+F,kBACAH,WAAA5F,EAAA4F,WACAI,gBAAAhG,EAAAgG,uBArBAhG,EAAA4F,WAAAxD,OA+BApC,EAAA+H,aAAA,SAAA3F,GACApC,EAAA6F,cAAA,gBACAmC,UAAAhI,EAAAiI,WAAA7F,GACAhB,KAAApB,EAAAoB,KAAAgB,GACAA,aAEApC,EAAAkI,aAAA9F,GAAA+F,OACAnI,EAAAkI,aAAA9F,GAAAgG,iBACApI,EAAAkI,aAAA9F,UACApC,EAAAsC,MAAA+F,MAAAjG,UACApC,EAAAiI,WAAA7F,GACApC,EAAA6F,cAAA,aACAyC,WAAAtI,EAAA4E,MAAA0D,aAEAtI,EAAAgC,QAAA,GACAhC,EAAAwC,MAAA,IASAxC,EAAAuI,WAAA,SAAAnG,GACA,IAIAoG,EAJAC,EAAAzI,EAAA0I,KAAAC,uBACAC,EAAA5I,EAAA6I,4BACAC,EAAA9I,EAAAsC,MAAAM,QAAAmG,YAAA/I,EAAA4E,MAAAkE,mBACAE,EAAAhJ,EAAAsC,MAAA+F,MAAAjG,IAAApC,EAAA4E,MAAAqE,eAEAjJ,EAAAiI,WAAA7F,KACAqG,EAAAS,MAAAlJ,EAAAE,WAAAgJ,MACAT,EAAApK,KAAA2B,EAAAE,WAAAiJ,eAAAnJ,EAAAE,WAAA7B,KAAA,OAAA+D,OAAArC,EACA0I,EAAA7D,MAAA6D,EAAA7D,OAAA5E,EAAA4E,MACA6D,EAAAW,YACAC,WAAArJ,EAAAwB,KACA8H,SAAA,uBACAC,aAAAP,EACAQ,YAAAxJ,EAAA2C,MAAAmG,EACAzF,QAA6BV,MAAA3C,EAAA2C,MAAAmG,GAC7BW,WAAAX,EACAY,UAAAd,EACAe,aAAA3J,EAAAwB,KAAA4H,WACAA,WAAApJ,EAAAwB,KAAA4H,WACAxE,MAAA,OACAxD,KAAApB,EAAAoB,KAAAgB,IAEAoG,EAAAxI,EAAA4J,WAAAnB,GACAzI,EAAAiI,WAAA7F,GAAAoG,IAEAA,EAAAxI,EAAAiI,WAAA7F,IACAyH,SAAA,EACA7J,EAAA6F,cAAA,cACA2C,WACApH,KAAApB,EAAAoB,KAAAgB,GACAA,aAEApC,EAAAkI,aAAA9F,GAAAoG,EACAxI,EAAAsC,MAAA+F,MAAAjG,GAAA4G,EACAhJ,EAAA6F,cAAA,aAA6CxD,OAAArC,EAAA4E,MAAA0D,aAC7CtI,EAAAgC,QAAA,IASAhC,EAAA8J,WAAA,SAAA1H,GAEA,GADApC,EAAAkI,aAAA9F,GAEA,OAAApC,EAAA+H,aAAA3F,GAEApC,EAAAuI,WAAAnG,IAWApC,EAAAsD,gBAAA,SAAAjF,GACA,IAAA2F,EAAAlG,EAAAkC,EAAAe,YACA,IAAAiD,EAAA,EAAuBA,EAAAlG,EAAAkD,OAAcgD,GAAA,EACrC,GAAAlG,EAAAkG,GAAA3F,SACA,OAAAP,EAAAkG,IAYAhE,EAAA+J,kBAAA,SAAA1L,EAAA2L,GACAhK,EAAAiK,SACAjK,EAAAsC,MAAAM,QAAA,eAAAvE,GAAA,EAAA2B,EAAAsD,gBAAAjF,GAAAyC,OACAH,KAAAoD,IAAA/D,EAAAkK,wBAAA7L,GAAA2B,EAAA4E,MAAAuF,gBACAH,IACAhK,EAAAgC,SACAhC,EAAAwC,MAAA,MAqBAxC,EAAAoK,cAAA,SAAA9F,EAAAlC,GAEA,QAAArC,IAAAqC,EACA,OAAApC,EAAAuF,aAAAnC,OAAA,SAAAjF,GACA,OAAAA,EAAA2F,cAAAQ,GAAAnG,EAAAiE,eACiBpB,OAAA,EAEjB,IAAAgD,EAAAjG,EAAAiC,EAAAuF,aAAAvE,OACA,IAAAgD,EAAA,EAAuBA,EAAAjG,EAAOiG,GAAA,EAC9B,GAAAM,EAAAN,IAAAhE,EAAAuF,aAAAvB,MAAAM,EAAAX,IAAA3D,EAAAuF,aAAAvB,GAAAL,EACA,SAGA,UAaA3D,EAAAqK,MAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAC,EACAvM,EAAA6B,EAAAe,YAAAqC,OAAA,SAAA0D,GACA,OAAAA,EAAAzI,OAAAiM,IAEA,IAAAtK,EAAA6F,cAAA,oBAAwDxH,KAAAiM,EAAAC,gBACxDvK,EAAA2K,QAAAL,EACAtK,EAAAoB,MAAA,IAAApB,EAAAoB,KAAAJ,QAAA,CACA,OAAA7C,EAAA6C,OACA,UAAAC,MAAA,sCAEAyJ,EAAAF,GAAAxK,EAAA4K,QAAAzM,EAAA,GAAAqF,aACAzD,IAAA5B,EAAA,GAAAqF,MACAqH,QAAAC,KAAA,qDAAA3M,EAAA,GAAAqF,MAEAxD,EAAAoB,KAAApB,EAAAoB,KAAA2J,KAAA,mBAAAL,IAAAJ,EAAAC,GAAAvK,EAAA4K,QAAAI,QACAhL,EAAA6F,cAAA,cAA8CxH,KAAAiM,EAAAC,cAC9CvK,EAAAwC,MAAA,GACAiI,GACAzK,EAAAiL,mBAEAjL,EAAAkL,SAAA,SAAA/D,GACA,QAAAA,EAAAnD,EAAA,GACAmD,EAAAnD,EAAAhE,EAAA2C,OACAwE,EAAAxD,EAAA,GACAwD,EAAAxD,EAAA3D,EAAAqC,SAaArC,EAAAmL,cAAA,SAAA/G,EAAAC,GACA,IAAA+G,KACApL,EAAA4F,WAAAvE,QAAA,SAAAC,EAAAc,GACAgJ,EAAAhJ,EAAAiC,MACA/C,EAAAD,QAAA,SAAAqB,GACA0I,EAAAhJ,EAAAiC,GAAAzC,KAAAc,EAAA0B,OAGApE,EAAA4F,WAAAwF,GAWApL,EAAAqL,OAAA,SAAAD,EAAApH,EAAAL,GACA,IAGA2H,EAHAlN,EAAA4B,EAAA+F,kBACAlG,EAAAG,EAAA6G,mBACA9I,EAAAqN,EAAApK,OAEAuK,GAAAC,IACAC,EAAAD,IACAE,EAAA/H,EAAA,EACAyH,EAAA/J,QAAA,SAAAC,EAAAR,GACAA,IAAA/C,GACA,IAAAuD,EAAAN,SACAyK,EAAA9K,KAAA0G,IAAArH,EAAA2L,wBAAA3H,GAAAyH,GACAF,EAAA5K,KAAAoD,IAAAwH,EAAAjK,EAAAN,QACAM,EAAAD,QAAA,SAAAqB,GAEAA,EAAA1C,EAAA2L,wBAAAjJ,GACA7C,EAAA6C,KACA1C,EAAAoB,KAAAN,KAA4Cd,EAAAoB,KAAAN,OAC5Cd,EAAAoB,KAAAN,GAAAjB,EAAA6C,GAAArE,MAAA,WAGA+M,EAAA/J,QAAA,SAAAC,EAAAR,GACA,IAAA8K,EACAF,GAAA,EACAJ,EAAAtL,EAAA2L,wBAAA3H,GACA1C,EAAAD,QAAA,SAAAqB,EAAAmJ,GACAnJ,EAAA1C,EAAA2L,wBAAAjJ,GACAmJ,EAAA,IAGAP,GAAA5I,EAAAkJ,GAEAA,EAAAlJ,GACA,IAAAA,IACA7C,EAAAyL,KACAzL,EAAA6C,IACA1C,EAAAoB,KAAAJ,OAAA,EAAA0K,GACAA,EAAA,IACA1L,EAAAoB,KAAAsK,KAAyC1L,EAAAoB,KAAAsK,OACzC1L,EAAAoB,KAAAsK,GAAA7L,EAAAyL,GAAAjN,MAAAD,EAAA0C,GAAAjB,EAAA6C,GAAArE,YAYA2B,EAAA8L,gBAAA,SAAAhI,GACA,OAAA9D,EAAAuF,aAAAnC,OAAA,SAAAjF,GACA,OAAAA,EAAA2F,kBACa9C,OAAA,GAUbhB,EAAA+L,aAAA,SAAA3J,GACA,OAAApC,EAAAuF,aAAAnC,OAAA,SAAAjF,GACA,OAAAA,EAAAiE,eACapB,OAAA,GAWbhB,EAAAkF,sBAAA,SAAAlB,EAAAL,GACA,OAAA3D,EAAAuF,aAAAnC,OAAA,SAAAjF,GACA,OAAAA,EAAA2F,cAAAE,GAAA7F,EAAAiE,WAAAuB,IACa,IAWb3D,EAAAgM,UAAA,SAAAhI,EAAAL,EAAAsI,GACA,SAAAC,EAAAC,GACA,OAAAA,EAAAnI,EAAAmI,EAAAxJ,MAAA,GAAA3C,EAAAE,WAAAkM,iBAAApI,GAAAmI,EAAAnI,EAAAmI,EAAAxJ,MAAA,GAAA3C,EAAAE,WAAAkM,iBAAApI,EACA,IAEAmI,EAAAnI,EAAA,GAAAhE,EAAAE,WAAAkM,iBAAApI,GAAAmI,EAAAnI,EAAA,GAAAhE,EAAAE,WAAAkM,iBAAApI,EACA,IAEAmI,EAAAxI,EAAAwI,EAAA9J,OAAA,GAAArC,EAAAE,WAAAkM,iBAAAzI,GAAAwI,EAAAxI,EAAAwI,EAAA9J,OAAA,GAAArC,EAAAE,WAAAkM,iBAAAzI,EACA,IAEAwI,EAAAxI,EAAA,GAAA3D,EAAAE,WAAAkM,iBAAAzI,GAAAwI,EAAAxI,EAAA,GAAA3D,EAAAE,WAAAkM,iBAAAzI,EACA,SADA,EAIA,GAAA3D,EAAAuF,aAAA,CACA,IAAA8G,EAGAvO,EAEAwO,EAGAhI,EACA6H,EARAI,EAAAN,EAAAjM,EAAAE,WAAAsM,gBAAA,EACAC,EAAA,SAAAzM,EAAAE,WAAAwM,mBAEA3O,EAAAiC,EAAAuF,aAAAvE,OAEA2L,EAAAF,EAAAzM,EAAA4M,WAAA,YACAC,EAAAJ,EAAAzM,EAAA4M,WAAA,YAGA,GAAA5M,EAAAuF,cAAAvF,EAAAuF,aAAAvE,OAAA,CAEA,GADAhB,EAAA8M,UAAA,IACAnJ,EAAA3D,EAAAqC,QACAsB,EAAA,GACAK,EAAAhE,EAAA2C,OACAqB,EAAA,GAEA,OADAhE,EAAA8M,UAAA,GAEAC,YAAA,UACAC,QAAA,WAGA,IAAAlP,EAAA,EAAuBA,EAAAC,EAAOD,GAAA,EAe9B,GAZAqO,GACAnI,GAHAM,EAAAtE,EAAAuF,aAAAzH,IAGAkG,EACAL,EAAAW,EAAAX,EACAtB,OAAAiC,EAAAjC,OACAM,MAAA2B,EAAA3B,OAEAsJ,GAAA,gCAAAgB,KAAA3I,EAAAM,SACAuH,EAAAnI,GAAAuI,EACAJ,EAAAxI,GAAA4I,EACAJ,EAAA9J,QAAAkK,EACAJ,EAAAxJ,OAAA4J,GAEAJ,EAAAnI,EAAAhE,EAAA4E,MAAAsI,gBAAAlJ,GACAmI,EAAAnI,EAAAmI,EAAAxJ,MAAA3C,EAAA4E,MAAAsI,gBAAAlJ,GACAmI,EAAAxI,EAAA3D,EAAA4E,MAAAsI,gBAAAvJ,GACAwI,EAAAxI,EAAAwI,EAAA9J,OAAArC,EAAA4E,MAAAsI,gBAAAvJ,EAAA,CACA,uBAAAsJ,KAAA3I,EAAAM,OAGA,OAFAN,EAAAyI,YAAAzI,EAAAM,MACAN,EAAA0I,QAAA,aACA1I,EAEA,0BAAA2I,KAAA3I,EAAAM,OAGA,OAFAN,EAAAyI,YAAAzI,EAAAM,MACAN,EAAA0I,QAAA,aACA1I,EAEA,uBAAA2I,KAAA3I,EAAAM,OAGA,OAFAN,EAAAyI,YAAAzI,EAAAM,MACAN,EAAA0I,QAAA,YACA1I,EAEA,+BAAA2I,KAAA3I,EAAAM,OAaA,OAZAN,EAAAyI,YAAA,sBACAzI,EAAA0I,QAAA,sBACA1I,EAAA6I,aAAA,EACA7I,EAAA8I,qBAAA,EACAzJ,EAAA3D,EAAA0E,UAAA2I,IAAAC,EAAA3J,EAAA3D,EAAA0E,UAAA6I,iBACAjJ,EAAAyI,YAAA,yBACAzI,EAAA0I,QAAA,0BACyBrJ,EAAA3D,EAAA0E,UAAA2I,IAAAC,EAAA3J,IACzBW,EAAAyI,YAAA,sBACAzI,EAAA0I,QAAA,uBAEAhN,EAAAwN,OAAA,UACAlJ,EAEA,iCAAA2I,KAAA3I,EAAAM,OAaA,OAZAN,EAAAyI,YAAA,wBACAzI,EAAA0I,QAAA,wBACA1I,EAAA6I,aAAA,EACA7I,EAAAmJ,uBAAA,EACAzJ,EAAAhE,EAAA0E,UAAA2I,IAAArE,EAAAhF,EAAAhE,EAAA0E,UAAAgJ,gBACApJ,EAAAyI,YAAA,0BACAzI,EAAA0I,QAAA,2BACyBhJ,EAAAhE,EAAA0E,UAAA2I,IAAArE,EAAAhF,IACzBM,EAAAyI,YAAA,yBACAzI,EAAA0I,QAAA,0BAEAhN,EAAAwN,OAAA,UACAlJ,EAKA,GAHA+H,EAAAH,EAAAC,GAEAG,EAAAG,GAAAnI,EAAAqJ,kBAAA,IAAArJ,EAAAqJ,gBAAAlH,QAAA4F,IACA,cAAA5F,QAAA4F,KACArM,EAAAE,WAAA0N,mBAAAtB,KACAtM,EAAAE,WAAA2N,2BAAAvJ,EAAAwJ,WAAAxJ,EAAAwJ,UAAAxB,KACAtM,EAAAE,WAAA6N,uBAAAzJ,EAAA0J,aAAA1J,EAAA2J,YAAA3J,EAAA0J,cAAA1J,EAAA2J,UAAA,CACA,IAAA3J,EAAA4J,gBAAA5J,EAAA2J,UAAAjO,EAAAE,WAAA2N,2BAAAvJ,EAAAwJ,WAAA,MAAAzB,EAGA,OAFA/H,EAAA0I,QAAA,YACA1I,EAAAyI,YAAA,YACAzI,EAEA,IAAAA,EAAA4J,iBAAA5J,EAAA2J,UAAA3B,EAGA,OAFAhI,EAAA0I,QAAAL,EACArI,EAAAyI,YAAAV,EAAA,QACA/H,EAGA,kBAAAmC,QAAA4F,IACA/H,EAAAlC,UAAA,IACApC,EAAAE,WAAAiO,gBAAA7B,KACAtM,EAAAE,WAAAkO,wBAAA9J,EAAAwJ,WAAAxJ,EAAAwJ,UAAAxB,KACAhI,EAAA4J,eAAA,CACA,IAAA5J,EAAA0J,aAAA1J,EAAA2J,UAAAjO,EAAAE,WAAAkO,wBAAA9J,EAAAwJ,WAAA,MAAAzB,EAGA,OAFA/H,EAAA0I,QAAA,YACA1I,EAAAyI,YAAA,YACAzI,EAEA,IAAAA,EAAA0J,cAAA1J,EAAA2J,UAAA3B,EAGA,OAFAhI,EAAA0I,QAAAH,EACAvI,EAAAyI,YAAAV,EAAA,QACA/H,EAGA,2BAAAA,EAAAM,OACAN,EAAA0I,QAAA,OACA1I,EAAAyI,YAAA,iBACAzI,GAEA,kBAAAA,EAAAM,OACA5E,EAAAE,WAAAmO,iBAAA/J,EAAAX,EAAA3D,EAAA4E,MAAAsI,iBAAAvJ,IACA3D,EAAAE,WAAAoO,oBACAhK,EAAAyI,YAAA,OACAzI,EAAA0I,QAAA,SAEA1I,EAAA0I,QAAAhN,EAAA4M,WACAtI,EAAAyI,YAAA,eAEAzI,GAEAA,EAAAiK,QACAvO,EAAA8M,UAAA,EACAxI,EAAAyI,YAAA,YACAzI,EAAA0I,QAAA,YACA1I,GAEA,cAAAA,EAAAM,OACA5E,EAAA8M,UAAA,EACAxI,EAAAyI,YAAA,OACAzI,EAAA0I,QAAA,OACA1I,IAEAA,EAAAyI,YAAA,OACAzI,EAAA0I,QAAA,OACA1I,GAKA,OAFAtE,EAAA8M,UAAA,EACA9M,EAAAwN,OAAA,WAEAT,YAAA,aACAC,QAAA,aACApI,MAAA,aACA4J,cAAA,MAUAxO,EAAAwH,mBAAA,WACA,IAAAiH,GAAuBzK,EAAAwH,IAAA7H,EAAA6H,KACvBkD,GAAwB1K,GAAAwH,IAAA7H,GAAA6H,KAUxB,OATAxL,EAAA4F,WAAAvE,QAAA,SAAAC,EAAAc,GACA,IAAAuM,EAAAC,EACAH,EAAA9K,EAAAvB,EAAAqM,EAAA9K,EAAAvB,EAAAqM,EAAA9K,EACA+K,EAAA/K,EAAAvB,EAAAsM,EAAA/K,EAAAvB,EAAAsM,EAAA/K,EACAgL,EAAAhO,KAAAoD,IAAA3D,MAAA,KAAAkB,GACAsN,EAAAjO,KAAA0G,IAAAjH,MAAA,KAAAkB,GACAmN,EAAAzK,EAAA4K,EAAAH,EAAAzK,EAAA4K,EAAAH,EAAAzK,EACA0K,EAAA1K,EAAA2K,EAAAD,EAAA1K,EAAA2K,EAAAD,EAAA1K,KAGAmC,IAAAsI,EAAA9K,EACAyC,KAAAqI,EAAAzK,EACAsC,OAAAoI,EAAA/K,EACA0C,MAAAqI,EAAA1K,IAWAhE,EAAA6O,kBAAA,SAAAzQ,GAEA,OADAA,KAAA4B,EAAAoB,KACA5C,OAAA0E,KAAA9E,EAAA,KAAwC0Q,IAAA,KAAQC,IAAA,SAAA1P,EAAAyB,GAChD,IAAA0C,EAAAxD,EAAAgP,qBAAA3P,EAAAjB,GACAN,GACAO,KAAAgB,EACA4P,MAAAC,MAAAC,SAAA9P,EAAA,KAAAA,EAAAW,EAAAK,eAAAhB,GAAA+P,cACAtO,QACA0C,OACAJ,OAAApD,EAAAoD,OAAAI,IAOA,OALAxD,EAAAqP,gBACArP,EAAAqP,eAAAC,iBACAvP,IAAAC,EAAAqP,eAAAC,WAAAxR,EAAAO,QACAP,EAAAyR,QAAAvP,EAAAqP,eAAAC,WAAAxR,EAAAO,OAEAP,KAWAkC,EAAAwP,eAAA,WACAxP,EAAAyP,YASAzP,EAAAkG,WAAA,SAAAwJ,EAAA1I,GACAhH,EAAAgG,gBAAA0J,GAAA1P,EAAAgG,gBACA,IAAA2J,EAAA3L,EAAAL,EAAA9D,EAAAG,EAAAe,YAIA,GAHAiG,IACAhH,EAAA4F,eAEA5F,EAAAgG,gBAAAG,KAAA,GACAnG,EAAAgG,gBAAAM,OAAAtG,EAAAoB,KAAAJ,QACAhB,EAAAgG,gBAAAI,MAAA,GACApG,EAAAgG,gBAAAK,MAAAxG,EAAAmB,OACA,UAAAC,MAAA,6BAEA,IAAA+C,EAAAhE,EAAAgG,gBAAAG,IAA8CnC,GAAAhE,EAAAgG,gBAAAM,OAAkCtC,GAAA,EAEhF,IADAhE,EAAA4F,WAAA5B,MACAL,EAAA3D,EAAAgG,gBAAAI,KAAmDzC,GAAA3D,EAAAgG,gBAAAK,MAAiC1C,GAAA,GACpF,IAAA3D,EAAA4F,WAAA5B,GAAAyC,QAAA9C,IACA3D,EAAA4F,WAAA5B,GAAApC,KAAA+B,GAIAgM,GACA/J,WAAA5F,EAAA4F,WACAI,gBAAAhG,EAAAgG,iBAEAxH,OAAAC,eAAAkR,EAAA,gBACAhR,IAAA,WACA,OAAAqB,EAAA+F,qBAGA/F,EAAA6F,cAAA,mBAAA8J,IAUA3P,EAAAkK,wBAAA,SAAA7L,GACA,IAAAH,GAAAsN,IACA,qBAAAnN,GACA2B,EAAA4P,IAAAC,KAAA7P,EAAA4E,MAAAkL,kBACA9P,EAAA4P,IAAAG,aAAA/P,EAAAoB,KAAAJ,QAAAhB,EAAAE,WAAA8P,WAAA,MAAAC,YAAAtN,MACA3C,EAAA4E,MAAAsL,gBAAAlQ,EAAA4E,MAAAuL,0BACAnQ,EAAA4E,MAAAwL,0BACApQ,EAAA4E,MAAAyL,0BACArQ,EAAAE,WAAAoQ,KAAAtQ,EAAA4E,MAAA2L,eACAvQ,EAAA4E,MAAA4L,oBAAAxQ,EAAA4E,MAAA6L,qBAAA,KAEAzQ,EAAAe,YAAAM,QAAA,SAAAyF,GACA,GAAAA,EAAAzI,SAAA,CACA2B,EAAA4P,IAAAC,KAAA7P,EAAA4E,MAAA8L,qBACA,IAAA1R,EAAAgB,EAAA4P,IAAAG,YAAAjJ,EAAAmI,OAAAnI,EAAAzI,MAAAsE,MACA3C,EAAA4E,MAAA+L,uBACA3Q,EAAA4E,MAAAgM,sBACA1S,EAAAc,EAAAd,EAAAc,EAAAd,KAEA8B,EAAAoB,KAAAC,QAAA,SAAAC,GACAtB,EAAA4P,IAAAC,KAAA7P,EAAA4E,MAAAiM,SACA,IAAA7R,EAAAgB,EAAA4P,IAAAG,YAAAzO,EAAAjD,IAAAsE,MACA3C,EAAA4E,MAAAkM,iBACA9Q,EAAA4E,MAAAmM,gBAAA/Q,EAAA4E,MAAAoM,sBACA9S,EAAAc,EAAAd,EAAAc,EAAAd,IAEAA,IAQA8B,EAAAiR,eAAA,WACA,OAAAjR,EAAA6G,mBAAAqK,OAAA,SAAAC,EAAA9N,GACA,OAAA8N,GAAA9N,EAAAV,OAAA3C,EAAA4E,MAAAwM,YACa,IASbpR,EAAAqR,aAAA,SAAAjP,GACA,OAAApC,EAAAsC,MAAAC,KAAAH,IACApC,EAAA4E,MAAA0D,YAAAtI,EAAAsR,OASAtR,EAAAiE,gBAAA,SAAAH,GACA,OAAA9D,EAAAsC,MAAAM,QAAAkB,IACA9D,EAAAe,YAAA+C,GAAAnB,OACA3C,EAAA4E,MAAAwM,WAAApR,EAAAsR,OAEAtR,EAAAuR,WAAAvG,OAAA,SAAA7D,GACA,YAAApH,IAAAoH,EAAA7C,KAAAvF,MAAAoI,EAAA7C,KAAAvF,MAAA,IAEAiB,EAAAuR,WAAAC,cAAAxR,EAAAuR,WAAAvG,OACAhL,EAAAuR,WAAAE,WAAAzR,EAAAuR,WAAAvG,OACAhL,EAAAuR,WAAAG,OAAA1R,EAAAuR,WAAAvG,OACAhL,EAAAuR,WAAAI,IAAA3R,EAAAuR,WAAAvG,OACAhL,EAAAuR,WAAAK,KAAA5R,EAAAuR,WAAAvG,OACAhL,EAAA4K,QAAAI,OAAA,SAAAV,EAAAC,GACA,IAAAsH,EAAA,QAAAtH,EACA,gBAAAuH,EAAAC,GACA,YAAAhS,IAAA+R,EAAAxH,IAAA,OAAAwH,EAAAxH,GACA,OAEAvK,IAAAgS,EAAAzH,IAAA,OAAAyH,EAAAzH,GACA,EAEAuH,EACAC,EAAAxH,GAAA0H,cACAF,EAAAxH,GAAA0H,cAAAD,EAAAzH,IADuD,EAGvDyH,EAAAzH,GAAA0H,cACAD,EAAAzH,GAAA0H,cAAAF,EAAAxH,IADmD,IAInDtK,EAAA4K,QAAA8G,OAAA,SAAApH,EAAAC,GACA,IAAAsH,EAAA,QAAAtH,EACA,gBAAAuH,EAAAC,GACA,OAAAF,EACAC,EAAAxH,GAAAyH,EAAAzH,GAEAyH,EAAAzH,GAAAwH,EAAAxH,KAGAtK,EAAA4K,QAAAqH,KAAA,SAAA3H,EAAAC,GACA,IAAAsH,EAAA,QAAAtH,EACA,gBAAAuH,EAAAC,GACA,OAAAF,EACA,IAAAK,KAAAJ,EAAAxH,IAAA6H,UACA,IAAAD,KAAAH,EAAAzH,IAAA6H,UAEA,IAAAD,KAAAH,EAAAzH,IAAA6H,UACA,IAAAD,KAAAJ,EAAAxH,IAAA6H,cAIC/R,MAAA9C,SAAAC,EAAAD,QAAAwC,oBC3qCD,IAAAA,OA0iBCC,KAxiBDD,EAAA,WACA,aACA,gBAAAE,GACAA,EAAAoS,gBAAA,SAAAC,GACA,IAAAC,EAAAtS,EAAAuS,SAAAvS,EAAAoJ,YACAoJ,EAAAxS,EAAAuS,SAAAF,GACAxS,EAAAG,EAAAyS,aAAAzS,EAAAiK,QACAyI,GACA1O,EAAA,EACAL,EAAA,EACAqF,EAAA,EACA2J,EAAA,GAEAC,GACA5O,GAAAwH,IACA7H,GAAA6H,IACAxC,EAAAwC,IACAmH,EAAAnH,KAEA5C,EAAA5I,EAAA6I,4BACAC,EAAA9I,EAAA6S,wBASA,OARAP,EAAAnM,KAAAtG,EAAAsG,IACAmM,EAAAlM,MAAAvG,EAAAuG,KACAoM,EAAArM,KAAAtG,EAAAsG,IACAqM,EAAApM,MAAAvG,EAAAuG,KACAsM,EAAA1J,EAAAsJ,EAAAnM,IAAAmM,EAAAjQ,OAAAgQ,EAAA3I,UAAA1J,EAAA4E,MAAAC,eACA6N,EAAAC,EAAAL,EAAAlM,KAAAkM,EAAA3P,MAAA0P,EAAA5I,WAAAzJ,EAAA4E,MAAAC,eACA6N,EAAA1O,EAAAsO,EAAAlM,MAAA,EAAAoM,EAAApM,KAAA0C,EACA4J,EAAA/O,EAAA2O,EAAAnM,KAAA,EAAAqM,EAAArM,IAAAyC,GAEA5E,EAAA0O,EAAA1O,EAAA4O,EAAA5O,EAAA0O,EAAA1O,EAAA4O,EAAA5O,EACAL,EAAA+O,EAAA/O,EAAAiP,EAAAjP,EAAA+O,EAAA/O,EAAAiP,EAAAjP,EACAqF,EAAA0J,EAAA1J,EAAA4J,EAAA5J,EAAA0J,EAAA1J,EAAA4J,EAAA5J,EACA2J,EAAAD,EAAAC,EAAAC,EAAAD,EAAAD,EAAAC,EAAAC,EAAAD,IAGA3S,EAAA8S,YAAA,SAAAT,GACA,IAAAK,EAAA1S,EAAAoS,gBAAAC,GACAK,EAAAC,EAAA,IAAiCD,EAAAC,EAAA,GACjCD,EAAA1J,EAAA,IAAiC0J,EAAA1J,EAAA,GACjCqJ,EAAAzN,MAAAmO,KAAA,QACAL,EAAA/O,EAAA,MACA+O,EAAAC,EAAA,MACAD,EAAA1J,EAAA,MACA0J,EAAA1O,EAAA,OAcAhE,EAAAyS,aAAA,SAAAtL,GAEA,IADA,IAAAnD,EAAA,EAAAL,EAAA,EAAAqP,EAAAC,SAAAD,mBAA+E7N,WAAA,EAAAC,UAAA,GAC/E+B,EAAAiC,YAAA,oBAAAjC,EAAA+L,UAAA/L,IAAAnH,EAAAwB,MACA,yBAAA2F,EAAAmC,UACA,yBAAAnC,EAAAmC,WACAtF,GAAAmD,EAAAhC,WACAxB,GAAAwD,EAAA/B,WAEA+B,IAAAiC,WAEA,OACAhD,KAAApC,EAAAgP,EAAA7N,WACAgB,IAAAxC,EAAAqP,EAAA5N,YAGApF,EAAAmT,gBAAA,WACA,GAAAnT,EAAAoT,OAAApT,EAAAoT,MAAAC,SAAA,CACA,IAAAC,EAAAtT,EAAAiK,OAAAsJ,wBACA1T,EAAAG,EAAAyS,aAAAzS,EAAAwB,MACAgS,EAAA,aAAAxT,EAAA4E,MAAA6O,mBAAA,IACAC,EAAA1T,EAAA4E,MAAAsI,gBAAAsG,EACAlP,EAAAtE,EAAAkF,sBAAAlF,EAAAoT,MAAAC,SAAAvP,YAAA9D,EAAAoT,MAAAC,SAAAjR,YAC4B4B,GAAA,IAAAL,GAAA,IAAAtB,OAAA,EAAAM,MAAA,GAC5B,GAAA3C,EAAA2T,OAKA,OAJA3T,EAAAoT,MAAAxO,MAAAwB,KAAA,IACApG,EAAAoT,MAAAxO,MAAAuB,IAAAnG,EAAAqC,OAAArC,EAAA4E,MAAAgP,sBAAAF,EAAA,OACA1T,EAAAoT,MAAAxO,MAAAvC,OAAArC,EAAA4E,MAAAgP,sBAAA,UACA5T,EAAAoT,MAAAxO,MAAAjC,MAAA3C,EAAA2C,MAAA+Q,EAAA,QAGA1T,EAAAoT,MAAAxO,MAAAwB,KAAAkN,EAAAlN,KAAA9B,EAAAN,EAAAhE,EAAA6T,iBAAAhU,EAAAuG,KAAA,KACApG,EAAAoT,MAAAxO,MAAAuB,IAAAmN,EAAAnN,IAAA7B,EAAAX,EAAA3D,EAAA4E,MAAAsI,gBAAAlN,EAAA8T,gBAAAjU,EAAAsG,IAAA,KACAnG,EAAAoT,MAAAxO,MAAAvC,OAAAiC,EAAAjC,OAAAqR,EAAA,KACA1T,EAAAoT,MAAAxO,MAAAjC,MAAA2B,EAAA3B,MAAA3C,EAAA4E,MAAAmM,gBAAA,KACA/Q,EAAA8S,YAAA9S,EAAAoT,SAGApT,EAAAuS,SAAA,SAAApL,EAAA4M,GAEA,IADA,IAAA/K,EAAA2J,EAAA3O,EAAA,EAAAL,EAAA,EAAA9D,EAAAsH,EACAA,EAAAwC,cAAA,oBAAAxC,EAAA+L,UACAlP,GAAAmD,EAAAsC,WACA9F,GAAAwD,EAAAuC,UACAV,EAAA7B,EAAAoC,aACAoJ,EAAAxL,EAAAqC,YACArC,IAAAwC,aAEA,OAAAoK,GACwB3N,KAAApC,EAAAmC,IAAAxC,EAAAtB,OAAA2G,EAAArG,MAAAgQ,IAExBxL,EAAAtH,GAEoBuG,KAAApC,GADpBnE,EAAAG,EAAAyS,aAAAtL,IACoBf,KAAAD,IAAAxC,EAAA9D,EAAAsG,IAAA9D,OAAA2G,EAAArG,MAAAgQ,KAEpB3S,EAAAgU,YAAA,SAAA7M,GACA,IAAA8M,EAAAjU,EAAAiK,OAAAsJ,wBACAD,GACAtP,EAAAmD,EAAA+M,QAAAD,EAAA7N,KACAzC,EAAAwD,EAAAgN,QAAAF,EAAA9N,KAMA,OAJAnG,EAAAoU,cACAd,EAAAtP,GAAAhE,EAAA6T,iBACAP,EAAA3P,GAAA3D,EAAA8T,kBAGA9P,EAAAsP,EAAAtP,EACAL,EAAA2P,EAAA3P,EACAsQ,SAUAjU,EAAAqU,QAAA,SAAAC,GACA,IAAAhQ,EAAAtE,EAAAoT,MAAAC,SACA1P,EAAAW,EAAAlC,SAIA,GAAApC,EAAA6F,cAAA,iBACAvB,OACAiQ,SAAAvU,EAAAoT,MAAArU,MACAyV,SAAAlQ,EAAAvF,MACAuV,MAPA,WACAA,GAAA,GAOAlB,MAAApT,EAAAoT,QACqB,SACrB,GAAApT,EAAAoT,MAAArU,QAAAuF,EAAAvF,QAAAuV,EAAA,CAQA,GAPAtU,EAAAyP,QAAA9L,GAAA3D,EAAAyP,QAAA9L,OACA3D,EAAAyP,QAAA9L,GAAAW,EAAAjB,OAAAhF,MAAA2B,EAAAoT,MAAArU,MACAuF,EAAAlD,OACApB,EAAAoB,KAAAkD,EAAAlC,aACAkC,EAAAlD,KAAApB,EAAAoB,KAAAkD,EAAAlC,WAEAkC,EAAAlD,KAAAkD,EAAAjB,OAAAhF,MAAA2B,EAAAoT,MAAArU,MACA4E,IAAA3D,EAAAoB,KAAAJ,OAAA,CACA,GAAAhB,EAAA6F,cAAA,UACA9G,MAAAiB,EAAAoT,MAAArU,MACA0V,aAAAnQ,EAAAvF,MACA2V,QAAAJ,EACAhQ,OACA8O,MAAApT,EAAAoT,QAC6B,SAC7BpT,EAAAkC,OAAAoC,EAAAlD,MACApB,EAAA2U,mBAEA3U,EAAAwC,MAAA,GAaA,OAXAxC,EAAAoT,MAAAhK,YACApJ,EAAAoT,MAAAhK,WAAAwL,YAAA5U,EAAAoT,OAEApT,EAAAwB,KAAAqT,QACA7U,EAAA6F,cAAA,WACAvB,OACAvF,MAAAiB,EAAAoT,MAAArU,MACA2V,QAAAJ,EACAlB,MAAApT,EAAAoT,QAEApT,EAAAoT,WAAArT,GACA,GAUAC,EAAA8U,YAAA,SAAA9Q,EAAAL,GACA,GAAA3D,EAAAE,WAAA6U,SAAA,CACA/U,EAAAoT,OACApT,EAAAqU,UAEA,IAEAW,EACAC,EACAC,EACAC,EACAC,EANA9Q,EAAAtE,EAAAkF,sBAAAlB,EAAAL,GACA3D,EAAAe,YAMA,GAAAuD,KAAAjB,OAAA,CAGA,GADA6R,EAAA5Q,EAAAjB,OAAA,KACArD,EAAA6F,cAAA,mBAAuDvB,SAAe,SACtEtE,EAAAsF,eAAAtB,EAAAL,GACA3D,EAAAwF,cAAAxB,EAAAL,GACAqR,EAAAhV,EAAAqV,mBAEArV,EAAAoT,MADA8B,EACAjC,SAAAqC,cAAA,UAEArC,SAAAqC,cAAAtV,EAAAE,WAAAqV,UACA,qBAEAjR,EAAAtE,EAAAkF,sBAAAlB,EAAAL,MAGAuR,IAEA,mBAAAA,EACAD,EAAAC,EAAA9U,MAAAJ,EAAAwB,OAAuD8C,UACtCkR,MAAAC,QAAAP,KACjBD,EAAAC,GAEAD,EAAA5T,QAAA,SAAA8F,GACA,IACAuO,EACAzG,EAFAnR,EAAAmV,SAAAqC,cAAA,UAGAE,MAAAC,QAAAtO,IACAuO,EAAAvO,EAAA,GACA8H,EAAA9H,EAAA,KAEAuO,EAAAvO,EACA8H,EAAA9H,GAEAuO,IAAApR,EAAAvF,QAA6CqW,GAAA,GAC7CtX,EAAAiB,MAAA2W,EACA5X,EAAA6X,UAAA1G,EACAjP,EAAAoT,MAAAwC,YAAA9X,KAEAsX,KACAD,EAAAlC,SAAAqC,cAAA,WACAvW,MAAAuF,EAAAvF,MACAoW,EAAAQ,UAAArR,EAAAvF,MACAiB,EAAAoT,MAAAwC,YAAAT,IAEAnV,EAAAoT,MAAAyC,iBAAA,oBACA7V,EAAAqU,UACArU,EAAAwC,MAAA,MAIAxC,EAAA6F,cAAA,mBAAwDvB,OAAA8O,MAAApT,EAAAoT,SACxDH,SAAA6C,KAAAF,YAAA5V,EAAAoT,OAEApT,EAAA+V,kBAAA/V,EAAAoT,MAAApT,EAAA2T,OAAA,kEACA3T,EAAAoT,MAAAxO,MAAA2N,SAAA,WACAvS,EAAAoT,MAAAC,SAAA/O,EACAtE,EAAAmT,kBACAnT,EAAAoT,MAAAxO,MAAAoR,OAAAhW,EAAA4E,MAAAqR,eACAjW,EAAAoT,MAAAxO,MAAAsR,SAAA/G,SAAAnP,EAAA4E,MAAAuR,iBAAA,IAAAnW,EAAAsR,MAAA,KACAtR,EAAAoT,MAAArU,OAAA,eAAAgB,GAAA0G,QAAAnC,EAAAvF,OAAA,GAAAuF,EAAAvF,MACAiB,EAAAoT,MAAAyB,QACA7U,EAAAoT,MAAAyC,iBAAA,QAAA7V,EAAAoW,iBACApW,EAAAoT,MAAAyC,iBAAA,WAAA7V,EAAAoW,iBACApW,EAAAoT,MAAAyC,iBAAA,UAAA7V,EAAAoW,iBACApW,EAAAoT,MAAAyC,iBAAA,YAAA7V,EAAAoW,iBACApW,EAAAoT,MAAAyC,iBAAA,mBAAA1O,GACA,IAAAkP,EAAA/R,EAAAR,YACAwS,EAAAhS,EAAAlC,SAEA,QAAA+E,EAAAoP,QACAvW,EAAAqU,SAAA,GACArU,EAAAwC,MAAA,QAEiB,QAAA2E,EAAAoP,WACjBvW,EAAAE,WAAAqV,WACAvV,EAAAE,WAAAqV,WAAApO,EAAAqP,UACAxW,EAAAqU,UACArU,EAAAwC,MAAA,QACiB,OAAA2E,EAAAoP,QAAA,CAEjB,GADApP,EAAAsP,kBACAzW,EAAAqU,UACA,OAGAgC,EADAlP,EAAAqP,SACAxB,EAAA5O,KAEA4O,EAAA3O,MAEA2O,EAAA5O,OAAApC,GAAAmD,EAAAqP,WACAH,EAAArB,EAAA0B,KACAJ,GAAA,GAEAtB,EAAA3O,QAAArC,GAAAmD,EAAAqP,WACAH,EAAArB,EAAA2B,MACAL,GAAA,GAEAA,EAAA,IACAA,EAAAtW,EAAAoB,KAAAJ,OAAA,GAEAsV,EAAAtW,EAAAoB,KAAAJ,OAAA,IACAsV,EAAA,GAEAtW,EAAAsF,eAAA+Q,EAAAC,GACAtW,EAAA8U,YAAAuB,EAAAC,MAGAtW,EAAA6F,cAAA,aAA6CvB,OAAA8O,MAAApT,EAAAoT,YAE7CpT,EAAA+V,kBAAA,SAAAa,EAAAC,GACA,IAAAC,GACAC,6CACA1U,OAAA,OACA2U,cAAA,SACAC,WAAA,MACAC,QAAA,IACAC,WAAAnX,EAAA4E,MAAAwS,6BACAC,MAAArX,EAAA4E,MAAA0S,wBACAjL,OAAArM,EAAA4E,MAAA2S,yBACAC,aAAAxX,EAAA4E,MAAA6S,+BACAC,WAAA,SACAC,WAAA,SACAC,WAAA5X,EAAA4E,MAAAiT,6BACA3B,SAAAlW,EAAA4E,MAAAkT,4BAEAC,8CACA1V,OAAA,OACA2U,cAAA,SACAC,WAAA,MACAC,QAAA,IACAC,WAAAnX,EAAA4E,MAAAoT,sBACAX,MAAArX,EAAA4E,MAAAqT,iBACA5L,OAAArM,EAAA4E,MAAAsT,0BACAV,aAAAxX,EAAA4E,MAAAuT,gCACAT,WAAA,SACAC,WAAA,SACAC,WAAA5X,EAAA4E,MAAAwT,kCACAlC,SAAAlW,EAAA4E,MAAAyT,iCAEAC,uCACAC,SAAA,QACAlB,MAAArX,EAAA4E,MAAA4T,2BACAtC,SAAAlW,EAAA4E,MAAA6T,8BACAb,WAAA5X,EAAA4E,MAAA8T,sBACA1B,cAAA,UAEA2B,gCACAf,WAAA5X,EAAA4E,MAAA8T,sBACAxC,SAAAlW,EAAA4E,MAAAgU,oBACAzB,WAAAnX,EAAA4E,MAAAoT,sBACAX,MAAArX,EAAA4E,MAAAqT,iBACA5L,OAAArM,EAAA4E,MAAAiU,kBACA3B,QAAAlX,EAAA4E,MAAAkU,mBACAtB,aAAAxX,EAAA4E,MAAAmU,wBACAC,QAAAhZ,EAAA4E,MAAAqU,mBACA1G,SAAA,WACAyD,OAAA,KACAkD,SAAA,UAEAC,qCACAhC,WAAAnX,EAAA4E,MAAAoT,sBACAX,MAAArX,EAAA4E,MAAAqT,kBAEAmB,2CACAjC,WAAAnX,EAAA4E,MAAAyU,2BACAhC,MAAArX,EAAA4E,MAAA0U,uBAEAC,0BACAhH,SAAA,WACAyD,OAAA,MAEAwD,mBACAC,QAAA,SAEAC,iCACAnH,SAAA,QACApM,IAAA,OACAC,KAAA,OACAiG,OAAA,OACA2M,QAAA,IACAxL,OAAA,UACA7K,MAAA,MACAN,OAAA,MACAqV,WAAA,SACAC,WAAA,SACAC,WAAA5X,EAAA4E,MAAA8T,sBACAxC,SAAAlW,EAAA4E,MAAAgU,qBAEAe,qCACAC,UAAA,cACAC,QAAA,OACAC,OAAA,IACA5C,QAAA,UACAQ,WAAA,SACAC,WAAA,SACAC,WAAA5X,EAAA4E,MAAAmV,qBACA7D,SAAAlW,EAAA4E,MAAAoV,mBACA3N,OAAArM,EAAA4E,MAAAqV,eACA5C,MAAArX,EAAA4E,MAAAsV,cACA/C,WAAAnX,EAAA4E,MAAAuV,wBACAC,WAAA,OACAC,iBAAA,OACAC,cAAA,OACA9C,aAAA,KAEA+C,8BACAX,UAAA,cACAC,QAAA,OACAC,OAAA,IACA5C,QAAA,SAAAlX,EAAA4E,MAAA4V,oBAAA,KACA9C,WAAA,SACAC,WAAA,SACAC,WAAA5X,EAAA4E,MAAA6V,mBACAvE,SAAAlW,EAAA4E,MAAAuR,iBACAuE,UAAA1a,EAAA4E,MAAA+V,kBACAtO,OAAArM,EAAA4E,MAAAqV,eACA5C,MAAArX,EAAA4E,MAAAsV,cACA/C,WAAAnX,EAAA4E,MAAAuV,wBACAC,WAAA,OACAC,iBAAA,OACAC,cAAA,OACA9C,aAAA,KAEAoD,4CACAlD,WAAA,SACAC,WAAA,SACAC,WAAA5X,EAAA4E,MAAA8T,sBACAxC,SAAAlW,EAAA4E,MAAAgU,oBACAvB,MAAA,UACAF,WAAA,UACA2C,OAAA9Z,EAAA4E,MAAAiW,sBACArD,aAAAxX,EAAA4E,MAAAkW,4BACA9D,cAAA,UAEA+D,qCACArD,WAAA,SACAC,WAAA,SACAC,WAAA5X,EAAA4E,MAAA8T,sBACAxC,SAAAlW,EAAA4E,MAAAgU,oBACAvB,MAAA,UACAF,WAAA,UACA2C,OAAA9Z,EAAA4E,MAAAiW,sBACArD,aAAAxX,EAAA4E,MAAAkW,4BACA9D,cAAA,UAEAgE,2CACA7D,WAAAnX,EAAA4E,MAAAyU,2BACAhC,MAAArX,EAAA4E,MAAA0U,uBAEA2B,sCACAnB,OAAA9Z,EAAA4E,MAAAsW,uBACAzB,QAAAzZ,EAAA4E,MAAAuW,wBACAC,SAAApb,EAAA4E,MAAAyW,yBACAC,SAAAtb,EAAA4E,MAAA2W,0BAEAC,uCACA9D,WAAA,SACAC,WAAA,SACAC,WAAA5X,EAAA4E,MAAA8T,sBACAxC,SAAAlW,EAAA4E,MAAAgU,oBACAzB,WAAAnX,EAAA4E,MAAAoT,sBACAX,MAAArX,EAAA4E,MAAAqT,iBACA5L,OAAArM,EAAA4E,MAAAiU,kBACA3B,QAAAlX,EAAA4E,MAAAkU,mBACAtB,aAAAxX,EAAA4E,MAAAmU,wBACAC,QAAAhZ,EAAA4E,MAAAqU,mBACAC,SAAA,SACAuC,WAAA,UAEAC,gCACAhE,WAAA,SACAC,WAAA,SACAC,WAAA5X,EAAA4E,MAAA8T,sBACAxC,SAAAlW,EAAA4E,MAAAgU,oBACAzB,WAAAnX,EAAA4E,MAAAoT,sBACAX,MAAArX,EAAA4E,MAAAqT,iBACA5L,OAAArM,EAAA4E,MAAAiU,kBACA3B,QAAAlX,EAAA4E,MAAAkU,mBACAtB,aAAAxX,EAAA4E,MAAAmU,wBACAC,QAAAhZ,EAAA4E,MAAAqU,mBACAC,SAAA,SACAuC,WAAA,SACAjO,OAAAxN,EAAA4E,MAAA+W,mBAEAC,yCACAzE,WAAAnX,EAAA4E,MAAAiX,oCAGA/E,EAAAD,IACArY,OAAA0E,KAAA4T,EAAAD,IAAA9H,IAAA,SAAA+M,GACAlF,EAAAhS,MAAAkX,GAAAhF,EAAAD,GAAAiF,MAKA9b,EAAA+b,SAAA,SAAA5U,GACAnH,EAAAoJ,WAAAjC,EACAnH,EAAAgc,UAEAhc,EAAAgc,OAAA,WACAhc,EAAAoU,aACApU,EAAAqJ,WAAArJ,EAAAoJ,WAAAC,WACArJ,EAAA4P,IAAA5P,EAAAqJ,WAAA2D,QACAhN,EAAAiK,OAAAjK,EAAAqJ,WAAAY,OACAjK,EAAAic,aAAAjc,EAAAqJ,WAAA4S,aACAjc,EAAAkc,YAAAlc,EAAAiK,SAEAjK,EAAAic,aAAAjc,EAAAic,cAAAhJ,SAAAqC,cAAA,SACAtV,EAAAic,aAAAE,OAAAnc,EAAAwB,KAAA2G,KACAnI,EAAA+V,kBAAA/V,EAAAic,aAAA,iCACAjc,EAAAoU,aAAA,EACApU,EAAAoc,cAAApc,EAAAoJ,WACApJ,EAAAqc,eAAA,YAAApP,KAAAjN,EAAAoc,cAAAE,SACAtc,EAAAqc,gBACArc,EAAAiK,OAAAjK,EAAAoc,cACAnJ,SAAA6C,KAAAF,YAAA5V,EAAAic,gBAEAjc,EAAAiK,OAAAgJ,SAAAqC,cAAA,UACAtV,EAAAoc,cAAAxG,YAAA5V,EAAAiK,QACAgJ,SAAA6C,KAAAF,YAAA5V,EAAAic,eAEAjc,EAAA+V,kBAAA/V,EAAAiK,OAAA,mBACAjK,EAAA4P,IAAA5P,EAAAiK,OAAAsS,WAAA,MACAvc,EAAA4P,IAAA4M,aAAA,aACAxc,EAAAkc,YAAAlc,EAAAiK,QAEAjK,EAAAyc,gBAAAzc,EAAAiK,OAAArF,MACA5E,EAAAic,aAAAS,aAAA,eACA1c,EAAAic,aAAApG,iBAAA,gBAAA1O,GACAA,EAAAwV,SAAA3c,EAAAiK,SACAjK,EAAA8M,UAAA,KAGA9M,EAAAkc,YAAArG,iBAAA,SAAA7V,EAAAgC,QAAA,GACAhC,EAAAkc,YAAArG,iBAAA,aAAA7V,EAAA4c,YAAA,GACA5c,EAAAkc,YAAArG,iBAAA,UAAA7V,EAAA6c,SAAA,GACA7c,EAAAkc,YAAArG,iBAAA,YAAA7V,EAAA8c,WAAA,GACA9c,EAAAkc,YAAArG,iBAAA,WAAA7V,EAAA+c,UAAA,GACA/c,EAAAkc,YAAArG,iBAAA,QAAA7V,EAAAgd,OAAA,GACAhd,EAAAkc,YAAArG,iBAAA,YAAA7V,EAAAid,WACAjd,IAAAoU,YAAA,4BAAAyB,iBAAA,QAAA7V,EAAAkd,aAAA,GACAld,EAAAiK,OAAA4L,iBAAA,cAAA7V,EAAAmd,kBAAA,GACAnd,EAAAic,aAAApG,iBAAA,OAAA7V,EAAAod,MACApd,EAAAic,aAAApG,iBAAA,MAAA7V,EAAAqd,KACArd,EAAAic,aAAApG,iBAAA,QAAA7V,EAAAsd,OACAtd,EAAAic,aAAApG,iBAAA,WAAA7V,EAAAud,UAAA,GACAvd,EAAAic,aAAApG,iBAAA,QAAA7V,EAAAwd,OAAA,GACAxd,EAAAic,aAAApG,iBAAA,UAAA7V,EAAAyd,SAAA,GACA/f,OAAAmY,iBAAA,SAAA7V,EAAAgC,WAGC5B,MAAA9C,SAAAC,EAAAD,QAAAwC,oBC1iBD,IAAAA,OAojBCC,KAljBDD,EAAA,WACA,aACA,gBAAAE,GACA,IAAA0d,EAAAC,EAAAC,EACA,SAAAC,EAAAC,GACA9d,EAAA+V,kBAAA+H,EAAA,qCAAA9d,EAAA2T,OAAA,eACAmK,EAAAjI,iBAAA,uBACA7V,EAAA+V,kBAAA+H,EAAA,6CAEAA,EAAAjI,iBAAA,sBACA7V,EAAA+V,kBAAA+H,EAAA,uCAGA,SAAAC,EAAApO,EAAA2D,EAAA0K,EAAAC,GACA,IAMAhK,EANAiK,EAAAjL,SAAAqC,cAAA,OACA6I,EAAAlL,SAAAqC,cAAA,OACA8I,EAAAnL,SAAAqC,cAAA,OACA+I,KACAC,GAAA,EACA9c,KAEA,IAAAgU,MAAAC,QAAAuI,GAAwC,UAAA/c,MAAA,uCA+FxC,SAAAsd,IACAL,EAAA9Y,UAAA,EACApF,EAAAoc,cAAAxG,YAAAuI,GACiBA,EAAA/U,YACjB+U,EAAA/U,WAAAwL,YAAAuJ,GAEAD,EAAA9Y,WAAA8Y,EAAAM,aAAAN,EAAA3U,cAAA6U,EAAAhV,WACAgV,EAAAhV,WAAAwL,YAAAwJ,GACiBF,EAAAM,aAAAN,EAAA3U,aAAA,KACjB2U,EAAA9Y,WAAA8Y,EAAAM,aAAAN,EAAA3U,eACAvJ,EAAAoc,cAAAxG,YAAAwI,GAGA,SAAAK,EAAAjb,GACA,gBAAAxE,IACA,IAAA8S,EAAA9R,EAAAE,WAAAwe,yBACA,OAAAlb,GAAA,IAAA0a,EAAA9Y,WACA,SAAA5B,GAAA0a,EAAA9Y,YAAA8Y,EAAAM,eACAN,EAAA9Y,WAAA,OAAA5B,GAAAsO,IACA6L,EAAAgB,WAAA3f,EAAAgB,EAAAE,WAAA0e,yBAAApb,KAGA,SAAAqb,EAAArb,GACA,kBACAsb,aAAAnB,IAuHA,OAzCAnc,EAAA6H,WAAArJ,EAAAwB,KACAA,EAAAyc,oBACAzc,EAAA0c,YA7EA,WACA,IAAAa,KACAlf,EAAAG,EAAAyS,aAAAzS,EAAAiK,aACAlK,IAAA2d,IACAA,EAAA1d,EAAA4E,MAAAoa,mBA5HAhB,EAAA3c,QAAA,SAAA4d,GACA,IACAC,EADApB,EAAA7K,SAAAqC,cAAA,OAEA,SAAA6J,EAAAhY,GACAA,EAAAiY,gBAAAlB,GACAe,EAAAI,YAAAnB,YAAA/W,EAAAiY,eACAF,IAAA/X,EAAAiY,eACAtB,IAAA3W,EAAAiY,eACAH,EAAAI,YAAAnB,UAAAoB,SAAAnY,EAAAiY,iBAEAH,EAAAI,YAAAjX,UACAiW,EAAAld,OAAAkd,EAAA5X,QAAAwY,EAAAI,aAAA,GACAJ,EAAAI,iBAAAtf,EACA+d,EAAAyB,oBAAA,WAAAJ,GACAjB,EAAAqB,oBAAA,WAAAJ,GACArB,EAAApB,aAAA,mBACAoB,EAAApB,aAAA,gBAEA,SAAA8C,EAAAxB,GAEA,SAAAF,EAAA2B,aAAA,YACA,MAAA3B,EAAA2B,aAAA,eADA,CAIA,IAAAC,EAAA5B,EAAAvK,wBACAmM,GACAtZ,KAAAsZ,EAAAtZ,KAAApG,EAAA4E,MAAA+a,2BAAAzB,EAAA1U,YACArD,IAAAuZ,EAAAvZ,IAAAnG,EAAA4E,MAAAgb,0BACAtZ,OAAAoZ,EAAApZ,OACAD,MAAAqZ,EAAArZ,OAEA4Y,EAAAI,YAAAtB,EAAApO,EAAA+P,EAAA1B,EAAAxc,GACAsc,EAAApB,aAAA,mBACAoB,EAAAjI,iBAAA,WAAAsJ,GACAjB,EAAArI,iBAAA,WAAAsJ,GACAd,EAAAzc,KAAAqd,EAAAI,cAEA,SAAAQ,IACA,IAAA/hB,EACA,MAAAggB,EAAA2B,aAAA,iBAGA3B,EAAApB,aAAA,eACA,mBAAAuC,EAAAjB,MASAwB,EAAAP,EAAAjB,YALAje,KAHAjC,EAAAmhB,EAAAjB,MAAA5d,MAAAoB,GAAA,SAAAwc,GACAwB,EAAAxB,QAEAxI,MAAAC,QAAA3X,IACA0hB,EAAA1hB,KAMA,SAAAmhB,IACA,SAAAa,EAAAC,GACA,UAAAA,EACA,yBAAAA,EACAD,EAAAC,EAAApQ,SAEA,iBAAAoQ,GAIAlC,EAAAC,GACAA,EAAAnI,UAAAoK,GAJAjC,EAAAlI,YAAAmK,IAOAD,CAAAb,EAAAhQ,OACAgQ,EAAAnB,wBACAmB,EAAAjB,OAAAiB,EAAAjB,MAAAhd,OAAA,sBAAAie,EAAAjB,SACAkB,EAAAjM,SAAAqC,cAAA,OACAtV,EAAA+V,kBAAAmJ,EAAA,uCACAA,EAAAvJ,UAAA3V,EAAA4E,MAAAob,0BACAlC,EAAAlI,YAAAsJ,GACApB,EAAAjI,iBAAA,YAAAgK,GACA/B,EAAAjI,iBAAA,sBACAiI,EAAApB,aAAA,kBAGAuC,EAAAjC,OACAc,EAAAjI,iBAAA,iBAAAlG,GACAsP,EAAAjC,MAAA5c,MAAAJ,GAAA2P,MAIAsQ,CAAAhB,GACAf,EAAAtI,YAAAkI,KAwCA9d,EAAA+V,kBAAAmI,EAAA,gCAAAle,EAAA2T,OAAA,eACAoL,EAAA/a,EAAAsP,EAAAlN,KAAAvG,EAAAuG,KACA2Y,EAAApb,EAAA2P,EAAAnN,IAAAtG,EAAAsG,IACA4Y,EAAA1c,OAAA,EACAqb,GAAA,EACAQ,EAAAtZ,MAAA2N,SAAA,WACA4L,EAAAvZ,MAAAyS,MAAArX,EAAA4E,MAAAsb,sBACA9B,EAAAxZ,MAAAyS,MAAArX,EAAA4E,MAAAsb,uBACA/B,EAAAC,GAAA/c,QAAA,SAAAuV,GACAA,EAAAhS,MAAAub,UAAA,SACAvJ,EAAAhS,MAAA2N,SAAA,WACAqE,EAAAhS,MAAAoR,OAAA0H,EAAA,IAEAQ,EAAAtZ,MAAAoR,OAAA0H,EACAO,KAAAmC,gBACAlC,EAAAtZ,MAAAyb,UAAA3iB,OAAA4iB,YAAAvB,EAAApb,EAAA3D,EAAA4E,MAAA2b,yBAAA,KACArC,EAAAtZ,MAAAwW,SAAA9H,EAAA3Q,MAAA,KACAoc,EAAApb,GAAA2P,EAAAjR,QAEArC,EAAA2T,SACAuK,EAAAtZ,MAAAjC,MAAA2Q,EAAA3Q,MAAA,MAEAub,EAAAtZ,MAAAwB,KAAA2Y,EAAA/a,EAAA,KACAka,EAAAtZ,MAAAuB,IAAA4Y,EAAApb,EAAA,KACAua,EAAArI,iBAAA,SAAA0I,GACAL,EAAArI,iBAAA,iBAAA1O,GACAnH,EAAA8M,WACAoR,EAAA9Y,WAAA+B,EAAAqZ,OACAtC,EAAA/Y,YAAAgC,EAAAsZ,QAEAlC,MAEAJ,EAAAxI,UAAA3V,EAAA4E,MAAA8b,uBACAtC,EAAAzI,UAAA3V,EAAA4E,MAAA+b,yBACAzC,EAAAtI,YAAAuI,GACAlL,SAAA6C,KAAAF,YAAAwI,GACAnL,SAAA6C,KAAAF,YAAAsI,IACAjK,EAAAiK,EAAA3K,yBAEAjN,OAAA5I,OAAA4iB,cACArC,KAAAmC,gBACArB,EAAApb,GAAAsQ,EAAA3N,OAAAtG,EAAA4E,MAAAgc,wBAAAljB,OAAA4iB,aAEAvB,EAAApb,EAAA,IAAoCob,EAAApb,EAAA3D,EAAA4E,MAAAgc,yBACpC1C,EAAA3U,aAAA7L,OAAA4iB,YAAAtgB,EAAA4E,MAAAgc,0BACA1C,EAAAtZ,MAAAvC,OAAA3E,OAAA4iB,YAAA,EAAAtgB,EAAA4E,MAAAgc,wBAAA,OAGA3M,EAAA5N,MAAA3I,OAAAmjB,aACA9B,EAAA/a,GAAAiQ,EAAA5N,MAAA3I,OAAAmjB,WAAA7gB,EAAA4E,MAAAgc,yBAEA7B,EAAA/a,EAAA,IAAgC+a,EAAA/a,EAAAhE,EAAA4E,MAAAgc,yBAChC7B,EAAApb,EAAA,IAAgCob,EAAApb,EAAA3D,EAAA4E,MAAAgc,yBAChC1C,EAAAtZ,MAAAwB,KAAA2Y,EAAA/a,EAAA,KACAka,EAAAtZ,MAAAuB,IAAA4Y,EAAApb,EAAA,KACAsQ,EAAAiK,EAAA3K,wBACA4K,EAAAvZ,MAAAuB,IAAA8N,EAAA9N,IAAA,KACAiY,EAAAxZ,MAAAuB,IAAA8N,EAAA9N,IAAA8N,EAAA5R,OAAA+b,EAAA7U,aAAA,KACA4U,EAAAvZ,MAAAwB,KAAA6N,EAAA7N,KAAA,KACAgY,EAAAxZ,MAAAwB,KAAA6N,EAAA7N,KAAA,KACAgY,EAAAxZ,MAAAjC,MAAAub,EAAA1U,YAAA,KACA2U,EAAAvZ,MAAAjC,MAAAub,EAAA1U,YAAA,KACA4U,EAAAvI,iBAAA,YAAA4I,EAAA,SACAL,EAAAvI,iBAAA,WAAAgJ,KACAV,EAAAtI,iBAAA,YAAA4I,EAAA,OACAN,EAAAtI,iBAAA,WAAAgJ,KACAN,IAKAuC,GACAtf,EAAAuf,WA7GA,SAAAC,GACAhD,EAAAgD,GAAAlD,qBAAAjY,cAAA,IAAAob,MAAA,WA6GAzf,EAAAyS,OACAzS,EAAAwc,QACAxc,EAAA2c,UACA3c,EAAA4c,YACA5c,EAAA4G,QAAA,WACA0W,aAAAnB,GACAU,EAAAhd,QAAA,SAAAlD,GACAA,EAAAiK,aAEAgW,EAAAD,EAAAD,GAAA7c,QAAA,SAAAuV,GACAA,EAAAxN,YAAwCwN,EAAAxN,WAAAwL,YAAAgC,MAGxCpY,OAAAC,eAAA+C,EAAA,iBACA7C,IAAA,WACA,OAAA2f,GAEA4C,IAAA,SAAAniB,GACA,oBAAAA,GAAAmQ,MAAAnQ,IAAAoiB,SAAApiB,IACA,UAAAkC,MAAA,uDAEAqd,EAAAvf,GACAif,EAAAhd,OAAA,IACAsd,EAAAN,EAAAhd,OAAA,GAEAsd,EAAA,IACAA,EAAA,GAEAN,EAAA3c,QAAA,SAAA4d,EAAAne,GACA,GAAAA,IAAAwd,EACA,OAAAte,EAAA+V,kBAAAkJ,EAAAnB,qBAAA,2CAEA9d,EAAA+V,kBAAAkJ,EAAAnB,qBAAA,0CAIAtc,EAEA,SAAA4f,EAAAja,GACA,IAKAka,EACAC,EANAC,EAAAtO,SAAAqC,cAAA,OACAkM,EAAAvO,SAAAqC,cAAA,OACAmM,EAAAxO,SAAAqC,cAAA,UACAoM,EAAAzO,SAAAqC,cAAA,SACA/V,EAAA4H,EAAA7C,MAAA6C,EAAA7C,KAAAjB,OAAA8D,EAAA7C,KAAAjB,OAAA4L,OAAA9H,EAAA7C,KAAAjB,OAAAhF,KAAA,GAGA,SAAAsjB,IACAD,EAAA9c,MAAAuS,WAAAnX,EAAA4E,MAAAwS,6BACAsK,EAAA9c,MAAAyS,MAAArX,EAAA4E,MAAA0S,wBACAtX,EAAA4hB,qBACAF,EAAA9c,MAAAuS,WAAAnX,EAAA4E,MAAAid,qCACAH,EAAA9c,MAAAyS,MAAArX,EAAA4E,MAAAkd,iCAyBA,SAAAC,EAAApS,GACAA,IAAA,iBAAAlJ,QAAAkJ,EAAA4G,YAvBA,WACA,IAAAyL,EAAA,EACAX,KACArhB,EAAAoB,KAAAC,QAAA,SAAAC,GACA,IAAAvC,EAAAuC,EAAA6F,EAAA7C,KAAAjB,OAAAhF,MACAgjB,EAAAtiB,IAAAijB,EAAAhiB,EAAAE,WAAA+hB,uBACAD,GAAA,EACAX,EAAAtiB,IACAkQ,MAAAjP,EAAAuR,WAAApK,EAAA7C,KAAAjB,OAAAG,MAAA,WAAgFc,MAAQvF,WACxFie,MAAA,SAAA7V,GACAua,EAAA3iB,QACAoI,EAAAiP,kBACAsL,EAAA7b,cAAA,IAAAob,MAAA,UACAjhB,EAAAkiB,2BAKAb,EAAA7iB,OAAA0E,KAAAme,GAAAtS,IAAA,SAAA1P,GACA,OAAAgiB,EAAAhiB,KAKA8iB,GACAb,EAAAI,EAAAnO,wBACAqK,IACAA,EAAAxV,UACAwV,OAAA7d,IAEA6d,EAAAG,EAAA5W,GACAf,KAAAkb,EAAAlb,KACAD,IAAAmb,EAAAnb,IACAE,MAAAib,EAAAjb,MACAC,OAAAgb,EAAAhb,OACAjE,OAAAif,EAAAjf,OACAM,MAAA2e,EAAA3e,OACiB0e,GAAsBjB,eAAA,KACvC9B,cAAA,GAEAte,EAAA+V,kBAAAyL,EAAA,sCACAxhB,EAAA+V,kBAAA0L,EAAA,8CACAzhB,EAAA+V,kBAAA2L,EAAA,6CACAC,IACAD,EAAAU,QAAApiB,EAAAkiB,oBACAR,EAAA7L,iBAAA,mBAAA1O,GAEA,KAAAA,EAAAoP,UACAqH,EAAAU,eAAA,GAGA,KAAAnX,EAAAoP,UACAqH,EAAAU,eAAA,GAGA,KAAAnX,EAAAoP,UACAqH,EAAAmD,WAAAnD,EAAAU,eACAte,EAAAqiB,sBAGA,IAAAlb,EAAAoP,UACAqH,EAAAmD,WAAAnD,EAAAU,eACAnX,EAAAsP,kBAGA,KAAAtP,EAAAoP,SACAvW,EAAAqiB,uBAGAX,EAAA7L,iBAAA,mBACA7V,EAAA+B,UAAAoF,EAAA7C,KAAAjB,OAAAhF,KAAAqjB,EAAA3iB,SAEA2iB,EAAA7L,iBAAA,QAAAkM,IACA,2CAAA1gB,QAAA,SAAAsG,GACA+Z,EAAA7L,iBAAAlO,EAAAga,KAEAD,EAAA3iB,MAAAoI,EAAA7C,KAAAjB,QAAArD,EAAAmD,cAAAgE,EAAA7C,KAAAjB,OAAAhF,OAAA,GACAmjB,EAAA7L,UAAA3V,EAAAE,WAAAoiB,iBAAAC,QAAA,MAAAhjB,GACAkiB,EAAAW,QAAA,WACA,GAAAxE,EACA,OAAA5d,EAAAkiB,sBAEAH,KAEAN,EAAA9L,UAAA3V,EAAA4E,MAAA4d,wBACAjB,EAAA1L,iBAAA,iBAAA1O,GACA,OAAAA,EAAAiP,oBAEAmL,EAAA3L,YAAA4L,GACAD,EAAA3L,YAAA8L,GACAH,EAAA3L,YAAA6L,GACAta,EAAA6W,MAAApc,MACAqN,MAAAsS,IAEA/iB,OAAA0E,KAAAlD,EAAAmD,eAAAnC,QACAxC,OAAA0E,KAAAlD,EAAAmD,eAAA9B,QAAA,SAAAohB,GACA,IAAAzZ,EAAAhJ,EAAAsD,gBAAAmf,GACAtb,EAAA6W,MAAApc,MACAqN,MAAAjP,EAAAE,WAAAwiB,uBAAAH,QAAA,MAAAvZ,EAAAiG,OAAAjG,EAAA3K,MACA2e,MAAA,SAAA7V,GACAA,EAAAsP,iBACAzW,EAAA+B,UAAA0gB,EAAA,IACAziB,EAAAic,aAAApH,aAuHA7U,EAAAkiB,oBAAA,WACAtE,IACAA,EAAAxV,UACAwV,OAAA7d,IAGAC,EAAAqiB,mBAAA,WACApP,SAAAsM,oBAAA,QAAAvf,EAAAqiB,oBACA3E,EAAA1d,EAAA4E,MAAAoa,kBACAhf,EAAAkiB,sBACAliB,EAAAqf,aACArf,EAAAqf,YAAAjX,UAEApI,EAAAqf,iBAAAtf,GAEAC,EAAAmd,iBAAA,SAAAhW,EAAAwb,GACA,GAAA3iB,EAAA8M,UAAA3F,EAAAwV,SAAA3c,EAAAiK,OAAA,CASA,IAAA2Y,EACA5E,KACA1K,EAAAqP,GAAA3iB,EAAAgU,YAAA7M,GACAwI,GACAkT,YAAA1b,EACA7C,KAAAtE,EAAAgM,UAAAsH,EAAAtP,EAAAsP,EAAA3P,GACAqa,SAEArO,EAAArL,KAAAiK,QAlJA,SAAApH,GACA,IAAA2b,IAAA3b,EAAA7C,KAAAkK,cAAArH,EAAA7C,KAAAye,uBACA5b,EAAA7C,KAAA6I,aAAAhG,EAAA7C,KAAA2J,UAAA9G,EAAA7C,KAAA0J,cACA7G,EAAA7C,KAAAjB,OACArD,EAAAE,WAAA8iB,YAAAF,GACA1B,EAAAja,GAEAnH,EAAAE,WAAA+iB,UACAjjB,EAAA4F,WAAAsL,OAAA,SAAAtR,EAAAhB,GACA,OAAAgB,EAAAhB,EAAAoC,QACqB,MACrBmG,EAAA6W,MAAApc,MACAqN,MAAAjP,EAAAE,WAAAgjB,SACAlG,MAAA,WACA/J,SAAAkQ,YAAA,QACAnjB,EAAAqiB,qBACAriB,EAAAic,aAAApH,WAIA7U,EAAAE,WAAAkjB,WAAApjB,EAAAqjB,eACAlc,EAAA6W,MAAApc,MACAqN,MAAAjP,EAAAE,WAAAojB,UACAtG,MAAA,WACAhd,EAAAsd,MAAAtd,EAAAqjB,cAAAlc,EAAA7C,KAAAR,YAAAqD,EAAA7C,KAAAlC,UACApC,EAAAwC,UAIAxC,EAAAE,WAAAqjB,qBACApc,EAAA6W,MAAApc,MACAqN,MAAAjP,EAAAE,WAAAsjB,mBACAxF,MAAA,WACA,IAAA5f,KAqBA,OApBA4B,EAAAe,YAAAM,QAAA,SAAA0B,GACA,SAAA0gB,EAAAtc,GACApE,EAAAwM,QAAAxM,EAAAwM,OACApI,EAAAsP,iBACAzW,EAAAoW,gBAAAjP,GACAnH,EAAAqiB,qBACAriB,EAAAgC,QAAA,GACAhC,EAAAiL,iBAEA,IAAA2L,EAAA3D,SAAAqC,cAAA,OACAuI,EAAAjH,GACAA,EAAAf,iBAAA,aAAA4N,GACA7M,EAAAf,iBAAA,QAAA4N,GACA7M,EAAAjB,WAAA5S,EAAAwM,OAAAvP,EAAAE,WAAAwjB,yBACA1jB,EAAAE,WAAAyjB,4BACA5gB,EAAAkM,OAAAlM,EAAA1E,MACAD,EAAAwD,MACAqN,MAAA2H,MAGAxY,KAGA+I,EAAA7C,MAAA6C,EAAA7C,KAAAjB,QAAA8D,EAAA7C,KAAAR,aAAA,GACAqD,EAAA6W,MAAApc,MACAqN,MAAAjP,EAAAE,WAAA0jB,eACArB,QAAA,OAAApb,EAAA7C,KAAAjB,OAAA4L,OAAA9H,EAAA7C,KAAAjB,OAAAhF,MACA2e,MAAA,SAAArN,GACA3P,EAAAe,YAAAoG,EAAA7C,KAAAR,aAAAyL,QAAA,EACAI,EAAA8G,iBACAzW,EAAAoW,gBAAAzG,GACA3P,EAAAqiB,qBACAriB,EAAAiL,iBACA0T,WAAA,WAAoD3e,EAAAgC,QAAA,IAAqB,QAKzEhC,EAAAE,WAAAiJ,gBAAAnJ,EAAAE,WAAA2jB,0BACArlB,OAAA0E,KAAAlD,EAAAsC,MAAAC,MAAAvB,OAAA,GACAxC,OAAA0E,KAAAlD,EAAAsC,MAAAM,SAAA5B,OAAA,IACAmG,EAAA6W,MAAApc,MACAqN,MAAAjP,EAAAE,WAAA4jB,wBACA9G,MAAA,SAAA7V,GACAA,EAAAsP,iBACAzW,EAAAsC,MAAAC,QACAvC,EAAAsC,MAAAM,WACA5C,EAAA+jB,kBACA/jB,EAAAgkB,qBACAhkB,EAAAqP,oBAAAtP,EACAC,EAAA6F,cAAA,gBAA4Doe,YAAAjkB,EAAA4E,MAAAwM,YAC5DpR,EAAA6F,cAAA,aAAyDyC,WAAAtI,EAAA4E,MAAA0D,aACzDtI,EAAAiL,iBACAjL,EAAAgC,QAAA,GACAhC,EAAAqiB,qBACAriB,EAAAic,aAAApH,WAIA7U,EAAAE,WAAAgkB,cAAAlkB,EAAAE,WAAAikB,mBAAArB,IACA3b,EAAA6W,MAAApc,MACAqN,MAAAjP,EAAAE,WAAAkkB,yBAAA7B,QAAA,KAAApb,EAAA7C,KAAAjB,OAAA4L,OAAA9H,EAAA7C,KAAAjB,OAAAhF,MACA2e,MAAA,SAAArN,GACAA,EAAA8G,iBACAzW,EAAAqK,MAAAlD,EAAA7C,KAAAjB,OAAAhF,KAAA,OACA2B,EAAAic,aAAApH,WAGA1N,EAAA6W,MAAApc,MACAqN,MAAAjP,EAAAE,WAAAmkB,0BAAA9B,QAAA,KAAApb,EAAA7C,KAAAjB,OAAA4L,OAAA9H,EAAA7C,KAAAjB,OAAAhF,MACA2e,MAAA,SAAArN,GACAA,EAAA8G,iBACAzW,EAAAqK,MAAAlD,EAAA7C,KAAAjB,OAAAhF,KAAA,QACA2B,EAAAqiB,qBACAriB,EAAAic,aAAApH,YAuCAyP,CAAA3U,GAEA3P,EAAA6F,cAAA,cAAA8J,IAGAA,EAAArL,KAAAiK,SACAvO,EAAAqf,aACArf,EAAAqiB,qBAEAO,GACAxc,KAAAkN,EAAAtP,EAAAsP,EAAAW,KAAA7N,KACApG,EAAA4E,MAAA2f,sBAAAvkB,EAAA6T,iBACA1N,IAAAmN,EAAA3P,EAAA2P,EAAAW,KAAA9N,IACAnG,EAAA4E,MAAA4f,qBAAAxkB,EAAA8T,gBACAzN,MAAAsJ,EAAArL,KAAA3B,MAAAgN,EAAArL,KAAAN,EAAAsP,EAAAW,KAAA7N,KACAE,OAAAqJ,EAAArL,KAAAjC,OAAAsN,EAAArL,KAAAX,EAAA2P,EAAAW,KAAA9N,IACA9D,OAAAsN,EAAArL,KAAAjC,OACAM,MAAAgN,EAAArL,KAAA3B,OAEA3C,EAAA2T,SACAiP,EAAAxc,KAAApG,EAAA4E,MAAA6f,wBAAA,KACA7B,EAAAjgB,MAAA3C,EAAA2C,MAAA,EAAA3C,EAAA4E,MAAA6f,wBAAA,MAEAzkB,EAAAqf,YAAAtB,EAAApO,EAAAiT,EAAA5E,GACA/K,SAAA4C,iBAAA,UAvCA,SAAA6O,IACAzf,sBAAA,WACAgO,SAAA4C,iBAAA,QAAA7V,EAAAqiB,oBACApP,SAAAsM,oBAAA,UAAAmF,OAqCAvd,EAAAsP,sBAKCrW,MAAA9C,SAAAC,EAAAD,QAAAwC,oBCpjBD,IAAAA,OAusCCC,KArsCDD,EAAA,WACA,aACA,gBAAAE,EAAA2kB,GA8HA,SAAAC,EAAAnW,EAAAC,GACA,IAAA1K,EAAAlG,KACA,IAAAkG,EAAAyK,EAAyBzK,GAAA0K,EAAW1K,GAAA,EACpClG,EAAAkG,KAEA,OAAAlG,EAlIAkC,EAAAsR,MAAA,EACAtR,EAAAkE,QACA3B,QACAK,YAEA5C,EAAA6kB,uBACA7kB,EAAA8kB,sBACA9kB,EAAA2I,sBACA3I,EAAA+kB,qBACA/kB,EAAA8M,UAAA,EACA9M,EAAAyF,YACA3B,YAAA,EACA1B,SAAA,GAEApC,EAAA2V,UAAA,GACA3V,EAAAglB,YAAA,iBACAhlB,EAAAilB,sBAAA,wCACAjlB,EAAAklB,4BAAA,qCACAllB,EAAAmlB,SAAA,gCACAnlB,EAAA2K,QAAA,KACA3K,EAAAolB,eAAA,MACAplB,EAAAmD,iBACAnD,EAAAqlB,WACArlB,EAAAslB,UAAA,EACAtlB,EAAAulB,aAAA,EACAvlB,EAAAwlB,iBACAxlB,EAAA0D,aAA4BM,KAAAL,MAC5B3D,EAAA0E,aACA1E,EAAAylB,eACAzlB,EAAAsC,OACAC,QACAK,WACAyF,UAEArI,EAAAuD,cAAA,WACA,UAEAvD,EAAA4F,cACA5F,EAAA0lB,UACA1lB,EAAAE,cACAF,EAAA4E,SACA5E,EAAAuR,cACAvR,EAAA4K,WACA5K,EAAA2lB,WACA3lB,EAAA4lB,gBACA5lB,EAAA6lB,UACA7lB,EAAAyP,WACAzP,EAAAsH,eAAA,EACAtH,EAAA8lB,eAAA,EACA9lB,EAAA+lB,gBAAA,EACA/lB,EAAAgmB,gBAAA,EACAhmB,EAAAiI,cACAjI,EAAAkI,gBACAlI,EAAAimB,aACA,sBACA,sBACA,yBACA,wBACA,0BACA,0BAEAjmB,EAAAkmB,qBACAlmB,EAAAmmB,YAAA,mEACA,8FACA,uFACA,uFACA,+FACA,oFACA,sFACA,2DACAnmB,EAAAomB,OAAsBpiB,EAAA,EAAAL,EAAA,GACtB3D,EAAA+F,gBAAA,SAAAa,GACA,IAAAxI,KAAAyB,EAAAG,EAAAe,YAAAhD,EAAAiC,EAAAoB,KAAAJ,OACA,WAAAjD,MACAiC,EAAA4F,WAAAvE,QAAA,SAAAC,EAAAR,GACAQ,GACAR,IAAA/C,IACA,IAAAuD,EAAAN,QAIA5C,EAAA0C,MACAQ,EAAAD,QAAA,SAAAyF,GACA,IAAAuf,GACA,IAAAvf,GAAAjH,EAAAiH,KACAuf,EAAArmB,EAAAkE,OAAAtB,QAAAkE,IACAF,GAAA/G,EAAAwmB,GAAA9W,QACAvP,EAAAoB,KAAAN,KACA1C,EAAA0C,GAAAjB,EAAAwmB,GAAAhoB,MAAA2B,EAAAoB,KAAAN,GAAAjB,EAAAwmB,GAAAhoB,WAVAD,EAAA0C,GAAA,QAcA1C,IAEA4B,EAAA6I,0BAAA,WACA,OAAA7I,EAAAE,WAAAomB,mBACAtmB,EAAAsC,MAAAC,MAAA,IAAAvC,EAAA4E,MAAAgE,wBAAA5I,EAAAsR,MADqD,GAGrDtR,EAAA6S,sBAAA,WACA,OAAA7S,EAAAE,WAAAqmB,gBACAvmB,EAAAsC,MAAAM,SAAA,IAAA5C,EAAA4E,MAAAkE,oBAAA9I,EAAAsR,MADkD,GAGlDtR,EAAAiL,eAAA,WACA,GAAAjL,EAAAE,WAAAiJ,gBAAAnJ,EAAAE,WAAA7B,KAAA,CACA,IAAAiR,KACAtP,EAAAe,YAAAM,QAAA,SAAA0B,GACAuM,EAAAvM,EAAA1E,OAAA0E,EAAAwM,SAEAiX,aAAAC,QAAAzmB,EAAAglB,YAAA,IAAAhlB,EAAAE,WAAA7B,KAAAqoB,KAAAC,WACArkB,OACAC,KAAAvC,EAAAsC,MAAAC,KACAK,QAAA5C,EAAAsC,MAAAM,SAEAsB,QACA3B,KAAAvC,EAAAkE,OAAA3B,KACAK,QAAA5C,EAAAkE,OAAAtB,SAEA+H,QAAA3K,EAAA2K,QACAya,eAAAplB,EAAAolB,eACA9V,kBAGAtP,EAAAe,UAAA,WACA,OAAAf,EAAAyB,QAAAzB,EAAA4mB,gBASA5mB,EAAAgkB,mBAAA,WACA,IAAAnkB,EAAAG,EAAAe,YACAf,EAAAkE,OAAAtB,QAAAgiB,EAAA,EAAA/kB,EAAAmB,OAAA,IAEAhB,EAAA+jB,gBAAA,WACA/jB,EAAAkE,OAAA3B,KAAAqiB,EAAA,EAAA5kB,EAAAoB,KAAAJ,OAAA,IAEAhB,EAAA6G,iBAAA,WACA,OAAA7G,EAAAe,YAAAqC,OAAA,SAAA0D,GACA,OAAAA,EAAAyI,UAGAvP,EAAAuB,kBAAA,SAAAD,EAAA+B,GACA,IAAAjF,EAAAiF,EAAAoR,cAAA,GACA,mBAAArW,IACAA,IAAAgC,MAAAJ,EAAAwB,MAAA6B,KAEA/B,EAAA+B,EAAAhF,MAAAD,GAEA4B,EAAA2U,iBAAA,WACA3U,EAAA6mB,UACA7mB,EAAAe,YAAAM,QAAA,SAAAgC,GACArD,EAAAuB,kBAAAvB,EAAA6mB,OAAAxjB,MAGArD,EAAA8mB,kBAAA,SAAAznB,GAEA,IADA,IAAAE,EAAA,EACAS,EAAA4lB,aAAAvmB,IAEAA,GADAE,GAAA,EAGA,OAAAF,GAEAW,EAAAoD,OAAA,SAAAI,GACA,IAAAkH,EAAA1K,EAAAqlB,QAAA7hB,GAKA,OAJAkH,QAAA3K,IAAAyD,IACAqH,QAAAC,KAAA,mEAAAtH,GACAkH,EAAA1K,EAAAqlB,QAAAra,QAEAN,GAEA1K,EAAAgP,qBAAA,SAAA1E,EAAAlJ,GACA,IAAApC,EAAAgF,EAAAjG,EAAAqD,EAAAJ,OACA,IAAAgD,EAAA,EAAuBA,EAAAjG,EAAOiG,GAAA,EAC9B,QAAAjE,IAAAqB,EAAA4C,IAAA,OAAA5C,EAAA4C,KAAA,eAAAjE,GAAA0G,QAAArF,EAAA4C,GAAAsG,IAEA,kBADAtL,SAAAoC,EAAA4C,IACA,SAAAhF,EAGA,gBAEAgB,EAAA+mB,eAAA,WACAvoB,OAAA0E,KAAAlD,EAAAiI,YAAA5G,QAAA,SAAA2lB,GACAhnB,EAAAiI,WAAA+e,GAAAxkB,UAGAxC,EAAAinB,iBAAA,WACAzoB,OAAA0E,KAAAlD,EAAAiI,YAAA5G,QAAA,SAAA2lB,GACAhnB,EAAAiI,WAAA+e,GAAAhlB,YAGAhC,EAAAknB,eAAA,SAAA/f,EAAAnD,EAAAL,EAAAqD,GACA,IAAAmgB,EACAre,EAAA9I,EAAA6S,wBACAjK,EAAA5I,EAAA6I,6BACA,IAAAlF,IACAK,EAAAhE,EAAA2C,MAAA3C,EAAAE,WAAAknB,qBAAApjB,EAAAhE,EAAA2C,QACA3C,EAAA0E,UAAAS,YAAAnF,EAAAE,WAAAmnB,yBACAF,GAAA,GAEAnjB,EAAAhE,EAAAE,WAAAknB,oBAAAte,EAAA,IACA9I,EAAA0E,UAAAS,YAAAnF,EAAAE,WAAAmnB,yBACAF,GAAA,KAGA,IAAAxjB,IACAA,EAAA3D,EAAAqC,OAAArC,EAAAE,WAAAknB,qBAAAzjB,EAAA3D,EAAAqC,SACArC,EAAA0E,UAAAU,WAAApF,EAAAE,WAAAmnB,yBACAF,GAAA,GAEAxjB,EAAA3D,EAAAE,WAAAknB,oBAAAxe,EAAA,IACA5I,EAAA0E,UAAAU,WAAApF,EAAAE,WAAAmnB,yBACAF,GAAA,IAGAA,IAAAngB,GAAAhH,EAAAsnB,cAAA,IAAAtnB,EAAAsnB,YAAAxjB,cACA9D,EAAAunB,YAAA5I,WAAA3e,EAAAid,UAAAjd,EAAAE,WAAAsnB,iBAAArgB,KAGAnH,EAAAiD,uBAAA,WACAjD,EAAAoB,KAAApB,EAAA8B,aAAAsB,OAAA,SAAA9B,GACA,YAGAtB,EAAAkB,eAAA,SAAA/C,EAAA0B,GACA,IAAA1B,EAAAE,KACA,UAAA4C,MAAA,0CAEA,GAAApB,EAAAuD,OAAA,SAAAtF,GAAuC,OAAAA,EAAAO,OAAAF,EAAAE,OAA4B2C,OAAA,EACnE,UAAAC,MAAA,0BACA9C,EAAAE,KAAA,8CAEA,UAEA2B,EAAAynB,YAAA,SAAAC,EAAAC,EAAAtoB,EAAAuoB,GACAF,EAAAroB,QAAAU,IAAA4nB,EAAAtoB,GAAAuoB,EAAAD,EAAAtoB,IAEAW,EAAA6nB,cAAA,WACA7nB,EAAAC,SAAAC,WAAAmB,QAAA,SAAAvD,GACAkC,EAAAynB,YAAAznB,EAAAE,WAAAF,EAAA0I,KAAA5K,EAAA,GAAAA,EAAA,OAGAkC,EAAA8nB,SAAA,WACA9nB,EAAAC,SAAAE,OAAAkB,QAAA,SAAAvD,GACAkC,EAAAynB,YAAAznB,EAAA4E,MAAA5E,EAAA0I,KAAA9D,UAAkE9G,EAAA,GAAAA,EAAA,OAGlEkC,EAAA+nB,SAAA,SAAAC,GACAhoB,EAAA6G,mBAAAxF,QAAA,SAAAyF,EAAApE,GACAoE,EAAAzI,OAAA2pB,QAAAjoB,IAAAioB,IACAhoB,EAAAsC,MAAAM,QAAAF,GACA/B,KAAAoD,IAAA/D,EAAAkK,wBAAApD,EAAAzI,MAAA2B,EAAA4E,MAAAuF,mBAGAnK,EAAAsC,MAAAM,SAAA,GAAA5C,EAAAkK,wBAAA,eAEAlK,EAAAoI,QAAA,YACApI,EAAAoU,aAAApU,EAAAiK,QAAAjK,EAAAiK,OAAAb,YACApJ,EAAAiK,OAAAb,WAAAwL,YAAA5U,EAAAiK,QAEAjK,EAAAkc,YAAAqD,oBAAA,UAAAvf,EAAA6c,SAAA,GACA7c,EAAAkc,YAAAqD,oBAAA,YAAAvf,EAAA8c,WAAA,GACA9c,EAAAkc,YAAAqD,oBAAA,WAAAvf,EAAA+c,UAAA,GACA/c,EAAAkc,YAAAqD,oBAAA,QAAAvf,EAAAgd,OAAA,GACAhd,EAAAkc,YAAAqD,oBAAA,YAAAvf,EAAAid,WACAjd,EAAAkc,YAAAqD,oBAAA,QAAAvf,EAAAkd,aAAA,GACAld,EAAAiK,OAAAsV,oBAAA,cAAAvf,EAAAioB,aAAA,GACAjoB,EAAAiK,OAAAsV,oBAAA,OAAAvf,EAAAod,MACApd,EAAAic,aAAAsD,oBAAA,WAAAvf,EAAAud,UAAA,GACAvd,EAAAic,aAAAsD,oBAAA,QAAAvf,EAAAwd,OAAA,GACAxd,EAAAic,aAAAsD,oBAAA,UAAAvf,EAAAyd,SAAA,GACA/f,OAAA6hB,oBAAA,SAAAvf,EAAAgC,QACAhC,EAAAkoB,UAAAloB,EAAAkoB,SAAAC,YACAnoB,EAAAkoB,SAAAC,cAGAnoB,EAAAooB,sBAAA,WACA,IAAAvoB,EACAG,EAAAqoB,qBACAroB,EAAAqP,gBACA,iBAAArP,EAAAqP,eAAAnL,QACA,OAAAlE,EAAAqP,eAAAnL,SACAlE,EAAAqP,eAAAnL,OAAA3B,KAAAvB,SAAAhB,EAAAoB,UAAAJ,SACAhB,EAAAkE,OAAA3B,KAAAvC,EAAAqP,eAAAnL,OAAA3B,MAEA1C,EAAAG,EAAAe,YACAf,EAAAqP,eAAAnL,OAAAtB,QAAA5B,SAAAnB,EAAAmB,SACAhB,EAAAkE,OAAAtB,QAAA5C,EAAAqP,eAAAnL,OAAAtB,SAEA5C,EAAA2K,aAAA5K,IAAAC,EAAAqP,eAAA1E,QACA9K,EAAA,GAAAxB,KAAA2B,EAAAqP,eAAA1E,QACA3K,EAAAolB,oBAAArlB,IAAAC,EAAAqP,eAAA+V,eACA,MAAAplB,EAAAqP,eAAA+V,oBACArlB,IAAAC,EAAAqP,eAAA1E,SAAA3K,EAAAsD,gBAAAtD,EAAA2K,UAAA3K,EAAAolB,gBACAplB,EAAAqK,MAAArK,EAAA2K,QAAA3K,EAAAolB,kBAIAplB,EAAAsoB,WAAA,WACA,OAAAtoB,EAAAuoB,WAAAvoB,EAAAuoB,WAAAC,KAAAxoB,EAAAoJ,YAEApJ,EAAAyoB,YAAA,SAAAC,GACA,OAAAA,EAAAnG,QAAA,mBAEAviB,EAAA2oB,cAAA,SAAAD,GACA,OAAAE,WAAAF,EAAA,KAEA1oB,EAAA6oB,gBAAA,SAAAxpB,GACA,UAAA4N,KAAA5N,GAGA,OAFAW,EAAA4E,MAAAvF,EAAA,UAAAW,EAAA2oB,cAAA3oB,EAAA4E,MAAAvF,SACAW,EAAA4E,MAAAvF,EAAA,QAAAW,EAAAyoB,YAAAzoB,EAAA4E,MAAAvF,KAIA,8BAAAA,GAAA,iBAAAW,EAAA4E,MAAAvF,KACAW,EAAA4E,MAAAvF,GAAAW,EAAA4E,MAAAvF,GAAAypB,MAAA,KACA/Z,IAAA,SAAAjR,GAAuC,OAAAqR,SAAArR,EAAA,QAGvCkC,EAAA+oB,SAAA,SAAAC,GACAhpB,EAAA0I,KAAAsgB,IACAxqB,OAAA0E,KAAAlD,EAAA0I,KAAAsgB,IAAA3nB,QAAA,SAAAhC,GACAW,EAAAgpB,GAAA3pB,GAAAW,EAAA0I,KAAAsgB,GAAA3pB,MAGAW,EAAAipB,iBAAA,SAAA5pB,GACA,WAAAW,EAAAkpB,UAAAziB,QAAApH,GACAW,EAAAyc,gBAAApd,GAEAW,EAAA4E,MAAAvF,IAEAW,EAAAmpB,iBAAA,SAAA9pB,EAAAN,EAAAqqB,GACA,IAAAC,GAAA,qEAAA5iB,QAAApH,IACA,IAAAW,EAAAkpB,UAAAziB,QAAApH,GACAW,EAAAyc,gBAAApd,GAAAN,GAEA,IAAAkO,KAAA5N,KACAA,EAAAW,EAAAspB,oBAAAjqB,IAEAW,EAAA4E,MAAAvF,GAAAN,EACAiB,EAAA6oB,gBAAAxpB,IAEAgqB,GACArpB,EAAAgC,SAEAonB,IACAppB,EAAAwC,MAAA,GACAxC,EAAA6F,cAAA,gBAAoDxH,KAAA,QAAAU,YAGpDiB,EAAAqoB,mBAAA,WACA,GAAAroB,EAAAE,WAAA7B,MAAA2B,EAAAE,WAAAiJ,eAAA,CACA,IACAnJ,EAAAqP,eAAAmX,aAAA+C,QAAAvpB,EAAAglB,YAAA,IAAAhlB,EAAAE,WAAA7B,MACiB,MAAA8I,GACjB0D,QAAAC,KAAA,gCAAA3D,EAAAqiB,SACAxpB,EAAAqP,oBAAAtP,EAEA,GAAAC,EAAAqP,eACA,IACArP,EAAAqP,eAAAqX,KAAA+C,MAAAzpB,EAAAqP,gBACqB,MAAAlI,GACrB0D,QAAAC,KAAA,0CAAA3D,GACAnH,EAAAqP,oBAAAtP,EAGAC,EAAAqP,iBACA,iBAAArP,EAAAqP,eAAA/M,OACA,OAAAtC,EAAAqP,eAAA/M,QACAtC,EAAAsC,MAAAC,KAAAvC,EAAAqP,eAAA/M,MAAAC,KACAvC,EAAAsC,MAAAM,QAAA5C,EAAAqP,eAAA/M,MAAAM,SACA,0BAAAvB,QAAA,SAAAvD,GACAkC,EAAAsC,MAAAxE,KACAkC,EAAAsC,MAAAxE,UAIA,iBAAAkC,EAAAqP,eAAAC,YACAtP,EAAAe,YAAAM,QAAA,SAAA0B,GACA/C,EAAAqP,eAAAC,iBAAAvP,IAAAC,EAAAqP,eAAAC,WAAAvM,EAAA1E,QACA0E,EAAAwM,QAAAvP,EAAAqP,eAAAC,WAAAvM,EAAA1E,YAOA2B,EAAA8gB,KAAA,WACA,IAAA9gB,EAAA0pB,YAAA,CAMA,IAAAC,KAkNA,OAjNA3pB,EAAA6nB,gBACA7nB,EAAA8nB,WACA9nB,EAAA4pB,gBACA5pB,EAAAgc,SACAhc,EAAAsJ,SAAA,kBACAtJ,EAAA6pB,GAAA,UAAA5c,KAAAvP,OAAAosB,UAAAC,WACA/pB,EAAAgqB,KAAA,OAAA/c,KAAAvP,OAAAosB,UAAAC,WACA/pB,EAAAiqB,OAAA,SAAAhd,KAAAvP,OAAAosB,UAAAC,WACA/pB,EAAAkqB,IAAA,QAAAjd,KAAAvP,OAAAosB,UAAAC,WACA/pB,EAAA2T,OAAA,UAAA1G,KAAAvP,OAAAosB,UAAAC,WACA/pB,EAAA4M,WAAA,OACA5M,EAAAmqB,cAAA,WACAnqB,EAAA4M,WAAA5M,EAAAiqB,OAAA,eAAAjqB,EAAA4M,WACA5M,EAAAmqB,cAAAnqB,EAAAkqB,IAAA,mBAAAlqB,EAAAoqB,eACApqB,EAAAqqB,qBAAwCrmB,EAAA,EAAAL,EAAA,GACxCnF,OAAA0E,KAAAlD,EAAA4E,OAAAvD,QAAArB,EAAA6oB,iBACA7oB,EAAAwB,KAAA2J,cAAAnL,EAAAmL,cACAnL,EAAAwB,KAAA6J,OAAArL,EAAAqL,OACArL,EAAAwB,KAAAqU,iBAAA7V,EAAA6V,iBACA7V,EAAAwB,KAAA+d,oBAAAvf,EAAAuf,oBACAvf,EAAAwB,KAAAqE,cAAA7F,EAAA6F,cAOA7F,EAAAwB,KAAA4G,QAAApI,EAAAoI,QAQApI,EAAAwB,KAAAua,SAAA/b,EAAA+b,SACA/b,EAAAwB,KAAA0D,sBAAAlF,EAAAkF,sBACAlF,EAAAwB,KAAA6jB,QAAArlB,EAAAqlB,QACArlB,EAAAwB,KAAAoJ,QAAA5K,EAAA4K,QACA5K,EAAAwB,KAAAumB,SAAA/nB,EAAA+nB,SACA/nB,EAAAwB,KAAAsT,YAAA9U,EAAA8U,YACA9U,EAAAwB,KAAA6S,QAAArU,EAAAqU,QACArU,EAAAwB,KAAAgE,cAAAxF,EAAAwF,cACAxF,EAAAwB,KAAAkF,oBAAA1G,EAAA0G,oBACA1G,EAAAwB,KAAA8D,eAAAtF,EAAAsF,eACAtF,EAAAwB,KAAAgO,eAAAxP,EAAAwP,eACAxP,EAAAwB,KAAA2C,SAAAnE,EAAAmE,SACAnE,EAAAwB,KAAA6D,QAAArF,EAAAqF,QACArF,EAAAwB,KAAA8B,gBAAAtD,EAAAsD,gBACAtD,EAAAwB,KAAAqC,qBAAA7D,EAAA6D,qBACA7D,EAAAwB,KAAAiC,iBAAAzD,EAAAyD,iBACAzD,EAAAwB,KAAAuI,kBAAA/J,EAAA+J,kBACA/J,EAAAwB,KAAA0I,wBAAAlK,EAAAkK,wBACAlK,EAAAwB,KAAA6gB,mBAAAriB,EAAAqiB,mBACAriB,EAAAwB,KAAAwK,UAAAhM,EAAAgM,UACAhM,EAAAwB,KAAA4I,cAAApK,EAAAoK,cACApK,EAAAwB,KAAAuK,aAAA/L,EAAA+L,aACA/L,EAAAwB,KAAAsK,gBAAA9L,EAAA8L,gBACA9L,EAAAwB,KAAA6I,MAAArK,EAAAqK,MACArK,EAAAwB,KAAAgB,KAAAxC,EAAAwC,KACAxC,EAAAwB,KAAA8oB,YAAAtqB,EAAAsqB,YACAtqB,EAAAwB,KAAA0E,WAAAlG,EAAAkG,WACAlG,EAAAwB,KAAAsR,YAAA9S,EAAA8S,YACA9S,EAAAwB,KAAAqN,kBAAA7O,EAAA6O,kBACA7O,EAAAwB,KAAAO,UAAA/B,EAAA+B,UACA/B,EAAAwB,KAAAiG,UAAAzH,EAAAyH,UACAzH,EAAAwB,KAAA6H,WAAArJ,EAAAqJ,WACArJ,EAAAwB,KAAAsI,WAAA9J,EAAA8J,WACA9J,EAAAwB,KAAA+G,WAAAvI,EAAAuI,WACAvI,EAAAwB,KAAAuG,aAAA/H,EAAA+H,aACA/H,EAAAwB,KAAAyI,OAAAjK,EAAAiK,OACAjK,EAAAwB,KAAAwL,QAAAhN,EAAA4P,IACA5P,EAAAwB,KAAAS,UAAAjC,EAAAiC,UACAjC,EAAAwB,KAAAK,UAAA7B,EAAA6B,UACA7B,EAAAwB,KAAAU,OAAAlC,EAAAkC,OACAlC,EAAAwB,KAAAX,aAAAb,EAAAa,aACAb,EAAAwB,KAAAE,aAAA1B,EAAA0B,aACA1B,EAAAwB,KAAAG,UAAA3B,EAAA2B,UACA3B,EAAAwB,KAAA4Q,gBAAApS,EAAAoS,gBACApS,EAAAwB,KAAAW,aAAAnC,EAAAmC,aACAnC,EAAAwB,KAAAiB,eAAAzC,EAAAyC,eACAzC,EAAAwB,KAAAqB,kBAAA7C,EAAA6C,kBACA7C,EAAAwB,KAAAsB,gBAAA9C,EAAA8C,gBACA9C,EAAAwB,KAAAQ,OAAAhC,EAAAgC,OACAhC,EAAAwB,KAAAuF,aAAA/G,EAAA+G,aACA/G,EAAAwB,KAAAiG,UAAAzH,EAAAyH,UACAzH,EAAAwB,KAAAyE,UAAAjG,EAAAiG,UACAjG,EAAAwB,KAAAkE,WAAA1F,EAAA0F,WACA1F,EAAAwB,KAAAulB,eAAA/mB,EAAA+mB,eACA/mB,EAAAwB,KAAA+oB,cAAAvqB,EAAAuqB,cACAvqB,EAAAwB,KAAAgpB,uBAAAxqB,EAAAwqB,uBACAxqB,EAAAwB,KAAAnB,eAAAL,EAAAK,eACAL,EAAAwB,KAAA4b,KAAApd,EAAAod,KACApd,EAAAwB,KAAA2nB,iBAAAnpB,EAAAmpB,iBACA3qB,OAAAC,eAAAuB,EAAAwB,KAAA,YACA7C,IAAA,WACA,OACAwB,OAAAH,EAAAC,SAAAE,OAAA+Q,OAAA,SAAAY,EAAAhU,GAA6F,OAAhBgU,EAAAhU,EAAA,IAAAA,EAAA,GAAgBgU,OAC7F5R,WAAAF,EAAAC,SAAAC,WAAAgR,OAAA,SAAAY,EAAAhU,GAAqG,OAAhBgU,EAAAhU,EAAA,IAAAA,EAAA,GAAgBgU,WAIrG9R,EAAAkpB,UAAA1qB,OAAA0E,KAAAlD,EAAAwB,KAAAvB,SAAAE,QACAH,EAAAkpB,UAAAna,IAAA,SAAAjR,GAA6C,OAAAkC,EAAAyqB,kBAAA3sB,GAAA,KAA2CuD,QAAAqpB,GACxF1qB,EAAAkpB,UAAAna,IAAA,SAAAjR,GAA6C,OAAAkC,EAAAyqB,kBAAA3sB,GAAA,KAA0CuD,QAAAqpB,GACvF1qB,EAAA2qB,UAAAjtB,OAAAktB,iBAAA3X,SAAA6C,KAAA,MACA9V,EAAAkpB,UAAA2B,OAAArsB,OAAA0E,KAAAlD,EAAA2qB,YAAAtpB,QAAA,SAAAhC,GAEAsqB,EAAAtqB,QAAAU,EACAvB,OAAAC,eAAAkrB,EAAAtqB,GACAV,IAAA,WACA,OAAAqB,EAAAipB,iBAAA5pB,IAEA6hB,IAAA,SAAAniB,GACAiB,EAAA0pB,cACA1pB,EAAA6kB,oBAAAxlB,GAAAN,GAEAiB,EAAAmpB,iBAAA9pB,EAAAN,QAIAP,OAAAC,eAAAuB,EAAAwB,KAAA,cACA7C,IAAA,WACA,OAAAqB,EAAAuoB,cAGA/pB,OAAAC,eAAAuB,EAAAwB,KAAA,cACA7C,IAAA,WACA,OAAAqB,EAAAyF,cAGAjH,OAAAC,eAAAuB,EAAAwB,KAAA,YACA7C,IAAA,WACA,OAAAqB,EAAA8M,YAGAtO,OAAAC,eAAAuB,EAAAwB,KAAA,SACA7C,IAAA,WACA,OAAAgrB,GAEAzI,IAAA,SAAA4J,GACAtsB,OAAA0E,KAAA4nB,GAAAzpB,QAAA,SAAAhC,GACAW,EAAAmpB,iBAAA9pB,EAAAyrB,EAAAzrB,IAAA,KAEAW,EAAAwC,MAAA,GACAxC,EAAA6F,cAAA,gBAAwDxH,KAAA,QAAAU,MAAA+rB,OAGxDtsB,OAAAC,eAAAuB,EAAAwB,KAAA,cAA4DzC,WAC5DP,OAAA0E,KAAAlD,EAAAE,YAAAmB,QAAA,SAAAhC,GACAb,OAAAC,eAAAuB,EAAAwB,KAAAtB,WAAAb,GACAV,IAAA,WACA,OAAAqB,EAAAE,WAAAb,IAEA6hB,IAAA,SAAAniB,GACAiB,EAAAE,WAAAb,GAAAN,EACA,SAAAM,GACAW,EAAAooB,wBAEApoB,EAAAwC,MAAA,GACAxC,EAAA6F,cAAA,oBAAgExH,KAAAgB,EAAAN,QAAAM,UAIhEW,EAAAqlB,QAAAra,OAAA,SAAAjM,EAAAgsB,GACAhsB,EAAA0B,OAAA1B,GACA,IAAAisB,EAEAC,EADA,cACAC,KAAAH,GACAI,EAAAF,IAAA,GAAAG,UAAA,MACAC,EAAAF,EAAAnqB,OAEA,GADAhB,EAAA4hB,wBAAA7hB,EACA,MAAAgrB,EAAAK,UAAA,MAAAH,EAAA,CACA,IACAD,EAAA,IAAAM,OAAAP,EAAAK,UAAA,EAAAL,EAAA/pB,QAAAqqB,EAAA,IAAAF,GACqB,MAAAhkB,GAErB,YADAnH,EAAA4hB,mBAAAza,GAGA,OAAA6jB,EAAA/d,KAAAlO,GAEA,QAAAA,EAAAkR,WACA,IADAlR,EAAAkR,WAAAsb,oBACA9kB,QAAAskB,EAAAQ,sBAEAvrB,EAAAqlB,QAAA3T,OAAA,SAAA3S,EAAAgsB,GACA,OAAAA,GACAhsB,IAAAgsB,IAEA,kCAAA1pB,QAAArB,EAAA+oB,UACA/oB,EAAAwrB,qBAAA,EAAAxrB,EAAAwB,MACAxB,EAAAqoB,qBACAroB,EAAA0I,KAAAtH,OACApB,EAAAwB,KAAAJ,KAAApB,EAAA0I,KAAAtH,OAEApB,EAAAwB,KAAAiqB,WAAAzrB,EAAAwB,KAAAkqB,eACA,kCAAA1rB,EAAAwB,KAAA2jB,WACAnlB,EAAAwB,KAAA2jB,SAAA,sCAEAnlB,EAAAwB,KAAAJ,KAAApB,EAAAwB,KAAAiqB,WAAAzrB,EAAAwB,KAAAkqB,aAEA1rB,EAAA0I,KAAAjH,SACAzB,EAAAwB,KAAAC,OAAAzB,EAAA0I,KAAAjH,QAEAzB,EAAAoU,cAAApU,EAAAsqB,YACArlB,sBAAA,WAAmDjF,EAAAgC,QAAA,KAEnDhC,EAAAgC,QAAA,GAEAhC,EAAA0pB,aAAA,EACA1pB,EAvNA,SAAA0qB,EAAArrB,IACA,IAAAW,EAAAkpB,UAAAziB,QAAApH,IACAW,EAAAkpB,UAAAtnB,KAAAvC,KA6NAW,EAAAwB,KAAA2G,KAAA,SAAAhB,GACAnH,EAAA8M,UAAA,GAQA9M,EAAAwB,KAAAqT,MAAA,WACA7U,EAAA8M,UAAA,EACA9M,EAAAic,aAAApH,UAEA7U,EAAAuoB,YAAAvoB,EAAAoU,eACA5V,OAAAC,eAAAuB,EAAAwB,KAAA,UACA7C,IAAA,WACA,OAAAqB,EAAAuoB,WACAvoB,EAAAuoB,WAAAlmB,OAEArC,EAAAoJ,WAAA/G,QAEA6e,IAAA,SAAAniB,GACAiB,EAAAuoB,WACAvoB,EAAAuoB,WAAAlmB,OAAAtD,EAEAiB,EAAAoJ,WAAA/G,OAAAtD,EAEAiB,EAAAgC,QAAA,MAGAxD,OAAAC,eAAAuB,EAAAwB,KAAA,SACA7C,IAAA,WACA,OAAAqB,EAAAuoB,WACAvoB,EAAAuoB,WAAA5lB,MAEA3C,EAAAoJ,WAAAzG,OAEAue,IAAA,SAAAniB,GACAiB,EAAAuoB,WACAvoB,EAAAuoB,WAAA5lB,MAAA5D,EAEAiB,EAAAoJ,WAAAzG,MAAA5D,EAEAiB,EAAAgC,QAAA,MAGAxD,OAAAC,eAAAuB,EAAAwB,KAAA,cACA7C,IAAA,WACA,OAAAqB,EAAAoJ,YAEA8X,IAAA,SAAAniB,GACA,IAAAiB,EAAAoU,YACA,UAAAuX,UAAA,0DAEA3rB,EAAAoJ,WAAArK,MAIAP,OAAAC,eAAAuB,EAAAwB,KAAA,qBACA7C,IAAA,WACA,OAAAqB,EAAA+kB,qBAGAvmB,OAAAC,eAAAuB,EAAAwB,KAAA,gBACA7C,IAAA,WACA,OAAAqB,EAAAkI,gBAGA1J,OAAAC,eAAAuB,EAAAwB,KAAA,cACA7C,IAAA,WACA,OAAAH,OAAA0E,KAAAlD,EAAAiI,YAAA8G,IAAA,SAAA6c,GACA,OAAA5rB,EAAAiI,WAAA2jB,QAIAptB,OAAAC,eAAAuB,EAAAwB,KAAA,eACA7C,IAAA,WACA,OAAAqB,EAAAoU,eAGA5V,OAAAC,eAAAuB,EAAA,UACArB,IAAA,WACA,OAAAqB,EAAAyc,gBAAAjP,QAEA0T,IAAA,SAAAniB,GACA,SAAAA,IAAuCA,EAAA,WACvCiB,EAAA6rB,gBAAA9sB,IACAiB,EAAAyc,gBAAAjP,OAAAzO,EACAiB,EAAA6rB,cAAA9sB,MAIAP,OAAAC,eAAAuB,EAAAwB,KAAA,kBACA7C,IAAA,WACA,OAAAqB,EAAAolB,gBAEAlE,IAAA,SAAAniB,GACA,SAAAA,IACAA,EAAA,OAEAiB,EAAAolB,eAAArmB,EACAiB,EAAAqK,MAAArK,EAAA2K,QAAA3K,EAAAolB,mBAGA5mB,OAAAC,eAAAuB,EAAAwB,KAAA,WACA7C,IAAA,WACA,OAAAqB,EAAA2K,SAEAuW,IAAA,SAAAniB,GACA,QAEqBgB,IAFrBC,EAAAe,YAAA+qB,KAAA,SAAAhlB,GACA,OAAAA,EAAAzI,OAAAU,IAEA,UAAAkC,MAAA,uCAEAjB,EAAA2K,QAAA5L,EACAiB,EAAAqK,MAAArK,EAAA2K,QAAA3K,EAAAolB,mBAGAplB,EAAAsqB,cACA9rB,OAAAC,eAAAuB,EAAAwB,KAAA,gBACA7C,IAAA,WACA,OAAAqB,EAAAiK,OAAAV,gBAGA/K,OAAAC,eAAAuB,EAAAwB,KAAA,eACA7C,IAAA,WACA,OAAAqB,EAAAiK,OAAAT,gBAIAhL,OAAAC,eAAAuB,EAAAwB,KAAA,gBACA7C,IAAA,WACA,OAAAqB,EAAA0E,UAAA8Z,gBAGAhgB,OAAAC,eAAAuB,EAAAwB,KAAA,eACA7C,IAAA,WACA,OAAAqB,EAAA0E,UAAAqnB,eAGAvtB,OAAAC,eAAAuB,EAAAwB,KAAA,aACA7C,IAAA,WACA,OAAAqB,EAAA0E,UAAAU,WAEA8b,IAAA,SAAAniB,GACAiB,EAAA0E,UAAAU,UAAArG,KAGAP,OAAAC,eAAAuB,EAAAwB,KAAA,cACA7C,IAAA,WACA,OAAAqB,EAAA0E,UAAAS,YAEA+b,IAAA,SAAAniB,GACAiB,EAAA0E,UAAAS,WAAApG,KAGAP,OAAAC,eAAAuB,EAAAwB,KAAA,SACA7C,IAAA,WACA,OAAAqB,EAAAsC,SAGA9D,OAAAC,eAAAuB,EAAAwB,KAAA,SACA7C,IAAA,WACA,OAAAqB,EAAAoT,SAGA5U,OAAAC,eAAAuB,EAAAwB,KAAA,gBACA7C,IAAA,WACA,OAAAqB,EAAAic,gBAGAzd,OAAAC,eAAAuB,EAAAwB,KAAA,eACA7C,IAAA,WACA,OAAAqB,EAAAsnB,eAGA9oB,OAAAC,eAAAuB,EAAAwB,KAAA,gBACA7C,IAAA,WACA,OAAAqB,EAAAuF,gBAGA/G,OAAAC,eAAAuB,EAAAwB,KAAA,eACA7C,IAAA,WACA,OAAAqB,EAAAylB,eAGAjnB,OAAAC,eAAAuB,EAAAwB,KAAA,cACA7C,IAAA,WACA,OAAAqB,EAAA4F,cAGApH,OAAAC,eAAAuB,EAAAwB,KAAA,YACA7C,IAAA,WACA,OAAAqB,EAAAgsB,YAGAxtB,OAAAC,eAAAuB,EAAAwB,KAAA,WACA7C,IAAA,WACA,OAAAqB,EAAAyP,WAGAzP,EAAAwB,KAAA+P,WAAAvR,EAAAuR,WACA/S,OAAAC,eAAAuB,EAAAwB,KAAA,YACA7C,IAAA,WACA,OAAAqB,EAAAmlB,UAEAjE,IAAA,SAAAniB,GACA,IAAAiB,EAAA2lB,QAAA5mB,GACA,UAAAkC,MAAA,2BAAAlC,GAEAiB,EAAAmlB,SAAApmB,KAGAiB,EAAAmmB,WAAA9kB,QAAA,SAAA4qB,GACAztB,OAAAC,eAAAuB,EAAAwB,KAAA,KAAAyqB,GACAttB,IAAA,WACA,OAAAqB,EAAAkmB,kBAAA+F,IAEA/K,IAAA,SAAAniB,GACAiB,EAAA6lB,OAAAoG,MACAjsB,EAAAkmB,kBAAA+F,GAAAltB,EACAA,GACAiB,EAAA6V,iBAAAoW,EAAAltB,QAIAP,OAAAC,eAAAuB,EAAAwB,KAAA,aACA7C,IAAA,WACA,OAAAqB,EAAAslB,WAEApE,IAAA,SAAAxL,GACA,GAAAxG,MAAAwG,GACA,UAAAiW,UAAA,gDAEA,GAAA3rB,EAAAylB,YAAAzkB,OAAA0U,EACA,UAAA9R,WAAA,8DAEA5D,EAAAslB,UAAA5P,KAGAlX,OAAAC,eAAAuB,EAAAwB,KAAA,gBACA7C,IAAA,WACA,OAAAqB,EAAAulB,cAEArE,IAAA,SAAAxL,GACA,GAAAxG,MAAAwG,GACA,UAAAiW,UAAA,gDAEA,GAAA3rB,EAAA6G,mBAAA7F,OAAA0U,EACA,UAAA9R,WAAA,iEAEA5D,EAAAulB,aAAA7P,KAGAlX,OAAAC,eAAAuB,EAAAwB,KAAA,mBACA7C,IAAA,WACA,OACAwH,IAAAnG,EAAAsH,eACAjB,MAAArG,EAAAksB,iBACA5lB,OAAAtG,EAAAmsB,kBACA/lB,KAAApG,EAAA+lB,oBAIAvnB,OAAAC,eAAAuB,EAAAwB,KAAA,mBACA7C,IAAA,WACA,OACAwH,IAAAnG,EAAA8lB,eACAzf,MAAArG,EAAAosB,iBACA9lB,OAAAtG,EAAAqsB,kBACAjmB,KAAApG,EAAAgmB,oBAIAxnB,OAAAC,eAAAuB,EAAAwB,KAAA,YACA7C,IAAA,WACA,OAAAqB,EAAAkE,OAAA3B,MAEA2e,IAAA,SAAAxL,GACA,IAAAF,MAAAC,QAAAC,GACA,UAAAiW,UAAA,2BAEA,IAAA3rB,EAAAoB,MAAAsU,EAAA1U,OAAAhB,EAAAoB,KAAAJ,OACA,UAAA4C,WAAA,iEAEA5D,EAAAkE,OAAA3B,KAAAmT,KAGAlX,OAAAC,eAAAuB,EAAAwB,KAAA,eACA7C,IAAA,WACA,OAAAqB,EAAAkE,OAAAtB,SAEAse,IAAA,SAAAxL,GACA,IAAAF,MAAAC,QAAAC,GACA,UAAAiW,UAAA,2BAEA,GAAAjW,EAAA1U,OAAAhB,EAAAe,YAAAC,OACA,UAAA4C,WAAA,oEAEA5D,EAAAkE,OAAAtB,QAAA8S,KAGAlX,OAAAC,eAAAuB,EAAAwB,KAAA,mBACA7C,IAAA,WACA,OAAAqB,EAAAwH,wBAGAhJ,OAAAC,eAAAuB,EAAAwB,KAAA,gBACA7C,IAAA,WACA,OAAAqB,EAAA+F,iBAAA,MAGAvH,OAAAC,eAAAuB,EAAAwB,KAAA,iBACA7C,IAAA,WACA,OAAAqB,EAAA+F,qBAGAvH,OAAAC,eAAAuB,EAAAwB,KAAA,iBACA7C,IAAA,WACA,OAAAqB,EAAA6G,mBAAAkI,IAAA,SAAAjI,GACA,OAAAA,OAIAtI,OAAAC,eAAAuB,EAAAwB,KAAA,sBACA7C,IAAA,WACA,OAAAqB,EAAA2I,oBAEAuY,IAAA,SAAAniB,GACAiB,EAAA2I,mBAAA5J,KAGAP,OAAAC,eAAAuB,EAAAwB,KAAA,sBACA7C,IAAA,WACA,OAAAqB,EAAA8kB,oBAEA5D,IAAA,SAAAniB,GACAiB,EAAA8kB,mBAAA/lB,KAGAP,OAAAC,eAAAuB,EAAAwB,KAAA,OACA7C,IAAA,WACA,OAAAqB,EAAA4P,OAGApR,OAAAC,eAAAuB,EAAAwB,KAAA,UACA7C,IAAA,WACA,OAAAqB,EAAAe,aAEAmgB,IAAA,SAAAniB,GACA,QAAAgB,IAAAhB,EAKA,OAHAiB,EAAAyB,YAAA1B,EACAC,EAAA4mB,gBAAA7mB,OACAC,EAAA6F,cAAA,iBAAyDpE,YAAA1B,IAGzD,IAAAyV,MAAAC,QAAA1W,IAAA,iBAAAA,EAAA,GACA,UAAAkC,MAAA,uCAEA,QAAAlB,IAAAhB,EAAA,GAAAV,KACA,UAAA4C,MAAA,uEAEAjB,EAAAyB,OAAA1C,EAAAgQ,IAAA,SAAAhM,EAAAjC,GAOA,OANAiC,EAAAJ,MAAAI,EAAAJ,OAAA3C,EAAA4E,MAAAwM,UACArO,EAAAK,OAAAL,EAAAK,QAAApD,EAAAoD,OAAAL,EAAAS,MACAT,EAAAS,KAAAT,EAAAS,MAAA,SACAT,EAAAjC,QACAiC,EAAAe,YAAAhD,EACAiC,EAAAX,UAAA,EACAW,IAEA/C,EAAA4mB,gBAAA7mB,EACAC,EAAA2U,mBACA3U,EAAAgkB,qBACAhkB,EAAAooB,wBACApoB,EAAAqP,gBAAA,iBAAArP,EAAAqP,eAAAC,YACAtP,EAAAyB,OAAAJ,QAAA,SAAA0B,EAAAjC,GACAd,EAAAqP,qBAAAtP,IAAAC,EAAAqP,eAAAC,WAAAvM,EAAA1E,QACA0E,EAAAwM,QAAAvP,EAAAqP,eAAAC,WAAAvM,EAAA1E,SAIA2B,EAAAgC,QAAA,GACAhC,EAAA6F,cAAA,iBAAqDpE,OAAAzB,EAAAyB,YASrDzB,EAAAwB,KAAA8qB,SAAA,WACA,OAAA9tB,OAAA0E,KAAAlD,EAAA2lB,UAEA3lB,EAAAusB,eAAA,SAAAnrB,GACA,IACAA,EAAAslB,KAAA+C,MAAAroB,GACa,MAAA+F,GACb,UAAAlG,MAAA,kEACAkG,EAAAqiB,QAAA,2HAGA,OAAApoB,GAEApB,EAAA2lB,QAAA,+CAAAvkB,EAAAorB,GACAxsB,EAAA2lB,QAAA,iCAAA3lB,EAAAusB,eAAAnrB,GAAA,SAAAA,EAAAK,GACA,OAAA+qB,EAAAprB,EAAAK,MAGAzB,EAAA2lB,QAAA,0CAAAvkB,EAAAorB,GACA,OAAAA,EAAAprB,IAEApB,EAAAwB,KAAAmkB,QAAA3lB,EAAA2lB,QAGA3lB,EAAAysB,IAAA,SAAArrB,EAAAorB,GACA,IAAAxsB,EAAAwB,KAAAmkB,QAAA3lB,EAAAmlB,UACA,UAAAlkB,MAAA,0BAEAjB,EAAAwB,KAAAmkB,QAAA3lB,EAAAmlB,UAAA/jB,EAAA,SAAAA,EAAAK,GACA+T,MAAAC,QAAAhU,KACAzB,EAAAyB,UAGAzB,EAAAE,WAAAwsB,qBACA1sB,EAAAyB,OAAAzB,EAAA6O,kBAAAzN,IAEApB,EAAAyB,SACAzB,EAAA4mB,WAAA5mB,EAAA6O,kBAAAzN,IAEApB,EAAAe,aACAf,EAAAgkB,qBAGAhkB,EAAA8B,aAAAV,EAEApB,EAAAoB,KAAApB,EAAA8B,aAEA9B,EAAAyB,QAAA,KAAAzB,EAAAoB,UAAAJ,SACAhB,EAAA4mB,aAAwCvoB,KAAA,MAExC2B,EAAA+J,kBAAA,kBACA/J,EAAA4mB,aAAA5mB,EAAAyB,QAAAzB,EAAAE,WAAAwsB,sBACA1sB,EAAAgkB,qBACAhkB,EAAA6F,cAAA,iBAAyDpE,OAAAzB,EAAA4mB,cAEzD4F,OAGAhuB,OAAAC,eAAAuB,EAAAwB,KAAA,QACA7C,IAAA,WACA,OAAAqB,EAAAoB,MAEA8f,IAAA,SAAAniB,GACAiB,EAAAysB,IAAA1tB,EAAA,WACAiB,EAAAyP,WACAzP,EAAA2U,mBACA3U,EAAAE,WAAAysB,mBAAA3sB,EAAAoB,KAAAJ,OAAA,QACAjB,IAAAC,EAAAqP,gBACArP,EAAA+nB,WAGA/nB,EAAA+J,kBAAA,iBACA/J,EAAA+jB,kBACA/jB,EAAAooB,wBACApoB,EAAA6F,cAAA,eAAuDzE,KAAApB,EAAAoB,OACvDpB,EAAAgC,QAAA,QAIAhC,EAAA4pB,cAAA,WACA,IAAAgD,EAAA,EACAC,EAAA,EACAznB,EAAA,EACAD,EAAA,EACAqZ,EAAA,EACAuN,EAAA,EACAxe,EAAA,GACAG,EAAA,GACA,SAAAof,EAAA/tB,EAAAguB,GACA,GAAA7d,MAAAnQ,GACA,UAAAkC,MAAA,oCAEAlC,EAAA,IACAA,EAAA,GAEAA,EAAAyf,IACAzf,EAAAyf,GAEAA,EAAA,IACAzf,EAAA,GAEAqG,EAAArG,EACAguB,GACA/sB,EAAAgtB,SAGA,SAAAC,EAAAluB,EAAAguB,GACA,GAAA7d,MAAAnQ,GACA,UAAAkC,MAAA,qCAEAlC,EAAA,IACAA,EAAA,GAEAA,EAAAgtB,IACAhtB,EAAAgtB,GAEAA,EAAA,IACAhtB,EAAA,GAEAoG,EAAApG,EACAguB,GACA/sB,EAAAgtB,SAGAhtB,EAAA0E,UAAAuL,SAAA,WACA,mBAAyB8b,EAAAmB,QAAA,GACzB,eAAA1O,EAAA0O,QAAA,GACA,aAAA/nB,EAAA+nB,QAAA,GACA,YAAA9nB,EAAA8nB,QAAA,GACA,mBAAAltB,EAAA0E,UAAAyoB,cAAAD,QAAA,GACA,oBAAAltB,EAAA0E,UAAA0oB,eAAAF,QAAA,QAEAltB,EAAA0E,UAAAM,SAAA,SAAAhB,EAAAL,EAAA0pB,GACAJ,EAAAjpB,GAAA,GACA8oB,EAAAnpB,EAAA0pB,IAEA7uB,OAAAC,eAAAuB,EAAA0E,UAAA,mBACA/F,IAAA,WACA,OAAA4O,GAEA2T,IAAA,SAAAniB,GACAwO,EAAAxO,KAGAP,OAAAC,eAAAuB,EAAA0E,UAAA,kBACA/F,IAAA,WACA,OAAA+O,GAEAwT,IAAA,SAAAniB,GACA2O,EAAA3O,KAGAP,OAAAC,eAAAuB,EAAA0E,UAAA,UACA/F,IAAA,WACA,OAAAiuB,GAEA1L,IAAA,SAAAniB,GACAyf,EAAAzf,IACAqG,EAAA,GAEAwnB,EAAA7tB,KAGAP,OAAAC,eAAAuB,EAAA0E,UAAA,SACA/F,IAAA,WACA,OAAAkuB,GAEA3L,IAAA,SAAAniB,GACA8tB,EAAA9tB,KAGAP,OAAAC,eAAAuB,EAAA0E,UAAA,aACA/F,IAAA,WACA,OAAAyG,GAEA8b,IAAA4L,IAEAtuB,OAAAC,eAAAuB,EAAA0E,UAAA,cACA/F,IAAA,WACA,OAAAwG,GAEA+b,IAAA+L,IAEAzuB,OAAAC,eAAAuB,EAAA0E,UAAA,gBACA/F,IAAA,WACA,OAAA6f,GAEA0C,IAAA,SAAAniB,GACAqG,EAAArG,IACAqG,EAAAzE,KAAAoD,IAAAhF,EAAA,IAEAyf,EAAAoO,IACAxnB,EAAA,GAEAoZ,EAAAzf,KAGAP,OAAAC,eAAAuB,EAAA0E,UAAA,eACA/F,IAAA,WACA,OAAAotB,GAEA7K,IAAA,SAAAniB,GACAoG,EAAApG,IACAoG,EAAAxE,KAAAoD,IAAAhF,EAAA,IAEAgtB,EAAAhtB,QAMCqB,MAAA9C,SAAAC,EAAAD,QAAAwC,oBCvsCD,IAAAA,OAuXCC,KArXDD,EAAA,WACA,aACA,gBAAAE,GACA,IACAstB,EACAttB,EAAAutB,mBACAvtB,EAAAwtB,cACAxtB,EAAAytB,kBACAztB,EAAA0tB,gBAAA,EACA1tB,EAAA2tB,YAAA,SAAAxmB,EAAAymB,GACA,IAEAta,EAFAtU,EAAA4uB,EAAAzmB,EAAA0mB,QAAAD,GAAAzmB,EAAA0mB,QAAA,GACA5Z,EAAAjU,EAAAiK,OAAAsJ,wBAEA,GAAAvU,EASA,OARAsU,GACAtP,EAAAhF,EAAAkV,QAAAD,EAAA7N,KACAzC,EAAA3E,EAAAmV,QAAAF,EAAA9N,KAEAnG,EAAAoU,cACAd,EAAAtP,GAAAhE,EAAA6T,iBACAP,EAAA3P,GAAA3D,EAAA8T,kBAGA9P,EAAAsP,EAAAtP,EACAL,EAAA2P,EAAA3P,EACAsQ,SAIAjU,EAAA8tB,iBACAC,OAAA,SAAA/uB,GAAkC,OAAAA,GAClCgvB,WAAA,SAAAhvB,GAAsC,OAAAA,KACtCivB,YAAA,SAAAjvB,GAAuC,OAAAA,GAAA,EAAAA,IACvCkvB,cAAA,SAAAlvB,GAAyC,OAAAA,EAAA,KAAAA,KAAA,IAAAA,KAAA,GACzCmvB,YAAA,SAAAnvB,GAAuC,OAAAA,OACvCovB,aAAA,SAAApvB,GAAwC,QAAAA,MAAA,GACxCqvB,eAAA,SAAArvB,GAA0C,OAAAA,EAAA,KAAAA,SAAA,MAAAA,EAAA,MAAAA,EAAA,MAC1CsvB,YAAA,SAAAtvB,GAAuC,OAAAA,SACvCuvB,aAAA,SAAAvvB,GAAwC,YAAAA,SACxCwvB,eAAA,SAAAxvB,GAA0C,OAAAA,EAAA,KAAAA,QAAA,MAAAA,SAC1CyvB,YAAA,SAAAzvB,GAAuC,OAAAA,WACvC0vB,aAAA,SAAA1vB,GAAwC,WAAAA,WACxC2vB,eAAA,SAAA3vB,GAA0C,OAAAA,EAAA,MAAAA,UAAA,OAAAA,YAE1CgB,EAAA4uB,OAAA,SAAA5vB,EAAA+S,EAAA5T,EAAAC,GACA,OAAAD,EAAA6B,EAAA8tB,gBAAA9tB,EAAAE,WAAA2uB,mBAAA7vB,EAAAZ,GAAA2T,GAEA/R,EAAA8uB,kBAAA,WACA9uB,EAAA+uB,QAAA/uB,EAAAwtB,WAAAxpB,EAAAhE,EAAAgvB,gBAAAhrB,IAAAhE,EAAAwtB,WAAAxuB,EAAAgB,EAAAgvB,gBAAAhwB,GACAgB,EAAAivB,QAAAjvB,EAAAwtB,WAAA7pB,EAAA3D,EAAAgvB,gBAAArrB,IAAA3D,EAAAwtB,WAAAxuB,EAAAgB,EAAAgvB,gBAAAhwB,GACAgB,EAAAgvB,iBACAhrB,EAAAhE,EAAAwtB,WAAAxpB,EACAL,EAAA3D,EAAAwtB,WAAA7pB,EACA3E,EAAAkwB,YAAAC,QAGAnvB,EAAAovB,aAAA,WACApvB,EAAAqvB,OAAArvB,EAAAwtB,WAAAxpB,EAAAhE,EAAAsvB,WAAAtrB,IAAAhE,EAAAwtB,WAAAxuB,EAAAgB,EAAAsvB,WAAAtwB,GACAgB,EAAAuvB,OAAAvvB,EAAAwtB,WAAA7pB,EAAA3D,EAAAsvB,WAAA3rB,IAAA3D,EAAAwtB,WAAAxuB,EAAAgB,EAAAsvB,WAAAtwB,GACAgB,EAAAsvB,YACAtrB,EAAAhE,EAAAwtB,WAAAxpB,EACAL,EAAA3D,EAAAwtB,WAAA7pB,EACA3E,EAAAkwB,YAAAC,QAGAnvB,EAAAwvB,kBAAA,WACA,IAAAxvB,EAAAiK,SAAAjK,EAAA0E,UAAAM,SAA2D,OAAAC,sBAAAjF,EAAAwvB,mBAC3D,IAEAxwB,EAFAO,EAAA2vB,YAAAC,MACA/wB,EAAA4B,EAAAE,WAAAuvB,gCAEAzwB,EAAAO,EAAAS,EAAAwtB,WAAAxuB,EACAgB,EAAA0tB,iBAAA,EACA1tB,EAAAutB,gBAAAvpB,EAAAhE,EAAA4uB,OAAA5vB,EAAAgB,EAAAwtB,WAAAroB,WAAAnF,EAAAytB,eAAAzpB,EAAA5F,GACA4B,EAAAutB,gBAAA5pB,EAAA3D,EAAA4uB,OAAA5vB,EAAAgB,EAAAwtB,WAAApoB,UAAApF,EAAAytB,eAAA9pB,EAAAvF,GACAY,EAAAZ,GAAA4B,EAAAutB,gBAAA5pB,IAAA3D,EAAA0E,UAAAU,WACApF,EAAAutB,gBAAAvpB,IAAAhE,EAAA0E,UAAAS,YAAAnF,EAAA0vB,gBAGA1vB,EAAA0E,UAAAM,SAAAhF,EAAAutB,gBAAAvpB,EAAAhE,EAAAutB,gBAAA5pB,GACAsB,sBAAAjF,EAAAwvB,qBAEAxvB,EAAA2vB,cAAA,SAAArrB,GACAtE,EAAA8U,YAAAxQ,EAAAR,YAAAQ,EAAAlC,WAEApC,EAAA4vB,UAAA,SAAAzoB,GACA,kBACA0oB,cAAA7vB,EAAA8vB,mBACA,IAAAhyB,EAAAwV,EAAAtT,EAAA2tB,YAAAxmB,GACA,GAAAxG,KAAAovB,IAAA/vB,EAAAwtB,WAAAxpB,GAAArD,KAAAovB,IAAA/vB,EAAAwtB,WAAA7pB,GAAA3D,EAAAE,WAAA8vB,cAAA,CAEA,KADAlyB,EAAAkC,EAAAgM,UAAAsH,EAAAtP,EAAAsP,EAAA3P,IAC6B,OAC7B,GAAA3D,EAAAiwB,cAAAjwB,EAAAiwB,aAAA7tB,WAAAtE,EAAAsE,UACApC,EAAAiwB,aAAAnsB,cAAAhG,EAAAgG,YAEA,YADA9D,EAAA2vB,cAAA7xB,GAGAkC,EAAAoT,OAAApT,EAAAoT,MAAAC,UACArT,EAAAqU,UAEArU,EAAAiwB,aAAAnyB,EACAkC,EAAAkG,YACAC,IAAArI,EAAAsE,SACAkE,OAAAxI,EAAAsE,SACAgE,KAAAtI,EAAAgG,YACAuC,MAAAvI,EAAAgG,cAEA9D,EAAAwC,MAAA,MAIAxC,EAAA4c,WAAA,SAAAzV,GAKA,GAJAA,EAAA+oB,eAAA,KACAlwB,EAAAmwB,WAAAnwB,EAAA2tB,YAAAxmB,GACAnH,EAAAowB,aAAApwB,EAAAgM,UAAAhM,EAAAmwB,WAAAnsB,EAAAhE,EAAAmwB,WAAAxsB,GAAA,KAEA3D,EAAA6F,cAAA,cAAkDgd,YAAA1b,EAAA7C,KAAAtE,EAAAowB,eAAlD,CASA,GARApwB,EAAAqiB,qBACAwN,cAAA7vB,EAAA8vB,mBACAhR,aAAA9e,EAAAqwB,qBACArwB,EAAAswB,gBAAAnpB,EACAnH,EAAA0vB,eAAA,EACA1vB,EAAA0tB,gBAAA,EACA1tB,EAAAoW,gBAAAjP,GACAA,EAAAsP,iBACA,IAAAtP,EAAA0mB,QAAA7sB,QAAAmG,EAAA+oB,eAAA,KAAAlwB,EAAAuwB,YAAA,CA6BA,GA5BAvwB,EAAAwwB,YAAA,EACAxwB,EAAAmwB,WAAAnwB,EAAAmwB,YAAAnwB,EAAAywB,YACAzwB,EAAA0wB,kBACA1sB,EAAAhE,EAAA0E,UAAAS,WACAxB,EAAA3D,EAAA0E,UAAAU,UACApG,EAAAkwB,YAAAC,OAEAnvB,EAAAwtB,YACAxpB,EAAA,EACAL,EAAA,EACAwB,WAAAnF,EAAA0E,UAAAS,WACAC,UAAApF,EAAA0E,UAAAU,UACApG,EAAAgB,EAAA0wB,iBAAA1xB,GAEAgB,EAAAsvB,YACAtrB,EAAAhE,EAAAwtB,WAAAxpB,EACAL,EAAA3D,EAAAwtB,WAAA7pB,EACA3E,EAAAgB,EAAAwtB,WAAAxuB,GAEAgB,EAAAgvB,iBACAhrB,EAAAhE,EAAAwtB,WAAAxpB,EACAL,EAAA3D,EAAAwtB,WAAA7pB,EACA3E,EAAAgB,EAAAwtB,WAAAxuB,GAEAgB,EAAAqwB,oBAAA1R,WAAA,WACA3e,EAAAmd,iBAAAhW,EAAAnH,EAAAmwB,aACiBnwB,EAAAE,WAAAywB,wBACjB3wB,EAAA8vB,kBAAAc,YAAA5wB,EAAA8uB,kBArJA,IAsJA9uB,EAAAowB,eAAApwB,EAAAowB,aAAA7hB,SAAA,uBAAA9H,QAAAzG,EAAAowB,aAAApjB,UAEA,YADAhN,EAAA8M,UAAA,GAIA,GADA9M,EAAA8M,UAAA,EACA9M,EAAAowB,aAAAS,SA6BA,OA5BA7wB,EAAAowB,aAAApiB,aACAhO,EAAAkG,YACAC,IAAAnG,EAAAowB,aAAAhuB,SACAkE,OAAAtG,EAAAowB,aAAAhuB,SACAgE,KAAA,EACAC,MAAArG,EAAA6G,mBAAA7F,OAAA,IAEAhB,EAAAwC,MAAA,IACqBxC,EAAAowB,aAAAliB,iBACrB,SAAAlO,EAAAE,WAAA4wB,4BACA9wB,EAAA2K,UAAA3K,EAAAowB,aAAA/sB,OAAAhF,KACA2B,EAAAolB,eAAA,QAAAplB,EAAAolB,eAAA,aAEAplB,EAAAolB,eAAA,MAEAplB,EAAAqK,MAAArK,EAAAowB,aAAA/sB,OAAAhF,KAAA2B,EAAAolB,iBAEA,WAAAplB,EAAAE,WAAA4wB,4BACA9wB,EAAAkG,YACAC,IAAA,EACAG,OAAAtG,EAAAoB,KAAAJ,OAAA,EACAoF,KAAApG,EAAAowB,aAAAtsB,YACAuC,MAAArG,EAAAowB,aAAAtsB,cAEA9D,EAAAwC,MAAA,UAGAxC,EAAA+wB,eAAA5pB,GAIAnH,EAAAuwB,cACAtd,SAAA6C,KAAAD,iBAAA,YAAA7V,EAAAgxB,WAAyEC,SAAA,IACzEhe,SAAA6C,KAAAD,iBAAA,WAAA7V,EAAAkxB,UAAA,GACAje,SAAA6C,KAAAD,iBAAA,cAAA7V,EAAAmxB,aAAA,GACAnxB,EAAAwC,MAAA,MAEAxC,EAAAoxB,YAAA,SAAA9sB,EAAA+sB,GACA,QAAAtxB,IAAAuE,EAAAlC,eAAArC,IAAAuE,EAAAR,YAAA,CACA9D,EAAAsxB,gBAAA,EACA,IAAA5hB,EAAA1P,EAAAwH,qBACA,wBAAA6pB,GACA/sB,EAAAlC,UAAAsN,EAAAvJ,KACA7B,EAAAR,aAAA4L,EAAArJ,OACAqJ,EAAApJ,OAAAhC,EAAAlC,SACAsN,EAAAtJ,KAAA9B,EAAAR,aACa,wBAAAutB,GACb/sB,EAAAlC,UAAAsN,EAAApJ,QACAhC,EAAAR,aAAA4L,EAAArJ,OACAqJ,EAAAvJ,IAAA7B,EAAAlC,SACAsN,EAAAtJ,KAAA9B,EAAAR,aACa,wBAAAutB,GACb/sB,EAAAlC,UAAAsN,EAAApJ,QACAhC,EAAAR,aAAA4L,EAAAtJ,MACAsJ,EAAAvJ,IAAA7B,EAAAlC,SACAsN,EAAArJ,MAAA/B,EAAAR,aACa,wBAAAutB,GACb/sB,EAAAlC,UAAAsN,EAAAvJ,KACA7B,EAAAR,aAAA4L,EAAAtJ,OACAsJ,EAAApJ,OAAAhC,EAAAlC,SACAsN,EAAArJ,MAAA/B,EAAAR,aAEA,QAAA9D,EAAAE,WAAAqxB,gBAAA,IAAAjtB,EAAAlC,UACAsN,EAAAtJ,KAAA,EACAsJ,EAAArJ,MAAArG,EAAAe,YAAAC,OAAA,GAEA0O,EAAAtJ,KAAAzF,KAAAoD,IAAA,EAAA2L,EAAAtJ,MAEApG,EAAAkG,WAAAwJ,GACA1P,EAAAwC,MAAA,KAEAxC,EAAAgxB,UAAA,SAAA7pB,GACA,IAAAqqB,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAptB,EAAAqtB,EAAAC,EACA,IAAA/xB,EAAA6F,cAAA,mBAAuDgd,YAAA1b,IAAvD,CAWA,GAVA2X,aAAAwO,GACAnmB,EAAA+oB,eAAA,KACAlwB,EAAAgyB,cAAAhyB,EAAA2tB,YAAAxmB,IAEAA,EAAA+oB,eAAA,KACAlwB,EAAAiyB,eAAAjyB,EAAA2tB,YAAAxmB,EAAA,IAEAxG,KAAAovB,IAAA/vB,EAAAwtB,WAAAxpB,GAAArD,KAAAovB,IAAA/vB,EAAAwtB,WAAA7pB,GAAA3D,EAAAE,WAAA8vB,eACAlR,aAAA9e,EAAAqwB,qBAEA,IAAAlpB,EAAA0mB,QAAA7sB,QAAAhB,EAAAgyB,eAAAhyB,EAAAiyB,eAcA,OAbAH,EAAA9xB,EAAAgyB,cAAAruB,EACAouB,EAAA/xB,EAAAiyB,eAAAtuB,EACA3D,EAAAkyB,iBACAlyB,EAAAkyB,eAAAvxB,KAAAovB,IAAA+B,EAAAC,GACA/xB,EAAAmyB,WAAAnyB,EAAAsR,OAEAtR,EAAAwwB,YAAA,EACAxwB,EAAAoyB,WAAApyB,EAAAkyB,eAAAvxB,KAAAovB,IAAA+B,EAAAC,GACA/xB,EAAAsR,MAAAtR,EAAAmyB,WAAAnyB,EAAAoyB,WAAApyB,EAAAE,WAAAmyB,qBACAryB,EAAAsR,MAAA3Q,KAAA0G,IAAA1G,KAAAoD,IAAA/D,EAAAsR,MAAAtR,EAAAE,WAAAoyB,cAAAtyB,EAAAE,WAAAqyB,cACAvyB,EAAAuwB,aAAA,EACAvwB,EAAAgC,QAAA,QACAhC,EAAAinB,mBAGAjnB,EAAAuwB,cACAvwB,EAAAwwB,YAAA,EACAxwB,EAAAgyB,cAAAhyB,EAAAgyB,eAAAhyB,EAAAiyB,eACAT,EAAAxxB,EAAA6I,4BACA4oB,EAAAzxB,EAAA6S,wBACA6e,EAAA1xB,EAAA2C,MAAA3C,EAAA4E,MAAAC,eAAA7E,EAAAgyB,cAAAhuB,EAAAhE,EAAAE,WAAAknB,oBACAuK,EAAA3xB,EAAAgyB,cAAAhuB,EAAAytB,EAAAzxB,EAAAE,WAAAknB,oBACAwK,EAAA5xB,EAAAqC,OAAArC,EAAA4E,MAAAC,eAAA7E,EAAAgyB,cAAAruB,EAAA3D,EAAAE,WAAAknB,oBACAyK,EAAA7xB,EAAAgyB,cAAAruB,EAAA6tB,EAAAxxB,EAAAE,WAAAknB,oBACA3iB,EAAAzE,EAAA4E,MAAAC,eAWAsC,EAAAiP,kBACApW,EAAAwtB,YACAxpB,EAAAhE,EAAAgyB,cAAAhuB,EAAAhE,EAAAmwB,WAAAnsB,EACAL,EAAA3D,EAAAgyB,cAAAruB,EAAA3D,EAAAmwB,WAAAxsB,EACAwB,WAAAnF,EAAA0E,UAAAS,WACAC,UAAApF,EAAA0E,UAAAU,UACApG,EAAAkwB,YAAAC,OAEAnvB,EAAAsnB,YAAAtnB,EAAAgM,UAAAhM,EAAAgyB,cAAAhuB,EAAAhE,EAAAgyB,cAAAruB,GACA3D,EAAA6F,cAAA,aAA6Cgd,YAAA1b,EAAA7C,KAAAtE,EAAAsnB,cAC7CtnB,EAAAovB,eACApvB,EAAAwyB,cAAAtD,YAAAC,MAAAnvB,EAAA0wB,iBAAA1xB,EACAgB,EAAA0vB,eAAA,EACA1vB,EAAA0tB,gBAAA,EACA1tB,EAAAsxB,iBAAAI,GAAAC,GAAAE,GAAAD,IAxBA,SAAAa,IACA,IAAAzuB,EAAAhE,EAAA0E,UAAAS,WACAxB,EAAA3D,EAAA0E,UAAAU,UACApB,GAAA0tB,EAAA1xB,EAAAE,WAAAmnB,yBAAA,EACA1jB,GAAAiuB,EAAA5xB,EAAAE,WAAAmnB,yBAAA,EACA1jB,GAAAkuB,EAAA7xB,EAAAE,WAAAmnB,yBAAA,EACArjB,GAAA2tB,EAAA3xB,EAAAE,WAAAmnB,yBAAA,EACArnB,EAAA0E,UAAAM,SAAAhB,EAAAL,GACA2pB,EAAA3O,WAAA8T,EAAAzyB,EAAAE,WAAAsnB,kBAiBAiL,GAEA,mBAAAxlB,KAAAjN,EAAAowB,aAAAxrB,OACA5E,EAAA0E,UAAAU,UAAApF,EAAA0E,UAAA8Z,eACAxe,EAAAgyB,cAAAruB,EAAA6tB,EAAA/sB,IAAAzE,EAAA0E,UAAArC,OAAAoC,EAAA+sB,IAGA,qBAAAvkB,KAAAjN,EAAAowB,aAAAxrB,OACA5E,EAAA0E,UAAAS,WAAAnF,EAAA0E,UAAAqnB,cACA/rB,EAAAgyB,cAAAhuB,EAAAytB,EAAAhtB,IAAAzE,EAAA0E,UAAA/B,MAAA8B,EAAAgtB,IAGA,oBAAAxkB,KAAAjN,EAAAowB,aAAAxrB,OACA5E,EAAAoxB,YAAApxB,EAAAsnB,YAAAtnB,EAAAowB,aAAAxrB,QAGA5E,EAAA0E,UAAAM,SAAAhF,EAAA0wB,iBAAA1sB,EAAAhE,EAAAwtB,WAAAxpB,EACAhE,EAAA0wB,iBAAA/sB,EAAA3D,EAAAwtB,WAAA7pB,GACA3D,EAAAwC,MAAA,OAEAxC,EAAA+wB,eAAA,SAAA5pB,GACAnH,EAAAkyB,oBAAAnyB,EACAC,EAAAsxB,gBAAA,EACAzB,cAAA7vB,EAAAstB,oBACAuC,cAAA7vB,EAAAqwB,qBACAR,cAAA7vB,EAAA8vB,mBACA3oB,EAAAiP,kBACAnD,SAAA6C,KAAAyJ,oBAAA,YAAAvf,EAAAgxB,WAA4EC,SAAA,IAC5Ehe,SAAA6C,KAAAyJ,oBAAA,WAAAvf,EAAAkxB,UAAA,GACAje,SAAA6C,KAAAyJ,oBAAA,cAAAvf,EAAAmxB,aAAA,IAEAnxB,EAAAkxB,SAAA,SAAA/pB,GACA,IAAAnH,EAAA6F,cAAA,YAAgDgd,YAAA1b,EAAA7C,KAAAtE,EAAAsnB,cAQhD,GAPAtnB,EAAAkyB,oBAAAnyB,EACAoH,EAAA+oB,eAAA,KACAlwB,EAAAgyB,mBAAAjyB,GAEAoH,EAAA+oB,eAAA,KACAlwB,EAAAiyB,oBAAAlyB,GAEAC,EAAAuwB,YACA,IAAAppB,EAAA0mB,QAAA7sB,SACAhB,EAAAuwB,aAAA,OAFA,CAMA,IAAAmC,EAAA/xB,KAAAovB,IAAA/vB,EAAAwtB,WAAAxpB,GAAArD,KAAAovB,IAAA/vB,EAAAwtB,WAAA7pB,GAAA3D,EAAAE,WAAA8vB,cACA9gB,MAAAlP,EAAAqvB,QACArvB,EAAAqvB,KAAA,GAEAngB,MAAAlP,EAAAuvB,QACAvvB,EAAAuvB,KAAA,GAEArgB,MAAAlP,EAAA+uB,SACA/uB,EAAA+uB,MAAA,GAEA7f,MAAAlP,EAAAivB,SACAjvB,EAAAivB,MAAA,GAEAjvB,EAAAytB,eAAAzpB,EAAAhE,EAAAqvB,KAAArvB,EAAAE,WAAAyyB,yBACA3yB,EAAAytB,eAAA9pB,EAAA3D,EAAAuvB,KAAAvvB,EAAAE,WAAAyyB,yBACA3yB,EAAA8uB,oBACA4D,IAAA1yB,EAAAqf,YACArf,EAAA4vB,UAAA5vB,EAAAswB,gBAAAtwB,GACa,IAAAA,EAAA0tB,mBACb/sB,KAAAovB,IAAA/vB,EAAA+uB,OAAA/uB,EAAAE,WAAA0yB,6BACAjyB,KAAAovB,IAAA/vB,EAAAivB,OAAAjvB,EAAAE,WAAA0yB,8BACA,WAAA3lB,KAAAjN,EAAAowB,aAAAxrB,QACA8tB,IACA1yB,EAAA0vB,eAAA,EACA1vB,EAAAwvB,qBAEAxvB,EAAA+wB,eAAA5pB,KAEAnH,EAAAmxB,YAAA,SAAAhqB,GACAnH,EAAA6F,cAAA,eAAmDgd,YAAA1b,EAAA7C,KAAAtE,EAAAsnB,eACnDtnB,EAAA+wB,eAAA5pB,MAGC/G,MAAA9C,SAAAC,EAAAD,QAAAwC,oBCvXD,IAAAA,OA+xCCC,KA7xCDD,EAAA,WACA,aACA,gBAAAE,GACA,IAAA6yB,EACA7yB,EAAAoW,gBAAA,SAAAjP,GAA6CA,EAAAiP,mBAS7CpW,EAAA6V,iBAAA,SAAAlG,EAAAhJ,GACA3G,EAAA6lB,OAAAlW,GAAA3P,EAAA6lB,OAAAlW,OACA3P,EAAA6lB,OAAAlW,GAAAmjB,QAAAnsB,IAUA3G,EAAAuf,oBAAA,SAAA5P,EAAAhJ,IACA3G,EAAA6lB,OAAAlW,QAAAtO,QAAA,SAAA0xB,EAAA/R,GACAra,IAAAosB,GACA/yB,EAAA6lB,OAAAlW,GAAAxO,OAAA6f,EAAA,MAYAhhB,EAAA6F,cAAA,SAAA8J,EAAAxI,GAGA,IAAA6rB,EACA,SAAAvc,IACAuc,GAAA,EAEA,GANA7rB,EAAAwI,EAAAnM,KAAAmM,EAAAxI,MACAwI,IAAAnM,MAAAmM,EAKA3P,EAAA6lB,OAAAlW,GAMA,OALA3P,EAAA6lB,OAAAlW,GAAAtO,QAAA,SAAAsF,GACAQ,EAAAyI,IAAA5P,EAAA4P,IACAzI,EAAAsP,iBACA9P,EAAAvG,MAAAJ,EAAAwB,MAAA2F,MAEA6rB,GAEAhzB,EAAAizB,SAAA,WACA,OAAAtyB,KAAA0G,IAAArH,EAAAE,WAAAgzB,eAAAx1B,OAAAy1B,kBAAA,IACAnzB,EAAA4P,IAAAwjB,8BACApzB,EAAA4P,IAAAyjB,2BACArzB,EAAA4P,IAAA0jB,0BACAtzB,EAAA4P,IAAA2jB,yBACAvzB,EAAA4P,IAAA4jB,wBAAA,KAEAxzB,EAAAgC,OAAA,SAAAyxB,GACA,GAAAzzB,EAAAiK,OAAA,CACA,IAAAjG,EAgDA0vB,EA/CApmB,GACAtJ,EAAA,EACAL,EAAA,EACAtB,OAAA,EACAM,MAAA,EACAiC,MAAA,uBAEArF,GACAyE,EAAA,EACAL,EAAA,EACAtB,OAAA,EACAM,MAAA,EACAiC,MAAA,yBAEA+uB,GACA3vB,EAAA,EACAL,EAAA,EACAtB,OAAA,EACAM,MAAA,EACAiC,MAAA,uBAEAgvB,GACA5vB,EAAA,EACAL,EAAA,EACAtB,OAAA,EACAM,MAAA,EACAiC,MAAA,yBAEAivB,GACA7vB,EAAA,EACAL,EAAA,EACAtB,OAAA,EACAM,MAAA,EACAsL,UAAA,EACA6lB,mBAAA,EACAlvB,MAAA,qBAEA1G,EAAA,EAAA8B,EAAA4E,MAAAmvB,mBACAhiB,EAAA,EAAA/R,EAAA4E,MAAAovB,qBACA51B,EAAA,GAAA4B,EAAA4E,MAAAmvB,mBACAtvB,EAAAzE,EAAA4E,MAAAC,eAAA,EAAA7E,EAAA4E,MAAAovB,qBACAC,EAAAj0B,EAAAizB,WACAzf,EAAA,aAAAxT,EAAA4E,MAAA6O,mBAAA,IACAygB,EAAAl0B,EAAA4E,MAAAsI,gBAAAsG,EACA2gB,EAAAn0B,EAAA4E,MAAAwvB,4BAAA5gB,EACA6gB,EAAA,EACAC,EAAA,EAEAv2B,GAAAiC,EAAAoB,UAAAJ,OACA4H,EAAA5I,EAAA6I,4BACAC,EAAA9I,EAAA6S,wBACA2e,EAAAxxB,EAAA4E,MAAA0D,WACAzI,EAAAG,EAAAe,YAsCA,IAFAf,EAAA0D,YAAAM,KACAhE,EAAA0D,YAAAC,KACAK,EAAA,EAAuBA,EAAAjG,EAAOiG,GAAA,EAC9BhE,EAAA0D,YAAAC,EAAAK,GAAAqwB,EACAA,KAAAr0B,EAAAsC,MAAAC,KAAAyB,IAAAwtB,IAAAxxB,EAAAsC,MAAA+F,MAAArE,IAAA,IAAAhE,EAAAsR,OAEAtR,EAAAslB,UAAAthB,GAAAhE,EAAAsC,MAAA+F,MAAArE,IAAA,GAiIA,OA/HAjG,EAAA,IACAiC,EAAA0D,YAAAC,EAAAK,GAAAqwB,GAEAC,EAAAz0B,EAAAqR,OAAA,SAAAqjB,EAAAxxB,EAAAe,GAGA,GADAjE,EAAAG,EAAAkE,OAAAtB,QAAAkB,IACAyL,OAEA,OADAvP,EAAA0D,YAAAM,EAAAF,GAAAywB,EACAA,EAEA,IAAAC,EAAAD,EAAAv0B,EAAAiE,gBAAAjE,EAAAkE,OAAAtB,QAAAkB,IAEA,OADA9D,EAAA0D,YAAAM,EAAAF,GAAA0wB,EACAA,GACa,MACbx0B,EAAAE,WAAA8P,aACAqkB,GAAA7C,GAEAiD,IACAz0B,EAAAoU,aACApU,EAAA2C,MAAA3C,EAAAoJ,WAAAI,YACAxJ,EAAAqC,OAAArC,EAAAoJ,WAAAG,cACavJ,EAAAqC,SAAArC,EAAAiK,OAAAV,cAAAvJ,EAAA2C,QAAA3C,EAAAiK,OAAAT,cACbxJ,EAAAqC,OAAArC,EAAAiK,OAAAV,aACAvJ,EAAA2C,MAAA3C,EAAAiK,OAAAT,YACAxJ,EAAA6T,iBAAA7T,EAAA0I,KAAAmL,kBAAA,EACA7T,EAAA8T,gBAAA9T,EAAA0I,KAAAoL,iBAAA,GAIA9T,EAAA0E,UAAAyB,IAAAyC,EAAAurB,EACAn0B,EAAA0E,UAAA0B,KAAA0C,EAEA4rB,IAEAC,IAGA30B,EAAA0E,UAAAK,uBACA,SAAA/E,EAAA4E,MAAAvC,QAAArC,EAAAoU,cACApU,EAAAqC,QAAAoC,GAEA4vB,GAAA5vB,EACAgwB,IACAC,IACAC,KAEA30B,EAAA0E,UAAAC,qBACA,SAAA3E,EAAA4E,MAAAjC,OAAA3C,EAAAoU,cACApU,EAAA2C,OAAA8B,GAEA6vB,GAAA7vB,EACAgwB,IACAC,IACAC,KAGAD,IACA10B,EAAA0E,UAAAqnB,YAAAuI,EAAAt0B,EAAA0E,UAAA/B,MACA3C,EAAA0E,UAAA8Z,aAAA6V,EAAAr0B,EAAA0E,UAAArC,OACArC,EAAA0E,UAAAyoB,cAAAntB,EAAA0E,UAAA/B,MAAA2xB,EACAt0B,EAAA0E,UAAAgJ,eAAA1N,EAAA0E,UAAA/B,MACA3C,EAAA0E,UAAAyoB,cACAntB,EAAA4E,MAAAC,eAAAkN,EAAA3T,EAMA4B,EAAA0E,UAAA0oB,gBAAAptB,EAAA0E,UAAArC,OAAAuG,GAAAyrB,EACAr0B,EAAA0E,UAAA6I,gBAAAvN,EAAA0E,UAAArC,OACArC,EAAA0E,UAAA0oB,eACAptB,EAAA4E,MAAAC,eAAAkN,EAAA3T,EACA4B,EAAA0E,UAAAgJ,eAAA/M,KAAAoD,IAAA/D,EAAA0E,UAAAgJ,eAAA1N,EAAA4E,MAAAgwB,qBACA50B,EAAA0E,UAAA6I,gBAAA5M,KAAAoD,IAAA/D,EAAA0E,UAAA6I,gBAAAvN,EAAA4E,MAAAgwB,qBAEAr1B,EAAAyE,GAAA8E,EACAvJ,EAAAoE,GAAA3D,EAAAqC,OAAArC,EAAA4E,MAAAC,eAAAzG,EACAmB,EAAAoD,MAAA3C,EAAA2C,MAAA3C,EAAA4E,MAAAC,eAAAiE,EAAA1K,EAAAF,EACAqB,EAAA8C,OAAArC,EAAA4E,MAAAC,eAAA7E,EAAA4E,MAAAovB,qBAAA51B,EAEAw1B,EAAAjwB,EAAApE,EAAAoE,EAAA3D,EAAA4E,MAAAmvB,mBACAH,EAAAjxB,MAAA3C,EAAA0E,UAAAgJ,eACAkmB,EAAAvxB,OAAArC,EAAA4E,MAAAiwB,kBAEAvnB,EAAAtJ,GAAAhE,EAAA2C,MAAA3C,EAAA4E,MAAAC,eAAA7E,EAAA4E,MAAAovB,qBAAA51B,EACAkP,EAAA3J,GAAAiF,EACA0E,EAAA3K,MAAA3C,EAAA4E,MAAAC,eAAA7E,EAAA4E,MAAAovB,qBAAA51B,EACAkP,EAAAjL,OAAArC,EAAAqC,OAAAuG,EAAA5I,EAAA4E,MAAAC,eAAAzG,EAAAF,EAEAy1B,EAAA3vB,EAAAsJ,EAAAtJ,EAAAhE,EAAA4E,MAAAmvB,mBACAJ,EAAAhxB,MAAA3C,EAAA4E,MAAAiwB,kBACAlB,EAAAtxB,OAAArC,EAAA0E,UAAA6I,gBAEAsmB,EAAA7vB,EAAAzE,EAAAyE,EAAAzE,EAAAoD,MAAAzE,EACA21B,EAAAlwB,EAAA2J,EAAA3J,EAAA2J,EAAAjL,OAAAnE,EACA21B,EAAAlxB,MAAA3C,EAAA4E,MAAAC,eAAA7E,EAAA4E,MAAAovB,qBACAH,EAAAxxB,OAAArC,EAAA4E,MAAAC,eAAA7E,EAAA4E,MAAAovB,qBACAh0B,EAAA0E,UAAAowB,UACAC,cAAAx1B,EACAy1B,cAAApB,EACAqB,YAAA3nB,EACA4nB,YAAAvB,EACAwB,OAAAtB,GAEA7zB,EAAA0E,UAAA0wB,KACA9nB,IACAtE,EAAAzJ,GAEAS,EAAA0E,UAAA2I,KACAC,EAAAqmB,EACA3qB,EAAA4qB,GAGA5zB,EAAAq1B,KAAA10B,KAAAoD,IAAA,EAAA/D,EAAAylB,YAAAzkB,OAAA,EAAAhB,EAAAE,WAAAo1B,mBAEAt1B,EAAAoU,cACApU,EAAAiK,OAAAtH,MAAA3C,EAAA2C,MAAAsxB,EACAj0B,EAAAiK,OAAA5H,OAAArC,EAAAqC,OAAA4xB,EACAj0B,EAAA4P,IAAA0B,MAAA2iB,MAGAj0B,EAAAmT,kBACAnT,EAAAgtB,QAAA,GACAyG,GACAzzB,EAAAwC,MAAA,GAEAxC,EAAA6F,cAAA,cACA,EAzKA,SAAA8uB,IACA30B,EAAA0E,UAAAK,qBAAA,SAAA/E,EAAA4E,MAAAjC,OAAA2xB,EAAAt0B,EAAA0E,UAAA/B,OAAA,WAAA3C,EAAA4E,MAAA2wB,WACA,WAAAv1B,EAAA4E,MAAA2wB,UACAv1B,EAAA0E,UAAA8wB,qBAAAlB,EAAAt0B,EAAA0E,UAAA/B,MACA3C,EAAA0E,UAAAC,mBAAA,SAAA3E,EAAA4E,MAAAvC,QAAAgyB,EAAAr0B,EAAA0E,UAAArC,QAAA,WAAArC,EAAA4E,MAAA6wB,WACA,WAAAz1B,EAAA4E,MAAA6wB,UACAz1B,EAAA0E,UAAAgxB,mBAAArB,EAAAr0B,EAAA0E,UAAArC,OAEA,SAAAqyB,IACA10B,EAAA0E,UAAA/B,MAAA3C,EAAA2C,MAAAmG,EACA9I,EAAA0E,UAAArC,OAAArC,EAAAqC,OAAAuG,EAEA,SAAA6rB,IACAz0B,EAAAoU,cAGAsf,GAEArxB,OAAAuG,EAAAyrB,EAAAH,EAAA,EACAvxB,MAAA2xB,EAAAxrB,EAAAorB,IAEA,kBAAA7yB,QAAA,SAAAs0B,IAEA,iBAAA51B,GAAA0G,QAAAzG,EAAA4E,MAAA+wB,MACA,iBAAA51B,GAAA0G,QAAAzG,EAAA6kB,oBAAA8Q,IACA31B,EAAAyc,gBAAAkZ,GAAAjC,EAAAiC,GAAA,MAEA31B,EAAAyc,gBAAAkZ,GAAA31B,EAAA4E,MAAA+wB,GACA31B,EAAA41B,aACA51B,EAAAiK,OAAArF,MAAA+wB,GAAA31B,EAAA4E,MAAA+wB,UA8IA31B,EAAAgtB,OAAA,SAAArnB,GACA,IAAA9F,EAAAG,EAAAe,YACAhD,GAAAiC,EAAAoB,UAAAJ,OACAwwB,EAAAxxB,EAAA4E,MAAA0D,WAYA,IAVAtI,EAAAsH,eAAA3G,KAAAC,MAAA7C,GAAAiC,EAAA0E,UAAAU,UAAApF,EAAA0E,UAAA8Z,cAAA,KACAxe,EAAAsH,eAAA3G,KAAAoD,IAAA/D,EAAAsH,eAAA,GACAtH,EAAA8lB,eAAA9lB,EAAA0D,YAAAC,EAAA3D,EAAAsH,gBAEA,IAAAtH,EAAA0E,UAAA8Z,eACAxe,EAAAsH,eAAA,GAEAtH,EAAA8lB,eAAA,EACA9lB,EAAA+lB,gBAAA/lB,EAAAulB,aACAvlB,EAAAgmB,gBAAA,EACAhmB,EAAA8lB,eAAA9lB,EAAA0E,UAAAU,WAAApF,EAAAsH,eAAAtH,EAAAoB,KAAAJ,QAEAhB,EAAAsH,gBAAA,EACAtH,EAAA8lB,eAAA9lB,EAAA0D,YAAAC,EAAA3D,EAAAsH,gBAEA,KAAAtH,EAAAgmB,gBAAAhmB,EAAA0E,UAAAS,WAAA,GAAAnF,EAAA+lB,gBAAAlmB,EAAAmB,QACAhB,EAAAgmB,gBAAAhmB,EAAA0D,YAAAM,EAAAhE,EAAA+lB,iBACA/lB,EAAA+lB,iBAAA,EAEAlmB,EAAAmB,OAAA,IACAhB,EAAA+lB,gBAAAplB,KAAAoD,IAAA/D,EAAA+lB,gBAAA,KACA/lB,EAAAgmB,iBAAAhmB,EAAAiE,gBAAAjE,EAAAkE,OAAAtB,QAAA5C,EAAA+lB,oBAEA/lB,EAAAoB,UAAAJ,OAAA,IACAhB,EAAAsH,eAAA3G,KAAAoD,IAAA/D,EAAAsH,eAAA,KACAtH,EAAA8lB,eAAAnlB,KAAAoD,IAAA/D,EAAA8lB,gBAEA9lB,EAAAoB,KAAApB,EAAAsH,iBAAAtH,EAAAsC,MAAAC,KAAAvC,EAAAsH,iBAAAkqB,IACAxxB,EAAAsC,MAAA+F,MAAArI,EAAAsH,iBAAA,GACAkqB,GACAxxB,EAAAsR,MAAA,IAEAtR,EAAAwlB,iBACA7f,GACA3F,EAAAwC,MAAA,GAIAyC,sBAAAjF,EAAAmT,iBACAnT,EAAA6F,cAAA,UAA0CM,IAAAnG,EAAA0E,UAAAU,UAAAgB,KAAApG,EAAA0E,UAAAS,cAE1CnF,EAAAid,UAAA,SAAA9V,EAAAwb,GACA,IAAA3iB,EAAAqf,cAAArf,EAAAoT,MAAA,CAGApT,EAAAomB,MAAAzD,GAAA3iB,EAAAgU,YAAA7M,GACA,IACArJ,EAEA+3B,EACAC,EAIAC,EARA/uB,EAAAG,EAAA6uB,SAAA7uB,EAAA8uB,SAAAj2B,EAAAE,WAAAg2B,wBAEAr2B,EAAAG,EAAAe,YAGAiD,EAAAhE,EAAAomB,MAAApiB,EACAL,EAAA3D,EAAAomB,MAAAziB,EACApF,EAAAyB,EAAAgM,UAAAhI,EAAAL,GAEAgM,GAAsBkT,YAAA1b,EAAA7C,KAAA/F,EAAAyF,IAAAL,KACtBwyB,EAAAn2B,EAAAsnB,YAKA,GAJAxI,aAAA9e,EAAAunB,aACAvnB,EAAAkL,UAAgClH,IAAAL,QAChC3D,EAAA8M,UAAA,IAEA9M,EAAA6F,cAAA,YAAA8J,KAGApR,GAAAyB,EAAAsnB,cACAtnB,EAAAo2B,mBAAAp2B,EAAAsnB,YAAAllB,WAAA7D,EAAA6D,SACApC,EAAAq2B,sBAAAr2B,EAAAsnB,YAAAxjB,cAAAvF,EAAAuF,YACA9D,EAAAs2B,oBAAAt2B,EAAAo2B,oBAAAp2B,EAAAq2B,uBACA,uBAAAh1B,QAAA,SAAAk1B,GACAv2B,EAAAu2B,EAAA,qBACA5mB,EAAArL,KAAA6xB,EACAn2B,EAAA6F,cAAA0wB,EAAA,WAAA5mB,GACAA,EAAArL,KAAA/F,EACAyB,EAAA6F,cAAA0wB,EAAA,YAAA5mB,OAIA3P,EAAAsnB,YAAA/oB,EACAyB,EAAA8M,UAAA,CAIA,GADA9M,EAAA0lB,WACA1lB,EAAAw2B,cACAj4B,IACA,IAAAyB,EAAAimB,YAAAxf,QAAAlI,EAAAyO,WACAhN,EAAAy2B,SAAAl4B,EACAyB,EAAAgsB,SAAAztB,EAAAwO,YACA/M,EAAAwN,OAAAjP,EAAAyO,QACA,SAAAzO,EAAAyO,UACAhN,EAAAwN,OAAA,UACAxN,EAAA0lB,QAAmCtjB,SAAA7D,EAAA6D,SAAA0B,YAAAvF,EAAAuF,eAEnC9D,EAAA02B,WAAA12B,EAAA22B,gBACA,SAAAp4B,EAAAyO,SAAA,CA6CA,GA5CA+oB,GACA/xB,EAAArD,KAAAovB,IAAA/vB,EAAA42B,UAAA5yB,KACAL,EAAAhD,KAAAovB,IAAA/vB,EAAA42B,UAAAjzB,OAEA,IAAA3D,EAAA62B,gBAAA/yB,aAAAqD,EAAAqP,WACAxW,EAAA62B,iBACAz0B,SAAApC,EAAAyF,WAAArD,SACA0B,YAAA9D,EAAAyF,WAAA3B,cAGA+xB,GACA1vB,IAAAxF,KAAA0G,IAAArH,EAAA62B,gBAAAz0B,SAAA7D,EAAA6D,UACAgE,KAAAzF,KAAA0G,IAAArH,EAAA62B,gBAAA/yB,YAAAvF,EAAAuF,aACAwC,OAAA3F,KAAAoD,IAAA/D,EAAA62B,gBAAAz0B,SAAA7D,EAAA6D,UACAiE,MAAA1F,KAAAoD,IAAA/D,EAAA62B,gBAAA/yB,YAAAvF,EAAAuF,eAEA,IAAA9D,EAAA62B,gBAAA/yB,cACAgyB,EAAA91B,EAAAwH,qBACAquB,EAAAzvB,MAAA,EACAyvB,EAAAxvB,MAAAxG,EAAAmB,OAAA,EACA60B,EAAA1vB,IAAAxF,KAAA0G,IAAAyuB,EAAA3vB,IAAA5H,EAAA6D,UACAyzB,EAAAvvB,OAAA3F,KAAAoD,IAAA+xB,EAAAxvB,OAAA/H,EAAA6D,WAEApC,EAAA62B,gBAAAz0B,WAAA7D,EAAA6D,UACApC,EAAA62B,gBAAA/yB,cAAAvF,EAAAuF,cACA9D,EAAA82B,iBAAA,IAEA92B,EAAAs2B,qBAAA,IAAAP,EAAA/xB,GAAA,IAAA+xB,EAAApyB,GAAA,QAAA3D,EAAAE,WAAAqxB,iBACA,QAAAvxB,EAAAE,WAAAqxB,gBAAA,IAAAvxB,EAAA62B,gBAAA/yB,cACA9D,EAAAo2B,mBAEyB,QAAAp2B,EAAAE,WAAAqxB,gBACzBvxB,EAAA6H,yBAAA9H,IAAAxB,EAAA6D,UAKApC,EAAA4F,WAAArH,EAAA6D,UAAApC,EAAA4F,WAAArH,EAAA6D,eACA,IAAApC,EAAA4F,WAAArH,EAAA6D,UAAAqE,QAAAlI,EAAAuF,cACA9D,EAAA4F,WAAArH,EAAA6D,UAAAR,KAAArD,EAAAuF,cANA9D,EAAA4F,WAAArH,EAAA6D,YAAA,IAAApC,EAAA4F,WAAArH,EAAA6D,UAAAqE,QAAAlI,EAAAuF,cACA9D,EAAA4F,WAAArH,EAAA6D,UAAAjB,OAAAnB,EAAA4F,WAAArH,EAAA6D,UAAAqE,QAAAlI,EAAAuF,aAAA,IAJA9D,EAAAyH,UAAAlJ,EAAA6D,SAAA4E,EAAA,YAcAhH,EAAAgG,iBAAA6vB,EAAA1vB,MAAAnG,EAAAgG,gBAAAG,KACA0vB,EAAAzvB,OAAApG,EAAAgG,gBAAAI,MACAyvB,EAAAvvB,SAAAtG,EAAAgG,gBAAAM,QACAuvB,EAAAxvB,QAAArG,EAAAgG,gBAAAK,OAAAW,GAGA,GAFAhH,EAAA4F,cACAkwB,EAAAD,EACA,QAAA71B,EAAAE,WAAAqxB,cACA,IAAAzzB,EAAAg4B,EAAA3vB,IAAiDrI,GAAAg4B,EAAAxvB,OAAqBxI,GAAA,EACtEkC,EAAAyH,UAAA3J,GAAA,gBAEyB,IAAA+3B,EAAA1vB,KACzBnG,EAAAkG,WAAA4vB,GAAA,GAGA91B,EAAAknB,eAAA/f,EAAAnD,EAAAL,EAAAqD,GAGAhH,EAAAs2B,qBAAA,EACAt2B,EAAAo2B,oBAAA,EACAp2B,EAAAq2B,uBAAA,EACAr2B,EAAAwC,MAAA,MAEAxC,EAAAgd,MAAA,SAAA7V,EAAAwb,GACA,IAAA7kB,EACAkJ,EAAAG,EAAA6uB,SAAA7uB,EAAA8uB,SAAAj2B,EAAAE,WAAAg2B,wBACA5iB,EAAAqP,GAAA3iB,EAAAgU,YAAA7M,GAEA,GADAnH,EAAAsnB,YAAAtnB,EAAAgM,UAAAsH,EAAAtP,EAAAsP,EAAA3P,QACA5D,IAAAC,EAAAsnB,YAAAyP,KAiBA,GAHA/2B,EAAAoT,OACApT,EAAAqU,UAEArU,EAAA82B,gBACA92B,EAAA82B,iBAAA,OAIA,GADAh5B,EAAAkC,EAAAsnB,aACAtnB,EAAA6F,cAAA,SAA6Cgd,YAAA1b,EAAA7C,KAAAtE,EAAAsnB,eAC7CtnB,EAAA8M,SAAA,CAMA,IAHA,yCAAArG,QAAAzG,EAAAsnB,YAAA1iB,QAAAoC,GACAhH,EAAAwF,cAAA1H,EAAAgG,YAAAhG,EAAAsE,UAEA,SAAApC,EAAAsnB,YAAAta,QAAA,CACA,kBAAAhN,EAAAsnB,YAAA1iB,MAIA,OAHA5E,EAAAiG,YACAjG,EAAAwC,YACAw0B,IAGA,wBAAAh3B,EAAAsnB,YAAA1iB,MAAA,CACA,YAAA5E,EAAAE,WAAA4wB,0BAQA,OAPA9wB,EAAA2K,UAAA7M,EAAAuF,OAAAhF,KACA2B,EAAAolB,eAAA,QAAAplB,EAAAolB,eAAA,aAEAplB,EAAAolB,eAAA,MAEAplB,EAAAqK,MAAAvM,EAAAuF,OAAAhF,KAAA2B,EAAAolB,qBACA4R,IAGA,cAAAh3B,EAAAE,WAAA4wB,0BAIA,OAHA9wB,EAAA+G,aAAAjJ,EAAAuF,OAAAvC,MAAAkG,EAAAG,EAAAqP,UAAA,GACAwgB,SACAh3B,EAAAwC,OAKA,GADAxC,EAAA4F,WAAA9H,EAAAsE,UAAApC,EAAA4F,WAAA9H,EAAAsE,eACA,QAAApC,EAAAE,WAAAqxB,eAAA,kBAAAvxB,EAAAsnB,YAAA1iB,QACA,kBAAA5E,EAAAsnB,YAAA1iB,OACA5E,EAAAE,WAAAoQ,MAAAgD,EAAAtP,EAAA,GACAsP,EAAAtP,EAAAhE,EAAAsnB,YAAAtjB,EAAAhE,EAAA4E,MAAA2L,eACAvQ,EAAA4E,MAAA4L,oBACAxQ,EAAA4E,MAAA6L,qBAAAzQ,EAAA4E,MAAAqyB,sBACA3jB,EAAA3P,EAAA3D,EAAAsnB,YAAA3jB,EAAA3D,EAAA4E,MAAAsyB,gBACAl3B,EAAA4E,MAAAuyB,mBAAAn3B,EAAA4E,MAAAqyB,sBACA3jB,EAAA3P,EAAA,EAEA,YADA3D,EAAA8J,WAAAhM,EAAAsE,UAIA+E,EAAAqP,WAAAxP,IACAhH,EAAAgG,gBAAAhG,EAAAwH,qBACAxH,EAAAkG,gBAAAnG,GAAA,IAGAi3B,IACAh3B,EAAAwC,MAAA,GAvEA,SAAAw0B,IACA,IAAArnB,GACA/J,WAAA5F,EAAA4F,WACAI,gBAAAhG,EAAAgG,iBAEAxH,OAAAC,eAAAkR,EAAA,gBACAhR,IAAA,WACA,OAAAqB,EAAA+F,uBAkEA/F,EAAAo3B,iBAAA,SAAAjwB,GACA,IAAAmM,EAAAtP,EAAAL,EAUA,OATA2P,EAAAtT,EAAAgU,YAAA7M,GACAnD,EAAAhE,EAAAq3B,sBAAA/jB,EAAAtP,EAAAhE,EAAA42B,UAAA5yB,EACAL,EAAA3D,EAAAs3B,uBAAAhkB,EAAA3P,EAAA3D,EAAA42B,UAAAjzB,EACAK,EAAAhE,EAAA4E,MAAAuF,iBACAnG,EAAAhE,EAAA4E,MAAAuF,gBAEAxG,EAAA3D,EAAA4E,MAAA2yB,eACA5zB,EAAA3D,EAAA4E,MAAA2yB,eAEAv3B,EAAA6F,cAAA,gBAAoD7B,IAAAL,IAAA6yB,aAAAx2B,EAAAw2B,iBACpDx2B,EAAA0E,UAAAS,WAAAnF,EAAA0E,UAAAqnB,YAAA/rB,EAAAE,WAAAs3B,kBACA,cAAAx3B,EAAAgsB,WACAhsB,EAAAgC,QAAA,GACAhC,EAAA0E,UAAAS,YAAAnB,GAEA,cAAAhE,EAAAgsB,UACAhsB,EAAAsC,MAAAM,QAAA,kBAAA5C,EAAAw2B,aAAAnzB,OAAAuB,MACA,aAAA5E,EAAAw2B,aAAAiB,iBAAAzzB,GACA,mCAAAyC,QAAAzG,EAAAw2B,aAAAnzB,OAAAuB,QACA5E,EAAAgC,QAAA,QAEAhC,EAAAinB,oBAGA,cAAAjnB,EAAAgsB,UACAhsB,EAAAw2B,aAAAkB,QACA13B,EAAAsC,MAAA+F,MAAArI,EAAAw2B,aAAAp0B,UAAAuB,EACiB3D,EAAAE,WAAAy3B,gBACjB33B,EAAA4E,MAAA0D,WAAA3E,EAEA3D,EAAAsC,MAAAC,KAAAvC,EAAAw2B,aAAAp0B,UAAAuB,EAEA3D,EAAA6F,cAAA,aAAiDvE,IAAAqC,SACjD3D,EAAAinB,yBAGAjnB,EAAAwlB,oBAEAxlB,EAAA43B,eAAA,WACA53B,EAAAgC,SACAiR,SAAA6C,KAAAyJ,oBAAA,YAAAvf,EAAAo3B,kBAAA,GACAnkB,SAAA6C,KAAAyJ,oBAAA,UAAAvf,EAAA43B,gBAAA,GACA53B,EAAAiL,iBACAjL,EAAAwC,MAAA,GACAxC,EAAA82B,iBAAA,GAEA92B,EAAA63B,WAAA,SAAA1wB,GACA,IAAAmM,EAAAtT,EAAAgU,YAAA7M,GAUA,OATAnH,EAAAE,WAAA43B,mBAAA93B,EAAAqqB,sBACA,oDAAA5jB,QAAAzG,EAAA+3B,mBACA/3B,EAAAqqB,oBAAArmB,GAAAmD,EAAA6wB,UACAh4B,EAAAqqB,oBAAA1mB,GAAAwD,EAAA8wB,UACAj4B,EAAAqqB,oBAAArmB,EAAArD,KAAA0G,IAAArH,EAAA2C,MAAA3C,EAAA4E,MAAAC,eAAAlE,KAAAoD,IAAA,EAAA/D,EAAAqqB,oBAAArmB,IACAhE,EAAAqqB,oBAAA1mB,EAAAhD,KAAA0G,IAAArH,EAAAqC,OAAArC,EAAA4E,MAAAC,eAAAlE,KAAAoD,IAAA,EAAA/D,EAAAqqB,oBAAA1mB,IACA2P,EAAAtT,EAAAqqB,qBAEArqB,EAAAk4B,WAAAl4B,EAAAgM,UAAAsH,EAAAtP,EAAAsP,EAAA3P,GAAAqJ,QACA,0BAAAhN,EAAAk4B,YAAA,0BAAAl4B,EAAA+3B,iBACA/3B,EAAA+3B,gBAAA,wBACA/3B,EAAA42B,UAAAtjB,EACAtT,EAAAm4B,YAAA/xB,KAAApG,EAAA0E,UAAAS,gBACA2Z,aAAA9e,EAAAunB,cAGA,wBAAAvnB,EAAAk4B,YAAA,wBAAAl4B,EAAA+3B,iBACA/3B,EAAA+3B,gBAAA,sBACA/3B,EAAA42B,UAAAtjB,EACAtT,EAAAm4B,YAAAhyB,IAAAnG,EAAA0E,UAAAU,eACA0Z,aAAA9e,EAAAunB,eAGA,wBAAAvnB,EAAA+3B,iBACA,wBAAA/3B,EAAAk4B,aACAl4B,EAAAk4B,WAAA,uBAEA,0BAAAl4B,EAAA+3B,iBACA,0BAAA/3B,EAAAk4B,aACAl4B,EAAAk4B,WAAA,yBAEApZ,aAAA9e,EAAAunB,mBACA,IAAAvnB,EAAAimB,YAAAxf,QAAAzG,EAAAk4B,cAGA,wBAAAl4B,EAAAk4B,WACAl4B,EAAA0E,UAAAU,UAAApF,EAAAm4B,YAAAhyB,KAAAmN,EAAA3P,EAAA3D,EAAA42B,UAAAjzB,GACA3D,EAAA0E,UAAA0oB,eACa,wBAAAptB,EAAAk4B,YACbl4B,EAAA0E,UAAAU,WAAApF,EAAAq1B,KAAAr1B,EAAA4E,MAAA0D,WACAtI,EAAAunB,YAAA5I,WAAA3e,EAAA63B,WAAA73B,EAAAE,WAAAsnB,iBAAArgB,IACa,2BAAAnH,EAAAk4B,aACbl4B,EAAA0E,UAAAU,WAAApF,EAAAq1B,KAAAr1B,EAAA4E,MAAA0D,WACAtI,EAAAunB,YAAA5I,WAAA3e,EAAA63B,WAAA73B,EAAAE,WAAAsnB,iBAAArgB,IAEA,0BAAAnH,EAAAk4B,WACAl4B,EAAA0E,UAAAS,WAAAnF,EAAAm4B,YAAA/xB,MAAAkN,EAAAtP,EAAAhE,EAAA42B,UAAA5yB,GACAhE,EAAA0E,UAAAyoB,cACa,4BAAAntB,EAAAk4B,YACbl4B,EAAA0E,UAAAS,YAAAnF,EAAAE,WAAAmnB,yBACArnB,EAAAunB,YAAA5I,WAAA3e,EAAA63B,WAAA73B,EAAAE,WAAAsnB,iBAAArgB,IACa,2BAAAnH,EAAAk4B,aACbl4B,EAAA0E,UAAAS,YAAAnF,EAAAE,WAAAmnB,yBACArnB,EAAAunB,YAAA5I,WAAA3e,EAAA63B,WAAA73B,EAAAE,WAAAsnB,iBAAArgB,QAGAnH,EAAAo4B,eAAA,WACAtZ,aAAA9e,EAAAunB,aACAtU,SAAAolB,iBACAplB,SAAAolB,kBAEAplB,SAAAsM,oBAAA,YAAAvf,EAAA63B,YAAA,IAEA73B,EAAAs4B,YAAA,SAAAnxB,GACA,IAAAmM,EAAAtP,EAAAL,EACA40B,EAAA,mBAAAv4B,EAAAgsB,SACAwM,EAAA,gBAAAx4B,EAAAgsB,SAEAhoB,GADAsP,EAAAtT,EAAAgU,YAAA7M,IACAnD,EAAAhE,EAAA42B,UAAA5yB,EACAL,EAAA2P,EAAA3P,EAAA3D,EAAA42B,UAAAjzB,GACA3D,EAAAE,WAAAu4B,uBAAAF,IAGAv4B,EAAAE,WAAAoO,oBAAAkqB,GAGAx4B,EAAA6F,cAAA,cACAgd,YAAA1b,EACAuxB,OAAA14B,EAAA62B,gBACAla,OAAA3c,EAAAsnB,YACA0E,SAAAhsB,EAAAgsB,aAIArrB,KAAAovB,IAAA/rB,GAAAhE,EAAAE,WAAAy4B,iBAAAh4B,KAAAovB,IAAApsB,GAAA3D,EAAAE,WAAAy4B,mBACA34B,EAAA22B,cAAA32B,EAAAw2B,aACAx2B,EAAA44B,cAAA54B,EAAAsnB,YACAtnB,EAAA22B,cAAAkC,YACA70B,IACAL,KAEA3D,EAAAknB,eAAA/f,EAAAoxB,EAAAjlB,EAAAtP,GAAA,EAAAw0B,EAAAllB,EAAA3P,GAAA,QAGA3D,EAAA84B,gBAAA,SAAA3xB,GACA,IAAA4xB,EACAC,EACAC,GACAC,cAAAl5B,EAAAkE,OAAA3B,KACA42B,iBAAAn5B,EAAAkE,OAAAtB,SAEA9E,GACAo7B,cAAA,WACAC,iBAAA,mBACiBn5B,EAAAgsB,UACjB/Y,SAAA6C,KAAAyJ,oBAAA,YAAAvf,EAAAs4B,aAAA,GACArlB,SAAA6C,KAAAyJ,oBAAA,UAAAvf,EAAA84B,iBAAA,GACA94B,EAAA22B,eACA32B,EAAA44B,gBACA,mBAAA54B,EAAAgsB,UAAAhsB,EAAA44B,cAAAnB,iBAAA,GACAz3B,EAAA44B,cAAAnB,gBAAAz3B,EAAAe,YAAAC,QACA,gBAAAhB,EAAAgsB,UAAAhsB,EAAA44B,cAAAx2B,UAAA,GACApC,EAAA44B,cAAAx2B,SAAApC,EAAAoB,KAAAJ,SACAhB,EAAA22B,cAAA74B,KAAAkC,EAAA44B,cAAA96B,KACAkC,EAAA6F,cAAA,WACAgd,YAAA1b,EACAuxB,OAAA14B,EAAA22B,cACAha,OAAA3c,EAAA44B,cACA5M,SAAAhsB,EAAAgsB,aAEAhsB,EAAA82B,iBAAA,EACAiC,EAAAE,EAAAj5B,EAAAgsB,UAAAvlB,QAAAzG,EAAA22B,cAAA74B,IACAk7B,EAAAC,EAAAj5B,EAAAgsB,UAAAvlB,QAAAzG,EAAA44B,cAAA96B,IACAm7B,EAAAj5B,EAAAgsB,UAAA7qB,OAAA43B,EAAA,GACAE,EAAAj5B,EAAAgsB,UAAA7qB,OAAA63B,EAAA,EAAAh5B,EAAA22B,cAAA74B,IACAkC,EAAAgC,SACAhC,EAAAiL,kBAEAjL,EAAA22B,mBAAA52B,EACAC,EAAA44B,mBAAA74B,EACAC,EAAAwC,MAAA,IAEAxC,EAAAo5B,SAAA,SAAAjyB,GACA,IAAAnH,EAAA6F,cAAA,UAA8Cgd,YAAA1b,EAAA7C,KAAAtE,EAAAsnB,cAA9C,CACA,IAAAhU,EAAAtT,EAAAgU,YAAA7M,GACAnH,EAAAq5B,YACAr1B,EAAAhE,EAAAsnB,YAAAxjB,YAAA9D,EAAA62B,gBAAA/yB,YACAH,EAAA3D,EAAAsnB,YAAAllB,SAAApC,EAAA62B,gBAAAz0B,WAEAzB,KAAAovB,IAAAzc,EAAAtP,GAAAhE,EAAAE,WAAAy4B,iBAAAh4B,KAAAovB,IAAAzc,EAAA3P,GAAA3D,EAAAE,WAAAy4B,kBACAha,WAAA,WACA3e,EAAAknB,eAAA/f,EAAAmM,EAAAtP,EAAAsP,EAAA3P,GAAA,IACiB,KAGjB3D,EAAAs5B,aAAA,SAAAnyB,GACA8L,SAAA6C,KAAAyJ,oBAAA,YAAAvf,EAAAo5B,UAAA,GACAnmB,SAAA6C,KAAAyJ,oBAAA,UAAAvf,EAAAs5B,cAAA,GACA,IAAAvnB,EAAA/R,EAAAwH,qBACA,GAAAxH,EAAA6F,cAAA,WAA+Cgd,YAAA1b,EAAA7C,KAAAtE,EAAAsnB,cAI/C,OAHAtnB,EAAAu5B,qBAAAx5B,EACAC,EAAAq5B,gBAAAt5B,OACAC,EAAAwC,MAAA,GAGAxC,EAAAq5B,aACAr5B,EAAAqL,OAAArL,EAAAu5B,gBAAAxnB,EAAA3L,KAAApG,EAAAq5B,WAAAr1B,EAAA+N,EAAA5L,IAAAnG,EAAAq5B,WAAA11B,GACA3D,EAAAmL,cAAAnL,EAAAq5B,WAAAr1B,EAAAhE,EAAAq5B,WAAA11B,IAEA3D,EAAAu5B,qBAAAx5B,EACAC,EAAAq5B,gBAAAt5B,EACAC,EAAAwC,MAAA,IAEAxC,EAAAw5B,WAAA,SAAAryB,GACA,IAAAnH,EAAA6F,cAAA,gBAAoDgd,YAAA1b,EAAA7C,KAAAtE,EAAAsnB,cAApD,CACA,IAAAhU,EAAAtT,EAAAgU,YAAA7M,GACAnH,EAAA82B,iBAAA,EACA92B,EAAAy5B,qBAAAnmB,EACAtT,EAAAsnB,kBAAAvnB,IAAAC,EAAAsnB,YAAAllB,UAAA,sBAAApC,EAAAgsB,WACAhsB,EAAA0E,UAAAU,UAAA,EACApF,EAAAslB,UAAAtlB,EAAAsnB,YAAAllB,SAAA,GAEApC,EAAAsnB,kBAAAvnB,IAAAC,EAAAsnB,YAAAxjB,aAAA,yBAAA9D,EAAAgsB,WACAhsB,EAAA0E,UAAAS,WAAA,EACAnF,EAAAulB,aAAAvlB,EAAAsnB,YAAAxjB,YAAA,IAEAnD,KAAAovB,IAAAzc,EAAAtP,GAAAhE,EAAAE,WAAAy4B,iBAAAh4B,KAAAovB,IAAAzc,EAAA3P,GAAA3D,EAAAE,WAAAy4B,kBACAha,WAAA,WACA3e,EAAAknB,eAAA/f,EAAAmM,EAAAtP,EAAAsP,EAAA3P,GAAA,IACiB,KAGjB3D,EAAA05B,eAAA,SAAAvyB,GAIA,GAHA8L,SAAA6C,KAAAyJ,oBAAA,YAAAvf,EAAAw5B,YAAA,GACAvmB,SAAA6C,KAAAyJ,oBAAA,UAAAvf,EAAA05B,gBAAA,GACA15B,EAAAy5B,0BAAA15B,EACAC,EAAA6F,cAAA,iBAAqDgd,YAAA1b,IAIrD,OAHAnH,EAAAslB,UAAAtlB,EAAA25B,gBAAA31B,EACAhE,EAAAulB,aAAAvlB,EAAA25B,gBAAAh2B,OACA3D,EAAAwC,MAAA,GAGAxC,EAAAwC,MAAA,IAEAxC,EAAA8c,UAAA,SAAA3V,EAAAwb,GAEA,GADA3iB,EAAA45B,oBAAAzyB,EAAAwV,QACA3c,EAAA6F,cAAA,aAAiDgd,YAAA1b,EAAA7C,KAAAtE,EAAAsnB,eACjDtnB,EAAA8M,UAGA,IAAA3F,EAAA0yB,SAAA75B,EAAAoT,MAAA,CACA,IAAApM,EAAAG,EAAA6uB,SAAA7uB,EAAA8uB,QACA6D,EAAA,QAAA7sB,KAAAjN,EAAAgsB,UACA+N,EAAA,yCAAA9sB,KAAAjN,EAAAgsB,UACAhqB,EAAA,UAAAiL,KAAAjN,EAAAgsB,UAiBA,GAhBAhsB,EAAA42B,UAAAjU,GAAA3iB,EAAAgU,YAAA7M,GACAnH,EAAAm4B,aACA/xB,KAAApG,EAAA0E,UAAAS,WACAgB,IAAAnG,EAAA0E,UAAAU,WAEApF,EAAA62B,gBAAA72B,EAAAgM,UAAAhM,EAAA42B,UAAA5yB,EAAAhE,EAAA42B,UAAAjzB,GACA3D,EAAA6H,oBAAA7H,EAAA62B,gBAAAmD,SACAhzB,GAAAG,EAAAqP,UAAA,yCACAvJ,KAAAjN,EAAA62B,gBAAA7pB,WACAhN,EAAAsnB,aACAtnB,EAAAsnB,YAAApZ,gBACA4rB,GACAC,GACA/3B,IACAhC,EAAA4F,gBAEA5F,EAAA62B,gBAAAtoB,OAAA,CAGA,QAAAvO,EAAAimB,YAAAxf,QAAAzG,EAAA62B,gBAAA7pB,SAeA,OAdAhN,EAAAk4B,WAAAl4B,EAAA62B,gBAAA7pB,QACAhN,EAAA+3B,gBAAA/3B,EAAA62B,gBAAA7pB,QACAhN,EAAA63B,WAAA1wB,GACAnH,EAAAE,WAAA43B,oBACA,oDAAArxB,QAAAzG,EAAA+3B,mBACA/3B,EAAAqqB,qBACArmB,EAAAhE,EAAA42B,UAAA5yB,EACAL,EAAA3D,EAAA42B,UAAAjzB,GAEA3D,EAAAiK,OAAAgwB,sBAEAhnB,SAAA4C,iBAAA,YAAA7V,EAAA63B,YAAA,GACA5kB,SAAA4C,iBAAA,UAAA7V,EAAAo4B,gBAAA,QACAp4B,EAAA82B,iBAAA,GAGA,YAAA92B,EAAAgsB,SAQA,OAPAhsB,EAAA02B,WAAA,QACA,QAAA12B,EAAAE,WAAAqxB,gBAAA,IAAAvxB,EAAA62B,gBAAA/yB,cACA9D,EAAA62B,gBAAAz0B,UAAA,EACApC,EAAAyH,UAAAzH,EAAA62B,gBAAAz0B,SAAA4E,EAAA,SACiB,QAAAhH,EAAAE,WAAAqxB,eACjBvxB,EAAAid,UAAA9V,IAIA,GAAA2yB,EAAA,CAIA,GAHA95B,EAAAw2B,aAAAx2B,EAAAy2B,SACAz2B,EAAAu5B,gBAAAv5B,EAAA4F,WAAAilB,WACA7qB,EAAAk6B,SAAAl6B,EAAA62B,gBACA72B,EAAA6F,cAAA,aAAqDgd,YAAA1b,EAAA7C,KAAAtE,EAAAsnB,cAA2C,OAGhG,OAFArU,SAAA6C,KAAAD,iBAAA,YAAA7V,EAAAo5B,UAAA,GACAnmB,SAAA6C,KAAAD,iBAAA,UAAA7V,EAAAs5B,cAAA,GACAt5B,EAAAid,UAAA9V,GAEA,GAAA4yB,EAAA,CAMA,GALA/5B,EAAAw2B,aAAAx2B,EAAAy2B,SACAz2B,EAAA25B,iBACA31B,EAAAhE,EAAAslB,UACA3hB,EAAA3D,EAAAulB,cAEAvlB,EAAA6F,cAAA,mBAA2Dgd,YAAA1b,IAAmB,OAG9E,OAFA8L,SAAA6C,KAAAD,iBAAA,YAAA7V,EAAAw5B,YAAA,GACAvmB,SAAA6C,KAAAD,iBAAA,UAAA7V,EAAA05B,gBAAA,GACA15B,EAAAid,UAAA9V,GAEA,OAAAnF,GACAhC,EAAAw2B,aAAAx2B,EAAAy2B,SACAz2B,EAAAw2B,aAAAkB,QACA13B,EAAAs3B,uBAAAt3B,EAAAsC,MAAA+F,MAAArI,EAAAw2B,aAAAp0B,UAEApC,EAAAs3B,uBAAAt3B,EAAAsC,MAAAC,KAAAvC,EAAAw2B,aAAAp0B,WAAApC,EAAA4E,MAAA0D,WAEAtI,EAAAq3B,sBAAAr3B,EAAAsC,MAAAM,QAAA,kBAAA5C,EAAAw2B,aAAAnzB,OAAAuB,MACA,aAAA5E,EAAAw2B,aAAAiB,kBAAAz3B,EAAAw2B,aAAA7zB,MACAsQ,SAAA6C,KAAAD,iBAAA,YAAA7V,EAAAo3B,kBAAA,QACAnkB,SAAA6C,KAAAD,iBAAA,UAAA7V,EAAA43B,gBAAA,KAGA,qCAAAnxB,QAAAzG,EAAAgsB,WACAhsB,EAAAw2B,aAAAx2B,EAAA62B,gBACA5jB,SAAA6C,KAAAD,iBAAA,YAAA7V,EAAAs4B,aAAA,QACArlB,SAAA6C,KAAAD,iBAAA,UAAA7V,EAAA84B,iBAAA,SAHA,KAOA94B,EAAA6c,QAAA,SAAA1V,GACA2X,aAAA9e,EAAAunB,aACAvnB,EAAAs2B,qBAAA,EACAt2B,EAAAo2B,oBAAA,EACAp2B,EAAAq2B,uBAAA,EACAr2B,EAAA02B,eAAA32B,EACAC,EAAAw2B,kBAAAz2B,EACAC,EAAA62B,qBAAA92B,EACAC,EAAA6F,cAAA,WAA+Cgd,YAAA1b,EAAA7C,KAAAtE,EAAAsnB,gBAC/CtnB,EAAA8M,UAAA3F,EAAAwV,SAAA3c,EAAAiK,UAGAjK,EAAAsnB,kBAAAvnB,IAAAC,EAAAsnB,YAAAyP,MAGA/2B,EAAAqf,aAAArf,EAAAoT,QACApT,EAAA42B,WAAA52B,EAAAkL,SAAAlL,EAAA42B,YACA52B,EAAAic,aAAApH,QAEA1N,EAAAsP,oBAGAzW,EAAAqV,iBAAA,WACA,IAAArR,EAEAnE,EAAAG,EAAAe,YACAxC,KACA,IAAAyF,EAAA,EAAuBA,EAAAnE,EAAAmB,OAAcgD,GAAA,EAErCnE,EADAG,EAAAkE,OAAAtB,QAAAoB,IACAuL,cACAxP,IAAAxB,EAAAoY,QACApY,EAAAoY,MAAA3S,EACAzF,EAAA6H,KAAApC,GAEAzF,EAAAmY,KAAA1S,EACAA,EAAAhE,EAAAyF,WAAA3B,kBAAA/D,IAAAxB,EAAA8H,QACA9H,EAAA8H,MAAArC,GAEAA,EAAAhE,EAAAyF,WAAA3B,cACAvF,EAAA6H,KAAApC,IAOA,YAHAjE,IAAAxB,EAAA8H,QACA9H,EAAA8H,MAAA9H,EAAAmY,MAEAnY,GAEAyB,EAAAyd,QAAA,SAAAtW,GACA,IAAArJ,EACA6R,EACAqF,EAAAhV,EAAAqV,mBACArR,EAAAhE,EAAAyF,WAAA3B,YACAH,EAAA3D,EAAAyF,WAAArD,SACA4E,EAAAG,EAAA6uB,SAAA7uB,EAAA8uB,QACAvf,EAAA1W,EAAAoB,KAAAJ,OAAA,EAEAm5B,EADAn6B,EAAAe,YACAC,OAAA,EACA,IAAAhB,EAAA6F,cAAA,WAA+Cgd,YAAA1b,EAAA7C,KAAAtE,EAAAsnB,eAC/CtnB,EAAA8M,SAAA,CAkDA,GA/CA9M,EAAAE,WAAA8P,aACA0G,GAAA,GAEA,IAAAvP,EAAAoP,SACApP,EAAAsP,iBAGA,KAAAtP,EAAAoP,SACAvW,EAAA4F,cACA5F,EAAAwC,MAAA,IAEawE,GAAA,KAAAG,EAAAoP,QACbvW,EAAAiG,YAEa,KAAAkB,EAAAoP,QACb5S,GAAA,EAEa,KAAAwD,EAAAoP,QACb5S,GAAA,EAEa,KAAAwD,EAAAoP,SAAApP,EAAAqP,UAAA,IAAArP,EAAAoP,QACbvS,EAAAgR,EAAA5O,KAEa,KAAAe,EAAAoP,UAAApP,EAAAqP,UAAA,IAAArP,EAAAoP,QACbvS,EAAAgR,EAAA3O,MAEa,KAAAc,EAAAoP,SACb5S,GAAA3D,EAAAq1B,KACAluB,EAAAsP,kBAEa,KAAAtP,EAAAoP,SACb5S,GAAA3D,EAAAq1B,KACAluB,EAAAsP,kBAEa,KAAAtP,EAAAoP,SAAAvP,GAAA,KAAAG,EAAAoP,QACb5S,EAAA,EAEa,KAAAwD,EAAAoP,SAAAvP,GAAA,KAAAG,EAAAoP,QACb5S,EAAA3D,EAAAoB,KAAAJ,OAAA,EAEagG,GAAA,KAAAG,EAAAoP,QACbvS,EAAAgR,EAAA0B,KAEa1P,GAAA,KAAAG,EAAAoP,UACbvS,EAAAgR,EAAA2B,OAGA,KAAAxP,EAAAoP,QACA,OAAAvW,EAAA8U,YAAA9Q,EAAAL,GAGA,QAAAwD,EAAAoP,QAAA,CAKA,GAJAvW,EAAA4F,cACA5F,EAAA4F,WAAAjF,KAAAoD,IAAAJ,EAAA,OACA3D,EAAA4F,WAAAjF,KAAAoD,IAAAJ,EAAA,IAAA/B,KAAAoC,GACAhE,EAAAgG,gBAAAhG,EAAAwH,qBACA,QAAAxH,EAAAE,WAAAqxB,cACA,IAAAzzB,EAAAkC,EAAAgG,gBAAAG,IAAsDrI,GAAAkC,EAAAgG,gBAAAM,OAAkCxI,GAAA,EACxFkC,EAAAyH,UAAA3J,EAAAkJ,EAAA,cAGAhH,EAAAkG,gBAAAnG,EAAAiH,GAIA,OAFAG,EAAAsP,sBACAzW,EAAAwC,MAAA,GAGAwB,EAAA,IACAA,EAAAgR,EAAA2B,OAEAhT,EAAA+S,IACA/S,EAAA+S,GAEA/S,EAAA,IACAA,EAAA,GAEAK,EAAAm2B,IACAn2B,EAAAgR,EAAA0B,MAIAvP,EAAAqP,WAAA,kBAAA/P,QAAAU,EAAAoP,WACAvW,EAAA4F,WAAAjF,KAAAoD,IAAAJ,EAAA,IAAA3D,EAAA4F,WAAAjF,KAAAoD,IAAAJ,EAAA,QACA3D,EAAA4F,WAAAjF,KAAAoD,IAAAJ,EAAA,IAAA/B,KAAAoC,GACAhE,EAAAgG,gBAAAhG,EAAAwH,qBACAxH,EAAAkG,gBAAAnG,EAAAiH,GACAhH,EAAAwC,MAAA,IAEAwB,IAAAhE,EAAAyF,WAAA3B,aAAAH,IAAA3D,EAAAyF,WAAArD,WACApC,EAAAsF,eAAAtB,IAAAhE,EAAAyF,WAAA3B,YAAAE,OAAAjE,EAAA4D,IAAA3D,EAAAyF,WAAArD,SAAAuB,OAAA5D,GACAC,EAAAwF,cAAAxB,EAAAL,IACAwD,EAAAqP,UAAAxW,EAAAE,WAAAk6B,6BACApzB,IACAhH,EAAA4F,eAEA5F,EAAA4F,WAAAjC,GAAA3D,EAAA4F,WAAAjC,OACA3D,EAAA4F,WAAAjC,GAAA/B,KAAAoC,GACA2L,GACA7J,aAAA9F,EAAA+F,kBACAH,WAAA5F,EAAA4F,WACAI,gBAAAhG,EAAAgG,iBAEAxH,OAAAC,eAAAkR,EAAA,gBACAhR,IAAA,WACA,OAAAqB,EAAA+F,qBAGA/F,EAAA6F,cAAA,mBAAA8J,IAEA3P,EAAAwC,MAAA,MAGAxC,EAAAwd,MAAA,SAAArW,GACAnH,EAAA6F,cAAA,SAA6Cgd,YAAA1b,EAAA7C,KAAAtE,EAAAsnB,eAC7CtnB,EAAA8M,UAIA9M,EAAAud,SAAA,SAAApW,GACAnH,EAAA8M,UAGA9M,EAAA6F,cAAA,YAAgDgd,YAAA1b,EAAA7C,KAAAtE,EAAAsnB,eAEhDtnB,EAAA+c,SAAA,SAAA5V,GACAnH,EAAA6F,cAAA,YAAgDgd,YAAA1b,EAAA7C,KAAAtE,EAAAsnB,eAChDtnB,EAAA8M,WAGA,cAAA9M,EAAAsnB,YAAAta,SACA,qBAAAhN,EAAAsnB,YAAA1iB,MACA5E,EAAA+J,kBAAA/J,EAAAsnB,YAAAjkB,OAAAhF,MACa,cAAA2B,EAAAsnB,YAAAta,SACb,eAAAhN,EAAAsnB,YAAA1iB,MACA5E,EAAA+nB,YACa,0BAAAthB,QAAAzG,EAAAsnB,YAAA1iB,QACb5E,EAAA8U,YAAA9U,EAAAsnB,YAAAxjB,YAAA9D,EAAAsnB,YAAAllB,YAGApC,EAAAkd,YAAA,SAAA/V,GACA,IAAApJ,EACAiB,EACA2Q,EAAAxI,EACAsZ,OAAA1gB,IAAAoH,EAAAsZ,OAAAtZ,EAAA0b,YAAApC,OAAAtZ,EAAAsZ,OACAD,OAAAzgB,IAAAoH,EAAAqZ,OAAArZ,EAAA0b,YAAArC,OAAArZ,EAAAqZ,OACA6Z,OAAAt6B,IAAAoH,EAAAkzB,UAAAlzB,EAAA0b,YAAAwX,UAAAlzB,EAAAkzB,UACA,IAAAxH,IAGA7yB,EAAA6F,cAAA,SAA6Cgd,YAAA1b,IAA7C,CAGAA,IAAA0b,aAAA1b,EACAnH,EAAAs6B,oBAAA,EACAv8B,EAAAiC,EAAA0E,UAAAS,WACAnG,EAAAgB,EAAA0E,UAAAU,UACApF,EAAA8M,WAGA,IAAAutB,IAEA7Z,GAAA,KAEAxgB,EAAA0E,UAAAU,UAAApF,EAAA0E,UAAA8Z,cAAAgC,EAAA,GACAxgB,EAAA0E,UAAAS,WAAAnF,EAAA0E,UAAAqnB,aAAAtL,EAAA,GACAzgB,EAAA0E,UAAAU,UAAA,GAAAob,EAAA,GACAxgB,EAAA0E,UAAAS,WAAA,GAAAsb,EAAA,IACA9Q,EAAA8G,eAAAtP,GAEA0rB,EAAAlU,WAAA,WACAkU,OAAA9yB,EACAC,EAAA0E,UAAAM,SAAAyb,EAAA1iB,EAAAyiB,EAAAxhB,IACiB,MAGjBgB,EAAAu6B,UAAA,SAAAC,EAAAx2B,EAAAL,EAAA82B,GACA,IAAA18B,EAAA8B,EAAAG,EAAA6G,mBAAA6E,EAAA/H,EAAA,EAAAyH,KA0BA,iBAAA6B,KAAAwtB,GAAA,CACA,6BAAAxtB,KAAAutB,EAAApP,UAAA,OAEA,YADAvgB,QAAAC,KAAA,gMAMA0vB,GAFAA,IAAApP,UAAAoP,EAAA/zB,QAAA,kBAAA+zB,EAAAx5B,OAAA,IAAA8nB,MAAA,cAEA1lB,OAAA,SAAA9B,GACA,wBAAA2L,KAAA3L,UAGAk5B,IAAA1R,MAAA,MASA,OAPA/qB,EAAAy8B,EAAAx5B,OACAw5B,EAAAn5B,QAAA,SAAAq5B,GACAhvB,GAAA,EACA,IAAA5N,EAAAkC,EAAAkE,OAAA3B,KAAAmJ,GACA1L,EAAAoB,KAAAtD,GA3CA,SAAA68B,EAAAC,EAAAx2B,EAAA3C,EAAAg5B,EAAAr4B,GACA,IAAAxD,EAAAg8B,EAsBA,OArBAplB,MAAAC,QAAAklB,IAAA,OAAAA,GAAA,iBAAAA,IACAA,EAAAn8B,OAAA0E,KAAAy3B,GAAA5rB,IAAA,SAAA8rB,GACA,OAAAF,EAAAE,MAGA,cAAA5tB,KAAAwtB,KACAE,IAAAvP,UAAA,EAAAuP,EAAA35B,OAAA,GAAA8nB,MAAA,cAEA,iBAAA6R,IACAA,OAEAvvB,EAAAhJ,MACAu4B,EAAAt5B,QAAA,SAAAy5B,EAAAp4B,GACA,IAAAq4B,EAAAt5B,EAAAiB,EAAA0B,GAAA/F,UACA0B,IAAA46B,EAAAj4B,IAAA,OAAAi4B,EAAAj4B,IAIA0I,EAAAhJ,GAAAR,KAAAc,EAAA0B,GACAxF,EAAAm8B,GAAAJ,EAAAj4B,IAJA9D,EAAAm8B,GAAAH,EAAAG,KAMAn8B,EAoBAo8B,CAAAN,EAAA16B,EAAAoB,KAAAtD,GAAAkG,EAAAnE,EAAA46B,EAAA38B,KAEAkC,EAAA4F,WAAAwF,EACArN,GAEAiC,EAAAi7B,0BAAA,SAAAC,GACA,IAAAl3B,EAAAnE,EAAAG,EAAA6G,mBACA,IAAA7C,EAAA,EAAuBA,EAAAnE,EAAAmB,OAAcgD,GAAA,EACrC,GAAAnE,EAAAmE,GAAAF,cAAAo3B,EACA,OAAAr7B,EAAAmE,EAAA,GAAAF,YAGA,UAEA9D,EAAA2L,wBAAA,SAAA7H,GACA,IAAAE,EAAAnE,EAAAG,EAAA6G,mBACA,IAAA7C,EAAA,EAAuBA,EAAAnE,EAAAmB,OAAcgD,GAAA,EACrC,GAAAnE,EAAAmE,GAAAF,gBACA,OAAAE,EAGA,UAEAhE,EAAAsd,MAAA,SAAAnW,GACA,IAAA/I,GAQAA,EAAAoX,MAAA9V,UAAA0D,OAAAnF,KAAAkJ,EAAAg0B,cAAAnd,MAAA,SAAAod,GACA,oBAAAA,EAAA53B,OACa,IAAAgS,MAAA9V,UAAA0D,OAAA,SAAAg4B,GACb,mBAAAA,EAAA53B,OACa,IAAAgS,MAAA9V,UAAA0D,OAAA,SAAAg4B,GACb,qBAAAA,EAAA53B,OACa,IAbb,SAAA43B,GACA,IAAA53B,EAAA43B,EAAA53B,KACA43B,EAAAC,YAAA,SAAAx7B,GACAG,EAAAu6B,UAAA16B,EAAAG,EAAA2L,wBAAA3L,EAAAyF,WAAA3B,aAAA9D,EAAAyF,WAAArD,SAAAoB,GACAxD,EAAAwC,SAcA+mB,CAAAnrB,GAHAyM,QAAAC,KAAA,qGAKA9K,EAAAqd,IAAA,SAAAlW,GACAnH,EAAAod,KAAAjW,GACAnH,EAAA0G,oBAAA,SAAAtF,EAAAN,EAAAknB,GACA5mB,EAAAN,GAAAknB,GAAA,MAGAhoB,EAAAod,KAAA,SAAAjW,GACA,IAAAnH,EAAA6F,cAAA,QAA4Cgd,YAAA1b,KAC5CnH,EAAA8M,UAAA3F,EAAAg0B,cAAA,CAGAn7B,EAAAoB,KAFA,IAAApC,EACAZ,EAKAk9B,EAHAC,KACAC,KACAC,KAEAC,EAAA17B,EAAA+F,kBACAlG,EAAAG,EAAAe,YAgDA26B,EAAA16B,OAAA,IACA06B,EAAAr6B,QAAA,SAAAC,GACA,IAAAq6B,EAAAn9B,OAAA0E,KAAA5B,GACA,GAAAA,EAAA,CACA,IAAAs6B,KACAC,KACAC,KAGAj8B,EAAAwB,QAAA,SAAA0B,EAAAe,GACAg4B,EAAAl6B,KAAA/B,EAAAG,EAAAkE,OAAAtB,QAAAkB,OAEAg4B,EAAAz6B,QAAA,SAAA0B,EAAAe,IACA,IAAA63B,EAAAl1B,QAAA1D,EAAA1E,QACAo9B,EAAA14B,EAAA1E,OAAA,EAjCA,SAAAqX,EAAAkmB,EAAAC,EAAA94B,GAEA,OAAA2S,IACA,IAAAA,QACA3V,IAAA2V,GACAA,EAAA6M,SACAqZ,EAAAh6B,KAAAm6B,EAAArmB,IACAmmB,EAAAj6B,KAAA,IAAA8T,EAAA6M,QAAA,sBAGAxiB,IAAA2V,GACAmmB,EAAAj6B,KAAA8T,GACAkmB,EAAAh6B,KAAAm6B,EAAArmB,MAIAmmB,EAAAj6B,KAAA,IACAg6B,EAAAh6B,KAAA,oBAkBAo6B,CAAA16B,EAAAyB,EAAA1E,MAAAu9B,EAAAC,MAGAN,EAAA35B,KAAAg6B,EAAAK,KAAA,KACAT,EAAA55B,KAAAi6B,EAAAI,KAAA,SAIAj9B,EAAAk9B,EADAZ,EAAA98B,OAAA0E,KAAAu4B,IACAD,EAAAS,KAAA,MACA79B,EAAA,UAAA89B,EAAAZ,GAAA,UAAAC,EAAAU,KAAA,6BACA,IAAAX,EAAAt6B,SAEAhC,IAAAosB,UAAA,EAAApsB,EAAAgC,OAAA,IAEAmG,EAAAg0B,cAAAgB,QAAA,YAAA/9B,GACA+I,EAAAg0B,cAAAgB,QAAA,aAAAn9B,GACAmI,EAAAg0B,cAAAgB,QAAA,WAAAn9B,GACAmI,EAAAg0B,cAAAgB,QAAA,mBAAAzV,KAAAC,UAAA+U,IACAv0B,EAAAsP,kBAjFA,SAAA2lB,EAAA9uB,GACA,OAAAA,EAAAiV,QAAA,aAA4CA,QAAA,aAE5C,SAAAwZ,EAAAzuB,GAEA,+BADAA,EAAA,OAAAA,QAAAvN,IAAAuN,EAAA,GAAAA,GACA8uB,EAAA9uB,MAAA,QAEA,SAAA4uB,EAAAG,EAAAC,GACA,IAAAz8B,EAAAmB,QAAAq7B,EAAAr7B,OAAA,EAAsD,SACtD,IAAAgI,KAiBA,OAhBAszB,GACAtzB,EAAApH,KAAA,QAEA/B,EAAAwB,QAAA,SAAA0B,EAAAe,GAGA,KADAf,EAAAlD,EAAAG,EAAAkE,OAAAtB,QAAAkB,KACAyL,SAAA,IAAA8sB,EAAA51B,QAAA1D,EAAA1E,MAAA,CACA,IAAAk+B,EAAAx5B,EAAA1E,MAAA0E,EAAAkM,OAAA,GACAqtB,EACAtzB,EAAApH,KAAA,OAAAw6B,EAAAG,GAAA,SAEAvzB,EAAApH,KAAA,IAAA26B,EAAAha,QAAA,mBAIAvZ,EAAApH,KAAA06B,EAAA,cACAtzB,EAAAizB,KAAAK,EAAA,YA4DCl8B,MAAA9C,SAAAC,EAAAD,QAAAwC,oBC/xCD,IAAAA,OA23CCC,KAz3CDD,EAAA,WACA,aACA,gBAAAE,GACA,IAAAw8B,KACAC,GAAA,EACAC,EAAA,EACAC,EAAA,IACAC,KAEAC,KACAC,KAGA,SAAAlY,EAAAnW,EAAAC,EAAAquB,EAAAnV,GACAmV,KAAA,EACA,IAAA/4B,EAAAlG,KACA,IAAAkG,EAAAyK,EAAyBzK,GAAA0K,EAAW1K,GAAA+4B,EACpCj/B,EAAAkG,QAAAjE,IAAA6nB,EAAA5jB,EAAA,mBAAA4jB,IAAA5jB,GAAA4jB,EAEA,OAAA9pB,EAqCA,SAAAk/B,EAAA14B,GACA,IAAA24B,EACA3vB,EAAAhJ,EAAAqR,WAAArR,EAAA44B,eACAC,EAAA7vB,EAAA2C,WAAA3L,EAAAlC,SAAA6N,WAAA3L,EAAAR,YAAAmM,WACAjM,EAAAM,EAAAN,EAAAhE,EAAA6T,iBACAlQ,EAAAW,EAAAX,EAAA3D,EAAA8T,gBACA,GAAA9T,EAAAo9B,eAAAD,GAAA,CAEA,IADAF,EAAAj9B,EAAAo9B,eAAAD,IACA96B,SAAAiC,EAAAjC,QAAA46B,EAAAt6B,QAAA2B,EAAA3B,MAGiB,CACjB,IAAAs6B,EAAAI,SACA,OAEA,OAAAr9B,EAAA4P,IAAA0tB,UAAAL,EAAAj5B,EAAAL,GALA3D,EAAAo9B,eAAAD,QAAAp9B,OAQA08B,GAAA,EAEAQ,EAAA,IAAAM,MAAAj5B,EAAA3B,MAAA2B,EAAAjC,QACArC,EAAAo9B,eAAAD,GAAAF,EACAA,EAAAO,OAAA,WACAx9B,EAAA4P,IAAA0tB,UAAAL,EAAAj5B,EAAAL,GAnCA,WACA,IAAA85B,GAAA,EACAj/B,OAAA0E,KAAAlD,EAAAo9B,gBAAA/7B,QAAA,SAAAuQ,GACA5R,EAAAo9B,eAAAxrB,GAAAyrB,WACAI,GAAA,KAGAA,IAAAhB,IACAA,GAAA,EACAz8B,EAAAwC,QA2BAk7B,IAEAT,EAAAU,IAAA,6BAA0CC,KAC1C,kDAAAt5B,EAAA3B,MAAA,aAAA2B,EAAAjC,OAAA,qJAGAiL,EAAA,uCA8DA,SAAAuwB,EAAA75B,EAAAL,EAAAgP,EAAA3J,EAAA80B,GAGA,IAAAl/B,GAFAoF,GAAAhE,EAAA6T,kBAEAlB,EAAAZ,GADApO,GAAA3D,EAAA8T,iBACA9K,EACAhJ,EAAA4P,IAAAmuB,YACA/9B,EAAA4P,IAAAvE,OAAArH,EAAA85B,EAAAn6B,GACA3D,EAAA4P,IAAAouB,OAAAp/B,EAAAk/B,EAAAn6B,GACA3D,EAAA4P,IAAAquB,iBAAAr/B,EAAA+E,EAAA/E,EAAA+E,EAAAm6B,GACA99B,EAAA4P,IAAAouB,OAAAp/B,EAAA+E,EAAAqF,EAAA80B,GACA99B,EAAA4P,IAAAquB,iBAAAr/B,EAAAmT,EAAAnT,EAAAk/B,EAAA/rB,GACA/R,EAAA4P,IAAAouB,OAAAh6B,EAAA85B,EAAA/rB,GACA/R,EAAA4P,IAAAquB,iBAAAj6B,EAAA+N,EAAA/N,EAAA+N,EAAA+rB,GACA99B,EAAA4P,IAAAouB,OAAAh6B,EAAAL,EAAAm6B,GACA99B,EAAA4P,IAAAquB,iBAAAj6B,EAAAL,EAAAK,EAAA85B,EAAAn6B,GAEA,SAAAu6B,EAAAl6B,EAAAL,EAAAgP,EAAA3J,GACAhF,GAAAhE,EAAA6T,iBACAlQ,GAAA3D,EAAA8T,gBACA9T,EAAA4P,IAAAsuB,SAAAl6B,EAAAL,EAAAgP,EAAA3J,GAEA,SAAAm1B,EAAAn6B,EAAAL,EAAAgP,EAAA3J,GACAhF,GAAAhE,EAAA6T,iBACAlQ,GAAA3D,EAAA8T,gBACA9T,EAAA4P,IAAAuuB,WAAAn6B,EAAAL,EAAAgP,EAAA3J,GAEA,SAAAo1B,EAAAC,EAAAr6B,EAAAL,GACAK,GAAAhE,EAAA6T,iBACAlQ,GAAA3D,EAAA8T,gBACA9T,EAAA4P,IAAAwuB,SAAAC,EAAAr6B,EAAAL,GAgBA,SAAA26B,EAAAr/B,GAIAe,EAAA4P,IAAAmuB,YACA,IAAA9+B,IACAe,EAAA4P,IAAAvE,OAAArL,EAAAu+B,sBAAAv+B,EAAAw+B,oBACAx+B,EAAA4P,IAAAouB,OAAAh+B,EAAAu+B,sBAAAv+B,EAAAqC,QACArC,EAAA4P,IAAAouB,OAAAh+B,EAAA2C,MAAA3C,EAAAqC,QACArC,EAAA4P,IAAAouB,OAAAh+B,EAAA2C,MAAA3C,EAAAw+B,qBAEA,IAAAv/B,IACAe,EAAA4P,IAAAvE,OAAA,EAAArL,EAAAw+B,oBACAx+B,EAAA4P,IAAAouB,OAAA,EAAAh+B,EAAAqC,QACArC,EAAA4P,IAAAouB,OAAAh+B,EAAA2C,MAAA3C,EAAAqC,QACArC,EAAA4P,IAAAouB,OAAAh+B,EAAA2C,MAAA3C,EAAAw+B,qBAEA,IAAAv/B,IACAe,EAAA4P,IAAAvE,OAAArL,EAAAu+B,sBAAA,GACAv+B,EAAA4P,IAAAouB,OAAAh+B,EAAA2C,MAAA,GACA3C,EAAA4P,IAAAouB,OAAAh+B,EAAA2C,MAAA3C,EAAAqC,QACArC,EAAA4P,IAAAouB,OAAAh+B,EAAAu+B,sBAAAv+B,EAAAqC,SAEArC,EAAA4P,IAAAmD,OAEA,SAAA0rB,EAAAz6B,EAAAL,EAAA/E,GACA,cAAAoB,EAAA4E,MAAA85B,oBACA,OAzCA,SAAA16B,EAAAL,EAAA/E,GACAoF,GAAAhE,EAAA6T,iBACAlQ,GAAA3D,EAAA8T,gBACA9T,EAAA4P,IAAAmuB,YACA/9B,EAAA4P,IAAA+uB,IAAA36B,EAAAL,EAAA/E,EAAA,IAAA+B,KAAAi+B,IACA5+B,EAAA4P,IAAAivB,OAoCAC,CAAA96B,EAAAL,EAAA,GAAA/E,GAEAs/B,EAAAl6B,EAAA,GAAApF,EAAA+E,EAAA,GAAA/E,OAEA,SAAAmgC,EAAA/6B,EAAAL,EAAA/E,GACA,cAAAoB,EAAA4E,MAAA85B,oBACA,OAxCA,SAAA16B,EAAAL,EAAA/E,GACAoF,GAAAhE,EAAA6T,iBACAlQ,GAAA3D,EAAA8T,gBACA9T,EAAA4P,IAAAmuB,YACA/9B,EAAA4P,IAAA+uB,IAAA36B,EAAAL,EAAA/E,EAAA,IAAA+B,KAAAi+B,IACA5+B,EAAA4P,IAAAovB,SAmCAC,CAAAj7B,EAAAL,EAAA,GAAA/E,GAEAu/B,EAAAn6B,EAAA,GAAApF,EAAA+E,EAAA,GAAA/E,OAwBA,SAAAsgC,EAAA/gC,EAAAmV,GACAtT,EAAA4P,IAAAmuB,aAEA/+B,EAAA,WACAgB,EAAA4P,IAAAvE,OAAAlN,EAAA6F,EAAAhE,EAAA6T,iBAAA1V,EAAAwF,EAAA3D,EAAA8T,iBACA9T,EAAA4P,IAAAouB,OAAA7/B,EAAA6F,EAAAhE,EAAA6T,iBAAA1V,EAAAwE,MAAAxE,EAAAwF,EAAA3D,EAAA8T,kBAEAlV,EAAA,WACAoB,EAAA4P,IAAAvE,OAAAlN,EAAA6F,EAAAhE,EAAA6T,iBAAA1V,EAAAwE,MAAAxE,EAAAwF,EAAA3D,EAAA8T,iBACA9T,EAAA4P,IAAAouB,OAAA7/B,EAAA6F,EAAAhE,EAAA6T,iBAAA1V,EAAAwE,MAAAxE,EAAAwF,EAAA3D,EAAA8T,gBAAA3V,EAAAkE,SAEA0P,EAAA,WACA/R,EAAA4P,IAAAvE,OAAAlN,EAAA6F,EAAAhE,EAAA6T,iBAAA1V,EAAAwF,EAAA3D,EAAA8T,gBAAA3V,EAAAkE,QACArC,EAAA4P,IAAAouB,OAAA7/B,EAAA6F,EAAAhE,EAAA6T,iBAAA1V,EAAAwE,MAAAxE,EAAAwF,EAAA3D,EAAA8T,gBAAA3V,EAAAkE,SAEAtE,EAAA,WACAiC,EAAA4P,IAAAvE,OAAAlN,EAAA6F,EAAAhE,EAAA6T,iBAAA1V,EAAAwF,EAAA3D,EAAA8T,iBACA9T,EAAA4P,IAAAouB,OAAA7/B,EAAA6F,EAAAhE,EAAA6T,iBAAA1V,EAAAwF,EAAA3D,EAAA8T,gBAAA3V,EAAAkE,UAGAiR,KACAtT,EAAA4P,IAAAovB,SArQAh/B,EAAAo9B,kBAybAp9B,EAAAwC,KAAA,SAAAwH,GACA,IAAAhK,EAAA6F,cAAA,mBACA7F,EAAAoU,aAAApU,EAAAqC,QAAArC,EAAA2C,OAGA,GAAA3C,EAAAoU,aAAApK,EACA/E,sBAAAjF,EAAAqJ,WAAA7G,WAGA,QAAAxC,EAAAwB,KAAAqI,QAAA,CAIA,IAAAs1B,EAAA3tB,EAAA5R,EAAAw/B,EAAAC,EAAA72B,EAAAkvB,EACA4H,EAAAv2B,EAAApF,EAAAK,EAAA7F,EAAA6K,EAAA2J,EAAA9S,EAAAjB,EAAA2gC,EAAAC,EACAp+B,EAAApB,EAAAoB,SACAq+B,EAAA,aAAAz/B,EAAA4E,MAAA6O,mBACAisB,KACAC,KACAC,KACAC,KACA9hC,EAAAqD,EAAAJ,OACA8+B,EAAA9/B,EAAAsnB,gBACA1e,EAAA5I,EAAA6I,4BACAC,EAAA9I,EAAA6S,wBACAvK,EAAAtI,EAAA4E,MAAA0D,WACAo0B,GAAA,EACA98B,EAAAsvB,YAAAC,MACAnvB,EAAA+kB,qBAEA3jB,EAAAJ,OAAAhB,EAAAkE,OAAA3B,KAAAvB,QACAhB,EAAA+jB,kBA+3BA/jB,EAAA4P,IAAAmwB,OApWA//B,EAAAylB,eACA5lB,EAAAG,EAAAe,YACAf,EAAAuF,gBACAvF,EAAA8T,gBAAA9T,EAAAoU,YAAApU,EAAAoJ,WAAAM,UAAA,EACA1J,EAAA6T,iBAAA7T,EAAAoU,YAAApU,EAAAoJ,WAAAK,WAAA,EACAT,EAAAhJ,EAAAqC,OAIAw7B,EAAA,IAHAlrB,EAAA3S,EAAA2C,MAGAqG,EAAA,GACAhJ,EAAA4P,IAAAmD,OACA/S,EAAA4P,IAAAowB,UAAAhgC,EAAA4E,MAAAq7B,oBACA/B,EAAA,IAAAvrB,EAAA3J,GAEA,WACA,IAAAk3B,EAAAv/B,KAAA0G,IAAAjG,EAAAJ,OAAAhB,EAAAslB,WAGA,IAFAthB,GAAAhE,EAAA0E,UAAAS,WAAAnF,EAAAgmB,gBAAAhmB,EAAA4E,MAAAsI,gBACAvJ,EAAAiF,EACAhK,EAAA,EAA2BA,EAAAshC,GAE3BC,EADAngC,EAAAkE,OAAA3B,KAAA3D,GACAA,GAFmCA,GAAA,GAMnCoB,EAAAE,WAAAkgC,oBAGAz8B,GAAA3D,EAAA4E,MAAAy7B,wBAAArgC,EAAA4E,MAAA07B,kBAAA,aAEAtgC,EAAAw+B,mBAAA76B,EA0UA48B,GAxUA,WACAvgC,EAAA4P,IAAAmwB,OACA//B,EAAAslB,UAAA,IACAuY,EAAA,EAAA79B,EAAAw+B,mBAAAx+B,EAAA2C,MAAA3C,EAAAqC,OAAArC,EAAAw+B,mBAAA,GACAx+B,EAAA4P,IAAAmD,QAEA,IAAAxU,EAAAgB,EAAAzB,EAAA0iC,EAAA3gC,EAAAmB,OAKA,IAJAgD,GAAAhE,EAAA0E,UAAAS,WAAAnF,EAAAgmB,gBAAAhmB,EAAA4E,MAAAsI,gBACAlN,EAAAE,WAAAugC,YACA98B,IAAA3D,EAAA0E,UAAAU,UAAApF,EAAA8lB,eAAA9lB,EAAA4E,MAAAsI,iBAEAtO,EAAAoB,EAAAslB,UAAAtlB,EAAAsH,eAA8D1I,EAAAb,IAC9DwB,EAAAS,EAAAkE,OAAA3B,KAAA3D,GACAoB,EAAAmsB,kBAAAvtB,EACAoB,EAAAqsB,kBAAA1oB,EACAw8B,EAAA5gC,EAAAX,IAJqEA,GAAA,GAQrE,GAAAoB,EAAAE,WAAA8P,WAAA,CAMA,IALAhQ,EAAAE,WAAAqmB,iBACAviB,GAAA8E,GAEAw2B,EAAAh3B,EAAAtI,EAAA4E,MAAA0D,WACAovB,GAAA,EACAn5B,EAAAyB,EAAA+lB,gBAAkDxnB,EAAAiiC,IAClD1iC,EAAAkC,EAAAkE,OAAAtB,QAAArE,MACAyF,GAAA08B,EAAA1gC,EAAA6mB,OAAAzlB,EAAAJ,OAAAI,EAAAJ,OAAA0/B,CAAA7gC,EAAA/B,KAAAS,IACAyB,EAAA2C,MAAA3C,EAAA0E,UAAAS,aAHyD5G,GAAA,GAOzDshC,EAAAj+B,MAAA5B,EAAA6mB,OAAAzlB,EAAAJ,OAAAI,EAAAJ,OAAA2C,EAAA27B,IAEAt/B,EAAA4P,IAAA+wB,UAuSAC,GApLA,WACA,GAAApB,EAAA,CACAx/B,EAAA4P,IAAAmwB,OACA,IAAAc,EAAA7gC,EAAAyF,WAAA3B,YAAA,EAAA9D,EAAAulB,cAAAvlB,EAAAyF,WAAArD,SAAA,EAAApC,EAAAslB,UAKAuY,EAJAgD,EAAA7gC,EAAAu+B,sBAAA,EACAsC,EAAA7gC,EAAAw+B,mBAAA,EACAqC,EAAA7gC,EAAA2C,MAAA3C,EAAAu+B,sBAAAv+B,EAAA2C,MACAk+B,EAAA7gC,EAAAqC,OAAArC,EAAAw+B,mBAAAx+B,EAAAqC,OACA,GACArC,EAAA4P,IAAAmD,OACA,QAAA/S,EAAAE,WAAAqxB,cACAvxB,EAAAyF,YAAAzF,EAAAyF,WAAArD,WAAAo9B,EAAAp9B,WACApC,EAAA4P,IAAAkxB,UAAA9gC,EAAA4E,MAAAm8B,6BACA/gC,EAAA4P,IAAAoxB,YAAAhhC,EAAA4E,MAAAq8B,6BACA9C,EAAA,EAAAqB,EAAA77B,EAAA3D,EAAAiR,iBAAAnI,EAAA9I,EAAA+kB,kBAAAya,EAAAp9B,aAGApC,EAAA4P,IAAAkxB,UAAA9gC,EAAA4E,MAAAm8B,6BACA/gC,EAAA4P,IAAAoxB,YAAAhhC,EAAA4E,MAAAq8B,6BACA9C,EAAAqB,EAAAx7B,EAAAw7B,EAAA77B,EAAA67B,EAAA78B,MAAA68B,EAAAn9B,SAEArC,EAAA4P,IAAA+wB,WAgKAO,GA1gBA,WACA,IAAA9iC,EAAAN,EAAAS,EAAA4iC,EAAA99B,EAAA+9B,EAAAZ,EAAA3gC,EAAAmB,OACA,SAAAqgC,EAAAC,EAAAC,GAEA,IADAA,EAAA5gC,KAAA0G,IAAAk6B,EAAAf,GACAjiC,EAAA+iC,EAAmC/iC,EAAAgjC,IACnCzjC,EAAAkC,EAAAkE,OAAAtB,QAAArE,IACA8E,EAAAxD,EAAA/B,IACAyR,SACAnR,GACA6Q,MAAA5L,EAAA4L,MACA5Q,KAAAgF,EAAAhF,KACAsE,MAAAU,EAAAV,OAAA3C,EAAA4E,MAAAwM,UACAxM,MAAA,mBACApB,KAAA,SACA1C,MAAAvC,EACA8L,MAAAvM,GAEAqjC,GAAgDA,iBAAA99B,EAAA4L,OAAA5L,EAAAhF,SAChD2F,GAAA08B,EAAAS,GAAA,KAAAT,CAAAtiC,EAAAN,EAAAS,IACAyB,EAAA2C,MAAA3C,EAAA0E,UAAAS,cAf4C5G,GAAA,IAqB5CshC,EAAAx+B,QAAA,SAAAmgC,EAAAC,GACA99B,EAAA69B,EAAA,GACAl5B,EAAAk5B,EAAA,GACAC,IAAAzhC,EAAAslB,YACAtlB,EAAA4P,IAAAmwB,OACAlC,EAAA,EAAA79B,EAAAw+B,mBAAAx+B,EAAA2C,MAAA3C,EAAAqC,OAAArC,EAAAw+B,mBAAA,GACAx+B,EAAA4P,IAAAmD,QAjDA,SAAA2nB,EAAA55B,EAAA4gC,GACA,IAAA5vB,EAAAhU,EACAkC,EAAAE,WAAAqmB,iBACAviB,EAAA,EAEAwN,GAAqCA,cADrC1T,EAAAgD,EAAA,GAEAgR,GACAzT,KAAA,gBACAsE,MAAA3C,EAAAsC,MAAAM,SAAA,IAAA5C,EAAA4E,MAAAkE,mBACAlE,MAAA,gBACApB,KAAA,SACApC,KAAAtD,EACAgD,OAAA,GAEA42B,EAAA13B,EAAAkI,aAAApH,GACA4/B,EAAAlvB,EAAA1Q,EAAA4gC,EAAAhB,CAAA5uB,GAAA,OAoCA6vB,CAAAH,EAAA,GAAAA,EAAA,GAAAA,EAAA,MAEAxhC,EAAA4P,IAAA+wB,UACA3gC,EAAAE,WAAAomB,oBACAtiB,GAAAhE,EAAA0E,UAAAS,WAAAnF,EAAAgmB,gBAAAhmB,EAAA4E,MAAAwvB,4BACAp0B,EAAAE,WAAAqmB,iBACAviB,GAAA8E,GAEAnF,EAAA,EAEA2E,EAAAtI,EAAA6I,4BACAw4B,EAAArhC,EAAA+lB,gBAAAya,GACAY,EAAAp9B,EACAA,EAAAhE,EAAA4E,MAAAwvB,4BACAp0B,EAAAE,WAAAqmB,iBACAviB,GAAA8E,GAEAu4B,EAAA,EAAArhC,EAAAulB,eAEAvhB,EAAAo9B,GACAzuB,IACAxU,GACAE,KAAA,GACAsE,MAAA3C,EAAA4E,MAAAC,eACAD,MAAA,sBACAg9B,oBAAA,EACA7e,uBAAA,EACAvf,KAAA,SACA1C,MAAAjB,EAAAmB,QAEA0/B,GAAkCmB,OAAA,KAAW,KAA7CnB,CAA6CviC,GAAA,OAG7C6B,EAAAE,WAAAqmB,iBACAxd,GAAsCA,WAAA,IACtC/E,EAAA,EACA7F,GACAE,KAAA,aACAsE,MAAA3C,EAAA4E,MAAAkE,mBACAlE,MAAA,aACApB,KAAA,SACA1C,OAAA,GAEA4/B,EAAA33B,GAAA,KAAA23B,CAAAviC,GAAA,QA+bA2jC,GA/JA,WACA,IAAAC,EAAA/hC,EAAAw+B,mBAAAx+B,EAAA4E,MAAA07B,kBACA0B,EAAAhiC,EAAAu+B,sBAAAv+B,EAAA4E,MAAAy7B,wBACA4B,EAAAjiC,EAAAsnB,aAAA,sBAAAtnB,EAAAsnB,YAAA1iB,MACAs9B,EAAAliC,EAAAsnB,aAAA,yBAAAtnB,EAAAsnB,YAAA1iB,MACA5E,EAAA4P,IAAAkxB,UAAA9gC,EAAA4E,MAAAy7B,wBACArgC,EAAAE,WAAAiiC,uBACAniC,EAAA4P,IAAAowB,UAAAkC,EAAAliC,EAAA4E,MAAAw9B,uBAAApiC,EAAA4E,MAAAy9B,kBACAriC,EAAA4P,IAAAoxB,YAAAkB,EAAAliC,EAAA4E,MAAA09B,6BAAAtiC,EAAA4E,MAAA29B,wBACArE,EAAA8D,EAAA,EAAAhiC,EAAA4E,MAAA07B,kBAAAtgC,EAAAqC,QACA87B,EAAA6D,EAAA,EAAAhiC,EAAA4E,MAAA07B,kBAAAtgC,EAAAqC,QACArC,EAAAuF,aAAAutB,SACA9uB,EAAAg+B,EACAr+B,EAAA,EACAtB,OAAArC,EAAAqC,OACAM,MAAA3C,EAAA4E,MAAA07B,kBAAAtgC,EAAA4E,MAAAy7B,wBACAz7B,MAAA,0BAGA5E,EAAAE,WAAAkgC,oBACApgC,EAAA4P,IAAAowB,UAAAiC,EAAAjiC,EAAA4E,MAAAw9B,uBAAApiC,EAAA4E,MAAAy9B,kBACAriC,EAAA4P,IAAAoxB,YAAAiB,EAAAjiC,EAAA4E,MAAA09B,6BAAAtiC,EAAA4E,MAAA29B,wBACArE,EAAA,EAAA6D,EAAA/hC,EAAA2C,MAAA3C,EAAA4E,MAAA07B,mBACAnC,EAAA,EAAA4D,EAAA/hC,EAAA2C,MAAA3C,EAAA4E,MAAA07B,mBACAtgC,EAAAuF,aAAAutB,SACA9uB,EAAA,EACAL,EAAAo+B,EACA1/B,OAAArC,EAAA4E,MAAA07B,kBAAAtgC,EAAA4E,MAAAy7B,wBACA19B,MAAA3C,EAAA2C,MACAiC,MAAA,uBAGA5E,EAAAy5B,uBACAz5B,EAAA4P,IAAAowB,UAAAhgC,EAAA4E,MAAA49B,wBACAxiC,EAAA4P,IAAAoxB,YAAAhhC,EAAA4E,MAAA69B,8BACA,yBAAAziC,EAAAgsB,UACAkS,EAAAl+B,EAAAy5B,qBAAAz1B,EAAA,EAAAhE,EAAA4E,MAAA07B,kBAAAtgC,EAAAqC,QACA87B,EAAAn+B,EAAAy5B,qBAAAz1B,EAAA,EAAAhE,EAAA4E,MAAA07B,kBAAAtgC,EAAAqC,UAEA67B,EAAA,EAAAl+B,EAAAy5B,qBAAA91B,EAAA3D,EAAA2C,MAAA3C,EAAA4E,MAAA07B,mBACAnC,EAAA,EAAAn+B,EAAAy5B,qBAAA91B,EAAA3D,EAAA2C,MAAA3C,EAAA4E,MAAA07B,qBAwHAoC,GAvOA,WAGA,SAAAC,EAAAxkC,GACA+gC,EAAA/gC,EAAA,GAAAA,EAAA,IAHA6B,EAAA4P,IAAAkxB,UAAA9gC,EAAA4E,MAAAg+B,4BACA5iC,EAAA4P,IAAAoxB,YAAAhhC,EAAA4E,MAAAi+B,4BAIAnD,EAAAt8B,OAAA,SAAAjF,GACA,OAAAA,EAAA,GAAAiE,SAAApC,EAAAslB,WAAAnnB,EAAA,GAAA2F,YAAA9D,EAAAulB,eACiBlkB,QAAAshC,GACjB3iC,EAAA4P,IAAAmwB,OACAzB,EAAA,GACAoB,EAAAt8B,OAAA,SAAAjF,GACA,OAAAA,EAAA,GAAAiE,UAAApC,EAAAslB,WAAAnnB,EAAA,GAAA2F,aAAA9D,EAAAulB,eACiBlkB,QAAAshC,GACjB3iC,EAAA4P,IAAA+wB,UACA3gC,EAAA4P,IAAAmwB,OACAzB,EAAA,GACAoB,EAAAt8B,OAAA,SAAAjF,GACA,OAAAA,EAAA,GAAAiE,UAAApC,EAAAslB,WAAAnnB,EAAA,GAAA2F,YAAA9D,EAAAulB,eACiBlkB,QAAAshC,GACjB3iC,EAAA4P,IAAA+wB,UACA3gC,EAAA4P,IAAAmwB,OACAzB,EAAA,GACAoB,EAAAt8B,OAAA,SAAAjF,GACA,OAAAA,EAAA,GAAAiE,SAAApC,EAAAslB,WAAAnnB,EAAA,GAAA2F,aAAA9D,EAAAulB,eACiBlkB,QAAAshC,GACjB3iC,EAAA4P,IAAA+wB,UA8MAmC,IA3MA9iC,EAAA2T,QAAA3T,EAAAE,WAAA6iC,wBACA/iC,EAAA4P,IAAAkxB,UAAA9gC,EAAA4E,MAAAo+B,2BACAhjC,EAAA4P,IAAAoxB,YAAAhhC,EAAA4E,MAAAq+B,2BACAjjC,EAAA4P,IAAAowB,UAAAhgC,EAAA4E,MAAAs+B,qBACAtD,EAAAv+B,QAAA,SAAAlD,IA97BA,SAAAA,EAAAmV,GACA,IAAA6vB,EAAAnjC,EAAA4E,MAAAw+B,sBAEAC,GAAA,WACA5E,EAAAtgC,EAAA6F,EAAA7F,EAAAwE,MAAAxE,EAAAwF,EAAAw/B,GACApE,EAAA5gC,EAAA6F,EAAA7F,EAAAwE,MAAAxE,EAAAwF,EAAAw/B,IAEAG,GAAA,WACA7E,EAAAtgC,EAAA6F,EAAA7F,EAAAwE,MAAAxE,EAAAwF,EAAAxF,EAAAkE,OAAA8gC,GACApE,EAAA5gC,EAAA6F,EAAA7F,EAAAwE,MAAAxE,EAAAwF,EAAAxF,EAAAkE,OAAA8gC,IAEAI,GAAA,WACA9E,EAAAtgC,EAAA6F,EAAA7F,EAAAwF,EAAAw/B,GACApE,EAAA5gC,EAAA6F,EAAA7F,EAAAwF,EAAAw/B,IAEAK,GAAA,WACA/E,EAAAtgC,EAAA6F,EAAA7F,EAAAwF,EAAAxF,EAAAkE,OAAA8gC,GACApE,EAAA5gC,EAAA6F,EAAA7F,EAAAwF,EAAAxF,EAAAkE,OAAA8gC,MAGA7vB,KA26BAmwB,CAAAtlC,EAAA,GAAAA,EAAA,IACA,IAAAulC,EAAA1jC,EAAAE,WAAAyjC,sBAAA,EACAC,EAAAzlC,EAAA,GAAA6F,GAAA,OAAA7F,EAAA,WAAAA,EAAA,KAAAA,EAAA,GAAAwE,OAAA+gC,EACAG,EAAA1lC,EAAA,GAAAwF,GAAA,OAAAxF,EAAA,WAAAA,EAAA,GAAAA,EAAA,GAAAkE,OAAA,GAAAqhC,EACA1jC,EAAAuF,aAAAutB,SACA9uB,EAAA4/B,EACAjgC,EAAAkgC,EACAxhC,OAAArC,EAAA4E,MAAAw+B,oBAAAM,EACA/gC,MAAA3C,EAAA4E,MAAAw+B,oBAAAM,EACA9+B,MAAA,oBAAAzG,EAAA,QAlGA,WACA,GAAA6B,EAAA22B,cAAA,CACA,IAAA5kB,GACA1P,OAAArC,EAAA22B,cAAAt0B,OACAM,MAAA3C,EAAA22B,cAAAh0B,MACAqB,EAAAhE,EAAA22B,cAAA3yB,EAAAhE,EAAA22B,cAAAkC,WAAA70B,EACAL,EAAA3D,EAAA22B,cAAAhzB,EAAA3D,EAAA22B,cAAAkC,WAAAl1B,GAEAzF,GACAyE,MAAAgQ,EACAtQ,OAAA2G,EACAhF,EAAA,EACAL,EAAA,GAEA3D,EAAA4P,IAAAowB,UAAAhgC,EAAA4E,MAAAk/B,6BACA9jC,EAAA4P,IAAAkxB,UAAA9gC,EAAA4E,MAAAm/B,yBACA/jC,EAAA4P,IAAAoxB,YAAAhhC,EAAA4E,MAAAo/B,yBACA,gBAAAhkC,EAAAgsB,UACAja,EAAApP,MAAAgQ,EACAZ,EAAA/N,EAAA,EACA9F,EAAAyE,MAAAgQ,EACAzU,EAAAmE,OAAArC,EAAAsnB,YAAAjlB,OACAnE,EAAAyF,EAAA3D,EAAAsnB,YAAA3jB,EACAu6B,EAAAnsB,EAAA/N,EAAA+N,EAAApO,EAAAoO,EAAApP,MAAAoP,EAAA1P,QACA87B,EAAApsB,EAAA/N,EAAA+N,EAAApO,EAAAoO,EAAApP,MAAAoP,EAAA1P,QACArC,EAAA4P,IAAAkxB,UAAA9gC,EAAA4E,MAAAq/B,8BACAjkC,EAAA4P,IAAAoxB,YAAAhhC,EAAA4E,MAAAs/B,8BACAlkC,EAAAsnB,YAAAllB,WAAApC,EAAA22B,cAAAv0B,UACApC,EAAAsnB,YAAAllB,UAAA,GACApC,EAAAsnB,YAAAllB,SAAArE,GACAmhC,EAAAhhC,EAAA8B,EAAA44B,cAAAuL,aAAAnkC,EAAA22B,cAAAwN,aAAA,UAEiB,mBAAAnkC,EAAAgsB,UAAAhsB,EAAA22B,gBACjB5kB,EAAA1P,OAAA2G,EACA+I,EAAApO,EAAA,EACAzF,EAAAmE,OAAA2G,EACA9K,EAAAyE,MAAA3C,EAAAsnB,YAAA3kB,MACAzE,EAAAyF,EAAA,EACAzF,EAAA8F,EAAAhE,EAAAsnB,YAAAtjB,EACAk6B,EAAAnsB,EAAA/N,EAAA+N,EAAApO,EAAAoO,EAAApP,MAAAoP,EAAA1P,QACA87B,EAAApsB,EAAA/N,EAAA+N,EAAApO,EAAAoO,EAAApP,MAAAoP,EAAA1P,QACArC,EAAA4P,IAAAkxB,UAAA9gC,EAAA4E,MAAAq/B,8BACAjkC,EAAA4P,IAAAoxB,YAAAhhC,EAAA4E,MAAAs/B,8BACAlkC,EAAAsnB,YAAAmQ,kBAAAz3B,EAAA22B,cAAAc,iBACAz3B,EAAAsnB,YAAAmQ,iBAAA,GACAz3B,EAAAsnB,YAAAmQ,gBAAA53B,EAAAmB,QACAk+B,EAAAhhC,EAAA8B,EAAA44B,cAAA90B,YAAA9D,EAAA22B,cAAA7yB,YAAA,WAmPAsgC,GA1SApkC,EAAAu5B,kBACAv5B,EAAA4P,IAAAkxB,UAAA9gC,EAAA4E,MAAAy/B,uBACArkC,EAAA4P,IAAAoxB,YAAAhhC,EAAA4E,MAAA0/B,uBACAtkC,EAAA4P,IAAA20B,YAAAvkC,EAAA4E,MAAA4/B,2BACA7E,EAAAt+B,QAAA,SAAAlD,GACA+gC,EAAA/gC,EAAA,GAAAA,EAAA,MAEA6B,EAAA4P,IAAA20B,iBApmBA,WACA,IAAAE,EACA98B,EAAA3H,EAAA0E,UAAAowB,SACA52B,EAAA,EAAA8B,EAAA4E,MAAAmvB,mBACA/zB,EAAA4P,IAAAoxB,YAAAhhC,EAAA4E,MAAA8/B,qBACA1kC,EAAA4P,IAAAkxB,UAAA9gC,EAAA4E,MAAAovB,qBACArsB,EAAAqtB,cAAAhxB,EAAA8E,EAAA9I,EAAA4E,MAAAmvB,oBACApsB,EAAAotB,cAAApyB,MAAA3C,EAAA0E,UAAAgJ,iBACA1N,EAAA0E,UAAAS,WAAAnF,EAAA0E,UAAAqnB,aACApkB,EAAAutB,YAAAvxB,EAAAiF,EAAA5I,EAAA4E,MAAAmvB,oBACApsB,EAAAstB,YAAA5yB,OAAArC,EAAA0E,UAAA6I,kBACAvN,EAAA0E,UAAAU,UAAApF,EAAA0E,UAAA8Z,cACAxe,EAAA0E,UAAAK,uBACA/E,EAAA4P,IAAAowB,UAAAhgC,EAAA4E,MAAA+/B,yBACAzG,EAAAv2B,EAAAotB,cAAA/wB,EAAA2D,EAAAotB,cAAApxB,EAAAgE,EAAAotB,cAAApyB,MAAAzE,EAAAyJ,EAAAotB,cAAA1yB,QACA87B,EAAAx2B,EAAAotB,cAAA/wB,EAAA2D,EAAAotB,cAAApxB,EAAAgE,EAAAotB,cAAApyB,MAAAzE,EAAAyJ,EAAAotB,cAAA1yB,QACArC,EAAA4P,IAAAowB,UAAAhgC,EAAA4E,MAAAggC,kBACA5kC,EAAA0E,UAAA8wB,uBACA,aAAAvoB,KAAA6yB,EAAA9yB,WACAhN,EAAA4P,IAAAowB,UAAAhgC,EAAA4E,MAAAigC,sBAEAhH,EAAAl2B,EAAAqtB,cAAAhxB,EAAA2D,EAAAqtB,cAAArxB,EACAgE,EAAAqtB,cAAAryB,MAAAgF,EAAAqtB,cAAA3yB,OAAArC,EAAA4E,MAAAkgC,0BACA9kC,EAAA4P,IAAAovB,SACAh/B,EAAA4P,IAAAivB,QAEA4F,GAAA,EACAzkC,EAAAuF,aAAAutB,QAAAnrB,EAAAotB,eACA/0B,EAAAuF,aAAAutB,QAAAnrB,EAAAqtB,gBAEAh1B,EAAA0E,UAAAC,qBACA3E,EAAA4P,IAAAowB,UAAAhgC,EAAA4E,MAAA+/B,yBACAzG,EAAAv2B,EAAAstB,YAAAjxB,EAAA2D,EAAAstB,YAAAtxB,EAAAgE,EAAAstB,YAAAtyB,MAAAgF,EAAAstB,YAAA5yB,OAAAnE,GACAigC,EAAAx2B,EAAAstB,YAAAjxB,EAAA2D,EAAAstB,YAAAtxB,EAAAgE,EAAAstB,YAAAtyB,MAAAgF,EAAAstB,YAAA5yB,OAAAnE,GACA8B,EAAA0E,UAAAgxB,qBACA11B,EAAA4P,IAAAowB,UAAAhgC,EAAA4E,MAAAggC,kBACA,WAAA33B,KAAA6yB,EAAA9yB,WACAhN,EAAA4P,IAAAowB,UAAAhgC,EAAA4E,MAAAigC,sBAEAhH,EAAAl2B,EAAAutB,YAAAlxB,EAAA2D,EAAAutB,YAAAvxB,EAAAgE,EAAAutB,YAAAvyB,MACAgF,EAAAutB,YAAA7yB,OAAArC,EAAA4E,MAAAkgC,0BACA9kC,EAAA4P,IAAAovB,SACAh/B,EAAA4P,IAAAivB,QAEA4F,GAAA,EACAzkC,EAAAuF,aAAAutB,QAAAnrB,EAAAstB,aACAj1B,EAAAuF,aAAAutB,QAAAnrB,EAAAutB,cAEAuP,IAEAzkC,EAAA4P,IAAAoxB,YAAAhhC,EAAA4E,MAAAmgC,2BACA/kC,EAAA4P,IAAAowB,UAAAhgC,EAAA4E,MAAAogC,+BACAnH,EAAAl2B,EAAAwtB,OAAAnxB,EAAA2D,EAAAwtB,OAAAxxB,EAAAgE,EAAAwtB,OAAAxyB,MAAAgF,EAAAwtB,OAAA9yB,OAAA,GACArC,EAAA4P,IAAAovB,SACAh/B,EAAA4P,IAAAivB,OACA7+B,EAAAuF,aAAAutB,QAAAnrB,EAAAwtB,SAk1BA8P,GACA9F,GACAn/B,EAAAgC,QAAA,GAlPAhC,EAAA4P,IAAAkxB,UAAA9gC,EAAA4E,MAAAsgC,gBACAllC,EAAA4P,IAAAoxB,YAAAhhC,EAAA4E,MAAAugC,gBACAhH,EAAA,IAAAn+B,EAAA2C,MAAA3C,EAAAqC,QA8JA,WAEA,IAAAjE,EADA4B,EAAA4P,IAAAmwB,QAEA//B,EAAAE,WAAAklC,iBAAAplC,EAAAE,WAAAgJ,SACA,IAAAszB,EAAAx7B,SAAoDw7B,EAAA5X,EAAA,EAAA+X,EAAA,MACpDH,EAAA6I,MACA7I,EAAA1J,QAAA5D,YAAAC,MAAAvvB,IAEAI,EAAAE,WAAAgJ,OAIAlJ,EAAA4P,IAAAC,KAAA7P,EAAA4E,MAAA0gC,WACAlnC,MACAmnC,MAAA/I,EAAAtrB,OAAA,SAAAY,EAAAC,GACA,OAAAD,EAAAC,GACiB,GAAApR,KAAA0G,IAAAq1B,EAAAF,EAAAx7B,SAAAksB,QAAA,GACjB9uB,EAAAonC,UAAAhJ,EAAA,GAAAtP,QAAA,GACA9uB,EAAAqnC,mBAn5BA,WACA,IAAA9yB,EAAA,EACA9S,EAAAG,EAAAe,YACAiD,EAAA,EACAzE,EAAAoB,KAAA0G,IAAArH,EAAAulB,aAAA1lB,EAAAmB,QAGA,IADA,EACAgD,EAAAzE,GACAM,EAAAmE,GACAuL,OACA,EAEAoD,GAAA3S,EAAAiE,gBAAAD,GAEAA,GAAA,EAEA,OAAA2O,EAm4BA+yB,GACAtnC,EAAAunC,WAAAnnC,OAAA0E,KAAAlD,EAAAo9B,gBAAAp8B,OACA5C,EAAAu4B,cAAA,OAAA32B,EAAA22B,gBAAkE7yB,YAAA,IAAeA,YAAA,SAAA9D,EAAA22B,gBAAkDv0B,SAAA,IAAYA,SAC/IhE,EAAAw6B,cAAA,OAAA54B,EAAA44B,gBAAkE90B,YAAA,IAAeA,YAAA,SAAA9D,EAAA44B,gBAAkDx2B,SAAA,IAAYA,SAC/IhE,EAAAkT,MAAAtR,EAAAsR,MACAlT,EAAA+zB,WAAAnyB,EAAAmyB,WACA/zB,EAAAg0B,WAAApyB,EAAAoyB,WACAh0B,EAAA8zB,eAAAlyB,EAAAkyB,eACA9zB,EAAAoyB,YAAAxwB,EAAAwwB,YACApyB,EAAAyvB,QAAA,QAAA7tB,EAAAgyB,gBAA6DruB,EAAA,IAAKA,EAAA,SAAA3D,EAAAiyB,iBAAyCtuB,EAAA,IAAKA,EAChHvF,EAAAsG,UAAA1E,EAAA0E,UAAAuL,WACA7R,EAAAwnC,YAAA,MAAA5lC,EAAA+lB,gBAAA,QAAA/lB,EAAAsH,eACAlJ,EAAAynC,YAAA,MAAA7lC,EAAAgmB,gBAAA,QAAAhmB,EAAA8lB,eACA1nB,EAAA0nC,aAAA,MAAA9lC,EAAA6T,iBAAA,QAAA7T,EAAA8T,gBACA1V,EAAAovB,WAAA,MAAAxtB,EAAAwtB,WAAAxpB,EAAA,QAAAhE,EAAAwtB,WAAA7pB,EACAvF,EAAAqvB,eAAA,MAAAztB,EAAAytB,eAAAzpB,EAAA,QAAAhE,EAAAytB,eAAA9pB,EACAvF,EAAAmvB,gBAAA,MAAAvtB,EAAAutB,gBAAAvpB,EAAA,QAAAhE,EAAAutB,gBAAA5pB,EACAvF,EAAA2nC,SAAA,MAAA/lC,EAAAqvB,KAAA,QAAArvB,EAAAuvB,KACAnxB,EAAA4nC,UAAA,MAAAhmC,EAAA+uB,MAAA,QAAA/uB,EAAAivB,MACA7wB,EAAAo0B,cAAAxyB,EAAAwyB,cACAp0B,EAAAisB,oBAAArqB,EAAAqqB,oBACArqB,EAAAqqB,oBAAArmB,EAAA,KAAAhE,EAAAqqB,oBAAA1mB,EAAA,GACAvF,EAAA6nC,KAAA,MAAAjmC,EAAA2C,MAAA,QAAA3C,EAAAqC,OACAjE,EAAAgoB,MAAA,MAAApmB,EAAAomB,MAAApiB,EAAA,QAAAhE,EAAAomB,MAAAziB,EACAvF,EAAA8nC,MAAAlmC,EAAAmwB,WACA,MAAAnwB,EAAAmwB,WAAAnsB,EAAA,QAAAhE,EAAAmwB,WAAAxsB,EAAA,GACAvF,EAAA02B,SAAA90B,EAAAuF,aAAAvE,OACA5C,EAAA0O,SAAA9M,EAAA8M,SACA1O,EAAA4tB,SAAAhsB,EAAAgsB,SACAhsB,EAAAsnB,cACAlpB,EAAA0F,YAAA9D,EAAAsnB,YAAAxjB,YACA1F,EAAAgE,SAAApC,EAAAsnB,YAAAllB,SACAhE,EAAAq5B,gBAAAz3B,EAAAsnB,YAAAmQ,gBACAr5B,EAAA+lC,aAAAnkC,EAAAsnB,YAAA6c,aACA/lC,EAAA4O,QAAAhN,EAAAsnB,YAAAta,QACA5O,EAAA2O,YAAA/M,EAAAsnB,YAAAva,YACA3O,EAAAwG,MAAA5E,EAAAsnB,YAAA1iB,MACAxG,EAAAoF,KAAAxD,EAAAsnB,YAAA9jB,MAEAxD,EAAA4P,IAAAuQ,UAAA,QACAngB,EAAA4P,IAAAowB,UAAAhgC,EAAA4E,MAAAuhC,qBACAjI,EAAA,IAAAl+B,EAAA2C,MAAA3C,EAAAqC,QACA7D,OAAA0E,KAAA9E,GAAAiD,QAAA,SAAAhC,EAAAyB,GACA,IAAA5C,EAAAmB,EAAA,KAAAjB,EAAAiB,GAEAW,EAAA4P,IAAAowB,UAAAhgC,EAAA4E,MAAAwhC,WACAhI,EAAAlgC,EAAAyU,EAAA,IAAA3S,EAAAE,WAAAklC,gBAAA,QAFA,GAEAtkC,KAEAd,EAAA4P,IAAA+wB,WAzDA3gC,EAAA4P,IAAA+wB,UA4EA0F,GA9HA,WACA,GAAArmC,EAAAE,WAAAklC,gBAAA,CACA,IAAAkB,EAAA,IACAC,EAAAvmC,EAAA2C,MAAA2jC,EAAAtmC,EAAA4E,MAAAC,eAAA,EAAA7E,EAAA4E,MAAAovB,qBACAwS,EAAA59B,EACA69B,EAAA,IACA,IAAA5J,EAAA77B,SAAuD67B,EAAAjY,EAAA,EAAA+X,EAAA,aAAoE,eAC3H,IAAAG,EAAA97B,SAAoD87B,EAAAlY,EAAA,EAAA+X,EAAA,aAAiE,eACrH,IAAAC,EAAA57B,SAA+C47B,EAAAhY,EAAA,EAAA+X,EAAA,MAC/C38B,EAAA4P,IAAAkxB,UAAA,GAUA9gC,EAAA4P,IAAAuQ,UAAA,OACAngB,EAAA4P,IAAAC,KAAA7P,EAAA4E,MAAA0gC,UACAtlC,EAAA4P,IAAAowB,UAAAhgC,EAAA4E,MAAA8hC,yBACAxI,EAAAqI,EAAAC,EAAAF,EAAAG,KACA,gBAAA5J,EAAA,EAAA78B,EAAA0E,UAAA8Z,aAAAxe,EAAA4E,MAAA+hC,wBAAA,IACA,eAAA9J,EAAA,EAAA78B,EAAA0E,UAAAqnB,YAAA/rB,EAAA4E,MAAAgiC,uBAAA,IACA,cAAApK,OAAAz8B,EAAA,IAAAC,EAAA4E,MAAAiiC,uBAAA,IACA,WAAAjK,OAAA78B,EAAA,KAAAC,EAAA4E,MAAAkiC,oBAAA,IACA,YAAAhK,EAAA,MAAA98B,EAAA4E,MAAAmiC,qBAAA,IACA,YAAAjK,EAAA,MAAA98B,EAAA4E,MAAAoiC,qBAAA,IACA3lC,QAAA,SAAAvD,EAAAgD,GACAhD,EAAA8D,KAAAd,GACAmmC,EAAA7mC,MAAA,KAAAtC,KAEAkC,EAAA4P,IAAAowB,UAAAhgC,EAAA4E,MAAA8hC,yBACA9J,EAAAyI,MACAzI,EAAA9J,QAAA9yB,EAAAuF,aAAAvE,QACA67B,EAAAwI,MACAxI,EAAA/J,SAAA9yB,EAAA0E,UAAAU,UAAApF,EAAA0E,UAAAS,aACA23B,EAAAuI,MACAvI,EAAAhK,SAAA9yB,EAAAuvB,KAAAvvB,EAAAqvB,OA7BA,SAAA4X,EAAA5oC,EAAA6oC,EAAAC,EAAApjC,EAAAsT,EAAA+vB,EAAAhlC,GACA,IAAAkL,GA3uCA,SAAAqF,EAAA3J,EAAAhF,EAAAL,EAAAujC,EAAAC,EAAApjC,EAAAsT,EAAA+vB,GACA,IAAAtpC,EAAA6U,EAAAu0B,EAAAlmC,OACApC,EAAAoK,EAAAjF,EACAC,GAAAhE,EAAA6T,iBACAlQ,GAAA3D,EAAA8T,gBACA9T,EAAA4P,IAAAmuB,YACA/9B,EAAA4P,IAAAvE,OAAArH,EAAAL,EAAAqF,GACAk+B,EAAA7lC,QAAA,SAAA9B,GACA,IACA6/B,EACAC,EAFA3pB,OAAA3V,IAAAonC,EAAA5nC,IAAA4nC,GAGAC,IACA1xB,EAAA/U,KAAAovB,IAAAra,IAEA0pB,EAAAp7B,EAAAlG,EACAuhC,EAAA17B,EAAAqF,EAAA0M,EAAA9W,EACAoB,EAAA4P,IAAAouB,OAAAoB,EAAAC,GACAr7B,GAAAlG,IAEAkC,EAAA4P,IAAAvE,OAAArH,EAAA2O,EAAAhP,EAAAqF,GACAhJ,EAAA4P,IAAAoxB,YAAA3pB,EACArX,EAAA4P,IAAAovB,SAutCAqI,CAAAf,EAAAG,EAAAF,EAAAC,EAAAU,EAAAC,EAAApjC,EAAAsT,EAAA+vB,GACApnC,EAAA4P,IAAAowB,UAAA3oB,EACA6mB,EAAA,EAAAqI,EAAAC,EAAA,KAAApkC,EAAA,KACApC,EAAA4P,IAAAowB,UAAAhgC,EAAA4E,MAAA0iC,wBACAh6B,OAAAvN,IAAAonC,EAAAD,EAAA,GAAAC,GAAAD,EAAA,GACA9I,EAAA//B,EAAA,KAAA6Q,MAAA5B,GAAA,EAAAA,GAAA4f,QAAA,MAAAqZ,EAAAC,EAAA,MAAApkC,IA8GAmlC,GACAvnC,EAAA6F,cAAA,iBACA7F,EAAA4P,IAAA+wB,UAl0BA,SAAA6G,EAAAljC,EAAAmjC,EAAAC,EAAAC,GACAA,MAA8C3jC,EAAA,EAAAL,EAAA,GAC9CW,EAAAqJ,gBAAA,IACArJ,EAAA0J,aACAhO,EAAA4F,WAAAtB,EAAAlC,UAAAulC,EAAAhkC,KACA,IAAA3D,EAAA4F,WAAAtB,EAAAlC,UAAAulC,EAAAhkC,GAAA8C,QAAAnC,EAAAR,aAAA6jC,EAAA3jC,KACAhE,EAAA4F,WAAAtB,EAAAlC,SAAA,EAAAulC,EAAAhkC,KACA,IAAA3D,EAAA4F,WAAAtB,EAAAlC,SAAA,EAAAulC,EAAAhkC,GAAA8C,QAAAnC,EAAAR,aAAA6jC,EAAA3jC,IACA,IAAAM,EAAAlC,UACAkC,EAAAusB,WACA4W,EAAA7lC,MAAA0C,EAAA,MACAA,EAAAojC,EAAA,gBACApjC,EAAAojC,EAAA,gBAEA1nC,EAAA4F,WAAAtB,EAAAlC,SAAA,GAAAulC,EAAAhkC,KACA,IAAA3D,EAAA4F,WAAAtB,EAAAlC,SAAA,GAAAulC,EAAAhkC,GAAA8C,QAAAnC,EAAAR,aAAA6jC,EAAA3jC,KACAyjC,EAAA7lC,MAAA0C,EAAA,MACAA,EAAAojC,EAAA,mBACApjC,EAAAojC,EAAA,gBAEA1nC,EAAA4F,WAAAtB,EAAAlC,UAAAulC,EAAAhkC,IAAA,IAAAW,EAAAR,cACA,IAAA9D,EAAA4F,WAAAtB,EAAAlC,UAAAulC,EAAAhkC,GAAA8C,QAAAnC,EAAAR,YAAA,EAAA6jC,EAAA3jC,KACAyjC,EAAA7lC,MAAA0C,EAAA,MACAA,EAAAojC,EAAA,iBACApjC,EAAAojC,EAAA,gBAEA1nC,EAAA4F,WAAAtB,EAAAlC,UAAAulC,EAAAhkC,IAAAW,EAAAR,cAAAjE,EAAAmB,SACA,IAAAhB,EAAA4F,WAAAtB,EAAAlC,UAAAulC,EAAAhkC,GAAA8C,QAAAnC,EAAAR,YAAA,GAAA6jC,EAAA3jC,KACAyjC,EAAA7lC,MAAA0C,EAAA,MACAA,EAAAojC,EAAA,kBACApjC,EAAAojC,EAAA,iBAIA,SAAAhH,EAAAtiC,EAAAsjC,EAAAt/B,GACA,gBAAAiB,EAAAukC,EAAAC,GACA,GAAAxkC,EAAAkM,OAAwC,SACxC,IACAuV,EACAxgB,EAeAoR,EAjBAoyB,EAAAzkC,EAAAuB,OAAA,OAGAisB,EAAA,aAAA5jB,KAAA66B,GACA75B,EAAA,aAAAhB,KAAA66B,GACA95B,EAAA,kBAAA85B,EACA55B,EAAA,qBAAA45B,EACA9N,EAAAh6B,EAAA4F,WAAA87B,KAAA,IAAA1hC,EAAA4F,WAAA87B,GAAAj7B,QAAAohC,GACAE,EAAA/nC,EAAA0lB,OAAAtjB,WAAAs/B,GAAA1hC,EAAA0lB,OAAA5hB,cAAA+jC,EACAG,EAAAhoC,EAAAyF,WAAArD,WAAAs/B,GAAA1hC,EAAAyF,WAAA3B,cAAA+jC,EACA9kB,EAAA,wBAAA+kB,EACAG,EAAA7pC,IAAAiF,EAAAhF,WAAA0B,EACAwO,EAAA,oBAAAlL,EAAAG,KACA0kC,IAAAloC,EAAAkE,OAAA3B,KAAAvC,EAAAyF,WAAArD,YAAAs/B,GACA1hC,EAAAkE,OAAAtB,QAAA5C,EAAAyF,WAAA3B,eAAA8jC,IACA,IAAAC,IAAA,IAAAnG,KACA1zB,EAAA,gDAEAtD,EAAA1K,EAAAuR,WAAAlO,EAAAG,MAAA,UACA2kC,EAAA,EACAC,EAAA,EACAh3B,EAAApR,EAAAsC,MAAAM,QAAAglC,IAAAvkC,EAAAV,MACAgN,GACA5Q,MAAAkpC,EACA3mC,IAAAlD,EACAiF,UAsFA,GApFA0f,IACA3R,EAAAuB,EAAA3O,QAGAjE,IAAAqR,IACAA,EAAApR,EAAA4E,MAAAwM,WAEAA,GAAApR,EAAAsR,MACAtN,EAAAoN,EAAApR,EAAA4E,MAAAsI,gBAAA,IACAlJ,GAAAoN,EAAApR,EAAA4E,MAAAsI,iBAEA86B,GAAA,eAAAF,IACAA,EAAA,eAEA,IAAA9nC,EAAAylB,YAAAhf,QAAArE,IAAAyuB,GACA7wB,EAAAylB,YAAA7jB,KAAAQ,GAEAsT,EAAA1V,EAAA6F,cAAA,kBAAA8J,GACAyvB,EAAAp7B,EACAq7B,EAAA17B,EACA,eAAAmkC,GACA1I,EAAA,EACAC,EAAA,GACqBrxB,EACrBoxB,EAAA,EACqBvO,IACrBwO,EAAA,IAEA/6B,GACAd,KAAA+K,EAAA,uBAAAlL,EAAAG,KACAoB,MAAAkjC,EACAx+B,SAAA,uBACAtF,EAAAo7B,EACAz7B,EAAA07B,EACAgJ,YAAAroC,EAAA4E,MAAAkjC,EAAA,kBAAA9nC,EAAAsR,MACAg3B,oBAAAtoC,EAAA4E,MAAAkjC,EAAA,uBACAS,kBAAAvoC,EAAA4E,MAAAkjC,EAAA,qBACAU,aAAAxoC,EAAA4E,MAAAkjC,EAAA,mBAAA9nC,EAAAsR,MACAm3B,YAAAzoC,EAAA4E,MAAAkjC,EAAA,kBAAA9nC,EAAAsR,MACAo3B,cAAA1oC,EAAA4E,MAAAkjC,EAAA,oBAAA9nC,EAAAsR,MACAq3B,eAAA3oC,EAAA4E,MAAAkjC,EAAA,qBAAA9nC,EAAAsR,MACAmK,WAAAzb,EAAA4E,MAAAgkC,eACAlxB,WAAA1X,EAAA4E,MAAAikC,eACAC,YAAA9oC,EAAA4E,MAAAmkC,gBACAr/B,UAAA1J,EAAA8T,gBAAAurB,EACA51B,WAAAzJ,EAAA6T,iBAAAurB,EACAh6B,UAAApF,EAAA0E,UAAAU,UACAD,WAAAnF,EAAA0E,UAAAS,WACA6iC,UAAAE,EACAH,UACA/N,WACAr3B,MAAAyO,EACA/O,OAAAiG,EACAkB,YAAA4H,EACA7H,aAAAjB,EACAc,WAAApJ,EAAAwB,KAAA4H,WACAO,aAAA3J,EAAAwB,KAAA4H,WACAhI,KAAAhD,EACA6P,WACA4iB,WACA3iB,iBACA6U,wBACA/U,cACA0pB,UACAr0B,SACAS,YAAA+jC,EACAzlC,SAAAs/B,EACAjK,gBAAAmQ,EACAzD,aAAA/hC,EACAmM,SACAT,UAAAS,IAAAN,IAAA4iB,EACAjF,QAAA5rB,EAAAE,WAAA7B,MAAA,IAAA+D,EAAA,IAAAwlC,EACAv+B,WAAArJ,EAAAwB,KACAmU,UAAA,GACAuyB,eACAnpC,MAAA8xB,IAAA7iB,EAAA3K,EAAA4L,OAAA5L,EAAAhF,KAAA4pC,IAEAe,qBAAA1kC,EAAA+jC,WAAA/jC,EAAAoT,WAAApT,EAAAwkC,YACAxkC,EAAA2kC,YAAA3kC,EAAA3B,MAAA2B,EAAAokC,aAAApkC,EAAAkkC,YACAlkC,EAAA4kC,aAAA5kC,EAAAjC,OAAAiC,EAAAmkC,WAAAnkC,EAAAqkC,cACAh5B,EAAArL,OACAA,EAAA6kC,WAAA7kC,EAAAusB,SAAA7wB,EAAAsC,MAAAC,MAAA,GAAA+8B,EACAh7B,EAAA8kC,UAAA9kC,EAAAusB,SAAA7wB,EAAAsC,MAAAM,QAAAmG,WAAA/I,EAAAsC,MAAAM,QAAAglC,GACA5nC,EAAAuF,aAAAutB,QAAAxuB,IACAtE,EAAA6F,cAAA,mBAAA8J,GAAA,CA+CA,GA9CA3P,EAAA4P,IAAAowB,UAAAhgC,EAAA4E,MAAAkjC,EAAA,mBACA9nC,EAAA4P,IAAAoxB,YAAAhhC,EAAA4E,MAAAkjC,EAAA,eACA9nC,EAAA4P,IAAAkxB,UAAA9gC,EAAA4E,MAAAkjC,EAAA,eACAC,IACA/nC,EAAA4P,IAAAowB,UAAAhgC,EAAA4E,MAAAkjC,EAAA,wBACA9nC,EAAA4P,IAAAoxB,YAAAhhC,EAAA4E,MAAAkjC,EAAA,qBAEA9N,IACAh6B,EAAA4P,IAAAowB,UAAAhgC,EAAA4E,MAAAkjC,EAAA,2BACA9nC,EAAA4P,IAAAoxB,YAAAhhC,EAAA4E,MAAAkjC,EAAA,wBAEAI,IACAloC,EAAA4P,IAAAowB,UAAAhgC,EAAA4E,MAAAsjC,EAAA,oBAEAloC,EAAA6F,cAAA,aAAA8J,GACArL,EAAAiK,SACAjK,EAAAjC,SAAAi9B,IACAh7B,EAAAjC,OAAAi9B,GAAAt/B,EAAA4E,MAAAykC,wBACAlK,GAAA,GAEA76B,EAAA3B,MAAA3C,EAAAsC,MAAAM,QAAAglC,IAAA5nC,EAAA4E,MAAA0kC,wBAEA5R,IAAApzB,EAAA0J,cACA1J,EAAAjC,OAAArC,EAAAsC,MAAAC,KAAAH,IAAApC,EAAA4E,MAAA0D,YAEAhE,EAAAiK,SACA2vB,EAAAkB,EAAAC,EAAA/6B,EAAA3B,MAAA2B,EAAAjC,QACA87B,EAAAiB,EAAAC,EAAA/6B,EAAA3B,MAAA2B,EAAAjC,SAEArC,EAAA4P,IAAAmwB,OACAlC,EAAAv5B,EAAAN,EAAAM,EAAAX,EAAAW,EAAA3B,MAAA2B,EAAAjC,OAAA,GACArC,EAAA4P,IAAAmD,OACA/S,EAAA6F,cAAA,kBAAA8J,GACArL,EAAAjC,SAAAiG,GAAAovB,IAAApzB,EAAA0J,cACAhO,EAAAsC,MAAAC,KAAAsuB,GAAA,EAAAzuB,GAAAkC,EAAAjC,OACA88B,GAAA,GAEA76B,EAAA3B,QAAAyO,IACApR,EAAAsC,MAAAM,QAAAglC,GAAAtjC,EAAA3B,MACAw8B,GAAA,GAEAnxB,GAAAhO,EAAAE,WAAAoQ,OACAtQ,EAAA6F,cAAA,kBAAA8J,KACAy4B,EA5nBA,SAAA9jC,EAAAN,EAAAL,GACA,IAAA4lC,EAAAvpC,EAAA4E,MAAAuyB,mBAAAn3B,EAAAsR,MACAk4B,EAAAxpC,EAAA4E,MAAA6L,qBAAAzQ,EAAAsR,MACAm4B,EAAAzpC,EAAA4E,MAAA4L,oBAAAxQ,EAAAsR,MACAo4B,EAAA1pC,EAAA4E,MAAA2L,eAAAvQ,EAAAsR,MACAq4B,EAAA3pC,EAAA4E,MAAAsyB,gBAAAl3B,EAAAsR,MAqBA,OApBAtN,GAAAhE,EAAA6T,iBACAlQ,GAAA3D,EAAA8T,gBACA9T,EAAA4P,IAAAowB,UAAAhgC,EAAA4E,MAAAglC,eACA5pC,EAAA4P,IAAAoxB,YAAAhhC,EAAA4E,MAAAilC,qBACA7pC,EAAA4P,IAAAmuB,YACA/5B,GAAAylC,EACA9lC,GAAA4lC,EACAvpC,EAAAkI,aAAA5D,EAAAlC,WACApC,EAAA4P,IAAAvE,OAAArH,EAAAL,GACA3D,EAAA4P,IAAAouB,OAAAh6B,EAAA0lC,EAAA/lC,GACA3D,EAAA4P,IAAAouB,OAAAh6B,EAAA,GAAA0lC,EAAA/lC,EAAAgmC,GACA3pC,EAAA4P,IAAAvE,OAAArH,EAAAL,KAEA3D,EAAA4P,IAAAouB,OAAAh6B,EAAAL,GACA3D,EAAA4P,IAAAouB,OAAAh6B,EAAA2lC,EAAAhmC,EAAA,GAAA+lC,GACA1pC,EAAA4P,IAAAouB,OAAAh6B,EAAAL,EAAA+lC,GACA1pC,EAAA4P,IAAAouB,OAAAh6B,EAAAL,IAEA3D,EAAA4P,IAAAovB,SACAh/B,EAAA4P,IAAAivB,OACA4K,EAAAC,EAAAF,EAkmBAM,CAAAxlC,EAAAtE,EAAA4E,MAAAkjC,EAAA,eAAAzI,KAGAr/B,EAAAE,WAAA6pC,gBAAA/7B,IACAA,EACA,GAAA1J,EAAAiK,SAAAvO,EAAA6F,cAAA,uBAAA8J,GAAA,CACA,IAAA3P,EAAAiI,WAAA3D,EAAAsnB,QAAA,CAUA,IANA9G,EAAA9kB,EAAA8kB,oBACAzmB,KAAA2B,EAAAE,WAAAiJ,eAAA7E,EAAAsnB,YAAA7rB,EACA+kB,EAAAklB,WAAA,EACAllB,EAAA1b,WAAA9E,EACAwgB,EAAA1jB,KAAA6mC,EACAt4B,EAAAmV,qBACA9kB,EAAA6F,cAAA,uBAAA8J,GAAqF,OACrF3P,EAAAiI,WAAA3D,EAAAsnB,QAAA5rB,EAAA4J,WAAAkb,GACA9kB,EAAAsC,MAAAC,KAAAH,GACApC,EAAAsC,MAAAC,KAAAH,IAAApC,EAAA4E,MAAAqlC,eACA9K,GAAA,EAEA76B,EAAAyyB,KAAA/2B,EAAAiI,WAAA3D,EAAAsnB,QACAtnB,EAAAyyB,KAAA3tB,WAAA9E,EACAA,EAAAyyB,KAAAltB,SAAA,EACAvF,EAAAyyB,KAAAv0B,OACAxC,EAAA6F,cAAA,iBAAA8J,QACyBrL,EAAAiK,SACzBvO,EAAAiI,WAAA3D,EAAAsnB,UACA5rB,EAAAiI,WAAA3D,EAAAsnB,QAAAxiB,WAAAG,aAAA,GAEAsnB,GAAA7wB,EAAA2K,UAAAtH,EAAAhF,OACA2B,EAAA6F,cAAA,qBAAA8J,KACAw4B,EAzrBA,SAAAnkC,EAAAL,GACA,IAAA4lC,EAAAvpC,EAAA4E,MAAAslC,kCAAAlqC,EAAAsR,MACAm4B,EAAAzpC,EAAA4E,MAAAulC,mCAAAnqC,EAAAsR,MACAk4B,EAAAxpC,EAAA4E,MAAAwlC,oCAAApqC,EAAAsR,MACAo4B,EAAA1pC,EAAA4E,MAAAylC,8BAAArqC,EAAAsR,MACAq4B,EAAA3pC,EAAA4E,MAAA0lC,+BAAAtqC,EAAAsR,MAqBA,OApBAtN,GAAAhE,EAAA6T,iBACAlQ,GAAA3D,EAAA8T,gBACA9T,EAAA4P,IAAAowB,UAAAhgC,EAAA4E,MAAA2lC,8BACAvqC,EAAA4P,IAAAoxB,YAAAhhC,EAAA4E,MAAA4lC,oCACAxqC,EAAA4P,IAAAmuB,YACA/5B,GAAAylC,EACA9lC,GAAA4lC,EACA,QAAAvpC,EAAAolB,gBACAplB,EAAA4P,IAAAvE,OAAArH,EAAAL,GACA3D,EAAA4P,IAAAouB,OAAAh6B,EAAA0lC,EAAA/lC,GACA3D,EAAA4P,IAAAouB,OAAAh6B,EAAA,GAAA0lC,EAAA/lC,EAAAgmC,GACA3pC,EAAA4P,IAAAvE,OAAArH,EAAAL,KAEA3D,EAAA4P,IAAAouB,OAAAh6B,EAAAL,EAAAgmC,GACA3pC,EAAA4P,IAAAouB,OAAAh6B,EAAA0lC,EAAA/lC,EAAAgmC,GACA3pC,EAAA4P,IAAAouB,OAAAh6B,EAAA,GAAA0lC,EAAA/lC,GACA3D,EAAA4P,IAAAouB,OAAAh6B,EAAAL,EAAAgmC,IAEA3pC,EAAA4P,IAAAovB,SACAh/B,EAAA4P,IAAAivB,OACA4K,EAAAC,EAAAF,EA+pBAiB,CAAArL,EAAAp/B,EAAA4E,MAAAkjC,EAAA,oBAGA9nC,EAAA4P,IAAAowB,UAAAhgC,EAAA4E,MAAAkjC,EAAA,SACAC,IACA/nC,EAAA4P,IAAAowB,UAAAhgC,EAAA4E,MAAAkjC,EAAA,eAEA9N,IACAh6B,EAAA4P,IAAAowB,UAAAhgC,EAAA4E,MAAAkjC,EAAA,kBAEAI,IACAloC,EAAA4P,IAAAowB,UAAAhgC,EAAA4E,MAAAsjC,EAAA,UAEA5jC,EAAAiM,eAAA63B,EACA9jC,EAAAomC,kBAAAvC,OAIApoC,KAFA2V,OAAA3V,IAAA2V,IAAAhL,EACAA,EAAAiF,GAAA,KACAjF,IACAgL,EAAA,GACA7K,QAAAC,KAAA,mCACAzH,EAAAG,KAAA,wBAEAc,EAAA44B,qBAAAn9B,IAAA2V,GAAA,OAAAA,IAAA,IAAAzF,WACAjQ,EAAAmD,oBAAApD,IAAAC,EAAAmD,cAAAuS,IAAAmb,IACAvsB,EAAA44B,eAAAl9B,EAAAE,WAAAyqC,iBAAAj1B,GAEA1V,EAAA4P,IAAAC,KAAA7P,EAAA4E,MAAAkjC,EAAA,cAAA9nC,EAAAsR,MAAA,MAAAtR,EAAA4E,MAAAkjC,EAAA,YACA9nC,EAAA6F,cAAA,aAAA8J,KACArL,EAAA+5B,KAphBA,SAAA/5B,EAAAsmC,GACA,IAAAtmC,EAAA44B,eACA,OAAwB2N,QAAUloC,MAAA,EAAA5D,MAAA,KAAoB4D,MAAA,EAAAN,OAAAiC,EAAA0kC,sBAEtD,IAEAhlC,EACA8mC,EAMAC,EAEAC,EACAC,EACAC,EAEAC,EAXAC,EAAA9mC,EAAA44B,eAAApU,MAAA8hB,GACAS,EAAA/mC,EAAA0kC,qBACA6B,KAEAS,EAAA,WAAAtrC,EAAA4E,MAAAgkC,eAEA2C,EAAAvrC,EAAAE,WAAAsrC,aAMAC,GACA9oC,MAAA,EACA5D,MAAA,IAEA2sC,EAAAJ,EAAAhnC,EAAA4kC,aAAA5kC,EAAA0kC,qBAGA,IAFA6B,EAAAjpC,KAAA6pC,GACAV,EAAA/qC,EAAA4P,IAAAG,YAAA,IAAAw7B,GAAA5oC,MACAqB,EAAA,EAAuBA,EAAAonC,EAAApqC,OAAkBgD,GAAA,GACzC8mC,EAAAM,EAAApnC,GACA,IAAA2nC,EAAA3rC,EAAA4P,IAAAG,YAAA+6B,EAAAF,GACA,GAAAa,EAAA9oC,MAAAgpC,EAAAhpC,MAAAooC,EAAAzmC,EAAA2kC,YACAwC,EAAA1sC,OAAA+rC,EAAAF,EACAa,EAAA9oC,OAAAgpC,EAAAhpC,WAOA,WAAAsK,KAAA69B,IAAAxmC,EAAA2kC,YAAA0C,EAAAhpC,MACAyoC,EAAAjqC,OAAA6C,EAAA,EAAA8mC,EAAAhiB,MAAA,YAAAgiB,EAAAhiB,MAAA,SACA9kB,GAAA,MAFA,CAcA,GATAynC,GACA9oC,MAAAgpC,EAAAhpC,MACA5D,MAAA+rC,EAAAF,GAEA,IAAA5mC,IACA6mC,MACAjpC,KAAA6pC,IAEAJ,GAAA/mC,EAAA0kC,sBACA0C,EAAA,CACA,OAAAb,EAAA7pC,OAA6C,MAG7C,GAFAgqC,EAAA,GACAG,EAAAN,IAAA7pC,OAAA,IACA2B,MAAA2B,EAAA2kC,aAAA,IAAAmC,EAAApqC,OAAsF,MAEtF,IADAkqC,EAAAC,EAAApsC,MAAA+rC,OACA/qC,GAAAkrC,KAAA3mC,EAAA2kC,aAAA+B,EAAAE,EAAAlqC,QACAiqC,EAAAjrC,EAAA4P,IAAAG,YAAAm7B,EAAAK,GAAA5oC,MACAuoC,IAAA9f,UAAA,EAAA8f,EAAAlqC,OAAAgqC,GAGAE,GAAAK,EACAJ,EAAApsC,MAAAmsC,EACAC,EAAAxoC,MAAAsoC,EACA,MAEAjnC,EAAA,GACA6mC,EAAAjpC,KAAA6pC,IAGA,OACAZ,QACAloC,MAvEA,EAwEAN,OAAAiC,EAAA0kC,qBAAA6B,EAAA7pC,QAwcA4qC,CAAAtnC,EAAA,MAEAtE,EAAA6F,cAAA,aAAA8J,KACArL,EAAAqR,WAAA,SAAAtS,EAAAG,KACAw5B,EAAA14B,GAzcA,SAAAA,GACAA,EAAA+5B,KAAAwM,MAAA7pC,OAAA,IAEAgD,EACAynC,EAFAziC,EAAA1E,EAAA+jC,WAAA/jC,EAAAoT,WAGA4zB,EAAA,WAAAtrC,EAAA4E,MAAAgkC,eACAyC,EAAA,EACA,IAAArnC,EAAA,EAAuBA,EAAAM,EAAA+5B,KAAAwM,MAAA7pC,OAA4BgD,GAAA,GACnDynC,EAAAnnC,EAAA+5B,KAAAwM,MAAA7mC,GACA,IAAA6nC,EAAAlrC,KAAAoD,IAAA,IAAAO,EAAAjC,QAAAipC,EAAAhnC,EAAA+5B,KAAAh8B,OAAAiC,EAAA0kC,uBAAA,GAAAhgC,EACA8iC,EAAAxnC,EAAAkkC,YAAAlkC,EAAAiM,eAAAjM,EAAAomC,kBACA,UAAApmC,EAAAgkC,oBACAwD,EAAAxnC,EAAAkkC,YAAAlkC,EAAA2kC,YAAAwC,EAAA9oC,MACiB,WAAA2B,EAAAgkC,sBACjBwD,EAAAxnC,EAAAkkC,aAAAlkC,EAAA2kC,YAAA3kC,EAAAokC,cAAA,EAAA+C,EAAA9oC,MAAA,GAEA,QAAA2B,EAAAikC,kBACAsD,EAAAvnC,EAAA0kC,qBACiB,WAAA1kC,EAAAikC,oBACjBsD,EAAAvnC,EAAAjC,OAAAiC,EAAAqkC,cAAArkC,EAAA+5B,KAAAh8B,QAEAopC,EAAAppC,OAAA2G,EAAA1E,EAAAwkC,YACA2C,EAAAhiC,WAAAqiC,EACAL,EAAA/hC,UAAAmiC,EACAJ,EAAAznC,EAAAM,EAAAN,EAAA8nC,EACAL,EAAA9nC,EAAAW,EAAAX,EAAA0nC,EAAAQ,EACAR,GAAAI,EAAAppC,OACA+7B,EAAAqN,EAAA1sC,MAAA0sC,EAAAznC,EAAAynC,EAAA9nC,GAEA3D,EAAAE,WAAAgJ,OAAA5E,EAAA0jC,QACA/iC,sBAAA,WACAjF,EAAA4P,IAAAC,KAAA7P,EAAA4E,MAAA0gC,UACAtlC,EAAA4P,IAAAowB,UAAAhgC,EAAA4E,MAAAwhC,WACAhI,EAAA1X,KAAAC,WACA3iB,EAAAM,EAAAN,EACAL,EAAAW,EAAAX,EACAqF,EAAA1E,EAAAjC,OACAsQ,EAAArO,EAAA3B,MACA2jC,GAAAhiC,EAAA2kC,YACAjoB,IAAA1c,EAAAR,YACAioC,QAAAznC,EAAAmzB,iBACqB,WACrBnzB,EAAAN,EAAA,GAAAM,EAAAX,EAAA,IACAy6B,EAAA1X,KAAAC,UAAAriB,EAAA+5B,KAAAwM,MAAA97B,IAAA,SAAAhR,GAA8E,OAAS4U,EAAA5U,EAAA4E,MAAA2K,EAAAvP,EAAAgB,MAAAiC,UAAkC,WACzHsD,EAAAN,EAAA,GAAAM,EAAAX,EAAA,MA+ZAqoC,CAAA1nC,KAgBA,OAXA0jC,IACAxI,EAAAl7B,GAEAkjC,EAAAljC,EAAAo7B,EAAA,aAjSA,SAAAp7B,IACAtE,EAAAE,WAAA6iC,sBAAA/iC,EAAA2T,UACArP,EAAA2nC,oBAAA3nC,EAAA4nC,sBAAAlsC,EAAA2T,SACAisB,EAAAh+B,MAAA0C,EAAA,OACAA,EAAA6nC,gBAAA,MAEA7nC,EAAA2nC,oBAAA3nC,EAAA8nC,qBAAApsC,EAAA2T,SACAisB,EAAAh+B,MAAA0C,EAAA,OACAA,EAAA6nC,gBAAA,MAEA7nC,EAAA+nC,uBAAA/nC,EAAA8nC,qBAAApsC,EAAA2T,SACAisB,EAAAh+B,MAAA0C,EAAA,OACAA,EAAA6nC,gBAAA,MAEA7nC,EAAA+nC,uBAAA/nC,EAAA4nC,uBACA,SAAAlsC,EAAAE,WAAAosC,yBAAAtsC,EAAA2T,UACAisB,EAAAh+B,MAAA0C,EAAA,OACAA,EAAA6nC,gBAAA,OAkRAI,CAAAjoC,GACAtE,EAAAu5B,iBACAiO,EAAAljC,EAAAq7B,EAAA,OAAA3/B,EAAAq5B,YAEAr5B,EAAA4P,IAAA+wB,UACA38B,GAAAM,EAAA3B,OAAA88B,EAAA,EAAAz/B,EAAA4E,MAAAsI,iBACA5I,EAAA3B,QAqGA,SAAAw9B,EAAAvhC,EAAAR,GACA,IAAAN,EAAA0uC,EAAAC,EAAAluC,EAAAiiC,EAAA3gC,EAAAmB,OACA,GAAA2C,EAAA,EAAA2E,EAAAU,EACA,SAOA,GALAu2B,EAAAn+B,EAAAxC,GACA84B,EAAA13B,EAAAkI,aAAAtJ,GACA6tC,GAAAzsC,EAAAsC,MAAAC,KAAA3D,IAAAoB,EAAA4E,MAAA0D,YAAAtI,EAAAsR,MACAk7B,GAAA9U,EAAA13B,EAAAsC,MAAA+F,MAAAzJ,GAAA,GAAAoB,EAAAsR,MAEA3N,IADA27B,EAAAmN,EAAAD,GAEA,SAOA,IALAxsC,EAAAE,WAAAqmB,iBACAviB,GAAA8E,GAEAR,EAAAg3B,EAEA/gC,EAAAyB,EAAA,gBAAgDzB,EAAAiiC,EAAOjiC,GAAA,EAGvD,GAFAT,EAAAkC,EAAAkE,OAAAtB,QAAArE,IACAyF,GAAA08B,EAAAnB,EAAA3gC,EAAAR,EAAAsiC,CAAA7gC,EAAA/B,KAAAS,IACAyB,EAAA2C,MAAA,CACA3C,EAAAksB,iBAAA3tB,EACAyB,EAAAosB,iBAAApoB,EACA,MAQA,IAJAA,EAAA,EACAhE,EAAAE,WAAAqmB,iBACAviB,GAAA8E,GAEAvK,EAAA,EAA2BA,EAAAyB,EAAAulB,eAC3BznB,EAAAkC,EAAAkE,OAAAtB,QAAArE,MACAyF,GAAA08B,EAAAnB,EAAA3gC,EAAAR,EAAAsiC,CAAA7gC,EAAA/B,KAAAS,IACAyB,EAAA2C,QAHkDpE,GAAA,GA8ClD,OAvCAyB,EAAAu+B,sBAAAv6B,EAEAsE,EAAAg3B,EACAt7B,GAAAhE,EAAA0E,UAAAS,WAAAnF,EAAAgmB,gBAAAhmB,EAAA4E,MAAAsI,gBAEA1E,EAAAxI,EAAAiI,WAAArJ,GACAA,IAAAwC,EAAAJ,QAAA02B,GACAlvB,EAAAqB,SAAA,EACArB,EAAAY,YACAM,UAAA/F,EAAA8oC,EAAAzsC,EAAA8T,gBACArK,WAAAX,EAAA,EAAA9I,EAAA6T,iBACAtK,aAAAijC,EACAhjC,YAAAxJ,EAAA2C,MAAAmG,EAAA9I,EAAA4E,MAAAC,eAAA,EACA8E,aAAA3J,EAAAwB,KAAA4H,WACAA,WAAApJ,EAAAwB,KAAA4H,WACAxE,MAAA5E,EAAA4E,MACA0E,SAAA,uBACAlE,UAAApF,EAAA0E,UAAAU,UACAD,WAAAnF,EAAA0E,UAAAS,WACA/C,SAAAxD,GAEAoB,EAAAuF,aAAAutB,SACA1wB,SAAAxD,EACAkF,YAAA,EACAH,EAAA6E,EAAAY,WAAAM,UACA1F,EAAAwE,EAAAY,WAAAK,WACApH,OAAAmG,EAAAnG,OACAM,MAAA6F,EAAA7F,MACAiC,MAAA,YACApB,KAAAgF,EAAAY,WAAAE,WAEAd,EAAAhG,QACiBgG,IACjBA,EAAAY,WAAAG,aAAA,SACAvJ,EAAAsC,MAAA+F,MAAAzJ,IAEAihC,EAAAj+B,MAAA29B,EAAA3gC,EAAAR,EAAAuF,EAAA27B,IACAt/B,EAAA+kB,kBAAAnmB,GAAA0gC,EACA37B,GAAA2E,GAAAm3B,EAAA,EAAAz/B,EAAA4E,MAAAsI,kBACA,MA8XC9M,MAAA9C,SAAAC,EAAAD,QAAAwC,iDC33CD,IAAA4sC,6BAAA5sC,8BAEA4sC,8BAAA9uC,oBAAA,IAAAkC,8BAAA,SAAAG,UACA,aACA,kBACA,IAAA0sC,QAAA3C,aA6BA,SAAA4C,eAAAC,EAAA5tB,GACA,IAAAnhB,KAQA,OANAmC,SAAAnC,GACAA,EAAAmC,SAAA4sC,GAAAzpC,OAAA,SAAAtF,GACA,OAAAA,EAAA,GAAAgvC,gBAAA7tB,EAAA6tB,eACA9C,UAAAvf,kBAAA3sB,EAAA,MAAAmhB,EAAA6tB,eACA9C,UAAAvf,kBAAA3sB,EAAA,SAAAmhB,EAAA6tB,gBACa,GAwJb,OA5LA9C,UAAA1gB,oBAAA,SAAAxN,GACAA,IAAAyG,QAAA,aACA,IAAAwqB,EAAAntC,EAAA,GAaA,OAZA4V,MAAA9V,UAAA2B,QAAApD,KAAA6d,EAAA,SAAAkxB,GACA,GAAAD,EAGA,OAFAA,GAAA,OACAntC,GAAAotC,EAAA59B,eAGA,MAAA49B,EAIAptC,GAAAotC,EAHAD,GAAA,IAKAntC,GAEAoqC,UAAAvf,kBAAA,SAAA3O,EAAAmxB,GACA,IAAArtC,EAAA,GAQA,OAPA4V,MAAA9V,UAAA2B,QAAApD,KAAA6d,EAAA,SAAAkxB,GACAA,MAAA59B,cAIAxP,GAAAotC,EAHAptC,GAAA,IAAAotC,EAAAF,iBAKAG,EAAA,aAAArtC,GAaAoqC,UAAAxe,oBAAA,SAAA0hB,EAAA1rC,GACA,GAAAA,EAAA8oB,YAAA,CACA,IAAA6iB,EAAAzvC,OAAAktB,iBAAA,oBAAAppB,EAAA8a,QAAA9a,IAAAyI,OAAA,MACAmjC,KACA5rC,EAAA6rC,cAAAF,EACAltC,SAAAmtC,IACAA,IAAAntC,SAAAE,QACAkB,QAAA,SAAAumB,GACA,IAAAlS,EAEA,MADAA,EAAAy3B,EAAAG,iBAAAtD,UAAAvf,kBAAA7C,EAAA,WAEAlS,EAAAy3B,EAAAG,iBAAAtD,UAAAvf,kBAAA7C,EAAA,SAEA,KAAAlS,GAAA,iBAAAA,GACAlU,EAAA2nB,iBAAAvB,EAAA,GAAA+kB,eAAA/kB,EAAA,IAAAlS,EACA6M,QAAA,WAAAA,QAAA,WAAAqF,EAAA,WAGAslB,GAAA1rC,EAAAqE,gBACAZ,sBAAA,WAAmDzD,EAAAQ,QAAA,KACnDR,EAAAqE,cAAA,eAAArE,EAAAoD,UAGA+nC,SACAvrC,KAAA,SAAAmsC,GACA,IACA,OAAA7mB,KAAA+C,MAAA8jB,GACiB,MAAApmC,GACjB,UAAAlG,MAAA,oDAGAQ,OAAA,SAAA+rC,GACA,IACA,OAAA9mB,KAAA+C,MAAA+jB,GACiB,MAAArmC,GACjB,UAAAlG,MAAA,gEAGAyQ,OAAA,SAAA+7B,EAAA7lB,GACA,IAAAroB,EAAA4P,SAAAs+B,EAAA,IACA,OAAAv+B,MAAA3P,GAAAqoB,EAAAroB,GAEAmuC,QAAA,SAAAC,GACA,cAAA1gC,KAAA0gC,IAEA3iC,OAAA,SAAA4iC,GACA,OAAAA,IAGA5D,UAAA6D,wBAAA,WACA,IAAA/vC,KAAsBgwC,GAAA,4CAKtB,OAJA7tC,SAAAnC,GACAA,EAAAmC,SAAAC,WAAAmB,QAAA,SAAA0sC,GACAD,EAAAlsC,KAAAmsC,EAAA,GAAAjB,iBAEAgB,GAEA9D,UAAAgE,qBAAA,WACAC,KAAAC,WAAA,GAEAlE,UAAAmE,kBAAA,WACAF,KACAC,WAAA,EACAlE,UAAAoE,QAFAH,MAGAjE,UAAAxe,qBAAA,EAHAyiB,WAIAjsC,QAAA,IAEAgoC,UAAAqE,gBAAA,WACAJ,KAAAjsC,UAEAgoC,UAAAsE,yBAAA,SAAAC,SAAAC,OAAAC,QACA,IAAAC,IAAAltC,KAAAysC,KAAArmB,IACA,aAAA2mB,SAAA,CAIA,YAAAA,SAKA,MAJA,kCAAA/sC,KAAA2jB,WACA3jB,KAAA2jB,SAAA,2CAEA3jB,KAAAkH,KAAAtH,KAAAqtC,QAGA,cAAAF,SAIA,YAAAA,UAIA,aAAAA,UAAA,cAAAA,SAAA,CAIA,GADA3mB,IAAAglB,eAAA,aAAA2B,UACA3mB,IAGA,OAFA8mB,IAAA/B,eAAA/kB,IAAA,SACApmB,KAAAtB,WAAA0nB,IAAA,IAAA8mB,IAAAD,SAGA,MAAAxhC,KAAAshC,WACA/sC,KAAAqU,iBAAA,KAAA04B,SAAA,SAAApnC,GACAwnC,KAAAF,gBAdAjtC,KAAAnD,KAAAowC,YAJAjtC,KAAAkH,KAAAjH,OAAAkrC,QAAAlrC,OAAAgtC,aAXAzE,UAAAxe,qBAAA,EAAAhqB,OAkCAwoC,UAAAoE,QAAA,SAAA5sC,GACA,IAAA0mB,EACAxqB,OAAAkxC,mBACAptC,EAAAgqB,oBAAA,WAAoDwe,UAAAxe,qBAAA,EAAAhqB,GAA4CA,EAAAQ,WAOhGkmB,EAAA,IAAAxqB,OAAAkxC,iBAAA,SAAAC,GACA,IAAAC,EAAAC,EACAv5B,MAAA9V,UAAA2B,QAAApD,KAAA4wC,EAAA,SAAAG,GACA,UAAAA,EAAAC,eACA,UAAAD,EAAAC,cAIAD,EAAAryB,OAAAvT,YACA,UAAA4lC,EAAAryB,OAAAvT,WAAA8J,SACA67B,GAAA,GAGAC,EAAAE,WAAAluC,OAAA,qBAAAguC,EAAAxrC,QACAsrC,GAAA,GATAC,GAAA,IAYAA,GACAvtC,EAAAgqB,qBAAA,EAAAhqB,GAEAstC,IACA,kCAAAttC,EAAA2jB,WACA3jB,EAAA2jB,SAAA,sCAEA3jB,EAAAJ,KAAAI,EAAAmU,cAGAy4B,QAAA5sC,GAAoC2tC,eAAA,EAAAC,WAAA,EAAAlvC,YAAA,EAAAmvC,SAAA,IACpC75B,MAAA9V,UAAA2B,QAAApD,KAAAgV,SAAAq8B,iBAAA,kBAAA14B,GACAsR,EAAAkmB,QAAAx3B,GAAsCu4B,eAAA,EAAAC,WAAA,EAAAlvC,YAAA,EAAAmvC,SAAA,QAGtCrF,YAEC5pC,MAAA9C,QAAAovC,mCAAA3sC,IAAAD,gCAAAvC,OAAAD,QAAAwC,6ECpMD,IAAA4sC,6BAAA5sC,8BAEA4sC,8BACA9uC,oBAAA,GACAA,oBAAA,GACAA,oBAAA,GACAA,oBAAA,GACAA,oBAAA,GACAA,oBAAA,GACAA,oBAAA,GACAA,oBAAA,GACAA,oBAAA,IACAkC,8BAAA,SAAAkN,QAAAg9B,WACA,aACAA,sBACA,IAAAhsC,QAAAwX,MAAA9V,UAAA6vC,MAAAtxC,KAAAuxC,WACA,SAAAC,KAAA/mC,MACAA,cACA,IAAA1I,QA+BA,OA9BAA,KAAAsqB,iBAAAvqB,IAAA2I,KAAAshC,UACAhqC,KAAAoU,YAAA1L,KAAAU,YAAA,8BAAA6D,KAAAvE,KAAAU,WAAAE,UACAtJ,KAAAoU,YACApU,KAAAwB,QAEAxB,KAAAwB,KAAAxB,KAAAsqB,YAAAqkB,KAAA,kDACA17B,SAAAqC,cAAA,UAEAtV,KAAA0I,UACA1I,KAAAwB,KAAAkH,UACA1I,KAAAwrB,oBAAAwe,UAAAxe,oBACAxrB,KAAAyqB,kBAAAuf,UAAAvf,kBACAzqB,KAAAspB,oBAAA0gB,UAAA1gB,oBACAtpB,KAAA4J,WAAA,SAAAlB,GAEA,OADAA,EAAAshC,WAAA,EACA,IAAAyF,KAAA/mC,IAEA1K,QAAAqD,QAAA,SAAA9D,GACAA,EAAAyC,QAEAA,KAAAoU,aACApU,KAAAuoB,WAAA7f,KAAAU,WAAAmf,WACAvoB,KAAAoJ,WAAAV,KAAAU,YACSpJ,KAAAwB,KAAAkuC,kBACT1vC,KAAAuoB,WAAAvoB,KAAAwB,KAAAmuC,cAAsD1wC,KAAA,SACtDe,KAAAoJ,WAAApJ,KAAAuoB,YAEAvoB,KAAAoJ,WAAApJ,KAAAwB,KAEAxB,KAAA8gB,OACA9gB,KAAAwB,KAgEA,OA9DA9D,OAAAkyC,cACAH,KAAA/vC,UAAAlB,OAAAY,OAAA1B,OAAAkyC,YAAAlwC,YAGAhC,OAAAmyC,iBACAJ,KAAAK,mBAAA9F,UAAA6D,0BACA4B,KAAA/vC,UAAAsuC,qBAAAhE,UAAAgE,qBACAyB,KAAA/vC,UAAA4uC,yBAAAtE,UAAAsE,yBACAmB,KAAA/vC,UAAAyuC,kBAAAnE,UAAAmE,kBACAsB,KAAA/vC,UAAA2uC,gBAAArE,UAAAqE,gBACA3wC,OAAAmyC,eAAAryC,OAAA,kBAAAiyC,QAGA/xC,eAAAqyC,gBAAAryC,OAAAsyC,UACAtyC,OAAAqyC,eAAA,SAAArnC,GAAiD,WAAA+mC,KAAA/mC,KAGjDnL,OAAAD,QAAA,SAAAoL,GACAA,QACA,IAAA5K,EAAAmyC,GAAA,yCACA,2DACA,OAAAvyC,OAAAmyC,gBAAA58B,SAAA6C,KAAA45B,kBACA5xC,EAAAmV,SAAAqC,cAAA,mBACA9W,OAAA0E,KAAAwF,GAAArH,QAAA,SAAA6uC,GAEA,SAAAA,GACA,eAAAA,KAEA,IAAAD,EAAAxpC,QAAAypC,GAgBApyC,EAAAoC,WAAAgwC,GAAAxnC,EAAAwnC,GAfAD,EAAA5uC,QAAA,SAAA8uC,QACApwC,IAAA2I,EAAAynC,QAAAD,KACA,uCAAAzpC,QAAAypC,GACA,iBAAAxnC,EAAAynC,IAAA,OAAAznC,EAAAynC,IACA3xC,OAAA0E,KAAAwF,EAAAynC,IAAA9uC,QAAA,SAAA+uC,GACAtyC,EAAAqyC,GAAAC,GAAA1nC,EAAAynC,GAAAC,KAIAtyC,EAAAqyC,GAAAznC,EAAAynC,SAQAznC,EAAAtH,OACAtD,EAAAsD,KAAAsH,EAAAtH,MAGAsH,EAAAU,YACAV,EAAAU,WAAAwM,YAAA9X,GAEAA,IAEA4K,EAAAshC,WAAA,EACAlsC,EAAA,IAAA2xC,KAAA/mC,GACAA,EAAAU,YAAAV,EAAAU,WAAAwM,aACAlN,EAAAU,WAAAwM,YAAA9X,GAEAA,IAEAP,OAAAD,SACC8C,MAAA9C,QAAAovC,mCAAA3sC,IAAAD,gCAAAvC,OAAAD,QAAAwC","file":"canvas-datagrid.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"canvasDatagrid\"] = factory();\n\telse\n\t\troot[\"canvasDatagrid\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 9);\n","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.defaults = {\n            attributes: [\n                ['allowColumnReordering', true],\n                ['allowColumnResize', true],\n                ['allowColumnResizeFromCell', false],\n                ['allowFreezingRows', false],\n                ['allowFreezingColumns', false],\n                ['allowMovingSelection', true],\n                ['allowRowHeaderResize', true],\n                ['allowRowReordering', false],\n                ['allowRowResize', true],\n                ['allowRowResizeFromCell', false],\n                ['allowSorting', true],\n                ['autoGenerateSchema', false],\n                ['autoResizeColumns', false],\n                ['borderDragBehavior', 'none'],\n                ['borderResizeZone', 10],\n                ['clearSettingsOptionText', 'Clear saved settings'],\n                ['columnHeaderClickBehavior', 'sort'],\n                ['columnSelectorHiddenText', '&nbsp;&nbsp;&nbsp;'],\n                ['columnSelectorText', 'Add/Remove columns'],\n                ['columnSelectorVisibleText', '\\u2713'],\n                ['contextHoverScrollAmount', 2],\n                ['contextHoverScrollRateMs', 5],\n                ['copyHeadersOnSelectAll', true],\n                ['copyText', 'Copy'],\n                ['debug', false],\n                ['editable', true],\n                ['ellipsisText', '...'],\n                ['filterOptionText', 'Filter %s'],\n                ['filterTextPrefix', '(filtered) '],\n                ['globalRowResize', false],\n                ['hideColumnText', 'Hide %s'],\n                ['maxAutoCompleteItems', 200],\n                ['multiLine', false],\n                ['name', ''],\n                ['pageUpDownOverlap', 1],\n                ['pasteText', 'Paste'],\n                ['persistantSelectionMode', false],\n                ['removeFilterOptionText', 'Remove filter on %s'],\n                ['reorderDeadZone', 3],\n                ['resizeScrollZone', 20],\n                ['rowGrabZoneSize', 5],\n                ['saveAppearance', true],\n                ['scrollAnimationPPSThreshold', 0.75],\n                ['scrollPointerLock', false],\n                ['scrollRepeatRate', 75],\n                ['selectionFollowsActiveCell', false],\n                ['selectionHandleBehavior', 'none'],\n                ['selectionMode', 'cell'],\n                ['selectionScrollIncrement', 20],\n                ['selectionScrollZone', 20],\n                ['showClearSettingsOption', true],\n                ['showColumnHeaders', true],\n                ['showColumnSelector', true],\n                ['showCopy', false],\n                ['showFilter', true],\n                ['showNewRow', false],\n                ['showOrderByOption', true],\n                ['showOrderByOptionTextAsc', 'Order by %s ascending'],\n                ['showOrderByOptionTextDesc', 'Order by %s descending'],\n                ['showPaste', false],\n                ['showPerformance', false],\n                ['showRowHeaders', true],\n                ['showRowNumbers', true],\n                ['snapToRow', false],\n                ['touchContextMenuTimeMs', 800],\n                ['touchDeadZone', 3],\n                ['touchEasingMethod', 'easeOutQuad'],\n                ['touchReleaseAcceleration', 1000],\n                ['touchReleaseAnimationDurationMs', 2000],\n                ['touchScrollZone', 20],\n                ['touchSelectHandleZone', 20],\n                ['touchZoomSensitivity', 0.005],\n                ['touchZoomMin', 0.5],\n                ['touchZoomMax', 1.75],\n                ['maxPixelRatio', 2],\n                ['tree', false],\n                ['treeHorizontalScroll', false]\n            ],\n            styles: [\n                ['activeCellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['activeCellBorderWidth', 1],\n                ['activeCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellFont', '16px sans-serif'],\n                ['activeCellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellHorizontalAlignment', 'left'],\n                ['activeCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['activeCellOverlayBorderWidth', 1],\n                ['activeCellPaddingBottom', 5],\n                ['activeCellPaddingLeft', 5],\n                ['activeCellPaddingRight', 5],\n                ['activeCellPaddingTop', 5],\n                ['activeCellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['activeCellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellVerticalAlignment', 'center'],\n                ['activeColumnHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeColumnHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeRowHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeRowHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['autocompleteBottomMargin', 60],\n                ['autosizeHeaderCellPadding', 8],\n                ['autosizePadding', 5],\n                ['cellAutoResizePadding', 13],\n                ['cellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['cellBorderWidth', 1],\n                ['cellColor', 'rgba(0, 0, 0, 1)'],\n                ['cellFont', '16px sans-serif'],\n                ['cellGridHeight', 250],\n                ['cellHeight', 24],\n                ['cellHeightWithChildGrid', 150],\n                ['cellHorizontalAlignment', 'left'],\n                ['cellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['cellPaddingBottom', 5],\n                ['cellPaddingLeft', 5],\n                ['cellPaddingRight', 5],\n                ['cellPaddingTop', 5],\n                ['cellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['cellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['cellVerticalAlignment', 'center'],\n                ['cellWidth', 250],\n                ['cellWidthWithChildGrid', 250],\n                ['cellWhiteSpace', 'nowrap'],\n                ['cellLineHeight', 1],\n                ['cellLineSpacing', 3],\n                ['childContextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['childContextMenuArrowHTML', '&#x25BA;'],\n                ['childContextMenuMarginLeft', -11],\n                ['childContextMenuMarginTop', -6],\n                ['columnHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellBorderColor', 'rgba(172, 172, 172, 1)'],\n                ['columnHeaderCellBorderWidth', 1],\n                ['columnHeaderCellCapBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellCapBorderColor', 'rgba(172, 172, 172, 1)'],\n                ['columnHeaderCellCapBorderWidth', 1],\n                ['columnHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['columnHeaderCellFont', '16px sans-serif'],\n                ['columnHeaderCellHeight', 25],\n                ['columnHeaderCellHorizontalAlignment', 'left'],\n                ['columnHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['columnHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['columnHeaderCellPaddingBottom', 5],\n                ['columnHeaderCellPaddingLeft', 5],\n                ['columnHeaderCellPaddingRight', 5],\n                ['columnHeaderCellPaddingTop', 5],\n                ['columnHeaderCellVerticalAlignment', 'center'],\n                ['columnHeaderOrderByArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['columnHeaderOrderByArrowBorderWidth', 1],\n                ['columnHeaderOrderByArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['columnHeaderOrderByArrowHeight', 8],\n                ['columnHeaderOrderByArrowMarginLeft', 0],\n                ['columnHeaderOrderByArrowMarginRight', 5],\n                ['columnHeaderOrderByArrowMarginTop', 6],\n                ['columnHeaderOrderByArrowWidth', 13],\n                ['contextFilterButtonBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterButtonBorderRadius', '3px'],\n                ['contextFilterButtonHTML', '&#x25BC;'],\n                ['contextFilterInputBackground', 'rgba(255,255,255,1)'],\n                ['contextFilterInputBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterInputBorderRadius', '0'],\n                ['contextFilterInputColor', 'rgba(0,0,0,1)'],\n                ['contextFilterInputFontFamily', 'sans-serif'],\n                ['contextFilterInputFontSize', '14px'],\n                ['contextFilterInvalidRegExpBackground', 'rgba(180, 6, 1, 1)'],\n                ['contextFilterInvalidRegExpColor', 'rgba(255, 255, 255, 1)'],\n                ['contextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuArrowDownHTML', '&#x25BC;'],\n                ['contextMenuArrowUpHTML', '&#x25B2;'],\n                ['contextMenuBackground', 'rgba(240, 240, 240, 1)'],\n                ['contextMenuBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextMenuBorderRadius', '3px'],\n                ['contextMenuChildArrowFontSize', '12px'],\n                ['contextMenuColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuCursor', 'default'],\n                ['contextMenuFilterButtonFontFamily', 'sans-serif'],\n                ['contextMenuFilterButtonFontSize', '10px'],\n                ['contextMenuFilterInvalidExpresion', 'rgba(237, 155, 156, 1)'],\n                ['contextMenuFontFamily', 'sans-serif'],\n                ['contextMenuFontSize', '16px'],\n                ['contextMenuHoverBackground', 'rgba(182, 205, 250, 1)'],\n                ['contextMenuHoverColor', 'rgba(43, 48, 153, 1)'],\n                ['contextMenuItemBorderRadius', '3px'],\n                ['contextMenuItemMargin', '2px'],\n                ['contextMenuLabelDisplay', 'inline-block'],\n                ['contextMenuLabelMargin', '0 3px 0 0'],\n                ['contextMenuLabelMaxWidth', '700px'],\n                ['contextMenuLabelMinWidth', '75px'],\n                ['contextMenuMarginLeft', 3],\n                ['contextMenuMarginTop', -3],\n                ['contextMenuOpacity', '0.98'],\n                ['contextMenuPadding', '2px'],\n                ['contextMenuWindowMargin', 30],\n                ['contextMenuZIndex', 10000],\n                ['cornerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cornerCellBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['debugBackgroundColor', 'rgba(0, 0, 0, .0)'],\n                ['debugColor', 'rgba(255, 15, 24, 1)'],\n                ['debugEntitiesColor', 'rgba(76, 231, 239, 1.00)'],\n                ['debugFont', '11px sans-serif'],\n                ['debugPerfChartBackground', 'rgba(29, 25, 26, 1.00)'],\n                ['debugPerfChartTextColor', 'rgba(255, 255, 255, 0.8)'],\n                ['debugPerformanceColor', 'rgba(252, 255, 37, 1.00)'],\n                ['debugScrollHeightColor', 'rgba(248, 33, 103, 1.00)'],\n                ['debugScrollWidthColor', 'rgba(66, 255, 27, 1.00)'],\n                ['debugTouchPPSXColor', 'rgba(246, 102, 24, 1.00)'],\n                ['debugTouchPPSYColor', 'rgba(186, 0, 255, 1.00)'],\n                ['display', 'inline-block'],\n                ['editCellBackgroundColor', 'white'],\n                ['editCellBorder', 'solid 1px rgba(110, 168, 255, 1)'],\n                ['editCellBoxShadow', '0 2px 5px rgba(0,0,0,0.4)'],\n                ['editCellColor', 'black'],\n                ['editCellFontFamily', 'sans-serif'],\n                ['editCellFontSize', '16px'],\n                ['editCellPaddingLeft', 4],\n                ['editCellZIndex', 10000],\n                ['frozenMarkerHoverColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerHoverBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerActiveColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerActiveBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerColor', 'rgba(222, 222, 222, 1)'],\n                ['frozenMarkerBorderColor', 'rgba(168, 168, 168, 1)'],\n                ['frozenMarkerBorderWidth', 1],\n                ['frozenMarkerWidth', 2],\n                ['gridBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['gridBorderCollapse', 'collapse'],\n                ['gridBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['gridBorderWidth', 1],\n                ['height', 'auto'],\n                ['maxHeight', 'inherit'],\n                ['maxWidth', 'inherit'],\n                ['minColumnWidth', 45],\n                ['minHeight', 'inherit'],\n                ['minRowHeight', 24],\n                ['minWidth', 'inherit'],\n                ['mobileContextMenuMargin', 10],\n                ['mobileEditInputHeight', 30],\n                ['mobileEditFontFamily', 'sans-serif'],\n                ['mobileEditFontSize', '16px'],\n                ['moveOverlayBorderWidth', 1],\n                ['moveOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['moveOverlayBorderSegments', '12, 7'],\n                ['name', 'default'],\n                ['overflowY', 'auto'],\n                ['overflowX', 'auto'],\n                ['reorderMarkerBackgroundColor', 'rgba(0, 0, 0, 0.1)'],\n                ['reorderMarkerBorderColor', 'rgba(0, 0, 0, 0.2)'],\n                ['reorderMarkerBorderWidth', 1.25],\n                ['reorderMarkerIndexBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['reorderMarkerIndexBorderWidth', 2.75],\n                ['rowHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['rowHeaderCellBorderColor', 'rgba(200, 200, 200, 1)'],\n                ['rowHeaderCellBorderWidth', 1],\n                ['rowHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellFont', '16px sans-serif'],\n                ['rowHeaderCellHeight', 25],\n                ['rowHeaderCellHorizontalAlignment', 'left'],\n                ['rowHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['rowHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['rowHeaderCellPaddingBottom', 5],\n                ['rowHeaderCellPaddingLeft', 5],\n                ['rowHeaderCellPaddingRight', 5],\n                ['rowHeaderCellPaddingTop', 5],\n                ['rowHeaderCellSelectedBackgroundColor', 'rgba(217, 217, 217, 1)'],\n                ['rowHeaderCellSelectedColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellVerticalAlignment', 'center'],\n                ['rowHeaderCellWidth', 57],\n                ['scrollBarActiveColor', 'rgba(125, 125, 125, 1)'],\n                ['scrollBarBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarBorderWidth', 0.5],\n                ['scrollBarBoxBorderRadius', 4.125],\n                ['scrollBarBoxColor', 'rgba(192, 192, 192, 1)'],\n                ['scrollBarBoxMargin', 2],\n                ['scrollBarBoxMinSize', 15],\n                ['scrollBarBoxWidth', 8],\n                ['scrollBarCornerBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarCornerBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarWidth', 11],\n                ['selectionHandleBorderColor', 'rgba(255, 255, 255, 1)'],\n                ['selectionHandleBorderWidth', 1.5],\n                ['selectionHandleColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionHandleSize', 8],\n                ['selectionHandleType', 'square'],\n                ['selectionOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionOverlayBorderWidth', 1],\n                ['treeArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['treeArrowBorderWidth', 1],\n                ['treeArrowClickRadius', 5],\n                ['treeArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['treeArrowHeight', 8],\n                ['treeArrowMarginLeft', 0],\n                ['treeArrowMarginRight', 5],\n                ['treeArrowMarginTop', 6],\n                ['treeArrowWidth', 13],\n                ['treeGridHeight', 250],\n                ['width', 'auto']\n            ]\n        };\n    };\n});\n","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        /**\n         * Converts a integer into a letter A - ZZZZZ...\n         * @memberof canvasDatagrid\n         * @name integerToAlpha\n         * @method\n         * @param {column} n The number to convert.\n         */\n        self.integerToAlpha = function (n) {\n            var ordA = 'a'.charCodeAt(0),\n                ordZ = 'z'.charCodeAt(0),\n                len = ordZ - ordA + 1,\n                s = '';\n            while (n >= 0) {\n                s = String.fromCharCode(n % len + ordA) + s;\n                n = Math.floor(n / len) - 1;\n            }\n            return s;\n        };\n        /**\n         * Inserts a new column before the specified index into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name insertColumn\n         * @method\n         * @param {column} c The column to insert into the schema.\n         * @param {number} index The index of the column to insert before.\n         */\n        self.insertColumn = function (c, index) {\n            var s = self.getSchema();\n            if (s.length < index) {\n                throw new Error('Index is beyond the length of the schema.');\n            }\n            self.validateColumn(c, s);\n            s.splice(index, 0, c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a column from the schema at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteColumn\n         * @tutorial schema\n         * @method\n         * @param {number} index The index of the column to delete.\n         */\n        self.deleteColumn = function (index) {\n            var s = self.getSchema();\n            // remove data matching this column name from data\n            self.data.forEach(function (row) {\n                delete row[s[index].name];\n            });\n            s.splice(index, 1);\n            self.intf.schema = s;\n        };\n        /**\n         * Adds a new column into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name addColumn\n         * @method\n         * @param {column} c The column to add to the schema.\n         */\n        self.addColumn = function (c) {\n            var s = self.getSchema();\n            self.validateColumn(c, s);\n            s.push(c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a row from the dataset at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteRow\n         * @method\n         * @param {number} index The index of the row to delete.\n         */\n        self.deleteRow = function (index) {\n            self.originalData.splice(index, 1);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Inserts a new row into the dataset before the specified index.\n         * @memberof canvasDatagrid\n         * @name insertRow\n         * @method\n         * @param {object} d data.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertRow = function (d, index) {\n            if (self.originalData.length < index) {\n                throw new Error('Index is beyond the length of the dataset.');\n            }\n            self.originalData.splice(index, 0, d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[index], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Adds a new row into the dataset.\n         * @memberof canvasDatagrid\n         * @name addRow\n         * @method\n         * @param {object} d data.\n         */\n        self.addRow = function (d) {\n            self.originalData.push(d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[self.originalData.length - 1], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Sets the height of a given row by index number.\n         * @memberof canvasDatagrid\n         * @name setRowHeight\n         * @method\n         * @param {number} rowIndex The index of the row to set.\n         * @param {number} height Height to set the row to.\n         */\n        self.setRowHeight = function (rowIndex, height) {\n            self.sizes.rows[rowIndex] = height;\n            self.draw(true);\n        };\n        /**\n         * Sets the width of a given column by index number.\n         * @memberof canvasDatagrid\n         * @name setColumnWidth\n         * @method\n         * @param {number} colIndex The index of the column to set.\n         * @param {number} width Width to set the column to.\n         */\n        self.setColumnWidth = function (colIndex, width) {\n            self.sizes.columns[colIndex] = width;\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the width of the columns due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetColumnWidths\n         * @tutorial schema\n         * @method\n         */\n        self.resetColumnWidths = function () {\n            self.sizes.columns = {};\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the height of the rows due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetRowHeights\n         * @tutorial schema\n         * @method\n         */\n        self.resetRowHeights = function () {\n            self.sizes.rows = {};\n            self.draw(true);\n        };\n        /**\n         * Sets the value of the filter.\n         * @memberof canvasDatagrid\n         * @name setFilter\n         * @method\n         * @param {string} column Name of the column to filter.\n         * @param {string} value The value to filter for.\n         */\n        self.setFilter = function (column, value) {\n            function applyFilter() {\n                self.refreshFromOrigialData();\n                Object.keys(self.columnFilters).forEach(function (filter) {\n                    var header = self.getHeaderByName(column);\n                    if (!header) {\n                        return;\n                    }\n                    self.currentFilter = header.filter || self.filter(column.type || 'string');\n                    self.data = self.data.filter(function (row) {\n                        return self.currentFilter(row[filter], self.columnFilters[filter]);\n                    });\n                });\n                self.resize();\n                self.draw(true);\n            }\n            if (column === undefined && value === undefined) {\n                self.columnFilters = {};\n                return applyFilter();\n            }\n            if (column && (value === '' || value === undefined)) {\n                delete self.columnFilters[column];\n            } else {\n                self.columnFilters[column] = value;\n            }\n            applyFilter();\n        };\n        /**\n         * Returns the number of pixels to scroll down to line up with row rowIndex.\n         * @memberof canvasDatagrid\n         * @name findRowScrollTop\n         * @method\n         * @param {number} rowIndex The row index of the row to scroll find.\n         */\n        self.findRowScrollTop = function (rowIndex) {\n            if (self.scrollCache.y[rowIndex] === undefined) { throw new RangeError('Row index out of range.'); }\n            return self.scrollCache.y[rowIndex];\n        };\n        /**\n         * Returns the number of pixels to scroll to the left to line up with column columnIndex.\n         * @memberof canvasDatagrid\n         * @name findColumnScrollLeft\n         * @method\n         * @param {number} columnIndex The column index of the column to find.\n         */\n        self.findColumnScrollLeft = function (columnIndex) {\n            var i = Math.max(columnIndex - 1, 0);\n            if (self.scrollCache.x[i] === undefined) { throw new Error('Column index out of range.'); }\n            return self.scrollCache.x[i] - self.getColummnWidth(self.orders.columns[columnIndex]);\n        };\n        /**\n         * Scrolls to the cell at columnIndex x, and rowIndex y.  If you define both rowIndex and columnIndex additional calculations can be made to center the cell using the target cell's height and width.  Defining only one rowIndex or only columnIndex will result in simpler calculations.\n         * @memberof canvasDatagrid\n         * @name gotoCell\n         * @method\n         * @param {number} x The column index of the cell to scroll to.\n         * @param {number} y The row index of the cell to scroll to.\n         * @param {number} [offsetX=0] Percentage offset the cell should be from the left edge (not including headers).  The default is 0, meaning the cell will appear at the left edge. Valid values are 0 through 1. 1 = Left, 0 = Right, 0.5 = Center.\n         * @param {number} [offsetY=0] Percentage offset the cell should be from the top edge (not including headers).  The default is 0, meaning the cell will appear at the top edge. Valid values are 0 through 1. 1 = Bottom, 0 = Top, 0.5 = Center.\n         */\n        self.gotoCell = function (x, y, offsetX, offsetY) {\n            var targetX = x === undefined ? undefined : self.findColumnScrollLeft(x),\n                targetY = y === undefined ? undefined : self.findRowScrollTop(y),\n                cell,\n                sbw = self.scrollBox.width - (self.scrollBox.verticalBarVisible ? self.style.scrollBarWidth : 0),\n                sbh = self.scrollBox.height - (self.scrollBox.horizontalBarVisible ? self.style.scrollBarWidth : 0);\n            offsetX = offsetX === undefined ? 0 : offsetX;\n            offsetY = offsetY === undefined ? 0 : offsetY;\n            targetX -= sbw * offsetX;\n            targetY -= sbh * offsetY;\n            if (x !== undefined && y !== undefined) {\n                self.scrollBox.scrollTo(targetX, targetY);\n                requestAnimationFrame(function () {\n                    cell = self.getVisibleCellByIndex(x, y);\n                    // HACK: just don't offset if the target cell cannot be seen\n                    // TODO: offset does not work on very small grids, not sure why\n                    if (!cell) { return; }\n                    targetX += cell.width * offsetX;\n                    targetY += cell.height * offsetY;\n                    self.scrollBox.scrollTo(targetX, targetY);\n                });\n            } else if (x !== undefined) {\n                self.scrollBox.scrollLeft = targetX;\n            } else if (y !== undefined) {\n                self.scrollBox.scrollTop = targetY;\n            }\n        };\n        /**\n         * Scrolls the row y.\n         * @memberof canvasDatagrid\n         * @name gotoRow\n         * @method\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoRow = function (y) {\n            self.gotoCell(0, y);\n        };\n        /**\n         * Scrolls the cell at cell x, row y into view if it is not already.\n         * @memberof canvasDatagrid\n         * @name scrollIntoView\n         * @method\n         * @param {number} x The column index of the cell to scroll into view.\n         * @param {number} y The row index of the cell to scroll into view.\n         * @param {number} [offsetX=0] Percentage offset the cell should be from the left edge (not including headers).  The default is 0, meaning the cell will appear at the left edge. Valid values are 0 through 1. 1 = Left, 0 = Right, 0.5 = Center.\n         * @param {number} [offsetY=0] Percentage offset the cell should be from the top edge (not including headers).  The default is 0, meaning the cell will appear at the top edge. Valid values are 0 through 1. 1 = Bottom, 0 = Top, 0.5 = Center.\n         */\n        self.scrollIntoView = function (x, y, offsetX, offsetY) {\n            if (self.visibleCells.filter(function (cell) {\n                    return (cell.rowIndex === y || y === undefined)\n                        && (cell.columnIndex === x || x === undefined)\n                        && cell.x > 0\n                        && cell.y > 0\n                        && cell.x + cell.width < self.width\n                        && cell.y + cell.height < self.height;\n                }).length === 0) {\n                self.gotoCell(x, y, offsetX, offsetY);\n            }\n        };\n        /**\n         * Sets the active cell. Requires redrawing.\n         * @memberof canvasDatagrid\n         * @name setActiveCell\n         * @method\n         * @param {number} x The column index of the cell to set active.\n         * @param {number} y The row index of the cell to set active.\n         */\n        self.setActiveCell = function (x, y) {\n            if (x < 0) { x = 0; }\n            if (y < 0) { y = 0; }\n            self.activeCell = {\n                rowIndex: y,\n                columnIndex: x\n            };\n        };\n        /**\n         * Removes the selection.\n         * @memberof canvasDatagrid\n         * @name selectNone\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectNone = function (dontDraw) {\n            self.selections = [];\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Selects every visible cell.\n         * @memberof canvasDatagrid\n         * @name selectAll\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectAll = function (dontDraw) {\n            self.selectArea({\n                top: 0,\n                left: 0,\n                right: self.getSchema().length,\n                bottom: self.data.length - 1\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Returns true if the selected columnIndex is selected on every row.\n         * @memberof canvasDatagrid\n         * @name isColumnSelected\n         * @method\n         * @param {number} columnIndex The column index to check.\n         */\n        self.isColumnSelected = function (columnIndex) {\n            var colIsSelected = true;\n            self.data.forEach(function (row, rowIndex) {\n                if (!self.selections[rowIndex] || self.selections[rowIndex].indexOf(self.orders.columns[columnIndex]) === -1) {\n                    colIsSelected = false;\n                }\n            });\n            return colIsSelected;\n        };\n        /**\n         * Runs the defined method on each selected cell.\n         * @memberof canvasDatagrid\n         * @name forEachSelectedCell\n         * @method\n         * @param {number} fn The function to execute.  The signature of the function is: (data, rowIndex, columnName).\n         * @param {number} expandToRow When true the data in the array is expanded to the entire row.\n         */\n        self.forEachSelectedCell = function (fn, expandToRow) {\n            var d = [], s = expandToRow ? self.getSchema() : self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    if (col === -1 || !s[col]) { return; }\n                    fn(self.data, index, s[col].name);\n                });\n            });\n        };\n        /**\n         * Selects a column.\n         * @memberof canvasDatagrid\n         * @name selectColumn\n         * @method\n         * @param {number} columnIndex The column index to select.\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the column.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the column.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectColumn = function (columnIndex, ctrl, shift, supressEvent) {\n            var s, e, x;\n            function addCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) === -1) {\n                        self.selections[rowIndex].push(i);\n                    }\n                });\n            }\n            function removeCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) !== -1) {\n                        self.selections[rowIndex].splice(self.selections[rowIndex].indexOf(i), 1);\n                    }\n                });\n            }\n            if (shift) {\n                if (!self.activeCell) { return; }\n                s = Math.min(self.activeCell.columnIndex, columnIndex);\n                e = Math.max(self.activeCell.columnIndex, columnIndex);\n                for (x = s; e > x; x += 1) {\n                    addCol(x);\n                }\n            }\n            if (!ctrl && !shift) {\n                self.selections = [];\n                self.activeCell.columnIndex = columnIndex;\n                self.activeCell.rowIndex = self.scrollIndexTop;\n            }\n            if (ctrl && self.isColumnSelected(columnIndex)) {\n                removeCol(columnIndex);\n            } else {\n                addCol(columnIndex);\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.getSelectionBounds()\n            });\n        };\n        /**\n         * Selects a row.\n         * @memberof canvasDatagrid\n         * @name selectRow\n         * @method\n         * @param {number} rowIndex The row index to select.\n         * @param {boolean} ctrl When true, behaves as if you were holding control/command when you clicked the row.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the row.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectRow = function (rowIndex, ctrl, shift, supressEvent) {\n            var x, st, en, s = self.getVisibleSchema();\n            function addRow(ri) {\n                self.selections[ri] = [];\n                self.selections[ri].push(-1);\n                s.forEach(function (col, index) {\n                    self.selections[ri].push(self.orders.columns.indexOf(col.index));\n                });\n            }\n            if (self.dragAddToSelection === false || self.dragObject === undefined) {\n                if (self.selections[rowIndex] && self.selections[rowIndex].length - 1 === s.length) {\n                    if (ctrl) {\n                        self.selections[rowIndex] = [];\n                        return;\n                    }\n                }\n            }\n            if (self.dragAddToSelection === true || self.dragObject === undefined) {\n                if (shift && self.dragObject === undefined) {\n                    if (!self.activeCell) { return; }\n                    st = Math.min(self.activeCell.rowIndex, rowIndex);\n                    en = Math.max(self.activeCell.rowIndex, rowIndex);\n                    for (x = st; en >= x; x += 1) {\n                        addRow(x);\n                    }\n                } else {\n                    addRow(rowIndex);\n                }\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Collapse a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name collapseTree\n         * @method\n         * @param {number} index The index of the row to collapse.\n         */\n        self.collapseTree = function (rowIndex) {\n            self.dispatchEvent('collapsetree', {\n                childGrid: self.childGrids[rowIndex],\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowIndex].blur();\n            self.openChildren[rowIndex].dispose();\n            delete self.openChildren[rowIndex];\n            delete self.sizes.trees[rowIndex];\n            delete self.childGrids[rowIndex];\n            self.dispatchEvent('resizerow', {\n                cellHeight: self.style.cellHeight\n            });\n            self.resize(true);\n            self.draw(true);\n        };\n        /**\n         * Expands a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name expandTree\n         * @method\n         * @param {number} index The index of the row to expand.\n         */\n        self.expandTree = function (rowIndex) {\n            var trArgs = self.args.treeGridAttributes || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth,\n                h = self.sizes.trees[rowIndex] || self.style.treeGridHeight,\n                treeGrid;\n            if (!self.childGrids[rowIndex]) {\n                trArgs.debug = self.attributes.debug;\n                trArgs.name = self.attributes.saveAppearance ? self.attributes.name + 'tree' + rowIndex : undefined;\n                trArgs.style = trArgs.style || self.style;\n                trArgs.parentNode = {\n                    parentGrid: self.intf,\n                    nodeType: 'canvas-datagrid-tree',\n                    offsetHeight: h,\n                    offsetWidth: self.width - rowHeaderCellWidth,\n                    header: { width: self.width - rowHeaderCellWidth },\n                    offsetLeft: rowHeaderCellWidth,\n                    offsetTop: columnHeaderCellHeight,\n                    offsetParent: self.intf.parentNode,\n                    parentNode: self.intf.parentNode,\n                    style: 'tree',\n                    data: self.data[rowIndex]\n                };\n                treeGrid = self.createGrid(trArgs);\n                self.childGrids[rowIndex] = treeGrid;\n            }\n            treeGrid = self.childGrids[rowIndex];\n            treeGrid.visible = true;\n            self.dispatchEvent('expandtree', {\n                treeGrid: treeGrid,\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowIndex] = treeGrid;\n            self.sizes.trees[rowIndex] = h;\n            self.dispatchEvent('resizerow', {height: self.style.cellHeight});\n            self.resize(true);\n        };\n        /**\n         * Toggles tree grid open and close by row index.\n         * @memberof canvasDatagrid\n         * @name toggleTree\n         * @method\n         * @param {number} index The index of the row to toggle.\n         */\n        self.toggleTree = function (rowIndex) {\n            var i = self.openChildren[rowIndex];\n            if (i) {\n                return self.collapseTree(rowIndex);\n            }\n            self.expandTree(rowIndex);\n        };\n        /**\n         * Returns a header from the schema by name.\n         * @memberof canvasDatagrid\n         * @name getHeaderByName\n         * @tutorial schema\n         * @method\n         * @returns {header} header with the selected name, or undefined.\n         * @param {string} name The name of the column to resize.\n         */\n        self.getHeaderByName = function (name) {\n            var x, i = self.getSchema();\n            for (x = 0; x < i.length; x += 1) {\n                if (i[x].name === name) {\n                    return i[x];\n                }\n            }\n        };\n        /**\n         * Resizes a column to fit the longest value in the column. Call without a value to resize all columns.\n         * Warning, can be slow on very large record sets (1m records ~3-5 seconds on an i7).\n         * @memberof canvasDatagrid\n         * @name fitColumnToValues\n         * @method\n         * @param {string} name The name of the column to resize.\n         */\n        self.fitColumnToValues = function (name, internal) {\n            if (!self.canvas) { return; }\n            self.sizes.columns[name === 'cornerCell' ? -1 : self.getHeaderByName(name).index]\n                = Math.max(self.findColumnMaxTextLength(name), self.style.minColumnWidth);\n            if (!internal) {\n                self.resize();\n                self.draw(true);\n            }\n        };\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @overload\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {number} columnIndex The column index of the cell to check.\n         * @param {number} rowIndex The row index of the cell to check.\n         */\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {cell} cell The cell to check for.  Alternatively you can pass an object { x: <x-pixel-value>, y: <y-pixel-value> }.\n         */\n        self.isCellVisible = function (cell, rowIndex) {\n            // overload\n            if (rowIndex !== undefined) {\n                return self.visibleCells.filter(function (c) {\n                    return c.columnIndex === cell && c.rowIndex === rowIndex;\n                }).length > 0;\n            }\n            var x, l = self.visibleCells.length;\n            for (x = 0; x < l; x += 1) {\n                if (cell.x === self.visibleCells[x].x && cell.y === self.visibleCells[x].y) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n         * Sets the order of the data.\n         * @memberof canvasDatagrid\n         * @name order\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} columnName Name of the column to be sorted.\n         * @param {string} direction `asc` for ascending or `desc` for descending.\n         * @param {function} [sortFunction] When defined, override the default sorting method defined in the column's schema and use this one.\n         * @param {bool} [dontSetStorageData] Don't store this setting for future use.\n         */\n        self.order = function (columnName, direction, sortFunction, dontSetStorageData) {\n            var f,\n                c = self.getSchema().filter(function (col) {\n                    return col.name === columnName;\n                });\n            if (self.dispatchEvent('beforesortcolumn', {name: columnName, direction: direction})) { return; }\n            self.orderBy = columnName;\n            if (!self.data || self.data.length === 0) { return; }\n            if (c.length === 0) {\n                throw new Error('Cannot sort.  No such column name');\n            }\n            f = sortFunction || self.sorters[c[0].type];\n            if (!f && c[0].type !== undefined) {\n                console.warn('Cannot sort type \"%s\" falling back to string sort.', c[0].type);\n            }\n            self.data = self.data.sort(typeof f === 'function' ? f(columnName, direction) : self.sorters.string);\n            self.dispatchEvent('sortcolumn', {name: columnName, direction: direction});\n            self.draw(true);\n            if (dontSetStorageData) { return; }\n            self.setStorageData();\n        };\n        self.isInGrid = function (e) {\n            if (e.x < 0\n                    || e.x > self.width\n                    || e.y < 0\n                    || e.y > self.height) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Moves the current selection relative to the its current position.  Note: this method does not move the selected data, just the selection itself.\n         * @memberof canvasDatagrid\n         * @name moveSelection\n         * @method\n         * @param {number} offsetX The number of columns to offset the selection.\n         * @param {number} offsetY The number of rows to offset the selection.\n         */\n        self.moveSelection = function (offsetX, offsetY) {\n            var sel = [];\n            self.selections.forEach(function (row, rowIndex) {\n                sel[rowIndex + offsetY] = [];\n                row.forEach(function (colIndex) {\n                    sel[rowIndex + offsetY].push(colIndex + offsetX);\n                });\n            });\n            self.selections = sel;\n        };\n        /**\n         * Moves data in the provided selection to another position in the grid.  Moving data off the edge of the schema (columns/x) will truncate data.\n         * @memberof canvasDatagrid\n         * @name moveTo\n         * @method\n         * @param {array} sel 2D array representing selected rows and columns.  `canvasDatagrid.selections` is in this format and can be used here.\n         * @param {number} x The column index to start inserting the selection at.\n         * @param {number} y The row index to start inserting the selection at.\n         */\n        self.moveTo = function (sel, x, y) {\n            var d = self.getSelectedData(),\n                s = self.getVisibleSchema(),\n                l = sel.length,\n                xi,\n                maxRowLength = -Infinity,\n                minXi = Infinity,\n                yi = y - 1;\n            sel.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) { return; }\n                minXi = Math.min(self.getVisibleColumnIndexOf(x), minXi);\n                maxRowLength = Math.max(maxRowLength, row.length);\n                row.forEach(function (colIndex) {\n                    // intentional redef of colIndex\n                    colIndex = self.getVisibleColumnIndexOf(colIndex);\n                    if (!s[colIndex]) { return; }\n                    if (!self.data[index]) { self.data[index] = {}; }\n                    self.data[index][s[colIndex].name] = null;\n                });\n            });\n            sel.forEach(function (row, index) {\n                var lastSourceIndex;\n                yi += 1;\n                xi = self.getVisibleColumnIndexOf(x);\n                row.forEach(function (colIndex, cidx) {\n                    colIndex = self.getVisibleColumnIndexOf(colIndex);\n                    if (cidx > 0) {\n                        // this confusing bit of nonsense figures out\n                        // if the selection has skipped cells\n                        xi += colIndex - lastSourceIndex;\n                    }\n                    lastSourceIndex = colIndex;\n                    if (colIndex === -1\n                            || !s[xi]\n                            || !s[colIndex]\n                            || self.data.length - 1 < yi\n                            || yi < 0) { return; }\n                    if (!self.data[yi]) { self.data[yi] = {}; }\n                    self.data[yi][s[xi].name] = d[index][s[colIndex].name];\n                });\n            });\n        };\n        /**\n         * Checks if a given column is visible.\n         * @memberof canvasDatagrid\n         * @name isColumnVisible\n         * @method\n         * @returns {boolean} When true, the column is visible.\n         * @param {number} columnIndex Column index.\n         */\n        self.isColumnVisible = function (columnIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === columnIndex;\n            }).length > 0;\n        };\n        /**\n         * Checks if a given row is visible.\n         * @memberof canvasDatagrid\n         * @name isRowVisible\n         * @method\n         * @returns {boolean} When true, the row is visible.\n         * @param {number} rowIndex Row index.\n         */\n        self.isRowVisible = function (rowIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.rowIndex === rowIndex;\n            }).length > 0;\n        };\n        /**\n         * Gets the cell at columnIndex and rowIndex.\n         * @memberof canvasDatagrid\n         * @name getVisibleCellByIndex\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Column index.\n         * @param {number} y Row index.\n         */\n        self.getVisibleCellByIndex = function (x, y) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === x && c.rowIndex === y;\n            })[0];\n        };\n        /**\n         * Gets the cell at grid pixel coordinate x and y.  Author's note.  This function ties drawing and events together.  This is a very complex function and is core to the component.\n         * @memberof canvasDatagrid\n         * @name getCellAt\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Number of pixels from the left.\n         * @param {number} y Number of pixels from the top.\n         */\n        self.getCellAt = function (x, y, useTouchScrollZones) {\n            function getBorder(entitiy) {\n                if (entitiy.x + entitiy.width - (self.attributes.borderResizeZone * 0.4) < x && entitiy.x + entitiy.width + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'r';\n                }\n                if (entitiy.x - (self.attributes.borderResizeZone * 0.4) < x && entitiy.x + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'l';\n                }\n                if (entitiy.y + entitiy.height - (self.attributes.borderResizeZone * 0.4) < y && entitiy.y + entitiy.height + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 'b';\n                }\n                if (entitiy.y - (self.attributes.borderResizeZone * 0.4) < y && entitiy.y + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 't';\n                }\n            }\n            if (!self.visibleCells) { return; }\n            var border,\n                tsz = useTouchScrollZones ? self.attributes.touchScrollZone : 0,\n                moveMode = self.attributes.borderDragBehavior === 'move',\n                i,\n                l = self.visibleCells.length,\n                moveBorder,\n                xBorderBehavior = moveMode ? self.cursorGrab : 'ew-resize',\n                yBorderBehavior = moveMode ? self.cursorGrab : 'ns-resize',\n                cell,\n                entitiy;\n            if (!self.visibleCells || !self.visibleCells.length) { return; }\n            self.hasFocus = true;\n            if (!(y < self.height\n                && y > 0\n                && x < self.width\n                && x > 0)) {\n                self.hasFocus = false;\n                return {\n                    dragContext: 'inherit',\n                    context: 'inherit'\n                };\n            }\n            for (i = 0; i < l; i += 1) {\n                cell = self.visibleCells[i];\n                // interactive dimensions of the cell.  used for touch \"over size\" zones\n                entitiy = {\n                    x: cell.x,\n                    y: cell.y,\n                    height: cell.height,\n                    width: cell.width\n                };\n                if (useTouchScrollZones && /(vertical|horizontal)-scroll-/.test(cell.style)) {\n                    entitiy.x -= tsz;\n                    entitiy.y -= tsz;\n                    entitiy.height += tsz;\n                    entitiy.width += tsz;\n                }\n                if (entitiy.x - self.style.cellBorderWidth < x\n                        && entitiy.x + entitiy.width + self.style.cellBorderWidth > x\n                        && entitiy.y - self.style.cellBorderWidth < y\n                        && entitiy.y + entitiy.height + self.style.cellBorderWidth > y) {\n                    if (/frozen-row-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'row-resize';\n                        return cell;\n                    }\n                    if (/frozen-column-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'col-resize';\n                        return cell;\n                    }\n                    if (/selection-handle-/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'crosshair';\n                        return cell;\n                    }\n                    if (/vertical-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'vertical-scroll-box';\n                        cell.context = 'vertical-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isVerticalScrollBar = true;\n                        if (y > self.scrollBox.box.v.y + self.scrollBox.scrollBoxHeight) {\n                            cell.dragContext = 'vertical-scroll-bottom';\n                            cell.context = 'vertical-scroll-bottom';\n                        } else if (y < self.scrollBox.box.v.y) {\n                            cell.dragContext = 'vertical-scroll-top';\n                            cell.context = 'vertical-scroll-top';\n                        }\n                        self.cursor = 'default';\n                        return cell;\n                    }\n                    if (/horizontal-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'horizontal-scroll-box';\n                        cell.context = 'horizontal-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isHorizontalScrollBar = true;\n                        if (x > self.scrollBox.box.h.x + self.scrollBox.scrollBoxWidth) {\n                            cell.dragContext = 'horizontal-scroll-right';\n                            cell.context = 'horizontal-scroll-right';\n                        } else if (x < self.scrollBox.box.h.x) {\n                            cell.dragContext = 'horizontal-scroll-left';\n                            cell.context = 'horizontal-scroll-left';\n                        }\n                        self.cursor = 'default';\n                        return cell;\n                    }\n                    border = getBorder(entitiy);\n                    // check if the border of this cell is the border of the selection and if so show move cursor in move mode\n                    moveBorder = moveMode && cell.selectionBorder && cell.selectionBorder.indexOf(border) !== -1;\n                    if (['l', 'r'].indexOf(border) !== -1\n                            && (self.attributes.allowColumnResize || moveBorder)\n                            && ((self.attributes.allowColumnResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && ((self.attributes.allowRowHeaderResize && (cell.isRowHeader || cell.isCorner)) || !(cell.isRowHeader && cell.isCorner))) {\n                        if (((cell.isColumnHeader || cell.isCorner) || (self.attributes.allowColumnResizeFromCell && cell.isNormal)) && border === 'r') {\n                            cell.context = 'ew-resize';\n                            cell.dragContext = 'ew-resize';\n                            return cell;\n                        }\n                        if (!(cell.isColumnHeader || cell.isCorner) && moveBorder) {\n                            cell.context = xBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (['t', 'b'].indexOf(border) !== -1\n                            && cell.rowIndex > -1\n                            && (self.attributes.allowRowResize || moveBorder)\n                            && ((self.attributes.allowRowResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && !cell.isColumnHeader) {\n                        if (((cell.isRowHeader || cell.isCorner) || (self.attributes.allowRowResizeFromCell && cell.isNormal)) && border === 'b') {\n                            cell.context = 'ns-resize';\n                            cell.dragContext = 'ns-resize';\n                            return cell;\n                        }\n                        if (!(cell.isRowHeader || cell.isCorner) && moveBorder) {\n                            cell.context = yBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (cell.style === 'columnHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'column-reorder';\n                        return cell;\n                    }\n                    if (cell.style === 'rowHeaderCell') {\n                        if ((self.attributes.rowGrabZoneSize + (cell.y - self.style.cellBorderWidth) < y)\n                                || !self.attributes.allowRowReordering) {\n                            cell.dragContext = 'cell';\n                            cell.context = 'cell';\n                        } else {\n                            cell.context = self.cursorGrab;\n                            cell.dragContext = 'row-reorder';\n                        }\n                        return cell;\n                    }\n                    if (cell.isGrid) {\n                        self.hasFocus = false;\n                        cell.dragContext = 'cell-grid';\n                        cell.context = 'cell-grid';\n                        return cell;\n                    }\n                    if (cell.style === 'tree-grid') {\n                        self.hasFocus = false;\n                        cell.dragContext = 'tree';\n                        cell.context = 'tree';\n                        return cell;\n                    }\n                    cell.dragContext = 'cell';\n                    cell.context = 'cell';\n                    return cell;\n                }\n            }\n            self.hasFocus = true;\n            self.cursor = 'default';\n            return {\n                dragContext: 'background',\n                context: 'background',\n                style: 'background',\n                isBackground: true\n            };\n        };\n        /**\n         * Gets the bounds of current selection. \n         * @returns {rect} selection.\n         * @memberof canvasDatagrid\n         * @name getSelectionBounds\n         * @method\n         */\n        self.getSelectionBounds = function () {\n            var low = {x: Infinity, y: Infinity},\n                high = {x: -Infinity, y: -Infinity};\n            self.selections.forEach(function (row, rowIndex) {\n                var maxCol, minCol;\n                low.y = rowIndex < low.y ? rowIndex : low.y;\n                high.y = rowIndex > high.y ? rowIndex : high.y;\n                maxCol = Math.max.apply(null, row);\n                minCol = Math.min.apply(null, row);\n                low.x = minCol < low.x ? minCol : low.x;\n                high.x = maxCol > high.x ? maxCol : high.x;\n            });\n            return {\n                top: low.y,\n                left: low.x,\n                bottom: high.y,\n                right: high.x\n            };\n        };\n        /**\n         * Returns an auto generated schema based on data structure.\n         * @memberof canvasDatagrid\n         * @name getSchemaFromData\n         * @method\n         * @tutorial schema\n         * @returns {schema} schema A schema based on the first item in the data array.\n         */\n        self.getSchemaFromData = function (d) {\n            d = d || self.data;\n            return Object.keys(d[0] || {' ': ''}).map(function mapEachSchemaColumn(key, index) {\n                var type = self.getBestGuessDataType(key, d),\n                    i = {\n                        name: key,\n                        title: isNaN(parseInt(key, 10)) ? key : self.integerToAlpha(key).toUpperCase(),\n                        index: index,\n                        type: type,\n                        filter: self.filter(type)\n                    };\n                if (self.storedSettings\n                        && self.storedSettings.visibility\n                        && self.storedSettings.visibility[i.name] !== undefined) {\n                    i.hidden = !self.storedSettings.visibility[i.name];\n                }\n                return i;\n            });\n        };\n        /**\n         * Clears the change log grid.changes that keeps track of changes to the data set.\n         * This does not undo changes or alter data it is simply a convince array to keep\n         * track of changes made to the data since last this method was called.\n         * @memberof canvasDatagrid\n         * @name clearChangeLog\n         * @method\n         */\n        self.clearChangeLog = function () {\n            self.changes = [];\n        };\n        /**\n         * Selects an area of the grid.\n         * @memberof canvasDatagrid\n         * @name selectArea\n         * @method\n         * @param {rect} bounds A rect object representing the selected values.\n         */\n        self.selectArea = function (bounds, ctrl) {\n            self.selectionBounds = bounds || self.selectionBounds;\n            var ev, x, y, s = self.getSchema();\n            if (!ctrl) {\n                self.selections = [];\n            }\n            if (self.selectionBounds.top < -1\n                    || self.selectionBounds.bottom > self.data.length\n                    || self.selectionBounds.left < -1\n                    || self.selectionBounds.right > s.length) {\n                throw new Error('Impossible selection area');\n            }\n            for (x = self.selectionBounds.top; x <= self.selectionBounds.bottom; x += 1) {\n                self.selections[x] = [];\n                for (y = self.selectionBounds.left; y <= self.selectionBounds.right; y += 1) {\n                    if (self.selections[x].indexOf(y) === -1) {\n                        self.selections[x].push(y);\n                    }\n                }\n            }\n            ev = {\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            };\n            Object.defineProperty(ev, 'selectedData', {\n                get: function () {\n                    return self.getSelectedData();\n                }\n            });\n            self.dispatchEvent('selectionchanged', ev);\n        };\n        /**\n         * Returns the maximum text width for a given column by column name.\n         * @memberof canvasDatagrid\n         * @name findColumnMaxTextLength\n         * @method\n         * @returns {number} The number of pixels wide the maximum width value in the selected column.\n         * @param {string} name The name of the column to calculate the value's width of.\n         */\n        self.findColumnMaxTextLength = function (name) {\n            var m = -Infinity;\n            if (name === 'cornerCell') {\n                self.ctx.font = self.style.rowHeaderCellFont;\n                return self.ctx.measureText((self.data.length + (self.attributes.showNewRow ? 1 : 0)).toString()).width\n                    + self.style.autosizePadding + self.style.autosizeHeaderCellPadding\n                    + self.style.rowHeaderCellPaddingRight\n                    + self.style.rowHeaderCellPaddingLeft\n                    + (self.attributes.tree ? self.style.treeArrowWidth\n                        + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight : 0);\n            }\n            self.getSchema().forEach(function (col) {\n                if (col.name !== name) { return; }\n                self.ctx.font = self.style.columnHeaderCellFont;\n                var t = self.ctx.measureText(col.title || col.name).width\n                    + self.style.headerCellPaddingRight\n                    + self.style.headerCellPaddingLeft;\n                m = t > m ? t : m;\n            });\n            self.data.forEach(function (row) {\n                self.ctx.font = self.style.cellFont;\n                var t = self.ctx.measureText(row[name]).width\n                    + self.style.cellPaddingRight\n                    + self.style.cellPaddingLeft + self.style.cellAutoResizePadding;\n                m = t > m ? t : m;\n            });\n            return m;\n        };\n        /**\n         * Gets the total width of all header columns.\n         * @memberof canvasDatagrid\n         * @name getHeaderWidth\n         * @method\n         */\n        self.getHeaderWidth = function () {\n            return self.getVisibleSchema().reduce(function (total, header) {\n                return total + (header.width || self.style.cellWidth);\n            }, 0);\n        };\n        /**\n         * Gets the height of a row by index.\n         * @memberof canvasDatagrid\n         * @name getRowHeight\n         * @method\n         * @param {number} rowIndex The row index to lookup.\n         */\n        self.getRowHeight = function (rowIndex) {\n            return ((self.sizes.rows[rowIndex]\n                    || self.style.cellHeight) * self.scale);\n        };\n        /**\n         * Gets the width of a column by index.\n         * @memberof canvasDatagrid\n         * @name getColummnWidth\n         * @method\n         * @param {number} columnIndex The column index to lookup.\n         */\n        self.getColummnWidth = function (columnIndex) {\n            return ((self.sizes.columns[columnIndex]\n                    || self.getSchema()[columnIndex].width\n                    || self.style.cellWidth) * self.scale);\n        };\n        self.formatters.string = function cellFormatterString(e) {\n            return e.cell.value !== undefined ? e.cell.value : '';\n        };\n        self.formatters.rowHeaderCell = self.formatters.string;\n        self.formatters.headerCell = self.formatters.string;\n        self.formatters.number = self.formatters.string;\n        self.formatters.int = self.formatters.string;\n        self.formatters.html = self.formatters.string;\n        self.sorters.string = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (a[columnName] === undefined || a[columnName] === null) {\n                    return 1;\n                }\n                if (b[columnName] === undefined || b[columnName] === null) {\n                    return 0;\n                }\n                if (asc) {\n                    if (!a[columnName].localeCompare) { return 1; }\n                    return a[columnName].localeCompare(b[columnName]);\n                }\n                if (!b[columnName].localeCompare) { return 1; }\n                return b[columnName].localeCompare(a[columnName]);\n            };\n        };\n        self.sorters.number = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return a[columnName] - b[columnName];\n                }\n                return b[columnName] - a[columnName];\n            };\n        };\n        self.sorters.date = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return new Date(a[columnName]).getTime()\n                        - new Date(b[columnName]).getTime();\n                }\n                return new Date(b[columnName]).getTime()\n                        - new Date(a[columnName]).getTime();\n            };\n        };\n    };\n});\n","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.getClippingRect = function (ele) {\n            var boundingRect = self.position(self.parentNode),\n                eleRect = self.position(ele),\n                s = self.scrollOffset(self.canvas),\n                clipRect = {\n                    x: 0,\n                    y: 0,\n                    h: 0,\n                    w: 0\n                },\n                parentRect = {\n                    x: -Infinity,\n                    y: -Infinity,\n                    h: Infinity,\n                    w: Infinity\n                },\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth();\n            boundingRect.top -= s.top;\n            boundingRect.left -= s.left;\n            eleRect.top -= s.top;\n            eleRect.left -= s.left;\n            clipRect.h = boundingRect.top + boundingRect.height - ele.offsetTop - self.style.scrollBarWidth;\n            clipRect.w = boundingRect.left + boundingRect.width - ele.offsetLeft - self.style.scrollBarWidth;\n            clipRect.x = boundingRect.left + (eleRect.left * -1) + rowHeaderCellWidth;\n            clipRect.y = boundingRect.top + (eleRect.top * -1) + columnHeaderCellHeight;\n            return {\n                x: clipRect.x > parentRect.x ? clipRect.x : parentRect.x,\n                y: clipRect.y > parentRect.y ? clipRect.y : parentRect.y,\n                h: clipRect.h < parentRect.h ? clipRect.h : parentRect.h,\n                w: clipRect.w < parentRect.w ? clipRect.w : parentRect.w\n            };\n        };\n        self.clipElement = function (ele) {\n            var clipRect = self.getClippingRect(ele);\n            if (clipRect.w < 0) { clipRect.w = 0; }\n            if (clipRect.h < 0) { clipRect.h = 0; }\n            ele.style.clip = 'rect('\n                + clipRect.y + 'px,'\n                + clipRect.w + 'px,'\n                + clipRect.h + 'px,'\n                + clipRect.x + 'px'\n                + ')';\n            // INFO https://developer.mozilla.org/en-US/docs/Web/CSS/clip\n            // clip has been \"deprecated\" for clipPath.  Of course nothing but chrome\n            // supports clip path, so we'll keep using clip until someday clipPath becomes\n            // more widely support.  The code below works correctly, but setting clipPath and clip\n            // at the same time has undesirable results.\n            // ele.style.clipPath = 'polygon('\n            //     + clipRect.x + 'px ' + clipRect.y + 'px,'\n            //     + clipRect.x + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.y + 'px'\n            //     + ')';\n        };\n        self.scrollOffset = function (e) {\n            var x = 0, y = 0, scrollingElement = document.scrollingElement || { scrollLeft: 0, scrollTop: 0 };\n            while (e.parentNode && e.nodeName !== 'CANVAS-DATAGRID' && e !== self.intf) {\n                if (e.nodeType !== 'canvas-datagrid-tree'\n                        && e.nodeType !== 'canvas-datagrid-cell') {\n                    x -= e.scrollLeft;\n                    y -= e.scrollTop;\n                }\n                e = e.parentNode;\n            }\n            return {\n                left: x - scrollingElement.scrollLeft,\n                top: y - scrollingElement.scrollTop\n            };\n        };\n        self.resizeEditInput = function () {\n            if (self.input && self.input.editCell) {\n                var pos = self.canvas.getBoundingClientRect(),\n                    s = self.scrollOffset(self.intf),\n                    bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                    borderWidth = (self.style.cellBorderWidth * bm),\n                    cell = self.getVisibleCellByIndex(self.input.editCell.columnIndex, self.input.editCell.rowIndex)\n                        || {x: -100, y: -100, height: 0, width: 0};\n                if (self.mobile) {\n                    self.input.style.left = '0';\n                    self.input.style.top = (self.height - self.style.mobileEditInputHeight) - borderWidth - 1 + 'px';\n                    self.input.style.height = self.style.mobileEditInputHeight + 'px';\n                    self.input.style.width = self.width - borderWidth - 1 + 'px';\n                    return;\n                }\n                self.input.style.left = pos.left + cell.x + self.canvasOffsetLeft - s.left + 'px';\n                self.input.style.top = pos.top + cell.y - self.style.cellBorderWidth + self.canvasOffsetTop - s.top + 'px';\n                self.input.style.height = cell.height - borderWidth + 'px';\n                self.input.style.width = cell.width - self.style.cellPaddingLeft + 'px';\n                self.clipElement(self.input);\n            }\n        };\n        self.position = function (e, ignoreScrollOffset) {\n            var x = 0, y = 0, s = e, h, w;\n            while (e.offsetParent && e.nodeName !== 'CANVAS-DATAGRID') {\n                x += e.offsetLeft;\n                y += e.offsetTop;\n                h = e.offsetHeight;\n                w = e.offsetWidth;\n                e = e.offsetParent;\n            }\n            if (ignoreScrollOffset) {\n                return {left: x, top: y, height: h, width: w};\n            }\n            e = s;\n            s = self.scrollOffset(e);\n            return { left: x + s.left, top: y + s.top, height: h, width: w };\n        };\n        self.getLayerPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.clientX - rect.left,\n                    y: e.clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        /**\n         * Ends editing, optionally aborting the edit.\n         * @memberof canvasDatagrid\n         * @name endEdit\n         * @method\n         * @param {boolean} abort When true, abort the edit.\n         */\n        self.endEdit = function (abort) {\n            var cell = self.input.editCell,\n                y = cell.rowIndex;\n            function abortEdit() {\n                abort = true;\n            }\n            if (self.dispatchEvent('beforeendedit', {\n                    cell: cell,\n                    newValue: self.input.value,\n                    oldValue: cell.value,\n                    abort: abortEdit,\n                    input: self.input\n                })) { return false; }\n            if (self.input.value !== cell.value && !abort) {\n                self.changes[y] = self.changes[y] || {};\n                self.changes[y][cell.header.name] = self.input.value;\n                if (!cell.data) {\n                    self.data[cell.rowIndex] = {};\n                    cell.data = self.data[cell.rowIndex];\n                }\n                cell.data[cell.header.name] = self.input.value;\n                if (y === self.data.length) {\n                    if (self.dispatchEvent('newrow', {\n                            value: self.input.value,\n                            defaultValue: cell.value,\n                            aborted: abort,\n                            cell: cell,\n                            input: self.input\n                        })) { return false; }\n                    self.addRow(cell.data);\n                    self.createNewRowData();\n                }\n                self.draw(true);\n            }\n            if (self.input.parentNode) {\n                self.input.parentNode.removeChild(self.input);\n            }\n            self.intf.focus();\n            self.dispatchEvent('endedit', {\n                cell: cell,\n                value: self.input.value,\n                aborted: abort,\n                input: self.input\n            });\n            self.input = undefined;\n            return true;\n        };\n        /**\n         * Begins editing at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name beginEditAt\n         * @method\n         * @param {number} x The column index of the cell to edit.\n         * @param {number} y The row index of the cell to edit.\n         */\n        self.beginEditAt = function (x, y) {\n            if (!self.attributes.editable) { return; }\n            if (self.input) {\n                self.endEdit();\n            }\n            var cell = self.getVisibleCellByIndex(x, y),\n                s = self.getSchema(),\n                adjacentCells,\n                enumItems,\n                enu,\n                option,\n                valueInEnum;\n            if (!(cell && cell.header)) { return; }\n            //HACK for IE10, does not like literal enum\n            enu = cell.header['enum'];\n            if (self.dispatchEvent('beforebeginedit', {cell: cell})) { return false; }\n            self.scrollIntoView(x, y);\n            self.setActiveCell(x, y);\n            adjacentCells = self.getAdjacentCells();\n            if (enu) {\n                self.input = document.createElement('select');\n            } else {\n                self.input = document.createElement(self.attributes.multiLine\n                    ? 'textarea' : 'input');\n            }\n            cell = self.getVisibleCellByIndex(x, y);\n            //HACK on mobile devices sometimes edit can begin without the cell being in view, I don't know how.\n            if (!cell) { return; }\n            if (enu) {\n                // add enums\n                if (typeof enu === 'function') {\n                    enumItems = enu.apply(self.intf, [{cell: cell}]);\n                } else if (Array.isArray(enu)) {\n                    enumItems = enu;\n                }\n                enumItems.forEach(function (e) {\n                    var i = document.createElement('option'),\n                        val,\n                        title;\n                    if (Array.isArray(e)) {\n                        val = e[0];\n                        title = e[1];\n                    } else {\n                        val = e;\n                        title = e;\n                    }\n                    if (val === cell.value) { valueInEnum = true; }\n                    i.value = val;\n                    i.innerHTML = title;\n                    self.input.appendChild(i);\n                });\n                if (!valueInEnum) {\n                    option = document.createElement('option');\n                    option.value = cell.value;\n                    option.innerHTML = cell.value;\n                    self.input.appendChild(option);\n                }\n                self.input.addEventListener('change', function () {\n                    self.endEdit();\n                    self.draw(true);\n                });\n            }\n            // if the user has not prevented the default action, append to the body\n            if (!self.dispatchEvent('appendeditinput', {cell: cell, input:self.input})) { \n                document.body.appendChild(self.input);\n            }\n            self.createInlineStyle(self.input, self.mobile ? 'canvas-datagrid-edit-mobile-input' : 'canvas-datagrid-edit-input');\n            self.input.style.position = 'absolute';\n            self.input.editCell = cell;\n            self.resizeEditInput();\n            self.input.style.zIndex = self.style.editCellZIndex;\n            self.input.style.fontSize = (parseInt(self.style.editCellFontSize, 10) * self.scale) + 'px';\n            self.input.value = [null, undefined].indexOf(cell.value) !== -1 ? '' : cell.value;\n            self.input.focus();\n            self.input.addEventListener('click', self.stopPropagation);\n            self.input.addEventListener('dblclick', self.stopPropagation);\n            self.input.addEventListener('mouseup', self.stopPropagation);\n            self.input.addEventListener('mousedown', self.stopPropagation);\n            self.input.addEventListener('keydown', function (e) {\n                var nx = cell.columnIndex,\n                    ny = cell.rowIndex;\n                // esc\n                if (e.keyCode === 27) {\n                    self.endEdit(true);\n                    self.draw(true);\n                // enter\n                } else if (e.keyCode === 13\n                        && (!self.attributes.multiLine\n                            || (self.attributes.multiLine && e.shiftKey))) {\n                    self.endEdit();\n                    self.draw(true);\n                } else if (e.keyCode === 9) {\n                    e.preventDefault();\n                    if (!self.endEdit()) {\n                        return;\n                    }\n                    if (e.shiftKey) {\n                        nx = adjacentCells.left;\n                    } else {\n                        nx = adjacentCells.right;\n                    }\n                    if (adjacentCells.left === x && e.shiftKey) {\n                        nx = adjacentCells.last;\n                        ny -= 1;\n                    }\n                    if (adjacentCells.right === x && !e.shiftKey) {\n                        nx = adjacentCells.first;\n                        ny += 1;\n                    }\n                    if (ny < 0) {\n                        ny = self.data.length - 1;\n                    }\n                    if (ny > self.data.length - 1) {\n                        ny = 0;\n                    }\n                    self.scrollIntoView(nx, ny);\n                    self.beginEditAt(nx, ny);\n                }\n            });\n            self.dispatchEvent('beginedit', {cell: cell, input: self.input});\n        };\n        self.createInlineStyle = function (el, className) {\n            var css = {\n                'canvas-datagrid-context-menu-filter-input': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextFilterInputBackground,\n                    color: self.style.contextFilterInputColor,\n                    border: self.style.contextFilterInputBorder,\n                    borderRadius: self.style.contextFilterInputBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextFilterInputFontFamily,\n                    fontSize: self.style.contextFilterInputFontSize\n                },\n                'canvas-datagrid-context-menu-filter-button': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextFilterButtonBorder,\n                    borderRadius: self.style.contextFilterButtonBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFilterButtonFontFamily,\n                    fontSize: self.style.contextMenuFilterButtonFontSize\n                },\n                'canvas-datagrid-context-child-arrow': {\n                    cssFloat: 'right',\n                    color: self.style.childContextMenuArrowColor,\n                    fontSize: self.style.contextMenuChildArrowFontSize,\n                    fontFamily: self.style.contextMenuFontFamily,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-autocomplete': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    position: 'absolute',\n                    zIndex: 9999,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-autocomplete-item': {\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor\n                },\n                'canvas-datagrid-autocomplete-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-canvas': {\n                    position: 'absolute',\n                    zIndex: '-1'\n                },\n                'canvas-datagrid': {\n                    display: 'block'\n                },\n                'canvas-datagrid-control-input': {\n                    position: 'fixed',\n                    top: '-5px',\n                    left: '-5px',\n                    border: 'none',\n                    opacity: '0',\n                    cursor: 'pointer',\n                    width: '1px',\n                    height: '1px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize\n                },\n                'canvas-datagrid-edit-mobile-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 0',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.mobileEditFontFamily,\n                    fontSize: self.style.mobileEditFontSize,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-edit-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 ' + self.style.editCellPaddingLeft + 'px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.editCellFontFamily,\n                    fontSize: self.style.editCellFontSize,\n                    boxShadow: self.style.editCellBoxShadow,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-context-menu-item-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-context-menu-label': {\n                    margin: self.style.contextMenuLabelMargin,\n                    display: self.style.contextMenuLabelDisplay,\n                    minWidth: self.style.contextMenuLabelMinWidth,\n                    maxWidth: self.style.contextMenuLabelMaxWidth\n                },\n                'canvas-datagrid-context-menu-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-context-menu': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap',\n                    cursor: self.style.contextMenuCursor\n                },\n                'canvas-datagrid-invalid-search-regExp': {\n                    background: self.style.contextMenuFilterInvalidExpresion\n                }\n            };\n            if (css[className]) {\n                Object.keys(css[className]).map(function (prop) {\n                    el.style[prop] = css[className][prop];\n                });\n            }\n            return;\n        };\n        self.appendTo = function (e) {\n            self.parentNode = e;\n            self.setDom();\n        };\n        self.setDom = function () {\n            if (self.isChildGrid) {\n                self.parentGrid = self.parentNode.parentGrid;\n                self.ctx = self.parentGrid.context;\n                self.canvas = self.parentGrid.canvas;\n                self.controlInput = self.parentGrid.controlInput;\n                self.eventParent = self.canvas;\n            } else {\n                self.controlInput = self.controlInput || document.createElement('input');\n                self.controlInput.onblur = self.intf.blur;\n                self.createInlineStyle(self.controlInput, 'canvas-datagrid-control-input');\n                self.isChildGrid = false;\n                self.parentDOMNode = self.parentNode;\n                self.parentIsCanvas = /^canvas$/i.test(self.parentDOMNode.tagName);\n                if (self.parentIsCanvas) {\n                    self.canvas = self.parentDOMNode;\n                    document.body.appendChild(self.controlInput);\n                } else {\n                    self.canvas = document.createElement('canvas');\n                    self.parentDOMNode.appendChild(self.canvas);\n                    document.body.appendChild(self.controlInput);\n                }\n                self.createInlineStyle(self.canvas, 'canvas-datagrid');\n                self.ctx = self.canvas.getContext('2d');\n                self.ctx.textBaseline = 'alphabetic';\n                self.eventParent = self.canvas;\n            }\n            self.parentNodeStyle = self.canvas.style;\n            self.controlInput.setAttribute('readonly', true);\n            self.controlInput.addEventListener('blur', function (e) {\n                if (e.target !== self.canvas) {\n                    self.hasFocus = false;\n                }\n            });\n            self.eventParent.addEventListener('scroll', self.resize, false);\n            self.eventParent.addEventListener('touchstart', self.touchstart, false);\n            self.eventParent.addEventListener('mouseup', self.mouseup, false);\n            self.eventParent.addEventListener('mousedown', self.mousedown, false);\n            self.eventParent.addEventListener('dblclick', self.dblclick, false);\n            self.eventParent.addEventListener('click', self.click, false);\n            self.eventParent.addEventListener('mousemove', self.mousemove);\n            self[self.isChildGrid ? 'parentGrid' : 'eventParent'].addEventListener('wheel', self.scrollWheel, false);\n            self.canvas.addEventListener('contextmenu', self.contextmenuEvent, false);\n            self.controlInput.addEventListener('copy', self.copy);\n            self.controlInput.addEventListener('cut', self.cut);\n            self.controlInput.addEventListener('paste', self.paste);\n            self.controlInput.addEventListener('keypress', self.keypress, false);\n            self.controlInput.addEventListener('keyup', self.keyup, false);\n            self.controlInput.addEventListener('keydown', self.keydown, false);\n            window.addEventListener('resize', self.resize);\n        };\n    };\n});\n","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false, Event: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var zIndexTop, hoverScrollTimeout, autoCompleteContext;\n        function applyContextItemStyle(contextItemContainer) {\n            self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item' + (self.mobile ? '-mobile' : ''));\n            contextItemContainer.addEventListener('mouseover', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n            });\n            contextItemContainer.addEventListener('mouseout', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n            });\n        }\n        function createContextMenu(ev, pos, items, parentContextMenu) {\n            var container = document.createElement('div'),\n                upArrow = document.createElement('div'),\n                downArrow = document.createElement('div'),\n                children = [],\n                selectedIndex = -1,\n                intf = {},\n                rect;\n            if (!Array.isArray(items)) { throw new Error('createContextMenu expects an array.'); }\n            function createItems() {\n                items.forEach(function (item) {\n                    var contextItemContainer = document.createElement('div'),\n                        childMenuArrow;\n                    function removeChildContext(e) {\n                        if (e.relatedTarget === container\n                                || item.contextMenu.container === e.relatedTarget\n                                || childMenuArrow === e.relatedTarget\n                                || (contextItemContainer === e.relatedTarget)\n                                || item.contextMenu.container.contains(e.relatedTarget)\n                                ) { return; }\n                        item.contextMenu.dispose();\n                        children.splice(children.indexOf(item.contextMenu), 1);\n                        item.contextMenu = undefined;\n                        contextItemContainer.removeEventListener('mouseout', removeChildContext);\n                        container.removeEventListener('mouseout', removeChildContext);\n                        contextItemContainer.setAttribute('contextOpen', '0');\n                        contextItemContainer.setAttribute('opening', '0');\n                    }\n                    function contextAddCallback(items) {\n                        // check yet again if the user hasn't moved off\n                        if (contextItemContainer.getAttribute('opening') !== '1' ||\n                                contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        var cPos = contextItemContainer.getBoundingClientRect();\n                        cPos = {\n                            left: cPos.left + self.style.childContextMenuMarginLeft + container.offsetWidth,\n                            top: cPos.top + self.style.childContextMenuMarginTop,\n                            bottom: cPos.bottom,\n                            right: cPos.right\n                        };\n                        item.contextMenu = createContextMenu(ev, cPos, items, intf);\n                        contextItemContainer.setAttribute('contextOpen', '1');\n                        contextItemContainer.addEventListener('mouseout', removeChildContext);\n                        container.addEventListener('mouseout', removeChildContext);\n                        children.push(item.contextMenu);\n                    }\n                    function createChildContext() {\n                        var i;\n                        if (contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        contextItemContainer.setAttribute('opening', '1');\n                        if (typeof item.items === 'function') {\n                            i  = item.items.apply(intf, [function (items) {\n                                contextAddCallback(items);\n                            }]);\n                            if (i !== undefined && Array.isArray(i)) {\n                                contextAddCallback(i);\n                            }\n                            return;\n                        }\n                        contextAddCallback(item.items);\n                    }\n                    function addItem(item) {\n                        function addContent(content) {\n                            if (content === null) { return; }\n                            if (typeof content === 'function') {\n                                return addContent(content(ev));\n                            }\n                            if (typeof content === 'object') {\n                                contextItemContainer.appendChild(content);\n                                return;\n                            }\n                            applyContextItemStyle(contextItemContainer);\n                            contextItemContainer.innerHTML = content;\n                            return;\n                        }\n                        addContent(item.title);\n                        item.contextItemContainer = contextItemContainer;\n                        if ((item.items && item.items.length > 0) || typeof item.items === 'function') {\n                            childMenuArrow = document.createElement('div');\n                            self.createInlineStyle(childMenuArrow, 'canvas-datagrid-context-child-arrow');\n                            childMenuArrow.innerHTML = self.style.childContextMenuArrowHTML;\n                            contextItemContainer.appendChild(childMenuArrow);\n                            contextItemContainer.addEventListener('mouseover', createChildContext);\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                contextItemContainer.setAttribute('opening', '0');\n                            });\n                        }\n                        if (item.click) {\n                            contextItemContainer.addEventListener('click', function (ev) {\n                                item.click.apply(self, [ev]);\n                            });\n                        }\n                    }\n                    addItem(item);\n                    container.appendChild(contextItemContainer);\n                });\n            }\n            function clickIndex(idx) {\n                items[idx].contextItemContainer.dispatchEvent(new Event('click'));\n            }\n            function checkArrowVisibility() {\n                if (container.scrollTop > 0) {\n                    self.parentDOMNode.appendChild(upArrow);\n                } else if (upArrow.parentNode) {\n                    upArrow.parentNode.removeChild(upArrow);\n                }\n                if (container.scrollTop >= container.scrollHeight - container.offsetHeight && downArrow.parentNode) {\n                    downArrow.parentNode.removeChild(downArrow);\n                } else if (container.scrollHeight - container.offsetHeight > 0\n                        && !(container.scrollTop >= container.scrollHeight - container.offsetHeight)) {\n                    self.parentDOMNode.appendChild(downArrow);\n                }\n            }\n            function startHoverScroll(type) {\n                return function t() {\n                    var a = self.attributes.contextHoverScrollAmount;\n                    if (type === 'up' && container.scrollTop === 0) { return; }\n                    if (type === 'down' && container.scrollTop === container.scrollHeight) { return; }\n                    container.scrollTop += (type === 'up' ? -a : a);\n                    hoverScrollTimeout = setTimeout(t, self.attributes.contextHoverScrollRateMs, type);\n                };\n            }\n            function endHoverScroll(type) {\n                return function () {\n                    clearTimeout(hoverScrollTimeout);\n                };\n            }\n            function init() {\n                var loc = {},\n                    s = self.scrollOffset(self.canvas);\n                if (zIndexTop === undefined) {\n                    zIndexTop = self.style.contextMenuZIndex;\n                }\n                createItems();\n                self.createInlineStyle(container, 'canvas-datagrid-context-menu' + (self.mobile ? '-mobile' : ''));\n                loc.x = pos.left - s.left;\n                loc.y = pos.top - s.top;\n                loc.height = 0;\n                zIndexTop += 1;\n                container.style.position = 'absolute';\n                upArrow.style.color = self.style.contextMenuArrowColor;\n                downArrow.style.color = self.style.contextMenuArrowColor;\n                [upArrow, downArrow].forEach(function (el) {\n                    el.style.textAlign = 'center';\n                    el.style.position = 'absolute';\n                    el.style.zIndex = zIndexTop + 1;\n                });\n                container.style.zIndex = zIndexTop;\n                if (parentContextMenu && parentContextMenu.inputDropdown) {\n                    container.style.maxHeight = window.innerHeight - loc.y - self.style.autocompleteBottomMargin + 'px';\n                    container.style.minWidth = pos.width + 'px';\n                    loc.y += pos.height;\n                }\n                if (self.mobile) {\n                    container.style.width = pos.width + 'px';\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                container.addEventListener('scroll', checkArrowVisibility);\n                container.addEventListener('wheel', function (e) {\n                    if (self.hasFocus) {\n                        container.scrollTop += e.deltaY;\n                        container.scrollLeft += e.deltaX;\n                    }\n                    checkArrowVisibility();\n                });\n                upArrow.innerHTML = self.style.contextMenuArrowUpHTML;\n                downArrow.innerHTML = self.style.contextMenuArrowDownHTML;\n                container.appendChild(upArrow);\n                document.body.appendChild(downArrow);\n                document.body.appendChild(container);\n                rect = container.getBoundingClientRect();\n                // TODO: fix !(parentContextMenu && parentContextMenu.inputDropdown) state (autocomplete)\n                if (rect.bottom > window.innerHeight) {\n                    if (!(parentContextMenu && parentContextMenu.inputDropdown)) {\n                        loc.y -= (rect.bottom + self.style.contextMenuWindowMargin) - window.innerHeight;\n                    }\n                    if (loc.y < 0) { loc.y = self.style.contextMenuWindowMargin; }\n                    if (container.offsetHeight > window.innerHeight - self.style.contextMenuWindowMargin) {\n                        container.style.height = window.innerHeight - (self.style.contextMenuWindowMargin * 2) + 'px';\n                    }\n                }\n                if (rect.right > window.innerWidth) {\n                    loc.x -= rect.right - window.innerWidth + self.style.contextMenuWindowMargin;\n                }\n                if (loc.x < 0) { loc.x = self.style.contextMenuWindowMargin; }\n                if (loc.y < 0) { loc.y = self.style.contextMenuWindowMargin; }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                rect = container.getBoundingClientRect();\n                upArrow.style.top = rect.top + 'px';\n                downArrow.style.top = rect.top + rect.height - downArrow.offsetHeight + 'px';\n                upArrow.style.left = rect.left + 'px';\n                downArrow.style.left = rect.left + 'px';\n                downArrow.style.width = container.offsetWidth + 'px';\n                upArrow.style.width = container.offsetWidth + 'px';\n                downArrow.addEventListener('mouseover', startHoverScroll('down'));\n                downArrow.addEventListener('mouseout', endHoverScroll('down'));\n                upArrow.addEventListener('mouseover', startHoverScroll('up'));\n                upArrow.addEventListener('mouseout', endHoverScroll('up'));\n                checkArrowVisibility();\n            }\n            intf.parentGrid = self.intf;\n            intf.parentContextMenu = parentContextMenu;\n            intf.container = container;\n            init();\n            intf.clickIndex = clickIndex;\n            intf.rect = rect;\n            intf.items = items;\n            intf.upArrow = upArrow;\n            intf.downArrow = downArrow;\n            intf.dispose = function () {\n                clearTimeout(hoverScrollTimeout);\n                children.forEach(function (c) {\n                    c.dispose();\n                });\n                [downArrow, upArrow, container].forEach(function (el) {\n                    if (el.parentNode) { el.parentNode.removeChild(el); }\n                });\n            };\n            Object.defineProperty(intf, 'selectedIndex', {\n                get: function () {\n                    return selectedIndex;\n                },\n                set: function (value) {\n                    if (typeof value !== 'number' || isNaN(value || !isFinite(value))) {\n                        throw new Error('Context menu selected index must be a sane number.');\n                    }\n                    selectedIndex = value;\n                    if (selectedIndex > items.length - 1) {\n                        selectedIndex = items.length - 1;\n                    }\n                    if (selectedIndex < 0) {\n                        selectedIndex = 0;\n                    }\n                    items.forEach(function (item, index) {\n                        if (index === selectedIndex) {\n                            return self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                        }\n                        self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item');\n                    });\n                }\n            });\n            return intf;\n        }\n        function createFilterContextMenuItems(e) {\n            var filterContainer = document.createElement('div'),\n                filterLabel = document.createElement('div'),\n                filterAutoCompleteButton = document.createElement('button'),\n                filterInput = document.createElement('input'),\n                n = e.cell && e.cell.header ? e.cell.header.title || e.cell.header.name : '',\n                autoCompleteItems,\n                iRect;\n            function checkRegExpErrorState() {\n                filterInput.style.background = self.style.contextFilterInputBackground;\n                filterInput.style.color = self.style.contextFilterInputColor;\n                if (self.invalidFilterRegEx) {\n                    filterInput.style.background = self.style.contextFilterInvalidRegExpBackground;\n                    filterInput.style.color = self.style.contextFilterInvalidRegExpColor;\n                }\n            }\n            function fillAutoComplete() {\n                var count = 0;\n                autoCompleteItems = {};\n                self.data.forEach(function (row) {\n                    var value = row[e.cell.header.name];\n                    if (autoCompleteItems[value] || count > self.attributes.maxAutoCompleteItems) { return; }\n                    count += 1;\n                    autoCompleteItems[value] = {\n                        title: self.formatters[e.cell.header.type || 'string']({ cell: { value: value }}),\n                        click: function (e) {\n                            filterInput.value = value;\n                            e.stopPropagation();\n                            filterInput.dispatchEvent(new Event('keyup'));\n                            self.disposeAutocomplete();\n                            return;\n                        }\n                    };\n                });\n                autoCompleteItems = Object.keys(autoCompleteItems).map(function (key) {\n                    return autoCompleteItems[key];\n                });\n            }\n            function createAutoCompleteContext(ev) {\n                if (ev && [40, 38, 13, 9].indexOf(ev.keyCode) !== -1) { return; }\n                fillAutoComplete();\n                iRect = filterInput.getBoundingClientRect();\n                if (autoCompleteContext) {\n                    autoCompleteContext.dispose();\n                    autoCompleteContext = undefined;\n                }\n                autoCompleteContext = createContextMenu(e, {\n                    left: iRect.left,\n                    top: iRect.top,\n                    right: iRect.right,\n                    bottom: iRect.bottom,\n                    height: iRect.height,\n                    width: iRect.width\n                }, autoCompleteItems, {inputDropdown: true});\n                autoCompleteContext.selectedIndex = 0;\n            }\n            self.createInlineStyle(filterLabel, 'canvas-datagrid-context-menu-label');\n            self.createInlineStyle(filterAutoCompleteButton, 'canvas-datagrid-context-menu-filter-button');\n            self.createInlineStyle(filterInput, 'canvas-datagrid-context-menu-filter-input');\n            checkRegExpErrorState();\n            filterInput.onclick = self.disposeAutocomplete;\n            filterInput.addEventListener('keydown', function (e) {\n                //down\n                if (e.keyCode === 40) {\n                    autoCompleteContext.selectedIndex += 1;\n                }\n                //up\n                if (e.keyCode === 38) {\n                    autoCompleteContext.selectedIndex -= 1;\n                }\n                //enter\n                if (e.keyCode === 13) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    self.disposeContextMenu();\n                }\n                //tab\n                if (e.keyCode === 9) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    e.preventDefault();\n                }\n                //esc\n                if (e.keyCode === 27) {\n                    self.disposeContextMenu();\n                }\n            });\n            filterInput.addEventListener('keyup', function () {\n                self.setFilter(e.cell.header.name, filterInput.value);\n            });\n            filterInput.addEventListener('keyup', createAutoCompleteContext);\n            ['focus', 'blur', 'keydown', 'keyup', 'change'].forEach(function (en) {\n                filterInput.addEventListener(en, checkRegExpErrorState);\n            });\n            filterInput.value = e.cell.header ? self.columnFilters[e.cell.header.name] || '' : '';\n            filterLabel.innerHTML = self.attributes.filterOptionText.replace(/%s/g, n);\n            filterAutoCompleteButton.onclick = function () {\n                if (autoCompleteContext) {\n                    return self.disposeAutocomplete();\n                }\n                createAutoCompleteContext();\n            };\n            filterAutoCompleteButton.innerHTML = self.style.contextFilterButtonHTML;\n            filterContainer.addEventListener('click', function (e) {\n                return e.stopPropagation();\n            });\n            filterContainer.appendChild(filterLabel);\n            filterContainer.appendChild(filterInput);\n            filterContainer.appendChild(filterAutoCompleteButton);\n            e.items.push({\n                title: filterContainer\n            });\n            if (Object.keys(self.columnFilters).length) {\n                Object.keys(self.columnFilters).forEach(function (cf) {\n                    var h = self.getHeaderByName(cf);\n                    e.items.push({\n                        title: self.attributes.removeFilterOptionText.replace(/%s/g, h.title || h.name),\n                        click: function removeFilterClick(e) {\n                            e.preventDefault();\n                            self.setFilter(cf, '');\n                            self.controlInput.focus();\n                        }\n                    });\n                });\n            }\n        }\n        function addDefaultContextMenuItem(e) {\n            var isNormalCell = !(e.cell.isBackground || e.cell.isColumnHeaderCellCap\n                    || e.cell.isScrollBar || e.cell.isCorner || e.cell.isRowHeader)\n                    && e.cell.header;\n            if (self.attributes.showFilter && isNormalCell) {\n                createFilterContextMenuItems(e);\n            }\n            if (self.attributes.showCopy\n                    && self.selections.reduce(function (p, r) {\n                        return p + r.length;\n                    }, 0) > 0) {\n                e.items.push({\n                    title: self.attributes.copyText,\n                    click: function () {\n                        document.execCommand('copy');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.showPaste && self.clipBoardData) {\n                e.items.push({\n                    title: self.attributes.pasteText,\n                    click: function () {\n                        self.paste(self.clipBoardData, e.cell.columnIndex, e.cell.rowIndex);\n                        self.draw();\n                    }\n                });\n            }\n            if (self.attributes.showColumnSelector) {\n                e.items.push({\n                    title: self.attributes.columnSelectorText,\n                    items: function () {\n                        var d = [];\n                        self.getSchema().forEach(function (column) {\n                            function toggleColumnVisibility(e) {\n                                column.hidden = !column.hidden;\n                                e.preventDefault();\n                                self.stopPropagation(e);\n                                self.disposeContextMenu();\n                                self.resize(true);\n                                self.setStorageData();\n                            }\n                            var el = document.createElement('div');\n                            applyContextItemStyle(el);\n                            el.addEventListener('touchstart', toggleColumnVisibility);\n                            el.addEventListener('click', toggleColumnVisibility);\n                            el.innerHTML = (column.hidden ? self.attributes.columnSelectorHiddenText\n                                    : self.attributes.columnSelectorVisibleText)\n                                    + (column.title || column.name);\n                            d.push({\n                                title: el\n                            });\n                        });\n                        return d;\n                    }\n                });\n                if (e.cell && e.cell.header && e.cell.columnIndex > -1) {\n                    e.items.push({\n                        title: self.attributes.hideColumnText\n                            .replace(/%s/ig, e.cell.header.title || e.cell.header.name),\n                        click: function (ev) {\n                            self.getSchema()[e.cell.columnIndex].hidden = true;\n                            ev.preventDefault();\n                            self.stopPropagation(ev);\n                            self.disposeContextMenu();\n                            self.setStorageData();\n                            setTimeout(function () { self.resize(true); }, 10);\n                        }\n                    });\n                }\n            }\n            if (self.attributes.saveAppearance && self.attributes.showClearSettingsOption\n                    && (Object.keys(self.sizes.rows).length > 0\n                        || Object.keys(self.sizes.columns).length > 0)) {\n                e.items.push({\n                    title: self.attributes.clearSettingsOptionText,\n                    click: function (e) {\n                        e.preventDefault();\n                        self.sizes.rows = {};\n                        self.sizes.columns = {};\n                        self.createRowOrders();\n                        self.createColumnOrders();\n                        self.storedSettings = undefined;\n                        self.dispatchEvent('resizecolumn', {columnWidth: self.style.cellWidth});\n                        self.dispatchEvent('resizerow', {cellHeight: self.style.cellHeight});\n                        self.setStorageData();\n                        self.resize(true);\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.allowSorting && self.attributes.showOrderByOption && isNormalCell) {\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextAsc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'asc');\n                        self.controlInput.focus();\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextDesc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'desc');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n        }\n        self.disposeAutocomplete = function () {\n            if (autoCompleteContext) {\n                autoCompleteContext.dispose();\n                autoCompleteContext = undefined;\n            }\n        };\n        self.disposeContextMenu = function () {\n            document.removeEventListener('click', self.disposeContextMenu);\n            zIndexTop = self.style.contextMenuZIndex;\n            self.disposeAutocomplete();\n            if (self.contextMenu) {\n                self.contextMenu.dispose();\n            }\n            self.contextMenu = undefined;\n        };\n        self.contextmenuEvent = function (e, overridePos) {\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            function createDiposeEvent() {\n                requestAnimationFrame(function () {\n                    document.addEventListener('click', self.disposeContextMenu);\n                    document.removeEventListener('mouseup', createDiposeEvent);\n                });\n            }\n            var contextPosition,\n                items = [],\n                pos = overridePos || self.getLayerPos(e),\n                ev = {\n                    NativeEvent: e,\n                    cell: self.getCellAt(pos.x, pos.y),\n                    items: items\n                };\n            if (!ev.cell.isGrid) {\n                addDefaultContextMenuItem(ev);\n            }\n            if (self.dispatchEvent('contextmenu', ev)) {\n                return;\n            }\n            if (!ev.cell.isGrid) {\n                if (self.contextMenu) {\n                    self.disposeContextMenu();\n                }\n                contextPosition = {\n                    left: pos.x + pos.rect.left\n                        + self.style.contextMenuMarginLeft + self.canvasOffsetLeft,\n                    top: pos.y + pos.rect.top\n                        + self.style.contextMenuMarginTop + self.canvasOffsetTop,\n                    right: ev.cell.width + ev.cell.x + pos.rect.left,\n                    bottom: ev.cell.height + ev.cell.y + pos.rect.top,\n                    height: ev.cell.height,\n                    width: ev.cell.width\n                };\n                if (self.mobile) {\n                    contextPosition.left = self.style.mobileContextMenuMargin + 'px';\n                    contextPosition.width = self.width - (self.style.mobileContextMenuMargin * 2) + 'px';\n                }\n                self.contextMenu = createContextMenu(ev, contextPosition, items);\n                document.addEventListener('mouseup', createDiposeEvent);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n","/*jslint browser: true, unparam: true, todo: true*/\n/*globals HTMLElement: false, Reflect: false, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self, ctor) {\n        self.scale = 1;\n        self.orders = {\n            rows: [],\n            columns: []\n        };\n        self.appliedInlineStyles = {};\n        self.cellGridAttributes = {};\n        self.treeGridAttributes = {};\n        self.visibleRowHeights = [];\n        self.hasFocus = false;\n        self.activeCell = {\n            columnIndex: 0,\n            rowIndex: 0\n        };\n        self.innerHTML = '';\n        self.storageName = 'canvasDataGrid';\n        self.invalidSearchExpClass = 'canvas-datagrid-invalid-search-regExp';\n        self.localStyleLibraryStorageKey = 'canvas-datagrid-user-style-library';\n        self.dataType = 'application/x-canvas-datagrid';\n        self.orderBy = null;\n        self.orderDirection = 'asc';\n        self.columnFilters = {};\n        self.filters = {};\n        self.frozenRow = 0;\n        self.frozenColumn = 0;\n        self.ellipsisCache = {};\n        self.scrollCache = { x: [], y: [] };\n        self.scrollBox = {};\n        self.visibleRows = [];\n        self.sizes = {\n            rows: {},\n            columns: {},\n            trees: {}\n        };\n        self.currentFilter = function () {\n            return true;\n        };\n        self.selections = [];\n        self.hovers = {};\n        self.attributes = {};\n        self.style = {};\n        self.formatters = {};\n        self.sorters = {};\n        self.parsers = {};\n        self.schemaHashes = {};\n        self.events = {};\n        self.changes = [];\n        self.scrollIndexTop = 0;\n        self.scrollPixelTop = 0;\n        self.scrollIndexLeft = 0;\n        self.scrollPixelLeft = 0;\n        self.childGrids = {};\n        self.openChildren = {};\n        self.scrollModes = [\n            'vertical-scroll-box',\n            'vertical-scroll-top',\n            'vertical-scroll-bottom',\n            'horizontal-scroll-box',\n            'horizontal-scroll-right',\n            'horizontal-scroll-left'\n        ];\n        self.componentL1Events = {};\n        self.eventNames = ['afterdraw', 'afterrendercell', 'attributechanged', 'beforebeginedit',\n            'beforecreatecellgrid', 'beforedraw', 'beforeendedit', 'beforerendercell', 'beforerendercellgrid',\n            'beginedit', 'cellmouseout', 'cellmouseover', 'click', 'collapsetree', 'contextmenu', 'copy',\n            'datachanged', 'dblclick', 'endedit', 'expandtree', 'formatcellvalue', 'keydown', 'keypress',\n            'keyup', 'mousedown', 'mousemove', 'mouseup', 'newrow', 'ordercolumn', 'rendercell', 'rendercellgrid',\n            'renderorderbyarrow', 'rendertext', 'rendertreearrow', 'reorder', 'reordering', 'resize',\n            'resizecolumn', 'resizerow', 'schemachanged', 'scroll', 'selectionchanged', 'stylechanged',\n            'touchcancel', 'touchend', 'touchmove', 'touchstart', 'wheel'];\n        self.mouse = { x: 0, y: 0};\n        self.getSelectedData = function (expandToRow) {\n            var d = [], s = self.getSchema(), l = self.data.length;\n            if (l === 0) { return []; }\n            self.selections.forEach(function (row, index) {\n                if (!row) { return; }\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    var orderedIndex;\n                    if (col === -1 || !s[col]) { return; }\n                    orderedIndex = self.orders.columns[col];\n                    if (!expandToRow && s[orderedIndex].hidden) { return; }\n                    if (self.data[index]) {\n                        d[index][s[orderedIndex].name] = self.data[index][s[orderedIndex].name];\n                    }\n                });\n            });\n            return d;\n        };\n        self.getColumnHeaderCellHeight = function () {\n            if (!self.attributes.showColumnHeaders) { return 0; }\n            return ((self.sizes.rows[-1] || self.style.columnHeaderCellHeight) * self.scale);\n        };\n        self.getRowHeaderCellWidth = function () {\n            if (!self.attributes.showRowHeaders) { return 0; }\n            return (self.sizes.columns[-1] || self.style.rowHeaderCellWidth) * self.scale;\n        };\n        self.setStorageData = function () {\n            if (!self.attributes.saveAppearance || !self.attributes.name) { return; }\n            var visibility = {};\n            self.getSchema().forEach(function (column) {\n                visibility[column.name] = !column.hidden;\n            });\n            localStorage.setItem(self.storageName + '-' + self.attributes.name, JSON.stringify({\n                sizes: {\n                    rows: self.sizes.rows,\n                    columns: self.sizes.columns\n                },\n                orders: {\n                    rows: self.orders.rows,\n                    columns: self.orders.columns\n                },\n                orderBy: self.orderBy,\n                orderDirection: self.orderDirection,\n                visibility: visibility\n            }));\n        };\n        self.getSchema = function () {\n            return self.schema || self.tempSchema || [];\n        };\n        function fillArray(low, high) {\n            var i = [], x;\n            for (x = low; x <= high; x += 1) {\n                i[x] = x;\n            }\n            return i;\n        }\n        self.createColumnOrders = function () {\n            var s = self.getSchema();\n            self.orders.columns = fillArray(0, s.length - 1);\n        };\n        self.createRowOrders = function () {\n            self.orders.rows = fillArray(0, self.data.length - 1);\n        };\n        self.getVisibleSchema = function () {\n            return self.getSchema().filter(function (col) {\n                return !col.hidden;\n            });\n        };\n        self.applyDefaultValue = function (row, header) {\n            var d = header.defaultValue || '';\n            if (typeof d === 'function') {\n                d = d.apply(self.intf, [header]);\n            }\n            row[header.name] = d;\n        };\n        self.createNewRowData = function () {\n            self.newRow = {};\n            self.getSchema().forEach(function forEachHeader(header) {\n                self.applyDefaultValue(self.newRow, header);\n            });\n        };\n        self.getSchemaNameHash = function (key) {\n            var n = 0;\n            while (self.schemaHashes[key]) {\n                n += 1;\n                key = key + n;\n            }\n            return key;\n        };\n        self.filter = function (type) {\n            var f = self.filters[type];\n            if (!f && type !== undefined) {\n                console.warn('Cannot find filter for type %s, falling back to substring match.', type);\n                f = self.filters.string;\n            }\n            return f;\n        };\n        self.getBestGuessDataType = function (columnName, data) {\n            var t, x, l = data.length;\n            for (x = 0; x < l; x += 1) {\n                if (data[x] !== undefined && data[x] !== null && [null, undefined].indexOf(data[x][columnName]) !== -1) {\n                    t = typeof data[x];\n                    return t === 'object' ? 'string' : t;\n                }\n            }\n            return 'string';\n        };\n        self.drawChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].draw();\n            });\n        };\n        self.resizeChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].resize();\n            });\n        };\n        self.autoScrollZone = function (e, x, y, ctrl) {\n            var setTimer,\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight();\n            if (y !== -1) {\n                if (x > self.width - self.attributes.selectionScrollZone && x < self.width) {\n                    self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n                if (x - self.attributes.selectionScrollZone - rowHeaderCellWidth < 0) {\n                    self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n            }\n            if (y !== -1) {\n                if (y > self.height - self.attributes.selectionScrollZone && y < self.height) {\n                    self.scrollBox.scrollTop += self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n                if (y - self.attributes.selectionScrollZone - columnHeaderCellHeight < 0) {\n                    self.scrollBox.scrollTop -= self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n            }\n            if (setTimer && !ctrl && self.currentCell && self.currentCell.columnIndex !== -1) {\n                self.scrollTimer = setTimeout(self.mousemove, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.refreshFromOrigialData = function () {\n            self.data = self.originalData.filter(function (row) {\n                return true;\n            });\n        };\n        self.validateColumn = function (c, s) {\n            if (!c.name) {\n                throw new Error('A column must contain at least a name.');\n            }\n            if (s.filter(function (i) { return i.name === c.name; }).length > 0) {\n                throw new Error('A column with the name '\n                    + c.name + ' already exists and cannot be added again.');\n            }\n            return true;\n        };\n        self.setDefaults = function (obj1, obj2, key, def) {\n            obj1[key] = obj2[key] === undefined ? def : obj2[key];\n        };\n        self.setAttributes = function () {\n            self.defaults.attributes.forEach(function eachAttribute(i) {\n                self.setDefaults(self.attributes, self.args, i[0], i[1]);\n            });\n        };\n        self.setStyle = function () {\n            self.defaults.styles.forEach(function eachStyle(i) {\n                self.setDefaults(self.style, self.args.style || {}, i[0], i[1]);\n            });\n        };\n        self.autosize = function (colName) {\n            self.getVisibleSchema().forEach(function (col, colIndex) {\n                if (col.name === colName || colName === undefined) {\n                    self.sizes.columns[colIndex]\n                        = Math.max(self.findColumnMaxTextLength(col.name), self.style.minColumnWidth);\n                }\n            });\n            self.sizes.columns[-1] = self.findColumnMaxTextLength('cornerCell');\n        };\n        self.dispose = function () {\n            if (!self.isChildGrid && self.canvas && self.canvas.parentNode) {\n                self.canvas.parentNode.removeChild(self.canvas);\n            }\n            self.eventParent.removeEventListener('mouseup', self.mouseup, false);\n            self.eventParent.removeEventListener('mousedown', self.mousedown, false);\n            self.eventParent.removeEventListener('dblclick', self.dblclick, false);\n            self.eventParent.removeEventListener('click', self.click, false);\n            self.eventParent.removeEventListener('mousemove', self.mousemove);\n            self.eventParent.removeEventListener('wheel', self.scrollWheel, false);\n            self.canvas.removeEventListener('contextmenu', self.contextmenu, false);\n            self.canvas.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('keypress', self.keypress, false);\n            self.controlInput.removeEventListener('keyup', self.keyup, false);\n            self.controlInput.removeEventListener('keydown', self.keydown, false);\n            window.removeEventListener('resize', self.resize);\n            if (self.observer && self.observer.disconnect) {\n                self.observer.disconnect();\n            }\n        };\n        self.tryLoadStoredSettings = function () {\n            var s;\n            self.reloadStoredValues();\n            if (self.storedSettings\n                    && typeof self.storedSettings.orders === 'object'\n                    && self.storedSettings.orders !== null) {\n                if (self.storedSettings.orders.rows.length >= (self.data || []).length) {\n                    self.orders.rows = self.storedSettings.orders.rows;\n                }\n                s = self.getSchema();\n                if (self.storedSettings.orders.columns.length === s.length) {\n                    self.orders.columns = self.storedSettings.orders.columns;\n                }\n                self.orderBy = self.storedSettings.orderBy === undefined\n                    ? s[0].name : self.storedSettings.orderBy;\n                self.orderDirection = self.storedSettings.orderDirection === undefined\n                    ? 'asc' : self.storedSettings.orderDirection;\n                if (self.storedSettings.orderBy !== undefined && self.getHeaderByName(self.orderBy) && self.orderDirection) {\n                    self.order(self.orderBy, self.orderDirection);\n                }\n            }\n        };\n        self.getDomRoot = function () {\n            return self.shadowRoot ? self.shadowRoot.host : self.parentNode;\n        };\n        self.getFontName = function (fontStyle) {\n            return fontStyle.replace(/\\d+\\.?\\d*px/, '');\n        };\n        self.getFontHeight = function (fontStyle) {\n            return parseFloat(fontStyle, 10);\n        };\n        self.parseStyleValue = function (key) {\n            if (/Font/.test(key)) {\n                self.style[key + 'Height'] = self.getFontHeight(self.style[key]);\n                self.style[key + 'Name'] = self.getFontName(self.style[key]);\n                return;\n            }\n            // when inheriting styles from already instantiated grids, don't parse already parsed values.\n            if (key === 'moveOverlayBorderSegments' && typeof self.style[key] === 'string') {\n                self.style[key] = self.style[key].split(',')\n                    .map(function (i) { return parseInt(i, 10); });\n            }\n        };\n        self.initProp = function (propName) {\n            if (!self.args[propName]) { return; }\n            Object.keys(self.args[propName]).forEach(function (key) {\n                self[propName][key] = self.args[propName][key];\n            });\n        };\n        self.getStyleProperty = function (key) {\n            if (self.styleKeys.indexOf(key) === -1) {\n                return self.parentNodeStyle[key];\n            }\n            return self.style[key];\n        };\n        self.setStyleProperty = function (key, value, supressDrawAndEvent) {\n            var isDim = ['height', 'width', 'minHeight', 'minWidth', 'maxHeight', 'maxWidth'].indexOf(key) !== -1;\n            if (self.styleKeys.indexOf(key) === -1) {\n                self.parentNodeStyle[key] = value;\n            } else {\n                if (/-/.test(key)) {\n                    key = self.dehyphenateProperty(key);\n                }\n                self.style[key] = value;\n                self.parseStyleValue(key);\n            }\n            if (isDim) {\n                self.resize();\n            }\n            if (!supressDrawAndEvent) {\n                self.draw(true);\n                self.dispatchEvent('stylechanged', {name: 'style', value: value});\n            }\n        };\n        self.reloadStoredValues = function () {\n            if (self.attributes.name && self.attributes.saveAppearance) {\n                try {\n                    self.storedSettings = localStorage.getItem(self.storageName + '-' + self.attributes.name);\n                } catch (e) {\n                    console.warn(\"Error loading stored values. \" + e.message);\n                    self.storedSettings = undefined;\n                }\n                if (self.storedSettings) {\n                    try {\n                        self.storedSettings = JSON.parse(self.storedSettings);\n                    } catch (e) {\n                        console.warn('could not read settings from localStore', e);\n                        self.storedSettings = undefined;\n                    }\n                }\n                if (self.storedSettings) {\n                    if (typeof self.storedSettings.sizes === 'object'\n                            && self.storedSettings.sizes !== null) {\n                        self.sizes.rows = self.storedSettings.sizes.rows;\n                        self.sizes.columns = self.storedSettings.sizes.columns;\n                        ['trees', 'columns', 'rows'].forEach(function (i) {\n                            if (!self.sizes[i]) {\n                                self.sizes[i] = {};\n                            }\n                        });\n                    }\n                    if (typeof self.storedSettings.visibility === 'object') {\n                        self.getSchema().forEach(function (column) {\n                            if (self.storedSettings.visibility && self.storedSettings.visibility[column.name] !== undefined) {\n                                column.hidden = !self.storedSettings.visibility[column.name];\n                            }\n                        });\n                    }\n                }\n            }\n        };\n        self.init = function () {\n            if (self.initialized) { return; }\n            function addStyleKeyIfNoneExists(key) {\n                if (self.styleKeys.indexOf(key) === -1) {\n                    self.styleKeys.push(key);\n                }\n            }\n            var publicStyleKeyIntf = {};\n            self.setAttributes();\n            self.setStyle();\n            self.initScrollBox();\n            self.setDom();\n            self.nodeType = 'canvas-datagrid';\n            self.ie = /Trident/.test(window.navigator.userAgent);\n            self.edge = /Edge/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.moz = /Gecko/.test(window.navigator.userAgent);\n            self.mobile = /Mobile/i.test(window.navigator.userAgent);\n            self.cursorGrab = 'grab';\n            self.cursorGrabing = 'grabbing';\n            self.cursorGrab = self.webKit ? '-webkit-grab' : self.cursorGrab;\n            self.cursorGrabing = self.moz ? '-webkit-grabbing' : self.cursorGrabbing;\n            self.pointerLockPosition = {x: 0, y: 0};\n            Object.keys(self.style).forEach(self.parseStyleValue);\n            self.intf.moveSelection = self.moveSelection;\n            self.intf.moveTo = self.moveTo;\n            self.intf.addEventListener = self.addEventListener;\n            self.intf.removeEventListener = self.removeEventListener;\n            self.intf.dispatchEvent = self.dispatchEvent;\n            /**\n             * Releases grid resources and removes grid elements.\n             * @memberof canvasDatagrid\n             * @name dispose\n             * @method\n             */\n            self.intf.dispose = self.dispose;\n            /**\n             * Appends the grid to another element later.  Not implemented.\n             * @memberof canvasDatagrid\n             * @name appendTo\n             * @method\n             * @param {number} el The element to append the grid to.\n             */\n            self.intf.appendTo = self.appendTo;\n            self.intf.getVisibleCellByIndex = self.getVisibleCellByIndex;\n            self.intf.filters = self.filters;\n            self.intf.sorters = self.sorters;\n            self.intf.autosize = self.autosize;\n            self.intf.beginEditAt = self.beginEditAt;\n            self.intf.endEdit = self.endEdit;\n            self.intf.setActiveCell = self.setActiveCell;\n            self.intf.forEachSelectedCell = self.forEachSelectedCell;\n            self.intf.scrollIntoView = self.scrollIntoView;\n            self.intf.clearChangeLog = self.clearChangeLog;\n            self.intf.gotoCell = self.gotoCell;\n            self.intf.gotoRow = self.gotoRow;\n            self.intf.getHeaderByName = self.getHeaderByName;\n            self.intf.findColumnScrollLeft = self.findColumnScrollLeft;\n            self.intf.findRowScrollTop = self.findRowScrollTop;\n            self.intf.fitColumnToValues = self.fitColumnToValues;\n            self.intf.findColumnMaxTextLength = self.findColumnMaxTextLength;\n            self.intf.disposeContextMenu = self.disposeContextMenu;\n            self.intf.getCellAt = self.getCellAt;\n            self.intf.isCellVisible = self.isCellVisible;\n            self.intf.isRowVisible = self.isRowVisible;\n            self.intf.isColumnVisible = self.isColumnVisible;\n            self.intf.order = self.order;\n            self.intf.draw = self.draw;\n            self.intf.isComponent = self.isComponent;\n            self.intf.selectArea = self.selectArea;\n            self.intf.clipElement = self.clipElement;\n            self.intf.getSchemaFromData = self.getSchemaFromData;\n            self.intf.setFilter = self.setFilter;\n            self.intf.selectRow = self.selectRow;\n            self.intf.parentGrid = self.parentGrid;\n            self.intf.toggleTree = self.toggleTree;\n            self.intf.expandTree = self.expandTree;\n            self.intf.collapseTree = self.collapseTree;\n            self.intf.canvas = self.canvas;\n            self.intf.context = self.ctx;\n            self.intf.insertRow = self.insertRow;\n            self.intf.deleteRow = self.deleteRow;\n            self.intf.addRow = self.addRow;\n            self.intf.insertColumn = self.insertColumn;\n            self.intf.deleteColumn = self.deleteColumn;\n            self.intf.addColumn = self.addColumn;\n            self.intf.getClippingRect = self.getClippingRect;\n            self.intf.setRowHeight = self.setRowHeight;\n            self.intf.setColumnWidth = self.setColumnWidth;\n            self.intf.resetColumnWidths = self.resetColumnWidths;\n            self.intf.resetRowHeights = self.resetRowHeights;\n            self.intf.resize = self.resize;\n            self.intf.selectColumn = self.selectColumn;\n            self.intf.selectRow = self.selectRow;\n            self.intf.selectAll = self.selectAll;\n            self.intf.selectNone = self.selectNone;\n            self.intf.drawChildGrids = self.drawChildGrids;\n            self.intf.assertPxColor = self.assertPxColor;\n            self.intf.clearPxColorAssertions = self.clearPxColorAssertions;\n            self.intf.integerToAlpha = self.integerToAlpha;\n            self.intf.copy = self.copy;\n            self.intf.setStyleProperty = self.setStyleProperty;\n            Object.defineProperty(self.intf, 'defaults', {\n                get: function () {\n                    return {\n                        styles: self.defaults.styles.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {}),\n                        attributes: self.defaults.attributes.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {})\n                    };\n                }\n            });\n            self.styleKeys = Object.keys(self.intf.defaults.styles);\n            self.styleKeys.map(function (i) { return self.hyphenateProperty(i, false); }).forEach(addStyleKeyIfNoneExists);\n            self.styleKeys.map(function (i) { return self.hyphenateProperty(i, true); }).forEach(addStyleKeyIfNoneExists);\n            self.DOMStyles = window.getComputedStyle(document.body, null);\n            self.styleKeys.concat(Object.keys(self.DOMStyles)).forEach(function (key) {\n                // unless this line is here, Object.keys() will not work on <instance>.style\n                publicStyleKeyIntf[key] = undefined;\n                Object.defineProperty(publicStyleKeyIntf, key, {\n                    get: function () {\n                        return self.getStyleProperty(key);\n                    },\n                    set: function (value) {\n                        if (self.initialized) {\n                            self.appliedInlineStyles[key] = value;\n                        }\n                        self.setStyleProperty(key, value);\n                    }\n                });\n            });\n            Object.defineProperty(self.intf, 'shadowRoot', {\n                get: function () {\n                    return self.shadowRoot;\n                }\n            });\n            Object.defineProperty(self.intf, 'activeCell', {\n                get: function () {\n                    return self.activeCell;\n                }\n            });\n            Object.defineProperty(self.intf, 'hasFocus', {\n                get: function () {\n                    return self.hasFocus;\n                }\n            });\n            Object.defineProperty(self.intf, 'style', {\n                get: function () {\n                    return publicStyleKeyIntf;\n                },\n                set: function (valueObject) {\n                    Object.keys(valueObject).forEach(function (key) {\n                        self.setStyleProperty(key, valueObject[key], true);\n                    });\n                    self.draw(true);\n                    self.dispatchEvent('stylechanged', {name: 'style', value: valueObject});\n                }\n            });\n            Object.defineProperty(self.intf, 'attributes', { value: {}});\n            Object.keys(self.attributes).forEach(function (key) {\n                Object.defineProperty(self.intf.attributes, key, {\n                    get: function () {\n                        return self.attributes[key];\n                    },\n                    set: function (value) {\n                        self.attributes[key] = value;\n                        if (key === 'name') {\n                            self.tryLoadStoredSettings();\n                        }\n                        self.draw(true);\n                        self.dispatchEvent('attributechanged', {name: key, value: value[key]});\n                    }\n                });\n            });\n            self.filters.string = function (value, filterFor) {\n                value = String(value);\n                var filterRegExp,\n                    regEnd = /\\/(i|g|m)*$/,\n                    pattern = regEnd.exec(filterFor),\n                    flags = pattern ? pattern[0].substring(1) : '',\n                    flagLength = flags.length;\n                self.invalidFilterRegEx = undefined;\n                if (filterFor.substring(0, 1) === '/' && pattern) {\n                    try {\n                        filterRegExp = new RegExp(filterFor.substring(1, filterFor.length - (flagLength + 1)), flags);\n                    } catch (e) {\n                        self.invalidFilterRegEx = e;\n                        return;\n                    }\n                    return filterRegExp.test(value);\n                }\n                return value.toString ? value.toString().toLocaleUpperCase()\n                    .indexOf(filterFor.toLocaleUpperCase()) !== -1 : false;\n            };\n            self.filters.number = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                return value === filterFor;\n            };\n            ['formatters', 'filters', 'sorters'].forEach(self.initProp);\n            self.applyComponentStyle(false, self.intf);\n            self.reloadStoredValues();\n            if (self.args.data) {\n                self.intf.data = self.args.data;\n            }\n            if (self.intf.innerText || self.intf.textContent) {\n                if (self.intf.dataType === 'application/x-canvas-datagrid') {\n                    self.intf.dataType = 'application/json+x-canvas-datagrid';\n                }\n                self.intf.data = self.intf.innerText || self.intf.textContent;\n            }\n            if (self.args.schema) {\n                self.intf.schema = self.args.schema;\n            }\n            if (self.isChildGrid || !self.isComponent) {\n                requestAnimationFrame(function () { self.resize(true); });\n            } else {\n                self.resize(true);\n            }\n            self.initialized = true;\n            return self;\n        };\n        /**\n         * Removes focus from the grid.\n         * @memberof canvasDatagrid\n         * @name blur\n         * @method\n         */\n        self.intf.blur = function (e) {\n            self.hasFocus = false;\n        };\n        /**\n         * Focuses on the grid.\n         * @memberof canvasDatagrid\n         * @name focus\n         * @method\n         */\n        self.intf.focus = function () {\n            self.hasFocus = true;\n            self.controlInput.focus();\n        };\n        if (self.shadowRoot || self.isChildGrid) {\n            Object.defineProperty(self.intf, 'height', {\n                get: function () {\n                    if (self.shadowRoot) {\n                        return self.shadowRoot.height;\n                    }\n                    return self.parentNode.height;\n                },\n                set: function (value) {\n                    if (self.shadowRoot) {\n                        self.shadowRoot.height = value;\n                    } else {\n                        self.parentNode.height = value;\n                    }\n                    self.resize(true);\n                }\n            });\n            Object.defineProperty(self.intf, 'width', {\n                get: function () {\n                    if (self.shadowRoot) {\n                        return self.shadowRoot.width;\n                    }\n                    return self.parentNode.width;\n                },\n                set: function (value) {\n                    if (self.shadowRoot) {\n                        self.shadowRoot.width = value;\n                    } else {\n                        self.parentNode.width = value;\n                    }\n                    self.resize(true);\n                }\n            });\n            Object.defineProperty(self.intf, 'parentNode', {\n                get: function () {\n                    return self.parentNode;\n                },\n                set: function (value) {\n                    if (!self.isChildGrid) {\n                        throw new TypeError('Cannot set property parentNode which has only a getter');\n                    }\n                    self.parentNode = value;\n                }\n            });\n        }\n        Object.defineProperty(self.intf, 'visibleRowHeights', {\n            get: function () {\n                return self.visibleRowHeights;\n            }\n        });\n        Object.defineProperty(self.intf, 'openChildren', {\n            get: function () {\n                return self.openChildren;\n            }\n        });\n        Object.defineProperty(self.intf, 'childGrids', {\n            get: function () {\n                return Object.keys(self.childGrids).map(function (gridId) {\n                    return self.childGrids[gridId];\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'isChildGrid', {\n            get: function () {\n                return self.isChildGrid;\n            }\n        });\n        Object.defineProperty(self, 'cursor', {\n            get: function () {\n                return self.parentNodeStyle.cursor;\n            },\n            set: function (value) {\n                if (value === 'cell') { value = 'default'; }\n                if (self.currentCursor !== value) {\n                    self.parentNodeStyle.cursor = value;\n                    self.currentCursor = value;\n                }\n            }\n        });\n        Object.defineProperty(self.intf, 'orderDirection', {\n            get: function () {\n                return self.orderDirection;\n            },\n            set: function (value) {\n                if (value !== 'desc') {\n                    value = 'asc';\n                }\n                self.orderDirection = value;\n                self.order(self.orderBy, self.orderDirection);\n            }\n        });\n        Object.defineProperty(self.intf, 'orderBy', {\n            get: function () {\n                return self.orderBy;\n            },\n            set: function (value) {\n                if (self.getSchema().find(function (col) {\n                        return col.name === value;\n                    }) === undefined) {\n                    throw new Error('Cannot sort by unknown column name.');\n                }\n                self.orderBy = value;\n                self.order(self.orderBy, self.orderDirection);\n            }\n        });\n        if (self.isComponent) {\n            Object.defineProperty(self.intf, 'offsetHeight', {\n                get: function () {\n                    return self.canvas.offsetHeight;\n                }\n            });\n            Object.defineProperty(self.intf, 'offsetWidth', {\n                get: function () {\n                    return self.canvas.offsetWidth;\n                }\n            });\n        }\n        Object.defineProperty(self.intf, 'scrollHeight', {\n            get: function () {\n                return self.scrollBox.scrollHeight;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollWidth', {\n            get: function () {\n                return self.scrollBox.scrollWidth;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollTop', {\n            get: function () {\n                return self.scrollBox.scrollTop;\n            },\n            set: function (value) {\n                self.scrollBox.scrollTop = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollLeft', {\n            get: function () {\n                return self.scrollBox.scrollLeft;\n            },\n            set: function (value) {\n                self.scrollBox.scrollLeft = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'sizes', {\n            get: function () {\n                return self.sizes;\n            }\n        });\n        Object.defineProperty(self.intf, 'input', {\n            get: function () {\n                return self.input;\n            }\n        });\n        Object.defineProperty(self.intf, 'controlInput', {\n            get: function () {\n                return self.controlInput;\n            }\n        });\n        Object.defineProperty(self.intf, 'currentCell', {\n            get: function () {\n                return self.currentCell;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleCells', {\n            get: function () {\n                return self.visibleCells;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRows', {\n            get: function () {\n                return self.visibleRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'selections', {\n            get: function () {\n                return self.selections;\n            }\n        });\n        Object.defineProperty(self.intf, 'dragMode', {\n            get: function () {\n                return self.dragMode;\n            }\n        });\n        Object.defineProperty(self.intf, 'changes', {\n            get: function () {\n                return self.changes;\n            }\n        });\n        self.intf.formatters = self.formatters;\n        Object.defineProperty(self.intf, 'dataType', {\n            get: function () {\n                return self.dataType;\n            },\n            set: function (value) {\n                if (!self.parsers[value]) {\n                    throw new Error('No parser for MIME type ' + value);\n                }\n                self.dataType = value;\n            }\n        });\n        self.eventNames.forEach(function (eventName) {\n            Object.defineProperty(self.intf, 'on' + eventName, {\n                get: function () {\n                    return self.componentL1Events[eventName];\n                },\n                set: function (value) {\n                    self.events[eventName] = [];\n                    self.componentL1Events[eventName] = value;\n                    if (!value) { return; }\n                    self.addEventListener(eventName, value);\n                }\n            });\n        });\n        Object.defineProperty(self.intf, 'frozenRow', {\n            get: function () {\n                return self.frozenRow;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.visibleRows.length < val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible rows.');\n                }\n                self.frozenRow = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'frozenColumn', {\n            get: function () {\n                return self.frozenColumn;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.getVisibleSchema().length < val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible columns.');\n                }\n                self.frozenColumn = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollIndexRect', {\n            get: function () {\n                return {\n                    top: self.scrollIndexTop,\n                    right: self.scrollIndexRight,\n                    bottom: self.scrollIndexBottom,\n                    left: self.scrollIndexLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollPixelRect', {\n            get: function () {\n                return {\n                    top: self.scrollPixelTop,\n                    right: self.scrollPixelRight,\n                    bottom: self.scrollPixelBottom,\n                    left: self.scrollPixelLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'rowOrder', {\n            get: function () {\n                return self.orders.rows;\n            },\n            set: function (val) {\n                if (!Array.isArray(val)) {\n                    throw new TypeError('Value must be an array.');\n                }\n                if (!self.data || val.length < self.data.length) {\n                    throw new RangeError('Array length must be equal to or greater than number of rows.');\n                }\n                self.orders.rows = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'columnOrder', {\n            get: function () {\n                return self.orders.columns;\n            },\n            set: function (val) {\n                if (!Array.isArray(val)) {\n                    throw new TypeError('Value must be an array.');\n                }\n                if (val.length < self.getSchema().length) {\n                    throw new RangeError('Array length must be equal to or greater than number of columns.');\n                }\n                self.orders.columns = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'selectionBounds', {\n            get: function () {\n                return self.getSelectionBounds();\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedRows', {\n            get: function () {\n                return self.getSelectedData(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedCells', {\n            get: function () {\n                return self.getSelectedData();\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleSchema', {\n            get: function () {\n                return self.getVisibleSchema().map(function eachDataRow(col) {\n                    return col;\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'treeGridAttributes', {\n            get: function () {\n                return self.treeGridAttributes;\n            },\n            set: function setTreeGridAttributes(value) {\n                self.treeGridAttributes = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'cellGridAttributes', {\n            get: function () {\n                return self.cellGridAttributes;\n            },\n            set: function setCellGridAttributes(value) {\n                self.cellGridAttributes = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'ctx', {\n            get: function () {\n                return self.ctx;\n            }\n        });\n        Object.defineProperty(self.intf, 'schema', {\n            get: function schemaGetter() {\n                return self.getSchema();\n            },\n            set: function schemaSetter(value) {\n                if (value === undefined) {\n                    // Issue #89 - allow schema to be set to initialized state\n                    self.schema = undefined;\n                    self.tempSchema = undefined;\n                    self.dispatchEvent('schemachanged', {schema: undefined});\n                    return;\n                }\n                if (!Array.isArray(value) || typeof value[0] !== 'object') {\n                    throw new Error('Schema must be an array of objects.');\n                }\n                if (value[0].name === undefined) {\n                    throw new Error('Expected schema to contain an object with at least a name property.');\n                }\n                self.schema = value.map(function eachSchemaColumn(column, index) {\n                    column.width = column.width || self.style.cellWidth;\n                    column.filter = column.filter || self.filter(column.type);\n                    column.type = column.type || 'string';\n                    column.index = index;\n                    column.columnIndex = index;\n                    column.rowIndex = -1;\n                    return column;\n                });\n                self.tempSchema = undefined;\n                self.createNewRowData();\n                self.createColumnOrders();\n                self.tryLoadStoredSettings();\n                if (self.storedSettings && typeof self.storedSettings.visibility === 'object') {\n                    self.schema.forEach(function hideEachSchemaColumn(column, index) {\n                        if (self.storedSettings && self.storedSettings.visibility[column.name] !== undefined) {\n                            column.hidden = !self.storedSettings.visibility[column.name];\n                        }\n                    });\n                }\n                self.resize(true);\n                self.dispatchEvent('schemachanged', {schema: self.schema});\n            }\n        });\n        /**\n         * Gets an array of currently registered MIME types.\n         * @memberof canvasDatagrid\n         * @name getDataTypes\n         * @method\n         */\n        self.intf.getTypes = function () {\n            return Object.keys(self.parsers);\n        };\n        self.parseInnerHtml = function (data) {\n            try {\n                data = JSON.parse(data);\n            } catch (e) {\n                throw new Error('Cannot parse application/json+x-canvas-datagrid formated data. '\n                    + e.message + '  \\nNote: canvas-datagrid.innerHTML is for string data only.  '\n                    + 'Use the canvas-datagrid.data property to set object data.');\n            }\n            return data;\n        };\n        self.parsers['application/json+x-canvas-datagrid'] = function (data, callback) {\n            self.parsers['application/x-canvas-datagrid'](self.parseInnerHtml(data), function (data, schema) {\n                return callback(data, schema);\n            });\n        };\n        self.parsers['application/x-canvas-datagrid'] = function (data, callback) {\n            return callback(data);\n        };\n        self.intf.parsers = self.parsers;\n        // send to dataType ETL function to extract from input data\n        // and transform into native [{}, {}] format\n        self.etl = function (data, callback) {\n            if (!self.intf.parsers[self.dataType]) {\n                throw new Error('Unsupported data type.');\n            }\n            self.intf.parsers[self.dataType](data, function (data, schema) {\n                if (Array.isArray(schema)) {\n                    self.schema = schema;\n                }\n                // Issue #89 - allow schema to be auto-created every time data is set\n                if (self.attributes.autoGenerateSchema) {\n                    self.schema = self.getSchemaFromData(data);\n                }\n                if (!self.schema) {\n                    self.tempSchema = self.getSchemaFromData(data);\n                }\n                if (self.getSchema()) {\n                    self.createColumnOrders();\n                }\n                // set the unfiltered/sorted data array\n                self.originalData = data;\n                //TODO apply filter to incoming dataset\n                self.data = self.originalData;\n                // empty data was set\n                if (!self.schema && (self.data || []).length === 0) {\n                    self.tempSchema = [{name: ''}];\n                }\n                self.fitColumnToValues('cornerCell', true);\n                if ((self.tempSchema && !self.schema) || self.attributes.autoGenerateSchema) {\n                    self.createColumnOrders();\n                    self.dispatchEvent('schemachanged', {schema: self.tempSchema});\n                }\n                callback();\n            });\n        };\n        Object.defineProperty(self.intf, 'data', {\n            get: function dataGetter() {\n                return self.data;\n            },\n            set: function dataSetter(value) {\n                self.etl(value, function () {\n                    self.changes = [];\n                    self.createNewRowData();\n                    if (self.attributes.autoResizeColumns && self.data.length > 0\n                            && self.storedSettings === undefined) {\n                        self.autosize();\n                    }\n                    // set the header column to fit the numbers in it\n                    self.fitColumnToValues('cornerCell', true);\n                    self.createRowOrders();\n                    self.tryLoadStoredSettings();\n                    self.dispatchEvent('datachanged', {data: self.data});\n                    self.resize(true);\n                });\n            }\n        });\n        self.initScrollBox = function () {\n            var sHeight = 0,\n                sWidth = 0,\n                scrollTop = 0,\n                scrollLeft = 0,\n                scrollHeight = 0,\n                scrollWidth = 0,\n                scrollBoxHeight = 20,\n                scrollBoxWidth = 20;\n            function setScrollTop(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollTop value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollHeight) {\n                    value = scrollHeight;\n                }\n                if (scrollHeight < 0) {\n                    value = 0;\n                }\n                scrollTop = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            function setScrollLeft(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollLeft value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollWidth) {\n                    value = scrollWidth;\n                }\n                if (scrollWidth < 0) {\n                    value = 0;\n                }\n                scrollLeft = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            self.scrollBox.toString = function () {\n                return '{\"width\": ' + scrollWidth.toFixed(2)\n                    + ', \"height\": ' + scrollHeight.toFixed(2)\n                    + ', \"left\": ' + scrollLeft.toFixed(2)\n                    + ', \"top\": ' + scrollTop.toFixed(2)\n                    + ', \"widthRatio\": ' + self.scrollBox.widthBoxRatio.toFixed(5)\n                    + ', \"heightRatio\": ' + self.scrollBox.heightBoxRatio.toFixed(5) + '}';\n            };\n            self.scrollBox.scrollTo = function (x, y, supressDrawEvent) {\n                setScrollLeft(x, true);\n                setScrollTop(y, supressDrawEvent);\n            };\n            Object.defineProperty(self.scrollBox, 'scrollBoxHeight', {\n                get: function () {\n                    return scrollBoxHeight;\n                },\n                set: function (value) {\n                    scrollBoxHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollBoxWidth', {\n                get: function () {\n                    return scrollBoxWidth;\n                },\n                set: function (value) {\n                    scrollBoxWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'height', {\n                get: function () {\n                    return sHeight;\n                },\n                set: function (value) {\n                    if (scrollHeight < value) {\n                        scrollTop = 0;\n                    }\n                    sHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'width', {\n                get: function () {\n                    return sWidth;\n                },\n                set: function (value) {\n                    sWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollTop', {\n                get: function () {\n                    return scrollTop;\n                },\n                set: setScrollTop\n            });\n            Object.defineProperty(self.scrollBox, 'scrollLeft', {\n                get: function () {\n                    return scrollLeft;\n                },\n                set: setScrollLeft\n            });\n            Object.defineProperty(self.scrollBox, 'scrollHeight', {\n                get: function () {\n                    return scrollHeight;\n                },\n                set: function (value) {\n                    if (scrollTop > value) {\n                        scrollTop = Math.max(value, 0);\n                    }\n                    if (scrollHeight < sHeight) {\n                        scrollTop = 0;\n                    }\n                    scrollHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollWidth', {\n                get: function () {\n                    return scrollWidth;\n                },\n                set: function (value) {\n                    if (scrollLeft > value) {\n                        scrollLeft = Math.max(value, 0);\n                    }\n                    scrollWidth = value;\n                }\n            });\n        };\n        return;\n    };\n});\n","/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var touchTimerMs = 50,\n            touchScrollTimeout;\n        self.scrollAnimation = {};\n        self.touchDelta = {};\n        self.touchAnimateTo = {};\n        self.animationFrames = 0;\n        self.getTouchPos = function (e, touchIndex) {\n            var t = touchIndex ? e.touches[touchIndex] : e.touches[0],\n                rect = self.canvas.getBoundingClientRect(),\n                pos;\n            if (!t) { return; }\n            pos = {\n                x: t.clientX - rect.left,\n                y: t.clientY - rect.top\n            };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        // shamelessly stolen from from https://gist.github.com/gre/1650294\n        self.easingFunctions = {\n            linear: function (t) { return t; },\n            easeInQuad: function (t) { return t * t; },\n            easeOutQuad: function (t) { return t * (2 - t); },\n            easeInOutQuad: function (t) { return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t; },\n            easeInCubic: function (t) { return t * t * t; },\n            easeOutCubic: function (t) { return (--t) * t * t + 1; },\n            easeInOutCubic: function (t) { return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1; },\n            easeInQuart: function (t) { return t * t * t * t; },\n            easeOutQuart: function (t) { return 1 - (--t) * t * t * t; },\n            easeInOutQuart: function (t) { return t < 0.5 ? 8 * t  * t  * t * t : 1 - 8 * (--t) * t * t * t; },\n            easeInQuint: function (t) { return t * t * t * t * t; },\n            easeOutQuint: function (t) { return 1 + (--t) * t *  t * t * t; },\n            easeInOutQuint: function (t) { return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t; }\n        };\n        self.easing = function (t, b, c, d) {\n            return c * self.easingFunctions[self.attributes.touchEasingMethod](t / d) + b;\n        };\n        self.calculatePPSTimed = function () {\n            self.xPPST = -((self.touchDelta.x - self.touchSigmaTimed.x) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.yPPST = -((self.touchDelta.y - self.touchSigmaTimed.y) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.touchSigmaTimed = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.calculatePPS = function () {\n            self.xPPS = -((self.touchDelta.x - self.touchSigma.x) / (self.touchDelta.t - self.touchSigma.t));\n            self.yPPS = -((self.touchDelta.y - self.touchSigma.y) / (self.touchDelta.t - self.touchSigma.t));\n            self.touchSigma = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.touchEndAnimation = function () {\n            if (!self.canvas || !self.scrollBox.scrollTo) { return requestAnimationFrame(self.touchEndAnimation); }\n            var n = performance.now(),\n                d = self.attributes.touchReleaseAnimationDurationMs,\n                t;\n            t = n - self.touchDelta.t;\n            self.animationFrames += 1;\n            self.scrollAnimation.x = self.easing(t, self.touchDelta.scrollLeft, self.touchAnimateTo.x, d);\n            self.scrollAnimation.y = self.easing(t, self.touchDelta.scrollTop, self.touchAnimateTo.y, d);\n            if (t > d || (self.scrollAnimation.y === self.scrollBox.scrollTop\n                    && self.scrollAnimation.x === self.scrollBox.scrollLeft) || self.stopAnimation) {\n                return;\n            }\n            self.scrollBox.scrollTo(self.scrollAnimation.x, self.scrollAnimation.y);\n            requestAnimationFrame(self.touchEndAnimation);\n        };\n        self.touchEditCell = function (cell) {\n            self.beginEditAt(cell.columnIndex, cell.rowIndex);\n        };\n        self.touchCell = function (e) {\n            return function () {\n                clearInterval(self.calculatePPSTimer);\n                var i, pos = self.getTouchPos(e);\n                if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone) {\n                    i = self.getCellAt(pos.x, pos.y);\n                    if (!i) { return; }\n                    if (self.touchingCell && self.touchingCell.rowIndex === i.rowIndex\n                            && self.touchingCell.columnIndex === i.columnIndex) {\n                        self.touchEditCell(i);\n                        return;\n                    }\n                    if (self.input && self.input.editCell) {\n                        self.endEdit();\n                    }\n                    self.touchingCell = i;\n                    self.selectArea({\n                        top: i.rowIndex,\n                        bottom: i.rowIndex,\n                        left: i.columnIndex,\n                        right: i.columnIndex\n                    });\n                    self.draw(true);\n                }\n            };\n        };\n        self.touchstart = function (e) {\n            if (e.changedTouches[0]) {\n                self.touchStart = self.getTouchPos(e);\n                self.startingCell = self.getCellAt(self.touchStart.x, self.touchStart.y, true);\n            }\n            if (self.dispatchEvent('touchstart', {NativeEvent: e, cell: self.startingCell})) { return; }\n            self.disposeContextMenu();\n            clearInterval(self.calculatePPSTimer);\n            clearTimeout(self.touchContextTimeout);\n            self.touchStartEvent = e;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (e.touches.length === 1 && e.changedTouches[0] && !self.zoomAltered) {\n                self.touchLength = 1;\n                self.touchStart = self.touchStart || self.touchStart1;\n                self.touchScrollStart = {\n                    x: self.scrollBox.scrollLeft,\n                    y: self.scrollBox.scrollTop,\n                    t: performance.now()\n                };\n                self.touchDelta = {\n                    x: 0,\n                    y: 0,\n                    scrollLeft: self.scrollBox.scrollLeft,\n                    scrollTop: self.scrollBox.scrollTop,\n                    t: self.touchScrollStart.t\n                };\n                self.touchSigma = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchSigmaTimed = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchContextTimeout = setTimeout(function () {\n                    self.contextmenuEvent(e, self.touchStart);\n                }, self.attributes.touchContextMenuTimeMs);\n                self.calculatePPSTimer = setInterval(self.calculatePPSTimed, touchTimerMs);\n                if (self.startingCell && (self.startingCell.isGrid || ['tree', 'inherit'].indexOf(self.startingCell.context) !== -1)) {\n                    self.hasFocus = false;\n                    return;\n                }\n                self.hasFocus = true;\n                if (self.startingCell.isHeader) {\n                    if (self.startingCell.isRowHeader) {\n                        self.selectArea({\n                            top: self.startingCell.rowIndex,\n                            bottom: self.startingCell.rowIndex,\n                            left: 0,\n                            right: self.getVisibleSchema().length - 1,\n                        });\n                        self.draw(true);\n                    } else if (self.startingCell.isColumnHeader) {\n                        if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                            if (self.orderBy === self.startingCell.header.name) {\n                                self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                            } else {\n                                self.orderDirection = 'asc';\n                            }\n                            self.order(self.startingCell.header.name, self.orderDirection);\n                        }\n                        if (self.attributes.columnHeaderClickBehavior === 'select') {\n                            self.selectArea({\n                                top: 0,\n                                bottom: self.data.length - 1,\n                                left: self.startingCell.columnIndex,\n                                right: self.startingCell.columnIndex,\n                            });\n                            self.draw(true);\n                        }\n                    }\n                    self.touchEndEvents(e);\n                    return;\n                }\n            }\n            if (self.zoomAltered) { return; }\n            document.body.addEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.addEventListener('touchend', self.touchend, false);\n            document.body.addEventListener('touchcancel', self.touchcancel, false);\n            self.draw(true);\n        };\n        self.touchSelect = function (cell, handleType) {\n            if (cell.rowIndex === undefined || cell.columnIndex === undefined) { return; }\n            self.touchSelecting = true;\n            var bounds = self.getSelectionBounds();\n            if (handleType === 'selection-handle-bl'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex <= bounds.right) {\n                bounds.bottom = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tl'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex <= bounds.right) {\n                bounds.top = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tr'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex >= bounds.left) {\n                bounds.top = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            } else if (handleType === 'selection-handle-br'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex >= bounds.left) {\n                bounds.bottom = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            }\n            if (self.attributes.selectionMode === 'row' || cell.rowIndex === -1) {\n                bounds.left = 0;\n                bounds.right = self.getSchema().length - 1;\n            } else {\n                bounds.left = Math.max(0, bounds.left);\n            }\n            self.selectArea(bounds);\n            self.draw(true);\n        };\n        self.touchmove = function (e) {\n            var ch, rw, rScrollZone, lScrollZone, bScrollZone, tScrollZone, sbw, t1, t2;\n            if (self.dispatchEvent('beforetouchmove', {NativeEvent: e})) { return; }\n            clearTimeout(touchScrollTimeout);\n            if (e.changedTouches[0]) {\n                self.touchPosition = self.getTouchPos(e);\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = self.getTouchPos(e, 1);\n            }\n            if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) > self.attributes.touchDeadZone) {\n                clearTimeout(self.touchContextTimeout);\n            }\n            if (e.touches.length === 2 && self.touchPosition && self.touchPosition1) {\n                t1 = self.touchPosition.y;\n                t2 = self.touchPosition1.y;\n                if (!self.zoomDeltaStart) {\n                    self.zoomDeltaStart = Math.abs(t1 - t2);\n                    self.startScale = self.scale;\n                }\n                self.touchLength = 2;\n                self.scaleDelta = self.zoomDeltaStart - Math.abs(t1 - t2);\n                self.scale = self.startScale - (self.scaleDelta * self.attributes.touchZoomSensitivity);\n                self.scale = Math.min(Math.max(self.scale, self.attributes.touchZoomMin), self.attributes.touchZoomMax);\n                self.zoomAltered = true;\n                self.resize(true);\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.zoomAltered) { return; }\n            self.touchLength = 1;\n            self.touchPosition = self.touchPosition || self.touchPosition1;\n            ch = self.getColumnHeaderCellHeight();\n            rw = self.getRowHeaderCellWidth();\n            rScrollZone = self.width - self.style.scrollBarWidth - self.touchPosition.x < self.attributes.selectionScrollZone;\n            lScrollZone = self.touchPosition.x - rw < self.attributes.selectionScrollZone;\n            bScrollZone = self.height - self.style.scrollBarWidth - self.touchPosition.y < self.attributes.selectionScrollZone;\n            tScrollZone = self.touchPosition.y - ch < self.attributes.selectionScrollZone;\n            sbw = self.style.scrollBarWidth;\n            function touchScroll() {\n                var x = self.scrollBox.scrollLeft,\n                    y = self.scrollBox.scrollTop;\n                x += (rScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y += (bScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y -= (tScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                x -= (lScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                self.scrollBox.scrollTo(x, y);\n                touchScrollTimeout = setTimeout(touchScroll, self.attributes.scrollRepeatRate);\n            }\n            e.stopPropagation();\n            self.touchDelta = {\n                x: self.touchPosition.x - self.touchStart.x,\n                y: self.touchPosition.y - self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: performance.now()\n            };\n            self.currentCell = self.getCellAt(self.touchPosition.x, self.touchPosition.y);\n            self.dispatchEvent('touchmove', {NativeEvent: e, cell: self.currentCell});\n            self.calculatePPS();\n            self.touchDuration = performance.now() - self.touchScrollStart.t;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            if (self.touchSelecting && (rScrollZone || lScrollZone || tScrollZone || bScrollZone)) {\n                touchScroll();\n            }\n            if (/vertical-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollTop = self.scrollBox.scrollHeight\n                    * ((self.touchPosition.y - ch - sbw) / (self.scrollBox.height - sbw - ch));\n                return;\n            }\n            if (/horizontal-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollLeft = self.scrollBox.scrollWidth\n                    * ((self.touchPosition.x - rw - sbw) / (self.scrollBox.width - sbw - rw));\n                return;\n            }\n            if (/selection-handle-/.test(self.startingCell.style)) {\n                self.touchSelect(self.currentCell, self.startingCell.style);\n                return;\n            }\n            self.scrollBox.scrollTo(self.touchScrollStart.x - self.touchDelta.x,\n                self.touchScrollStart.y - self.touchDelta.y);\n            self.draw(true);\n        };\n        self.touchEndEvents = function (e) {\n            self.zoomDeltaStart = undefined;\n            self.touchSelecting = false;\n            clearInterval(self.touchScrollTimeout);\n            clearInterval(self.touchContextTimeout);\n            clearInterval(self.calculatePPSTimer);\n            e.stopPropagation();\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n        };\n        self.touchend = function (e) {\n            if (self.dispatchEvent('touchend', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.zoomDeltaStart = undefined;\n            if (e.changedTouches[0]) {\n                self.touchPosition = undefined;\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = undefined;\n            }\n            if (self.zoomAltered) {\n                if (e.touches.length === 0) {\n                    self.zoomAltered = false;\n                }\n                return;\n            }\n            var dz = Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone;\n            if (isNaN(self.xPPS)) {\n                self.xPPS = 0;\n            }\n            if (isNaN(self.yPPS)) {\n                self.yPPS = 0;\n            }\n            if (isNaN(self.xPPST)) {\n                self.xPPST = 0;\n            }\n            if (isNaN(self.yPPST)) {\n                self.yPPST = 0;\n            }\n            self.touchAnimateTo.x = self.xPPS * self.attributes.touchReleaseAcceleration;\n            self.touchAnimateTo.y = self.yPPS * self.attributes.touchReleaseAcceleration;\n            self.calculatePPSTimed();\n            if (dz && !self.contextMenu) {\n                self.touchCell(self.touchStartEvent)();\n            } else if (self.animationFrames === 0\n                    && (Math.abs(self.xPPST) > self.attributes.scrollAnimationPPSThreshold\n                        || Math.abs(self.yPPST) > self.attributes.scrollAnimationPPSThreshold)\n                    && !/-scroll-/.test(self.startingCell.style)\n                    && !dz) {\n                self.stopAnimation = false;\n                self.touchEndAnimation();\n            }\n            self.touchEndEvents(e);\n        };\n        self.touchcancel = function (e) {\n            if (self.dispatchEvent('touchcancel', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.touchEndEvents(e);\n        };\n    };\n});\n","/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var wheeling;\n        self.stopPropagation = function (e) { e.stopPropagation(); };\n        /**\n         * Adds an event listener to the given event.\n         * @memberof canvasDatagrid\n         * @name addEventListener\n         * @method\n         * @param {string} ev The name of the event to subscribe to.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.addEventListener = function (ev, fn) {\n            self.events[ev] = self.events[ev] || [];\n            self.events[ev].unshift(fn);\n        };\n        /**\n         * Removes the given listener function from the given event.  Must be an actual reference to the function that was bound.\n         * @memberof canvasDatagrid\n         * @name removeEventListener\n         * @method\n         * @param {string} ev The name of the event to unsubscribe from.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.removeEventListener = function (ev, fn) {\n            (self.events[ev] || []).forEach(function removeEachListener(sfn, idx) {\n                if (fn === sfn) {\n                    self.events[ev].splice(idx, 1);\n                }\n            });\n        };\n        /**\n         * Fires the given event, padding an event object to the event subscribers.\n         * @memberof canvasDatagrid\n         * @name dispatchEvent\n         * @method\n         * @param {number} ev The name of the event to dispatch.\n         * @param {number} e The event object.\n         */\n        self.dispatchEvent = function (ev, e) {\n            e = ev.type ? ev : (e || {});\n            ev = ev.type || ev;\n            var defaultPrevented;\n            function preventDefault() {\n                defaultPrevented = true;\n            }\n            if (!self.events[ev]) { return; }\n            self.events[ev].forEach(function dispatchEachEvent(fn) {\n                e.ctx = self.ctx;\n                e.preventDefault = preventDefault;\n                fn.apply(self.intf, [e]);\n            });\n            return defaultPrevented;\n        };\n        self.getRatio = function () {\n            return Math.min(self.attributes.maxPixelRatio, (window.devicePixelRatio || 1) /\n                (self.ctx.webkitBackingStorePixelRatio ||\n                    self.ctx.mozBackingStorePixelRatio ||\n                    self.ctx.msBackingStorePixelRatio ||\n                    self.ctx.oBackingStorePixelRatio ||\n                    self.ctx.backingStorePixelRatio || 1));\n        };\n        self.resize = function (drawAfterResize) {\n            if (!self.canvas) { return; }\n            var x,\n                v = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'vertical-scroll-bar'\n                },\n                n = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'horizontal-scroll-bar'\n                },\n                vb = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'vertical-scroll-box'\n                },\n                nb = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'horizontal-scroll-box'\n                },\n                co = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    isCorner: true,\n                    isScrollBoxCorner: true,\n                    style: 'scroll-box-corner'\n                },\n                m = (self.style.scrollBarBoxMargin * 2),\n                b = (self.style.scrollBarBorderWidth * 2),\n                d = self.style.scrollBarBoxMargin * 0.5,\n                sbw = self.style.scrollBarWidth + (self.style.scrollBarBorderWidth * 2),\n                ratio = self.getRatio(),\n                bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                cellBorder = self.style.cellBorderWidth * bm,\n                columnHeaderCellBorder = self.style.columnHeaderCellBorderWidth * bm,\n                dataHeight = 0,\n                dataWidth = 0,\n                dims,\n                l = (self.data || []).length,\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                ch = self.style.cellHeight,\n                s = self.getSchema();\n            // sets actual DOM canvas element\n            function checkScrollBoxVisibility() {\n                self.scrollBox.horizontalBarVisible = (self.style.width !== 'auto' && dataWidth > self.scrollBox.width && self.style.overflowX !== 'hidden')\n                    || self.style.overflowX === 'scroll';\n                self.scrollBox.horizontalBoxVisible = dataWidth > self.scrollBox.width;\n                self.scrollBox.verticalBarVisible = (self.style.height !== 'auto' && dataHeight > self.scrollBox.height && self.style.overflowY !== 'hidden')\n                    || self.style.overflowY === 'scroll';\n                self.scrollBox.verticalBoxVisible = dataHeight > self.scrollBox.height;\n            }\n            function setScrollBoxSize() {\n                self.scrollBox.width = self.width - rowHeaderCellWidth;\n                self.scrollBox.height = self.height - columnHeaderCellHeight;\n            }\n            function setCanvasSize() {\n                if (self.isChildGrid) {\n                    return;\n                }\n                dims = {\n                    // HACK +1 ? maybe it's a magic cell border?  Required to line up properly in auto height mode.\n                    height: columnHeaderCellHeight + dataHeight + cellBorder + 1,\n                    width: dataWidth + rowHeaderCellWidth + cellBorder\n                };\n                ['width', 'height'].forEach(function (dim) {\n                    //TODO: support inherit\n                    if (['auto', undefined].indexOf(self.style[dim]) !== -1\n                            && ['auto', undefined].indexOf(self.appliedInlineStyles[dim]) !== -1) {\n                        self.parentNodeStyle[dim] = dims[dim] + 'px';\n                    } else {\n                        self.parentNodeStyle[dim] = self.style[dim];\n                        if (self.isComponet) {\n                            self.canvas.style[dim] = self.style[dim];\n                        }\n                    }\n                });\n            }\n            self.scrollCache.x = [];\n            self.scrollCache.y = [];\n            for (x = 0; x < l; x += 1) {\n                self.scrollCache.y[x] = dataHeight;\n                dataHeight += (((self.sizes.rows[x] || ch) + (self.sizes.trees[x] || 0)) * self.scale)\n                    // HACK? if an expanded tree row is frozen it is necessary to add the tree row's height a second time.\n                    + (self.frozenRow > x ? (self.sizes.trees[x] || 0) : 0);\n            }\n            if (l > 1) {\n                self.scrollCache.y[x] = dataHeight;\n            }\n            dataWidth = s.reduce(function reduceSchema(accumulator, column, columnIndex) {\n                // intentional redefintion of column.  This causes scrollCache to be in the correct order\n                column = s[self.orders.columns[columnIndex]];\n                if (column.hidden) {\n                    self.scrollCache.x[columnIndex] = accumulator;\n                    return accumulator;\n                }\n                var va = accumulator + self.getColummnWidth(self.orders.columns[columnIndex]);\n                self.scrollCache.x[columnIndex] = va;\n                return va;\n            }, 0) || 0;\n            if (self.attributes.showNewRow) {\n                dataHeight += ch;\n            }\n            setCanvasSize();\n            if (self.isChildGrid) {\n                self.width = self.parentNode.offsetWidth;\n                self.height = self.parentNode.offsetHeight;\n            } else if (self.height !== self.canvas.offsetHeight || self.width !== self.canvas.offsetWidth) {\n                self.height = self.canvas.offsetHeight;\n                self.width = self.canvas.offsetWidth;\n                self.canvasOffsetLeft = self.args.canvasOffsetLeft || 0;\n                self.canvasOffsetTop = self.args.canvasOffsetTop || 0;\n            }\n            /// calculate scroll bar dimensions\n            // non-controversial\n            self.scrollBox.top = columnHeaderCellHeight + columnHeaderCellBorder;\n            self.scrollBox.left = rowHeaderCellWidth;\n            // width and height of scroll box\n            setScrollBoxSize();\n            // is the data larger than the scroll box\n            checkScrollBoxVisibility();\n            // if the scroll box is visible, make room for it by expanding the size of the element\n            // if the other dimension is set to auto\n            if (self.scrollBox.horizontalBarVisible) {\n                if (self.style.height === 'auto' && !self.isChildGrid) {\n                    self.height += sbw;\n                }\n                dataHeight += sbw;\n                setCanvasSize();\n                setScrollBoxSize();\n                checkScrollBoxVisibility();\n            }\n            if (self.scrollBox.verticalBarVisible) {\n                if (self.style.width === 'auto' && !self.isChildGrid) {\n                    self.width += sbw;\n                }\n                dataWidth += sbw;\n                setCanvasSize();\n                setScrollBoxSize();\n                checkScrollBoxVisibility();\n            }\n            // set again after bar visibility checks\n            setScrollBoxSize();\n            self.scrollBox.scrollWidth = dataWidth - self.scrollBox.width;\n            self.scrollBox.scrollHeight = dataHeight - self.scrollBox.height;\n            self.scrollBox.widthBoxRatio = self.scrollBox.width / dataWidth;\n            self.scrollBox.scrollBoxWidth = self.scrollBox.width\n                * self.scrollBox.widthBoxRatio\n                - self.style.scrollBarWidth - b - d;\n            // TODO: This heightBoxRatio number is terribly wrong.\n            // They should be a result of the size of the grid/canvas?\n            // it being off causes the scroll bar to \"slide\" under\n            // the dragged mouse.\n            // https://github.com/TonyGermaneri/canvas-datagrid/issues/97\n            self.scrollBox.heightBoxRatio = (self.scrollBox.height - columnHeaderCellHeight) / dataHeight;\n            self.scrollBox.scrollBoxHeight = self.scrollBox.height\n                * self.scrollBox.heightBoxRatio\n                - self.style.scrollBarWidth - b - d;\n            self.scrollBox.scrollBoxWidth = Math.max(self.scrollBox.scrollBoxWidth, self.style.scrollBarBoxMinSize);\n            self.scrollBox.scrollBoxHeight = Math.max(self.scrollBox.scrollBoxHeight, self.style.scrollBarBoxMinSize);\n            // horizontal\n            n.x += rowHeaderCellWidth;\n            n.y += self.height - self.style.scrollBarWidth - d;\n            n.width = self.width - self.style.scrollBarWidth - rowHeaderCellWidth - d - m;\n            n.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n            // horizontal box\n            nb.y = n.y + self.style.scrollBarBoxMargin;\n            nb.width = self.scrollBox.scrollBoxWidth;\n            nb.height = self.style.scrollBarBoxWidth;\n            // vertical\n            v.x += self.width - self.style.scrollBarWidth - self.style.scrollBarBorderWidth - d;\n            v.y += columnHeaderCellHeight;\n            v.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n            v.height = self.height - columnHeaderCellHeight - self.style.scrollBarWidth - d - m;\n            // vertical box\n            vb.x = v.x + self.style.scrollBarBoxMargin;\n            vb.width = self.style.scrollBarBoxWidth;\n            vb.height = self.scrollBox.scrollBoxHeight;\n            // corner\n            co.x = n.x + n.width + m;\n            co.y = v.y + v.height + m;\n            co.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n            co.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n            self.scrollBox.entities = {\n                horizontalBar: n,\n                horizontalBox: nb,\n                verticalBar: v,\n                verticalBox: vb,\n                corner: co\n            };\n            self.scrollBox.bar = {\n                v: v,\n                h: n\n            };\n            self.scrollBox.box = {\n                v: vb,\n                h: nb\n            };\n            /// calculate page and dom elements\n            self.page = Math.max(1, self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap);\n            // set canvas drawing related items\n            if (!self.isChildGrid) {\n                self.canvas.width = self.width * ratio;\n                self.canvas.height = self.height * ratio;\n                self.ctx.scale(ratio, ratio);\n            }\n            // resize any open dom elements (input/textarea)\n            self.resizeEditInput();\n            self.scroll(true);\n            if (drawAfterResize) {\n                self.draw(true);\n            }\n            self.dispatchEvent('resize', {});\n            return true;\n        };\n        self.scroll = function (dontDraw) {\n            var s = self.getSchema(),\n                l = (self.data || []).length,\n                ch = self.style.cellHeight;\n            // go too far in leaps, then get focused\n            self.scrollIndexTop = Math.floor((l * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight)) - 100);\n            self.scrollIndexTop = Math.max(self.scrollIndexTop, 0);\n            self.scrollPixelTop = self.scrollCache.y[self.scrollIndexTop];\n            // sometimes the grid is rendered but the height is zero\n            if (self.scrollBox.scrollHeight === 0) {\n                self.scrollIndexTop = 0;\n            }\n            self.scrollPixelTop = 0;\n            self.scrollIndexLeft = self.frozenColumn;\n            self.scrollPixelLeft = 0;\n            while (self.scrollPixelTop < self.scrollBox.scrollTop && self.scrollIndexTop < self.data.length) {\n                // start on index +1 since index 0 was used in \"go too far\" section above\n                self.scrollIndexTop += 1;\n                self.scrollPixelTop = self.scrollCache.y[self.scrollIndexTop];\n            }\n            while (self.scrollPixelLeft < (self.scrollBox.scrollLeft + 1) && self.scrollIndexLeft < s.length) {\n                self.scrollPixelLeft = self.scrollCache.x[self.scrollIndexLeft];\n                self.scrollIndexLeft += 1;\n            }\n            if (s.length > 0) {\n                self.scrollIndexLeft = Math.max(self.scrollIndexLeft - 1, 0);\n                self.scrollPixelLeft -= self.getColummnWidth(self.orders.columns[self.scrollIndexLeft]);\n            }\n            if ((self.data || []).length > 0) {\n                self.scrollIndexTop = Math.max(self.scrollIndexTop - 1, 0);\n                self.scrollPixelTop = Math.max((self.scrollPixelTop\n                    - (\n                        self.data[self.scrollIndexTop] ? (self.sizes.rows[self.scrollIndexTop] || ch)\n                                + (self.sizes.trees[self.scrollIndexTop] || 0)\n                        : ch\n                    ) * self.scale), 0);\n            }\n            self.ellipsisCache = {};\n            if (!dontDraw) {\n                self.draw(true);\n            }\n            //TODO: figure out why this has to be delayed for child grids\n            //BUG: wheeling event on 3rd level hierarchy fails to move input box\n            requestAnimationFrame(self.resizeEditInput);\n            self.dispatchEvent('scroll', {top: self.scrollBox.scrollTop, left: self.scrollBox.scrollLeft});\n        };\n        self.mousemove = function (e, overridePos) {\n            if (self.contextMenu || self.input) {\n                return;\n            }\n            self.mouse = overridePos || self.getLayerPos(e);\n            var ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                i,\n                s = self.getSchema(),\n                dragBounds,\n                sBounds,\n                x = self.mouse.x,\n                y = self.mouse.y,\n                o = self.getCellAt(x, y),\n                delta,\n                ev = {NativeEvent: e, cell: o, x: x, y: y},\n                previousCell = self.currentCell;\n            clearTimeout(self.scrollTimer);\n            if (!self.isInGrid({x: x, y: y})) {\n                self.hasFocus = false;\n            }\n            if (self.dispatchEvent('mousemove', ev)) {\n                return;\n            }\n            if (o && self.currentCell) {\n                self.rowBoundaryCrossed = self.currentCell.rowIndex !== o.rowIndex;\n                self.columnBoundaryCrossed = self.currentCell.columnIndex !== o.columnIndex;\n                self.cellBoundaryCrossed = self.rowBoundaryCrossed || self.columnBoundaryCrossed;\n                ['row', 'column', 'cell'].forEach(function (prefix) {\n                    if (self[prefix + 'BoundaryCrossed']) {\n                        ev.cell = previousCell;\n                        self.dispatchEvent(prefix + 'mouseout', ev);\n                        ev.cell = o;\n                        self.dispatchEvent(prefix + 'mouseover', ev);\n                    }\n                });\n            }\n            self.currentCell = o;\n            if (!self.hasFocus) {\n                return;\n            }\n            self.hovers = {};\n            if (!self.draggingItem\n                    && o\n                    && self.scrollModes.indexOf(o.context) === -1) {\n                self.dragItem = o;\n                self.dragMode = o.dragContext;\n                self.cursor = o.context;\n                if (o.context === 'cell') {\n                    self.cursor = 'default';\n                    self.hovers = { rowIndex: o.rowIndex, columnIndex: o.columnIndex };\n                }\n                if ((self.selecting || self.reorderObject)\n                        && o.context === 'cell') {\n                    delta = {\n                        x: Math.abs(self.dragStart.x - x),\n                        y: Math.abs(self.dragStart.y - y)\n                    };\n                    if (self.dragStartObject.columnIndex !== -1 && e.shiftKey) {\n                        self.dragStartObject = {\n                            rowIndex: self.activeCell.rowIndex,\n                            columnIndex: self.activeCell.columnIndex\n                        };\n                    }\n                    dragBounds = {\n                        top: Math.min(self.dragStartObject.rowIndex, o.rowIndex),\n                        left: Math.min(self.dragStartObject.columnIndex, o.columnIndex),\n                        bottom: Math.max(self.dragStartObject.rowIndex, o.rowIndex),\n                        right: Math.max(self.dragStartObject.columnIndex, o.columnIndex)\n                    };\n                    if (self.dragStartObject.columnIndex === -1) {\n                        sBounds = self.getSelectionBounds();\n                        dragBounds.left = -1;\n                        dragBounds.right = s.length - 1;\n                        dragBounds.top = Math.min(sBounds.top, o.rowIndex);\n                        dragBounds.bottom = Math.max(sBounds.bottom, o.rowIndex);\n                    }\n                    if (self.dragStartObject.rowIndex !== o.rowIndex\n                                || self.dragStartObject.columnIndex !== o.columnIndex) {\n                        self.ignoreNextClick = true;\n                    }\n                    if (self.cellBoundaryCrossed || (delta.x === 0 && delta.y === 0) || (self.attributes.selectionMode === 'row')) {\n                        if (((self.attributes.selectionMode === 'row') || self.dragStartObject.columnIndex === -1)\n                                && self.rowBoundaryCrossed) {\n                            self.selectRow(o.rowIndex, ctrl, null, true);\n                        } else if (self.attributes.selectionMode !== 'row') {\n                            if (!self.dragAddToSelection && o.rowIndex !== undefined) {\n                                if (self.selections[o.rowIndex] && self.selections[o.rowIndex].indexOf(o.columnIndex) !== -1) {\n                                    self.selections[o.rowIndex].splice(self.selections[o.rowIndex].indexOf(o.columnIndex), 1);\n                                }\n                            } else {\n                                self.selections[o.rowIndex] = self.selections[o.rowIndex] || [];\n                                if (self.selections[o.rowIndex].indexOf(o.columnIndex) === -1) {\n                                    self.selections[o.rowIndex].push(o.columnIndex);\n                                }\n                            }\n                        }\n                    }\n                    if ((!self.selectionBounds || (dragBounds.top !== self.selectionBounds.top\n                            || dragBounds.left !== self.selectionBounds.left\n                            || dragBounds.bottom !== self.selectionBounds.bottom\n                            || dragBounds.right !== self.selectionBounds.right)) && !ctrl) {\n                        self.selections = [];\n                        sBounds = dragBounds;\n                        if (self.attributes.selectionMode === 'row') {\n                            for (i = sBounds.top; i <= sBounds.bottom; i += 1) {\n                                self.selectRow(i, true, null, true);\n                            }\n                        } else if (dragBounds.top !== -1) {\n                            self.selectArea(sBounds, true);\n                        }\n                    }\n                    self.autoScrollZone(e, x, y, ctrl);\n                }\n            }\n            self.cellBoundaryCrossed = false;\n            self.rowBoundaryCrossed = false;\n            self.columnBoundaryCrossed = false;\n            self.draw(true);\n        };\n        self.click = function (e, overridePos) {\n            var i,\n                ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                pos = overridePos || self.getLayerPos(e);\n            self.currentCell = self.getCellAt(pos.x, pos.y);\n            if (self.currentCell.grid !== undefined) {\n                return;\n            }\n            function checkSelectionChange() {\n                var ev = {\n                    selections: self.selections,\n                    selectionBounds: self.selectionBounds\n                };\n                Object.defineProperty(ev, 'selectedData', {\n                    get: function () {\n                        return self.getSelectedData();\n                    }\n                });\n            }\n            if (self.input) {\n                self.endEdit();\n            }\n            if (self.ignoreNextClick) {\n                self.ignoreNextClick = false;\n                return;\n            }\n            i = self.currentCell;\n            if (self.dispatchEvent('click', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (['rowHeaderCell', 'columnHeaderCell'].indexOf(self.currentCell.style) === -1 && !ctrl) {\n                self.setActiveCell(i.columnIndex, i.rowIndex);\n            }\n            if (self.currentCell.context === 'cell') {\n                if (self.currentCell.style === 'cornerCell') {\n                    self.selectAll();\n                    self.draw();\n                    checkSelectionChange();\n                    return;\n                }\n                if (self.currentCell.style === 'columnHeaderCell') {\n                    if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                        if (self.orderBy === i.header.name) {\n                            self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                        } else {\n                            self.orderDirection = 'asc';\n                        }\n                        self.order(i.header.name, self.orderDirection);\n                        checkSelectionChange();\n                        return;\n                    }\n                    if (self.attributes.columnHeaderClickBehavior === 'select') {\n                        self.selectColumn(i.header.index, ctrl, e.shiftKey, true);\n                        checkSelectionChange();\n                        self.draw();\n                        return;\n                    }\n                }\n                self.selections[i.rowIndex] = self.selections[i.rowIndex] || [];\n                if (((self.attributes.selectionMode === 'row') || self.currentCell.style === 'rowHeaderCell')) {\n                    if (self.currentCell.style === 'rowHeaderCell'\n                            && self.attributes.tree && pos.x > 0\n                            && pos.x - self.currentCell.x < self.style.treeArrowWidth\n                            + self.style.treeArrowMarginLeft\n                            + self.style.treeArrowMarginRight + self.style.treeArrowClickRadius\n                            && pos.y - self.currentCell.y < self.style.treeArrowHeight\n                            + self.style.treeArrowMarginTop + self.style.treeArrowClickRadius\n                            && pos.y > 0) {\n                        self.toggleTree(i.rowIndex);\n                        return;\n                    }\n                }\n                if (e.shiftKey && !ctrl) {\n                    self.selectionBounds = self.getSelectionBounds();\n                    self.selectArea(undefined, false);\n                }\n            }\n            checkSelectionChange();\n            self.draw(true);\n        };\n        self.dragResizeColumn = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = self.resizingStartingWidth + pos.x - self.dragStart.x;\n            y = self.resizingStartingHeight + pos.y - self.dragStart.y;\n            if (x < self.style.minColumnWidth) {\n                x = self.style.minColumnWidth;\n            }\n            if (y < self.style.minRowHeight) {\n                y = self.style.minRowHeight;\n            }\n            if (self.dispatchEvent('resizecolumn', {x: x, y: y, draggingItem: self.draggingItem})) { return false; }\n            if (self.scrollBox.scrollLeft > self.scrollBox.scrollWidth - self.attributes.resizeScrollZone\n                    && self.dragMode === 'ew-resize') {\n                self.resize(true);\n                self.scrollBox.scrollLeft += x;\n            }\n            if (self.dragMode === 'ew-resize') {\n                self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.sortColumnIndex] = x;\n                if (['rowHeaderCell', 'cornerCell'].indexOf(self.draggingItem.header.style) !== -1) {\n                    self.resize(true);\n                }\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.dragMode === 'ns-resize') {\n                if (self.draggingItem.rowOpen) {\n                    self.sizes.trees[self.draggingItem.rowIndex] = y;\n                } else if (self.attributes.globalRowResize) {\n                    self.style.cellHeight = y;\n                } else {\n                    self.sizes.rows[self.draggingItem.rowIndex] = y;\n                }\n                self.dispatchEvent('resizerow', {row: y});\n                self.resizeChildGrids();\n                return;\n            }\n            self.ellipsisCache = {};\n        };\n        self.stopDragResize = function () {\n            self.resize();\n            document.body.removeEventListener('mousemove', self.dragResizeColumn, false);\n            document.body.removeEventListener('mouseup', self.stopDragResize, false);\n            self.setStorageData();\n            self.draw(true);\n            self.ignoreNextClick = true;\n        };\n        self.scrollGrid = function (e) {\n            var pos = self.getLayerPos(e);\n            if (self.attributes.scrollPointerLock && self.pointerLockPosition\n                    && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                self.pointerLockPosition.x += e.movementX;\n                self.pointerLockPosition.y += e.movementY;\n                self.pointerLockPosition.x = Math.min(self.width - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.x));\n                self.pointerLockPosition.y = Math.min(self.height - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.y));\n                pos = self.pointerLockPosition;\n            }\n            self.scrollMode = self.getCellAt(pos.x, pos.y).context;\n            if (self.scrollMode === 'horizontal-scroll-box' && self.scrollStartMode !== 'horizontal-scroll-box') {\n                self.scrollStartMode = 'horizontal-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.left = self.scrollBox.scrollLeft;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box' && self.scrollStartMode !== 'vertical-scroll-box') {\n                self.scrollStartMode = 'vertical-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.top = self.scrollBox.scrollTop;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollStartMode === 'vertical-scroll-box'\n                    && self.scrollMode !== 'vertical-scroll-box') {\n                self.scrollMode = 'vertical-scroll-box';\n            }\n            if (self.scrollStartMode === 'horizontal-scroll-box'\n                    && self.scrollMode !== 'horizontal-scroll-box') {\n                self.scrollMode = 'horizontal-scroll-box';\n            }\n            clearTimeout(self.scrollTimer);\n            if (self.scrollModes.indexOf(self.scrollMode) === -1) {\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box') {\n                self.scrollBox.scrollTop = self.scrollStart.top + ((pos.y - self.dragStart.y)\n                    / self.scrollBox.heightBoxRatio);\n            } else if (self.scrollMode === 'vertical-scroll-top') {\n                self.scrollBox.scrollTop -= (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'vertical-scroll-bottom') {\n                self.scrollBox.scrollTop += (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n            if (self.scrollMode === 'horizontal-scroll-box') {\n                self.scrollBox.scrollLeft = self.scrollStart.left + ((pos.x - self.dragStart.x)\n                    / self.scrollBox.widthBoxRatio);\n            } else if (self.scrollMode === 'horizontal-scroll-right') {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'horizontal-scroll-left') {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.stopScrollGrid = function () {\n            clearTimeout(self.scrollTimer);\n            if (document.exitPointerLock) {\n                document.exitPointerLock();\n            }\n            document.removeEventListener('mousemove', self.scrollGrid, false);\n        };\n        self.dragReorder = function (e) {\n            var pos, x, y,\n                columReorder = self.dragMode === 'column-reorder',\n                rowReorder = self.dragMode === 'row-reorder';\n            pos = self.getLayerPos(e);\n            x = pos.x - self.dragStart.x;\n            y = pos.y - self.dragStart.y;\n            if (!self.attributes.allowColumnReordering && columReorder) {\n                return;\n            }\n            if (!self.attributes.allowRowReordering && rowReorder) {\n                return;\n            }\n            if (self.dispatchEvent('reordering', {\n                    NativeEvent: e,\n                    source: self.dragStartObject,\n                    target: self.currentCell,\n                    dragMode: self.dragMode\n                })) {\n                return;\n            }\n            if (Math.abs(x) > self.attributes.reorderDeadZone || Math.abs(y) > self.attributes.reorderDeadZone) {\n                self.reorderObject = self.draggingItem;\n                self.reorderTarget = self.currentCell;\n                self.reorderObject.dragOffset = {\n                    x: x,\n                    y: y\n                };\n                self.autoScrollZone(e, columReorder ? pos.x : -1, rowReorder ? pos.y : -1, false);\n            }\n        };\n        self.stopDragReorder = function (e) {\n            var oIndex,\n                tIndex,\n                cr = {\n                    'row-reorder': self.orders.rows,\n                    'column-reorder': self.orders.columns\n                },\n                i = {\n                    'row-reorder': 'rowIndex',\n                    'column-reorder': 'sortColumnIndex'\n                }[self.dragMode];\n            document.body.removeEventListener('mousemove', self.dragReorder, false);\n            document.body.removeEventListener('mouseup', self.stopDragReorder, false);\n            if (self.reorderObject\n                    && self.reorderTarget\n                    && ((self.dragMode === 'column-reorder' && self.reorderTarget.sortColumnIndex > -1\n                        && self.reorderTarget.sortColumnIndex < self.getSchema().length)\n                    || (self.dragMode === 'row-reorder' && self.reorderTarget.rowIndex > -1\n                        && self.reorderTarget.rowIndex < self.data.length))\n                    && self.reorderObject[i] !== self.reorderTarget[i]\n                    && !self.dispatchEvent('reorder', {\n                        NativeEvent: e,\n                        source: self.reorderObject,\n                        target: self.reorderTarget,\n                        dragMode: self.dragMode\n                    })) {\n                self.ignoreNextClick = true;\n                oIndex = cr[self.dragMode].indexOf(self.reorderObject[i]);\n                tIndex = cr[self.dragMode].indexOf(self.reorderTarget[i]);\n                cr[self.dragMode].splice(oIndex, 1);\n                cr[self.dragMode].splice(tIndex, 0, self.reorderObject[i]);\n                self.resize();\n                self.setStorageData();\n            }\n            self.reorderObject = undefined;\n            self.reorderTarget = undefined;\n            self.draw(true);\n        };\n        self.dragMove = function (e) {\n            if (self.dispatchEvent('moving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.moveOffset = {\n                x: self.currentCell.columnIndex - self.dragStartObject.columnIndex,\n                y: self.currentCell.rowIndex - self.dragStartObject.rowIndex\n            };\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopDragMove = function (e) {\n            document.body.removeEventListener('mousemove', self.dragMove, false);\n            document.body.removeEventListener('mouseup', self.stopDragMove, false);\n            var b = self.getSelectionBounds();\n            if (self.dispatchEvent('endmove', {NativeEvent: e, cell: self.currentCell})) {\n                self.movingSelection = undefined;\n                self.moveOffset = undefined;\n                self.draw(true);\n                return;\n            }\n            if (self.moveOffset) {\n                self.moveTo(self.movingSelection, b.left + self.moveOffset.x, b.top + self.moveOffset.y);\n                self.moveSelection(self.moveOffset.x, self.moveOffset.y);\n            }\n            self.movingSelection = undefined;\n            self.moveOffset = undefined;\n            self.draw(true);\n        };\n        self.freezeMove = function (e) {\n            if (self.dispatchEvent('freezemoving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.ignoreNextClick = true;\n            self.freezeMarkerPosition = pos;\n            if (self.currentCell && self.currentCell.rowIndex !== undefined && self.dragMode === 'frozen-row-marker') {\n                self.scrollBox.scrollTop = 0;\n                self.frozenRow = self.currentCell.rowIndex + 1;\n            }\n            if (self.currentCell && self.currentCell.columnIndex !== undefined && self.dragMode === 'frozen-column-marker') {\n                self.scrollBox.scrollLeft = 0;\n                self.frozenColumn = self.currentCell.columnIndex + 1;\n            }\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopFreezeMove = function (e) {\n            document.body.removeEventListener('mousemove', self.freezeMove, false);\n            document.body.removeEventListener('mouseup', self.stopFreezeMove, false);\n            self.freezeMarkerPosition = undefined;\n            if (self.dispatchEvent('endfreezemove', {NativeEvent: e})) {\n                self.frozenRow = self.startFreezeMove.x;\n                self.frozenColumn = self.startFreezeMove.y;\n                self.draw(true);\n                return;\n            }\n            self.draw(true);\n        };\n        self.mousedown = function (e, overridePos) {\n            self.lastMouseDownTarget = e.target;\n            if (self.dispatchEvent('mousedown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (e.button === 2 || self.input) { return; }\n            var ctrl = (e.ctrlKey || e.metaKey),\n                move = /-move/.test(self.dragMode),\n                freeze = /frozen-row-marker|frozen-column-marker/.test(self.dragMode),\n                resize = /-resize/.test(self.dragMode);\n            self.dragStart = overridePos || self.getLayerPos(e);\n            self.scrollStart = {\n                left: self.scrollBox.scrollLeft,\n                top: self.scrollBox.scrollTop\n            };\n            self.dragStartObject = self.getCellAt(self.dragStart.x, self.dragStart.y);\n            self.dragAddToSelection = !self.dragStartObject.selected;\n            if (!ctrl && !e.shiftKey && !/(vertical|horizontal)-scroll-(bar|box)/\n                    .test(self.dragStartObject.context)\n                    && self.currentCell\n                    && !self.currentCell.isColumnHeader\n                    && !move\n                    && !freeze\n                    && !resize) {\n                self.selections = [];\n            }\n            if (self.dragStartObject.isGrid) {\n                return;\n            }\n            if (self.scrollModes.indexOf(self.dragStartObject.context) !== -1) {\n                self.scrollMode = self.dragStartObject.context;\n                self.scrollStartMode = self.dragStartObject.context;\n                self.scrollGrid(e);\n                if (self.attributes.scrollPointerLock\n                        && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                    self.pointerLockPosition = {\n                        x: self.dragStart.x,\n                        y: self.dragStart.y\n                    };\n                    self.canvas.requestPointerLock();\n                }\n                document.addEventListener('mousemove', self.scrollGrid, false);\n                document.addEventListener('mouseup', self.stopScrollGrid, false);\n                self.ignoreNextClick = true;\n                return;\n            }\n            if (self.dragMode === 'cell') {\n                self.selecting = true;\n                if ((self.attributes.selectionMode === 'row' || self.dragStartObject.columnIndex === -1)\n                        && self.dragStartObject.rowIndex > -1) {\n                    self.selectRow(self.dragStartObject.rowIndex, ctrl, null, true);\n                } else if (self.attributes.selectionMode !== 'row') {\n                    self.mousemove(e);\n                }\n                return;\n            }\n            if (move) {\n                self.draggingItem = self.dragItem;\n                self.movingSelection = self.selections.concat([]);\n                self.dragging = self.dragStartObject;\n                if (self.dispatchEvent('beginmove', {NativeEvent: e, cell: self.currentCell})) { return; }\n                document.body.addEventListener('mousemove', self.dragMove, false);\n                document.body.addEventListener('mouseup', self.stopDragMove, false);\n                return self.mousemove(e);\n            }\n            if (freeze) {\n                self.draggingItem = self.dragItem;\n                self.startFreezeMove = {\n                    x: self.frozenRow,\n                    y: self.frozenColumn\n                };\n                if (self.dispatchEvent('beginfreezemove', {NativeEvent: e})) { return; }\n                document.body.addEventListener('mousemove', self.freezeMove, false);\n                document.body.addEventListener('mouseup', self.stopFreezeMove, false);\n                return self.mousemove(e);\n            }\n            if (resize) {\n                self.draggingItem = self.dragItem;\n                if (self.draggingItem.rowOpen) {\n                    self.resizingStartingHeight = self.sizes.trees[self.draggingItem.rowIndex];\n                } else {\n                    self.resizingStartingHeight = self.sizes.rows[self.draggingItem.rowIndex] || self.style.cellHeight;\n                }\n                self.resizingStartingWidth = self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.sortColumnIndex] || self.draggingItem.width;\n                document.body.addEventListener('mousemove', self.dragResizeColumn, false);\n                document.body.addEventListener('mouseup', self.stopDragResize, false);\n                return;\n            }\n            if (['row-reorder', 'column-reorder'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragStartObject;\n                document.body.addEventListener('mousemove', self.dragReorder, false);\n                document.body.addEventListener('mouseup', self.stopDragReorder, false);\n                return;\n            }\n        };\n        self.mouseup = function (e) {\n            clearTimeout(self.scrollTimer);\n            self.cellBoundaryCrossed = true;\n            self.rowBoundaryCrossed = true;\n            self.columnBoundaryCrossed = true;\n            self.selecting = undefined;\n            self.draggingItem = undefined;\n            self.dragStartObject = undefined;\n            if (self.dispatchEvent('mouseup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            if (self.currentCell && self.currentCell.grid !== undefined) {\n                return;\n            }\n            if (self.contextMenu || self.input) { return; }\n            if (self.dragStart && self.isInGrid(self.dragStart)) {\n                self.controlInput.focus();\n            }\n            e.preventDefault();\n        };\n        // gets the horizontal adjacent cells as well as first/last based on column visibility\n        self.getAdjacentCells = function () {\n            var x,\n                i,\n                s = self.getSchema(),\n                o = {};\n            for (x = 0; x < s.length; x += 1) {\n                i = self.orders.columns[x];\n                if (!s[i].hidden) {\n                    if (o.first === undefined) {\n                        o.first = x;\n                        o.left = x;\n                    }\n                    o.last = x;\n                    if (x > self.activeCell.columnIndex && o.right === undefined) {\n                        o.right = x;\n                    }\n                    if (x < self.activeCell.columnIndex) {\n                        o.left = x;\n                    }\n                }\n            }\n            if (o.right === undefined) {\n                o.right = o.last;\n            }\n            return o;\n        };\n        self.keydown = function (e) {\n            var i,\n                ev,\n                adjacentCells = self.getAdjacentCells(),\n                x = self.activeCell.columnIndex,\n                y = self.activeCell.rowIndex,\n                ctrl = (e.ctrlKey || e.metaKey),\n                last = self.data.length - 1,\n                s = self.getSchema(),\n                cols = s.length - 1;\n            if (self.dispatchEvent('keydown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.attributes.showNewRow) {\n                last += 1;\n            }\n            if (e.keyCode === 9) {\n                e.preventDefault();\n            }\n            // esc\n            if (e.keyCode === 27) {\n                self.selections = [];\n                self.draw(true);\n            // ctrl + a\n            } else if (ctrl && e.keyCode === 65) {\n                self.selectAll();\n            //ArrowDown\n            } else if (e.keyCode === 40) {\n                y += 1;\n            //ArrowUp\n            } else if (e.keyCode === 38) {\n                y -= 1;\n            //ArrowLeft Tab\n            } else if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {\n                x = adjacentCells.left;\n            //ArrowRight Tab\n            } else if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {\n                x = adjacentCells.right;\n            //PageUp\n            } else if (e.keyCode === 33) {\n                y -= self.page;\n                e.preventDefault();\n            //PageDown\n            } else if (e.keyCode === 34) {\n                y += self.page;\n                e.preventDefault();\n            //Home ArrowUp\n            } else if (e.keyCode === 36 || (ctrl && e.keyCode === 38)) {\n                y = 0;\n            //End ArrowDown\n            } else if (e.keyCode === 35 || (ctrl && e.keyCode === 40)) {\n                y = self.data.length - 1;\n            //ArrowRight\n            } else if (ctrl && e.keyCode === 39) {\n                x = adjacentCells.last;\n            //ArrowLeft\n            } else if (ctrl && e.keyCode === 37) {\n                x = adjacentCells.first;\n            }\n            //Enter\n            if (e.keyCode === 13) {\n                return self.beginEditAt(x, y);\n            }\n            //Space\n            if (e.keyCode === 32) {\n                self.selections = [];\n                self.selections[Math.max(y, 0)] = [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                if (self.attributes.selectionMode === 'row') {\n                    for (i = self.selectionBounds.top; i <= self.selectionBounds.bottom; i += 1) {\n                        self.selectRow(i, ctrl, null, true);\n                    }\n                } else {\n                    self.selectArea(undefined, ctrl);\n                }\n                e.preventDefault();\n                self.draw(true);\n                return;\n            }\n            if (x < 0) {\n                x = adjacentCells.first;\n            }\n            if (y > last) {\n                y = last;\n            }\n            if (y < 0) {\n                y = 0;\n            }\n            if (x > cols) {\n                x = adjacentCells.last;\n            }\n            // TODO - most likley some column order related bugs in key based selection\n            // Arrows\n            if (e.shiftKey && [37, 38, 39, 40].indexOf(e.keyCode) !== -1) {\n                self.selections[Math.max(y, 0)] = self.selections[Math.max(y, 0)] || [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                self.selectArea(undefined, ctrl);\n                self.draw(true);\n            }\n            if (x !== self.activeCell.columnIndex || y !== self.activeCell.rowIndex) {\n                self.scrollIntoView(x !== self.activeCell.columnIndex ? x : undefined, y !== self.activeCell.rowIndex ? y : undefined);\n                self.setActiveCell(x, y);\n                if (!e.shiftKey && self.attributes.selectionFollowsActiveCell) {\n                    if (!ctrl) {\n                        self.selections = [];\n                    }\n                    self.selections[y] = self.selections[y] || [];\n                    self.selections[y].push(x);\n                    ev = {\n                        selectedData: self.getSelectedData(),\n                        selections: self.selections,\n                        selectionBounds: self.selectionBounds\n                    };\n                    Object.defineProperty(ev, 'selectedData', {\n                        get: function () {\n                            return self.getSelectedData();\n                        }\n                    });\n                    self.dispatchEvent('selectionchanged', ev);\n                }\n                self.draw(true);\n            }\n        };\n        self.keyup = function (e) {\n            if (self.dispatchEvent('keyup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n        };\n        self.keypress = function (e) {\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.dispatchEvent('keypress', {NativeEvent: e, cell: self.currentCell})) { return; }\n        };\n        self.dblclick = function (e) {\n            if (self.dispatchEvent('dblclick', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'columnHeaderCell') {\n                self.fitColumnToValues(self.currentCell.header.name);\n            } else if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'cornerCell') {\n                self.autosize();\n            } else if (['cell', 'activeCell'].indexOf(self.currentCell.style) !== -1) {\n                self.beginEditAt(self.currentCell.columnIndex, self.currentCell.rowIndex);\n            }\n        };\n        self.scrollWheel = function (e) {\n            var l,\n                t,\n                ev = e,\n                deltaX = e.deltaX === undefined ? e.NativeEvent.deltaX : e.deltaX,\n                deltaY = e.deltaY === undefined ? e.NativeEvent.deltaY : e.deltaY,\n                deltaMode = e.deltaMode === undefined ? e.NativeEvent.deltaMode : e.deltaMode;\n            if (wheeling) {\n                return;\n            }\n            if (self.dispatchEvent('wheel', {NativeEvent: e})) {\n                return;\n            }\n            var e = e.NativeEvent || e;\n            self.touchHaltAnimation = true;\n            l = self.scrollBox.scrollLeft;\n            t = self.scrollBox.scrollTop;\n            if (self.hasFocus) {\n                //BUG Issue 42: https://github.com/TonyGermaneri/canvas-datagrid/issues/42\n                //https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\n                if (deltaMode === 1) {\n                    // line mode = 17 pixels per line\n                    deltaY = deltaY * 17;\n                }\n                if ((self.scrollBox.scrollTop  < self.scrollBox.scrollHeight && deltaY > 0)\n                        || (self.scrollBox.scrollLeft < self.scrollBox.scrollWidth && deltaX > 0)\n                        || (self.scrollBox.scrollTop > 0 && deltaY < 0)\n                        || (self.scrollBox.scrollLeft > 0 && deltaX < 0)) {\n                    ev.preventDefault(e);\n                }\n                wheeling = setTimeout(function () {\n                    wheeling = undefined;\n                    self.scrollBox.scrollTo(deltaX + l, deltaY + t);\n                }, 1);\n            }\n        };\n        self.pasteItem = function (clipData, x, y, mimeType) {\n            var l, s = self.getVisibleSchema(), yi = y - 1, sel = [];\n            function normalizeRowData(importingRow, existingRow, offsetX, schema, mimeType, rowIndex) {\n                var r = existingRow;\n                if (!Array.isArray(importingRow) && importingRow !== null && typeof importingRow === 'object') {\n                    importingRow = Object.keys(importingRow).map(function (colKey) {\n                        return importingRow[colKey];\n                    });\n                }\n                if (/^text\\/html/.test(mimeType)) {\n                    importingRow = importingRow.substring(4, importingRow.length - 5).split('</td><td>');\n                }\n                if (typeof importingRow === 'string') {\n                    importingRow = [importingRow];\n                }\n                sel[rowIndex] = [];\n                importingRow.forEach(function (cellData, colIndex) {\n                    var cName = schema[colIndex + offsetX].name;\n                    if (importingRow[colIndex] === undefined || importingRow[colIndex] === null) {\n                        r[cName] = existingRow[cName];\n                        return;\n                    }\n                    sel[rowIndex].push(colIndex + offsetX);\n                    r[cName] = importingRow[colIndex];\n                });\n                return r;\n            }\n            if (/^text\\/html/.test(mimeType)) {\n                if (!/^(<meta[^>]+>)?<table>/.test(clipData.substring(0, 29))) {\n                    console.warn('Unrecognized HTML format.  HTML must be a simple table, e.g.: <table><tr><td>data</td></tr></table>.  Data with the mime type text/html not in this format will not be imported as row data.');\n                    return;\n                }\n                // strip table beginning and ending off, then split at rows\n                clipData = clipData.substring(clipData.indexOf('<table><tr>') + 11, clipData.length - 13).split('</tr><tr>');\n                // ditch any headers on the table\n                clipData = clipData.filter(function (row) {\n                    return !/^<th>|^<thead>/.test(row);\n                });\n            } else {\n                clipData = clipData.split('\\n');\n            }\n            l = clipData.length;\n            clipData.forEach(function (rowData) {\n                yi += 1;\n                var i = self.orders.rows[yi];\n                self.data[i] = normalizeRowData(rowData, self.data[i], x, s, mimeType, i);\n            });\n            self.selections = sel;\n            return l;\n        };\n        self.getNextVisibleColumnIndex = function (visibleColumnIndex) {\n            var x, s = self.getVisibleSchema();\n            for (x = 0; x < s.length; x += 1) {\n                if (s[x].columnIndex === visibleColumnIndex) {\n                    return s[x + 1].columnIndex;\n                }\n            }\n            return -1;\n        };\n        self.getVisibleColumnIndexOf = function (columnIndex) {\n            var x, s = self.getVisibleSchema();\n            for (x = 0; x < s.length; x += 1) {\n                if (s[x].columnIndex === columnIndex) {\n                    return x;\n                }\n            }\n            return -1;\n        };\n        self.paste = function (e) {\n            var d;\n            function getItem(dti) {\n                var type = dti.type;\n                dti.getAsString(function (s) {\n                    self.pasteItem(s, self.getVisibleColumnIndexOf(self.activeCell.columnIndex), self.activeCell.rowIndex, type);\n                    self.draw();\n                });\n            }\n            d = Array.prototype.filter.call(e.clipboardData.items, function (dti) {\n                return dti.type === 'text/html';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/csv';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/plain';\n            })[0];\n            if (!d) {\n                console.warn('Cannot find supported clipboard data type.  Supported types are text/html, text/csv, text/plain.');\n                return;\n            }\n            getItem(d);\n        };\n        self.cut = function (e) {\n            self.copy(e);\n            self.forEachSelectedCell(function (data, index, colName) {\n                data[index][colName] = '';\n            });\n        };\n        self.copy = function (e) {\n            if (self.dispatchEvent('copy', {NativeEvent: e})) { return; }\n            if (!self.hasFocus || !e.clipboardData) { return; }\n            var t,\n                d,\n                data = (self.data || []),\n                tableRows = [],\n                textRows = [],\n                outputHeaders = {},\n                outputHeaderKeys,\n                sData = self.getSelectedData(),\n                s = self.getSchema();\n            function htmlSafe(v) {\n                return v.replace(/</g, '&lt;').replace(/>/g, '&gt;');\n            }\n            function fCopyCell(v) {\n                v = v === null || v === undefined ? '' : v;\n                return '<td>' + (typeof v === 'string' ? htmlSafe(v) : v) + '</td>';\n            }\n            function addHeaders(headers, useHtml) {\n                if (!s.length || headers.length < 2) { return ''; }\n                var h = [];\n                if (useHtml) {\n                    h.push('<tr>');\n                }\n                s.forEach(function (column, columnIndex) {\n                    // intentional redefinition of column\n                    column = s[self.orders.columns[columnIndex]];\n                    if (!column.hidden && headers.indexOf(column.name) !== -1) {\n                        var hVal = (column.name || column.title) || '';\n                        if (useHtml) {\n                            h.push('<th>' + htmlSafe(hVal) + '</th>');\n                        } else {\n                            h.push('\"' + hVal.replace(/\"/g, '\"\"') + '\"');\n                        }\n                    }\n                });\n                h.push(useHtml ? '</tr>' : '\\n');\n                return h.join(useHtml ? '' : ',');\n            }\n            function addCellValue(val, trRow, textRow, column) {\n                // escape strings\n                if (val !== null\n                        && val !== false\n                        && val !== undefined\n                        && val.replace) {\n                    trRow.push(fCopyCell(val));\n                    textRow.push('\"' + val.replace(/\"/g, '\"\"') + '\"');\n                    return;\n                }\n                if (val !== undefined) {\n                    textRow.push(val);\n                    trRow.push(fCopyCell(val));\n                    return;\n                }\n                // issue #66\n                textRow.push('');\n                trRow.push('<td>&nbsp;</td>');\n            }\n            if (sData.length > 0) {\n                sData.forEach(function (row) {\n                    var rowKeys = Object.keys(row);\n                    if (row) {\n                        var trRow = [],\n                            textRow = [],\n                            sSorted = [];\n                        // HACK: https://github.com/TonyGermaneri/canvas-datagrid/issues/181\n                        // I can't use sort here or O(1), so hacks\n                        s.forEach(function (column, columnIndex) {\n                            sSorted.push(s[self.orders.columns[columnIndex]]);\n                        });\n                        sSorted.forEach(function (column, columnIndex) {\n                            if (rowKeys.indexOf(column.name) !== -1) {\n                                outputHeaders[column.name] = true;\n                                // escape strings\n                                addCellValue(row[column.name], trRow, textRow, column);\n                            }\n                        });\n                        tableRows.push(trRow.join(''));\n                        textRows.push(textRow.join(','));\n                    }\n                });\n                outputHeaderKeys = Object.keys(outputHeaders);\n                t = addHeaders(outputHeaderKeys) + textRows.join('\\n');\n                d = '<table>' + addHeaders(outputHeaderKeys, true) + '<tr>' + tableRows.join('</tr><tr>') + '</tr></table>';\n                if (outputHeaderKeys.length === 1) {\n                    // if there was only one cell selected, remove the quotes from the string\n                    t = t.substring(1, t.length -1);\n                }\n                e.clipboardData.setData('text/html', d);\n                e.clipboardData.setData('text/plain', t);\n                e.clipboardData.setData('text/csv', t);\n                e.clipboardData.setData('application/json', JSON.stringify(sData));\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n","/*jslint browser: true, unparam: true, todo: true*/\n/*globals XMLSerializer: false, define: true, Blob: false, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var perfCounters = [],\n            cachedImagesDrawn = false,\n            drawCount = 0,\n            perfWindowSize = 300,\n            entityCount = [],\n            hiddenFrozenColumnCount = 0,\n            scrollDebugCounters = [],\n            touchPPSCounters = [];\n        self.htmlImageCache = {};\n        // more heavyweight version than fillArray defined in intf.js\n        function fillArray(low, high, step, def) {\n            step = step || 1;\n            var i = [], x;\n            for (x = low; x <= high; x += step) {\n                i[x] = def === undefined ? x : (typeof def === 'function' ? def(x) : def);\n            }\n            return i;\n        }\n        function drawPerfLine(w, h, x, y, perfArr, arrIndex, max, color, useAbs) {\n            var i = w / perfArr.length,\n                r = h / max;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x, y + h);\n            perfArr.forEach(function (n) {\n                var val = (arrIndex === undefined ? n : n[arrIndex]),\n                    cx,\n                    cy;\n                if (useAbs) {\n                    val = Math.abs(val);\n                }\n                cx = x + i;\n                cy = y + h - (val * r);\n                self.ctx.lineTo(cx, cy);\n                x += i;\n            });\n            self.ctx.moveTo(x + w, y + h);\n            self.ctx.strokeStyle = color;\n            self.ctx.stroke();\n        }\n        function drawOnAllImagesLoaded() {\n            var loaded = true;\n            Object.keys(self.htmlImageCache).forEach(function (html) {\n                if (!self.htmlImageCache[html].complete) {\n                    loaded = false;\n                }\n            });\n            if (loaded && !cachedImagesDrawn) {\n                cachedImagesDrawn = true;\n                self.draw();\n            }\n        }\n        function drawHtml(cell) {\n            var img,\n                v = cell.innerHTML || cell.formattedValue,\n                cacheKey = v.toString() + cell.rowIndex.toString() + cell.columnIndex.toString(), \n                x = cell.x + self.canvasOffsetLeft,\n                y = cell.y + self.canvasOffsetTop;\n            if (self.htmlImageCache[cacheKey]) {\n                img = self.htmlImageCache[cacheKey];\n                if (img.height !== cell.height || img.width !== cell.width) {\n                    // height and width of the cell has changed, invalidate cache\n                    self.htmlImageCache[cacheKey] = undefined;\n                } else {\n                    if (!img.complete) {\n                        return;\n                    }\n                    return self.ctx.drawImage(img, x, y);\n                }\n            } else {\n                cachedImagesDrawn = false;\n            }\n            img = new Image(cell.width, cell.height);\n            self.htmlImageCache[cacheKey] = img;\n            img.onload = function () {\n                self.ctx.drawImage(img, x, y);\n                drawOnAllImagesLoaded();\n            };\n            img.src = 'data:image/svg+xml;base64,' + btoa(\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + cell.width + '\" height=\"' + cell.height + '\">\\n' +\n                    '<foreignObject class=\"node\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\\n' +\n                    '<body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;padding:0;\">\\n' +\n                    v + '\\n' +\n                    '</body>' +\n                    '</foreignObject>\\n' +\n                    '</svg>\\n'\n            );\n        }\n        function drawOrderByArrow(x, y) {\n            var mt = self.style.columnHeaderOrderByArrowMarginTop * self.scale,\n                ml = self.style.columnHeaderOrderByArrowMarginLeft * self.scale,\n                mr = self.style.columnHeaderOrderByArrowMarginRight * self.scale,\n                aw = self.style.columnHeaderOrderByArrowWidth * self.scale,\n                ah = self.style.columnHeaderOrderByArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.columnHeaderOrderByArrowColor;\n            self.ctx.strokeStyle = self.style.columnHeaderOrderByArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.orderDirection === 'asc') {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y + ah);\n                self.ctx.lineTo(x + aw, y + ah);\n                self.ctx.lineTo(x + (aw * 0.5), y);\n                self.ctx.lineTo(x, y + ah);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function drawTreeArrow(cell, x, y) {\n            var mt = self.style.treeArrowMarginTop * self.scale,\n                mr = self.style.treeArrowMarginRight * self.scale,\n                ml = self.style.treeArrowMarginLeft * self.scale,\n                aw = self.style.treeArrowWidth * self.scale,\n                ah = self.style.treeArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.treeArrowColor;\n            self.ctx.strokeStyle = self.style.treeArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.openChildren[cell.rowIndex]) {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y);\n                self.ctx.lineTo(x + ah, y + (aw * 0.5));\n                self.ctx.lineTo(x, y + aw);\n                self.ctx.lineTo(x, y);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function radiusRect(x, y, w, h, radius) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            var r = x + w, b = y + h;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x + radius, y);\n            self.ctx.lineTo(r - radius, y);\n            self.ctx.quadraticCurveTo(r, y, r, y + radius);\n            self.ctx.lineTo(r, y + h - radius);\n            self.ctx.quadraticCurveTo(r, b, r - radius, b);\n            self.ctx.lineTo(x + radius, b);\n            self.ctx.quadraticCurveTo(x, b, x, b - radius);\n            self.ctx.lineTo(x, y + radius);\n            self.ctx.quadraticCurveTo(x, y, x + radius, y);\n        }\n        function fillRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillRect(x, y, w, h);\n        }\n        function strokeRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.strokeRect(x, y, w, h);\n        }\n        function fillText(text, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillText(text, x, y);\n        }\n        function fillCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.fill();\n        }\n        function strokeCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.stroke();\n        }\n        function clipFrozenArea(mode) {\n            // 0 both, 1 rows, 2 cols\n            // self.lastFrozenColumnPixel;\n            // self.lastFrozenRowPixel;\n            self.ctx.beginPath();\n            if (mode === 0) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, self.lastFrozenRowPixel);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 1) {\n                self.ctx.moveTo(0, self.lastFrozenRowPixel);\n                self.ctx.lineTo(0, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 2) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, 0);\n                self.ctx.lineTo(self.width, 0);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n            }\n            self.ctx.clip();\n        }\n        function fillHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return fillCircle(x, y, r * 0.5);\n            }\n            fillRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function strokeHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return strokeCircle(x, y, r * 0.5);\n            }\n            strokeRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function addselectionHandle(c, pos) {\n            var hw = self.style.selectionHandleSize,\n                p = {\n                    tr: function () {\n                        fillHandle(c.x + c.width, c.y, hw);\n                        strokeHandle(c.x + c.width, c.y, hw);\n                    },\n                    br: function () {\n                        fillHandle(c.x + c.width, c.y + c.height, hw);\n                        strokeHandle(c.x + c.width, c.y + c.height, hw);\n                    },\n                    tl: function () {\n                        fillHandle(c.x, c.y, hw);\n                        strokeHandle(c.x, c.y, hw);\n                    },\n                    bl: function () {\n                        fillHandle(c.x, c.y + c.height, hw);\n                        strokeHandle(c.x, c.y + c.height, hw);\n                    }\n                };\n            p[pos]();\n        }\n        function addBorderLine(c, pos) {\n            self.ctx.beginPath();\n            var p = {\n                t: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                },\n                r: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                b: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                l: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                }\n            };\n            p[pos]();\n            self.ctx.stroke();\n        }\n        function addEllipsis(text, width) {\n            var c, w = 0;\n            if (self.ellipsisCache[text] && self.ellipsisCache[text][width]) {\n                return self.ellipsisCache[text][width];\n            }\n            //TODO Add ellipsis back when there is a fast way to do it\n            w = self.ctx.measureText(text).width;\n            self.ellipsisCache[text] = self.ellipsisCache[text] || {};\n            c = {value: text, width: w};\n            self.ellipsisCache[text][width] = c;\n            return c;\n        }\n        function wrapText(cell, splitChar) {\n            if (!cell.formattedValue) {\n                return { lines: [{width: 0, value: ''}], width: 0, height: cell.calculatedLineHeight };\n            }\n            var max = 0,\n                n = '\\n',\n                x,\n                word,\n                words = cell.formattedValue.split(splitChar),\n                textHeight = cell.calculatedLineHeight,\n                lines = [],\n                out = [],\n                wrap = self.style.cellWhiteSpace !== 'nowrap',\n                elWidth,\n                et = self.attributes.ellipsisText,\n                elClipLength,\n                plWidth,\n                clippedVal,\n                ogWordWidth,\n                previousLine,\n                line = {\n                    width: 0,\n                    value: ''\n                },\n                cHeight = wrap ? cell.paddedHeight : cell.calculatedLineHeight;\n            lines.push(line);\n            elWidth = self.ctx.measureText(' ' + et).width;\n            for (x = 0; x < words.length; x += 1) {\n                word = words[x];\n                var measure = self.ctx.measureText(word + splitChar);\n                if (line.width + measure.width + elWidth < cell.paddedWidth) {\n                    line.value += word + splitChar;\n                    line.width += measure.width;\n                    continue;\n                }\n                // if there is a hyphenated word that is too long\n                // split it and add the split set to the array\n                // then back up and re-read new split set\n                // this behavior seems right, it might not be\n                if (/\\w-\\w/.test(word) && cell.paddedWidth < measure.width) {\n                    words.splice(x, 1, word.split('-')[0] + '-', word.split('-')[1]);\n                    x -= 1;\n                    continue;\n                }\n                line = {\n                    width: measure.width,\n                    value: word + splitChar\n                };\n                if (x === 0) {\n                    lines = [];\n                    lines.push(line);\n                }\n                textHeight += cell.calculatedLineHeight;\n                if (textHeight > cHeight) {\n                    if (lines.length === 0) { break; }\n                    elClipLength = 1;\n                    previousLine = lines[lines.length - 1];\n                    if (previousLine.width < cell.paddedWidth && words.length === 1) { break; }\n                    clippedVal = previousLine.value + word;\n                    while(plWidth == undefined || (plWidth > cell.paddedWidth && elClipLength < clippedVal.length)) {\n                        plWidth = self.ctx.measureText(clippedVal + et).width\n                        clippedVal = clippedVal.substring(0, clippedVal.length - elClipLength);\n                        elClipLength + 1;\n                    }\n                    clippedVal = clippedVal + et;\n                    previousLine.value = clippedVal;\n                    previousLine.width = plWidth;\n                    break;\n                }\n                if (x > 0) {\n                    lines.push(line);\n                }\n            }\n            return {\n                lines: lines,\n                width: max,\n                height: cell.calculatedLineHeight * lines.length\n            }\n        }\n        function drawText(cell) {\n            var ll = cell.text.lines.length,\n                h = (cell.fontHeight * cell.lineHeight),\n                x,\n                line,\n                wrap = self.style.cellWhiteSpace !== 'nowrap',\n                textHeight = 0;\n            for (x = 0; x < cell.text.lines.length; x += 1) {\n                line = cell.text.lines[x];\n                var vPos = Math.max((cell.height - (wrap ? cell.text.height : cell.calculatedLineHeight)) * 0.5, 0) + h,\n                    hPos = cell.paddingLeft + cell.treeArrowWidth + cell.orderByArrowWidth;\n                if (cell.horizontalAlignment === 'right') {\n                    hPos = cell.paddingLeft + cell.paddedWidth - line.width;\n                } else if (cell.horizontalAlignment === 'center') {\n                    hPos = cell.paddingLeft + ((cell.paddedWidth + cell.paddingRight) / 2) - (line.width / 2);\n                }\n                if (cell.verticalAlignment === 'top') {\n                    vPos = cell.calculatedLineHeight;\n                } else if (cell.verticalAlignment === 'bottom') {\n                    vPos = cell.height - cell.paddingBottom - cell.text.height;\n                }\n                line.height = h + cell.lineSpacing;\n                line.offsetLeft = hPos;\n                line.offsetTop = vPos;\n                line.x = cell.x + hPos;\n                line.y = cell.y + textHeight + vPos;\n                textHeight += line.height;\n                fillText(line.value, line.x, line.y);\n            }\n            if (self.attributes.debug && cell.active) {\n                requestAnimationFrame(function () {\n                    self.ctx.font = self.style.debugFont;\n                    self.ctx.fillStyle = self.style.debugColor;\n                    fillText(JSON.stringify({\n                        x: cell.x,\n                        y: cell.y,\n                        h: cell.height,\n                        w: cell.width,\n                        pw: cell.paddedWidth,\n                        idx: cell.columnIndex,\n                        idx_ord: cell.sortColumnIndex\n                    }, null, '\\t'),\n                        cell.x + 14, cell.y + 14);\n                    fillText(JSON.stringify(cell.text.lines.map(function (l) { return {w: l.width, v: l.value.length }; }), null, '\\t'),\n                        cell.x + 14, cell.y + 30);\n                });\n            }\n        }\n        function getFrozenColumnsWidth() {\n            var w = 0,\n                s = self.getSchema(),\n                x = 0,\n                n = Math.min(self.frozenColumn, s.length),\n                column;\n            hiddenFrozenColumnCount = 0;\n            while (x < n) {\n                column = s[x];\n                if (column.hidden) {\n                    hiddenFrozenColumnCount += 1;\n                } else {\n                    w += self.getColummnWidth(x);\n                }\n                x += 1;\n            }\n            return w;\n        }\n        /**\n         * Redraws the grid. No matter what the change, this is the only method required to refresh everything.\n         * @memberof canvasDatagrid\n         * @name draw\n         * @method\n         */\n         // r = literal row index\n         // rd = row data array\n         // i = user order index\n         // o = literal data index\n         // y = y drawing cursor\n         // x = x drawing cursor\n         // s = visible schema array\n         // cx = current x drawing cursor sub calculation var\n         // cy = current y drawing cursor sub calculation var\n         // a = static cell (like corner cell)\n         // p = perf counter\n         // l = data length\n         // u = current cell\n         // h = current height\n         // w = current width\n        self.draw = function (internal) {\n            if (self.dispatchEvent('beforedraw', {})) { return; }\n            if (!self.isChildGrid && (!self.height || !self.width)) {\n                return;\n            }\n            if (self.isChildGrid && internal) {\n                requestAnimationFrame(self.parentGrid.draw);\n                return;\n            }\n            if (self.intf.visible === false) {\n                return;\n            }\n            // initial values\n            var checkScrollHeight, rowHeaderCell, p, cx, cy, treeGrid, rowOpen,\n                rowHeight, cornerCell, y, x, c, h, w, s, r, rd, aCell,\n                data = (self.data || []),\n                bc = self.style.gridBorderCollapse === 'collapse',\n                selectionBorders = [],\n                moveBorders = [],\n                selectionHandles = [],\n                rowHeaders = [],\n                l = data.length,\n                u = self.currentCell || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                cellHeight = self.style.cellHeight;\n            drawCount += 1;\n            p = performance.now();\n            self.visibleRowHeights = [];\n            // if data length has changed, there is no way to know\n            if (data.length > self.orders.rows.length) {\n                self.createRowOrders();\n            }\n            function drawScrollBars() {\n                var drawCorner,\n                    en = self.scrollBox.entities,\n                    m = (self.style.scrollBarBoxMargin * 2);\n                self.ctx.strokeStyle = self.style.scrollBarBorderColor;\n                self.ctx.lineWidth = self.style.scrollBarBorderWidth;\n                en.horizontalBox.x = rowHeaderCellWidth + self.style.scrollBarBoxMargin\n                    + ((en.horizontalBar.width - self.scrollBox.scrollBoxWidth)\n                        * (self.scrollBox.scrollLeft / self.scrollBox.scrollWidth));\n                en.verticalBox.y = columnHeaderCellHeight + self.style.scrollBarBoxMargin\n                    + ((en.verticalBar.height - self.scrollBox.scrollBoxHeight)\n                        * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight));\n                if (self.scrollBox.horizontalBarVisible) {\n                    self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                    fillRect(en.horizontalBar.x, en.horizontalBar.y, en.horizontalBar.width + m, en.horizontalBar.height);\n                    strokeRect(en.horizontalBar.x, en.horizontalBar.y, en.horizontalBar.width + m, en.horizontalBar.height);\n                    self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                    if (self.scrollBox.horizontalBoxVisible) {\n                        if (/horizontal/.test(u.context)) {\n                            self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                        }\n                        radiusRect(en.horizontalBox.x, en.horizontalBox.y,\n                            en.horizontalBox.width, en.horizontalBox.height, self.style.scrollBarBoxBorderRadius);\n                        self.ctx.stroke();\n                        self.ctx.fill();\n                    }\n                    drawCorner = true;\n                    self.visibleCells.unshift(en.horizontalBar);\n                    self.visibleCells.unshift(en.horizontalBox);\n                }\n                if (self.scrollBox.verticalBarVisible) {\n                    self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                    fillRect(en.verticalBar.x, en.verticalBar.y, en.verticalBar.width, en.verticalBar.height + m);\n                    strokeRect(en.verticalBar.x, en.verticalBar.y, en.verticalBar.width, en.verticalBar.height + m);\n                    if (self.scrollBox.verticalBoxVisible) {\n                        self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                        if (/vertical/.test(u.context)) {\n                            self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                        }\n                        radiusRect(en.verticalBox.x, en.verticalBox.y, en.verticalBox.width,\n                            en.verticalBox.height, self.style.scrollBarBoxBorderRadius);\n                        self.ctx.stroke();\n                        self.ctx.fill();\n                    }\n                    drawCorner = true;\n                    self.visibleCells.unshift(en.verticalBar);\n                    self.visibleCells.unshift(en.verticalBox);\n                }\n                if (drawCorner) {\n                    //corner\n                    self.ctx.strokeStyle = self.style.scrollBarCornerBorderColor;\n                    self.ctx.fillStyle = self.style.scrollBarCornerBackgroundColor;\n                    radiusRect(en.corner.x, en.corner.y, en.corner.width, en.corner.height, 0);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                    self.visibleCells.unshift(en.corner);\n                }\n            }\n            function createHandlesOverlayArray(cell) {\n                if (self.attributes.allowMovingSelection || self.mobile) {\n                    if (cell.selectionBorderTop && cell.selectionBorderRight && self.mobile) {\n                        selectionHandles.push([cell, 'tr']);\n                        cell.selectionHandle = 'tr';\n                    }\n                    if (cell.selectionBorderTop && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'tl']);\n                        cell.selectionHandle = 'tl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'bl']);\n                        cell.selectionHandle = 'bl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderRight\n                            && (self.attributes.selectionHandleBehavior !== 'none' || self.mobile)) {\n                        selectionHandles.push([cell, 'br']);\n                        cell.selectionHandle = 'br';\n                    }\n                }\n            }\n            function createBorderOverlayArray(cell, drawArray, propPrefix, offsetPoint) {\n                offsetPoint = offsetPoint || {x: 0, y: 0};\n                cell.selectionBorder = '';\n                if (!cell.isRowHeader\n                        && self.selections[cell.rowIndex + -offsetPoint.y]\n                        && self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) !== -1) {\n                    if ((!self.selections[cell.rowIndex - 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex - 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1\n                            || cell.rowIndex === 0)\n                            && !cell.isHeader) {\n                        drawArray.push([cell, 't']);\n                        cell[propPrefix + 'BorderTop'] = true;\n                        cell[propPrefix + 'Border'] += 't';\n                    }\n                    if (!self.selections[cell.rowIndex + 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex + 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'b']);\n                        cell[propPrefix + 'BorderBottom'] = true;\n                        cell[propPrefix + 'Border'] += 'b';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === 0\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex - 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'l']);\n                        cell[propPrefix + 'BorderLeft'] = true;\n                        cell[propPrefix + 'Border'] += 'l';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === s.length\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'r']);\n                        cell[propPrefix + 'BorderRight'] = true;\n                        cell[propPrefix + 'Border'] += 'r';\n                    }\n                }\n            }\n            function drawCell(d, rowOrderIndex, rowIndex) {\n                return function drawEach(header, headerIndex, columnOrderIndex) {\n                    if (header.hidden) { return 0; }\n                    var cellStyle = header.style || 'cell',\n                        cellGridAttributes,\n                        cell,\n                        isHeader = /HeaderCell/.test(cellStyle),\n                        isCorner = /cornerCell/.test(cellStyle),\n                        isRowHeader = 'rowHeaderCell' === cellStyle,\n                        isColumnHeader = 'columnHeaderCell' === cellStyle,\n                        selected = self.selections[rowOrderIndex] && self.selections[rowOrderIndex].indexOf(columnOrderIndex) !== -1,\n                        hovered = self.hovers.rowIndex === rowOrderIndex && self.hovers.columnIndex === columnOrderIndex,\n                        active = self.activeCell.rowIndex === rowOrderIndex && self.activeCell.columnIndex === columnOrderIndex,\n                        isColumnHeaderCellCap = cellStyle === 'columnHeaderCellCap',\n                        rawValue = d ? d[header.name] : undefined,\n                        isGrid = header.type === 'canvas-datagrid',\n                        activeHeader = (self.orders.rows[self.activeCell.rowIndex] === rowOrderIndex\n                                || self.orders.columns[self.activeCell.columnIndex] === headerIndex)\n                            && (columnOrderIndex === -1 || rowOrderIndex === -1)\n                            ? (isRowHeader ? 'activeRowHeaderCell' : 'activeColumnHeaderCell') : false,\n                        val,\n                        f = self.formatters[header.type || 'string'],\n                        orderByArrowSize = 0,\n                        treeArrowSize = 0,\n                        cellWidth = self.sizes.columns[headerIndex] || header.width,\n                        ev = {\n                            value: rawValue,\n                            row: d,\n                            header: header\n                        };\n                    if (isColumnHeaderCellCap) {\n                        cellWidth = w - x;\n                    }\n                    // if no data or schema are defined, a width is provided to the stub column\n                    if (cellWidth === undefined) {\n                        cellWidth = self.style.cellWidth;\n                    }\n                    cellWidth = cellWidth * self.scale;\n                    if (x + cellWidth + self.style.cellBorderWidth < 0) {\n                        x += cellWidth + self.style.cellBorderWidth;\n                    }\n                    if (active && cellStyle !== 'cornerCell') {\n                        cellStyle = 'activeCell';\n                    }\n                    if (self.visibleRows.indexOf(rowIndex) === -1 && !isHeader) {\n                        self.visibleRows.push(rowIndex);\n                    }\n                    val = self.dispatchEvent('formatcellvalue', ev);\n                    cx = x;\n                    cy = y;\n                    if (cellStyle === 'cornerCell') {\n                        cx = 0;\n                        cy = 0;\n                    } else if (isRowHeader) {\n                        cx = 0;\n                    } else if (isHeader) {\n                        cy = 0;\n                    }\n                    cell = {\n                        type: isGrid ? 'canvas-datagrid-cell' : header.type,\n                        style: cellStyle,\n                        nodeType: 'canvas-datagrid-cell',\n                        x: cx,\n                        y: cy,\n                        fontHeight: (self.style[cellStyle + 'FontHeight'] || 0) * self.scale,\n                        horizontalAlignment: self.style[cellStyle + 'HorizontalAlignment'],\n                        verticalAlignment: self.style[cellStyle + 'VerticalAlignment'],\n                        paddingLeft: (self.style[cellStyle + 'PaddingLeft'] || 0) * self.scale,\n                        paddingTop: (self.style[cellStyle + 'PaddingTop'] || 0) * self.scale,\n                        paddingRight: (self.style[cellStyle + 'PaddingRight'] || 0) * self.scale,\n                        paddingBottom: (self.style[cellStyle + 'PaddingBottom'] || 0) * self.scale,\n                        whiteSpace: self.style.cellWhiteSpace,\n                        lineHeight: self.style.cellLineHeight,\n                        lineSpacing: self.style.cellLineSpacing,\n                        offsetTop: self.canvasOffsetTop + cy,\n                        offsetLeft: self.canvasOffsetLeft + cx,\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        active: active || activeHeader,\n                        hovered: hovered,\n                        selected: selected,\n                        width: cellWidth,\n                        height: cellHeight,\n                        offsetWidth: cellWidth,\n                        offsetHeight: cellHeight,\n                        parentNode: self.intf.parentNode,\n                        offsetParent: self.intf.parentNode,\n                        data: d,\n                        isCorner: isCorner,\n                        isHeader: isHeader,\n                        isColumnHeader: isColumnHeader,\n                        isColumnHeaderCellCap: isColumnHeaderCellCap,\n                        isRowHeader: isRowHeader,\n                        rowOpen: rowOpen,\n                        header: header,\n                        columnIndex: columnOrderIndex,\n                        rowIndex: rowOrderIndex,\n                        sortColumnIndex: headerIndex,\n                        sortRowIndex: rowIndex,\n                        isGrid: isGrid,\n                        isNormal: !isGrid && !isCorner && !isHeader,\n                        gridId: (self.attributes.name || '') + rowIndex + ':' + headerIndex,\n                        parentGrid: self.intf,\n                        innerHTML: '',\n                        activeHeader: activeHeader,\n                        value: isHeader && !isRowHeader ? (header.title || header.name) : rawValue\n                    };\n                    cell.calculatedLineHeight = (cell.fontHeight * cell.lineHeight) + cell.lineSpacing;\n                    cell.paddedWidth = cell.width - cell.paddingRight - cell.paddingLeft;\n                    cell.paddedHeight = cell.height - cell.paddingTop - cell.paddingBottom;\n                    ev.cell = cell;\n                    cell.userHeight = cell.isHeader ? self.sizes.rows[-1] : rowHeight;\n                    cell.userWidth = cell.isHeader ? self.sizes.columns.cornerCell : self.sizes.columns[headerIndex];\n                    self.visibleCells.unshift(cell);\n                    if (self.dispatchEvent('beforerendercell', ev)) { return; }\n                    self.ctx.fillStyle = self.style[cellStyle + 'BackgroundColor'];\n                    self.ctx.strokeStyle = self.style[cellStyle + 'BorderColor'];\n                    self.ctx.lineWidth = self.style[cellStyle + 'BorderWidth'];\n                    if (hovered) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'HoverBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'HoverBorderColor'];\n                    }\n                    if (selected) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'SelectedBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'SelectedBorderColor'];\n                    }\n                    if (activeHeader) {\n                        self.ctx.fillStyle = self.style[activeHeader + 'BackgroundColor'];\n                    }\n                    self.dispatchEvent('rendercell', ev);\n                    if (cell.isGrid) {\n                        if (cell.height !== rowHeight) {\n                            cell.height = rowHeight || self.style.cellHeightWithChildGrid;\n                            checkScrollHeight = true;\n                        }\n                        cell.width = self.sizes.columns[headerIndex] || self.style.cellWidthWithChildGrid;\n                    }\n                    if (rowOpen && !cell.isRowHeader) {\n                        cell.height = self.sizes.rows[rowIndex] || self.style.cellHeight;\n                    }\n                    if (!cell.isGrid) {\n                        fillRect(cx, cy, cell.width, cell.height);\n                        strokeRect(cx, cy, cell.width, cell.height);\n                    }\n                    self.ctx.save();\n                    radiusRect(cell.x, cell.y, cell.width, cell.height, 0);\n                    self.ctx.clip();\n                    self.dispatchEvent('afterrendercell', ev);\n                    if (cell.height !== cellHeight && !(rowOpen && !cell.isRowHeader)) {\n                        self.sizes.rows[isHeader ? -1 : rowIndex] = cell.height;\n                        checkScrollHeight = true;\n                    }\n                    if (cell.width !== cellWidth) {\n                        self.sizes.columns[headerIndex] = cell.width;\n                        checkScrollHeight = true;\n                    }\n                    if (isRowHeader && self.attributes.tree) {\n                        if (!self.dispatchEvent('rendertreearrow', ev)) {\n                            treeArrowSize = drawTreeArrow(cell, self.style[cellStyle + 'PaddingLeft'], cy, 0);\n                        }\n                    }\n                    if ((self.attributes.showRowNumbers && isRowHeader)\n                            || !isRowHeader) {\n                        if (cell.isGrid && !self.dispatchEvent('beforerendercellgrid', ev)) {\n                            if (!self.childGrids[cell.gridId]) {\n                                // HACK: this only allows setting of the child grids styles if data is set _after_\n                                // this is less than desirable.  An interface needs to be made to effect the\n                                // style of all cell grids.  One for individual grids already exists.\n                                cellGridAttributes = self.cellGridAttributes;\n                                cellGridAttributes.name = self.attributes.saveAppearance ? cell.gridId : undefined;\n                                cellGridAttributes.component = false;\n                                cellGridAttributes.parentNode = cell;\n                                cellGridAttributes.data = rawValue;\n                                ev.cellGridAttributes = cellGridAttributes;\n                                if (self.dispatchEvent('beforecreatecellgrid', ev)) { return; }\n                                self.childGrids[cell.gridId] = self.createGrid(cellGridAttributes);\n                                self.sizes.rows[rowIndex]\n                                    = self.sizes.rows[rowIndex] || self.style.cellGridHeight;\n                                checkScrollHeight = true;\n                            }\n                            cell.grid = self.childGrids[cell.gridId];\n                            cell.grid.parentNode = cell;\n                            cell.grid.visible = true;\n                            cell.grid.draw();\n                            self.dispatchEvent('rendercellgrid', ev);\n                        } else if (!cell.isGrid) {\n                            if (self.childGrids[cell.gridId]) {\n                                self.childGrids[cell.gridId].parentNode.offsetHeight = 0;\n                            }\n                            if (isHeader && self.orderBy === header.name) {\n                                if (!self.dispatchEvent('renderorderbyarrow', ev)) {\n                                    orderByArrowSize = drawOrderByArrow(cx + self.style[cellStyle + 'PaddingLeft'], 0);\n                                }\n                            }\n                            self.ctx.fillStyle = self.style[cellStyle + 'Color'];\n                            if (hovered) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'HoverColor'];\n                            }\n                            if (selected) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'SelectedColor'];\n                            }\n                            if (activeHeader) {\n                                self.ctx.fillStyle = self.style[activeHeader + 'Color'];\n                            }\n                            cell.treeArrowWidth = treeArrowSize;\n                            cell.orderByArrowWidth = orderByArrowSize;\n                            // create text ref to see if height needs to expand\n                            val = val !== undefined ? val : f\n                                ? f(ev) : '';\n                            if (val === undefined && !f) {\n                                val = '';\n                                console.warn('canvas-datagrid: Unknown format '\n                                    + header.type + ' add a cellFormater');\n                            }\n                            cell.formattedValue = ((val !== undefined && val !== null) ? val : '').toString();\n                            if (self.columnFilters && self.columnFilters[val] !== undefined && isHeader) {\n                                cell.formattedValue = self.attributes.filterTextPrefix + val;\n                            }\n                            self.ctx.font = (self.style[cellStyle + 'FontHeight'] * self.scale) + 'px ' + self.style[cellStyle + 'FontName'];\n                            if (!self.dispatchEvent('formattext', ev)) {\n                                cell.text = wrapText(cell, ' ');\n                            }\n                            if (!self.dispatchEvent('rendertext', ev)) {\n                                if (cell.innerHTML || header.type === 'html') {\n                                    drawHtml(cell);\n                                } else {\n                                    drawText(cell);\n                                }\n                            }\n                        }\n                    }\n                    if (active) {\n                        aCell = cell;\n                    }\n                    createBorderOverlayArray(cell, selectionBorders, 'selection');\n                    // createBorderOverlayArray calculates data for createHandlesOverlayArray so it must go 2nd\n                    createHandlesOverlayArray(cell);\n                    if (self.movingSelection) {\n                        createBorderOverlayArray(cell, moveBorders, 'move', self.moveOffset);\n                    }\n                    self.ctx.restore();\n                    x += cell.width + (bc ? 0 : self.style.cellBorderWidth);\n                    return cell.width;\n                };\n            }\n            function drawRowHeader(rowData, index, rowOrderIndex) {\n                var a, i;\n                if (self.attributes.showRowHeaders) {\n                    x = 0;\n                    i = index + 1;\n                    rowHeaderCell = {'rowHeaderCell': i };\n                    a = {\n                        name: 'rowHeaderCell',\n                        width: self.sizes.columns[-1] || self.style.rowHeaderCellWidth,\n                        style: 'rowHeaderCell',\n                        type: 'string',\n                        data: i,\n                        index: -1\n                    };\n                    rowOpen = self.openChildren[index];\n                    drawCell(rowHeaderCell, index, rowOrderIndex)(a, -1, -1);\n                }\n            }\n            function drawHeaders() {\n                var d, g = s.length, i, o, columnHeaderCell, header, nonFrozenHeaderWidth;\n                function drawHeaderColumnRange(start, end) {\n                    end = Math.min(end, g);\n                    for (o = start; o < end; o += 1) {\n                        i = self.orders.columns[o];\n                        header = s[i];\n                        if (!header.hidden) {\n                            d = {\n                                title: header.title,\n                                name: header.name,\n                                width: header.width || self.style.cellWidth,\n                                style: 'columnHeaderCell',\n                                type: 'string',\n                                index: o,\n                                order: i\n                            };\n                            columnHeaderCell = {'columnHeaderCell': header.title || header.name};\n                            x += drawCell(columnHeaderCell, -1, -1)(d, i, o);\n                            if (x > self.width + self.scrollBox.scrollLeft) {\n                                break;\n                            }\n                        }\n                    }\n                }\n                rowHeaders.forEach(function (rArgs, rhIndex) {\n                    y = rArgs[3];\n                    cellHeight = rArgs[4];\n                    if (rhIndex === self.frozenRow) {\n                        self.ctx.save();\n                        radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                        self.ctx.clip();\n                    }\n                    drawRowHeader(rArgs[0], rArgs[1], rArgs[2]);\n                });\n                self.ctx.restore();\n                if (self.attributes.showColumnHeaders) {\n                    x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    y = 0;\n                    // cell height might have changed during drawing\n                    cellHeight = self.getColumnHeaderCellHeight();\n                    drawHeaderColumnRange(self.scrollIndexLeft, g);\n                    nonFrozenHeaderWidth = x;\n                    x = self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    drawHeaderColumnRange(0, self.frozenColumn);\n                    // fill in the space right of the headers\n                    x = nonFrozenHeaderWidth;\n                    if (x < w) {\n                        c = {\n                            name: '',\n                            width: self.style.scrollBarWidth,\n                            style: 'columnHeaderCellCap',\n                            isColumnHeaderCell: true,\n                            isColumnHeaderCellCap: true,\n                            type: 'string',\n                            index: s.length\n                        };\n                        drawCell({endCap: ''}, -1, -1)(c, -1, -1);\n                    }\n                    // fill in the space right of the headers\n                    if (self.attributes.showRowHeaders) {\n                        cornerCell = {'cornerCell': '' };\n                        x = 0;\n                        c = {\n                            name: 'cornerCell',\n                            width: self.style.rowHeaderCellWidth,\n                            style: 'cornerCell',\n                            type: 'string',\n                            index: -1\n                        };\n                        drawCell(cornerCell, -1, -1)(c, -1, -1);\n                    }\n                }\n            }\n            function drawRow(r, d) {\n                var i, treeHeight, rowSansTreeHeight, o, g = s.length;\n                if (y - (cellHeight * 2) > h) {\n                    return false;\n                }\n                rd = data[r];\n                rowOpen = self.openChildren[r];\n                rowSansTreeHeight = (self.sizes.rows[r] || self.style.cellHeight) * self.scale;\n                treeHeight = (rowOpen ? self.sizes.trees[r] : 0) * self.scale;\n                rowHeight = (rowSansTreeHeight + treeHeight);\n                if (y < -rowHeight) {\n                    return false;\n                }\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                cellHeight = rowHeight;\n                //draw normal columns\n                for (o = (self.scrollIndexLeft); o < g; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        self.scrollIndexRight = o;\n                        self.scrollPixelRight = x;\n                        break;\n                    }\n                }\n                //draw frozen columns\n                x = 0;\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                for (o = 0; o < self.frozenColumn; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        break;\n                    }\n                }\n                self.lastFrozenColumnPixel = x;\n                // cell height might have changed during drawing\n                cellHeight = rowHeight;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                // don't draw a tree for the new row\n                treeGrid = self.childGrids[r];\n                if (r !== data.length && rowOpen) {\n                    treeGrid.visible = true;\n                    treeGrid.parentNode = {\n                        offsetTop: y + rowSansTreeHeight + self.canvasOffsetTop,\n                        offsetLeft: rowHeaderCellWidth - 1 + self.canvasOffsetLeft,\n                        offsetHeight: treeHeight,\n                        offsetWidth: self.width - rowHeaderCellWidth - self.style.scrollBarWidth - 1,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: self.style,\n                        nodeType: 'canvas-datagrid-tree',\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        rowIndex: r\n                    };\n                    self.visibleCells.unshift({\n                        rowIndex: r,\n                        columnIndex: 0,\n                        y: treeGrid.parentNode.offsetTop,\n                        x: treeGrid.parentNode.offsetLeft,\n                        height: treeGrid.height,\n                        width: treeGrid.width,\n                        style: 'tree-grid',\n                        type: treeGrid.parentNode.nodeType\n                    });\n                    treeGrid.draw();\n                } else if (treeGrid) {\n                    treeGrid.parentNode.offsetHeight = 0;\n                    delete self.sizes.trees[r];\n                }\n                rowHeaders.push([rd, r, d, y, rowHeight]);\n                self.visibleRowHeights[r] = rowHeight;\n                y += cellHeight + (bc ? 0 : self.style.cellBorderWidth);\n                return true;\n            }\n            function initDraw() {\n                self.visibleRows = [];\n                s = self.getSchema();\n                self.visibleCells = [];\n                self.canvasOffsetTop = self.isChildGrid ? self.parentNode.offsetTop : 0;\n                self.canvasOffsetLeft = self.isChildGrid ? self.parentNode.offsetLeft : 0;\n                h = self.height;\n                w = self.width;\n            }\n            function drawBackground() {\n                radiusRect(0, 0, w, h, 0);\n                self.ctx.clip();\n                self.ctx.fillStyle = self.style.gridBackgroundColor;\n                fillRect(0, 0, w, h);\n            }\n            function drawFrozenRows() {\n                var n, ln = Math.min(data.length, self.frozenRow);\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                y = columnHeaderCellHeight;\n                for (r = 0; r < ln; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.allowFreezingRows) {\n                    // HACK great, another stupid magic number.\n                    // Background will appear as a 0.5px artifact behind the row freeze bar without this hack\n                    y += self.style.frozenMarkerBorderWidth + self.style.frozenMarkerWidth - 0.4999999999;\n                }\n                self.lastFrozenRowPixel = y;\n            }\n            function drawRows() {\n                self.ctx.save();\n                if (self.frozenRow > 0) {\n                    radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                    self.ctx.clip();\n                }\n                var o, n, i, g = s.length;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                if (!self.attributes.snapToRow) {\n                    y += -self.scrollBox.scrollTop + self.scrollPixelTop + self.style.cellBorderWidth;\n                }\n                for (r = self.frozenRow + self.scrollIndexTop; r < l; r += 1) {\n                    n = self.orders.rows[r];\n                    self.scrollIndexBottom = r;\n                    self.scrollPixelBottom = y;\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.showNewRow) {\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    rowHeight = cellHeight = self.style.cellHeight;\n                    rowOpen = false;\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        x += drawCell(self.newRow, data.length, data.length)(s[i], i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    rowHeaders.push([self.newRow, data.length, data.length, y, rowHeight]);\n                }\n                self.ctx.restore();\n            }\n            function drawMoveMarkers() {\n                if (!self.movingSelection) { return; }\n                self.ctx.lineWidth = self.style.moveOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.moveOverlayBorderColor;\n                self.ctx.setLineDash(self.style.moveOverlayBorderSegments);\n                moveBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n                self.ctx.setLineDash([]);\n            }\n            function drawReorderMarkers() {\n                if (!self.reorderObject) { return; }\n                var b = {\n                        height: self.reorderObject.height,\n                        width: self.reorderObject.width,\n                        x: self.reorderObject.x + self.reorderObject.dragOffset.x,\n                        y: self.reorderObject.y + self.reorderObject.dragOffset.y\n                    },\n                    m = {\n                        width: w,\n                        height: h,\n                        x: 0,\n                        y: 0\n                    };\n                self.ctx.fillStyle = self.style.reorderMarkerBackgroundColor;\n                self.ctx.lineWidth = self.style.reorderMarkerBorderWidth;\n                self.ctx.strokeStyle = self.style.reorderMarkerBorderColor;\n                if (self.dragMode === 'row-reorder') {\n                    b.width = w;\n                    b.x = 0;\n                    m.width = w;\n                    m.height = self.currentCell.height;\n                    m.y = self.currentCell.y;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.rowIndex !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex > -1\n                            && self.currentCell.rowIndex < l) {\n                        addBorderLine(m, self.reorderTarget.sortRowIndex > self.reorderObject.sortRowIndex ? 'b' : 't');\n                    }\n                } else if (self.dragMode === 'column-reorder' && self.reorderObject) {\n                    b.height = h;\n                    b.y = 0;\n                    m.height = h;\n                    m.width = self.currentCell.width;\n                    m.y = 0;\n                    m.x = self.currentCell.x;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.sortColumnIndex !== self.reorderObject.sortColumnIndex\n                            && self.currentCell.sortColumnIndex > -1\n                            && self.currentCell.sortColumnIndex < s.length) {\n                        addBorderLine(m, self.reorderTarget.columnIndex > self.reorderObject.columnIndex ? 'r' : 'l');\n                    }\n                }\n            }\n            function drawBorder() {\n                self.ctx.lineWidth = self.style.gridBorderWidth;\n                self.ctx.strokeStyle = self.style.gridBorderColor;\n                strokeRect(0, 0, self.width, self.height);\n            }\n            function drawSelectionBorders() {\n                self.ctx.lineWidth = self.style.selectionOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.selectionOverlayBorderColor;\n                function dsb(c) {\n                    addBorderLine(c[0], c[1]);\n                }\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.save();\n                clipFrozenArea(0);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(1);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(2);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n            }\n            function drawSelectionHandles() {\n                if (self.mobile || self.attributes.allowMovingSelection) {\n                    self.ctx.lineWidth = self.style.selectionHandleBorderWidth;\n                    self.ctx.strokeStyle = self.style.selectionHandleBorderColor;\n                    self.ctx.fillStyle = self.style.selectionHandleColor;\n                    selectionHandles.forEach(function (c) {\n                        addselectionHandle(c[0], c[1]);\n                        var az = self.attributes.touchSelectHandleZone / 2,\n                            ax = c[0].x + (c[1] === 'tl' || c[1] === 'bl' ? 0 : c[0].width) - az,\n                            ay = c[0].y + (c[1] === 'bl' || c[1] === 'br' ? c[0].height : 0) - az;\n                        self.visibleCells.unshift({\n                            x: ax,\n                            y: ay,\n                            height: self.style.selectionHandleSize + az,\n                            width: self.style.selectionHandleSize + az,\n                            style: 'selection-handle-' + c[1]\n                        });\n                    });\n                }\n            }\n            function drawActiveCell() {\n                if (!aCell) { return; }\n                self.ctx.save();\n                var cl = self.activeCell.columnIndex + 1 > self.frozenColumn || self.activeCell.rowIndex + 1 > self.frozenRow,\n                    acx = cl ? self.lastFrozenColumnPixel : 0,\n                    acy = cl ? self.lastFrozenRowPixel : 0,\n                    acw = cl ? self.width - self.lastFrozenColumnPixel : self.width,\n                    ach = cl ? self.height - self.lastFrozenRowPixel : self.height;\n                radiusRect(acx, acy, acw, ach, 0);\n                self.ctx.clip();\n                if (self.attributes.selectionMode === 'row') {\n                    if (self.activeCell && self.activeCell.rowIndex === aCell.rowIndex) {\n                        self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                        self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                        strokeRect(0, aCell.y, self.getHeaderWidth() + rowHeaderCellWidth, self.visibleRowHeights[aCell.rowIndex]);\n                    }\n                } else {\n                    self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                    self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                    strokeRect(aCell.x, aCell.y, aCell.width, aCell.height);\n                }\n                self.ctx.restore();\n            }\n            function drawFrozenMarkers() {\n                var my = self.lastFrozenRowPixel - self.style.frozenMarkerWidth,\n                    mx = self.lastFrozenColumnPixel - self.style.frozenMarkerBorderWidth,\n                    xHover = self.currentCell && self.currentCell.style === 'frozen-row-marker',\n                    yHover = self.currentCell && self.currentCell.style === 'frozen-column-marker';\n                self.ctx.lineWidth = self.style.frozenMarkerBorderWidth;\n                if (self.attributes.allowFreezingColumns) {\n                    self.ctx.fillStyle = yHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = yHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    strokeRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    self.visibleCells.unshift({\n                        x: mx,\n                        y: 0,\n                        height: self.height,\n                        width: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        style: 'frozen-column-marker'\n                    });\n                }\n                if (self.attributes.allowFreezingRows) {\n                    self.ctx.fillStyle = xHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = xHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    strokeRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    self.visibleCells.unshift({\n                        x: 0,\n                        y: my,\n                        height: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        width: self.width,\n                        style: 'frozen-row-marker'\n                    });\n                }\n                if (self.freezeMarkerPosition) {\n                    self.ctx.fillStyle = self.style.frozenMarkerActiveColor;\n                    self.ctx.strokeStyle = self.style.frozenMarkerActiveBorderColor;\n                    if (self.dragMode === 'frozen-column-marker') {\n                        fillRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                        strokeRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                    } else {\n                        fillRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                        strokeRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                    }\n                }\n            }\n            function drawPerfLines() {\n                if (!self.attributes.showPerformance) { return; }\n                var pw = 250,\n                    px = self.width - pw - self.style.scrollBarWidth - (self.style.scrollBarBorderWidth * 2),\n                    py = columnHeaderCellHeight,\n                    ph = 100;\n                if (scrollDebugCounters.length === 0) { scrollDebugCounters = fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (touchPPSCounters.length === 0) { touchPPSCounters = fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (entityCount.length === 0) { entityCount = fillArray(0, perfWindowSize, 1, 0); }\n                self.ctx.lineWidth = 0.5;\n                function dpl(name, perfArr, arrIndex, max, color, useAbs, rowIndex) {\n                    var v;\n                    drawPerfLine(pw, ph, px, py, perfArr, arrIndex, max, color, useAbs);\n                    self.ctx.fillStyle = color;\n                    fillRect(3 + px, py + 9 + (rowIndex * 11), 8, 8);\n                    self.ctx.fillStyle = self.style.debugPerfChartTextColor;\n                    v = arrIndex !== undefined ? perfArr[0][arrIndex] : perfArr[0];\n                    fillText(name + ' ' + (isNaN(v) ? 0 : v).toFixed(3), 14 + px, py + 16 + (rowIndex * 11));\n                }\n                self.ctx.textAlign = 'left';\n                self.ctx.font = self.style.debugFont;\n                self.ctx.fillStyle = self.style.debugPerfChartBackground;\n                fillRect(px, py, pw, ph);\n                [['Scroll Height', scrollDebugCounters, 0, self.scrollBox.scrollHeight, self.style.debugScrollHeightColor, false],\n                    ['Scroll Width', scrollDebugCounters, 1, self.scrollBox.scrollWidth, self.style.debugScrollWidthColor, false],\n                    ['Performance', perfCounters, undefined, 200, self.style.debugPerformanceColor, false],\n                    ['Entities', entityCount, undefined, 1500, self.style.debugEntitiesColor, false],\n                    ['TouchPPSX', touchPPSCounters, 0, 1000, self.style.debugTouchPPSXColor, true],\n                    ['TouchPPSY', touchPPSCounters, 1, 1000, self.style.debugTouchPPSYColor, true]\n                    ].forEach(function (i, index) {\n                    i.push(index);\n                    dpl.apply(null, i);\n                });\n                self.ctx.fillStyle = self.style.debugPerfChartBackground;\n                entityCount.pop();\n                entityCount.unshift(self.visibleCells.length);\n                scrollDebugCounters.pop();\n                scrollDebugCounters.unshift([self.scrollBox.scrollTop, self.scrollBox.scrollLeft]);\n                touchPPSCounters.pop();\n                touchPPSCounters.unshift([self.yPPS, self.xPPS]);\n            }\n            function drawDebug() {\n                self.ctx.save();\n                var d;\n                if (self.attributes.showPerformance || self.attributes.debug) {\n                    if (perfCounters.length === 0) { perfCounters = fillArray(0, perfWindowSize, 1, 0); }\n                    perfCounters.pop();\n                    perfCounters.unshift(performance.now() - p);\n                }\n                if (!self.attributes.debug) {\n                    self.ctx.restore();\n                    return;\n                }\n                self.ctx.font = self.style.debugFont;\n                d = {};\n                d.perf = (perfCounters.reduce(function (a, b) {\n                    return a + b;\n                }, 0) / Math.min(drawCount, perfCounters.length)).toFixed(1);\n                d.perfDelta = perfCounters[0].toFixed(1);\n                d.frozenColumnsWidth = getFrozenColumnsWidth();\n                d.htmlImages = Object.keys(self.htmlImageCache).length;\n                d.reorderObject = 'x: ' + (self.reorderObject || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderObject || {rowIndex: 0}).rowIndex;\n                d.reorderTarget = 'x: ' + (self.reorderTarget || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderTarget || {rowIndex: 0}).rowIndex;\n                d.scale = self.scale;\n                d.startScale = self.startScale;\n                d.scaleDelta = self.scaleDelta;\n                d.zoomDeltaStart = self.zoomDeltaStart;\n                d.touchLength = self.touchLength;\n                d.touches = 'y0: ' + (self.touchPosition || {y: 0}).y + ' y1: ' + (self.touchPosition1 || {y: 0}).y;\n                d.scrollBox = self.scrollBox.toString();\n                d.scrollIndex = 'x: ' + self.scrollIndexLeft + ', y: ' + self.scrollIndexTop;\n                d.scrollPixel = 'x: ' + self.scrollPixelLeft + ', y: ' + self.scrollPixelTop;\n                d.canvasOffset = 'x: ' + self.canvasOffsetLeft + ', y: ' + self.canvasOffsetTop;\n                d.touchDelta = 'x: ' + self.touchDelta.x + ', y: ' + self.touchDelta.y;\n                d.touchAnimateTo = 'x: ' + self.touchAnimateTo.x + ', y: ' + self.touchAnimateTo.y;\n                d.scrollAnimation = 'x: ' + self.scrollAnimation.x + ', y: ' + self.scrollAnimation.y;\n                d.touchPPS = 'x: ' + self.xPPS + ', y: ' + self.yPPS;\n                d.touchPPST = 'x: ' + self.xPPST + ', y: ' + self.yPPST;\n                d.touchDuration = self.touchDuration;\n                d.pointerLockPosition =  self.pointerLockPosition ?\n                        self.pointerLockPosition.x + ', ' + self.pointerLockPosition.y : '';\n                d.size = 'w: ' + self.width + ', h: ' + self.height;\n                d.mouse = 'x: ' + self.mouse.x + ', y: ' + self.mouse.y;\n                d.touch = !self.touchStart\n                    ? '' : 'x: ' + self.touchStart.x + ', y: ' + self.touchStart.y;\n                d.entities = self.visibleCells.length;\n                d.hasFocus = self.hasFocus;\n                d.dragMode = self.dragMode;\n                if (self.currentCell) {\n                    d.columnIndex = self.currentCell.columnIndex;\n                    d.rowIndex = self.currentCell.rowIndex;\n                    d.sortColumnIndex = self.currentCell.sortColumnIndex;\n                    d.sortRowIndex = self.currentCell.sortRowIndex;\n                    d.context = self.currentCell.context;\n                    d.dragContext = self.currentCell.dragContext;\n                    d.style = self.currentCell.style;\n                    d.type = self.currentCell.type;\n                }\n                self.ctx.textAlign = 'right';\n                self.ctx.fillStyle = self.style.debugBackgroundColor;\n                fillRect(0, 0, self.width, self.height);\n                Object.keys(d).forEach(function (key, index) {\n                    var m = key + ': ' + d[key],\n                        lh = 14;\n                    self.ctx.fillStyle = self.style.debugColor;\n                    fillText(m, w - 20, (self.attributes.showPerformance ? 140 : 24) + (index * lh));\n                });\n                self.ctx.restore();\n            }\n            self.ctx.save();\n            initDraw();\n            drawBackground();\n            drawFrozenRows();\n            drawRows();\n            drawActiveCell();\n            drawHeaders();\n            drawFrozenMarkers();\n            drawSelectionBorders();\n            drawSelectionHandles();\n            drawReorderMarkers();\n            drawMoveMarkers();\n            drawScrollBars();\n            if (checkScrollHeight) {\n                self.resize(true);\n            }\n            drawBorder();\n            drawDebug();\n            drawPerfLines();\n            if (self.dispatchEvent('afterdraw', {})) { return; }\n            self.ctx.restore();\n        };\n    };\n});\n","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine(['./defaults'], function (defaults) {\n    'use strict';\n    return function () {\n        var typeMap, component = {};\n        component.dehyphenateProperty = function hyphenateProperty(prop) {\n            prop = prop.replace('--cdg-', '');\n            var p = '', nextLetterCap;\n            Array.prototype.forEach.call(prop, function (char) {\n                if (nextLetterCap) {\n                    nextLetterCap = false;\n                    p += char.toUpperCase();\n                    return;\n                }\n                if (char === '-') {\n                    nextLetterCap = true;\n                    return;\n                }\n                p += char;\n            });\n            return p;\n        };\n        component.hyphenateProperty = function hyphenateProperty(prop, cust) {\n            var p = '';\n            Array.prototype.forEach.call(prop, function (char) {\n                if (char === char.toUpperCase()) {\n                    p += '-' + char.toLowerCase();\n                    return;\n                }\n                p += char;\n            });\n            return (cust ? '--cdg-' : '') + p;\n        };\n        function getDefaultItem(base, item) {\n            var i = {},\n                r;\n            defaults(i);\n            r = i.defaults[base].filter(function (i) {\n                return i[0].toLowerCase() === item.toLowerCase()\n                    || component.hyphenateProperty(i[0]) === item.toLowerCase()\n                    || component.hyphenateProperty(i[0], true) === item.toLowerCase();\n            })[0];\n            return r;\n        }\n        component.applyComponentStyle = function (supressChangeAndDrawEvents, intf) {\n            if (!intf.isComponent) { return; }\n            var cStyle = window.getComputedStyle(intf.tagName === 'CANVAS-DATAGRID' ? intf : intf.canvas, null),\n                defs = {};\n            intf.computedStyle = cStyle;\n            defaults(defs);\n            defs = defs.defaults.styles;\n            defs.forEach(function (def) {\n                var val;\n                val = cStyle.getPropertyValue(component.hyphenateProperty(def[0], true));\n                if (val === \"\") {\n                    val = cStyle.getPropertyValue(component.hyphenateProperty(def[0], false));\n                }\n                if (val !== \"\" && typeof val === 'string') {\n                    intf.setStyleProperty(def[0], typeMap[typeof def[1]](val\n                        .replace(/^\\s+/, '').replace(/\\s+$/, ''), def[1]), true);\n                }\n            });\n            if (!supressChangeAndDrawEvents && intf.dispatchEvent) {\n                requestAnimationFrame(function () { intf.resize(true); });\n                intf.dispatchEvent('stylechanged', intf.style);\n            }\n        };\n        typeMap = {\n            data: function (strData) {\n                try {\n                    return JSON.parse(strData);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid data.');\n                }\n            },\n            schema: function (strSchema) {\n                try {\n                    return JSON.parse(strSchema);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid schema attribute.');\n                }\n            },\n            number: function (strNum, def) {\n                var n = parseInt(strNum, 10);\n                return isNaN(n) ? def : n;\n            },\n            boolean: function (strBool) {\n                return (/true/i).test(strBool);\n            },\n            string: function (str) {\n                return str;\n            }\n        };\n        component.getObservableAttributes = function () {\n            var i = {}, attrs = ['data', 'schema', 'style', 'className', 'name'];\n            defaults(i);\n            i.defaults.attributes.forEach(function (attr) {\n                attrs.push(attr[0].toLowerCase());\n            });\n            return attrs;\n        };\n        component.disconnectedCallback = function () {\n            this.connected = false;\n        };\n        component.connectedCallback = function () {\n            var intf = this;\n            intf.connected = true;\n            component.observe(intf);\n            component.applyComponentStyle(true, intf);\n            intf.resize(true);\n        };\n        component.adoptedCallback = function () {\n            this.resize();\n        };\n        component.attributeChangedCallback = function (attrName, oldVal, newVal) {\n            var tfn, intf = this, def;\n            if (attrName === 'style') {\n                component.applyComponentStyle(false, intf);\n                return;\n            }\n            if (attrName === 'data') {\n                if (intf.dataType === 'application/x-canvas-datagrid') {\n                    intf.dataType = 'application/json+x-canvas-datagrid';\n                }\n                intf.args.data = newVal;\n                return;\n            }\n            if (attrName === 'schema') {\n                intf.args.schema = typeMap.schema(newVal);\n                return;\n            }\n            if (attrName === 'name') {\n                intf.name = newVal;\n                return;\n            }\n            if (attrName === 'class' || attrName === 'className') {\n                return;\n            }\n            def = getDefaultItem('attributes', attrName);\n            if (def) {\n                tfn = typeMap[typeof def[1]];\n                intf.attributes[def[0]] = tfn(newVal);\n                return;\n            }\n            if (/^on/.test(attrName)) {\n                intf.addEventListener('on' + attrName, function (e) {\n                    eval(newVal);\n                });\n            }\n            return;\n        };\n        component.observe = function (intf) {\n            var observer;\n            if (!window.MutationObserver) { return; }\n            intf.applyComponentStyle = function () { component.applyComponentStyle(false, intf); intf.resize(); };\n            /**\n             * Applies the computed css styles to the grid.  In some browsers, changing directives in attached style sheets does not automatically update the styles in this component.  It is necessary to call this method to update in these cases.\n             * @memberof canvasDatagrid\n             * @name applyComponentStyle\n             * @method\n             */\n            observer = new window.MutationObserver(function (mutations) {\n                var checkInnerHTML, checkStyle;\n                Array.prototype.forEach.call(mutations, function (mutation) {\n                    if (mutation.attributeName === 'class'\n                            || mutation.attributeName === 'style') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.target.parentNode\n                            && mutation.target.parentNode.nodeName === 'STYLE') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.addedNodes.length > 0 || mutation.type === 'characterData') {\n                        checkInnerHTML = true;\n                    }\n                });\n                if (checkStyle) {\n                    intf.applyComponentStyle(false, intf);\n                }\n                if (checkInnerHTML) {\n                    if (intf.dataType === 'application/x-canvas-datagrid') {\n                        intf.dataType = 'application/json+x-canvas-datagrid';\n                    }\n                    intf.data = intf.innerHTML;\n                }\n            });\n            observer.observe(intf, { characterData: true, childList: true, attributes: true, subtree: true });\n            Array.prototype.forEach.call(document.querySelectorAll('style'), function (el) {\n                observer.observe(el, { characterData: true, childList: true, attributes: true, subtree: true });\n            });\n        };\n        return component;\n    };\n});","/*jslint browser: true, unparam: true, todo: true, evil: true*/\n/*globals Reflect: false, HTMLElement: true, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([\n    './component',\n    './defaults',\n    './draw',\n    './events',\n    './touch',\n    './intf',\n    './contextMenu',\n    './dom',\n    './publicMethods'\n], function context(component) {\n    'use strict';\n    component = component();\n    var modules = Array.prototype.slice.call(arguments);\n    function Grid(args) {\n        args = args || {};\n        var self = {};\n        self.isComponent = args.component === undefined;\n        self.isChildGrid = args.parentNode && /canvas-datagrid-(cell|tree)/.test(args.parentNode.nodeType);\n        if (self.isChildGrid) {\n            self.intf = {};\n        } else {\n            self.intf = self.isComponent ? eval('Reflect.construct(HTMLElement, [], new.target)')\n                : document.createElement('canvas');\n        }\n        self.args = args;\n        self.intf.args = args;\n        self.applyComponentStyle = component.applyComponentStyle;\n        self.hyphenateProperty = component.hyphenateProperty;\n        self.dehyphenateProperty = component.dehyphenateProperty;\n        self.createGrid = function grid(args) {\n            args.component = false;\n            return new Grid(args);\n        };\n        modules.forEach(function (module) {\n            module(self);\n        });\n        if (self.isChildGrid) {\n            self.shadowRoot = args.parentNode.shadowRoot;\n            self.parentNode = args.parentNode;\n        } else if (self.intf.createShadowRoot) {\n            self.shadowRoot = self.intf.attachShadow({mode: 'open'});\n            self.parentNode = self.shadowRoot;\n        } else {\n            self.parentNode = self.intf;\n        }\n        self.init();\n        return self.intf;\n    }\n    if (window.HTMLElement) {\n        Grid.prototype = Object.create(window.HTMLElement.prototype);\n    }\n    // export web component\n    if (window.customElements) {\n        Grid.observedAttributes = component.getObservableAttributes();\n        Grid.prototype.disconnectedCallback = component.disconnectedCallback;\n        Grid.prototype.attributeChangedCallback = component.attributeChangedCallback;\n        Grid.prototype.connectedCallback = component.connectedCallback;\n        Grid.prototype.adoptedCallback = component.adoptedCallback;\n        window.customElements.define('canvas-datagrid', Grid);\n    }\n    // export global\n    if (window && !window.canvasDatagrid && !window.require) {\n        window.canvasDatagrid = function (args) { return new Grid(args); };\n    }\n    // export amd loader\n    module.exports = function grid(args) {\n        args = args || {};\n        var i, tKeys = ['style', 'formatters', 'sorters', 'filters',\n                    'treeGridAttributes', 'cellGridAttributes', 'data', 'schema'];\n        if (window.customElements && document.body.createShadowRoot) {\n            i = document.createElement('canvas-datagrid');\n            Object.keys(args).forEach(function (argKey) {\n                // set data and parentNode after everything else\n                if (argKey === 'data') { return; }\n                if (argKey === 'parentNode') { return; }\n                // top level keys in args\n                if (tKeys.indexOf(argKey) !== -1) {\n                    tKeys.forEach(function (tKey) {\n                        if (args[tKey] === undefined || tKey !== argKey) { return; }\n                        if (['formatters', 'sorters', 'filters'].indexOf(argKey) !== -1) {\n                            if (typeof args[tKey] === 'object' && args[tKey] !== null) {\n                                Object.keys(args[tKey]).forEach(function (sKey) {\n                                    i[tKey][sKey] = args[tKey][sKey];\n                                });\n                            }\n                        } else {\n                            i[tKey] = args[tKey];\n                        }\n                    });\n                    return;\n                }\n                // all others are attribute level keys\n                i.attributes[argKey] = args[argKey];\n            });\n            if (args.data) {\n                i.data = args.data;\n            }\n            // add to the dom very last to avoid redraws\n            if (args.parentNode) {\n                args.parentNode.appendChild(i);\n            }\n            return i;\n        }\n        args.component = false;\n        i = new Grid(args);\n        if (args.parentNode && args.parentNode.appendChild) {\n            args.parentNode.appendChild(i);\n        }\n        return i;\n    };\n    return module.exports;\n});\n"],"sourceRoot":""}