{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///canvas-datagrid.js","webpack:///webpack/bootstrap e23045ed9de5bf1daab2","webpack:///./lib/defaults.js","webpack:///./lib/main.js","webpack:///./lib/component.js","webpack:///./lib/draw.js","webpack:///./lib/events.js","webpack:///./lib/touch.js","webpack:///./lib/intf.js","webpack:///./lib/contextMenu.js","webpack:///./lib/dom.js","webpack:///./lib/publicMethods.js"],"names":["root","factory","exports","module","define","amd","self","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","undefined","defaults","attributes","styles","apply","context","component","Grid","args","isComponent","isChildGrid","parentNode","test","nodeType","intf","eval","document","createElement","applyComponentStyle","hyphenateProperty","dehyphenateProperty","createGrid","forEach","shadowRoot","createShadowRoot","attachShadow","mode","init","Array","slice","arguments","window","HTMLElement","create","customElements","observedAttributes","getObservableAttributes","disconnectedCallback","attributeChangedCallback","connectedCallback","adoptedCallback","canvasDatagrid","require","tKeys","body","keys","argKey","indexOf","tKey","sKey","data","appendChild","getDefaultItem","base","item","filter","toLowerCase","typeMap","prop","replace","nextLetterCap","char","toUpperCase","cust","supressChangeAndDrawEvents","cStyle","getComputedStyle","tagName","canvas","defs","computedStyle","def","val","getPropertyValue","setStyleProperty","dispatchEvent","requestAnimationFrame","resize","style","strData","JSON","parse","e","Error","schema","strSchema","number","strNum","parseInt","isNaN","boolean","strBool","string","str","attrs","attr","push","connected","observe","attrName","oldVal","newVal","tfn","type","addEventListener","observer","MutationObserver","mutations","checkInnerHTML","checkStyle","mutation","attributeName","target","nodeName","addedNodes","length","innerHTML","characterData","childList","subtree","querySelectorAll","el","fillArray","low","high","step","x","drawPerfLine","w","h","y","perfArr","arrIndex","max","color","useAbs","r","canvasOffsetLeft","canvasOffsetTop","ctx","beginPath","moveTo","cx","cy","Math","abs","lineTo","strokeStyle","stroke","drawOnAllImagesLoaded","loaded","htmlImageCache","html","complete","draw","drawHtml","cell","img","v","formattedValue","height","width","drawImage","Image","onload","src","btoa","drawOrderByArrow","mt","columnHeaderOrderByArrowMarginTop","scale","ml","columnHeaderOrderByArrowMarginLeft","mr","columnHeaderOrderByArrowMarginRight","aw","columnHeaderOrderByArrowWidth","ah","columnHeaderOrderByArrowHeight","fillStyle","columnHeaderOrderByArrowColor","columnHeaderOrderByArrowBorderColor","orderDirection","fill","drawTreeArrow","treeArrowMarginTop","treeArrowMarginRight","treeArrowMarginLeft","treeArrowWidth","treeArrowHeight","treeArrowColor","treeArrowBorderColor","openChildren","rowIndex","radiusRect","radius","b","quadraticCurveTo","fillRect","strokeRect","fillText","text","fillCircle","arc","PI","strokeCircle","clipFrozenArea","lastFrozenColumnPixel","lastFrozenRowPixel","clip","fillHandle","selectionHandleType","strokeHandle","addselectionHandle","pos","hw","selectionHandleSize","tr","br","tl","bl","addBorderLine","t","addEllipsis","ellipsisCache","measureText","value","drawText","paddingLeft","paddingTop","paddingRight","paddingBottom","vPos","hPos","orderByArrowWidth","fontHeight","horizontalAlignment","verticalAlignment","getFrozenColumnsWidth","column","getVisibleSchema","min","frozenColumn","orders","columns","sizes","cellWidth","perfCounters","drawCount","perfWindowSize","entityCount","scrollDebugCounters","touchPPSCounters","internal","createHandlesOverlayArray","allowMovingSelection","mobile","selectionBorderTop","selectionBorderRight","selectionHandles","selectionHandle","selectionBorderLeft","selectionBorderBottom","selectionHandleBehavior","createBorderOverlayArray","drawArray","propPrefix","offsetPoint","selectionBorder","isRowHeader","selections","columnIndex","isHeader","drawCell","rowOrderIndex","header","headerIndex","columnOrderIndex","hidden","cellGridAttributes","cellStyle","isCorner","isColumnHeader","selected","hovered","hovers","active","activeCell","isColumnHeaderCellCap","rawValue","isGrid","activeHeader","rows","f","formatters","orderByArrowSize","treeArrowSize","ev","row","cellBorderWidth","visibleRows","offsetTop","offsetLeft","scrollTop","scrollBox","scrollLeft","cellHeight","offsetWidth","offsetHeight","offsetParent","rowOpen","sortColumnIndex","sortRowIndex","isNormal","gridId","parentGrid","title","userHeight","rowHeight","userWidth","cornerCell","visibleCells","unshift","lineWidth","cellHeightWithChildGrid","checkScrollHeight","cellWidthWithChildGrid","save","tree","showRowNumbers","childGrids","saveAppearance","cellGridHeight","grid","visible","orderBy","font","console","warn","toString","columnFilters","filterTextPrefix","aCell","selectionBorders","movingSelection","moveBorders","moveOffset","restore","bc","drawRowHeader","rowData","index","a","showRowHeaders","rowHeaderCell","rowHeaderCellWidth","drawRow","treeHeight","rowSansTreeHeight","g","rd","trees","allowFreezingColumns","frozenColumnWidths","scrollIndexLeft","scrollIndexRight","scrollPixelRight","scrollPixelLeft","treeGrid","scrollBarWidth","rowHeaders","visibleRowHeights","gridBorderCollapse","u","currentCell","columnHeaderCellHeight","getColumnHeaderCellHeight","getRowHeaderCellWidth","performance","now","createRowOrders","getSchema","gridBackgroundColor","ln","frozenRow","allowFreezingRows","frozenMarkerBorderWidth","frozenMarkerWidth","snapToRow","scrollPixelTop","scrollIndexTop","scrollIndexBottom","scrollPixelBottom","showNewRow","newRow","cl","selectionMode","activeCellOverlayBorderWidth","activeCellOverlayBorderColor","getHeaderWidth","drawHeaderColumnRange","start","end","order","columnHeaderCell","debug","nonFrozenHeaderWidth","rArgs","rhIndex","showColumnHeaders","columnHeaderCellBorderWidth","isColumnHeaderCell","endCap","my","mx","xHover","yHover","frozenMarkerHoverColor","frozenMarkerColor","frozenMarkerHoverBorderColor","frozenMarkerBorderColor","freezeMarkerPosition","frozenMarkerActiveColor","frozenMarkerActiveBorderColor","dragMode","dsb","selectionOverlayBorderWidth","selectionOverlayBorderColor","selectionHandleBorderWidth","selectionHandleBorderColor","selectionHandleColor","az","touchSelectHandleZone","ax","ay","reorderObject","dragOffset","reorderMarkerBackgroundColor","reorderMarkerBorderWidth","reorderMarkerBorderColor","reorderMarkerIndexBorderWidth","reorderMarkerIndexBorderColor","reorderTarget","moveOverlayBorderWidth","moveOverlayBorderColor","setLineDash","moveOverlayBorderSegments","drawCorner","en","entities","scrollBarBoxMargin","scrollBarBorderColor","scrollBarBorderWidth","horizontalBox","horizontalBar","scrollBoxWidth","scrollWidth","verticalBox","verticalBar","scrollBoxHeight","scrollHeight","horizontalBarVisible","scrollBarBackgroundColor","scrollBarBoxColor","scrollBarActiveColor","scrollBarBoxBorderRadius","verticalBarVisible","scrollBarCornerBorderColor","scrollBarCornerBackgroundColor","corner","gridBorderWidth","gridBorderColor","showPerformance","pop","perf","reduce","toFixed","perfDelta","htmlImages","startScale","scaleDelta","zoomDeltaStart","touchLength","touches","touchPosition","touchPosition1","scrollIndex","scrollPixel","canvasOffset","touchDelta","touchAnimateTo","scrollAnimation","touchPPS","xPPS","yPPS","touchPPST","xPPST","yPPST","touchDuration","pointerLockPosition","size","mouse","touch","touchStart","hasFocus","dragContext","textAlign","key","dpl","pw","ph","px","py","wheeling","stopPropagation","fn","events","removeEventListener","sfn","idx","splice","preventDefault","defaultPrevented","getRatio","maxPixelRatio","devicePixelRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","backingStorePixelRatio","drawAfterResize","onlyResizeX","setCanvasSize","dims","dataHeight","cellBorder","dataWidth","dim","parentNodeStyle","vb","nb","co","isScrollBoxCorner","sbw","ratio","bm","columnHeaderCellBorder","ch","scrollCache","accumulator","va","top","left","widthBoxRatio","heightBoxRatio","scrollBarBoxMinSize","scrollBarBoxWidth","bar","box","page","pageUpDownOverlap","resizeEditInput","scroll","dontDraw","floor","mousemove","overridePos","contextMenu","input","getLayerPos","dragBounds","sBounds","delta","ctrl","ctrlKey","metaKey","persistantSelectionMode","vs","getCellAt","NativeEvent","previousCell","clearTimeout","scrollTimer","isInGrid","rowBoundaryCrossed","columnBoundaryCrossed","cellBoundaryCrossed","prefix","draggingItem","scrollModes","dragItem","cursor","selecting","dragStart","dragStartObject","shiftKey","bottom","right","getSelectionBounds","ignoreNextClick","dragAddToSelection","selectRow","selectionBounds","selectArea","autoScrollZone","click","checkSelectionChange","getSelectedData","endEdit","setActiveCell","selectAll","columnHeaderClickBehavior","selectColumn","treeArrowClickRadius","toggleTree","dragResizeColumn","resizingStartingWidth","resizingStartingHeight","minColumnWidth","minRowHeight","resizeScrollZone","resizeChildGrids","globalRowResize","stopDragResize","setStorageData","scrollGrid","scrollPointerLock","scrollStartMode","movementX","movementY","scrollMode","scrollStart","setTimeout","scrollRepeatRate","selectionScrollIncrement","stopScrollGrid","exitPointerLock","dragReorder","allowColumnReordering","allowRowReordering","source","reorderDeadZone","stopDragReorder","oIndex","tIndex","cr","row-reorder","column-reorder","dragMove","stopDragMove","moveSelection","freezeMove","stopFreezeMove","startFreezeMove","mousedown","lastMouseDownTarget","button","move","freeze","requestPointerLock","concat","dragging","mouseup","controlInput","focus","getAdjacentCells","first","last","keydown","adjacentCells","cols","keyCode","beginEditAt","scrollIntoView","selectionFollowsActiveCell","selectedData","keyup","keypress","dblclick","fitColumnToValues","autosize","scrollWheel","deltaX","deltaY","deltaMode","touchHaltAnimation","scrollTo","pasteItem","clipData","mimeType","normalizeRowData","importingRow","existingRow","offsetX","isArray","map","colKey","substring","split","sel","cellData","colIndex","cName","yi","paste","clipboardData","items","dti","getAsString","cut","copy","forEachSelectedCell","colName","htmlSafe","fCopyCell","addHeaders","useHtml","hVal","join","addCellValue","trRow","textRow","tableRows","textRows","headers","sData","setData","stringify","touchScrollTimeout","animationFrames","getTouchPos","touchIndex","rect","getBoundingClientRect","clientX","clientY","easingFunctions","linear","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easing","touchEasingMethod","calculatePPSTimed","touchSigmaTimed","calculatePPS","touchSigma","touchEndAnimation","touchReleaseAnimationDurationMs","stopAnimation","touchEditCell","touchCell","clearInterval","calculatePPSTimer","touchDeadZone","touchingCell","editCell","touchstart","changedTouches","startingCell","disposeContextMenu","touchContextTimeout","touchStartEvent","zoomAltered","touchStart1","touchScrollStart","contextmenuEvent","touchContextMenuTimeMs","setInterval","touchEndEvents","touchmove","passive","touchend","touchcancel","touchSelect","handleType","touchSelecting","bounds","touchScroll","rScrollZone","bScrollZone","tScrollZone","lScrollZone","rw","t1","t2","touchZoomSensitivity","touchZoomMin","touchZoomMax","selectionScrollZone","dz","touchReleaseAcceleration","scrollAnimationPPSThreshold","ctor","treeGridAttributes","storageName","invalidSearchExpClass","localStyleLibraryStorageKey","dataType","filters","currentFilter","sorters","parsers","schemaHashes","changes","componentL1Events","eventNames","expandToRow","col","orderedIndex","visibility","localStorage","setItem","tempSchema","createColumnOrders","applyDefaultValue","defaultValue","createNewRowData","getSchemaNameHash","getBestGuessDataType","columnName","drawChildGrids","gridKey","setTimer","refreshFromOrigialData","originalData","validateColumn","setDefaults","obj1","obj2","setAttributes","setStyle","findColumnMaxTextLength","dispose","removeChild","eventParent","contextmenu","disconnect","tryLoadStoredSettings","reloadStoredValues","storedSettings","getHeaderByName","getDomRoot","host","getFontName","fontStyle","getFontHeight","parseFloat","parseStyleValue","initProp","propName","getStyleProperty","styleKeys","supressDrawAndEvent","isDim","getItem","addStyleKeyIfNoneExists","initialized","publicStyleKeyIntf","initScrollBox","setDom","ie","navigator","userAgent","edge","webKit","moz","cursorGrab","cursorGrabing","cursorGrabbing","appendTo","clearChangeLog","gotoCell","gotoRow","findColumnScrollLeft","findRowScrollTop","isCellVisible","clipElement","getSchemaFromData","setFilter","expandTree","collapseTree","insertRow","deleteRow","addRow","insertColumn","deleteColumn","addColumn","getClippingRect","setRowHeight","setColumnWidth","resetColumnWidths","resetRowHeights","selectNone","assertPxColor","clearPxColorAssertions","integerToAlpha","DOMStyles","set","valueObject","filterFor","String","filterRegExp","regEnd","pattern","exec","flags","flagLength","invalidFilterRegEx","RegExp","toLocaleUpperCase","innerText","textContent","blur","TypeError","currentCursor","find","eventName","RangeError","getTypes","parseInnerHtml","message","callback","etl","autoGenerateSchema","autoResizeColumns","setScrollTop","preventScrollEvent","setScrollLeft","sHeight","sWidth","supressDrawEvent","applyContextItemStyle","contextItemContainer","createInlineStyle","createContextMenu","parentContextMenu","createItems","removeChildContext","relatedTarget","container","childMenuArrow","contains","children","setAttribute","contextAddCallback","getAttribute","cPos","childContextMenuMarginLeft","childContextMenuMarginTop","createChildContext","addContent","content","childContextMenuArrowHTML","clickIndex","Event","checkArrowVisibility","parentDOMNode","upArrow","downArrow","startHoverScroll","contextHoverScrollAmount","hoverScrollTimeout","contextHoverScrollRateMs","endHoverScroll","selectedIndex","loc","scrollOffset","zIndexTop","contextMenuZIndex","position","contextMenuArrowColor","zIndex","inputDropdown","maxHeight","innerHeight","autocompleteBottomMargin","minWidth","contextMenuArrowUpHTML","contextMenuArrowDownHTML","contextMenuWindowMargin","innerWidth","isFinite","createFilterContextMenuItems","checkRegExpErrorState","filterInput","background","contextFilterInputBackground","contextFilterInputColor","contextFilterInvalidRegExpBackground","contextFilterInvalidRegExpColor","fillAutoComplete","count","autoCompleteItems","maxAutoCompleteItems","disposeAutocomplete","createAutoCompleteContext","iRect","autoCompleteContext","filterContainer","filterLabel","filterAutoCompleteButton","onclick","filterOptionText","contextFilterButtonHTML","cf","removeFilterOptionText","addDefaultContextMenuItem","isNormalCell","isBackground","isScrollBar","showFilter","showCopy","copyText","execCommand","showPaste","clipBoardData","pasteText","showColumnSelector","columnSelectorText","toggleColumnVisibility","columnSelectorHiddenText","columnSelectorVisibleText","hideColumnText","showClearSettingsOption","clearSettingsOptionText","columnWidth","allowSorting","showOrderByOption","showOrderByOptionTextAsc","showOrderByOptionTextDesc","createDiposeEvent","contextPosition","contextMenuMarginLeft","contextMenuMarginTop","mobileContextMenuMargin","ele","boundingRect","eleRect","clipRect","parentRect","Infinity","scrollingElement","borderWidth","getVisibleCellByIndex","mobileEditInputHeight","cellPaddingLeft","ignoreScrollOffset","abort","abortEdit","newValue","oldValue","aborted","editable","enumItems","enu","option","valueInEnum","multiLine","editCellZIndex","fontSize","editCellFontSize","nx","ny","log","className","css","canvas-datagrid-context-menu-filter-input","verticalAlign","marginLeft","padding","border","contextFilterInputBorder","borderRadius","contextFilterInputBorderRadius","lineHeight","fontWeight","fontFamily","contextFilterInputFontFamily","contextFilterInputFontSize","canvas-datagrid-context-menu-filter-button","contextMenuBackground","contextMenuColor","contextFilterButtonBorder","contextFilterButtonBorderRadius","contextMenuFilterButtonFontFamily","contextMenuFilterButtonFontSize","canvas-datagrid-context-child-arrow","cssFloat","childContextMenuArrowColor","contextMenuChildArrowFontSize","contextMenuFontFamily","canvas-datagrid-autocomplete","contextMenuFontSize","contextMenuBorder","contextMenuPadding","contextMenuBorderRadius","opacity","contextMenuOpacity","overflow","canvas-datagrid-autocomplete-item","canvas-datagrid-autocomplete-item:hover","contextMenuHoverBackground","contextMenuHoverColor","canvas-datagrid-canvas","canvas-datagrid","display","canvas-datagrid-control-input","canvas-datagrid-edit-mobile-input","boxSizing","outline","margin","mobileEditFontFamily","mobileEditFontSize","editCellBorder","editCellColor","editCellBackgroundColor","appearance","webkitAppearance","mozAppearance","canvas-datagrid-edit-input","editCellPaddingLeft","editCellFontFamily","boxShadow","editCellBoxShadow","canvas-datagrid-context-menu-item-mobile","contextMenuItemMargin","contextMenuItemBorderRadius","canvas-datagrid-context-menu-item","canvas-datagrid-context-menu-item:hover","canvas-datagrid-context-menu-label","contextMenuLabelMargin","contextMenuLabelDisplay","contextMenuLabelMinWidth","maxWidth","contextMenuLabelMaxWidth","canvas-datagrid-context-menu-mobile","whiteSpace","canvas-datagrid-context-menu","canvas-datagrid-invalid-search-regExp","contextMenuFilterInvalidExpresion","onblur","parentIsCanvas","getContext","textBaseline","ordA","charCodeAt","ordZ","len","fromCharCode","applyFilter","isColumnSelected","colIsSelected","shift","supressEvent","addCol","ri","st","dragObject","childGrid","trArgs","treeGridHeight","direction","sortFunction","dontSetStorageData","sort","offsetY","xi","cidx","isColumnVisible","isRowVisible","useTouchScrollZones","moveBorder","entitiy","tsz","touchScrollZone","moveMode","borderDragBehavior","xBorderBehavior","yBorderBehavior","isVerticalScrollBar","isHorizontalScrollBar","borderResizeZone","allowColumnResize","allowColumnResizeFromCell","allowRowHeaderResize","allowRowResize","allowRowResizeFromCell","rowGrabZoneSize","maxCol","minCol"," ","rowHeaderCellFont","autosizePadding","autosizeHeaderCellPadding","rowHeaderCellPaddingRight","rowHeaderCellPaddingLeft","columnHeaderCellFont","headerCellPaddingRight","headerCellPaddingLeft","cellFont","cellPaddingRight","cellAutoResizePadding","total","headerCell","int","asc","localeCompare","date","Date","getTime"],"mappings":"CAAA,SAAAA,EAAAC,GACA,gBAAAC,UAAA,gBAAAC,QACAA,OAAAD,QAAAD,IACA,kBAAAG,gBAAAC,IACAD,UAAAH,GACA,gBAAAC,SACAA,QAAA,eAAAD,IAEAD,EAAA,eAAAC,KACC,mBAAAK,WAAAC,KAAA,WACD,MCAgB,UAAUC,GCN1B,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAR,OAGA,IAAAC,GAAAQ,EAAAD,IACAE,EAAAF,EACAG,GAAA,EACAX,WAUA,OANAM,GAAAE,GAAAI,KAAAX,EAAAD,QAAAC,IAAAD,QAAAO,GAGAN,EAAAU,GAAA,EAGAV,EAAAD,QAvBA,GAAAS,KA4DA,OAhCAF,GAAAM,EAAAP,EAGAC,EAAAO,EAAAL,EAGAF,EAAAQ,EAAA,SAAAf,EAAAgB,EAAAC,GACAV,EAAAW,EAAAlB,EAAAgB,IACAG,OAAAC,eAAApB,EAAAgB,GACAK,cAAA,EACAC,YAAA,EACAC,IAAAN,KAMAV,EAAAiB,EAAA,SAAAvB,GACA,GAAAgB,GAAAhB,KAAAwB,WACA,WAA2B,MAAAxB,GAAA,SAC3B,WAAiC,MAAAA,GAEjC,OADAM,GAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAQ,EAAAC,GAAsD,MAAAR,QAAAS,UAAAC,eAAAjB,KAAAc,EAAAC,IAGtDpB,EAAAuB,EAAA,GAGAvB,IAAAwB,EAAA,KDgBM,SAAU9B,EAAQD,EAASO,GE7EjC,GAAAyB,GAAAC,CAEAD,UA8RCE,MA9RDD,EAAA,WACA,YACA,iBAAA7B,GACAA,EAAA+B,UACAC,aACA,6BACA,yBACA,iCACA,yBACA,4BACA,4BACA,4BACA,0BACA,sBACA,8BACA,oBACA,0BACA,yBACA,8BACA,wBACA,mDACA,qCACA,kDACA,4CACA,kCACA,+BACA,+BACA,8BACA,oBACA,aACA,gBACA,iCACA,mCACA,uBACA,6BACA,6BACA,iBACA,YACA,wBACA,sBACA,+BACA,iDACA,sBACA,wBACA,sBACA,sBACA,oCACA,yBACA,wBACA,kCACA,mCACA,yBACA,gCACA,2BACA,+BACA,yBACA,0BACA,gBACA,kBACA,kBACA,yBACA,qDACA,uDACA,iBACA,uBACA,sBACA,sBACA,iBACA,+BACA,oBACA,oCACA,iCACA,wCACA,uBACA,6BACA,8BACA,oBACA,sBACA,oBACA,YACA,4BAEAC,SACA,uDACA,mDACA,4BACA,uCACA,qCACA,4DACA,4CACA,yDACA,mCACA,8BACA,4BACA,6BACA,2BACA,+DACA,+CACA,mEACA,mDACA,gEACA,gDACA,gCACA,gCACA,sBACA,6BACA,iDACA,6CACA,sBACA,iCACA,+BACA,uBACA,kBACA,gCACA,mCACA,sDACA,sCACA,wBACA,sBACA,uBACA,qBACA,yDACA,yCACA,mCACA,kBACA,+BACA,qDACA,yCACA,mCACA,iCACA,6DACA,yDACA,kCACA,gEACA,4DACA,qCACA,gDACA,2CACA,8BACA,+CACA,kEACA,kDACA,oCACA,kCACA,mCACA,iCACA,+CACA,iEACA,0CACA,2DACA,qCACA,yCACA,0CACA,wCACA,qCACA,iEACA,0CACA,uCACA,uDACA,gEACA,uCACA,4CACA,8CACA,sCACA,8DACA,6DACA,gDACA,wCACA,sCACA,mDACA,yDACA,kCACA,yCACA,2CACA,mDACA,2CACA,+DACA,uCACA,+BACA,wDACA,iDACA,sCACA,gCACA,2CACA,uCACA,qCACA,oCACA,4BACA,4BACA,8BACA,6BACA,+BACA,0BACA,uDACA,mDACA,2BACA,oCACA,sDACA,kDACA,0BACA,oCACA,4BACA,0BACA,uBACA,oDACA,0DACA,qDACA,2DACA,+CACA,qDACA,8BACA,wBACA,iDACA,kCACA,6CACA,sBACA,kBACA,wBACA,uBACA,sBACA,wBACA,oBACA,uBACA,+BACA,6BACA,sCACA,8BACA,6BACA,mDACA,sCACA,mBACA,sDACA,kDACA,kCACA,0DACA,uCACA,0DACA,sDACA,+BACA,6CACA,wCACA,2BACA,4CACA,+DACA,+CACA,iCACA,+BACA,gCACA,8BACA,kEACA,qDACA,4CACA,0BACA,kDACA,sDACA,kDACA,4BACA,mCACA,+CACA,yBACA,2BACA,wBACA,4DACA,wDACA,sBACA,wDACA,mCACA,iDACA,0BACA,iCACA,wDACA,kCACA,kDACA,2BACA,2BACA,4CACA,sBACA,0BACA,2BACA,yBACA,sBACA,uBACA,oBAICC,MAAAtC,EAAAgC,MAAA/B,EAAAD,QAAAiC,IFqFK,SAAUhC,OAAQD,QAASO,qBGrXjC,GAAAyB,8BAAAC,6BAEAD,+BACAzB,oBAAA,GACAA,oBAAA,GACAA,oBAAA,GACAA,oBAAA,GACAA,oBAAA,GACAA,oBAAA,GACAA,oBAAA,GACAA,oBAAA,GACAA,oBAAA,QAuGC2B,MAtGDD,8BAAA,QAAAM,SAAAC,WACA,YAGA,SAAAC,MAAAC,MACAA,aACA,IAAAtC,QA+BA,OA9BAA,MAAAuC,gBAAAT,KAAAQ,KAAAF,UACApC,KAAAwC,YAAAF,KAAAG,YAAA,8BAAAC,KAAAJ,KAAAG,WAAAE,UACA3C,KAAAwC,YACAxC,KAAA4C,QAEA5C,KAAA4C,KAAA5C,KAAAuC,YAAAM,KAAA,kDACAC,SAAAC,cAAA,UAEA/C,KAAAsC,UACAtC,KAAA4C,KAAAN,UACAtC,KAAAgD,oBAAAZ,UAAAY,oBACAhD,KAAAiD,kBAAAb,UAAAa,kBACAjD,KAAAkD,oBAAAd,UAAAc,oBACAlD,KAAAmD,WAAA,SAAAb,GAEA,MADAA,GAAAF,WAAA,EACA,GAAAC,MAAAC,IAEApC,QAAAkD,QAAA,SAAAvD,GACAA,EAAAG,QAEAA,KAAAwC,aACAxC,KAAAqD,WAAAf,KAAAG,WAAAY,WACArD,KAAAyC,WAAAH,KAAAG,YACSzC,KAAA4C,KAAAU,kBACTtD,KAAAqD,WAAArD,KAAA4C,KAAAW,cAAsDC,KAAA,SACtDxD,KAAAyC,WAAAzC,KAAAqD,YAEArD,KAAAyC,WAAAzC,KAAA4C,KAEA5C,KAAAyD,OACAzD,KAAA4C,KAnCAR,qBACA,IAAAlC,SAAAwD,MAAAlC,UAAAmC,MAAAnD,KAAAoD,UAkGA,OA9DAC,QAAAC,cACAzB,KAAAb,UAAAT,OAAAgD,OAAAF,OAAAC,YAAAtC,YAGAqC,OAAAG,iBACA3B,KAAA4B,mBAAA7B,UAAA8B,0BACA7B,KAAAb,UAAA2C,qBAAA/B,UAAA+B,qBACA9B,KAAAb,UAAA4C,yBAAAhC,UAAAgC,yBACA/B,KAAAb,UAAA6C,kBAAAjC,UAAAiC,kBACAhC,KAAAb,UAAA8C,gBAAAlC,UAAAkC,gBACAT,OAAAG,eAAAlE,OAAA,kBAAAuC,QAGAwB,eAAAU,gBAAAV,OAAAW,UACAX,OAAAU,eAAA,SAAAjC,GAAiD,UAAAD,MAAAC,KAGjDzC,OAAAD,QAAA,SAAA0C,GACAA,OACA,IAAAhC,GAAAmE,GAAA,yCACA,0DACA,OAAAZ,QAAAG,gBAAAlB,SAAA4B,KAAApB,kBACAhD,EAAAwC,SAAAC,cAAA,mBACAhC,OAAA4D,KAAArC,GAAAc,QAAA,SAAAwB,GAEA,YAAAA,GACA,eAAAA,EAEA,WAAAH,EAAAI,QAAAD,OACAH,GAAArB,QAAA,SAAA0B,OACAhD,KAAAQ,EAAAwC,QAAAF,KACA,uCAAAC,QAAAD,GACA,gBAAAtC,GAAAwC,IAAA,OAAAxC,EAAAwC,IACA/D,OAAA4D,KAAArC,EAAAwC,IAAA1B,QAAA,SAAA2B,GACAzE,EAAAwE,GAAAC,GAAAzC,EAAAwC,GAAAC,KAIAzE,EAAAwE,GAAAxC,EAAAwC,WAMAxE,EAAA0B,WAAA4C,GAAAtC,EAAAsC,MAEAtC,EAAA0C,OACA1E,EAAA0E,KAAA1C,EAAA0C,MAGA1C,EAAAG,YACAH,EAAAG,WAAAwC,YAAA3E,GAEAA,IAEAgC,EAAAF,WAAA,EACA9B,EAAA,GAAA+B,MAAAC,GACAA,EAAAG,YAAAH,EAAAG,WAAAwC,aACA3C,EAAAG,WAAAwC,YAAA3E,GAEAA,IAEAT,OAAAD,SACCsC,MAAAtC,QAAAgC,iCAAA/B,OAAAD,QAAAiC,gCH6XK,SAAUhC,OAAQD,QAASO,qBI/ejC,GAAAyB,8BAAAC,6BAEAD,+BAAAzB,oBAAA,QAiMC2B,MAjMDD,8BAAA,SAAAE,UACA,YACA,mBA8BA,QAAAmD,gBAAAC,EAAAC,GACA,GAAA9E,KAQA,OANAyB,UAAAzB,GACAA,EAAAyB,SAAAoD,GAAAE,OAAA,SAAA/E,GACA,MAAAA,GAAA,GAAAgF,gBAAAF,EAAAE,eACAlD,UAAAa,kBAAA3C,EAAA,MAAA8E,EAAAE,eACAlD,UAAAa,kBAAA3C,EAAA,SAAA8E,EAAAE,gBACa,GArCb,GAAAC,SAAAnD,YA4LA,OA3LAA,WAAAc,oBAAA,SAAAsC,GACAA,IAAAC,QAAA,YACA,IAAAC,GAAAhE,EAAA,EAaA,OAZAgC,OAAAlC,UAAA4B,QAAA5C,KAAAgF,EAAA,SAAAG,GACA,MAAAD,IACAA,GAAA,OACAhE,GAAAiE,EAAAC,gBAGA,MAAAD,OACAD,GAAA,QAGAhE,GAAAiE,KAEAjE,GAEAU,UAAAa,kBAAA,SAAAuC,EAAAK,GACA,GAAAnE,GAAA,EAQA,OAPAgC,OAAAlC,UAAA4B,QAAA5C,KAAAgF,EAAA,SAAAG,GACA,GAAAA,MAAAC,cAEA,YADAlE,GAAA,IAAAiE,EAAAL,cAGA5D,IAAAiE,KAEAE,EAAA,aAAAnE,GAaAU,UAAAY,oBAAA,SAAA8C,EAAAlD,GACA,GAAAmD,GAAAlC,OAAAmC,iBAAA,oBAAApD,EAAAqD,QAAArD,IAAAsD,OAAA,MACAC,IACAvD,GAAAwD,cAAAL,EACAhE,SAAAoE,GACAA,IAAApE,SAAAE,OACAkE,EAAA/C,QAAA,SAAAiD,GACA,GAAAC,EACAA,GAAAP,EAAAQ,iBAAAnE,UAAAa,kBAAAoD,EAAA,QACA,KAAAC,IACAA,EAAAP,EAAAQ,iBAAAnE,UAAAa,kBAAAoD,EAAA,SAEA,KAAAC,GAAA,gBAAAA,IACA1D,EAAA4D,iBAAAH,EAAA,GAAAd,cAAAc,GAAA,IAAAC,EACAb,QAAA,WAAAA,QAAA,WAAAY,EAAA,WAGAP,GAAAlD,EAAA6D,gBACAC,sBAAA,WAAmD9D,EAAA+D,QAAA,KACnD/D,EAAA6D,cAAA,eAAA7D,EAAAgE,SAGArB,SACAP,KAAA,SAAA6B,GACA,IACA,MAAAC,MAAAC,MAAAF,GACiB,MAAAG,GACjB,SAAAC,OAAA,oDAGAC,OAAA,SAAAC,GACA,IACA,MAAAL,MAAAC,MAAAI,GACiB,MAAAH,GACjB,SAAAC,OAAA,gEAGAG,OAAA,SAAAC,EAAAhB,GACA,GAAAjF,GAAAkG,SAAAD,EAAA,GACA,OAAAE,OAAAnG,GAAAiF,EAAAjF,GAEAoG,QAAA,SAAAC,GACA,cAAA/E,KAAA+E,IAEAC,OAAA,SAAAC,GACA,MAAAA,KAGAvF,UAAA8B,wBAAA,WACA,GAAA5D,MAAsBsH,GAAA,2CAKtB,OAJA7F,UAAAzB,GACAA,EAAAyB,SAAAC,WAAAoB,QAAA,SAAAyE,GACAD,EAAAE,KAAAD,EAAA,GAAAvC,iBAEAsC,GAEAxF,UAAA+B,qBAAA,WACAlE,KAAA8H,WAAA,GAEA3F,UAAAiC,kBAAA,WACA,GAAAzB,GAAA3C,IACA2C,GAAAmF,WAAA,EACA3F,UAAA4F,QAAApF,GACAR,UAAAY,qBAAA,EAAAJ,GACAA,EAAA+D,QAAA,IAEAvE,UAAAkC,gBAAA,WACArE,KAAA0G,UAEAvE,UAAAgC,yBAAA,SAAA6D,SAAAC,OAAAC,QACA,GAAAC,KAAAxF,KAAA3C,KAAAoG,GACA,cAAA4B,SAEA,WADA7F,WAAAY,qBAAA,EAAAJ,KAGA,aAAAqF,SAKA,MAJA,kCAAArF,KAAAyF,OACAzF,KAAAyF,KAAA,2CAEAzF,KAAAN,KAAA0C,KAAAmD,OAGA,eAAAF,SAEA,YADArF,KAAAN,KAAA4E,OAAA3B,QAAA2B,OAAAiB,QAGA,aAAAF,SAEA,YADArF,KAAAhC,KAAAuH,OAGA,cAAAF,UAAA,cAAAA,SAAA,CAIA,GADA5B,IAAAnB,eAAA,aAAA+C,UAIA,MAFAG,KAAA7C,cAAAc,KAAA,SACAzD,KAAAZ,WAAAqE,IAAA,IAAA+B,IAAAD,QAGA,OAAAzF,KAAAuF,WACArF,KAAA0F,iBAAA,KAAAL,SAAA,SAAAjB,GACAnE,KAAAsF,YAKA/F,UAAA4F,QAAA,SAAApF,GACA,GAAA2F,EACA1E,QAAA2E,mBACA5F,EAAAI,oBAAA,WAAoDZ,UAAAY,qBAAA,EAAAJ,GAA4CA,EAAA+D,UAOhG4B,EAAA,GAAA1E,QAAA2E,iBAAA,SAAAC,GACA,GAAAC,GAAAC,CACAjF,OAAAlC,UAAA4B,QAAA5C,KAAAiI,EAAA,SAAAG,GACA,gBAAAA,EAAAC,eACA,UAAAD,EAAAC,mBACAF,GAAA,GAGAC,EAAAE,OAAArG,YACA,UAAAmG,EAAAE,OAAArG,WAAAsG,cACAJ,GAAA,SAGAC,EAAAI,WAAAC,OAAA,qBAAAL,EAAAP,QACAK,GAAA,MAGAC,GACA/F,EAAAI,qBAAA,EAAAJ,GAEA8F,IACA,kCAAA9F,EAAAyF,OACAzF,EAAAyF,KAAA,sCAEAzF,EAAAoC,KAAApC,EAAAsG,aAGAX,EAAAP,QAAApF,GAAoCuG,eAAA,EAAAC,WAAA,EAAApH,YAAA,EAAAqH,SAAA,IACpC3F,MAAAlC,UAAA4B,QAAA5C,KAAAsC,SAAAwG,iBAAA,kBAAAC,GACAhB,EAAAP,QAAAuB,GAAsCJ,eAAA,EAAAC,WAAA,EAAApH,YAAA,EAAAqH,SAAA,QAGtCjH,YAECF,MAAAtC,QAAAgC,iCAAA/B,OAAAD,QAAAiC,gCJsfK,SAAUhC,EAAQD,EAASO,GKzrBjC,GAAAyB,GAAAC,CAEAD,UA+vCCE,MA/vCDD,EAAA,WACA,YACA,iBAAA7B,GASA,QAAAwJ,GAAAC,EAAAC,EAAAC,EAAAtD,GACAsD,KAAA,CACA,IAAAC,GAAAtJ,IACA,KAAAsJ,EAAAH,EAAyBG,GAAAF,EAAWE,GAAAD,EACpCrJ,EAAAsJ,OAAA9H,KAAAuE,EAAAuD,EAAA,kBAAAvD,KAAAuD,GAAAvD,CAEA,OAAA/F,GAEA,QAAAuJ,GAAAC,EAAAC,EAAAH,EAAAI,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACA,GAAA/J,GAAAwJ,EAAAG,EAAAhB,OACAqB,EAAAP,EAAAI,CACAP,IAAA5J,EAAAuK,iBACAP,GAAAhK,EAAAwK,gBACAxK,EAAAyK,IAAAC,YACA1K,EAAAyK,IAAAE,OAAAf,EAAAI,EAAAD,GACAE,EAAA7G,QAAA,SAAAhC,GACA,GACAwJ,GACAC,EAFAvE,MAAAxE,KAAAoI,EAAA9I,IAAA8I,EAGAG,KACA/D,EAAAwE,KAAAC,IAAAzE,IAEAsE,EAAAhB,EAAAtJ,EACAuK,EAAAb,EAAAD,EAAAzD,EAAAgE,EACAtK,EAAAyK,IAAAO,OAAAJ,EAAAC,GACAjB,GAAAtJ,IAEAN,EAAAyK,IAAAE,OAAAf,EAAAE,EAAAE,EAAAD,GACA/J,EAAAyK,IAAAQ,YAAAb,EACApK,EAAAyK,IAAAS,SAEA,QAAAC,KACA,GAAAC,IAAA,CACArK,QAAA4D,KAAA3E,EAAAqL,gBAAAjI,QAAA,SAAAkI,GACAtL,EAAAqL,eAAAC,GAAAC,WACAH,GAAA,KAGAA,GACApL,EAAAwL,OAGA,QAAAC,GAAAC,GACA,GAAAC,GACAC,EAAAF,EAAAxC,WAAAwC,EAAAG,eACAjC,EAAA8B,EAAA9B,EAAA5J,EAAAuK,iBACAP,EAAA0B,EAAA1B,EAAAhK,EAAAwK,eACA,IAAAxK,EAAAqL,eAAAO,GAAA,CAEA,GADAD,EAAA3L,EAAAqL,eAAAO,GACAD,EAAAG,SAAAJ,EAAAI,QAAAH,EAAAI,QAAAL,EAAAK,MAGiB,CACjB,IAAAJ,EAAAJ,SACA,MAEA,OAAAvL,GAAAyK,IAAAuB,UAAAL,EAAA/B,EAAAI,GALAhK,EAAAqL,eAAAO,OAAA9J,GAQA6J,EAAA,GAAAM,OAAAP,EAAAK,MAAAL,EAAAI,QACA9L,EAAAqL,eAAAO,GAAAD,EACAA,EAAAO,OAAA,WACAlM,EAAAyK,IAAAuB,UAAAL,EAAA/B,EAAAI,GACAmB,KAEAQ,EAAAQ,IAAA,6BAA0CC,KAC1C,kDAAAV,EAAAK,MAAA,aAAAL,EAAAI,OAAA,qJAGAF,EAAA,uCAMA,QAAAS,GAAAzC,EAAAI,GACA,GAAAsC,GAAAtM,EAAA4G,MAAA2F,kCAAAvM,EAAAwM,MACAC,EAAAzM,EAAA4G,MAAA8F,mCAAA1M,EAAAwM,MACAG,EAAA3M,EAAA4G,MAAAgG,oCAAA5M,EAAAwM,MACAK,EAAA7M,EAAA4G,MAAAkG,8BAAA9M,EAAAwM,MACAO,EAAA/M,EAAA4G,MAAAoG,+BAAAhN,EAAAwM,KAqBA,OApBA5C,IAAA5J,EAAAuK,iBACAP,GAAAhK,EAAAwK,gBACAxK,EAAAyK,IAAAwC,UAAAjN,EAAA4G,MAAAsG,8BACAlN,EAAAyK,IAAAQ,YAAAjL,EAAA4G,MAAAuG,oCACAnN,EAAAyK,IAAAC,YACAd,GAAA6C,EACAzC,GAAAsC,EACA,QAAAtM,EAAAoN,gBACApN,EAAAyK,IAAAE,OAAAf,EAAAI,GACAhK,EAAAyK,IAAAO,OAAApB,EAAAiD,EAAA7C,GACAhK,EAAAyK,IAAAO,OAAApB,EAAA,GAAAiD,EAAA7C,EAAA+C,GACA/M,EAAAyK,IAAAE,OAAAf,EAAAI,KAEAhK,EAAAyK,IAAAO,OAAApB,EAAAI,EAAA+C,GACA/M,EAAAyK,IAAAO,OAAApB,EAAAiD,EAAA7C,EAAA+C,GACA/M,EAAAyK,IAAAO,OAAApB,EAAA,GAAAiD,EAAA7C,GACAhK,EAAAyK,IAAAO,OAAApB,EAAAI,EAAA+C,IAEA/M,EAAAyK,IAAAS,SACAlL,EAAAyK,IAAA4C,OACAZ,EAAAI,EAAAF,EAEA,QAAAW,GAAA5B,EAAA9B,EAAAI,GACA,GAAAsC,GAAAtM,EAAA4G,MAAA2G,mBAAAvN,EAAAwM,MACAG,EAAA3M,EAAA4G,MAAA4G,qBAAAxN,EAAAwM,MACAC,EAAAzM,EAAA4G,MAAA6G,oBAAAzN,EAAAwM,MACAK,EAAA7M,EAAA4G,MAAA8G,eAAA1N,EAAAwM,MACAO,EAAA/M,EAAA4G,MAAA+G,gBAAA3N,EAAAwM,KAqBA,OApBA5C,IAAA5J,EAAAuK,iBACAP,GAAAhK,EAAAwK,gBACAxK,EAAAyK,IAAAwC,UAAAjN,EAAA4G,MAAAgH,eACA5N,EAAAyK,IAAAQ,YAAAjL,EAAA4G,MAAAiH,qBACA7N,EAAAyK,IAAAC,YACAd,GAAA6C,EACAzC,GAAAsC,EACAtM,EAAA8N,aAAApC,EAAAqC,WACA/N,EAAAyK,IAAAE,OAAAf,EAAAI,GACAhK,EAAAyK,IAAAO,OAAApB,EAAAiD,EAAA7C,GACAhK,EAAAyK,IAAAO,OAAApB,EAAA,GAAAiD,EAAA7C,EAAA+C,GACA/M,EAAAyK,IAAAE,OAAAf,EAAAI,KAEAhK,EAAAyK,IAAAO,OAAApB,EAAAI,GACAhK,EAAAyK,IAAAO,OAAApB,EAAAmD,EAAA/C,EAAA,GAAA6C,GACA7M,EAAAyK,IAAAO,OAAApB,EAAAI,EAAA6C,GACA7M,EAAAyK,IAAAO,OAAApB,EAAAI,IAEAhK,EAAAyK,IAAAS,SACAlL,EAAAyK,IAAA4C,OACAZ,EAAAI,EAAAF,EAEA,QAAAqB,GAAApE,EAAAI,EAAAF,EAAAC,EAAAkE,GACArE,GAAA5J,EAAAuK,iBACAP,GAAAhK,EAAAwK,eACA,IAAAF,GAAAV,EAAAE,EAAAoE,EAAAlE,EAAAD,CACA/J,GAAAyK,IAAAC,YACA1K,EAAAyK,IAAAE,OAAAf,EAAAqE,EAAAjE,GACAhK,EAAAyK,IAAAO,OAAAV,EAAA2D,EAAAjE,GACAhK,EAAAyK,IAAA0D,iBAAA7D,EAAAN,EAAAM,EAAAN,EAAAiE,GACAjO,EAAAyK,IAAAO,OAAAV,EAAAN,EAAAD,EAAAkE,GACAjO,EAAAyK,IAAA0D,iBAAA7D,EAAA4D,EAAA5D,EAAA2D,EAAAC,GACAlO,EAAAyK,IAAAO,OAAApB,EAAAqE,EAAAC,GACAlO,EAAAyK,IAAA0D,iBAAAvE,EAAAsE,EAAAtE,EAAAsE,EAAAD,GACAjO,EAAAyK,IAAAO,OAAApB,EAAAI,EAAAiE,GACAjO,EAAAyK,IAAA0D,iBAAAvE,EAAAI,EAAAJ,EAAAqE,EAAAjE,GAEA,QAAAoE,GAAAxE,EAAAI,EAAAF,EAAAC,GACAH,GAAA5J,EAAAuK,iBACAP,GAAAhK,EAAAwK,gBACAxK,EAAAyK,IAAA2D,SAAAxE,EAAAI,EAAAF,EAAAC,GAEA,QAAAsE,GAAAzE,EAAAI,EAAAF,EAAAC,GACAH,GAAA5J,EAAAuK,iBACAP,GAAAhK,EAAAwK,gBACAxK,EAAAyK,IAAA4D,WAAAzE,EAAAI,EAAAF,EAAAC,GAEA,QAAAuE,GAAAC,EAAA3E,EAAAI,GACAJ,GAAA5J,EAAAuK,iBACAP,GAAAhK,EAAAwK,gBACAxK,EAAAyK,IAAA6D,SAAAC,EAAA3E,EAAAI,GAEA,QAAAwE,GAAA5E,EAAAI,EAAAM,GACAV,GAAA5J,EAAAuK,iBACAP,GAAAhK,EAAAwK,gBACAxK,EAAAyK,IAAAC,YACA1K,EAAAyK,IAAAgE,IAAA7E,EAAAI,EAAAM,EAAA,IAAAQ,KAAA4D,IACA1O,EAAAyK,IAAA4C,OAEA,QAAAsB,GAAA/E,EAAAI,EAAAM,GACAV,GAAA5J,EAAAuK,iBACAP,GAAAhK,EAAAwK,gBACAxK,EAAAyK,IAAAC,YACA1K,EAAAyK,IAAAgE,IAAA7E,EAAAI,EAAAM,EAAA,IAAAQ,KAAA4D,IACA1O,EAAAyK,IAAAS,SAEA,QAAA0D,GAAApL,GAIAxD,EAAAyK,IAAAC,YACA,IAAAlH,IACAxD,EAAAyK,IAAAE,OAAA3K,EAAA6O,sBAAA7O,EAAA8O,oBACA9O,EAAAyK,IAAAO,OAAAhL,EAAA6O,sBAAA7O,EAAA8L,QACA9L,EAAAyK,IAAAO,OAAAhL,EAAA+L,MAAA/L,EAAA8L,QACA9L,EAAAyK,IAAAO,OAAAhL,EAAA+L,MAAA/L,EAAA8O,qBAEA,IAAAtL,IACAxD,EAAAyK,IAAAE,OAAA,EAAA3K,EAAA8O,oBACA9O,EAAAyK,IAAAO,OAAA,EAAAhL,EAAA8L,QACA9L,EAAAyK,IAAAO,OAAAhL,EAAA+L,MAAA/L,EAAA8L,QACA9L,EAAAyK,IAAAO,OAAAhL,EAAA+L,MAAA/L,EAAA8O,qBAEA,IAAAtL,IACAxD,EAAAyK,IAAAE,OAAA3K,EAAA6O,sBAAA,GACA7O,EAAAyK,IAAAO,OAAAhL,EAAA+L,MAAA,GACA/L,EAAAyK,IAAAO,OAAAhL,EAAA+L,MAAA/L,EAAA8L,QACA9L,EAAAyK,IAAAO,OAAAhL,EAAA6O,sBAAA7O,EAAA8L,SAEA9L,EAAAyK,IAAAsE,OAEA,QAAAC,GAAApF,EAAAI,EAAAM,GACA,cAAAtK,EAAA4G,MAAAqI,oBACA,MAAAT,GAAA5E,EAAAI,EAAA,GAAAM,EAEA8D,GAAAxE,EAAA,GAAAU,EAAAN,EAAA,GAAAM,OAEA,QAAA4E,GAAAtF,EAAAI,EAAAM,GACA,cAAAtK,EAAA4G,MAAAqI,oBACA,MAAAN,GAAA/E,EAAAI,EAAA,GAAAM,EAEA+D,GAAAzE,EAAA,GAAAU,EAAAN,EAAA,GAAAM,OAEA,QAAA6E,GAAAzO,EAAA0O,GACA,GAAAC,GAAArP,EAAA4G,MAAA0I,sBAEAC,GAAA,WACAP,EAAAtO,EAAAkJ,EAAAlJ,EAAAqL,MAAArL,EAAAsJ,EAAAqF,GACAH,EAAAxO,EAAAkJ,EAAAlJ,EAAAqL,MAAArL,EAAAsJ,EAAAqF,IAEAG,GAAA,WACAR,EAAAtO,EAAAkJ,EAAAlJ,EAAAqL,MAAArL,EAAAsJ,EAAAtJ,EAAAoL,OAAAuD,GACAH,EAAAxO,EAAAkJ,EAAAlJ,EAAAqL,MAAArL,EAAAsJ,EAAAtJ,EAAAoL,OAAAuD,IAEAI,GAAA,WACAT,EAAAtO,EAAAkJ,EAAAlJ,EAAAsJ,EAAAqF,GACAH,EAAAxO,EAAAkJ,EAAAlJ,EAAAsJ,EAAAqF,IAEAK,GAAA,WACAV,EAAAtO,EAAAkJ,EAAAlJ,EAAAsJ,EAAAtJ,EAAAoL,OAAAuD,GACAH,EAAAxO,EAAAkJ,EAAAlJ,EAAAsJ,EAAAtJ,EAAAoL,OAAAuD,MAGAD,KAEA,QAAAO,GAAAjP,EAAA0O,GACApP,EAAAyK,IAAAC,aAEAkF,EAAA,WACA5P,EAAAyK,IAAAE,OAAAjK,EAAAkJ,EAAA5J,EAAAuK,iBAAA7J,EAAAsJ,EAAAhK,EAAAwK,iBACAxK,EAAAyK,IAAAO,OAAAtK,EAAAkJ,EAAA5J,EAAAuK,iBAAA7J,EAAAqL,MAAArL,EAAAsJ,EAAAhK,EAAAwK,kBAEAF,EAAA,WACAtK,EAAAyK,IAAAE,OAAAjK,EAAAkJ,EAAA5J,EAAAuK,iBAAA7J,EAAAqL,MAAArL,EAAAsJ,EAAAhK,EAAAwK,iBACAxK,EAAAyK,IAAAO,OAAAtK,EAAAkJ,EAAA5J,EAAAuK,iBAAA7J,EAAAqL,MAAArL,EAAAsJ,EAAAhK,EAAAwK,gBAAA9J,EAAAoL,SAEAoC,EAAA,WACAlO,EAAAyK,IAAAE,OAAAjK,EAAAkJ,EAAA5J,EAAAuK,iBAAA7J,EAAAsJ,EAAAhK,EAAAwK,gBAAA9J,EAAAoL,QACA9L,EAAAyK,IAAAO,OAAAtK,EAAAkJ,EAAA5J,EAAAuK,iBAAA7J,EAAAqL,MAAArL,EAAAsJ,EAAAhK,EAAAwK,gBAAA9J,EAAAoL,SAEAvL,EAAA,WACAP,EAAAyK,IAAAE,OAAAjK,EAAAkJ,EAAA5J,EAAAuK,iBAAA7J,EAAAsJ,EAAAhK,EAAAwK,iBACAxK,EAAAyK,IAAAO,OAAAtK,EAAAkJ,EAAA5J,EAAAuK,iBAAA7J,EAAAsJ,EAAAhK,EAAAwK,gBAAA9J,EAAAoL,UAGAsD,KACApP,EAAAyK,IAAAS,SAEA,QAAA2E,GAAAtB,EAAAxC,GACA,GAAArL,GAAAoJ,EAAA,CACA,OAAA9J,GAAA8P,cAAAvB,IAAAvO,EAAA8P,cAAAvB,GAAAxC,GACA/L,EAAA8P,cAAAvB,GAAAxC,IAGAjC,EAAA9J,EAAAyK,IAAAsF,YAAAxB,GAAAxC,MACA/L,EAAA8P,cAAAvB,GAAAvO,EAAA8P,cAAAvB,OACA7N,GAAiBsP,MAAAzB,EAAAxC,MAAAjC,GACjB9J,EAAA8P,cAAAvB,GAAAxC,GAAArL,EACAA,GAEA,QAAAuP,GAAAvE,GACA,GAAAwE,GAAAlQ,EAAA4G,MAAA8E,EAAA9E,MAAA,eAAA5G,EAAAwM,MACA2D,EAAAnQ,EAAA4G,MAAA8E,EAAA9E,MAAA,cAAA5G,EAAAwM,MACA4D,EAAApQ,EAAA4G,MAAA8E,EAAA9E,MAAA,gBAAA5G,EAAAwM,MACA6D,EAAArQ,EAAA4G,MAAA8E,EAAA9E,MAAA,iBAAA5G,EAAAwM,MACA8D,EAAAH,EAAAzE,EAAAI,OAAA,GAAAJ,EAAAI,OACAyE,EAAAL,EAAAxE,EAAAgC,eAAAhC,EAAA8E,iBACA9E,GAAA6C,KAAAsB,EAAAnE,EAAAG,eAAAH,EAAAK,MAAAqE,EAAAF,GACAxE,EAAA6C,KAAAzC,OAAAJ,EAAA+E,WACA,UAAA/E,EAAAgF,oBACAH,EAAA7E,EAAAK,MAAAL,EAAA6C,KAAAxC,MAAAqE,EACa,WAAA1E,EAAAgF,sBACbH,EAAA7E,EAAAK,MAAA,EAAAL,EAAA6C,KAAAxC,MAAA,GAEA,QAAAL,EAAAiF,kBACAL,EAAAH,EAAAzE,EAAA6C,KAAAzC,OACa,WAAAJ,EAAAiF,oBACbL,EAAA5E,EAAAI,OAAAuE,EAAA3E,EAAA6C,KAAAzC,QAEAJ,EAAA6C,KAAA3E,EAAA8B,EAAA9B,EAAA2G,EACA7E,EAAA6C,KAAAvE,EAAA0B,EAAA1B,EAAAsG,EACAhC,EAAA5C,EAAA6C,KAAAyB,MAAAtE,EAAA6C,KAAA3E,EAAA8B,EAAA6C,KAAAvE,GAEA,QAAA4G,KAMA,IALA,GAIAC,GAJA/G,EAAA,EACAnI,EAAA3B,EAAA8Q,mBACAlH,EAAA,EACAxI,EAAA0J,KAAAiG,IAAA/Q,EAAAgR,aAAArP,EAAAsH,QAEAW,EAAAxI,GACAyP,EAAAlP,EAAA3B,EAAAiR,OAAAC,QAAAtH,IACAE,IAAA9J,EAAAmR,MAAAD,QAAAtH,IAAAiH,EAAA9E,OAAA/L,EAAA4G,MAAAwK,WAAApR,EAAAwM,MACA5C,GAAA,CAEA,OAAAE,GAvTA,GAAAuH,MACAC,EAAA,EACAC,EAAA,IACAC,KACAC,KACAC,IACA1R,GAAAqL,kBAwUArL,EAAAwL,KAAA,SAAAmG,GAwFA,QAAAC,GAAAlG,IACA1L,EAAAgC,WAAA6P,sBAAA7R,EAAA8R,UACApG,EAAAqG,oBAAArG,EAAAsG,sBAAAhS,EAAA8R,SACAG,EAAAnK,MAAA4D,EAAA,OACAA,EAAAwG,gBAAA,MAEAxG,EAAAqG,oBAAArG,EAAAyG,qBAAAnS,EAAA8R,SACAG,EAAAnK,MAAA4D,EAAA,OACAA,EAAAwG,gBAAA,MAEAxG,EAAA0G,uBAAA1G,EAAAyG,qBAAAnS,EAAA8R,SACAG,EAAAnK,MAAA4D,EAAA,OACAA,EAAAwG,gBAAA,MAEAxG,EAAA0G,uBAAA1G,EAAAsG,uBACA,SAAAhS,EAAAgC,WAAAqQ,yBAAArS,EAAA8R,UACAG,EAAAnK,MAAA4D,EAAA,OACAA,EAAAwG,gBAAA,OAIA,QAAAI,GAAA5G,EAAA6G,EAAAC,EAAAC,GACAA,MAA8C7I,EAAA,EAAAI,EAAA,GAC9C0B,EAAAgH,gBAAA,IACAhH,EAAAiH,aACA3S,EAAA4S,WAAAlH,EAAAqC,UAAA0E,EAAAzI,KACA,IAAAhK,EAAA4S,WAAAlH,EAAAqC,UAAA0E,EAAAzI,GAAAnF,QAAA6G,EAAAmH,aAAAJ,EAAA7I,KACA5J,EAAA4S,WAAAlH,EAAAqC,SAAA,EAAA0E,EAAAzI,KACA,IAAAhK,EAAA4S,WAAAlH,EAAAqC,SAAA,EAAA0E,EAAAzI,GAAAnF,QAAA6G,EAAAmH,aAAAJ,EAAA7I,IACA,IAAA8B,EAAAqC,UACArC,EAAAoH,WACAP,EAAAzK,MAAA4D,EAAA,MACAA,EAAA8G,EAAA,gBACA9G,EAAA8G,EAAA,gBAEAxS,EAAA4S,WAAAlH,EAAAqC,SAAA,GAAA0E,EAAAzI,KACA,IAAAhK,EAAA4S,WAAAlH,EAAAqC,SAAA,GAAA0E,EAAAzI,GAAAnF,QAAA6G,EAAAmH,aAAAJ,EAAA7I,KACA2I,EAAAzK,MAAA4D,EAAA,MACAA,EAAA8G,EAAA,mBACA9G,EAAA8G,EAAA,gBAEAxS,EAAA4S,WAAAlH,EAAAqC,UAAA0E,EAAAzI,IAAA,IAAA0B,EAAAmH,cACA,IAAA7S,EAAA4S,WAAAlH,EAAAqC,UAAA0E,EAAAzI,GAAAnF,QAAA6G,EAAAmH,YAAA,EAAAJ,EAAA7I,KACA2I,EAAAzK,MAAA4D,EAAA,MACAA,EAAA8G,EAAA,iBACA9G,EAAA8G,EAAA,gBAEAxS,EAAA4S,WAAAlH,EAAAqC,UAAA0E,EAAAzI,IAAA0B,EAAAmH,cAAAlR,EAAAsH,SACA,IAAAjJ,EAAA4S,WAAAlH,EAAAqC,UAAA0E,EAAAzI,GAAAnF,QAAA6G,EAAAmH,YAAA,GAAAJ,EAAA7I,KACA2I,EAAAzK,MAAA4D,EAAA,MACAA,EAAA8G,EAAA,kBACA9G,EAAA8G,EAAA,iBAIA,QAAAO,GAAApS,EAAAqS,EAAAjF,GACA,gBAAAkF,EAAAC,EAAAC,GACA,GAAAF,EAAAG,OAAwC,QACxC,IACAC,GACA3H,EAeApF,EAjBAgN,EAAAL,EAAArM,OAAA,OAGAkM,EAAA,aAAApQ,KAAA4Q,GACAC,EAAA,aAAA7Q,KAAA4Q,GACAX,EAAA,kBAAAW,EACAE,EAAA,qBAAAF,EACAG,EAAAzT,EAAA4S,WAAAI,KAAA,IAAAhT,EAAA4S,WAAAI,GAAAnO,QAAAsO,GACAO,EAAA1T,EAAA2T,OAAA5F,WAAAiF,GAAAhT,EAAA2T,OAAAd,cAAAM,EACAS,EAAA5T,EAAA6T,WAAA9F,WAAAiF,GAAAhT,EAAA6T,WAAAhB,cAAAM,EACAW,EAAA,wBAAAR,EACAS,EAAApT,IAAAsS,EAAArS,UAAAkB,GACAkS,EAAA,gBAAAD,IAAA,OAAAA,OAAAjS,KAAAiS,EACAE,IAAAjU,EAAAiR,OAAAiD,KAAAlU,EAAA6T,WAAA9F,YAAAiF,GACAhT,EAAAiR,OAAAC,QAAAlR,EAAA6T,WAAAhB,eAAAK,IACA,IAAAC,IAAA,IAAAH,KACAL,EAAA,gDAEAwB,EAAAnU,EAAAoU,WAAAnB,EAAA5K,MAAA,UACAgM,EAAA,EACAC,EAAA,EACAlD,EAAApR,EAAAmR,MAAAD,QAAAgC,IAAAD,EAAAlH,MACAwI,GACAvE,MAAA+D,EACAS,IAAA7T,EACAsS,SA2EA,IAzEAa,IACA1C,EAAAtH,EAAAF,OAGA9H,KAAAsP,IACAA,EAAApR,EAAA4G,MAAAwK,WAEAA,GAAApR,EAAAwM,MACA5C,EAAAwH,EAAApR,EAAA4G,MAAA6N,gBAAA,IACA7K,GAAAwH,EAAApR,EAAA4G,MAAA6N,iBAEAb,GAAA,eAAAN,IACAA,EAAA,eAEA,IAAAtT,EAAA0U,YAAA7P,QAAAkJ,IAAA+E,GACA9S,EAAA0U,YAAA5M,KAAAiG,GAEAzH,EAAAtG,EAAAyG,cAAA,kBAAA8N,GACA3J,EAAAhB,EACAiB,EAAAb,EACA,eAAAsJ,GACA1I,EAAA,EACAC,EAAA,GACqB8H,EACrB/H,EAAA,EACqBkI,IACrBjI,EAAA,GAEAa,GACArD,KAAA2L,EAAA,uBAAAf,EAAA5K,KACAzB,MAAA0M,EACA3Q,SAAA,uBACAiH,EAAAgB,EACAZ,EAAAa,EACA6F,oBAAA1Q,EAAA4G,MAAA0M,EAAA,uBACA3C,kBAAA3Q,EAAA4G,MAAA0M,EAAA,qBACAqB,UAAA3U,EAAAwK,gBAAAK,EACA+J,WAAA5U,EAAAuK,iBAAAK,EACAiK,UAAA7U,EAAA8U,UAAAD,UACAE,WAAA/U,EAAA8U,UAAAC,WACAnB,UAAAK,EACAP,UACAD,WACA1H,MAAAqF,EACAtF,OAAAkJ,GACAC,YAAA7D,EACA8D,aAAAF,GACAvS,WAAAzC,EAAA4C,KAAAH,WACA0S,aAAAnV,EAAA4C,KAAAH,WACAuC,KAAArE,EACA4S,WACAT,WACAU,iBACAM,wBACAnB,cACAyC,UACAnC,SACAJ,YAAAM,EACApF,SAAAiF,EACAqC,gBAAAnC,EACAoC,aAAAvH,EACAiG,SACAuB,UAAAvB,IAAAT,IAAAT,EACA0C,QAAAxV,EAAAgC,WAAApB,MAAA,IAAAmN,EAAA,IAAAmF,EACAuC,WAAAzV,EAAA4C,KACAsG,UAAA,GACA+K,eACAjE,MAAA8C,IAAAH,EAAAM,EAAAyC,OAAAzC,EAAArS,KAAAmT,GAEAQ,EAAA7I,OACAA,EAAAiK,WAAAjK,EAAAoH,SAAA9S,EAAAmR,MAAA+C,MAAA,GAAA0B,EACAlK,EAAAmK,UAAAnK,EAAAoH,SAAA9S,EAAAmR,MAAAD,QAAA4E,WAAA9V,EAAAmR,MAAAD,QAAAgC,GACAlT,EAAA+V,aAAAC,QAAAtK,IACA1L,EAAAyG,cAAA,mBAAA8N,GAAA,CA+CA,GA9CAvU,EAAAyK,IAAAwC,UAAAjN,EAAA4G,MAAA0M,EAAA,mBACAtT,EAAAyK,IAAAQ,YAAAjL,EAAA4G,MAAA0M,EAAA,eACAtT,EAAAyK,IAAAwL,UAAAjW,EAAA4G,MAAA0M,EAAA,eACAI,IACA1T,EAAAyK,IAAAwC,UAAAjN,EAAA4G,MAAA0M,EAAA,wBACAtT,EAAAyK,IAAAQ,YAAAjL,EAAA4G,MAAA0M,EAAA,qBAEAG,IACAzT,EAAAyK,IAAAwC,UAAAjN,EAAA4G,MAAA0M,EAAA,2BACAtT,EAAAyK,IAAAQ,YAAAjL,EAAA4G,MAAA0M,EAAA,wBAEAW,IACAjU,EAAAyK,IAAAwC,UAAAjN,EAAA4G,MAAAqN,EAAA,oBAEAjU,EAAAyG,cAAA,aAAA8N,GACA7I,EAAAsI,SACAtI,EAAAI,SAAA8J,IACAlK,EAAAI,OAAA8J,GAAA5V,EAAA4G,MAAAsP,wBACAC,GAAA,GAEAzK,EAAAK,MAAA/L,EAAAmR,MAAAD,QAAAgC,IAAAlT,EAAA4G,MAAAwP,wBAEAhB,IAAA1J,EAAAiH,cACAjH,EAAAI,OAAA9L,EAAAmR,MAAA+C,KAAAnG,IAAA/N,EAAA4G,MAAAoO,YAEAtJ,EAAAsI,SACA5F,EAAAxD,EAAAC,EAAAa,EAAAK,MAAAL,EAAAI,QACAuC,EAAAzD,EAAAC,EAAAa,EAAAK,MAAAL,EAAAI,SAEA9L,EAAAyK,IAAA4L,OACArI,EAAAtC,EAAA9B,EAAA8B,EAAA1B,EAAA0B,EAAAK,MAAAL,EAAAI,OAAA,GACA9L,EAAAyK,IAAAsE,OACA/O,EAAAyG,cAAA,kBAAA8N,GACA7I,EAAAI,SAAAkJ,IAAAI,IAAA1J,EAAAiH,cACA3S,EAAAmR,MAAA+C,KAAApB,GAAA,EAAA/E,GAAArC,EAAAI,OACAqK,GAAA,GAEAzK,EAAAK,QAAAqF,IACApR,EAAAmR,MAAAD,QAAAgC,GAAAxH,EAAAK,MACAoK,GAAA,GAEAxD,GAAA3S,EAAAgC,WAAAsU,OACAtW,EAAAyG,cAAA,kBAAA8N,KACAD,EAAAhH,EAAA5B,EAAA1L,EAAA4G,MAAA0M,EAAA,eAAAzI,EAAA,KAGA7K,EAAAgC,WAAAuU,gBAAA5D,IACAA,EACA,GAAAjH,EAAAsI,SAAAhU,EAAAyG,cAAA,uBAAA8N,GAAA,CACA,IAAAvU,EAAAwW,WAAA9K,EAAA8J,QAAA,CAUA,GANAnC,EAAArT,EAAAqT,mBACAA,EAAAzS,KAAAZ,EAAAgC,WAAAyU,eAAA/K,EAAA8J,WAAA1T,GACAuR,EAAAjR,WAAA,EACAiR,EAAA5Q,WAAAiJ,EACA2H,EAAArO,KAAA+O,EACAQ,EAAAlB,qBACArT,EAAAyG,cAAA,uBAAA8N,GAAqF,MACrFvU,GAAAwW,WAAA9K,EAAA8J,QAAAxV,EAAAmD,WAAAkQ,GACArT,EAAAmR,MAAA+C,KAAAnG,GACA/N,EAAAmR,MAAA+C,KAAAnG,IAAA/N,EAAA4G,MAAA8P,eACAP,GAAA,EAEAzK,EAAAiL,KAAA3W,EAAAwW,WAAA9K,EAAA8J,QACA9J,EAAAiL,KAAAlU,WAAAiJ,EACAA,EAAAiL,KAAAC,SAAA,EACAlL,EAAAiL,KAAAnL,OACAxL,EAAAyG,cAAA,iBAAA8N,OACyB7I,GAAAsI,SACzBhU,EAAAwW,WAAA9K,EAAA8J,UACAxV,EAAAwW,WAAA9K,EAAA8J,QAAA/S,WAAAyS,aAAA,GAEApC,GAAA9S,EAAA6W,UAAA5D,EAAArS,OACAZ,EAAAyG,cAAA,qBAAA8N,KACAF,EAAAhI,EAAAzB,EAAA5K,EAAA4G,MAAA0M,EAAA,oBAGAtT,EAAAyK,IAAAwC,UAAAjN,EAAA4G,MAAA0M,EAAA,SACAI,IACA1T,EAAAyK,IAAAwC,UAAAjN,EAAA4G,MAAA0M,EAAA,eAEAG,IACAzT,EAAAyK,IAAAwC,UAAAjN,EAAA4G,MAAA0M,EAAA,kBAEAW,IACAjU,EAAAyK,IAAAwC,UAAAjN,EAAA4G,MAAAqN,EAAA,UAEAjU,EAAAyK,IAAAqM,KAAA9W,EAAA4G,MAAA0M,EAAA,cAAAtT,EAAAwM,MAAA,MAAAxM,EAAA4G,MAAA0M,EAAA,YACA5H,EAAA+E,WAAAzQ,EAAA4G,MAAA0M,EAAA,cAAAtT,EAAAwM,MACAd,EAAAgC,eAAA4G,EACA5I,EAAA8E,kBAAA6D,EACA/N,MAAAxE,KAAAwE,IAAA6N,EACAA,EAAAI,GAAA,OACAzS,KAAAwE,GAAA6N,IACA7N,EAAA,GACAyQ,QAAAC,KAAA,mCACA/D,EAAA5K,KAAA,wBAEAqD,EAAAG,oBAAA/J,KAAAwE,GAAA,OAAAA,IAAA,IAAA2Q,WACAjX,EAAAkX,mBAAApV,KAAA9B,EAAAkX,cAAA5Q,IAAAwM,IACApH,EAAAG,eAAA7L,EAAAgC,WAAAmV,iBAAA7Q,GAEAtG,EAAAyG,cAAA,aAAA8N,KACA7I,EAAAxC,WAAA,SAAA+J,EAAA5K,KACAoD,EAAAC,GAEAuE,EAAAvE,IAgBA,OAXAkI,KACAwD,EAAA1L,GAEA4G,EAAA5G,EAAA2L,EAAA,aAEAzF,EAAAlG,GACA1L,EAAAsX,iBACAhF,EAAA5G,EAAA6L,EAAA,OAAAvX,EAAAwX,YAEAxX,EAAAyK,IAAAgN,UACA7N,GAAA8B,EAAAK,OAAA2L,EAAA,EAAA1X,EAAA4G,MAAA6N,iBACA/I,EAAAK,QAGA,QAAA4L,GAAAC,EAAAC,EAAA7E,GACA,GAAA8E,GAAAxX,CACAN,GAAAgC,WAAA+V,iBACAnO,EAAA,EACAtJ,EAAAuX,EAAA,EACAG,GAAqCA,cAAA1X,GACrCwX,GACAlX,KAAA,gBACAmL,MAAA/L,EAAAmR,MAAAD,SAAA,IAAAlR,EAAA4G,MAAAqR,mBACArR,MAAA,gBACAyB,KAAA,SACArD,KAAA1E,EACAuX,OAAA,GAEAzC,EAAApV,EAAA8N,aAAA+J,GACA9E,EAAAiF,EAAAH,EAAA7E,GAAA8E,GAAA,OA2FA,QAAAI,GAAA5N,EAAA3J,GACA,GAAAL,GAAA6X,EAAAC,EAAAtX,EAAAuX,EAAA1W,EAAAsH,MACA,IAAAe,EAAA,EAAAgL,GAAAjL,EACA,QAOA,IALAuO,EAAAtT,EAAAsF,GACA8K,EAAApV,EAAA8N,aAAAxD,GACA8N,GAAApY,EAAAmR,MAAA+C,KAAA5J,IAAAtK,EAAA4G,MAAAoO,YAAAhV,EAAAwM,MACA2L,GAAA/C,EAAApV,EAAAmR,MAAAoH,MAAAjO,GAAA,GAAAtK,EAAAwM,MACAoJ,EAAAwC,EAAAD,EACAnO,GAAA4L,EACA,QAUA,KARA5V,EAAAgC,WAAA+V,iBACAnO,GAAAqO,IAEAjD,GAAAY,EACA5V,EAAAgC,WAAAwW,uBACA5O,GAAA6O,GAGA3X,EAAAd,EAAA0Y,gBAAA1Y,EAAAgR,aAAoElQ,EAAAuX,EAAOvX,GAAA,EAG3E,GAFAR,EAAAN,EAAAiR,OAAAC,QAAApQ,IACA8I,GAAAmJ,EAAAuF,EAAAhO,EAAA3J,GAAAgB,EAAArB,KAAAQ,IACAd,EAAA+L,MAAA,CACA/L,EAAA2Y,iBAAA7X,EACAd,EAAA4Y,iBAAAhP,CACA,OAQA,IAJAA,EAAA,EACA5J,EAAAgC,WAAA+V,iBACAnO,GAAAqO,IAEAnX,EAAA,EAA2BA,EAAAd,EAAAgR,eAC3B1Q,EAAAN,EAAAiR,OAAAC,QAAApQ,MACA8I,GAAAmJ,EAAAuF,EAAAhO,EAAA3J,GAAAgB,EAAArB,KAAAQ,IACAd,EAAA+L,QAHkDjL,GAAA,GA8ClD,MAvCAd,GAAA6O,sBAAAjF,EAEAoL,GAAAY,EACAhM,GAAA5J,EAAA8U,UAAAC,WAAA/U,EAAA6Y,gBAAA7Y,EAAA4G,MAAA6N,gBAEAqE,EAAA9Y,EAAAwW,WAAAlM,GACAA,IAAAtF,EAAAiE,QAAAmM,GACA0D,EAAAlC,SAAA,EACAkC,EAAArW,YACAkS,UAAA3K,EAAAoO,EAAApY,EAAAwK,gBACAoK,WAAAqD,GAAA,EAAAjY,EAAAuK,iBACA2K,aAAAiD,EACAlD,YAAAjV,EAAA+L,MAAAkM,GAAAjY,EAAA4G,MAAAmS,eAAA,EACA5D,aAAAnV,EAAA4C,KAAAH,WACAA,WAAAzC,EAAA4C,KAAAH,WACAmE,MAAA5G,EAAA4G,MACAjE,SAAA,uBACAkS,UAAA7U,EAAA8U,UAAAD,UACAE,WAAA/U,EAAA8U,UAAAC,WACAhH,SAAAzD,GAEAtK,EAAA+V,aAAAC,SACAjI,SAAAzD,EACAuI,YAAA,EACA7I,EAAA8O,EAAArW,WAAAkS,UACA/K,EAAAkP,EAAArW,WAAAmS,WACA9I,OAAAgN,EAAAhN,OACAC,MAAA+M,EAAA/M,MACAnF,MAAA,YACAyB,KAAAyQ,EAAArW,WAAAE,WAEAmW,EAAAtN,QACiBsN,IACjBA,EAAArW,WAAAyS,aAAA,QACAlV,GAAAmR,MAAAoH,MAAAjO,IAEA0O,EAAAlR,MAAAwQ,EAAAhO,EAAA3J,EAAAqJ,EAAA4L,IACA5V,EAAAiZ,kBAAA3O,GAAAsL,EACA5L,GAAAgL,IAAA0C,EAAA,EAAA1X,EAAA4G,MAAA6N,kBACA,EAhjBA,IAAAzU,EAAAyG,cAAA,mBACAzG,EAAAwC,aAAAxC,EAAA8L,QAAA9L,EAAA+L,OAAA,CAGA,GAAA/L,EAAAwC,aAAAmP,EAEA,WADAjL,uBAAA1G,EAAAyV,WAAAjK,KAGA,SAAAxL,EAAA4C,KAAAgU,QAAA,CAIA,GAAAT,GAAA6B,EAAAtW,EAAAkJ,EAAAC,EAAAiO,EAAA1D,EACAQ,EAAAE,EAAA9L,EAAAJ,EAAAlJ,EAAAqJ,EAAAD,EAAAnI,EAAA2I,EAAAgO,EAAAlB,EACApS,EAAAhF,EAAAgF,SACA0S,EAAA,aAAA1X,EAAA4G,MAAAsS,mBACA7B,KACAE,KACAtF,KACA+G,KACAP,EAAA7H,IACArQ,EAAAyE,EAAAiE,OACAkQ,EAAAnZ,EAAAoZ,gBACAC,GAAArZ,EAAAsZ,4BACArB,GAAAjY,EAAAuZ,wBACAvE,GAAAhV,EAAA4G,MAAAoO,UACA1D,IAAA,EACA5P,EAAA8X,YAAAC,MACAzZ,EAAAiZ,qBAEAjU,EAAAiE,OAAAjJ,EAAAiR,OAAAiD,KAAAjL,QACAjJ,EAAA0Z,kBAu3BA1Z,EAAAyK,IAAA4L,OApWA,WACArW,EAAA0U,eACA/S,EAAA3B,EAAA2Z,YACA3Z,EAAA+V,gBACA/V,EAAAwK,gBAAAxK,EAAAwC,YAAAxC,EAAAyC,WAAAkS,UAAA,EACA3U,EAAAuK,iBAAAvK,EAAAwC,YAAAxC,EAAAyC,WAAAmS,WAAA,EACA7K,EAAA/J,EAAA8L,OACAhC,EAAA9J,EAAA+L,SAEA,WACAiC,EAAA,IAAAlE,EAAAC,EAAA,GACA/J,EAAAyK,IAAAsE,OACA/O,EAAAyK,IAAAwC,UAAAjN,EAAA4G,MAAAgT,oBACAxL,EAAA,IAAAtE,EAAAC,MAEA,WACA,GAAA3I,GAAAyY,EAAA/O,KAAAiG,IAAA/L,EAAAiE,OAAAjJ,EAAA8Z,UAGA,KAFAlQ,GAAA5J,EAAA8U,UAAAC,WAAA/U,EAAA6Y,gBAAA7Y,EAAA4G,MAAA6N,gBACAzK,EAAAqP,GACA/O,EAAA,EAA2BA,EAAAuP,IAC3BzY,EAAApB,EAAAiR,OAAAiD,KAAA5J,GACA4N,EAAA9W,EAAAkJ,IAFmCA,GAAA,GAMnCtK,EAAAgC,WAAA+X,oBAGA/P,GAAAhK,EAAA4G,MAAAoT,wBAAAha,EAAA4G,MAAAqT,kBAAA,aAEAja,EAAA8O,mBAAA9E,KAEA,WACAhK,EAAAyK,IAAA4L,OACArW,EAAA8Z,UAAA,IACA9L,EAAA,EAAAhO,EAAA8O,mBAAA9O,EAAA+L,MAAA/L,EAAA8L,OAAA9L,EAAA8O,mBAAA,GACA9O,EAAAyK,IAAAsE,OAEA,IAAAjO,GAAAM,EAAAd,EAAA+X,EAAA1W,EAAAsH,MAKA,KAJAW,GAAA5J,EAAA8U,UAAAC,WAAA/U,EAAA6Y,gBAAA7Y,EAAA4G,MAAA6N,gBACAzU,EAAAgC,WAAAkY,YACAlQ,IAAAhK,EAAA8U,UAAAD,UAAA7U,EAAAma,eAAAna,EAAA4G,MAAA6N,iBAEAnK,EAAAtK,EAAA8Z,UAAA9Z,EAAAoa,eAA8D9P,EAAA/J,EAAO+J,GAAA,EAErE,GADAlJ,EAAApB,EAAAiR,OAAAiD,KAAA5J,IACA4N,EAAA9W,EAAAkJ,GAAA,CACAtK,EAAAqa,kBAAA/P,EACAtK,EAAAsa,kBAAAtQ,CACA,OAGA,GAAAhK,EAAAgC,WAAAuY,WAAA,CAMA,IALAva,EAAAgC,WAAA+V,iBACAnO,GAAAqO,IAEArC,EAAAZ,GAAAhV,EAAA4G,MAAAoO,WACAI,GAAA,EACAtU,EAAAd,EAAA0Y,gBAAkD5X,EAAAuX,IAClD/X,EAAAN,EAAAiR,OAAAC,QAAApQ,MACA8I,GAAAmJ,EAAA/S,EAAAwa,OAAAxV,EAAAiE,OAAAjE,EAAAiE,QAAAtH,EAAArB,KAAAQ,IACAd,EAAA+L,MAAA/L,EAAA8U,UAAAC,aAHyDjU,GAAA,GAOzDkY,EAAAlR,MAAA9H,EAAAwa,OAAAxV,EAAAiE,OAAAjE,EAAAiE,OAAAe,EAAA4L,IAEA5V,EAAAyK,IAAAgN,aAmHA,WACA,GAAAL,EAAA,CACApX,EAAAyK,IAAA4L,MACA,IAAAoE,GAAAza,EAAA6T,WAAAhB,YAAA,EAAA7S,EAAAgR,cAAAhR,EAAA6T,WAAA9F,SAAA,EAAA/N,EAAA8Z,SAKA9L,GAJAyM,EAAAza,EAAA6O,sBAAA,EACA4L,EAAAza,EAAA8O,mBAAA,EACA2L,EAAAza,EAAA+L,MAAA/L,EAAA6O,sBAAA7O,EAAA+L,MACA0O,EAAAza,EAAA8L,OAAA9L,EAAA8O,mBAAA9O,EAAA8L,OACA,GACA9L,EAAAyK,IAAAsE,OACA,QAAA/O,EAAAgC,WAAA0Y,cACA1a,EAAA6T,YAAA7T,EAAA6T,WAAA9F,WAAAqJ,EAAArJ,WACA/N,EAAAyK,IAAAwL,UAAAjW,EAAA4G,MAAA+T,6BACA3a,EAAAyK,IAAAQ,YAAAjL,EAAA4G,MAAAgU,6BACAvM,EAAA,EAAA+I,EAAApN,EAAAhK,EAAA6a,iBAAA5C,GAAAjY,EAAAiZ,kBAAA7B,EAAArJ,aAGA/N,EAAAyK,IAAAwL,UAAAjW,EAAA4G,MAAA+T,6BACA3a,EAAAyK,IAAAQ,YAAAjL,EAAA4G,MAAAgU,6BACAvM,EAAA+I,EAAAxN,EAAAwN,EAAApN,EAAAoN,EAAArL,MAAAqL,EAAAtL,SAEA9L,EAAAyK,IAAAgN,cArXA,WAEA,QAAAqD,GAAAC,EAAAC,GAEA,IADAA,EAAAlQ,KAAAiG,IAAAiK,EAAA3C,GACAvX,EAAAia,EAAmCja,EAAAka,IACnC1a,EAAAN,EAAAiR,OAAAC,QAAApQ,GACAmS,EAAAtR,EAAArB,GACA2S,EAAAG,SACAzS,GACA+U,MAAAzC,EAAAyC,MACA9U,KAAAqS,EAAArS,KACAmL,MAAAkH,EAAAlH,OAAA/L,EAAA4G,MAAAwK,UACAxK,MAAA,mBACAyB,KAAA,SACAwP,MAAA/W,EACAma,MAAA3a,GAEA4a,GAAgDA,iBAAAjI,EAAAyC,OAAAzC,EAAArS,MAChDgJ,GAAAmJ,EAAAmI,GAAA,MAAAva,EAAAL,EAAAQ,GACAd,EAAAgC,WAAAmZ,QACAnb,EAAAyK,IAAAqM,KAAA,kBACA9W,EAAAyK,IAAAwC,UAAA,uBACAqB,EAAA,WAAAhO,EAAA,aAAAQ,EAAA8I,EAAA,WAEAA,EAAA5J,EAAA+L,MAAA/L,EAAA8U,UAAAC,cApB4CjU,GAAA,IAH5C,GAAAH,GAAAL,EAAAQ,EAAAoa,EAAAjI,EAAAmI,EAAA/C,EAAA1W,EAAAsH,MA6BA+P,GAAA5V,QAAA,SAAAiY,EAAAC,GACAtR,EAAAqR,EAAA,GACArG,GAAAqG,EAAA,GACAC,IAAAtb,EAAA8Z,YACA9Z,EAAAyK,IAAA4L,OACArI,EAAA,EAAAhO,EAAA8O,mBAAA9O,EAAA+L,MAAA/L,EAAA8L,OAAA9L,EAAA8O,mBAAA,GACA9O,EAAAyK,IAAAsE,QAEA4I,EAAA0D,EAAA,GAAAA,EAAA,GAAAA,EAAA,MAEArb,EAAAyK,IAAAgN,UACAzX,EAAAgC,WAAAuZ,oBACA3R,GAAA5J,EAAA8U,UAAAC,WAAA/U,EAAA6Y,gBAAA7Y,EAAA4G,MAAA4U,4BACAxb,EAAAgC,WAAA+V,iBACAnO,GAAAqO,IAEAjY,EAAAgC,WAAAwW,uBACA5O,GAAA6O,GAEAzO,EAAA,EAEAgL,GAAAhV,EAAAsZ,4BACAwB,EAAA9a,EAAA0Y,gBAAA1Y,EAAAgR,aAAAqH,GACA+C,EAAAxR,EACAA,EAAA5J,EAAA4G,MAAA4U,4BACAxb,EAAAgC,WAAA+V,iBACAnO,GAAAqO,IAEA6C,EAAA,EAAA9a,EAAAgR,cAEApH,EAAAwR,EACAxR,EAAAE,IACApJ,GACAE,KAAA,GACAmL,MAAA/L,EAAA4G,MAAAmS,eACAnS,MAAA,sBACA6U,oBAAA,EACA3H,uBAAA,EACAzL,KAAA,SACAwP,MAAAlW,EAAAsH,QAEA8J,GAAkC2I,OAAA,KAAW,MAAAhb,GAAA,OAG7CV,EAAAgC,WAAA+V,iBACAjC,GAAsCA,WAAA,IACtClM,EAAA,EACAlJ,GACAE,KAAA,aACAmL,MAAA/L,EAAA4G,MAAAqR,mBACArR,MAAA,aACAyB,KAAA,SACAwP,OAAA,GAEA9E,EAAA+C,GAAA,MAAApV,GAAA,WAmSA,WACA,GAAAib,GAAA3b,EAAA8O,mBAAA9O,EAAA4G,MAAAqT,kBACA2B,EAAA5b,EAAA6O,sBAAA7O,EAAA4G,MAAAoT,wBACA6B,EAAA7b,EAAAoZ,aAAA,sBAAApZ,EAAAoZ,YAAAxS,MACAkV,EAAA9b,EAAAoZ,aAAA,yBAAApZ,EAAAoZ,YAAAxS,KACA5G,GAAAyK,IAAAwL,UAAAjW,EAAA4G,MAAAoT,wBACAha,EAAAgC,WAAAwW,uBACAxY,EAAAyK,IAAAwC,UAAA6O,EAAA9b,EAAA4G,MAAAmV,uBAAA/b,EAAA4G,MAAAoV,kBACAhc,EAAAyK,IAAAQ,YAAA6Q,EAAA9b,EAAA4G,MAAAqV,6BAAAjc,EAAA4G,MAAAsV,wBACA9N,EAAAwN,EAAA,EAAA5b,EAAA4G,MAAAqT,kBAAAja,EAAA8L,QACAuC,EAAAuN,EAAA,EAAA5b,EAAA4G,MAAAqT,kBAAAja,EAAA8L,QACA9L,EAAA+V,aAAAC,SACApM,EAAAgS,EACA5R,EAAA,EACA8B,OAAA9L,EAAA8L,OACAC,MAAA/L,EAAA4G,MAAAqT,kBAAAja,EAAA4G,MAAAoT,wBACApT,MAAA,0BAGA5G,EAAAgC,WAAA+X,oBACA/Z,EAAAyK,IAAAwC,UAAA4O,EAAA7b,EAAA4G,MAAAmV,uBAAA/b,EAAA4G,MAAAoV,kBACAhc,EAAAyK,IAAAQ,YAAA4Q,EAAA7b,EAAA4G,MAAAqV,6BAAAjc,EAAA4G,MAAAsV,wBACA9N,EAAA,EAAAuN,EAAA3b,EAAA+L,MAAA/L,EAAA4G,MAAAqT,mBACA5L,EAAA,EAAAsN,EAAA3b,EAAA+L,MAAA/L,EAAA4G,MAAAqT,mBACAja,EAAA+V,aAAAC,SACApM,EAAA,EACAI,EAAA2R,EACA7P,OAAA9L,EAAA4G,MAAAqT,kBAAAja,EAAA4G,MAAAoT,wBACAjO,MAAA/L,EAAA+L,MACAnF,MAAA,uBAGA5G,EAAAmc,uBACAnc,EAAAyK,IAAAwC,UAAAjN,EAAA4G,MAAAwV,wBACApc,EAAAyK,IAAAQ,YAAAjL,EAAA4G,MAAAyV,8BACA,yBAAArc,EAAAsc,UACAlO,EAAApO,EAAAmc,qBAAAvS,EAAA,EAAA5J,EAAA4G,MAAAqT,kBAAAja,EAAA8L,QACAuC,EAAArO,EAAAmc,qBAAAvS,EAAA,EAAA5J,EAAA4G,MAAAqT,kBAAAja,EAAA8L,UAEAsC,EAAA,EAAApO,EAAAmc,qBAAAnS,EAAAhK,EAAA+L,MAAA/L,EAAA4G,MAAAqT,mBACA5L,EAAA,EAAArO,EAAAmc,qBAAAnS,EAAAhK,EAAA+L,MAAA/L,EAAA4G,MAAAqT,wBA/GA,WAGA,QAAAsC,GAAA7b,GACAiP,EAAAjP,EAAA,GAAAA,EAAA,IAHAV,EAAAyK,IAAAwL,UAAAjW,EAAA4G,MAAA4V,4BACAxc,EAAAyK,IAAAQ,YAAAjL,EAAA4G,MAAA6V,4BAIApF,EAAAhS,OAAA,SAAA3E,GACA,MAAAA,GAAA,GAAAqN,SAAA/N,EAAA8Z,WAAApZ,EAAA,GAAAmS,YAAA7S,EAAAgR,eACiB5N,QAAAmZ,GACjBvc,EAAAyK,IAAA4L,OACAzH,EAAA,GACAyI,EAAAhS,OAAA,SAAA3E,GACA,MAAAA,GAAA,GAAAqN,UAAA/N,EAAA8Z,WAAApZ,EAAA,GAAAmS,aAAA7S,EAAAgR,eACiB5N,QAAAmZ,GACjBvc,EAAAyK,IAAAgN,UACAzX,EAAAyK,IAAA4L,OACAzH,EAAA,GACAyI,EAAAhS,OAAA,SAAA3E,GACA,MAAAA,GAAA,GAAAqN,UAAA/N,EAAA8Z,WAAApZ,EAAA,GAAAmS,YAAA7S,EAAAgR,eACiB5N,QAAAmZ,GACjBvc,EAAAyK,IAAAgN,UACAzX,EAAAyK,IAAA4L,OACAzH,EAAA,GACAyI,EAAAhS,OAAA,SAAA3E,GACA,MAAAA,GAAA,GAAAqN,SAAA/N,EAAA8Z,WAAApZ,EAAA,GAAAmS,aAAA7S,EAAAgR,eACiB5N,QAAAmZ,GACjBvc,EAAAyK,IAAAgN,aAEA,YACAzX,EAAA8R,QAAA9R,EAAAgC,WAAA6P,wBACA7R,EAAAyK,IAAAwL,UAAAjW,EAAA4G,MAAA8V,2BACA1c,EAAAyK,IAAAQ,YAAAjL,EAAA4G,MAAA+V,2BACA3c,EAAAyK,IAAAwC,UAAAjN,EAAA4G,MAAAgW,qBACA3K,EAAA7O,QAAA,SAAA1C,GACAyO,EAAAzO,EAAA,GAAAA,EAAA,GACA,IAAAmc,GAAA7c,EAAAgC,WAAA8a,sBAAA,EACAC,EAAArc,EAAA,GAAAkJ,GAAA,OAAAlJ,EAAA,WAAAA,EAAA,KAAAA,EAAA,GAAAqL,OAAA8Q,EACAG,EAAAtc,EAAA,GAAAsJ,GAAA,OAAAtJ,EAAA,WAAAA,EAAA,GAAAA,EAAA,GAAAoL,OAAA,GAAA+Q,CACA7c,GAAA+V,aAAAC,SACApM,EAAAmT,EACA/S,EAAAgT,EACAlR,OAAA9L,EAAA4G,MAAA0I,oBAAAuN,EACA9Q,MAAA/L,EAAA4G,MAAA0I,oBAAAuN,EACAjW,MAAA,oBAAAlG,EAAA,WAlGA,WACA,GAAAV,EAAAid,cAAA,CACA,GAAA/O,IACApC,OAAA9L,EAAAid,cAAAnR,OACAC,MAAA/L,EAAAid,cAAAlR,MACAnC,EAAA5J,EAAAid,cAAArT,EAAA5J,EAAAid,cAAAC,WAAAtT,EACAI,EAAAhK,EAAAid,cAAAjT,EAAAhK,EAAAid,cAAAC,WAAAlT,GAEAvJ,GACAsL,MAAAjC,EACAgC,OAAA/B,EACAH,EAAA,EACAI,EAAA,EAEAhK,GAAAyK,IAAAwC,UAAAjN,EAAA4G,MAAAuW,6BACAnd,EAAAyK,IAAAwL,UAAAjW,EAAA4G,MAAAwW,yBACApd,EAAAyK,IAAAQ,YAAAjL,EAAA4G,MAAAyW,yBACA,gBAAArd,EAAAsc,UACApO,EAAAnC,MAAAjC,EACAoE,EAAAtE,EAAA,EACAnJ,EAAAsL,MAAAjC,EACArJ,EAAAqL,OAAA9L,EAAAoZ,YAAAtN,OACArL,EAAAuJ,EAAAhK,EAAAoZ,YAAApP,EACAoE,EAAAF,EAAAtE,EAAAsE,EAAAlE,EAAAkE,EAAAnC,MAAAmC,EAAApC,QACAuC,EAAAH,EAAAtE,EAAAsE,EAAAlE,EAAAkE,EAAAnC,MAAAmC,EAAApC,QACA9L,EAAAyK,IAAAwL,UAAAjW,EAAA4G,MAAA0W,8BACAtd,EAAAyK,IAAAQ,YAAAjL,EAAA4G,MAAA2W,8BACAvd,EAAAoZ,YAAArL,WAAA/N,EAAAid,cAAAlP,UACA/N,EAAAoZ,YAAArL,UAAA,GACA/N,EAAAoZ,YAAArL,SAAAxN,GACAoP,EAAAlP,EAAAT,EAAAwd,cAAAlI,aAAAtV,EAAAid,cAAA3H,aAAA,UAEiB,mBAAAtV,EAAAsc,UAAAtc,EAAAid,gBACjB/O,EAAApC,OAAA/B,EACAmE,EAAAlE,EAAA,EACAvJ,EAAAqL,OAAA/B,EACAtJ,EAAAsL,MAAA/L,EAAAoZ,YAAArN,MACAtL,EAAAuJ,EAAA,EACAvJ,EAAAmJ,EAAA5J,EAAAoZ,YAAAxP,EACAwE,EAAAF,EAAAtE,EAAAsE,EAAAlE,EAAAkE,EAAAnC,MAAAmC,EAAApC,QACAuC,EAAAH,EAAAtE,EAAAsE,EAAAlE,EAAAkE,EAAAnC,MAAAmC,EAAApC,QACA9L,EAAAyK,IAAAwL,UAAAjW,EAAA4G,MAAA0W,8BACAtd,EAAAyK,IAAAQ,YAAAjL,EAAA4G,MAAA2W,8BACAvd,EAAAoZ,YAAA/D,kBAAArV,EAAAid,cAAA5H,iBACArV,EAAAoZ,YAAA/D,iBAAA,GACArV,EAAAoZ,YAAA/D,gBAAA1T,EAAAsH,QACA0G,EAAAlP,EAAAT,EAAAwd,cAAA3K,YAAA7S,EAAAid,cAAApK,YAAA,cAxDA,WACA7S,EAAAsX,kBACAtX,EAAAyK,IAAAwL,UAAAjW,EAAA4G,MAAA6W,uBACAzd,EAAAyK,IAAAQ,YAAAjL,EAAA4G,MAAA8W,uBACA1d,EAAAyK,IAAAkT,YAAA3d,EAAA4G,MAAAgX,2BACArG,EAAAnU,QAAA,SAAA1C,GACAiP,EAAAjP,EAAA,GAAAA,EAAA,MAEAV,EAAAyK,IAAAkT,oBA7lBA,WACA,GAAAE,GACAC,EAAA9d,EAAA8U,UAAAiJ,SACAtd,EAAA,EAAAT,EAAA4G,MAAAoX,kBACAhe,GAAAyK,IAAAQ,YAAAjL,EAAA4G,MAAAqX,qBACAje,EAAAyK,IAAAwL,UAAAjW,EAAA4G,MAAAsX,qBACAJ,EAAAK,cAAAvU,EAAAqO,GAAAjY,EAAA4G,MAAAoX,oBACAF,EAAAM,cAAArS,MAAA/L,EAAA8U,UAAAuJ,iBACAre,EAAA8U,UAAAC,WAAA/U,EAAA8U,UAAAwJ,aACAR,EAAAS,YAAAvU,EAAAqP,GAAArZ,EAAA4G,MAAAoX,oBACAF,EAAAU,YAAA1S,OAAA9L,EAAA8U,UAAA2J,kBACAze,EAAA8U,UAAAD,UAAA7U,EAAA8U,UAAA4J,cACA1e,EAAA8U,UAAA6J,uBACA3e,EAAAyK,IAAAwC,UAAAjN,EAAA4G,MAAAgY,yBACAxQ,EAAA0P,EAAAM,cAAAxU,EAAAkU,EAAAM,cAAApU,EAAA8T,EAAAM,cAAArS,MAAAtL,EAAAqd,EAAAM,cAAAtS,QACAuC,EAAAyP,EAAAM,cAAAxU,EAAAkU,EAAAM,cAAApU,EAAA8T,EAAAM,cAAArS,MAAAtL,EAAAqd,EAAAM,cAAAtS,QACA9L,EAAAyK,IAAAwC,UAAAjN,EAAA4G,MAAAiY,kBACA,aAAAnc,KAAAyW,EAAAhX,WACAnC,EAAAyK,IAAAwC,UAAAjN,EAAA4G,MAAAkY,sBAEA9Q,EAAA8P,EAAAK,cAAAvU,EAAAkU,EAAAK,cAAAnU,EACA8T,EAAAK,cAAApS,MAAA+R,EAAAK,cAAArS,OAAA9L,EAAA4G,MAAAmY,0BACA/e,EAAAyK,IAAAS,SACAlL,EAAAyK,IAAA4C,OACAwQ,GAAA,EACA7d,EAAA+V,aAAAC,QAAA8H,EAAAM,eACApe,EAAA+V,aAAAC,QAAA8H,EAAAK,gBAEAne,EAAA8U,UAAAkK,qBACAhf,EAAAyK,IAAAwC,UAAAjN,EAAA4G,MAAAgY,yBACAxQ,EAAA0P,EAAAU,YAAA5U,EAAAkU,EAAAU,YAAAxU,EAAA8T,EAAAU,YAAAzS,MAAA+R,EAAAU,YAAA1S,OAAArL,GACA4N,EAAAyP,EAAAU,YAAA5U,EAAAkU,EAAAU,YAAAxU,EAAA8T,EAAAU,YAAAzS,MAAA+R,EAAAU,YAAA1S,OAAArL,GACAT,EAAAyK,IAAAwC,UAAAjN,EAAA4G,MAAAiY,kBACA,WAAAnc,KAAAyW,EAAAhX,WACAnC,EAAAyK,IAAAwC,UAAAjN,EAAA4G,MAAAkY,sBAEA9Q,EAAA8P,EAAAS,YAAA3U,EAAAkU,EAAAS,YAAAvU,EAAA8T,EAAAS,YAAAxS,MACA+R,EAAAS,YAAAzS,OAAA9L,EAAA4G,MAAAmY,0BACA/e,EAAAyK,IAAAS,SACAlL,EAAAyK,IAAA4C,OACAwQ,GAAA,EACA7d,EAAA+V,aAAAC,QAAA8H,EAAAU,aACAxe,EAAA+V,aAAAC,QAAA8H,EAAAS,cAEAV,IAEA7d,EAAAyK,IAAAQ,YAAAjL,EAAA4G,MAAAqY,2BACAjf,EAAAyK,IAAAwC,UAAAjN,EAAA4G,MAAAsY,+BACAlR,EAAA8P,EAAAqB,OAAAvV,EAAAkU,EAAAqB,OAAAnV,EAAA8T,EAAAqB,OAAApT,MAAA+R,EAAAqB,OAAArT,OAAA,GACA9L,EAAAyK,IAAAS,SACAlL,EAAAyK,IAAA4C,OACArN,EAAA+V,aAAAC,QAAA8H,EAAAqB,YA+0BAhJ,GACAnW,EAAA2G,QAAA,GAlPA,WACA3G,EAAAyK,IAAAwL,UAAAjW,EAAA4G,MAAAwY,gBACApf,EAAAyK,IAAAQ,YAAAjL,EAAA4G,MAAAyY,gBACAhR,EAAA,IAAArO,EAAA+L,MAAA/L,EAAA8L,WA8JA,WACA9L,EAAAyK,IAAA4L,MACA,IAAA1V,EAMA,KALAX,EAAAgC,WAAAsd,iBAAAtf,EAAAgC,WAAAmZ,SACA,IAAA9J,EAAApI,SAAoDoI,EAAA7H,EAAA,EAAA+H,EAAA,MACpDF,EAAAkO,MACAlO,EAAA2E,QAAAwD,YAAAC,MAAA/X,KAEA1B,EAAAgC,WAAAmZ,MAEA,WADAnb,GAAAyK,IAAAgN,SAGAzX,GAAAyK,IAAAqM,KAAA,kBACAnW,KACAA,EAAA6e,MAAAnO,EAAAoO,OAAA,SAAA3H,EAAA5J,GACA,MAAA4J,GAAA5J,GACiB,GAAApD,KAAAiG,IAAAO,EAAAD,EAAApI,SAAAyW,QAAA,GACjB/e,EAAAgf,UAAAtO,EAAA,GAAAqO,QAAA,GACA/e,EAAAif,WAAA7e,OAAA4D,KAAA3E,EAAAqL,gBAAApC,OACAtI,EAAAsc,cAAA,OAAAjd,EAAAid,gBAAkEpK,YAAA,IAAeA,YAAA,SAAA7S,EAAAid,gBAAkDlP,SAAA,IAAYA,SAC/IpN,EAAA6c,cAAA,OAAAxd,EAAAwd,gBAAkE3K,YAAA,IAAeA,YAAA,SAAA7S,EAAAwd,gBAAkDzP,SAAA,IAAYA,SAC/IpN,EAAA6L,MAAAxM,EAAAwM,MACA7L,EAAAkf,WAAA7f,EAAA6f,WACAlf,EAAAmf,WAAA9f,EAAA8f,WACAnf,EAAAof,eAAA/f,EAAA+f,eACApf,EAAAqf,YAAAhgB,EAAAggB,YACArf,EAAAsf,QAAA,QAAAjgB,EAAAkgB,gBAA6DlW,EAAA,IAAKA,EAAA,SAAAhK,EAAAmgB,iBAAyCnW,EAAA,IAAKA,EAChHrJ,EAAAmU,UAAA9U,EAAA8U,UAAAmC,WACAtW,EAAAyf,YAAA,MAAApgB,EAAA0Y,gBAAA,QAAA1Y,EAAAoa,eACAzZ,EAAA0f,YAAA,MAAArgB,EAAA6Y,gBAAA,QAAA7Y,EAAAma,eACAxZ,EAAA2f,aAAA,MAAAtgB,EAAAuK,iBAAA,QAAAvK,EAAAwK,gBACA7J,EAAA4f,WAAA,MAAAvgB,EAAAugB,WAAA3W,EAAA,QAAA5J,EAAAugB,WAAAvW,EACArJ,EAAA6f,eAAA,MAAAxgB,EAAAwgB,eAAA5W,EAAA,QAAA5J,EAAAwgB,eAAAxW,EACArJ,EAAA8f,gBAAA,MAAAzgB,EAAAygB,gBAAA7W,EAAA,QAAA5J,EAAAygB,gBAAAzW,EACArJ,EAAA+f,SAAA,MAAA1gB,EAAA2gB,KAAA,QAAA3gB,EAAA4gB,KACAjgB,EAAAkgB,UAAA,MAAA7gB,EAAA8gB,MAAA,QAAA9gB,EAAA+gB,MACApgB,EAAAqgB,cAAAhhB,EAAAghB,cACArgB,EAAAsgB,oBAAAjhB,EAAAihB,oBACAjhB,EAAAihB,oBAAArX,EAAA,KAAA5J,EAAAihB,oBAAAjX,EAAA,GACArJ,EAAAugB,KAAA,MAAAlhB,EAAA+L,MAAA,QAAA/L,EAAA8L,OACAnL,EAAAwgB,MAAA,MAAAnhB,EAAAmhB,MAAAvX,EAAA,QAAA5J,EAAAmhB,MAAAnX,EACArJ,EAAAygB,MAAAphB,EAAAqhB,WACA,MAAArhB,EAAAqhB,WAAAzX,EAAA,QAAA5J,EAAAqhB,WAAArX,EAAA,GACArJ,EAAAod,SAAA/d,EAAA+V,aAAA9M,OACAtI,EAAA2gB,SAAAthB,EAAAshB,SACA3gB,EAAA2b,SAAAtc,EAAAsc,SACAtc,EAAAoZ,cACAzY,EAAAkS,YAAA7S,EAAAoZ,YAAAvG,YACAlS,EAAAoN,SAAA/N,EAAAoZ,YAAArL,SACApN,EAAA0U,gBAAArV,EAAAoZ,YAAA/D,gBACA1U,EAAA2U,aAAAtV,EAAAoZ,YAAA9D,aACA3U,EAAAwB,QAAAnC,EAAAoZ,YAAAjX,QACAxB,EAAA4gB,YAAAvhB,EAAAoZ,YAAAmI,YACA5gB,EAAAiG,MAAA5G,EAAAoZ,YAAAxS,MACAjG,EAAA0H,KAAArI,EAAAoZ,YAAA/Q,MAEArI,EAAAyK,IAAA+W,UAAA,QACAxhB,EAAAyK,IAAAwC,UAAA,qBACAmB,EAAA,IAAApO,EAAA+L,MAAA/L,EAAA8L,QACA/K,OAAA4D,KAAAhE,GAAAyC,QAAA,SAAAqe,EAAA5J,GACA,GAAApX,GAAAghB,EAAA,KAAA9gB,EAAA8gB,EAEAzhB,GAAAyK,IAAAwC,UAAA,yBACAqB,EAAA7N,EAAAqJ,EAAA,IAAA9J,EAAAgC,WAAAsd,gBAAA,QAFA,GAEAzH,KAEA7X,EAAAyK,IAAAgN,aA1GA,WAUA,QAAAiK,GAAA9gB,EAAAqJ,EAAAC,EAAAC,EAAAC,EAAAC,EAAA0D,GACA,GAAAnC,EACA/B,GAAA8X,EAAAC,EAAAC,EAAAC,EAAA7X,EAAAC,EAAAC,EAAAC,EAAAC,GACArK,EAAAyK,IAAAwC,UAAA7C,EACAgE,EAAA,EAAAyT,EAAAC,EAAA,KAAA/T,EAAA,KACA/N,EAAAyK,IAAAwC,UAAA,UACArB,MAAA9J,KAAAoI,EAAAD,EAAA,GAAAC,GAAAD,EAAA,GACAqE,EAAA1N,EAAA,KAAA2G,MAAAqE,GAAA,EAAAA,GAAA8T,QAAA,MAAAmC,EAAAC,EAAA,MAAA/T,GAhBA,GAAA/N,EAAAgC,WAAAsd,gBAAA,CACA,GAAAqC,GAAA,IACAE,EAAA7hB,EAAA+L,MAAA4V,EAAA3hB,EAAA4G,MAAAmS,eAAA,EAAA/Y,EAAA4G,MAAAsX,qBACA4D,EAAAzI,GACAuI,EAAA,GACA,KAAAnQ,EAAAxI,SAAuDwI,EAAAjI,EAAA,EAAA+H,EAAA,aAAoE,eAC3H,IAAAG,EAAAzI,SAAoDyI,EAAAlI,EAAA,EAAA+H,EAAA,aAAiE,eACrH,IAAAC,EAAAvI,SAA+CuI,EAAAhI,EAAA,EAAA+H,EAAA,MAC/CvR,EAAAyK,IAAAwL,UAAA,GAUAjW,EAAAyK,IAAA+W,UAAA,OACAxhB,EAAAyK,IAAAqM,KAAA,iBACA9W,EAAAyK,IAAAwC,UAAA,yBACAmB,EAAAyT,EAAAC,EAAAH,EAAAC,KACA,gBAAAnQ,EAAA,EAAAzR,EAAA8U,UAAA4J,aAAA,gCACA,eAAAjN,EAAA,EAAAzR,EAAA8U,UAAAwJ,YAAA,+BACA,cAAAjN,MAAAvP,GAAA,oCACA,WAAA0P,MAAA1P,GAAA,qCACA,YAAA4P,EAAA,sCACA,YAAAA,EAAA,oBACAtO,QAAA,SAAA9C,EAAAuX,GACAvX,EAAAwH,KAAA+P,GACA6J,EAAAxf,MAAA,KAAA5B,KAEAN,EAAAyK,IAAAwC,UAAA,2BACAuE,EAAA+N,MACA/N,EAAAwE,QAAAhW,EAAA+V,aAAA9M,QACAwI,EAAA8N,MACA9N,EAAAuE,SAAAhW,EAAA8U,UAAAD,UAAA7U,EAAA8U,UAAAC,aACArD,EAAA6N,MACA7N,EAAAsE,SAAAhW,EAAA4gB,KAAA5gB,EAAA2gB,WAwFA3gB,EAAAyG,cAAA,iBACAzG,EAAAyK,IAAAgN,eAGCvV,MAAAtC,EAAAgC,MAAA/B,EAAAD,QAAAiC,ILisBK,SAAUhC,EAAQD,EAASO,GMl8DjC,GAAAyB,GAAAC,CAEAD,UA2uCCE,MA3uCDD,EAAA,WACA,YACA,iBAAA7B,GACA,GAAA+hB,EACA/hB,GAAAgiB,gBAAA,SAAAhb,GAA6CA,EAAAgb,mBAS7ChiB,EAAAsI,iBAAA,SAAAiM,EAAA0N,GACAjiB,EAAAkiB,OAAA3N,GAAAvU,EAAAkiB,OAAA3N,OACAvU,EAAAkiB,OAAA3N,GAAAyB,QAAAiM,IAUAjiB,EAAAmiB,oBAAA,SAAA5N,EAAA0N,IACAjiB,EAAAkiB,OAAA3N,QAAAnR,QAAA,SAAAgf,EAAAC,GACAJ,IAAAG,GACApiB,EAAAkiB,OAAA3N,GAAA+N,OAAAD,EAAA,MAYAriB,EAAAyG,cAAA,SAAA8N,EAAAvN,GAIA,QAAAub,KACAC,GAAA,EAJAxb,EAAAuN,EAAAlM,KAAAkM,EAAAvN,MACAuN,IAAAlM,MAAAkM,CACA,IAAAiO,EAIA,IAAAxiB,EAAAkiB,OAAA3N,GAMA,MALAvU,GAAAkiB,OAAA3N,GAAAnR,QAAA,SAAA6e,GACAjb,EAAAyD,IAAAzK,EAAAyK,IACAzD,EAAAub,iBACAN,EAAA/f,MAAAlC,EAAA4C,MAAAoE,MAEAwb,GAEAxiB,EAAAyiB,SAAA,WACA,MAAA3X,MAAAiG,IAAA/Q,EAAAgC,WAAA0gB,eAAA7e,OAAA8e,kBAAA,IACA3iB,EAAAyK,IAAAmY,8BACA5iB,EAAAyK,IAAAoY,2BACA7iB,EAAAyK,IAAAqY,0BACA9iB,EAAAyK,IAAAsY,yBACA/iB,EAAAyK,IAAAuY,wBAAA,KAEAhjB,EAAA2G,OAAA,SAAAsc,EAAAC,GAwDA,QAAAC,KACAnjB,EAAAwC,cAGA4gB,GAEAtX,OAAAuX,EAAAC,EAAA,EACAvX,MAAAwX,EAAAtL,EAAAqL,IAEA,kBAAAlgB,QAAA,SAAAogB,IAEA,gBAAA1hB,IAAA+C,QAAA7E,EAAA4G,MAAA4c,IACAxjB,EAAAyjB,gBAAAD,GAAAJ,EAAAI,GAAA,KAEAxjB,EAAAyjB,gBAAAD,GAAAxjB,EAAA4G,MAAA4c,MArEA,GAAAxjB,EAAAkG,OAAA,CACA,GAAA0D,GAgDAwZ,EA/CAxX,GACAhC,EAAA,EACAI,EAAA,EACA8B,OAAA,EACAC,MAAA,EACAnF,MAAA,uBAEAxF,GACAwI,EAAA,EACAI,EAAA,EACA8B,OAAA,EACAC,MAAA,EACAnF,MAAA,yBAEA8c,GACA9Z,EAAA,EACAI,EAAA,EACA8B,OAAA,EACAC,MAAA,EACAnF,MAAA,uBAEA+c,GACA/Z,EAAA,EACAI,EAAA,EACA8B,OAAA,EACAC,MAAA,EACAnF,MAAA,yBAEAgd,GACAha,EAAA,EACAI,EAAA,EACA8B,OAAA,EACAC,MAAA,EACAwH,UAAA,EACAsQ,mBAAA,EACAjd,MAAA,qBAEAnG,EAAA,EAAAT,EAAA4G,MAAAoX,mBACA9P,EAAA,EAAAlO,EAAA4G,MAAAsX,qBACAvd,EAAA,GAAAX,EAAA4G,MAAAoX,mBACA8F,EAAA9jB,EAAA4G,MAAAmS,eAAA,EAAA/Y,EAAA4G,MAAAsX,qBACA6F,EAAA/jB,EAAAyiB,WACAuB,EAAA,aAAAhkB,EAAA4G,MAAAsS,mBAAA,IACAoK,EAAAtjB,EAAA4G,MAAA6N,gBAAAuP,EACAC,EAAAjkB,EAAA4G,MAAA4U,4BAAAwI,EACAX,EAAA,EACAE,EAAA,EAEAhjB,GAAAP,EAAAgF,UAAAiE,OACAoQ,EAAArZ,EAAAsZ,4BACArB,EAAAjY,EAAAuZ,wBACA2K,EAAAlkB,EAAA4G,MAAAoO,UAqBA,IADAhV,EAAAmkB,YAAAva,MACAsZ,EAAA,CAEA,IADAljB,EAAAmkB,YAAAna,KACAJ,EAAA,EAA2BA,EAAArJ,EAAOqJ,GAAA,EAClC5J,EAAAmkB,YAAAna,EAAAJ,GAAAyZ,EACAA,KAAArjB,EAAAmR,MAAA+C,KAAAtK,IAAAsa,IAAAlkB,EAAAmR,MAAAoH,MAAA3O,IAAA,IAAA5J,EAAAwM,OAEAxM,EAAA8Z,UAAAlQ,EAAA5J,EAAAmR,MAAAoH,MAAA3O,IAAA,IAEArJ,GAAA,IACAP,EAAAmkB,YAAAna,EAAAJ,GAAAyZ,GAmIA,MAhIAE,GAAAvjB,EAAA2Z,YAAA8F,OAAA,SAAA2E,EAAAvT,EAAAgC,GACA,GAAAhC,EAAAuC,OAEA,MADApT,GAAAmkB,YAAAva,EAAAiJ,GAAAuR,EACAA,CAEA,IAAAC,GAAAD,GAAApkB,EAAAmR,MAAAD,QAAA2B,IAAAhC,EAAA9E,OAAA/L,EAAA4G,MAAAwK,WAAApR,EAAAwM,KAEA,OADAxM,GAAAmkB,YAAAva,EAAAiJ,GAAAwR,EACAA,GACa,MACbrkB,EAAAgC,WAAAuY,aACA8I,GAAAa,EAAAZ,GAEAH,IACAnjB,EAAAwC,aACAxC,EAAA+L,MAAA/L,EAAAyC,WAAAwS,YACAjV,EAAA8L,OAAA9L,EAAAyC,WAAAyS,cACalV,EAAA8L,SAAA9L,EAAAkG,OAAAgP,cAAAlV,EAAA+L,QAAA/L,EAAAkG,OAAA+O,cACbjV,EAAA8L,OAAA9L,EAAAkG,OAAAgP,aACAlV,EAAA+L,MAAA/L,EAAAkG,OAAA+O,YACAjV,EAAAuK,iBAAAvK,EAAAsC,KAAAiI,kBAAA,EACAvK,EAAAwK,gBAAAxK,EAAAsC,KAAAkI,iBAAA,GAIAxK,EAAA8U,UAAAwP,IAAAjL,EAAA4K,EACAjkB,EAAA8U,UAAAyP,KAAAtM,EAEAjY,EAAA8U,UAAA/I,MAAA/L,EAAA+L,MAAAkM,EAAAqL,EACAtjB,EAAA8U,UAAAhJ,OAAA9L,EAAA8L,OAEA9L,EAAA8U,UAAA6J,qBAAA4E,EAAAvjB,EAAA8U,UAAA/I,MACA/L,EAAA8U,UAAAkK,mBAAAqE,EAAArjB,EAAA8U,UAAAhJ,OAGAoX,IAAAljB,EAAA8U,UAAA6J,sBAAA3e,EAAAwC,cACA,SAAAxC,EAAA4G,MAAAkF,SACA9L,EAAA8L,QAAAgY,GAEAT,GAAAS,EACAX,IACAnjB,EAAA8U,UAAA6J,qBAAA4E,EAAAvjB,EAAA8U,UAAA/I,MACA/L,EAAA8U,UAAAkK,mBAAAqE,EAAArjB,EAAA8U,UAAAhJ,QAEA9L,EAAA8U,UAAAkK,qBAAAhf,EAAAwC,cACA,SAAAxC,EAAA4G,MAAAmF,QACA/L,EAAA+L,OAAA+X,GAGAP,GAAAO,EACAX,IACAnjB,EAAA8U,UAAAkK,mBAAAqE,EAAArjB,EAAA8U,UAAAhJ,OACA9L,EAAA8U,UAAA6J,qBAAA4E,EAAAvjB,EAAA8U,UAAA/I,OAGA/L,EAAA8U,UAAA/I,MAAA/L,EAAA+L,MAAAkM,EAAAqL,GAAAtjB,EAAA8U,UAAAkK,mBAAA8E,EAAA,GACA9jB,EAAA8U,UAAAhJ,OAAA9L,EAAA8L,OAAAuN,EAAA4K,EACAjkB,EAAA8U,UAAAwJ,YAAAiF,EAAAvjB,EAAA8U,UAAA/I,MACAmX,IACAljB,EAAA8U,UAAA4J,aAAA2E,EAAArjB,EAAA8U,UAAAhJ,QAEA9L,EAAA8U,UAAA0P,cAAAxkB,EAAA8U,UAAA/I,MAAAwX,EACAvjB,EAAA8U,UAAAuJ,eAAAre,EAAA8U,UAAA/I,MACA/L,EAAA8U,UAAA0P,cACAxkB,EAAA4G,MAAAmS,eAAA7K,EAAAvN,EAMAX,EAAA8U,UAAA2P,gBAAAzkB,EAAA8U,UAAAhJ,OAAA,IAAAuX,EACArjB,EAAA8U,UAAA2J,gBAAAze,EAAA8U,UAAAhJ,OACA9L,EAAA8U,UAAA2P,eACAzkB,EAAA4G,MAAAmS,eAAA7K,EAAAvN,EACAX,EAAA8U,UAAAuJ,eAAAvT,KAAAX,IAAAnK,EAAA8U,UAAAuJ,eAAAre,EAAA4G,MAAA8d,qBACA1kB,EAAA8U,UAAA2J,gBAAA3T,KAAAX,IAAAnK,EAAA8U,UAAA2J,gBAAAze,EAAA4G,MAAA8d,qBAEAtjB,EAAAwI,GAAAqO,EACA7W,EAAA4I,GAAAhK,EAAA8L,OAAA9L,EAAA4G,MAAAmS,eAAApY,EACAS,EAAA2K,MAAA/L,EAAA+L,MAAA/L,EAAA4G,MAAAmS,eAAAd,EAAAtX,EAAAF,EACAW,EAAA0K,OAAA9L,EAAA4G,MAAAmS,eAAA/Y,EAAA4G,MAAAsX,qBAAAvd,EAEAgjB,EAAA3Z,EAAA5I,EAAA4I,EAAAhK,EAAA4G,MAAAoX,mBACA2F,EAAA5X,MAAA/L,EAAA8U,UAAAuJ,eACAsF,EAAA7X,OAAA9L,EAAA4G,MAAA+d,kBAEA/Y,EAAAhC,GAAA5J,EAAA+L,MAAA/L,EAAA4G,MAAAmS,eAAA/Y,EAAA4G,MAAAsX,qBAAAvd,EACAiL,EAAA5B,GAAAqP,EACAzN,EAAAG,MAAA/L,EAAA4G,MAAAmS,eAAA/Y,EAAA4G,MAAAsX,qBAAAvd,EACAiL,EAAAE,OAAA9L,EAAA8L,OAAAuN,EAAArZ,EAAA4G,MAAAmS,eAAApY,EAAAF,EAEAijB,EAAA9Z,EAAAgC,EAAAhC,EAAA5J,EAAA4G,MAAAoX,mBACA0F,EAAA3X,MAAA/L,EAAA4G,MAAA+d,kBACAjB,EAAA5X,OAAA9L,EAAA8U,UAAA2J,gBAEAmF,EAAAha,EAAAxI,EAAAwI,EAAAxI,EAAA2K,MAAAtL,EACAmjB,EAAA5Z,EAAA4B,EAAA5B,EAAA4B,EAAAE,OAAArL,EACAmjB,EAAA7X,MAAA/L,EAAA4G,MAAAmS,eAAA/Y,EAAA4G,MAAAsX,qBACA0F,EAAA9X,OAAA9L,EAAA4G,MAAAmS,eAAA/Y,EAAA4G,MAAAsX,qBACAle,EAAA8U,UAAAiJ,UACAK,cAAAhd,EACA+c,cAAAwF,EACAnF,YAAA5S,EACA2S,YAAAmF,EACAvE,OAAAyE,GAEA5jB,EAAA8U,UAAA8P,KACAhZ,IACA7B,EAAA3I,GAEApB,EAAA8U,UAAA+P,KACAjZ,EAAA8X,EACA3Z,EAAA4Z,GAGA3jB,EAAA8kB,KAAAha,KAAAX,IAAA,EAAAnK,EAAA0U,YAAAzL,OAAA,EAAAjJ,EAAAgC,WAAA+iB,mBAEA/kB,EAAAwC,cACAxC,EAAAkG,OAAA6F,MAAA/L,EAAA+L,MAAAgY,EACA/jB,EAAAkG,OAAA4F,OAAA9L,EAAA8L,OAAAiY,EACA/jB,EAAAyK,IAAA+B,MAAAuX,MAGA/jB,EAAAglB,kBACAhlB,EAAAilB,QAAA,GACAhC,GACAjjB,EAAAwL,MAAA,GAEAxL,EAAAyG,cAAA,cACA,IAEAzG,EAAAilB,OAAA,SAAAC,GACA,GAAAvjB,GAAA3B,EAAA2Z,YACApZ,GAAAP,EAAAgF,UAAAiE,OACAib,EAAAlkB,EAAA4G,MAAAoO,UAYA,KAVAhV,EAAAoa,eAAAtP,KAAAqa,MAAA5kB,GAAAP,EAAA8U,UAAAD,UAAA7U,EAAA8U,UAAA4J,cAAA,KACA1e,EAAAoa,eAAAtP,KAAAX,IAAAnK,EAAAoa,eAAA,GACApa,EAAAma,eAAAna,EAAAmkB,YAAAna,EAAAhK,EAAAoa,gBAEA,IAAApa,EAAA8U,UAAA4J,eACA1e,EAAAoa,eAAA,GAEApa,EAAAma,eAAA,EACAna,EAAA0Y,gBAAA,EACA1Y,EAAA6Y,gBAAA,EACA7Y,EAAAma,eAAAna,EAAA8U,UAAAD,WAAA7U,EAAAoa,eAAApa,EAAAgF,KAAAiE,QAEAjJ,EAAAoa,gBAAA,EACApa,EAAAma,eAAAna,EAAAmkB,YAAAna,EAAAhK,EAAAoa,eAEA,MAAApa,EAAA6Y,gBAAA7Y,EAAA8U,UAAAC,YAAA/U,EAAA0Y,gBAAA/W,EAAAsH,QACAjJ,EAAA6Y,gBAAA7Y,EAAAmkB,YAAAva,EAAA5J,EAAA0Y,iBACA1Y,EAAA0Y,iBAAA,GAEA1Y,EAAAgF,UAAAiE,OAAA,GAAAtH,EAAAsH,OAAA,IACAjJ,EAAA0Y,gBAAA5N,KAAAX,IAAAnK,EAAA0Y,gBAAA,KACA1Y,EAAA6Y,gBAAA/N,KAAAX,IAAAnK,EAAA6Y,iBACA7Y,EAAAmR,MAAAD,QAAAlR,EAAA0Y,kBAAA/W,EAAA3B,EAAA0Y,iBAAA3M,OAAA/L,EAAA4G,MAAAwK,WAAApR,EAAAwM,MAAA,GACAxM,EAAAoa,eAAAtP,KAAAX,IAAAnK,EAAAoa,eAAA,KACApa,EAAAma,eAAArP,KAAAX,IAAAnK,EAAAma,gBAEAna,EAAAgF,KAAAhF,EAAAoa,iBAAApa,EAAAmR,MAAA+C,KAAAlU,EAAAoa,iBAAA8J,IACAlkB,EAAAmR,MAAAoH,MAAAvY,EAAAoa,iBAAA,GACA8J,GACAlkB,EAAAwM,MAAA,IAEAxM,EAAA8P,iBACAoV,GACAllB,EAAAwL,MAAA,GAIA9E,sBAAA1G,EAAAglB,iBACAhlB,EAAAyG,cAAA,UAA0C6d,IAAAtkB,EAAA8U,UAAAD,UAAA0P,KAAAvkB,EAAA8U,UAAAC,cAE1C/U,EAAAolB,UAAA,SAAApe,EAAAqe,GACA,IAAArlB,EAAAslB,cAAAtlB,EAAAulB,MAAA,CAGAvlB,EAAAmhB,MAAAkE,GAAArlB,EAAAwlB,YAAAxe,EACA,IACA1G,GAEAmlB,EACAC,EAIAC,EARAC,EAAA5e,EAAA6e,SAAA7e,EAAA8e,SAAA9lB,EAAAgC,WAAA+jB,wBAEAC,EAAAhmB,EAAA8Q,mBAGAlH,EAAA5J,EAAAmhB,MAAAvX,EACAI,EAAAhK,EAAAmhB,MAAAnX,EACAlJ,EAAAd,EAAAimB,UAAArc,EAAAI,GAEAuK,GAAsB2R,YAAAlf,EAAA0E,KAAA5K,EAAA8I,IAAAI,KACtBmc,EAAAnmB,EAAAoZ,WAKA,IAJAgN,aAAApmB,EAAAqmB,aACArmB,EAAAsmB,UAAgC1c,IAAAI,QAChChK,EAAAshB,UAAA,IAEAthB,EAAAyG,cAAA,YAAA8N,KAGAzT,GAAAd,EAAAoZ,cACApZ,EAAAumB,mBAAAvmB,EAAAoZ,YAAArL,WAAAjN,EAAAiN,SACA/N,EAAAwmB,sBAAAxmB,EAAAoZ,YAAAvG,cAAA/R,EAAA+R,YACA7S,EAAAymB,oBAAAzmB,EAAAumB,oBAAAvmB,EAAAwmB,uBACA,uBAAApjB,QAAA,SAAAsjB,GACA1mB,EAAA0mB,EAAA,qBACAnS,EAAA7I,KAAAya,EACAnmB,EAAAyG,cAAAigB,EAAA,WAAAnS,GACAA,EAAA7I,KAAA5K,EACAd,EAAAyG,cAAAigB,EAAA,YAAAnS,OAIAvU,EAAAoZ,YAAAtY,EACAd,EAAAshB,UAAA,CAIA,GADAthB,EAAA2T,WACA3T,EAAA2mB,cACA7lB,IACA,IAAAd,EAAA4mB,YAAA/hB,QAAA/D,EAAAqB,WACAnC,EAAA6mB,SAAA/lB,EACAd,EAAAsc,SAAAxb,EAAAygB,YACAvhB,EAAA8mB,OAAAhmB,EAAAqB,QACA,SAAArB,EAAAqB,UACAnC,EAAA8mB,OAAA,UACA9mB,EAAA2T,QAAmC5F,SAAAjN,EAAAiN,SAAA8E,YAAA/R,EAAA+R,eAEnC7S,EAAA+mB,WAAA/mB,EAAAid,gBACA,SAAAnc,EAAAqB,SAAA,CA6CA,GA5CAwjB,GACA/b,EAAAkB,KAAAC,IAAA/K,EAAAgnB,UAAApd,KACAI,EAAAc,KAAAC,IAAA/K,EAAAgnB,UAAAhd,OAEA,IAAAhK,EAAAinB,gBAAApU,aAAA7L,EAAAkgB,WACAlnB,EAAAinB,iBACAlZ,SAAA/N,EAAA6T,WAAA9F,SACA8E,YAAA7S,EAAA6T,WAAAhB,cAGA4S,GACAnB,IAAAxZ,KAAAiG,IAAA/Q,EAAAinB,gBAAAlZ,SAAAjN,EAAAiN,UACAwW,KAAAzZ,KAAAiG,IAAA/Q,EAAAinB,gBAAApU,YAAA/R,EAAA+R,aACAsU,OAAArc,KAAAX,IAAAnK,EAAAinB,gBAAAlZ,SAAAjN,EAAAiN,UACAqZ,MAAAtc,KAAAX,IAAAnK,EAAAinB,gBAAApU,YAAA/R,EAAA+R,eAEA,IAAA7S,EAAAinB,gBAAApU,cACA6S,EAAA1lB,EAAAqnB,qBACA5B,EAAAlB,MAAA,EACAkB,EAAA2B,MAAApB,EAAA/c,OAAA,EACAwc,EAAAnB,IAAAxZ,KAAAiG,IAAA2U,EAAApB,IAAAxjB,EAAAiN,UACA0X,EAAA0B,OAAArc,KAAAX,IAAAub,EAAAyB,OAAArmB,EAAAiN,WAEA/N,EAAAinB,gBAAAlZ,WAAAjN,EAAAiN,UACA/N,EAAAinB,gBAAApU,cAAA/R,EAAA+R,cACA7S,EAAAsnB,iBAAA,IAEAtnB,EAAAymB,qBAAA,IAAAd,EAAA/b,GAAA,IAAA+b,EAAA3b,GAAA,QAAAhK,EAAAgC,WAAA0Y,iBACA,QAAA1a,EAAAgC,WAAA0Y,gBAAA,IAAA1a,EAAAinB,gBAAApU,cACA7S,EAAAumB,mBAEyB,QAAAvmB,EAAAgC,WAAA0Y,gBACzB1a,EAAAunB,wBAAAzlB,KAAAhB,EAAAiN,UAKA/N,EAAA4S,WAAA9R,EAAAiN,UAAA/N,EAAA4S,WAAA9R,EAAAiN,eACA,IAAA/N,EAAA4S,WAAA9R,EAAAiN,UAAAlJ,QAAA/D,EAAA+R,cACA7S,EAAA4S,WAAA9R,EAAAiN,UAAAjG,KAAAhH,EAAA+R,cANA7S,EAAA4S,WAAA9R,EAAAiN,YAAA,IAAA/N,EAAA4S,WAAA9R,EAAAiN,UAAAlJ,QAAA/D,EAAA+R,cACA7S,EAAA4S,WAAA9R,EAAAiN,UAAAuU,OAAAtiB,EAAA4S,WAAA9R,EAAAiN,UAAAlJ,QAAA/D,EAAA+R,aAAA,IAJA7S,EAAAwnB,UAAA1mB,EAAAiN,SAAA6X,EAAA,YAcA5lB,EAAAynB,iBAAAhC,EAAAnB,MAAAtkB,EAAAynB,gBAAAnD,KACAmB,EAAAlB,OAAAvkB,EAAAynB,gBAAAlD,MACAkB,EAAA0B,SAAAnnB,EAAAynB,gBAAAN,QACA1B,EAAA2B,QAAApnB,EAAAynB,gBAAAL,OAAAxB,GAGA,GAFA5lB,EAAA4S,cACA8S,EAAAD,EACA,QAAAzlB,EAAAgC,WAAA0Y,cACA,IAAApa,EAAAolB,EAAApB,IAAiDhkB,GAAAolB,EAAAyB,OAAqB7mB,GAAA,EACtEN,EAAAwnB,UAAAlnB,GAAA,gBAEyB,IAAAmlB,EAAAnB,KACzBtkB,EAAA0nB,WAAAhC,GAAA,EAGA1lB,GAAA2nB,eAAA3gB,EAAA4C,EAAAI,EAAA4b,GAGA5lB,EAAAymB,qBAAA,EACAzmB,EAAAumB,oBAAA,EACAvmB,EAAAwmB,uBAAA,EACAxmB,EAAAwL,MAAA,MAEAxL,EAAA4nB,MAAA,SAAA5gB,EAAAqe,GAQA,QAAAwC,KACA,GAAAtT,IACA3B,WAAA5S,EAAA4S,WACA6U,gBAAAznB,EAAAynB,gBAEA1mB,QAAAC,eAAAuT,EAAA,gBACApT,IAAA,WACA,MAAAnB,GAAA8nB,qBAdA,GAAAxnB,GACAslB,EAAA5e,EAAA6e,SAAA7e,EAAA8e,SAAA9lB,EAAAgC,WAAA+jB,wBACA3W,EAAAiW,GAAArlB,EAAAwlB,YAAAxe,EAEA,IADAhH,EAAAoZ,YAAApZ,EAAAimB,UAAA7W,EAAAxF,EAAAwF,EAAApF,OACAlI,KAAA9B,EAAAoZ,YAAAzC,KAAA,CAiBA,GAHA3W,EAAAulB,OACAvlB,EAAA+nB,UAEA/nB,EAAAsnB,gBAEA,YADAtnB,EAAAsnB,iBAAA,EAIA,IADAhnB,EAAAN,EAAAoZ,aACApZ,EAAAyG,cAAA,SAA6Cyf,YAAAlf,EAAA0E,KAAA1L,EAAAoZ,eAC7CpZ,EAAAshB,SAAA,CAMA,IAHA,yCAAAzc,QAAA7E,EAAAoZ,YAAAxS,QAAAgf,GACA5lB,EAAAgoB,cAAA1nB,EAAAuS,YAAAvS,EAAAyN,UAEA,SAAA/N,EAAAoZ,YAAAjX,QAAA,CACA,kBAAAnC,EAAAoZ,YAAAxS,MAIA,MAHA5G,GAAAioB,YACAjoB,EAAAwL,WACAqc,IAGA,yBAAA7nB,EAAAoZ,YAAAxS,MAAA,CACA,YAAA5G,EAAAgC,WAAAkmB,0BAQA,MAPAloB,GAAA6W,UAAAvW,EAAA2S,OAAArS,KACAZ,EAAAoN,eAAA,QAAApN,EAAAoN,eAAA,aAEApN,EAAAoN,eAAA,MAEApN,EAAAib,MAAA3a,EAAA2S,OAAArS,KAAAZ,EAAAoN,oBACAya,IAGA,eAAA7nB,EAAAgC,WAAAkmB,0BAIA,MAHAloB,GAAAmoB,aAAA7nB,EAAA2S,OAAA4E,MAAA+N,EAAA5e,EAAAkgB,UAAA,GACAW,QACA7nB,GAAAwL,OAKA,GADAxL,EAAA4S,WAAAtS,EAAAyN,UAAA/N,EAAA4S,WAAAtS,EAAAyN,eACA,QAAA/N,EAAAgC,WAAA0Y,eAAA,kBAAA1a,EAAAoZ,YAAAxS,QACA,kBAAA5G,EAAAoZ,YAAAxS,OACA5G,EAAAgC,WAAAsU,MAAAlH,EAAAxF,EAAA,GACAwF,EAAAxF,EAAA5J,EAAAoZ,YAAAxP,EAAA5J,EAAA4G,MAAA8G,eACA1N,EAAA4G,MAAA6G,oBACAzN,EAAA4G,MAAA4G,qBAAAxN,EAAA4G,MAAAwhB,sBACAhZ,EAAApF,EAAAhK,EAAAoZ,YAAApP,EAAAhK,EAAA4G,MAAA+G,gBACA3N,EAAA4G,MAAA2G,mBAAAvN,EAAA4G,MAAAwhB,sBACAhZ,EAAApF,EAAA,EAEA,WADAhK,GAAAqoB,WAAA/nB,EAAAyN,SAIA/G,GAAAkgB,WAAAtB,IACA5lB,EAAAynB,gBAAAznB,EAAAqnB,qBACArnB,EAAA0nB,eAAA5lB,IAAA,IAGA+lB,IACA7nB,EAAAwL,MAAA,MAEAxL,EAAAsoB,iBAAA,SAAAthB,GACA,GAAAoI,GAAAxF,EAAAI,CAUA,OATAoF,GAAApP,EAAAwlB,YAAAxe,GACA4C,EAAA5J,EAAAuoB,sBAAAnZ,EAAAxF,EAAA5J,EAAAgnB,UAAApd,EACAI,EAAAhK,EAAAwoB,uBAAApZ,EAAApF,EAAAhK,EAAAgnB,UAAAhd,EACAJ,EAAA5J,EAAA4G,MAAA6hB,iBACA7e,EAAA5J,EAAA4G,MAAA6hB,gBAEAze,EAAAhK,EAAA4G,MAAA8hB,eACA1e,EAAAhK,EAAA4G,MAAA8hB,eAEA1oB,EAAAyG,cAAA,gBAAoDmD,IAAAI,IAAA2c,aAAA3mB,EAAA2mB,iBACpD3mB,EAAA8U,UAAAC,WAAA/U,EAAA8U,UAAAwJ,YAAAte,EAAAgC,WAAA2mB,kBACA,cAAA3oB,EAAAsc,WACAtc,EAAA2G,QAAA,MACA3G,EAAA8U,UAAAC,YAAAnL,GAEA,cAAA5J,EAAAsc,UACAtc,EAAAmR,MAAAD,QAAA,kBAAAlR,EAAA2mB,aAAA1T,OAAArM,MACA,aAAA5G,EAAA2mB,aAAAtR,iBAAAzL,GACA,mCAAA/E,QAAA7E,EAAA2mB,aAAA1T,OAAArM,QACA5G,EAAA2G,QAAA,UAEA3G,GAAA4oB,oBAGA,cAAA5oB,EAAAsc,UACAtc,EAAA2mB,aAAAvR,QACApV,EAAAmR,MAAAoH,MAAAvY,EAAA2mB,aAAA5Y,UAAA/D,EACiBhK,EAAAgC,WAAA6mB,gBACjB7oB,EAAA4G,MAAAoO,WAAAhL,EAEAhK,EAAAmR,MAAA+C,KAAAlU,EAAA2mB,aAAA5Y,UAAA/D,EAEAhK,EAAAyG,cAAA,aAAiD+N,IAAAxK,QACjDhK,GAAA4oB,yBAGA5oB,EAAA8P,oBAEA9P,EAAA8oB,eAAA,WACA9oB,EAAA2G,SACA7D,SAAA4B,KAAAyd,oBAAA,YAAAniB,EAAAsoB,kBAAA,GACAxlB,SAAA4B,KAAAyd,oBAAA,UAAAniB,EAAA8oB,gBAAA,GACA9oB,EAAA+oB,iBACA/oB,EAAAwL,MAAA,GACAxL,EAAAsnB,iBAAA,GAEAtnB,EAAAgpB,WAAA,SAAAhiB,GACA,GAAAoI,GAAApP,EAAAwlB,YAAAxe,EAUA,OATAhH,GAAAgC,WAAAinB,mBAAAjpB,EAAAihB,sBACA,oDAAApc,QAAA7E,EAAAkpB,mBACAlpB,EAAAihB,oBAAArX,GAAA5C,EAAAmiB,UACAnpB,EAAAihB,oBAAAjX,GAAAhD,EAAAoiB,UACAppB,EAAAihB,oBAAArX,EAAAkB,KAAAiG,IAAA/Q,EAAA+L,MAAA/L,EAAA4G,MAAAmS,eAAAjO,KAAAX,IAAA,EAAAnK,EAAAihB,oBAAArX,IACA5J,EAAAihB,oBAAAjX,EAAAc,KAAAiG,IAAA/Q,EAAA8L,OAAA9L,EAAA4G,MAAAmS,eAAAjO,KAAAX,IAAA,EAAAnK,EAAAihB,oBAAAjX,IACAoF,EAAApP,EAAAihB,qBAEAjhB,EAAAqpB,WAAArpB,EAAAimB,UAAA7W,EAAAxF,EAAAwF,EAAApF,GAAA7H,QACA,0BAAAnC,EAAAqpB,YAAA,0BAAArpB,EAAAkpB,iBACAlpB,EAAAkpB,gBAAA,wBACAlpB,EAAAgnB,UAAA5X,EACApP,EAAAspB,YAAA/E,KAAAvkB,EAAA8U,UAAAC,eACAqR,cAAApmB,EAAAqmB,cAGA,wBAAArmB,EAAAqpB,YAAA,wBAAArpB,EAAAkpB,iBACAlpB,EAAAkpB,gBAAA,sBACAlpB,EAAAgnB,UAAA5X,EACApP,EAAAspB,YAAAhF,IAAAtkB,EAAA8U,UAAAD,cACAuR,cAAApmB,EAAAqmB,eAGA,wBAAArmB,EAAAkpB,iBACA,wBAAAlpB,EAAAqpB,aACArpB,EAAAqpB,WAAA,uBAEA,0BAAArpB,EAAAkpB,iBACA,0BAAAlpB,EAAAqpB,aACArpB,EAAAqpB,WAAA,yBAEAjD,aAAApmB,EAAAqmB,mBACA,IAAArmB,EAAA4mB,YAAA/hB,QAAA7E,EAAAqpB,cAGA,wBAAArpB,EAAAqpB,WACArpB,EAAA8U,UAAAD,UAAA7U,EAAAspB,YAAAhF,KAAAlV,EAAApF,EAAAhK,EAAAgnB,UAAAhd,GACAhK,EAAA8U,UAAA2P,eACa,wBAAAzkB,EAAAqpB,YACbrpB,EAAA8U,UAAAD,WAAA7U,EAAA8kB,KAAA9kB,EAAA4G,MAAAoO,WACAhV,EAAAqmB,YAAAkD,WAAAvpB,EAAAgpB,WAAAhpB,EAAAgC,WAAAwnB,iBAAAxiB,IACa,2BAAAhH,EAAAqpB,aACbrpB,EAAA8U,UAAAD,WAAA7U,EAAA8kB,KAAA9kB,EAAA4G,MAAAoO,WACAhV,EAAAqmB,YAAAkD,WAAAvpB,EAAAgpB,WAAAhpB,EAAAgC,WAAAwnB,iBAAAxiB,IAEA,0BAAAhH,EAAAqpB,WACArpB,EAAA8U,UAAAC,WAAA/U,EAAAspB,YAAA/E,MAAAnV,EAAAxF,EAAA5J,EAAAgnB,UAAApd,GACA5J,EAAA8U,UAAA0P,cACa,4BAAAxkB,EAAAqpB,YACbrpB,EAAA8U,UAAAC,YAAA/U,EAAAgC,WAAAynB,yBACAzpB,EAAAqmB,YAAAkD,WAAAvpB,EAAAgpB,WAAAhpB,EAAAgC,WAAAwnB,iBAAAxiB,IACa,2BAAAhH,EAAAqpB,aACbrpB,EAAA8U,UAAAC,YAAA/U,EAAAgC,WAAAynB,yBACAzpB,EAAAqmB,YAAAkD,WAAAvpB,EAAAgpB,WAAAhpB,EAAAgC,WAAAwnB,iBAAAxiB,QAGAhH,EAAA0pB,eAAA,WACAtD,aAAApmB,EAAAqmB,aACAvjB,SAAA6mB,iBACA7mB,SAAA6mB,kBAEA7mB,SAAA4B,KAAAyd,oBAAA,YAAAniB,EAAAgpB,YAAA,IAEAhpB,EAAA4pB,YAAA,SAAA5iB,GACA,GAAAoI,GAAAxF,EAAAI,CACAoF,GAAApP,EAAAwlB,YAAAxe,GACA4C,EAAAwF,EAAAxF,EAAA5J,EAAAgnB,UAAApd,EACAI,EAAAoF,EAAApF,EAAAhK,EAAAgnB,UAAAhd,GACAhK,EAAAgC,WAAA6nB,uBAAA,mBAAA7pB,EAAAsc,YAGAtc,EAAAgC,WAAA8nB,oBAAA,gBAAA9pB,EAAAsc,YAGAtc,EAAAyG,cAAA,cACAyf,YAAAlf,EACA+iB,OAAA/pB,EAAAinB,gBACAne,OAAA9I,EAAAoZ,YACAkD,SAAAtc,EAAAsc,aAIAxR,KAAAC,IAAAnB,GAAA5J,EAAAgC,WAAAgoB,iBAAAlf,KAAAC,IAAAf,GAAAhK,EAAAgC,WAAAgoB,mBACAhqB,EAAAid,cAAAjd,EAAA2mB,aACA3mB,EAAAwd,cAAAxd,EAAAoZ,YACApZ,EAAAid,cAAAC,YACAtT,IACAI,KAEAhK,EAAA2nB,eAAA3gB,EAAAoI,EAAAxF,EAAAwF,EAAApF,GAAA,MAGAhK,EAAAiqB,gBAAA,SAAAjjB,GACA,GAAAkjB,GACAC,EACAC,GACAC,cAAArqB,EAAAiR,OAAAiD,KACAoW,iBAAAtqB,EAAAiR,OAAAC,SAEA5Q,GACA+pB,cAAA,WACAC,iBAAA,mBACiBtqB,EAAAsc,SACjBxZ,UAAA4B,KAAAyd,oBAAA,YAAAniB,EAAA4pB,aAAA,GACA9mB,SAAA4B,KAAAyd,oBAAA,UAAAniB,EAAAiqB,iBAAA,GACAjqB,EAAAid,eACAjd,EAAAwd,gBACA,mBAAAxd,EAAAsc,UAAAtc,EAAAwd,cAAAnI,iBAAA,GACArV,EAAAwd,cAAAnI,gBAAArV,EAAA2Z,YAAA1Q,QACA,gBAAAjJ,EAAAsc,UAAAtc,EAAAwd,cAAAzP,UAAA,GACA/N,EAAAwd,cAAAzP,SAAA/N,EAAAgF,KAAAiE,SACAjJ,EAAAid,cAAA3c,KAAAN,EAAAwd,cAAAld,KACAN,EAAAyG,cAAA,WACAyf,YAAAlf,EACA+iB,OAAA/pB,EAAAid,cACAnU,OAAA9I,EAAAwd,cACAlB,SAAAtc,EAAAsc,aAEAtc,EAAAsnB,iBAAA,EACA4C,EAAAE,EAAApqB,EAAAsc,UAAAzX,QAAA7E,EAAAid,cAAA3c,IACA6pB,EAAAC,EAAApqB,EAAAsc,UAAAzX,QAAA7E,EAAAwd,cAAAld,IACA8pB,EAAApqB,EAAAsc,UAAAgG,OAAA4H,EAAA,GACAE,EAAApqB,EAAAsc,UAAAgG,OAAA6H,EAAA,EAAAnqB,EAAAid,cAAA3c,IACAN,EAAA+oB,kBAEA/oB,EAAAid,kBAAAnb,GACA9B,EAAAwd,kBAAA1b,GACA9B,EAAAwL,MAAA,IAEAxL,EAAAuqB,SAAA,SAAAvjB,GACA,IAAAhH,EAAAyG,cAAA,UAA8Cyf,YAAAlf,EAAA0E,KAAA1L,EAAAoZ,cAA9C,CACA,GAAAhK,GAAApP,EAAAwlB,YAAAxe,EACAhH,GAAAwX,YACA5N,EAAA5J,EAAAoZ,YAAAvG,YAAA7S,EAAAinB,gBAAApU,YACA7I,EAAAhK,EAAAoZ,YAAArL,SAAA/N,EAAAinB,gBAAAlZ,WAEAjD,KAAAC,IAAAqE,EAAAxF,GAAA5J,EAAAgC,WAAAgoB,iBAAAlf,KAAAC,IAAAqE,EAAApF,GAAAhK,EAAAgC,WAAAgoB,kBACAT,WAAA,WACAvpB,EAAA2nB,eAAA3gB,EAAAoI,EAAAxF,EAAAwF,EAAApF,GAAA,IACiB,KAGjBhK,EAAAwqB,aAAA,SAAAxjB,GACAlE,SAAA4B,KAAAyd,oBAAA,YAAAniB,EAAAuqB,UAAA,GACAznB,SAAA4B,KAAAyd,oBAAA,UAAAniB,EAAAwqB,cAAA,EACA,IAAAtc,GAAAlO,EAAAqnB,oBACA,IAAArnB,EAAAyG,cAAA,WAA+Cyf,YAAAlf,EAAA0E,KAAA1L,EAAAoZ,cAI/C,MAHApZ,GAAAsX,oBAAAxV,GACA9B,EAAAwX,eAAA1V,OACA9B,GAAAwL,MAAA,EAGAxL,GAAAwX,aACAxX,EAAA2K,OAAA3K,EAAAsX,gBAAApJ,EAAAqW,KAAAvkB,EAAAwX,WAAA5N,EAAAsE,EAAAoW,IAAAtkB,EAAAwX,WAAAxN,GACAhK,EAAAyqB,cAAAzqB,EAAAwX,WAAA5N,EAAA5J,EAAAwX,WAAAxN,IAEAhK,EAAAsX,oBAAAxV,GACA9B,EAAAwX,eAAA1V,GACA9B,EAAAwL,MAAA,IAEAxL,EAAA0qB,WAAA,SAAA1jB,GACA,IAAAhH,EAAAyG,cAAA,gBAAoDyf,YAAAlf,EAAA0E,KAAA1L,EAAAoZ,cAApD,CACA,GAAAhK,GAAApP,EAAAwlB,YAAAxe,EACAhH,GAAAsnB,iBAAA,EACAtnB,EAAAmc,qBAAA/M,EACApP,EAAAoZ,iBAAAtX,KAAA9B,EAAAoZ,YAAArL,UAAA,sBAAA/N,EAAAsc,WACAtc,EAAA8U,UAAAD,UAAA,EACA7U,EAAA8Z,UAAA9Z,EAAAoZ,YAAArL,SAAA,GAEA/N,EAAAoZ,iBAAAtX,KAAA9B,EAAAoZ,YAAAvG,aAAA,yBAAA7S,EAAAsc,WACAtc,EAAA8U,UAAAC,WAAA,EACA/U,EAAAgR,aAAAhR,EAAAoZ,YAAAvG,YAAA,IAEA/H,KAAAC,IAAAqE,EAAAxF,GAAA5J,EAAAgC,WAAAgoB,iBAAAlf,KAAAC,IAAAqE,EAAApF,GAAAhK,EAAAgC,WAAAgoB,kBACAT,WAAA,WACAvpB,EAAA2nB,eAAA3gB,EAAAoI,EAAAxF,EAAAwF,EAAApF,GAAA,IACiB,KAGjBhK,EAAA2qB,eAAA,SAAA3jB,GAIA,GAHAlE,SAAA4B,KAAAyd,oBAAA,YAAAniB,EAAA0qB,YAAA,GACA5nB,SAAA4B,KAAAyd,oBAAA,UAAAniB,EAAA2qB,gBAAA,GACA3qB,EAAAmc,yBAAAra,GACA9B,EAAAyG,cAAA,iBAAqDyf,YAAAlf,IAIrD,MAHAhH,GAAA8Z,UAAA9Z,EAAA4qB,gBAAAhhB,EACA5J,EAAAgR,aAAAhR,EAAA4qB,gBAAA5gB,MACAhK,GAAAwL,MAAA,EAGAxL,GAAAwL,MAAA,IAEAxL,EAAA6qB,UAAA,SAAA7jB,EAAAqe,GAEA,GADArlB,EAAA8qB,oBAAA9jB,EAAA8B,QACA9I,EAAAyG,cAAA,aAAiDyf,YAAAlf,EAAA0E,KAAA1L,EAAAoZ,eACjDpZ,EAAAshB,UAGA,IAAAta,EAAA+jB,SAAA/qB,EAAAulB,MAAA,CACA,GAAAK,GAAA5e,EAAA6e,SAAA7e,EAAA8e,QACAkF,EAAA,QAAAtoB,KAAA1C,EAAAsc,UACA2O,EAAA,yCAAAvoB,KAAA1C,EAAAsc,UACA3V,EAAA,UAAAjE,KAAA1C,EAAAsc,SAiBA,IAhBAtc,EAAAgnB,UAAA3B,GAAArlB,EAAAwlB,YAAAxe,GACAhH,EAAAspB,aACA/E,KAAAvkB,EAAA8U,UAAAC,WACAuP,IAAAtkB,EAAA8U,UAAAD,WAEA7U,EAAAinB,gBAAAjnB,EAAAimB,UAAAjmB,EAAAgnB,UAAApd,EAAA5J,EAAAgnB,UAAAhd,GACAhK,EAAAunB,oBAAAvnB,EAAAinB,gBAAAxT,SACAmS,GAAA5e,EAAAkgB,UAAA,yCACAxkB,KAAA1C,EAAAinB,gBAAA9kB,WACAnC,EAAAoZ,aACApZ,EAAAoZ,YAAA5F,gBACAwX,GACAC,GACAtkB,IACA3G,EAAA4S,gBAEA5S,EAAAinB,gBAAAjT,OAAA,CAGA,QAAAhU,EAAA4mB,YAAA/hB,QAAA7E,EAAAinB,gBAAA9kB,SAeA,MAdAnC,GAAAqpB,WAAArpB,EAAAinB,gBAAA9kB,QACAnC,EAAAkpB,gBAAAlpB,EAAAinB,gBAAA9kB,QACAnC,EAAAgpB,WAAAhiB,GACAhH,EAAAgC,WAAAinB,oBACA,oDAAApkB,QAAA7E,EAAAkpB,mBACAlpB,EAAAihB,qBACArX,EAAA5J,EAAAgnB,UAAApd,EACAI,EAAAhK,EAAAgnB,UAAAhd,GAEAhK,EAAAkG,OAAAglB,sBAEApoB,SAAA4B,KAAA4D,iBAAA,YAAAtI,EAAAgpB,YAAA,GACAlmB,SAAA4B,KAAA4D,iBAAA,UAAAtI,EAAA0pB,gBAAA,QACA1pB,EAAAsnB,iBAAA,EAGA,aAAAtnB,EAAAsc,SAQA,MAPAtc,GAAA+mB,WAAA,QACA,QAAA/mB,EAAAgC,WAAA0Y,gBAAA,IAAA1a,EAAAinB,gBAAApU,cACA7S,EAAAinB,gBAAAlZ,UAAA,EACA/N,EAAAwnB,UAAAxnB,EAAAinB,gBAAAlZ,SAAA6X,EAAA,SACiB,QAAA5lB,EAAAgC,WAAA0Y,eACjB1a,EAAAolB,UAAApe,GAIA,IAAAgkB,EAAA,CAIA,GAHAhrB,EAAA2mB,aAAA3mB,EAAA6mB,SACA7mB,EAAAsX,gBAAAtX,EAAA4S,WAAAuY,WACAnrB,EAAAorB,SAAAprB,EAAAinB,gBACAjnB,EAAAyG,cAAA,aAAqDyf,YAAAlf,EAAA0E,KAAA1L,EAAAoZ,cAA2C,MAGhG,OAFAtW,UAAA4B,KAAA4D,iBAAA,YAAAtI,EAAAuqB,UAAA,GACAznB,SAAA4B,KAAA4D,iBAAA,UAAAtI,EAAAwqB,cAAA,GACAxqB,EAAAolB,UAAApe,GAEA,GAAAikB,EAAA,CAMA,GALAjrB,EAAA2mB,aAAA3mB,EAAA6mB,SACA7mB,EAAA4qB,iBACAhhB,EAAA5J,EAAA8Z,UACA9P,EAAAhK,EAAAgR,cAEAhR,EAAAyG,cAAA,mBAA2Dyf,YAAAlf,IAAmB,MAG9E,OAFAlE,UAAA4B,KAAA4D,iBAAA,YAAAtI,EAAA0qB,YAAA,GACA5nB,SAAA4B,KAAA4D,iBAAA,UAAAtI,EAAA2qB,gBAAA,GACA3qB,EAAAolB,UAAApe,GAEA,MAAAL,IACA3G,EAAA2mB,aAAA3mB,EAAA6mB,SACA7mB,EAAA2mB,aAAAvR,QACApV,EAAAwoB,uBAAAxoB,EAAAmR,MAAAoH,MAAAvY,EAAA2mB,aAAA5Y,UAEA/N,EAAAwoB,uBAAAxoB,EAAAmR,MAAA+C,KAAAlU,EAAA2mB,aAAA5Y,WAAA/N,EAAA4G,MAAAoO,WAEAhV,EAAAuoB,sBAAAvoB,EAAAmR,MAAAD,QAAA,kBAAAlR,EAAA2mB,aAAA1T,OAAArM,MACA,aAAA5G,EAAA2mB,aAAAtR,kBAAArV,EAAA2mB,aAAA5a,MACAjJ,SAAA4B,KAAA4D,iBAAA,YAAAtI,EAAAsoB,kBAAA,OACAxlB,UAAA4B,KAAA4D,iBAAA,UAAAtI,EAAA8oB,gBAAA,KAGA,qCAAAjkB,QAAA7E,EAAAsc,WACAtc,EAAA2mB,aAAA3mB,EAAAinB,gBACAnkB,SAAA4B,KAAA4D,iBAAA,YAAAtI,EAAA4pB,aAAA,OACA9mB,UAAA4B,KAAA4D,iBAAA,UAAAtI,EAAAiqB,iBAAA,QAHA,MAOAjqB,EAAAqrB,QAAA,SAAArkB,GACAof,aAAApmB,EAAAqmB,aACArmB,EAAAymB,qBAAA,EACAzmB,EAAAumB,oBAAA,EACAvmB,EAAAwmB,uBAAA,EACAxmB,EAAA+mB,cAAAjlB,GACA9B,EAAA2mB,iBAAA7kB,GACA9B,EAAAinB,oBAAAnlB,GACA9B,EAAAyG,cAAA,WAA+Cyf,YAAAlf,EAAA0E,KAAA1L,EAAAoZ,gBAC/CpZ,EAAAshB,UAAAta,EAAA8B,SAAA9I,EAAAkG,UAGAlG,EAAAoZ,iBAAAtX,KAAA9B,EAAAoZ,YAAAzC,MAGA3W,EAAAslB,aAAAtlB,EAAAulB,QACAvlB,EAAAgnB,WAAAhnB,EAAAsmB,SAAAtmB,EAAAgnB,YACAhnB,EAAAsrB,aAAAC,QAEAvkB,EAAAub,oBAGAviB,EAAAwrB,iBAAA,WACA,GAAA5hB,GACAtJ,EACAqB,EAAA3B,EAAA2Z,YACA7Y,IACA,KAAA8I,EAAA,EAAuBA,EAAAjI,EAAAsH,OAAcW,GAAA,EACrCtJ,EAAAN,EAAAiR,OAAAC,QAAAtH,GACAjI,EAAArB,GAAA8S,aACAtR,KAAAhB,EAAA2qB,QACA3qB,EAAA2qB,MAAA7hB,EACA9I,EAAAyjB,KAAA3a,GAEA9I,EAAA4qB,KAAA9hB,EACAA,EAAA5J,EAAA6T,WAAAhB,iBAAA/Q,KAAAhB,EAAAsmB,QACAtmB,EAAAsmB,MAAAxd,GAEAA,EAAA5J,EAAA6T,WAAAhB,cACA/R,EAAAyjB,KAAA3a,GAOA,YAHA9H,KAAAhB,EAAAsmB,QACAtmB,EAAAsmB,MAAAtmB,EAAA4qB,MAEA5qB,GAEAd,EAAA2rB,QAAA,SAAA3kB,GACA,GAAA1G,GACAiU,EACAqX,EAAA5rB,EAAAwrB,mBACA5hB,EAAA5J,EAAA6T,WAAAhB,YACA7I,EAAAhK,EAAA6T,WAAA9F,SACA6X,EAAA5e,EAAA6e,SAAA7e,EAAA8e,QACA4F,EAAA1rB,EAAAgF,KAAAiE,OAAA,EACAtH,EAAA3B,EAAA2Z,YACAkS,EAAAlqB,EAAAsH,OAAA,CACA,KAAAjJ,EAAAyG,cAAA,WAA+Cyf,YAAAlf,EAAA0E,KAAA1L,EAAAoZ,eAC/CpZ,EAAAshB,SAAA,CAkDA,GA/CAthB,EAAAgC,WAAAuY,aACAmR,GAAA,GAEA,IAAA1kB,EAAA8kB,SACA9kB,EAAAub,iBAGA,KAAAvb,EAAA8kB,SACA9rB,EAAA4S,cACA5S,EAAAwL,MAAA,IAEaoa,GAAA,KAAA5e,EAAA8kB,QACb9rB,EAAAioB,YAEa,KAAAjhB,EAAA8kB,QACb9hB,GAAA,EAEa,KAAAhD,EAAA8kB,QACb9hB,GAAA,EAEa,KAAAhD,EAAA8kB,SAAA9kB,EAAAkgB,UAAA,IAAAlgB,EAAA8kB,QACbliB,EAAAgiB,EAAArH,KAEa,KAAAvd,EAAA8kB,UAAA9kB,EAAAkgB,UAAA,IAAAlgB,EAAA8kB,QACbliB,EAAAgiB,EAAAxE,MAEa,KAAApgB,EAAA8kB,SACb9hB,GAAAhK,EAAA8kB,KACA9d,EAAAub,kBAEa,KAAAvb,EAAA8kB,SACb9hB,GAAAhK,EAAA8kB,KACA9d,EAAAub,kBAEa,KAAAvb,EAAA8kB,SAAAlG,GAAA,KAAA5e,EAAA8kB,QACb9hB,EAAA,EAEa,KAAAhD,EAAA8kB,SAAAlG,GAAA,KAAA5e,EAAA8kB,QACb9hB,EAAAhK,EAAAgF,KAAAiE,OAAA,EAEa2c,GAAA,KAAA5e,EAAA8kB,QACbliB,EAAAgiB,EAAAF,KAEa9F,GAAA,KAAA5e,EAAA8kB,UACbliB,EAAAgiB,EAAAH,OAGA,KAAAzkB,EAAA8kB,QACA,MAAA9rB,GAAA+rB,YAAAniB,EAAAI,EAGA,SAAAhD,EAAA8kB,QAAA,CAKA,GAJA9rB,EAAA4S,cACA5S,EAAA4S,WAAA9H,KAAAX,IAAAH,EAAA,OACAhK,EAAA4S,WAAA9H,KAAAX,IAAAH,EAAA,IAAAlC,KAAA8B,GACA5J,EAAAynB,gBAAAznB,EAAAqnB,qBACA,QAAArnB,EAAAgC,WAAA0Y,cACA,IAAApa,EAAAN,EAAAynB,gBAAAnD,IAAsDhkB,GAAAN,EAAAynB,gBAAAN,OAAkC7mB,GAAA,EACxFN,EAAAwnB,UAAAlnB,EAAAslB,EAAA,aAGA5lB,GAAA0nB,eAAA5lB,GAAA8jB,EAIA,OAFA5e,GAAAub,qBACAviB,GAAAwL,MAAA,GAGA5B,EAAA,IACAA,EAAAgiB,EAAAH,OAEAzhB,EAAA0hB,IACA1hB,EAAA0hB,GAEA1hB,EAAA,IACAA,EAAA,GAEAJ,EAAAiiB,IACAjiB,EAAAgiB,EAAAF,MAIA1kB,EAAAkgB,WAAA,kBAAAriB,QAAAmC,EAAA8kB,WACA9rB,EAAA4S,WAAA9H,KAAAX,IAAAH,EAAA,IAAAhK,EAAA4S,WAAA9H,KAAAX,IAAAH,EAAA,QACAhK,EAAA4S,WAAA9H,KAAAX,IAAAH,EAAA,IAAAlC,KAAA8B,GACA5J,EAAAynB,gBAAAznB,EAAAqnB,qBACArnB,EAAA0nB,eAAA5lB,GAAA8jB,GACA5lB,EAAAwL,MAAA,IAEA5B,IAAA5J,EAAA6T,WAAAhB,aAAA7I,IAAAhK,EAAA6T,WAAA9F,WACA/N,EAAAgsB,eAAApiB,IAAA5J,EAAA6T,WAAAhB,YAAAjJ,MAAA9H,GAAAkI,IAAAhK,EAAA6T,WAAA9F,SAAA/D,MAAAlI,IACA9B,EAAAgoB,cAAApe,EAAAI,IACAhD,EAAAkgB,UAAAlnB,EAAAgC,WAAAiqB,6BACArG,IACA5lB,EAAA4S,eAEA5S,EAAA4S,WAAA5I,GAAAhK,EAAA4S,WAAA5I,OACAhK,EAAA4S,WAAA5I,GAAAlC,KAAA8B,GACA2K,GACA2X,aAAAlsB,EAAA8nB,kBACAlV,WAAA5S,EAAA4S,WACA6U,gBAAAznB,EAAAynB,iBAEA1mB,OAAAC,eAAAuT,EAAA,gBACApT,IAAA,WACA,MAAAnB,GAAA8nB,qBAGA9nB,EAAAyG,cAAA,mBAAA8N,IAEAvU,EAAAwL,MAAA,MAGAxL,EAAAmsB,MAAA,SAAAnlB,GACAhH,EAAAyG,cAAA,SAA6Cyf,YAAAlf,EAAA0E,KAAA1L,EAAAoZ,eAC7CpZ,EAAAshB,UAIAthB,EAAAosB,SAAA,SAAAplB,GACAhH,EAAAshB,UAGAthB,EAAAyG,cAAA,YAAgDyf,YAAAlf,EAAA0E,KAAA1L,EAAAoZ,eAEhDpZ,EAAAqsB,SAAA,SAAArlB,GACAhH,EAAAyG,cAAA,YAAgDyf,YAAAlf,EAAA0E,KAAA1L,EAAAoZ,eAChDpZ,EAAAshB,WAGA,cAAAthB,EAAAoZ,YAAAjX,SACA,qBAAAnC,EAAAoZ,YAAAxS,MACA5G,EAAAssB,kBAAAtsB,EAAAoZ,YAAAnG,OAAArS,MACa,cAAAZ,EAAAoZ,YAAAjX,SACb,eAAAnC,EAAAoZ,YAAAxS,MACA5G,EAAAusB,YACa,0BAAA1nB,QAAA7E,EAAAoZ,YAAAxS,QACb5G,EAAA+rB,YAAA/rB,EAAAoZ,YAAAvG,YAAA7S,EAAAoZ,YAAArL,YAGA/N,EAAAwsB,YAAA,SAAAxlB,GACA,GAAAzG,GACAqP,EACA6c,MAAA3qB,KAAAkF,EAAAylB,OAAAzlB,EAAAkf,YAAAuG,OAAAzlB,EAAAylB,OACAC,MAAA5qB,KAAAkF,EAAA0lB,OAAA1lB,EAAAkf,YAAAwG,OAAA1lB,EAAA0lB,OACAC,MAAA7qB,KAAAkF,EAAA2lB,UAAA3lB,EAAAkf,YAAAyG,UAAA3lB,EAAA2lB,SACA5K,IAGA/hB,EAAAyG,cAAA,SAA6Cyf,YAAAlf,MAG7CA,IAAAkf,aAAAlf,EACAhH,EAAA4sB,oBAAA,EACArsB,EAAAP,EAAA8U,UAAAC,WACAnF,EAAA5P,EAAA8U,UAAAD,UACA7U,EAAAshB,WAGA,IAAAqL,IAEAD,GAAA,KAEA1sB,EAAA8U,UAAAD,UAAA7U,EAAA8U,UAAA4J,cAAAgO,EAAA,GACA1sB,EAAA8U,UAAAC,WAAA/U,EAAA8U,UAAAwJ,aAAAmO,EAAA,GACAzsB,EAAA8U,UAAAD,UAAA,GAAA6X,EAAA,GACA1sB,EAAA8U,UAAAC,WAAA,GAAA0X,EAAA,IACAzlB,EAAAub,eAAAvb,GAEA+a,EAAAwH,WAAA,WACAxH,MAAAjgB,GACA9B,EAAA8U,UAAA+X,SAAAJ,EAAAlsB,EAAAmsB,EAAA9c,IACiB,MAGjB5P,EAAA8sB,UAAA,SAAAC,EAAAnjB,EAAAI,EAAAgjB,GAEA,QAAAC,GAAAC,EAAAC,EAAAC,EAAAlmB,EAAA8lB,EAAAjf,GACA,GAAAzD,GAAA6iB,CAsBA,OArBAzpB,OAAA2pB,QAAAH,IAAA,OAAAA,GAAA,gBAAAA,KACAA,EAAAnsB,OAAA4D,KAAAuoB,GAAAI,IAAA,SAAAC,GACA,MAAAL,GAAAK,MAGA,cAAA7qB,KAAAsqB,KACAE,IAAAM,UAAA,EAAAN,EAAAjkB,OAAA,GAAAwkB,MAAA,cAEA,gBAAAP,KACAA,OAEAQ,EAAA3f,MACAmf,EAAA9pB,QAAA,SAAAuqB,EAAAC,GACA,GAAAC,GAAA3mB,EAAA0mB,EAAAR,GAAAxsB,IACA,QAAAkB,KAAAorB,EAAAU,IAAA,OAAAV,EAAAU,GAEA,YADAtjB,EAAAujB,GAAAV,EAAAU,GAGAH,GAAA3f,GAAAjG,KAAA8lB,EAAAR,GACA9iB,EAAAujB,GAAAX,EAAAU,KAEAtjB,EAxBA,GAAA/J,GAAAoB,EAAA3B,EAAA8Q,mBAAAgd,EAAA9jB,EAAA,EAAA0jB,IA0BA,kBAAAhrB,KAAAsqB,GAAA,CACA,6BAAAtqB,KAAAqqB,EAAAS,UAAA,OAEA,WADAzW,SAAAC,KAAA,+LAIA+V,KAAAS,UAAAT,EAAAloB,QAAA,kBAAAkoB,EAAA9jB,OAAA,IAAAwkB,MAAA,iBAEAV,KAAAU,MAAA,KASA,OAPAltB,GAAAwsB,EAAA9jB,OACA8jB,EAAA3pB,QAAA,SAAAwU,GACAkW,GAAA,CACA,IAAAxtB,GAAAN,EAAAiR,OAAAC,QAAA4c,EACA9tB,GAAAgF,KAAA1E,GAAA2sB,EAAArV,EAAA5X,EAAAgF,KAAA1E,GAAAsJ,EAAAjI,EAAAqrB,EAAA1sB,KAEAN,EAAA4S,WAAA8a,EACAntB,GAEAP,EAAA+tB,MAAA,SAAA/mB,GACA,GAAArG,EAeA,MAPAA,EAAA+C,MAAAlC,UAAA6D,OAAA7E,KAAAwG,EAAAgnB,cAAAC,MAAA,SAAAC,GACA,oBAAAA,EAAA7lB,OACa,IAAA3E,MAAAlC,UAAA6D,OAAA,SAAA6oB,GACb,mBAAAA,EAAA7lB,OACa,IAAA3E,MAAAlC,UAAA6D,OAAA,SAAA6oB,GACb,qBAAAA,EAAA7lB,OACa,IAGb,WADA0O,SAAAC,KAAA,qGAfA,SAAAkX,GACA,GAAA7lB,GAAA6lB,EAAA7lB,IACA6lB,GAAAC,YAAA,SAAAxsB,GACA3B,EAAA8sB,UAAAnrB,EAAA3B,EAAA6T,WAAAhB,YAAA7S,EAAA6T,WAAA9F,SAAA1F,GACArI,EAAAwL,UAcA7K,IAEAX,EAAAouB,IAAA,SAAApnB,GACAhH,EAAAquB,KAAArnB,GACAhH,EAAAsuB,oBAAA,SAAAtpB,EAAA6S,EAAA0W,GACAvpB,EAAA6S,GAAA0W,GAAA,MAGAvuB,EAAAquB,KAAA,SAAArnB,GAWA,QAAAwnB,GAAA5iB,GACA,MAAAA,GAAAnG,QAAA,aAA4CA,QAAA,aAE5C,QAAAgpB,GAAA7iB,GAEA,MADAA,GAAA,OAAAA,OAAA9J,KAAA8J,EAAA,GAAAA,EACA,wBAAAA,GAAA4iB,EAAA5iB,MAAA,QAEA,QAAA8iB,GAAAC,GACA,IAAAhtB,EAAAsH,OAAgC,QAChC,IAAAc,KAiBA,OAhBA4kB,IACA5kB,EAAAjC,KAAA,QAEAnG,EAAAyB,QAAA,SAAAyN,EAAAgC,GACA,IAAAhC,EAAAuC,OAAA,CAEAvC,EAAAlP,EAAA3B,EAAAiR,OAAAC,QAAA2B,GACA,IAAA+b,GAAA/d,EAAAjQ,MAAAiQ,EAAA6E,OAAA,EACAiZ,GACA5kB,EAAAjC,KAAA,OAAA0mB,EAAAI,GAAA,SAEA7kB,EAAAjC,KAAA,IAAA8mB,EAAAnpB,QAAA,mBAIAsE,EAAAjC,KAAA6mB,EAAA,cACA5kB,EAAA8kB,KAAAF,EAAA,QAEA,QAAAG,GAAAxoB,EAAAyoB,EAAAC,EAAAne,GAEA,cAAAvK,IACA,IAAAA,OACAxE,KAAAwE,GACAA,EAAAb,SACAspB,EAAAjnB,KAAA2mB,EAAAnoB,QACA0oB,GAAAlnB,KAAA,IAAAxB,EAAAb,QAAA,qBAGA3D,KAAAwE,GACA0oB,EAAAlnB,KAAAxB,OACAyoB,GAAAjnB,KAAA2mB,EAAAnoB,MAIA0oB,EAAAlnB,KAAA,QACAinB,GAAAjnB,KAAA,oBAvDA,IAAA9H,EAAAyG,cAAA,QAA4Cyf,YAAAlf,KAC5ChH,EAAAshB,UAAAta,EAAAgnB,cAAA,CACA,GAAApe,GACAjP,EAEAsuB,GADAjvB,EAAAgF,SAEAkqB,KACAC,KACAC,EAAApvB,EAAA8nB,kBACAnmB,EAAA3B,EAAA2Z,WAgDAyV,GAAAnmB,OAAA,IACAmmB,EAAAhsB,QAAA,SAAAoR,GACA,GAAAA,EAAA,CACA,GAAAua,MACAC,IACArtB,GAAAyB,QAAA,SAAAyN,EAAAgC,GACAhC,EAAAuC,SAEAvC,EAAAlP,EAAA3B,EAAAiR,OAAAC,QAAA2B,IAEAic,EAAAta,EAAA3D,EAAAjQ,MAAAmuB,EAAAC,EAAAne,MAGAoe,EAAAnnB,KAAAinB,EAAAF,KAAA,KACAK,EAAApnB,KAAAknB,EAAAH,KAAA,SAGAjf,EAAA8e,KAAAS,EAAAlmB,OAAA,WAAAimB,EAAAL,KAAA,MACAluB,EAAA,UAAA+tB,GAAA,UAAAO,EAAAJ,KAAA,6BACA7nB,EAAAgnB,cAAAqB,QAAA,YAAA1uB,GACAqG,EAAAgnB,cAAAqB,QAAA,aAAAzf,GACA5I,EAAAgnB,cAAAqB,QAAA,WAAAzf,GACA5I,EAAAgnB,cAAAqB,QAAA,mBAAAvoB,KAAAwoB,UAAAF,IACApoB,EAAAub,sBAKCrgB,MAAAtC,EAAAgC,MAAA/B,EAAAD,QAAAiC,IN08DK,SAAUhC,EAAQD,EAASO,GOvrGjC,GAAAyB,GAAAC,CAEAD,UAqXCE,MArXDD,EAAA,WACA,YACA,iBAAA7B,GACA,GACAuvB,EACAvvB,GAAAygB,mBACAzgB,EAAAugB,cACAvgB,EAAAwgB,kBACAxgB,EAAAwvB,gBAAA,EACAxvB,EAAAyvB,YAAA,SAAAzoB,EAAA0oB,GACA,GAEAtgB,GAFAQ,EAAA8f,EAAA1oB,EAAAiZ,QAAAyP,GAAA1oB,EAAAiZ,QAAA,GACA0P,EAAA3vB,EAAAkG,OAAA0pB,uBAEA,IAAAhgB,EASA,MARAR,IACAxF,EAAAgG,EAAAigB,QAAAF,EAAApL,KACAva,EAAA4F,EAAAkgB,QAAAH,EAAArL,KAEAtkB,EAAAwC,cACA4M,EAAAxF,GAAA5J,EAAAuK,iBACA6E,EAAApF,GAAAhK,EAAAwK,kBAGAZ,EAAAwF,EAAAxF,EACAI,EAAAoF,EAAApF,EACA2lB,SAIA3vB,EAAA+vB,iBACAC,OAAA,SAAApgB,GAAkC,MAAAA,IAClCqgB,WAAA,SAAArgB,GAAsC,MAAAA,MACtCsgB,YAAA,SAAAtgB,GAAuC,MAAAA,IAAA,EAAAA,IACvCugB,cAAA,SAAAvgB,GAAyC,MAAAA,GAAA,KAAAA,KAAA,IAAAA,KAAA,GACzCwgB,YAAA,SAAAxgB,GAAuC,MAAAA,QACvCygB,aAAA,SAAAzgB,GAAwC,QAAAA,MAAA,GACxC0gB,eAAA,SAAA1gB,GAA0C,MAAAA,GAAA,KAAAA,SAAA,MAAAA,EAAA,MAAAA,EAAA,MAC1C2gB,YAAA,SAAA3gB,GAAuC,MAAAA,UACvC4gB,aAAA,SAAA5gB,GAAwC,YAAAA,SACxC6gB,eAAA,SAAA7gB,GAA0C,MAAAA,GAAA,KAAAA,QAAA,MAAAA,SAC1C8gB,YAAA,SAAA9gB,GAAuC,MAAAA,YACvC+gB,aAAA,SAAA/gB,GAAwC,WAAAA,WACxCghB,eAAA,SAAAhhB,GAA0C,MAAAA,GAAA,MAAAA,UAAA,OAAAA,YAE1C5P,EAAA6wB,OAAA,SAAAjhB,EAAA1B,EAAAxN,EAAAC,GACA,MAAAD,GAAAV,EAAA+vB,gBAAA/vB,EAAAgC,WAAA8uB,mBAAAlhB,EAAAjP,GAAAuN,GAEAlO,EAAA+wB,kBAAA,WACA/wB,EAAA8gB,QAAA9gB,EAAAugB,WAAA3W,EAAA5J,EAAAgxB,gBAAApnB,IAAA5J,EAAAugB,WAAA3Q,EAAA5P,EAAAgxB,gBAAAphB,GACA5P,EAAA+gB,QAAA/gB,EAAAugB,WAAAvW,EAAAhK,EAAAgxB,gBAAAhnB,IAAAhK,EAAAugB,WAAA3Q,EAAA5P,EAAAgxB,gBAAAphB,GACA5P,EAAAgxB,iBACApnB,EAAA5J,EAAAugB,WAAA3W,EACAI,EAAAhK,EAAAugB,WAAAvW,EACA4F,EAAA4J,YAAAC,QAGAzZ,EAAAixB,aAAA,WACAjxB,EAAA2gB,OAAA3gB,EAAAugB,WAAA3W,EAAA5J,EAAAkxB,WAAAtnB,IAAA5J,EAAAugB,WAAA3Q,EAAA5P,EAAAkxB,WAAAthB,GACA5P,EAAA4gB,OAAA5gB,EAAAugB,WAAAvW,EAAAhK,EAAAkxB,WAAAlnB,IAAAhK,EAAAugB,WAAA3Q,EAAA5P,EAAAkxB,WAAAthB,GACA5P,EAAAkxB,YACAtnB,EAAA5J,EAAAugB,WAAA3W,EACAI,EAAAhK,EAAAugB,WAAAvW,EACA4F,EAAA4J,YAAAC,QAGAzZ,EAAAmxB,kBAAA,WACA,IAAAnxB,EAAAkG,SAAAlG,EAAA8U,UAAA+X,SAA2D,MAAAnmB,uBAAA1G,EAAAmxB,kBAC3D,IAEAvhB,GAFAxO,EAAAoY,YAAAC,MACA9Y,EAAAX,EAAAgC,WAAAovB,+BAEAxhB,GAAAxO,EAAApB,EAAAugB,WAAA3Q,EACA5P,EAAAwvB,iBAAA,EACAxvB,EAAAygB,gBAAA7W,EAAA5J,EAAA6wB,OAAAjhB,EAAA5P,EAAAugB,WAAAxL,WAAA/U,EAAAwgB,eAAA5W,EAAAjJ,GACAX,EAAAygB,gBAAAzW,EAAAhK,EAAA6wB,OAAAjhB,EAAA5P,EAAAugB,WAAA1L,UAAA7U,EAAAwgB,eAAAxW,EAAArJ,GACAiP,EAAAjP,GAAAX,EAAAygB,gBAAAzW,IAAAhK,EAAA8U,UAAAD,WACA7U,EAAAygB,gBAAA7W,IAAA5J,EAAA8U,UAAAC,YAAA/U,EAAAqxB,gBAGArxB,EAAA8U,UAAA+X,SAAA7sB,EAAAygB,gBAAA7W,EAAA5J,EAAAygB,gBAAAzW,GACAtD,sBAAA1G,EAAAmxB,qBAEAnxB,EAAAsxB,cAAA,SAAA5lB,GACA1L,EAAA+rB,YAAArgB,EAAAmH,YAAAnH,EAAAqC,WAEA/N,EAAAuxB,UAAA,SAAAvqB,GACA,kBACAwqB,cAAAxxB,EAAAyxB,kBACA,IAAAnxB,GAAA8O,EAAApP,EAAAyvB,YAAAzoB,EACA,IAAA8D,KAAAC,IAAA/K,EAAAugB,WAAA3W,GAAAkB,KAAAC,IAAA/K,EAAAugB,WAAAvW,GAAAhK,EAAAgC,WAAA0vB,cAAA,CAEA,KADApxB,EAAAN,EAAAimB,UAAA7W,EAAAxF,EAAAwF,EAAApF,IAC6B,MAC7B,IAAAhK,EAAA2xB,cAAA3xB,EAAA2xB,aAAA5jB,WAAAzN,EAAAyN,UACA/N,EAAA2xB,aAAA9e,cAAAvS,EAAAuS,YAEA,WADA7S,GAAAsxB,cAAAhxB,EAGAN,GAAAulB,OAAAvlB,EAAAulB,MAAAqM,UACA5xB,EAAA+nB,UAEA/nB,EAAA2xB,aAAArxB,EACAN,EAAA0nB,YACApD,IAAAhkB,EAAAyN,SACAoZ,OAAA7mB,EAAAyN,SACAwW,KAAAjkB,EAAAuS,YACAuU,MAAA9mB,EAAAuS,cAEA7S,EAAAwL,MAAA,MAIAxL,EAAA6xB,WAAA,SAAA7qB,GAKA,GAJAA,EAAA8qB,eAAA,KACA9xB,EAAAqhB,WAAArhB,EAAAyvB,YAAAzoB,GACAhH,EAAA+xB,aAAA/xB,EAAAimB,UAAAjmB,EAAAqhB,WAAAzX,EAAA5J,EAAAqhB,WAAArX,GAAA,KAEAhK,EAAAyG,cAAA,cAAkDyf,YAAAlf,EAAA0E,KAAA1L,EAAA+xB,eAAlD,CASA,GARA/xB,EAAAgyB,qBACAR,cAAAxxB,EAAAyxB,mBACArL,aAAApmB,EAAAiyB,qBACAjyB,EAAAkyB,gBAAAlrB,EACAhH,EAAAqxB,eAAA,EACArxB,EAAAwvB,gBAAA,EACAxvB,EAAAgiB,gBAAAhb,GACAA,EAAAub,iBACA,IAAAvb,EAAAiZ,QAAAhX,QAAAjC,EAAA8qB,eAAA,KAAA9xB,EAAAmyB,YAAA,CA6BA,GA5BAnyB,EAAAggB,YAAA,EACAhgB,EAAAqhB,WAAArhB,EAAAqhB,YAAArhB,EAAAoyB,YACApyB,EAAAqyB,kBACAzoB,EAAA5J,EAAA8U,UAAAC,WACA/K,EAAAhK,EAAA8U,UAAAD,UACAjF,EAAA4J,YAAAC,OAEAzZ,EAAAugB,YACA3W,EAAA,EACAI,EAAA,EACA+K,WAAA/U,EAAA8U,UAAAC,WACAF,UAAA7U,EAAA8U,UAAAD,UACAjF,EAAA5P,EAAAqyB,iBAAAziB,GAEA5P,EAAAkxB,YACAtnB,EAAA5J,EAAAugB,WAAA3W,EACAI,EAAAhK,EAAAugB,WAAAvW,EACA4F,EAAA5P,EAAAugB,WAAA3Q,GAEA5P,EAAAgxB,iBACApnB,EAAA5J,EAAAugB,WAAA3W,EACAI,EAAAhK,EAAAugB,WAAAvW,EACA4F,EAAA5P,EAAAugB,WAAA3Q,GAEA5P,EAAAiyB,oBAAA1I,WAAA,WACAvpB,EAAAsyB,iBAAAtrB,EAAAhH,EAAAqhB,aACiBrhB,EAAAgC,WAAAuwB,wBACjBvyB,EAAAyxB,kBAAAe,YAAAxyB,EAAA+wB,kBArJA,IAsJA/wB,EAAA+xB,eAAA/xB,EAAA+xB,aAAA/d,SAAA,uBAAAnP,QAAA7E,EAAA+xB,aAAA5vB,UAEA,YADAnC,EAAAshB,UAAA,EAIA,IADAthB,EAAAshB,UAAA,EACAthB,EAAA+xB,aAAAjf,SA6BA,MA5BA9S,GAAA+xB,aAAApf,aACA3S,EAAA0nB,YACApD,IAAAtkB,EAAA+xB,aAAAhkB,SACAoZ,OAAAnnB,EAAA+xB,aAAAhkB,SACAwW,KAAA,EACA6C,MAAApnB,EAAA8Q,mBAAA7H,OAAA,IAEAjJ,EAAAwL,MAAA,IACqBxL,EAAA+xB,aAAAve,iBACrB,SAAAxT,EAAAgC,WAAAkmB,4BACAloB,EAAA6W,UAAA7W,EAAA+xB,aAAA9e,OAAArS,KACAZ,EAAAoN,eAAA,QAAApN,EAAAoN,eAAA,aAEApN,EAAAoN,eAAA,MAEApN,EAAAib,MAAAjb,EAAA+xB,aAAA9e,OAAArS,KAAAZ,EAAAoN,iBAEA,WAAApN,EAAAgC,WAAAkmB,4BACAloB,EAAA0nB,YACApD,IAAA,EACA6C,OAAAnnB,EAAAgF,KAAAiE,OAAA,EACAsb,KAAAvkB,EAAA+xB,aAAAlf,YACAuU,MAAApnB,EAAA+xB,aAAAlf,cAEA7S,EAAAwL,MAAA,SAGAxL,GAAAyyB,eAAAzrB,GAIAhH,EAAAmyB,cACArvB,SAAA4B,KAAA4D,iBAAA,YAAAtI,EAAA0yB,WAAyEC,SAAA,IACzE7vB,SAAA4B,KAAA4D,iBAAA,WAAAtI,EAAA4yB,UAAA,GACA9vB,SAAA4B,KAAA4D,iBAAA,cAAAtI,EAAA6yB,aAAA,GACA7yB,EAAAwL,MAAA,MAEAxL,EAAA8yB,YAAA,SAAApnB,EAAAqnB,GACA,OAAAjxB,KAAA4J,EAAAqC,cAAAjM,KAAA4J,EAAAmH,YAAA,CACA7S,EAAAgzB,gBAAA,CACA,IAAAC,GAAAjzB,EAAAqnB,oBACA,yBAAA0L,GACArnB,EAAAqC,UAAAklB,EAAA3O,KACA5Y,EAAAmH,aAAAogB,EAAA7L,OACA6L,EAAA9L,OAAAzb,EAAAqC,SACAklB,EAAA1O,KAAA7Y,EAAAmH,aACa,wBAAAkgB,GACbrnB,EAAAqC,UAAAklB,EAAA9L,QACAzb,EAAAmH,aAAAogB,EAAA7L,OACA6L,EAAA3O,IAAA5Y,EAAAqC,SACAklB,EAAA1O,KAAA7Y,EAAAmH,aACa,wBAAAkgB,GACbrnB,EAAAqC,UAAAklB,EAAA9L,QACAzb,EAAAmH,aAAAogB,EAAA1O,MACA0O,EAAA3O,IAAA5Y,EAAAqC,SACAklB,EAAA7L,MAAA1b,EAAAmH,aACa,wBAAAkgB,GACbrnB,EAAAqC,UAAAklB,EAAA3O,KACA5Y,EAAAmH,aAAAogB,EAAA1O,OACA0O,EAAA9L,OAAAzb,EAAAqC,SACAklB,EAAA7L,MAAA1b,EAAAmH,aAEA,QAAA7S,EAAAgC,WAAA0Y,gBAAA,IAAAhP,EAAAqC,UACAklB,EAAA1O,KAAA,EACA0O,EAAA7L,MAAApnB,EAAA2Z,YAAA1Q,OAAA,GAEAgqB,EAAA1O,KAAAzZ,KAAAX,IAAA,EAAA8oB,EAAA1O,MAEAvkB,EAAA0nB,WAAAuL,GACAjzB,EAAAwL,MAAA,KAEAxL,EAAA0yB,UAAA,SAAA1rB,GAuCA,QAAAksB,KACA,GAAAtpB,GAAA5J,EAAA8U,UAAAC,WACA/K,EAAAhK,EAAA8U,UAAAD,SACAjL,IAAAupB,EAAAnzB,EAAAgC,WAAAynB,yBAAA,EACAzf,GAAAopB,EAAApzB,EAAAgC,WAAAynB,yBAAA,EACAzf,GAAAqpB,EAAArzB,EAAAgC,WAAAynB,yBAAA,EACA7f,GAAA0pB,EAAAtzB,EAAAgC,WAAAynB,yBAAA,EACAzpB,EAAA8U,UAAA+X,SAAAjjB,EAAAI,GACAulB,EAAAhG,WAAA2J,EAAAlzB,EAAAgC,WAAAwnB,kBA9CA,GAAAtF,GAAAqP,EAAAJ,EAAAG,EAAAF,EAAAC,EAAAvP,EAAA0P,EAAAC,CACA,KAAAzzB,EAAAyG,cAAA,mBAAuDyf,YAAAlf,IAAvD,CAWA,GAVAof,aAAAmJ,GACAvoB,EAAA8qB,eAAA,KACA9xB,EAAAkgB,cAAAlgB,EAAAyvB,YAAAzoB,IAEAA,EAAA8qB,eAAA,KACA9xB,EAAAmgB,eAAAngB,EAAAyvB,YAAAzoB,EAAA,IAEA8D,KAAAC,IAAA/K,EAAAugB,WAAA3W,GAAAkB,KAAAC,IAAA/K,EAAAugB,WAAAvW,GAAAhK,EAAAgC,WAAA0vB,eACAtL,aAAApmB,EAAAiyB,qBAEA,IAAAjrB,EAAAiZ,QAAAhX,QAAAjJ,EAAAkgB,eAAAlgB,EAAAmgB,eAcA,MAbAqT,GAAAxzB,EAAAkgB,cAAAlW,EACAypB,EAAAzzB,EAAAmgB,eAAAnW,EACAhK,EAAA+f,iBACA/f,EAAA+f,eAAAjV,KAAAC,IAAAyoB,EAAAC,GACAzzB,EAAA6f,WAAA7f,EAAAwM,OAEAxM,EAAAggB,YAAA,EACAhgB,EAAA8f,WAAA9f,EAAA+f,eAAAjV,KAAAC,IAAAyoB,EAAAC,GACAzzB,EAAAwM,MAAAxM,EAAA6f,WAAA7f,EAAA8f,WAAA9f,EAAAgC,WAAA0xB,qBACA1zB,EAAAwM,MAAA1B,KAAAiG,IAAAjG,KAAAX,IAAAnK,EAAAwM,MAAAxM,EAAAgC,WAAA2xB,cAAA3zB,EAAAgC,WAAA4xB,cACA5zB,EAAAmyB,aAAA,EACAnyB,EAAA2G,QAAA,OACA3G,GAAA4oB,kBAGA,KAAA5oB,EAAAmyB,YAAA,CAqCA,GApCAnyB,EAAAggB,YAAA,EACAhgB,EAAAkgB,cAAAlgB,EAAAkgB,eAAAlgB,EAAAmgB,eACA+D,EAAAlkB,EAAAsZ,4BACAia,EAAAvzB,EAAAuZ,wBACA4Z,EAAAnzB,EAAA+L,MAAA/L,EAAA4G,MAAAmS,eAAA/Y,EAAAkgB,cAAAtW,EAAA5J,EAAAgC,WAAA6xB,oBACAP,EAAAtzB,EAAAkgB,cAAAtW,EAAA2pB,EAAAvzB,EAAAgC,WAAA6xB,oBACAT,EAAApzB,EAAA8L,OAAA9L,EAAA4G,MAAAmS,eAAA/Y,EAAAkgB,cAAAlW,EAAAhK,EAAAgC,WAAA6xB,oBACAR,EAAArzB,EAAAkgB,cAAAlW,EAAAka,EAAAlkB,EAAAgC,WAAA6xB,oBACA/P,EAAA9jB,EAAA4G,MAAAmS,eAWA/R,EAAAgb,kBACAhiB,EAAAugB,YACA3W,EAAA5J,EAAAkgB,cAAAtW,EAAA5J,EAAAqhB,WAAAzX,EACAI,EAAAhK,EAAAkgB,cAAAlW,EAAAhK,EAAAqhB,WAAArX,EACA+K,WAAA/U,EAAA8U,UAAAC,WACAF,UAAA7U,EAAA8U,UAAAD,UACAjF,EAAA4J,YAAAC,OAEAzZ,EAAAoZ,YAAApZ,EAAAimB,UAAAjmB,EAAAkgB,cAAAtW,EAAA5J,EAAAkgB,cAAAlW,GACAhK,EAAAyG,cAAA,aAA6Cyf,YAAAlf,EAAA0E,KAAA1L,EAAAoZ,cAC7CpZ,EAAAixB,eACAjxB,EAAAghB,cAAAxH,YAAAC,MAAAzZ,EAAAqyB,iBAAAziB,EACA5P,EAAAqxB,eAAA,EACArxB,EAAAwvB,gBAAA,EACAxvB,EAAAgzB,iBAAAG,GAAAG,GAAAD,GAAAD,IACAF,IAEA,mBAAAxwB,KAAA1C,EAAA+xB,aAAAnrB,OAGA,YAFA5G,EAAA8U,UAAAD,UAAA7U,EAAA8U,UAAA4J,eACA1e,EAAAkgB,cAAAlW,EAAAka,EAAAJ,IAAA9jB,EAAA8U,UAAAhJ,OAAAgY,EAAAI,IAGA,yBAAAxhB,KAAA1C,EAAA+xB,aAAAnrB,OAGA,YAFA5G,EAAA8U,UAAAC,WAAA/U,EAAA8U,UAAAwJ,cACAte,EAAAkgB,cAAAtW,EAAA2pB,EAAAzP,IAAA9jB,EAAA8U,UAAA/I,MAAA+X,EAAAyP,IAGA,wBAAA7wB,KAAA1C,EAAA+xB,aAAAnrB,OAEA,WADA5G,GAAA8yB,YAAA9yB,EAAAoZ,YAAApZ,EAAA+xB,aAAAnrB,MAGA5G,GAAA8U,UAAA+X,SAAA7sB,EAAAqyB,iBAAAzoB,EAAA5J,EAAAugB,WAAA3W,EACA5J,EAAAqyB,iBAAAroB,EAAAhK,EAAAugB,WAAAvW,GACAhK,EAAAwL,MAAA,MAEAxL,EAAAyyB,eAAA,SAAAzrB,GACAhH,EAAA+f,mBAAAje,GACA9B,EAAAgzB,gBAAA,EACAxB,cAAAxxB,EAAAuvB,oBACAiC,cAAAxxB,EAAAiyB,qBACAT,cAAAxxB,EAAAyxB,mBACAzqB,EAAAgb,kBACAlf,SAAA4B,KAAAyd,oBAAA,YAAAniB,EAAA0yB,WAA4EC,SAAA,IAC5E7vB,SAAA4B,KAAAyd,oBAAA,WAAAniB,EAAA4yB,UAAA,GACA9vB,SAAA4B,KAAAyd,oBAAA,cAAAniB,EAAA6yB,aAAA,IAEA7yB,EAAA4yB,SAAA,SAAA5rB,GACA,IAAAhH,EAAAyG,cAAA,YAAgDyf,YAAAlf,EAAA0E,KAAA1L,EAAAoZ,cAAhD,CAQA,GAPApZ,EAAA+f,mBAAAje,GACAkF,EAAA8qB,eAAA,KACA9xB,EAAAkgB,kBAAApe,IAEAkF,EAAA8qB,eAAA,KACA9xB,EAAAmgB,mBAAAre,IAEA9B,EAAAmyB,YAIA,YAHA,IAAAnrB,EAAAiZ,QAAAhX,SACAjJ,EAAAmyB,aAAA,GAIA,IAAA2B,GAAAhpB,KAAAC,IAAA/K,EAAAugB,WAAA3W,GAAAkB,KAAAC,IAAA/K,EAAAugB,WAAAvW,GAAAhK,EAAAgC,WAAA0vB,aACAnqB,OAAAvH,EAAA2gB,QACA3gB,EAAA2gB,KAAA,GAEApZ,MAAAvH,EAAA4gB,QACA5gB,EAAA4gB,KAAA,GAEArZ,MAAAvH,EAAA8gB,SACA9gB,EAAA8gB,MAAA,GAEAvZ,MAAAvH,EAAA+gB,SACA/gB,EAAA+gB,MAAA,GAEA/gB,EAAAwgB,eAAA5W,EAAA5J,EAAA2gB,KAAA3gB,EAAAgC,WAAA+xB,yBACA/zB,EAAAwgB,eAAAxW,EAAAhK,EAAA4gB,KAAA5gB,EAAAgC,WAAA+xB,yBACA/zB,EAAA+wB,oBACA+C,IAAA9zB,EAAAslB,YACAtlB,EAAAuxB,UAAAvxB,EAAAkyB,mBACa,IAAAlyB,EAAAwvB,mBACb1kB,KAAAC,IAAA/K,EAAA8gB,OAAA9gB,EAAAgC,WAAAgyB,6BACAlpB,KAAAC,IAAA/K,EAAA+gB,OAAA/gB,EAAAgC,WAAAgyB,8BACA,WAAAtxB,KAAA1C,EAAA+xB,aAAAnrB,QACAktB,IACA9zB,EAAAqxB,eAAA,EACArxB,EAAAmxB,qBAEAnxB,EAAAyyB,eAAAzrB,KAEAhH,EAAA6yB,YAAA,SAAA7rB,GACAhH,EAAAyG,cAAA,eAAmDyf,YAAAlf,EAAA0E,KAAA1L,EAAAoZ,eACnDpZ,EAAAyyB,eAAAzrB,MAGC9E,MAAAtC,EAAAgC,MAAA/B,EAAAD,QAAAiC,IP+rGK,SAAUhC,EAAQD,EAASO,GQtjHjC,GAAAyB,GAAAC,CAEAD,UAypCCE,MAzpCDD,EAAA,WACA,YACA,iBAAA7B,EAAAi0B,GA6HA,QAAAzqB,GAAAC,EAAAC,GACA,GAAAE,GAAAtJ,IACA,KAAAsJ,EAAAH,EAAyBG,GAAAF,EAAWE,GAAA,EACpCtJ,EAAAsJ,IAEA,OAAAtJ,GAjIAN,EAAAwM,MAAA,EACAxM,EAAAiR,QACAiD,QACAhD,YAEAlR,EAAAqT,sBACArT,EAAAk0B,sBACAl0B,EAAAiZ,qBACAjZ,EAAAshB,UAAA,EACAthB,EAAA6T,YACAhB,YAAA,EACA9E,SAAA,GAEA/N,EAAAkJ,UAAA,GACAlJ,EAAAm0B,YAAA,iBACAn0B,EAAAo0B,sBAAA,wCACAp0B,EAAAq0B,4BAAA,qCACAr0B,EAAAs0B,SAAA,gCACAt0B,EAAA6W,QAAA,KACA7W,EAAAoN,eAAA,MACApN,EAAAkX,iBACAlX,EAAAu0B,WACAv0B,EAAA8Z,UAAA,EACA9Z,EAAAgR,aAAA,EACAhR,EAAA8P,iBACA9P,EAAAmkB,aAA4Bva,KAAAI,MAC5BhK,EAAA8U,aACA9U,EAAA0U,eACA1U,EAAAmR,OACA+C,QACAhD,WACAqH,UAEAvY,EAAAw0B,cAAA,WACA,UAEAx0B,EAAA4S,cACA5S,EAAA2T,UACA3T,EAAAgC,cACAhC,EAAA4G,SACA5G,EAAAoU,cACApU,EAAAy0B,WACAz0B,EAAA00B,WACA10B,EAAA20B,gBACA30B,EAAAkiB,UACAliB,EAAA40B,WACA50B,EAAAoa,eAAA,EACApa,EAAAma,eAAA,EACAna,EAAA0Y,gBAAA,EACA1Y,EAAA6Y,gBAAA,EACA7Y,EAAAwW,cACAxW,EAAA8N,gBACA9N,EAAA4mB,aACA,sBACA,sBACA,yBACA,wBACA,0BACA,0BAEA5mB,EAAA60B,qBACA70B,EAAA80B,YAAA,mEACA,8FACA,uFACA,uFACA,+FACA,oFACA,sFACA,2DACA90B,EAAAmhB,OAAsBvX,EAAA,EAAAI,EAAA,GACtBhK,EAAA8nB,gBAAA,SAAAiN,GACA,GAAAp0B,MAAAgB,EAAA3B,EAAA2Z,YAAApZ,EAAAP,EAAAgF,KAAAiE,MACA,YAAA1I,MACAP,EAAA4S,WAAAxP,QAAA,SAAAoR,EAAAqD,GACA,GAAArD,GACAqD,IAAAtX,EAAA,CACA,OAAAiU,EAAAvL,OAEA,YADAtI,EAAAkX,GAAA,KAGAlX,GAAAkX,MACArD,EAAApR,QAAA,SAAA4xB,GACA,GAAAC,IACA,IAAAD,GAAArzB,EAAAqzB,KACAC,EAAAj1B,EAAAiR,OAAAC,QAAA8jB,IACAD,GAAApzB,EAAAszB,GAAA7hB,QACApT,EAAAgF,KAAA6S,KACAlX,EAAAkX,GAAAlW,EAAAszB,GAAAr0B,MAAAZ,EAAAgF,KAAA6S,GAAAlW,EAAAszB,GAAAr0B,aAIAD,IAEAX,EAAAsZ,0BAAA,WACA,MAAAtZ,GAAAgC,WAAAuZ,mBACAvb,EAAAmR,MAAA+C,MAAA,IAAAlU,EAAA4G,MAAAyS,wBAAArZ,EAAAwM,MADqD,GAGrDxM,EAAAuZ,sBAAA,WACA,MAAAvZ,GAAAgC,WAAA+V,gBACA/X,EAAAmR,MAAAD,SAAA,IAAAlR,EAAA4G,MAAAqR,oBAAAjY,EAAAwM,MADkD,GAGlDxM,EAAA+oB,eAAA,WACA,GAAA/oB,EAAAgC,WAAAyU,gBAAAzW,EAAAgC,WAAApB,KAAA,CACA,GAAAs0B,KACAl1B,GAAA2Z,YAAAvW,QAAA,SAAAyN,GACAqkB,EAAArkB,EAAAjQ,OAAAiQ,EAAAuC,SAEA+hB,aAAAC,QAAAp1B,EAAAm0B,YAAA,IAAAn0B,EAAAgC,WAAApB,KAAAkG,KAAAwoB,WACAne,OACA+C,KAAAlU,EAAAmR,MAAA+C,KACAhD,QAAAlR,EAAAmR,MAAAD,SAEAD,QACAiD,KAAAlU,EAAAiR,OAAAiD,KACAhD,QAAAlR,EAAAiR,OAAAC,SAEA2F,QAAA7W,EAAA6W,QACAzJ,eAAApN,EAAAoN,eACA8nB,kBAGAl1B,EAAA2Z,UAAA,WACA,MAAA3Z,GAAAkH,QAAAlH,EAAAq1B,gBASAr1B,EAAAs1B,mBAAA,WACA,GAAA3zB,GAAA3B,EAAA2Z,WACA3Z,GAAAiR,OAAAC,QAAA1H,EAAA,EAAA7H,EAAAsH,OAAA,IAEAjJ,EAAA0Z,gBAAA,WACA1Z,EAAAiR,OAAAiD,KAAA1K,EAAA,EAAAxJ,EAAAgF,KAAAiE,OAAA,IAEAjJ,EAAA8Q,iBAAA,WACA,MAAA9Q,GAAA2Z,YAAAtU,OAAA,SAAA2vB,GACA,OAAAA,EAAA5hB,UAGApT,EAAAu1B,kBAAA,SAAA/gB,EAAAvB,GACA,GAAAtS,GAAAsS,EAAAuiB,cAAA,EACA,mBAAA70B,KACAA,IAAAuB,MAAAlC,EAAA4C,MAAAqQ,KAEAuB,EAAAvB,EAAArS,MAAAD,GAEAX,EAAAy1B,iBAAA,WACAz1B,EAAAwa,UACAxa,EAAA2Z,YAAAvW,QAAA,SAAA6P,GACAjT,EAAAu1B,kBAAAv1B,EAAAwa,OAAAvH,MAGAjT,EAAA01B,kBAAA,SAAAjU,GAEA,IADA,GAAArgB,GAAA,EACApB,EAAA20B,aAAAlT,IACArgB,GAAA,EACAqgB,GAAArgB,CAEA,OAAAqgB,IAEAzhB,EAAAqF,OAAA,SAAAgD,GACA,GAAA8L,GAAAnU,EAAAu0B,QAAAlsB,EAKA,OAJA8L,QAAArS,KAAAuG,IACA0O,QAAAC,KAAA,mEAAA3O,GACA8L,EAAAnU,EAAAu0B,QAAA7sB,QAEAyM,GAEAnU,EAAA21B,qBAAA,SAAAC,EAAA5wB,GACA,GAAA4K,GAAAhG,EAAArJ,EAAAyE,EAAAiE,MACA,KAAAW,EAAA,EAAuBA,EAAArJ,EAAOqJ,GAAA,EAC9B,OAAA9H,KAAAkD,EAAA4E,IAAA,OAAA5E,EAAA4E,KAAA,cAAA9H,IAAA+C,QAAAG,EAAA4E,GAAAgsB,IAEA,MADAhmB,SAAA5K,GAAA4E,GACA,WAAAgG,EAAA,SAAAA,CAGA,iBAEA5P,EAAA61B,eAAA,WACA90B,OAAA4D,KAAA3E,EAAAwW,YAAApT,QAAA,SAAA0yB,GACA91B,EAAAwW,WAAAsf,GAAAtqB,UAGAxL,EAAA4oB,iBAAA,WACA7nB,OAAA4D,KAAA3E,EAAAwW,YAAApT,QAAA,SAAA0yB,GACA91B,EAAAwW,WAAAsf,GAAAnvB,YAGA3G,EAAA2nB,eAAA,SAAA3gB,EAAA4C,EAAAI,EAAA4b,GACA,GAAAmQ,GACA9d,EAAAjY,EAAAuZ,wBACAF,EAAArZ,EAAAsZ,2BACA1P,GAAA5J,EAAA+L,MAAA/L,EAAAgC,WAAA6xB,qBAAAjqB,EAAA5J,EAAA+L,QACA/L,EAAA8U,UAAAC,YAAA/U,EAAAgC,WAAAynB,yBACAsM,GAAA,GAEA/rB,EAAAhK,EAAA8L,OAAA9L,EAAAgC,WAAA6xB,qBAAA7pB,EAAAhK,EAAA8L,SACA9L,EAAA8U,UAAAD,WAAA7U,EAAAgC,WAAAynB,yBACAsM,GAAA,GAEAnsB,EAAA5J,EAAAgC,WAAA6xB,oBAAA5b,EAAA,IACAjY,EAAA8U,UAAAC,YAAA/U,EAAAgC,WAAAynB,yBACAsM,GAAA,GAEA/rB,EAAAhK,EAAAgC,WAAA6xB,oBAAAxa,EAAA,IACArZ,EAAA8U,UAAAD,WAAA7U,EAAAgC,WAAAynB,yBACAsM,GAAA,GAEAA,IAAAnQ,GAAA5lB,EAAAoZ,cAAA,IAAApZ,EAAAoZ,YAAAvG,cACA7S,EAAAqmB,YAAAkD,WAAAvpB,EAAAolB,UAAAplB,EAAAgC,WAAAwnB,iBAAAxiB,KAGAhH,EAAAg2B,uBAAA,WACAh2B,EAAAgF,KAAAhF,EAAAi2B,aAAA5wB,OAAA,SAAAmP,GACA,YAGAxU,EAAAk2B,eAAA,SAAAx1B,EAAAiB,GACA,IAAAjB,EAAAE,KACA,SAAAqG,OAAA,yCAEA,IAAAtF,EAAA0D,OAAA,SAAA/E,GAAuC,MAAAA,GAAAM,OAAAF,EAAAE,OAA4BqI,OAAA,EACnE,SAAAhC,OAAA,0BACAvG,EAAAE,KAAA,6CAEA,WAEAZ,EAAAm2B,YAAA,SAAAC,EAAAC,EAAA5U,EAAApb,GACA+vB,EAAA3U,OAAA3f,KAAAu0B,EAAA5U,GAAApb,EAAAgwB,EAAA5U,IAEAzhB,EAAAs2B,cAAA,WACAt2B,EAAA+B,SAAAC,WAAAoB,QAAA,SAAA9C,GACAN,EAAAm2B,YAAAn2B,EAAAgC,WAAAhC,EAAAsC,KAAAhC,EAAA,GAAAA,EAAA,OAGAN,EAAAu2B,SAAA,WACAv2B,EAAA+B,SAAAE,OAAAmB,QAAA,SAAA9C,GACAN,EAAAm2B,YAAAn2B,EAAA4G,MAAA5G,EAAAsC,KAAAsE,UAAkEtG,EAAA,GAAAA,EAAA,OAGlEN,EAAAusB,SAAA,SAAAgC,GACAvuB,EAAA8Q,mBAAA1N,QAAA,SAAA4xB,EAAApH,GACAoH,EAAAp0B,OAAA2tB,OAAAzsB,KAAAysB,IACAvuB,EAAAmR,MAAAD,QAAA0c,GACA9iB,KAAAX,IAAAnK,EAAAw2B,wBAAAxB,EAAAp0B,MAAAZ,EAAA4G,MAAA6hB,mBAGAzoB,EAAAmR,MAAAD,SAAA,GAAAlR,EAAAw2B,wBAAA,eAEAx2B,EAAAy2B,QAAA,YACAz2B,EAAAwC,aAAAxC,EAAAkG,QAAAlG,EAAAkG,OAAAzD,YACAzC,EAAAkG,OAAAzD,WAAAi0B,YAAA12B,EAAAkG,QAEAlG,EAAA22B,YAAAxU,oBAAA,UAAAniB,EAAAqrB,SAAA,GACArrB,EAAA22B,YAAAxU,oBAAA,YAAAniB,EAAA6qB,WAAA,GACA7qB,EAAA22B,YAAAxU,oBAAA,WAAAniB,EAAAqsB,UAAA,GACArsB,EAAA22B,YAAAxU,oBAAA,QAAAniB,EAAA4nB,OAAA,GACA5nB,EAAA22B,YAAAxU,oBAAA,YAAAniB,EAAAolB,WACAplB,EAAA22B,YAAAxU,oBAAA,QAAAniB,EAAAwsB,aAAA,GACAxsB,EAAAkG,OAAAic,oBAAA,cAAAniB,EAAA42B,aAAA,GACA52B,EAAAkG,OAAAic,oBAAA,OAAAniB,EAAAquB,MACAruB,EAAAsrB,aAAAnJ,oBAAA,WAAAniB,EAAAosB,UAAA,GACApsB,EAAAsrB,aAAAnJ,oBAAA,QAAAniB,EAAAmsB,OAAA,GACAnsB,EAAAsrB,aAAAnJ,oBAAA,UAAAniB,EAAA2rB,SAAA,GACA9nB,OAAAse,oBAAA,SAAAniB,EAAA2G,QACA3G,EAAAuI,UAAAvI,EAAAuI,SAAAsuB,YACA72B,EAAAuI,SAAAsuB,cAGA72B,EAAA82B,sBAAA,WACA,GAAAn1B,EACA3B,GAAA+2B,qBACA/2B,EAAAg3B,gBACA,gBAAAh3B,GAAAg3B,eAAA/lB,QACA,OAAAjR,EAAAg3B,eAAA/lB,SACAjR,EAAAg3B,eAAA/lB,OAAAiD,KAAAjL,SAAAjJ,EAAAgF,UAAAiE,SACAjJ,EAAAiR,OAAAiD,KAAAlU,EAAAg3B,eAAA/lB,OAAAiD,MAEAvS,EAAA3B,EAAA2Z,YACA3Z,EAAAg3B,eAAA/lB,OAAAC,QAAAjI,SAAAtH,EAAAsH,SACAjJ,EAAAiR,OAAAC,QAAAlR,EAAAg3B,eAAA/lB,OAAAC,SAEAlR,EAAA6W,YAAA/U,KAAA9B,EAAAg3B,eAAAngB,QACAlV,EAAA,GAAAf,KAAAZ,EAAAg3B,eAAAngB,QACA7W,EAAAoN,mBAAAtL,KAAA9B,EAAAg3B,eAAA5pB,eACA,MAAApN,EAAAg3B,eAAA5pB,mBACAtL,KAAA9B,EAAAg3B,eAAAngB,SAAA7W,EAAAi3B,gBAAAj3B,EAAA6W,UAAA7W,EAAAoN,gBACApN,EAAAib,MAAAjb,EAAA6W,QAAA7W,EAAAoN,kBAIApN,EAAAk3B,WAAA,WACA,MAAAl3B,GAAAqD,WAAArD,EAAAqD,WAAA8zB,KAAAn3B,EAAAyC,YAEAzC,EAAAo3B,YAAA,SAAAC,GACA,MAAAA,GAAA5xB,QAAA,mBAEAzF,EAAAs3B,cAAA,SAAAD,GACA,MAAAE,YAAAF,EAAA,KAEAr3B,EAAAw3B,gBAAA,SAAA/V,GACA,UAAA/e,KAAA+e,GAGA,MAFAzhB,GAAA4G,MAAA6a,EAAA,UAAAzhB,EAAAs3B,cAAAt3B,EAAA4G,MAAA6a,SACAzhB,EAAA4G,MAAA6a,EAAA,QAAAzhB,EAAAo3B,YAAAp3B,EAAA4G,MAAA6a,IAIA,+BAAAA,GAAA,gBAAAzhB,GAAA4G,MAAA6a,KACAzhB,EAAA4G,MAAA6a,GAAAzhB,EAAA4G,MAAA6a,GAAAgM,MAAA,KACAH,IAAA,SAAAhtB,GAAuC,MAAAgH,UAAAhH,EAAA,QAGvCN,EAAAy3B,SAAA,SAAAC,GACA13B,EAAAsC,KAAAo1B,IACA32B,OAAA4D,KAAA3E,EAAAsC,KAAAo1B,IAAAt0B,QAAA,SAAAqe,GACAzhB,EAAA03B,GAAAjW,GAAAzhB,EAAAsC,KAAAo1B,GAAAjW,MAGAzhB,EAAA23B,iBAAA,SAAAlW,GACA,WAAAzhB,EAAA43B,UAAA/yB,QAAA4c,GACAzhB,EAAAyjB,gBAAAhC,GAEAzhB,EAAA4G,MAAA6a,IAEAzhB,EAAAwG,iBAAA,SAAAib,EAAAzR,EAAA6nB,GACA,GAAAC,IAAA,qEAAAjzB,QAAA4c,IACA,IAAAzhB,EAAA43B,UAAA/yB,QAAA4c,GACAzhB,EAAAyjB,gBAAAhC,GAAAzR,GAEA,IAAAtN,KAAA+e,KACAA,EAAAzhB,EAAAkD,oBAAAue,IAEAzhB,EAAA4G,MAAA6a,GAAAzR,EACAhQ,EAAAw3B,gBAAA/V,IAEAqW,GACA93B,EAAA2G,SAEAkxB,IACA73B,EAAAwL,MAAA,GACAxL,EAAAyG,cAAA,gBAAoD7F,KAAA,QAAAoP,YAGpDhQ,EAAA+2B,mBAAA,WACA,GAAA/2B,EAAAgC,WAAApB,MAAAZ,EAAAgC,WAAAyU,eAAA,CAEA,GADAzW,EAAAg3B,eAAA7B,aAAA4C,QAAA/3B,EAAAm0B,YAAA,IAAAn0B,EAAAgC,WAAApB,MACAZ,EAAAg3B,eACA,IACAh3B,EAAAg3B,eAAAlwB,KAAAC,MAAA/G,EAAAg3B,gBACqB,MAAAhwB,GACrB+P,QAAAC,KAAA,0CAAAhQ,GACAhH,EAAAg3B,mBAAAl1B,GAGA9B,EAAAg3B,iBACA,gBAAAh3B,GAAAg3B,eAAA7lB,OACA,OAAAnR,EAAAg3B,eAAA7lB,QACAnR,EAAAmR,MAAA+C,KAAAlU,EAAAg3B,eAAA7lB,MAAA+C,KACAlU,EAAAmR,MAAAD,QAAAlR,EAAAg3B,eAAA7lB,MAAAD,SACA,0BAAA9N,QAAA,SAAA9C,GACAN,EAAAmR,MAAA7Q,KACAN,EAAAmR,MAAA7Q,UAIA,gBAAAN,GAAAg3B,eAAA9B,YACAl1B,EAAA2Z,YAAAvW,QAAA,SAAAyN,GACA7Q,EAAAg3B,eAAA9B,gBAAApzB,KAAA9B,EAAAg3B,eAAA9B,WAAArkB,EAAAjQ,QACAiQ,EAAAuC,QAAApT,EAAAg3B,eAAA9B,WAAArkB,EAAAjQ,YAOAZ,EAAAyD,KAAA,WAEA,QAAAu0B,GAAAvW,IACA,IAAAzhB,EAAA43B,UAAA/yB,QAAA4c,IACAzhB,EAAA43B,UAAA9vB,KAAA2Z,GAHA,IAAAzhB,EAAAi4B,YAAA,CAMA,GAAAC,KA4MA,OA3MAl4B,GAAAs2B,gBACAt2B,EAAAu2B,WACAv2B,EAAAm4B,gBACAn4B,EAAAo4B,SACAp4B,EAAA2C,SAAA,kBACA3C,EAAAi4B,aAAA,EACAj4B,EAAAq4B,GAAA,UAAA31B,KAAAmB,OAAAy0B,UAAAC,WACAv4B,EAAAw4B,KAAA,OAAA91B,KAAAmB,OAAAy0B,UAAAC,WACAv4B,EAAAy4B,OAAA,SAAA/1B,KAAAmB,OAAAy0B,UAAAC,WACAv4B,EAAA04B,IAAA,QAAAh2B,KAAAmB,OAAAy0B,UAAAC,WACAv4B,EAAAy4B,OAAA,SAAA/1B,KAAAmB,OAAAy0B,UAAAC,WACAv4B,EAAA8R,OAAA,UAAApP,KAAAmB,OAAAy0B,UAAAC,WACAv4B,EAAA24B,WAAA,OACA34B,EAAA44B,cAAA,WACA54B,EAAA24B,WAAA34B,EAAAy4B,OAAA,eAAAz4B,EAAA24B,WACA34B,EAAA44B,cAAA54B,EAAA04B,IAAA,mBAAA14B,EAAA64B,eACA74B,EAAAihB,qBAAwCrX,EAAA,EAAAI,EAAA,GACxCjJ,OAAA4D,KAAA3E,EAAA4G,OAAAxD,QAAApD,EAAAw3B,iBACAx3B,EAAA4C,KAAA6nB,cAAAzqB,EAAAyqB,cACAzqB,EAAA4C,KAAA+H,OAAA3K,EAAA2K,OACA3K,EAAA4C,KAAA0F,iBAAAtI,EAAAsI,iBACAtI,EAAA4C,KAAAuf,oBAAAniB,EAAAmiB,oBACAniB,EAAA4C,KAAA6D,cAAAzG,EAAAyG,cAOAzG,EAAA4C,KAAA6zB,QAAAz2B,EAAAy2B,QAQAz2B,EAAA4C,KAAAk2B,SAAA94B,EAAA84B,SACA94B,EAAA4C,KAAA2xB,QAAAv0B,EAAAu0B,QACAv0B,EAAA4C,KAAA6xB,QAAAz0B,EAAAy0B,QACAz0B,EAAA4C,KAAA2pB,SAAAvsB,EAAAusB,SACAvsB,EAAA4C,KAAAmpB,YAAA/rB,EAAA+rB,YACA/rB,EAAA4C,KAAAmlB,QAAA/nB,EAAA+nB,QACA/nB,EAAA4C,KAAAolB,cAAAhoB,EAAAgoB,cACAhoB,EAAA4C,KAAA0rB,oBAAAtuB,EAAAsuB,oBACAtuB,EAAA4C,KAAAopB,eAAAhsB,EAAAgsB,eACAhsB,EAAA4C,KAAAm2B,eAAA/4B,EAAA+4B,eACA/4B,EAAA4C,KAAAo2B,SAAAh5B,EAAAg5B,SACAh5B,EAAA4C,KAAAq2B,QAAAj5B,EAAAi5B,QACAj5B,EAAA4C,KAAAq0B,gBAAAj3B,EAAAi3B,gBACAj3B,EAAA4C,KAAAs2B,qBAAAl5B,EAAAk5B,qBACAl5B,EAAA4C,KAAAu2B,iBAAAn5B,EAAAm5B,iBACAn5B,EAAA4C,KAAA0pB,kBAAAtsB,EAAAssB,kBACAtsB,EAAA4C,KAAA4zB,wBAAAx2B,EAAAw2B,wBACAx2B,EAAA4C,KAAAovB,mBAAAhyB,EAAAgyB,mBACAhyB,EAAA4C,KAAAqjB,UAAAjmB,EAAAimB,UACAjmB,EAAA4C,KAAAw2B,cAAAp5B,EAAAo5B,cACAp5B,EAAA4C,KAAAqY,MAAAjb,EAAAib,MACAjb,EAAA4C,KAAA4I,KAAAxL,EAAAwL,KACAxL,EAAA4C,KAAA8kB,WAAA1nB,EAAA0nB,WACA1nB,EAAA4C,KAAAy2B,YAAAr5B,EAAAq5B,YACAr5B,EAAA4C,KAAA02B,kBAAAt5B,EAAAs5B,kBACAt5B,EAAA4C,KAAA22B,UAAAv5B,EAAAu5B,UACAv5B,EAAA4C,KAAA4kB,UAAAxnB,EAAAwnB,UACAxnB,EAAA4C,KAAA6S,WAAAzV,EAAAyV,WACAzV,EAAA4C,KAAAylB,WAAAroB,EAAAqoB,WACAroB,EAAA4C,KAAA42B,WAAAx5B,EAAAw5B,WACAx5B,EAAA4C,KAAA62B,aAAAz5B,EAAAy5B,aACAz5B,EAAA4C,KAAAsD,OAAAlG,EAAAkG,OACAlG,EAAA4C,KAAAT,QAAAnC,EAAAyK,IACAzK,EAAA4C,KAAA82B,UAAA15B,EAAA05B,UACA15B,EAAA4C,KAAA+2B,UAAA35B,EAAA25B,UACA35B,EAAA4C,KAAAg3B,OAAA55B,EAAA45B,OACA55B,EAAA4C,KAAAi3B,aAAA75B,EAAA65B,aACA75B,EAAA4C,KAAAk3B,aAAA95B,EAAA85B,aACA95B,EAAA4C,KAAAm3B,UAAA/5B,EAAA+5B,UACA/5B,EAAA4C,KAAAo3B,gBAAAh6B,EAAAg6B,gBACAh6B,EAAA4C,KAAAq3B,aAAAj6B,EAAAi6B,aACAj6B,EAAA4C,KAAAs3B,eAAAl6B,EAAAk6B,eACAl6B,EAAA4C,KAAAu3B,kBAAAn6B,EAAAm6B,kBACAn6B,EAAA4C,KAAAw3B,gBAAAp6B,EAAAo6B,gBACAp6B,EAAA4C,KAAA+D,OAAA3G,EAAA2G,OACA3G,EAAA4C,KAAAulB,aAAAnoB,EAAAmoB,aACAnoB,EAAA4C,KAAA4kB,UAAAxnB,EAAAwnB,UACAxnB,EAAA4C,KAAAqlB,UAAAjoB,EAAAioB,UACAjoB,EAAA4C,KAAAy3B,WAAAr6B,EAAAq6B,WACAr6B,EAAA4C,KAAAizB,eAAA71B,EAAA61B,eACA71B,EAAA4C,KAAA03B,cAAAt6B,EAAAs6B,cACAt6B,EAAA4C,KAAA23B,uBAAAv6B,EAAAu6B,uBACAv6B,EAAA4C,KAAA43B,eAAAx6B,EAAAw6B,eACAx6B,EAAA4C,KAAAyrB,KAAAruB,EAAAquB,KACAruB,EAAA4C,KAAA4D,iBAAAxG,EAAAwG,iBACAzF,OAAAC,eAAAhB,EAAA4C,KAAA,YACAzB,IAAA,WACA,OACAc,OAAAjC,EAAA+B,SAAAE,OAAAwd,OAAA,SAAA3H,EAAAxX,GAA6F,MAAhBwX,GAAAxX,EAAA,IAAAA,EAAA,GAAgBwX,OAC7F9V,WAAAhC,EAAA+B,SAAAC,WAAAyd,OAAA,SAAA3H,EAAAxX,GAAqG,MAAhBwX,GAAAxX,EAAA,IAAAA,EAAA,GAAgBwX,WAIrG9X,EAAA43B,UAAA72B,OAAA4D,KAAA3E,EAAA4C,KAAAb,SAAAE,QACAjC,EAAA43B,UAAAtK,IAAA,SAAAhtB,GAA6C,MAAAN,GAAAiD,kBAAA3C,GAAA,KAA2C8C,QAAA40B,GACxFh4B,EAAA43B,UAAAtK,IAAA,SAAAhtB,GAA6C,MAAAN,GAAAiD,kBAAA3C,GAAA,KAA0C8C,QAAA40B,GACvFh4B,EAAAy6B,UAAA52B,OAAAmC,iBAAAlD,SAAA4B,KAAA,MACA1E,EAAA43B,UAAAzM,OAAApqB,OAAA4D,KAAA3E,EAAAy6B,YAAAr3B,QAAA,SAAAqe,GAEAyW,EAAAzW,OAAA3f,GACAf,OAAAC,eAAAk3B,EAAAzW,GACAtgB,IAAA,WACA,MAAAnB,GAAA23B,iBAAAlW,IAEAiZ,IAAA,SAAA1qB,GACAhQ,EAAAwG,iBAAAib,EAAAzR,QAIAjP,OAAAC,eAAAhB,EAAA4C,KAAA,cACAzB,IAAA,WACA,MAAAnB,GAAAqD,cAGAtC,OAAAC,eAAAhB,EAAA4C,KAAA,cACAzB,IAAA,WACA,MAAAnB,GAAA6T,cAGA9S,OAAAC,eAAAhB,EAAA4C,KAAA,YACAzB,IAAA,WACA,MAAAnB,GAAAshB,YAGAvgB,OAAAC,eAAAhB,EAAA4C,KAAA,SACAzB,IAAA,WACA,MAAA+2B,IAEAwC,IAAA,SAAAC,GACA55B,OAAA4D,KAAAg2B,GAAAv3B,QAAA,SAAAqe,GACAzhB,EAAAwG,iBAAAib,EAAAkZ,EAAAlZ,IAAA,KAEAzhB,EAAAwL,MAAA,GACAxL,EAAAyG,cAAA,gBAAwD7F,KAAA,QAAAoP,MAAA2qB,OAGxD55B,OAAAC,eAAAhB,EAAA4C,KAAA,cAA4DoN,WAC5DjP,OAAA4D,KAAA3E,EAAAgC,YAAAoB,QAAA,SAAAqe,GACA1gB,OAAAC,eAAAhB,EAAA4C,KAAAZ,WAAAyf,GACAtgB,IAAA,WACA,MAAAnB,GAAAgC,WAAAyf,IAEAiZ,IAAA,SAAA1qB,GACAhQ,EAAAgC,WAAAyf,GAAAzR,EACA,SAAAyR,GACAzhB,EAAA82B,wBAEA92B,EAAAwL,MAAA,GACAxL,EAAAyG,cAAA,oBAAgE7F,KAAA6gB,EAAAzR,QAAAyR,UAIhEzhB,EAAAu0B,QAAA7sB,OAAA,SAAAsI,EAAA4qB,GACA5qB,EAAA6qB,OAAA7qB,EACA,IAAA8qB,GACAC,EAAA,cACAC,EAAAD,EAAAE,KAAAL,GACAM,EAAAF,IAAA,GAAAxN,UAAA,MACA2N,EAAAD,EAAAjyB,MAEA,IADAjJ,EAAAo7B,uBAAAt5B,GACA,MAAA84B,EAAApN,UAAA,MAAAwN,EAAA,CACA,IACAF,EAAA,GAAAO,QAAAT,EAAApN,UAAA,EAAAoN,EAAA3xB,QAAAkyB,EAAA,IAAAD,GACqB,MAAAl0B,GAErB,YADAhH,EAAAo7B,mBAAAp0B,GAGA,MAAA8zB,GAAAp4B,KAAAsN,GAEA,QAAAA,EAAAiH,WACA,IADAjH,EAAAiH,WAAAqkB,oBACAz2B,QAAA+1B,EAAAU,sBAEAt7B,EAAAu0B,QAAAntB,OAAA,SAAA4I,EAAA4qB,GACA,OAAAA,GACA5qB,IAAA4qB,IAEA,kCAAAx3B,QAAApD,EAAAy3B,UACAz3B,EAAAgD,qBAAA,EAAAhD,EAAA4C,MACA5C,EAAA+2B,qBACA/2B,EAAAsC,KAAA0C,OACAhF,EAAA4C,KAAAoC,KAAAhF,EAAAsC,KAAA0C,OAEAhF,EAAA4C,KAAA24B,WAAAv7B,EAAA4C,KAAA44B,eACA,kCAAAx7B,EAAA4C,KAAAyF,OACArI,EAAA4C,KAAAyF,KAAA,sCAEArI,EAAA4C,KAAAoC,KAAAhF,EAAA4C,KAAA24B,WAAAv7B,EAAA4C,KAAA44B,aAEAx7B,EAAAsC,KAAA4E,SACAlH,EAAA4C,KAAAsE,OAAAlH,EAAAsC,KAAA4E,QAEAlH,EAAAwC,YACAkE,sBAAA,WAAmD1G,EAAA2G,QAAA,KAEnD3G,EAAA2G,QAAA,GAEA3G,IAQAA,EAAA4C,KAAA64B,KAAA,SAAAz0B,GACAhH,EAAAshB,UAAA,GAQAthB,EAAA4C,KAAA2oB,MAAA,WACAvrB,EAAAshB,UAAA,EACAthB,EAAAsrB,aAAAC,UAEAvrB,EAAAqD,YAAArD,EAAAwC,eACAzB,OAAAC,eAAAhB,EAAA4C,KAAA,UACAzB,IAAA,WACA,MAAAnB,GAAAqD,WACArD,EAAAqD,WAAAyI,OAEA9L,EAAAyC,WAAAqJ,QAEA4uB,IAAA,SAAA1qB,GACAhQ,EAAAqD,WACArD,EAAAqD,WAAAyI,OAAAkE,EAEAhQ,EAAAyC,WAAAqJ,OAAAkE,EAEAhQ,EAAA2G,QAAA,MAGA5F,OAAAC,eAAAhB,EAAA4C,KAAA,SACAzB,IAAA,WACA,MAAAnB,GAAAqD,WACArD,EAAAqD,WAAA0I,MAEA/L,EAAAyC,WAAAsJ,OAEA2uB,IAAA,SAAA1qB,GACAhQ,EAAAqD,WACArD,EAAAqD,WAAA0I,MAAAiE,EAEAhQ,EAAAyC,WAAAsJ,MAAAiE,EAEAhQ,EAAA2G,QAAA,MAGA5F,OAAAC,eAAAhB,EAAA4C,KAAA,cACAzB,IAAA,WACA,MAAAnB,GAAAyC,YAEAi4B,IAAA,SAAA1qB,GACA,IAAAhQ,EAAAwC,YACA,SAAAk5B,WAAA,yDAEA17B,GAAAyC,WAAAuN,MAIAjP,OAAAC,eAAAhB,EAAA4C,KAAA,qBACAzB,IAAA,WACA,MAAAnB,GAAAiZ,qBAGAlY,OAAAC,eAAAhB,EAAA4C,KAAA,gBACAzB,IAAA,WACA,MAAAnB,GAAA8N,gBAGA/M,OAAAC,eAAAhB,EAAA4C,KAAA,cACAzB,IAAA,WACA,MAAAJ,QAAA4D,KAAA3E,EAAAwW,YAAA8W,IAAA,SAAA9X,GACA,MAAAxV,GAAAwW,WAAAhB,QAIAzU,OAAAC,eAAAhB,EAAA4C,KAAA,eACAzB,IAAA,WACA,MAAAnB,GAAAwC,eAGAzB,OAAAC,eAAAhB,EAAA,UACAmB,IAAA,WACA,MAAAnB,GAAAyjB,gBAAAqD,QAEA4T,IAAA,SAAA1qB,GACA,SAAAA,IAAuCA,EAAA,WACvChQ,EAAA27B,gBAAA3rB,IACAhQ,EAAAyjB,gBAAAqD,OAAA9W,EACAhQ,EAAA27B,cAAA3rB,MAIAjP,OAAAC,eAAAhB,EAAA4C,KAAA,kBACAzB,IAAA,WACA,MAAAnB,GAAAoN,gBAEAstB,IAAA,SAAA1qB,GACA,SAAAA,IACAA,EAAA,OAEAhQ,EAAAoN,eAAA4C,EACAhQ,EAAAib,MAAAjb,EAAA6W,QAAA7W,EAAAoN,mBAGArM,OAAAC,eAAAhB,EAAA4C,KAAA,WACAzB,IAAA,WACA,MAAAnB,GAAA6W,SAEA6jB,IAAA,SAAA1qB,GACA,OAEqBlO,KAFrB9B,EAAA2Z,YAAAiiB,KAAA,SAAA5G,GACA,MAAAA,GAAAp0B,OAAAoP,IAEA,SAAA/I,OAAA,sCAEAjH,GAAA6W,QAAA7G,EACAhQ,EAAAib,MAAAjb,EAAA6W,QAAA7W,EAAAoN,mBAGApN,EAAAuC,cACAxB,OAAAC,eAAAhB,EAAA4C,KAAA,gBACAzB,IAAA,WACA,MAAAnB,GAAAkG,OAAAgP,gBAGAnU,OAAAC,eAAAhB,EAAA4C,KAAA,eACAzB,IAAA,WACA,MAAAnB,GAAAkG,OAAA+O,gBAIAlU,OAAAC,eAAAhB,EAAA4C,KAAA,gBACAzB,IAAA,WACA,MAAAnB,GAAA8U,UAAA4J,gBAGA3d,OAAAC,eAAAhB,EAAA4C,KAAA,eACAzB,IAAA,WACA,MAAAnB,GAAA8U,UAAAwJ,eAGAvd,OAAAC,eAAAhB,EAAA4C,KAAA,aACAzB,IAAA,WACA,MAAAnB,GAAA8U,UAAAD,WAEA6lB,IAAA,SAAA1qB,GACAhQ,EAAA8U,UAAAD,UAAA7E,KAGAjP,OAAAC,eAAAhB,EAAA4C,KAAA,cACAzB,IAAA,WACA,MAAAnB,GAAA8U,UAAAC,YAEA2lB,IAAA,SAAA1qB,GACAhQ,EAAA8U,UAAAC,WAAA/E,KAGAjP,OAAAC,eAAAhB,EAAA4C,KAAA,SACAzB,IAAA,WACA,MAAAnB,GAAAmR,SAGApQ,OAAAC,eAAAhB,EAAA4C,KAAA,SACAzB,IAAA,WACA,MAAAnB,GAAAulB,SAGAxkB,OAAAC,eAAAhB,EAAA4C,KAAA,gBACAzB,IAAA,WACA,MAAAnB,GAAAsrB,gBAGAvqB,OAAAC,eAAAhB,EAAA4C,KAAA,eACAzB,IAAA,WACA,MAAAnB,GAAAoZ,eAGArY,OAAAC,eAAAhB,EAAA4C,KAAA,gBACAzB,IAAA,WACA,MAAAnB,GAAA+V,gBAGAhV,OAAAC,eAAAhB,EAAA4C,KAAA,eACAzB,IAAA,WACA,MAAAnB,GAAA0U,eAGA3T,OAAAC,eAAAhB,EAAA4C,KAAA,cACAzB,IAAA,WACA,MAAAnB,GAAA4S,cAGA7R,OAAAC,eAAAhB,EAAA4C,KAAA,YACAzB,IAAA,WACA,MAAAnB,GAAAsc,YAGAvb,OAAAC,eAAAhB,EAAA4C,KAAA,WACAzB,IAAA,WACA,MAAAnB,GAAA40B,WAGA50B,EAAA4C,KAAAwR,WAAApU,EAAAoU,WACArT,OAAAC,eAAAhB,EAAA4C,KAAA,QACAzB,IAAA,WACA,MAAAnB,GAAAs0B,UAEAoG,IAAA,SAAA1qB,GACA,IAAAhQ,EAAA00B,QAAA1kB,GACA,SAAA/I,OAAA,2BAAA+I,EAEAhQ,GAAAs0B,SAAAtkB,KAGAhQ,EAAA80B,WAAA1xB,QAAA,SAAAy4B,GACA96B,OAAAC,eAAAhB,EAAA4C,KAAA,KAAAi5B,GACA16B,IAAA,WACA,MAAAnB,GAAA60B,kBAAAgH,IAEAnB,IAAA,SAAA1qB,GACAhQ,EAAAkiB,OAAA2Z,MACA77B,EAAA60B,kBAAAgH,GAAA7rB,EACAA,GACAhQ,EAAAsI,iBAAAuzB,EAAA7rB,QAIAjP,OAAAC,eAAAhB,EAAA4C,KAAA,aACAzB,IAAA,WACA,MAAAnB,GAAA8Z,WAEA4gB,IAAA,SAAAp0B,GACA,GAAAiB,MAAAjB,GACA,SAAAo1B,WAAA,+CAEA,IAAA17B,EAAA0U,YAAAzL,OAAA3C,EACA,SAAAw1B,YAAA,6DAEA97B,GAAA8Z,UAAAxT,KAGAvF,OAAAC,eAAAhB,EAAA4C,KAAA,gBACAzB,IAAA,WACA,MAAAnB,GAAAgR,cAEA0pB,IAAA,SAAAp0B,GACA,GAAAiB,MAAAjB,GACA,SAAAo1B,WAAA,+CAEA,IAAA17B,EAAA8Q,mBAAA7H,OAAA3C,EACA,SAAAw1B,YAAA,gEAEA97B,GAAAgR,aAAA1K,KAGAvF,OAAAC,eAAAhB,EAAA4C,KAAA,mBACAzB,IAAA,WACA,OACAmjB,IAAAtkB,EAAAoa,eACAgN,MAAApnB,EAAA2Y,iBACAwO,OAAAnnB,EAAAqa,kBACAkK,KAAAvkB,EAAA0Y,oBAIA3X,OAAAC,eAAAhB,EAAA4C,KAAA,mBACAzB,IAAA,WACA,OACAmjB,IAAAtkB,EAAAma,eACAiN,MAAApnB,EAAA4Y,iBACAuO,OAAAnnB,EAAAsa,kBACAiK,KAAAvkB,EAAA6Y,oBAIA9X,OAAAC,eAAAhB,EAAA4C,KAAA,mBACAzB,IAAA,WACA,MAAAnB,GAAAqnB,wBAGAtmB,OAAAC,eAAAhB,EAAA4C,KAAA,gBACAzB,IAAA,WACA,MAAAnB,GAAA8nB,iBAAA,MAGA/mB,OAAAC,eAAAhB,EAAA4C,KAAA,iBACAzB,IAAA,WACA,MAAAnB,GAAA8nB,qBAGA/mB,OAAAC,eAAAhB,EAAA4C,KAAA,iBACAzB,IAAA,WACA,MAAAnB,GAAA8Q,mBAAAwc,IAAA,SAAA0H,GACA,MAAAA,QAIAj0B,OAAAC,eAAAhB,EAAA4C,KAAA,sBACAzB,IAAA,WACA,MAAAnB,GAAAk0B,oBAEAwG,IAAA,SAAA1qB,GACAhQ,EAAAk0B,mBAAAlkB,KAGAjP,OAAAC,eAAAhB,EAAA4C,KAAA,sBACAzB,IAAA,WACA,MAAAnB,GAAAqT,oBAEAqnB,IAAA,SAAA1qB,GACAhQ,EAAAqT,mBAAArD,KAGAjP,OAAAC,eAAAhB,EAAA4C,KAAA,OACAzB,IAAA,WACA,MAAAnB,GAAAyK,OAGA1J,OAAAC,eAAAhB,EAAA4C,KAAA,UACAzB,IAAA,WACA,MAAAnB,GAAA2Z,aAEA+gB,IAAA,SAAA1qB,GACA,OAAAlO,KAAAkO,EAKA,MAHAhQ,GAAAkH,WAAApF,GACA9B,EAAAq1B,eAAAvzB,OACA9B,GAAAyG,cAAA,iBAAyDS,WAAApF,IAGzD,KAAA4B,MAAA2pB,QAAArd,IAAA,gBAAAA,GAAA,GACA,SAAA/I,OAAA,sCAEA,QAAAnF,KAAAkO,EAAA,GAAApP,KACA,SAAAqG,OAAA,sEAEAjH,GAAAkH,OAAA8I,EAAAsd,IAAA,SAAAzc,EAAAgH,GAOA,MANAhH,GAAA9E,MAAA8E,EAAA9E,OAAA/L,EAAA4G,MAAAwK,UACAP,EAAAxL,OAAAwL,EAAAxL,QAAArF,EAAAqF,OAAAwL,EAAAxI,MACAwI,EAAAxI,KAAAwI,EAAAxI,MAAA,SACAwI,EAAAgH,QACAhH,EAAAgC,YAAAgF,EACAhH,EAAA9C,UAAA,EACA8C,IAEA7Q,EAAAq1B,eAAAvzB,GACA9B,EAAAy1B,mBACAz1B,EAAAs1B,qBACAt1B,EAAA82B,wBACA92B,EAAAg3B,gBAAA,gBAAAh3B,GAAAg3B,eAAA9B,YACAl1B,EAAAkH,OAAA9D,QAAA,SAAAyN,EAAAgH,GACA7X,EAAAg3B,oBAAAl1B,KAAA9B,EAAAg3B,eAAA9B,WAAArkB,EAAAjQ,QACAiQ,EAAAuC,QAAApT,EAAAg3B,eAAA9B,WAAArkB,EAAAjQ,SAIAZ,EAAA2G,QAAA,GACA3G,EAAAyG,cAAA,iBAAqDS,OAAAlH,EAAAkH,YASrDlH,EAAA4C,KAAAm5B,SAAA,WACA,MAAAh7B,QAAA4D,KAAA3E,EAAA00B,UAEA10B,EAAAg8B,eAAA,SAAAh3B,GACA,IACAA,EAAA8B,KAAAC,MAAA/B,GACa,MAAAgC,GACb,SAAAC,OAAA,kEACAD,EAAAi1B,QAAA,2HAGA,MAAAj3B,IAEAhF,EAAA00B,QAAA,+CAAA1vB,EAAAk3B,GACAl8B,EAAA00B,QAAA,iCAAA10B,EAAAg8B,eAAAh3B,GAAA,SAAAA,EAAAkC,GACA,MAAAg1B,GAAAl3B,EAAAkC,MAGAlH,EAAA00B,QAAA,0CAAA1vB,EAAAk3B,GACA,MAAAA,GAAAl3B,IAEAhF,EAAA4C,KAAA8xB,QAAA10B,EAAA00B,QAGA10B,EAAAm8B,IAAA,SAAAn3B,EAAAk3B,GACA,IAAAl8B,EAAA4C,KAAA8xB,QAAA10B,EAAAs0B,UACA,SAAArtB,OAAA,yBAEAjH,GAAA4C,KAAA8xB,QAAA10B,EAAAs0B,UAAAtvB,EAAA,SAAAA,EAAAkC,GACAxD,MAAA2pB,QAAAnmB,KACAlH,EAAAkH,UAGAlH,EAAAgC,WAAAo6B,qBACAp8B,EAAAkH,OAAAlH,EAAAs5B,kBAAAt0B,IAEAhF,EAAAkH,SACAlH,EAAAq1B,WAAAr1B,EAAAs5B,kBAAAt0B,IAEAhF,EAAA2Z,aACA3Z,EAAAs1B,qBAGAt1B,EAAAi2B,aAAAjxB,EAEAhF,EAAAgF,KAAAhF,EAAAi2B,aAEAj2B,EAAAkH,QAAA,IAAAlH,EAAAgF,KAAAiE,SACAjJ,EAAAq1B,aAAwCz0B,KAAA,MAExCZ,EAAAssB,kBAAA,kBACAtsB,EAAAq1B,aAAAr1B,EAAAkH,QAAAlH,EAAAgC,WAAAo6B,sBACAp8B,EAAAs1B,qBACAt1B,EAAAyG,cAAA,iBAAyDS,OAAAlH,EAAAq1B,cAEzD6G,OAGAn7B,OAAAC,eAAAhB,EAAA4C,KAAA,QACAzB,IAAA,WACA,MAAAnB,GAAAgF,MAEA01B,IAAA,SAAA1qB,GACAhQ,EAAAm8B,IAAAnsB,EAAA,WACAhQ,EAAA40B,WACA50B,EAAAy1B,mBACAz1B,EAAAgC,WAAAq6B,mBAAAr8B,EAAAgF,KAAAiE,OAAA,OACAnH,KAAA9B,EAAAg3B,gBACAh3B,EAAAusB,WAGAvsB,EAAAssB,kBAAA,iBACAtsB,EAAA0Z,kBACA1Z,EAAA82B,wBACA92B,EAAAyG,cAAA,eAAuDzB,KAAAhF,EAAAgF,OACvDhF,EAAA2G,QAAA,QAIA3G,EAAAm4B,cAAA,WASA,QAAAmE,GAAAtsB,EAAAusB,GACA,GAAAh1B,MAAAyI,GACA,SAAA/I,OAAA,mCAEA+I,GAAA,IACAA,EAAA,GAEAA,EAAA0O,IACA1O,EAAA0O,GAEAA,EAAA,IACA1O,EAAA,GAEA6E,EAAA7E,EACAusB,GACAv8B,EAAAilB,SAGA,QAAAuX,GAAAxsB,EAAAusB,GACA,GAAAh1B,MAAAyI,GACA,SAAA/I,OAAA,oCAEA+I,GAAA,IACAA,EAAA,GAEAA,EAAAsO,IACAtO,EAAAsO,GAEAA,EAAA,IACAtO,EAAA,GAEA+E,EAAA/E,EACAusB,GACAv8B,EAAAilB,SAzCA,GAAAwX,GAAA,EACAC,EAAA,EACA7nB,EAAA,EACAE,EAAA,EACA2J,EAAA,EACAJ,EAAA,EACAG,EAAA,GACAJ,EAAA,EAqCAre,GAAA8U,UAAAmC,SAAA,WACA,mBAAyBqH,EAAAoB,QAAA,GACzB,eAAAhB,EAAAgB,QAAA,GACA,aAAA3K,EAAA2K,QAAA,GACA,YAAA7K,EAAA6K,QAAA,GACA,mBAAA1f,EAAA8U,UAAA0P,cAAA9E,QAAA,GACA,oBAAA1f,EAAA8U,UAAA2P,eAAA/E,QAAA,QAEA1f,EAAA8U,UAAA+X,SAAA,SAAAjjB,EAAAI,EAAA2yB,GACAH,EAAA5yB,GAAA,GACA0yB,EAAAtyB,EAAA2yB,IAEA57B,OAAAC,eAAAhB,EAAA8U,UAAA,mBACA3T,IAAA,WACA,MAAAsd,IAEAic,IAAA,SAAA1qB,GACAyO,EAAAzO,KAGAjP,OAAAC,eAAAhB,EAAA8U,UAAA,kBACA3T,IAAA,WACA,MAAAkd,IAEAqc,IAAA,SAAA1qB,GACAqO,EAAArO,KAGAjP,OAAAC,eAAAhB,EAAA8U,UAAA,UACA3T,IAAA,WACA,MAAAs7B,IAEA/B,IAAA,SAAA1qB,GACA0O,EAAA1O,IACA6E,EAAA,GAEA4nB,EAAAzsB,KAGAjP,OAAAC,eAAAhB,EAAA8U,UAAA,SACA3T,IAAA,WACA,MAAAu7B,IAEAhC,IAAA,SAAA1qB,GACA0sB,EAAA1sB,KAGAjP,OAAAC,eAAAhB,EAAA8U,UAAA,aACA3T,IAAA,WACA,MAAA0T,IAEA6lB,IAAA4B,IAEAv7B,OAAAC,eAAAhB,EAAA8U,UAAA,cACA3T,IAAA,WACA,MAAA4T,IAEA2lB,IAAA8B,IAEAz7B,OAAAC,eAAAhB,EAAA8U,UAAA,gBACA3T,IAAA,WACA,MAAAud,IAEAgc,IAAA,SAAA1qB,GACA6E,EAAA7E,IACA6E,EAAA/J,KAAAX,IAAA6F,EAAA,IAEA0O,EAAA+d,IACA5nB,EAAA,GAEA6J,EAAA1O,KAGAjP,OAAAC,eAAAhB,EAAA8U,UAAA,eACA3T,IAAA,WACA,MAAAmd,IAEAoc,IAAA,SAAA1qB,GACA+E,EAAA/E,IACA+E,EAAAjK,KAAAX,IAAA6F,EAAA,IAEAsO,EAAAtO,QAMC9N,MAAAtC,EAAAgC,MAAA/B,EAAAD,QAAAiC,IR8jHK,SAAUhC,EAAQD,EAASO,GSztJjC,GAAAyB,GAAAC,CAEAD,UAkjBCE,MAljBDD,EAAA,WACA,YACA,iBAAA7B,GAEA,QAAA48B,GAAAC,GACA78B,EAAA88B,kBAAAD,EAAA,qCAAA78B,EAAA8R,OAAA,eACA+qB,EAAAv0B,iBAAA,uBACAtI,EAAA88B,kBAAAD,EAAA,6CAEAA,EAAAv0B,iBAAA,sBACAtI,EAAA88B,kBAAAD,EAAA,uCAGA,QAAAE,GAAAxoB,EAAAnF,EAAA6e,EAAA+O,GASA,QAAAC,KACAhP,EAAA7qB,QAAA,SAAAgC,GAGA,QAAA83B,GAAAl2B,GACAA,EAAAm2B,gBAAAC,GACAh4B,EAAAkgB,YAAA8X,YAAAp2B,EAAAm2B,eACAE,IAAAr2B,EAAAm2B,eACAN,IAAA71B,EAAAm2B,eACA/3B,EAAAkgB,YAAA8X,UAAAE,SAAAt2B,EAAAm2B,iBAEA/3B,EAAAkgB,YAAAmR,UACA8G,EAAAjb,OAAAib,EAAA14B,QAAAO,EAAAkgB,aAAA,GACAlgB,EAAAkgB,gBAAAxjB,GACA+6B,EAAA1a,oBAAA,WAAA+a,GACAE,EAAAjb,oBAAA,WAAA+a,GACAL,EAAAW,aAAA,mBACAX,EAAAW,aAAA,gBAEA,QAAAC,GAAAxP,GAEA,SAAA4O,EAAAa,aAAA,YACA,MAAAb,EAAAa,aAAA,eADA,CAIA,GAAAC,GAAAd,EAAAjN,uBACA+N,IACApZ,KAAAoZ,EAAApZ,KAAAvkB,EAAA4G,MAAAg3B,2BAAAR,EAAAnoB,YACAqP,IAAAqZ,EAAArZ,IAAAtkB,EAAA4G,MAAAi3B,0BACA1W,OAAAwW,EAAAxW,OACAC,MAAAuW,EAAAvW,OAEAhiB,EAAAkgB,YAAAyX,EAAAxoB,EAAAopB,EAAA1P,EAAArrB,GACAi6B,EAAAW,aAAA,mBACAX,EAAAv0B,iBAAA,WAAA40B,GACAE,EAAA90B,iBAAA,WAAA40B,GACAK,EAAAz1B,KAAA1C,EAAAkgB,cAEA,QAAAwY,KACA,GAAAx9B,EACA,UAAAu8B,EAAAa,aAAA,gBAIA,GADAb,EAAAW,aAAA,eACA,kBAAAp4B,GAAA6oB,MAOA,gBAHAnsB,MAHAxB,EAAA8E,EAAA6oB,MAAA/rB,MAAAU,GAAA,SAAAqrB,GACAwP,EAAAxP,QAEAvqB,MAAA2pB,QAAA/sB,IACAm9B,EAAAn9B,GAIAm9B,GAAAr4B,EAAA6oB,QAnDA,GACAoP,GADAR,EAAA/5B,SAAAC,cAAA,QAqDA,SAAAqC,GACA,QAAA24B,GAAAC,GACA,UAAAA,EAAA,CACA,qBAAAA,GACA,MAAAD,GAAAC,EAAAzpB,GAEA,oBAAAypB,GAEA,WADAnB,GAAA53B,YAAA+4B,EAGApB,GAAAC,GACAA,EAAA3zB,UAAA80B,GAGAD,EAAA34B,EAAAsQ,OACAtQ,EAAAy3B,wBACAz3B,EAAA6oB,OAAA7oB,EAAA6oB,MAAAhlB,OAAA,qBAAA7D,GAAA6oB,SACAoP,EAAAv6B,SAAAC,cAAA,OACA/C,EAAA88B,kBAAAO,EAAA,uCACAA,EAAAn0B,UAAAlJ,EAAA4G,MAAAq3B,0BACApB,EAAA53B,YAAAo4B,GACAR,EAAAv0B,iBAAA,YAAAw1B,GACAjB,EAAAv0B,iBAAA,sBACAu0B,EAAAW,aAAA,kBAGAp4B,EAAAwiB,OACAiV,EAAAv0B,iBAAA,iBAAAiM,GACAnP,EAAAwiB,MAAA1lB,MAAAlC,GAAAuU,OAIAnP,GACAg4B,EAAAn4B,YAAA43B,KAGA,QAAAqB,GAAA7b,GACA4L,EAAA5L,GAAAwa,qBAAAp2B,cAAA,GAAA03B,OAAA,UAEA,QAAAC,KACAhB,EAAAvoB,UAAA,EACA7U,EAAAq+B,cAAAp5B,YAAAq5B,GACiBA,EAAA77B,YACjB67B,EAAA77B,WAAAi0B,YAAA4H,GAEAlB,EAAAvoB,WAAAuoB,EAAA1e,aAAA0e,EAAAloB,cAAAqpB,EAAA97B,WACA87B,EAAA97B,WAAAi0B,YAAA6H,GACiBnB,EAAA1e,aAAA0e,EAAAloB,aAAA,KACjBkoB,EAAAvoB,WAAAuoB,EAAA1e,aAAA0e,EAAAloB,eACAlV,EAAAq+B,cAAAp5B,YAAAs5B,GAGA,QAAAC,GAAAn2B,GACA,eAAAuH,KACA,GAAAkI,GAAA9X,EAAAgC,WAAAy8B,wBACA,QAAAp2B,GAAA,IAAA+0B,EAAAvoB,WACA,SAAAxM,GAAA+0B,EAAAvoB,YAAAuoB,EAAA1e,eACA0e,EAAAvoB,WAAA,OAAAxM,GAAAyP,IACA4mB,EAAAnV,WAAA3Z,EAAA5P,EAAAgC,WAAA28B,yBAAAt2B,KAGA,QAAAu2B,GAAAv2B,GACA,kBACA+d,aAAAsY,IA9HA,GAMA/O,GANAyN,EAAAt6B,SAAAC,cAAA,OACAu7B,EAAAx7B,SAAAC,cAAA,OACAw7B,EAAAz7B,SAAAC,cAAA,OACAw6B,KACAsB,GAAA,EACAj8B,IAEA,KAAAc,MAAA2pB,QAAAY,GAAwC,SAAAhnB,OAAA,sCA8OxC,OAzCArE,GAAA6S,WAAAzV,EAAA4C,KACAA,EAAAo6B,oBACAp6B,EAAAw6B,YA7EA,WACA,GAAA0B,MACAn9B,EAAA3B,EAAA++B,aAAA/+B,EAAAkG,YACApE,KAAAk9B,IACAA,EAAAh/B,EAAA4G,MAAAq4B,mBAEAhC,IACAj9B,EAAA88B,kBAAAM,EAAA,gCAAAp9B,EAAA8R,OAAA,eACAgtB,EAAAl1B,EAAAwF,EAAAmV,KAAA5iB,EAAA4iB,KACAua,EAAA90B,EAAAoF,EAAAkV,IAAA3iB,EAAA2iB,IACAwa,EAAAhzB,OAAA,EACAkzB,GAAA,EACA5B,EAAAx2B,MAAAs4B,SAAA,WACAZ,EAAA13B,MAAAwD,MAAApK,EAAA4G,MAAAu4B,sBACAZ,EAAA33B,MAAAwD,MAAApK,EAAA4G,MAAAu4B,uBACAb,EAAAC,GAAAn7B,QAAA,SAAAmG,GACAA,EAAA3C,MAAA4a,UAAA,SACAjY,EAAA3C,MAAAs4B,SAAA,WACA31B,EAAA3C,MAAAw4B,OAAAJ,EAAA,IAEA5B,EAAAx2B,MAAAw4B,OAAAJ,EACAhC,KAAAqC,gBACAjC,EAAAx2B,MAAA04B,UAAAz7B,OAAA07B,YAAAT,EAAA90B,EAAAhK,EAAA4G,MAAA44B,yBAAA,KACApC,EAAAx2B,MAAA64B,SAAArwB,EAAArD,MAAA,KACA+yB,EAAA90B,GAAAoF,EAAAtD,QAEA9L,EAAA8R,SACAsrB,EAAAx2B,MAAAmF,MAAAqD,EAAArD,MAAA,MAEAqxB,EAAAx2B,MAAA2d,KAAAua,EAAAl1B,EAAA,KACAwzB,EAAAx2B,MAAA0d,IAAAwa,EAAA90B,EAAA,KACAozB,EAAA90B,iBAAA,SAAA81B,GACAhB,EAAA90B,iBAAA,iBAAAtB,GACAhH,EAAAshB,WACA8b,EAAAvoB,WAAA7N,EAAA0lB,OACA0Q,EAAAroB,YAAA/N,EAAAylB,QAEA2R,MAEAE,EAAAp1B,UAAAlJ,EAAA4G,MAAA84B,uBACAnB,EAAAr1B,UAAAlJ,EAAA4G,MAAA+4B,yBACAvC,EAAAn4B,YAAAq5B,GACAx7B,SAAA4B,KAAAO,YAAAs5B,GACAz7B,SAAA4B,KAAAO,YAAAm4B,GACAzN,EAAAyN,EAAAxN,wBAEAD,EAAAxI,OAAAtjB,OAAA07B,cACAvC,KAAAqC,gBACAP,EAAA90B,GAAA2lB,EAAAxI,OAAAnnB,EAAA4G,MAAAg5B,wBAAA/7B,OAAA07B,aAEAT,EAAA90B,EAAA,IAAoC80B,EAAA90B,EAAAhK,EAAA4G,MAAAg5B,yBACpCxC,EAAAloB,aAAArR,OAAA07B,YAAAv/B,EAAA4G,MAAAg5B,0BACAxC,EAAAx2B,MAAAkF,OAAAjI,OAAA07B,YAAA,EAAAv/B,EAAA4G,MAAAg5B,wBAAA,OAGAjQ,EAAAvI,MAAAvjB,OAAAg8B,aACAf,EAAAl1B,GAAA+lB,EAAAvI,MAAAvjB,OAAAg8B,WAAA7/B,EAAA4G,MAAAg5B,yBAEAd,EAAAl1B,EAAA,IAAgCk1B,EAAAl1B,EAAA5J,EAAA4G,MAAAg5B,yBAChCd,EAAA90B,EAAA,IAAgC80B,EAAA90B,EAAAhK,EAAA4G,MAAAg5B,yBAChCxC,EAAAx2B,MAAA2d,KAAAua,EAAAl1B,EAAA,KACAwzB,EAAAx2B,MAAA0d,IAAAwa,EAAA90B,EAAA,KACA2lB,EAAAyN,EAAAxN,wBACA0O,EAAA13B,MAAA0d,IAAAqL,EAAArL,IAAA,KACAia,EAAA33B,MAAA0d,IAAAqL,EAAArL,IAAAqL,EAAA7jB,OAAAyyB,EAAArpB,aAAA,KACAopB,EAAA13B,MAAA2d,KAAAoL,EAAApL,KAAA,KACAga,EAAA33B,MAAA2d,KAAAoL,EAAApL,KAAA,KACAga,EAAA33B,MAAAmF,MAAAqxB,EAAAnoB,YAAA,KACAqpB,EAAA13B,MAAAmF,MAAAqxB,EAAAnoB,YAAA,KACAspB,EAAAj2B,iBAAA,YAAAk2B,EAAA,SACAD,EAAAj2B,iBAAA,WAAAs2B,EAAA,SACAN,EAAAh2B,iBAAA,YAAAk2B,EAAA,OACAF,EAAAh2B,iBAAA,WAAAs2B,EAAA,OACAR,OAMAx7B,EAAAs7B,aACAt7B,EAAA+sB,OACA/sB,EAAAqrB,QACArrB,EAAA07B,UACA17B,EAAA27B,YACA37B,EAAA6zB,QAAA,WACArQ,aAAAsY,GACAnB,EAAAn6B,QAAA,SAAA1C,GACAA,EAAA+1B,aAEA8H,EAAAD,EAAAlB,GAAAh6B,QAAA,SAAAmG,GACAA,EAAA9G,YAAwC8G,EAAA9G,WAAAi0B,YAAAntB,MAGxCxI,OAAAC,eAAA4B,EAAA,iBACAzB,IAAA,WACA,MAAA09B,IAEAnE,IAAA,SAAA1qB,GACA,mBAAAA,IAAAzI,MAAAyI,IAAA8vB,SAAA9vB,IACA,SAAA/I,OAAA,qDAEA43B,GAAA7uB,EACA6uB,EAAA5Q,EAAAhlB,OAAA,IACA41B,EAAA5Q,EAAAhlB,OAAA,GAEA41B,EAAA,IACAA,EAAA,GAEA5Q,EAAA7qB,QAAA,SAAAgC,EAAAyS,GACA,GAAAA,IAAAgnB,EACA,MAAA7+B,GAAA88B,kBAAA13B,EAAAy3B,qBAAA,0CAEA78B,GAAA88B,kBAAA13B,EAAAy3B,qBAAA,0CAIAj6B,EAEA,QAAAm9B,GAAA/4B,GAQA,QAAAg5B,KACAC,EAAAr5B,MAAAs5B,WAAAlgC,EAAA4G,MAAAu5B,6BACAF,EAAAr5B,MAAAwD,MAAApK,EAAA4G,MAAAw5B,wBACApgC,EAAAo7B,qBACA6E,EAAAr5B,MAAAs5B,WAAAlgC,EAAA4G,MAAAy5B,qCACAJ,EAAAr5B,MAAAwD,MAAApK,EAAA4G,MAAA05B,iCAGA,QAAAC,KACA,GAAAC,GAAA,CACAC,MACAzgC,EAAAgF,KAAA5B,QAAA,SAAAoR,GACA,GAAAxE,GAAAwE,EAAAxN,EAAA0E,KAAAuH,OAAArS,KACA6/B,GAAAzwB,IAAAwwB,EAAAxgC,EAAAgC,WAAA0+B,uBACAF,GAAA,EACAC,EAAAzwB,IACA0F,MAAA1V,EAAAoU,WAAApN,EAAA0E,KAAAuH,OAAA5K,MAAA,WAAgFqD,MAAQsE,WACxF4X,MAAA,SAAA5gB,GACAi5B,EAAAjwB,QACAhJ,EAAAgb,kBACAie,EAAAx5B,cAAA,GAAA03B,OAAA,UACAn+B,EAAA2gC,2BAKAF,EAAA1/B,OAAA4D,KAAA87B,GAAAnT,IAAA,SAAA7L,GACA,MAAAgf,GAAAhf,KAGA,QAAAmf,GAAArsB,GACAA,IAAA,iBAAA1P,QAAA0P,EAAAuX,WACAyU,IACAM,EAAAZ,EAAArQ,wBACAkR,IACAA,EAAArK,UACAqK,MAAAh/B,IAEAg/B,EAAA/D,EAAA/1B,GACAud,KAAAsc,EAAAtc,KACAD,IAAAuc,EAAAvc,IACA8C,MAAAyZ,EAAAzZ,MACAD,OAAA0Z,EAAA1Z,OACArb,OAAA+0B,EAAA/0B,OACAC,MAAA80B,EAAA90B,OACiB00B,GAAsBpB,eAAA,IACvCyB,EAAAjC,cAAA,GArDA,GAKA4B,GACAI,EANAE,EAAAj+B,SAAAC,cAAA,OACAi+B,EAAAl+B,SAAAC,cAAA,OACAk+B,EAAAn+B,SAAAC,cAAA,UACAk9B,EAAAn9B,SAAAC,cAAA,SACA3B,EAAA4F,EAAA0E,MAAA1E,EAAA0E,KAAAuH,OAAAjM,EAAA0E,KAAAuH,OAAAyC,OAAA1O,EAAA0E,KAAAuH,OAAArS,KAAA,EAmDAZ,GAAA88B,kBAAAkE,EAAA,sCACAhhC,EAAA88B,kBAAAmE,EAAA,8CACAjhC,EAAA88B,kBAAAmD,EAAA,6CACAD,IACAC,EAAAiB,QAAAlhC,EAAA2gC,oBACAV,EAAA33B,iBAAA,mBAAAtB,GAEA,KAAAA,EAAA8kB,UACAgV,EAAAjC,eAAA,GAGA,KAAA73B,EAAA8kB,UACAgV,EAAAjC,eAAA,GAGA,KAAA73B,EAAA8kB,UACAgV,EAAA5C,WAAA4C,EAAAjC,eACA7+B,EAAAgyB,sBAGA,IAAAhrB,EAAA8kB,UACAgV,EAAA5C,WAAA4C,EAAAjC,eACA73B,EAAAub,kBAGA,KAAAvb,EAAA8kB,SACA9rB,EAAAgyB,uBAGAiO,EAAA33B,iBAAA,mBACAtI,EAAAu5B,UAAAvyB,EAAA0E,KAAAuH,OAAArS,KAAAq/B,EAAAjwB,SAEAiwB,EAAA33B,iBAAA,QAAAs4B,IACA,2CAAAx9B,QAAA,SAAA0a,GACAmiB,EAAA33B,iBAAAwV,EAAAkiB,KAEAC,EAAAjwB,MAAAhJ,EAAA0E,KAAAuH,OAAAjT,EAAAkX,cAAAlQ,EAAA0E,KAAAuH,OAAArS,OAAA,MACAogC,EAAA93B,UAAAlJ,EAAAgC,WAAAm/B,iBAAA17B,QAAA,MAAArE,GACA6/B,EAAAC,QAAA,WACA,GAAAJ,EACA,MAAA9gC,GAAA2gC,qBAEAC,MAEAK,EAAA/3B,UAAAlJ,EAAA4G,MAAAw6B,wBACAL,EAAAz4B,iBAAA,iBAAAtB,GACA,MAAAA,GAAAgb,oBAEA+e,EAAA97B,YAAA+7B,GACAD,EAAA97B,YAAAg7B,GACAc,EAAA97B,YAAAg8B,GACAj6B,EAAAinB,MAAAnmB,MACA4N,MAAAqrB,IAEAhgC,OAAA4D,KAAA3E,EAAAkX,eAAAjO,QACAlI,OAAA4D,KAAA3E,EAAAkX,eAAA9T,QAAA,SAAAi+B,GACA,GAAAt3B,GAAA/J,EAAAi3B,gBAAAoK,EACAr6B,GAAAinB,MAAAnmB,MACA4N,MAAA1V,EAAAgC,WAAAs/B,uBAAA77B,QAAA,MAAAsE,EAAA2L,OAAA3L,EAAAnJ,MACAgnB,MAAA,SAAA5gB,GACAA,EAAAub,iBACAviB,EAAAu5B,UAAA8H,EAAA,IACArhC,EAAAsrB,aAAAC,aAMA,QAAAgW,GAAAv6B,GACA,GAAAw6B,KAAAx6B,EAAA0E,KAAA+1B,cAAAz6B,EAAA0E,KAAAoI,uBACA9M,EAAA0E,KAAAg2B,aAAA16B,EAAA0E,KAAA6H,UAAAvM,EAAA0E,KAAAiH,cACA3L,EAAA0E,KAAAuH,MACAjT,GAAAgC,WAAA2/B,YAAAH,GACAzB,EAAA/4B,GAEAhH,EAAAgC,WAAA4/B,UACA5hC,EAAA4S,WAAA6M,OAAA,SAAA/d,EAAA4I,GACA,MAAA5I,GAAA4I,EAAArB,QACqB,MACrBjC,EAAAinB,MAAAnmB,MACA4N,MAAA1V,EAAAgC,WAAA6/B,SACAja,MAAA,WACA9kB,SAAAg/B,YAAA,QACA9hC,EAAAgyB,qBACAhyB,EAAAsrB,aAAAC,WAIAvrB,EAAAgC,WAAA+/B,WAAA/hC,EAAAgiC,eACAh7B,EAAAinB,MAAAnmB,MACA4N,MAAA1V,EAAAgC,WAAAigC,UACAra,MAAA,WACA5nB,EAAA+tB,MAAA/tB,EAAAgiC,cAAAh7B,EAAA0E,KAAAmH,YAAA7L,EAAA0E,KAAAqC,UACA/N,EAAAwL,UAIAxL,EAAAgC,WAAAkgC,qBACAl7B,EAAAinB,MAAAnmB,MACA4N,MAAA1V,EAAAgC,WAAAmgC,mBACAlU,MAAA,WACA,GAAAttB,KAqBA,OApBAX,GAAA2Z,YAAAvW,QAAA,SAAAyN,GACA,QAAAuxB,GAAAp7B,GACA6J,EAAAuC,QAAAvC,EAAAuC,OACApM,EAAAub,iBACAviB,EAAAgiB,gBAAAhb,GACAhH,EAAAgyB,qBACAhyB,EAAA2G,QAAA,GACA3G,EAAA+oB,iBAEA,GAAAxf,GAAAzG,SAAAC,cAAA,MACA65B,GAAArzB,GACAA,EAAAjB,iBAAA,aAAA85B,GACA74B,EAAAjB,iBAAA,QAAA85B,GACA74B,EAAAL,WAAA2H,EAAAuC,OAAApT,EAAAgC,WAAAqgC,yBACAriC,EAAAgC,WAAAsgC,4BACAzxB,EAAA6E,OAAA7E,EAAAjQ,MACAD,EAAAmH,MACA4N,MAAAnM,MAGA5I,KAGAqG,EAAA0E,MAAA1E,EAAA0E,KAAAuH,QACAjM,EAAAinB,MAAAnmB,MACA4N,MAAA1V,EAAAgC,WAAAugC,eACA98B,QAAA,OAAAuB,EAAA0E,KAAAuH,OAAAyC,OAAA1O,EAAA0E,KAAAuH,OAAArS,MACAgnB,MAAA,SAAArT,GACAvN,EAAA0E,KAAAuH,OAAAG,QAAA,EACAmB,EAAAgO,iBACAviB,EAAAgiB,gBAAAzN,GACAvU,EAAAgyB,qBACAhyB,EAAA+oB,iBACAQ,WAAA,WAAoDvpB,EAAA2G,QAAA,IAAqB,QAKzE3G,EAAAgC,WAAAyU,gBAAAzW,EAAAgC,WAAAwgC,0BACAzhC,OAAA4D,KAAA3E,EAAAmR,MAAA+C,MAAAjL,OAAA,GACAlI,OAAA4D,KAAA3E,EAAAmR,MAAAD,SAAAjI,OAAA,IACAjC,EAAAinB,MAAAnmB,MACA4N,MAAA1V,EAAAgC,WAAAygC,wBACA7a,MAAA,SAAA5gB,GACAA,EAAAub,iBACAviB,EAAAmR,MAAA+C,QACAlU,EAAAmR,MAAAD,WACAlR,EAAA0Z,kBACA1Z,EAAAs1B,qBACAt1B,EAAAg3B,mBAAAl1B,GACA9B,EAAAyG,cAAA,gBAA4Di8B,YAAA1iC,EAAA4G,MAAAwK,YAC5DpR,EAAAyG,cAAA,aAAyDuO,WAAAhV,EAAA4G,MAAAoO,aACzDhV,EAAA+oB,iBACA/oB,EAAA2G,QAAA,GACA3G,EAAAgyB,qBACAhyB,EAAAsrB,aAAAC,WAIAvrB,EAAAgC,WAAA2gC,cAAA3iC,EAAAgC,WAAA4gC,mBAAApB,IACAx6B,EAAAinB,MAAAnmB,MACA4N,MAAA1V,EAAAgC,WAAA6gC,yBAAAp9B,QAAA,KAAAuB,EAAA0E,KAAAuH,OAAAyC,OAAA1O,EAAA0E,KAAAuH,OAAArS,MACAgnB,MAAA,SAAArT,GACAA,EAAAgO,iBACAviB,EAAAib,MAAAjU,EAAA0E,KAAAuH,OAAArS,KAAA,OACAZ,EAAAsrB,aAAAC,WAGAvkB,EAAAinB,MAAAnmB,MACA4N,MAAA1V,EAAAgC,WAAA8gC,0BAAAr9B,QAAA,KAAAuB,EAAA0E,KAAAuH,OAAAyC,OAAA1O,EAAA0E,KAAAuH,OAAArS,MACAgnB,MAAA,SAAArT,GACAA,EAAAgO,iBACAviB,EAAAib,MAAAjU,EAAA0E,KAAAuH,OAAArS,KAAA,QACAZ,EAAAgyB,qBACAhyB,EAAAsrB,aAAAC,YA1eA,GAAAyT,GAAAN,EAAAoC,CA+eA9gC,GAAA2gC,oBAAA,WACAG,IACAA,EAAArK,UACAqK,MAAAh/B,KAGA9B,EAAAgyB,mBAAA,WACAlvB,SAAAqf,oBAAA,QAAAniB,EAAAgyB,oBACAgN,EAAAh/B,EAAA4G,MAAAq4B,kBACAj/B,EAAA2gC,sBACA3gC,EAAAslB,aACAtlB,EAAAslB,YAAAmR,UAEAz2B,EAAAslB,gBAAAxjB,IAEA9B,EAAAsyB,iBAAA,SAAAtrB,EAAAqe,GAIA,QAAA0d,KACAr8B,sBAAA,WACA5D,SAAAwF,iBAAA,QAAAtI,EAAAgyB,oBACAlvB,SAAAqf,oBAAA,UAAA4gB,KANA,GAAA/iC,EAAAshB,UAAAta,EAAA8B,SAAA9I,EAAAkG,OAAA,CASA,GAAA88B,GACA/U,KACA7e,EAAAiW,GAAArlB,EAAAwlB,YAAAxe,GACAuN,GACA2R,YAAAlf,EACA0E,KAAA1L,EAAAimB,UAAA7W,EAAAxF,EAAAwF,EAAApF,GACAikB,QAEA1Z,GAAA7I,KAAAsI,QACAutB,EAAAhtB,GAEAvU,EAAAyG,cAAA,cAAA8N,IAGAA,EAAA7I,KAAAsI,SACAhU,EAAAslB,aACAtlB,EAAAgyB,qBAEAgR,GACAze,KAAAnV,EAAAxF,EAAAwF,EAAAugB,KAAApL,KACAvkB,EAAA4G,MAAAq8B,sBAAAjjC,EAAAuK,iBACA+Z,IAAAlV,EAAApF,EAAAoF,EAAAugB,KAAArL,IACAtkB,EAAA4G,MAAAs8B,qBAAAljC,EAAAwK,gBACA4c,MAAA7S,EAAA7I,KAAAK,MAAAwI,EAAA7I,KAAA9B,EAAAwF,EAAAugB,KAAApL,KACA4C,OAAA5S,EAAA7I,KAAAI,OAAAyI,EAAA7I,KAAA1B,EAAAoF,EAAAugB,KAAArL,IACAxY,OAAAyI,EAAA7I,KAAAI,OACAC,MAAAwI,EAAA7I,KAAAK,OAEA/L,EAAA8R,SACAkxB,EAAAze,KAAAvkB,EAAA4G,MAAAu8B,wBAAA,KACAH,EAAAj3B,MAAA/L,EAAA+L,MAAA,EAAA/L,EAAA4G,MAAAu8B,wBAAA,MAEAnjC,EAAAslB,YAAAyX,EAAAxoB,EAAAyuB,EAAA/U,GACAnrB,SAAAwF,iBAAA,UAAAy6B,GACA/7B,EAAAub,sBAKCrgB,MAAAtC,EAAAgC,MAAA/B,EAAAD,QAAAiC,ITiuJK,SAAUhC,EAAQD,EAASO,GUrxKjC,GAAAyB,GAAAC,CAEAD,UAmiBCE,MAniBDD,EAAA,WACA,YACA,iBAAA7B,GACAA,EAAAg6B,gBAAA,SAAAoJ,GACA,GAAAC,GAAArjC,EAAAk/B,SAAAl/B,EAAAyC,YACA6gC,EAAAtjC,EAAAk/B,SAAAkE,GACAzhC,EAAA3B,EAAA++B,aAAA/+B,EAAAkG,QACAq9B,GACA35B,EAAA,EACAI,EAAA,EACAD,EAAA,EACAD,EAAA,GAEA05B,GACA55B,GAAA65B,IACAz5B,GAAAy5B,IACA15B,EAAA05B,IACA35B,EAAA25B,KAEApqB,EAAArZ,EAAAsZ,4BACArB,EAAAjY,EAAAuZ,uBASA,OARA8pB,GAAA/e,KAAA3iB,EAAA2iB,IACA+e,EAAA9e,MAAA5iB,EAAA4iB,KACA+e,EAAAhf,KAAA3iB,EAAA2iB,IACAgf,EAAA/e,MAAA5iB,EAAA4iB,KACAgf,EAAAx5B,EAAAs5B,EAAA/e,IAAA+e,EAAAv3B,OAAAs3B,EAAAzuB,UAAA3U,EAAA4G,MAAAmS,eACAwqB,EAAAz5B,EAAAu5B,EAAA9e,KAAA8e,EAAAt3B,MAAAq3B,EAAAxuB,WAAA5U,EAAA4G,MAAAmS,eACAwqB,EAAA35B,EAAAy5B,EAAA9e,MAAA,EAAA+e,EAAA/e,KAAAtM,EACAsrB,EAAAv5B,EAAAq5B,EAAA/e,KAAA,EAAAgf,EAAAhf,IAAAjL,GAEAzP,EAAA25B,EAAA35B,EAAA45B,EAAA55B,EAAA25B,EAAA35B,EAAA45B,EAAA55B,EACAI,EAAAu5B,EAAAv5B,EAAAw5B,EAAAx5B,EAAAu5B,EAAAv5B,EAAAw5B,EAAAx5B,EACAD,EAAAw5B,EAAAx5B,EAAAy5B,EAAAz5B,EAAAw5B,EAAAx5B,EAAAy5B,EAAAz5B,EACAD,EAAAy5B,EAAAz5B,EAAA05B,EAAA15B,EAAAy5B,EAAAz5B,EAAA05B,EAAA15B,IAGA9J,EAAAq5B,YAAA,SAAA+J,GACA,GAAAG,GAAAvjC,EAAAg6B,gBAAAoJ,EACAG,GAAAz5B,EAAA,IAAiCy5B,EAAAz5B,EAAA,GACjCy5B,EAAAx5B,EAAA,IAAiCw5B,EAAAx5B,EAAA,GACjCq5B,EAAAx8B,MAAAmI,KAAA,QACAw0B,EAAAv5B,EAAA,MACAu5B,EAAAz5B,EAAA,MACAy5B,EAAAx5B,EAAA,MACAw5B,EAAA35B,EAAA,OAcA5J,EAAA++B,aAAA,SAAA/3B,GAEA,IADA,GAAA4C,GAAA,EAAAI,EAAA,EACAhD,EAAAvE,YAAA,oBAAAuE,EAAA+B,UAAA/B,IAAAhH,EAAA4C,MACA,yBAAAoE,EAAArE,UACA,yBAAAqE,EAAArE,WACAiH,GAAA5C,EAAA+N,WACA/K,GAAAhD,EAAA6N,WAEA7N,IAAAvE,UAEA,QACA8hB,KAAA3a,EAAA9G,SAAA4gC,iBAAA3uB,WACAuP,IAAAta,EAAAlH,SAAA4gC,iBAAA7uB,YAGA7U,EAAAglB,gBAAA,WACA,GAAAhlB,EAAAulB,OAAAvlB,EAAAulB,MAAAqM,SAAA,CACA,GAAAxiB,GAAApP,EAAAkG,OAAA0pB,wBACAjuB,EAAA3B,EAAA++B,aAAA/+B,EAAA4C,MACAohB,EAAA,aAAAhkB,EAAA4G,MAAAsS,mBAAA,IACAyqB,EAAA3jC,EAAA4G,MAAA6N,gBAAAuP,EACAtY,EAAA1L,EAAA4jC,sBAAA5jC,EAAAulB,MAAAqM,SAAA/e,YAAA7S,EAAAulB,MAAAqM,SAAA7jB,YAC4BnE,GAAA,IAAAI,GAAA,IAAA8B,OAAA,EAAAC,MAAA,EAC5B,IAAA/L,EAAA8R,OAKA,MAJA9R,GAAAulB,MAAA3e,MAAA2d,KAAA,IACAvkB,EAAAulB,MAAA3e,MAAA0d,IAAAtkB,EAAA8L,OAAA9L,EAAA4G,MAAAi9B,sBAAAF,EAAA,OACA3jC,EAAAulB,MAAA3e,MAAAkF,OAAA9L,EAAA4G,MAAAi9B,sBAAA,UACA7jC,EAAAulB,MAAA3e,MAAAmF,MAAA/L,EAAA+L,MAAA43B,EAAA,OAGA3jC,GAAAulB,MAAA3e,MAAA2d,KAAAnV,EAAAmV,KAAA7Y,EAAA9B,EAAA5J,EAAAuK,iBAAA5I,EAAA4iB,KAAA,KACAvkB,EAAAulB,MAAA3e,MAAA0d,IAAAlV,EAAAkV,IAAA5Y,EAAA1B,EAAAhK,EAAA4G,MAAA6N,gBAAAzU,EAAAwK,gBAAA7I,EAAA2iB,IAAA,KACAtkB,EAAAulB,MAAA3e,MAAAkF,OAAAJ,EAAAI,OAAA63B,EAAA,KACA3jC,EAAAulB,MAAA3e,MAAAmF,MAAAL,EAAAK,MAAA/L,EAAA4G,MAAAk9B,gBAAA,KACA9jC,EAAAq5B,YAAAr5B,EAAAulB,SAGAvlB,EAAAk/B,SAAA,SAAAl4B,EAAA+8B,GAEA,IADA,GAAAh6B,GAAAD,EAAAF,EAAA,EAAAI,EAAA,EAAArI,EAAAqF,EACAA,EAAAmO,cAAA,oBAAAnO,EAAA+B,UACAa,GAAA5C,EAAA4N,WACA5K,GAAAhD,EAAA2N,UACA5K,EAAA/C,EAAAkO,aACApL,EAAA9C,EAAAiO,YACAjO,IAAAmO,YAEA,OAAA4uB,IACwBxf,KAAA3a,EAAA0a,IAAAta,EAAA8B,OAAA/B,EAAAgC,MAAAjC,IAExB9C,EAAArF,EACAA,EAAA3B,EAAA++B,aAAA/3B,IACoBud,KAAA3a,EAAAjI,EAAA4iB,KAAAD,IAAAta,EAAArI,EAAA2iB,IAAAxY,OAAA/B,EAAAgC,MAAAjC,KAEpB9J,EAAAwlB,YAAA,SAAAxe,GACA,GAAA2oB,GAAA3vB,EAAAkG,OAAA0pB,wBACAxgB,GACAxF,EAAA5C,EAAA6oB,QAAAF,EAAApL,KACAva,EAAAhD,EAAA8oB,QAAAH,EAAArL,IAMA,OAJAtkB,GAAAwC,cACA4M,EAAAxF,GAAA5J,EAAAuK,iBACA6E,EAAApF,GAAAhK,EAAAwK,kBAGAZ,EAAAwF,EAAAxF,EACAI,EAAAoF,EAAApF,EACA2lB,SAUA3vB,EAAA+nB,QAAA,SAAAic,GAGA,QAAAC,KACAD,GAAA,EAHA,GAAAt4B,GAAA1L,EAAAulB,MAAAqM,SACA5nB,EAAA0B,EAAAqC,QAIA,IAAA/N,EAAAyG,cAAA,iBACAiF,OACAw4B,SAAAlkC,EAAAulB,MAAAvV,MACAm0B,SAAAz4B,EAAAsE,MACAg0B,MAAAC,EACA1e,MAAAvlB,EAAAulB,QACqB,QACrB,IAAAvlB,EAAAulB,MAAAvV,QAAAtE,EAAAsE,QAAAg0B,EAAA,CAQA,GAPAhkC,EAAA40B,QAAA5qB,GAAAhK,EAAA40B,QAAA5qB,OACAhK,EAAA40B,QAAA5qB,GAAA0B,EAAAuH,OAAArS,MAAAZ,EAAAulB,MAAAvV,MACAtE,EAAA1G,OACAhF,EAAAgF,KAAA0G,EAAAqC,aACArC,EAAA1G,KAAAhF,EAAAgF,KAAA0G,EAAAqC,WAEArC,EAAA1G,KAAA0G,EAAAuH,OAAArS,MAAAZ,EAAAulB,MAAAvV,MACAhG,IAAAhK,EAAAgF,KAAAiE,OAAA,CACA,GAAAjJ,EAAAyG,cAAA,UACAuJ,MAAAhQ,EAAAulB,MAAAvV,MACAwlB,aAAA9pB,EAAAsE,MACAo0B,QAAAJ,EACAt4B,OACA6Z,MAAAvlB,EAAAulB,QAC6B,QAC7BvlB,GAAA45B,OAAAluB,EAAA1G,MACAhF,EAAAy1B,mBAEAz1B,EAAAwL,MAAA,GAWA,MATA1I,UAAA4B,KAAAgyB,YAAA12B,EAAAulB,OACAvlB,EAAA4C,KAAA2oB,QACAvrB,EAAAyG,cAAA,WACAiF,OACAsE,MAAAhQ,EAAAulB,MAAAvV,MACAo0B,QAAAJ,EACAze,MAAAvlB,EAAAulB,QAEAvlB,EAAAulB,UAAAzjB,IACA,GAUA9B,EAAA+rB,YAAA,SAAAniB,EAAAI,GACA,GAAAhK,EAAAgC,WAAAqiC,SAAA,CACArkC,EAAAulB,OACAvlB,EAAA+nB,SAEA,IAEA6D,GACA0Y,EACAC,EACAC,EACAC,EANA/4B,EAAA1L,EAAA4jC,sBAAAh6B,EAAAI,EACAhK,GAAA2Z,WAMA,IAAAjO,KAAAuH,OAAA,CAGA,GADAsxB,EAAA74B,EAAAuH,OAAA,KACAjT,EAAAyG,cAAA,mBAAuDiF,SAAe,QACtE1L,GAAAgsB,eAAApiB,EAAAI,GACAhK,EAAAgoB,cAAApe,EAAAI,GACA4hB,EAAA5rB,EAAAwrB,mBAEAxrB,EAAAulB,MADAgf,EACAzhC,SAAAC,cAAA,UAEAD,SAAAC,cAAA/C,EAAAgC,WAAA0iC,UACA,oBAEAh5B,EAAA1L,EAAA4jC,sBAAAh6B,EAAAI,GAEA0B,IACA64B,IAEA,kBAAAA,GACAD,EAAAC,EAAAriC,MAAAlC,EAAA4C,OAAuD8I,UACtChI,MAAA2pB,QAAAkX,KACjBD,EAAAC,GAEAD,EAAAlhC,QAAA,SAAA4D,GACA,GACAV,GACAoP,EAFApV,EAAAwC,SAAAC,cAAA,SAGAW,OAAA2pB,QAAArmB,IACAV,EAAAU,EAAA,GACA0O,EAAA1O,EAAA,KAEAV,EAAAU,EACA0O,EAAA1O,GAEAV,IAAAoF,EAAAsE,QAA6Cy0B,GAAA,GAC7CnkC,EAAA0P,MAAA1J,EACAhG,EAAA4I,UAAAwM,EACA1V,EAAAulB,MAAAtgB,YAAA3E,KAEAmkC,IACAD,EAAA1hC,SAAAC,cAAA,UACAyhC,EAAAx0B,MAAAtE,EAAAsE,MACAw0B,EAAAt7B,UAAAwC,EAAAsE,MACAhQ,EAAAulB,MAAAtgB,YAAAu/B,IAEAxkC,EAAAulB,MAAAjd,iBAAA,oBACAtI,EAAA+nB,UACA/nB,EAAAwL,MAAA,MAGA1I,SAAA4B,KAAAO,YAAAjF,EAAAulB,OACAvlB,EAAA88B,kBAAA98B,EAAAulB,MAAAvlB,EAAA8R,OAAA,kEACA9R,EAAAulB,MAAA3e,MAAAs4B,SAAA,WACAl/B,EAAAulB,MAAAqM,SAAAlmB,EACA1L,EAAAglB,kBACAhlB,EAAAulB,MAAA3e,MAAAw4B,OAAAp/B,EAAA4G,MAAA+9B,eACA3kC,EAAAulB,MAAA3e,MAAAg+B,SAAAt9B,SAAAtH,EAAA4G,MAAAi+B,iBAAA,IAAA7kC,EAAAwM,MAAA,KACAxM,EAAAulB,MAAAvV,OAAA,cAAAlO,IAAA+C,QAAA6G,EAAAsE,OAAA,GAAAtE,EAAAsE,MACAhQ,EAAAulB,MAAAgG,QACAvrB,EAAAulB,MAAAjd,iBAAA,QAAAtI,EAAAgiB,iBACAhiB,EAAAulB,MAAAjd,iBAAA,WAAAtI,EAAAgiB,iBACAhiB,EAAAulB,MAAAjd,iBAAA,UAAAtI,EAAAgiB,iBACAhiB,EAAAulB,MAAAjd,iBAAA,YAAAtI,EAAAgiB,iBACAhiB,EAAAulB,MAAAjd,iBAAA,mBAAAtB,GACA,GAAA89B,GAAAp5B,EAAAmH,YACAkyB,EAAAr5B,EAAAqC,QAEA,SAAA/G,EAAA8kB,QACA9rB,EAAA+nB,SAAA,GACA/nB,EAAAwL,MAAA,OAEiB,SAAAxE,EAAA8kB,WACjB9rB,EAAAgC,WAAA0iC,WACA1kC,EAAAgC,WAAA0iC,WAAA19B,EAAAkgB,UACAlnB,EAAA+nB,UACA/nB,EAAAwL,MAAA,OACiB,QAAAxE,EAAA8kB,QAAA,CAEjB,GADA9kB,EAAAub,kBACAviB,EAAA+nB,UACA,MAGA+c,GADA99B,EAAAkgB,SACA0E,EAAArH,KAEAqH,EAAAxE,MAEAwE,EAAArH,OAAA3a,GAAA5C,EAAAkgB,WACA4d,EAAAlZ,EAAAF,KACAqZ,GAAA,GAEAnZ,EAAAxE,QAAAxd,GAAA5C,EAAAkgB,WACA4d,EAAAlZ,EAAAH,MACAsZ,GAAA,GAEAA,EAAA,IACAA,EAAA/kC,EAAAgF,KAAAiE,OAAA,GAEA87B,EAAA/kC,EAAAgF,KAAAiE,OAAA,IACA87B,EAAA,GAEAhuB,QAAAiuB,IAAA,KAAAF,EAAA,KAAAC,GACA/kC,EAAAgsB,eAAA8Y,EAAAC,GACA/kC,EAAA+rB,YAAA+Y,EAAAC,MAGA/kC,EAAAyG,cAAA,aAA6CiF,OAAA6Z,MAAAvlB,EAAAulB,YAE7CvlB,EAAA88B,kBAAA,SAAAvzB,EAAA07B,GACA,GAAAC,IACAC,6CACAr5B,OAAA,OACAs5B,cAAA,SACAC,WAAA,MACAC,QAAA,IACApF,WAAAlgC,EAAA4G,MAAAu5B,6BACA/1B,MAAApK,EAAA4G,MAAAw5B,wBACAmF,OAAAvlC,EAAA4G,MAAA4+B,yBACAC,aAAAzlC,EAAA4G,MAAA8+B,+BACAC,WAAA,SACAC,WAAA,SACAC,WAAA7lC,EAAA4G,MAAAk/B,6BACAlB,SAAA5kC,EAAA4G,MAAAm/B,4BAEAC,8CACAl6B,OAAA,OACAs5B,cAAA,SACAC,WAAA,MACAC,QAAA,IACApF,WAAAlgC,EAAA4G,MAAAq/B,sBACA77B,MAAApK,EAAA4G,MAAAs/B,iBACAX,OAAAvlC,EAAA4G,MAAAu/B,0BACAV,aAAAzlC,EAAA4G,MAAAw/B,gCACAT,WAAA,SACAC,WAAA,SACAC,WAAA7lC,EAAA4G,MAAAy/B,kCACAzB,SAAA5kC,EAAA4G,MAAA0/B,iCAEAC,uCACAC,SAAA,QACAp8B,MAAApK,EAAA4G,MAAA6/B,2BACA7B,SAAA5kC,EAAA4G,MAAA8/B,8BACAb,WAAA7lC,EAAA4G,MAAA+/B,sBACAvB,cAAA,UAEAwB,gCACAf,WAAA7lC,EAAA4G,MAAA+/B,sBACA/B,SAAA5kC,EAAA4G,MAAAigC,oBACA3G,WAAAlgC,EAAA4G,MAAAq/B,sBACA77B,MAAApK,EAAA4G,MAAAs/B,iBACAX,OAAAvlC,EAAA4G,MAAAkgC,kBACAxB,QAAAtlC,EAAA4G,MAAAmgC,mBACAtB,aAAAzlC,EAAA4G,MAAAogC,wBACAC,QAAAjnC,EAAA4G,MAAAsgC,mBACAhI,SAAA,WACAE,OAAA,KACA+H,SAAA,UAEAC,qCACAlH,WAAAlgC,EAAA4G,MAAAq/B,sBACA77B,MAAApK,EAAA4G,MAAAs/B,kBAEAmB,2CACAnH,WAAAlgC,EAAA4G,MAAA0gC,2BACAl9B,MAAApK,EAAA4G,MAAA2gC,uBAEAC,0BACAtI,SAAA,WACAE,OAAA,MAEAqI,mBACAC,QAAA,SAEAC,iCACAzI,SAAA,QACA5a,IAAA,OACAC,KAAA,OACAghB,OAAA,OACA0B,QAAA,IACAngB,OAAA,UACA/a,MAAA,MACAD,OAAA,MACA65B,WAAA,SACAC,WAAA,SACAC,WAAA7lC,EAAA4G,MAAA+/B,sBACA/B,SAAA5kC,EAAA4G,MAAAigC,qBAEAe,qCACAC,UAAA,cACAC,QAAA,OACAC,OAAA,IACAzC,QAAA,UACAK,WAAA,SACAC,WAAA,SACAC,WAAA7lC,EAAA4G,MAAAohC,qBACApD,SAAA5kC,EAAA4G,MAAAqhC,mBACA1C,OAAAvlC,EAAA4G,MAAAshC,eACA99B,MAAApK,EAAA4G,MAAAuhC,cACAjI,WAAAlgC,EAAA4G,MAAAwhC,wBACAC,WAAA,OACAC,iBAAA,OACAC,cAAA,OACA9C,aAAA,KAEA+C,8BACAX,UAAA,cACAC,QAAA,OACAC,OAAA,IACAzC,QAAA,SAAAtlC,EAAA4G,MAAA6hC,oBAAA,KACA9C,WAAA,SACAC,WAAA,SACAC,WAAA7lC,EAAA4G,MAAA8hC,mBACA9D,SAAA5kC,EAAA4G,MAAAi+B,iBACA8D,UAAA3oC,EAAA4G,MAAAgiC,kBACArD,OAAAvlC,EAAA4G,MAAAshC,eACA99B,MAAApK,EAAA4G,MAAAuhC,cACAjI,WAAAlgC,EAAA4G,MAAAwhC,wBACAC,WAAA,OACAC,iBAAA,OACAC,cAAA,OACA9C,aAAA,KAEAoD,4CACAlD,WAAA,SACAC,WAAA,SACAC,WAAA7lC,EAAA4G,MAAA+/B,sBACA/B,SAAA5kC,EAAA4G,MAAAigC,oBACAz8B,MAAA,UACA81B,WAAA,UACA6H,OAAA/nC,EAAA4G,MAAAkiC,sBACArD,aAAAzlC,EAAA4G,MAAAmiC,4BACA3D,cAAA,UAEA4D,qCACArD,WAAA,SACAC,WAAA,SACAC,WAAA7lC,EAAA4G,MAAA+/B,sBACA/B,SAAA5kC,EAAA4G,MAAAigC,oBACAz8B,MAAA,UACA81B,WAAA,UACA6H,OAAA/nC,EAAA4G,MAAAkiC,sBACArD,aAAAzlC,EAAA4G,MAAAmiC,4BACA3D,cAAA,UAEA6D,2CACA/I,WAAAlgC,EAAA4G,MAAA0gC,2BACAl9B,MAAApK,EAAA4G,MAAA2gC,uBAEA2B,sCACAnB,OAAA/nC,EAAA4G,MAAAuiC,uBACAzB,QAAA1nC,EAAA4G,MAAAwiC,wBACA3J,SAAAz/B,EAAA4G,MAAAyiC,yBACAC,SAAAtpC,EAAA4G,MAAA2iC,0BAEAC,uCACA7D,WAAA,SACAC,WAAA,SACAC,WAAA7lC,EAAA4G,MAAA+/B,sBACA/B,SAAA5kC,EAAA4G,MAAAigC,oBACA3G,WAAAlgC,EAAA4G,MAAAq/B,sBACA77B,MAAApK,EAAA4G,MAAAs/B,iBACAX,OAAAvlC,EAAA4G,MAAAkgC,kBACAxB,QAAAtlC,EAAA4G,MAAAmgC,mBACAtB,aAAAzlC,EAAA4G,MAAAogC,wBACAC,QAAAjnC,EAAA4G,MAAAsgC,mBACAC,SAAA,SACAsC,WAAA,UAEAC,gCACA/D,WAAA,SACAC,WAAA,SACAC,WAAA7lC,EAAA4G,MAAA+/B,sBACA/B,SAAA5kC,EAAA4G,MAAAigC,oBACA3G,WAAAlgC,EAAA4G,MAAAq/B,sBACA77B,MAAApK,EAAA4G,MAAAs/B,iBACAX,OAAAvlC,EAAA4G,MAAAkgC,kBACAxB,QAAAtlC,EAAA4G,MAAAmgC,mBACAtB,aAAAzlC,EAAA4G,MAAAogC,wBACAC,QAAAjnC,EAAA4G,MAAAsgC,mBACAC,SAAA,SACAsC,WAAA,UAEAE,yCACAzJ,WAAAlgC,EAAA4G,MAAAgjC,mCAGA1E,GAAAD,IACAlkC,OAAA4D,KAAAugC,EAAAD,IAAA3X,IAAA,SAAA9nB,GACA+D,EAAA3C,MAAApB,GAAA0/B,EAAAD,GAAAz/B,MAKAxF,EAAA84B,SAAA,SAAA9xB,GACAhH,EAAAyC,WAAAuE,EACAhH,EAAAo4B,UAEAp4B,EAAAo4B,OAAA,WACAp4B,EAAAwC,aACAxC,EAAAyV,WAAAzV,EAAAyC,WAAAgT,WACAzV,EAAAyK,IAAAzK,EAAAyV,WAAAtT,QACAnC,EAAAkG,OAAAlG,EAAAyV,WAAAvP,OACAlG,EAAAsrB,aAAAtrB,EAAAyV,WAAA6V,aACAtrB,EAAA22B,YAAA32B,EAAAkG,SAEAlG,EAAAsrB,aAAAtrB,EAAAsrB,cAAAxoB,SAAAC,cAAA,SACA/C,EAAAsrB,aAAAue,OAAA7pC,EAAA4C,KAAA64B,KACAz7B,EAAA88B,kBAAA98B,EAAAsrB,aAAA,iCACAtrB,EAAAwC,aAAA,EACAxC,EAAAq+B,cAAAr+B,EAAAyC,WACAzC,EAAA8pC,eAAA,YAAApnC,KAAA1C,EAAAq+B,cAAAp4B,SACAjG,EAAA8pC,gBACA9pC,EAAAkG,OAAAlG,EAAAq+B,cACAr+B,EAAAq+B,cAAAp5B,YAAAjF,EAAAsrB,gBAEAtrB,EAAAkG,OAAApD,SAAAC,cAAA,UACA/C,EAAAq+B,cAAAp5B,YAAAjF,EAAAkG,QACAlG,EAAAq+B,cAAAp5B,YAAAjF,EAAAsrB,eAEAtrB,EAAA88B,kBAAA98B,EAAAkG,OAAA,mBACAlG,EAAAyK,IAAAzK,EAAAkG,OAAA6jC,WAAA,MACA/pC,EAAAyK,IAAAu/B,aAAA,aACAhqC,EAAA22B,YAAA32B,EAAAkG,QAEAlG,EAAAyjB,gBAAAzjB,EAAAkG,OAAAU,MACA5G,EAAAsrB,aAAAkS,aAAA,eACAx9B,EAAAsrB,aAAAhjB,iBAAA,gBAAAtB,GACAA,EAAA8B,SAAA9I,EAAAkG,SACAlG,EAAAshB,UAAA,KAGAthB,EAAA22B,YAAAruB,iBAAA,SAAAtI,EAAA2G,QAAA,GACA3G,EAAA22B,YAAAruB,iBAAA,aAAAtI,EAAA6xB,YAAA,GACA7xB,EAAA22B,YAAAruB,iBAAA,UAAAtI,EAAAqrB,SAAA,GACArrB,EAAA22B,YAAAruB,iBAAA,YAAAtI,EAAA6qB,WAAA,GACA7qB,EAAA22B,YAAAruB,iBAAA,WAAAtI,EAAAqsB,UAAA,GACArsB,EAAA22B,YAAAruB,iBAAA,QAAAtI,EAAA4nB,OAAA,GACA5nB,EAAA22B,YAAAruB,iBAAA,YAAAtI,EAAAolB,WACAplB,EAAA22B,YAAAruB,iBAAA,QAAAtI,EAAAwsB,aAAA,GACAxsB,EAAAkG,OAAAoC,iBAAA,cAAAtI,EAAAsyB,kBAAA,GACAtyB,EAAAsrB,aAAAhjB,iBAAA,OAAAtI,EAAAquB,MACAruB,EAAAsrB,aAAAhjB,iBAAA,MAAAtI,EAAAouB,KACApuB,EAAAsrB,aAAAhjB,iBAAA,QAAAtI,EAAA+tB,OACA/tB,EAAAsrB,aAAAhjB,iBAAA,WAAAtI,EAAAosB,UAAA,GACApsB,EAAAsrB,aAAAhjB,iBAAA,QAAAtI,EAAAmsB,OAAA,GACAnsB,EAAAsrB,aAAAhjB,iBAAA,UAAAtI,EAAA2rB,SAAA,GACA9nB,OAAAyE,iBAAA,SAAAtI,EAAA2G,WAGCzE,MAAAtC,EAAAgC,MAAA/B,EAAAD,QAAAiC,IV6xKK,SAAUhC,EAAQD,EAASO,GWl0LjC,GAAAyB,GAAAC,CAEAD,UAknCCE,MAlnCDD,EAAA,WACA,YACA,iBAAA7B,GAQAA,EAAAw6B,eAAA,SAAAp5B,GAKA,IAJA,GAAA6oC,GAAA,IAAAC,WAAA,GACAC,EAAA,IAAAD,WAAA,GACAE,EAAAD,EAAAF,EAAA,EACAtoC,EAAA,GACAP,GAAA,GACAO,EAAAk5B,OAAAwP,aAAAjpC,EAAAgpC,EAAAH,GAAAtoC,EACAP,EAAA0J,KAAAqa,MAAA/jB,EAAAgpC,GAAA,CAEA,OAAAzoC,IAWA3B,EAAA65B,aAAA,SAAAn5B,EAAAmX,GACA,GAAAlW,GAAA3B,EAAA2Z,WACA,IAAAhY,EAAAsH,OAAA4O,EACA,SAAA5Q,OAAA,4CAEAjH,GAAAk2B,eAAAx1B,EAAAiB,GACAA,EAAA2gB,OAAAzK,EAAA,EAAAnX,GACAV,EAAAgF,KAAA5B,QAAA,SAAAoR,GACAxU,EAAAu1B,kBAAA/gB,EAAA9T,KAEAV,EAAA4C,KAAAsE,OAAAvF,GAUA3B,EAAA85B,aAAA,SAAAjiB,GACA,GAAAlW,GAAA3B,EAAA2Z,WAEA3Z,GAAAgF,KAAA5B,QAAA,SAAAoR,SACAA,GAAA7S,EAAAkW,GAAAjX,QAEAe,EAAA2gB,OAAAzK,EAAA,GACA7X,EAAA4C,KAAAsE,OAAAvF,GAUA3B,EAAA+5B,UAAA,SAAAr5B,GACA,GAAAiB,GAAA3B,EAAA2Z,WACA3Z,GAAAk2B,eAAAx1B,EAAAiB,GACAA,EAAAmG,KAAApH,GACAV,EAAAgF,KAAA5B,QAAA,SAAAoR,GACAxU,EAAAu1B,kBAAA/gB,EAAA9T,KAEAV,EAAA4C,KAAAsE,OAAAvF,GASA3B,EAAA25B,UAAA,SAAA9hB,GACA7X,EAAAi2B,aAAA3T,OAAAzK,EAAA,GACA7X,EAAAu5B,YACAv5B,EAAA2G,QAAA,IAUA3G,EAAA05B,UAAA,SAAA/4B,EAAAkX,GACA,GAAA7X,EAAAi2B,aAAAhtB,OAAA4O,EACA,SAAA5Q,OAAA,6CAEAjH,GAAAi2B,aAAA3T,OAAAzK,EAAA,EAAAlX,GACAX,EAAA2Z,YAAAvW,QAAA,SAAA1C,OACAoB,KAAAnB,EAAAD,EAAAE,OACAZ,EAAAu1B,kBAAAv1B,EAAAi2B,aAAApe,GAAAnX,KAGAV,EAAAu5B,YACAv5B,EAAA2G,QAAA,IASA3G,EAAA45B,OAAA,SAAAj5B,GACAX,EAAAi2B,aAAAnuB,KAAAnH,GACAX,EAAA2Z,YAAAvW,QAAA,SAAA1C,OACAoB,KAAAnB,EAAAD,EAAAE,OACAZ,EAAAu1B,kBAAAv1B,EAAAi2B,aAAAj2B,EAAAi2B,aAAAhtB,OAAA,GAAAvI,KAGAV,EAAAu5B,YACAv5B,EAAA2G,QAAA,IAUA3G,EAAAi6B,aAAA,SAAAlsB,EAAAjC,GACA9L,EAAAmR,MAAA+C,KAAAnG,GAAAjC,EACA9L,EAAAwL,MAAA,IAUAxL,EAAAk6B,eAAA,SAAAtM,EAAA7hB,GACA/L,EAAAmR,MAAAD,QAAA0c,GAAA7hB,EACA/L,EAAAwL,MAAA,IASAxL,EAAAm6B,kBAAA,WACAn6B,EAAAmR,MAAAD,WACAlR,EAAAwL,MAAA,IASAxL,EAAAo6B,gBAAA,WACAp6B,EAAAmR,MAAA+C,QACAlU,EAAAwL,MAAA,IAUAxL,EAAAu5B,UAAA,SAAA1oB,EAAAb,GACA,QAAAs6B,KACAtqC,EAAAg2B,yBACAj1B,OAAA4D,KAAA3E,EAAAkX,eAAA9T,QAAA,SAAAiC,GACA,GAAA4N,GAAAjT,EAAAi3B,gBAAApmB,EACAoC,KAGAjT,EAAAw0B,cAAAvhB,EAAA5N,QAAArF,EAAAqF,OAAAwL,EAAAxI,MAAA,UACArI,EAAAgF,KAAAhF,EAAAgF,KAAAK,OAAA,SAAAmP,GACA,MAAAxU,GAAAw0B,cAAAhgB,EAAAnP,GAAArF,EAAAkX,cAAA7R,SAGArF,EAAA2G,SACA3G,EAAAwL,MAAA,GAEA,OAAA1J,KAAA+O,OAAA/O,KAAAkO,EAEA,MADAhQ,GAAAkX,iBACAozB,KAEAz5B,GAAA,KAAAb,OAAAlO,KAAAkO,EAGAhQ,EAAAkX,cAAArG,GAAAb,QAFAhQ,GAAAkX,cAAArG,GAIAy5B,KASAtqC,EAAAm5B,iBAAA,SAAAprB,GACA,MAAA/N,GAAAmkB,YAAAna,EAAA+D,IAAA/N,EAAAgC,WAAAuZ,kBAAAvb,EAAAsZ,4BAAA,IASAtZ,EAAAk5B,qBAAA,SAAArmB,GACA,GAAA0R,GAAA,EAAAva,EAAA,EAAArI,EAAA3B,EAAA2Z,WACA,IAAA9G,EADAlR,EAAAsH,OAAA,EAEA,SAAAhC,OAAA,0BAEA,MAAA+C,EAAA6I,GACA0R,GAAAvkB,EAAAmR,MAAAD,QAAAlH,IAAArI,EAAAqI,GAAA+B,OAAA/L,EAAA4G,MAAAwK,UACApH,GAAA,CAEA,OAAAua,IAUAvkB,EAAAg5B,SAAA,SAAApvB,EAAAI,OACAlI,KAAA8H,IACA5J,EAAA8U,UAAAC,WAAA/U,EAAAk5B,qBAAAtvB,QAEA9H,KAAAkI,IACAhK,EAAA8U,UAAAD,UAAA7U,EAAAm5B,iBAAAnvB,KAUAhK,EAAAi5B,QAAA,SAAAjvB,GACAhK,EAAAg5B,SAAA,EAAAhvB,IAUAhK,EAAAgsB,eAAA,SAAApiB,EAAAI,GAQiB,IAPjBhK,EAAA+V,aAAA1Q,OAAA,SAAAqG,GACA,OAAAA,EAAAqC,WAAA/D,OAAAlI,KAAAkI,KACA0B,EAAAmH,cAAAjJ,OAAA9H,KAAA8H,IACA8B,EAAA9B,EAAA,GACA8B,EAAA1B,EAAA,GACA0B,EAAA9B,EAAA8B,EAAAK,MAAA/L,EAAA+L,OACAL,EAAA1B,EAAA0B,EAAAI,OAAA9L,EAAA8L,SACiB7C,QACjBjJ,EAAAg5B,SAAApvB,EAAAI,IAWAhK,EAAAgoB,cAAA,SAAApe,EAAAI,GACAJ,EAAA,IAAwBA,EAAA,GACxBI,EAAA,IAAwBA,EAAA,GACxBhK,EAAA6T,YACA9F,SAAA/D,EACA6I,YAAAjJ,IAUA5J,EAAAq6B,WAAA,SAAAnV,GACAllB,EAAA4S,cACA5S,EAAAyG,cAAA,oBACAylB,aAAAlsB,EAAA8nB,kBACAlV,WAAA5S,EAAA4S,WACA6U,gBAAAznB,EAAAynB,kBAEAvC,GACAllB,EAAAwL,QASAxL,EAAAioB,UAAA,SAAA/C,GACAllB,EAAA0nB,YACApD,IAAA,EACAC,KAAA,EACA6C,MAAApnB,EAAA8Q,mBAAA7H,OAAA,EACAke,OAAAnnB,EAAAgF,KAAAiE,OAAA,IAEAic,GACAllB,EAAAwL,QASAxL,EAAAuqC,iBAAA,SAAA13B,GACA,GAAA23B,IAAA,CAMA,OALAxqC,GAAAgF,KAAA5B,QAAA,SAAAoR,EAAAzG,GACA/N,EAAA4S,WAAA7E,KAAA,IAAA/N,EAAA4S,WAAA7E,GAAAlJ,QAAA7E,EAAAiR,OAAAC,QAAA2B,MACA23B,GAAA,KAGAA,GAUAxqC,EAAAsuB,oBAAA,SAAArM,EAAA8S,GACA,GAAAp0B,MAAAgB,EAAAozB,EAAA/0B,EAAA2Z,YAAA3Z,EAAA8Q,mBAAAvQ,EAAAP,EAAAgF,KAAAiE,MACAjJ,GAAA4S,WAAAxP,QAAA,SAAAoR,EAAAqD,GACA,GAAAA,IAAAtX,EAAA,CACA,OAAAiU,EAAAvL,OAEA,YADAtI,EAAAkX,GAAA,KAGAlX,GAAAkX,MACArD,EAAApR,QAAA,SAAA4xB,IACA,IAAAA,GAAArzB,EAAAqzB,IACA/S,EAAAjiB,EAAAgF,KAAA6S,EAAAlW,EAAAqzB,GAAAp0B,YAcAZ,EAAAmoB,aAAA,SAAAtV,EAAA+S,EAAA6kB,EAAAC,GAEA,QAAAC,GAAArqC,GACAN,EAAAgF,KAAA5B,QAAA,SAAAoR,EAAAzG,GACA/N,EAAA4S,WAAA7E,GAAA/N,EAAA4S,WAAA7E,QACA,IAAA/N,EAAA4S,WAAA7E,GAAAlJ,QAAAvE,IACAN,EAAA4S,WAAA7E,GAAAjG,KAAAxH,KALA,GAAAqB,GAAAqF,EAAA4C,CAiBA,IAAA6gC,EAAA,CACA,IAAAzqC,EAAA6T,WAAuC,MAGvC,KAFAlS,EAAAmJ,KAAAiG,IAAA/Q,EAAA6T,WAAAhB,eACA7L,EAAA8D,KAAAX,IAAAnK,EAAA6T,WAAAhB,eACAjJ,EAAAjI,EAA2BqF,EAAA4C,EAAOA,GAAA,EAClC+gC,EAAA/gC,GAGAgc,GAAA6kB,IACAzqC,EAAA4S,cACA5S,EAAA6T,WAAAhB,cACA7S,EAAA6T,WAAA9F,SAAA/N,EAAAoa,gBAEAwL,GAAA5lB,EAAAuqC,iBAAA13B,GArBA,SAAAvS,GACAN,EAAAgF,KAAA5B,QAAA,SAAAoR,EAAAzG,GACA/N,EAAA4S,WAAA7E,GAAA/N,EAAA4S,WAAA7E,QACA,IAAA/N,EAAA4S,WAAA7E,GAAAlJ,QAAAvE,IACAN,EAAA4S,WAAA7E,GAAAuU,OAAAtiB,EAAA4S,WAAA7E,GAAAlJ,QAAAvE,GAAA,MAkBAuS,GAEA83B,EAAA93B,GAEA63B,GACA1qC,EAAAyG,cAAA,oBACAylB,aAAAlsB,EAAA8nB,kBACAlV,WAAA5S,EAAA4S,WACA6U,gBAAAznB,EAAAqnB,wBAaArnB,EAAAwnB,UAAA,SAAAzZ,EAAA6X,EAAA6kB,EAAAC,GAEA,QAAA9Q,GAAAgR,GACA5qC,EAAA4S,WAAAg4B,MACA5qC,EAAA4S,WAAAg4B,GAAA9iC,MAAA,GACAnG,EAAAyB,QAAA,SAAA4xB,EAAAnd,GACA7X,EAAA4S,WAAAg4B,GAAA9iC,KAAA+P,KALA,GAAAjO,GAAAihC,EAAA/sB,EAAAnc,EAAA3B,EAAA8Q,kBAQA,UAAA9Q,EAAAunB,wBAAAzlB,KAAA9B,EAAA8qC,aACA9qC,EAAA4S,WAAA7E,IAAA/N,EAAA4S,WAAA7E,GAAA9E,OAAA,IAAAtH,EAAAsH,QACA2c,EAEA,YADA5lB,EAAA4S,WAAA7E,MAKA,SAAA/N,EAAAunB,wBAAAzlB,KAAA9B,EAAA8qC,WACA,GAAAL,OAAA3oC,KAAA9B,EAAA8qC,WAAA,CACA,IAAA9qC,EAAA6T,WAA2C,MAG3C,KAFAg3B,EAAA//B,KAAAiG,IAAA/Q,EAAA6T,WAAA9F,YACA+P,EAAAhT,KAAAX,IAAAnK,EAAA6T,WAAA9F,YACAnE,EAAAihC,EAAgC/sB,GAAAlU,EAASA,GAAA,EACzCgwB,EAAAhwB,OAGAgwB,GAAA7rB,EAGA28B,IACA1qC,EAAAyG,cAAA,oBACAylB,aAAAlsB,EAAA8nB,kBACAlV,WAAA5S,EAAA4S,WACA6U,gBAAAznB,EAAAynB,mBAUAznB,EAAAy5B,aAAA,SAAA1rB,GACA/N,EAAAyG,cAAA,gBACAskC,UAAA/qC,EAAAwW,WAAAzI,GACA/I,KAAAhF,EAAAgF,KAAA+I,GACAA,aAEA/N,EAAA8N,aAAAC,GAAA0tB,OACAz7B,EAAA8N,aAAAC,GAAA0oB,gBACAz2B,GAAA8N,aAAAC,SACA/N,GAAAmR,MAAAoH,MAAAxK,SACA/N,GAAAwW,WAAAzI,GACA/N,EAAAyG,cAAA,aACAuO,WAAAhV,EAAA4G,MAAAoO,aAEAhV,EAAA2G,QAAA,GACA3G,EAAAwL,MAAA,IASAxL,EAAAw5B,WAAA,SAAAzrB,GACA,GAIA+K,GAJAkyB,EAAAhrC,EAAAsC,KAAA4xB,uBACA7a,EAAArZ,EAAAsZ,4BACArB,EAAAjY,EAAAmR,MAAAD,QAAA4E,YAAA9V,EAAA4G,MAAAqR,mBACAlO,EAAA/J,EAAAmR,MAAAoH,MAAAxK,IAAA/N,EAAA4G,MAAAqkC,cAEAjrC,GAAAwW,WAAAzI,KACAi9B,EAAA7vB,MAAAnb,EAAAgC,WAAAmZ,MACA6vB,EAAApqC,KAAAZ,EAAAgC,WAAAyU,eAAAzW,EAAAgC,WAAApB,KAAA,OAAAmN,MAAAjM,GACAkpC,EAAApkC,MAAAokC,EAAApkC,OAAA5G,EAAA4G,MACAokC,EAAAvoC,YACAgT,WAAAzV,EAAA4C,KACAD,SAAA,uBACAuS,aAAAnL,EACAkL,YAAAjV,EAAA+L,MAAAkM,EACAhF,QAA6BlH,MAAA/L,EAAA+L,MAAAkM,GAC7BrD,WAAAqD,EACAtD,UAAA0E,EACAlE,aAAAnV,EAAA4C,KAAAH,WACAA,WAAAzC,EAAA4C,KAAAH,WACAmE,MAAA,OACA5B,KAAAhF,EAAAgF,KAAA+I,IAEA+K,EAAA9Y,EAAAmD,WAAA6nC,GACAhrC,EAAAwW,WAAAzI,GAAA+K,GAEAA,EAAA9Y,EAAAwW,WAAAzI,GACA+K,EAAAlC,SAAA,EACA5W,EAAAyG,cAAA,cACAqS,WACA9T,KAAAhF,EAAAgF,KAAA+I,GACAA,aAEA/N,EAAA8N,aAAAC,GAAA+K,EACA9Y,EAAAmR,MAAAoH,MAAAxK,GAAAhE,EACA/J,EAAAyG,cAAA,aAA6CqF,OAAA9L,EAAA4G,MAAAoO,aAC7ChV,EAAA2G,QAAA,IASA3G,EAAAqoB,WAAA,SAAAta,GAEA,GADA/N,EAAA8N,aAAAC,GAEA,MAAA/N,GAAAy5B,aAAA1rB,EAEA/N,GAAAw5B,WAAAzrB,IAWA/N,EAAAi3B,gBAAA,SAAAr2B,GACA,GAAAgJ,GAAAtJ,EAAAN,EAAA2Z,WACA,KAAA/P,EAAA,EAAuBA,EAAAtJ,EAAA2I,OAAcW,GAAA,EACrC,GAAAtJ,EAAAsJ,GAAAhJ,SACA,MAAAN,GAAAsJ,IAYA5J,EAAAssB,kBAAA,SAAA1rB,EAAA+Q,GACA3R,EAAAkG,SACAlG,EAAAmR,MAAAD,QAAA,eAAAtQ,GAAA,EAAAZ,EAAAi3B,gBAAAr2B,GAAAiX,OACA/M,KAAAX,IAAAnK,EAAAw2B,wBAAA51B,GAAAZ,EAAA4G,MAAA6hB,gBACA9W,IACA3R,EAAA2G,SACA3G,EAAAwL,MAAA,MAqBAxL,EAAAo5B,cAAA,SAAA1tB,EAAAqC,GAEA,OAAAjM,KAAAiM,EACA,MAAA/N,GAAA+V,aAAA1Q,OAAA,SAAA3E,GACA,MAAAA,GAAAmS,cAAAnH,GAAAhL,EAAAqN,eACiB9E,OAAA,CAEjB,IAAAW,GAAArJ,EAAAP,EAAA+V,aAAA9M,MACA,KAAAW,EAAA,EAAuBA,EAAArJ,EAAOqJ,GAAA,EAC9B,GAAA8B,EAAA9B,IAAA5J,EAAA+V,aAAAnM,MAAA8B,EAAA1B,IAAAhK,EAAA+V,aAAAnM,GAAAI,EACA,QAGA,WAaAhK,EAAAib,MAAA,SAAA2a,EAAAsV,EAAAC,EAAAC,GACA,GAAAj3B,GACAzT,EAAAV,EAAA2Z,YAAAtU,OAAA,SAAA2vB,GACA,MAAAA,GAAAp0B,OAAAg1B,GAEA,KAAA51B,EAAAyG,cAAA,oBAAwD7F,KAAAg1B,EAAAsV,cAAxD,CAEA,GADAlrC,EAAA6W,QAAA+e,EACA,IAAAl1B,EAAAuI,OACA,SAAAhC,OAAA,oCAEAkN,GAAAg3B,GAAAnrC,EAAAy0B,QAAA/zB,EAAA,GAAA2H,MACA8L,OAAArS,KAAApB,EAAA,GAAA2H,MACA0O,QAAAC,KAAA,qDAAAtW,EAAA,GAAA2H,MAEArI,EAAAgF,KAAAhF,EAAAgF,KAAAqmC,KAAA,kBAAAl3B,KAAAyhB,EAAAsV,GAAAlrC,EAAAy0B,QAAA/sB,QACA1H,EAAAyG,cAAA,cAA8C7F,KAAAg1B,EAAAsV,cAC9ClrC,EAAAwL,MAAA,GACA4/B,GACAprC,EAAA+oB,mBAEA/oB,EAAAsmB,SAAA,SAAAtf,GACA,QAAAA,EAAA4C,EAAA,GACA5C,EAAA4C,EAAA5J,EAAA+L,OACA/E,EAAAgD,EAAA,GACAhD,EAAAgD,EAAAhK,EAAA8L,SAaA9L,EAAAyqB,cAAA,SAAA2C,EAAAke,GACA,GAAA5d,KACA1tB,GAAA4S,WAAAxP,QAAA,SAAAoR,EAAAzG,GACA2f,EAAA3f,EAAAu9B,MACA92B,EAAApR,QAAA,SAAAwqB,GACAF,EAAA3f,EAAAu9B,GAAAxjC,KAAA8lB,EAAAR,OAGAptB,EAAA4S,WAAA8a,GAWA1tB,EAAA2K,OAAA,SAAA+iB,EAAA9jB,EAAAI,GACA,GAGAuhC,GAHA5qC,EAAAX,EAAA8nB,kBACAnmB,EAAA3B,EAAA8Q,mBACAvQ,EAAAmtB,EAAAzkB,OAEA6kB,EAAA9jB,EAAA,CACA0jB,GAAAtqB,QAAA,SAAAoR,EAAAqD,GACAA,IAAAtX,GACA,IAAAiU,EAAAvL,QACAuL,EAAApR,QAAA,SAAA4xB,GACArzB,EAAAqzB,KACAh1B,EAAAgF,KAAA6S,KAA4C7X,EAAAgF,KAAA6S,OAC5C7X,EAAAgF,KAAA6S,GAAAlW,EAAAqzB,GAAAp0B,MAAA,UAGA8sB,EAAAtqB,QAAA,SAAAoR,EAAAqD,GACAiW,GAAA,EACAyd,EAAA3hC,EAAA,EACA4K,EAAApR,QAAA,SAAA4xB,EAAAwW,GACAD,GAAA,GACA,IAAAvW,IACArzB,EAAA4pC,KACA5pC,EAAAqzB,IACAh1B,EAAAgF,KAAAiE,OAAA,EAAA6kB,GACAA,EAAA,IACA9tB,EAAAgF,KAAA8oB,KAAyC9tB,EAAAgF,KAAA8oB,OACzC9tB,EAAAgF,KAAA8oB,GAAAnsB,EAAA4pC,GAAA3qC,MAAAD,EAAAkX,GAAAlW,EAAAqzB,GAAAp0B,YAYAZ,EAAAyrC,gBAAA,SAAA54B,GACA,MAAA7S,GAAA+V,aAAA1Q,OAAA,SAAA3E,GACA,MAAAA,GAAAmS,kBACa5J,OAAA,GAUbjJ,EAAA0rC,aAAA,SAAA39B,GACA,MAAA/N,GAAA+V,aAAA1Q,OAAA,SAAA3E,GACA,MAAAA,GAAAqN,eACa9E,OAAA,GAWbjJ,EAAA4jC,sBAAA,SAAAh6B,EAAAI,GACA,MAAAhK,GAAA+V,aAAA1Q,OAAA,SAAA3E,GACA,MAAAA,GAAAmS,cAAAjJ,GAAAlJ,EAAAqN,WAAA/D,IACa,IAWbhK,EAAAimB,UAAA,SAAArc,EAAAI,EAAA2hC,GAeA,GAAA3rC,EAAA+V,aAAA,CACA,GAAAwvB,GAGAjlC,EAEAsrC,EAGAlgC,EACAmgC,EARAC,EAAAH,EAAA3rC,EAAAgC,WAAA+pC,gBAAA,EACAC,EAAA,SAAAhsC,EAAAgC,WAAAiqC,mBAEA1rC,EAAAP,EAAA+V,aAAA9M,OAEAijC,EAAAF,EAAAhsC,EAAA24B,WAAA,YACAwT,EAAAH,EAAAhsC,EAAA24B,WAAA,WAGA,IAAA34B,EAAA+V,cAAA/V,EAAA+V,aAAA9M,OAAA,CAEA,GADAjJ,EAAAshB,UAAA,IACAtX,EAAAhK,EAAA8L,QACA9B,EAAA,GACAJ,EAAA5J,EAAA+L,OACAnC,EAAA,GAEA,MADA5J,GAAAshB,UAAA,GAEAC,YAAA,UACApf,QAAA,UAGA,KAAA7B,EAAA,EAAuBA,EAAAC,EAAOD,GAAA,EAe9B,GAdAoL,EAAA1L,EAAA+V,aAAAzV,GAEAurC,GACAjiC,EAAA8B,EAAA9B,EACAI,EAAA0B,EAAA1B,EACA8B,OAAAJ,EAAAI,OACAC,MAAAL,EAAAK,OAEA4/B,GAAA,gCAAAjpC,KAAAgJ,EAAA9E,SACAilC,EAAAjiC,GAAAkiC,EACAD,EAAA7hC,GAAA8hC,EACAD,EAAA//B,QAAAggC,EACAD,EAAA9/B,OAAA+/B,GAEAD,EAAAjiC,EAAA5J,EAAA4G,MAAA6N,gBAAA7K,GACAiiC,EAAAjiC,EAAAiiC,EAAA9/B,MAAA/L,EAAA4G,MAAA6N,gBAAA7K,GACAiiC,EAAA7hC,EAAAhK,EAAA4G,MAAA6N,gBAAAzK,GACA6hC,EAAA7hC,EAAA6hC,EAAA//B,OAAA9L,EAAA4G,MAAA6N,gBAAAzK,EAAA,CACA,uBAAAtH,KAAAgJ,EAAA9E,OAGA,MAFA8E,GAAA6V,YAAA7V,EAAA9E,MACA8E,EAAAvJ,QAAA,aACAuJ,CAEA,2BAAAhJ,KAAAgJ,EAAA9E,OAGA,MAFA8E,GAAA6V,YAAA7V,EAAA9E,MACA8E,EAAAvJ,QAAA,aACAuJ,CAEA,wBAAAhJ,KAAAgJ,EAAA9E,OAGA,MAFA8E,GAAA6V,YAAA7V,EAAA9E,MACA8E,EAAAvJ,QAAA,YACAuJ,CAEA,gCAAAhJ,KAAAgJ,EAAA9E,OAaA,MAZA8E,GAAA6V,YAAA,sBACA7V,EAAAvJ,QAAA,sBACAuJ,EAAAg2B,aAAA,EACAh2B,EAAA0gC,qBAAA,EACApiC,EAAAhK,EAAA8U,UAAA+P,IAAAjZ,EAAA5B,EAAAhK,EAAA8U,UAAA2J,iBACA/S,EAAA6V,YAAA,yBACA7V,EAAAvJ,QAAA,0BACyB6H,EAAAhK,EAAA8U,UAAA+P,IAAAjZ,EAAA5B,IACzB0B,EAAA6V,YAAA,sBACA7V,EAAAvJ,QAAA,uBAEAnC,EAAA8mB,OAAA,UACApb,CAEA,kCAAAhJ,KAAAgJ,EAAA9E,OAaA,MAZA8E,GAAA6V,YAAA,wBACA7V,EAAAvJ,QAAA,wBACAuJ,EAAAg2B,aAAA,EACAh2B,EAAA2gC,uBAAA,EACAziC,EAAA5J,EAAA8U,UAAA+P,IAAA9a,EAAAH,EAAA5J,EAAA8U,UAAAuJ,gBACA3S,EAAA6V,YAAA,0BACA7V,EAAAvJ,QAAA,2BACyByH,EAAA5J,EAAA8U,UAAA+P,IAAA9a,EAAAH,IACzB8B,EAAA6V,YAAA,yBACA7V,EAAAvJ,QAAA,0BAEAnC,EAAA8mB,OAAA,UACApb,CAKA,IAHA65B,EArGA,SAAAsG,GACA,MAAAA,GAAAjiC,EAAAiiC,EAAA9/B,MAAA,GAAA/L,EAAAgC,WAAAsqC,iBAAA1iC,GAAAiiC,EAAAjiC,EAAAiiC,EAAA9/B,MAAA,GAAA/L,EAAAgC,WAAAsqC,iBAAA1iC,EACA,IAEAiiC,EAAAjiC,EAAA,GAAA5J,EAAAgC,WAAAsqC,iBAAA1iC,GAAAiiC,EAAAjiC,EAAA,GAAA5J,EAAAgC,WAAAsqC,iBAAA1iC,EACA,IAEAiiC,EAAA7hC,EAAA6hC,EAAA//B,OAAA,GAAA9L,EAAAgC,WAAAsqC,iBAAAtiC,GAAA6hC,EAAA7hC,EAAA6hC,EAAA//B,OAAA,GAAA9L,EAAAgC,WAAAsqC,iBAAAtiC,EACA,IAEA6hC,EAAA7hC,EAAA,GAAAhK,EAAAgC,WAAAsqC,iBAAAtiC,GAAA6hC,EAAA7hC,EAAA,GAAAhK,EAAAgC,WAAAsqC,iBAAAtiC,EACA,QADA,IA2FA6hC,GAEAD,EAAAI,GAAAtgC,EAAAgH,kBAAA,IAAAhH,EAAAgH,gBAAA7N,QAAA0gC,IACA,cAAA1gC,QAAA0gC,KACAvlC,EAAAgC,WAAAuqC,mBAAAX,KACA5rC,EAAAgC,WAAAwqC,2BAAA9gC,EAAA6J,WAAA7J,EAAA6J,UAAAq2B,KACA5rC,EAAAgC,WAAAyqC,uBAAA/gC,EAAAiH,aAAAjH,EAAA6H,YAAA7H,EAAAiH,cAAAjH,EAAA6H,UAAA,CACA,IAAA7H,EAAA8H,gBAAA9H,EAAA6H,UAAAvT,EAAAgC,WAAAwqC,2BAAA9gC,EAAA6J,WAAA,MAAAgwB,EAGA,MAFA75B,GAAAvJ,QAAA,YACAuJ,EAAA6V,YAAA,YACA7V,CAEA,KAAAA,EAAA8H,iBAAA9H,EAAA6H,UAAAq4B,EAGA,MAFAlgC,GAAAvJ,QAAA+pC,EACAxgC,EAAA6V,YAAAgkB,EAAA,QACA75B,EAGA,kBAAA7G,QAAA0gC,IACA75B,EAAAqC,UAAA,IACA/N,EAAAgC,WAAA0qC,gBAAAd,KACA5rC,EAAAgC,WAAA2qC,wBAAAjhC,EAAA6J,WAAA7J,EAAA6J,UAAAq2B,KACAlgC,EAAA8H,eAAA,CACA,IAAA9H,EAAAiH,aAAAjH,EAAA6H,UAAAvT,EAAAgC,WAAA2qC,wBAAAjhC,EAAA6J,WAAA,MAAAgwB,EAGA,MAFA75B,GAAAvJ,QAAA,YACAuJ,EAAA6V,YAAA,YACA7V,CAEA,KAAAA,EAAAiH,cAAAjH,EAAA6H,UAAAq4B,EAGA,MAFAlgC,GAAAvJ,QAAAgqC,EACAzgC,EAAA6V,YAAAgkB,EAAA,QACA75B,EAGA,2BAAAA,EAAA9E,OACA8E,EAAAvJ,QAAA,OACAuJ,EAAA6V,YAAA,iBACA7V,GAEA,kBAAAA,EAAA9E,OACA5G,EAAAgC,WAAA4qC,iBAAAlhC,EAAA1B,EAAAhK,EAAA4G,MAAA6N,iBAAAzK,IACAhK,EAAAgC,WAAA8nB,oBACApe,EAAA6V,YAAA,OACA7V,EAAAvJ,QAAA,SAEAuJ,EAAAvJ,QAAAnC,EAAA24B,WACAjtB,EAAA6V,YAAA,eAEA7V,GAEAA,EAAAsI,QACAhU,EAAAshB,UAAA,EACA5V,EAAA6V,YAAA,YACA7V,EAAAvJ,QAAA,YACAuJ,GAEA,cAAAA,EAAA9E,OACA5G,EAAAshB,UAAA,EACA5V,EAAA6V,YAAA,OACA7V,EAAAvJ,QAAA,OACAuJ,IAEAA,EAAA6V,YAAA,OACA7V,EAAAvJ,QAAA,OACAuJ,GAKA,MAFA1L,GAAAshB,UAAA,EACAthB,EAAA8mB,OAAA,WAEAvF,YAAA,aACApf,QAAA,aACAyE,MAAA,aACA66B,cAAA,MAUAzhC,EAAAqnB,mBAAA,WACA,GAAA5d,IAAuBG,EAAA65B,IAAAz5B,EAAAy5B,KACvB/5B,GAAwBE,GAAA65B,IAAAz5B,GAAAy5B,IAUxB,OATAzjC,GAAA4S,WAAAxP,QAAA,SAAAoR,EAAAzG,GACA,GAAA8+B,GAAAC,CACArjC,GAAAO,EAAA+D,EAAAtE,EAAAO,EAAA+D,EAAAtE,EAAAO,EACAN,EAAAM,EAAA+D,EAAArE,EAAAM,EAAA+D,EAAArE,EAAAM,EACA6iC,EAAA/hC,KAAAX,IAAAjI,MAAA,KAAAsS,GACAs4B,EAAAhiC,KAAAiG,IAAA7O,MAAA,KAAAsS,GACA/K,EAAAG,EAAAkjC,EAAArjC,EAAAG,EAAAkjC,EAAArjC,EAAAG,EACAF,EAAAE,EAAAijC,EAAAnjC,EAAAE,EAAAijC,EAAAnjC,EAAAE,KAGA0a,IAAA7a,EAAAO,EACAua,KAAA9a,EAAAG,EACAud,OAAAzd,EAAAM,EACAod,MAAA1d,EAAAE,IAWA5J,EAAAs5B,kBAAA,SAAA34B,GAEA,MADAA,MAAAX,EAAAgF,KACAjE,OAAA4D,KAAAhE,EAAA,KAAwCosC,IAAA,KAAQzf,IAAA,SAAA7L,EAAA5J,GAChD,GAAAxP,GAAArI,EAAA21B,qBAAAlU,EAAA9gB,GACAL,GACAM,KAAA6gB,EACA/L,MAAAnO,MAAAD,SAAAma,EAAA,KAAAA,EAAAzhB,EAAAw6B,eAAA/Y,GAAA7b,cACAiS,QACAxP,OACAhD,OAAArF,EAAAqF,OAAAgD,GAOA,OALArI,GAAAg3B,gBACAh3B,EAAAg3B,eAAA9B,gBACApzB,KAAA9B,EAAAg3B,eAAA9B,WAAA50B,EAAAM,QACAN,EAAA8S,QAAApT,EAAAg3B,eAAA9B,WAAA50B,EAAAM,OAEAN,KAWAN,EAAA+4B,eAAA,WACA/4B,EAAA40B,YASA50B,EAAA0nB,WAAA,SAAAuL,EAAArN,GACA5lB,EAAAynB,gBAAAwL,GAAAjzB,EAAAynB,eACA,IAAAlT,GAAA3K,EAAAI,EAAArI,EAAA3B,EAAA2Z,WAIA,IAHAiM,IACA5lB,EAAA4S,eAEA5S,EAAAynB,gBAAAnD,KAAA,GACAtkB,EAAAynB,gBAAAN,OAAAnnB,EAAAgF,KAAAiE,QACAjJ,EAAAynB,gBAAAlD,MAAA,GACAvkB,EAAAynB,gBAAAL,MAAAzlB,EAAAsH,OACA,SAAAhC,OAAA,4BAEA,KAAA2C,EAAA5J,EAAAynB,gBAAAnD,IAA8C1a,GAAA5J,EAAAynB,gBAAAN,OAAkCvd,GAAA,EAEhF,IADA5J,EAAA4S,WAAAhJ,MACAI,EAAAhK,EAAAynB,gBAAAlD,KAAmDva,GAAAhK,EAAAynB,gBAAAL,MAAiCpd,GAAA,GACpF,IAAAhK,EAAA4S,WAAAhJ,GAAA/E,QAAAmF,IACAhK,EAAA4S,WAAAhJ,GAAA9B,KAAAkC,EAIAuK,IACA3B,WAAA5S,EAAA4S,WACA6U,gBAAAznB,EAAAynB,iBAEA1mB,OAAAC,eAAAuT,EAAA,gBACApT,IAAA,WACA,MAAAnB,GAAA8nB,qBAGA9nB,EAAAyG,cAAA,mBAAA8N,IAUAvU,EAAAw2B,wBAAA,SAAA51B,GACA,GAAAH,IAAAgjC,GACA,sBAAA7iC,GACAZ,EAAAyK,IAAAqM,KAAA9W,EAAA4G,MAAAomC,kBACAhtC,EAAAyK,IAAAsF,aAAA/P,EAAAgF,KAAAiE,QAAAjJ,EAAAgC,WAAAuY,WAAA,MAAAtD,YAAAlL,MACA/L,EAAA4G,MAAAqmC,gBAAAjtC,EAAA4G,MAAAsmC,0BACAltC,EAAA4G,MAAAumC,0BACAntC,EAAA4G,MAAAwmC,0BACAptC,EAAAgC,WAAAsU,KAAAtW,EAAA4G,MAAA8G,eACA1N,EAAA4G,MAAA6G,oBAAAzN,EAAA4G,MAAA4G,qBAAA,KAEAxN,EAAA2Z,YAAAvW,QAAA,SAAA4xB,GACA,GAAAA,EAAAp0B,SAAA,CACAZ,EAAAyK,IAAAqM,KAAA9W,EAAA4G,MAAAymC,oBACA,IAAAz9B,GAAA5P,EAAAyK,IAAAsF,YAAAilB,EAAAtf,OAAAsf,EAAAp0B,MAAAmL,MACA/L,EAAA4G,MAAA0mC,uBACAttC,EAAA4G,MAAA2mC,qBACA9sC,GAAAmP,EAAAnP,EAAAmP,EAAAnP,KAEAT,EAAAgF,KAAA5B,QAAA,SAAAoR,GACAxU,EAAAyK,IAAAqM,KAAA9W,EAAA4G,MAAA4mC,QACA,IAAA59B,GAAA5P,EAAAyK,IAAAsF,YAAAyE,EAAA5T,IAAAmL,MACA/L,EAAA4G,MAAA6mC,iBACAztC,EAAA4G,MAAAk9B,gBAAA9jC,EAAA4G,MAAA8mC,qBACAjtC,GAAAmP,EAAAnP,EAAAmP,EAAAnP,IAEAA,IAQAT,EAAA6a,eAAA,WACA,MAAA7a,GAAA8Q,mBAAA2O,OAAA,SAAAkuB,EAAA16B,GACA,MAAA06B,IAAA16B,EAAAlH,OAAA/L,EAAA4G,MAAAwK,YACa,IAEbpR,EAAAoU,WAAA1M,OAAA,SAAAV,GACA,WAAAlF,KAAAkF,EAAA0E,KAAAsE,MAAAhJ,EAAA0E,KAAAsE,MAAA,IAEAhQ,EAAAoU,WAAA4D,cAAAhY,EAAAoU,WAAA1M,OACA1H,EAAAoU,WAAAw5B,WAAA5tC,EAAAoU,WAAA1M,OACA1H,EAAAoU,WAAAhN,OAAApH,EAAAoU,WAAA1M,OACA1H,EAAAoU,WAAAy5B,IAAA7tC,EAAAoU,WAAA1M,OACA1H,EAAAoU,WAAA9I,KAAAtL,EAAAoU,WAAA1M,OACA1H,EAAAy0B,QAAA/sB,OAAA,SAAAkuB,EAAAsV,GACA,GAAA4C,GAAA,QAAA5C,CACA,iBAAApzB,EAAA5J,GACA,WAAApM,KAAAgW,EAAA8d,IAAA,OAAA9d,EAAA8d,GACA,MAEA9zB,KAAAoM,EAAA0nB,IAAA,OAAA1nB,EAAA0nB,GACA,EAEAkY,EACAh2B,EAAA8d,GAAAmY,cACAj2B,EAAA8d,GAAAmY,cAAA7/B,EAAA0nB,IADuD,EAGvD1nB,EAAA0nB,GAAAmY,cACA7/B,EAAA0nB,GAAAmY,cAAAj2B,EAAA8d,IADmD,IAInD51B,EAAAy0B,QAAArtB,OAAA,SAAAwuB,EAAAsV,GACA,GAAA4C,GAAA,QAAA5C,CACA,iBAAApzB,EAAA5J,GACA,MAAA4/B,GACAh2B,EAAA8d,GAAA1nB,EAAA0nB,GAEA1nB,EAAA0nB,GAAA9d,EAAA8d,KAGA51B,EAAAy0B,QAAAuZ,KAAA,SAAApY,EAAAsV,GACA,GAAA4C,GAAA,QAAA5C,CACA,iBAAApzB,EAAA5J,GACA,MAAA4/B,GACA,GAAAG,MAAAn2B,EAAA8d,IAAAsY,UACA,GAAAD,MAAA//B,EAAA0nB,IAAAsY,UAEA,GAAAD,MAAA//B,EAAA0nB,IAAAsY,UACA,GAAAD,MAAAn2B,EAAA8d,IAAAsY,cAIChsC,MAAAtC,EAAAgC,MAAA/B,EAAAD,QAAAiC","file":"canvas-datagrid.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"canvasDatagrid\"] = factory();\n\telse\n\t\troot[\"canvasDatagrid\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"canvasDatagrid\"] = factory();\n\telse\n\t\troot[\"canvasDatagrid\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 1);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        self.defaults = {\n            attributes: [\n                ['allowColumnReordering', true],\n                ['allowColumnResize', true],\n                ['allowColumnResizeFromCell', false],\n                ['allowFreezingRows', false],\n                ['allowFreezingColumns', false],\n                ['allowMovingSelection', true],\n                ['allowRowHeaderResize', true],\n                ['allowRowReordering', false],\n                ['allowRowResize', true],\n                ['allowRowResizeFromCell', false],\n                ['allowSorting', true],\n                ['autoGenerateSchema', false],\n                ['autoResizeColumns', false],\n                ['borderDragBehavior', 'none'],\n                ['borderResizeZone', 10],\n                ['clearSettingsOptionText', 'Clear saved settings'],\n                ['columnHeaderClickBehavior', 'sort'],\n                ['columnSelectorHiddenText', '&nbsp;&nbsp;&nbsp;'],\n                ['columnSelectorText', 'Add/Remove columns'],\n                ['columnSelectorVisibleText', '\\u2713'],\n                ['contextHoverScrollAmount', 2],\n                ['contextHoverScrollRateMs', 5],\n                ['copyHeadersOnSelectAll', true],\n                ['copyText', 'Copy'],\n                ['debug', false],\n                ['editable', true],\n                ['filterOptionText', 'Filter %s'],\n                ['filterTextPrefix', '(filtered) '],\n                ['globalRowResize', false],\n                ['hideColumnText', 'Hide %s'],\n                ['maxAutoCompleteItems', 200],\n                ['multiLine', false],\n                ['name', ''],\n                ['pageUpDownOverlap', 1],\n                ['pasteText', 'Paste'],\n                ['persistantSelectionMode', false],\n                ['removeFilterOptionText', 'Remove filter on %s'],\n                ['reorderDeadZone', 3],\n                ['resizeScrollZone', 20],\n                ['rowGrabZoneSize', 5],\n                ['saveAppearance', true],\n                ['scrollAnimationPPSThreshold', 0.75],\n                ['scrollPointerLock', false],\n                ['scrollRepeatRate', 75],\n                ['selectionFollowsActiveCell', false],\n                ['selectionHandleBehavior', 'none'],\n                ['selectionMode', 'cell'],\n                ['selectionScrollIncrement', 20],\n                ['selectionScrollZone', 20],\n                ['showClearSettingsOption', true],\n                ['showColumnHeaders', true],\n                ['showColumnSelector', true],\n                ['showCopy', false],\n                ['showFilter', true],\n                ['showNewRow', false],\n                ['showOrderByOption', true],\n                ['showOrderByOptionTextAsc', 'Order by %s ascending'],\n                ['showOrderByOptionTextDesc', 'Order by %s descending'],\n                ['showPaste', false],\n                ['showPerformance', false],\n                ['showRowHeaders', true],\n                ['showRowNumbers', true],\n                ['snapToRow', false],\n                ['touchContextMenuTimeMs', 800],\n                ['touchDeadZone', 3],\n                ['touchEasingMethod', 'easeOutQuad'],\n                ['touchReleaseAcceleration', 1000],\n                ['touchReleaseAnimationDurationMs', 2000],\n                ['touchScrollZone', 20],\n                ['touchSelectHandleZone', 20],\n                ['touchZoomSensitivity', 0.005],\n                ['touchZoomMin', 0.5],\n                ['touchZoomMax', 1.75],\n                ['maxPixelRatio', 2],\n                ['tree', false],\n                ['treeHorizontalScroll', false]\n            ],\n            styles: [\n                ['activeCellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['activeCellBorderWidth', 1],\n                ['activeCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellFont', '16px sans-serif'],\n                ['activeCellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['activeCellOverlayBorderWidth', 1],\n                ['activeCellPaddingBottom', 5],\n                ['activeCellPaddingLeft', 5],\n                ['activeCellPaddingRight', 7],\n                ['activeCellPaddingTop', 5],\n                ['activeCellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['activeCellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['activeColumnHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeColumnHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeRowHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeRowHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['autocompleteBottomMargin', 60],\n                ['autosizeHeaderCellPadding', 8],\n                ['autosizePadding', 5],\n                ['cellAutoResizePadding', 13],\n                ['cellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['cellBorderWidth', 1],\n                ['cellColor', 'rgba(0, 0, 0, 1)'],\n                ['cellFont', '16px sans-serif'],\n                ['cellGridHeight', 250],\n                ['cellHeight', 24],\n                ['cellHeightWithChildGrid', 150],\n                ['cellHorizontalAlignment', 'left'],\n                ['cellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['cellPaddingBottom', 5],\n                ['cellPaddingLeft', 5],\n                ['cellPaddingRight', 7],\n                ['cellPaddingTop', 5],\n                ['cellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['cellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['cellVerticalAlignment', 'center'],\n                ['cellWidth', 250],\n                ['cellWidthWithChildGrid', 250],\n                ['childContextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['childContextMenuArrowHTML', '&#x25BA;'],\n                ['childContextMenuMarginLeft', -11],\n                ['childContextMenuMarginTop', -6],\n                ['columnHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellBorderColor', 'rgba(172, 172, 172, 1)'],\n                ['columnHeaderCellBorderWidth', 1],\n                ['columnHeaderCellCapBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellCapBorderColor', 'rgba(172, 172, 172, 1)'],\n                ['columnHeaderCellCapBorderWidth', 1],\n                ['columnHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['columnHeaderCellFont', '16px sans-serif'],\n                ['columnHeaderCellHeight', 25],\n                ['columnHeaderCellHorizontalAlignment', 'left'],\n                ['columnHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['columnHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['columnHeaderCellPaddingBottom', 5],\n                ['columnHeaderCellPaddingLeft', 5],\n                ['columnHeaderCellPaddingRight', 7],\n                ['columnHeaderCellPaddingTop', 5],\n                ['columnHeaderCellVerticalAlignment', 'center'],\n                ['columnHeaderOrderByArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['columnHeaderOrderByArrowBorderWidth', 1],\n                ['columnHeaderOrderByArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['columnHeaderOrderByArrowHeight', 8],\n                ['columnHeaderOrderByArrowMarginLeft', 0],\n                ['columnHeaderOrderByArrowMarginRight', 5],\n                ['columnHeaderOrderByArrowMarginTop', 6],\n                ['columnHeaderOrderByArrowWidth', 13],\n                ['contextFilterButtonBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterButtonBorderRadius', '3px'],\n                ['contextFilterButtonHTML', '&#x25BC;'],\n                ['contextFilterInputBackground', 'rgba(255,255,255,1)'],\n                ['contextFilterInputBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterInputBorderRadius', '0'],\n                ['contextFilterInputColor', 'rgba(0,0,0,1)'],\n                ['contextFilterInputFontFamily', 'sans-serif'],\n                ['contextFilterInputFontSize', '14px'],\n                ['contextFilterInvalidRegExpBackground', 'rgba(180, 6, 1, 1)'],\n                ['contextFilterInvalidRegExpColor', 'rgba(255, 255, 255, 1)'],\n                ['contextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuArrowDownHTML', '&#x25BC;'],\n                ['contextMenuArrowUpHTML', '&#x25B2;'],\n                ['contextMenuBackground', 'rgba(240, 240, 240, 1)'],\n                ['contextMenuBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextMenuBorderRadius', '3px'],\n                ['contextMenuChildArrowFontSize', '12px'],\n                ['contextMenuColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuFilterButtonFontFamily', 'sans-serif'],\n                ['contextMenuFilterButtonFontSize', '10px'],\n                ['contextMenuFilterInvalidExpresion', 'rgba(237, 155, 156, 1)'],\n                ['contextMenuFontFamily', 'sans-serif'],\n                ['contextMenuFontSize', '16px'],\n                ['contextMenuHoverBackground', 'rgba(182, 205, 250, 1)'],\n                ['contextMenuHoverColor', 'rgba(43, 48, 153, 1)'],\n                ['contextMenuItemBorderRadius', '3px'],\n                ['contextMenuItemMargin', '2px'],\n                ['contextMenuLabelDisplay', 'inline-block'],\n                ['contextMenuLabelMargin', '0 3px 0 0'],\n                ['contextMenuLabelMaxWidth', '700px'],\n                ['contextMenuLabelMinWidth', '75px'],\n                ['contextMenuMarginLeft', 3],\n                ['contextMenuMarginTop', -3],\n                ['contextMenuOpacity', '0.98'],\n                ['contextMenuPadding', '2px'],\n                ['contextMenuWindowMargin', 30],\n                ['contextMenuZIndex', 10000],\n                ['cornerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cornerCellBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['display', 'inline-block'],\n                ['editCellBackgroundColor', 'white'],\n                ['editCellBorder', 'solid 1px rgba(110, 168, 255, 1)'],\n                ['editCellBoxShadow', '0 2px 5px rgba(0,0,0,0.4)'],\n                ['editCellColor', 'black'],\n                ['editCellFontFamily', 'sans-serif'],\n                ['editCellFontSize', '16px'],\n                ['editCellPaddingLeft', 4],\n                ['editCellZIndex', 10000],\n                ['frozenMarkerHoverColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerHoverBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerActiveColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerActiveBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerColor', 'rgba(222, 222, 222, 1)'],\n                ['frozenMarkerBorderColor', 'rgba(168, 168, 168, 1)'],\n                ['frozenMarkerBorderWidth', 1],\n                ['frozenMarkerWidth', 2],\n                ['gridBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['gridBorderCollapse', 'collapse'],\n                ['gridBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['gridBorderWidth', 1],\n                ['height', 'auto'],\n                ['maxHeight', 'inherit'],\n                ['maxWidth', 'inherit'],\n                ['minColumnWidth', 45],\n                ['minHeight', 'inherit'],\n                ['minRowHeight', 24],\n                ['minWidth', 'inherit'],\n                ['mobileContextMenuMargin', 10],\n                ['mobileEditInputHeight', 30],\n                ['mobileEditFontFamily', 'sans-serif'],\n                ['mobileEditFontSize', '16px'],\n                ['moveOverlayBorderWidth', 1],\n                ['moveOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['moveOverlayBorderSegments', '12, 7'],\n                ['name', 'default'],\n                ['reorderMarkerBackgroundColor', 'rgba(0, 0, 0, 0.1)'],\n                ['reorderMarkerBorderColor', 'rgba(0, 0, 0, 0.2)'],\n                ['reorderMarkerBorderWidth', 1.25],\n                ['reorderMarkerIndexBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['reorderMarkerIndexBorderWidth', 2.75],\n                ['rowHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['rowHeaderCellBorderColor', 'rgba(200, 200, 200, 1)'],\n                ['rowHeaderCellBorderWidth', 1],\n                ['rowHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellFont', '16px sans-serif'],\n                ['rowHeaderCellHeight', 25],\n                ['rowHeaderCellHorizontalAlignment', 'left'],\n                ['rowHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['rowHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['rowHeaderCellPaddingBottom', 5],\n                ['rowHeaderCellPaddingLeft', 5],\n                ['rowHeaderCellPaddingRight', 5],\n                ['rowHeaderCellPaddingTop', 5],\n                ['rowHeaderCellSelectedBackgroundColor', 'rgba(217, 217, 217, 1)'],\n                ['rowHeaderCellSelectedColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellVerticalAlignment', 'center'],\n                ['rowHeaderCellWidth', 57],\n                ['scrollBarActiveColor', 'rgba(125, 125, 125, 1)'],\n                ['scrollBarBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarBorderWidth', 0.5],\n                ['scrollBarBoxBorderRadius', 4.125],\n                ['scrollBarBoxColor', 'rgba(192, 192, 192, 1)'],\n                ['scrollBarBoxMargin', 2],\n                ['scrollBarBoxMinSize', 15],\n                ['scrollBarBoxWidth', 8],\n                ['scrollBarCornerBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarCornerBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarWidth', 11],\n                ['selectionHandleBorderColor', 'rgba(255, 255, 255, 1)'],\n                ['selectionHandleBorderWidth', 1.5],\n                ['selectionHandleColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionHandleSize', 8],\n                ['selectionHandleType', 'square'],\n                ['selectionOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionOverlayBorderWidth', 1],\n                ['treeArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['treeArrowBorderWidth', 1],\n                ['treeArrowClickRadius', 5],\n                ['treeArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['treeArrowHeight', 8],\n                ['treeArrowMarginLeft', 0],\n                ['treeArrowMarginRight', 5],\n                ['treeArrowMarginTop', 6],\n                ['treeArrowWidth', 13],\n                ['treeGridHeight', 250],\n                ['width', 'auto']\n            ]\n        };\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, evil: true*/\n/*globals Reflect: false, HTMLElement: true, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n    __webpack_require__(2),\n    __webpack_require__(0),\n    __webpack_require__(3),\n    __webpack_require__(4),\n    __webpack_require__(5),\n    __webpack_require__(6),\n    __webpack_require__(7),\n    __webpack_require__(8),\n    __webpack_require__(9)\n], __WEBPACK_AMD_DEFINE_RESULT__ = (function context(component) {\n    'use strict';\n    component = component();\n    var modules = Array.prototype.slice.call(arguments);\n    function Grid(args) {\n        args = args || {};\n        var self = {};\n        self.isComponent = args.component === undefined;\n        self.isChildGrid = args.parentNode && /canvas-datagrid-(cell|tree)/.test(args.parentNode.nodeType);\n        if (self.isChildGrid) {\n            self.intf = {};\n        } else {\n            self.intf = self.isComponent ? eval('Reflect.construct(HTMLElement, [], new.target)')\n                : document.createElement('canvas');\n        }\n        self.args = args;\n        self.intf.args = args;\n        self.applyComponentStyle = component.applyComponentStyle;\n        self.hyphenateProperty = component.hyphenateProperty;\n        self.dehyphenateProperty = component.dehyphenateProperty;\n        self.createGrid = function grid(args) {\n            args.component = false;\n            return new Grid(args);\n        };\n        modules.forEach(function (module) {\n            module(self);\n        });\n        if (self.isChildGrid) {\n            self.shadowRoot = args.parentNode.shadowRoot;\n            self.parentNode = args.parentNode;\n        } else if (self.intf.createShadowRoot) {\n            self.shadowRoot = self.intf.attachShadow({mode: 'open'});\n            self.parentNode = self.shadowRoot;\n        } else {\n            self.parentNode = self.intf;\n        }\n        self.init();\n        return self.intf;\n    }\n    if (window.HTMLElement) {\n        Grid.prototype = Object.create(window.HTMLElement.prototype);\n    }\n    // export web component\n    if (window.customElements) {\n        Grid.observedAttributes = component.getObservableAttributes();\n        Grid.prototype.disconnectedCallback = component.disconnectedCallback;\n        Grid.prototype.attributeChangedCallback = component.attributeChangedCallback;\n        Grid.prototype.connectedCallback = component.connectedCallback;\n        Grid.prototype.adoptedCallback = component.adoptedCallback;\n        window.customElements.define('canvas-datagrid', Grid);\n    }\n    // export global\n    if (window && !window.canvasDatagrid && !window.require) {\n        window.canvasDatagrid = function (args) { return new Grid(args); };\n    }\n    // export amd loader\n    module.exports = function grid(args) {\n        args = args || {};\n        var i, tKeys = ['style', 'formatters', 'sorters', 'filters',\n                    'treeGridAttributes', 'cellGridAttributes', 'data', 'schema'];\n        if (window.customElements && document.body.createShadowRoot) {\n            i = document.createElement('canvas-datagrid');\n            Object.keys(args).forEach(function (argKey) {\n                // set data and parentNode after everything else\n                if (argKey === 'data') { return; }\n                if (argKey === 'parentNode') { return; }\n                // top level keys in args\n                if (tKeys.indexOf(argKey) !== -1) {\n                    tKeys.forEach(function (tKey) {\n                        if (args[tKey] === undefined || tKey !== argKey) { return; }\n                        if (['formatters', 'sorters', 'filters'].indexOf(argKey) !== -1) {\n                            if (typeof args[tKey] === 'object' && args[tKey] !== null) {\n                                Object.keys(args[tKey]).forEach(function (sKey) {\n                                    i[tKey][sKey] = args[tKey][sKey];\n                                });\n                            }\n                        } else {\n                            i[tKey] = args[tKey];\n                        }\n                    });\n                    return;\n                }\n                // all others are attribute level keys\n                i.attributes[argKey] = args[argKey];\n            });\n            if (args.data) {\n                i.data = args.data;\n            }\n            // add to the dom very last to avoid redraws\n            if (args.parentNode) {\n                args.parentNode.appendChild(i);\n            }\n            return i;\n        }\n        args.component = false;\n        i = new Grid(args);\n        if (args.parentNode && args.parentNode.appendChild) {\n            args.parentNode.appendChild(i);\n        }\n        return i;\n    };\n    return module.exports;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (defaults) {\n    'use strict';\n    return function () {\n        var typeMap, component = {};\n        component.dehyphenateProperty = function hyphenateProperty(prop) {\n            prop = prop.replace('--cdg-', '');\n            var p = '', nextLetterCap;\n            Array.prototype.forEach.call(prop, function (char) {\n                if (nextLetterCap) {\n                    nextLetterCap = false;\n                    p += char.toUpperCase();\n                    return;\n                }\n                if (char === '-') {\n                    nextLetterCap = true;\n                    return;\n                }\n                p += char;\n            });\n            return p;\n        };\n        component.hyphenateProperty = function hyphenateProperty(prop, cust) {\n            var p = '';\n            Array.prototype.forEach.call(prop, function (char) {\n                if (char === char.toUpperCase()) {\n                    p += '-' + char.toLowerCase();\n                    return;\n                }\n                p += char;\n            });\n            return (cust ? '--cdg-' : '') + p;\n        };\n        function getDefaultItem(base, item) {\n            var i = {},\n                r;\n            defaults(i);\n            r = i.defaults[base].filter(function (i) {\n                return i[0].toLowerCase() === item.toLowerCase()\n                    || component.hyphenateProperty(i[0]) === item.toLowerCase()\n                    || component.hyphenateProperty(i[0], true) === item.toLowerCase();\n            })[0];\n            return r;\n        }\n        component.applyComponentStyle = function (supressChangeAndDrawEvents, intf) {\n            var cStyle = window.getComputedStyle(intf.tagName === 'CANVAS-DATAGRID' ? intf : intf.canvas, null),\n                defs = {};\n            intf.computedStyle = cStyle;\n            defaults(defs);\n            defs = defs.defaults.styles;\n            defs.forEach(function (def) {\n                var val;\n                val = cStyle.getPropertyValue(component.hyphenateProperty(def[0], true));\n                if (val === \"\") {\n                    val = cStyle.getPropertyValue(component.hyphenateProperty(def[0], false));\n                }\n                if (val !== \"\" && typeof val === 'string') {\n                    intf.setStyleProperty(def[0], typeMap[typeof def[1]](val\n                        .replace(/^\\s+/, '').replace(/\\s+$/, ''), def[1]), true);\n                }\n            });\n            if (!supressChangeAndDrawEvents && intf.dispatchEvent) {\n                requestAnimationFrame(function () { intf.resize(true); });\n                intf.dispatchEvent('stylechanged', intf.style);\n            }\n        };\n        typeMap = {\n            data: function (strData) {\n                try {\n                    return JSON.parse(strData);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid data.');\n                }\n            },\n            schema: function (strSchema) {\n                try {\n                    return JSON.parse(strSchema);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid schema attribute.');\n                }\n            },\n            number: function (strNum, def) {\n                var n = parseInt(strNum, 10);\n                return isNaN(n) ? def : n;\n            },\n            boolean: function (strBool) {\n                return (/true/i).test(strBool);\n            },\n            string: function (str) {\n                return str;\n            }\n        };\n        component.getObservableAttributes = function () {\n            var i = {}, attrs = ['data', 'schema', 'style', 'className', 'name'];\n            defaults(i);\n            i.defaults.attributes.forEach(function (attr) {\n                attrs.push(attr[0].toLowerCase());\n            });\n            return attrs;\n        };\n        component.disconnectedCallback = function () {\n            this.connected = false;\n        };\n        component.connectedCallback = function () {\n            var intf = this;\n            intf.connected = true;\n            component.observe(intf);\n            component.applyComponentStyle(true, intf);\n            intf.resize(true);\n        };\n        component.adoptedCallback = function () {\n            this.resize();\n        };\n        component.attributeChangedCallback = function (attrName, oldVal, newVal) {\n            var tfn, intf = this, def;\n            if (attrName === 'style') {\n                component.applyComponentStyle(false, intf);\n                return;\n            }\n            if (attrName === 'data') {\n                if (intf.type === 'application/x-canvas-datagrid') {\n                    intf.type = 'application/json+x-canvas-datagrid';\n                }\n                intf.args.data = newVal;\n                return;\n            }\n            if (attrName === 'schema') {\n                intf.args.schema = typeMap.schema(newVal);\n                return;\n            }\n            if (attrName === 'name') {\n                intf.name = newVal;\n                return;\n            }\n            if (attrName === 'class' || attrName === 'className') {\n                return;\n            }\n            def = getDefaultItem('attributes', attrName);\n            if (def) {\n                tfn = typeMap[typeof def[1]];\n                intf.attributes[def[0]] = tfn(newVal);\n                return;\n            }\n            if (/^on/.test(attrName)) {\n                intf.addEventListener('on' + attrName, function (e) {\n                    eval(newVal);\n                });\n            }\n            return;\n        };\n        component.observe = function (intf) {\n            var observer;\n            if (!window.MutationObserver) { return; }\n            intf.applyComponentStyle = function () { component.applyComponentStyle(false, intf); intf.resize(); };\n            /**\n             * Applies the computed css styles to the grid.  In some browsers, changing directives in attached style sheets does not automatically update the styles in this component.  It is necessary to call this method to update in these cases.\n             * @memberof canvasDatagrid\n             * @name applyComponentStyle\n             * @method\n             */\n            observer = new window.MutationObserver(function (mutations) {\n                var checkInnerHTML, checkStyle;\n                Array.prototype.forEach.call(mutations, function (mutation) {\n                    if (mutation.attributeName === 'class'\n                            || mutation.attributeName === 'style') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.target.parentNode\n                            && mutation.target.parentNode.nodeName === 'STYLE') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.addedNodes.length > 0 || mutation.type === 'characterData') {\n                        checkInnerHTML = true;\n                    }\n                });\n                if (checkStyle) {\n                    intf.applyComponentStyle(false, intf);\n                }\n                if (checkInnerHTML) {\n                    if (intf.type === 'application/x-canvas-datagrid') {\n                        intf.type = 'application/json+x-canvas-datagrid';\n                    }\n                    intf.data = intf.innerHTML;\n                }\n            });\n            observer.observe(intf, { characterData: true, childList: true, attributes: true, subtree: true });\n            Array.prototype.forEach.call(document.querySelectorAll('style'), function (el) {\n                observer.observe(el, { characterData: true, childList: true, attributes: true, subtree: true });\n            });\n        };\n        return component;\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals XMLSerializer: false, define: true, Blob: false, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        var perfCounters = [],\n            drawCount = 0,\n            perfWindowSize = 300,\n            entityCount = [],\n            scrollDebugCounters = [],\n            touchPPSCounters = [];\n        self.htmlImageCache = {};\n        // more heavyweight version than fillArray defined in intf.js\n        function fillArray(low, high, step, def) {\n            step = step || 1;\n            var i = [], x;\n            for (x = low; x <= high; x += step) {\n                i[x] = def === undefined ? x : (typeof def === 'function' ? def(x) : def);\n            }\n            return i;\n        }\n        function drawPerfLine(w, h, x, y, perfArr, arrIndex, max, color, useAbs) {\n            var i = w / perfArr.length,\n                r = h / max;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x, y + h);\n            perfArr.forEach(function (n) {\n                var val = (arrIndex === undefined ? n : n[arrIndex]),\n                    cx,\n                    cy;\n                if (useAbs) {\n                    val = Math.abs(val);\n                }\n                cx = x + i;\n                cy = y + h - (val * r);\n                self.ctx.lineTo(cx, cy);\n                x += i;\n            });\n            self.ctx.moveTo(x + w, y + h);\n            self.ctx.strokeStyle = color;\n            self.ctx.stroke();\n        }\n        function drawOnAllImagesLoaded() {\n            var loaded = true;\n            Object.keys(self.htmlImageCache).forEach(function (html) {\n                if (!self.htmlImageCache[html].complete) {\n                    loaded = false;\n                }\n            });\n            if (loaded) {\n                self.draw();\n            }\n        }\n        function drawHtml(cell) {\n            var img,\n                v = cell.innerHTML || cell.formattedValue,\n                x = cell.x + self.canvasOffsetLeft,\n                y = cell.y + self.canvasOffsetTop;\n            if (self.htmlImageCache[v]) {\n                img = self.htmlImageCache[v];\n                if (img.height !== cell.height || img.width !== cell.width) {\n                    // height and width of the cell has changed, invalidate cache\n                    self.htmlImageCache[v] = undefined;\n                } else {\n                    if (!img.complete) {\n                        return;\n                    }\n                    return self.ctx.drawImage(img, x, y);\n                }\n            }\n            img = new Image(cell.width, cell.height);\n            self.htmlImageCache[v] = img;\n            img.onload = function () {\n                self.ctx.drawImage(img, x, y);\n                drawOnAllImagesLoaded();\n            };\n            img.src = 'data:image/svg+xml;base64,' + btoa(\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + cell.width + '\" height=\"' + cell.height + '\">\\n' +\n                    '<foreignObject class=\"node\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\\n' +\n                    '<body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;padding:0;\">\\n' +\n                    v + '\\n' +\n                    '</body>' +\n                    '</foreignObject>\\n' +\n                    '</svg>\\n'\n            );\n        }\n        function drawOrderByArrow(x, y) {\n            var mt = self.style.columnHeaderOrderByArrowMarginTop * self.scale,\n                ml = self.style.columnHeaderOrderByArrowMarginLeft * self.scale,\n                mr = self.style.columnHeaderOrderByArrowMarginRight * self.scale,\n                aw = self.style.columnHeaderOrderByArrowWidth * self.scale,\n                ah = self.style.columnHeaderOrderByArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.columnHeaderOrderByArrowColor;\n            self.ctx.strokeStyle = self.style.columnHeaderOrderByArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.orderDirection === 'asc') {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y + ah);\n                self.ctx.lineTo(x + aw, y + ah);\n                self.ctx.lineTo(x + (aw * 0.5), y);\n                self.ctx.lineTo(x, y + ah);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function drawTreeArrow(cell, x, y) {\n            var mt = self.style.treeArrowMarginTop * self.scale,\n                mr = self.style.treeArrowMarginRight * self.scale,\n                ml = self.style.treeArrowMarginLeft * self.scale,\n                aw = self.style.treeArrowWidth * self.scale,\n                ah = self.style.treeArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.treeArrowColor;\n            self.ctx.strokeStyle = self.style.treeArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.openChildren[cell.rowIndex]) {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y);\n                self.ctx.lineTo(x + ah, y + (aw * 0.5));\n                self.ctx.lineTo(x, y + aw);\n                self.ctx.lineTo(x, y);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function radiusRect(x, y, w, h, radius) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            var r = x + w, b = y + h;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x + radius, y);\n            self.ctx.lineTo(r - radius, y);\n            self.ctx.quadraticCurveTo(r, y, r, y + radius);\n            self.ctx.lineTo(r, y + h - radius);\n            self.ctx.quadraticCurveTo(r, b, r - radius, b);\n            self.ctx.lineTo(x + radius, b);\n            self.ctx.quadraticCurveTo(x, b, x, b - radius);\n            self.ctx.lineTo(x, y + radius);\n            self.ctx.quadraticCurveTo(x, y, x + radius, y);\n        }\n        function fillRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillRect(x, y, w, h);\n        }\n        function strokeRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.strokeRect(x, y, w, h);\n        }\n        function fillText(text, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillText(text, x, y);\n        }\n        function fillCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.fill();\n        }\n        function strokeCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.stroke();\n        }\n        function clipFrozenArea(mode) {\n            // 0 both, 1 rows, 2 cols\n            // self.lastFrozenColumnPixel;\n            // self.lastFrozenRowPixel;\n            self.ctx.beginPath();\n            if (mode === 0) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, self.lastFrozenRowPixel);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 1) {\n                self.ctx.moveTo(0, self.lastFrozenRowPixel);\n                self.ctx.lineTo(0, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 2) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, 0);\n                self.ctx.lineTo(self.width, 0);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n            }\n            self.ctx.clip();\n        }\n        function fillHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return fillCircle(x, y, r * 0.5);\n            }\n            fillRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function strokeHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return strokeCircle(x, y, r * 0.5);\n            }\n            strokeRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function addselectionHandle(c, pos) {\n            var hw = self.style.selectionHandleSize,\n                p = {\n                    tr: function () {\n                        fillHandle(c.x + c.width, c.y, hw);\n                        strokeHandle(c.x + c.width, c.y, hw);\n                    },\n                    br: function () {\n                        fillHandle(c.x + c.width, c.y + c.height, hw);\n                        strokeHandle(c.x + c.width, c.y + c.height, hw);\n                    },\n                    tl: function () {\n                        fillHandle(c.x, c.y, hw);\n                        strokeHandle(c.x, c.y, hw);\n                    },\n                    bl: function () {\n                        fillHandle(c.x, c.y + c.height, hw);\n                        strokeHandle(c.x, c.y + c.height, hw);\n                    }\n                };\n            p[pos]();\n        }\n        function addBorderLine(c, pos) {\n            self.ctx.beginPath();\n            var p = {\n                t: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                },\n                r: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                b: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                l: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                }\n            };\n            p[pos]();\n            self.ctx.stroke();\n        }\n        function addEllipsis(text, width) {\n            var c, w = 0;\n            if (self.ellipsisCache[text] && self.ellipsisCache[text][width]) {\n                return self.ellipsisCache[text][width];\n            }\n            //TODO Add ellipsis back when there is a fast way to do it\n            w = self.ctx.measureText(text).width;\n            self.ellipsisCache[text] = self.ellipsisCache[text] || {};\n            c = {value: text, width: w};\n            self.ellipsisCache[text][width] = c;\n            return c;\n        }\n        function drawText(cell) {\n            var paddingLeft = self.style[cell.style + 'PaddingLeft'] * self.scale,\n                paddingTop = self.style[cell.style + 'PaddingTop'] * self.scale,\n                paddingRight = self.style[cell.style + 'PaddingRight'] * self.scale,\n                paddingBottom = self.style[cell.style + 'PaddingBottom'] * self.scale,\n                vPos = paddingTop + cell.height - (cell.height * 0.5),\n                hPos = paddingLeft + cell.treeArrowWidth + cell.orderByArrowWidth;\n            cell.text = addEllipsis(cell.formattedValue, cell.width - paddingRight - paddingLeft);\n            cell.text.height = cell.fontHeight;\n            if (cell.horizontalAlignment === 'right') {\n                hPos = cell.width - cell.text.width - paddingRight;\n            } else if (cell.horizontalAlignment === 'center') {\n                hPos = (cell.width / 2) - (cell.text.width / 2);\n            }\n            if (cell.verticalAlignment === 'top') {\n                vPos = paddingTop + cell.text.height;\n            } else if (cell.verticalAlignment === 'bottom') {\n                vPos = cell.height - paddingBottom - cell.text.height;\n            }\n            cell.text.x = cell.x + hPos;\n            cell.text.y = cell.y + vPos;\n            fillText(cell.text.value, cell.text.x, cell.text.y);\n        }\n        function getFrozenColumnsWidth() {\n            var w = 0,\n                s = self.getVisibleSchema(),\n                x = 0,\n                n = Math.min(self.frozenColumn, s.length),\n                column;\n            while (x < n) {\n                column = s[self.orders.columns[x]];\n                w += ((self.sizes.columns[x] || column.width || self.style.cellWidth) * self.scale);\n                x += 1;\n            }\n            return w;\n        }\n        /**\n         * Redraws the grid. No matter what the change, this is the only method required to refresh everything.\n         * @memberof canvasDatagrid\n         * @name draw\n         * @method\n         */\n         // r = literal row index\n         // rd = row data array\n         // i = user order index\n         // o = literal data index\n         // y = y drawing cursor\n         // x = x drawing cursor\n         // s = visible schema array\n         // cx = current x drawing cursor sub calculation var\n         // cy = current y drawing cursor sub calculation var\n         // a = static cell (like corner cell)\n         // p = perf counter\n         // l = data length\n         // u = current cell\n         // h = current height\n         // w = current width\n        self.draw = function (internal) {\n            if (self.dispatchEvent('beforedraw', {})) { return; }\n            if (!self.isChildGrid && (!self.height || !self.width)) {\n                return;\n            }\n            if (self.isChildGrid && internal) {\n                requestAnimationFrame(self.parentGrid.draw);\n                return;\n            }\n            if (self.intf.visible === false) {\n                return;\n            }\n            // initial values\n            var checkScrollHeight, rowHeaderCell, p, cx, cy, treeGrid, rowOpen,\n                rowHeight, cornerCell, y, x, c, h, w, s, r, rd, aCell,\n                data = (self.data || []),\n                bc = self.style.gridBorderCollapse === 'collapse',\n                selectionBorders = [],\n                moveBorders = [],\n                selectionHandles = [],\n                rowHeaders = [],\n                frozenColumnWidths = getFrozenColumnsWidth(),\n                l = data.length,\n                u = self.currentCell || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                cellHeight = self.style.cellHeight;\n            drawCount += 1;\n            p = performance.now();\n            self.visibleRowHeights = [];\n            // if data length has changed, there is no way to know\n            if (data.length > self.orders.rows.length) {\n                self.createRowOrders();\n            }\n            function drawScrollBars() {\n                var drawCorner,\n                    en = self.scrollBox.entities,\n                    m = (self.style.scrollBarBoxMargin * 2);\n                self.ctx.strokeStyle = self.style.scrollBarBorderColor;\n                self.ctx.lineWidth = self.style.scrollBarBorderWidth;\n                en.horizontalBox.x = rowHeaderCellWidth + self.style.scrollBarBoxMargin\n                    + ((en.horizontalBar.width - self.scrollBox.scrollBoxWidth)\n                        * (self.scrollBox.scrollLeft / self.scrollBox.scrollWidth));\n                en.verticalBox.y = columnHeaderCellHeight + self.style.scrollBarBoxMargin\n                    + ((en.verticalBar.height - self.scrollBox.scrollBoxHeight)\n                        * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight));\n                if (self.scrollBox.horizontalBarVisible) {\n                    self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                    fillRect(en.horizontalBar.x, en.horizontalBar.y, en.horizontalBar.width + m, en.horizontalBar.height);\n                    strokeRect(en.horizontalBar.x, en.horizontalBar.y, en.horizontalBar.width + m, en.horizontalBar.height);\n                    self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                    if (/horizontal/.test(u.context)) {\n                        self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                    }\n                    radiusRect(en.horizontalBox.x, en.horizontalBox.y,\n                        en.horizontalBox.width, en.horizontalBox.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                    drawCorner = true;\n                    self.visibleCells.unshift(en.horizontalBar);\n                    self.visibleCells.unshift(en.horizontalBox);\n                }\n                if (self.scrollBox.verticalBarVisible) {\n                    self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                    fillRect(en.verticalBar.x, en.verticalBar.y, en.verticalBar.width, en.verticalBar.height + m);\n                    strokeRect(en.verticalBar.x, en.verticalBar.y, en.verticalBar.width, en.verticalBar.height + m);\n                    self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                    if (/vertical/.test(u.context)) {\n                        self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                    }\n                    radiusRect(en.verticalBox.x, en.verticalBox.y, en.verticalBox.width,\n                        en.verticalBox.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                    drawCorner = true;\n                    self.visibleCells.unshift(en.verticalBar);\n                    self.visibleCells.unshift(en.verticalBox);\n                }\n                if (drawCorner) {\n                    //corner\n                    self.ctx.strokeStyle = self.style.scrollBarCornerBorderColor;\n                    self.ctx.fillStyle = self.style.scrollBarCornerBackgroundColor;\n                    radiusRect(en.corner.x, en.corner.y, en.corner.width, en.corner.height, 0);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                    self.visibleCells.unshift(en.corner);\n                }\n            }\n            function createHandlesOverlayArray(cell) {\n                if (self.attributes.allowMovingSelection || self.mobile) {\n                    if (cell.selectionBorderTop && cell.selectionBorderRight && self.mobile) {\n                        selectionHandles.push([cell, 'tr']);\n                        cell.selectionHandle = 'tr';\n                    }\n                    if (cell.selectionBorderTop && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'tl']);\n                        cell.selectionHandle = 'tl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'bl']);\n                        cell.selectionHandle = 'bl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderRight\n                            && (self.attributes.selectionHandleBehavior !== 'none' || self.mobile)) {\n                        selectionHandles.push([cell, 'br']);\n                        cell.selectionHandle = 'br';\n                    }\n                }\n            }\n            function createBorderOverlayArray(cell, drawArray, propPrefix, offsetPoint) {\n                offsetPoint = offsetPoint || {x: 0, y: 0};\n                cell.selectionBorder = '';\n                if (!cell.isRowHeader\n                        && self.selections[cell.rowIndex + -offsetPoint.y]\n                        && self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) !== -1) {\n                    if ((!self.selections[cell.rowIndex - 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex - 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1\n                            || cell.rowIndex === 0)\n                            && !cell.isHeader) {\n                        drawArray.push([cell, 't']);\n                        cell[propPrefix + 'BorderTop'] = true;\n                        cell[propPrefix + 'Border'] += 't';\n                    }\n                    if (!self.selections[cell.rowIndex + 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex + 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'b']);\n                        cell[propPrefix + 'BorderBottom'] = true;\n                        cell[propPrefix + 'Border'] += 'b';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === 0\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex - 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'l']);\n                        cell[propPrefix + 'BorderLeft'] = true;\n                        cell[propPrefix + 'Border'] += 'l';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === s.length\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'r']);\n                        cell[propPrefix + 'BorderRight'] = true;\n                        cell[propPrefix + 'Border'] += 'r';\n                    }\n                }\n            }\n            function drawCell(d, rowOrderIndex, rowIndex) {\n                return function drawEach(header, headerIndex, columnOrderIndex) {\n                    if (header.hidden) { return 0; }\n                    var cellStyle = header.style || 'cell',\n                        cellGridAttributes,\n                        cell,\n                        isHeader = /HeaderCell/.test(cellStyle),\n                        isCorner = /cornerCell/.test(cellStyle),\n                        isRowHeader = 'rowHeaderCell' === cellStyle,\n                        isColumnHeader = 'columnHeaderCell' === cellStyle,\n                        selected = self.selections[rowOrderIndex] && self.selections[rowOrderIndex].indexOf(columnOrderIndex) !== -1,\n                        hovered = self.hovers.rowIndex === rowOrderIndex && self.hovers.columnIndex === columnOrderIndex,\n                        active = self.activeCell.rowIndex === rowOrderIndex && self.activeCell.columnIndex === columnOrderIndex,\n                        isColumnHeaderCellCap = cellStyle === 'columnHeaderCellCap',\n                        rawValue = d ? d[header.name] : undefined,\n                        isGrid = typeof rawValue === 'object' && rawValue !== null && rawValue !== undefined,\n                        activeHeader = (self.orders.rows[self.activeCell.rowIndex] === rowOrderIndex\n                                || self.orders.columns[self.activeCell.columnIndex] === headerIndex)\n                            && (columnOrderIndex === -1 || rowOrderIndex === -1)\n                            ? (isRowHeader ? 'activeRowHeaderCell' : 'activeColumnHeaderCell') : false,\n                        val,\n                        f = self.formatters[header.type || 'string'],\n                        orderByArrowSize = 0,\n                        treeArrowSize = 0,\n                        cellWidth = self.sizes.columns[headerIndex] || header.width,\n                        ev = {\n                            value: rawValue,\n                            row: d,\n                            header: header\n                        };\n                    if (isColumnHeaderCellCap) {\n                        cellWidth = w - x;\n                    }\n                    // if no data or schema are defined, a width is provided to the stub column\n                    if (cellWidth === undefined) {\n                        cellWidth = self.style.cellWidth;\n                    }\n                    cellWidth = cellWidth * self.scale;\n                    if (x + cellWidth + self.style.cellBorderWidth < 0) {\n                        x += cellWidth + self.style.cellBorderWidth;\n                    }\n                    if (active && cellStyle !== 'cornerCell') {\n                        cellStyle = 'activeCell';\n                    }\n                    if (self.visibleRows.indexOf(rowIndex) === -1 && !isHeader) {\n                        self.visibleRows.push(rowIndex);\n                    }\n                    val = self.dispatchEvent('formatcellvalue', ev);\n                    cx = x;\n                    cy = y;\n                    if (cellStyle === 'cornerCell') {\n                        cx = 0;\n                        cy = 0;\n                    } else if (isRowHeader) {\n                        cx = 0;\n                    } else if (isHeader) {\n                        cy = 0;\n                    }\n                    cell = {\n                        type: isGrid ? 'canvas-datagrid-cell' : header.type,\n                        style: cellStyle,\n                        nodeType: 'canvas-datagrid-cell',\n                        x: cx,\n                        y: cy,\n                        horizontalAlignment: self.style[cellStyle + 'HorizontalAlignment'],\n                        verticalAlignment: self.style[cellStyle + 'VerticalAlignment'],\n                        offsetTop: self.canvasOffsetTop + cy,\n                        offsetLeft: self.canvasOffsetLeft + cx,\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        active: active || activeHeader,\n                        hovered: hovered,\n                        selected: selected,\n                        width: cellWidth,\n                        height: cellHeight,\n                        offsetWidth: cellWidth,\n                        offsetHeight: cellHeight,\n                        parentNode: self.intf.parentNode,\n                        offsetParent: self.intf.parentNode,\n                        data: d,\n                        isCorner: isCorner,\n                        isHeader: isHeader,\n                        isColumnHeader: isColumnHeader,\n                        isColumnHeaderCellCap: isColumnHeaderCellCap,\n                        isRowHeader: isRowHeader,\n                        rowOpen: rowOpen,\n                        header: header,\n                        columnIndex: columnOrderIndex,\n                        rowIndex: rowOrderIndex,\n                        sortColumnIndex: headerIndex,\n                        sortRowIndex: rowIndex,\n                        isGrid: isGrid,\n                        isNormal: !isGrid && !isCorner && !isHeader,\n                        gridId: (self.attributes.name || '') + rowIndex + ':' + headerIndex,\n                        parentGrid: self.intf,\n                        innerHTML: '',\n                        activeHeader: activeHeader,\n                        value: isHeader && !isRowHeader ? (header.title || header.name) : rawValue\n                    };\n                    ev.cell = cell;\n                    cell.userHeight = cell.isHeader ? self.sizes.rows[-1] : rowHeight;\n                    cell.userWidth = cell.isHeader ? self.sizes.columns.cornerCell : self.sizes.columns[headerIndex];\n                    self.visibleCells.unshift(cell);\n                    if (self.dispatchEvent('beforerendercell', ev)) { return; }\n                    self.ctx.fillStyle = self.style[cellStyle + 'BackgroundColor'];\n                    self.ctx.strokeStyle = self.style[cellStyle + 'BorderColor'];\n                    self.ctx.lineWidth = self.style[cellStyle + 'BorderWidth'];\n                    if (hovered) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'HoverBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'HoverBorderColor'];\n                    }\n                    if (selected) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'SelectedBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'SelectedBorderColor'];\n                    }\n                    if (activeHeader) {\n                        self.ctx.fillStyle = self.style[activeHeader + 'BackgroundColor'];\n                    }\n                    self.dispatchEvent('rendercell', ev);\n                    if (cell.isGrid) {\n                        if (cell.height !== rowHeight) {\n                            cell.height = rowHeight || self.style.cellHeightWithChildGrid;\n                            checkScrollHeight = true;\n                        }\n                        cell.width = self.sizes.columns[headerIndex] || self.style.cellWidthWithChildGrid;\n                    }\n                    if (rowOpen && !cell.isRowHeader) {\n                        cell.height = self.sizes.rows[rowIndex] || self.style.cellHeight;\n                    }\n                    if (!cell.isGrid) {\n                        fillRect(cx, cy, cell.width, cell.height);\n                        strokeRect(cx, cy, cell.width, cell.height);\n                    }\n                    self.ctx.save();\n                    radiusRect(cell.x, cell.y, cell.width, cell.height, 0);\n                    self.ctx.clip();\n                    self.dispatchEvent('afterrendercell', ev);\n                    if (cell.height !== cellHeight && !(rowOpen && !cell.isRowHeader)) {\n                        self.sizes.rows[isHeader ? -1 : rowIndex] = cell.height;\n                        checkScrollHeight = true;\n                    }\n                    if (cell.width !== cellWidth) {\n                        self.sizes.columns[headerIndex] = cell.width;\n                        checkScrollHeight = true;\n                    }\n                    if (isRowHeader && self.attributes.tree) {\n                        if (!self.dispatchEvent('rendertreearrow', ev)) {\n                            treeArrowSize = drawTreeArrow(cell, self.style[cellStyle + 'PaddingLeft'], cy, 0);\n                        }\n                    }\n                    if ((self.attributes.showRowNumbers && isRowHeader)\n                            || !isRowHeader) {\n                        if (cell.isGrid && !self.dispatchEvent('beforerendercellgrid', ev)) {\n                            if (!self.childGrids[cell.gridId]) {\n                                // HACK: this only allows setting of the child grids styles if data is set _after_\n                                // this is less than desirable.  An interface needs to be made to effect the\n                                // style of all cell grids.  One for individual grids already exists.\n                                cellGridAttributes = self.cellGridAttributes;\n                                cellGridAttributes.name = self.attributes.saveAppearance ? cell.gridId : undefined;\n                                cellGridAttributes.component = false;\n                                cellGridAttributes.parentNode = cell;\n                                cellGridAttributes.data = rawValue;\n                                ev.cellGridAttributes = cellGridAttributes;\n                                if (self.dispatchEvent('beforecreatecellgrid', ev)) { return; }\n                                self.childGrids[cell.gridId] = self.createGrid(cellGridAttributes);\n                                self.sizes.rows[rowIndex]\n                                    = self.sizes.rows[rowIndex] || self.style.cellGridHeight;\n                                checkScrollHeight = true;\n                            }\n                            cell.grid = self.childGrids[cell.gridId];\n                            cell.grid.parentNode = cell;\n                            cell.grid.visible = true;\n                            cell.grid.draw();\n                            self.dispatchEvent('rendercellgrid', ev);\n                        } else if (!cell.isGrid) {\n                            if (self.childGrids[cell.gridId]) {\n                                self.childGrids[cell.gridId].parentNode.offsetHeight = 0;\n                            }\n                            if (isHeader && self.orderBy === header.name) {\n                                if (!self.dispatchEvent('renderorderbyarrow', ev)) {\n                                    orderByArrowSize = drawOrderByArrow(cx + self.style[cellStyle + 'PaddingLeft'], 0);\n                                }\n                            }\n                            self.ctx.fillStyle = self.style[cellStyle + 'Color'];\n                            if (hovered) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'HoverColor'];\n                            }\n                            if (selected) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'SelectedColor'];\n                            }\n                            if (activeHeader) {\n                                self.ctx.fillStyle = self.style[activeHeader + 'Color'];\n                            }\n                            self.ctx.font = (self.style[cellStyle + 'FontHeight'] * self.scale) + 'px ' + self.style[cellStyle + 'FontName'];\n                            cell.fontHeight = (self.style[cellStyle + 'FontHeight'] * self.scale);\n                            cell.treeArrowWidth = treeArrowSize;\n                            cell.orderByArrowWidth = orderByArrowSize;\n                            val = val !== undefined ? val : f\n                                ? f(ev) : '';\n                            if (val === undefined && !f) {\n                                val = '';\n                                console.warn('canvas-datagrid: Unknown format '\n                                    + header.type + ' add a cellFormater');\n                            }\n                            cell.formattedValue = ((val !== undefined && val !== null) ? val : '').toString();\n                            if (self.columnFilters && self.columnFilters[val] !== undefined && isHeader) {\n                                cell.formattedValue = self.attributes.filterTextPrefix + val;\n                            }\n                            if (!self.dispatchEvent('rendertext', ev)) {\n                                if (cell.innerHTML || header.type === 'html') {\n                                    drawHtml(cell);\n                                } else {\n                                    drawText(cell);\n                                }\n                            }\n                        }\n                    }\n                    if (active) {\n                        aCell = cell;\n                    }\n                    createBorderOverlayArray(cell, selectionBorders, 'selection');\n                    // createBorderOverlayArray calculates data for createHandlesOverlayArray so it must go 2nd\n                    createHandlesOverlayArray(cell);\n                    if (self.movingSelection) {\n                        createBorderOverlayArray(cell, moveBorders, 'move', self.moveOffset);\n                    }\n                    self.ctx.restore();\n                    x += cell.width + (bc ? 0 : self.style.cellBorderWidth);\n                    return cell.width;\n                };\n            }\n            function drawRowHeader(rowData, index, rowOrderIndex) {\n                var a, i;\n                if (self.attributes.showRowHeaders) {\n                    x = 0;\n                    i = index + 1;\n                    rowHeaderCell = {'rowHeaderCell': i };\n                    a = {\n                        name: 'rowHeaderCell',\n                        width: self.sizes.columns[-1] || self.style.rowHeaderCellWidth,\n                        style: 'rowHeaderCell',\n                        type: 'string',\n                        data: i,\n                        index: -1\n                    };\n                    rowOpen = self.openChildren[index];\n                    drawCell(rowHeaderCell, index, rowOrderIndex)(a, -1, -1);\n                }\n            }\n            function drawHeaders() {\n                var d, g = s.length, i, o, columnHeaderCell, header, nonFrozenHeaderWidth;\n                function drawHeaderColumnRange(start, end) {\n                    end = Math.min(end, g);\n                    for (o = start; o < end; o += 1) {\n                        i = self.orders.columns[o];\n                        header = s[i];\n                        if (!header.hidden) {\n                            d = {\n                                title: header.title,\n                                name: header.name,\n                                width: header.width || self.style.cellWidth,\n                                style: 'columnHeaderCell',\n                                type: 'string',\n                                index: o,\n                                order: i\n                            };\n                            columnHeaderCell = {'columnHeaderCell': header.title || header.name};\n                            x += drawCell(columnHeaderCell, -1, -1)(d, i, o);\n                            if (self.attributes.debug) {\n                                self.ctx.font = '14px sans-serif';\n                                self.ctx.fillStyle = 'rgba(37, 254, 21, 1)';\n                                fillText('Actual: ' + i + ' Ordered: ' + o, x - 175, 17);\n                            }\n                            if (x > self.width + self.scrollBox.scrollLeft) {\n                                break;\n                            }\n                        }\n                    }\n                }\n                rowHeaders.forEach(function (rArgs, rhIndex) {\n                    y = rArgs[3];\n                    cellHeight = rArgs[4];\n                    if (rhIndex === self.frozenRow) {\n                        self.ctx.save();\n                        radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                        self.ctx.clip();\n                    }\n                    drawRowHeader(rArgs[0], rArgs[1], rArgs[2]);\n                });\n                self.ctx.restore();\n                if (self.attributes.showColumnHeaders) {\n                    x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    if (self.attributes.allowFreezingColumns) {\n                        x += frozenColumnWidths;\n                    }\n                    y = 0;\n                    // cell height might have changed during drawing\n                    cellHeight = self.getColumnHeaderCellHeight();\n                    drawHeaderColumnRange(self.scrollIndexLeft + self.frozenColumn, g);\n                    nonFrozenHeaderWidth = x;\n                    x = self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    drawHeaderColumnRange(0, self.frozenColumn);\n                    // fill in the space right of the headers\n                    x = nonFrozenHeaderWidth;\n                    if (x < w) {\n                        c = {\n                            name: '',\n                            width: self.style.scrollBarWidth,\n                            style: 'columnHeaderCellCap',\n                            isColumnHeaderCell: true,\n                            isColumnHeaderCellCap: true,\n                            type: 'string',\n                            index: s.length\n                        };\n                        drawCell({endCap: ''}, -1, -1)(c, -1, -1);\n                    }\n                    // fill in the space right of the headers\n                    if (self.attributes.showRowHeaders) {\n                        cornerCell = {'cornerCell': '' };\n                        x = 0;\n                        c = {\n                            name: 'cornerCell',\n                            width: self.style.rowHeaderCellWidth,\n                            style: 'cornerCell',\n                            type: 'string',\n                            index: -1\n                        };\n                        drawCell(cornerCell, -1, -1)(c, -1, -1);\n                    }\n                }\n            }\n            function drawRow(r, d) {\n                var i, treeHeight, rowSansTreeHeight, o, g = s.length;\n                if (y - (cellHeight * 2) > h) {\n                    return false;\n                }\n                rd = data[r];\n                rowOpen = self.openChildren[r];\n                rowSansTreeHeight = (self.sizes.rows[r] || self.style.cellHeight) * self.scale;\n                treeHeight = (rowOpen ? self.sizes.trees[r] : 0) * self.scale;\n                rowHeight = (rowSansTreeHeight + treeHeight);\n                if (y < -rowHeight) {\n                    return false;\n                }\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                cellHeight = rowHeight;\n                if (self.attributes.allowFreezingColumns) {\n                    x += frozenColumnWidths;\n                }\n                //draw normal columns\n                for (o = (self.scrollIndexLeft + self.frozenColumn); o < g; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        self.scrollIndexRight = o;\n                        self.scrollPixelRight = x;\n                        break;\n                    }\n                }\n                //draw frozen columns\n                x = 0;\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                for (o = 0; o < self.frozenColumn; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        break;\n                    }\n                }\n                self.lastFrozenColumnPixel = x;\n                // cell height might have changed during drawing\n                cellHeight = rowHeight;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                // don't draw a tree for the new row\n                treeGrid = self.childGrids[r];\n                if (r !== data.length && rowOpen) {\n                    treeGrid.visible = true;\n                    treeGrid.parentNode = {\n                        offsetTop: y + rowSansTreeHeight + self.canvasOffsetTop,\n                        offsetLeft: rowHeaderCellWidth - 1 + self.canvasOffsetLeft,\n                        offsetHeight: treeHeight,\n                        offsetWidth: self.width - rowHeaderCellWidth - self.style.scrollBarWidth - 1,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: self.style,\n                        nodeType: 'canvas-datagrid-tree',\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        rowIndex: r\n                    };\n                    self.visibleCells.unshift({\n                        rowIndex: r,\n                        columnIndex: 0,\n                        y: treeGrid.parentNode.offsetTop,\n                        x: treeGrid.parentNode.offsetLeft,\n                        height: treeGrid.height,\n                        width: treeGrid.width,\n                        style: 'tree-grid',\n                        type: treeGrid.parentNode.nodeType\n                    });\n                    treeGrid.draw();\n                } else if (treeGrid) {\n                    treeGrid.parentNode.offsetHeight = 0;\n                    delete self.sizes.trees[r];\n                }\n                rowHeaders.push([rd, r, d, y, rowHeight]);\n                self.visibleRowHeights[r] = rowHeight;\n                y += cellHeight + (bc ? 0 : self.style.cellBorderWidth);\n                return true;\n            }\n            function initDraw() {\n                self.visibleRows = [];\n                s = self.getSchema();\n                self.visibleCells = [];\n                self.canvasOffsetTop = self.isChildGrid ? self.parentNode.offsetTop : 0;\n                self.canvasOffsetLeft = self.isChildGrid ? self.parentNode.offsetLeft : 0;\n                h = self.height;\n                w = self.width;\n            }\n            function drawBackground() {\n                radiusRect(0, 0, w, h, 0);\n                self.ctx.clip();\n                self.ctx.fillStyle = self.style.gridBackgroundColor;\n                fillRect(0, 0, w, h);\n            }\n            function drawFrozenRows() {\n                var n, ln = Math.min(data.length, self.frozenRow);\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                y = columnHeaderCellHeight;\n                for (r = 0; r < ln; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.allowFreezingRows) {\n                    // HACK great, another stupid magic number.\n                    // Background will appear as a 0.5px artifact behind the row freeze bar without this hack\n                    y += self.style.frozenMarkerBorderWidth + self.style.frozenMarkerWidth - 0.4999999999;\n                }\n                self.lastFrozenRowPixel = y;\n            }\n            function drawRows() {\n                self.ctx.save();\n                if (self.frozenRow > 0) {\n                    radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                    self.ctx.clip();\n                }\n                var o, n, i, g = s.length;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                if (!self.attributes.snapToRow) {\n                    y += -self.scrollBox.scrollTop + self.scrollPixelTop + self.style.cellBorderWidth;\n                }\n                for (r = self.frozenRow + self.scrollIndexTop; r < l; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        self.scrollIndexBottom = r;\n                        self.scrollPixelBottom = y;\n                        break;\n                    }\n                }\n                if (self.attributes.showNewRow) {\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    rowHeight = cellHeight = self.style.cellHeight;\n                    rowOpen = false;\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        x += drawCell(self.newRow, data.length, data.length)(s[i], i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    rowHeaders.push([self.newRow, data.length, data.length, y, rowHeight]);\n                }\n                self.ctx.restore();\n            }\n            function drawMoveMarkers() {\n                if (!self.movingSelection) { return; }\n                self.ctx.lineWidth = self.style.moveOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.moveOverlayBorderColor;\n                self.ctx.setLineDash(self.style.moveOverlayBorderSegments);\n                moveBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n                self.ctx.setLineDash([]);\n            }\n            function drawReorderMarkers() {\n                if (!self.reorderObject) { return; }\n                var b = {\n                        height: self.reorderObject.height,\n                        width: self.reorderObject.width,\n                        x: self.reorderObject.x + self.reorderObject.dragOffset.x,\n                        y: self.reorderObject.y + self.reorderObject.dragOffset.y\n                    },\n                    m = {\n                        width: w,\n                        height: h,\n                        x: 0,\n                        y: 0\n                    };\n                self.ctx.fillStyle = self.style.reorderMarkerBackgroundColor;\n                self.ctx.lineWidth = self.style.reorderMarkerBorderWidth;\n                self.ctx.strokeStyle = self.style.reorderMarkerBorderColor;\n                if (self.dragMode === 'row-reorder') {\n                    b.width = w;\n                    b.x = 0;\n                    m.width = w;\n                    m.height = self.currentCell.height;\n                    m.y = self.currentCell.y;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.rowIndex !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex > -1\n                            && self.currentCell.rowIndex < l) {\n                        addBorderLine(m, self.reorderTarget.sortRowIndex > self.reorderObject.sortRowIndex ? 'b' : 't');\n                    }\n                } else if (self.dragMode === 'column-reorder' && self.reorderObject) {\n                    b.height = h;\n                    b.y = 0;\n                    m.height = h;\n                    m.width = self.currentCell.width;\n                    m.y = 0;\n                    m.x = self.currentCell.x;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.sortColumnIndex !== self.reorderObject.sortColumnIndex\n                            && self.currentCell.sortColumnIndex > -1\n                            && self.currentCell.sortColumnIndex < s.length) {\n                        addBorderLine(m, self.reorderTarget.columnIndex > self.reorderObject.columnIndex ? 'r' : 'l');\n                    }\n                }\n            }\n            function drawBorder() {\n                self.ctx.lineWidth = self.style.gridBorderWidth;\n                self.ctx.strokeStyle = self.style.gridBorderColor;\n                strokeRect(0, 0, self.width, self.height);\n            }\n            function drawSelectionBorders() {\n                self.ctx.lineWidth = self.style.selectionOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.selectionOverlayBorderColor;\n                function dsb(c) {\n                    addBorderLine(c[0], c[1]);\n                }\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.save();\n                clipFrozenArea(0);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(1);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(2);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n            }\n            function drawSelectionHandles() {\n                if (self.mobile || self.attributes.allowMovingSelection) {\n                    self.ctx.lineWidth = self.style.selectionHandleBorderWidth;\n                    self.ctx.strokeStyle = self.style.selectionHandleBorderColor;\n                    self.ctx.fillStyle = self.style.selectionHandleColor;\n                    selectionHandles.forEach(function (c) {\n                        addselectionHandle(c[0], c[1]);\n                        var az = self.attributes.touchSelectHandleZone / 2,\n                            ax = c[0].x + (c[1] === 'tl' || c[1] === 'bl' ? 0 : c[0].width) - az,\n                            ay = c[0].y + (c[1] === 'bl' || c[1] === 'br' ? c[0].height : 0) - az;\n                        self.visibleCells.unshift({\n                            x: ax,\n                            y: ay,\n                            height: self.style.selectionHandleSize + az,\n                            width: self.style.selectionHandleSize + az,\n                            style: 'selection-handle-' + c[1]\n                        });\n                    });\n                }\n            }\n            function drawActiveCell() {\n                if (!aCell) { return; }\n                self.ctx.save();\n                var cl = self.activeCell.columnIndex + 1 > self.frozenColumn || self.activeCell.rowIndex + 1 > self.frozenRow,\n                    acx = cl ? self.lastFrozenColumnPixel : 0,\n                    acy = cl ? self.lastFrozenRowPixel : 0,\n                    acw = cl ? self.width - self.lastFrozenColumnPixel : self.width,\n                    ach = cl ? self.height - self.lastFrozenRowPixel : self.height;\n                radiusRect(acx, acy, acw, ach, 0);\n                self.ctx.clip();\n                if (self.attributes.selectionMode === 'row') {\n                    if (self.activeCell && self.activeCell.rowIndex === aCell.rowIndex) {\n                        self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                        self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                        strokeRect(0, aCell.y, self.getHeaderWidth() + rowHeaderCellWidth, self.visibleRowHeights[aCell.rowIndex]);\n                    }\n                } else {\n                    self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                    self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                    strokeRect(aCell.x, aCell.y, aCell.width, aCell.height);\n                }\n                self.ctx.restore();\n            }\n            function drawFrozenMarkers() {\n                var my = self.lastFrozenRowPixel - self.style.frozenMarkerWidth,\n                    mx = self.lastFrozenColumnPixel - self.style.frozenMarkerBorderWidth,\n                    xHover = self.currentCell && self.currentCell.style === 'frozen-row-marker',\n                    yHover = self.currentCell && self.currentCell.style === 'frozen-column-marker';\n                self.ctx.lineWidth = self.style.frozenMarkerBorderWidth;\n                if (self.attributes.allowFreezingColumns) {\n                    self.ctx.fillStyle = yHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = yHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    strokeRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    self.visibleCells.unshift({\n                        x: mx,\n                        y: 0,\n                        height: self.height,\n                        width: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        style: 'frozen-column-marker'\n                    });\n                }\n                if (self.attributes.allowFreezingRows) {\n                    self.ctx.fillStyle = xHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = xHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    strokeRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    self.visibleCells.unshift({\n                        x: 0,\n                        y: my,\n                        height: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        width: self.width,\n                        style: 'frozen-row-marker'\n                    });\n                }\n                if (self.freezeMarkerPosition) {\n                    self.ctx.fillStyle = self.style.frozenMarkerActiveColor;\n                    self.ctx.strokeStyle = self.style.frozenMarkerActiveBorderColor;\n                    if (self.dragMode === 'frozen-column-marker') {\n                        fillRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                        strokeRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                    } else {\n                        fillRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                        strokeRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                    }\n                }\n            }\n            function drawPerfLines() {\n                if (!self.attributes.showPerformance) { return; }\n                var pw = 250,\n                    px = self.width - pw - self.style.scrollBarWidth - (self.style.scrollBarBorderWidth * 2),\n                    py = columnHeaderCellHeight,\n                    ph = 100;\n                if (scrollDebugCounters.length === 0) { scrollDebugCounters = fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (touchPPSCounters.length === 0) { touchPPSCounters = fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (entityCount.length === 0) { entityCount = fillArray(0, perfWindowSize, 1, 0); }\n                self.ctx.lineWidth = 0.5;\n                function dpl(name, perfArr, arrIndex, max, color, useAbs, rowIndex) {\n                    var v;\n                    drawPerfLine(pw, ph, px, py, perfArr, arrIndex, max, color, useAbs);\n                    self.ctx.fillStyle = color;\n                    fillRect(3 + px, py + 9 + (rowIndex * 11), 8, 8);\n                    self.ctx.fillStyle = '#999999';\n                    v = arrIndex !== undefined ? perfArr[0][arrIndex] : perfArr[0];\n                    fillText(name + ' ' + (isNaN(v) ? 0 : v).toFixed(3), 14 + px, py + 16 + (rowIndex * 11));\n                }\n                self.ctx.textAlign = 'left';\n                self.ctx.font = '8px sans-serif';\n                self.ctx.fillStyle = 'rgba(29, 25, 26, 1.00)';\n                fillRect(px, py, pw, ph);\n                [['Scroll Height', scrollDebugCounters, 0, self.scrollBox.scrollHeight, 'rgba(248, 33, 103, 1.00)', false],\n                    ['Scroll Width', scrollDebugCounters, 1, self.scrollBox.scrollWidth, 'rgba(66, 255, 27, 1.00)', false],\n                    ['Performance', perfCounters, undefined, 200, 'rgba(252, 255, 37, 1.00)', false],\n                    ['Entities', entityCount, undefined, 1500, 'rgba(76, 231, 239, 1.00)', false],\n                    ['TouchPPSX', touchPPSCounters, 0, 1000, 'rgba(246, 102, 24, 1.00)', true],\n                    ['TouchPPSY', touchPPSCounters, 1, 1000, 'purple', true]\n                    ].forEach(function (i, index) {\n                    i.push(index);\n                    dpl.apply(null, i);\n                });\n                self.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n                entityCount.pop();\n                entityCount.unshift(self.visibleCells.length);\n                scrollDebugCounters.pop();\n                scrollDebugCounters.unshift([self.scrollBox.scrollTop, self.scrollBox.scrollLeft]);\n                touchPPSCounters.pop();\n                touchPPSCounters.unshift([self.yPPS, self.xPPS]);\n            }\n            function drawDebug() {\n                self.ctx.save();\n                var d;\n                if (self.attributes.showPerformance || self.attributes.debug) {\n                    if (perfCounters.length === 0) { perfCounters = fillArray(0, perfWindowSize, 1, 0); }\n                    perfCounters.pop();\n                    perfCounters.unshift(performance.now() - p);\n                }\n                if (!self.attributes.debug) {\n                    self.ctx.restore();\n                    return;\n                }\n                self.ctx.font = '14px sans-serif';\n                d = {};\n                d.perf = (perfCounters.reduce(function (a, b) {\n                    return a + b;\n                }, 0) / Math.min(drawCount, perfCounters.length)).toFixed(1);\n                d.perfDelta = perfCounters[0].toFixed(1);\n                d.htmlImages = Object.keys(self.htmlImageCache).length;\n                d.reorderObject = 'x: ' + (self.reorderObject || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderObject || {rowIndex: 0}).rowIndex;\n                d.reorderTarget = 'x: ' + (self.reorderTarget || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderTarget || {rowIndex: 0}).rowIndex;\n                d.scale = self.scale;\n                d.startScale = self.startScale;\n                d.scaleDelta = self.scaleDelta;\n                d.zoomDeltaStart = self.zoomDeltaStart;\n                d.touchLength = self.touchLength;\n                d.touches = 'y0: ' + (self.touchPosition || {y: 0}).y + ' y1: ' + (self.touchPosition1 || {y: 0}).y;\n                d.scrollBox = self.scrollBox.toString();\n                d.scrollIndex = 'x: ' + self.scrollIndexLeft + ', y: ' + self.scrollIndexTop;\n                d.scrollPixel = 'x: ' + self.scrollPixelLeft + ', y: ' + self.scrollPixelTop;\n                d.canvasOffset = 'x: ' + self.canvasOffsetLeft + ', y: ' + self.canvasOffsetTop;\n                d.touchDelta = 'x: ' + self.touchDelta.x + ', y: ' + self.touchDelta.y;\n                d.touchAnimateTo = 'x: ' + self.touchAnimateTo.x + ', y: ' + self.touchAnimateTo.y;\n                d.scrollAnimation = 'x: ' + self.scrollAnimation.x + ', y: ' + self.scrollAnimation.y;\n                d.touchPPS = 'x: ' + self.xPPS + ', y: ' + self.yPPS;\n                d.touchPPST = 'x: ' + self.xPPST + ', y: ' + self.yPPST;\n                d.touchDuration = self.touchDuration;\n                d.pointerLockPosition =  self.pointerLockPosition ?\n                        self.pointerLockPosition.x + ', ' + self.pointerLockPosition.y : '';\n                d.size = 'w: ' + self.width + ', h: ' + self.height;\n                d.mouse = 'x: ' + self.mouse.x + ', y: ' + self.mouse.y;\n                d.touch = !self.touchStart\n                    ? '' : 'x: ' + self.touchStart.x + ', y: ' + self.touchStart.y;\n                d.entities = self.visibleCells.length;\n                d.hasFocus = self.hasFocus;\n                d.dragMode = self.dragMode;\n                if (self.currentCell) {\n                    d.columnIndex = self.currentCell.columnIndex;\n                    d.rowIndex = self.currentCell.rowIndex;\n                    d.sortColumnIndex = self.currentCell.sortColumnIndex;\n                    d.sortRowIndex = self.currentCell.sortRowIndex;\n                    d.context = self.currentCell.context;\n                    d.dragContext = self.currentCell.dragContext;\n                    d.style = self.currentCell.style;\n                    d.type = self.currentCell.type;\n                }\n                self.ctx.textAlign = 'right';\n                self.ctx.fillStyle = 'rgba(0, 0, 0, .40)';\n                fillRect(0, 0, self.width, self.height);\n                Object.keys(d).forEach(function (key, index) {\n                    var m = key + ': ' + d[key],\n                        lh = 14;\n                    self.ctx.fillStyle = 'rgba(37, 254, 21, .90)';\n                    fillText(m, w - 20, (self.attributes.showPerformance ? 140 : 24) + (index * lh));\n                });\n                self.ctx.restore();\n            }\n            self.ctx.save();\n            initDraw();\n            drawBackground();\n            drawFrozenRows();\n            drawRows();\n            drawActiveCell();\n            drawHeaders();\n            drawFrozenMarkers();\n            drawSelectionBorders();\n            drawSelectionHandles();\n            drawReorderMarkers();\n            drawMoveMarkers();\n            drawScrollBars();\n            if (checkScrollHeight) {\n                self.resize(true);\n            }\n            drawBorder();\n            drawDebug();\n            drawPerfLines();\n            if (self.dispatchEvent('afterdraw', {})) { return; }\n            self.ctx.restore();\n        };\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        var wheeling;\n        self.stopPropagation = function (e) { e.stopPropagation(); };\n        /**\n         * Adds an event listener to the given event.\n         * @memberof canvasDatagrid\n         * @name addEventListener\n         * @method\n         * @param {string} ev The name of the event to subscribe to.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.addEventListener = function (ev, fn) {\n            self.events[ev] = self.events[ev] || [];\n            self.events[ev].unshift(fn);\n        };\n        /**\n         * Removes the given listener function from the given event.  Must be an actual reference to the function that was bound.\n         * @memberof canvasDatagrid\n         * @name removeEventListener\n         * @method\n         * @param {string} ev The name of the event to unsubscribe from.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.removeEventListener = function (ev, fn) {\n            (self.events[ev] || []).forEach(function removeEachListener(sfn, idx) {\n                if (fn === sfn) {\n                    self.events[ev].splice(idx, 1);\n                }\n            });\n        };\n        /**\n         * Fires the given event, padding an event object to the event subscribers.\n         * @memberof canvasDatagrid\n         * @name dispatchEvent\n         * @method\n         * @param {number} ev The name of the event to dispatch.\n         * @param {number} e The event object.\n         */\n        self.dispatchEvent = function (ev, e) {\n            e = ev.type ? ev : (e || {});\n            ev = ev.type || ev;\n            var defaultPrevented;\n            function preventDefault() {\n                defaultPrevented = true;\n            }\n            if (!self.events[ev]) { return; }\n            self.events[ev].forEach(function dispatchEachEvent(fn) {\n                e.ctx = self.ctx;\n                e.preventDefault = preventDefault;\n                fn.apply(self.intf, [e]);\n            });\n            return defaultPrevented;\n        };\n        self.getRatio = function () {\n            return Math.min(self.attributes.maxPixelRatio, (window.devicePixelRatio || 1) /\n                (self.ctx.webkitBackingStorePixelRatio ||\n                    self.ctx.mozBackingStorePixelRatio ||\n                    self.ctx.msBackingStorePixelRatio ||\n                    self.ctx.oBackingStorePixelRatio ||\n                    self.ctx.backingStorePixelRatio || 1));\n        };\n        self.resize = function (drawAfterResize, onlyResizeX) {\n            if (!self.canvas) { return; }\n            var x,\n                v = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'vertical-scroll-bar'\n                },\n                n = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'horizontal-scroll-bar'\n                },\n                vb = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'vertical-scroll-box'\n                },\n                nb = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'horizontal-scroll-box'\n                },\n                co = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    isCorner: true,\n                    isScrollBoxCorner: true,\n                    style: 'scroll-box-corner'\n                },\n                m = (self.style.scrollBarBoxMargin * 2),\n                b = (self.style.scrollBarBorderWidth * 2),\n                d = self.style.scrollBarBoxMargin * 0.5,\n                sbw = self.style.scrollBarWidth + (self.style.scrollBarBorderWidth * 2),\n                ratio = self.getRatio(),\n                bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                cellBorder = self.style.cellBorderWidth * bm,\n                columnHeaderCellBorder = self.style.columnHeaderCellBorderWidth * bm,\n                dataHeight = 0,\n                dataWidth = 0,\n                dims,\n                l = (self.data || []).length,\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                ch = self.style.cellHeight;\n            // sets actual DOM canvas element\n            function setCanvasSize() {\n                if (self.isChildGrid) {\n                    return;\n                }\n                dims = {\n                    // HACK +1 ? maybe it's a magic cell border?  Required to line up properly in auto height mode.\n                    height: dataHeight + cellBorder + 1,\n                    width: dataWidth + rowHeaderCellWidth + cellBorder\n                };\n                ['width', 'height'].forEach(function (dim) {\n                    //TODO: support inherit\n                    if (['auto', undefined].indexOf(self.style[dim]) !== -1) {\n                        self.parentNodeStyle[dim] = dims[dim] + 'px';\n                    } else {\n                        self.parentNodeStyle[dim] = self.style[dim];\n                    }\n                });\n            }\n            self.scrollCache.x = [];\n            if (!onlyResizeX) {\n                self.scrollCache.y = [];\n                for (x = 0; x < l; x += 1) {\n                    self.scrollCache.y[x] = dataHeight;\n                    dataHeight += (((self.sizes.rows[x] || ch) + (self.sizes.trees[x] || 0)) * self.scale)\n                        // HACK? if an expanded tree row is frozen it is necessary to add the tree row's height a second time.\n                        + (self.frozenRow > x ? (self.sizes.trees[x] || 0) : 0);\n                }\n                if (l > 1) {\n                    self.scrollCache.y[x] = dataHeight;\n                }\n            }\n            dataWidth = self.getSchema().reduce(function reduceSchema(accumulator, column, columnIndex) {\n                if (column.hidden) {\n                    self.scrollCache.x[columnIndex] = accumulator;\n                    return accumulator;\n                }\n                var va = accumulator + ((self.sizes.columns[columnIndex] || column.width || self.style.cellWidth) * self.scale);\n                self.scrollCache.x[columnIndex] = va;\n                return va;\n            }, 0) || 0;\n            if (self.attributes.showNewRow) {\n                dataHeight += ch + cellBorder;\n            }\n            setCanvasSize();\n            if (self.isChildGrid) {\n                self.width = self.parentNode.offsetWidth;\n                self.height = self.parentNode.offsetHeight;\n            } else if (self.height !== self.canvas.offsetHeight || self.width !== self.canvas.offsetWidth) {\n                self.height = self.canvas.offsetHeight;\n                self.width = self.canvas.offsetWidth;\n                self.canvasOffsetLeft = self.args.canvasOffsetLeft || 0;\n                self.canvasOffsetTop = self.args.canvasOffsetTop || 0;\n            }\n            /// calculate scroll bar dimensions\n            // non-controversial\n            self.scrollBox.top = columnHeaderCellHeight + columnHeaderCellBorder;\n            self.scrollBox.left = rowHeaderCellWidth;\n            // width and height of scroll box\n            self.scrollBox.width = self.width - rowHeaderCellWidth - cellBorder;\n            self.scrollBox.height = self.height;\n            // is the data larger than the scroll box\n            self.scrollBox.horizontalBarVisible = dataWidth > self.scrollBox.width;\n            self.scrollBox.verticalBarVisible = dataHeight > self.scrollBox.height;\n            // if the scroll box is visible, make room for it by expanding the size of the element\n            // if the other dimension is set to auto\n            if (!onlyResizeX && self.scrollBox.horizontalBarVisible && !self.isChildGrid) {\n                if (self.style.height === 'auto') {\n                    self.height += sbw;\n                }\n                dataHeight += sbw;\n                setCanvasSize();\n                self.scrollBox.horizontalBarVisible = dataWidth > self.scrollBox.width;\n                self.scrollBox.verticalBarVisible = dataHeight > self.scrollBox.height;\n            }\n            if (self.scrollBox.verticalBarVisible && !self.isChildGrid) {\n                if (self.style.width === 'auto') {\n                    self.width += sbw;\n                }\n                // HACK, this will not work with onlyResizeX mode for now :/\n                dataWidth += sbw;\n                setCanvasSize();\n                self.scrollBox.verticalBarVisible = dataHeight > self.scrollBox.height;\n                self.scrollBox.horizontalBarVisible = dataWidth > self.scrollBox.width;\n            }\n            // set again after bar visibility checks\n            self.scrollBox.width = self.width - rowHeaderCellWidth - cellBorder - (self.scrollBox.verticalBarVisible ? sbw : 0);\n            self.scrollBox.height = self.height - columnHeaderCellHeight - columnHeaderCellBorder;\n            self.scrollBox.scrollWidth = dataWidth - self.scrollBox.width;\n            if (!onlyResizeX) {\n                self.scrollBox.scrollHeight = dataHeight - self.scrollBox.height;\n            }\n            self.scrollBox.widthBoxRatio = self.scrollBox.width / dataWidth;\n            self.scrollBox.scrollBoxWidth = self.scrollBox.width\n                * self.scrollBox.widthBoxRatio\n                - self.style.scrollBarWidth - b - d;\n            // TODO: This heightBoxRatio number is terribly wrong.\n            // They should be a result of the size of the grid/canvas?\n            // it being off causes the scroll bar to \"slide\" under\n            // the dragged mouse.\n            // https://github.com/TonyGermaneri/canvas-datagrid/issues/97\n            self.scrollBox.heightBoxRatio = (self.scrollBox.height - 15) / dataHeight;\n            self.scrollBox.scrollBoxHeight = self.scrollBox.height\n                * self.scrollBox.heightBoxRatio\n                - self.style.scrollBarWidth - b - d;\n            self.scrollBox.scrollBoxWidth = Math.max(self.scrollBox.scrollBoxWidth, self.style.scrollBarBoxMinSize);\n            self.scrollBox.scrollBoxHeight = Math.max(self.scrollBox.scrollBoxHeight, self.style.scrollBarBoxMinSize);\n            // horizontal\n            n.x += rowHeaderCellWidth;\n            n.y += self.height - self.style.scrollBarWidth - d;\n            n.width = self.width - self.style.scrollBarWidth - rowHeaderCellWidth - d - m;\n            n.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n            // horizontal box\n            nb.y = n.y + self.style.scrollBarBoxMargin;\n            nb.width = self.scrollBox.scrollBoxWidth;\n            nb.height = self.style.scrollBarBoxWidth;\n            // vertical\n            v.x += self.width - self.style.scrollBarWidth - self.style.scrollBarBorderWidth - d;\n            v.y += columnHeaderCellHeight;\n            v.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n            v.height = self.height - columnHeaderCellHeight - self.style.scrollBarWidth - d - m;\n            // vertical box\n            vb.x = v.x + self.style.scrollBarBoxMargin;\n            vb.width = self.style.scrollBarBoxWidth;\n            vb.height = self.scrollBox.scrollBoxHeight;\n            // corner\n            co.x = n.x + n.width + m;\n            co.y = v.y + v.height + m;\n            co.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n            co.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n            self.scrollBox.entities = {\n                horizontalBar: n,\n                horizontalBox: nb,\n                verticalBar: v,\n                verticalBox: vb,\n                corner: co\n            };\n            self.scrollBox.bar = {\n                v: v,\n                h: n\n            };\n            self.scrollBox.box = {\n                v: vb,\n                h: nb\n            };\n            /// calculate page and dom elements\n            self.page = Math.max(1, self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap);\n            // set canvas drawing related items\n            if (!self.isChildGrid) {\n                self.canvas.width = self.width * ratio;\n                self.canvas.height = self.height * ratio;\n                self.ctx.scale(ratio, ratio);\n            }\n            // resize any open dom elements (input/textarea)\n            self.resizeEditInput();\n            self.scroll(true);\n            if (drawAfterResize) {\n                self.draw(true);\n            }\n            self.dispatchEvent('resize', {});\n            return true;\n        };\n        self.scroll = function (dontDraw) {\n            var s = self.getSchema(),\n                l = (self.data || []).length,\n                ch = self.style.cellHeight;\n            // go too far in leaps, then get focused\n            self.scrollIndexTop = Math.floor((l * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight)) - 100);\n            self.scrollIndexTop = Math.max(self.scrollIndexTop, 0);\n            self.scrollPixelTop = self.scrollCache.y[self.scrollIndexTop];\n            // sometimes the grid is rendered but the height is zero\n            if (self.scrollBox.scrollHeight === 0) {\n                self.scrollIndexTop = 0;\n            }\n            self.scrollPixelTop = 0;\n            self.scrollIndexLeft = 0;\n            self.scrollPixelLeft = 0;\n            while (self.scrollPixelTop < self.scrollBox.scrollTop && self.scrollIndexTop < self.data.length) {\n                // start on index +1 since index +0 was checked prior to loop start in \"go too far\"\n                self.scrollIndexTop += 1;\n                self.scrollPixelTop = self.scrollCache.y[self.scrollIndexTop];\n            }\n            while (self.scrollPixelLeft < self.scrollBox.scrollLeft && self.scrollIndexLeft < s.length) {\n                self.scrollPixelLeft = self.scrollCache.x[self.scrollIndexLeft];\n                self.scrollIndexLeft += 1;\n            }\n            if ((self.data || []).length > 0 && s.length > 0) {\n                self.scrollIndexLeft = Math.max(self.scrollIndexLeft - 1, 0);\n                self.scrollPixelLeft = Math.max(self.scrollPixelLeft\n                    - ((self.sizes.columns[self.scrollIndexLeft] || s[self.scrollIndexLeft].width || self.style.cellWidth) * self.scale), 0);\n                self.scrollIndexTop = Math.max(self.scrollIndexTop - 1, 0);\n                self.scrollPixelTop = Math.max((self.scrollPixelTop\n                    - (\n                        self.data[self.scrollIndexTop] ? (self.sizes.rows[self.scrollIndexTop] || ch)\n                                + (self.sizes.trees[self.scrollIndexTop] || 0)\n                        : ch\n                    ) * self.scale), 0);\n            }\n            self.ellipsisCache = {};\n            if (!dontDraw) {\n                self.draw(true);\n            }\n            //TODO: figure out why this has to be delayed for child grids\n            //BUG: wheeling event on 3rd level hierarchy fails to move input box\n            requestAnimationFrame(self.resizeEditInput);\n            self.dispatchEvent('scroll', {top: self.scrollBox.scrollTop, left: self.scrollBox.scrollLeft});\n        };\n        self.mousemove = function (e, overridePos) {\n            if (self.contextMenu || self.input) {\n                return;\n            }\n            self.mouse = overridePos || self.getLayerPos(e);\n            var ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                i,\n                vs = self.getVisibleSchema(),\n                dragBounds,\n                sBounds,\n                x = self.mouse.x,\n                y = self.mouse.y,\n                o = self.getCellAt(x, y),\n                delta,\n                ev = {NativeEvent: e, cell: o, x: x, y: y},\n                previousCell = self.currentCell;\n            clearTimeout(self.scrollTimer);\n            if (!self.isInGrid({x: x, y: y})) {\n                self.hasFocus = false;\n            }\n            if (self.dispatchEvent('mousemove', ev)) {\n                return;\n            }\n            if (o && self.currentCell) {\n                self.rowBoundaryCrossed = self.currentCell.rowIndex !== o.rowIndex;\n                self.columnBoundaryCrossed = self.currentCell.columnIndex !== o.columnIndex;\n                self.cellBoundaryCrossed = self.rowBoundaryCrossed || self.columnBoundaryCrossed;\n                ['row', 'column', 'cell'].forEach(function (prefix) {\n                    if (self[prefix + 'BoundaryCrossed']) {\n                        ev.cell = previousCell;\n                        self.dispatchEvent(prefix + 'mouseout', ev);\n                        ev.cell = o;\n                        self.dispatchEvent(prefix + 'mouseover', ev);\n                    }\n                });\n            }\n            self.currentCell = o;\n            if (!self.hasFocus) {\n                return;\n            }\n            self.hovers = {};\n            if (!self.draggingItem\n                    && o\n                    && self.scrollModes.indexOf(o.context) === -1) {\n                self.dragItem = o;\n                self.dragMode = o.dragContext;\n                self.cursor = o.context;\n                if (o.context === 'cell') {\n                    self.cursor = 'default';\n                    self.hovers = { rowIndex: o.rowIndex, columnIndex: o.columnIndex };\n                }\n                if ((self.selecting || self.reorderObject)\n                        && o.context === 'cell') {\n                    delta = {\n                        x: Math.abs(self.dragStart.x - x),\n                        y: Math.abs(self.dragStart.y - y)\n                    };\n                    if (self.dragStartObject.columnIndex !== -1 && e.shiftKey) {\n                        self.dragStartObject = {\n                            rowIndex: self.activeCell.rowIndex,\n                            columnIndex: self.activeCell.columnIndex\n                        };\n                    }\n                    dragBounds = {\n                        top: Math.min(self.dragStartObject.rowIndex, o.rowIndex),\n                        left: Math.min(self.dragStartObject.columnIndex, o.columnIndex),\n                        bottom: Math.max(self.dragStartObject.rowIndex, o.rowIndex),\n                        right: Math.max(self.dragStartObject.columnIndex, o.columnIndex)\n                    };\n                    if (self.dragStartObject.columnIndex === -1) {\n                        sBounds = self.getSelectionBounds();\n                        dragBounds.left = -1;\n                        dragBounds.right = vs.length - 1;\n                        dragBounds.top = Math.min(sBounds.top, o.rowIndex);\n                        dragBounds.bottom = Math.max(sBounds.bottom, o.rowIndex);\n                    }\n                    if (self.dragStartObject.rowIndex !== o.rowIndex\n                                || self.dragStartObject.columnIndex !== o.columnIndex) {\n                        self.ignoreNextClick = true;\n                    }\n                    if (self.cellBoundaryCrossed || (delta.x === 0 && delta.y === 0) || (self.attributes.selectionMode === 'row')) {\n                        if (((self.attributes.selectionMode === 'row') || self.dragStartObject.columnIndex === -1)\n                                && self.rowBoundaryCrossed) {\n                            self.selectRow(o.rowIndex, ctrl, null, true);\n                        } else if (self.attributes.selectionMode !== 'row') {\n                            if (!self.dragAddToSelection && o.rowIndex !== undefined) {\n                                if (self.selections[o.rowIndex] && self.selections[o.rowIndex].indexOf(o.columnIndex) !== -1) {\n                                    self.selections[o.rowIndex].splice(self.selections[o.rowIndex].indexOf(o.columnIndex), 1);\n                                }\n                            } else {\n                                self.selections[o.rowIndex] = self.selections[o.rowIndex] || [];\n                                if (self.selections[o.rowIndex].indexOf(o.columnIndex) === -1) {\n                                    self.selections[o.rowIndex].push(o.columnIndex);\n                                }\n                            }\n                        }\n                    }\n                    if ((!self.selectionBounds || (dragBounds.top !== self.selectionBounds.top\n                            || dragBounds.left !== self.selectionBounds.left\n                            || dragBounds.bottom !== self.selectionBounds.bottom\n                            || dragBounds.right !== self.selectionBounds.right)) && !ctrl) {\n                        self.selections = [];\n                        sBounds = dragBounds;\n                        if (self.attributes.selectionMode === 'row') {\n                            for (i = sBounds.top; i <= sBounds.bottom; i += 1) {\n                                self.selectRow(i, true, null, true);\n                            }\n                        } else if (dragBounds.top !== -1) {\n                            self.selectArea(sBounds, true);\n                        }\n                    }\n                    self.autoScrollZone(e, x, y, ctrl);\n                }\n            }\n            self.cellBoundaryCrossed = false;\n            self.rowBoundaryCrossed = false;\n            self.columnBoundaryCrossed = false;\n            self.draw(true);\n        };\n        self.click = function (e, overridePos) {\n            var i,\n                ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                pos = overridePos || self.getLayerPos(e);\n            self.currentCell = self.getCellAt(pos.x, pos.y);\n            if (self.currentCell.grid !== undefined) {\n                return;\n            }\n            function checkSelectionChange() {\n                var ev = {\n                    selections: self.selections,\n                    selectionBounds: self.selectionBounds\n                };\n                Object.defineProperty(ev, 'selectedData', {\n                    get: function () {\n                        return self.getSelectedData();\n                    }\n                });\n            }\n            if (self.input) {\n                self.endEdit();\n            }\n            if (self.ignoreNextClick) {\n                self.ignoreNextClick = false;\n                return;\n            }\n            i = self.currentCell;\n            if (self.dispatchEvent('click', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (['rowHeaderCell', 'columnHeaderCell'].indexOf(self.currentCell.style) === -1 && !ctrl) {\n                self.setActiveCell(i.columnIndex, i.rowIndex);\n            }\n            if (self.currentCell.context === 'cell') {\n                if (self.currentCell.style === 'cornerCell') {\n                    self.selectAll();\n                    self.draw();\n                    checkSelectionChange();\n                    return;\n                }\n                if (self.currentCell.style === 'columnHeaderCell') {\n                    if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                        if (self.orderBy === i.header.name) {\n                            self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                        } else {\n                            self.orderDirection = 'asc';\n                        }\n                        self.order(i.header.name, self.orderDirection);\n                        checkSelectionChange();\n                        return;\n                    }\n                    if (self.attributes.columnHeaderClickBehavior === 'select') {\n                        self.selectColumn(i.header.index, ctrl, e.shiftKey, true);\n                        checkSelectionChange();\n                        self.draw();\n                        return;\n                    }\n                }\n                self.selections[i.rowIndex] = self.selections[i.rowIndex] || [];\n                if (((self.attributes.selectionMode === 'row') || self.currentCell.style === 'rowHeaderCell')) {\n                    if (self.currentCell.style === 'rowHeaderCell'\n                            && self.attributes.tree && pos.x > 0\n                            && pos.x - self.currentCell.x < self.style.treeArrowWidth\n                            + self.style.treeArrowMarginLeft\n                            + self.style.treeArrowMarginRight + self.style.treeArrowClickRadius\n                            && pos.y - self.currentCell.y < self.style.treeArrowHeight\n                            + self.style.treeArrowMarginTop + self.style.treeArrowClickRadius\n                            && pos.y > 0) {\n                        self.toggleTree(i.rowIndex);\n                        return;\n                    }\n                }\n                if (e.shiftKey && !ctrl) {\n                    self.selectionBounds = self.getSelectionBounds();\n                    self.selectArea(undefined, false);\n                }\n            }\n            checkSelectionChange();\n            self.draw(true);\n        };\n        self.dragResizeColumn = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = self.resizingStartingWidth + pos.x - self.dragStart.x;\n            y = self.resizingStartingHeight + pos.y - self.dragStart.y;\n            if (x < self.style.minColumnWidth) {\n                x = self.style.minColumnWidth;\n            }\n            if (y < self.style.minRowHeight) {\n                y = self.style.minRowHeight;\n            }\n            if (self.dispatchEvent('resizecolumn', {x: x, y: y, draggingItem: self.draggingItem})) { return false; }\n            if (self.scrollBox.scrollLeft > self.scrollBox.scrollWidth - self.attributes.resizeScrollZone\n                    && self.dragMode === 'ew-resize') {\n                self.resize(true, true);\n                self.scrollBox.scrollLeft += x;\n            }\n            if (self.dragMode === 'ew-resize') {\n                self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.sortColumnIndex] = x;\n                if (['rowHeaderCell', 'cornerCell'].indexOf(self.draggingItem.header.style) !== -1) {\n                    self.resize(true, true);\n                }\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.dragMode === 'ns-resize') {\n                if (self.draggingItem.rowOpen) {\n                    self.sizes.trees[self.draggingItem.rowIndex] = y;\n                } else if (self.attributes.globalRowResize) {\n                    self.style.cellHeight = y;\n                } else {\n                    self.sizes.rows[self.draggingItem.rowIndex] = y;\n                }\n                self.dispatchEvent('resizerow', {row: y});\n                self.resizeChildGrids();\n                return;\n            }\n            self.ellipsisCache = {};\n        };\n        self.stopDragResize = function () {\n            self.resize();\n            document.body.removeEventListener('mousemove', self.dragResizeColumn, false);\n            document.body.removeEventListener('mouseup', self.stopDragResize, false);\n            self.setStorageData();\n            self.draw(true);\n            self.ignoreNextClick = true;\n        };\n        self.scrollGrid = function (e) {\n            var pos = self.getLayerPos(e);\n            if (self.attributes.scrollPointerLock && self.pointerLockPosition\n                    && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                self.pointerLockPosition.x += e.movementX;\n                self.pointerLockPosition.y += e.movementY;\n                self.pointerLockPosition.x = Math.min(self.width - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.x));\n                self.pointerLockPosition.y = Math.min(self.height - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.y));\n                pos = self.pointerLockPosition;\n            }\n            self.scrollMode = self.getCellAt(pos.x, pos.y).context;\n            if (self.scrollMode === 'horizontal-scroll-box' && self.scrollStartMode !== 'horizontal-scroll-box') {\n                self.scrollStartMode = 'horizontal-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.left = self.scrollBox.scrollLeft;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box' && self.scrollStartMode !== 'vertical-scroll-box') {\n                self.scrollStartMode = 'vertical-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.top = self.scrollBox.scrollTop;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollStartMode === 'vertical-scroll-box'\n                    && self.scrollMode !== 'vertical-scroll-box') {\n                self.scrollMode = 'vertical-scroll-box';\n            }\n            if (self.scrollStartMode === 'horizontal-scroll-box'\n                    && self.scrollMode !== 'horizontal-scroll-box') {\n                self.scrollMode = 'horizontal-scroll-box';\n            }\n            clearTimeout(self.scrollTimer);\n            if (self.scrollModes.indexOf(self.scrollMode) === -1) {\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box') {\n                self.scrollBox.scrollTop = self.scrollStart.top + ((pos.y - self.dragStart.y)\n                    / self.scrollBox.heightBoxRatio);\n            } else if (self.scrollMode === 'vertical-scroll-top') {\n                self.scrollBox.scrollTop -= (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'vertical-scroll-bottom') {\n                self.scrollBox.scrollTop += (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n            if (self.scrollMode === 'horizontal-scroll-box') {\n                self.scrollBox.scrollLeft = self.scrollStart.left + ((pos.x - self.dragStart.x)\n                    / self.scrollBox.widthBoxRatio);\n            } else if (self.scrollMode === 'horizontal-scroll-right') {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'horizontal-scroll-left') {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.stopScrollGrid = function () {\n            clearTimeout(self.scrollTimer);\n            if (document.exitPointerLock) {\n                document.exitPointerLock();\n            }\n            document.body.removeEventListener('mousemove', self.scrollGrid, false);\n        };\n        self.dragReorder = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = pos.x - self.dragStart.x;\n            y = pos.y - self.dragStart.y;\n            if (!self.attributes.allowColumnReordering && self.dragMode === 'column-reorder') {\n                return;\n            }\n            if (!self.attributes.allowRowReordering && self.dragMode === 'row-reorder') {\n                return;\n            }\n            if (self.dispatchEvent('reordering', {\n                    NativeEvent: e,\n                    source: self.dragStartObject,\n                    target: self.currentCell,\n                    dragMode: self.dragMode\n                })) {\n                return;\n            }\n            if (Math.abs(x) > self.attributes.reorderDeadZone || Math.abs(y) > self.attributes.reorderDeadZone) {\n                self.reorderObject = self.draggingItem;\n                self.reorderTarget = self.currentCell;\n                self.reorderObject.dragOffset = {\n                    x: x,\n                    y: y\n                };\n                self.autoScrollZone(e, pos.x, pos.y, false);\n            }\n        };\n        self.stopDragReorder = function (e) {\n            var oIndex,\n                tIndex,\n                cr = {\n                    'row-reorder': self.orders.rows,\n                    'column-reorder': self.orders.columns\n                },\n                i = {\n                    'row-reorder': 'rowIndex',\n                    'column-reorder': 'sortColumnIndex'\n                }[self.dragMode];\n            document.body.removeEventListener('mousemove', self.dragReorder, false);\n            document.body.removeEventListener('mouseup', self.stopDragReorder, false);\n            if (self.reorderObject\n                    && self.reorderTarget\n                    && ((self.dragMode === 'column-reorder' && self.reorderTarget.sortColumnIndex > -1\n                        && self.reorderTarget.sortColumnIndex < self.getSchema().length)\n                    || (self.dragMode === 'row-reorder' && self.reorderTarget.rowIndex > -1\n                        && self.reorderTarget.rowIndex < self.data.length))\n                    && self.reorderObject[i] !== self.reorderTarget[i]\n                    && !self.dispatchEvent('reorder', {\n                        NativeEvent: e,\n                        source: self.reorderObject,\n                        target: self.reorderTarget,\n                        dragMode: self.dragMode\n                    })) {\n                self.ignoreNextClick = true;\n                oIndex = cr[self.dragMode].indexOf(self.reorderObject[i]);\n                tIndex = cr[self.dragMode].indexOf(self.reorderTarget[i]);\n                cr[self.dragMode].splice(oIndex, 1);\n                cr[self.dragMode].splice(tIndex, 0, self.reorderObject[i]);\n                self.setStorageData();\n            }\n            self.reorderObject = undefined;\n            self.reorderTarget = undefined;\n            self.draw(true);\n        };\n        self.dragMove = function (e) {\n            if (self.dispatchEvent('moving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.moveOffset = {\n                x: self.currentCell.columnIndex - self.dragStartObject.columnIndex,\n                y: self.currentCell.rowIndex - self.dragStartObject.rowIndex\n            };\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopDragMove = function (e) {\n            document.body.removeEventListener('mousemove', self.dragMove, false);\n            document.body.removeEventListener('mouseup', self.stopDragMove, false);\n            var b = self.getSelectionBounds();\n            if (self.dispatchEvent('endmove', {NativeEvent: e, cell: self.currentCell})) {\n                self.movingSelection = undefined;\n                self.moveOffset = undefined;\n                self.draw(true);\n                return;\n            }\n            if (self.moveOffset) {\n                self.moveTo(self.movingSelection, b.left + self.moveOffset.x, b.top + self.moveOffset.y);\n                self.moveSelection(self.moveOffset.x, self.moveOffset.y);\n            }\n            self.movingSelection = undefined;\n            self.moveOffset = undefined;\n            self.draw(true);\n        };\n        self.freezeMove = function (e) {\n            if (self.dispatchEvent('freezemoving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.ignoreNextClick = true;\n            self.freezeMarkerPosition = pos;\n            if (self.currentCell && self.currentCell.rowIndex !== undefined && self.dragMode === 'frozen-row-marker') {\n                self.scrollBox.scrollTop = 0;\n                self.frozenRow = self.currentCell.rowIndex + 1;\n            }\n            if (self.currentCell && self.currentCell.columnIndex !== undefined && self.dragMode === 'frozen-column-marker') {\n                self.scrollBox.scrollLeft = 0;\n                self.frozenColumn = self.currentCell.columnIndex + 1;\n            }\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopFreezeMove = function (e) {\n            document.body.removeEventListener('mousemove', self.freezeMove, false);\n            document.body.removeEventListener('mouseup', self.stopFreezeMove, false);\n            self.freezeMarkerPosition = undefined;\n            if (self.dispatchEvent('endfreezemove', {NativeEvent: e})) {\n                self.frozenRow = self.startFreezeMove.x;\n                self.frozenColumn = self.startFreezeMove.y;\n                self.draw(true);\n                return;\n            }\n            self.draw(true);\n        };\n        self.mousedown = function (e, overridePos) {\n            self.lastMouseDownTarget = e.target;\n            if (self.dispatchEvent('mousedown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (e.button === 2 || self.input) { return; }\n            var ctrl = (e.ctrlKey || e.metaKey),\n                move = /-move/.test(self.dragMode),\n                freeze = /frozen-row-marker|frozen-column-marker/.test(self.dragMode),\n                resize = /-resize/.test(self.dragMode);\n            self.dragStart = overridePos || self.getLayerPos(e);\n            self.scrollStart = {\n                left: self.scrollBox.scrollLeft,\n                top: self.scrollBox.scrollTop\n            };\n            self.dragStartObject = self.getCellAt(self.dragStart.x, self.dragStart.y);\n            self.dragAddToSelection = !self.dragStartObject.selected;\n            if (!ctrl && !e.shiftKey && !/(vertical|horizontal)-scroll-(bar|box)/\n                    .test(self.dragStartObject.context)\n                    && self.currentCell\n                    && !self.currentCell.isColumnHeader\n                    && !move\n                    && !freeze\n                    && !resize) {\n                self.selections = [];\n            }\n            if (self.dragStartObject.isGrid) {\n                return;\n            }\n            if (self.scrollModes.indexOf(self.dragStartObject.context) !== -1) {\n                self.scrollMode = self.dragStartObject.context;\n                self.scrollStartMode = self.dragStartObject.context;\n                self.scrollGrid(e);\n                if (self.attributes.scrollPointerLock\n                        && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                    self.pointerLockPosition = {\n                        x: self.dragStart.x,\n                        y: self.dragStart.y\n                    };\n                    self.canvas.requestPointerLock();\n                }\n                document.body.addEventListener('mousemove', self.scrollGrid, false);\n                document.body.addEventListener('mouseup', self.stopScrollGrid, false);\n                self.ignoreNextClick = true;\n                return;\n            }\n            if (self.dragMode === 'cell') {\n                self.selecting = true;\n                if ((self.attributes.selectionMode === 'row' || self.dragStartObject.columnIndex === -1)\n                        && self.dragStartObject.rowIndex > -1) {\n                    self.selectRow(self.dragStartObject.rowIndex, ctrl, null, true);\n                } else if (self.attributes.selectionMode !== 'row') {\n                    self.mousemove(e);\n                }\n                return;\n            }\n            if (move) {\n                self.draggingItem = self.dragItem;\n                self.movingSelection = self.selections.concat([]);\n                self.dragging = self.dragStartObject;\n                if (self.dispatchEvent('beginmove', {NativeEvent: e, cell: self.currentCell})) { return; }\n                document.body.addEventListener('mousemove', self.dragMove, false);\n                document.body.addEventListener('mouseup', self.stopDragMove, false);\n                return self.mousemove(e);\n            }\n            if (freeze) {\n                self.draggingItem = self.dragItem;\n                self.startFreezeMove = {\n                    x: self.frozenRow,\n                    y: self.frozenColumn\n                };\n                if (self.dispatchEvent('beginfreezemove', {NativeEvent: e})) { return; }\n                document.body.addEventListener('mousemove', self.freezeMove, false);\n                document.body.addEventListener('mouseup', self.stopFreezeMove, false);\n                return self.mousemove(e);\n            }\n            if (resize) {\n                self.draggingItem = self.dragItem;\n                if (self.draggingItem.rowOpen) {\n                    self.resizingStartingHeight = self.sizes.trees[self.draggingItem.rowIndex];\n                } else {\n                    self.resizingStartingHeight = self.sizes.rows[self.draggingItem.rowIndex] || self.style.cellHeight;\n                }\n                self.resizingStartingWidth = self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.sortColumnIndex] || self.draggingItem.width;\n                document.body.addEventListener('mousemove', self.dragResizeColumn, false);\n                document.body.addEventListener('mouseup', self.stopDragResize, false);\n                return;\n            }\n            if (['row-reorder', 'column-reorder'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragStartObject;\n                document.body.addEventListener('mousemove', self.dragReorder, false);\n                document.body.addEventListener('mouseup', self.stopDragReorder, false);\n                return;\n            }\n        };\n        self.mouseup = function (e) {\n            clearTimeout(self.scrollTimer);\n            self.cellBoundaryCrossed = true;\n            self.rowBoundaryCrossed = true;\n            self.columnBoundaryCrossed = true;\n            self.selecting = undefined;\n            self.draggingItem = undefined;\n            self.dragStartObject = undefined;\n            if (self.dispatchEvent('mouseup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            if (self.currentCell && self.currentCell.grid !== undefined) {\n                return;\n            }\n            if (self.contextMenu || self.input) { return; }\n            if (self.dragStart && self.isInGrid(self.dragStart)) {\n                self.controlInput.focus();\n            }\n            e.preventDefault();\n        };\n        // gets the horizontal adjacent cells as well as first/last based on column visibility\n        self.getAdjacentCells = function () {\n            var x,\n                i,\n                s = self.getSchema(),\n                o = {};\n            for (x = 0; x < s.length; x += 1) {\n                i = self.orders.columns[x];\n                if (!s[i].hidden) {\n                    if (o.first === undefined) {\n                        o.first = x;\n                        o.left = x;\n                    }\n                    o.last = x;\n                    if (x > self.activeCell.columnIndex && o.right === undefined) {\n                        o.right = x;\n                    }\n                    if (x < self.activeCell.columnIndex) {\n                        o.left = x;\n                    }\n                }\n            }\n            if (o.right === undefined) {\n                o.right = o.last;\n            }\n            return o;\n        };\n        self.keydown = function (e) {\n            var i,\n                ev,\n                adjacentCells = self.getAdjacentCells(),\n                x = self.activeCell.columnIndex,\n                y = self.activeCell.rowIndex,\n                ctrl = (e.ctrlKey || e.metaKey),\n                last = self.data.length - 1,\n                s = self.getSchema(),\n                cols = s.length - 1;\n            if (self.dispatchEvent('keydown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.attributes.showNewRow) {\n                last += 1;\n            }\n            if (e.keyCode === 9) {\n                e.preventDefault();\n            }\n            // esc\n            if (e.keyCode === 27) {\n                self.selections = [];\n                self.draw(true);\n            // ctrl + a\n            } else if (ctrl && e.keyCode === 65) {\n                self.selectAll();\n            //ArrowDown\n            } else if (e.keyCode === 40) {\n                y += 1;\n            //ArrowUp\n            } else if (e.keyCode === 38) {\n                y -= 1;\n            //ArrowLeft Tab\n            } else if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {\n                x = adjacentCells.left;\n            //ArrowRight Tab\n            } else if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {\n                x = adjacentCells.right;\n            //PageUp\n            } else if (e.keyCode === 33) {\n                y -= self.page;\n                e.preventDefault();\n            //PageDown\n            } else if (e.keyCode === 34) {\n                y += self.page;\n                e.preventDefault();\n            //Home ArrowUp\n            } else if (e.keyCode === 36 || (ctrl && e.keyCode === 38)) {\n                y = 0;\n            //End ArrowDown\n            } else if (e.keyCode === 35 || (ctrl && e.keyCode === 40)) {\n                y = self.data.length - 1;\n            //ArrowRight\n            } else if (ctrl && e.keyCode === 39) {\n                x = adjacentCells.last;\n            //ArrowLeft\n            } else if (ctrl && e.keyCode === 37) {\n                x = adjacentCells.first;\n            }\n            //Enter\n            if (e.keyCode === 13) {\n                return self.beginEditAt(x, y);\n            }\n            //Space\n            if (e.keyCode === 32) {\n                self.selections = [];\n                self.selections[Math.max(y, 0)] = [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                if (self.attributes.selectionMode === 'row') {\n                    for (i = self.selectionBounds.top; i <= self.selectionBounds.bottom; i += 1) {\n                        self.selectRow(i, ctrl, null, true);\n                    }\n                } else {\n                    self.selectArea(undefined, ctrl);\n                }\n                e.preventDefault();\n                self.draw(true);\n                return;\n            }\n            if (x < 0) {\n                x = adjacentCells.first;\n            }\n            if (y > last) {\n                y = last;\n            }\n            if (y < 0) {\n                y = 0;\n            }\n            if (x > cols) {\n                x = adjacentCells.last;\n            }\n            // TODO - most likley some column order related bugs in key based selection\n            // Arrows\n            if (e.shiftKey && [37, 38, 39, 40].indexOf(e.keyCode) !== -1) {\n                self.selections[Math.max(y, 0)] = self.selections[Math.max(y, 0)] || [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                self.selectArea(undefined, ctrl);\n                self.draw(true);\n            }\n            if (x !== self.activeCell.columnIndex || y !== self.activeCell.rowIndex) {\n                self.scrollIntoView(x !== self.activeCell.columnIndex ? x : undefined, y !== self.activeCell.rowIndex ? y : undefined);\n                self.setActiveCell(x, y);\n                if (!e.shiftKey && self.attributes.selectionFollowsActiveCell) {\n                    if (!ctrl) {\n                        self.selections = [];\n                    }\n                    self.selections[y] = self.selections[y] || [];\n                    self.selections[y].push(x);\n                    ev = {\n                        selectedData: self.getSelectedData(),\n                        selections: self.selections,\n                        selectionBounds: self.selectionBounds\n                    };\n                    Object.defineProperty(ev, 'selectedData', {\n                        get: function () {\n                            return self.getSelectedData();\n                        }\n                    });\n                    self.dispatchEvent('selectionchanged', ev);\n                }\n                self.draw(true);\n            }\n        };\n        self.keyup = function (e) {\n            if (self.dispatchEvent('keyup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n        };\n        self.keypress = function (e) {\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.dispatchEvent('keypress', {NativeEvent: e, cell: self.currentCell})) { return; }\n        };\n        self.dblclick = function (e) {\n            if (self.dispatchEvent('dblclick', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'columnHeaderCell') {\n                self.fitColumnToValues(self.currentCell.header.name);\n            } else if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'cornerCell') {\n                self.autosize();\n            } else if (['cell', 'activeCell'].indexOf(self.currentCell.style) !== -1) {\n                self.beginEditAt(self.currentCell.columnIndex, self.currentCell.rowIndex);\n            }\n        };\n        self.scrollWheel = function (e) {\n            var l,\n                t,\n                deltaX = e.deltaX === undefined ? e.NativeEvent.deltaX : e.deltaX,\n                deltaY = e.deltaY === undefined ? e.NativeEvent.deltaY : e.deltaY,\n                deltaMode = e.deltaMode === undefined ? e.NativeEvent.deltaMode : e.deltaMode;\n            if (wheeling) {\n                return;\n            }\n            if (self.dispatchEvent('wheel', {NativeEvent: e})) {\n                return;\n            }\n            e = e.NativeEvent || e;\n            self.touchHaltAnimation = true;\n            l = self.scrollBox.scrollLeft;\n            t = self.scrollBox.scrollTop;\n            if (self.hasFocus) {\n                //BUG Issue 42: https://github.com/TonyGermaneri/canvas-datagrid/issues/42\n                //https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\n                if (deltaMode === 1) {\n                    // line mode = 17 pixels per line\n                    deltaY = deltaY * 17;\n                }\n                if ((self.scrollBox.scrollTop < self.scrollBox.scrollHeight && deltaY > 0)\n                        || (self.scrollBox.scrollLeft < self.scrollBox.scrollWidth && deltaX > 0)\n                        || (self.scrollBox.scrollTop > 0 && deltaY < 0)\n                        || (self.scrollBox.scrollLeft > 0 && deltaX < 0)) {\n                    e.preventDefault(e);\n                }\n                wheeling = setTimeout(function () {\n                    wheeling = undefined;\n                    self.scrollBox.scrollTo(deltaX + l, deltaY + t);\n                }, 1);\n            }\n        };\n        self.pasteItem = function (clipData, x, y, mimeType) {\n            var l, s = self.getVisibleSchema(), yi = y - 1, sel = [];\n            function normalizeRowData(importingRow, existingRow, offsetX, schema, mimeType, rowIndex) {\n                var r = existingRow;\n                if (!Array.isArray(importingRow) && importingRow !== null && typeof importingRow === 'object') {\n                    importingRow = Object.keys(importingRow).map(function (colKey) {\n                        return importingRow[colKey];\n                    });\n                }\n                if (/^text\\/html/.test(mimeType)) {\n                    importingRow = importingRow.substring(4, importingRow.length - 5).split('</td><td>');\n                }\n                if (typeof importingRow === 'string') {\n                    importingRow = [importingRow];\n                }\n                sel[rowIndex] = [];\n                importingRow.forEach(function (cellData, colIndex) {\n                    var cName = schema[colIndex + offsetX].name;\n                    if (importingRow[colIndex] === undefined || importingRow[colIndex] === null) {\n                        r[cName] = existingRow[cName];\n                        return;\n                    }\n                    sel[rowIndex].push(colIndex + offsetX);\n                    r[cName] = importingRow[colIndex];\n                });\n                return r;\n            }\n            if (/^text\\/html/.test(mimeType)) {\n                if (!/^(<meta[^>]+>)?<table>/.test(clipData.substring(0, 29))) {\n                    console.warn('Unrecognized HTML format.  HTML must be a simple table, e.g.: <table><tr><td>data</td></tr></table>.  Data with the mime type text/html not in this format will not be imported as row data.');\n                    return;\n                }\n                // strip table beginning and ending off, then split at rows\n                clipData = clipData.substring(clipData.indexOf('<table><tr>') + 11, clipData.length - 13).split('</tr><tr>');\n            } else {\n                clipData = clipData.split('\\n');\n            }\n            l = clipData.length;\n            clipData.forEach(function (rowData) {\n                yi += 1;\n                var i = self.orders.columns[yi];\n                self.data[i] = normalizeRowData(rowData, self.data[i], x, s, mimeType, i);\n            });\n            self.selections = sel;\n            return l;\n        };\n        self.paste = function (e) {\n            var d;\n            function getItem(dti) {\n                var type = dti.type;\n                dti.getAsString(function (s) {\n                    self.pasteItem(s, self.activeCell.columnIndex, self.activeCell.rowIndex, type);\n                    self.draw();\n                });\n            }\n            d = Array.prototype.filter.call(e.clipboardData.items, function (dti) {\n                return dti.type === 'text/html';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/csv';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/plain';\n            })[0];\n            if (!d) {\n                console.warn('Cannot find supported clipboard data type.  Supported types are text/html, text/csv, text/plain.');\n                return;\n            }\n            getItem(d);\n        };\n        self.cut = function (e) {\n            self.copy(e);\n            self.forEachSelectedCell(function (data, index, colName) {\n                data[index][colName] = '';\n            });\n        };\n        self.copy = function (e) {\n            if (self.dispatchEvent('copy', {NativeEvent: e})) { return; }\n            if (!self.hasFocus || !e.clipboardData) { return; }\n            var t,\n                d,\n                data = (self.data || []),\n                tableRows = [],\n                textRows = [],\n                headers = [],\n                sData = self.getSelectedData(),\n                s = self.getSchema();\n            function htmlSafe(v) {\n                return v.replace(/</g, '&lt;').replace(/>/g, '&gt;');\n            }\n            function fCopyCell(v) {\n                v = v === null || v === undefined ? '' : v;\n                return '<td>' + (typeof v === 'string' ? htmlSafe(v) : v) + '</td>';\n            }\n            function addHeaders(useHtml) {\n                if (!s.length) { return ''; }\n                var h = [];\n                if (useHtml) {\n                    h.push('<tr>');\n                }\n                s.forEach(function (column, columnIndex) {\n                    if (!column.hidden) {\n                        // intentional redefinition of column\n                        column = s[self.orders.columns[columnIndex]];\n                        var hVal = (column.name || column.title) || '';\n                        if (useHtml) {\n                            h.push('<th>' + htmlSafe(hVal) + '</th>');\n                        } else {\n                            h.push('\"' + hVal.replace(/\"/g, '\"\"') + '\"');\n                        }\n                    }\n                });\n                h.push(useHtml ? '</tr>' : '\\n');\n                return h.join(useHtml ? '' : ',');\n            }\n            function addCellValue(val, trRow, textRow, column) {\n                // escape strings\n                if (val !== null\n                        && val !== false\n                        && val !== undefined\n                        && val.replace) {\n                    trRow.push(fCopyCell(val));\n                    textRow.push('\"' + val.replace(/\"/g, '\"\"') + '\"');\n                    return;\n                }\n                if (val !== undefined) {\n                    textRow.push(val);\n                    trRow.push(fCopyCell(val));\n                    return;\n                }\n                // issue #66\n                textRow.push('');\n                trRow.push('<td>&nbsp;</td>');\n            }\n            if (sData.length > 0) {\n                sData.forEach(function (row) {\n                    if (row) {\n                        var trRow = [],\n                            textRow = [];\n                        s.forEach(function (column, columnIndex) {\n                            if (!column.hidden) {\n                                // intentional redefinition of column\n                                column = s[self.orders.columns[columnIndex]];\n                                // escape strings\n                                addCellValue(row[column.name], trRow, textRow, column);\n                            }\n                        });\n                        tableRows.push(trRow.join(''));\n                        textRows.push(textRow.join(','));\n                    }\n                });\n                t = addHeaders() + (headers.length > 0 ? '\\n' : '') + textRows.join('\\n');\n                d = '<table>' + addHeaders(true) + '<tr>' + tableRows.join('</tr><tr>') + '</tr></table>';\n                e.clipboardData.setData('text/html', d);\n                e.clipboardData.setData('text/plain', t);\n                e.clipboardData.setData('text/csv', t);\n                e.clipboardData.setData('application/json', JSON.stringify(sData));\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        var touchTimerMs = 50,\n            touchScrollTimeout;\n        self.scrollAnimation = {};\n        self.touchDelta = {};\n        self.touchAnimateTo = {};\n        self.animationFrames = 0;\n        self.getTouchPos = function (e, touchIndex) {\n            var t = touchIndex ? e.touches[touchIndex] : e.touches[0],\n                rect = self.canvas.getBoundingClientRect(),\n                pos;\n            if (!t) { return; }\n            pos = {\n                x: t.clientX - rect.left,\n                y: t.clientY - rect.top\n            };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        // shamelessly stolen from from https://gist.github.com/gre/1650294\n        self.easingFunctions = {\n            linear: function (t) { return t; },\n            easeInQuad: function (t) { return t * t; },\n            easeOutQuad: function (t) { return t * (2 - t); },\n            easeInOutQuad: function (t) { return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t; },\n            easeInCubic: function (t) { return t * t * t; },\n            easeOutCubic: function (t) { return (--t) * t * t + 1; },\n            easeInOutCubic: function (t) { return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1; },\n            easeInQuart: function (t) { return t * t * t * t; },\n            easeOutQuart: function (t) { return 1 - (--t) * t * t * t; },\n            easeInOutQuart: function (t) { return t < 0.5 ? 8 * t  * t  * t * t : 1 - 8 * (--t) * t * t * t; },\n            easeInQuint: function (t) { return t * t * t * t * t; },\n            easeOutQuint: function (t) { return 1 + (--t) * t *  t * t * t; },\n            easeInOutQuint: function (t) { return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t; }\n        };\n        self.easing = function (t, b, c, d) {\n            return c * self.easingFunctions[self.attributes.touchEasingMethod](t / d) + b;\n        };\n        self.calculatePPSTimed = function () {\n            self.xPPST = -((self.touchDelta.x - self.touchSigmaTimed.x) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.yPPST = -((self.touchDelta.y - self.touchSigmaTimed.y) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.touchSigmaTimed = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.calculatePPS = function () {\n            self.xPPS = -((self.touchDelta.x - self.touchSigma.x) / (self.touchDelta.t - self.touchSigma.t));\n            self.yPPS = -((self.touchDelta.y - self.touchSigma.y) / (self.touchDelta.t - self.touchSigma.t));\n            self.touchSigma = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.touchEndAnimation = function () {\n            if (!self.canvas || !self.scrollBox.scrollTo) { return requestAnimationFrame(self.touchEndAnimation); }\n            var n = performance.now(),\n                d = self.attributes.touchReleaseAnimationDurationMs,\n                t;\n            t = n - self.touchDelta.t;\n            self.animationFrames += 1;\n            self.scrollAnimation.x = self.easing(t, self.touchDelta.scrollLeft, self.touchAnimateTo.x, d);\n            self.scrollAnimation.y = self.easing(t, self.touchDelta.scrollTop, self.touchAnimateTo.y, d);\n            if (t > d || (self.scrollAnimation.y === self.scrollBox.scrollTop\n                    && self.scrollAnimation.x === self.scrollBox.scrollLeft) || self.stopAnimation) {\n                return;\n            }\n            self.scrollBox.scrollTo(self.scrollAnimation.x, self.scrollAnimation.y);\n            requestAnimationFrame(self.touchEndAnimation);\n        };\n        self.touchEditCell = function (cell) {\n            self.beginEditAt(cell.columnIndex, cell.rowIndex);\n        };\n        self.touchCell = function (e) {\n            return function () {\n                clearInterval(self.calculatePPSTimer);\n                var i, pos = self.getTouchPos(e);\n                if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone) {\n                    i = self.getCellAt(pos.x, pos.y);\n                    if (!i) { return; }\n                    if (self.touchingCell && self.touchingCell.rowIndex === i.rowIndex\n                            && self.touchingCell.columnIndex === i.columnIndex) {\n                        self.touchEditCell(i);\n                        return;\n                    }\n                    if (self.input && self.input.editCell) {\n                        self.endEdit();\n                    }\n                    self.touchingCell = i;\n                    self.selectArea({\n                        top: i.rowIndex,\n                        bottom: i.rowIndex,\n                        left: i.columnIndex,\n                        right: i.columnIndex\n                    });\n                    self.draw(true);\n                }\n            };\n        };\n        self.touchstart = function (e) {\n            if (e.changedTouches[0]) {\n                self.touchStart = self.getTouchPos(e);\n                self.startingCell = self.getCellAt(self.touchStart.x, self.touchStart.y, true);\n            }\n            if (self.dispatchEvent('touchstart', {NativeEvent: e, cell: self.startingCell})) { return; }\n            self.disposeContextMenu();\n            clearInterval(self.calculatePPSTimer);\n            clearTimeout(self.touchContextTimeout);\n            self.touchStartEvent = e;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (e.touches.length === 1 && e.changedTouches[0] && !self.zoomAltered) {\n                self.touchLength = 1;\n                self.touchStart = self.touchStart || self.touchStart1;\n                self.touchScrollStart = {\n                    x: self.scrollBox.scrollLeft,\n                    y: self.scrollBox.scrollTop,\n                    t: performance.now()\n                };\n                self.touchDelta = {\n                    x: 0,\n                    y: 0,\n                    scrollLeft: self.scrollBox.scrollLeft,\n                    scrollTop: self.scrollBox.scrollTop,\n                    t: self.touchScrollStart.t\n                };\n                self.touchSigma = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchSigmaTimed = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchContextTimeout = setTimeout(function () {\n                    self.contextmenuEvent(e, self.touchStart);\n                }, self.attributes.touchContextMenuTimeMs);\n                self.calculatePPSTimer = setInterval(self.calculatePPSTimed, touchTimerMs);\n                if (self.startingCell && (self.startingCell.isGrid || ['tree', 'inherit'].indexOf(self.startingCell.context) !== -1)) {\n                    self.hasFocus = false;\n                    return;\n                }\n                self.hasFocus = true;\n                if (self.startingCell.isHeader) {\n                    if (self.startingCell.isRowHeader) {\n                        self.selectArea({\n                            top: self.startingCell.rowIndex,\n                            bottom: self.startingCell.rowIndex,\n                            left: 0,\n                            right: self.getVisibleSchema().length - 1,\n                        });\n                        self.draw(true);\n                    } else if (self.startingCell.isColumnHeader) {\n                        if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                            if (self.orderBy === self.startingCell.header.name) {\n                                self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                            } else {\n                                self.orderDirection = 'asc';\n                            }\n                            self.order(self.startingCell.header.name, self.orderDirection);\n                        }\n                        if (self.attributes.columnHeaderClickBehavior === 'select') {\n                            self.selectArea({\n                                top: 0,\n                                bottom: self.data.length - 1,\n                                left: self.startingCell.columnIndex,\n                                right: self.startingCell.columnIndex,\n                            });\n                            self.draw(true);\n                        }\n                    }\n                    self.touchEndEvents(e);\n                    return;\n                }\n            }\n            if (self.zoomAltered) { return; }\n            document.body.addEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.addEventListener('touchend', self.touchend, false);\n            document.body.addEventListener('touchcancel', self.touchcancel, false);\n            self.draw(true);\n        };\n        self.touchSelect = function (cell, handleType) {\n            if (cell.rowIndex === undefined || cell.columnIndex === undefined) { return; }\n            self.touchSelecting = true;\n            var bounds = self.getSelectionBounds();\n            if (handleType === 'selection-handle-bl'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex <= bounds.right) {\n                bounds.bottom = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tl'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex <= bounds.right) {\n                bounds.top = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tr'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex >= bounds.left) {\n                bounds.top = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            } else if (handleType === 'selection-handle-br'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex >= bounds.left) {\n                bounds.bottom = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            }\n            if (self.attributes.selectionMode === 'row' || cell.rowIndex === -1) {\n                bounds.left = 0;\n                bounds.right = self.getSchema().length - 1;\n            } else {\n                bounds.left = Math.max(0, bounds.left);\n            }\n            self.selectArea(bounds);\n            self.draw(true);\n        };\n        self.touchmove = function (e) {\n            var ch, rw, rScrollZone, lScrollZone, bScrollZone, tScrollZone, sbw, t1, t2;\n            if (self.dispatchEvent('beforetouchmove', {NativeEvent: e})) { return; }\n            clearTimeout(touchScrollTimeout);\n            if (e.changedTouches[0]) {\n                self.touchPosition = self.getTouchPos(e);\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = self.getTouchPos(e, 1);\n            }\n            if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) > self.attributes.touchDeadZone) {\n                clearTimeout(self.touchContextTimeout);\n            }\n            if (e.touches.length === 2 && self.touchPosition && self.touchPosition1) {\n                t1 = self.touchPosition.y;\n                t2 = self.touchPosition1.y;\n                if (!self.zoomDeltaStart) {\n                    self.zoomDeltaStart = Math.abs(t1 - t2);\n                    self.startScale = self.scale;\n                }\n                self.touchLength = 2;\n                self.scaleDelta = self.zoomDeltaStart - Math.abs(t1 - t2);\n                self.scale = self.startScale - (self.scaleDelta * self.attributes.touchZoomSensitivity);\n                self.scale = Math.min(Math.max(self.scale, self.attributes.touchZoomMin), self.attributes.touchZoomMax);\n                self.zoomAltered = true;\n                self.resize(true);\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.zoomAltered) { return; }\n            self.touchLength = 1;\n            self.touchPosition = self.touchPosition || self.touchPosition1;\n            ch = self.getColumnHeaderCellHeight();\n            rw = self.getRowHeaderCellWidth();\n            rScrollZone = self.width - self.style.scrollBarWidth - self.touchPosition.x < self.attributes.selectionScrollZone;\n            lScrollZone = self.touchPosition.x - rw < self.attributes.selectionScrollZone;\n            bScrollZone = self.height - self.style.scrollBarWidth - self.touchPosition.y < self.attributes.selectionScrollZone;\n            tScrollZone = self.touchPosition.y - ch < self.attributes.selectionScrollZone;\n            sbw = self.style.scrollBarWidth;\n            function touchScroll() {\n                var x = self.scrollBox.scrollLeft,\n                    y = self.scrollBox.scrollTop;\n                x += (rScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y += (bScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y -= (tScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                x -= (lScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                self.scrollBox.scrollTo(x, y);\n                touchScrollTimeout = setTimeout(touchScroll, self.attributes.scrollRepeatRate);\n            }\n            e.stopPropagation();\n            self.touchDelta = {\n                x: self.touchPosition.x - self.touchStart.x,\n                y: self.touchPosition.y - self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: performance.now()\n            };\n            self.currentCell = self.getCellAt(self.touchPosition.x, self.touchPosition.y);\n            self.dispatchEvent('touchmove', {NativeEvent: e, cell: self.currentCell});\n            self.calculatePPS();\n            self.touchDuration = performance.now() - self.touchScrollStart.t;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            if (self.touchSelecting && (rScrollZone || lScrollZone || tScrollZone || bScrollZone)) {\n                touchScroll();\n            }\n            if (/vertical-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollTop = self.scrollBox.scrollHeight\n                    * ((self.touchPosition.y - ch - sbw) / (self.scrollBox.height - sbw - ch));\n                return;\n            }\n            if (/horizontal-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollLeft = self.scrollBox.scrollWidth\n                    * ((self.touchPosition.x - rw - sbw) / (self.scrollBox.width - sbw - rw));\n                return;\n            }\n            if (/selection-handle-/.test(self.startingCell.style)) {\n                self.touchSelect(self.currentCell, self.startingCell.style);\n                return;\n            }\n            self.scrollBox.scrollTo(self.touchScrollStart.x - self.touchDelta.x,\n                self.touchScrollStart.y - self.touchDelta.y);\n            self.draw(true);\n        };\n        self.touchEndEvents = function (e) {\n            self.zoomDeltaStart = undefined;\n            self.touchSelecting = false;\n            clearInterval(self.touchScrollTimeout);\n            clearInterval(self.touchContextTimeout);\n            clearInterval(self.calculatePPSTimer);\n            e.stopPropagation();\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n        };\n        self.touchend = function (e) {\n            if (self.dispatchEvent('touchend', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.zoomDeltaStart = undefined;\n            if (e.changedTouches[0]) {\n                self.touchPosition = undefined;\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = undefined;\n            }\n            if (self.zoomAltered) {\n                if (e.touches.length === 0) {\n                    self.zoomAltered = false;\n                }\n                return;\n            }\n            var dz = Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone;\n            if (isNaN(self.xPPS)) {\n                self.xPPS = 0;\n            }\n            if (isNaN(self.yPPS)) {\n                self.yPPS = 0;\n            }\n            if (isNaN(self.xPPST)) {\n                self.xPPST = 0;\n            }\n            if (isNaN(self.yPPST)) {\n                self.yPPST = 0;\n            }\n            self.touchAnimateTo.x = self.xPPS * self.attributes.touchReleaseAcceleration;\n            self.touchAnimateTo.y = self.yPPS * self.attributes.touchReleaseAcceleration;\n            self.calculatePPSTimed();\n            if (dz && !self.contextMenu) {\n                self.touchCell(self.touchStartEvent)();\n            } else if (self.animationFrames === 0\n                    && (Math.abs(self.xPPST) > self.attributes.scrollAnimationPPSThreshold\n                        || Math.abs(self.yPPST) > self.attributes.scrollAnimationPPSThreshold)\n                    && !/-scroll-/.test(self.startingCell.style)\n                    && !dz) {\n                self.stopAnimation = false;\n                self.touchEndAnimation();\n            }\n            self.touchEndEvents(e);\n        };\n        self.touchcancel = function (e) {\n            if (self.dispatchEvent('touchcancel', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.touchEndEvents(e);\n        };\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals HTMLElement: false, Reflect: false, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self, ctor) {\n        self.scale = 1;\n        self.orders = {\n            rows: [],\n            columns: []\n        };\n        self.cellGridAttributes = {};\n        self.treeGridAttributes = {};\n        self.visibleRowHeights = [];\n        self.hasFocus = false;\n        self.activeCell = {\n            columnIndex: 0,\n            rowIndex: 0\n        };\n        self.innerHTML = '';\n        self.storageName = 'canvasDataGrid';\n        self.invalidSearchExpClass = 'canvas-datagrid-invalid-search-regExp';\n        self.localStyleLibraryStorageKey = 'canvas-datagrid-user-style-library';\n        self.dataType = 'application/x-canvas-datagrid';\n        self.orderBy = null;\n        self.orderDirection = 'asc';\n        self.columnFilters = {};\n        self.filters = {};\n        self.frozenRow = 0;\n        self.frozenColumn = 0;\n        self.ellipsisCache = {};\n        self.scrollCache = { x: [], y: [] };\n        self.scrollBox = {};\n        self.visibleRows = [];\n        self.sizes = {\n            rows: {},\n            columns: {},\n            trees: {}\n        };\n        self.currentFilter = function () {\n            return true;\n        };\n        self.selections = [];\n        self.hovers = {};\n        self.attributes = {};\n        self.style = {};\n        self.formatters = {};\n        self.sorters = {};\n        self.parsers = {};\n        self.schemaHashes = {};\n        self.events = {};\n        self.changes = [];\n        self.scrollIndexTop = 0;\n        self.scrollPixelTop = 0;\n        self.scrollIndexLeft = 0;\n        self.scrollPixelLeft = 0;\n        self.childGrids = {};\n        self.openChildren = {};\n        self.scrollModes = [\n            'vertical-scroll-box',\n            'vertical-scroll-top',\n            'vertical-scroll-bottom',\n            'horizontal-scroll-box',\n            'horizontal-scroll-right',\n            'horizontal-scroll-left'\n        ];\n        self.componentL1Events = {};\n        self.eventNames = ['afterdraw', 'afterrendercell', 'attributechanged', 'beforebeginedit',\n            'beforecreatecellgrid', 'beforedraw', 'beforeendedit', 'beforerendercell', 'beforerendercellgrid',\n            'beginedit', 'cellmouseout', 'cellmouseover', 'click', 'collapsetree', 'contextmenu', 'copy',\n            'datachanged', 'dblclick', 'endedit', 'expandtree', 'formatcellvalue', 'keydown', 'keypress',\n            'keyup', 'mousedown', 'mousemove', 'mouseup', 'newrow', 'ordercolumn', 'rendercell', 'rendercellgrid',\n            'renderorderbyarrow', 'rendertext', 'rendertreearrow', 'reorder', 'reordering', 'resize',\n            'resizecolumn', 'resizerow', 'schemachanged', 'scroll', 'selectionchanged', 'stylechanged',\n            'touchcancel', 'touchend', 'touchmove', 'touchstart', 'wheel'];\n        self.mouse = { x: 0, y: 0};\n        self.getSelectedData = function (expandToRow) {\n            var d = [], s = self.getSchema(), l = self.data.length;\n            if (l === 0) { return []; }\n            self.selections.forEach(function (row, index) {\n                if (!row) { return; }\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    var orderedIndex;\n                    if (col === -1 || !s[col]) { return; }\n                    orderedIndex = self.orders.columns[col];\n                    if (!expandToRow && s[orderedIndex].hidden) { return; }\n                    if (self.data[index]) {\n                        d[index][s[orderedIndex].name] = self.data[index][s[orderedIndex].name];\n                    }\n                });\n            });\n            return d;\n        };\n        self.getColumnHeaderCellHeight = function () {\n            if (!self.attributes.showColumnHeaders) { return 0; }\n            return ((self.sizes.rows[-1] || self.style.columnHeaderCellHeight) * self.scale);\n        };\n        self.getRowHeaderCellWidth = function () {\n            if (!self.attributes.showRowHeaders) { return 0; }\n            return (self.sizes.columns[-1] || self.style.rowHeaderCellWidth) * self.scale;\n        };\n        self.setStorageData = function () {\n            if (!self.attributes.saveAppearance || !self.attributes.name) { return; }\n            var visibility = {};\n            self.getSchema().forEach(function (column) {\n                visibility[column.name] = !column.hidden;\n            });\n            localStorage.setItem(self.storageName + '-' + self.attributes.name, JSON.stringify({\n                sizes: {\n                    rows: self.sizes.rows,\n                    columns: self.sizes.columns\n                },\n                orders: {\n                    rows: self.orders.rows,\n                    columns: self.orders.columns\n                },\n                orderBy: self.orderBy,\n                orderDirection: self.orderDirection,\n                visibility: visibility\n            }));\n        };\n        self.getSchema = function () {\n            return self.schema || self.tempSchema || [];\n        };\n        function fillArray(low, high) {\n            var i = [], x;\n            for (x = low; x <= high; x += 1) {\n                i[x] = x;\n            }\n            return i;\n        }\n        self.createColumnOrders = function () {\n            var s = self.getSchema();\n            self.orders.columns = fillArray(0, s.length - 1);\n        };\n        self.createRowOrders = function () {\n            self.orders.rows = fillArray(0, self.data.length - 1);\n        };\n        self.getVisibleSchema = function () {\n            return self.getSchema().filter(function (col) {\n                return !col.hidden;\n            });\n        };\n        self.applyDefaultValue = function (row, header) {\n            var d = header.defaultValue || '';\n            if (typeof d === 'function') {\n                d = d.apply(self.intf, [header]);\n            }\n            row[header.name] = d;\n        };\n        self.createNewRowData = function () {\n            self.newRow = {};\n            self.getSchema().forEach(function forEachHeader(header) {\n                self.applyDefaultValue(self.newRow, header);\n            });\n        };\n        self.getSchemaNameHash = function (key) {\n            var n = 0;\n            while (self.schemaHashes[key]) {\n                n += 1;\n                key = key + n;\n            }\n            return key;\n        };\n        self.filter = function (type) {\n            var f = self.filters[type];\n            if (!f && type !== undefined) {\n                console.warn('Cannot find filter for type %s, falling back to substring match.', type);\n                f = self.filters.string;\n            }\n            return f;\n        };\n        self.getBestGuessDataType = function (columnName, data) {\n            var t, x, l = data.length;\n            for (x = 0; x < l; x += 1) {\n                if (data[x] !== undefined && data[x] !== null && [null, undefined].indexOf(data[x][columnName]) !== -1) {\n                    t = typeof data[x];\n                    return t === 'object' ? 'string' : t;\n                }\n            }\n            return 'string';\n        };\n        self.drawChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].draw();\n            });\n        };\n        self.resizeChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].resize();\n            });\n        };\n        self.autoScrollZone = function (e, x, y, ctrl) {\n            var setTimer,\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight();\n            if (x > self.width - self.attributes.selectionScrollZone && x < self.width) {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y > self.height - self.attributes.selectionScrollZone && y < self.height) {\n                self.scrollBox.scrollTop += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (x - self.attributes.selectionScrollZone - rowHeaderCellWidth < 0) {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y - self.attributes.selectionScrollZone - columnHeaderCellHeight < 0) {\n                self.scrollBox.scrollTop -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (setTimer && !ctrl && self.currentCell && self.currentCell.columnIndex !== -1) {\n                self.scrollTimer = setTimeout(self.mousemove, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.refreshFromOrigialData = function () {\n            self.data = self.originalData.filter(function (row) {\n                return true;\n            });\n        };\n        self.validateColumn = function (c, s) {\n            if (!c.name) {\n                throw new Error('A column must contain at least a name.');\n            }\n            if (s.filter(function (i) { return i.name === c.name; }).length > 0) {\n                throw new Error('A column with the name '\n                    + c.name + ' already exists and cannot be added again.');\n            }\n            return true;\n        };\n        self.setDefaults = function (obj1, obj2, key, def) {\n            obj1[key] = obj2[key] === undefined ? def : obj2[key];\n        };\n        self.setAttributes = function () {\n            self.defaults.attributes.forEach(function eachAttribute(i) {\n                self.setDefaults(self.attributes, self.args, i[0], i[1]);\n            });\n        };\n        self.setStyle = function () {\n            self.defaults.styles.forEach(function eachStyle(i) {\n                self.setDefaults(self.style, self.args.style || {}, i[0], i[1]);\n            });\n        };\n        self.autosize = function (colName) {\n            self.getVisibleSchema().forEach(function (col, colIndex) {\n                if (col.name === colName || colName === undefined) {\n                    self.sizes.columns[colIndex]\n                        = Math.max(self.findColumnMaxTextLength(col.name), self.style.minColumnWidth);\n                }\n            });\n            self.sizes.columns[-1] = self.findColumnMaxTextLength('cornerCell');\n        };\n        self.dispose = function () {\n            if (!self.isChildGrid && self.canvas && self.canvas.parentNode) {\n                self.canvas.parentNode.removeChild(self.canvas);\n            }\n            self.eventParent.removeEventListener('mouseup', self.mouseup, false);\n            self.eventParent.removeEventListener('mousedown', self.mousedown, false);\n            self.eventParent.removeEventListener('dblclick', self.dblclick, false);\n            self.eventParent.removeEventListener('click', self.click, false);\n            self.eventParent.removeEventListener('mousemove', self.mousemove);\n            self.eventParent.removeEventListener('wheel', self.scrollWheel, false);\n            self.canvas.removeEventListener('contextmenu', self.contextmenu, false);\n            self.canvas.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('keypress', self.keypress, false);\n            self.controlInput.removeEventListener('keyup', self.keyup, false);\n            self.controlInput.removeEventListener('keydown', self.keydown, false);\n            window.removeEventListener('resize', self.resize);\n            if (self.observer && self.observer.disconnect) {\n                self.observer.disconnect();\n            }\n        };\n        self.tryLoadStoredSettings = function () {\n            var s;\n            self.reloadStoredValues();\n            if (self.storedSettings\n                    && typeof self.storedSettings.orders === 'object'\n                    && self.storedSettings.orders !== null) {\n                if (self.storedSettings.orders.rows.length >= (self.data || []).length) {\n                    self.orders.rows = self.storedSettings.orders.rows;\n                }\n                s = self.getSchema();\n                if (self.storedSettings.orders.columns.length === s.length) {\n                    self.orders.columns = self.storedSettings.orders.columns;\n                }\n                self.orderBy = self.storedSettings.orderBy === undefined\n                    ? s[0].name : self.storedSettings.orderBy;\n                self.orderDirection = self.storedSettings.orderDirection === undefined\n                    ? 'asc' : self.storedSettings.orderDirection;\n                if (self.storedSettings.orderBy !== undefined && self.getHeaderByName(self.orderBy) && self.orderDirection) {\n                    self.order(self.orderBy, self.orderDirection);\n                }\n            }\n        };\n        self.getDomRoot = function () {\n            return self.shadowRoot ? self.shadowRoot.host : self.parentNode;\n        };\n        self.getFontName = function (fontStyle) {\n            return fontStyle.replace(/\\d+\\.?\\d*px/, '');\n        };\n        self.getFontHeight = function (fontStyle) {\n            return parseFloat(fontStyle, 10);\n        };\n        self.parseStyleValue = function (key) {\n            if (/Font/.test(key)) {\n                self.style[key + 'Height'] = self.getFontHeight(self.style[key]);\n                self.style[key + 'Name'] = self.getFontName(self.style[key]);\n                return;\n            }\n            // when inheriting styles from already instantiated grids, don't parse already parsed values.\n            if (key === 'moveOverlayBorderSegments' && typeof self.style[key] === 'string') {\n                self.style[key] = self.style[key].split(',')\n                    .map(function (i) { return parseInt(i, 10); });\n            }\n        };\n        self.initProp = function (propName) {\n            if (!self.args[propName]) { return; }\n            Object.keys(self.args[propName]).forEach(function (key) {\n                self[propName][key] = self.args[propName][key];\n            });\n        };\n        self.getStyleProperty = function (key) {\n            if (self.styleKeys.indexOf(key) === -1) {\n                return self.parentNodeStyle[key];\n            }\n            return self.style[key];\n        };\n        self.setStyleProperty = function (key, value, supressDrawAndEvent) {\n            var isDim = ['height', 'width', 'minHeight', 'minWidth', 'maxHeight', 'maxWidth'].indexOf(key) !== -1;\n            if (self.styleKeys.indexOf(key) === -1) {\n                self.parentNodeStyle[key] = value;\n            } else {\n                if (/-/.test(key)) {\n                    key = self.dehyphenateProperty(key);\n                }\n                self.style[key] = value;\n                self.parseStyleValue(key);\n            }\n            if (isDim) {\n                self.resize();\n            }\n            if (!supressDrawAndEvent) {\n                self.draw(true);\n                self.dispatchEvent('stylechanged', {name: 'style', value: value});\n            }\n        };\n        self.reloadStoredValues = function () {\n            if (self.attributes.name && self.attributes.saveAppearance) {\n                self.storedSettings = localStorage.getItem(self.storageName + '-' + self.attributes.name);\n                if (self.storedSettings) {\n                    try {\n                        self.storedSettings = JSON.parse(self.storedSettings);\n                    } catch (e) {\n                        console.warn('could not read settings from localStore', e);\n                        self.storedSettings = undefined;\n                    }\n                }\n                if (self.storedSettings) {\n                    if (typeof self.storedSettings.sizes === 'object'\n                            && self.storedSettings.sizes !== null) {\n                        self.sizes.rows = self.storedSettings.sizes.rows;\n                        self.sizes.columns = self.storedSettings.sizes.columns;\n                        ['trees', 'columns', 'rows'].forEach(function (i) {\n                            if (!self.sizes[i]) {\n                                self.sizes[i] = {};\n                            }\n                        });\n                    }\n                    if (typeof self.storedSettings.visibility === 'object') {\n                        self.getSchema().forEach(function (column) {\n                            if (self.storedSettings.visibility && self.storedSettings.visibility[column.name] !== undefined) {\n                                column.hidden = !self.storedSettings.visibility[column.name];\n                            }\n                        });\n                    }\n                }\n            }\n        };\n        self.init = function () {\n            if (self.initialized) { return; }\n            function addStyleKeyIfNoneExists(key) {\n                if (self.styleKeys.indexOf(key) === -1) {\n                    self.styleKeys.push(key);\n                }\n            }\n            var publicStyleKeyIntf = {};\n            self.setAttributes();\n            self.setStyle();\n            self.initScrollBox();\n            self.setDom();\n            self.nodeType = 'canvas-datagrid';\n            self.initialized = true;\n            self.ie = /Trident/.test(window.navigator.userAgent);\n            self.edge = /Edge/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.moz = /Gecko/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.mobile = /Mobile/i.test(window.navigator.userAgent);\n            self.cursorGrab = 'grab';\n            self.cursorGrabing = 'grabbing';\n            self.cursorGrab = self.webKit ? '-webkit-grab' : self.cursorGrab;\n            self.cursorGrabing = self.moz ? '-webkit-grabbing' : self.cursorGrabbing;\n            self.pointerLockPosition = {x: 0, y: 0};\n            Object.keys(self.style).forEach(self.parseStyleValue);\n            self.intf.moveSelection = self.moveSelection;\n            self.intf.moveTo = self.moveTo;\n            self.intf.addEventListener = self.addEventListener;\n            self.intf.removeEventListener = self.removeEventListener;\n            self.intf.dispatchEvent = self.dispatchEvent;\n            /**\n             * Releases grid resources and removes grid elements.\n             * @memberof canvasDatagrid\n             * @name dispose\n             * @method\n             */\n            self.intf.dispose = self.dispose;\n            /**\n             * Appends the grid to another element later.  Not implemented.\n             * @memberof canvasDatagrid\n             * @name appendTo\n             * @method\n             * @param {number} el The element to append the grid to.\n             */\n            self.intf.appendTo = self.appendTo;\n            self.intf.filters = self.filters;\n            self.intf.sorters = self.sorters;\n            self.intf.autosize = self.autosize;\n            self.intf.beginEditAt = self.beginEditAt;\n            self.intf.endEdit = self.endEdit;\n            self.intf.setActiveCell = self.setActiveCell;\n            self.intf.forEachSelectedCell = self.forEachSelectedCell;\n            self.intf.scrollIntoView = self.scrollIntoView;\n            self.intf.clearChangeLog = self.clearChangeLog;\n            self.intf.gotoCell = self.gotoCell;\n            self.intf.gotoRow = self.gotoRow;\n            self.intf.getHeaderByName = self.getHeaderByName;\n            self.intf.findColumnScrollLeft = self.findColumnScrollLeft;\n            self.intf.findRowScrollTop = self.findRowScrollTop;\n            self.intf.fitColumnToValues = self.fitColumnToValues;\n            self.intf.findColumnMaxTextLength = self.findColumnMaxTextLength;\n            self.intf.disposeContextMenu = self.disposeContextMenu;\n            self.intf.getCellAt = self.getCellAt;\n            self.intf.isCellVisible = self.isCellVisible;\n            self.intf.order = self.order;\n            self.intf.draw = self.draw;\n            self.intf.selectArea = self.selectArea;\n            self.intf.clipElement = self.clipElement;\n            self.intf.getSchemaFromData = self.getSchemaFromData;\n            self.intf.setFilter = self.setFilter;\n            self.intf.selectRow = self.selectRow;\n            self.intf.parentGrid = self.parentGrid;\n            self.intf.toggleTree = self.toggleTree;\n            self.intf.expandTree = self.expandTree;\n            self.intf.collapseTree = self.collapseTree;\n            self.intf.canvas = self.canvas;\n            self.intf.context = self.ctx;\n            self.intf.insertRow = self.insertRow;\n            self.intf.deleteRow = self.deleteRow;\n            self.intf.addRow = self.addRow;\n            self.intf.insertColumn = self.insertColumn;\n            self.intf.deleteColumn = self.deleteColumn;\n            self.intf.addColumn = self.addColumn;\n            self.intf.getClippingRect = self.getClippingRect;\n            self.intf.setRowHeight = self.setRowHeight;\n            self.intf.setColumnWidth = self.setColumnWidth;\n            self.intf.resetColumnWidths = self.resetColumnWidths;\n            self.intf.resetRowHeights = self.resetRowHeights;\n            self.intf.resize = self.resize;\n            self.intf.selectColumn = self.selectColumn;\n            self.intf.selectRow = self.selectRow;\n            self.intf.selectAll = self.selectAll;\n            self.intf.selectNone = self.selectNone;\n            self.intf.drawChildGrids = self.drawChildGrids;\n            self.intf.assertPxColor = self.assertPxColor;\n            self.intf.clearPxColorAssertions = self.clearPxColorAssertions;\n            self.intf.integerToAlpha = self.integerToAlpha;\n            self.intf.copy = self.copy;\n            self.intf.setStyleProperty = self.setStyleProperty;\n            Object.defineProperty(self.intf, 'defaults', {\n                get: function () {\n                    return {\n                        styles: self.defaults.styles.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {}),\n                        attributes: self.defaults.attributes.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {})\n                    };\n                }\n            });\n            self.styleKeys = Object.keys(self.intf.defaults.styles);\n            self.styleKeys.map(function (i) { return self.hyphenateProperty(i, false); }).forEach(addStyleKeyIfNoneExists);\n            self.styleKeys.map(function (i) { return self.hyphenateProperty(i, true); }).forEach(addStyleKeyIfNoneExists);\n            self.DOMStyles = window.getComputedStyle(document.body, null);\n            self.styleKeys.concat(Object.keys(self.DOMStyles)).forEach(function (key) {\n                // unless this line is here, Object.keys() will not work on <instance>.style\n                publicStyleKeyIntf[key] = undefined;\n                Object.defineProperty(publicStyleKeyIntf, key, {\n                    get: function () {\n                        return self.getStyleProperty(key);\n                    },\n                    set: function (value) {\n                        self.setStyleProperty(key, value);\n                    }\n                });\n            });\n            Object.defineProperty(self.intf, 'shadowRoot', {\n                get: function () {\n                    return self.shadowRoot;\n                }\n            });\n            Object.defineProperty(self.intf, 'activeCell', {\n                get: function () {\n                    return self.activeCell;\n                }\n            });\n            Object.defineProperty(self.intf, 'hasFocus', {\n                get: function () {\n                    return self.hasFocus;\n                }\n            });\n            Object.defineProperty(self.intf, 'style', {\n                get: function () {\n                    return publicStyleKeyIntf;\n                },\n                set: function (valueObject) {\n                    Object.keys(valueObject).forEach(function (key) {\n                        self.setStyleProperty(key, valueObject[key], true);\n                    });\n                    self.draw(true);\n                    self.dispatchEvent('stylechanged', {name: 'style', value: valueObject});\n                }\n            });\n            Object.defineProperty(self.intf, 'attributes', { value: {}});\n            Object.keys(self.attributes).forEach(function (key) {\n                Object.defineProperty(self.intf.attributes, key, {\n                    get: function () {\n                        return self.attributes[key];\n                    },\n                    set: function (value) {\n                        self.attributes[key] = value;\n                        if (key === 'name') {\n                            self.tryLoadStoredSettings();\n                        }\n                        self.draw(true);\n                        self.dispatchEvent('attributechanged', {name: key, value: value[key]});\n                    }\n                });\n            });\n            self.filters.string = function (value, filterFor) {\n                value = String(value);\n                var filterRegExp,\n                    regEnd = /\\/(i|g|m)*$/,\n                    pattern = regEnd.exec(filterFor),\n                    flags = pattern ? pattern[0].substring(1) : '',\n                    flagLength = flags.length;\n                self.invalidFilterRegEx = undefined;\n                if (filterFor.substring(0, 1) === '/' && pattern) {\n                    try {\n                        filterRegExp = new RegExp(filterFor.substring(1, filterFor.length - (flagLength + 1)), flags);\n                    } catch (e) {\n                        self.invalidFilterRegEx = e;\n                        return;\n                    }\n                    return filterRegExp.test(value);\n                }\n                return value.toString ? value.toString().toLocaleUpperCase()\n                    .indexOf(filterFor.toLocaleUpperCase()) !== -1 : false;\n            };\n            self.filters.number = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                return value === filterFor;\n            };\n            ['formatters', 'filters', 'sorters'].forEach(self.initProp);\n            self.applyComponentStyle(false, self.intf);\n            self.reloadStoredValues();\n            if (self.args.data) {\n                self.intf.data = self.args.data;\n            }\n            if (self.intf.innerText || self.intf.textContent) {\n                if (self.intf.type === 'application/x-canvas-datagrid') {\n                    self.intf.type = 'application/json+x-canvas-datagrid';\n                }\n                self.intf.data = self.intf.innerText || self.intf.textContent;\n            }\n            if (self.args.schema) {\n                self.intf.schema = self.args.schema;\n            }\n            if (self.isChildGrid) {\n                requestAnimationFrame(function () { self.resize(true); });\n            } else {\n                self.resize(true);\n            }\n            return self;\n        };\n        /**\n         * Removes focus from the grid.\n         * @memberof canvasDatagrid\n         * @name blur\n         * @method\n         */\n        self.intf.blur = function (e) {\n            self.hasFocus = false;\n        };\n        /**\n         * Focuses on the grid.\n         * @memberof canvasDatagrid\n         * @name focus\n         * @method\n         */\n        self.intf.focus = function () {\n            self.hasFocus = true;\n            self.controlInput.focus();\n        };\n        if (self.shadowRoot || self.isChildGrid) {\n            Object.defineProperty(self.intf, 'height', {\n                get: function () {\n                    if (self.shadowRoot) {\n                        return self.shadowRoot.height;\n                    }\n                    return self.parentNode.height;\n                },\n                set: function (value) {\n                    if (self.shadowRoot) {\n                        self.shadowRoot.height = value;\n                    } else {\n                        self.parentNode.height = value;\n                    }\n                    self.resize(true);\n                }\n            });\n            Object.defineProperty(self.intf, 'width', {\n                get: function () {\n                    if (self.shadowRoot) {\n                        return self.shadowRoot.width;\n                    }\n                    return self.parentNode.width;\n                },\n                set: function (value) {\n                    if (self.shadowRoot) {\n                        self.shadowRoot.width = value;\n                    } else {\n                        self.parentNode.width = value;\n                    }\n                    self.resize(true);\n                }\n            });\n            Object.defineProperty(self.intf, 'parentNode', {\n                get: function () {\n                    return self.parentNode;\n                },\n                set: function (value) {\n                    if (!self.isChildGrid) {\n                        throw new TypeError('Cannot set property parentNode which has only a getter');\n                    }\n                    self.parentNode = value;\n                }\n            });\n        }\n        Object.defineProperty(self.intf, 'visibleRowHeights', {\n            get: function () {\n                return self.visibleRowHeights;\n            }\n        });\n        Object.defineProperty(self.intf, 'openChildren', {\n            get: function () {\n                return self.openChildren;\n            }\n        });\n        Object.defineProperty(self.intf, 'childGrids', {\n            get: function () {\n                return Object.keys(self.childGrids).map(function (gridId) {\n                    return self.childGrids[gridId];\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'isChildGrid', {\n            get: function () {\n                return self.isChildGrid;\n            }\n        });\n        Object.defineProperty(self, 'cursor', {\n            get: function () {\n                return self.parentNodeStyle.cursor;\n            },\n            set: function (value) {\n                if (value === 'cell') { value = 'default'; }\n                if (self.currentCursor !== value) {\n                    self.parentNodeStyle.cursor = value;\n                    self.currentCursor = value;\n                }\n            }\n        });\n        Object.defineProperty(self.intf, 'orderDirection', {\n            get: function () {\n                return self.orderDirection;\n            },\n            set: function (value) {\n                if (value !== 'desc') {\n                    value = 'asc';\n                }\n                self.orderDirection = value;\n                self.order(self.orderBy, self.orderDirection);\n            }\n        });\n        Object.defineProperty(self.intf, 'orderBy', {\n            get: function () {\n                return self.orderBy;\n            },\n            set: function (value) {\n                if (self.getSchema().find(function (col) {\n                        return col.name === value;\n                    }) === undefined) {\n                    throw new Error('Cannot sort by unknown column name.');\n                }\n                self.orderBy = value;\n                self.order(self.orderBy, self.orderDirection);\n            }\n        });\n        if (self.isComponent) {\n            Object.defineProperty(self.intf, 'offsetHeight', {\n                get: function () {\n                    return self.canvas.offsetHeight;\n                }\n            });\n            Object.defineProperty(self.intf, 'offsetWidth', {\n                get: function () {\n                    return self.canvas.offsetWidth;\n                }\n            });\n        }\n        Object.defineProperty(self.intf, 'scrollHeight', {\n            get: function () {\n                return self.scrollBox.scrollHeight;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollWidth', {\n            get: function () {\n                return self.scrollBox.scrollWidth;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollTop', {\n            get: function () {\n                return self.scrollBox.scrollTop;\n            },\n            set: function (value) {\n                self.scrollBox.scrollTop = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollLeft', {\n            get: function () {\n                return self.scrollBox.scrollLeft;\n            },\n            set: function (value) {\n                self.scrollBox.scrollLeft = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'sizes', {\n            get: function () {\n                return self.sizes;\n            }\n        });\n        Object.defineProperty(self.intf, 'input', {\n            get: function () {\n                return self.input;\n            }\n        });\n        Object.defineProperty(self.intf, 'controlInput', {\n            get: function () {\n                return self.controlInput;\n            }\n        });\n        Object.defineProperty(self.intf, 'currentCell', {\n            get: function () {\n                return self.currentCell;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleCells', {\n            get: function () {\n                return self.visibleCells;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRows', {\n            get: function () {\n                return self.visibleRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'selections', {\n            get: function () {\n                return self.selections;\n            }\n        });\n        Object.defineProperty(self.intf, 'dragMode', {\n            get: function () {\n                return self.dragMode;\n            }\n        });\n        Object.defineProperty(self.intf, 'changes', {\n            get: function () {\n                return self.changes;\n            }\n        });\n        self.intf.formatters = self.formatters;\n        Object.defineProperty(self.intf, 'type', {\n            get: function () {\n                return self.dataType;\n            },\n            set: function (value) {\n                if (!self.parsers[value]) {\n                    throw new Error('No parser for MIME type ' + value);\n                }\n                self.dataType = value;\n            }\n        });\n        self.eventNames.forEach(function (eventName) {\n            Object.defineProperty(self.intf, 'on' + eventName, {\n                get: function () {\n                    return self.componentL1Events[eventName];\n                },\n                set: function (value) {\n                    self.events[eventName] = [];\n                    self.componentL1Events[eventName] = value;\n                    if (!value) { return; }\n                    self.addEventListener(eventName, value);\n                }\n            });\n        });\n        Object.defineProperty(self.intf, 'frozenRow', {\n            get: function () {\n                return self.frozenRow;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.visibleRows.length < val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible rows.');\n                }\n                self.frozenRow = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'frozenColumn', {\n            get: function () {\n                return self.frozenColumn;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.getVisibleSchema().length < val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible columns.');\n                }\n                self.frozenColumn = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollIndexRect', {\n            get: function () {\n                return {\n                    top: self.scrollIndexTop,\n                    right: self.scrollIndexRight,\n                    bottom: self.scrollIndexBottom,\n                    left: self.scrollIndexLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollPixelRect', {\n            get: function () {\n                return {\n                    top: self.scrollPixelTop,\n                    right: self.scrollPixelRight,\n                    bottom: self.scrollPixelBottom,\n                    left: self.scrollPixelLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'selectionBounds', {\n            get: function () {\n                return self.getSelectionBounds();\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedRows', {\n            get: function () {\n                return self.getSelectedData(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedCells', {\n            get: function () {\n                return self.getSelectedData();\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleSchema', {\n            get: function () {\n                return self.getVisibleSchema().map(function eachDataRow(col) {\n                    return col;\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'treeGridAttributes', {\n            get: function () {\n                return self.treeGridAttributes;\n            },\n            set: function setTreeGridAttributes(value) {\n                self.treeGridAttributes = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'cellGridAttributes', {\n            get: function () {\n                return self.cellGridAttributes;\n            },\n            set: function setCellGridAttributes(value) {\n                self.cellGridAttributes = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'ctx', {\n            get: function () {\n                return self.ctx;\n            }\n        });\n        Object.defineProperty(self.intf, 'schema', {\n            get: function schemaGetter() {\n                return self.getSchema();\n            },\n            set: function schemaSetter(value) {\n                if (value === undefined) {\n                    // Issue #89 - allow schema to be set to initialized state\n                    self.schema = undefined;\n                    self.tempSchema = undefined;\n                    self.dispatchEvent('schemachanged', {schema: undefined});\n                    return;\n                }\n                if (!Array.isArray(value) || typeof value[0] !== 'object') {\n                    throw new Error('Schema must be an array of objects.');\n                }\n                if (value[0].name === undefined) {\n                    throw new Error('Expected schema to contain an object with at least a name property.');\n                }\n                self.schema = value.map(function eachSchemaColumn(column, index) {\n                    column.width = column.width || self.style.cellWidth;\n                    column.filter = column.filter || self.filter(column.type);\n                    column.type = column.type || 'string';\n                    column.index = index;\n                    column.columnIndex = index;\n                    column.rowIndex = -1;\n                    return column;\n                });\n                self.tempSchema = undefined;\n                self.createNewRowData();\n                self.createColumnOrders();\n                self.tryLoadStoredSettings();\n                if (self.storedSettings && typeof self.storedSettings.visibility === 'object') {\n                    self.schema.forEach(function hideEachSchemaColumn(column, index) {\n                        if (self.storedSettings && self.storedSettings.visibility[column.name] !== undefined) {\n                            column.hidden = !self.storedSettings.visibility[column.name];\n                        }\n                    });\n                }\n                self.resize(true);\n                self.dispatchEvent('schemachanged', {schema: self.schema});\n            }\n        });\n        /**\n         * Gets an array of currently registered MIME types.\n         * @memberof canvasDatagrid\n         * @name getDataTypes\n         * @method\n         */\n        self.intf.getTypes = function () {\n            return Object.keys(self.parsers);\n        };\n        self.parseInnerHtml = function (data) {\n            try {\n                data = JSON.parse(data);\n            } catch (e) {\n                throw new Error('Cannot parse application/json+x-canvas-datagrid formated data. '\n                    + e.message + '  \\nNote: canvas-datagrid.innerHTML is for string data only.  '\n                    + 'Use the canvas-datagrid.data property to set object data.');\n            }\n            return data;\n        };\n        self.parsers['application/json+x-canvas-datagrid'] = function (data, callback) {\n            self.parsers['application/x-canvas-datagrid'](self.parseInnerHtml(data), function (data, schema) {\n                return callback(data, schema);\n            });\n        };\n        self.parsers['application/x-canvas-datagrid'] = function (data, callback) {\n            return callback(data);\n        };\n        self.intf.parsers = self.parsers;\n        // send to dataType ETL function to extract from input data\n        // and transform into native [{}, {}] format\n        self.etl = function (data, callback) {\n            if (!self.intf.parsers[self.dataType]) {\n                throw new Error('Unsupported data type.');\n            }\n            self.intf.parsers[self.dataType](data, function (data, schema) {\n                if (Array.isArray(schema)) {\n                    self.schema = schema;\n                }\n                // Issue #89 - allow schema to be auto-created every time data is set\n                if (self.attributes.autoGenerateSchema) {\n                    self.schema = self.getSchemaFromData(data);\n                }\n                if (!self.schema) {\n                    self.tempSchema = self.getSchemaFromData(data);\n                }\n                if (self.getSchema()) {\n                    self.createColumnOrders();\n                }\n                // set the unfiltered/sorted data array\n                self.originalData = data;\n                //TODO apply filter to incoming dataset\n                self.data = self.originalData;\n                // empty data was set\n                if (!self.schema && self.data.length === 0) {\n                    self.tempSchema = [{name: ''}];\n                }\n                self.fitColumnToValues('cornerCell', true);\n                if ((self.tempSchema && !self.schema) || self.attributes.autoGenerateSchema) {\n                    self.createColumnOrders();\n                    self.dispatchEvent('schemachanged', {schema: self.tempSchema});\n                }\n                callback();\n            });\n        };\n        Object.defineProperty(self.intf, 'data', {\n            get: function dataGetter() {\n                return self.data;\n            },\n            set: function dataSetter(value) {\n                self.etl(value, function () {\n                    self.changes = [];\n                    self.createNewRowData();\n                    if (self.attributes.autoResizeColumns && self.data.length > 0\n                            && self.storedSettings === undefined) {\n                        self.autosize();\n                    }\n                    // set the header column to fit the numbers in it\n                    self.fitColumnToValues('cornerCell', true);\n                    self.createRowOrders();\n                    self.tryLoadStoredSettings();\n                    self.dispatchEvent('datachanged', {data: self.data});\n                    self.resize(true);\n                });\n            }\n        });\n        self.initScrollBox = function () {\n            var sHeight = 0,\n                sWidth = 0,\n                scrollTop = 0,\n                scrollLeft = 0,\n                scrollHeight = 0,\n                scrollWidth = 0,\n                scrollBoxHeight = 20,\n                scrollBoxWidth = 20;\n            function setScrollTop(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollTop value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollHeight) {\n                    value = scrollHeight;\n                }\n                if (scrollHeight < 0) {\n                    value = 0;\n                }\n                scrollTop = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            function setScrollLeft(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollLeft value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollWidth) {\n                    value = scrollWidth;\n                }\n                if (scrollWidth < 0) {\n                    value = 0;\n                }\n                scrollLeft = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            self.scrollBox.toString = function () {\n                return '{\"width\": ' + scrollWidth.toFixed(2)\n                    + ', \"height\": ' + scrollHeight.toFixed(2)\n                    + ', \"left\": ' + scrollLeft.toFixed(2)\n                    + ', \"top\": ' + scrollTop.toFixed(2)\n                    + ', \"widthRatio\": ' + self.scrollBox.widthBoxRatio.toFixed(5)\n                    + ', \"heightRatio\": ' + self.scrollBox.heightBoxRatio.toFixed(5) + '}';\n            };\n            self.scrollBox.scrollTo = function (x, y, supressDrawEvent) {\n                setScrollLeft(x, true);\n                setScrollTop(y, supressDrawEvent);\n            };\n            Object.defineProperty(self.scrollBox, 'scrollBoxHeight', {\n                get: function () {\n                    return scrollBoxHeight;\n                },\n                set: function (value) {\n                    scrollBoxHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollBoxWidth', {\n                get: function () {\n                    return scrollBoxWidth;\n                },\n                set: function (value) {\n                    scrollBoxWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'height', {\n                get: function () {\n                    return sHeight;\n                },\n                set: function (value) {\n                    if (scrollHeight < value) {\n                        scrollTop = 0;\n                    }\n                    sHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'width', {\n                get: function () {\n                    return sWidth;\n                },\n                set: function (value) {\n                    sWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollTop', {\n                get: function () {\n                    return scrollTop;\n                },\n                set: setScrollTop\n            });\n            Object.defineProperty(self.scrollBox, 'scrollLeft', {\n                get: function () {\n                    return scrollLeft;\n                },\n                set: setScrollLeft\n            });\n            Object.defineProperty(self.scrollBox, 'scrollHeight', {\n                get: function () {\n                    return scrollHeight;\n                },\n                set: function (value) {\n                    if (scrollTop > value) {\n                        scrollTop = Math.max(value, 0);\n                    }\n                    if (scrollHeight < sHeight) {\n                        scrollTop = 0;\n                    }\n                    scrollHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollWidth', {\n                get: function () {\n                    return scrollWidth;\n                },\n                set: function (value) {\n                    if (scrollLeft > value) {\n                        scrollLeft = Math.max(value, 0);\n                    }\n                    scrollWidth = value;\n                }\n            });\n        };\n        return;\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false, Event: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        var zIndexTop, hoverScrollTimeout, autoCompleteContext;\n        function applyContextItemStyle(contextItemContainer) {\n            self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item' + (self.mobile ? '-mobile' : ''));\n            contextItemContainer.addEventListener('mouseover', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n            });\n            contextItemContainer.addEventListener('mouseout', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n            });\n        }\n        function createContextMenu(ev, pos, items, parentContextMenu) {\n            var container = document.createElement('div'),\n                upArrow = document.createElement('div'),\n                downArrow = document.createElement('div'),\n                children = [],\n                selectedIndex = -1,\n                intf = {},\n                rect;\n            if (!Array.isArray(items)) { throw new Error('createContextMenu expects an array.'); }\n            function createItems() {\n                items.forEach(function (item) {\n                    var contextItemContainer = document.createElement('div'),\n                        childMenuArrow;\n                    function removeChildContext(e) {\n                        if (e.relatedTarget === container\n                                || item.contextMenu.container === e.relatedTarget\n                                || childMenuArrow === e.relatedTarget\n                                || (contextItemContainer === e.relatedTarget)\n                                || item.contextMenu.container.contains(e.relatedTarget)\n                                ) { return; }\n                        item.contextMenu.dispose();\n                        children.splice(children.indexOf(item.contextMenu), 1);\n                        item.contextMenu = undefined;\n                        contextItemContainer.removeEventListener('mouseout', removeChildContext);\n                        container.removeEventListener('mouseout', removeChildContext);\n                        contextItemContainer.setAttribute('contextOpen', '0');\n                        contextItemContainer.setAttribute('opening', '0');\n                    }\n                    function contextAddCallback(items) {\n                        // check yet again if the user hasn't moved off\n                        if (contextItemContainer.getAttribute('opening') !== '1' ||\n                                contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        var cPos = contextItemContainer.getBoundingClientRect();\n                        cPos = {\n                            left: cPos.left + self.style.childContextMenuMarginLeft + container.offsetWidth,\n                            top: cPos.top + self.style.childContextMenuMarginTop,\n                            bottom: cPos.bottom,\n                            right: cPos.right\n                        };\n                        item.contextMenu = createContextMenu(ev, cPos, items, intf);\n                        contextItemContainer.setAttribute('contextOpen', '1');\n                        contextItemContainer.addEventListener('mouseout', removeChildContext);\n                        container.addEventListener('mouseout', removeChildContext);\n                        children.push(item.contextMenu);\n                    }\n                    function createChildContext() {\n                        var i;\n                        if (contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        contextItemContainer.setAttribute('opening', '1');\n                        if (typeof item.items === 'function') {\n                            i  = item.items.apply(intf, [function (items) {\n                                contextAddCallback(items);\n                            }]);\n                            if (i !== undefined && Array.isArray(i)) {\n                                contextAddCallback(i);\n                            }\n                            return;\n                        }\n                        contextAddCallback(item.items);\n                    }\n                    function addItem(item) {\n                        function addContent(content) {\n                            if (content === null) { return; }\n                            if (typeof content === 'function') {\n                                return addContent(content(ev));\n                            }\n                            if (typeof content === 'object') {\n                                contextItemContainer.appendChild(content);\n                                return;\n                            }\n                            applyContextItemStyle(contextItemContainer);\n                            contextItemContainer.innerHTML = content;\n                            return;\n                        }\n                        addContent(item.title);\n                        item.contextItemContainer = contextItemContainer;\n                        if ((item.items && item.items.length > 0) || typeof item.items === 'function') {\n                            childMenuArrow = document.createElement('div');\n                            self.createInlineStyle(childMenuArrow, 'canvas-datagrid-context-child-arrow');\n                            childMenuArrow.innerHTML = self.style.childContextMenuArrowHTML;\n                            contextItemContainer.appendChild(childMenuArrow);\n                            contextItemContainer.addEventListener('mouseover', createChildContext);\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                contextItemContainer.setAttribute('opening', '0');\n                            });\n                        }\n                        if (item.click) {\n                            contextItemContainer.addEventListener('click', function (ev) {\n                                item.click.apply(self, [ev]);\n                            });\n                        }\n                    }\n                    addItem(item);\n                    container.appendChild(contextItemContainer);\n                });\n            }\n            function clickIndex(idx) {\n                items[idx].contextItemContainer.dispatchEvent(new Event('click'));\n            }\n            function checkArrowVisibility() {\n                if (container.scrollTop > 0) {\n                    self.parentDOMNode.appendChild(upArrow);\n                } else if (upArrow.parentNode) {\n                    upArrow.parentNode.removeChild(upArrow);\n                }\n                if (container.scrollTop >= container.scrollHeight - container.offsetHeight && downArrow.parentNode) {\n                    downArrow.parentNode.removeChild(downArrow);\n                } else if (container.scrollHeight - container.offsetHeight > 0\n                        && !(container.scrollTop >= container.scrollHeight - container.offsetHeight)) {\n                    self.parentDOMNode.appendChild(downArrow);\n                }\n            }\n            function startHoverScroll(type) {\n                return function t() {\n                    var a = self.attributes.contextHoverScrollAmount;\n                    if (type === 'up' && container.scrollTop === 0) { return; }\n                    if (type === 'down' && container.scrollTop === container.scrollHeight) { return; }\n                    container.scrollTop += (type === 'up' ? -a : a);\n                    hoverScrollTimeout = setTimeout(t, self.attributes.contextHoverScrollRateMs, type);\n                };\n            }\n            function endHoverScroll(type) {\n                return function () {\n                    clearTimeout(hoverScrollTimeout);\n                };\n            }\n            function init() {\n                var loc = {},\n                    s = self.scrollOffset(self.canvas);\n                if (zIndexTop === undefined) {\n                    zIndexTop = self.style.contextMenuZIndex;\n                }\n                createItems();\n                self.createInlineStyle(container, 'canvas-datagrid-context-menu' + (self.mobile ? '-mobile' : ''));\n                loc.x = pos.left - s.left;\n                loc.y = pos.top - s.top;\n                loc.height = 0;\n                zIndexTop += 1;\n                container.style.position = 'absolute';\n                upArrow.style.color = self.style.contextMenuArrowColor;\n                downArrow.style.color = self.style.contextMenuArrowColor;\n                [upArrow, downArrow].forEach(function (el) {\n                    el.style.textAlign = 'center';\n                    el.style.position = 'absolute';\n                    el.style.zIndex = zIndexTop + 1;\n                });\n                container.style.zIndex = zIndexTop;\n                if (parentContextMenu && parentContextMenu.inputDropdown) {\n                    container.style.maxHeight = window.innerHeight - loc.y - self.style.autocompleteBottomMargin + 'px';\n                    container.style.minWidth = pos.width + 'px';\n                    loc.y += pos.height;\n                }\n                if (self.mobile) {\n                    container.style.width = pos.width + 'px';\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                container.addEventListener('scroll', checkArrowVisibility);\n                container.addEventListener('wheel', function (e) {\n                    if (self.hasFocus) {\n                        container.scrollTop += e.deltaY;\n                        container.scrollLeft += e.deltaX;\n                    }\n                    checkArrowVisibility();\n                });\n                upArrow.innerHTML = self.style.contextMenuArrowUpHTML;\n                downArrow.innerHTML = self.style.contextMenuArrowDownHTML;\n                container.appendChild(upArrow);\n                document.body.appendChild(downArrow);\n                document.body.appendChild(container);\n                rect = container.getBoundingClientRect();\n                // TODO: fix !(parentContextMenu && parentContextMenu.inputDropdown) state (autocomplete)\n                if (rect.bottom > window.innerHeight) {\n                    if (!(parentContextMenu && parentContextMenu.inputDropdown)) {\n                        loc.y -= (rect.bottom + self.style.contextMenuWindowMargin) - window.innerHeight;\n                    }\n                    if (loc.y < 0) { loc.y = self.style.contextMenuWindowMargin; }\n                    if (container.offsetHeight > window.innerHeight - self.style.contextMenuWindowMargin) {\n                        container.style.height = window.innerHeight - (self.style.contextMenuWindowMargin * 2) + 'px';\n                    }\n                }\n                if (rect.right > window.innerWidth) {\n                    loc.x -= rect.right - window.innerWidth + self.style.contextMenuWindowMargin;\n                }\n                if (loc.x < 0) { loc.x = self.style.contextMenuWindowMargin; }\n                if (loc.y < 0) { loc.y = self.style.contextMenuWindowMargin; }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                rect = container.getBoundingClientRect();\n                upArrow.style.top = rect.top + 'px';\n                downArrow.style.top = rect.top + rect.height - downArrow.offsetHeight + 'px';\n                upArrow.style.left = rect.left + 'px';\n                downArrow.style.left = rect.left + 'px';\n                downArrow.style.width = container.offsetWidth + 'px';\n                upArrow.style.width = container.offsetWidth + 'px';\n                downArrow.addEventListener('mouseover', startHoverScroll('down'));\n                downArrow.addEventListener('mouseout', endHoverScroll('down'));\n                upArrow.addEventListener('mouseover', startHoverScroll('up'));\n                upArrow.addEventListener('mouseout', endHoverScroll('up'));\n                checkArrowVisibility();\n            }\n            intf.parentGrid = self.intf;\n            intf.parentContextMenu = parentContextMenu;\n            intf.container = container;\n            init();\n            intf.clickIndex = clickIndex;\n            intf.rect = rect;\n            intf.items = items;\n            intf.upArrow = upArrow;\n            intf.downArrow = downArrow;\n            intf.dispose = function () {\n                clearTimeout(hoverScrollTimeout);\n                children.forEach(function (c) {\n                    c.dispose();\n                });\n                [downArrow, upArrow, container].forEach(function (el) {\n                    if (el.parentNode) { el.parentNode.removeChild(el); }\n                });\n            };\n            Object.defineProperty(intf, 'selectedIndex', {\n                get: function () {\n                    return selectedIndex;\n                },\n                set: function (value) {\n                    if (typeof value !== 'number' || isNaN(value || !isFinite(value))) {\n                        throw new Error('Context menu selected index must be a sane number.');\n                    }\n                    selectedIndex = value;\n                    if (selectedIndex > items.length - 1) {\n                        selectedIndex = items.length - 1;\n                    }\n                    if (selectedIndex < 0) {\n                        selectedIndex = 0;\n                    }\n                    items.forEach(function (item, index) {\n                        if (index === selectedIndex) {\n                            return self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                        }\n                        self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item');\n                    });\n                }\n            });\n            return intf;\n        }\n        function createFilterContextMenuItems(e) {\n            var filterContainer = document.createElement('div'),\n                filterLabel = document.createElement('div'),\n                filterAutoCompleteButton = document.createElement('button'),\n                filterInput = document.createElement('input'),\n                n = e.cell && e.cell.header ? e.cell.header.title || e.cell.header.name : '',\n                autoCompleteItems,\n                iRect;\n            function checkRegExpErrorState() {\n                filterInput.style.background = self.style.contextFilterInputBackground;\n                filterInput.style.color = self.style.contextFilterInputColor;\n                if (self.invalidFilterRegEx) {\n                    filterInput.style.background = self.style.contextFilterInvalidRegExpBackground;\n                    filterInput.style.color = self.style.contextFilterInvalidRegExpColor;\n                }\n            }\n            function fillAutoComplete() {\n                var count = 0;\n                autoCompleteItems = {};\n                self.data.forEach(function (row) {\n                    var value = row[e.cell.header.name];\n                    if (autoCompleteItems[value] || count > self.attributes.maxAutoCompleteItems) { return; }\n                    count += 1;\n                    autoCompleteItems[value] = {\n                        title: self.formatters[e.cell.header.type || 'string']({ cell: { value: value }}),\n                        click: function (e) {\n                            filterInput.value = value;\n                            e.stopPropagation();\n                            filterInput.dispatchEvent(new Event('keyup'));\n                            self.disposeAutocomplete();\n                            return;\n                        }\n                    };\n                });\n                autoCompleteItems = Object.keys(autoCompleteItems).map(function (key) {\n                    return autoCompleteItems[key];\n                });\n            }\n            function createAutoCompleteContext(ev) {\n                if (ev && [40, 38, 13, 9].indexOf(ev.keyCode) !== -1) { return; }\n                fillAutoComplete();\n                iRect = filterInput.getBoundingClientRect();\n                if (autoCompleteContext) {\n                    autoCompleteContext.dispose();\n                    autoCompleteContext = undefined;\n                }\n                autoCompleteContext = createContextMenu(e, {\n                    left: iRect.left,\n                    top: iRect.top,\n                    right: iRect.right,\n                    bottom: iRect.bottom,\n                    height: iRect.height,\n                    width: iRect.width\n                }, autoCompleteItems, {inputDropdown: true});\n                autoCompleteContext.selectedIndex = 0;\n            }\n            self.createInlineStyle(filterLabel, 'canvas-datagrid-context-menu-label');\n            self.createInlineStyle(filterAutoCompleteButton, 'canvas-datagrid-context-menu-filter-button');\n            self.createInlineStyle(filterInput, 'canvas-datagrid-context-menu-filter-input');\n            checkRegExpErrorState();\n            filterInput.onclick = self.disposeAutocomplete;\n            filterInput.addEventListener('keydown', function (e) {\n                //down\n                if (e.keyCode === 40) {\n                    autoCompleteContext.selectedIndex += 1;\n                }\n                //up\n                if (e.keyCode === 38) {\n                    autoCompleteContext.selectedIndex -= 1;\n                }\n                //enter\n                if (e.keyCode === 13) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    self.disposeContextMenu();\n                }\n                //tab\n                if (e.keyCode === 9) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    e.preventDefault();\n                }\n                //esc\n                if (e.keyCode === 27) {\n                    self.disposeContextMenu();\n                }\n            });\n            filterInput.addEventListener('keyup', function () {\n                self.setFilter(e.cell.header.name, filterInput.value);\n            });\n            filterInput.addEventListener('keyup', createAutoCompleteContext);\n            ['focus', 'blur', 'keydown', 'keyup', 'change'].forEach(function (en) {\n                filterInput.addEventListener(en, checkRegExpErrorState);\n            });\n            filterInput.value = e.cell.header ? self.columnFilters[e.cell.header.name] || '' : '';\n            filterLabel.innerHTML = self.attributes.filterOptionText.replace(/%s/g, n);\n            filterAutoCompleteButton.onclick = function () {\n                if (autoCompleteContext) {\n                    return self.disposeAutocomplete();\n                }\n                createAutoCompleteContext();\n            };\n            filterAutoCompleteButton.innerHTML = self.style.contextFilterButtonHTML;\n            filterContainer.addEventListener('click', function (e) {\n                return e.stopPropagation();\n            });\n            filterContainer.appendChild(filterLabel);\n            filterContainer.appendChild(filterInput);\n            filterContainer.appendChild(filterAutoCompleteButton);\n            e.items.push({\n                title: filterContainer\n            });\n            if (Object.keys(self.columnFilters).length) {\n                Object.keys(self.columnFilters).forEach(function (cf) {\n                    var h = self.getHeaderByName(cf);\n                    e.items.push({\n                        title: self.attributes.removeFilterOptionText.replace(/%s/g, h.title || h.name),\n                        click: function removeFilterClick(e) {\n                            e.preventDefault();\n                            self.setFilter(cf, '');\n                            self.controlInput.focus();\n                        }\n                    });\n                });\n            }\n        }\n        function addDefaultContextMenuItem(e) {\n            var isNormalCell = !(e.cell.isBackground || e.cell.isColumnHeaderCellCap\n                    || e.cell.isScrollBar || e.cell.isCorner || e.cell.isRowHeader)\n                    && e.cell.header;\n            if (self.attributes.showFilter && isNormalCell) {\n                createFilterContextMenuItems(e);\n            }\n            if (self.attributes.showCopy\n                    && self.selections.reduce(function (p, r) {\n                        return p + r.length;\n                    }, 0) > 0) {\n                e.items.push({\n                    title: self.attributes.copyText,\n                    click: function () {\n                        document.execCommand('copy');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.showPaste && self.clipBoardData) {\n                e.items.push({\n                    title: self.attributes.pasteText,\n                    click: function () {\n                        self.paste(self.clipBoardData, e.cell.columnIndex, e.cell.rowIndex);\n                        self.draw();\n                    }\n                });\n            }\n            if (self.attributes.showColumnSelector) {\n                e.items.push({\n                    title: self.attributes.columnSelectorText,\n                    items: function () {\n                        var d = [];\n                        self.getSchema().forEach(function (column) {\n                            function toggleColumnVisibility(e) {\n                                column.hidden = !column.hidden;\n                                e.preventDefault();\n                                self.stopPropagation(e);\n                                self.disposeContextMenu();\n                                self.resize(true);\n                                self.setStorageData();\n                            }\n                            var el = document.createElement('div');\n                            applyContextItemStyle(el);\n                            el.addEventListener('touchstart', toggleColumnVisibility);\n                            el.addEventListener('click', toggleColumnVisibility);\n                            el.innerHTML = (column.hidden ? self.attributes.columnSelectorHiddenText\n                                    : self.attributes.columnSelectorVisibleText)\n                                    + (column.title || column.name);\n                            d.push({\n                                title: el\n                            });\n                        });\n                        return d;\n                    }\n                });\n                if (e.cell && e.cell.header) {\n                    e.items.push({\n                        title: self.attributes.hideColumnText\n                            .replace(/%s/ig, e.cell.header.title || e.cell.header.name),\n                        click: function (ev) {\n                            e.cell.header.hidden = true;\n                            ev.preventDefault();\n                            self.stopPropagation(ev);\n                            self.disposeContextMenu();\n                            self.setStorageData();\n                            setTimeout(function () { self.resize(true); }, 10);\n                        }\n                    });\n                }\n            }\n            if (self.attributes.saveAppearance && self.attributes.showClearSettingsOption\n                    && (Object.keys(self.sizes.rows).length > 0\n                        || Object.keys(self.sizes.columns).length > 0)) {\n                e.items.push({\n                    title: self.attributes.clearSettingsOptionText,\n                    click: function (e) {\n                        e.preventDefault();\n                        self.sizes.rows = {};\n                        self.sizes.columns = {};\n                        self.createRowOrders();\n                        self.createColumnOrders();\n                        self.storedSettings = undefined;\n                        self.dispatchEvent('resizecolumn', {columnWidth: self.style.cellWidth});\n                        self.dispatchEvent('resizerow', {cellHeight: self.style.cellHeight});\n                        self.setStorageData();\n                        self.resize(true);\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.allowSorting && self.attributes.showOrderByOption && isNormalCell) {\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextAsc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'asc');\n                        self.controlInput.focus();\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextDesc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'desc');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n        }\n        self.disposeAutocomplete = function () {\n            if (autoCompleteContext) {\n                autoCompleteContext.dispose();\n                autoCompleteContext = undefined;\n            }\n        };\n        self.disposeContextMenu = function () {\n            document.removeEventListener('click', self.disposeContextMenu);\n            zIndexTop = self.style.contextMenuZIndex;\n            self.disposeAutocomplete();\n            if (self.contextMenu) {\n                self.contextMenu.dispose();\n            }\n            self.contextMenu = undefined;\n        };\n        self.contextmenuEvent = function (e, overridePos) {\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            function createDiposeEvent() {\n                requestAnimationFrame(function () {\n                    document.addEventListener('click', self.disposeContextMenu);\n                    document.removeEventListener('mouseup', createDiposeEvent);\n                });\n            }\n            var contextPosition,\n                items = [],\n                pos = overridePos || self.getLayerPos(e),\n                ev = {\n                    NativeEvent: e,\n                    cell: self.getCellAt(pos.x, pos.y),\n                    items: items\n                };\n            if (!ev.cell.isGrid) {\n                addDefaultContextMenuItem(ev);\n            }\n            if (self.dispatchEvent('contextmenu', ev)) {\n                return;\n            }\n            if (!ev.cell.isGrid) {\n                if (self.contextMenu) {\n                    self.disposeContextMenu();\n                }\n                contextPosition = {\n                    left: pos.x + pos.rect.left\n                        + self.style.contextMenuMarginLeft + self.canvasOffsetLeft,\n                    top: pos.y + pos.rect.top\n                        + self.style.contextMenuMarginTop + self.canvasOffsetTop,\n                    right: ev.cell.width + ev.cell.x + pos.rect.left,\n                    bottom: ev.cell.height + ev.cell.y + pos.rect.top,\n                    height: ev.cell.height,\n                    width: ev.cell.width\n                };\n                if (self.mobile) {\n                    contextPosition.left = self.style.mobileContextMenuMargin + 'px';\n                    contextPosition.width = self.width - (self.style.mobileContextMenuMargin * 2) + 'px';\n                }\n                self.contextMenu = createContextMenu(ev, contextPosition, items);\n                document.addEventListener('mouseup', createDiposeEvent);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        self.getClippingRect = function (ele) {\n            var boundingRect = self.position(self.parentNode),\n                eleRect = self.position(ele),\n                s = self.scrollOffset(self.canvas),\n                clipRect = {\n                    x: 0,\n                    y: 0,\n                    h: 0,\n                    w: 0\n                },\n                parentRect = {\n                    x: -Infinity,\n                    y: -Infinity,\n                    h: Infinity,\n                    w: Infinity\n                },\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth();\n            boundingRect.top -= s.top;\n            boundingRect.left -= s.left;\n            eleRect.top -= s.top;\n            eleRect.left -= s.left;\n            clipRect.h = boundingRect.top + boundingRect.height - ele.offsetTop - self.style.scrollBarWidth;\n            clipRect.w = boundingRect.left + boundingRect.width - ele.offsetLeft - self.style.scrollBarWidth;\n            clipRect.x = boundingRect.left + (eleRect.left * -1) + rowHeaderCellWidth;\n            clipRect.y = boundingRect.top + (eleRect.top * -1) + columnHeaderCellHeight;\n            return {\n                x: clipRect.x > parentRect.x ? clipRect.x : parentRect.x,\n                y: clipRect.y > parentRect.y ? clipRect.y : parentRect.y,\n                h: clipRect.h < parentRect.h ? clipRect.h : parentRect.h,\n                w: clipRect.w < parentRect.w ? clipRect.w : parentRect.w\n            };\n        };\n        self.clipElement = function (ele) {\n            var clipRect = self.getClippingRect(ele);\n            if (clipRect.w < 0) { clipRect.w = 0; }\n            if (clipRect.h < 0) { clipRect.h = 0; }\n            ele.style.clip = 'rect('\n                + clipRect.y + 'px,'\n                + clipRect.w + 'px,'\n                + clipRect.h + 'px,'\n                + clipRect.x + 'px'\n                + ')';\n            // INFO https://developer.mozilla.org/en-US/docs/Web/CSS/clip\n            // clip has been \"deprecated\" for clipPath.  Of course nothing but chrome\n            // supports clip path, so we'll keep using clip until someday clipPath becomes\n            // more widely support.  The code below works correctly, but setting clipPath and clip\n            // at the same time has undesirable results.\n            // ele.style.clipPath = 'polygon('\n            //     + clipRect.x + 'px ' + clipRect.y + 'px,'\n            //     + clipRect.x + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.y + 'px'\n            //     + ')';\n        };\n        self.scrollOffset = function (e) {\n            var x = 0, y = 0;\n            while (e.parentNode && e.nodeName !== 'CANVAS-DATAGRID' && e !== self.intf) {\n                if (e.nodeType !== 'canvas-datagrid-tree'\n                        && e.nodeType !== 'canvas-datagrid-cell') {\n                    x -= e.scrollLeft;\n                    y -= e.scrollTop;\n                }\n                e = e.parentNode;\n            }\n            return {\n                left: x - document.scrollingElement.scrollLeft,\n                top: y - document.scrollingElement.scrollTop\n            };\n        };\n        self.resizeEditInput = function () {\n            if (self.input && self.input.editCell) {\n                var pos = self.canvas.getBoundingClientRect(),\n                    s = self.scrollOffset(self.intf),\n                    bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                    borderWidth = (self.style.cellBorderWidth * bm),\n                    cell = self.getVisibleCellByIndex(self.input.editCell.columnIndex, self.input.editCell.rowIndex)\n                        || {x: -100, y: -100, height: 0, width: 0};\n                if (self.mobile) {\n                    self.input.style.left = '0';\n                    self.input.style.top = (self.height - self.style.mobileEditInputHeight) - borderWidth - 1 + 'px';\n                    self.input.style.height = self.style.mobileEditInputHeight + 'px';\n                    self.input.style.width = self.width - borderWidth - 1 + 'px';\n                    return;\n                }\n                self.input.style.left = pos.left + cell.x + self.canvasOffsetLeft - s.left + 'px';\n                self.input.style.top = pos.top + cell.y - self.style.cellBorderWidth + self.canvasOffsetTop - s.top + 'px';\n                self.input.style.height = cell.height - borderWidth + 'px';\n                self.input.style.width = cell.width - self.style.cellPaddingLeft + 'px';\n                self.clipElement(self.input);\n            }\n        };\n        self.position = function (e, ignoreScrollOffset) {\n            var x = 0, y = 0, s = e, h, w;\n            while (e.offsetParent && e.nodeName !== 'CANVAS-DATAGRID') {\n                x += e.offsetLeft;\n                y += e.offsetTop;\n                h = e.offsetHeight;\n                w = e.offsetWidth;\n                e = e.offsetParent;\n            }\n            if (ignoreScrollOffset) {\n                return {left: x, top: y, height: h, width: w};\n            }\n            e = s;\n            s = self.scrollOffset(e);\n            return { left: x + s.left, top: y + s.top, height: h, width: w };\n        };\n        self.getLayerPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.clientX - rect.left,\n                    y: e.clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        /**\n         * Ends editing, optionally aborting the edit.\n         * @memberof canvasDatagrid\n         * @name endEdit\n         * @method\n         * @param {boolean} abort When true, abort the edit.\n         */\n        self.endEdit = function (abort) {\n            var cell = self.input.editCell,\n                y = cell.rowIndex;\n            function abortEdit() {\n                abort = true;\n            }\n            if (self.dispatchEvent('beforeendedit', {\n                    cell: cell,\n                    newValue: self.input.value,\n                    oldValue: cell.value,\n                    abort: abortEdit,\n                    input: self.input\n                })) { return false; }\n            if (self.input.value !== cell.value && !abort) {\n                self.changes[y] = self.changes[y] || {};\n                self.changes[y][cell.header.name] = self.input.value;\n                if (!cell.data) {\n                    self.data[cell.rowIndex] = {};\n                    cell.data = self.data[cell.rowIndex];\n                }\n                cell.data[cell.header.name] = self.input.value;\n                if (y === self.data.length) {\n                    if (self.dispatchEvent('newrow', {\n                            value: self.input.value,\n                            defaultValue: cell.value,\n                            aborted: abort,\n                            cell: cell,\n                            input: self.input\n                        })) { return false; }\n                    self.addRow(cell.data);\n                    self.createNewRowData();\n                }\n                self.draw(true);\n            }\n            document.body.removeChild(self.input);\n            self.intf.focus();\n            self.dispatchEvent('endedit', {\n                cell: cell,\n                value: self.input.value,\n                aborted: abort,\n                input: self.input\n            });\n            self.input = undefined;\n            return true;\n        };\n        /**\n         * Begins editing at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name beginEditAt\n         * @method\n         * @param {number} x The column index of the cell to edit.\n         * @param {number} y The row index of the cell to edit.\n         */\n        self.beginEditAt = function (x, y) {\n            if (!self.attributes.editable) { return; }\n            if (self.input) {\n                self.endEdit();\n            }\n            var cell = self.getVisibleCellByIndex(x, y),\n                s = self.getSchema(),\n                adjacentCells,\n                enumItems,\n                enu,\n                option,\n                valueInEnum;\n            if (!(cell && cell.header)) { return; }\n            //HACK for IE10, does not like literal enum\n            enu = cell.header['enum'];\n            if (self.dispatchEvent('beforebeginedit', {cell: cell})) { return false; }\n            self.scrollIntoView(x, y);\n            self.setActiveCell(x, y);\n            adjacentCells = self.getAdjacentCells();\n            if (enu) {\n                self.input = document.createElement('select');\n            } else {\n                self.input = document.createElement(self.attributes.multiLine\n                    ? 'textarea' : 'input');\n            }\n            cell = self.getVisibleCellByIndex(x, y);\n            //HACK on mobile devices sometimes edit can begin without the cell being in view, I don't know how.\n            if (!cell) { return; }\n            if (enu) {\n                // add enums\n                if (typeof enu === 'function') {\n                    enumItems = enu.apply(self.intf, [{cell: cell}]);\n                } else if (Array.isArray(enu)) {\n                    enumItems = enu;\n                }\n                enumItems.forEach(function (e) {\n                    var i = document.createElement('option'),\n                        val,\n                        title;\n                    if (Array.isArray(e)) {\n                        val = e[0];\n                        title = e[1];\n                    } else {\n                        val = e;\n                        title = e;\n                    }\n                    if (val === cell.value) { valueInEnum = true; }\n                    i.value = val;\n                    i.innerHTML = title;\n                    self.input.appendChild(i);\n                });\n                if (!valueInEnum) {\n                    option = document.createElement('option');\n                    option.value = cell.value;\n                    option.innerHTML = cell.value;\n                    self.input.appendChild(option);\n                }\n                self.input.addEventListener('change', function () {\n                    self.endEdit();\n                    self.draw(true);\n                });\n            }\n            document.body.appendChild(self.input);\n            self.createInlineStyle(self.input, self.mobile ? 'canvas-datagrid-edit-mobile-input' : 'canvas-datagrid-edit-input');\n            self.input.style.position = 'absolute';\n            self.input.editCell = cell;\n            self.resizeEditInput();\n            self.input.style.zIndex = self.style.editCellZIndex;\n            self.input.style.fontSize = (parseInt(self.style.editCellFontSize, 10) * self.scale) + 'px';\n            self.input.value = [null, undefined].indexOf(cell.value) !== -1 ? '' : cell.value;\n            self.input.focus();\n            self.input.addEventListener('click', self.stopPropagation);\n            self.input.addEventListener('dblclick', self.stopPropagation);\n            self.input.addEventListener('mouseup', self.stopPropagation);\n            self.input.addEventListener('mousedown', self.stopPropagation);\n            self.input.addEventListener('keydown', function (e) {\n                var nx = cell.columnIndex,\n                    ny = cell.rowIndex;\n                // esc\n                if (e.keyCode === 27) {\n                    self.endEdit(true);\n                    self.draw(true);\n                // enter\n                } else if (e.keyCode === 13\n                        && (!self.attributes.multiLine\n                            || (self.attributes.multiLine && e.shiftKey))) {\n                    self.endEdit();\n                    self.draw(true);\n                } else if (e.keyCode === 9) {\n                    e.preventDefault();\n                    if (!self.endEdit()) {\n                        return;\n                    }\n                    if (e.shiftKey) {\n                        nx = adjacentCells.left;\n                    } else {\n                        nx = adjacentCells.right;\n                    }\n                    if (adjacentCells.left === x && e.shiftKey) {\n                        nx = adjacentCells.last;\n                        ny -= 1;\n                    }\n                    if (adjacentCells.right === x && !e.shiftKey) {\n                        nx = adjacentCells.first;\n                        ny += 1;\n                    }\n                    if (ny < 0) {\n                        ny = self.data.length - 1;\n                    }\n                    if (ny > self.data.length - 1) {\n                        ny = 0;\n                    }\n                    console.log('nx', nx, 'ny', ny);\n                    self.scrollIntoView(nx, ny);\n                    self.beginEditAt(nx, ny);\n                }\n            });\n            self.dispatchEvent('beginedit', {cell: cell, input: self.input});\n        };\n        self.createInlineStyle = function (el, className) {\n            var css = {\n                'canvas-datagrid-context-menu-filter-input': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextFilterInputBackground,\n                    color: self.style.contextFilterInputColor,\n                    border: self.style.contextFilterInputBorder,\n                    borderRadius: self.style.contextFilterInputBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextFilterInputFontFamily,\n                    fontSize: self.style.contextFilterInputFontSize\n                },\n                'canvas-datagrid-context-menu-filter-button': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextFilterButtonBorder,\n                    borderRadius: self.style.contextFilterButtonBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFilterButtonFontFamily,\n                    fontSize: self.style.contextMenuFilterButtonFontSize\n                },\n                'canvas-datagrid-context-child-arrow': {\n                    cssFloat: 'right',\n                    color: self.style.childContextMenuArrowColor,\n                    fontSize: self.style.contextMenuChildArrowFontSize,\n                    fontFamily: self.style.contextMenuFontFamily,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-autocomplete': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    position: 'absolute',\n                    zIndex: 9999,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-autocomplete-item': {\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor\n                },\n                'canvas-datagrid-autocomplete-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-canvas': {\n                    position: 'absolute',\n                    zIndex: '-1'\n                },\n                'canvas-datagrid': {\n                    display: 'block'\n                },\n                'canvas-datagrid-control-input': {\n                    position: 'fixed',\n                    top: '-5px',\n                    left: '-5px',\n                    border: 'none',\n                    opacity: '0',\n                    cursor: 'pointer',\n                    width: '1px',\n                    height: '1px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize\n                },\n                'canvas-datagrid-edit-mobile-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 0',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.mobileEditFontFamily,\n                    fontSize: self.style.mobileEditFontSize,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-edit-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 ' + self.style.editCellPaddingLeft + 'px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.editCellFontFamily,\n                    fontSize: self.style.editCellFontSize,\n                    boxShadow: self.style.editCellBoxShadow,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-context-menu-item-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-context-menu-label': {\n                    margin: self.style.contextMenuLabelMargin,\n                    display: self.style.contextMenuLabelDisplay,\n                    minWidth: self.style.contextMenuLabelMinWidth,\n                    maxWidth: self.style.contextMenuLabelMaxWidth\n                },\n                'canvas-datagrid-context-menu-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-context-menu': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-invalid-search-regExp': {\n                    background: self.style.contextMenuFilterInvalidExpresion\n                }\n            };\n            if (css[className]) {\n                Object.keys(css[className]).map(function (prop) {\n                    el.style[prop] = css[className][prop];\n                });\n            }\n            return;\n        };\n        self.appendTo = function (e) {\n            self.parentNode = e;\n            self.setDom();\n        };\n        self.setDom = function () {\n            if (self.isChildGrid) {\n                self.parentGrid = self.parentNode.parentGrid;\n                self.ctx = self.parentGrid.context;\n                self.canvas = self.parentGrid.canvas;\n                self.controlInput = self.parentGrid.controlInput;\n                self.eventParent = self.canvas;\n            } else {\n                self.controlInput = self.controlInput || document.createElement('input');\n                self.controlInput.onblur = self.intf.blur;\n                self.createInlineStyle(self.controlInput, 'canvas-datagrid-control-input');\n                self.isChildGrid = false;\n                self.parentDOMNode = self.parentNode;\n                self.parentIsCanvas = /^canvas$/i.test(self.parentDOMNode.tagName);\n                if (self.parentIsCanvas) {\n                    self.canvas = self.parentDOMNode;\n                    self.parentDOMNode.appendChild(self.controlInput);\n                } else {\n                    self.canvas = document.createElement('canvas');\n                    self.parentDOMNode.appendChild(self.canvas);\n                    self.parentDOMNode.appendChild(self.controlInput);\n                }\n                self.createInlineStyle(self.canvas, 'canvas-datagrid');\n                self.ctx = self.canvas.getContext('2d');\n                self.ctx.textBaseline = 'alphabetic';\n                self.eventParent = self.canvas;\n            }\n            self.parentNodeStyle = self.canvas.style;\n            self.controlInput.setAttribute('readonly', true);\n            self.controlInput.addEventListener('blur', function (e) {\n                if (e.target !== self.canvas) {\n                    self.hasFocus = false;\n                }\n            });\n            self.eventParent.addEventListener('scroll', self.resize, false);\n            self.eventParent.addEventListener('touchstart', self.touchstart, false);\n            self.eventParent.addEventListener('mouseup', self.mouseup, false);\n            self.eventParent.addEventListener('mousedown', self.mousedown, false);\n            self.eventParent.addEventListener('dblclick', self.dblclick, false);\n            self.eventParent.addEventListener('click', self.click, false);\n            self.eventParent.addEventListener('mousemove', self.mousemove);\n            self.eventParent.addEventListener('wheel', self.scrollWheel, false);\n            self.canvas.addEventListener('contextmenu', self.contextmenuEvent, false);\n            self.controlInput.addEventListener('copy', self.copy);\n            self.controlInput.addEventListener('cut', self.cut);\n            self.controlInput.addEventListener('paste', self.paste);\n            self.controlInput.addEventListener('keypress', self.keypress, false);\n            self.controlInput.addEventListener('keyup', self.keyup, false);\n            self.controlInput.addEventListener('keydown', self.keydown, false);\n            window.addEventListener('resize', self.resize);\n        };\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        /**\n         * Converts a integer into a letter A - ZZZZZ...\n         * @memberof canvasDatagrid\n         * @name integerToAlpha\n         * @method\n         * @param {column} n The number to convert.\n         */\n        self.integerToAlpha = function (n) {\n            var ordA = 'a'.charCodeAt(0),\n                ordZ = 'z'.charCodeAt(0),\n                len = ordZ - ordA + 1,\n                s = '';\n            while (n >= 0) {\n                s = String.fromCharCode(n % len + ordA) + s;\n                n = Math.floor(n / len) - 1;\n            }\n            return s;\n        };\n        /**\n         * Inserts a new column before the specified index into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name insertColumn\n         * @method\n         * @param {column} c The column to insert into the schema.\n         * @param {number} index The index of the column to insert before.\n         */\n        self.insertColumn = function (c, index) {\n            var s = self.getSchema();\n            if (s.length < index) {\n                throw new Error('Index is beyond the length of the schema.');\n            }\n            self.validateColumn(c, s);\n            s.splice(index, 0, c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a column from the schema at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteColumn\n         * @tutorial schema\n         * @method\n         * @param {number} index The index of the column to delete.\n         */\n        self.deleteColumn = function (index) {\n            var s = self.getSchema();\n            // remove data matching this column name from data\n            self.data.forEach(function (row) {\n                delete row[s[index].name];\n            });\n            s.splice(index, 1);\n            self.intf.schema = s;\n        };\n        /**\n         * Adds a new column into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name addColumn\n         * @method\n         * @param {column} c The column to add to the schema.\n         */\n        self.addColumn = function (c) {\n            var s = self.getSchema();\n            self.validateColumn(c, s);\n            s.push(c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a row from the dataset at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteRow\n         * @method\n         * @param {number} index The index of the row to delete.\n         */\n        self.deleteRow = function (index) {\n            self.originalData.splice(index, 1);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Inserts a new row into the dataset before the specified index.\n         * @memberof canvasDatagrid\n         * @name insertRow\n         * @method\n         * @param {object} d data.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertRow = function (d, index) {\n            if (self.originalData.length < index) {\n                throw new Error('Index is beyond the length of the dataset.');\n            }\n            self.originalData.splice(index, 0, d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[index], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Adds a new row into the dataset.\n         * @memberof canvasDatagrid\n         * @name addRow\n         * @method\n         * @param {object} d data.\n         */\n        self.addRow = function (d) {\n            self.originalData.push(d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[self.originalData.length - 1], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Sets the height of a given row by index number.\n         * @memberof canvasDatagrid\n         * @name setRowHeight\n         * @method\n         * @param {number} rowIndex The index of the row to set.\n         * @param {number} height Height to set the row to.\n         */\n        self.setRowHeight = function (rowIndex, height) {\n            self.sizes.rows[rowIndex] = height;\n            self.draw(true);\n        };\n        /**\n         * Sets the width of a given column by index number.\n         * @memberof canvasDatagrid\n         * @name setColumnWidth\n         * @method\n         * @param {number} colIndex The index of the column to set.\n         * @param {number} width Width to set the column to.\n         */\n        self.setColumnWidth = function (colIndex, width) {\n            self.sizes.columns[colIndex] = width;\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the width of the columns due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetColumnWidths\n         * @tutorial schema\n         * @method\n         */\n        self.resetColumnWidths = function () {\n            self.sizes.columns = {};\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the height of the rows due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetRowHeights\n         * @tutorial schema\n         * @method\n         */\n        self.resetRowHeights = function () {\n            self.sizes.rows = {};\n            self.draw(true);\n        };\n        /**\n         * Sets the value of the filter.\n         * @memberof canvasDatagrid\n         * @name setFilter\n         * @method\n         * @param {string} column Name of the column to filter.\n         * @param {string} value The value to filter for.\n         */\n        self.setFilter = function (column, value) {\n            function applyFilter() {\n                self.refreshFromOrigialData();\n                Object.keys(self.columnFilters).forEach(function (filter) {\n                    var header = self.getHeaderByName(column);\n                    if (!header) {\n                        return;\n                    }\n                    self.currentFilter = header.filter || self.filter(column.type || 'string');\n                    self.data = self.data.filter(function (row) {\n                        return self.currentFilter(row[filter], self.columnFilters[filter]);\n                    });\n                });\n                self.resize();\n                self.draw(true);\n            }\n            if (column === undefined && value === undefined) {\n                self.columnFilters = {};\n                return applyFilter();\n            }\n            if (column && (value === '' || value === undefined)) {\n                delete self.columnFilters[column];\n            } else {\n                self.columnFilters[column] = value;\n            }\n            applyFilter();\n        };\n        /**\n         * Returns the number of pixels to scroll down to line up with row rowIndex.\n         * @memberof canvasDatagrid\n         * @name findRowScrollTop\n         * @method\n         * @param {number} rowIndex The row index of the row to scroll find.\n         */\n        self.findRowScrollTop = function (rowIndex) {\n            return self.scrollCache.y[rowIndex] - (self.attributes.showColumnHeaders ? self.getColumnHeaderCellHeight() : 0);\n        };\n        /**\n         * Returns the number of pixels to scroll to the left to line up with column columnIndex.\n         * @memberof canvasDatagrid\n         * @name findColumnScrollLeft\n         * @method\n         * @param {number} columnIndex The column index of the column to find.\n         */\n        self.findColumnScrollLeft = function (columnIndex) {\n            var left = 0, y = 0, s = self.getSchema(), l = s.length - 1;\n            if (columnIndex > l) {\n                throw new Error('Impossible column index');\n            }\n            while (y < columnIndex) {\n                left += self.sizes.columns[y] || s[y].width || self.style.cellWidth;\n                y += 1;\n            }\n            return left;\n        };\n        /**\n         * Scrolls the cell at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name gotoCell\n         * @method\n         * @param {number} x The column index of the cell to scroll to.\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoCell = function (x, y) {\n            if (x !== undefined) {\n                self.scrollBox.scrollLeft = self.findColumnScrollLeft(x);\n            }\n            if (y !== undefined) {\n                self.scrollBox.scrollTop = self.findRowScrollTop(y);\n            }\n        };\n        /**\n         * Scrolls the row y.\n         * @memberof canvasDatagrid\n         * @name gotoRow\n         * @method\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoRow = function (y) {\n            self.gotoCell(0, y);\n        };\n        /**\n         * Scrolls the cell at cell x, row y into view if it is not already.\n         * @memberof canvasDatagrid\n         * @name scrollIntoView\n         * @method\n         * @param {number} x The column index of the cell to scroll into view.\n         * @param {number} y The row index of the cell to scroll into view.\n         */\n        self.scrollIntoView = function (x, y) {\n            if (self.visibleCells.filter(function (cell) {\n                    return (cell.rowIndex === y || y === undefined)\n                        && (cell.columnIndex === x || x === undefined)\n                        && cell.x > 0\n                        && cell.y > 0\n                        && cell.x + cell.width < self.width\n                        && cell.y + cell.height < self.height;\n                }).length === 0) {\n                self.gotoCell(x, y);\n            }\n        };\n        /**\n         * Sets the active cell. Requires redrawing.\n         * @memberof canvasDatagrid\n         * @name setActiveCell\n         * @method\n         * @param {number} x The column index of the cell to set active.\n         * @param {number} y The row index of the cell to set active.\n         */\n        self.setActiveCell = function (x, y) {\n            if (x < 0) { x = 0; }\n            if (y < 0) { y = 0; }\n            self.activeCell = {\n                rowIndex: y,\n                columnIndex: x\n            };\n        };\n        /**\n         * Removes the selection.\n         * @memberof canvasDatagrid\n         * @name selectNone\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectNone = function (dontDraw) {\n            self.selections = [];\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Selects every visible cell.\n         * @memberof canvasDatagrid\n         * @name selectAll\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectAll = function (dontDraw) {\n            self.selectArea({\n                top: 0,\n                left: 0,\n                right: self.getVisibleSchema().length - 1,\n                bottom: self.data.length - 1\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Returns true if the selected columnIndex is selected on every row.\n         * @memberof canvasDatagrid\n         * @name isColumnSelected\n         * @method\n         * @param {number} columnIndex The column index to check.\n         */\n        self.isColumnSelected = function (columnIndex) {\n            var colIsSelected = true;\n            self.data.forEach(function (row, rowIndex) {\n                if (!self.selections[rowIndex] || self.selections[rowIndex].indexOf(self.orders.columns[columnIndex]) === -1) {\n                    colIsSelected = false;\n                }\n            });\n            return colIsSelected;\n        };\n        /**\n         * Runs the defined method on each selected cell.\n         * @memberof canvasDatagrid\n         * @name forEachSelectedCell\n         * @method\n         * @param {number} fn The function to execute.  The signature of the function is: (data, rowIndex, columnName).\n         * @param {number} expandToRow When true the data in the array is expanded to the entire row.\n         */\n        self.forEachSelectedCell = function (fn, expandToRow) {\n            var d = [], s = expandToRow ? self.getSchema() : self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    if (col === -1 || !s[col]) { return; }\n                    fn(self.data, index, s[col].name);\n                });\n            });\n        };\n        /**\n         * Selects a column.\n         * @memberof canvasDatagrid\n         * @name selectColumn\n         * @method\n         * @param {number} columnIndex The column index to select.\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the column.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the column.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectColumn = function (columnIndex, ctrl, shift, supressEvent) {\n            var s, e, x;\n            function addCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) === -1) {\n                        self.selections[rowIndex].push(i);\n                    }\n                });\n            }\n            function removeCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) !== -1) {\n                        self.selections[rowIndex].splice(self.selections[rowIndex].indexOf(i), 1);\n                    }\n                });\n            }\n            if (shift) {\n                if (!self.activeCell) { return; }\n                s = Math.min(self.activeCell.columnIndex, columnIndex);\n                e = Math.max(self.activeCell.columnIndex, columnIndex);\n                for (x = s; e > x; x += 1) {\n                    addCol(x);\n                }\n            }\n            if (!ctrl && !shift) {\n                self.selections = [];\n                self.activeCell.columnIndex = columnIndex;\n                self.activeCell.rowIndex = self.scrollIndexTop;\n            }\n            if (ctrl && self.isColumnSelected(columnIndex)) {\n                removeCol(columnIndex);\n            } else {\n                addCol(columnIndex);\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.getSelectionBounds()\n            });\n        };\n        /**\n         * Selects a row.\n         * @memberof canvasDatagrid\n         * @name selectRow\n         * @method\n         * @param {number} rowIndex The row index to select.\n         * @param {boolean} ctrl When true, behaves as if you were holding control/command when you clicked the row.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the row.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectRow = function (rowIndex, ctrl, shift, supressEvent) {\n            var x, st, en, s = self.getVisibleSchema();\n            function addRow(ri) {\n                self.selections[ri] = [];\n                self.selections[ri].push(-1);\n                s.forEach(function (col, index) {\n                    self.selections[ri].push(index);\n                });\n            }\n            if (self.dragAddToSelection === false || self.dragObject === undefined) {\n                if (self.selections[rowIndex] && self.selections[rowIndex].length - 1 === s.length) {\n                    if (ctrl) {\n                        self.selections[rowIndex] = [];\n                        return;\n                    }\n                }\n            }\n            if (self.dragAddToSelection === true || self.dragObject === undefined) {\n                if (shift && self.dragObject === undefined) {\n                    if (!self.activeCell) { return; }\n                    st = Math.min(self.activeCell.rowIndex, rowIndex);\n                    en = Math.max(self.activeCell.rowIndex, rowIndex);\n                    for (x = st; en >= x; x += 1) {\n                        addRow(x);\n                    }\n                } else {\n                    addRow(rowIndex);\n                }\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Collapse a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name collapseTree\n         * @method\n         * @param {number} index The index of the row to collapse.\n         */\n        self.collapseTree = function (rowIndex) {\n            self.dispatchEvent('collapsetree', {\n                childGrid: self.childGrids[rowIndex],\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowIndex].blur();\n            self.openChildren[rowIndex].dispose();\n            delete self.openChildren[rowIndex];\n            delete self.sizes.trees[rowIndex];\n            delete self.childGrids[rowIndex];\n            self.dispatchEvent('resizerow', {\n                cellHeight: self.style.cellHeight\n            });\n            self.resize(true);\n            self.draw(true);\n        };\n        /**\n         * Expands a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name expandTree\n         * @method\n         * @param {number} index The index of the row to expand.\n         */\n        self.expandTree = function (rowIndex) {\n            var trArgs = self.args.treeGridAttributes || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth,\n                h = self.sizes.trees[rowIndex] || self.style.treeGridHeight,\n                treeGrid;\n            if (!self.childGrids[rowIndex]) {\n                trArgs.debug = self.attributes.debug;\n                trArgs.name = self.attributes.saveAppearance ? self.attributes.name + 'tree' + rowIndex : undefined;\n                trArgs.style = trArgs.style || self.style;\n                trArgs.parentNode = {\n                    parentGrid: self.intf,\n                    nodeType: 'canvas-datagrid-tree',\n                    offsetHeight: h,\n                    offsetWidth: self.width - rowHeaderCellWidth,\n                    header: { width: self.width - rowHeaderCellWidth },\n                    offsetLeft: rowHeaderCellWidth,\n                    offsetTop: columnHeaderCellHeight,\n                    offsetParent: self.intf.parentNode,\n                    parentNode: self.intf.parentNode,\n                    style: 'tree',\n                    data: self.data[rowIndex]\n                };\n                treeGrid = self.createGrid(trArgs);\n                self.childGrids[rowIndex] = treeGrid;\n            }\n            treeGrid = self.childGrids[rowIndex];\n            treeGrid.visible = true;\n            self.dispatchEvent('expandtree', {\n                treeGrid: treeGrid,\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowIndex] = treeGrid;\n            self.sizes.trees[rowIndex] = h;\n            self.dispatchEvent('resizerow', {height: self.style.cellHeight});\n            self.resize(true);\n        };\n        /**\n         * Toggles tree grid open and close by row index.\n         * @memberof canvasDatagrid\n         * @name toggleTree\n         * @method\n         * @param {number} index The index of the row to toggle.\n         */\n        self.toggleTree = function (rowIndex) {\n            var i = self.openChildren[rowIndex];\n            if (i) {\n                return self.collapseTree(rowIndex);\n            }\n            self.expandTree(rowIndex);\n        };\n        /**\n         * Returns a header from the schema by name.\n         * @memberof canvasDatagrid\n         * @name getHeaderByName\n         * @tutorial schema\n         * @method\n         * @returns {header} header with the selected name, or undefined.\n         * @param {string} name The name of the column to resize.\n         */\n        self.getHeaderByName = function (name) {\n            var x, i = self.getSchema();\n            for (x = 0; x < i.length; x += 1) {\n                if (i[x].name === name) {\n                    return i[x];\n                }\n            }\n        };\n        /**\n         * Resizes a column to fit the longest value in the column. Call without a value to resize all columns.\n         * Warning, can be slow on very large record sets (1m records ~3-5 seconds on an i7).\n         * @memberof canvasDatagrid\n         * @name fitColumnToValues\n         * @method\n         * @param {string} name The name of the column to resize.\n         */\n        self.fitColumnToValues = function (name, internal) {\n            if (!self.canvas) { return; }\n            self.sizes.columns[name === 'cornerCell' ? -1 : self.getHeaderByName(name).index]\n                = Math.max(self.findColumnMaxTextLength(name), self.style.minColumnWidth);\n            if (!internal) {\n                self.resize();\n                self.draw(true);\n            }\n        };\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @overload\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {number} columnIndex The column index of the cell to check.\n         * @param {number} rowIndex The row index of the cell to check.\n         */\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {cell} cell The cell to check for.  Alternatively you can pass an object { x: <x-pixel-value>, y: <y-pixel-value> }.\n         */\n        self.isCellVisible = function (cell, rowIndex) {\n            // overload\n            if (rowIndex !== undefined) {\n                return self.visibleCells.filter(function (c) {\n                    return c.columnIndex === cell && c.rowIndex === rowIndex;\n                }).length > 0;\n            }\n            var x, l = self.visibleCells.length;\n            for (x = 0; x < l; x += 1) {\n                if (cell.x === self.visibleCells[x].x && cell.y === self.visibleCells[x].y) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n         * Sets the order of the data.\n         * @memberof canvasDatagrid\n         * @name order\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} columnName Name of the column to be sorted.\n         * @param {string} direction `asc` for ascending or `desc` for descending.\n         * @param {function} [sortFunction] When defined, override the default sorting method defined in the column's schema and use this one.\n         * @param {bool} [dontSetStorageData] Don't store this setting for future use.\n         */\n        self.order = function (columnName, direction, sortFunction, dontSetStorageData) {\n            var f,\n                c = self.getSchema().filter(function (col) {\n                    return col.name === columnName;\n                });\n            if (self.dispatchEvent('beforesortcolumn', {name: columnName, direction: direction})) { return; }\n            self.orderBy = columnName;\n            if (c.length === 0) {\n                throw new Error('Cannot sort.  No such column name');\n            }\n            f = sortFunction || self.sorters[c[0].type];\n            if (!f && c[0].type !== undefined) {\n                console.warn('Cannot sort type \"%s\" falling back to string sort.', c[0].type);\n            }\n            self.data = self.data.sort(typeof f === 'function' ? f(columnName, direction) : self.sorters.string);\n            self.dispatchEvent('sortcolumn', {name: columnName, direction: direction});\n            self.draw(true);\n            if (dontSetStorageData) { return; }\n            self.setStorageData();\n        };\n        self.isInGrid = function (e) {\n            if (e.x < 0\n                    || e.x > self.width\n                    || e.y < 0\n                    || e.y > self.height) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Moves the current selection relative to the its current position.  Note: this method does not move the selected data, just the selection itself.\n         * @memberof canvasDatagrid\n         * @name moveSelection\n         * @method\n         * @param {number} offsetX The number of columns to offset the selection.\n         * @param {number} offsetY The number of rows to offset the selection.\n         */\n        self.moveSelection = function (offsetX, offsetY) {\n            var sel = [];\n            self.selections.forEach(function (row, rowIndex) {\n                sel[rowIndex + offsetY] = [];\n                row.forEach(function (colIndex) {\n                    sel[rowIndex + offsetY].push(colIndex + offsetX);\n                });\n            });\n            self.selections = sel;\n        };\n        /**\n         * Moves data in the provided selection to another position in the grid.  Moving data off the edge of the schema (columns/x) will truncate data.\n         * @memberof canvasDatagrid\n         * @name moveTo\n         * @method\n         * @param {array} sel 2D array representing selected rows and columns.  `canvasDatagrid.selections` is in this format and can be used here.\n         * @param {number} x The column index to start inserting the selection at.\n         * @param {number} y The row index to start inserting the selection at.\n         */\n        self.moveTo = function (sel, x, y) {\n            var d = self.getSelectedData(),\n                s = self.getVisibleSchema(),\n                l = sel.length,\n                xi,\n                yi = y - 1;\n            sel.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) { return; }\n                row.forEach(function (col) {\n                    if (!s[col]) { return; }\n                    if (!self.data[index]) { self.data[index] = {}; }\n                    self.data[index][s[col].name] = null;\n                });\n            });\n            sel.forEach(function (row, index) {\n                yi += 1;\n                xi = x - 1;\n                row.forEach(function (col, cidx) {\n                    xi += 1;\n                    if (col === -1\n                            || !s[xi]\n                            || !s[col]\n                            || self.data.length - 1 < yi\n                            || yi < 0) { return; }\n                    if (!self.data[yi]) { self.data[yi] = {}; }\n                    self.data[yi][s[xi].name] = d[index][s[col].name];\n                });\n            });\n        };\n        /**\n         * Checks if a given column is visible.\n         * @memberof canvasDatagrid\n         * @name isColumnVisible\n         * @method\n         * @returns {boolean} When true, the column is visible.\n         * @param {number} columnIndex Column index.\n         */\n        self.isColumnVisible = function (columnIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === columnIndex;\n            }).length > 0;\n        };\n        /**\n         * Checks if a given row is visible.\n         * @memberof canvasDatagrid\n         * @name isRowVisible\n         * @method\n         * @returns {boolean} When true, the row is visible.\n         * @param {number} rowIndex Row index.\n         */\n        self.isRowVisible = function (rowIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.rowIndex === rowIndex;\n            }).length > 0;\n        };\n        /**\n         * Gets the cell at columnIndex and rowIndex.\n         * @memberof canvasDatagrid\n         * @name getVisibleCellByIndex\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Column index.\n         * @param {number} y Row index.\n         */\n        self.getVisibleCellByIndex = function (x, y) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === x && c.rowIndex === y;\n            })[0];\n        };\n        /**\n         * Gets the cell at grid pixel coordinate x and y.  Author's note.  This function ties drawing and events together.  This is a very complex function and is core to the component.\n         * @memberof canvasDatagrid\n         * @name getCellAt\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Number of pixels from the left.\n         * @param {number} y Number of pixels from the top.\n         */\n        self.getCellAt = function (x, y, useTouchScrollZones) {\n            function getBorder(entitiy) {\n                if (entitiy.x + entitiy.width - (self.attributes.borderResizeZone * 0.4) < x && entitiy.x + entitiy.width + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'r';\n                }\n                if (entitiy.x - (self.attributes.borderResizeZone * 0.4) < x && entitiy.x + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'l';\n                }\n                if (entitiy.y + entitiy.height - (self.attributes.borderResizeZone * 0.4) < y && entitiy.y + entitiy.height + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 'b';\n                }\n                if (entitiy.y - (self.attributes.borderResizeZone * 0.4) < y && entitiy.y + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 't';\n                }\n            }\n            if (!self.visibleCells) { return; }\n            var border,\n                tsz = useTouchScrollZones ? self.attributes.touchScrollZone : 0,\n                moveMode = self.attributes.borderDragBehavior === 'move',\n                i,\n                l = self.visibleCells.length,\n                moveBorder,\n                xBorderBehavior = moveMode ? self.cursorGrab : 'ew-resize',\n                yBorderBehavior = moveMode ? self.cursorGrab : 'ns-resize',\n                cell,\n                entitiy;\n            if (!self.visibleCells || !self.visibleCells.length) { return; }\n            self.hasFocus = true;\n            if (!(y < self.height\n                && y > 0\n                && x < self.width\n                && x > 0)) {\n                self.hasFocus = false;\n                return {\n                    dragContext: 'inherit',\n                    context: 'inherit'\n                };\n            }\n            for (i = 0; i < l; i += 1) {\n                cell = self.visibleCells[i];\n                // interactive dimensions of the cell.  used for touch \"over size\" zones\n                entitiy = {\n                    x: cell.x,\n                    y: cell.y,\n                    height: cell.height,\n                    width: cell.width\n                };\n                if (useTouchScrollZones && /(vertical|horizontal)-scroll-/.test(cell.style)) {\n                    entitiy.x -= tsz;\n                    entitiy.y -= tsz;\n                    entitiy.height += tsz;\n                    entitiy.width += tsz;\n                }\n                if (entitiy.x - self.style.cellBorderWidth < x\n                        && entitiy.x + entitiy.width + self.style.cellBorderWidth > x\n                        && entitiy.y - self.style.cellBorderWidth < y\n                        && entitiy.y + entitiy.height + self.style.cellBorderWidth > y) {\n                    if (/frozen-row-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'row-resize';\n                        return cell;\n                    }\n                    if (/frozen-column-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'col-resize';\n                        return cell;\n                    }\n                    if (/selection-handle-/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'crosshair';\n                        return cell;\n                    }\n                    if (/vertical-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'vertical-scroll-box';\n                        cell.context = 'vertical-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isVerticalScrollBar = true;\n                        if (y > self.scrollBox.box.v.y + self.scrollBox.scrollBoxHeight) {\n                            cell.dragContext = 'vertical-scroll-bottom';\n                            cell.context = 'vertical-scroll-bottom';\n                        } else if (y < self.scrollBox.box.v.y) {\n                            cell.dragContext = 'vertical-scroll-top';\n                            cell.context = 'vertical-scroll-top';\n                        }\n                        self.cursor = 'default';\n                        return cell;\n                    }\n                    if (/horizontal-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'horizontal-scroll-box';\n                        cell.context = 'horizontal-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isHorizontalScrollBar = true;\n                        if (x > self.scrollBox.box.h.x + self.scrollBox.scrollBoxWidth) {\n                            cell.dragContext = 'horizontal-scroll-right';\n                            cell.context = 'horizontal-scroll-right';\n                        } else if (x < self.scrollBox.box.h.x) {\n                            cell.dragContext = 'horizontal-scroll-left';\n                            cell.context = 'horizontal-scroll-left';\n                        }\n                        self.cursor = 'default';\n                        return cell;\n                    }\n                    border = getBorder(entitiy);\n                    // check if the border of this cell is the border of the selection and if so show move cursor in move mode\n                    moveBorder = moveMode && cell.selectionBorder && cell.selectionBorder.indexOf(border) !== -1;\n                    if (['l', 'r'].indexOf(border) !== -1\n                            && (self.attributes.allowColumnResize || moveBorder)\n                            && ((self.attributes.allowColumnResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && ((self.attributes.allowRowHeaderResize && (cell.isRowHeader || cell.isCorner)) || !(cell.isRowHeader && cell.isCorner))) {\n                        if (((cell.isColumnHeader || cell.isCorner) || (self.attributes.allowColumnResizeFromCell && cell.isNormal)) && border === 'r') {\n                            cell.context = 'ew-resize';\n                            cell.dragContext = 'ew-resize';\n                            return cell;\n                        }\n                        if (!(cell.isColumnHeader || cell.isCorner) && moveBorder) {\n                            cell.context = xBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (['t', 'b'].indexOf(border) !== -1\n                            && cell.rowIndex > -1\n                            && (self.attributes.allowRowResize || moveBorder)\n                            && ((self.attributes.allowRowResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && !cell.isColumnHeader) {\n                        if (((cell.isRowHeader || cell.isCorner) || (self.attributes.allowRowResizeFromCell && cell.isNormal)) && border === 'b') {\n                            cell.context = 'ns-resize';\n                            cell.dragContext = 'ns-resize';\n                            return cell;\n                        }\n                        if (!(cell.isRowHeader || cell.isCorner) && moveBorder) {\n                            cell.context = yBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (cell.style === 'columnHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'column-reorder';\n                        return cell;\n                    }\n                    if (cell.style === 'rowHeaderCell') {\n                        if ((self.attributes.rowGrabZoneSize + (cell.y - self.style.cellBorderWidth) < y)\n                                || !self.attributes.allowRowReordering) {\n                            cell.dragContext = 'cell';\n                            cell.context = 'cell';\n                        } else {\n                            cell.context = self.cursorGrab;\n                            cell.dragContext = 'row-reorder';\n                        }\n                        return cell;\n                    }\n                    if (cell.isGrid) {\n                        self.hasFocus = false;\n                        cell.dragContext = 'cell-grid';\n                        cell.context = 'cell-grid';\n                        return cell;\n                    }\n                    if (cell.style === 'tree-grid') {\n                        self.hasFocus = false;\n                        cell.dragContext = 'tree';\n                        cell.context = 'tree';\n                        return cell;\n                    }\n                    cell.dragContext = 'cell';\n                    cell.context = 'cell';\n                    return cell;\n                }\n            }\n            self.hasFocus = true;\n            self.cursor = 'default';\n            return {\n                dragContext: 'background',\n                context: 'background',\n                style: 'background',\n                isBackground: true\n            };\n        };\n        /**\n         * Gets the bounds of current selection. \n         * @returns {rect} selection.\n         * @memberof canvasDatagrid\n         * @name getSelectionBounds\n         * @method\n         */\n        self.getSelectionBounds = function () {\n            var low = {x: Infinity, y: Infinity},\n                high = {x: -Infinity, y: -Infinity};\n            self.selections.forEach(function (row, rowIndex) {\n                var maxCol, minCol;\n                low.y = rowIndex < low.y ? rowIndex : low.y;\n                high.y = rowIndex > high.y ? rowIndex : high.y;\n                maxCol = Math.max.apply(null, row);\n                minCol = Math.min.apply(null, row);\n                low.x = minCol < low.x ? minCol : low.x;\n                high.x = maxCol > high.x ? maxCol : high.x;\n            });\n            return {\n                top: low.y,\n                left: low.x,\n                bottom: high.y,\n                right: high.x\n            };\n        };\n        /**\n         * Returns an auto generated schema based on data structure.\n         * @memberof canvasDatagrid\n         * @name getSchemaFromData\n         * @method\n         * @tutorial schema\n         * @returns {schema} schema A schema based on the first item in the data array.\n         */\n        self.getSchemaFromData = function (d) {\n            d = d || self.data;\n            return Object.keys(d[0] || {' ': ''}).map(function mapEachSchemaColumn(key, index) {\n                var type = self.getBestGuessDataType(key, d),\n                    i = {\n                        name: key,\n                        title: isNaN(parseInt(key, 10)) ? key : self.integerToAlpha(key).toUpperCase(),\n                        index: index,\n                        type: type,\n                        filter: self.filter(type)\n                    };\n                if (self.storedSettings\n                        && self.storedSettings.visibility\n                        && self.storedSettings.visibility[i.name] !== undefined) {\n                    i.hidden = !self.storedSettings.visibility[i.name];\n                }\n                return i;\n            });\n        };\n        /**\n         * Clears the change log grid.changes that keeps track of changes to the data set.\n         * This does not undo changes or alter data it is simply a convince array to keep\n         * track of changes made to the data since last this method was called.\n         * @memberof canvasDatagrid\n         * @name clearChangeLog\n         * @method\n         */\n        self.clearChangeLog = function () {\n            self.changes = [];\n        };\n        /**\n         * Selects an area of the grid.\n         * @memberof canvasDatagrid\n         * @name selectArea\n         * @method\n         * @param {rect} bounds A rect object representing the selected values.\n         */\n        self.selectArea = function (bounds, ctrl) {\n            self.selectionBounds = bounds || self.selectionBounds;\n            var ev, x, y, s = self.getSchema();\n            if (!ctrl) {\n                self.selections = [];\n            }\n            if (self.selectionBounds.top < -1\n                    || self.selectionBounds.bottom > self.data.length\n                    || self.selectionBounds.left < -1\n                    || self.selectionBounds.right > s.length) {\n                throw new Error('Impossible selection area');\n            }\n            for (x = self.selectionBounds.top; x <= self.selectionBounds.bottom; x += 1) {\n                self.selections[x] = [];\n                for (y = self.selectionBounds.left; y <= self.selectionBounds.right; y += 1) {\n                    if (self.selections[x].indexOf(y) === -1) {\n                        self.selections[x].push(y);\n                    }\n                }\n            }\n            ev = {\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            };\n            Object.defineProperty(ev, 'selectedData', {\n                get: function () {\n                    return self.getSelectedData();\n                }\n            });\n            self.dispatchEvent('selectionchanged', ev);\n        };\n        /**\n         * Returns the maximum text width for a given column by column name.\n         * @memberof canvasDatagrid\n         * @name findColumnMaxTextLength\n         * @method\n         * @returns {number} The number of pixels wide the maximum width value in the selected column.\n         * @param {string} name The name of the column to calculate the value's width of.\n         */\n        self.findColumnMaxTextLength = function (name) {\n            var m = -Infinity;\n            if (name === 'cornerCell') {\n                self.ctx.font = self.style.rowHeaderCellFont;\n                return self.ctx.measureText((self.data.length + (self.attributes.showNewRow ? 1 : 0)).toString()).width\n                    + self.style.autosizePadding + self.style.autosizeHeaderCellPadding\n                    + self.style.rowHeaderCellPaddingRight\n                    + self.style.rowHeaderCellPaddingLeft\n                    + (self.attributes.tree ? self.style.treeArrowWidth\n                        + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight : 0);\n            }\n            self.getSchema().forEach(function (col) {\n                if (col.name !== name) { return; }\n                self.ctx.font = self.style.columnHeaderCellFont;\n                var t = self.ctx.measureText(col.title || col.name).width\n                    + self.style.headerCellPaddingRight\n                    + self.style.headerCellPaddingLeft;\n                m = t > m ? t : m;\n            });\n            self.data.forEach(function (row) {\n                self.ctx.font = self.style.cellFont;\n                var t = self.ctx.measureText(row[name]).width\n                    + self.style.cellPaddingRight\n                    + self.style.cellPaddingLeft + self.style.cellAutoResizePadding;\n                m = t > m ? t : m;\n            });\n            return m;\n        };\n        /**\n         * Gets the total width of all header columns.\n         * @memberof canvasDatagrid\n         * @name getHeaderWidth\n         * @method\n         */\n        self.getHeaderWidth = function () {\n            return self.getVisibleSchema().reduce(function (total, header) {\n                return total + (header.width || self.style.cellWidth);\n            }, 0);\n        };\n        self.formatters.string = function cellFormatterString(e) {\n            return e.cell.value !== undefined ? e.cell.value : '';\n        };\n        self.formatters.rowHeaderCell = self.formatters.string;\n        self.formatters.headerCell = self.formatters.string;\n        self.formatters.number = self.formatters.string;\n        self.formatters.int = self.formatters.string;\n        self.formatters.html = self.formatters.string;\n        self.sorters.string = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (a[columnName] === undefined || a[columnName] === null) {\n                    return 1;\n                }\n                if (b[columnName] === undefined || b[columnName] === null) {\n                    return 0;\n                }\n                if (asc) {\n                    if (!a[columnName].localeCompare) { return 1; }\n                    return a[columnName].localeCompare(b[columnName]);\n                }\n                if (!b[columnName].localeCompare) { return 1; }\n                return b[columnName].localeCompare(a[columnName]);\n            };\n        };\n        self.sorters.number = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return a[columnName] - b[columnName];\n                }\n                return b[columnName] - a[columnName];\n            };\n        };\n        self.sorters.date = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return new Date(a[columnName]).getTime()\n                        - new Date(b[columnName]).getTime();\n                }\n                return new Date(b[columnName]).getTime()\n                        - new Date(a[columnName]).getTime();\n            };\n        };\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// canvas-datagrid.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap e23045ed9de5bf1daab2","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.defaults = {\n            attributes: [\n                ['allowColumnReordering', true],\n                ['allowColumnResize', true],\n                ['allowColumnResizeFromCell', false],\n                ['allowFreezingRows', false],\n                ['allowFreezingColumns', false],\n                ['allowMovingSelection', true],\n                ['allowRowHeaderResize', true],\n                ['allowRowReordering', false],\n                ['allowRowResize', true],\n                ['allowRowResizeFromCell', false],\n                ['allowSorting', true],\n                ['autoGenerateSchema', false],\n                ['autoResizeColumns', false],\n                ['borderDragBehavior', 'none'],\n                ['borderResizeZone', 10],\n                ['clearSettingsOptionText', 'Clear saved settings'],\n                ['columnHeaderClickBehavior', 'sort'],\n                ['columnSelectorHiddenText', '&nbsp;&nbsp;&nbsp;'],\n                ['columnSelectorText', 'Add/Remove columns'],\n                ['columnSelectorVisibleText', '\\u2713'],\n                ['contextHoverScrollAmount', 2],\n                ['contextHoverScrollRateMs', 5],\n                ['copyHeadersOnSelectAll', true],\n                ['copyText', 'Copy'],\n                ['debug', false],\n                ['editable', true],\n                ['filterOptionText', 'Filter %s'],\n                ['filterTextPrefix', '(filtered) '],\n                ['globalRowResize', false],\n                ['hideColumnText', 'Hide %s'],\n                ['maxAutoCompleteItems', 200],\n                ['multiLine', false],\n                ['name', ''],\n                ['pageUpDownOverlap', 1],\n                ['pasteText', 'Paste'],\n                ['persistantSelectionMode', false],\n                ['removeFilterOptionText', 'Remove filter on %s'],\n                ['reorderDeadZone', 3],\n                ['resizeScrollZone', 20],\n                ['rowGrabZoneSize', 5],\n                ['saveAppearance', true],\n                ['scrollAnimationPPSThreshold', 0.75],\n                ['scrollPointerLock', false],\n                ['scrollRepeatRate', 75],\n                ['selectionFollowsActiveCell', false],\n                ['selectionHandleBehavior', 'none'],\n                ['selectionMode', 'cell'],\n                ['selectionScrollIncrement', 20],\n                ['selectionScrollZone', 20],\n                ['showClearSettingsOption', true],\n                ['showColumnHeaders', true],\n                ['showColumnSelector', true],\n                ['showCopy', false],\n                ['showFilter', true],\n                ['showNewRow', false],\n                ['showOrderByOption', true],\n                ['showOrderByOptionTextAsc', 'Order by %s ascending'],\n                ['showOrderByOptionTextDesc', 'Order by %s descending'],\n                ['showPaste', false],\n                ['showPerformance', false],\n                ['showRowHeaders', true],\n                ['showRowNumbers', true],\n                ['snapToRow', false],\n                ['touchContextMenuTimeMs', 800],\n                ['touchDeadZone', 3],\n                ['touchEasingMethod', 'easeOutQuad'],\n                ['touchReleaseAcceleration', 1000],\n                ['touchReleaseAnimationDurationMs', 2000],\n                ['touchScrollZone', 20],\n                ['touchSelectHandleZone', 20],\n                ['touchZoomSensitivity', 0.005],\n                ['touchZoomMin', 0.5],\n                ['touchZoomMax', 1.75],\n                ['maxPixelRatio', 2],\n                ['tree', false],\n                ['treeHorizontalScroll', false]\n            ],\n            styles: [\n                ['activeCellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['activeCellBorderWidth', 1],\n                ['activeCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellFont', '16px sans-serif'],\n                ['activeCellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['activeCellOverlayBorderWidth', 1],\n                ['activeCellPaddingBottom', 5],\n                ['activeCellPaddingLeft', 5],\n                ['activeCellPaddingRight', 7],\n                ['activeCellPaddingTop', 5],\n                ['activeCellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['activeCellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['activeColumnHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeColumnHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeRowHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeRowHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['autocompleteBottomMargin', 60],\n                ['autosizeHeaderCellPadding', 8],\n                ['autosizePadding', 5],\n                ['cellAutoResizePadding', 13],\n                ['cellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['cellBorderWidth', 1],\n                ['cellColor', 'rgba(0, 0, 0, 1)'],\n                ['cellFont', '16px sans-serif'],\n                ['cellGridHeight', 250],\n                ['cellHeight', 24],\n                ['cellHeightWithChildGrid', 150],\n                ['cellHorizontalAlignment', 'left'],\n                ['cellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['cellPaddingBottom', 5],\n                ['cellPaddingLeft', 5],\n                ['cellPaddingRight', 7],\n                ['cellPaddingTop', 5],\n                ['cellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['cellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['cellVerticalAlignment', 'center'],\n                ['cellWidth', 250],\n                ['cellWidthWithChildGrid', 250],\n                ['childContextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['childContextMenuArrowHTML', '&#x25BA;'],\n                ['childContextMenuMarginLeft', -11],\n                ['childContextMenuMarginTop', -6],\n                ['columnHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellBorderColor', 'rgba(172, 172, 172, 1)'],\n                ['columnHeaderCellBorderWidth', 1],\n                ['columnHeaderCellCapBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellCapBorderColor', 'rgba(172, 172, 172, 1)'],\n                ['columnHeaderCellCapBorderWidth', 1],\n                ['columnHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['columnHeaderCellFont', '16px sans-serif'],\n                ['columnHeaderCellHeight', 25],\n                ['columnHeaderCellHorizontalAlignment', 'left'],\n                ['columnHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['columnHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['columnHeaderCellPaddingBottom', 5],\n                ['columnHeaderCellPaddingLeft', 5],\n                ['columnHeaderCellPaddingRight', 7],\n                ['columnHeaderCellPaddingTop', 5],\n                ['columnHeaderCellVerticalAlignment', 'center'],\n                ['columnHeaderOrderByArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['columnHeaderOrderByArrowBorderWidth', 1],\n                ['columnHeaderOrderByArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['columnHeaderOrderByArrowHeight', 8],\n                ['columnHeaderOrderByArrowMarginLeft', 0],\n                ['columnHeaderOrderByArrowMarginRight', 5],\n                ['columnHeaderOrderByArrowMarginTop', 6],\n                ['columnHeaderOrderByArrowWidth', 13],\n                ['contextFilterButtonBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterButtonBorderRadius', '3px'],\n                ['contextFilterButtonHTML', '&#x25BC;'],\n                ['contextFilterInputBackground', 'rgba(255,255,255,1)'],\n                ['contextFilterInputBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterInputBorderRadius', '0'],\n                ['contextFilterInputColor', 'rgba(0,0,0,1)'],\n                ['contextFilterInputFontFamily', 'sans-serif'],\n                ['contextFilterInputFontSize', '14px'],\n                ['contextFilterInvalidRegExpBackground', 'rgba(180, 6, 1, 1)'],\n                ['contextFilterInvalidRegExpColor', 'rgba(255, 255, 255, 1)'],\n                ['contextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuArrowDownHTML', '&#x25BC;'],\n                ['contextMenuArrowUpHTML', '&#x25B2;'],\n                ['contextMenuBackground', 'rgba(240, 240, 240, 1)'],\n                ['contextMenuBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextMenuBorderRadius', '3px'],\n                ['contextMenuChildArrowFontSize', '12px'],\n                ['contextMenuColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuFilterButtonFontFamily', 'sans-serif'],\n                ['contextMenuFilterButtonFontSize', '10px'],\n                ['contextMenuFilterInvalidExpresion', 'rgba(237, 155, 156, 1)'],\n                ['contextMenuFontFamily', 'sans-serif'],\n                ['contextMenuFontSize', '16px'],\n                ['contextMenuHoverBackground', 'rgba(182, 205, 250, 1)'],\n                ['contextMenuHoverColor', 'rgba(43, 48, 153, 1)'],\n                ['contextMenuItemBorderRadius', '3px'],\n                ['contextMenuItemMargin', '2px'],\n                ['contextMenuLabelDisplay', 'inline-block'],\n                ['contextMenuLabelMargin', '0 3px 0 0'],\n                ['contextMenuLabelMaxWidth', '700px'],\n                ['contextMenuLabelMinWidth', '75px'],\n                ['contextMenuMarginLeft', 3],\n                ['contextMenuMarginTop', -3],\n                ['contextMenuOpacity', '0.98'],\n                ['contextMenuPadding', '2px'],\n                ['contextMenuWindowMargin', 30],\n                ['contextMenuZIndex', 10000],\n                ['cornerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cornerCellBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['display', 'inline-block'],\n                ['editCellBackgroundColor', 'white'],\n                ['editCellBorder', 'solid 1px rgba(110, 168, 255, 1)'],\n                ['editCellBoxShadow', '0 2px 5px rgba(0,0,0,0.4)'],\n                ['editCellColor', 'black'],\n                ['editCellFontFamily', 'sans-serif'],\n                ['editCellFontSize', '16px'],\n                ['editCellPaddingLeft', 4],\n                ['editCellZIndex', 10000],\n                ['frozenMarkerHoverColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerHoverBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerActiveColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerActiveBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerColor', 'rgba(222, 222, 222, 1)'],\n                ['frozenMarkerBorderColor', 'rgba(168, 168, 168, 1)'],\n                ['frozenMarkerBorderWidth', 1],\n                ['frozenMarkerWidth', 2],\n                ['gridBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['gridBorderCollapse', 'collapse'],\n                ['gridBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['gridBorderWidth', 1],\n                ['height', 'auto'],\n                ['maxHeight', 'inherit'],\n                ['maxWidth', 'inherit'],\n                ['minColumnWidth', 45],\n                ['minHeight', 'inherit'],\n                ['minRowHeight', 24],\n                ['minWidth', 'inherit'],\n                ['mobileContextMenuMargin', 10],\n                ['mobileEditInputHeight', 30],\n                ['mobileEditFontFamily', 'sans-serif'],\n                ['mobileEditFontSize', '16px'],\n                ['moveOverlayBorderWidth', 1],\n                ['moveOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['moveOverlayBorderSegments', '12, 7'],\n                ['name', 'default'],\n                ['reorderMarkerBackgroundColor', 'rgba(0, 0, 0, 0.1)'],\n                ['reorderMarkerBorderColor', 'rgba(0, 0, 0, 0.2)'],\n                ['reorderMarkerBorderWidth', 1.25],\n                ['reorderMarkerIndexBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['reorderMarkerIndexBorderWidth', 2.75],\n                ['rowHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['rowHeaderCellBorderColor', 'rgba(200, 200, 200, 1)'],\n                ['rowHeaderCellBorderWidth', 1],\n                ['rowHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellFont', '16px sans-serif'],\n                ['rowHeaderCellHeight', 25],\n                ['rowHeaderCellHorizontalAlignment', 'left'],\n                ['rowHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['rowHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['rowHeaderCellPaddingBottom', 5],\n                ['rowHeaderCellPaddingLeft', 5],\n                ['rowHeaderCellPaddingRight', 5],\n                ['rowHeaderCellPaddingTop', 5],\n                ['rowHeaderCellSelectedBackgroundColor', 'rgba(217, 217, 217, 1)'],\n                ['rowHeaderCellSelectedColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellVerticalAlignment', 'center'],\n                ['rowHeaderCellWidth', 57],\n                ['scrollBarActiveColor', 'rgba(125, 125, 125, 1)'],\n                ['scrollBarBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarBorderWidth', 0.5],\n                ['scrollBarBoxBorderRadius', 4.125],\n                ['scrollBarBoxColor', 'rgba(192, 192, 192, 1)'],\n                ['scrollBarBoxMargin', 2],\n                ['scrollBarBoxMinSize', 15],\n                ['scrollBarBoxWidth', 8],\n                ['scrollBarCornerBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarCornerBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarWidth', 11],\n                ['selectionHandleBorderColor', 'rgba(255, 255, 255, 1)'],\n                ['selectionHandleBorderWidth', 1.5],\n                ['selectionHandleColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionHandleSize', 8],\n                ['selectionHandleType', 'square'],\n                ['selectionOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionOverlayBorderWidth', 1],\n                ['treeArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['treeArrowBorderWidth', 1],\n                ['treeArrowClickRadius', 5],\n                ['treeArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['treeArrowHeight', 8],\n                ['treeArrowMarginLeft', 0],\n                ['treeArrowMarginRight', 5],\n                ['treeArrowMarginTop', 6],\n                ['treeArrowWidth', 13],\n                ['treeGridHeight', 250],\n                ['width', 'auto']\n            ]\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/defaults.js\n// module id = 0\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true, evil: true*/\n/*globals Reflect: false, HTMLElement: true, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([\n    './component',\n    './defaults',\n    './draw',\n    './events',\n    './touch',\n    './intf',\n    './contextMenu',\n    './dom',\n    './publicMethods'\n], function context(component) {\n    'use strict';\n    component = component();\n    var modules = Array.prototype.slice.call(arguments);\n    function Grid(args) {\n        args = args || {};\n        var self = {};\n        self.isComponent = args.component === undefined;\n        self.isChildGrid = args.parentNode && /canvas-datagrid-(cell|tree)/.test(args.parentNode.nodeType);\n        if (self.isChildGrid) {\n            self.intf = {};\n        } else {\n            self.intf = self.isComponent ? eval('Reflect.construct(HTMLElement, [], new.target)')\n                : document.createElement('canvas');\n        }\n        self.args = args;\n        self.intf.args = args;\n        self.applyComponentStyle = component.applyComponentStyle;\n        self.hyphenateProperty = component.hyphenateProperty;\n        self.dehyphenateProperty = component.dehyphenateProperty;\n        self.createGrid = function grid(args) {\n            args.component = false;\n            return new Grid(args);\n        };\n        modules.forEach(function (module) {\n            module(self);\n        });\n        if (self.isChildGrid) {\n            self.shadowRoot = args.parentNode.shadowRoot;\n            self.parentNode = args.parentNode;\n        } else if (self.intf.createShadowRoot) {\n            self.shadowRoot = self.intf.attachShadow({mode: 'open'});\n            self.parentNode = self.shadowRoot;\n        } else {\n            self.parentNode = self.intf;\n        }\n        self.init();\n        return self.intf;\n    }\n    if (window.HTMLElement) {\n        Grid.prototype = Object.create(window.HTMLElement.prototype);\n    }\n    // export web component\n    if (window.customElements) {\n        Grid.observedAttributes = component.getObservableAttributes();\n        Grid.prototype.disconnectedCallback = component.disconnectedCallback;\n        Grid.prototype.attributeChangedCallback = component.attributeChangedCallback;\n        Grid.prototype.connectedCallback = component.connectedCallback;\n        Grid.prototype.adoptedCallback = component.adoptedCallback;\n        window.customElements.define('canvas-datagrid', Grid);\n    }\n    // export global\n    if (window && !window.canvasDatagrid && !window.require) {\n        window.canvasDatagrid = function (args) { return new Grid(args); };\n    }\n    // export amd loader\n    module.exports = function grid(args) {\n        args = args || {};\n        var i, tKeys = ['style', 'formatters', 'sorters', 'filters',\n                    'treeGridAttributes', 'cellGridAttributes', 'data', 'schema'];\n        if (window.customElements && document.body.createShadowRoot) {\n            i = document.createElement('canvas-datagrid');\n            Object.keys(args).forEach(function (argKey) {\n                // set data and parentNode after everything else\n                if (argKey === 'data') { return; }\n                if (argKey === 'parentNode') { return; }\n                // top level keys in args\n                if (tKeys.indexOf(argKey) !== -1) {\n                    tKeys.forEach(function (tKey) {\n                        if (args[tKey] === undefined || tKey !== argKey) { return; }\n                        if (['formatters', 'sorters', 'filters'].indexOf(argKey) !== -1) {\n                            if (typeof args[tKey] === 'object' && args[tKey] !== null) {\n                                Object.keys(args[tKey]).forEach(function (sKey) {\n                                    i[tKey][sKey] = args[tKey][sKey];\n                                });\n                            }\n                        } else {\n                            i[tKey] = args[tKey];\n                        }\n                    });\n                    return;\n                }\n                // all others are attribute level keys\n                i.attributes[argKey] = args[argKey];\n            });\n            if (args.data) {\n                i.data = args.data;\n            }\n            // add to the dom very last to avoid redraws\n            if (args.parentNode) {\n                args.parentNode.appendChild(i);\n            }\n            return i;\n        }\n        args.component = false;\n        i = new Grid(args);\n        if (args.parentNode && args.parentNode.appendChild) {\n            args.parentNode.appendChild(i);\n        }\n        return i;\n    };\n    return module.exports;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/main.js\n// module id = 1\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine(['./defaults'], function (defaults) {\n    'use strict';\n    return function () {\n        var typeMap, component = {};\n        component.dehyphenateProperty = function hyphenateProperty(prop) {\n            prop = prop.replace('--cdg-', '');\n            var p = '', nextLetterCap;\n            Array.prototype.forEach.call(prop, function (char) {\n                if (nextLetterCap) {\n                    nextLetterCap = false;\n                    p += char.toUpperCase();\n                    return;\n                }\n                if (char === '-') {\n                    nextLetterCap = true;\n                    return;\n                }\n                p += char;\n            });\n            return p;\n        };\n        component.hyphenateProperty = function hyphenateProperty(prop, cust) {\n            var p = '';\n            Array.prototype.forEach.call(prop, function (char) {\n                if (char === char.toUpperCase()) {\n                    p += '-' + char.toLowerCase();\n                    return;\n                }\n                p += char;\n            });\n            return (cust ? '--cdg-' : '') + p;\n        };\n        function getDefaultItem(base, item) {\n            var i = {},\n                r;\n            defaults(i);\n            r = i.defaults[base].filter(function (i) {\n                return i[0].toLowerCase() === item.toLowerCase()\n                    || component.hyphenateProperty(i[0]) === item.toLowerCase()\n                    || component.hyphenateProperty(i[0], true) === item.toLowerCase();\n            })[0];\n            return r;\n        }\n        component.applyComponentStyle = function (supressChangeAndDrawEvents, intf) {\n            var cStyle = window.getComputedStyle(intf.tagName === 'CANVAS-DATAGRID' ? intf : intf.canvas, null),\n                defs = {};\n            intf.computedStyle = cStyle;\n            defaults(defs);\n            defs = defs.defaults.styles;\n            defs.forEach(function (def) {\n                var val;\n                val = cStyle.getPropertyValue(component.hyphenateProperty(def[0], true));\n                if (val === \"\") {\n                    val = cStyle.getPropertyValue(component.hyphenateProperty(def[0], false));\n                }\n                if (val !== \"\" && typeof val === 'string') {\n                    intf.setStyleProperty(def[0], typeMap[typeof def[1]](val\n                        .replace(/^\\s+/, '').replace(/\\s+$/, ''), def[1]), true);\n                }\n            });\n            if (!supressChangeAndDrawEvents && intf.dispatchEvent) {\n                requestAnimationFrame(function () { intf.resize(true); });\n                intf.dispatchEvent('stylechanged', intf.style);\n            }\n        };\n        typeMap = {\n            data: function (strData) {\n                try {\n                    return JSON.parse(strData);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid data.');\n                }\n            },\n            schema: function (strSchema) {\n                try {\n                    return JSON.parse(strSchema);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid schema attribute.');\n                }\n            },\n            number: function (strNum, def) {\n                var n = parseInt(strNum, 10);\n                return isNaN(n) ? def : n;\n            },\n            boolean: function (strBool) {\n                return (/true/i).test(strBool);\n            },\n            string: function (str) {\n                return str;\n            }\n        };\n        component.getObservableAttributes = function () {\n            var i = {}, attrs = ['data', 'schema', 'style', 'className', 'name'];\n            defaults(i);\n            i.defaults.attributes.forEach(function (attr) {\n                attrs.push(attr[0].toLowerCase());\n            });\n            return attrs;\n        };\n        component.disconnectedCallback = function () {\n            this.connected = false;\n        };\n        component.connectedCallback = function () {\n            var intf = this;\n            intf.connected = true;\n            component.observe(intf);\n            component.applyComponentStyle(true, intf);\n            intf.resize(true);\n        };\n        component.adoptedCallback = function () {\n            this.resize();\n        };\n        component.attributeChangedCallback = function (attrName, oldVal, newVal) {\n            var tfn, intf = this, def;\n            if (attrName === 'style') {\n                component.applyComponentStyle(false, intf);\n                return;\n            }\n            if (attrName === 'data') {\n                if (intf.type === 'application/x-canvas-datagrid') {\n                    intf.type = 'application/json+x-canvas-datagrid';\n                }\n                intf.args.data = newVal;\n                return;\n            }\n            if (attrName === 'schema') {\n                intf.args.schema = typeMap.schema(newVal);\n                return;\n            }\n            if (attrName === 'name') {\n                intf.name = newVal;\n                return;\n            }\n            if (attrName === 'class' || attrName === 'className') {\n                return;\n            }\n            def = getDefaultItem('attributes', attrName);\n            if (def) {\n                tfn = typeMap[typeof def[1]];\n                intf.attributes[def[0]] = tfn(newVal);\n                return;\n            }\n            if (/^on/.test(attrName)) {\n                intf.addEventListener('on' + attrName, function (e) {\n                    eval(newVal);\n                });\n            }\n            return;\n        };\n        component.observe = function (intf) {\n            var observer;\n            if (!window.MutationObserver) { return; }\n            intf.applyComponentStyle = function () { component.applyComponentStyle(false, intf); intf.resize(); };\n            /**\n             * Applies the computed css styles to the grid.  In some browsers, changing directives in attached style sheets does not automatically update the styles in this component.  It is necessary to call this method to update in these cases.\n             * @memberof canvasDatagrid\n             * @name applyComponentStyle\n             * @method\n             */\n            observer = new window.MutationObserver(function (mutations) {\n                var checkInnerHTML, checkStyle;\n                Array.prototype.forEach.call(mutations, function (mutation) {\n                    if (mutation.attributeName === 'class'\n                            || mutation.attributeName === 'style') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.target.parentNode\n                            && mutation.target.parentNode.nodeName === 'STYLE') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.addedNodes.length > 0 || mutation.type === 'characterData') {\n                        checkInnerHTML = true;\n                    }\n                });\n                if (checkStyle) {\n                    intf.applyComponentStyle(false, intf);\n                }\n                if (checkInnerHTML) {\n                    if (intf.type === 'application/x-canvas-datagrid') {\n                        intf.type = 'application/json+x-canvas-datagrid';\n                    }\n                    intf.data = intf.innerHTML;\n                }\n            });\n            observer.observe(intf, { characterData: true, childList: true, attributes: true, subtree: true });\n            Array.prototype.forEach.call(document.querySelectorAll('style'), function (el) {\n                observer.observe(el, { characterData: true, childList: true, attributes: true, subtree: true });\n            });\n        };\n        return component;\n    };\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/component.js\n// module id = 2\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals XMLSerializer: false, define: true, Blob: false, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var perfCounters = [],\n            drawCount = 0,\n            perfWindowSize = 300,\n            entityCount = [],\n            scrollDebugCounters = [],\n            touchPPSCounters = [];\n        self.htmlImageCache = {};\n        // more heavyweight version than fillArray defined in intf.js\n        function fillArray(low, high, step, def) {\n            step = step || 1;\n            var i = [], x;\n            for (x = low; x <= high; x += step) {\n                i[x] = def === undefined ? x : (typeof def === 'function' ? def(x) : def);\n            }\n            return i;\n        }\n        function drawPerfLine(w, h, x, y, perfArr, arrIndex, max, color, useAbs) {\n            var i = w / perfArr.length,\n                r = h / max;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x, y + h);\n            perfArr.forEach(function (n) {\n                var val = (arrIndex === undefined ? n : n[arrIndex]),\n                    cx,\n                    cy;\n                if (useAbs) {\n                    val = Math.abs(val);\n                }\n                cx = x + i;\n                cy = y + h - (val * r);\n                self.ctx.lineTo(cx, cy);\n                x += i;\n            });\n            self.ctx.moveTo(x + w, y + h);\n            self.ctx.strokeStyle = color;\n            self.ctx.stroke();\n        }\n        function drawOnAllImagesLoaded() {\n            var loaded = true;\n            Object.keys(self.htmlImageCache).forEach(function (html) {\n                if (!self.htmlImageCache[html].complete) {\n                    loaded = false;\n                }\n            });\n            if (loaded) {\n                self.draw();\n            }\n        }\n        function drawHtml(cell) {\n            var img,\n                v = cell.innerHTML || cell.formattedValue,\n                x = cell.x + self.canvasOffsetLeft,\n                y = cell.y + self.canvasOffsetTop;\n            if (self.htmlImageCache[v]) {\n                img = self.htmlImageCache[v];\n                if (img.height !== cell.height || img.width !== cell.width) {\n                    // height and width of the cell has changed, invalidate cache\n                    self.htmlImageCache[v] = undefined;\n                } else {\n                    if (!img.complete) {\n                        return;\n                    }\n                    return self.ctx.drawImage(img, x, y);\n                }\n            }\n            img = new Image(cell.width, cell.height);\n            self.htmlImageCache[v] = img;\n            img.onload = function () {\n                self.ctx.drawImage(img, x, y);\n                drawOnAllImagesLoaded();\n            };\n            img.src = 'data:image/svg+xml;base64,' + btoa(\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + cell.width + '\" height=\"' + cell.height + '\">\\n' +\n                    '<foreignObject class=\"node\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\\n' +\n                    '<body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;padding:0;\">\\n' +\n                    v + '\\n' +\n                    '</body>' +\n                    '</foreignObject>\\n' +\n                    '</svg>\\n'\n            );\n        }\n        function drawOrderByArrow(x, y) {\n            var mt = self.style.columnHeaderOrderByArrowMarginTop * self.scale,\n                ml = self.style.columnHeaderOrderByArrowMarginLeft * self.scale,\n                mr = self.style.columnHeaderOrderByArrowMarginRight * self.scale,\n                aw = self.style.columnHeaderOrderByArrowWidth * self.scale,\n                ah = self.style.columnHeaderOrderByArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.columnHeaderOrderByArrowColor;\n            self.ctx.strokeStyle = self.style.columnHeaderOrderByArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.orderDirection === 'asc') {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y + ah);\n                self.ctx.lineTo(x + aw, y + ah);\n                self.ctx.lineTo(x + (aw * 0.5), y);\n                self.ctx.lineTo(x, y + ah);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function drawTreeArrow(cell, x, y) {\n            var mt = self.style.treeArrowMarginTop * self.scale,\n                mr = self.style.treeArrowMarginRight * self.scale,\n                ml = self.style.treeArrowMarginLeft * self.scale,\n                aw = self.style.treeArrowWidth * self.scale,\n                ah = self.style.treeArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.treeArrowColor;\n            self.ctx.strokeStyle = self.style.treeArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.openChildren[cell.rowIndex]) {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y);\n                self.ctx.lineTo(x + ah, y + (aw * 0.5));\n                self.ctx.lineTo(x, y + aw);\n                self.ctx.lineTo(x, y);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function radiusRect(x, y, w, h, radius) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            var r = x + w, b = y + h;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x + radius, y);\n            self.ctx.lineTo(r - radius, y);\n            self.ctx.quadraticCurveTo(r, y, r, y + radius);\n            self.ctx.lineTo(r, y + h - radius);\n            self.ctx.quadraticCurveTo(r, b, r - radius, b);\n            self.ctx.lineTo(x + radius, b);\n            self.ctx.quadraticCurveTo(x, b, x, b - radius);\n            self.ctx.lineTo(x, y + radius);\n            self.ctx.quadraticCurveTo(x, y, x + radius, y);\n        }\n        function fillRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillRect(x, y, w, h);\n        }\n        function strokeRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.strokeRect(x, y, w, h);\n        }\n        function fillText(text, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillText(text, x, y);\n        }\n        function fillCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.fill();\n        }\n        function strokeCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.stroke();\n        }\n        function clipFrozenArea(mode) {\n            // 0 both, 1 rows, 2 cols\n            // self.lastFrozenColumnPixel;\n            // self.lastFrozenRowPixel;\n            self.ctx.beginPath();\n            if (mode === 0) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, self.lastFrozenRowPixel);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 1) {\n                self.ctx.moveTo(0, self.lastFrozenRowPixel);\n                self.ctx.lineTo(0, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 2) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, 0);\n                self.ctx.lineTo(self.width, 0);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n            }\n            self.ctx.clip();\n        }\n        function fillHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return fillCircle(x, y, r * 0.5);\n            }\n            fillRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function strokeHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return strokeCircle(x, y, r * 0.5);\n            }\n            strokeRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function addselectionHandle(c, pos) {\n            var hw = self.style.selectionHandleSize,\n                p = {\n                    tr: function () {\n                        fillHandle(c.x + c.width, c.y, hw);\n                        strokeHandle(c.x + c.width, c.y, hw);\n                    },\n                    br: function () {\n                        fillHandle(c.x + c.width, c.y + c.height, hw);\n                        strokeHandle(c.x + c.width, c.y + c.height, hw);\n                    },\n                    tl: function () {\n                        fillHandle(c.x, c.y, hw);\n                        strokeHandle(c.x, c.y, hw);\n                    },\n                    bl: function () {\n                        fillHandle(c.x, c.y + c.height, hw);\n                        strokeHandle(c.x, c.y + c.height, hw);\n                    }\n                };\n            p[pos]();\n        }\n        function addBorderLine(c, pos) {\n            self.ctx.beginPath();\n            var p = {\n                t: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                },\n                r: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                b: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                l: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                }\n            };\n            p[pos]();\n            self.ctx.stroke();\n        }\n        function addEllipsis(text, width) {\n            var c, w = 0;\n            if (self.ellipsisCache[text] && self.ellipsisCache[text][width]) {\n                return self.ellipsisCache[text][width];\n            }\n            //TODO Add ellipsis back when there is a fast way to do it\n            w = self.ctx.measureText(text).width;\n            self.ellipsisCache[text] = self.ellipsisCache[text] || {};\n            c = {value: text, width: w};\n            self.ellipsisCache[text][width] = c;\n            return c;\n        }\n        function drawText(cell) {\n            var paddingLeft = self.style[cell.style + 'PaddingLeft'] * self.scale,\n                paddingTop = self.style[cell.style + 'PaddingTop'] * self.scale,\n                paddingRight = self.style[cell.style + 'PaddingRight'] * self.scale,\n                paddingBottom = self.style[cell.style + 'PaddingBottom'] * self.scale,\n                vPos = paddingTop + cell.height - (cell.height * 0.5),\n                hPos = paddingLeft + cell.treeArrowWidth + cell.orderByArrowWidth;\n            cell.text = addEllipsis(cell.formattedValue, cell.width - paddingRight - paddingLeft);\n            cell.text.height = cell.fontHeight;\n            if (cell.horizontalAlignment === 'right') {\n                hPos = cell.width - cell.text.width - paddingRight;\n            } else if (cell.horizontalAlignment === 'center') {\n                hPos = (cell.width / 2) - (cell.text.width / 2);\n            }\n            if (cell.verticalAlignment === 'top') {\n                vPos = paddingTop + cell.text.height;\n            } else if (cell.verticalAlignment === 'bottom') {\n                vPos = cell.height - paddingBottom - cell.text.height;\n            }\n            cell.text.x = cell.x + hPos;\n            cell.text.y = cell.y + vPos;\n            fillText(cell.text.value, cell.text.x, cell.text.y);\n        }\n        function getFrozenColumnsWidth() {\n            var w = 0,\n                s = self.getVisibleSchema(),\n                x = 0,\n                n = Math.min(self.frozenColumn, s.length),\n                column;\n            while (x < n) {\n                column = s[self.orders.columns[x]];\n                w += ((self.sizes.columns[x] || column.width || self.style.cellWidth) * self.scale);\n                x += 1;\n            }\n            return w;\n        }\n        /**\n         * Redraws the grid. No matter what the change, this is the only method required to refresh everything.\n         * @memberof canvasDatagrid\n         * @name draw\n         * @method\n         */\n         // r = literal row index\n         // rd = row data array\n         // i = user order index\n         // o = literal data index\n         // y = y drawing cursor\n         // x = x drawing cursor\n         // s = visible schema array\n         // cx = current x drawing cursor sub calculation var\n         // cy = current y drawing cursor sub calculation var\n         // a = static cell (like corner cell)\n         // p = perf counter\n         // l = data length\n         // u = current cell\n         // h = current height\n         // w = current width\n        self.draw = function (internal) {\n            if (self.dispatchEvent('beforedraw', {})) { return; }\n            if (!self.isChildGrid && (!self.height || !self.width)) {\n                return;\n            }\n            if (self.isChildGrid && internal) {\n                requestAnimationFrame(self.parentGrid.draw);\n                return;\n            }\n            if (self.intf.visible === false) {\n                return;\n            }\n            // initial values\n            var checkScrollHeight, rowHeaderCell, p, cx, cy, treeGrid, rowOpen,\n                rowHeight, cornerCell, y, x, c, h, w, s, r, rd, aCell,\n                data = (self.data || []),\n                bc = self.style.gridBorderCollapse === 'collapse',\n                selectionBorders = [],\n                moveBorders = [],\n                selectionHandles = [],\n                rowHeaders = [],\n                frozenColumnWidths = getFrozenColumnsWidth(),\n                l = data.length,\n                u = self.currentCell || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                cellHeight = self.style.cellHeight;\n            drawCount += 1;\n            p = performance.now();\n            self.visibleRowHeights = [];\n            // if data length has changed, there is no way to know\n            if (data.length > self.orders.rows.length) {\n                self.createRowOrders();\n            }\n            function drawScrollBars() {\n                var drawCorner,\n                    en = self.scrollBox.entities,\n                    m = (self.style.scrollBarBoxMargin * 2);\n                self.ctx.strokeStyle = self.style.scrollBarBorderColor;\n                self.ctx.lineWidth = self.style.scrollBarBorderWidth;\n                en.horizontalBox.x = rowHeaderCellWidth + self.style.scrollBarBoxMargin\n                    + ((en.horizontalBar.width - self.scrollBox.scrollBoxWidth)\n                        * (self.scrollBox.scrollLeft / self.scrollBox.scrollWidth));\n                en.verticalBox.y = columnHeaderCellHeight + self.style.scrollBarBoxMargin\n                    + ((en.verticalBar.height - self.scrollBox.scrollBoxHeight)\n                        * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight));\n                if (self.scrollBox.horizontalBarVisible) {\n                    self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                    fillRect(en.horizontalBar.x, en.horizontalBar.y, en.horizontalBar.width + m, en.horizontalBar.height);\n                    strokeRect(en.horizontalBar.x, en.horizontalBar.y, en.horizontalBar.width + m, en.horizontalBar.height);\n                    self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                    if (/horizontal/.test(u.context)) {\n                        self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                    }\n                    radiusRect(en.horizontalBox.x, en.horizontalBox.y,\n                        en.horizontalBox.width, en.horizontalBox.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                    drawCorner = true;\n                    self.visibleCells.unshift(en.horizontalBar);\n                    self.visibleCells.unshift(en.horizontalBox);\n                }\n                if (self.scrollBox.verticalBarVisible) {\n                    self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                    fillRect(en.verticalBar.x, en.verticalBar.y, en.verticalBar.width, en.verticalBar.height + m);\n                    strokeRect(en.verticalBar.x, en.verticalBar.y, en.verticalBar.width, en.verticalBar.height + m);\n                    self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                    if (/vertical/.test(u.context)) {\n                        self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                    }\n                    radiusRect(en.verticalBox.x, en.verticalBox.y, en.verticalBox.width,\n                        en.verticalBox.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                    drawCorner = true;\n                    self.visibleCells.unshift(en.verticalBar);\n                    self.visibleCells.unshift(en.verticalBox);\n                }\n                if (drawCorner) {\n                    //corner\n                    self.ctx.strokeStyle = self.style.scrollBarCornerBorderColor;\n                    self.ctx.fillStyle = self.style.scrollBarCornerBackgroundColor;\n                    radiusRect(en.corner.x, en.corner.y, en.corner.width, en.corner.height, 0);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                    self.visibleCells.unshift(en.corner);\n                }\n            }\n            function createHandlesOverlayArray(cell) {\n                if (self.attributes.allowMovingSelection || self.mobile) {\n                    if (cell.selectionBorderTop && cell.selectionBorderRight && self.mobile) {\n                        selectionHandles.push([cell, 'tr']);\n                        cell.selectionHandle = 'tr';\n                    }\n                    if (cell.selectionBorderTop && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'tl']);\n                        cell.selectionHandle = 'tl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'bl']);\n                        cell.selectionHandle = 'bl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderRight\n                            && (self.attributes.selectionHandleBehavior !== 'none' || self.mobile)) {\n                        selectionHandles.push([cell, 'br']);\n                        cell.selectionHandle = 'br';\n                    }\n                }\n            }\n            function createBorderOverlayArray(cell, drawArray, propPrefix, offsetPoint) {\n                offsetPoint = offsetPoint || {x: 0, y: 0};\n                cell.selectionBorder = '';\n                if (!cell.isRowHeader\n                        && self.selections[cell.rowIndex + -offsetPoint.y]\n                        && self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) !== -1) {\n                    if ((!self.selections[cell.rowIndex - 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex - 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1\n                            || cell.rowIndex === 0)\n                            && !cell.isHeader) {\n                        drawArray.push([cell, 't']);\n                        cell[propPrefix + 'BorderTop'] = true;\n                        cell[propPrefix + 'Border'] += 't';\n                    }\n                    if (!self.selections[cell.rowIndex + 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex + 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'b']);\n                        cell[propPrefix + 'BorderBottom'] = true;\n                        cell[propPrefix + 'Border'] += 'b';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === 0\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex - 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'l']);\n                        cell[propPrefix + 'BorderLeft'] = true;\n                        cell[propPrefix + 'Border'] += 'l';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === s.length\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'r']);\n                        cell[propPrefix + 'BorderRight'] = true;\n                        cell[propPrefix + 'Border'] += 'r';\n                    }\n                }\n            }\n            function drawCell(d, rowOrderIndex, rowIndex) {\n                return function drawEach(header, headerIndex, columnOrderIndex) {\n                    if (header.hidden) { return 0; }\n                    var cellStyle = header.style || 'cell',\n                        cellGridAttributes,\n                        cell,\n                        isHeader = /HeaderCell/.test(cellStyle),\n                        isCorner = /cornerCell/.test(cellStyle),\n                        isRowHeader = 'rowHeaderCell' === cellStyle,\n                        isColumnHeader = 'columnHeaderCell' === cellStyle,\n                        selected = self.selections[rowOrderIndex] && self.selections[rowOrderIndex].indexOf(columnOrderIndex) !== -1,\n                        hovered = self.hovers.rowIndex === rowOrderIndex && self.hovers.columnIndex === columnOrderIndex,\n                        active = self.activeCell.rowIndex === rowOrderIndex && self.activeCell.columnIndex === columnOrderIndex,\n                        isColumnHeaderCellCap = cellStyle === 'columnHeaderCellCap',\n                        rawValue = d ? d[header.name] : undefined,\n                        isGrid = typeof rawValue === 'object' && rawValue !== null && rawValue !== undefined,\n                        activeHeader = (self.orders.rows[self.activeCell.rowIndex] === rowOrderIndex\n                                || self.orders.columns[self.activeCell.columnIndex] === headerIndex)\n                            && (columnOrderIndex === -1 || rowOrderIndex === -1)\n                            ? (isRowHeader ? 'activeRowHeaderCell' : 'activeColumnHeaderCell') : false,\n                        val,\n                        f = self.formatters[header.type || 'string'],\n                        orderByArrowSize = 0,\n                        treeArrowSize = 0,\n                        cellWidth = self.sizes.columns[headerIndex] || header.width,\n                        ev = {\n                            value: rawValue,\n                            row: d,\n                            header: header\n                        };\n                    if (isColumnHeaderCellCap) {\n                        cellWidth = w - x;\n                    }\n                    // if no data or schema are defined, a width is provided to the stub column\n                    if (cellWidth === undefined) {\n                        cellWidth = self.style.cellWidth;\n                    }\n                    cellWidth = cellWidth * self.scale;\n                    if (x + cellWidth + self.style.cellBorderWidth < 0) {\n                        x += cellWidth + self.style.cellBorderWidth;\n                    }\n                    if (active && cellStyle !== 'cornerCell') {\n                        cellStyle = 'activeCell';\n                    }\n                    if (self.visibleRows.indexOf(rowIndex) === -1 && !isHeader) {\n                        self.visibleRows.push(rowIndex);\n                    }\n                    val = self.dispatchEvent('formatcellvalue', ev);\n                    cx = x;\n                    cy = y;\n                    if (cellStyle === 'cornerCell') {\n                        cx = 0;\n                        cy = 0;\n                    } else if (isRowHeader) {\n                        cx = 0;\n                    } else if (isHeader) {\n                        cy = 0;\n                    }\n                    cell = {\n                        type: isGrid ? 'canvas-datagrid-cell' : header.type,\n                        style: cellStyle,\n                        nodeType: 'canvas-datagrid-cell',\n                        x: cx,\n                        y: cy,\n                        horizontalAlignment: self.style[cellStyle + 'HorizontalAlignment'],\n                        verticalAlignment: self.style[cellStyle + 'VerticalAlignment'],\n                        offsetTop: self.canvasOffsetTop + cy,\n                        offsetLeft: self.canvasOffsetLeft + cx,\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        active: active || activeHeader,\n                        hovered: hovered,\n                        selected: selected,\n                        width: cellWidth,\n                        height: cellHeight,\n                        offsetWidth: cellWidth,\n                        offsetHeight: cellHeight,\n                        parentNode: self.intf.parentNode,\n                        offsetParent: self.intf.parentNode,\n                        data: d,\n                        isCorner: isCorner,\n                        isHeader: isHeader,\n                        isColumnHeader: isColumnHeader,\n                        isColumnHeaderCellCap: isColumnHeaderCellCap,\n                        isRowHeader: isRowHeader,\n                        rowOpen: rowOpen,\n                        header: header,\n                        columnIndex: columnOrderIndex,\n                        rowIndex: rowOrderIndex,\n                        sortColumnIndex: headerIndex,\n                        sortRowIndex: rowIndex,\n                        isGrid: isGrid,\n                        isNormal: !isGrid && !isCorner && !isHeader,\n                        gridId: (self.attributes.name || '') + rowIndex + ':' + headerIndex,\n                        parentGrid: self.intf,\n                        innerHTML: '',\n                        activeHeader: activeHeader,\n                        value: isHeader && !isRowHeader ? (header.title || header.name) : rawValue\n                    };\n                    ev.cell = cell;\n                    cell.userHeight = cell.isHeader ? self.sizes.rows[-1] : rowHeight;\n                    cell.userWidth = cell.isHeader ? self.sizes.columns.cornerCell : self.sizes.columns[headerIndex];\n                    self.visibleCells.unshift(cell);\n                    if (self.dispatchEvent('beforerendercell', ev)) { return; }\n                    self.ctx.fillStyle = self.style[cellStyle + 'BackgroundColor'];\n                    self.ctx.strokeStyle = self.style[cellStyle + 'BorderColor'];\n                    self.ctx.lineWidth = self.style[cellStyle + 'BorderWidth'];\n                    if (hovered) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'HoverBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'HoverBorderColor'];\n                    }\n                    if (selected) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'SelectedBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'SelectedBorderColor'];\n                    }\n                    if (activeHeader) {\n                        self.ctx.fillStyle = self.style[activeHeader + 'BackgroundColor'];\n                    }\n                    self.dispatchEvent('rendercell', ev);\n                    if (cell.isGrid) {\n                        if (cell.height !== rowHeight) {\n                            cell.height = rowHeight || self.style.cellHeightWithChildGrid;\n                            checkScrollHeight = true;\n                        }\n                        cell.width = self.sizes.columns[headerIndex] || self.style.cellWidthWithChildGrid;\n                    }\n                    if (rowOpen && !cell.isRowHeader) {\n                        cell.height = self.sizes.rows[rowIndex] || self.style.cellHeight;\n                    }\n                    if (!cell.isGrid) {\n                        fillRect(cx, cy, cell.width, cell.height);\n                        strokeRect(cx, cy, cell.width, cell.height);\n                    }\n                    self.ctx.save();\n                    radiusRect(cell.x, cell.y, cell.width, cell.height, 0);\n                    self.ctx.clip();\n                    self.dispatchEvent('afterrendercell', ev);\n                    if (cell.height !== cellHeight && !(rowOpen && !cell.isRowHeader)) {\n                        self.sizes.rows[isHeader ? -1 : rowIndex] = cell.height;\n                        checkScrollHeight = true;\n                    }\n                    if (cell.width !== cellWidth) {\n                        self.sizes.columns[headerIndex] = cell.width;\n                        checkScrollHeight = true;\n                    }\n                    if (isRowHeader && self.attributes.tree) {\n                        if (!self.dispatchEvent('rendertreearrow', ev)) {\n                            treeArrowSize = drawTreeArrow(cell, self.style[cellStyle + 'PaddingLeft'], cy, 0);\n                        }\n                    }\n                    if ((self.attributes.showRowNumbers && isRowHeader)\n                            || !isRowHeader) {\n                        if (cell.isGrid && !self.dispatchEvent('beforerendercellgrid', ev)) {\n                            if (!self.childGrids[cell.gridId]) {\n                                // HACK: this only allows setting of the child grids styles if data is set _after_\n                                // this is less than desirable.  An interface needs to be made to effect the\n                                // style of all cell grids.  One for individual grids already exists.\n                                cellGridAttributes = self.cellGridAttributes;\n                                cellGridAttributes.name = self.attributes.saveAppearance ? cell.gridId : undefined;\n                                cellGridAttributes.component = false;\n                                cellGridAttributes.parentNode = cell;\n                                cellGridAttributes.data = rawValue;\n                                ev.cellGridAttributes = cellGridAttributes;\n                                if (self.dispatchEvent('beforecreatecellgrid', ev)) { return; }\n                                self.childGrids[cell.gridId] = self.createGrid(cellGridAttributes);\n                                self.sizes.rows[rowIndex]\n                                    = self.sizes.rows[rowIndex] || self.style.cellGridHeight;\n                                checkScrollHeight = true;\n                            }\n                            cell.grid = self.childGrids[cell.gridId];\n                            cell.grid.parentNode = cell;\n                            cell.grid.visible = true;\n                            cell.grid.draw();\n                            self.dispatchEvent('rendercellgrid', ev);\n                        } else if (!cell.isGrid) {\n                            if (self.childGrids[cell.gridId]) {\n                                self.childGrids[cell.gridId].parentNode.offsetHeight = 0;\n                            }\n                            if (isHeader && self.orderBy === header.name) {\n                                if (!self.dispatchEvent('renderorderbyarrow', ev)) {\n                                    orderByArrowSize = drawOrderByArrow(cx + self.style[cellStyle + 'PaddingLeft'], 0);\n                                }\n                            }\n                            self.ctx.fillStyle = self.style[cellStyle + 'Color'];\n                            if (hovered) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'HoverColor'];\n                            }\n                            if (selected) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'SelectedColor'];\n                            }\n                            if (activeHeader) {\n                                self.ctx.fillStyle = self.style[activeHeader + 'Color'];\n                            }\n                            self.ctx.font = (self.style[cellStyle + 'FontHeight'] * self.scale) + 'px ' + self.style[cellStyle + 'FontName'];\n                            cell.fontHeight = (self.style[cellStyle + 'FontHeight'] * self.scale);\n                            cell.treeArrowWidth = treeArrowSize;\n                            cell.orderByArrowWidth = orderByArrowSize;\n                            val = val !== undefined ? val : f\n                                ? f(ev) : '';\n                            if (val === undefined && !f) {\n                                val = '';\n                                console.warn('canvas-datagrid: Unknown format '\n                                    + header.type + ' add a cellFormater');\n                            }\n                            cell.formattedValue = ((val !== undefined && val !== null) ? val : '').toString();\n                            if (self.columnFilters && self.columnFilters[val] !== undefined && isHeader) {\n                                cell.formattedValue = self.attributes.filterTextPrefix + val;\n                            }\n                            if (!self.dispatchEvent('rendertext', ev)) {\n                                if (cell.innerHTML || header.type === 'html') {\n                                    drawHtml(cell);\n                                } else {\n                                    drawText(cell);\n                                }\n                            }\n                        }\n                    }\n                    if (active) {\n                        aCell = cell;\n                    }\n                    createBorderOverlayArray(cell, selectionBorders, 'selection');\n                    // createBorderOverlayArray calculates data for createHandlesOverlayArray so it must go 2nd\n                    createHandlesOverlayArray(cell);\n                    if (self.movingSelection) {\n                        createBorderOverlayArray(cell, moveBorders, 'move', self.moveOffset);\n                    }\n                    self.ctx.restore();\n                    x += cell.width + (bc ? 0 : self.style.cellBorderWidth);\n                    return cell.width;\n                };\n            }\n            function drawRowHeader(rowData, index, rowOrderIndex) {\n                var a, i;\n                if (self.attributes.showRowHeaders) {\n                    x = 0;\n                    i = index + 1;\n                    rowHeaderCell = {'rowHeaderCell': i };\n                    a = {\n                        name: 'rowHeaderCell',\n                        width: self.sizes.columns[-1] || self.style.rowHeaderCellWidth,\n                        style: 'rowHeaderCell',\n                        type: 'string',\n                        data: i,\n                        index: -1\n                    };\n                    rowOpen = self.openChildren[index];\n                    drawCell(rowHeaderCell, index, rowOrderIndex)(a, -1, -1);\n                }\n            }\n            function drawHeaders() {\n                var d, g = s.length, i, o, columnHeaderCell, header, nonFrozenHeaderWidth;\n                function drawHeaderColumnRange(start, end) {\n                    end = Math.min(end, g);\n                    for (o = start; o < end; o += 1) {\n                        i = self.orders.columns[o];\n                        header = s[i];\n                        if (!header.hidden) {\n                            d = {\n                                title: header.title,\n                                name: header.name,\n                                width: header.width || self.style.cellWidth,\n                                style: 'columnHeaderCell',\n                                type: 'string',\n                                index: o,\n                                order: i\n                            };\n                            columnHeaderCell = {'columnHeaderCell': header.title || header.name};\n                            x += drawCell(columnHeaderCell, -1, -1)(d, i, o);\n                            if (self.attributes.debug) {\n                                self.ctx.font = '14px sans-serif';\n                                self.ctx.fillStyle = 'rgba(37, 254, 21, 1)';\n                                fillText('Actual: ' + i + ' Ordered: ' + o, x - 175, 17);\n                            }\n                            if (x > self.width + self.scrollBox.scrollLeft) {\n                                break;\n                            }\n                        }\n                    }\n                }\n                rowHeaders.forEach(function (rArgs, rhIndex) {\n                    y = rArgs[3];\n                    cellHeight = rArgs[4];\n                    if (rhIndex === self.frozenRow) {\n                        self.ctx.save();\n                        radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                        self.ctx.clip();\n                    }\n                    drawRowHeader(rArgs[0], rArgs[1], rArgs[2]);\n                });\n                self.ctx.restore();\n                if (self.attributes.showColumnHeaders) {\n                    x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    if (self.attributes.allowFreezingColumns) {\n                        x += frozenColumnWidths;\n                    }\n                    y = 0;\n                    // cell height might have changed during drawing\n                    cellHeight = self.getColumnHeaderCellHeight();\n                    drawHeaderColumnRange(self.scrollIndexLeft + self.frozenColumn, g);\n                    nonFrozenHeaderWidth = x;\n                    x = self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    drawHeaderColumnRange(0, self.frozenColumn);\n                    // fill in the space right of the headers\n                    x = nonFrozenHeaderWidth;\n                    if (x < w) {\n                        c = {\n                            name: '',\n                            width: self.style.scrollBarWidth,\n                            style: 'columnHeaderCellCap',\n                            isColumnHeaderCell: true,\n                            isColumnHeaderCellCap: true,\n                            type: 'string',\n                            index: s.length\n                        };\n                        drawCell({endCap: ''}, -1, -1)(c, -1, -1);\n                    }\n                    // fill in the space right of the headers\n                    if (self.attributes.showRowHeaders) {\n                        cornerCell = {'cornerCell': '' };\n                        x = 0;\n                        c = {\n                            name: 'cornerCell',\n                            width: self.style.rowHeaderCellWidth,\n                            style: 'cornerCell',\n                            type: 'string',\n                            index: -1\n                        };\n                        drawCell(cornerCell, -1, -1)(c, -1, -1);\n                    }\n                }\n            }\n            function drawRow(r, d) {\n                var i, treeHeight, rowSansTreeHeight, o, g = s.length;\n                if (y - (cellHeight * 2) > h) {\n                    return false;\n                }\n                rd = data[r];\n                rowOpen = self.openChildren[r];\n                rowSansTreeHeight = (self.sizes.rows[r] || self.style.cellHeight) * self.scale;\n                treeHeight = (rowOpen ? self.sizes.trees[r] : 0) * self.scale;\n                rowHeight = (rowSansTreeHeight + treeHeight);\n                if (y < -rowHeight) {\n                    return false;\n                }\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                cellHeight = rowHeight;\n                if (self.attributes.allowFreezingColumns) {\n                    x += frozenColumnWidths;\n                }\n                //draw normal columns\n                for (o = (self.scrollIndexLeft + self.frozenColumn); o < g; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        self.scrollIndexRight = o;\n                        self.scrollPixelRight = x;\n                        break;\n                    }\n                }\n                //draw frozen columns\n                x = 0;\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                for (o = 0; o < self.frozenColumn; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        break;\n                    }\n                }\n                self.lastFrozenColumnPixel = x;\n                // cell height might have changed during drawing\n                cellHeight = rowHeight;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                // don't draw a tree for the new row\n                treeGrid = self.childGrids[r];\n                if (r !== data.length && rowOpen) {\n                    treeGrid.visible = true;\n                    treeGrid.parentNode = {\n                        offsetTop: y + rowSansTreeHeight + self.canvasOffsetTop,\n                        offsetLeft: rowHeaderCellWidth - 1 + self.canvasOffsetLeft,\n                        offsetHeight: treeHeight,\n                        offsetWidth: self.width - rowHeaderCellWidth - self.style.scrollBarWidth - 1,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: self.style,\n                        nodeType: 'canvas-datagrid-tree',\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        rowIndex: r\n                    };\n                    self.visibleCells.unshift({\n                        rowIndex: r,\n                        columnIndex: 0,\n                        y: treeGrid.parentNode.offsetTop,\n                        x: treeGrid.parentNode.offsetLeft,\n                        height: treeGrid.height,\n                        width: treeGrid.width,\n                        style: 'tree-grid',\n                        type: treeGrid.parentNode.nodeType\n                    });\n                    treeGrid.draw();\n                } else if (treeGrid) {\n                    treeGrid.parentNode.offsetHeight = 0;\n                    delete self.sizes.trees[r];\n                }\n                rowHeaders.push([rd, r, d, y, rowHeight]);\n                self.visibleRowHeights[r] = rowHeight;\n                y += cellHeight + (bc ? 0 : self.style.cellBorderWidth);\n                return true;\n            }\n            function initDraw() {\n                self.visibleRows = [];\n                s = self.getSchema();\n                self.visibleCells = [];\n                self.canvasOffsetTop = self.isChildGrid ? self.parentNode.offsetTop : 0;\n                self.canvasOffsetLeft = self.isChildGrid ? self.parentNode.offsetLeft : 0;\n                h = self.height;\n                w = self.width;\n            }\n            function drawBackground() {\n                radiusRect(0, 0, w, h, 0);\n                self.ctx.clip();\n                self.ctx.fillStyle = self.style.gridBackgroundColor;\n                fillRect(0, 0, w, h);\n            }\n            function drawFrozenRows() {\n                var n, ln = Math.min(data.length, self.frozenRow);\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                y = columnHeaderCellHeight;\n                for (r = 0; r < ln; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.allowFreezingRows) {\n                    // HACK great, another stupid magic number.\n                    // Background will appear as a 0.5px artifact behind the row freeze bar without this hack\n                    y += self.style.frozenMarkerBorderWidth + self.style.frozenMarkerWidth - 0.4999999999;\n                }\n                self.lastFrozenRowPixel = y;\n            }\n            function drawRows() {\n                self.ctx.save();\n                if (self.frozenRow > 0) {\n                    radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                    self.ctx.clip();\n                }\n                var o, n, i, g = s.length;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                if (!self.attributes.snapToRow) {\n                    y += -self.scrollBox.scrollTop + self.scrollPixelTop + self.style.cellBorderWidth;\n                }\n                for (r = self.frozenRow + self.scrollIndexTop; r < l; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        self.scrollIndexBottom = r;\n                        self.scrollPixelBottom = y;\n                        break;\n                    }\n                }\n                if (self.attributes.showNewRow) {\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    rowHeight = cellHeight = self.style.cellHeight;\n                    rowOpen = false;\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        x += drawCell(self.newRow, data.length, data.length)(s[i], i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    rowHeaders.push([self.newRow, data.length, data.length, y, rowHeight]);\n                }\n                self.ctx.restore();\n            }\n            function drawMoveMarkers() {\n                if (!self.movingSelection) { return; }\n                self.ctx.lineWidth = self.style.moveOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.moveOverlayBorderColor;\n                self.ctx.setLineDash(self.style.moveOverlayBorderSegments);\n                moveBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n                self.ctx.setLineDash([]);\n            }\n            function drawReorderMarkers() {\n                if (!self.reorderObject) { return; }\n                var b = {\n                        height: self.reorderObject.height,\n                        width: self.reorderObject.width,\n                        x: self.reorderObject.x + self.reorderObject.dragOffset.x,\n                        y: self.reorderObject.y + self.reorderObject.dragOffset.y\n                    },\n                    m = {\n                        width: w,\n                        height: h,\n                        x: 0,\n                        y: 0\n                    };\n                self.ctx.fillStyle = self.style.reorderMarkerBackgroundColor;\n                self.ctx.lineWidth = self.style.reorderMarkerBorderWidth;\n                self.ctx.strokeStyle = self.style.reorderMarkerBorderColor;\n                if (self.dragMode === 'row-reorder') {\n                    b.width = w;\n                    b.x = 0;\n                    m.width = w;\n                    m.height = self.currentCell.height;\n                    m.y = self.currentCell.y;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.rowIndex !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex > -1\n                            && self.currentCell.rowIndex < l) {\n                        addBorderLine(m, self.reorderTarget.sortRowIndex > self.reorderObject.sortRowIndex ? 'b' : 't');\n                    }\n                } else if (self.dragMode === 'column-reorder' && self.reorderObject) {\n                    b.height = h;\n                    b.y = 0;\n                    m.height = h;\n                    m.width = self.currentCell.width;\n                    m.y = 0;\n                    m.x = self.currentCell.x;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.sortColumnIndex !== self.reorderObject.sortColumnIndex\n                            && self.currentCell.sortColumnIndex > -1\n                            && self.currentCell.sortColumnIndex < s.length) {\n                        addBorderLine(m, self.reorderTarget.columnIndex > self.reorderObject.columnIndex ? 'r' : 'l');\n                    }\n                }\n            }\n            function drawBorder() {\n                self.ctx.lineWidth = self.style.gridBorderWidth;\n                self.ctx.strokeStyle = self.style.gridBorderColor;\n                strokeRect(0, 0, self.width, self.height);\n            }\n            function drawSelectionBorders() {\n                self.ctx.lineWidth = self.style.selectionOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.selectionOverlayBorderColor;\n                function dsb(c) {\n                    addBorderLine(c[0], c[1]);\n                }\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.save();\n                clipFrozenArea(0);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(1);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(2);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n            }\n            function drawSelectionHandles() {\n                if (self.mobile || self.attributes.allowMovingSelection) {\n                    self.ctx.lineWidth = self.style.selectionHandleBorderWidth;\n                    self.ctx.strokeStyle = self.style.selectionHandleBorderColor;\n                    self.ctx.fillStyle = self.style.selectionHandleColor;\n                    selectionHandles.forEach(function (c) {\n                        addselectionHandle(c[0], c[1]);\n                        var az = self.attributes.touchSelectHandleZone / 2,\n                            ax = c[0].x + (c[1] === 'tl' || c[1] === 'bl' ? 0 : c[0].width) - az,\n                            ay = c[0].y + (c[1] === 'bl' || c[1] === 'br' ? c[0].height : 0) - az;\n                        self.visibleCells.unshift({\n                            x: ax,\n                            y: ay,\n                            height: self.style.selectionHandleSize + az,\n                            width: self.style.selectionHandleSize + az,\n                            style: 'selection-handle-' + c[1]\n                        });\n                    });\n                }\n            }\n            function drawActiveCell() {\n                if (!aCell) { return; }\n                self.ctx.save();\n                var cl = self.activeCell.columnIndex + 1 > self.frozenColumn || self.activeCell.rowIndex + 1 > self.frozenRow,\n                    acx = cl ? self.lastFrozenColumnPixel : 0,\n                    acy = cl ? self.lastFrozenRowPixel : 0,\n                    acw = cl ? self.width - self.lastFrozenColumnPixel : self.width,\n                    ach = cl ? self.height - self.lastFrozenRowPixel : self.height;\n                radiusRect(acx, acy, acw, ach, 0);\n                self.ctx.clip();\n                if (self.attributes.selectionMode === 'row') {\n                    if (self.activeCell && self.activeCell.rowIndex === aCell.rowIndex) {\n                        self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                        self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                        strokeRect(0, aCell.y, self.getHeaderWidth() + rowHeaderCellWidth, self.visibleRowHeights[aCell.rowIndex]);\n                    }\n                } else {\n                    self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                    self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                    strokeRect(aCell.x, aCell.y, aCell.width, aCell.height);\n                }\n                self.ctx.restore();\n            }\n            function drawFrozenMarkers() {\n                var my = self.lastFrozenRowPixel - self.style.frozenMarkerWidth,\n                    mx = self.lastFrozenColumnPixel - self.style.frozenMarkerBorderWidth,\n                    xHover = self.currentCell && self.currentCell.style === 'frozen-row-marker',\n                    yHover = self.currentCell && self.currentCell.style === 'frozen-column-marker';\n                self.ctx.lineWidth = self.style.frozenMarkerBorderWidth;\n                if (self.attributes.allowFreezingColumns) {\n                    self.ctx.fillStyle = yHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = yHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    strokeRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    self.visibleCells.unshift({\n                        x: mx,\n                        y: 0,\n                        height: self.height,\n                        width: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        style: 'frozen-column-marker'\n                    });\n                }\n                if (self.attributes.allowFreezingRows) {\n                    self.ctx.fillStyle = xHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = xHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    strokeRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    self.visibleCells.unshift({\n                        x: 0,\n                        y: my,\n                        height: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        width: self.width,\n                        style: 'frozen-row-marker'\n                    });\n                }\n                if (self.freezeMarkerPosition) {\n                    self.ctx.fillStyle = self.style.frozenMarkerActiveColor;\n                    self.ctx.strokeStyle = self.style.frozenMarkerActiveBorderColor;\n                    if (self.dragMode === 'frozen-column-marker') {\n                        fillRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                        strokeRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                    } else {\n                        fillRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                        strokeRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                    }\n                }\n            }\n            function drawPerfLines() {\n                if (!self.attributes.showPerformance) { return; }\n                var pw = 250,\n                    px = self.width - pw - self.style.scrollBarWidth - (self.style.scrollBarBorderWidth * 2),\n                    py = columnHeaderCellHeight,\n                    ph = 100;\n                if (scrollDebugCounters.length === 0) { scrollDebugCounters = fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (touchPPSCounters.length === 0) { touchPPSCounters = fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (entityCount.length === 0) { entityCount = fillArray(0, perfWindowSize, 1, 0); }\n                self.ctx.lineWidth = 0.5;\n                function dpl(name, perfArr, arrIndex, max, color, useAbs, rowIndex) {\n                    var v;\n                    drawPerfLine(pw, ph, px, py, perfArr, arrIndex, max, color, useAbs);\n                    self.ctx.fillStyle = color;\n                    fillRect(3 + px, py + 9 + (rowIndex * 11), 8, 8);\n                    self.ctx.fillStyle = '#999999';\n                    v = arrIndex !== undefined ? perfArr[0][arrIndex] : perfArr[0];\n                    fillText(name + ' ' + (isNaN(v) ? 0 : v).toFixed(3), 14 + px, py + 16 + (rowIndex * 11));\n                }\n                self.ctx.textAlign = 'left';\n                self.ctx.font = '8px sans-serif';\n                self.ctx.fillStyle = 'rgba(29, 25, 26, 1.00)';\n                fillRect(px, py, pw, ph);\n                [['Scroll Height', scrollDebugCounters, 0, self.scrollBox.scrollHeight, 'rgba(248, 33, 103, 1.00)', false],\n                    ['Scroll Width', scrollDebugCounters, 1, self.scrollBox.scrollWidth, 'rgba(66, 255, 27, 1.00)', false],\n                    ['Performance', perfCounters, undefined, 200, 'rgba(252, 255, 37, 1.00)', false],\n                    ['Entities', entityCount, undefined, 1500, 'rgba(76, 231, 239, 1.00)', false],\n                    ['TouchPPSX', touchPPSCounters, 0, 1000, 'rgba(246, 102, 24, 1.00)', true],\n                    ['TouchPPSY', touchPPSCounters, 1, 1000, 'purple', true]\n                    ].forEach(function (i, index) {\n                    i.push(index);\n                    dpl.apply(null, i);\n                });\n                self.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n                entityCount.pop();\n                entityCount.unshift(self.visibleCells.length);\n                scrollDebugCounters.pop();\n                scrollDebugCounters.unshift([self.scrollBox.scrollTop, self.scrollBox.scrollLeft]);\n                touchPPSCounters.pop();\n                touchPPSCounters.unshift([self.yPPS, self.xPPS]);\n            }\n            function drawDebug() {\n                self.ctx.save();\n                var d;\n                if (self.attributes.showPerformance || self.attributes.debug) {\n                    if (perfCounters.length === 0) { perfCounters = fillArray(0, perfWindowSize, 1, 0); }\n                    perfCounters.pop();\n                    perfCounters.unshift(performance.now() - p);\n                }\n                if (!self.attributes.debug) {\n                    self.ctx.restore();\n                    return;\n                }\n                self.ctx.font = '14px sans-serif';\n                d = {};\n                d.perf = (perfCounters.reduce(function (a, b) {\n                    return a + b;\n                }, 0) / Math.min(drawCount, perfCounters.length)).toFixed(1);\n                d.perfDelta = perfCounters[0].toFixed(1);\n                d.htmlImages = Object.keys(self.htmlImageCache).length;\n                d.reorderObject = 'x: ' + (self.reorderObject || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderObject || {rowIndex: 0}).rowIndex;\n                d.reorderTarget = 'x: ' + (self.reorderTarget || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderTarget || {rowIndex: 0}).rowIndex;\n                d.scale = self.scale;\n                d.startScale = self.startScale;\n                d.scaleDelta = self.scaleDelta;\n                d.zoomDeltaStart = self.zoomDeltaStart;\n                d.touchLength = self.touchLength;\n                d.touches = 'y0: ' + (self.touchPosition || {y: 0}).y + ' y1: ' + (self.touchPosition1 || {y: 0}).y;\n                d.scrollBox = self.scrollBox.toString();\n                d.scrollIndex = 'x: ' + self.scrollIndexLeft + ', y: ' + self.scrollIndexTop;\n                d.scrollPixel = 'x: ' + self.scrollPixelLeft + ', y: ' + self.scrollPixelTop;\n                d.canvasOffset = 'x: ' + self.canvasOffsetLeft + ', y: ' + self.canvasOffsetTop;\n                d.touchDelta = 'x: ' + self.touchDelta.x + ', y: ' + self.touchDelta.y;\n                d.touchAnimateTo = 'x: ' + self.touchAnimateTo.x + ', y: ' + self.touchAnimateTo.y;\n                d.scrollAnimation = 'x: ' + self.scrollAnimation.x + ', y: ' + self.scrollAnimation.y;\n                d.touchPPS = 'x: ' + self.xPPS + ', y: ' + self.yPPS;\n                d.touchPPST = 'x: ' + self.xPPST + ', y: ' + self.yPPST;\n                d.touchDuration = self.touchDuration;\n                d.pointerLockPosition =  self.pointerLockPosition ?\n                        self.pointerLockPosition.x + ', ' + self.pointerLockPosition.y : '';\n                d.size = 'w: ' + self.width + ', h: ' + self.height;\n                d.mouse = 'x: ' + self.mouse.x + ', y: ' + self.mouse.y;\n                d.touch = !self.touchStart\n                    ? '' : 'x: ' + self.touchStart.x + ', y: ' + self.touchStart.y;\n                d.entities = self.visibleCells.length;\n                d.hasFocus = self.hasFocus;\n                d.dragMode = self.dragMode;\n                if (self.currentCell) {\n                    d.columnIndex = self.currentCell.columnIndex;\n                    d.rowIndex = self.currentCell.rowIndex;\n                    d.sortColumnIndex = self.currentCell.sortColumnIndex;\n                    d.sortRowIndex = self.currentCell.sortRowIndex;\n                    d.context = self.currentCell.context;\n                    d.dragContext = self.currentCell.dragContext;\n                    d.style = self.currentCell.style;\n                    d.type = self.currentCell.type;\n                }\n                self.ctx.textAlign = 'right';\n                self.ctx.fillStyle = 'rgba(0, 0, 0, .40)';\n                fillRect(0, 0, self.width, self.height);\n                Object.keys(d).forEach(function (key, index) {\n                    var m = key + ': ' + d[key],\n                        lh = 14;\n                    self.ctx.fillStyle = 'rgba(37, 254, 21, .90)';\n                    fillText(m, w - 20, (self.attributes.showPerformance ? 140 : 24) + (index * lh));\n                });\n                self.ctx.restore();\n            }\n            self.ctx.save();\n            initDraw();\n            drawBackground();\n            drawFrozenRows();\n            drawRows();\n            drawActiveCell();\n            drawHeaders();\n            drawFrozenMarkers();\n            drawSelectionBorders();\n            drawSelectionHandles();\n            drawReorderMarkers();\n            drawMoveMarkers();\n            drawScrollBars();\n            if (checkScrollHeight) {\n                self.resize(true);\n            }\n            drawBorder();\n            drawDebug();\n            drawPerfLines();\n            if (self.dispatchEvent('afterdraw', {})) { return; }\n            self.ctx.restore();\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/draw.js\n// module id = 3\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var wheeling;\n        self.stopPropagation = function (e) { e.stopPropagation(); };\n        /**\n         * Adds an event listener to the given event.\n         * @memberof canvasDatagrid\n         * @name addEventListener\n         * @method\n         * @param {string} ev The name of the event to subscribe to.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.addEventListener = function (ev, fn) {\n            self.events[ev] = self.events[ev] || [];\n            self.events[ev].unshift(fn);\n        };\n        /**\n         * Removes the given listener function from the given event.  Must be an actual reference to the function that was bound.\n         * @memberof canvasDatagrid\n         * @name removeEventListener\n         * @method\n         * @param {string} ev The name of the event to unsubscribe from.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.removeEventListener = function (ev, fn) {\n            (self.events[ev] || []).forEach(function removeEachListener(sfn, idx) {\n                if (fn === sfn) {\n                    self.events[ev].splice(idx, 1);\n                }\n            });\n        };\n        /**\n         * Fires the given event, padding an event object to the event subscribers.\n         * @memberof canvasDatagrid\n         * @name dispatchEvent\n         * @method\n         * @param {number} ev The name of the event to dispatch.\n         * @param {number} e The event object.\n         */\n        self.dispatchEvent = function (ev, e) {\n            e = ev.type ? ev : (e || {});\n            ev = ev.type || ev;\n            var defaultPrevented;\n            function preventDefault() {\n                defaultPrevented = true;\n            }\n            if (!self.events[ev]) { return; }\n            self.events[ev].forEach(function dispatchEachEvent(fn) {\n                e.ctx = self.ctx;\n                e.preventDefault = preventDefault;\n                fn.apply(self.intf, [e]);\n            });\n            return defaultPrevented;\n        };\n        self.getRatio = function () {\n            return Math.min(self.attributes.maxPixelRatio, (window.devicePixelRatio || 1) /\n                (self.ctx.webkitBackingStorePixelRatio ||\n                    self.ctx.mozBackingStorePixelRatio ||\n                    self.ctx.msBackingStorePixelRatio ||\n                    self.ctx.oBackingStorePixelRatio ||\n                    self.ctx.backingStorePixelRatio || 1));\n        };\n        self.resize = function (drawAfterResize, onlyResizeX) {\n            if (!self.canvas) { return; }\n            var x,\n                v = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'vertical-scroll-bar'\n                },\n                n = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'horizontal-scroll-bar'\n                },\n                vb = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'vertical-scroll-box'\n                },\n                nb = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'horizontal-scroll-box'\n                },\n                co = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    isCorner: true,\n                    isScrollBoxCorner: true,\n                    style: 'scroll-box-corner'\n                },\n                m = (self.style.scrollBarBoxMargin * 2),\n                b = (self.style.scrollBarBorderWidth * 2),\n                d = self.style.scrollBarBoxMargin * 0.5,\n                sbw = self.style.scrollBarWidth + (self.style.scrollBarBorderWidth * 2),\n                ratio = self.getRatio(),\n                bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                cellBorder = self.style.cellBorderWidth * bm,\n                columnHeaderCellBorder = self.style.columnHeaderCellBorderWidth * bm,\n                dataHeight = 0,\n                dataWidth = 0,\n                dims,\n                l = (self.data || []).length,\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                ch = self.style.cellHeight;\n            // sets actual DOM canvas element\n            function setCanvasSize() {\n                if (self.isChildGrid) {\n                    return;\n                }\n                dims = {\n                    // HACK +1 ? maybe it's a magic cell border?  Required to line up properly in auto height mode.\n                    height: dataHeight + cellBorder + 1,\n                    width: dataWidth + rowHeaderCellWidth + cellBorder\n                };\n                ['width', 'height'].forEach(function (dim) {\n                    //TODO: support inherit\n                    if (['auto', undefined].indexOf(self.style[dim]) !== -1) {\n                        self.parentNodeStyle[dim] = dims[dim] + 'px';\n                    } else {\n                        self.parentNodeStyle[dim] = self.style[dim];\n                    }\n                });\n            }\n            self.scrollCache.x = [];\n            if (!onlyResizeX) {\n                self.scrollCache.y = [];\n                for (x = 0; x < l; x += 1) {\n                    self.scrollCache.y[x] = dataHeight;\n                    dataHeight += (((self.sizes.rows[x] || ch) + (self.sizes.trees[x] || 0)) * self.scale)\n                        // HACK? if an expanded tree row is frozen it is necessary to add the tree row's height a second time.\n                        + (self.frozenRow > x ? (self.sizes.trees[x] || 0) : 0);\n                }\n                if (l > 1) {\n                    self.scrollCache.y[x] = dataHeight;\n                }\n            }\n            dataWidth = self.getSchema().reduce(function reduceSchema(accumulator, column, columnIndex) {\n                if (column.hidden) {\n                    self.scrollCache.x[columnIndex] = accumulator;\n                    return accumulator;\n                }\n                var va = accumulator + ((self.sizes.columns[columnIndex] || column.width || self.style.cellWidth) * self.scale);\n                self.scrollCache.x[columnIndex] = va;\n                return va;\n            }, 0) || 0;\n            if (self.attributes.showNewRow) {\n                dataHeight += ch + cellBorder;\n            }\n            setCanvasSize();\n            if (self.isChildGrid) {\n                self.width = self.parentNode.offsetWidth;\n                self.height = self.parentNode.offsetHeight;\n            } else if (self.height !== self.canvas.offsetHeight || self.width !== self.canvas.offsetWidth) {\n                self.height = self.canvas.offsetHeight;\n                self.width = self.canvas.offsetWidth;\n                self.canvasOffsetLeft = self.args.canvasOffsetLeft || 0;\n                self.canvasOffsetTop = self.args.canvasOffsetTop || 0;\n            }\n            /// calculate scroll bar dimensions\n            // non-controversial\n            self.scrollBox.top = columnHeaderCellHeight + columnHeaderCellBorder;\n            self.scrollBox.left = rowHeaderCellWidth;\n            // width and height of scroll box\n            self.scrollBox.width = self.width - rowHeaderCellWidth - cellBorder;\n            self.scrollBox.height = self.height;\n            // is the data larger than the scroll box\n            self.scrollBox.horizontalBarVisible = dataWidth > self.scrollBox.width;\n            self.scrollBox.verticalBarVisible = dataHeight > self.scrollBox.height;\n            // if the scroll box is visible, make room for it by expanding the size of the element\n            // if the other dimension is set to auto\n            if (!onlyResizeX && self.scrollBox.horizontalBarVisible && !self.isChildGrid) {\n                if (self.style.height === 'auto') {\n                    self.height += sbw;\n                }\n                dataHeight += sbw;\n                setCanvasSize();\n                self.scrollBox.horizontalBarVisible = dataWidth > self.scrollBox.width;\n                self.scrollBox.verticalBarVisible = dataHeight > self.scrollBox.height;\n            }\n            if (self.scrollBox.verticalBarVisible && !self.isChildGrid) {\n                if (self.style.width === 'auto') {\n                    self.width += sbw;\n                }\n                // HACK, this will not work with onlyResizeX mode for now :/\n                dataWidth += sbw;\n                setCanvasSize();\n                self.scrollBox.verticalBarVisible = dataHeight > self.scrollBox.height;\n                self.scrollBox.horizontalBarVisible = dataWidth > self.scrollBox.width;\n            }\n            // set again after bar visibility checks\n            self.scrollBox.width = self.width - rowHeaderCellWidth - cellBorder - (self.scrollBox.verticalBarVisible ? sbw : 0);\n            self.scrollBox.height = self.height - columnHeaderCellHeight - columnHeaderCellBorder;\n            self.scrollBox.scrollWidth = dataWidth - self.scrollBox.width;\n            if (!onlyResizeX) {\n                self.scrollBox.scrollHeight = dataHeight - self.scrollBox.height;\n            }\n            self.scrollBox.widthBoxRatio = self.scrollBox.width / dataWidth;\n            self.scrollBox.scrollBoxWidth = self.scrollBox.width\n                * self.scrollBox.widthBoxRatio\n                - self.style.scrollBarWidth - b - d;\n            // TODO: This heightBoxRatio number is terribly wrong.\n            // They should be a result of the size of the grid/canvas?\n            // it being off causes the scroll bar to \"slide\" under\n            // the dragged mouse.\n            // https://github.com/TonyGermaneri/canvas-datagrid/issues/97\n            self.scrollBox.heightBoxRatio = (self.scrollBox.height - 15) / dataHeight;\n            self.scrollBox.scrollBoxHeight = self.scrollBox.height\n                * self.scrollBox.heightBoxRatio\n                - self.style.scrollBarWidth - b - d;\n            self.scrollBox.scrollBoxWidth = Math.max(self.scrollBox.scrollBoxWidth, self.style.scrollBarBoxMinSize);\n            self.scrollBox.scrollBoxHeight = Math.max(self.scrollBox.scrollBoxHeight, self.style.scrollBarBoxMinSize);\n            // horizontal\n            n.x += rowHeaderCellWidth;\n            n.y += self.height - self.style.scrollBarWidth - d;\n            n.width = self.width - self.style.scrollBarWidth - rowHeaderCellWidth - d - m;\n            n.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n            // horizontal box\n            nb.y = n.y + self.style.scrollBarBoxMargin;\n            nb.width = self.scrollBox.scrollBoxWidth;\n            nb.height = self.style.scrollBarBoxWidth;\n            // vertical\n            v.x += self.width - self.style.scrollBarWidth - self.style.scrollBarBorderWidth - d;\n            v.y += columnHeaderCellHeight;\n            v.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n            v.height = self.height - columnHeaderCellHeight - self.style.scrollBarWidth - d - m;\n            // vertical box\n            vb.x = v.x + self.style.scrollBarBoxMargin;\n            vb.width = self.style.scrollBarBoxWidth;\n            vb.height = self.scrollBox.scrollBoxHeight;\n            // corner\n            co.x = n.x + n.width + m;\n            co.y = v.y + v.height + m;\n            co.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n            co.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n            self.scrollBox.entities = {\n                horizontalBar: n,\n                horizontalBox: nb,\n                verticalBar: v,\n                verticalBox: vb,\n                corner: co\n            };\n            self.scrollBox.bar = {\n                v: v,\n                h: n\n            };\n            self.scrollBox.box = {\n                v: vb,\n                h: nb\n            };\n            /// calculate page and dom elements\n            self.page = Math.max(1, self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap);\n            // set canvas drawing related items\n            if (!self.isChildGrid) {\n                self.canvas.width = self.width * ratio;\n                self.canvas.height = self.height * ratio;\n                self.ctx.scale(ratio, ratio);\n            }\n            // resize any open dom elements (input/textarea)\n            self.resizeEditInput();\n            self.scroll(true);\n            if (drawAfterResize) {\n                self.draw(true);\n            }\n            self.dispatchEvent('resize', {});\n            return true;\n        };\n        self.scroll = function (dontDraw) {\n            var s = self.getSchema(),\n                l = (self.data || []).length,\n                ch = self.style.cellHeight;\n            // go too far in leaps, then get focused\n            self.scrollIndexTop = Math.floor((l * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight)) - 100);\n            self.scrollIndexTop = Math.max(self.scrollIndexTop, 0);\n            self.scrollPixelTop = self.scrollCache.y[self.scrollIndexTop];\n            // sometimes the grid is rendered but the height is zero\n            if (self.scrollBox.scrollHeight === 0) {\n                self.scrollIndexTop = 0;\n            }\n            self.scrollPixelTop = 0;\n            self.scrollIndexLeft = 0;\n            self.scrollPixelLeft = 0;\n            while (self.scrollPixelTop < self.scrollBox.scrollTop && self.scrollIndexTop < self.data.length) {\n                // start on index +1 since index +0 was checked prior to loop start in \"go too far\"\n                self.scrollIndexTop += 1;\n                self.scrollPixelTop = self.scrollCache.y[self.scrollIndexTop];\n            }\n            while (self.scrollPixelLeft < self.scrollBox.scrollLeft && self.scrollIndexLeft < s.length) {\n                self.scrollPixelLeft = self.scrollCache.x[self.scrollIndexLeft];\n                self.scrollIndexLeft += 1;\n            }\n            if ((self.data || []).length > 0 && s.length > 0) {\n                self.scrollIndexLeft = Math.max(self.scrollIndexLeft - 1, 0);\n                self.scrollPixelLeft = Math.max(self.scrollPixelLeft\n                    - ((self.sizes.columns[self.scrollIndexLeft] || s[self.scrollIndexLeft].width || self.style.cellWidth) * self.scale), 0);\n                self.scrollIndexTop = Math.max(self.scrollIndexTop - 1, 0);\n                self.scrollPixelTop = Math.max((self.scrollPixelTop\n                    - (\n                        self.data[self.scrollIndexTop] ? (self.sizes.rows[self.scrollIndexTop] || ch)\n                                + (self.sizes.trees[self.scrollIndexTop] || 0)\n                        : ch\n                    ) * self.scale), 0);\n            }\n            self.ellipsisCache = {};\n            if (!dontDraw) {\n                self.draw(true);\n            }\n            //TODO: figure out why this has to be delayed for child grids\n            //BUG: wheeling event on 3rd level hierarchy fails to move input box\n            requestAnimationFrame(self.resizeEditInput);\n            self.dispatchEvent('scroll', {top: self.scrollBox.scrollTop, left: self.scrollBox.scrollLeft});\n        };\n        self.mousemove = function (e, overridePos) {\n            if (self.contextMenu || self.input) {\n                return;\n            }\n            self.mouse = overridePos || self.getLayerPos(e);\n            var ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                i,\n                vs = self.getVisibleSchema(),\n                dragBounds,\n                sBounds,\n                x = self.mouse.x,\n                y = self.mouse.y,\n                o = self.getCellAt(x, y),\n                delta,\n                ev = {NativeEvent: e, cell: o, x: x, y: y},\n                previousCell = self.currentCell;\n            clearTimeout(self.scrollTimer);\n            if (!self.isInGrid({x: x, y: y})) {\n                self.hasFocus = false;\n            }\n            if (self.dispatchEvent('mousemove', ev)) {\n                return;\n            }\n            if (o && self.currentCell) {\n                self.rowBoundaryCrossed = self.currentCell.rowIndex !== o.rowIndex;\n                self.columnBoundaryCrossed = self.currentCell.columnIndex !== o.columnIndex;\n                self.cellBoundaryCrossed = self.rowBoundaryCrossed || self.columnBoundaryCrossed;\n                ['row', 'column', 'cell'].forEach(function (prefix) {\n                    if (self[prefix + 'BoundaryCrossed']) {\n                        ev.cell = previousCell;\n                        self.dispatchEvent(prefix + 'mouseout', ev);\n                        ev.cell = o;\n                        self.dispatchEvent(prefix + 'mouseover', ev);\n                    }\n                });\n            }\n            self.currentCell = o;\n            if (!self.hasFocus) {\n                return;\n            }\n            self.hovers = {};\n            if (!self.draggingItem\n                    && o\n                    && self.scrollModes.indexOf(o.context) === -1) {\n                self.dragItem = o;\n                self.dragMode = o.dragContext;\n                self.cursor = o.context;\n                if (o.context === 'cell') {\n                    self.cursor = 'default';\n                    self.hovers = { rowIndex: o.rowIndex, columnIndex: o.columnIndex };\n                }\n                if ((self.selecting || self.reorderObject)\n                        && o.context === 'cell') {\n                    delta = {\n                        x: Math.abs(self.dragStart.x - x),\n                        y: Math.abs(self.dragStart.y - y)\n                    };\n                    if (self.dragStartObject.columnIndex !== -1 && e.shiftKey) {\n                        self.dragStartObject = {\n                            rowIndex: self.activeCell.rowIndex,\n                            columnIndex: self.activeCell.columnIndex\n                        };\n                    }\n                    dragBounds = {\n                        top: Math.min(self.dragStartObject.rowIndex, o.rowIndex),\n                        left: Math.min(self.dragStartObject.columnIndex, o.columnIndex),\n                        bottom: Math.max(self.dragStartObject.rowIndex, o.rowIndex),\n                        right: Math.max(self.dragStartObject.columnIndex, o.columnIndex)\n                    };\n                    if (self.dragStartObject.columnIndex === -1) {\n                        sBounds = self.getSelectionBounds();\n                        dragBounds.left = -1;\n                        dragBounds.right = vs.length - 1;\n                        dragBounds.top = Math.min(sBounds.top, o.rowIndex);\n                        dragBounds.bottom = Math.max(sBounds.bottom, o.rowIndex);\n                    }\n                    if (self.dragStartObject.rowIndex !== o.rowIndex\n                                || self.dragStartObject.columnIndex !== o.columnIndex) {\n                        self.ignoreNextClick = true;\n                    }\n                    if (self.cellBoundaryCrossed || (delta.x === 0 && delta.y === 0) || (self.attributes.selectionMode === 'row')) {\n                        if (((self.attributes.selectionMode === 'row') || self.dragStartObject.columnIndex === -1)\n                                && self.rowBoundaryCrossed) {\n                            self.selectRow(o.rowIndex, ctrl, null, true);\n                        } else if (self.attributes.selectionMode !== 'row') {\n                            if (!self.dragAddToSelection && o.rowIndex !== undefined) {\n                                if (self.selections[o.rowIndex] && self.selections[o.rowIndex].indexOf(o.columnIndex) !== -1) {\n                                    self.selections[o.rowIndex].splice(self.selections[o.rowIndex].indexOf(o.columnIndex), 1);\n                                }\n                            } else {\n                                self.selections[o.rowIndex] = self.selections[o.rowIndex] || [];\n                                if (self.selections[o.rowIndex].indexOf(o.columnIndex) === -1) {\n                                    self.selections[o.rowIndex].push(o.columnIndex);\n                                }\n                            }\n                        }\n                    }\n                    if ((!self.selectionBounds || (dragBounds.top !== self.selectionBounds.top\n                            || dragBounds.left !== self.selectionBounds.left\n                            || dragBounds.bottom !== self.selectionBounds.bottom\n                            || dragBounds.right !== self.selectionBounds.right)) && !ctrl) {\n                        self.selections = [];\n                        sBounds = dragBounds;\n                        if (self.attributes.selectionMode === 'row') {\n                            for (i = sBounds.top; i <= sBounds.bottom; i += 1) {\n                                self.selectRow(i, true, null, true);\n                            }\n                        } else if (dragBounds.top !== -1) {\n                            self.selectArea(sBounds, true);\n                        }\n                    }\n                    self.autoScrollZone(e, x, y, ctrl);\n                }\n            }\n            self.cellBoundaryCrossed = false;\n            self.rowBoundaryCrossed = false;\n            self.columnBoundaryCrossed = false;\n            self.draw(true);\n        };\n        self.click = function (e, overridePos) {\n            var i,\n                ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                pos = overridePos || self.getLayerPos(e);\n            self.currentCell = self.getCellAt(pos.x, pos.y);\n            if (self.currentCell.grid !== undefined) {\n                return;\n            }\n            function checkSelectionChange() {\n                var ev = {\n                    selections: self.selections,\n                    selectionBounds: self.selectionBounds\n                };\n                Object.defineProperty(ev, 'selectedData', {\n                    get: function () {\n                        return self.getSelectedData();\n                    }\n                });\n            }\n            if (self.input) {\n                self.endEdit();\n            }\n            if (self.ignoreNextClick) {\n                self.ignoreNextClick = false;\n                return;\n            }\n            i = self.currentCell;\n            if (self.dispatchEvent('click', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (['rowHeaderCell', 'columnHeaderCell'].indexOf(self.currentCell.style) === -1 && !ctrl) {\n                self.setActiveCell(i.columnIndex, i.rowIndex);\n            }\n            if (self.currentCell.context === 'cell') {\n                if (self.currentCell.style === 'cornerCell') {\n                    self.selectAll();\n                    self.draw();\n                    checkSelectionChange();\n                    return;\n                }\n                if (self.currentCell.style === 'columnHeaderCell') {\n                    if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                        if (self.orderBy === i.header.name) {\n                            self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                        } else {\n                            self.orderDirection = 'asc';\n                        }\n                        self.order(i.header.name, self.orderDirection);\n                        checkSelectionChange();\n                        return;\n                    }\n                    if (self.attributes.columnHeaderClickBehavior === 'select') {\n                        self.selectColumn(i.header.index, ctrl, e.shiftKey, true);\n                        checkSelectionChange();\n                        self.draw();\n                        return;\n                    }\n                }\n                self.selections[i.rowIndex] = self.selections[i.rowIndex] || [];\n                if (((self.attributes.selectionMode === 'row') || self.currentCell.style === 'rowHeaderCell')) {\n                    if (self.currentCell.style === 'rowHeaderCell'\n                            && self.attributes.tree && pos.x > 0\n                            && pos.x - self.currentCell.x < self.style.treeArrowWidth\n                            + self.style.treeArrowMarginLeft\n                            + self.style.treeArrowMarginRight + self.style.treeArrowClickRadius\n                            && pos.y - self.currentCell.y < self.style.treeArrowHeight\n                            + self.style.treeArrowMarginTop + self.style.treeArrowClickRadius\n                            && pos.y > 0) {\n                        self.toggleTree(i.rowIndex);\n                        return;\n                    }\n                }\n                if (e.shiftKey && !ctrl) {\n                    self.selectionBounds = self.getSelectionBounds();\n                    self.selectArea(undefined, false);\n                }\n            }\n            checkSelectionChange();\n            self.draw(true);\n        };\n        self.dragResizeColumn = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = self.resizingStartingWidth + pos.x - self.dragStart.x;\n            y = self.resizingStartingHeight + pos.y - self.dragStart.y;\n            if (x < self.style.minColumnWidth) {\n                x = self.style.minColumnWidth;\n            }\n            if (y < self.style.minRowHeight) {\n                y = self.style.minRowHeight;\n            }\n            if (self.dispatchEvent('resizecolumn', {x: x, y: y, draggingItem: self.draggingItem})) { return false; }\n            if (self.scrollBox.scrollLeft > self.scrollBox.scrollWidth - self.attributes.resizeScrollZone\n                    && self.dragMode === 'ew-resize') {\n                self.resize(true, true);\n                self.scrollBox.scrollLeft += x;\n            }\n            if (self.dragMode === 'ew-resize') {\n                self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.sortColumnIndex] = x;\n                if (['rowHeaderCell', 'cornerCell'].indexOf(self.draggingItem.header.style) !== -1) {\n                    self.resize(true, true);\n                }\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.dragMode === 'ns-resize') {\n                if (self.draggingItem.rowOpen) {\n                    self.sizes.trees[self.draggingItem.rowIndex] = y;\n                } else if (self.attributes.globalRowResize) {\n                    self.style.cellHeight = y;\n                } else {\n                    self.sizes.rows[self.draggingItem.rowIndex] = y;\n                }\n                self.dispatchEvent('resizerow', {row: y});\n                self.resizeChildGrids();\n                return;\n            }\n            self.ellipsisCache = {};\n        };\n        self.stopDragResize = function () {\n            self.resize();\n            document.body.removeEventListener('mousemove', self.dragResizeColumn, false);\n            document.body.removeEventListener('mouseup', self.stopDragResize, false);\n            self.setStorageData();\n            self.draw(true);\n            self.ignoreNextClick = true;\n        };\n        self.scrollGrid = function (e) {\n            var pos = self.getLayerPos(e);\n            if (self.attributes.scrollPointerLock && self.pointerLockPosition\n                    && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                self.pointerLockPosition.x += e.movementX;\n                self.pointerLockPosition.y += e.movementY;\n                self.pointerLockPosition.x = Math.min(self.width - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.x));\n                self.pointerLockPosition.y = Math.min(self.height - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.y));\n                pos = self.pointerLockPosition;\n            }\n            self.scrollMode = self.getCellAt(pos.x, pos.y).context;\n            if (self.scrollMode === 'horizontal-scroll-box' && self.scrollStartMode !== 'horizontal-scroll-box') {\n                self.scrollStartMode = 'horizontal-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.left = self.scrollBox.scrollLeft;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box' && self.scrollStartMode !== 'vertical-scroll-box') {\n                self.scrollStartMode = 'vertical-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.top = self.scrollBox.scrollTop;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollStartMode === 'vertical-scroll-box'\n                    && self.scrollMode !== 'vertical-scroll-box') {\n                self.scrollMode = 'vertical-scroll-box';\n            }\n            if (self.scrollStartMode === 'horizontal-scroll-box'\n                    && self.scrollMode !== 'horizontal-scroll-box') {\n                self.scrollMode = 'horizontal-scroll-box';\n            }\n            clearTimeout(self.scrollTimer);\n            if (self.scrollModes.indexOf(self.scrollMode) === -1) {\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box') {\n                self.scrollBox.scrollTop = self.scrollStart.top + ((pos.y - self.dragStart.y)\n                    / self.scrollBox.heightBoxRatio);\n            } else if (self.scrollMode === 'vertical-scroll-top') {\n                self.scrollBox.scrollTop -= (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'vertical-scroll-bottom') {\n                self.scrollBox.scrollTop += (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n            if (self.scrollMode === 'horizontal-scroll-box') {\n                self.scrollBox.scrollLeft = self.scrollStart.left + ((pos.x - self.dragStart.x)\n                    / self.scrollBox.widthBoxRatio);\n            } else if (self.scrollMode === 'horizontal-scroll-right') {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'horizontal-scroll-left') {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.stopScrollGrid = function () {\n            clearTimeout(self.scrollTimer);\n            if (document.exitPointerLock) {\n                document.exitPointerLock();\n            }\n            document.body.removeEventListener('mousemove', self.scrollGrid, false);\n        };\n        self.dragReorder = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = pos.x - self.dragStart.x;\n            y = pos.y - self.dragStart.y;\n            if (!self.attributes.allowColumnReordering && self.dragMode === 'column-reorder') {\n                return;\n            }\n            if (!self.attributes.allowRowReordering && self.dragMode === 'row-reorder') {\n                return;\n            }\n            if (self.dispatchEvent('reordering', {\n                    NativeEvent: e,\n                    source: self.dragStartObject,\n                    target: self.currentCell,\n                    dragMode: self.dragMode\n                })) {\n                return;\n            }\n            if (Math.abs(x) > self.attributes.reorderDeadZone || Math.abs(y) > self.attributes.reorderDeadZone) {\n                self.reorderObject = self.draggingItem;\n                self.reorderTarget = self.currentCell;\n                self.reorderObject.dragOffset = {\n                    x: x,\n                    y: y\n                };\n                self.autoScrollZone(e, pos.x, pos.y, false);\n            }\n        };\n        self.stopDragReorder = function (e) {\n            var oIndex,\n                tIndex,\n                cr = {\n                    'row-reorder': self.orders.rows,\n                    'column-reorder': self.orders.columns\n                },\n                i = {\n                    'row-reorder': 'rowIndex',\n                    'column-reorder': 'sortColumnIndex'\n                }[self.dragMode];\n            document.body.removeEventListener('mousemove', self.dragReorder, false);\n            document.body.removeEventListener('mouseup', self.stopDragReorder, false);\n            if (self.reorderObject\n                    && self.reorderTarget\n                    && ((self.dragMode === 'column-reorder' && self.reorderTarget.sortColumnIndex > -1\n                        && self.reorderTarget.sortColumnIndex < self.getSchema().length)\n                    || (self.dragMode === 'row-reorder' && self.reorderTarget.rowIndex > -1\n                        && self.reorderTarget.rowIndex < self.data.length))\n                    && self.reorderObject[i] !== self.reorderTarget[i]\n                    && !self.dispatchEvent('reorder', {\n                        NativeEvent: e,\n                        source: self.reorderObject,\n                        target: self.reorderTarget,\n                        dragMode: self.dragMode\n                    })) {\n                self.ignoreNextClick = true;\n                oIndex = cr[self.dragMode].indexOf(self.reorderObject[i]);\n                tIndex = cr[self.dragMode].indexOf(self.reorderTarget[i]);\n                cr[self.dragMode].splice(oIndex, 1);\n                cr[self.dragMode].splice(tIndex, 0, self.reorderObject[i]);\n                self.setStorageData();\n            }\n            self.reorderObject = undefined;\n            self.reorderTarget = undefined;\n            self.draw(true);\n        };\n        self.dragMove = function (e) {\n            if (self.dispatchEvent('moving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.moveOffset = {\n                x: self.currentCell.columnIndex - self.dragStartObject.columnIndex,\n                y: self.currentCell.rowIndex - self.dragStartObject.rowIndex\n            };\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopDragMove = function (e) {\n            document.body.removeEventListener('mousemove', self.dragMove, false);\n            document.body.removeEventListener('mouseup', self.stopDragMove, false);\n            var b = self.getSelectionBounds();\n            if (self.dispatchEvent('endmove', {NativeEvent: e, cell: self.currentCell})) {\n                self.movingSelection = undefined;\n                self.moveOffset = undefined;\n                self.draw(true);\n                return;\n            }\n            if (self.moveOffset) {\n                self.moveTo(self.movingSelection, b.left + self.moveOffset.x, b.top + self.moveOffset.y);\n                self.moveSelection(self.moveOffset.x, self.moveOffset.y);\n            }\n            self.movingSelection = undefined;\n            self.moveOffset = undefined;\n            self.draw(true);\n        };\n        self.freezeMove = function (e) {\n            if (self.dispatchEvent('freezemoving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.ignoreNextClick = true;\n            self.freezeMarkerPosition = pos;\n            if (self.currentCell && self.currentCell.rowIndex !== undefined && self.dragMode === 'frozen-row-marker') {\n                self.scrollBox.scrollTop = 0;\n                self.frozenRow = self.currentCell.rowIndex + 1;\n            }\n            if (self.currentCell && self.currentCell.columnIndex !== undefined && self.dragMode === 'frozen-column-marker') {\n                self.scrollBox.scrollLeft = 0;\n                self.frozenColumn = self.currentCell.columnIndex + 1;\n            }\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopFreezeMove = function (e) {\n            document.body.removeEventListener('mousemove', self.freezeMove, false);\n            document.body.removeEventListener('mouseup', self.stopFreezeMove, false);\n            self.freezeMarkerPosition = undefined;\n            if (self.dispatchEvent('endfreezemove', {NativeEvent: e})) {\n                self.frozenRow = self.startFreezeMove.x;\n                self.frozenColumn = self.startFreezeMove.y;\n                self.draw(true);\n                return;\n            }\n            self.draw(true);\n        };\n        self.mousedown = function (e, overridePos) {\n            self.lastMouseDownTarget = e.target;\n            if (self.dispatchEvent('mousedown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (e.button === 2 || self.input) { return; }\n            var ctrl = (e.ctrlKey || e.metaKey),\n                move = /-move/.test(self.dragMode),\n                freeze = /frozen-row-marker|frozen-column-marker/.test(self.dragMode),\n                resize = /-resize/.test(self.dragMode);\n            self.dragStart = overridePos || self.getLayerPos(e);\n            self.scrollStart = {\n                left: self.scrollBox.scrollLeft,\n                top: self.scrollBox.scrollTop\n            };\n            self.dragStartObject = self.getCellAt(self.dragStart.x, self.dragStart.y);\n            self.dragAddToSelection = !self.dragStartObject.selected;\n            if (!ctrl && !e.shiftKey && !/(vertical|horizontal)-scroll-(bar|box)/\n                    .test(self.dragStartObject.context)\n                    && self.currentCell\n                    && !self.currentCell.isColumnHeader\n                    && !move\n                    && !freeze\n                    && !resize) {\n                self.selections = [];\n            }\n            if (self.dragStartObject.isGrid) {\n                return;\n            }\n            if (self.scrollModes.indexOf(self.dragStartObject.context) !== -1) {\n                self.scrollMode = self.dragStartObject.context;\n                self.scrollStartMode = self.dragStartObject.context;\n                self.scrollGrid(e);\n                if (self.attributes.scrollPointerLock\n                        && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                    self.pointerLockPosition = {\n                        x: self.dragStart.x,\n                        y: self.dragStart.y\n                    };\n                    self.canvas.requestPointerLock();\n                }\n                document.body.addEventListener('mousemove', self.scrollGrid, false);\n                document.body.addEventListener('mouseup', self.stopScrollGrid, false);\n                self.ignoreNextClick = true;\n                return;\n            }\n            if (self.dragMode === 'cell') {\n                self.selecting = true;\n                if ((self.attributes.selectionMode === 'row' || self.dragStartObject.columnIndex === -1)\n                        && self.dragStartObject.rowIndex > -1) {\n                    self.selectRow(self.dragStartObject.rowIndex, ctrl, null, true);\n                } else if (self.attributes.selectionMode !== 'row') {\n                    self.mousemove(e);\n                }\n                return;\n            }\n            if (move) {\n                self.draggingItem = self.dragItem;\n                self.movingSelection = self.selections.concat([]);\n                self.dragging = self.dragStartObject;\n                if (self.dispatchEvent('beginmove', {NativeEvent: e, cell: self.currentCell})) { return; }\n                document.body.addEventListener('mousemove', self.dragMove, false);\n                document.body.addEventListener('mouseup', self.stopDragMove, false);\n                return self.mousemove(e);\n            }\n            if (freeze) {\n                self.draggingItem = self.dragItem;\n                self.startFreezeMove = {\n                    x: self.frozenRow,\n                    y: self.frozenColumn\n                };\n                if (self.dispatchEvent('beginfreezemove', {NativeEvent: e})) { return; }\n                document.body.addEventListener('mousemove', self.freezeMove, false);\n                document.body.addEventListener('mouseup', self.stopFreezeMove, false);\n                return self.mousemove(e);\n            }\n            if (resize) {\n                self.draggingItem = self.dragItem;\n                if (self.draggingItem.rowOpen) {\n                    self.resizingStartingHeight = self.sizes.trees[self.draggingItem.rowIndex];\n                } else {\n                    self.resizingStartingHeight = self.sizes.rows[self.draggingItem.rowIndex] || self.style.cellHeight;\n                }\n                self.resizingStartingWidth = self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.sortColumnIndex] || self.draggingItem.width;\n                document.body.addEventListener('mousemove', self.dragResizeColumn, false);\n                document.body.addEventListener('mouseup', self.stopDragResize, false);\n                return;\n            }\n            if (['row-reorder', 'column-reorder'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragStartObject;\n                document.body.addEventListener('mousemove', self.dragReorder, false);\n                document.body.addEventListener('mouseup', self.stopDragReorder, false);\n                return;\n            }\n        };\n        self.mouseup = function (e) {\n            clearTimeout(self.scrollTimer);\n            self.cellBoundaryCrossed = true;\n            self.rowBoundaryCrossed = true;\n            self.columnBoundaryCrossed = true;\n            self.selecting = undefined;\n            self.draggingItem = undefined;\n            self.dragStartObject = undefined;\n            if (self.dispatchEvent('mouseup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            if (self.currentCell && self.currentCell.grid !== undefined) {\n                return;\n            }\n            if (self.contextMenu || self.input) { return; }\n            if (self.dragStart && self.isInGrid(self.dragStart)) {\n                self.controlInput.focus();\n            }\n            e.preventDefault();\n        };\n        // gets the horizontal adjacent cells as well as first/last based on column visibility\n        self.getAdjacentCells = function () {\n            var x,\n                i,\n                s = self.getSchema(),\n                o = {};\n            for (x = 0; x < s.length; x += 1) {\n                i = self.orders.columns[x];\n                if (!s[i].hidden) {\n                    if (o.first === undefined) {\n                        o.first = x;\n                        o.left = x;\n                    }\n                    o.last = x;\n                    if (x > self.activeCell.columnIndex && o.right === undefined) {\n                        o.right = x;\n                    }\n                    if (x < self.activeCell.columnIndex) {\n                        o.left = x;\n                    }\n                }\n            }\n            if (o.right === undefined) {\n                o.right = o.last;\n            }\n            return o;\n        };\n        self.keydown = function (e) {\n            var i,\n                ev,\n                adjacentCells = self.getAdjacentCells(),\n                x = self.activeCell.columnIndex,\n                y = self.activeCell.rowIndex,\n                ctrl = (e.ctrlKey || e.metaKey),\n                last = self.data.length - 1,\n                s = self.getSchema(),\n                cols = s.length - 1;\n            if (self.dispatchEvent('keydown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.attributes.showNewRow) {\n                last += 1;\n            }\n            if (e.keyCode === 9) {\n                e.preventDefault();\n            }\n            // esc\n            if (e.keyCode === 27) {\n                self.selections = [];\n                self.draw(true);\n            // ctrl + a\n            } else if (ctrl && e.keyCode === 65) {\n                self.selectAll();\n            //ArrowDown\n            } else if (e.keyCode === 40) {\n                y += 1;\n            //ArrowUp\n            } else if (e.keyCode === 38) {\n                y -= 1;\n            //ArrowLeft Tab\n            } else if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {\n                x = adjacentCells.left;\n            //ArrowRight Tab\n            } else if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {\n                x = adjacentCells.right;\n            //PageUp\n            } else if (e.keyCode === 33) {\n                y -= self.page;\n                e.preventDefault();\n            //PageDown\n            } else if (e.keyCode === 34) {\n                y += self.page;\n                e.preventDefault();\n            //Home ArrowUp\n            } else if (e.keyCode === 36 || (ctrl && e.keyCode === 38)) {\n                y = 0;\n            //End ArrowDown\n            } else if (e.keyCode === 35 || (ctrl && e.keyCode === 40)) {\n                y = self.data.length - 1;\n            //ArrowRight\n            } else if (ctrl && e.keyCode === 39) {\n                x = adjacentCells.last;\n            //ArrowLeft\n            } else if (ctrl && e.keyCode === 37) {\n                x = adjacentCells.first;\n            }\n            //Enter\n            if (e.keyCode === 13) {\n                return self.beginEditAt(x, y);\n            }\n            //Space\n            if (e.keyCode === 32) {\n                self.selections = [];\n                self.selections[Math.max(y, 0)] = [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                if (self.attributes.selectionMode === 'row') {\n                    for (i = self.selectionBounds.top; i <= self.selectionBounds.bottom; i += 1) {\n                        self.selectRow(i, ctrl, null, true);\n                    }\n                } else {\n                    self.selectArea(undefined, ctrl);\n                }\n                e.preventDefault();\n                self.draw(true);\n                return;\n            }\n            if (x < 0) {\n                x = adjacentCells.first;\n            }\n            if (y > last) {\n                y = last;\n            }\n            if (y < 0) {\n                y = 0;\n            }\n            if (x > cols) {\n                x = adjacentCells.last;\n            }\n            // TODO - most likley some column order related bugs in key based selection\n            // Arrows\n            if (e.shiftKey && [37, 38, 39, 40].indexOf(e.keyCode) !== -1) {\n                self.selections[Math.max(y, 0)] = self.selections[Math.max(y, 0)] || [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                self.selectArea(undefined, ctrl);\n                self.draw(true);\n            }\n            if (x !== self.activeCell.columnIndex || y !== self.activeCell.rowIndex) {\n                self.scrollIntoView(x !== self.activeCell.columnIndex ? x : undefined, y !== self.activeCell.rowIndex ? y : undefined);\n                self.setActiveCell(x, y);\n                if (!e.shiftKey && self.attributes.selectionFollowsActiveCell) {\n                    if (!ctrl) {\n                        self.selections = [];\n                    }\n                    self.selections[y] = self.selections[y] || [];\n                    self.selections[y].push(x);\n                    ev = {\n                        selectedData: self.getSelectedData(),\n                        selections: self.selections,\n                        selectionBounds: self.selectionBounds\n                    };\n                    Object.defineProperty(ev, 'selectedData', {\n                        get: function () {\n                            return self.getSelectedData();\n                        }\n                    });\n                    self.dispatchEvent('selectionchanged', ev);\n                }\n                self.draw(true);\n            }\n        };\n        self.keyup = function (e) {\n            if (self.dispatchEvent('keyup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n        };\n        self.keypress = function (e) {\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.dispatchEvent('keypress', {NativeEvent: e, cell: self.currentCell})) { return; }\n        };\n        self.dblclick = function (e) {\n            if (self.dispatchEvent('dblclick', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'columnHeaderCell') {\n                self.fitColumnToValues(self.currentCell.header.name);\n            } else if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'cornerCell') {\n                self.autosize();\n            } else if (['cell', 'activeCell'].indexOf(self.currentCell.style) !== -1) {\n                self.beginEditAt(self.currentCell.columnIndex, self.currentCell.rowIndex);\n            }\n        };\n        self.scrollWheel = function (e) {\n            var l,\n                t,\n                deltaX = e.deltaX === undefined ? e.NativeEvent.deltaX : e.deltaX,\n                deltaY = e.deltaY === undefined ? e.NativeEvent.deltaY : e.deltaY,\n                deltaMode = e.deltaMode === undefined ? e.NativeEvent.deltaMode : e.deltaMode;\n            if (wheeling) {\n                return;\n            }\n            if (self.dispatchEvent('wheel', {NativeEvent: e})) {\n                return;\n            }\n            e = e.NativeEvent || e;\n            self.touchHaltAnimation = true;\n            l = self.scrollBox.scrollLeft;\n            t = self.scrollBox.scrollTop;\n            if (self.hasFocus) {\n                //BUG Issue 42: https://github.com/TonyGermaneri/canvas-datagrid/issues/42\n                //https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\n                if (deltaMode === 1) {\n                    // line mode = 17 pixels per line\n                    deltaY = deltaY * 17;\n                }\n                if ((self.scrollBox.scrollTop < self.scrollBox.scrollHeight && deltaY > 0)\n                        || (self.scrollBox.scrollLeft < self.scrollBox.scrollWidth && deltaX > 0)\n                        || (self.scrollBox.scrollTop > 0 && deltaY < 0)\n                        || (self.scrollBox.scrollLeft > 0 && deltaX < 0)) {\n                    e.preventDefault(e);\n                }\n                wheeling = setTimeout(function () {\n                    wheeling = undefined;\n                    self.scrollBox.scrollTo(deltaX + l, deltaY + t);\n                }, 1);\n            }\n        };\n        self.pasteItem = function (clipData, x, y, mimeType) {\n            var l, s = self.getVisibleSchema(), yi = y - 1, sel = [];\n            function normalizeRowData(importingRow, existingRow, offsetX, schema, mimeType, rowIndex) {\n                var r = existingRow;\n                if (!Array.isArray(importingRow) && importingRow !== null && typeof importingRow === 'object') {\n                    importingRow = Object.keys(importingRow).map(function (colKey) {\n                        return importingRow[colKey];\n                    });\n                }\n                if (/^text\\/html/.test(mimeType)) {\n                    importingRow = importingRow.substring(4, importingRow.length - 5).split('</td><td>');\n                }\n                if (typeof importingRow === 'string') {\n                    importingRow = [importingRow];\n                }\n                sel[rowIndex] = [];\n                importingRow.forEach(function (cellData, colIndex) {\n                    var cName = schema[colIndex + offsetX].name;\n                    if (importingRow[colIndex] === undefined || importingRow[colIndex] === null) {\n                        r[cName] = existingRow[cName];\n                        return;\n                    }\n                    sel[rowIndex].push(colIndex + offsetX);\n                    r[cName] = importingRow[colIndex];\n                });\n                return r;\n            }\n            if (/^text\\/html/.test(mimeType)) {\n                if (!/^(<meta[^>]+>)?<table>/.test(clipData.substring(0, 29))) {\n                    console.warn('Unrecognized HTML format.  HTML must be a simple table, e.g.: <table><tr><td>data</td></tr></table>.  Data with the mime type text/html not in this format will not be imported as row data.');\n                    return;\n                }\n                // strip table beginning and ending off, then split at rows\n                clipData = clipData.substring(clipData.indexOf('<table><tr>') + 11, clipData.length - 13).split('</tr><tr>');\n            } else {\n                clipData = clipData.split('\\n');\n            }\n            l = clipData.length;\n            clipData.forEach(function (rowData) {\n                yi += 1;\n                var i = self.orders.columns[yi];\n                self.data[i] = normalizeRowData(rowData, self.data[i], x, s, mimeType, i);\n            });\n            self.selections = sel;\n            return l;\n        };\n        self.paste = function (e) {\n            var d;\n            function getItem(dti) {\n                var type = dti.type;\n                dti.getAsString(function (s) {\n                    self.pasteItem(s, self.activeCell.columnIndex, self.activeCell.rowIndex, type);\n                    self.draw();\n                });\n            }\n            d = Array.prototype.filter.call(e.clipboardData.items, function (dti) {\n                return dti.type === 'text/html';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/csv';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/plain';\n            })[0];\n            if (!d) {\n                console.warn('Cannot find supported clipboard data type.  Supported types are text/html, text/csv, text/plain.');\n                return;\n            }\n            getItem(d);\n        };\n        self.cut = function (e) {\n            self.copy(e);\n            self.forEachSelectedCell(function (data, index, colName) {\n                data[index][colName] = '';\n            });\n        };\n        self.copy = function (e) {\n            if (self.dispatchEvent('copy', {NativeEvent: e})) { return; }\n            if (!self.hasFocus || !e.clipboardData) { return; }\n            var t,\n                d,\n                data = (self.data || []),\n                tableRows = [],\n                textRows = [],\n                headers = [],\n                sData = self.getSelectedData(),\n                s = self.getSchema();\n            function htmlSafe(v) {\n                return v.replace(/</g, '&lt;').replace(/>/g, '&gt;');\n            }\n            function fCopyCell(v) {\n                v = v === null || v === undefined ? '' : v;\n                return '<td>' + (typeof v === 'string' ? htmlSafe(v) : v) + '</td>';\n            }\n            function addHeaders(useHtml) {\n                if (!s.length) { return ''; }\n                var h = [];\n                if (useHtml) {\n                    h.push('<tr>');\n                }\n                s.forEach(function (column, columnIndex) {\n                    if (!column.hidden) {\n                        // intentional redefinition of column\n                        column = s[self.orders.columns[columnIndex]];\n                        var hVal = (column.name || column.title) || '';\n                        if (useHtml) {\n                            h.push('<th>' + htmlSafe(hVal) + '</th>');\n                        } else {\n                            h.push('\"' + hVal.replace(/\"/g, '\"\"') + '\"');\n                        }\n                    }\n                });\n                h.push(useHtml ? '</tr>' : '\\n');\n                return h.join(useHtml ? '' : ',');\n            }\n            function addCellValue(val, trRow, textRow, column) {\n                // escape strings\n                if (val !== null\n                        && val !== false\n                        && val !== undefined\n                        && val.replace) {\n                    trRow.push(fCopyCell(val));\n                    textRow.push('\"' + val.replace(/\"/g, '\"\"') + '\"');\n                    return;\n                }\n                if (val !== undefined) {\n                    textRow.push(val);\n                    trRow.push(fCopyCell(val));\n                    return;\n                }\n                // issue #66\n                textRow.push('');\n                trRow.push('<td>&nbsp;</td>');\n            }\n            if (sData.length > 0) {\n                sData.forEach(function (row) {\n                    if (row) {\n                        var trRow = [],\n                            textRow = [];\n                        s.forEach(function (column, columnIndex) {\n                            if (!column.hidden) {\n                                // intentional redefinition of column\n                                column = s[self.orders.columns[columnIndex]];\n                                // escape strings\n                                addCellValue(row[column.name], trRow, textRow, column);\n                            }\n                        });\n                        tableRows.push(trRow.join(''));\n                        textRows.push(textRow.join(','));\n                    }\n                });\n                t = addHeaders() + (headers.length > 0 ? '\\n' : '') + textRows.join('\\n');\n                d = '<table>' + addHeaders(true) + '<tr>' + tableRows.join('</tr><tr>') + '</tr></table>';\n                e.clipboardData.setData('text/html', d);\n                e.clipboardData.setData('text/plain', t);\n                e.clipboardData.setData('text/csv', t);\n                e.clipboardData.setData('application/json', JSON.stringify(sData));\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/events.js\n// module id = 4\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var touchTimerMs = 50,\n            touchScrollTimeout;\n        self.scrollAnimation = {};\n        self.touchDelta = {};\n        self.touchAnimateTo = {};\n        self.animationFrames = 0;\n        self.getTouchPos = function (e, touchIndex) {\n            var t = touchIndex ? e.touches[touchIndex] : e.touches[0],\n                rect = self.canvas.getBoundingClientRect(),\n                pos;\n            if (!t) { return; }\n            pos = {\n                x: t.clientX - rect.left,\n                y: t.clientY - rect.top\n            };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        // shamelessly stolen from from https://gist.github.com/gre/1650294\n        self.easingFunctions = {\n            linear: function (t) { return t; },\n            easeInQuad: function (t) { return t * t; },\n            easeOutQuad: function (t) { return t * (2 - t); },\n            easeInOutQuad: function (t) { return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t; },\n            easeInCubic: function (t) { return t * t * t; },\n            easeOutCubic: function (t) { return (--t) * t * t + 1; },\n            easeInOutCubic: function (t) { return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1; },\n            easeInQuart: function (t) { return t * t * t * t; },\n            easeOutQuart: function (t) { return 1 - (--t) * t * t * t; },\n            easeInOutQuart: function (t) { return t < 0.5 ? 8 * t  * t  * t * t : 1 - 8 * (--t) * t * t * t; },\n            easeInQuint: function (t) { return t * t * t * t * t; },\n            easeOutQuint: function (t) { return 1 + (--t) * t *  t * t * t; },\n            easeInOutQuint: function (t) { return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t; }\n        };\n        self.easing = function (t, b, c, d) {\n            return c * self.easingFunctions[self.attributes.touchEasingMethod](t / d) + b;\n        };\n        self.calculatePPSTimed = function () {\n            self.xPPST = -((self.touchDelta.x - self.touchSigmaTimed.x) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.yPPST = -((self.touchDelta.y - self.touchSigmaTimed.y) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.touchSigmaTimed = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.calculatePPS = function () {\n            self.xPPS = -((self.touchDelta.x - self.touchSigma.x) / (self.touchDelta.t - self.touchSigma.t));\n            self.yPPS = -((self.touchDelta.y - self.touchSigma.y) / (self.touchDelta.t - self.touchSigma.t));\n            self.touchSigma = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.touchEndAnimation = function () {\n            if (!self.canvas || !self.scrollBox.scrollTo) { return requestAnimationFrame(self.touchEndAnimation); }\n            var n = performance.now(),\n                d = self.attributes.touchReleaseAnimationDurationMs,\n                t;\n            t = n - self.touchDelta.t;\n            self.animationFrames += 1;\n            self.scrollAnimation.x = self.easing(t, self.touchDelta.scrollLeft, self.touchAnimateTo.x, d);\n            self.scrollAnimation.y = self.easing(t, self.touchDelta.scrollTop, self.touchAnimateTo.y, d);\n            if (t > d || (self.scrollAnimation.y === self.scrollBox.scrollTop\n                    && self.scrollAnimation.x === self.scrollBox.scrollLeft) || self.stopAnimation) {\n                return;\n            }\n            self.scrollBox.scrollTo(self.scrollAnimation.x, self.scrollAnimation.y);\n            requestAnimationFrame(self.touchEndAnimation);\n        };\n        self.touchEditCell = function (cell) {\n            self.beginEditAt(cell.columnIndex, cell.rowIndex);\n        };\n        self.touchCell = function (e) {\n            return function () {\n                clearInterval(self.calculatePPSTimer);\n                var i, pos = self.getTouchPos(e);\n                if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone) {\n                    i = self.getCellAt(pos.x, pos.y);\n                    if (!i) { return; }\n                    if (self.touchingCell && self.touchingCell.rowIndex === i.rowIndex\n                            && self.touchingCell.columnIndex === i.columnIndex) {\n                        self.touchEditCell(i);\n                        return;\n                    }\n                    if (self.input && self.input.editCell) {\n                        self.endEdit();\n                    }\n                    self.touchingCell = i;\n                    self.selectArea({\n                        top: i.rowIndex,\n                        bottom: i.rowIndex,\n                        left: i.columnIndex,\n                        right: i.columnIndex\n                    });\n                    self.draw(true);\n                }\n            };\n        };\n        self.touchstart = function (e) {\n            if (e.changedTouches[0]) {\n                self.touchStart = self.getTouchPos(e);\n                self.startingCell = self.getCellAt(self.touchStart.x, self.touchStart.y, true);\n            }\n            if (self.dispatchEvent('touchstart', {NativeEvent: e, cell: self.startingCell})) { return; }\n            self.disposeContextMenu();\n            clearInterval(self.calculatePPSTimer);\n            clearTimeout(self.touchContextTimeout);\n            self.touchStartEvent = e;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (e.touches.length === 1 && e.changedTouches[0] && !self.zoomAltered) {\n                self.touchLength = 1;\n                self.touchStart = self.touchStart || self.touchStart1;\n                self.touchScrollStart = {\n                    x: self.scrollBox.scrollLeft,\n                    y: self.scrollBox.scrollTop,\n                    t: performance.now()\n                };\n                self.touchDelta = {\n                    x: 0,\n                    y: 0,\n                    scrollLeft: self.scrollBox.scrollLeft,\n                    scrollTop: self.scrollBox.scrollTop,\n                    t: self.touchScrollStart.t\n                };\n                self.touchSigma = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchSigmaTimed = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchContextTimeout = setTimeout(function () {\n                    self.contextmenuEvent(e, self.touchStart);\n                }, self.attributes.touchContextMenuTimeMs);\n                self.calculatePPSTimer = setInterval(self.calculatePPSTimed, touchTimerMs);\n                if (self.startingCell && (self.startingCell.isGrid || ['tree', 'inherit'].indexOf(self.startingCell.context) !== -1)) {\n                    self.hasFocus = false;\n                    return;\n                }\n                self.hasFocus = true;\n                if (self.startingCell.isHeader) {\n                    if (self.startingCell.isRowHeader) {\n                        self.selectArea({\n                            top: self.startingCell.rowIndex,\n                            bottom: self.startingCell.rowIndex,\n                            left: 0,\n                            right: self.getVisibleSchema().length - 1,\n                        });\n                        self.draw(true);\n                    } else if (self.startingCell.isColumnHeader) {\n                        if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                            if (self.orderBy === self.startingCell.header.name) {\n                                self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                            } else {\n                                self.orderDirection = 'asc';\n                            }\n                            self.order(self.startingCell.header.name, self.orderDirection);\n                        }\n                        if (self.attributes.columnHeaderClickBehavior === 'select') {\n                            self.selectArea({\n                                top: 0,\n                                bottom: self.data.length - 1,\n                                left: self.startingCell.columnIndex,\n                                right: self.startingCell.columnIndex,\n                            });\n                            self.draw(true);\n                        }\n                    }\n                    self.touchEndEvents(e);\n                    return;\n                }\n            }\n            if (self.zoomAltered) { return; }\n            document.body.addEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.addEventListener('touchend', self.touchend, false);\n            document.body.addEventListener('touchcancel', self.touchcancel, false);\n            self.draw(true);\n        };\n        self.touchSelect = function (cell, handleType) {\n            if (cell.rowIndex === undefined || cell.columnIndex === undefined) { return; }\n            self.touchSelecting = true;\n            var bounds = self.getSelectionBounds();\n            if (handleType === 'selection-handle-bl'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex <= bounds.right) {\n                bounds.bottom = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tl'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex <= bounds.right) {\n                bounds.top = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tr'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex >= bounds.left) {\n                bounds.top = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            } else if (handleType === 'selection-handle-br'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex >= bounds.left) {\n                bounds.bottom = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            }\n            if (self.attributes.selectionMode === 'row' || cell.rowIndex === -1) {\n                bounds.left = 0;\n                bounds.right = self.getSchema().length - 1;\n            } else {\n                bounds.left = Math.max(0, bounds.left);\n            }\n            self.selectArea(bounds);\n            self.draw(true);\n        };\n        self.touchmove = function (e) {\n            var ch, rw, rScrollZone, lScrollZone, bScrollZone, tScrollZone, sbw, t1, t2;\n            if (self.dispatchEvent('beforetouchmove', {NativeEvent: e})) { return; }\n            clearTimeout(touchScrollTimeout);\n            if (e.changedTouches[0]) {\n                self.touchPosition = self.getTouchPos(e);\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = self.getTouchPos(e, 1);\n            }\n            if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) > self.attributes.touchDeadZone) {\n                clearTimeout(self.touchContextTimeout);\n            }\n            if (e.touches.length === 2 && self.touchPosition && self.touchPosition1) {\n                t1 = self.touchPosition.y;\n                t2 = self.touchPosition1.y;\n                if (!self.zoomDeltaStart) {\n                    self.zoomDeltaStart = Math.abs(t1 - t2);\n                    self.startScale = self.scale;\n                }\n                self.touchLength = 2;\n                self.scaleDelta = self.zoomDeltaStart - Math.abs(t1 - t2);\n                self.scale = self.startScale - (self.scaleDelta * self.attributes.touchZoomSensitivity);\n                self.scale = Math.min(Math.max(self.scale, self.attributes.touchZoomMin), self.attributes.touchZoomMax);\n                self.zoomAltered = true;\n                self.resize(true);\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.zoomAltered) { return; }\n            self.touchLength = 1;\n            self.touchPosition = self.touchPosition || self.touchPosition1;\n            ch = self.getColumnHeaderCellHeight();\n            rw = self.getRowHeaderCellWidth();\n            rScrollZone = self.width - self.style.scrollBarWidth - self.touchPosition.x < self.attributes.selectionScrollZone;\n            lScrollZone = self.touchPosition.x - rw < self.attributes.selectionScrollZone;\n            bScrollZone = self.height - self.style.scrollBarWidth - self.touchPosition.y < self.attributes.selectionScrollZone;\n            tScrollZone = self.touchPosition.y - ch < self.attributes.selectionScrollZone;\n            sbw = self.style.scrollBarWidth;\n            function touchScroll() {\n                var x = self.scrollBox.scrollLeft,\n                    y = self.scrollBox.scrollTop;\n                x += (rScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y += (bScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y -= (tScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                x -= (lScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                self.scrollBox.scrollTo(x, y);\n                touchScrollTimeout = setTimeout(touchScroll, self.attributes.scrollRepeatRate);\n            }\n            e.stopPropagation();\n            self.touchDelta = {\n                x: self.touchPosition.x - self.touchStart.x,\n                y: self.touchPosition.y - self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: performance.now()\n            };\n            self.currentCell = self.getCellAt(self.touchPosition.x, self.touchPosition.y);\n            self.dispatchEvent('touchmove', {NativeEvent: e, cell: self.currentCell});\n            self.calculatePPS();\n            self.touchDuration = performance.now() - self.touchScrollStart.t;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            if (self.touchSelecting && (rScrollZone || lScrollZone || tScrollZone || bScrollZone)) {\n                touchScroll();\n            }\n            if (/vertical-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollTop = self.scrollBox.scrollHeight\n                    * ((self.touchPosition.y - ch - sbw) / (self.scrollBox.height - sbw - ch));\n                return;\n            }\n            if (/horizontal-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollLeft = self.scrollBox.scrollWidth\n                    * ((self.touchPosition.x - rw - sbw) / (self.scrollBox.width - sbw - rw));\n                return;\n            }\n            if (/selection-handle-/.test(self.startingCell.style)) {\n                self.touchSelect(self.currentCell, self.startingCell.style);\n                return;\n            }\n            self.scrollBox.scrollTo(self.touchScrollStart.x - self.touchDelta.x,\n                self.touchScrollStart.y - self.touchDelta.y);\n            self.draw(true);\n        };\n        self.touchEndEvents = function (e) {\n            self.zoomDeltaStart = undefined;\n            self.touchSelecting = false;\n            clearInterval(self.touchScrollTimeout);\n            clearInterval(self.touchContextTimeout);\n            clearInterval(self.calculatePPSTimer);\n            e.stopPropagation();\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n        };\n        self.touchend = function (e) {\n            if (self.dispatchEvent('touchend', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.zoomDeltaStart = undefined;\n            if (e.changedTouches[0]) {\n                self.touchPosition = undefined;\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = undefined;\n            }\n            if (self.zoomAltered) {\n                if (e.touches.length === 0) {\n                    self.zoomAltered = false;\n                }\n                return;\n            }\n            var dz = Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone;\n            if (isNaN(self.xPPS)) {\n                self.xPPS = 0;\n            }\n            if (isNaN(self.yPPS)) {\n                self.yPPS = 0;\n            }\n            if (isNaN(self.xPPST)) {\n                self.xPPST = 0;\n            }\n            if (isNaN(self.yPPST)) {\n                self.yPPST = 0;\n            }\n            self.touchAnimateTo.x = self.xPPS * self.attributes.touchReleaseAcceleration;\n            self.touchAnimateTo.y = self.yPPS * self.attributes.touchReleaseAcceleration;\n            self.calculatePPSTimed();\n            if (dz && !self.contextMenu) {\n                self.touchCell(self.touchStartEvent)();\n            } else if (self.animationFrames === 0\n                    && (Math.abs(self.xPPST) > self.attributes.scrollAnimationPPSThreshold\n                        || Math.abs(self.yPPST) > self.attributes.scrollAnimationPPSThreshold)\n                    && !/-scroll-/.test(self.startingCell.style)\n                    && !dz) {\n                self.stopAnimation = false;\n                self.touchEndAnimation();\n            }\n            self.touchEndEvents(e);\n        };\n        self.touchcancel = function (e) {\n            if (self.dispatchEvent('touchcancel', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.touchEndEvents(e);\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/touch.js\n// module id = 5\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals HTMLElement: false, Reflect: false, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self, ctor) {\n        self.scale = 1;\n        self.orders = {\n            rows: [],\n            columns: []\n        };\n        self.cellGridAttributes = {};\n        self.treeGridAttributes = {};\n        self.visibleRowHeights = [];\n        self.hasFocus = false;\n        self.activeCell = {\n            columnIndex: 0,\n            rowIndex: 0\n        };\n        self.innerHTML = '';\n        self.storageName = 'canvasDataGrid';\n        self.invalidSearchExpClass = 'canvas-datagrid-invalid-search-regExp';\n        self.localStyleLibraryStorageKey = 'canvas-datagrid-user-style-library';\n        self.dataType = 'application/x-canvas-datagrid';\n        self.orderBy = null;\n        self.orderDirection = 'asc';\n        self.columnFilters = {};\n        self.filters = {};\n        self.frozenRow = 0;\n        self.frozenColumn = 0;\n        self.ellipsisCache = {};\n        self.scrollCache = { x: [], y: [] };\n        self.scrollBox = {};\n        self.visibleRows = [];\n        self.sizes = {\n            rows: {},\n            columns: {},\n            trees: {}\n        };\n        self.currentFilter = function () {\n            return true;\n        };\n        self.selections = [];\n        self.hovers = {};\n        self.attributes = {};\n        self.style = {};\n        self.formatters = {};\n        self.sorters = {};\n        self.parsers = {};\n        self.schemaHashes = {};\n        self.events = {};\n        self.changes = [];\n        self.scrollIndexTop = 0;\n        self.scrollPixelTop = 0;\n        self.scrollIndexLeft = 0;\n        self.scrollPixelLeft = 0;\n        self.childGrids = {};\n        self.openChildren = {};\n        self.scrollModes = [\n            'vertical-scroll-box',\n            'vertical-scroll-top',\n            'vertical-scroll-bottom',\n            'horizontal-scroll-box',\n            'horizontal-scroll-right',\n            'horizontal-scroll-left'\n        ];\n        self.componentL1Events = {};\n        self.eventNames = ['afterdraw', 'afterrendercell', 'attributechanged', 'beforebeginedit',\n            'beforecreatecellgrid', 'beforedraw', 'beforeendedit', 'beforerendercell', 'beforerendercellgrid',\n            'beginedit', 'cellmouseout', 'cellmouseover', 'click', 'collapsetree', 'contextmenu', 'copy',\n            'datachanged', 'dblclick', 'endedit', 'expandtree', 'formatcellvalue', 'keydown', 'keypress',\n            'keyup', 'mousedown', 'mousemove', 'mouseup', 'newrow', 'ordercolumn', 'rendercell', 'rendercellgrid',\n            'renderorderbyarrow', 'rendertext', 'rendertreearrow', 'reorder', 'reordering', 'resize',\n            'resizecolumn', 'resizerow', 'schemachanged', 'scroll', 'selectionchanged', 'stylechanged',\n            'touchcancel', 'touchend', 'touchmove', 'touchstart', 'wheel'];\n        self.mouse = { x: 0, y: 0};\n        self.getSelectedData = function (expandToRow) {\n            var d = [], s = self.getSchema(), l = self.data.length;\n            if (l === 0) { return []; }\n            self.selections.forEach(function (row, index) {\n                if (!row) { return; }\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    var orderedIndex;\n                    if (col === -1 || !s[col]) { return; }\n                    orderedIndex = self.orders.columns[col];\n                    if (!expandToRow && s[orderedIndex].hidden) { return; }\n                    if (self.data[index]) {\n                        d[index][s[orderedIndex].name] = self.data[index][s[orderedIndex].name];\n                    }\n                });\n            });\n            return d;\n        };\n        self.getColumnHeaderCellHeight = function () {\n            if (!self.attributes.showColumnHeaders) { return 0; }\n            return ((self.sizes.rows[-1] || self.style.columnHeaderCellHeight) * self.scale);\n        };\n        self.getRowHeaderCellWidth = function () {\n            if (!self.attributes.showRowHeaders) { return 0; }\n            return (self.sizes.columns[-1] || self.style.rowHeaderCellWidth) * self.scale;\n        };\n        self.setStorageData = function () {\n            if (!self.attributes.saveAppearance || !self.attributes.name) { return; }\n            var visibility = {};\n            self.getSchema().forEach(function (column) {\n                visibility[column.name] = !column.hidden;\n            });\n            localStorage.setItem(self.storageName + '-' + self.attributes.name, JSON.stringify({\n                sizes: {\n                    rows: self.sizes.rows,\n                    columns: self.sizes.columns\n                },\n                orders: {\n                    rows: self.orders.rows,\n                    columns: self.orders.columns\n                },\n                orderBy: self.orderBy,\n                orderDirection: self.orderDirection,\n                visibility: visibility\n            }));\n        };\n        self.getSchema = function () {\n            return self.schema || self.tempSchema || [];\n        };\n        function fillArray(low, high) {\n            var i = [], x;\n            for (x = low; x <= high; x += 1) {\n                i[x] = x;\n            }\n            return i;\n        }\n        self.createColumnOrders = function () {\n            var s = self.getSchema();\n            self.orders.columns = fillArray(0, s.length - 1);\n        };\n        self.createRowOrders = function () {\n            self.orders.rows = fillArray(0, self.data.length - 1);\n        };\n        self.getVisibleSchema = function () {\n            return self.getSchema().filter(function (col) {\n                return !col.hidden;\n            });\n        };\n        self.applyDefaultValue = function (row, header) {\n            var d = header.defaultValue || '';\n            if (typeof d === 'function') {\n                d = d.apply(self.intf, [header]);\n            }\n            row[header.name] = d;\n        };\n        self.createNewRowData = function () {\n            self.newRow = {};\n            self.getSchema().forEach(function forEachHeader(header) {\n                self.applyDefaultValue(self.newRow, header);\n            });\n        };\n        self.getSchemaNameHash = function (key) {\n            var n = 0;\n            while (self.schemaHashes[key]) {\n                n += 1;\n                key = key + n;\n            }\n            return key;\n        };\n        self.filter = function (type) {\n            var f = self.filters[type];\n            if (!f && type !== undefined) {\n                console.warn('Cannot find filter for type %s, falling back to substring match.', type);\n                f = self.filters.string;\n            }\n            return f;\n        };\n        self.getBestGuessDataType = function (columnName, data) {\n            var t, x, l = data.length;\n            for (x = 0; x < l; x += 1) {\n                if (data[x] !== undefined && data[x] !== null && [null, undefined].indexOf(data[x][columnName]) !== -1) {\n                    t = typeof data[x];\n                    return t === 'object' ? 'string' : t;\n                }\n            }\n            return 'string';\n        };\n        self.drawChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].draw();\n            });\n        };\n        self.resizeChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].resize();\n            });\n        };\n        self.autoScrollZone = function (e, x, y, ctrl) {\n            var setTimer,\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight();\n            if (x > self.width - self.attributes.selectionScrollZone && x < self.width) {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y > self.height - self.attributes.selectionScrollZone && y < self.height) {\n                self.scrollBox.scrollTop += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (x - self.attributes.selectionScrollZone - rowHeaderCellWidth < 0) {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y - self.attributes.selectionScrollZone - columnHeaderCellHeight < 0) {\n                self.scrollBox.scrollTop -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (setTimer && !ctrl && self.currentCell && self.currentCell.columnIndex !== -1) {\n                self.scrollTimer = setTimeout(self.mousemove, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.refreshFromOrigialData = function () {\n            self.data = self.originalData.filter(function (row) {\n                return true;\n            });\n        };\n        self.validateColumn = function (c, s) {\n            if (!c.name) {\n                throw new Error('A column must contain at least a name.');\n            }\n            if (s.filter(function (i) { return i.name === c.name; }).length > 0) {\n                throw new Error('A column with the name '\n                    + c.name + ' already exists and cannot be added again.');\n            }\n            return true;\n        };\n        self.setDefaults = function (obj1, obj2, key, def) {\n            obj1[key] = obj2[key] === undefined ? def : obj2[key];\n        };\n        self.setAttributes = function () {\n            self.defaults.attributes.forEach(function eachAttribute(i) {\n                self.setDefaults(self.attributes, self.args, i[0], i[1]);\n            });\n        };\n        self.setStyle = function () {\n            self.defaults.styles.forEach(function eachStyle(i) {\n                self.setDefaults(self.style, self.args.style || {}, i[0], i[1]);\n            });\n        };\n        self.autosize = function (colName) {\n            self.getVisibleSchema().forEach(function (col, colIndex) {\n                if (col.name === colName || colName === undefined) {\n                    self.sizes.columns[colIndex]\n                        = Math.max(self.findColumnMaxTextLength(col.name), self.style.minColumnWidth);\n                }\n            });\n            self.sizes.columns[-1] = self.findColumnMaxTextLength('cornerCell');\n        };\n        self.dispose = function () {\n            if (!self.isChildGrid && self.canvas && self.canvas.parentNode) {\n                self.canvas.parentNode.removeChild(self.canvas);\n            }\n            self.eventParent.removeEventListener('mouseup', self.mouseup, false);\n            self.eventParent.removeEventListener('mousedown', self.mousedown, false);\n            self.eventParent.removeEventListener('dblclick', self.dblclick, false);\n            self.eventParent.removeEventListener('click', self.click, false);\n            self.eventParent.removeEventListener('mousemove', self.mousemove);\n            self.eventParent.removeEventListener('wheel', self.scrollWheel, false);\n            self.canvas.removeEventListener('contextmenu', self.contextmenu, false);\n            self.canvas.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('keypress', self.keypress, false);\n            self.controlInput.removeEventListener('keyup', self.keyup, false);\n            self.controlInput.removeEventListener('keydown', self.keydown, false);\n            window.removeEventListener('resize', self.resize);\n            if (self.observer && self.observer.disconnect) {\n                self.observer.disconnect();\n            }\n        };\n        self.tryLoadStoredSettings = function () {\n            var s;\n            self.reloadStoredValues();\n            if (self.storedSettings\n                    && typeof self.storedSettings.orders === 'object'\n                    && self.storedSettings.orders !== null) {\n                if (self.storedSettings.orders.rows.length >= (self.data || []).length) {\n                    self.orders.rows = self.storedSettings.orders.rows;\n                }\n                s = self.getSchema();\n                if (self.storedSettings.orders.columns.length === s.length) {\n                    self.orders.columns = self.storedSettings.orders.columns;\n                }\n                self.orderBy = self.storedSettings.orderBy === undefined\n                    ? s[0].name : self.storedSettings.orderBy;\n                self.orderDirection = self.storedSettings.orderDirection === undefined\n                    ? 'asc' : self.storedSettings.orderDirection;\n                if (self.storedSettings.orderBy !== undefined && self.getHeaderByName(self.orderBy) && self.orderDirection) {\n                    self.order(self.orderBy, self.orderDirection);\n                }\n            }\n        };\n        self.getDomRoot = function () {\n            return self.shadowRoot ? self.shadowRoot.host : self.parentNode;\n        };\n        self.getFontName = function (fontStyle) {\n            return fontStyle.replace(/\\d+\\.?\\d*px/, '');\n        };\n        self.getFontHeight = function (fontStyle) {\n            return parseFloat(fontStyle, 10);\n        };\n        self.parseStyleValue = function (key) {\n            if (/Font/.test(key)) {\n                self.style[key + 'Height'] = self.getFontHeight(self.style[key]);\n                self.style[key + 'Name'] = self.getFontName(self.style[key]);\n                return;\n            }\n            // when inheriting styles from already instantiated grids, don't parse already parsed values.\n            if (key === 'moveOverlayBorderSegments' && typeof self.style[key] === 'string') {\n                self.style[key] = self.style[key].split(',')\n                    .map(function (i) { return parseInt(i, 10); });\n            }\n        };\n        self.initProp = function (propName) {\n            if (!self.args[propName]) { return; }\n            Object.keys(self.args[propName]).forEach(function (key) {\n                self[propName][key] = self.args[propName][key];\n            });\n        };\n        self.getStyleProperty = function (key) {\n            if (self.styleKeys.indexOf(key) === -1) {\n                return self.parentNodeStyle[key];\n            }\n            return self.style[key];\n        };\n        self.setStyleProperty = function (key, value, supressDrawAndEvent) {\n            var isDim = ['height', 'width', 'minHeight', 'minWidth', 'maxHeight', 'maxWidth'].indexOf(key) !== -1;\n            if (self.styleKeys.indexOf(key) === -1) {\n                self.parentNodeStyle[key] = value;\n            } else {\n                if (/-/.test(key)) {\n                    key = self.dehyphenateProperty(key);\n                }\n                self.style[key] = value;\n                self.parseStyleValue(key);\n            }\n            if (isDim) {\n                self.resize();\n            }\n            if (!supressDrawAndEvent) {\n                self.draw(true);\n                self.dispatchEvent('stylechanged', {name: 'style', value: value});\n            }\n        };\n        self.reloadStoredValues = function () {\n            if (self.attributes.name && self.attributes.saveAppearance) {\n                self.storedSettings = localStorage.getItem(self.storageName + '-' + self.attributes.name);\n                if (self.storedSettings) {\n                    try {\n                        self.storedSettings = JSON.parse(self.storedSettings);\n                    } catch (e) {\n                        console.warn('could not read settings from localStore', e);\n                        self.storedSettings = undefined;\n                    }\n                }\n                if (self.storedSettings) {\n                    if (typeof self.storedSettings.sizes === 'object'\n                            && self.storedSettings.sizes !== null) {\n                        self.sizes.rows = self.storedSettings.sizes.rows;\n                        self.sizes.columns = self.storedSettings.sizes.columns;\n                        ['trees', 'columns', 'rows'].forEach(function (i) {\n                            if (!self.sizes[i]) {\n                                self.sizes[i] = {};\n                            }\n                        });\n                    }\n                    if (typeof self.storedSettings.visibility === 'object') {\n                        self.getSchema().forEach(function (column) {\n                            if (self.storedSettings.visibility && self.storedSettings.visibility[column.name] !== undefined) {\n                                column.hidden = !self.storedSettings.visibility[column.name];\n                            }\n                        });\n                    }\n                }\n            }\n        };\n        self.init = function () {\n            if (self.initialized) { return; }\n            function addStyleKeyIfNoneExists(key) {\n                if (self.styleKeys.indexOf(key) === -1) {\n                    self.styleKeys.push(key);\n                }\n            }\n            var publicStyleKeyIntf = {};\n            self.setAttributes();\n            self.setStyle();\n            self.initScrollBox();\n            self.setDom();\n            self.nodeType = 'canvas-datagrid';\n            self.initialized = true;\n            self.ie = /Trident/.test(window.navigator.userAgent);\n            self.edge = /Edge/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.moz = /Gecko/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.mobile = /Mobile/i.test(window.navigator.userAgent);\n            self.cursorGrab = 'grab';\n            self.cursorGrabing = 'grabbing';\n            self.cursorGrab = self.webKit ? '-webkit-grab' : self.cursorGrab;\n            self.cursorGrabing = self.moz ? '-webkit-grabbing' : self.cursorGrabbing;\n            self.pointerLockPosition = {x: 0, y: 0};\n            Object.keys(self.style).forEach(self.parseStyleValue);\n            self.intf.moveSelection = self.moveSelection;\n            self.intf.moveTo = self.moveTo;\n            self.intf.addEventListener = self.addEventListener;\n            self.intf.removeEventListener = self.removeEventListener;\n            self.intf.dispatchEvent = self.dispatchEvent;\n            /**\n             * Releases grid resources and removes grid elements.\n             * @memberof canvasDatagrid\n             * @name dispose\n             * @method\n             */\n            self.intf.dispose = self.dispose;\n            /**\n             * Appends the grid to another element later.  Not implemented.\n             * @memberof canvasDatagrid\n             * @name appendTo\n             * @method\n             * @param {number} el The element to append the grid to.\n             */\n            self.intf.appendTo = self.appendTo;\n            self.intf.filters = self.filters;\n            self.intf.sorters = self.sorters;\n            self.intf.autosize = self.autosize;\n            self.intf.beginEditAt = self.beginEditAt;\n            self.intf.endEdit = self.endEdit;\n            self.intf.setActiveCell = self.setActiveCell;\n            self.intf.forEachSelectedCell = self.forEachSelectedCell;\n            self.intf.scrollIntoView = self.scrollIntoView;\n            self.intf.clearChangeLog = self.clearChangeLog;\n            self.intf.gotoCell = self.gotoCell;\n            self.intf.gotoRow = self.gotoRow;\n            self.intf.getHeaderByName = self.getHeaderByName;\n            self.intf.findColumnScrollLeft = self.findColumnScrollLeft;\n            self.intf.findRowScrollTop = self.findRowScrollTop;\n            self.intf.fitColumnToValues = self.fitColumnToValues;\n            self.intf.findColumnMaxTextLength = self.findColumnMaxTextLength;\n            self.intf.disposeContextMenu = self.disposeContextMenu;\n            self.intf.getCellAt = self.getCellAt;\n            self.intf.isCellVisible = self.isCellVisible;\n            self.intf.order = self.order;\n            self.intf.draw = self.draw;\n            self.intf.selectArea = self.selectArea;\n            self.intf.clipElement = self.clipElement;\n            self.intf.getSchemaFromData = self.getSchemaFromData;\n            self.intf.setFilter = self.setFilter;\n            self.intf.selectRow = self.selectRow;\n            self.intf.parentGrid = self.parentGrid;\n            self.intf.toggleTree = self.toggleTree;\n            self.intf.expandTree = self.expandTree;\n            self.intf.collapseTree = self.collapseTree;\n            self.intf.canvas = self.canvas;\n            self.intf.context = self.ctx;\n            self.intf.insertRow = self.insertRow;\n            self.intf.deleteRow = self.deleteRow;\n            self.intf.addRow = self.addRow;\n            self.intf.insertColumn = self.insertColumn;\n            self.intf.deleteColumn = self.deleteColumn;\n            self.intf.addColumn = self.addColumn;\n            self.intf.getClippingRect = self.getClippingRect;\n            self.intf.setRowHeight = self.setRowHeight;\n            self.intf.setColumnWidth = self.setColumnWidth;\n            self.intf.resetColumnWidths = self.resetColumnWidths;\n            self.intf.resetRowHeights = self.resetRowHeights;\n            self.intf.resize = self.resize;\n            self.intf.selectColumn = self.selectColumn;\n            self.intf.selectRow = self.selectRow;\n            self.intf.selectAll = self.selectAll;\n            self.intf.selectNone = self.selectNone;\n            self.intf.drawChildGrids = self.drawChildGrids;\n            self.intf.assertPxColor = self.assertPxColor;\n            self.intf.clearPxColorAssertions = self.clearPxColorAssertions;\n            self.intf.integerToAlpha = self.integerToAlpha;\n            self.intf.copy = self.copy;\n            self.intf.setStyleProperty = self.setStyleProperty;\n            Object.defineProperty(self.intf, 'defaults', {\n                get: function () {\n                    return {\n                        styles: self.defaults.styles.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {}),\n                        attributes: self.defaults.attributes.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {})\n                    };\n                }\n            });\n            self.styleKeys = Object.keys(self.intf.defaults.styles);\n            self.styleKeys.map(function (i) { return self.hyphenateProperty(i, false); }).forEach(addStyleKeyIfNoneExists);\n            self.styleKeys.map(function (i) { return self.hyphenateProperty(i, true); }).forEach(addStyleKeyIfNoneExists);\n            self.DOMStyles = window.getComputedStyle(document.body, null);\n            self.styleKeys.concat(Object.keys(self.DOMStyles)).forEach(function (key) {\n                // unless this line is here, Object.keys() will not work on <instance>.style\n                publicStyleKeyIntf[key] = undefined;\n                Object.defineProperty(publicStyleKeyIntf, key, {\n                    get: function () {\n                        return self.getStyleProperty(key);\n                    },\n                    set: function (value) {\n                        self.setStyleProperty(key, value);\n                    }\n                });\n            });\n            Object.defineProperty(self.intf, 'shadowRoot', {\n                get: function () {\n                    return self.shadowRoot;\n                }\n            });\n            Object.defineProperty(self.intf, 'activeCell', {\n                get: function () {\n                    return self.activeCell;\n                }\n            });\n            Object.defineProperty(self.intf, 'hasFocus', {\n                get: function () {\n                    return self.hasFocus;\n                }\n            });\n            Object.defineProperty(self.intf, 'style', {\n                get: function () {\n                    return publicStyleKeyIntf;\n                },\n                set: function (valueObject) {\n                    Object.keys(valueObject).forEach(function (key) {\n                        self.setStyleProperty(key, valueObject[key], true);\n                    });\n                    self.draw(true);\n                    self.dispatchEvent('stylechanged', {name: 'style', value: valueObject});\n                }\n            });\n            Object.defineProperty(self.intf, 'attributes', { value: {}});\n            Object.keys(self.attributes).forEach(function (key) {\n                Object.defineProperty(self.intf.attributes, key, {\n                    get: function () {\n                        return self.attributes[key];\n                    },\n                    set: function (value) {\n                        self.attributes[key] = value;\n                        if (key === 'name') {\n                            self.tryLoadStoredSettings();\n                        }\n                        self.draw(true);\n                        self.dispatchEvent('attributechanged', {name: key, value: value[key]});\n                    }\n                });\n            });\n            self.filters.string = function (value, filterFor) {\n                value = String(value);\n                var filterRegExp,\n                    regEnd = /\\/(i|g|m)*$/,\n                    pattern = regEnd.exec(filterFor),\n                    flags = pattern ? pattern[0].substring(1) : '',\n                    flagLength = flags.length;\n                self.invalidFilterRegEx = undefined;\n                if (filterFor.substring(0, 1) === '/' && pattern) {\n                    try {\n                        filterRegExp = new RegExp(filterFor.substring(1, filterFor.length - (flagLength + 1)), flags);\n                    } catch (e) {\n                        self.invalidFilterRegEx = e;\n                        return;\n                    }\n                    return filterRegExp.test(value);\n                }\n                return value.toString ? value.toString().toLocaleUpperCase()\n                    .indexOf(filterFor.toLocaleUpperCase()) !== -1 : false;\n            };\n            self.filters.number = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                return value === filterFor;\n            };\n            ['formatters', 'filters', 'sorters'].forEach(self.initProp);\n            self.applyComponentStyle(false, self.intf);\n            self.reloadStoredValues();\n            if (self.args.data) {\n                self.intf.data = self.args.data;\n            }\n            if (self.intf.innerText || self.intf.textContent) {\n                if (self.intf.type === 'application/x-canvas-datagrid') {\n                    self.intf.type = 'application/json+x-canvas-datagrid';\n                }\n                self.intf.data = self.intf.innerText || self.intf.textContent;\n            }\n            if (self.args.schema) {\n                self.intf.schema = self.args.schema;\n            }\n            if (self.isChildGrid) {\n                requestAnimationFrame(function () { self.resize(true); });\n            } else {\n                self.resize(true);\n            }\n            return self;\n        };\n        /**\n         * Removes focus from the grid.\n         * @memberof canvasDatagrid\n         * @name blur\n         * @method\n         */\n        self.intf.blur = function (e) {\n            self.hasFocus = false;\n        };\n        /**\n         * Focuses on the grid.\n         * @memberof canvasDatagrid\n         * @name focus\n         * @method\n         */\n        self.intf.focus = function () {\n            self.hasFocus = true;\n            self.controlInput.focus();\n        };\n        if (self.shadowRoot || self.isChildGrid) {\n            Object.defineProperty(self.intf, 'height', {\n                get: function () {\n                    if (self.shadowRoot) {\n                        return self.shadowRoot.height;\n                    }\n                    return self.parentNode.height;\n                },\n                set: function (value) {\n                    if (self.shadowRoot) {\n                        self.shadowRoot.height = value;\n                    } else {\n                        self.parentNode.height = value;\n                    }\n                    self.resize(true);\n                }\n            });\n            Object.defineProperty(self.intf, 'width', {\n                get: function () {\n                    if (self.shadowRoot) {\n                        return self.shadowRoot.width;\n                    }\n                    return self.parentNode.width;\n                },\n                set: function (value) {\n                    if (self.shadowRoot) {\n                        self.shadowRoot.width = value;\n                    } else {\n                        self.parentNode.width = value;\n                    }\n                    self.resize(true);\n                }\n            });\n            Object.defineProperty(self.intf, 'parentNode', {\n                get: function () {\n                    return self.parentNode;\n                },\n                set: function (value) {\n                    if (!self.isChildGrid) {\n                        throw new TypeError('Cannot set property parentNode which has only a getter');\n                    }\n                    self.parentNode = value;\n                }\n            });\n        }\n        Object.defineProperty(self.intf, 'visibleRowHeights', {\n            get: function () {\n                return self.visibleRowHeights;\n            }\n        });\n        Object.defineProperty(self.intf, 'openChildren', {\n            get: function () {\n                return self.openChildren;\n            }\n        });\n        Object.defineProperty(self.intf, 'childGrids', {\n            get: function () {\n                return Object.keys(self.childGrids).map(function (gridId) {\n                    return self.childGrids[gridId];\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'isChildGrid', {\n            get: function () {\n                return self.isChildGrid;\n            }\n        });\n        Object.defineProperty(self, 'cursor', {\n            get: function () {\n                return self.parentNodeStyle.cursor;\n            },\n            set: function (value) {\n                if (value === 'cell') { value = 'default'; }\n                if (self.currentCursor !== value) {\n                    self.parentNodeStyle.cursor = value;\n                    self.currentCursor = value;\n                }\n            }\n        });\n        Object.defineProperty(self.intf, 'orderDirection', {\n            get: function () {\n                return self.orderDirection;\n            },\n            set: function (value) {\n                if (value !== 'desc') {\n                    value = 'asc';\n                }\n                self.orderDirection = value;\n                self.order(self.orderBy, self.orderDirection);\n            }\n        });\n        Object.defineProperty(self.intf, 'orderBy', {\n            get: function () {\n                return self.orderBy;\n            },\n            set: function (value) {\n                if (self.getSchema().find(function (col) {\n                        return col.name === value;\n                    }) === undefined) {\n                    throw new Error('Cannot sort by unknown column name.');\n                }\n                self.orderBy = value;\n                self.order(self.orderBy, self.orderDirection);\n            }\n        });\n        if (self.isComponent) {\n            Object.defineProperty(self.intf, 'offsetHeight', {\n                get: function () {\n                    return self.canvas.offsetHeight;\n                }\n            });\n            Object.defineProperty(self.intf, 'offsetWidth', {\n                get: function () {\n                    return self.canvas.offsetWidth;\n                }\n            });\n        }\n        Object.defineProperty(self.intf, 'scrollHeight', {\n            get: function () {\n                return self.scrollBox.scrollHeight;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollWidth', {\n            get: function () {\n                return self.scrollBox.scrollWidth;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollTop', {\n            get: function () {\n                return self.scrollBox.scrollTop;\n            },\n            set: function (value) {\n                self.scrollBox.scrollTop = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollLeft', {\n            get: function () {\n                return self.scrollBox.scrollLeft;\n            },\n            set: function (value) {\n                self.scrollBox.scrollLeft = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'sizes', {\n            get: function () {\n                return self.sizes;\n            }\n        });\n        Object.defineProperty(self.intf, 'input', {\n            get: function () {\n                return self.input;\n            }\n        });\n        Object.defineProperty(self.intf, 'controlInput', {\n            get: function () {\n                return self.controlInput;\n            }\n        });\n        Object.defineProperty(self.intf, 'currentCell', {\n            get: function () {\n                return self.currentCell;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleCells', {\n            get: function () {\n                return self.visibleCells;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRows', {\n            get: function () {\n                return self.visibleRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'selections', {\n            get: function () {\n                return self.selections;\n            }\n        });\n        Object.defineProperty(self.intf, 'dragMode', {\n            get: function () {\n                return self.dragMode;\n            }\n        });\n        Object.defineProperty(self.intf, 'changes', {\n            get: function () {\n                return self.changes;\n            }\n        });\n        self.intf.formatters = self.formatters;\n        Object.defineProperty(self.intf, 'type', {\n            get: function () {\n                return self.dataType;\n            },\n            set: function (value) {\n                if (!self.parsers[value]) {\n                    throw new Error('No parser for MIME type ' + value);\n                }\n                self.dataType = value;\n            }\n        });\n        self.eventNames.forEach(function (eventName) {\n            Object.defineProperty(self.intf, 'on' + eventName, {\n                get: function () {\n                    return self.componentL1Events[eventName];\n                },\n                set: function (value) {\n                    self.events[eventName] = [];\n                    self.componentL1Events[eventName] = value;\n                    if (!value) { return; }\n                    self.addEventListener(eventName, value);\n                }\n            });\n        });\n        Object.defineProperty(self.intf, 'frozenRow', {\n            get: function () {\n                return self.frozenRow;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.visibleRows.length < val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible rows.');\n                }\n                self.frozenRow = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'frozenColumn', {\n            get: function () {\n                return self.frozenColumn;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.getVisibleSchema().length < val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible columns.');\n                }\n                self.frozenColumn = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollIndexRect', {\n            get: function () {\n                return {\n                    top: self.scrollIndexTop,\n                    right: self.scrollIndexRight,\n                    bottom: self.scrollIndexBottom,\n                    left: self.scrollIndexLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollPixelRect', {\n            get: function () {\n                return {\n                    top: self.scrollPixelTop,\n                    right: self.scrollPixelRight,\n                    bottom: self.scrollPixelBottom,\n                    left: self.scrollPixelLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'selectionBounds', {\n            get: function () {\n                return self.getSelectionBounds();\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedRows', {\n            get: function () {\n                return self.getSelectedData(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedCells', {\n            get: function () {\n                return self.getSelectedData();\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleSchema', {\n            get: function () {\n                return self.getVisibleSchema().map(function eachDataRow(col) {\n                    return col;\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'treeGridAttributes', {\n            get: function () {\n                return self.treeGridAttributes;\n            },\n            set: function setTreeGridAttributes(value) {\n                self.treeGridAttributes = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'cellGridAttributes', {\n            get: function () {\n                return self.cellGridAttributes;\n            },\n            set: function setCellGridAttributes(value) {\n                self.cellGridAttributes = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'ctx', {\n            get: function () {\n                return self.ctx;\n            }\n        });\n        Object.defineProperty(self.intf, 'schema', {\n            get: function schemaGetter() {\n                return self.getSchema();\n            },\n            set: function schemaSetter(value) {\n                if (value === undefined) {\n                    // Issue #89 - allow schema to be set to initialized state\n                    self.schema = undefined;\n                    self.tempSchema = undefined;\n                    self.dispatchEvent('schemachanged', {schema: undefined});\n                    return;\n                }\n                if (!Array.isArray(value) || typeof value[0] !== 'object') {\n                    throw new Error('Schema must be an array of objects.');\n                }\n                if (value[0].name === undefined) {\n                    throw new Error('Expected schema to contain an object with at least a name property.');\n                }\n                self.schema = value.map(function eachSchemaColumn(column, index) {\n                    column.width = column.width || self.style.cellWidth;\n                    column.filter = column.filter || self.filter(column.type);\n                    column.type = column.type || 'string';\n                    column.index = index;\n                    column.columnIndex = index;\n                    column.rowIndex = -1;\n                    return column;\n                });\n                self.tempSchema = undefined;\n                self.createNewRowData();\n                self.createColumnOrders();\n                self.tryLoadStoredSettings();\n                if (self.storedSettings && typeof self.storedSettings.visibility === 'object') {\n                    self.schema.forEach(function hideEachSchemaColumn(column, index) {\n                        if (self.storedSettings && self.storedSettings.visibility[column.name] !== undefined) {\n                            column.hidden = !self.storedSettings.visibility[column.name];\n                        }\n                    });\n                }\n                self.resize(true);\n                self.dispatchEvent('schemachanged', {schema: self.schema});\n            }\n        });\n        /**\n         * Gets an array of currently registered MIME types.\n         * @memberof canvasDatagrid\n         * @name getDataTypes\n         * @method\n         */\n        self.intf.getTypes = function () {\n            return Object.keys(self.parsers);\n        };\n        self.parseInnerHtml = function (data) {\n            try {\n                data = JSON.parse(data);\n            } catch (e) {\n                throw new Error('Cannot parse application/json+x-canvas-datagrid formated data. '\n                    + e.message + '  \\nNote: canvas-datagrid.innerHTML is for string data only.  '\n                    + 'Use the canvas-datagrid.data property to set object data.');\n            }\n            return data;\n        };\n        self.parsers['application/json+x-canvas-datagrid'] = function (data, callback) {\n            self.parsers['application/x-canvas-datagrid'](self.parseInnerHtml(data), function (data, schema) {\n                return callback(data, schema);\n            });\n        };\n        self.parsers['application/x-canvas-datagrid'] = function (data, callback) {\n            return callback(data);\n        };\n        self.intf.parsers = self.parsers;\n        // send to dataType ETL function to extract from input data\n        // and transform into native [{}, {}] format\n        self.etl = function (data, callback) {\n            if (!self.intf.parsers[self.dataType]) {\n                throw new Error('Unsupported data type.');\n            }\n            self.intf.parsers[self.dataType](data, function (data, schema) {\n                if (Array.isArray(schema)) {\n                    self.schema = schema;\n                }\n                // Issue #89 - allow schema to be auto-created every time data is set\n                if (self.attributes.autoGenerateSchema) {\n                    self.schema = self.getSchemaFromData(data);\n                }\n                if (!self.schema) {\n                    self.tempSchema = self.getSchemaFromData(data);\n                }\n                if (self.getSchema()) {\n                    self.createColumnOrders();\n                }\n                // set the unfiltered/sorted data array\n                self.originalData = data;\n                //TODO apply filter to incoming dataset\n                self.data = self.originalData;\n                // empty data was set\n                if (!self.schema && self.data.length === 0) {\n                    self.tempSchema = [{name: ''}];\n                }\n                self.fitColumnToValues('cornerCell', true);\n                if ((self.tempSchema && !self.schema) || self.attributes.autoGenerateSchema) {\n                    self.createColumnOrders();\n                    self.dispatchEvent('schemachanged', {schema: self.tempSchema});\n                }\n                callback();\n            });\n        };\n        Object.defineProperty(self.intf, 'data', {\n            get: function dataGetter() {\n                return self.data;\n            },\n            set: function dataSetter(value) {\n                self.etl(value, function () {\n                    self.changes = [];\n                    self.createNewRowData();\n                    if (self.attributes.autoResizeColumns && self.data.length > 0\n                            && self.storedSettings === undefined) {\n                        self.autosize();\n                    }\n                    // set the header column to fit the numbers in it\n                    self.fitColumnToValues('cornerCell', true);\n                    self.createRowOrders();\n                    self.tryLoadStoredSettings();\n                    self.dispatchEvent('datachanged', {data: self.data});\n                    self.resize(true);\n                });\n            }\n        });\n        self.initScrollBox = function () {\n            var sHeight = 0,\n                sWidth = 0,\n                scrollTop = 0,\n                scrollLeft = 0,\n                scrollHeight = 0,\n                scrollWidth = 0,\n                scrollBoxHeight = 20,\n                scrollBoxWidth = 20;\n            function setScrollTop(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollTop value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollHeight) {\n                    value = scrollHeight;\n                }\n                if (scrollHeight < 0) {\n                    value = 0;\n                }\n                scrollTop = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            function setScrollLeft(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollLeft value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollWidth) {\n                    value = scrollWidth;\n                }\n                if (scrollWidth < 0) {\n                    value = 0;\n                }\n                scrollLeft = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            self.scrollBox.toString = function () {\n                return '{\"width\": ' + scrollWidth.toFixed(2)\n                    + ', \"height\": ' + scrollHeight.toFixed(2)\n                    + ', \"left\": ' + scrollLeft.toFixed(2)\n                    + ', \"top\": ' + scrollTop.toFixed(2)\n                    + ', \"widthRatio\": ' + self.scrollBox.widthBoxRatio.toFixed(5)\n                    + ', \"heightRatio\": ' + self.scrollBox.heightBoxRatio.toFixed(5) + '}';\n            };\n            self.scrollBox.scrollTo = function (x, y, supressDrawEvent) {\n                setScrollLeft(x, true);\n                setScrollTop(y, supressDrawEvent);\n            };\n            Object.defineProperty(self.scrollBox, 'scrollBoxHeight', {\n                get: function () {\n                    return scrollBoxHeight;\n                },\n                set: function (value) {\n                    scrollBoxHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollBoxWidth', {\n                get: function () {\n                    return scrollBoxWidth;\n                },\n                set: function (value) {\n                    scrollBoxWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'height', {\n                get: function () {\n                    return sHeight;\n                },\n                set: function (value) {\n                    if (scrollHeight < value) {\n                        scrollTop = 0;\n                    }\n                    sHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'width', {\n                get: function () {\n                    return sWidth;\n                },\n                set: function (value) {\n                    sWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollTop', {\n                get: function () {\n                    return scrollTop;\n                },\n                set: setScrollTop\n            });\n            Object.defineProperty(self.scrollBox, 'scrollLeft', {\n                get: function () {\n                    return scrollLeft;\n                },\n                set: setScrollLeft\n            });\n            Object.defineProperty(self.scrollBox, 'scrollHeight', {\n                get: function () {\n                    return scrollHeight;\n                },\n                set: function (value) {\n                    if (scrollTop > value) {\n                        scrollTop = Math.max(value, 0);\n                    }\n                    if (scrollHeight < sHeight) {\n                        scrollTop = 0;\n                    }\n                    scrollHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollWidth', {\n                get: function () {\n                    return scrollWidth;\n                },\n                set: function (value) {\n                    if (scrollLeft > value) {\n                        scrollLeft = Math.max(value, 0);\n                    }\n                    scrollWidth = value;\n                }\n            });\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/intf.js\n// module id = 6\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false, Event: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var zIndexTop, hoverScrollTimeout, autoCompleteContext;\n        function applyContextItemStyle(contextItemContainer) {\n            self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item' + (self.mobile ? '-mobile' : ''));\n            contextItemContainer.addEventListener('mouseover', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n            });\n            contextItemContainer.addEventListener('mouseout', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n            });\n        }\n        function createContextMenu(ev, pos, items, parentContextMenu) {\n            var container = document.createElement('div'),\n                upArrow = document.createElement('div'),\n                downArrow = document.createElement('div'),\n                children = [],\n                selectedIndex = -1,\n                intf = {},\n                rect;\n            if (!Array.isArray(items)) { throw new Error('createContextMenu expects an array.'); }\n            function createItems() {\n                items.forEach(function (item) {\n                    var contextItemContainer = document.createElement('div'),\n                        childMenuArrow;\n                    function removeChildContext(e) {\n                        if (e.relatedTarget === container\n                                || item.contextMenu.container === e.relatedTarget\n                                || childMenuArrow === e.relatedTarget\n                                || (contextItemContainer === e.relatedTarget)\n                                || item.contextMenu.container.contains(e.relatedTarget)\n                                ) { return; }\n                        item.contextMenu.dispose();\n                        children.splice(children.indexOf(item.contextMenu), 1);\n                        item.contextMenu = undefined;\n                        contextItemContainer.removeEventListener('mouseout', removeChildContext);\n                        container.removeEventListener('mouseout', removeChildContext);\n                        contextItemContainer.setAttribute('contextOpen', '0');\n                        contextItemContainer.setAttribute('opening', '0');\n                    }\n                    function contextAddCallback(items) {\n                        // check yet again if the user hasn't moved off\n                        if (contextItemContainer.getAttribute('opening') !== '1' ||\n                                contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        var cPos = contextItemContainer.getBoundingClientRect();\n                        cPos = {\n                            left: cPos.left + self.style.childContextMenuMarginLeft + container.offsetWidth,\n                            top: cPos.top + self.style.childContextMenuMarginTop,\n                            bottom: cPos.bottom,\n                            right: cPos.right\n                        };\n                        item.contextMenu = createContextMenu(ev, cPos, items, intf);\n                        contextItemContainer.setAttribute('contextOpen', '1');\n                        contextItemContainer.addEventListener('mouseout', removeChildContext);\n                        container.addEventListener('mouseout', removeChildContext);\n                        children.push(item.contextMenu);\n                    }\n                    function createChildContext() {\n                        var i;\n                        if (contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        contextItemContainer.setAttribute('opening', '1');\n                        if (typeof item.items === 'function') {\n                            i  = item.items.apply(intf, [function (items) {\n                                contextAddCallback(items);\n                            }]);\n                            if (i !== undefined && Array.isArray(i)) {\n                                contextAddCallback(i);\n                            }\n                            return;\n                        }\n                        contextAddCallback(item.items);\n                    }\n                    function addItem(item) {\n                        function addContent(content) {\n                            if (content === null) { return; }\n                            if (typeof content === 'function') {\n                                return addContent(content(ev));\n                            }\n                            if (typeof content === 'object') {\n                                contextItemContainer.appendChild(content);\n                                return;\n                            }\n                            applyContextItemStyle(contextItemContainer);\n                            contextItemContainer.innerHTML = content;\n                            return;\n                        }\n                        addContent(item.title);\n                        item.contextItemContainer = contextItemContainer;\n                        if ((item.items && item.items.length > 0) || typeof item.items === 'function') {\n                            childMenuArrow = document.createElement('div');\n                            self.createInlineStyle(childMenuArrow, 'canvas-datagrid-context-child-arrow');\n                            childMenuArrow.innerHTML = self.style.childContextMenuArrowHTML;\n                            contextItemContainer.appendChild(childMenuArrow);\n                            contextItemContainer.addEventListener('mouseover', createChildContext);\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                contextItemContainer.setAttribute('opening', '0');\n                            });\n                        }\n                        if (item.click) {\n                            contextItemContainer.addEventListener('click', function (ev) {\n                                item.click.apply(self, [ev]);\n                            });\n                        }\n                    }\n                    addItem(item);\n                    container.appendChild(contextItemContainer);\n                });\n            }\n            function clickIndex(idx) {\n                items[idx].contextItemContainer.dispatchEvent(new Event('click'));\n            }\n            function checkArrowVisibility() {\n                if (container.scrollTop > 0) {\n                    self.parentDOMNode.appendChild(upArrow);\n                } else if (upArrow.parentNode) {\n                    upArrow.parentNode.removeChild(upArrow);\n                }\n                if (container.scrollTop >= container.scrollHeight - container.offsetHeight && downArrow.parentNode) {\n                    downArrow.parentNode.removeChild(downArrow);\n                } else if (container.scrollHeight - container.offsetHeight > 0\n                        && !(container.scrollTop >= container.scrollHeight - container.offsetHeight)) {\n                    self.parentDOMNode.appendChild(downArrow);\n                }\n            }\n            function startHoverScroll(type) {\n                return function t() {\n                    var a = self.attributes.contextHoverScrollAmount;\n                    if (type === 'up' && container.scrollTop === 0) { return; }\n                    if (type === 'down' && container.scrollTop === container.scrollHeight) { return; }\n                    container.scrollTop += (type === 'up' ? -a : a);\n                    hoverScrollTimeout = setTimeout(t, self.attributes.contextHoverScrollRateMs, type);\n                };\n            }\n            function endHoverScroll(type) {\n                return function () {\n                    clearTimeout(hoverScrollTimeout);\n                };\n            }\n            function init() {\n                var loc = {},\n                    s = self.scrollOffset(self.canvas);\n                if (zIndexTop === undefined) {\n                    zIndexTop = self.style.contextMenuZIndex;\n                }\n                createItems();\n                self.createInlineStyle(container, 'canvas-datagrid-context-menu' + (self.mobile ? '-mobile' : ''));\n                loc.x = pos.left - s.left;\n                loc.y = pos.top - s.top;\n                loc.height = 0;\n                zIndexTop += 1;\n                container.style.position = 'absolute';\n                upArrow.style.color = self.style.contextMenuArrowColor;\n                downArrow.style.color = self.style.contextMenuArrowColor;\n                [upArrow, downArrow].forEach(function (el) {\n                    el.style.textAlign = 'center';\n                    el.style.position = 'absolute';\n                    el.style.zIndex = zIndexTop + 1;\n                });\n                container.style.zIndex = zIndexTop;\n                if (parentContextMenu && parentContextMenu.inputDropdown) {\n                    container.style.maxHeight = window.innerHeight - loc.y - self.style.autocompleteBottomMargin + 'px';\n                    container.style.minWidth = pos.width + 'px';\n                    loc.y += pos.height;\n                }\n                if (self.mobile) {\n                    container.style.width = pos.width + 'px';\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                container.addEventListener('scroll', checkArrowVisibility);\n                container.addEventListener('wheel', function (e) {\n                    if (self.hasFocus) {\n                        container.scrollTop += e.deltaY;\n                        container.scrollLeft += e.deltaX;\n                    }\n                    checkArrowVisibility();\n                });\n                upArrow.innerHTML = self.style.contextMenuArrowUpHTML;\n                downArrow.innerHTML = self.style.contextMenuArrowDownHTML;\n                container.appendChild(upArrow);\n                document.body.appendChild(downArrow);\n                document.body.appendChild(container);\n                rect = container.getBoundingClientRect();\n                // TODO: fix !(parentContextMenu && parentContextMenu.inputDropdown) state (autocomplete)\n                if (rect.bottom > window.innerHeight) {\n                    if (!(parentContextMenu && parentContextMenu.inputDropdown)) {\n                        loc.y -= (rect.bottom + self.style.contextMenuWindowMargin) - window.innerHeight;\n                    }\n                    if (loc.y < 0) { loc.y = self.style.contextMenuWindowMargin; }\n                    if (container.offsetHeight > window.innerHeight - self.style.contextMenuWindowMargin) {\n                        container.style.height = window.innerHeight - (self.style.contextMenuWindowMargin * 2) + 'px';\n                    }\n                }\n                if (rect.right > window.innerWidth) {\n                    loc.x -= rect.right - window.innerWidth + self.style.contextMenuWindowMargin;\n                }\n                if (loc.x < 0) { loc.x = self.style.contextMenuWindowMargin; }\n                if (loc.y < 0) { loc.y = self.style.contextMenuWindowMargin; }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                rect = container.getBoundingClientRect();\n                upArrow.style.top = rect.top + 'px';\n                downArrow.style.top = rect.top + rect.height - downArrow.offsetHeight + 'px';\n                upArrow.style.left = rect.left + 'px';\n                downArrow.style.left = rect.left + 'px';\n                downArrow.style.width = container.offsetWidth + 'px';\n                upArrow.style.width = container.offsetWidth + 'px';\n                downArrow.addEventListener('mouseover', startHoverScroll('down'));\n                downArrow.addEventListener('mouseout', endHoverScroll('down'));\n                upArrow.addEventListener('mouseover', startHoverScroll('up'));\n                upArrow.addEventListener('mouseout', endHoverScroll('up'));\n                checkArrowVisibility();\n            }\n            intf.parentGrid = self.intf;\n            intf.parentContextMenu = parentContextMenu;\n            intf.container = container;\n            init();\n            intf.clickIndex = clickIndex;\n            intf.rect = rect;\n            intf.items = items;\n            intf.upArrow = upArrow;\n            intf.downArrow = downArrow;\n            intf.dispose = function () {\n                clearTimeout(hoverScrollTimeout);\n                children.forEach(function (c) {\n                    c.dispose();\n                });\n                [downArrow, upArrow, container].forEach(function (el) {\n                    if (el.parentNode) { el.parentNode.removeChild(el); }\n                });\n            };\n            Object.defineProperty(intf, 'selectedIndex', {\n                get: function () {\n                    return selectedIndex;\n                },\n                set: function (value) {\n                    if (typeof value !== 'number' || isNaN(value || !isFinite(value))) {\n                        throw new Error('Context menu selected index must be a sane number.');\n                    }\n                    selectedIndex = value;\n                    if (selectedIndex > items.length - 1) {\n                        selectedIndex = items.length - 1;\n                    }\n                    if (selectedIndex < 0) {\n                        selectedIndex = 0;\n                    }\n                    items.forEach(function (item, index) {\n                        if (index === selectedIndex) {\n                            return self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                        }\n                        self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item');\n                    });\n                }\n            });\n            return intf;\n        }\n        function createFilterContextMenuItems(e) {\n            var filterContainer = document.createElement('div'),\n                filterLabel = document.createElement('div'),\n                filterAutoCompleteButton = document.createElement('button'),\n                filterInput = document.createElement('input'),\n                n = e.cell && e.cell.header ? e.cell.header.title || e.cell.header.name : '',\n                autoCompleteItems,\n                iRect;\n            function checkRegExpErrorState() {\n                filterInput.style.background = self.style.contextFilterInputBackground;\n                filterInput.style.color = self.style.contextFilterInputColor;\n                if (self.invalidFilterRegEx) {\n                    filterInput.style.background = self.style.contextFilterInvalidRegExpBackground;\n                    filterInput.style.color = self.style.contextFilterInvalidRegExpColor;\n                }\n            }\n            function fillAutoComplete() {\n                var count = 0;\n                autoCompleteItems = {};\n                self.data.forEach(function (row) {\n                    var value = row[e.cell.header.name];\n                    if (autoCompleteItems[value] || count > self.attributes.maxAutoCompleteItems) { return; }\n                    count += 1;\n                    autoCompleteItems[value] = {\n                        title: self.formatters[e.cell.header.type || 'string']({ cell: { value: value }}),\n                        click: function (e) {\n                            filterInput.value = value;\n                            e.stopPropagation();\n                            filterInput.dispatchEvent(new Event('keyup'));\n                            self.disposeAutocomplete();\n                            return;\n                        }\n                    };\n                });\n                autoCompleteItems = Object.keys(autoCompleteItems).map(function (key) {\n                    return autoCompleteItems[key];\n                });\n            }\n            function createAutoCompleteContext(ev) {\n                if (ev && [40, 38, 13, 9].indexOf(ev.keyCode) !== -1) { return; }\n                fillAutoComplete();\n                iRect = filterInput.getBoundingClientRect();\n                if (autoCompleteContext) {\n                    autoCompleteContext.dispose();\n                    autoCompleteContext = undefined;\n                }\n                autoCompleteContext = createContextMenu(e, {\n                    left: iRect.left,\n                    top: iRect.top,\n                    right: iRect.right,\n                    bottom: iRect.bottom,\n                    height: iRect.height,\n                    width: iRect.width\n                }, autoCompleteItems, {inputDropdown: true});\n                autoCompleteContext.selectedIndex = 0;\n            }\n            self.createInlineStyle(filterLabel, 'canvas-datagrid-context-menu-label');\n            self.createInlineStyle(filterAutoCompleteButton, 'canvas-datagrid-context-menu-filter-button');\n            self.createInlineStyle(filterInput, 'canvas-datagrid-context-menu-filter-input');\n            checkRegExpErrorState();\n            filterInput.onclick = self.disposeAutocomplete;\n            filterInput.addEventListener('keydown', function (e) {\n                //down\n                if (e.keyCode === 40) {\n                    autoCompleteContext.selectedIndex += 1;\n                }\n                //up\n                if (e.keyCode === 38) {\n                    autoCompleteContext.selectedIndex -= 1;\n                }\n                //enter\n                if (e.keyCode === 13) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    self.disposeContextMenu();\n                }\n                //tab\n                if (e.keyCode === 9) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    e.preventDefault();\n                }\n                //esc\n                if (e.keyCode === 27) {\n                    self.disposeContextMenu();\n                }\n            });\n            filterInput.addEventListener('keyup', function () {\n                self.setFilter(e.cell.header.name, filterInput.value);\n            });\n            filterInput.addEventListener('keyup', createAutoCompleteContext);\n            ['focus', 'blur', 'keydown', 'keyup', 'change'].forEach(function (en) {\n                filterInput.addEventListener(en, checkRegExpErrorState);\n            });\n            filterInput.value = e.cell.header ? self.columnFilters[e.cell.header.name] || '' : '';\n            filterLabel.innerHTML = self.attributes.filterOptionText.replace(/%s/g, n);\n            filterAutoCompleteButton.onclick = function () {\n                if (autoCompleteContext) {\n                    return self.disposeAutocomplete();\n                }\n                createAutoCompleteContext();\n            };\n            filterAutoCompleteButton.innerHTML = self.style.contextFilterButtonHTML;\n            filterContainer.addEventListener('click', function (e) {\n                return e.stopPropagation();\n            });\n            filterContainer.appendChild(filterLabel);\n            filterContainer.appendChild(filterInput);\n            filterContainer.appendChild(filterAutoCompleteButton);\n            e.items.push({\n                title: filterContainer\n            });\n            if (Object.keys(self.columnFilters).length) {\n                Object.keys(self.columnFilters).forEach(function (cf) {\n                    var h = self.getHeaderByName(cf);\n                    e.items.push({\n                        title: self.attributes.removeFilterOptionText.replace(/%s/g, h.title || h.name),\n                        click: function removeFilterClick(e) {\n                            e.preventDefault();\n                            self.setFilter(cf, '');\n                            self.controlInput.focus();\n                        }\n                    });\n                });\n            }\n        }\n        function addDefaultContextMenuItem(e) {\n            var isNormalCell = !(e.cell.isBackground || e.cell.isColumnHeaderCellCap\n                    || e.cell.isScrollBar || e.cell.isCorner || e.cell.isRowHeader)\n                    && e.cell.header;\n            if (self.attributes.showFilter && isNormalCell) {\n                createFilterContextMenuItems(e);\n            }\n            if (self.attributes.showCopy\n                    && self.selections.reduce(function (p, r) {\n                        return p + r.length;\n                    }, 0) > 0) {\n                e.items.push({\n                    title: self.attributes.copyText,\n                    click: function () {\n                        document.execCommand('copy');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.showPaste && self.clipBoardData) {\n                e.items.push({\n                    title: self.attributes.pasteText,\n                    click: function () {\n                        self.paste(self.clipBoardData, e.cell.columnIndex, e.cell.rowIndex);\n                        self.draw();\n                    }\n                });\n            }\n            if (self.attributes.showColumnSelector) {\n                e.items.push({\n                    title: self.attributes.columnSelectorText,\n                    items: function () {\n                        var d = [];\n                        self.getSchema().forEach(function (column) {\n                            function toggleColumnVisibility(e) {\n                                column.hidden = !column.hidden;\n                                e.preventDefault();\n                                self.stopPropagation(e);\n                                self.disposeContextMenu();\n                                self.resize(true);\n                                self.setStorageData();\n                            }\n                            var el = document.createElement('div');\n                            applyContextItemStyle(el);\n                            el.addEventListener('touchstart', toggleColumnVisibility);\n                            el.addEventListener('click', toggleColumnVisibility);\n                            el.innerHTML = (column.hidden ? self.attributes.columnSelectorHiddenText\n                                    : self.attributes.columnSelectorVisibleText)\n                                    + (column.title || column.name);\n                            d.push({\n                                title: el\n                            });\n                        });\n                        return d;\n                    }\n                });\n                if (e.cell && e.cell.header) {\n                    e.items.push({\n                        title: self.attributes.hideColumnText\n                            .replace(/%s/ig, e.cell.header.title || e.cell.header.name),\n                        click: function (ev) {\n                            e.cell.header.hidden = true;\n                            ev.preventDefault();\n                            self.stopPropagation(ev);\n                            self.disposeContextMenu();\n                            self.setStorageData();\n                            setTimeout(function () { self.resize(true); }, 10);\n                        }\n                    });\n                }\n            }\n            if (self.attributes.saveAppearance && self.attributes.showClearSettingsOption\n                    && (Object.keys(self.sizes.rows).length > 0\n                        || Object.keys(self.sizes.columns).length > 0)) {\n                e.items.push({\n                    title: self.attributes.clearSettingsOptionText,\n                    click: function (e) {\n                        e.preventDefault();\n                        self.sizes.rows = {};\n                        self.sizes.columns = {};\n                        self.createRowOrders();\n                        self.createColumnOrders();\n                        self.storedSettings = undefined;\n                        self.dispatchEvent('resizecolumn', {columnWidth: self.style.cellWidth});\n                        self.dispatchEvent('resizerow', {cellHeight: self.style.cellHeight});\n                        self.setStorageData();\n                        self.resize(true);\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.allowSorting && self.attributes.showOrderByOption && isNormalCell) {\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextAsc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'asc');\n                        self.controlInput.focus();\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextDesc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'desc');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n        }\n        self.disposeAutocomplete = function () {\n            if (autoCompleteContext) {\n                autoCompleteContext.dispose();\n                autoCompleteContext = undefined;\n            }\n        };\n        self.disposeContextMenu = function () {\n            document.removeEventListener('click', self.disposeContextMenu);\n            zIndexTop = self.style.contextMenuZIndex;\n            self.disposeAutocomplete();\n            if (self.contextMenu) {\n                self.contextMenu.dispose();\n            }\n            self.contextMenu = undefined;\n        };\n        self.contextmenuEvent = function (e, overridePos) {\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            function createDiposeEvent() {\n                requestAnimationFrame(function () {\n                    document.addEventListener('click', self.disposeContextMenu);\n                    document.removeEventListener('mouseup', createDiposeEvent);\n                });\n            }\n            var contextPosition,\n                items = [],\n                pos = overridePos || self.getLayerPos(e),\n                ev = {\n                    NativeEvent: e,\n                    cell: self.getCellAt(pos.x, pos.y),\n                    items: items\n                };\n            if (!ev.cell.isGrid) {\n                addDefaultContextMenuItem(ev);\n            }\n            if (self.dispatchEvent('contextmenu', ev)) {\n                return;\n            }\n            if (!ev.cell.isGrid) {\n                if (self.contextMenu) {\n                    self.disposeContextMenu();\n                }\n                contextPosition = {\n                    left: pos.x + pos.rect.left\n                        + self.style.contextMenuMarginLeft + self.canvasOffsetLeft,\n                    top: pos.y + pos.rect.top\n                        + self.style.contextMenuMarginTop + self.canvasOffsetTop,\n                    right: ev.cell.width + ev.cell.x + pos.rect.left,\n                    bottom: ev.cell.height + ev.cell.y + pos.rect.top,\n                    height: ev.cell.height,\n                    width: ev.cell.width\n                };\n                if (self.mobile) {\n                    contextPosition.left = self.style.mobileContextMenuMargin + 'px';\n                    contextPosition.width = self.width - (self.style.mobileContextMenuMargin * 2) + 'px';\n                }\n                self.contextMenu = createContextMenu(ev, contextPosition, items);\n                document.addEventListener('mouseup', createDiposeEvent);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/contextMenu.js\n// module id = 7\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.getClippingRect = function (ele) {\n            var boundingRect = self.position(self.parentNode),\n                eleRect = self.position(ele),\n                s = self.scrollOffset(self.canvas),\n                clipRect = {\n                    x: 0,\n                    y: 0,\n                    h: 0,\n                    w: 0\n                },\n                parentRect = {\n                    x: -Infinity,\n                    y: -Infinity,\n                    h: Infinity,\n                    w: Infinity\n                },\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth();\n            boundingRect.top -= s.top;\n            boundingRect.left -= s.left;\n            eleRect.top -= s.top;\n            eleRect.left -= s.left;\n            clipRect.h = boundingRect.top + boundingRect.height - ele.offsetTop - self.style.scrollBarWidth;\n            clipRect.w = boundingRect.left + boundingRect.width - ele.offsetLeft - self.style.scrollBarWidth;\n            clipRect.x = boundingRect.left + (eleRect.left * -1) + rowHeaderCellWidth;\n            clipRect.y = boundingRect.top + (eleRect.top * -1) + columnHeaderCellHeight;\n            return {\n                x: clipRect.x > parentRect.x ? clipRect.x : parentRect.x,\n                y: clipRect.y > parentRect.y ? clipRect.y : parentRect.y,\n                h: clipRect.h < parentRect.h ? clipRect.h : parentRect.h,\n                w: clipRect.w < parentRect.w ? clipRect.w : parentRect.w\n            };\n        };\n        self.clipElement = function (ele) {\n            var clipRect = self.getClippingRect(ele);\n            if (clipRect.w < 0) { clipRect.w = 0; }\n            if (clipRect.h < 0) { clipRect.h = 0; }\n            ele.style.clip = 'rect('\n                + clipRect.y + 'px,'\n                + clipRect.w + 'px,'\n                + clipRect.h + 'px,'\n                + clipRect.x + 'px'\n                + ')';\n            // INFO https://developer.mozilla.org/en-US/docs/Web/CSS/clip\n            // clip has been \"deprecated\" for clipPath.  Of course nothing but chrome\n            // supports clip path, so we'll keep using clip until someday clipPath becomes\n            // more widely support.  The code below works correctly, but setting clipPath and clip\n            // at the same time has undesirable results.\n            // ele.style.clipPath = 'polygon('\n            //     + clipRect.x + 'px ' + clipRect.y + 'px,'\n            //     + clipRect.x + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.y + 'px'\n            //     + ')';\n        };\n        self.scrollOffset = function (e) {\n            var x = 0, y = 0;\n            while (e.parentNode && e.nodeName !== 'CANVAS-DATAGRID' && e !== self.intf) {\n                if (e.nodeType !== 'canvas-datagrid-tree'\n                        && e.nodeType !== 'canvas-datagrid-cell') {\n                    x -= e.scrollLeft;\n                    y -= e.scrollTop;\n                }\n                e = e.parentNode;\n            }\n            return {\n                left: x - document.scrollingElement.scrollLeft,\n                top: y - document.scrollingElement.scrollTop\n            };\n        };\n        self.resizeEditInput = function () {\n            if (self.input && self.input.editCell) {\n                var pos = self.canvas.getBoundingClientRect(),\n                    s = self.scrollOffset(self.intf),\n                    bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                    borderWidth = (self.style.cellBorderWidth * bm),\n                    cell = self.getVisibleCellByIndex(self.input.editCell.columnIndex, self.input.editCell.rowIndex)\n                        || {x: -100, y: -100, height: 0, width: 0};\n                if (self.mobile) {\n                    self.input.style.left = '0';\n                    self.input.style.top = (self.height - self.style.mobileEditInputHeight) - borderWidth - 1 + 'px';\n                    self.input.style.height = self.style.mobileEditInputHeight + 'px';\n                    self.input.style.width = self.width - borderWidth - 1 + 'px';\n                    return;\n                }\n                self.input.style.left = pos.left + cell.x + self.canvasOffsetLeft - s.left + 'px';\n                self.input.style.top = pos.top + cell.y - self.style.cellBorderWidth + self.canvasOffsetTop - s.top + 'px';\n                self.input.style.height = cell.height - borderWidth + 'px';\n                self.input.style.width = cell.width - self.style.cellPaddingLeft + 'px';\n                self.clipElement(self.input);\n            }\n        };\n        self.position = function (e, ignoreScrollOffset) {\n            var x = 0, y = 0, s = e, h, w;\n            while (e.offsetParent && e.nodeName !== 'CANVAS-DATAGRID') {\n                x += e.offsetLeft;\n                y += e.offsetTop;\n                h = e.offsetHeight;\n                w = e.offsetWidth;\n                e = e.offsetParent;\n            }\n            if (ignoreScrollOffset) {\n                return {left: x, top: y, height: h, width: w};\n            }\n            e = s;\n            s = self.scrollOffset(e);\n            return { left: x + s.left, top: y + s.top, height: h, width: w };\n        };\n        self.getLayerPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.clientX - rect.left,\n                    y: e.clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        /**\n         * Ends editing, optionally aborting the edit.\n         * @memberof canvasDatagrid\n         * @name endEdit\n         * @method\n         * @param {boolean} abort When true, abort the edit.\n         */\n        self.endEdit = function (abort) {\n            var cell = self.input.editCell,\n                y = cell.rowIndex;\n            function abortEdit() {\n                abort = true;\n            }\n            if (self.dispatchEvent('beforeendedit', {\n                    cell: cell,\n                    newValue: self.input.value,\n                    oldValue: cell.value,\n                    abort: abortEdit,\n                    input: self.input\n                })) { return false; }\n            if (self.input.value !== cell.value && !abort) {\n                self.changes[y] = self.changes[y] || {};\n                self.changes[y][cell.header.name] = self.input.value;\n                if (!cell.data) {\n                    self.data[cell.rowIndex] = {};\n                    cell.data = self.data[cell.rowIndex];\n                }\n                cell.data[cell.header.name] = self.input.value;\n                if (y === self.data.length) {\n                    if (self.dispatchEvent('newrow', {\n                            value: self.input.value,\n                            defaultValue: cell.value,\n                            aborted: abort,\n                            cell: cell,\n                            input: self.input\n                        })) { return false; }\n                    self.addRow(cell.data);\n                    self.createNewRowData();\n                }\n                self.draw(true);\n            }\n            document.body.removeChild(self.input);\n            self.intf.focus();\n            self.dispatchEvent('endedit', {\n                cell: cell,\n                value: self.input.value,\n                aborted: abort,\n                input: self.input\n            });\n            self.input = undefined;\n            return true;\n        };\n        /**\n         * Begins editing at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name beginEditAt\n         * @method\n         * @param {number} x The column index of the cell to edit.\n         * @param {number} y The row index of the cell to edit.\n         */\n        self.beginEditAt = function (x, y) {\n            if (!self.attributes.editable) { return; }\n            if (self.input) {\n                self.endEdit();\n            }\n            var cell = self.getVisibleCellByIndex(x, y),\n                s = self.getSchema(),\n                adjacentCells,\n                enumItems,\n                enu,\n                option,\n                valueInEnum;\n            if (!(cell && cell.header)) { return; }\n            //HACK for IE10, does not like literal enum\n            enu = cell.header['enum'];\n            if (self.dispatchEvent('beforebeginedit', {cell: cell})) { return false; }\n            self.scrollIntoView(x, y);\n            self.setActiveCell(x, y);\n            adjacentCells = self.getAdjacentCells();\n            if (enu) {\n                self.input = document.createElement('select');\n            } else {\n                self.input = document.createElement(self.attributes.multiLine\n                    ? 'textarea' : 'input');\n            }\n            cell = self.getVisibleCellByIndex(x, y);\n            //HACK on mobile devices sometimes edit can begin without the cell being in view, I don't know how.\n            if (!cell) { return; }\n            if (enu) {\n                // add enums\n                if (typeof enu === 'function') {\n                    enumItems = enu.apply(self.intf, [{cell: cell}]);\n                } else if (Array.isArray(enu)) {\n                    enumItems = enu;\n                }\n                enumItems.forEach(function (e) {\n                    var i = document.createElement('option'),\n                        val,\n                        title;\n                    if (Array.isArray(e)) {\n                        val = e[0];\n                        title = e[1];\n                    } else {\n                        val = e;\n                        title = e;\n                    }\n                    if (val === cell.value) { valueInEnum = true; }\n                    i.value = val;\n                    i.innerHTML = title;\n                    self.input.appendChild(i);\n                });\n                if (!valueInEnum) {\n                    option = document.createElement('option');\n                    option.value = cell.value;\n                    option.innerHTML = cell.value;\n                    self.input.appendChild(option);\n                }\n                self.input.addEventListener('change', function () {\n                    self.endEdit();\n                    self.draw(true);\n                });\n            }\n            document.body.appendChild(self.input);\n            self.createInlineStyle(self.input, self.mobile ? 'canvas-datagrid-edit-mobile-input' : 'canvas-datagrid-edit-input');\n            self.input.style.position = 'absolute';\n            self.input.editCell = cell;\n            self.resizeEditInput();\n            self.input.style.zIndex = self.style.editCellZIndex;\n            self.input.style.fontSize = (parseInt(self.style.editCellFontSize, 10) * self.scale) + 'px';\n            self.input.value = [null, undefined].indexOf(cell.value) !== -1 ? '' : cell.value;\n            self.input.focus();\n            self.input.addEventListener('click', self.stopPropagation);\n            self.input.addEventListener('dblclick', self.stopPropagation);\n            self.input.addEventListener('mouseup', self.stopPropagation);\n            self.input.addEventListener('mousedown', self.stopPropagation);\n            self.input.addEventListener('keydown', function (e) {\n                var nx = cell.columnIndex,\n                    ny = cell.rowIndex;\n                // esc\n                if (e.keyCode === 27) {\n                    self.endEdit(true);\n                    self.draw(true);\n                // enter\n                } else if (e.keyCode === 13\n                        && (!self.attributes.multiLine\n                            || (self.attributes.multiLine && e.shiftKey))) {\n                    self.endEdit();\n                    self.draw(true);\n                } else if (e.keyCode === 9) {\n                    e.preventDefault();\n                    if (!self.endEdit()) {\n                        return;\n                    }\n                    if (e.shiftKey) {\n                        nx = adjacentCells.left;\n                    } else {\n                        nx = adjacentCells.right;\n                    }\n                    if (adjacentCells.left === x && e.shiftKey) {\n                        nx = adjacentCells.last;\n                        ny -= 1;\n                    }\n                    if (adjacentCells.right === x && !e.shiftKey) {\n                        nx = adjacentCells.first;\n                        ny += 1;\n                    }\n                    if (ny < 0) {\n                        ny = self.data.length - 1;\n                    }\n                    if (ny > self.data.length - 1) {\n                        ny = 0;\n                    }\n                    console.log('nx', nx, 'ny', ny);\n                    self.scrollIntoView(nx, ny);\n                    self.beginEditAt(nx, ny);\n                }\n            });\n            self.dispatchEvent('beginedit', {cell: cell, input: self.input});\n        };\n        self.createInlineStyle = function (el, className) {\n            var css = {\n                'canvas-datagrid-context-menu-filter-input': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextFilterInputBackground,\n                    color: self.style.contextFilterInputColor,\n                    border: self.style.contextFilterInputBorder,\n                    borderRadius: self.style.contextFilterInputBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextFilterInputFontFamily,\n                    fontSize: self.style.contextFilterInputFontSize\n                },\n                'canvas-datagrid-context-menu-filter-button': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextFilterButtonBorder,\n                    borderRadius: self.style.contextFilterButtonBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFilterButtonFontFamily,\n                    fontSize: self.style.contextMenuFilterButtonFontSize\n                },\n                'canvas-datagrid-context-child-arrow': {\n                    cssFloat: 'right',\n                    color: self.style.childContextMenuArrowColor,\n                    fontSize: self.style.contextMenuChildArrowFontSize,\n                    fontFamily: self.style.contextMenuFontFamily,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-autocomplete': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    position: 'absolute',\n                    zIndex: 9999,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-autocomplete-item': {\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor\n                },\n                'canvas-datagrid-autocomplete-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-canvas': {\n                    position: 'absolute',\n                    zIndex: '-1'\n                },\n                'canvas-datagrid': {\n                    display: 'block'\n                },\n                'canvas-datagrid-control-input': {\n                    position: 'fixed',\n                    top: '-5px',\n                    left: '-5px',\n                    border: 'none',\n                    opacity: '0',\n                    cursor: 'pointer',\n                    width: '1px',\n                    height: '1px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize\n                },\n                'canvas-datagrid-edit-mobile-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 0',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.mobileEditFontFamily,\n                    fontSize: self.style.mobileEditFontSize,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-edit-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 ' + self.style.editCellPaddingLeft + 'px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.editCellFontFamily,\n                    fontSize: self.style.editCellFontSize,\n                    boxShadow: self.style.editCellBoxShadow,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-context-menu-item-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-context-menu-label': {\n                    margin: self.style.contextMenuLabelMargin,\n                    display: self.style.contextMenuLabelDisplay,\n                    minWidth: self.style.contextMenuLabelMinWidth,\n                    maxWidth: self.style.contextMenuLabelMaxWidth\n                },\n                'canvas-datagrid-context-menu-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-context-menu': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-invalid-search-regExp': {\n                    background: self.style.contextMenuFilterInvalidExpresion\n                }\n            };\n            if (css[className]) {\n                Object.keys(css[className]).map(function (prop) {\n                    el.style[prop] = css[className][prop];\n                });\n            }\n            return;\n        };\n        self.appendTo = function (e) {\n            self.parentNode = e;\n            self.setDom();\n        };\n        self.setDom = function () {\n            if (self.isChildGrid) {\n                self.parentGrid = self.parentNode.parentGrid;\n                self.ctx = self.parentGrid.context;\n                self.canvas = self.parentGrid.canvas;\n                self.controlInput = self.parentGrid.controlInput;\n                self.eventParent = self.canvas;\n            } else {\n                self.controlInput = self.controlInput || document.createElement('input');\n                self.controlInput.onblur = self.intf.blur;\n                self.createInlineStyle(self.controlInput, 'canvas-datagrid-control-input');\n                self.isChildGrid = false;\n                self.parentDOMNode = self.parentNode;\n                self.parentIsCanvas = /^canvas$/i.test(self.parentDOMNode.tagName);\n                if (self.parentIsCanvas) {\n                    self.canvas = self.parentDOMNode;\n                    self.parentDOMNode.appendChild(self.controlInput);\n                } else {\n                    self.canvas = document.createElement('canvas');\n                    self.parentDOMNode.appendChild(self.canvas);\n                    self.parentDOMNode.appendChild(self.controlInput);\n                }\n                self.createInlineStyle(self.canvas, 'canvas-datagrid');\n                self.ctx = self.canvas.getContext('2d');\n                self.ctx.textBaseline = 'alphabetic';\n                self.eventParent = self.canvas;\n            }\n            self.parentNodeStyle = self.canvas.style;\n            self.controlInput.setAttribute('readonly', true);\n            self.controlInput.addEventListener('blur', function (e) {\n                if (e.target !== self.canvas) {\n                    self.hasFocus = false;\n                }\n            });\n            self.eventParent.addEventListener('scroll', self.resize, false);\n            self.eventParent.addEventListener('touchstart', self.touchstart, false);\n            self.eventParent.addEventListener('mouseup', self.mouseup, false);\n            self.eventParent.addEventListener('mousedown', self.mousedown, false);\n            self.eventParent.addEventListener('dblclick', self.dblclick, false);\n            self.eventParent.addEventListener('click', self.click, false);\n            self.eventParent.addEventListener('mousemove', self.mousemove);\n            self.eventParent.addEventListener('wheel', self.scrollWheel, false);\n            self.canvas.addEventListener('contextmenu', self.contextmenuEvent, false);\n            self.controlInput.addEventListener('copy', self.copy);\n            self.controlInput.addEventListener('cut', self.cut);\n            self.controlInput.addEventListener('paste', self.paste);\n            self.controlInput.addEventListener('keypress', self.keypress, false);\n            self.controlInput.addEventListener('keyup', self.keyup, false);\n            self.controlInput.addEventListener('keydown', self.keydown, false);\n            window.addEventListener('resize', self.resize);\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/dom.js\n// module id = 8\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        /**\n         * Converts a integer into a letter A - ZZZZZ...\n         * @memberof canvasDatagrid\n         * @name integerToAlpha\n         * @method\n         * @param {column} n The number to convert.\n         */\n        self.integerToAlpha = function (n) {\n            var ordA = 'a'.charCodeAt(0),\n                ordZ = 'z'.charCodeAt(0),\n                len = ordZ - ordA + 1,\n                s = '';\n            while (n >= 0) {\n                s = String.fromCharCode(n % len + ordA) + s;\n                n = Math.floor(n / len) - 1;\n            }\n            return s;\n        };\n        /**\n         * Inserts a new column before the specified index into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name insertColumn\n         * @method\n         * @param {column} c The column to insert into the schema.\n         * @param {number} index The index of the column to insert before.\n         */\n        self.insertColumn = function (c, index) {\n            var s = self.getSchema();\n            if (s.length < index) {\n                throw new Error('Index is beyond the length of the schema.');\n            }\n            self.validateColumn(c, s);\n            s.splice(index, 0, c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a column from the schema at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteColumn\n         * @tutorial schema\n         * @method\n         * @param {number} index The index of the column to delete.\n         */\n        self.deleteColumn = function (index) {\n            var s = self.getSchema();\n            // remove data matching this column name from data\n            self.data.forEach(function (row) {\n                delete row[s[index].name];\n            });\n            s.splice(index, 1);\n            self.intf.schema = s;\n        };\n        /**\n         * Adds a new column into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name addColumn\n         * @method\n         * @param {column} c The column to add to the schema.\n         */\n        self.addColumn = function (c) {\n            var s = self.getSchema();\n            self.validateColumn(c, s);\n            s.push(c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a row from the dataset at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteRow\n         * @method\n         * @param {number} index The index of the row to delete.\n         */\n        self.deleteRow = function (index) {\n            self.originalData.splice(index, 1);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Inserts a new row into the dataset before the specified index.\n         * @memberof canvasDatagrid\n         * @name insertRow\n         * @method\n         * @param {object} d data.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertRow = function (d, index) {\n            if (self.originalData.length < index) {\n                throw new Error('Index is beyond the length of the dataset.');\n            }\n            self.originalData.splice(index, 0, d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[index], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Adds a new row into the dataset.\n         * @memberof canvasDatagrid\n         * @name addRow\n         * @method\n         * @param {object} d data.\n         */\n        self.addRow = function (d) {\n            self.originalData.push(d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[self.originalData.length - 1], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Sets the height of a given row by index number.\n         * @memberof canvasDatagrid\n         * @name setRowHeight\n         * @method\n         * @param {number} rowIndex The index of the row to set.\n         * @param {number} height Height to set the row to.\n         */\n        self.setRowHeight = function (rowIndex, height) {\n            self.sizes.rows[rowIndex] = height;\n            self.draw(true);\n        };\n        /**\n         * Sets the width of a given column by index number.\n         * @memberof canvasDatagrid\n         * @name setColumnWidth\n         * @method\n         * @param {number} colIndex The index of the column to set.\n         * @param {number} width Width to set the column to.\n         */\n        self.setColumnWidth = function (colIndex, width) {\n            self.sizes.columns[colIndex] = width;\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the width of the columns due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetColumnWidths\n         * @tutorial schema\n         * @method\n         */\n        self.resetColumnWidths = function () {\n            self.sizes.columns = {};\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the height of the rows due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetRowHeights\n         * @tutorial schema\n         * @method\n         */\n        self.resetRowHeights = function () {\n            self.sizes.rows = {};\n            self.draw(true);\n        };\n        /**\n         * Sets the value of the filter.\n         * @memberof canvasDatagrid\n         * @name setFilter\n         * @method\n         * @param {string} column Name of the column to filter.\n         * @param {string} value The value to filter for.\n         */\n        self.setFilter = function (column, value) {\n            function applyFilter() {\n                self.refreshFromOrigialData();\n                Object.keys(self.columnFilters).forEach(function (filter) {\n                    var header = self.getHeaderByName(column);\n                    if (!header) {\n                        return;\n                    }\n                    self.currentFilter = header.filter || self.filter(column.type || 'string');\n                    self.data = self.data.filter(function (row) {\n                        return self.currentFilter(row[filter], self.columnFilters[filter]);\n                    });\n                });\n                self.resize();\n                self.draw(true);\n            }\n            if (column === undefined && value === undefined) {\n                self.columnFilters = {};\n                return applyFilter();\n            }\n            if (column && (value === '' || value === undefined)) {\n                delete self.columnFilters[column];\n            } else {\n                self.columnFilters[column] = value;\n            }\n            applyFilter();\n        };\n        /**\n         * Returns the number of pixels to scroll down to line up with row rowIndex.\n         * @memberof canvasDatagrid\n         * @name findRowScrollTop\n         * @method\n         * @param {number} rowIndex The row index of the row to scroll find.\n         */\n        self.findRowScrollTop = function (rowIndex) {\n            return self.scrollCache.y[rowIndex] - (self.attributes.showColumnHeaders ? self.getColumnHeaderCellHeight() : 0);\n        };\n        /**\n         * Returns the number of pixels to scroll to the left to line up with column columnIndex.\n         * @memberof canvasDatagrid\n         * @name findColumnScrollLeft\n         * @method\n         * @param {number} columnIndex The column index of the column to find.\n         */\n        self.findColumnScrollLeft = function (columnIndex) {\n            var left = 0, y = 0, s = self.getSchema(), l = s.length - 1;\n            if (columnIndex > l) {\n                throw new Error('Impossible column index');\n            }\n            while (y < columnIndex) {\n                left += self.sizes.columns[y] || s[y].width || self.style.cellWidth;\n                y += 1;\n            }\n            return left;\n        };\n        /**\n         * Scrolls the cell at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name gotoCell\n         * @method\n         * @param {number} x The column index of the cell to scroll to.\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoCell = function (x, y) {\n            if (x !== undefined) {\n                self.scrollBox.scrollLeft = self.findColumnScrollLeft(x);\n            }\n            if (y !== undefined) {\n                self.scrollBox.scrollTop = self.findRowScrollTop(y);\n            }\n        };\n        /**\n         * Scrolls the row y.\n         * @memberof canvasDatagrid\n         * @name gotoRow\n         * @method\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoRow = function (y) {\n            self.gotoCell(0, y);\n        };\n        /**\n         * Scrolls the cell at cell x, row y into view if it is not already.\n         * @memberof canvasDatagrid\n         * @name scrollIntoView\n         * @method\n         * @param {number} x The column index of the cell to scroll into view.\n         * @param {number} y The row index of the cell to scroll into view.\n         */\n        self.scrollIntoView = function (x, y) {\n            if (self.visibleCells.filter(function (cell) {\n                    return (cell.rowIndex === y || y === undefined)\n                        && (cell.columnIndex === x || x === undefined)\n                        && cell.x > 0\n                        && cell.y > 0\n                        && cell.x + cell.width < self.width\n                        && cell.y + cell.height < self.height;\n                }).length === 0) {\n                self.gotoCell(x, y);\n            }\n        };\n        /**\n         * Sets the active cell. Requires redrawing.\n         * @memberof canvasDatagrid\n         * @name setActiveCell\n         * @method\n         * @param {number} x The column index of the cell to set active.\n         * @param {number} y The row index of the cell to set active.\n         */\n        self.setActiveCell = function (x, y) {\n            if (x < 0) { x = 0; }\n            if (y < 0) { y = 0; }\n            self.activeCell = {\n                rowIndex: y,\n                columnIndex: x\n            };\n        };\n        /**\n         * Removes the selection.\n         * @memberof canvasDatagrid\n         * @name selectNone\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectNone = function (dontDraw) {\n            self.selections = [];\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Selects every visible cell.\n         * @memberof canvasDatagrid\n         * @name selectAll\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectAll = function (dontDraw) {\n            self.selectArea({\n                top: 0,\n                left: 0,\n                right: self.getVisibleSchema().length - 1,\n                bottom: self.data.length - 1\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Returns true if the selected columnIndex is selected on every row.\n         * @memberof canvasDatagrid\n         * @name isColumnSelected\n         * @method\n         * @param {number} columnIndex The column index to check.\n         */\n        self.isColumnSelected = function (columnIndex) {\n            var colIsSelected = true;\n            self.data.forEach(function (row, rowIndex) {\n                if (!self.selections[rowIndex] || self.selections[rowIndex].indexOf(self.orders.columns[columnIndex]) === -1) {\n                    colIsSelected = false;\n                }\n            });\n            return colIsSelected;\n        };\n        /**\n         * Runs the defined method on each selected cell.\n         * @memberof canvasDatagrid\n         * @name forEachSelectedCell\n         * @method\n         * @param {number} fn The function to execute.  The signature of the function is: (data, rowIndex, columnName).\n         * @param {number} expandToRow When true the data in the array is expanded to the entire row.\n         */\n        self.forEachSelectedCell = function (fn, expandToRow) {\n            var d = [], s = expandToRow ? self.getSchema() : self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    if (col === -1 || !s[col]) { return; }\n                    fn(self.data, index, s[col].name);\n                });\n            });\n        };\n        /**\n         * Selects a column.\n         * @memberof canvasDatagrid\n         * @name selectColumn\n         * @method\n         * @param {number} columnIndex The column index to select.\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the column.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the column.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectColumn = function (columnIndex, ctrl, shift, supressEvent) {\n            var s, e, x;\n            function addCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) === -1) {\n                        self.selections[rowIndex].push(i);\n                    }\n                });\n            }\n            function removeCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) !== -1) {\n                        self.selections[rowIndex].splice(self.selections[rowIndex].indexOf(i), 1);\n                    }\n                });\n            }\n            if (shift) {\n                if (!self.activeCell) { return; }\n                s = Math.min(self.activeCell.columnIndex, columnIndex);\n                e = Math.max(self.activeCell.columnIndex, columnIndex);\n                for (x = s; e > x; x += 1) {\n                    addCol(x);\n                }\n            }\n            if (!ctrl && !shift) {\n                self.selections = [];\n                self.activeCell.columnIndex = columnIndex;\n                self.activeCell.rowIndex = self.scrollIndexTop;\n            }\n            if (ctrl && self.isColumnSelected(columnIndex)) {\n                removeCol(columnIndex);\n            } else {\n                addCol(columnIndex);\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.getSelectionBounds()\n            });\n        };\n        /**\n         * Selects a row.\n         * @memberof canvasDatagrid\n         * @name selectRow\n         * @method\n         * @param {number} rowIndex The row index to select.\n         * @param {boolean} ctrl When true, behaves as if you were holding control/command when you clicked the row.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the row.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectRow = function (rowIndex, ctrl, shift, supressEvent) {\n            var x, st, en, s = self.getVisibleSchema();\n            function addRow(ri) {\n                self.selections[ri] = [];\n                self.selections[ri].push(-1);\n                s.forEach(function (col, index) {\n                    self.selections[ri].push(index);\n                });\n            }\n            if (self.dragAddToSelection === false || self.dragObject === undefined) {\n                if (self.selections[rowIndex] && self.selections[rowIndex].length - 1 === s.length) {\n                    if (ctrl) {\n                        self.selections[rowIndex] = [];\n                        return;\n                    }\n                }\n            }\n            if (self.dragAddToSelection === true || self.dragObject === undefined) {\n                if (shift && self.dragObject === undefined) {\n                    if (!self.activeCell) { return; }\n                    st = Math.min(self.activeCell.rowIndex, rowIndex);\n                    en = Math.max(self.activeCell.rowIndex, rowIndex);\n                    for (x = st; en >= x; x += 1) {\n                        addRow(x);\n                    }\n                } else {\n                    addRow(rowIndex);\n                }\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Collapse a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name collapseTree\n         * @method\n         * @param {number} index The index of the row to collapse.\n         */\n        self.collapseTree = function (rowIndex) {\n            self.dispatchEvent('collapsetree', {\n                childGrid: self.childGrids[rowIndex],\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowIndex].blur();\n            self.openChildren[rowIndex].dispose();\n            delete self.openChildren[rowIndex];\n            delete self.sizes.trees[rowIndex];\n            delete self.childGrids[rowIndex];\n            self.dispatchEvent('resizerow', {\n                cellHeight: self.style.cellHeight\n            });\n            self.resize(true);\n            self.draw(true);\n        };\n        /**\n         * Expands a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name expandTree\n         * @method\n         * @param {number} index The index of the row to expand.\n         */\n        self.expandTree = function (rowIndex) {\n            var trArgs = self.args.treeGridAttributes || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth,\n                h = self.sizes.trees[rowIndex] || self.style.treeGridHeight,\n                treeGrid;\n            if (!self.childGrids[rowIndex]) {\n                trArgs.debug = self.attributes.debug;\n                trArgs.name = self.attributes.saveAppearance ? self.attributes.name + 'tree' + rowIndex : undefined;\n                trArgs.style = trArgs.style || self.style;\n                trArgs.parentNode = {\n                    parentGrid: self.intf,\n                    nodeType: 'canvas-datagrid-tree',\n                    offsetHeight: h,\n                    offsetWidth: self.width - rowHeaderCellWidth,\n                    header: { width: self.width - rowHeaderCellWidth },\n                    offsetLeft: rowHeaderCellWidth,\n                    offsetTop: columnHeaderCellHeight,\n                    offsetParent: self.intf.parentNode,\n                    parentNode: self.intf.parentNode,\n                    style: 'tree',\n                    data: self.data[rowIndex]\n                };\n                treeGrid = self.createGrid(trArgs);\n                self.childGrids[rowIndex] = treeGrid;\n            }\n            treeGrid = self.childGrids[rowIndex];\n            treeGrid.visible = true;\n            self.dispatchEvent('expandtree', {\n                treeGrid: treeGrid,\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowIndex] = treeGrid;\n            self.sizes.trees[rowIndex] = h;\n            self.dispatchEvent('resizerow', {height: self.style.cellHeight});\n            self.resize(true);\n        };\n        /**\n         * Toggles tree grid open and close by row index.\n         * @memberof canvasDatagrid\n         * @name toggleTree\n         * @method\n         * @param {number} index The index of the row to toggle.\n         */\n        self.toggleTree = function (rowIndex) {\n            var i = self.openChildren[rowIndex];\n            if (i) {\n                return self.collapseTree(rowIndex);\n            }\n            self.expandTree(rowIndex);\n        };\n        /**\n         * Returns a header from the schema by name.\n         * @memberof canvasDatagrid\n         * @name getHeaderByName\n         * @tutorial schema\n         * @method\n         * @returns {header} header with the selected name, or undefined.\n         * @param {string} name The name of the column to resize.\n         */\n        self.getHeaderByName = function (name) {\n            var x, i = self.getSchema();\n            for (x = 0; x < i.length; x += 1) {\n                if (i[x].name === name) {\n                    return i[x];\n                }\n            }\n        };\n        /**\n         * Resizes a column to fit the longest value in the column. Call without a value to resize all columns.\n         * Warning, can be slow on very large record sets (1m records ~3-5 seconds on an i7).\n         * @memberof canvasDatagrid\n         * @name fitColumnToValues\n         * @method\n         * @param {string} name The name of the column to resize.\n         */\n        self.fitColumnToValues = function (name, internal) {\n            if (!self.canvas) { return; }\n            self.sizes.columns[name === 'cornerCell' ? -1 : self.getHeaderByName(name).index]\n                = Math.max(self.findColumnMaxTextLength(name), self.style.minColumnWidth);\n            if (!internal) {\n                self.resize();\n                self.draw(true);\n            }\n        };\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @overload\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {number} columnIndex The column index of the cell to check.\n         * @param {number} rowIndex The row index of the cell to check.\n         */\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {cell} cell The cell to check for.  Alternatively you can pass an object { x: <x-pixel-value>, y: <y-pixel-value> }.\n         */\n        self.isCellVisible = function (cell, rowIndex) {\n            // overload\n            if (rowIndex !== undefined) {\n                return self.visibleCells.filter(function (c) {\n                    return c.columnIndex === cell && c.rowIndex === rowIndex;\n                }).length > 0;\n            }\n            var x, l = self.visibleCells.length;\n            for (x = 0; x < l; x += 1) {\n                if (cell.x === self.visibleCells[x].x && cell.y === self.visibleCells[x].y) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n         * Sets the order of the data.\n         * @memberof canvasDatagrid\n         * @name order\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} columnName Name of the column to be sorted.\n         * @param {string} direction `asc` for ascending or `desc` for descending.\n         * @param {function} [sortFunction] When defined, override the default sorting method defined in the column's schema and use this one.\n         * @param {bool} [dontSetStorageData] Don't store this setting for future use.\n         */\n        self.order = function (columnName, direction, sortFunction, dontSetStorageData) {\n            var f,\n                c = self.getSchema().filter(function (col) {\n                    return col.name === columnName;\n                });\n            if (self.dispatchEvent('beforesortcolumn', {name: columnName, direction: direction})) { return; }\n            self.orderBy = columnName;\n            if (c.length === 0) {\n                throw new Error('Cannot sort.  No such column name');\n            }\n            f = sortFunction || self.sorters[c[0].type];\n            if (!f && c[0].type !== undefined) {\n                console.warn('Cannot sort type \"%s\" falling back to string sort.', c[0].type);\n            }\n            self.data = self.data.sort(typeof f === 'function' ? f(columnName, direction) : self.sorters.string);\n            self.dispatchEvent('sortcolumn', {name: columnName, direction: direction});\n            self.draw(true);\n            if (dontSetStorageData) { return; }\n            self.setStorageData();\n        };\n        self.isInGrid = function (e) {\n            if (e.x < 0\n                    || e.x > self.width\n                    || e.y < 0\n                    || e.y > self.height) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Moves the current selection relative to the its current position.  Note: this method does not move the selected data, just the selection itself.\n         * @memberof canvasDatagrid\n         * @name moveSelection\n         * @method\n         * @param {number} offsetX The number of columns to offset the selection.\n         * @param {number} offsetY The number of rows to offset the selection.\n         */\n        self.moveSelection = function (offsetX, offsetY) {\n            var sel = [];\n            self.selections.forEach(function (row, rowIndex) {\n                sel[rowIndex + offsetY] = [];\n                row.forEach(function (colIndex) {\n                    sel[rowIndex + offsetY].push(colIndex + offsetX);\n                });\n            });\n            self.selections = sel;\n        };\n        /**\n         * Moves data in the provided selection to another position in the grid.  Moving data off the edge of the schema (columns/x) will truncate data.\n         * @memberof canvasDatagrid\n         * @name moveTo\n         * @method\n         * @param {array} sel 2D array representing selected rows and columns.  `canvasDatagrid.selections` is in this format and can be used here.\n         * @param {number} x The column index to start inserting the selection at.\n         * @param {number} y The row index to start inserting the selection at.\n         */\n        self.moveTo = function (sel, x, y) {\n            var d = self.getSelectedData(),\n                s = self.getVisibleSchema(),\n                l = sel.length,\n                xi,\n                yi = y - 1;\n            sel.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) { return; }\n                row.forEach(function (col) {\n                    if (!s[col]) { return; }\n                    if (!self.data[index]) { self.data[index] = {}; }\n                    self.data[index][s[col].name] = null;\n                });\n            });\n            sel.forEach(function (row, index) {\n                yi += 1;\n                xi = x - 1;\n                row.forEach(function (col, cidx) {\n                    xi += 1;\n                    if (col === -1\n                            || !s[xi]\n                            || !s[col]\n                            || self.data.length - 1 < yi\n                            || yi < 0) { return; }\n                    if (!self.data[yi]) { self.data[yi] = {}; }\n                    self.data[yi][s[xi].name] = d[index][s[col].name];\n                });\n            });\n        };\n        /**\n         * Checks if a given column is visible.\n         * @memberof canvasDatagrid\n         * @name isColumnVisible\n         * @method\n         * @returns {boolean} When true, the column is visible.\n         * @param {number} columnIndex Column index.\n         */\n        self.isColumnVisible = function (columnIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === columnIndex;\n            }).length > 0;\n        };\n        /**\n         * Checks if a given row is visible.\n         * @memberof canvasDatagrid\n         * @name isRowVisible\n         * @method\n         * @returns {boolean} When true, the row is visible.\n         * @param {number} rowIndex Row index.\n         */\n        self.isRowVisible = function (rowIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.rowIndex === rowIndex;\n            }).length > 0;\n        };\n        /**\n         * Gets the cell at columnIndex and rowIndex.\n         * @memberof canvasDatagrid\n         * @name getVisibleCellByIndex\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Column index.\n         * @param {number} y Row index.\n         */\n        self.getVisibleCellByIndex = function (x, y) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === x && c.rowIndex === y;\n            })[0];\n        };\n        /**\n         * Gets the cell at grid pixel coordinate x and y.  Author's note.  This function ties drawing and events together.  This is a very complex function and is core to the component.\n         * @memberof canvasDatagrid\n         * @name getCellAt\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Number of pixels from the left.\n         * @param {number} y Number of pixels from the top.\n         */\n        self.getCellAt = function (x, y, useTouchScrollZones) {\n            function getBorder(entitiy) {\n                if (entitiy.x + entitiy.width - (self.attributes.borderResizeZone * 0.4) < x && entitiy.x + entitiy.width + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'r';\n                }\n                if (entitiy.x - (self.attributes.borderResizeZone * 0.4) < x && entitiy.x + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'l';\n                }\n                if (entitiy.y + entitiy.height - (self.attributes.borderResizeZone * 0.4) < y && entitiy.y + entitiy.height + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 'b';\n                }\n                if (entitiy.y - (self.attributes.borderResizeZone * 0.4) < y && entitiy.y + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 't';\n                }\n            }\n            if (!self.visibleCells) { return; }\n            var border,\n                tsz = useTouchScrollZones ? self.attributes.touchScrollZone : 0,\n                moveMode = self.attributes.borderDragBehavior === 'move',\n                i,\n                l = self.visibleCells.length,\n                moveBorder,\n                xBorderBehavior = moveMode ? self.cursorGrab : 'ew-resize',\n                yBorderBehavior = moveMode ? self.cursorGrab : 'ns-resize',\n                cell,\n                entitiy;\n            if (!self.visibleCells || !self.visibleCells.length) { return; }\n            self.hasFocus = true;\n            if (!(y < self.height\n                && y > 0\n                && x < self.width\n                && x > 0)) {\n                self.hasFocus = false;\n                return {\n                    dragContext: 'inherit',\n                    context: 'inherit'\n                };\n            }\n            for (i = 0; i < l; i += 1) {\n                cell = self.visibleCells[i];\n                // interactive dimensions of the cell.  used for touch \"over size\" zones\n                entitiy = {\n                    x: cell.x,\n                    y: cell.y,\n                    height: cell.height,\n                    width: cell.width\n                };\n                if (useTouchScrollZones && /(vertical|horizontal)-scroll-/.test(cell.style)) {\n                    entitiy.x -= tsz;\n                    entitiy.y -= tsz;\n                    entitiy.height += tsz;\n                    entitiy.width += tsz;\n                }\n                if (entitiy.x - self.style.cellBorderWidth < x\n                        && entitiy.x + entitiy.width + self.style.cellBorderWidth > x\n                        && entitiy.y - self.style.cellBorderWidth < y\n                        && entitiy.y + entitiy.height + self.style.cellBorderWidth > y) {\n                    if (/frozen-row-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'row-resize';\n                        return cell;\n                    }\n                    if (/frozen-column-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'col-resize';\n                        return cell;\n                    }\n                    if (/selection-handle-/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'crosshair';\n                        return cell;\n                    }\n                    if (/vertical-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'vertical-scroll-box';\n                        cell.context = 'vertical-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isVerticalScrollBar = true;\n                        if (y > self.scrollBox.box.v.y + self.scrollBox.scrollBoxHeight) {\n                            cell.dragContext = 'vertical-scroll-bottom';\n                            cell.context = 'vertical-scroll-bottom';\n                        } else if (y < self.scrollBox.box.v.y) {\n                            cell.dragContext = 'vertical-scroll-top';\n                            cell.context = 'vertical-scroll-top';\n                        }\n                        self.cursor = 'default';\n                        return cell;\n                    }\n                    if (/horizontal-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'horizontal-scroll-box';\n                        cell.context = 'horizontal-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isHorizontalScrollBar = true;\n                        if (x > self.scrollBox.box.h.x + self.scrollBox.scrollBoxWidth) {\n                            cell.dragContext = 'horizontal-scroll-right';\n                            cell.context = 'horizontal-scroll-right';\n                        } else if (x < self.scrollBox.box.h.x) {\n                            cell.dragContext = 'horizontal-scroll-left';\n                            cell.context = 'horizontal-scroll-left';\n                        }\n                        self.cursor = 'default';\n                        return cell;\n                    }\n                    border = getBorder(entitiy);\n                    // check if the border of this cell is the border of the selection and if so show move cursor in move mode\n                    moveBorder = moveMode && cell.selectionBorder && cell.selectionBorder.indexOf(border) !== -1;\n                    if (['l', 'r'].indexOf(border) !== -1\n                            && (self.attributes.allowColumnResize || moveBorder)\n                            && ((self.attributes.allowColumnResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && ((self.attributes.allowRowHeaderResize && (cell.isRowHeader || cell.isCorner)) || !(cell.isRowHeader && cell.isCorner))) {\n                        if (((cell.isColumnHeader || cell.isCorner) || (self.attributes.allowColumnResizeFromCell && cell.isNormal)) && border === 'r') {\n                            cell.context = 'ew-resize';\n                            cell.dragContext = 'ew-resize';\n                            return cell;\n                        }\n                        if (!(cell.isColumnHeader || cell.isCorner) && moveBorder) {\n                            cell.context = xBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (['t', 'b'].indexOf(border) !== -1\n                            && cell.rowIndex > -1\n                            && (self.attributes.allowRowResize || moveBorder)\n                            && ((self.attributes.allowRowResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && !cell.isColumnHeader) {\n                        if (((cell.isRowHeader || cell.isCorner) || (self.attributes.allowRowResizeFromCell && cell.isNormal)) && border === 'b') {\n                            cell.context = 'ns-resize';\n                            cell.dragContext = 'ns-resize';\n                            return cell;\n                        }\n                        if (!(cell.isRowHeader || cell.isCorner) && moveBorder) {\n                            cell.context = yBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (cell.style === 'columnHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'column-reorder';\n                        return cell;\n                    }\n                    if (cell.style === 'rowHeaderCell') {\n                        if ((self.attributes.rowGrabZoneSize + (cell.y - self.style.cellBorderWidth) < y)\n                                || !self.attributes.allowRowReordering) {\n                            cell.dragContext = 'cell';\n                            cell.context = 'cell';\n                        } else {\n                            cell.context = self.cursorGrab;\n                            cell.dragContext = 'row-reorder';\n                        }\n                        return cell;\n                    }\n                    if (cell.isGrid) {\n                        self.hasFocus = false;\n                        cell.dragContext = 'cell-grid';\n                        cell.context = 'cell-grid';\n                        return cell;\n                    }\n                    if (cell.style === 'tree-grid') {\n                        self.hasFocus = false;\n                        cell.dragContext = 'tree';\n                        cell.context = 'tree';\n                        return cell;\n                    }\n                    cell.dragContext = 'cell';\n                    cell.context = 'cell';\n                    return cell;\n                }\n            }\n            self.hasFocus = true;\n            self.cursor = 'default';\n            return {\n                dragContext: 'background',\n                context: 'background',\n                style: 'background',\n                isBackground: true\n            };\n        };\n        /**\n         * Gets the bounds of current selection. \n         * @returns {rect} selection.\n         * @memberof canvasDatagrid\n         * @name getSelectionBounds\n         * @method\n         */\n        self.getSelectionBounds = function () {\n            var low = {x: Infinity, y: Infinity},\n                high = {x: -Infinity, y: -Infinity};\n            self.selections.forEach(function (row, rowIndex) {\n                var maxCol, minCol;\n                low.y = rowIndex < low.y ? rowIndex : low.y;\n                high.y = rowIndex > high.y ? rowIndex : high.y;\n                maxCol = Math.max.apply(null, row);\n                minCol = Math.min.apply(null, row);\n                low.x = minCol < low.x ? minCol : low.x;\n                high.x = maxCol > high.x ? maxCol : high.x;\n            });\n            return {\n                top: low.y,\n                left: low.x,\n                bottom: high.y,\n                right: high.x\n            };\n        };\n        /**\n         * Returns an auto generated schema based on data structure.\n         * @memberof canvasDatagrid\n         * @name getSchemaFromData\n         * @method\n         * @tutorial schema\n         * @returns {schema} schema A schema based on the first item in the data array.\n         */\n        self.getSchemaFromData = function (d) {\n            d = d || self.data;\n            return Object.keys(d[0] || {' ': ''}).map(function mapEachSchemaColumn(key, index) {\n                var type = self.getBestGuessDataType(key, d),\n                    i = {\n                        name: key,\n                        title: isNaN(parseInt(key, 10)) ? key : self.integerToAlpha(key).toUpperCase(),\n                        index: index,\n                        type: type,\n                        filter: self.filter(type)\n                    };\n                if (self.storedSettings\n                        && self.storedSettings.visibility\n                        && self.storedSettings.visibility[i.name] !== undefined) {\n                    i.hidden = !self.storedSettings.visibility[i.name];\n                }\n                return i;\n            });\n        };\n        /**\n         * Clears the change log grid.changes that keeps track of changes to the data set.\n         * This does not undo changes or alter data it is simply a convince array to keep\n         * track of changes made to the data since last this method was called.\n         * @memberof canvasDatagrid\n         * @name clearChangeLog\n         * @method\n         */\n        self.clearChangeLog = function () {\n            self.changes = [];\n        };\n        /**\n         * Selects an area of the grid.\n         * @memberof canvasDatagrid\n         * @name selectArea\n         * @method\n         * @param {rect} bounds A rect object representing the selected values.\n         */\n        self.selectArea = function (bounds, ctrl) {\n            self.selectionBounds = bounds || self.selectionBounds;\n            var ev, x, y, s = self.getSchema();\n            if (!ctrl) {\n                self.selections = [];\n            }\n            if (self.selectionBounds.top < -1\n                    || self.selectionBounds.bottom > self.data.length\n                    || self.selectionBounds.left < -1\n                    || self.selectionBounds.right > s.length) {\n                throw new Error('Impossible selection area');\n            }\n            for (x = self.selectionBounds.top; x <= self.selectionBounds.bottom; x += 1) {\n                self.selections[x] = [];\n                for (y = self.selectionBounds.left; y <= self.selectionBounds.right; y += 1) {\n                    if (self.selections[x].indexOf(y) === -1) {\n                        self.selections[x].push(y);\n                    }\n                }\n            }\n            ev = {\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            };\n            Object.defineProperty(ev, 'selectedData', {\n                get: function () {\n                    return self.getSelectedData();\n                }\n            });\n            self.dispatchEvent('selectionchanged', ev);\n        };\n        /**\n         * Returns the maximum text width for a given column by column name.\n         * @memberof canvasDatagrid\n         * @name findColumnMaxTextLength\n         * @method\n         * @returns {number} The number of pixels wide the maximum width value in the selected column.\n         * @param {string} name The name of the column to calculate the value's width of.\n         */\n        self.findColumnMaxTextLength = function (name) {\n            var m = -Infinity;\n            if (name === 'cornerCell') {\n                self.ctx.font = self.style.rowHeaderCellFont;\n                return self.ctx.measureText((self.data.length + (self.attributes.showNewRow ? 1 : 0)).toString()).width\n                    + self.style.autosizePadding + self.style.autosizeHeaderCellPadding\n                    + self.style.rowHeaderCellPaddingRight\n                    + self.style.rowHeaderCellPaddingLeft\n                    + (self.attributes.tree ? self.style.treeArrowWidth\n                        + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight : 0);\n            }\n            self.getSchema().forEach(function (col) {\n                if (col.name !== name) { return; }\n                self.ctx.font = self.style.columnHeaderCellFont;\n                var t = self.ctx.measureText(col.title || col.name).width\n                    + self.style.headerCellPaddingRight\n                    + self.style.headerCellPaddingLeft;\n                m = t > m ? t : m;\n            });\n            self.data.forEach(function (row) {\n                self.ctx.font = self.style.cellFont;\n                var t = self.ctx.measureText(row[name]).width\n                    + self.style.cellPaddingRight\n                    + self.style.cellPaddingLeft + self.style.cellAutoResizePadding;\n                m = t > m ? t : m;\n            });\n            return m;\n        };\n        /**\n         * Gets the total width of all header columns.\n         * @memberof canvasDatagrid\n         * @name getHeaderWidth\n         * @method\n         */\n        self.getHeaderWidth = function () {\n            return self.getVisibleSchema().reduce(function (total, header) {\n                return total + (header.width || self.style.cellWidth);\n            }, 0);\n        };\n        self.formatters.string = function cellFormatterString(e) {\n            return e.cell.value !== undefined ? e.cell.value : '';\n        };\n        self.formatters.rowHeaderCell = self.formatters.string;\n        self.formatters.headerCell = self.formatters.string;\n        self.formatters.number = self.formatters.string;\n        self.formatters.int = self.formatters.string;\n        self.formatters.html = self.formatters.string;\n        self.sorters.string = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (a[columnName] === undefined || a[columnName] === null) {\n                    return 1;\n                }\n                if (b[columnName] === undefined || b[columnName] === null) {\n                    return 0;\n                }\n                if (asc) {\n                    if (!a[columnName].localeCompare) { return 1; }\n                    return a[columnName].localeCompare(b[columnName]);\n                }\n                if (!b[columnName].localeCompare) { return 1; }\n                return b[columnName].localeCompare(a[columnName]);\n            };\n        };\n        self.sorters.number = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return a[columnName] - b[columnName];\n                }\n                return b[columnName] - a[columnName];\n            };\n        };\n        self.sorters.date = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return new Date(a[columnName]).getTime()\n                        - new Date(b[columnName]).getTime();\n                }\n                return new Date(b[columnName]).getTime()\n                        - new Date(a[columnName]).getTime();\n            };\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/publicMethods.js\n// module id = 9\n// module chunks = 0"],"sourceRoot":""}