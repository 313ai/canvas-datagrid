{"version":3,"sources":["webpack://canvasDatagrid/webpack/universalModuleDefinition","webpack://canvasDatagrid/webpack/bootstrap","webpack://canvasDatagrid/./lib/defaults.js","webpack://canvasDatagrid/./lib/publicMethods.js","webpack://canvasDatagrid/./lib/dom.js","webpack://canvasDatagrid/./lib/contextMenu.js","webpack://canvasDatagrid/./lib/intf.js","webpack://canvasDatagrid/./lib/touch.js","webpack://canvasDatagrid/./lib/events.js","webpack://canvasDatagrid/./lib/draw.js","webpack://canvasDatagrid/./lib/component.js","webpack://canvasDatagrid/./lib/main.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_AMD_DEFINE_RESULT__","undefined","self","defaults","attributes","styles","apply","integerToAlpha","ordA","charCodeAt","len","String","fromCharCode","Math","floor","insertColumn","index","getSchema","length","Error","validateColumn","splice","data","forEach","row","applyDefaultValue","intf","schema","deleteColumn","addColumn","push","deleteRow","originalData","setFilter","resize","insertRow","addRow","setRowHeight","rowIndex","height","sizes","rows","draw","setColumnWidth","colIndex","width","columns","resetColumnWidths","resetRowHeights","column","applyFilter","refreshFromOrigialData","keys","columnFilters","filter","header","getHeaderByName","currentFilter","type","findRowScrollTop","scrollCache","y","RangeError","findColumnScrollLeft","columnIndex","max","x","getColummnWidth","orders","gotoCell","offsetX","offsetY","cell","targetX","targetY","sbw","scrollBox","verticalBarVisible","style","scrollBarWidth","sbh","horizontalBarVisible","scrollTo","requestAnimationFrame","getVisibleCellByIndex","scrollLeft","scrollTop","gotoRow","scrollIntoView","visibleCells","setActiveCell","activeCell","selectNone","dontDraw","selections","dispatchEvent","selectedData","getSelectedData","selectionBounds","selectAll","selectArea","top","left","right","bottom","isColumnSelected","colIsSelected","indexOf","forEachSelectedCell","fn","expandToRow","getVisibleSchema","col","selectColumn","ctrl","shift","supressEvent","e","addCol","min","scrollIndexTop","removeCol","getSelectionBounds","selectRow","st","en","de","ri","dragAddToSelection","dragObject","collapseTree","childGrid","childGrids","openChildren","blur","dispose","trees","cellHeight","expandTree","treeGrid","trArgs","args","treeGridAttributes","columnHeaderCellHeight","getColumnHeaderCellHeight","rowHeaderCellWidth","cornerCell","h","treeGridHeight","debug","saveAppearance","parentNode","parentGrid","nodeType","offsetHeight","offsetWidth","offsetLeft","offsetTop","offsetParent","createGrid","visible","toggleTree","fitColumnToValues","internal","canvas","findColumnMaxTextLength","minColumnWidth","isCellVisible","order","columnName","direction","sortFunction","dontSetStorageData","f","orderBy","sorters","console","warn","sort","string","setStorageData","isInGrid","moveSelection","sel","moveTo","xi","maxRowLength","Infinity","minXi","yi","getVisibleColumnIndexOf","lastSourceIndex","cidx","isColumnVisible","isRowVisible","getCellAt","useTouchScrollZones","getBorder","entitiy","borderResizeZone","border","moveBorder","tsz","touchScrollZone","moveMode","borderDragBehavior","xBorderBehavior","cursorGrab","yBorderBehavior","hasFocus","dragContext","context","test","cellBorderWidth","isScrollBar","isVerticalScrollBar","box","v","scrollBoxHeight","cursor","isHorizontalScrollBar","scrollBoxWidth","selectionBorder","allowColumnResize","allowColumnResizeFromCell","isNormal","allowRowHeaderResize","isRowHeader","isCorner","isColumnHeader","allowRowResize","allowRowResizeFromCell","rowGrabZoneSize","allowRowReordering","isGrid","isBackground","low","high","maxCol","minCol","getSchemaFromData"," ","map","getBestGuessDataType","title","isNaN","parseInt","toUpperCase","storedSettings","visibility","hidden","clearChangeLog","changes","bounds","ev","ctx","font","rowHeaderCellFont","measureText","showNewRow","toString","autosizePadding","autosizeHeaderCellPadding","rowHeaderCellPaddingRight","rowHeaderCellPaddingLeft","tree","treeArrowWidth","treeArrowMarginLeft","treeArrowMarginRight","columnHeaderCellFont","headerCellPaddingRight","headerCellPaddingLeft","cellFont","cellPaddingRight","cellPaddingLeft","cellAutoResizePadding","getHeaderWidth","reduce","total","cellWidth","getRowHeight","scale","formatters","rowHeaderCell","headerCell","number","int","html","asc","a","b","localeCompare","date","Date","getTime","getClippingRect","ele","boundingRect","position","eleRect","scrollOffset","clipRect","w","parentRect","getRowHeaderCellWidth","clipElement","clip","scrollingElement","document","nodeName","resizeEditInput","input","editCell","pos","getBoundingClientRect","bm","gridBorderCollapse","borderWidth","mobile","mobileEditInputHeight","canvasOffsetLeft","canvasOffsetTop","ignoreScrollOffset","getLayerPos","rect","clientX","clientY","isChildGrid","endEdit","abort","newValue","oldValue","defaultValue","aborted","createNewRowData","removeChild","focus","beginEditAt","NativeEvent","editable","adjacentCells","enumItems","enu","option","valueInEnum","getAdjacentCells","createElement","multiLine","Array","isArray","val","innerHTML","appendChild","addEventListener","body","createInlineStyle","zIndex","editCellZIndex","fontSize","editCellFontSize","stopPropagation","nx","ny","keyCode","shiftKey","preventDefault","last","first","el","className","css","canvas-datagrid-context-menu-filter-input","verticalAlign","marginLeft","padding","background","contextFilterInputBackground","color","contextFilterInputColor","contextFilterInputBorder","borderRadius","contextFilterInputBorderRadius","lineHeight","fontWeight","fontFamily","contextFilterInputFontFamily","contextFilterInputFontSize","canvas-datagrid-context-menu-filter-button","contextMenuBackground","contextMenuColor","contextFilterButtonBorder","contextFilterButtonBorderRadius","contextMenuFilterButtonFontFamily","contextMenuFilterButtonFontSize","canvas-datagrid-context-child-arrow","cssFloat","childContextMenuArrowColor","contextMenuChildArrowFontSize","contextMenuFontFamily","canvas-datagrid-autocomplete","contextMenuFontSize","contextMenuBorder","contextMenuPadding","contextMenuBorderRadius","opacity","contextMenuOpacity","overflow","canvas-datagrid-autocomplete-item","canvas-datagrid-autocomplete-item:hover","contextMenuHoverBackground","contextMenuHoverColor","canvas-datagrid-canvas","canvas-datagrid","display","canvas-datagrid-control-input","canvas-datagrid-edit-mobile-input","boxSizing","outline","margin","mobileEditFontFamily","mobileEditFontSize","editCellBorder","editCellColor","editCellBackgroundColor","appearance","webkitAppearance","mozAppearance","canvas-datagrid-edit-input","editCellPaddingLeft","editCellFontFamily","boxShadow","editCellBoxShadow","canvas-datagrid-context-menu-item-mobile","contextMenuItemMargin","contextMenuItemBorderRadius","canvas-datagrid-context-menu-item","canvas-datagrid-context-menu-item:hover","canvas-datagrid-context-menu-label","contextMenuLabelMargin","contextMenuLabelDisplay","minWidth","contextMenuLabelMinWidth","maxWidth","contextMenuLabelMaxWidth","canvas-datagrid-context-menu-mobile","whiteSpace","canvas-datagrid-context-menu","contextMenuCursor","canvas-datagrid-invalid-search-regExp","contextMenuFilterInvalidExpresion","prop","appendTo","setDom","controlInput","eventParent","onblur","parentDOMNode","parentIsCanvas","tagName","getContext","textBaseline","parentNodeStyle","setAttribute","target","touchstart","mouseup","mousedown","dblclick","click","mousemove","scrollWheel","contextmenuEvent","copy","cut","paste","keypress","keyup","keydown","zIndexTop","hoverScrollTimeout","autoCompleteContext","applyContextItemStyle","contextItemContainer","createContextMenu","items","parentContextMenu","container","upArrow","downArrow","children","selectedIndex","checkArrowVisibility","scrollHeight","startHoverScroll","contextHoverScrollAmount","setTimeout","contextHoverScrollRateMs","endHoverScroll","clearTimeout","loc","contextMenuZIndex","item","childMenuArrow","removeChildContext","relatedTarget","contextMenu","contains","removeEventListener","contextAddCallback","getAttribute","cPos","childContextMenuMarginLeft","childContextMenuMarginTop","createChildContext","addContent","content","childContextMenuArrowHTML","addItem","contextMenuArrowColor","textAlign","inputDropdown","maxHeight","innerHeight","autocompleteBottomMargin","deltaY","deltaX","contextMenuArrowUpHTML","contextMenuArrowDownHTML","contextMenuWindowMargin","innerWidth","init","clickIndex","idx","Event","set","isFinite","createFilterContextMenuItems","autoCompleteItems","iRect","filterContainer","filterLabel","filterAutoCompleteButton","filterInput","checkRegExpErrorState","invalidFilterRegEx","contextFilterInvalidRegExpBackground","contextFilterInvalidRegExpColor","createAutoCompleteContext","count","maxAutoCompleteItems","disposeAutocomplete","fillAutoComplete","onclick","disposeContextMenu","filterOptionText","replace","contextFilterButtonHTML","cf","removeFilterOptionText","overridePos","contextPosition","isNormalCell","isColumnHeaderCellCap","showFilter","showCopy","copyText","execCommand","showPaste","clipBoardData","pasteText","showColumnSelector","columnSelectorText","toggleColumnVisibility","columnSelectorHiddenText","columnSelectorVisibleText","hideColumnText","showClearSettingsOption","clearSettingsOptionText","createRowOrders","createColumnOrders","columnWidth","allowSorting","showOrderByOption","showOrderByOptionTextAsc","showOrderByOptionTextDesc","addDefaultContextMenuItem","contextMenuMarginLeft","contextMenuMarginTop","mobileContextMenuMargin","createDiposeEvent","ctor","fillArray","appliedInlineStyles","cellGridAttributes","visibleRowHeights","storageName","invalidSearchExpClass","localStyleLibraryStorageKey","dataType","orderDirection","filters","frozenRow","frozenColumn","ellipsisCache","visibleRows","hovers","parsers","schemaHashes","events","scrollPixelTop","scrollIndexLeft","scrollPixelLeft","scrollModes","componentL1Events","eventNames","mouse","orderedIndex","showColumnHeaders","showRowHeaders","localStorage","setItem","JSON","stringify","tempSchema","newRow","getSchemaNameHash","drawChildGrids","gridKey","resizeChildGrids","autoScrollZone","setTimer","selectionScrollZone","selectionScrollIncrement","currentCell","scrollTimer","scrollRepeatRate","setDefaults","obj1","obj2","def","setAttributes","setStyle","autosize","colName","contextmenu","observer","disconnect","tryLoadStoredSettings","reloadStoredValues","getDomRoot","shadowRoot","host","getFontName","fontStyle","getFontHeight","parseFloat","parseStyleValue","split","initProp","propName","getStyleProperty","styleKeys","setStyleProperty","supressDrawAndEvent","isDim","dehyphenateProperty","getItem","message","parse","initialized","publicStyleKeyIntf","initScrollBox","ie","navigator","userAgent","edge","webKit","moz","cursorGrabing","cursorGrabbing","pointerLockPosition","isComponent","assertPxColor","clearPxColorAssertions","hyphenateProperty","addStyleKeyIfNoneExists","DOMStyles","getComputedStyle","concat","valueObject","filterFor","filterRegExp","pattern","exec","flags","substring","flagLength","RegExp","toLocaleUpperCase","applyComponentStyle","innerText","textContent","TypeError","gridId","currentCursor","find","scrollWidth","dragMode","eventName","scrollIndexRight","scrollIndexBottom","scrollPixelRight","scrollPixelBottom","getTypes","parseInnerHtml","callback","etl","autoGenerateSchema","autoResizeColumns","sHeight","sWidth","setScrollTop","preventScrollEvent","scroll","setScrollLeft","toFixed","widthBoxRatio","heightBoxRatio","supressDrawEvent","touchScrollTimeout","scrollAnimation","touchDelta","touchAnimateTo","animationFrames","getTouchPos","touchIndex","touches","easingFunctions","linear","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easing","touchEasingMethod","calculatePPSTimed","xPPST","touchSigmaTimed","yPPST","performance","now","calculatePPS","xPPS","touchSigma","yPPS","touchEndAnimation","touchReleaseAnimationDurationMs","stopAnimation","touchEditCell","touchCell","clearInterval","calculatePPSTimer","abs","touchDeadZone","touchingCell","changedTouches","touchStart","startingCell","touchContextTimeout","touchStartEvent","zoomAltered","touchLength","touchStart1","touchScrollStart","touchContextMenuTimeMs","setInterval","isHeader","columnHeaderClickBehavior","touchEndEvents","touchmove","passive","touchend","touchcancel","touchSelect","handleType","touchSelecting","selectionMode","ch","rw","rScrollZone","lScrollZone","bScrollZone","tScrollZone","t1","t2","touchPosition","touchPosition1","zoomDeltaStart","startScale","scaleDelta","touchZoomSensitivity","touchZoomMin","touchZoomMax","touchDuration","touchScroll","dz","touchReleaseAcceleration","scrollAnimationPPSThreshold","wheeling","unshift","sfn","defaultPrevented","getRatio","maxPixelRatio","devicePixelRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","backingStorePixelRatio","drawAfterResize","dims","vb","nb","co","isScrollBoxCorner","scrollBarBoxMargin","scrollBarBorderWidth","ratio","cellBorder","columnHeaderCellBorder","columnHeaderCellBorderWidth","dataHeight","dataWidth","accumulator","va","setCanvasSize","setScrollBoxSize","checkScrollBoxVisibility","scrollBarBoxMinSize","scrollBarBoxWidth","entities","horizontalBar","horizontalBox","verticalBar","verticalBox","corner","bar","page","pageUpDownOverlap","overflowX","horizontalBoxVisible","overflowY","verticalBoxVisible","dim","isComponet","dragBounds","sBounds","delta","ctrlKey","metaKey","persistantSelectionMode","previousCell","rowBoundaryCrossed","columnBoundaryCrossed","cellBoundaryCrossed","prefix","draggingItem","dragItem","selecting","reorderObject","dragStart","dragStartObject","ignoreNextClick","startingBounds","grid","checkSelectionChange","treeArrowClickRadius","treeArrowHeight","treeArrowMarginTop","sb","dragResizeColumn","resizingStartingWidth","resizingStartingHeight","minRowHeight","resizeScrollZone","sortColumnIndex","rowOpen","globalRowResize","stopDragResize","scrollGrid","scrollPointerLock","scrollStartMode","movementX","movementY","scrollMode","scrollStart","stopScrollGrid","exitPointerLock","dragReorder","columReorder","rowReorder","allowColumnReordering","source","reorderDeadZone","reorderTarget","dragOffset","stopDragReorder","oIndex","tIndex","cr","row-reorder","column-reorder","dragMove","moveOffset","stopDragMove","movingSelection","freezeMove","freezeMarkerPosition","stopFreezeMove","startFreezeMove","lastMouseDownTarget","button","move","freeze","selected","requestPointerLock","dragging","cols","selectionFollowsActiveCell","deltaMode","touchHaltAnimation","pasteItem","clipData","mimeType","rowData","importingRow","existingRow","colKey","cellData","cName","normalizeRowData","getNextVisibleColumnIndex","visibleColumnIndex","clipboardData","dti","getAsString","outputHeaderKeys","tableRows","textRows","outputHeaders","sData","rowKeys","trRow","textRow","sSorted","fCopyCell","addCellValue","join","addHeaders","setData","htmlSafe","headers","useHtml","hVal","perfCounters","cachedImagesDrawn","drawCount","perfWindowSize","entityCount","scrollDebugCounters","touchPPSCounters","step","drawHtml","img","formattedValue","cacheKey","htmlImageCache","complete","drawImage","Image","onload","loaded","drawOnAllImagesLoaded","src","btoa","radiusRect","radius","beginPath","lineTo","quadraticCurveTo","fillRect","strokeRect","fillText","text","clipFrozenArea","lastFrozenColumnPixel","lastFrozenRowPixel","fillHandle","selectionHandleType","arc","PI","fill","fillCircle","strokeHandle","stroke","strokeCircle","addBorderLine","checkScrollHeight","cx","cy","rowHeight","rd","aCell","bc","selectionBorders","moveBorders","selectionHandles","rowHeaders","u","save","fillStyle","gridBackgroundColor","ln","drawRow","allowFreezingRows","frozenMarkerBorderWidth","frozenMarkerWidth","drawFrozenRows","g","snapToRow","drawCell","restore","drawRows","cl","lineWidth","activeCellOverlayBorderWidth","strokeStyle","activeCellOverlayBorderColor","drawActiveCell","columnHeaderCell","nonFrozenHeaderWidth","drawHeaderColumnRange","start","end","rArgs","rhIndex","rowOrderIndex","drawRowHeader","isColumnHeaderCell","endCap","drawHeaders","my","mx","xHover","yHover","allowFreezingColumns","frozenMarkerHoverColor","frozenMarkerColor","frozenMarkerHoverBorderColor","frozenMarkerBorderColor","frozenMarkerActiveColor","frozenMarkerActiveBorderColor","drawFrozenMarkers","allowMovingSelection","selectionHandleBorderWidth","selectionHandleBorderColor","selectionHandleColor","hw","selectionHandleSize","tr","br","tl","bl","addselectionHandle","az","touchSelectHandleZone","ax","ay","reorderMarkerBackgroundColor","reorderMarkerBorderWidth","reorderMarkerBorderColor","reorderMarkerIndexBorderWidth","reorderMarkerIndexBorderColor","sortRowIndex","drawReorderMarkers","moveOverlayBorderWidth","moveOverlayBorderColor","setLineDash","moveOverlayBorderSegments","gridBorderWidth","gridBorderColor","dsb","selectionOverlayBorderWidth","selectionOverlayBorderColor","drawSelectionBorders","drawCorner","scrollBarBorderColor","scrollBarBackgroundColor","scrollBarBoxColor","scrollBarActiveColor","scrollBarBoxBorderRadius","scrollBarCornerBorderColor","scrollBarCornerBackgroundColor","drawScrollBars","showPerformance","pop","debugFont","perf","perfDelta","frozenColumnsWidth","getFrozenColumnsWidth","htmlImages","scrollIndex","scrollPixel","canvasOffset","touchPPS","touchPPST","size","touch","debugBackgroundColor","debugColor","drawDebug","pw","px","py","ph","debugPerfChartBackground","debugScrollHeightColor","debugScrollWidthColor","debugPerformanceColor","debugEntitiesColor","debugTouchPPSXColor","debugTouchPPSYColor","dpl","perfArr","arrIndex","useAbs","drawPerfLine","debugPerfChartTextColor","drawPerfLines","createBorderOverlayArray","drawArray","propPrefix","offsetPoint","headerIndex","columnOrderIndex","cellStyle","hovered","active","rawValue","activeHeader","orderByArrowSize","treeArrowSize","fontHeight","horizontalAlignment","verticalAlignment","paddingLeft","paddingTop","paddingRight","paddingBottom","cellWhiteSpace","cellLineHeight","lineSpacing","cellLineSpacing","calculatedLineHeight","paddedWidth","paddedHeight","userHeight","userWidth","cellHeightWithChildGrid","cellWidthWithChildGrid","mt","mr","ml","aw","ah","treeArrowColor","treeArrowBorderColor","drawTreeArrow","showRowNumbers","component","cellGridHeight","columnHeaderOrderByArrowMarginTop","columnHeaderOrderByArrowMarginLeft","columnHeaderOrderByArrowMarginRight","columnHeaderOrderByArrowWidth","columnHeaderOrderByArrowHeight","columnHeaderOrderByArrowColor","columnHeaderOrderByArrowBorderColor","drawOrderByArrow","orderByArrowWidth","filterTextPrefix","splitChar","lines","word","elWidth","elClipLength","plWidth","clippedVal","previousLine","words","textHeight","wrap","et","ellipsisText","line","cHeight","measure","wrapText","vPos","hPos","idx_ord","drawText","selectionBorderTop","selectionBorderRight","selectionHandle","selectionBorderLeft","selectionBorderBottom","selectionHandleBehavior","createHandlesOverlayArray","treeHeight","rowSansTreeHeight","__WEBPACK_AMD_DEFINE_ARRAY__","typeMap","getDefaultItem","base","toLowerCase","nextLetterCap","char","cust","supressChangeAndDrawEvents","cStyle","defs","computedStyle","getPropertyValue","strData","strSchema","strNum","boolean","strBool","str","getObservableAttributes","attrs","attr","disconnectedCallback","this","connected","connectedCallback","observe","adoptedCallback","attributeChangedCallback","attrName","oldVal","newVal","tfn","eval","MutationObserver","mutations","checkInnerHTML","checkStyle","mutation","attributeName","addedNodes","characterData","childList","subtree","querySelectorAll","slice","arguments","Grid","createShadowRoot","attachShadow","HTMLElement","customElements","observedAttributes","canvasDatagrid","require","tKeys","argKey","tKey","sKey"],"mappings":"CAAA,SAAAA,EAAAC,GACA,iBAAAC,SAAA,iBAAAC,OACAA,OAAAD,QAAAD,IACA,mBAAAG,eAAAC,IACAD,UAAAH,GACA,iBAAAC,QACAA,QAAA,eAAAD,IAEAD,EAAA,eAAAC,IARA,CASCK,OAAA,WACD,mBCTA,IAAAC,KAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAP,QAGA,IAAAC,EAAAI,EAAAE,IACAC,EAAAD,EACAE,GAAA,EACAT,YAUA,OANAU,EAAAH,GAAAI,KAAAV,EAAAD,QAAAC,IAAAD,QAAAM,GAGAL,EAAAQ,GAAA,EAGAR,EAAAD,QA0DA,OArDAM,EAAAM,EAAAF,EAGAJ,EAAAO,EAAAR,EAGAC,EAAAQ,EAAA,SAAAd,EAAAe,EAAAC,GACAV,EAAAW,EAAAjB,EAAAe,IACAG,OAAAC,eAAAnB,EAAAe,GAA0CK,YAAA,EAAAC,IAAAL,KAK1CV,EAAAgB,EAAA,SAAAtB,GACA,oBAAAuB,eAAAC,aACAN,OAAAC,eAAAnB,EAAAuB,OAAAC,aAAwDC,MAAA,WAExDP,OAAAC,eAAAnB,EAAA,cAAiDyB,OAAA,KAQjDnB,EAAAoB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAAnB,EAAAmB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFAxB,EAAAgB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAAnB,EAAAQ,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAvB,EAAA2B,EAAA,SAAAhC,GACA,IAAAe,EAAAf,KAAA2B,WACA,WAA2B,OAAA3B,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAK,EAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD7B,EAAAgC,EAAA,GAIAhC,IAAAiC,EAAA,qBClFA,IAAAC,OAoTCC,KAlTDD,EAAA,WACA,aACA,gBAAAE,GACAA,EAAAC,UACAC,aACA,6BACA,yBACA,iCACA,yBACA,4BACA,4BACA,4BACA,0BACA,sBACA,8BACA,oBACA,0BACA,yBACA,8BACA,wBACA,mDACA,qCACA,kDACA,4CACA,kCACA,+BACA,+BACA,8BACA,oBACA,aACA,gBACA,uBACA,iCACA,mCACA,uBACA,6BACA,6BACA,iBACA,YACA,wBACA,sBACA,+BACA,iDACA,sBACA,wBACA,sBACA,sBACA,oCACA,yBACA,wBACA,kCACA,mCACA,yBACA,gCACA,2BACA,+BACA,yBACA,0BACA,gBACA,kBACA,kBACA,yBACA,qDACA,uDACA,iBACA,uBACA,sBACA,sBACA,iBACA,+BACA,oBACA,oCACA,iCACA,wCACA,uBACA,6BACA,8BACA,oBACA,sBACA,oBACA,YACA,4BAEAC,SACA,uDACA,mDACA,4BACA,uCACA,qCACA,4DACA,yCACA,4CACA,yDACA,mCACA,8BACA,4BACA,6BACA,2BACA,+DACA,+CACA,yCACA,mEACA,mDACA,gEACA,gDACA,gCACA,gCACA,sBACA,6BACA,iDACA,6CACA,sBACA,iCACA,+BACA,uBACA,kBACA,gCACA,mCACA,sDACA,sCACA,wBACA,sBACA,uBACA,qBACA,yDACA,yCACA,mCACA,kBACA,+BACA,4BACA,qBACA,sBACA,qDACA,yCACA,mCACA,iCACA,6DACA,yDACA,kCACA,gEACA,4DACA,qCACA,gDACA,2CACA,8BACA,+CACA,kEACA,kDACA,oCACA,kCACA,mCACA,iCACA,+CACA,iEACA,0CACA,2DACA,qCACA,yCACA,0CACA,wCACA,qCACA,iEACA,0CACA,uCACA,uDACA,gEACA,uCACA,4CACA,8CACA,sCACA,8DACA,6DACA,gDACA,wCACA,sCACA,mDACA,yDACA,kCACA,yCACA,2CACA,gCACA,mDACA,2CACA,+DACA,uCACA,+BACA,wDACA,iDACA,sCACA,gCACA,2CACA,uCACA,qCACA,oCACA,4BACA,4BACA,8BACA,6BACA,+BACA,0BACA,uDACA,mDACA,6CACA,sCACA,kDACA,gCACA,sDACA,uDACA,qDACA,sDACA,oDACA,mDACA,kDACA,2BACA,oCACA,sDACA,kDACA,0BACA,oCACA,4BACA,0BACA,uBACA,oDACA,0DACA,qDACA,2DACA,+CACA,qDACA,8BACA,wBACA,iDACA,kCACA,6CACA,sBACA,kBACA,wBACA,uBACA,sBACA,wBACA,oBACA,uBACA,+BACA,6BACA,sCACA,8BACA,6BACA,mDACA,sCACA,mBACA,qBACA,qBACA,sDACA,kDACA,kCACA,0DACA,uCACA,0DACA,sDACA,+BACA,6CACA,wCACA,2BACA,4CACA,+DACA,+CACA,iCACA,+BACA,gCACA,8BACA,kEACA,qDACA,4CACA,0BACA,kDACA,sDACA,kDACA,4BACA,mCACA,+CACA,yBACA,2BACA,wBACA,4DACA,wDACA,sBACA,wDACA,mCACA,iDACA,0BACA,iCACA,wDACA,kCACA,kDACA,2BACA,2BACA,4CACA,sBACA,0BACA,2BACA,yBACA,sBACA,uBACA,oBAICC,MAAA9C,SAAAC,EAAAD,QAAAwC,oBCpTD,IAAAA,OA+qCCC,KA7qCDD,EAAA,WACA,aACA,gBAAAE,GAQAA,EAAAK,eAAA,SAAAd,GAKA,IAJA,IAAAe,EAAA,IAAAC,WAAA,GAEAC,EADA,IAAAD,WAAA,GACAD,EAAA,EACAT,EAAA,GACAN,GAAA,GACAM,EAAAY,OAAAC,aAAAnB,EAAAiB,EAAAF,GAAAT,EACAN,EAAAoB,KAAAC,MAAArB,EAAAiB,GAAA,EAEA,OAAAX,GAWAG,EAAAa,aAAA,SAAA1C,EAAA2C,GACA,IAAAjB,EAAAG,EAAAe,YACA,GAAAlB,EAAAmB,OAAAF,EACA,UAAAG,MAAA,6CAEAjB,EAAAkB,eAAA/C,EAAA0B,GACAA,EAAAsB,OAAAL,EAAA,EAAA3C,GACA6B,EAAAoB,KAAAC,QAAA,SAAAC,GACAtB,EAAAuB,kBAAAD,EAAAnD,KAEA6B,EAAAwB,KAAAC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","file":"canvas-datagrid.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"canvasDatagrid\"] = factory();\n\telse\n\t\troot[\"canvasDatagrid\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 9);\n","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.defaults = {\n            attributes: [\n                ['allowColumnReordering', true],\n                ['allowColumnResize', true],\n                ['allowColumnResizeFromCell', false],\n                ['allowFreezingRows', false],\n                ['allowFreezingColumns', false],\n                ['allowMovingSelection', true],\n                ['allowRowHeaderResize', true],\n                ['allowRowReordering', false],\n                ['allowRowResize', true],\n                ['allowRowResizeFromCell', false],\n                ['allowSorting', true],\n                ['autoGenerateSchema', false],\n                ['autoResizeColumns', false],\n                ['borderDragBehavior', 'none'],\n                ['borderResizeZone', 10],\n                ['clearSettingsOptionText', 'Clear saved settings'],\n                ['columnHeaderClickBehavior', 'sort'],\n                ['columnSelectorHiddenText', '&nbsp;&nbsp;&nbsp;'],\n                ['columnSelectorText', 'Add/Remove columns'],\n                ['columnSelectorVisibleText', '\\u2713'],\n                ['contextHoverScrollAmount', 2],\n                ['contextHoverScrollRateMs', 5],\n                ['copyHeadersOnSelectAll', true],\n                ['copyText', 'Copy'],\n                ['debug', false],\n                ['editable', true],\n                ['ellipsisText', '...'],\n                ['filterOptionText', 'Filter %s'],\n                ['filterTextPrefix', '(filtered) '],\n                ['globalRowResize', false],\n                ['hideColumnText', 'Hide %s'],\n                ['maxAutoCompleteItems', 200],\n                ['multiLine', false],\n                ['name', ''],\n                ['pageUpDownOverlap', 1],\n                ['pasteText', 'Paste'],\n                ['persistantSelectionMode', false],\n                ['removeFilterOptionText', 'Remove filter on %s'],\n                ['reorderDeadZone', 3],\n                ['resizeScrollZone', 20],\n                ['rowGrabZoneSize', 5],\n                ['saveAppearance', true],\n                ['scrollAnimationPPSThreshold', 0.75],\n                ['scrollPointerLock', false],\n                ['scrollRepeatRate', 75],\n                ['selectionFollowsActiveCell', false],\n                ['selectionHandleBehavior', 'none'],\n                ['selectionMode', 'cell'],\n                ['selectionScrollIncrement', 20],\n                ['selectionScrollZone', 20],\n                ['showClearSettingsOption', true],\n                ['showColumnHeaders', true],\n                ['showColumnSelector', true],\n                ['showCopy', false],\n                ['showFilter', true],\n                ['showNewRow', false],\n                ['showOrderByOption', true],\n                ['showOrderByOptionTextAsc', 'Order by %s ascending'],\n                ['showOrderByOptionTextDesc', 'Order by %s descending'],\n                ['showPaste', false],\n                ['showPerformance', false],\n                ['showRowHeaders', true],\n                ['showRowNumbers', true],\n                ['snapToRow', false],\n                ['touchContextMenuTimeMs', 800],\n                ['touchDeadZone', 3],\n                ['touchEasingMethod', 'easeOutQuad'],\n                ['touchReleaseAcceleration', 1000],\n                ['touchReleaseAnimationDurationMs', 2000],\n                ['touchScrollZone', 20],\n                ['touchSelectHandleZone', 20],\n                ['touchZoomSensitivity', 0.005],\n                ['touchZoomMin', 0.5],\n                ['touchZoomMax', 1.75],\n                ['maxPixelRatio', 2],\n                ['tree', false],\n                ['treeHorizontalScroll', false]\n            ],\n            styles: [\n                ['activeCellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['activeCellBorderWidth', 1],\n                ['activeCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellFont', '16px sans-serif'],\n                ['activeCellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellHorizontalAlignment', 'left'],\n                ['activeCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['activeCellOverlayBorderWidth', 1],\n                ['activeCellPaddingBottom', 5],\n                ['activeCellPaddingLeft', 5],\n                ['activeCellPaddingRight', 5],\n                ['activeCellPaddingTop', 5],\n                ['activeCellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['activeCellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellVerticalAlignment', 'center'],\n                ['activeColumnHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeColumnHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeRowHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeRowHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['autocompleteBottomMargin', 60],\n                ['autosizeHeaderCellPadding', 8],\n                ['autosizePadding', 5],\n                ['cellAutoResizePadding', 13],\n                ['cellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['cellBorderWidth', 1],\n                ['cellColor', 'rgba(0, 0, 0, 1)'],\n                ['cellFont', '16px sans-serif'],\n                ['cellGridHeight', 250],\n                ['cellHeight', 24],\n                ['cellHeightWithChildGrid', 150],\n                ['cellHorizontalAlignment', 'left'],\n                ['cellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['cellPaddingBottom', 5],\n                ['cellPaddingLeft', 5],\n                ['cellPaddingRight', 5],\n                ['cellPaddingTop', 5],\n                ['cellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['cellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['cellVerticalAlignment', 'center'],\n                ['cellWidth', 250],\n                ['cellWidthWithChildGrid', 250],\n                ['cellWhiteSpace', 'nowrap'],\n                ['cellLineHeight', 1],\n                ['cellLineSpacing', 3],\n                ['childContextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['childContextMenuArrowHTML', '&#x25BA;'],\n                ['childContextMenuMarginLeft', -11],\n                ['childContextMenuMarginTop', -6],\n                ['columnHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellBorderColor', 'rgba(172, 172, 172, 1)'],\n                ['columnHeaderCellBorderWidth', 1],\n                ['columnHeaderCellCapBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellCapBorderColor', 'rgba(172, 172, 172, 1)'],\n                ['columnHeaderCellCapBorderWidth', 1],\n                ['columnHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['columnHeaderCellFont', '16px sans-serif'],\n                ['columnHeaderCellHeight', 25],\n                ['columnHeaderCellHorizontalAlignment', 'left'],\n                ['columnHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['columnHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['columnHeaderCellPaddingBottom', 5],\n                ['columnHeaderCellPaddingLeft', 5],\n                ['columnHeaderCellPaddingRight', 5],\n                ['columnHeaderCellPaddingTop', 5],\n                ['columnHeaderCellVerticalAlignment', 'center'],\n                ['columnHeaderOrderByArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['columnHeaderOrderByArrowBorderWidth', 1],\n                ['columnHeaderOrderByArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['columnHeaderOrderByArrowHeight', 8],\n                ['columnHeaderOrderByArrowMarginLeft', 0],\n                ['columnHeaderOrderByArrowMarginRight', 5],\n                ['columnHeaderOrderByArrowMarginTop', 6],\n                ['columnHeaderOrderByArrowWidth', 13],\n                ['contextFilterButtonBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterButtonBorderRadius', '3px'],\n                ['contextFilterButtonHTML', '&#x25BC;'],\n                ['contextFilterInputBackground', 'rgba(255,255,255,1)'],\n                ['contextFilterInputBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterInputBorderRadius', '0'],\n                ['contextFilterInputColor', 'rgba(0,0,0,1)'],\n                ['contextFilterInputFontFamily', 'sans-serif'],\n                ['contextFilterInputFontSize', '14px'],\n                ['contextFilterInvalidRegExpBackground', 'rgba(180, 6, 1, 1)'],\n                ['contextFilterInvalidRegExpColor', 'rgba(255, 255, 255, 1)'],\n                ['contextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuArrowDownHTML', '&#x25BC;'],\n                ['contextMenuArrowUpHTML', '&#x25B2;'],\n                ['contextMenuBackground', 'rgba(240, 240, 240, 1)'],\n                ['contextMenuBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextMenuBorderRadius', '3px'],\n                ['contextMenuChildArrowFontSize', '12px'],\n                ['contextMenuColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuCursor', 'default'],\n                ['contextMenuFilterButtonFontFamily', 'sans-serif'],\n                ['contextMenuFilterButtonFontSize', '10px'],\n                ['contextMenuFilterInvalidExpresion', 'rgba(237, 155, 156, 1)'],\n                ['contextMenuFontFamily', 'sans-serif'],\n                ['contextMenuFontSize', '16px'],\n                ['contextMenuHoverBackground', 'rgba(182, 205, 250, 1)'],\n                ['contextMenuHoverColor', 'rgba(43, 48, 153, 1)'],\n                ['contextMenuItemBorderRadius', '3px'],\n                ['contextMenuItemMargin', '2px'],\n                ['contextMenuLabelDisplay', 'inline-block'],\n                ['contextMenuLabelMargin', '0 3px 0 0'],\n                ['contextMenuLabelMaxWidth', '700px'],\n                ['contextMenuLabelMinWidth', '75px'],\n                ['contextMenuMarginLeft', 3],\n                ['contextMenuMarginTop', -3],\n                ['contextMenuOpacity', '0.98'],\n                ['contextMenuPadding', '2px'],\n                ['contextMenuWindowMargin', 30],\n                ['contextMenuZIndex', 10000],\n                ['cornerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cornerCellBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['debugBackgroundColor', 'rgba(0, 0, 0, .0)'],\n                ['debugColor', 'rgba(255, 15, 24, 1)'],\n                ['debugEntitiesColor', 'rgba(76, 231, 239, 1.00)'],\n                ['debugFont', '11px sans-serif'],\n                ['debugPerfChartBackground', 'rgba(29, 25, 26, 1.00)'],\n                ['debugPerfChartTextColor', 'rgba(255, 255, 255, 0.8)'],\n                ['debugPerformanceColor', 'rgba(252, 255, 37, 1.00)'],\n                ['debugScrollHeightColor', 'rgba(248, 33, 103, 1.00)'],\n                ['debugScrollWidthColor', 'rgba(66, 255, 27, 1.00)'],\n                ['debugTouchPPSXColor', 'rgba(246, 102, 24, 1.00)'],\n                ['debugTouchPPSYColor', 'rgba(186, 0, 255, 1.00)'],\n                ['display', 'inline-block'],\n                ['editCellBackgroundColor', 'white'],\n                ['editCellBorder', 'solid 1px rgba(110, 168, 255, 1)'],\n                ['editCellBoxShadow', '0 2px 5px rgba(0,0,0,0.4)'],\n                ['editCellColor', 'black'],\n                ['editCellFontFamily', 'sans-serif'],\n                ['editCellFontSize', '16px'],\n                ['editCellPaddingLeft', 4],\n                ['editCellZIndex', 10000],\n                ['frozenMarkerHoverColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerHoverBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerActiveColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerActiveBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerColor', 'rgba(222, 222, 222, 1)'],\n                ['frozenMarkerBorderColor', 'rgba(168, 168, 168, 1)'],\n                ['frozenMarkerBorderWidth', 1],\n                ['frozenMarkerWidth', 2],\n                ['gridBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['gridBorderCollapse', 'collapse'],\n                ['gridBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['gridBorderWidth', 1],\n                ['height', 'auto'],\n                ['maxHeight', 'inherit'],\n                ['maxWidth', 'inherit'],\n                ['minColumnWidth', 45],\n                ['minHeight', 'inherit'],\n                ['minRowHeight', 24],\n                ['minWidth', 'inherit'],\n                ['mobileContextMenuMargin', 10],\n                ['mobileEditInputHeight', 30],\n                ['mobileEditFontFamily', 'sans-serif'],\n                ['mobileEditFontSize', '16px'],\n                ['moveOverlayBorderWidth', 1],\n                ['moveOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['moveOverlayBorderSegments', '12, 7'],\n                ['name', 'default'],\n                ['overflowY', 'auto'],\n                ['overflowX', 'auto'],\n                ['reorderMarkerBackgroundColor', 'rgba(0, 0, 0, 0.1)'],\n                ['reorderMarkerBorderColor', 'rgba(0, 0, 0, 0.2)'],\n                ['reorderMarkerBorderWidth', 1.25],\n                ['reorderMarkerIndexBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['reorderMarkerIndexBorderWidth', 2.75],\n                ['rowHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['rowHeaderCellBorderColor', 'rgba(200, 200, 200, 1)'],\n                ['rowHeaderCellBorderWidth', 1],\n                ['rowHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellFont', '16px sans-serif'],\n                ['rowHeaderCellHeight', 25],\n                ['rowHeaderCellHorizontalAlignment', 'left'],\n                ['rowHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['rowHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['rowHeaderCellPaddingBottom', 5],\n                ['rowHeaderCellPaddingLeft', 5],\n                ['rowHeaderCellPaddingRight', 5],\n                ['rowHeaderCellPaddingTop', 5],\n                ['rowHeaderCellSelectedBackgroundColor', 'rgba(217, 217, 217, 1)'],\n                ['rowHeaderCellSelectedColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellVerticalAlignment', 'center'],\n                ['rowHeaderCellWidth', 57],\n                ['scrollBarActiveColor', 'rgba(125, 125, 125, 1)'],\n                ['scrollBarBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarBorderWidth', 0.5],\n                ['scrollBarBoxBorderRadius', 4.125],\n                ['scrollBarBoxColor', 'rgba(192, 192, 192, 1)'],\n                ['scrollBarBoxMargin', 2],\n                ['scrollBarBoxMinSize', 15],\n                ['scrollBarBoxWidth', 8],\n                ['scrollBarCornerBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarCornerBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarWidth', 11],\n                ['selectionHandleBorderColor', 'rgba(255, 255, 255, 1)'],\n                ['selectionHandleBorderWidth', 1.5],\n                ['selectionHandleColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionHandleSize', 8],\n                ['selectionHandleType', 'square'],\n                ['selectionOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionOverlayBorderWidth', 1],\n                ['treeArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['treeArrowBorderWidth', 1],\n                ['treeArrowClickRadius', 5],\n                ['treeArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['treeArrowHeight', 8],\n                ['treeArrowMarginLeft', 0],\n                ['treeArrowMarginRight', 5],\n                ['treeArrowMarginTop', 6],\n                ['treeArrowWidth', 13],\n                ['treeGridHeight', 250],\n                ['width', 'auto']\n            ]\n        };\n    };\n});\n","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        /**\n         * Converts a integer into a letter A - ZZZZZ...\n         * @memberof canvasDatagrid\n         * @name integerToAlpha\n         * @method\n         * @param {column} n The number to convert.\n         */\n        self.integerToAlpha = function (n) {\n            var ordA = 'a'.charCodeAt(0),\n                ordZ = 'z'.charCodeAt(0),\n                len = ordZ - ordA + 1,\n                s = '';\n            while (n >= 0) {\n                s = String.fromCharCode(n % len + ordA) + s;\n                n = Math.floor(n / len) - 1;\n            }\n            return s;\n        };\n        /**\n         * Inserts a new column before the specified index into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name insertColumn\n         * @method\n         * @param {column} c The column to insert into the schema.\n         * @param {number} index The index of the column to insert before.\n         */\n        self.insertColumn = function (c, index) {\n            var s = self.getSchema();\n            if (s.length < index) {\n                throw new Error('Index is beyond the length of the schema.');\n            }\n            self.validateColumn(c, s);\n            s.splice(index, 0, c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a column from the schema at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteColumn\n         * @tutorial schema\n         * @method\n         * @param {number} index The index of the column to delete.\n         */\n        self.deleteColumn = function (index) {\n            var s = self.getSchema();\n            // remove data matching this column name from data\n            self.data.forEach(function (row) {\n                delete row[s[index].name];\n            });\n            s.splice(index, 1);\n            self.intf.schema = s;\n        };\n        /**\n         * Adds a new column into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name addColumn\n         * @method\n         * @param {column} c The column to add to the schema.\n         */\n        self.addColumn = function (c) {\n            var s = self.getSchema();\n            self.validateColumn(c, s);\n            s.push(c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a row from the dataset at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteRow\n         * @method\n         * @param {number} index The index of the row to delete.\n         */\n        self.deleteRow = function (index) {\n            self.originalData.splice(index, 1);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Inserts a new row into the dataset before the specified index.\n         * @memberof canvasDatagrid\n         * @name insertRow\n         * @method\n         * @param {object} d data.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertRow = function (d, index) {\n            if (self.originalData.length < index) {\n                throw new Error('Index is beyond the length of the dataset.');\n            }\n            self.originalData.splice(index, 0, d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[index], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Adds a new row into the dataset.\n         * @memberof canvasDatagrid\n         * @name addRow\n         * @method\n         * @param {object} d data.\n         */\n        self.addRow = function (d) {\n            self.originalData.push(d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[self.originalData.length - 1], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Sets the height of a given row by index number.\n         * @memberof canvasDatagrid\n         * @name setRowHeight\n         * @method\n         * @param {number} rowIndex The index of the row to set.\n         * @param {number} height Height to set the row to.\n         */\n        self.setRowHeight = function (rowIndex, height) {\n            self.sizes.rows[rowIndex] = height;\n            self.draw(true);\n        };\n        /**\n         * Sets the width of a given column by index number.\n         * @memberof canvasDatagrid\n         * @name setColumnWidth\n         * @method\n         * @param {number} colIndex The index of the column to set.\n         * @param {number} width Width to set the column to.\n         */\n        self.setColumnWidth = function (colIndex, width) {\n            self.sizes.columns[colIndex] = width;\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the width of the columns due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetColumnWidths\n         * @tutorial schema\n         * @method\n         */\n        self.resetColumnWidths = function () {\n            self.sizes.columns = {};\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the height of the rows due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetRowHeights\n         * @tutorial schema\n         * @method\n         */\n        self.resetRowHeights = function () {\n            self.sizes.rows = {};\n            self.draw(true);\n        };\n        /**\n         * Sets the value of the filter.\n         * @memberof canvasDatagrid\n         * @name setFilter\n         * @method\n         * @param {string} column Name of the column to filter.\n         * @param {string} value The value to filter for.\n         */\n        self.setFilter = function (column, value) {\n            function applyFilter() {\n                self.refreshFromOrigialData();\n                Object.keys(self.columnFilters).forEach(function (filter) {\n                    var header = self.getHeaderByName(column);\n                    if (!header) {\n                        return;\n                    }\n                    self.currentFilter = header.filter || self.filter(column.type || 'string');\n                    self.data = self.data.filter(function (row) {\n                        return self.currentFilter(row[filter], self.columnFilters[filter]);\n                    });\n                });\n                self.resize();\n                self.draw(true);\n            }\n            if (column === undefined && value === undefined) {\n                self.columnFilters = {};\n                return applyFilter();\n            }\n            if (column && (value === '' || value === undefined)) {\n                delete self.columnFilters[column];\n            } else {\n                self.columnFilters[column] = value;\n            }\n            applyFilter();\n        };\n        /**\n         * Returns the number of pixels to scroll down to line up with row rowIndex.\n         * @memberof canvasDatagrid\n         * @name findRowScrollTop\n         * @method\n         * @param {number} rowIndex The row index of the row to scroll find.\n         */\n        self.findRowScrollTop = function (rowIndex) {\n            if (self.scrollCache.y[rowIndex] === undefined) { throw new RangeError('Row index out of range.'); }\n            return self.scrollCache.y[rowIndex];\n        };\n        /**\n         * Returns the number of pixels to scroll to the left to line up with column columnIndex.\n         * @memberof canvasDatagrid\n         * @name findColumnScrollLeft\n         * @method\n         * @param {number} columnIndex The column index of the column to find.\n         */\n        self.findColumnScrollLeft = function (columnIndex) {\n            var i = Math.max(columnIndex - 1, 0);\n            if (self.scrollCache.x[i] === undefined) { throw new Error('Column index out of range.'); }\n            return self.scrollCache.x[i] - self.getColummnWidth(self.orders.columns[columnIndex]);\n        };\n        /**\n         * Scrolls to the cell at columnIndex x, and rowIndex y.  If you define both rowIndex and columnIndex additional calculations can be made to center the cell using the target cell's height and width.  Defining only one rowIndex or only columnIndex will result in simpler calculations.\n         * @memberof canvasDatagrid\n         * @name gotoCell\n         * @method\n         * @param {number} x The column index of the cell to scroll to.\n         * @param {number} y The row index of the cell to scroll to.\n         * @param {number} [offsetX=0] Percentage offset the cell should be from the left edge (not including headers).  The default is 0, meaning the cell will appear at the left edge. Valid values are 0 through 1. 1 = Left, 0 = Right, 0.5 = Center.\n         * @param {number} [offsetY=0] Percentage offset the cell should be from the top edge (not including headers).  The default is 0, meaning the cell will appear at the top edge. Valid values are 0 through 1. 1 = Bottom, 0 = Top, 0.5 = Center.\n         */\n        self.gotoCell = function (x, y, offsetX, offsetY) {\n            var targetX = x === undefined ? undefined : self.findColumnScrollLeft(x),\n                targetY = y === undefined ? undefined : self.findRowScrollTop(y),\n                cell,\n                sbw = self.scrollBox.width - (self.scrollBox.verticalBarVisible ? self.style.scrollBarWidth : 0),\n                sbh = self.scrollBox.height - (self.scrollBox.horizontalBarVisible ? self.style.scrollBarWidth : 0);\n            offsetX = offsetX === undefined ? 0 : offsetX;\n            offsetY = offsetY === undefined ? 0 : offsetY;\n            targetX -= sbw * offsetX;\n            targetY -= sbh * offsetY;\n            if (x !== undefined && y !== undefined) {\n                self.scrollBox.scrollTo(targetX, targetY);\n                requestAnimationFrame(function () {\n                    cell = self.getVisibleCellByIndex(x, y);\n                    // HACK: just don't offset if the target cell cannot be seen\n                    // TODO: offset does not work on very small grids, not sure why\n                    if (!cell) { return; }\n                    targetX += cell.width * offsetX;\n                    targetY += cell.height * offsetY;\n                    self.scrollBox.scrollTo(targetX, targetY);\n                });\n            } else if (x !== undefined) {\n                self.scrollBox.scrollLeft = targetX;\n            } else if (y !== undefined) {\n                self.scrollBox.scrollTop = targetY;\n            }\n        };\n        /**\n         * Scrolls the row y.\n         * @memberof canvasDatagrid\n         * @name gotoRow\n         * @method\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoRow = function (y) {\n            self.gotoCell(0, y);\n        };\n        /**\n         * Scrolls the cell at cell x, row y into view if it is not already.\n         * @memberof canvasDatagrid\n         * @name scrollIntoView\n         * @method\n         * @param {number} x The column index of the cell to scroll into view.\n         * @param {number} y The row index of the cell to scroll into view.\n         * @param {number} [offsetX=0] Percentage offset the cell should be from the left edge (not including headers).  The default is 0, meaning the cell will appear at the left edge. Valid values are 0 through 1. 1 = Left, 0 = Right, 0.5 = Center.\n         * @param {number} [offsetY=0] Percentage offset the cell should be from the top edge (not including headers).  The default is 0, meaning the cell will appear at the top edge. Valid values are 0 through 1. 1 = Bottom, 0 = Top, 0.5 = Center.\n         */\n        self.scrollIntoView = function (x, y, offsetX, offsetY) {\n            if (self.visibleCells.filter(function (cell) {\n                    return (cell.rowIndex === y || y === undefined)\n                        && (cell.columnIndex === x || x === undefined)\n                        && cell.x > 0\n                        && cell.y > 0\n                        && cell.x + cell.width < self.width\n                        && cell.y + cell.height < self.height;\n                }).length === 0) {\n                self.gotoCell(x, y, offsetX, offsetY);\n            }\n        };\n        /**\n         * Sets the active cell. Requires redrawing.\n         * @memberof canvasDatagrid\n         * @name setActiveCell\n         * @method\n         * @param {number} x The column index of the cell to set active.\n         * @param {number} y The row index of the cell to set active.\n         */\n        self.setActiveCell = function (x, y) {\n            if (x < 0) { x = 0; }\n            if (y < 0) { y = 0; }\n            self.activeCell = {\n                rowIndex: y,\n                columnIndex: x\n            };\n        };\n        /**\n         * Removes the selection.\n         * @memberof canvasDatagrid\n         * @name selectNone\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectNone = function (dontDraw) {\n            self.selections = [];\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Selects every visible cell.\n         * @memberof canvasDatagrid\n         * @name selectAll\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectAll = function (dontDraw) {\n            self.selectArea({\n                top: 0,\n                left: -1,\n                right: self.getSchema().length - 1,\n                bottom: self.data.length - 1\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Returns true if the selected columnIndex is selected on every row.\n         * @memberof canvasDatagrid\n         * @name isColumnSelected\n         * @method\n         * @param {number} columnIndex The column index to check.\n         */\n        self.isColumnSelected = function (columnIndex) {\n            var colIsSelected = true;\n            self.data.forEach(function (row, rowIndex) {\n                if (!self.selections[rowIndex] || self.selections[rowIndex].indexOf(self.orders.columns[columnIndex]) === -1) {\n                    colIsSelected = false;\n                }\n            });\n            return colIsSelected;\n        };\n        /**\n         * Runs the defined method on each selected cell.\n         * @memberof canvasDatagrid\n         * @name forEachSelectedCell\n         * @method\n         * @param {number} fn The function to execute.  The signature of the function is: (data, rowIndex, columnName).\n         * @param {number} expandToRow When true the data in the array is expanded to the entire row.\n         */\n        self.forEachSelectedCell = function (fn, expandToRow) {\n            var d = [], s = expandToRow ? self.getSchema() : self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    if (col === -1 || !s[col]) { return; }\n                    fn(self.data, index, s[col].name);\n                });\n            });\n        };\n        /**\n         * Selects a column.\n         * @memberof canvasDatagrid\n         * @name selectColumn\n         * @method\n         * @param {number} columnIndex The column index to select.\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the column.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the column.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectColumn = function (columnIndex, ctrl, shift, supressEvent) {\n            var s, e, x;\n            function addCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) === -1) {\n                        self.selections[rowIndex].push(i);\n                    }\n                });\n            }\n            function removeCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) !== -1) {\n                        self.selections[rowIndex].splice(self.selections[rowIndex].indexOf(i), 1);\n                    }\n                });\n            }\n            if (shift) {\n                if (!self.activeCell) { return; }\n                s = Math.min(self.activeCell.columnIndex, columnIndex);\n                e = Math.max(self.activeCell.columnIndex, columnIndex);\n                for (x = s; e > x; x += 1) {\n                    addCol(x);\n                }\n            }\n            if (!ctrl && !shift) {\n                self.selections = [];\n                self.activeCell.columnIndex = columnIndex;\n                self.activeCell.rowIndex = self.scrollIndexTop;\n            }\n            if (ctrl && self.isColumnSelected(columnIndex)) {\n                removeCol(columnIndex);\n            } else {\n                addCol(columnIndex);\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.getSelectionBounds()\n            });\n        };\n        /**\n         * Selects a row.\n         * @memberof canvasDatagrid\n         * @name selectRow\n         * @method\n         * @param {number} rowIndex The row index to select.\n         * @param {boolean} ctrl When true, behaves as if you were holding control/command when you clicked the row.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the row.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectRow = function (rowIndex, ctrl, shift, supressEvent) {\n            var x, st, en, s = self.getVisibleSchema();\n            function de() {\n                if (supressEvent) { return; }\n                self.dispatchEvent('selectionchanged', {\n                    selectedData: self.getSelectedData(),\n                    selections: self.selections,\n                    selectionBounds: self.selectionBounds\n                });\n            }\n            function addRow(ri) {\n                self.selections[ri] = [];\n                self.selections[ri].push(-1);\n                s.forEach(function (col, index) {\n                    self.selections[ri].push(self.orders.columns.indexOf(col.index));\n                });\n            }\n            if (self.dragAddToSelection === false || self.dragObject === undefined) {\n                if (self.selections[rowIndex] && self.selections[rowIndex].length - 1 === s.length) {\n                    if (ctrl) {\n                        self.selections[rowIndex] = [];\n                        de();\n                        return;\n                    }\n                }\n            }\n            if (self.dragAddToSelection === true || self.dragObject === undefined) {\n                if (shift && self.dragObject === undefined) {\n                    if (!self.activeCell) { return; }\n                    st = Math.min(self.activeCell.rowIndex, rowIndex);\n                    en = Math.max(self.activeCell.rowIndex, rowIndex);\n                    for (x = st; en >= x; x += 1) {\n                        addRow(x);\n                    }\n                } else {\n                    addRow(rowIndex);\n                }\n            }\n            de();\n        };\n        /**\n         * Collapse a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name collapseTree\n         * @method\n         * @param {number} index The index of the row to collapse.\n         */\n        self.collapseTree = function (rowIndex) {\n            self.dispatchEvent('collapsetree', {\n                childGrid: self.childGrids[rowIndex],\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowIndex].blur();\n            self.openChildren[rowIndex].dispose();\n            delete self.openChildren[rowIndex];\n            delete self.sizes.trees[rowIndex];\n            delete self.childGrids[rowIndex];\n            self.dispatchEvent('resizerow', {\n                cellHeight: self.style.cellHeight\n            });\n            self.resize(true);\n            self.draw(true);\n        };\n        /**\n         * Expands a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name expandTree\n         * @method\n         * @param {number} index The index of the row to expand.\n         */\n        self.expandTree = function (rowIndex) {\n            var trArgs = self.args.treeGridAttributes || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth,\n                h = self.sizes.trees[rowIndex] || self.style.treeGridHeight,\n                treeGrid;\n            if (!self.childGrids[rowIndex]) {\n                trArgs.debug = self.attributes.debug;\n                trArgs.name = self.attributes.saveAppearance ? self.attributes.name + 'tree' + rowIndex : undefined;\n                trArgs.style = trArgs.style || self.style;\n                trArgs.parentNode = {\n                    parentGrid: self.intf,\n                    nodeType: 'canvas-datagrid-tree',\n                    offsetHeight: h,\n                    offsetWidth: self.width - rowHeaderCellWidth,\n                    header: { width: self.width - rowHeaderCellWidth },\n                    offsetLeft: rowHeaderCellWidth,\n                    offsetTop: columnHeaderCellHeight,\n                    offsetParent: self.intf.parentNode,\n                    parentNode: self.intf.parentNode,\n                    style: 'tree',\n                    data: self.data[rowIndex]\n                };\n                treeGrid = self.createGrid(trArgs);\n                self.childGrids[rowIndex] = treeGrid;\n            }\n            treeGrid = self.childGrids[rowIndex];\n            treeGrid.visible = true;\n            self.dispatchEvent('expandtree', {\n                treeGrid: treeGrid,\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowIndex] = treeGrid;\n            self.sizes.trees[rowIndex] = h;\n            self.dispatchEvent('resizerow', {height: self.style.cellHeight});\n            self.resize(true);\n        };\n        /**\n         * Toggles tree grid open and close by row index.\n         * @memberof canvasDatagrid\n         * @name toggleTree\n         * @method\n         * @param {number} index The index of the row to toggle.\n         */\n        self.toggleTree = function (rowIndex) {\n            var i = self.openChildren[rowIndex];\n            if (i) {\n                return self.collapseTree(rowIndex);\n            }\n            self.expandTree(rowIndex);\n        };\n        /**\n         * Returns a header from the schema by name.\n         * @memberof canvasDatagrid\n         * @name getHeaderByName\n         * @tutorial schema\n         * @method\n         * @returns {header} header with the selected name, or undefined.\n         * @param {string} name The name of the column to resize.\n         */\n        self.getHeaderByName = function (name) {\n            var x, i = self.getSchema();\n            for (x = 0; x < i.length; x += 1) {\n                if (i[x].name === name) {\n                    return i[x];\n                }\n            }\n        };\n        /**\n         * Resizes a column to fit the longest value in the column. Call without a value to resize all columns.\n         * Warning, can be slow on very large record sets (1m records ~3-5 seconds on an i7).\n         * @memberof canvasDatagrid\n         * @name fitColumnToValues\n         * @method\n         * @param {string} name The name of the column to resize.\n         */\n        self.fitColumnToValues = function (name, internal) {\n            if (!self.canvas) { return; }\n            self.sizes.columns[name === 'cornerCell' ? -1 : self.getHeaderByName(name).index]\n                = Math.max(self.findColumnMaxTextLength(name), self.style.minColumnWidth);\n            if (!internal) {\n                self.resize();\n                self.draw(true);\n            }\n        };\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @overload\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {number} columnIndex The column index of the cell to check.\n         * @param {number} rowIndex The row index of the cell to check.\n         */\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {cell} cell The cell to check for.  Alternatively you can pass an object { x: <x-pixel-value>, y: <y-pixel-value> }.\n         */\n        self.isCellVisible = function (cell, rowIndex) {\n            // overload\n            if (rowIndex !== undefined) {\n                return self.visibleCells.filter(function (c) {\n                    return c.columnIndex === cell && c.rowIndex === rowIndex;\n                }).length > 0;\n            }\n            var x, l = self.visibleCells.length;\n            for (x = 0; x < l; x += 1) {\n                if (cell.x === self.visibleCells[x].x && cell.y === self.visibleCells[x].y) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n         * Sets the order of the data.\n         * @memberof canvasDatagrid\n         * @name order\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} columnName Name of the column to be sorted.\n         * @param {string} direction `asc` for ascending or `desc` for descending.\n         * @param {function} [sortFunction] When defined, override the default sorting method defined in the column's schema and use this one.\n         * @param {bool} [dontSetStorageData] Don't store this setting for future use.\n         */\n        self.order = function (columnName, direction, sortFunction, dontSetStorageData) {\n            var f,\n                c = self.getSchema().filter(function (col) {\n                    return col.name === columnName;\n                });\n            if (self.dispatchEvent('beforesortcolumn', {name: columnName, direction: direction})) { return; }\n            self.orderBy = columnName;\n            if (!self.data || self.data.length === 0) { return; }\n            if (c.length === 0) {\n                throw new Error('Cannot sort.  No such column name');\n            }\n            f = sortFunction || self.sorters[c[0].type];\n            if (!f && c[0].type !== undefined) {\n                console.warn('Cannot sort type \"%s\" falling back to string sort.', c[0].type);\n            }\n            self.data = self.data.sort(typeof f === 'function' ? f(columnName, direction) : self.sorters.string);\n            self.dispatchEvent('sortcolumn', {name: columnName, direction: direction});\n            self.draw(true);\n            if (dontSetStorageData) { return; }\n            self.setStorageData();\n        };\n        self.isInGrid = function (e) {\n            if (e.x < 0\n                    || e.x > self.width\n                    || e.y < 0\n                    || e.y > self.height) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Moves the current selection relative to the its current position.  Note: this method does not move the selected data, just the selection itself.\n         * @memberof canvasDatagrid\n         * @name moveSelection\n         * @method\n         * @param {number} offsetX The number of columns to offset the selection.\n         * @param {number} offsetY The number of rows to offset the selection.\n         */\n        self.moveSelection = function (offsetX, offsetY) {\n            var sel = [];\n            self.selections.forEach(function (row, rowIndex) {\n                sel[rowIndex + offsetY] = [];\n                row.forEach(function (colIndex) {\n                    sel[rowIndex + offsetY].push(colIndex + offsetX);\n                });\n            });\n            self.selections = sel;\n        };\n        /**\n         * Moves data in the provided selection to another position in the grid.  Moving data off the edge of the schema (columns/x) will truncate data.\n         * @memberof canvasDatagrid\n         * @name moveTo\n         * @method\n         * @param {array} sel 2D array representing selected rows and columns.  `canvasDatagrid.selections` is in this format and can be used here.\n         * @param {number} x The column index to start inserting the selection at.\n         * @param {number} y The row index to start inserting the selection at.\n         */\n        self.moveTo = function (sel, x, y) {\n            var d = self.getSelectedData(),\n                s = self.getVisibleSchema(),\n                l = sel.length,\n                xi,\n                maxRowLength = -Infinity,\n                minXi = Infinity,\n                yi = y - 1;\n            sel.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) { return; }\n                minXi = Math.min(self.getVisibleColumnIndexOf(x), minXi);\n                maxRowLength = Math.max(maxRowLength, row.length);\n                row.forEach(function (colIndex) {\n                    // intentional redef of colIndex\n                    colIndex = self.getVisibleColumnIndexOf(colIndex);\n                    if (!s[colIndex]) { return; }\n                    if (!self.data[index]) { self.data[index] = {}; }\n                    self.data[index][s[colIndex].name] = null;\n                });\n            });\n            sel.forEach(function (row, index) {\n                var lastSourceIndex;\n                yi += 1;\n                xi = self.getVisibleColumnIndexOf(x);\n                row.forEach(function (colIndex, cidx) {\n                    colIndex = self.getVisibleColumnIndexOf(colIndex);\n                    if (cidx > 0) {\n                        // this confusing bit of nonsense figures out\n                        // if the selection has skipped cells\n                        xi += colIndex - lastSourceIndex;\n                    }\n                    lastSourceIndex = colIndex;\n                    if (colIndex === -1\n                            || !s[xi]\n                            || !s[colIndex]\n                            || self.data.length - 1 < yi\n                            || yi < 0) { return; }\n                    if (!self.data[yi]) { self.data[yi] = {}; }\n                    self.data[yi][s[xi].name] = d[index][s[colIndex].name];\n                });\n            });\n        };\n        /**\n         * Checks if a given column is visible.\n         * @memberof canvasDatagrid\n         * @name isColumnVisible\n         * @method\n         * @returns {boolean} When true, the column is visible.\n         * @param {number} columnIndex Column index.\n         */\n        self.isColumnVisible = function (columnIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === columnIndex;\n            }).length > 0;\n        };\n        /**\n         * Checks if a given row is visible.\n         * @memberof canvasDatagrid\n         * @name isRowVisible\n         * @method\n         * @returns {boolean} When true, the row is visible.\n         * @param {number} rowIndex Row index.\n         */\n        self.isRowVisible = function (rowIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.rowIndex === rowIndex;\n            }).length > 0;\n        };\n        /**\n         * Gets the cell at columnIndex and rowIndex.\n         * @memberof canvasDatagrid\n         * @name getVisibleCellByIndex\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Column index.\n         * @param {number} y Row index.\n         */\n        self.getVisibleCellByIndex = function (x, y) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === x && c.rowIndex === y;\n            })[0];\n        };\n        /**\n         * Gets the cell at grid pixel coordinate x and y.  Author's note.  This function ties drawing and events together.  This is a very complex function and is core to the component.\n         * @memberof canvasDatagrid\n         * @name getCellAt\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Number of pixels from the left.\n         * @param {number} y Number of pixels from the top.\n         */\n        self.getCellAt = function (x, y, useTouchScrollZones) {\n            function getBorder(entitiy) {\n                if (entitiy.x + entitiy.width - (self.attributes.borderResizeZone * 0.4) < x && entitiy.x + entitiy.width + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'r';\n                }\n                if (entitiy.x - (self.attributes.borderResizeZone * 0.4) < x && entitiy.x + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'l';\n                }\n                if (entitiy.y + entitiy.height - (self.attributes.borderResizeZone * 0.4) < y && entitiy.y + entitiy.height + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 'b';\n                }\n                if (entitiy.y - (self.attributes.borderResizeZone * 0.4) < y && entitiy.y + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 't';\n                }\n            }\n            if (!self.visibleCells) { return; }\n            var border,\n                tsz = useTouchScrollZones ? self.attributes.touchScrollZone : 0,\n                moveMode = self.attributes.borderDragBehavior === 'move',\n                i,\n                l = self.visibleCells.length,\n                moveBorder,\n                xBorderBehavior = moveMode ? self.cursorGrab : 'ew-resize',\n                yBorderBehavior = moveMode ? self.cursorGrab : 'ns-resize',\n                cell,\n                entitiy;\n            if (!self.visibleCells || !self.visibleCells.length) { return; }\n            self.hasFocus = true;\n            if (!(y < self.height\n                && y > 0\n                && x < self.width\n                && x > 0)) {\n                self.hasFocus = false;\n                return {\n                    dragContext: 'inherit',\n                    context: 'inherit'\n                };\n            }\n            for (i = 0; i < l; i += 1) {\n                cell = self.visibleCells[i];\n                // interactive dimensions of the cell.  used for touch \"over size\" zones\n                entitiy = {\n                    x: cell.x,\n                    y: cell.y,\n                    height: cell.height,\n                    width: cell.width\n                };\n                if (useTouchScrollZones && /(vertical|horizontal)-scroll-/.test(cell.style)) {\n                    entitiy.x -= tsz;\n                    entitiy.y -= tsz;\n                    entitiy.height += tsz;\n                    entitiy.width += tsz;\n                }\n                if (entitiy.x - self.style.cellBorderWidth < x\n                        && entitiy.x + entitiy.width + self.style.cellBorderWidth > x\n                        && entitiy.y - self.style.cellBorderWidth < y\n                        && entitiy.y + entitiy.height + self.style.cellBorderWidth > y) {\n                    if (/frozen-row-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'row-resize';\n                        return cell;\n                    }\n                    if (/frozen-column-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'col-resize';\n                        return cell;\n                    }\n                    if (/selection-handle-/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'crosshair';\n                        return cell;\n                    }\n                    if (/vertical-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'vertical-scroll-box';\n                        cell.context = 'vertical-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isVerticalScrollBar = true;\n                        if (y > self.scrollBox.box.v.y + self.scrollBox.scrollBoxHeight) {\n                            cell.dragContext = 'vertical-scroll-bottom';\n                            cell.context = 'vertical-scroll-bottom';\n                        } else if (y < self.scrollBox.box.v.y) {\n                            cell.dragContext = 'vertical-scroll-top';\n                            cell.context = 'vertical-scroll-top';\n                        }\n                        self.cursor = 'default';\n                        return cell;\n                    }\n                    if (/horizontal-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'horizontal-scroll-box';\n                        cell.context = 'horizontal-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isHorizontalScrollBar = true;\n                        if (x > self.scrollBox.box.h.x + self.scrollBox.scrollBoxWidth) {\n                            cell.dragContext = 'horizontal-scroll-right';\n                            cell.context = 'horizontal-scroll-right';\n                        } else if (x < self.scrollBox.box.h.x) {\n                            cell.dragContext = 'horizontal-scroll-left';\n                            cell.context = 'horizontal-scroll-left';\n                        }\n                        self.cursor = 'default';\n                        return cell;\n                    }\n                    border = getBorder(entitiy);\n                    // check if the border of this cell is the border of the selection and if so show move cursor in move mode\n                    moveBorder = moveMode && cell.selectionBorder && cell.selectionBorder.indexOf(border) !== -1;\n                    if (['l', 'r'].indexOf(border) !== -1\n                            && (self.attributes.allowColumnResize || moveBorder)\n                            && ((self.attributes.allowColumnResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && ((self.attributes.allowRowHeaderResize && (cell.isRowHeader || cell.isCorner)) || !(cell.isRowHeader && cell.isCorner))) {\n                        if (((cell.isColumnHeader || cell.isCorner) || (self.attributes.allowColumnResizeFromCell && cell.isNormal)) && border === 'r') {\n                            cell.context = 'ew-resize';\n                            cell.dragContext = 'ew-resize';\n                            return cell;\n                        }\n                        if (!(cell.isColumnHeader || cell.isCorner) && moveBorder) {\n                            cell.context = xBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (['t', 'b'].indexOf(border) !== -1\n                            && cell.rowIndex > -1\n                            && (self.attributes.allowRowResize || moveBorder)\n                            && ((self.attributes.allowRowResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && !cell.isColumnHeader) {\n                        if (((cell.isRowHeader || cell.isCorner) || (self.attributes.allowRowResizeFromCell && cell.isNormal)) && border === 'b') {\n                            cell.context = 'ns-resize';\n                            cell.dragContext = 'ns-resize';\n                            return cell;\n                        }\n                        if (!(cell.isRowHeader || cell.isCorner) && moveBorder) {\n                            cell.context = yBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (cell.style === 'columnHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'column-reorder';\n                        return cell;\n                    }\n                    if (cell.style === 'rowHeaderCell') {\n                        if ((self.attributes.rowGrabZoneSize + (cell.y - self.style.cellBorderWidth) < y)\n                                || !self.attributes.allowRowReordering) {\n                            cell.dragContext = 'cell';\n                            cell.context = 'cell';\n                        } else {\n                            cell.context = self.cursorGrab;\n                            cell.dragContext = 'row-reorder';\n                        }\n                        return cell;\n                    }\n                    if (cell.isGrid) {\n                        self.hasFocus = false;\n                        cell.dragContext = 'cell-grid';\n                        cell.context = 'cell-grid';\n                        return cell;\n                    }\n                    if (cell.style === 'tree-grid') {\n                        self.hasFocus = false;\n                        cell.dragContext = 'tree';\n                        cell.context = 'tree';\n                        return cell;\n                    }\n                    cell.dragContext = 'cell';\n                    cell.context = 'cell';\n                    return cell;\n                }\n            }\n            self.hasFocus = true;\n            self.cursor = 'default';\n            return {\n                dragContext: 'background',\n                context: 'background',\n                style: 'background',\n                isBackground: true\n            };\n        };\n        /**\n         * Gets the bounds of current selection. \n         * @returns {rect} selection.\n         * @memberof canvasDatagrid\n         * @name getSelectionBounds\n         * @method\n         */\n        self.getSelectionBounds = function () {\n            var low = {x: Infinity, y: Infinity},\n                high = {x: -Infinity, y: -Infinity};\n            self.selections.forEach(function (row, rowIndex) {\n                var maxCol, minCol;\n                low.y = rowIndex < low.y ? rowIndex : low.y;\n                high.y = rowIndex > high.y ? rowIndex : high.y;\n                maxCol = Math.max.apply(null, row);\n                minCol = Math.min.apply(null, row);\n                low.x = minCol < low.x ? minCol : low.x;\n                high.x = maxCol > high.x ? maxCol : high.x;\n            });\n            return {\n                top: low.y,\n                left: low.x,\n                bottom: high.y,\n                right: high.x\n            };\n        };\n        /**\n         * Returns an auto generated schema based on data structure.\n         * @memberof canvasDatagrid\n         * @name getSchemaFromData\n         * @method\n         * @tutorial schema\n         * @returns {schema} schema A schema based on the first item in the data array.\n         */\n        self.getSchemaFromData = function (d) {\n            d = d || self.data;\n            return Object.keys(d[0] || {' ': ''}).map(function mapEachSchemaColumn(key, index) {\n                var type = self.getBestGuessDataType(key, d),\n                    i = {\n                        name: key,\n                        title: isNaN(parseInt(key, 10)) ? key : self.integerToAlpha(key).toUpperCase(),\n                        index: index,\n                        type: type,\n                        filter: self.filter(type)\n                    };\n                if (self.storedSettings\n                        && self.storedSettings.visibility\n                        && self.storedSettings.visibility[i.name] !== undefined) {\n                    i.hidden = !self.storedSettings.visibility[i.name];\n                }\n                return i;\n            });\n        };\n        /**\n         * Clears the change log grid.changes that keeps track of changes to the data set.\n         * This does not undo changes or alter data it is simply a convince array to keep\n         * track of changes made to the data since last this method was called.\n         * @memberof canvasDatagrid\n         * @name clearChangeLog\n         * @method\n         */\n        self.clearChangeLog = function () {\n            self.changes = [];\n        };\n        /**\n         * Selects an area of the grid.\n         * @memberof canvasDatagrid\n         * @name selectArea\n         * @method\n         * @param {rect} bounds A rect object representing the selected values.\n         */\n        self.selectArea = function (bounds, ctrl) {\n            self.selectionBounds = bounds || self.selectionBounds;\n            var ev, x, y, s = self.getSchema();\n            if (!ctrl) {\n                self.selections = [];\n            }\n            if (self.selectionBounds.top < -1\n                    || self.selectionBounds.bottom > self.data.length\n                    || self.selectionBounds.left < -1\n                    || self.selectionBounds.right > s.length) {\n                throw new Error('Impossible selection area');\n            }\n            for (x = self.selectionBounds.top; x <= self.selectionBounds.bottom; x += 1) {\n                self.selections[x] = [];\n                for (y = self.selectionBounds.left; y <= self.selectionBounds.right; y += 1) {\n                    if (self.selections[x].indexOf(y) === -1) {\n                        self.selections[x].push(y);\n                    }\n                }\n            }\n            ev = {\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            };\n            Object.defineProperty(ev, 'selectedData', {\n                get: function () {\n                    return self.getSelectedData();\n                }\n            });\n            self.dispatchEvent('selectionchanged', ev);\n        };\n        /**\n         * Returns the maximum text width for a given column by column name.\n         * @memberof canvasDatagrid\n         * @name findColumnMaxTextLength\n         * @method\n         * @returns {number} The number of pixels wide the maximum width value in the selected column.\n         * @param {string} name The name of the column to calculate the value's width of.\n         */\n        self.findColumnMaxTextLength = function (name) {\n            var m = -Infinity;\n            if (name === 'cornerCell') {\n                self.ctx.font = self.style.rowHeaderCellFont;\n                return self.ctx.measureText((self.data.length + (self.attributes.showNewRow ? 1 : 0)).toString()).width\n                    + self.style.autosizePadding + self.style.autosizeHeaderCellPadding\n                    + self.style.rowHeaderCellPaddingRight\n                    + self.style.rowHeaderCellPaddingLeft\n                    + (self.attributes.tree ? self.style.treeArrowWidth\n                        + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight : 0);\n            }\n            self.getSchema().forEach(function (col) {\n                if (col.name !== name) { return; }\n                self.ctx.font = self.style.columnHeaderCellFont;\n                var t = self.ctx.measureText(col.title || col.name).width\n                    + self.style.headerCellPaddingRight\n                    + self.style.headerCellPaddingLeft;\n                m = t > m ? t : m;\n            });\n            self.data.forEach(function (row) {\n                self.ctx.font = self.style.cellFont;\n                var t = self.ctx.measureText(row[name]).width\n                    + self.style.cellPaddingRight\n                    + self.style.cellPaddingLeft + self.style.cellAutoResizePadding;\n                m = t > m ? t : m;\n            });\n            return m;\n        };\n        /**\n         * Gets the total width of all header columns.\n         * @memberof canvasDatagrid\n         * @name getHeaderWidth\n         * @method\n         */\n        self.getHeaderWidth = function () {\n            return self.getVisibleSchema().reduce(function (total, header) {\n                return total + (header.width || self.style.cellWidth);\n            }, 0);\n        };\n        /**\n         * Gets the height of a row by index.\n         * @memberof canvasDatagrid\n         * @name getRowHeight\n         * @method\n         * @param {number} rowIndex The row index to lookup.\n         */\n        self.getRowHeight = function (rowIndex) {\n            return ((self.sizes.rows[rowIndex]\n                    || self.style.cellHeight) * self.scale);\n        };\n        /**\n         * Gets the width of a column by index.\n         * @memberof canvasDatagrid\n         * @name getColummnWidth\n         * @method\n         * @param {number} columnIndex The column index to lookup.\n         */\n        self.getColummnWidth = function (columnIndex) {\n            return ((self.sizes.columns[columnIndex]\n                    || self.getSchema()[columnIndex].width\n                    || self.style.cellWidth) * self.scale);\n        };\n        self.formatters.string = function cellFormatterString(e) {\n            return e.cell.value !== undefined ? e.cell.value : '';\n        };\n        self.formatters.rowHeaderCell = self.formatters.string;\n        self.formatters.headerCell = self.formatters.string;\n        self.formatters.number = self.formatters.string;\n        self.formatters.int = self.formatters.string;\n        self.formatters.html = self.formatters.string;\n        self.sorters.string = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (a[columnName] === undefined || a[columnName] === null) {\n                    return 1;\n                }\n                if (b[columnName] === undefined || b[columnName] === null) {\n                    return 0;\n                }\n                if (asc) {\n                    if (!a[columnName].localeCompare) { return 1; }\n                    return a[columnName].localeCompare(b[columnName]);\n                }\n                if (!b[columnName].localeCompare) { return 1; }\n                return b[columnName].localeCompare(a[columnName]);\n            };\n        };\n        self.sorters.number = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return a[columnName] - b[columnName];\n                }\n                return b[columnName] - a[columnName];\n            };\n        };\n        self.sorters.date = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return new Date(a[columnName]).getTime()\n                        - new Date(b[columnName]).getTime();\n                }\n                return new Date(b[columnName]).getTime()\n                        - new Date(a[columnName]).getTime();\n            };\n        };\n    };\n});\n","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.getClippingRect = function (ele) {\n            var boundingRect = self.position(self.parentNode),\n                eleRect = self.position(ele),\n                s = self.scrollOffset(self.canvas),\n                clipRect = {\n                    x: 0,\n                    y: 0,\n                    h: 0,\n                    w: 0\n                },\n                parentRect = {\n                    x: -Infinity,\n                    y: -Infinity,\n                    h: Infinity,\n                    w: Infinity\n                },\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth();\n            boundingRect.top -= s.top;\n            boundingRect.left -= s.left;\n            eleRect.top -= s.top;\n            eleRect.left -= s.left;\n            clipRect.h = boundingRect.top + boundingRect.height - ele.offsetTop - self.style.scrollBarWidth;\n            clipRect.w = boundingRect.left + boundingRect.width - ele.offsetLeft - self.style.scrollBarWidth;\n            clipRect.x = boundingRect.left + (eleRect.left * -1) + rowHeaderCellWidth;\n            clipRect.y = boundingRect.top + (eleRect.top * -1) + columnHeaderCellHeight;\n            return {\n                x: clipRect.x > parentRect.x ? clipRect.x : parentRect.x,\n                y: clipRect.y > parentRect.y ? clipRect.y : parentRect.y,\n                h: clipRect.h < parentRect.h ? clipRect.h : parentRect.h,\n                w: clipRect.w < parentRect.w ? clipRect.w : parentRect.w\n            };\n        };\n        self.clipElement = function (ele) {\n            var clipRect = self.getClippingRect(ele);\n            if (clipRect.w < 0) { clipRect.w = 0; }\n            if (clipRect.h < 0) { clipRect.h = 0; }\n            ele.style.clip = 'rect('\n                + clipRect.y + 'px,'\n                + clipRect.w + 'px,'\n                + clipRect.h + 'px,'\n                + clipRect.x + 'px'\n                + ')';\n            // INFO https://developer.mozilla.org/en-US/docs/Web/CSS/clip\n            // clip has been \"deprecated\" for clipPath.  Of course nothing but chrome\n            // supports clip path, so we'll keep using clip until someday clipPath becomes\n            // more widely support.  The code below works correctly, but setting clipPath and clip\n            // at the same time has undesirable results.\n            // ele.style.clipPath = 'polygon('\n            //     + clipRect.x + 'px ' + clipRect.y + 'px,'\n            //     + clipRect.x + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.y + 'px'\n            //     + ')';\n        };\n        self.scrollOffset = function (e) {\n            var x = 0, y = 0, scrollingElement = document.scrollingElement || { scrollLeft: 0, scrollTop: 0 };\n            while (e.parentNode && e.nodeName !== 'CANVAS-DATAGRID' && e !== self.intf) {\n                if (e.nodeType !== 'canvas-datagrid-tree'\n                        && e.nodeType !== 'canvas-datagrid-cell') {\n                    x -= e.scrollLeft;\n                    y -= e.scrollTop;\n                }\n                e = e.parentNode;\n            }\n            return {\n                left: x - scrollingElement.scrollLeft,\n                top: y - scrollingElement.scrollTop\n            };\n        };\n        self.resizeEditInput = function () {\n            if (self.input && self.input.editCell) {\n                var pos = self.canvas.getBoundingClientRect(),\n                    s = self.scrollOffset(self.intf),\n                    bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                    borderWidth = (self.style.cellBorderWidth * bm),\n                    cell = self.getVisibleCellByIndex(self.input.editCell.columnIndex, self.input.editCell.rowIndex)\n                        || {x: -100, y: -100, height: 0, width: 0};\n                if (self.mobile) {\n                    self.input.style.left = '0';\n                    self.input.style.top = (self.height - self.style.mobileEditInputHeight) - borderWidth - 1 + 'px';\n                    self.input.style.height = self.style.mobileEditInputHeight + 'px';\n                    self.input.style.width = self.width - borderWidth - 1 + 'px';\n                    return;\n                }\n                self.input.style.left = pos.left + cell.x + self.canvasOffsetLeft - s.left + 'px';\n                self.input.style.top = pos.top + cell.y - self.style.cellBorderWidth + self.canvasOffsetTop - s.top + 'px';\n                self.input.style.height = cell.height - borderWidth + 'px';\n                self.input.style.width = cell.width - self.style.cellPaddingLeft + 'px';\n                self.clipElement(self.input);\n            }\n        };\n        self.position = function (e, ignoreScrollOffset) {\n            var x = 0, y = 0, s = e, h, w;\n            while (e.offsetParent && e.nodeName !== 'CANVAS-DATAGRID') {\n                x += e.offsetLeft;\n                y += e.offsetTop;\n                h = e.offsetHeight;\n                w = e.offsetWidth;\n                e = e.offsetParent;\n            }\n            if (ignoreScrollOffset) {\n                return {left: x, top: y, height: h, width: w};\n            }\n            e = s;\n            s = self.scrollOffset(e);\n            return { left: x + s.left, top: y + s.top, height: h, width: w };\n        };\n        self.getLayerPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.clientX - rect.left,\n                    y: e.clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        /**\n         * Ends editing, optionally aborting the edit.\n         * @memberof canvasDatagrid\n         * @name endEdit\n         * @method\n         * @param {boolean} abort When true, abort the edit.\n         */\n        self.endEdit = function (abort) {\n            var cell = self.input.editCell,\n                y = cell.rowIndex;\n            function abortEdit() {\n                abort = true;\n            }\n            if (self.dispatchEvent('beforeendedit', {\n                    cell: cell,\n                    newValue: self.input.value,\n                    oldValue: cell.value,\n                    abort: abortEdit,\n                    input: self.input\n                })) { return false; }\n            if (self.input.value !== cell.value && !abort) {\n                self.changes[y] = self.changes[y] || {};\n                self.changes[y][cell.header.name] = self.input.value;\n                if (!cell.data) {\n                    self.data[cell.rowIndex] = {};\n                    cell.data = self.data[cell.rowIndex];\n                }\n                cell.data[cell.header.name] = self.input.value;\n                if (y === self.data.length) {\n                    if (self.dispatchEvent('newrow', {\n                            value: self.input.value,\n                            defaultValue: cell.value,\n                            aborted: abort,\n                            cell: cell,\n                            input: self.input\n                        })) { return false; }\n                    self.addRow(cell.data);\n                    self.createNewRowData();\n                }\n                self.draw(true);\n            }\n            if (self.input.parentNode) {\n                self.input.parentNode.removeChild(self.input);\n            }\n            self.intf.focus();\n            self.dispatchEvent('endedit', {\n                cell: cell,\n                value: self.input.value,\n                aborted: abort,\n                input: self.input\n            });\n            self.input = undefined;\n            return true;\n        };\n        /**\n         * Begins editing at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name beginEditAt\n         * @method\n         * @param {number} x The column index of the cell to edit.\n         * @param {number} y The row index of the cell to edit.\n         */\n        self.beginEditAt = function (x, y, NativeEvent) {\n            if (!self.attributes.editable) { return; }\n            if (self.input) {\n                self.endEdit();\n            }\n            var cell = self.getVisibleCellByIndex(x, y),\n                s = self.getSchema(),\n                adjacentCells,\n                enumItems,\n                enu,\n                option,\n                valueInEnum;\n            if (!(cell && cell.header)) { return; }\n            //HACK for IE10, does not like literal enum\n            enu = cell.header['enum'];\n            if (self.dispatchEvent('beforebeginedit', {cell: cell, NativeEvent: NativeEvent})) { return false; }\n            self.scrollIntoView(x, y);\n            self.setActiveCell(x, y);\n            adjacentCells = self.getAdjacentCells();\n            if (enu) {\n                self.input = document.createElement('select');\n            } else {\n                self.input = document.createElement(self.attributes.multiLine\n                    ? 'textarea' : 'input');\n            }\n            cell = self.getVisibleCellByIndex(x, y);\n            //HACK on mobile devices sometimes edit can begin without the cell being in view, I don't know how.\n            if (!cell) { return; }\n            if (enu) {\n                // add enums\n                if (typeof enu === 'function') {\n                    enumItems = enu.apply(self.intf, [{cell: cell}]);\n                } else if (Array.isArray(enu)) {\n                    enumItems = enu;\n                }\n                enumItems.forEach(function (e) {\n                    var i = document.createElement('option'),\n                        val,\n                        title;\n                    if (Array.isArray(e)) {\n                        val = e[0];\n                        title = e[1];\n                    } else {\n                        val = e;\n                        title = e;\n                    }\n                    if (val === cell.value) { valueInEnum = true; }\n                    i.value = val;\n                    i.innerHTML = title;\n                    self.input.appendChild(i);\n                });\n                if (!valueInEnum) {\n                    option = document.createElement('option');\n                    option.value = cell.value;\n                    option.innerHTML = cell.value;\n                    self.input.appendChild(option);\n                }\n                self.input.addEventListener('change', function () {\n                    self.endEdit();\n                    self.draw(true);\n                });\n            }\n            // if the user has not prevented the default action, append to the body\n            if (!self.dispatchEvent('appendeditinput', {cell: cell, input:self.input})) { \n                document.body.appendChild(self.input);\n            }\n            self.createInlineStyle(self.input, self.mobile ? 'canvas-datagrid-edit-mobile-input' : 'canvas-datagrid-edit-input');\n            self.input.style.position = 'absolute';\n            self.input.editCell = cell;\n            self.resizeEditInput();\n            self.input.style.zIndex = self.style.editCellZIndex;\n            self.input.style.fontSize = (parseInt(self.style.editCellFontSize, 10) * self.scale) + 'px';\n            self.input.value = [null, undefined].indexOf(cell.value) !== -1 ? '' : cell.value;\n            self.input.focus();\n            self.input.addEventListener('click', self.stopPropagation);\n            self.input.addEventListener('dblclick', self.stopPropagation);\n            self.input.addEventListener('mouseup', self.stopPropagation);\n            self.input.addEventListener('mousedown', self.stopPropagation);\n            self.input.addEventListener('keydown', function (e) {\n                var nx = cell.columnIndex,\n                    ny = cell.rowIndex;\n                // esc\n                if (e.keyCode === 27) {\n                    self.endEdit(true);\n                    self.draw(true);\n                // enter\n                } else if (e.keyCode === 13\n                        && (!self.attributes.multiLine\n                            || (self.attributes.multiLine && e.shiftKey))) {\n                    self.endEdit();\n                    self.draw(true);\n                } else if (e.keyCode === 9) {\n                    e.preventDefault();\n                    if (!self.endEdit()) {\n                        return;\n                    }\n                    if (e.shiftKey) {\n                        nx = adjacentCells.left;\n                    } else {\n                        nx = adjacentCells.right;\n                    }\n                    if (adjacentCells.left === x && e.shiftKey) {\n                        nx = adjacentCells.last;\n                        ny -= 1;\n                    }\n                    if (adjacentCells.right === x && !e.shiftKey) {\n                        nx = adjacentCells.first;\n                        ny += 1;\n                    }\n                    if (ny < 0) {\n                        ny = self.data.length - 1;\n                    }\n                    if (ny > self.data.length - 1) {\n                        ny = 0;\n                    }\n                    self.scrollIntoView(nx, ny);\n                    self.beginEditAt(nx, ny, e);\n                }\n            });\n            self.dispatchEvent('beginedit', {cell: cell, input: self.input});\n        };\n        self.createInlineStyle = function (el, className) {\n            var css = {\n                'canvas-datagrid-context-menu-filter-input': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextFilterInputBackground,\n                    color: self.style.contextFilterInputColor,\n                    border: self.style.contextFilterInputBorder,\n                    borderRadius: self.style.contextFilterInputBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextFilterInputFontFamily,\n                    fontSize: self.style.contextFilterInputFontSize\n                },\n                'canvas-datagrid-context-menu-filter-button': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextFilterButtonBorder,\n                    borderRadius: self.style.contextFilterButtonBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFilterButtonFontFamily,\n                    fontSize: self.style.contextMenuFilterButtonFontSize\n                },\n                'canvas-datagrid-context-child-arrow': {\n                    cssFloat: 'right',\n                    color: self.style.childContextMenuArrowColor,\n                    fontSize: self.style.contextMenuChildArrowFontSize,\n                    fontFamily: self.style.contextMenuFontFamily,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-autocomplete': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    position: 'absolute',\n                    zIndex: 9999,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-autocomplete-item': {\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor\n                },\n                'canvas-datagrid-autocomplete-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-canvas': {\n                    position: 'absolute',\n                    zIndex: '-1'\n                },\n                'canvas-datagrid': {\n                    display: 'block'\n                },\n                'canvas-datagrid-control-input': {\n                    position: 'fixed',\n                    top: '-5px',\n                    left: '-5px',\n                    border: 'none',\n                    opacity: '0',\n                    cursor: 'pointer',\n                    width: '1px',\n                    height: '1px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize\n                },\n                'canvas-datagrid-edit-mobile-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 0',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.mobileEditFontFamily,\n                    fontSize: self.style.mobileEditFontSize,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-edit-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 ' + self.style.editCellPaddingLeft + 'px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.editCellFontFamily,\n                    fontSize: self.style.editCellFontSize,\n                    boxShadow: self.style.editCellBoxShadow,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-context-menu-item-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-context-menu-label': {\n                    margin: self.style.contextMenuLabelMargin,\n                    display: self.style.contextMenuLabelDisplay,\n                    minWidth: self.style.contextMenuLabelMinWidth,\n                    maxWidth: self.style.contextMenuLabelMaxWidth\n                },\n                'canvas-datagrid-context-menu-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-context-menu': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap',\n                    cursor: self.style.contextMenuCursor\n                },\n                'canvas-datagrid-invalid-search-regExp': {\n                    background: self.style.contextMenuFilterInvalidExpresion\n                }\n            };\n            if (css[className]) {\n                Object.keys(css[className]).map(function (prop) {\n                    el.style[prop] = css[className][prop];\n                });\n            }\n            return;\n        };\n        self.appendTo = function (e) {\n            self.parentNode = e;\n            self.setDom();\n        };\n        self.setDom = function () {\n            if (self.isChildGrid) {\n                self.parentGrid = self.parentNode.parentGrid;\n                self.ctx = self.parentGrid.context;\n                self.canvas = self.parentGrid.canvas;\n                self.controlInput = self.parentGrid.controlInput;\n                self.eventParent = self.canvas;\n            } else {\n                self.controlInput = self.controlInput || document.createElement('input');\n                self.controlInput.onblur = self.intf.blur;\n                self.createInlineStyle(self.controlInput, 'canvas-datagrid-control-input');\n                self.isChildGrid = false;\n                self.parentDOMNode = self.parentNode;\n                self.parentIsCanvas = /^canvas$/i.test(self.parentDOMNode.tagName);\n                if (self.parentIsCanvas) {\n                    self.canvas = self.parentDOMNode;\n                    document.body.appendChild(self.controlInput);\n                } else {\n                    self.canvas = document.createElement('canvas');\n                    self.parentDOMNode.appendChild(self.canvas);\n                    document.body.appendChild(self.controlInput);\n                }\n                self.createInlineStyle(self.canvas, 'canvas-datagrid');\n                self.ctx = self.canvas.getContext('2d');\n                self.ctx.textBaseline = 'alphabetic';\n                self.eventParent = self.canvas;\n            }\n            self.parentNodeStyle = self.canvas.style;\n            self.controlInput.setAttribute('readonly', true);\n            self.controlInput.addEventListener('blur', function (e) {\n                if (e.target !== self.canvas) {\n                    self.hasFocus = false;\n                }\n            });\n            self.eventParent.addEventListener('scroll', self.resize, false);\n            self.eventParent.addEventListener('touchstart', self.touchstart, false);\n            self.eventParent.addEventListener('mouseup', self.mouseup, false);\n            self.eventParent.addEventListener('mousedown', self.mousedown, false);\n            self.eventParent.addEventListener('dblclick', self.dblclick, false);\n            self.eventParent.addEventListener('click', self.click, false);\n            self.eventParent.addEventListener('mousemove', self.mousemove);\n            self[self.isChildGrid ? 'parentGrid' : 'eventParent'].addEventListener('wheel', self.scrollWheel, false);\n            self.canvas.addEventListener('contextmenu', self.contextmenuEvent, false);\n            self.controlInput.addEventListener('copy', self.copy);\n            self.controlInput.addEventListener('cut', self.cut);\n            self.controlInput.addEventListener('paste', self.paste);\n            self.controlInput.addEventListener('keypress', self.keypress, false);\n            self.controlInput.addEventListener('keyup', self.keyup, false);\n            self.controlInput.addEventListener('keydown', self.keydown, false);\n            window.addEventListener('resize', self.resize);\n        };\n    };\n});\n","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false, Event: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var zIndexTop, hoverScrollTimeout, autoCompleteContext;\n        function applyContextItemStyle(contextItemContainer) {\n            self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item' + (self.mobile ? '-mobile' : ''));\n            contextItemContainer.addEventListener('mouseover', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n            });\n            contextItemContainer.addEventListener('mouseout', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n            });\n        }\n        function createContextMenu(ev, pos, items, parentContextMenu) {\n            var container = document.createElement('div'),\n                upArrow = document.createElement('div'),\n                downArrow = document.createElement('div'),\n                children = [],\n                selectedIndex = -1,\n                intf = {},\n                rect;\n            if (!Array.isArray(items)) { throw new Error('createContextMenu expects an array.'); }\n            function createItems() {\n                items.forEach(function (item) {\n                    var contextItemContainer = document.createElement('div'),\n                        childMenuArrow;\n                    function removeChildContext(e) {\n                        if (e.relatedTarget === container\n                                || item.contextMenu.container === e.relatedTarget\n                                || childMenuArrow === e.relatedTarget\n                                || (contextItemContainer === e.relatedTarget)\n                                || item.contextMenu.container.contains(e.relatedTarget)\n                                ) { return; }\n                        item.contextMenu.dispose();\n                        children.splice(children.indexOf(item.contextMenu), 1);\n                        item.contextMenu = undefined;\n                        contextItemContainer.removeEventListener('mouseout', removeChildContext);\n                        container.removeEventListener('mouseout', removeChildContext);\n                        contextItemContainer.setAttribute('contextOpen', '0');\n                        contextItemContainer.setAttribute('opening', '0');\n                    }\n                    function contextAddCallback(items) {\n                        // check yet again if the user hasn't moved off\n                        if (contextItemContainer.getAttribute('opening') !== '1' ||\n                                contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        var cPos = contextItemContainer.getBoundingClientRect();\n                        cPos = {\n                            left: cPos.left + self.style.childContextMenuMarginLeft + container.offsetWidth,\n                            top: cPos.top + self.style.childContextMenuMarginTop,\n                            bottom: cPos.bottom,\n                            right: cPos.right\n                        };\n                        item.contextMenu = createContextMenu(ev, cPos, items, intf);\n                        contextItemContainer.setAttribute('contextOpen', '1');\n                        contextItemContainer.addEventListener('mouseout', removeChildContext);\n                        container.addEventListener('mouseout', removeChildContext);\n                        children.push(item.contextMenu);\n                    }\n                    function createChildContext() {\n                        var i;\n                        if (contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        contextItemContainer.setAttribute('opening', '1');\n                        if (typeof item.items === 'function') {\n                            i  = item.items.apply(intf, [function (items) {\n                                contextAddCallback(items);\n                            }]);\n                            if (i !== undefined && Array.isArray(i)) {\n                                contextAddCallback(i);\n                            }\n                            return;\n                        }\n                        contextAddCallback(item.items);\n                    }\n                    function addItem(item) {\n                        function addContent(content) {\n                            if (content === null) { return; }\n                            if (typeof content === 'function') {\n                                return addContent(content(ev));\n                            }\n                            if (typeof content === 'object') {\n                                contextItemContainer.appendChild(content);\n                                return;\n                            }\n                            applyContextItemStyle(contextItemContainer);\n                            contextItemContainer.innerHTML = content;\n                            return;\n                        }\n                        addContent(item.title);\n                        item.contextItemContainer = contextItemContainer;\n                        if ((item.items && item.items.length > 0) || typeof item.items === 'function') {\n                            childMenuArrow = document.createElement('div');\n                            self.createInlineStyle(childMenuArrow, 'canvas-datagrid-context-child-arrow');\n                            childMenuArrow.innerHTML = self.style.childContextMenuArrowHTML;\n                            contextItemContainer.appendChild(childMenuArrow);\n                            contextItemContainer.addEventListener('mouseover', createChildContext);\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                contextItemContainer.setAttribute('opening', '0');\n                            });\n                        }\n                        if (item.click) {\n                            contextItemContainer.addEventListener('click', function (ev) {\n                                item.click.apply(self, [ev]);\n                            });\n                        }\n                    }\n                    addItem(item);\n                    container.appendChild(contextItemContainer);\n                });\n            }\n            function clickIndex(idx) {\n                items[idx].contextItemContainer.dispatchEvent(new Event('click'));\n            }\n            function checkArrowVisibility() {\n                if (container.scrollTop > 0) {\n                    self.parentDOMNode.appendChild(upArrow);\n                } else if (upArrow.parentNode) {\n                    upArrow.parentNode.removeChild(upArrow);\n                }\n                if (container.scrollTop >= container.scrollHeight - container.offsetHeight && downArrow.parentNode) {\n                    downArrow.parentNode.removeChild(downArrow);\n                } else if (container.scrollHeight - container.offsetHeight > 0\n                        && !(container.scrollTop >= container.scrollHeight - container.offsetHeight)) {\n                    self.parentDOMNode.appendChild(downArrow);\n                }\n            }\n            function startHoverScroll(type) {\n                return function t() {\n                    var a = self.attributes.contextHoverScrollAmount;\n                    if (type === 'up' && container.scrollTop === 0) { return; }\n                    if (type === 'down' && container.scrollTop === container.scrollHeight) { return; }\n                    container.scrollTop += (type === 'up' ? -a : a);\n                    hoverScrollTimeout = setTimeout(t, self.attributes.contextHoverScrollRateMs, type);\n                };\n            }\n            function endHoverScroll(type) {\n                return function () {\n                    clearTimeout(hoverScrollTimeout);\n                };\n            }\n            function init() {\n                var loc = {},\n                    s = self.scrollOffset(self.canvas);\n                if (zIndexTop === undefined) {\n                    zIndexTop = self.style.contextMenuZIndex;\n                }\n                createItems();\n                self.createInlineStyle(container, 'canvas-datagrid-context-menu' + (self.mobile ? '-mobile' : ''));\n                loc.x = pos.left - s.left;\n                loc.y = pos.top - s.top;\n                loc.height = 0;\n                zIndexTop += 1;\n                container.style.position = 'absolute';\n                upArrow.style.color = self.style.contextMenuArrowColor;\n                downArrow.style.color = self.style.contextMenuArrowColor;\n                [upArrow, downArrow].forEach(function (el) {\n                    el.style.textAlign = 'center';\n                    el.style.position = 'absolute';\n                    el.style.zIndex = zIndexTop + 1;\n                });\n                container.style.zIndex = zIndexTop;\n                if (parentContextMenu && parentContextMenu.inputDropdown) {\n                    container.style.maxHeight = window.innerHeight - loc.y - self.style.autocompleteBottomMargin + 'px';\n                    container.style.minWidth = pos.width + 'px';\n                    loc.y += pos.height;\n                }\n                if (self.mobile) {\n                    container.style.width = pos.width + 'px';\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                container.addEventListener('scroll', checkArrowVisibility);\n                container.addEventListener('wheel', function (e) {\n                    if (self.hasFocus) {\n                        container.scrollTop += e.deltaY;\n                        container.scrollLeft += e.deltaX;\n                    }\n                    checkArrowVisibility();\n                });\n                upArrow.innerHTML = self.style.contextMenuArrowUpHTML;\n                downArrow.innerHTML = self.style.contextMenuArrowDownHTML;\n                container.appendChild(upArrow);\n                document.body.appendChild(downArrow);\n                document.body.appendChild(container);\n                rect = container.getBoundingClientRect();\n                // TODO: fix !(parentContextMenu && parentContextMenu.inputDropdown) state (autocomplete)\n                if (rect.bottom > window.innerHeight) {\n                    if (!(parentContextMenu && parentContextMenu.inputDropdown)) {\n                        loc.y -= (rect.bottom + self.style.contextMenuWindowMargin) - window.innerHeight;\n                    }\n                    if (loc.y < 0) { loc.y = self.style.contextMenuWindowMargin; }\n                    if (container.offsetHeight > window.innerHeight - self.style.contextMenuWindowMargin) {\n                        container.style.height = window.innerHeight - (self.style.contextMenuWindowMargin * 2) + 'px';\n                    }\n                }\n                if (rect.right > window.innerWidth) {\n                    loc.x -= rect.right - window.innerWidth + self.style.contextMenuWindowMargin;\n                }\n                if (loc.x < 0) { loc.x = self.style.contextMenuWindowMargin; }\n                if (loc.y < 0) { loc.y = self.style.contextMenuWindowMargin; }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                rect = container.getBoundingClientRect();\n                upArrow.style.top = rect.top + 'px';\n                downArrow.style.top = rect.top + rect.height - downArrow.offsetHeight + 'px';\n                upArrow.style.left = rect.left + 'px';\n                downArrow.style.left = rect.left + 'px';\n                downArrow.style.width = container.offsetWidth + 'px';\n                upArrow.style.width = container.offsetWidth + 'px';\n                downArrow.addEventListener('mouseover', startHoverScroll('down'));\n                downArrow.addEventListener('mouseout', endHoverScroll('down'));\n                upArrow.addEventListener('mouseover', startHoverScroll('up'));\n                upArrow.addEventListener('mouseout', endHoverScroll('up'));\n                checkArrowVisibility();\n            }\n            intf.parentGrid = self.intf;\n            intf.parentContextMenu = parentContextMenu;\n            intf.container = container;\n            init();\n            intf.clickIndex = clickIndex;\n            intf.rect = rect;\n            intf.items = items;\n            intf.upArrow = upArrow;\n            intf.downArrow = downArrow;\n            intf.dispose = function () {\n                clearTimeout(hoverScrollTimeout);\n                children.forEach(function (c) {\n                    c.dispose();\n                });\n                [downArrow, upArrow, container].forEach(function (el) {\n                    if (el.parentNode) { el.parentNode.removeChild(el); }\n                });\n            };\n            Object.defineProperty(intf, 'selectedIndex', {\n                get: function () {\n                    return selectedIndex;\n                },\n                set: function (value) {\n                    if (typeof value !== 'number' || isNaN(value || !isFinite(value))) {\n                        throw new Error('Context menu selected index must be a sane number.');\n                    }\n                    selectedIndex = value;\n                    if (selectedIndex > items.length - 1) {\n                        selectedIndex = items.length - 1;\n                    }\n                    if (selectedIndex < 0) {\n                        selectedIndex = 0;\n                    }\n                    items.forEach(function (item, index) {\n                        if (index === selectedIndex) {\n                            return self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                        }\n                        self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item');\n                    });\n                }\n            });\n            return intf;\n        }\n        function createFilterContextMenuItems(e) {\n            var filterContainer = document.createElement('div'),\n                filterLabel = document.createElement('div'),\n                filterAutoCompleteButton = document.createElement('button'),\n                filterInput = document.createElement('input'),\n                n = e.cell && e.cell.header ? e.cell.header.title || e.cell.header.name : '',\n                autoCompleteItems,\n                iRect;\n            function checkRegExpErrorState() {\n                filterInput.style.background = self.style.contextFilterInputBackground;\n                filterInput.style.color = self.style.contextFilterInputColor;\n                if (self.invalidFilterRegEx) {\n                    filterInput.style.background = self.style.contextFilterInvalidRegExpBackground;\n                    filterInput.style.color = self.style.contextFilterInvalidRegExpColor;\n                }\n            }\n            function fillAutoComplete() {\n                var count = 0;\n                autoCompleteItems = {};\n                self.data.forEach(function (row) {\n                    var value = row[e.cell.header.name];\n                    if (autoCompleteItems[value] || count > self.attributes.maxAutoCompleteItems) { return; }\n                    count += 1;\n                    autoCompleteItems[value] = {\n                        title: self.formatters[e.cell.header.type || 'string']({ cell: { value: value }}),\n                        click: function (e) {\n                            filterInput.value = value;\n                            e.stopPropagation();\n                            filterInput.dispatchEvent(new Event('keyup'));\n                            self.disposeAutocomplete();\n                            return;\n                        }\n                    };\n                });\n                autoCompleteItems = Object.keys(autoCompleteItems).map(function (key) {\n                    return autoCompleteItems[key];\n                });\n            }\n            function createAutoCompleteContext(ev) {\n                if (ev && [40, 38, 13, 9].indexOf(ev.keyCode) !== -1) { return; }\n                fillAutoComplete();\n                iRect = filterInput.getBoundingClientRect();\n                if (autoCompleteContext) {\n                    autoCompleteContext.dispose();\n                    autoCompleteContext = undefined;\n                }\n                autoCompleteContext = createContextMenu(e, {\n                    left: iRect.left,\n                    top: iRect.top,\n                    right: iRect.right,\n                    bottom: iRect.bottom,\n                    height: iRect.height,\n                    width: iRect.width\n                }, autoCompleteItems, {inputDropdown: true});\n                autoCompleteContext.selectedIndex = 0;\n            }\n            self.createInlineStyle(filterLabel, 'canvas-datagrid-context-menu-label');\n            self.createInlineStyle(filterAutoCompleteButton, 'canvas-datagrid-context-menu-filter-button');\n            self.createInlineStyle(filterInput, 'canvas-datagrid-context-menu-filter-input');\n            checkRegExpErrorState();\n            filterInput.onclick = self.disposeAutocomplete;\n            filterInput.addEventListener('keydown', function (e) {\n                //down\n                if (e.keyCode === 40) {\n                    autoCompleteContext.selectedIndex += 1;\n                }\n                //up\n                if (e.keyCode === 38) {\n                    autoCompleteContext.selectedIndex -= 1;\n                }\n                //enter\n                if (e.keyCode === 13) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    self.disposeContextMenu();\n                }\n                //tab\n                if (e.keyCode === 9) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    e.preventDefault();\n                }\n                //esc\n                if (e.keyCode === 27) {\n                    self.disposeContextMenu();\n                }\n            });\n            filterInput.addEventListener('keyup', function () {\n                self.setFilter(e.cell.header.name, filterInput.value);\n            });\n            filterInput.addEventListener('keyup', createAutoCompleteContext);\n            ['focus', 'blur', 'keydown', 'keyup', 'change'].forEach(function (en) {\n                filterInput.addEventListener(en, checkRegExpErrorState);\n            });\n            filterInput.value = e.cell.header ? self.columnFilters[e.cell.header.name] || '' : '';\n            filterLabel.innerHTML = self.attributes.filterOptionText.replace(/%s/g, n);\n            filterAutoCompleteButton.onclick = function () {\n                if (autoCompleteContext) {\n                    return self.disposeAutocomplete();\n                }\n                createAutoCompleteContext();\n            };\n            filterAutoCompleteButton.innerHTML = self.style.contextFilterButtonHTML;\n            filterContainer.addEventListener('click', function (e) {\n                return e.stopPropagation();\n            });\n            filterContainer.appendChild(filterLabel);\n            filterContainer.appendChild(filterInput);\n            filterContainer.appendChild(filterAutoCompleteButton);\n            e.items.push({\n                title: filterContainer\n            });\n            if (Object.keys(self.columnFilters).length) {\n                Object.keys(self.columnFilters).forEach(function (cf) {\n                    var h = self.getHeaderByName(cf);\n                    e.items.push({\n                        title: self.attributes.removeFilterOptionText.replace(/%s/g, h.title || h.name),\n                        click: function removeFilterClick(e) {\n                            e.preventDefault();\n                            self.setFilter(cf, '');\n                            self.controlInput.focus();\n                        }\n                    });\n                });\n            }\n        }\n        function addDefaultContextMenuItem(e) {\n            var isNormalCell = !(e.cell.isBackground || e.cell.isColumnHeaderCellCap\n                    || e.cell.isScrollBar || e.cell.isCorner || e.cell.isRowHeader)\n                    && e.cell.header;\n            if (self.attributes.showFilter && isNormalCell) {\n                createFilterContextMenuItems(e);\n            }\n            if (self.attributes.showCopy\n                    && self.selections.reduce(function (p, r) {\n                        return p + r.length;\n                    }, 0) > 0) {\n                e.items.push({\n                    title: self.attributes.copyText,\n                    click: function () {\n                        document.execCommand('copy');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.showPaste && self.clipBoardData) {\n                e.items.push({\n                    title: self.attributes.pasteText,\n                    click: function () {\n                        self.paste(self.clipBoardData, e.cell.columnIndex, e.cell.rowIndex);\n                        self.draw();\n                    }\n                });\n            }\n            if (self.attributes.showColumnSelector) {\n                e.items.push({\n                    title: self.attributes.columnSelectorText,\n                    items: function () {\n                        var d = [];\n                        self.getSchema().forEach(function (column) {\n                            function toggleColumnVisibility(e) {\n                                column.hidden = !column.hidden;\n                                self.dispatchEvent('togglecolumn', {column: column, hidden: column.hidden});\n                                e.preventDefault();\n                                self.stopPropagation(e);\n                                self.disposeContextMenu();\n                                self.resize(true);\n                                self.setStorageData();\n                            }\n                            var el = document.createElement('div');\n                            applyContextItemStyle(el);\n                            el.addEventListener('touchstart', toggleColumnVisibility);\n                            el.addEventListener('click', toggleColumnVisibility);\n                            el.innerHTML = (column.hidden ? self.attributes.columnSelectorHiddenText\n                                    : self.attributes.columnSelectorVisibleText)\n                                    + (column.title || column.name);\n                            d.push({\n                                title: el\n                            });\n                        });\n                        return d;\n                    }\n                });\n                if (e.cell && e.cell.header && e.cell.columnIndex > -1) {\n                    e.items.push({\n                        title: self.attributes.hideColumnText\n                            .replace(/%s/ig, e.cell.header.title || e.cell.header.name),\n                        click: function (ev) {\n                            self.getSchema()[e.cell.columnIndex].hidden = true;\n                            ev.preventDefault();\n                            self.stopPropagation(ev);\n                            self.disposeContextMenu();\n                            self.setStorageData();\n                            setTimeout(function () { self.resize(true); }, 10);\n                        }\n                    });\n                }\n            }\n            if (self.attributes.saveAppearance && self.attributes.showClearSettingsOption\n                    && (Object.keys(self.sizes.rows).length > 0\n                        || Object.keys(self.sizes.columns).length > 0)) {\n                e.items.push({\n                    title: self.attributes.clearSettingsOptionText,\n                    click: function (e) {\n                        e.preventDefault();\n                        self.sizes.rows = {};\n                        self.sizes.columns = {};\n                        self.createRowOrders();\n                        self.createColumnOrders();\n                        self.storedSettings = undefined;\n                        self.dispatchEvent('resizecolumn', {columnWidth: self.style.cellWidth});\n                        self.dispatchEvent('resizerow', {cellHeight: self.style.cellHeight});\n                        self.setStorageData();\n                        self.resize(true);\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.allowSorting && self.attributes.showOrderByOption && isNormalCell) {\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextAsc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'asc');\n                        self.controlInput.focus();\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextDesc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'desc');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n        }\n        self.disposeAutocomplete = function () {\n            if (autoCompleteContext) {\n                autoCompleteContext.dispose();\n                autoCompleteContext = undefined;\n            }\n        };\n        self.disposeContextMenu = function () {\n            document.removeEventListener('click', self.disposeContextMenu);\n            zIndexTop = self.style.contextMenuZIndex;\n            self.disposeAutocomplete();\n            if (self.contextMenu) {\n                self.contextMenu.dispose();\n            }\n            self.contextMenu = undefined;\n        };\n        self.contextmenuEvent = function (e, overridePos) {\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            function createDiposeEvent() {\n                requestAnimationFrame(function () {\n                    document.addEventListener('click', self.disposeContextMenu);\n                    document.removeEventListener('mouseup', createDiposeEvent);\n                });\n            }\n            var contextPosition,\n                items = [],\n                pos = overridePos || self.getLayerPos(e),\n                ev = {\n                    NativeEvent: e,\n                    cell: self.getCellAt(pos.x, pos.y),\n                    items: items\n                };\n            if (!ev.cell.isGrid) {\n                addDefaultContextMenuItem(ev);\n            }\n            if (self.dispatchEvent('contextmenu', ev)) {\n                return;\n            }\n            if (!ev.cell.isGrid) {\n                if (self.contextMenu) {\n                    self.disposeContextMenu();\n                }\n                contextPosition = {\n                    left: pos.x + pos.rect.left\n                        + self.style.contextMenuMarginLeft + self.canvasOffsetLeft,\n                    top: pos.y + pos.rect.top\n                        + self.style.contextMenuMarginTop + self.canvasOffsetTop,\n                    right: ev.cell.width + ev.cell.x + pos.rect.left,\n                    bottom: ev.cell.height + ev.cell.y + pos.rect.top,\n                    height: ev.cell.height,\n                    width: ev.cell.width\n                };\n                if (self.mobile) {\n                    contextPosition.left = self.style.mobileContextMenuMargin + 'px';\n                    contextPosition.width = self.width - (self.style.mobileContextMenuMargin * 2) + 'px';\n                }\n                self.contextMenu = createContextMenu(ev, contextPosition, items);\n                document.addEventListener('mouseup', createDiposeEvent);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n","/*jslint browser: true, unparam: true, todo: true*/\n/*globals HTMLElement: false, Reflect: false, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self, ctor) {\n        self.scale = 1;\n        self.orders = {\n            rows: [],\n            columns: []\n        };\n        self.appliedInlineStyles = {};\n        self.cellGridAttributes = {};\n        self.treeGridAttributes = {};\n        self.visibleRowHeights = [];\n        self.hasFocus = false;\n        self.activeCell = {\n            columnIndex: 0,\n            rowIndex: 0\n        };\n        self.innerHTML = '';\n        self.storageName = 'canvasDataGrid';\n        self.invalidSearchExpClass = 'canvas-datagrid-invalid-search-regExp';\n        self.localStyleLibraryStorageKey = 'canvas-datagrid-user-style-library';\n        self.dataType = 'application/x-canvas-datagrid';\n        self.orderBy = null;\n        self.orderDirection = 'asc';\n        self.columnFilters = {};\n        self.filters = {};\n        self.frozenRow = 0;\n        self.frozenColumn = 0;\n        self.ellipsisCache = {};\n        self.scrollCache = { x: [], y: [] };\n        self.scrollBox = {};\n        self.visibleRows = [];\n        self.sizes = {\n            rows: {},\n            columns: {},\n            trees: {}\n        };\n        self.currentFilter = function () {\n            return true;\n        };\n        self.selections = [];\n        self.hovers = {};\n        self.attributes = {};\n        self.style = {};\n        self.formatters = {};\n        self.sorters = {};\n        self.parsers = {};\n        self.schemaHashes = {};\n        self.events = {};\n        self.changes = [];\n        self.scrollIndexTop = 0;\n        self.scrollPixelTop = 0;\n        self.scrollIndexLeft = 0;\n        self.scrollPixelLeft = 0;\n        self.childGrids = {};\n        self.openChildren = {};\n        self.scrollModes = [\n            'vertical-scroll-box',\n            'vertical-scroll-top',\n            'vertical-scroll-bottom',\n            'horizontal-scroll-box',\n            'horizontal-scroll-right',\n            'horizontal-scroll-left'\n        ];\n        self.componentL1Events = {};\n        self.eventNames = ['afterdraw', 'afterrendercell', 'attributechanged', 'beforebeginedit',\n            'beforecreatecellgrid', 'beforedraw', 'beforeendedit', 'beforerendercell', 'beforerendercellgrid',\n            'beginedit', 'cellmouseout', 'cellmouseover', 'click', 'collapsetree', 'contextmenu', 'copy',\n            'datachanged', 'dblclick', 'endedit', 'expandtree', 'formatcellvalue', 'keydown', 'keypress',\n            'keyup', 'mousedown', 'mousemove', 'mouseup', 'newrow', 'ordercolumn', 'rendercell', 'rendercellgrid',\n            'renderorderbyarrow', 'rendertext', 'rendertreearrow', 'reorder', 'reordering', 'resize',\n            'resizecolumn', 'resizerow', 'schemachanged', 'scroll', 'selectionchanged', 'stylechanged',\n            'touchcancel', 'touchend', 'touchmove', 'touchstart', 'wheel'];\n        self.mouse = { x: 0, y: 0};\n        self.getSelectedData = function (expandToRow) {\n            var d = [], s = self.getSchema(), l = self.data.length;\n            if (l === 0) { return []; }\n            self.selections.forEach(function (row, index) {\n                if (!row) { return; }\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    var orderedIndex;\n                    if (col === -1 || !s[col]) { return; }\n                    orderedIndex = self.orders.columns[col];\n                    if (!expandToRow && s[orderedIndex].hidden) { return; }\n                    if (self.data[index]) {\n                        d[index][s[orderedIndex].name] = self.data[index][s[orderedIndex].name];\n                    }\n                });\n            });\n            return d;\n        };\n        self.getColumnHeaderCellHeight = function () {\n            if (!self.attributes.showColumnHeaders) { return 0; }\n            return ((self.sizes.rows[-1] || self.style.columnHeaderCellHeight) * self.scale);\n        };\n        self.getRowHeaderCellWidth = function () {\n            if (!self.attributes.showRowHeaders) { return 0; }\n            return (self.sizes.columns[-1] || self.style.rowHeaderCellWidth) * self.scale;\n        };\n        self.setStorageData = function () {\n            if (!self.attributes.saveAppearance || !self.attributes.name) { return; }\n            var visibility = {};\n            self.getSchema().forEach(function (column) {\n                visibility[column.name] = !column.hidden;\n            });\n            localStorage.setItem(self.storageName + '-' + self.attributes.name, JSON.stringify({\n                sizes: {\n                    rows: self.sizes.rows,\n                    columns: self.sizes.columns\n                },\n                orders: {\n                    rows: self.orders.rows,\n                    columns: self.orders.columns\n                },\n                orderBy: self.orderBy,\n                orderDirection: self.orderDirection,\n                visibility: visibility\n            }));\n        };\n        self.getSchema = function () {\n            return self.schema || self.tempSchema || [];\n        };\n        function fillArray(low, high) {\n            var i = [], x;\n            for (x = low; x <= high; x += 1) {\n                i[x] = x;\n            }\n            return i;\n        }\n        self.createColumnOrders = function () {\n            var s = self.getSchema();\n            self.orders.columns = fillArray(0, s.length - 1);\n        };\n        self.createRowOrders = function () {\n            self.orders.rows = fillArray(0, self.data.length - 1);\n        };\n        self.getVisibleSchema = function () {\n            return self.getSchema().filter(function (col) {\n                return !col.hidden;\n            });\n        };\n        self.applyDefaultValue = function (row, header) {\n            var d = header.defaultValue || '';\n            if (typeof d === 'function') {\n                d = d.apply(self.intf, [header]);\n            }\n            row[header.name] = d;\n        };\n        self.createNewRowData = function () {\n            self.newRow = {};\n            self.getSchema().forEach(function forEachHeader(header) {\n                self.applyDefaultValue(self.newRow, header);\n            });\n        };\n        self.getSchemaNameHash = function (key) {\n            var n = 0;\n            while (self.schemaHashes[key]) {\n                n += 1;\n                key = key + n;\n            }\n            return key;\n        };\n        self.filter = function (type) {\n            var f = self.filters[type];\n            if (!f && type !== undefined) {\n                console.warn('Cannot find filter for type %s, falling back to substring match.', type);\n                f = self.filters.string;\n            }\n            return f;\n        };\n        self.getBestGuessDataType = function (columnName, data) {\n            var t, x, l = data.length;\n            for (x = 0; x < l; x += 1) {\n                if (data[x] !== undefined && data[x] !== null && [null, undefined].indexOf(data[x][columnName]) !== -1) {\n                    t = typeof data[x];\n                    return t === 'object' ? 'string' : t;\n                }\n            }\n            return 'string';\n        };\n        self.drawChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].draw();\n            });\n        };\n        self.resizeChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].resize();\n            });\n        };\n        self.autoScrollZone = function (e, x, y, ctrl) {\n            var setTimer,\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight();\n            if (y !== -1) {\n                if (x > self.width - self.attributes.selectionScrollZone && x < self.width) {\n                    self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n                if (x - self.attributes.selectionScrollZone - rowHeaderCellWidth < 0) {\n                    self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n            }\n            if (y !== -1) {\n                if (y > self.height - self.attributes.selectionScrollZone && y < self.height) {\n                    self.scrollBox.scrollTop += self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n                if (y - self.attributes.selectionScrollZone - columnHeaderCellHeight < 0) {\n                    self.scrollBox.scrollTop -= self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n            }\n            if (setTimer && !ctrl && self.currentCell && self.currentCell.columnIndex !== -1) {\n                self.scrollTimer = setTimeout(self.mousemove, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.refreshFromOrigialData = function () {\n            self.data = self.originalData.filter(function (row) {\n                return true;\n            });\n        };\n        self.validateColumn = function (c, s) {\n            if (!c.name) {\n                throw new Error('A column must contain at least a name.');\n            }\n            if (s.filter(function (i) { return i.name === c.name; }).length > 0) {\n                throw new Error('A column with the name '\n                    + c.name + ' already exists and cannot be added again.');\n            }\n            return true;\n        };\n        self.setDefaults = function (obj1, obj2, key, def) {\n            obj1[key] = obj2[key] === undefined ? def : obj2[key];\n        };\n        self.setAttributes = function () {\n            self.defaults.attributes.forEach(function eachAttribute(i) {\n                self.setDefaults(self.attributes, self.args, i[0], i[1]);\n            });\n        };\n        self.setStyle = function () {\n            self.defaults.styles.forEach(function eachStyle(i) {\n                self.setDefaults(self.style, self.args.style || {}, i[0], i[1]);\n            });\n        };\n        self.autosize = function (colName) {\n            self.getVisibleSchema().forEach(function (col, colIndex) {\n                if (col.name === colName || colName === undefined) {\n                    self.sizes.columns[colIndex]\n                        = Math.max(self.findColumnMaxTextLength(col.name), self.style.minColumnWidth);\n                }\n            });\n            self.sizes.columns[-1] = self.findColumnMaxTextLength('cornerCell');\n        };\n        self.dispose = function () {\n            if (!self.isChildGrid && self.canvas && self.canvas.parentNode) {\n                self.canvas.parentNode.removeChild(self.canvas);\n            }\n            if(!self.isChildGrid) {\n                document.body.removeChild(self.controlInput)\n            }\n            self.eventParent.removeEventListener('mouseup', self.mouseup, false);\n            self.eventParent.removeEventListener('mousedown', self.mousedown, false);\n            self.eventParent.removeEventListener('dblclick', self.dblclick, false);\n            self.eventParent.removeEventListener('click', self.click, false);\n            self.eventParent.removeEventListener('mousemove', self.mousemove);\n            self.eventParent.removeEventListener('wheel', self.scrollWheel, false);\n            self.canvas.removeEventListener('contextmenu', self.contextmenu, false);\n            self.canvas.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('cut', self.cut);\n            self.controlInput.removeEventListener('paste', self.paste);\n            self.controlInput.removeEventListener('keypress', self.keypress, false);\n            self.controlInput.removeEventListener('keyup', self.keyup, false);\n            self.controlInput.removeEventListener('keydown', self.keydown, false);\n            window.removeEventListener('resize', self.resize);\n            if (self.observer && self.observer.disconnect) {\n                self.observer.disconnect();\n            }\n        };\n        self.tryLoadStoredSettings = function () {\n            var s;\n            self.reloadStoredValues();\n            if (self.storedSettings\n                    && typeof self.storedSettings.orders === 'object'\n                    && self.storedSettings.orders !== null) {\n                if (self.storedSettings.orders.rows.length >= (self.data || []).length) {\n                    self.orders.rows = self.storedSettings.orders.rows;\n                }\n                s = self.getSchema();\n                if (self.storedSettings.orders.columns.length === s.length) {\n                    self.orders.columns = self.storedSettings.orders.columns;\n                }\n                self.orderBy = self.storedSettings.orderBy === undefined\n                    ? s[0].name : self.storedSettings.orderBy;\n                self.orderDirection = self.storedSettings.orderDirection === undefined\n                    ? 'asc' : self.storedSettings.orderDirection;\n                if (self.storedSettings.orderBy !== undefined && self.getHeaderByName(self.orderBy) && self.orderDirection) {\n                    self.order(self.orderBy, self.orderDirection);\n                }\n            }\n        };\n        self.getDomRoot = function () {\n            return self.shadowRoot ? self.shadowRoot.host : self.parentNode;\n        };\n        self.getFontName = function (fontStyle) {\n            return fontStyle.replace(/\\d+\\.?\\d*px/, '');\n        };\n        self.getFontHeight = function (fontStyle) {\n            return parseFloat(fontStyle, 10);\n        };\n        self.parseStyleValue = function (key) {\n            if (/Font/.test(key)) {\n                self.style[key + 'Height'] = self.getFontHeight(self.style[key]);\n                self.style[key + 'Name'] = self.getFontName(self.style[key]);\n                return;\n            }\n            // when inheriting styles from already instantiated grids, don't parse already parsed values.\n            if (key === 'moveOverlayBorderSegments' && typeof self.style[key] === 'string') {\n                self.style[key] = self.style[key].split(',')\n                    .map(function (i) { return parseInt(i, 10); });\n            }\n        };\n        self.initProp = function (propName) {\n            if (!self.args[propName]) { return; }\n            Object.keys(self.args[propName]).forEach(function (key) {\n                self[propName][key] = self.args[propName][key];\n            });\n        };\n        self.getStyleProperty = function (key) {\n            if (self.styleKeys.indexOf(key) === -1) {\n                return self.parentNodeStyle[key];\n            }\n            return self.style[key];\n        };\n        self.setStyleProperty = function (key, value, supressDrawAndEvent) {\n            var isDim = ['height', 'width', 'minHeight', 'minWidth', 'maxHeight', 'maxWidth'].indexOf(key) !== -1;\n            if (self.styleKeys.indexOf(key) === -1) {\n                self.parentNodeStyle[key] = value;\n            } else {\n                if (/-/.test(key)) {\n                    key = self.dehyphenateProperty(key);\n                }\n                self.style[key] = value;\n                self.parseStyleValue(key);\n            }\n            if (isDim) {\n                self.resize();\n            }\n            if (!supressDrawAndEvent) {\n                self.draw(true);\n                self.dispatchEvent('stylechanged', {name: 'style', value: value});\n            }\n        };\n        self.reloadStoredValues = function () {\n            if (self.attributes.name && self.attributes.saveAppearance) {\n                try {\n                    self.storedSettings = localStorage.getItem(self.storageName + '-' + self.attributes.name);\n                } catch (e) {\n                    console.warn(\"Error loading stored values. \" + e.message);\n                    self.storedSettings = undefined;\n                }\n                if (self.storedSettings) {\n                    try {\n                        self.storedSettings = JSON.parse(self.storedSettings);\n                    } catch (e) {\n                        console.warn('could not read settings from localStore', e);\n                        self.storedSettings = undefined;\n                    }\n                }\n                if (self.storedSettings) {\n                    if (typeof self.storedSettings.sizes === 'object'\n                            && self.storedSettings.sizes !== null) {\n                        self.sizes.rows = self.storedSettings.sizes.rows;\n                        self.sizes.columns = self.storedSettings.sizes.columns;\n                        ['trees', 'columns', 'rows'].forEach(function (i) {\n                            if (!self.sizes[i]) {\n                                self.sizes[i] = {};\n                            }\n                        });\n                    }\n                    if (typeof self.storedSettings.visibility === 'object') {\n                        self.getSchema().forEach(function (column) {\n                            if (self.storedSettings.visibility && self.storedSettings.visibility[column.name] !== undefined) {\n                                column.hidden = !self.storedSettings.visibility[column.name];\n                            }\n                        });\n                    }\n                }\n            }\n        };\n        self.init = function () {\n            if (self.initialized) { return; }\n            function addStyleKeyIfNoneExists(key) {\n                if (self.styleKeys.indexOf(key) === -1) {\n                    self.styleKeys.push(key);\n                }\n            }\n            var publicStyleKeyIntf = {};\n            self.setAttributes();\n            self.setStyle();\n            self.initScrollBox();\n            self.setDom();\n            self.nodeType = 'canvas-datagrid';\n            self.ie = /Trident/.test(window.navigator.userAgent);\n            self.edge = /Edge/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.moz = /Gecko/.test(window.navigator.userAgent);\n            self.mobile = /Mobile/i.test(window.navigator.userAgent);\n            self.cursorGrab = 'grab';\n            self.cursorGrabing = 'grabbing';\n            self.cursorGrab = self.webKit ? '-webkit-grab' : self.cursorGrab;\n            self.cursorGrabing = self.moz ? '-webkit-grabbing' : self.cursorGrabbing;\n            self.pointerLockPosition = {x: 0, y: 0};\n            Object.keys(self.style).forEach(self.parseStyleValue);\n            self.intf.moveSelection = self.moveSelection;\n            self.intf.moveTo = self.moveTo;\n            self.intf.addEventListener = self.addEventListener;\n            self.intf.removeEventListener = self.removeEventListener;\n            self.intf.dispatchEvent = self.dispatchEvent;\n            /**\n             * Releases grid resources and removes grid elements.\n             * @memberof canvasDatagrid\n             * @name dispose\n             * @method\n             */\n            self.intf.dispose = self.dispose;\n            /**\n             * Appends the grid to another element later.  Not implemented.\n             * @memberof canvasDatagrid\n             * @name appendTo\n             * @method\n             * @param {number} el The element to append the grid to.\n             */\n            self.intf.appendTo = self.appendTo;\n            self.intf.getVisibleCellByIndex = self.getVisibleCellByIndex;\n            self.intf.filters = self.filters;\n            self.intf.sorters = self.sorters;\n            self.intf.autosize = self.autosize;\n            self.intf.beginEditAt = self.beginEditAt;\n            self.intf.endEdit = self.endEdit;\n            self.intf.setActiveCell = self.setActiveCell;\n            self.intf.forEachSelectedCell = self.forEachSelectedCell;\n            self.intf.scrollIntoView = self.scrollIntoView;\n            self.intf.clearChangeLog = self.clearChangeLog;\n            self.intf.gotoCell = self.gotoCell;\n            self.intf.gotoRow = self.gotoRow;\n            self.intf.getHeaderByName = self.getHeaderByName;\n            self.intf.findColumnScrollLeft = self.findColumnScrollLeft;\n            self.intf.findRowScrollTop = self.findRowScrollTop;\n            self.intf.fitColumnToValues = self.fitColumnToValues;\n            self.intf.findColumnMaxTextLength = self.findColumnMaxTextLength;\n            self.intf.disposeContextMenu = self.disposeContextMenu;\n            self.intf.getCellAt = self.getCellAt;\n            self.intf.isCellVisible = self.isCellVisible;\n            self.intf.isRowVisible = self.isRowVisible;\n            self.intf.isColumnVisible = self.isColumnVisible;\n            self.intf.order = self.order;\n            self.intf.draw = self.draw;\n            self.intf.isComponent = self.isComponent;\n            self.intf.selectArea = self.selectArea;\n            self.intf.clipElement = self.clipElement;\n            self.intf.getSchemaFromData = self.getSchemaFromData;\n            self.intf.setFilter = self.setFilter;\n            self.intf.selectRow = self.selectRow;\n            self.intf.parentGrid = self.parentGrid;\n            self.intf.toggleTree = self.toggleTree;\n            self.intf.expandTree = self.expandTree;\n            self.intf.collapseTree = self.collapseTree;\n            self.intf.canvas = self.canvas;\n            self.intf.context = self.ctx;\n            self.intf.insertRow = self.insertRow;\n            self.intf.deleteRow = self.deleteRow;\n            self.intf.addRow = self.addRow;\n            self.intf.insertColumn = self.insertColumn;\n            self.intf.deleteColumn = self.deleteColumn;\n            self.intf.addColumn = self.addColumn;\n            self.intf.getClippingRect = self.getClippingRect;\n            self.intf.setRowHeight = self.setRowHeight;\n            self.intf.setColumnWidth = self.setColumnWidth;\n            self.intf.resetColumnWidths = self.resetColumnWidths;\n            self.intf.resetRowHeights = self.resetRowHeights;\n            self.intf.resize = self.resize;\n            self.intf.selectColumn = self.selectColumn;\n            self.intf.selectRow = self.selectRow;\n            self.intf.selectAll = self.selectAll;\n            self.intf.selectNone = self.selectNone;\n            self.intf.drawChildGrids = self.drawChildGrids;\n            self.intf.assertPxColor = self.assertPxColor;\n            self.intf.clearPxColorAssertions = self.clearPxColorAssertions;\n            self.intf.integerToAlpha = self.integerToAlpha;\n            self.intf.copy = self.copy;\n            self.intf.setStyleProperty = self.setStyleProperty;\n            Object.defineProperty(self.intf, 'defaults', {\n                get: function () {\n                    return {\n                        styles: self.defaults.styles.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {}),\n                        attributes: self.defaults.attributes.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {})\n                    };\n                }\n            });\n            self.styleKeys = Object.keys(self.intf.defaults.styles);\n            self.styleKeys.map(function (i) { return self.hyphenateProperty(i, false); }).forEach(addStyleKeyIfNoneExists);\n            self.styleKeys.map(function (i) { return self.hyphenateProperty(i, true); }).forEach(addStyleKeyIfNoneExists);\n            self.DOMStyles = window.getComputedStyle(document.body, null);\n            self.styleKeys.concat(Object.keys(self.DOMStyles)).forEach(function (key) {\n                // unless this line is here, Object.keys() will not work on <instance>.style\n                publicStyleKeyIntf[key] = undefined;\n                Object.defineProperty(publicStyleKeyIntf, key, {\n                    get: function () {\n                        return self.getStyleProperty(key);\n                    },\n                    set: function (value) {\n                        if (self.initialized) {\n                            self.appliedInlineStyles[key] = value;\n                        }\n                        self.setStyleProperty(key, value);\n                    }\n                });\n            });\n            Object.defineProperty(self.intf, 'shadowRoot', {\n                get: function () {\n                    return self.shadowRoot;\n                }\n            });\n            Object.defineProperty(self.intf, 'activeCell', {\n                get: function () {\n                    return self.activeCell;\n                }\n            });\n            Object.defineProperty(self.intf, 'hasFocus', {\n                get: function () {\n                    return self.hasFocus;\n                }\n            });\n            Object.defineProperty(self.intf, 'style', {\n                get: function () {\n                    return publicStyleKeyIntf;\n                },\n                set: function (valueObject) {\n                    Object.keys(valueObject).forEach(function (key) {\n                        self.setStyleProperty(key, valueObject[key], true);\n                    });\n                    self.draw(true);\n                    self.dispatchEvent('stylechanged', {name: 'style', value: valueObject});\n                }\n            });\n            Object.defineProperty(self.intf, 'attributes', { value: {}});\n            Object.keys(self.attributes).forEach(function (key) {\n                Object.defineProperty(self.intf.attributes, key, {\n                    get: function () {\n                        return self.attributes[key];\n                    },\n                    set: function (value) {\n                        self.attributes[key] = value;\n                        if (key === 'name') {\n                            self.tryLoadStoredSettings();\n                        }\n                        self.draw(true);\n                        self.dispatchEvent('attributechanged', {name: key, value: value[key]});\n                    }\n                });\n            });\n            self.filters.string = function (value, filterFor) {\n                value = String(value);\n                var filterRegExp,\n                    regEnd = /\\/(i|g|m)*$/,\n                    pattern = regEnd.exec(filterFor),\n                    flags = pattern ? pattern[0].substring(1) : '',\n                    flagLength = flags.length;\n                self.invalidFilterRegEx = undefined;\n                if (filterFor.substring(0, 1) === '/' && pattern) {\n                    try {\n                        filterRegExp = new RegExp(filterFor.substring(1, filterFor.length - (flagLength + 1)), flags);\n                    } catch (e) {\n                        self.invalidFilterRegEx = e;\n                        return;\n                    }\n                    return filterRegExp.test(value);\n                }\n                return value.toString ? value.toString().toLocaleUpperCase()\n                    .indexOf(filterFor.toLocaleUpperCase()) !== -1 : false;\n            };\n            self.filters.number = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                return value === filterFor;\n            };\n            ['formatters', 'filters', 'sorters'].forEach(self.initProp);\n            self.applyComponentStyle(false, self.intf);\n            self.reloadStoredValues();\n            if (self.args.data) {\n                self.intf.data = self.args.data;\n            }\n            if (self.intf.innerText || self.intf.textContent) {\n                if (self.intf.dataType === 'application/x-canvas-datagrid') {\n                    self.intf.dataType = 'application/json+x-canvas-datagrid';\n                }\n                self.intf.data = self.intf.innerText || self.intf.textContent;\n            }\n            if (self.args.schema) {\n                self.intf.schema = self.args.schema;\n            }\n            if (self.isChildGrid || !self.isComponent) {\n                requestAnimationFrame(function () { self.resize(true); });\n            } else {\n                self.resize(true);\n            }\n            self.initialized = true;\n            return self;\n        };\n        /**\n         * Removes focus from the grid.\n         * @memberof canvasDatagrid\n         * @name blur\n         * @method\n         */\n        self.intf.blur = function (e) {\n            self.hasFocus = false;\n        };\n        /**\n         * Focuses on the grid.\n         * @memberof canvasDatagrid\n         * @name focus\n         * @method\n         */\n        self.intf.focus = function () {\n            self.hasFocus = true;\n            self.controlInput.focus();\n        };\n        if (self.shadowRoot || self.isChildGrid) {\n            Object.defineProperty(self.intf, 'height', {\n                get: function () {\n                    if (self.shadowRoot) {\n                        return self.shadowRoot.height;\n                    }\n                    return self.parentNode.height;\n                },\n                set: function (value) {\n                    if (self.shadowRoot) {\n                        self.shadowRoot.height = value;\n                    } else {\n                        self.parentNode.height = value;\n                    }\n                    self.resize(true);\n                }\n            });\n            Object.defineProperty(self.intf, 'width', {\n                get: function () {\n                    if (self.shadowRoot) {\n                        return self.shadowRoot.width;\n                    }\n                    return self.parentNode.width;\n                },\n                set: function (value) {\n                    if (self.shadowRoot) {\n                        self.shadowRoot.width = value;\n                    } else {\n                        self.parentNode.width = value;\n                    }\n                    self.resize(true);\n                }\n            });\n            Object.defineProperty(self.intf, 'parentNode', {\n                get: function () {\n                    return self.parentNode;\n                },\n                set: function (value) {\n                    if (!self.isChildGrid) {\n                        throw new TypeError('Cannot set property parentNode which has only a getter');\n                    }\n                    self.parentNode = value;\n                }\n            });\n        }\n        Object.defineProperty(self.intf, 'visibleRowHeights', {\n            get: function () {\n                return self.visibleRowHeights;\n            }\n        });\n        Object.defineProperty(self.intf, 'openChildren', {\n            get: function () {\n                return self.openChildren;\n            }\n        });\n        Object.defineProperty(self.intf, 'childGrids', {\n            get: function () {\n                return Object.keys(self.childGrids).map(function (gridId) {\n                    return self.childGrids[gridId];\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'isChildGrid', {\n            get: function () {\n                return self.isChildGrid;\n            }\n        });\n        Object.defineProperty(self, 'cursor', {\n            get: function () {\n                return self.parentNodeStyle.cursor;\n            },\n            set: function (value) {\n                if (value === 'cell') { value = 'default'; }\n                if (self.currentCursor !== value) {\n                    self.parentNodeStyle.cursor = value;\n                    self.currentCursor = value;\n                }\n            }\n        });\n        Object.defineProperty(self.intf, 'orderDirection', {\n            get: function () {\n                return self.orderDirection;\n            },\n            set: function (value) {\n                if (value !== 'desc') {\n                    value = 'asc';\n                }\n                self.orderDirection = value;\n                self.order(self.orderBy, self.orderDirection);\n            }\n        });\n        Object.defineProperty(self.intf, 'orderBy', {\n            get: function () {\n                return self.orderBy;\n            },\n            set: function (value) {\n                if (self.getSchema().find(function (col) {\n                        return col.name === value;\n                    }) === undefined) {\n                    throw new Error('Cannot sort by unknown column name.');\n                }\n                self.orderBy = value;\n                self.order(self.orderBy, self.orderDirection);\n            }\n        });\n        if (self.isComponent) {\n            Object.defineProperty(self.intf, 'offsetHeight', {\n                get: function () {\n                    return self.canvas.offsetHeight;\n                }\n            });\n            Object.defineProperty(self.intf, 'offsetWidth', {\n                get: function () {\n                    return self.canvas.offsetWidth;\n                }\n            });\n        }\n        Object.defineProperty(self.intf, 'scrollHeight', {\n            get: function () {\n                return self.scrollBox.scrollHeight;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollWidth', {\n            get: function () {\n                return self.scrollBox.scrollWidth;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollTop', {\n            get: function () {\n                return self.scrollBox.scrollTop;\n            },\n            set: function (value) {\n                self.scrollBox.scrollTop = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollLeft', {\n            get: function () {\n                return self.scrollBox.scrollLeft;\n            },\n            set: function (value) {\n                self.scrollBox.scrollLeft = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'sizes', {\n            get: function () {\n                return self.sizes;\n            }\n        });\n        Object.defineProperty(self.intf, 'input', {\n            get: function () {\n                return self.input;\n            }\n        });\n        Object.defineProperty(self.intf, 'controlInput', {\n            get: function () {\n                return self.controlInput;\n            }\n        });\n        Object.defineProperty(self.intf, 'currentCell', {\n            get: function () {\n                return self.currentCell;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleCells', {\n            get: function () {\n                return self.visibleCells;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRows', {\n            get: function () {\n                return self.visibleRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'selections', {\n            get: function () {\n                return self.selections;\n            }\n        });\n        Object.defineProperty(self.intf, 'dragMode', {\n            get: function () {\n                return self.dragMode;\n            }\n        });\n        Object.defineProperty(self.intf, 'changes', {\n            get: function () {\n                return self.changes;\n            }\n        });\n        self.intf.formatters = self.formatters;\n        Object.defineProperty(self.intf, 'dataType', {\n            get: function () {\n                return self.dataType;\n            },\n            set: function (value) {\n                if (!self.parsers[value]) {\n                    throw new Error('No parser for MIME type ' + value);\n                }\n                self.dataType = value;\n            }\n        });\n        self.eventNames.forEach(function (eventName) {\n            Object.defineProperty(self.intf, 'on' + eventName, {\n                get: function () {\n                    return self.componentL1Events[eventName];\n                },\n                set: function (value) {\n                    self.events[eventName] = [];\n                    self.componentL1Events[eventName] = value;\n                    if (!value) { return; }\n                    self.addEventListener(eventName, value);\n                }\n            });\n        });\n        Object.defineProperty(self.intf, 'frozenRow', {\n            get: function () {\n                return self.frozenRow;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.visibleRows.length < val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible rows.');\n                }\n                self.frozenRow = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'frozenColumn', {\n            get: function () {\n                return self.frozenColumn;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.getVisibleSchema().length < val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible columns.');\n                }\n                self.frozenColumn = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollIndexRect', {\n            get: function () {\n                return {\n                    top: self.scrollIndexTop,\n                    right: self.scrollIndexRight,\n                    bottom: self.scrollIndexBottom,\n                    left: self.scrollIndexLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollPixelRect', {\n            get: function () {\n                return {\n                    top: self.scrollPixelTop,\n                    right: self.scrollPixelRight,\n                    bottom: self.scrollPixelBottom,\n                    left: self.scrollPixelLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'rowOrder', {\n            get: function () {\n                return self.orders.rows;\n            },\n            set: function (val) {\n                if (!Array.isArray(val)) {\n                    throw new TypeError('Value must be an array.');\n                }\n                if (!self.data || val.length < self.data.length) {\n                    throw new RangeError('Array length must be equal to or greater than number of rows.');\n                }\n                self.orders.rows = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'columnOrder', {\n            get: function () {\n                return self.orders.columns;\n            },\n            set: function (val) {\n                if (!Array.isArray(val)) {\n                    throw new TypeError('Value must be an array.');\n                }\n                if (val.length < self.getSchema().length) {\n                    throw new RangeError('Array length must be equal to or greater than number of columns.');\n                }\n                self.orders.columns = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'selectionBounds', {\n            get: function () {\n                return self.getSelectionBounds();\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedRows', {\n            get: function () {\n                return self.getSelectedData(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedCells', {\n            get: function () {\n                return self.getSelectedData();\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleSchema', {\n            get: function () {\n                return self.getVisibleSchema().map(function eachDataRow(col) {\n                    return col;\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'treeGridAttributes', {\n            get: function () {\n                return self.treeGridAttributes;\n            },\n            set: function setTreeGridAttributes(value) {\n                self.treeGridAttributes = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'cellGridAttributes', {\n            get: function () {\n                return self.cellGridAttributes;\n            },\n            set: function setCellGridAttributes(value) {\n                self.cellGridAttributes = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'ctx', {\n            get: function () {\n                return self.ctx;\n            }\n        });\n        Object.defineProperty(self.intf, 'schema', {\n            get: function schemaGetter() {\n                return self.getSchema();\n            },\n            set: function schemaSetter(value) {\n                if (value === undefined) {\n                    // Issue #89 - allow schema to be set to initialized state\n                    self.schema = undefined;\n                    self.tempSchema = undefined;\n                    self.dispatchEvent('schemachanged', {schema: undefined});\n                    return;\n                }\n                if (!Array.isArray(value) || typeof value[0] !== 'object') {\n                    throw new Error('Schema must be an array of objects.');\n                }\n                if (value[0].name === undefined) {\n                    throw new Error('Expected schema to contain an object with at least a name property.');\n                }\n                self.schema = value.map(function eachSchemaColumn(column, index) {\n                    column.width = column.width || self.style.cellWidth;\n                    column.filter = column.filter || self.filter(column.type);\n                    column.type = column.type || 'string';\n                    column.index = index;\n                    column.columnIndex = index;\n                    column.rowIndex = -1;\n                    return column;\n                });\n                self.tempSchema = undefined;\n                self.createNewRowData();\n                self.createColumnOrders();\n                self.tryLoadStoredSettings();\n                if (self.storedSettings && typeof self.storedSettings.visibility === 'object') {\n                    self.schema.forEach(function hideEachSchemaColumn(column, index) {\n                        if (self.storedSettings && self.storedSettings.visibility[column.name] !== undefined) {\n                            column.hidden = !self.storedSettings.visibility[column.name];\n                        }\n                    });\n                }\n                self.resize(true);\n                self.dispatchEvent('schemachanged', {schema: self.schema});\n            }\n        });\n        /**\n         * Gets an array of currently registered MIME types.\n         * @memberof canvasDatagrid\n         * @name getDataTypes\n         * @method\n         */\n        self.intf.getTypes = function () {\n            return Object.keys(self.parsers);\n        };\n        self.parseInnerHtml = function (data) {\n            try {\n                data = JSON.parse(data);\n            } catch (e) {\n                throw new Error('Cannot parse application/json+x-canvas-datagrid formated data. '\n                    + e.message + '  \\nNote: canvas-datagrid.innerHTML is for string data only.  '\n                    + 'Use the canvas-datagrid.data property to set object data.');\n            }\n            return data;\n        };\n        self.parsers['application/json+x-canvas-datagrid'] = function (data, callback) {\n            self.parsers['application/x-canvas-datagrid'](self.parseInnerHtml(data), function (data, schema) {\n                return callback(data, schema);\n            });\n        };\n        self.parsers['application/x-canvas-datagrid'] = function (data, callback) {\n            return callback(data);\n        };\n        self.intf.parsers = self.parsers;\n        // send to dataType ETL function to extract from input data\n        // and transform into native [{}, {}] format\n        self.etl = function (data, callback) {\n            if (!self.intf.parsers[self.dataType]) {\n                throw new Error('Unsupported data type.');\n            }\n            self.intf.parsers[self.dataType](data, function (data, schema) {\n                if (Array.isArray(schema)) {\n                    self.schema = schema;\n                }\n                // Issue #89 - allow schema to be auto-created every time data is set\n                if (self.attributes.autoGenerateSchema) {\n                    self.schema = self.getSchemaFromData(data);\n                }\n                if (!self.schema) {\n                    self.tempSchema = self.getSchemaFromData(data);\n                }\n                if (self.getSchema()) {\n                    self.createColumnOrders();\n                }\n                // set the unfiltered/sorted data array\n                self.originalData = data;\n                //TODO apply filter to incoming dataset\n                self.data = self.originalData;\n                // empty data was set\n                if (!self.schema && (self.data || []).length === 0) {\n                    self.tempSchema = [{name: ''}];\n                }\n                self.fitColumnToValues('cornerCell', true);\n                if ((self.tempSchema && !self.schema) || self.attributes.autoGenerateSchema) {\n                    self.createColumnOrders();\n                    self.dispatchEvent('schemachanged', {schema: self.tempSchema});\n                }\n                callback();\n            });\n        };\n        Object.defineProperty(self.intf, 'data', {\n            get: function dataGetter() {\n                return self.data;\n            },\n            set: function dataSetter(value) {\n                self.etl(value, function () {\n                    self.changes = [];\n                    self.createNewRowData();\n                    if (self.attributes.autoResizeColumns && self.data.length > 0\n                            && self.storedSettings === undefined) {\n                        self.autosize();\n                    }\n                    // set the header column to fit the numbers in it\n                    self.fitColumnToValues('cornerCell', true);\n                    self.createRowOrders();\n                    self.tryLoadStoredSettings();\n                    self.dispatchEvent('datachanged', {data: self.data});\n                    self.resize(true);\n                });\n            }\n        });\n        self.initScrollBox = function () {\n            var sHeight = 0,\n                sWidth = 0,\n                scrollTop = 0,\n                scrollLeft = 0,\n                scrollHeight = 0,\n                scrollWidth = 0,\n                scrollBoxHeight = 20,\n                scrollBoxWidth = 20;\n            function setScrollTop(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollTop value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollHeight) {\n                    value = scrollHeight;\n                }\n                if (scrollHeight < 0) {\n                    value = 0;\n                }\n                scrollTop = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            function setScrollLeft(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollLeft value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollWidth) {\n                    value = scrollWidth;\n                }\n                if (scrollWidth < 0) {\n                    value = 0;\n                }\n                scrollLeft = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            self.scrollBox.toString = function () {\n                return '{\"width\": ' + scrollWidth.toFixed(2)\n                    + ', \"height\": ' + scrollHeight.toFixed(2)\n                    + ', \"left\": ' + scrollLeft.toFixed(2)\n                    + ', \"top\": ' + scrollTop.toFixed(2)\n                    + ', \"widthRatio\": ' + self.scrollBox.widthBoxRatio.toFixed(5)\n                    + ', \"heightRatio\": ' + self.scrollBox.heightBoxRatio.toFixed(5) + '}';\n            };\n            self.scrollBox.scrollTo = function (x, y, supressDrawEvent) {\n                setScrollLeft(x, true);\n                setScrollTop(y, supressDrawEvent);\n            };\n            Object.defineProperty(self.scrollBox, 'scrollBoxHeight', {\n                get: function () {\n                    return scrollBoxHeight;\n                },\n                set: function (value) {\n                    scrollBoxHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollBoxWidth', {\n                get: function () {\n                    return scrollBoxWidth;\n                },\n                set: function (value) {\n                    scrollBoxWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'height', {\n                get: function () {\n                    return sHeight;\n                },\n                set: function (value) {\n                    if (scrollHeight < value) {\n                        scrollTop = 0;\n                    }\n                    sHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'width', {\n                get: function () {\n                    return sWidth;\n                },\n                set: function (value) {\n                    sWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollTop', {\n                get: function () {\n                    return scrollTop;\n                },\n                set: setScrollTop\n            });\n            Object.defineProperty(self.scrollBox, 'scrollLeft', {\n                get: function () {\n                    return scrollLeft;\n                },\n                set: setScrollLeft\n            });\n            Object.defineProperty(self.scrollBox, 'scrollHeight', {\n                get: function () {\n                    return scrollHeight;\n                },\n                set: function (value) {\n                    if (scrollTop > value) {\n                        scrollTop = Math.max(value, 0);\n                    }\n                    if (scrollHeight < sHeight) {\n                        scrollTop = 0;\n                    }\n                    scrollHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollWidth', {\n                get: function () {\n                    return scrollWidth;\n                },\n                set: function (value) {\n                    if (scrollLeft > value) {\n                        scrollLeft = Math.max(value, 0);\n                    }\n                    scrollWidth = value;\n                }\n            });\n        };\n        return;\n    };\n});\n","/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var touchTimerMs = 50,\n            touchScrollTimeout;\n        self.scrollAnimation = {};\n        self.touchDelta = {};\n        self.touchAnimateTo = {};\n        self.animationFrames = 0;\n        self.getTouchPos = function (e, touchIndex) {\n            var t = touchIndex ? e.touches[touchIndex] : e.touches[0],\n                rect = self.canvas.getBoundingClientRect(),\n                pos;\n            if (!t) { return; }\n            pos = {\n                x: t.clientX - rect.left,\n                y: t.clientY - rect.top\n            };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        // shamelessly stolen from from https://gist.github.com/gre/1650294\n        self.easingFunctions = {\n            linear: function (t) { return t; },\n            easeInQuad: function (t) { return t * t; },\n            easeOutQuad: function (t) { return t * (2 - t); },\n            easeInOutQuad: function (t) { return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t; },\n            easeInCubic: function (t) { return t * t * t; },\n            easeOutCubic: function (t) { return (--t) * t * t + 1; },\n            easeInOutCubic: function (t) { return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1; },\n            easeInQuart: function (t) { return t * t * t * t; },\n            easeOutQuart: function (t) { return 1 - (--t) * t * t * t; },\n            easeInOutQuart: function (t) { return t < 0.5 ? 8 * t  * t  * t * t : 1 - 8 * (--t) * t * t * t; },\n            easeInQuint: function (t) { return t * t * t * t * t; },\n            easeOutQuint: function (t) { return 1 + (--t) * t *  t * t * t; },\n            easeInOutQuint: function (t) { return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t; }\n        };\n        self.easing = function (t, b, c, d) {\n            return c * self.easingFunctions[self.attributes.touchEasingMethod](t / d) + b;\n        };\n        self.calculatePPSTimed = function () {\n            self.xPPST = -((self.touchDelta.x - self.touchSigmaTimed.x) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.yPPST = -((self.touchDelta.y - self.touchSigmaTimed.y) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.touchSigmaTimed = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.calculatePPS = function () {\n            self.xPPS = -((self.touchDelta.x - self.touchSigma.x) / (self.touchDelta.t - self.touchSigma.t));\n            self.yPPS = -((self.touchDelta.y - self.touchSigma.y) / (self.touchDelta.t - self.touchSigma.t));\n            self.touchSigma = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.touchEndAnimation = function () {\n            if (!self.canvas || !self.scrollBox.scrollTo) { return requestAnimationFrame(self.touchEndAnimation); }\n            var n = performance.now(),\n                d = self.attributes.touchReleaseAnimationDurationMs,\n                t;\n            t = n - self.touchDelta.t;\n            self.animationFrames += 1;\n            self.scrollAnimation.x = self.easing(t, self.touchDelta.scrollLeft, self.touchAnimateTo.x, d);\n            self.scrollAnimation.y = self.easing(t, self.touchDelta.scrollTop, self.touchAnimateTo.y, d);\n            if (t > d || (self.scrollAnimation.y === self.scrollBox.scrollTop\n                    && self.scrollAnimation.x === self.scrollBox.scrollLeft) || self.stopAnimation) {\n                return;\n            }\n            self.scrollBox.scrollTo(self.scrollAnimation.x, self.scrollAnimation.y);\n            requestAnimationFrame(self.touchEndAnimation);\n        };\n        self.touchEditCell = function (cell) {\n            self.beginEditAt(cell.columnIndex, cell.rowIndex);\n        };\n        self.touchCell = function (e) {\n            return function () {\n                clearInterval(self.calculatePPSTimer);\n                var i, pos = self.getTouchPos(e);\n                if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone) {\n                    i = self.getCellAt(pos.x, pos.y);\n                    if (!i) { return; }\n                    if (self.touchingCell && self.touchingCell.rowIndex === i.rowIndex\n                            && self.touchingCell.columnIndex === i.columnIndex) {\n                        self.touchEditCell(i);\n                        return;\n                    }\n                    if (self.input && self.input.editCell) {\n                        self.endEdit();\n                    }\n                    self.touchingCell = i;\n                    self.selectArea({\n                        top: i.rowIndex,\n                        bottom: i.rowIndex,\n                        left: i.columnIndex,\n                        right: i.columnIndex\n                    });\n                    self.draw(true);\n                }\n            };\n        };\n        self.touchstart = function (e) {\n            if (e.changedTouches[0]) {\n                self.touchStart = self.getTouchPos(e);\n                self.startingCell = self.getCellAt(self.touchStart.x, self.touchStart.y, true);\n            }\n            if (self.dispatchEvent('touchstart', {NativeEvent: e, cell: self.startingCell})) { return; }\n            self.disposeContextMenu();\n            clearInterval(self.calculatePPSTimer);\n            clearTimeout(self.touchContextTimeout);\n            self.touchStartEvent = e;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (e.touches.length === 1 && e.changedTouches[0] && !self.zoomAltered) {\n                self.touchLength = 1;\n                self.touchStart = self.touchStart || self.touchStart1;\n                self.touchScrollStart = {\n                    x: self.scrollBox.scrollLeft,\n                    y: self.scrollBox.scrollTop,\n                    t: performance.now()\n                };\n                self.touchDelta = {\n                    x: 0,\n                    y: 0,\n                    scrollLeft: self.scrollBox.scrollLeft,\n                    scrollTop: self.scrollBox.scrollTop,\n                    t: self.touchScrollStart.t\n                };\n                self.touchSigma = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchSigmaTimed = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchContextTimeout = setTimeout(function () {\n                    self.contextmenuEvent(e, self.touchStart);\n                }, self.attributes.touchContextMenuTimeMs);\n                self.calculatePPSTimer = setInterval(self.calculatePPSTimed, touchTimerMs);\n                if (self.startingCell && (self.startingCell.isGrid || ['tree', 'inherit'].indexOf(self.startingCell.context) !== -1)) {\n                    self.hasFocus = false;\n                    return;\n                }\n                self.hasFocus = true;\n                if (self.startingCell.isHeader) {\n                    if (self.startingCell.isRowHeader) {\n                        self.selectArea({\n                            top: self.startingCell.rowIndex,\n                            bottom: self.startingCell.rowIndex,\n                            left: 0,\n                            right: self.getVisibleSchema().length - 1,\n                        });\n                        self.draw(true);\n                    } else if (self.startingCell.isColumnHeader) {\n                        if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                            if (self.orderBy === self.startingCell.header.name) {\n                                self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                            } else {\n                                self.orderDirection = 'asc';\n                            }\n                            self.order(self.startingCell.header.name, self.orderDirection);\n                        }\n                        if (self.attributes.columnHeaderClickBehavior === 'select') {\n                            self.selectArea({\n                                top: 0,\n                                bottom: self.data.length - 1,\n                                left: self.startingCell.columnIndex,\n                                right: self.startingCell.columnIndex,\n                            });\n                            self.draw(true);\n                        }\n                    }\n                    self.touchEndEvents(e);\n                    return;\n                }\n            }\n            if (self.zoomAltered) { return; }\n            document.body.addEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.addEventListener('touchend', self.touchend, false);\n            document.body.addEventListener('touchcancel', self.touchcancel, false);\n            self.draw(true);\n        };\n        self.touchSelect = function (cell, handleType) {\n            if (cell.rowIndex === undefined || cell.columnIndex === undefined) { return; }\n            self.touchSelecting = true;\n            var bounds = self.getSelectionBounds();\n            if (handleType === 'selection-handle-bl'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex <= bounds.right) {\n                bounds.bottom = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tl'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex <= bounds.right) {\n                bounds.top = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tr'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex >= bounds.left) {\n                bounds.top = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            } else if (handleType === 'selection-handle-br'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex >= bounds.left) {\n                bounds.bottom = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            }\n            if (self.attributes.selectionMode === 'row' || cell.rowIndex === -1) {\n                bounds.left = 0;\n                bounds.right = self.getSchema().length - 1;\n            } else {\n                bounds.left = Math.max(0, bounds.left);\n            }\n            self.selectArea(bounds);\n            self.draw(true);\n        };\n        self.touchmove = function (e) {\n            var ch, rw, rScrollZone, lScrollZone, bScrollZone, tScrollZone, sbw, t1, t2;\n            if (self.dispatchEvent('beforetouchmove', {NativeEvent: e})) { return; }\n            clearTimeout(touchScrollTimeout);\n            if (e.changedTouches[0]) {\n                self.touchPosition = self.getTouchPos(e);\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = self.getTouchPos(e, 1);\n            }\n            if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) > self.attributes.touchDeadZone) {\n                clearTimeout(self.touchContextTimeout);\n            }\n            if (e.touches.length === 2 && self.touchPosition && self.touchPosition1) {\n                t1 = self.touchPosition.y;\n                t2 = self.touchPosition1.y;\n                if (!self.zoomDeltaStart) {\n                    self.zoomDeltaStart = Math.abs(t1 - t2);\n                    self.startScale = self.scale;\n                }\n                self.touchLength = 2;\n                self.scaleDelta = self.zoomDeltaStart - Math.abs(t1 - t2);\n                self.scale = self.startScale - (self.scaleDelta * self.attributes.touchZoomSensitivity);\n                self.scale = Math.min(Math.max(self.scale, self.attributes.touchZoomMin), self.attributes.touchZoomMax);\n                self.zoomAltered = true;\n                self.resize(true);\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.zoomAltered) { return; }\n            self.touchLength = 1;\n            self.touchPosition = self.touchPosition || self.touchPosition1;\n            ch = self.getColumnHeaderCellHeight();\n            rw = self.getRowHeaderCellWidth();\n            rScrollZone = self.width - self.style.scrollBarWidth - self.touchPosition.x < self.attributes.selectionScrollZone;\n            lScrollZone = self.touchPosition.x - rw < self.attributes.selectionScrollZone;\n            bScrollZone = self.height - self.style.scrollBarWidth - self.touchPosition.y < self.attributes.selectionScrollZone;\n            tScrollZone = self.touchPosition.y - ch < self.attributes.selectionScrollZone;\n            sbw = self.style.scrollBarWidth;\n            function touchScroll() {\n                var x = self.scrollBox.scrollLeft,\n                    y = self.scrollBox.scrollTop;\n                x += (rScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y += (bScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y -= (tScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                x -= (lScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                self.scrollBox.scrollTo(x, y);\n                touchScrollTimeout = setTimeout(touchScroll, self.attributes.scrollRepeatRate);\n            }\n            e.stopPropagation();\n            self.touchDelta = {\n                x: self.touchPosition.x - self.touchStart.x,\n                y: self.touchPosition.y - self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: performance.now()\n            };\n            self.currentCell = self.getCellAt(self.touchPosition.x, self.touchPosition.y);\n            self.dispatchEvent('touchmove', {NativeEvent: e, cell: self.currentCell});\n            self.calculatePPS();\n            self.touchDuration = performance.now() - self.touchScrollStart.t;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            if (self.touchSelecting && (rScrollZone || lScrollZone || tScrollZone || bScrollZone)) {\n                touchScroll();\n            }\n            if (/vertical-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollTop = self.scrollBox.scrollHeight\n                    * ((self.touchPosition.y - ch - sbw) / (self.scrollBox.height - sbw - ch));\n                return;\n            }\n            if (/horizontal-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollLeft = self.scrollBox.scrollWidth\n                    * ((self.touchPosition.x - rw - sbw) / (self.scrollBox.width - sbw - rw));\n                return;\n            }\n            if (/selection-handle-/.test(self.startingCell.style)) {\n                self.touchSelect(self.currentCell, self.startingCell.style);\n                return;\n            }\n            self.scrollBox.scrollTo(self.touchScrollStart.x - self.touchDelta.x,\n                self.touchScrollStart.y - self.touchDelta.y);\n            self.draw(true);\n        };\n        self.touchEndEvents = function (e) {\n            self.zoomDeltaStart = undefined;\n            self.touchSelecting = false;\n            clearInterval(self.touchScrollTimeout);\n            clearInterval(self.touchContextTimeout);\n            clearInterval(self.calculatePPSTimer);\n            e.stopPropagation();\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n        };\n        self.touchend = function (e) {\n            if (self.dispatchEvent('touchend', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.zoomDeltaStart = undefined;\n            if (e.changedTouches[0]) {\n                self.touchPosition = undefined;\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = undefined;\n            }\n            if (self.zoomAltered) {\n                if (e.touches.length === 0) {\n                    self.zoomAltered = false;\n                }\n                return;\n            }\n            var dz = Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone;\n            if (isNaN(self.xPPS)) {\n                self.xPPS = 0;\n            }\n            if (isNaN(self.yPPS)) {\n                self.yPPS = 0;\n            }\n            if (isNaN(self.xPPST)) {\n                self.xPPST = 0;\n            }\n            if (isNaN(self.yPPST)) {\n                self.yPPST = 0;\n            }\n            self.touchAnimateTo.x = self.xPPS * self.attributes.touchReleaseAcceleration;\n            self.touchAnimateTo.y = self.yPPS * self.attributes.touchReleaseAcceleration;\n            self.calculatePPSTimed();\n            if (dz && !self.contextMenu) {\n                self.touchCell(self.touchStartEvent)();\n            } else if (self.animationFrames === 0\n                    && (Math.abs(self.xPPST) > self.attributes.scrollAnimationPPSThreshold\n                        || Math.abs(self.yPPST) > self.attributes.scrollAnimationPPSThreshold)\n                    && !/-scroll-/.test(self.startingCell.style)\n                    && !dz) {\n                self.stopAnimation = false;\n                self.touchEndAnimation();\n            }\n            self.touchEndEvents(e);\n        };\n        self.touchcancel = function (e) {\n            if (self.dispatchEvent('touchcancel', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.touchEndEvents(e);\n        };\n    };\n});\n","/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var wheeling;\n        self.stopPropagation = function (e) { e.stopPropagation(); };\n        /**\n         * Adds an event listener to the given event.\n         * @memberof canvasDatagrid\n         * @name addEventListener\n         * @method\n         * @param {string} ev The name of the event to subscribe to.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.addEventListener = function (ev, fn) {\n            self.events[ev] = self.events[ev] || [];\n            self.events[ev].unshift(fn);\n        };\n        /**\n         * Removes the given listener function from the given event.  Must be an actual reference to the function that was bound.\n         * @memberof canvasDatagrid\n         * @name removeEventListener\n         * @method\n         * @param {string} ev The name of the event to unsubscribe from.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.removeEventListener = function (ev, fn) {\n            (self.events[ev] || []).forEach(function removeEachListener(sfn, idx) {\n                if (fn === sfn) {\n                    self.events[ev].splice(idx, 1);\n                }\n            });\n        };\n        /**\n         * Fires the given event, padding an event object to the event subscribers.\n         * @memberof canvasDatagrid\n         * @name dispatchEvent\n         * @method\n         * @param {number} ev The name of the event to dispatch.\n         * @param {number} e The event object.\n         */\n        self.dispatchEvent = function (ev, e) {\n            e = ev.type ? ev : (e || {});\n            ev = ev.type || ev;\n            var defaultPrevented;\n            function preventDefault() {\n                defaultPrevented = true;\n            }\n            if (!self.events[ev]) { return; }\n            self.events[ev].forEach(function dispatchEachEvent(fn) {\n                e.ctx = self.ctx;\n                e.preventDefault = preventDefault;\n                fn.apply(self.intf, [e]);\n            });\n            return defaultPrevented;\n        };\n        self.getRatio = function () {\n            return Math.min(self.attributes.maxPixelRatio, (window.devicePixelRatio || 1) /\n                (self.ctx.webkitBackingStorePixelRatio ||\n                    self.ctx.mozBackingStorePixelRatio ||\n                    self.ctx.msBackingStorePixelRatio ||\n                    self.ctx.oBackingStorePixelRatio ||\n                    self.ctx.backingStorePixelRatio || 1));\n        };\n        self.resize = function (drawAfterResize) {\n            if (!self.canvas) { return; }\n            var x,\n                v = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'vertical-scroll-bar'\n                },\n                n = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'horizontal-scroll-bar'\n                },\n                vb = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'vertical-scroll-box'\n                },\n                nb = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'horizontal-scroll-box'\n                },\n                co = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    isCorner: true,\n                    isScrollBoxCorner: true,\n                    style: 'scroll-box-corner'\n                },\n                m = (self.style.scrollBarBoxMargin * 2),\n                b = (self.style.scrollBarBorderWidth * 2),\n                d = self.style.scrollBarBoxMargin * 0.5,\n                sbw = self.style.scrollBarWidth + (self.style.scrollBarBorderWidth * 2),\n                ratio = self.getRatio(),\n                bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                cellBorder = self.style.cellBorderWidth * bm,\n                columnHeaderCellBorder = self.style.columnHeaderCellBorderWidth * bm,\n                dataHeight = 0,\n                dataWidth = 0,\n                dims,\n                l = (self.data || []).length,\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                ch = self.style.cellHeight,\n                s = self.getSchema();\n            // sets actual DOM canvas element\n            function checkScrollBoxVisibility() {\n                self.scrollBox.horizontalBarVisible = (self.style.width !== 'auto' && dataWidth > self.scrollBox.width && self.style.overflowX !== 'hidden')\n                    || self.style.overflowX === 'scroll';\n                self.scrollBox.horizontalBoxVisible = dataWidth > self.scrollBox.width;\n                self.scrollBox.verticalBarVisible = (self.style.height !== 'auto' && dataHeight > self.scrollBox.height && self.style.overflowY !== 'hidden')\n                    || self.style.overflowY === 'scroll';\n                self.scrollBox.verticalBoxVisible = dataHeight > self.scrollBox.height;\n            }\n            function setScrollBoxSize() {\n                self.scrollBox.width = self.width - rowHeaderCellWidth;\n                self.scrollBox.height = self.height - columnHeaderCellHeight;\n            }\n            function setCanvasSize() {\n                if (self.isChildGrid) {\n                    return;\n                }\n                dims = {\n                    // HACK +1 ? maybe it's a magic cell border?  Required to line up properly in auto height mode.\n                    height: columnHeaderCellHeight + dataHeight + cellBorder + 1,\n                    width: dataWidth + rowHeaderCellWidth + cellBorder\n                };\n                ['width', 'height'].forEach(function (dim) {\n                    //TODO: support inherit\n                    if (['auto', undefined].indexOf(self.style[dim]) !== -1\n                            && ['auto', undefined].indexOf(self.appliedInlineStyles[dim]) !== -1) {\n                        self.parentNodeStyle[dim] = dims[dim] + 'px';\n                    } else {\n                        self.parentNodeStyle[dim] = self.style[dim];\n                        if (self.isComponet) {\n                            self.canvas.style[dim] = self.style[dim];\n                        }\n                    }\n                });\n            }\n            self.scrollCache.x = [];\n            self.scrollCache.y = [];\n            for (x = 0; x < l; x += 1) {\n                self.scrollCache.y[x] = dataHeight;\n                dataHeight += (((self.sizes.rows[x] || ch) + (self.sizes.trees[x] || 0)) * self.scale)\n                    // HACK? if an expanded tree row is frozen it is necessary to add the tree row's height a second time.\n                    + (self.frozenRow > x ? (self.sizes.trees[x] || 0) : 0);\n            }\n            if (l > 1) {\n                self.scrollCache.y[x] = dataHeight;\n            }\n            dataWidth = s.reduce(function reduceSchema(accumulator, column, columnIndex) {\n                // intentional redefintion of column.  This causes scrollCache to be in the correct order\n                column = s[self.orders.columns[columnIndex]];\n                if (column.hidden) {\n                    self.scrollCache.x[columnIndex] = accumulator;\n                    return accumulator;\n                }\n                var va = accumulator + self.getColummnWidth(self.orders.columns[columnIndex]);\n                self.scrollCache.x[columnIndex] = va;\n                return va;\n            }, 0) || 0;\n            if (self.attributes.showNewRow) {\n                dataHeight += ch;\n            }\n            setCanvasSize();\n            if (self.isChildGrid) {\n                self.width = self.parentNode.offsetWidth;\n                self.height = self.parentNode.offsetHeight;\n            } else if (self.height !== self.canvas.offsetHeight || self.width !== self.canvas.offsetWidth) {\n                self.height = self.canvas.offsetHeight;\n                self.width = self.canvas.offsetWidth;\n                self.canvasOffsetLeft = self.args.canvasOffsetLeft || 0;\n                self.canvasOffsetTop = self.args.canvasOffsetTop || 0;\n            }\n            /// calculate scroll bar dimensions\n            // non-controversial\n            self.scrollBox.top = columnHeaderCellHeight + columnHeaderCellBorder;\n            self.scrollBox.left = rowHeaderCellWidth;\n            // width and height of scroll box\n            setScrollBoxSize();\n            // is the data larger than the scroll box\n            checkScrollBoxVisibility();\n            // if the scroll box is visible, make room for it by expanding the size of the element\n            // if the other dimension is set to auto\n            if (self.scrollBox.horizontalBarVisible) {\n                if (self.style.height === 'auto' && !self.isChildGrid) {\n                    self.height += sbw;\n                }\n                dataHeight += sbw;\n                setCanvasSize();\n                setScrollBoxSize();\n                checkScrollBoxVisibility();\n            }\n            if (self.scrollBox.verticalBarVisible) {\n                if (self.style.width === 'auto' && !self.isChildGrid) {\n                    self.width += sbw;\n                }\n                dataWidth += sbw;\n                setCanvasSize();\n                setScrollBoxSize();\n                checkScrollBoxVisibility();\n            }\n            // set again after bar visibility checks\n            setScrollBoxSize();\n            self.scrollBox.scrollWidth = dataWidth - self.scrollBox.width;\n            self.scrollBox.scrollHeight = dataHeight - self.scrollBox.height;\n            self.scrollBox.widthBoxRatio = self.scrollBox.width / dataWidth;\n            self.scrollBox.scrollBoxWidth = self.scrollBox.width\n                * self.scrollBox.widthBoxRatio\n                - self.style.scrollBarWidth - b - d;\n            // TODO: This heightBoxRatio number is terribly wrong.\n            // They should be a result of the size of the grid/canvas?\n            // it being off causes the scroll bar to \"slide\" under\n            // the dragged mouse.\n            // https://github.com/TonyGermaneri/canvas-datagrid/issues/97\n            self.scrollBox.heightBoxRatio = (self.scrollBox.height - columnHeaderCellHeight) / dataHeight;\n            self.scrollBox.scrollBoxHeight = self.scrollBox.height\n                * self.scrollBox.heightBoxRatio\n                - self.style.scrollBarWidth - b - d;\n            self.scrollBox.scrollBoxWidth = Math.max(self.scrollBox.scrollBoxWidth, self.style.scrollBarBoxMinSize);\n            self.scrollBox.scrollBoxHeight = Math.max(self.scrollBox.scrollBoxHeight, self.style.scrollBarBoxMinSize);\n            // horizontal\n            n.x += rowHeaderCellWidth;\n            n.y += self.height - self.style.scrollBarWidth - d;\n            n.width = self.width - self.style.scrollBarWidth - rowHeaderCellWidth - d - m;\n            n.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n            // horizontal box\n            nb.y = n.y + self.style.scrollBarBoxMargin;\n            nb.width = self.scrollBox.scrollBoxWidth;\n            nb.height = self.style.scrollBarBoxWidth;\n            // vertical\n            v.x += self.width - self.style.scrollBarWidth - self.style.scrollBarBorderWidth - d;\n            v.y += columnHeaderCellHeight;\n            v.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n            v.height = self.height - columnHeaderCellHeight - self.style.scrollBarWidth - d - m;\n            // vertical box\n            vb.x = v.x + self.style.scrollBarBoxMargin;\n            vb.width = self.style.scrollBarBoxWidth;\n            vb.height = self.scrollBox.scrollBoxHeight;\n            // corner\n            co.x = n.x + n.width + m;\n            co.y = v.y + v.height + m;\n            co.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n            co.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n            self.scrollBox.entities = {\n                horizontalBar: n,\n                horizontalBox: nb,\n                verticalBar: v,\n                verticalBox: vb,\n                corner: co\n            };\n            self.scrollBox.bar = {\n                v: v,\n                h: n\n            };\n            self.scrollBox.box = {\n                v: vb,\n                h: nb\n            };\n            /// calculate page and dom elements\n            self.page = Math.max(1, self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap);\n            // set canvas drawing related items\n            if (!self.isChildGrid) {\n                self.canvas.width = self.width * ratio;\n                self.canvas.height = self.height * ratio;\n                self.ctx.scale(ratio, ratio);\n            }\n            // resize any open dom elements (input/textarea)\n            self.resizeEditInput();\n            self.scroll(true);\n            if (drawAfterResize) {\n                self.draw(true);\n            }\n            self.dispatchEvent('resize', {});\n            return true;\n        };\n        self.scroll = function (dontDraw) {\n            var s = self.getSchema(),\n                l = (self.data || []).length,\n                ch = self.style.cellHeight;\n            // go too far in leaps, then get focused\n            self.scrollIndexTop = Math.floor((l * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight)) - 100);\n            self.scrollIndexTop = Math.max(self.scrollIndexTop, 0);\n            self.scrollPixelTop = self.scrollCache.y[self.scrollIndexTop];\n            // sometimes the grid is rendered but the height is zero\n            if (self.scrollBox.scrollHeight === 0) {\n                self.scrollIndexTop = 0;\n            }\n            self.scrollPixelTop = 0;\n            self.scrollIndexLeft = self.frozenColumn;\n            self.scrollPixelLeft = 0;\n            while (self.scrollPixelTop < self.scrollBox.scrollTop && self.scrollIndexTop < self.data.length) {\n                // start on index +1 since index 0 was used in \"go too far\" section above\n                self.scrollIndexTop += 1;\n                self.scrollPixelTop = self.scrollCache.y[self.scrollIndexTop];\n            }\n            while (self.scrollPixelLeft < (self.scrollBox.scrollLeft + 1) && self.scrollIndexLeft < s.length) {\n                self.scrollPixelLeft = self.scrollCache.x[self.scrollIndexLeft];\n                self.scrollIndexLeft += 1;\n            }\n            if (s.length > 0) {\n                self.scrollIndexLeft = Math.max(self.scrollIndexLeft - 1, 0);\n                self.scrollPixelLeft -= self.getColummnWidth(self.orders.columns[self.scrollIndexLeft]);\n            }\n            if ((self.data || []).length > 0) {\n                self.scrollIndexTop = Math.max(self.scrollIndexTop - 1, 0);\n                self.scrollPixelTop = Math.max((self.scrollPixelTop\n                    - (\n                        self.data[self.scrollIndexTop] ? (self.sizes.rows[self.scrollIndexTop] || ch)\n                                + (self.sizes.trees[self.scrollIndexTop] || 0)\n                        : ch\n                    ) * self.scale), 0);\n            }\n            self.ellipsisCache = {};\n            if (!dontDraw) {\n                self.draw(true);\n            }\n            //TODO: figure out why this has to be delayed for child grids\n            //BUG: wheeling event on 3rd level hierarchy fails to move input box\n            requestAnimationFrame(self.resizeEditInput);\n            self.dispatchEvent('scroll', {top: self.scrollBox.scrollTop, left: self.scrollBox.scrollLeft});\n        };\n        self.mousemove = function (e, overridePos) {\n            if (self.contextMenu || self.input) {\n                return;\n            }\n            self.mouse = overridePos || self.getLayerPos(e);\n            var ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                i,\n                s = self.getSchema(),\n                dragBounds,\n                sBounds,\n                x = self.mouse.x,\n                y = self.mouse.y,\n                o = self.getCellAt(x, y),\n                delta,\n                ev = {NativeEvent: e, cell: o, x: x, y: y},\n                previousCell = self.currentCell;\n            clearTimeout(self.scrollTimer);\n            if (!self.isInGrid({x: x, y: y})) {\n                self.hasFocus = false;\n            }\n            if (self.dispatchEvent('mousemove', ev)) {\n                return;\n            }\n            if (o && self.currentCell) {\n                self.rowBoundaryCrossed = self.currentCell.rowIndex !== o.rowIndex;\n                self.columnBoundaryCrossed = self.currentCell.columnIndex !== o.columnIndex;\n                self.cellBoundaryCrossed = self.rowBoundaryCrossed || self.columnBoundaryCrossed;\n                ['row', 'column', 'cell'].forEach(function (prefix) {\n                    if (self[prefix + 'BoundaryCrossed']) {\n                        ev.cell = previousCell;\n                        self.dispatchEvent(prefix + 'mouseout', ev);\n                        ev.cell = o;\n                        self.dispatchEvent(prefix + 'mouseover', ev);\n                    }\n                });\n            }\n            self.currentCell = o;\n            if (!self.hasFocus) {\n                return;\n            }\n            self.hovers = {};\n            if (!self.draggingItem\n                    && o\n                    && self.scrollModes.indexOf(o.context) === -1) {\n                self.dragItem = o;\n                self.dragMode = o.dragContext;\n                self.cursor = o.context;\n                if (o.context === 'cell') {\n                    self.cursor = 'default';\n                    self.hovers = { rowIndex: o.rowIndex, columnIndex: o.columnIndex };\n                }\n                if ((self.selecting || self.reorderObject)\n                        && o.context === 'cell') {\n                    delta = {\n                        x: Math.abs(self.dragStart.x - x),\n                        y: Math.abs(self.dragStart.y - y)\n                    };\n                    if (self.dragStartObject.columnIndex !== -1 && e.shiftKey) {\n                        self.dragStartObject = {\n                            rowIndex: self.activeCell.rowIndex,\n                            columnIndex: self.activeCell.columnIndex\n                        };\n                    }\n                    dragBounds = {\n                        top: Math.min(self.dragStartObject.rowIndex, o.rowIndex),\n                        left: Math.min(self.dragStartObject.columnIndex, o.columnIndex),\n                        bottom: Math.max(self.dragStartObject.rowIndex, o.rowIndex),\n                        right: Math.max(self.dragStartObject.columnIndex, o.columnIndex)\n                    };\n                    if (self.dragStartObject.columnIndex === -1) {\n                        sBounds = self.getSelectionBounds();\n                        dragBounds.left = -1;\n                        dragBounds.right = s.length - 1;\n                        dragBounds.top = Math.min(sBounds.top, o.rowIndex);\n                        dragBounds.bottom = Math.max(sBounds.bottom, o.rowIndex);\n                    }\n                    if (self.dragStartObject.rowIndex !== o.rowIndex\n                                || self.dragStartObject.columnIndex !== o.columnIndex) {\n                        self.ignoreNextClick = true;\n                    }\n                    if (self.cellBoundaryCrossed || (delta.x === 0 && delta.y === 0) || (self.attributes.selectionMode === 'row')) {\n                        if (((self.attributes.selectionMode === 'row') || self.dragStartObject.columnIndex === -1)\n                                && self.rowBoundaryCrossed) {\n                            self.selectRow(o.rowIndex, ctrl, null, true);\n                        } else if (self.attributes.selectionMode !== 'row') {\n                            if (!self.dragAddToSelection && o.rowIndex !== undefined) {\n                                if (self.selections[o.rowIndex] && self.selections[o.rowIndex].indexOf(o.columnIndex) !== -1) {\n                                    self.selections[o.rowIndex].splice(self.selections[o.rowIndex].indexOf(o.columnIndex), 1);\n                                }\n                            } else {\n                                self.selections[o.rowIndex] = self.selections[o.rowIndex] || [];\n                                if (self.selections[o.rowIndex].indexOf(o.columnIndex) === -1) {\n                                    self.selections[o.rowIndex].push(o.columnIndex);\n                                }\n                            }\n                        }\n                    }\n                    if ((!self.selectionBounds || (dragBounds.top !== self.selectionBounds.top\n                            || dragBounds.left !== self.selectionBounds.left\n                            || dragBounds.bottom !== self.selectionBounds.bottom\n                            || dragBounds.right !== self.selectionBounds.right)) && !ctrl) {\n                        self.selections = [];\n                        sBounds = dragBounds;\n                        if (self.attributes.selectionMode === 'row') {\n                            for (i = sBounds.top; i <= sBounds.bottom; i += 1) {\n                                self.selectRow(i, true, null, true);\n                            }\n                        } else if (dragBounds.top !== -1) {\n                            self.selectArea(sBounds, true);\n                        }\n                    }\n                    self.autoScrollZone(e, x, y, ctrl);\n                }\n            }\n            self.cellBoundaryCrossed = false;\n            self.rowBoundaryCrossed = false;\n            self.columnBoundaryCrossed = false;\n            self.draw(true);\n        };\n        self.click = function (e, overridePos) {\n            var i,\n                startingBounds = JSON.stringify(self.getSelectionBounds()),\n                ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                pos = overridePos || self.getLayerPos(e);\n            self.currentCell = self.getCellAt(pos.x, pos.y);\n            if (self.currentCell.grid !== undefined) {\n                return;\n            }\n            function checkSelectionChange() {\n                var ev, sb = self.getSelectionBounds();\n                if (startingBounds === JSON.stringify(sb)) {\n                    return;\n                }\n                ev = {\n                    selections: self.selections,\n                    selectionBounds: self.getSelectionBounds()\n                };\n                Object.defineProperty(ev, 'selectedData', {\n                    get: function () {\n                        return self.getSelectedData();\n                    }\n                });\n                self.dispatchEvent('selectionchanged', ev);\n            }\n            if (self.input) {\n                self.endEdit();\n            }\n            if (self.ignoreNextClick) {\n                self.ignoreNextClick = false;\n                return;\n            }\n            i = self.currentCell;\n            if (self.dispatchEvent('click', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (['rowHeaderCell', 'columnHeaderCell'].indexOf(self.currentCell.style) === -1 && !ctrl) {\n                self.setActiveCell(i.columnIndex, i.rowIndex);\n            }\n            if (self.currentCell.context === 'cell') {\n                if (self.currentCell.style === 'cornerCell') {\n                    self.selectAll();\n                    self.draw();\n                    checkSelectionChange();\n                    return;\n                }\n                if (self.currentCell.style === 'columnHeaderCell') {\n                    if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                        if (self.orderBy === i.header.name) {\n                            self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                        } else {\n                            self.orderDirection = 'asc';\n                        }\n                        self.order(i.header.name, self.orderDirection);\n                        checkSelectionChange();\n                        return;\n                    }\n                    if (self.attributes.columnHeaderClickBehavior === 'select') {\n                        self.selectColumn(i.header.index, ctrl, e.shiftKey);\n                        self.draw();\n                        return;\n                    }\n                }\n                self.selections[i.rowIndex] = self.selections[i.rowIndex] || [];\n                if (((self.attributes.selectionMode === 'row') || self.currentCell.style === 'rowHeaderCell')) {\n                    if (self.currentCell.style === 'rowHeaderCell'\n                            && self.attributes.tree && pos.x > 0\n                            && pos.x - self.currentCell.x < self.style.treeArrowWidth\n                            + self.style.treeArrowMarginLeft\n                            + self.style.treeArrowMarginRight + self.style.treeArrowClickRadius\n                            && pos.y - self.currentCell.y < self.style.treeArrowHeight\n                            + self.style.treeArrowMarginTop + self.style.treeArrowClickRadius\n                            && pos.y > 0) {\n                        self.toggleTree(i.rowIndex);\n                        return;\n                    }\n                }\n                if (e.shiftKey && !ctrl) {\n                    self.selectionBounds = self.getSelectionBounds();\n                    self.selectArea(undefined, false);\n                }\n            }\n            checkSelectionChange();\n            self.draw(true);\n        };\n        self.dragResizeColumn = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = self.resizingStartingWidth + pos.x - self.dragStart.x;\n            y = self.resizingStartingHeight + pos.y - self.dragStart.y;\n            if (x < self.style.minColumnWidth) {\n                x = self.style.minColumnWidth;\n            }\n            if (y < self.style.minRowHeight) {\n                y = self.style.minRowHeight;\n            }\n            if (self.dispatchEvent('resizecolumn', {x: x, y: y, draggingItem: self.draggingItem})) { return false; }\n            if (self.scrollBox.scrollLeft > self.scrollBox.scrollWidth - self.attributes.resizeScrollZone\n                    && self.dragMode === 'ew-resize') {\n                self.resize(true);\n                self.scrollBox.scrollLeft += x;\n            }\n            if (self.dragMode === 'ew-resize') {\n                self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.sortColumnIndex] = x;\n                if (['rowHeaderCell', 'cornerCell'].indexOf(self.draggingItem.header.style) !== -1) {\n                    self.resize(true);\n                }\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.dragMode === 'ns-resize') {\n                if (self.draggingItem.rowOpen) {\n                    self.sizes.trees[self.draggingItem.rowIndex] = y;\n                } else if (self.attributes.globalRowResize) {\n                    self.style.cellHeight = y;\n                } else {\n                    self.sizes.rows[self.draggingItem.rowIndex] = y;\n                }\n                self.dispatchEvent('resizerow', {row: y});\n                self.resizeChildGrids();\n                return;\n            }\n            self.ellipsisCache = {};\n        };\n        self.stopDragResize = function () {\n            self.resize();\n            document.body.removeEventListener('mousemove', self.dragResizeColumn, false);\n            document.body.removeEventListener('mouseup', self.stopDragResize, false);\n            self.setStorageData();\n            self.draw(true);\n            self.ignoreNextClick = true;\n        };\n        self.scrollGrid = function (e) {\n            var pos = self.getLayerPos(e);\n            if (self.attributes.scrollPointerLock && self.pointerLockPosition\n                    && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                self.pointerLockPosition.x += e.movementX;\n                self.pointerLockPosition.y += e.movementY;\n                self.pointerLockPosition.x = Math.min(self.width - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.x));\n                self.pointerLockPosition.y = Math.min(self.height - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.y));\n                pos = self.pointerLockPosition;\n            }\n            self.scrollMode = self.getCellAt(pos.x, pos.y).context;\n            if (self.scrollMode === 'horizontal-scroll-box' && self.scrollStartMode !== 'horizontal-scroll-box') {\n                self.scrollStartMode = 'horizontal-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.left = self.scrollBox.scrollLeft;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box' && self.scrollStartMode !== 'vertical-scroll-box') {\n                self.scrollStartMode = 'vertical-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.top = self.scrollBox.scrollTop;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollStartMode === 'vertical-scroll-box'\n                    && self.scrollMode !== 'vertical-scroll-box') {\n                self.scrollMode = 'vertical-scroll-box';\n            }\n            if (self.scrollStartMode === 'horizontal-scroll-box'\n                    && self.scrollMode !== 'horizontal-scroll-box') {\n                self.scrollMode = 'horizontal-scroll-box';\n            }\n            clearTimeout(self.scrollTimer);\n            if (self.scrollModes.indexOf(self.scrollMode) === -1) {\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box') {\n                self.scrollBox.scrollTop = self.scrollStart.top + ((pos.y - self.dragStart.y)\n                    / self.scrollBox.heightBoxRatio);\n            } else if (self.scrollMode === 'vertical-scroll-top') {\n                self.scrollBox.scrollTop -= (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'vertical-scroll-bottom') {\n                self.scrollBox.scrollTop += (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n            if (self.scrollMode === 'horizontal-scroll-box') {\n                self.scrollBox.scrollLeft = self.scrollStart.left + ((pos.x - self.dragStart.x)\n                    / self.scrollBox.widthBoxRatio);\n            } else if (self.scrollMode === 'horizontal-scroll-right') {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'horizontal-scroll-left') {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.stopScrollGrid = function () {\n            clearTimeout(self.scrollTimer);\n            if (document.exitPointerLock) {\n                document.exitPointerLock();\n            }\n            document.removeEventListener('mousemove', self.scrollGrid, false);\n        };\n        self.dragReorder = function (e) {\n            var pos, x, y,\n                columReorder = self.dragMode === 'column-reorder',\n                rowReorder = self.dragMode === 'row-reorder';\n            pos = self.getLayerPos(e);\n            x = pos.x - self.dragStart.x;\n            y = pos.y - self.dragStart.y;\n            if (!self.attributes.allowColumnReordering && columReorder) {\n                return;\n            }\n            if (!self.attributes.allowRowReordering && rowReorder) {\n                return;\n            }\n            if (self.dispatchEvent('reordering', {\n                    NativeEvent: e,\n                    source: self.dragStartObject,\n                    target: self.currentCell,\n                    dragMode: self.dragMode\n                })) {\n                return;\n            }\n            if (Math.abs(x) > self.attributes.reorderDeadZone || Math.abs(y) > self.attributes.reorderDeadZone) {\n                self.reorderObject = self.draggingItem;\n                self.reorderTarget = self.currentCell;\n                self.reorderObject.dragOffset = {\n                    x: x,\n                    y: y\n                };\n                self.autoScrollZone(e, columReorder ? pos.x : -1, rowReorder ? pos.y : -1, false);\n            }\n        };\n        self.stopDragReorder = function (e) {\n            var oIndex,\n                tIndex,\n                cr = {\n                    'row-reorder': self.orders.rows,\n                    'column-reorder': self.orders.columns\n                },\n                i = {\n                    'row-reorder': 'rowIndex',\n                    'column-reorder': 'sortColumnIndex'\n                }[self.dragMode];\n            document.body.removeEventListener('mousemove', self.dragReorder, false);\n            document.body.removeEventListener('mouseup', self.stopDragReorder, false);\n            if (self.reorderObject\n                    && self.reorderTarget\n                    && ((self.dragMode === 'column-reorder' && self.reorderTarget.sortColumnIndex > -1\n                        && self.reorderTarget.sortColumnIndex < self.getSchema().length)\n                    || (self.dragMode === 'row-reorder' && self.reorderTarget.rowIndex > -1\n                        && self.reorderTarget.rowIndex < self.data.length))\n                    && self.reorderObject[i] !== self.reorderTarget[i]\n                    && !self.dispatchEvent('reorder', {\n                        NativeEvent: e,\n                        source: self.reorderObject,\n                        target: self.reorderTarget,\n                        dragMode: self.dragMode\n                    })) {\n                self.ignoreNextClick = true;\n                oIndex = cr[self.dragMode].indexOf(self.reorderObject[i]);\n                tIndex = cr[self.dragMode].indexOf(self.reorderTarget[i]);\n                cr[self.dragMode].splice(oIndex, 1);\n                cr[self.dragMode].splice(tIndex, 0, self.reorderObject[i]);\n                self.resize();\n                self.setStorageData();\n            }\n            self.reorderObject = undefined;\n            self.reorderTarget = undefined;\n            self.draw(true);\n        };\n        self.dragMove = function (e) {\n            if (self.dispatchEvent('moving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.moveOffset = {\n                x: self.currentCell.columnIndex - self.dragStartObject.columnIndex,\n                y: self.currentCell.rowIndex - self.dragStartObject.rowIndex\n            };\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopDragMove = function (e) {\n            document.body.removeEventListener('mousemove', self.dragMove, false);\n            document.body.removeEventListener('mouseup', self.stopDragMove, false);\n            var b = self.getSelectionBounds();\n            if (self.dispatchEvent('endmove', {NativeEvent: e, cell: self.currentCell})) {\n                self.movingSelection = undefined;\n                self.moveOffset = undefined;\n                self.draw(true);\n                return;\n            }\n            if (self.moveOffset) {\n                self.moveTo(self.movingSelection, b.left + self.moveOffset.x, b.top + self.moveOffset.y);\n                self.moveSelection(self.moveOffset.x, self.moveOffset.y);\n            }\n            self.movingSelection = undefined;\n            self.moveOffset = undefined;\n            self.draw(true);\n        };\n        self.freezeMove = function (e) {\n            if (self.dispatchEvent('freezemoving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.ignoreNextClick = true;\n            self.freezeMarkerPosition = pos;\n            if (self.currentCell && self.currentCell.rowIndex !== undefined && self.dragMode === 'frozen-row-marker') {\n                self.scrollBox.scrollTop = 0;\n                self.frozenRow = self.currentCell.rowIndex + 1;\n            }\n            if (self.currentCell && self.currentCell.columnIndex !== undefined && self.dragMode === 'frozen-column-marker') {\n                self.scrollBox.scrollLeft = 0;\n                self.frozenColumn = self.currentCell.columnIndex + 1;\n            }\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopFreezeMove = function (e) {\n            document.body.removeEventListener('mousemove', self.freezeMove, false);\n            document.body.removeEventListener('mouseup', self.stopFreezeMove, false);\n            self.freezeMarkerPosition = undefined;\n            if (self.dispatchEvent('endfreezemove', {NativeEvent: e})) {\n                self.frozenRow = self.startFreezeMove.x;\n                self.frozenColumn = self.startFreezeMove.y;\n                self.draw(true);\n                return;\n            }\n            self.draw(true);\n        };\n        self.mousedown = function (e, overridePos) {\n            self.lastMouseDownTarget = e.target;\n            if (self.dispatchEvent('mousedown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (e.button === 2 || self.input) { return; }\n            var ctrl = (e.ctrlKey || e.metaKey),\n                move = /-move/.test(self.dragMode),\n                freeze = /frozen-row-marker|frozen-column-marker/.test(self.dragMode),\n                resize = /-resize/.test(self.dragMode);\n            self.dragStart = overridePos || self.getLayerPos(e);\n            self.scrollStart = {\n                left: self.scrollBox.scrollLeft,\n                top: self.scrollBox.scrollTop\n            };\n            self.dragStartObject = self.getCellAt(self.dragStart.x, self.dragStart.y);\n            self.dragAddToSelection = !self.dragStartObject.selected;\n            if (!ctrl && !e.shiftKey && !/(vertical|horizontal)-scroll-(bar|box)/\n                    .test(self.dragStartObject.context)\n                    && self.currentCell\n                    && !self.currentCell.isColumnHeader\n                    && !move\n                    && !freeze\n                    && !resize) {\n                self.selections = [];\n            }\n            if (self.dragStartObject.isGrid) {\n                return;\n            }\n            if (self.scrollModes.indexOf(self.dragStartObject.context) !== -1) {\n                self.scrollMode = self.dragStartObject.context;\n                self.scrollStartMode = self.dragStartObject.context;\n                self.scrollGrid(e);\n                if (self.attributes.scrollPointerLock\n                        && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                    self.pointerLockPosition = {\n                        x: self.dragStart.x,\n                        y: self.dragStart.y\n                    };\n                    self.canvas.requestPointerLock();\n                }\n                document.addEventListener('mousemove', self.scrollGrid, false);\n                document.addEventListener('mouseup', self.stopScrollGrid, false);\n                self.ignoreNextClick = true;\n                return;\n            }\n            if (self.dragMode === 'cell') {\n                self.selecting = true;\n                if ((self.attributes.selectionMode === 'row' || self.dragStartObject.columnIndex === -1)\n                        && self.dragStartObject.rowIndex > -1) {\n                    self.selectRow(self.dragStartObject.rowIndex, ctrl, null);\n                } else if (self.attributes.selectionMode !== 'row') {\n                    self.mousemove(e);\n                }\n                return;\n            }\n            if (move) {\n                self.draggingItem = self.dragItem;\n                self.movingSelection = self.selections.concat([]);\n                self.dragging = self.dragStartObject;\n                if (self.dispatchEvent('beginmove', {NativeEvent: e, cell: self.currentCell})) { return; }\n                document.body.addEventListener('mousemove', self.dragMove, false);\n                document.body.addEventListener('mouseup', self.stopDragMove, false);\n                return self.mousemove(e);\n            }\n            if (freeze) {\n                self.draggingItem = self.dragItem;\n                self.startFreezeMove = {\n                    x: self.frozenRow,\n                    y: self.frozenColumn\n                };\n                if (self.dispatchEvent('beginfreezemove', {NativeEvent: e})) { return; }\n                document.body.addEventListener('mousemove', self.freezeMove, false);\n                document.body.addEventListener('mouseup', self.stopFreezeMove, false);\n                return self.mousemove(e);\n            }\n            if (resize) {\n                self.draggingItem = self.dragItem;\n                if (self.draggingItem.rowOpen) {\n                    self.resizingStartingHeight = self.sizes.trees[self.draggingItem.rowIndex];\n                } else {\n                    self.resizingStartingHeight = self.sizes.rows[self.draggingItem.rowIndex] || self.style.cellHeight;\n                }\n                self.resizingStartingWidth = self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.sortColumnIndex] || self.draggingItem.width;\n                document.body.addEventListener('mousemove', self.dragResizeColumn, false);\n                document.body.addEventListener('mouseup', self.stopDragResize, false);\n                return;\n            }\n            if (['row-reorder', 'column-reorder'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragStartObject;\n                document.body.addEventListener('mousemove', self.dragReorder, false);\n                document.body.addEventListener('mouseup', self.stopDragReorder, false);\n                return;\n            }\n        };\n        self.mouseup = function (e) {\n            clearTimeout(self.scrollTimer);\n            self.cellBoundaryCrossed = true;\n            self.rowBoundaryCrossed = true;\n            self.columnBoundaryCrossed = true;\n            self.selecting = undefined;\n            self.draggingItem = undefined;\n            self.dragStartObject = undefined;\n            if (self.dispatchEvent('mouseup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            if (self.currentCell && self.currentCell.grid !== undefined) {\n                return;\n            }\n            if (self.contextMenu || self.input) { return; }\n            if (self.dragStart && self.isInGrid(self.dragStart)) {\n                self.controlInput.focus();\n            }\n            e.preventDefault();\n        };\n        // gets the horizontal adjacent cells as well as first/last based on column visibility\n        self.getAdjacentCells = function () {\n            var x,\n                i,\n                s = self.getSchema(),\n                o = {};\n            for (x = 0; x < s.length; x += 1) {\n                i = self.orders.columns[x];\n                if (!s[i].hidden) {\n                    if (o.first === undefined) {\n                        o.first = x;\n                        o.left = x;\n                    }\n                    o.last = x;\n                    if (x > self.activeCell.columnIndex && o.right === undefined) {\n                        o.right = x;\n                    }\n                    if (x < self.activeCell.columnIndex) {\n                        o.left = x;\n                    }\n                }\n            }\n            if (o.right === undefined) {\n                o.right = o.last;\n            }\n            return o;\n        };\n        self.keydown = function (e) {\n            var i,\n                ev,\n                adjacentCells = self.getAdjacentCells(),\n                x = self.activeCell.columnIndex,\n                y = self.activeCell.rowIndex,\n                ctrl = (e.ctrlKey || e.metaKey),\n                last = self.data.length - 1,\n                s = self.getSchema(),\n                cols = s.length - 1;\n            if (self.dispatchEvent('keydown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.attributes.showNewRow) {\n                last += 1;\n            }\n            if (e.keyCode === 9) {\n                e.preventDefault();\n            }\n            // esc\n            if (e.keyCode === 27) {\n                self.selections = [];\n                self.draw(true);\n            // ctrl + a\n            } else if (ctrl && e.keyCode === 65) {\n                self.selectAll();\n            //ArrowDown\n            } else if (e.keyCode === 40) {\n                y += 1;\n            //ArrowUp\n            } else if (e.keyCode === 38) {\n                y -= 1;\n            //ArrowLeft Tab\n            } else if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {\n                x = adjacentCells.left;\n            //ArrowRight Tab\n            } else if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {\n                x = adjacentCells.right;\n            //PageUp\n            } else if (e.keyCode === 33) {\n                y -= self.page;\n                e.preventDefault();\n            //PageDown\n            } else if (e.keyCode === 34) {\n                y += self.page;\n                e.preventDefault();\n            //Home ArrowUp\n            } else if (e.keyCode === 36 || (ctrl && e.keyCode === 38)) {\n                y = 0;\n            //End ArrowDown\n            } else if (e.keyCode === 35 || (ctrl && e.keyCode === 40)) {\n                y = self.data.length - 1;\n            //ArrowRight\n            } else if (ctrl && e.keyCode === 39) {\n                x = adjacentCells.last;\n            //ArrowLeft\n            } else if (ctrl && e.keyCode === 37) {\n                x = adjacentCells.first;\n            }\n            //Enter\n            if (e.keyCode === 13) {\n                return self.beginEditAt(x, y, e);\n            }\n            //Space\n            if (e.keyCode === 32) {\n                self.selections = [];\n                self.selections[Math.max(y, 0)] = [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                if (self.attributes.selectionMode === 'row') {\n                    for (i = self.selectionBounds.top; i <= self.selectionBounds.bottom; i += 1) {\n                        self.selectRow(i, ctrl, null, true);\n                    }\n                } else {\n                    self.selectArea(undefined, ctrl);\n                }\n                e.preventDefault();\n                self.draw(true);\n                return;\n            }\n            if (x < 0) {\n                x = adjacentCells.first;\n            }\n            if (y > last) {\n                y = last;\n            }\n            if (y < 0) {\n                y = 0;\n            }\n            if (x > cols) {\n                x = adjacentCells.last;\n            }\n            // TODO - most likley some column order related bugs in key based selection\n            // Arrows\n            if (e.shiftKey && [37, 38, 39, 40].indexOf(e.keyCode) !== -1) {\n                self.selections[Math.max(y, 0)] = self.selections[Math.max(y, 0)] || [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                self.selectArea(undefined, ctrl);\n                self.draw(true);\n            }\n            if (x !== self.activeCell.columnIndex || y !== self.activeCell.rowIndex) {\n                self.scrollIntoView(x !== self.activeCell.columnIndex ? x : undefined, y !== self.activeCell.rowIndex ? y : undefined);\n                self.setActiveCell(x, y);\n                if (!e.shiftKey && self.attributes.selectionFollowsActiveCell) {\n                    if (!ctrl) {\n                        self.selections = [];\n                    }\n                    self.selections[y] = self.selections[y] || [];\n                    self.selections[y].push(x);\n                    ev = {\n                        selectedData: self.getSelectedData(),\n                        selections: self.selections,\n                        selectionBounds: self.getSelectionBounds()\n                    };\n                    Object.defineProperty(ev, 'selectedData', {\n                        get: function () {\n                            return self.getSelectedData();\n                        }\n                    });\n                    self.dispatchEvent('selectionchanged', ev);\n                }\n                self.draw(true);\n            }\n        };\n        self.keyup = function (e) {\n            if (self.dispatchEvent('keyup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n        };\n        self.keypress = function (e) {\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.dispatchEvent('keypress', {NativeEvent: e, cell: self.currentCell})) { return; }\n        };\n        self.dblclick = function (e) {\n            if (self.dispatchEvent('dblclick', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'columnHeaderCell') {\n                self.fitColumnToValues(self.currentCell.header.name);\n            } else if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'cornerCell') {\n                self.autosize();\n            } else if (['cell', 'activeCell'].indexOf(self.currentCell.style) !== -1) {\n                self.beginEditAt(self.currentCell.columnIndex, self.currentCell.rowIndex);\n            }\n        };\n        self.scrollWheel = function (e) {\n            var l,\n                t,\n                ev = e,\n                deltaX = e.deltaX === undefined ? e.NativeEvent.deltaX : e.deltaX,\n                deltaY = e.deltaY === undefined ? e.NativeEvent.deltaY : e.deltaY,\n                deltaMode = e.deltaMode === undefined ? e.NativeEvent.deltaMode : e.deltaMode;\n            if (wheeling) {\n                return;\n            }\n            if (self.dispatchEvent('wheel', {NativeEvent: e})) {\n                return;\n            }\n            var e = e.NativeEvent || e;\n            self.touchHaltAnimation = true;\n            l = self.scrollBox.scrollLeft;\n            t = self.scrollBox.scrollTop;\n            if (self.hasFocus) {\n                //BUG Issue 42: https://github.com/TonyGermaneri/canvas-datagrid/issues/42\n                //https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\n                if (deltaMode === 1) {\n                    // line mode = 17 pixels per line\n                    deltaY = deltaY * 17;\n                }\n                if ((self.scrollBox.scrollTop  < self.scrollBox.scrollHeight && deltaY > 0)\n                        || (self.scrollBox.scrollLeft < self.scrollBox.scrollWidth && deltaX > 0)\n                        || (self.scrollBox.scrollTop > 0 && deltaY < 0)\n                        || (self.scrollBox.scrollLeft > 0 && deltaX < 0)) {\n                    ev.preventDefault(e);\n                }\n                wheeling = setTimeout(function () {\n                    wheeling = undefined;\n                    self.scrollBox.scrollTo(deltaX + l, deltaY + t);\n                }, 1);\n            }\n        };\n        self.pasteItem = function (clipData, x, y, mimeType) {\n            var l, s = self.getVisibleSchema(), yi = y - 1, sel = [];\n            function normalizeRowData(importingRow, existingRow, offsetX, schema, mimeType, rowIndex) {\n                var r = existingRow;\n                if (!Array.isArray(importingRow) && importingRow !== null && typeof importingRow === 'object') {\n                    importingRow = Object.keys(importingRow).map(function (colKey) {\n                        return importingRow[colKey];\n                    });\n                }\n                if (/^text\\/html/.test(mimeType)) {\n                    importingRow = importingRow.substring(4, importingRow.length - 5).split('</td><td>');\n                }\n                if (typeof importingRow === 'string') {\n                    importingRow = [importingRow];\n                }\n                sel[rowIndex] = [];\n                importingRow.forEach(function (cellData, colIndex) {\n                    var cName = schema[colIndex + offsetX].name;\n                    if (importingRow[colIndex] === undefined || importingRow[colIndex] === null) {\n                        r[cName] = existingRow[cName];\n                        return;\n                    }\n                    sel[rowIndex].push(colIndex + offsetX);\n                    r[cName] = importingRow[colIndex];\n                });\n                return r;\n            }\n            if (/^text\\/html/.test(mimeType)) {\n                if (!/^(<meta[^>]+>)?<table>/.test(clipData.substring(0, 29))) {\n                    console.warn('Unrecognized HTML format.  HTML must be a simple table, e.g.: <table><tr><td>data</td></tr></table>.  Data with the mime type text/html not in this format will not be imported as row data.');\n                    return;\n                }\n                // strip table beginning and ending off, then split at rows\n                clipData = clipData.substring(clipData.indexOf('<table><tr>') + 11, clipData.length - 13).split('</tr><tr>');\n                // ditch any headers on the table\n                clipData = clipData.filter(function (row) {\n                    return !/^<th>|^<thead>/.test(row);\n                });\n            } else {\n                clipData = clipData.split('\\n');\n            }\n            l = clipData.length;\n            clipData.forEach(function (rowData) {\n                yi += 1;\n                var i = self.orders.rows[yi];\n                self.data[i] = normalizeRowData(rowData, self.data[i], x, s, mimeType, i);\n            });\n            self.selections = sel;\n            return l;\n        };\n        self.getNextVisibleColumnIndex = function (visibleColumnIndex) {\n            var x, s = self.getVisibleSchema();\n            for (x = 0; x < s.length; x += 1) {\n                if (s[x].columnIndex === visibleColumnIndex) {\n                    return s[x + 1].columnIndex;\n                }\n            }\n            return -1;\n        };\n        self.getVisibleColumnIndexOf = function (columnIndex) {\n            var x, s = self.getVisibleSchema();\n            for (x = 0; x < s.length; x += 1) {\n                if (s[x].columnIndex === columnIndex) {\n                    return x;\n                }\n            }\n            return -1;\n        };\n        self.paste = function (e) {\n            var d;\n            function getItem(dti) {\n                var type = dti.type;\n                dti.getAsString(function (s) {\n                    self.pasteItem(s, self.getVisibleColumnIndexOf(self.activeCell.columnIndex), self.activeCell.rowIndex, type);\n                    self.draw();\n                });\n            }\n            d = Array.prototype.filter.call(e.clipboardData.items, function (dti) {\n                return dti.type === 'text/html';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/csv';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/plain';\n            })[0];\n            if (!d) {\n                console.warn('Cannot find supported clipboard data type.  Supported types are text/html, text/csv, text/plain.');\n                return;\n            }\n            getItem(d);\n        };\n        self.cut = function (e) {\n            self.copy(e);\n            self.forEachSelectedCell(function (data, index, colName) {\n                data[index][colName] = '';\n            });\n        };\n        self.copy = function (e) {\n            if (self.dispatchEvent('copy', {NativeEvent: e})) { return; }\n            if (!self.hasFocus || !e.clipboardData) { return; }\n            var t,\n                d,\n                data = (self.data || []),\n                tableRows = [],\n                textRows = [],\n                outputHeaders = {},\n                outputHeaderKeys,\n                sData = self.getSelectedData(),\n                s = self.getSchema();\n            function htmlSafe(v) {\n                return v.replace(/</g, '&lt;').replace(/>/g, '&gt;');\n            }\n            function fCopyCell(v) {\n                v = v === null || v === undefined ? '' : v;\n                return '<td>' + (typeof v === 'string' ? htmlSafe(v) : v) + '</td>';\n            }\n            function addHeaders(headers, useHtml) {\n                if (!s.length || headers.length < 2) { return ''; }\n                var h = [];\n                if (useHtml) {\n                    h.push('<tr>');\n                }\n                s.forEach(function (column, columnIndex) {\n                    // intentional redefinition of column\n                    column = s[self.orders.columns[columnIndex]];\n                    if (!column.hidden && headers.indexOf(column.name) !== -1) {\n                        var hVal = (column.name || column.title) || '';\n                        if (useHtml) {\n                            h.push('<th>' + htmlSafe(hVal) + '</th>');\n                        } else {\n                            h.push('\"' + hVal.replace(/\"/g, '\"\"') + '\"');\n                        }\n                    }\n                });\n                h.push(useHtml ? '</tr>' : '\\n');\n                return h.join(useHtml ? '' : ',');\n            }\n            function addCellValue(val, trRow, textRow, column) {\n                // escape strings\n                if (val !== null\n                        && val !== false\n                        && val !== undefined\n                        && val.replace) {\n                    trRow.push(fCopyCell(val));\n                    textRow.push('\"' + val.replace(/\"/g, '\"\"') + '\"');\n                    return;\n                }\n                if (val !== undefined) {\n                    textRow.push(val);\n                    trRow.push(fCopyCell(val));\n                    return;\n                }\n                // issue #66\n                textRow.push('');\n                trRow.push('<td>&nbsp;</td>');\n            }\n            if (sData.length > 0) {\n                sData.forEach(function (row) {\n                    var rowKeys = Object.keys(row);\n                    if (row) {\n                        var trRow = [],\n                            textRow = [],\n                            sSorted = [];\n                        // HACK: https://github.com/TonyGermaneri/canvas-datagrid/issues/181\n                        // I can't use sort here or O(1), so hacks\n                        s.forEach(function (column, columnIndex) {\n                            sSorted.push(s[self.orders.columns[columnIndex]]);\n                        });\n                        sSorted.forEach(function (column, columnIndex) {\n                            if (rowKeys.indexOf(column.name) !== -1) {\n                                outputHeaders[column.name] = true;\n                                // escape strings\n                                addCellValue(row[column.name], trRow, textRow, column);\n                            }\n                        });\n                        tableRows.push(trRow.join(''));\n                        textRows.push(textRow.join(','));\n                    }\n                });\n                outputHeaderKeys = Object.keys(outputHeaders);\n                t = addHeaders(outputHeaderKeys) + textRows.join('\\n');\n                d = '<table>' + addHeaders(outputHeaderKeys, true) + '<tr>' + tableRows.join('</tr><tr>') + '</tr></table>';\n                if (outputHeaderKeys.length === 1) {\n                    // if there was only one cell selected, remove the quotes from the string\n                    t = t.substring(1, t.length -1);\n                }\n                e.clipboardData.setData('text/html', d);\n                e.clipboardData.setData('text/plain', t);\n                e.clipboardData.setData('text/csv', t);\n                e.clipboardData.setData('application/json', JSON.stringify(sData));\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n","/*jslint browser: true, unparam: true, todo: true*/\n/*globals XMLSerializer: false, define: true, Blob: false, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var perfCounters = [],\n            cachedImagesDrawn = false,\n            drawCount = 0,\n            perfWindowSize = 300,\n            entityCount = [],\n            hiddenFrozenColumnCount = 0,\n            scrollDebugCounters = [],\n            touchPPSCounters = [];\n        self.htmlImageCache = {};\n        // more heavyweight version than fillArray defined in intf.js\n        function fillArray(low, high, step, def) {\n            step = step || 1;\n            var i = [], x;\n            for (x = low; x <= high; x += step) {\n                i[x] = def === undefined ? x : (typeof def === 'function' ? def(x) : def);\n            }\n            return i;\n        }\n        function drawPerfLine(w, h, x, y, perfArr, arrIndex, max, color, useAbs) {\n            var i = w / perfArr.length,\n                r = h / max;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x, y + h);\n            perfArr.forEach(function (n) {\n                var val = (arrIndex === undefined ? n : n[arrIndex]),\n                    cx,\n                    cy;\n                if (useAbs) {\n                    val = Math.abs(val);\n                }\n                cx = x + i;\n                cy = y + h - (val * r);\n                self.ctx.lineTo(cx, cy);\n                x += i;\n            });\n            self.ctx.moveTo(x + w, y + h);\n            self.ctx.strokeStyle = color;\n            self.ctx.stroke();\n        }\n        function drawOnAllImagesLoaded() {\n            var loaded = true;\n            Object.keys(self.htmlImageCache).forEach(function (html) {\n                if (!self.htmlImageCache[html].complete) {\n                    loaded = false;\n                }\n            });\n            if (loaded && !cachedImagesDrawn) {\n                cachedImagesDrawn = true;\n                self.draw();\n            }\n        }\n        function drawHtml(cell) {\n            var img,\n                v = cell.innerHTML || cell.formattedValue,\n                cacheKey = v.toString() + cell.rowIndex.toString() + cell.columnIndex.toString(), \n                x = cell.x + self.canvasOffsetLeft,\n                y = cell.y + self.canvasOffsetTop;\n            if (self.htmlImageCache[cacheKey]) {\n                img = self.htmlImageCache[cacheKey];\n                if (img.height !== cell.height || img.width !== cell.width) {\n                    // height and width of the cell has changed, invalidate cache\n                    self.htmlImageCache[cacheKey] = undefined;\n                } else {\n                    if (!img.complete) {\n                        return;\n                    }\n                    return self.ctx.drawImage(img, x, y);\n                }\n            } else {\n                cachedImagesDrawn = false;\n            }\n            img = new Image(cell.width, cell.height);\n            self.htmlImageCache[cacheKey] = img;\n            img.onload = function () {\n                self.ctx.drawImage(img, x, y);\n                drawOnAllImagesLoaded();\n            };\n            img.src = 'data:image/svg+xml;base64,' + btoa(\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + cell.width + '\" height=\"' + cell.height + '\">\\n' +\n                    '<foreignObject class=\"node\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\\n' +\n                    '<body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;padding:0;\">\\n' +\n                    v + '\\n' +\n                    '</body>' +\n                    '</foreignObject>\\n' +\n                    '</svg>\\n'\n            );\n        }\n        function drawOrderByArrow(x, y) {\n            var mt = self.style.columnHeaderOrderByArrowMarginTop * self.scale,\n                ml = self.style.columnHeaderOrderByArrowMarginLeft * self.scale,\n                mr = self.style.columnHeaderOrderByArrowMarginRight * self.scale,\n                aw = self.style.columnHeaderOrderByArrowWidth * self.scale,\n                ah = self.style.columnHeaderOrderByArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.columnHeaderOrderByArrowColor;\n            self.ctx.strokeStyle = self.style.columnHeaderOrderByArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.orderDirection === 'asc') {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y + ah);\n                self.ctx.lineTo(x + aw, y + ah);\n                self.ctx.lineTo(x + (aw * 0.5), y);\n                self.ctx.lineTo(x, y + ah);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function drawTreeArrow(cell, x, y) {\n            var mt = self.style.treeArrowMarginTop * self.scale,\n                mr = self.style.treeArrowMarginRight * self.scale,\n                ml = self.style.treeArrowMarginLeft * self.scale,\n                aw = self.style.treeArrowWidth * self.scale,\n                ah = self.style.treeArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.treeArrowColor;\n            self.ctx.strokeStyle = self.style.treeArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.openChildren[cell.rowIndex]) {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y);\n                self.ctx.lineTo(x + ah, y + (aw * 0.5));\n                self.ctx.lineTo(x, y + aw);\n                self.ctx.lineTo(x, y);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function radiusRect(x, y, w, h, radius) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            var r = x + w, b = y + h;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x + radius, y);\n            self.ctx.lineTo(r - radius, y);\n            self.ctx.quadraticCurveTo(r, y, r, y + radius);\n            self.ctx.lineTo(r, y + h - radius);\n            self.ctx.quadraticCurveTo(r, b, r - radius, b);\n            self.ctx.lineTo(x + radius, b);\n            self.ctx.quadraticCurveTo(x, b, x, b - radius);\n            self.ctx.lineTo(x, y + radius);\n            self.ctx.quadraticCurveTo(x, y, x + radius, y);\n        }\n        function fillRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillRect(x, y, w, h);\n        }\n        function strokeRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.strokeRect(x, y, w, h);\n        }\n        function fillText(text, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillText(text, x, y);\n        }\n        function fillCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.fill();\n        }\n        function strokeCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.stroke();\n        }\n        function clipFrozenArea(mode) {\n            // 0 both, 1 rows, 2 cols\n            // self.lastFrozenColumnPixel;\n            // self.lastFrozenRowPixel;\n            self.ctx.beginPath();\n            if (mode === 0) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, self.lastFrozenRowPixel);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 1) {\n                self.ctx.moveTo(0, self.lastFrozenRowPixel);\n                self.ctx.lineTo(0, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 2) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, 0);\n                self.ctx.lineTo(self.width, 0);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n            }\n            self.ctx.clip();\n        }\n        function fillHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return fillCircle(x, y, r * 0.5);\n            }\n            fillRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function strokeHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return strokeCircle(x, y, r * 0.5);\n            }\n            strokeRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function addselectionHandle(c, pos) {\n            var hw = self.style.selectionHandleSize,\n                p = {\n                    tr: function () {\n                        fillHandle(c.x + c.width, c.y, hw);\n                        strokeHandle(c.x + c.width, c.y, hw);\n                    },\n                    br: function () {\n                        fillHandle(c.x + c.width, c.y + c.height, hw);\n                        strokeHandle(c.x + c.width, c.y + c.height, hw);\n                    },\n                    tl: function () {\n                        fillHandle(c.x, c.y, hw);\n                        strokeHandle(c.x, c.y, hw);\n                    },\n                    bl: function () {\n                        fillHandle(c.x, c.y + c.height, hw);\n                        strokeHandle(c.x, c.y + c.height, hw);\n                    }\n                };\n            p[pos]();\n        }\n        function addBorderLine(c, pos) {\n            self.ctx.beginPath();\n            var p = {\n                t: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                },\n                r: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                b: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                l: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                }\n            };\n            p[pos]();\n            self.ctx.stroke();\n        }\n        function addEllipsis(text, width) {\n            var c, w = 0;\n            if (self.ellipsisCache[text] && self.ellipsisCache[text][width]) {\n                return self.ellipsisCache[text][width];\n            }\n            //TODO Add ellipsis back when there is a fast way to do it\n            w = self.ctx.measureText(text).width;\n            self.ellipsisCache[text] = self.ellipsisCache[text] || {};\n            c = {value: text, width: w};\n            self.ellipsisCache[text][width] = c;\n            return c;\n        }\n        function wrapText(cell, splitChar) {\n            if (!cell.formattedValue) {\n                return { lines: [{width: 0, value: ''}], width: 0, height: cell.calculatedLineHeight };\n            }\n            var max = 0,\n                n = '\\n',\n                x,\n                word,\n                words = cell.formattedValue.split(splitChar),\n                textHeight = cell.calculatedLineHeight,\n                lines = [],\n                out = [],\n                wrap = self.style.cellWhiteSpace !== 'nowrap',\n                elWidth,\n                et = self.attributes.ellipsisText,\n                elClipLength,\n                plWidth,\n                clippedVal,\n                ogWordWidth,\n                previousLine,\n                line = {\n                    width: 0,\n                    value: ''\n                },\n                cHeight = wrap ? cell.paddedHeight : cell.calculatedLineHeight;\n            lines.push(line);\n            elWidth = self.ctx.measureText(' ' + et).width;\n            for (x = 0; x < words.length; x += 1) {\n                word = words[x];\n                var measure = self.ctx.measureText(word + splitChar);\n                if (line.width + measure.width + elWidth < cell.paddedWidth) {\n                    line.value += word + splitChar;\n                    line.width += measure.width;\n                    continue;\n                }\n                // if there is a hyphenated word that is too long\n                // split it and add the split set to the array\n                // then back up and re-read new split set\n                // this behavior seems right, it might not be\n                if (/\\w-\\w/.test(word) && cell.paddedWidth < measure.width) {\n                    words.splice(x, 1, word.split('-')[0] + '-', word.split('-')[1]);\n                    x -= 1;\n                    continue;\n                }\n                line = {\n                    width: measure.width,\n                    value: word + splitChar\n                };\n                if (x === 0) {\n                    lines = [];\n                    lines.push(line);\n                }\n                textHeight += cell.calculatedLineHeight;\n                if (textHeight > cHeight) {\n                    if (lines.length === 0) { break; }\n                    elClipLength = 1;\n                    previousLine = lines[lines.length - 1];\n                    if (previousLine.width < cell.paddedWidth && words.length === 1) { break; }\n                    clippedVal = previousLine.value + word;\n                    while(plWidth == undefined || (plWidth > cell.paddedWidth && elClipLength < clippedVal.length)) {\n                        plWidth = self.ctx.measureText(clippedVal + et).width\n                        clippedVal = clippedVal.substring(0, clippedVal.length - elClipLength);\n                        elClipLength + 1;\n                    }\n                    clippedVal = clippedVal + et;\n                    previousLine.value = clippedVal;\n                    previousLine.width = plWidth;\n                    break;\n                }\n                if (x > 0) {\n                    lines.push(line);\n                }\n            }\n            return {\n                lines: lines,\n                width: max,\n                height: cell.calculatedLineHeight * lines.length\n            }\n        }\n        function drawText(cell) {\n            var ll = cell.text.lines.length,\n                h = (cell.fontHeight * cell.lineHeight),\n                x,\n                line,\n                wrap = self.style.cellWhiteSpace !== 'nowrap',\n                textHeight = 0;\n            for (x = 0; x < cell.text.lines.length; x += 1) {\n                line = cell.text.lines[x];\n                var vPos = Math.max((cell.height - (wrap ? cell.text.height : cell.calculatedLineHeight)) * 0.5, 0) + h,\n                    hPos = cell.paddingLeft + cell.treeArrowWidth + cell.orderByArrowWidth;\n                if (cell.horizontalAlignment === 'right') {\n                    hPos = cell.paddingLeft + cell.paddedWidth - line.width;\n                } else if (cell.horizontalAlignment === 'center') {\n                    hPos = cell.paddingLeft + ((cell.paddedWidth + cell.paddingRight) / 2) - (line.width / 2);\n                }\n                if (cell.verticalAlignment === 'top') {\n                    vPos = cell.calculatedLineHeight;\n                } else if (cell.verticalAlignment === 'bottom') {\n                    vPos = cell.height - cell.paddingBottom - cell.text.height;\n                }\n                line.height = h + cell.lineSpacing;\n                line.offsetLeft = hPos;\n                line.offsetTop = vPos;\n                line.x = cell.x + hPos;\n                line.y = cell.y + textHeight + vPos;\n                textHeight += line.height;\n                fillText(line.value, line.x, line.y);\n            }\n            if (self.attributes.debug && cell.active) {\n                requestAnimationFrame(function () {\n                    self.ctx.font = self.style.debugFont;\n                    self.ctx.fillStyle = self.style.debugColor;\n                    fillText(JSON.stringify({\n                        x: cell.x,\n                        y: cell.y,\n                        h: cell.height,\n                        w: cell.width,\n                        pw: cell.paddedWidth,\n                        idx: cell.columnIndex,\n                        idx_ord: cell.sortColumnIndex\n                    }, null, '\\t'),\n                        cell.x + 14, cell.y + 14);\n                    fillText(JSON.stringify(cell.text.lines.map(function (l) { return {w: l.width, v: l.value.length }; }), null, '\\t'),\n                        cell.x + 14, cell.y + 30);\n                });\n            }\n        }\n        function getFrozenColumnsWidth() {\n            var w = 0,\n                s = self.getSchema(),\n                x = 0,\n                n = Math.min(self.frozenColumn, s.length),\n                column;\n            hiddenFrozenColumnCount = 0;\n            while (x < n) {\n                column = s[x];\n                if (column.hidden) {\n                    hiddenFrozenColumnCount += 1;\n                } else {\n                    w += self.getColummnWidth(x);\n                }\n                x += 1;\n            }\n            return w;\n        }\n        /**\n         * Redraws the grid. No matter what the change, this is the only method required to refresh everything.\n         * @memberof canvasDatagrid\n         * @name draw\n         * @method\n         */\n         // r = literal row index\n         // rd = row data array\n         // i = user order index\n         // o = literal data index\n         // y = y drawing cursor\n         // x = x drawing cursor\n         // s = visible schema array\n         // cx = current x drawing cursor sub calculation var\n         // cy = current y drawing cursor sub calculation var\n         // a = static cell (like corner cell)\n         // p = perf counter\n         // l = data length\n         // u = current cell\n         // h = current height\n         // w = current width\n        self.draw = function (internal) {\n            if (self.dispatchEvent('beforedraw', {})) { return; }\n            if (!self.isChildGrid && (!self.height || !self.width)) {\n                return;\n            }\n            if (self.isChildGrid && internal) {\n                requestAnimationFrame(self.parentGrid.draw);\n                return;\n            }\n            if (self.intf.visible === false) {\n                return;\n            }\n            // initial values\n            var checkScrollHeight, rowHeaderCell, p, cx, cy, treeGrid, rowOpen,\n                rowHeight, cornerCell, y, x, c, h, w, s, r, rd, aCell,\n                data = (self.data || []),\n                bc = self.style.gridBorderCollapse === 'collapse',\n                selectionBorders = [],\n                moveBorders = [],\n                selectionHandles = [],\n                rowHeaders = [],\n                l = data.length,\n                u = self.currentCell || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                cellHeight = self.style.cellHeight;\n            drawCount += 1;\n            p = performance.now();\n            self.visibleRowHeights = [];\n            // if data length has changed, there is no way to know\n            if (data.length > self.orders.rows.length) {\n                self.createRowOrders();\n            }\n            function drawScrollBars() {\n                var drawCorner,\n                    en = self.scrollBox.entities,\n                    m = (self.style.scrollBarBoxMargin * 2);\n                self.ctx.strokeStyle = self.style.scrollBarBorderColor;\n                self.ctx.lineWidth = self.style.scrollBarBorderWidth;\n                en.horizontalBox.x = rowHeaderCellWidth + self.style.scrollBarBoxMargin\n                    + ((en.horizontalBar.width - self.scrollBox.scrollBoxWidth)\n                        * (self.scrollBox.scrollLeft / self.scrollBox.scrollWidth));\n                en.verticalBox.y = columnHeaderCellHeight + self.style.scrollBarBoxMargin\n                    + ((en.verticalBar.height - self.scrollBox.scrollBoxHeight)\n                        * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight));\n                if (self.scrollBox.horizontalBarVisible) {\n                    self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                    fillRect(en.horizontalBar.x, en.horizontalBar.y, en.horizontalBar.width + m, en.horizontalBar.height);\n                    strokeRect(en.horizontalBar.x, en.horizontalBar.y, en.horizontalBar.width + m, en.horizontalBar.height);\n                    self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                    if (self.scrollBox.horizontalBoxVisible) {\n                        if (/horizontal/.test(u.context)) {\n                            self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                        }\n                        radiusRect(en.horizontalBox.x, en.horizontalBox.y,\n                            en.horizontalBox.width, en.horizontalBox.height, self.style.scrollBarBoxBorderRadius);\n                        self.ctx.stroke();\n                        self.ctx.fill();\n                    }\n                    drawCorner = true;\n                    self.visibleCells.unshift(en.horizontalBar);\n                    self.visibleCells.unshift(en.horizontalBox);\n                }\n                if (self.scrollBox.verticalBarVisible) {\n                    self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                    fillRect(en.verticalBar.x, en.verticalBar.y, en.verticalBar.width, en.verticalBar.height + m);\n                    strokeRect(en.verticalBar.x, en.verticalBar.y, en.verticalBar.width, en.verticalBar.height + m);\n                    if (self.scrollBox.verticalBoxVisible) {\n                        self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                        if (/vertical/.test(u.context)) {\n                            self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                        }\n                        radiusRect(en.verticalBox.x, en.verticalBox.y, en.verticalBox.width,\n                            en.verticalBox.height, self.style.scrollBarBoxBorderRadius);\n                        self.ctx.stroke();\n                        self.ctx.fill();\n                    }\n                    drawCorner = true;\n                    self.visibleCells.unshift(en.verticalBar);\n                    self.visibleCells.unshift(en.verticalBox);\n                }\n                if (drawCorner) {\n                    //corner\n                    self.ctx.strokeStyle = self.style.scrollBarCornerBorderColor;\n                    self.ctx.fillStyle = self.style.scrollBarCornerBackgroundColor;\n                    radiusRect(en.corner.x, en.corner.y, en.corner.width, en.corner.height, 0);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                    self.visibleCells.unshift(en.corner);\n                }\n            }\n            function createHandlesOverlayArray(cell) {\n                if (self.attributes.allowMovingSelection || self.mobile) {\n                    if (cell.selectionBorderTop && cell.selectionBorderRight && self.mobile) {\n                        selectionHandles.push([cell, 'tr']);\n                        cell.selectionHandle = 'tr';\n                    }\n                    if (cell.selectionBorderTop && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'tl']);\n                        cell.selectionHandle = 'tl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'bl']);\n                        cell.selectionHandle = 'bl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderRight\n                            && (self.attributes.selectionHandleBehavior !== 'none' || self.mobile)) {\n                        selectionHandles.push([cell, 'br']);\n                        cell.selectionHandle = 'br';\n                    }\n                }\n            }\n            function createBorderOverlayArray(cell, drawArray, propPrefix, offsetPoint) {\n                offsetPoint = offsetPoint || {x: 0, y: 0};\n                cell.selectionBorder = '';\n                if (!cell.isRowHeader\n                        && self.selections[cell.rowIndex + -offsetPoint.y]\n                        && self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) !== -1) {\n                    if ((!self.selections[cell.rowIndex - 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex - 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1\n                            || cell.rowIndex === 0)\n                            && !cell.isHeader) {\n                        drawArray.push([cell, 't']);\n                        cell[propPrefix + 'BorderTop'] = true;\n                        cell[propPrefix + 'Border'] += 't';\n                    }\n                    if (!self.selections[cell.rowIndex + 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex + 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'b']);\n                        cell[propPrefix + 'BorderBottom'] = true;\n                        cell[propPrefix + 'Border'] += 'b';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === 0\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex - 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'l']);\n                        cell[propPrefix + 'BorderLeft'] = true;\n                        cell[propPrefix + 'Border'] += 'l';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === s.length\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'r']);\n                        cell[propPrefix + 'BorderRight'] = true;\n                        cell[propPrefix + 'Border'] += 'r';\n                    }\n                }\n            }\n            function drawCell(d, rowOrderIndex, rowIndex) {\n                return function drawEach(header, headerIndex, columnOrderIndex) {\n                    if (header.hidden) { return 0; }\n                    var cellStyle = header.style || 'cell',\n                        cellGridAttributes,\n                        cell,\n                        isHeader = /HeaderCell/.test(cellStyle),\n                        isCorner = /cornerCell/.test(cellStyle),\n                        isRowHeader = 'rowHeaderCell' === cellStyle,\n                        isColumnHeader = 'columnHeaderCell' === cellStyle,\n                        selected = self.selections[rowOrderIndex] && self.selections[rowOrderIndex].indexOf(columnOrderIndex) !== -1,\n                        hovered = self.hovers.rowIndex === rowOrderIndex && self.hovers.columnIndex === columnOrderIndex,\n                        active = self.activeCell.rowIndex === rowOrderIndex && self.activeCell.columnIndex === columnOrderIndex,\n                        isColumnHeaderCellCap = cellStyle === 'columnHeaderCellCap',\n                        rawValue = d ? d[header.name] : undefined,\n                        isGrid = header.type === 'canvas-datagrid',\n                        activeHeader = (self.orders.rows[self.activeCell.rowIndex] === rowOrderIndex\n                                || self.orders.columns[self.activeCell.columnIndex] === headerIndex)\n                            && (columnOrderIndex === -1 || rowOrderIndex === -1)\n                            ? (isRowHeader ? 'activeRowHeaderCell' : 'activeColumnHeaderCell') : false,\n                        val,\n                        f = self.formatters[header.type || 'string'],\n                        orderByArrowSize = 0,\n                        treeArrowSize = 0,\n                        cellWidth = self.sizes.columns[headerIndex] || header.width,\n                        ev = {\n                            value: rawValue,\n                            row: d,\n                            header: header\n                        };\n                    if (isColumnHeaderCellCap) {\n                        cellWidth = w - x;\n                    }\n                    // if no data or schema are defined, a width is provided to the stub column\n                    if (cellWidth === undefined) {\n                        cellWidth = self.style.cellWidth;\n                    }\n                    cellWidth = cellWidth * self.scale;\n                    if (x + cellWidth + self.style.cellBorderWidth < 0) {\n                        x += cellWidth + self.style.cellBorderWidth;\n                    }\n                    if (active && cellStyle !== 'cornerCell') {\n                        cellStyle = 'activeCell';\n                    }\n                    if (self.visibleRows.indexOf(rowIndex) === -1 && !isHeader) {\n                        self.visibleRows.push(rowIndex);\n                    }\n                    val = self.dispatchEvent('formatcellvalue', ev);\n                    cx = x;\n                    cy = y;\n                    if (cellStyle === 'cornerCell') {\n                        cx = 0;\n                        cy = 0;\n                    } else if (isRowHeader) {\n                        cx = 0;\n                    } else if (isHeader) {\n                        cy = 0;\n                    }\n                    cell = {\n                        type: isGrid ? 'canvas-datagrid-cell' : header.type,\n                        style: cellStyle,\n                        nodeType: 'canvas-datagrid-cell',\n                        x: cx,\n                        y: cy,\n                        fontHeight: (self.style[cellStyle + 'FontHeight'] || 0) * self.scale,\n                        horizontalAlignment: self.style[cellStyle + 'HorizontalAlignment'],\n                        verticalAlignment: self.style[cellStyle + 'VerticalAlignment'],\n                        paddingLeft: (self.style[cellStyle + 'PaddingLeft'] || 0) * self.scale,\n                        paddingTop: (self.style[cellStyle + 'PaddingTop'] || 0) * self.scale,\n                        paddingRight: (self.style[cellStyle + 'PaddingRight'] || 0) * self.scale,\n                        paddingBottom: (self.style[cellStyle + 'PaddingBottom'] || 0) * self.scale,\n                        whiteSpace: self.style.cellWhiteSpace,\n                        lineHeight: self.style.cellLineHeight,\n                        lineSpacing: self.style.cellLineSpacing,\n                        offsetTop: self.canvasOffsetTop + cy,\n                        offsetLeft: self.canvasOffsetLeft + cx,\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        active: active || activeHeader,\n                        hovered: hovered,\n                        selected: selected,\n                        width: cellWidth,\n                        height: cellHeight,\n                        offsetWidth: cellWidth,\n                        offsetHeight: cellHeight,\n                        parentNode: self.intf.parentNode,\n                        offsetParent: self.intf.parentNode,\n                        data: d,\n                        isCorner: isCorner,\n                        isHeader: isHeader,\n                        isColumnHeader: isColumnHeader,\n                        isColumnHeaderCellCap: isColumnHeaderCellCap,\n                        isRowHeader: isRowHeader,\n                        rowOpen: rowOpen,\n                        header: header,\n                        columnIndex: columnOrderIndex,\n                        rowIndex: rowOrderIndex,\n                        sortColumnIndex: headerIndex,\n                        sortRowIndex: rowIndex,\n                        isGrid: isGrid,\n                        isNormal: !isGrid && !isCorner && !isHeader,\n                        gridId: (self.attributes.name || '') + rowIndex + ':' + headerIndex,\n                        parentGrid: self.intf,\n                        innerHTML: '',\n                        activeHeader: activeHeader,\n                        value: isHeader && !isRowHeader ? (header.title || header.name) : rawValue\n                    };\n                    cell.calculatedLineHeight = (cell.fontHeight * cell.lineHeight) + cell.lineSpacing;\n                    cell.paddedWidth = cell.width - cell.paddingRight - cell.paddingLeft;\n                    cell.paddedHeight = cell.height - cell.paddingTop - cell.paddingBottom;\n                    ev.cell = cell;\n                    cell.userHeight = cell.isHeader ? self.sizes.rows[-1] : rowHeight;\n                    cell.userWidth = cell.isHeader ? self.sizes.columns.cornerCell : self.sizes.columns[headerIndex];\n                    self.visibleCells.unshift(cell);\n                    if (self.dispatchEvent('beforerendercell', ev)) { return; }\n                    self.ctx.fillStyle = self.style[cellStyle + 'BackgroundColor'];\n                    self.ctx.strokeStyle = self.style[cellStyle + 'BorderColor'];\n                    self.ctx.lineWidth = self.style[cellStyle + 'BorderWidth'];\n                    if (hovered) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'HoverBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'HoverBorderColor'];\n                    }\n                    if (selected) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'SelectedBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'SelectedBorderColor'];\n                    }\n                    if (activeHeader) {\n                        self.ctx.fillStyle = self.style[activeHeader + 'BackgroundColor'];\n                    }\n                    self.dispatchEvent('rendercell', ev);\n                    if (cell.isGrid) {\n                        if (cell.height !== rowHeight) {\n                            cell.height = rowHeight || self.style.cellHeightWithChildGrid;\n                            checkScrollHeight = true;\n                        }\n                        cell.width = self.sizes.columns[headerIndex] || self.style.cellWidthWithChildGrid;\n                    }\n                    if (rowOpen && !cell.isRowHeader) {\n                        cell.height = self.sizes.rows[rowIndex] || self.style.cellHeight;\n                    }\n                    if (!cell.isGrid) {\n                        fillRect(cx, cy, cell.width, cell.height);\n                        strokeRect(cx, cy, cell.width, cell.height);\n                    }\n                    self.ctx.save();\n                    radiusRect(cell.x, cell.y, cell.width, cell.height, 0);\n                    self.ctx.clip();\n                    self.dispatchEvent('afterrendercell', ev);\n                    if (cell.height !== cellHeight && !(rowOpen && !cell.isRowHeader)) {\n                        self.sizes.rows[isHeader ? -1 : rowIndex] = cell.height;\n                        checkScrollHeight = true;\n                    }\n                    if (cell.width !== cellWidth) {\n                        self.sizes.columns[headerIndex] = cell.width;\n                        checkScrollHeight = true;\n                    }\n                    if (isRowHeader && self.attributes.tree) {\n                        if (!self.dispatchEvent('rendertreearrow', ev)) {\n                            treeArrowSize = drawTreeArrow(cell, self.style[cellStyle + 'PaddingLeft'], cy, 0);\n                        }\n                    }\n                    if ((self.attributes.showRowNumbers && isRowHeader)\n                            || !isRowHeader) {\n                        if (cell.isGrid && !self.dispatchEvent('beforerendercellgrid', ev)) {\n                            if (!self.childGrids[cell.gridId]) {\n                                // HACK: this only allows setting of the child grids styles if data is set _after_\n                                // this is less than desirable.  An interface needs to be made to effect the\n                                // style of all cell grids.  One for individual grids already exists.\n                                cellGridAttributes = self.cellGridAttributes;\n                                cellGridAttributes.name = self.attributes.saveAppearance ? cell.gridId : undefined;\n                                cellGridAttributes.component = false;\n                                cellGridAttributes.parentNode = cell;\n                                cellGridAttributes.data = rawValue;\n                                ev.cellGridAttributes = cellGridAttributes;\n                                if (self.dispatchEvent('beforecreatecellgrid', ev)) { return; }\n                                self.childGrids[cell.gridId] = self.createGrid(cellGridAttributes);\n                                self.sizes.rows[rowIndex]\n                                    = self.sizes.rows[rowIndex] || self.style.cellGridHeight;\n                                checkScrollHeight = true;\n                            }\n                            cell.grid = self.childGrids[cell.gridId];\n                            cell.grid.parentNode = cell;\n                            cell.grid.visible = true;\n                            cell.grid.draw();\n                            self.dispatchEvent('rendercellgrid', ev);\n                        } else if (!cell.isGrid) {\n                            if (self.childGrids[cell.gridId]) {\n                                self.childGrids[cell.gridId].parentNode.offsetHeight = 0;\n                            }\n                            if (isHeader && self.orderBy === header.name) {\n                                if (!self.dispatchEvent('renderorderbyarrow', ev)) {\n                                    orderByArrowSize = drawOrderByArrow(cx + self.style[cellStyle + 'PaddingLeft'], 0);\n                                }\n                            }\n                            self.ctx.fillStyle = self.style[cellStyle + 'Color'];\n                            if (hovered) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'HoverColor'];\n                            }\n                            if (selected) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'SelectedColor'];\n                            }\n                            if (activeHeader) {\n                                self.ctx.fillStyle = self.style[activeHeader + 'Color'];\n                            }\n                            cell.treeArrowWidth = treeArrowSize;\n                            cell.orderByArrowWidth = orderByArrowSize;\n                            // create text ref to see if height needs to expand\n                            val = val !== undefined ? val : f\n                                ? f(ev) : '';\n                            if (val === undefined && !f) {\n                                val = '';\n                                console.warn('canvas-datagrid: Unknown format '\n                                    + header.type + ' add a cellFormater');\n                            }\n                            cell.formattedValue = ((val !== undefined && val !== null) ? val : '').toString();\n                            if (self.columnFilters && self.columnFilters[val] !== undefined && isHeader) {\n                                cell.formattedValue = self.attributes.filterTextPrefix + val;\n                            }\n                            self.ctx.font = (self.style[cellStyle + 'FontHeight'] * self.scale) + 'px ' + self.style[cellStyle + 'FontName'];\n                            if (!self.dispatchEvent('formattext', ev)) {\n                                cell.text = wrapText(cell, ' ');\n                            }\n                            if (!self.dispatchEvent('rendertext', ev)) {\n                                if (cell.innerHTML || header.type === 'html') {\n                                    drawHtml(cell);\n                                } else {\n                                    drawText(cell);\n                                }\n                            }\n                        }\n                    }\n                    if (active) {\n                        aCell = cell;\n                    }\n                    createBorderOverlayArray(cell, selectionBorders, 'selection');\n                    // createBorderOverlayArray calculates data for createHandlesOverlayArray so it must go 2nd\n                    createHandlesOverlayArray(cell);\n                    if (self.movingSelection) {\n                        createBorderOverlayArray(cell, moveBorders, 'move', self.moveOffset);\n                    }\n                    self.ctx.restore();\n                    x += cell.width + (bc ? 0 : self.style.cellBorderWidth);\n                    return cell.width;\n                };\n            }\n            function drawRowHeader(rowData, index, rowOrderIndex) {\n                var a, i;\n                if (self.attributes.showRowHeaders) {\n                    x = 0;\n                    i = index + 1;\n                    rowHeaderCell = {'rowHeaderCell': i };\n                    a = {\n                        name: 'rowHeaderCell',\n                        width: self.sizes.columns[-1] || self.style.rowHeaderCellWidth,\n                        style: 'rowHeaderCell',\n                        type: 'string',\n                        data: i,\n                        index: -1\n                    };\n                    rowOpen = self.openChildren[index];\n                    drawCell(rowHeaderCell, index, rowOrderIndex)(a, -1, -1);\n                }\n            }\n            function drawHeaders() {\n                var d, g = s.length, i, o, columnHeaderCell, header, nonFrozenHeaderWidth;\n                function drawHeaderColumnRange(start, end) {\n                    end = Math.min(end, g);\n                    for (o = start; o < end; o += 1) {\n                        i = self.orders.columns[o];\n                        header = s[i];\n                        if (!header.hidden) {\n                            d = {\n                                title: header.title,\n                                name: header.name,\n                                width: header.width || self.style.cellWidth,\n                                style: 'columnHeaderCell',\n                                type: 'string',\n                                index: o,\n                                order: i\n                            };\n                            columnHeaderCell = {'columnHeaderCell': header.title || header.name};\n                            x += drawCell(columnHeaderCell, -1, -1)(d, i, o);\n                            if (x > self.width + self.scrollBox.scrollLeft) {\n                                break;\n                            }\n                        }\n                    }\n                }\n                rowHeaders.forEach(function (rArgs, rhIndex) {\n                    y = rArgs[3];\n                    cellHeight = rArgs[4];\n                    if (rhIndex === self.frozenRow) {\n                        self.ctx.save();\n                        radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                        self.ctx.clip();\n                    }\n                    drawRowHeader(rArgs[0], rArgs[1], rArgs[2]);\n                });\n                self.ctx.restore();\n                if (self.attributes.showColumnHeaders) {\n                    x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    y = 0;\n                    // cell height might have changed during drawing\n                    cellHeight = self.getColumnHeaderCellHeight();\n                    drawHeaderColumnRange(self.scrollIndexLeft, g);\n                    nonFrozenHeaderWidth = x;\n                    x = self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    drawHeaderColumnRange(0, self.frozenColumn);\n                    // fill in the space right of the headers\n                    x = nonFrozenHeaderWidth;\n                    if (x < w) {\n                        c = {\n                            name: '',\n                            width: self.style.scrollBarWidth,\n                            style: 'columnHeaderCellCap',\n                            isColumnHeaderCell: true,\n                            isColumnHeaderCellCap: true,\n                            type: 'string',\n                            index: s.length\n                        };\n                        drawCell({endCap: ''}, -1, -1)(c, -1, -1);\n                    }\n                    // fill in the space right of the headers\n                    if (self.attributes.showRowHeaders) {\n                        cornerCell = {'cornerCell': '' };\n                        x = 0;\n                        c = {\n                            name: 'cornerCell',\n                            width: self.style.rowHeaderCellWidth,\n                            style: 'cornerCell',\n                            type: 'string',\n                            index: -1\n                        };\n                        drawCell(cornerCell, -1, -1)(c, -1, -1);\n                    }\n                }\n            }\n            function drawRow(r, d) {\n                var i, treeHeight, rowSansTreeHeight, o, g = s.length;\n                if (y - (cellHeight * 2) > h) {\n                    return false;\n                }\n                rd = data[r];\n                rowOpen = self.openChildren[r];\n                rowSansTreeHeight = (self.sizes.rows[r] || self.style.cellHeight) * self.scale;\n                treeHeight = (rowOpen ? self.sizes.trees[r] : 0) * self.scale;\n                rowHeight = (rowSansTreeHeight + treeHeight);\n                if (y < -rowHeight) {\n                    return false;\n                }\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                cellHeight = rowHeight;\n                //draw normal columns\n                for (o = (self.scrollIndexLeft); o < g; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        self.scrollIndexRight = o;\n                        self.scrollPixelRight = x;\n                        break;\n                    }\n                }\n                //draw frozen columns\n                x = 0;\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                for (o = 0; o < self.frozenColumn; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        break;\n                    }\n                }\n                self.lastFrozenColumnPixel = x;\n                // cell height might have changed during drawing\n                cellHeight = rowHeight;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                // don't draw a tree for the new row\n                treeGrid = self.childGrids[r];\n                if (r !== data.length && rowOpen) {\n                    treeGrid.visible = true;\n                    treeGrid.parentNode = {\n                        offsetTop: y + rowSansTreeHeight + self.canvasOffsetTop,\n                        offsetLeft: rowHeaderCellWidth - 1 + self.canvasOffsetLeft,\n                        offsetHeight: treeHeight,\n                        offsetWidth: self.width - rowHeaderCellWidth - self.style.scrollBarWidth - 1,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: self.style,\n                        nodeType: 'canvas-datagrid-tree',\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        rowIndex: r\n                    };\n                    self.visibleCells.unshift({\n                        rowIndex: r,\n                        columnIndex: 0,\n                        y: treeGrid.parentNode.offsetTop,\n                        x: treeGrid.parentNode.offsetLeft,\n                        height: treeGrid.height,\n                        width: treeGrid.width,\n                        style: 'tree-grid',\n                        type: treeGrid.parentNode.nodeType\n                    });\n                    treeGrid.draw();\n                } else if (treeGrid) {\n                    treeGrid.parentNode.offsetHeight = 0;\n                    delete self.sizes.trees[r];\n                }\n                rowHeaders.push([rd, r, d, y, rowHeight]);\n                self.visibleRowHeights[r] = rowHeight;\n                y += cellHeight + (bc ? 0 : self.style.cellBorderWidth);\n                return true;\n            }\n            function initDraw() {\n                self.visibleRows = [];\n                s = self.getSchema();\n                self.visibleCells = [];\n                self.canvasOffsetTop = self.isChildGrid ? self.parentNode.offsetTop : 0;\n                self.canvasOffsetLeft = self.isChildGrid ? self.parentNode.offsetLeft : 0;\n                h = self.height;\n                w = self.width;\n            }\n            function drawBackground() {\n                radiusRect(0, 0, w, h, 0);\n                self.ctx.clip();\n                self.ctx.fillStyle = self.style.gridBackgroundColor;\n                fillRect(0, 0, w, h);\n            }\n            function drawFrozenRows() {\n                var n, ln = Math.min(data.length, self.frozenRow);\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                y = columnHeaderCellHeight;\n                for (r = 0; r < ln; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.allowFreezingRows) {\n                    // HACK great, another stupid magic number.\n                    // Background will appear as a 0.5px artifact behind the row freeze bar without this hack\n                    y += self.style.frozenMarkerBorderWidth + self.style.frozenMarkerWidth - 0.4999999999;\n                }\n                self.lastFrozenRowPixel = y;\n            }\n            function drawRows() {\n                self.ctx.save();\n                if (self.frozenRow > 0) {\n                    radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                    self.ctx.clip();\n                }\n                var o, n, i, g = s.length;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                if (!self.attributes.snapToRow) {\n                    y += -self.scrollBox.scrollTop + self.scrollPixelTop + self.style.cellBorderWidth;\n                }\n                for (r = self.frozenRow + self.scrollIndexTop; r < l; r += 1) {\n                    n = self.orders.rows[r];\n                    self.scrollIndexBottom = r;\n                    self.scrollPixelBottom = y;\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.showNewRow) {\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    rowHeight = cellHeight = self.style.cellHeight;\n                    rowOpen = false;\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        x += drawCell(self.newRow, data.length, data.length)(s[i], i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    rowHeaders.push([self.newRow, data.length, data.length, y, rowHeight]);\n                }\n                self.ctx.restore();\n            }\n            function drawMoveMarkers() {\n                if (!self.movingSelection) { return; }\n                self.ctx.lineWidth = self.style.moveOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.moveOverlayBorderColor;\n                self.ctx.setLineDash(self.style.moveOverlayBorderSegments);\n                moveBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n                self.ctx.setLineDash([]);\n            }\n            function drawReorderMarkers() {\n                if (!self.reorderObject) { return; }\n                var b = {\n                        height: self.reorderObject.height,\n                        width: self.reorderObject.width,\n                        x: self.reorderObject.x + self.reorderObject.dragOffset.x,\n                        y: self.reorderObject.y + self.reorderObject.dragOffset.y\n                    },\n                    m = {\n                        width: w,\n                        height: h,\n                        x: 0,\n                        y: 0\n                    };\n                self.ctx.fillStyle = self.style.reorderMarkerBackgroundColor;\n                self.ctx.lineWidth = self.style.reorderMarkerBorderWidth;\n                self.ctx.strokeStyle = self.style.reorderMarkerBorderColor;\n                if (self.dragMode === 'row-reorder') {\n                    b.width = w;\n                    b.x = 0;\n                    m.width = w;\n                    m.height = self.currentCell.height;\n                    m.y = self.currentCell.y;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.rowIndex !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex > -1\n                            && self.currentCell.rowIndex < l) {\n                        addBorderLine(m, self.reorderTarget.sortRowIndex > self.reorderObject.sortRowIndex ? 'b' : 't');\n                    }\n                } else if (self.dragMode === 'column-reorder' && self.reorderObject) {\n                    b.height = h;\n                    b.y = 0;\n                    m.height = h;\n                    m.width = self.currentCell.width;\n                    m.y = 0;\n                    m.x = self.currentCell.x;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.sortColumnIndex !== self.reorderObject.sortColumnIndex\n                            && self.currentCell.sortColumnIndex > -1\n                            && self.currentCell.sortColumnIndex < s.length) {\n                        addBorderLine(m, self.reorderTarget.columnIndex > self.reorderObject.columnIndex ? 'r' : 'l');\n                    }\n                }\n            }\n            function drawBorder() {\n                self.ctx.lineWidth = self.style.gridBorderWidth;\n                self.ctx.strokeStyle = self.style.gridBorderColor;\n                strokeRect(0, 0, self.width, self.height);\n            }\n            function drawSelectionBorders() {\n                self.ctx.lineWidth = self.style.selectionOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.selectionOverlayBorderColor;\n                function dsb(c) {\n                    addBorderLine(c[0], c[1]);\n                }\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.save();\n                clipFrozenArea(0);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(1);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(2);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n            }\n            function drawSelectionHandles() {\n                if (self.mobile || self.attributes.allowMovingSelection) {\n                    self.ctx.lineWidth = self.style.selectionHandleBorderWidth;\n                    self.ctx.strokeStyle = self.style.selectionHandleBorderColor;\n                    self.ctx.fillStyle = self.style.selectionHandleColor;\n                    selectionHandles.forEach(function (c) {\n                        addselectionHandle(c[0], c[1]);\n                        var az = self.attributes.touchSelectHandleZone / 2,\n                            ax = c[0].x + (c[1] === 'tl' || c[1] === 'bl' ? 0 : c[0].width) - az,\n                            ay = c[0].y + (c[1] === 'bl' || c[1] === 'br' ? c[0].height : 0) - az;\n                        self.visibleCells.unshift({\n                            x: ax,\n                            y: ay,\n                            height: self.style.selectionHandleSize + az,\n                            width: self.style.selectionHandleSize + az,\n                            style: 'selection-handle-' + c[1]\n                        });\n                    });\n                }\n            }\n            function drawActiveCell() {\n                if (!aCell) { return; }\n                self.ctx.save();\n                var cl = self.activeCell.columnIndex + 1 > self.frozenColumn || self.activeCell.rowIndex + 1 > self.frozenRow,\n                    acx = cl ? self.lastFrozenColumnPixel : 0,\n                    acy = cl ? self.lastFrozenRowPixel : 0,\n                    acw = cl ? self.width - self.lastFrozenColumnPixel : self.width,\n                    ach = cl ? self.height - self.lastFrozenRowPixel : self.height;\n                radiusRect(acx, acy, acw, ach, 0);\n                self.ctx.clip();\n                if (self.attributes.selectionMode === 'row') {\n                    if (self.activeCell && self.activeCell.rowIndex === aCell.rowIndex) {\n                        self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                        self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                        strokeRect(0, aCell.y, self.getHeaderWidth() + rowHeaderCellWidth, self.visibleRowHeights[aCell.rowIndex]);\n                    }\n                } else {\n                    self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                    self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                    strokeRect(aCell.x, aCell.y, aCell.width, aCell.height);\n                }\n                self.ctx.restore();\n            }\n            function drawFrozenMarkers() {\n                var my = self.lastFrozenRowPixel - self.style.frozenMarkerWidth,\n                    mx = self.lastFrozenColumnPixel - self.style.frozenMarkerBorderWidth,\n                    xHover = self.currentCell && self.currentCell.style === 'frozen-row-marker',\n                    yHover = self.currentCell && self.currentCell.style === 'frozen-column-marker';\n                self.ctx.lineWidth = self.style.frozenMarkerBorderWidth;\n                if (self.attributes.allowFreezingColumns) {\n                    self.ctx.fillStyle = yHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = yHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    strokeRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    self.visibleCells.unshift({\n                        x: mx,\n                        y: 0,\n                        height: self.height,\n                        width: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        style: 'frozen-column-marker'\n                    });\n                }\n                if (self.attributes.allowFreezingRows) {\n                    self.ctx.fillStyle = xHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = xHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    strokeRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    self.visibleCells.unshift({\n                        x: 0,\n                        y: my,\n                        height: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        width: self.width,\n                        style: 'frozen-row-marker'\n                    });\n                }\n                if (self.freezeMarkerPosition) {\n                    self.ctx.fillStyle = self.style.frozenMarkerActiveColor;\n                    self.ctx.strokeStyle = self.style.frozenMarkerActiveBorderColor;\n                    if (self.dragMode === 'frozen-column-marker') {\n                        fillRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                        strokeRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                    } else {\n                        fillRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                        strokeRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                    }\n                }\n            }\n            function drawPerfLines() {\n                if (!self.attributes.showPerformance) { return; }\n                var pw = 250,\n                    px = self.width - pw - self.style.scrollBarWidth - (self.style.scrollBarBorderWidth * 2),\n                    py = columnHeaderCellHeight,\n                    ph = 100;\n                if (scrollDebugCounters.length === 0) { scrollDebugCounters = fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (touchPPSCounters.length === 0) { touchPPSCounters = fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (entityCount.length === 0) { entityCount = fillArray(0, perfWindowSize, 1, 0); }\n                self.ctx.lineWidth = 0.5;\n                function dpl(name, perfArr, arrIndex, max, color, useAbs, rowIndex) {\n                    var v;\n                    drawPerfLine(pw, ph, px, py, perfArr, arrIndex, max, color, useAbs);\n                    self.ctx.fillStyle = color;\n                    fillRect(3 + px, py + 9 + (rowIndex * 11), 8, 8);\n                    self.ctx.fillStyle = self.style.debugPerfChartTextColor;\n                    v = arrIndex !== undefined ? perfArr[0][arrIndex] : perfArr[0];\n                    fillText(name + ' ' + (isNaN(v) ? 0 : v).toFixed(3), 14 + px, py + 16 + (rowIndex * 11));\n                }\n                self.ctx.textAlign = 'left';\n                self.ctx.font = self.style.debugFont;\n                self.ctx.fillStyle = self.style.debugPerfChartBackground;\n                fillRect(px, py, pw, ph);\n                [['Scroll Height', scrollDebugCounters, 0, self.scrollBox.scrollHeight, self.style.debugScrollHeightColor, false],\n                    ['Scroll Width', scrollDebugCounters, 1, self.scrollBox.scrollWidth, self.style.debugScrollWidthColor, false],\n                    ['Performance', perfCounters, undefined, 200, self.style.debugPerformanceColor, false],\n                    ['Entities', entityCount, undefined, 1500, self.style.debugEntitiesColor, false],\n                    ['TouchPPSX', touchPPSCounters, 0, 1000, self.style.debugTouchPPSXColor, true],\n                    ['TouchPPSY', touchPPSCounters, 1, 1000, self.style.debugTouchPPSYColor, true]\n                    ].forEach(function (i, index) {\n                    i.push(index);\n                    dpl.apply(null, i);\n                });\n                self.ctx.fillStyle = self.style.debugPerfChartBackground;\n                entityCount.pop();\n                entityCount.unshift(self.visibleCells.length);\n                scrollDebugCounters.pop();\n                scrollDebugCounters.unshift([self.scrollBox.scrollTop, self.scrollBox.scrollLeft]);\n                touchPPSCounters.pop();\n                touchPPSCounters.unshift([self.yPPS, self.xPPS]);\n            }\n            function drawDebug() {\n                self.ctx.save();\n                var d;\n                if (self.attributes.showPerformance || self.attributes.debug) {\n                    if (perfCounters.length === 0) { perfCounters = fillArray(0, perfWindowSize, 1, 0); }\n                    perfCounters.pop();\n                    perfCounters.unshift(performance.now() - p);\n                }\n                if (!self.attributes.debug) {\n                    self.ctx.restore();\n                    return;\n                }\n                self.ctx.font = self.style.debugFont;\n                d = {};\n                d.perf = (perfCounters.reduce(function (a, b) {\n                    return a + b;\n                }, 0) / Math.min(drawCount, perfCounters.length)).toFixed(1);\n                d.perfDelta = perfCounters[0].toFixed(1);\n                d.frozenColumnsWidth = getFrozenColumnsWidth();\n                d.htmlImages = Object.keys(self.htmlImageCache).length;\n                d.reorderObject = 'x: ' + (self.reorderObject || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderObject || {rowIndex: 0}).rowIndex;\n                d.reorderTarget = 'x: ' + (self.reorderTarget || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderTarget || {rowIndex: 0}).rowIndex;\n                d.scale = self.scale;\n                d.startScale = self.startScale;\n                d.scaleDelta = self.scaleDelta;\n                d.zoomDeltaStart = self.zoomDeltaStart;\n                d.touchLength = self.touchLength;\n                d.touches = 'y0: ' + (self.touchPosition || {y: 0}).y + ' y1: ' + (self.touchPosition1 || {y: 0}).y;\n                d.scrollBox = self.scrollBox.toString();\n                d.scrollIndex = 'x: ' + self.scrollIndexLeft + ', y: ' + self.scrollIndexTop;\n                d.scrollPixel = 'x: ' + self.scrollPixelLeft + ', y: ' + self.scrollPixelTop;\n                d.canvasOffset = 'x: ' + self.canvasOffsetLeft + ', y: ' + self.canvasOffsetTop;\n                d.touchDelta = 'x: ' + self.touchDelta.x + ', y: ' + self.touchDelta.y;\n                d.touchAnimateTo = 'x: ' + self.touchAnimateTo.x + ', y: ' + self.touchAnimateTo.y;\n                d.scrollAnimation = 'x: ' + self.scrollAnimation.x + ', y: ' + self.scrollAnimation.y;\n                d.touchPPS = 'x: ' + self.xPPS + ', y: ' + self.yPPS;\n                d.touchPPST = 'x: ' + self.xPPST + ', y: ' + self.yPPST;\n                d.touchDuration = self.touchDuration;\n                d.pointerLockPosition =  self.pointerLockPosition ?\n                        self.pointerLockPosition.x + ', ' + self.pointerLockPosition.y : '';\n                d.size = 'w: ' + self.width + ', h: ' + self.height;\n                d.mouse = 'x: ' + self.mouse.x + ', y: ' + self.mouse.y;\n                d.touch = !self.touchStart\n                    ? '' : 'x: ' + self.touchStart.x + ', y: ' + self.touchStart.y;\n                d.entities = self.visibleCells.length;\n                d.hasFocus = self.hasFocus;\n                d.dragMode = self.dragMode;\n                if (self.currentCell) {\n                    d.columnIndex = self.currentCell.columnIndex;\n                    d.rowIndex = self.currentCell.rowIndex;\n                    d.sortColumnIndex = self.currentCell.sortColumnIndex;\n                    d.sortRowIndex = self.currentCell.sortRowIndex;\n                    d.context = self.currentCell.context;\n                    d.dragContext = self.currentCell.dragContext;\n                    d.style = self.currentCell.style;\n                    d.type = self.currentCell.type;\n                }\n                self.ctx.textAlign = 'right';\n                self.ctx.fillStyle = self.style.debugBackgroundColor;\n                fillRect(0, 0, self.width, self.height);\n                Object.keys(d).forEach(function (key, index) {\n                    var m = key + ': ' + d[key],\n                        lh = 14;\n                    self.ctx.fillStyle = self.style.debugColor;\n                    fillText(m, w - 20, (self.attributes.showPerformance ? 140 : 24) + (index * lh));\n                });\n                self.ctx.restore();\n            }\n            self.ctx.save();\n            initDraw();\n            drawBackground();\n            drawFrozenRows();\n            drawRows();\n            drawActiveCell();\n            drawHeaders();\n            drawFrozenMarkers();\n            drawSelectionHandles();\n            drawReorderMarkers();\n            drawMoveMarkers();\n            drawBorder();\n            drawSelectionBorders();\n            drawScrollBars();\n            if (checkScrollHeight) {\n                self.resize(true);\n            }\n            drawDebug();\n            drawPerfLines();\n            if (self.dispatchEvent('afterdraw', {})) { return; }\n            self.ctx.restore();\n        };\n    };\n});\n","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine(['./defaults'], function (defaults) {\n    'use strict';\n    return function () {\n        var typeMap, component = {};\n        component.dehyphenateProperty = function hyphenateProperty(prop) {\n            prop = prop.replace('--cdg-', '');\n            var p = '', nextLetterCap;\n            Array.prototype.forEach.call(prop, function (char) {\n                if (nextLetterCap) {\n                    nextLetterCap = false;\n                    p += char.toUpperCase();\n                    return;\n                }\n                if (char === '-') {\n                    nextLetterCap = true;\n                    return;\n                }\n                p += char;\n            });\n            return p;\n        };\n        component.hyphenateProperty = function hyphenateProperty(prop, cust) {\n            var p = '';\n            Array.prototype.forEach.call(prop, function (char) {\n                if (char === char.toUpperCase()) {\n                    p += '-' + char.toLowerCase();\n                    return;\n                }\n                p += char;\n            });\n            return (cust ? '--cdg-' : '') + p;\n        };\n        function getDefaultItem(base, item) {\n            var i = {},\n                r;\n            defaults(i);\n            r = i.defaults[base].filter(function (i) {\n                return i[0].toLowerCase() === item.toLowerCase()\n                    || component.hyphenateProperty(i[0]) === item.toLowerCase()\n                    || component.hyphenateProperty(i[0], true) === item.toLowerCase();\n            })[0];\n            return r;\n        }\n        component.applyComponentStyle = function (supressChangeAndDrawEvents, intf) {\n            if (!intf.isComponent) { return; }\n            var cStyle = window.getComputedStyle(intf.tagName === 'CANVAS-DATAGRID' ? intf : intf.canvas, null),\n                defs = {};\n            intf.computedStyle = cStyle;\n            defaults(defs);\n            defs = defs.defaults.styles;\n            defs.forEach(function (def) {\n                var val;\n                val = cStyle.getPropertyValue(component.hyphenateProperty(def[0], true));\n                if (val === \"\") {\n                    val = cStyle.getPropertyValue(component.hyphenateProperty(def[0], false));\n                }\n                if (val !== \"\" && typeof val === 'string') {\n                    intf.setStyleProperty(def[0], typeMap[typeof def[1]](val\n                        .replace(/^\\s+/, '').replace(/\\s+$/, ''), def[1]), true);\n                }\n            });\n            if (!supressChangeAndDrawEvents && intf.dispatchEvent) {\n                requestAnimationFrame(function () { intf.resize(true); });\n                intf.dispatchEvent('stylechanged', intf.style);\n            }\n        };\n        typeMap = {\n            data: function (strData) {\n                try {\n                    return JSON.parse(strData);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid data.');\n                }\n            },\n            schema: function (strSchema) {\n                try {\n                    return JSON.parse(strSchema);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid schema attribute.');\n                }\n            },\n            number: function (strNum, def) {\n                var n = parseInt(strNum, 10);\n                return isNaN(n) ? def : n;\n            },\n            boolean: function (strBool) {\n                return (/true/i).test(strBool);\n            },\n            string: function (str) {\n                return str;\n            }\n        };\n        component.getObservableAttributes = function () {\n            var i = {}, attrs = ['data', 'schema', 'style', 'className', 'name'];\n            defaults(i);\n            i.defaults.attributes.forEach(function (attr) {\n                attrs.push(attr[0].toLowerCase());\n            });\n            return attrs;\n        };\n        component.disconnectedCallback = function () {\n            this.connected = false;\n        };\n        component.connectedCallback = function () {\n            var intf = this;\n            intf.connected = true;\n            component.observe(intf);\n            component.applyComponentStyle(true, intf);\n            intf.resize(true);\n        };\n        component.adoptedCallback = function () {\n            this.resize();\n        };\n        component.attributeChangedCallback = function (attrName, oldVal, newVal) {\n            var tfn, intf = this, def;\n            if (attrName === 'style') {\n                component.applyComponentStyle(false, intf);\n                return;\n            }\n            if (attrName === 'data') {\n                if (intf.dataType === 'application/x-canvas-datagrid') {\n                    intf.dataType = 'application/json+x-canvas-datagrid';\n                }\n                intf.args.data = newVal;\n                return;\n            }\n            if (attrName === 'schema') {\n                intf.args.schema = typeMap.schema(newVal);\n                return;\n            }\n            if (attrName === 'name') {\n                intf.name = newVal;\n                return;\n            }\n            if (attrName === 'class' || attrName === 'className') {\n                return;\n            }\n            def = getDefaultItem('attributes', attrName);\n            if (def) {\n                tfn = typeMap[typeof def[1]];\n                intf.attributes[def[0]] = tfn(newVal);\n                return;\n            }\n            if (/^on/.test(attrName)) {\n                intf.addEventListener('on' + attrName, function (e) {\n                    eval(newVal);\n                });\n            }\n            return;\n        };\n        component.observe = function (intf) {\n            var observer;\n            if (!window.MutationObserver) { return; }\n            intf.applyComponentStyle = function () { component.applyComponentStyle(false, intf); intf.resize(); };\n            /**\n             * Applies the computed css styles to the grid.  In some browsers, changing directives in attached style sheets does not automatically update the styles in this component.  It is necessary to call this method to update in these cases.\n             * @memberof canvasDatagrid\n             * @name applyComponentStyle\n             * @method\n             */\n            observer = new window.MutationObserver(function (mutations) {\n                var checkInnerHTML, checkStyle;\n                Array.prototype.forEach.call(mutations, function (mutation) {\n                    if (mutation.attributeName === 'class'\n                            || mutation.attributeName === 'style') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.target.parentNode\n                            && mutation.target.parentNode.nodeName === 'STYLE') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.addedNodes.length > 0 || mutation.type === 'characterData') {\n                        checkInnerHTML = true;\n                    }\n                });\n                if (checkStyle) {\n                    intf.applyComponentStyle(false, intf);\n                }\n                if (checkInnerHTML) {\n                    if (intf.dataType === 'application/x-canvas-datagrid') {\n                        intf.dataType = 'application/json+x-canvas-datagrid';\n                    }\n                    intf.data = intf.innerHTML;\n                }\n            });\n            observer.observe(intf, { characterData: true, childList: true, attributes: true, subtree: true });\n            Array.prototype.forEach.call(document.querySelectorAll('style'), function (el) {\n                observer.observe(el, { characterData: true, childList: true, attributes: true, subtree: true });\n            });\n        };\n        return component;\n    };\n});","/*jslint browser: true, unparam: true, todo: true, evil: true*/\n/*globals Reflect: false, HTMLElement: true, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([\n    './component',\n    './defaults',\n    './draw',\n    './events',\n    './touch',\n    './intf',\n    './contextMenu',\n    './dom',\n    './publicMethods'\n], function context(component) {\n    'use strict';\n    component = component();\n    var modules = Array.prototype.slice.call(arguments);\n    function Grid(args) {\n        args = args || {};\n        var self = {};\n        self.isComponent = args.component === undefined;\n        self.isChildGrid = args.parentNode && /canvas-datagrid-(cell|tree)/.test(args.parentNode.nodeType);\n        if (self.isChildGrid) {\n            self.intf = {};\n        } else {\n            self.intf = self.isComponent ? eval('Reflect.construct(HTMLElement, [], new.target)')\n                : document.createElement('canvas');\n        }\n        self.args = args;\n        self.intf.args = args;\n        self.applyComponentStyle = component.applyComponentStyle;\n        self.hyphenateProperty = component.hyphenateProperty;\n        self.dehyphenateProperty = component.dehyphenateProperty;\n        self.createGrid = function grid(args) {\n            args.component = false;\n            return new Grid(args);\n        };\n        modules.forEach(function (module) {\n            module(self);\n        });\n        if (self.isChildGrid) {\n            self.shadowRoot = args.parentNode.shadowRoot;\n            self.parentNode = args.parentNode;\n        } else if (self.intf.createShadowRoot) {\n            self.shadowRoot = self.intf.attachShadow({mode: 'open'});\n            self.parentNode = self.shadowRoot;\n        } else {\n            self.parentNode = self.intf;\n        }\n        self.init();\n        return self.intf;\n    }\n    if (window.HTMLElement) {\n        Grid.prototype = Object.create(window.HTMLElement.prototype);\n    }\n    // export web component\n    if (window.customElements) {\n        Grid.observedAttributes = component.getObservableAttributes();\n        Grid.prototype.disconnectedCallback = component.disconnectedCallback;\n        Grid.prototype.attributeChangedCallback = component.attributeChangedCallback;\n        Grid.prototype.connectedCallback = component.connectedCallback;\n        Grid.prototype.adoptedCallback = component.adoptedCallback;\n        window.customElements.define('canvas-datagrid', Grid);\n    }\n    // export global\n    if (window && !window.canvasDatagrid && !window.require) {\n        window.canvasDatagrid = function (args) { return new Grid(args); };\n    }\n    // export amd loader\n    module.exports = function grid(args) {\n        args = args || {};\n        var i, tKeys = ['style', 'formatters', 'sorters', 'filters',\n                    'treeGridAttributes', 'cellGridAttributes', 'data', 'schema'];\n        if (window.customElements && document.body.createShadowRoot) {\n            i = document.createElement('canvas-datagrid');\n            Object.keys(args).forEach(function (argKey) {\n                // set data and parentNode after everything else\n                if (argKey === 'data') { return; }\n                if (argKey === 'parentNode') { return; }\n                // top level keys in args\n                if (tKeys.indexOf(argKey) !== -1) {\n                    tKeys.forEach(function (tKey) {\n                        if (args[tKey] === undefined || tKey !== argKey) { return; }\n                        if (['formatters', 'sorters', 'filters'].indexOf(argKey) !== -1) {\n                            if (typeof args[tKey] === 'object' && args[tKey] !== null) {\n                                Object.keys(args[tKey]).forEach(function (sKey) {\n                                    i[tKey][sKey] = args[tKey][sKey];\n                                });\n                            }\n                        } else {\n                            i[tKey] = args[tKey];\n                        }\n                    });\n                    return;\n                }\n                // all others are attribute level keys\n                i.attributes[argKey] = args[argKey];\n            });\n            if (args.data) {\n                i.data = args.data;\n            }\n            // add to the dom very last to avoid redraws\n            if (args.parentNode) {\n                args.parentNode.appendChild(i);\n            }\n            return i;\n        }\n        args.component = false;\n        i = new Grid(args);\n        if (args.parentNode && args.parentNode.appendChild) {\n            args.parentNode.appendChild(i);\n        }\n        return i;\n    };\n    return module.exports;\n});\n"],"sourceRoot":""}