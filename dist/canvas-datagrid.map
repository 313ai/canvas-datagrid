{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///canvas-datagrid.js","webpack:///webpack/bootstrap dc398fbf73f59d1a7e20","webpack:///./lib/main.js","webpack:///./lib/defaults.js","webpack:///./lib/draw.js","webpack:///./lib/events.js","webpack:///./lib/intf.js","webpack:///./lib/contextMenu.js","webpack:///./lib/dom.js","webpack:///./lib/publicMethods.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","undefined","context","defaults","hyphenateProperty","prop","cust","Array","forEach","char","toUpperCase","toLowerCase","getDefaultItem","base","item","filter","Grid","args","self","isComponent","component","intf","eval","createGrid","init","getObservableAttributes","attrs","attributes","attr","push","connectedCallback","initialized","parentNode","key","set","value","draw","attributeChangedCallback","attrName","oldVal","newVal","tfn","j","typeMap","style","JSON","parse","stringify","keys","data","schema","slice","arguments","strData","e","Error","fullStyleString","split","sd","indexOf","substring","val","idef","console","warn","replace","strSchema","number","strNum","parseInt","boolean","strBool","test","string","str","window","HTMLElement","create","customElements","observedAttributes","disconnectedCallback","dispose","canvasDatagrid","require","apply","styles","drawOnAllImagesLoaded","loaded","htmlImageCache","html","complete","drawHtml","cell","img","v","innerHTML","formattedValue","x","canvasOffsetLeft","y","canvasOffsetTop","height","width","ctx","drawImage","Image","onload","src","btoa","drawOrderByArrow","fillStyle","columnHeaderOrderByArrowColor","strokeStyle","columnHeaderOrderByArrowBorderColor","beginPath","columnHeaderOrderByArrowMarginLeft","columnHeaderOrderByArrowMarginTop","orderDirection","moveTo","lineTo","columnHeaderOrderByArrowWidth","columnHeaderOrderByArrowHeight","stroke","fill","columnHeaderOrderByArrowMarginRight","drawTreeArrow","treeArrowColor","treeArrowBorderColor","treeArrowMarginLeft","treeArrowMarginTop","openChildren","uniqueId","treeArrowWidth","treeArrowHeight","treeArrowMarginRight","radiusRect","w","h","radius","r","b","quadraticCurveTo","fillRect","strokeRect","fillText","text","addBorderLine","pos","t","addEllipsis","ellipsisCache","measureText","drawText","paddingLeft","paddingTop","paddingRight","paddingBottom","vPos","hPos","orderByArrowWidth","fontHeight","horizontalAlignment","verticalAlignment","perfCounters","drawCount","perfWindowSize","internal","drawCell","rowIndex","rowOrderIndex","header","headerIndex","columnOrderIndex","cellGridAttributes","cellStyle","isHeader","isCorner","isRowHeader","isColumnHeader","selected","selections","hovered","hovers","active","activeCell","columnIndex","isGrid","activeHeader","orders","rows","columns","f","formatters","type","orderByArrowSize","treeArrowSize","cellWidth","sizes","ev","row","columnWidth","cellBorderWidth","visibleRows","dispatchEvent","cx","cy","nodeType","offsetTop","offsetLeft","scrollTop","scrollBox","scrollLeft","cellHeight","offsetWidth","offsetHeight","offsetParent","isHeaderCellCap","rowOpen","sortColumnIndex","sortRowIndex","gridId","parentGrid","title","userHeight","rowHeight","userWidth","cornerCell","visibleCells","unshift","lineWidth","cellHeightWithChildGrid","checkScrollHeight","cellWidthWithChildGrid","rd","save","clip","tree","showRowNumbers","childGrids","saveAppearance","cellGridHeight","grid","visible","orderBy","font","toString","columnFilters","filterTextPrefix","aCell","selectionBorders","length","restore","drawRowHeader","rowData","index","a","showRowHeaders","rowHeaderCell","rowHeaderCellWidth","drawRow","treeHeight","rowSansTreeHeight","g","trees","columnHeaderCellWidth","scrollIndexLeft","scrollPixelLeft","treeGrid","scrollBarWidth","rowHeaders","isChildGrid","requestAnimationFrame","u","currentCell","rowHeaderCellHeight","getRowHeaderCellHeight","getColumnHeaderCellWidth","performance","now","createRowOrders","getVisibleSchema","scale","devicePixelRatio","backgroundColor","scrollPixelTop","scrollIndexTop","showNewRow","newRow","selectionOverlayBorderWidth","selectionOverlayBorderColor","selectionMode","activeCellOverlayBorderWidth","activeCellOverlayBorderColor","getHeaderWidth","columnHeaderCell","rArgs","showColumnHeaders","order","isHeaderCell","endCap","reorderObject","dragOffset","heigth","reorderMarkerBackgroundColor","reorderMarkerBorderWidth","reorderMarkerBorderColor","dragMode","reorderMarkerIndexBorderWidth","reorderMarkerIndexBorderColor","vb","nb","co","isScrollBoxCorner","scrollBarBoxMargin","scrollBarBorderColor","scrollBarBorderWidth","scrollBarBackgroundColor","scrollBoxHeight","scrollHeight","scrollBarBoxWidth","scrollBarBoxColor","scrollBarActiveColor","scrollBarBoxBorderRadius","scrollBoxWidth","scrollWidth","scrollBarCornerBorderColor","scrollBarCornerBackgroundColor","bar","box","resize","gridBorderWidth","gridBorderColor","debug","perf","reduce","toFixed","map","join","htmlImages","scrollIndex","scrollPixel","canvasOffset","pointerLockPosition","size","mouse","touch","touchStart","entities","hasFocus","dragContext","wheeling","touchDelta","touchAnimateTo","touchSigma","xPPS","yPPS","touchingCell","startingCell","animationFrames","getTouchPos","rect","canvas","getBoundingClientRect","touches","clientX","left","clientY","top","calculatePPS","touchCell","clearInterval","touchCalcTimeout","Math","abs","touchDeadZone","getCellAt","mousemove","mousedown","touchstart","NativeEvent","stopPropagation","preventDefault","touchScrollStart","touchmove","clearTimeout","touchTimeout","setTimeout","touchSelectTimeMs","setInterval","touchHaltAnimation","document","body","addEventListener","passive","touchend","touchcancel","easing","touchEndAnimation","scrollTo","touchReleaseAnimationDurationMs","dz","mouseup","beginEditAt","click","removeEventListener","touchReleaseAcceleration","fn","events","sfn","idx","splice","defaultPrevented","drawAfterResize","cellBorder","columnHeaderCellBorder","columnHeaderCellBorderWidth","parentIsCanvas","shadowRootParentElement","parentDOMNode","accumulator","column","hidden","widthBoxRatio","heightBoxRatio","max","scrollBarBoxMinSize","page","pageUpDownOverlap","resizeEditInput","scroll","input","scrollOffset","bx2","getVisibleCellByIndex","editCell","cellPaddingLeft","clipElement","dontDraw","overridePos","contextMenu","getLayerPos","dragBounds","sBounds","delta","ctrl","controlKey","metaKey","persistantSelectionMode","getSchema","previousCell","scrollTimer","isInGrid","cellBoundaryCrossed","draggingItem","scrollModes","dragItem","cursor","selecting","getSelectionBounds","dragStart","dragStartObject","shiftKey","min","bottom","right","ignoreNextClick","selectRow","dragAddToSelection","selectionBounds","selectArea","autoScrollZone","checkSelectionChange","selectionChanged","selectedData","getSelectedData","endEdit","sorters","setFilter","columnHeaderClickBehavior","selectColumn","setActiveCell","treeArrowClickRadius","toggleTree","dragResizeColumn","resizingStartingWidth","resizingStartingHeight","minColumnWidth","minRowHeight","resizeScrollZone","resizeChildGrids","globalRowResize","stopDragResize","setStorageData","scrollGrid","scrollPointerLock","scrollStartMode","movementX","movementY","scrollMode","scrollStart","scrollRepeatRate","selectionScrollIncrement","stopScrollGrid","exitPointerLock","dragReorder","allowColumnReordering","allowRowReordering","source","target","reorderDeadZone","reorderTarget","stopDragReorder","cr","row-reorder","column-reorder","lastMouseDownTarget","button","requestPointerLock","controlInput","focus","keydown","last","cols","keyCode","selectAll","scrollIntoView","selectionFollowsActiveCell","keyup","keypress","dblclick","fitColumnToValues","autosize","scrollWheel","deltaX","deltaY","deltaMode","copy","clipboardData","sData","setData","ctor","storageName","invalidSearchExpClass","localStyleLibraryStorageKey","filters","currentFilter","schemaHashes","uId","changes","expandToRow","col","nodeName","position","ignoreScrollOffset","fillArray","low","high","step","columnHeaderCellHeight","localStorage","setItem","tempSchema","createColumnOrders","applyDefaultValue","defaultValue","createNewRowData","getSchemaNameHash","getBestGuessDataType","columnName","drawChildGrids","gridKey","getClippingRect","ele","boundingRect","eleRect","clipRect","parentRect","Infinity","setTimer","selectionScrollZone","refreshFromOrigialData","originalData","validateColumn","setDefaults","obj1","obj2","def","setAttributes","setStyle","colName","removeChild","eventParent","contextmenu","observer","disconnect","tryLoadStoredOrders","storedSettings","getHeaderByName","getFontHeight","fontStyle","parseFloat","parseFont","initProp","propName","publicStyleKeyIntf","initScrollBox","setDom","appendTo","clearChangeLog","gotoCell","gotoRow","findColumnScrollLeft","findRowScrollTop","findColumnMaxTextLength","disposeContextMenu","isCellVisible","getSchemaFromData","expandTree","collapseTree","insertRow","deleteRow","addRow","insertColumn","deleteColumn","addColumn","setRowHeight","setColumnWidth","resetColumnWidths","resetRowHeights","assertPxColor","clearPxColorAssertions","integerToAlpha","shadowRoot","filterFor","filterRegExp","regEnd","pattern","exec","flags","flagLength","invalidFilterRegEx","RegExp","toLocaleUpperCase","getItem","blur","normalizeDataset","callback","syncFnInvoked","0","isArray","autoResizeColumns","setScrollTop","preventScrollEvent","isNaN","setScrollLeft","sHeight","sWidth","createContextMenu","items","parentContextMenu","createItems","removeChildContext","relatedTarget","container","childMenuArrow","contextItemContainer","children","setAttribute","contextAddCallback","getAttribute","cPos","childContextMenuMarginLeft","childContextMenuMarginTop","createChildContext","createElement","addContent","content","appendChild","createInlineStyle","childContextMenuArrowHTML","clickIndex","Event","checkArrowVisibility","upArrow","downArrow","startHoverScroll","contextHoverScrollAmount","hoverScrollTimeout","contextHoverScrollRateMs","endHoverScroll","selectedIndex","loc","zIndexTop","color","contextMenuArrowColor","el","textAlign","zIndex","inputDropdown","maxHeight","innerHeight","autocompleteBottomMargin","minWidth","contextMenuArrowUpHTML","contextMenuArrowDownHTML","contextMenuWindowMargin","innerWidth","isFinite","createFilterContextMenuItems","checkRegExpErrorState","filterInput","background","contextFilterInputBackground","contextFilterInputColor","contextFilterInvalidRegExpBackground","contextFilterInvalidRegExpColor","fillAutoComplete","autoCompleteItems","maxAutoCompleteItems","disposeAutocomplete","createAutoCompleteContext","iRect","autoCompleteContext","filterContainer","filterLabel","filterAutoCompleteButton","onclick","en","filterOptionText","contextFilterButtonHTML","cf","removeFilterOptionText","addDefaultContextMenuItem","isNormalCell","isBackground","isScrollBar","showFilter","showCopy","copyText","execCommand","showClearSettingsOption","clearSettingsOptionText","allowSorting","showOrderByOption","showOrderByOptionTextAsc","showOrderByOptionTextDesc","contextmenuEvent","createDiposeEvent","contextMenuMarginLeft","contextMenuMarginTop","abort","abortEdit","newValue","oldValue","aborted","editable","enumItems","enu","multiLine","option","valueInEnum","nx","ny","className","css","canvas-datagrid-context-menu-filter-input","verticalAlign","marginLeft","padding","border","contextFilterInputBorder","borderRadius","contextFilterInputBorderRadius","lineHeight","fontWeight","fontFamily","contextFilterInputFontFamily","fontSize","contextFilterInputFontSize","canvas-datagrid-context-menu-filter-button","contextMenuBackground","contextMenuColor","contextFilterButtonBorder","contextFilterButtonBorderRadius","contextMenuFilterButtonFontFamily","contextMenuFilterButtonFontSize","canvas-datagrid-context-child-arrow","cssFloat","childContextMenuArrowColor","contextMenuChildArrowFontSize","contextMenuFontFamily","canvas-datagrid-autocomplete","contextMenuFontSize","contextMenuBorder","contextMenuPadding","contextMenuBorderRadius","opacity","contextMenuOpacity","overflow","canvas-datagrid-autocomplete-item","canvas-datagrid-autocomplete-item:hover","contextMenuHoverBackground","contextMenuHoverColor","canvas-datagrid-canvas","canvas-datagrid","boxSizing","canvas-datagrid-control-input","canvas-datagrid-edit-input","outline","margin","editCellPaddingLeft","editCellFontFamily","editCellFontSize","boxShadow","editCellBoxShadow","editCellBorder","editCellColor","editCellBackgroundColor","appearance","webkitAppearance","mozAppearance","canvas-datagrid-context-menu-item","contextMenuItemMargin","contextMenuItemBorderRadius","canvas-datagrid-context-menu-item:hover","canvas-datagrid-context-menu-label","contextMenuLabelMargin","display","contextMenuLabelDisplay","contextMenuLabelMinWidth","maxWidth","contextMenuLabelMaxWidth","canvas-datagrid-context-menu","canvas-datagrid-invalid-search-regExp","contextMenuFilterInvalidExpresion","onblur","tagName","parentElement","getContext","textBaseline","MutationObserver","mutations","mutation","observe","createShadowRoot","ordA","charCodeAt","ordZ","len","String","fromCharCode","floor","colIndex","applyFilter","isColumnSelected","colIsSelected","shift","supressEvent","addCol","ri","st","dragObject","rowId","childGrid","treeGridHeight","direction","sortFunction","dontSetStorageData","sort","useTouchScrollZones","tsz","touchScrollZone","isVerticalScrollBar","isHorizontalScrollBar","borderResizeZone","allowColumnResize","allowColumnResizeFromCell","allowRowHeaderResize","allowRowResize","allowRowResizeFromCell","maxCol","minCol"," ","bounds","rowHeaderCellFont","autosizePadding","autosizeHeaderCellPadding","rowHeaderCellPaddingRight","rowHeaderCellPaddingLeft","columnHeaderCellFont","headerCellPaddingRight","headerCellPaddingLeft","cellFont","cellPaddingRight","cellAutoResizePadding","total","headerCell","int","asc","localeCompare","date","Date","getTime"],"mappings":"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aACA,YACA,YACA,kBACA,4BACA,sBACA,kCACA,iBACA,gBACA,6BACA,0BACA,oBACA,kBACA,uBACA,wBACA,+BACA,yBACA,yBACA,4BACA,yBACA,sBACA,8BACA,iCACA,aACA,wBACA,yBACA,sBACA,sBACA,wBACA,2BACA,wBACA,+BACA,+BACA,gCACA,sBACA,+BACA,yBACA,mDACA,qDACA,uDACA,iDACA,iCACA,mCACA,wCACA,iCACA,oBACA,0BACA,uBACA,oBACA,gBACA,qCACA,yBACA,6BAEA0D,SACA,uDACA,mDACA,8BACA,uCACA,qCACA,4DACA,4CACA,yDACA,oCACA,8BACA,4BACA,6BACA,2BACA,+DACA,+CACA,mEACA,mDACA,gEACA,gDACA,gCACA,gCACA,sBACA,6CACA,6BACA,iDACA,6CACA,uBACA,iCACA,+BACA,uBACA,kBACA,gCACA,mCACA,sDACA,sCACA,wBACA,sBACA,uBACA,qBACA,yDACA,yCACA,mCACA,+BACA,qDACA,yCACA,mCACA,gCACA,6DACA,yDACA,oCACA,gDACA,2CACA,8BACA,+CACA,kEACA,kDACA,oCACA,kCACA,mCACA,iCACA,+CACA,oBACA,iEACA,0CACA,uCACA,uDACA,gEACA,uCACA,4CACA,8CACA,sCACA,8DACA,6DACA,gDACA,wCACA,sCACA,mDACA,yDACA,kCACA,yCACA,2CACA,mDACA,2CACA,+DACA,uCACA,+BACA,wDACA,iDACA,sCACA,gCACA,2CACA,uCACA,qCACA,oCACA,4BACA,4BACA,8BACA,6BACA,8BACA,uDACA,mDACA,oCACA,sDACA,kDACA,0BACA,oCACA,4BACA,0BACA,6CACA,sBACA,iEACA,0CACA,2DACA,qCACA,yCACA,0CACA,wCACA,qCACA,sBACA,iBACA,oBACA,mBACA,sDACA,kDACA,kCACA,0DACA,uCACA,0DACA,sDACA,+BACA,6CACA,wCACA,2BACA,4CACA,+DACA,+CACA,iCACA,+BACA,gCACA,8BACA,kEACA,qDACA,4CACA,0BACA,kDACA,sDACA,kDA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","file":"canvas-datagrid.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"canvasDatagrid\"] = factory();\n\telse\n\t\troot[\"canvasDatagrid\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"canvasDatagrid\"] = factory();\n\telse\n\t\troot[\"canvasDatagrid\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, evil: true*/\n/*globals Reflect: false, HTMLElement: true, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n    __webpack_require__(1),\n    __webpack_require__(2),\n    __webpack_require__(3),\n    __webpack_require__(4),\n    __webpack_require__(5),\n    __webpack_require__(6),\n    __webpack_require__(7)\n], __WEBPACK_AMD_DEFINE_RESULT__ = function context(defaults) {\n    'use strict';\n    var modules = Array.prototype.slice.call(arguments),\n        typeMap;\n    function hyphenateProperty(prop, cust) {\n        var p = '';\n        Array.prototype.forEach.call(prop, function (char) {\n            if (char === char.toUpperCase()) {\n                p += '-' + char.toLowerCase();\n                return;\n            }\n            p += char;\n        });\n        return (cust ? '-cdg-' : '') + p;\n    }\n    function getDefaultItem(base, item) {\n        var i = {},\n            r;\n        defaults(i);\n        r = i.defaults[base].filter(function (i) {\n            return i[0].toLowerCase() === item.toLowerCase()\n                || hyphenateProperty(i[0]) === item.toLowerCase()\n                || hyphenateProperty(i[0], true) === item.toLowerCase();\n        })[0];\n        return r;\n    }\n    typeMap = {\n        data: function (strData) {\n            try {\n                return JSON.parse(strData);\n            } catch (e) {\n                throw new Error('Cannot read JSON data in canvas-datagrid data attribute.');\n            }\n        },\n        style: function (fullStyleString) {\n            var s = {};\n            fullStyleString.split(';').forEach(function (sd) {\n                if (!sd) { return; }\n                var i = sd.indexOf(':'),\n                    key = sd.substring(0, i),\n                    val = sd.substring(i + 1),\n                    idef = getDefaultItem('styles', key);\n                if (idef === undefined) {\n                    console.warn('Unrecognized style directive', key);\n                    return;\n                }\n                s[idef[0]] = typeMap[typeof idef[1]](val.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, ''));\n            });\n            return s;\n        },\n        schema: function (strSchema) {\n            try {\n                return JSON.parse(strSchema);\n            } catch (e) {\n                throw new Error('Cannot read JSON data in canvas-datagrid schema attribute.');\n            }\n        },\n        number: function (strNum) {\n            return parseInt(strNum, 10);\n        },\n        boolean: function (strBool) {\n            return (/true/i).test(strBool);\n        },\n        string: function (str) {\n            return str;\n        }\n    };\n    function Grid(args) {\n        args = args || {};\n        var self = {};\n        self.isComponent = args.component === undefined;\n        self.intf = self.isComponent ? eval('Reflect.construct(HTMLElement, [], new.target)') : {};\n        self.args = args;\n        self.createGrid = function grid(args) {\n            args.component = false;\n            return new Grid(args);\n        };\n        modules.forEach(function (module) {\n            module(self);\n        });\n        self.intf.args = self.args;\n        self.intf.init = self.init;\n        if (!self.isComponent) {\n            self.init();\n        }\n        return self.intf;\n    }\n    function getObservableAttributes() {\n        var i = {}, attrs = ['style', 'data', 'schema'];\n        defaults(i);\n        i.defaults.attributes.forEach(function (attr) {\n            attrs.push(attr[0].toLowerCase());\n        });\n        return attrs;\n    }\n    function connectedCallback() {\n        var intf = this, s;\n        if (intf.initialized) { return; }\n        intf.initialized = true;\n        intf.args.parentNode = intf;\n        //HACK init() will secretly return the internal reference object.\n        //since init is only run after instantiation in the component version\n        //it won't work in the amd version and won't return self, so it is still\n        //technically private since it's impossible to get at.\n        //this has to be done so intf setters can bet run and alter self without stack overflows\n        s = intf.init();\n        ['style', 'data', 'schema'].forEach(function (key) {\n            Object.defineProperty(intf.args, key, {\n                set: function (value) {\n                    s[key] = value;\n                    intf.draw();\n                },\n                get: function () {\n                    return s[key];\n                }\n            });\n        });\n    }\n    function attributeChangedCallback(attrName, oldVal, newVal) {\n        var tfn, j, s, intf = this;\n        if (attrName === 'style') {\n            j = typeMap.style(newVal);\n            s = intf.args.style ? JSON.parse(JSON.stringify(intf.args.style)) : {};\n            Object.keys(j).forEach(function (key) {\n                s[key] = j[key];\n            });\n            intf.args.style = s;\n            return;\n        }\n        if (attrName === 'data') {\n            intf.args.data = typeMap.data(newVal);\n            return;\n        }\n        if (attrName === 'schema') {\n            intf.args.schema = typeMap.schema(newVal);\n            return;\n        }\n        tfn = typeMap[typeof getDefaultItem('attributes', attrName)[1]];\n        // trim incoming values\n        intf.attributes[attrName] = tfn(newVal);\n        return;\n    }\n    if (window.HTMLElement) {\n        Grid.prototype = Object.create(window.HTMLElement.prototype);\n    }\n    // export web component\n    if (window.customElements) {\n        Grid.observedAttributes = getObservableAttributes();\n        Grid.prototype.disconnectedCallback = function () { this.dispose(); };\n        Grid.prototype.attributeChangedCallback = attributeChangedCallback;\n        Grid.prototype.connectedCallback = connectedCallback;\n        window.customElements.define('canvas-datagrid', Grid);\n    }\n    // export global\n    if (window && !window.canvasDatagrid && !window.require) {\n        window.canvasDatagrid = function (args) { return new Grid(args); };\n    }\n    // export amd loader\n    module.exports = function grid(args) {\n        args = args || {};\n        args.component = false;\n        return new Grid(args);\n    };\n    return module.exports;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        self.defaults = {\n            attributes: [\n                ['name', ''],\n                ['tree', false],\n                ['showNewRow', false],\n                ['treeHorizontalScroll', false],\n                ['saveAppearance', true],\n                ['selectionFollowsActiveCell', false],\n                ['multiLine', false],\n                ['editable', true],\n                ['allowColumnReordering', true],\n                ['allowRowReordering', false],\n                ['allowSorting', true],\n                ['showFilter', true],\n                ['globalRowResize', false],\n                ['pageUpDownOverlap', 1],\n                ['persistantSelectionMode', false],\n                ['selectionMode', 'cell'],\n                ['autoResizeColumns', false],\n                ['allowRowHeaderResize', true],\n                ['allowColumnResize', true],\n                ['allowRowResize', true],\n                ['allowRowResizeFromCell', false],\n                ['allowColumnResizeFromCell', false],\n                ['debug', false],\n                ['borderResizeZone', 10],\n                ['showColumnHeaders', true],\n                ['showRowNumbers', true],\n                ['showRowHeaders', true],\n                ['scrollRepeatRate', 75],\n                ['selectionScrollZone', 20],\n                ['resizeScrollZone', 20],\n                ['contextHoverScrollRateMs', 5],\n                ['contextHoverScrollAmount', 2],\n                ['selectionScrollIncrement', 20],\n                ['reorderDeadZone', 3],\n                ['showClearSettingsOption', true],\n                ['showOrderByOption', true],\n                ['clearSettingsOptionText', 'Clear saved settings'],\n                ['showOrderByOptionTextAsc', 'Order by %s ascending'],\n                ['showOrderByOptionTextDesc', 'Order by %s descending'],\n                ['removeFilterOptionText', 'Remove filter on %s'],\n                ['filterOptionText', 'Filter %s'],\n                ['filterTextPrefix', '(filtered) '],\n                ['touchReleaseAnimationDurationMs', 2000],\n                ['touchReleaseAcceleration', 500],\n                ['touchDeadZone', 3],\n                ['touchSelectTimeMs', 800],\n                ['touchScrollZone', 30],\n                ['copyText', 'Copy'],\n                ['showCopy', true],\n                ['columnHeaderClickBehavior', 'sort'],\n                ['scrollPointerLock', false],\n                ['maxAutoCompleteItems', 200]\n            ],\n            styles: [\n                ['activeCellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['activeCellBorderWidth', 0.25],\n                ['activeCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellFont', '16px sans-serif'],\n                ['activeCellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['activeCellOverlayBorderWidth', 0.5],\n                ['activeCellPaddingBottom', 5],\n                ['activeCellPaddingLeft', 5],\n                ['activeCellPaddingRight', 7],\n                ['activeCellPaddingTop', 5],\n                ['activeCellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['activeCellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['activeColumnHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeColumnHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeRowHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeRowHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['autocompleteBottomMargin', 60],\n                ['autosizeHeaderCellPadding', 8],\n                ['autosizePadding', 5],\n                ['backgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cellAutoResizePadding', 13],\n                ['cellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['cellBorderWidth', 0.5],\n                ['cellColor', 'rgba(0, 0, 0, 1)'],\n                ['cellFont', '16px sans-serif'],\n                ['cellGridHeight', 250],\n                ['cellHeight', 24],\n                ['cellHeightWithChildGrid', 150],\n                ['cellHorizontalAlignment', 'left'],\n                ['cellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['cellPaddingBottom', 5],\n                ['cellPaddingLeft', 5],\n                ['cellPaddingRight', 7],\n                ['cellPaddingTop', 5],\n                ['cellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['cellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['cellVerticalAlignment', 'center'],\n                ['cellWidthWithChildGrid', 250],\n                ['childContextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['childContextMenuArrowHTML', '&#x25BA;'],\n                ['childContextMenuMarginLeft', -15],\n                ['childContextMenuMarginTop', 0],\n                ['columnHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellBorderColor', 'rgba(152, 152, 152, 1)'],\n                ['columnHeaderCellBorderWidth', 0.25],\n                ['columnHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['columnHeaderCellFont', '16px sans-serif'],\n                ['columnHeaderCellHeight', 25],\n                ['columnHeaderCellHorizontalAlignment', 'left'],\n                ['columnHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['columnHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['columnHeaderCellPaddingBottom', 5],\n                ['columnHeaderCellPaddingLeft', 5],\n                ['columnHeaderCellPaddingRight', 7],\n                ['columnHeaderCellPaddingTop', 5],\n                ['columnHeaderCellVerticalAlignment', 'center'],\n                ['columnWidth', 250],\n                ['contextFilterButtonBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterButtonBorderRadius', '3px'],\n                ['contextFilterButtonHTML', '&#x25BC;'],\n                ['contextFilterInputBackground', 'rgba(255,255,255,1)'],\n                ['contextFilterInputBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterInputBorderRadius', '0'],\n                ['contextFilterInputColor', 'rgba(0,0,0,1)'],\n                ['contextFilterInputFontFamily', 'sans-serif'],\n                ['contextFilterInputFontSize', '14px'],\n                ['contextFilterInvalidRegExpBackground', 'rgba(180, 6, 1, 1)'],\n                ['contextFilterInvalidRegExpColor', 'rgba(255, 255, 255, 1)'],\n                ['contextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuArrowDownHTML', '&#x25BC;'],\n                ['contextMenuArrowUpHTML', '&#x25B2;'],\n                ['contextMenuBackground', 'rgba(240, 240, 240, 1)'],\n                ['contextMenuBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextMenuBorderRadius', '3px'],\n                ['contextMenuChildArrowFontSize', '12px'],\n                ['contextMenuColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuFilterButtonFontFamily', 'sans-serif'],\n                ['contextMenuFilterButtonFontSize', '10px'],\n                ['contextMenuFilterInvalidExpresion', 'rgba(237, 155, 156, 1)'],\n                ['contextMenuFontFamily', 'sans-serif'],\n                ['contextMenuFontSize', '16px'],\n                ['contextMenuHoverBackground', 'rgba(182, 205, 250, 1)'],\n                ['contextMenuHoverColor', 'rgba(43, 48, 153, 1)'],\n                ['contextMenuItemBorderRadius', '3px'],\n                ['contextMenuItemMargin', '2px'],\n                ['contextMenuLabelDisplay', 'inline-block'],\n                ['contextMenuLabelMargin', '0 3px 0 0'],\n                ['contextMenuLabelMaxWidth', '700px'],\n                ['contextMenuLabelMinWidth', '75px'],\n                ['contextMenuMarginLeft', 3],\n                ['contextMenuMarginTop', -3],\n                ['contextMenuOpacity', '0.98'],\n                ['contextMenuPadding', '2px'],\n                ['contextMenuWindowMargin', 6],\n                ['cornerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cornerCellBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['editCellBackgroundColor', 'white'],\n                ['editCellBorder', 'solid 1px rgba(110, 168, 255, 1)'],\n                ['editCellBoxShadow', '0 2px 5px rgba(0,0,0,0.4)'],\n                ['editCellColor', 'black'],\n                ['editCellFontFamily', 'sans-serif'],\n                ['editCellFontSize', '16px'],\n                ['editCellPaddingLeft', 4],\n                ['gridBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['gridBorderWidth', 1],\n                ['columnHeaderOrderByArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['columnHeaderOrderByArrowBorderWidth', 1],\n                ['columnHeaderOrderByArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['columnHeaderOrderByArrowHeight', 8],\n                ['columnHeaderOrderByArrowMarginLeft', 0],\n                ['columnHeaderOrderByArrowMarginRight', 5],\n                ['columnHeaderOrderByArrowMarginTop', 6],\n                ['columnHeaderOrderByArrowWidth', 13],\n                ['minColumnWidth', 45],\n                ['minHeight', 24],\n                ['minRowHeight', 24],\n                ['name', 'default'],\n                ['reorderMarkerBackgroundColor', 'rgba(0, 0, 0, 0.1)'],\n                ['reorderMarkerBorderColor', 'rgba(0, 0, 0, 0.2)'],\n                ['reorderMarkerBorderWidth', 1.25],\n                ['reorderMarkerIndexBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['reorderMarkerIndexBorderWidth', 2.75],\n                ['rowHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['rowHeaderCellBorderColor', 'rgba(200, 200, 200, 1)'],\n                ['rowHeaderCellBorderWidth', 1],\n                ['rowHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellFont', '16px sans-serif'],\n                ['rowHeaderCellHeight', 25],\n                ['rowHeaderCellHorizontalAlignment', 'left'],\n                ['rowHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['rowHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['rowHeaderCellPaddingBottom', 5],\n                ['rowHeaderCellPaddingLeft', 5],\n                ['rowHeaderCellPaddingRight', 5],\n                ['rowHeaderCellPaddingTop', 5],\n                ['rowHeaderCellSelectedBackgroundColor', 'rgba(217, 217, 217, 1)'],\n                ['rowHeaderCellSelectedColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellVerticalAlignment', 'center'],\n                ['rowHeaderCellWidth', 57],\n                ['scrollBarActiveColor', 'rgba(125, 125, 125, 1)'],\n                ['scrollBarBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarBorderWidth', 0.5],\n                ['scrollBarBoxBorderRadius', 4.125],\n                ['scrollBarBoxColor', 'rgba(192, 192, 192, 1)'],\n                ['scrollBarBoxMargin', 2],\n                ['scrollBarBoxMinSize', 15],\n                ['scrollBarBoxWidth', 8],\n                ['scrollBarCornerBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarCornerBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarWidth', 11],\n                ['selectionOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionOverlayBorderWidth', 0.75],\n                ['treeArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['treeArrowBorderWidth', 1],\n                ['treeArrowClickRadius', 5],\n                ['treeArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['treeArrowHeight', 8],\n                ['treeArrowMarginLeft', 0],\n                ['treeArrowMarginRight', 5],\n                ['treeArrowMarginTop', 6],\n                ['treeArrowWidth', 13],\n                ['treeGridHeight', 250]\n            ]\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals XMLSerializer: false, define: true, Blob: false, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var perfCounters = [],\n            drawCount = 0,\n            perfWindowSize = 20;\n        self.htmlImageCache = {};\n        function drawOnAllImagesLoaded() {\n            var loaded = true;\n            Object.keys(self.htmlImageCache).forEach(function (html) {\n                if (!self.htmlImageCache[html].complete) {\n                    loaded = false;\n                }\n            });\n            if (loaded) {\n                self.draw();\n            }\n        }\n        function drawHtml(cell) {\n            var img,\n                v = cell.innerHTML || cell.formattedValue,\n                x = cell.x + self.canvasOffsetLeft,\n                y = cell.y + self.canvasOffsetTop;\n            if (self.htmlImageCache[v]) {\n                img = self.htmlImageCache[v];\n                if (img.height !== cell.height || img.width !== cell.width) {\n                    // height and width of the cell has changed, invalidate cache\n                    self.htmlImageCache[v] = undefined;\n                } else {\n                    if (!img.complete) {\n                        return;\n                    }\n                    return self.ctx.drawImage(img, x, y);\n                }\n            }\n            img = new Image(cell.width, cell.height);\n            self.htmlImageCache[v] = img;\n            img.onload = function () {\n                self.ctx.drawImage(img, x, y);\n                drawOnAllImagesLoaded();\n            };\n            img.src = 'data:image/svg+xml;base64,' + btoa(\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + cell.width + '\" height=\"' + cell.height + '\">\\n' +\n                    '<foreignObject class=\"node\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\\n' +\n                    '<body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;padding:0;\">\\n' +\n                    v + '\\n' +\n                    '</body>' +\n                    '</foreignObject>\\n' +\n                    '</svg>\\n'\n            );\n        }\n        function drawOrderByArrow(x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.columnHeaderOrderByArrowColor;\n            self.ctx.strokeStyle = self.style.columnHeaderOrderByArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + self.style.columnHeaderOrderByArrowMarginLeft;\n            y = y + self.style.columnHeaderOrderByArrowMarginTop;\n            if (self.orderDirection === 'asc') {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + self.style.columnHeaderOrderByArrowWidth, y);\n                self.ctx.lineTo(x + (self.style.columnHeaderOrderByArrowWidth * 0.5), y + self.style.columnHeaderOrderByArrowHeight);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y + self.style.columnHeaderOrderByArrowHeight);\n                self.ctx.lineTo(x + self.style.columnHeaderOrderByArrowWidth, y + self.style.columnHeaderOrderByArrowHeight);\n                self.ctx.lineTo(x + (self.style.columnHeaderOrderByArrowWidth * 0.5), y);\n                self.ctx.lineTo(x, y + self.style.columnHeaderOrderByArrowHeight);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return self.style.columnHeaderOrderByArrowMarginLeft\n                + self.style.columnHeaderOrderByArrowWidth\n                + self.style.columnHeaderOrderByArrowMarginRight;\n        }\n        function drawTreeArrow(cell, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.treeArrowColor;\n            self.ctx.strokeStyle = self.style.treeArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + self.style.treeArrowMarginLeft;\n            y = y + self.style.treeArrowMarginTop;\n            if (self.openChildren[cell.data[self.uniqueId]]) {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + self.style.treeArrowWidth, y);\n                self.ctx.lineTo(x + (self.style.treeArrowWidth * 0.5), y + self.style.treeArrowHeight);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y);\n                self.ctx.lineTo(x + self.style.treeArrowHeight, y + (self.style.treeArrowWidth * 0.5));\n                self.ctx.lineTo(x, y + self.style.treeArrowWidth);\n                self.ctx.lineTo(x, y);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return self.style.treeArrowMarginLeft\n                + self.style.treeArrowWidth\n                + self.style.treeArrowMarginRight;\n        }\n        function radiusRect(x, y, w, h, radius) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            var r = x + w, b = y + h;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x + radius, y);\n            self.ctx.lineTo(r - radius, y);\n            self.ctx.quadraticCurveTo(r, y, r, y + radius);\n            self.ctx.lineTo(r, y + h - radius);\n            self.ctx.quadraticCurveTo(r, b, r - radius, b);\n            self.ctx.lineTo(x + radius, b);\n            self.ctx.quadraticCurveTo(x, b, x, b - radius);\n            self.ctx.lineTo(x, y + radius);\n            self.ctx.quadraticCurveTo(x, y, x + radius, y);\n        }\n        function fillRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillRect(x, y, w, h);\n        }\n        function strokeRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.strokeRect(x, y, w, h);\n        }\n        function fillText(text, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillText(text, x, y);\n        }\n        function addBorderLine(c, pos) {\n            self.ctx.beginPath();\n            var p = {\n                t: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                },\n                r: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                b: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                l: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                }\n            };\n            p[pos]();\n            self.ctx.stroke();\n        }\n        function addEllipsis(text, width) {\n            var c, w = 0;\n            if (self.ellipsisCache[text] && self.ellipsisCache[text][width]) {\n                return self.ellipsisCache[text][width];\n            }\n            //TODO Add ellipsis back when there is a fast way to do it\n            w = self.ctx.measureText(text).width;\n            self.ellipsisCache[text] = self.ellipsisCache[text] || {};\n            c = {value: text, width: w};\n            self.ellipsisCache[text][width] = c;\n            return c;\n        }\n        function drawText(cell) {\n            var paddingLeft = self.style[cell.style + 'PaddingLeft'],\n                paddingTop = self.style[cell.style + 'PaddingTop'],\n                paddingRight = self.style[cell.style + 'PaddingRight'],\n                paddingBottom = self.style[cell.style + 'PaddingBottom'],\n                vPos = paddingTop + cell.height - (cell.height * 0.5),\n                hPos = paddingLeft + cell.treeArrowWidth + cell.orderByArrowWidth;\n            cell.text = addEllipsis(cell.formattedValue, cell.width - paddingRight - paddingLeft);\n            cell.text.height = cell.fontHeight;\n            if (cell.horizontalAlignment === 'right') {\n                hPos = cell.width - cell.text.width - paddingRight;\n            } else if (cell.horizontalAlignment === 'center') {\n                hPos = (cell.width / 2) - (cell.text.width / 2);\n            }\n            if (cell.verticalAlignment === 'top') {\n                vPos = paddingTop + cell.text.height;\n            } else if (cell.verticalAlignment === 'bottom') {\n                vPos = cell.height - paddingBottom - cell.text.height;\n            }\n            cell.text.x = cell.x + hPos;\n            cell.text.y = cell.y + vPos;\n            fillText(cell.text.value, cell.text.x, cell.text.y);\n        }\n        /**\n         * Redraws the grid. No matter what the change, this is the only method required to refresh everything.\n         * @memberof canvasDataGrid\n         * @name draw\n         * @method\n         */\n        self.draw = function (internal) {\n            if (self.dispatchEvent('beforedraw', {})) { return; }\n            if (!self.isChildGrid && (!self.height || !self.width)) {\n                return;\n            }\n            if (self.isChildGrid && internal) {\n                requestAnimationFrame(self.parentGrid.draw);\n                return;\n            }\n            if (self.intf.visible === false) {\n                return;\n            }\n            // initial values\n            var checkScrollHeight, rowHeaderCell, p, cx, cy, treeGrid, rowOpen,\n                rowHeight, cornerCell, y, x, c, h, w, s, r, rd, aCell,\n                selectionBorders = [],\n                rowHeaders = [],\n                l = self.data.length,\n                u = self.currentCell || {},\n                rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth(),\n                cellHeight = self.style.cellHeight;\n            drawCount += 1;\n            p = performance.now();\n            // if data length has changed, there is no way to know\n            if (self.data.length > self.orders.rows.length) {\n                self.createRowOrders();\n            }\n            function drawScrollBars() {\n                var v = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-bar'\n                    },\n                    n = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-bar'\n                    },\n                    vb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-box'\n                    },\n                    nb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-box'\n                    },\n                    co = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        isCorner: true,\n                        isScrollBoxCorner: true,\n                        style: 'scroll-box-corner'\n                    },\n                    m = (self.style.scrollBarBoxMargin * 2),\n                    d = self.style.scrollBarBoxMargin * 0.5;\n                self.ctx.strokeStyle = self.style.scrollBarBorderColor;\n                self.ctx.lineWidth = self.style.scrollBarBorderWidth;\n                // vertical\n                v.x += w - self.style.scrollBarWidth - self.style.scrollBarBorderWidth - d;\n                v.y += rowHeaderCellHeight;\n                v.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                v.height = h - rowHeaderCellHeight - self.style.scrollBarWidth - d - m;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(v.x, v.y, v.width, v.height + m);\n                strokeRect(v.x, v.y, v.width, v.height + m);\n                // vertical box\n                vb.x = v.x + self.style.scrollBarBoxMargin;\n                vb.y = rowHeaderCellHeight + self.style.scrollBarBoxMargin\n                    + ((v.height - self.scrollBox.scrollBoxHeight)\n                        * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight));\n                vb.width = self.style.scrollBarBoxWidth;\n                vb.height = self.scrollBox.scrollBoxHeight;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/vertical/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (vb.height < v.height) {\n                    radiusRect(vb.x, vb.y, vb.width, vb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                // horizontal\n                n.x += columnHeaderCellWidth;\n                n.y += h - self.style.scrollBarWidth - d;\n                n.width = w - self.style.scrollBarWidth - columnHeaderCellWidth - d - m;\n                n.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(n.x, n.y, n.width + m, n.height);\n                strokeRect(n.x, n.y, n.width + m, n.height);\n                // horizontal box\n                nb.y = n.y + self.style.scrollBarBoxMargin;\n                nb.x = columnHeaderCellWidth + self.style.scrollBarBoxMargin\n                    + ((n.width - self.scrollBox.scrollBoxWidth)\n                        * (self.scrollBox.scrollLeft / self.scrollBox.scrollWidth));\n                nb.width = self.scrollBox.scrollBoxWidth;\n                nb.height = self.style.scrollBarBoxWidth;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/horizontal/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (nb.width < n.width) {\n                    radiusRect(nb.x, nb.y, nb.width, nb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                //corner\n                self.ctx.strokeStyle = self.style.scrollBarCornerBorderColor;\n                self.ctx.fillStyle = self.style.scrollBarCornerBackgroundColor;\n                co.x = n.x + n.width + m;\n                co.y = v.y + v.height + m;\n                co.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                co.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                radiusRect(co.x, co.y, co.width, co.height, 0);\n                self.ctx.stroke();\n                self.ctx.fill();\n                self.visibleCells.unshift(v);\n                self.visibleCells.unshift(vb);\n                self.visibleCells.unshift(n);\n                self.visibleCells.unshift(nb);\n                self.visibleCells.unshift(co);\n                self.scrollBox.bar = {\n                    v: v,\n                    h: n\n                };\n                self.scrollBox.box = {\n                    v: vb,\n                    h: nb\n                };\n            }\n            function drawCell(d, rowIndex, rowOrderIndex) {\n                return function drawEach(header, headerIndex, columnOrderIndex) {\n                    var cellStyle = header.style || 'cell',\n                        cellGridAttributes,\n                        cell,\n                        isHeader = /HeaderCell/.test(cellStyle),\n                        isCorner = /cornerCell/.test(cellStyle),\n                        isRowHeader = 'rowHeaderCell' === cellStyle,\n                        isColumnHeader = 'columnHeaderCell' === cellStyle,\n                        selected = self.selections[rowOrderIndex] && self.selections[rowOrderIndex].indexOf(columnOrderIndex) !== -1,\n                        hovered = self.hovers[d[self.uniqueId]] && self.hovers[d[self.uniqueId]].indexOf(columnOrderIndex) !== -1,\n                        active = self.activeCell.rowIndex === rowOrderIndex && self.activeCell.columnIndex === columnOrderIndex,\n                        isGrid = typeof d[header.name] === 'object' && d[header.name] !== null && d[header.name] !== undefined,\n                        activeHeader = (self.orders.rows[self.activeCell.rowIndex] === rowOrderIndex\n                                || self.orders.columns[self.activeCell.columnIndex] === columnOrderIndex)\n                            && (columnOrderIndex === -1 || rowOrderIndex === -1)\n                            ? (isRowHeader ? 'activeRowHeaderCell' : 'activeColumnHeaderCell') : false,\n                        val,\n                        f = self.formatters[header.type || 'string'],\n                        orderByArrowSize = 0,\n                        treeArrowSize = 0,\n                        cellWidth = self.sizes.columns[isRowHeader ? 'cornerCell' : header[self.uniqueId]] || header.width,\n                        ev = {\n                            value: d[header.name],\n                            row: d,\n                            header: header\n                        };\n                    if (cellStyle === 'headerCellCap') {\n                        cellWidth = w - x;\n                    }\n                    // if no data or schema are defined, a width is provided to the stub column\n                    if (cellWidth === undefined) {\n                        cellWidth = self.style.columnWidth;\n                    }\n                    if (x + cellWidth + self.style.cellBorderWidth < 0) {\n                        x += cellWidth + self.style.cellBorderWidth;\n                    }\n                    if (active) {\n                        cellStyle = 'activeCell';\n                    }\n                    if (self.visibleRows.indexOf(rowIndex) === -1 && !isHeader) {\n                        self.visibleRows.push(rowIndex);\n                    }\n                    val = self.dispatchEvent('formatcellvalue', ev);\n                    if (!self.dispatchEvent('beforerendercell', ev)) {\n                        cx = x;\n                        cy = y;\n                        if (cellStyle === 'cornerCell') {\n                            cx = 0;\n                            cy = 0;\n                        } else if (isRowHeader) {\n                            cx = 0;\n                        } else if (isHeader) {\n                            cy = 0;\n                        }\n                        cell = {\n                            type: isGrid ? 'canvas-datagrid-cell' : header.type,\n                            style: cellStyle,\n                            nodeType: 'canvas-datagrid-cell',\n                            x: cx,\n                            y: cy,\n                            horizontalAlignment: self.style[cellStyle + 'HorizontalAlignment'],\n                            verticalAlignment: self.style[cellStyle + 'VerticalAlignment'],\n                            offsetTop: self.canvasOffsetTop + cy,\n                            offsetLeft: self.canvasOffsetLeft + cx,\n                            scrollTop: self.scrollBox.scrollTop,\n                            scrollLeft: self.scrollBox.scrollLeft,\n                            active: active || activeHeader,\n                            hovered: hovered,\n                            selected: selected,\n                            width: cellWidth,\n                            height: cellHeight,\n                            offsetWidth: cellWidth,\n                            offsetHeight: cellHeight,\n                            parentNode: self.intf.parentNode,\n                            offsetParent: self.intf.parentNode,\n                            data: d,\n                            isCorner: isCorner,\n                            isHeader: isHeader,\n                            isColumnHeader: isColumnHeader,\n                            isHeaderCellCap: !!header.isHeaderCellCap,\n                            isRowHeader: isRowHeader,\n                            rowOpen: rowOpen,\n                            header: header,\n                            columnIndex: columnOrderIndex,\n                            rowIndex: rowOrderIndex,\n                            sortColumnIndex: headerIndex,\n                            sortRowIndex: rowIndex,\n                            isGrid: isGrid,\n                            gridId: (self.attributes.name || '') + d[self.uniqueId] + ':' + header[self.uniqueId],\n                            parentGrid: self.intf,\n                            innerHTML: '',\n                            activeHeader: activeHeader,\n                            value: isHeader && !isRowHeader ? (header.title || header.name) : d[header.name]\n                        };\n                        ev.cell = cell;\n                        cell.userHeight = cell.isHeader ? self.sizes.rows[-1] : rowHeight;\n                        cell.userWidth = cell.isHeader ? self.sizes.columns.cornerCell : self.sizes.columns[header[self.uniqueId]];\n                        cell[self.uniqueId] = d[self.uniqueId];\n                        self.visibleCells.unshift(cell);\n                        self.ctx.fillStyle = self.style[cellStyle + 'BackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'BorderColor'];\n                        self.ctx.lineWidth = self.style[cellStyle + 'BorderWidth'];\n                        if (hovered) {\n                            self.ctx.fillStyle = self.style[cellStyle + 'HoverBackgroundColor'];\n                            self.ctx.strokeStyle = self.style[cellStyle + 'HoverBorderColor'];\n                        }\n                        if (selected) {\n                            self.ctx.fillStyle = self.style[cellStyle + 'SelectedBackgroundColor'];\n                            self.ctx.strokeStyle = self.style[cellStyle + 'SelectedBorderColor'];\n                        }\n                        if (activeHeader) {\n                            self.ctx.fillStyle = self.style[activeHeader + 'BackgroundColor'];\n                        }\n                        self.dispatchEvent('rendercell', ev);\n                        if (cell.isGrid) {\n                            if (cell.height !== rowHeight) {\n                                cell.height = rowHeight || self.style.cellHeightWithChildGrid;\n                                checkScrollHeight = true;\n                            }\n                            cell.width = self.sizes.columns[header[self.uniqueId]] || self.style.cellWidthWithChildGrid;\n                        }\n                        if (rowOpen && !cell.isRowHeader) {\n                            cell.height = self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight;\n                        }\n                        if (!cell.isGrid) {\n                            fillRect(cx, cy, cell.width, cell.height);\n                            strokeRect(cx, cy, cell.width, cell.height);\n                        }\n                        self.ctx.save();\n                        radiusRect(cell.x, cell.y, cell.width, cell.height, 0);\n                        self.ctx.clip();\n                        self.dispatchEvent('afterrendercell', ev);\n                        if (cell.height !== cellHeight && !(rowOpen && !cell.isRowHeader)) {\n                            self.sizes.rows[isHeader ? -1 : d[self.uniqueId]] = cell.height;\n                            checkScrollHeight = true;\n                        }\n                        if (cell.width !== cellWidth) {\n                            self.sizes.columns[header[self.uniqueId]] = cell.width;\n                            checkScrollHeight = true;\n                        }\n                        if (isRowHeader && self.attributes.tree) {\n                            if (!self.dispatchEvent('rendertreearrow', ev)) {\n                                treeArrowSize = drawTreeArrow(cell, self.style[cellStyle + 'PaddingLeft'], cy, 0);\n                            }\n                        }\n                        if ((self.attributes.showRowNumbers && isRowHeader)\n                                || !isRowHeader) {\n                            if (cell.isGrid) {\n                                if (!self.childGrids[cell.gridId]) {\n                                    cellGridAttributes = self.args.cellGridAttributes || self.args;\n                                    cellGridAttributes.name = self.attributes.saveAppearance ? cell.gridId : undefined;\n                                    cellGridAttributes.parentNode = cell;\n                                    cellGridAttributes.data = d[header.name];\n                                    self.childGrids[cell.gridId] = self.createGrid(cellGridAttributes);\n                                    self.sizes.rows[rd[self.uniqueId]]\n                                        = self.sizes.rows[rd[self.uniqueId]] || self.style.cellGridHeight;\n                                    checkScrollHeight = true;\n                                }\n                                cell.grid = self.childGrids[cell.gridId];\n                                cell.grid.parentNode = cell;\n                                cell.grid.visible = true;\n                                cell.grid.draw();\n                                self.dispatchEvent('rendercellgrid', ev);\n                            } else {\n                                if (self.childGrids[cell.gridId]) {\n                                    self.childGrids[cell.gridId].parentNode.offsetHeight = 0;\n                                }\n                                if (isHeader && self.orderBy === header.name) {\n                                    if (!self.dispatchEvent('renderorderbyarrow', ev)) {\n                                        orderByArrowSize = drawOrderByArrow(cx + self.style[cellStyle + 'PaddingLeft'], 0);\n                                    }\n                                }\n                                self.ctx.fillStyle = self.style[cellStyle + 'Color'];\n                                if (hovered) {\n                                    self.ctx.fillStyle = self.style[cellStyle + 'HoverColor'];\n                                }\n                                if (selected) {\n                                    self.ctx.fillStyle = self.style[cellStyle + 'SelectedColor'];\n                                }\n                                if (activeHeader) {\n                                    self.ctx.fillStyle = self.style[activeHeader + 'Color'];\n                                }\n                                self.ctx.font = self.style[cellStyle + 'Font'];\n                                cell.fontHeight = self.style[cellStyle + 'FontHeight'];\n                                cell.treeArrowWidth = treeArrowSize;\n                                cell.orderByArrowWidth = orderByArrowSize;\n                                val = val !== undefined ? val : f\n                                    ? f(ev) : '';\n                                if (val === undefined && !f) {\n                                    val = '';\n                                    console.warn('canvas-datagrid: Unknown format '\n                                        + header.type + ' add a cellFormater');\n                                }\n                                cell.formattedValue = ((val !== undefined && val !== null) ? val : '').toString();\n                                if (self.columnFilters && self.columnFilters[val] !== undefined && isHeader) {\n                                    cell.formattedValue = self.attributes.filterTextPrefix + val;\n                                }\n                                if (!self.dispatchEvent('rendertext', ev)) {\n                                    if (cell.innerHTML || header.type === 'html') {\n                                        drawHtml(cell);\n                                    } else {\n                                        drawText(cell);\n                                    }\n                                }\n                            }\n                        }\n                        if (active) {\n                            aCell = cell;\n                        }\n                        if (selected && !isRowHeader) {\n                            if ((!self.selections[cell.rowIndex - 1]\n                                    || self.selections[cell.rowIndex - 1].indexOf(cell.columnIndex) === -1\n                                    || cell.rowIndex === 0)\n                                    && !cell.isHeader) {\n                                selectionBorders.push([cell, 't']);\n                            }\n                            if (!self.selections[cell.rowIndex + 1]\n                                    || self.selections[cell.rowIndex + 1].indexOf(cell.columnIndex) === -1) {\n                                selectionBorders.push([cell, 'b']);\n                            }\n                            if (!self.selections[cell.rowIndex] || cell.columnIndex === 0\n                                    || self.selections[cell.rowIndex].indexOf(cell.columnIndex - 1) === -1) {\n                                selectionBorders.push([cell, 'l']);\n                            }\n                            if (!self.selections[cell.rowIndex] || cell.columnIndex === s.length\n                                    || self.selections[cell.rowIndex].indexOf(cell.columnIndex + 1) === -1) {\n                                selectionBorders.push([cell, 'r']);\n                            }\n                        }\n                        self.ctx.restore();\n                        x += cell.width + self.style.cellBorderWidth;\n                        return cell.width;\n                    }\n                };\n            }\n            function drawRowHeader(rowData, index, rowOrderIndex) {\n                var a;\n                if (self.attributes.showRowHeaders) {\n                    x = 0;\n                    rowHeaderCell = {'rowHeaderCell': index + 1 };\n                    rowHeaderCell[self.uniqueId] = rowData[self.uniqueId];\n                    a = {\n                        name: 'rowHeaderCell',\n                        width: self.style.rowHeaderCellWidth,\n                        style: 'rowHeaderCell',\n                        type: 'string',\n                        data: rowData[self.uniqueId],\n                        index: -1\n                    };\n                    a[self.uniqueId] = rowData[self.uniqueId];\n                    rowOpen = self.openChildren[rowData[self.uniqueId]];\n                    drawCell(rowHeaderCell, index, rowOrderIndex)(a, -1, -1);\n                }\n            }\n            function drawHeaders() {\n                var d, g = s.length, i, o, columnHeaderCell, header;\n                rowHeaders.forEach(function (rArgs) {\n                    y = rArgs[3];\n                    cellHeight = rArgs[4];\n                    drawRowHeader(rArgs[0], rArgs[1], rArgs[2]);\n                });\n                if (self.attributes.showColumnHeaders) {\n                    x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft;\n                    if (self.attributes.showRowHeaders) {\n                        x += columnHeaderCellWidth;\n                    }\n                    y = 0;\n                    // cell height might have changed during drawing\n                    cellHeight = self.getRowHeaderCellHeight();\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        header = s[i];\n                        d = {\n                            title: header.title,\n                            name: header.name,\n                            width: header.width,\n                            style: 'columnHeaderCell',\n                            type: 'string',\n                            index: o,\n                            order: i\n                        };\n                        columnHeaderCell = {'columnHeaderCell': header.title || header.name};\n                        columnHeaderCell[self.uniqueId] = 'h' + header[self.uniqueId];\n                        d[self.uniqueId] = header[self.uniqueId];\n                        x += drawCell(columnHeaderCell, -1, -1)(d, o, i);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    // fill in the space right of the headers\n                    if (x < w) {\n                        c = {\n                            name: '',\n                            width: self.style.scrollBarWidth,\n                            style: 'headerCellCap',\n                            isHeaderCell: true,\n                            isHeaderCellCap: true,\n                            type: 'string',\n                            index: s.length\n                        };\n                        c[self.uniqueId] = 'columnHeaderCell';\n                        drawCell({endCap: ''}, -1, -1)(c, -1, -1);\n                    }\n                    // fill in the space right of the headers\n                    if (self.attributes.showRowHeaders) {\n                        cornerCell = {'cornerCell': '' };\n                        cornerCell[self.uniqueId] = 'cornerCell';\n                        x = 0;\n                        c = {\n                            name: 'cornerCell',\n                            width: self.style.rowHeaderCellWidth,\n                            style: 'cornerCell',\n                            type: 'string',\n                            index: -1\n                        };\n                        c[self.uniqueId] = 'cornerCell';\n                        drawCell(cornerCell, -1, -1)(c, -1, -1);\n                    }\n                }\n            }\n            function drawRow(r, d) {\n                var i, treeHeight, rowSansTreeHeight, o, g = s.length;\n                if (y - (cellHeight * 2) > h) {\n                    return false;\n                }\n                rd = self.data[r];\n                rowOpen = self.openChildren[rd[self.uniqueId]];\n                rowSansTreeHeight = self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight;\n                treeHeight = (rowOpen ? self.sizes.trees[rd[self.uniqueId]] : 0);\n                rowHeight = rowSansTreeHeight + treeHeight;\n                if (y < rowHeight * -1) {\n                    return false;\n                }\n                if (self.attributes.showRowHeaders) {\n                    x += columnHeaderCellWidth;\n                }\n                cellHeight = rowHeight;\n                for (o = self.scrollIndexLeft; o < g; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        break;\n                    }\n                }\n                // cell height might have changed during drawing\n                cellHeight = rowHeight;\n                x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft + self.style.cellBorderWidth;\n                // don't draw a tree for the new row\n                treeGrid = self.childGrids[rd[self.uniqueId]];\n                if (r !== self.data.length && rowOpen) {\n                    treeGrid.visible = true;\n                    treeGrid.parentNode = {\n                        offsetTop: y + rowSansTreeHeight + self.canvasOffsetTop,\n                        offsetLeft: columnHeaderCellWidth - 1 + self.canvasOffsetLeft,\n                        offsetHeight: treeHeight,\n                        offsetWidth: self.width - columnHeaderCellWidth - self.style.scrollBarWidth - 1,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: self.style,\n                        nodeType: 'canvas-datagrid-tree',\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        rowIndex: r\n                    };\n                    self.visibleCells.unshift({\n                        rowIndex: x,\n                        columnIndex: 0,\n                        y: treeGrid.parentNode.offsetTop,\n                        x: treeGrid.parentNode.offsetLeft,\n                        height: treeGrid.parentNode.offsetHeight,\n                        width: treeGrid.parentNode.offsetWidth,\n                        style: 'tree-grid',\n                        type: treeGrid.parentNode.nodeType\n                    });\n                    treeGrid.draw();\n                } else if (treeGrid) {\n                    treeGrid.parentNode.offsetHeight = 0;\n                    delete self.sizes.trees[rd[self.uniqueId]];\n                }\n                rowHeaders.push([rd, r, d, y, rowHeight]);\n                y += cellHeight + self.style.cellBorderWidth;\n                return true;\n            }\n            function initDraw() {\n                self.visibleRows = [];\n                s = self.getVisibleSchema();\n                self.visibleCells = [];\n                self.canvasOffsetTop = self.isChildGrid ? self.parentNode.offsetTop : 0;\n                self.canvasOffsetLeft = self.isChildGrid ? self.parentNode.offsetLeft : 0;\n                h = self.height;\n                w = self.width;\n                if (!self.isChildGrid) {\n                    self.ctx.scale(window.devicePixelRatio, window.devicePixelRatio);\n                }\n            }\n            function drawBackground() {\n                radiusRect(0, 0, w, h, 0);\n                self.ctx.clip();\n                self.ctx.fillStyle = self.style.backgroundColor;\n                fillRect(0, 0, w, h);\n            }\n            function drawRows() {\n                var o, n, i, g = s.length;\n                x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft + self.style.cellBorderWidth;\n                y = (self.scrollBox.scrollTop * -1) + rowHeaderCellHeight + self.scrollPixelTop + self.style.cellBorderWidth;\n                for (r = self.scrollIndexTop; r < l; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.showNewRow) {\n                    if (self.attributes.showRowHeaders) {\n                        x += columnHeaderCellWidth;\n                    }\n                    rowHeight = cellHeight = self.style.cellHeight;\n                    rowOpen = false;\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        x += drawCell(self.newRow, self.data.length, self.data.length)(s[i], i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    rowHeaders.push([self.newRow, self.data.length, self.data.length, y, rowHeight]);\n                }\n            }\n            function drawReorderMarkers() {\n                if (!self.reorderObject) { return; }\n                var b = {\n                        height: self.reorderObject.height,\n                        width: self.reorderObject.width,\n                        x: self.reorderObject.x + self.reorderObject.dragOffset.x,\n                        y: self.reorderObject.y + self.reorderObject.dragOffset.y\n                    },\n                    m = {\n                        width: w,\n                        heigth: h,\n                        x: 0,\n                        y: 0\n                    };\n                self.ctx.fillStyle = self.style.reorderMarkerBackgroundColor;\n                self.ctx.lineWidth = self.style.reorderMarkerBorderWidth;\n                self.ctx.strokeStyle = self.style.reorderMarkerBorderColor;\n                if (self.dragMode === 'row-reorder') {\n                    b.width = w;\n                    b.x = 0;\n                    m.width = w;\n                    m.y = self.currentCell.y;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.rowIndex !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex - 1 !== self.reorderObject.rowIndex) {\n                        addBorderLine(m, 't');\n                    }\n                } else if (self.dragMode === 'column-reorder' && self.reorderObject) {\n                    b.height = h;\n                    b.y = 0;\n                    m.height = h;\n                    m.x = self.currentCell.x;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.columnIndex !== self.reorderObject.columnIndex\n                            && self.currentCell.columnIndex - 1 !== self.reorderObject.columnIndex) {\n                        addBorderLine(m, 'l');\n                    }\n                }\n            }\n            function drawBorder() {\n                self.ctx.lineWidth = self.style.gridBorderWidth;\n                self.ctx.strokeStyle = self.style.gridBorderColor;\n                strokeRect(0, 0, self.width, self.height);\n            }\n            function drawSelectionBorders() {\n                self.ctx.lineWidth = self.style.selectionOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.selectionOverlayBorderColor;\n                selectionBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n            }\n            function drawActiveCell() {\n                if (!aCell) { return; }\n                if (self.attributes.selectionMode === 'row') {\n                    if (self.activeCell && self.activeCell.rowIndex === aCell.rowIndex) {\n                        self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                        self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                        strokeRect(0, aCell.y, self.getHeaderWidth() + columnHeaderCellWidth, rowHeight);\n                    }\n                } else {\n                    self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                    self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                    strokeRect(aCell.x, aCell.y, aCell.width, aCell.height);\n                }\n            }\n            function drawDebug() {\n                perfCounters[drawCount % perfWindowSize] = performance.now() - p;\n                var d;\n                if (self.attributes.debug) {\n                    self.ctx.font = '11px sans-serif';\n                    d = {};\n                    d.perf = (perfCounters.reduce(function (a, b) {\n                        return a + b;\n                    }, 0) / perfCounters.length).toFixed(1)\n                        + 'ms (' +\n                        perfCounters.map(function (a) { return a.toFixed(1); }).join(', ') + ')';\n                    d.htmlImages = Object.keys(self.htmlImageCache).length;\n                    d.scrollBox = self.scrollBox.toString();\n                    d.scrollIndex = '{\"top\": ' + self.scrollIndexTop + ', \"left\": ' + self.scrollIndexLeft + '}';\n                    d.scrollPixel = '{\"top\": ' + self.scrollPixelTop + ', \"left\": ' + self.scrollPixelLeft + '}';\n                    d.canvasOffset = '{\"top\": ' + self.canvasOffsetTop + ', \"left\": ' + self.canvasOffsetLeft + '}';\n                    d.pointerLockPosition =  self.pointerLockPosition ?\n                            self.pointerLockPosition.x + ', ' + self.pointerLockPosition.y : '';\n                    d.size = '{\"width\": ' + self.width + ', \"height\": ' + self.height + '}';\n                    d.mouse = '{\"x\": ' + self.mouse.x + ', \"y\": ' + self.mouse.y + '}';\n                    d.touch = !self.touchStart\n                        ? '' : '{\"x\": ' + self.touchStart.x + ', \"y\": ' + self.touchStart.y + \"}\";\n                    d.entities = self.visibleCells.length;\n                    d.hasFocus = self.hasFocus;\n                    d.dragMode = self.dragMode;\n                    if (self.currentCell) {\n                        d.columnIndex = self.currentCell.columnIndex;\n                        d.rowIndex = self.currentCell.rowIndex;\n                        d.sortColumnIndex = self.currentCell.sortColumnIndex;\n                        d.sortRowIndex = self.currentCell.sortRowIndex;\n                        d.context = self.currentCell.context;\n                        d.dragContext = self.currentCell.dragContext;\n                        d.style = self.currentCell.style;\n                        d.type = self.currentCell.type;\n                    }\n                    self.ctx.save();\n                    Object.keys(d).forEach(function (key, index) {\n                        var m = key + ': ' + d[key],\n                            lh = 14;\n                        self.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n                        fillRect(columnHeaderCellWidth, lh + (index * lh), 800, lh);\n                        self.ctx.fillStyle = 'rgba(0, 0, 0, 1)';\n                        fillText(m, columnHeaderCellWidth + 1, rowHeaderCellHeight + (index * lh));\n                    });\n                    self.ctx.restore();\n                }\n            }\n            self.ctx.save();\n            initDraw();\n            drawBackground();\n            drawRows();\n            drawSelectionBorders();\n            drawActiveCell();\n            drawHeaders();\n            drawReorderMarkers();\n            drawScrollBars();\n            if (checkScrollHeight) {\n                self.resize(true);\n            }\n            drawBorder();\n            drawDebug();\n            if (self.dispatchEvent('afterdraw', {})) { return; }\n            self.ctx.restore();\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var touchDelta = {x: 0, y: 0, scrollTop: 0, scrollLeft: 0},\n            touchAnimateTo = {scrollLeft: 0, scrollTop: 0},\n            touchSigma = {scrollLeft: 0, scrollTop: 0},\n            xPPS = 0,\n            yPPS = 0,\n            touchingCell = false,\n            startingCell = false,\n            wheeling,\n            animationFrames = 0;\n        self.getTouchPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.touches[0].clientX - rect.left,\n                    y: e.touches[0].clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        self.calculatePPS = function () {\n            xPPS = ((touchDelta.scrollLeft - touchSigma.scrollLeft) / (touchDelta.t - touchSigma.t));\n            yPPS = ((touchDelta.scrollTop - touchSigma.scrollTop) / (touchDelta.t - touchSigma.t));\n            touchSigma = {\n                scrollLeft: touchDelta.scrollLeft,\n                scrollTop: touchDelta.scrollTop,\n                t: performance.now() / 10\n            };\n        };\n        self.touchCell = function (e) {\n            return function () {\n                clearInterval(self.touchCalcTimeout);\n                var pos = self.getTouchPos(e);\n                if (Math.abs(touchDelta.x) + Math.abs(touchDelta.y) < self.attributes.touchDeadZone) {\n                    touchingCell = self.getCellAt(pos.x, pos.y);\n                    self.mousemove(e, pos);\n                    self.mousedown(e, pos);\n                    self.mousemove(e, pos);\n                    self.draw();\n                }\n            };\n        };\n        self.touchstart = function (e) {\n            touchingCell = false;\n            self.touchStart = self.getTouchPos(e);\n            startingCell = self.getCellAt(self.touchStart.x, self.touchStart.y, true);\n            if (self.dispatchEvent('touchstart', {NativeEvent: e, cell: self.startingCell})) { return; }\n            self.stopPropagation(e);\n            e.preventDefault();\n            self.touchScrollStart = {\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: performance.now() / 1000\n            };\n            touchDelta = {\n                x: self.touchStart.x,\n                y: self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: 0\n            };\n            self.touchmove(e);\n            clearTimeout(self.touchTimeout);\n            clearInterval(self.touchCalcTimeout);\n            self.touchTimeout = setTimeout(self.touchCell(e), self.attributes.touchSelectTimeMs);\n            self.touchCalcTimeout = setInterval(self.calculatePPS, 10);\n            self.touchHaltAnimation = true;\n            document.body.addEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.addEventListener('touchend', self.touchend, false);\n            document.body.addEventListener('touchcancel', self.touchcancel, false);\n        };\n        self.easing = function (t, b, c, d) {\n            return c * (t / d) * (2 - t) + b;\n        };\n        self.touchEndAnimation = function () {\n            if (!self.canvas || !self.scrollBox.scrollTo) { return requestAnimationFrame(self.touchEndAnimation); }\n            var x,\n                y,\n                n = performance.now() / 1000,\n                d = (self.attributes.touchReleaseAnimationDurationMs / 1000),\n                t;\n            touchDelta.t = touchDelta.t || n + d;\n            t = n - touchDelta.t + 1;\n            if (t > 1 || self.touchHaltAnimation || (animationFrames > 1000)) {\n                animationFrames = 0;\n                self.touchHaltAnimation = false;\n                touchAnimateTo = {scrollLeft: -1, scrollTop: -1};\n                return;\n            }\n            animationFrames += 1;\n            x = self.easing(t, touchDelta.scrollLeft, -touchAnimateTo.scrollLeft, d);\n            y = self.easing(t, touchDelta.scrollTop, -touchAnimateTo.scrollTop, d);\n            self.scrollBox.scrollTo(x, y);\n            requestAnimationFrame(self.touchEndAnimation);\n        };\n        self.touchend = function (e) {\n            if (self.dispatchEvent('touchend', {NativeEvent: e})) { return; }\n            var dz = Math.abs(touchDelta.x) + Math.abs(touchDelta.y) < self.attributes.touchDeadZone,\n                pos = {\n                    x: self.touchStart.x + touchDelta.x,\n                    y: self.touchStart.y + touchDelta.y\n                },\n                cell = self.getCellAt(pos.x, pos.y);\n            if (!self.hasFocus) { return; }\n            if (touchingCell) {\n                self.mouseup(e, self.touchStart);\n            } else if (dz) {\n                if (cell.active) {\n                    self.beginEditAt(cell.columnIndex, cell.rowIndex);\n                } else {\n                    self.mousedown(e, self.touchStart);\n                    self.mouseup(e, self.touchStart);\n                    self.click(e, self.touchStart);\n                }\n            }\n            touchingCell = false;\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n            clearTimeout(self.touchTimeout);\n            clearInterval(self.touchCalcTimeout);\n            self.calculatePPS();\n            touchAnimateTo.scrollLeft = xPPS * self.attributes.touchReleaseAcceleration;\n            touchAnimateTo.scrollTop = yPPS * self.attributes.touchReleaseAcceleration;\n            self.touchHaltAnimation = false;\n            if (animationFrames === 0 && !/-scroll-/.test(startingCell.style) && !dz) {\n                self.touchEndAnimation();\n            }\n        };\n        self.touchmove = function (e) {\n            var d = self.getTouchPos(e);\n            if (self.dispatchEvent('touchmove', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (!self.hasFocus) { return; }\n            touchDelta = {\n                x: d.x - self.touchStart.x,\n                y: d.y - self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: 0\n            };\n            if (/vertical-scroll-/.test(startingCell.style)) {\n                self.scrollBox.scrollTop = self.scrollBox.scrollHeight * (d.y / self.height);\n            } else if (/horizontal-scroll-/.test(startingCell.style)) {\n                self.scrollBox.scrollLeft = self.scrollBox.scrollWidth * (d.x / self.width);\n            } else if (touchingCell) {\n                self.mousemove(e, d);\n                self.draw();\n            } else {\n                if (animationFrames === 0) {\n                    self.scrollBox.scrollTo(self.touchScrollStart.scrollLeft - touchDelta.x,\n                        self.touchScrollStart.scrollTop - touchDelta.y);\n                }\n            }\n        };\n        self.touchcancel = function (e) {\n            if (self.dispatchEvent('touchcancel', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) { return; }\n            self.touchend(e);\n            touchingCell = false;\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n            return;\n        };\n        self.stopPropagation = function (e) { e.stopPropagation(); };\n        self.addEventListener = function (ev, fn) {\n            self.events[ev] = self.events[ev] || [];\n            self.events[ev].unshift(fn);\n        };\n        self.removeEventListener = function (ev, fn) {\n            (self.events[ev] || []).forEach(function removeEachListener(sfn, idx) {\n                if (fn === sfn) {\n                    self.events[ev].splice(idx, 1);\n                }\n            });\n        };\n        self.dispatchEvent = function (ev, e) {\n            var defaultPrevented;\n            function preventDefault() {\n                defaultPrevented = true;\n            }\n            if (!self.events[ev]) { return; }\n            self.events[ev].forEach(function dispatchEachEvent(fn) {\n                e.ctx = self.ctx;\n                e.preventDefault = preventDefault;\n                fn.apply(self.intf, [e]);\n            });\n            return defaultPrevented;\n        };\n        self.resize = function (drawAfterResize) {\n            var cellBorder = self.style.cellBorderWidth * 2,\n                columnHeaderCellBorder =  self.style.columnHeaderCellBorderWidth * 2,\n                scrollHeight,\n                scrollWidth,\n                rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth(),\n                // TODO: What the hell are these numbers!?  They are probably some value in the style.\n                scrollDragPositionOffsetY = 30,\n                scrollDragPositionOffsetX = 15;\n            if (self.isChildGrid) {\n                self.height = self.parentNode.offsetHeight;\n                self.width = self.parentNode.offsetWidth;\n            } else {\n                if (!self.parentIsCanvas) {\n                    if (self.shadowRootParentElement) {\n                        self.height = self.shadowRootParentElement.offsetHeight;\n                        self.width = self.shadowRootParentElement.offsetWidth;\n                    } else {\n                        self.height = self.parentDOMNode.offsetHeight;\n                        self.width = self.parentDOMNode.offsetWidth;\n                    }\n                    self.canvas.height = self.height * window.devicePixelRatio;\n                    self.canvas.width = self.width * window.devicePixelRatio;\n                    self.canvas.style.height = self.height + 'px';\n                    self.canvas.style.width = self.width + 'px';\n                }\n                self.canvasOffsetTop = self.args.canvasOffsetTop || 0;\n                self.canvasOffsetLeft = self.args.canvasOffsetLeft || 0;\n            }\n            scrollHeight = self.data.reduce(function reduceData(accumulator, row) {\n                return accumulator\n                    + (self.sizes.rows[row[self.uniqueId]] || self.style.cellHeight)\n                    + (self.sizes.trees[row[self.uniqueId]] || 0)\n                    + cellBorder;\n            }, 0) || 0;\n            scrollWidth = self.getVisibleSchema().reduce(function reduceSchema(accumulator, column) {\n                if (column.hidden) { return accumulator; }\n                return accumulator + (self.sizes.columns[column[self.uniqueId]] || column.width || self.style.columnWidth) + cellBorder;\n            }, 0) || 0;\n            if (self.attributes.showNewRow) {\n                scrollHeight += self.style.cellHeight + cellBorder;\n            }\n            self.scrollBox.width = self.width - columnHeaderCellWidth;\n            self.scrollBox.height = self.height - rowHeaderCellHeight - columnHeaderCellBorder;\n            self.scrollBox.top = rowHeaderCellHeight + columnHeaderCellBorder;\n            self.scrollBox.left = columnHeaderCellWidth;\n            self.scrollBox.scrollHeight = scrollHeight + self.style.scrollBarWidth - self.scrollBox.height;\n            self.scrollBox.scrollWidth = scrollWidth + self.style.scrollBarWidth - self.scrollBox.width;\n            self.scrollBox.widthBoxRatio = ((self.scrollBox.width - scrollDragPositionOffsetX)\n                / (self.scrollBox.scrollWidth + self.scrollBox.width - scrollDragPositionOffsetX));\n            self.scrollBox.scrollBoxWidth = self.scrollBox.width\n                * self.scrollBox.widthBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.heightBoxRatio = ((self.scrollBox.height - scrollDragPositionOffsetY)\n                / (self.scrollBox.scrollHeight + (self.scrollBox.height - scrollDragPositionOffsetY)));\n            self.scrollBox.scrollBoxHeight = self.scrollBox.height\n                * self.scrollBox.heightBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.scrollBoxWidth = Math.max(self.scrollBox.scrollBoxWidth, self.style.scrollBarBoxMinSize);\n            self.scrollBox.scrollBoxHeight = Math.max(self.scrollBox.scrollBoxHeight, self.style.scrollBarBoxMinSize);\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            self.resizeEditInput();\n            self.scroll(true);\n            if (drawAfterResize) {\n                self.draw(true);\n            }\n            self.dispatchEvent('resize', {});\n            return true;\n        };\n        self.resizeEditInput = function () {\n            if (self.input) {\n                var pos = self.canvas.getBoundingClientRect(),\n                    s = self.scrollOffset(self.canvas),\n                    bx2 = (self.style.cellBorderWidth * 2),\n                    cell = self.getVisibleCellByIndex(self.input.editCell.columnIndex, self.input.editCell.rowIndex)\n                        || {x: -100, y: -100, height: 0, width: 0};\n                self.input.style.left = pos.left + cell.x - self.style.cellBorderWidth + self.canvasOffsetLeft - s.left + 'px';\n                self.input.style.top = pos.top + cell.y - bx2 + self.canvasOffsetTop - s.top + 'px';\n                self.input.style.height = cell.height - bx2 - 1 + 'px';\n                self.input.style.width = cell.width - bx2 - self.style.cellPaddingLeft + 'px';\n                self.clipElement(self.input);\n            }\n        };\n        self.scroll = function (e, dontDraw) {\n            var s = self.getVisibleSchema(),\n                cellBorder = self.style.cellBorderWidth * 2;\n            self.scrollIndexTop = 0;\n            self.scrollPixelTop = 0;\n            self.scrollIndexLeft = 0;\n            self.scrollPixelLeft = 0;\n            while (self.scrollPixelTop < self.scrollBox.scrollTop && self.scrollIndexTop < self.data.length) {\n                self.scrollPixelTop +=\n                    (self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || self.style.cellHeight)\n                    + (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0)\n                    + cellBorder;\n                self.scrollIndexTop += 1;\n            }\n            while (self.scrollPixelLeft < self.scrollBox.scrollLeft && self.scrollIndexLeft < s.length) {\n                self.scrollPixelLeft +=\n                    (self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width);\n                self.scrollIndexLeft += 1;\n            }\n            if (self.data.length > 0) {\n                self.scrollIndexLeft = Math.max(self.scrollIndexLeft - 1, 0);\n                self.scrollPixelLeft = Math.max(self.scrollPixelLeft\n                    - (self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width), 0);\n                self.scrollIndexTop = Math.max(self.scrollIndexTop - 1, 0);\n                self.scrollPixelTop = Math.max(self.scrollPixelTop\n                    - (self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || self.style.cellHeight)\n                    - (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0), 0);\n            }\n            self.ellipsisCache = {};\n            if (!dontDraw) {\n                self.draw(true);\n            }\n            //TODO: figure out why this has to be delayed for child grids\n            //BUG: wheeling event on 3rd level hierarchy fails to move input box\n            requestAnimationFrame(self.resizeEditInput);\n            self.dispatchEvent('scroll', {top: self.scrollBox.scrollTop, left: self.scrollBox.scrollLeft});\n        };\n        self.mousemove = function (e, overridePos) {\n            if (self.contextMenu || self.input) {\n                return;\n            }\n            self.mouse = overridePos || self.getLayerPos(e);\n            var ctrl = (e.controlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                i,\n                s = self.getSchema(),\n                dragBounds,\n                sBounds,\n                x = self.mouse.x,\n                y = self.mouse.y,\n                o = self.getCellAt(x, y),\n                delta,\n                ev = {NativeEvent: e, cell: o, x: x, y: y},\n                previousCell = self.currentCell;\n            clearTimeout(self.scrollTimer);\n            if (!self.isInGrid({x: x, y: y})) {\n                self.hasFocus = false;\n            }\n            if (self.dispatchEvent('mousemove', ev)) {\n                return;\n            }\n            if (o && self.currentCell && (self.currentCell.rowIndex !== o.rowIndex\n                    || self.currentCell.columnIndex !== o.columnIndex)) {\n                self.cellBoundaryCrossed = true;\n                ev.cell = previousCell;\n                self.dispatchEvent('cellmouseout', ev);\n                ev.cell = o;\n                self.dispatchEvent('cellmouseover', ev);\n            }\n            self.currentCell = o;\n            if (!self.hasFocus) {\n                return;\n            }\n            self.hovers = {};\n            if (!self.draggingItem\n                    && o\n                    && self.scrollModes.indexOf(o.context) === -1) {\n                self.dragItem = o;\n                self.dragMode = o.dragContext;\n                self.canvas.style.cursor = o.context;\n                if (o.context === 'cell' && o.data) {\n                    self.canvas.style.cursor = 'pointer';\n                    self.hovers[o.data[self.uniqueId]] = [o.columnIndex];\n                }\n                if ((self.selecting || self.reorderObject)\n                        && o.context === 'cell'\n                        && o.data) {\n                    sBounds = self.getSelectionBounds();\n                    delta = {\n                        x: Math.abs(self.dragStart.x - x),\n                        y: Math.abs(self.dragStart.y - y)\n                    };\n                    if (self.dragStartObject.columnIndex !== -1 && e.shiftKey) {\n                        self.dragStartObject = {\n                            rowIndex: self.activeCell.rowIndex,\n                            columnIndex: self.activeCell.columnIndex\n                        };\n                    }\n                    dragBounds = {\n                        top: Math.min(self.dragStartObject.rowIndex, o.rowIndex),\n                        left: Math.min(self.dragStartObject.columnIndex, o.columnIndex),\n                        bottom: Math.max(self.dragStartObject.rowIndex, o.rowIndex),\n                        right: Math.max(self.dragStartObject.columnIndex, o.columnIndex)\n                    };\n                    if (self.dragStartObject.columnIndex === -1) {\n                        dragBounds.left = -1;\n                        dragBounds.right = s.length - 1;\n                        dragBounds.top = Math.min(sBounds.top, o.rowIndex);\n                        dragBounds.bottom = Math.max(sBounds.bottom, o.rowIndex);\n                    }\n                    if (self.dragStartObject.rowIndex !== o.rowIndex\n                                || self.dragStartObject.columnIndex !== o.columnIndex) {\n                        self.ignoreNextClick = true;\n                    }\n                    if (self.cellBoundaryCrossed || (delta.x === 0 && delta.y === 0) || (self.attributes.selectionMode === 'row')) {\n                        if ((self.attributes.selectionMode === 'row') || self.dragStartObject.columnIndex === -1) {\n                            self.selectRow(o.rowIndex, ctrl, null, true);\n                        } else {\n                            if (!self.dragAddToSelection && o.rowIndex !== undefined) {\n                                if (self.selections[o.rowIndex] && self.selections[o.rowIndex].indexOf(o.columnIndex) !== -1) {\n                                    self.selections[o.rowIndex].splice(self.selections[o.rowIndex].indexOf(o.columnIndex), 1);\n                                }\n                            } else {\n                                self.selections[o.rowIndex] = self.selections[o.rowIndex] || [];\n                                if (self.selections[o.rowIndex].indexOf(o.columnIndex) === -1) {\n                                    self.selections[o.rowIndex].push(o.columnIndex);\n                                }\n                            }\n                        }\n                    }\n                    if ((!self.selectionBounds || (dragBounds.top !== self.selectionBounds.top\n                            || dragBounds.left !== self.selectionBounds.left\n                            || dragBounds.bottom !== self.selectionBounds.bottom\n                            || dragBounds.right !== self.selectionBounds.right)) && !ctrl) {\n                        self.selections = [];\n                        sBounds = dragBounds;\n                        if (self.attributes.selectionMode === 'row') {\n                            for (i = sBounds.top; i <= sBounds.bottom; i += 1) {\n                                self.selectRow(i, true, null, true);\n                            }\n                        } else {\n                            self.selectArea(sBounds, true);\n                        }\n                    }\n                    self.autoScrollZone(e, x, y, ctrl);\n                }\n            }\n            self.cellBoundaryCrossed = false;\n            self.draw(true);\n        };\n        self.click = function (e, overridePos) {\n            var i,\n                selectionChanged,\n                ctrl = (e.controlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                pos = overridePos || self.getLayerPos(e);\n            self.currentCell = self.getCellAt(pos.x, pos.y);\n            if (self.currentCell.grid !== undefined) {\n                return;\n            }\n            function checkSelectionChange() {\n                if (!selectionChanged) { return; }\n                self.dispatchEvent('selectionchanged', {\n                    selectedData: self.getSelectedData(),\n                    selections: self.selections,\n                    selectionBounds: self.selectionBounds\n                });\n            }\n            if (self.input) {\n                self.endEdit();\n            }\n            if (self.ignoreNextClick) {\n                self.ignoreNextClick = false;\n                return;\n            }\n            i = self.currentCell;\n            if (self.dispatchEvent('click', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'cell') {\n                if (self.currentCell.style === 'cornerCell') {\n                    self.order(self.uniqueId, 'asc', self.sorters.number);\n                    self.setFilter();\n                    checkSelectionChange();\n                    return;\n                }\n                if (self.currentCell.style === 'columnHeaderCell') {\n                    if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                        if (self.orderBy === i.header.name) {\n                            self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                        } else {\n                            self.orderDirection = 'asc';\n                        }\n                        self.order(i.header.name, self.orderDirection);\n                        checkSelectionChange();\n                        return;\n                    }\n                    if (self.attributes.columnHeaderClickBehavior === 'select') {\n                        self.selectColumn(i.header.index, ctrl, e.shiftKey, true);\n                        checkSelectionChange();\n                        self.draw();\n                        return;\n                    }\n                }\n                if (['rowHeaderCell', 'columnHeaderCell'].indexOf(self.currentCell.style) === -1 && !ctrl) {\n                    self.setActiveCell(i.columnIndex, i.rowIndex);\n                }\n                self.selections[i.rowIndex] = self.selections[i.rowIndex] || [];\n                if (((self.attributes.selectionMode === 'row') || self.currentCell.style === 'rowHeaderCell')) {\n                    if (self.currentCell.style === 'rowHeaderCell'\n                            && self.attributes.tree && pos.x > 0\n                            && pos.x - self.currentCell.x < self.style.treeArrowWidth\n                            + self.style.treeArrowMarginLeft\n                            + self.style.treeArrowMarginRight + self.style.treeArrowClickRadius\n                            && pos.y - self.currentCell.y < self.style.treeArrowHeight\n                            + self.style.treeArrowMarginTop + self.style.treeArrowClickRadius\n                            && pos.y > 0) {\n                        self.toggleTree(i.rowIndex);\n                        return;\n                    }\n                    selectionChanged = true;\n                    self.selectRow(i.rowIndex, ctrl, null, true);\n                }\n                if (e.shiftKey && !ctrl) {\n                    self.selectionBounds = self.getSelectionBounds();\n                    self.selectArea(undefined, false);\n                }\n            }\n            checkSelectionChange();\n            self.draw(true);\n        };\n        self.dragResizeColumn = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = self.resizingStartingWidth + pos.x - self.dragStart.x;\n            y = self.resizingStartingHeight + pos.y - self.dragStart.y;\n            if (x < self.style.minColumnWidth) {\n                x = self.style.minColumnWidth;\n            }\n            if (y < self.style.minRowHeight) {\n                y = self.style.minRowHeight;\n            }\n            if (self.dispatchEvent('resizecolumn', {x: x, y: y, draggingItem: self.draggingItem})) { return false; }\n            if (self.scrollBox.scrollLeft > self.scrollBox.scrollWidth - self.attributes.resizeScrollZone\n                    && self.dragMode === 'ew-resize') {\n                self.resize(true);\n                self.scrollBox.scrollLeft += x;\n            }\n            if (self.dragMode === 'ew-resize') {\n                self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] = x;\n                if (['rowHeaderCell', 'cornerCell'].indexOf(self.draggingItem.header.style) !== -1) {\n                    self.resize(true);\n                }\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.dragMode === 'ns-resize') {\n                if (self.draggingItem.rowOpen) {\n                    self.sizes.trees[self.draggingItem.data[self.uniqueId]] = y;\n                } else if (self.attributes.globalRowResize) {\n                    self.style.cellHeight = y;\n                } else {\n                    self.sizes.rows[self.draggingItem.data[self.uniqueId]] = y;\n                }\n                self.dispatchEvent('resizerow', {row: y});\n                self.resizeChildGrids();\n                return;\n            }\n            self.ellipsisCache = {};\n        };\n        self.stopDragResize = function () {\n            self.resize();\n            document.body.removeEventListener('mousemove', self.dragResizeColumn, false);\n            document.body.removeEventListener('mouseup', self.stopDragResize, false);\n            self.setStorageData();\n            self.draw(true);\n            self.ignoreNextClick = true;\n        };\n        self.scrollGrid = function (e) {\n            var pos = self.getLayerPos(e);\n            if (self.attributes.scrollPointerLock && self.pointerLockPosition\n                    && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                self.pointerLockPosition.x += e.movementX;\n                self.pointerLockPosition.y += e.movementY;\n                self.pointerLockPosition.x = Math.min(self.width - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.x));\n                self.pointerLockPosition.y = Math.min(self.height - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.y));\n                pos = self.pointerLockPosition;\n            }\n            self.scrollMode = self.getCellAt(pos.x, pos.y).context;\n            if (self.scrollMode === 'horizontal-scroll-box' && self.scrollStartMode !== 'horizontal-scroll-box') {\n                self.scrollStartMode = 'horizontal-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.left = self.scrollBox.scrollLeft;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box' && self.scrollStartMode !== 'vertical-scroll-box') {\n                self.scrollStartMode = 'vertical-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.top = self.scrollBox.scrollTop;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollStartMode === 'vertical-scroll-box'\n                    && self.scrollMode !== 'vertical-scroll-box') {\n                self.scrollMode = 'vertical-scroll-box';\n            }\n            if (self.scrollStartMode === 'horizontal-scroll-box'\n                    && self.scrollMode !== 'horizontal-scroll-box') {\n                self.scrollMode = 'horizontal-scroll-box';\n            }\n            clearTimeout(self.scrollTimer);\n            if (self.scrollModes.indexOf(self.scrollMode) === -1) {\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box') {\n                self.scrollBox.scrollTop = self.scrollStart.top + ((pos.y - self.dragStart.y)\n                    / self.scrollBox.heightBoxRatio);\n            } else if (self.scrollMode === 'vertical-scroll-top') {\n                self.scrollBox.scrollTop -= (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'vertical-scroll-bottom') {\n                self.scrollBox.scrollTop += (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n            if (self.scrollMode === 'horizontal-scroll-box') {\n                self.scrollBox.scrollLeft = self.scrollStart.left + ((pos.x - self.dragStart.x)\n                    / self.scrollBox.widthBoxRatio);\n            } else if (self.scrollMode === 'horizontal-scroll-right') {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'horizontal-scroll-left') {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.stopScrollGrid = function () {\n            clearTimeout(self.scrollTimer);\n            if (document.exitPointerLock) {\n                document.exitPointerLock();\n            }\n            document.body.removeEventListener('mousemove', self.scrollGrid, false);\n        };\n        self.dragReorder = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = pos.x - self.dragStart.x;\n            y = pos.y - self.dragStart.y;\n            if (!self.attributes.allowColumnReordering && self.dragMode === 'column-reorder') {\n                return;\n            }\n            if (!self.attributes.allowRowReordering && self.dragMode === 'row-reorder') {\n                return;\n            }\n            if (self.dispatchEvent('reordering', {\n                    NativeEvent: e,\n                    source: self.dragStartObject,\n                    target: self.currentCell,\n                    dragMode: self.dragMode\n                })) {\n                return;\n            }\n            if (Math.abs(x) > self.attributes.reorderDeadZone || Math.abs(y) > self.attributes.reorderDeadZone) {\n                self.reorderObject = self.dragStartObject;\n                self.reorderTarget = self.currentCell;\n                self.reorderObject.dragOffset = {\n                    x: x,\n                    y: y\n                };\n                self.autoScrollZone(e, pos.x, pos.x, false);\n            }\n        };\n        self.stopDragReorder = function (e) {\n            var cr = {\n                    'row-reorder': self.orders.rows,\n                    'column-reorder': self.orders.columns\n                },\n                i = {\n                    'row-reorder': 'rowIndex',\n                    'column-reorder': 'columnIndex'\n                }[self.dragMode];\n            document.body.removeEventListener('mousemove', self.dragReorder, false);\n            document.body.removeEventListener('mouseup', self.stopDragReorder, false);\n            if (self.reorderObject\n                    && self.reorderTarget) {\n                self.ignoreNextClick = true;\n                if (self.reorderObject[i] !== self.reorderTarget[i]\n                        && !self.dispatchEvent('reorder', {\n                            NativeEvent: e,\n                            source: self.reorderObject,\n                            target: self.reorderTarget,\n                            dragMode: self.dragMode\n                        })) {\n                    cr[self.dragMode].splice(cr[self.dragMode].indexOf(self.reorderObject[i]), 1);\n                    cr[self.dragMode].splice(cr[self.dragMode].indexOf(self.reorderTarget[i]), 0, self.reorderObject[i]);\n                    self.setStorageData();\n                }\n            }\n            self.reorderObject = undefined;\n            self.reorderTarget = undefined;\n            self.draw(true);\n        };\n        self.mousedown = function (e, overridePos) {\n            self.lastMouseDownTarget = e.target;\n            if (self.dispatchEvent('mousedown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (e.button === 2 || self.input) { return; }\n            var ctrl = (e.controlKey || e.metaKey);\n            self.dragStart = overridePos || self.getLayerPos(e);\n            self.scrollStart = {\n                left: self.scrollBox.scrollLeft,\n                top: self.scrollBox.scrollTop\n            };\n            self.dragStartObject = self.getCellAt(self.dragStart.x, self.dragStart.y);\n            self.dragAddToSelection = !self.dragStartObject.selected;\n            if (!ctrl && !e.shiftKey && !/(vertical|horizontal)-scroll-(bar|box)/\n                    .test(self.dragStartObject.context) && !self.currentCell.isColumnHeader) {\n                self.selections = [];\n            }\n            if (self.dragStartObject.isGrid) {\n                return;\n            }\n            if (self.scrollModes.indexOf(self.dragStartObject.context) !== -1) {\n                self.scrollMode = self.dragStartObject.context;\n                self.scrollStartMode = self.dragStartObject.context;\n                self.scrollGrid(e);\n                if (self.attributes.scrollPointerLock\n                        && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                    self.pointerLockPosition = {\n                        x: self.dragStart.x,\n                        y: self.dragStart.y\n                    };\n                    self.canvas.requestPointerLock();\n                }\n                document.body.addEventListener('mousemove', self.scrollGrid, false);\n                document.body.addEventListener('mouseup', self.stopScrollGrid, false);\n                self.ignoreNextClick = true;\n                return;\n            }\n            if (self.dragMode === 'cell') {\n                self.selecting = true;\n                if (self.attributes.selectionMode === 'row') {\n                    self.selectRow(self.dragStartObject.rowIndex, ctrl, null, true);\n                }\n                return self.mousemove(e);\n            }\n            if (['ns-resize', 'ew-resize'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragItem;\n                if (self.draggingItem.rowOpen) {\n                    self.resizingStartingHeight = self.sizes.trees[self.draggingItem.data[self.uniqueId]];\n                } else {\n                    self.resizingStartingHeight = self.sizes.rows[self.draggingItem.data[self.uniqueId]] || self.style.cellHeight;\n                }\n                self.resizingStartingWidth = self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] || self.draggingItem.width;\n                document.body.addEventListener('mousemove', self.dragResizeColumn, false);\n                document.body.addEventListener('mouseup', self.stopDragResize, false);\n            }\n            if (['row-reorder', 'column-reorder'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragItem;\n                document.body.addEventListener('mousemove', self.dragReorder, false);\n                document.body.addEventListener('mouseup', self.stopDragReorder, false);\n            }\n        };\n        self.mouseup = function (e) {\n            clearTimeout(self.scrollTimer);\n            self.cellBoundaryCrossed = true;\n            self.selecting = undefined;\n            self.draggingItem = undefined;\n            self.dragStartObject = undefined;\n            if (self.dispatchEvent('mouseup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            if (self.currentCell && self.currentCell.grid !== undefined) {\n                return;\n            }\n            if (self.contextMenu || self.input) { return; }\n            if (self.dragStart && self.isInGrid(self.dragStart)) {\n                self.controlInput.focus();\n            }\n            e.preventDefault();\n        };\n        self.keydown = function (e) {\n            var i,\n                x = self.activeCell.columnIndex,\n                y = self.activeCell.rowIndex,\n                ctrl = (e.controlKey || e.metaKey),\n                last = self.data.length - 1,\n                cols = self.getVisibleSchema().length - 1;\n            if (self.dispatchEvent('keydown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            if (self.attributes.showNewRow) {\n                last += 1;\n            }\n            if (e.keyCode === 9) {\n                e.preventDefault();\n            }\n            // esc\n            if (e.keyCode === 27) {\n                self.selections = [];\n                self.draw(true);\n            // ctrl + a\n            } else if (ctrl && e.keyCode === 65) {\n                self.selectAll();\n            //ArrowDown\n            } else if (e.keyCode === 40) {\n                y += 1;\n            //ArrowUp\n            } else if (e.keyCode === 38) {\n                y -= 1;\n            //ArrowLeft Tab\n            } else if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {\n                x -= 1;\n            //ArrowRight Tab\n            } else if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {\n                x += 1;\n            //PageUp\n            } else if (e.keyCode === 33) {\n                y -= self.page;\n                e.preventDefault();\n            //PageDown\n            } else if (e.keyCode === 34) {\n                y += self.page;\n                e.preventDefault();\n            //Home ArrowUp\n            } else if (e.keyCode === 36 || (ctrl && e.keyCode === 38)) {\n                y = 0;\n            //End ArrowDown\n            } else if (e.keyCode === 35 || (ctrl && e.keyCode === 40)) {\n                y = self.data.length - 1;\n            //ArrowRight\n            } else if (ctrl && e.keyCode === 39) {\n                x = cols;\n            //ArrowLeft\n            } else if (ctrl && e.keyCode === 37) {\n                x = 0;\n            }\n            //Enter\n            if (e.keyCode === 13) {\n                return self.beginEditAt(x, y);\n            }\n            //Space\n            if (e.keyCode === 32) {\n                self.selections = [];\n                self.selections[Math.max(y, 0)] = [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                if (self.attributes.selectionMode === 'row') {\n                    for (i = self.selectionBounds.top; i <= self.selectionBounds.bottom; i += 1) {\n                        self.selectRow(i, ctrl, null, true);\n                    }\n                } else {\n                    self.selectArea(undefined, ctrl);\n                }\n                e.preventDefault();\n                self.draw(true);\n                return;\n            }\n            if (x < 0) {\n                x = 0;\n            }\n            if (y > last) {\n                y = last;\n            }\n            if (y < 0) {\n                y = 0;\n            }\n            if (x > cols) {\n                x = cols;\n            }\n            // Arrows\n            if (e.shiftKey && [37, 38, 39, 40].indexOf(e.keyCode) !== -1) {\n                self.selections[Math.max(y, 0)] = self.selections[Math.max(y, 0)] || [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                self.selectArea(undefined, ctrl);\n                self.draw(true);\n            }\n            if (x !== self.activeCell.columnIndex || y !== self.activeCell.rowIndex) {\n                self.scrollIntoView(x !== self.activeCell.columnIndex ? x : undefined, y !== self.activeCell.rowIndex ? y : undefined);\n                self.setActiveCell(x, y);\n                if (!e.shiftKey && self.attributes.selectionFollowsActiveCell) {\n                    if (!ctrl) {\n                        self.selections = [];\n                    }\n                    self.selections[y] = self.selections[y] || [];\n                    self.selections[y].push(x);\n                    self.dispatchEvent('selectionchanged', {\n                        selectedData: self.getSelectedData(),\n                        selections: self.selections,\n                        selectionBounds: self.selectionBounds\n                    });\n                }\n                self.draw(true);\n            }\n        };\n        self.keyup = function (e) {\n            if (self.dispatchEvent('keyup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            self.controlInput.value = '';\n        };\n        self.keypress = function (e) {\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.dispatchEvent('keypress', {NativeEvent: e, cell: self.currentCell})) { return; }\n        };\n        self.dblclick = function (e) {\n            if (self.dispatchEvent('dblclick', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'columnHeaderCell') {\n                self.fitColumnToValues(self.currentCell.header.name);\n            } else if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'cornerCell') {\n                self.autosize();\n            } else if (['cell', 'activeCell'].indexOf(self.currentCell.style) !== -1) {\n                self.beginEditAt(self.currentCell.columnIndex, self.currentCell.rowIndex);\n            }\n        };\n        self.scrollWheel = function (e) {\n            var l,\n                t,\n                deltaX = e.deltaX === undefined ? e.NativeEvent.deltaX : e.deltaX,\n                deltaY = e.deltaY === undefined ? e.NativeEvent.deltaY : e.deltaY,\n                deltaMode = e.deltaMode === undefined ? e.NativeEvent.deltaMode : e.deltaMode;\n            if (wheeling) {\n                return;\n            }\n            wheeling = setTimeout(function () {\n                if (self.dispatchEvent('wheel', {NativeEvent: e})) {\n                    return;\n                }\n                e = e.NativeEvent || e;\n                self.touchHaltAnimation = true;\n                l = self.scrollBox.scrollLeft;\n                t = self.scrollBox.scrollTop;\n                if (self.hasFocus) {\n                    //BUG Issue 42: https://github.com/TonyGermaneri/canvas-datagrid/issues/42\n                    //https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\n                    if (deltaMode === 1) {\n                        // line mode = 17 pixels per line\n                        deltaY = deltaY * 17;\n                    }\n                    self.scrollBox.scrollTo(deltaX + l, deltaY + t);\n                }\n                if (t !== self.scrollBox.scrollTop || l !== self.scrollBox.scrollLeft) {\n                    e.preventDefault();\n                }\n                wheeling = undefined;\n            }, 1);\n        };\n        self.copy = function (e) {\n            if (self.dispatchEvent('copy', {NativeEvent: e})) { return; }\n            if (!self.hasFocus || !e.clipboardData) { return; }\n            var rows = [], sData = self.getSelectedData();\n            if (sData.length > 0) {\n                sData.forEach(function (row) {\n                    if (row) {\n                        var r = [];\n                        Object.keys(row).forEach(function (key) {\n                            if (row[key] !== null\n                                    && row[key] !== false\n                                    && row[key] !== undefined\n                                    && row[key].replace) {\n                                return r.push('\"' + row[key].replace(/\"/g, '\"\"') + '\"');\n                            }\n                            r.push(row[key]);\n                        });\n                        r.join(',');\n                        rows.push(r);\n                    }\n                });\n                e.clipboardData.setData('text/plain', rows.join('\\n'));\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals HTMLElement: false, Reflect: false, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self, ctor) {\n        self.orders = {\n            rows: [],\n            columns: []\n        };\n        self.hasFocus = false;\n        self.activeCell = {\n            columnIndex: 0,\n            rowIndex: 0\n        };\n        self.storageName = 'canvasDataGrid';\n        self.invalidSearchExpClass = 'canvas-datagrid-invalid-search-regExp';\n        self.localStyleLibraryStorageKey = 'canvas-datagrid-user-style-library';\n        self.uniqueId = '_canvasDataGridUniqueId';\n        self.orderBy = self.uniqueId;\n        self.orderDirection = 'asc';\n        self.columnFilters = {};\n        self.filters = {};\n        self.ellipsisCache = {};\n        self.scrollBox = {};\n        self.visibleRows = [];\n        /**\n         * Used internally to keep track of sizes of row, columns and child grids.\n         * @memberof canvasDataGrid\n         * @property sizes\n         * @readonly\n         */\n        self.sizes = {\n            rows: {},\n            columns: {},\n            trees: {}\n        };\n        self.currentFilter = function () {\n            return true;\n        };\n        self.selections = [];\n        self.hovers = {};\n        self.attributes = {};\n        self.style = {};\n        self.formatters = {};\n        self.sorters = {};\n        self.schemaHashes = {};\n        self.events = {};\n        self.uId = 0;\n        self.changes = [];\n        self.scrollIndexTop = 0;\n        self.scrollPixelTop = 0;\n        self.scrollIndexLeft = 0;\n        self.scrollPixelLeft = 0;\n        self.childGrids = {};\n        self.openChildren = {};\n        self.scrollModes = [\n            'vertical-scroll-box',\n            'vertical-scroll-top',\n            'vertical-scroll-bottom',\n            'horizontal-scroll-box',\n            'horizontal-scroll-right',\n            'horizontal-scroll-left'\n        ];\n        self.mouse = { x: 0, y: 0};\n        self.getSelectedData = function (expandToRow) {\n            var d = [], s = self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                if (expandToRow) {\n                    s.forEach(function (column) {\n                        d[index][column.name] = self.data[index][column.name];\n                    });\n                } else {\n                    row.forEach(function (col) {\n                        if (col === -1 || !s[col]) { return; }\n                        d[index][s[col].name] = self.data[index][s[col].name];\n                    });\n                }\n            });\n            return d;\n        };\n        self.scrollOffset = function (e) {\n            var x = 0, y = 0;\n            while (e.parentNode && e.nodeName !== 'CANVAS-DATAGRID') {\n                if (e.nodeType !== 'canvas-datagrid-tree'\n                        && e.nodeType !== 'canvas-datagrid-cell') {\n                    x -= e.scrollLeft;\n                    y -= e.scrollTop;\n                }\n                e = e.parentNode;\n            }\n            return {left: x, top: y};\n        };\n        self.position = function (e, ignoreScrollOffset) {\n            var x = 0, y = 0, s = e, h, w;\n            while (e.offsetParent && e.nodeName !== 'CANVAS-DATAGRID') {\n                x += e.offsetLeft;\n                y += e.offsetTop;\n                h = e.offsetHeight;\n                w = e.offsetWidth;\n                e = e.offsetParent;\n            }\n            if (ignoreScrollOffset) {\n                return {left: x, top: y, height: h, width: w};\n            }\n            e = s;\n            s = self.scrollOffset(e);\n            return { left: x + s.left, top: y + s.top, height: h, width: w };\n        };\n        self.getLayerPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.clientX - rect.left,\n                    y: e.clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        self.fillArray = function (low, high, step) {\n            step = step || 1;\n            var i = [], x;\n            for (x = low; x <= high; x += step) {\n                i[x] = x;\n            }\n            return i;\n        };\n        self.getRowHeaderCellHeight = function () {\n            if (!self.attributes.showColumnHeaders) { return 0; }\n            return self.sizes.rows[-1] || self.style.columnHeaderCellHeight;\n        };\n        self.getColumnHeaderCellWidth = function () {\n            if (!self.attributes.showRowHeaders) { return 0; }\n            return self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth;\n        };\n        self.setStorageData = function () {\n            if (!self.attributes.saveAppearance) { return; }\n            localStorage.setItem(self.storageName + '-' + self.attributes.name, JSON.stringify({\n                sizes: {\n                    rows: self.sizes.rows,\n                    columns: self.sizes.columns\n                },\n                orders: {\n                    rows: self.orders.rows,\n                    columns: self.orders.columns\n                },\n                orderBy: self.orderBy,\n                orderDirection: self.orderDirection\n            }));\n        };\n        self.getSchema = function () {\n            return self.schema || self.tempSchema;\n        };\n        self.createColumnOrders = function () {\n            var s = self.getSchema();\n            self.orders.columns = self.fillArray(0, s.length - 1);\n        };\n        self.createRowOrders = function () {\n            self.orders.rows = self.fillArray(0, self.data.length - 1);\n        };\n        self.getVisibleSchema = function () {\n            return self.getSchema().filter(function (col) { return !col.hidden; });\n        };\n        self.applyDefaultValue = function (row, header) {\n            var d = header.defaultValue || '';\n            if (typeof d === 'function') {\n                d = d.apply(self.intf, [header]);\n            }\n            row[header.name] = d;\n        };\n        self.createNewRowData = function () {\n            self.newRow = {};\n            self.newRow[self.uniqueId] = self.uId;\n            self.uId += 1;\n            self.getSchema().forEach(function forEachHeader(header) {\n                self.applyDefaultValue(self.newRow, header);\n            });\n        };\n        self.getSchemaNameHash = function (key) {\n            var n = 0;\n            while (self.schemaHashes[key]) {\n                n += 1;\n                key = key + n;\n            }\n            return key;\n        };\n        self.filter = function (type) {\n            var f = self.filters[type];\n            if (!f && type !== undefined) {\n                console.warn('Cannot find filter for type %s, falling back to substring match.', type);\n                f = self.filters.string;\n            }\n            return f;\n        };\n        self.getBestGuessDataType = function (columnName) {\n            var t, x, l = self.data.length;\n            for (x = 0; x < l; x += 1) {\n                if ([null, undefined].indexOf(self.data[x][columnName]) !== -1) {\n                    t = typeof self.data[x];\n                    return t === 'object' ? 'string' : t;\n                }\n            }\n            return 'string';\n        };\n        self.drawChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].draw();\n            });\n        };\n        self.resizeChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].resize();\n            });\n        };\n        self.getClippingRect = function (ele) {\n            var boundingRect = self.position(self.parentNode),\n                eleRect = self.position(ele),\n                s = self.scrollOffset(self.canvas),\n                clipRect = {\n                    x: 0,\n                    y: 0,\n                    h: 0,\n                    w: 0\n                },\n                parentRect = {\n                    x: -Infinity,\n                    y: -Infinity,\n                    h: Infinity,\n                    w: Infinity\n                },\n                rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth();\n            boundingRect.top -= s.top;\n            boundingRect.left -= s.left;\n            eleRect.top -= s.top;\n            eleRect.left -= s.left;\n            clipRect.h = boundingRect.top + boundingRect.height - ele.offsetTop - self.style.scrollBarWidth;\n            clipRect.w = boundingRect.left + boundingRect.width - ele.offsetLeft - self.style.scrollBarWidth;\n            clipRect.x = boundingRect.left + (eleRect.left * -1) + columnHeaderCellWidth;\n            clipRect.y = boundingRect.top + (eleRect.top * -1) + rowHeaderCellHeight;\n            return {\n                x: clipRect.x > parentRect.x ? clipRect.x : parentRect.x,\n                y: clipRect.y > parentRect.y ? clipRect.y : parentRect.y,\n                h: clipRect.h < parentRect.h ? clipRect.h : parentRect.h,\n                w: clipRect.w < parentRect.w ? clipRect.w : parentRect.w\n            };\n        };\n        self.clipElement = function (ele) {\n            var clipRect = self.getClippingRect(ele);\n            if (clipRect.w < 0) { clipRect.w = 0; }\n            if (clipRect.h < 0) { clipRect.h = 0; }\n            ele.style.clip = 'rect('\n                + clipRect.y + 'px,'\n                + clipRect.w + 'px,'\n                + clipRect.h + 'px,'\n                + clipRect.x + 'px'\n                + ')';\n            // INFO https://developer.mozilla.org/en-US/docs/Web/CSS/clip\n            // clip has been \"deprecated\" for clipPath.  Of course nothing but chrome\n            // supports clip path, so we'll keep using clip until someday clipPath becomes\n            // more widely support.  The code below works correctly, but setting clipPath and clip\n            // at the same time has undesirable results.\n            // ele.style.clipPath = 'polygon('\n            //     + clipRect.x + 'px ' + clipRect.y + 'px,'\n            //     + clipRect.x + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.y + 'px'\n            //     + ')';\n        };\n        self.autoScrollZone = function (e, x, y, ctrl) {\n            var setTimer,\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth(),\n                rowHeaderCellHeight = self.getRowHeaderCellHeight();\n            if (x > self.width - self.attributes.selectionScrollZone && x < self.width) {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y > self.height - self.attributes.selectionScrollZone && y < self.height) {\n                self.scrollBox.scrollTop += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (x - self.attributes.selectionScrollZone - columnHeaderCellWidth < 0) {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y - self.attributes.selectionScrollZone - rowHeaderCellHeight < 0) {\n                self.scrollBox.scrollTop -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (setTimer && !ctrl && self.currentCell && self.currentCell.columnIndex !== -1) {\n                self.scrollTimer = setTimeout(self.mousemove, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.refreshFromOrigialData = function () {\n            self.data = self.originalData.filter(function (row) {\n                return true;\n            });\n        };\n        self.validateColumn = function (c, s) {\n            if (!c.name) {\n                throw new Error('A column must contain at least a name.');\n            }\n            if (s.filter(function (i) { return i.name === c.name; }).length > 0) {\n                throw new Error('A column with the name '\n                    + c.name + ' already exists and cannot be added again.');\n            }\n            return true;\n        };\n        self.setDefaults = function (obj1, obj2, key, def) {\n            obj1[key] = obj2[key] === undefined ? def : obj2[key];\n        };\n        self.setAttributes = function () {\n            self.defaults.attributes.forEach(function eachAttribute(i) {\n                self.setDefaults(self.attributes, self.args, i[0], i[1]);\n            });\n        };\n        self.setStyle = function () {\n            self.defaults.styles.forEach(function eachStyle(i) {\n                self.setDefaults(self.style, self.args.style || {}, i[0], i[1]);\n            });\n        };\n        self.autosize = function (colName) {\n            self.getVisibleSchema().forEach(function (col) {\n                if (col.name === colName || colName === undefined) {\n                    self.fitColumnToValues(col.name);\n                }\n            });\n            self.fitColumnToValues('cornerCell');\n        };\n        self.dispose = function () {\n            if (!self.isChildGrid && self.canvas && self.canvas.parentNode) {\n                self.canvas.parentNode.removeChild(self.canvas);\n            }\n            self.eventParent.removeEventListener('mouseup', self.mouseup, false);\n            self.eventParent.removeEventListener('mousedown', self.mousedown, false);\n            self.eventParent.removeEventListener('dblclick', self.dblclick, false);\n            self.eventParent.removeEventListener('click', self.click, false);\n            self.eventParent.removeEventListener('mousemove', self.mousemove);\n            self.eventParent.removeEventListener('wheel', self.scrollWheel, false);\n            self.canvas.removeEventListener('contextmenu', self.contextmenu, false);\n            self.canvas.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('keypress', self.keypress, false);\n            self.controlInput.removeEventListener('keyup', self.keyup, false);\n            self.controlInput.removeEventListener('keydown', self.keydown, false);\n            window.removeEventListener('resize', self.resize);\n            if (self.observer && self.observer.disconnect) {\n                self.observer.disconnect();\n            }\n        };\n        self.tryLoadStoredOrders = function () {\n            var s;\n            if (self.storedSettings && typeof self.storedSettings.orders === 'object') {\n                if (self.storedSettings.orders.rows.length >= self.data.length) {\n                    self.orders.rows = self.storedSettings.orders.rows;\n                }\n                s = self.getSchema();\n                if (self.storedSettings.orders.columns.length === s.length) {\n                    self.orders.columns = self.storedSettings.orders.columns;\n                }\n                self.orderBy = self.storedSettings.orderBy === undefined\n                    ? self.uniqueId : self.storedSettings.orderBy;\n                self.orderDirection = self.storedSettings.orderDirection === undefined\n                    ? self.uniqueId : self.storedSettings.orderDirection;\n                if (self.getHeaderByName(self.orderBy) && self.orderDirection) {\n                    self.order(self.orderBy, self.orderDirection);\n                }\n            }\n        };\n        self.getFontHeight = function (fontStyle) {\n            return parseFloat(fontStyle, 10);\n        };\n        self.parseFont = function (key) {\n            if (/Font/.test(key)) {\n                self.style[key + 'Height'] = self.getFontHeight(self.style[key]);\n            }\n        };\n        self.initProp = function (propName) {\n            if (!self.args[propName]) { return; }\n            Object.keys(self.args[propName]).forEach(function (key) {\n                self[propName][key] = self.args[propName][key];\n            });\n        };\n        self.init = function () {\n            if (self.initialized) { return; }\n            var publicStyleKeyIntf = {};\n            self.setAttributes();\n            self.setStyle();\n            self.initScrollBox();\n            self.setDom();\n            self.type = 'canvas-datagrid';\n            self.initialized = true;\n            self.pointerLockPosition = {x: 0, y: 0};\n            Object.keys(self.style).forEach(self.parseFont);\n            self.intf.type = self.type;\n            self.intf.addEventListener = self.addEventListener;\n            self.intf.removeEventListener = self.removeEventListener;\n            self.intf.dispatchEvent = self.dispatchEvent;\n            self.intf.dispose = self.dispose;\n            self.intf.appendTo = self.appendTo;\n            self.intf.filters = self.filters;\n            self.intf.sorters = self.sorters;\n            self.intf.autosize = self.autosize;\n            self.intf.beginEditAt = self.beginEditAt;\n            self.intf.endEdit = self.endEdit;\n            self.intf.setActiveCell = self.setActiveCell;\n            self.intf.scrollIntoView = self.scrollIntoView;\n            self.intf.clearChangeLog = self.clearChangeLog;\n            self.intf.gotoCell = self.gotoCell;\n            self.intf.gotoRow = self.gotoRow;\n            self.intf.findColumnScrollLeft = self.findColumnScrollLeft;\n            self.intf.findRowScrollTop = self.findRowScrollTop;\n            self.intf.fitColumnToValues = self.fitColumnToValues;\n            self.intf.findColumnMaxTextLength = self.findColumnMaxTextLength;\n            self.intf.disposeContextMenu = self.disposeContextMenu;\n            self.intf.getCellAt = self.getCellAt;\n            self.intf.isCellVisible = self.isCellVisible;\n            self.intf.order = self.order;\n            self.intf.draw = self.draw;\n            self.intf.selectArea = self.selectArea;\n            self.intf.clipElement = self.clipElement;\n            self.intf.getSchemaFromData = self.getSchemaFromData;\n            self.intf.setFilter = self.setFilter;\n            self.intf.selectRow = self.selectRow;\n            self.intf.parentGrid = self.parentGrid;\n            self.intf.toggleTree = self.toggleTree;\n            self.intf.expandTree = self.expandTree;\n            self.intf.collapseTree = self.collapseTree;\n            self.intf.canvas = self.canvas;\n            self.intf.context = self.ctx;\n            self.intf.insertRow = self.insertRow;\n            self.intf.deleteRow = self.deleteRow;\n            self.intf.addRow = self.addRow;\n            self.intf.insertColumn = self.insertColumn;\n            self.intf.deleteColumn = self.deleteColumn;\n            self.intf.addColumn = self.addColumn;\n            self.intf.getClippingRect = self.getClippingRect;\n            self.intf.setRowHeight = self.setRowHeight;\n            self.intf.setColumnWidth = self.setColumnWidth;\n            self.intf.resetColumnWidths = self.resetColumnWidths;\n            self.intf.resetRowHeights = self.resetRowHeights;\n            self.intf.resize = self.resize;\n            self.intf.selectColumn = self.selectColumn;\n            self.intf.selectRow = self.selectRow;\n            self.intf.selectAll = self.selectAll;\n            self.intf.drawChildGrids = self.drawChildGrids;\n            self.intf.assertPxColor = self.assertPxColor;\n            self.intf.clearPxColorAssertions = self.clearPxColorAssertions;\n            self.intf.integerToAlpha = self.integerToAlpha;\n            self.intf.copy = self.copy;\n            Object.keys(self.style).forEach(function (key) {\n                // unless this line is here, Object.keys() will not work on <instance>.style\n                publicStyleKeyIntf[key] = undefined;\n                Object.defineProperty(publicStyleKeyIntf, key, {\n                    get: function () {\n                        return self.style[key];\n                    },\n                    set: function (value) {\n                        self.parseFont(value);\n                        self.style[key] = value;\n                        self.draw(true);\n                        self.dispatchEvent('stylechanged', {name: key, value: value});\n                    }\n                });\n            });\n            Object.defineProperty(self.intf, 'shadowRoot', {\n                get: function () {\n                    return self.shadowRoot;\n                }\n            });\n            Object.defineProperty(self.intf, 'activeCell', {\n                get: function () {\n                    return self.activeCell;\n                }\n            });\n            /**\n             * When true, the grid is has focus.\n             * @memberof canvasDataGrid\n             * @property hasFocus\n             * @readonly\n             */\n            Object.defineProperty(self.intf, 'hasFocus', {\n                get: function () {\n                    return self.hasFocus;\n                }\n            });\n            Object.defineProperty(self.intf, 'style', {\n                get: function () {\n                    return publicStyleKeyIntf;\n                },\n                set: function (value) {\n                    Object.keys(value).forEach(function (key) {\n                        self.parseFont(value);\n                        self.style[key] = value[key];\n                    });\n                    self.draw(true);\n                    self.dispatchEvent('stylechanged', {name: 'style', value: value});\n                }\n            });\n            Object.defineProperty(self.intf, 'attributes', { value: {}});\n            Object.keys(self.attributes).forEach(function (key) {\n                Object.defineProperty(self.intf.attributes, key, {\n                    get: function () {\n                        return self.attributes[key];\n                    },\n                    set: function (value) {\n                        self.attributes[key] = value;\n                        self.draw(true);\n                        self.dispatchEvent('attributechanged', {name: key, value: value[key]});\n                    }\n                });\n            });\n            self.filters.string = function (value, filterFor) {\n                var filterRegExp,\n                    regEnd = /\\/(i|g|m)*$/,\n                    pattern = regEnd.exec(filterFor),\n                    flags = pattern ? pattern[0].substring(1) : '',\n                    flagLength = flags.length;\n                self.invalidFilterRegEx = undefined;\n                if (filterFor.substring(0, 1) === '/' && pattern) {\n                    try {\n                        filterRegExp = new RegExp(filterFor.substring(1, filterFor.length - (flagLength + 1)), flags);\n                    } catch (e) {\n                        self.invalidFilterRegEx = e;\n                        return;\n                    }\n                    return filterRegExp.test(value);\n                }\n                return value.toString ? value.toString().toLocaleUpperCase()\n                    .indexOf(filterFor.toLocaleUpperCase()) !== -1 : false;\n            };\n            self.filters.number = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                return value === filterFor;\n            };\n            if (self.attributes.name && self.attributes.saveAppearance) {\n                self.storedSettings = localStorage.getItem(self.storageName + '-' + self.attributes.name);\n                if (self.storedSettings) {\n                    try {\n                        self.storedSettings = JSON.parse(self.storedSettings);\n                    } catch (e) {\n                        console.warn('could not read settings from localStore', e);\n                        self.storedSettings = undefined;\n                    }\n                }\n                if (self.storedSettings) {\n                    if (typeof self.storedSettings.sizes === 'object') {\n                        self.sizes.rows = self.storedSettings.sizes.rows;\n                        self.sizes.columns = self.storedSettings.sizes.columns;\n                        ['trees', 'columns', 'rows'].forEach(function (i) {\n                            if (!self.sizes[i]) {\n                                self.sizes[i] = {};\n                            }\n                        });\n                    }\n                }\n            }\n            ['formatters', 'filters', 'sorters'].forEach(self.initProp);\n            if (self.args.data) {\n                self.intf.data = self.args.data;\n            }\n            if (!self.data) {\n                self.intf.data = [];\n            }\n            if (self.args.schema) {\n                self.intf.schema = self.args.schema;\n            }\n            if (self.isChildGrid) {\n                requestAnimationFrame(function () { self.resize(true); });\n            } else {\n                self.resize(true);\n            }\n            return self;\n        };\n        /**\n         * Removes focus from the grid.\n         * @memberof canvasDataGrid\n         * @name blur\n         * @method\n         */\n        self.intf.blur = function (e) {\n            self.hasFocus = false;\n        };\n        /**\n         * Focuses on the grid.\n         * @memberof canvasDataGrid\n         * @name focus\n         * @method\n         */\n        self.intf.focus = function () {\n            self.hasFocus = true;\n            self.controlInput.focus();\n        };\n        Object.defineProperty(self.intf, 'height', {\n            get: function () {\n                return self.parentNode.height;\n            },\n            set: function (value) {\n                self.parentNode.height = value;\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'width', {\n            get: function () {\n                return self.parentNode.width;\n            },\n            set: function (value) {\n                self.parentNode.width = value;\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'openChildren', {\n            get: function () {\n                return self.openChildren;\n            }\n        });\n        Object.defineProperty(self.intf, 'childGrids', {\n            get: function () {\n                return Object.keys(self.childGrids).map(function (gridId) {\n                    return self.childGrids[gridId];\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'isChildGrid', {\n            get: function () {\n                return self.isChildGrid;\n            }\n        });\n        Object.defineProperty(self.intf, 'parentNode', {\n            get: function () {\n                return self.parentNode;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetParent', {\n            get: function () {\n                return self.parentNode;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetLeft', {\n            get: function () {\n                return self.parentNode.offsetLeft;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetTop', {\n            get: function () {\n                return self.parentNode.offsetTop;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollHeight', {\n            get: function () {\n                return self.scrollBox.scrollHeight;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollWidth', {\n            get: function () {\n                return self.scrollBox.scrollWidth;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollTop', {\n            get: function () {\n                return self.scrollBox.scrollTop;\n            },\n            set: function (value) {\n                self.scrollBox.scrollTop = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollLeft', {\n            get: function () {\n                return self.scrollBox.scrollLeft;\n            },\n            set: function (value) {\n                self.scrollBox.scrollLeft = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'sizes', {\n            get: function () {\n                return self.sizes;\n            }\n        });\n        Object.defineProperty(self.intf, 'input', {\n            get: function () {\n                return self.input;\n            }\n        });\n        Object.defineProperty(self.intf, 'controlInput', {\n            get: function () {\n                return self.controlInput;\n            }\n        });\n        Object.defineProperty(self.intf, 'currentCell', {\n            get: function () {\n                return self.currentCell;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleCells', {\n            get: function () {\n                return self.visibleCells;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRows', {\n            get: function () {\n                return self.visibleRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'selections', {\n            get: function () {\n                return self.selections;\n            }\n        });\n        Object.defineProperty(self.intf, 'dragMode', {\n            get: function () {\n                return self.dragMode;\n            }\n        });\n        Object.defineProperty(self.intf, 'changes', {\n            get: function () {\n                return self.changes;\n            }\n        });\n        self.intf.formatters = self.formatters;\n        self.normalizeDataset = function (data, callback) {\n            var i, d, max, syncFnInvoked;\n            if (data === null || data === '' || data === undefined) {\n                return callback([]);\n            }\n            if (typeof data === 'string'\n                    || typeof data === 'number'\n                    || typeof data === 'boolean') {\n                data = [{'0': data}];\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if ((!Array.isArray(data[0]) && typeof data[0] === 'object' && data[0] !== null)\n                            || (Array.isArray(data) && data.length === 0)) {\n                return callback(data);\n            }\n            if (typeof data === 'function') {\n                i = data.apply(self.intf, [function (d) {\n                    if (syncFnInvoked) {\n                        console.warn('Detected a callback to the data setter function after the same function already returned a value synchronously.');\n                    }\n                    self.normalizeDataset(d, callback);\n                }]);\n                if (i) {\n                    syncFnInvoked = true;\n                    self.normalizeDataset(i, callback);\n                }\n                return;\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if (Array.isArray(data)) {\n                if (!Array.isArray(data[0])) {\n                    //array of something?  throw it all into 1 row!\n                    data = [data];\n                }\n                // find the longest length\n                max = 0;\n                d = [];\n                data.forEach(function (row) {\n                    max = Math.max(max, row.length);\n                });\n                // map against length indexes\n                data.forEach(function (row, index) {\n                    var x;\n                    d[index] = {};\n                    for (x = 0; x < max; x += 1) {\n                        d[index][x] = row[x];\n                    }\n                });\n                return callback(d);\n            }\n            throw new Error('Unsupported data type.  Must be an array of arrays or an array of objects, function or string.');\n        };\n        Object.defineProperty(self.intf, 'selectionBounds', {\n            get: function () {\n                return self.getSelectionBounds();\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedRows', {\n            get: function () {\n                return self.getSelectedData(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedCells', {\n            get: function () {\n                return self.getSelectedData();\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleSchema', {\n            get: function () {\n                return self.getVisibleSchema().map(function eachDataRow(col) {\n                    return col;\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'ctx', {\n            get: function () {\n                return self.ctx;\n            }\n        });\n        Object.defineProperty(self.intf, 'schema', {\n            get: function schemaGetter() {\n                return self.getSchema();\n            },\n            set: function schemaSetter(value) {\n                if (!Array.isArray(value) || typeof value[0] !== 'object') {\n                    throw new Error('Schema must be an array of objects.');\n                }\n                if (value[0].name === undefined) {\n                    throw new Error('Expected schema to contain an object with at least a name property.');\n                }\n                self.schema = value.map(function eachSchemaColumn(column, index) {\n                    column.width = column.width || self.style.columnWidth;\n                    column[self.uniqueId] = self.getSchemaNameHash(column.name);\n                    column.filter = column.filter || self.filter(column.type);\n                    column.type = column.type || 'string';\n                    column.index = index;\n                    column.columnIndex = index;\n                    column.rowIndex = -1;\n                    return column;\n                });\n                self.tempSchema = undefined;\n                self.createNewRowData();\n                self.createColumnOrders();\n                self.tryLoadStoredOrders();\n                self.resize(true);\n                self.dispatchEvent('schemachanged', {schema: self.schema});\n            }\n        });\n        Object.defineProperty(self.intf, 'data', {\n            get: function dataGetter() {\n                return self.data.map(function (row) {\n                    delete row[self.uniqueId];\n                    return row;\n                });\n            },\n            set: function dataSetter(value) {\n                self.normalizeDataset(value, function (d) {\n                    self.originalData = d.map(function eachDataRow(row) {\n                        row[self.uniqueId] = self.uId;\n                        self.uId += 1;\n                        return row;\n                    });\n                    self.changes = [];\n                    //TODO apply filter to incoming dataset\n                    self.data = self.originalData;\n                    if (!self.schema) {\n                        self.tempSchema = self.getSchemaFromData();\n                    }\n                    if (!self.schema && self.data.length === 0) {\n                        self.tempSchema = [{name: ''}];\n                        self.tempSchema[0][self.uniqueId] = self.getSchemaNameHash('');\n                    }\n                    if (self.tempSchema && !self.schema) {\n                        self.createColumnOrders();\n                        self.tryLoadStoredOrders();\n                        self.dispatchEvent('schemachanged', {schema: self.tempSchema});\n                    }\n                    self.createNewRowData();\n                    if (self.attributes.autoResizeColumns && self.data.length > 0\n                            && self.storedSettings === undefined) {\n                        self.autosize();\n                    }\n                    self.fitColumnToValues('cornerCell', true);\n                    if (!self.resize() || !self.isChildGrid) { self.draw(true); }\n                    self.createRowOrders();\n                    self.tryLoadStoredOrders();\n                    self.dispatchEvent('datachanged', {data: self.data});\n                });\n            }\n        });\n        self.initScrollBox = function () {\n            var sHeight = 0,\n                sWidth = 0,\n                scrollTop = 0,\n                scrollLeft = 0,\n                scrollHeight = 0,\n                scrollWidth = 0,\n                scrollBoxHeight = 20,\n                scrollBoxWidth = 20;\n            function setScrollTop(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollTop value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollHeight) {\n                    value = scrollHeight;\n                }\n                if (scrollHeight < 0) {\n                    value = 0;\n                }\n                scrollTop = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            function setScrollLeft(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollLeft value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollWidth) {\n                    value = scrollWidth;\n                }\n                if (scrollWidth < 0) {\n                    value = 0;\n                }\n                scrollLeft = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            self.scrollBox.toString = function () {\n                return '{\"width\": ' + scrollWidth\n                    + ', \"height\": ' + scrollHeight\n                    + ', \"left\": ' + scrollLeft\n                    + ', \"top\": ' + scrollTop + '}';\n            };\n            self.scrollBox.scrollTo = function (x, y) {\n                setScrollLeft(x, true);\n                setScrollTop(y);\n            };\n            Object.defineProperty(self.scrollBox, 'scrollBoxHeight', {\n                get: function () {\n                    return scrollBoxHeight;\n                },\n                set: function (value) {\n                    scrollBoxHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollBoxWidth', {\n                get: function () {\n                    return scrollBoxWidth;\n                },\n                set: function (value) {\n                    scrollBoxWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'height', {\n                get: function () {\n                    return sHeight;\n                },\n                set: function (value) {\n                    if (scrollHeight < value) {\n                        scrollTop = 0;\n                    }\n                    sHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'width', {\n                get: function () {\n                    return sWidth;\n                },\n                set: function (value) {\n                    sWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollTop', {\n                get: function () {\n                    return scrollTop;\n                },\n                set: setScrollTop\n            });\n            Object.defineProperty(self.scrollBox, 'scrollLeft', {\n                get: function () {\n                    return scrollLeft;\n                },\n                set: setScrollLeft\n            });\n            Object.defineProperty(self.scrollBox, 'scrollHeight', {\n                get: function () {\n                    return scrollHeight;\n                },\n                set: function (value) {\n                    if (scrollTop > value) {\n                        scrollTop = Math.max(value, 0);\n                    }\n                    if (scrollHeight < sHeight) {\n                        scrollTop = 0;\n                    }\n                    scrollHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollWidth', {\n                get: function () {\n                    return scrollWidth;\n                },\n                set: function (value) {\n                    if (scrollLeft > value) {\n                        scrollLeft = Math.max(value, 0);\n                    }\n                    scrollWidth = value;\n                }\n            });\n        };\n        return;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false, Event: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var zIndexTop = 2, hoverScrollTimeout, autoCompleteContext;\n        function createContextMenu(ev, pos, items, parentContextMenu) {\n            var container = document.createElement('div'),\n                upArrow = document.createElement('div'),\n                downArrow = document.createElement('div'),\n                children = [],\n                selectedIndex = -1,\n                intf = {},\n                rect;\n            if (!Array.isArray(items)) { throw new Error('createContextMenu expects an array.'); }\n            function createItems() {\n                items.forEach(function (item) {\n                    var contextItemContainer = document.createElement('div'),\n                        childMenuArrow;\n                    function removeChildContext(e) {\n                        if (e.relatedTarget === container\n                                || item.contextMenu.container === e.relatedTarget\n                                || childMenuArrow === e.relatedTarget\n                                || (contextItemContainer === e.relatedTarget)\n                                ) { return; }\n                        item.contextMenu.dispose();\n                        children.splice(children.indexOf(item.contextMenu), 1);\n                        item.contextMenu = undefined;\n                        contextItemContainer.removeEventListener('mouseout', removeChildContext);\n                        container.removeEventListener('mouseout', removeChildContext);\n                        contextItemContainer.setAttribute('contextOpen', '0');\n                        contextItemContainer.setAttribute('opening', '0');\n                    }\n                    function contextAddCallback(items) {\n                        // check yet again if the user hasn't moved off\n                        if (contextItemContainer.getAttribute('opening') !== '1' ||\n                                contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        var cPos = contextItemContainer.getBoundingClientRect();\n                        cPos = {\n                            left: cPos.left + self.style.childContextMenuMarginLeft + container.offsetWidth,\n                            top: cPos.top + self.style.childContextMenuMarginTop,\n                            bottom: cPos.bottom,\n                            right: cPos.right\n                        };\n                        item.contextMenu = createContextMenu(ev, cPos, items, intf);\n                        contextItemContainer.setAttribute('contextOpen', '1');\n                        contextItemContainer.addEventListener('mouseout', removeChildContext);\n                        container.addEventListener('mouseout', removeChildContext);\n                        children.push(item.contextMenu);\n                    }\n                    function createChildContext() {\n                        var i;\n                        if (contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        contextItemContainer.setAttribute('opening', '1');\n                        if (typeof item.items === 'function') {\n                            i  = item.items.apply(intf, [function (items) {\n                                contextAddCallback(items);\n                            }]);\n                            if (i !== undefined && Array.isArray(i)) {\n                                contextAddCallback(i);\n                            }\n                            return;\n                        }\n                        contextAddCallback(item.items);\n                    }\n                    function addItem(item) {\n                        function addContent(content) {\n                            if (typeof content === 'function') {\n                                return addContent(content(ev));\n                            }\n                            if (typeof content === 'object') {\n                                contextItemContainer.appendChild(content);\n                                return;\n                            }\n                            self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n                            contextItemContainer.addEventListener('mouseover', function () {\n                                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                            });\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n                            });\n                            contextItemContainer.innerHTML = content;\n                            return;\n                        }\n                        addContent(item.title);\n                        item.contextItemContainer = contextItemContainer;\n                        if ((item.items && item.items.length > 0) || typeof item.items === 'function') {\n                            childMenuArrow = document.createElement('div');\n                            self.createInlineStyle(childMenuArrow, 'canvas-datagrid-context-child-arrow');\n                            childMenuArrow.innerHTML = self.style.childContextMenuArrowHTML;\n                            contextItemContainer.appendChild(childMenuArrow);\n                            contextItemContainer.addEventListener('mouseover', createChildContext);\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                contextItemContainer.setAttribute('opening', '0');\n                            });\n                        }\n                        if (item.click) {\n                            contextItemContainer.addEventListener('click', function (ev) {\n                                item.click.apply(self, [ev]);\n                            });\n                        }\n                    }\n                    addItem(item);\n                    container.appendChild(contextItemContainer);\n                });\n            }\n            function clickIndex(idx) {\n                items[idx].contextItemContainer.dispatchEvent(new Event('click'));\n            }\n            function checkArrowVisibility() {\n                if (container.scrollTop > 0) {\n                    self.parentDOMNode.appendChild(upArrow);\n                } else if (upArrow.parentNode) {\n                    upArrow.parentNode.removeChild(upArrow);\n                }\n                if (container.scrollTop >= container.scrollHeight - container.offsetHeight && downArrow.parentNode) {\n                    downArrow.parentNode.removeChild(downArrow);\n                } else if (container.scrollHeight - container.offsetHeight > 0\n                        && !(container.scrollTop >= container.scrollHeight - container.offsetHeight)) {\n                    self.parentDOMNode.appendChild(downArrow);\n                }\n            }\n            function startHoverScroll(type) {\n                return function t() {\n                    var a = self.attributes.contextHoverScrollAmount;\n                    if (type === 'up' && container.scrollTop === 0) { return; }\n                    if (type === 'down' && container.scrollTop === container.scrollHeight) { return; }\n                    container.scrollTop += (type === 'up' ? -a : a);\n                    hoverScrollTimeout = setTimeout(t, self.attributes.contextHoverScrollRateMs, type);\n                };\n            }\n            function endHoverScroll(type) {\n                return function () {\n                    clearTimeout(hoverScrollTimeout);\n                };\n            }\n            function init() {\n                var loc = {},\n                    s = self.scrollOffset(self.canvas);\n                createItems();\n                self.createInlineStyle(container, 'canvas-datagrid-context-menu');\n                loc.x = pos.left - s.left;\n                loc.y = pos.top - s.top;\n                loc.height = 0;\n                zIndexTop += 1;\n                container.style.position = 'absolute';\n                upArrow.style.color = self.style.contextMenuArrowColor;\n                downArrow.style.color = self.style.contextMenuArrowColor;\n                [upArrow, downArrow].forEach(function (el) {\n                    el.style.textAlign = 'center';\n                    el.style.position = 'absolute';\n                    el.style.zIndex = zIndexTop + 1;\n                });\n                container.style.zIndex = zIndexTop;\n                if (parentContextMenu && parentContextMenu.inputDropdown) {\n                    container.style.maxHeight = window.innerHeight - loc.y - self.style.autocompleteBottomMargin + 'px';\n                    container.style.minWidth = pos.width + 'px';\n                    loc.y += pos.height;\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                container.addEventListener('scroll', checkArrowVisibility);\n                container.addEventListener('wheel', function (e) {\n                    if (self.hasFocus) {\n                        container.scrollTop += e.deltaY;\n                        container.scrollLeft += e.deltaX;\n                    }\n                    checkArrowVisibility();\n                });\n                upArrow.innerHTML = self.style.contextMenuArrowUpHTML;\n                downArrow.innerHTML = self.style.contextMenuArrowDownHTML;\n                container.appendChild(upArrow);\n                self.parentDOMNode.appendChild(downArrow);\n                self.parentDOMNode.appendChild(container);\n                rect = container.getBoundingClientRect();\n                if (rect.bottom > window.innerHeight && !(parentContextMenu && parentContextMenu.inputDropdown)) {\n                    loc.y = window.innerHeight - container.offsetHeight;\n                    if (loc.y < 0) { loc.y = 0; }\n                    if (container.offsetHeight > window.innerHeight) {\n                        container.style.height = window.innerHeight - self.style.contextMenuWindowMargin + 'px';\n                    }\n                }\n                if (rect.right > window.innerWidth) {\n                    if (parentContextMenu) {\n                        loc.x = parentContextMenu.container.offsetLeft - container.offsetWidth;\n                    } else {\n                        loc.x = window.innerWidth - container.offsetWidth;\n                    }\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                rect = container.getBoundingClientRect();\n                upArrow.style.top = rect.top + 'px';\n                downArrow.style.top = rect.top + rect.height - downArrow.offsetHeight + 'px';\n                upArrow.style.left = rect.left + 'px';\n                downArrow.style.left = rect.left + 'px';\n                downArrow.style.width = container.offsetWidth + 'px';\n                upArrow.style.width = container.offsetWidth + 'px';\n                downArrow.addEventListener('mouseover', startHoverScroll('down'));\n                downArrow.addEventListener('mouseout', endHoverScroll('down'));\n                upArrow.addEventListener('mouseover', startHoverScroll('up'));\n                upArrow.addEventListener('mouseout', endHoverScroll('up'));\n                checkArrowVisibility();\n            }\n            intf.parentGrid = self.intf;\n            intf.parentContextMenu = parentContextMenu;\n            intf.container = container;\n            init();\n            intf.clickIndex = clickIndex;\n            intf.rect = rect;\n            intf.items = items;\n            intf.upArrow = upArrow;\n            intf.downArrow = downArrow;\n            intf.dispose = function () {\n                clearTimeout(hoverScrollTimeout);\n                children.forEach(function (c) {\n                    c.dispose();\n                });\n                [downArrow, upArrow, container].forEach(function (el) {\n                    if (el.parentNode) { el.parentNode.removeChild(el); }\n                });\n            };\n            Object.defineProperty(intf, 'selectedIndex', {\n                get: function () {\n                    return selectedIndex;\n                },\n                set: function (value) {\n                    if (typeof value !== 'number' || isNaN(value || !isFinite(value))) {\n                        throw new Error('Context menu selected index must be a sane number.');\n                    }\n                    selectedIndex = value;\n                    if (selectedIndex > items.length - 1) {\n                        selectedIndex = items.length - 1;\n                    }\n                    if (selectedIndex < 0) {\n                        selectedIndex = 0;\n                    }\n                    items.forEach(function (item, index) {\n                        if (index === selectedIndex) {\n                            return self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                        }\n                        self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item');\n                    });\n                }\n            });\n            return intf;\n        }\n        function createFilterContextMenuItems(e) {\n            var filterContainer = document.createElement('div'),\n                filterLabel = document.createElement('div'),\n                filterAutoCompleteButton = document.createElement('button'),\n                filterInput = document.createElement('input'),\n                n = e.cell && e.cell.header ? e.cell.header.title || e.cell.header.name : '',\n                autoCompleteItems,\n                iRect;\n            function checkRegExpErrorState() {\n                filterInput.style.background = self.style.contextFilterInputBackground;\n                filterInput.style.color = self.style.contextFilterInputColor;\n                if (self.invalidFilterRegEx) {\n                    filterInput.style.background = self.style.contextFilterInvalidRegExpBackground;\n                    filterInput.style.color = self.style.contextFilterInvalidRegExpColor;\n                }\n            }\n            function fillAutoComplete() {\n                autoCompleteItems = {};\n                self.data.filter(function (d, i) { return i < self.attributes.maxAutoCompleteItems; }).forEach(function (row) {\n                    var value = row[e.cell.header.name];\n                    if (autoCompleteItems[value]) { return; }\n                    autoCompleteItems[value] = {\n                        title: self.formatters[e.cell.header.type || 'string']({ cell: { value: value }}),\n                        click: function (e) {\n                            filterInput.value = value;\n                            e.stopPropagation();\n                            filterInput.dispatchEvent(new Event('keyup'));\n                            self.disposeAutocomplete();\n                            return;\n                        }\n                    };\n                });\n                autoCompleteItems = Object.keys(autoCompleteItems).map(function (key) {\n                    return autoCompleteItems[key];\n                });\n            }\n            function createAutoCompleteContext(ev) {\n                if (ev && [40, 38, 13, 9, 27].indexOf(ev.keyCode) !== -1) { return; }\n                fillAutoComplete();\n                iRect = filterInput.getBoundingClientRect();\n                if (autoCompleteContext) {\n                    autoCompleteContext.dispose();\n                    autoCompleteContext = undefined;\n                }\n                autoCompleteContext = createContextMenu(e, {\n                    left: iRect.left,\n                    top: iRect.top,\n                    right: iRect.right,\n                    bottom: iRect.bottom,\n                    height: iRect.height,\n                    width: iRect.width\n                }, autoCompleteItems, {inputDropdown: true});\n                autoCompleteContext.selectedIndex = 0;\n            }\n            self.createInlineStyle(filterLabel, 'canvas-datagrid-context-menu-label');\n            self.createInlineStyle(filterAutoCompleteButton, 'canvas-datagrid-context-menu-filter-button');\n            self.createInlineStyle(filterInput, 'canvas-datagrid-context-menu-filter-input');\n            checkRegExpErrorState();\n            filterInput.onclick = self.disposeAutocomplete;\n            filterInput.addEventListener('keydown', function (e) {\n                //down\n                if (e.keyCode === 40) {\n                    autoCompleteContext.selectedIndex += 1;\n                }\n                //up\n                if (e.keyCode === 38) {\n                    autoCompleteContext.selectedIndex -= 1;\n                }\n                //enter\n                if (e.keyCode === 13) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    self.disposeContextMenu();\n                }\n                //tab\n                if (e.keyCode === 9) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    e.preventDefault();\n                }\n                //esc\n                if (e.keyCode === 27) {\n                    self.disposeContextMenu();\n                }\n            });\n            filterInput.addEventListener('keyup', function () {\n                self.setFilter(e.cell.header.name, filterInput.value);\n            });\n            filterInput.addEventListener('keyup', createAutoCompleteContext);\n            ['focus', 'blur', 'keydown', 'keyup', 'change'].forEach(function (en) {\n                filterInput.addEventListener(en, checkRegExpErrorState);\n            });\n            filterInput.value = e.cell.header ? self.columnFilters[e.cell.header.name] || '' : '';\n            filterLabel.innerHTML = self.attributes.filterOptionText.replace(/%s/g, n);\n            filterAutoCompleteButton.onclick = function () {\n                if (autoCompleteContext) {\n                    return self.disposeAutocomplete();\n                }\n                createAutoCompleteContext();\n            };\n            filterAutoCompleteButton.innerHTML = self.style.contextFilterButtonHTML;\n            filterContainer.addEventListener('click', function (e) {\n                return e.stopPropagation();\n            });\n            filterContainer.appendChild(filterLabel);\n            filterContainer.appendChild(filterInput);\n            filterContainer.appendChild(filterAutoCompleteButton);\n            e.items.push({\n                title: filterContainer\n            });\n            if (Object.keys(self.columnFilters).length) {\n                Object.keys(self.columnFilters).forEach(function (cf) {\n                    var h = self.getHeaderByName(cf);\n                    e.items.push({\n                        title: self.attributes.removeFilterOptionText.replace(/%s/g, h.title || h.name),\n                        click: function removeFilterClick(e) {\n                            e.preventDefault();\n                            self.setFilter(cf, '');\n                            self.controlInput.focus();\n                        }\n                    });\n                });\n            }\n        }\n        function addDefaultContextMenuItem(e) {\n            var isNormalCell = !(e.cell.isBackground || e.cell.isHeaderCellCap\n                    || e.cell.isScrollBar || e.cell.isCorner || e.cell.isRowHeader)\n                    && e.cell.header;\n            if (self.attributes.showFilter && isNormalCell) {\n                createFilterContextMenuItems(e);\n            }\n            if (self.attributes.showCopy\n                    && self.selections.reduce(function (p, r) {\n                        return p + r.length;\n                    }, 0) > 0) {\n                e.items.push({\n                    title: self.attributes.copyText,\n                    click: function () {\n                        document.execCommand('copy');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.saveAppearance && self.attributes.showClearSettingsOption\n                    && (Object.keys(self.sizes.rows).length > 0\n                        || Object.keys(self.sizes.columns).length > 0)) {\n                e.items.push({\n                    title: self.attributes.clearSettingsOptionText,\n                    click: function (e) {\n                        e.preventDefault();\n                        self.sizes.rows = {};\n                        self.sizes.columns = {};\n                        self.createRowOrders();\n                        self.createColumnOrders();\n                        self.storedSettings = undefined;\n                        self.dispatchEvent('resizecolumn', {columnWidth: self.style.columnWidth});\n                        self.dispatchEvent('resizerow', {cellHeight: self.style.cellHeight});\n                        self.setStorageData();\n                        self.resize(true);\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.allowSorting && self.attributes.showOrderByOption && isNormalCell) {\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextAsc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'asc');\n                        self.controlInput.focus();\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextDesc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'desc');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n        }\n        self.disposeAutocomplete = function () {\n            if (autoCompleteContext) {\n                autoCompleteContext.dispose();\n                autoCompleteContext = undefined;\n            }\n        };\n        self.disposeContextMenu = function () {\n            document.removeEventListener('click', self.disposeContextMenu);\n            zIndexTop = 2;\n            self.disposeAutocomplete();\n            if (self.contextMenu) {\n                self.contextMenu.dispose();\n            }\n            self.contextMenu = undefined;\n        };\n        self.contextmenuEvent = function (e, overridePos) {\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            function createDiposeEvent() {\n                requestAnimationFrame(function () {\n                    document.addEventListener('click', self.disposeContextMenu);\n                    document.removeEventListener('mouseup', createDiposeEvent);\n                });\n            }\n            var items = [],\n                pos = overridePos || self.getLayerPos(e, true),\n                ev = {\n                    NativeEvent: e,\n                    cell: self.getCellAt(pos.x, pos.y),\n                    items: items\n                };\n            if (!ev.cell.isGrid) {\n                addDefaultContextMenuItem(ev);\n            }\n            if (self.dispatchEvent('contextmenu', ev)) {\n                return;\n            }\n            if (!ev.cell.isGrid) {\n                if (self.contextMenu) {\n                    self.disposeContextMenu();\n                }\n                self.contextMenu = createContextMenu(ev, {\n                    left: pos.x + pos.rect.left + self.style.contextMenuMarginLeft + self.canvasOffsetLeft,\n                    top: pos.y + pos.rect.top + self.style.contextMenuMarginTop + self.canvasOffsetTop,\n                    right: ev.cell.width + ev.cell.x + pos.rect.left,\n                    bottom: ev.cell.height + ev.cell.y + pos.rect.top,\n                    height: ev.cell.height,\n                    width: ev.cell.width\n                }, items);\n                document.addEventListener('mouseup', createDiposeEvent);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        /**\n         * Ends editing, optionally aborting the edit.\n         * @memberof canvasDataGrid\n         * @name endEdit\n         * @method\n         * @param {boolean} abort When true, abort the edit.\n         */\n        self.endEdit = function (abort) {\n            var cell = self.input.editCell,\n                y = cell.rowIndex;\n            function abortEdit() {\n                abort = true;\n            }\n            if (self.dispatchEvent('beforeendedit', {\n                    cell: cell,\n                    newValue: self.input.value,\n                    oldValue: cell.value,\n                    abort: abortEdit,\n                    input: self.input\n                })) { return false; }\n            if (self.input.value !== cell.value && !abort) {\n                self.changes[y] = self.changes[y] || {};\n                self.changes[y][cell.header.name] = self.input.value;\n                cell.data[cell.header.name] = self.input.value;\n                if (y === self.data.length) {\n                    if (self.dispatchEvent('newrow', {\n                            value: self.input.value,\n                            defaultValue: cell.value,\n                            aborted: abort,\n                            cell: cell,\n                            input: self.input\n                        })) { return false; }\n                    self.uId += 1;\n                    self.addRow(cell.data);\n                    self.createNewRowData();\n                }\n                self.draw(true);\n            }\n            self.parentDOMNode.removeChild(self.input);\n            self.controlInput.focus();\n            self.dispatchEvent('endedit', {\n                cell: cell,\n                value: self.input.value,\n                aborted: abort,\n                input: self.input\n            });\n            self.input = undefined;\n            return true;\n        };\n        /**\n         * Begins editing at cell x, row y.\n         * @memberof canvasDataGrid\n         * @name beginEditAt\n         * @method\n         * @param {number} x The column index of the cell to edit.\n         * @param {number} y The row index of the cell to edit.\n         */\n        self.beginEditAt = function (x, y) {\n            if (!self.attributes.editable) { return; }\n            var cell = self.getVisibleCellByIndex(x, y),\n                s = self.getVisibleSchema(),\n                enumItems,\n                //HACK for IE10, does not like literal enum\n                enu = cell.header['enum'];\n            if (self.dispatchEvent('beforebeginedit', {cell: cell})) { return false; }\n            self.scrollIntoView(x, y);\n            self.setActiveCell(x, y);\n            if (enu) {\n                self.input = document.createElement('select');\n            } else {\n                self.input = document.createElement(self.attributes.multiLine\n                    ? 'textarea' : 'input');\n            }\n            function postDraw() {\n                var option, valueInEnum;\n                cell = self.getVisibleCellByIndex(x, y);\n                if (enu) {\n                    // add enums\n                    if (typeof enu === 'function') {\n                        enumItems = enu.apply(self.intf, [{cell: cell}]);\n                    } else if (Array.isArray(enu)) {\n                        enumItems = enu;\n                    }\n                    enumItems.forEach(function (e) {\n                        var i = document.createElement('option'),\n                            val,\n                            title;\n                        if (Array.isArray(e)) {\n                            val = e[0];\n                            title = e[1];\n                        } else {\n                            val = e;\n                            title = e;\n                        }\n                        if (val === cell.value) { valueInEnum = true; }\n                        i.value = val;\n                        i.innerHTML = title;\n                        self.input.appendChild(i);\n                    });\n                    if (!valueInEnum) {\n                        option = document.createElement('option');\n                        option.value = cell.value;\n                        option.innerHTML = cell.value;\n                        self.input.appendChild(option);\n                    }\n                    self.input.addEventListener('change', function () {\n                        self.endEdit();\n                        self.draw(true);\n                    });\n                }\n                self.parentDOMNode.appendChild(self.input);\n                self.createInlineStyle(self.input, 'canvas-datagrid-edit-input');\n                self.input.style.position = 'absolute';\n                self.input.editCell = cell;\n                self.resizeEditInput();\n                self.input.style.zIndex = '2';\n                self.input.value = cell.value;\n                self.input.focus();\n                self.input.addEventListener('click', self.stopPropagation);\n                self.input.addEventListener('dblclick', self.stopPropagation);\n                self.input.addEventListener('mouseup', self.stopPropagation);\n                self.input.addEventListener('mousedown', self.stopPropagation);\n                self.input.addEventListener('keydown', function (e) {\n                    var nx = cell.columnIndex,\n                        ny = cell.rowIndex;\n                    // esc\n                    if (e.keyCode === 27) {\n                        self.endEdit(true);\n                        self.draw(true);\n                    // enter\n                    } else if (e.keyCode === 13\n                            && (!self.attributes.multiLine\n                                || (self.attributes.multiLine && e.shiftKey))) {\n                        self.endEdit();\n                        self.draw(true);\n                    } else if (e.keyCode === 9) {\n                        e.preventDefault();\n                        if (!self.endEdit()) {\n                            return;\n                        }\n                        if (e.shiftKey) {\n                            nx -= 1;\n                        } else {\n                            nx += 1;\n                        }\n                        if (nx < 0) {\n                            nx = s.length - 1;\n                            ny -= 1;\n                        }\n                        if (nx > s.length - 1) {\n                            nx = 0;\n                            ny += 1;\n                        }\n                        if (ny < 0) {\n                            ny = self.data.length - 1;\n                        }\n                        if (ny > self.data.length - 1) {\n                            ny = 0;\n                        }\n                        self.scrollIntoView(nx, ny);\n                        self.beginEditAt(nx, ny);\n                    }\n                });\n            }\n            postDraw();\n            self.dispatchEvent('beginedit', {cell: cell, input: self.input});\n        };\n        self.createInlineStyle = function (el, className) {\n            var css = {\n                'canvas-datagrid-context-menu-filter-input': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextFilterInputBackground,\n                    color: self.style.contextFilterInputColor,\n                    border: self.style.contextFilterInputBorder,\n                    borderRadius: self.style.contextFilterInputBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextFilterInputFontFamily,\n                    fontSize: self.style.contextFilterInputFontSize\n                },\n                'canvas-datagrid-context-menu-filter-button': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextFilterButtonBorder,\n                    borderRadius: self.style.contextFilterButtonBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFilterButtonFontFamily,\n                    fontSize: self.style.contextMenuFilterButtonFontSize\n                },\n                'canvas-datagrid-context-child-arrow': {\n                    cssFloat: 'right',\n                    color: self.style.childContextMenuArrowColor,\n                    fontSize: self.style.contextMenuChildArrowFontSize,\n                    fontFamily: self.style.contextMenuFontFamily,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-autocomplete': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    position: 'absolute',\n                    zIndex: 3,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-autocomplete-item': {\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor\n                },\n                'canvas-datagrid-autocomplete-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-canvas': {\n                    position: 'absolute',\n                    zIndex: '-1'\n                },\n                'canvas-datagrid': {\n                    position: 'absolute',\n                    background: self.style.backgroundColor,\n                    zIndex: '1',\n                    boxSizing: 'content-box',\n                    padding: '0'\n                },\n                'canvas-datagrid-control-input': {\n                    position: 'fixed',\n                    top: '-5px',\n                    left: '-5px',\n                    border: 'none',\n                    opacity: '0',\n                    cursor: 'pointer',\n                    width: '1px',\n                    height: '1px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize\n                },\n                'canvas-datagrid-edit-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 ' + self.style.editCellPaddingLeft + 'px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.editCellFontFamily,\n                    fontSize: self.style.editCellFontSize,\n                    boxShadow: self.style.editCellBoxShadow,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-context-menu-item': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-context-menu-label': {\n                    margin: self.style.contextMenuLabelMargin,\n                    display: self.style.contextMenuLabelDisplay,\n                    minWidth: self.style.contextMenuLabelMinWidth,\n                    maxWidth: self.style.contextMenuLabelMaxWidth\n                },\n                'canvas-datagrid-context-menu': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-invalid-search-regExp': {\n                    background: self.style.contextMenuFilterInvalidExpresion\n                }\n            };\n            if (css[className]) {\n                Object.keys(css[className]).map(function (prop) {\n                    el.style[prop] = css[className][prop];\n                });\n            }\n            return;\n        };\n        self.appendTo = function (n) {\n            self.parentNode = n || document.createElement('canvas');\n            if (self.parentNode && /canvas-datagrid-(cell|tree)/.test(self.parentNode.nodeType)) {\n                self.isChildGrid = true;\n                self.parentGrid = self.parentNode.parentGrid;\n                self.ctx = self.parentGrid.context;\n                self.canvas = self.parentGrid.canvas;\n                self.controlInput = self.parentGrid.controlInput;\n                self.eventParent = self.canvas;\n                self.intf.offsetParent = self.parentNode;\n            } else {\n                self.controlInput = document.createElement('input');\n                self.controlInput.onblur = self.intf.blur;\n                self.createInlineStyle(self.controlInput, 'canvas-datagrid-control-input');\n                self.isChildGrid = false;\n                self.parentDOMNode = self.parentNode;\n                self.parentNode = self.parentDOMNode;\n                self.parentIsCanvas = /^canvas$/i.test(self.parentDOMNode.tagName);\n                if (self.isComponent) {\n                    self.parentDOMNode = self.parentNode.parentElement;\n                    self.canvas = document.createElement('canvas');\n                    self.parentNode.appendChild(self.canvas);\n                    self.parentNode.appendChild(self.controlInput);\n                } else if (self.parentIsCanvas) {\n                    self.canvas = self.parentDOMNode;\n                    self.parentDOMNode.appendChild(self.controlInput);\n                } else {\n                    self.canvas = document.createElement('canvas');\n                    self.parentDOMNode.appendChild(self.canvas);\n                    self.parentDOMNode.appendChild(self.controlInput);\n                }\n                self.ctx = self.canvas.getContext('2d');\n                self.ctx.textBaseline = 'alphabetic';\n                self.eventParent = self.canvas;\n            }\n            self.controlInput.addEventListener('blur', function (e) {\n                if (e.target !== self.canvas) {\n                    self.hasFocus = false;\n                }\n            });\n            window.addEventListener('resize', self.resize);\n            if (window.MutationObserver) {\n                self.observer = new window.MutationObserver(function (mutations) {\n                    mutations.forEach(function (mutation) {\n                        self.resize(true);\n                    });\n                });\n                [self.canvas.parentNode].forEach(function (el) {\n                    if (!el) { return; }\n                    self.observer.observe(el, { attributes: true });\n                });\n            }\n            self.eventParent.addEventListener('scroll', self.resize, false);\n            self.eventParent.addEventListener('touchstart', self.touchstart, false);\n            self.eventParent.addEventListener('mouseup', self.mouseup, false);\n            self.eventParent.addEventListener('mousedown', self.mousedown, false);\n            self.eventParent.addEventListener('dblclick', self.dblclick, false);\n            self.eventParent.addEventListener('click', self.click, false);\n            self.eventParent.addEventListener('mousemove', self.mousemove);\n            self.eventParent.addEventListener('wheel', self.scrollWheel, false);\n            self.canvas.addEventListener('contextmenu', self.contextmenuEvent, false);\n            (self.isChildGrid ? self.parentGrid : document).addEventListener('copy', self.copy);\n            self.controlInput.addEventListener('keypress', self.keypress, false);\n            self.controlInput.addEventListener('keyup', self.keyup, false);\n            self.controlInput.addEventListener('keydown', self.keydown, false);\n        };\n        self.setDom = function () {\n            if (self.args.parentNode && self.args.parentNode.createShadowRoot) {\n                self.shadowRootParentElement = self.args.parentNode.parentElement;\n                self.shadowRoot = self.args.parentNode.createShadowRoot();\n                self.args.parentNode = self.shadowRoot;\n            }\n            self.appendTo(self.args.parentNode);\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        // all methods here are exposed by intf\n        // to users\n        /**\n         * Converts a integer into a letter A - ZZZZZ...\n         * @memberof canvasDataGrid\n         * @name integerToAlpha\n         * @method\n         * @param {column} n The number to convert.\n         */\n        self.integerToAlpha = function (n) {\n            var ordA = 'a'.charCodeAt(0),\n                ordZ = 'z'.charCodeAt(0),\n                len = ordZ - ordA + 1,\n                s = '';\n            while (n >= 0) {\n                s = String.fromCharCode(n % len + ordA) + s;\n                n = Math.floor(n / len) - 1;\n            }\n            return s;\n        };\n        /**\n         * Inserts a new column before the specified index into the schema.\n         * @see canvasDataGrid#schema\n         * @tutorial schema\n         * @memberof canvasDataGrid\n         * @name insertColumn\n         * @method\n         * @param {column} c The column to insert into the schema.\n         * @param {number} index The index of the column to insert before.\n         */\n        self.insertColumn = function (c, index) {\n            var s = self.getSchema();\n            if (s.length < index) {\n                throw new Error('Index is beyond the length of the schema.');\n            }\n            self.validateColumn(c, s);\n            s.splice(index, 0, c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a column from the schema at the specified index.\n         * @memberof canvasDataGrid\n         * @name deleteColumn\n         * @tutorial schema\n         * @method\n         * @param {number} index The index of the column to delete.\n         */\n        self.deleteColumn = function (index) {\n            var s = self.getSchema();\n            // remove data matching this column name from data\n            self.data.forEach(function (row) {\n                delete row[s[index].name];\n            });\n            s.splice(index, 1);\n            self.intf.schema = s;\n        };\n        /**\n         * Adds a new column into the schema.\n         * @see canvasDataGrid#schema\n         * @tutorial schema\n         * @memberof canvasDataGrid\n         * @name addColumn\n         * @method\n         * @param {column} c The column to add to the schema.\n         */\n        self.addColumn = function (c) {\n            var s = self.getSchema();\n            self.validateColumn(c, s);\n            s.push(c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a row from the dataset at the specified index.\n         * @memberof canvasDataGrid\n         * @name deleteRow\n         * @method\n         * @param {number} index The index of the row to delete.\n         */\n        self.deleteRow = function (index) {\n            self.originalData.splice(index, 1);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Inserts a new row into the dataset before the specified index.\n         * @memberof canvasDataGrid\n         * @name insertRow\n         * @method\n         * @param {object} d data.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertRow = function (d, index) {\n            if (self.originalData.length < index) {\n                throw new Error('Index is beyond the length of the dataset.');\n            }\n            self.originalData.splice(index, 0, d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[index], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Adds a new row into the dataset.\n         * @memberof canvasDataGrid\n         * @name addRow\n         * @method\n         * @param {object} d data.\n         */\n        self.addRow = function (d) {\n            self.originalData.push(d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[self.originalData.length - 1], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Sets the height of a given row by index number.\n         * @memberof canvasDataGrid\n         * @name setRowHeight\n         * @method\n         * @param {number} rowIndex The index of the row to set.\n         * @param {number} height Height to set the row to.\n         */\n        self.setRowHeight = function (rowIndex, height) {\n            self.sizes.rows[self.data[rowIndex][self.uniqueId]] = height;\n            self.draw(true);\n        };\n        /**\n         * Sets the width of a given column by index number.\n         * @memberof canvasDataGrid\n         * @name setColumnWidth\n         * @method\n         * @param {number} colIndex The index of the column to set.\n         * @param {number} width Width to set the column to.\n         */\n        self.setColumnWidth = function (colIndex, width) {\n            var s = self.getSchema();\n            self.sizes.columns[s[colIndex][self.uniqueId]] = width;\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the width of the columns due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDataGrid\n         * @name resetColumnWidths\n         * @tutorial schema\n         * @method\n         */\n        self.resetColumnWidths = function () {\n            self.sizes.columns = {};\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the height of the rows due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDataGrid\n         * @name resetRowHeights\n         * @tutorial schema\n         * @method\n         */\n        self.resetRowHeights = function () {\n            self.sizes.rows = {};\n            self.draw(true);\n        };\n        /**\n         * Sets the value of the filter.\n         * @memberof canvasDataGrid\n         * @name setFilter\n         * @method\n         * @param {string} column Name of the column to filter.\n         * @param {string} value The value to filter for.\n         */\n        self.setFilter = function (column, value) {\n            function applyFilter() {\n                self.refreshFromOrigialData();\n                Object.keys(self.columnFilters).forEach(function (filter) {\n                    var header = self.getHeaderByName(column);\n                    if (!header) {\n                        return;\n                    }\n                    self.currentFilter = header.filter || self.filter(column.type || 'string');\n                    self.data = self.data.filter(function (row) {\n                        return self.currentFilter(row[filter], self.columnFilters[filter]);\n                    });\n                });\n                self.resize();\n                self.draw(true);\n            }\n            if (column === undefined && value === undefined) {\n                self.columnFilters = {};\n                return applyFilter();\n            }\n            if (column && (value === '' || value === undefined)) {\n                delete self.columnFilters[column];\n            } else {\n                self.columnFilters[column] = value;\n            }\n            applyFilter();\n        };\n        /**\n         * Returns the number of pixels to scroll down to line up with row rowIndex.\n         * @memberof canvasDataGrid\n         * @name findRowScrollTop\n         * @method\n         * @param {number} rowIndex The row index of the row to scroll find.\n         */\n        self.findRowScrollTop = function (rowIndex) {\n            var top = 0, x = 0, l = self.data.length,\n                cellBorder = self.style.cellBorderWidth * 2;\n            if (!self.attributes.showNewRow) {\n                l -= 1;\n            }\n            if (rowIndex > l) {\n                throw new Error('Impossible row index');\n            }\n            while (x < rowIndex) {\n                top += (self.sizes.rows[self.data[x][self.uniqueId]] || self.style.cellHeight) + cellBorder;\n                x += 1;\n            }\n            //TODO: This is not super accurate, causes pageUp/Dn to not move around right\n            return top - (self.sizes.rows[self.data[rowIndex][self.uniqueId]] || self.style.cellHeight);\n        };\n        /**\n         * Returns the number of pixels to scroll to the left to line up with column columnIndex.\n         * @memberof canvasDataGrid\n         * @name findColumnScrollLeft\n         * @method\n         * @param {number} columnIndex The column index of the column to find.\n         */\n        self.findColumnScrollLeft = function (columnIndex) {\n            var left = 0, y = 0, s = self.getSchema(), l = s.length - 1;\n            if (columnIndex > l) {\n                throw new Error('Impossible column index');\n            }\n            while (y < columnIndex) {\n                left += self.sizes.columns[s[y][self.uniqueId]] || s[y].width;\n                y += 1;\n            }\n            return left;\n        };\n        /**\n         * Scrolls the cell at cell x, row y.\n         * @memberof canvasDataGrid\n         * @name gotoCell\n         * @method\n         * @param {number} x The column index of the cell to scroll to.\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoCell = function (x, y) {\n            if (x !== undefined) {\n                self.scrollBox.scrollLeft = self.findColumnScrollLeft(x);\n            }\n            if (y !== undefined) {\n                self.scrollBox.scrollTop = self.findRowScrollTop(y);\n            }\n        };\n        /**\n         * Scrolls the row y.\n         * @memberof canvasDataGrid\n         * @name gotoRow\n         * @method\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoRow = function (y) {\n            self.gotoCell(0, y);\n        };\n        /**\n         * Scrolls the cell at cell x, row y into view if it is not already.\n         * @memberof canvasDataGrid\n         * @name scrollIntoView\n         * @method\n         * @param {number} x The column index of the cell to scroll into view.\n         * @param {number} y The row index of the cell to scroll into view.\n         */\n        self.scrollIntoView = function (x, y) {\n            if (self.visibleCells.filter(function (cell) {\n                    return (cell.rowIndex === y || y === undefined)\n                        && (cell.columnIndex === x || x === undefined)\n                        && cell.x > 0\n                        && cell.y > 0\n                        && cell.x + cell.width < self.width\n                        && cell.y + cell.height < self.height;\n                }).length === 0) {\n                self.gotoCell(x, y);\n            }\n        };\n        /**\n         * Sets the active cell. Requires redrawing.\n         * @memberof canvasDataGrid\n         * @name setActiveCell\n         * @method\n         * @param {number} x The column index of the cell to set active.\n         * @param {number} y The row index of the cell to set active.\n         */\n        self.setActiveCell = function (x, y) {\n            self.activeCell = {\n                rowIndex: y,\n                columnIndex: x\n            };\n        };\n        /**\n         * Selects every visible cell.\n         * @memberof canvasDataGrid\n         * @name selectAll\n         * @method\n         */\n        self.selectAll = function () {\n            self.selectArea({\n                top: 0,\n                left: 0,\n                right: self.getVisibleSchema().length - 1,\n                bottom: self.data.length - 1\n            });\n        };\n        /**\n         * Returns true if the selected columnIndex is selected on every row.\n         * @memberof canvasDataGrid\n         * @name isColumnSelected\n         * @method\n         * @param {number} columnIndex The column index to check.\n         */\n        self.isColumnSelected = function (columnIndex) {\n            var colIsSelected = true;\n            self.data.forEach(function (row, rowIndex) {\n                if (!self.selections[rowIndex] || self.selections[rowIndex].indexOf(self.orders.columns[columnIndex]) === -1) {\n                    colIsSelected = false;\n                }\n            });\n            return colIsSelected;\n        };\n        /**\n         * Selects a column.\n         * @memberof canvasDataGrid\n         * @name selectColumn\n         * @method\n         * @param {number} columnIndex The column index to select.\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the column.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the column.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectColumn = function (columnIndex, ctrl, shift, supressEvent) {\n            var s, e, x;\n            function addCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) === -1) {\n                        self.selections[rowIndex].push(i);\n                    }\n                });\n            }\n            function removeCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) !== -1) {\n                        self.selections[rowIndex].splice(self.selections[rowIndex].indexOf(i), 1);\n                    }\n                });\n            }\n            if (shift) {\n                if (!self.activeCell) { return; }\n                s = Math.min(self.activeCell.columnIndex, columnIndex);\n                e = Math.max(self.activeCell.columnIndex, columnIndex);\n                for (x = s; e > x; x += 1) {\n                    addCol(x);\n                }\n            }\n            if (!ctrl && !shift) {\n                self.selections = [];\n                self.activeCell.columnIndex = columnIndex;\n                self.activeCell.rowIndex = self.scrollIndexTop;\n            }\n            if (ctrl && self.isColumnSelected(columnIndex)) {\n                removeCol(columnIndex);\n            } else {\n                addCol(columnIndex);\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.getSelectionBounds()\n            });\n        };\n        /**\n         * Selects a row.\n         * @memberof canvasDataGrid\n         * @name selectRow\n         * @method\n         * @param {number} rowIndex The row index to select.\n         * @param {boolean} ctrl When true, behaves as if you were holding control/command when you clicked the row.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the row.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectRow = function (rowIndex, ctrl, shift, supressEvent) {\n            var x, st, en, s = self.getSchema();\n            function addRow(ri) {\n                self.selections[ri] = [];\n                self.selections[ri].push(-1);\n                s.forEach(function (col) {\n                    self.selections[ri].push(col.index);\n                });\n            }\n            if (self.dragAddToSelection === false || self.dragObject === undefined) {\n                if (self.selections[rowIndex] && self.selections[rowIndex].length - 1 === s.length) {\n                    if (ctrl) {\n                        self.selections[rowIndex] = [];\n                        return;\n                    }\n                }\n            }\n            if (self.dragAddToSelection === true || self.dragObject === undefined) {\n                if (shift && self.dragObject === undefined) {\n                    if (!self.activeCell) { return; }\n                    st = Math.min(self.activeCell.rowIndex, rowIndex);\n                    en = Math.max(self.activeCell.rowIndex, rowIndex);\n                    for (x = st; en >= x; x += 1) {\n                        addRow(x);\n                    }\n                } else {\n                    addRow(rowIndex);\n                }\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Collapse a tree grid by row index.\n         * @memberof canvasDataGrid\n         * @name collapseTree\n         * @method\n         * @param {number} index The index of the row to collapse.\n         */\n        self.collapseTree = function (rowIndex) {\n            var rowId = self.data[rowIndex][self.uniqueId];\n            self.dispatchEvent('collapsetree', {\n                childGrid: self.childGrids[rowId],\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId].blur();\n            self.openChildren[rowId].dispose();\n            delete self.openChildren[rowId];\n            delete self.sizes.trees[rowId];\n            delete self.childGrids[rowId];\n            self.dispatchEvent('resizerow', {\n                cellHeight: self.style.cellHeight\n            });\n            self.resize(true);\n            self.draw(true);\n        };\n        /**\n         * Expands a tree grid by row index.\n         * @memberof canvasDataGrid\n         * @name expandTree\n         * @method\n         * @param {number} index The index of the row to expand.\n         */\n        self.expandTree = function (rowIndex) {\n            var rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth,\n                rowId = self.data[rowIndex][self.uniqueId],\n                h = self.sizes.trees[rowId] || self.style.treeGridHeight,\n                treeGrid;\n            if (!self.childGrids[rowId]) {\n                treeGrid = self.createGrid({\n                    debug: self.attributes.debug,\n                    name: self.attributes.saveAppearance\n                        ? self.attributes.name + 'tree' + rowId : undefined,\n                    parentNode: {\n                        parentGrid: self.intf,\n                        nodeType: 'canvas-datagrid-tree',\n                        offsetHeight: h,\n                        offsetWidth: self.width - columnHeaderCellWidth,\n                        header: { width: self.width - columnHeaderCellWidth },\n                        offsetLeft: columnHeaderCellWidth,\n                        offsetTop: rowHeaderCellHeight,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: 'tree',\n                        data: self.data[rowIndex]\n                    }\n                });\n                self.childGrids[rowId] = treeGrid;\n            }\n            treeGrid = self.childGrids[rowId];\n            treeGrid.visible = true;\n            self.dispatchEvent('expandtree', {\n                treeGrid: treeGrid,\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId] = treeGrid;\n            self.sizes.trees[rowId] = h;\n            self.dispatchEvent('resizerow', {height: self.style.cellHeight});\n            self.resize(true);\n        };\n        /**\n         * Toggles tree grid open and close by row index.\n         * @memberof canvasDataGrid\n         * @name toggleTree\n         * @method\n         * @param {number} index The index of the row to toggle.\n         */\n        self.toggleTree = function (rowIndex) {\n            var i = self.openChildren[self.data[rowIndex][self.uniqueId]];\n            if (i) {\n                return self.collapseTree(rowIndex);\n            }\n            self.expandTree(rowIndex);\n        };\n        /**\n         * Returns a header from the schema by name.\n         * @memberof canvasDataGrid\n         * @name getHeaderByName\n         * @tutorial schema\n         * @method\n         * @returns {header} header with the selected name, or undefined.\n         * @param {string} name The name of the column to resize.\n         */\n        self.getHeaderByName = function (name) {\n            var x, i = self.getSchema();\n            for (x = 0; x < i.length; x += 1) {\n                if (i[x].name === name) {\n                    return i[x];\n                }\n            }\n        };\n        /**\n         * Resizes a column to fit the longest value in the column. Call without a value to resize all columns.\n         * Warning, can be slow on very large record sets (1m records ~3-5 seconds on an i7).\n         * @memberof canvasDataGrid\n         * @name fitColumnToValues\n         * @method\n         * @param {string} name The name of the column to resize.\n         */\n        self.fitColumnToValues = function (name, internal) {\n            self.sizes.columns[name === 'cornerCell' ? name : self.getHeaderByName(name)[self.uniqueId]]\n                = self.findColumnMaxTextLength(name);\n            if (!internal) {\n                self.resize();\n                self.draw(true);\n            }\n        };\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDataGrid\n         * @name isCellVisible\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {cell} cell The cell to check for.  Alternatively you can pass an object { x: <x-index>, y: <y-index> }.\n         */\n        self.isCellVisible = function (cell) {\n            var x, l = self.visibleCells.length;\n            for (x = 0; x < l; x += 1) {\n                if (cell.x === self.visibleCells[x].x && cell.y === self.visibleCells[x].y) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n         * Sets the order of the data.\n         * @memberof canvasDataGrid\n         * @name order\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} columnName Number of pixels from the left.\n         * @param {string} direction `asc` for ascending or `desc` for descending.\n         * @param {function} [sortFunction] When defined, override the default sorting method defined in the column's schema and use this one.\n         * @param {bool} [dontSetStorageData] Don't store this setting for future use.\n         */\n        self.order = function (columnName, direction, sortFunction, dontSetStorageData) {\n            var f,\n                c = self.getSchema().filter(function (col) {\n                    return col.name === columnName;\n                });\n            self.orderBy = columnName;\n            if (c.length === 0) {\n                throw new Error('Cannot sort.  No such column name');\n            }\n            f = sortFunction || self.sorters[c[0].type];\n            if (!f && c[0].type !== undefined) {\n                console.warn('Cannot sort type \"%s\" falling back to string sort.', c[0].type);\n            }\n            self.data = self.data.sort(typeof f === 'function' ? f(columnName, direction) : self.sorters.string);\n            self.dispatchEvent('ordercolumn', {name: columnName, direction: direction});\n            self.draw(true);\n            if (dontSetStorageData) { return; }\n            self.setStorageData();\n        };\n        self.isInGrid = function (e) {\n            if (e.x < 0\n                    || e.x > self.width\n                    || e.y < 0\n                    || e.y > self.height) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Gets the cell at columnIndex and rowIndex.\n         * @memberof canvasDataGrid\n         * @name getVisibleCellByIndex\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Column index.\n         * @param {number} y Row index.\n         */\n        self.getVisibleCellByIndex = function (x, y) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === x && c.rowIndex === y;\n            })[0];\n        };\n        /**\n         * Gets the cell at grid pixel coordinate x and y.\n         * @memberof canvasDataGrid\n         * @name getCellAt\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Number of pixels from the left.\n         * @param {number} y Number of pixels from the top.\n         */\n        self.getCellAt = function (x, y, useTouchScrollZones) {\n            var tsz = useTouchScrollZones ? self.attributes.touchScrollZone : 0, i, l = self.visibleCells.length, cell;\n            if (!self.visibleCells || !self.visibleCells.length) { return; }\n            self.hasFocus = true;\n            if (!(y < self.height\n                && y > 0\n                && x < self.width\n                && x > 0)) {\n                self.hasFocus = false;\n                return {\n                    dragContext: 'inherit',\n                    context: 'inherit'\n                };\n            }\n            for (i = 0; i < l; i += 1) {\n                cell = self.visibleCells[i];\n                if (useTouchScrollZones && /(vertical|horizontal)-scroll-/.test(cell.style)) {\n                    cell.x -= tsz;\n                    cell.y -= tsz;\n                    cell.height += tsz;\n                    cell.width += tsz;\n                }\n                if (cell.x - self.style.cellBorderWidth < x\n                        && cell.x + cell.width + self.style.cellBorderWidth > x\n                        && cell.y - self.style.cellBorderWidth < y\n                        && cell.y + cell.height + self.style.cellBorderWidth > y) {\n                    if (/vertical-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'vertical-scroll-box';\n                        cell.context = 'vertical-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isVerticalScrollBar = true;\n                        if (y > self.scrollBox.box.v.y + self.scrollBox.scrollBoxHeight) {\n                            cell.dragContext = 'vertical-scroll-bottom';\n                            cell.context = 'vertical-scroll-bottom';\n                        } else if (y < self.scrollBox.box.v.y) {\n                            cell.dragContext = 'vertical-scroll-top';\n                            cell.context = 'vertical-scroll-top';\n                        }\n                        self.canvas.style.cursor = 'default';\n                        return cell;\n                    }\n                    if (/horizontal-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'horizontal-scroll-box';\n                        cell.context = 'horizontal-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isHorizontalScrollBar = true;\n                        if (x > self.scrollBox.box.h.x + self.scrollBox.scrollBoxWidth) {\n                            cell.dragContext = 'horizontal-scroll-right';\n                            cell.context = 'horizontal-scroll-right';\n                        } else if (x < self.scrollBox.box.h.x) {\n                            cell.dragContext = 'horizontal-scroll-left';\n                            cell.context = 'horizontal-scroll-left';\n                        }\n                        self.canvas.style.cursor = 'default';\n                        return cell;\n                    }\n                    if (cell.x + cell.width - (self.attributes.borderResizeZone * 0.4) < x\n                            && cell.x + cell.width + (self.attributes.borderResizeZone * 0.6) > x\n                            && self.attributes.allowColumnResize\n                            && ((self.attributes.allowColumnResizeFromCell && cell.style === 'cell')\n                                || cell.style !== 'cell')\n                            && ((self.attributes.allowRowHeaderResize\n                                && ['rowHeaderCell', 'cornerCell'].indexOf(cell.style) !== -1)\n                                || ['rowHeaderCell', 'cornerCell'].indexOf(cell.style) === -1)) {\n                        cell.context = 'ew-resize';\n                        cell.dragContext = 'ew-resize';\n                        return cell;\n                    }\n                    if (cell.y + cell.height - (self.attributes.borderResizeZone * 0.4) < y\n                            && cell.y + cell.height + (self.attributes.borderResizeZone * 0.6) > y\n                            && self.attributes.allowRowResize\n                            && ((self.attributes.allowRowResizeFromCell && cell.style === 'cell')\n                                || cell.style !== 'cell')\n                            && cell.style !== 'columnHeaderCell') {\n                        cell.context = 'ns-resize';\n                        cell.dragContext = 'ns-resize';\n                        return cell;\n                    }\n                    if (cell.style === 'columnHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'column-reorder';\n                        return cell;\n                    }\n                    if (cell.style === 'rowHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'row-reorder';\n                        return cell;\n                    }\n                    if (cell.isGrid) {\n                        self.hasFocus = false;\n                        cell.dragContext = 'cell-grid';\n                        cell.context = 'cell-grid';\n                        return cell;\n                    }\n                    if (cell.style === 'tree-grid') {\n                        self.hasFocus = false;\n                        cell.dragContext = 'tree';\n                        cell.context = 'tree';\n                        return cell;\n                    }\n                    cell.dragContext = 'cell';\n                    cell.context = 'cell';\n                    return cell;\n                }\n            }\n            self.hasFocus = true;\n            self.canvas.style.cursor = 'default';\n            return {\n                dragContext: 'background',\n                context: 'background',\n                style: 'background',\n                isBackground: true\n            };\n        };\n        /**\n         * Gets the bounds of current selection. \n         * @returns {rect} selection.\n         * @memberof canvasDataGrid\n         * @name getSelectionBounds\n         * @method\n         */\n        self.getSelectionBounds = function () {\n            var low = {x: Infinity, y: Infinity},\n                high = {x: -Infinity, y: -Infinity};\n            self.data.forEach(function (row, rowIndex) {\n                var maxCol, minCol;\n                if (self.selections[rowIndex] && self.selections[rowIndex].length) {\n                    low.y = rowIndex < low.y ? rowIndex : low.y;\n                    high.y = rowIndex > high.y ? rowIndex : high.y;\n                    maxCol = Math.max.apply(null, self.selections[rowIndex]);\n                    minCol = Math.min.apply(null, self.selections[rowIndex]);\n                    low.x = minCol < low.x ? minCol : low.x;\n                    high.x = maxCol > high.x ? maxCol : high.x;\n                }\n            });\n            return {\n                top: low.y,\n                left: low.x,\n                bottom: high.y,\n                right: high.x\n            };\n        };\n        /**\n         * Returns an auto generated schema based on data structure.\n         * @memberof canvasDataGrid\n         * @name getSchemaFromData\n         * @method\n         * @tutorial schema\n         * @returns {schema} schema A schema based on the first item in the data array.\n         */\n        self.getSchemaFromData = function () {\n            return Object.keys(self.data[0] || {' ': ''}).map(function mapEachSchemaColumn(key, index) {\n                var type = self.getBestGuessDataType(key),\n                    i = {\n                        name: key,\n                        title: isNaN(parseInt(key, 10)) ? key : self.integerToAlpha(key).toUpperCase(),\n                        width: self.style.columnWidth,\n                        index: index,\n                        type: type,\n                        filter: self.filter(type)\n                    };\n                if (key === self.uniqueId) {\n                    i.hidden = true;\n                }\n                i[self.uniqueId] = self.getSchemaNameHash(key);\n                return i;\n            });\n        };\n        /**\n         * Clears the change log grid.changes that keeps track of changes to the data set.\n         * This does not undo changes or alter data it is simply a convince array to keep\n         * track of changes made to the data since last this method was called.\n         * @memberof canvasDataGrid\n         * @name clearChangeLog\n         * @method\n         */\n        self.clearChangeLog = function () {\n            self.changes = [];\n        };\n        /**\n         * Selects an area of the grid.\n         * @memberof canvasDataGrid\n         * @name selectArea\n         * @method\n         * @param {rect} bounds A rect object representing the selected values.\n         */\n        self.selectArea = function (bounds, ctrl) {\n            self.selectionBounds = bounds || self.selectionBounds;\n            var x, y, s = self.getSchema();\n            if (!ctrl) {\n                self.selections = [];\n            }\n            if (self.selectionBounds.top < -1\n                    || self.selectionBounds.bottom > self.data.length\n                    || self.selectionBounds.left < -1\n                    || self.selectionBounds.right > s.length) {\n                throw new Error('Impossible selection area');\n            }\n            for (x = self.selectionBounds.top; x <= self.selectionBounds.bottom; x += 1) {\n                self.selections[x] = [];\n                for (y = self.selectionBounds.left; y <= self.selectionBounds.right; y += 1) {\n                    if (self.selections[x].indexOf(y) === -1) {\n                        self.selections[x].push(y);\n                    }\n                }\n            }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Returns the maximum text width for a given column by column name.\n         * @memberof canvasDataGrid\n         * @name findColumnMaxTextLength\n         * @method\n         * @returns {number} The number of pixels wide the maximum width value in the selected column.\n         * @param {string} name The name of the column to calculate the value's width of.\n         */\n        self.findColumnMaxTextLength = function (name) {\n            var m = -Infinity;\n            if (name === 'cornerCell') {\n                self.ctx.font = self.style.rowHeaderCellFont;\n                return self.ctx.measureText((self.data.length + (self.attributes.showNewRow ? 1 : 0)).toString()).width\n                    + self.style.autosizePadding + self.style.autosizeHeaderCellPadding\n                    + self.style.rowHeaderCellPaddingRight\n                    + self.style.rowHeaderCellPaddingLeft\n                    + (self.attributes.tree ? self.style.treeArrowWidth\n                        + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight : 0);\n            }\n            self.getSchema().forEach(function (col) {\n                if (col.name !== name) { return; }\n                self.ctx.font = self.style.columnHeaderCellFont;\n                var t = self.ctx.measureText(col.title || col.name).width\n                    + self.style.headerCellPaddingRight\n                    + self.style.headerCellPaddingLeft;\n                m = t > m ? t : m;\n            });\n            self.data.forEach(function (row) {\n                self.ctx.font = self.style.cellFont;\n                var t = self.ctx.measureText(row[name]).width\n                    + self.style.cellPaddingRight\n                    + self.style.cellPaddingLeft + self.style.cellAutoResizePadding;\n                m = t > m ? t : m;\n            });\n            return m;\n        };\n        /**\n         * Gets the total width of all header columns.\n         * @memberof canvasDataGrid\n         * @name getHeaderWidth\n         * @method\n         */\n        self.getHeaderWidth = function () {\n            return self.getVisibleSchema().reduce(function (total, header) {\n                return total + header.width;\n            }, 0);\n        };\n        self.formatters.string = function cellFormatterString(e) {\n            return e.cell.value !== undefined ? e.cell.value : '';\n        };\n        self.formatters.rowHeaderCell = self.formatters.string;\n        self.formatters.headerCell = self.formatters.string;\n        self.formatters.number = self.formatters.string;\n        self.formatters.int = self.formatters.string;\n        self.formatters.html = self.formatters.string;\n        self.sorters.string = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (a[columnName] === undefined || a[columnName] === null) {\n                    return 1;\n                }\n                if (b[columnName] === undefined || b[columnName] === null) {\n                    return 0;\n                }\n                if (asc) {\n                    if (!a[columnName].localeCompare) { return 1; }\n                    return a[columnName].localeCompare(b[columnName]);\n                }\n                if (!b[columnName].localeCompare) { return 1; }\n                return b[columnName].localeCompare(a[columnName]);\n            };\n        };\n        self.sorters.number = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return a[columnName] - b[columnName];\n                }\n                return b[columnName] - a[columnName];\n            };\n        };\n        self.sorters.date = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return new Date(a[columnName]).getTime()\n                        - new Date(b[columnName]).getTime();\n                }\n                return new Date(b[columnName]).getTime()\n                        - new Date(a[columnName]).getTime();\n            };\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// canvas-datagrid.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap dc398fbf73f59d1a7e20","/*jslint browser: true, unparam: true, todo: true, evil: true*/\n/*globals Reflect: false, HTMLElement: true, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([\n    './defaults',\n    './draw',\n    './events',\n    './intf',\n    './contextMenu',\n    './dom',\n    './publicMethods'\n], function context(defaults) {\n    'use strict';\n    var modules = Array.prototype.slice.call(arguments),\n        typeMap;\n    function hyphenateProperty(prop, cust) {\n        var p = '';\n        Array.prototype.forEach.call(prop, function (char) {\n            if (char === char.toUpperCase()) {\n                p += '-' + char.toLowerCase();\n                return;\n            }\n            p += char;\n        });\n        return (cust ? '-cdg-' : '') + p;\n    }\n    function getDefaultItem(base, item) {\n        var i = {},\n            r;\n        defaults(i);\n        r = i.defaults[base].filter(function (i) {\n            return i[0].toLowerCase() === item.toLowerCase()\n                || hyphenateProperty(i[0]) === item.toLowerCase()\n                || hyphenateProperty(i[0], true) === item.toLowerCase();\n        })[0];\n        return r;\n    }\n    typeMap = {\n        data: function (strData) {\n            try {\n                return JSON.parse(strData);\n            } catch (e) {\n                throw new Error('Cannot read JSON data in canvas-datagrid data attribute.');\n            }\n        },\n        style: function (fullStyleString) {\n            var s = {};\n            fullStyleString.split(';').forEach(function (sd) {\n                if (!sd) { return; }\n                var i = sd.indexOf(':'),\n                    key = sd.substring(0, i),\n                    val = sd.substring(i + 1),\n                    idef = getDefaultItem('styles', key);\n                if (idef === undefined) {\n                    console.warn('Unrecognized style directive', key);\n                    return;\n                }\n                s[idef[0]] = typeMap[typeof idef[1]](val.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, ''));\n            });\n            return s;\n        },\n        schema: function (strSchema) {\n            try {\n                return JSON.parse(strSchema);\n            } catch (e) {\n                throw new Error('Cannot read JSON data in canvas-datagrid schema attribute.');\n            }\n        },\n        number: function (strNum) {\n            return parseInt(strNum, 10);\n        },\n        boolean: function (strBool) {\n            return (/true/i).test(strBool);\n        },\n        string: function (str) {\n            return str;\n        }\n    };\n    function Grid(args) {\n        args = args || {};\n        var self = {};\n        self.isComponent = args.component === undefined;\n        self.intf = self.isComponent ? eval('Reflect.construct(HTMLElement, [], new.target)') : {};\n        self.args = args;\n        self.createGrid = function grid(args) {\n            args.component = false;\n            return new Grid(args);\n        };\n        modules.forEach(function (module) {\n            module(self);\n        });\n        self.intf.args = self.args;\n        self.intf.init = self.init;\n        if (!self.isComponent) {\n            self.init();\n        }\n        return self.intf;\n    }\n    function getObservableAttributes() {\n        var i = {}, attrs = ['style', 'data', 'schema'];\n        defaults(i);\n        i.defaults.attributes.forEach(function (attr) {\n            attrs.push(attr[0].toLowerCase());\n        });\n        return attrs;\n    }\n    function connectedCallback() {\n        var intf = this, s;\n        if (intf.initialized) { return; }\n        intf.initialized = true;\n        intf.args.parentNode = intf;\n        //HACK init() will secretly return the internal reference object.\n        //since init is only run after instantiation in the component version\n        //it won't work in the amd version and won't return self, so it is still\n        //technically private since it's impossible to get at.\n        //this has to be done so intf setters can bet run and alter self without stack overflows\n        s = intf.init();\n        ['style', 'data', 'schema'].forEach(function (key) {\n            Object.defineProperty(intf.args, key, {\n                set: function (value) {\n                    s[key] = value;\n                    intf.draw();\n                },\n                get: function () {\n                    return s[key];\n                }\n            });\n        });\n    }\n    function attributeChangedCallback(attrName, oldVal, newVal) {\n        var tfn, j, s, intf = this;\n        if (attrName === 'style') {\n            j = typeMap.style(newVal);\n            s = intf.args.style ? JSON.parse(JSON.stringify(intf.args.style)) : {};\n            Object.keys(j).forEach(function (key) {\n                s[key] = j[key];\n            });\n            intf.args.style = s;\n            return;\n        }\n        if (attrName === 'data') {\n            intf.args.data = typeMap.data(newVal);\n            return;\n        }\n        if (attrName === 'schema') {\n            intf.args.schema = typeMap.schema(newVal);\n            return;\n        }\n        tfn = typeMap[typeof getDefaultItem('attributes', attrName)[1]];\n        // trim incoming values\n        intf.attributes[attrName] = tfn(newVal);\n        return;\n    }\n    if (window.HTMLElement) {\n        Grid.prototype = Object.create(window.HTMLElement.prototype);\n    }\n    // export web component\n    if (window.customElements) {\n        Grid.observedAttributes = getObservableAttributes();\n        Grid.prototype.disconnectedCallback = function () { this.dispose(); };\n        Grid.prototype.attributeChangedCallback = attributeChangedCallback;\n        Grid.prototype.connectedCallback = connectedCallback;\n        window.customElements.define('canvas-datagrid', Grid);\n    }\n    // export global\n    if (window && !window.canvasDatagrid && !window.require) {\n        window.canvasDatagrid = function (args) { return new Grid(args); };\n    }\n    // export amd loader\n    module.exports = function grid(args) {\n        args = args || {};\n        args.component = false;\n        return new Grid(args);\n    };\n    return module.exports;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/main.js\n// module id = 0\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.defaults = {\n            attributes: [\n                ['name', ''],\n                ['tree', false],\n                ['showNewRow', false],\n                ['treeHorizontalScroll', false],\n                ['saveAppearance', true],\n                ['selectionFollowsActiveCell', false],\n                ['multiLine', false],\n                ['editable', true],\n                ['allowColumnReordering', true],\n                ['allowRowReordering', false],\n                ['allowSorting', true],\n                ['showFilter', true],\n                ['globalRowResize', false],\n                ['pageUpDownOverlap', 1],\n                ['persistantSelectionMode', false],\n                ['selectionMode', 'cell'],\n                ['autoResizeColumns', false],\n                ['allowRowHeaderResize', true],\n                ['allowColumnResize', true],\n                ['allowRowResize', true],\n                ['allowRowResizeFromCell', false],\n                ['allowColumnResizeFromCell', false],\n                ['debug', false],\n                ['borderResizeZone', 10],\n                ['showColumnHeaders', true],\n                ['showRowNumbers', true],\n                ['showRowHeaders', true],\n                ['scrollRepeatRate', 75],\n                ['selectionScrollZone', 20],\n                ['resizeScrollZone', 20],\n                ['contextHoverScrollRateMs', 5],\n                ['contextHoverScrollAmount', 2],\n                ['selectionScrollIncrement', 20],\n                ['reorderDeadZone', 3],\n                ['showClearSettingsOption', true],\n                ['showOrderByOption', true],\n                ['clearSettingsOptionText', 'Clear saved settings'],\n                ['showOrderByOptionTextAsc', 'Order by %s ascending'],\n                ['showOrderByOptionTextDesc', 'Order by %s descending'],\n                ['removeFilterOptionText', 'Remove filter on %s'],\n                ['filterOptionText', 'Filter %s'],\n                ['filterTextPrefix', '(filtered) '],\n                ['touchReleaseAnimationDurationMs', 2000],\n                ['touchReleaseAcceleration', 500],\n                ['touchDeadZone', 3],\n                ['touchSelectTimeMs', 800],\n                ['touchScrollZone', 30],\n                ['copyText', 'Copy'],\n                ['showCopy', true],\n                ['columnHeaderClickBehavior', 'sort'],\n                ['scrollPointerLock', false],\n                ['maxAutoCompleteItems', 200]\n            ],\n            styles: [\n                ['activeCellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['activeCellBorderWidth', 0.25],\n                ['activeCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellFont', '16px sans-serif'],\n                ['activeCellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['activeCellOverlayBorderWidth', 0.5],\n                ['activeCellPaddingBottom', 5],\n                ['activeCellPaddingLeft', 5],\n                ['activeCellPaddingRight', 7],\n                ['activeCellPaddingTop', 5],\n                ['activeCellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['activeCellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['activeColumnHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeColumnHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeRowHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeRowHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['autocompleteBottomMargin', 60],\n                ['autosizeHeaderCellPadding', 8],\n                ['autosizePadding', 5],\n                ['backgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cellAutoResizePadding', 13],\n                ['cellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['cellBorderWidth', 0.5],\n                ['cellColor', 'rgba(0, 0, 0, 1)'],\n                ['cellFont', '16px sans-serif'],\n                ['cellGridHeight', 250],\n                ['cellHeight', 24],\n                ['cellHeightWithChildGrid', 150],\n                ['cellHorizontalAlignment', 'left'],\n                ['cellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['cellPaddingBottom', 5],\n                ['cellPaddingLeft', 5],\n                ['cellPaddingRight', 7],\n                ['cellPaddingTop', 5],\n                ['cellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['cellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['cellVerticalAlignment', 'center'],\n                ['cellWidthWithChildGrid', 250],\n                ['childContextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['childContextMenuArrowHTML', '&#x25BA;'],\n                ['childContextMenuMarginLeft', -15],\n                ['childContextMenuMarginTop', 0],\n                ['columnHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellBorderColor', 'rgba(152, 152, 152, 1)'],\n                ['columnHeaderCellBorderWidth', 0.25],\n                ['columnHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['columnHeaderCellFont', '16px sans-serif'],\n                ['columnHeaderCellHeight', 25],\n                ['columnHeaderCellHorizontalAlignment', 'left'],\n                ['columnHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['columnHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['columnHeaderCellPaddingBottom', 5],\n                ['columnHeaderCellPaddingLeft', 5],\n                ['columnHeaderCellPaddingRight', 7],\n                ['columnHeaderCellPaddingTop', 5],\n                ['columnHeaderCellVerticalAlignment', 'center'],\n                ['columnWidth', 250],\n                ['contextFilterButtonBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterButtonBorderRadius', '3px'],\n                ['contextFilterButtonHTML', '&#x25BC;'],\n                ['contextFilterInputBackground', 'rgba(255,255,255,1)'],\n                ['contextFilterInputBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterInputBorderRadius', '0'],\n                ['contextFilterInputColor', 'rgba(0,0,0,1)'],\n                ['contextFilterInputFontFamily', 'sans-serif'],\n                ['contextFilterInputFontSize', '14px'],\n                ['contextFilterInvalidRegExpBackground', 'rgba(180, 6, 1, 1)'],\n                ['contextFilterInvalidRegExpColor', 'rgba(255, 255, 255, 1)'],\n                ['contextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuArrowDownHTML', '&#x25BC;'],\n                ['contextMenuArrowUpHTML', '&#x25B2;'],\n                ['contextMenuBackground', 'rgba(240, 240, 240, 1)'],\n                ['contextMenuBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextMenuBorderRadius', '3px'],\n                ['contextMenuChildArrowFontSize', '12px'],\n                ['contextMenuColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuFilterButtonFontFamily', 'sans-serif'],\n                ['contextMenuFilterButtonFontSize', '10px'],\n                ['contextMenuFilterInvalidExpresion', 'rgba(237, 155, 156, 1)'],\n                ['contextMenuFontFamily', 'sans-serif'],\n                ['contextMenuFontSize', '16px'],\n                ['contextMenuHoverBackground', 'rgba(182, 205, 250, 1)'],\n                ['contextMenuHoverColor', 'rgba(43, 48, 153, 1)'],\n                ['contextMenuItemBorderRadius', '3px'],\n                ['contextMenuItemMargin', '2px'],\n                ['contextMenuLabelDisplay', 'inline-block'],\n                ['contextMenuLabelMargin', '0 3px 0 0'],\n                ['contextMenuLabelMaxWidth', '700px'],\n                ['contextMenuLabelMinWidth', '75px'],\n                ['contextMenuMarginLeft', 3],\n                ['contextMenuMarginTop', -3],\n                ['contextMenuOpacity', '0.98'],\n                ['contextMenuPadding', '2px'],\n                ['contextMenuWindowMargin', 6],\n                ['cornerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cornerCellBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['editCellBackgroundColor', 'white'],\n                ['editCellBorder', 'solid 1px rgba(110, 168, 255, 1)'],\n                ['editCellBoxShadow', '0 2px 5px rgba(0,0,0,0.4)'],\n                ['editCellColor', 'black'],\n                ['editCellFontFamily', 'sans-serif'],\n                ['editCellFontSize', '16px'],\n                ['editCellPaddingLeft', 4],\n                ['gridBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['gridBorderWidth', 1],\n                ['columnHeaderOrderByArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['columnHeaderOrderByArrowBorderWidth', 1],\n                ['columnHeaderOrderByArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['columnHeaderOrderByArrowHeight', 8],\n                ['columnHeaderOrderByArrowMarginLeft', 0],\n                ['columnHeaderOrderByArrowMarginRight', 5],\n                ['columnHeaderOrderByArrowMarginTop', 6],\n                ['columnHeaderOrderByArrowWidth', 13],\n                ['minColumnWidth', 45],\n                ['minHeight', 24],\n                ['minRowHeight', 24],\n                ['name', 'default'],\n                ['reorderMarkerBackgroundColor', 'rgba(0, 0, 0, 0.1)'],\n                ['reorderMarkerBorderColor', 'rgba(0, 0, 0, 0.2)'],\n                ['reorderMarkerBorderWidth', 1.25],\n                ['reorderMarkerIndexBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['reorderMarkerIndexBorderWidth', 2.75],\n                ['rowHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['rowHeaderCellBorderColor', 'rgba(200, 200, 200, 1)'],\n                ['rowHeaderCellBorderWidth', 1],\n                ['rowHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellFont', '16px sans-serif'],\n                ['rowHeaderCellHeight', 25],\n                ['rowHeaderCellHorizontalAlignment', 'left'],\n                ['rowHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['rowHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['rowHeaderCellPaddingBottom', 5],\n                ['rowHeaderCellPaddingLeft', 5],\n                ['rowHeaderCellPaddingRight', 5],\n                ['rowHeaderCellPaddingTop', 5],\n                ['rowHeaderCellSelectedBackgroundColor', 'rgba(217, 217, 217, 1)'],\n                ['rowHeaderCellSelectedColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellVerticalAlignment', 'center'],\n                ['rowHeaderCellWidth', 57],\n                ['scrollBarActiveColor', 'rgba(125, 125, 125, 1)'],\n                ['scrollBarBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarBorderWidth', 0.5],\n                ['scrollBarBoxBorderRadius', 4.125],\n                ['scrollBarBoxColor', 'rgba(192, 192, 192, 1)'],\n                ['scrollBarBoxMargin', 2],\n                ['scrollBarBoxMinSize', 15],\n                ['scrollBarBoxWidth', 8],\n                ['scrollBarCornerBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarCornerBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarWidth', 11],\n                ['selectionOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionOverlayBorderWidth', 0.75],\n                ['treeArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['treeArrowBorderWidth', 1],\n                ['treeArrowClickRadius', 5],\n                ['treeArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['treeArrowHeight', 8],\n                ['treeArrowMarginLeft', 0],\n                ['treeArrowMarginRight', 5],\n                ['treeArrowMarginTop', 6],\n                ['treeArrowWidth', 13],\n                ['treeGridHeight', 250]\n            ]\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/defaults.js\n// module id = 1\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals XMLSerializer: false, define: true, Blob: false, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var perfCounters = [],\n            drawCount = 0,\n            perfWindowSize = 20;\n        self.htmlImageCache = {};\n        function drawOnAllImagesLoaded() {\n            var loaded = true;\n            Object.keys(self.htmlImageCache).forEach(function (html) {\n                if (!self.htmlImageCache[html].complete) {\n                    loaded = false;\n                }\n            });\n            if (loaded) {\n                self.draw();\n            }\n        }\n        function drawHtml(cell) {\n            var img,\n                v = cell.innerHTML || cell.formattedValue,\n                x = cell.x + self.canvasOffsetLeft,\n                y = cell.y + self.canvasOffsetTop;\n            if (self.htmlImageCache[v]) {\n                img = self.htmlImageCache[v];\n                if (img.height !== cell.height || img.width !== cell.width) {\n                    // height and width of the cell has changed, invalidate cache\n                    self.htmlImageCache[v] = undefined;\n                } else {\n                    if (!img.complete) {\n                        return;\n                    }\n                    return self.ctx.drawImage(img, x, y);\n                }\n            }\n            img = new Image(cell.width, cell.height);\n            self.htmlImageCache[v] = img;\n            img.onload = function () {\n                self.ctx.drawImage(img, x, y);\n                drawOnAllImagesLoaded();\n            };\n            img.src = 'data:image/svg+xml;base64,' + btoa(\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + cell.width + '\" height=\"' + cell.height + '\">\\n' +\n                    '<foreignObject class=\"node\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\\n' +\n                    '<body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;padding:0;\">\\n' +\n                    v + '\\n' +\n                    '</body>' +\n                    '</foreignObject>\\n' +\n                    '</svg>\\n'\n            );\n        }\n        function drawOrderByArrow(x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.columnHeaderOrderByArrowColor;\n            self.ctx.strokeStyle = self.style.columnHeaderOrderByArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + self.style.columnHeaderOrderByArrowMarginLeft;\n            y = y + self.style.columnHeaderOrderByArrowMarginTop;\n            if (self.orderDirection === 'asc') {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + self.style.columnHeaderOrderByArrowWidth, y);\n                self.ctx.lineTo(x + (self.style.columnHeaderOrderByArrowWidth * 0.5), y + self.style.columnHeaderOrderByArrowHeight);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y + self.style.columnHeaderOrderByArrowHeight);\n                self.ctx.lineTo(x + self.style.columnHeaderOrderByArrowWidth, y + self.style.columnHeaderOrderByArrowHeight);\n                self.ctx.lineTo(x + (self.style.columnHeaderOrderByArrowWidth * 0.5), y);\n                self.ctx.lineTo(x, y + self.style.columnHeaderOrderByArrowHeight);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return self.style.columnHeaderOrderByArrowMarginLeft\n                + self.style.columnHeaderOrderByArrowWidth\n                + self.style.columnHeaderOrderByArrowMarginRight;\n        }\n        function drawTreeArrow(cell, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.treeArrowColor;\n            self.ctx.strokeStyle = self.style.treeArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + self.style.treeArrowMarginLeft;\n            y = y + self.style.treeArrowMarginTop;\n            if (self.openChildren[cell.data[self.uniqueId]]) {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + self.style.treeArrowWidth, y);\n                self.ctx.lineTo(x + (self.style.treeArrowWidth * 0.5), y + self.style.treeArrowHeight);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y);\n                self.ctx.lineTo(x + self.style.treeArrowHeight, y + (self.style.treeArrowWidth * 0.5));\n                self.ctx.lineTo(x, y + self.style.treeArrowWidth);\n                self.ctx.lineTo(x, y);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return self.style.treeArrowMarginLeft\n                + self.style.treeArrowWidth\n                + self.style.treeArrowMarginRight;\n        }\n        function radiusRect(x, y, w, h, radius) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            var r = x + w, b = y + h;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x + radius, y);\n            self.ctx.lineTo(r - radius, y);\n            self.ctx.quadraticCurveTo(r, y, r, y + radius);\n            self.ctx.lineTo(r, y + h - radius);\n            self.ctx.quadraticCurveTo(r, b, r - radius, b);\n            self.ctx.lineTo(x + radius, b);\n            self.ctx.quadraticCurveTo(x, b, x, b - radius);\n            self.ctx.lineTo(x, y + radius);\n            self.ctx.quadraticCurveTo(x, y, x + radius, y);\n        }\n        function fillRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillRect(x, y, w, h);\n        }\n        function strokeRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.strokeRect(x, y, w, h);\n        }\n        function fillText(text, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillText(text, x, y);\n        }\n        function addBorderLine(c, pos) {\n            self.ctx.beginPath();\n            var p = {\n                t: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                },\n                r: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                b: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                l: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                }\n            };\n            p[pos]();\n            self.ctx.stroke();\n        }\n        function addEllipsis(text, width) {\n            var c, w = 0;\n            if (self.ellipsisCache[text] && self.ellipsisCache[text][width]) {\n                return self.ellipsisCache[text][width];\n            }\n            //TODO Add ellipsis back when there is a fast way to do it\n            w = self.ctx.measureText(text).width;\n            self.ellipsisCache[text] = self.ellipsisCache[text] || {};\n            c = {value: text, width: w};\n            self.ellipsisCache[text][width] = c;\n            return c;\n        }\n        function drawText(cell) {\n            var paddingLeft = self.style[cell.style + 'PaddingLeft'],\n                paddingTop = self.style[cell.style + 'PaddingTop'],\n                paddingRight = self.style[cell.style + 'PaddingRight'],\n                paddingBottom = self.style[cell.style + 'PaddingBottom'],\n                vPos = paddingTop + cell.height - (cell.height * 0.5),\n                hPos = paddingLeft + cell.treeArrowWidth + cell.orderByArrowWidth;\n            cell.text = addEllipsis(cell.formattedValue, cell.width - paddingRight - paddingLeft);\n            cell.text.height = cell.fontHeight;\n            if (cell.horizontalAlignment === 'right') {\n                hPos = cell.width - cell.text.width - paddingRight;\n            } else if (cell.horizontalAlignment === 'center') {\n                hPos = (cell.width / 2) - (cell.text.width / 2);\n            }\n            if (cell.verticalAlignment === 'top') {\n                vPos = paddingTop + cell.text.height;\n            } else if (cell.verticalAlignment === 'bottom') {\n                vPos = cell.height - paddingBottom - cell.text.height;\n            }\n            cell.text.x = cell.x + hPos;\n            cell.text.y = cell.y + vPos;\n            fillText(cell.text.value, cell.text.x, cell.text.y);\n        }\n        /**\n         * Redraws the grid. No matter what the change, this is the only method required to refresh everything.\n         * @memberof canvasDataGrid\n         * @name draw\n         * @method\n         */\n        self.draw = function (internal) {\n            if (self.dispatchEvent('beforedraw', {})) { return; }\n            if (!self.isChildGrid && (!self.height || !self.width)) {\n                return;\n            }\n            if (self.isChildGrid && internal) {\n                requestAnimationFrame(self.parentGrid.draw);\n                return;\n            }\n            if (self.intf.visible === false) {\n                return;\n            }\n            // initial values\n            var checkScrollHeight, rowHeaderCell, p, cx, cy, treeGrid, rowOpen,\n                rowHeight, cornerCell, y, x, c, h, w, s, r, rd, aCell,\n                selectionBorders = [],\n                rowHeaders = [],\n                l = self.data.length,\n                u = self.currentCell || {},\n                rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth(),\n                cellHeight = self.style.cellHeight;\n            drawCount += 1;\n            p = performance.now();\n            // if data length has changed, there is no way to know\n            if (self.data.length > self.orders.rows.length) {\n                self.createRowOrders();\n            }\n            function drawScrollBars() {\n                var v = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-bar'\n                    },\n                    n = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-bar'\n                    },\n                    vb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-box'\n                    },\n                    nb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-box'\n                    },\n                    co = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        isCorner: true,\n                        isScrollBoxCorner: true,\n                        style: 'scroll-box-corner'\n                    },\n                    m = (self.style.scrollBarBoxMargin * 2),\n                    d = self.style.scrollBarBoxMargin * 0.5;\n                self.ctx.strokeStyle = self.style.scrollBarBorderColor;\n                self.ctx.lineWidth = self.style.scrollBarBorderWidth;\n                // vertical\n                v.x += w - self.style.scrollBarWidth - self.style.scrollBarBorderWidth - d;\n                v.y += rowHeaderCellHeight;\n                v.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                v.height = h - rowHeaderCellHeight - self.style.scrollBarWidth - d - m;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(v.x, v.y, v.width, v.height + m);\n                strokeRect(v.x, v.y, v.width, v.height + m);\n                // vertical box\n                vb.x = v.x + self.style.scrollBarBoxMargin;\n                vb.y = rowHeaderCellHeight + self.style.scrollBarBoxMargin\n                    + ((v.height - self.scrollBox.scrollBoxHeight)\n                        * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight));\n                vb.width = self.style.scrollBarBoxWidth;\n                vb.height = self.scrollBox.scrollBoxHeight;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/vertical/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (vb.height < v.height) {\n                    radiusRect(vb.x, vb.y, vb.width, vb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                // horizontal\n                n.x += columnHeaderCellWidth;\n                n.y += h - self.style.scrollBarWidth - d;\n                n.width = w - self.style.scrollBarWidth - columnHeaderCellWidth - d - m;\n                n.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(n.x, n.y, n.width + m, n.height);\n                strokeRect(n.x, n.y, n.width + m, n.height);\n                // horizontal box\n                nb.y = n.y + self.style.scrollBarBoxMargin;\n                nb.x = columnHeaderCellWidth + self.style.scrollBarBoxMargin\n                    + ((n.width - self.scrollBox.scrollBoxWidth)\n                        * (self.scrollBox.scrollLeft / self.scrollBox.scrollWidth));\n                nb.width = self.scrollBox.scrollBoxWidth;\n                nb.height = self.style.scrollBarBoxWidth;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/horizontal/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (nb.width < n.width) {\n                    radiusRect(nb.x, nb.y, nb.width, nb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                //corner\n                self.ctx.strokeStyle = self.style.scrollBarCornerBorderColor;\n                self.ctx.fillStyle = self.style.scrollBarCornerBackgroundColor;\n                co.x = n.x + n.width + m;\n                co.y = v.y + v.height + m;\n                co.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                co.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                radiusRect(co.x, co.y, co.width, co.height, 0);\n                self.ctx.stroke();\n                self.ctx.fill();\n                self.visibleCells.unshift(v);\n                self.visibleCells.unshift(vb);\n                self.visibleCells.unshift(n);\n                self.visibleCells.unshift(nb);\n                self.visibleCells.unshift(co);\n                self.scrollBox.bar = {\n                    v: v,\n                    h: n\n                };\n                self.scrollBox.box = {\n                    v: vb,\n                    h: nb\n                };\n            }\n            function drawCell(d, rowIndex, rowOrderIndex) {\n                return function drawEach(header, headerIndex, columnOrderIndex) {\n                    var cellStyle = header.style || 'cell',\n                        cellGridAttributes,\n                        cell,\n                        isHeader = /HeaderCell/.test(cellStyle),\n                        isCorner = /cornerCell/.test(cellStyle),\n                        isRowHeader = 'rowHeaderCell' === cellStyle,\n                        isColumnHeader = 'columnHeaderCell' === cellStyle,\n                        selected = self.selections[rowOrderIndex] && self.selections[rowOrderIndex].indexOf(columnOrderIndex) !== -1,\n                        hovered = self.hovers[d[self.uniqueId]] && self.hovers[d[self.uniqueId]].indexOf(columnOrderIndex) !== -1,\n                        active = self.activeCell.rowIndex === rowOrderIndex && self.activeCell.columnIndex === columnOrderIndex,\n                        isGrid = typeof d[header.name] === 'object' && d[header.name] !== null && d[header.name] !== undefined,\n                        activeHeader = (self.orders.rows[self.activeCell.rowIndex] === rowOrderIndex\n                                || self.orders.columns[self.activeCell.columnIndex] === columnOrderIndex)\n                            && (columnOrderIndex === -1 || rowOrderIndex === -1)\n                            ? (isRowHeader ? 'activeRowHeaderCell' : 'activeColumnHeaderCell') : false,\n                        val,\n                        f = self.formatters[header.type || 'string'],\n                        orderByArrowSize = 0,\n                        treeArrowSize = 0,\n                        cellWidth = self.sizes.columns[isRowHeader ? 'cornerCell' : header[self.uniqueId]] || header.width,\n                        ev = {\n                            value: d[header.name],\n                            row: d,\n                            header: header\n                        };\n                    if (cellStyle === 'headerCellCap') {\n                        cellWidth = w - x;\n                    }\n                    // if no data or schema are defined, a width is provided to the stub column\n                    if (cellWidth === undefined) {\n                        cellWidth = self.style.columnWidth;\n                    }\n                    if (x + cellWidth + self.style.cellBorderWidth < 0) {\n                        x += cellWidth + self.style.cellBorderWidth;\n                    }\n                    if (active) {\n                        cellStyle = 'activeCell';\n                    }\n                    if (self.visibleRows.indexOf(rowIndex) === -1 && !isHeader) {\n                        self.visibleRows.push(rowIndex);\n                    }\n                    val = self.dispatchEvent('formatcellvalue', ev);\n                    if (!self.dispatchEvent('beforerendercell', ev)) {\n                        cx = x;\n                        cy = y;\n                        if (cellStyle === 'cornerCell') {\n                            cx = 0;\n                            cy = 0;\n                        } else if (isRowHeader) {\n                            cx = 0;\n                        } else if (isHeader) {\n                            cy = 0;\n                        }\n                        cell = {\n                            type: isGrid ? 'canvas-datagrid-cell' : header.type,\n                            style: cellStyle,\n                            nodeType: 'canvas-datagrid-cell',\n                            x: cx,\n                            y: cy,\n                            horizontalAlignment: self.style[cellStyle + 'HorizontalAlignment'],\n                            verticalAlignment: self.style[cellStyle + 'VerticalAlignment'],\n                            offsetTop: self.canvasOffsetTop + cy,\n                            offsetLeft: self.canvasOffsetLeft + cx,\n                            scrollTop: self.scrollBox.scrollTop,\n                            scrollLeft: self.scrollBox.scrollLeft,\n                            active: active || activeHeader,\n                            hovered: hovered,\n                            selected: selected,\n                            width: cellWidth,\n                            height: cellHeight,\n                            offsetWidth: cellWidth,\n                            offsetHeight: cellHeight,\n                            parentNode: self.intf.parentNode,\n                            offsetParent: self.intf.parentNode,\n                            data: d,\n                            isCorner: isCorner,\n                            isHeader: isHeader,\n                            isColumnHeader: isColumnHeader,\n                            isHeaderCellCap: !!header.isHeaderCellCap,\n                            isRowHeader: isRowHeader,\n                            rowOpen: rowOpen,\n                            header: header,\n                            columnIndex: columnOrderIndex,\n                            rowIndex: rowOrderIndex,\n                            sortColumnIndex: headerIndex,\n                            sortRowIndex: rowIndex,\n                            isGrid: isGrid,\n                            gridId: (self.attributes.name || '') + d[self.uniqueId] + ':' + header[self.uniqueId],\n                            parentGrid: self.intf,\n                            innerHTML: '',\n                            activeHeader: activeHeader,\n                            value: isHeader && !isRowHeader ? (header.title || header.name) : d[header.name]\n                        };\n                        ev.cell = cell;\n                        cell.userHeight = cell.isHeader ? self.sizes.rows[-1] : rowHeight;\n                        cell.userWidth = cell.isHeader ? self.sizes.columns.cornerCell : self.sizes.columns[header[self.uniqueId]];\n                        cell[self.uniqueId] = d[self.uniqueId];\n                        self.visibleCells.unshift(cell);\n                        self.ctx.fillStyle = self.style[cellStyle + 'BackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'BorderColor'];\n                        self.ctx.lineWidth = self.style[cellStyle + 'BorderWidth'];\n                        if (hovered) {\n                            self.ctx.fillStyle = self.style[cellStyle + 'HoverBackgroundColor'];\n                            self.ctx.strokeStyle = self.style[cellStyle + 'HoverBorderColor'];\n                        }\n                        if (selected) {\n                            self.ctx.fillStyle = self.style[cellStyle + 'SelectedBackgroundColor'];\n                            self.ctx.strokeStyle = self.style[cellStyle + 'SelectedBorderColor'];\n                        }\n                        if (activeHeader) {\n                            self.ctx.fillStyle = self.style[activeHeader + 'BackgroundColor'];\n                        }\n                        self.dispatchEvent('rendercell', ev);\n                        if (cell.isGrid) {\n                            if (cell.height !== rowHeight) {\n                                cell.height = rowHeight || self.style.cellHeightWithChildGrid;\n                                checkScrollHeight = true;\n                            }\n                            cell.width = self.sizes.columns[header[self.uniqueId]] || self.style.cellWidthWithChildGrid;\n                        }\n                        if (rowOpen && !cell.isRowHeader) {\n                            cell.height = self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight;\n                        }\n                        if (!cell.isGrid) {\n                            fillRect(cx, cy, cell.width, cell.height);\n                            strokeRect(cx, cy, cell.width, cell.height);\n                        }\n                        self.ctx.save();\n                        radiusRect(cell.x, cell.y, cell.width, cell.height, 0);\n                        self.ctx.clip();\n                        self.dispatchEvent('afterrendercell', ev);\n                        if (cell.height !== cellHeight && !(rowOpen && !cell.isRowHeader)) {\n                            self.sizes.rows[isHeader ? -1 : d[self.uniqueId]] = cell.height;\n                            checkScrollHeight = true;\n                        }\n                        if (cell.width !== cellWidth) {\n                            self.sizes.columns[header[self.uniqueId]] = cell.width;\n                            checkScrollHeight = true;\n                        }\n                        if (isRowHeader && self.attributes.tree) {\n                            if (!self.dispatchEvent('rendertreearrow', ev)) {\n                                treeArrowSize = drawTreeArrow(cell, self.style[cellStyle + 'PaddingLeft'], cy, 0);\n                            }\n                        }\n                        if ((self.attributes.showRowNumbers && isRowHeader)\n                                || !isRowHeader) {\n                            if (cell.isGrid) {\n                                if (!self.childGrids[cell.gridId]) {\n                                    cellGridAttributes = self.args.cellGridAttributes || self.args;\n                                    cellGridAttributes.name = self.attributes.saveAppearance ? cell.gridId : undefined;\n                                    cellGridAttributes.parentNode = cell;\n                                    cellGridAttributes.data = d[header.name];\n                                    self.childGrids[cell.gridId] = self.createGrid(cellGridAttributes);\n                                    self.sizes.rows[rd[self.uniqueId]]\n                                        = self.sizes.rows[rd[self.uniqueId]] || self.style.cellGridHeight;\n                                    checkScrollHeight = true;\n                                }\n                                cell.grid = self.childGrids[cell.gridId];\n                                cell.grid.parentNode = cell;\n                                cell.grid.visible = true;\n                                cell.grid.draw();\n                                self.dispatchEvent('rendercellgrid', ev);\n                            } else {\n                                if (self.childGrids[cell.gridId]) {\n                                    self.childGrids[cell.gridId].parentNode.offsetHeight = 0;\n                                }\n                                if (isHeader && self.orderBy === header.name) {\n                                    if (!self.dispatchEvent('renderorderbyarrow', ev)) {\n                                        orderByArrowSize = drawOrderByArrow(cx + self.style[cellStyle + 'PaddingLeft'], 0);\n                                    }\n                                }\n                                self.ctx.fillStyle = self.style[cellStyle + 'Color'];\n                                if (hovered) {\n                                    self.ctx.fillStyle = self.style[cellStyle + 'HoverColor'];\n                                }\n                                if (selected) {\n                                    self.ctx.fillStyle = self.style[cellStyle + 'SelectedColor'];\n                                }\n                                if (activeHeader) {\n                                    self.ctx.fillStyle = self.style[activeHeader + 'Color'];\n                                }\n                                self.ctx.font = self.style[cellStyle + 'Font'];\n                                cell.fontHeight = self.style[cellStyle + 'FontHeight'];\n                                cell.treeArrowWidth = treeArrowSize;\n                                cell.orderByArrowWidth = orderByArrowSize;\n                                val = val !== undefined ? val : f\n                                    ? f(ev) : '';\n                                if (val === undefined && !f) {\n                                    val = '';\n                                    console.warn('canvas-datagrid: Unknown format '\n                                        + header.type + ' add a cellFormater');\n                                }\n                                cell.formattedValue = ((val !== undefined && val !== null) ? val : '').toString();\n                                if (self.columnFilters && self.columnFilters[val] !== undefined && isHeader) {\n                                    cell.formattedValue = self.attributes.filterTextPrefix + val;\n                                }\n                                if (!self.dispatchEvent('rendertext', ev)) {\n                                    if (cell.innerHTML || header.type === 'html') {\n                                        drawHtml(cell);\n                                    } else {\n                                        drawText(cell);\n                                    }\n                                }\n                            }\n                        }\n                        if (active) {\n                            aCell = cell;\n                        }\n                        if (selected && !isRowHeader) {\n                            if ((!self.selections[cell.rowIndex - 1]\n                                    || self.selections[cell.rowIndex - 1].indexOf(cell.columnIndex) === -1\n                                    || cell.rowIndex === 0)\n                                    && !cell.isHeader) {\n                                selectionBorders.push([cell, 't']);\n                            }\n                            if (!self.selections[cell.rowIndex + 1]\n                                    || self.selections[cell.rowIndex + 1].indexOf(cell.columnIndex) === -1) {\n                                selectionBorders.push([cell, 'b']);\n                            }\n                            if (!self.selections[cell.rowIndex] || cell.columnIndex === 0\n                                    || self.selections[cell.rowIndex].indexOf(cell.columnIndex - 1) === -1) {\n                                selectionBorders.push([cell, 'l']);\n                            }\n                            if (!self.selections[cell.rowIndex] || cell.columnIndex === s.length\n                                    || self.selections[cell.rowIndex].indexOf(cell.columnIndex + 1) === -1) {\n                                selectionBorders.push([cell, 'r']);\n                            }\n                        }\n                        self.ctx.restore();\n                        x += cell.width + self.style.cellBorderWidth;\n                        return cell.width;\n                    }\n                };\n            }\n            function drawRowHeader(rowData, index, rowOrderIndex) {\n                var a;\n                if (self.attributes.showRowHeaders) {\n                    x = 0;\n                    rowHeaderCell = {'rowHeaderCell': index + 1 };\n                    rowHeaderCell[self.uniqueId] = rowData[self.uniqueId];\n                    a = {\n                        name: 'rowHeaderCell',\n                        width: self.style.rowHeaderCellWidth,\n                        style: 'rowHeaderCell',\n                        type: 'string',\n                        data: rowData[self.uniqueId],\n                        index: -1\n                    };\n                    a[self.uniqueId] = rowData[self.uniqueId];\n                    rowOpen = self.openChildren[rowData[self.uniqueId]];\n                    drawCell(rowHeaderCell, index, rowOrderIndex)(a, -1, -1);\n                }\n            }\n            function drawHeaders() {\n                var d, g = s.length, i, o, columnHeaderCell, header;\n                rowHeaders.forEach(function (rArgs) {\n                    y = rArgs[3];\n                    cellHeight = rArgs[4];\n                    drawRowHeader(rArgs[0], rArgs[1], rArgs[2]);\n                });\n                if (self.attributes.showColumnHeaders) {\n                    x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft;\n                    if (self.attributes.showRowHeaders) {\n                        x += columnHeaderCellWidth;\n                    }\n                    y = 0;\n                    // cell height might have changed during drawing\n                    cellHeight = self.getRowHeaderCellHeight();\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        header = s[i];\n                        d = {\n                            title: header.title,\n                            name: header.name,\n                            width: header.width,\n                            style: 'columnHeaderCell',\n                            type: 'string',\n                            index: o,\n                            order: i\n                        };\n                        columnHeaderCell = {'columnHeaderCell': header.title || header.name};\n                        columnHeaderCell[self.uniqueId] = 'h' + header[self.uniqueId];\n                        d[self.uniqueId] = header[self.uniqueId];\n                        x += drawCell(columnHeaderCell, -1, -1)(d, o, i);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    // fill in the space right of the headers\n                    if (x < w) {\n                        c = {\n                            name: '',\n                            width: self.style.scrollBarWidth,\n                            style: 'headerCellCap',\n                            isHeaderCell: true,\n                            isHeaderCellCap: true,\n                            type: 'string',\n                            index: s.length\n                        };\n                        c[self.uniqueId] = 'columnHeaderCell';\n                        drawCell({endCap: ''}, -1, -1)(c, -1, -1);\n                    }\n                    // fill in the space right of the headers\n                    if (self.attributes.showRowHeaders) {\n                        cornerCell = {'cornerCell': '' };\n                        cornerCell[self.uniqueId] = 'cornerCell';\n                        x = 0;\n                        c = {\n                            name: 'cornerCell',\n                            width: self.style.rowHeaderCellWidth,\n                            style: 'cornerCell',\n                            type: 'string',\n                            index: -1\n                        };\n                        c[self.uniqueId] = 'cornerCell';\n                        drawCell(cornerCell, -1, -1)(c, -1, -1);\n                    }\n                }\n            }\n            function drawRow(r, d) {\n                var i, treeHeight, rowSansTreeHeight, o, g = s.length;\n                if (y - (cellHeight * 2) > h) {\n                    return false;\n                }\n                rd = self.data[r];\n                rowOpen = self.openChildren[rd[self.uniqueId]];\n                rowSansTreeHeight = self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight;\n                treeHeight = (rowOpen ? self.sizes.trees[rd[self.uniqueId]] : 0);\n                rowHeight = rowSansTreeHeight + treeHeight;\n                if (y < rowHeight * -1) {\n                    return false;\n                }\n                if (self.attributes.showRowHeaders) {\n                    x += columnHeaderCellWidth;\n                }\n                cellHeight = rowHeight;\n                for (o = self.scrollIndexLeft; o < g; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        break;\n                    }\n                }\n                // cell height might have changed during drawing\n                cellHeight = rowHeight;\n                x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft + self.style.cellBorderWidth;\n                // don't draw a tree for the new row\n                treeGrid = self.childGrids[rd[self.uniqueId]];\n                if (r !== self.data.length && rowOpen) {\n                    treeGrid.visible = true;\n                    treeGrid.parentNode = {\n                        offsetTop: y + rowSansTreeHeight + self.canvasOffsetTop,\n                        offsetLeft: columnHeaderCellWidth - 1 + self.canvasOffsetLeft,\n                        offsetHeight: treeHeight,\n                        offsetWidth: self.width - columnHeaderCellWidth - self.style.scrollBarWidth - 1,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: self.style,\n                        nodeType: 'canvas-datagrid-tree',\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        rowIndex: r\n                    };\n                    self.visibleCells.unshift({\n                        rowIndex: x,\n                        columnIndex: 0,\n                        y: treeGrid.parentNode.offsetTop,\n                        x: treeGrid.parentNode.offsetLeft,\n                        height: treeGrid.parentNode.offsetHeight,\n                        width: treeGrid.parentNode.offsetWidth,\n                        style: 'tree-grid',\n                        type: treeGrid.parentNode.nodeType\n                    });\n                    treeGrid.draw();\n                } else if (treeGrid) {\n                    treeGrid.parentNode.offsetHeight = 0;\n                    delete self.sizes.trees[rd[self.uniqueId]];\n                }\n                rowHeaders.push([rd, r, d, y, rowHeight]);\n                y += cellHeight + self.style.cellBorderWidth;\n                return true;\n            }\n            function initDraw() {\n                self.visibleRows = [];\n                s = self.getVisibleSchema();\n                self.visibleCells = [];\n                self.canvasOffsetTop = self.isChildGrid ? self.parentNode.offsetTop : 0;\n                self.canvasOffsetLeft = self.isChildGrid ? self.parentNode.offsetLeft : 0;\n                h = self.height;\n                w = self.width;\n                if (!self.isChildGrid) {\n                    self.ctx.scale(window.devicePixelRatio, window.devicePixelRatio);\n                }\n            }\n            function drawBackground() {\n                radiusRect(0, 0, w, h, 0);\n                self.ctx.clip();\n                self.ctx.fillStyle = self.style.backgroundColor;\n                fillRect(0, 0, w, h);\n            }\n            function drawRows() {\n                var o, n, i, g = s.length;\n                x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft + self.style.cellBorderWidth;\n                y = (self.scrollBox.scrollTop * -1) + rowHeaderCellHeight + self.scrollPixelTop + self.style.cellBorderWidth;\n                for (r = self.scrollIndexTop; r < l; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.showNewRow) {\n                    if (self.attributes.showRowHeaders) {\n                        x += columnHeaderCellWidth;\n                    }\n                    rowHeight = cellHeight = self.style.cellHeight;\n                    rowOpen = false;\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        x += drawCell(self.newRow, self.data.length, self.data.length)(s[i], i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    rowHeaders.push([self.newRow, self.data.length, self.data.length, y, rowHeight]);\n                }\n            }\n            function drawReorderMarkers() {\n                if (!self.reorderObject) { return; }\n                var b = {\n                        height: self.reorderObject.height,\n                        width: self.reorderObject.width,\n                        x: self.reorderObject.x + self.reorderObject.dragOffset.x,\n                        y: self.reorderObject.y + self.reorderObject.dragOffset.y\n                    },\n                    m = {\n                        width: w,\n                        heigth: h,\n                        x: 0,\n                        y: 0\n                    };\n                self.ctx.fillStyle = self.style.reorderMarkerBackgroundColor;\n                self.ctx.lineWidth = self.style.reorderMarkerBorderWidth;\n                self.ctx.strokeStyle = self.style.reorderMarkerBorderColor;\n                if (self.dragMode === 'row-reorder') {\n                    b.width = w;\n                    b.x = 0;\n                    m.width = w;\n                    m.y = self.currentCell.y;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.rowIndex !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex - 1 !== self.reorderObject.rowIndex) {\n                        addBorderLine(m, 't');\n                    }\n                } else if (self.dragMode === 'column-reorder' && self.reorderObject) {\n                    b.height = h;\n                    b.y = 0;\n                    m.height = h;\n                    m.x = self.currentCell.x;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.columnIndex !== self.reorderObject.columnIndex\n                            && self.currentCell.columnIndex - 1 !== self.reorderObject.columnIndex) {\n                        addBorderLine(m, 'l');\n                    }\n                }\n            }\n            function drawBorder() {\n                self.ctx.lineWidth = self.style.gridBorderWidth;\n                self.ctx.strokeStyle = self.style.gridBorderColor;\n                strokeRect(0, 0, self.width, self.height);\n            }\n            function drawSelectionBorders() {\n                self.ctx.lineWidth = self.style.selectionOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.selectionOverlayBorderColor;\n                selectionBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n            }\n            function drawActiveCell() {\n                if (!aCell) { return; }\n                if (self.attributes.selectionMode === 'row') {\n                    if (self.activeCell && self.activeCell.rowIndex === aCell.rowIndex) {\n                        self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                        self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                        strokeRect(0, aCell.y, self.getHeaderWidth() + columnHeaderCellWidth, rowHeight);\n                    }\n                } else {\n                    self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                    self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                    strokeRect(aCell.x, aCell.y, aCell.width, aCell.height);\n                }\n            }\n            function drawDebug() {\n                perfCounters[drawCount % perfWindowSize] = performance.now() - p;\n                var d;\n                if (self.attributes.debug) {\n                    self.ctx.font = '11px sans-serif';\n                    d = {};\n                    d.perf = (perfCounters.reduce(function (a, b) {\n                        return a + b;\n                    }, 0) / perfCounters.length).toFixed(1)\n                        + 'ms (' +\n                        perfCounters.map(function (a) { return a.toFixed(1); }).join(', ') + ')';\n                    d.htmlImages = Object.keys(self.htmlImageCache).length;\n                    d.scrollBox = self.scrollBox.toString();\n                    d.scrollIndex = '{\"top\": ' + self.scrollIndexTop + ', \"left\": ' + self.scrollIndexLeft + '}';\n                    d.scrollPixel = '{\"top\": ' + self.scrollPixelTop + ', \"left\": ' + self.scrollPixelLeft + '}';\n                    d.canvasOffset = '{\"top\": ' + self.canvasOffsetTop + ', \"left\": ' + self.canvasOffsetLeft + '}';\n                    d.pointerLockPosition =  self.pointerLockPosition ?\n                            self.pointerLockPosition.x + ', ' + self.pointerLockPosition.y : '';\n                    d.size = '{\"width\": ' + self.width + ', \"height\": ' + self.height + '}';\n                    d.mouse = '{\"x\": ' + self.mouse.x + ', \"y\": ' + self.mouse.y + '}';\n                    d.touch = !self.touchStart\n                        ? '' : '{\"x\": ' + self.touchStart.x + ', \"y\": ' + self.touchStart.y + \"}\";\n                    d.entities = self.visibleCells.length;\n                    d.hasFocus = self.hasFocus;\n                    d.dragMode = self.dragMode;\n                    if (self.currentCell) {\n                        d.columnIndex = self.currentCell.columnIndex;\n                        d.rowIndex = self.currentCell.rowIndex;\n                        d.sortColumnIndex = self.currentCell.sortColumnIndex;\n                        d.sortRowIndex = self.currentCell.sortRowIndex;\n                        d.context = self.currentCell.context;\n                        d.dragContext = self.currentCell.dragContext;\n                        d.style = self.currentCell.style;\n                        d.type = self.currentCell.type;\n                    }\n                    self.ctx.save();\n                    Object.keys(d).forEach(function (key, index) {\n                        var m = key + ': ' + d[key],\n                            lh = 14;\n                        self.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n                        fillRect(columnHeaderCellWidth, lh + (index * lh), 800, lh);\n                        self.ctx.fillStyle = 'rgba(0, 0, 0, 1)';\n                        fillText(m, columnHeaderCellWidth + 1, rowHeaderCellHeight + (index * lh));\n                    });\n                    self.ctx.restore();\n                }\n            }\n            self.ctx.save();\n            initDraw();\n            drawBackground();\n            drawRows();\n            drawSelectionBorders();\n            drawActiveCell();\n            drawHeaders();\n            drawReorderMarkers();\n            drawScrollBars();\n            if (checkScrollHeight) {\n                self.resize(true);\n            }\n            drawBorder();\n            drawDebug();\n            if (self.dispatchEvent('afterdraw', {})) { return; }\n            self.ctx.restore();\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/draw.js\n// module id = 2\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var touchDelta = {x: 0, y: 0, scrollTop: 0, scrollLeft: 0},\n            touchAnimateTo = {scrollLeft: 0, scrollTop: 0},\n            touchSigma = {scrollLeft: 0, scrollTop: 0},\n            xPPS = 0,\n            yPPS = 0,\n            touchingCell = false,\n            startingCell = false,\n            wheeling,\n            animationFrames = 0;\n        self.getTouchPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.touches[0].clientX - rect.left,\n                    y: e.touches[0].clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        self.calculatePPS = function () {\n            xPPS = ((touchDelta.scrollLeft - touchSigma.scrollLeft) / (touchDelta.t - touchSigma.t));\n            yPPS = ((touchDelta.scrollTop - touchSigma.scrollTop) / (touchDelta.t - touchSigma.t));\n            touchSigma = {\n                scrollLeft: touchDelta.scrollLeft,\n                scrollTop: touchDelta.scrollTop,\n                t: performance.now() / 10\n            };\n        };\n        self.touchCell = function (e) {\n            return function () {\n                clearInterval(self.touchCalcTimeout);\n                var pos = self.getTouchPos(e);\n                if (Math.abs(touchDelta.x) + Math.abs(touchDelta.y) < self.attributes.touchDeadZone) {\n                    touchingCell = self.getCellAt(pos.x, pos.y);\n                    self.mousemove(e, pos);\n                    self.mousedown(e, pos);\n                    self.mousemove(e, pos);\n                    self.draw();\n                }\n            };\n        };\n        self.touchstart = function (e) {\n            touchingCell = false;\n            self.touchStart = self.getTouchPos(e);\n            startingCell = self.getCellAt(self.touchStart.x, self.touchStart.y, true);\n            if (self.dispatchEvent('touchstart', {NativeEvent: e, cell: self.startingCell})) { return; }\n            self.stopPropagation(e);\n            e.preventDefault();\n            self.touchScrollStart = {\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: performance.now() / 1000\n            };\n            touchDelta = {\n                x: self.touchStart.x,\n                y: self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: 0\n            };\n            self.touchmove(e);\n            clearTimeout(self.touchTimeout);\n            clearInterval(self.touchCalcTimeout);\n            self.touchTimeout = setTimeout(self.touchCell(e), self.attributes.touchSelectTimeMs);\n            self.touchCalcTimeout = setInterval(self.calculatePPS, 10);\n            self.touchHaltAnimation = true;\n            document.body.addEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.addEventListener('touchend', self.touchend, false);\n            document.body.addEventListener('touchcancel', self.touchcancel, false);\n        };\n        self.easing = function (t, b, c, d) {\n            return c * (t / d) * (2 - t) + b;\n        };\n        self.touchEndAnimation = function () {\n            if (!self.canvas || !self.scrollBox.scrollTo) { return requestAnimationFrame(self.touchEndAnimation); }\n            var x,\n                y,\n                n = performance.now() / 1000,\n                d = (self.attributes.touchReleaseAnimationDurationMs / 1000),\n                t;\n            touchDelta.t = touchDelta.t || n + d;\n            t = n - touchDelta.t + 1;\n            if (t > 1 || self.touchHaltAnimation || (animationFrames > 1000)) {\n                animationFrames = 0;\n                self.touchHaltAnimation = false;\n                touchAnimateTo = {scrollLeft: -1, scrollTop: -1};\n                return;\n            }\n            animationFrames += 1;\n            x = self.easing(t, touchDelta.scrollLeft, -touchAnimateTo.scrollLeft, d);\n            y = self.easing(t, touchDelta.scrollTop, -touchAnimateTo.scrollTop, d);\n            self.scrollBox.scrollTo(x, y);\n            requestAnimationFrame(self.touchEndAnimation);\n        };\n        self.touchend = function (e) {\n            if (self.dispatchEvent('touchend', {NativeEvent: e})) { return; }\n            var dz = Math.abs(touchDelta.x) + Math.abs(touchDelta.y) < self.attributes.touchDeadZone,\n                pos = {\n                    x: self.touchStart.x + touchDelta.x,\n                    y: self.touchStart.y + touchDelta.y\n                },\n                cell = self.getCellAt(pos.x, pos.y);\n            if (!self.hasFocus) { return; }\n            if (touchingCell) {\n                self.mouseup(e, self.touchStart);\n            } else if (dz) {\n                if (cell.active) {\n                    self.beginEditAt(cell.columnIndex, cell.rowIndex);\n                } else {\n                    self.mousedown(e, self.touchStart);\n                    self.mouseup(e, self.touchStart);\n                    self.click(e, self.touchStart);\n                }\n            }\n            touchingCell = false;\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n            clearTimeout(self.touchTimeout);\n            clearInterval(self.touchCalcTimeout);\n            self.calculatePPS();\n            touchAnimateTo.scrollLeft = xPPS * self.attributes.touchReleaseAcceleration;\n            touchAnimateTo.scrollTop = yPPS * self.attributes.touchReleaseAcceleration;\n            self.touchHaltAnimation = false;\n            if (animationFrames === 0 && !/-scroll-/.test(startingCell.style) && !dz) {\n                self.touchEndAnimation();\n            }\n        };\n        self.touchmove = function (e) {\n            var d = self.getTouchPos(e);\n            if (self.dispatchEvent('touchmove', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (!self.hasFocus) { return; }\n            touchDelta = {\n                x: d.x - self.touchStart.x,\n                y: d.y - self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: 0\n            };\n            if (/vertical-scroll-/.test(startingCell.style)) {\n                self.scrollBox.scrollTop = self.scrollBox.scrollHeight * (d.y / self.height);\n            } else if (/horizontal-scroll-/.test(startingCell.style)) {\n                self.scrollBox.scrollLeft = self.scrollBox.scrollWidth * (d.x / self.width);\n            } else if (touchingCell) {\n                self.mousemove(e, d);\n                self.draw();\n            } else {\n                if (animationFrames === 0) {\n                    self.scrollBox.scrollTo(self.touchScrollStart.scrollLeft - touchDelta.x,\n                        self.touchScrollStart.scrollTop - touchDelta.y);\n                }\n            }\n        };\n        self.touchcancel = function (e) {\n            if (self.dispatchEvent('touchcancel', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) { return; }\n            self.touchend(e);\n            touchingCell = false;\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n            return;\n        };\n        self.stopPropagation = function (e) { e.stopPropagation(); };\n        self.addEventListener = function (ev, fn) {\n            self.events[ev] = self.events[ev] || [];\n            self.events[ev].unshift(fn);\n        };\n        self.removeEventListener = function (ev, fn) {\n            (self.events[ev] || []).forEach(function removeEachListener(sfn, idx) {\n                if (fn === sfn) {\n                    self.events[ev].splice(idx, 1);\n                }\n            });\n        };\n        self.dispatchEvent = function (ev, e) {\n            var defaultPrevented;\n            function preventDefault() {\n                defaultPrevented = true;\n            }\n            if (!self.events[ev]) { return; }\n            self.events[ev].forEach(function dispatchEachEvent(fn) {\n                e.ctx = self.ctx;\n                e.preventDefault = preventDefault;\n                fn.apply(self.intf, [e]);\n            });\n            return defaultPrevented;\n        };\n        self.resize = function (drawAfterResize) {\n            var cellBorder = self.style.cellBorderWidth * 2,\n                columnHeaderCellBorder =  self.style.columnHeaderCellBorderWidth * 2,\n                scrollHeight,\n                scrollWidth,\n                rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth(),\n                // TODO: What the hell are these numbers!?  They are probably some value in the style.\n                scrollDragPositionOffsetY = 30,\n                scrollDragPositionOffsetX = 15;\n            if (self.isChildGrid) {\n                self.height = self.parentNode.offsetHeight;\n                self.width = self.parentNode.offsetWidth;\n            } else {\n                if (!self.parentIsCanvas) {\n                    if (self.shadowRootParentElement) {\n                        self.height = self.shadowRootParentElement.offsetHeight;\n                        self.width = self.shadowRootParentElement.offsetWidth;\n                    } else {\n                        self.height = self.parentDOMNode.offsetHeight;\n                        self.width = self.parentDOMNode.offsetWidth;\n                    }\n                    self.canvas.height = self.height * window.devicePixelRatio;\n                    self.canvas.width = self.width * window.devicePixelRatio;\n                    self.canvas.style.height = self.height + 'px';\n                    self.canvas.style.width = self.width + 'px';\n                }\n                self.canvasOffsetTop = self.args.canvasOffsetTop || 0;\n                self.canvasOffsetLeft = self.args.canvasOffsetLeft || 0;\n            }\n            scrollHeight = self.data.reduce(function reduceData(accumulator, row) {\n                return accumulator\n                    + (self.sizes.rows[row[self.uniqueId]] || self.style.cellHeight)\n                    + (self.sizes.trees[row[self.uniqueId]] || 0)\n                    + cellBorder;\n            }, 0) || 0;\n            scrollWidth = self.getVisibleSchema().reduce(function reduceSchema(accumulator, column) {\n                if (column.hidden) { return accumulator; }\n                return accumulator + (self.sizes.columns[column[self.uniqueId]] || column.width || self.style.columnWidth) + cellBorder;\n            }, 0) || 0;\n            if (self.attributes.showNewRow) {\n                scrollHeight += self.style.cellHeight + cellBorder;\n            }\n            self.scrollBox.width = self.width - columnHeaderCellWidth;\n            self.scrollBox.height = self.height - rowHeaderCellHeight - columnHeaderCellBorder;\n            self.scrollBox.top = rowHeaderCellHeight + columnHeaderCellBorder;\n            self.scrollBox.left = columnHeaderCellWidth;\n            self.scrollBox.scrollHeight = scrollHeight + self.style.scrollBarWidth - self.scrollBox.height;\n            self.scrollBox.scrollWidth = scrollWidth + self.style.scrollBarWidth - self.scrollBox.width;\n            self.scrollBox.widthBoxRatio = ((self.scrollBox.width - scrollDragPositionOffsetX)\n                / (self.scrollBox.scrollWidth + self.scrollBox.width - scrollDragPositionOffsetX));\n            self.scrollBox.scrollBoxWidth = self.scrollBox.width\n                * self.scrollBox.widthBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.heightBoxRatio = ((self.scrollBox.height - scrollDragPositionOffsetY)\n                / (self.scrollBox.scrollHeight + (self.scrollBox.height - scrollDragPositionOffsetY)));\n            self.scrollBox.scrollBoxHeight = self.scrollBox.height\n                * self.scrollBox.heightBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.scrollBoxWidth = Math.max(self.scrollBox.scrollBoxWidth, self.style.scrollBarBoxMinSize);\n            self.scrollBox.scrollBoxHeight = Math.max(self.scrollBox.scrollBoxHeight, self.style.scrollBarBoxMinSize);\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            self.resizeEditInput();\n            self.scroll(true);\n            if (drawAfterResize) {\n                self.draw(true);\n            }\n            self.dispatchEvent('resize', {});\n            return true;\n        };\n        self.resizeEditInput = function () {\n            if (self.input) {\n                var pos = self.canvas.getBoundingClientRect(),\n                    s = self.scrollOffset(self.canvas),\n                    bx2 = (self.style.cellBorderWidth * 2),\n                    cell = self.getVisibleCellByIndex(self.input.editCell.columnIndex, self.input.editCell.rowIndex)\n                        || {x: -100, y: -100, height: 0, width: 0};\n                self.input.style.left = pos.left + cell.x - self.style.cellBorderWidth + self.canvasOffsetLeft - s.left + 'px';\n                self.input.style.top = pos.top + cell.y - bx2 + self.canvasOffsetTop - s.top + 'px';\n                self.input.style.height = cell.height - bx2 - 1 + 'px';\n                self.input.style.width = cell.width - bx2 - self.style.cellPaddingLeft + 'px';\n                self.clipElement(self.input);\n            }\n        };\n        self.scroll = function (e, dontDraw) {\n            var s = self.getVisibleSchema(),\n                cellBorder = self.style.cellBorderWidth * 2;\n            self.scrollIndexTop = 0;\n            self.scrollPixelTop = 0;\n            self.scrollIndexLeft = 0;\n            self.scrollPixelLeft = 0;\n            while (self.scrollPixelTop < self.scrollBox.scrollTop && self.scrollIndexTop < self.data.length) {\n                self.scrollPixelTop +=\n                    (self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || self.style.cellHeight)\n                    + (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0)\n                    + cellBorder;\n                self.scrollIndexTop += 1;\n            }\n            while (self.scrollPixelLeft < self.scrollBox.scrollLeft && self.scrollIndexLeft < s.length) {\n                self.scrollPixelLeft +=\n                    (self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width);\n                self.scrollIndexLeft += 1;\n            }\n            if (self.data.length > 0) {\n                self.scrollIndexLeft = Math.max(self.scrollIndexLeft - 1, 0);\n                self.scrollPixelLeft = Math.max(self.scrollPixelLeft\n                    - (self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width), 0);\n                self.scrollIndexTop = Math.max(self.scrollIndexTop - 1, 0);\n                self.scrollPixelTop = Math.max(self.scrollPixelTop\n                    - (self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || self.style.cellHeight)\n                    - (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0), 0);\n            }\n            self.ellipsisCache = {};\n            if (!dontDraw) {\n                self.draw(true);\n            }\n            //TODO: figure out why this has to be delayed for child grids\n            //BUG: wheeling event on 3rd level hierarchy fails to move input box\n            requestAnimationFrame(self.resizeEditInput);\n            self.dispatchEvent('scroll', {top: self.scrollBox.scrollTop, left: self.scrollBox.scrollLeft});\n        };\n        self.mousemove = function (e, overridePos) {\n            if (self.contextMenu || self.input) {\n                return;\n            }\n            self.mouse = overridePos || self.getLayerPos(e);\n            var ctrl = (e.controlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                i,\n                s = self.getSchema(),\n                dragBounds,\n                sBounds,\n                x = self.mouse.x,\n                y = self.mouse.y,\n                o = self.getCellAt(x, y),\n                delta,\n                ev = {NativeEvent: e, cell: o, x: x, y: y},\n                previousCell = self.currentCell;\n            clearTimeout(self.scrollTimer);\n            if (!self.isInGrid({x: x, y: y})) {\n                self.hasFocus = false;\n            }\n            if (self.dispatchEvent('mousemove', ev)) {\n                return;\n            }\n            if (o && self.currentCell && (self.currentCell.rowIndex !== o.rowIndex\n                    || self.currentCell.columnIndex !== o.columnIndex)) {\n                self.cellBoundaryCrossed = true;\n                ev.cell = previousCell;\n                self.dispatchEvent('cellmouseout', ev);\n                ev.cell = o;\n                self.dispatchEvent('cellmouseover', ev);\n            }\n            self.currentCell = o;\n            if (!self.hasFocus) {\n                return;\n            }\n            self.hovers = {};\n            if (!self.draggingItem\n                    && o\n                    && self.scrollModes.indexOf(o.context) === -1) {\n                self.dragItem = o;\n                self.dragMode = o.dragContext;\n                self.canvas.style.cursor = o.context;\n                if (o.context === 'cell' && o.data) {\n                    self.canvas.style.cursor = 'pointer';\n                    self.hovers[o.data[self.uniqueId]] = [o.columnIndex];\n                }\n                if ((self.selecting || self.reorderObject)\n                        && o.context === 'cell'\n                        && o.data) {\n                    sBounds = self.getSelectionBounds();\n                    delta = {\n                        x: Math.abs(self.dragStart.x - x),\n                        y: Math.abs(self.dragStart.y - y)\n                    };\n                    if (self.dragStartObject.columnIndex !== -1 && e.shiftKey) {\n                        self.dragStartObject = {\n                            rowIndex: self.activeCell.rowIndex,\n                            columnIndex: self.activeCell.columnIndex\n                        };\n                    }\n                    dragBounds = {\n                        top: Math.min(self.dragStartObject.rowIndex, o.rowIndex),\n                        left: Math.min(self.dragStartObject.columnIndex, o.columnIndex),\n                        bottom: Math.max(self.dragStartObject.rowIndex, o.rowIndex),\n                        right: Math.max(self.dragStartObject.columnIndex, o.columnIndex)\n                    };\n                    if (self.dragStartObject.columnIndex === -1) {\n                        dragBounds.left = -1;\n                        dragBounds.right = s.length - 1;\n                        dragBounds.top = Math.min(sBounds.top, o.rowIndex);\n                        dragBounds.bottom = Math.max(sBounds.bottom, o.rowIndex);\n                    }\n                    if (self.dragStartObject.rowIndex !== o.rowIndex\n                                || self.dragStartObject.columnIndex !== o.columnIndex) {\n                        self.ignoreNextClick = true;\n                    }\n                    if (self.cellBoundaryCrossed || (delta.x === 0 && delta.y === 0) || (self.attributes.selectionMode === 'row')) {\n                        if ((self.attributes.selectionMode === 'row') || self.dragStartObject.columnIndex === -1) {\n                            self.selectRow(o.rowIndex, ctrl, null, true);\n                        } else {\n                            if (!self.dragAddToSelection && o.rowIndex !== undefined) {\n                                if (self.selections[o.rowIndex] && self.selections[o.rowIndex].indexOf(o.columnIndex) !== -1) {\n                                    self.selections[o.rowIndex].splice(self.selections[o.rowIndex].indexOf(o.columnIndex), 1);\n                                }\n                            } else {\n                                self.selections[o.rowIndex] = self.selections[o.rowIndex] || [];\n                                if (self.selections[o.rowIndex].indexOf(o.columnIndex) === -1) {\n                                    self.selections[o.rowIndex].push(o.columnIndex);\n                                }\n                            }\n                        }\n                    }\n                    if ((!self.selectionBounds || (dragBounds.top !== self.selectionBounds.top\n                            || dragBounds.left !== self.selectionBounds.left\n                            || dragBounds.bottom !== self.selectionBounds.bottom\n                            || dragBounds.right !== self.selectionBounds.right)) && !ctrl) {\n                        self.selections = [];\n                        sBounds = dragBounds;\n                        if (self.attributes.selectionMode === 'row') {\n                            for (i = sBounds.top; i <= sBounds.bottom; i += 1) {\n                                self.selectRow(i, true, null, true);\n                            }\n                        } else {\n                            self.selectArea(sBounds, true);\n                        }\n                    }\n                    self.autoScrollZone(e, x, y, ctrl);\n                }\n            }\n            self.cellBoundaryCrossed = false;\n            self.draw(true);\n        };\n        self.click = function (e, overridePos) {\n            var i,\n                selectionChanged,\n                ctrl = (e.controlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                pos = overridePos || self.getLayerPos(e);\n            self.currentCell = self.getCellAt(pos.x, pos.y);\n            if (self.currentCell.grid !== undefined) {\n                return;\n            }\n            function checkSelectionChange() {\n                if (!selectionChanged) { return; }\n                self.dispatchEvent('selectionchanged', {\n                    selectedData: self.getSelectedData(),\n                    selections: self.selections,\n                    selectionBounds: self.selectionBounds\n                });\n            }\n            if (self.input) {\n                self.endEdit();\n            }\n            if (self.ignoreNextClick) {\n                self.ignoreNextClick = false;\n                return;\n            }\n            i = self.currentCell;\n            if (self.dispatchEvent('click', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'cell') {\n                if (self.currentCell.style === 'cornerCell') {\n                    self.order(self.uniqueId, 'asc', self.sorters.number);\n                    self.setFilter();\n                    checkSelectionChange();\n                    return;\n                }\n                if (self.currentCell.style === 'columnHeaderCell') {\n                    if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                        if (self.orderBy === i.header.name) {\n                            self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                        } else {\n                            self.orderDirection = 'asc';\n                        }\n                        self.order(i.header.name, self.orderDirection);\n                        checkSelectionChange();\n                        return;\n                    }\n                    if (self.attributes.columnHeaderClickBehavior === 'select') {\n                        self.selectColumn(i.header.index, ctrl, e.shiftKey, true);\n                        checkSelectionChange();\n                        self.draw();\n                        return;\n                    }\n                }\n                if (['rowHeaderCell', 'columnHeaderCell'].indexOf(self.currentCell.style) === -1 && !ctrl) {\n                    self.setActiveCell(i.columnIndex, i.rowIndex);\n                }\n                self.selections[i.rowIndex] = self.selections[i.rowIndex] || [];\n                if (((self.attributes.selectionMode === 'row') || self.currentCell.style === 'rowHeaderCell')) {\n                    if (self.currentCell.style === 'rowHeaderCell'\n                            && self.attributes.tree && pos.x > 0\n                            && pos.x - self.currentCell.x < self.style.treeArrowWidth\n                            + self.style.treeArrowMarginLeft\n                            + self.style.treeArrowMarginRight + self.style.treeArrowClickRadius\n                            && pos.y - self.currentCell.y < self.style.treeArrowHeight\n                            + self.style.treeArrowMarginTop + self.style.treeArrowClickRadius\n                            && pos.y > 0) {\n                        self.toggleTree(i.rowIndex);\n                        return;\n                    }\n                    selectionChanged = true;\n                    self.selectRow(i.rowIndex, ctrl, null, true);\n                }\n                if (e.shiftKey && !ctrl) {\n                    self.selectionBounds = self.getSelectionBounds();\n                    self.selectArea(undefined, false);\n                }\n            }\n            checkSelectionChange();\n            self.draw(true);\n        };\n        self.dragResizeColumn = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = self.resizingStartingWidth + pos.x - self.dragStart.x;\n            y = self.resizingStartingHeight + pos.y - self.dragStart.y;\n            if (x < self.style.minColumnWidth) {\n                x = self.style.minColumnWidth;\n            }\n            if (y < self.style.minRowHeight) {\n                y = self.style.minRowHeight;\n            }\n            if (self.dispatchEvent('resizecolumn', {x: x, y: y, draggingItem: self.draggingItem})) { return false; }\n            if (self.scrollBox.scrollLeft > self.scrollBox.scrollWidth - self.attributes.resizeScrollZone\n                    && self.dragMode === 'ew-resize') {\n                self.resize(true);\n                self.scrollBox.scrollLeft += x;\n            }\n            if (self.dragMode === 'ew-resize') {\n                self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] = x;\n                if (['rowHeaderCell', 'cornerCell'].indexOf(self.draggingItem.header.style) !== -1) {\n                    self.resize(true);\n                }\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.dragMode === 'ns-resize') {\n                if (self.draggingItem.rowOpen) {\n                    self.sizes.trees[self.draggingItem.data[self.uniqueId]] = y;\n                } else if (self.attributes.globalRowResize) {\n                    self.style.cellHeight = y;\n                } else {\n                    self.sizes.rows[self.draggingItem.data[self.uniqueId]] = y;\n                }\n                self.dispatchEvent('resizerow', {row: y});\n                self.resizeChildGrids();\n                return;\n            }\n            self.ellipsisCache = {};\n        };\n        self.stopDragResize = function () {\n            self.resize();\n            document.body.removeEventListener('mousemove', self.dragResizeColumn, false);\n            document.body.removeEventListener('mouseup', self.stopDragResize, false);\n            self.setStorageData();\n            self.draw(true);\n            self.ignoreNextClick = true;\n        };\n        self.scrollGrid = function (e) {\n            var pos = self.getLayerPos(e);\n            if (self.attributes.scrollPointerLock && self.pointerLockPosition\n                    && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                self.pointerLockPosition.x += e.movementX;\n                self.pointerLockPosition.y += e.movementY;\n                self.pointerLockPosition.x = Math.min(self.width - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.x));\n                self.pointerLockPosition.y = Math.min(self.height - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.y));\n                pos = self.pointerLockPosition;\n            }\n            self.scrollMode = self.getCellAt(pos.x, pos.y).context;\n            if (self.scrollMode === 'horizontal-scroll-box' && self.scrollStartMode !== 'horizontal-scroll-box') {\n                self.scrollStartMode = 'horizontal-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.left = self.scrollBox.scrollLeft;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box' && self.scrollStartMode !== 'vertical-scroll-box') {\n                self.scrollStartMode = 'vertical-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.top = self.scrollBox.scrollTop;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollStartMode === 'vertical-scroll-box'\n                    && self.scrollMode !== 'vertical-scroll-box') {\n                self.scrollMode = 'vertical-scroll-box';\n            }\n            if (self.scrollStartMode === 'horizontal-scroll-box'\n                    && self.scrollMode !== 'horizontal-scroll-box') {\n                self.scrollMode = 'horizontal-scroll-box';\n            }\n            clearTimeout(self.scrollTimer);\n            if (self.scrollModes.indexOf(self.scrollMode) === -1) {\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box') {\n                self.scrollBox.scrollTop = self.scrollStart.top + ((pos.y - self.dragStart.y)\n                    / self.scrollBox.heightBoxRatio);\n            } else if (self.scrollMode === 'vertical-scroll-top') {\n                self.scrollBox.scrollTop -= (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'vertical-scroll-bottom') {\n                self.scrollBox.scrollTop += (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n            if (self.scrollMode === 'horizontal-scroll-box') {\n                self.scrollBox.scrollLeft = self.scrollStart.left + ((pos.x - self.dragStart.x)\n                    / self.scrollBox.widthBoxRatio);\n            } else if (self.scrollMode === 'horizontal-scroll-right') {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'horizontal-scroll-left') {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.stopScrollGrid = function () {\n            clearTimeout(self.scrollTimer);\n            if (document.exitPointerLock) {\n                document.exitPointerLock();\n            }\n            document.body.removeEventListener('mousemove', self.scrollGrid, false);\n        };\n        self.dragReorder = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = pos.x - self.dragStart.x;\n            y = pos.y - self.dragStart.y;\n            if (!self.attributes.allowColumnReordering && self.dragMode === 'column-reorder') {\n                return;\n            }\n            if (!self.attributes.allowRowReordering && self.dragMode === 'row-reorder') {\n                return;\n            }\n            if (self.dispatchEvent('reordering', {\n                    NativeEvent: e,\n                    source: self.dragStartObject,\n                    target: self.currentCell,\n                    dragMode: self.dragMode\n                })) {\n                return;\n            }\n            if (Math.abs(x) > self.attributes.reorderDeadZone || Math.abs(y) > self.attributes.reorderDeadZone) {\n                self.reorderObject = self.dragStartObject;\n                self.reorderTarget = self.currentCell;\n                self.reorderObject.dragOffset = {\n                    x: x,\n                    y: y\n                };\n                self.autoScrollZone(e, pos.x, pos.x, false);\n            }\n        };\n        self.stopDragReorder = function (e) {\n            var cr = {\n                    'row-reorder': self.orders.rows,\n                    'column-reorder': self.orders.columns\n                },\n                i = {\n                    'row-reorder': 'rowIndex',\n                    'column-reorder': 'columnIndex'\n                }[self.dragMode];\n            document.body.removeEventListener('mousemove', self.dragReorder, false);\n            document.body.removeEventListener('mouseup', self.stopDragReorder, false);\n            if (self.reorderObject\n                    && self.reorderTarget) {\n                self.ignoreNextClick = true;\n                if (self.reorderObject[i] !== self.reorderTarget[i]\n                        && !self.dispatchEvent('reorder', {\n                            NativeEvent: e,\n                            source: self.reorderObject,\n                            target: self.reorderTarget,\n                            dragMode: self.dragMode\n                        })) {\n                    cr[self.dragMode].splice(cr[self.dragMode].indexOf(self.reorderObject[i]), 1);\n                    cr[self.dragMode].splice(cr[self.dragMode].indexOf(self.reorderTarget[i]), 0, self.reorderObject[i]);\n                    self.setStorageData();\n                }\n            }\n            self.reorderObject = undefined;\n            self.reorderTarget = undefined;\n            self.draw(true);\n        };\n        self.mousedown = function (e, overridePos) {\n            self.lastMouseDownTarget = e.target;\n            if (self.dispatchEvent('mousedown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (e.button === 2 || self.input) { return; }\n            var ctrl = (e.controlKey || e.metaKey);\n            self.dragStart = overridePos || self.getLayerPos(e);\n            self.scrollStart = {\n                left: self.scrollBox.scrollLeft,\n                top: self.scrollBox.scrollTop\n            };\n            self.dragStartObject = self.getCellAt(self.dragStart.x, self.dragStart.y);\n            self.dragAddToSelection = !self.dragStartObject.selected;\n            if (!ctrl && !e.shiftKey && !/(vertical|horizontal)-scroll-(bar|box)/\n                    .test(self.dragStartObject.context) && !self.currentCell.isColumnHeader) {\n                self.selections = [];\n            }\n            if (self.dragStartObject.isGrid) {\n                return;\n            }\n            if (self.scrollModes.indexOf(self.dragStartObject.context) !== -1) {\n                self.scrollMode = self.dragStartObject.context;\n                self.scrollStartMode = self.dragStartObject.context;\n                self.scrollGrid(e);\n                if (self.attributes.scrollPointerLock\n                        && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                    self.pointerLockPosition = {\n                        x: self.dragStart.x,\n                        y: self.dragStart.y\n                    };\n                    self.canvas.requestPointerLock();\n                }\n                document.body.addEventListener('mousemove', self.scrollGrid, false);\n                document.body.addEventListener('mouseup', self.stopScrollGrid, false);\n                self.ignoreNextClick = true;\n                return;\n            }\n            if (self.dragMode === 'cell') {\n                self.selecting = true;\n                if (self.attributes.selectionMode === 'row') {\n                    self.selectRow(self.dragStartObject.rowIndex, ctrl, null, true);\n                }\n                return self.mousemove(e);\n            }\n            if (['ns-resize', 'ew-resize'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragItem;\n                if (self.draggingItem.rowOpen) {\n                    self.resizingStartingHeight = self.sizes.trees[self.draggingItem.data[self.uniqueId]];\n                } else {\n                    self.resizingStartingHeight = self.sizes.rows[self.draggingItem.data[self.uniqueId]] || self.style.cellHeight;\n                }\n                self.resizingStartingWidth = self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] || self.draggingItem.width;\n                document.body.addEventListener('mousemove', self.dragResizeColumn, false);\n                document.body.addEventListener('mouseup', self.stopDragResize, false);\n            }\n            if (['row-reorder', 'column-reorder'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragItem;\n                document.body.addEventListener('mousemove', self.dragReorder, false);\n                document.body.addEventListener('mouseup', self.stopDragReorder, false);\n            }\n        };\n        self.mouseup = function (e) {\n            clearTimeout(self.scrollTimer);\n            self.cellBoundaryCrossed = true;\n            self.selecting = undefined;\n            self.draggingItem = undefined;\n            self.dragStartObject = undefined;\n            if (self.dispatchEvent('mouseup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            if (self.currentCell && self.currentCell.grid !== undefined) {\n                return;\n            }\n            if (self.contextMenu || self.input) { return; }\n            if (self.dragStart && self.isInGrid(self.dragStart)) {\n                self.controlInput.focus();\n            }\n            e.preventDefault();\n        };\n        self.keydown = function (e) {\n            var i,\n                x = self.activeCell.columnIndex,\n                y = self.activeCell.rowIndex,\n                ctrl = (e.controlKey || e.metaKey),\n                last = self.data.length - 1,\n                cols = self.getVisibleSchema().length - 1;\n            if (self.dispatchEvent('keydown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            if (self.attributes.showNewRow) {\n                last += 1;\n            }\n            if (e.keyCode === 9) {\n                e.preventDefault();\n            }\n            // esc\n            if (e.keyCode === 27) {\n                self.selections = [];\n                self.draw(true);\n            // ctrl + a\n            } else if (ctrl && e.keyCode === 65) {\n                self.selectAll();\n            //ArrowDown\n            } else if (e.keyCode === 40) {\n                y += 1;\n            //ArrowUp\n            } else if (e.keyCode === 38) {\n                y -= 1;\n            //ArrowLeft Tab\n            } else if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {\n                x -= 1;\n            //ArrowRight Tab\n            } else if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {\n                x += 1;\n            //PageUp\n            } else if (e.keyCode === 33) {\n                y -= self.page;\n                e.preventDefault();\n            //PageDown\n            } else if (e.keyCode === 34) {\n                y += self.page;\n                e.preventDefault();\n            //Home ArrowUp\n            } else if (e.keyCode === 36 || (ctrl && e.keyCode === 38)) {\n                y = 0;\n            //End ArrowDown\n            } else if (e.keyCode === 35 || (ctrl && e.keyCode === 40)) {\n                y = self.data.length - 1;\n            //ArrowRight\n            } else if (ctrl && e.keyCode === 39) {\n                x = cols;\n            //ArrowLeft\n            } else if (ctrl && e.keyCode === 37) {\n                x = 0;\n            }\n            //Enter\n            if (e.keyCode === 13) {\n                return self.beginEditAt(x, y);\n            }\n            //Space\n            if (e.keyCode === 32) {\n                self.selections = [];\n                self.selections[Math.max(y, 0)] = [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                if (self.attributes.selectionMode === 'row') {\n                    for (i = self.selectionBounds.top; i <= self.selectionBounds.bottom; i += 1) {\n                        self.selectRow(i, ctrl, null, true);\n                    }\n                } else {\n                    self.selectArea(undefined, ctrl);\n                }\n                e.preventDefault();\n                self.draw(true);\n                return;\n            }\n            if (x < 0) {\n                x = 0;\n            }\n            if (y > last) {\n                y = last;\n            }\n            if (y < 0) {\n                y = 0;\n            }\n            if (x > cols) {\n                x = cols;\n            }\n            // Arrows\n            if (e.shiftKey && [37, 38, 39, 40].indexOf(e.keyCode) !== -1) {\n                self.selections[Math.max(y, 0)] = self.selections[Math.max(y, 0)] || [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                self.selectArea(undefined, ctrl);\n                self.draw(true);\n            }\n            if (x !== self.activeCell.columnIndex || y !== self.activeCell.rowIndex) {\n                self.scrollIntoView(x !== self.activeCell.columnIndex ? x : undefined, y !== self.activeCell.rowIndex ? y : undefined);\n                self.setActiveCell(x, y);\n                if (!e.shiftKey && self.attributes.selectionFollowsActiveCell) {\n                    if (!ctrl) {\n                        self.selections = [];\n                    }\n                    self.selections[y] = self.selections[y] || [];\n                    self.selections[y].push(x);\n                    self.dispatchEvent('selectionchanged', {\n                        selectedData: self.getSelectedData(),\n                        selections: self.selections,\n                        selectionBounds: self.selectionBounds\n                    });\n                }\n                self.draw(true);\n            }\n        };\n        self.keyup = function (e) {\n            if (self.dispatchEvent('keyup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            self.controlInput.value = '';\n        };\n        self.keypress = function (e) {\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.dispatchEvent('keypress', {NativeEvent: e, cell: self.currentCell})) { return; }\n        };\n        self.dblclick = function (e) {\n            if (self.dispatchEvent('dblclick', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'columnHeaderCell') {\n                self.fitColumnToValues(self.currentCell.header.name);\n            } else if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'cornerCell') {\n                self.autosize();\n            } else if (['cell', 'activeCell'].indexOf(self.currentCell.style) !== -1) {\n                self.beginEditAt(self.currentCell.columnIndex, self.currentCell.rowIndex);\n            }\n        };\n        self.scrollWheel = function (e) {\n            var l,\n                t,\n                deltaX = e.deltaX === undefined ? e.NativeEvent.deltaX : e.deltaX,\n                deltaY = e.deltaY === undefined ? e.NativeEvent.deltaY : e.deltaY,\n                deltaMode = e.deltaMode === undefined ? e.NativeEvent.deltaMode : e.deltaMode;\n            if (wheeling) {\n                return;\n            }\n            wheeling = setTimeout(function () {\n                if (self.dispatchEvent('wheel', {NativeEvent: e})) {\n                    return;\n                }\n                e = e.NativeEvent || e;\n                self.touchHaltAnimation = true;\n                l = self.scrollBox.scrollLeft;\n                t = self.scrollBox.scrollTop;\n                if (self.hasFocus) {\n                    //BUG Issue 42: https://github.com/TonyGermaneri/canvas-datagrid/issues/42\n                    //https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\n                    if (deltaMode === 1) {\n                        // line mode = 17 pixels per line\n                        deltaY = deltaY * 17;\n                    }\n                    self.scrollBox.scrollTo(deltaX + l, deltaY + t);\n                }\n                if (t !== self.scrollBox.scrollTop || l !== self.scrollBox.scrollLeft) {\n                    e.preventDefault();\n                }\n                wheeling = undefined;\n            }, 1);\n        };\n        self.copy = function (e) {\n            if (self.dispatchEvent('copy', {NativeEvent: e})) { return; }\n            if (!self.hasFocus || !e.clipboardData) { return; }\n            var rows = [], sData = self.getSelectedData();\n            if (sData.length > 0) {\n                sData.forEach(function (row) {\n                    if (row) {\n                        var r = [];\n                        Object.keys(row).forEach(function (key) {\n                            if (row[key] !== null\n                                    && row[key] !== false\n                                    && row[key] !== undefined\n                                    && row[key].replace) {\n                                return r.push('\"' + row[key].replace(/\"/g, '\"\"') + '\"');\n                            }\n                            r.push(row[key]);\n                        });\n                        r.join(',');\n                        rows.push(r);\n                    }\n                });\n                e.clipboardData.setData('text/plain', rows.join('\\n'));\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/events.js\n// module id = 3\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals HTMLElement: false, Reflect: false, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self, ctor) {\n        self.orders = {\n            rows: [],\n            columns: []\n        };\n        self.hasFocus = false;\n        self.activeCell = {\n            columnIndex: 0,\n            rowIndex: 0\n        };\n        self.storageName = 'canvasDataGrid';\n        self.invalidSearchExpClass = 'canvas-datagrid-invalid-search-regExp';\n        self.localStyleLibraryStorageKey = 'canvas-datagrid-user-style-library';\n        self.uniqueId = '_canvasDataGridUniqueId';\n        self.orderBy = self.uniqueId;\n        self.orderDirection = 'asc';\n        self.columnFilters = {};\n        self.filters = {};\n        self.ellipsisCache = {};\n        self.scrollBox = {};\n        self.visibleRows = [];\n        /**\n         * Used internally to keep track of sizes of row, columns and child grids.\n         * @memberof canvasDataGrid\n         * @property sizes\n         * @readonly\n         */\n        self.sizes = {\n            rows: {},\n            columns: {},\n            trees: {}\n        };\n        self.currentFilter = function () {\n            return true;\n        };\n        self.selections = [];\n        self.hovers = {};\n        self.attributes = {};\n        self.style = {};\n        self.formatters = {};\n        self.sorters = {};\n        self.schemaHashes = {};\n        self.events = {};\n        self.uId = 0;\n        self.changes = [];\n        self.scrollIndexTop = 0;\n        self.scrollPixelTop = 0;\n        self.scrollIndexLeft = 0;\n        self.scrollPixelLeft = 0;\n        self.childGrids = {};\n        self.openChildren = {};\n        self.scrollModes = [\n            'vertical-scroll-box',\n            'vertical-scroll-top',\n            'vertical-scroll-bottom',\n            'horizontal-scroll-box',\n            'horizontal-scroll-right',\n            'horizontal-scroll-left'\n        ];\n        self.mouse = { x: 0, y: 0};\n        self.getSelectedData = function (expandToRow) {\n            var d = [], s = self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                if (expandToRow) {\n                    s.forEach(function (column) {\n                        d[index][column.name] = self.data[index][column.name];\n                    });\n                } else {\n                    row.forEach(function (col) {\n                        if (col === -1 || !s[col]) { return; }\n                        d[index][s[col].name] = self.data[index][s[col].name];\n                    });\n                }\n            });\n            return d;\n        };\n        self.scrollOffset = function (e) {\n            var x = 0, y = 0;\n            while (e.parentNode && e.nodeName !== 'CANVAS-DATAGRID') {\n                if (e.nodeType !== 'canvas-datagrid-tree'\n                        && e.nodeType !== 'canvas-datagrid-cell') {\n                    x -= e.scrollLeft;\n                    y -= e.scrollTop;\n                }\n                e = e.parentNode;\n            }\n            return {left: x, top: y};\n        };\n        self.position = function (e, ignoreScrollOffset) {\n            var x = 0, y = 0, s = e, h, w;\n            while (e.offsetParent && e.nodeName !== 'CANVAS-DATAGRID') {\n                x += e.offsetLeft;\n                y += e.offsetTop;\n                h = e.offsetHeight;\n                w = e.offsetWidth;\n                e = e.offsetParent;\n            }\n            if (ignoreScrollOffset) {\n                return {left: x, top: y, height: h, width: w};\n            }\n            e = s;\n            s = self.scrollOffset(e);\n            return { left: x + s.left, top: y + s.top, height: h, width: w };\n        };\n        self.getLayerPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.clientX - rect.left,\n                    y: e.clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        self.fillArray = function (low, high, step) {\n            step = step || 1;\n            var i = [], x;\n            for (x = low; x <= high; x += step) {\n                i[x] = x;\n            }\n            return i;\n        };\n        self.getRowHeaderCellHeight = function () {\n            if (!self.attributes.showColumnHeaders) { return 0; }\n            return self.sizes.rows[-1] || self.style.columnHeaderCellHeight;\n        };\n        self.getColumnHeaderCellWidth = function () {\n            if (!self.attributes.showRowHeaders) { return 0; }\n            return self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth;\n        };\n        self.setStorageData = function () {\n            if (!self.attributes.saveAppearance) { return; }\n            localStorage.setItem(self.storageName + '-' + self.attributes.name, JSON.stringify({\n                sizes: {\n                    rows: self.sizes.rows,\n                    columns: self.sizes.columns\n                },\n                orders: {\n                    rows: self.orders.rows,\n                    columns: self.orders.columns\n                },\n                orderBy: self.orderBy,\n                orderDirection: self.orderDirection\n            }));\n        };\n        self.getSchema = function () {\n            return self.schema || self.tempSchema;\n        };\n        self.createColumnOrders = function () {\n            var s = self.getSchema();\n            self.orders.columns = self.fillArray(0, s.length - 1);\n        };\n        self.createRowOrders = function () {\n            self.orders.rows = self.fillArray(0, self.data.length - 1);\n        };\n        self.getVisibleSchema = function () {\n            return self.getSchema().filter(function (col) { return !col.hidden; });\n        };\n        self.applyDefaultValue = function (row, header) {\n            var d = header.defaultValue || '';\n            if (typeof d === 'function') {\n                d = d.apply(self.intf, [header]);\n            }\n            row[header.name] = d;\n        };\n        self.createNewRowData = function () {\n            self.newRow = {};\n            self.newRow[self.uniqueId] = self.uId;\n            self.uId += 1;\n            self.getSchema().forEach(function forEachHeader(header) {\n                self.applyDefaultValue(self.newRow, header);\n            });\n        };\n        self.getSchemaNameHash = function (key) {\n            var n = 0;\n            while (self.schemaHashes[key]) {\n                n += 1;\n                key = key + n;\n            }\n            return key;\n        };\n        self.filter = function (type) {\n            var f = self.filters[type];\n            if (!f && type !== undefined) {\n                console.warn('Cannot find filter for type %s, falling back to substring match.', type);\n                f = self.filters.string;\n            }\n            return f;\n        };\n        self.getBestGuessDataType = function (columnName) {\n            var t, x, l = self.data.length;\n            for (x = 0; x < l; x += 1) {\n                if ([null, undefined].indexOf(self.data[x][columnName]) !== -1) {\n                    t = typeof self.data[x];\n                    return t === 'object' ? 'string' : t;\n                }\n            }\n            return 'string';\n        };\n        self.drawChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].draw();\n            });\n        };\n        self.resizeChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].resize();\n            });\n        };\n        self.getClippingRect = function (ele) {\n            var boundingRect = self.position(self.parentNode),\n                eleRect = self.position(ele),\n                s = self.scrollOffset(self.canvas),\n                clipRect = {\n                    x: 0,\n                    y: 0,\n                    h: 0,\n                    w: 0\n                },\n                parentRect = {\n                    x: -Infinity,\n                    y: -Infinity,\n                    h: Infinity,\n                    w: Infinity\n                },\n                rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth();\n            boundingRect.top -= s.top;\n            boundingRect.left -= s.left;\n            eleRect.top -= s.top;\n            eleRect.left -= s.left;\n            clipRect.h = boundingRect.top + boundingRect.height - ele.offsetTop - self.style.scrollBarWidth;\n            clipRect.w = boundingRect.left + boundingRect.width - ele.offsetLeft - self.style.scrollBarWidth;\n            clipRect.x = boundingRect.left + (eleRect.left * -1) + columnHeaderCellWidth;\n            clipRect.y = boundingRect.top + (eleRect.top * -1) + rowHeaderCellHeight;\n            return {\n                x: clipRect.x > parentRect.x ? clipRect.x : parentRect.x,\n                y: clipRect.y > parentRect.y ? clipRect.y : parentRect.y,\n                h: clipRect.h < parentRect.h ? clipRect.h : parentRect.h,\n                w: clipRect.w < parentRect.w ? clipRect.w : parentRect.w\n            };\n        };\n        self.clipElement = function (ele) {\n            var clipRect = self.getClippingRect(ele);\n            if (clipRect.w < 0) { clipRect.w = 0; }\n            if (clipRect.h < 0) { clipRect.h = 0; }\n            ele.style.clip = 'rect('\n                + clipRect.y + 'px,'\n                + clipRect.w + 'px,'\n                + clipRect.h + 'px,'\n                + clipRect.x + 'px'\n                + ')';\n            // INFO https://developer.mozilla.org/en-US/docs/Web/CSS/clip\n            // clip has been \"deprecated\" for clipPath.  Of course nothing but chrome\n            // supports clip path, so we'll keep using clip until someday clipPath becomes\n            // more widely support.  The code below works correctly, but setting clipPath and clip\n            // at the same time has undesirable results.\n            // ele.style.clipPath = 'polygon('\n            //     + clipRect.x + 'px ' + clipRect.y + 'px,'\n            //     + clipRect.x + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.y + 'px'\n            //     + ')';\n        };\n        self.autoScrollZone = function (e, x, y, ctrl) {\n            var setTimer,\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth(),\n                rowHeaderCellHeight = self.getRowHeaderCellHeight();\n            if (x > self.width - self.attributes.selectionScrollZone && x < self.width) {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y > self.height - self.attributes.selectionScrollZone && y < self.height) {\n                self.scrollBox.scrollTop += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (x - self.attributes.selectionScrollZone - columnHeaderCellWidth < 0) {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y - self.attributes.selectionScrollZone - rowHeaderCellHeight < 0) {\n                self.scrollBox.scrollTop -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (setTimer && !ctrl && self.currentCell && self.currentCell.columnIndex !== -1) {\n                self.scrollTimer = setTimeout(self.mousemove, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.refreshFromOrigialData = function () {\n            self.data = self.originalData.filter(function (row) {\n                return true;\n            });\n        };\n        self.validateColumn = function (c, s) {\n            if (!c.name) {\n                throw new Error('A column must contain at least a name.');\n            }\n            if (s.filter(function (i) { return i.name === c.name; }).length > 0) {\n                throw new Error('A column with the name '\n                    + c.name + ' already exists and cannot be added again.');\n            }\n            return true;\n        };\n        self.setDefaults = function (obj1, obj2, key, def) {\n            obj1[key] = obj2[key] === undefined ? def : obj2[key];\n        };\n        self.setAttributes = function () {\n            self.defaults.attributes.forEach(function eachAttribute(i) {\n                self.setDefaults(self.attributes, self.args, i[0], i[1]);\n            });\n        };\n        self.setStyle = function () {\n            self.defaults.styles.forEach(function eachStyle(i) {\n                self.setDefaults(self.style, self.args.style || {}, i[0], i[1]);\n            });\n        };\n        self.autosize = function (colName) {\n            self.getVisibleSchema().forEach(function (col) {\n                if (col.name === colName || colName === undefined) {\n                    self.fitColumnToValues(col.name);\n                }\n            });\n            self.fitColumnToValues('cornerCell');\n        };\n        self.dispose = function () {\n            if (!self.isChildGrid && self.canvas && self.canvas.parentNode) {\n                self.canvas.parentNode.removeChild(self.canvas);\n            }\n            self.eventParent.removeEventListener('mouseup', self.mouseup, false);\n            self.eventParent.removeEventListener('mousedown', self.mousedown, false);\n            self.eventParent.removeEventListener('dblclick', self.dblclick, false);\n            self.eventParent.removeEventListener('click', self.click, false);\n            self.eventParent.removeEventListener('mousemove', self.mousemove);\n            self.eventParent.removeEventListener('wheel', self.scrollWheel, false);\n            self.canvas.removeEventListener('contextmenu', self.contextmenu, false);\n            self.canvas.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('keypress', self.keypress, false);\n            self.controlInput.removeEventListener('keyup', self.keyup, false);\n            self.controlInput.removeEventListener('keydown', self.keydown, false);\n            window.removeEventListener('resize', self.resize);\n            if (self.observer && self.observer.disconnect) {\n                self.observer.disconnect();\n            }\n        };\n        self.tryLoadStoredOrders = function () {\n            var s;\n            if (self.storedSettings && typeof self.storedSettings.orders === 'object') {\n                if (self.storedSettings.orders.rows.length >= self.data.length) {\n                    self.orders.rows = self.storedSettings.orders.rows;\n                }\n                s = self.getSchema();\n                if (self.storedSettings.orders.columns.length === s.length) {\n                    self.orders.columns = self.storedSettings.orders.columns;\n                }\n                self.orderBy = self.storedSettings.orderBy === undefined\n                    ? self.uniqueId : self.storedSettings.orderBy;\n                self.orderDirection = self.storedSettings.orderDirection === undefined\n                    ? self.uniqueId : self.storedSettings.orderDirection;\n                if (self.getHeaderByName(self.orderBy) && self.orderDirection) {\n                    self.order(self.orderBy, self.orderDirection);\n                }\n            }\n        };\n        self.getFontHeight = function (fontStyle) {\n            return parseFloat(fontStyle, 10);\n        };\n        self.parseFont = function (key) {\n            if (/Font/.test(key)) {\n                self.style[key + 'Height'] = self.getFontHeight(self.style[key]);\n            }\n        };\n        self.initProp = function (propName) {\n            if (!self.args[propName]) { return; }\n            Object.keys(self.args[propName]).forEach(function (key) {\n                self[propName][key] = self.args[propName][key];\n            });\n        };\n        self.init = function () {\n            if (self.initialized) { return; }\n            var publicStyleKeyIntf = {};\n            self.setAttributes();\n            self.setStyle();\n            self.initScrollBox();\n            self.setDom();\n            self.type = 'canvas-datagrid';\n            self.initialized = true;\n            self.pointerLockPosition = {x: 0, y: 0};\n            Object.keys(self.style).forEach(self.parseFont);\n            self.intf.type = self.type;\n            self.intf.addEventListener = self.addEventListener;\n            self.intf.removeEventListener = self.removeEventListener;\n            self.intf.dispatchEvent = self.dispatchEvent;\n            self.intf.dispose = self.dispose;\n            self.intf.appendTo = self.appendTo;\n            self.intf.filters = self.filters;\n            self.intf.sorters = self.sorters;\n            self.intf.autosize = self.autosize;\n            self.intf.beginEditAt = self.beginEditAt;\n            self.intf.endEdit = self.endEdit;\n            self.intf.setActiveCell = self.setActiveCell;\n            self.intf.scrollIntoView = self.scrollIntoView;\n            self.intf.clearChangeLog = self.clearChangeLog;\n            self.intf.gotoCell = self.gotoCell;\n            self.intf.gotoRow = self.gotoRow;\n            self.intf.findColumnScrollLeft = self.findColumnScrollLeft;\n            self.intf.findRowScrollTop = self.findRowScrollTop;\n            self.intf.fitColumnToValues = self.fitColumnToValues;\n            self.intf.findColumnMaxTextLength = self.findColumnMaxTextLength;\n            self.intf.disposeContextMenu = self.disposeContextMenu;\n            self.intf.getCellAt = self.getCellAt;\n            self.intf.isCellVisible = self.isCellVisible;\n            self.intf.order = self.order;\n            self.intf.draw = self.draw;\n            self.intf.selectArea = self.selectArea;\n            self.intf.clipElement = self.clipElement;\n            self.intf.getSchemaFromData = self.getSchemaFromData;\n            self.intf.setFilter = self.setFilter;\n            self.intf.selectRow = self.selectRow;\n            self.intf.parentGrid = self.parentGrid;\n            self.intf.toggleTree = self.toggleTree;\n            self.intf.expandTree = self.expandTree;\n            self.intf.collapseTree = self.collapseTree;\n            self.intf.canvas = self.canvas;\n            self.intf.context = self.ctx;\n            self.intf.insertRow = self.insertRow;\n            self.intf.deleteRow = self.deleteRow;\n            self.intf.addRow = self.addRow;\n            self.intf.insertColumn = self.insertColumn;\n            self.intf.deleteColumn = self.deleteColumn;\n            self.intf.addColumn = self.addColumn;\n            self.intf.getClippingRect = self.getClippingRect;\n            self.intf.setRowHeight = self.setRowHeight;\n            self.intf.setColumnWidth = self.setColumnWidth;\n            self.intf.resetColumnWidths = self.resetColumnWidths;\n            self.intf.resetRowHeights = self.resetRowHeights;\n            self.intf.resize = self.resize;\n            self.intf.selectColumn = self.selectColumn;\n            self.intf.selectRow = self.selectRow;\n            self.intf.selectAll = self.selectAll;\n            self.intf.drawChildGrids = self.drawChildGrids;\n            self.intf.assertPxColor = self.assertPxColor;\n            self.intf.clearPxColorAssertions = self.clearPxColorAssertions;\n            self.intf.integerToAlpha = self.integerToAlpha;\n            self.intf.copy = self.copy;\n            Object.keys(self.style).forEach(function (key) {\n                // unless this line is here, Object.keys() will not work on <instance>.style\n                publicStyleKeyIntf[key] = undefined;\n                Object.defineProperty(publicStyleKeyIntf, key, {\n                    get: function () {\n                        return self.style[key];\n                    },\n                    set: function (value) {\n                        self.parseFont(value);\n                        self.style[key] = value;\n                        self.draw(true);\n                        self.dispatchEvent('stylechanged', {name: key, value: value});\n                    }\n                });\n            });\n            Object.defineProperty(self.intf, 'shadowRoot', {\n                get: function () {\n                    return self.shadowRoot;\n                }\n            });\n            Object.defineProperty(self.intf, 'activeCell', {\n                get: function () {\n                    return self.activeCell;\n                }\n            });\n            /**\n             * When true, the grid is has focus.\n             * @memberof canvasDataGrid\n             * @property hasFocus\n             * @readonly\n             */\n            Object.defineProperty(self.intf, 'hasFocus', {\n                get: function () {\n                    return self.hasFocus;\n                }\n            });\n            Object.defineProperty(self.intf, 'style', {\n                get: function () {\n                    return publicStyleKeyIntf;\n                },\n                set: function (value) {\n                    Object.keys(value).forEach(function (key) {\n                        self.parseFont(value);\n                        self.style[key] = value[key];\n                    });\n                    self.draw(true);\n                    self.dispatchEvent('stylechanged', {name: 'style', value: value});\n                }\n            });\n            Object.defineProperty(self.intf, 'attributes', { value: {}});\n            Object.keys(self.attributes).forEach(function (key) {\n                Object.defineProperty(self.intf.attributes, key, {\n                    get: function () {\n                        return self.attributes[key];\n                    },\n                    set: function (value) {\n                        self.attributes[key] = value;\n                        self.draw(true);\n                        self.dispatchEvent('attributechanged', {name: key, value: value[key]});\n                    }\n                });\n            });\n            self.filters.string = function (value, filterFor) {\n                var filterRegExp,\n                    regEnd = /\\/(i|g|m)*$/,\n                    pattern = regEnd.exec(filterFor),\n                    flags = pattern ? pattern[0].substring(1) : '',\n                    flagLength = flags.length;\n                self.invalidFilterRegEx = undefined;\n                if (filterFor.substring(0, 1) === '/' && pattern) {\n                    try {\n                        filterRegExp = new RegExp(filterFor.substring(1, filterFor.length - (flagLength + 1)), flags);\n                    } catch (e) {\n                        self.invalidFilterRegEx = e;\n                        return;\n                    }\n                    return filterRegExp.test(value);\n                }\n                return value.toString ? value.toString().toLocaleUpperCase()\n                    .indexOf(filterFor.toLocaleUpperCase()) !== -1 : false;\n            };\n            self.filters.number = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                return value === filterFor;\n            };\n            if (self.attributes.name && self.attributes.saveAppearance) {\n                self.storedSettings = localStorage.getItem(self.storageName + '-' + self.attributes.name);\n                if (self.storedSettings) {\n                    try {\n                        self.storedSettings = JSON.parse(self.storedSettings);\n                    } catch (e) {\n                        console.warn('could not read settings from localStore', e);\n                        self.storedSettings = undefined;\n                    }\n                }\n                if (self.storedSettings) {\n                    if (typeof self.storedSettings.sizes === 'object') {\n                        self.sizes.rows = self.storedSettings.sizes.rows;\n                        self.sizes.columns = self.storedSettings.sizes.columns;\n                        ['trees', 'columns', 'rows'].forEach(function (i) {\n                            if (!self.sizes[i]) {\n                                self.sizes[i] = {};\n                            }\n                        });\n                    }\n                }\n            }\n            ['formatters', 'filters', 'sorters'].forEach(self.initProp);\n            if (self.args.data) {\n                self.intf.data = self.args.data;\n            }\n            if (!self.data) {\n                self.intf.data = [];\n            }\n            if (self.args.schema) {\n                self.intf.schema = self.args.schema;\n            }\n            if (self.isChildGrid) {\n                requestAnimationFrame(function () { self.resize(true); });\n            } else {\n                self.resize(true);\n            }\n            return self;\n        };\n        /**\n         * Removes focus from the grid.\n         * @memberof canvasDataGrid\n         * @name blur\n         * @method\n         */\n        self.intf.blur = function (e) {\n            self.hasFocus = false;\n        };\n        /**\n         * Focuses on the grid.\n         * @memberof canvasDataGrid\n         * @name focus\n         * @method\n         */\n        self.intf.focus = function () {\n            self.hasFocus = true;\n            self.controlInput.focus();\n        };\n        Object.defineProperty(self.intf, 'height', {\n            get: function () {\n                return self.parentNode.height;\n            },\n            set: function (value) {\n                self.parentNode.height = value;\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'width', {\n            get: function () {\n                return self.parentNode.width;\n            },\n            set: function (value) {\n                self.parentNode.width = value;\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'openChildren', {\n            get: function () {\n                return self.openChildren;\n            }\n        });\n        Object.defineProperty(self.intf, 'childGrids', {\n            get: function () {\n                return Object.keys(self.childGrids).map(function (gridId) {\n                    return self.childGrids[gridId];\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'isChildGrid', {\n            get: function () {\n                return self.isChildGrid;\n            }\n        });\n        Object.defineProperty(self.intf, 'parentNode', {\n            get: function () {\n                return self.parentNode;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetParent', {\n            get: function () {\n                return self.parentNode;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetLeft', {\n            get: function () {\n                return self.parentNode.offsetLeft;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetTop', {\n            get: function () {\n                return self.parentNode.offsetTop;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollHeight', {\n            get: function () {\n                return self.scrollBox.scrollHeight;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollWidth', {\n            get: function () {\n                return self.scrollBox.scrollWidth;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollTop', {\n            get: function () {\n                return self.scrollBox.scrollTop;\n            },\n            set: function (value) {\n                self.scrollBox.scrollTop = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollLeft', {\n            get: function () {\n                return self.scrollBox.scrollLeft;\n            },\n            set: function (value) {\n                self.scrollBox.scrollLeft = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'sizes', {\n            get: function () {\n                return self.sizes;\n            }\n        });\n        Object.defineProperty(self.intf, 'input', {\n            get: function () {\n                return self.input;\n            }\n        });\n        Object.defineProperty(self.intf, 'controlInput', {\n            get: function () {\n                return self.controlInput;\n            }\n        });\n        Object.defineProperty(self.intf, 'currentCell', {\n            get: function () {\n                return self.currentCell;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleCells', {\n            get: function () {\n                return self.visibleCells;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRows', {\n            get: function () {\n                return self.visibleRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'selections', {\n            get: function () {\n                return self.selections;\n            }\n        });\n        Object.defineProperty(self.intf, 'dragMode', {\n            get: function () {\n                return self.dragMode;\n            }\n        });\n        Object.defineProperty(self.intf, 'changes', {\n            get: function () {\n                return self.changes;\n            }\n        });\n        self.intf.formatters = self.formatters;\n        self.normalizeDataset = function (data, callback) {\n            var i, d, max, syncFnInvoked;\n            if (data === null || data === '' || data === undefined) {\n                return callback([]);\n            }\n            if (typeof data === 'string'\n                    || typeof data === 'number'\n                    || typeof data === 'boolean') {\n                data = [{'0': data}];\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if ((!Array.isArray(data[0]) && typeof data[0] === 'object' && data[0] !== null)\n                            || (Array.isArray(data) && data.length === 0)) {\n                return callback(data);\n            }\n            if (typeof data === 'function') {\n                i = data.apply(self.intf, [function (d) {\n                    if (syncFnInvoked) {\n                        console.warn('Detected a callback to the data setter function after the same function already returned a value synchronously.');\n                    }\n                    self.normalizeDataset(d, callback);\n                }]);\n                if (i) {\n                    syncFnInvoked = true;\n                    self.normalizeDataset(i, callback);\n                }\n                return;\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if (Array.isArray(data)) {\n                if (!Array.isArray(data[0])) {\n                    //array of something?  throw it all into 1 row!\n                    data = [data];\n                }\n                // find the longest length\n                max = 0;\n                d = [];\n                data.forEach(function (row) {\n                    max = Math.max(max, row.length);\n                });\n                // map against length indexes\n                data.forEach(function (row, index) {\n                    var x;\n                    d[index] = {};\n                    for (x = 0; x < max; x += 1) {\n                        d[index][x] = row[x];\n                    }\n                });\n                return callback(d);\n            }\n            throw new Error('Unsupported data type.  Must be an array of arrays or an array of objects, function or string.');\n        };\n        Object.defineProperty(self.intf, 'selectionBounds', {\n            get: function () {\n                return self.getSelectionBounds();\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedRows', {\n            get: function () {\n                return self.getSelectedData(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedCells', {\n            get: function () {\n                return self.getSelectedData();\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleSchema', {\n            get: function () {\n                return self.getVisibleSchema().map(function eachDataRow(col) {\n                    return col;\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'ctx', {\n            get: function () {\n                return self.ctx;\n            }\n        });\n        Object.defineProperty(self.intf, 'schema', {\n            get: function schemaGetter() {\n                return self.getSchema();\n            },\n            set: function schemaSetter(value) {\n                if (!Array.isArray(value) || typeof value[0] !== 'object') {\n                    throw new Error('Schema must be an array of objects.');\n                }\n                if (value[0].name === undefined) {\n                    throw new Error('Expected schema to contain an object with at least a name property.');\n                }\n                self.schema = value.map(function eachSchemaColumn(column, index) {\n                    column.width = column.width || self.style.columnWidth;\n                    column[self.uniqueId] = self.getSchemaNameHash(column.name);\n                    column.filter = column.filter || self.filter(column.type);\n                    column.type = column.type || 'string';\n                    column.index = index;\n                    column.columnIndex = index;\n                    column.rowIndex = -1;\n                    return column;\n                });\n                self.tempSchema = undefined;\n                self.createNewRowData();\n                self.createColumnOrders();\n                self.tryLoadStoredOrders();\n                self.resize(true);\n                self.dispatchEvent('schemachanged', {schema: self.schema});\n            }\n        });\n        Object.defineProperty(self.intf, 'data', {\n            get: function dataGetter() {\n                return self.data.map(function (row) {\n                    delete row[self.uniqueId];\n                    return row;\n                });\n            },\n            set: function dataSetter(value) {\n                self.normalizeDataset(value, function (d) {\n                    self.originalData = d.map(function eachDataRow(row) {\n                        row[self.uniqueId] = self.uId;\n                        self.uId += 1;\n                        return row;\n                    });\n                    self.changes = [];\n                    //TODO apply filter to incoming dataset\n                    self.data = self.originalData;\n                    if (!self.schema) {\n                        self.tempSchema = self.getSchemaFromData();\n                    }\n                    if (!self.schema && self.data.length === 0) {\n                        self.tempSchema = [{name: ''}];\n                        self.tempSchema[0][self.uniqueId] = self.getSchemaNameHash('');\n                    }\n                    if (self.tempSchema && !self.schema) {\n                        self.createColumnOrders();\n                        self.tryLoadStoredOrders();\n                        self.dispatchEvent('schemachanged', {schema: self.tempSchema});\n                    }\n                    self.createNewRowData();\n                    if (self.attributes.autoResizeColumns && self.data.length > 0\n                            && self.storedSettings === undefined) {\n                        self.autosize();\n                    }\n                    self.fitColumnToValues('cornerCell', true);\n                    if (!self.resize() || !self.isChildGrid) { self.draw(true); }\n                    self.createRowOrders();\n                    self.tryLoadStoredOrders();\n                    self.dispatchEvent('datachanged', {data: self.data});\n                });\n            }\n        });\n        self.initScrollBox = function () {\n            var sHeight = 0,\n                sWidth = 0,\n                scrollTop = 0,\n                scrollLeft = 0,\n                scrollHeight = 0,\n                scrollWidth = 0,\n                scrollBoxHeight = 20,\n                scrollBoxWidth = 20;\n            function setScrollTop(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollTop value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollHeight) {\n                    value = scrollHeight;\n                }\n                if (scrollHeight < 0) {\n                    value = 0;\n                }\n                scrollTop = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            function setScrollLeft(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollLeft value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollWidth) {\n                    value = scrollWidth;\n                }\n                if (scrollWidth < 0) {\n                    value = 0;\n                }\n                scrollLeft = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            self.scrollBox.toString = function () {\n                return '{\"width\": ' + scrollWidth\n                    + ', \"height\": ' + scrollHeight\n                    + ', \"left\": ' + scrollLeft\n                    + ', \"top\": ' + scrollTop + '}';\n            };\n            self.scrollBox.scrollTo = function (x, y) {\n                setScrollLeft(x, true);\n                setScrollTop(y);\n            };\n            Object.defineProperty(self.scrollBox, 'scrollBoxHeight', {\n                get: function () {\n                    return scrollBoxHeight;\n                },\n                set: function (value) {\n                    scrollBoxHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollBoxWidth', {\n                get: function () {\n                    return scrollBoxWidth;\n                },\n                set: function (value) {\n                    scrollBoxWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'height', {\n                get: function () {\n                    return sHeight;\n                },\n                set: function (value) {\n                    if (scrollHeight < value) {\n                        scrollTop = 0;\n                    }\n                    sHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'width', {\n                get: function () {\n                    return sWidth;\n                },\n                set: function (value) {\n                    sWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollTop', {\n                get: function () {\n                    return scrollTop;\n                },\n                set: setScrollTop\n            });\n            Object.defineProperty(self.scrollBox, 'scrollLeft', {\n                get: function () {\n                    return scrollLeft;\n                },\n                set: setScrollLeft\n            });\n            Object.defineProperty(self.scrollBox, 'scrollHeight', {\n                get: function () {\n                    return scrollHeight;\n                },\n                set: function (value) {\n                    if (scrollTop > value) {\n                        scrollTop = Math.max(value, 0);\n                    }\n                    if (scrollHeight < sHeight) {\n                        scrollTop = 0;\n                    }\n                    scrollHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollWidth', {\n                get: function () {\n                    return scrollWidth;\n                },\n                set: function (value) {\n                    if (scrollLeft > value) {\n                        scrollLeft = Math.max(value, 0);\n                    }\n                    scrollWidth = value;\n                }\n            });\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/intf.js\n// module id = 4\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false, Event: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var zIndexTop = 2, hoverScrollTimeout, autoCompleteContext;\n        function createContextMenu(ev, pos, items, parentContextMenu) {\n            var container = document.createElement('div'),\n                upArrow = document.createElement('div'),\n                downArrow = document.createElement('div'),\n                children = [],\n                selectedIndex = -1,\n                intf = {},\n                rect;\n            if (!Array.isArray(items)) { throw new Error('createContextMenu expects an array.'); }\n            function createItems() {\n                items.forEach(function (item) {\n                    var contextItemContainer = document.createElement('div'),\n                        childMenuArrow;\n                    function removeChildContext(e) {\n                        if (e.relatedTarget === container\n                                || item.contextMenu.container === e.relatedTarget\n                                || childMenuArrow === e.relatedTarget\n                                || (contextItemContainer === e.relatedTarget)\n                                ) { return; }\n                        item.contextMenu.dispose();\n                        children.splice(children.indexOf(item.contextMenu), 1);\n                        item.contextMenu = undefined;\n                        contextItemContainer.removeEventListener('mouseout', removeChildContext);\n                        container.removeEventListener('mouseout', removeChildContext);\n                        contextItemContainer.setAttribute('contextOpen', '0');\n                        contextItemContainer.setAttribute('opening', '0');\n                    }\n                    function contextAddCallback(items) {\n                        // check yet again if the user hasn't moved off\n                        if (contextItemContainer.getAttribute('opening') !== '1' ||\n                                contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        var cPos = contextItemContainer.getBoundingClientRect();\n                        cPos = {\n                            left: cPos.left + self.style.childContextMenuMarginLeft + container.offsetWidth,\n                            top: cPos.top + self.style.childContextMenuMarginTop,\n                            bottom: cPos.bottom,\n                            right: cPos.right\n                        };\n                        item.contextMenu = createContextMenu(ev, cPos, items, intf);\n                        contextItemContainer.setAttribute('contextOpen', '1');\n                        contextItemContainer.addEventListener('mouseout', removeChildContext);\n                        container.addEventListener('mouseout', removeChildContext);\n                        children.push(item.contextMenu);\n                    }\n                    function createChildContext() {\n                        var i;\n                        if (contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        contextItemContainer.setAttribute('opening', '1');\n                        if (typeof item.items === 'function') {\n                            i  = item.items.apply(intf, [function (items) {\n                                contextAddCallback(items);\n                            }]);\n                            if (i !== undefined && Array.isArray(i)) {\n                                contextAddCallback(i);\n                            }\n                            return;\n                        }\n                        contextAddCallback(item.items);\n                    }\n                    function addItem(item) {\n                        function addContent(content) {\n                            if (typeof content === 'function') {\n                                return addContent(content(ev));\n                            }\n                            if (typeof content === 'object') {\n                                contextItemContainer.appendChild(content);\n                                return;\n                            }\n                            self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n                            contextItemContainer.addEventListener('mouseover', function () {\n                                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                            });\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n                            });\n                            contextItemContainer.innerHTML = content;\n                            return;\n                        }\n                        addContent(item.title);\n                        item.contextItemContainer = contextItemContainer;\n                        if ((item.items && item.items.length > 0) || typeof item.items === 'function') {\n                            childMenuArrow = document.createElement('div');\n                            self.createInlineStyle(childMenuArrow, 'canvas-datagrid-context-child-arrow');\n                            childMenuArrow.innerHTML = self.style.childContextMenuArrowHTML;\n                            contextItemContainer.appendChild(childMenuArrow);\n                            contextItemContainer.addEventListener('mouseover', createChildContext);\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                contextItemContainer.setAttribute('opening', '0');\n                            });\n                        }\n                        if (item.click) {\n                            contextItemContainer.addEventListener('click', function (ev) {\n                                item.click.apply(self, [ev]);\n                            });\n                        }\n                    }\n                    addItem(item);\n                    container.appendChild(contextItemContainer);\n                });\n            }\n            function clickIndex(idx) {\n                items[idx].contextItemContainer.dispatchEvent(new Event('click'));\n            }\n            function checkArrowVisibility() {\n                if (container.scrollTop > 0) {\n                    self.parentDOMNode.appendChild(upArrow);\n                } else if (upArrow.parentNode) {\n                    upArrow.parentNode.removeChild(upArrow);\n                }\n                if (container.scrollTop >= container.scrollHeight - container.offsetHeight && downArrow.parentNode) {\n                    downArrow.parentNode.removeChild(downArrow);\n                } else if (container.scrollHeight - container.offsetHeight > 0\n                        && !(container.scrollTop >= container.scrollHeight - container.offsetHeight)) {\n                    self.parentDOMNode.appendChild(downArrow);\n                }\n            }\n            function startHoverScroll(type) {\n                return function t() {\n                    var a = self.attributes.contextHoverScrollAmount;\n                    if (type === 'up' && container.scrollTop === 0) { return; }\n                    if (type === 'down' && container.scrollTop === container.scrollHeight) { return; }\n                    container.scrollTop += (type === 'up' ? -a : a);\n                    hoverScrollTimeout = setTimeout(t, self.attributes.contextHoverScrollRateMs, type);\n                };\n            }\n            function endHoverScroll(type) {\n                return function () {\n                    clearTimeout(hoverScrollTimeout);\n                };\n            }\n            function init() {\n                var loc = {},\n                    s = self.scrollOffset(self.canvas);\n                createItems();\n                self.createInlineStyle(container, 'canvas-datagrid-context-menu');\n                loc.x = pos.left - s.left;\n                loc.y = pos.top - s.top;\n                loc.height = 0;\n                zIndexTop += 1;\n                container.style.position = 'absolute';\n                upArrow.style.color = self.style.contextMenuArrowColor;\n                downArrow.style.color = self.style.contextMenuArrowColor;\n                [upArrow, downArrow].forEach(function (el) {\n                    el.style.textAlign = 'center';\n                    el.style.position = 'absolute';\n                    el.style.zIndex = zIndexTop + 1;\n                });\n                container.style.zIndex = zIndexTop;\n                if (parentContextMenu && parentContextMenu.inputDropdown) {\n                    container.style.maxHeight = window.innerHeight - loc.y - self.style.autocompleteBottomMargin + 'px';\n                    container.style.minWidth = pos.width + 'px';\n                    loc.y += pos.height;\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                container.addEventListener('scroll', checkArrowVisibility);\n                container.addEventListener('wheel', function (e) {\n                    if (self.hasFocus) {\n                        container.scrollTop += e.deltaY;\n                        container.scrollLeft += e.deltaX;\n                    }\n                    checkArrowVisibility();\n                });\n                upArrow.innerHTML = self.style.contextMenuArrowUpHTML;\n                downArrow.innerHTML = self.style.contextMenuArrowDownHTML;\n                container.appendChild(upArrow);\n                self.parentDOMNode.appendChild(downArrow);\n                self.parentDOMNode.appendChild(container);\n                rect = container.getBoundingClientRect();\n                if (rect.bottom > window.innerHeight && !(parentContextMenu && parentContextMenu.inputDropdown)) {\n                    loc.y = window.innerHeight - container.offsetHeight;\n                    if (loc.y < 0) { loc.y = 0; }\n                    if (container.offsetHeight > window.innerHeight) {\n                        container.style.height = window.innerHeight - self.style.contextMenuWindowMargin + 'px';\n                    }\n                }\n                if (rect.right > window.innerWidth) {\n                    if (parentContextMenu) {\n                        loc.x = parentContextMenu.container.offsetLeft - container.offsetWidth;\n                    } else {\n                        loc.x = window.innerWidth - container.offsetWidth;\n                    }\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                rect = container.getBoundingClientRect();\n                upArrow.style.top = rect.top + 'px';\n                downArrow.style.top = rect.top + rect.height - downArrow.offsetHeight + 'px';\n                upArrow.style.left = rect.left + 'px';\n                downArrow.style.left = rect.left + 'px';\n                downArrow.style.width = container.offsetWidth + 'px';\n                upArrow.style.width = container.offsetWidth + 'px';\n                downArrow.addEventListener('mouseover', startHoverScroll('down'));\n                downArrow.addEventListener('mouseout', endHoverScroll('down'));\n                upArrow.addEventListener('mouseover', startHoverScroll('up'));\n                upArrow.addEventListener('mouseout', endHoverScroll('up'));\n                checkArrowVisibility();\n            }\n            intf.parentGrid = self.intf;\n            intf.parentContextMenu = parentContextMenu;\n            intf.container = container;\n            init();\n            intf.clickIndex = clickIndex;\n            intf.rect = rect;\n            intf.items = items;\n            intf.upArrow = upArrow;\n            intf.downArrow = downArrow;\n            intf.dispose = function () {\n                clearTimeout(hoverScrollTimeout);\n                children.forEach(function (c) {\n                    c.dispose();\n                });\n                [downArrow, upArrow, container].forEach(function (el) {\n                    if (el.parentNode) { el.parentNode.removeChild(el); }\n                });\n            };\n            Object.defineProperty(intf, 'selectedIndex', {\n                get: function () {\n                    return selectedIndex;\n                },\n                set: function (value) {\n                    if (typeof value !== 'number' || isNaN(value || !isFinite(value))) {\n                        throw new Error('Context menu selected index must be a sane number.');\n                    }\n                    selectedIndex = value;\n                    if (selectedIndex > items.length - 1) {\n                        selectedIndex = items.length - 1;\n                    }\n                    if (selectedIndex < 0) {\n                        selectedIndex = 0;\n                    }\n                    items.forEach(function (item, index) {\n                        if (index === selectedIndex) {\n                            return self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                        }\n                        self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item');\n                    });\n                }\n            });\n            return intf;\n        }\n        function createFilterContextMenuItems(e) {\n            var filterContainer = document.createElement('div'),\n                filterLabel = document.createElement('div'),\n                filterAutoCompleteButton = document.createElement('button'),\n                filterInput = document.createElement('input'),\n                n = e.cell && e.cell.header ? e.cell.header.title || e.cell.header.name : '',\n                autoCompleteItems,\n                iRect;\n            function checkRegExpErrorState() {\n                filterInput.style.background = self.style.contextFilterInputBackground;\n                filterInput.style.color = self.style.contextFilterInputColor;\n                if (self.invalidFilterRegEx) {\n                    filterInput.style.background = self.style.contextFilterInvalidRegExpBackground;\n                    filterInput.style.color = self.style.contextFilterInvalidRegExpColor;\n                }\n            }\n            function fillAutoComplete() {\n                autoCompleteItems = {};\n                self.data.filter(function (d, i) { return i < self.attributes.maxAutoCompleteItems; }).forEach(function (row) {\n                    var value = row[e.cell.header.name];\n                    if (autoCompleteItems[value]) { return; }\n                    autoCompleteItems[value] = {\n                        title: self.formatters[e.cell.header.type || 'string']({ cell: { value: value }}),\n                        click: function (e) {\n                            filterInput.value = value;\n                            e.stopPropagation();\n                            filterInput.dispatchEvent(new Event('keyup'));\n                            self.disposeAutocomplete();\n                            return;\n                        }\n                    };\n                });\n                autoCompleteItems = Object.keys(autoCompleteItems).map(function (key) {\n                    return autoCompleteItems[key];\n                });\n            }\n            function createAutoCompleteContext(ev) {\n                if (ev && [40, 38, 13, 9, 27].indexOf(ev.keyCode) !== -1) { return; }\n                fillAutoComplete();\n                iRect = filterInput.getBoundingClientRect();\n                if (autoCompleteContext) {\n                    autoCompleteContext.dispose();\n                    autoCompleteContext = undefined;\n                }\n                autoCompleteContext = createContextMenu(e, {\n                    left: iRect.left,\n                    top: iRect.top,\n                    right: iRect.right,\n                    bottom: iRect.bottom,\n                    height: iRect.height,\n                    width: iRect.width\n                }, autoCompleteItems, {inputDropdown: true});\n                autoCompleteContext.selectedIndex = 0;\n            }\n            self.createInlineStyle(filterLabel, 'canvas-datagrid-context-menu-label');\n            self.createInlineStyle(filterAutoCompleteButton, 'canvas-datagrid-context-menu-filter-button');\n            self.createInlineStyle(filterInput, 'canvas-datagrid-context-menu-filter-input');\n            checkRegExpErrorState();\n            filterInput.onclick = self.disposeAutocomplete;\n            filterInput.addEventListener('keydown', function (e) {\n                //down\n                if (e.keyCode === 40) {\n                    autoCompleteContext.selectedIndex += 1;\n                }\n                //up\n                if (e.keyCode === 38) {\n                    autoCompleteContext.selectedIndex -= 1;\n                }\n                //enter\n                if (e.keyCode === 13) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    self.disposeContextMenu();\n                }\n                //tab\n                if (e.keyCode === 9) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    e.preventDefault();\n                }\n                //esc\n                if (e.keyCode === 27) {\n                    self.disposeContextMenu();\n                }\n            });\n            filterInput.addEventListener('keyup', function () {\n                self.setFilter(e.cell.header.name, filterInput.value);\n            });\n            filterInput.addEventListener('keyup', createAutoCompleteContext);\n            ['focus', 'blur', 'keydown', 'keyup', 'change'].forEach(function (en) {\n                filterInput.addEventListener(en, checkRegExpErrorState);\n            });\n            filterInput.value = e.cell.header ? self.columnFilters[e.cell.header.name] || '' : '';\n            filterLabel.innerHTML = self.attributes.filterOptionText.replace(/%s/g, n);\n            filterAutoCompleteButton.onclick = function () {\n                if (autoCompleteContext) {\n                    return self.disposeAutocomplete();\n                }\n                createAutoCompleteContext();\n            };\n            filterAutoCompleteButton.innerHTML = self.style.contextFilterButtonHTML;\n            filterContainer.addEventListener('click', function (e) {\n                return e.stopPropagation();\n            });\n            filterContainer.appendChild(filterLabel);\n            filterContainer.appendChild(filterInput);\n            filterContainer.appendChild(filterAutoCompleteButton);\n            e.items.push({\n                title: filterContainer\n            });\n            if (Object.keys(self.columnFilters).length) {\n                Object.keys(self.columnFilters).forEach(function (cf) {\n                    var h = self.getHeaderByName(cf);\n                    e.items.push({\n                        title: self.attributes.removeFilterOptionText.replace(/%s/g, h.title || h.name),\n                        click: function removeFilterClick(e) {\n                            e.preventDefault();\n                            self.setFilter(cf, '');\n                            self.controlInput.focus();\n                        }\n                    });\n                });\n            }\n        }\n        function addDefaultContextMenuItem(e) {\n            var isNormalCell = !(e.cell.isBackground || e.cell.isHeaderCellCap\n                    || e.cell.isScrollBar || e.cell.isCorner || e.cell.isRowHeader)\n                    && e.cell.header;\n            if (self.attributes.showFilter && isNormalCell) {\n                createFilterContextMenuItems(e);\n            }\n            if (self.attributes.showCopy\n                    && self.selections.reduce(function (p, r) {\n                        return p + r.length;\n                    }, 0) > 0) {\n                e.items.push({\n                    title: self.attributes.copyText,\n                    click: function () {\n                        document.execCommand('copy');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.saveAppearance && self.attributes.showClearSettingsOption\n                    && (Object.keys(self.sizes.rows).length > 0\n                        || Object.keys(self.sizes.columns).length > 0)) {\n                e.items.push({\n                    title: self.attributes.clearSettingsOptionText,\n                    click: function (e) {\n                        e.preventDefault();\n                        self.sizes.rows = {};\n                        self.sizes.columns = {};\n                        self.createRowOrders();\n                        self.createColumnOrders();\n                        self.storedSettings = undefined;\n                        self.dispatchEvent('resizecolumn', {columnWidth: self.style.columnWidth});\n                        self.dispatchEvent('resizerow', {cellHeight: self.style.cellHeight});\n                        self.setStorageData();\n                        self.resize(true);\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.allowSorting && self.attributes.showOrderByOption && isNormalCell) {\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextAsc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'asc');\n                        self.controlInput.focus();\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextDesc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'desc');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n        }\n        self.disposeAutocomplete = function () {\n            if (autoCompleteContext) {\n                autoCompleteContext.dispose();\n                autoCompleteContext = undefined;\n            }\n        };\n        self.disposeContextMenu = function () {\n            document.removeEventListener('click', self.disposeContextMenu);\n            zIndexTop = 2;\n            self.disposeAutocomplete();\n            if (self.contextMenu) {\n                self.contextMenu.dispose();\n            }\n            self.contextMenu = undefined;\n        };\n        self.contextmenuEvent = function (e, overridePos) {\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            function createDiposeEvent() {\n                requestAnimationFrame(function () {\n                    document.addEventListener('click', self.disposeContextMenu);\n                    document.removeEventListener('mouseup', createDiposeEvent);\n                });\n            }\n            var items = [],\n                pos = overridePos || self.getLayerPos(e, true),\n                ev = {\n                    NativeEvent: e,\n                    cell: self.getCellAt(pos.x, pos.y),\n                    items: items\n                };\n            if (!ev.cell.isGrid) {\n                addDefaultContextMenuItem(ev);\n            }\n            if (self.dispatchEvent('contextmenu', ev)) {\n                return;\n            }\n            if (!ev.cell.isGrid) {\n                if (self.contextMenu) {\n                    self.disposeContextMenu();\n                }\n                self.contextMenu = createContextMenu(ev, {\n                    left: pos.x + pos.rect.left + self.style.contextMenuMarginLeft + self.canvasOffsetLeft,\n                    top: pos.y + pos.rect.top + self.style.contextMenuMarginTop + self.canvasOffsetTop,\n                    right: ev.cell.width + ev.cell.x + pos.rect.left,\n                    bottom: ev.cell.height + ev.cell.y + pos.rect.top,\n                    height: ev.cell.height,\n                    width: ev.cell.width\n                }, items);\n                document.addEventListener('mouseup', createDiposeEvent);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/contextMenu.js\n// module id = 5\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        /**\n         * Ends editing, optionally aborting the edit.\n         * @memberof canvasDataGrid\n         * @name endEdit\n         * @method\n         * @param {boolean} abort When true, abort the edit.\n         */\n        self.endEdit = function (abort) {\n            var cell = self.input.editCell,\n                y = cell.rowIndex;\n            function abortEdit() {\n                abort = true;\n            }\n            if (self.dispatchEvent('beforeendedit', {\n                    cell: cell,\n                    newValue: self.input.value,\n                    oldValue: cell.value,\n                    abort: abortEdit,\n                    input: self.input\n                })) { return false; }\n            if (self.input.value !== cell.value && !abort) {\n                self.changes[y] = self.changes[y] || {};\n                self.changes[y][cell.header.name] = self.input.value;\n                cell.data[cell.header.name] = self.input.value;\n                if (y === self.data.length) {\n                    if (self.dispatchEvent('newrow', {\n                            value: self.input.value,\n                            defaultValue: cell.value,\n                            aborted: abort,\n                            cell: cell,\n                            input: self.input\n                        })) { return false; }\n                    self.uId += 1;\n                    self.addRow(cell.data);\n                    self.createNewRowData();\n                }\n                self.draw(true);\n            }\n            self.parentDOMNode.removeChild(self.input);\n            self.controlInput.focus();\n            self.dispatchEvent('endedit', {\n                cell: cell,\n                value: self.input.value,\n                aborted: abort,\n                input: self.input\n            });\n            self.input = undefined;\n            return true;\n        };\n        /**\n         * Begins editing at cell x, row y.\n         * @memberof canvasDataGrid\n         * @name beginEditAt\n         * @method\n         * @param {number} x The column index of the cell to edit.\n         * @param {number} y The row index of the cell to edit.\n         */\n        self.beginEditAt = function (x, y) {\n            if (!self.attributes.editable) { return; }\n            var cell = self.getVisibleCellByIndex(x, y),\n                s = self.getVisibleSchema(),\n                enumItems,\n                //HACK for IE10, does not like literal enum\n                enu = cell.header['enum'];\n            if (self.dispatchEvent('beforebeginedit', {cell: cell})) { return false; }\n            self.scrollIntoView(x, y);\n            self.setActiveCell(x, y);\n            if (enu) {\n                self.input = document.createElement('select');\n            } else {\n                self.input = document.createElement(self.attributes.multiLine\n                    ? 'textarea' : 'input');\n            }\n            function postDraw() {\n                var option, valueInEnum;\n                cell = self.getVisibleCellByIndex(x, y);\n                if (enu) {\n                    // add enums\n                    if (typeof enu === 'function') {\n                        enumItems = enu.apply(self.intf, [{cell: cell}]);\n                    } else if (Array.isArray(enu)) {\n                        enumItems = enu;\n                    }\n                    enumItems.forEach(function (e) {\n                        var i = document.createElement('option'),\n                            val,\n                            title;\n                        if (Array.isArray(e)) {\n                            val = e[0];\n                            title = e[1];\n                        } else {\n                            val = e;\n                            title = e;\n                        }\n                        if (val === cell.value) { valueInEnum = true; }\n                        i.value = val;\n                        i.innerHTML = title;\n                        self.input.appendChild(i);\n                    });\n                    if (!valueInEnum) {\n                        option = document.createElement('option');\n                        option.value = cell.value;\n                        option.innerHTML = cell.value;\n                        self.input.appendChild(option);\n                    }\n                    self.input.addEventListener('change', function () {\n                        self.endEdit();\n                        self.draw(true);\n                    });\n                }\n                self.parentDOMNode.appendChild(self.input);\n                self.createInlineStyle(self.input, 'canvas-datagrid-edit-input');\n                self.input.style.position = 'absolute';\n                self.input.editCell = cell;\n                self.resizeEditInput();\n                self.input.style.zIndex = '2';\n                self.input.value = cell.value;\n                self.input.focus();\n                self.input.addEventListener('click', self.stopPropagation);\n                self.input.addEventListener('dblclick', self.stopPropagation);\n                self.input.addEventListener('mouseup', self.stopPropagation);\n                self.input.addEventListener('mousedown', self.stopPropagation);\n                self.input.addEventListener('keydown', function (e) {\n                    var nx = cell.columnIndex,\n                        ny = cell.rowIndex;\n                    // esc\n                    if (e.keyCode === 27) {\n                        self.endEdit(true);\n                        self.draw(true);\n                    // enter\n                    } else if (e.keyCode === 13\n                            && (!self.attributes.multiLine\n                                || (self.attributes.multiLine && e.shiftKey))) {\n                        self.endEdit();\n                        self.draw(true);\n                    } else if (e.keyCode === 9) {\n                        e.preventDefault();\n                        if (!self.endEdit()) {\n                            return;\n                        }\n                        if (e.shiftKey) {\n                            nx -= 1;\n                        } else {\n                            nx += 1;\n                        }\n                        if (nx < 0) {\n                            nx = s.length - 1;\n                            ny -= 1;\n                        }\n                        if (nx > s.length - 1) {\n                            nx = 0;\n                            ny += 1;\n                        }\n                        if (ny < 0) {\n                            ny = self.data.length - 1;\n                        }\n                        if (ny > self.data.length - 1) {\n                            ny = 0;\n                        }\n                        self.scrollIntoView(nx, ny);\n                        self.beginEditAt(nx, ny);\n                    }\n                });\n            }\n            postDraw();\n            self.dispatchEvent('beginedit', {cell: cell, input: self.input});\n        };\n        self.createInlineStyle = function (el, className) {\n            var css = {\n                'canvas-datagrid-context-menu-filter-input': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextFilterInputBackground,\n                    color: self.style.contextFilterInputColor,\n                    border: self.style.contextFilterInputBorder,\n                    borderRadius: self.style.contextFilterInputBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextFilterInputFontFamily,\n                    fontSize: self.style.contextFilterInputFontSize\n                },\n                'canvas-datagrid-context-menu-filter-button': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextFilterButtonBorder,\n                    borderRadius: self.style.contextFilterButtonBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFilterButtonFontFamily,\n                    fontSize: self.style.contextMenuFilterButtonFontSize\n                },\n                'canvas-datagrid-context-child-arrow': {\n                    cssFloat: 'right',\n                    color: self.style.childContextMenuArrowColor,\n                    fontSize: self.style.contextMenuChildArrowFontSize,\n                    fontFamily: self.style.contextMenuFontFamily,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-autocomplete': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    position: 'absolute',\n                    zIndex: 3,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-autocomplete-item': {\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor\n                },\n                'canvas-datagrid-autocomplete-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-canvas': {\n                    position: 'absolute',\n                    zIndex: '-1'\n                },\n                'canvas-datagrid': {\n                    position: 'absolute',\n                    background: self.style.backgroundColor,\n                    zIndex: '1',\n                    boxSizing: 'content-box',\n                    padding: '0'\n                },\n                'canvas-datagrid-control-input': {\n                    position: 'fixed',\n                    top: '-5px',\n                    left: '-5px',\n                    border: 'none',\n                    opacity: '0',\n                    cursor: 'pointer',\n                    width: '1px',\n                    height: '1px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize\n                },\n                'canvas-datagrid-edit-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 ' + self.style.editCellPaddingLeft + 'px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.editCellFontFamily,\n                    fontSize: self.style.editCellFontSize,\n                    boxShadow: self.style.editCellBoxShadow,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-context-menu-item': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-context-menu-label': {\n                    margin: self.style.contextMenuLabelMargin,\n                    display: self.style.contextMenuLabelDisplay,\n                    minWidth: self.style.contextMenuLabelMinWidth,\n                    maxWidth: self.style.contextMenuLabelMaxWidth\n                },\n                'canvas-datagrid-context-menu': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-invalid-search-regExp': {\n                    background: self.style.contextMenuFilterInvalidExpresion\n                }\n            };\n            if (css[className]) {\n                Object.keys(css[className]).map(function (prop) {\n                    el.style[prop] = css[className][prop];\n                });\n            }\n            return;\n        };\n        self.appendTo = function (n) {\n            self.parentNode = n || document.createElement('canvas');\n            if (self.parentNode && /canvas-datagrid-(cell|tree)/.test(self.parentNode.nodeType)) {\n                self.isChildGrid = true;\n                self.parentGrid = self.parentNode.parentGrid;\n                self.ctx = self.parentGrid.context;\n                self.canvas = self.parentGrid.canvas;\n                self.controlInput = self.parentGrid.controlInput;\n                self.eventParent = self.canvas;\n                self.intf.offsetParent = self.parentNode;\n            } else {\n                self.controlInput = document.createElement('input');\n                self.controlInput.onblur = self.intf.blur;\n                self.createInlineStyle(self.controlInput, 'canvas-datagrid-control-input');\n                self.isChildGrid = false;\n                self.parentDOMNode = self.parentNode;\n                self.parentNode = self.parentDOMNode;\n                self.parentIsCanvas = /^canvas$/i.test(self.parentDOMNode.tagName);\n                if (self.isComponent) {\n                    self.parentDOMNode = self.parentNode.parentElement;\n                    self.canvas = document.createElement('canvas');\n                    self.parentNode.appendChild(self.canvas);\n                    self.parentNode.appendChild(self.controlInput);\n                } else if (self.parentIsCanvas) {\n                    self.canvas = self.parentDOMNode;\n                    self.parentDOMNode.appendChild(self.controlInput);\n                } else {\n                    self.canvas = document.createElement('canvas');\n                    self.parentDOMNode.appendChild(self.canvas);\n                    self.parentDOMNode.appendChild(self.controlInput);\n                }\n                self.ctx = self.canvas.getContext('2d');\n                self.ctx.textBaseline = 'alphabetic';\n                self.eventParent = self.canvas;\n            }\n            self.controlInput.addEventListener('blur', function (e) {\n                if (e.target !== self.canvas) {\n                    self.hasFocus = false;\n                }\n            });\n            window.addEventListener('resize', self.resize);\n            if (window.MutationObserver) {\n                self.observer = new window.MutationObserver(function (mutations) {\n                    mutations.forEach(function (mutation) {\n                        self.resize(true);\n                    });\n                });\n                [self.canvas.parentNode].forEach(function (el) {\n                    if (!el) { return; }\n                    self.observer.observe(el, { attributes: true });\n                });\n            }\n            self.eventParent.addEventListener('scroll', self.resize, false);\n            self.eventParent.addEventListener('touchstart', self.touchstart, false);\n            self.eventParent.addEventListener('mouseup', self.mouseup, false);\n            self.eventParent.addEventListener('mousedown', self.mousedown, false);\n            self.eventParent.addEventListener('dblclick', self.dblclick, false);\n            self.eventParent.addEventListener('click', self.click, false);\n            self.eventParent.addEventListener('mousemove', self.mousemove);\n            self.eventParent.addEventListener('wheel', self.scrollWheel, false);\n            self.canvas.addEventListener('contextmenu', self.contextmenuEvent, false);\n            (self.isChildGrid ? self.parentGrid : document).addEventListener('copy', self.copy);\n            self.controlInput.addEventListener('keypress', self.keypress, false);\n            self.controlInput.addEventListener('keyup', self.keyup, false);\n            self.controlInput.addEventListener('keydown', self.keydown, false);\n        };\n        self.setDom = function () {\n            if (self.args.parentNode && self.args.parentNode.createShadowRoot) {\n                self.shadowRootParentElement = self.args.parentNode.parentElement;\n                self.shadowRoot = self.args.parentNode.createShadowRoot();\n                self.args.parentNode = self.shadowRoot;\n            }\n            self.appendTo(self.args.parentNode);\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/dom.js\n// module id = 6\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        // all methods here are exposed by intf\n        // to users\n        /**\n         * Converts a integer into a letter A - ZZZZZ...\n         * @memberof canvasDataGrid\n         * @name integerToAlpha\n         * @method\n         * @param {column} n The number to convert.\n         */\n        self.integerToAlpha = function (n) {\n            var ordA = 'a'.charCodeAt(0),\n                ordZ = 'z'.charCodeAt(0),\n                len = ordZ - ordA + 1,\n                s = '';\n            while (n >= 0) {\n                s = String.fromCharCode(n % len + ordA) + s;\n                n = Math.floor(n / len) - 1;\n            }\n            return s;\n        };\n        /**\n         * Inserts a new column before the specified index into the schema.\n         * @see canvasDataGrid#schema\n         * @tutorial schema\n         * @memberof canvasDataGrid\n         * @name insertColumn\n         * @method\n         * @param {column} c The column to insert into the schema.\n         * @param {number} index The index of the column to insert before.\n         */\n        self.insertColumn = function (c, index) {\n            var s = self.getSchema();\n            if (s.length < index) {\n                throw new Error('Index is beyond the length of the schema.');\n            }\n            self.validateColumn(c, s);\n            s.splice(index, 0, c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a column from the schema at the specified index.\n         * @memberof canvasDataGrid\n         * @name deleteColumn\n         * @tutorial schema\n         * @method\n         * @param {number} index The index of the column to delete.\n         */\n        self.deleteColumn = function (index) {\n            var s = self.getSchema();\n            // remove data matching this column name from data\n            self.data.forEach(function (row) {\n                delete row[s[index].name];\n            });\n            s.splice(index, 1);\n            self.intf.schema = s;\n        };\n        /**\n         * Adds a new column into the schema.\n         * @see canvasDataGrid#schema\n         * @tutorial schema\n         * @memberof canvasDataGrid\n         * @name addColumn\n         * @method\n         * @param {column} c The column to add to the schema.\n         */\n        self.addColumn = function (c) {\n            var s = self.getSchema();\n            self.validateColumn(c, s);\n            s.push(c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a row from the dataset at the specified index.\n         * @memberof canvasDataGrid\n         * @name deleteRow\n         * @method\n         * @param {number} index The index of the row to delete.\n         */\n        self.deleteRow = function (index) {\n            self.originalData.splice(index, 1);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Inserts a new row into the dataset before the specified index.\n         * @memberof canvasDataGrid\n         * @name insertRow\n         * @method\n         * @param {object} d data.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertRow = function (d, index) {\n            if (self.originalData.length < index) {\n                throw new Error('Index is beyond the length of the dataset.');\n            }\n            self.originalData.splice(index, 0, d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[index], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Adds a new row into the dataset.\n         * @memberof canvasDataGrid\n         * @name addRow\n         * @method\n         * @param {object} d data.\n         */\n        self.addRow = function (d) {\n            self.originalData.push(d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[self.originalData.length - 1], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Sets the height of a given row by index number.\n         * @memberof canvasDataGrid\n         * @name setRowHeight\n         * @method\n         * @param {number} rowIndex The index of the row to set.\n         * @param {number} height Height to set the row to.\n         */\n        self.setRowHeight = function (rowIndex, height) {\n            self.sizes.rows[self.data[rowIndex][self.uniqueId]] = height;\n            self.draw(true);\n        };\n        /**\n         * Sets the width of a given column by index number.\n         * @memberof canvasDataGrid\n         * @name setColumnWidth\n         * @method\n         * @param {number} colIndex The index of the column to set.\n         * @param {number} width Width to set the column to.\n         */\n        self.setColumnWidth = function (colIndex, width) {\n            var s = self.getSchema();\n            self.sizes.columns[s[colIndex][self.uniqueId]] = width;\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the width of the columns due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDataGrid\n         * @name resetColumnWidths\n         * @tutorial schema\n         * @method\n         */\n        self.resetColumnWidths = function () {\n            self.sizes.columns = {};\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the height of the rows due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDataGrid\n         * @name resetRowHeights\n         * @tutorial schema\n         * @method\n         */\n        self.resetRowHeights = function () {\n            self.sizes.rows = {};\n            self.draw(true);\n        };\n        /**\n         * Sets the value of the filter.\n         * @memberof canvasDataGrid\n         * @name setFilter\n         * @method\n         * @param {string} column Name of the column to filter.\n         * @param {string} value The value to filter for.\n         */\n        self.setFilter = function (column, value) {\n            function applyFilter() {\n                self.refreshFromOrigialData();\n                Object.keys(self.columnFilters).forEach(function (filter) {\n                    var header = self.getHeaderByName(column);\n                    if (!header) {\n                        return;\n                    }\n                    self.currentFilter = header.filter || self.filter(column.type || 'string');\n                    self.data = self.data.filter(function (row) {\n                        return self.currentFilter(row[filter], self.columnFilters[filter]);\n                    });\n                });\n                self.resize();\n                self.draw(true);\n            }\n            if (column === undefined && value === undefined) {\n                self.columnFilters = {};\n                return applyFilter();\n            }\n            if (column && (value === '' || value === undefined)) {\n                delete self.columnFilters[column];\n            } else {\n                self.columnFilters[column] = value;\n            }\n            applyFilter();\n        };\n        /**\n         * Returns the number of pixels to scroll down to line up with row rowIndex.\n         * @memberof canvasDataGrid\n         * @name findRowScrollTop\n         * @method\n         * @param {number} rowIndex The row index of the row to scroll find.\n         */\n        self.findRowScrollTop = function (rowIndex) {\n            var top = 0, x = 0, l = self.data.length,\n                cellBorder = self.style.cellBorderWidth * 2;\n            if (!self.attributes.showNewRow) {\n                l -= 1;\n            }\n            if (rowIndex > l) {\n                throw new Error('Impossible row index');\n            }\n            while (x < rowIndex) {\n                top += (self.sizes.rows[self.data[x][self.uniqueId]] || self.style.cellHeight) + cellBorder;\n                x += 1;\n            }\n            //TODO: This is not super accurate, causes pageUp/Dn to not move around right\n            return top - (self.sizes.rows[self.data[rowIndex][self.uniqueId]] || self.style.cellHeight);\n        };\n        /**\n         * Returns the number of pixels to scroll to the left to line up with column columnIndex.\n         * @memberof canvasDataGrid\n         * @name findColumnScrollLeft\n         * @method\n         * @param {number} columnIndex The column index of the column to find.\n         */\n        self.findColumnScrollLeft = function (columnIndex) {\n            var left = 0, y = 0, s = self.getSchema(), l = s.length - 1;\n            if (columnIndex > l) {\n                throw new Error('Impossible column index');\n            }\n            while (y < columnIndex) {\n                left += self.sizes.columns[s[y][self.uniqueId]] || s[y].width;\n                y += 1;\n            }\n            return left;\n        };\n        /**\n         * Scrolls the cell at cell x, row y.\n         * @memberof canvasDataGrid\n         * @name gotoCell\n         * @method\n         * @param {number} x The column index of the cell to scroll to.\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoCell = function (x, y) {\n            if (x !== undefined) {\n                self.scrollBox.scrollLeft = self.findColumnScrollLeft(x);\n            }\n            if (y !== undefined) {\n                self.scrollBox.scrollTop = self.findRowScrollTop(y);\n            }\n        };\n        /**\n         * Scrolls the row y.\n         * @memberof canvasDataGrid\n         * @name gotoRow\n         * @method\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoRow = function (y) {\n            self.gotoCell(0, y);\n        };\n        /**\n         * Scrolls the cell at cell x, row y into view if it is not already.\n         * @memberof canvasDataGrid\n         * @name scrollIntoView\n         * @method\n         * @param {number} x The column index of the cell to scroll into view.\n         * @param {number} y The row index of the cell to scroll into view.\n         */\n        self.scrollIntoView = function (x, y) {\n            if (self.visibleCells.filter(function (cell) {\n                    return (cell.rowIndex === y || y === undefined)\n                        && (cell.columnIndex === x || x === undefined)\n                        && cell.x > 0\n                        && cell.y > 0\n                        && cell.x + cell.width < self.width\n                        && cell.y + cell.height < self.height;\n                }).length === 0) {\n                self.gotoCell(x, y);\n            }\n        };\n        /**\n         * Sets the active cell. Requires redrawing.\n         * @memberof canvasDataGrid\n         * @name setActiveCell\n         * @method\n         * @param {number} x The column index of the cell to set active.\n         * @param {number} y The row index of the cell to set active.\n         */\n        self.setActiveCell = function (x, y) {\n            self.activeCell = {\n                rowIndex: y,\n                columnIndex: x\n            };\n        };\n        /**\n         * Selects every visible cell.\n         * @memberof canvasDataGrid\n         * @name selectAll\n         * @method\n         */\n        self.selectAll = function () {\n            self.selectArea({\n                top: 0,\n                left: 0,\n                right: self.getVisibleSchema().length - 1,\n                bottom: self.data.length - 1\n            });\n        };\n        /**\n         * Returns true if the selected columnIndex is selected on every row.\n         * @memberof canvasDataGrid\n         * @name isColumnSelected\n         * @method\n         * @param {number} columnIndex The column index to check.\n         */\n        self.isColumnSelected = function (columnIndex) {\n            var colIsSelected = true;\n            self.data.forEach(function (row, rowIndex) {\n                if (!self.selections[rowIndex] || self.selections[rowIndex].indexOf(self.orders.columns[columnIndex]) === -1) {\n                    colIsSelected = false;\n                }\n            });\n            return colIsSelected;\n        };\n        /**\n         * Selects a column.\n         * @memberof canvasDataGrid\n         * @name selectColumn\n         * @method\n         * @param {number} columnIndex The column index to select.\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the column.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the column.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectColumn = function (columnIndex, ctrl, shift, supressEvent) {\n            var s, e, x;\n            function addCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) === -1) {\n                        self.selections[rowIndex].push(i);\n                    }\n                });\n            }\n            function removeCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) !== -1) {\n                        self.selections[rowIndex].splice(self.selections[rowIndex].indexOf(i), 1);\n                    }\n                });\n            }\n            if (shift) {\n                if (!self.activeCell) { return; }\n                s = Math.min(self.activeCell.columnIndex, columnIndex);\n                e = Math.max(self.activeCell.columnIndex, columnIndex);\n                for (x = s; e > x; x += 1) {\n                    addCol(x);\n                }\n            }\n            if (!ctrl && !shift) {\n                self.selections = [];\n                self.activeCell.columnIndex = columnIndex;\n                self.activeCell.rowIndex = self.scrollIndexTop;\n            }\n            if (ctrl && self.isColumnSelected(columnIndex)) {\n                removeCol(columnIndex);\n            } else {\n                addCol(columnIndex);\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.getSelectionBounds()\n            });\n        };\n        /**\n         * Selects a row.\n         * @memberof canvasDataGrid\n         * @name selectRow\n         * @method\n         * @param {number} rowIndex The row index to select.\n         * @param {boolean} ctrl When true, behaves as if you were holding control/command when you clicked the row.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the row.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectRow = function (rowIndex, ctrl, shift, supressEvent) {\n            var x, st, en, s = self.getSchema();\n            function addRow(ri) {\n                self.selections[ri] = [];\n                self.selections[ri].push(-1);\n                s.forEach(function (col) {\n                    self.selections[ri].push(col.index);\n                });\n            }\n            if (self.dragAddToSelection === false || self.dragObject === undefined) {\n                if (self.selections[rowIndex] && self.selections[rowIndex].length - 1 === s.length) {\n                    if (ctrl) {\n                        self.selections[rowIndex] = [];\n                        return;\n                    }\n                }\n            }\n            if (self.dragAddToSelection === true || self.dragObject === undefined) {\n                if (shift && self.dragObject === undefined) {\n                    if (!self.activeCell) { return; }\n                    st = Math.min(self.activeCell.rowIndex, rowIndex);\n                    en = Math.max(self.activeCell.rowIndex, rowIndex);\n                    for (x = st; en >= x; x += 1) {\n                        addRow(x);\n                    }\n                } else {\n                    addRow(rowIndex);\n                }\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Collapse a tree grid by row index.\n         * @memberof canvasDataGrid\n         * @name collapseTree\n         * @method\n         * @param {number} index The index of the row to collapse.\n         */\n        self.collapseTree = function (rowIndex) {\n            var rowId = self.data[rowIndex][self.uniqueId];\n            self.dispatchEvent('collapsetree', {\n                childGrid: self.childGrids[rowId],\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId].blur();\n            self.openChildren[rowId].dispose();\n            delete self.openChildren[rowId];\n            delete self.sizes.trees[rowId];\n            delete self.childGrids[rowId];\n            self.dispatchEvent('resizerow', {\n                cellHeight: self.style.cellHeight\n            });\n            self.resize(true);\n            self.draw(true);\n        };\n        /**\n         * Expands a tree grid by row index.\n         * @memberof canvasDataGrid\n         * @name expandTree\n         * @method\n         * @param {number} index The index of the row to expand.\n         */\n        self.expandTree = function (rowIndex) {\n            var rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth,\n                rowId = self.data[rowIndex][self.uniqueId],\n                h = self.sizes.trees[rowId] || self.style.treeGridHeight,\n                treeGrid;\n            if (!self.childGrids[rowId]) {\n                treeGrid = self.createGrid({\n                    debug: self.attributes.debug,\n                    name: self.attributes.saveAppearance\n                        ? self.attributes.name + 'tree' + rowId : undefined,\n                    parentNode: {\n                        parentGrid: self.intf,\n                        nodeType: 'canvas-datagrid-tree',\n                        offsetHeight: h,\n                        offsetWidth: self.width - columnHeaderCellWidth,\n                        header: { width: self.width - columnHeaderCellWidth },\n                        offsetLeft: columnHeaderCellWidth,\n                        offsetTop: rowHeaderCellHeight,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: 'tree',\n                        data: self.data[rowIndex]\n                    }\n                });\n                self.childGrids[rowId] = treeGrid;\n            }\n            treeGrid = self.childGrids[rowId];\n            treeGrid.visible = true;\n            self.dispatchEvent('expandtree', {\n                treeGrid: treeGrid,\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId] = treeGrid;\n            self.sizes.trees[rowId] = h;\n            self.dispatchEvent('resizerow', {height: self.style.cellHeight});\n            self.resize(true);\n        };\n        /**\n         * Toggles tree grid open and close by row index.\n         * @memberof canvasDataGrid\n         * @name toggleTree\n         * @method\n         * @param {number} index The index of the row to toggle.\n         */\n        self.toggleTree = function (rowIndex) {\n            var i = self.openChildren[self.data[rowIndex][self.uniqueId]];\n            if (i) {\n                return self.collapseTree(rowIndex);\n            }\n            self.expandTree(rowIndex);\n        };\n        /**\n         * Returns a header from the schema by name.\n         * @memberof canvasDataGrid\n         * @name getHeaderByName\n         * @tutorial schema\n         * @method\n         * @returns {header} header with the selected name, or undefined.\n         * @param {string} name The name of the column to resize.\n         */\n        self.getHeaderByName = function (name) {\n            var x, i = self.getSchema();\n            for (x = 0; x < i.length; x += 1) {\n                if (i[x].name === name) {\n                    return i[x];\n                }\n            }\n        };\n        /**\n         * Resizes a column to fit the longest value in the column. Call without a value to resize all columns.\n         * Warning, can be slow on very large record sets (1m records ~3-5 seconds on an i7).\n         * @memberof canvasDataGrid\n         * @name fitColumnToValues\n         * @method\n         * @param {string} name The name of the column to resize.\n         */\n        self.fitColumnToValues = function (name, internal) {\n            self.sizes.columns[name === 'cornerCell' ? name : self.getHeaderByName(name)[self.uniqueId]]\n                = self.findColumnMaxTextLength(name);\n            if (!internal) {\n                self.resize();\n                self.draw(true);\n            }\n        };\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDataGrid\n         * @name isCellVisible\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {cell} cell The cell to check for.  Alternatively you can pass an object { x: <x-index>, y: <y-index> }.\n         */\n        self.isCellVisible = function (cell) {\n            var x, l = self.visibleCells.length;\n            for (x = 0; x < l; x += 1) {\n                if (cell.x === self.visibleCells[x].x && cell.y === self.visibleCells[x].y) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n         * Sets the order of the data.\n         * @memberof canvasDataGrid\n         * @name order\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} columnName Number of pixels from the left.\n         * @param {string} direction `asc` for ascending or `desc` for descending.\n         * @param {function} [sortFunction] When defined, override the default sorting method defined in the column's schema and use this one.\n         * @param {bool} [dontSetStorageData] Don't store this setting for future use.\n         */\n        self.order = function (columnName, direction, sortFunction, dontSetStorageData) {\n            var f,\n                c = self.getSchema().filter(function (col) {\n                    return col.name === columnName;\n                });\n            self.orderBy = columnName;\n            if (c.length === 0) {\n                throw new Error('Cannot sort.  No such column name');\n            }\n            f = sortFunction || self.sorters[c[0].type];\n            if (!f && c[0].type !== undefined) {\n                console.warn('Cannot sort type \"%s\" falling back to string sort.', c[0].type);\n            }\n            self.data = self.data.sort(typeof f === 'function' ? f(columnName, direction) : self.sorters.string);\n            self.dispatchEvent('ordercolumn', {name: columnName, direction: direction});\n            self.draw(true);\n            if (dontSetStorageData) { return; }\n            self.setStorageData();\n        };\n        self.isInGrid = function (e) {\n            if (e.x < 0\n                    || e.x > self.width\n                    || e.y < 0\n                    || e.y > self.height) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Gets the cell at columnIndex and rowIndex.\n         * @memberof canvasDataGrid\n         * @name getVisibleCellByIndex\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Column index.\n         * @param {number} y Row index.\n         */\n        self.getVisibleCellByIndex = function (x, y) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === x && c.rowIndex === y;\n            })[0];\n        };\n        /**\n         * Gets the cell at grid pixel coordinate x and y.\n         * @memberof canvasDataGrid\n         * @name getCellAt\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Number of pixels from the left.\n         * @param {number} y Number of pixels from the top.\n         */\n        self.getCellAt = function (x, y, useTouchScrollZones) {\n            var tsz = useTouchScrollZones ? self.attributes.touchScrollZone : 0, i, l = self.visibleCells.length, cell;\n            if (!self.visibleCells || !self.visibleCells.length) { return; }\n            self.hasFocus = true;\n            if (!(y < self.height\n                && y > 0\n                && x < self.width\n                && x > 0)) {\n                self.hasFocus = false;\n                return {\n                    dragContext: 'inherit',\n                    context: 'inherit'\n                };\n            }\n            for (i = 0; i < l; i += 1) {\n                cell = self.visibleCells[i];\n                if (useTouchScrollZones && /(vertical|horizontal)-scroll-/.test(cell.style)) {\n                    cell.x -= tsz;\n                    cell.y -= tsz;\n                    cell.height += tsz;\n                    cell.width += tsz;\n                }\n                if (cell.x - self.style.cellBorderWidth < x\n                        && cell.x + cell.width + self.style.cellBorderWidth > x\n                        && cell.y - self.style.cellBorderWidth < y\n                        && cell.y + cell.height + self.style.cellBorderWidth > y) {\n                    if (/vertical-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'vertical-scroll-box';\n                        cell.context = 'vertical-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isVerticalScrollBar = true;\n                        if (y > self.scrollBox.box.v.y + self.scrollBox.scrollBoxHeight) {\n                            cell.dragContext = 'vertical-scroll-bottom';\n                            cell.context = 'vertical-scroll-bottom';\n                        } else if (y < self.scrollBox.box.v.y) {\n                            cell.dragContext = 'vertical-scroll-top';\n                            cell.context = 'vertical-scroll-top';\n                        }\n                        self.canvas.style.cursor = 'default';\n                        return cell;\n                    }\n                    if (/horizontal-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'horizontal-scroll-box';\n                        cell.context = 'horizontal-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isHorizontalScrollBar = true;\n                        if (x > self.scrollBox.box.h.x + self.scrollBox.scrollBoxWidth) {\n                            cell.dragContext = 'horizontal-scroll-right';\n                            cell.context = 'horizontal-scroll-right';\n                        } else if (x < self.scrollBox.box.h.x) {\n                            cell.dragContext = 'horizontal-scroll-left';\n                            cell.context = 'horizontal-scroll-left';\n                        }\n                        self.canvas.style.cursor = 'default';\n                        return cell;\n                    }\n                    if (cell.x + cell.width - (self.attributes.borderResizeZone * 0.4) < x\n                            && cell.x + cell.width + (self.attributes.borderResizeZone * 0.6) > x\n                            && self.attributes.allowColumnResize\n                            && ((self.attributes.allowColumnResizeFromCell && cell.style === 'cell')\n                                || cell.style !== 'cell')\n                            && ((self.attributes.allowRowHeaderResize\n                                && ['rowHeaderCell', 'cornerCell'].indexOf(cell.style) !== -1)\n                                || ['rowHeaderCell', 'cornerCell'].indexOf(cell.style) === -1)) {\n                        cell.context = 'ew-resize';\n                        cell.dragContext = 'ew-resize';\n                        return cell;\n                    }\n                    if (cell.y + cell.height - (self.attributes.borderResizeZone * 0.4) < y\n                            && cell.y + cell.height + (self.attributes.borderResizeZone * 0.6) > y\n                            && self.attributes.allowRowResize\n                            && ((self.attributes.allowRowResizeFromCell && cell.style === 'cell')\n                                || cell.style !== 'cell')\n                            && cell.style !== 'columnHeaderCell') {\n                        cell.context = 'ns-resize';\n                        cell.dragContext = 'ns-resize';\n                        return cell;\n                    }\n                    if (cell.style === 'columnHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'column-reorder';\n                        return cell;\n                    }\n                    if (cell.style === 'rowHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'row-reorder';\n                        return cell;\n                    }\n                    if (cell.isGrid) {\n                        self.hasFocus = false;\n                        cell.dragContext = 'cell-grid';\n                        cell.context = 'cell-grid';\n                        return cell;\n                    }\n                    if (cell.style === 'tree-grid') {\n                        self.hasFocus = false;\n                        cell.dragContext = 'tree';\n                        cell.context = 'tree';\n                        return cell;\n                    }\n                    cell.dragContext = 'cell';\n                    cell.context = 'cell';\n                    return cell;\n                }\n            }\n            self.hasFocus = true;\n            self.canvas.style.cursor = 'default';\n            return {\n                dragContext: 'background',\n                context: 'background',\n                style: 'background',\n                isBackground: true\n            };\n        };\n        /**\n         * Gets the bounds of current selection. \n         * @returns {rect} selection.\n         * @memberof canvasDataGrid\n         * @name getSelectionBounds\n         * @method\n         */\n        self.getSelectionBounds = function () {\n            var low = {x: Infinity, y: Infinity},\n                high = {x: -Infinity, y: -Infinity};\n            self.data.forEach(function (row, rowIndex) {\n                var maxCol, minCol;\n                if (self.selections[rowIndex] && self.selections[rowIndex].length) {\n                    low.y = rowIndex < low.y ? rowIndex : low.y;\n                    high.y = rowIndex > high.y ? rowIndex : high.y;\n                    maxCol = Math.max.apply(null, self.selections[rowIndex]);\n                    minCol = Math.min.apply(null, self.selections[rowIndex]);\n                    low.x = minCol < low.x ? minCol : low.x;\n                    high.x = maxCol > high.x ? maxCol : high.x;\n                }\n            });\n            return {\n                top: low.y,\n                left: low.x,\n                bottom: high.y,\n                right: high.x\n            };\n        };\n        /**\n         * Returns an auto generated schema based on data structure.\n         * @memberof canvasDataGrid\n         * @name getSchemaFromData\n         * @method\n         * @tutorial schema\n         * @returns {schema} schema A schema based on the first item in the data array.\n         */\n        self.getSchemaFromData = function () {\n            return Object.keys(self.data[0] || {' ': ''}).map(function mapEachSchemaColumn(key, index) {\n                var type = self.getBestGuessDataType(key),\n                    i = {\n                        name: key,\n                        title: isNaN(parseInt(key, 10)) ? key : self.integerToAlpha(key).toUpperCase(),\n                        width: self.style.columnWidth,\n                        index: index,\n                        type: type,\n                        filter: self.filter(type)\n                    };\n                if (key === self.uniqueId) {\n                    i.hidden = true;\n                }\n                i[self.uniqueId] = self.getSchemaNameHash(key);\n                return i;\n            });\n        };\n        /**\n         * Clears the change log grid.changes that keeps track of changes to the data set.\n         * This does not undo changes or alter data it is simply a convince array to keep\n         * track of changes made to the data since last this method was called.\n         * @memberof canvasDataGrid\n         * @name clearChangeLog\n         * @method\n         */\n        self.clearChangeLog = function () {\n            self.changes = [];\n        };\n        /**\n         * Selects an area of the grid.\n         * @memberof canvasDataGrid\n         * @name selectArea\n         * @method\n         * @param {rect} bounds A rect object representing the selected values.\n         */\n        self.selectArea = function (bounds, ctrl) {\n            self.selectionBounds = bounds || self.selectionBounds;\n            var x, y, s = self.getSchema();\n            if (!ctrl) {\n                self.selections = [];\n            }\n            if (self.selectionBounds.top < -1\n                    || self.selectionBounds.bottom > self.data.length\n                    || self.selectionBounds.left < -1\n                    || self.selectionBounds.right > s.length) {\n                throw new Error('Impossible selection area');\n            }\n            for (x = self.selectionBounds.top; x <= self.selectionBounds.bottom; x += 1) {\n                self.selections[x] = [];\n                for (y = self.selectionBounds.left; y <= self.selectionBounds.right; y += 1) {\n                    if (self.selections[x].indexOf(y) === -1) {\n                        self.selections[x].push(y);\n                    }\n                }\n            }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Returns the maximum text width for a given column by column name.\n         * @memberof canvasDataGrid\n         * @name findColumnMaxTextLength\n         * @method\n         * @returns {number} The number of pixels wide the maximum width value in the selected column.\n         * @param {string} name The name of the column to calculate the value's width of.\n         */\n        self.findColumnMaxTextLength = function (name) {\n            var m = -Infinity;\n            if (name === 'cornerCell') {\n                self.ctx.font = self.style.rowHeaderCellFont;\n                return self.ctx.measureText((self.data.length + (self.attributes.showNewRow ? 1 : 0)).toString()).width\n                    + self.style.autosizePadding + self.style.autosizeHeaderCellPadding\n                    + self.style.rowHeaderCellPaddingRight\n                    + self.style.rowHeaderCellPaddingLeft\n                    + (self.attributes.tree ? self.style.treeArrowWidth\n                        + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight : 0);\n            }\n            self.getSchema().forEach(function (col) {\n                if (col.name !== name) { return; }\n                self.ctx.font = self.style.columnHeaderCellFont;\n                var t = self.ctx.measureText(col.title || col.name).width\n                    + self.style.headerCellPaddingRight\n                    + self.style.headerCellPaddingLeft;\n                m = t > m ? t : m;\n            });\n            self.data.forEach(function (row) {\n                self.ctx.font = self.style.cellFont;\n                var t = self.ctx.measureText(row[name]).width\n                    + self.style.cellPaddingRight\n                    + self.style.cellPaddingLeft + self.style.cellAutoResizePadding;\n                m = t > m ? t : m;\n            });\n            return m;\n        };\n        /**\n         * Gets the total width of all header columns.\n         * @memberof canvasDataGrid\n         * @name getHeaderWidth\n         * @method\n         */\n        self.getHeaderWidth = function () {\n            return self.getVisibleSchema().reduce(function (total, header) {\n                return total + header.width;\n            }, 0);\n        };\n        self.formatters.string = function cellFormatterString(e) {\n            return e.cell.value !== undefined ? e.cell.value : '';\n        };\n        self.formatters.rowHeaderCell = self.formatters.string;\n        self.formatters.headerCell = self.formatters.string;\n        self.formatters.number = self.formatters.string;\n        self.formatters.int = self.formatters.string;\n        self.formatters.html = self.formatters.string;\n        self.sorters.string = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (a[columnName] === undefined || a[columnName] === null) {\n                    return 1;\n                }\n                if (b[columnName] === undefined || b[columnName] === null) {\n                    return 0;\n                }\n                if (asc) {\n                    if (!a[columnName].localeCompare) { return 1; }\n                    return a[columnName].localeCompare(b[columnName]);\n                }\n                if (!b[columnName].localeCompare) { return 1; }\n                return b[columnName].localeCompare(a[columnName]);\n            };\n        };\n        self.sorters.number = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return a[columnName] - b[columnName];\n                }\n                return b[columnName] - a[columnName];\n            };\n        };\n        self.sorters.date = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return new Date(a[columnName]).getTime()\n                        - new Date(b[columnName]).getTime();\n                }\n                return new Date(b[columnName]).getTime()\n                        - new Date(a[columnName]).getTime();\n            };\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/publicMethods.js\n// module id = 7\n// module chunks = 0"],"sourceRoot":""}