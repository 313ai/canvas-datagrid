{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///canvas-datagrid.js","webpack:///webpack/bootstrap aa253afda40cdf7fb7fa","webpack:///./lib/defaults.js","webpack:///./lib/main.js","webpack:///./lib/component.js","webpack:///./lib/draw.js","webpack:///./lib/events.js","webpack:///./lib/intf.js","webpack:///./lib/contextMenu.js","webpack:///./lib/dom.js","webpack:///./lib/publicMethods.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","undefined","self","defaults","attributes","styles","apply","context","component","Grid","args","isComponent","intf","eval","createGrid","forEach","init","Array","slice","arguments","window","HTMLElement","create","customElements","observedAttributes","getObservableAttributes","disconnectedCallback","dispose","attributeChangedCallback","connectedCallback","adoptedCallback","canvasDatagrid","require","hyphenateProperty","prop","cust","char","toUpperCase","toLowerCase","getDefaultItem","base","item","filter","applyComponentStyle","supressChangeAndDrawEvents","cStyle","getComputedStyle","defs","computedStyle","def","val","getPropertyValue","style","typeMap","draw","dispatchEvent","data","strData","JSON","parse","e","Error","schema","strSchema","number","strNum","parseInt","isNaN","boolean","strBool","test","string","str","attrs","attr","push","initialized","parentNode","observe","resize","key","set","value","attrName","oldVal","newVal","tfn","observer","MutationObserver","mutations","checkInnerHTML","mutation","attributeName","addedNodes","length","innerHTML","characterData","childList","subtree","drawOnAllImagesLoaded","loaded","keys","htmlImageCache","html","complete","drawHtml","cell","img","v","formattedValue","x","canvasOffsetLeft","y","canvasOffsetTop","height","width","ctx","drawImage","Image","onload","src","btoa","drawOrderByArrow","fillStyle","columnHeaderOrderByArrowColor","strokeStyle","columnHeaderOrderByArrowBorderColor","beginPath","columnHeaderOrderByArrowMarginLeft","columnHeaderOrderByArrowMarginTop","orderDirection","moveTo","lineTo","columnHeaderOrderByArrowWidth","columnHeaderOrderByArrowHeight","stroke","fill","columnHeaderOrderByArrowMarginRight","drawTreeArrow","treeArrowColor","treeArrowBorderColor","treeArrowMarginLeft","treeArrowMarginTop","openChildren","uniqueId","treeArrowWidth","treeArrowHeight","treeArrowMarginRight","radiusRect","w","h","radius","r","b","quadraticCurveTo","fillRect","strokeRect","fillText","text","addBorderLine","pos","t","addEllipsis","ellipsisCache","measureText","drawText","paddingLeft","paddingTop","paddingRight","paddingBottom","vPos","hPos","orderByArrowWidth","fontHeight","horizontalAlignment","verticalAlignment","perfCounters","drawCount","perfWindowSize","internal","drawCell","rowIndex","rowOrderIndex","header","headerIndex","columnOrderIndex","cellGridAttributes","cellStyle","isHeader","isCorner","isRowHeader","isColumnHeader","selected","selections","indexOf","hovered","hovers","active","activeCell","columnIndex","isGrid","activeHeader","orders","rows","columns","f","formatters","type","orderByArrowSize","treeArrowSize","cellWidth","sizes","ev","row","columnWidth","cellBorderWidth","visibleRows","cx","cy","nodeType","offsetTop","offsetLeft","scrollTop","scrollBox","scrollLeft","cellHeight","offsetWidth","offsetHeight","offsetParent","isHeaderCellCap","rowOpen","sortColumnIndex","sortRowIndex","gridId","parentGrid","title","userHeight","rowHeight","userWidth","cornerCell","visibleCells","unshift","lineWidth","cellHeightWithChildGrid","checkScrollHeight","cellWidthWithChildGrid","rd","save","clip","tree","showRowNumbers","childGrids","saveAppearance","cellGridHeight","grid","visible","orderBy","font","console","warn","toString","columnFilters","filterTextPrefix","aCell","selectionBorders","restore","drawRowHeader","rowData","index","a","showRowHeaders","rowHeaderCell","rowHeaderCellWidth","drawRow","treeHeight","rowSansTreeHeight","g","trees","columnHeaderCellWidth","scrollIndexLeft","scrollIndexRight","scrollPixelRight","scrollPixelLeft","treeGrid","scrollBarWidth","rowHeaders","isChildGrid","requestAnimationFrame","u","currentCell","rowHeaderCellHeight","getRowHeaderCellHeight","getColumnHeaderCellWidth","performance","now","createRowOrders","getVisibleSchema","scale","devicePixelRatio","backgroundColor","scrollPixelTop","scrollIndexTop","scrollIndexBottom","scrollPixelBottom","showNewRow","newRow","selectionOverlayBorderWidth","selectionOverlayBorderColor","selectionMode","activeCellOverlayBorderWidth","activeCellOverlayBorderColor","getHeaderWidth","columnHeaderCell","rArgs","showColumnHeaders","order","isHeaderCell","endCap","reorderObject","dragOffset","heigth","reorderMarkerBackgroundColor","reorderMarkerBorderWidth","reorderMarkerBorderColor","dragMode","reorderMarkerIndexBorderWidth","reorderMarkerIndexBorderColor","vb","nb","co","isScrollBoxCorner","scrollBarBoxMargin","scrollBarBorderColor","scrollBarBorderWidth","scrollBarBackgroundColor","scrollBoxHeight","scrollHeight","scrollBarBoxWidth","scrollBarBoxColor","scrollBarActiveColor","scrollBarBoxBorderRadius","scrollBoxWidth","scrollWidth","scrollBarCornerBorderColor","scrollBarCornerBackgroundColor","bar","box","gridBorderWidth","gridBorderColor","debug","perf","reduce","toFixed","map","join","htmlImages","scrollIndex","scrollPixel","canvasOffset","pointerLockPosition","size","mouse","touch","touchStart","entities","hasFocus","dragContext","calculateCssSize","sizeString","parentSize","parseFloat","wheeling","touchDelta","touchAnimateTo","touchSigma","xPPS","yPPS","touchingCell","startingCell","animationFrames","getTouchPos","rect","canvas","getBoundingClientRect","touches","clientX","left","clientY","top","calculatePPS","touchCell","clearInterval","touchCalcTimeout","Math","abs","touchDeadZone","getCellAt","mousemove","mousedown","touchstart","NativeEvent","stopPropagation","preventDefault","touchScrollStart","touchmove","clearTimeout","touchTimeout","setTimeout","touchSelectTimeMs","setInterval","touchHaltAnimation","document","body","addEventListener","passive","touchend","touchcancel","easing","touchEndAnimation","scrollTo","touchReleaseAnimationDurationMs","dz","mouseup","beginEditAt","click","removeEventListener","touchReleaseAcceleration","fn","events","sfn","idx","splice","defaultPrevented","resizeDomElement","parentIsCanvas","shadowRootParentElement","parentDOMNode","drawAfterResize","cellBorder","columnHeaderCellBorder","columnHeaderCellBorderWidth","accumulator","column","hidden","widthBoxRatio","heightBoxRatio","max","scrollBarBoxMinSize","page","pageUpDownOverlap","resizeEditInput","scroll","dontDraw","overridePos","contextMenu","input","getLayerPos","dragBounds","sBounds","delta","ctrl","controlKey","metaKey","persistantSelectionMode","getSchema","previousCell","scrollTimer","isInGrid","cellBoundaryCrossed","draggingItem","scrollModes","dragItem","cursor","selecting","getSelectionBounds","dragStart","dragStartObject","shiftKey","min","bottom","right","ignoreNextClick","selectRow","dragAddToSelection","selectionBounds","selectArea","autoScrollZone","checkSelectionChange","selectionChanged","selectedData","getSelectedData","endEdit","sorters","setFilter","columnHeaderClickBehavior","selectColumn","setActiveCell","treeArrowClickRadius","toggleTree","dragResizeColumn","resizingStartingWidth","resizingStartingHeight","minColumnWidth","minRowHeight","resizeScrollZone","resizeChildGrids","globalRowResize","stopDragResize","setStorageData","scrollGrid","scrollPointerLock","scrollStartMode","movementX","movementY","scrollMode","scrollStart","scrollRepeatRate","selectionScrollIncrement","stopScrollGrid","exitPointerLock","dragReorder","allowColumnReordering","allowRowReordering","source","target","reorderDeadZone","reorderTarget","stopDragReorder","cr","row-reorder","column-reorder","lastMouseDownTarget","button","requestPointerLock","controlInput","focus","keydown","last","cols","keyCode","selectAll","scrollIntoView","selectionFollowsActiveCell","keyup","keypress","dblclick","fitColumnToValues","autosize","scrollWheel","deltaX","deltaY","deltaMode","copy","clipboardData","sData","replace","setData","ctor","storageName","invalidSearchExpClass","localStyleLibraryStorageKey","filters","frozenRows","currentFilter","schemaHashes","uId","changes","expandToRow","col","fillArray","low","high","step","columnHeaderCellHeight","localStorage","setItem","stringify","tempSchema","createColumnOrders","applyDefaultValue","defaultValue","createNewRowData","getSchemaNameHash","getBestGuessDataType","columnName","drawChildGrids","gridKey","setTimer","selectionScrollZone","refreshFromOrigialData","originalData","validateColumn","setDefaults","obj1","obj2","setAttributes","setStyle","colName","removeChild","eventParent","contextmenu","disconnect","tryLoadStoredOrders","storedSettings","getHeaderByName","getFontHeight","fontStyle","parseFont","initProp","propName","publicStyleKeyIntf","initScrollBox","setDom","appendTo","clearChangeLog","gotoCell","gotoRow","findColumnScrollLeft","findRowScrollTop","findColumnMaxTextLength","disposeContextMenu","isCellVisible","clipElement","getSchemaFromData","expandTree","collapseTree","insertRow","deleteRow","addRow","insertColumn","deleteColumn","addColumn","getClippingRect","setRowHeight","setColumnWidth","resetColumnWidths","resetRowHeights","assertPxColor","clearPxColorAssertions","integerToAlpha","shadowRoot","filterFor","String","filterRegExp","regEnd","pattern","exec","flags","substring","flagLength","invalidFilterRegEx","RegExp","toLocaleUpperCase","getItem","blur","TypeError","normalizeDataset","callback","syncFnInvoked","0","isArray","autoResizeColumns","setScrollTop","preventScrollEvent","setScrollLeft","sHeight","sWidth","createContextMenu","items","parentContextMenu","createItems","removeChildContext","relatedTarget","container","childMenuArrow","contextItemContainer","children","setAttribute","contextAddCallback","getAttribute","cPos","childContextMenuMarginLeft","childContextMenuMarginTop","createChildContext","createElement","addContent","content","appendChild","createInlineStyle","childContextMenuArrowHTML","clickIndex","Event","checkArrowVisibility","upArrow","downArrow","startHoverScroll","contextHoverScrollAmount","hoverScrollTimeout","contextHoverScrollRateMs","endHoverScroll","selectedIndex","loc","scrollOffset","zIndexTop","position","color","contextMenuArrowColor","el","textAlign","zIndex","inputDropdown","maxHeight","innerHeight","autocompleteBottomMargin","minWidth","contextMenuArrowUpHTML","contextMenuArrowDownHTML","contextMenuWindowMargin","innerWidth","isFinite","createFilterContextMenuItems","checkRegExpErrorState","filterInput","background","contextFilterInputBackground","contextFilterInputColor","contextFilterInvalidRegExpBackground","contextFilterInvalidRegExpColor","fillAutoComplete","autoCompleteItems","maxAutoCompleteItems","disposeAutocomplete","createAutoCompleteContext","iRect","autoCompleteContext","filterContainer","filterLabel","filterAutoCompleteButton","onclick","en","filterOptionText","contextFilterButtonHTML","cf","removeFilterOptionText","addDefaultContextMenuItem","isNormalCell","isBackground","isScrollBar","showFilter","showCopy","copyText","execCommand","showClearSettingsOption","clearSettingsOptionText","allowSorting","showOrderByOption","showOrderByOptionTextAsc","showOrderByOptionTextDesc","contextmenuEvent","createDiposeEvent","contextMenuMarginLeft","contextMenuMarginTop","ele","boundingRect","eleRect","clipRect","parentRect","Infinity","nodeName","bx2","getVisibleCellByIndex","editCell","cellPaddingLeft","ignoreScrollOffset","abort","abortEdit","newValue","oldValue","aborted","editable","enumItems","option","valueInEnum","enu","multiLine","nx","ny","className","css","canvas-datagrid-context-menu-filter-input","verticalAlign","marginLeft","padding","border","contextFilterInputBorder","borderRadius","contextFilterInputBorderRadius","lineHeight","fontWeight","fontFamily","contextFilterInputFontFamily","fontSize","contextFilterInputFontSize","canvas-datagrid-context-menu-filter-button","contextMenuBackground","contextMenuColor","contextFilterButtonBorder","contextFilterButtonBorderRadius","contextMenuFilterButtonFontFamily","contextMenuFilterButtonFontSize","canvas-datagrid-context-child-arrow","cssFloat","childContextMenuArrowColor","contextMenuChildArrowFontSize","contextMenuFontFamily","canvas-datagrid-autocomplete","contextMenuFontSize","contextMenuBorder","contextMenuPadding","contextMenuBorderRadius","opacity","contextMenuOpacity","overflow","canvas-datagrid-autocomplete-item","canvas-datagrid-autocomplete-item:hover","contextMenuHoverBackground","contextMenuHoverColor","canvas-datagrid-canvas","canvas-datagrid","boxSizing","canvas-datagrid-control-input","canvas-datagrid-edit-input","outline","margin","editCellPaddingLeft","editCellFontFamily","editCellFontSize","boxShadow","editCellBoxShadow","editCellBorder","editCellColor","editCellBackgroundColor","appearance","webkitAppearance","mozAppearance","canvas-datagrid-context-menu-item","contextMenuItemMargin","contextMenuItemBorderRadius","canvas-datagrid-context-menu-item:hover","canvas-datagrid-context-menu-label","contextMenuLabelMargin","display","contextMenuLabelDisplay","contextMenuLabelMinWidth","maxWidth","contextMenuLabelMaxWidth","canvas-datagrid-context-menu","whiteSpace","canvas-datagrid-invalid-search-regExp","contextMenuFilterInvalidExpresion","onblur","tagName","shadowCss","parentElement","getContext","textBaseline","createShadowRoot","attachShadow","mode","ordA","charCodeAt","ordZ","len","fromCharCode","floor","colIndex","applyFilter","isColumnSelected","colIsSelected","shift","supressEvent","addCol","ri","st","dragObject","rowId","childGrid","treeGridHeight","direction","sortFunction","dontSetStorageData","sort","isColumnVisible","isRowVisible","useTouchScrollZones","tsz","touchScrollZone","isVerticalScrollBar","isHorizontalScrollBar","borderResizeZone","allowColumnResize","allowColumnResizeFromCell","allowRowHeaderResize","allowRowResize","allowRowResizeFromCell","maxCol","minCol"," ","bounds","rowHeaderCellFont","autosizePadding","autosizeHeaderCellPadding","rowHeaderCellPaddingRight","rowHeaderCellPaddingLeft","columnHeaderCellFont","headerCellPaddingRight","headerCellPaddingLeft","cellFont","cellPaddingRight","cellAutoResizePadding","total","headerCell","int","asc","localeCompare","date","Date","getTime"],"mappings":"CAAA,SAAAA,EAAAC,GACA,gBAAAC,UAAA,gBAAAC,QACAA,OAAAD,QAAAD,IACA,kBAAAG,gBAAAC,IACAD,UAAAH,GACA,gBAAAC,SACAA,QAAA,eAAAD,IAEAD,EAAA,eAAAC,KACCK,KAAA,WACD,MCAgB,UAAUC,GCN1B,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAP,OAGA,IAAAC,GAAAO,EAAAD,IACAE,EAAAF,EACAG,GAAA,EACAV,WAUA,OANAK,GAAAE,GAAAI,KAAAV,EAAAD,QAAAC,IAAAD,QAAAM,GAGAL,EAAAS,GAAA,EAGAT,EAAAD,QAvBA,GAAAQ,KA4DA,OAhCAF,GAAAM,EAAAP,EAGAC,EAAAO,EAAAL,EAGAF,EAAAQ,EAAA,SAAAd,EAAAe,EAAAC,GACAV,EAAAW,EAAAjB,EAAAe,IACAG,OAAAC,eAAAnB,EAAAe,GACAK,cAAA,EACAC,YAAA,EACAC,IAAAN,KAMAV,EAAAiB,EAAA,SAAAtB,GACA,GAAAe,GAAAf,KAAAuB,WACA,WAA2B,MAAAvB,GAAA,SAC3B,WAAiC,MAAAA,GAEjC,OADAK,GAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAQ,EAAAC,GAAsD,MAAAR,QAAAS,UAAAC,eAAAjB,KAAAc,EAAAC,IAGtDpB,EAAAuB,EAAA,GAGAvB,IAAAwB,EAAA,KDgBM,SAAU7B,EAAQD,EAASM,GE7EjC,GAAAyB,GAAAC,CAEAD,UAwOCE,MAxODD,EAAA,WACA,YACA,iBAAAE,GACAA,EAAAC,UACAC,aACA,YACA,YACA,kBACA,4BACA,sBACA,kCACA,iBACA,gBACA,6BACA,0BACA,oBACA,kBACA,uBACA,wBACA,+BACA,yBACA,yBACA,4BACA,yBACA,sBACA,8BACA,iCACA,aACA,wBACA,yBACA,sBACA,sBACA,wBACA,2BACA,wBACA,+BACA,+BACA,gCACA,sBACA,+BACA,yBACA,mDACA,qDACA,uDACA,iDACA,iCACA,mCACA,wCACA,iCACA,oBACA,0BACA,uBACA,oBACA,gBACA,qCACA,yBACA,6BAEAC,SACA,uDACA,mDACA,8BACA,uCACA,qCACA,4DACA,4CACA,yDACA,oCACA,8BACA,4BACA,6BACA,2BACA,+DACA,+CACA,mEACA,mDACA,gEACA,gDACA,gCACA,gCACA,sBACA,6CACA,6BACA,iDACA,6CACA,uBACA,iCACA,+BACA,uBACA,kBACA,gCACA,mCACA,sDACA,sCACA,wBACA,sBACA,uBACA,qBACA,yDACA,yCACA,mCACA,+BACA,qDACA,yCACA,mCACA,gCACA,6DACA,yDACA,oCACA,gDACA,2CACA,8BACA,+CACA,kEACA,kDACA,oCACA,kCACA,mCACA,iCACA,+CACA,oBACA,iEACA,0CACA,uCACA,uDACA,gEACA,uCACA,4CACA,8CACA,sCACA,8DACA,6DACA,gDACA,wCACA,sCACA,mDACA,yDACA,kCACA,yCACA,2CACA,mDACA,2CACA,+DACA,uCACA,+BACA,wDACA,iDACA,sCACA,gCACA,2CACA,uCACA,qCACA,oCACA,4BACA,4BACA,8BACA,6BACA,8BACA,uDACA,mDACA,oCACA,sDACA,kDACA,0BACA,oCACA,4BACA,0BACA,kBACA,6CACA,sBACA,iEACA,0CACA,2DACA,qCACA,yCACA,0CACA,wCACA,qCACA,sBACA,iBACA,oBACA,mBACA,sDACA,kDACA,kCACA,0DACA,uCACA,0DACA,sDACA,+BACA,6CACA,wCACA,2BACA,4CACA,+DACA,+CACA,iCACA,+BACA,gCACA,8BACA,kEACA,qDACA,4CACA,0BACA,kDACA,sDACA,kDACA,4BACA,mCACA,+CACA,yBACA,2BACA,wBACA,4DACA,wDACA,sBACA,wDACA,oCACA,kDACA,2BACA,2BACA,4CACA,sBACA,0BACA,2BACA,yBACA,sBACA,uBACA,oBAICC,MAAAtC,EAAA+B,MAAA9B,EAAAD,QAAAgC,IFqFK,SAAU/B,OAAQD,QAASM,qBG/TjC,GAAAyB,8BAAAC,6BAEAD,+BACAzB,oBAAA,GACAA,oBAAA,GACAA,oBAAA,GACAA,oBAAA,GACAA,oBAAA,GACAA,oBAAA,GACAA,oBAAA,GACAA,oBAAA,QAgDC2B,MA/CDD,8BAAA,QAAAO,SAAAC,WACA,YAGA,SAAAC,MAAAC,MACAA,aACA,IAAAR,QAgBA,OAfAA,MAAAS,gBAAAV,KAAAS,KAAAF,UACAN,KAAAU,KAAAV,KAAAS,YAAAE,KAAA,qDACAX,KAAAQ,UACAR,KAAAY,WAAA,SAAAJ,GAEA,MADAA,GAAAF,WAAA,EACA,GAAAC,MAAAC,IAEArC,QAAA0C,QAAA,SAAA9C,GACAA,EAAAiC,QAEAA,KAAAU,KAAAF,KAAAR,KAAAQ,KACAR,KAAAU,KAAAI,KAAAd,KAAAc,KACAd,KAAAS,aACAT,KAAAc,OAEAd,KAAAU,KApBAJ,qBACA,IAAAnC,SAAA4C,MAAAtB,UAAAuB,MAAAvC,KAAAwC,UA2CA,OAtBAC,QAAAC,cACAZ,KAAAd,UAAAT,OAAAoC,OAAAF,OAAAC,YAAA1B,YAGAyB,OAAAG,iBACAd,KAAAe,mBAAAhB,UAAAiB,0BACAhB,KAAAd,UAAA+B,qBAAA,WAA2DtD,KAAAuD,WAC3DlB,KAAAd,UAAAiC,yBAAApB,UAAAoB,yBACAnB,KAAAd,UAAAkC,kBAAArB,UAAAqB,kBACApB,KAAAd,UAAAmC,gBAAAtB,UAAAsB,gBACAV,OAAAG,eAAArD,OAAA,kBAAAuC,QAGAW,eAAAW,gBAAAX,OAAAY,UACAZ,OAAAW,eAAA,SAAArB,GAAiD,UAAAD,MAAAC,KAGjDzC,OAAAD,QAAA,SAAA0C,GAGA,MAFAA,SACAA,EAAAF,WAAA,EACA,GAAAC,MAAAC,IAEAzC,OAAAD,SACCsC,MAAAtC,QAAA+B,iCAAA9B,OAAAD,QAAAgC,gCHuUK,SAAU/B,EAAQD,EAASM,GIjYjC,GAAAyB,GAAAC,CAEAD,IAAAzB,EAAA,QAgKC2B,MAhKDD,EAAA,SAAAG,GACA,YACA,iBAAAD,GAGA,QAAA+B,GAAAC,EAAAC,GACA,GAAAtC,GAAA,EAQA,OAPAoB,OAAAtB,UAAAoB,QAAApC,KAAAuD,EAAA,SAAAE,GACA,GAAAA,MAAAC,cAEA,YADAxC,GAAA,IAAAuC,EAAAE,cAGAzC,IAAAuC,KAEAD,EAAA,aAAAtC,EAEA,QAAA0C,GAAAC,EAAAC,GACA,GAAAhE,KAQA,OANA0B,GAAA1B,GACAA,EAAA0B,SAAAqC,GAAAE,OAAA,SAAAjE,GACA,MAAAA,GAAA,GAAA6D,gBAAAG,EAAAH,eACAL,EAAAxD,EAAA,MAAAgE,EAAAH,eACAL,EAAAxD,EAAA,SAAAgE,EAAAH,gBACa,GAGb,QAAAK,GAAA/B,EAAAV,EAAA0C,GACA,GAAAC,GAAAzB,OAAA0B,iBAAAlC,EAAA,MACAmC,IACA7C,GAAA8C,cAAAH,EACA1C,EAAA4C,GACAA,IAAA5C,SAAAE,OACA0C,EAAAhC,QAAA,SAAAkC,GACA,GAAAC,GAAAL,EAAAM,iBAAAlB,EAAAgB,EAAA,OACA,MAAAC,IACAhD,EAAAkD,MAAAH,EAAA,IAAAI,QAAAJ,GAAA,IAAAC,EAAAD,EAAA,OAGA/C,EAAAoD,MAAA,GACAV,GACA1C,EAAAqD,cAAA,eAAA3C,EAAAwC,OAtCAlD,OACA,IAAAmD,GAAA7C,IA0JA,OAlHA6C,IACAG,KAAA,SAAAC,GACA,IACA,MAAAC,MAAAC,MAAAF,GACiB,MAAAG,GACjB,SAAAC,OAAA,8DAGAC,OAAA,SAAAC,GACA,IACA,MAAAL,MAAAC,MAAAI,GACiB,MAAAH,GACjB,SAAAC,OAAA,gEAGAG,OAAA,SAAAC,EAAAhB,GACA,GAAA1D,GAAA2E,SAAAD,EAAA,GACA,OAAAE,OAAA5E,GAAA0D,EAAA1D,GAEA6E,QAAA,SAAAC,GACA,cAAAC,KAAAD,IAEAE,OAAA,SAAAC,GACA,MAAAA,KAGAhE,EAAAiB,wBAAA,WACA,GAAAhD,MAAsBgG,GAAA,gBAKtB,OAJAtE,GAAA1B,GACAA,EAAA0B,SAAAC,WAAAW,QAAA,SAAA2D,GACAD,EAAAE,KAAAD,EAAA,GAAApC,iBAEAmC,GAEAjE,EAAAqB,kBAAA,WACA,GAAA/B,GAAAc,EAAAxC,IACAwC,GAAAgE,cACAhE,EAAAgE,aAAA,EACAhE,EAAAF,KAAAmE,WAAAjE,EAOAd,EAAAc,EAAAI,OACAR,EAAAsE,QAAAlE,EAAAd,GACA6C,EAAA/B,EAAAd,GAAA,GACAA,EAAAiF,UACA,yBAAAhE,QAAA,SAAAiE,GACA9F,OAAAC,eAAAyB,EAAAF,KAAAsE,GACAC,IAAA,SAAAC,GACApF,EAAAkF,GAAAE,EACAtE,EAAA0C,QAEAhE,IAAA,WACA,MAAAQ,GAAAkF,UAKAxE,EAAAsB,gBAAA,WACA1D,KAAA2G,UAEAvE,EAAAoB,yBAAA,SAAAuD,EAAAC,EAAAC,GACA,GAAAC,GAAA1E,EAAAxC,IACA,cAAA+G,EAGA,eAAAA,OACAvE,EAAAF,KAAA8C,KAAAH,EAAAG,KAAA6B,IAGA,WAAAF,OACAvE,EAAAF,KAAAoD,OAAAT,EAAAS,OAAAuB,SAGA,UAAAF,GAAA,cAAAA,IAGAG,EAAAjC,QAAAd,GAAA,aAAA4C,GAAA,IACAvE,EAAAR,WAAA+E,GAAAG,EAAAD,MAGA7E,EAAAsE,QAAA,SAAAlE,EAAAV,GACA,GAAAqF,EACAnE,QAAAoE,mBACAtF,EAAAyC,oBAAA,WAAoDA,EAAA/B,EAAAV,GAAiCA,EAAA6E,UAOrFnE,EAAA+B,oBAAAzC,EAAAyC,oBACA4C,EAAA,GAAAnE,QAAAoE,iBAAA,SAAAC,GACA,GAAAC,EACAzE,OAAAtB,UAAAoB,QAAApC,KAAA8G,EAAA,SAAAE,GACA,aAAAA,EAAAC,eACA,UAAAD,EAAAC,cAEA,WADA1F,GAAAyC,qBAGAgD,GAAAE,WAAAC,OAAA,IACAJ,GAAA,KAGAA,IACA9E,EAAA4C,KAAAH,EAAAG,KAAA5C,EAAAmF,cAGAR,EAAAT,QAAAlE,GAAoCoF,eAAA,EAAAC,WAAA,EAAA7F,YAAA,EAAA8F,SAAA,MAEpChG,EAAAM,YACAA,IAECF,MAAAtC,EAAA+B,MAAA9B,EAAAD,QAAAgC,IJwYK,SAAU/B,EAAQD,EAASM,GK1iBjC,GAAAyB,GAAAC,CAEAD,UA04BCE,MA14BDD,EAAA,WACA,YACA,iBAAAE,GAKA,QAAAiG,KACA,GAAAC,IAAA,CACAlH,QAAAmH,KAAAnG,EAAAoG,gBAAAvF,QAAA,SAAAwF,GACArG,EAAAoG,eAAAC,GAAAC,WACAJ,GAAA,KAGAA,GACAlG,EAAAoD,OAGA,QAAAmD,GAAAC,GACA,GAAAC,GACAC,EAAAF,EAAAX,WAAAW,EAAAG,eACAC,EAAAJ,EAAAI,EAAA5G,EAAA6G,iBACAC,EAAAN,EAAAM,EAAA9G,EAAA+G,eACA,IAAA/G,EAAAoG,eAAAM,GAAA,CAEA,GADAD,EAAAzG,EAAAoG,eAAAM,GACAD,EAAAO,SAAAR,EAAAQ,QAAAP,EAAAQ,QAAAT,EAAAS,MAGiB,CACjB,IAAAR,EAAAH,SACA,MAEA,OAAAtG,GAAAkH,IAAAC,UAAAV,EAAAG,EAAAE,GALA9G,EAAAoG,eAAAM,OAAA3G,GAQA0G,EAAA,GAAAW,OAAAZ,EAAAS,MAAAT,EAAAQ,QACAhH,EAAAoG,eAAAM,GAAAD,EACAA,EAAAY,OAAA,WACArH,EAAAkH,IAAAC,UAAAV,EAAAG,EAAAE,GACAb,KAEAQ,EAAAa,IAAA,6BAA0CC,KAC1C,kDAAAf,EAAAS,MAAA,aAAAT,EAAAQ,OAAA,qJAGAN,EAAA,uCAMA,QAAAc,GAAAZ,EAAAE,GAqBA,MApBAF,IAAA5G,EAAA6G,iBACAC,GAAA9G,EAAA+G,gBACA/G,EAAAkH,IAAAO,UAAAzH,EAAAkD,MAAAwE,8BACA1H,EAAAkH,IAAAS,YAAA3H,EAAAkD,MAAA0E,oCACA5H,EAAAkH,IAAAW,YACAjB,GAAA5G,EAAAkD,MAAA4E,mCACAhB,GAAA9G,EAAAkD,MAAA6E,kCACA,QAAA/H,EAAAgI,gBACAhI,EAAAkH,IAAAe,OAAArB,EAAAE,GACA9G,EAAAkH,IAAAgB,OAAAtB,EAAA5G,EAAAkD,MAAAiF,8BAAArB,GACA9G,EAAAkH,IAAAgB,OAAAtB,EAAA,GAAA5G,EAAAkD,MAAAiF,8BAAArB,EAAA9G,EAAAkD,MAAAkF,gCACApI,EAAAkH,IAAAe,OAAArB,EAAAE,KAEA9G,EAAAkH,IAAAgB,OAAAtB,EAAAE,EAAA9G,EAAAkD,MAAAkF,gCACApI,EAAAkH,IAAAgB,OAAAtB,EAAA5G,EAAAkD,MAAAiF,8BAAArB,EAAA9G,EAAAkD,MAAAkF,gCACApI,EAAAkH,IAAAgB,OAAAtB,EAAA,GAAA5G,EAAAkD,MAAAiF,8BAAArB,GACA9G,EAAAkH,IAAAgB,OAAAtB,EAAAE,EAAA9G,EAAAkD,MAAAkF,iCAEApI,EAAAkH,IAAAmB,SACArI,EAAAkH,IAAAoB,OACAtI,EAAAkD,MAAA4E,mCACA9H,EAAAkD,MAAAiF,8BACAnI,EAAAkD,MAAAqF,oCAEA,QAAAC,GAAAhC,EAAAI,EAAAE,GAqBA,MApBAF,IAAA5G,EAAA6G,iBACAC,GAAA9G,EAAA+G,gBACA/G,EAAAkH,IAAAO,UAAAzH,EAAAkD,MAAAuF,eACAzI,EAAAkH,IAAAS,YAAA3H,EAAAkD,MAAAwF,qBACA1I,EAAAkH,IAAAW,YACAjB,GAAA5G,EAAAkD,MAAAyF,oBACA7B,GAAA9G,EAAAkD,MAAA0F,mBACA5I,EAAA6I,aAAArC,EAAAlD,KAAAtD,EAAA8I,YACA9I,EAAAkH,IAAAe,OAAArB,EAAAE,GACA9G,EAAAkH,IAAAgB,OAAAtB,EAAA5G,EAAAkD,MAAA6F,eAAAjC,GACA9G,EAAAkH,IAAAgB,OAAAtB,EAAA,GAAA5G,EAAAkD,MAAA6F,eAAAjC,EAAA9G,EAAAkD,MAAA8F,iBACAhJ,EAAAkH,IAAAe,OAAArB,EAAAE,KAEA9G,EAAAkH,IAAAgB,OAAAtB,EAAAE,GACA9G,EAAAkH,IAAAgB,OAAAtB,EAAA5G,EAAAkD,MAAA8F,gBAAAlC,EAAA,GAAA9G,EAAAkD,MAAA6F,gBACA/I,EAAAkH,IAAAgB,OAAAtB,EAAAE,EAAA9G,EAAAkD,MAAA6F,gBACA/I,EAAAkH,IAAAgB,OAAAtB,EAAAE,IAEA9G,EAAAkH,IAAAmB,SACArI,EAAAkH,IAAAoB,OACAtI,EAAAkD,MAAAyF,oBACA3I,EAAAkD,MAAA6F,eACA/I,EAAAkD,MAAA+F,qBAEA,QAAAC,GAAAtC,EAAAE,EAAAqC,EAAAC,EAAAC,GACAzC,GAAA5G,EAAA6G,iBACAC,GAAA9G,EAAA+G,eACA,IAAAuC,GAAA1C,EAAAuC,EAAAI,EAAAzC,EAAAsC,CACApJ,GAAAkH,IAAAW,YACA7H,EAAAkH,IAAAe,OAAArB,EAAAyC,EAAAvC,GACA9G,EAAAkH,IAAAgB,OAAAoB,EAAAD,EAAAvC,GACA9G,EAAAkH,IAAAsC,iBAAAF,EAAAxC,EAAAwC,EAAAxC,EAAAuC,GACArJ,EAAAkH,IAAAgB,OAAAoB,EAAAxC,EAAAsC,EAAAC,GACArJ,EAAAkH,IAAAsC,iBAAAF,EAAAC,EAAAD,EAAAD,EAAAE,GACAvJ,EAAAkH,IAAAgB,OAAAtB,EAAAyC,EAAAE,GACAvJ,EAAAkH,IAAAsC,iBAAA5C,EAAA2C,EAAA3C,EAAA2C,EAAAF,GACArJ,EAAAkH,IAAAgB,OAAAtB,EAAAE,EAAAuC,GACArJ,EAAAkH,IAAAsC,iBAAA5C,EAAAE,EAAAF,EAAAyC,EAAAvC,GAEA,QAAA2C,GAAA7C,EAAAE,EAAAqC,EAAAC,GACAxC,GAAA5G,EAAA6G,iBACAC,GAAA9G,EAAA+G,gBACA/G,EAAAkH,IAAAuC,SAAA7C,EAAAE,EAAAqC,EAAAC,GAEA,QAAAM,GAAA9C,EAAAE,EAAAqC,EAAAC,GACAxC,GAAA5G,EAAA6G,iBACAC,GAAA9G,EAAA+G,gBACA/G,EAAAkH,IAAAwC,WAAA9C,EAAAE,EAAAqC,EAAAC,GAEA,QAAAO,GAAAC,EAAAhD,EAAAE,GACAF,GAAA5G,EAAA6G,iBACAC,GAAA9G,EAAA+G,gBACA/G,EAAAkH,IAAAyC,SAAAC,EAAAhD,EAAAE,GAEA,QAAA+C,GAAAlL,EAAAmL,GACA9J,EAAAkH,IAAAW,aAEAkC,EAAA,WACA/J,EAAAkH,IAAAe,OAAAtJ,EAAAiI,EAAA5G,EAAA6G,iBAAAlI,EAAAmI,EAAA9G,EAAA+G,iBACA/G,EAAAkH,IAAAgB,OAAAvJ,EAAAiI,EAAA5G,EAAA6G,iBAAAlI,EAAAsI,MAAAtI,EAAAmI,EAAA9G,EAAA+G,kBAEAuC,EAAA,WACAtJ,EAAAkH,IAAAe,OAAAtJ,EAAAiI,EAAA5G,EAAA6G,iBAAAlI,EAAAsI,MAAAtI,EAAAmI,EAAA9G,EAAA+G,iBACA/G,EAAAkH,IAAAgB,OAAAvJ,EAAAiI,EAAA5G,EAAA6G,iBAAAlI,EAAAsI,MAAAtI,EAAAmI,EAAA9G,EAAA+G,gBAAApI,EAAAqI,SAEAuC,EAAA,WACAvJ,EAAAkH,IAAAe,OAAAtJ,EAAAiI,EAAA5G,EAAA6G,iBAAAlI,EAAAmI,EAAA9G,EAAA+G,gBAAApI,EAAAqI,QACAhH,EAAAkH,IAAAgB,OAAAvJ,EAAAiI,EAAA5G,EAAA6G,iBAAAlI,EAAAsI,MAAAtI,EAAAmI,EAAA9G,EAAA+G,gBAAApI,EAAAqI,SAEAxI,EAAA,WACAwB,EAAAkH,IAAAe,OAAAtJ,EAAAiI,EAAA5G,EAAA6G,iBAAAlI,EAAAmI,EAAA9G,EAAA+G,iBACA/G,EAAAkH,IAAAgB,OAAAvJ,EAAAiI,EAAA5G,EAAA6G,iBAAAlI,EAAAmI,EAAA9G,EAAA+G,gBAAApI,EAAAqI,UAGA8C,KACA9J,EAAAkH,IAAAmB,SAEA,QAAA2B,GAAAJ,EAAA3C,GACA,GAAAtI,GAAAwK,EAAA,CACA,OAAAnJ,GAAAiK,cAAAL,IAAA5J,EAAAiK,cAAAL,GAAA3C,GACAjH,EAAAiK,cAAAL,GAAA3C,IAGAkC,EAAAnJ,EAAAkH,IAAAgD,YAAAN,GAAA3C,MACAjH,EAAAiK,cAAAL,GAAA5J,EAAAiK,cAAAL,OACAjL,GAAiBqG,MAAA4E,EAAA3C,MAAAkC,GACjBnJ,EAAAiK,cAAAL,GAAA3C,GAAAtI,EACAA,GAEA,QAAAwL,GAAA3D,GACA,GAAA4D,GAAApK,EAAAkD,MAAAsD,EAAAtD,MAAA,eACAmH,EAAArK,EAAAkD,MAAAsD,EAAAtD,MAAA,cACAoH,EAAAtK,EAAAkD,MAAAsD,EAAAtD,MAAA,gBACAqH,EAAAvK,EAAAkD,MAAAsD,EAAAtD,MAAA,iBACAsH,EAAAH,EAAA7D,EAAAQ,OAAA,GAAAR,EAAAQ,OACAyD,EAAAL,EAAA5D,EAAAuC,eAAAvC,EAAAkE,iBACAlE,GAAAoD,KAAAI,EAAAxD,EAAAG,eAAAH,EAAAS,MAAAqD,EAAAF,GACA5D,EAAAoD,KAAA5C,OAAAR,EAAAmE,WACA,UAAAnE,EAAAoE,oBACAH,EAAAjE,EAAAS,MAAAT,EAAAoD,KAAA3C,MAAAqD,EACa,WAAA9D,EAAAoE,sBACbH,EAAAjE,EAAAS,MAAA,EAAAT,EAAAoD,KAAA3C,MAAA,GAEA,QAAAT,EAAAqE,kBACAL,EAAAH,EAAA7D,EAAAoD,KAAA5C,OACa,WAAAR,EAAAqE,oBACbL,EAAAhE,EAAAQ,OAAAuD,EAAA/D,EAAAoD,KAAA5C,QAEAR,EAAAoD,KAAAhD,EAAAJ,EAAAI,EAAA6D,EACAjE,EAAAoD,KAAA9C,EAAAN,EAAAM,EAAA0D,EACAb,EAAAnD,EAAAoD,KAAA5E,MAAAwB,EAAAoD,KAAAhD,EAAAJ,EAAAoD,KAAA9C,GAxLA,GAAAgE,MACAC,EAAA,EACAC,EAAA,EACAhL,GAAAoG,kBA6LApG,EAAAoD,KAAA,SAAA6H,GA8IA,QAAAC,GAAAtM,EAAAuM,EAAAC,GACA,gBAAAC,EAAAC,EAAAC,GACA,GACAC,GACAhF,EAaAxD,EAfAyI,EAAAJ,EAAAnI,OAAA,OAGAwI,EAAA,aAAAtH,KAAAqH,GACAE,EAAA,aAAAvH,KAAAqH,GACAG,EAAA,kBAAAH,EACAI,EAAA,qBAAAJ,EACAK,EAAA9L,EAAA+L,WAAAX,KAAA,IAAApL,EAAA+L,WAAAX,GAAAY,QAAAT,GACAU,EAAAjM,EAAAkM,OAAAtN,EAAAoB,EAAA8I,aAAA,IAAA9I,EAAAkM,OAAAtN,EAAAoB,EAAA8I,WAAAkD,QAAAT,GACAY,EAAAnM,EAAAoM,WAAAjB,WAAAC,GAAApL,EAAAoM,WAAAC,cAAAd,EACAe,EAAA,gBAAA1N,GAAAyM,EAAAxM,OAAA,OAAAD,EAAAyM,EAAAxM,WAAAkB,KAAAnB,EAAAyM,EAAAxM,MACA0N,IAAAvM,EAAAwM,OAAAC,KAAAzM,EAAAoM,WAAAjB,YAAAC,GACApL,EAAAwM,OAAAE,QAAA1M,EAAAoM,WAAAC,eAAAd,IACA,IAAAA,IAAA,IAAAH,KACAQ,EAAA,gDAEAe,EAAA3M,EAAA4M,WAAAvB,EAAAwB,MAAA,UACAC,EAAA,EACAC,EAAA,EACAC,EAAAhN,EAAAiN,MAAAP,QAAAd,EAAA,aAAAP,EAAArL,EAAA8I,YAAAuC,EAAApE,MACAiG,GACAlI,MAAApG,EAAAyM,EAAAxM,MACAsO,IAAAvO,EACAyM,SA0EA,IAxEA,kBAAAI,IACAuB,EAAA7D,EAAAvC,OAGA7G,KAAAiN,IACAA,EAAAhN,EAAAkD,MAAAkK,aAEAxG,EAAAoG,EAAAhN,EAAAkD,MAAAmK,gBAAA,IACAzG,GAAAoG,EAAAhN,EAAAkD,MAAAmK,iBAEAlB,IACAV,EAAA,eAEA,IAAAzL,EAAAsN,YAAAtB,QAAAb,IAAAO,GACA1L,EAAAsN,YAAA7I,KAAA0G,GAEAnI,EAAAhD,EAAAqD,cAAA,kBAAA6J,GACAK,EAAA3G,EACA4G,EAAA1G,EACA,eAAA2E,GACA8B,EAAA,EACAC,EAAA,GACqB5B,EACrB2B,EAAA,EACqB7B,IACrB8B,EAAA,GAEAhH,GACAqG,KAAAP,EAAA,uBAAAjB,EAAAwB,KACA3J,MAAAuI,EACAgC,SAAA,uBACA7G,EAAA2G,EACAzG,EAAA0G,EACA5C,oBAAA5K,EAAAkD,MAAAuI,EAAA,uBACAZ,kBAAA7K,EAAAkD,MAAAuI,EAAA,qBACAiC,UAAA1N,EAAA+G,gBAAAyG,EACAG,WAAA3N,EAAA6G,iBAAA0G,EACAK,UAAA5N,EAAA6N,UAAAD,UACAE,WAAA9N,EAAA6N,UAAAC,WACA3B,UAAAI,EACAN,UACAH,WACA7E,MAAA+F,EACAhG,OAAA+G,EACAC,YAAAhB,EACAiB,aAAAF,EACApJ,WAAA3E,EAAAU,KAAAiE,WACAuJ,aAAAlO,EAAAU,KAAAiE,WACArB,KAAA1E,EACA+M,WACAD,WACAG,iBACAsC,kBAAA9C,EAAA8C,gBACAvC,cACAwC,UACA/C,SACAgB,YAAAd,EACAJ,SAAAC,EACAiD,gBAAA/C,EACAgD,aAAAnD,EACAmB,SACAiC,QAAAvO,EAAAE,WAAArB,MAAA,IAAAD,EAAAoB,EAAA8I,UAAA,IAAAuC,EAAArL,EAAA8I,UACA0F,WAAAxO,EAAAU,KACAmF,UAAA,GACA0G,eACAvH,MAAA0G,IAAAE,EAAAP,EAAAoD,OAAApD,EAAAxM,KAAAD,EAAAyM,EAAAxM,OAEAqO,EAAA1G,OACAA,EAAAkI,WAAAlI,EAAAkF,SAAA1L,EAAAiN,MAAAR,MAAA,GAAAkC,EACAnI,EAAAoI,UAAApI,EAAAkF,SAAA1L,EAAAiN,MAAAP,QAAAmC,WAAA7O,EAAAiN,MAAAP,QAAArB,EAAArL,EAAA8I,WACAtC,EAAAxG,EAAA8I,UAAAlK,EAAAoB,EAAA8I,UACA9I,EAAA8O,aAAAC,QAAAvI,IACAxG,EAAAqD,cAAA,mBAAA6J,GAAA,CA+CA,GA9CAlN,EAAAkH,IAAAO,UAAAzH,EAAAkD,MAAAuI,EAAA,mBACAzL,EAAAkH,IAAAS,YAAA3H,EAAAkD,MAAAuI,EAAA,eACAzL,EAAAkH,IAAA8H,UAAAhP,EAAAkD,MAAAuI,EAAA,eACAQ,IACAjM,EAAAkH,IAAAO,UAAAzH,EAAAkD,MAAAuI,EAAA,wBACAzL,EAAAkH,IAAAS,YAAA3H,EAAAkD,MAAAuI,EAAA,qBAEAK,IACA9L,EAAAkH,IAAAO,UAAAzH,EAAAkD,MAAAuI,EAAA,2BACAzL,EAAAkH,IAAAS,YAAA3H,EAAAkD,MAAAuI,EAAA,wBAEAc,IACAvM,EAAAkH,IAAAO,UAAAzH,EAAAkD,MAAAqJ,EAAA,oBAEAvM,EAAAqD,cAAA,aAAA6J,GACA1G,EAAA8F,SACA9F,EAAAQ,SAAA2H,IACAnI,EAAAQ,OAAA2H,GAAA3O,EAAAkD,MAAA+L,wBACAC,GAAA,GAEA1I,EAAAS,MAAAjH,EAAAiN,MAAAP,QAAArB,EAAArL,EAAA8I,YAAA9I,EAAAkD,MAAAiM,wBAEAf,IAAA5H,EAAAoF,cACApF,EAAAQ,OAAAhH,EAAAiN,MAAAR,KAAA2C,EAAApP,EAAA8I,YAAA9I,EAAAkD,MAAA6K,YAEAvH,EAAA8F,SACA7C,EAAA8D,EAAAC,EAAAhH,EAAAS,MAAAT,EAAAQ,QACA0C,EAAA6D,EAAAC,EAAAhH,EAAAS,MAAAT,EAAAQ,SAEAhH,EAAAkH,IAAAmI,OACAnG,EAAA1C,EAAAI,EAAAJ,EAAAM,EAAAN,EAAAS,MAAAT,EAAAQ,OAAA,GACAhH,EAAAkH,IAAAoI,OACAtP,EAAAqD,cAAA,kBAAA6J,GACA1G,EAAAQ,SAAA+G,GAAAK,IAAA5H,EAAAoF,cACA5L,EAAAiN,MAAAR,KAAAf,GAAA,EAAA9M,EAAAoB,EAAA8I,WAAAtC,EAAAQ,OACAkI,GAAA,GAEA1I,EAAAS,QAAA+F,IACAhN,EAAAiN,MAAAP,QAAArB,EAAArL,EAAA8I,WAAAtC,EAAAS,MACAiI,GAAA,GAEAtD,GAAA5L,EAAAE,WAAAqP,OACAvP,EAAAqD,cAAA,kBAAA6J,KACAH,EAAAvE,EAAAhC,EAAAxG,EAAAkD,MAAAuI,EAAA,eAAA+B,EAAA,KAGAxN,EAAAE,WAAAsP,gBAAA5D,IACAA,EACA,GAAApF,EAAA8F,SAAAtM,EAAAqD,cAAA,uBAAA6J,GAAA,CACA,IAAAlN,EAAAyP,WAAAjJ,EAAA+H,QAAA,CAMA,GALA/C,EAAAxL,EAAAQ,KAAAgL,oBAAAxL,EAAAQ,KACAgL,EAAA3M,KAAAmB,EAAAE,WAAAwP,eAAAlJ,EAAA+H,WAAAxO,GACAyL,EAAA7G,WAAA6B,EACAgF,EAAAlI,KAAA1E,EAAAyM,EAAAxM,MACAqO,EAAA1B,qBACAxL,EAAAqD,cAAA,uBAAA6J,GAAqF,MACrFlN,GAAAyP,WAAAjJ,EAAA+H,QAAAvO,EAAAY,WAAA4K,GACAxL,EAAAiN,MAAAR,KAAA2C,EAAApP,EAAA8I,WACA9I,EAAAiN,MAAAR,KAAA2C,EAAApP,EAAA8I,YAAA9I,EAAAkD,MAAAyM,eACAT,GAAA,EAEA1I,EAAAoJ,KAAA5P,EAAAyP,WAAAjJ,EAAA+H,QACA/H,EAAAoJ,KAAAjL,WAAA6B,EACAA,EAAAoJ,KAAAC,SAAA,EACArJ,EAAAoJ,KAAAxM,OACApD,EAAAqD,cAAA,iBAAA6J,OACyB1G,GAAA8F,SACzBtM,EAAAyP,WAAAjJ,EAAA+H,UACAvO,EAAAyP,WAAAjJ,EAAA+H,QAAA5J,WAAAsJ,aAAA,GAEAvC,GAAA1L,EAAA8P,UAAAzE,EAAAxM,OACAmB,EAAAqD,cAAA,qBAAA6J,KACAJ,EAAAtF,EAAA+F,EAAAvN,EAAAkD,MAAAuI,EAAA,oBAGAzL,EAAAkH,IAAAO,UAAAzH,EAAAkD,MAAAuI,EAAA,SACAQ,IACAjM,EAAAkH,IAAAO,UAAAzH,EAAAkD,MAAAuI,EAAA,eAEAK,IACA9L,EAAAkH,IAAAO,UAAAzH,EAAAkD,MAAAuI,EAAA,kBAEAc,IACAvM,EAAAkH,IAAAO,UAAAzH,EAAAkD,MAAAqJ,EAAA,UAEAvM,EAAAkH,IAAA6I,KAAA/P,EAAAkD,MAAAuI,EAAA,QACAjF,EAAAmE,WAAA3K,EAAAkD,MAAAuI,EAAA,cACAjF,EAAAuC,eAAAgE,EACAvG,EAAAkE,kBAAAoC,EACA9J,MAAAjD,KAAAiD,IAAA2J,EACAA,EAAAO,GAAA,OACAnN,KAAAiD,GAAA2J,IACA3J,EAAA,GACAgN,QAAAC,KAAA,mCACA5E,EAAAwB,KAAA,wBAEArG,EAAAG,oBAAA5G,KAAAiD,GAAA,OAAAA,IAAA,IAAAkN,WACAlQ,EAAAmQ,mBAAApQ,KAAAC,EAAAmQ,cAAAnN,IAAA0I,IACAlF,EAAAG,eAAA3G,EAAAE,WAAAkQ,iBAAApN,GAEAhD,EAAAqD,cAAA,aAAA6J,KACA1G,EAAAX,WAAA,SAAAwF,EAAAwB,KACAtG,EAAAC,GAEA2D,EAAA3D,IA8BA,OAzBA2F,KACAkE,EAAA7J,GAEAsF,IAAAF,IACA5L,EAAA+L,WAAAvF,EAAA2E,SAAA,KACA,IAAAnL,EAAA+L,WAAAvF,EAAA2E,SAAA,GAAAa,QAAAxF,EAAA6F,cACA,IAAA7F,EAAA2E,UACA3E,EAAAkF,UACA4E,EAAA7L,MAAA+B,EAAA,MAEAxG,EAAA+L,WAAAvF,EAAA2E,SAAA,KACA,IAAAnL,EAAA+L,WAAAvF,EAAA2E,SAAA,GAAAa,QAAAxF,EAAA6F,cACAiE,EAAA7L,MAAA+B,EAAA,MAEAxG,EAAA+L,WAAAvF,EAAA2E,WAAA,IAAA3E,EAAA6F,cACA,IAAArM,EAAA+L,WAAAvF,EAAA2E,UAAAa,QAAAxF,EAAA6F,YAAA,IACAiE,EAAA7L,MAAA+B,EAAA,MAEAxG,EAAA+L,WAAAvF,EAAA2E,WAAA3E,EAAA6F,cAAAzM,EAAAgG,SACA,IAAA5F,EAAA+L,WAAAvF,EAAA2E,UAAAa,QAAAxF,EAAA6F,YAAA,IACAiE,EAAA7L,MAAA+B,EAAA,OAGAxG,EAAAkH,IAAAqJ,UACA3J,GAAAJ,EAAAS,MAAAjH,EAAAkD,MAAAmK,gBACA7G,EAAAS,QAGA,QAAAuJ,GAAAC,EAAAC,EAAAtF,GACA,GAAAuF,EACA3Q,GAAAE,WAAA0Q,iBACAhK,EAAA,EACAiK,GAAqCA,cAAAH,EAAA,GACrCG,EAAA7Q,EAAA8I,UAAA2H,EAAAzQ,EAAA8I,UACA6H,GACA9R,KAAA,gBACAoI,MAAAjH,EAAAkD,MAAA4N,mBACA5N,MAAA,gBACA2J,KAAA,SACAvJ,KAAAmN,EAAAzQ,EAAA8I,UACA4H,OAAA,GAEAC,EAAA3Q,EAAA8I,UAAA2H,EAAAzQ,EAAA8I,UACAsF,EAAApO,EAAA6I,aAAA4H,EAAAzQ,EAAA8I,WACAoC,EAAA2F,EAAAH,EAAAtF,GAAAuF,GAAA,OAqEA,QAAAI,GAAAzH,EAAA1K,GACA,GAAAL,GAAAyS,EAAAC,EAAAlS,EAAAmS,EAAAtR,EAAAgG,MACA,IAAAkB,EAAA,EAAAiH,EAAA3E,EACA,QAOA,IALAgG,EAAApP,EAAAsD,KAAAgG,GACA8E,EAAApO,EAAA6I,aAAAuG,EAAApP,EAAA8I,WACAmI,EAAAjR,EAAAiN,MAAAR,KAAA2C,EAAApP,EAAA8I,YAAA9I,EAAAkD,MAAA6K,WACAiD,EAAA5C,EAAApO,EAAAiN,MAAAkE,MAAA/B,EAAApP,EAAA8I,WAAA,EACA6F,EAAAsC,EAAAD,EACAlK,GAAA,EAAA6H,EACA,QAMA,KAJA3O,EAAAE,WAAA0Q,iBACAhK,GAAAwK,GAEArD,EAAAY,EACA5P,EAAAiB,EAAAqR,gBAA8CtS,EAAAmS,EAAOnS,GAAA,EAGrD,GAFAR,EAAAyB,EAAAwM,OAAAE,QAAA3N,IACA6H,GAAAsE,EAAAkE,EAAA9F,EAAA1K,GAAAgB,EAAArB,KAAAQ,IACAiB,EAAAiH,MAAA,CACAjH,EAAAsR,iBAAAvS,EACAiB,EAAAuR,iBAAA3K,CACA,OAwCA,MApCAmH,GAAAY,EACA/H,GAAA,EAAA5G,EAAA6N,UAAAC,WAAA9N,EAAAwR,gBAAAxR,EAAAkD,MAAAmK,gBAEAoE,EAAAzR,EAAAyP,WAAAL,EAAApP,EAAA8I,WACAQ,IAAAtJ,EAAAsD,KAAAsC,QAAAwI,GACAqD,EAAA5B,SAAA,EACA4B,EAAA9M,YACA+I,UAAA5G,EAAAmK,EAAAjR,EAAA+G,gBACA4G,WAAAyD,EAAA,EAAApR,EAAA6G,iBACAoH,aAAA+C,EACAhD,YAAAhO,EAAAiH,MAAAmK,EAAApR,EAAAkD,MAAAwO,eAAA,EACAxD,aAAAlO,EAAAU,KAAAiE,WACAA,WAAA3E,EAAAU,KAAAiE,WACAzB,MAAAlD,EAAAkD,MACAuK,SAAA,uBACAG,UAAA5N,EAAA6N,UAAAD,UACAE,WAAA9N,EAAA6N,UAAAC,WACA3C,SAAA7B,GAEAtJ,EAAA8O,aAAAC,SACA5D,SAAAvE,EACAyF,YAAA,EACAvF,EAAA2K,EAAA9M,WAAA+I,UACA9G,EAAA6K,EAAA9M,WAAAgJ,WACA3G,OAAAyK,EAAA9M,WAAAsJ,aACAhH,MAAAwK,EAAA9M,WAAAqJ,YACA9K,MAAA,YACA2J,KAAA4E,EAAA9M,WAAA8I,WAEAgE,EAAArO,QACiBqO,IACjBA,EAAA9M,WAAAsJ,aAAA,QACAjO,GAAAiN,MAAAkE,MAAA/B,EAAApP,EAAA8I,YAEA6I,EAAAlN,MAAA2K,EAAA9F,EAAA1K,EAAAkI,EAAA6H,IACA7H,GAAAiH,EAAA/N,EAAAkD,MAAAmK,iBACA,EA9gBA,IAAArN,EAAAqD,cAAA,mBACArD,EAAA4R,aAAA5R,EAAAgH,QAAAhH,EAAAiH,OAAA,CAGA,GAAAjH,EAAA4R,aAAA3G,EAEA,WADA4G,uBAAA7R,EAAAwO,WAAApL,KAGA,SAAApD,EAAAU,KAAAmP,QAAA,CAIA,GAAAX,GAAA2B,EAAAlR,EAAA4N,EAAAC,EAAAiE,EAAArD,EACAO,EAAAE,EAAA/H,EAAAF,EAAAjI,EAAAyK,EAAAD,EAAAvJ,EAAA0J,EAAA8F,EAAAiB,EACAC,KACAqB,KACAnT,EAAAwB,EAAAsD,KAAAsC,OACAkM,EAAA9R,EAAA+R,gBACAC,EAAAhS,EAAAiS,yBACAb,EAAApR,EAAAkS,2BACAnE,EAAA/N,EAAAkD,MAAA6K,UACAhD,IAAA,EACApL,EAAAwS,YAAAC,MAEApS,EAAAsD,KAAAsC,OAAA5F,EAAAwM,OAAAC,KAAA7G,QACA5F,EAAAqS,kBA2pBArS,EAAAkH,IAAAmI,OApKA,WACArP,EAAAsN,eACA1N,EAAAI,EAAAsS,mBACAtS,EAAA8O,gBACA9O,EAAA+G,gBAAA/G,EAAA4R,YAAA5R,EAAA2E,WAAA+I,UAAA,EACA1N,EAAA6G,iBAAA7G,EAAA4R,YAAA5R,EAAA2E,WAAAgJ,WAAA,EACAvE,EAAApJ,EAAAgH,OACAmC,EAAAnJ,EAAAiH,MACAjH,EAAA4R,aACA5R,EAAAkH,IAAAqL,MAAArR,OAAAsR,iBAAAtR,OAAAsR,qBAGA,WACAtJ,EAAA,IAAAC,EAAAC,EAAA,GACApJ,EAAAkH,IAAAoI,OACAtP,EAAAkH,IAAAO,UAAAzH,EAAAkD,MAAAuP,gBACAhJ,EAAA,IAAAN,EAAAC,MAEA,WACA,GAAArK,GAAAM,EAAAd,EAAA2S,EAAAtR,EAAAgG,MAGA,KAFAgB,GAAA,EAAA5G,EAAA6N,UAAAC,WAAA9N,EAAAwR,gBAAAxR,EAAAkD,MAAAmK,gBACAvG,GAAA,EAAA9G,EAAA6N,UAAAD,UAAAoE,EAAAhS,EAAA0S,eAAA1S,EAAAkD,MAAAmK,gBACA/D,EAAAtJ,EAAA2S,eAA6CrJ,EAAA9K,EAAO8K,GAAA,EAEpD,GADAjK,EAAAW,EAAAwM,OAAAC,KAAAnD,IACAyH,EAAA1R,EAAAiK,GAAA,CACAtJ,EAAA4S,kBAAAtJ,EACAtJ,EAAA6S,kBAAA/L,CACA,OAGA,GAAA9G,EAAAE,WAAA4S,WAAA,CAMA,IALA9S,EAAAE,WAAA0Q,iBACAhK,GAAAwK,GAEAzC,EAAAZ,EAAA/N,EAAAkD,MAAA6K,WACAK,GAAA,EACArP,EAAAiB,EAAAqR,gBAAkDtS,EAAAmS,IAClD3S,EAAAyB,EAAAwM,OAAAE,QAAA3N,MACA6H,GAAAsE,EAAAlL,EAAA+S,OAAA/S,EAAAsD,KAAAsC,OAAA5F,EAAAsD,KAAAsC,QAAAhG,EAAArB,KAAAQ,IACAiB,EAAAiH,MAAAjH,EAAA6N,UAAAC,aAHyD/O,GAAA,GAOzD4S,EAAAlN,MAAAzE,EAAA+S,OAAA/S,EAAAsD,KAAAsC,OAAA5F,EAAAsD,KAAAsC,OAAAkB,EAAA6H,QAqDA,WACA3O,EAAAkH,IAAA8H,UAAAhP,EAAAkD,MAAA8P,4BACAhT,EAAAkH,IAAAS,YAAA3H,EAAAkD,MAAA+P,4BACA3C,EAAAzP,QAAA,SAAAlC,GACAkL,EAAAlL,EAAA,GAAAA,EAAA,SAGA,WACA0R,IACA,QAAArQ,EAAAE,WAAAgT,cACAlT,EAAAoM,YAAApM,EAAAoM,WAAAjB,WAAAkF,EAAAlF,WACAnL,EAAAkH,IAAA8H,UAAAhP,EAAAkD,MAAAiQ,6BACAnT,EAAAkH,IAAAS,YAAA3H,EAAAkD,MAAAkQ,6BACA1J,EAAA,EAAA2G,EAAAvJ,EAAA9G,EAAAqT,iBAAAjC,EAAAzC,KAGA3O,EAAAkH,IAAA8H,UAAAhP,EAAAkD,MAAAiQ,6BACAnT,EAAAkH,IAAAS,YAAA3H,EAAAkD,MAAAkQ,6BACA1J,EAAA2G,EAAAzJ,EAAAyJ,EAAAvJ,EAAAuJ,EAAApJ,MAAAoJ,EAAArJ,aArPA,WACA,GAAApI,GAAAL,EAAAQ,EAAAuU,EAAAjI,EAAA6F,EAAAtR,EAAAgG,MAMA,IALA+L,EAAA9Q,QAAA,SAAA0S,GACAzM,EAAAyM,EAAA,GACAxF,EAAAwF,EAAA,GACA/C,EAAA+C,EAAA,GAAAA,EAAA,GAAAA,EAAA,MAEAvT,EAAAE,WAAAsT,kBAAA,CAQA,IAPA5M,GAAA,EAAA5G,EAAA6N,UAAAC,WAAA9N,EAAAwR,gBACAxR,EAAAE,WAAA0Q,iBACAhK,GAAAwK,GAEAtK,EAAA,EAEAiH,EAAA/N,EAAAiS,yBACAlT,EAAAiB,EAAAqR,gBAAkDtS,EAAAmS,IAClD3S,EAAAyB,EAAAwM,OAAAE,QAAA3N,GACAsM,EAAAzL,EAAArB,GACAK,GACA6P,MAAApD,EAAAoD,MACA5P,KAAAwM,EAAAxM,KACAoI,MAAAoE,EAAApE,MACA/D,MAAA,mBACA2J,KAAA,SACA6D,MAAA3R,EACA0U,MAAAlV,GAEA+U,GAA4CA,iBAAAjI,EAAAoD,OAAApD,EAAAxM,MAC5CyU,EAAAtT,EAAA8I,UAAA,IAAAuC,EAAArL,EAAA8I,UACAlK,EAAAoB,EAAA8I,UAAAuC,EAAArL,EAAA8I,aACAlC,GAAAsE,EAAAoI,GAAA,MAAA1U,EAAAG,EAAAR,IACAyB,EAAAiH,MAAAjH,EAAA6N,UAAAC,aAhByD/O,GAAA,GAqBzD6H,EAAAuC,IACAxK,GACAE,KAAA,GACAoI,MAAAjH,EAAAkD,MAAAwO,eACAxO,MAAA,gBACAwQ,cAAA,EACAvF,iBAAA,EACAtB,KAAA,SACA6D,MAAA9Q,EAAAgG,QAEAjH,EAAAqB,EAAA8I,UAAA,mBACAoC,GAAkCyI,OAAA,KAAW,MAAAhV,GAAA,OAG7CqB,EAAAE,WAAA0Q,iBACA/B,GAAsCA,WAAA,IACtCA,EAAA7O,EAAA8I,UAAA,aACAlC,EAAA,EACAjI,GACAE,KAAA,aACAoI,MAAAjH,EAAAkD,MAAA4N,mBACA5N,MAAA,aACA2J,KAAA,SACA6D,OAAA,GAEA/R,EAAAqB,EAAA8I,UAAA,aACAoC,EAAA2D,GAAA,MAAAlQ,GAAA,WAmHA,WACA,GAAAqB,EAAA4T,cAAA,CACA,GAAArK,IACAvC,OAAAhH,EAAA4T,cAAA5M,OACAC,MAAAjH,EAAA4T,cAAA3M,MACAL,EAAA5G,EAAA4T,cAAAhN,EAAA5G,EAAA4T,cAAAC,WAAAjN,EACAE,EAAA9G,EAAA4T,cAAA9M,EAAA9G,EAAA4T,cAAAC,WAAA/M,GAEApI,GACAuI,MAAAkC,EACA2K,OAAA1K,EACAxC,EAAA,EACAE,EAAA,EAEA9G,GAAAkH,IAAAO,UAAAzH,EAAAkD,MAAA6Q,6BACA/T,EAAAkH,IAAA8H,UAAAhP,EAAAkD,MAAA8Q,yBACAhU,EAAAkH,IAAAS,YAAA3H,EAAAkD,MAAA+Q,yBACA,gBAAAjU,EAAAkU,UACA3K,EAAAtC,MAAAkC,EACAI,EAAA3C,EAAA,EACAlI,EAAAuI,MAAAkC,EACAzK,EAAAoI,EAAA9G,EAAA+R,YAAAjL,EACA2C,EAAAF,EAAA3C,EAAA2C,EAAAzC,EAAAyC,EAAAtC,MAAAsC,EAAAvC,QACA0C,EAAAH,EAAA3C,EAAA2C,EAAAzC,EAAAyC,EAAAtC,MAAAsC,EAAAvC,QACAhH,EAAAkH,IAAA8H,UAAAhP,EAAAkD,MAAAiR,8BACAnU,EAAAkH,IAAAS,YAAA3H,EAAAkD,MAAAkR,8BACApU,EAAA+R,YAAA5G,WAAAnL,EAAA4T,cAAAzI,UACAnL,EAAA+R,YAAA5G,SAAA,IAAAnL,EAAA4T,cAAAzI,UACAtB,EAAAnL,EAAA,MAEiB,mBAAAsB,EAAAkU,UAAAlU,EAAA4T,gBACjBrK,EAAAvC,OAAAoC,EACAG,EAAAzC,EAAA,EACApI,EAAAsI,OAAAoC,EACA1K,EAAAkI,EAAA5G,EAAA+R,YAAAnL,EACA6C,EAAAF,EAAA3C,EAAA2C,EAAAzC,EAAAyC,EAAAtC,MAAAsC,EAAAvC,QACA0C,EAAAH,EAAA3C,EAAA2C,EAAAzC,EAAAyC,EAAAtC,MAAAsC,EAAAvC,QACAhH,EAAAkH,IAAA8H,UAAAhP,EAAAkD,MAAAiR,8BACAnU,EAAAkH,IAAAS,YAAA3H,EAAAkD,MAAAkR,8BACApU,EAAA+R,YAAA1F,cAAArM,EAAA4T,cAAAvH,aACArM,EAAA+R,YAAA1F,YAAA,IAAArM,EAAA4T,cAAAvH,aACAxC,EAAAnL,EAAA,UA5kBA,WACA,GAAAgI,IACAE,EAAA,EACAE,EAAA,EACAE,OAAA,EACAC,MAAA,EACA/D,MAAA,uBAEA7D,GACAuH,EAAA,EACAE,EAAA,EACAE,OAAA,EACAC,MAAA,EACA/D,MAAA,yBAEAmR,GACAzN,EAAA,EACAE,EAAA,EACAE,OAAA,EACAC,MAAA,EACA/D,MAAA,uBAEAoR,GACA1N,EAAA,EACAE,EAAA,EACAE,OAAA,EACAC,MAAA,EACA/D,MAAA,yBAEAqR,GACA3N,EAAA,EACAE,EAAA,EACAE,OAAA,EACAC,MAAA,EACA0E,UAAA,EACA6I,mBAAA,EACAtR,MAAA,qBAEAxE,EAAA,EAAAsB,EAAAkD,MAAAuR,mBACA7V,EAAA,GAAAoB,EAAAkD,MAAAuR,kBACAzU,GAAAkH,IAAAS,YAAA3H,EAAAkD,MAAAwR,qBACA1U,EAAAkH,IAAA8H,UAAAhP,EAAAkD,MAAAyR,qBAEAjO,EAAAE,GAAAuC,EAAAnJ,EAAAkD,MAAAwO,eAAA1R,EAAAkD,MAAAyR,qBAAA/V,EACA8H,EAAAI,GAAAkL,EACAtL,EAAAO,MAAAjH,EAAAkD,MAAAwO,eAAA1R,EAAAkD,MAAAyR,qBAAA/V,EACA8H,EAAAM,OAAAoC,EAAA4I,EAAAhS,EAAAkD,MAAAwO,eAAA9S,EAAAF,EACAsB,EAAAkH,IAAAO,UAAAzH,EAAAkD,MAAA0R,yBACAnL,EAAA/C,EAAAE,EAAAF,EAAAI,EAAAJ,EAAAO,MAAAP,EAAAM,OAAAtI,GACAgL,EAAAhD,EAAAE,EAAAF,EAAAI,EAAAJ,EAAAO,MAAAP,EAAAM,OAAAtI,GAEA2V,EAAAzN,EAAAF,EAAAE,EAAA5G,EAAAkD,MAAAuR,mBACAJ,EAAAvN,EAAAkL,EAAAhS,EAAAkD,MAAAuR,oBACA/N,EAAAM,OAAAhH,EAAA6N,UAAAgH,kBACA7U,EAAA6N,UAAAD,UAAA5N,EAAA6N,UAAAiH,cACAT,EAAApN,MAAAjH,EAAAkD,MAAA6R,kBACAV,EAAArN,OAAAhH,EAAA6N,UAAAgH,gBACA7U,EAAAkH,IAAAO,UAAAzH,EAAAkD,MAAA8R,kBACA,WAAA5Q,KAAA0N,EAAAzR,WACAL,EAAAkH,IAAAO,UAAAzH,EAAAkD,MAAA+R,sBAEAZ,EAAArN,OAAAN,EAAAM,SACAkC,EAAAmL,EAAAzN,EAAAyN,EAAAvN,EAAAuN,EAAApN,MAAAoN,EAAArN,OAAAhH,EAAAkD,MAAAgS,0BACAlV,EAAAkH,IAAAmB,SACArI,EAAAkH,IAAAoB,QAGAjJ,EAAAuH,GAAAwK,EACA/R,EAAAyH,GAAAsC,EAAApJ,EAAAkD,MAAAwO,eAAA9S,EACAS,EAAA4H,MAAAkC,EAAAnJ,EAAAkD,MAAAwO,eAAAN,EAAAxS,EAAAF,EACAW,EAAA2H,OAAAhH,EAAAkD,MAAAwO,eAAA1R,EAAAkD,MAAAyR,qBAAA/V,EACAoB,EAAAkH,IAAAO,UAAAzH,EAAAkD,MAAA0R,yBACAnL,EAAApK,EAAAuH,EAAAvH,EAAAyH,EAAAzH,EAAA4H,MAAAvI,EAAAW,EAAA2H,QACA0C,EAAArK,EAAAuH,EAAAvH,EAAAyH,EAAAzH,EAAA4H,MAAAvI,EAAAW,EAAA2H,QAEAsN,EAAAxN,EAAAzH,EAAAyH,EAAA9G,EAAAkD,MAAAuR,mBACAH,EAAA1N,EAAAwK,EAAApR,EAAAkD,MAAAuR,oBACApV,EAAA4H,MAAAjH,EAAA6N,UAAAsH,iBACAnV,EAAA6N,UAAAC,WAAA9N,EAAA6N,UAAAuH,aACAd,EAAArN,MAAAjH,EAAA6N,UAAAsH,eACAb,EAAAtN,OAAAhH,EAAAkD,MAAA6R,kBACA/U,EAAAkH,IAAAO,UAAAzH,EAAAkD,MAAA8R,kBACA,aAAA5Q,KAAA0N,EAAAzR,WACAL,EAAAkH,IAAAO,UAAAzH,EAAAkD,MAAA+R,sBAEAX,EAAArN,MAAA5H,EAAA4H,QACAiC,EAAAoL,EAAA1N,EAAA0N,EAAAxN,EAAAwN,EAAArN,MAAAqN,EAAAtN,OAAAhH,EAAAkD,MAAAgS,0BACAlV,EAAAkH,IAAAmB,SACArI,EAAAkH,IAAAoB,QAGAtI,EAAAkH,IAAAS,YAAA3H,EAAAkD,MAAAmS,2BACArV,EAAAkH,IAAAO,UAAAzH,EAAAkD,MAAAoS,+BACAf,EAAA3N,EAAAvH,EAAAuH,EAAAvH,EAAA4H,MAAAvI,EACA6V,EAAAzN,EAAAJ,EAAAI,EAAAJ,EAAAM,OAAAtI,EACA6V,EAAAtN,MAAAjH,EAAAkD,MAAAwO,eAAA1R,EAAAkD,MAAAyR,qBACAJ,EAAAvN,OAAAhH,EAAAkD,MAAAwO,eAAA1R,EAAAkD,MAAAyR,qBACAzL,EAAAqL,EAAA3N,EAAA2N,EAAAzN,EAAAyN,EAAAtN,MAAAsN,EAAAvN,OAAA,GACAhH,EAAAkH,IAAAmB,SACArI,EAAAkH,IAAAoB,OACAtI,EAAA8O,aAAAC,QAAArI,GACA1G,EAAA8O,aAAAC,QAAAsF,GACArU,EAAA8O,aAAAC,QAAA1P,GACAW,EAAA8O,aAAAC,QAAAuF,GACAtU,EAAA8O,aAAAC,QAAAwF,GACAvU,EAAA6N,UAAA0H,KACA7O,IACA0C,EAAA/J,GAEAW,EAAA6N,UAAA2H,KACA9O,EAAA2N,EACAjL,EAAAkL,MAmjBApF,GACAlP,EAAA6E,QAAA,GAnFA,WACA7E,EAAAkH,IAAA8H,UAAAhP,EAAAkD,MAAAuS,gBACAzV,EAAAkH,IAAAS,YAAA3H,EAAAkD,MAAAwS,gBACAhM,EAAA,IAAA1J,EAAAiH,MAAAjH,EAAAgH,WAuBA,WACA8D,EAAAC,EAAAC,GAAAmH,YAAAC,MAAAzS,CACA,IAAAf,EACAoB,GAAAE,WAAAyV,QACA3V,EAAAkH,IAAA6I,KAAA,kBACAnR,KACAA,EAAAgX,MAAA9K,EAAA+K,OAAA,SAAAlF,EAAApH,GACA,MAAAoH,GAAApH,GACqB,GAAAuB,EAAAlF,QAAAkQ,QAAA,GACrB,OACAhL,EAAAiL,IAAA,SAAApF,GAAuD,MAAAA,GAAAmF,QAAA,KAAuBE,KAAA,UAC9EpX,EAAAqX,WAAAjX,OAAAmH,KAAAnG,EAAAoG,gBAAAR,OACAhH,EAAAiP,UAAA7N,EAAA6N,UAAAqC,WACAtR,EAAAsX,YAAA,WAAsClW,EAAA2S,eAAA,aAAA3S,EAAAqR,gBAAA,IACtCzS,EAAAuX,YAAA,WAAsCnW,EAAA0S,eAAA,aAAA1S,EAAAwR,gBAAA,IACtC5S,EAAAwX,aAAA,WAAuCpW,EAAA+G,gBAAA,aAAA/G,EAAA6G,iBAAA,IACvCjI,EAAAyX,oBAAArW,EAAAqW,oBACArW,EAAAqW,oBAAAzP,EAAA,KAAA5G,EAAAqW,oBAAAvP,EAAA,GACAlI,EAAA0X,KAAA,aAA+BtW,EAAAiH,MAAA,eAAAjH,EAAAgH,OAAA,IAC/BpI,EAAA2X,MAAA,SAAgCvW,EAAAuW,MAAA3P,EAAA,UAAA5G,EAAAuW,MAAAzP,EAAA,IAChClI,EAAA4X,MAAAxW,EAAAyW,WACA,SAAiCzW,EAAAyW,WAAA7P,EAAA,UAAA5G,EAAAyW,WAAA3P,EAAA,IAAjC,GACAlI,EAAA8X,SAAA1W,EAAA8O,aAAAlJ,OACAhH,EAAA+X,SAAA3W,EAAA2W,SACA/X,EAAAsV,SAAAlU,EAAAkU,SACAlU,EAAA+R,cACAnT,EAAAyN,YAAArM,EAAA+R,YAAA1F,YACAzN,EAAAuM,SAAAnL,EAAA+R,YAAA5G,SACAvM,EAAAyP,gBAAArO,EAAA+R,YAAA1D,gBACAzP,EAAA0P,aAAAtO,EAAA+R,YAAAzD,aACA1P,EAAAyB,QAAAL,EAAA+R,YAAA1R,QACAzB,EAAAgY,YAAA5W,EAAA+R,YAAA6E,YACAhY,EAAAsE,MAAAlD,EAAA+R,YAAA7O,MACAtE,EAAAiO,KAAA7M,EAAA+R,YAAAlF,MAEA7M,EAAAkH,IAAAmI,OACArQ,OAAAmH,KAAAvH,GAAAiC,QAAA,SAAAiE,EAAA4L,GACA,GAAAhS,GAAAoG,EAAA,KAAAlG,EAAAkG,EAEA9E,GAAAkH,IAAAO,UAAA,2BACAgC,EAAA2H,EAFA,MAEAV,EAAA,IAFA,IAGA1Q,EAAAkH,IAAAO,UAAA,mBACAkC,EAAAjL,EAAA0S,EAAA,EAAAY,EAJA,GAIAtB,KAEA1Q,EAAAkH,IAAAqJ,cAiBAvQ,EAAAqD,cAAA,iBACArD,EAAAkH,IAAAqJ,eAGCnQ,MAAAtC,EAAA+B,MAAA9B,EAAAD,QAAAgC,ILkjBK,SAAU/B,EAAQD,EAASM,GM97CjC,GAAAyB,GAAAC,CAEAD,UA88BCE,MA98BDD,EAAA,WACA,YACA,iBAAAE,GAUA,QAAA6W,GAAAC,EAAAC,GACA,GAAApX,EACA,gBAAAmX,GAAA,KAAAA,EAA6DC,EAC7D,IAAA3S,KAAA0S,IACAnX,EAAAqX,WAAAF,EAAA,IACAC,GAAA,IAAApX,IAEAqX,WAAAF,EAAA,IAhBA,GAOAG,GAPAC,GAA0BtQ,EAAA,EAAAE,EAAA,EAAA8G,UAAA,EAAAE,WAAA,GAC1BqJ,GAA8BrJ,WAAA,EAAAF,UAAA,GAC9BwJ,GAA0BtJ,WAAA,EAAAF,UAAA,GAC1ByJ,EAAA,EACAC,EAAA,EACAC,GAAA,EACAC,GAAA,EAEAC,EAAA,CAUAzX,GAAA0X,YAAA,SAAAhU,GACA,GAAAiU,GAAA3X,EAAA4X,OAAAC,wBACA/N,GACAlD,EAAAlD,EAAAoU,QAAA,GAAAC,QAAAJ,EAAAK,KACAlR,EAAApD,EAAAoU,QAAA,GAAAG,QAAAN,EAAAO,IAMA,OAJAlY,GAAA4R,cACA9H,EAAAlD,GAAA5G,EAAA6G,iBACAiD,EAAAhD,GAAA9G,EAAA+G,kBAGAH,EAAAkD,EAAAlD,EACAE,EAAAgD,EAAAhD,EACA6Q,SAGA3X,EAAAmY,aAAA,WACAd,GAAAH,EAAApJ,WAAAsJ,EAAAtJ,aAAAoJ,EAAAnN,EAAAqN,EAAArN,GACAuN,GAAAJ,EAAAtJ,UAAAwJ,EAAAxJ,YAAAsJ,EAAAnN,EAAAqN,EAAArN,GACAqN,GACAtJ,WAAAoJ,EAAApJ,WACAF,UAAAsJ,EAAAtJ,UACA7D,EAAAoI,YAAAC,MAAA,KAGApS,EAAAoY,UAAA,SAAA1U,GACA,kBACA2U,cAAArY,EAAAsY,iBACA,IAAAxO,GAAA9J,EAAA0X,YAAAhU,EACA6U,MAAAC,IAAAtB,EAAAtQ,GAAA2R,KAAAC,IAAAtB,EAAApQ,GAAA9G,EAAAE,WAAAuY,gBACAlB,EAAAvX,EAAA0Y,UAAA5O,EAAAlD,EAAAkD,EAAAhD,GACA9G,EAAA2Y,UAAAjV,EAAAoG,GACA9J,EAAA4Y,UAAAlV,EAAAoG,GACA9J,EAAA2Y,UAAAjV,EAAAoG,GACA9J,EAAAoD,UAIApD,EAAA6Y,WAAA,SAAAnV,GACA6T,GAAA,EACAvX,EAAAyW,WAAAzW,EAAA0X,YAAAhU,GACA8T,EAAAxX,EAAA0Y,UAAA1Y,EAAAyW,WAAA7P,EAAA5G,EAAAyW,WAAA3P,GAAA,GACA9G,EAAAqD,cAAA,cAAkDyV,YAAApV,EAAA8C,KAAAxG,EAAAwX,iBAClDxX,EAAA+Y,gBAAArV,GACAA,EAAAsV,iBACAhZ,EAAAiZ,kBACAnL,WAAA9N,EAAA6N,UAAAC,WACAF,UAAA5N,EAAA6N,UAAAD,UACA7D,EAAAoI,YAAAC,MAAA,KAEA8E,GACAtQ,EAAA5G,EAAAyW,WAAA7P,EACAE,EAAA9G,EAAAyW,WAAA3P,EACAgH,WAAA9N,EAAA6N,UAAAC,WACAF,UAAA5N,EAAA6N,UAAAD,UACA7D,EAAA,GAEA/J,EAAAkZ,UAAAxV,GACAyV,aAAAnZ,EAAAoZ,cACAf,cAAArY,EAAAsY,kBACAtY,EAAAoZ,aAAAC,WAAArZ,EAAAoY,UAAA1U,GAAA1D,EAAAE,WAAAoZ,mBACAtZ,EAAAsY,iBAAAiB,YAAAvZ,EAAAmY,aAAA,IACAnY,EAAAwZ,oBAAA,EACAC,SAAAC,KAAAC,iBAAA,YAAA3Z,EAAAkZ,WAAyEU,SAAA,IACzEH,SAAAC,KAAAC,iBAAA,WAAA3Z,EAAA6Z,UAAA,GACAJ,SAAAC,KAAAC,iBAAA,cAAA3Z,EAAA8Z,aAAA,KAEA9Z,EAAA+Z,OAAA,SAAAhQ,EAAAR,EAAA5K,EAAAC,GACA,MAAAD,IAAAoL,EAAAnL,IAAA,EAAAmL,GAAAR,GAEAvJ,EAAAga,kBAAA,WACA,IAAAha,EAAA4X,SAAA5X,EAAA6N,UAAAoM,SAA2D,MAAApI,uBAAA7R,EAAAga,kBAC3D,IAAApT,GACAE,EAGAiD,EAFA1K,EAAA8S,YAAAC,MAAA,IACAxT,EAAAoB,EAAAE,WAAAga,gCAAA,GAIA,IAFAhD,EAAAnN,EAAAmN,EAAAnN,GAAA1K,EAAAT,GACAmL,EAAA1K,EAAA6X,EAAAnN,EAAA,GACA,GAAA/J,EAAAwZ,oBAAA/B,EAAA,IAIA,MAHAA,GAAA,EACAzX,EAAAwZ,oBAAA,OACArC,GAAkCrJ,YAAA,EAAAF,WAAA,GAGlC6J,IAAA,EACA7Q,EAAA5G,EAAA+Z,OAAAhQ,EAAAmN,EAAApJ,YAAAqJ,EAAArJ,WAAAlP,GACAkI,EAAA9G,EAAA+Z,OAAAhQ,EAAAmN,EAAAtJ,WAAAuJ,EAAAvJ,UAAAhP,GACAoB,EAAA6N,UAAAoM,SAAArT,EAAAE,GACA+K,sBAAA7R,EAAAga,oBAEAha,EAAA6Z,SAAA,SAAAnW,GACA,IAAA1D,EAAAqD,cAAA,YAAgDyV,YAAApV,IAAhD,CACA,GAAAyW,GAAA5B,KAAAC,IAAAtB,EAAAtQ,GAAA2R,KAAAC,IAAAtB,EAAApQ,GAAA9G,EAAAE,WAAAuY,cACA3O,GACAlD,EAAA5G,EAAAyW,WAAA7P,EAAAsQ,EAAAtQ,EACAE,EAAA9G,EAAAyW,WAAA3P,EAAAoQ,EAAApQ,GAEAN,EAAAxG,EAAA0Y,UAAA5O,EAAAlD,EAAAkD,EAAAhD,EACA9G,GAAA2W,WACAY,EACAvX,EAAAoa,QAAA1W,EAAA1D,EAAAyW,YACa0D,IACb3T,EAAA2F,OACAnM,EAAAqa,YAAA7T,EAAA6F,YAAA7F,EAAA2E,WAEAnL,EAAA4Y,UAAAlV,EAAA1D,EAAAyW,YACAzW,EAAAoa,QAAA1W,EAAA1D,EAAAyW,YACAzW,EAAAsa,MAAA5W,EAAA1D,EAAAyW,cAGAc,GAAA,EACAkC,SAAAC,KAAAa,oBAAA,YAAAva,EAAAkZ,WAA4EU,SAAA,IAC5EH,SAAAC,KAAAa,oBAAA,WAAAva,EAAA6Z,UAAA,GACAJ,SAAAC,KAAAa,oBAAA,cAAAva,EAAA8Z,aAAA,GACAX,aAAAnZ,EAAAoZ,cACAf,cAAArY,EAAAsY,kBACAtY,EAAAmY,eACAhB,EAAArJ,WAAAuJ,EAAArX,EAAAE,WAAAsa,yBACArD,EAAAvJ,UAAA0J,EAAAtX,EAAAE,WAAAsa,yBACAxa,EAAAwZ,oBAAA,EACA,IAAA/B,GAAA,WAAArT,KAAAoT,EAAAtU,QAAAiX,GACAna,EAAAga,uBAGAha,EAAAkZ,UAAA,SAAAxV,GACA,GAAA9E,GAAAoB,EAAA0X,YAAAhU,EACA1D,GAAAqD,cAAA,aAAiDyV,YAAApV,EAAA8C,KAAAxG,EAAA+R,gBACjD/R,EAAA+Y,gBAAArV,GACAA,EAAAsV,iBACAhZ,EAAA2W,WACAO,GACAtQ,EAAAhI,EAAAgI,EAAA5G,EAAAyW,WAAA7P,EACAE,EAAAlI,EAAAkI,EAAA9G,EAAAyW,WAAA3P,EACAgH,WAAA9N,EAAA6N,UAAAC,WACAF,UAAA5N,EAAA6N,UAAAD,UACA7D,EAAA,GAEA,mBAAA3F,KAAAoT,EAAAtU,OACAlD,EAAA6N,UAAAD,UAAA5N,EAAA6N,UAAAiH,cAAAlW,EAAAkI,EAAA9G,EAAAgH,QACa,qBAAA5C,KAAAoT,EAAAtU,OACblD,EAAA6N,UAAAC,WAAA9N,EAAA6N,UAAAuH,aAAAxW,EAAAgI,EAAA5G,EAAAiH,OACasQ,GACbvX,EAAA2Y,UAAAjV,EAAA9E,GACAoB,EAAAoD,QAEA,IAAAqU,GACAzX,EAAA6N,UAAAoM,SAAAja,EAAAiZ,iBAAAnL,WAAAoJ,EAAAtQ,EACA5G,EAAAiZ,iBAAArL,UAAAsJ,EAAApQ,MAIA9G,EAAA8Z,YAAA,SAAApW,GACA1D,EAAAqD,cAAA,eAAmDyV,YAAApV,EAAA8C,KAAAxG,EAAA+R,eACnD/R,EAAA2W,WACA3W,EAAA6Z,SAAAnW,GACA6T,GAAA,EACAkC,SAAAC,KAAAa,oBAAA,YAAAva,EAAAkZ,WAA4EU,SAAA,IAC5EH,SAAAC,KAAAa,oBAAA,WAAAva,EAAA6Z,UAAA,GACAJ,SAAAC,KAAAa,oBAAA,cAAAva,EAAA8Z,aAAA,KAGA9Z,EAAA+Y,gBAAA,SAAArV,GAA6CA,EAAAqV,mBAC7C/Y,EAAA2Z,iBAAA,SAAAzM,EAAAuN,GACAza,EAAA0a,OAAAxN,GAAAlN,EAAA0a,OAAAxN,OACAlN,EAAA0a,OAAAxN,GAAA6B,QAAA0L,IAEAza,EAAAua,oBAAA,SAAArN,EAAAuN,IACAza,EAAA0a,OAAAxN,QAAArM,QAAA,SAAA8Z,EAAAC,GACAH,IAAAE,GACA3a,EAAA0a,OAAAxN,GAAA2N,OAAAD,EAAA,MAIA5a,EAAAqD,cAAA,SAAA6J,EAAAxJ,GAEA,QAAAsV,KACA8B,GAAA,EAFA,GAAAA,EAIA,IAAA9a,EAAA0a,OAAAxN,GAMA,MALAlN,GAAA0a,OAAAxN,GAAArM,QAAA,SAAA4Z,GACA/W,EAAAwD,IAAAlH,EAAAkH,IACAxD,EAAAsV,iBACAyB,EAAAra,MAAAJ,EAAAU,MAAAgD,MAEAoX,GAEA9a,EAAA+a,iBAAA,WACA/a,EAAAgb,iBACAhb,EAAAib,yBAEAjb,EAAAiH,MAAA4P,EAAA7W,EAAAkD,MAAA+D,MAAAjH,EAAAib,wBAAAjN,aACAhO,EAAAgH,OAAA6P,EAAA7W,EAAAkD,MAAA8D,OAAAhH,EAAAib,wBAAAhN,gBAKAjO,EAAAiH,MAAAjH,EAAAkb,cAAAlN,YACAhO,EAAAgH,OAAAhH,EAAAkb,cAAAjN,cAEAjO,EAAA4X,OAAA1U,MAAA+D,MAAAjH,EAAAiH,MAAA,KACAjH,EAAA4X,OAAA1U,MAAA8D,OAAAhH,EAAAgH,OAAA,KACAhH,EAAA4X,OAAA3Q,MAAAjH,EAAAiH,MAAA/F,OAAAsR,iBACAxS,EAAA4X,OAAA5Q,OAAAhH,EAAAgH,OAAA9F,OAAAsR,kBAEAxS,EAAA6G,iBAAA7G,EAAAQ,KAAAqG,kBAAA,EACA7G,EAAA+G,gBAAA/G,EAAAQ,KAAAuG,iBAAA,GAEA/G,EAAA6E,OAAA,SAAAsW,GACA,GAEArG,GACAM,EAHAgG,EAAA,EAAApb,EAAAkD,MAAAmK,gBACAgO,EAAA,EAAArb,EAAAkD,MAAAoY,4BAGAtJ,EAAAhS,EAAAiS,yBACAb,EAAApR,EAAAkS,0BAgDA,OA5CAlS,GAAA4R,aACA5R,EAAAiH,MAAAjH,EAAA2E,WAAAqJ,YACAhO,EAAAgH,OAAAhH,EAAA2E,WAAAsJ,cAEAjO,EAAA+a,mBAEAjG,EAAA9U,EAAAsD,KAAAuS,OAAA,SAAA0F,EAAApO,GACA,MAAAoO,IACAvb,EAAAiN,MAAAR,KAAAU,EAAAnN,EAAA8I,YAAA9I,EAAAkD,MAAA6K,aACA/N,EAAAiN,MAAAkE,MAAAhE,EAAAnN,EAAA8I,YAAA,GACAsS,GACa,MACbhG,EAAApV,EAAAsS,mBAAAuD,OAAA,SAAA0F,EAAAC,GACA,MAAAA,GAAAC,OAAoCF,EACpCA,GAAAvb,EAAAiN,MAAAP,QAAA8O,EAAAxb,EAAA8I,YAAA0S,EAAAvU,OAAAjH,EAAAkD,MAAAkK,aAAAgO,GACa,MACbpb,EAAAE,WAAA4S,aACAgC,GAAA9U,EAAAkD,MAAA6K,WAAAqN,GAEApb,EAAA6N,UAAA5G,MAAAjH,EAAAiH,MAAAmK,EACApR,EAAA6N,UAAA7G,OAAAhH,EAAAgH,OAAAgL,EAAAqJ,EACArb,EAAA6N,UAAAqK,IAAAlG,EAAAqJ,EACArb,EAAA6N,UAAAmK,KAAA5G,EACApR,EAAA6N,UAAAiH,eAAA9U,EAAAkD,MAAAwO,eAAA1R,EAAA6N,UAAA7G,OACAhH,EAAA6N,UAAAuH,cAAApV,EAAAkD,MAAAwO,eAAA1R,EAAA6N,UAAA5G,MACAjH,EAAA6N,UAAA6N,eAAA1b,EAAA6N,UAAA5G,MA1BA,KA2BAjH,EAAA6N,UAAAuH,YAAApV,EAAA6N,UAAA5G,MA3BA,IA4BAjH,EAAA6N,UAAAsH,eAAAnV,EAAA6N,UAAA5G,MACAjH,EAAA6N,UAAA6N,cACA1b,EAAAkD,MAAAwO,eACA1R,EAAA6N,UAAA8N,gBAAA3b,EAAA6N,UAAA7G,OAhCA,KAiCAhH,EAAA6N,UAAAiH,cAAA9U,EAAA6N,UAAA7G,OAjCA,KAkCAhH,EAAA6N,UAAAgH,gBAAA7U,EAAA6N,UAAA7G,OACAhH,EAAA6N,UAAA8N,eACA3b,EAAAkD,MAAAwO,eACA1R,EAAA6N,UAAAsH,eAAAoD,KAAAqD,IAAA5b,EAAA6N,UAAAsH,eAAAnV,EAAAkD,MAAA2Y,qBACA7b,EAAA6N,UAAAgH,gBAAA0D,KAAAqD,IAAA5b,EAAA6N,UAAAgH,gBAAA7U,EAAAkD,MAAA2Y,qBACA7b,EAAA8b,KAAA9b,EAAAsN,YAAA1H,OAAA,EAAA5F,EAAAE,WAAA6b,kBACA/b,EAAAgc,kBACAhc,EAAAic,QAAA,GACAd,GACAnb,EAAAoD,MAAA,GAEApD,EAAAqD,cAAA,cACA,GAEArD,EAAAic,OAAA,SAAAvY,EAAAwY,GACA,GAAAtc,GAAAI,EAAAsS,mBACA8I,EAAA,EAAApb,EAAAkD,MAAAmK,eAKA,KAJArN,EAAA2S,eAAA,EACA3S,EAAA0S,eAAA,EACA1S,EAAAqR,gBAAA,EACArR,EAAAwR,gBAAA,EACAxR,EAAA0S,eAAA1S,EAAA6N,UAAAD,WAAA5N,EAAA2S,eAAA3S,EAAAsD,KAAAsC,QACA5F,EAAA0S,iBACA1S,EAAAiN,MAAAR,KAAAzM,EAAAsD,KAAAtD,EAAA2S,gBAAA3S,EAAA8I,YAAA9I,EAAAkD,MAAA6K,aACA/N,EAAAiN,MAAAkE,MAAAnR,EAAAsD,KAAAtD,EAAA2S,gBAAA3S,EAAA8I,YAAA,GACAsS,EACApb,EAAA2S,gBAAA,CAEA,MAAA3S,EAAAwR,gBAAAxR,EAAA6N,UAAAC,YAAA9N,EAAAqR,gBAAAzR,EAAAgG,QACA5F,EAAAwR,iBACAxR,EAAAiN,MAAAP,QAAA9M,EAAAI,EAAAqR,iBAAArR,EAAA8I,YAAAlJ,EAAAI,EAAAqR,iBAAApK,MACAjH,EAAAqR,iBAAA,CAEArR,GAAAsD,KAAAsC,OAAA,IACA5F,EAAAqR,gBAAAkH,KAAAqD,IAAA5b,EAAAqR,gBAAA,KACArR,EAAAwR,gBAAA+G,KAAAqD,IAAA5b,EAAAwR,iBACAxR,EAAAiN,MAAAP,QAAA9M,EAAAI,EAAAqR,iBAAArR,EAAA8I,YAAAlJ,EAAAI,EAAAqR,iBAAApK,OAAA,GACAjH,EAAA2S,eAAA4F,KAAAqD,IAAA5b,EAAA2S,eAAA,KACA3S,EAAA0S,eAAA6F,KAAAqD,IAAA5b,EAAA0S,gBACA1S,EAAAiN,MAAAR,KAAAzM,EAAAsD,KAAAtD,EAAA2S,gBAAA3S,EAAA8I,YAAA9I,EAAAkD,MAAA6K,aACA/N,EAAAiN,MAAAkE,MAAAnR,EAAAsD,KAAAtD,EAAA2S,gBAAA3S,EAAA8I,YAAA,OAEA9I,EAAAiK,iBACAiS,GACAlc,EAAAoD,MAAA,GAIAyO,sBAAA7R,EAAAgc,iBACAhc,EAAAqD,cAAA,UAA0C6U,IAAAlY,EAAA6N,UAAAD,UAAAoK,KAAAhY,EAAA6N,UAAAC,cAE1C9N,EAAA2Y,UAAA,SAAAjV,EAAAyY,GACA,IAAAnc,EAAAoc,cAAApc,EAAAqc,MAAA,CAGArc,EAAAuW,MAAA4F,GAAAnc,EAAAsc,YAAA5Y,EACA,IACAnF,GAEAge,EACAC,EAIAC,EARAC,EAAAhZ,EAAAiZ,YAAAjZ,EAAAkZ,SAAA5c,EAAAE,WAAA2c,wBAEAjd,EAAAI,EAAA8c,YAGAlW,EAAA5G,EAAAuW,MAAA3P,EACAE,EAAA9G,EAAAuW,MAAAzP,EACA/H,EAAAiB,EAAA0Y,UAAA9R,EAAAE,GAEAoG,GAAsB4L,YAAApV,EAAA8C,KAAAzH,EAAA6H,IAAAE,KACtBiW,EAAA/c,EAAA+R,WAKA,IAJAoH,aAAAnZ,EAAAgd,aACAhd,EAAAid,UAAgCrW,IAAAE,QAChC9G,EAAA2W,UAAA,IAEA3W,EAAAqD,cAAA,YAAA6J,KAGAnO,GAAAiB,EAAA+R,cAAA/R,EAAA+R,YAAA5G,WAAApM,EAAAoM,UACAnL,EAAA+R,YAAA1F,cAAAtN,EAAAsN,eACArM,EAAAkd,qBAAA,EACAhQ,EAAA1G,KAAAuW,EACA/c,EAAAqD,cAAA,eAAA6J,GACAA,EAAA1G,KAAAzH,EACAiB,EAAAqD,cAAA,gBAAA6J,IAEAlN,EAAA+R,YAAAhT,EACAiB,EAAA2W,UAAA,CAIA,GADA3W,EAAAkM,WACAlM,EAAAmd,cACApe,IACA,IAAAiB,EAAAod,YAAApR,QAAAjN,EAAAsB,WACAL,EAAAqd,SAAAte,EACAiB,EAAAkU,SAAAnV,EAAA6X,YACA5W,EAAA4X,OAAA1U,MAAAoa,OAAAve,EAAAsB,QACA,SAAAtB,EAAAsB,SAAAtB,EAAAuE,OACAtD,EAAA4X,OAAA1U,MAAAoa,OAAA,UACAtd,EAAAkM,OAAAnN,EAAAuE,KAAAtD,EAAA8I,YAAA/J,EAAAsN,eAEArM,EAAAud,WAAAvd,EAAA4T,gBACA,SAAA7U,EAAAsB,SACAtB,EAAAuE,MAAA,CA4CA,GA3CAkZ,EAAAxc,EAAAwd,qBACAf,GACA7V,EAAA2R,KAAAC,IAAAxY,EAAAyd,UAAA7W,KACAE,EAAAyR,KAAAC,IAAAxY,EAAAyd,UAAA3W,OAEA,IAAA9G,EAAA0d,gBAAArR,aAAA3I,EAAAia,WACA3d,EAAA0d,iBACAvS,SAAAnL,EAAAoM,WAAAjB,SACAkB,YAAArM,EAAAoM,WAAAC,cAGAkQ,GACArE,IAAAK,KAAAqF,IAAA5d,EAAA0d,gBAAAvS,SAAApM,EAAAoM,UACA6M,KAAAO,KAAAqF,IAAA5d,EAAA0d,gBAAArR,YAAAtN,EAAAsN,aACAwR,OAAAtF,KAAAqD,IAAA5b,EAAA0d,gBAAAvS,SAAApM,EAAAoM,UACA2S,MAAAvF,KAAAqD,IAAA5b,EAAA0d,gBAAArR,YAAAtN,EAAAsN,eAEA,IAAArM,EAAA0d,gBAAArR,cACAkQ,EAAAvE,MAAA,EACAuE,EAAAuB,MAAAle,EAAAgG,OAAA,EACA2W,EAAArE,IAAAK,KAAAqF,IAAApB,EAAAtE,IAAAnZ,EAAAoM,UACAoR,EAAAsB,OAAAtF,KAAAqD,IAAAY,EAAAqB,OAAA9e,EAAAoM,WAEAnL,EAAA0d,gBAAAvS,WAAApM,EAAAoM,UACAnL,EAAA0d,gBAAArR,cAAAtN,EAAAsN,cACArM,EAAA+d,iBAAA,IAEA/d,EAAAkd,qBAAA,IAAAT,EAAA7V,GAAA,IAAA6V,EAAA3V,GAAA,QAAA9G,EAAAE,WAAAgT,iBACA,QAAAlT,EAAAE,WAAAgT,gBAAA,IAAAlT,EAAA0d,gBAAArR,YACArM,EAAAge,UAAAjf,EAAAoM,SAAAuR,EAAA,SAEA1c,EAAAie,wBAAAle,KAAAhB,EAAAoM,UAKAnL,EAAA+L,WAAAhN,EAAAoM,UAAAnL,EAAA+L,WAAAhN,EAAAoM,eACA,IAAAnL,EAAA+L,WAAAhN,EAAAoM,UAAAa,QAAAjN,EAAAsN,cACArM,EAAA+L,WAAAhN,EAAAoM,UAAA1G,KAAA1F,EAAAsN,cANArM,EAAA+L,WAAAhN,EAAAoM,YAAA,IAAAnL,EAAA+L,WAAAhN,EAAAoM,UAAAa,QAAAjN,EAAAsN,cACArM,EAAA+L,WAAAhN,EAAAoM,UAAA0P,OAAA7a,EAAA+L,WAAAhN,EAAAoM,UAAAa,QAAAjN,EAAAsN,aAAA,MAUArM,EAAAke,iBAAA3B,EAAArE,MAAAlY,EAAAke,gBAAAhG,KACAqE,EAAAvE,OAAAhY,EAAAke,gBAAAlG,MACAuE,EAAAsB,SAAA7d,EAAAke,gBAAAL,QACAtB,EAAAuB,QAAA9d,EAAAke,gBAAAJ,OAAApB,GAGA,GAFA1c,EAAA+L,cACAyQ,EAAAD,EACA,QAAAvc,EAAAE,WAAAgT,cACA,IAAA3U,EAAAie,EAAAtE,IAAiD3Z,GAAAie,EAAAqB,OAAqBtf,GAAA,EACtEyB,EAAAge,UAAAzf,GAAA,eAGAyB,GAAAme,WAAA3B,GAAA,EAGAxc,GAAAoe,eAAA1a,EAAAkD,EAAAE,EAAA4V,GAGA1c,EAAAkd,qBAAA,EACAld,EAAAoD,MAAA,MAEApD,EAAAsa,MAAA,SAAA5W,EAAAyY,GASA,QAAAkC,KACAC,GACAte,EAAAqD,cAAA,oBACAkb,aAAAve,EAAAwe,kBACAzS,WAAA/L,EAAA+L,WACAmS,gBAAAle,EAAAke,kBAbA,GAAA3f,GACA+f,EACA5B,EAAAhZ,EAAAiZ,YAAAjZ,EAAAkZ,SAAA5c,EAAAE,WAAA2c,wBACA/S,EAAAqS,GAAAnc,EAAAsc,YAAA5Y,EAEA,IADA1D,EAAA+R,YAAA/R,EAAA0Y,UAAA5O,EAAAlD,EAAAkD,EAAAhD,OACA/G,KAAAC,EAAA+R,YAAAnC,KAAA,CAcA,GAHA5P,EAAAqc,OACArc,EAAAye,UAEAze,EAAA+d,gBAEA,YADA/d,EAAA+d,iBAAA,EAIA,IADAxf,EAAAyB,EAAA+R,aACA/R,EAAAqD,cAAA,SAA6CyV,YAAApV,EAAA8C,KAAAxG,EAAA+R,eAC7C/R,EAAA2W,SAAA,CAGA,YAAA3W,EAAA+R,YAAA1R,QAAA,CACA,kBAAAL,EAAA+R,YAAA7O,MAIA,MAHAlD,GAAAyT,MAAAzT,EAAA8I,SAAA,MAAA9I,EAAA0e,QAAA5a,QACA9D,EAAA2e,gBACAN,IAGA,yBAAAre,EAAA+R,YAAA7O,MAAA,CACA,YAAAlD,EAAAE,WAAA0e,0BAQA,MAPA5e,GAAA8P,UAAAvR,EAAA8M,OAAAxM,KACAmB,EAAAgI,eAAA,QAAAhI,EAAAgI,eAAA,aAEAhI,EAAAgI,eAAA,MAEAhI,EAAAyT,MAAAlV,EAAA8M,OAAAxM,KAAAmB,EAAAgI,oBACAqW,IAGA,eAAAre,EAAAE,WAAA0e,0BAIA,MAHA5e,GAAA6e,aAAAtgB,EAAA8M,OAAAqF,MAAAgM,EAAAhZ,EAAAia,UAAA,GACAU,QACAre,GAAAoD,OAQA,IAJA,yCAAA4I,QAAAhM,EAAA+R,YAAA7O,QAAAwZ,GACA1c,EAAA8e,cAAAvgB,EAAA8N,YAAA9N,EAAA4M,UAEAnL,EAAA+L,WAAAxN,EAAA4M,UAAAnL,EAAA+L,WAAAxN,EAAA4M,cACA,QAAAnL,EAAAE,WAAAgT,eAAA,kBAAAlT,EAAA+R,YAAA7O,MAAA,CACA,qBAAAlD,EAAA+R,YAAA7O,OACAlD,EAAAE,WAAAqP,MAAAzF,EAAAlD,EAAA,GACAkD,EAAAlD,EAAA5G,EAAA+R,YAAAnL,EAAA5G,EAAAkD,MAAA6F,eACA/I,EAAAkD,MAAAyF,oBACA3I,EAAAkD,MAAA+F,qBAAAjJ,EAAAkD,MAAA6b,sBACAjV,EAAAhD,EAAA9G,EAAA+R,YAAAjL,EAAA9G,EAAAkD,MAAA8F,gBACAhJ,EAAAkD,MAAA0F,mBAAA5I,EAAAkD,MAAA6b,sBACAjV,EAAAhD,EAAA,EAEA,WADA9G,GAAAgf,WAAAzgB,EAAA4M,SAGAmT,IAAA,EACAte,EAAAge,UAAAzf,EAAA4M,SAAAuR,EAAA,SAEAhZ,EAAAia,WAAAjB,IACA1c,EAAAke,gBAAAle,EAAAwd,qBACAxd,EAAAme,eAAApe,IAAA,IAGAse,IACAre,EAAAoD,MAAA,MAEApD,EAAAif,iBAAA,SAAAvb,GACA,GAAAoG,GAAAlD,EAAAE,CAUA,OATAgD,GAAA9J,EAAAsc,YAAA5Y,GACAkD,EAAA5G,EAAAkf,sBAAApV,EAAAlD,EAAA5G,EAAAyd,UAAA7W,EACAE,EAAA9G,EAAAmf,uBAAArV,EAAAhD,EAAA9G,EAAAyd,UAAA3W,EACAF,EAAA5G,EAAAkD,MAAAkc,iBACAxY,EAAA5G,EAAAkD,MAAAkc,gBAEAtY,EAAA9G,EAAAkD,MAAAmc,eACAvY,EAAA9G,EAAAkD,MAAAmc,eAEArf,EAAAqD,cAAA,gBAAoDuD,IAAAE,IAAAqW,aAAAnd,EAAAmd,iBACpDnd,EAAA6N,UAAAC,WAAA9N,EAAA6N,UAAAuH,YAAApV,EAAAE,WAAAof,kBACA,cAAAtf,EAAAkU,WACAlU,EAAA6E,QAAA,GACA7E,EAAA6N,UAAAC,YAAAlH,GAEA,cAAA5G,EAAAkU,UACAlU,EAAAiN,MAAAP,QAAA,kBAAA1M,EAAAmd,aAAA9R,OAAAnI,MACA,aAAAlD,EAAAmd,aAAA9R,OAAArL,EAAA8I,WAAAlC,GACA,mCAAAoF,QAAAhM,EAAAmd,aAAA9R,OAAAnI,QACAlD,EAAA6E,QAAA,OAEA7E,GAAAuf,oBAGA,cAAAvf,EAAAkU,UACAlU,EAAAmd,aAAA/O,QACApO,EAAAiN,MAAAkE,MAAAnR,EAAAmd,aAAA7Z,KAAAtD,EAAA8I,WAAAhC,EACiB9G,EAAAE,WAAAsf,gBACjBxf,EAAAkD,MAAA6K,WAAAjH,EAEA9G,EAAAiN,MAAAR,KAAAzM,EAAAmd,aAAA7Z,KAAAtD,EAAA8I,WAAAhC,EAEA9G,EAAAqD,cAAA,aAAiD8J,IAAArG,QACjD9G,GAAAuf,yBAGAvf,EAAAiK,oBAEAjK,EAAAyf,eAAA,WACAzf,EAAA6E,SACA4U,SAAAC,KAAAa,oBAAA,YAAAva,EAAAif,kBAAA,GACAxF,SAAAC,KAAAa,oBAAA,UAAAva,EAAAyf,gBAAA,GACAzf,EAAA0f,iBACA1f,EAAAoD,MAAA,GACApD,EAAA+d,iBAAA,GAEA/d,EAAA2f,WAAA,SAAAjc,GACA,GAAAoG,GAAA9J,EAAAsc,YAAA5Y,EAUA,OATA1D,GAAAE,WAAA0f,mBAAA5f,EAAAqW,sBACA,oDAAArK,QAAAhM,EAAA6f,mBACA7f,EAAAqW,oBAAAzP,GAAAlD,EAAAoc,UACA9f,EAAAqW,oBAAAvP,GAAApD,EAAAqc,UACA/f,EAAAqW,oBAAAzP,EAAA2R,KAAAqF,IAAA5d,EAAAiH,MAAAjH,EAAAkD,MAAAwO,eAAA6G,KAAAqD,IAAA,EAAA5b,EAAAqW,oBAAAzP,IACA5G,EAAAqW,oBAAAvP,EAAAyR,KAAAqF,IAAA5d,EAAAgH,OAAAhH,EAAAkD,MAAAwO,eAAA6G,KAAAqD,IAAA,EAAA5b,EAAAqW,oBAAAvP,IACAgD,EAAA9J,EAAAqW,qBAEArW,EAAAggB,WAAAhgB,EAAA0Y,UAAA5O,EAAAlD,EAAAkD,EAAAhD,GAAAzG,QACA,0BAAAL,EAAAggB,YAAA,0BAAAhgB,EAAA6f,iBACA7f,EAAA6f,gBAAA,wBACA7f,EAAAyd,UAAA3T,EACA9J,EAAAigB,YAAAjI,KAAAhY,EAAA6N,UAAAC,eACAqL,cAAAnZ,EAAAgd,cAGA,wBAAAhd,EAAAggB,YAAA,wBAAAhgB,EAAA6f,iBACA7f,EAAA6f,gBAAA,sBACA7f,EAAAyd,UAAA3T,EACA9J,EAAAigB,YAAA/H,IAAAlY,EAAA6N,UAAAD,cACAuL,cAAAnZ,EAAAgd,eAGA,wBAAAhd,EAAA6f,iBACA,wBAAA7f,EAAAggB,aACAhgB,EAAAggB,WAAA,uBAEA,0BAAAhgB,EAAA6f,iBACA,0BAAA7f,EAAAggB,aACAhgB,EAAAggB,WAAA,yBAEA7G,aAAAnZ,EAAAgd,mBACA,IAAAhd,EAAAod,YAAApR,QAAAhM,EAAAggB,cAGA,wBAAAhgB,EAAAggB,WACAhgB,EAAA6N,UAAAD,UAAA5N,EAAAigB,YAAA/H,KAAApO,EAAAhD,EAAA9G,EAAAyd,UAAA3W,GACA9G,EAAA6N,UAAA8N,eACa,wBAAA3b,EAAAggB,YACbhgB,EAAA6N,UAAAD,WAAA5N,EAAA8b,KAAA9b,EAAAkD,MAAA6K,WACA/N,EAAAgd,YAAA3D,WAAArZ,EAAA2f,WAAA3f,EAAAE,WAAAggB,iBAAAxc,IACa,2BAAA1D,EAAAggB,aACbhgB,EAAA6N,UAAAD,WAAA5N,EAAA8b,KAAA9b,EAAAkD,MAAA6K,WACA/N,EAAAgd,YAAA3D,WAAArZ,EAAA2f,WAAA3f,EAAAE,WAAAggB,iBAAAxc,IAEA,0BAAA1D,EAAAggB,WACAhgB,EAAA6N,UAAAC,WAAA9N,EAAAigB,YAAAjI,MAAAlO,EAAAlD,EAAA5G,EAAAyd,UAAA7W,GACA5G,EAAA6N,UAAA6N,cACa,4BAAA1b,EAAAggB,YACbhgB,EAAA6N,UAAAC,YAAA9N,EAAAE,WAAAigB,yBACAngB,EAAAgd,YAAA3D,WAAArZ,EAAA2f,WAAA3f,EAAAE,WAAAggB,iBAAAxc,IACa,2BAAA1D,EAAAggB,aACbhgB,EAAA6N,UAAAC,YAAA9N,EAAAE,WAAAigB,yBACAngB,EAAAgd,YAAA3D,WAAArZ,EAAA2f,WAAA3f,EAAAE,WAAAggB,iBAAAxc,QAGA1D,EAAAogB,eAAA,WACAjH,aAAAnZ,EAAAgd,aACAvD,SAAA4G,iBACA5G,SAAA4G,kBAEA5G,SAAAC,KAAAa,oBAAA,YAAAva,EAAA2f,YAAA,IAEA3f,EAAAsgB,YAAA,SAAA5c,GACA,GAAAoG,GAAAlD,EAAAE,CACAgD,GAAA9J,EAAAsc,YAAA5Y,GACAkD,EAAAkD,EAAAlD,EAAA5G,EAAAyd,UAAA7W,EACAE,EAAAgD,EAAAhD,EAAA9G,EAAAyd,UAAA3W,GACA9G,EAAAE,WAAAqgB,uBAAA,mBAAAvgB,EAAAkU,YAGAlU,EAAAE,WAAAsgB,oBAAA,gBAAAxgB,EAAAkU,YAGAlU,EAAAqD,cAAA,cACAyV,YAAApV,EACA+c,OAAAzgB,EAAA0d,gBACAgD,OAAA1gB,EAAA+R,YACAmC,SAAAlU,EAAAkU,aAIAqE,KAAAC,IAAA5R,GAAA5G,EAAAE,WAAAygB,iBAAApI,KAAAC,IAAA1R,GAAA9G,EAAAE,WAAAygB,mBACA3gB,EAAA4T,cAAA5T,EAAA0d,gBACA1d,EAAA4gB,cAAA5gB,EAAA+R,YACA/R,EAAA4T,cAAAC,YACAjN,IACAE,KAEA9G,EAAAoe,eAAA1a,EAAAoG,EAAAlD,EAAAkD,EAAAlD,GAAA,MAGA5G,EAAA6gB,gBAAA,SAAAnd,GACA,GAAAod,IACAC,cAAA/gB,EAAAwM,OAAAC,KACAuU,iBAAAhhB,EAAAwM,OAAAE,SAEAnO,GACAwiB,cAAA,WACAC,iBAAA,eACiBhhB,EAAAkU,SACjBuF,UAAAC,KAAAa,oBAAA,YAAAva,EAAAsgB,aAAA,GACA7G,SAAAC,KAAAa,oBAAA,UAAAva,EAAA6gB,iBAAA,GACA7gB,EAAA4T,eACA5T,EAAA4gB,gBACA5gB,EAAA+d,iBAAA,EACA/d,EAAA4T,cAAArV,KAAAyB,EAAA4gB,cAAAriB,IACAyB,EAAAqD,cAAA,WACAyV,YAAApV,EACA+c,OAAAzgB,EAAA4T,cACA8M,OAAA1gB,EAAA4gB,cACA1M,SAAAlU,EAAAkU,aAEA4M,EAAA9gB,EAAAkU,UAAA2G,OAAAiG,EAAA9gB,EAAAkU,UAAAlI,QAAAhM,EAAA4T,cAAArV,IAAA,GACAuiB,EAAA9gB,EAAAkU,UAAA2G,OAAAiG,EAAA9gB,EAAAkU,UAAAlI,QAAAhM,EAAA4gB,cAAAriB,IAAA,EAAAyB,EAAA4T,cAAArV,IACAyB,EAAA0f,mBAGA1f,EAAA4T,kBAAA7T,GACAC,EAAA4gB,kBAAA7gB,GACAC,EAAAoD,MAAA,IAEApD,EAAA4Y,UAAA,SAAAlV,EAAAyY,GAEA,GADAnc,EAAAihB,oBAAAvd,EAAAgd,QACA1gB,EAAAqD,cAAA,aAAiDyV,YAAApV,EAAA8C,KAAAxG,EAAA+R,eACjD/R,EAAA2W,UAGA,IAAAjT,EAAAwd,SAAAlhB,EAAAqc,MAAA,CACA,GAAAK,GAAAhZ,EAAAiZ,YAAAjZ,EAAAkZ,OAYA,IAXA5c,EAAAyd,UAAAtB,GAAAnc,EAAAsc,YAAA5Y,GACA1D,EAAAigB,aACAjI,KAAAhY,EAAA6N,UAAAC,WACAoK,IAAAlY,EAAA6N,UAAAD,WAEA5N,EAAA0d,gBAAA1d,EAAA0Y,UAAA1Y,EAAAyd,UAAA7W,EAAA5G,EAAAyd,UAAA3W,GACA9G,EAAAie,oBAAAje,EAAA0d,gBAAA5R,SACA4Q,GAAAhZ,EAAAia,UAAA,yCACAvZ,KAAApE,EAAA0d,gBAAArd,UAAAL,EAAA+R,YAAAlG,iBACA7L,EAAA+L,gBAEA/L,EAAA0d,gBAAApR,OAAA,CAGA,QAAAtM,EAAAod,YAAApR,QAAAhM,EAAA0d,gBAAArd,SAeA,MAdAL,GAAAggB,WAAAhgB,EAAA0d,gBAAArd,QACAL,EAAA6f,gBAAA7f,EAAA0d,gBAAArd,QACAL,EAAA2f,WAAAjc,GACA1D,EAAAE,WAAA0f,oBACA,oDAAA5T,QAAAhM,EAAA6f,mBACA7f,EAAAqW,qBACAzP,EAAA5G,EAAAyd,UAAA7W,EACAE,EAAA9G,EAAAyd,UAAA3W,GAEA9G,EAAA4X,OAAAuJ,sBAEA1H,SAAAC,KAAAC,iBAAA,YAAA3Z,EAAA2f,YAAA,GACAlG,SAAAC,KAAAC,iBAAA,UAAA3Z,EAAAogB,gBAAA,QACApgB,EAAA+d,iBAAA,EAGA,aAAA/d,EAAAkU,SAKA,MAJAlU,GAAAud,WAAA,EACA,QAAAvd,EAAAE,WAAAgT,eACAlT,EAAAge,UAAAhe,EAAA0d,gBAAAvS,SAAAuR,EAAA,SAEA1c,EAAA2Y,UAAAjV,IAEA,8BAAAsI,QAAAhM,EAAAkU,YACAlU,EAAAmd,aAAAnd,EAAAqd,SACArd,EAAAmd,aAAA/O,QACApO,EAAAmf,uBAAAnf,EAAAiN,MAAAkE,MAAAnR,EAAAmd,aAAA7Z,KAAAtD,EAAA8I,WAEA9I,EAAAmf,uBAAAnf,EAAAiN,MAAAR,KAAAzM,EAAAmd,aAAA7Z,KAAAtD,EAAA8I,YAAA9I,EAAAkD,MAAA6K,WAEA/N,EAAAkf,sBAAAlf,EAAAiN,MAAAP,QAAA,kBAAA1M,EAAAmd,aAAA9R,OAAAnI,MACA,aAAAlD,EAAAmd,aAAA9R,OAAArL,EAAA8I,YAAA9I,EAAAmd,aAAAlW,MACAwS,SAAAC,KAAAC,iBAAA,YAAA3Z,EAAAif,kBAAA,GACAxF,SAAAC,KAAAC,iBAAA,UAAA3Z,EAAAyf,gBAAA,KAEA,qCAAAzT,QAAAhM,EAAAkU,YACAlU,EAAAmd,aAAAnd,EAAAqd,SACA5D,SAAAC,KAAAC,iBAAA,YAAA3Z,EAAAsgB,aAAA,GACA7G,SAAAC,KAAAC,iBAAA,UAAA3Z,EAAA6gB,iBAAA,OAGA7gB,EAAAoa,QAAA,SAAA1W,GACAyV,aAAAnZ,EAAAgd,aACAhd,EAAAkd,qBAAA,EACAld,EAAAud,cAAAxd,GACAC,EAAAmd,iBAAApd,GACAC,EAAA0d,oBAAA3d,GACAC,EAAAqD,cAAA,WAA+CyV,YAAApV,EAAA8C,KAAAxG,EAAA+R,gBAC/C/R,EAAA2W,UAAAjT,EAAAgd,SAAA1gB,EAAA4X,UAGA5X,EAAA+R,iBAAAhS,KAAAC,EAAA+R,YAAAnC,MAGA5P,EAAAoc,aAAApc,EAAAqc,QACArc,EAAAyd,WAAAzd,EAAAid,SAAAjd,EAAAyd,YACAzd,EAAAohB,aAAAC,QAEA3d,EAAAsV,oBAEAhZ,EAAAshB,QAAA,SAAA5d,GACA,GAAAnF,GACAqI,EAAA5G,EAAAoM,WAAAC,YACAvF,EAAA9G,EAAAoM,WAAAjB,SACAuR,EAAAhZ,EAAAiZ,YAAAjZ,EAAAkZ,QACA2E,EAAAvhB,EAAAsD,KAAAsC,OAAA,EACA4b,EAAAxhB,EAAAsS,mBAAA1M,OAAA,CACA,KAAA5F,EAAAqD,cAAA,WAA+CyV,YAAApV,EAAA8C,KAAAxG,EAAA+R,eAC/C/R,EAAA2W,SAAA,CAmDA,GAhDA3W,EAAA8b,KAAA9b,EAAAsN,YAAA1H,OAAA,EAAA5F,EAAAE,WAAA6b,kBACA/b,EAAAE,WAAA4S,aACAyO,GAAA,GAEA,IAAA7d,EAAA+d,SACA/d,EAAAsV,iBAGA,KAAAtV,EAAA+d,SACAzhB,EAAA+L,cACA/L,EAAAoD,MAAA,IAEasZ,GAAA,KAAAhZ,EAAA+d,QACbzhB,EAAA0hB,YAEa,KAAAhe,EAAA+d,QACb3a,GAAA,EAEa,KAAApD,EAAA+d,QACb3a,GAAA,EAEa,KAAApD,EAAA+d,SAAA/d,EAAAia,UAAA,IAAAja,EAAA+d,QACb7a,GAAA,EAEa,KAAAlD,EAAA+d,UAAA/d,EAAAia,UAAA,IAAAja,EAAA+d,QACb7a,GAAA,EAEa,KAAAlD,EAAA+d,SACb3a,GAAA9G,EAAA8b,KACApY,EAAAsV,kBAEa,KAAAtV,EAAA+d,SACb3a,GAAA9G,EAAA8b,KACApY,EAAAsV,kBAEa,KAAAtV,EAAA+d,SAAA/E,GAAA,KAAAhZ,EAAA+d,QACb3a,EAAA,EAEa,KAAApD,EAAA+d,SAAA/E,GAAA,KAAAhZ,EAAA+d,QACb3a,EAAA9G,EAAAsD,KAAAsC,OAAA,EAEa8W,GAAA,KAAAhZ,EAAA+d,QACb7a,EAAA4a,EAEa9E,GAAA,KAAAhZ,EAAA+d,UACb7a,EAAA,GAGA,KAAAlD,EAAA+d,QACA,MAAAzhB,GAAAqa,YAAAzT,EAAAE,EAGA,SAAApD,EAAA+d,QAAA,CAKA,GAJAzhB,EAAA+L,cACA/L,EAAA+L,WAAAwM,KAAAqD,IAAA9U,EAAA,OACA9G,EAAA+L,WAAAwM,KAAAqD,IAAA9U,EAAA,IAAArC,KAAAmC,GACA5G,EAAAke,gBAAAle,EAAAwd,qBACA,QAAAxd,EAAAE,WAAAgT,cACA,IAAA3U,EAAAyB,EAAAke,gBAAAhG,IAAsD3Z,GAAAyB,EAAAke,gBAAAL,OAAkCtf,GAAA,EACxFyB,EAAAge,UAAAzf,EAAAme,EAAA,aAGA1c,GAAAme,eAAApe,GAAA2c,EAIA,OAFAhZ,GAAAsV,qBACAhZ,GAAAoD,MAAA,GAGAwD,EAAA,IACAA,EAAA,GAEAE,EAAAya,IACAza,EAAAya,GAEAza,EAAA,IACAA,EAAA,GAEAF,EAAA4a,IACA5a,EAAA4a,GAGA9d,EAAAia,WAAA,kBAAA3R,QAAAtI,EAAA+d,WACAzhB,EAAA+L,WAAAwM,KAAAqD,IAAA9U,EAAA,IAAA9G,EAAA+L,WAAAwM,KAAAqD,IAAA9U,EAAA,QACA9G,EAAA+L,WAAAwM,KAAAqD,IAAA9U,EAAA,IAAArC,KAAAmC,GACA5G,EAAAke,gBAAAle,EAAAwd,qBACAxd,EAAAme,eAAApe,GAAA2c,GACA1c,EAAAoD,MAAA,IAEAwD,IAAA5G,EAAAoM,WAAAC,aAAAvF,IAAA9G,EAAAoM,WAAAjB,WACAnL,EAAA2hB,eAAA/a,IAAA5G,EAAAoM,WAAAC,YAAAzF,MAAA7G,GAAA+G,IAAA9G,EAAAoM,WAAAjB,SAAArE,MAAA/G,IACAC,EAAA8e,cAAAlY,EAAAE,IACApD,EAAAia,UAAA3d,EAAAE,WAAA0hB,6BACAlF,IACA1c,EAAA+L,eAEA/L,EAAA+L,WAAAjF,GAAA9G,EAAA+L,WAAAjF,OACA9G,EAAA+L,WAAAjF,GAAArC,KAAAmC,GACA5G,EAAAqD,cAAA,oBACAkb,aAAAve,EAAAwe,kBACAzS,WAAA/L,EAAA+L,WACAmS,gBAAAle,EAAAke,mBAGAle,EAAAoD,MAAA,MAGApD,EAAA6hB,MAAA,SAAAne,GACA1D,EAAAqD,cAAA,SAA6CyV,YAAApV,EAAA8C,KAAAxG,EAAA+R,eAC7C/R,EAAA2W,WAGA3W,EAAAohB,aAAApc,MAAA,KAEAhF,EAAA8hB,SAAA,SAAApe,GACA1D,EAAA2W,UAGA3W,EAAAqD,cAAA,YAAgDyV,YAAApV,EAAA8C,KAAAxG,EAAA+R,eAEhD/R,EAAA+hB,SAAA,SAAAre,GACA1D,EAAAqD,cAAA,YAAgDyV,YAAApV,EAAA8C,KAAAxG,EAAA+R,eAChD/R,EAAA2W,WAGA,cAAA3W,EAAA+R,YAAA1R,SACA,qBAAAL,EAAA+R,YAAA7O,MACAlD,EAAAgiB,kBAAAhiB,EAAA+R,YAAA1G,OAAAxM,MACa,cAAAmB,EAAA+R,YAAA1R,SACb,eAAAL,EAAA+R,YAAA7O,MACAlD,EAAAiiB,YACa,0BAAAjW,QAAAhM,EAAA+R,YAAA7O,QACblD,EAAAqa,YAAAra,EAAA+R,YAAA1F,YAAArM,EAAA+R,YAAA5G,YAGAnL,EAAAkiB,YAAA,SAAAxe,GACA,GAAAlF,GACAuL,EACAoY,MAAApiB,KAAA2D,EAAAye,OAAAze,EAAAoV,YAAAqJ,OAAAze,EAAAye,OACAC,MAAAriB,KAAA2D,EAAA0e,OAAA1e,EAAAoV,YAAAsJ,OAAA1e,EAAA0e,OACAC,MAAAtiB,KAAA2D,EAAA2e,UAAA3e,EAAAoV,YAAAuJ,UAAA3e,EAAA2e,SACApL,KAGAA,EAAAoC,WAAA,WACArZ,EAAAqD,cAAA,SAAiDyV,YAAApV,MAGjDA,IAAAoV,aAAApV,EACA1D,EAAAwZ,oBAAA,EACAhb,EAAAwB,EAAA6N,UAAAC,WACA/D,EAAA/J,EAAA6N,UAAAD,UACA5N,EAAA2W,WAGA,IAAA0L,IAEAD,GAAA,IAEApiB,EAAA6N,UAAAoM,SAAAkI,EAAA3jB,EAAA4jB,EAAArY,IAEAA,IAAA/J,EAAA6N,UAAAD,WAAApP,IAAAwB,EAAA6N,UAAAC,YACApK,EAAAsV,iBAEA/B,MAAAlX,KACa,KAEbC,EAAAsiB,KAAA,SAAA5e,GACA,IAAA1D,EAAAqD,cAAA,QAA4CyV,YAAApV,KAC5C1D,EAAA2W,UAAAjT,EAAA6e,cAAA,CACA,GAAA9V,MAAA+V,EAAAxiB,EAAAwe,iBACAgE,GAAA5c,OAAA,IACA4c,EAAA3hB,QAAA,SAAAsM,GACA,GAAAA,EAAA,CACA,GAAA7D,KACAtK,QAAAmH,KAAAgH,GAAAtM,QAAA,SAAAiE,GACA,UAAAqI,EAAArI,KACA,IAAAqI,EAAArI,QACA/E,KAAAoN,EAAArI,IACAqI,EAAArI,GAAA2d,QACA,MAAAnZ,GAAA7E,KAAA,IAAA0I,EAAArI,GAAA2d,QAAA,eAEAnZ,GAAA7E,KAAA0I,EAAArI,MAEAwE,EAAA0M,KAAA,KACAvJ,EAAAhI,KAAA6E,MAGA5F,EAAA6e,cAAAG,QAAA,aAAAjW,EAAAuJ,KAAA,OACAtS,EAAAsV,sBAKC5Y,MAAAtC,EAAA+B,MAAA9B,EAAAD,QAAAgC,INs8CK,SAAU/B,EAAQD,EAASM,GOt5EjC,GAAAyB,GAAAC,CAEAD,UAu7BCE,MAv7BDD,EAAA,WACA,YACA,iBAAAE,EAAA2iB,GACA3iB,EAAAwM,QACAC,QACAC,YAEA1M,EAAA2W,UAAA,EACA3W,EAAAoM,YACAC,YAAA,EACAlB,SAAA,GAEAnL,EAAA4iB,YAAA,iBACA5iB,EAAA6iB,sBAAA,wCACA7iB,EAAA8iB,4BAAA,qCACA9iB,EAAA8I,SAAA,0BACA9I,EAAA8P,QAAA9P,EAAA8I,SACA9I,EAAAgI,eAAA,MACAhI,EAAAmQ,iBACAnQ,EAAA+iB,WACA/iB,EAAAgjB,cACAhjB,EAAAiK,iBACAjK,EAAA6N,aACA7N,EAAAsN,eAOAtN,EAAAiN,OACAR,QACAC,WACAyE,UAEAnR,EAAAijB,cAAA,WACA,UAEAjjB,EAAA+L,cACA/L,EAAAkM,UACAlM,EAAAE,cACAF,EAAAkD,SACAlD,EAAA4M,cACA5M,EAAA0e,WACA1e,EAAAkjB,gBACAljB,EAAA0a,UACA1a,EAAAmjB,IAAA,EACAnjB,EAAAojB,WACApjB,EAAA2S,eAAA,EACA3S,EAAA0S,eAAA,EACA1S,EAAAqR,gBAAA,EACArR,EAAAwR,gBAAA,EACAxR,EAAAyP,cACAzP,EAAA6I,gBACA7I,EAAAod,aACA,sBACA,sBACA,yBACA,wBACA,0BACA,0BAEApd,EAAAuW,OAAsB3P,EAAA,EAAAE,EAAA,GACtB9G,EAAAwe,gBAAA,SAAA6E,GACA,GAAAzkB,MAAAgB,EAAAI,EAAAsS,mBAAA9T,EAAAwB,EAAAsD,KAAAsC,MAmBA,OAlBA5F,GAAA+L,WAAAlL,QAAA,SAAAsM,EAAAuD,GACA,GAAAA,IAAAlS,EAAA,CACA,OAAA2O,EAAAvH,OAEA,YADAhH,EAAA8R,GAAA,KAGA9R,GAAA8R,MACA2S,EACAzjB,EAAAiB,QAAA,SAAA2a,GACA5c,EAAA8R,GAAA8K,EAAA3c,MAAAmB,EAAAsD,KAAAoN,GAAA8K,EAAA3c,QAGAsO,EAAAtM,QAAA,SAAAyiB,IACA,IAAAA,GAAA1jB,EAAA0jB,KACA1kB,EAAA8R,GAAA9Q,EAAA0jB,GAAAzkB,MAAAmB,EAAAsD,KAAAoN,GAAA9Q,EAAA0jB,GAAAzkB,YAIAD,GAEAoB,EAAAujB,UAAA,SAAAC,EAAAC,EAAAC,GACAA,KAAA,CACA,IAAA9c,GAAArI,IACA,KAAAqI,EAAA4c,EAAyB5c,GAAA6c,EAAW7c,GAAA8c,EACpCnlB,EAAAqI,IAEA,OAAArI,IAEAyB,EAAAiS,uBAAA,WACA,MAAAjS,GAAAE,WAAAsT,kBACAxT,EAAAiN,MAAAR,MAAA,IAAAzM,EAAAkD,MAAAygB,uBADqD,GAGrD3jB,EAAAkS,yBAAA,WACA,MAAAlS,GAAAE,WAAA0Q,eACA5Q,EAAAiN,MAAAP,QAAAmC,YAAA7O,EAAAkD,MAAA4N,mBADkD,GAGlD9Q,EAAA0f,eAAA,WACA1f,EAAAE,WAAAwP,gBACAkU,aAAAC,QAAA7jB,EAAA4iB,YAAA,IAAA5iB,EAAAE,WAAArB,KAAA2E,KAAAsgB,WACA7W,OACAR,KAAAzM,EAAAiN,MAAAR,KACAC,QAAA1M,EAAAiN,MAAAP,SAEAF,QACAC,KAAAzM,EAAAwM,OAAAC,KACAC,QAAA1M,EAAAwM,OAAAE,SAEAoD,QAAA9P,EAAA8P,QACA9H,eAAAhI,EAAAgI,mBAGAhI,EAAA8c,UAAA,WACA,MAAA9c,GAAA4D,QAAA5D,EAAA+jB,YAEA/jB,EAAAgkB,mBAAA,WACA,GAAApkB,GAAAI,EAAA8c,WACA9c,GAAAwM,OAAAE,QAAA1M,EAAAujB,UAAA,EAAA3jB,EAAAgG,OAAA,IAEA5F,EAAAqS,gBAAA,WACArS,EAAAwM,OAAAC,KAAAzM,EAAAujB,UAAA,EAAAvjB,EAAAsD,KAAAsC,OAAA,IAEA5F,EAAAsS,iBAAA,WACA,MAAAtS,GAAA8c,YAAAta,OAAA,SAAA8gB,GAA2D,OAAAA,EAAA7H,UAE3Dzb,EAAAikB,kBAAA,SAAA9W,EAAA9B,GACA,GAAAzM,GAAAyM,EAAA6Y,cAAA,EACA,mBAAAtlB,KACAA,IAAAwB,MAAAJ,EAAAU,MAAA2K,KAEA8B,EAAA9B,EAAAxM,MAAAD,GAEAoB,EAAAmkB,iBAAA,WACAnkB,EAAA+S,UACA/S,EAAA+S,OAAA/S,EAAA8I,UAAA9I,EAAAmjB,IACAnjB,EAAAmjB,KAAA,EACAnjB,EAAA8c,YAAAjc,QAAA,SAAAwK,GACArL,EAAAikB,kBAAAjkB,EAAA+S,OAAA1H,MAGArL,EAAAokB,kBAAA,SAAAtf,GAEA,IADA,GAAAzF,GAAA,EACAW,EAAAkjB,aAAApe,IACAzF,GAAA,EACAyF,GAAAzF,CAEA,OAAAyF,IAEA9E,EAAAwC,OAAA,SAAAqK,GACA,GAAAF,GAAA3M,EAAA+iB,QAAAlW,EAKA,OAJAF,QAAA5M,KAAA8M,IACAmD,QAAAC,KAAA,mEAAApD,GACAF,EAAA3M,EAAA+iB,QAAA1e,QAEAsI,GAEA3M,EAAAqkB,qBAAA,SAAAC,GACA,GAAAva,GAAAnD,EAAApI,EAAAwB,EAAAsD,KAAAsC,MACA,KAAAgB,EAAA,EAAuBA,EAAApI,EAAOoI,GAAA,EAC9B,kBAAA7G,IAAAiM,QAAAhM,EAAAsD,KAAAsD,GAAA0d,IAEA,MADAva,SAAA/J,GAAAsD,KAAAsD,GACA,WAAAmD,EAAA,SAAAA,CAGA,iBAEA/J,EAAAukB,eAAA,WACAvlB,OAAAmH,KAAAnG,EAAAyP,YAAA5O,QAAA,SAAA2jB,GACAxkB,EAAAyP,WAAA+U,GAAAphB,UAGApD,EAAAuf,iBAAA,WACAvgB,OAAAmH,KAAAnG,EAAAyP,YAAA5O,QAAA,SAAA2jB,GACAxkB,EAAAyP,WAAA+U,GAAA3f,YAGA7E,EAAAoe,eAAA,SAAA1a,EAAAkD,EAAAE,EAAA4V,GACA,GAAA+H,GACArT,EAAApR,EAAAkS,2BACAF,EAAAhS,EAAAiS,wBACArL,GAAA5G,EAAAiH,MAAAjH,EAAAE,WAAAwkB,qBAAA9d,EAAA5G,EAAAiH,QACAjH,EAAA6N,UAAAC,YAAA9N,EAAAE,WAAAigB,yBACAsE,GAAA,GAEA3d,EAAA9G,EAAAgH,OAAAhH,EAAAE,WAAAwkB,qBAAA5d,EAAA9G,EAAAgH,SACAhH,EAAA6N,UAAAD,WAAA5N,EAAAE,WAAAigB,yBACAsE,GAAA,GAEA7d,EAAA5G,EAAAE,WAAAwkB,oBAAAtT,EAAA,IACApR,EAAA6N,UAAAC,YAAA9N,EAAAE,WAAAigB,yBACAsE,GAAA,GAEA3d,EAAA9G,EAAAE,WAAAwkB,oBAAA1S,EAAA,IACAhS,EAAA6N,UAAAD,WAAA5N,EAAAE,WAAAigB,yBACAsE,GAAA,GAEAA,IAAA/H,GAAA1c,EAAA+R,cAAA,IAAA/R,EAAA+R,YAAA1F,cACArM,EAAAgd,YAAA3D,WAAArZ,EAAA2Y,UAAA3Y,EAAAE,WAAAggB,iBAAAxc,KAGA1D,EAAA2kB,uBAAA,WACA3kB,EAAAsD,KAAAtD,EAAA4kB,aAAApiB,OAAA,SAAA2K,GACA,YAGAnN,EAAA6kB,eAAA,SAAAlmB,EAAAiB,GACA,IAAAjB,EAAAE,KACA,SAAA8E,OAAA,yCAEA,IAAA/D,EAAA4C,OAAA,SAAAjE,GAAuC,MAAAA,GAAAM,OAAAF,EAAAE,OAA4B+G,OAAA,EACnE,SAAAjC,OAAA,0BACAhF,EAAAE,KAAA,6CAEA,WAEAmB,EAAA8kB,YAAA,SAAAC,EAAAC,EAAAlgB,EAAA/B,GACAgiB,EAAAjgB,OAAA/E,KAAAilB,EAAAlgB,GAAA/B,EAAAiiB,EAAAlgB,IAEA9E,EAAAilB,cAAA,WACAjlB,EAAAC,SAAAC,WAAAW,QAAA,SAAAtC,GACAyB,EAAA8kB,YAAA9kB,EAAAE,WAAAF,EAAAQ,KAAAjC,EAAA,GAAAA,EAAA,OAGAyB,EAAAklB,SAAA,WACAllB,EAAAC,SAAAE,OAAAU,QAAA,SAAAtC,GACAyB,EAAA8kB,YAAA9kB,EAAAkD,MAAAlD,EAAAQ,KAAA0C,UAAkE3E,EAAA,GAAAA,EAAA,OAGlEyB,EAAAiiB,SAAA,SAAAkD,GACAnlB,EAAAsS,mBAAAzR,QAAA,SAAAyiB,GACAA,EAAAzkB,OAAAsmB,OAAAplB,KAAAolB,GACAnlB,EAAAgiB,kBAAAsB,EAAAzkB,QAGAmB,EAAAgiB,kBAAA,eAEAhiB,EAAAyB,QAAA,YACAzB,EAAA4R,aAAA5R,EAAA4X,QAAA5X,EAAA4X,OAAAjT,YACA3E,EAAA4X,OAAAjT,WAAAygB,YAAAplB,EAAA4X,QAEA5X,EAAAqlB,YAAA9K,oBAAA,UAAAva,EAAAoa,SAAA,GACApa,EAAAqlB,YAAA9K,oBAAA,YAAAva,EAAA4Y,WAAA,GACA5Y,EAAAqlB,YAAA9K,oBAAA,WAAAva,EAAA+hB,UAAA,GACA/hB,EAAAqlB,YAAA9K,oBAAA,QAAAva,EAAAsa,OAAA,GACAta,EAAAqlB,YAAA9K,oBAAA,YAAAva,EAAA2Y,WACA3Y,EAAAqlB,YAAA9K,oBAAA,QAAAva,EAAAkiB,aAAA,GACAliB,EAAA4X,OAAA2C,oBAAA,cAAAva,EAAAslB,aAAA,GACAtlB,EAAA4X,OAAA2C,oBAAA,OAAAva,EAAAsiB,MACAtiB,EAAAohB,aAAA7G,oBAAA,WAAAva,EAAA8hB,UAAA,GACA9hB,EAAAohB,aAAA7G,oBAAA,QAAAva,EAAA6hB,OAAA,GACA7hB,EAAAohB,aAAA7G,oBAAA,UAAAva,EAAAshB,SAAA,GACApgB,OAAAqZ,oBAAA,SAAAva,EAAA6E,QACA7E,EAAAqF,UAAArF,EAAAqF,SAAAkgB,YACAvlB,EAAAqF,SAAAkgB,cAGAvlB,EAAAwlB,oBAAA,WACA,GAAA5lB,EACAI,GAAAylB,gBACA,gBAAAzlB,GAAAylB,eAAAjZ,QACA,OAAAxM,EAAAylB,eAAAjZ,SACAxM,EAAAylB,eAAAjZ,OAAAC,KAAA7G,QAAA5F,EAAAsD,KAAAsC,SACA5F,EAAAwM,OAAAC,KAAAzM,EAAAylB,eAAAjZ,OAAAC,MAEA7M,EAAAI,EAAA8c,YACA9c,EAAAylB,eAAAjZ,OAAAE,QAAA9G,SAAAhG,EAAAgG,SACA5F,EAAAwM,OAAAE,QAAA1M,EAAAylB,eAAAjZ,OAAAE,SAEA1M,EAAA8P,YAAA/P,KAAAC,EAAAylB,eAAA3V,QACA9P,EAAA8I,SAAA9I,EAAAylB,eAAA3V,QACA9P,EAAAgI,mBAAAjI,KAAAC,EAAAylB,eAAAzd,eACAhI,EAAA8I,SAAA9I,EAAAylB,eAAAzd,eACAhI,EAAA0lB,gBAAA1lB,EAAA8P,UAAA9P,EAAAgI,gBACAhI,EAAAyT,MAAAzT,EAAA8P,QAAA9P,EAAAgI,kBAIAhI,EAAA2lB,cAAA,SAAAC,GACA,MAAA5O,YAAA4O,EAAA,KAEA5lB,EAAA6lB,UAAA,SAAA/gB,GACA,OAAAV,KAAAU,KACA9E,EAAAkD,MAAA4B,EAAA,UAAA9E,EAAA2lB,cAAA3lB,EAAAkD,MAAA4B,MAGA9E,EAAA8lB,SAAA,SAAAC,GACA/lB,EAAAQ,KAAAulB,IACA/mB,OAAAmH,KAAAnG,EAAAQ,KAAAulB,IAAAllB,QAAA,SAAAiE,GACA9E,EAAA+lB,GAAAjhB,GAAA9E,EAAAQ,KAAAulB,GAAAjhB,MAGA9E,EAAAc,KAAA,WACA,IAAAd,EAAA0E,YAAA,CACA,GAAAshB,KAyJA,IAxJAhmB,EAAAilB,gBACAjlB,EAAAklB,WACAllB,EAAAimB,gBACAjmB,EAAAkmB,SACAlmB,EAAA6M,KAAA,kBACA7M,EAAA0E,aAAA,EACA1E,EAAAqW,qBAAwCzP,EAAA,EAAAE,EAAA,GACxC9H,OAAAmH,KAAAnG,EAAAkD,OAAArC,QAAAb,EAAA6lB,WACA7lB,EAAAU,KAAAmM,KAAA7M,EAAA6M,KACA7M,EAAAU,KAAAiZ,iBAAA3Z,EAAA2Z,iBACA3Z,EAAAU,KAAA6Z,oBAAAva,EAAAua,oBACAva,EAAAU,KAAA2C,cAAArD,EAAAqD,cACArD,EAAAU,KAAAe,QAAAzB,EAAAyB,QACAzB,EAAAU,KAAAylB,SAAAnmB,EAAAmmB,SACAnmB,EAAAU,KAAAqiB,QAAA/iB,EAAA+iB,QACA/iB,EAAAU,KAAAge,QAAA1e,EAAA0e,QACA1e,EAAAU,KAAAuhB,SAAAjiB,EAAAiiB,SACAjiB,EAAAU,KAAA2Z,YAAAra,EAAAqa,YACAra,EAAAU,KAAA+d,QAAAze,EAAAye,QACAze,EAAAU,KAAAoe,cAAA9e,EAAA8e,cACA9e,EAAAU,KAAAihB,eAAA3hB,EAAA2hB,eACA3hB,EAAAU,KAAA0lB,eAAApmB,EAAAomB,eACApmB,EAAAU,KAAA2lB,SAAArmB,EAAAqmB,SACArmB,EAAAU,KAAA4lB,QAAAtmB,EAAAsmB,QACAtmB,EAAAU,KAAA6lB,qBAAAvmB,EAAAumB,qBACAvmB,EAAAU,KAAA8lB,iBAAAxmB,EAAAwmB,iBACAxmB,EAAAU,KAAAshB,kBAAAhiB,EAAAgiB,kBACAhiB,EAAAU,KAAA+lB,wBAAAzmB,EAAAymB,wBACAzmB,EAAAU,KAAAgmB,mBAAA1mB,EAAA0mB,mBACA1mB,EAAAU,KAAAgY,UAAA1Y,EAAA0Y,UACA1Y,EAAAU,KAAAimB,cAAA3mB,EAAA2mB,cACA3mB,EAAAU,KAAA+S,MAAAzT,EAAAyT,MACAzT,EAAAU,KAAA0C,KAAApD,EAAAoD,KACApD,EAAAU,KAAAyd,WAAAne,EAAAme,WACAne,EAAAU,KAAAkmB,YAAA5mB,EAAA4mB,YACA5mB,EAAAU,KAAAmmB,kBAAA7mB,EAAA6mB,kBACA7mB,EAAAU,KAAAie,UAAA3e,EAAA2e,UACA3e,EAAAU,KAAAsd,UAAAhe,EAAAge,UACAhe,EAAAU,KAAA8N,WAAAxO,EAAAwO,WACAxO,EAAAU,KAAAse,WAAAhf,EAAAgf,WACAhf,EAAAU,KAAAomB,WAAA9mB,EAAA8mB,WACA9mB,EAAAU,KAAAqmB,aAAA/mB,EAAA+mB,aACA/mB,EAAAU,KAAAkX,OAAA5X,EAAA4X,OACA5X,EAAAU,KAAAL,QAAAL,EAAAkH,IACAlH,EAAAU,KAAAsmB,UAAAhnB,EAAAgnB,UACAhnB,EAAAU,KAAAumB,UAAAjnB,EAAAinB,UACAjnB,EAAAU,KAAAwmB,OAAAlnB,EAAAknB,OACAlnB,EAAAU,KAAAymB,aAAAnnB,EAAAmnB,aACAnnB,EAAAU,KAAA0mB,aAAApnB,EAAAonB,aACApnB,EAAAU,KAAA2mB,UAAArnB,EAAAqnB,UACArnB,EAAAU,KAAA4mB,gBAAAtnB,EAAAsnB,gBACAtnB,EAAAU,KAAA6mB,aAAAvnB,EAAAunB,aACAvnB,EAAAU,KAAA8mB,eAAAxnB,EAAAwnB,eACAxnB,EAAAU,KAAA+mB,kBAAAznB,EAAAynB,kBACAznB,EAAAU,KAAAgnB,gBAAA1nB,EAAA0nB,gBACA1nB,EAAAU,KAAAmE,OAAA7E,EAAA6E,OACA7E,EAAAU,KAAAme,aAAA7e,EAAA6e,aACA7e,EAAAU,KAAAsd,UAAAhe,EAAAge,UACAhe,EAAAU,KAAAghB,UAAA1hB,EAAA0hB,UACA1hB,EAAAU,KAAA6jB,eAAAvkB,EAAAukB,eACAvkB,EAAAU,KAAAinB,cAAA3nB,EAAA2nB,cACA3nB,EAAAU,KAAAknB,uBAAA5nB,EAAA4nB,uBACA5nB,EAAAU,KAAAmnB,eAAA7nB,EAAA6nB,eACA7nB,EAAAU,KAAA4hB,KAAAtiB,EAAAsiB,KACAtjB,OAAAmH,KAAAnG,EAAAkD,OAAArC,QAAA,SAAAiE,GAEAkhB,EAAAlhB,OAAA/E,GACAf,OAAAC,eAAA+mB,EAAAlhB,GACA1F,IAAA,WACA,MAAAY,GAAAkD,MAAA4B,IAEAC,IAAA,SAAAC,GACAhF,EAAA6lB,UAAA7gB,GACAhF,EAAAkD,MAAA4B,GAAAE,EACAhF,EAAAoD,MAAA,GACApD,EAAAqD,cAAA,gBAA4DxE,KAAAiG,EAAAE,eAI5DhG,OAAAC,eAAAe,EAAAU,KAAA,cACAtB,IAAA,WACA,MAAAY,GAAA8nB,cAGA9oB,OAAAC,eAAAe,EAAAU,KAAA,cACAtB,IAAA,WACA,MAAAY,GAAAoM,cASApN,OAAAC,eAAAe,EAAAU,KAAA,YACAtB,IAAA,WACA,MAAAY,GAAA2W,YAGA3W,EAAAQ,KAAAF,WACAtB,OAAAC,eAAAe,EAAAU,KAAA,SACAtB,IAAA,WACA,MAAA4mB,IAEAjhB,IAAA,SAAAC,GACAhG,OAAAmH,KAAAnB,GAAAnE,QAAA,SAAAiE,GACA9E,EAAA6lB,UAAA7gB,GACAhF,EAAAkD,MAAA4B,GAAAE,EAAAF,KAEA9E,EAAAoD,MAAA,GACApD,EAAAqD,cAAA,gBAA4DxE,KAAA,QAAAmG,aAI5DhG,OAAAC,eAAAe,EAAAU,KAAA,cAA4DsE,WAC5DhG,OAAAmH,KAAAnG,EAAAE,YAAAW,QAAA,SAAAiE,GACA9F,OAAAC,eAAAe,EAAAU,KAAAR,WAAA4E,GACA1F,IAAA,WACA,MAAAY,GAAAE,WAAA4E,IAEAC,IAAA,SAAAC,GACAhF,EAAAE,WAAA4E,GAAAE,EACAhF,EAAAoD,MAAA,GACApD,EAAAqD,cAAA,oBAAgExE,KAAAiG,EAAAE,QAAAF,UAIhE9E,EAAA+iB,QAAA1e,OAAA,SAAAW,EAAA+iB,GACA/iB,EAAAgjB,OAAAhjB,EACA,IAAAijB,GACAC,EAAA,cACAC,EAAAD,EAAAE,KAAAL,GACAM,EAAAF,IAAA,GAAAG,UAAA,MACAC,EAAAF,EAAAziB,MAEA,IADA5F,EAAAwoB,uBAAAzoB,GACA,MAAAgoB,EAAAO,UAAA,MAAAH,EAAA,CACA,IACAF,EAAA,GAAAQ,QAAAV,EAAAO,UAAA,EAAAP,EAAAniB,QAAA2iB,EAAA,IAAAF,GACqB,MAAA3kB,GAErB,YADA1D,EAAAwoB,mBAAA9kB,GAGA,MAAAukB,GAAA7jB,KAAAY,GAEA,QAAAA,EAAAkL,WACA,IADAlL,EAAAkL,WAAAwY,oBACA1c,QAAA+b,EAAAW,sBAEA1oB,EAAA+iB,QAAAjf,OAAA,SAAAkB,EAAA+iB,GACA,OAAAA,GACA/iB,IAAA+iB,GAEA/nB,EAAAE,WAAArB,MAAAmB,EAAAE,WAAAwP,eAAA,CAEA,GADA1P,EAAAylB,eAAA7B,aAAA+E,QAAA3oB,EAAA4iB,YAAA,IAAA5iB,EAAAE,WAAArB,MACAmB,EAAAylB,eACA,IACAzlB,EAAAylB,eAAAjiB,KAAAC,MAAAzD,EAAAylB,gBACqB,MAAA/hB,GACrBsM,QAAAC,KAAA,0CAAAvM,GACA1D,EAAAylB,mBAAA1lB,GAGAC,EAAAylB,gBACA,gBAAAzlB,GAAAylB,eAAAxY,OACA,OAAAjN,EAAAylB,eAAAxY,QACAjN,EAAAiN,MAAAR,KAAAzM,EAAAylB,eAAAxY,MAAAR,KACAzM,EAAAiN,MAAAP,QAAA1M,EAAAylB,eAAAxY,MAAAP,SACA,0BAAA7L,QAAA,SAAAtC,GACAyB,EAAAiN,MAAA1O,KACAyB,EAAAiN,MAAA1O,UAqBA,OAfA,kCAAAsC,QAAAb,EAAA8lB,UACA9lB,EAAAQ,KAAA8C,OACAtD,EAAAU,KAAA4C,KAAAtD,EAAAQ,KAAA8C,MAEAtD,EAAAsD,OACAtD,EAAAU,KAAA4C,SAEAtD,EAAAQ,KAAAoD,SACA5D,EAAAU,KAAAkD,OAAA5D,EAAAQ,KAAAoD,QAEA5D,EAAA4R,YACAC,sBAAA,WAAmD7R,EAAA6E,QAAA,KAEnD7E,EAAA6E,QAAA,GAEA7E,IAQAA,EAAAU,KAAAkoB,KAAA,SAAAllB,GACA1D,EAAA2W,UAAA,GAQA3W,EAAAU,KAAA2gB,MAAA,WACArhB,EAAA2W,UAAA,EACA3W,EAAAohB,aAAAC,SAEAriB,OAAAC,eAAAe,EAAAU,KAAA,UACAtB,IAAA,WACA,MAAAY,GAAA2E,WAAAqC,QAEAjC,IAAA,SAAAC,GACAhF,EAAA2E,WAAAqC,OAAAhC,EACAhF,EAAA6E,QAAA,MAGA7F,OAAAC,eAAAe,EAAAU,KAAA,SACAtB,IAAA,WACA,MAAAY,GAAA2E,WAAAsC,OAEAlC,IAAA,SAAAC,GACAhF,EAAA2E,WAAAsC,MAAAjC,EACAhF,EAAA6E,QAAA,MAGA7F,OAAAC,eAAAe,EAAAU,KAAA,gBACAtB,IAAA,WACA,MAAAY,GAAA6I,gBAGA7J,OAAAC,eAAAe,EAAAU,KAAA,cACAtB,IAAA,WACA,MAAAJ,QAAAmH,KAAAnG,EAAAyP,YAAAsG,IAAA,SAAAxH,GACA,MAAAvO,GAAAyP,WAAAlB,QAIAvP,OAAAC,eAAAe,EAAAU,KAAA,eACAtB,IAAA,WACA,MAAAY,GAAA4R,eAGA5S,OAAAC,eAAAe,EAAAU,KAAA,cACAtB,IAAA,WACA,MAAAY,GAAA2E,YAEAI,IAAA,SAAAC,GACA,IAAAhF,EAAA4R,YACA,SAAAiX,WAAA,yDAEA7oB,GAAA2E,WAAAK,KAGAhG,OAAAC,eAAAe,EAAAU,KAAA,gBACAtB,IAAA,WACA,MAAAY,GAAA2E,cAGA3F,OAAAC,eAAAe,EAAAU,KAAA,cACAtB,IAAA,WACA,MAAAY,GAAA2E,WAAAgJ,cAGA3O,OAAAC,eAAAe,EAAAU,KAAA,aACAtB,IAAA,WACA,MAAAY,GAAA2E,WAAA+I,aAGA1O,OAAAC,eAAAe,EAAAU,KAAA,gBACAtB,IAAA,WACA,MAAAY,GAAA6N,UAAAiH,gBAGA9V,OAAAC,eAAAe,EAAAU,KAAA,eACAtB,IAAA,WACA,MAAAY,GAAA6N,UAAAuH,eAGApW,OAAAC,eAAAe,EAAAU,KAAA,aACAtB,IAAA,WACA,MAAAY,GAAA6N,UAAAD,WAEA7I,IAAA,SAAAC,GACAhF,EAAA6N,UAAAD,UAAA5I,KAGAhG,OAAAC,eAAAe,EAAAU,KAAA,cACAtB,IAAA,WACA,MAAAY,GAAA6N,UAAAC,YAEA/I,IAAA,SAAAC,GACAhF,EAAA6N,UAAAC,WAAA9I,KAGAhG,OAAAC,eAAAe,EAAAU,KAAA,SACAtB,IAAA,WACA,MAAAY,GAAAiN,SAGAjO,OAAAC,eAAAe,EAAAU,KAAA,SACAtB,IAAA,WACA,MAAAY,GAAAqc,SAGArd,OAAAC,eAAAe,EAAAU,KAAA,gBACAtB,IAAA,WACA,MAAAY,GAAAohB,gBAGApiB,OAAAC,eAAAe,EAAAU,KAAA,eACAtB,IAAA,WACA,MAAAY,GAAA+R,eAGA/S,OAAAC,eAAAe,EAAAU,KAAA,gBACAtB,IAAA,WACA,MAAAY,GAAA8O,gBAGA9P,OAAAC,eAAAe,EAAAU,KAAA,eACAtB,IAAA,WACA,MAAAY,GAAAsN,eAGAtO,OAAAC,eAAAe,EAAAU,KAAA,cACAtB,IAAA,WACA,MAAAY,GAAA+L,cAGA/M,OAAAC,eAAAe,EAAAU,KAAA,YACAtB,IAAA,WACA,MAAAY,GAAAkU,YAGAlV,OAAAC,eAAAe,EAAAU,KAAA,WACAtB,IAAA,WACA,MAAAY,GAAAojB,WAGApjB,EAAAU,KAAAkM,WAAA5M,EAAA4M,WACA5M,EAAA8oB,iBAAA,SAAAxlB,EAAAylB,GACA,GAAAxqB,GAAAK,EAAAgd,EAAAoN,CACA,WAAA1lB,GAAA,KAAAA,OAAAvD,KAAAuD,EACA,MAAAylB,MAUA,IARA,gBAAAzlB,IACA,gBAAAA,IACA,iBAAAA,KACAA,IAAyB2lB,EAAA3lB,KAEzBvC,MAAAmoB,QAAA5lB,IAAA,gBAAAA,KACAA,QAEAvC,MAAAmoB,QAAA5lB,EAAA,qBAAAA,GAAA,WAAAA,EAAA,IACAvC,MAAAmoB,QAAA5lB,IAAA,IAAAA,EAAAsC,OACA,MAAAmjB,GAAAzlB,EAEA,sBAAAA,GAWA,aAVA/E,EAAA+E,EAAAlD,MAAAJ,EAAAU,MAAA,SAAA9B,GACAoqB,GACAhZ,QAAAC,KAAA,mHAEAjQ,EAAA8oB,iBAAAlqB,EAAAmqB,SAGAC,GAAA,EACAhpB,EAAA8oB,iBAAAvqB,EAAAwqB,IAOA,IAHAhoB,MAAAmoB,QAAA5lB,IAAA,gBAAAA,KACAA,OAEAvC,MAAAmoB,QAAA5lB,GAmBA,MAlBAvC,OAAAmoB,QAAA5lB,EAAA,MAEAA,OAGAsY,EAAA,EACAhd,KACA0E,EAAAzC,QAAA,SAAAsM,GACAyO,EAAArD,KAAAqD,MAAAzO,EAAAvH,UAGAtC,EAAAzC,QAAA,SAAAsM,EAAAuD,GACA,GAAA9J,EAEA,KADAhI,EAAA8R,MACA9J,EAAA,EAA+BA,EAAAgV,EAAShV,GAAA,EACxChI,EAAA8R,GAAA9J,GAAAuG,EAAAvG,KAGAmiB,EAAAnqB,EAEA,UAAA+E,OAAA,mGAEA3E,OAAAC,eAAAe,EAAAU,KAAA,cACAtB,IAAA,WACA,MAAAY,GAAAgjB,cAGAhkB,OAAAC,eAAAe,EAAAU,KAAA,mBACAtB,IAAA,WACA,OACA8Y,IAAAlY,EAAA2S,eACAmL,MAAA9d,EAAAsR,iBACAuM,OAAA7d,EAAA4S,kBACAoF,KAAAhY,EAAAqR,oBAIArS,OAAAC,eAAAe,EAAAU,KAAA,mBACAtB,IAAA,WACA,OACA8Y,IAAAlY,EAAA0S,eACAoL,MAAA9d,EAAAuR,iBACAsM,OAAA7d,EAAA6S,kBACAmF,KAAAhY,EAAAwR,oBAIAxS,OAAAC,eAAAe,EAAAU,KAAA,mBACAtB,IAAA,WACA,MAAAY,GAAAwd,wBAGAxe,OAAAC,eAAAe,EAAAU,KAAA,gBACAtB,IAAA,WACA,MAAAY,GAAAwe,iBAAA,MAGAxf,OAAAC,eAAAe,EAAAU,KAAA,iBACAtB,IAAA,WACA,MAAAY,GAAAwe,qBAGAxf,OAAAC,eAAAe,EAAAU,KAAA,iBACAtB,IAAA,WACA,MAAAY,GAAAsS,mBAAAyD,IAAA,SAAAuN,GACA,MAAAA,QAIAtkB,OAAAC,eAAAe,EAAAU,KAAA,OACAtB,IAAA,WACA,MAAAY,GAAAkH,OAGAlI,OAAAC,eAAAe,EAAAU,KAAA,UACAtB,IAAA,WACA,MAAAY,GAAA8c,aAEA/X,IAAA,SAAAC,GACA,IAAAjE,MAAAmoB,QAAAlkB,IAAA,gBAAAA,GAAA,GACA,SAAArB,OAAA,sCAEA,QAAA5D,KAAAiF,EAAA,GAAAnG,KACA,SAAA8E,OAAA,sEAEA3D,GAAA4D,OAAAoB,EAAA+Q,IAAA,SAAAyF,EAAA9K,GAQA,MAPA8K,GAAAvU,MAAAuU,EAAAvU,OAAAjH,EAAAkD,MAAAkK,YACAoO,EAAAxb,EAAA8I,UAAA9I,EAAAokB,kBAAA5I,EAAA3c,MACA2c,EAAAhZ,OAAAgZ,EAAAhZ,QAAAxC,EAAAwC,OAAAgZ,EAAA3O,MACA2O,EAAA3O,KAAA2O,EAAA3O,MAAA,SACA2O,EAAA9K,QACA8K,EAAAnP,YAAAqE,EACA8K,EAAArQ,UAAA,EACAqQ,IAEAxb,EAAA+jB,eAAAhkB,GACAC,EAAAmkB,mBACAnkB,EAAAgkB,qBACAhkB,EAAAwlB,sBACAxlB,EAAA6E,QAAA,GACA7E,EAAAqD,cAAA,iBAAqDO,OAAA5D,EAAA4D,YAGrD5E,OAAAC,eAAAe,EAAAU,KAAA,QACAtB,IAAA,WACA,MAAAY,GAAAsD,KAAAyS,IAAA,SAAA5I,GAEA,aADAA,GAAAnN,EAAA8I,UACAqE,KAGApI,IAAA,SAAAC,GACAhF,EAAA8oB,iBAAA9jB,EAAA,SAAApG,GACAoB,EAAA4kB,aAAAhmB,EAAAmX,IAAA,SAAA5I,GAGA,MAFAA,GAAAnN,EAAA8I,UAAA9I,EAAAmjB,IACAnjB,EAAAmjB,KAAA,EACAhW,IAEAnN,EAAAojB,WAEApjB,EAAAsD,KAAAtD,EAAA4kB,aACA5kB,EAAA4D,SACA5D,EAAA+jB,WAAA/jB,EAAA6mB,qBAEA7mB,EAAA4D,QAAA,IAAA5D,EAAAsD,KAAAsC,SACA5F,EAAA+jB,aAA4CllB,KAAA,KAC5CmB,EAAA+jB,WAAA,GAAA/jB,EAAA8I,UAAA9I,EAAAokB,kBAAA,KAEApkB,EAAA+jB,aAAA/jB,EAAA4D,SACA5D,EAAAgkB,qBACAhkB,EAAAwlB,sBACAxlB,EAAAqD,cAAA,iBAA6DO,OAAA5D,EAAA+jB,cAE7D/jB,EAAAmkB,mBACAnkB,EAAAE,WAAAipB,mBAAAnpB,EAAAsD,KAAAsC,OAAA,OACA7F,KAAAC,EAAAylB,gBACAzlB,EAAAiiB,WAEAjiB,EAAAgiB,kBAAA,iBACAhiB,EAAA6E,UAAA7E,EAAA4R,aAA8D5R,EAAAoD,MAAA,GAC9DpD,EAAAqS,kBACArS,EAAAwlB,sBACAxlB,EAAAqD,cAAA,eAAuDC,KAAAtD,EAAAsD,YAIvDtD,EAAAimB,cAAA,WASA,QAAAmD,GAAApkB,EAAAqkB,GACA,GAAAplB,MAAAe,GACA,SAAArB,OAAA,mCAEAqB,GAAA,IACAA,EAAA,GAEAA,EAAA8P,IACA9P,EAAA8P,GAEAA,EAAA,IACA9P,EAAA,GAEA4I,EAAA5I,EACAqkB,GACArpB,EAAAic,SAGA,QAAAqN,GAAAtkB,EAAAqkB,GACA,GAAAplB,MAAAe,GACA,SAAArB,OAAA,oCAEAqB,GAAA,IACAA,EAAA,GAEAA,EAAAoQ,IACApQ,EAAAoQ,GAEAA,EAAA,IACApQ,EAAA,GAEA8I,EAAA9I,EACAqkB,GACArpB,EAAAic,SAzCA,GAAAsN,GAAA,EACAC,EAAA,EACA5b,EAAA,EACAE,EAAA,EACAgH,EAAA,EACAM,EAAA,EACAP,EAAA,GACAM,EAAA,EAqCAnV,GAAA6N,UAAAqC,SAAA,WACA,mBAAyBkF,EACzB,eAAAN,EACA,aAAAhH,EACA,YAAAF,EAAA,KAEA5N,EAAA6N,UAAAoM,SAAA,SAAArT,EAAAE,GACAwiB,EAAA1iB,GAAA,GACAwiB,EAAAtiB,IAEA9H,OAAAC,eAAAe,EAAA6N,UAAA,mBACAzO,IAAA,WACA,MAAAyV,IAEA9P,IAAA,SAAAC,GACA6P,EAAA7P,KAGAhG,OAAAC,eAAAe,EAAA6N,UAAA,kBACAzO,IAAA,WACA,MAAA+V,IAEApQ,IAAA,SAAAC,GACAmQ,EAAAnQ,KAGAhG,OAAAC,eAAAe,EAAA6N,UAAA,UACAzO,IAAA,WACA,MAAAmqB,IAEAxkB,IAAA,SAAAC,GACA8P,EAAA9P,IACA4I,EAAA,GAEA2b,EAAAvkB,KAGAhG,OAAAC,eAAAe,EAAA6N,UAAA,SACAzO,IAAA,WACA,MAAAoqB,IAEAzkB,IAAA,SAAAC,GACAwkB,EAAAxkB,KAGAhG,OAAAC,eAAAe,EAAA6N,UAAA,aACAzO,IAAA,WACA,MAAAwO,IAEA7I,IAAAqkB,IAEApqB,OAAAC,eAAAe,EAAA6N,UAAA,cACAzO,IAAA,WACA,MAAA0O,IAEA/I,IAAAukB,IAEAtqB,OAAAC,eAAAe,EAAA6N,UAAA,gBACAzO,IAAA,WACA,MAAA0V,IAEA/P,IAAA,SAAAC,GACA4I,EAAA5I,IACA4I,EAAA2K,KAAAqD,IAAA5W,EAAA,IAEA8P,EAAAyU,IACA3b,EAAA,GAEAkH,EAAA9P,KAGAhG,OAAAC,eAAAe,EAAA6N,UAAA,eACAzO,IAAA,WACA,MAAAgW,IAEArQ,IAAA,SAAAC,GACA8I,EAAA9I,IACA8I,EAAAyK,KAAAqD,IAAA5W,EAAA,IAEAoQ,EAAApQ,QAMC5E,MAAAtC,EAAA+B,MAAA9B,EAAAD,QAAAgC,IP85EK,SAAU/B,EAAQD,EAASM,GQv1GjC,GAAAyB,GAAAC,CAEAD,UAyeCE,MAzeDD,EAAA,WACA,YACA,iBAAAE,GAEA,QAAAypB,GAAAvc,EAAApD,EAAA4f,EAAAC,GASA,QAAAC,KACAF,EAAA7oB,QAAA,SAAA0B,GAGA,QAAAsnB,GAAAnmB,GACAA,EAAAomB,gBAAAC,GACAxnB,EAAA6Z,YAAA2N,YAAArmB,EAAAomB,eACAE,IAAAtmB,EAAAomB,eACAG,IAAAvmB,EAAAomB,gBAEAvnB,EAAA6Z,YAAA3a,UACAyoB,EAAArP,OAAAqP,EAAAle,QAAAzJ,EAAA6Z,aAAA,GACA7Z,EAAA6Z,gBAAArc,GACAkqB,EAAA1P,oBAAA,WAAAsP,GACAE,EAAAxP,oBAAA,WAAAsP,GACAI,EAAAE,aAAA,mBACAF,EAAAE,aAAA,gBAEA,QAAAC,GAAAV,GAEA,SAAAO,EAAAI,aAAA,YACA,MAAAJ,EAAAI,aAAA,eADA,CAIA,GAAAC,GAAAL,EAAApS,uBACAyS,IACAtS,KAAAsS,EAAAtS,KAAAhY,EAAAkD,MAAAqnB,2BAAAR,EAAA/b,YACAkK,IAAAoS,EAAApS,IAAAlY,EAAAkD,MAAAsnB,0BACA3M,OAAAyM,EAAAzM,OACAC,MAAAwM,EAAAxM,OAEAvb,EAAA6Z,YAAAqN,EAAAvc,EAAAod,EAAAZ,EAAAhpB,GACAupB,EAAAE,aAAA,mBACAF,EAAAtQ,iBAAA,WAAAkQ,GACAE,EAAApQ,iBAAA,WAAAkQ,GACAK,EAAAzlB,KAAAlC,EAAA6Z,cAEA,QAAAqO,KACA,GAAAlsB,EACA,UAAA0rB,EAAAI,aAAA,gBAIA,GADAJ,EAAAE,aAAA,eACA,kBAAA5nB,GAAAmnB,MAOA,gBAHA3pB,MAHAxB,EAAAgE,EAAAmnB,MAAAtpB,MAAAM,GAAA,SAAAgpB,GACAU,EAAAV,QAEA3oB,MAAAmoB,QAAA3qB,IACA6rB,EAAA7rB,GAIA6rB,GAAA7nB,EAAAmnB,QAlDA,GACAM,GADAC,EAAAxQ,SAAAiR,cAAA,QAoDA,SAAAnoB,GACA,QAAAooB,GAAAC,GACA,UAAAA,EAAA,CACA,qBAAAA,GACA,MAAAD,GAAAC,EAAA1d,GAEA,oBAAA0d,GAEA,WADAX,GAAAY,YAAAD,EAGA5qB,GAAA8qB,kBAAAb,EAAA,qCACAA,EAAAtQ,iBAAA,uBACA3Z,EAAA8qB,kBAAAb,EAAA,6CAEAA,EAAAtQ,iBAAA,sBACA3Z,EAAA8qB,kBAAAb,EAAA,uCAEAA,EAAApkB,UAAA+kB,GAGAD,EAAApoB,EAAAkM,OACAlM,EAAA0nB,wBACA1nB,EAAAmnB,OAAAnnB,EAAAmnB,MAAA9jB,OAAA,qBAAArD,GAAAmnB,SACAM,EAAAvQ,SAAAiR,cAAA,OACA1qB,EAAA8qB,kBAAAd,EAAA,uCACAA,EAAAnkB,UAAA7F,EAAAkD,MAAA6nB,0BACAd,EAAAY,YAAAb,GACAC,EAAAtQ,iBAAA,YAAA8Q,GACAR,EAAAtQ,iBAAA,sBACAsQ,EAAAE,aAAA,kBAGA5nB,EAAA+X,OACA2P,EAAAtQ,iBAAA,iBAAAzM,GACA3K,EAAA+X,MAAAla,MAAAJ,GAAAkN,OAIA3K,GACAwnB,EAAAc,YAAAZ,KAGA,QAAAe,GAAApQ,GACA8O,EAAA9O,GAAAqP,qBAAA5mB,cAAA,GAAA4nB,OAAA,UAEA,QAAAC,KACAnB,EAAAnc,UAAA,EACA5N,EAAAkb,cAAA2P,YAAAM,GACiBA,EAAAxmB,YACjBwmB,EAAAxmB,WAAAygB,YAAA+F,GAEApB,EAAAnc,WAAAmc,EAAAjV,aAAAiV,EAAA9b,cAAAmd,EAAAzmB,WACAymB,EAAAzmB,WAAAygB,YAAAgG,GACiBrB,EAAAjV,aAAAiV,EAAA9b,aAAA,KACjB8b,EAAAnc,WAAAmc,EAAAjV,aAAAiV,EAAA9b,eACAjO,EAAAkb,cAAA2P,YAAAO,GAGA,QAAAC,GAAAxe,GACA,eAAA9C,KACA,GAAA4G,GAAA3Q,EAAAE,WAAAorB,wBACA,QAAAze,GAAA,IAAAkd,EAAAnc,WACA,SAAAf,GAAAkd,EAAAnc,YAAAmc,EAAAjV,eACAiV,EAAAnc,WAAA,OAAAf,GAAA8D,IACA4a,EAAAlS,WAAAtP,EAAA/J,EAAAE,WAAAsrB,yBAAA3e,KAGA,QAAA4e,GAAA5e,GACA,kBACAsM,aAAAoS,IAnIA,GAMA5T,GANAoS,EAAAtQ,SAAAiR,cAAA,OACAS,EAAA1R,SAAAiR,cAAA,OACAU,EAAA3R,SAAAiR,cAAA,OACAR,KACAwB,GAAA,EACAhrB,IAEA,KAAAK,MAAAmoB,QAAAQ,GAAwC,SAAA/lB,OAAA,sCA4OxC,OAzCAjD,GAAA8N,WAAAxO,EAAAU,KACAA,EAAAipB,oBACAjpB,EAAAqpB,YAtEA,WACA,GAAA4B,MACA/rB,EAAAI,EAAA4rB,aAAA5rB,EAAA4X,OACAgS,KACA5pB,EAAA8qB,kBAAAf,EAAA,gCACA4B,EAAA/kB,EAAAkD,EAAAkO,KAAApY,EAAAoY,KACA2T,EAAA7kB,EAAAgD,EAAAoO,IAAAtY,EAAAsY,IACAyT,EAAA3kB,OAAA,EACA6kB,GAAA,EACA9B,EAAA7mB,MAAA4oB,SAAA,WACAX,EAAAjoB,MAAA6oB,MAAA/rB,EAAAkD,MAAA8oB,sBACAZ,EAAAloB,MAAA6oB,MAAA/rB,EAAAkD,MAAA8oB,uBACAb,EAAAC,GAAAvqB,QAAA,SAAAorB,GACAA,EAAA/oB,MAAAgpB,UAAA,SACAD,EAAA/oB,MAAA4oB,SAAA,WACAG,EAAA/oB,MAAAipB,OAAAN,EAAA,IAEA9B,EAAA7mB,MAAAipB,OAAAN,EACAlC,KAAAyC,gBACArC,EAAA7mB,MAAAmpB,UAAAnrB,OAAAorB,YAAAX,EAAA7kB,EAAA9G,EAAAkD,MAAAqpB,yBAAA,KACAxC,EAAA7mB,MAAAspB,SAAA1iB,EAAA7C,MAAA,KACA0kB,EAAA7kB,GAAAgD,EAAA9C,QAEA+iB,EAAA7mB,MAAA8U,KAAA2T,EAAA/kB,EAAA,KACAmjB,EAAA7mB,MAAAgV,IAAAyT,EAAA7kB,EAAA,KACAijB,EAAApQ,iBAAA,SAAAuR,GACAnB,EAAApQ,iBAAA,iBAAAjW,GACA1D,EAAA2W,WACAoT,EAAAnc,WAAAlK,EAAA0e,OACA2H,EAAAjc,YAAApK,EAAAye,QAEA+I,MAEAC,EAAAtlB,UAAA7F,EAAAkD,MAAAupB,uBACArB,EAAAvlB,UAAA7F,EAAAkD,MAAAwpB,yBACA3C,EAAAc,YAAAM,GACA1R,SAAAC,KAAAmR,YAAAO,GACA3R,SAAAC,KAAAmR,YAAAd,GACApS,EAAAoS,EAAAlS,0BACAF,EAAAkG,OAAA3c,OAAAorB,cAAA3C,KAAAyC,gBACAT,EAAA7kB,EAAA5F,OAAAorB,YAAAvC,EAAA9b,aACA0d,EAAA7kB,EAAA,IAAoC6kB,EAAA7kB,EAAA,GACpCijB,EAAA9b,aAAA/M,OAAAorB,cACAvC,EAAA7mB,MAAA8D,OAAA9F,OAAAorB,YAAAtsB,EAAAkD,MAAAypB,wBAAA,OAGAhV,EAAAmG,MAAA5c,OAAA0rB,aAEAjB,EAAA/kB,EADA+iB,EACAA,EAAAI,UAAApc,WAAAoc,EAAA/b,YAEA9M,OAAA0rB,WAAA7C,EAAA/b,aAGA+b,EAAA7mB,MAAA8U,KAAA2T,EAAA/kB,EAAA,KACAmjB,EAAA7mB,MAAAgV,IAAAyT,EAAA7kB,EAAA,KACA6Q,EAAAoS,EAAAlS,wBACAsT,EAAAjoB,MAAAgV,IAAAP,EAAAO,IAAA,KACAkT,EAAAloB,MAAAgV,IAAAP,EAAAO,IAAAP,EAAA3Q,OAAAokB,EAAAnd,aAAA,KACAkd,EAAAjoB,MAAA8U,KAAAL,EAAAK,KAAA,KACAoT,EAAAloB,MAAA8U,KAAAL,EAAAK,KAAA,KACAoT,EAAAloB,MAAA+D,MAAA8iB,EAAA/b,YAAA,KACAmd,EAAAjoB,MAAA+D,MAAA8iB,EAAA/b,YAAA,KACAod,EAAAzR,iBAAA,YAAA0R,EAAA,SACAD,EAAAzR,iBAAA,WAAA8R,EAAA,SACAN,EAAAxR,iBAAA,YAAA0R,EAAA,OACAF,EAAAxR,iBAAA,WAAA8R,EAAA,OACAP,OAMAxqB,EAAAsqB,aACAtqB,EAAAiX,OACAjX,EAAAgpB,QACAhpB,EAAAyqB,UACAzqB,EAAA0qB,YACA1qB,EAAAe,QAAA,WACA0X,aAAAoS,GACArB,EAAArpB,QAAA,SAAAlC,GACAA,EAAA8C,aAEA2pB,EAAAD,EAAApB,GAAAlpB,QAAA,SAAAorB,GACAA,EAAAtnB,YAAwCsnB,EAAAtnB,WAAAygB,YAAA6G,MAGxCjtB,OAAAC,eAAAyB,EAAA,iBACAtB,IAAA,WACA,MAAAssB,IAEA3mB,IAAA,SAAAC,GACA,mBAAAA,IAAAf,MAAAe,IAAA6nB,SAAA7nB,IACA,SAAArB,OAAA,qDAEA+nB,GAAA1mB,EACA0mB,EAAAhC,EAAA9jB,OAAA,IACA8lB,EAAAhC,EAAA9jB,OAAA,GAEA8lB,EAAA,IACAA,EAAA,GAEAhC,EAAA7oB,QAAA,SAAA0B,EAAAmO,GACA,GAAAA,IAAAgb,EACA,MAAA1rB,GAAA8qB,kBAAAvoB,EAAA0nB,qBAAA,0CAEAjqB,GAAA8qB,kBAAAvoB,EAAA0nB,qBAAA,0CAIAvpB,EAEA,QAAAosB,GAAAppB,GAQA,QAAAqpB,KACAC,EAAA9pB,MAAA+pB,WAAAjtB,EAAAkD,MAAAgqB,6BACAF,EAAA9pB,MAAA6oB,MAAA/rB,EAAAkD,MAAAiqB,wBACAntB,EAAAwoB,qBACAwE,EAAA9pB,MAAA+pB,WAAAjtB,EAAAkD,MAAAkqB,qCACAJ,EAAA9pB,MAAA6oB,MAAA/rB,EAAAkD,MAAAmqB,iCAGA,QAAAC,KACAC,KACAvtB,EAAAsD,KAAAd,OAAA,SAAA5D,EAAAL,GAAkD,MAAAA,GAAAyB,EAAAE,WAAAstB,uBAAmD3sB,QAAA,SAAAsM,GACrG,GAAAnI,GAAAmI,EAAAzJ,EAAA8C,KAAA6E,OAAAxM,KACA0uB,GAAAvoB,KACAuoB,EAAAvoB,IACAyJ,MAAAzO,EAAA4M,WAAAlJ,EAAA8C,KAAA6E,OAAAwB,MAAA,WAAgFrG,MAAQxB,WACxFsV,MAAA,SAAA5W,GACAspB,EAAAhoB,QACAtB,EAAAqV,kBACAiU,EAAA3pB,cAAA,GAAA4nB,OAAA,UACAjrB,EAAAytB,2BAKAF,EAAAvuB,OAAAmH,KAAAonB,GAAAxX,IAAA,SAAAjR,GACA,MAAAyoB,GAAAzoB,KAGA,QAAA4oB,GAAAxgB,GACAA,IAAA,oBAAAlB,QAAAkB,EAAAuU,WACA6L,IACAK,EAAAX,EAAAnV,wBACA+V,IACAA,EAAAnsB,UACAmsB,MAAA7tB,IAEA6tB,EAAAnE,EAAA/lB,GACAsU,KAAA2V,EAAA3V,KACAE,IAAAyV,EAAAzV,IACA4F,MAAA6P,EAAA7P,MACAD,OAAA8P,EAAA9P,OACA7W,OAAA2mB,EAAA3mB,OACAC,MAAA0mB,EAAA1mB,OACiBsmB,GAAsBnB,eAAA,IACvCwB,EAAAlC,cAAA,GAnDA,GAKA6B,GACAI,EANAE,EAAApU,SAAAiR,cAAA,OACAoD,EAAArU,SAAAiR,cAAA,OACAqD,EAAAtU,SAAAiR,cAAA,UACAsC,EAAAvT,SAAAiR,cAAA,SACArrB,EAAAqE,EAAA8C,MAAA9C,EAAA8C,KAAA6E,OAAA3H,EAAA8C,KAAA6E,OAAAoD,OAAA/K,EAAA8C,KAAA6E,OAAAxM,KAAA,EAiDAmB,GAAA8qB,kBAAAgD,EAAA,sCACA9tB,EAAA8qB,kBAAAiD,EAAA,8CACA/tB,EAAA8qB,kBAAAkC,EAAA,6CACAD,IACAC,EAAAgB,QAAAhuB,EAAAytB,oBACAT,EAAArT,iBAAA,mBAAAjW,GAEA,KAAAA,EAAA+d,UACAmM,EAAAlC,eAAA,GAGA,KAAAhoB,EAAA+d,UACAmM,EAAAlC,eAAA,GAGA,KAAAhoB,EAAA+d,UACAmM,EAAA5C,WAAA4C,EAAAlC,eACA1rB,EAAA0mB,sBAGA,IAAAhjB,EAAA+d,UACAmM,EAAA5C,WAAA4C,EAAAlC,eACAhoB,EAAAsV,kBAGA,KAAAtV,EAAA+d,SACAzhB,EAAA0mB,uBAGAsG,EAAArT,iBAAA,mBACA3Z,EAAA2e,UAAAjb,EAAA8C,KAAA6E,OAAAxM,KAAAmuB,EAAAhoB,SAEAgoB,EAAArT,iBAAA,QAAA+T,IACA,2CAAA7sB,QAAA,SAAAotB,GACAjB,EAAArT,iBAAAsU,EAAAlB,KAEAC,EAAAhoB,MAAAtB,EAAA8C,KAAA6E,OAAArL,EAAAmQ,cAAAzM,EAAA8C,KAAA6E,OAAAxM,OAAA,MACAivB,EAAAjoB,UAAA7F,EAAAE,WAAAguB,iBAAAzL,QAAA,MAAApjB,GACA0uB,EAAAC,QAAA,WACA,GAAAJ,EACA,MAAA5tB,GAAAytB,qBAEAC,MAEAK,EAAAloB,UAAA7F,EAAAkD,MAAAirB,wBACAN,EAAAlU,iBAAA,iBAAAjW,GACA,MAAAA,GAAAqV,oBAEA8U,EAAAhD,YAAAiD,GACAD,EAAAhD,YAAAmC,GACAa,EAAAhD,YAAAkD,GACArqB,EAAAgmB,MAAAjlB,MACAgK,MAAAof,IAEA7uB,OAAAmH,KAAAnG,EAAAmQ,eAAAvK,QACA5G,OAAAmH,KAAAnG,EAAAmQ,eAAAtP,QAAA,SAAAutB,GACA,GAAAhlB,GAAApJ,EAAA0lB,gBAAA0I,EACA1qB,GAAAgmB,MAAAjlB,MACAgK,MAAAzO,EAAAE,WAAAmuB,uBAAA5L,QAAA,MAAArZ,EAAAqF,OAAArF,EAAAvK,MACAyb,MAAA,SAAA5W,GACAA,EAAAsV,iBACAhZ,EAAA2e,UAAAyP,EAAA,IACApuB,EAAAohB,aAAAC,aAMA,QAAAiN,GAAA5qB,GACA,GAAA6qB,KAAA7qB,EAAA8C,KAAAgoB,cAAA9qB,EAAA8C,KAAA2H,iBACAzK,EAAA8C,KAAAioB,aAAA/qB,EAAA8C,KAAAmF,UAAAjI,EAAA8C,KAAAoF,cACAlI,EAAA8C,KAAA6E,MACArL,GAAAE,WAAAwuB,YAAAH,GACAzB,EAAAppB,GAEA1D,EAAAE,WAAAyuB,UACA3uB,EAAA+L,WAAA8J,OAAA,SAAAlW,EAAA2J,GACA,MAAA3J,GAAA2J,EAAA1D,QACqB,MACrBlC,EAAAgmB,MAAAjlB,MACAgK,MAAAzO,EAAAE,WAAA0uB,SACAtU,MAAA,WACAb,SAAAoV,YAAA,QACA7uB,EAAA0mB,qBACA1mB,EAAAohB,aAAAC,WAIArhB,EAAAE,WAAAwP,gBAAA1P,EAAAE,WAAA4uB,0BACA9vB,OAAAmH,KAAAnG,EAAAiN,MAAAR,MAAA7G,OAAA,GACA5G,OAAAmH,KAAAnG,EAAAiN,MAAAP,SAAA9G,OAAA,IACAlC,EAAAgmB,MAAAjlB,MACAgK,MAAAzO,EAAAE,WAAA6uB,wBACAzU,MAAA,SAAA5W,GACAA,EAAAsV,iBACAhZ,EAAAiN,MAAAR,QACAzM,EAAAiN,MAAAP,WACA1M,EAAAqS,kBACArS,EAAAgkB,qBACAhkB,EAAAylB,mBAAA1lB,GACAC,EAAAqD,cAAA,gBAA4D+J,YAAApN,EAAAkD,MAAAkK,cAC5DpN,EAAAqD,cAAA,aAAyD0K,WAAA/N,EAAAkD,MAAA6K,aACzD/N,EAAA0f,iBACA1f,EAAA6E,QAAA,GACA7E,EAAA0mB,qBACA1mB,EAAAohB,aAAAC,WAIArhB,EAAAE,WAAA8uB,cAAAhvB,EAAAE,WAAA+uB,mBAAAV,IACA7qB,EAAAgmB,MAAAjlB,MACAgK,MAAAzO,EAAAE,WAAAgvB,yBAAAzM,QAAA,KAAA/e,EAAA8C,KAAA6E,OAAAoD,OAAA/K,EAAA8C,KAAA6E,OAAAxM,MACAyb,MAAA,SAAApN,GACAA,EAAA8L,iBACAhZ,EAAAyT,MAAA/P,EAAA8C,KAAA6E,OAAAxM,KAAA,OACAmB,EAAAohB,aAAAC,WAGA3d,EAAAgmB,MAAAjlB,MACAgK,MAAAzO,EAAAE,WAAAivB,0BAAA1M,QAAA,KAAA/e,EAAA8C,KAAA6E,OAAAoD,OAAA/K,EAAA8C,KAAA6E,OAAAxM,MACAyb,MAAA,SAAApN,GACAA,EAAA8L,iBACAhZ,EAAAyT,MAAA/P,EAAA8C,KAAA6E,OAAAxM,KAAA,QACAmB,EAAA0mB,qBACA1mB,EAAAohB,aAAAC,YAzaA,GAAAkK,GAAAqC,EAAA/B,EAAA,CA8aA7rB,GAAAytB,oBAAA,WACAG,IACAA,EAAAnsB,UACAmsB,MAAA7tB,KAGAC,EAAA0mB,mBAAA,WACAjN,SAAAc,oBAAA,QAAAva,EAAA0mB,oBACAmF,EAAA,EACA7rB,EAAAytB,sBACAztB,EAAAoc,aACApc,EAAAoc,YAAA3a,UAEAzB,EAAAoc,gBAAArc,IAEAC,EAAAovB,iBAAA,SAAA1rB,EAAAyY,GAIA,QAAAkT,KACAxd,sBAAA,WACA4H,SAAAE,iBAAA,QAAA3Z,EAAA0mB,oBACAjN,SAAAc,oBAAA,UAAA8U,KANA,GAAArvB,EAAA2W,UAAAjT,EAAAgd,SAAA1gB,EAAA4X,OAAA,CASA,GAAA8R,MACA5f,EAAAqS,GAAAnc,EAAAsc,YAAA5Y,GAAA,GACAwJ,GACA4L,YAAApV,EACA8C,KAAAxG,EAAA0Y,UAAA5O,EAAAlD,EAAAkD,EAAAhD,GACA4iB,QAEAxc,GAAA1G,KAAA8F,QACAgiB,EAAAphB,GAEAlN,EAAAqD,cAAA,cAAA6J,IAGAA,EAAA1G,KAAA8F,SACAtM,EAAAoc,aACApc,EAAA0mB,qBAEA1mB,EAAAoc,YAAAqN,EAAAvc,GACA8K,KAAAlO,EAAAlD,EAAAkD,EAAA6N,KAAAK,KAAAhY,EAAAkD,MAAAosB,sBAAAtvB,EAAA6G,iBACAqR,IAAApO,EAAAhD,EAAAgD,EAAA6N,KAAAO,IAAAlY,EAAAkD,MAAAqsB,qBAAAvvB,EAAA+G,gBACA+W,MAAA5Q,EAAA1G,KAAAS,MAAAiG,EAAA1G,KAAAI,EAAAkD,EAAA6N,KAAAK,KACA6F,OAAA3Q,EAAA1G,KAAAQ,OAAAkG,EAAA1G,KAAAM,EAAAgD,EAAA6N,KAAAO,IACAlR,OAAAkG,EAAA1G,KAAAQ,OACAC,MAAAiG,EAAA1G,KAAAS,OACiByiB,GACjBjQ,SAAAE,iBAAA,UAAA0V,GACA3rB,EAAAsV,sBAKC5Y,MAAAtC,EAAA+B,MAAA9B,EAAAD,QAAAgC,IR+1GK,SAAU/B,EAAQD,EAASM,GS10HjC,GAAAyB,GAAAC,CAEAD,UA6fCE,MA7fDD,EAAA,WACA,YACA,iBAAAE,GACAA,EAAAsnB,gBAAA,SAAAkI,GACA,GAAAC,GAAAzvB,EAAA8rB,SAAA9rB,EAAA2E,YACA+qB,EAAA1vB,EAAA8rB,SAAA0D,GACA5vB,EAAAI,EAAA4rB,aAAA5rB,EAAA4X,QACA+X,GACA/oB,EAAA,EACAE,EAAA,EACAsC,EAAA,EACAD,EAAA,GAEAymB,GACAhpB,GAAAipB,IACA/oB,GAAA+oB,IACAzmB,EAAAymB,IACA1mB,EAAA0mB,KAEA7d,EAAAhS,EAAAiS,yBACAb,EAAApR,EAAAkS,0BASA,OARAud,GAAAvX,KAAAtY,EAAAsY,IACAuX,EAAAzX,MAAApY,EAAAoY,KACA0X,EAAAxX,KAAAtY,EAAAsY,IACAwX,EAAA1X,MAAApY,EAAAoY,KACA2X,EAAAvmB,EAAAqmB,EAAAvX,IAAAuX,EAAAzoB,OAAAwoB,EAAA9hB,UAAA1N,EAAAkD,MAAAwO,eACAie,EAAAxmB,EAAAsmB,EAAAzX,KAAAyX,EAAAxoB,MAAAuoB,EAAA7hB,WAAA3N,EAAAkD,MAAAwO,eACAie,EAAA/oB,EAAA6oB,EAAAzX,MAAA,EAAA0X,EAAA1X,KAAA5G,EACAue,EAAA7oB,EAAA2oB,EAAAvX,KAAA,EAAAwX,EAAAxX,IAAAlG,GAEApL,EAAA+oB,EAAA/oB,EAAAgpB,EAAAhpB,EAAA+oB,EAAA/oB,EAAAgpB,EAAAhpB,EACAE,EAAA6oB,EAAA7oB,EAAA8oB,EAAA9oB,EAAA6oB,EAAA7oB,EAAA8oB,EAAA9oB,EACAsC,EAAAumB,EAAAvmB,EAAAwmB,EAAAxmB,EAAAumB,EAAAvmB,EAAAwmB,EAAAxmB,EACAD,EAAAwmB,EAAAxmB,EAAAymB,EAAAzmB,EAAAwmB,EAAAxmB,EAAAymB,EAAAzmB,IAGAnJ,EAAA4mB,YAAA,SAAA4I,GACA,GAAAG,GAAA3vB,EAAAsnB,gBAAAkI,EACAG,GAAAxmB,EAAA,IAAiCwmB,EAAAxmB,EAAA,GACjCwmB,EAAAvmB,EAAA,IAAiCumB,EAAAvmB,EAAA,GACjComB,EAAAtsB,MAAAoM,KAAA,QACAqgB,EAAA7oB,EAAA,MACA6oB,EAAAxmB,EAAA,MACAwmB,EAAAvmB,EAAA,MACAumB,EAAA/oB,EAAA,OAcA5G,EAAA4rB,aAAA,SAAAloB,GAEA,IADA,GAAAkD,GAAA,EAAAE,EAAA,EACApD,EAAAiB,YAAA,oBAAAjB,EAAAosB,UACA,yBAAApsB,EAAA+J,UACA,yBAAA/J,EAAA+J,WACA7G,GAAAlD,EAAAoK,WACAhH,GAAApD,EAAAkK,WAEAlK,IAAAiB,UAEA,QAAoBqT,KAAApR,EAAAsR,IAAApR,IAEpB9G,EAAAgc,gBAAA,WACA,GAAAhc,EAAAqc,MAAA,CACA,GAAAvS,GAAA9J,EAAA4X,OAAAC,wBACAjY,EAAAI,EAAA4rB,aAAA5rB,EAAA4X,QACAmY,EAAA,EAAA/vB,EAAAkD,MAAAmK,gBACA7G,EAAAxG,EAAAgwB,sBAAAhwB,EAAAqc,MAAA4T,SAAA5jB,YAAArM,EAAAqc,MAAA4T,SAAA9kB,YAC4BvE,GAAA,IAAAE,GAAA,IAAAE,OAAA,EAAAC,MAAA,EAC5BjH,GAAAqc,MAAAnZ,MAAA8U,KAAAlO,EAAAkO,KAAAxR,EAAAI,EAAA5G,EAAAkD,MAAAmK,gBAAArN,EAAA6G,iBAAAjH,EAAAoY,KAAA,KACAhY,EAAAqc,MAAAnZ,MAAAgV,IAAApO,EAAAoO,IAAA1R,EAAAM,EAAAipB,EAAA/vB,EAAA+G,gBAAAnH,EAAAsY,IAAA,KACAlY,EAAAqc,MAAAnZ,MAAA8D,OAAAR,EAAAQ,OAAA+oB,EAAA,OACA/vB,EAAAqc,MAAAnZ,MAAA+D,MAAAT,EAAAS,MAAA8oB,EAAA/vB,EAAAkD,MAAAgtB,gBAAA,KACAlwB,EAAA4mB,YAAA5mB,EAAAqc,SAGArc,EAAA8rB,SAAA,SAAApoB,EAAAysB,GAEA,IADA,GAAA/mB,GAAAD,EAAAvC,EAAA,EAAAE,EAAA,EAAAlH,EAAA8D,EACAA,EAAAwK,cAAA,oBAAAxK,EAAAosB,UACAlpB,GAAAlD,EAAAiK,WACA7G,GAAApD,EAAAgK,UACAtE,EAAA1F,EAAAuK,aACA9E,EAAAzF,EAAAsK,YACAtK,IAAAwK,YAEA,OAAAiiB,IACwBnY,KAAApR,EAAAsR,IAAApR,EAAAE,OAAAoC,EAAAnC,MAAAkC,IAExBzF,EAAA9D,EACAA,EAAAI,EAAA4rB,aAAAloB,IACoBsU,KAAApR,EAAAhH,EAAAoY,KAAAE,IAAApR,EAAAlH,EAAAsY,IAAAlR,OAAAoC,EAAAnC,MAAAkC,KAEpBnJ,EAAAsc,YAAA,SAAA5Y,GACA,GAAAiU,GAAA3X,EAAA4X,OAAAC,wBACA/N,GACAlD,EAAAlD,EAAAqU,QAAAJ,EAAAK,KACAlR,EAAApD,EAAAuU,QAAAN,EAAAO,IAMA,OAJAlY,GAAA4R,cACA9H,EAAAlD,GAAA5G,EAAA6G,iBACAiD,EAAAhD,GAAA9G,EAAA+G,kBAGAH,EAAAkD,EAAAlD,EACAE,EAAAgD,EAAAhD,EACA6Q,SAUA3X,EAAAye,QAAA,SAAA2R,GAGA,QAAAC,KACAD,GAAA,EAHA,GAAA5pB,GAAAxG,EAAAqc,MAAA4T,SACAnpB,EAAAN,EAAA2E,QAIA,IAAAnL,EAAAqD,cAAA,iBACAmD,OACA8pB,SAAAtwB,EAAAqc,MAAArX,MACAurB,SAAA/pB,EAAAxB,MACAorB,MAAAC,EACAhU,MAAArc,EAAAqc,QACqB,QACrB,IAAArc,EAAAqc,MAAArX,QAAAwB,EAAAxB,QAAAorB,EAAA,CAIA,GAHApwB,EAAAojB,QAAAtc,GAAA9G,EAAAojB,QAAAtc,OACA9G,EAAAojB,QAAAtc,GAAAN,EAAA6E,OAAAxM,MAAAmB,EAAAqc,MAAArX,MACAwB,EAAAlD,KAAAkD,EAAA6E,OAAAxM,MAAAmB,EAAAqc,MAAArX,MACA8B,IAAA9G,EAAAsD,KAAAsC,OAAA,CACA,GAAA5F,EAAAqD,cAAA,UACA2B,MAAAhF,EAAAqc,MAAArX,MACAkf,aAAA1d,EAAAxB,MACAwrB,QAAAJ,EACA5pB,OACA6V,MAAArc,EAAAqc,QAC6B,QAC7Brc,GAAAmjB,KAAA,EACAnjB,EAAAknB,OAAA1gB,EAAAlD,MACAtD,EAAAmkB,mBAEAnkB,EAAAoD,MAAA,GAWA,MATAqW,UAAAC,KAAA0L,YAAAplB,EAAAqc,OACArc,EAAAohB,aAAAC,QACArhB,EAAAqD,cAAA,WACAmD,OACAxB,MAAAhF,EAAAqc,MAAArX,MACAwrB,QAAAJ,EACA/T,MAAArc,EAAAqc,QAEArc,EAAAqc,UAAAtc,IACA,GAUAC,EAAAqa,YAAA,SAAAzT,EAAAE,GACA,GAAA9G,EAAAE,WAAAuwB,SAAA,CACA,GAEAC,GAGAC,EACAC,EANApqB,EAAAxG,EAAAgwB,sBAAAppB,EAAAE,GACAlH,EAAAI,EAAAsS,mBAGAue,EAAArqB,EAAA6E,OAAA,IAGA,IAAArL,EAAAqD,cAAA,mBAAuDmD,SAAe,QACtExG,GAAA2hB,eAAA/a,EAAAE,GACA9G,EAAA8e,cAAAlY,EAAAE,GAEA9G,EAAAqc,MADAwU,EACApX,SAAAiR,cAAA,UAEAjR,SAAAiR,cAAA1qB,EAAAE,WAAA4wB,UACA,oBAEAtqB,EAAAxG,EAAAgwB,sBAAAppB,EAAAE,GACA+pB,IAEA,kBAAAA,GACAH,EAAAG,EAAAzwB,MAAAJ,EAAAU,OAAuD8F,UACtCzF,MAAAmoB,QAAA2H,KACjBH,EAAAG,GAEAH,EAAA7vB,QAAA,SAAA6C,GACA,GACAV,GACAyL,EAFAlQ,EAAAkb,SAAAiR,cAAA,SAGA3pB,OAAAmoB,QAAAxlB,IACAV,EAAAU,EAAA,GACA+K,EAAA/K,EAAA,KAEAV,EAAAU,EACA+K,EAAA/K,GAEAV,IAAAwD,EAAAxB,QAA6C4rB,GAAA,GAC7CryB,EAAAyG,MAAAhC,EACAzE,EAAAsH,UAAA4I,EACAzO,EAAAqc,MAAAwO,YAAAtsB,KAEAqyB,IACAD,EAAAlX,SAAAiR,cAAA,UACAiG,EAAA3rB,MAAAwB,EAAAxB,MACA2rB,EAAA9qB,UAAAW,EAAAxB,MACAhF,EAAAqc,MAAAwO,YAAA8F,IAEA3wB,EAAAqc,MAAA1C,iBAAA,oBACA3Z,EAAAye,UACAze,EAAAoD,MAAA,MAGAqW,SAAAC,KAAAmR,YAAA7qB,EAAAqc,OACArc,EAAA8qB,kBAAA9qB,EAAAqc,MAAA,8BACArc,EAAAqc,MAAAnZ,MAAA4oB,SAAA,WACA9rB,EAAAqc,MAAA4T,SAAAzpB,EACAxG,EAAAgc,kBACAhc,EAAAqc,MAAAnZ,MAAAipB,OAAA,IACAnsB,EAAAqc,MAAArX,MAAAwB,EAAAxB,MACAhF,EAAAqc,MAAAgF,QACArhB,EAAAqc,MAAA1C,iBAAA,QAAA3Z,EAAA+Y,iBACA/Y,EAAAqc,MAAA1C,iBAAA,WAAA3Z,EAAA+Y,iBACA/Y,EAAAqc,MAAA1C,iBAAA,UAAA3Z,EAAA+Y,iBACA/Y,EAAAqc,MAAA1C,iBAAA,YAAA3Z,EAAA+Y,iBACA/Y,EAAAqc,MAAA1C,iBAAA,mBAAAjW,GACA,GAAAqtB,GAAAvqB,EAAA6F,YACA2kB,EAAAxqB,EAAA2E,QAEA,SAAAzH,EAAA+d,QACAzhB,EAAAye,SAAA,GACAze,EAAAoD,MAAA,OAEiB,SAAAM,EAAA+d,WACjBzhB,EAAAE,WAAA4wB,WACA9wB,EAAAE,WAAA4wB,WAAAptB,EAAAia,UACA3d,EAAAye,UACAze,EAAAoD,MAAA,OACiB,QAAAM,EAAA+d,QAAA,CAEjB,GADA/d,EAAAsV,kBACAhZ,EAAAye,UACA,MAEA/a,GAAAia,SACAoT,GAAA,EAEAA,GAAA,EAEAA,EAAA,IACAA,EAAAnxB,EAAAgG,OAAA,EACAorB,GAAA,GAEAD,EAAAnxB,EAAAgG,OAAA,IACAmrB,EAAA,EACAC,GAAA,GAEAA,EAAA,IACAA,EAAAhxB,EAAAsD,KAAAsC,OAAA,GAEAorB,EAAAhxB,EAAAsD,KAAAsC,OAAA,IACAorB,EAAA,GAEAhxB,EAAA2hB,eAAAoP,EAAAC,GACAhxB,EAAAqa,YAAA0W,EAAAC,MAGAhxB,EAAAqD,cAAA,aAA6CmD,OAAA6V,MAAArc,EAAAqc,UAE7Crc,EAAA8qB,kBAAA,SAAAmB,EAAAgF,GACA,GAAAC,IACAC,6CACAnqB,OAAA,OACAoqB,cAAA,SACAC,WAAA,MACAC,QAAA,IACArE,WAAAjtB,EAAAkD,MAAAgqB,6BACAnB,MAAA/rB,EAAAkD,MAAAiqB,wBACAoE,OAAAvxB,EAAAkD,MAAAsuB,yBACAC,aAAAzxB,EAAAkD,MAAAwuB,+BACAC,WAAA,SACAC,WAAA,SACAC,WAAA7xB,EAAAkD,MAAA4uB,6BACAC,SAAA/xB,EAAAkD,MAAA8uB,4BAEAC,8CACAjrB,OAAA,OACAoqB,cAAA,SACAC,WAAA,MACAC,QAAA,IACArE,WAAAjtB,EAAAkD,MAAAgvB,sBACAnG,MAAA/rB,EAAAkD,MAAAivB,iBACAZ,OAAAvxB,EAAAkD,MAAAkvB,0BACAX,aAAAzxB,EAAAkD,MAAAmvB,gCACAV,WAAA,SACAC,WAAA,SACAC,WAAA7xB,EAAAkD,MAAAovB,kCACAP,SAAA/xB,EAAAkD,MAAAqvB,iCAEAC,uCACAC,SAAA,QACA1G,MAAA/rB,EAAAkD,MAAAwvB,2BACAX,SAAA/xB,EAAAkD,MAAAyvB,8BACAd,WAAA7xB,EAAAkD,MAAA0vB,sBACAxB,cAAA,UAEAyB,gCACAhB,WAAA7xB,EAAAkD,MAAA0vB,sBACAb,SAAA/xB,EAAAkD,MAAA4vB,oBACA7F,WAAAjtB,EAAAkD,MAAAgvB,sBACAnG,MAAA/rB,EAAAkD,MAAAivB,iBACAZ,OAAAvxB,EAAAkD,MAAA6vB,kBACAzB,QAAAtxB,EAAAkD,MAAA8vB,mBACAvB,aAAAzxB,EAAAkD,MAAA+vB,wBACAC,QAAAlzB,EAAAkD,MAAAiwB,mBACArH,SAAA,WACAK,OAAA,EACAiH,SAAA,UAEAC,qCACApG,WAAAjtB,EAAAkD,MAAAgvB,sBACAnG,MAAA/rB,EAAAkD,MAAAivB,kBAEAmB,2CACArG,WAAAjtB,EAAAkD,MAAAqwB,2BACAxH,MAAA/rB,EAAAkD,MAAAswB,uBAEAC,0BACA3H,SAAA,WACAK,OAAA,MAEAuH,mBACA5H,SAAA,WACAmB,WAAAjtB,EAAAkD,MAAAuP,gBACA0Z,OAAA,IACAwH,UAAA,cACArC,QAAA,KAEAsC,iCACA9H,SAAA,QACA5T,IAAA,OACAF,KAAA,OACAuZ,OAAA,OACA2B,QAAA,IACA5V,OAAA,UACArW,MAAA,MACAD,OAAA,MACA2qB,WAAA,SACAC,WAAA,SACAC,WAAA7xB,EAAAkD,MAAA0vB,sBACAb,SAAA/xB,EAAAkD,MAAA4vB,qBAEAe,8BACAF,UAAA,cACAG,QAAA,OACAC,OAAA,IACAzC,QAAA,SAAAtxB,EAAAkD,MAAA8wB,oBAAA,KACArC,WAAA,SACAC,WAAA,SACAC,WAAA7xB,EAAAkD,MAAA+wB,mBACAlC,SAAA/xB,EAAAkD,MAAAgxB,iBACAC,UAAAn0B,EAAAkD,MAAAkxB,kBACA7C,OAAAvxB,EAAAkD,MAAAmxB,eACAtI,MAAA/rB,EAAAkD,MAAAoxB,cACArH,WAAAjtB,EAAAkD,MAAAqxB,wBACAC,WAAA,OACAC,iBAAA,OACAC,cAAA,OACAjD,aAAA,KAEAkD,qCACAhD,WAAA,SACAC,WAAA,SACAC,WAAA7xB,EAAAkD,MAAA0vB,sBACAb,SAAA/xB,EAAAkD,MAAA4vB,oBACA/G,MAAA,UACAkB,WAAA,UACA8G,OAAA/zB,EAAAkD,MAAA0xB,sBACAnD,aAAAzxB,EAAAkD,MAAA2xB,4BACAzD,cAAA,UAEA0D,2CACA7H,WAAAjtB,EAAAkD,MAAAqwB,2BACAxH,MAAA/rB,EAAAkD,MAAAswB,uBAEAuB,sCACAhB,OAAA/zB,EAAAkD,MAAA8xB,uBACAC,QAAAj1B,EAAAkD,MAAAgyB,wBACA1I,SAAAxsB,EAAAkD,MAAAiyB,yBACAC,SAAAp1B,EAAAkD,MAAAmyB,0BAEAC,gCACA3D,WAAA,SACAC,WAAA,SACAC,WAAA7xB,EAAAkD,MAAA0vB,sBACAb,SAAA/xB,EAAAkD,MAAA4vB,oBACA7F,WAAAjtB,EAAAkD,MAAAgvB,sBACAnG,MAAA/rB,EAAAkD,MAAAivB,iBACAZ,OAAAvxB,EAAAkD,MAAA6vB,kBACAzB,QAAAtxB,EAAAkD,MAAA8vB,mBACAvB,aAAAzxB,EAAAkD,MAAA+vB,wBACAC,QAAAlzB,EAAAkD,MAAAiwB,mBACAC,SAAA,SACAmC,WAAA,UAEAC,yCACAvI,WAAAjtB,EAAAkD,MAAAuyB,mCAGAvE,GAAAD,IACAjyB,OAAAmH,KAAA+qB,EAAAD,IAAAlb,IAAA,SAAA/T,GACAiqB,EAAA/oB,MAAAlB,GAAAkvB,EAAAD,GAAAjvB,MAKAhC,EAAAmmB,SAAA,SAAA9mB,GACAW,EAAA2E,WAAAtF,GAAAoa,SAAAiR,cAAA,UACA1qB,EAAA2E,YAAA,8BAAAP,KAAApE,EAAA2E,WAAA8I,WACAzN,EAAA4R,aAAA,EACA5R,EAAAwO,WAAAxO,EAAA2E,WAAA6J,WACAxO,EAAAkH,IAAAlH,EAAAwO,WAAAnO,QACAL,EAAA4X,OAAA5X,EAAAwO,WAAAoJ,OACA5X,EAAAohB,aAAAphB,EAAAwO,WAAA4S,aACAphB,EAAAqlB,YAAArlB,EAAA4X,SAEA5X,EAAAohB,aAAA3H,SAAAiR,cAAA,SACA1qB,EAAAohB,aAAAsU,OAAA11B,EAAAU,KAAAkoB,KACA5oB,EAAA8qB,kBAAA9qB,EAAAohB,aAAA,iCACAphB,EAAA4R,aAAA,EACA5R,EAAAkb,cAAAlb,EAAA2E,WACA3E,EAAA2E,WAAA3E,EAAAkb,cACAlb,EAAAgb,eAAA,YAAA5W,KAAApE,EAAAkb,cAAAya,SACA31B,EAAAS,aACAT,EAAA41B,UAAAnc,SAAAiR,cAAA,SACA1qB,EAAA41B,UAAA/vB,UAAA,gFACA7F,EAAAkb,cAAAlb,EAAA2E,WAAAkxB,cACA71B,EAAA4X,OAAA6B,SAAAiR,cAAA,UACA1qB,EAAA2E,WAAAkmB,YAAA7qB,EAAA41B,WACA51B,EAAA2E,WAAAkmB,YAAA7qB,EAAA4X,QACA5X,EAAA2E,WAAAkmB,YAAA7qB,EAAAohB,eACiBphB,EAAAgb,gBACjBhb,EAAA4X,OAAA5X,EAAAkb,cACAlb,EAAAkb,cAAA2P,YAAA7qB,EAAAohB,gBAEAphB,EAAA4X,OAAA6B,SAAAiR,cAAA,UACA1qB,EAAAkb,cAAA2P,YAAA7qB,EAAA4X,QACA5X,EAAAkb,cAAA2P,YAAA7qB,EAAAohB,eAEAphB,EAAAkH,IAAAlH,EAAA4X,OAAAke,WAAA,MACA91B,EAAAkH,IAAA6uB,aAAA,aACA/1B,EAAAqlB,YAAArlB,EAAA4X,QAEA5X,EAAAohB,aAAAzH,iBAAA,gBAAAjW,GACAA,EAAAgd,SAAA1gB,EAAA4X,SACA5X,EAAA2W,UAAA,KAGAzV,OAAAyY,iBAAA,SAAA3Z,EAAA6E,QACA3D,OAAAoE,mBACAtF,EAAAqF,SAAA,GAAAnE,QAAAoE,iBAAA,SAAAC,GACAA,EAAA1E,QAAA,SAAA4E,GACAzF,EAAA6E,QAAA,QAGA7E,EAAA4X,OAAAjT,YAAA9D,QAAA,SAAAorB,GACAA,GACAjsB,EAAAqF,SAAAT,QAAAqnB,GAA+C/rB,YAAA,OAG/CF,EAAAqlB,YAAA1L,iBAAA,SAAA3Z,EAAA6E,QAAA,GACA7E,EAAAqlB,YAAA1L,iBAAA,aAAA3Z,EAAA6Y,YAAA,GACA7Y,EAAAqlB,YAAA1L,iBAAA,UAAA3Z,EAAAoa,SAAA,GACApa,EAAAqlB,YAAA1L,iBAAA,YAAA3Z,EAAA4Y,WAAA,GACA5Y,EAAAqlB,YAAA1L,iBAAA,WAAA3Z,EAAA+hB,UAAA,GACA/hB,EAAAqlB,YAAA1L,iBAAA,QAAA3Z,EAAAsa,OAAA,GACAta,EAAAqlB,YAAA1L,iBAAA,YAAA3Z,EAAA2Y,WACA3Y,EAAAqlB,YAAA1L,iBAAA,QAAA3Z,EAAAkiB,aAAA,GACAliB,EAAA4X,OAAA+B,iBAAA,cAAA3Z,EAAAovB,kBAAA,IACApvB,EAAA4R,YAAA5R,EAAAwO,WAAAiL,UAAAE,iBAAA,OAAA3Z,EAAAsiB,MACAtiB,EAAAohB,aAAAzH,iBAAA,WAAA3Z,EAAA8hB,UAAA,GACA9hB,EAAAohB,aAAAzH,iBAAA,QAAA3Z,EAAA6hB,OAAA,GACA7hB,EAAAohB,aAAAzH,iBAAA,UAAA3Z,EAAAshB,SAAA,IAEAthB,EAAAkmB,OAAA,WACAlmB,EAAAQ,KAAAmE,YAAA3E,EAAAQ,KAAAmE,WAAAqxB,mBACA93B,KAAAuC,YACAT,EAAAib,wBAAAjb,EAAAQ,KAAAmE,WAAAkxB,cAEA71B,EAAAib,wBAAAjb,EAAAQ,KAAAmE,WAEA3E,EAAA8nB,WAAA9nB,EAAAQ,KAAAmE,WAAAsxB,cAAqEC,KAAAl2B,EAAAQ,KAAAmV,MAAA,kBACrE3V,EAAAQ,KAAAmE,WAAA3E,EAAA8nB,YAEA9nB,EAAAmmB,SAAAnmB,EAAAQ,KAAAmE,eAGCvE,MAAAtC,EAAA+B,MAAA9B,EAAAD,QAAAgC,ITk1HK,SAAU/B,EAAQD,EAASM,GUj1IjC,GAAAyB,GAAAC,CAEAD,UA09BCE,MA19BDD,EAAA,WACA,YACA,iBAAAE,GAUAA,EAAA6nB,eAAA,SAAAxoB,GAKA,IAJA,GAAA82B,GAAA,IAAAC,WAAA,GACAC,EAAA,IAAAD,WAAA,GACAE,EAAAD,EAAAF,EAAA,EACAv2B,EAAA,GACAP,GAAA,GACAO,EAAAooB,OAAAuO,aAAAl3B,EAAAi3B,EAAAH,GAAAv2B,EACAP,EAAAkZ,KAAAie,MAAAn3B,EAAAi3B,GAAA,CAEA,OAAA12B,IAYAI,EAAAmnB,aAAA,SAAAxoB,EAAA+R,GACA,GAAA9Q,GAAAI,EAAA8c,WACA,IAAAld,EAAAgG,OAAA8K,EACA,SAAA/M,OAAA,4CAEA3D,GAAA6kB,eAAAlmB,EAAAiB,GACAA,EAAAib,OAAAnK,EAAA,EAAA/R,GACAqB,EAAAsD,KAAAzC,QAAA,SAAAsM,GACAnN,EAAAikB,kBAAA9W,EAAAxO,KAEAqB,EAAAU,KAAAkD,OAAAhE,GAUAI,EAAAonB,aAAA,SAAA1W,GACA,GAAA9Q,GAAAI,EAAA8c,WAEA9c,GAAAsD,KAAAzC,QAAA,SAAAsM,SACAA,GAAAvN,EAAA8Q,GAAA7R,QAEAe,EAAAib,OAAAnK,EAAA,GACA1Q,EAAAU,KAAAkD,OAAAhE,GAWAI,EAAAqnB,UAAA,SAAA1oB,GACA,GAAAiB,GAAAI,EAAA8c,WACA9c,GAAA6kB,eAAAlmB,EAAAiB,GACAA,EAAA6E,KAAA9F,GACAqB,EAAAsD,KAAAzC,QAAA,SAAAsM,GACAnN,EAAAikB,kBAAA9W,EAAAxO,KAEAqB,EAAAU,KAAAkD,OAAAhE,GASAI,EAAAinB,UAAA,SAAAvW,GACA1Q,EAAA4kB,aAAA/J,OAAAnK,EAAA,GACA1Q,EAAA2e,YACA3e,EAAA6E,QAAA,IAUA7E,EAAAgnB,UAAA,SAAApoB,EAAA8R,GACA,GAAA1Q,EAAA4kB,aAAAhf,OAAA8K,EACA,SAAA/M,OAAA,6CAEA3D,GAAA4kB,aAAA/J,OAAAnK,EAAA,EAAA9R,GACAoB,EAAA8c,YAAAjc,QAAA,SAAAlC,OACAoB,KAAAnB,EAAAD,EAAAE,OACAmB,EAAAikB,kBAAAjkB,EAAA4kB,aAAAlU,GAAA/R,KAGAqB,EAAA2e,YACA3e,EAAA6E,QAAA,IASA7E,EAAAknB,OAAA,SAAAtoB,GACAoB,EAAA4kB,aAAAngB,KAAA7F,GACAoB,EAAA8c,YAAAjc,QAAA,SAAAlC,OACAoB,KAAAnB,EAAAD,EAAAE,OACAmB,EAAAikB,kBAAAjkB,EAAA4kB,aAAA5kB,EAAA4kB,aAAAhf,OAAA,GAAAjH,KAGAqB,EAAA2e,YACA3e,EAAA6E,QAAA,IAUA7E,EAAAunB,aAAA,SAAApc,EAAAnE,GACAhH,EAAAiN,MAAAR,KAAAzM,EAAAsD,KAAA6H,GAAAnL,EAAA8I,WAAA9B,EACAhH,EAAAoD,MAAA,IAUApD,EAAAwnB,eAAA,SAAAiP,EAAAxvB,GACA,GAAArH,GAAAI,EAAA8c,WACA9c,GAAAiN,MAAAP,QAAA9M,EAAA62B,GAAAz2B,EAAA8I,WAAA7B,EACAjH,EAAAoD,MAAA,IASApD,EAAAynB,kBAAA,WACAznB,EAAAiN,MAAAP,WACA1M,EAAAoD,MAAA,IASApD,EAAA0nB,gBAAA,WACA1nB,EAAAiN,MAAAR,QACAzM,EAAAoD,MAAA,IAUApD,EAAA2e,UAAA,SAAAnD,EAAAxW,GACA,QAAA0xB,KACA12B,EAAA2kB,yBACA3lB,OAAAmH,KAAAnG,EAAAmQ,eAAAtP,QAAA,SAAA2B,GACA,GAAA6I,GAAArL,EAAA0lB,gBAAAlK,EACAnQ,KAGArL,EAAAijB,cAAA5X,EAAA7I,QAAAxC,EAAAwC,OAAAgZ,EAAA3O,MAAA,UACA7M,EAAAsD,KAAAtD,EAAAsD,KAAAd,OAAA,SAAA2K,GACA,MAAAnN,GAAAijB,cAAA9V,EAAA3K,GAAAxC,EAAAmQ,cAAA3N,SAGAxC,EAAA6E,SACA7E,EAAAoD,MAAA,GAEA,OAAArD,KAAAyb,OAAAzb,KAAAiF,EAEA,MADAhF,GAAAmQ,iBACAumB,KAEAlb,GAAA,KAAAxW,OAAAjF,KAAAiF,EAGAhF,EAAAmQ,cAAAqL,GAAAxW,QAFAhF,GAAAmQ,cAAAqL,GAIAkb,KASA12B,EAAAwmB,iBAAA,SAAArb,GACA,GAAA+M,GAAA,EAAAtR,EAAA,EAAApI,EAAAwB,EAAAsD,KAAAsC,OACAwV,EAAA,EAAApb,EAAAkD,MAAAmK,eAIA,IAHArN,EAAAE,WAAA4S,aACAtU,GAAA,GAEA2M,EAAA3M,EACA,SAAAmF,OAAA,uBAEA,MAAAiD,EAAAuE,GACA+M,IAAAlY,EAAAiN,MAAAR,KAAAzM,EAAAsD,KAAAsD,GAAA5G,EAAA8I,YAAA9I,EAAAkD,MAAA6K,YAAAqN,EACAxU,GAAA,CAGA,OAAAsR,IAAAlY,EAAAiN,MAAAR,KAAAzM,EAAAsD,KAAA6H,GAAAnL,EAAA8I,YAAA9I,EAAAkD,MAAA6K,aASA/N,EAAAumB,qBAAA,SAAAla,GACA,GAAA2L,GAAA,EAAAlR,EAAA,EAAAlH,EAAAI,EAAA8c,WACA,IAAAzQ,EADAzM,EAAAgG,OAAA,EAEA,SAAAjC,OAAA,0BAEA,MAAAmD,EAAAuF,GACA2L,GAAAhY,EAAAiN,MAAAP,QAAA9M,EAAAkH,GAAA9G,EAAA8I,YAAAlJ,EAAAkH,GAAAG,MACAH,GAAA,CAEA,OAAAkR,IAUAhY,EAAAqmB,SAAA,SAAAzf,EAAAE,OACA/G,KAAA6G,IACA5G,EAAA6N,UAAAC,WAAA9N,EAAAumB,qBAAA3f,QAEA7G,KAAA+G,IACA9G,EAAA6N,UAAAD,UAAA5N,EAAAwmB,iBAAA1f,KAUA9G,EAAAsmB,QAAA,SAAAxf,GACA9G,EAAAqmB,SAAA,EAAAvf,IAUA9G,EAAA2hB,eAAA,SAAA/a,EAAAE,GAQiB,IAPjB9G,EAAA8O,aAAAtM,OAAA,SAAAgE,GACA,OAAAA,EAAA2E,WAAArE,OAAA/G,KAAA+G,KACAN,EAAA6F,cAAAzF,OAAA7G,KAAA6G,IACAJ,EAAAI,EAAA,GACAJ,EAAAM,EAAA,GACAN,EAAAI,EAAAJ,EAAAS,MAAAjH,EAAAiH,OACAT,EAAAM,EAAAN,EAAAQ,OAAAhH,EAAAgH,SACiBpB,QACjB5F,EAAAqmB,SAAAzf,EAAAE,IAWA9G,EAAA8e,cAAA,SAAAlY,EAAAE,GACA9G,EAAAoM,YACAjB,SAAArE,EACAuF,YAAAzF,IASA5G,EAAA0hB,UAAA,WACA1hB,EAAAme,YACAjG,IAAA,EACAF,KAAA,EACA8F,MAAA9d,EAAAsS,mBAAA1M,OAAA,EACAiY,OAAA7d,EAAAsD,KAAAsC,OAAA,KAUA5F,EAAA22B,iBAAA,SAAAtqB,GACA,GAAAuqB,IAAA,CAMA,OALA52B,GAAAsD,KAAAzC,QAAA,SAAAsM,EAAAhC,GACAnL,EAAA+L,WAAAZ,KAAA,IAAAnL,EAAA+L,WAAAZ,GAAAa,QAAAhM,EAAAwM,OAAAE,QAAAL,MACAuqB,GAAA,KAGAA,GAYA52B,EAAA6e,aAAA,SAAAxS,EAAAqQ,EAAAma,EAAAC,GAEA,QAAAC,GAAAx4B,GACAyB,EAAAsD,KAAAzC,QAAA,SAAAsM,EAAAhC,GACAnL,EAAA+L,WAAAZ,GAAAnL,EAAA+L,WAAAZ,QACA,IAAAnL,EAAA+L,WAAAZ,GAAAa,QAAAzN,IACAyB,EAAA+L,WAAAZ,GAAA1G,KAAAlG,KALA,GAAAqB,GAAA8D,EAAAkD,CAiBA,IAAAiwB,EAAA,CACA,IAAA72B,EAAAoM,WAAuC,MAGvC,KAFAxM,EAAA2Y,KAAAqF,IAAA5d,EAAAoM,WAAAC,eACA3I,EAAA6U,KAAAqD,IAAA5b,EAAAoM,WAAAC,eACAzF,EAAAhH,EAA2B8D,EAAAkD,EAAOA,GAAA,EAClCmwB,EAAAnwB,GAGA8V,GAAAma,IACA72B,EAAA+L,cACA/L,EAAAoM,WAAAC,cACArM,EAAAoM,WAAAjB,SAAAnL,EAAA2S,gBAEA+J,GAAA1c,EAAA22B,iBAAAtqB,GArBA,SAAA9N,GACAyB,EAAAsD,KAAAzC,QAAA,SAAAsM,EAAAhC,GACAnL,EAAA+L,WAAAZ,GAAAnL,EAAA+L,WAAAZ,QACA,IAAAnL,EAAA+L,WAAAZ,GAAAa,QAAAzN,IACAyB,EAAA+L,WAAAZ,GAAA0P,OAAA7a,EAAA+L,WAAAZ,GAAAa,QAAAzN,GAAA,MAkBA8N,GAEA0qB,EAAA1qB,GAEAyqB,GACA92B,EAAAqD,cAAA,oBACAkb,aAAAve,EAAAwe,kBACAzS,WAAA/L,EAAA+L,WACAmS,gBAAAle,EAAAwd,wBAaAxd,EAAAge,UAAA,SAAA7S,EAAAuR,EAAAma,EAAAC,GAEA,QAAA5P,GAAA8P,GACAh3B,EAAA+L,WAAAirB,MACAh3B,EAAA+L,WAAAirB,GAAAvyB,MAAA,GACA7E,EAAAiB,QAAA,SAAAyiB,GACAtjB,EAAA+L,WAAAirB,GAAAvyB,KAAA6e,EAAA5S,SALA,GAAA9J,GAAAqwB,EAAAhJ,EAAAruB,EAAAI,EAAA8c,WAQA,UAAA9c,EAAAie,wBAAAle,KAAAC,EAAAk3B,aACAl3B,EAAA+L,WAAAZ,IAAAnL,EAAA+L,WAAAZ,GAAAvF,OAAA,IAAAhG,EAAAgG,QACA8W,EAEA,YADA1c,EAAA+L,WAAAZ,MAKA,SAAAnL,EAAAie,wBAAAle,KAAAC,EAAAk3B,WACA,GAAAL,OAAA92B,KAAAC,EAAAk3B,WAAA,CACA,IAAAl3B,EAAAoM,WAA2C,MAG3C,KAFA6qB,EAAA1e,KAAAqF,IAAA5d,EAAAoM,WAAAjB,YACA8iB,EAAA1V,KAAAqD,IAAA5b,EAAAoM,WAAAjB,YACAvE,EAAAqwB,EAAgChJ,GAAArnB,EAASA,GAAA,EACzCsgB,EAAAtgB,OAGAsgB,GAAA/b,EAGA2rB,IACA92B,EAAAqD,cAAA,oBACAkb,aAAAve,EAAAwe,kBACAzS,WAAA/L,EAAA+L,WACAmS,gBAAAle,EAAAke,mBAUAle,EAAA+mB,aAAA,SAAA5b,GACA,GAAAgsB,GAAAn3B,EAAAsD,KAAA6H,GAAAnL,EAAA8I,SACA9I,GAAAqD,cAAA,gBACA+zB,UAAAp3B,EAAAyP,WAAA0nB,GACA7zB,KAAAtD,EAAAsD,KAAA6H,GACAA,aAEAnL,EAAA6I,aAAAsuB,GAAAvO,OACA5oB,EAAA6I,aAAAsuB,GAAA11B,gBACAzB,GAAA6I,aAAAsuB,SACAn3B,GAAAiN,MAAAkE,MAAAgmB,SACAn3B,GAAAyP,WAAA0nB,GACAn3B,EAAAqD,cAAA,aACA0K,WAAA/N,EAAAkD,MAAA6K,aAEA/N,EAAA6E,QAAA,GACA7E,EAAAoD,MAAA,IASApD,EAAA8mB,WAAA,SAAA3b,GACA,GAIAsG,GAJAO,EAAAhS,EAAAiS,yBACAb,EAAApR,EAAAiN,MAAAP,QAAAmC,YAAA7O,EAAAkD,MAAA4N,mBACAqmB,EAAAn3B,EAAAsD,KAAA6H,GAAAnL,EAAA8I,UACAM,EAAApJ,EAAAiN,MAAAkE,MAAAgmB,IAAAn3B,EAAAkD,MAAAm0B,cAEAr3B,GAAAyP,WAAA0nB,KACA1lB,EAAAzR,EAAAY,YACA+U,MAAA3V,EAAAE,WAAAyV,MACA9W,KAAAmB,EAAAE,WAAAwP,eACA1P,EAAAE,WAAArB,KAAA,OAAAs4B,MAAAp3B,GACA4E,YACA6J,WAAAxO,EAAAU,KACA+M,SAAA,uBACAQ,aAAA7E,EACA4E,YAAAhO,EAAAiH,MAAAmK,EACA/F,QAAiCpE,MAAAjH,EAAAiH,MAAAmK,GACjCzD,WAAAyD,EACA1D,UAAAsE,EACA9D,aAAAlO,EAAAU,KAAAiE,WACAA,WAAA3E,EAAAU,KAAAiE,WACAzB,MAAA,OACAI,KAAAtD,EAAAsD,KAAA6H,MAGAnL,EAAAyP,WAAA0nB,GAAA1lB,GAEAA,EAAAzR,EAAAyP,WAAA0nB,GACA1lB,EAAA5B,SAAA,EACA7P,EAAAqD,cAAA,cACAoO,WACAnO,KAAAtD,EAAAsD,KAAA6H,GACAA,aAEAnL,EAAA6I,aAAAsuB,GAAA1lB,EACAzR,EAAAiN,MAAAkE,MAAAgmB,GAAA/tB,EACApJ,EAAAqD,cAAA,aAA6C2D,OAAAhH,EAAAkD,MAAA6K,aAC7C/N,EAAA6E,QAAA,IASA7E,EAAAgf,WAAA,SAAA7T,GAEA,GADAnL,EAAA6I,aAAA7I,EAAAsD,KAAA6H,GAAAnL,EAAA8I,WAEA,MAAA9I,GAAA+mB,aAAA5b,EAEAnL,GAAA8mB,WAAA3b,IAWAnL,EAAA0lB,gBAAA,SAAA7mB,GACA,GAAA+H,GAAArI,EAAAyB,EAAA8c,WACA,KAAAlW,EAAA,EAAuBA,EAAArI,EAAAqH,OAAcgB,GAAA,EACrC,GAAArI,EAAAqI,GAAA/H,SACA,MAAAN,GAAAqI,IAYA5G,EAAAgiB,kBAAA,SAAAnjB,EAAAoM,GACAjL,EAAAiN,MAAAP,QAAA,eAAA7N,IAAAmB,EAAA0lB,gBAAA7mB,GAAAmB,EAAA8I,WACA9I,EAAAymB,wBAAA5nB,GACAoM,IACAjL,EAAA6E,SACA7E,EAAAoD,MAAA,KAqBApD,EAAA2mB,cAAA,SAAAngB,EAAA2E,GAEA,OAAApL,KAAAoL,EACA,MAAAnL,GAAA8O,aAAAtM,OAAA,SAAA7D,GACA,MAAAA,GAAA0N,cAAA7F,GAAA7H,EAAAwM,eACiBvF,OAAA,CAEjB,IAAAgB,GAAApI,EAAAwB,EAAA8O,aAAAlJ,MACA,KAAAgB,EAAA,EAAuBA,EAAApI,EAAOoI,GAAA,EAC9B,GAAAJ,EAAAI,IAAA5G,EAAA8O,aAAAlI,MAAAJ,EAAAM,IAAA9G,EAAA8O,aAAAlI,GAAAE,EACA,QAGA,WAaA9G,EAAAyT,MAAA,SAAA6Q,EAAAgT,EAAAC,EAAAC,GACA,GAAA7qB,GACAhO,EAAAqB,EAAA8c,YAAAta,OAAA,SAAA8gB,GACA,MAAAA,GAAAzkB,OAAAylB,GAGA,IADAtkB,EAAA8P,QAAAwU,EACA,IAAA3lB,EAAAiH,OACA,SAAAjC,OAAA,oCAEAgJ,GAAA4qB,GAAAv3B,EAAA0e,QAAA/f,EAAA,GAAAkO,MACAF,OAAA5M,KAAApB,EAAA,GAAAkO,MACAmD,QAAAC,KAAA,qDAAAtR,EAAA,GAAAkO,MAEA7M,EAAAsD,KAAAtD,EAAAsD,KAAAm0B,KAAA,kBAAA9qB,KAAA2X,EAAAgT,GAAAt3B,EAAA0e,QAAAra,QACArE,EAAAqD,cAAA,eAA+CxE,KAAAylB,EAAAgT,cAC/Ct3B,EAAAoD,MAAA,GACAo0B,GACAx3B,EAAA0f,kBAEA1f,EAAAid,SAAA,SAAAvZ,GACA,QAAAA,EAAAkD,EAAA,GACAlD,EAAAkD,EAAA5G,EAAAiH,OACAvD,EAAAoD,EAAA,GACApD,EAAAoD,EAAA9G,EAAAgH,SAaAhH,EAAA03B,gBAAA,SAAArrB,GACA,MAAArM,GAAA8O,aAAAtM,OAAA,SAAA7D,GACA,MAAAA,GAAA0N,kBACazG,OAAA,GAUb5F,EAAA23B,aAAA,SAAAxsB,GACA,MAAAnL,GAAA8O,aAAAtM,OAAA,SAAA7D,GACA,MAAAA,GAAAwM,eACavF,OAAA,GAWb5F,EAAAgwB,sBAAA,SAAAppB,EAAAE,GACA,MAAA9G,GAAA8O,aAAAtM,OAAA,SAAA7D,GACA,MAAAA,GAAA0N,cAAAzF,GAAAjI,EAAAwM,WAAArE,IACa,IAWb9G,EAAA0Y,UAAA,SAAA9R,EAAAE,EAAA8wB,GACA,GAAAr5B,GAAAiI,EAAAqxB,EAAAD,EAAA53B,EAAAE,WAAA43B,gBAAA,EAAAt5B,EAAAwB,EAAA8O,aAAAlJ,MACA,IAAA5F,EAAA8O,cAAA9O,EAAA8O,aAAAlJ,OAAA,CAEA,GADA5F,EAAA2W,UAAA,IACA7P,EAAA9G,EAAAgH,QACAF,EAAA,GACAF,EAAA5G,EAAAiH,OACAL,EAAA,GAEA,MADA5G,GAAA2W,UAAA,GAEAC,YAAA,UACAvW,QAAA,UAGA,KAAA9B,EAAA,EAAuBA,EAAAC,EAAOD,GAAA,EAQ9B,GAPAiI,EAAAxG,EAAA8O,aAAAvQ,GACAq5B,GAAA,gCAAAxzB,KAAAoC,EAAAtD,SACAsD,EAAAI,GAAAixB,EACArxB,EAAAM,GAAA+wB,EACArxB,EAAAQ,QAAA6wB,EACArxB,EAAAS,OAAA4wB,GAEArxB,EAAAI,EAAA5G,EAAAkD,MAAAmK,gBAAAzG,GACAJ,EAAAI,EAAAJ,EAAAS,MAAAjH,EAAAkD,MAAAmK,gBAAAzG,GACAJ,EAAAM,EAAA9G,EAAAkD,MAAAmK,gBAAAvG,GACAN,EAAAM,EAAAN,EAAAQ,OAAAhH,EAAAkD,MAAAmK,gBAAAvG,EACA,kCAAA1C,KAAAoC,EAAAtD,QACAsD,EAAAoQ,YAAA,sBACApQ,EAAAnG,QAAA,sBACAmG,EAAAioB,aAAA,EACAjoB,EAAAuxB,qBAAA,EACAjxB,EAAA9G,EAAA6N,UAAA2H,IAAA9O,EAAAI,EAAA9G,EAAA6N,UAAAgH,iBACArO,EAAAoQ,YAAA,yBACApQ,EAAAnG,QAAA,0BACyByG,EAAA9G,EAAA6N,UAAA2H,IAAA9O,EAAAI,IACzBN,EAAAoQ,YAAA,sBACApQ,EAAAnG,QAAA,uBAEAL,EAAA4X,OAAA1U,MAAAoa,OAAA,UACA9W,GAEA,8BAAApC,KAAAoC,EAAAtD,QACAsD,EAAAoQ,YAAA,wBACApQ,EAAAnG,QAAA,wBACAmG,EAAAioB,aAAA,EACAjoB,EAAAwxB,uBAAA,EACApxB,EAAA5G,EAAA6N,UAAA2H,IAAApM,EAAAxC,EAAA5G,EAAA6N,UAAAsH,gBACA3O,EAAAoQ,YAAA,0BACApQ,EAAAnG,QAAA,2BACyBuG,EAAA5G,EAAA6N,UAAA2H,IAAApM,EAAAxC,IACzBJ,EAAAoQ,YAAA,yBACApQ,EAAAnG,QAAA,0BAEAL,EAAA4X,OAAA1U,MAAAoa,OAAA,UACA9W,GAEAA,EAAAI,EAAAJ,EAAAS,MAAA,GAAAjH,EAAAE,WAAA+3B,iBAAArxB,GACAJ,EAAAI,EAAAJ,EAAAS,MAAA,GAAAjH,EAAAE,WAAA+3B,iBAAArxB,GACA5G,EAAAE,WAAAg4B,oBACAl4B,EAAAE,WAAAi4B,2BAAA,SAAA3xB,EAAAtD,OACA,SAAAsD,EAAAtD,SACAlD,EAAAE,WAAAk4B,uBACA,mCAAApsB,QAAAxF,EAAAtD,SACA,mCAAA8I,QAAAxF,EAAAtD,SACAsD,EAAAnG,QAAA,YACAmG,EAAAoQ,YAAA,YACApQ,GAEAA,EAAAM,EAAAN,EAAAQ,OAAA,GAAAhH,EAAAE,WAAA+3B,iBAAAnxB,GACAN,EAAAM,EAAAN,EAAAQ,OAAA,GAAAhH,EAAAE,WAAA+3B,iBAAAnxB,GACA9G,EAAAE,WAAAm4B,iBACAr4B,EAAAE,WAAAo4B,wBAAA,SAAA9xB,EAAAtD,OACA,SAAAsD,EAAAtD,QACA,qBAAAsD,EAAAtD,OACAsD,EAAAnG,QAAA,YACAmG,EAAAoQ,YAAA,YACApQ,GAEA,qBAAAA,EAAAtD,OACAsD,EAAAnG,QAAA,OACAmG,EAAAoQ,YAAA,iBACApQ,GAEA,kBAAAA,EAAAtD,OACAsD,EAAAnG,QAAA,OACAmG,EAAAoQ,YAAA,cACApQ,GAEAA,EAAA8F,QACAtM,EAAA2W,UAAA,EACAnQ,EAAAoQ,YAAA,YACApQ,EAAAnG,QAAA,YACAmG,GAEA,cAAAA,EAAAtD,OACAlD,EAAA2W,UAAA,EACAnQ,EAAAoQ,YAAA,OACApQ,EAAAnG,QAAA,OACAmG,IAEAA,EAAAoQ,YAAA,OACApQ,EAAAnG,QAAA,OACAmG,EAKA,OAFAxG,GAAA2W,UAAA,EACA3W,EAAA4X,OAAA1U,MAAAoa,OAAA,WAEA1G,YAAA,aACAvW,QAAA,aACA6C,MAAA,aACAsrB,cAAA,KAUAxuB,EAAAwd,mBAAA,WACA,GAAAgG,IAAuB5c,EAAAipB,IAAA/oB,EAAA+oB,KACvBpM,GAAwB7c,GAAAipB,IAAA/oB,GAAA+oB,IAYxB,OAXA7vB,GAAAsD,KAAAzC,QAAA,SAAAsM,EAAAhC,GACA,GAAAotB,GAAAC,CACAx4B,GAAA+L,WAAAZ,IAAAnL,EAAA+L,WAAAZ,GAAAvF,SACA4d,EAAA1c,EAAAqE,EAAAqY,EAAA1c,EAAAqE,EAAAqY,EAAA1c,EACA2c,EAAA3c,EAAAqE,EAAAsY,EAAA3c,EAAAqE,EAAAsY,EAAA3c,EACAyxB,EAAAhgB,KAAAqD,IAAAxb,MAAA,KAAAJ,EAAA+L,WAAAZ,IACAqtB,EAAAjgB,KAAAqF,IAAAxd,MAAA,KAAAJ,EAAA+L,WAAAZ,IACAqY,EAAA5c,EAAA4xB,EAAAhV,EAAA5c,EAAA4xB,EAAAhV,EAAA5c,EACA6c,EAAA7c,EAAA2xB,EAAA9U,EAAA7c,EAAA2xB,EAAA9U,EAAA7c,MAIAsR,IAAAsL,EAAA1c,EACAkR,KAAAwL,EAAA5c,EACAiX,OAAA4F,EAAA3c,EACAgX,MAAA2F,EAAA7c,IAWA5G,EAAA6mB,kBAAA,WACA,MAAA7nB,QAAAmH,KAAAnG,EAAAsD,KAAA,KAAgDm1B,IAAA,KAAQ1iB,IAAA,SAAAjR,EAAA4L,GACxD,GAAA7D,GAAA7M,EAAAqkB,qBAAAvf,GACAvG,GACAM,KAAAiG,EACA2J,MAAAxK,MAAAD,SAAAc,EAAA,KAAAA,EAAA9E,EAAA6nB,eAAA/iB,GAAA3C,cACA8E,MAAAjH,EAAAkD,MAAAkK,YACAsD,QACA7D,OACArK,OAAAxC,EAAAwC,OAAAqK,GAMA,OAJA/H,KAAA9E,EAAA8I,WACAvK,EAAAkd,QAAA,GAEAld,EAAAyB,EAAA8I,UAAA9I,EAAAokB,kBAAAtf,GACAvG,KAWAyB,EAAAomB,eAAA,WACApmB,EAAAojB,YASApjB,EAAAme,WAAA,SAAAua,EAAAhc,GACA1c,EAAAke,gBAAAwa,GAAA14B,EAAAke,eACA,IAAAtX,GAAAE,EAAAlH,EAAAI,EAAA8c,WAIA,IAHAJ,IACA1c,EAAA+L,eAEA/L,EAAAke,gBAAAhG,KAAA,GACAlY,EAAAke,gBAAAL,OAAA7d,EAAAsD,KAAAsC,QACA5F,EAAAke,gBAAAlG,MAAA,GACAhY,EAAAke,gBAAAJ,MAAAle,EAAAgG,OACA,SAAAjC,OAAA,4BAEA,KAAAiD,EAAA5G,EAAAke,gBAAAhG,IAA8CtR,GAAA5G,EAAAke,gBAAAL,OAAkCjX,GAAA,EAEhF,IADA5G,EAAA+L,WAAAnF,MACAE,EAAA9G,EAAAke,gBAAAlG,KAAmDlR,GAAA9G,EAAAke,gBAAAJ,MAAiChX,GAAA,GACpF,IAAA9G,EAAA+L,WAAAnF,GAAAoF,QAAAlF,IACA9G,EAAA+L,WAAAnF,GAAAnC,KAAAqC,EAIA9G,GAAAqD,cAAA,oBACAkb,aAAAve,EAAAwe,kBACAzS,WAAA/L,EAAA+L,WACAmS,gBAAAle,EAAAke,mBAWAle,EAAAymB,wBAAA,SAAA5nB,GACA,GAAAH,IAAAmxB,GACA,sBAAAhxB,GACAmB,EAAAkH,IAAA6I,KAAA/P,EAAAkD,MAAAy1B,kBACA34B,EAAAkH,IAAAgD,aAAAlK,EAAAsD,KAAAsC,QAAA5F,EAAAE,WAAA4S,WAAA,MAAA5C,YAAAjJ,MACAjH,EAAAkD,MAAA01B,gBAAA54B,EAAAkD,MAAA21B,0BACA74B,EAAAkD,MAAA41B,0BACA94B,EAAAkD,MAAA61B,0BACA/4B,EAAAE,WAAAqP,KAAAvP,EAAAkD,MAAA6F,eACA/I,EAAAkD,MAAAyF,oBAAA3I,EAAAkD,MAAA+F,qBAAA,KAEAjJ,EAAA8c,YAAAjc,QAAA,SAAAyiB,GACA,GAAAA,EAAAzkB,SAAA,CACAmB,EAAAkH,IAAA6I,KAAA/P,EAAAkD,MAAA81B,oBACA,IAAAjvB,GAAA/J,EAAAkH,IAAAgD,YAAAoZ,EAAA7U,OAAA6U,EAAAzkB,MAAAoI,MACAjH,EAAAkD,MAAA+1B,uBACAj5B,EAAAkD,MAAAg2B,qBACAx6B,GAAAqL,EAAArL,EAAAqL,EAAArL,KAEAsB,EAAAsD,KAAAzC,QAAA,SAAAsM,GACAnN,EAAAkH,IAAA6I,KAAA/P,EAAAkD,MAAAi2B,QACA,IAAApvB,GAAA/J,EAAAkH,IAAAgD,YAAAiD,EAAAtO,IAAAoI,MACAjH,EAAAkD,MAAAk2B,iBACAp5B,EAAAkD,MAAAgtB,gBAAAlwB,EAAAkD,MAAAm2B,qBACA36B,GAAAqL,EAAArL,EAAAqL,EAAArL,IAEAA,IAQAsB,EAAAqT,eAAA,WACA,MAAArT,GAAAsS,mBAAAuD,OAAA,SAAAyjB,EAAAjuB,GACA,MAAAiuB,GAAAjuB,EAAApE,OACa,IAEbjH,EAAA4M,WAAAvI,OAAA,SAAAX,GACA,WAAA3D,KAAA2D,EAAA8C,KAAAxB,MAAAtB,EAAA8C,KAAAxB,MAAA,IAEAhF,EAAA4M,WAAAiE,cAAA7Q,EAAA4M,WAAAvI,OACArE,EAAA4M,WAAA2sB,WAAAv5B,EAAA4M,WAAAvI,OACArE,EAAA4M,WAAA9I,OAAA9D,EAAA4M,WAAAvI,OACArE,EAAA4M,WAAA4sB,IAAAx5B,EAAA4M,WAAAvI,OACArE,EAAA4M,WAAAvG,KAAArG,EAAA4M,WAAAvI,OACArE,EAAA0e,QAAAra,OAAA,SAAAigB,EAAAgT,GACA,GAAAmC,GAAA,QAAAnC,CACA,iBAAA3mB,EAAApH,GACA,WAAAxJ,KAAA4Q,EAAA2T,IAAA,OAAA3T,EAAA2T,GACA,MAEAvkB,KAAAwJ,EAAA+a,IAAA,OAAA/a,EAAA+a,GACA,EAEAmV,EACA9oB,EAAA2T,GAAAoV,cACA/oB,EAAA2T,GAAAoV,cAAAnwB,EAAA+a,IADuD,EAGvD/a,EAAA+a,GAAAoV,cACAnwB,EAAA+a,GAAAoV,cAAA/oB,EAAA2T,IADmD,IAInDtkB,EAAA0e,QAAA5a,OAAA,SAAAwgB,EAAAgT,GACA,GAAAmC,GAAA,QAAAnC,CACA,iBAAA3mB,EAAApH,GACA,MAAAkwB,GACA9oB,EAAA2T,GAAA/a,EAAA+a,GAEA/a,EAAA+a,GAAA3T,EAAA2T,KAGAtkB,EAAA0e,QAAAib,KAAA,SAAArV,EAAAgT,GACA,GAAAmC,GAAA,QAAAnC,CACA,iBAAA3mB,EAAApH,GACA,MAAAkwB,GACA,GAAAG,MAAAjpB,EAAA2T,IAAAuV,UACA,GAAAD,MAAArwB,EAAA+a,IAAAuV,UAEA,GAAAD,MAAArwB,EAAA+a,IAAAuV,UACA,GAAAD,MAAAjpB,EAAA2T,IAAAuV,cAICz5B,MAAAtC,EAAA+B,MAAA9B,EAAAD,QAAAgC","file":"canvas-datagrid.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"canvasDatagrid\"] = factory();\n\telse\n\t\troot[\"canvasDatagrid\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"canvasDatagrid\"] = factory();\n\telse\n\t\troot[\"canvasDatagrid\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 1);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        self.defaults = {\n            attributes: [\n                ['name', ''],\n                ['tree', false],\n                ['showNewRow', false],\n                ['treeHorizontalScroll', false],\n                ['saveAppearance', true],\n                ['selectionFollowsActiveCell', false],\n                ['multiLine', false],\n                ['editable', true],\n                ['allowColumnReordering', true],\n                ['allowRowReordering', false],\n                ['allowSorting', true],\n                ['showFilter', true],\n                ['globalRowResize', false],\n                ['pageUpDownOverlap', 1],\n                ['persistantSelectionMode', false],\n                ['selectionMode', 'cell'],\n                ['autoResizeColumns', false],\n                ['allowRowHeaderResize', true],\n                ['allowColumnResize', true],\n                ['allowRowResize', true],\n                ['allowRowResizeFromCell', false],\n                ['allowColumnResizeFromCell', false],\n                ['debug', false],\n                ['borderResizeZone', 10],\n                ['showColumnHeaders', true],\n                ['showRowNumbers', true],\n                ['showRowHeaders', true],\n                ['scrollRepeatRate', 75],\n                ['selectionScrollZone', 20],\n                ['resizeScrollZone', 20],\n                ['contextHoverScrollRateMs', 5],\n                ['contextHoverScrollAmount', 2],\n                ['selectionScrollIncrement', 20],\n                ['reorderDeadZone', 3],\n                ['showClearSettingsOption', true],\n                ['showOrderByOption', true],\n                ['clearSettingsOptionText', 'Clear saved settings'],\n                ['showOrderByOptionTextAsc', 'Order by %s ascending'],\n                ['showOrderByOptionTextDesc', 'Order by %s descending'],\n                ['removeFilterOptionText', 'Remove filter on %s'],\n                ['filterOptionText', 'Filter %s'],\n                ['filterTextPrefix', '(filtered) '],\n                ['touchReleaseAnimationDurationMs', 2000],\n                ['touchReleaseAcceleration', 500],\n                ['touchDeadZone', 3],\n                ['touchSelectTimeMs', 800],\n                ['touchScrollZone', 30],\n                ['copyText', 'Copy'],\n                ['showCopy', true],\n                ['columnHeaderClickBehavior', 'sort'],\n                ['scrollPointerLock', false],\n                ['maxAutoCompleteItems', 200]\n            ],\n            styles: [\n                ['activeCellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['activeCellBorderWidth', 0.25],\n                ['activeCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellFont', '16px sans-serif'],\n                ['activeCellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['activeCellOverlayBorderWidth', 0.5],\n                ['activeCellPaddingBottom', 5],\n                ['activeCellPaddingLeft', 5],\n                ['activeCellPaddingRight', 7],\n                ['activeCellPaddingTop', 5],\n                ['activeCellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['activeCellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['activeColumnHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeColumnHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeRowHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeRowHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['autocompleteBottomMargin', 60],\n                ['autosizeHeaderCellPadding', 8],\n                ['autosizePadding', 5],\n                ['backgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cellAutoResizePadding', 13],\n                ['cellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['cellBorderWidth', 0.5],\n                ['cellColor', 'rgba(0, 0, 0, 1)'],\n                ['cellFont', '16px sans-serif'],\n                ['cellGridHeight', 250],\n                ['cellHeight', 24],\n                ['cellHeightWithChildGrid', 150],\n                ['cellHorizontalAlignment', 'left'],\n                ['cellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['cellPaddingBottom', 5],\n                ['cellPaddingLeft', 5],\n                ['cellPaddingRight', 7],\n                ['cellPaddingTop', 5],\n                ['cellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['cellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['cellVerticalAlignment', 'center'],\n                ['cellWidthWithChildGrid', 250],\n                ['childContextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['childContextMenuArrowHTML', '&#x25BA;'],\n                ['childContextMenuMarginLeft', -15],\n                ['childContextMenuMarginTop', 0],\n                ['columnHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellBorderColor', 'rgba(152, 152, 152, 1)'],\n                ['columnHeaderCellBorderWidth', 0.25],\n                ['columnHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['columnHeaderCellFont', '16px sans-serif'],\n                ['columnHeaderCellHeight', 25],\n                ['columnHeaderCellHorizontalAlignment', 'left'],\n                ['columnHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['columnHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['columnHeaderCellPaddingBottom', 5],\n                ['columnHeaderCellPaddingLeft', 5],\n                ['columnHeaderCellPaddingRight', 7],\n                ['columnHeaderCellPaddingTop', 5],\n                ['columnHeaderCellVerticalAlignment', 'center'],\n                ['columnWidth', 250],\n                ['contextFilterButtonBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterButtonBorderRadius', '3px'],\n                ['contextFilterButtonHTML', '&#x25BC;'],\n                ['contextFilterInputBackground', 'rgba(255,255,255,1)'],\n                ['contextFilterInputBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterInputBorderRadius', '0'],\n                ['contextFilterInputColor', 'rgba(0,0,0,1)'],\n                ['contextFilterInputFontFamily', 'sans-serif'],\n                ['contextFilterInputFontSize', '14px'],\n                ['contextFilterInvalidRegExpBackground', 'rgba(180, 6, 1, 1)'],\n                ['contextFilterInvalidRegExpColor', 'rgba(255, 255, 255, 1)'],\n                ['contextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuArrowDownHTML', '&#x25BC;'],\n                ['contextMenuArrowUpHTML', '&#x25B2;'],\n                ['contextMenuBackground', 'rgba(240, 240, 240, 1)'],\n                ['contextMenuBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextMenuBorderRadius', '3px'],\n                ['contextMenuChildArrowFontSize', '12px'],\n                ['contextMenuColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuFilterButtonFontFamily', 'sans-serif'],\n                ['contextMenuFilterButtonFontSize', '10px'],\n                ['contextMenuFilterInvalidExpresion', 'rgba(237, 155, 156, 1)'],\n                ['contextMenuFontFamily', 'sans-serif'],\n                ['contextMenuFontSize', '16px'],\n                ['contextMenuHoverBackground', 'rgba(182, 205, 250, 1)'],\n                ['contextMenuHoverColor', 'rgba(43, 48, 153, 1)'],\n                ['contextMenuItemBorderRadius', '3px'],\n                ['contextMenuItemMargin', '2px'],\n                ['contextMenuLabelDisplay', 'inline-block'],\n                ['contextMenuLabelMargin', '0 3px 0 0'],\n                ['contextMenuLabelMaxWidth', '700px'],\n                ['contextMenuLabelMinWidth', '75px'],\n                ['contextMenuMarginLeft', 3],\n                ['contextMenuMarginTop', -3],\n                ['contextMenuOpacity', '0.98'],\n                ['contextMenuPadding', '2px'],\n                ['contextMenuWindowMargin', 6],\n                ['cornerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cornerCellBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['editCellBackgroundColor', 'white'],\n                ['editCellBorder', 'solid 1px rgba(110, 168, 255, 1)'],\n                ['editCellBoxShadow', '0 2px 5px rgba(0,0,0,0.4)'],\n                ['editCellColor', 'black'],\n                ['editCellFontFamily', 'sans-serif'],\n                ['editCellFontSize', '16px'],\n                ['editCellPaddingLeft', 4],\n                ['height', 'auto'],\n                ['gridBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['gridBorderWidth', 1],\n                ['columnHeaderOrderByArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['columnHeaderOrderByArrowBorderWidth', 1],\n                ['columnHeaderOrderByArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['columnHeaderOrderByArrowHeight', 8],\n                ['columnHeaderOrderByArrowMarginLeft', 0],\n                ['columnHeaderOrderByArrowMarginRight', 5],\n                ['columnHeaderOrderByArrowMarginTop', 6],\n                ['columnHeaderOrderByArrowWidth', 13],\n                ['minColumnWidth', 45],\n                ['minHeight', 24],\n                ['minRowHeight', 24],\n                ['name', 'default'],\n                ['reorderMarkerBackgroundColor', 'rgba(0, 0, 0, 0.1)'],\n                ['reorderMarkerBorderColor', 'rgba(0, 0, 0, 0.2)'],\n                ['reorderMarkerBorderWidth', 1.25],\n                ['reorderMarkerIndexBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['reorderMarkerIndexBorderWidth', 2.75],\n                ['rowHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['rowHeaderCellBorderColor', 'rgba(200, 200, 200, 1)'],\n                ['rowHeaderCellBorderWidth', 1],\n                ['rowHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellFont', '16px sans-serif'],\n                ['rowHeaderCellHeight', 25],\n                ['rowHeaderCellHorizontalAlignment', 'left'],\n                ['rowHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['rowHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['rowHeaderCellPaddingBottom', 5],\n                ['rowHeaderCellPaddingLeft', 5],\n                ['rowHeaderCellPaddingRight', 5],\n                ['rowHeaderCellPaddingTop', 5],\n                ['rowHeaderCellSelectedBackgroundColor', 'rgba(217, 217, 217, 1)'],\n                ['rowHeaderCellSelectedColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellVerticalAlignment', 'center'],\n                ['rowHeaderCellWidth', 57],\n                ['scrollBarActiveColor', 'rgba(125, 125, 125, 1)'],\n                ['scrollBarBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarBorderWidth', 0.5],\n                ['scrollBarBoxBorderRadius', 4.125],\n                ['scrollBarBoxColor', 'rgba(192, 192, 192, 1)'],\n                ['scrollBarBoxMargin', 2],\n                ['scrollBarBoxMinSize', 15],\n                ['scrollBarBoxWidth', 8],\n                ['scrollBarCornerBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarCornerBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarWidth', 11],\n                ['selectionOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionOverlayBorderWidth', 0.75],\n                ['treeArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['treeArrowBorderWidth', 1],\n                ['treeArrowClickRadius', 5],\n                ['treeArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['treeArrowHeight', 8],\n                ['treeArrowMarginLeft', 0],\n                ['treeArrowMarginRight', 5],\n                ['treeArrowMarginTop', 6],\n                ['treeArrowWidth', 13],\n                ['treeGridHeight', 250],\n                ['width', 'auto']\n            ]\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, evil: true*/\n/*globals Reflect: false, HTMLElement: true, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n    __webpack_require__(2),\n    __webpack_require__(0),\n    __webpack_require__(3),\n    __webpack_require__(4),\n    __webpack_require__(5),\n    __webpack_require__(6),\n    __webpack_require__(7),\n    __webpack_require__(8)\n], __WEBPACK_AMD_DEFINE_RESULT__ = function context(component) {\n    'use strict';\n    component = component();\n    var modules = Array.prototype.slice.call(arguments);\n    function Grid(args) {\n        args = args || {};\n        var self = {};\n        self.isComponent = args.component === undefined;\n        self.intf = self.isComponent ? eval('Reflect.construct(HTMLElement, [], new.target)') : {};\n        self.args = args;\n        self.createGrid = function grid(args) {\n            args.component = false;\n            return new Grid(args);\n        };\n        modules.forEach(function (module) {\n            module(self);\n        });\n        self.intf.args = self.args;\n        self.intf.init = self.init;\n        if (!self.isComponent) {\n            self.init();\n        }\n        return self.intf;\n    }\n    if (window.HTMLElement) {\n        Grid.prototype = Object.create(window.HTMLElement.prototype);\n    }\n    // export web component\n    if (window.customElements) {\n        Grid.observedAttributes = component.getObservableAttributes();\n        Grid.prototype.disconnectedCallback = function () { this.dispose(); };\n        Grid.prototype.attributeChangedCallback = component.attributeChangedCallback;\n        Grid.prototype.connectedCallback = component.connectedCallback;\n        Grid.prototype.adoptedCallback = component.adoptedCallback;\n        window.customElements.define('canvas-datagrid', Grid);\n    }\n    // export global\n    if (window && !window.canvasDatagrid && !window.require) {\n        window.canvasDatagrid = function (args) { return new Grid(args); };\n    }\n    // export amd loader\n    module.exports = function grid(args) {\n        args = args || {};\n        args.component = false;\n        return new Grid(args);\n    };\n    return module.exports;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_RESULT__ = function (defaults) {\n    'use strict';\n    return function (self) {\n        self = self || {};\n        var typeMap, component = {};\n        function hyphenateProperty(prop, cust) {\n            var p = '';\n            Array.prototype.forEach.call(prop, function (char) {\n                if (char === char.toUpperCase()) {\n                    p += '-' + char.toLowerCase();\n                    return;\n                }\n                p += char;\n            });\n            return (cust ? '--cdg-' : '') + p;\n        }\n        function getDefaultItem(base, item) {\n            var i = {},\n                r;\n            defaults(i);\n            r = i.defaults[base].filter(function (i) {\n                return i[0].toLowerCase() === item.toLowerCase()\n                    || hyphenateProperty(i[0]) === item.toLowerCase()\n                    || hyphenateProperty(i[0], true) === item.toLowerCase();\n            })[0];\n            return r;\n        }\n        function applyComponentStyle(intf, self, supressChangeAndDrawEvents) {\n            var cStyle = window.getComputedStyle(intf, null),\n                defs = {};\n            self.computedStyle = cStyle;\n            defaults(defs);\n            defs = defs.defaults.styles;\n            defs.forEach(function (def) {\n                var val = cStyle.getPropertyValue(hyphenateProperty(def[0], true));\n                if (val !== \"\") {\n                    self.style[def[0]] = typeMap[typeof def[1]](val, def[1]);\n                }\n            });\n            self.draw(true);\n            if (!supressChangeAndDrawEvents) {\n                self.dispatchEvent('stylechanged', intf.style);\n            }\n        }\n        typeMap = {\n            data: function (strData) {\n                try {\n                    return JSON.parse(strData);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid data attribute.');\n                }\n            },\n            schema: function (strSchema) {\n                try {\n                    return JSON.parse(strSchema);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid schema attribute.');\n                }\n            },\n            number: function (strNum, def) {\n                var n = parseInt(strNum, 10);\n                return isNaN(n) ? def : n;\n            },\n            boolean: function (strBool) {\n                return (/true/i).test(strBool);\n            },\n            string: function (str) {\n                return str;\n            }\n        };\n        component.getObservableAttributes = function () {\n            var i = {}, attrs = ['data', 'schema'];\n            defaults(i);\n            i.defaults.attributes.forEach(function (attr) {\n                attrs.push(attr[0].toLowerCase());\n            });\n            return attrs;\n        };\n        component.connectedCallback = function () {\n            var intf = this, s;\n            if (intf.initialized) { return; }\n            intf.initialized = true;\n            intf.args.parentNode = intf;\n            //HACK init() will secretly return the internal reference object.\n            //since init is only run after instantiation in the component version\n            //it won't work in the amd version and won't return self, so it is still\n            //technically private since it's impossible to get at.\n            //this has to be done so intf setters can bet run and alter self without stack overflows\n            //intf.style.display = 'block';\n            s = intf.init();\n            component.observe(intf, s);\n            applyComponentStyle(intf, s, true);\n            s.resize();\n            ['style', 'data', 'schema'].forEach(function (key) {\n                Object.defineProperty(intf.args, key, {\n                    set: function (value) {\n                        s[key] = value;\n                        intf.draw();\n                    },\n                    get: function () {\n                        return s[key];\n                    }\n                });\n            });\n        };\n        component.adoptedCallback = function () {\n            this.resize();\n        };\n        component.attributeChangedCallback = function (attrName, oldVal, newVal) {\n            var tfn, intf = this;\n            if (attrName === 'style') {\n                return;\n            }\n            if (attrName === 'data') {\n                intf.args.data = typeMap.data(newVal);\n                return;\n            }\n            if (attrName === 'schema') {\n                intf.args.schema = typeMap.schema(newVal);\n                return;\n            }\n            if (attrName === 'class' || attrName === 'className') {\n                return;\n            }\n            tfn = typeMap[typeof getDefaultItem('attributes', attrName)[1]];\n            intf.attributes[attrName] = tfn(newVal);\n            return;\n        };\n        component.observe = function (intf, self) {\n            var observer;\n            if (!window.MutationObserver) { return; }\n            self.applyComponentStyle = function () { applyComponentStyle(intf, self); self.resize(); };\n            /**\n             * Applies the computed css styles to the grid.  In some browsers, changing directives in attached style sheets does not automatically update the styles in this component.  It is necessary to call this method to update in these cases.\n             * @memberof canvasDatagrid\n             * @name applyComponentStyle\n             * @method\n             */\n            intf.applyComponentStyle = self.applyComponentStyle;\n            observer = new window.MutationObserver(function (mutations) {\n                var checkInnerHTML;\n                Array.prototype.forEach.call(mutations, function (mutation) {\n                    if (mutation.attributeName === 'class'\n                            || mutation.attributeName === 'style') {\n                        self.applyComponentStyle();\n                        return;\n                    }\n                    if (mutation.addedNodes.length > 0) {\n                        checkInnerHTML = true;\n                    }\n                });\n                if (checkInnerHTML) {\n                    intf.data = typeMap.data(intf.innerHTML);\n                }\n            });\n            observer.observe(intf, { characterData: true, childList: true, attributes: true, subtree: true });\n        };\n        self.component = component;\n        return component;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals XMLSerializer: false, define: true, Blob: false, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var perfCounters = [],\n            drawCount = 0,\n            perfWindowSize = 20;\n        self.htmlImageCache = {};\n        function drawOnAllImagesLoaded() {\n            var loaded = true;\n            Object.keys(self.htmlImageCache).forEach(function (html) {\n                if (!self.htmlImageCache[html].complete) {\n                    loaded = false;\n                }\n            });\n            if (loaded) {\n                self.draw();\n            }\n        }\n        function drawHtml(cell) {\n            var img,\n                v = cell.innerHTML || cell.formattedValue,\n                x = cell.x + self.canvasOffsetLeft,\n                y = cell.y + self.canvasOffsetTop;\n            if (self.htmlImageCache[v]) {\n                img = self.htmlImageCache[v];\n                if (img.height !== cell.height || img.width !== cell.width) {\n                    // height and width of the cell has changed, invalidate cache\n                    self.htmlImageCache[v] = undefined;\n                } else {\n                    if (!img.complete) {\n                        return;\n                    }\n                    return self.ctx.drawImage(img, x, y);\n                }\n            }\n            img = new Image(cell.width, cell.height);\n            self.htmlImageCache[v] = img;\n            img.onload = function () {\n                self.ctx.drawImage(img, x, y);\n                drawOnAllImagesLoaded();\n            };\n            img.src = 'data:image/svg+xml;base64,' + btoa(\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + cell.width + '\" height=\"' + cell.height + '\">\\n' +\n                    '<foreignObject class=\"node\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\\n' +\n                    '<body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;padding:0;\">\\n' +\n                    v + '\\n' +\n                    '</body>' +\n                    '</foreignObject>\\n' +\n                    '</svg>\\n'\n            );\n        }\n        function drawOrderByArrow(x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.columnHeaderOrderByArrowColor;\n            self.ctx.strokeStyle = self.style.columnHeaderOrderByArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + self.style.columnHeaderOrderByArrowMarginLeft;\n            y = y + self.style.columnHeaderOrderByArrowMarginTop;\n            if (self.orderDirection === 'asc') {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + self.style.columnHeaderOrderByArrowWidth, y);\n                self.ctx.lineTo(x + (self.style.columnHeaderOrderByArrowWidth * 0.5), y + self.style.columnHeaderOrderByArrowHeight);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y + self.style.columnHeaderOrderByArrowHeight);\n                self.ctx.lineTo(x + self.style.columnHeaderOrderByArrowWidth, y + self.style.columnHeaderOrderByArrowHeight);\n                self.ctx.lineTo(x + (self.style.columnHeaderOrderByArrowWidth * 0.5), y);\n                self.ctx.lineTo(x, y + self.style.columnHeaderOrderByArrowHeight);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return self.style.columnHeaderOrderByArrowMarginLeft\n                + self.style.columnHeaderOrderByArrowWidth\n                + self.style.columnHeaderOrderByArrowMarginRight;\n        }\n        function drawTreeArrow(cell, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.treeArrowColor;\n            self.ctx.strokeStyle = self.style.treeArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + self.style.treeArrowMarginLeft;\n            y = y + self.style.treeArrowMarginTop;\n            if (self.openChildren[cell.data[self.uniqueId]]) {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + self.style.treeArrowWidth, y);\n                self.ctx.lineTo(x + (self.style.treeArrowWidth * 0.5), y + self.style.treeArrowHeight);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y);\n                self.ctx.lineTo(x + self.style.treeArrowHeight, y + (self.style.treeArrowWidth * 0.5));\n                self.ctx.lineTo(x, y + self.style.treeArrowWidth);\n                self.ctx.lineTo(x, y);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return self.style.treeArrowMarginLeft\n                + self.style.treeArrowWidth\n                + self.style.treeArrowMarginRight;\n        }\n        function radiusRect(x, y, w, h, radius) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            var r = x + w, b = y + h;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x + radius, y);\n            self.ctx.lineTo(r - radius, y);\n            self.ctx.quadraticCurveTo(r, y, r, y + radius);\n            self.ctx.lineTo(r, y + h - radius);\n            self.ctx.quadraticCurveTo(r, b, r - radius, b);\n            self.ctx.lineTo(x + radius, b);\n            self.ctx.quadraticCurveTo(x, b, x, b - radius);\n            self.ctx.lineTo(x, y + radius);\n            self.ctx.quadraticCurveTo(x, y, x + radius, y);\n        }\n        function fillRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillRect(x, y, w, h);\n        }\n        function strokeRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.strokeRect(x, y, w, h);\n        }\n        function fillText(text, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillText(text, x, y);\n        }\n        function addBorderLine(c, pos) {\n            self.ctx.beginPath();\n            var p = {\n                t: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                },\n                r: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                b: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                l: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                }\n            };\n            p[pos]();\n            self.ctx.stroke();\n        }\n        function addEllipsis(text, width) {\n            var c, w = 0;\n            if (self.ellipsisCache[text] && self.ellipsisCache[text][width]) {\n                return self.ellipsisCache[text][width];\n            }\n            //TODO Add ellipsis back when there is a fast way to do it\n            w = self.ctx.measureText(text).width;\n            self.ellipsisCache[text] = self.ellipsisCache[text] || {};\n            c = {value: text, width: w};\n            self.ellipsisCache[text][width] = c;\n            return c;\n        }\n        function drawText(cell) {\n            var paddingLeft = self.style[cell.style + 'PaddingLeft'],\n                paddingTop = self.style[cell.style + 'PaddingTop'],\n                paddingRight = self.style[cell.style + 'PaddingRight'],\n                paddingBottom = self.style[cell.style + 'PaddingBottom'],\n                vPos = paddingTop + cell.height - (cell.height * 0.5),\n                hPos = paddingLeft + cell.treeArrowWidth + cell.orderByArrowWidth;\n            cell.text = addEllipsis(cell.formattedValue, cell.width - paddingRight - paddingLeft);\n            cell.text.height = cell.fontHeight;\n            if (cell.horizontalAlignment === 'right') {\n                hPos = cell.width - cell.text.width - paddingRight;\n            } else if (cell.horizontalAlignment === 'center') {\n                hPos = (cell.width / 2) - (cell.text.width / 2);\n            }\n            if (cell.verticalAlignment === 'top') {\n                vPos = paddingTop + cell.text.height;\n            } else if (cell.verticalAlignment === 'bottom') {\n                vPos = cell.height - paddingBottom - cell.text.height;\n            }\n            cell.text.x = cell.x + hPos;\n            cell.text.y = cell.y + vPos;\n            fillText(cell.text.value, cell.text.x, cell.text.y);\n        }\n        /**\n         * Redraws the grid. No matter what the change, this is the only method required to refresh everything.\n         * @memberof canvasDatagrid\n         * @name draw\n         * @method\n         */\n        self.draw = function (internal) {\n            if (self.dispatchEvent('beforedraw', {})) { return; }\n            if (!self.isChildGrid && (!self.height || !self.width)) {\n                return;\n            }\n            if (self.isChildGrid && internal) {\n                requestAnimationFrame(self.parentGrid.draw);\n                return;\n            }\n            if (self.intf.visible === false) {\n                return;\n            }\n            // initial values\n            var checkScrollHeight, rowHeaderCell, p, cx, cy, treeGrid, rowOpen,\n                rowHeight, cornerCell, y, x, c, h, w, s, r, rd, aCell,\n                selectionBorders = [],\n                rowHeaders = [],\n                l = self.data.length,\n                u = self.currentCell || {},\n                rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth(),\n                cellHeight = self.style.cellHeight;\n            drawCount += 1;\n            p = performance.now();\n            // if data length has changed, there is no way to know\n            if (self.data.length > self.orders.rows.length) {\n                self.createRowOrders();\n            }\n            function drawScrollBars() {\n                var v = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-bar'\n                    },\n                    n = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-bar'\n                    },\n                    vb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-box'\n                    },\n                    nb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-box'\n                    },\n                    co = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        isCorner: true,\n                        isScrollBoxCorner: true,\n                        style: 'scroll-box-corner'\n                    },\n                    m = (self.style.scrollBarBoxMargin * 2),\n                    d = self.style.scrollBarBoxMargin * 0.5;\n                self.ctx.strokeStyle = self.style.scrollBarBorderColor;\n                self.ctx.lineWidth = self.style.scrollBarBorderWidth;\n                // vertical\n                v.x += w - self.style.scrollBarWidth - self.style.scrollBarBorderWidth - d;\n                v.y += rowHeaderCellHeight;\n                v.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                v.height = h - rowHeaderCellHeight - self.style.scrollBarWidth - d - m;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(v.x, v.y, v.width, v.height + m);\n                strokeRect(v.x, v.y, v.width, v.height + m);\n                // vertical box\n                vb.x = v.x + self.style.scrollBarBoxMargin;\n                vb.y = rowHeaderCellHeight + self.style.scrollBarBoxMargin\n                    + ((v.height - self.scrollBox.scrollBoxHeight)\n                        * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight));\n                vb.width = self.style.scrollBarBoxWidth;\n                vb.height = self.scrollBox.scrollBoxHeight;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/vertical/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (vb.height < v.height) {\n                    radiusRect(vb.x, vb.y, vb.width, vb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                // horizontal\n                n.x += columnHeaderCellWidth;\n                n.y += h - self.style.scrollBarWidth - d;\n                n.width = w - self.style.scrollBarWidth - columnHeaderCellWidth - d - m;\n                n.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(n.x, n.y, n.width + m, n.height);\n                strokeRect(n.x, n.y, n.width + m, n.height);\n                // horizontal box\n                nb.y = n.y + self.style.scrollBarBoxMargin;\n                nb.x = columnHeaderCellWidth + self.style.scrollBarBoxMargin\n                    + ((n.width - self.scrollBox.scrollBoxWidth)\n                        * (self.scrollBox.scrollLeft / self.scrollBox.scrollWidth));\n                nb.width = self.scrollBox.scrollBoxWidth;\n                nb.height = self.style.scrollBarBoxWidth;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/horizontal/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (nb.width < n.width) {\n                    radiusRect(nb.x, nb.y, nb.width, nb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                //corner\n                self.ctx.strokeStyle = self.style.scrollBarCornerBorderColor;\n                self.ctx.fillStyle = self.style.scrollBarCornerBackgroundColor;\n                co.x = n.x + n.width + m;\n                co.y = v.y + v.height + m;\n                co.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                co.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                radiusRect(co.x, co.y, co.width, co.height, 0);\n                self.ctx.stroke();\n                self.ctx.fill();\n                self.visibleCells.unshift(v);\n                self.visibleCells.unshift(vb);\n                self.visibleCells.unshift(n);\n                self.visibleCells.unshift(nb);\n                self.visibleCells.unshift(co);\n                self.scrollBox.bar = {\n                    v: v,\n                    h: n\n                };\n                self.scrollBox.box = {\n                    v: vb,\n                    h: nb\n                };\n            }\n            function drawCell(d, rowIndex, rowOrderIndex) {\n                return function drawEach(header, headerIndex, columnOrderIndex) {\n                    var cellStyle = header.style || 'cell',\n                        cellGridAttributes,\n                        cell,\n                        isHeader = /HeaderCell/.test(cellStyle),\n                        isCorner = /cornerCell/.test(cellStyle),\n                        isRowHeader = 'rowHeaderCell' === cellStyle,\n                        isColumnHeader = 'columnHeaderCell' === cellStyle,\n                        selected = self.selections[rowOrderIndex] && self.selections[rowOrderIndex].indexOf(columnOrderIndex) !== -1,\n                        hovered = self.hovers[d[self.uniqueId]] && self.hovers[d[self.uniqueId]].indexOf(columnOrderIndex) !== -1,\n                        active = self.activeCell.rowIndex === rowOrderIndex && self.activeCell.columnIndex === columnOrderIndex,\n                        isGrid = typeof d[header.name] === 'object' && d[header.name] !== null && d[header.name] !== undefined,\n                        activeHeader = (self.orders.rows[self.activeCell.rowIndex] === rowOrderIndex\n                                || self.orders.columns[self.activeCell.columnIndex] === columnOrderIndex)\n                            && (columnOrderIndex === -1 || rowOrderIndex === -1)\n                            ? (isRowHeader ? 'activeRowHeaderCell' : 'activeColumnHeaderCell') : false,\n                        val,\n                        f = self.formatters[header.type || 'string'],\n                        orderByArrowSize = 0,\n                        treeArrowSize = 0,\n                        cellWidth = self.sizes.columns[isRowHeader ? 'cornerCell' : header[self.uniqueId]] || header.width,\n                        ev = {\n                            value: d[header.name],\n                            row: d,\n                            header: header\n                        };\n                    if (cellStyle === 'headerCellCap') {\n                        cellWidth = w - x;\n                    }\n                    // if no data or schema are defined, a width is provided to the stub column\n                    if (cellWidth === undefined) {\n                        cellWidth = self.style.columnWidth;\n                    }\n                    if (x + cellWidth + self.style.cellBorderWidth < 0) {\n                        x += cellWidth + self.style.cellBorderWidth;\n                    }\n                    if (active) {\n                        cellStyle = 'activeCell';\n                    }\n                    if (self.visibleRows.indexOf(rowIndex) === -1 && !isHeader) {\n                        self.visibleRows.push(rowIndex);\n                    }\n                    val = self.dispatchEvent('formatcellvalue', ev);\n                    cx = x;\n                    cy = y;\n                    if (cellStyle === 'cornerCell') {\n                        cx = 0;\n                        cy = 0;\n                    } else if (isRowHeader) {\n                        cx = 0;\n                    } else if (isHeader) {\n                        cy = 0;\n                    }\n                    cell = {\n                        type: isGrid ? 'canvas-datagrid-cell' : header.type,\n                        style: cellStyle,\n                        nodeType: 'canvas-datagrid-cell',\n                        x: cx,\n                        y: cy,\n                        horizontalAlignment: self.style[cellStyle + 'HorizontalAlignment'],\n                        verticalAlignment: self.style[cellStyle + 'VerticalAlignment'],\n                        offsetTop: self.canvasOffsetTop + cy,\n                        offsetLeft: self.canvasOffsetLeft + cx,\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        active: active || activeHeader,\n                        hovered: hovered,\n                        selected: selected,\n                        width: cellWidth,\n                        height: cellHeight,\n                        offsetWidth: cellWidth,\n                        offsetHeight: cellHeight,\n                        parentNode: self.intf.parentNode,\n                        offsetParent: self.intf.parentNode,\n                        data: d,\n                        isCorner: isCorner,\n                        isHeader: isHeader,\n                        isColumnHeader: isColumnHeader,\n                        isHeaderCellCap: !!header.isHeaderCellCap,\n                        isRowHeader: isRowHeader,\n                        rowOpen: rowOpen,\n                        header: header,\n                        columnIndex: columnOrderIndex,\n                        rowIndex: rowOrderIndex,\n                        sortColumnIndex: headerIndex,\n                        sortRowIndex: rowIndex,\n                        isGrid: isGrid,\n                        gridId: (self.attributes.name || '') + d[self.uniqueId] + ':' + header[self.uniqueId],\n                        parentGrid: self.intf,\n                        innerHTML: '',\n                        activeHeader: activeHeader,\n                        value: isHeader && !isRowHeader ? (header.title || header.name) : d[header.name]\n                    };\n                    ev.cell = cell;\n                    cell.userHeight = cell.isHeader ? self.sizes.rows[-1] : rowHeight;\n                    cell.userWidth = cell.isHeader ? self.sizes.columns.cornerCell : self.sizes.columns[header[self.uniqueId]];\n                    cell[self.uniqueId] = d[self.uniqueId];\n                    self.visibleCells.unshift(cell);\n                    if (self.dispatchEvent('beforerendercell', ev)) { return; }\n                    self.ctx.fillStyle = self.style[cellStyle + 'BackgroundColor'];\n                    self.ctx.strokeStyle = self.style[cellStyle + 'BorderColor'];\n                    self.ctx.lineWidth = self.style[cellStyle + 'BorderWidth'];\n                    if (hovered) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'HoverBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'HoverBorderColor'];\n                    }\n                    if (selected) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'SelectedBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'SelectedBorderColor'];\n                    }\n                    if (activeHeader) {\n                        self.ctx.fillStyle = self.style[activeHeader + 'BackgroundColor'];\n                    }\n                    self.dispatchEvent('rendercell', ev);\n                    if (cell.isGrid) {\n                        if (cell.height !== rowHeight) {\n                            cell.height = rowHeight || self.style.cellHeightWithChildGrid;\n                            checkScrollHeight = true;\n                        }\n                        cell.width = self.sizes.columns[header[self.uniqueId]] || self.style.cellWidthWithChildGrid;\n                    }\n                    if (rowOpen && !cell.isRowHeader) {\n                        cell.height = self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight;\n                    }\n                    if (!cell.isGrid) {\n                        fillRect(cx, cy, cell.width, cell.height);\n                        strokeRect(cx, cy, cell.width, cell.height);\n                    }\n                    self.ctx.save();\n                    radiusRect(cell.x, cell.y, cell.width, cell.height, 0);\n                    self.ctx.clip();\n                    self.dispatchEvent('afterrendercell', ev);\n                    if (cell.height !== cellHeight && !(rowOpen && !cell.isRowHeader)) {\n                        self.sizes.rows[isHeader ? -1 : d[self.uniqueId]] = cell.height;\n                        checkScrollHeight = true;\n                    }\n                    if (cell.width !== cellWidth) {\n                        self.sizes.columns[header[self.uniqueId]] = cell.width;\n                        checkScrollHeight = true;\n                    }\n                    if (isRowHeader && self.attributes.tree) {\n                        if (!self.dispatchEvent('rendertreearrow', ev)) {\n                            treeArrowSize = drawTreeArrow(cell, self.style[cellStyle + 'PaddingLeft'], cy, 0);\n                        }\n                    }\n                    if ((self.attributes.showRowNumbers && isRowHeader)\n                            || !isRowHeader) {\n                        if (cell.isGrid && !self.dispatchEvent('beforerendercellgrid', ev)) {\n                            if (!self.childGrids[cell.gridId]) {\n                                cellGridAttributes = self.args.cellGridAttributes || self.args;\n                                cellGridAttributes.name = self.attributes.saveAppearance ? cell.gridId : undefined;\n                                cellGridAttributes.parentNode = cell;\n                                cellGridAttributes.data = d[header.name];\n                                ev.cellGridAttributes = cellGridAttributes;\n                                if (self.dispatchEvent('beforecreatecellgrid', ev)) { return; }\n                                self.childGrids[cell.gridId] = self.createGrid(cellGridAttributes);\n                                self.sizes.rows[rd[self.uniqueId]]\n                                    = self.sizes.rows[rd[self.uniqueId]] || self.style.cellGridHeight;\n                                checkScrollHeight = true;\n                            }\n                            cell.grid = self.childGrids[cell.gridId];\n                            cell.grid.parentNode = cell;\n                            cell.grid.visible = true;\n                            cell.grid.draw();\n                            self.dispatchEvent('rendercellgrid', ev);\n                        } else if (!cell.isGrid) {\n                            if (self.childGrids[cell.gridId]) {\n                                self.childGrids[cell.gridId].parentNode.offsetHeight = 0;\n                            }\n                            if (isHeader && self.orderBy === header.name) {\n                                if (!self.dispatchEvent('renderorderbyarrow', ev)) {\n                                    orderByArrowSize = drawOrderByArrow(cx + self.style[cellStyle + 'PaddingLeft'], 0);\n                                }\n                            }\n                            self.ctx.fillStyle = self.style[cellStyle + 'Color'];\n                            if (hovered) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'HoverColor'];\n                            }\n                            if (selected) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'SelectedColor'];\n                            }\n                            if (activeHeader) {\n                                self.ctx.fillStyle = self.style[activeHeader + 'Color'];\n                            }\n                            self.ctx.font = self.style[cellStyle + 'Font'];\n                            cell.fontHeight = self.style[cellStyle + 'FontHeight'];\n                            cell.treeArrowWidth = treeArrowSize;\n                            cell.orderByArrowWidth = orderByArrowSize;\n                            val = val !== undefined ? val : f\n                                ? f(ev) : '';\n                            if (val === undefined && !f) {\n                                val = '';\n                                console.warn('canvas-datagrid: Unknown format '\n                                    + header.type + ' add a cellFormater');\n                            }\n                            cell.formattedValue = ((val !== undefined && val !== null) ? val : '').toString();\n                            if (self.columnFilters && self.columnFilters[val] !== undefined && isHeader) {\n                                cell.formattedValue = self.attributes.filterTextPrefix + val;\n                            }\n                            if (!self.dispatchEvent('rendertext', ev)) {\n                                if (cell.innerHTML || header.type === 'html') {\n                                    drawHtml(cell);\n                                } else {\n                                    drawText(cell);\n                                }\n                            }\n                        }\n                    }\n                    if (active) {\n                        aCell = cell;\n                    }\n                    if (selected && !isRowHeader) {\n                        if ((!self.selections[cell.rowIndex - 1]\n                                || self.selections[cell.rowIndex - 1].indexOf(cell.columnIndex) === -1\n                                || cell.rowIndex === 0)\n                                && !cell.isHeader) {\n                            selectionBorders.push([cell, 't']);\n                        }\n                        if (!self.selections[cell.rowIndex + 1]\n                                || self.selections[cell.rowIndex + 1].indexOf(cell.columnIndex) === -1) {\n                            selectionBorders.push([cell, 'b']);\n                        }\n                        if (!self.selections[cell.rowIndex] || cell.columnIndex === 0\n                                || self.selections[cell.rowIndex].indexOf(cell.columnIndex - 1) === -1) {\n                            selectionBorders.push([cell, 'l']);\n                        }\n                        if (!self.selections[cell.rowIndex] || cell.columnIndex === s.length\n                                || self.selections[cell.rowIndex].indexOf(cell.columnIndex + 1) === -1) {\n                            selectionBorders.push([cell, 'r']);\n                        }\n                    }\n                    self.ctx.restore();\n                    x += cell.width + self.style.cellBorderWidth;\n                    return cell.width;\n                };\n            }\n            function drawRowHeader(rowData, index, rowOrderIndex) {\n                var a;\n                if (self.attributes.showRowHeaders) {\n                    x = 0;\n                    rowHeaderCell = {'rowHeaderCell': index + 1 };\n                    rowHeaderCell[self.uniqueId] = rowData[self.uniqueId];\n                    a = {\n                        name: 'rowHeaderCell',\n                        width: self.style.rowHeaderCellWidth,\n                        style: 'rowHeaderCell',\n                        type: 'string',\n                        data: rowData[self.uniqueId],\n                        index: -1\n                    };\n                    a[self.uniqueId] = rowData[self.uniqueId];\n                    rowOpen = self.openChildren[rowData[self.uniqueId]];\n                    drawCell(rowHeaderCell, index, rowOrderIndex)(a, -1, -1);\n                }\n            }\n            function drawHeaders() {\n                var d, g = s.length, i, o, columnHeaderCell, header;\n                rowHeaders.forEach(function (rArgs) {\n                    y = rArgs[3];\n                    cellHeight = rArgs[4];\n                    drawRowHeader(rArgs[0], rArgs[1], rArgs[2]);\n                });\n                if (self.attributes.showColumnHeaders) {\n                    x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft;\n                    if (self.attributes.showRowHeaders) {\n                        x += columnHeaderCellWidth;\n                    }\n                    y = 0;\n                    // cell height might have changed during drawing\n                    cellHeight = self.getRowHeaderCellHeight();\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        header = s[i];\n                        d = {\n                            title: header.title,\n                            name: header.name,\n                            width: header.width,\n                            style: 'columnHeaderCell',\n                            type: 'string',\n                            index: o,\n                            order: i\n                        };\n                        columnHeaderCell = {'columnHeaderCell': header.title || header.name};\n                        columnHeaderCell[self.uniqueId] = 'h' + header[self.uniqueId];\n                        d[self.uniqueId] = header[self.uniqueId];\n                        x += drawCell(columnHeaderCell, -1, -1)(d, o, i);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    // fill in the space right of the headers\n                    if (x < w) {\n                        c = {\n                            name: '',\n                            width: self.style.scrollBarWidth,\n                            style: 'headerCellCap',\n                            isHeaderCell: true,\n                            isHeaderCellCap: true,\n                            type: 'string',\n                            index: s.length\n                        };\n                        c[self.uniqueId] = 'columnHeaderCell';\n                        drawCell({endCap: ''}, -1, -1)(c, -1, -1);\n                    }\n                    // fill in the space right of the headers\n                    if (self.attributes.showRowHeaders) {\n                        cornerCell = {'cornerCell': '' };\n                        cornerCell[self.uniqueId] = 'cornerCell';\n                        x = 0;\n                        c = {\n                            name: 'cornerCell',\n                            width: self.style.rowHeaderCellWidth,\n                            style: 'cornerCell',\n                            type: 'string',\n                            index: -1\n                        };\n                        c[self.uniqueId] = 'cornerCell';\n                        drawCell(cornerCell, -1, -1)(c, -1, -1);\n                    }\n                }\n            }\n            function drawRow(r, d) {\n                var i, treeHeight, rowSansTreeHeight, o, g = s.length;\n                if (y - (cellHeight * 2) > h) {\n                    return false;\n                }\n                rd = self.data[r];\n                rowOpen = self.openChildren[rd[self.uniqueId]];\n                rowSansTreeHeight = self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight;\n                treeHeight = (rowOpen ? self.sizes.trees[rd[self.uniqueId]] : 0);\n                rowHeight = rowSansTreeHeight + treeHeight;\n                if (y < rowHeight * -1) {\n                    return false;\n                }\n                if (self.attributes.showRowHeaders) {\n                    x += columnHeaderCellWidth;\n                }\n                cellHeight = rowHeight;\n                for (o = self.scrollIndexLeft; o < g; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        self.scrollIndexRight = o;\n                        self.scrollPixelRight = x;\n                        break;\n                    }\n                }\n                // cell height might have changed during drawing\n                cellHeight = rowHeight;\n                x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft + self.style.cellBorderWidth;\n                // don't draw a tree for the new row\n                treeGrid = self.childGrids[rd[self.uniqueId]];\n                if (r !== self.data.length && rowOpen) {\n                    treeGrid.visible = true;\n                    treeGrid.parentNode = {\n                        offsetTop: y + rowSansTreeHeight + self.canvasOffsetTop,\n                        offsetLeft: columnHeaderCellWidth - 1 + self.canvasOffsetLeft,\n                        offsetHeight: treeHeight,\n                        offsetWidth: self.width - columnHeaderCellWidth - self.style.scrollBarWidth - 1,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: self.style,\n                        nodeType: 'canvas-datagrid-tree',\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        rowIndex: r\n                    };\n                    self.visibleCells.unshift({\n                        rowIndex: x,\n                        columnIndex: 0,\n                        y: treeGrid.parentNode.offsetTop,\n                        x: treeGrid.parentNode.offsetLeft,\n                        height: treeGrid.parentNode.offsetHeight,\n                        width: treeGrid.parentNode.offsetWidth,\n                        style: 'tree-grid',\n                        type: treeGrid.parentNode.nodeType\n                    });\n                    treeGrid.draw();\n                } else if (treeGrid) {\n                    treeGrid.parentNode.offsetHeight = 0;\n                    delete self.sizes.trees[rd[self.uniqueId]];\n                }\n                rowHeaders.push([rd, r, d, y, rowHeight]);\n                y += cellHeight + self.style.cellBorderWidth;\n                return true;\n            }\n            function initDraw() {\n                self.visibleRows = [];\n                s = self.getVisibleSchema();\n                self.visibleCells = [];\n                self.canvasOffsetTop = self.isChildGrid ? self.parentNode.offsetTop : 0;\n                self.canvasOffsetLeft = self.isChildGrid ? self.parentNode.offsetLeft : 0;\n                h = self.height;\n                w = self.width;\n                if (!self.isChildGrid) {\n                    self.ctx.scale(window.devicePixelRatio, window.devicePixelRatio);\n                }\n            }\n            function drawBackground() {\n                radiusRect(0, 0, w, h, 0);\n                self.ctx.clip();\n                self.ctx.fillStyle = self.style.backgroundColor;\n                fillRect(0, 0, w, h);\n            }\n            function drawRows() {\n                var o, n, i, g = s.length;\n                x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft + self.style.cellBorderWidth;\n                y = (self.scrollBox.scrollTop * -1) + rowHeaderCellHeight + self.scrollPixelTop + self.style.cellBorderWidth;\n                for (r = self.scrollIndexTop; r < l; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        self.scrollIndexBottom = r;\n                        self.scrollPixelBottom = y;\n                        break;\n                    }\n                }\n                if (self.attributes.showNewRow) {\n                    if (self.attributes.showRowHeaders) {\n                        x += columnHeaderCellWidth;\n                    }\n                    rowHeight = cellHeight = self.style.cellHeight;\n                    rowOpen = false;\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        x += drawCell(self.newRow, self.data.length, self.data.length)(s[i], i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    rowHeaders.push([self.newRow, self.data.length, self.data.length, y, rowHeight]);\n                }\n            }\n            function drawReorderMarkers() {\n                if (!self.reorderObject) { return; }\n                var b = {\n                        height: self.reorderObject.height,\n                        width: self.reorderObject.width,\n                        x: self.reorderObject.x + self.reorderObject.dragOffset.x,\n                        y: self.reorderObject.y + self.reorderObject.dragOffset.y\n                    },\n                    m = {\n                        width: w,\n                        heigth: h,\n                        x: 0,\n                        y: 0\n                    };\n                self.ctx.fillStyle = self.style.reorderMarkerBackgroundColor;\n                self.ctx.lineWidth = self.style.reorderMarkerBorderWidth;\n                self.ctx.strokeStyle = self.style.reorderMarkerBorderColor;\n                if (self.dragMode === 'row-reorder') {\n                    b.width = w;\n                    b.x = 0;\n                    m.width = w;\n                    m.y = self.currentCell.y;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.rowIndex !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex - 1 !== self.reorderObject.rowIndex) {\n                        addBorderLine(m, 't');\n                    }\n                } else if (self.dragMode === 'column-reorder' && self.reorderObject) {\n                    b.height = h;\n                    b.y = 0;\n                    m.height = h;\n                    m.x = self.currentCell.x;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.columnIndex !== self.reorderObject.columnIndex\n                            && self.currentCell.columnIndex - 1 !== self.reorderObject.columnIndex) {\n                        addBorderLine(m, 'l');\n                    }\n                }\n            }\n            function drawBorder() {\n                self.ctx.lineWidth = self.style.gridBorderWidth;\n                self.ctx.strokeStyle = self.style.gridBorderColor;\n                strokeRect(0, 0, self.width, self.height);\n            }\n            function drawSelectionBorders() {\n                self.ctx.lineWidth = self.style.selectionOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.selectionOverlayBorderColor;\n                selectionBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n            }\n            function drawActiveCell() {\n                if (!aCell) { return; }\n                if (self.attributes.selectionMode === 'row') {\n                    if (self.activeCell && self.activeCell.rowIndex === aCell.rowIndex) {\n                        self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                        self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                        strokeRect(0, aCell.y, self.getHeaderWidth() + columnHeaderCellWidth, rowHeight);\n                    }\n                } else {\n                    self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                    self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                    strokeRect(aCell.x, aCell.y, aCell.width, aCell.height);\n                }\n            }\n            function drawDebug() {\n                perfCounters[drawCount % perfWindowSize] = performance.now() - p;\n                var d;\n                if (self.attributes.debug) {\n                    self.ctx.font = '11px sans-serif';\n                    d = {};\n                    d.perf = (perfCounters.reduce(function (a, b) {\n                        return a + b;\n                    }, 0) / perfCounters.length).toFixed(1)\n                        + 'ms (' +\n                        perfCounters.map(function (a) { return a.toFixed(1); }).join(', ') + ')';\n                    d.htmlImages = Object.keys(self.htmlImageCache).length;\n                    d.scrollBox = self.scrollBox.toString();\n                    d.scrollIndex = '{\"top\": ' + self.scrollIndexTop + ', \"left\": ' + self.scrollIndexLeft + '}';\n                    d.scrollPixel = '{\"top\": ' + self.scrollPixelTop + ', \"left\": ' + self.scrollPixelLeft + '}';\n                    d.canvasOffset = '{\"top\": ' + self.canvasOffsetTop + ', \"left\": ' + self.canvasOffsetLeft + '}';\n                    d.pointerLockPosition =  self.pointerLockPosition ?\n                            self.pointerLockPosition.x + ', ' + self.pointerLockPosition.y : '';\n                    d.size = '{\"width\": ' + self.width + ', \"height\": ' + self.height + '}';\n                    d.mouse = '{\"x\": ' + self.mouse.x + ', \"y\": ' + self.mouse.y + '}';\n                    d.touch = !self.touchStart\n                        ? '' : '{\"x\": ' + self.touchStart.x + ', \"y\": ' + self.touchStart.y + \"}\";\n                    d.entities = self.visibleCells.length;\n                    d.hasFocus = self.hasFocus;\n                    d.dragMode = self.dragMode;\n                    if (self.currentCell) {\n                        d.columnIndex = self.currentCell.columnIndex;\n                        d.rowIndex = self.currentCell.rowIndex;\n                        d.sortColumnIndex = self.currentCell.sortColumnIndex;\n                        d.sortRowIndex = self.currentCell.sortRowIndex;\n                        d.context = self.currentCell.context;\n                        d.dragContext = self.currentCell.dragContext;\n                        d.style = self.currentCell.style;\n                        d.type = self.currentCell.type;\n                    }\n                    self.ctx.save();\n                    Object.keys(d).forEach(function (key, index) {\n                        var m = key + ': ' + d[key],\n                            lh = 14;\n                        self.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n                        fillRect(columnHeaderCellWidth, lh + (index * lh), 800, lh);\n                        self.ctx.fillStyle = 'rgba(0, 0, 0, 1)';\n                        fillText(m, columnHeaderCellWidth + 1, rowHeaderCellHeight + (index * lh));\n                    });\n                    self.ctx.restore();\n                }\n            }\n            self.ctx.save();\n            initDraw();\n            drawBackground();\n            drawRows();\n            drawSelectionBorders();\n            drawActiveCell();\n            drawHeaders();\n            drawReorderMarkers();\n            drawScrollBars();\n            if (checkScrollHeight) {\n                self.resize(true);\n            }\n            drawBorder();\n            drawDebug();\n            if (self.dispatchEvent('afterdraw', {})) { return; }\n            self.ctx.restore();\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var touchDelta = {x: 0, y: 0, scrollTop: 0, scrollLeft: 0},\n            touchAnimateTo = {scrollLeft: 0, scrollTop: 0},\n            touchSigma = {scrollLeft: 0, scrollTop: 0},\n            xPPS = 0,\n            yPPS = 0,\n            touchingCell = false,\n            startingCell = false,\n            wheeling,\n            animationFrames = 0;\n        function calculateCssSize(sizeString, parentSize) {\n            var p;\n            if (sizeString === 'auto' || sizeString === '') { return parentSize; }\n            if (/%/.test(sizeString)) {\n                p = parseFloat(sizeString, 10);\n                return parentSize * (p * 0.01);\n            }\n            return parseFloat(sizeString, 10);\n        }\n        self.getTouchPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.touches[0].clientX - rect.left,\n                    y: e.touches[0].clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        self.calculatePPS = function () {\n            xPPS = ((touchDelta.scrollLeft - touchSigma.scrollLeft) / (touchDelta.t - touchSigma.t));\n            yPPS = ((touchDelta.scrollTop - touchSigma.scrollTop) / (touchDelta.t - touchSigma.t));\n            touchSigma = {\n                scrollLeft: touchDelta.scrollLeft,\n                scrollTop: touchDelta.scrollTop,\n                t: performance.now() / 10\n            };\n        };\n        self.touchCell = function (e) {\n            return function () {\n                clearInterval(self.touchCalcTimeout);\n                var pos = self.getTouchPos(e);\n                if (Math.abs(touchDelta.x) + Math.abs(touchDelta.y) < self.attributes.touchDeadZone) {\n                    touchingCell = self.getCellAt(pos.x, pos.y);\n                    self.mousemove(e, pos);\n                    self.mousedown(e, pos);\n                    self.mousemove(e, pos);\n                    self.draw();\n                }\n            };\n        };\n        self.touchstart = function (e) {\n            touchingCell = false;\n            self.touchStart = self.getTouchPos(e);\n            startingCell = self.getCellAt(self.touchStart.x, self.touchStart.y, true);\n            if (self.dispatchEvent('touchstart', {NativeEvent: e, cell: self.startingCell})) { return; }\n            self.stopPropagation(e);\n            e.preventDefault();\n            self.touchScrollStart = {\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: performance.now() / 1000\n            };\n            touchDelta = {\n                x: self.touchStart.x,\n                y: self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: 0\n            };\n            self.touchmove(e);\n            clearTimeout(self.touchTimeout);\n            clearInterval(self.touchCalcTimeout);\n            self.touchTimeout = setTimeout(self.touchCell(e), self.attributes.touchSelectTimeMs);\n            self.touchCalcTimeout = setInterval(self.calculatePPS, 10);\n            self.touchHaltAnimation = true;\n            document.body.addEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.addEventListener('touchend', self.touchend, false);\n            document.body.addEventListener('touchcancel', self.touchcancel, false);\n        };\n        self.easing = function (t, b, c, d) {\n            return c * (t / d) * (2 - t) + b;\n        };\n        self.touchEndAnimation = function () {\n            if (!self.canvas || !self.scrollBox.scrollTo) { return requestAnimationFrame(self.touchEndAnimation); }\n            var x,\n                y,\n                n = performance.now() / 1000,\n                d = (self.attributes.touchReleaseAnimationDurationMs / 1000),\n                t;\n            touchDelta.t = touchDelta.t || n + d;\n            t = n - touchDelta.t + 1;\n            if (t > 1 || self.touchHaltAnimation || (animationFrames > 1000)) {\n                animationFrames = 0;\n                self.touchHaltAnimation = false;\n                touchAnimateTo = {scrollLeft: -1, scrollTop: -1};\n                return;\n            }\n            animationFrames += 1;\n            x = self.easing(t, touchDelta.scrollLeft, -touchAnimateTo.scrollLeft, d);\n            y = self.easing(t, touchDelta.scrollTop, -touchAnimateTo.scrollTop, d);\n            self.scrollBox.scrollTo(x, y);\n            requestAnimationFrame(self.touchEndAnimation);\n        };\n        self.touchend = function (e) {\n            if (self.dispatchEvent('touchend', {NativeEvent: e})) { return; }\n            var dz = Math.abs(touchDelta.x) + Math.abs(touchDelta.y) < self.attributes.touchDeadZone,\n                pos = {\n                    x: self.touchStart.x + touchDelta.x,\n                    y: self.touchStart.y + touchDelta.y\n                },\n                cell = self.getCellAt(pos.x, pos.y);\n            if (!self.hasFocus) { return; }\n            if (touchingCell) {\n                self.mouseup(e, self.touchStart);\n            } else if (dz) {\n                if (cell.active) {\n                    self.beginEditAt(cell.columnIndex, cell.rowIndex);\n                } else {\n                    self.mousedown(e, self.touchStart);\n                    self.mouseup(e, self.touchStart);\n                    self.click(e, self.touchStart);\n                }\n            }\n            touchingCell = false;\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n            clearTimeout(self.touchTimeout);\n            clearInterval(self.touchCalcTimeout);\n            self.calculatePPS();\n            touchAnimateTo.scrollLeft = xPPS * self.attributes.touchReleaseAcceleration;\n            touchAnimateTo.scrollTop = yPPS * self.attributes.touchReleaseAcceleration;\n            self.touchHaltAnimation = false;\n            if (animationFrames === 0 && !/-scroll-/.test(startingCell.style) && !dz) {\n                self.touchEndAnimation();\n            }\n        };\n        self.touchmove = function (e) {\n            var d = self.getTouchPos(e);\n            if (self.dispatchEvent('touchmove', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (!self.hasFocus) { return; }\n            touchDelta = {\n                x: d.x - self.touchStart.x,\n                y: d.y - self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: 0\n            };\n            if (/vertical-scroll-/.test(startingCell.style)) {\n                self.scrollBox.scrollTop = self.scrollBox.scrollHeight * (d.y / self.height);\n            } else if (/horizontal-scroll-/.test(startingCell.style)) {\n                self.scrollBox.scrollLeft = self.scrollBox.scrollWidth * (d.x / self.width);\n            } else if (touchingCell) {\n                self.mousemove(e, d);\n                self.draw();\n            } else {\n                if (animationFrames === 0) {\n                    self.scrollBox.scrollTo(self.touchScrollStart.scrollLeft - touchDelta.x,\n                        self.touchScrollStart.scrollTop - touchDelta.y);\n                }\n            }\n        };\n        self.touchcancel = function (e) {\n            if (self.dispatchEvent('touchcancel', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) { return; }\n            self.touchend(e);\n            touchingCell = false;\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n            return;\n        };\n        self.stopPropagation = function (e) { e.stopPropagation(); };\n        self.addEventListener = function (ev, fn) {\n            self.events[ev] = self.events[ev] || [];\n            self.events[ev].unshift(fn);\n        };\n        self.removeEventListener = function (ev, fn) {\n            (self.events[ev] || []).forEach(function removeEachListener(sfn, idx) {\n                if (fn === sfn) {\n                    self.events[ev].splice(idx, 1);\n                }\n            });\n        };\n        self.dispatchEvent = function (ev, e) {\n            var defaultPrevented;\n            function preventDefault() {\n                defaultPrevented = true;\n            }\n            if (!self.events[ev]) { return; }\n            self.events[ev].forEach(function dispatchEachEvent(fn) {\n                e.ctx = self.ctx;\n                e.preventDefault = preventDefault;\n                fn.apply(self.intf, [e]);\n            });\n            return defaultPrevented;\n        };\n        self.resizeDomElement = function () {\n            if (!self.parentIsCanvas) {\n                if (self.shadowRootParentElement) {\n                    // shadow dom browsers\n                    self.width = calculateCssSize(self.style.width, self.shadowRootParentElement.offsetWidth);\n                    self.height = calculateCssSize(self.style.height, self.shadowRootParentElement.offsetHeight);\n                    // self.intf.style.width = self.height + 'px';\n                    // self.intf.style.height = self.height + 'px';\n                } else {\n                    // pre shadow dom browsers\n                    self.width = self.parentDOMNode.offsetWidth;\n                    self.height = self.parentDOMNode.offsetHeight;\n                }\n                self.canvas.style.width = self.width + 'px';\n                self.canvas.style.height = self.height + 'px';\n                self.canvas.width = self.width * window.devicePixelRatio;\n                self.canvas.height = self.height * window.devicePixelRatio;\n            }\n            self.canvasOffsetLeft = self.args.canvasOffsetLeft || 0;\n            self.canvasOffsetTop = self.args.canvasOffsetTop || 0;\n        };\n        self.resize = function (drawAfterResize) {\n            var cellBorder = self.style.cellBorderWidth * 2,\n                columnHeaderCellBorder =  self.style.columnHeaderCellBorderWidth * 2,\n                scrollHeight,\n                scrollWidth,\n                rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth(),\n                // TODO: What the hell are these numbers!?  They are probably some value in the style.\n                scrollDragPositionOffsetY = 30,\n                scrollDragPositionOffsetX = 15;\n            if (self.isChildGrid) {\n                self.width = self.parentNode.offsetWidth;\n                self.height = self.parentNode.offsetHeight;\n            } else {\n                self.resizeDomElement();\n            }\n            scrollHeight = self.data.reduce(function reduceData(accumulator, row) {\n                return accumulator\n                    + (self.sizes.rows[row[self.uniqueId]] || self.style.cellHeight)\n                    + (self.sizes.trees[row[self.uniqueId]] || 0)\n                    + cellBorder;\n            }, 0) || 0;\n            scrollWidth = self.getVisibleSchema().reduce(function reduceSchema(accumulator, column) {\n                if (column.hidden) { return accumulator; }\n                return accumulator + (self.sizes.columns[column[self.uniqueId]] || column.width || self.style.columnWidth) + cellBorder;\n            }, 0) || 0;\n            if (self.attributes.showNewRow) {\n                scrollHeight += self.style.cellHeight + cellBorder;\n            }\n            self.scrollBox.width = self.width - columnHeaderCellWidth;\n            self.scrollBox.height = self.height - rowHeaderCellHeight - columnHeaderCellBorder;\n            self.scrollBox.top = rowHeaderCellHeight + columnHeaderCellBorder;\n            self.scrollBox.left = columnHeaderCellWidth;\n            self.scrollBox.scrollHeight = scrollHeight + self.style.scrollBarWidth - self.scrollBox.height;\n            self.scrollBox.scrollWidth = scrollWidth + self.style.scrollBarWidth - self.scrollBox.width;\n            self.scrollBox.widthBoxRatio = ((self.scrollBox.width - scrollDragPositionOffsetX)\n                / (self.scrollBox.scrollWidth + self.scrollBox.width - scrollDragPositionOffsetX));\n            self.scrollBox.scrollBoxWidth = self.scrollBox.width\n                * self.scrollBox.widthBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.heightBoxRatio = ((self.scrollBox.height - scrollDragPositionOffsetY)\n                / (self.scrollBox.scrollHeight + (self.scrollBox.height - scrollDragPositionOffsetY)));\n            self.scrollBox.scrollBoxHeight = self.scrollBox.height\n                * self.scrollBox.heightBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.scrollBoxWidth = Math.max(self.scrollBox.scrollBoxWidth, self.style.scrollBarBoxMinSize);\n            self.scrollBox.scrollBoxHeight = Math.max(self.scrollBox.scrollBoxHeight, self.style.scrollBarBoxMinSize);\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            self.resizeEditInput();\n            self.scroll(true);\n            if (drawAfterResize) {\n                self.draw(true);\n            }\n            self.dispatchEvent('resize', {});\n            return true;\n        };\n        self.scroll = function (e, dontDraw) {\n            var s = self.getVisibleSchema(),\n                cellBorder = self.style.cellBorderWidth * 2;\n            self.scrollIndexTop = 0;\n            self.scrollPixelTop = 0;\n            self.scrollIndexLeft = 0;\n            self.scrollPixelLeft = 0;\n            while (self.scrollPixelTop < self.scrollBox.scrollTop && self.scrollIndexTop < self.data.length) {\n                self.scrollPixelTop +=\n                    (self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || self.style.cellHeight)\n                    + (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0)\n                    + cellBorder;\n                self.scrollIndexTop += 1;\n            }\n            while (self.scrollPixelLeft < self.scrollBox.scrollLeft && self.scrollIndexLeft < s.length) {\n                self.scrollPixelLeft +=\n                    (self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width);\n                self.scrollIndexLeft += 1;\n            }\n            if (self.data.length > 0) {\n                self.scrollIndexLeft = Math.max(self.scrollIndexLeft - 1, 0);\n                self.scrollPixelLeft = Math.max(self.scrollPixelLeft\n                    - (self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width), 0);\n                self.scrollIndexTop = Math.max(self.scrollIndexTop - 1, 0);\n                self.scrollPixelTop = Math.max(self.scrollPixelTop\n                    - (self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || self.style.cellHeight)\n                    - (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0), 0);\n            }\n            self.ellipsisCache = {};\n            if (!dontDraw) {\n                self.draw(true);\n            }\n            //TODO: figure out why this has to be delayed for child grids\n            //BUG: wheeling event on 3rd level hierarchy fails to move input box\n            requestAnimationFrame(self.resizeEditInput);\n            self.dispatchEvent('scroll', {top: self.scrollBox.scrollTop, left: self.scrollBox.scrollLeft});\n        };\n        self.mousemove = function (e, overridePos) {\n            if (self.contextMenu || self.input) {\n                return;\n            }\n            self.mouse = overridePos || self.getLayerPos(e);\n            var ctrl = (e.controlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                i,\n                s = self.getSchema(),\n                dragBounds,\n                sBounds,\n                x = self.mouse.x,\n                y = self.mouse.y,\n                o = self.getCellAt(x, y),\n                delta,\n                ev = {NativeEvent: e, cell: o, x: x, y: y},\n                previousCell = self.currentCell;\n            clearTimeout(self.scrollTimer);\n            if (!self.isInGrid({x: x, y: y})) {\n                self.hasFocus = false;\n            }\n            if (self.dispatchEvent('mousemove', ev)) {\n                return;\n            }\n            if (o && self.currentCell && (self.currentCell.rowIndex !== o.rowIndex\n                    || self.currentCell.columnIndex !== o.columnIndex)) {\n                self.cellBoundaryCrossed = true;\n                ev.cell = previousCell;\n                self.dispatchEvent('cellmouseout', ev);\n                ev.cell = o;\n                self.dispatchEvent('cellmouseover', ev);\n            }\n            self.currentCell = o;\n            if (!self.hasFocus) {\n                return;\n            }\n            self.hovers = {};\n            if (!self.draggingItem\n                    && o\n                    && self.scrollModes.indexOf(o.context) === -1) {\n                self.dragItem = o;\n                self.dragMode = o.dragContext;\n                self.canvas.style.cursor = o.context;\n                if (o.context === 'cell' && o.data) {\n                    self.canvas.style.cursor = 'pointer';\n                    self.hovers[o.data[self.uniqueId]] = [o.columnIndex];\n                }\n                if ((self.selecting || self.reorderObject)\n                        && o.context === 'cell'\n                        && o.data) {\n                    sBounds = self.getSelectionBounds();\n                    delta = {\n                        x: Math.abs(self.dragStart.x - x),\n                        y: Math.abs(self.dragStart.y - y)\n                    };\n                    if (self.dragStartObject.columnIndex !== -1 && e.shiftKey) {\n                        self.dragStartObject = {\n                            rowIndex: self.activeCell.rowIndex,\n                            columnIndex: self.activeCell.columnIndex\n                        };\n                    }\n                    dragBounds = {\n                        top: Math.min(self.dragStartObject.rowIndex, o.rowIndex),\n                        left: Math.min(self.dragStartObject.columnIndex, o.columnIndex),\n                        bottom: Math.max(self.dragStartObject.rowIndex, o.rowIndex),\n                        right: Math.max(self.dragStartObject.columnIndex, o.columnIndex)\n                    };\n                    if (self.dragStartObject.columnIndex === -1) {\n                        dragBounds.left = -1;\n                        dragBounds.right = s.length - 1;\n                        dragBounds.top = Math.min(sBounds.top, o.rowIndex);\n                        dragBounds.bottom = Math.max(sBounds.bottom, o.rowIndex);\n                    }\n                    if (self.dragStartObject.rowIndex !== o.rowIndex\n                                || self.dragStartObject.columnIndex !== o.columnIndex) {\n                        self.ignoreNextClick = true;\n                    }\n                    if (self.cellBoundaryCrossed || (delta.x === 0 && delta.y === 0) || (self.attributes.selectionMode === 'row')) {\n                        if ((self.attributes.selectionMode === 'row') || self.dragStartObject.columnIndex === -1) {\n                            self.selectRow(o.rowIndex, ctrl, null, true);\n                        } else {\n                            if (!self.dragAddToSelection && o.rowIndex !== undefined) {\n                                if (self.selections[o.rowIndex] && self.selections[o.rowIndex].indexOf(o.columnIndex) !== -1) {\n                                    self.selections[o.rowIndex].splice(self.selections[o.rowIndex].indexOf(o.columnIndex), 1);\n                                }\n                            } else {\n                                self.selections[o.rowIndex] = self.selections[o.rowIndex] || [];\n                                if (self.selections[o.rowIndex].indexOf(o.columnIndex) === -1) {\n                                    self.selections[o.rowIndex].push(o.columnIndex);\n                                }\n                            }\n                        }\n                    }\n                    if ((!self.selectionBounds || (dragBounds.top !== self.selectionBounds.top\n                            || dragBounds.left !== self.selectionBounds.left\n                            || dragBounds.bottom !== self.selectionBounds.bottom\n                            || dragBounds.right !== self.selectionBounds.right)) && !ctrl) {\n                        self.selections = [];\n                        sBounds = dragBounds;\n                        if (self.attributes.selectionMode === 'row') {\n                            for (i = sBounds.top; i <= sBounds.bottom; i += 1) {\n                                self.selectRow(i, true, null, true);\n                            }\n                        } else {\n                            self.selectArea(sBounds, true);\n                        }\n                    }\n                    self.autoScrollZone(e, x, y, ctrl);\n                }\n            }\n            self.cellBoundaryCrossed = false;\n            self.draw(true);\n        };\n        self.click = function (e, overridePos) {\n            var i,\n                selectionChanged,\n                ctrl = (e.controlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                pos = overridePos || self.getLayerPos(e);\n            self.currentCell = self.getCellAt(pos.x, pos.y);\n            if (self.currentCell.grid !== undefined) {\n                return;\n            }\n            function checkSelectionChange() {\n                if (!selectionChanged) { return; }\n                self.dispatchEvent('selectionchanged', {\n                    selectedData: self.getSelectedData(),\n                    selections: self.selections,\n                    selectionBounds: self.selectionBounds\n                });\n            }\n            if (self.input) {\n                self.endEdit();\n            }\n            if (self.ignoreNextClick) {\n                self.ignoreNextClick = false;\n                return;\n            }\n            i = self.currentCell;\n            if (self.dispatchEvent('click', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'cell') {\n                if (self.currentCell.style === 'cornerCell') {\n                    self.order(self.uniqueId, 'asc', self.sorters.number);\n                    self.setFilter();\n                    checkSelectionChange();\n                    return;\n                }\n                if (self.currentCell.style === 'columnHeaderCell') {\n                    if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                        if (self.orderBy === i.header.name) {\n                            self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                        } else {\n                            self.orderDirection = 'asc';\n                        }\n                        self.order(i.header.name, self.orderDirection);\n                        checkSelectionChange();\n                        return;\n                    }\n                    if (self.attributes.columnHeaderClickBehavior === 'select') {\n                        self.selectColumn(i.header.index, ctrl, e.shiftKey, true);\n                        checkSelectionChange();\n                        self.draw();\n                        return;\n                    }\n                }\n                if (['rowHeaderCell', 'columnHeaderCell'].indexOf(self.currentCell.style) === -1 && !ctrl) {\n                    self.setActiveCell(i.columnIndex, i.rowIndex);\n                }\n                self.selections[i.rowIndex] = self.selections[i.rowIndex] || [];\n                if (((self.attributes.selectionMode === 'row') || self.currentCell.style === 'rowHeaderCell')) {\n                    if (self.currentCell.style === 'rowHeaderCell'\n                            && self.attributes.tree && pos.x > 0\n                            && pos.x - self.currentCell.x < self.style.treeArrowWidth\n                            + self.style.treeArrowMarginLeft\n                            + self.style.treeArrowMarginRight + self.style.treeArrowClickRadius\n                            && pos.y - self.currentCell.y < self.style.treeArrowHeight\n                            + self.style.treeArrowMarginTop + self.style.treeArrowClickRadius\n                            && pos.y > 0) {\n                        self.toggleTree(i.rowIndex);\n                        return;\n                    }\n                    selectionChanged = true;\n                    self.selectRow(i.rowIndex, ctrl, null, true);\n                }\n                if (e.shiftKey && !ctrl) {\n                    self.selectionBounds = self.getSelectionBounds();\n                    self.selectArea(undefined, false);\n                }\n            }\n            checkSelectionChange();\n            self.draw(true);\n        };\n        self.dragResizeColumn = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = self.resizingStartingWidth + pos.x - self.dragStart.x;\n            y = self.resizingStartingHeight + pos.y - self.dragStart.y;\n            if (x < self.style.minColumnWidth) {\n                x = self.style.minColumnWidth;\n            }\n            if (y < self.style.minRowHeight) {\n                y = self.style.minRowHeight;\n            }\n            if (self.dispatchEvent('resizecolumn', {x: x, y: y, draggingItem: self.draggingItem})) { return false; }\n            if (self.scrollBox.scrollLeft > self.scrollBox.scrollWidth - self.attributes.resizeScrollZone\n                    && self.dragMode === 'ew-resize') {\n                self.resize(true);\n                self.scrollBox.scrollLeft += x;\n            }\n            if (self.dragMode === 'ew-resize') {\n                self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] = x;\n                if (['rowHeaderCell', 'cornerCell'].indexOf(self.draggingItem.header.style) !== -1) {\n                    self.resize(true);\n                }\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.dragMode === 'ns-resize') {\n                if (self.draggingItem.rowOpen) {\n                    self.sizes.trees[self.draggingItem.data[self.uniqueId]] = y;\n                } else if (self.attributes.globalRowResize) {\n                    self.style.cellHeight = y;\n                } else {\n                    self.sizes.rows[self.draggingItem.data[self.uniqueId]] = y;\n                }\n                self.dispatchEvent('resizerow', {row: y});\n                self.resizeChildGrids();\n                return;\n            }\n            self.ellipsisCache = {};\n        };\n        self.stopDragResize = function () {\n            self.resize();\n            document.body.removeEventListener('mousemove', self.dragResizeColumn, false);\n            document.body.removeEventListener('mouseup', self.stopDragResize, false);\n            self.setStorageData();\n            self.draw(true);\n            self.ignoreNextClick = true;\n        };\n        self.scrollGrid = function (e) {\n            var pos = self.getLayerPos(e);\n            if (self.attributes.scrollPointerLock && self.pointerLockPosition\n                    && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                self.pointerLockPosition.x += e.movementX;\n                self.pointerLockPosition.y += e.movementY;\n                self.pointerLockPosition.x = Math.min(self.width - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.x));\n                self.pointerLockPosition.y = Math.min(self.height - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.y));\n                pos = self.pointerLockPosition;\n            }\n            self.scrollMode = self.getCellAt(pos.x, pos.y).context;\n            if (self.scrollMode === 'horizontal-scroll-box' && self.scrollStartMode !== 'horizontal-scroll-box') {\n                self.scrollStartMode = 'horizontal-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.left = self.scrollBox.scrollLeft;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box' && self.scrollStartMode !== 'vertical-scroll-box') {\n                self.scrollStartMode = 'vertical-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.top = self.scrollBox.scrollTop;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollStartMode === 'vertical-scroll-box'\n                    && self.scrollMode !== 'vertical-scroll-box') {\n                self.scrollMode = 'vertical-scroll-box';\n            }\n            if (self.scrollStartMode === 'horizontal-scroll-box'\n                    && self.scrollMode !== 'horizontal-scroll-box') {\n                self.scrollMode = 'horizontal-scroll-box';\n            }\n            clearTimeout(self.scrollTimer);\n            if (self.scrollModes.indexOf(self.scrollMode) === -1) {\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box') {\n                self.scrollBox.scrollTop = self.scrollStart.top + ((pos.y - self.dragStart.y)\n                    / self.scrollBox.heightBoxRatio);\n            } else if (self.scrollMode === 'vertical-scroll-top') {\n                self.scrollBox.scrollTop -= (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'vertical-scroll-bottom') {\n                self.scrollBox.scrollTop += (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n            if (self.scrollMode === 'horizontal-scroll-box') {\n                self.scrollBox.scrollLeft = self.scrollStart.left + ((pos.x - self.dragStart.x)\n                    / self.scrollBox.widthBoxRatio);\n            } else if (self.scrollMode === 'horizontal-scroll-right') {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'horizontal-scroll-left') {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.stopScrollGrid = function () {\n            clearTimeout(self.scrollTimer);\n            if (document.exitPointerLock) {\n                document.exitPointerLock();\n            }\n            document.body.removeEventListener('mousemove', self.scrollGrid, false);\n        };\n        self.dragReorder = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = pos.x - self.dragStart.x;\n            y = pos.y - self.dragStart.y;\n            if (!self.attributes.allowColumnReordering && self.dragMode === 'column-reorder') {\n                return;\n            }\n            if (!self.attributes.allowRowReordering && self.dragMode === 'row-reorder') {\n                return;\n            }\n            if (self.dispatchEvent('reordering', {\n                    NativeEvent: e,\n                    source: self.dragStartObject,\n                    target: self.currentCell,\n                    dragMode: self.dragMode\n                })) {\n                return;\n            }\n            if (Math.abs(x) > self.attributes.reorderDeadZone || Math.abs(y) > self.attributes.reorderDeadZone) {\n                self.reorderObject = self.dragStartObject;\n                self.reorderTarget = self.currentCell;\n                self.reorderObject.dragOffset = {\n                    x: x,\n                    y: y\n                };\n                self.autoScrollZone(e, pos.x, pos.x, false);\n            }\n        };\n        self.stopDragReorder = function (e) {\n            var cr = {\n                    'row-reorder': self.orders.rows,\n                    'column-reorder': self.orders.columns\n                },\n                i = {\n                    'row-reorder': 'rowIndex',\n                    'column-reorder': 'columnIndex'\n                }[self.dragMode];\n            document.body.removeEventListener('mousemove', self.dragReorder, false);\n            document.body.removeEventListener('mouseup', self.stopDragReorder, false);\n            if (self.reorderObject\n                    && self.reorderTarget) {\n                self.ignoreNextClick = true;\n                if (self.reorderObject[i] !== self.reorderTarget[i]\n                        && !self.dispatchEvent('reorder', {\n                            NativeEvent: e,\n                            source: self.reorderObject,\n                            target: self.reorderTarget,\n                            dragMode: self.dragMode\n                        })) {\n                    cr[self.dragMode].splice(cr[self.dragMode].indexOf(self.reorderObject[i]), 1);\n                    cr[self.dragMode].splice(cr[self.dragMode].indexOf(self.reorderTarget[i]), 0, self.reorderObject[i]);\n                    self.setStorageData();\n                }\n            }\n            self.reorderObject = undefined;\n            self.reorderTarget = undefined;\n            self.draw(true);\n        };\n        self.mousedown = function (e, overridePos) {\n            self.lastMouseDownTarget = e.target;\n            if (self.dispatchEvent('mousedown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (e.button === 2 || self.input) { return; }\n            var ctrl = (e.controlKey || e.metaKey);\n            self.dragStart = overridePos || self.getLayerPos(e);\n            self.scrollStart = {\n                left: self.scrollBox.scrollLeft,\n                top: self.scrollBox.scrollTop\n            };\n            self.dragStartObject = self.getCellAt(self.dragStart.x, self.dragStart.y);\n            self.dragAddToSelection = !self.dragStartObject.selected;\n            if (!ctrl && !e.shiftKey && !/(vertical|horizontal)-scroll-(bar|box)/\n                    .test(self.dragStartObject.context) && !self.currentCell.isColumnHeader) {\n                self.selections = [];\n            }\n            if (self.dragStartObject.isGrid) {\n                return;\n            }\n            if (self.scrollModes.indexOf(self.dragStartObject.context) !== -1) {\n                self.scrollMode = self.dragStartObject.context;\n                self.scrollStartMode = self.dragStartObject.context;\n                self.scrollGrid(e);\n                if (self.attributes.scrollPointerLock\n                        && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                    self.pointerLockPosition = {\n                        x: self.dragStart.x,\n                        y: self.dragStart.y\n                    };\n                    self.canvas.requestPointerLock();\n                }\n                document.body.addEventListener('mousemove', self.scrollGrid, false);\n                document.body.addEventListener('mouseup', self.stopScrollGrid, false);\n                self.ignoreNextClick = true;\n                return;\n            }\n            if (self.dragMode === 'cell') {\n                self.selecting = true;\n                if (self.attributes.selectionMode === 'row') {\n                    self.selectRow(self.dragStartObject.rowIndex, ctrl, null, true);\n                }\n                return self.mousemove(e);\n            }\n            if (['ns-resize', 'ew-resize'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragItem;\n                if (self.draggingItem.rowOpen) {\n                    self.resizingStartingHeight = self.sizes.trees[self.draggingItem.data[self.uniqueId]];\n                } else {\n                    self.resizingStartingHeight = self.sizes.rows[self.draggingItem.data[self.uniqueId]] || self.style.cellHeight;\n                }\n                self.resizingStartingWidth = self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] || self.draggingItem.width;\n                document.body.addEventListener('mousemove', self.dragResizeColumn, false);\n                document.body.addEventListener('mouseup', self.stopDragResize, false);\n            }\n            if (['row-reorder', 'column-reorder'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragItem;\n                document.body.addEventListener('mousemove', self.dragReorder, false);\n                document.body.addEventListener('mouseup', self.stopDragReorder, false);\n            }\n        };\n        self.mouseup = function (e) {\n            clearTimeout(self.scrollTimer);\n            self.cellBoundaryCrossed = true;\n            self.selecting = undefined;\n            self.draggingItem = undefined;\n            self.dragStartObject = undefined;\n            if (self.dispatchEvent('mouseup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            if (self.currentCell && self.currentCell.grid !== undefined) {\n                return;\n            }\n            if (self.contextMenu || self.input) { return; }\n            if (self.dragStart && self.isInGrid(self.dragStart)) {\n                self.controlInput.focus();\n            }\n            e.preventDefault();\n        };\n        self.keydown = function (e) {\n            var i,\n                x = self.activeCell.columnIndex,\n                y = self.activeCell.rowIndex,\n                ctrl = (e.controlKey || e.metaKey),\n                last = self.data.length - 1,\n                cols = self.getVisibleSchema().length - 1;\n            if (self.dispatchEvent('keydown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            if (self.attributes.showNewRow) {\n                last += 1;\n            }\n            if (e.keyCode === 9) {\n                e.preventDefault();\n            }\n            // esc\n            if (e.keyCode === 27) {\n                self.selections = [];\n                self.draw(true);\n            // ctrl + a\n            } else if (ctrl && e.keyCode === 65) {\n                self.selectAll();\n            //ArrowDown\n            } else if (e.keyCode === 40) {\n                y += 1;\n            //ArrowUp\n            } else if (e.keyCode === 38) {\n                y -= 1;\n            //ArrowLeft Tab\n            } else if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {\n                x -= 1;\n            //ArrowRight Tab\n            } else if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {\n                x += 1;\n            //PageUp\n            } else if (e.keyCode === 33) {\n                y -= self.page;\n                e.preventDefault();\n            //PageDown\n            } else if (e.keyCode === 34) {\n                y += self.page;\n                e.preventDefault();\n            //Home ArrowUp\n            } else if (e.keyCode === 36 || (ctrl && e.keyCode === 38)) {\n                y = 0;\n            //End ArrowDown\n            } else if (e.keyCode === 35 || (ctrl && e.keyCode === 40)) {\n                y = self.data.length - 1;\n            //ArrowRight\n            } else if (ctrl && e.keyCode === 39) {\n                x = cols;\n            //ArrowLeft\n            } else if (ctrl && e.keyCode === 37) {\n                x = 0;\n            }\n            //Enter\n            if (e.keyCode === 13) {\n                return self.beginEditAt(x, y);\n            }\n            //Space\n            if (e.keyCode === 32) {\n                self.selections = [];\n                self.selections[Math.max(y, 0)] = [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                if (self.attributes.selectionMode === 'row') {\n                    for (i = self.selectionBounds.top; i <= self.selectionBounds.bottom; i += 1) {\n                        self.selectRow(i, ctrl, null, true);\n                    }\n                } else {\n                    self.selectArea(undefined, ctrl);\n                }\n                e.preventDefault();\n                self.draw(true);\n                return;\n            }\n            if (x < 0) {\n                x = 0;\n            }\n            if (y > last) {\n                y = last;\n            }\n            if (y < 0) {\n                y = 0;\n            }\n            if (x > cols) {\n                x = cols;\n            }\n            // Arrows\n            if (e.shiftKey && [37, 38, 39, 40].indexOf(e.keyCode) !== -1) {\n                self.selections[Math.max(y, 0)] = self.selections[Math.max(y, 0)] || [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                self.selectArea(undefined, ctrl);\n                self.draw(true);\n            }\n            if (x !== self.activeCell.columnIndex || y !== self.activeCell.rowIndex) {\n                self.scrollIntoView(x !== self.activeCell.columnIndex ? x : undefined, y !== self.activeCell.rowIndex ? y : undefined);\n                self.setActiveCell(x, y);\n                if (!e.shiftKey && self.attributes.selectionFollowsActiveCell) {\n                    if (!ctrl) {\n                        self.selections = [];\n                    }\n                    self.selections[y] = self.selections[y] || [];\n                    self.selections[y].push(x);\n                    self.dispatchEvent('selectionchanged', {\n                        selectedData: self.getSelectedData(),\n                        selections: self.selections,\n                        selectionBounds: self.selectionBounds\n                    });\n                }\n                self.draw(true);\n            }\n        };\n        self.keyup = function (e) {\n            if (self.dispatchEvent('keyup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            self.controlInput.value = '';\n        };\n        self.keypress = function (e) {\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.dispatchEvent('keypress', {NativeEvent: e, cell: self.currentCell})) { return; }\n        };\n        self.dblclick = function (e) {\n            if (self.dispatchEvent('dblclick', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'columnHeaderCell') {\n                self.fitColumnToValues(self.currentCell.header.name);\n            } else if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'cornerCell') {\n                self.autosize();\n            } else if (['cell', 'activeCell'].indexOf(self.currentCell.style) !== -1) {\n                self.beginEditAt(self.currentCell.columnIndex, self.currentCell.rowIndex);\n            }\n        };\n        self.scrollWheel = function (e) {\n            var l,\n                t,\n                deltaX = e.deltaX === undefined ? e.NativeEvent.deltaX : e.deltaX,\n                deltaY = e.deltaY === undefined ? e.NativeEvent.deltaY : e.deltaY,\n                deltaMode = e.deltaMode === undefined ? e.NativeEvent.deltaMode : e.deltaMode;\n            if (wheeling) {\n                return;\n            }\n            wheeling = setTimeout(function () {\n                if (self.dispatchEvent('wheel', {NativeEvent: e})) {\n                    return;\n                }\n                e = e.NativeEvent || e;\n                self.touchHaltAnimation = true;\n                l = self.scrollBox.scrollLeft;\n                t = self.scrollBox.scrollTop;\n                if (self.hasFocus) {\n                    //BUG Issue 42: https://github.com/TonyGermaneri/canvas-datagrid/issues/42\n                    //https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\n                    if (deltaMode === 1) {\n                        // line mode = 17 pixels per line\n                        deltaY = deltaY * 17;\n                    }\n                    self.scrollBox.scrollTo(deltaX + l, deltaY + t);\n                }\n                if (t !== self.scrollBox.scrollTop || l !== self.scrollBox.scrollLeft) {\n                    e.preventDefault();\n                }\n                wheeling = undefined;\n            }, 1);\n        };\n        self.copy = function (e) {\n            if (self.dispatchEvent('copy', {NativeEvent: e})) { return; }\n            if (!self.hasFocus || !e.clipboardData) { return; }\n            var rows = [], sData = self.getSelectedData();\n            if (sData.length > 0) {\n                sData.forEach(function (row) {\n                    if (row) {\n                        var r = [];\n                        Object.keys(row).forEach(function (key) {\n                            if (row[key] !== null\n                                    && row[key] !== false\n                                    && row[key] !== undefined\n                                    && row[key].replace) {\n                                return r.push('\"' + row[key].replace(/\"/g, '\"\"') + '\"');\n                            }\n                            r.push(row[key]);\n                        });\n                        r.join(',');\n                        rows.push(r);\n                    }\n                });\n                e.clipboardData.setData('text/plain', rows.join('\\n'));\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals HTMLElement: false, Reflect: false, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self, ctor) {\n        self.orders = {\n            rows: [],\n            columns: []\n        };\n        self.hasFocus = false;\n        self.activeCell = {\n            columnIndex: 0,\n            rowIndex: 0\n        };\n        self.storageName = 'canvasDataGrid';\n        self.invalidSearchExpClass = 'canvas-datagrid-invalid-search-regExp';\n        self.localStyleLibraryStorageKey = 'canvas-datagrid-user-style-library';\n        self.uniqueId = '_canvasDataGridUniqueId';\n        self.orderBy = self.uniqueId;\n        self.orderDirection = 'asc';\n        self.columnFilters = {};\n        self.filters = {};\n        self.frozenRows = [];\n        self.ellipsisCache = {};\n        self.scrollBox = {};\n        self.visibleRows = [];\n        /**\n         * Used internally to keep track of sizes of row, columns and child grids.\n         * @memberof canvasDatagrid\n         * @property sizes\n         * @readonly\n         */\n        self.sizes = {\n            rows: {},\n            columns: {},\n            trees: {}\n        };\n        self.currentFilter = function () {\n            return true;\n        };\n        self.selections = [];\n        self.hovers = {};\n        self.attributes = {};\n        self.style = {};\n        self.formatters = {};\n        self.sorters = {};\n        self.schemaHashes = {};\n        self.events = {};\n        self.uId = 0;\n        self.changes = [];\n        self.scrollIndexTop = 0;\n        self.scrollPixelTop = 0;\n        self.scrollIndexLeft = 0;\n        self.scrollPixelLeft = 0;\n        self.childGrids = {};\n        self.openChildren = {};\n        self.scrollModes = [\n            'vertical-scroll-box',\n            'vertical-scroll-top',\n            'vertical-scroll-bottom',\n            'horizontal-scroll-box',\n            'horizontal-scroll-right',\n            'horizontal-scroll-left'\n        ];\n        self.mouse = { x: 0, y: 0};\n        self.getSelectedData = function (expandToRow) {\n            var d = [], s = self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                if (expandToRow) {\n                    s.forEach(function (column) {\n                        d[index][column.name] = self.data[index][column.name];\n                    });\n                } else {\n                    row.forEach(function (col) {\n                        if (col === -1 || !s[col]) { return; }\n                        d[index][s[col].name] = self.data[index][s[col].name];\n                    });\n                }\n            });\n            return d;\n        };\n        self.fillArray = function (low, high, step) {\n            step = step || 1;\n            var i = [], x;\n            for (x = low; x <= high; x += step) {\n                i[x] = x;\n            }\n            return i;\n        };\n        self.getRowHeaderCellHeight = function () {\n            if (!self.attributes.showColumnHeaders) { return 0; }\n            return self.sizes.rows[-1] || self.style.columnHeaderCellHeight;\n        };\n        self.getColumnHeaderCellWidth = function () {\n            if (!self.attributes.showRowHeaders) { return 0; }\n            return self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth;\n        };\n        self.setStorageData = function () {\n            if (!self.attributes.saveAppearance) { return; }\n            localStorage.setItem(self.storageName + '-' + self.attributes.name, JSON.stringify({\n                sizes: {\n                    rows: self.sizes.rows,\n                    columns: self.sizes.columns\n                },\n                orders: {\n                    rows: self.orders.rows,\n                    columns: self.orders.columns\n                },\n                orderBy: self.orderBy,\n                orderDirection: self.orderDirection\n            }));\n        };\n        self.getSchema = function () {\n            return self.schema || self.tempSchema;\n        };\n        self.createColumnOrders = function () {\n            var s = self.getSchema();\n            self.orders.columns = self.fillArray(0, s.length - 1);\n        };\n        self.createRowOrders = function () {\n            self.orders.rows = self.fillArray(0, self.data.length - 1);\n        };\n        self.getVisibleSchema = function () {\n            return self.getSchema().filter(function (col) { return !col.hidden; });\n        };\n        self.applyDefaultValue = function (row, header) {\n            var d = header.defaultValue || '';\n            if (typeof d === 'function') {\n                d = d.apply(self.intf, [header]);\n            }\n            row[header.name] = d;\n        };\n        self.createNewRowData = function () {\n            self.newRow = {};\n            self.newRow[self.uniqueId] = self.uId;\n            self.uId += 1;\n            self.getSchema().forEach(function forEachHeader(header) {\n                self.applyDefaultValue(self.newRow, header);\n            });\n        };\n        self.getSchemaNameHash = function (key) {\n            var n = 0;\n            while (self.schemaHashes[key]) {\n                n += 1;\n                key = key + n;\n            }\n            return key;\n        };\n        self.filter = function (type) {\n            var f = self.filters[type];\n            if (!f && type !== undefined) {\n                console.warn('Cannot find filter for type %s, falling back to substring match.', type);\n                f = self.filters.string;\n            }\n            return f;\n        };\n        self.getBestGuessDataType = function (columnName) {\n            var t, x, l = self.data.length;\n            for (x = 0; x < l; x += 1) {\n                if ([null, undefined].indexOf(self.data[x][columnName]) !== -1) {\n                    t = typeof self.data[x];\n                    return t === 'object' ? 'string' : t;\n                }\n            }\n            return 'string';\n        };\n        self.drawChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].draw();\n            });\n        };\n        self.resizeChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].resize();\n            });\n        };\n        self.autoScrollZone = function (e, x, y, ctrl) {\n            var setTimer,\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth(),\n                rowHeaderCellHeight = self.getRowHeaderCellHeight();\n            if (x > self.width - self.attributes.selectionScrollZone && x < self.width) {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y > self.height - self.attributes.selectionScrollZone && y < self.height) {\n                self.scrollBox.scrollTop += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (x - self.attributes.selectionScrollZone - columnHeaderCellWidth < 0) {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y - self.attributes.selectionScrollZone - rowHeaderCellHeight < 0) {\n                self.scrollBox.scrollTop -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (setTimer && !ctrl && self.currentCell && self.currentCell.columnIndex !== -1) {\n                self.scrollTimer = setTimeout(self.mousemove, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.refreshFromOrigialData = function () {\n            self.data = self.originalData.filter(function (row) {\n                return true;\n            });\n        };\n        self.validateColumn = function (c, s) {\n            if (!c.name) {\n                throw new Error('A column must contain at least a name.');\n            }\n            if (s.filter(function (i) { return i.name === c.name; }).length > 0) {\n                throw new Error('A column with the name '\n                    + c.name + ' already exists and cannot be added again.');\n            }\n            return true;\n        };\n        self.setDefaults = function (obj1, obj2, key, def) {\n            obj1[key] = obj2[key] === undefined ? def : obj2[key];\n        };\n        self.setAttributes = function () {\n            self.defaults.attributes.forEach(function eachAttribute(i) {\n                self.setDefaults(self.attributes, self.args, i[0], i[1]);\n            });\n        };\n        self.setStyle = function () {\n            self.defaults.styles.forEach(function eachStyle(i) {\n                self.setDefaults(self.style, self.args.style || {}, i[0], i[1]);\n            });\n        };\n        self.autosize = function (colName) {\n            self.getVisibleSchema().forEach(function (col) {\n                if (col.name === colName || colName === undefined) {\n                    self.fitColumnToValues(col.name);\n                }\n            });\n            self.fitColumnToValues('cornerCell');\n        };\n        self.dispose = function () {\n            if (!self.isChildGrid && self.canvas && self.canvas.parentNode) {\n                self.canvas.parentNode.removeChild(self.canvas);\n            }\n            self.eventParent.removeEventListener('mouseup', self.mouseup, false);\n            self.eventParent.removeEventListener('mousedown', self.mousedown, false);\n            self.eventParent.removeEventListener('dblclick', self.dblclick, false);\n            self.eventParent.removeEventListener('click', self.click, false);\n            self.eventParent.removeEventListener('mousemove', self.mousemove);\n            self.eventParent.removeEventListener('wheel', self.scrollWheel, false);\n            self.canvas.removeEventListener('contextmenu', self.contextmenu, false);\n            self.canvas.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('keypress', self.keypress, false);\n            self.controlInput.removeEventListener('keyup', self.keyup, false);\n            self.controlInput.removeEventListener('keydown', self.keydown, false);\n            window.removeEventListener('resize', self.resize);\n            if (self.observer && self.observer.disconnect) {\n                self.observer.disconnect();\n            }\n        };\n        self.tryLoadStoredOrders = function () {\n            var s;\n            if (self.storedSettings\n                    && typeof self.storedSettings.orders === 'object'\n                    && self.storedSettings.orders !== null) {\n                if (self.storedSettings.orders.rows.length >= self.data.length) {\n                    self.orders.rows = self.storedSettings.orders.rows;\n                }\n                s = self.getSchema();\n                if (self.storedSettings.orders.columns.length === s.length) {\n                    self.orders.columns = self.storedSettings.orders.columns;\n                }\n                self.orderBy = self.storedSettings.orderBy === undefined\n                    ? self.uniqueId : self.storedSettings.orderBy;\n                self.orderDirection = self.storedSettings.orderDirection === undefined\n                    ? self.uniqueId : self.storedSettings.orderDirection;\n                if (self.getHeaderByName(self.orderBy) && self.orderDirection) {\n                    self.order(self.orderBy, self.orderDirection);\n                }\n            }\n        };\n        self.getFontHeight = function (fontStyle) {\n            return parseFloat(fontStyle, 10);\n        };\n        self.parseFont = function (key) {\n            if (/Font/.test(key)) {\n                self.style[key + 'Height'] = self.getFontHeight(self.style[key]);\n            }\n        };\n        self.initProp = function (propName) {\n            if (!self.args[propName]) { return; }\n            Object.keys(self.args[propName]).forEach(function (key) {\n                self[propName][key] = self.args[propName][key];\n            });\n        };\n        self.init = function () {\n            if (self.initialized) { return; }\n            var publicStyleKeyIntf = {};\n            self.setAttributes();\n            self.setStyle();\n            self.initScrollBox();\n            self.setDom();\n            self.type = 'canvas-datagrid';\n            self.initialized = true;\n            self.pointerLockPosition = {x: 0, y: 0};\n            Object.keys(self.style).forEach(self.parseFont);\n            self.intf.type = self.type;\n            self.intf.addEventListener = self.addEventListener;\n            self.intf.removeEventListener = self.removeEventListener;\n            self.intf.dispatchEvent = self.dispatchEvent;\n            self.intf.dispose = self.dispose;\n            self.intf.appendTo = self.appendTo;\n            self.intf.filters = self.filters;\n            self.intf.sorters = self.sorters;\n            self.intf.autosize = self.autosize;\n            self.intf.beginEditAt = self.beginEditAt;\n            self.intf.endEdit = self.endEdit;\n            self.intf.setActiveCell = self.setActiveCell;\n            self.intf.scrollIntoView = self.scrollIntoView;\n            self.intf.clearChangeLog = self.clearChangeLog;\n            self.intf.gotoCell = self.gotoCell;\n            self.intf.gotoRow = self.gotoRow;\n            self.intf.findColumnScrollLeft = self.findColumnScrollLeft;\n            self.intf.findRowScrollTop = self.findRowScrollTop;\n            self.intf.fitColumnToValues = self.fitColumnToValues;\n            self.intf.findColumnMaxTextLength = self.findColumnMaxTextLength;\n            self.intf.disposeContextMenu = self.disposeContextMenu;\n            self.intf.getCellAt = self.getCellAt;\n            self.intf.isCellVisible = self.isCellVisible;\n            self.intf.order = self.order;\n            self.intf.draw = self.draw;\n            self.intf.selectArea = self.selectArea;\n            self.intf.clipElement = self.clipElement;\n            self.intf.getSchemaFromData = self.getSchemaFromData;\n            self.intf.setFilter = self.setFilter;\n            self.intf.selectRow = self.selectRow;\n            self.intf.parentGrid = self.parentGrid;\n            self.intf.toggleTree = self.toggleTree;\n            self.intf.expandTree = self.expandTree;\n            self.intf.collapseTree = self.collapseTree;\n            self.intf.canvas = self.canvas;\n            self.intf.context = self.ctx;\n            self.intf.insertRow = self.insertRow;\n            self.intf.deleteRow = self.deleteRow;\n            self.intf.addRow = self.addRow;\n            self.intf.insertColumn = self.insertColumn;\n            self.intf.deleteColumn = self.deleteColumn;\n            self.intf.addColumn = self.addColumn;\n            self.intf.getClippingRect = self.getClippingRect;\n            self.intf.setRowHeight = self.setRowHeight;\n            self.intf.setColumnWidth = self.setColumnWidth;\n            self.intf.resetColumnWidths = self.resetColumnWidths;\n            self.intf.resetRowHeights = self.resetRowHeights;\n            self.intf.resize = self.resize;\n            self.intf.selectColumn = self.selectColumn;\n            self.intf.selectRow = self.selectRow;\n            self.intf.selectAll = self.selectAll;\n            self.intf.drawChildGrids = self.drawChildGrids;\n            self.intf.assertPxColor = self.assertPxColor;\n            self.intf.clearPxColorAssertions = self.clearPxColorAssertions;\n            self.intf.integerToAlpha = self.integerToAlpha;\n            self.intf.copy = self.copy;\n            Object.keys(self.style).forEach(function (key) {\n                // unless this line is here, Object.keys() will not work on <instance>.style\n                publicStyleKeyIntf[key] = undefined;\n                Object.defineProperty(publicStyleKeyIntf, key, {\n                    get: function () {\n                        return self.style[key];\n                    },\n                    set: function (value) {\n                        self.parseFont(value);\n                        self.style[key] = value;\n                        self.draw(true);\n                        self.dispatchEvent('stylechanged', {name: key, value: value});\n                    }\n                });\n            });\n            Object.defineProperty(self.intf, 'shadowRoot', {\n                get: function () {\n                    return self.shadowRoot;\n                }\n            });\n            Object.defineProperty(self.intf, 'activeCell', {\n                get: function () {\n                    return self.activeCell;\n                }\n            });\n            /**\n             * When true, the grid is has focus.\n             * @memberof canvasDatagrid\n             * @property hasFocus\n             * @readonly\n             */\n            Object.defineProperty(self.intf, 'hasFocus', {\n                get: function () {\n                    return self.hasFocus;\n                }\n            });\n            if (!self.args.component) {\n                Object.defineProperty(self.intf, 'style', {\n                    get: function () {\n                        return publicStyleKeyIntf;\n                    },\n                    set: function (value) {\n                        Object.keys(value).forEach(function (key) {\n                            self.parseFont(value);\n                            self.style[key] = value[key];\n                        });\n                        self.draw(true);\n                        self.dispatchEvent('stylechanged', {name: 'style', value: value});\n                    }\n                });\n            }\n            Object.defineProperty(self.intf, 'attributes', { value: {}});\n            Object.keys(self.attributes).forEach(function (key) {\n                Object.defineProperty(self.intf.attributes, key, {\n                    get: function () {\n                        return self.attributes[key];\n                    },\n                    set: function (value) {\n                        self.attributes[key] = value;\n                        self.draw(true);\n                        self.dispatchEvent('attributechanged', {name: key, value: value[key]});\n                    }\n                });\n            });\n            self.filters.string = function (value, filterFor) {\n                value = String(value);\n                var filterRegExp,\n                    regEnd = /\\/(i|g|m)*$/,\n                    pattern = regEnd.exec(filterFor),\n                    flags = pattern ? pattern[0].substring(1) : '',\n                    flagLength = flags.length;\n                self.invalidFilterRegEx = undefined;\n                if (filterFor.substring(0, 1) === '/' && pattern) {\n                    try {\n                        filterRegExp = new RegExp(filterFor.substring(1, filterFor.length - (flagLength + 1)), flags);\n                    } catch (e) {\n                        self.invalidFilterRegEx = e;\n                        return;\n                    }\n                    return filterRegExp.test(value);\n                }\n                return value.toString ? value.toString().toLocaleUpperCase()\n                    .indexOf(filterFor.toLocaleUpperCase()) !== -1 : false;\n            };\n            self.filters.number = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                return value === filterFor;\n            };\n            if (self.attributes.name && self.attributes.saveAppearance) {\n                self.storedSettings = localStorage.getItem(self.storageName + '-' + self.attributes.name);\n                if (self.storedSettings) {\n                    try {\n                        self.storedSettings = JSON.parse(self.storedSettings);\n                    } catch (e) {\n                        console.warn('could not read settings from localStore', e);\n                        self.storedSettings = undefined;\n                    }\n                }\n                if (self.storedSettings) {\n                    if (typeof self.storedSettings.sizes === 'object'\n                            && self.storedSettings.sizes !== null) {\n                        self.sizes.rows = self.storedSettings.sizes.rows;\n                        self.sizes.columns = self.storedSettings.sizes.columns;\n                        ['trees', 'columns', 'rows'].forEach(function (i) {\n                            if (!self.sizes[i]) {\n                                self.sizes[i] = {};\n                            }\n                        });\n                    }\n                }\n            }\n            ['formatters', 'filters', 'sorters'].forEach(self.initProp);\n            if (self.args.data) {\n                self.intf.data = self.args.data;\n            }\n            if (!self.data) {\n                self.intf.data = [];\n            }\n            if (self.args.schema) {\n                self.intf.schema = self.args.schema;\n            }\n            if (self.isChildGrid) {\n                requestAnimationFrame(function () { self.resize(true); });\n            } else {\n                self.resize(true);\n            }\n            return self;\n        };\n        /**\n         * Removes focus from the grid.\n         * @memberof canvasDatagrid\n         * @name blur\n         * @method\n         */\n        self.intf.blur = function (e) {\n            self.hasFocus = false;\n        };\n        /**\n         * Focuses on the grid.\n         * @memberof canvasDatagrid\n         * @name focus\n         * @method\n         */\n        self.intf.focus = function () {\n            self.hasFocus = true;\n            self.controlInput.focus();\n        };\n        Object.defineProperty(self.intf, 'height', {\n            get: function () {\n                return self.parentNode.height;\n            },\n            set: function (value) {\n                self.parentNode.height = value;\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'width', {\n            get: function () {\n                return self.parentNode.width;\n            },\n            set: function (value) {\n                self.parentNode.width = value;\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'openChildren', {\n            get: function () {\n                return self.openChildren;\n            }\n        });\n        Object.defineProperty(self.intf, 'childGrids', {\n            get: function () {\n                return Object.keys(self.childGrids).map(function (gridId) {\n                    return self.childGrids[gridId];\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'isChildGrid', {\n            get: function () {\n                return self.isChildGrid;\n            }\n        });\n        Object.defineProperty(self.intf, 'parentNode', {\n            get: function () {\n                return self.parentNode;\n            },\n            set: function (value) {\n                if (!self.isChildGrid) {\n                    throw new TypeError('Cannot set property parentNode which has only a getter');\n                }\n                self.parentNode = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetParent', {\n            get: function () {\n                return self.parentNode;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetLeft', {\n            get: function () {\n                return self.parentNode.offsetLeft;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetTop', {\n            get: function () {\n                return self.parentNode.offsetTop;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollHeight', {\n            get: function () {\n                return self.scrollBox.scrollHeight;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollWidth', {\n            get: function () {\n                return self.scrollBox.scrollWidth;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollTop', {\n            get: function () {\n                return self.scrollBox.scrollTop;\n            },\n            set: function (value) {\n                self.scrollBox.scrollTop = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollLeft', {\n            get: function () {\n                return self.scrollBox.scrollLeft;\n            },\n            set: function (value) {\n                self.scrollBox.scrollLeft = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'sizes', {\n            get: function () {\n                return self.sizes;\n            }\n        });\n        Object.defineProperty(self.intf, 'input', {\n            get: function () {\n                return self.input;\n            }\n        });\n        Object.defineProperty(self.intf, 'controlInput', {\n            get: function () {\n                return self.controlInput;\n            }\n        });\n        Object.defineProperty(self.intf, 'currentCell', {\n            get: function () {\n                return self.currentCell;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleCells', {\n            get: function () {\n                return self.visibleCells;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRows', {\n            get: function () {\n                return self.visibleRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'selections', {\n            get: function () {\n                return self.selections;\n            }\n        });\n        Object.defineProperty(self.intf, 'dragMode', {\n            get: function () {\n                return self.dragMode;\n            }\n        });\n        Object.defineProperty(self.intf, 'changes', {\n            get: function () {\n                return self.changes;\n            }\n        });\n        self.intf.formatters = self.formatters;\n        self.normalizeDataset = function (data, callback) {\n            var i, d, max, syncFnInvoked;\n            if (data === null || data === '' || data === undefined) {\n                return callback([]);\n            }\n            if (typeof data === 'string'\n                    || typeof data === 'number'\n                    || typeof data === 'boolean') {\n                data = [{'0': data}];\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if ((!Array.isArray(data[0]) && typeof data[0] === 'object' && data[0] !== null)\n                            || (Array.isArray(data) && data.length === 0)) {\n                return callback(data);\n            }\n            if (typeof data === 'function') {\n                i = data.apply(self.intf, [function (d) {\n                    if (syncFnInvoked) {\n                        console.warn('Detected a callback to the data setter function after the same function already returned a value synchronously.');\n                    }\n                    self.normalizeDataset(d, callback);\n                }]);\n                if (i) {\n                    syncFnInvoked = true;\n                    self.normalizeDataset(i, callback);\n                }\n                return;\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if (Array.isArray(data)) {\n                if (!Array.isArray(data[0])) {\n                    //array of something?  throw it all into 1 row!\n                    data = [data];\n                }\n                // find the longest length\n                max = 0;\n                d = [];\n                data.forEach(function (row) {\n                    max = Math.max(max, row.length);\n                });\n                // map against length indexes\n                data.forEach(function (row, index) {\n                    var x;\n                    d[index] = {};\n                    for (x = 0; x < max; x += 1) {\n                        d[index][x] = row[x];\n                    }\n                });\n                return callback(d);\n            }\n            throw new Error('Unsupported data type.  Must be an array of arrays or an array of objects, function or string.');\n        };\n        Object.defineProperty(self.intf, 'frozenRows', {\n            get: function () {\n                return self.frozenRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollIndexRect', {\n            get: function () {\n                return {\n                    top: self.scrollIndexTop,\n                    right: self.scrollIndexRight,\n                    bottom: self.scrollIndexBottom,\n                    left: self.scrollIndexLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollPixelRect', {\n            get: function () {\n                return {\n                    top: self.scrollPixelTop,\n                    right: self.scrollPixelRight,\n                    bottom: self.scrollPixelBottom,\n                    left: self.scrollPixelLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'selectionBounds', {\n            get: function () {\n                return self.getSelectionBounds();\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedRows', {\n            get: function () {\n                return self.getSelectedData(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedCells', {\n            get: function () {\n                return self.getSelectedData();\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleSchema', {\n            get: function () {\n                return self.getVisibleSchema().map(function eachDataRow(col) {\n                    return col;\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'ctx', {\n            get: function () {\n                return self.ctx;\n            }\n        });\n        Object.defineProperty(self.intf, 'schema', {\n            get: function schemaGetter() {\n                return self.getSchema();\n            },\n            set: function schemaSetter(value) {\n                if (!Array.isArray(value) || typeof value[0] !== 'object') {\n                    throw new Error('Schema must be an array of objects.');\n                }\n                if (value[0].name === undefined) {\n                    throw new Error('Expected schema to contain an object with at least a name property.');\n                }\n                self.schema = value.map(function eachSchemaColumn(column, index) {\n                    column.width = column.width || self.style.columnWidth;\n                    column[self.uniqueId] = self.getSchemaNameHash(column.name);\n                    column.filter = column.filter || self.filter(column.type);\n                    column.type = column.type || 'string';\n                    column.index = index;\n                    column.columnIndex = index;\n                    column.rowIndex = -1;\n                    return column;\n                });\n                self.tempSchema = undefined;\n                self.createNewRowData();\n                self.createColumnOrders();\n                self.tryLoadStoredOrders();\n                self.resize(true);\n                self.dispatchEvent('schemachanged', {schema: self.schema});\n            }\n        });\n        Object.defineProperty(self.intf, 'data', {\n            get: function dataGetter() {\n                return self.data.map(function (row) {\n                    delete row[self.uniqueId];\n                    return row;\n                });\n            },\n            set: function dataSetter(value) {\n                self.normalizeDataset(value, function (d) {\n                    self.originalData = d.map(function eachDataRow(row) {\n                        row[self.uniqueId] = self.uId;\n                        self.uId += 1;\n                        return row;\n                    });\n                    self.changes = [];\n                    //TODO apply filter to incoming dataset\n                    self.data = self.originalData;\n                    if (!self.schema) {\n                        self.tempSchema = self.getSchemaFromData();\n                    }\n                    if (!self.schema && self.data.length === 0) {\n                        self.tempSchema = [{name: ''}];\n                        self.tempSchema[0][self.uniqueId] = self.getSchemaNameHash('');\n                    }\n                    if (self.tempSchema && !self.schema) {\n                        self.createColumnOrders();\n                        self.tryLoadStoredOrders();\n                        self.dispatchEvent('schemachanged', {schema: self.tempSchema});\n                    }\n                    self.createNewRowData();\n                    if (self.attributes.autoResizeColumns && self.data.length > 0\n                            && self.storedSettings === undefined) {\n                        self.autosize();\n                    }\n                    self.fitColumnToValues('cornerCell', true);\n                    if (!self.resize() || !self.isChildGrid) { self.draw(true); }\n                    self.createRowOrders();\n                    self.tryLoadStoredOrders();\n                    self.dispatchEvent('datachanged', {data: self.data});\n                });\n            }\n        });\n        self.initScrollBox = function () {\n            var sHeight = 0,\n                sWidth = 0,\n                scrollTop = 0,\n                scrollLeft = 0,\n                scrollHeight = 0,\n                scrollWidth = 0,\n                scrollBoxHeight = 20,\n                scrollBoxWidth = 20;\n            function setScrollTop(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollTop value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollHeight) {\n                    value = scrollHeight;\n                }\n                if (scrollHeight < 0) {\n                    value = 0;\n                }\n                scrollTop = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            function setScrollLeft(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollLeft value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollWidth) {\n                    value = scrollWidth;\n                }\n                if (scrollWidth < 0) {\n                    value = 0;\n                }\n                scrollLeft = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            self.scrollBox.toString = function () {\n                return '{\"width\": ' + scrollWidth\n                    + ', \"height\": ' + scrollHeight\n                    + ', \"left\": ' + scrollLeft\n                    + ', \"top\": ' + scrollTop + '}';\n            };\n            self.scrollBox.scrollTo = function (x, y) {\n                setScrollLeft(x, true);\n                setScrollTop(y);\n            };\n            Object.defineProperty(self.scrollBox, 'scrollBoxHeight', {\n                get: function () {\n                    return scrollBoxHeight;\n                },\n                set: function (value) {\n                    scrollBoxHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollBoxWidth', {\n                get: function () {\n                    return scrollBoxWidth;\n                },\n                set: function (value) {\n                    scrollBoxWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'height', {\n                get: function () {\n                    return sHeight;\n                },\n                set: function (value) {\n                    if (scrollHeight < value) {\n                        scrollTop = 0;\n                    }\n                    sHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'width', {\n                get: function () {\n                    return sWidth;\n                },\n                set: function (value) {\n                    sWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollTop', {\n                get: function () {\n                    return scrollTop;\n                },\n                set: setScrollTop\n            });\n            Object.defineProperty(self.scrollBox, 'scrollLeft', {\n                get: function () {\n                    return scrollLeft;\n                },\n                set: setScrollLeft\n            });\n            Object.defineProperty(self.scrollBox, 'scrollHeight', {\n                get: function () {\n                    return scrollHeight;\n                },\n                set: function (value) {\n                    if (scrollTop > value) {\n                        scrollTop = Math.max(value, 0);\n                    }\n                    if (scrollHeight < sHeight) {\n                        scrollTop = 0;\n                    }\n                    scrollHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollWidth', {\n                get: function () {\n                    return scrollWidth;\n                },\n                set: function (value) {\n                    if (scrollLeft > value) {\n                        scrollLeft = Math.max(value, 0);\n                    }\n                    scrollWidth = value;\n                }\n            });\n        };\n        return;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false, Event: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var zIndexTop = 2, hoverScrollTimeout, autoCompleteContext;\n        function createContextMenu(ev, pos, items, parentContextMenu) {\n            var container = document.createElement('div'),\n                upArrow = document.createElement('div'),\n                downArrow = document.createElement('div'),\n                children = [],\n                selectedIndex = -1,\n                intf = {},\n                rect;\n            if (!Array.isArray(items)) { throw new Error('createContextMenu expects an array.'); }\n            function createItems() {\n                items.forEach(function (item) {\n                    var contextItemContainer = document.createElement('div'),\n                        childMenuArrow;\n                    function removeChildContext(e) {\n                        if (e.relatedTarget === container\n                                || item.contextMenu.container === e.relatedTarget\n                                || childMenuArrow === e.relatedTarget\n                                || (contextItemContainer === e.relatedTarget)\n                                ) { return; }\n                        item.contextMenu.dispose();\n                        children.splice(children.indexOf(item.contextMenu), 1);\n                        item.contextMenu = undefined;\n                        contextItemContainer.removeEventListener('mouseout', removeChildContext);\n                        container.removeEventListener('mouseout', removeChildContext);\n                        contextItemContainer.setAttribute('contextOpen', '0');\n                        contextItemContainer.setAttribute('opening', '0');\n                    }\n                    function contextAddCallback(items) {\n                        // check yet again if the user hasn't moved off\n                        if (contextItemContainer.getAttribute('opening') !== '1' ||\n                                contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        var cPos = contextItemContainer.getBoundingClientRect();\n                        cPos = {\n                            left: cPos.left + self.style.childContextMenuMarginLeft + container.offsetWidth,\n                            top: cPos.top + self.style.childContextMenuMarginTop,\n                            bottom: cPos.bottom,\n                            right: cPos.right\n                        };\n                        item.contextMenu = createContextMenu(ev, cPos, items, intf);\n                        contextItemContainer.setAttribute('contextOpen', '1');\n                        contextItemContainer.addEventListener('mouseout', removeChildContext);\n                        container.addEventListener('mouseout', removeChildContext);\n                        children.push(item.contextMenu);\n                    }\n                    function createChildContext() {\n                        var i;\n                        if (contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        contextItemContainer.setAttribute('opening', '1');\n                        if (typeof item.items === 'function') {\n                            i  = item.items.apply(intf, [function (items) {\n                                contextAddCallback(items);\n                            }]);\n                            if (i !== undefined && Array.isArray(i)) {\n                                contextAddCallback(i);\n                            }\n                            return;\n                        }\n                        contextAddCallback(item.items);\n                    }\n                    function addItem(item) {\n                        function addContent(content) {\n                            if (content === null) { return; }\n                            if (typeof content === 'function') {\n                                return addContent(content(ev));\n                            }\n                            if (typeof content === 'object') {\n                                contextItemContainer.appendChild(content);\n                                return;\n                            }\n                            self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n                            contextItemContainer.addEventListener('mouseover', function () {\n                                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                            });\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n                            });\n                            contextItemContainer.innerHTML = content;\n                            return;\n                        }\n                        addContent(item.title);\n                        item.contextItemContainer = contextItemContainer;\n                        if ((item.items && item.items.length > 0) || typeof item.items === 'function') {\n                            childMenuArrow = document.createElement('div');\n                            self.createInlineStyle(childMenuArrow, 'canvas-datagrid-context-child-arrow');\n                            childMenuArrow.innerHTML = self.style.childContextMenuArrowHTML;\n                            contextItemContainer.appendChild(childMenuArrow);\n                            contextItemContainer.addEventListener('mouseover', createChildContext);\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                contextItemContainer.setAttribute('opening', '0');\n                            });\n                        }\n                        if (item.click) {\n                            contextItemContainer.addEventListener('click', function (ev) {\n                                item.click.apply(self, [ev]);\n                            });\n                        }\n                    }\n                    addItem(item);\n                    container.appendChild(contextItemContainer);\n                });\n            }\n            function clickIndex(idx) {\n                items[idx].contextItemContainer.dispatchEvent(new Event('click'));\n            }\n            function checkArrowVisibility() {\n                if (container.scrollTop > 0) {\n                    self.parentDOMNode.appendChild(upArrow);\n                } else if (upArrow.parentNode) {\n                    upArrow.parentNode.removeChild(upArrow);\n                }\n                if (container.scrollTop >= container.scrollHeight - container.offsetHeight && downArrow.parentNode) {\n                    downArrow.parentNode.removeChild(downArrow);\n                } else if (container.scrollHeight - container.offsetHeight > 0\n                        && !(container.scrollTop >= container.scrollHeight - container.offsetHeight)) {\n                    self.parentDOMNode.appendChild(downArrow);\n                }\n            }\n            function startHoverScroll(type) {\n                return function t() {\n                    var a = self.attributes.contextHoverScrollAmount;\n                    if (type === 'up' && container.scrollTop === 0) { return; }\n                    if (type === 'down' && container.scrollTop === container.scrollHeight) { return; }\n                    container.scrollTop += (type === 'up' ? -a : a);\n                    hoverScrollTimeout = setTimeout(t, self.attributes.contextHoverScrollRateMs, type);\n                };\n            }\n            function endHoverScroll(type) {\n                return function () {\n                    clearTimeout(hoverScrollTimeout);\n                };\n            }\n            function init() {\n                var loc = {},\n                    s = self.scrollOffset(self.canvas);\n                createItems();\n                self.createInlineStyle(container, 'canvas-datagrid-context-menu');\n                loc.x = pos.left - s.left;\n                loc.y = pos.top - s.top;\n                loc.height = 0;\n                zIndexTop += 1;\n                container.style.position = 'absolute';\n                upArrow.style.color = self.style.contextMenuArrowColor;\n                downArrow.style.color = self.style.contextMenuArrowColor;\n                [upArrow, downArrow].forEach(function (el) {\n                    el.style.textAlign = 'center';\n                    el.style.position = 'absolute';\n                    el.style.zIndex = zIndexTop + 1;\n                });\n                container.style.zIndex = zIndexTop;\n                if (parentContextMenu && parentContextMenu.inputDropdown) {\n                    container.style.maxHeight = window.innerHeight - loc.y - self.style.autocompleteBottomMargin + 'px';\n                    container.style.minWidth = pos.width + 'px';\n                    loc.y += pos.height;\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                container.addEventListener('scroll', checkArrowVisibility);\n                container.addEventListener('wheel', function (e) {\n                    if (self.hasFocus) {\n                        container.scrollTop += e.deltaY;\n                        container.scrollLeft += e.deltaX;\n                    }\n                    checkArrowVisibility();\n                });\n                upArrow.innerHTML = self.style.contextMenuArrowUpHTML;\n                downArrow.innerHTML = self.style.contextMenuArrowDownHTML;\n                container.appendChild(upArrow);\n                document.body.appendChild(downArrow);\n                document.body.appendChild(container);\n                rect = container.getBoundingClientRect();\n                if (rect.bottom > window.innerHeight && !(parentContextMenu && parentContextMenu.inputDropdown)) {\n                    loc.y = window.innerHeight - container.offsetHeight;\n                    if (loc.y < 0) { loc.y = 0; }\n                    if (container.offsetHeight > window.innerHeight) {\n                        container.style.height = window.innerHeight - self.style.contextMenuWindowMargin + 'px';\n                    }\n                }\n                if (rect.right > window.innerWidth) {\n                    if (parentContextMenu) {\n                        loc.x = parentContextMenu.container.offsetLeft - container.offsetWidth;\n                    } else {\n                        loc.x = window.innerWidth - container.offsetWidth;\n                    }\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                rect = container.getBoundingClientRect();\n                upArrow.style.top = rect.top + 'px';\n                downArrow.style.top = rect.top + rect.height - downArrow.offsetHeight + 'px';\n                upArrow.style.left = rect.left + 'px';\n                downArrow.style.left = rect.left + 'px';\n                downArrow.style.width = container.offsetWidth + 'px';\n                upArrow.style.width = container.offsetWidth + 'px';\n                downArrow.addEventListener('mouseover', startHoverScroll('down'));\n                downArrow.addEventListener('mouseout', endHoverScroll('down'));\n                upArrow.addEventListener('mouseover', startHoverScroll('up'));\n                upArrow.addEventListener('mouseout', endHoverScroll('up'));\n                checkArrowVisibility();\n            }\n            intf.parentGrid = self.intf;\n            intf.parentContextMenu = parentContextMenu;\n            intf.container = container;\n            init();\n            intf.clickIndex = clickIndex;\n            intf.rect = rect;\n            intf.items = items;\n            intf.upArrow = upArrow;\n            intf.downArrow = downArrow;\n            intf.dispose = function () {\n                clearTimeout(hoverScrollTimeout);\n                children.forEach(function (c) {\n                    c.dispose();\n                });\n                [downArrow, upArrow, container].forEach(function (el) {\n                    if (el.parentNode) { el.parentNode.removeChild(el); }\n                });\n            };\n            Object.defineProperty(intf, 'selectedIndex', {\n                get: function () {\n                    return selectedIndex;\n                },\n                set: function (value) {\n                    if (typeof value !== 'number' || isNaN(value || !isFinite(value))) {\n                        throw new Error('Context menu selected index must be a sane number.');\n                    }\n                    selectedIndex = value;\n                    if (selectedIndex > items.length - 1) {\n                        selectedIndex = items.length - 1;\n                    }\n                    if (selectedIndex < 0) {\n                        selectedIndex = 0;\n                    }\n                    items.forEach(function (item, index) {\n                        if (index === selectedIndex) {\n                            return self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                        }\n                        self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item');\n                    });\n                }\n            });\n            return intf;\n        }\n        function createFilterContextMenuItems(e) {\n            var filterContainer = document.createElement('div'),\n                filterLabel = document.createElement('div'),\n                filterAutoCompleteButton = document.createElement('button'),\n                filterInput = document.createElement('input'),\n                n = e.cell && e.cell.header ? e.cell.header.title || e.cell.header.name : '',\n                autoCompleteItems,\n                iRect;\n            function checkRegExpErrorState() {\n                filterInput.style.background = self.style.contextFilterInputBackground;\n                filterInput.style.color = self.style.contextFilterInputColor;\n                if (self.invalidFilterRegEx) {\n                    filterInput.style.background = self.style.contextFilterInvalidRegExpBackground;\n                    filterInput.style.color = self.style.contextFilterInvalidRegExpColor;\n                }\n            }\n            function fillAutoComplete() {\n                autoCompleteItems = {};\n                self.data.filter(function (d, i) { return i < self.attributes.maxAutoCompleteItems; }).forEach(function (row) {\n                    var value = row[e.cell.header.name];\n                    if (autoCompleteItems[value]) { return; }\n                    autoCompleteItems[value] = {\n                        title: self.formatters[e.cell.header.type || 'string']({ cell: { value: value }}),\n                        click: function (e) {\n                            filterInput.value = value;\n                            e.stopPropagation();\n                            filterInput.dispatchEvent(new Event('keyup'));\n                            self.disposeAutocomplete();\n                            return;\n                        }\n                    };\n                });\n                autoCompleteItems = Object.keys(autoCompleteItems).map(function (key) {\n                    return autoCompleteItems[key];\n                });\n            }\n            function createAutoCompleteContext(ev) {\n                if (ev && [40, 38, 13, 9, 27].indexOf(ev.keyCode) !== -1) { return; }\n                fillAutoComplete();\n                iRect = filterInput.getBoundingClientRect();\n                if (autoCompleteContext) {\n                    autoCompleteContext.dispose();\n                    autoCompleteContext = undefined;\n                }\n                autoCompleteContext = createContextMenu(e, {\n                    left: iRect.left,\n                    top: iRect.top,\n                    right: iRect.right,\n                    bottom: iRect.bottom,\n                    height: iRect.height,\n                    width: iRect.width\n                }, autoCompleteItems, {inputDropdown: true});\n                autoCompleteContext.selectedIndex = 0;\n            }\n            self.createInlineStyle(filterLabel, 'canvas-datagrid-context-menu-label');\n            self.createInlineStyle(filterAutoCompleteButton, 'canvas-datagrid-context-menu-filter-button');\n            self.createInlineStyle(filterInput, 'canvas-datagrid-context-menu-filter-input');\n            checkRegExpErrorState();\n            filterInput.onclick = self.disposeAutocomplete;\n            filterInput.addEventListener('keydown', function (e) {\n                //down\n                if (e.keyCode === 40) {\n                    autoCompleteContext.selectedIndex += 1;\n                }\n                //up\n                if (e.keyCode === 38) {\n                    autoCompleteContext.selectedIndex -= 1;\n                }\n                //enter\n                if (e.keyCode === 13) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    self.disposeContextMenu();\n                }\n                //tab\n                if (e.keyCode === 9) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    e.preventDefault();\n                }\n                //esc\n                if (e.keyCode === 27) {\n                    self.disposeContextMenu();\n                }\n            });\n            filterInput.addEventListener('keyup', function () {\n                self.setFilter(e.cell.header.name, filterInput.value);\n            });\n            filterInput.addEventListener('keyup', createAutoCompleteContext);\n            ['focus', 'blur', 'keydown', 'keyup', 'change'].forEach(function (en) {\n                filterInput.addEventListener(en, checkRegExpErrorState);\n            });\n            filterInput.value = e.cell.header ? self.columnFilters[e.cell.header.name] || '' : '';\n            filterLabel.innerHTML = self.attributes.filterOptionText.replace(/%s/g, n);\n            filterAutoCompleteButton.onclick = function () {\n                if (autoCompleteContext) {\n                    return self.disposeAutocomplete();\n                }\n                createAutoCompleteContext();\n            };\n            filterAutoCompleteButton.innerHTML = self.style.contextFilterButtonHTML;\n            filterContainer.addEventListener('click', function (e) {\n                return e.stopPropagation();\n            });\n            filterContainer.appendChild(filterLabel);\n            filterContainer.appendChild(filterInput);\n            filterContainer.appendChild(filterAutoCompleteButton);\n            e.items.push({\n                title: filterContainer\n            });\n            if (Object.keys(self.columnFilters).length) {\n                Object.keys(self.columnFilters).forEach(function (cf) {\n                    var h = self.getHeaderByName(cf);\n                    e.items.push({\n                        title: self.attributes.removeFilterOptionText.replace(/%s/g, h.title || h.name),\n                        click: function removeFilterClick(e) {\n                            e.preventDefault();\n                            self.setFilter(cf, '');\n                            self.controlInput.focus();\n                        }\n                    });\n                });\n            }\n        }\n        function addDefaultContextMenuItem(e) {\n            var isNormalCell = !(e.cell.isBackground || e.cell.isHeaderCellCap\n                    || e.cell.isScrollBar || e.cell.isCorner || e.cell.isRowHeader)\n                    && e.cell.header;\n            if (self.attributes.showFilter && isNormalCell) {\n                createFilterContextMenuItems(e);\n            }\n            if (self.attributes.showCopy\n                    && self.selections.reduce(function (p, r) {\n                        return p + r.length;\n                    }, 0) > 0) {\n                e.items.push({\n                    title: self.attributes.copyText,\n                    click: function () {\n                        document.execCommand('copy');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.saveAppearance && self.attributes.showClearSettingsOption\n                    && (Object.keys(self.sizes.rows).length > 0\n                        || Object.keys(self.sizes.columns).length > 0)) {\n                e.items.push({\n                    title: self.attributes.clearSettingsOptionText,\n                    click: function (e) {\n                        e.preventDefault();\n                        self.sizes.rows = {};\n                        self.sizes.columns = {};\n                        self.createRowOrders();\n                        self.createColumnOrders();\n                        self.storedSettings = undefined;\n                        self.dispatchEvent('resizecolumn', {columnWidth: self.style.columnWidth});\n                        self.dispatchEvent('resizerow', {cellHeight: self.style.cellHeight});\n                        self.setStorageData();\n                        self.resize(true);\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.allowSorting && self.attributes.showOrderByOption && isNormalCell) {\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextAsc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'asc');\n                        self.controlInput.focus();\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextDesc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'desc');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n        }\n        self.disposeAutocomplete = function () {\n            if (autoCompleteContext) {\n                autoCompleteContext.dispose();\n                autoCompleteContext = undefined;\n            }\n        };\n        self.disposeContextMenu = function () {\n            document.removeEventListener('click', self.disposeContextMenu);\n            zIndexTop = 2;\n            self.disposeAutocomplete();\n            if (self.contextMenu) {\n                self.contextMenu.dispose();\n            }\n            self.contextMenu = undefined;\n        };\n        self.contextmenuEvent = function (e, overridePos) {\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            function createDiposeEvent() {\n                requestAnimationFrame(function () {\n                    document.addEventListener('click', self.disposeContextMenu);\n                    document.removeEventListener('mouseup', createDiposeEvent);\n                });\n            }\n            var items = [],\n                pos = overridePos || self.getLayerPos(e, true),\n                ev = {\n                    NativeEvent: e,\n                    cell: self.getCellAt(pos.x, pos.y),\n                    items: items\n                };\n            if (!ev.cell.isGrid) {\n                addDefaultContextMenuItem(ev);\n            }\n            if (self.dispatchEvent('contextmenu', ev)) {\n                return;\n            }\n            if (!ev.cell.isGrid) {\n                if (self.contextMenu) {\n                    self.disposeContextMenu();\n                }\n                self.contextMenu = createContextMenu(ev, {\n                    left: pos.x + pos.rect.left + self.style.contextMenuMarginLeft + self.canvasOffsetLeft,\n                    top: pos.y + pos.rect.top + self.style.contextMenuMarginTop + self.canvasOffsetTop,\n                    right: ev.cell.width + ev.cell.x + pos.rect.left,\n                    bottom: ev.cell.height + ev.cell.y + pos.rect.top,\n                    height: ev.cell.height,\n                    width: ev.cell.width\n                }, items);\n                document.addEventListener('mouseup', createDiposeEvent);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        self.getClippingRect = function (ele) {\n            var boundingRect = self.position(self.parentNode),\n                eleRect = self.position(ele),\n                s = self.scrollOffset(self.canvas),\n                clipRect = {\n                    x: 0,\n                    y: 0,\n                    h: 0,\n                    w: 0\n                },\n                parentRect = {\n                    x: -Infinity,\n                    y: -Infinity,\n                    h: Infinity,\n                    w: Infinity\n                },\n                rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth();\n            boundingRect.top -= s.top;\n            boundingRect.left -= s.left;\n            eleRect.top -= s.top;\n            eleRect.left -= s.left;\n            clipRect.h = boundingRect.top + boundingRect.height - ele.offsetTop - self.style.scrollBarWidth;\n            clipRect.w = boundingRect.left + boundingRect.width - ele.offsetLeft - self.style.scrollBarWidth;\n            clipRect.x = boundingRect.left + (eleRect.left * -1) + columnHeaderCellWidth;\n            clipRect.y = boundingRect.top + (eleRect.top * -1) + rowHeaderCellHeight;\n            return {\n                x: clipRect.x > parentRect.x ? clipRect.x : parentRect.x,\n                y: clipRect.y > parentRect.y ? clipRect.y : parentRect.y,\n                h: clipRect.h < parentRect.h ? clipRect.h : parentRect.h,\n                w: clipRect.w < parentRect.w ? clipRect.w : parentRect.w\n            };\n        };\n        self.clipElement = function (ele) {\n            var clipRect = self.getClippingRect(ele);\n            if (clipRect.w < 0) { clipRect.w = 0; }\n            if (clipRect.h < 0) { clipRect.h = 0; }\n            ele.style.clip = 'rect('\n                + clipRect.y + 'px,'\n                + clipRect.w + 'px,'\n                + clipRect.h + 'px,'\n                + clipRect.x + 'px'\n                + ')';\n            // INFO https://developer.mozilla.org/en-US/docs/Web/CSS/clip\n            // clip has been \"deprecated\" for clipPath.  Of course nothing but chrome\n            // supports clip path, so we'll keep using clip until someday clipPath becomes\n            // more widely support.  The code below works correctly, but setting clipPath and clip\n            // at the same time has undesirable results.\n            // ele.style.clipPath = 'polygon('\n            //     + clipRect.x + 'px ' + clipRect.y + 'px,'\n            //     + clipRect.x + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.y + 'px'\n            //     + ')';\n        };\n        self.scrollOffset = function (e) {\n            var x = 0, y = 0;\n            while (e.parentNode && e.nodeName !== 'CANVAS-DATAGRID') {\n                if (e.nodeType !== 'canvas-datagrid-tree'\n                        && e.nodeType !== 'canvas-datagrid-cell') {\n                    x -= e.scrollLeft;\n                    y -= e.scrollTop;\n                }\n                e = e.parentNode;\n            }\n            return {left: x, top: y};\n        };\n        self.resizeEditInput = function () {\n            if (self.input) {\n                var pos = self.canvas.getBoundingClientRect(),\n                    s = self.scrollOffset(self.canvas),\n                    bx2 = (self.style.cellBorderWidth * 2),\n                    cell = self.getVisibleCellByIndex(self.input.editCell.columnIndex, self.input.editCell.rowIndex)\n                        || {x: -100, y: -100, height: 0, width: 0};\n                self.input.style.left = pos.left + cell.x - self.style.cellBorderWidth + self.canvasOffsetLeft - s.left + 'px';\n                self.input.style.top = pos.top + cell.y - bx2 + self.canvasOffsetTop - s.top + 'px';\n                self.input.style.height = cell.height - bx2 - 1 + 'px';\n                self.input.style.width = cell.width - bx2 - self.style.cellPaddingLeft + 'px';\n                self.clipElement(self.input);\n            }\n        };\n        self.position = function (e, ignoreScrollOffset) {\n            var x = 0, y = 0, s = e, h, w;\n            while (e.offsetParent && e.nodeName !== 'CANVAS-DATAGRID') {\n                x += e.offsetLeft;\n                y += e.offsetTop;\n                h = e.offsetHeight;\n                w = e.offsetWidth;\n                e = e.offsetParent;\n            }\n            if (ignoreScrollOffset) {\n                return {left: x, top: y, height: h, width: w};\n            }\n            e = s;\n            s = self.scrollOffset(e);\n            return { left: x + s.left, top: y + s.top, height: h, width: w };\n        };\n        self.getLayerPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.clientX - rect.left,\n                    y: e.clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        /**\n         * Ends editing, optionally aborting the edit.\n         * @memberof canvasDatagrid\n         * @name endEdit\n         * @method\n         * @param {boolean} abort When true, abort the edit.\n         */\n        self.endEdit = function (abort) {\n            var cell = self.input.editCell,\n                y = cell.rowIndex;\n            function abortEdit() {\n                abort = true;\n            }\n            if (self.dispatchEvent('beforeendedit', {\n                    cell: cell,\n                    newValue: self.input.value,\n                    oldValue: cell.value,\n                    abort: abortEdit,\n                    input: self.input\n                })) { return false; }\n            if (self.input.value !== cell.value && !abort) {\n                self.changes[y] = self.changes[y] || {};\n                self.changes[y][cell.header.name] = self.input.value;\n                cell.data[cell.header.name] = self.input.value;\n                if (y === self.data.length) {\n                    if (self.dispatchEvent('newrow', {\n                            value: self.input.value,\n                            defaultValue: cell.value,\n                            aborted: abort,\n                            cell: cell,\n                            input: self.input\n                        })) { return false; }\n                    self.uId += 1;\n                    self.addRow(cell.data);\n                    self.createNewRowData();\n                }\n                self.draw(true);\n            }\n            document.body.removeChild(self.input);\n            self.controlInput.focus();\n            self.dispatchEvent('endedit', {\n                cell: cell,\n                value: self.input.value,\n                aborted: abort,\n                input: self.input\n            });\n            self.input = undefined;\n            return true;\n        };\n        /**\n         * Begins editing at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name beginEditAt\n         * @method\n         * @param {number} x The column index of the cell to edit.\n         * @param {number} y The row index of the cell to edit.\n         */\n        self.beginEditAt = function (x, y) {\n            if (!self.attributes.editable) { return; }\n            var cell = self.getVisibleCellByIndex(x, y),\n                s = self.getVisibleSchema(),\n                enumItems,\n                //HACK for IE10, does not like literal enum\n                enu = cell.header['enum'],\n                option,\n                valueInEnum;\n            if (self.dispatchEvent('beforebeginedit', {cell: cell})) { return false; }\n            self.scrollIntoView(x, y);\n            self.setActiveCell(x, y);\n            if (enu) {\n                self.input = document.createElement('select');\n            } else {\n                self.input = document.createElement(self.attributes.multiLine\n                    ? 'textarea' : 'input');\n            }\n            cell = self.getVisibleCellByIndex(x, y);\n            if (enu) {\n                // add enums\n                if (typeof enu === 'function') {\n                    enumItems = enu.apply(self.intf, [{cell: cell}]);\n                } else if (Array.isArray(enu)) {\n                    enumItems = enu;\n                }\n                enumItems.forEach(function (e) {\n                    var i = document.createElement('option'),\n                        val,\n                        title;\n                    if (Array.isArray(e)) {\n                        val = e[0];\n                        title = e[1];\n                    } else {\n                        val = e;\n                        title = e;\n                    }\n                    if (val === cell.value) { valueInEnum = true; }\n                    i.value = val;\n                    i.innerHTML = title;\n                    self.input.appendChild(i);\n                });\n                if (!valueInEnum) {\n                    option = document.createElement('option');\n                    option.value = cell.value;\n                    option.innerHTML = cell.value;\n                    self.input.appendChild(option);\n                }\n                self.input.addEventListener('change', function () {\n                    self.endEdit();\n                    self.draw(true);\n                });\n            }\n            document.body.appendChild(self.input);\n            self.createInlineStyle(self.input, 'canvas-datagrid-edit-input');\n            self.input.style.position = 'absolute';\n            self.input.editCell = cell;\n            self.resizeEditInput();\n            self.input.style.zIndex = '2';\n            self.input.value = cell.value;\n            self.input.focus();\n            self.input.addEventListener('click', self.stopPropagation);\n            self.input.addEventListener('dblclick', self.stopPropagation);\n            self.input.addEventListener('mouseup', self.stopPropagation);\n            self.input.addEventListener('mousedown', self.stopPropagation);\n            self.input.addEventListener('keydown', function (e) {\n                var nx = cell.columnIndex,\n                    ny = cell.rowIndex;\n                // esc\n                if (e.keyCode === 27) {\n                    self.endEdit(true);\n                    self.draw(true);\n                // enter\n                } else if (e.keyCode === 13\n                        && (!self.attributes.multiLine\n                            || (self.attributes.multiLine && e.shiftKey))) {\n                    self.endEdit();\n                    self.draw(true);\n                } else if (e.keyCode === 9) {\n                    e.preventDefault();\n                    if (!self.endEdit()) {\n                        return;\n                    }\n                    if (e.shiftKey) {\n                        nx -= 1;\n                    } else {\n                        nx += 1;\n                    }\n                    if (nx < 0) {\n                        nx = s.length - 1;\n                        ny -= 1;\n                    }\n                    if (nx > s.length - 1) {\n                        nx = 0;\n                        ny += 1;\n                    }\n                    if (ny < 0) {\n                        ny = self.data.length - 1;\n                    }\n                    if (ny > self.data.length - 1) {\n                        ny = 0;\n                    }\n                    self.scrollIntoView(nx, ny);\n                    self.beginEditAt(nx, ny);\n                }\n            });\n            self.dispatchEvent('beginedit', {cell: cell, input: self.input});\n        };\n        self.createInlineStyle = function (el, className) {\n            var css = {\n                'canvas-datagrid-context-menu-filter-input': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextFilterInputBackground,\n                    color: self.style.contextFilterInputColor,\n                    border: self.style.contextFilterInputBorder,\n                    borderRadius: self.style.contextFilterInputBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextFilterInputFontFamily,\n                    fontSize: self.style.contextFilterInputFontSize\n                },\n                'canvas-datagrid-context-menu-filter-button': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextFilterButtonBorder,\n                    borderRadius: self.style.contextFilterButtonBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFilterButtonFontFamily,\n                    fontSize: self.style.contextMenuFilterButtonFontSize\n                },\n                'canvas-datagrid-context-child-arrow': {\n                    cssFloat: 'right',\n                    color: self.style.childContextMenuArrowColor,\n                    fontSize: self.style.contextMenuChildArrowFontSize,\n                    fontFamily: self.style.contextMenuFontFamily,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-autocomplete': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    position: 'absolute',\n                    zIndex: 3,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-autocomplete-item': {\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor\n                },\n                'canvas-datagrid-autocomplete-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-canvas': {\n                    position: 'absolute',\n                    zIndex: '-1'\n                },\n                'canvas-datagrid': {\n                    position: 'absolute',\n                    background: self.style.backgroundColor,\n                    zIndex: '1',\n                    boxSizing: 'content-box',\n                    padding: '0'\n                },\n                'canvas-datagrid-control-input': {\n                    position: 'fixed',\n                    top: '-5px',\n                    left: '-5px',\n                    border: 'none',\n                    opacity: '0',\n                    cursor: 'pointer',\n                    width: '1px',\n                    height: '1px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize\n                },\n                'canvas-datagrid-edit-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 ' + self.style.editCellPaddingLeft + 'px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.editCellFontFamily,\n                    fontSize: self.style.editCellFontSize,\n                    boxShadow: self.style.editCellBoxShadow,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-context-menu-item': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-context-menu-label': {\n                    margin: self.style.contextMenuLabelMargin,\n                    display: self.style.contextMenuLabelDisplay,\n                    minWidth: self.style.contextMenuLabelMinWidth,\n                    maxWidth: self.style.contextMenuLabelMaxWidth\n                },\n                'canvas-datagrid-context-menu': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-invalid-search-regExp': {\n                    background: self.style.contextMenuFilterInvalidExpresion\n                }\n            };\n            if (css[className]) {\n                Object.keys(css[className]).map(function (prop) {\n                    el.style[prop] = css[className][prop];\n                });\n            }\n            return;\n        };\n        self.appendTo = function (n) {\n            self.parentNode = n || document.createElement('canvas');\n            if (self.parentNode && /canvas-datagrid-(cell|tree)/.test(self.parentNode.nodeType)) {\n                self.isChildGrid = true;\n                self.parentGrid = self.parentNode.parentGrid;\n                self.ctx = self.parentGrid.context;\n                self.canvas = self.parentGrid.canvas;\n                self.controlInput = self.parentGrid.controlInput;\n                self.eventParent = self.canvas;\n            } else {\n                self.controlInput = document.createElement('input');\n                self.controlInput.onblur = self.intf.blur;\n                self.createInlineStyle(self.controlInput, 'canvas-datagrid-control-input');\n                self.isChildGrid = false;\n                self.parentDOMNode = self.parentNode;\n                self.parentNode = self.parentDOMNode;\n                self.parentIsCanvas = /^canvas$/i.test(self.parentDOMNode.tagName);\n                if (self.isComponent) {\n                    self.shadowCss = document.createElement('style');\n                    self.shadowCss.innerHTML = ':host canvas { display:flex; flex-direction: column; padding: 0; margin: 0; }';\n                    self.parentDOMNode = self.parentNode.parentElement;\n                    self.canvas = document.createElement('canvas');\n                    self.parentNode.appendChild(self.shadowCss);\n                    self.parentNode.appendChild(self.canvas);\n                    self.parentNode.appendChild(self.controlInput);\n                } else if (self.parentIsCanvas) {\n                    self.canvas = self.parentDOMNode;\n                    self.parentDOMNode.appendChild(self.controlInput);\n                } else {\n                    self.canvas = document.createElement('canvas');\n                    self.parentDOMNode.appendChild(self.canvas);\n                    self.parentDOMNode.appendChild(self.controlInput);\n                }\n                self.ctx = self.canvas.getContext('2d');\n                self.ctx.textBaseline = 'alphabetic';\n                self.eventParent = self.canvas;\n            }\n            self.controlInput.addEventListener('blur', function (e) {\n                if (e.target !== self.canvas) {\n                    self.hasFocus = false;\n                }\n            });\n            window.addEventListener('resize', self.resize);\n            if (window.MutationObserver) {\n                self.observer = new window.MutationObserver(function (mutations) {\n                    mutations.forEach(function (mutation) {\n                        self.resize(true);\n                    });\n                });\n                [self.canvas.parentNode].forEach(function (el) {\n                    if (!el) { return; }\n                    self.observer.observe(el, { attributes: true });\n                });\n            }\n            self.eventParent.addEventListener('scroll', self.resize, false);\n            self.eventParent.addEventListener('touchstart', self.touchstart, false);\n            self.eventParent.addEventListener('mouseup', self.mouseup, false);\n            self.eventParent.addEventListener('mousedown', self.mousedown, false);\n            self.eventParent.addEventListener('dblclick', self.dblclick, false);\n            self.eventParent.addEventListener('click', self.click, false);\n            self.eventParent.addEventListener('mousemove', self.mousemove);\n            self.eventParent.addEventListener('wheel', self.scrollWheel, false);\n            self.canvas.addEventListener('contextmenu', self.contextmenuEvent, false);\n            (self.isChildGrid ? self.parentGrid : document).addEventListener('copy', self.copy);\n            self.controlInput.addEventListener('keypress', self.keypress, false);\n            self.controlInput.addEventListener('keyup', self.keyup, false);\n            self.controlInput.addEventListener('keydown', self.keydown, false);\n        };\n        self.setDom = function () {\n            if (self.args.parentNode && self.args.parentNode.createShadowRoot) {\n                if (this.isComponent) {\n                    self.shadowRootParentElement = self.args.parentNode.parentElement;\n                } else {\n                    self.shadowRootParentElement = self.args.parentNode;\n                }\n                self.shadowRoot = self.args.parentNode.attachShadow({mode: self.args.debug ? 'open' : 'closed'});\n                self.args.parentNode = self.shadowRoot;\n            }\n            self.appendTo(self.args.parentNode);\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        // all methods here are exposed by intf\n        // to users\n        /**\n         * Converts a integer into a letter A - ZZZZZ...\n         * @memberof canvasDatagrid\n         * @name integerToAlpha\n         * @method\n         * @param {column} n The number to convert.\n         */\n        self.integerToAlpha = function (n) {\n            var ordA = 'a'.charCodeAt(0),\n                ordZ = 'z'.charCodeAt(0),\n                len = ordZ - ordA + 1,\n                s = '';\n            while (n >= 0) {\n                s = String.fromCharCode(n % len + ordA) + s;\n                n = Math.floor(n / len) - 1;\n            }\n            return s;\n        };\n        /**\n         * Inserts a new column before the specified index into the schema.\n         * @see canvasDatagrid#schema\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name insertColumn\n         * @method\n         * @param {column} c The column to insert into the schema.\n         * @param {number} index The index of the column to insert before.\n         */\n        self.insertColumn = function (c, index) {\n            var s = self.getSchema();\n            if (s.length < index) {\n                throw new Error('Index is beyond the length of the schema.');\n            }\n            self.validateColumn(c, s);\n            s.splice(index, 0, c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a column from the schema at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteColumn\n         * @tutorial schema\n         * @method\n         * @param {number} index The index of the column to delete.\n         */\n        self.deleteColumn = function (index) {\n            var s = self.getSchema();\n            // remove data matching this column name from data\n            self.data.forEach(function (row) {\n                delete row[s[index].name];\n            });\n            s.splice(index, 1);\n            self.intf.schema = s;\n        };\n        /**\n         * Adds a new column into the schema.\n         * @see canvasDatagrid#schema\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name addColumn\n         * @method\n         * @param {column} c The column to add to the schema.\n         */\n        self.addColumn = function (c) {\n            var s = self.getSchema();\n            self.validateColumn(c, s);\n            s.push(c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a row from the dataset at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteRow\n         * @method\n         * @param {number} index The index of the row to delete.\n         */\n        self.deleteRow = function (index) {\n            self.originalData.splice(index, 1);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Inserts a new row into the dataset before the specified index.\n         * @memberof canvasDatagrid\n         * @name insertRow\n         * @method\n         * @param {object} d data.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertRow = function (d, index) {\n            if (self.originalData.length < index) {\n                throw new Error('Index is beyond the length of the dataset.');\n            }\n            self.originalData.splice(index, 0, d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[index], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Adds a new row into the dataset.\n         * @memberof canvasDatagrid\n         * @name addRow\n         * @method\n         * @param {object} d data.\n         */\n        self.addRow = function (d) {\n            self.originalData.push(d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[self.originalData.length - 1], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Sets the height of a given row by index number.\n         * @memberof canvasDatagrid\n         * @name setRowHeight\n         * @method\n         * @param {number} rowIndex The index of the row to set.\n         * @param {number} height Height to set the row to.\n         */\n        self.setRowHeight = function (rowIndex, height) {\n            self.sizes.rows[self.data[rowIndex][self.uniqueId]] = height;\n            self.draw(true);\n        };\n        /**\n         * Sets the width of a given column by index number.\n         * @memberof canvasDatagrid\n         * @name setColumnWidth\n         * @method\n         * @param {number} colIndex The index of the column to set.\n         * @param {number} width Width to set the column to.\n         */\n        self.setColumnWidth = function (colIndex, width) {\n            var s = self.getSchema();\n            self.sizes.columns[s[colIndex][self.uniqueId]] = width;\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the width of the columns due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetColumnWidths\n         * @tutorial schema\n         * @method\n         */\n        self.resetColumnWidths = function () {\n            self.sizes.columns = {};\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the height of the rows due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetRowHeights\n         * @tutorial schema\n         * @method\n         */\n        self.resetRowHeights = function () {\n            self.sizes.rows = {};\n            self.draw(true);\n        };\n        /**\n         * Sets the value of the filter.\n         * @memberof canvasDatagrid\n         * @name setFilter\n         * @method\n         * @param {string} column Name of the column to filter.\n         * @param {string} value The value to filter for.\n         */\n        self.setFilter = function (column, value) {\n            function applyFilter() {\n                self.refreshFromOrigialData();\n                Object.keys(self.columnFilters).forEach(function (filter) {\n                    var header = self.getHeaderByName(column);\n                    if (!header) {\n                        return;\n                    }\n                    self.currentFilter = header.filter || self.filter(column.type || 'string');\n                    self.data = self.data.filter(function (row) {\n                        return self.currentFilter(row[filter], self.columnFilters[filter]);\n                    });\n                });\n                self.resize();\n                self.draw(true);\n            }\n            if (column === undefined && value === undefined) {\n                self.columnFilters = {};\n                return applyFilter();\n            }\n            if (column && (value === '' || value === undefined)) {\n                delete self.columnFilters[column];\n            } else {\n                self.columnFilters[column] = value;\n            }\n            applyFilter();\n        };\n        /**\n         * Returns the number of pixels to scroll down to line up with row rowIndex.\n         * @memberof canvasDatagrid\n         * @name findRowScrollTop\n         * @method\n         * @param {number} rowIndex The row index of the row to scroll find.\n         */\n        self.findRowScrollTop = function (rowIndex) {\n            var top = 0, x = 0, l = self.data.length,\n                cellBorder = self.style.cellBorderWidth * 2;\n            if (!self.attributes.showNewRow) {\n                l -= 1;\n            }\n            if (rowIndex > l) {\n                throw new Error('Impossible row index');\n            }\n            while (x < rowIndex) {\n                top += (self.sizes.rows[self.data[x][self.uniqueId]] || self.style.cellHeight) + cellBorder;\n                x += 1;\n            }\n            //TODO: This is not super accurate, causes pageUp/Dn to not move around right\n            return top - (self.sizes.rows[self.data[rowIndex][self.uniqueId]] || self.style.cellHeight);\n        };\n        /**\n         * Returns the number of pixels to scroll to the left to line up with column columnIndex.\n         * @memberof canvasDatagrid\n         * @name findColumnScrollLeft\n         * @method\n         * @param {number} columnIndex The column index of the column to find.\n         */\n        self.findColumnScrollLeft = function (columnIndex) {\n            var left = 0, y = 0, s = self.getSchema(), l = s.length - 1;\n            if (columnIndex > l) {\n                throw new Error('Impossible column index');\n            }\n            while (y < columnIndex) {\n                left += self.sizes.columns[s[y][self.uniqueId]] || s[y].width;\n                y += 1;\n            }\n            return left;\n        };\n        /**\n         * Scrolls the cell at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name gotoCell\n         * @method\n         * @param {number} x The column index of the cell to scroll to.\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoCell = function (x, y) {\n            if (x !== undefined) {\n                self.scrollBox.scrollLeft = self.findColumnScrollLeft(x);\n            }\n            if (y !== undefined) {\n                self.scrollBox.scrollTop = self.findRowScrollTop(y);\n            }\n        };\n        /**\n         * Scrolls the row y.\n         * @memberof canvasDatagrid\n         * @name gotoRow\n         * @method\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoRow = function (y) {\n            self.gotoCell(0, y);\n        };\n        /**\n         * Scrolls the cell at cell x, row y into view if it is not already.\n         * @memberof canvasDatagrid\n         * @name scrollIntoView\n         * @method\n         * @param {number} x The column index of the cell to scroll into view.\n         * @param {number} y The row index of the cell to scroll into view.\n         */\n        self.scrollIntoView = function (x, y) {\n            if (self.visibleCells.filter(function (cell) {\n                    return (cell.rowIndex === y || y === undefined)\n                        && (cell.columnIndex === x || x === undefined)\n                        && cell.x > 0\n                        && cell.y > 0\n                        && cell.x + cell.width < self.width\n                        && cell.y + cell.height < self.height;\n                }).length === 0) {\n                self.gotoCell(x, y);\n            }\n        };\n        /**\n         * Sets the active cell. Requires redrawing.\n         * @memberof canvasDatagrid\n         * @name setActiveCell\n         * @method\n         * @param {number} x The column index of the cell to set active.\n         * @param {number} y The row index of the cell to set active.\n         */\n        self.setActiveCell = function (x, y) {\n            self.activeCell = {\n                rowIndex: y,\n                columnIndex: x\n            };\n        };\n        /**\n         * Selects every visible cell.\n         * @memberof canvasDatagrid\n         * @name selectAll\n         * @method\n         */\n        self.selectAll = function () {\n            self.selectArea({\n                top: 0,\n                left: 0,\n                right: self.getVisibleSchema().length - 1,\n                bottom: self.data.length - 1\n            });\n        };\n        /**\n         * Returns true if the selected columnIndex is selected on every row.\n         * @memberof canvasDatagrid\n         * @name isColumnSelected\n         * @method\n         * @param {number} columnIndex The column index to check.\n         */\n        self.isColumnSelected = function (columnIndex) {\n            var colIsSelected = true;\n            self.data.forEach(function (row, rowIndex) {\n                if (!self.selections[rowIndex] || self.selections[rowIndex].indexOf(self.orders.columns[columnIndex]) === -1) {\n                    colIsSelected = false;\n                }\n            });\n            return colIsSelected;\n        };\n        /**\n         * Selects a column.\n         * @memberof canvasDatagrid\n         * @name selectColumn\n         * @method\n         * @param {number} columnIndex The column index to select.\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the column.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the column.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectColumn = function (columnIndex, ctrl, shift, supressEvent) {\n            var s, e, x;\n            function addCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) === -1) {\n                        self.selections[rowIndex].push(i);\n                    }\n                });\n            }\n            function removeCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) !== -1) {\n                        self.selections[rowIndex].splice(self.selections[rowIndex].indexOf(i), 1);\n                    }\n                });\n            }\n            if (shift) {\n                if (!self.activeCell) { return; }\n                s = Math.min(self.activeCell.columnIndex, columnIndex);\n                e = Math.max(self.activeCell.columnIndex, columnIndex);\n                for (x = s; e > x; x += 1) {\n                    addCol(x);\n                }\n            }\n            if (!ctrl && !shift) {\n                self.selections = [];\n                self.activeCell.columnIndex = columnIndex;\n                self.activeCell.rowIndex = self.scrollIndexTop;\n            }\n            if (ctrl && self.isColumnSelected(columnIndex)) {\n                removeCol(columnIndex);\n            } else {\n                addCol(columnIndex);\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.getSelectionBounds()\n            });\n        };\n        /**\n         * Selects a row.\n         * @memberof canvasDatagrid\n         * @name selectRow\n         * @method\n         * @param {number} rowIndex The row index to select.\n         * @param {boolean} ctrl When true, behaves as if you were holding control/command when you clicked the row.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the row.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectRow = function (rowIndex, ctrl, shift, supressEvent) {\n            var x, st, en, s = self.getSchema();\n            function addRow(ri) {\n                self.selections[ri] = [];\n                self.selections[ri].push(-1);\n                s.forEach(function (col) {\n                    self.selections[ri].push(col.index);\n                });\n            }\n            if (self.dragAddToSelection === false || self.dragObject === undefined) {\n                if (self.selections[rowIndex] && self.selections[rowIndex].length - 1 === s.length) {\n                    if (ctrl) {\n                        self.selections[rowIndex] = [];\n                        return;\n                    }\n                }\n            }\n            if (self.dragAddToSelection === true || self.dragObject === undefined) {\n                if (shift && self.dragObject === undefined) {\n                    if (!self.activeCell) { return; }\n                    st = Math.min(self.activeCell.rowIndex, rowIndex);\n                    en = Math.max(self.activeCell.rowIndex, rowIndex);\n                    for (x = st; en >= x; x += 1) {\n                        addRow(x);\n                    }\n                } else {\n                    addRow(rowIndex);\n                }\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Collapse a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name collapseTree\n         * @method\n         * @param {number} index The index of the row to collapse.\n         */\n        self.collapseTree = function (rowIndex) {\n            var rowId = self.data[rowIndex][self.uniqueId];\n            self.dispatchEvent('collapsetree', {\n                childGrid: self.childGrids[rowId],\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId].blur();\n            self.openChildren[rowId].dispose();\n            delete self.openChildren[rowId];\n            delete self.sizes.trees[rowId];\n            delete self.childGrids[rowId];\n            self.dispatchEvent('resizerow', {\n                cellHeight: self.style.cellHeight\n            });\n            self.resize(true);\n            self.draw(true);\n        };\n        /**\n         * Expands a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name expandTree\n         * @method\n         * @param {number} index The index of the row to expand.\n         */\n        self.expandTree = function (rowIndex) {\n            var rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth,\n                rowId = self.data[rowIndex][self.uniqueId],\n                h = self.sizes.trees[rowId] || self.style.treeGridHeight,\n                treeGrid;\n            if (!self.childGrids[rowId]) {\n                treeGrid = self.createGrid({\n                    debug: self.attributes.debug,\n                    name: self.attributes.saveAppearance\n                        ? self.attributes.name + 'tree' + rowId : undefined,\n                    parentNode: {\n                        parentGrid: self.intf,\n                        nodeType: 'canvas-datagrid-tree',\n                        offsetHeight: h,\n                        offsetWidth: self.width - columnHeaderCellWidth,\n                        header: { width: self.width - columnHeaderCellWidth },\n                        offsetLeft: columnHeaderCellWidth,\n                        offsetTop: rowHeaderCellHeight,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: 'tree',\n                        data: self.data[rowIndex]\n                    }\n                });\n                self.childGrids[rowId] = treeGrid;\n            }\n            treeGrid = self.childGrids[rowId];\n            treeGrid.visible = true;\n            self.dispatchEvent('expandtree', {\n                treeGrid: treeGrid,\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId] = treeGrid;\n            self.sizes.trees[rowId] = h;\n            self.dispatchEvent('resizerow', {height: self.style.cellHeight});\n            self.resize(true);\n        };\n        /**\n         * Toggles tree grid open and close by row index.\n         * @memberof canvasDatagrid\n         * @name toggleTree\n         * @method\n         * @param {number} index The index of the row to toggle.\n         */\n        self.toggleTree = function (rowIndex) {\n            var i = self.openChildren[self.data[rowIndex][self.uniqueId]];\n            if (i) {\n                return self.collapseTree(rowIndex);\n            }\n            self.expandTree(rowIndex);\n        };\n        /**\n         * Returns a header from the schema by name.\n         * @memberof canvasDatagrid\n         * @name getHeaderByName\n         * @tutorial schema\n         * @method\n         * @returns {header} header with the selected name, or undefined.\n         * @param {string} name The name of the column to resize.\n         */\n        self.getHeaderByName = function (name) {\n            var x, i = self.getSchema();\n            for (x = 0; x < i.length; x += 1) {\n                if (i[x].name === name) {\n                    return i[x];\n                }\n            }\n        };\n        /**\n         * Resizes a column to fit the longest value in the column. Call without a value to resize all columns.\n         * Warning, can be slow on very large record sets (1m records ~3-5 seconds on an i7).\n         * @memberof canvasDatagrid\n         * @name fitColumnToValues\n         * @method\n         * @param {string} name The name of the column to resize.\n         */\n        self.fitColumnToValues = function (name, internal) {\n            self.sizes.columns[name === 'cornerCell' ? name : self.getHeaderByName(name)[self.uniqueId]]\n                = self.findColumnMaxTextLength(name);\n            if (!internal) {\n                self.resize();\n                self.draw(true);\n            }\n        };\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @overload\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {number} columnIndex The column index of the cell to check.\n         * @param {number} rowIndex The row index of the cell to check.\n         */\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {cell} cell The cell to check for.  Alternatively you can pass an object { x: <x-pixel-value>, y: <y-pixel-value> }.\n         */\n        self.isCellVisible = function (cell, rowIndex) {\n            // overload\n            if (rowIndex !== undefined) {\n                return self.visibleCells.filter(function (c) {\n                    return c.columnIndex === cell && c.rowIndex === rowIndex;\n                }).length > 0;\n            }\n            var x, l = self.visibleCells.length;\n            for (x = 0; x < l; x += 1) {\n                if (cell.x === self.visibleCells[x].x && cell.y === self.visibleCells[x].y) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n         * Sets the order of the data.\n         * @memberof canvasDatagrid\n         * @name order\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} columnName Number of pixels from the left.\n         * @param {string} direction `asc` for ascending or `desc` for descending.\n         * @param {function} [sortFunction] When defined, override the default sorting method defined in the column's schema and use this one.\n         * @param {bool} [dontSetStorageData] Don't store this setting for future use.\n         */\n        self.order = function (columnName, direction, sortFunction, dontSetStorageData) {\n            var f,\n                c = self.getSchema().filter(function (col) {\n                    return col.name === columnName;\n                });\n            self.orderBy = columnName;\n            if (c.length === 0) {\n                throw new Error('Cannot sort.  No such column name');\n            }\n            f = sortFunction || self.sorters[c[0].type];\n            if (!f && c[0].type !== undefined) {\n                console.warn('Cannot sort type \"%s\" falling back to string sort.', c[0].type);\n            }\n            self.data = self.data.sort(typeof f === 'function' ? f(columnName, direction) : self.sorters.string);\n            self.dispatchEvent('ordercolumn', {name: columnName, direction: direction});\n            self.draw(true);\n            if (dontSetStorageData) { return; }\n            self.setStorageData();\n        };\n        self.isInGrid = function (e) {\n            if (e.x < 0\n                    || e.x > self.width\n                    || e.y < 0\n                    || e.y > self.height) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Checks if a given column is visible.\n         * @memberof canvasDatagrid\n         * @name isRowVisible\n         * @method\n         * @returns {boolean} When true, the row is visible.\n         * @param {number} rowIndex Row index.\n         */\n        self.isColumnVisible = function (columnIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === columnIndex;\n            }).length > 0;\n        };\n        /**\n         * Checks if a given row is visible.\n         * @memberof canvasDatagrid\n         * @name isRowVisible\n         * @method\n         * @returns {boolean} When true, the row is visible.\n         * @param {number} rowIndex Row index.\n         */\n        self.isRowVisible = function (rowIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.rowIndex === rowIndex;\n            }).length > 0;\n        };\n        /**\n         * Gets the cell at columnIndex and rowIndex.\n         * @memberof canvasDatagrid\n         * @name getVisibleCellByIndex\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Column index.\n         * @param {number} y Row index.\n         */\n        self.getVisibleCellByIndex = function (x, y) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === x && c.rowIndex === y;\n            })[0];\n        };\n        /**\n         * Gets the cell at grid pixel coordinate x and y.\n         * @memberof canvasDatagrid\n         * @name getCellAt\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Number of pixels from the left.\n         * @param {number} y Number of pixels from the top.\n         */\n        self.getCellAt = function (x, y, useTouchScrollZones) {\n            var tsz = useTouchScrollZones ? self.attributes.touchScrollZone : 0, i, l = self.visibleCells.length, cell;\n            if (!self.visibleCells || !self.visibleCells.length) { return; }\n            self.hasFocus = true;\n            if (!(y < self.height\n                && y > 0\n                && x < self.width\n                && x > 0)) {\n                self.hasFocus = false;\n                return {\n                    dragContext: 'inherit',\n                    context: 'inherit'\n                };\n            }\n            for (i = 0; i < l; i += 1) {\n                cell = self.visibleCells[i];\n                if (useTouchScrollZones && /(vertical|horizontal)-scroll-/.test(cell.style)) {\n                    cell.x -= tsz;\n                    cell.y -= tsz;\n                    cell.height += tsz;\n                    cell.width += tsz;\n                }\n                if (cell.x - self.style.cellBorderWidth < x\n                        && cell.x + cell.width + self.style.cellBorderWidth > x\n                        && cell.y - self.style.cellBorderWidth < y\n                        && cell.y + cell.height + self.style.cellBorderWidth > y) {\n                    if (/vertical-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'vertical-scroll-box';\n                        cell.context = 'vertical-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isVerticalScrollBar = true;\n                        if (y > self.scrollBox.box.v.y + self.scrollBox.scrollBoxHeight) {\n                            cell.dragContext = 'vertical-scroll-bottom';\n                            cell.context = 'vertical-scroll-bottom';\n                        } else if (y < self.scrollBox.box.v.y) {\n                            cell.dragContext = 'vertical-scroll-top';\n                            cell.context = 'vertical-scroll-top';\n                        }\n                        self.canvas.style.cursor = 'default';\n                        return cell;\n                    }\n                    if (/horizontal-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'horizontal-scroll-box';\n                        cell.context = 'horizontal-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isHorizontalScrollBar = true;\n                        if (x > self.scrollBox.box.h.x + self.scrollBox.scrollBoxWidth) {\n                            cell.dragContext = 'horizontal-scroll-right';\n                            cell.context = 'horizontal-scroll-right';\n                        } else if (x < self.scrollBox.box.h.x) {\n                            cell.dragContext = 'horizontal-scroll-left';\n                            cell.context = 'horizontal-scroll-left';\n                        }\n                        self.canvas.style.cursor = 'default';\n                        return cell;\n                    }\n                    if (cell.x + cell.width - (self.attributes.borderResizeZone * 0.4) < x\n                            && cell.x + cell.width + (self.attributes.borderResizeZone * 0.6) > x\n                            && self.attributes.allowColumnResize\n                            && ((self.attributes.allowColumnResizeFromCell && cell.style === 'cell')\n                                || cell.style !== 'cell')\n                            && ((self.attributes.allowRowHeaderResize\n                                && ['rowHeaderCell', 'cornerCell'].indexOf(cell.style) !== -1)\n                                || ['rowHeaderCell', 'cornerCell'].indexOf(cell.style) === -1)) {\n                        cell.context = 'ew-resize';\n                        cell.dragContext = 'ew-resize';\n                        return cell;\n                    }\n                    if (cell.y + cell.height - (self.attributes.borderResizeZone * 0.4) < y\n                            && cell.y + cell.height + (self.attributes.borderResizeZone * 0.6) > y\n                            && self.attributes.allowRowResize\n                            && ((self.attributes.allowRowResizeFromCell && cell.style === 'cell')\n                                || cell.style !== 'cell')\n                            && cell.style !== 'columnHeaderCell') {\n                        cell.context = 'ns-resize';\n                        cell.dragContext = 'ns-resize';\n                        return cell;\n                    }\n                    if (cell.style === 'columnHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'column-reorder';\n                        return cell;\n                    }\n                    if (cell.style === 'rowHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'row-reorder';\n                        return cell;\n                    }\n                    if (cell.isGrid) {\n                        self.hasFocus = false;\n                        cell.dragContext = 'cell-grid';\n                        cell.context = 'cell-grid';\n                        return cell;\n                    }\n                    if (cell.style === 'tree-grid') {\n                        self.hasFocus = false;\n                        cell.dragContext = 'tree';\n                        cell.context = 'tree';\n                        return cell;\n                    }\n                    cell.dragContext = 'cell';\n                    cell.context = 'cell';\n                    return cell;\n                }\n            }\n            self.hasFocus = true;\n            self.canvas.style.cursor = 'default';\n            return {\n                dragContext: 'background',\n                context: 'background',\n                style: 'background',\n                isBackground: true\n            };\n        };\n        /**\n         * Gets the bounds of current selection. \n         * @returns {rect} selection.\n         * @memberof canvasDatagrid\n         * @name getSelectionBounds\n         * @method\n         */\n        self.getSelectionBounds = function () {\n            var low = {x: Infinity, y: Infinity},\n                high = {x: -Infinity, y: -Infinity};\n            self.data.forEach(function (row, rowIndex) {\n                var maxCol, minCol;\n                if (self.selections[rowIndex] && self.selections[rowIndex].length) {\n                    low.y = rowIndex < low.y ? rowIndex : low.y;\n                    high.y = rowIndex > high.y ? rowIndex : high.y;\n                    maxCol = Math.max.apply(null, self.selections[rowIndex]);\n                    minCol = Math.min.apply(null, self.selections[rowIndex]);\n                    low.x = minCol < low.x ? minCol : low.x;\n                    high.x = maxCol > high.x ? maxCol : high.x;\n                }\n            });\n            return {\n                top: low.y,\n                left: low.x,\n                bottom: high.y,\n                right: high.x\n            };\n        };\n        /**\n         * Returns an auto generated schema based on data structure.\n         * @memberof canvasDatagrid\n         * @name getSchemaFromData\n         * @method\n         * @tutorial schema\n         * @returns {schema} schema A schema based on the first item in the data array.\n         */\n        self.getSchemaFromData = function () {\n            return Object.keys(self.data[0] || {' ': ''}).map(function mapEachSchemaColumn(key, index) {\n                var type = self.getBestGuessDataType(key),\n                    i = {\n                        name: key,\n                        title: isNaN(parseInt(key, 10)) ? key : self.integerToAlpha(key).toUpperCase(),\n                        width: self.style.columnWidth,\n                        index: index,\n                        type: type,\n                        filter: self.filter(type)\n                    };\n                if (key === self.uniqueId) {\n                    i.hidden = true;\n                }\n                i[self.uniqueId] = self.getSchemaNameHash(key);\n                return i;\n            });\n        };\n        /**\n         * Clears the change log grid.changes that keeps track of changes to the data set.\n         * This does not undo changes or alter data it is simply a convince array to keep\n         * track of changes made to the data since last this method was called.\n         * @memberof canvasDatagrid\n         * @name clearChangeLog\n         * @method\n         */\n        self.clearChangeLog = function () {\n            self.changes = [];\n        };\n        /**\n         * Selects an area of the grid.\n         * @memberof canvasDatagrid\n         * @name selectArea\n         * @method\n         * @param {rect} bounds A rect object representing the selected values.\n         */\n        self.selectArea = function (bounds, ctrl) {\n            self.selectionBounds = bounds || self.selectionBounds;\n            var x, y, s = self.getSchema();\n            if (!ctrl) {\n                self.selections = [];\n            }\n            if (self.selectionBounds.top < -1\n                    || self.selectionBounds.bottom > self.data.length\n                    || self.selectionBounds.left < -1\n                    || self.selectionBounds.right > s.length) {\n                throw new Error('Impossible selection area');\n            }\n            for (x = self.selectionBounds.top; x <= self.selectionBounds.bottom; x += 1) {\n                self.selections[x] = [];\n                for (y = self.selectionBounds.left; y <= self.selectionBounds.right; y += 1) {\n                    if (self.selections[x].indexOf(y) === -1) {\n                        self.selections[x].push(y);\n                    }\n                }\n            }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Returns the maximum text width for a given column by column name.\n         * @memberof canvasDatagrid\n         * @name findColumnMaxTextLength\n         * @method\n         * @returns {number} The number of pixels wide the maximum width value in the selected column.\n         * @param {string} name The name of the column to calculate the value's width of.\n         */\n        self.findColumnMaxTextLength = function (name) {\n            var m = -Infinity;\n            if (name === 'cornerCell') {\n                self.ctx.font = self.style.rowHeaderCellFont;\n                return self.ctx.measureText((self.data.length + (self.attributes.showNewRow ? 1 : 0)).toString()).width\n                    + self.style.autosizePadding + self.style.autosizeHeaderCellPadding\n                    + self.style.rowHeaderCellPaddingRight\n                    + self.style.rowHeaderCellPaddingLeft\n                    + (self.attributes.tree ? self.style.treeArrowWidth\n                        + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight : 0);\n            }\n            self.getSchema().forEach(function (col) {\n                if (col.name !== name) { return; }\n                self.ctx.font = self.style.columnHeaderCellFont;\n                var t = self.ctx.measureText(col.title || col.name).width\n                    + self.style.headerCellPaddingRight\n                    + self.style.headerCellPaddingLeft;\n                m = t > m ? t : m;\n            });\n            self.data.forEach(function (row) {\n                self.ctx.font = self.style.cellFont;\n                var t = self.ctx.measureText(row[name]).width\n                    + self.style.cellPaddingRight\n                    + self.style.cellPaddingLeft + self.style.cellAutoResizePadding;\n                m = t > m ? t : m;\n            });\n            return m;\n        };\n        /**\n         * Gets the total width of all header columns.\n         * @memberof canvasDatagrid\n         * @name getHeaderWidth\n         * @method\n         */\n        self.getHeaderWidth = function () {\n            return self.getVisibleSchema().reduce(function (total, header) {\n                return total + header.width;\n            }, 0);\n        };\n        self.formatters.string = function cellFormatterString(e) {\n            return e.cell.value !== undefined ? e.cell.value : '';\n        };\n        self.formatters.rowHeaderCell = self.formatters.string;\n        self.formatters.headerCell = self.formatters.string;\n        self.formatters.number = self.formatters.string;\n        self.formatters.int = self.formatters.string;\n        self.formatters.html = self.formatters.string;\n        self.sorters.string = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (a[columnName] === undefined || a[columnName] === null) {\n                    return 1;\n                }\n                if (b[columnName] === undefined || b[columnName] === null) {\n                    return 0;\n                }\n                if (asc) {\n                    if (!a[columnName].localeCompare) { return 1; }\n                    return a[columnName].localeCompare(b[columnName]);\n                }\n                if (!b[columnName].localeCompare) { return 1; }\n                return b[columnName].localeCompare(a[columnName]);\n            };\n        };\n        self.sorters.number = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return a[columnName] - b[columnName];\n                }\n                return b[columnName] - a[columnName];\n            };\n        };\n        self.sorters.date = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return new Date(a[columnName]).getTime()\n                        - new Date(b[columnName]).getTime();\n                }\n                return new Date(b[columnName]).getTime()\n                        - new Date(a[columnName]).getTime();\n            };\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// canvas-datagrid.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap aa253afda40cdf7fb7fa","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.defaults = {\n            attributes: [\n                ['name', ''],\n                ['tree', false],\n                ['showNewRow', false],\n                ['treeHorizontalScroll', false],\n                ['saveAppearance', true],\n                ['selectionFollowsActiveCell', false],\n                ['multiLine', false],\n                ['editable', true],\n                ['allowColumnReordering', true],\n                ['allowRowReordering', false],\n                ['allowSorting', true],\n                ['showFilter', true],\n                ['globalRowResize', false],\n                ['pageUpDownOverlap', 1],\n                ['persistantSelectionMode', false],\n                ['selectionMode', 'cell'],\n                ['autoResizeColumns', false],\n                ['allowRowHeaderResize', true],\n                ['allowColumnResize', true],\n                ['allowRowResize', true],\n                ['allowRowResizeFromCell', false],\n                ['allowColumnResizeFromCell', false],\n                ['debug', false],\n                ['borderResizeZone', 10],\n                ['showColumnHeaders', true],\n                ['showRowNumbers', true],\n                ['showRowHeaders', true],\n                ['scrollRepeatRate', 75],\n                ['selectionScrollZone', 20],\n                ['resizeScrollZone', 20],\n                ['contextHoverScrollRateMs', 5],\n                ['contextHoverScrollAmount', 2],\n                ['selectionScrollIncrement', 20],\n                ['reorderDeadZone', 3],\n                ['showClearSettingsOption', true],\n                ['showOrderByOption', true],\n                ['clearSettingsOptionText', 'Clear saved settings'],\n                ['showOrderByOptionTextAsc', 'Order by %s ascending'],\n                ['showOrderByOptionTextDesc', 'Order by %s descending'],\n                ['removeFilterOptionText', 'Remove filter on %s'],\n                ['filterOptionText', 'Filter %s'],\n                ['filterTextPrefix', '(filtered) '],\n                ['touchReleaseAnimationDurationMs', 2000],\n                ['touchReleaseAcceleration', 500],\n                ['touchDeadZone', 3],\n                ['touchSelectTimeMs', 800],\n                ['touchScrollZone', 30],\n                ['copyText', 'Copy'],\n                ['showCopy', true],\n                ['columnHeaderClickBehavior', 'sort'],\n                ['scrollPointerLock', false],\n                ['maxAutoCompleteItems', 200]\n            ],\n            styles: [\n                ['activeCellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['activeCellBorderWidth', 0.25],\n                ['activeCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellFont', '16px sans-serif'],\n                ['activeCellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['activeCellOverlayBorderWidth', 0.5],\n                ['activeCellPaddingBottom', 5],\n                ['activeCellPaddingLeft', 5],\n                ['activeCellPaddingRight', 7],\n                ['activeCellPaddingTop', 5],\n                ['activeCellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['activeCellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['activeColumnHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeColumnHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeRowHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeRowHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['autocompleteBottomMargin', 60],\n                ['autosizeHeaderCellPadding', 8],\n                ['autosizePadding', 5],\n                ['backgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cellAutoResizePadding', 13],\n                ['cellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['cellBorderWidth', 0.5],\n                ['cellColor', 'rgba(0, 0, 0, 1)'],\n                ['cellFont', '16px sans-serif'],\n                ['cellGridHeight', 250],\n                ['cellHeight', 24],\n                ['cellHeightWithChildGrid', 150],\n                ['cellHorizontalAlignment', 'left'],\n                ['cellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['cellPaddingBottom', 5],\n                ['cellPaddingLeft', 5],\n                ['cellPaddingRight', 7],\n                ['cellPaddingTop', 5],\n                ['cellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['cellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['cellVerticalAlignment', 'center'],\n                ['cellWidthWithChildGrid', 250],\n                ['childContextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['childContextMenuArrowHTML', '&#x25BA;'],\n                ['childContextMenuMarginLeft', -15],\n                ['childContextMenuMarginTop', 0],\n                ['columnHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellBorderColor', 'rgba(152, 152, 152, 1)'],\n                ['columnHeaderCellBorderWidth', 0.25],\n                ['columnHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['columnHeaderCellFont', '16px sans-serif'],\n                ['columnHeaderCellHeight', 25],\n                ['columnHeaderCellHorizontalAlignment', 'left'],\n                ['columnHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['columnHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['columnHeaderCellPaddingBottom', 5],\n                ['columnHeaderCellPaddingLeft', 5],\n                ['columnHeaderCellPaddingRight', 7],\n                ['columnHeaderCellPaddingTop', 5],\n                ['columnHeaderCellVerticalAlignment', 'center'],\n                ['columnWidth', 250],\n                ['contextFilterButtonBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterButtonBorderRadius', '3px'],\n                ['contextFilterButtonHTML', '&#x25BC;'],\n                ['contextFilterInputBackground', 'rgba(255,255,255,1)'],\n                ['contextFilterInputBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterInputBorderRadius', '0'],\n                ['contextFilterInputColor', 'rgba(0,0,0,1)'],\n                ['contextFilterInputFontFamily', 'sans-serif'],\n                ['contextFilterInputFontSize', '14px'],\n                ['contextFilterInvalidRegExpBackground', 'rgba(180, 6, 1, 1)'],\n                ['contextFilterInvalidRegExpColor', 'rgba(255, 255, 255, 1)'],\n                ['contextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuArrowDownHTML', '&#x25BC;'],\n                ['contextMenuArrowUpHTML', '&#x25B2;'],\n                ['contextMenuBackground', 'rgba(240, 240, 240, 1)'],\n                ['contextMenuBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextMenuBorderRadius', '3px'],\n                ['contextMenuChildArrowFontSize', '12px'],\n                ['contextMenuColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuFilterButtonFontFamily', 'sans-serif'],\n                ['contextMenuFilterButtonFontSize', '10px'],\n                ['contextMenuFilterInvalidExpresion', 'rgba(237, 155, 156, 1)'],\n                ['contextMenuFontFamily', 'sans-serif'],\n                ['contextMenuFontSize', '16px'],\n                ['contextMenuHoverBackground', 'rgba(182, 205, 250, 1)'],\n                ['contextMenuHoverColor', 'rgba(43, 48, 153, 1)'],\n                ['contextMenuItemBorderRadius', '3px'],\n                ['contextMenuItemMargin', '2px'],\n                ['contextMenuLabelDisplay', 'inline-block'],\n                ['contextMenuLabelMargin', '0 3px 0 0'],\n                ['contextMenuLabelMaxWidth', '700px'],\n                ['contextMenuLabelMinWidth', '75px'],\n                ['contextMenuMarginLeft', 3],\n                ['contextMenuMarginTop', -3],\n                ['contextMenuOpacity', '0.98'],\n                ['contextMenuPadding', '2px'],\n                ['contextMenuWindowMargin', 6],\n                ['cornerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cornerCellBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['editCellBackgroundColor', 'white'],\n                ['editCellBorder', 'solid 1px rgba(110, 168, 255, 1)'],\n                ['editCellBoxShadow', '0 2px 5px rgba(0,0,0,0.4)'],\n                ['editCellColor', 'black'],\n                ['editCellFontFamily', 'sans-serif'],\n                ['editCellFontSize', '16px'],\n                ['editCellPaddingLeft', 4],\n                ['height', 'auto'],\n                ['gridBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['gridBorderWidth', 1],\n                ['columnHeaderOrderByArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['columnHeaderOrderByArrowBorderWidth', 1],\n                ['columnHeaderOrderByArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['columnHeaderOrderByArrowHeight', 8],\n                ['columnHeaderOrderByArrowMarginLeft', 0],\n                ['columnHeaderOrderByArrowMarginRight', 5],\n                ['columnHeaderOrderByArrowMarginTop', 6],\n                ['columnHeaderOrderByArrowWidth', 13],\n                ['minColumnWidth', 45],\n                ['minHeight', 24],\n                ['minRowHeight', 24],\n                ['name', 'default'],\n                ['reorderMarkerBackgroundColor', 'rgba(0, 0, 0, 0.1)'],\n                ['reorderMarkerBorderColor', 'rgba(0, 0, 0, 0.2)'],\n                ['reorderMarkerBorderWidth', 1.25],\n                ['reorderMarkerIndexBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['reorderMarkerIndexBorderWidth', 2.75],\n                ['rowHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['rowHeaderCellBorderColor', 'rgba(200, 200, 200, 1)'],\n                ['rowHeaderCellBorderWidth', 1],\n                ['rowHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellFont', '16px sans-serif'],\n                ['rowHeaderCellHeight', 25],\n                ['rowHeaderCellHorizontalAlignment', 'left'],\n                ['rowHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['rowHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['rowHeaderCellPaddingBottom', 5],\n                ['rowHeaderCellPaddingLeft', 5],\n                ['rowHeaderCellPaddingRight', 5],\n                ['rowHeaderCellPaddingTop', 5],\n                ['rowHeaderCellSelectedBackgroundColor', 'rgba(217, 217, 217, 1)'],\n                ['rowHeaderCellSelectedColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellVerticalAlignment', 'center'],\n                ['rowHeaderCellWidth', 57],\n                ['scrollBarActiveColor', 'rgba(125, 125, 125, 1)'],\n                ['scrollBarBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarBorderWidth', 0.5],\n                ['scrollBarBoxBorderRadius', 4.125],\n                ['scrollBarBoxColor', 'rgba(192, 192, 192, 1)'],\n                ['scrollBarBoxMargin', 2],\n                ['scrollBarBoxMinSize', 15],\n                ['scrollBarBoxWidth', 8],\n                ['scrollBarCornerBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarCornerBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarWidth', 11],\n                ['selectionOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionOverlayBorderWidth', 0.75],\n                ['treeArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['treeArrowBorderWidth', 1],\n                ['treeArrowClickRadius', 5],\n                ['treeArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['treeArrowHeight', 8],\n                ['treeArrowMarginLeft', 0],\n                ['treeArrowMarginRight', 5],\n                ['treeArrowMarginTop', 6],\n                ['treeArrowWidth', 13],\n                ['treeGridHeight', 250],\n                ['width', 'auto']\n            ]\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/defaults.js\n// module id = 0\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true, evil: true*/\n/*globals Reflect: false, HTMLElement: true, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([\n    './component',\n    './defaults',\n    './draw',\n    './events',\n    './intf',\n    './contextMenu',\n    './dom',\n    './publicMethods'\n], function context(component) {\n    'use strict';\n    component = component();\n    var modules = Array.prototype.slice.call(arguments);\n    function Grid(args) {\n        args = args || {};\n        var self = {};\n        self.isComponent = args.component === undefined;\n        self.intf = self.isComponent ? eval('Reflect.construct(HTMLElement, [], new.target)') : {};\n        self.args = args;\n        self.createGrid = function grid(args) {\n            args.component = false;\n            return new Grid(args);\n        };\n        modules.forEach(function (module) {\n            module(self);\n        });\n        self.intf.args = self.args;\n        self.intf.init = self.init;\n        if (!self.isComponent) {\n            self.init();\n        }\n        return self.intf;\n    }\n    if (window.HTMLElement) {\n        Grid.prototype = Object.create(window.HTMLElement.prototype);\n    }\n    // export web component\n    if (window.customElements) {\n        Grid.observedAttributes = component.getObservableAttributes();\n        Grid.prototype.disconnectedCallback = function () { this.dispose(); };\n        Grid.prototype.attributeChangedCallback = component.attributeChangedCallback;\n        Grid.prototype.connectedCallback = component.connectedCallback;\n        Grid.prototype.adoptedCallback = component.adoptedCallback;\n        window.customElements.define('canvas-datagrid', Grid);\n    }\n    // export global\n    if (window && !window.canvasDatagrid && !window.require) {\n        window.canvasDatagrid = function (args) { return new Grid(args); };\n    }\n    // export amd loader\n    module.exports = function grid(args) {\n        args = args || {};\n        args.component = false;\n        return new Grid(args);\n    };\n    return module.exports;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/main.js\n// module id = 1\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine(['./defaults'], function (defaults) {\n    'use strict';\n    return function (self) {\n        self = self || {};\n        var typeMap, component = {};\n        function hyphenateProperty(prop, cust) {\n            var p = '';\n            Array.prototype.forEach.call(prop, function (char) {\n                if (char === char.toUpperCase()) {\n                    p += '-' + char.toLowerCase();\n                    return;\n                }\n                p += char;\n            });\n            return (cust ? '--cdg-' : '') + p;\n        }\n        function getDefaultItem(base, item) {\n            var i = {},\n                r;\n            defaults(i);\n            r = i.defaults[base].filter(function (i) {\n                return i[0].toLowerCase() === item.toLowerCase()\n                    || hyphenateProperty(i[0]) === item.toLowerCase()\n                    || hyphenateProperty(i[0], true) === item.toLowerCase();\n            })[0];\n            return r;\n        }\n        function applyComponentStyle(intf, self, supressChangeAndDrawEvents) {\n            var cStyle = window.getComputedStyle(intf, null),\n                defs = {};\n            self.computedStyle = cStyle;\n            defaults(defs);\n            defs = defs.defaults.styles;\n            defs.forEach(function (def) {\n                var val = cStyle.getPropertyValue(hyphenateProperty(def[0], true));\n                if (val !== \"\") {\n                    self.style[def[0]] = typeMap[typeof def[1]](val, def[1]);\n                }\n            });\n            self.draw(true);\n            if (!supressChangeAndDrawEvents) {\n                self.dispatchEvent('stylechanged', intf.style);\n            }\n        }\n        typeMap = {\n            data: function (strData) {\n                try {\n                    return JSON.parse(strData);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid data attribute.');\n                }\n            },\n            schema: function (strSchema) {\n                try {\n                    return JSON.parse(strSchema);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid schema attribute.');\n                }\n            },\n            number: function (strNum, def) {\n                var n = parseInt(strNum, 10);\n                return isNaN(n) ? def : n;\n            },\n            boolean: function (strBool) {\n                return (/true/i).test(strBool);\n            },\n            string: function (str) {\n                return str;\n            }\n        };\n        component.getObservableAttributes = function () {\n            var i = {}, attrs = ['data', 'schema'];\n            defaults(i);\n            i.defaults.attributes.forEach(function (attr) {\n                attrs.push(attr[0].toLowerCase());\n            });\n            return attrs;\n        };\n        component.connectedCallback = function () {\n            var intf = this, s;\n            if (intf.initialized) { return; }\n            intf.initialized = true;\n            intf.args.parentNode = intf;\n            //HACK init() will secretly return the internal reference object.\n            //since init is only run after instantiation in the component version\n            //it won't work in the amd version and won't return self, so it is still\n            //technically private since it's impossible to get at.\n            //this has to be done so intf setters can bet run and alter self without stack overflows\n            //intf.style.display = 'block';\n            s = intf.init();\n            component.observe(intf, s);\n            applyComponentStyle(intf, s, true);\n            s.resize();\n            ['style', 'data', 'schema'].forEach(function (key) {\n                Object.defineProperty(intf.args, key, {\n                    set: function (value) {\n                        s[key] = value;\n                        intf.draw();\n                    },\n                    get: function () {\n                        return s[key];\n                    }\n                });\n            });\n        };\n        component.adoptedCallback = function () {\n            this.resize();\n        };\n        component.attributeChangedCallback = function (attrName, oldVal, newVal) {\n            var tfn, intf = this;\n            if (attrName === 'style') {\n                return;\n            }\n            if (attrName === 'data') {\n                intf.args.data = typeMap.data(newVal);\n                return;\n            }\n            if (attrName === 'schema') {\n                intf.args.schema = typeMap.schema(newVal);\n                return;\n            }\n            if (attrName === 'class' || attrName === 'className') {\n                return;\n            }\n            tfn = typeMap[typeof getDefaultItem('attributes', attrName)[1]];\n            intf.attributes[attrName] = tfn(newVal);\n            return;\n        };\n        component.observe = function (intf, self) {\n            var observer;\n            if (!window.MutationObserver) { return; }\n            self.applyComponentStyle = function () { applyComponentStyle(intf, self); self.resize(); };\n            /**\n             * Applies the computed css styles to the grid.  In some browsers, changing directives in attached style sheets does not automatically update the styles in this component.  It is necessary to call this method to update in these cases.\n             * @memberof canvasDatagrid\n             * @name applyComponentStyle\n             * @method\n             */\n            intf.applyComponentStyle = self.applyComponentStyle;\n            observer = new window.MutationObserver(function (mutations) {\n                var checkInnerHTML;\n                Array.prototype.forEach.call(mutations, function (mutation) {\n                    if (mutation.attributeName === 'class'\n                            || mutation.attributeName === 'style') {\n                        self.applyComponentStyle();\n                        return;\n                    }\n                    if (mutation.addedNodes.length > 0) {\n                        checkInnerHTML = true;\n                    }\n                });\n                if (checkInnerHTML) {\n                    intf.data = typeMap.data(intf.innerHTML);\n                }\n            });\n            observer.observe(intf, { characterData: true, childList: true, attributes: true, subtree: true });\n        };\n        self.component = component;\n        return component;\n    };\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/component.js\n// module id = 2\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals XMLSerializer: false, define: true, Blob: false, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var perfCounters = [],\n            drawCount = 0,\n            perfWindowSize = 20;\n        self.htmlImageCache = {};\n        function drawOnAllImagesLoaded() {\n            var loaded = true;\n            Object.keys(self.htmlImageCache).forEach(function (html) {\n                if (!self.htmlImageCache[html].complete) {\n                    loaded = false;\n                }\n            });\n            if (loaded) {\n                self.draw();\n            }\n        }\n        function drawHtml(cell) {\n            var img,\n                v = cell.innerHTML || cell.formattedValue,\n                x = cell.x + self.canvasOffsetLeft,\n                y = cell.y + self.canvasOffsetTop;\n            if (self.htmlImageCache[v]) {\n                img = self.htmlImageCache[v];\n                if (img.height !== cell.height || img.width !== cell.width) {\n                    // height and width of the cell has changed, invalidate cache\n                    self.htmlImageCache[v] = undefined;\n                } else {\n                    if (!img.complete) {\n                        return;\n                    }\n                    return self.ctx.drawImage(img, x, y);\n                }\n            }\n            img = new Image(cell.width, cell.height);\n            self.htmlImageCache[v] = img;\n            img.onload = function () {\n                self.ctx.drawImage(img, x, y);\n                drawOnAllImagesLoaded();\n            };\n            img.src = 'data:image/svg+xml;base64,' + btoa(\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + cell.width + '\" height=\"' + cell.height + '\">\\n' +\n                    '<foreignObject class=\"node\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\\n' +\n                    '<body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;padding:0;\">\\n' +\n                    v + '\\n' +\n                    '</body>' +\n                    '</foreignObject>\\n' +\n                    '</svg>\\n'\n            );\n        }\n        function drawOrderByArrow(x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.columnHeaderOrderByArrowColor;\n            self.ctx.strokeStyle = self.style.columnHeaderOrderByArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + self.style.columnHeaderOrderByArrowMarginLeft;\n            y = y + self.style.columnHeaderOrderByArrowMarginTop;\n            if (self.orderDirection === 'asc') {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + self.style.columnHeaderOrderByArrowWidth, y);\n                self.ctx.lineTo(x + (self.style.columnHeaderOrderByArrowWidth * 0.5), y + self.style.columnHeaderOrderByArrowHeight);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y + self.style.columnHeaderOrderByArrowHeight);\n                self.ctx.lineTo(x + self.style.columnHeaderOrderByArrowWidth, y + self.style.columnHeaderOrderByArrowHeight);\n                self.ctx.lineTo(x + (self.style.columnHeaderOrderByArrowWidth * 0.5), y);\n                self.ctx.lineTo(x, y + self.style.columnHeaderOrderByArrowHeight);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return self.style.columnHeaderOrderByArrowMarginLeft\n                + self.style.columnHeaderOrderByArrowWidth\n                + self.style.columnHeaderOrderByArrowMarginRight;\n        }\n        function drawTreeArrow(cell, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.treeArrowColor;\n            self.ctx.strokeStyle = self.style.treeArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + self.style.treeArrowMarginLeft;\n            y = y + self.style.treeArrowMarginTop;\n            if (self.openChildren[cell.data[self.uniqueId]]) {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + self.style.treeArrowWidth, y);\n                self.ctx.lineTo(x + (self.style.treeArrowWidth * 0.5), y + self.style.treeArrowHeight);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y);\n                self.ctx.lineTo(x + self.style.treeArrowHeight, y + (self.style.treeArrowWidth * 0.5));\n                self.ctx.lineTo(x, y + self.style.treeArrowWidth);\n                self.ctx.lineTo(x, y);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return self.style.treeArrowMarginLeft\n                + self.style.treeArrowWidth\n                + self.style.treeArrowMarginRight;\n        }\n        function radiusRect(x, y, w, h, radius) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            var r = x + w, b = y + h;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x + radius, y);\n            self.ctx.lineTo(r - radius, y);\n            self.ctx.quadraticCurveTo(r, y, r, y + radius);\n            self.ctx.lineTo(r, y + h - radius);\n            self.ctx.quadraticCurveTo(r, b, r - radius, b);\n            self.ctx.lineTo(x + radius, b);\n            self.ctx.quadraticCurveTo(x, b, x, b - radius);\n            self.ctx.lineTo(x, y + radius);\n            self.ctx.quadraticCurveTo(x, y, x + radius, y);\n        }\n        function fillRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillRect(x, y, w, h);\n        }\n        function strokeRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.strokeRect(x, y, w, h);\n        }\n        function fillText(text, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillText(text, x, y);\n        }\n        function addBorderLine(c, pos) {\n            self.ctx.beginPath();\n            var p = {\n                t: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                },\n                r: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                b: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                l: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                }\n            };\n            p[pos]();\n            self.ctx.stroke();\n        }\n        function addEllipsis(text, width) {\n            var c, w = 0;\n            if (self.ellipsisCache[text] && self.ellipsisCache[text][width]) {\n                return self.ellipsisCache[text][width];\n            }\n            //TODO Add ellipsis back when there is a fast way to do it\n            w = self.ctx.measureText(text).width;\n            self.ellipsisCache[text] = self.ellipsisCache[text] || {};\n            c = {value: text, width: w};\n            self.ellipsisCache[text][width] = c;\n            return c;\n        }\n        function drawText(cell) {\n            var paddingLeft = self.style[cell.style + 'PaddingLeft'],\n                paddingTop = self.style[cell.style + 'PaddingTop'],\n                paddingRight = self.style[cell.style + 'PaddingRight'],\n                paddingBottom = self.style[cell.style + 'PaddingBottom'],\n                vPos = paddingTop + cell.height - (cell.height * 0.5),\n                hPos = paddingLeft + cell.treeArrowWidth + cell.orderByArrowWidth;\n            cell.text = addEllipsis(cell.formattedValue, cell.width - paddingRight - paddingLeft);\n            cell.text.height = cell.fontHeight;\n            if (cell.horizontalAlignment === 'right') {\n                hPos = cell.width - cell.text.width - paddingRight;\n            } else if (cell.horizontalAlignment === 'center') {\n                hPos = (cell.width / 2) - (cell.text.width / 2);\n            }\n            if (cell.verticalAlignment === 'top') {\n                vPos = paddingTop + cell.text.height;\n            } else if (cell.verticalAlignment === 'bottom') {\n                vPos = cell.height - paddingBottom - cell.text.height;\n            }\n            cell.text.x = cell.x + hPos;\n            cell.text.y = cell.y + vPos;\n            fillText(cell.text.value, cell.text.x, cell.text.y);\n        }\n        /**\n         * Redraws the grid. No matter what the change, this is the only method required to refresh everything.\n         * @memberof canvasDatagrid\n         * @name draw\n         * @method\n         */\n        self.draw = function (internal) {\n            if (self.dispatchEvent('beforedraw', {})) { return; }\n            if (!self.isChildGrid && (!self.height || !self.width)) {\n                return;\n            }\n            if (self.isChildGrid && internal) {\n                requestAnimationFrame(self.parentGrid.draw);\n                return;\n            }\n            if (self.intf.visible === false) {\n                return;\n            }\n            // initial values\n            var checkScrollHeight, rowHeaderCell, p, cx, cy, treeGrid, rowOpen,\n                rowHeight, cornerCell, y, x, c, h, w, s, r, rd, aCell,\n                selectionBorders = [],\n                rowHeaders = [],\n                l = self.data.length,\n                u = self.currentCell || {},\n                rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth(),\n                cellHeight = self.style.cellHeight;\n            drawCount += 1;\n            p = performance.now();\n            // if data length has changed, there is no way to know\n            if (self.data.length > self.orders.rows.length) {\n                self.createRowOrders();\n            }\n            function drawScrollBars() {\n                var v = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-bar'\n                    },\n                    n = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-bar'\n                    },\n                    vb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-box'\n                    },\n                    nb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-box'\n                    },\n                    co = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        isCorner: true,\n                        isScrollBoxCorner: true,\n                        style: 'scroll-box-corner'\n                    },\n                    m = (self.style.scrollBarBoxMargin * 2),\n                    d = self.style.scrollBarBoxMargin * 0.5;\n                self.ctx.strokeStyle = self.style.scrollBarBorderColor;\n                self.ctx.lineWidth = self.style.scrollBarBorderWidth;\n                // vertical\n                v.x += w - self.style.scrollBarWidth - self.style.scrollBarBorderWidth - d;\n                v.y += rowHeaderCellHeight;\n                v.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                v.height = h - rowHeaderCellHeight - self.style.scrollBarWidth - d - m;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(v.x, v.y, v.width, v.height + m);\n                strokeRect(v.x, v.y, v.width, v.height + m);\n                // vertical box\n                vb.x = v.x + self.style.scrollBarBoxMargin;\n                vb.y = rowHeaderCellHeight + self.style.scrollBarBoxMargin\n                    + ((v.height - self.scrollBox.scrollBoxHeight)\n                        * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight));\n                vb.width = self.style.scrollBarBoxWidth;\n                vb.height = self.scrollBox.scrollBoxHeight;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/vertical/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (vb.height < v.height) {\n                    radiusRect(vb.x, vb.y, vb.width, vb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                // horizontal\n                n.x += columnHeaderCellWidth;\n                n.y += h - self.style.scrollBarWidth - d;\n                n.width = w - self.style.scrollBarWidth - columnHeaderCellWidth - d - m;\n                n.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(n.x, n.y, n.width + m, n.height);\n                strokeRect(n.x, n.y, n.width + m, n.height);\n                // horizontal box\n                nb.y = n.y + self.style.scrollBarBoxMargin;\n                nb.x = columnHeaderCellWidth + self.style.scrollBarBoxMargin\n                    + ((n.width - self.scrollBox.scrollBoxWidth)\n                        * (self.scrollBox.scrollLeft / self.scrollBox.scrollWidth));\n                nb.width = self.scrollBox.scrollBoxWidth;\n                nb.height = self.style.scrollBarBoxWidth;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/horizontal/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (nb.width < n.width) {\n                    radiusRect(nb.x, nb.y, nb.width, nb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                //corner\n                self.ctx.strokeStyle = self.style.scrollBarCornerBorderColor;\n                self.ctx.fillStyle = self.style.scrollBarCornerBackgroundColor;\n                co.x = n.x + n.width + m;\n                co.y = v.y + v.height + m;\n                co.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                co.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                radiusRect(co.x, co.y, co.width, co.height, 0);\n                self.ctx.stroke();\n                self.ctx.fill();\n                self.visibleCells.unshift(v);\n                self.visibleCells.unshift(vb);\n                self.visibleCells.unshift(n);\n                self.visibleCells.unshift(nb);\n                self.visibleCells.unshift(co);\n                self.scrollBox.bar = {\n                    v: v,\n                    h: n\n                };\n                self.scrollBox.box = {\n                    v: vb,\n                    h: nb\n                };\n            }\n            function drawCell(d, rowIndex, rowOrderIndex) {\n                return function drawEach(header, headerIndex, columnOrderIndex) {\n                    var cellStyle = header.style || 'cell',\n                        cellGridAttributes,\n                        cell,\n                        isHeader = /HeaderCell/.test(cellStyle),\n                        isCorner = /cornerCell/.test(cellStyle),\n                        isRowHeader = 'rowHeaderCell' === cellStyle,\n                        isColumnHeader = 'columnHeaderCell' === cellStyle,\n                        selected = self.selections[rowOrderIndex] && self.selections[rowOrderIndex].indexOf(columnOrderIndex) !== -1,\n                        hovered = self.hovers[d[self.uniqueId]] && self.hovers[d[self.uniqueId]].indexOf(columnOrderIndex) !== -1,\n                        active = self.activeCell.rowIndex === rowOrderIndex && self.activeCell.columnIndex === columnOrderIndex,\n                        isGrid = typeof d[header.name] === 'object' && d[header.name] !== null && d[header.name] !== undefined,\n                        activeHeader = (self.orders.rows[self.activeCell.rowIndex] === rowOrderIndex\n                                || self.orders.columns[self.activeCell.columnIndex] === columnOrderIndex)\n                            && (columnOrderIndex === -1 || rowOrderIndex === -1)\n                            ? (isRowHeader ? 'activeRowHeaderCell' : 'activeColumnHeaderCell') : false,\n                        val,\n                        f = self.formatters[header.type || 'string'],\n                        orderByArrowSize = 0,\n                        treeArrowSize = 0,\n                        cellWidth = self.sizes.columns[isRowHeader ? 'cornerCell' : header[self.uniqueId]] || header.width,\n                        ev = {\n                            value: d[header.name],\n                            row: d,\n                            header: header\n                        };\n                    if (cellStyle === 'headerCellCap') {\n                        cellWidth = w - x;\n                    }\n                    // if no data or schema are defined, a width is provided to the stub column\n                    if (cellWidth === undefined) {\n                        cellWidth = self.style.columnWidth;\n                    }\n                    if (x + cellWidth + self.style.cellBorderWidth < 0) {\n                        x += cellWidth + self.style.cellBorderWidth;\n                    }\n                    if (active) {\n                        cellStyle = 'activeCell';\n                    }\n                    if (self.visibleRows.indexOf(rowIndex) === -1 && !isHeader) {\n                        self.visibleRows.push(rowIndex);\n                    }\n                    val = self.dispatchEvent('formatcellvalue', ev);\n                    cx = x;\n                    cy = y;\n                    if (cellStyle === 'cornerCell') {\n                        cx = 0;\n                        cy = 0;\n                    } else if (isRowHeader) {\n                        cx = 0;\n                    } else if (isHeader) {\n                        cy = 0;\n                    }\n                    cell = {\n                        type: isGrid ? 'canvas-datagrid-cell' : header.type,\n                        style: cellStyle,\n                        nodeType: 'canvas-datagrid-cell',\n                        x: cx,\n                        y: cy,\n                        horizontalAlignment: self.style[cellStyle + 'HorizontalAlignment'],\n                        verticalAlignment: self.style[cellStyle + 'VerticalAlignment'],\n                        offsetTop: self.canvasOffsetTop + cy,\n                        offsetLeft: self.canvasOffsetLeft + cx,\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        active: active || activeHeader,\n                        hovered: hovered,\n                        selected: selected,\n                        width: cellWidth,\n                        height: cellHeight,\n                        offsetWidth: cellWidth,\n                        offsetHeight: cellHeight,\n                        parentNode: self.intf.parentNode,\n                        offsetParent: self.intf.parentNode,\n                        data: d,\n                        isCorner: isCorner,\n                        isHeader: isHeader,\n                        isColumnHeader: isColumnHeader,\n                        isHeaderCellCap: !!header.isHeaderCellCap,\n                        isRowHeader: isRowHeader,\n                        rowOpen: rowOpen,\n                        header: header,\n                        columnIndex: columnOrderIndex,\n                        rowIndex: rowOrderIndex,\n                        sortColumnIndex: headerIndex,\n                        sortRowIndex: rowIndex,\n                        isGrid: isGrid,\n                        gridId: (self.attributes.name || '') + d[self.uniqueId] + ':' + header[self.uniqueId],\n                        parentGrid: self.intf,\n                        innerHTML: '',\n                        activeHeader: activeHeader,\n                        value: isHeader && !isRowHeader ? (header.title || header.name) : d[header.name]\n                    };\n                    ev.cell = cell;\n                    cell.userHeight = cell.isHeader ? self.sizes.rows[-1] : rowHeight;\n                    cell.userWidth = cell.isHeader ? self.sizes.columns.cornerCell : self.sizes.columns[header[self.uniqueId]];\n                    cell[self.uniqueId] = d[self.uniqueId];\n                    self.visibleCells.unshift(cell);\n                    if (self.dispatchEvent('beforerendercell', ev)) { return; }\n                    self.ctx.fillStyle = self.style[cellStyle + 'BackgroundColor'];\n                    self.ctx.strokeStyle = self.style[cellStyle + 'BorderColor'];\n                    self.ctx.lineWidth = self.style[cellStyle + 'BorderWidth'];\n                    if (hovered) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'HoverBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'HoverBorderColor'];\n                    }\n                    if (selected) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'SelectedBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'SelectedBorderColor'];\n                    }\n                    if (activeHeader) {\n                        self.ctx.fillStyle = self.style[activeHeader + 'BackgroundColor'];\n                    }\n                    self.dispatchEvent('rendercell', ev);\n                    if (cell.isGrid) {\n                        if (cell.height !== rowHeight) {\n                            cell.height = rowHeight || self.style.cellHeightWithChildGrid;\n                            checkScrollHeight = true;\n                        }\n                        cell.width = self.sizes.columns[header[self.uniqueId]] || self.style.cellWidthWithChildGrid;\n                    }\n                    if (rowOpen && !cell.isRowHeader) {\n                        cell.height = self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight;\n                    }\n                    if (!cell.isGrid) {\n                        fillRect(cx, cy, cell.width, cell.height);\n                        strokeRect(cx, cy, cell.width, cell.height);\n                    }\n                    self.ctx.save();\n                    radiusRect(cell.x, cell.y, cell.width, cell.height, 0);\n                    self.ctx.clip();\n                    self.dispatchEvent('afterrendercell', ev);\n                    if (cell.height !== cellHeight && !(rowOpen && !cell.isRowHeader)) {\n                        self.sizes.rows[isHeader ? -1 : d[self.uniqueId]] = cell.height;\n                        checkScrollHeight = true;\n                    }\n                    if (cell.width !== cellWidth) {\n                        self.sizes.columns[header[self.uniqueId]] = cell.width;\n                        checkScrollHeight = true;\n                    }\n                    if (isRowHeader && self.attributes.tree) {\n                        if (!self.dispatchEvent('rendertreearrow', ev)) {\n                            treeArrowSize = drawTreeArrow(cell, self.style[cellStyle + 'PaddingLeft'], cy, 0);\n                        }\n                    }\n                    if ((self.attributes.showRowNumbers && isRowHeader)\n                            || !isRowHeader) {\n                        if (cell.isGrid && !self.dispatchEvent('beforerendercellgrid', ev)) {\n                            if (!self.childGrids[cell.gridId]) {\n                                cellGridAttributes = self.args.cellGridAttributes || self.args;\n                                cellGridAttributes.name = self.attributes.saveAppearance ? cell.gridId : undefined;\n                                cellGridAttributes.parentNode = cell;\n                                cellGridAttributes.data = d[header.name];\n                                ev.cellGridAttributes = cellGridAttributes;\n                                if (self.dispatchEvent('beforecreatecellgrid', ev)) { return; }\n                                self.childGrids[cell.gridId] = self.createGrid(cellGridAttributes);\n                                self.sizes.rows[rd[self.uniqueId]]\n                                    = self.sizes.rows[rd[self.uniqueId]] || self.style.cellGridHeight;\n                                checkScrollHeight = true;\n                            }\n                            cell.grid = self.childGrids[cell.gridId];\n                            cell.grid.parentNode = cell;\n                            cell.grid.visible = true;\n                            cell.grid.draw();\n                            self.dispatchEvent('rendercellgrid', ev);\n                        } else if (!cell.isGrid) {\n                            if (self.childGrids[cell.gridId]) {\n                                self.childGrids[cell.gridId].parentNode.offsetHeight = 0;\n                            }\n                            if (isHeader && self.orderBy === header.name) {\n                                if (!self.dispatchEvent('renderorderbyarrow', ev)) {\n                                    orderByArrowSize = drawOrderByArrow(cx + self.style[cellStyle + 'PaddingLeft'], 0);\n                                }\n                            }\n                            self.ctx.fillStyle = self.style[cellStyle + 'Color'];\n                            if (hovered) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'HoverColor'];\n                            }\n                            if (selected) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'SelectedColor'];\n                            }\n                            if (activeHeader) {\n                                self.ctx.fillStyle = self.style[activeHeader + 'Color'];\n                            }\n                            self.ctx.font = self.style[cellStyle + 'Font'];\n                            cell.fontHeight = self.style[cellStyle + 'FontHeight'];\n                            cell.treeArrowWidth = treeArrowSize;\n                            cell.orderByArrowWidth = orderByArrowSize;\n                            val = val !== undefined ? val : f\n                                ? f(ev) : '';\n                            if (val === undefined && !f) {\n                                val = '';\n                                console.warn('canvas-datagrid: Unknown format '\n                                    + header.type + ' add a cellFormater');\n                            }\n                            cell.formattedValue = ((val !== undefined && val !== null) ? val : '').toString();\n                            if (self.columnFilters && self.columnFilters[val] !== undefined && isHeader) {\n                                cell.formattedValue = self.attributes.filterTextPrefix + val;\n                            }\n                            if (!self.dispatchEvent('rendertext', ev)) {\n                                if (cell.innerHTML || header.type === 'html') {\n                                    drawHtml(cell);\n                                } else {\n                                    drawText(cell);\n                                }\n                            }\n                        }\n                    }\n                    if (active) {\n                        aCell = cell;\n                    }\n                    if (selected && !isRowHeader) {\n                        if ((!self.selections[cell.rowIndex - 1]\n                                || self.selections[cell.rowIndex - 1].indexOf(cell.columnIndex) === -1\n                                || cell.rowIndex === 0)\n                                && !cell.isHeader) {\n                            selectionBorders.push([cell, 't']);\n                        }\n                        if (!self.selections[cell.rowIndex + 1]\n                                || self.selections[cell.rowIndex + 1].indexOf(cell.columnIndex) === -1) {\n                            selectionBorders.push([cell, 'b']);\n                        }\n                        if (!self.selections[cell.rowIndex] || cell.columnIndex === 0\n                                || self.selections[cell.rowIndex].indexOf(cell.columnIndex - 1) === -1) {\n                            selectionBorders.push([cell, 'l']);\n                        }\n                        if (!self.selections[cell.rowIndex] || cell.columnIndex === s.length\n                                || self.selections[cell.rowIndex].indexOf(cell.columnIndex + 1) === -1) {\n                            selectionBorders.push([cell, 'r']);\n                        }\n                    }\n                    self.ctx.restore();\n                    x += cell.width + self.style.cellBorderWidth;\n                    return cell.width;\n                };\n            }\n            function drawRowHeader(rowData, index, rowOrderIndex) {\n                var a;\n                if (self.attributes.showRowHeaders) {\n                    x = 0;\n                    rowHeaderCell = {'rowHeaderCell': index + 1 };\n                    rowHeaderCell[self.uniqueId] = rowData[self.uniqueId];\n                    a = {\n                        name: 'rowHeaderCell',\n                        width: self.style.rowHeaderCellWidth,\n                        style: 'rowHeaderCell',\n                        type: 'string',\n                        data: rowData[self.uniqueId],\n                        index: -1\n                    };\n                    a[self.uniqueId] = rowData[self.uniqueId];\n                    rowOpen = self.openChildren[rowData[self.uniqueId]];\n                    drawCell(rowHeaderCell, index, rowOrderIndex)(a, -1, -1);\n                }\n            }\n            function drawHeaders() {\n                var d, g = s.length, i, o, columnHeaderCell, header;\n                rowHeaders.forEach(function (rArgs) {\n                    y = rArgs[3];\n                    cellHeight = rArgs[4];\n                    drawRowHeader(rArgs[0], rArgs[1], rArgs[2]);\n                });\n                if (self.attributes.showColumnHeaders) {\n                    x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft;\n                    if (self.attributes.showRowHeaders) {\n                        x += columnHeaderCellWidth;\n                    }\n                    y = 0;\n                    // cell height might have changed during drawing\n                    cellHeight = self.getRowHeaderCellHeight();\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        header = s[i];\n                        d = {\n                            title: header.title,\n                            name: header.name,\n                            width: header.width,\n                            style: 'columnHeaderCell',\n                            type: 'string',\n                            index: o,\n                            order: i\n                        };\n                        columnHeaderCell = {'columnHeaderCell': header.title || header.name};\n                        columnHeaderCell[self.uniqueId] = 'h' + header[self.uniqueId];\n                        d[self.uniqueId] = header[self.uniqueId];\n                        x += drawCell(columnHeaderCell, -1, -1)(d, o, i);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    // fill in the space right of the headers\n                    if (x < w) {\n                        c = {\n                            name: '',\n                            width: self.style.scrollBarWidth,\n                            style: 'headerCellCap',\n                            isHeaderCell: true,\n                            isHeaderCellCap: true,\n                            type: 'string',\n                            index: s.length\n                        };\n                        c[self.uniqueId] = 'columnHeaderCell';\n                        drawCell({endCap: ''}, -1, -1)(c, -1, -1);\n                    }\n                    // fill in the space right of the headers\n                    if (self.attributes.showRowHeaders) {\n                        cornerCell = {'cornerCell': '' };\n                        cornerCell[self.uniqueId] = 'cornerCell';\n                        x = 0;\n                        c = {\n                            name: 'cornerCell',\n                            width: self.style.rowHeaderCellWidth,\n                            style: 'cornerCell',\n                            type: 'string',\n                            index: -1\n                        };\n                        c[self.uniqueId] = 'cornerCell';\n                        drawCell(cornerCell, -1, -1)(c, -1, -1);\n                    }\n                }\n            }\n            function drawRow(r, d) {\n                var i, treeHeight, rowSansTreeHeight, o, g = s.length;\n                if (y - (cellHeight * 2) > h) {\n                    return false;\n                }\n                rd = self.data[r];\n                rowOpen = self.openChildren[rd[self.uniqueId]];\n                rowSansTreeHeight = self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight;\n                treeHeight = (rowOpen ? self.sizes.trees[rd[self.uniqueId]] : 0);\n                rowHeight = rowSansTreeHeight + treeHeight;\n                if (y < rowHeight * -1) {\n                    return false;\n                }\n                if (self.attributes.showRowHeaders) {\n                    x += columnHeaderCellWidth;\n                }\n                cellHeight = rowHeight;\n                for (o = self.scrollIndexLeft; o < g; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        self.scrollIndexRight = o;\n                        self.scrollPixelRight = x;\n                        break;\n                    }\n                }\n                // cell height might have changed during drawing\n                cellHeight = rowHeight;\n                x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft + self.style.cellBorderWidth;\n                // don't draw a tree for the new row\n                treeGrid = self.childGrids[rd[self.uniqueId]];\n                if (r !== self.data.length && rowOpen) {\n                    treeGrid.visible = true;\n                    treeGrid.parentNode = {\n                        offsetTop: y + rowSansTreeHeight + self.canvasOffsetTop,\n                        offsetLeft: columnHeaderCellWidth - 1 + self.canvasOffsetLeft,\n                        offsetHeight: treeHeight,\n                        offsetWidth: self.width - columnHeaderCellWidth - self.style.scrollBarWidth - 1,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: self.style,\n                        nodeType: 'canvas-datagrid-tree',\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        rowIndex: r\n                    };\n                    self.visibleCells.unshift({\n                        rowIndex: x,\n                        columnIndex: 0,\n                        y: treeGrid.parentNode.offsetTop,\n                        x: treeGrid.parentNode.offsetLeft,\n                        height: treeGrid.parentNode.offsetHeight,\n                        width: treeGrid.parentNode.offsetWidth,\n                        style: 'tree-grid',\n                        type: treeGrid.parentNode.nodeType\n                    });\n                    treeGrid.draw();\n                } else if (treeGrid) {\n                    treeGrid.parentNode.offsetHeight = 0;\n                    delete self.sizes.trees[rd[self.uniqueId]];\n                }\n                rowHeaders.push([rd, r, d, y, rowHeight]);\n                y += cellHeight + self.style.cellBorderWidth;\n                return true;\n            }\n            function initDraw() {\n                self.visibleRows = [];\n                s = self.getVisibleSchema();\n                self.visibleCells = [];\n                self.canvasOffsetTop = self.isChildGrid ? self.parentNode.offsetTop : 0;\n                self.canvasOffsetLeft = self.isChildGrid ? self.parentNode.offsetLeft : 0;\n                h = self.height;\n                w = self.width;\n                if (!self.isChildGrid) {\n                    self.ctx.scale(window.devicePixelRatio, window.devicePixelRatio);\n                }\n            }\n            function drawBackground() {\n                radiusRect(0, 0, w, h, 0);\n                self.ctx.clip();\n                self.ctx.fillStyle = self.style.backgroundColor;\n                fillRect(0, 0, w, h);\n            }\n            function drawRows() {\n                var o, n, i, g = s.length;\n                x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft + self.style.cellBorderWidth;\n                y = (self.scrollBox.scrollTop * -1) + rowHeaderCellHeight + self.scrollPixelTop + self.style.cellBorderWidth;\n                for (r = self.scrollIndexTop; r < l; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        self.scrollIndexBottom = r;\n                        self.scrollPixelBottom = y;\n                        break;\n                    }\n                }\n                if (self.attributes.showNewRow) {\n                    if (self.attributes.showRowHeaders) {\n                        x += columnHeaderCellWidth;\n                    }\n                    rowHeight = cellHeight = self.style.cellHeight;\n                    rowOpen = false;\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        x += drawCell(self.newRow, self.data.length, self.data.length)(s[i], i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    rowHeaders.push([self.newRow, self.data.length, self.data.length, y, rowHeight]);\n                }\n            }\n            function drawReorderMarkers() {\n                if (!self.reorderObject) { return; }\n                var b = {\n                        height: self.reorderObject.height,\n                        width: self.reorderObject.width,\n                        x: self.reorderObject.x + self.reorderObject.dragOffset.x,\n                        y: self.reorderObject.y + self.reorderObject.dragOffset.y\n                    },\n                    m = {\n                        width: w,\n                        heigth: h,\n                        x: 0,\n                        y: 0\n                    };\n                self.ctx.fillStyle = self.style.reorderMarkerBackgroundColor;\n                self.ctx.lineWidth = self.style.reorderMarkerBorderWidth;\n                self.ctx.strokeStyle = self.style.reorderMarkerBorderColor;\n                if (self.dragMode === 'row-reorder') {\n                    b.width = w;\n                    b.x = 0;\n                    m.width = w;\n                    m.y = self.currentCell.y;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.rowIndex !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex - 1 !== self.reorderObject.rowIndex) {\n                        addBorderLine(m, 't');\n                    }\n                } else if (self.dragMode === 'column-reorder' && self.reorderObject) {\n                    b.height = h;\n                    b.y = 0;\n                    m.height = h;\n                    m.x = self.currentCell.x;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.columnIndex !== self.reorderObject.columnIndex\n                            && self.currentCell.columnIndex - 1 !== self.reorderObject.columnIndex) {\n                        addBorderLine(m, 'l');\n                    }\n                }\n            }\n            function drawBorder() {\n                self.ctx.lineWidth = self.style.gridBorderWidth;\n                self.ctx.strokeStyle = self.style.gridBorderColor;\n                strokeRect(0, 0, self.width, self.height);\n            }\n            function drawSelectionBorders() {\n                self.ctx.lineWidth = self.style.selectionOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.selectionOverlayBorderColor;\n                selectionBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n            }\n            function drawActiveCell() {\n                if (!aCell) { return; }\n                if (self.attributes.selectionMode === 'row') {\n                    if (self.activeCell && self.activeCell.rowIndex === aCell.rowIndex) {\n                        self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                        self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                        strokeRect(0, aCell.y, self.getHeaderWidth() + columnHeaderCellWidth, rowHeight);\n                    }\n                } else {\n                    self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                    self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                    strokeRect(aCell.x, aCell.y, aCell.width, aCell.height);\n                }\n            }\n            function drawDebug() {\n                perfCounters[drawCount % perfWindowSize] = performance.now() - p;\n                var d;\n                if (self.attributes.debug) {\n                    self.ctx.font = '11px sans-serif';\n                    d = {};\n                    d.perf = (perfCounters.reduce(function (a, b) {\n                        return a + b;\n                    }, 0) / perfCounters.length).toFixed(1)\n                        + 'ms (' +\n                        perfCounters.map(function (a) { return a.toFixed(1); }).join(', ') + ')';\n                    d.htmlImages = Object.keys(self.htmlImageCache).length;\n                    d.scrollBox = self.scrollBox.toString();\n                    d.scrollIndex = '{\"top\": ' + self.scrollIndexTop + ', \"left\": ' + self.scrollIndexLeft + '}';\n                    d.scrollPixel = '{\"top\": ' + self.scrollPixelTop + ', \"left\": ' + self.scrollPixelLeft + '}';\n                    d.canvasOffset = '{\"top\": ' + self.canvasOffsetTop + ', \"left\": ' + self.canvasOffsetLeft + '}';\n                    d.pointerLockPosition =  self.pointerLockPosition ?\n                            self.pointerLockPosition.x + ', ' + self.pointerLockPosition.y : '';\n                    d.size = '{\"width\": ' + self.width + ', \"height\": ' + self.height + '}';\n                    d.mouse = '{\"x\": ' + self.mouse.x + ', \"y\": ' + self.mouse.y + '}';\n                    d.touch = !self.touchStart\n                        ? '' : '{\"x\": ' + self.touchStart.x + ', \"y\": ' + self.touchStart.y + \"}\";\n                    d.entities = self.visibleCells.length;\n                    d.hasFocus = self.hasFocus;\n                    d.dragMode = self.dragMode;\n                    if (self.currentCell) {\n                        d.columnIndex = self.currentCell.columnIndex;\n                        d.rowIndex = self.currentCell.rowIndex;\n                        d.sortColumnIndex = self.currentCell.sortColumnIndex;\n                        d.sortRowIndex = self.currentCell.sortRowIndex;\n                        d.context = self.currentCell.context;\n                        d.dragContext = self.currentCell.dragContext;\n                        d.style = self.currentCell.style;\n                        d.type = self.currentCell.type;\n                    }\n                    self.ctx.save();\n                    Object.keys(d).forEach(function (key, index) {\n                        var m = key + ': ' + d[key],\n                            lh = 14;\n                        self.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n                        fillRect(columnHeaderCellWidth, lh + (index * lh), 800, lh);\n                        self.ctx.fillStyle = 'rgba(0, 0, 0, 1)';\n                        fillText(m, columnHeaderCellWidth + 1, rowHeaderCellHeight + (index * lh));\n                    });\n                    self.ctx.restore();\n                }\n            }\n            self.ctx.save();\n            initDraw();\n            drawBackground();\n            drawRows();\n            drawSelectionBorders();\n            drawActiveCell();\n            drawHeaders();\n            drawReorderMarkers();\n            drawScrollBars();\n            if (checkScrollHeight) {\n                self.resize(true);\n            }\n            drawBorder();\n            drawDebug();\n            if (self.dispatchEvent('afterdraw', {})) { return; }\n            self.ctx.restore();\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/draw.js\n// module id = 3\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var touchDelta = {x: 0, y: 0, scrollTop: 0, scrollLeft: 0},\n            touchAnimateTo = {scrollLeft: 0, scrollTop: 0},\n            touchSigma = {scrollLeft: 0, scrollTop: 0},\n            xPPS = 0,\n            yPPS = 0,\n            touchingCell = false,\n            startingCell = false,\n            wheeling,\n            animationFrames = 0;\n        function calculateCssSize(sizeString, parentSize) {\n            var p;\n            if (sizeString === 'auto' || sizeString === '') { return parentSize; }\n            if (/%/.test(sizeString)) {\n                p = parseFloat(sizeString, 10);\n                return parentSize * (p * 0.01);\n            }\n            return parseFloat(sizeString, 10);\n        }\n        self.getTouchPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.touches[0].clientX - rect.left,\n                    y: e.touches[0].clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        self.calculatePPS = function () {\n            xPPS = ((touchDelta.scrollLeft - touchSigma.scrollLeft) / (touchDelta.t - touchSigma.t));\n            yPPS = ((touchDelta.scrollTop - touchSigma.scrollTop) / (touchDelta.t - touchSigma.t));\n            touchSigma = {\n                scrollLeft: touchDelta.scrollLeft,\n                scrollTop: touchDelta.scrollTop,\n                t: performance.now() / 10\n            };\n        };\n        self.touchCell = function (e) {\n            return function () {\n                clearInterval(self.touchCalcTimeout);\n                var pos = self.getTouchPos(e);\n                if (Math.abs(touchDelta.x) + Math.abs(touchDelta.y) < self.attributes.touchDeadZone) {\n                    touchingCell = self.getCellAt(pos.x, pos.y);\n                    self.mousemove(e, pos);\n                    self.mousedown(e, pos);\n                    self.mousemove(e, pos);\n                    self.draw();\n                }\n            };\n        };\n        self.touchstart = function (e) {\n            touchingCell = false;\n            self.touchStart = self.getTouchPos(e);\n            startingCell = self.getCellAt(self.touchStart.x, self.touchStart.y, true);\n            if (self.dispatchEvent('touchstart', {NativeEvent: e, cell: self.startingCell})) { return; }\n            self.stopPropagation(e);\n            e.preventDefault();\n            self.touchScrollStart = {\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: performance.now() / 1000\n            };\n            touchDelta = {\n                x: self.touchStart.x,\n                y: self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: 0\n            };\n            self.touchmove(e);\n            clearTimeout(self.touchTimeout);\n            clearInterval(self.touchCalcTimeout);\n            self.touchTimeout = setTimeout(self.touchCell(e), self.attributes.touchSelectTimeMs);\n            self.touchCalcTimeout = setInterval(self.calculatePPS, 10);\n            self.touchHaltAnimation = true;\n            document.body.addEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.addEventListener('touchend', self.touchend, false);\n            document.body.addEventListener('touchcancel', self.touchcancel, false);\n        };\n        self.easing = function (t, b, c, d) {\n            return c * (t / d) * (2 - t) + b;\n        };\n        self.touchEndAnimation = function () {\n            if (!self.canvas || !self.scrollBox.scrollTo) { return requestAnimationFrame(self.touchEndAnimation); }\n            var x,\n                y,\n                n = performance.now() / 1000,\n                d = (self.attributes.touchReleaseAnimationDurationMs / 1000),\n                t;\n            touchDelta.t = touchDelta.t || n + d;\n            t = n - touchDelta.t + 1;\n            if (t > 1 || self.touchHaltAnimation || (animationFrames > 1000)) {\n                animationFrames = 0;\n                self.touchHaltAnimation = false;\n                touchAnimateTo = {scrollLeft: -1, scrollTop: -1};\n                return;\n            }\n            animationFrames += 1;\n            x = self.easing(t, touchDelta.scrollLeft, -touchAnimateTo.scrollLeft, d);\n            y = self.easing(t, touchDelta.scrollTop, -touchAnimateTo.scrollTop, d);\n            self.scrollBox.scrollTo(x, y);\n            requestAnimationFrame(self.touchEndAnimation);\n        };\n        self.touchend = function (e) {\n            if (self.dispatchEvent('touchend', {NativeEvent: e})) { return; }\n            var dz = Math.abs(touchDelta.x) + Math.abs(touchDelta.y) < self.attributes.touchDeadZone,\n                pos = {\n                    x: self.touchStart.x + touchDelta.x,\n                    y: self.touchStart.y + touchDelta.y\n                },\n                cell = self.getCellAt(pos.x, pos.y);\n            if (!self.hasFocus) { return; }\n            if (touchingCell) {\n                self.mouseup(e, self.touchStart);\n            } else if (dz) {\n                if (cell.active) {\n                    self.beginEditAt(cell.columnIndex, cell.rowIndex);\n                } else {\n                    self.mousedown(e, self.touchStart);\n                    self.mouseup(e, self.touchStart);\n                    self.click(e, self.touchStart);\n                }\n            }\n            touchingCell = false;\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n            clearTimeout(self.touchTimeout);\n            clearInterval(self.touchCalcTimeout);\n            self.calculatePPS();\n            touchAnimateTo.scrollLeft = xPPS * self.attributes.touchReleaseAcceleration;\n            touchAnimateTo.scrollTop = yPPS * self.attributes.touchReleaseAcceleration;\n            self.touchHaltAnimation = false;\n            if (animationFrames === 0 && !/-scroll-/.test(startingCell.style) && !dz) {\n                self.touchEndAnimation();\n            }\n        };\n        self.touchmove = function (e) {\n            var d = self.getTouchPos(e);\n            if (self.dispatchEvent('touchmove', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (!self.hasFocus) { return; }\n            touchDelta = {\n                x: d.x - self.touchStart.x,\n                y: d.y - self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: 0\n            };\n            if (/vertical-scroll-/.test(startingCell.style)) {\n                self.scrollBox.scrollTop = self.scrollBox.scrollHeight * (d.y / self.height);\n            } else if (/horizontal-scroll-/.test(startingCell.style)) {\n                self.scrollBox.scrollLeft = self.scrollBox.scrollWidth * (d.x / self.width);\n            } else if (touchingCell) {\n                self.mousemove(e, d);\n                self.draw();\n            } else {\n                if (animationFrames === 0) {\n                    self.scrollBox.scrollTo(self.touchScrollStart.scrollLeft - touchDelta.x,\n                        self.touchScrollStart.scrollTop - touchDelta.y);\n                }\n            }\n        };\n        self.touchcancel = function (e) {\n            if (self.dispatchEvent('touchcancel', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) { return; }\n            self.touchend(e);\n            touchingCell = false;\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n            return;\n        };\n        self.stopPropagation = function (e) { e.stopPropagation(); };\n        self.addEventListener = function (ev, fn) {\n            self.events[ev] = self.events[ev] || [];\n            self.events[ev].unshift(fn);\n        };\n        self.removeEventListener = function (ev, fn) {\n            (self.events[ev] || []).forEach(function removeEachListener(sfn, idx) {\n                if (fn === sfn) {\n                    self.events[ev].splice(idx, 1);\n                }\n            });\n        };\n        self.dispatchEvent = function (ev, e) {\n            var defaultPrevented;\n            function preventDefault() {\n                defaultPrevented = true;\n            }\n            if (!self.events[ev]) { return; }\n            self.events[ev].forEach(function dispatchEachEvent(fn) {\n                e.ctx = self.ctx;\n                e.preventDefault = preventDefault;\n                fn.apply(self.intf, [e]);\n            });\n            return defaultPrevented;\n        };\n        self.resizeDomElement = function () {\n            if (!self.parentIsCanvas) {\n                if (self.shadowRootParentElement) {\n                    // shadow dom browsers\n                    self.width = calculateCssSize(self.style.width, self.shadowRootParentElement.offsetWidth);\n                    self.height = calculateCssSize(self.style.height, self.shadowRootParentElement.offsetHeight);\n                    // self.intf.style.width = self.height + 'px';\n                    // self.intf.style.height = self.height + 'px';\n                } else {\n                    // pre shadow dom browsers\n                    self.width = self.parentDOMNode.offsetWidth;\n                    self.height = self.parentDOMNode.offsetHeight;\n                }\n                self.canvas.style.width = self.width + 'px';\n                self.canvas.style.height = self.height + 'px';\n                self.canvas.width = self.width * window.devicePixelRatio;\n                self.canvas.height = self.height * window.devicePixelRatio;\n            }\n            self.canvasOffsetLeft = self.args.canvasOffsetLeft || 0;\n            self.canvasOffsetTop = self.args.canvasOffsetTop || 0;\n        };\n        self.resize = function (drawAfterResize) {\n            var cellBorder = self.style.cellBorderWidth * 2,\n                columnHeaderCellBorder =  self.style.columnHeaderCellBorderWidth * 2,\n                scrollHeight,\n                scrollWidth,\n                rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth(),\n                // TODO: What the hell are these numbers!?  They are probably some value in the style.\n                scrollDragPositionOffsetY = 30,\n                scrollDragPositionOffsetX = 15;\n            if (self.isChildGrid) {\n                self.width = self.parentNode.offsetWidth;\n                self.height = self.parentNode.offsetHeight;\n            } else {\n                self.resizeDomElement();\n            }\n            scrollHeight = self.data.reduce(function reduceData(accumulator, row) {\n                return accumulator\n                    + (self.sizes.rows[row[self.uniqueId]] || self.style.cellHeight)\n                    + (self.sizes.trees[row[self.uniqueId]] || 0)\n                    + cellBorder;\n            }, 0) || 0;\n            scrollWidth = self.getVisibleSchema().reduce(function reduceSchema(accumulator, column) {\n                if (column.hidden) { return accumulator; }\n                return accumulator + (self.sizes.columns[column[self.uniqueId]] || column.width || self.style.columnWidth) + cellBorder;\n            }, 0) || 0;\n            if (self.attributes.showNewRow) {\n                scrollHeight += self.style.cellHeight + cellBorder;\n            }\n            self.scrollBox.width = self.width - columnHeaderCellWidth;\n            self.scrollBox.height = self.height - rowHeaderCellHeight - columnHeaderCellBorder;\n            self.scrollBox.top = rowHeaderCellHeight + columnHeaderCellBorder;\n            self.scrollBox.left = columnHeaderCellWidth;\n            self.scrollBox.scrollHeight = scrollHeight + self.style.scrollBarWidth - self.scrollBox.height;\n            self.scrollBox.scrollWidth = scrollWidth + self.style.scrollBarWidth - self.scrollBox.width;\n            self.scrollBox.widthBoxRatio = ((self.scrollBox.width - scrollDragPositionOffsetX)\n                / (self.scrollBox.scrollWidth + self.scrollBox.width - scrollDragPositionOffsetX));\n            self.scrollBox.scrollBoxWidth = self.scrollBox.width\n                * self.scrollBox.widthBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.heightBoxRatio = ((self.scrollBox.height - scrollDragPositionOffsetY)\n                / (self.scrollBox.scrollHeight + (self.scrollBox.height - scrollDragPositionOffsetY)));\n            self.scrollBox.scrollBoxHeight = self.scrollBox.height\n                * self.scrollBox.heightBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.scrollBoxWidth = Math.max(self.scrollBox.scrollBoxWidth, self.style.scrollBarBoxMinSize);\n            self.scrollBox.scrollBoxHeight = Math.max(self.scrollBox.scrollBoxHeight, self.style.scrollBarBoxMinSize);\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            self.resizeEditInput();\n            self.scroll(true);\n            if (drawAfterResize) {\n                self.draw(true);\n            }\n            self.dispatchEvent('resize', {});\n            return true;\n        };\n        self.scroll = function (e, dontDraw) {\n            var s = self.getVisibleSchema(),\n                cellBorder = self.style.cellBorderWidth * 2;\n            self.scrollIndexTop = 0;\n            self.scrollPixelTop = 0;\n            self.scrollIndexLeft = 0;\n            self.scrollPixelLeft = 0;\n            while (self.scrollPixelTop < self.scrollBox.scrollTop && self.scrollIndexTop < self.data.length) {\n                self.scrollPixelTop +=\n                    (self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || self.style.cellHeight)\n                    + (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0)\n                    + cellBorder;\n                self.scrollIndexTop += 1;\n            }\n            while (self.scrollPixelLeft < self.scrollBox.scrollLeft && self.scrollIndexLeft < s.length) {\n                self.scrollPixelLeft +=\n                    (self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width);\n                self.scrollIndexLeft += 1;\n            }\n            if (self.data.length > 0) {\n                self.scrollIndexLeft = Math.max(self.scrollIndexLeft - 1, 0);\n                self.scrollPixelLeft = Math.max(self.scrollPixelLeft\n                    - (self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width), 0);\n                self.scrollIndexTop = Math.max(self.scrollIndexTop - 1, 0);\n                self.scrollPixelTop = Math.max(self.scrollPixelTop\n                    - (self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || self.style.cellHeight)\n                    - (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0), 0);\n            }\n            self.ellipsisCache = {};\n            if (!dontDraw) {\n                self.draw(true);\n            }\n            //TODO: figure out why this has to be delayed for child grids\n            //BUG: wheeling event on 3rd level hierarchy fails to move input box\n            requestAnimationFrame(self.resizeEditInput);\n            self.dispatchEvent('scroll', {top: self.scrollBox.scrollTop, left: self.scrollBox.scrollLeft});\n        };\n        self.mousemove = function (e, overridePos) {\n            if (self.contextMenu || self.input) {\n                return;\n            }\n            self.mouse = overridePos || self.getLayerPos(e);\n            var ctrl = (e.controlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                i,\n                s = self.getSchema(),\n                dragBounds,\n                sBounds,\n                x = self.mouse.x,\n                y = self.mouse.y,\n                o = self.getCellAt(x, y),\n                delta,\n                ev = {NativeEvent: e, cell: o, x: x, y: y},\n                previousCell = self.currentCell;\n            clearTimeout(self.scrollTimer);\n            if (!self.isInGrid({x: x, y: y})) {\n                self.hasFocus = false;\n            }\n            if (self.dispatchEvent('mousemove', ev)) {\n                return;\n            }\n            if (o && self.currentCell && (self.currentCell.rowIndex !== o.rowIndex\n                    || self.currentCell.columnIndex !== o.columnIndex)) {\n                self.cellBoundaryCrossed = true;\n                ev.cell = previousCell;\n                self.dispatchEvent('cellmouseout', ev);\n                ev.cell = o;\n                self.dispatchEvent('cellmouseover', ev);\n            }\n            self.currentCell = o;\n            if (!self.hasFocus) {\n                return;\n            }\n            self.hovers = {};\n            if (!self.draggingItem\n                    && o\n                    && self.scrollModes.indexOf(o.context) === -1) {\n                self.dragItem = o;\n                self.dragMode = o.dragContext;\n                self.canvas.style.cursor = o.context;\n                if (o.context === 'cell' && o.data) {\n                    self.canvas.style.cursor = 'pointer';\n                    self.hovers[o.data[self.uniqueId]] = [o.columnIndex];\n                }\n                if ((self.selecting || self.reorderObject)\n                        && o.context === 'cell'\n                        && o.data) {\n                    sBounds = self.getSelectionBounds();\n                    delta = {\n                        x: Math.abs(self.dragStart.x - x),\n                        y: Math.abs(self.dragStart.y - y)\n                    };\n                    if (self.dragStartObject.columnIndex !== -1 && e.shiftKey) {\n                        self.dragStartObject = {\n                            rowIndex: self.activeCell.rowIndex,\n                            columnIndex: self.activeCell.columnIndex\n                        };\n                    }\n                    dragBounds = {\n                        top: Math.min(self.dragStartObject.rowIndex, o.rowIndex),\n                        left: Math.min(self.dragStartObject.columnIndex, o.columnIndex),\n                        bottom: Math.max(self.dragStartObject.rowIndex, o.rowIndex),\n                        right: Math.max(self.dragStartObject.columnIndex, o.columnIndex)\n                    };\n                    if (self.dragStartObject.columnIndex === -1) {\n                        dragBounds.left = -1;\n                        dragBounds.right = s.length - 1;\n                        dragBounds.top = Math.min(sBounds.top, o.rowIndex);\n                        dragBounds.bottom = Math.max(sBounds.bottom, o.rowIndex);\n                    }\n                    if (self.dragStartObject.rowIndex !== o.rowIndex\n                                || self.dragStartObject.columnIndex !== o.columnIndex) {\n                        self.ignoreNextClick = true;\n                    }\n                    if (self.cellBoundaryCrossed || (delta.x === 0 && delta.y === 0) || (self.attributes.selectionMode === 'row')) {\n                        if ((self.attributes.selectionMode === 'row') || self.dragStartObject.columnIndex === -1) {\n                            self.selectRow(o.rowIndex, ctrl, null, true);\n                        } else {\n                            if (!self.dragAddToSelection && o.rowIndex !== undefined) {\n                                if (self.selections[o.rowIndex] && self.selections[o.rowIndex].indexOf(o.columnIndex) !== -1) {\n                                    self.selections[o.rowIndex].splice(self.selections[o.rowIndex].indexOf(o.columnIndex), 1);\n                                }\n                            } else {\n                                self.selections[o.rowIndex] = self.selections[o.rowIndex] || [];\n                                if (self.selections[o.rowIndex].indexOf(o.columnIndex) === -1) {\n                                    self.selections[o.rowIndex].push(o.columnIndex);\n                                }\n                            }\n                        }\n                    }\n                    if ((!self.selectionBounds || (dragBounds.top !== self.selectionBounds.top\n                            || dragBounds.left !== self.selectionBounds.left\n                            || dragBounds.bottom !== self.selectionBounds.bottom\n                            || dragBounds.right !== self.selectionBounds.right)) && !ctrl) {\n                        self.selections = [];\n                        sBounds = dragBounds;\n                        if (self.attributes.selectionMode === 'row') {\n                            for (i = sBounds.top; i <= sBounds.bottom; i += 1) {\n                                self.selectRow(i, true, null, true);\n                            }\n                        } else {\n                            self.selectArea(sBounds, true);\n                        }\n                    }\n                    self.autoScrollZone(e, x, y, ctrl);\n                }\n            }\n            self.cellBoundaryCrossed = false;\n            self.draw(true);\n        };\n        self.click = function (e, overridePos) {\n            var i,\n                selectionChanged,\n                ctrl = (e.controlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                pos = overridePos || self.getLayerPos(e);\n            self.currentCell = self.getCellAt(pos.x, pos.y);\n            if (self.currentCell.grid !== undefined) {\n                return;\n            }\n            function checkSelectionChange() {\n                if (!selectionChanged) { return; }\n                self.dispatchEvent('selectionchanged', {\n                    selectedData: self.getSelectedData(),\n                    selections: self.selections,\n                    selectionBounds: self.selectionBounds\n                });\n            }\n            if (self.input) {\n                self.endEdit();\n            }\n            if (self.ignoreNextClick) {\n                self.ignoreNextClick = false;\n                return;\n            }\n            i = self.currentCell;\n            if (self.dispatchEvent('click', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'cell') {\n                if (self.currentCell.style === 'cornerCell') {\n                    self.order(self.uniqueId, 'asc', self.sorters.number);\n                    self.setFilter();\n                    checkSelectionChange();\n                    return;\n                }\n                if (self.currentCell.style === 'columnHeaderCell') {\n                    if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                        if (self.orderBy === i.header.name) {\n                            self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                        } else {\n                            self.orderDirection = 'asc';\n                        }\n                        self.order(i.header.name, self.orderDirection);\n                        checkSelectionChange();\n                        return;\n                    }\n                    if (self.attributes.columnHeaderClickBehavior === 'select') {\n                        self.selectColumn(i.header.index, ctrl, e.shiftKey, true);\n                        checkSelectionChange();\n                        self.draw();\n                        return;\n                    }\n                }\n                if (['rowHeaderCell', 'columnHeaderCell'].indexOf(self.currentCell.style) === -1 && !ctrl) {\n                    self.setActiveCell(i.columnIndex, i.rowIndex);\n                }\n                self.selections[i.rowIndex] = self.selections[i.rowIndex] || [];\n                if (((self.attributes.selectionMode === 'row') || self.currentCell.style === 'rowHeaderCell')) {\n                    if (self.currentCell.style === 'rowHeaderCell'\n                            && self.attributes.tree && pos.x > 0\n                            && pos.x - self.currentCell.x < self.style.treeArrowWidth\n                            + self.style.treeArrowMarginLeft\n                            + self.style.treeArrowMarginRight + self.style.treeArrowClickRadius\n                            && pos.y - self.currentCell.y < self.style.treeArrowHeight\n                            + self.style.treeArrowMarginTop + self.style.treeArrowClickRadius\n                            && pos.y > 0) {\n                        self.toggleTree(i.rowIndex);\n                        return;\n                    }\n                    selectionChanged = true;\n                    self.selectRow(i.rowIndex, ctrl, null, true);\n                }\n                if (e.shiftKey && !ctrl) {\n                    self.selectionBounds = self.getSelectionBounds();\n                    self.selectArea(undefined, false);\n                }\n            }\n            checkSelectionChange();\n            self.draw(true);\n        };\n        self.dragResizeColumn = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = self.resizingStartingWidth + pos.x - self.dragStart.x;\n            y = self.resizingStartingHeight + pos.y - self.dragStart.y;\n            if (x < self.style.minColumnWidth) {\n                x = self.style.minColumnWidth;\n            }\n            if (y < self.style.minRowHeight) {\n                y = self.style.minRowHeight;\n            }\n            if (self.dispatchEvent('resizecolumn', {x: x, y: y, draggingItem: self.draggingItem})) { return false; }\n            if (self.scrollBox.scrollLeft > self.scrollBox.scrollWidth - self.attributes.resizeScrollZone\n                    && self.dragMode === 'ew-resize') {\n                self.resize(true);\n                self.scrollBox.scrollLeft += x;\n            }\n            if (self.dragMode === 'ew-resize') {\n                self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] = x;\n                if (['rowHeaderCell', 'cornerCell'].indexOf(self.draggingItem.header.style) !== -1) {\n                    self.resize(true);\n                }\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.dragMode === 'ns-resize') {\n                if (self.draggingItem.rowOpen) {\n                    self.sizes.trees[self.draggingItem.data[self.uniqueId]] = y;\n                } else if (self.attributes.globalRowResize) {\n                    self.style.cellHeight = y;\n                } else {\n                    self.sizes.rows[self.draggingItem.data[self.uniqueId]] = y;\n                }\n                self.dispatchEvent('resizerow', {row: y});\n                self.resizeChildGrids();\n                return;\n            }\n            self.ellipsisCache = {};\n        };\n        self.stopDragResize = function () {\n            self.resize();\n            document.body.removeEventListener('mousemove', self.dragResizeColumn, false);\n            document.body.removeEventListener('mouseup', self.stopDragResize, false);\n            self.setStorageData();\n            self.draw(true);\n            self.ignoreNextClick = true;\n        };\n        self.scrollGrid = function (e) {\n            var pos = self.getLayerPos(e);\n            if (self.attributes.scrollPointerLock && self.pointerLockPosition\n                    && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                self.pointerLockPosition.x += e.movementX;\n                self.pointerLockPosition.y += e.movementY;\n                self.pointerLockPosition.x = Math.min(self.width - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.x));\n                self.pointerLockPosition.y = Math.min(self.height - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.y));\n                pos = self.pointerLockPosition;\n            }\n            self.scrollMode = self.getCellAt(pos.x, pos.y).context;\n            if (self.scrollMode === 'horizontal-scroll-box' && self.scrollStartMode !== 'horizontal-scroll-box') {\n                self.scrollStartMode = 'horizontal-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.left = self.scrollBox.scrollLeft;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box' && self.scrollStartMode !== 'vertical-scroll-box') {\n                self.scrollStartMode = 'vertical-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.top = self.scrollBox.scrollTop;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollStartMode === 'vertical-scroll-box'\n                    && self.scrollMode !== 'vertical-scroll-box') {\n                self.scrollMode = 'vertical-scroll-box';\n            }\n            if (self.scrollStartMode === 'horizontal-scroll-box'\n                    && self.scrollMode !== 'horizontal-scroll-box') {\n                self.scrollMode = 'horizontal-scroll-box';\n            }\n            clearTimeout(self.scrollTimer);\n            if (self.scrollModes.indexOf(self.scrollMode) === -1) {\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box') {\n                self.scrollBox.scrollTop = self.scrollStart.top + ((pos.y - self.dragStart.y)\n                    / self.scrollBox.heightBoxRatio);\n            } else if (self.scrollMode === 'vertical-scroll-top') {\n                self.scrollBox.scrollTop -= (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'vertical-scroll-bottom') {\n                self.scrollBox.scrollTop += (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n            if (self.scrollMode === 'horizontal-scroll-box') {\n                self.scrollBox.scrollLeft = self.scrollStart.left + ((pos.x - self.dragStart.x)\n                    / self.scrollBox.widthBoxRatio);\n            } else if (self.scrollMode === 'horizontal-scroll-right') {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'horizontal-scroll-left') {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.stopScrollGrid = function () {\n            clearTimeout(self.scrollTimer);\n            if (document.exitPointerLock) {\n                document.exitPointerLock();\n            }\n            document.body.removeEventListener('mousemove', self.scrollGrid, false);\n        };\n        self.dragReorder = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = pos.x - self.dragStart.x;\n            y = pos.y - self.dragStart.y;\n            if (!self.attributes.allowColumnReordering && self.dragMode === 'column-reorder') {\n                return;\n            }\n            if (!self.attributes.allowRowReordering && self.dragMode === 'row-reorder') {\n                return;\n            }\n            if (self.dispatchEvent('reordering', {\n                    NativeEvent: e,\n                    source: self.dragStartObject,\n                    target: self.currentCell,\n                    dragMode: self.dragMode\n                })) {\n                return;\n            }\n            if (Math.abs(x) > self.attributes.reorderDeadZone || Math.abs(y) > self.attributes.reorderDeadZone) {\n                self.reorderObject = self.dragStartObject;\n                self.reorderTarget = self.currentCell;\n                self.reorderObject.dragOffset = {\n                    x: x,\n                    y: y\n                };\n                self.autoScrollZone(e, pos.x, pos.x, false);\n            }\n        };\n        self.stopDragReorder = function (e) {\n            var cr = {\n                    'row-reorder': self.orders.rows,\n                    'column-reorder': self.orders.columns\n                },\n                i = {\n                    'row-reorder': 'rowIndex',\n                    'column-reorder': 'columnIndex'\n                }[self.dragMode];\n            document.body.removeEventListener('mousemove', self.dragReorder, false);\n            document.body.removeEventListener('mouseup', self.stopDragReorder, false);\n            if (self.reorderObject\n                    && self.reorderTarget) {\n                self.ignoreNextClick = true;\n                if (self.reorderObject[i] !== self.reorderTarget[i]\n                        && !self.dispatchEvent('reorder', {\n                            NativeEvent: e,\n                            source: self.reorderObject,\n                            target: self.reorderTarget,\n                            dragMode: self.dragMode\n                        })) {\n                    cr[self.dragMode].splice(cr[self.dragMode].indexOf(self.reorderObject[i]), 1);\n                    cr[self.dragMode].splice(cr[self.dragMode].indexOf(self.reorderTarget[i]), 0, self.reorderObject[i]);\n                    self.setStorageData();\n                }\n            }\n            self.reorderObject = undefined;\n            self.reorderTarget = undefined;\n            self.draw(true);\n        };\n        self.mousedown = function (e, overridePos) {\n            self.lastMouseDownTarget = e.target;\n            if (self.dispatchEvent('mousedown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (e.button === 2 || self.input) { return; }\n            var ctrl = (e.controlKey || e.metaKey);\n            self.dragStart = overridePos || self.getLayerPos(e);\n            self.scrollStart = {\n                left: self.scrollBox.scrollLeft,\n                top: self.scrollBox.scrollTop\n            };\n            self.dragStartObject = self.getCellAt(self.dragStart.x, self.dragStart.y);\n            self.dragAddToSelection = !self.dragStartObject.selected;\n            if (!ctrl && !e.shiftKey && !/(vertical|horizontal)-scroll-(bar|box)/\n                    .test(self.dragStartObject.context) && !self.currentCell.isColumnHeader) {\n                self.selections = [];\n            }\n            if (self.dragStartObject.isGrid) {\n                return;\n            }\n            if (self.scrollModes.indexOf(self.dragStartObject.context) !== -1) {\n                self.scrollMode = self.dragStartObject.context;\n                self.scrollStartMode = self.dragStartObject.context;\n                self.scrollGrid(e);\n                if (self.attributes.scrollPointerLock\n                        && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                    self.pointerLockPosition = {\n                        x: self.dragStart.x,\n                        y: self.dragStart.y\n                    };\n                    self.canvas.requestPointerLock();\n                }\n                document.body.addEventListener('mousemove', self.scrollGrid, false);\n                document.body.addEventListener('mouseup', self.stopScrollGrid, false);\n                self.ignoreNextClick = true;\n                return;\n            }\n            if (self.dragMode === 'cell') {\n                self.selecting = true;\n                if (self.attributes.selectionMode === 'row') {\n                    self.selectRow(self.dragStartObject.rowIndex, ctrl, null, true);\n                }\n                return self.mousemove(e);\n            }\n            if (['ns-resize', 'ew-resize'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragItem;\n                if (self.draggingItem.rowOpen) {\n                    self.resizingStartingHeight = self.sizes.trees[self.draggingItem.data[self.uniqueId]];\n                } else {\n                    self.resizingStartingHeight = self.sizes.rows[self.draggingItem.data[self.uniqueId]] || self.style.cellHeight;\n                }\n                self.resizingStartingWidth = self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] || self.draggingItem.width;\n                document.body.addEventListener('mousemove', self.dragResizeColumn, false);\n                document.body.addEventListener('mouseup', self.stopDragResize, false);\n            }\n            if (['row-reorder', 'column-reorder'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragItem;\n                document.body.addEventListener('mousemove', self.dragReorder, false);\n                document.body.addEventListener('mouseup', self.stopDragReorder, false);\n            }\n        };\n        self.mouseup = function (e) {\n            clearTimeout(self.scrollTimer);\n            self.cellBoundaryCrossed = true;\n            self.selecting = undefined;\n            self.draggingItem = undefined;\n            self.dragStartObject = undefined;\n            if (self.dispatchEvent('mouseup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            if (self.currentCell && self.currentCell.grid !== undefined) {\n                return;\n            }\n            if (self.contextMenu || self.input) { return; }\n            if (self.dragStart && self.isInGrid(self.dragStart)) {\n                self.controlInput.focus();\n            }\n            e.preventDefault();\n        };\n        self.keydown = function (e) {\n            var i,\n                x = self.activeCell.columnIndex,\n                y = self.activeCell.rowIndex,\n                ctrl = (e.controlKey || e.metaKey),\n                last = self.data.length - 1,\n                cols = self.getVisibleSchema().length - 1;\n            if (self.dispatchEvent('keydown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            if (self.attributes.showNewRow) {\n                last += 1;\n            }\n            if (e.keyCode === 9) {\n                e.preventDefault();\n            }\n            // esc\n            if (e.keyCode === 27) {\n                self.selections = [];\n                self.draw(true);\n            // ctrl + a\n            } else if (ctrl && e.keyCode === 65) {\n                self.selectAll();\n            //ArrowDown\n            } else if (e.keyCode === 40) {\n                y += 1;\n            //ArrowUp\n            } else if (e.keyCode === 38) {\n                y -= 1;\n            //ArrowLeft Tab\n            } else if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {\n                x -= 1;\n            //ArrowRight Tab\n            } else if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {\n                x += 1;\n            //PageUp\n            } else if (e.keyCode === 33) {\n                y -= self.page;\n                e.preventDefault();\n            //PageDown\n            } else if (e.keyCode === 34) {\n                y += self.page;\n                e.preventDefault();\n            //Home ArrowUp\n            } else if (e.keyCode === 36 || (ctrl && e.keyCode === 38)) {\n                y = 0;\n            //End ArrowDown\n            } else if (e.keyCode === 35 || (ctrl && e.keyCode === 40)) {\n                y = self.data.length - 1;\n            //ArrowRight\n            } else if (ctrl && e.keyCode === 39) {\n                x = cols;\n            //ArrowLeft\n            } else if (ctrl && e.keyCode === 37) {\n                x = 0;\n            }\n            //Enter\n            if (e.keyCode === 13) {\n                return self.beginEditAt(x, y);\n            }\n            //Space\n            if (e.keyCode === 32) {\n                self.selections = [];\n                self.selections[Math.max(y, 0)] = [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                if (self.attributes.selectionMode === 'row') {\n                    for (i = self.selectionBounds.top; i <= self.selectionBounds.bottom; i += 1) {\n                        self.selectRow(i, ctrl, null, true);\n                    }\n                } else {\n                    self.selectArea(undefined, ctrl);\n                }\n                e.preventDefault();\n                self.draw(true);\n                return;\n            }\n            if (x < 0) {\n                x = 0;\n            }\n            if (y > last) {\n                y = last;\n            }\n            if (y < 0) {\n                y = 0;\n            }\n            if (x > cols) {\n                x = cols;\n            }\n            // Arrows\n            if (e.shiftKey && [37, 38, 39, 40].indexOf(e.keyCode) !== -1) {\n                self.selections[Math.max(y, 0)] = self.selections[Math.max(y, 0)] || [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                self.selectArea(undefined, ctrl);\n                self.draw(true);\n            }\n            if (x !== self.activeCell.columnIndex || y !== self.activeCell.rowIndex) {\n                self.scrollIntoView(x !== self.activeCell.columnIndex ? x : undefined, y !== self.activeCell.rowIndex ? y : undefined);\n                self.setActiveCell(x, y);\n                if (!e.shiftKey && self.attributes.selectionFollowsActiveCell) {\n                    if (!ctrl) {\n                        self.selections = [];\n                    }\n                    self.selections[y] = self.selections[y] || [];\n                    self.selections[y].push(x);\n                    self.dispatchEvent('selectionchanged', {\n                        selectedData: self.getSelectedData(),\n                        selections: self.selections,\n                        selectionBounds: self.selectionBounds\n                    });\n                }\n                self.draw(true);\n            }\n        };\n        self.keyup = function (e) {\n            if (self.dispatchEvent('keyup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            self.controlInput.value = '';\n        };\n        self.keypress = function (e) {\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.dispatchEvent('keypress', {NativeEvent: e, cell: self.currentCell})) { return; }\n        };\n        self.dblclick = function (e) {\n            if (self.dispatchEvent('dblclick', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'columnHeaderCell') {\n                self.fitColumnToValues(self.currentCell.header.name);\n            } else if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'cornerCell') {\n                self.autosize();\n            } else if (['cell', 'activeCell'].indexOf(self.currentCell.style) !== -1) {\n                self.beginEditAt(self.currentCell.columnIndex, self.currentCell.rowIndex);\n            }\n        };\n        self.scrollWheel = function (e) {\n            var l,\n                t,\n                deltaX = e.deltaX === undefined ? e.NativeEvent.deltaX : e.deltaX,\n                deltaY = e.deltaY === undefined ? e.NativeEvent.deltaY : e.deltaY,\n                deltaMode = e.deltaMode === undefined ? e.NativeEvent.deltaMode : e.deltaMode;\n            if (wheeling) {\n                return;\n            }\n            wheeling = setTimeout(function () {\n                if (self.dispatchEvent('wheel', {NativeEvent: e})) {\n                    return;\n                }\n                e = e.NativeEvent || e;\n                self.touchHaltAnimation = true;\n                l = self.scrollBox.scrollLeft;\n                t = self.scrollBox.scrollTop;\n                if (self.hasFocus) {\n                    //BUG Issue 42: https://github.com/TonyGermaneri/canvas-datagrid/issues/42\n                    //https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\n                    if (deltaMode === 1) {\n                        // line mode = 17 pixels per line\n                        deltaY = deltaY * 17;\n                    }\n                    self.scrollBox.scrollTo(deltaX + l, deltaY + t);\n                }\n                if (t !== self.scrollBox.scrollTop || l !== self.scrollBox.scrollLeft) {\n                    e.preventDefault();\n                }\n                wheeling = undefined;\n            }, 1);\n        };\n        self.copy = function (e) {\n            if (self.dispatchEvent('copy', {NativeEvent: e})) { return; }\n            if (!self.hasFocus || !e.clipboardData) { return; }\n            var rows = [], sData = self.getSelectedData();\n            if (sData.length > 0) {\n                sData.forEach(function (row) {\n                    if (row) {\n                        var r = [];\n                        Object.keys(row).forEach(function (key) {\n                            if (row[key] !== null\n                                    && row[key] !== false\n                                    && row[key] !== undefined\n                                    && row[key].replace) {\n                                return r.push('\"' + row[key].replace(/\"/g, '\"\"') + '\"');\n                            }\n                            r.push(row[key]);\n                        });\n                        r.join(',');\n                        rows.push(r);\n                    }\n                });\n                e.clipboardData.setData('text/plain', rows.join('\\n'));\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/events.js\n// module id = 4\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals HTMLElement: false, Reflect: false, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self, ctor) {\n        self.orders = {\n            rows: [],\n            columns: []\n        };\n        self.hasFocus = false;\n        self.activeCell = {\n            columnIndex: 0,\n            rowIndex: 0\n        };\n        self.storageName = 'canvasDataGrid';\n        self.invalidSearchExpClass = 'canvas-datagrid-invalid-search-regExp';\n        self.localStyleLibraryStorageKey = 'canvas-datagrid-user-style-library';\n        self.uniqueId = '_canvasDataGridUniqueId';\n        self.orderBy = self.uniqueId;\n        self.orderDirection = 'asc';\n        self.columnFilters = {};\n        self.filters = {};\n        self.frozenRows = [];\n        self.ellipsisCache = {};\n        self.scrollBox = {};\n        self.visibleRows = [];\n        /**\n         * Used internally to keep track of sizes of row, columns and child grids.\n         * @memberof canvasDatagrid\n         * @property sizes\n         * @readonly\n         */\n        self.sizes = {\n            rows: {},\n            columns: {},\n            trees: {}\n        };\n        self.currentFilter = function () {\n            return true;\n        };\n        self.selections = [];\n        self.hovers = {};\n        self.attributes = {};\n        self.style = {};\n        self.formatters = {};\n        self.sorters = {};\n        self.schemaHashes = {};\n        self.events = {};\n        self.uId = 0;\n        self.changes = [];\n        self.scrollIndexTop = 0;\n        self.scrollPixelTop = 0;\n        self.scrollIndexLeft = 0;\n        self.scrollPixelLeft = 0;\n        self.childGrids = {};\n        self.openChildren = {};\n        self.scrollModes = [\n            'vertical-scroll-box',\n            'vertical-scroll-top',\n            'vertical-scroll-bottom',\n            'horizontal-scroll-box',\n            'horizontal-scroll-right',\n            'horizontal-scroll-left'\n        ];\n        self.mouse = { x: 0, y: 0};\n        self.getSelectedData = function (expandToRow) {\n            var d = [], s = self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                if (expandToRow) {\n                    s.forEach(function (column) {\n                        d[index][column.name] = self.data[index][column.name];\n                    });\n                } else {\n                    row.forEach(function (col) {\n                        if (col === -1 || !s[col]) { return; }\n                        d[index][s[col].name] = self.data[index][s[col].name];\n                    });\n                }\n            });\n            return d;\n        };\n        self.fillArray = function (low, high, step) {\n            step = step || 1;\n            var i = [], x;\n            for (x = low; x <= high; x += step) {\n                i[x] = x;\n            }\n            return i;\n        };\n        self.getRowHeaderCellHeight = function () {\n            if (!self.attributes.showColumnHeaders) { return 0; }\n            return self.sizes.rows[-1] || self.style.columnHeaderCellHeight;\n        };\n        self.getColumnHeaderCellWidth = function () {\n            if (!self.attributes.showRowHeaders) { return 0; }\n            return self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth;\n        };\n        self.setStorageData = function () {\n            if (!self.attributes.saveAppearance) { return; }\n            localStorage.setItem(self.storageName + '-' + self.attributes.name, JSON.stringify({\n                sizes: {\n                    rows: self.sizes.rows,\n                    columns: self.sizes.columns\n                },\n                orders: {\n                    rows: self.orders.rows,\n                    columns: self.orders.columns\n                },\n                orderBy: self.orderBy,\n                orderDirection: self.orderDirection\n            }));\n        };\n        self.getSchema = function () {\n            return self.schema || self.tempSchema;\n        };\n        self.createColumnOrders = function () {\n            var s = self.getSchema();\n            self.orders.columns = self.fillArray(0, s.length - 1);\n        };\n        self.createRowOrders = function () {\n            self.orders.rows = self.fillArray(0, self.data.length - 1);\n        };\n        self.getVisibleSchema = function () {\n            return self.getSchema().filter(function (col) { return !col.hidden; });\n        };\n        self.applyDefaultValue = function (row, header) {\n            var d = header.defaultValue || '';\n            if (typeof d === 'function') {\n                d = d.apply(self.intf, [header]);\n            }\n            row[header.name] = d;\n        };\n        self.createNewRowData = function () {\n            self.newRow = {};\n            self.newRow[self.uniqueId] = self.uId;\n            self.uId += 1;\n            self.getSchema().forEach(function forEachHeader(header) {\n                self.applyDefaultValue(self.newRow, header);\n            });\n        };\n        self.getSchemaNameHash = function (key) {\n            var n = 0;\n            while (self.schemaHashes[key]) {\n                n += 1;\n                key = key + n;\n            }\n            return key;\n        };\n        self.filter = function (type) {\n            var f = self.filters[type];\n            if (!f && type !== undefined) {\n                console.warn('Cannot find filter for type %s, falling back to substring match.', type);\n                f = self.filters.string;\n            }\n            return f;\n        };\n        self.getBestGuessDataType = function (columnName) {\n            var t, x, l = self.data.length;\n            for (x = 0; x < l; x += 1) {\n                if ([null, undefined].indexOf(self.data[x][columnName]) !== -1) {\n                    t = typeof self.data[x];\n                    return t === 'object' ? 'string' : t;\n                }\n            }\n            return 'string';\n        };\n        self.drawChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].draw();\n            });\n        };\n        self.resizeChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].resize();\n            });\n        };\n        self.autoScrollZone = function (e, x, y, ctrl) {\n            var setTimer,\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth(),\n                rowHeaderCellHeight = self.getRowHeaderCellHeight();\n            if (x > self.width - self.attributes.selectionScrollZone && x < self.width) {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y > self.height - self.attributes.selectionScrollZone && y < self.height) {\n                self.scrollBox.scrollTop += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (x - self.attributes.selectionScrollZone - columnHeaderCellWidth < 0) {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y - self.attributes.selectionScrollZone - rowHeaderCellHeight < 0) {\n                self.scrollBox.scrollTop -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (setTimer && !ctrl && self.currentCell && self.currentCell.columnIndex !== -1) {\n                self.scrollTimer = setTimeout(self.mousemove, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.refreshFromOrigialData = function () {\n            self.data = self.originalData.filter(function (row) {\n                return true;\n            });\n        };\n        self.validateColumn = function (c, s) {\n            if (!c.name) {\n                throw new Error('A column must contain at least a name.');\n            }\n            if (s.filter(function (i) { return i.name === c.name; }).length > 0) {\n                throw new Error('A column with the name '\n                    + c.name + ' already exists and cannot be added again.');\n            }\n            return true;\n        };\n        self.setDefaults = function (obj1, obj2, key, def) {\n            obj1[key] = obj2[key] === undefined ? def : obj2[key];\n        };\n        self.setAttributes = function () {\n            self.defaults.attributes.forEach(function eachAttribute(i) {\n                self.setDefaults(self.attributes, self.args, i[0], i[1]);\n            });\n        };\n        self.setStyle = function () {\n            self.defaults.styles.forEach(function eachStyle(i) {\n                self.setDefaults(self.style, self.args.style || {}, i[0], i[1]);\n            });\n        };\n        self.autosize = function (colName) {\n            self.getVisibleSchema().forEach(function (col) {\n                if (col.name === colName || colName === undefined) {\n                    self.fitColumnToValues(col.name);\n                }\n            });\n            self.fitColumnToValues('cornerCell');\n        };\n        self.dispose = function () {\n            if (!self.isChildGrid && self.canvas && self.canvas.parentNode) {\n                self.canvas.parentNode.removeChild(self.canvas);\n            }\n            self.eventParent.removeEventListener('mouseup', self.mouseup, false);\n            self.eventParent.removeEventListener('mousedown', self.mousedown, false);\n            self.eventParent.removeEventListener('dblclick', self.dblclick, false);\n            self.eventParent.removeEventListener('click', self.click, false);\n            self.eventParent.removeEventListener('mousemove', self.mousemove);\n            self.eventParent.removeEventListener('wheel', self.scrollWheel, false);\n            self.canvas.removeEventListener('contextmenu', self.contextmenu, false);\n            self.canvas.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('keypress', self.keypress, false);\n            self.controlInput.removeEventListener('keyup', self.keyup, false);\n            self.controlInput.removeEventListener('keydown', self.keydown, false);\n            window.removeEventListener('resize', self.resize);\n            if (self.observer && self.observer.disconnect) {\n                self.observer.disconnect();\n            }\n        };\n        self.tryLoadStoredOrders = function () {\n            var s;\n            if (self.storedSettings\n                    && typeof self.storedSettings.orders === 'object'\n                    && self.storedSettings.orders !== null) {\n                if (self.storedSettings.orders.rows.length >= self.data.length) {\n                    self.orders.rows = self.storedSettings.orders.rows;\n                }\n                s = self.getSchema();\n                if (self.storedSettings.orders.columns.length === s.length) {\n                    self.orders.columns = self.storedSettings.orders.columns;\n                }\n                self.orderBy = self.storedSettings.orderBy === undefined\n                    ? self.uniqueId : self.storedSettings.orderBy;\n                self.orderDirection = self.storedSettings.orderDirection === undefined\n                    ? self.uniqueId : self.storedSettings.orderDirection;\n                if (self.getHeaderByName(self.orderBy) && self.orderDirection) {\n                    self.order(self.orderBy, self.orderDirection);\n                }\n            }\n        };\n        self.getFontHeight = function (fontStyle) {\n            return parseFloat(fontStyle, 10);\n        };\n        self.parseFont = function (key) {\n            if (/Font/.test(key)) {\n                self.style[key + 'Height'] = self.getFontHeight(self.style[key]);\n            }\n        };\n        self.initProp = function (propName) {\n            if (!self.args[propName]) { return; }\n            Object.keys(self.args[propName]).forEach(function (key) {\n                self[propName][key] = self.args[propName][key];\n            });\n        };\n        self.init = function () {\n            if (self.initialized) { return; }\n            var publicStyleKeyIntf = {};\n            self.setAttributes();\n            self.setStyle();\n            self.initScrollBox();\n            self.setDom();\n            self.type = 'canvas-datagrid';\n            self.initialized = true;\n            self.pointerLockPosition = {x: 0, y: 0};\n            Object.keys(self.style).forEach(self.parseFont);\n            self.intf.type = self.type;\n            self.intf.addEventListener = self.addEventListener;\n            self.intf.removeEventListener = self.removeEventListener;\n            self.intf.dispatchEvent = self.dispatchEvent;\n            self.intf.dispose = self.dispose;\n            self.intf.appendTo = self.appendTo;\n            self.intf.filters = self.filters;\n            self.intf.sorters = self.sorters;\n            self.intf.autosize = self.autosize;\n            self.intf.beginEditAt = self.beginEditAt;\n            self.intf.endEdit = self.endEdit;\n            self.intf.setActiveCell = self.setActiveCell;\n            self.intf.scrollIntoView = self.scrollIntoView;\n            self.intf.clearChangeLog = self.clearChangeLog;\n            self.intf.gotoCell = self.gotoCell;\n            self.intf.gotoRow = self.gotoRow;\n            self.intf.findColumnScrollLeft = self.findColumnScrollLeft;\n            self.intf.findRowScrollTop = self.findRowScrollTop;\n            self.intf.fitColumnToValues = self.fitColumnToValues;\n            self.intf.findColumnMaxTextLength = self.findColumnMaxTextLength;\n            self.intf.disposeContextMenu = self.disposeContextMenu;\n            self.intf.getCellAt = self.getCellAt;\n            self.intf.isCellVisible = self.isCellVisible;\n            self.intf.order = self.order;\n            self.intf.draw = self.draw;\n            self.intf.selectArea = self.selectArea;\n            self.intf.clipElement = self.clipElement;\n            self.intf.getSchemaFromData = self.getSchemaFromData;\n            self.intf.setFilter = self.setFilter;\n            self.intf.selectRow = self.selectRow;\n            self.intf.parentGrid = self.parentGrid;\n            self.intf.toggleTree = self.toggleTree;\n            self.intf.expandTree = self.expandTree;\n            self.intf.collapseTree = self.collapseTree;\n            self.intf.canvas = self.canvas;\n            self.intf.context = self.ctx;\n            self.intf.insertRow = self.insertRow;\n            self.intf.deleteRow = self.deleteRow;\n            self.intf.addRow = self.addRow;\n            self.intf.insertColumn = self.insertColumn;\n            self.intf.deleteColumn = self.deleteColumn;\n            self.intf.addColumn = self.addColumn;\n            self.intf.getClippingRect = self.getClippingRect;\n            self.intf.setRowHeight = self.setRowHeight;\n            self.intf.setColumnWidth = self.setColumnWidth;\n            self.intf.resetColumnWidths = self.resetColumnWidths;\n            self.intf.resetRowHeights = self.resetRowHeights;\n            self.intf.resize = self.resize;\n            self.intf.selectColumn = self.selectColumn;\n            self.intf.selectRow = self.selectRow;\n            self.intf.selectAll = self.selectAll;\n            self.intf.drawChildGrids = self.drawChildGrids;\n            self.intf.assertPxColor = self.assertPxColor;\n            self.intf.clearPxColorAssertions = self.clearPxColorAssertions;\n            self.intf.integerToAlpha = self.integerToAlpha;\n            self.intf.copy = self.copy;\n            Object.keys(self.style).forEach(function (key) {\n                // unless this line is here, Object.keys() will not work on <instance>.style\n                publicStyleKeyIntf[key] = undefined;\n                Object.defineProperty(publicStyleKeyIntf, key, {\n                    get: function () {\n                        return self.style[key];\n                    },\n                    set: function (value) {\n                        self.parseFont(value);\n                        self.style[key] = value;\n                        self.draw(true);\n                        self.dispatchEvent('stylechanged', {name: key, value: value});\n                    }\n                });\n            });\n            Object.defineProperty(self.intf, 'shadowRoot', {\n                get: function () {\n                    return self.shadowRoot;\n                }\n            });\n            Object.defineProperty(self.intf, 'activeCell', {\n                get: function () {\n                    return self.activeCell;\n                }\n            });\n            /**\n             * When true, the grid is has focus.\n             * @memberof canvasDatagrid\n             * @property hasFocus\n             * @readonly\n             */\n            Object.defineProperty(self.intf, 'hasFocus', {\n                get: function () {\n                    return self.hasFocus;\n                }\n            });\n            if (!self.args.component) {\n                Object.defineProperty(self.intf, 'style', {\n                    get: function () {\n                        return publicStyleKeyIntf;\n                    },\n                    set: function (value) {\n                        Object.keys(value).forEach(function (key) {\n                            self.parseFont(value);\n                            self.style[key] = value[key];\n                        });\n                        self.draw(true);\n                        self.dispatchEvent('stylechanged', {name: 'style', value: value});\n                    }\n                });\n            }\n            Object.defineProperty(self.intf, 'attributes', { value: {}});\n            Object.keys(self.attributes).forEach(function (key) {\n                Object.defineProperty(self.intf.attributes, key, {\n                    get: function () {\n                        return self.attributes[key];\n                    },\n                    set: function (value) {\n                        self.attributes[key] = value;\n                        self.draw(true);\n                        self.dispatchEvent('attributechanged', {name: key, value: value[key]});\n                    }\n                });\n            });\n            self.filters.string = function (value, filterFor) {\n                value = String(value);\n                var filterRegExp,\n                    regEnd = /\\/(i|g|m)*$/,\n                    pattern = regEnd.exec(filterFor),\n                    flags = pattern ? pattern[0].substring(1) : '',\n                    flagLength = flags.length;\n                self.invalidFilterRegEx = undefined;\n                if (filterFor.substring(0, 1) === '/' && pattern) {\n                    try {\n                        filterRegExp = new RegExp(filterFor.substring(1, filterFor.length - (flagLength + 1)), flags);\n                    } catch (e) {\n                        self.invalidFilterRegEx = e;\n                        return;\n                    }\n                    return filterRegExp.test(value);\n                }\n                return value.toString ? value.toString().toLocaleUpperCase()\n                    .indexOf(filterFor.toLocaleUpperCase()) !== -1 : false;\n            };\n            self.filters.number = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                return value === filterFor;\n            };\n            if (self.attributes.name && self.attributes.saveAppearance) {\n                self.storedSettings = localStorage.getItem(self.storageName + '-' + self.attributes.name);\n                if (self.storedSettings) {\n                    try {\n                        self.storedSettings = JSON.parse(self.storedSettings);\n                    } catch (e) {\n                        console.warn('could not read settings from localStore', e);\n                        self.storedSettings = undefined;\n                    }\n                }\n                if (self.storedSettings) {\n                    if (typeof self.storedSettings.sizes === 'object'\n                            && self.storedSettings.sizes !== null) {\n                        self.sizes.rows = self.storedSettings.sizes.rows;\n                        self.sizes.columns = self.storedSettings.sizes.columns;\n                        ['trees', 'columns', 'rows'].forEach(function (i) {\n                            if (!self.sizes[i]) {\n                                self.sizes[i] = {};\n                            }\n                        });\n                    }\n                }\n            }\n            ['formatters', 'filters', 'sorters'].forEach(self.initProp);\n            if (self.args.data) {\n                self.intf.data = self.args.data;\n            }\n            if (!self.data) {\n                self.intf.data = [];\n            }\n            if (self.args.schema) {\n                self.intf.schema = self.args.schema;\n            }\n            if (self.isChildGrid) {\n                requestAnimationFrame(function () { self.resize(true); });\n            } else {\n                self.resize(true);\n            }\n            return self;\n        };\n        /**\n         * Removes focus from the grid.\n         * @memberof canvasDatagrid\n         * @name blur\n         * @method\n         */\n        self.intf.blur = function (e) {\n            self.hasFocus = false;\n        };\n        /**\n         * Focuses on the grid.\n         * @memberof canvasDatagrid\n         * @name focus\n         * @method\n         */\n        self.intf.focus = function () {\n            self.hasFocus = true;\n            self.controlInput.focus();\n        };\n        Object.defineProperty(self.intf, 'height', {\n            get: function () {\n                return self.parentNode.height;\n            },\n            set: function (value) {\n                self.parentNode.height = value;\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'width', {\n            get: function () {\n                return self.parentNode.width;\n            },\n            set: function (value) {\n                self.parentNode.width = value;\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'openChildren', {\n            get: function () {\n                return self.openChildren;\n            }\n        });\n        Object.defineProperty(self.intf, 'childGrids', {\n            get: function () {\n                return Object.keys(self.childGrids).map(function (gridId) {\n                    return self.childGrids[gridId];\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'isChildGrid', {\n            get: function () {\n                return self.isChildGrid;\n            }\n        });\n        Object.defineProperty(self.intf, 'parentNode', {\n            get: function () {\n                return self.parentNode;\n            },\n            set: function (value) {\n                if (!self.isChildGrid) {\n                    throw new TypeError('Cannot set property parentNode which has only a getter');\n                }\n                self.parentNode = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetParent', {\n            get: function () {\n                return self.parentNode;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetLeft', {\n            get: function () {\n                return self.parentNode.offsetLeft;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetTop', {\n            get: function () {\n                return self.parentNode.offsetTop;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollHeight', {\n            get: function () {\n                return self.scrollBox.scrollHeight;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollWidth', {\n            get: function () {\n                return self.scrollBox.scrollWidth;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollTop', {\n            get: function () {\n                return self.scrollBox.scrollTop;\n            },\n            set: function (value) {\n                self.scrollBox.scrollTop = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollLeft', {\n            get: function () {\n                return self.scrollBox.scrollLeft;\n            },\n            set: function (value) {\n                self.scrollBox.scrollLeft = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'sizes', {\n            get: function () {\n                return self.sizes;\n            }\n        });\n        Object.defineProperty(self.intf, 'input', {\n            get: function () {\n                return self.input;\n            }\n        });\n        Object.defineProperty(self.intf, 'controlInput', {\n            get: function () {\n                return self.controlInput;\n            }\n        });\n        Object.defineProperty(self.intf, 'currentCell', {\n            get: function () {\n                return self.currentCell;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleCells', {\n            get: function () {\n                return self.visibleCells;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRows', {\n            get: function () {\n                return self.visibleRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'selections', {\n            get: function () {\n                return self.selections;\n            }\n        });\n        Object.defineProperty(self.intf, 'dragMode', {\n            get: function () {\n                return self.dragMode;\n            }\n        });\n        Object.defineProperty(self.intf, 'changes', {\n            get: function () {\n                return self.changes;\n            }\n        });\n        self.intf.formatters = self.formatters;\n        self.normalizeDataset = function (data, callback) {\n            var i, d, max, syncFnInvoked;\n            if (data === null || data === '' || data === undefined) {\n                return callback([]);\n            }\n            if (typeof data === 'string'\n                    || typeof data === 'number'\n                    || typeof data === 'boolean') {\n                data = [{'0': data}];\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if ((!Array.isArray(data[0]) && typeof data[0] === 'object' && data[0] !== null)\n                            || (Array.isArray(data) && data.length === 0)) {\n                return callback(data);\n            }\n            if (typeof data === 'function') {\n                i = data.apply(self.intf, [function (d) {\n                    if (syncFnInvoked) {\n                        console.warn('Detected a callback to the data setter function after the same function already returned a value synchronously.');\n                    }\n                    self.normalizeDataset(d, callback);\n                }]);\n                if (i) {\n                    syncFnInvoked = true;\n                    self.normalizeDataset(i, callback);\n                }\n                return;\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if (Array.isArray(data)) {\n                if (!Array.isArray(data[0])) {\n                    //array of something?  throw it all into 1 row!\n                    data = [data];\n                }\n                // find the longest length\n                max = 0;\n                d = [];\n                data.forEach(function (row) {\n                    max = Math.max(max, row.length);\n                });\n                // map against length indexes\n                data.forEach(function (row, index) {\n                    var x;\n                    d[index] = {};\n                    for (x = 0; x < max; x += 1) {\n                        d[index][x] = row[x];\n                    }\n                });\n                return callback(d);\n            }\n            throw new Error('Unsupported data type.  Must be an array of arrays or an array of objects, function or string.');\n        };\n        Object.defineProperty(self.intf, 'frozenRows', {\n            get: function () {\n                return self.frozenRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollIndexRect', {\n            get: function () {\n                return {\n                    top: self.scrollIndexTop,\n                    right: self.scrollIndexRight,\n                    bottom: self.scrollIndexBottom,\n                    left: self.scrollIndexLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollPixelRect', {\n            get: function () {\n                return {\n                    top: self.scrollPixelTop,\n                    right: self.scrollPixelRight,\n                    bottom: self.scrollPixelBottom,\n                    left: self.scrollPixelLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'selectionBounds', {\n            get: function () {\n                return self.getSelectionBounds();\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedRows', {\n            get: function () {\n                return self.getSelectedData(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedCells', {\n            get: function () {\n                return self.getSelectedData();\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleSchema', {\n            get: function () {\n                return self.getVisibleSchema().map(function eachDataRow(col) {\n                    return col;\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'ctx', {\n            get: function () {\n                return self.ctx;\n            }\n        });\n        Object.defineProperty(self.intf, 'schema', {\n            get: function schemaGetter() {\n                return self.getSchema();\n            },\n            set: function schemaSetter(value) {\n                if (!Array.isArray(value) || typeof value[0] !== 'object') {\n                    throw new Error('Schema must be an array of objects.');\n                }\n                if (value[0].name === undefined) {\n                    throw new Error('Expected schema to contain an object with at least a name property.');\n                }\n                self.schema = value.map(function eachSchemaColumn(column, index) {\n                    column.width = column.width || self.style.columnWidth;\n                    column[self.uniqueId] = self.getSchemaNameHash(column.name);\n                    column.filter = column.filter || self.filter(column.type);\n                    column.type = column.type || 'string';\n                    column.index = index;\n                    column.columnIndex = index;\n                    column.rowIndex = -1;\n                    return column;\n                });\n                self.tempSchema = undefined;\n                self.createNewRowData();\n                self.createColumnOrders();\n                self.tryLoadStoredOrders();\n                self.resize(true);\n                self.dispatchEvent('schemachanged', {schema: self.schema});\n            }\n        });\n        Object.defineProperty(self.intf, 'data', {\n            get: function dataGetter() {\n                return self.data.map(function (row) {\n                    delete row[self.uniqueId];\n                    return row;\n                });\n            },\n            set: function dataSetter(value) {\n                self.normalizeDataset(value, function (d) {\n                    self.originalData = d.map(function eachDataRow(row) {\n                        row[self.uniqueId] = self.uId;\n                        self.uId += 1;\n                        return row;\n                    });\n                    self.changes = [];\n                    //TODO apply filter to incoming dataset\n                    self.data = self.originalData;\n                    if (!self.schema) {\n                        self.tempSchema = self.getSchemaFromData();\n                    }\n                    if (!self.schema && self.data.length === 0) {\n                        self.tempSchema = [{name: ''}];\n                        self.tempSchema[0][self.uniqueId] = self.getSchemaNameHash('');\n                    }\n                    if (self.tempSchema && !self.schema) {\n                        self.createColumnOrders();\n                        self.tryLoadStoredOrders();\n                        self.dispatchEvent('schemachanged', {schema: self.tempSchema});\n                    }\n                    self.createNewRowData();\n                    if (self.attributes.autoResizeColumns && self.data.length > 0\n                            && self.storedSettings === undefined) {\n                        self.autosize();\n                    }\n                    self.fitColumnToValues('cornerCell', true);\n                    if (!self.resize() || !self.isChildGrid) { self.draw(true); }\n                    self.createRowOrders();\n                    self.tryLoadStoredOrders();\n                    self.dispatchEvent('datachanged', {data: self.data});\n                });\n            }\n        });\n        self.initScrollBox = function () {\n            var sHeight = 0,\n                sWidth = 0,\n                scrollTop = 0,\n                scrollLeft = 0,\n                scrollHeight = 0,\n                scrollWidth = 0,\n                scrollBoxHeight = 20,\n                scrollBoxWidth = 20;\n            function setScrollTop(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollTop value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollHeight) {\n                    value = scrollHeight;\n                }\n                if (scrollHeight < 0) {\n                    value = 0;\n                }\n                scrollTop = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            function setScrollLeft(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollLeft value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollWidth) {\n                    value = scrollWidth;\n                }\n                if (scrollWidth < 0) {\n                    value = 0;\n                }\n                scrollLeft = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            self.scrollBox.toString = function () {\n                return '{\"width\": ' + scrollWidth\n                    + ', \"height\": ' + scrollHeight\n                    + ', \"left\": ' + scrollLeft\n                    + ', \"top\": ' + scrollTop + '}';\n            };\n            self.scrollBox.scrollTo = function (x, y) {\n                setScrollLeft(x, true);\n                setScrollTop(y);\n            };\n            Object.defineProperty(self.scrollBox, 'scrollBoxHeight', {\n                get: function () {\n                    return scrollBoxHeight;\n                },\n                set: function (value) {\n                    scrollBoxHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollBoxWidth', {\n                get: function () {\n                    return scrollBoxWidth;\n                },\n                set: function (value) {\n                    scrollBoxWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'height', {\n                get: function () {\n                    return sHeight;\n                },\n                set: function (value) {\n                    if (scrollHeight < value) {\n                        scrollTop = 0;\n                    }\n                    sHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'width', {\n                get: function () {\n                    return sWidth;\n                },\n                set: function (value) {\n                    sWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollTop', {\n                get: function () {\n                    return scrollTop;\n                },\n                set: setScrollTop\n            });\n            Object.defineProperty(self.scrollBox, 'scrollLeft', {\n                get: function () {\n                    return scrollLeft;\n                },\n                set: setScrollLeft\n            });\n            Object.defineProperty(self.scrollBox, 'scrollHeight', {\n                get: function () {\n                    return scrollHeight;\n                },\n                set: function (value) {\n                    if (scrollTop > value) {\n                        scrollTop = Math.max(value, 0);\n                    }\n                    if (scrollHeight < sHeight) {\n                        scrollTop = 0;\n                    }\n                    scrollHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollWidth', {\n                get: function () {\n                    return scrollWidth;\n                },\n                set: function (value) {\n                    if (scrollLeft > value) {\n                        scrollLeft = Math.max(value, 0);\n                    }\n                    scrollWidth = value;\n                }\n            });\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/intf.js\n// module id = 5\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false, Event: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var zIndexTop = 2, hoverScrollTimeout, autoCompleteContext;\n        function createContextMenu(ev, pos, items, parentContextMenu) {\n            var container = document.createElement('div'),\n                upArrow = document.createElement('div'),\n                downArrow = document.createElement('div'),\n                children = [],\n                selectedIndex = -1,\n                intf = {},\n                rect;\n            if (!Array.isArray(items)) { throw new Error('createContextMenu expects an array.'); }\n            function createItems() {\n                items.forEach(function (item) {\n                    var contextItemContainer = document.createElement('div'),\n                        childMenuArrow;\n                    function removeChildContext(e) {\n                        if (e.relatedTarget === container\n                                || item.contextMenu.container === e.relatedTarget\n                                || childMenuArrow === e.relatedTarget\n                                || (contextItemContainer === e.relatedTarget)\n                                ) { return; }\n                        item.contextMenu.dispose();\n                        children.splice(children.indexOf(item.contextMenu), 1);\n                        item.contextMenu = undefined;\n                        contextItemContainer.removeEventListener('mouseout', removeChildContext);\n                        container.removeEventListener('mouseout', removeChildContext);\n                        contextItemContainer.setAttribute('contextOpen', '0');\n                        contextItemContainer.setAttribute('opening', '0');\n                    }\n                    function contextAddCallback(items) {\n                        // check yet again if the user hasn't moved off\n                        if (contextItemContainer.getAttribute('opening') !== '1' ||\n                                contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        var cPos = contextItemContainer.getBoundingClientRect();\n                        cPos = {\n                            left: cPos.left + self.style.childContextMenuMarginLeft + container.offsetWidth,\n                            top: cPos.top + self.style.childContextMenuMarginTop,\n                            bottom: cPos.bottom,\n                            right: cPos.right\n                        };\n                        item.contextMenu = createContextMenu(ev, cPos, items, intf);\n                        contextItemContainer.setAttribute('contextOpen', '1');\n                        contextItemContainer.addEventListener('mouseout', removeChildContext);\n                        container.addEventListener('mouseout', removeChildContext);\n                        children.push(item.contextMenu);\n                    }\n                    function createChildContext() {\n                        var i;\n                        if (contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        contextItemContainer.setAttribute('opening', '1');\n                        if (typeof item.items === 'function') {\n                            i  = item.items.apply(intf, [function (items) {\n                                contextAddCallback(items);\n                            }]);\n                            if (i !== undefined && Array.isArray(i)) {\n                                contextAddCallback(i);\n                            }\n                            return;\n                        }\n                        contextAddCallback(item.items);\n                    }\n                    function addItem(item) {\n                        function addContent(content) {\n                            if (content === null) { return; }\n                            if (typeof content === 'function') {\n                                return addContent(content(ev));\n                            }\n                            if (typeof content === 'object') {\n                                contextItemContainer.appendChild(content);\n                                return;\n                            }\n                            self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n                            contextItemContainer.addEventListener('mouseover', function () {\n                                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                            });\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n                            });\n                            contextItemContainer.innerHTML = content;\n                            return;\n                        }\n                        addContent(item.title);\n                        item.contextItemContainer = contextItemContainer;\n                        if ((item.items && item.items.length > 0) || typeof item.items === 'function') {\n                            childMenuArrow = document.createElement('div');\n                            self.createInlineStyle(childMenuArrow, 'canvas-datagrid-context-child-arrow');\n                            childMenuArrow.innerHTML = self.style.childContextMenuArrowHTML;\n                            contextItemContainer.appendChild(childMenuArrow);\n                            contextItemContainer.addEventListener('mouseover', createChildContext);\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                contextItemContainer.setAttribute('opening', '0');\n                            });\n                        }\n                        if (item.click) {\n                            contextItemContainer.addEventListener('click', function (ev) {\n                                item.click.apply(self, [ev]);\n                            });\n                        }\n                    }\n                    addItem(item);\n                    container.appendChild(contextItemContainer);\n                });\n            }\n            function clickIndex(idx) {\n                items[idx].contextItemContainer.dispatchEvent(new Event('click'));\n            }\n            function checkArrowVisibility() {\n                if (container.scrollTop > 0) {\n                    self.parentDOMNode.appendChild(upArrow);\n                } else if (upArrow.parentNode) {\n                    upArrow.parentNode.removeChild(upArrow);\n                }\n                if (container.scrollTop >= container.scrollHeight - container.offsetHeight && downArrow.parentNode) {\n                    downArrow.parentNode.removeChild(downArrow);\n                } else if (container.scrollHeight - container.offsetHeight > 0\n                        && !(container.scrollTop >= container.scrollHeight - container.offsetHeight)) {\n                    self.parentDOMNode.appendChild(downArrow);\n                }\n            }\n            function startHoverScroll(type) {\n                return function t() {\n                    var a = self.attributes.contextHoverScrollAmount;\n                    if (type === 'up' && container.scrollTop === 0) { return; }\n                    if (type === 'down' && container.scrollTop === container.scrollHeight) { return; }\n                    container.scrollTop += (type === 'up' ? -a : a);\n                    hoverScrollTimeout = setTimeout(t, self.attributes.contextHoverScrollRateMs, type);\n                };\n            }\n            function endHoverScroll(type) {\n                return function () {\n                    clearTimeout(hoverScrollTimeout);\n                };\n            }\n            function init() {\n                var loc = {},\n                    s = self.scrollOffset(self.canvas);\n                createItems();\n                self.createInlineStyle(container, 'canvas-datagrid-context-menu');\n                loc.x = pos.left - s.left;\n                loc.y = pos.top - s.top;\n                loc.height = 0;\n                zIndexTop += 1;\n                container.style.position = 'absolute';\n                upArrow.style.color = self.style.contextMenuArrowColor;\n                downArrow.style.color = self.style.contextMenuArrowColor;\n                [upArrow, downArrow].forEach(function (el) {\n                    el.style.textAlign = 'center';\n                    el.style.position = 'absolute';\n                    el.style.zIndex = zIndexTop + 1;\n                });\n                container.style.zIndex = zIndexTop;\n                if (parentContextMenu && parentContextMenu.inputDropdown) {\n                    container.style.maxHeight = window.innerHeight - loc.y - self.style.autocompleteBottomMargin + 'px';\n                    container.style.minWidth = pos.width + 'px';\n                    loc.y += pos.height;\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                container.addEventListener('scroll', checkArrowVisibility);\n                container.addEventListener('wheel', function (e) {\n                    if (self.hasFocus) {\n                        container.scrollTop += e.deltaY;\n                        container.scrollLeft += e.deltaX;\n                    }\n                    checkArrowVisibility();\n                });\n                upArrow.innerHTML = self.style.contextMenuArrowUpHTML;\n                downArrow.innerHTML = self.style.contextMenuArrowDownHTML;\n                container.appendChild(upArrow);\n                document.body.appendChild(downArrow);\n                document.body.appendChild(container);\n                rect = container.getBoundingClientRect();\n                if (rect.bottom > window.innerHeight && !(parentContextMenu && parentContextMenu.inputDropdown)) {\n                    loc.y = window.innerHeight - container.offsetHeight;\n                    if (loc.y < 0) { loc.y = 0; }\n                    if (container.offsetHeight > window.innerHeight) {\n                        container.style.height = window.innerHeight - self.style.contextMenuWindowMargin + 'px';\n                    }\n                }\n                if (rect.right > window.innerWidth) {\n                    if (parentContextMenu) {\n                        loc.x = parentContextMenu.container.offsetLeft - container.offsetWidth;\n                    } else {\n                        loc.x = window.innerWidth - container.offsetWidth;\n                    }\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                rect = container.getBoundingClientRect();\n                upArrow.style.top = rect.top + 'px';\n                downArrow.style.top = rect.top + rect.height - downArrow.offsetHeight + 'px';\n                upArrow.style.left = rect.left + 'px';\n                downArrow.style.left = rect.left + 'px';\n                downArrow.style.width = container.offsetWidth + 'px';\n                upArrow.style.width = container.offsetWidth + 'px';\n                downArrow.addEventListener('mouseover', startHoverScroll('down'));\n                downArrow.addEventListener('mouseout', endHoverScroll('down'));\n                upArrow.addEventListener('mouseover', startHoverScroll('up'));\n                upArrow.addEventListener('mouseout', endHoverScroll('up'));\n                checkArrowVisibility();\n            }\n            intf.parentGrid = self.intf;\n            intf.parentContextMenu = parentContextMenu;\n            intf.container = container;\n            init();\n            intf.clickIndex = clickIndex;\n            intf.rect = rect;\n            intf.items = items;\n            intf.upArrow = upArrow;\n            intf.downArrow = downArrow;\n            intf.dispose = function () {\n                clearTimeout(hoverScrollTimeout);\n                children.forEach(function (c) {\n                    c.dispose();\n                });\n                [downArrow, upArrow, container].forEach(function (el) {\n                    if (el.parentNode) { el.parentNode.removeChild(el); }\n                });\n            };\n            Object.defineProperty(intf, 'selectedIndex', {\n                get: function () {\n                    return selectedIndex;\n                },\n                set: function (value) {\n                    if (typeof value !== 'number' || isNaN(value || !isFinite(value))) {\n                        throw new Error('Context menu selected index must be a sane number.');\n                    }\n                    selectedIndex = value;\n                    if (selectedIndex > items.length - 1) {\n                        selectedIndex = items.length - 1;\n                    }\n                    if (selectedIndex < 0) {\n                        selectedIndex = 0;\n                    }\n                    items.forEach(function (item, index) {\n                        if (index === selectedIndex) {\n                            return self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                        }\n                        self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item');\n                    });\n                }\n            });\n            return intf;\n        }\n        function createFilterContextMenuItems(e) {\n            var filterContainer = document.createElement('div'),\n                filterLabel = document.createElement('div'),\n                filterAutoCompleteButton = document.createElement('button'),\n                filterInput = document.createElement('input'),\n                n = e.cell && e.cell.header ? e.cell.header.title || e.cell.header.name : '',\n                autoCompleteItems,\n                iRect;\n            function checkRegExpErrorState() {\n                filterInput.style.background = self.style.contextFilterInputBackground;\n                filterInput.style.color = self.style.contextFilterInputColor;\n                if (self.invalidFilterRegEx) {\n                    filterInput.style.background = self.style.contextFilterInvalidRegExpBackground;\n                    filterInput.style.color = self.style.contextFilterInvalidRegExpColor;\n                }\n            }\n            function fillAutoComplete() {\n                autoCompleteItems = {};\n                self.data.filter(function (d, i) { return i < self.attributes.maxAutoCompleteItems; }).forEach(function (row) {\n                    var value = row[e.cell.header.name];\n                    if (autoCompleteItems[value]) { return; }\n                    autoCompleteItems[value] = {\n                        title: self.formatters[e.cell.header.type || 'string']({ cell: { value: value }}),\n                        click: function (e) {\n                            filterInput.value = value;\n                            e.stopPropagation();\n                            filterInput.dispatchEvent(new Event('keyup'));\n                            self.disposeAutocomplete();\n                            return;\n                        }\n                    };\n                });\n                autoCompleteItems = Object.keys(autoCompleteItems).map(function (key) {\n                    return autoCompleteItems[key];\n                });\n            }\n            function createAutoCompleteContext(ev) {\n                if (ev && [40, 38, 13, 9, 27].indexOf(ev.keyCode) !== -1) { return; }\n                fillAutoComplete();\n                iRect = filterInput.getBoundingClientRect();\n                if (autoCompleteContext) {\n                    autoCompleteContext.dispose();\n                    autoCompleteContext = undefined;\n                }\n                autoCompleteContext = createContextMenu(e, {\n                    left: iRect.left,\n                    top: iRect.top,\n                    right: iRect.right,\n                    bottom: iRect.bottom,\n                    height: iRect.height,\n                    width: iRect.width\n                }, autoCompleteItems, {inputDropdown: true});\n                autoCompleteContext.selectedIndex = 0;\n            }\n            self.createInlineStyle(filterLabel, 'canvas-datagrid-context-menu-label');\n            self.createInlineStyle(filterAutoCompleteButton, 'canvas-datagrid-context-menu-filter-button');\n            self.createInlineStyle(filterInput, 'canvas-datagrid-context-menu-filter-input');\n            checkRegExpErrorState();\n            filterInput.onclick = self.disposeAutocomplete;\n            filterInput.addEventListener('keydown', function (e) {\n                //down\n                if (e.keyCode === 40) {\n                    autoCompleteContext.selectedIndex += 1;\n                }\n                //up\n                if (e.keyCode === 38) {\n                    autoCompleteContext.selectedIndex -= 1;\n                }\n                //enter\n                if (e.keyCode === 13) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    self.disposeContextMenu();\n                }\n                //tab\n                if (e.keyCode === 9) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    e.preventDefault();\n                }\n                //esc\n                if (e.keyCode === 27) {\n                    self.disposeContextMenu();\n                }\n            });\n            filterInput.addEventListener('keyup', function () {\n                self.setFilter(e.cell.header.name, filterInput.value);\n            });\n            filterInput.addEventListener('keyup', createAutoCompleteContext);\n            ['focus', 'blur', 'keydown', 'keyup', 'change'].forEach(function (en) {\n                filterInput.addEventListener(en, checkRegExpErrorState);\n            });\n            filterInput.value = e.cell.header ? self.columnFilters[e.cell.header.name] || '' : '';\n            filterLabel.innerHTML = self.attributes.filterOptionText.replace(/%s/g, n);\n            filterAutoCompleteButton.onclick = function () {\n                if (autoCompleteContext) {\n                    return self.disposeAutocomplete();\n                }\n                createAutoCompleteContext();\n            };\n            filterAutoCompleteButton.innerHTML = self.style.contextFilterButtonHTML;\n            filterContainer.addEventListener('click', function (e) {\n                return e.stopPropagation();\n            });\n            filterContainer.appendChild(filterLabel);\n            filterContainer.appendChild(filterInput);\n            filterContainer.appendChild(filterAutoCompleteButton);\n            e.items.push({\n                title: filterContainer\n            });\n            if (Object.keys(self.columnFilters).length) {\n                Object.keys(self.columnFilters).forEach(function (cf) {\n                    var h = self.getHeaderByName(cf);\n                    e.items.push({\n                        title: self.attributes.removeFilterOptionText.replace(/%s/g, h.title || h.name),\n                        click: function removeFilterClick(e) {\n                            e.preventDefault();\n                            self.setFilter(cf, '');\n                            self.controlInput.focus();\n                        }\n                    });\n                });\n            }\n        }\n        function addDefaultContextMenuItem(e) {\n            var isNormalCell = !(e.cell.isBackground || e.cell.isHeaderCellCap\n                    || e.cell.isScrollBar || e.cell.isCorner || e.cell.isRowHeader)\n                    && e.cell.header;\n            if (self.attributes.showFilter && isNormalCell) {\n                createFilterContextMenuItems(e);\n            }\n            if (self.attributes.showCopy\n                    && self.selections.reduce(function (p, r) {\n                        return p + r.length;\n                    }, 0) > 0) {\n                e.items.push({\n                    title: self.attributes.copyText,\n                    click: function () {\n                        document.execCommand('copy');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.saveAppearance && self.attributes.showClearSettingsOption\n                    && (Object.keys(self.sizes.rows).length > 0\n                        || Object.keys(self.sizes.columns).length > 0)) {\n                e.items.push({\n                    title: self.attributes.clearSettingsOptionText,\n                    click: function (e) {\n                        e.preventDefault();\n                        self.sizes.rows = {};\n                        self.sizes.columns = {};\n                        self.createRowOrders();\n                        self.createColumnOrders();\n                        self.storedSettings = undefined;\n                        self.dispatchEvent('resizecolumn', {columnWidth: self.style.columnWidth});\n                        self.dispatchEvent('resizerow', {cellHeight: self.style.cellHeight});\n                        self.setStorageData();\n                        self.resize(true);\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.allowSorting && self.attributes.showOrderByOption && isNormalCell) {\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextAsc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'asc');\n                        self.controlInput.focus();\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextDesc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'desc');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n        }\n        self.disposeAutocomplete = function () {\n            if (autoCompleteContext) {\n                autoCompleteContext.dispose();\n                autoCompleteContext = undefined;\n            }\n        };\n        self.disposeContextMenu = function () {\n            document.removeEventListener('click', self.disposeContextMenu);\n            zIndexTop = 2;\n            self.disposeAutocomplete();\n            if (self.contextMenu) {\n                self.contextMenu.dispose();\n            }\n            self.contextMenu = undefined;\n        };\n        self.contextmenuEvent = function (e, overridePos) {\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            function createDiposeEvent() {\n                requestAnimationFrame(function () {\n                    document.addEventListener('click', self.disposeContextMenu);\n                    document.removeEventListener('mouseup', createDiposeEvent);\n                });\n            }\n            var items = [],\n                pos = overridePos || self.getLayerPos(e, true),\n                ev = {\n                    NativeEvent: e,\n                    cell: self.getCellAt(pos.x, pos.y),\n                    items: items\n                };\n            if (!ev.cell.isGrid) {\n                addDefaultContextMenuItem(ev);\n            }\n            if (self.dispatchEvent('contextmenu', ev)) {\n                return;\n            }\n            if (!ev.cell.isGrid) {\n                if (self.contextMenu) {\n                    self.disposeContextMenu();\n                }\n                self.contextMenu = createContextMenu(ev, {\n                    left: pos.x + pos.rect.left + self.style.contextMenuMarginLeft + self.canvasOffsetLeft,\n                    top: pos.y + pos.rect.top + self.style.contextMenuMarginTop + self.canvasOffsetTop,\n                    right: ev.cell.width + ev.cell.x + pos.rect.left,\n                    bottom: ev.cell.height + ev.cell.y + pos.rect.top,\n                    height: ev.cell.height,\n                    width: ev.cell.width\n                }, items);\n                document.addEventListener('mouseup', createDiposeEvent);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/contextMenu.js\n// module id = 6\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.getClippingRect = function (ele) {\n            var boundingRect = self.position(self.parentNode),\n                eleRect = self.position(ele),\n                s = self.scrollOffset(self.canvas),\n                clipRect = {\n                    x: 0,\n                    y: 0,\n                    h: 0,\n                    w: 0\n                },\n                parentRect = {\n                    x: -Infinity,\n                    y: -Infinity,\n                    h: Infinity,\n                    w: Infinity\n                },\n                rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth();\n            boundingRect.top -= s.top;\n            boundingRect.left -= s.left;\n            eleRect.top -= s.top;\n            eleRect.left -= s.left;\n            clipRect.h = boundingRect.top + boundingRect.height - ele.offsetTop - self.style.scrollBarWidth;\n            clipRect.w = boundingRect.left + boundingRect.width - ele.offsetLeft - self.style.scrollBarWidth;\n            clipRect.x = boundingRect.left + (eleRect.left * -1) + columnHeaderCellWidth;\n            clipRect.y = boundingRect.top + (eleRect.top * -1) + rowHeaderCellHeight;\n            return {\n                x: clipRect.x > parentRect.x ? clipRect.x : parentRect.x,\n                y: clipRect.y > parentRect.y ? clipRect.y : parentRect.y,\n                h: clipRect.h < parentRect.h ? clipRect.h : parentRect.h,\n                w: clipRect.w < parentRect.w ? clipRect.w : parentRect.w\n            };\n        };\n        self.clipElement = function (ele) {\n            var clipRect = self.getClippingRect(ele);\n            if (clipRect.w < 0) { clipRect.w = 0; }\n            if (clipRect.h < 0) { clipRect.h = 0; }\n            ele.style.clip = 'rect('\n                + clipRect.y + 'px,'\n                + clipRect.w + 'px,'\n                + clipRect.h + 'px,'\n                + clipRect.x + 'px'\n                + ')';\n            // INFO https://developer.mozilla.org/en-US/docs/Web/CSS/clip\n            // clip has been \"deprecated\" for clipPath.  Of course nothing but chrome\n            // supports clip path, so we'll keep using clip until someday clipPath becomes\n            // more widely support.  The code below works correctly, but setting clipPath and clip\n            // at the same time has undesirable results.\n            // ele.style.clipPath = 'polygon('\n            //     + clipRect.x + 'px ' + clipRect.y + 'px,'\n            //     + clipRect.x + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.y + 'px'\n            //     + ')';\n        };\n        self.scrollOffset = function (e) {\n            var x = 0, y = 0;\n            while (e.parentNode && e.nodeName !== 'CANVAS-DATAGRID') {\n                if (e.nodeType !== 'canvas-datagrid-tree'\n                        && e.nodeType !== 'canvas-datagrid-cell') {\n                    x -= e.scrollLeft;\n                    y -= e.scrollTop;\n                }\n                e = e.parentNode;\n            }\n            return {left: x, top: y};\n        };\n        self.resizeEditInput = function () {\n            if (self.input) {\n                var pos = self.canvas.getBoundingClientRect(),\n                    s = self.scrollOffset(self.canvas),\n                    bx2 = (self.style.cellBorderWidth * 2),\n                    cell = self.getVisibleCellByIndex(self.input.editCell.columnIndex, self.input.editCell.rowIndex)\n                        || {x: -100, y: -100, height: 0, width: 0};\n                self.input.style.left = pos.left + cell.x - self.style.cellBorderWidth + self.canvasOffsetLeft - s.left + 'px';\n                self.input.style.top = pos.top + cell.y - bx2 + self.canvasOffsetTop - s.top + 'px';\n                self.input.style.height = cell.height - bx2 - 1 + 'px';\n                self.input.style.width = cell.width - bx2 - self.style.cellPaddingLeft + 'px';\n                self.clipElement(self.input);\n            }\n        };\n        self.position = function (e, ignoreScrollOffset) {\n            var x = 0, y = 0, s = e, h, w;\n            while (e.offsetParent && e.nodeName !== 'CANVAS-DATAGRID') {\n                x += e.offsetLeft;\n                y += e.offsetTop;\n                h = e.offsetHeight;\n                w = e.offsetWidth;\n                e = e.offsetParent;\n            }\n            if (ignoreScrollOffset) {\n                return {left: x, top: y, height: h, width: w};\n            }\n            e = s;\n            s = self.scrollOffset(e);\n            return { left: x + s.left, top: y + s.top, height: h, width: w };\n        };\n        self.getLayerPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.clientX - rect.left,\n                    y: e.clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        /**\n         * Ends editing, optionally aborting the edit.\n         * @memberof canvasDatagrid\n         * @name endEdit\n         * @method\n         * @param {boolean} abort When true, abort the edit.\n         */\n        self.endEdit = function (abort) {\n            var cell = self.input.editCell,\n                y = cell.rowIndex;\n            function abortEdit() {\n                abort = true;\n            }\n            if (self.dispatchEvent('beforeendedit', {\n                    cell: cell,\n                    newValue: self.input.value,\n                    oldValue: cell.value,\n                    abort: abortEdit,\n                    input: self.input\n                })) { return false; }\n            if (self.input.value !== cell.value && !abort) {\n                self.changes[y] = self.changes[y] || {};\n                self.changes[y][cell.header.name] = self.input.value;\n                cell.data[cell.header.name] = self.input.value;\n                if (y === self.data.length) {\n                    if (self.dispatchEvent('newrow', {\n                            value: self.input.value,\n                            defaultValue: cell.value,\n                            aborted: abort,\n                            cell: cell,\n                            input: self.input\n                        })) { return false; }\n                    self.uId += 1;\n                    self.addRow(cell.data);\n                    self.createNewRowData();\n                }\n                self.draw(true);\n            }\n            document.body.removeChild(self.input);\n            self.controlInput.focus();\n            self.dispatchEvent('endedit', {\n                cell: cell,\n                value: self.input.value,\n                aborted: abort,\n                input: self.input\n            });\n            self.input = undefined;\n            return true;\n        };\n        /**\n         * Begins editing at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name beginEditAt\n         * @method\n         * @param {number} x The column index of the cell to edit.\n         * @param {number} y The row index of the cell to edit.\n         */\n        self.beginEditAt = function (x, y) {\n            if (!self.attributes.editable) { return; }\n            var cell = self.getVisibleCellByIndex(x, y),\n                s = self.getVisibleSchema(),\n                enumItems,\n                //HACK for IE10, does not like literal enum\n                enu = cell.header['enum'],\n                option,\n                valueInEnum;\n            if (self.dispatchEvent('beforebeginedit', {cell: cell})) { return false; }\n            self.scrollIntoView(x, y);\n            self.setActiveCell(x, y);\n            if (enu) {\n                self.input = document.createElement('select');\n            } else {\n                self.input = document.createElement(self.attributes.multiLine\n                    ? 'textarea' : 'input');\n            }\n            cell = self.getVisibleCellByIndex(x, y);\n            if (enu) {\n                // add enums\n                if (typeof enu === 'function') {\n                    enumItems = enu.apply(self.intf, [{cell: cell}]);\n                } else if (Array.isArray(enu)) {\n                    enumItems = enu;\n                }\n                enumItems.forEach(function (e) {\n                    var i = document.createElement('option'),\n                        val,\n                        title;\n                    if (Array.isArray(e)) {\n                        val = e[0];\n                        title = e[1];\n                    } else {\n                        val = e;\n                        title = e;\n                    }\n                    if (val === cell.value) { valueInEnum = true; }\n                    i.value = val;\n                    i.innerHTML = title;\n                    self.input.appendChild(i);\n                });\n                if (!valueInEnum) {\n                    option = document.createElement('option');\n                    option.value = cell.value;\n                    option.innerHTML = cell.value;\n                    self.input.appendChild(option);\n                }\n                self.input.addEventListener('change', function () {\n                    self.endEdit();\n                    self.draw(true);\n                });\n            }\n            document.body.appendChild(self.input);\n            self.createInlineStyle(self.input, 'canvas-datagrid-edit-input');\n            self.input.style.position = 'absolute';\n            self.input.editCell = cell;\n            self.resizeEditInput();\n            self.input.style.zIndex = '2';\n            self.input.value = cell.value;\n            self.input.focus();\n            self.input.addEventListener('click', self.stopPropagation);\n            self.input.addEventListener('dblclick', self.stopPropagation);\n            self.input.addEventListener('mouseup', self.stopPropagation);\n            self.input.addEventListener('mousedown', self.stopPropagation);\n            self.input.addEventListener('keydown', function (e) {\n                var nx = cell.columnIndex,\n                    ny = cell.rowIndex;\n                // esc\n                if (e.keyCode === 27) {\n                    self.endEdit(true);\n                    self.draw(true);\n                // enter\n                } else if (e.keyCode === 13\n                        && (!self.attributes.multiLine\n                            || (self.attributes.multiLine && e.shiftKey))) {\n                    self.endEdit();\n                    self.draw(true);\n                } else if (e.keyCode === 9) {\n                    e.preventDefault();\n                    if (!self.endEdit()) {\n                        return;\n                    }\n                    if (e.shiftKey) {\n                        nx -= 1;\n                    } else {\n                        nx += 1;\n                    }\n                    if (nx < 0) {\n                        nx = s.length - 1;\n                        ny -= 1;\n                    }\n                    if (nx > s.length - 1) {\n                        nx = 0;\n                        ny += 1;\n                    }\n                    if (ny < 0) {\n                        ny = self.data.length - 1;\n                    }\n                    if (ny > self.data.length - 1) {\n                        ny = 0;\n                    }\n                    self.scrollIntoView(nx, ny);\n                    self.beginEditAt(nx, ny);\n                }\n            });\n            self.dispatchEvent('beginedit', {cell: cell, input: self.input});\n        };\n        self.createInlineStyle = function (el, className) {\n            var css = {\n                'canvas-datagrid-context-menu-filter-input': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextFilterInputBackground,\n                    color: self.style.contextFilterInputColor,\n                    border: self.style.contextFilterInputBorder,\n                    borderRadius: self.style.contextFilterInputBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextFilterInputFontFamily,\n                    fontSize: self.style.contextFilterInputFontSize\n                },\n                'canvas-datagrid-context-menu-filter-button': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextFilterButtonBorder,\n                    borderRadius: self.style.contextFilterButtonBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFilterButtonFontFamily,\n                    fontSize: self.style.contextMenuFilterButtonFontSize\n                },\n                'canvas-datagrid-context-child-arrow': {\n                    cssFloat: 'right',\n                    color: self.style.childContextMenuArrowColor,\n                    fontSize: self.style.contextMenuChildArrowFontSize,\n                    fontFamily: self.style.contextMenuFontFamily,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-autocomplete': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    position: 'absolute',\n                    zIndex: 3,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-autocomplete-item': {\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor\n                },\n                'canvas-datagrid-autocomplete-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-canvas': {\n                    position: 'absolute',\n                    zIndex: '-1'\n                },\n                'canvas-datagrid': {\n                    position: 'absolute',\n                    background: self.style.backgroundColor,\n                    zIndex: '1',\n                    boxSizing: 'content-box',\n                    padding: '0'\n                },\n                'canvas-datagrid-control-input': {\n                    position: 'fixed',\n                    top: '-5px',\n                    left: '-5px',\n                    border: 'none',\n                    opacity: '0',\n                    cursor: 'pointer',\n                    width: '1px',\n                    height: '1px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize\n                },\n                'canvas-datagrid-edit-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 ' + self.style.editCellPaddingLeft + 'px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.editCellFontFamily,\n                    fontSize: self.style.editCellFontSize,\n                    boxShadow: self.style.editCellBoxShadow,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-context-menu-item': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-context-menu-label': {\n                    margin: self.style.contextMenuLabelMargin,\n                    display: self.style.contextMenuLabelDisplay,\n                    minWidth: self.style.contextMenuLabelMinWidth,\n                    maxWidth: self.style.contextMenuLabelMaxWidth\n                },\n                'canvas-datagrid-context-menu': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-invalid-search-regExp': {\n                    background: self.style.contextMenuFilterInvalidExpresion\n                }\n            };\n            if (css[className]) {\n                Object.keys(css[className]).map(function (prop) {\n                    el.style[prop] = css[className][prop];\n                });\n            }\n            return;\n        };\n        self.appendTo = function (n) {\n            self.parentNode = n || document.createElement('canvas');\n            if (self.parentNode && /canvas-datagrid-(cell|tree)/.test(self.parentNode.nodeType)) {\n                self.isChildGrid = true;\n                self.parentGrid = self.parentNode.parentGrid;\n                self.ctx = self.parentGrid.context;\n                self.canvas = self.parentGrid.canvas;\n                self.controlInput = self.parentGrid.controlInput;\n                self.eventParent = self.canvas;\n            } else {\n                self.controlInput = document.createElement('input');\n                self.controlInput.onblur = self.intf.blur;\n                self.createInlineStyle(self.controlInput, 'canvas-datagrid-control-input');\n                self.isChildGrid = false;\n                self.parentDOMNode = self.parentNode;\n                self.parentNode = self.parentDOMNode;\n                self.parentIsCanvas = /^canvas$/i.test(self.parentDOMNode.tagName);\n                if (self.isComponent) {\n                    self.shadowCss = document.createElement('style');\n                    self.shadowCss.innerHTML = ':host canvas { display:flex; flex-direction: column; padding: 0; margin: 0; }';\n                    self.parentDOMNode = self.parentNode.parentElement;\n                    self.canvas = document.createElement('canvas');\n                    self.parentNode.appendChild(self.shadowCss);\n                    self.parentNode.appendChild(self.canvas);\n                    self.parentNode.appendChild(self.controlInput);\n                } else if (self.parentIsCanvas) {\n                    self.canvas = self.parentDOMNode;\n                    self.parentDOMNode.appendChild(self.controlInput);\n                } else {\n                    self.canvas = document.createElement('canvas');\n                    self.parentDOMNode.appendChild(self.canvas);\n                    self.parentDOMNode.appendChild(self.controlInput);\n                }\n                self.ctx = self.canvas.getContext('2d');\n                self.ctx.textBaseline = 'alphabetic';\n                self.eventParent = self.canvas;\n            }\n            self.controlInput.addEventListener('blur', function (e) {\n                if (e.target !== self.canvas) {\n                    self.hasFocus = false;\n                }\n            });\n            window.addEventListener('resize', self.resize);\n            if (window.MutationObserver) {\n                self.observer = new window.MutationObserver(function (mutations) {\n                    mutations.forEach(function (mutation) {\n                        self.resize(true);\n                    });\n                });\n                [self.canvas.parentNode].forEach(function (el) {\n                    if (!el) { return; }\n                    self.observer.observe(el, { attributes: true });\n                });\n            }\n            self.eventParent.addEventListener('scroll', self.resize, false);\n            self.eventParent.addEventListener('touchstart', self.touchstart, false);\n            self.eventParent.addEventListener('mouseup', self.mouseup, false);\n            self.eventParent.addEventListener('mousedown', self.mousedown, false);\n            self.eventParent.addEventListener('dblclick', self.dblclick, false);\n            self.eventParent.addEventListener('click', self.click, false);\n            self.eventParent.addEventListener('mousemove', self.mousemove);\n            self.eventParent.addEventListener('wheel', self.scrollWheel, false);\n            self.canvas.addEventListener('contextmenu', self.contextmenuEvent, false);\n            (self.isChildGrid ? self.parentGrid : document).addEventListener('copy', self.copy);\n            self.controlInput.addEventListener('keypress', self.keypress, false);\n            self.controlInput.addEventListener('keyup', self.keyup, false);\n            self.controlInput.addEventListener('keydown', self.keydown, false);\n        };\n        self.setDom = function () {\n            if (self.args.parentNode && self.args.parentNode.createShadowRoot) {\n                if (this.isComponent) {\n                    self.shadowRootParentElement = self.args.parentNode.parentElement;\n                } else {\n                    self.shadowRootParentElement = self.args.parentNode;\n                }\n                self.shadowRoot = self.args.parentNode.attachShadow({mode: self.args.debug ? 'open' : 'closed'});\n                self.args.parentNode = self.shadowRoot;\n            }\n            self.appendTo(self.args.parentNode);\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/dom.js\n// module id = 7\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        // all methods here are exposed by intf\n        // to users\n        /**\n         * Converts a integer into a letter A - ZZZZZ...\n         * @memberof canvasDatagrid\n         * @name integerToAlpha\n         * @method\n         * @param {column} n The number to convert.\n         */\n        self.integerToAlpha = function (n) {\n            var ordA = 'a'.charCodeAt(0),\n                ordZ = 'z'.charCodeAt(0),\n                len = ordZ - ordA + 1,\n                s = '';\n            while (n >= 0) {\n                s = String.fromCharCode(n % len + ordA) + s;\n                n = Math.floor(n / len) - 1;\n            }\n            return s;\n        };\n        /**\n         * Inserts a new column before the specified index into the schema.\n         * @see canvasDatagrid#schema\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name insertColumn\n         * @method\n         * @param {column} c The column to insert into the schema.\n         * @param {number} index The index of the column to insert before.\n         */\n        self.insertColumn = function (c, index) {\n            var s = self.getSchema();\n            if (s.length < index) {\n                throw new Error('Index is beyond the length of the schema.');\n            }\n            self.validateColumn(c, s);\n            s.splice(index, 0, c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a column from the schema at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteColumn\n         * @tutorial schema\n         * @method\n         * @param {number} index The index of the column to delete.\n         */\n        self.deleteColumn = function (index) {\n            var s = self.getSchema();\n            // remove data matching this column name from data\n            self.data.forEach(function (row) {\n                delete row[s[index].name];\n            });\n            s.splice(index, 1);\n            self.intf.schema = s;\n        };\n        /**\n         * Adds a new column into the schema.\n         * @see canvasDatagrid#schema\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name addColumn\n         * @method\n         * @param {column} c The column to add to the schema.\n         */\n        self.addColumn = function (c) {\n            var s = self.getSchema();\n            self.validateColumn(c, s);\n            s.push(c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a row from the dataset at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteRow\n         * @method\n         * @param {number} index The index of the row to delete.\n         */\n        self.deleteRow = function (index) {\n            self.originalData.splice(index, 1);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Inserts a new row into the dataset before the specified index.\n         * @memberof canvasDatagrid\n         * @name insertRow\n         * @method\n         * @param {object} d data.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertRow = function (d, index) {\n            if (self.originalData.length < index) {\n                throw new Error('Index is beyond the length of the dataset.');\n            }\n            self.originalData.splice(index, 0, d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[index], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Adds a new row into the dataset.\n         * @memberof canvasDatagrid\n         * @name addRow\n         * @method\n         * @param {object} d data.\n         */\n        self.addRow = function (d) {\n            self.originalData.push(d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[self.originalData.length - 1], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Sets the height of a given row by index number.\n         * @memberof canvasDatagrid\n         * @name setRowHeight\n         * @method\n         * @param {number} rowIndex The index of the row to set.\n         * @param {number} height Height to set the row to.\n         */\n        self.setRowHeight = function (rowIndex, height) {\n            self.sizes.rows[self.data[rowIndex][self.uniqueId]] = height;\n            self.draw(true);\n        };\n        /**\n         * Sets the width of a given column by index number.\n         * @memberof canvasDatagrid\n         * @name setColumnWidth\n         * @method\n         * @param {number} colIndex The index of the column to set.\n         * @param {number} width Width to set the column to.\n         */\n        self.setColumnWidth = function (colIndex, width) {\n            var s = self.getSchema();\n            self.sizes.columns[s[colIndex][self.uniqueId]] = width;\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the width of the columns due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetColumnWidths\n         * @tutorial schema\n         * @method\n         */\n        self.resetColumnWidths = function () {\n            self.sizes.columns = {};\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the height of the rows due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetRowHeights\n         * @tutorial schema\n         * @method\n         */\n        self.resetRowHeights = function () {\n            self.sizes.rows = {};\n            self.draw(true);\n        };\n        /**\n         * Sets the value of the filter.\n         * @memberof canvasDatagrid\n         * @name setFilter\n         * @method\n         * @param {string} column Name of the column to filter.\n         * @param {string} value The value to filter for.\n         */\n        self.setFilter = function (column, value) {\n            function applyFilter() {\n                self.refreshFromOrigialData();\n                Object.keys(self.columnFilters).forEach(function (filter) {\n                    var header = self.getHeaderByName(column);\n                    if (!header) {\n                        return;\n                    }\n                    self.currentFilter = header.filter || self.filter(column.type || 'string');\n                    self.data = self.data.filter(function (row) {\n                        return self.currentFilter(row[filter], self.columnFilters[filter]);\n                    });\n                });\n                self.resize();\n                self.draw(true);\n            }\n            if (column === undefined && value === undefined) {\n                self.columnFilters = {};\n                return applyFilter();\n            }\n            if (column && (value === '' || value === undefined)) {\n                delete self.columnFilters[column];\n            } else {\n                self.columnFilters[column] = value;\n            }\n            applyFilter();\n        };\n        /**\n         * Returns the number of pixels to scroll down to line up with row rowIndex.\n         * @memberof canvasDatagrid\n         * @name findRowScrollTop\n         * @method\n         * @param {number} rowIndex The row index of the row to scroll find.\n         */\n        self.findRowScrollTop = function (rowIndex) {\n            var top = 0, x = 0, l = self.data.length,\n                cellBorder = self.style.cellBorderWidth * 2;\n            if (!self.attributes.showNewRow) {\n                l -= 1;\n            }\n            if (rowIndex > l) {\n                throw new Error('Impossible row index');\n            }\n            while (x < rowIndex) {\n                top += (self.sizes.rows[self.data[x][self.uniqueId]] || self.style.cellHeight) + cellBorder;\n                x += 1;\n            }\n            //TODO: This is not super accurate, causes pageUp/Dn to not move around right\n            return top - (self.sizes.rows[self.data[rowIndex][self.uniqueId]] || self.style.cellHeight);\n        };\n        /**\n         * Returns the number of pixels to scroll to the left to line up with column columnIndex.\n         * @memberof canvasDatagrid\n         * @name findColumnScrollLeft\n         * @method\n         * @param {number} columnIndex The column index of the column to find.\n         */\n        self.findColumnScrollLeft = function (columnIndex) {\n            var left = 0, y = 0, s = self.getSchema(), l = s.length - 1;\n            if (columnIndex > l) {\n                throw new Error('Impossible column index');\n            }\n            while (y < columnIndex) {\n                left += self.sizes.columns[s[y][self.uniqueId]] || s[y].width;\n                y += 1;\n            }\n            return left;\n        };\n        /**\n         * Scrolls the cell at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name gotoCell\n         * @method\n         * @param {number} x The column index of the cell to scroll to.\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoCell = function (x, y) {\n            if (x !== undefined) {\n                self.scrollBox.scrollLeft = self.findColumnScrollLeft(x);\n            }\n            if (y !== undefined) {\n                self.scrollBox.scrollTop = self.findRowScrollTop(y);\n            }\n        };\n        /**\n         * Scrolls the row y.\n         * @memberof canvasDatagrid\n         * @name gotoRow\n         * @method\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoRow = function (y) {\n            self.gotoCell(0, y);\n        };\n        /**\n         * Scrolls the cell at cell x, row y into view if it is not already.\n         * @memberof canvasDatagrid\n         * @name scrollIntoView\n         * @method\n         * @param {number} x The column index of the cell to scroll into view.\n         * @param {number} y The row index of the cell to scroll into view.\n         */\n        self.scrollIntoView = function (x, y) {\n            if (self.visibleCells.filter(function (cell) {\n                    return (cell.rowIndex === y || y === undefined)\n                        && (cell.columnIndex === x || x === undefined)\n                        && cell.x > 0\n                        && cell.y > 0\n                        && cell.x + cell.width < self.width\n                        && cell.y + cell.height < self.height;\n                }).length === 0) {\n                self.gotoCell(x, y);\n            }\n        };\n        /**\n         * Sets the active cell. Requires redrawing.\n         * @memberof canvasDatagrid\n         * @name setActiveCell\n         * @method\n         * @param {number} x The column index of the cell to set active.\n         * @param {number} y The row index of the cell to set active.\n         */\n        self.setActiveCell = function (x, y) {\n            self.activeCell = {\n                rowIndex: y,\n                columnIndex: x\n            };\n        };\n        /**\n         * Selects every visible cell.\n         * @memberof canvasDatagrid\n         * @name selectAll\n         * @method\n         */\n        self.selectAll = function () {\n            self.selectArea({\n                top: 0,\n                left: 0,\n                right: self.getVisibleSchema().length - 1,\n                bottom: self.data.length - 1\n            });\n        };\n        /**\n         * Returns true if the selected columnIndex is selected on every row.\n         * @memberof canvasDatagrid\n         * @name isColumnSelected\n         * @method\n         * @param {number} columnIndex The column index to check.\n         */\n        self.isColumnSelected = function (columnIndex) {\n            var colIsSelected = true;\n            self.data.forEach(function (row, rowIndex) {\n                if (!self.selections[rowIndex] || self.selections[rowIndex].indexOf(self.orders.columns[columnIndex]) === -1) {\n                    colIsSelected = false;\n                }\n            });\n            return colIsSelected;\n        };\n        /**\n         * Selects a column.\n         * @memberof canvasDatagrid\n         * @name selectColumn\n         * @method\n         * @param {number} columnIndex The column index to select.\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the column.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the column.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectColumn = function (columnIndex, ctrl, shift, supressEvent) {\n            var s, e, x;\n            function addCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) === -1) {\n                        self.selections[rowIndex].push(i);\n                    }\n                });\n            }\n            function removeCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) !== -1) {\n                        self.selections[rowIndex].splice(self.selections[rowIndex].indexOf(i), 1);\n                    }\n                });\n            }\n            if (shift) {\n                if (!self.activeCell) { return; }\n                s = Math.min(self.activeCell.columnIndex, columnIndex);\n                e = Math.max(self.activeCell.columnIndex, columnIndex);\n                for (x = s; e > x; x += 1) {\n                    addCol(x);\n                }\n            }\n            if (!ctrl && !shift) {\n                self.selections = [];\n                self.activeCell.columnIndex = columnIndex;\n                self.activeCell.rowIndex = self.scrollIndexTop;\n            }\n            if (ctrl && self.isColumnSelected(columnIndex)) {\n                removeCol(columnIndex);\n            } else {\n                addCol(columnIndex);\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.getSelectionBounds()\n            });\n        };\n        /**\n         * Selects a row.\n         * @memberof canvasDatagrid\n         * @name selectRow\n         * @method\n         * @param {number} rowIndex The row index to select.\n         * @param {boolean} ctrl When true, behaves as if you were holding control/command when you clicked the row.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the row.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectRow = function (rowIndex, ctrl, shift, supressEvent) {\n            var x, st, en, s = self.getSchema();\n            function addRow(ri) {\n                self.selections[ri] = [];\n                self.selections[ri].push(-1);\n                s.forEach(function (col) {\n                    self.selections[ri].push(col.index);\n                });\n            }\n            if (self.dragAddToSelection === false || self.dragObject === undefined) {\n                if (self.selections[rowIndex] && self.selections[rowIndex].length - 1 === s.length) {\n                    if (ctrl) {\n                        self.selections[rowIndex] = [];\n                        return;\n                    }\n                }\n            }\n            if (self.dragAddToSelection === true || self.dragObject === undefined) {\n                if (shift && self.dragObject === undefined) {\n                    if (!self.activeCell) { return; }\n                    st = Math.min(self.activeCell.rowIndex, rowIndex);\n                    en = Math.max(self.activeCell.rowIndex, rowIndex);\n                    for (x = st; en >= x; x += 1) {\n                        addRow(x);\n                    }\n                } else {\n                    addRow(rowIndex);\n                }\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Collapse a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name collapseTree\n         * @method\n         * @param {number} index The index of the row to collapse.\n         */\n        self.collapseTree = function (rowIndex) {\n            var rowId = self.data[rowIndex][self.uniqueId];\n            self.dispatchEvent('collapsetree', {\n                childGrid: self.childGrids[rowId],\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId].blur();\n            self.openChildren[rowId].dispose();\n            delete self.openChildren[rowId];\n            delete self.sizes.trees[rowId];\n            delete self.childGrids[rowId];\n            self.dispatchEvent('resizerow', {\n                cellHeight: self.style.cellHeight\n            });\n            self.resize(true);\n            self.draw(true);\n        };\n        /**\n         * Expands a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name expandTree\n         * @method\n         * @param {number} index The index of the row to expand.\n         */\n        self.expandTree = function (rowIndex) {\n            var rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth,\n                rowId = self.data[rowIndex][self.uniqueId],\n                h = self.sizes.trees[rowId] || self.style.treeGridHeight,\n                treeGrid;\n            if (!self.childGrids[rowId]) {\n                treeGrid = self.createGrid({\n                    debug: self.attributes.debug,\n                    name: self.attributes.saveAppearance\n                        ? self.attributes.name + 'tree' + rowId : undefined,\n                    parentNode: {\n                        parentGrid: self.intf,\n                        nodeType: 'canvas-datagrid-tree',\n                        offsetHeight: h,\n                        offsetWidth: self.width - columnHeaderCellWidth,\n                        header: { width: self.width - columnHeaderCellWidth },\n                        offsetLeft: columnHeaderCellWidth,\n                        offsetTop: rowHeaderCellHeight,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: 'tree',\n                        data: self.data[rowIndex]\n                    }\n                });\n                self.childGrids[rowId] = treeGrid;\n            }\n            treeGrid = self.childGrids[rowId];\n            treeGrid.visible = true;\n            self.dispatchEvent('expandtree', {\n                treeGrid: treeGrid,\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId] = treeGrid;\n            self.sizes.trees[rowId] = h;\n            self.dispatchEvent('resizerow', {height: self.style.cellHeight});\n            self.resize(true);\n        };\n        /**\n         * Toggles tree grid open and close by row index.\n         * @memberof canvasDatagrid\n         * @name toggleTree\n         * @method\n         * @param {number} index The index of the row to toggle.\n         */\n        self.toggleTree = function (rowIndex) {\n            var i = self.openChildren[self.data[rowIndex][self.uniqueId]];\n            if (i) {\n                return self.collapseTree(rowIndex);\n            }\n            self.expandTree(rowIndex);\n        };\n        /**\n         * Returns a header from the schema by name.\n         * @memberof canvasDatagrid\n         * @name getHeaderByName\n         * @tutorial schema\n         * @method\n         * @returns {header} header with the selected name, or undefined.\n         * @param {string} name The name of the column to resize.\n         */\n        self.getHeaderByName = function (name) {\n            var x, i = self.getSchema();\n            for (x = 0; x < i.length; x += 1) {\n                if (i[x].name === name) {\n                    return i[x];\n                }\n            }\n        };\n        /**\n         * Resizes a column to fit the longest value in the column. Call without a value to resize all columns.\n         * Warning, can be slow on very large record sets (1m records ~3-5 seconds on an i7).\n         * @memberof canvasDatagrid\n         * @name fitColumnToValues\n         * @method\n         * @param {string} name The name of the column to resize.\n         */\n        self.fitColumnToValues = function (name, internal) {\n            self.sizes.columns[name === 'cornerCell' ? name : self.getHeaderByName(name)[self.uniqueId]]\n                = self.findColumnMaxTextLength(name);\n            if (!internal) {\n                self.resize();\n                self.draw(true);\n            }\n        };\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @overload\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {number} columnIndex The column index of the cell to check.\n         * @param {number} rowIndex The row index of the cell to check.\n         */\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {cell} cell The cell to check for.  Alternatively you can pass an object { x: <x-pixel-value>, y: <y-pixel-value> }.\n         */\n        self.isCellVisible = function (cell, rowIndex) {\n            // overload\n            if (rowIndex !== undefined) {\n                return self.visibleCells.filter(function (c) {\n                    return c.columnIndex === cell && c.rowIndex === rowIndex;\n                }).length > 0;\n            }\n            var x, l = self.visibleCells.length;\n            for (x = 0; x < l; x += 1) {\n                if (cell.x === self.visibleCells[x].x && cell.y === self.visibleCells[x].y) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n         * Sets the order of the data.\n         * @memberof canvasDatagrid\n         * @name order\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} columnName Number of pixels from the left.\n         * @param {string} direction `asc` for ascending or `desc` for descending.\n         * @param {function} [sortFunction] When defined, override the default sorting method defined in the column's schema and use this one.\n         * @param {bool} [dontSetStorageData] Don't store this setting for future use.\n         */\n        self.order = function (columnName, direction, sortFunction, dontSetStorageData) {\n            var f,\n                c = self.getSchema().filter(function (col) {\n                    return col.name === columnName;\n                });\n            self.orderBy = columnName;\n            if (c.length === 0) {\n                throw new Error('Cannot sort.  No such column name');\n            }\n            f = sortFunction || self.sorters[c[0].type];\n            if (!f && c[0].type !== undefined) {\n                console.warn('Cannot sort type \"%s\" falling back to string sort.', c[0].type);\n            }\n            self.data = self.data.sort(typeof f === 'function' ? f(columnName, direction) : self.sorters.string);\n            self.dispatchEvent('ordercolumn', {name: columnName, direction: direction});\n            self.draw(true);\n            if (dontSetStorageData) { return; }\n            self.setStorageData();\n        };\n        self.isInGrid = function (e) {\n            if (e.x < 0\n                    || e.x > self.width\n                    || e.y < 0\n                    || e.y > self.height) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Checks if a given column is visible.\n         * @memberof canvasDatagrid\n         * @name isRowVisible\n         * @method\n         * @returns {boolean} When true, the row is visible.\n         * @param {number} rowIndex Row index.\n         */\n        self.isColumnVisible = function (columnIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === columnIndex;\n            }).length > 0;\n        };\n        /**\n         * Checks if a given row is visible.\n         * @memberof canvasDatagrid\n         * @name isRowVisible\n         * @method\n         * @returns {boolean} When true, the row is visible.\n         * @param {number} rowIndex Row index.\n         */\n        self.isRowVisible = function (rowIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.rowIndex === rowIndex;\n            }).length > 0;\n        };\n        /**\n         * Gets the cell at columnIndex and rowIndex.\n         * @memberof canvasDatagrid\n         * @name getVisibleCellByIndex\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Column index.\n         * @param {number} y Row index.\n         */\n        self.getVisibleCellByIndex = function (x, y) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === x && c.rowIndex === y;\n            })[0];\n        };\n        /**\n         * Gets the cell at grid pixel coordinate x and y.\n         * @memberof canvasDatagrid\n         * @name getCellAt\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Number of pixels from the left.\n         * @param {number} y Number of pixels from the top.\n         */\n        self.getCellAt = function (x, y, useTouchScrollZones) {\n            var tsz = useTouchScrollZones ? self.attributes.touchScrollZone : 0, i, l = self.visibleCells.length, cell;\n            if (!self.visibleCells || !self.visibleCells.length) { return; }\n            self.hasFocus = true;\n            if (!(y < self.height\n                && y > 0\n                && x < self.width\n                && x > 0)) {\n                self.hasFocus = false;\n                return {\n                    dragContext: 'inherit',\n                    context: 'inherit'\n                };\n            }\n            for (i = 0; i < l; i += 1) {\n                cell = self.visibleCells[i];\n                if (useTouchScrollZones && /(vertical|horizontal)-scroll-/.test(cell.style)) {\n                    cell.x -= tsz;\n                    cell.y -= tsz;\n                    cell.height += tsz;\n                    cell.width += tsz;\n                }\n                if (cell.x - self.style.cellBorderWidth < x\n                        && cell.x + cell.width + self.style.cellBorderWidth > x\n                        && cell.y - self.style.cellBorderWidth < y\n                        && cell.y + cell.height + self.style.cellBorderWidth > y) {\n                    if (/vertical-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'vertical-scroll-box';\n                        cell.context = 'vertical-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isVerticalScrollBar = true;\n                        if (y > self.scrollBox.box.v.y + self.scrollBox.scrollBoxHeight) {\n                            cell.dragContext = 'vertical-scroll-bottom';\n                            cell.context = 'vertical-scroll-bottom';\n                        } else if (y < self.scrollBox.box.v.y) {\n                            cell.dragContext = 'vertical-scroll-top';\n                            cell.context = 'vertical-scroll-top';\n                        }\n                        self.canvas.style.cursor = 'default';\n                        return cell;\n                    }\n                    if (/horizontal-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'horizontal-scroll-box';\n                        cell.context = 'horizontal-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isHorizontalScrollBar = true;\n                        if (x > self.scrollBox.box.h.x + self.scrollBox.scrollBoxWidth) {\n                            cell.dragContext = 'horizontal-scroll-right';\n                            cell.context = 'horizontal-scroll-right';\n                        } else if (x < self.scrollBox.box.h.x) {\n                            cell.dragContext = 'horizontal-scroll-left';\n                            cell.context = 'horizontal-scroll-left';\n                        }\n                        self.canvas.style.cursor = 'default';\n                        return cell;\n                    }\n                    if (cell.x + cell.width - (self.attributes.borderResizeZone * 0.4) < x\n                            && cell.x + cell.width + (self.attributes.borderResizeZone * 0.6) > x\n                            && self.attributes.allowColumnResize\n                            && ((self.attributes.allowColumnResizeFromCell && cell.style === 'cell')\n                                || cell.style !== 'cell')\n                            && ((self.attributes.allowRowHeaderResize\n                                && ['rowHeaderCell', 'cornerCell'].indexOf(cell.style) !== -1)\n                                || ['rowHeaderCell', 'cornerCell'].indexOf(cell.style) === -1)) {\n                        cell.context = 'ew-resize';\n                        cell.dragContext = 'ew-resize';\n                        return cell;\n                    }\n                    if (cell.y + cell.height - (self.attributes.borderResizeZone * 0.4) < y\n                            && cell.y + cell.height + (self.attributes.borderResizeZone * 0.6) > y\n                            && self.attributes.allowRowResize\n                            && ((self.attributes.allowRowResizeFromCell && cell.style === 'cell')\n                                || cell.style !== 'cell')\n                            && cell.style !== 'columnHeaderCell') {\n                        cell.context = 'ns-resize';\n                        cell.dragContext = 'ns-resize';\n                        return cell;\n                    }\n                    if (cell.style === 'columnHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'column-reorder';\n                        return cell;\n                    }\n                    if (cell.style === 'rowHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'row-reorder';\n                        return cell;\n                    }\n                    if (cell.isGrid) {\n                        self.hasFocus = false;\n                        cell.dragContext = 'cell-grid';\n                        cell.context = 'cell-grid';\n                        return cell;\n                    }\n                    if (cell.style === 'tree-grid') {\n                        self.hasFocus = false;\n                        cell.dragContext = 'tree';\n                        cell.context = 'tree';\n                        return cell;\n                    }\n                    cell.dragContext = 'cell';\n                    cell.context = 'cell';\n                    return cell;\n                }\n            }\n            self.hasFocus = true;\n            self.canvas.style.cursor = 'default';\n            return {\n                dragContext: 'background',\n                context: 'background',\n                style: 'background',\n                isBackground: true\n            };\n        };\n        /**\n         * Gets the bounds of current selection. \n         * @returns {rect} selection.\n         * @memberof canvasDatagrid\n         * @name getSelectionBounds\n         * @method\n         */\n        self.getSelectionBounds = function () {\n            var low = {x: Infinity, y: Infinity},\n                high = {x: -Infinity, y: -Infinity};\n            self.data.forEach(function (row, rowIndex) {\n                var maxCol, minCol;\n                if (self.selections[rowIndex] && self.selections[rowIndex].length) {\n                    low.y = rowIndex < low.y ? rowIndex : low.y;\n                    high.y = rowIndex > high.y ? rowIndex : high.y;\n                    maxCol = Math.max.apply(null, self.selections[rowIndex]);\n                    minCol = Math.min.apply(null, self.selections[rowIndex]);\n                    low.x = minCol < low.x ? minCol : low.x;\n                    high.x = maxCol > high.x ? maxCol : high.x;\n                }\n            });\n            return {\n                top: low.y,\n                left: low.x,\n                bottom: high.y,\n                right: high.x\n            };\n        };\n        /**\n         * Returns an auto generated schema based on data structure.\n         * @memberof canvasDatagrid\n         * @name getSchemaFromData\n         * @method\n         * @tutorial schema\n         * @returns {schema} schema A schema based on the first item in the data array.\n         */\n        self.getSchemaFromData = function () {\n            return Object.keys(self.data[0] || {' ': ''}).map(function mapEachSchemaColumn(key, index) {\n                var type = self.getBestGuessDataType(key),\n                    i = {\n                        name: key,\n                        title: isNaN(parseInt(key, 10)) ? key : self.integerToAlpha(key).toUpperCase(),\n                        width: self.style.columnWidth,\n                        index: index,\n                        type: type,\n                        filter: self.filter(type)\n                    };\n                if (key === self.uniqueId) {\n                    i.hidden = true;\n                }\n                i[self.uniqueId] = self.getSchemaNameHash(key);\n                return i;\n            });\n        };\n        /**\n         * Clears the change log grid.changes that keeps track of changes to the data set.\n         * This does not undo changes or alter data it is simply a convince array to keep\n         * track of changes made to the data since last this method was called.\n         * @memberof canvasDatagrid\n         * @name clearChangeLog\n         * @method\n         */\n        self.clearChangeLog = function () {\n            self.changes = [];\n        };\n        /**\n         * Selects an area of the grid.\n         * @memberof canvasDatagrid\n         * @name selectArea\n         * @method\n         * @param {rect} bounds A rect object representing the selected values.\n         */\n        self.selectArea = function (bounds, ctrl) {\n            self.selectionBounds = bounds || self.selectionBounds;\n            var x, y, s = self.getSchema();\n            if (!ctrl) {\n                self.selections = [];\n            }\n            if (self.selectionBounds.top < -1\n                    || self.selectionBounds.bottom > self.data.length\n                    || self.selectionBounds.left < -1\n                    || self.selectionBounds.right > s.length) {\n                throw new Error('Impossible selection area');\n            }\n            for (x = self.selectionBounds.top; x <= self.selectionBounds.bottom; x += 1) {\n                self.selections[x] = [];\n                for (y = self.selectionBounds.left; y <= self.selectionBounds.right; y += 1) {\n                    if (self.selections[x].indexOf(y) === -1) {\n                        self.selections[x].push(y);\n                    }\n                }\n            }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Returns the maximum text width for a given column by column name.\n         * @memberof canvasDatagrid\n         * @name findColumnMaxTextLength\n         * @method\n         * @returns {number} The number of pixels wide the maximum width value in the selected column.\n         * @param {string} name The name of the column to calculate the value's width of.\n         */\n        self.findColumnMaxTextLength = function (name) {\n            var m = -Infinity;\n            if (name === 'cornerCell') {\n                self.ctx.font = self.style.rowHeaderCellFont;\n                return self.ctx.measureText((self.data.length + (self.attributes.showNewRow ? 1 : 0)).toString()).width\n                    + self.style.autosizePadding + self.style.autosizeHeaderCellPadding\n                    + self.style.rowHeaderCellPaddingRight\n                    + self.style.rowHeaderCellPaddingLeft\n                    + (self.attributes.tree ? self.style.treeArrowWidth\n                        + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight : 0);\n            }\n            self.getSchema().forEach(function (col) {\n                if (col.name !== name) { return; }\n                self.ctx.font = self.style.columnHeaderCellFont;\n                var t = self.ctx.measureText(col.title || col.name).width\n                    + self.style.headerCellPaddingRight\n                    + self.style.headerCellPaddingLeft;\n                m = t > m ? t : m;\n            });\n            self.data.forEach(function (row) {\n                self.ctx.font = self.style.cellFont;\n                var t = self.ctx.measureText(row[name]).width\n                    + self.style.cellPaddingRight\n                    + self.style.cellPaddingLeft + self.style.cellAutoResizePadding;\n                m = t > m ? t : m;\n            });\n            return m;\n        };\n        /**\n         * Gets the total width of all header columns.\n         * @memberof canvasDatagrid\n         * @name getHeaderWidth\n         * @method\n         */\n        self.getHeaderWidth = function () {\n            return self.getVisibleSchema().reduce(function (total, header) {\n                return total + header.width;\n            }, 0);\n        };\n        self.formatters.string = function cellFormatterString(e) {\n            return e.cell.value !== undefined ? e.cell.value : '';\n        };\n        self.formatters.rowHeaderCell = self.formatters.string;\n        self.formatters.headerCell = self.formatters.string;\n        self.formatters.number = self.formatters.string;\n        self.formatters.int = self.formatters.string;\n        self.formatters.html = self.formatters.string;\n        self.sorters.string = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (a[columnName] === undefined || a[columnName] === null) {\n                    return 1;\n                }\n                if (b[columnName] === undefined || b[columnName] === null) {\n                    return 0;\n                }\n                if (asc) {\n                    if (!a[columnName].localeCompare) { return 1; }\n                    return a[columnName].localeCompare(b[columnName]);\n                }\n                if (!b[columnName].localeCompare) { return 1; }\n                return b[columnName].localeCompare(a[columnName]);\n            };\n        };\n        self.sorters.number = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return a[columnName] - b[columnName];\n                }\n                return b[columnName] - a[columnName];\n            };\n        };\n        self.sorters.date = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return new Date(a[columnName]).getTime()\n                        - new Date(b[columnName]).getTime();\n                }\n                return new Date(b[columnName]).getTime()\n                        - new Date(a[columnName]).getTime();\n            };\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/publicMethods.js\n// module id = 8\n// module chunks = 0"],"sourceRoot":""}