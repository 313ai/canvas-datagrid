{"version":3,"sources":["webpack:///canvas-datagrid.js","webpack:///webpack/bootstrap 1b1f77de5c4f966ebe32","webpack:///./lib/main.js","webpack:///./lib/draw.js","webpack:///./lib/events.js","webpack:///./lib/intf.js","webpack:///./lib/contextMenu.js","webpack:///./lib/defaults.js","webpack:///./lib/dom.js","webpack:///./lib/publicMethods.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","undefined","grid","args","self","createGrid","orders","rows","columns","hasFocus","activeCell","columnIndex","rowIndex","storageName","invalidSearchExpClass","localStyleLibraryStorageKey","uniqueId","orderBy","orderDirection","columnFilters","filters","ellipsisCache","scrollBox","visibleRows","sizes","trees","currentFilter","selections","hovers","attributes","style","intf","formatters","sorters","schemaHashes","events","uId","changes","scrollIndexTop","scrollPixelTop","scrollIndexLeft","scrollPixelLeft","childGrids","openChildren","scrollModes","mouse","x","y","getSelectedData","expandToRow","getSchema","data","length","forEach","row","index","column","col","scrollOffset","e","parentNode","nodeType","scrollLeft","scrollTop","left","top","position","ignoreScrollOffset","h","w","offsetParent","offsetLeft","offsetTop","offsetHeight","offsetWidth","height","width","getLayerPos","rect","canvas","getBoundingClientRect","pos","clientX","clientY","isChildGrid","canvasOffsetLeft","canvasOffsetTop","fillArray","low","high","step","getHeaderCellHeight","showColumnHeaders","headerCellHeight","getHeaderCellWidth","showRowHeaders","cornerCell","headerRowWidth","setStorageData","saveAppearance","localStorage","setItem","JSON","stringify","schema","tempSchema","createColumnOrders","createRowOrders","getVisibleSchema","filter","hidden","createNewRowData","newRow","header","defaultValue","apply","getSchemaNameHash","key","type","f","console","warn","string","getBestGuessDataType","columnName","t","indexOf","drawChildGrids","keys","gridKey","draw","resizeChildGrids","resize","getClippingRect","ele","boundingRect","eleRect","clipRect","parentRect","Infinity","headerCellWidth","scrollBarWidth","clipElement","clip","autoScrollZone","ctrl","setTimer","selectionScrollZone","selectionScrollIncrement","currentCell","scrollTimer","setTimeout","mousemove","scrollRepeatRate","refreshFromOrigialData","originalData","validateColumn","Error","setDefaults","obj1","obj2","def","setAttributes","defaults","setStyle","styles","autosize","colName","fitColumnToValues","dispose","removeChild","eventParent","removeEventListener","mouseup","mousedown","dblclick","click","scrollWheel","contextmenu","copy","controlInput","keypress","keyup","keydown","window","observer","disconnect","tryLoadStoredOrders","storedSettings","push","getHeaderByName","order","getFontHeight","fontStyle","parseFloat","getFontHeightLong","pixels","start","end","document","createElement","ctx","getContext","save","fillRect","textBaseline","fillStyle","font","fillText","getImageData","restore","log","parseFont","test","init","publicStyleKeyIntf","initScrollBox","setDom","addEventListener","dispatchEvent","appendTo","beginEditAt","endEdit","setActiveCell","scrollIntoView","clearChangeLog","gotoCell","gotoRow","findColumnScrollLeft","findRowScrollTop","findColumnMaxTextLength","disposeContextMenu","getCellAt","isCellVisible","selectArea","getSchemaFromData","setFilter","selectRow","parentGrid","toggleTree","expandTree","collapseTree","context","insertRow","deleteRow","addRow","insertColumn","deleteColumn","addColumn","setRowHeight","setColumnWidth","resetColumnWidths","resetRowHeights","set","value","filterFor","filterRegExp","invalidFilterRegEx","RegExp","number","getItem","parse","Array","slice","arguments","canvasDatagrid","drawOnAllImagesLoaded","loaded","htmlImageCache","html","complete","drawHtml","cell","img","v","innerHTML","formattedValue","drawImage","Image","onload","src","btoa","drawOrderByArrow","headerOrderByArrowColor","strokeStyle","headerOrderByArrowBorderColor","beginPath","headerOrderByArrowMarginLeft","headerOrderByArrowMarginTop","moveTo","lineTo","headerOrderByArrowWidth","headerOrderByArrowHeight","stroke","fill","headerOrderByArrowMarginRight","drawTreeArrow","treeArrowColor","treeArrowBorderColor","treeArrowMarginLeft","treeArrowMarginTop","treeArrowWidth","treeArrowHeight","treeArrowMarginRight","radiusRect","radius","r","b","quadraticCurveTo","strokeRect","text","addBorderLine","addEllipsis","measureText","drawText","paddingLeft","paddingTop","paddingRight","paddingBottom","vPos","hPos","orderByArrowWidth","fontHeight","horizontalAlignment","verticalAlignment","perfCounters","drawCount","perfWindowSize","internal","drawCell","rowOrderIndex","headerIndex","columnOrderIndex","childGridAttributes","val","cellStyle","isHeader","isCorner","isRowHeader","selected","hovered","active","isGrid","isArray","activeHeader","orderByArrowSize","treeArrowSize","cellWidth","ev","columnWidth","borderWidth","cx","cy","cellHeight","isHeaderCellCap","rowOpen","sortColumnIndex","sortRowIndex","gridId","title","userHeight","rowHeight","userWidth","visibleCells","unshift","lineWidth","cellHeightWithChildGrid","checkScrollHeight","cellWidthWithChildGrid","rd","tree","showRowNumbers","visible","toString","filterTextPrefix","aCell","selectionBorders","drawRowHeader","rowData","a","rowHeaderCell","drawRow","treeHeight","rowSansTreeHeight","g","treeGrid","rowHeaders","u","performance","now","cellBorderWidth","scale","devicePixelRatio","backgroundColor","showNewRow","selectionOverlayBorderWidth","selectionOverlayBorderColor","headerCell","rArgs","isHeaderCell","endCap","rowSelectionMode","activeCellOverlayBorderWidth","activeCellOverlayBorderColor","getHeaderWidth","reorderObject","dragOffset","heigth","reorderMarkerBackgroundColor","reorderMarkerBorderWidth","reorderMarkerBorderColor","dragMode","reorderMarkerIndexBorderWidth","reorderMarkerIndexBorderColor","vb","nb","co","isScrollBoxCorner","scrollBarBoxMargin","scrollBarBorderColor","scrollBarBorderWidth","scrollBarBackgroundColor","scrollBoxHeight","scrollHeight","scrollBarBoxWidth","scrollBarBoxColor","scrollBarActiveColor","scrollBarBoxBorderRadius","scrollBoxWidth","scrollWidth","scrollBarCornerBorderColor","scrollBarCornerBackgroundColor","bar","box","gridBorderWidth","gridBorderColor","debug","perf","reduce","toFixed","map","join","htmlImages","mousex","mousey","touchx","touchStart","touchy","entities","dragContext","touchDelta","touchAnimateTo","touchSigma","xPPS","yPPS","touchingCell","startingCell","animationFrames","getTouchPos","touches","calculatePPS","touchCell","clearInterval","touchCalcTimeout","Math","abs","touchDeadZone","touchstart","NativeEvent","stopPropagation","preventDefault","touchScrollStart","touchmove","clearTimeout","touchTimeout","touchSelectTimeMs","setInterval","touchHaltAnimation","body","passive","touchend","touchcancel","easing","touchEndAnimation","scrollTo","requestAnimationFrame","touchReleaseAnimationDurationMs","dz","touchReleaseAcceleration","fn","sfn","idx","splice","defaultPrevented","drawAfterResize","cellBorder","headerCellBorder","headerCellBorderWidth","parentDOMNode","accumulator","widthBoxRatio","heightBoxRatio","max","scrollBarBoxMinSize","page","pageUpDownOverlap","resizeEditInput","input","bx2","getVisibleCellByIndex","editCell","cellPaddingLeft","scroll","overridePos","contextMenu","dragBounds","sBounds","delta","controlKey","metaKey","persistantSelectionMode","previousCell","isInGrid","cellBoundaryCrossed","draggingItem","dragItem","cursor","selecting","getSelectionBounds","dragStart","dragStartObject","shiftKey","min","bottom","right","ignoreNextClick","dragAddToSelection","selectionBounds","abort","abortEdit","newValue","oldValue","aborted","focus","postDraw","option","valueInEnum","enum","enumItems","appendChild","multiLine","createInlineStyle","zIndex","nx","ny","keyCode","editable","checkSelectionChange","selectionChanged","selectedData","treeArrowClickRadius","dragResizeColumn","resizingStartingWidth","resizingStartingHeight","minColumnWidth","minRowHeight","resizeScrollZone","globalRowResize","stopDragResize","scrollGrid","scrollMode","scrollStartMode","scrollStart","stopScrollGrid","dragReorder","allowColumnReordering","allowRowReordering","source","target","reorderDeadZone","reorderTarget","stopDragReorder","cr","row-reorder","column-reorder","lastMouseDownTarget","button","last","cols","selectionFollowsActiveCell","deltaY","deltaX","clipboardData","sData","setData","blur","normalizeDataset","integerToAlpha","toUpperCase","autoResizeColumns","createContextMenu","items","parentContextMenu","createItems","item","removeChildContext","relatedTarget","container","childMenuArrow","contextItemContainer","children","setAttribute","contextAddCallback","getAttribute","cPos","childContextMenuMarginLeft","childContextMenuMarginTop","createChildContext","addContent","content","childContextMenuArrowHTML","clickIndex","Event","checkArrowVisibility","upArrow","downArrow","startHoverScroll","contextHoverScrollAmount","hoverScrollTimeout","contextHoverScrollRateMs","endHoverScroll","selectedIndex","loc","zIndexTop","color","contextMenuArrowColor","el","textAlign","inputDropdown","maxHeight","innerHeight","autocompleteBottomMargin","minWidth","contextMenuArrowUpHTML","contextMenuArrowDownHTML","contextMenuWindowMargin","innerWidth","isNaN","isFinite","createFilterContextMenuItems","fillAutoComplete","autoCompleteItems","filterInput","disposeAutocomplete","createAutoCompleteContext","iRect","autoCompleteContext","filterContainer","filterLabel","filterAutoCompleteButton","onclick","filterOptionText","replace","contextFilterButtonHTML","cf","removeFilterOptionText","addDefaultContextMenuItem","isNormalCell","isBackground","isScrollBar","showFilter","showCopy","copyText","execCommand","showClearSettingsOption","clearSettingsOptionText","allowSorting","showOrderByOption","showOrderByOptionTextAsc","showOrderByOptionTextDesc","contextmenuEvent","contextMenuMarginLeft","contextMenuMarginTop","className","css","canvas-datagrid-context-menu-filter-input","verticalAlign","marginLeft","padding","background","contextFilterInputBackground","contextFilterInputColor","border","contextFilterInputBorder","borderRadius","contextFilterInputBorderRadius","lineHeight","fontWeight","fontFamily","contextFilterInputFontFamily","fontSize","contextFilterInputFontSize","canvas-datagrid-context-menu-filter-button","contextMenuBackground","contextMenuColor","contextFilterButtonBorder","contextFilterButtonBorderRadius","contextMenuFilterButtonFontFamily","contextMenuFilterButtonFontSize","canvas-datagrid-context-child-arrow","cssFloat","childContextMenuArrowColor","contextMenuChildArrowFontSize","contextMenuFontFamily","canvas-datagrid-autocomplete","contextMenuFontSize","contextMenuBorder","contextMenuPadding","contextMenuBorderRadius","opacity","contextMenuOpacity","overflow","canvas-datagrid-autocomplete-item","canvas-datagrid-autocomplete-item:hover","contextMenuHoverBackground","contextMenuHoverColor","canvas-datagrid-canvas","canvas-datagrid","boxSizing","canvas-datagrid-control-input","canvas-datagrid-edit-input","outline","margin","editCellPaddingLeft","editCellFontFamily","editCellFontSize","boxShadow","editCellBoxShadow","editCellBorder","editCellColor","editCellBackgroundColor","appearance","webkitAppearance","mozAppearance","canvas-datagrid-context-menu-item","contextMenuItemMargin","contextMenuItemBorderRadius","canvas-datagrid-context-menu-item:hover","canvas-datagrid-context-menu-label","contextMenuLabelMargin","display","contextMenuLabelDisplay","contextMenuLabelMinWidth","maxWidth","contextMenuLabelMaxWidth","canvas-datagrid-context-menu","canvas-datagrid-invalid-search-regExp","contextMenuFilterInvalidExpresion","prop","onblur","MutationObserver","mutations","mutation","observe","setScrollTop","preventScrollEvent","setScrollLeft","sHeight","sWidth","ordA","charCodeAt","ordZ","len","String","fromCharCode","floor","colIndex","applyFilter","coulumn","supressEvent","rowId","childGrid","treeGridHeight","direction","dontSetStorageData","sort","useTouchScrollZones","tsz","touchScrollZone","isVerticalScrollBar","isHorizontalScrollBar","borderResizeZone","allowColumnResize","allowColumnResizeFromCell","allowRowHeaderResize","allowRowResize","allowRowResizeFromCell","maxCol","minCol"," ","bounds","rowHeaderCellFont","autosizePadding","autosizeHeaderCellPadding","rowHeaderCellPaddingRight","rowHeaderCellPaddingLeft","headerCellFont","headerCellPaddingRight","headerCellPaddingLeft","cellFont","cellPaddingRight","cellAutoResizePadding","total","int","asc","localeCompare","date","Date","getTime"],"mappings":"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ArM,OAAAiR,EAAA5E,KAAAjO,EAAAkC,EAAAH,KAAAb,IACAU,OAAAiR,EAAA5E,KAAArM,OACAC,MAAAgR,EAAA5E,KAAApM,OACiB6gB,GACjBlZ,SAAAmB,iBAAA,QAAAtN,EAAAmO,oBACA5K,EAAA2Z,sBAKCnW,MAAA5I,EAAAwB,MAAAvB,EAAAD,QAAAyB,INi4FK,SAAUxB,EAAQD,EAASH,GOp1GjC,GAAA2B,GAAAC,CAEAD,UAgOCE,MAhODD,EAAA,WACA,YACA,iBAAAI,GACAA,EAAA+J,UACAtI,aACA,YACA,YACA,kBACA,4BACA,sBACA,kCACA,iBACA,gBACA,6BACA,0BACA,oBACA,kBACA,uBACA,wBACA,+BACA,wBACA,yBACA,4BACA,yBACA,sBACA,8BACA,iCACA,aACA,wBACA,yBACA,sBACA,sBACA,wBACA,2BACA,wBACA,+BACA,+BACA,gCACA,sBACA,+BACA,yBACA,mDACA,qDACA,uDACA,iDACA,iCACA,mCACA,wCACA,gCACA,oBACA,0BACA,uBACA,oBACA,gBAEAwI,SACA,uDACA,mDACA,8BACA,uCACA,qCACA,4DACA,4CACA,yDACA,qCACA,8BACA,4BACA,6BACA,2BACA,+DACA,+CACA,6DACA,6CACA,gEACA,gDACA,gCACA,gCACA,sBACA,6CACA,6BACA,iDACA,6CACA,wBACA,iCACA,+BACA,kBACA,gCACA,mCACA,sDACA,sCACA,wBACA,sBACA,uBACA,qBACA,yDACA,yCACA,mCACA,+BACA,mCACA,gCACA,yCACA,qDACA,yCACA,oBACA,mDACA,yDACA,kCACA,2CACA,+DACA,uCACA,+BACA,wDACA,iDACA,sCACA,gCACA,2CACA,uCACA,qCACA,oCACA,4BACA,4BACA,8BACA,8BACA,6BACA,sCACA,wCACA,gDACA,uCACA,iEACA,0CACA,mDACA,2CACA,uDACA,4CACA,gEACA,uCACA,8CACA,sCACA,uDACA,mDACA,sDACA,kDACA,oCACA,4BACA,0BACA,0BACA,oCACA,6CACA,sBACA,uDACA,mDACA,8BACA,0CACA,qCACA,w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","file":"canvas-datagrid.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n    __webpack_require__(1),\n    __webpack_require__(2),\n    __webpack_require__(3),\n    __webpack_require__(4),\n    __webpack_require__(5),\n    __webpack_require__(6),\n    __webpack_require__(7)\n], __WEBPACK_AMD_DEFINE_RESULT__ = function context() {\n    'use strict';\n    var modules = Array.prototype.slice.call(arguments);\n    function grid(args) {\n        args = args || {};\n        var self = {};\n        self.args = args;\n        self.createGrid = grid;\n        self.orders = {\n            rows: [],\n            columns: []\n        };\n        self.hasFocus = false;\n        self.activeCell = {\n            columnIndex: 0,\n            rowIndex: 0\n        };\n        self.storageName = 'canvasDataGrid';\n        self.invalidSearchExpClass = 'canvas-datagrid-invalid-search-regExp';\n        self.localStyleLibraryStorageKey = 'canvas-datagrid-user-style-library';\n        self.uniqueId = '_canvasDataGridUniqueId';\n        self.orderBy = self.uniqueId;\n        self.orderDirection = 'asc';\n        self.columnFilters = {};\n        self.filters = {};\n        self.ellipsisCache = {};\n        self.scrollBox = {};\n        self.visibleRows = [];\n        self.sizes = {\n            rows: {},\n            columns: {},\n            trees: {}\n        };\n        self.currentFilter = function () {\n            return true;\n        };\n        self.selections = [];\n        self.hovers = {};\n        self.attributes = {};\n        self.style = {};\n        self.intf = {};\n        self.formatters = {};\n        self.sorters = {};\n        self.schemaHashes = {};\n        self.events = {};\n        self.uId = 0;\n        self.changes = [];\n        self.scrollIndexTop = 0;\n        self.scrollPixelTop = 0;\n        self.scrollIndexLeft = 0;\n        self.scrollPixelLeft = 0;\n        self.childGrids = {};\n        self.openChildren = {};\n        self.scrollModes = [\n            'vertical-scroll-box',\n            'vertical-scroll-top',\n            'vertical-scroll-bottom',\n            'horizontal-scroll-box',\n            'horizontal-scroll-right',\n            'horizontal-scroll-left'\n        ];\n        self.mouse = { x: 0, y: 0};\n        self.getSelectedData = function (expandToRow) {\n            var d = [], s = self.getSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                d[index] = {};\n                if (expandToRow) {\n                    s.forEach(function (column) {\n                        d[index][column.name] = self.data[index][column.name];\n                    });\n                } else {\n                    row.forEach(function (col) {\n                        if (col === -1) { return; }\n                        d[index][s[col].name] = self.data[index][s[col].name];\n                    });\n                }\n            });\n            return d;\n        };\n        self.scrollOffset = function (e) {\n            var x = 0, y = 0;\n            while (e.parentNode) {\n                if (e.nodeType !== 'canvas-datagrid-tree'\n                        && e.nodeType !== 'canvas-datagrid-cell') {\n                    x -= e.scrollLeft;\n                    y -= e.scrollTop;\n                }\n                e = e.parentNode;\n            }\n            return {left: x, top: y};\n        };\n        self.position = function (e, ignoreScrollOffset) {\n            var x = 0, y = 0, s = e, h, w;\n            while (e.offsetParent) {\n                x += e.offsetLeft;\n                y += e.offsetTop;\n                h = e.offsetHeight;\n                w = e.offsetWidth;\n                e = e.offsetParent;\n            }\n            if (ignoreScrollOffset) {\n                return {left: x, top: y, height: h, width: w};\n            }\n            e = s;\n            s = self.scrollOffset(e);\n            return { left: x + s.left, top: y + s.top, height: h, width: w };\n        };\n        self.getLayerPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.clientX - rect.left,\n                    y: e.clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        self.fillArray = function (low, high, step) {\n            step = step || 1;\n            var i = [], x;\n            for (x = low; x <= high; x += step) {\n                i[x] = x;\n            }\n            return i;\n        };\n        self.getHeaderCellHeight = function () {\n            if (!self.attributes.showColumnHeaders) { return 0; }\n            return self.sizes.rows[-1] || self.style.headerCellHeight;\n        };\n        self.getHeaderCellWidth = function () {\n            if (!self.attributes.showRowHeaders) { return 0; }\n            return self.sizes.columns.cornerCell || self.style.headerRowWidth;\n        };\n        self.setStorageData = function () {\n            if (!self.attributes.saveAppearance) { return; }\n            localStorage.setItem(self.storageName + '-' + self.attributes.name, JSON.stringify({\n                sizes: {\n                    rows: self.sizes.rows,\n                    columns: self.sizes.columns\n                },\n                orders: {\n                    rows: self.orders.rows,\n                    columns: self.orders.columns\n                },\n                orderBy: self.orderBy,\n                orderDirection: self.orderDirection\n            }));\n        };\n        self.getSchema = function () {\n            return self.schema || self.tempSchema;\n        };\n        self.createColumnOrders = function () {\n            var s = self.getSchema();\n            self.orders.columns = self.fillArray(0, s.length - 1);\n        };\n        self.createRowOrders = function () {\n            self.orders.rows = self.fillArray(0, self.data.length - 1);\n        };\n        self.getVisibleSchema = function () {\n            return self.getSchema().filter(function (col) { return !col.hidden; });\n        };\n        self.createNewRowData = function () {\n            self.newRow = {};\n            self.newRow[self.uniqueId] = self.uId;\n            self.uId += 1;\n            self.getSchema().forEach(function forEachHeader(header, index) {\n                var d = header.defaultValue || '';\n                if (typeof d === 'function') {\n                    d = d.apply(self.intf, [header, index]);\n                }\n                self.newRow[header.name] = d;\n            });\n        };\n        self.getSchemaNameHash = function (key) {\n            var n = 0;\n            while (self.schemaHashes[key]) {\n                n += 1;\n                key = key + n;\n            }\n            return key;\n        };\n        self.filter = function (type) {\n            var f = self.filters[type];\n            if (!f && type !== undefined) {\n                console.warn('Cannot find filter for type %s, falling back to substring match.', type);\n                f = self.filters.string;\n            }\n            return f;\n        };\n        self.getBestGuessDataType = function (columnName) {\n            var t, x, l = self.data.length;\n            for (x = 0; x < l; x += 1) {\n                if ([null, undefined].indexOf(self.data[x][columnName]) !== -1) {\n                    t = typeof self.data[x];\n                    return t === 'object' ? 'string' : t;\n                }\n            }\n            return 'string';\n        };\n        self.drawChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].draw();\n            });\n        };\n        self.resizeChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].resize();\n            });\n        };\n        self.getClippingRect = function (ele) {\n            var boundingRect = self.position(self.parentNode),\n                eleRect = self.position(ele),\n                s = self.scrollOffset(self.canvas),\n                clipRect = {\n                    x: 0,\n                    y: 0,\n                    h: 0,\n                    w: 0\n                },\n                parentRect = {\n                    x: -Infinity,\n                    y: -Infinity,\n                    h: Infinity,\n                    w: Infinity\n                },\n                headerCellHeight = self.getHeaderCellHeight(),\n                headerCellWidth = self.getHeaderCellWidth();\n            boundingRect.top -= s.top;\n            boundingRect.left -= s.left;\n            eleRect.top -= s.top;\n            eleRect.left -= s.left;\n            clipRect.h = boundingRect.top + boundingRect.height - ele.offsetTop - self.style.scrollBarWidth;\n            clipRect.w = boundingRect.left + boundingRect.width - ele.offsetLeft - self.style.scrollBarWidth;\n            clipRect.x = boundingRect.left + (eleRect.left * -1) + headerCellWidth;\n            clipRect.y = boundingRect.top + (eleRect.top * -1) + headerCellHeight;\n            return {\n                x: clipRect.x > parentRect.x ? clipRect.x : parentRect.x,\n                y: clipRect.y > parentRect.y ? clipRect.y : parentRect.y,\n                h: clipRect.h < parentRect.h ? clipRect.h : parentRect.h,\n                w: clipRect.w < parentRect.w ? clipRect.w : parentRect.w\n            };\n        };\n        self.clipElement = function (ele) {\n            var clipRect = self.getClippingRect(ele);\n            if (clipRect.w < 0) { clipRect.w = 0; }\n            if (clipRect.h < 0) { clipRect.h = 0; }\n            ele.style.clip = 'rect('\n                + clipRect.y + 'px,'\n                + clipRect.w + 'px,'\n                + clipRect.h + 'px,'\n                + clipRect.x + 'px'\n                + ')';\n            // INFO https://developer.mozilla.org/en-US/docs/Web/CSS/clip\n            // clip has been \"deprecated\" for clipPath.  Of course nothing but chrome\n            // supports clip path, so we'll keep using clip until someday clipPath becomes\n            // more widely support.  The code below works correctly, but setting clipPath and clip\n            // at the same time has undesirable results.\n            // ele.style.clipPath = 'polygon('\n            //     + clipRect.x + 'px ' + clipRect.y + 'px,'\n            //     + clipRect.x + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.y + 'px'\n            //     + ')';\n        };\n        self.autoScrollZone = function (e, x, y, ctrl) {\n            var setTimer,\n                headerCellWidth = self.getHeaderCellWidth(),\n                headerCellHeight = self.getHeaderCellHeight();\n            if (x > self.width - self.attributes.selectionScrollZone && x < self.width) {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y > self.height - self.attributes.selectionScrollZone && y < self.height) {\n                self.scrollBox.scrollTop += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (x - self.attributes.selectionScrollZone - headerCellWidth < 0) {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y - self.attributes.selectionScrollZone - headerCellHeight < 0) {\n                self.scrollBox.scrollTop -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (setTimer && !ctrl && self.currentCell && self.currentCell.columnIndex !== -1) {\n                self.scrollTimer = setTimeout(self.mousemove, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.refreshFromOrigialData = function () {\n            self.data = self.originalData.filter(function (row) {\n                return true;\n            });\n        };\n        self.validateColumn = function (c, s) {\n            if (!c.name) {\n                throw new Error('A column must contain at least a name.');\n            }\n            if (s.filter(function (i) { return i.name === c.name; }).length > 0) {\n                throw new Error('A column with the name '\n                    + c.name + ' already exists and cannot be added again.');\n            }\n            return true;\n        };\n        self.setDefaults = function (obj1, obj2, key, def) {\n            obj1[key] = obj2[key] === undefined ? def : obj2[key];\n        };\n        self.setAttributes = function () {\n            self.defaults.attributes.forEach(function eachAttribute(i) {\n                self.setDefaults(self.attributes, args, i[0], i[1]);\n            });\n        };\n        self.setStyle = function () {\n            self.defaults.styles.forEach(function eachStyle(i) {\n                self.setDefaults(self.style, args.style || {}, i[0], i[1]);\n            });\n        };\n        self.autosize = function (colName) {\n            self.getVisibleSchema().forEach(function (col) {\n                if (col.name === colName || colName === undefined) {\n                    self.fitColumnToValues(col.name);\n                }\n            });\n            self.fitColumnToValues('cornerCell');\n        };\n        self.dispose = function () {\n            if (!self.isChildGrid && self.canvas && self.canvas.parentNode) {\n                self.canvas.parentNode.removeChild(self.canvas);\n            }\n            self.eventParent.removeEventListener('mouseup', self.mouseup, false);\n            self.eventParent.removeEventListener('mousedown', self.mousedown, false);\n            self.eventParent.removeEventListener('dblclick', self.dblclick, false);\n            self.eventParent.removeEventListener('click', self.click, false);\n            self.eventParent.removeEventListener('mousemove', self.mousemove);\n            self.eventParent.removeEventListener('wheel', self.scrollWheel, false);\n            self.canvas.removeEventListener('contextmenu', self.contextmenu, false);\n            self.canvas.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('keypress', self.keypress, false);\n            self.controlInput.removeEventListener('keyup', self.keyup, false);\n            self.controlInput.removeEventListener('keydown', self.keydown, false);\n            window.removeEventListener('resize', self.resize);\n            if (self.observer && self.observer.disconnect) {\n                self.observer.disconnect();\n            }\n        };\n        self.tryLoadStoredOrders = function () {\n            var s;\n            if (self.storedSettings && typeof self.storedSettings.orders === 'object') {\n                if (self.storedSettings.orders.rows.length >= self.data.length) {\n                    self.orders.rows = self.storedSettings.orders.rows;\n                }\n                s = self.getSchema();\n                self.orders.columns = self.storedSettings.orders.columns;\n                s.forEach(function (h, i) {\n                    if (self.orders.columns.indexOf(i) === -1) {\n                        self.orders.columns.push(i);\n                    }\n                });\n                self.orderBy = self.storedSettings.orderBy === undefined\n                    ? self.uniqueId : self.storedSettings.orderBy;\n                self.orderDirection = self.storedSettings.orderDirection === undefined\n                    ? self.uniqueId : self.storedSettings.orderDirection;\n                if (self.getHeaderByName(self.orderBy) && self.orderDirection) {\n                    self.order(self.orderBy, self.orderDirection);\n                }\n            }\n        };\n        self.getFontHeight = function (fontStyle) {\n            return parseFloat(fontStyle, 10);\n        };\n        self.getFontHeightLong = function (fontStyle) {\n            var pixels,\n                start,\n                end,\n                row,\n                column,\n                index,\n                canvas = document.createElement('canvas'),\n                ctx = canvas.getContext('2d');\n            canvas.height = 5000;\n            canvas.width = 5000;\n            ctx.save();\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\n            ctx.textBaseline = 'top';\n            ctx.fillStyle = 'white';\n            ctx.font = fontStyle;\n            ctx.fillText('gM', 0, 0);\n            pixels = ctx.getImageData(0, 0, canvas.width, canvas.height).data;\n            start = -1;\n            end = -1;\n            for (row = 0; row < canvas.height; row += 1) {\n                for (column = 0; column < canvas.width; column += 1) {\n                    index = (row * canvas.width + column) * 4;\n                    if (pixels[index] === 0) {\n                        if (column === canvas.width - 1 && start !== -1) {\n                            end = row;\n                            row = canvas.height;\n                            break;\n                        }\n                    } else {\n                        if (start === -1) {\n                            start = row;\n                        }\n                        break;\n                    }\n                }\n            }\n            ctx.restore();\n            console.log(end - start);\n            return end - start;\n        };\n        self.parseFont = function (key) {\n            if (/Font/.test(key)) {\n                self.style[key + 'Height'] = self.getFontHeight(self.style[key]);\n            }\n        };\n        self.init = function () {\n            var publicStyleKeyIntf = {};\n            self.setAttributes();\n            self.setStyle();\n            self.initScrollBox();\n            self.setDom();\n            Object.keys(self.style).forEach(self.parseFont);\n            self.intf.type = 'canvas-datagrid';\n            self.intf.addEventListener = self.addEventListener;\n            self.intf.removeEventListener = self.removeEventListener;\n            self.intf.dispatchEvent = self.dispatchEvent;\n            self.intf.dispose = self.dispose;\n            self.intf.appendTo = self.appendTo;\n            self.intf.filters = self.filters;\n            self.intf.sorters = self.sorters;\n            self.intf.autosize = self.autosize;\n            self.intf.beginEditAt = self.beginEditAt;\n            self.intf.endEdit = self.endEdit;\n            self.intf.setActiveCell = self.setActiveCell;\n            self.intf.scrollIntoView = self.scrollIntoView;\n            self.intf.clearChangeLog = self.clearChangeLog;\n            self.intf.gotoCell = self.gotoCell;\n            self.intf.gotoRow = self.gotoRow;\n            self.intf.findColumnScrollLeft = self.findColumnScrollLeft;\n            self.intf.findRowScrollTop = self.findRowScrollTop;\n            self.intf.fitColumnToValues = self.fitColumnToValues;\n            self.intf.findColumnMaxTextLength = self.findColumnMaxTextLength;\n            self.intf.disposeContextMenu = self.disposeContextMenu;\n            self.intf.getCellAt = self.getCellAt;\n            self.intf.isCellVisible = self.isCellVisible;\n            self.intf.order = self.order;\n            self.intf.draw = self.draw;\n            self.intf.selectArea = self.selectArea;\n            self.intf.clipElement = self.clipElement;\n            self.intf.getSchemaFromData = self.getSchemaFromData;\n            self.intf.setFilter = self.setFilter;\n            self.intf.selectRow = self.selectRow;\n            self.intf.parentGrid = self.parentGrid;\n            self.intf.toggleTree = self.toggleTree;\n            self.intf.expandTree = self.expandTree;\n            self.intf.collapseTree = self.collapseTree;\n            self.intf.canvas = self.canvas;\n            self.intf.context = self.ctx;\n            self.intf.insertRow = self.insertRow;\n            self.intf.deleteRow = self.deleteRow;\n            self.intf.addRow = self.addRow;\n            self.intf.insertColumn = self.insertColumn;\n            self.intf.deleteColumn = self.deleteColumn;\n            self.intf.addColumn = self.addColumn;\n            self.intf.getClippingRect = self.getClippingRect;\n            self.intf.setRowHeight = self.setRowHeight;\n            self.intf.setColumnWidth = self.setColumnWidth;\n            self.intf.resetColumnWidths = self.resetColumnWidths;\n            self.intf.resetRowHeights = self.resetRowHeights;\n            self.intf.resize = self.resize;\n            self.intf.drawChildGrids = self.drawChildGrids;\n            self.intf.style = {};\n            Object.keys(self.style).forEach(function (key) {\n                // unless this line is here, Object.keys() will not work on <instance>.style\n                publicStyleKeyIntf[key] = undefined;\n                Object.defineProperty(publicStyleKeyIntf, key, {\n                    get: function () {\n                        return self.style[key];\n                    },\n                    set: function (value) {\n                        self.parseFont(value);\n                        self.style[key] = value;\n                        self.draw(true);\n                        self.dispatchEvent('stylechanged', {name: key, value: value});\n                    }\n                });\n            });\n            Object.defineProperty(self.intf, 'style', {\n                get: function () {\n                    return publicStyleKeyIntf;\n                },\n                set: function (value) {\n                    Object.keys(value).forEach(function (key) {\n                        self.parseFont(value);\n                        self.style[key] = value[key];\n                    });\n                    self.draw(true);\n                    self.dispatchEvent('stylechanged', {name: 'style', value: value});\n                }\n            });\n            Object.keys(self.attributes).forEach(function (key) {\n                Object.defineProperty(self.intf.attributes, key, {\n                    get: function () {\n                        return self.attributes[key];\n                    },\n                    set: function (value) {\n                        self.attributes[key] = value;\n                        self.draw(true);\n                        self.dispatchEvent('attributechanged', {name: key, value: value[key]});\n                    }\n                });\n            });\n            self.filters.string = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                var filterRegExp;\n                self.invalidFilterRegEx = undefined;\n                try {\n                    filterRegExp = new RegExp(filterFor, 'ig');\n                } catch (e) {\n                    self.invalidFilterRegEx = e;\n                    return;\n                }\n                return filterRegExp.test(value);\n            };\n            self.filters.number = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                return value === filterFor;\n            };\n            if (self.attributes.name && self.attributes.saveAppearance) {\n                self.storedSettings = localStorage.getItem(self.storageName + '-' + self.attributes.name);\n                if (self.storedSettings) {\n                    try {\n                        self.storedSettings = JSON.parse(self.storedSettings);\n                    } catch (e) {\n                        console.warn('could not read settings from localStore', e);\n                        self.storedSettings = undefined;\n                    }\n                }\n                if (self.storedSettings) {\n                    if (typeof self.storedSettings.sizes === 'object') {\n                        self.sizes.rows = self.storedSettings.sizes.rows;\n                        self.sizes.columns = self.storedSettings.sizes.columns;\n                        ['trees', 'columns', 'rows'].forEach(function (i) {\n                            if (!self.sizes[i]) {\n                                self.sizes[i] = {};\n                            }\n                        });\n                    }\n                }\n            }\n            if (args.data) {\n                self.intf.data = args.data;\n            }\n            if (args.schema) {\n                self.intf.schema = args.schema;\n            }\n            if (!self.data) {\n                self.intf.data = [];\n            }\n            self.resize(true);\n        };\n        modules.forEach(function (module) {\n            module(self);\n        });\n        self.init();\n        return self.intf;\n    }\n    if (window && !window.canvasDatagrid) {\n        window.canvasDatagrid = grid;\n    }\n    module.exports = grid;\n    return grid;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals XMLSerializer: false, define: true, Blob: false, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var perfCounters = [],\n            drawCount = 0,\n            perfWindowSize = 20;\n        self.htmlImageCache = {};\n        function drawOnAllImagesLoaded() {\n            var loaded = true;\n            Object.keys(self.htmlImageCache).forEach(function (html) {\n                if (!self.htmlImageCache[html].complete) {\n                    loaded = false;\n                }\n            });\n            if (loaded) {\n                self.draw();\n            }\n        }\n        function drawHtml(cell) {\n            var img,\n                v = cell.innerHTML || cell.formattedValue,\n                x = cell.x + self.canvasOffsetLeft,\n                y = cell.y + self.canvasOffsetTop;\n            if (self.htmlImageCache[v]) {\n                img = self.htmlImageCache[v];\n                if (img.height !== cell.height || img.width !== cell.width) {\n                    // height and width of the cell has changed, invalidate cache\n                    self.htmlImageCache[v] = undefined;\n                } else {\n                    if (!img.complete) {\n                        return;\n                    }\n                    return self.ctx.drawImage(img, x, y);\n                }\n            }\n            img = new Image(cell.width, cell.height);\n            self.htmlImageCache[v] = img;\n            img.onload = function () {\n                self.ctx.drawImage(img, x, y);\n                drawOnAllImagesLoaded();\n            };\n            img.src = 'data:image/svg+xml;base64,' + btoa(\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + cell.width + '\" height=\"' + cell.height + '\">\\n' +\n                    '<foreignObject class=\"node\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\\n' +\n                    '<body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;padding:0;\">\\n' +\n                    v + '\\n' +\n                    '</body>' +\n                    '</foreignObject>\\n' +\n                    '</svg>\\n'\n            );\n        }\n        function drawOrderByArrow(x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.headerOrderByArrowColor;\n            self.ctx.strokeStyle = self.style.headerOrderByArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + self.style.headerOrderByArrowMarginLeft;\n            y = y + self.style.headerOrderByArrowMarginTop;\n            if (self.orderDirection === 'asc') {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + self.style.headerOrderByArrowWidth, y);\n                self.ctx.lineTo(x + (self.style.headerOrderByArrowWidth * 0.5), y + self.style.headerOrderByArrowHeight);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y + self.style.headerOrderByArrowHeight);\n                self.ctx.lineTo(x + self.style.headerOrderByArrowWidth, y + self.style.headerOrderByArrowHeight);\n                self.ctx.lineTo(x + (self.style.headerOrderByArrowWidth * 0.5), y);\n                self.ctx.lineTo(x, y + self.style.headerOrderByArrowHeight);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return self.style.headerOrderByArrowMarginLeft\n                + self.style.headerOrderByArrowWidth\n                + self.style.headerOrderByArrowMarginRight;\n        }\n        function drawTreeArrow(cell, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.treeArrowColor;\n            self.ctx.strokeStyle = self.style.treeArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + self.style.treeArrowMarginLeft;\n            y = y + self.style.treeArrowMarginTop;\n            if (self.openChildren[cell.data[self.uniqueId]]) {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + self.style.treeArrowWidth, y);\n                self.ctx.lineTo(x + (self.style.treeArrowWidth * 0.5), y + self.style.treeArrowHeight);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y);\n                self.ctx.lineTo(x + self.style.treeArrowHeight, y + (self.style.treeArrowWidth * 0.5));\n                self.ctx.lineTo(x, y + self.style.treeArrowWidth);\n                self.ctx.lineTo(x, y);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return self.style.treeArrowMarginLeft\n                + self.style.treeArrowWidth\n                + self.style.treeArrowMarginRight;\n        }\n        function radiusRect(x, y, w, h, radius) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            var r = x + w, b = y + h;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x + radius, y);\n            self.ctx.lineTo(r - radius, y);\n            self.ctx.quadraticCurveTo(r, y, r, y + radius);\n            self.ctx.lineTo(r, y + h - radius);\n            self.ctx.quadraticCurveTo(r, b, r - radius, b);\n            self.ctx.lineTo(x + radius, b);\n            self.ctx.quadraticCurveTo(x, b, x, b - radius);\n            self.ctx.lineTo(x, y + radius);\n            self.ctx.quadraticCurveTo(x, y, x + radius, y);\n        }\n        function fillRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillRect(x, y, w, h);\n        }\n        function strokeRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.strokeRect(x, y, w, h);\n        }\n        function fillText(text, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillText(text, x, y);\n        }\n        function addBorderLine(c, pos) {\n            self.ctx.beginPath();\n            var p = {\n                t: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                },\n                r: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                b: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                l: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                },\n            };\n            p[pos]();\n            self.ctx.stroke();\n        }\n        function addEllipsis(text, width) {\n            var c, w = 0;\n            if (self.ellipsisCache[text] && self.ellipsisCache[text][width]) {\n                return self.ellipsisCache[text][width];\n            }\n            //TODO Add ellipsis back when there is a fast way to do it\n            w = self.ctx.measureText(text).width;\n            self.ellipsisCache[text] = self.ellipsisCache[text] || {};\n            c = {value: text, width: w};\n            self.ellipsisCache[text][width] = c;\n            return c;\n        }\n        function drawText(cell) {\n            var paddingLeft = self.style[cell.style + 'PaddingLeft'],\n                paddingTop = self.style[cell.style + 'PaddingTop'],\n                paddingRight = self.style[cell.style + 'PaddingRight'],\n                paddingBottom = self.style[cell.style + 'PaddingBottom'],\n                vPos = paddingTop + cell.height - (cell.height * 0.5),\n                hPos = paddingLeft + cell.treeArrowWidth + cell.orderByArrowWidth;\n            cell.text = addEllipsis(cell.formattedValue, cell.width - paddingRight - paddingLeft);\n            cell.text.height = cell.fontHeight;\n            if (cell.horizontalAlignment === 'right') {\n                hPos = cell.width - cell.text.width - paddingRight;\n            } else if (cell.horizontalAlignment === 'center') {\n                hPos = (cell.width / 2) - (cell.text.width / 2);\n            }\n            if (cell.verticalAlignment === 'top') {\n                vPos = paddingTop + cell.text.height;\n            } else if (cell.verticalAlignment === 'bottom') {\n                vPos = cell.height - paddingBottom - cell.text.height;\n            }\n            cell.text.x = cell.x + hPos;\n            cell.text.y = cell.y + vPos;\n            fillText(cell.text.value, cell.text.x, cell.text.y);\n        }\n        /**\n         * Redraws the grid. No matter what the change, this is the only method required to refresh everything.\n         * @memberof canvasDataGrid\n         * @name draw\n         * @method\n         */\n        self.draw = function (internal) {\n            if (!self.isChildGrid && (!self.height || !self.width)) {\n                return;\n            }\n            // if something asked a child to draw, ask the parent to draw, unless it was the parent that asked... then.. idk... stack overflow!\n            // if (self.isChildGrid && internal) {\n            //     self.parentGrid.draw();\n            //     return;\n            // }\n            if (self.intf.visible === false) {\n                return;\n            }\n            // initial values\n            var checkScrollHeight, borderWidth, rowHeaderCell, p, cx, cy, treeGrid, rowOpen,\n                rowHeight, cornerCell, y, x, c, h, w, s, r, rd, aCell,\n                selectionBorders = [],\n                rowHeaders = [],\n                l = self.data.length,\n                u = self.currentCell || {},\n                headerCellHeight = self.getHeaderCellHeight(),\n                headerCellWidth = self.getHeaderCellWidth(),\n                cellHeight = self.style.cellHeight;\n            drawCount += 1;\n            p = performance.now();\n            // if data length has changed, there is no way to know\n            if (self.data.length > self.orders.rows.length) {\n                self.createRowOrders();\n            }\n            function drawScrollBars() {\n                var v = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-bar'\n                    },\n                    n = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-bar'\n                    },\n                    vb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-box'\n                    },\n                    nb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-box'\n                    },\n                    co = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        isCorner: true,\n                        isScrollBoxCorner: true,\n                        style: 'scroll-box-corner'\n                    },\n                    m = (self.style.scrollBarBoxMargin * 2),\n                    d = self.style.scrollBarBoxMargin * 0.5;\n                self.ctx.strokeStyle = self.style.scrollBarBorderColor;\n                self.ctx.lineWidth = self.style.scrollBarBorderWidth;\n                // vertical\n                v.x += w - self.style.scrollBarWidth - self.style.scrollBarBorderWidth - d;\n                v.y += headerCellHeight;\n                v.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                v.height = h - headerCellHeight - self.style.scrollBarWidth - d - m;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(v.x, v.y, v.width, v.height + m);\n                strokeRect(v.x, v.y, v.width, v.height + m);\n                // vertical box\n                vb.x = v.x + self.style.scrollBarBoxMargin;\n                vb.y = headerCellHeight + self.style.scrollBarBoxMargin\n                    + ((v.height - self.scrollBox.scrollBoxHeight)\n                        * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight));\n                vb.width = self.style.scrollBarBoxWidth;\n                vb.height = self.scrollBox.scrollBoxHeight;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/vertical/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (vb.width < v.width) {\n                    radiusRect(vb.x, vb.y, vb.width, vb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                // horizontal\n                n.x += headerCellWidth;\n                n.y += h - self.style.scrollBarWidth - d;\n                n.width = w - self.style.scrollBarWidth - headerCellWidth - d - m;\n                n.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(n.x, n.y, n.width + m, n.height);\n                strokeRect(n.x, n.y, n.width + m, n.height);\n                // horizontal box\n                nb.y = n.y + self.style.scrollBarBoxMargin;\n                nb.x = headerCellWidth + self.style.scrollBarBoxMargin\n                    + ((n.width - self.scrollBox.scrollBoxWidth)\n                        * (self.scrollBox.scrollLeft / self.scrollBox.scrollWidth));\n                nb.width = self.scrollBox.scrollBoxWidth;\n                nb.height = self.style.scrollBarBoxWidth;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/horizontal/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (nb.width < n.width) {\n                    radiusRect(nb.x, nb.y, nb.width, nb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                //corner\n                self.ctx.strokeStyle = self.style.scrollBarCornerBorderColor;\n                self.ctx.fillStyle = self.style.scrollBarCornerBackgroundColor;\n                co.x = n.x + n.width + m;\n                co.y = v.y + v.height + m;\n                co.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                co.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                radiusRect(co.x, co.y, co.width, co.height, 0);\n                self.ctx.stroke();\n                self.ctx.fill();\n                self.visibleCells.unshift(v);\n                self.visibleCells.unshift(vb);\n                self.visibleCells.unshift(n);\n                self.visibleCells.unshift(nb);\n                self.visibleCells.unshift(co);\n                self.scrollBox.bar = {\n                    v: v,\n                    h: n\n                };\n                self.scrollBox.box = {\n                    v: vb,\n                    h: nb\n                };\n            }\n            function drawCell(d, rowIndex, rowOrderIndex) {\n                return function drawEach(header, headerIndex, columnOrderIndex) {\n                    var cellStyle = header.style || 'cell',\n                        childGridAttributes,\n                        cell,\n                        isHeader = /headerCell/.test(cellStyle),\n                        isCorner = /cornerCell/.test(cellStyle),\n                        isRowHeader = 'rowHeaderCell' === cellStyle,\n                        selected = self.selections[rowOrderIndex] && self.selections[rowOrderIndex].indexOf(columnOrderIndex) !== -1,\n                        hovered = self.hovers[d[self.uniqueId]] && self.hovers[d[self.uniqueId]].indexOf(columnOrderIndex) !== -1,\n                        active = self.activeCell.rowIndex === rowOrderIndex && self.activeCell.columnIndex === columnOrderIndex,\n                        isGrid = Array.isArray(d[header.name]),\n                        activeHeader = (self.orders.rows[self.activeCell.rowIndex] === rowOrderIndex\n                                || self.orders.columns[self.activeCell.columnIndex] === columnOrderIndex)\n                            && (columnOrderIndex === -1 || rowOrderIndex === -1)\n                            ? (isRowHeader ? 'activeRowHeaderCell' : 'activeHeaderCell') : false,\n                        val,\n                        f = self.formatters[header.type || 'string'],\n                        orderByArrowSize = 0,\n                        treeArrowSize = 0,\n                        cellWidth = self.sizes.columns[isRowHeader ? 'cornerCell' : header[self.uniqueId]] || header.width,\n                        ev = {\n                            value: d[header.name],\n                            row: d,\n                            header: header\n                        };\n                    if (cellStyle === 'headerCellCap') {\n                        cellWidth = w - x;\n                    }\n                    // if no data or schema are defined, a width is provided to the stub column\n                    if (cellWidth === undefined) {\n                        cellWidth = self.style.columnWidth;\n                    }\n                    if (x + cellWidth + borderWidth < 0) {\n                        x += cellWidth + borderWidth;\n                    }\n                    if (active) {\n                        cellStyle = 'activeCell';\n                    }\n                    if (self.visibleRows.indexOf(rowIndex) === -1 && !isHeader) {\n                        self.visibleRows.push(rowIndex);\n                    }\n                    val = self.dispatchEvent('formatcellvalue', ev);\n                    if (!self.dispatchEvent('beforerendercell', ev)) {\n                        cx = x;\n                        cy = y;\n                        if (cellStyle === 'cornerCell') {\n                            cx = 0;\n                            cy = 0;\n                        } else if (isRowHeader) {\n                            cx = 0;\n                        } else if (isHeader) {\n                            cy = 0;\n                        }\n                        cell = {\n                            type: isGrid ? 'canvas-datagrid-cell' : header.type,\n                            style: cellStyle,\n                            nodeType: 'canvas-datagrid-cell',\n                            x: cx,\n                            y: cy,\n                            horizontalAlignment: self.style[cellStyle + 'HorizontalAlignment'],\n                            verticalAlignment: self.style[cellStyle + 'VerticalAlignment'],\n                            offsetTop: self.canvasOffsetTop + cy,\n                            offsetLeft: self.canvasOffsetLeft + cx,\n                            scrollTop: self.scrollBox.scrollTop,\n                            scrollLeft: self.scrollBox.scrollLeft,\n                            active: active || activeHeader,\n                            hovered: hovered,\n                            selected: selected,\n                            width: cellWidth,\n                            height: cellHeight,\n                            offsetWidth: cellWidth,\n                            offsetHeight: cellHeight,\n                            parentNode: self.intf.parentNode,\n                            offsetParent: self.intf.parentNode,\n                            data: d,\n                            isCorner: isCorner,\n                            isHeader: isHeader,\n                            isHeaderCellCap: !!header.isHeaderCellCap,\n                            isRowHeader: isRowHeader,\n                            rowOpen: rowOpen,\n                            header: header,\n                            columnIndex: columnOrderIndex,\n                            rowIndex: rowOrderIndex,\n                            sortColumnIndex: headerIndex,\n                            sortRowIndex: rowIndex,\n                            isGrid: isGrid,\n                            gridId: (self.attributes.name || '') + d[self.uniqueId] + ':' + header[self.uniqueId],\n                            parentGrid: self.intf,\n                            innerHTML: '',\n                            activeHeader: activeHeader,\n                            value: isHeader\n                                ? (header.title || header.name) : d[header.name]\n                        };\n                        ev.cell = cell;\n                        cell.userHeight = cell.isHeader ? self.sizes.rows[-1] : rowHeight;\n                        cell.userWidth = cell.isHeader ? self.sizes.columns.cornerCell : self.sizes.columns[header[self.uniqueId]];\n                        cell[self.uniqueId] = d[self.uniqueId];\n                        self.visibleCells.unshift(cell);\n                        self.ctx.fillStyle = self.style[cellStyle + 'BackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'BorderColor'];\n                        self.ctx.lineWidth = self.style[cellStyle + 'BorderWidth'];\n                        if (hovered) {\n                            self.ctx.fillStyle = self.style[cellStyle + 'HoverBackgroundColor'];\n                            self.ctx.strokeStyle = self.style[cellStyle + 'HoverBorderColor'];\n                        }\n                        if (selected) {\n                            self.ctx.fillStyle = self.style[cellStyle + 'SelectedBackgroundColor'];\n                            self.ctx.strokeStyle = self.style[cellStyle + 'SelectedBorderColor'];\n                        }\n                        if (activeHeader) {\n                            self.ctx.fillStyle = self.style[activeHeader + 'BackgroundColor'];\n                        }\n                        self.dispatchEvent('rendercell', ev);\n                        if (cell.isGrid) {\n                            if (cell.height !== rowHeight) {\n                                cell.height = rowHeight || self.style.cellHeightWithChildGrid;\n                                checkScrollHeight = true;\n                            }\n                            cell.width = self.sizes.columns[header[self.uniqueId]] || self.style.cellWidthWithChildGrid;\n                        }\n                        if (rowOpen && !cell.isRowHeader) {\n                            cell.height = self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight;\n                        }\n                        if (!cell.isGrid) {\n                            fillRect(cx, cy, cell.width, cell.height);\n                            strokeRect(cx, cy, cell.width, cell.height);\n                        }\n                        self.ctx.save();\n                        radiusRect(cell.x, cell.y, cell.width, cell.height, 0);\n                        self.ctx.clip();\n                        self.dispatchEvent('afterrendercell', ev);\n                        if (cell.height !== cellHeight && !(rowOpen && !cell.isRowHeader)) {\n                            self.sizes.rows[isHeader ? -1 : d[self.uniqueId]] = cell.height;\n                            checkScrollHeight = true;\n                        }\n                        if (cell.width !== cellWidth) {\n                            self.sizes.columns[header[self.uniqueId]] = cell.width;\n                            checkScrollHeight = true;\n                        }\n                        if (isRowHeader && self.attributes.tree) {\n                            if (!self.dispatchEvent('rendertreearrow', ev)) {\n                                treeArrowSize = drawTreeArrow(cell, self.style[cellStyle + 'PaddingLeft'], cy, 0);\n                            }\n                        }\n                        if ((self.attributes.showRowNumbers && isRowHeader)\n                                || !isRowHeader) {\n                            if (cell.isGrid) {\n                                if (!self.childGrids[cell.gridId]) {\n                                    childGridAttributes = self.args.childGridAttributes || self.args;\n                                    childGridAttributes.name = self.attributes.saveAppearance ? cell.gridId : undefined;\n                                    childGridAttributes.parentNode = cell;\n                                    childGridAttributes.data = d[header.name];\n                                    self.childGrids[cell.gridId] = self.createGrid(childGridAttributes);\n                                    checkScrollHeight = true;\n                                }\n                                cell.grid = self.childGrids[cell.gridId];\n                                cell.grid.parentNode = cell;\n                                cell.grid.visible = true;\n                                cell.grid.draw();\n                                self.dispatchEvent('rendercellgrid', ev);\n                            } else {\n                                if (self.childGrids[cell.gridId]) {\n                                    self.childGrids[cell.gridId].parentNode.offsetHeight = 0;\n                                }\n                                if (isHeader && self.orderBy === header.name) {\n                                    if (!self.dispatchEvent('renderorderbyarrow', ev)) {\n                                        orderByArrowSize = drawOrderByArrow(cx + self.style[cellStyle + 'PaddingLeft'], 0);\n                                    }\n                                }\n                                self.ctx.fillStyle = self.style[cellStyle + 'Color'];\n                                if (hovered) {\n                                    self.ctx.fillStyle = self.style[cellStyle + 'HoverColor'];\n                                }\n                                if (selected) {\n                                    self.ctx.fillStyle = self.style[cellStyle + 'SelectedColor'];\n                                }\n                                if (activeHeader) {\n                                    self.ctx.fillStyle = self.style[activeHeader + 'Color'];\n                                }\n                                self.ctx.font = self.style[cellStyle + 'Font'];\n                                cell.fontHeight = self.style[cellStyle + 'FontHeight'];\n                                cell.treeArrowWidth = treeArrowSize;\n                                cell.orderByArrowWidth = orderByArrowSize;\n                                val = val !== undefined ? val : f\n                                    ? f(ev) : '';\n                                if (val === undefined && !f) {\n                                    val = '';\n                                    console.warn('canvas-datagrid: Unknown format '\n                                        + header.type + ' add a cellFormater');\n                                }\n                                cell.formattedValue = ((val !== undefined && val !== null) ? val : '').toString();\n                                if (self.columnFilters && self.columnFilters[val] !== undefined && isHeader) {\n                                    cell.formattedValue = self.attributes.filterTextPrefix + val;\n                                }\n                                if (!self.dispatchEvent('rendertext', ev)) {\n                                    if (cell.innerHTML || header.type === 'html') {\n                                        drawHtml(cell);\n                                    } else {\n                                        drawText(cell);\n                                    }\n                                }\n                            }\n                        }\n                        if (active) {\n                            aCell = cell;\n                        }\n                        if (selected && !isRowHeader) {\n                            if ((!self.selections[cell.rowIndex - 1]\n                                    || self.selections[cell.rowIndex - 1].indexOf(cell.columnIndex) === -1\n                                    || cell.rowIndex === 0)\n                                    && !cell.isHeader) {\n                                selectionBorders.push([cell, 't']);\n                            }\n                            if (!self.selections[cell.rowIndex + 1]\n                                    || self.selections[cell.rowIndex + 1].indexOf(cell.columnIndex) === -1) {\n                                selectionBorders.push([cell, 'b']);\n                            }\n                            if (!self.selections[cell.rowIndex] || cell.columnIndex === 0\n                                    || self.selections[cell.rowIndex].indexOf(cell.columnIndex - 1) === -1) {\n                                selectionBorders.push([cell, 'l']);\n                            }\n                        } else if (self.selections[cell.rowIndex]\n                                && self.selections[cell.rowIndex].indexOf(cell.columnIndex - 1) !== -1) {\n                            selectionBorders.push([cell, 'l']);\n                        }\n                        self.ctx.restore();\n                        x += cell.width + borderWidth;\n                        return cell.width;\n                    }\n                };\n            }\n            function drawRowHeader(rowData, index, rowOrderIndex) {\n                var a;\n                if (self.attributes.showRowHeaders) {\n                    x = 0;\n                    rowHeaderCell = {'rowHeaderCell': index + 1 };\n                    rowHeaderCell[self.uniqueId] = rowData[self.uniqueId];\n                    a = {\n                        name: 'rowHeaderCell',\n                        width: self.style.headerRowWidth,\n                        style: 'rowHeaderCell',\n                        type: 'string',\n                        data: rowData[self.uniqueId],\n                        index: -1\n                    };\n                    a[self.uniqueId] = rowData[self.uniqueId];\n                    rowOpen = self.openChildren[rowData[self.uniqueId]];\n                    drawCell(rowHeaderCell, index, rowOrderIndex)(a, -1, -1);\n                }\n            }\n            function drawHeaders() {\n                var d, g = s.length, i, o, headerCell, header;\n                rowHeaders.forEach(function (rArgs) {\n                    y = rArgs[3];\n                    cellHeight = rArgs[4];\n                    drawRowHeader(rArgs[0], rArgs[1], rArgs[2]);\n                });\n                if (self.attributes.showColumnHeaders) {\n                    x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft;\n                    if (self.attributes.showRowHeaders) {\n                        x += headerCellWidth;\n                    }\n                    y = 0;\n                    // cell height might have changed during drawing\n                    cellHeight = self.getHeaderCellHeight();\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        header = s[i];\n                        d = {\n                            title: header.title,\n                            name: header.name,\n                            width: header.width,\n                            style: 'headerCell',\n                            type: 'string',\n                            index: o,\n                            order: i\n                        };\n                        headerCell = {'headerCell': header.title || header.name};\n                        headerCell[self.uniqueId] = 'h' + header[self.uniqueId];\n                        d[self.uniqueId] = header[self.uniqueId];\n                        x += drawCell(headerCell, -1, -1)(d, o, i);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    // fill in the space right of the headers\n                    if (x < w) {\n                        c = {\n                            name: '',\n                            width: self.style.scrollBarWidth,\n                            style: 'headerCellCap',\n                            isHeaderCell: true,\n                            isHeaderCellCap: true,\n                            type: 'string',\n                            index: s.length\n                        };\n                        c[self.uniqueId] = 'headerCell';\n                        drawCell({endCap: ''}, -1, -1)(c, -1, -1);\n                    }\n                    // fill in the space left of the headers\n                    if (self.attributes.showRowHeaders) {\n                        cornerCell = {'cornerCell': '' };\n                        cornerCell[self.uniqueId] = 'cornerCell';\n                        x = 0;\n                        c = {\n                            name: 'cornerCell',\n                            width: self.style.headerRowWidth,\n                            style: 'cornerCell',\n                            type: 'string',\n                            index: -1\n                        };\n                        c[self.uniqueId] = 'cornerCell';\n                        drawCell(cornerCell, -1, -1)(c, -1, -1);\n                    }\n                }\n            }\n            function drawRow(r, d) {\n                var i, treeHeight, rowSansTreeHeight, o, g = s.length;\n                if (y - (cellHeight * 2) > h) {\n                    return false;\n                }\n                rd = self.data[r];\n                rowOpen = self.openChildren[rd[self.uniqueId]];\n                rowSansTreeHeight = self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight;\n                treeHeight = (rowOpen ? self.sizes.trees[rd[self.uniqueId]] : 0);\n                rowHeight = rowSansTreeHeight + treeHeight;\n                if (y < rowHeight * -1) {\n                    return false;\n                }\n                if (self.attributes.showRowHeaders) {\n                    x += headerCellWidth;\n                }\n                cellHeight = rowHeight;\n                for (o = self.scrollIndexLeft; o < g; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        break;\n                    }\n                }\n                // cell height might have changed during drawing\n                cellHeight = rowHeight;\n                x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft;\n                // don't draw a tree for the new row\n                treeGrid = self.childGrids[rd[self.uniqueId]];\n                if (r !== self.data.length && rowOpen) {\n                    treeGrid.visible = true;\n                    treeGrid.parentNode = {\n                        offsetTop: y + rowSansTreeHeight + self.canvasOffsetTop,\n                        offsetLeft: headerCellWidth - 1 + self.canvasOffsetLeft,\n                        offsetHeight: treeHeight,\n                        offsetWidth: self.width - headerCellWidth - self.style.scrollBarWidth - 1,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: self.style,\n                        nodeType: 'canvas-datagrid-tree',\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        rowIndex: r\n                    };\n                    self.visibleCells.unshift({\n                        rowIndex: x,\n                        columnIndex: 0,\n                        y: treeGrid.parentNode.offsetTop,\n                        x: treeGrid.parentNode.offsetLeft,\n                        height: treeGrid.parentNode.offsetHeight,\n                        width: treeGrid.parentNode.offsetWidth,\n                        style: 'tree-grid',\n                        type: treeGrid.parentNode.nodeType\n                    });\n                    treeGrid.draw();\n                } else if (treeGrid) {\n                    treeGrid.parentNode.offsetHeight = 0;\n                    delete self.sizes.trees[rd[self.uniqueId]];\n                }\n                rowHeaders.push([rd, r, d, y, rowHeight]);\n                y += cellHeight + borderWidth;\n                return true;\n            }\n            function initDraw() {\n                borderWidth = self.style.cellBorderWidth;\n                self.visibleRows = [];\n                s = self.getVisibleSchema();\n                self.visibleCells = [];\n                self.canvasOffsetTop = self.isChildGrid ? self.parentNode.offsetTop : 0;\n                self.canvasOffsetLeft = self.isChildGrid ? self.parentNode.offsetLeft : 0;\n                h = self.height;\n                w = self.width;\n                if (!self.isChildGrid) {\n                    self.ctx.scale(window.devicePixelRatio, window.devicePixelRatio);\n                }\n            }\n            function drawBackground() {\n                radiusRect(0, 0, w, h, 0);\n                self.ctx.clip();\n                self.ctx.fillStyle = self.style.backgroundColor;\n                fillRect(0, 0, w, h);\n            }\n            function drawRows() {\n                var o, n, i, g = s.length;\n                x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft;\n                y = (self.scrollBox.scrollTop * -1) + headerCellHeight + self.scrollPixelTop;\n                for (r = self.scrollIndexTop; r < l; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.showNewRow) {\n                    if (self.attributes.showRowHeaders) {\n                        x += headerCellWidth;\n                    }\n                    rowHeight = cellHeight = self.style.cellHeight;\n                    rowOpen = false;\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        x += drawCell(self.newRow, self.data.length, self.data.length)(s[i], i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    rowHeaders.push([self.newRow, self.data.length, self.data.length, y, rowHeight]);\n                }\n            }\n            function drawReorderMarkers() {\n                if (!self.reorderObject) { return; }\n                var b = {\n                        height: self.reorderObject.height,\n                        width: self.reorderObject.width,\n                        x: self.reorderObject.x + self.reorderObject.dragOffset.x,\n                        y: self.reorderObject.y + self.reorderObject.dragOffset.y\n                    },\n                    m = {\n                        width: w,\n                        heigth: h,\n                        x: 0,\n                        y: 0\n                    };\n                self.ctx.fillStyle = self.style.reorderMarkerBackgroundColor;\n                self.ctx.lineWidth = self.style.reorderMarkerBorderWidth;\n                self.ctx.strokeStyle = self.style.reorderMarkerBorderColor;\n                if (self.dragMode === 'row-reorder') {\n                    b.width = w;\n                    b.x = 0;\n                    m.width = w;\n                    m.y = self.currentCell.y;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.rowIndex !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex - 1 !== self.reorderObject.rowIndex) {\n                        addBorderLine(m, 't');\n                    }\n                } else if (self.dragMode === 'column-reorder' && self.reorderObject) {\n                    b.height = h;\n                    b.y = 0;\n                    m.height = h;\n                    m.x = self.currentCell.x;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.columnIndex !== self.reorderObject.columnIndex\n                            && self.currentCell.columnIndex - 1 !== self.reorderObject.columnIndex) {\n                        addBorderLine(m, 'l');\n                    }\n                }\n            }\n            function drawBorder() {\n                self.ctx.lineWidth = self.style.gridBorderWidth;\n                self.ctx.strokeStyle = self.style.gridBorderColor;\n                strokeRect(0, 0, self.width, self.height);\n            }\n            function drawSelectionBorders() {\n                self.ctx.lineWidth = self.style.selectionOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.selectionOverlayBorderColor;\n                selectionBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n            }\n            function drawActiveCell() {\n                if (!aCell) { return; }\n                if (self.attributes.rowSelectionMode) {\n                    if (self.activeCell && self.activeCell.rowIndex === aCell.rowIndex) {\n                        self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                        self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                        strokeRect(0, aCell.y, self.getHeaderWidth() + headerCellWidth, rowHeight);\n                    }\n                } else {\n                    self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                    self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                    strokeRect(aCell.x, aCell.y, aCell.width, aCell.height);\n                }\n\n            }\n            function drawDebug() {\n                perfCounters[drawCount % perfWindowSize] = performance.now() - p;\n                var d;\n                if (self.attributes.debug) {\n                    self.ctx.font = '11px sans-serif';\n                    d = {};\n                    d.perf = (perfCounters.reduce(function (a, b) {\n                        return a + b;\n                    }, 0) / perfCounters.length).toFixed(1)\n                        + 'ms (' +\n                        perfCounters.map(function (a) { return a.toFixed(1); }).join(', ') + ')';\n                    d.htmlImages = Object.keys(self.htmlImageCache).length;\n                    d.scrollLeft = self.scrollBox.scrollLeft;\n                    d.scrollTop = self.scrollBox.scrollTop;\n                    d.scrollIndexTop = self.scrollIndexTop;\n                    d.scrollPixelTop = self.scrollPixelTop;\n                    d.scrollIndexLeft = self.scrollIndexLeft;\n                    d.scrollPixelLeft = self.scrollPixelLeft;\n                    d.canvasOffsetLeft = self.canvasOffsetLeft;\n                    d.canvasOffsetTop = self.canvasOffsetTop;\n                    d.width = self.width;\n                    d.height = self.height;\n                    d.mousex = self.mouse.x;\n                    d.mousey = self.mouse.y;\n                    d.touchx = !self.touchStart ? 0 : self.touchStart.x;\n                    d.touchy = !self.touchStart ? 0 : self.touchStart.y;\n                    d.entities = self.visibleCells.length;\n                    d.hasFocus = self.hasFocus;\n                    d.dragMode = self.dragMode;\n                    if (self.currentCell) {\n                        d.columnIndex = self.currentCell.columnIndex;\n                        d.rowIndex = self.currentCell.rowIndex;\n                        d.sortColumnIndex = self.currentCell.sortColumnIndex;\n                        d.sortRowIndex = self.currentCell.sortRowIndex;\n                        d.context = self.currentCell.context;\n                        d.dragContext = self.currentCell.dragContext;\n                        d.style = self.currentCell.style;\n                        d.type = self.currentCell.type;\n                    }\n                    self.ctx.save();\n                    Object.keys(d).forEach(function (key, index) {\n                        var m = key + ': ' + d[key],\n                            lh = 14;\n                        self.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n                        fillRect(headerCellWidth, lh + (index * lh), 100, lh);\n                        self.ctx.fillStyle = 'rgba(0, 0, 0, 1)';\n                        fillText(m, headerCellWidth + 1, headerCellHeight + (index * lh));\n                    });\n                    self.ctx.restore();\n                }\n            }\n            self.ctx.save();\n            initDraw();\n            drawBackground();\n            drawRows();\n            drawSelectionBorders();\n            drawHeaders();\n            drawActiveCell();\n            drawReorderMarkers();\n            drawScrollBars();\n            if (checkScrollHeight) {\n                self.resize(true);\n            }\n            drawBorder();\n            drawDebug();\n            self.ctx.restore();\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var touchDelta = {x: 0, y: 0, scrollTop: 0, scrollLeft: 0},\n            touchAnimateTo = {scrollLeft: 0, scrollTop: 0},\n            touchSigma = {scrollLeft: 0, scrollTop: 0},\n            xPPS = 0,\n            yPPS = 0,\n            touchingCell = false,\n            startingCell = false,\n            animationFrames = 0;\n        self.getTouchPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.touches[0].clientX - rect.left,\n                    y: e.touches[0].clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        self.calculatePPS = function () {\n            xPPS = ((touchDelta.scrollLeft - touchSigma.scrollLeft) / (touchDelta.t - touchSigma.t));\n            yPPS = ((touchDelta.scrollTop - touchSigma.scrollTop) / (touchDelta.t - touchSigma.t));\n            touchSigma = {\n                scrollLeft: touchDelta.scrollLeft,\n                scrollTop: touchDelta.scrollTop,\n                t: performance.now() / 1000\n            };\n        };\n        self.touchCell = function (e) {\n            return function () {\n                clearInterval(self.touchCalcTimeout);\n                var pos = self.getTouchPos(e);\n                if (Math.abs(touchDelta.x) + Math.abs(touchDelta.y) < self.attributes.touchDeadZone) {\n                    touchingCell = self.getCellAt(pos.x, pos.y);\n                    self.mousemove(e, pos);\n                    self.mousedown(e, pos);\n                    self.mousemove(e, pos);\n                    self.draw();\n                }\n            };\n        };\n        self.touchstart = function (e) {\n            touchingCell = false;\n            self.touchStart = self.getTouchPos(e);\n            startingCell = self.getCellAt(self.touchStart.x, self.touchStart.y, true);\n            if (self.dispatchEvent('touchstart', {NativeEvent: e, cell: self.startingCell})) { return; }\n            if (!self.hasFocus) { return; }\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (e.touches.length === 2) {\n                return self.contextmenu(e, self.touchStart);\n            }\n            self.touchScrollStart = {\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: performance.now() / 1000\n            };\n            touchDelta = {\n                x: self.touchStart.x,\n                y: self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: 0\n            };\n            self.touchmove(e);\n            clearTimeout(self.touchTimeout);\n            clearInterval(self.touchCalcTimeout);\n            self.touchTimeout = setTimeout(self.touchCell(e), self.attributes.touchSelectTimeMs);\n            self.touchCalcTimeout = setInterval(self.calculatePPS, 20);\n            self.touchHaltAnimation = true;\n            document.body.addEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.addEventListener('touchend', self.touchend, false);\n            document.body.addEventListener('touchcancel', self.touchcancel, false);\n        };\n        self.easing = function (t, b, c, d) {\n            return c * (t / d) * (2 - t) + b;\n        };\n        self.touchEndAnimation = function () {\n            if (!self.canvas || !self.scrollBox.scrollTo) { return requestAnimationFrame(self.touchEndAnimation); }\n            var x,\n                y,\n                n = performance.now() / 1000,\n                d = (self.attributes.touchReleaseAnimationDurationMs / 1000),\n                t;\n            touchDelta.t = touchDelta.t || n + d;\n            t = n - touchDelta.t + 1;\n            if (t > 1 || self.touchHaltAnimation || (animationFrames > 1000)) {\n                animationFrames = 0;\n                self.touchHaltAnimation = false;\n                touchAnimateTo = {scrollLeft: -1, scrollTop: -1};\n                return;\n            }\n            animationFrames += 1;\n            x = self.easing(t, touchDelta.scrollLeft, -touchAnimateTo.scrollLeft, d);\n            y = self.easing(t, touchDelta.scrollTop, -touchAnimateTo.scrollTop, d);\n            self.scrollBox.scrollTo(x, y);\n            requestAnimationFrame(self.touchEndAnimation);\n        };\n        self.touchend = function (e) {\n            if (self.dispatchEvent('touchend', {NativeEvent: e})) { return; }\n            var dz = Math.abs(touchDelta.x) + Math.abs(touchDelta.y) < self.attributes.touchDeadZone,\n                pos = {\n                    x: self.touchStart.x + touchDelta.x,\n                    y: self.touchStart.y + touchDelta.y\n                },\n                cell = self.getCellAt(pos.x, pos.y);\n            if (!self.hasFocus) { return; }\n            if (touchingCell) {\n                self.mouseup(e, self.touchStart);\n            } else if (dz) {\n                if (cell.active) {\n                    self.beginEditAt(cell.columnIndex, cell.rowIndex);\n                } else {\n                    self.mousedown(e, self.touchStart);\n                    self.mouseup(e, self.touchStart);\n                    self.click(e, self.touchStart);\n                }\n            }\n            touchingCell = false;\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n            clearTimeout(self.touchTimeout);\n            clearInterval(self.touchCalcTimeout);\n            self.calculatePPS();\n            touchAnimateTo.scrollLeft = xPPS * self.attributes.touchReleaseAcceleration;\n            touchAnimateTo.scrollTop = yPPS * self.attributes.touchReleaseAcceleration;\n            self.touchHaltAnimation = false;\n            if (animationFrames === 0 && !/-scroll-/.test(startingCell.style) && !dz) {\n                self.touchEndAnimation();\n            }\n        };\n        self.touchmove = function (e) {\n            var d = self.getTouchPos(e);\n            if (self.dispatchEvent('touchmove', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (!self.hasFocus) { return; }\n            touchDelta = {\n                x: d.x - self.touchStart.x,\n                y: d.y - self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: 0\n            };\n            if (/vertical-scroll-/.test(startingCell.style)) {\n                self.scrollBox.scrollTop = self.scrollBox.scrollHeight * (d.y / self.height);\n            } else if (/horizontal-scroll-/.test(startingCell.style)) {\n                self.scrollBox.scrollLeft = self.scrollBox.scrollWidth * (d.x / self.width);\n            } else if (touchingCell) {\n                self.mousemove(e, d);\n                self.draw();\n            } else {\n                if (animationFrames === 0) {\n                    self.scrollBox.scrollTo(self.touchScrollStart.scrollLeft - touchDelta.x,\n                        self.touchScrollStart.scrollTop - touchDelta.y);\n                }\n            }\n        };\n        self.touchcancel = function (e) {\n            if (self.dispatchEvent('touchcancel', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) { return; }\n            touchingCell = false;\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n            return;\n        };\n        self.stopPropagation = function (e) { e.stopPropagation(); };\n        self.addEventListener = function (ev, fn) {\n            self.events[ev] = self.events[ev] || [];\n            self.events[ev].unshift(fn);\n        };\n        self.removeEventListener = function (ev, fn) {\n            (self.events[ev] || []).forEach(function removeEachListener(sfn, idx) {\n                if (fn === sfn) {\n                    self.events[ev].splice(idx, 1);\n                }\n            });\n        };\n        self.dispatchEvent = function (ev, e) {\n            var defaultPrevented;\n            function preventDefault() {\n                defaultPrevented = true;\n            }\n            if (!self.events[ev]) { return; }\n            self.events[ev].forEach(function dispatchEachEvent(fn) {\n                e.ctx = self.ctx;\n                e.preventDefault = preventDefault;\n                fn.apply(self.intf, [e]);\n            });\n            return defaultPrevented;\n        };\n        self.resize = function (drawAfterResize) {\n            var cellBorder = self.style.cellBorderWidth * 2,\n                headerCellBorder =  self.style.headerCellBorderWidth * 2,\n                scrollHeight,\n                scrollWidth,\n                headerCellHeight = self.getHeaderCellHeight(),\n                headerCellWidth = self.getHeaderCellWidth(),\n                // TODO: What the hell are these numbers!?  They are probably some value in the style.\n                scrollDragPositionOffsetY = 30,\n                scrollDragPositionOffsetX = 15;\n            if (self.isChildGrid) {\n                self.height = self.parentNode.offsetHeight;\n                self.width = self.parentNode.offsetWidth;\n            } else {\n                self.height = self.parentDOMNode.offsetHeight - (self.style.scrollBarBoxMargin * 2);\n                self.width = self.parentDOMNode.offsetWidth - (self.style.scrollBarBoxMargin * 2);\n                self.parentNode = self.parentDOMNode;\n                self.canvas.height = self.height * window.devicePixelRatio;\n                self.canvas.width = self.width * window.devicePixelRatio;\n                self.canvas.style.height = self.height + 'px';\n                self.canvas.style.width = self.width + 'px';\n                self.canvasOffsetTop = 0;\n                self.canvasOffsetLeft = 0;\n            }\n            scrollHeight = self.data.reduce(function reduceData(accumulator, row) {\n                return accumulator\n                    + (self.sizes.rows[row[self.uniqueId]] || self.style.cellHeight)\n                    + (self.sizes.trees[row[self.uniqueId]] || 0)\n                    + cellBorder;\n            }, 0) || 0;\n            scrollWidth = self.getVisibleSchema().reduce(function reduceSchema(accumulator, column) {\n                if (column.hidden) { return accumulator; }\n                return accumulator + (self.sizes.columns[column[self.uniqueId]] || column.width || self.style.columnWidth) + cellBorder;\n            }, 0) || 0;\n            if (self.attributes.showNewRow) {\n                scrollHeight += self.style.cellHeight + cellBorder;\n            }\n            self.scrollBox.width = self.width - headerCellWidth;\n            self.scrollBox.height = self.height - headerCellHeight - headerCellBorder;\n            self.scrollBox.top = headerCellHeight + headerCellBorder;\n            self.scrollBox.left = headerCellWidth;\n            self.scrollBox.scrollHeight = scrollHeight + self.style.scrollBarWidth - self.scrollBox.height;\n            self.scrollBox.scrollWidth = scrollWidth + self.style.scrollBarWidth - self.scrollBox.width;\n            self.scrollBox.widthBoxRatio = ((self.scrollBox.width - scrollDragPositionOffsetX)\n                / (self.scrollBox.scrollWidth + self.scrollBox.width - scrollDragPositionOffsetX));\n            self.scrollBox.scrollBoxWidth = self.scrollBox.width\n                * self.scrollBox.widthBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.heightBoxRatio = ((self.scrollBox.height - scrollDragPositionOffsetY)\n                / (self.scrollBox.scrollHeight + (self.scrollBox.height - scrollDragPositionOffsetY)));\n            self.scrollBox.scrollBoxHeight = self.scrollBox.height\n                * self.scrollBox.heightBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.scrollBoxWidth = Math.max(self.scrollBox.scrollBoxWidth, self.style.scrollBarBoxMinSize);\n            self.scrollBox.scrollBoxHeight = Math.max(self.scrollBox.scrollBoxHeight, self.style.scrollBarBoxMinSize);\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            self.resizeEditInput();\n            if (drawAfterResize) {\n                self.draw(true);\n            }\n            self.dispatchEvent('resize', {});\n            return true;\n        };\n        self.resizeEditInput = function () {\n            if (self.input) {\n                var pos = self.canvas.getBoundingClientRect(),\n                    s = self.scrollOffset(self.canvas),\n                    bx2 = (self.style.cellBorderWidth * 2),\n                    cell = self.getVisibleCellByIndex(self.input.editCell.columnIndex, self.input.editCell.rowIndex)\n                        || {x: -100, y: -100, height: 0, width: 0};\n                self.input.style.left = pos.left + cell.x - self.style.cellBorderWidth + self.canvasOffsetLeft - s.left + 'px';\n                self.input.style.top = pos.top + cell.y - bx2 + self.canvasOffsetTop - s.top + 'px';\n                self.input.style.height = cell.height - bx2 - 1 + 'px';\n                self.input.style.width = cell.width - bx2 - self.style.cellPaddingLeft + 'px';\n                self.clipElement(self.input);\n            }\n        };\n        self.scroll = function (e) {\n            var s = self.getVisibleSchema(),\n                cellBorder = self.style.cellBorderWidth * 2;\n            self.scrollIndexTop = 0;\n            self.scrollPixelTop = 0;\n            self.scrollIndexLeft = 0;\n            self.scrollPixelLeft = 0;\n            while (self.scrollPixelTop < self.scrollBox.scrollTop && self.scrollIndexTop < self.data.length) {\n                self.scrollPixelTop +=\n                    (self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || self.style.cellHeight)\n                    + (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0)\n                    + cellBorder;\n                self.scrollIndexTop += 1;\n            }\n            while (self.scrollPixelLeft < self.scrollBox.scrollLeft && self.scrollIndexLeft < s.length) {\n                self.scrollPixelLeft +=\n                    (self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width);\n                self.scrollIndexLeft += 1;\n            }\n            if (self.data.length > 0) {\n                self.scrollIndexLeft = Math.max(self.scrollIndexLeft - 1, 0);\n                self.scrollPixelLeft = Math.max(self.scrollPixelLeft\n                    - (self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width), 0);\n                self.scrollIndexTop = Math.max(self.scrollIndexTop - 1, 0);\n                self.scrollPixelTop = Math.max(self.scrollPixelTop\n                    - (self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || self.style.cellHeight)\n                    - (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0), 0);\n            }\n            self.ellipsisCache = {};\n            self.draw(true);\n            //TODO: figure out why this has to be delayed for child grids\n            //BUG: scrolling event on 3rd level hierarchy fails to move input box\n            requestAnimationFrame(self.resizeEditInput);\n            self.dispatchEvent('scroll', {top: self.scrollBox.scrollTop, left: self.scrollBox.scrollLeft});\n        };\n        self.mousemove = function (e, overridePos) {\n            if (self.contextMenu || self.input) {\n                return;\n            }\n            self.mouse = overridePos || self.getLayerPos(e);\n            var ctrl = (e.controlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                i,\n                s = self.getSchema(),\n                dragBounds,\n                sBounds,\n                x = self.mouse.x,\n                y = self.mouse.y,\n                o = self.getCellAt(x, y),\n                delta,\n                ev = {NativeEvent: e, cell: o, x: x, y: y},\n                previousCell = self.currentCell;\n            clearTimeout(self.scrollTimer);\n            if (!self.isInGrid({x: x, y: y})) {\n                self.hasFocus = false;\n            }\n            if (self.dispatchEvent('mousemove', ev)) {\n                return;\n            }\n            if (o && self.currentCell && (self.currentCell.rowIndex !== o.rowIndex\n                    || self.currentCell.columnIndex !== o.columnIndex)) {\n                self.cellBoundaryCrossed = true;\n                ev.cell = previousCell;\n                self.dispatchEvent('cellmouseout', ev);\n                ev.cell = o;\n                self.dispatchEvent('cellmouseover', ev);\n            }\n            self.currentCell = o;\n            if (!self.hasFocus) {\n                return;\n            }\n            self.hovers = {};\n            if (!self.draggingItem\n                    && o\n                    && self.scrollModes.indexOf(o.context) === -1) {\n                self.dragItem = o;\n                self.dragMode = o.dragContext;\n                self.canvas.style.cursor = o.context;\n                if (o.context === 'cell' && o.data) {\n                    self.canvas.style.cursor = 'pointer';\n                    self.hovers[o.data[self.uniqueId]] = [o.columnIndex];\n                }\n                if ((self.selecting || self.reorderObject)\n                        && o.context === 'cell'\n                        && o.data) {\n                    sBounds = self.getSelectionBounds();\n                    delta = {\n                        x: Math.abs(self.dragStart.x - x),\n                        y: Math.abs(self.dragStart.y - y),\n                    };\n                    if (self.dragStartObject.columnIndex !== -1 && e.shiftKey) {\n                        self.dragStartObject = {\n                            rowIndex: self.activeCell.rowIndex,\n                            columnIndex: self.activeCell.columnIndex\n                        };\n                    }\n                    dragBounds = {\n                        top: Math.min(self.dragStartObject.rowIndex, o.rowIndex),\n                        left: Math.min(self.dragStartObject.columnIndex, o.columnIndex),\n                        bottom: Math.max(self.dragStartObject.rowIndex, o.rowIndex),\n                        right: Math.max(self.dragStartObject.columnIndex, o.columnIndex)\n                    };\n                    if (self.dragStartObject.columnIndex === -1) {\n                        dragBounds.left = -1;\n                        dragBounds.right = s.length - 1;\n                        dragBounds.top = Math.min(sBounds.top, o.rowIndex);\n                        dragBounds.bottom = Math.max(sBounds.bottom, o.rowIndex);\n                    }\n                    if (self.dragStartObject.rowIndex !== o.rowIndex\n                                || self.dragStartObject.columnIndex !== o.columnIndex) {\n                        self.ignoreNextClick = true;\n                    }\n                    if (self.cellBoundaryCrossed || (delta.x === 0 && delta.y === 0) || self.attributes.rowSelectionMode) {\n                        if (self.attributes.rowSelectionMode || self.dragStartObject.columnIndex === -1) {\n                            self.selectRow(o.rowIndex, ctrl, true);\n                        } else {\n                            if (!self.dragAddToSelection && o.rowIndex) {\n                                if (self.selections[o.rowIndex] && self.selections[o.rowIndex].indexOf(o.columnIndex) !== -1) {\n                                    self.selections[o.rowIndex].splice(self.selections[o.rowIndex].indexOf(o.columnIndex), 1);\n                                }\n                            } else {\n                                self.selections[o.rowIndex] = self.selections[o.rowIndex] || [];\n                                if (self.selections[o.rowIndex].indexOf(o.columnIndex) === -1) {\n                                    self.selections[o.rowIndex].push(o.columnIndex);\n                                }\n                            }\n                        }\n                    }\n                    if ((!self.selectionBounds || (dragBounds.top !== self.selectionBounds.top\n                            || dragBounds.left !== self.selectionBounds.left\n                            || dragBounds.bottom !== self.selectionBounds.bottom\n                            || dragBounds.right !== self.selectionBounds.right)) && !ctrl) {\n                        self.selections = [];\n                        sBounds = dragBounds;\n                        if (self.attributes.rowSelectionMode) {\n                            for (i = sBounds.top; i <= sBounds.bottom; i += 1) {\n                                self.selectRow(i, true, true);\n                            }\n                        } else {\n                            self.selectArea(sBounds, true);\n                        }\n                    }\n                    self.autoScrollZone(e, x, y, ctrl);\n                }\n            }\n            self.cellBoundaryCrossed = false;\n            self.draw(true);\n        };\n        /**\n         * Ends editing, optionally aborting the edit.\n         * @memberof canvasDataGrid\n         * @name endEdit\n         * @method\n         * @param {boolean} abort When true, abort the edit.\n         */\n        self.endEdit = function (abort) {\n            var cell = self.input.editCell,\n                y = cell.rowIndex;\n            function abortEdit() {\n                abort = true;\n            }\n            if (self.dispatchEvent('beforeendedit', {\n                    cell: cell,\n                    newValue: self.input.value,\n                    oldValue: cell.value,\n                    abort: abortEdit,\n                    input: self.input\n                })) { return false; }\n            if (self.input.value !== cell.value && !abort) {\n                self.changes[y] = self.changes[y] || {};\n                self.changes[y][cell.header.name] = self.input.value;\n                cell.data[cell.header.name] = self.input.value;\n                if (y === self.data.length) {\n                    if (self.dispatchEvent('newrow', {\n                            value: self.input.value,\n                            defaultValue: cell.value,\n                            aborted: abort,\n                            cell: cell,\n                            input: self.input\n                        })) { return false; }\n                    self.uId += 1;\n                    self.addRow(cell.data);\n                    self.createNewRowData();\n                }\n                self.draw(true);\n            }\n            document.body.removeChild(self.input);\n            self.controlInput.focus();\n            self.dispatchEvent('endedit', {\n                cell: cell,\n                value: self.input.value,\n                aborted: abort,\n                input: self.input\n            });\n            self.input = undefined;\n            return true;\n        };\n        /**\n         * Begins editing at cell x, row y.\n         * @memberof canvasDataGrid\n         * @name beginEditAt\n         * @method\n         * @param {number} x The column index of the cell to edit.\n         * @param {number} y The row index of the cell to edit.\n         */\n        self.beginEditAt = function (x, y) {\n            if (!self.attributes.editable) { return; }\n            var cell = self.getVisibleCellByIndex(x, y),\n                s = self.getVisibleSchema(),\n                enumItems;\n            if (self.dispatchEvent('beforebeginedit', {cell: cell})) { return false; }\n            self.scrollIntoView(x, y);\n            self.setActiveCell(x, y);\n            function postDraw() {\n                var mEv, option, valueInEnum;\n                cell = self.getVisibleCellByIndex(x, y);\n                if (cell.header.enum) {\n                    self.input = document.createElement('select');\n                    // add enums\n                    if (typeof cell.header.enum === 'function') {\n                        enumItems = cell.header.enum.apply(self.intf, [{cell: cell}]);\n                    } else if (Array.isArray(cell.header.enum)) {\n                        enumItems = cell.header.enum;\n                    }\n                    enumItems.forEach(function (e) {\n                        var i = document.createElement('option'),\n                            val,\n                            title;\n                        if (Array.isArray(e)) {\n                            val = e[0];\n                            title = e[1];\n                        } else {\n                            val = e;\n                            title = e;\n                        }\n                        if (val === cell.value) { valueInEnum = true; }\n                        i.value = val;\n                        i.innerHTML = title;\n                        self.input.appendChild(i);\n                    });\n                    if (!valueInEnum) {\n                        option = document.createElement('option');\n                        option.value = cell.value;\n                        option.innerHTML = cell.value;\n                        self.input.appendChild(option);\n                    }\n                    self.input.addEventListener('change', function () {\n                        self.endEdit();\n                        self.draw(true);\n                    });\n                } else {\n                    self.input = document.createElement(self.attributes.multiLine ? 'textarea' : 'input');\n                }\n                document.body.appendChild(self.input);\n                self.createInlineStyle(self.input, 'canvas-datagrid-edit-input');\n                self.input.style.position = 'absolute';\n                self.input.editCell = cell;\n                self.resizeEditInput();\n                self.input.style.zIndex = '2';\n                self.input.value = cell.value;\n                self.input.focus();\n                self.input.addEventListener('click', self.stopPropagation);\n                self.input.addEventListener('dblclick', self.stopPropagation);\n                self.input.addEventListener('mouseup', self.stopPropagation);\n                self.input.addEventListener('mousedown', self.stopPropagation);\n                self.input.addEventListener('keydown', function (e) {\n                    var nx = cell.columnIndex,\n                        ny = cell.rowIndex;\n                    // esc\n                    if (e.keyCode === 27) {\n                        self.endEdit(true);\n                        self.draw(true);\n                    // enter\n                    } else if (e.keyCode === 13\n                            && (!self.attributes.multiLine\n                                || (self.attributes.multiLine && e.shiftKey))) {\n                        self.endEdit();\n                        self.draw(true);\n                    } else if (e.keyCode === 9) {\n                        e.preventDefault();\n                        if (!self.endEdit()) {\n                            return;\n                        }\n                        if (e.shiftKey) {\n                            nx -= 1;\n                        } else {\n                            nx += 1;\n                        }\n                        if (nx < 0) {\n                            nx = s.length - 1;\n                            ny -= 1;\n                        }\n                        if (nx > s.length - 1) {\n                            nx = 0;\n                            ny += 1;\n                        }\n                        if (ny < 0) {\n                            ny = self.data.length - 1;\n                        }\n                        if (ny > self.data.length - 1) {\n                            ny = 0;\n                        }\n                        self.beginEditAt(nx, ny);\n                    }\n                });\n            }\n            requestAnimationFrame(postDraw);\n            self.dispatchEvent('beginedit', {cell: cell, input: self.input});\n        };\n        self.click = function (e, overridePos) {\n            var i,\n                selectionChanged,\n                ctrl = (e.controlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                pos = overridePos || self.getLayerPos(e);\n            self.currentCell = self.getCellAt(pos.x, pos.y);\n            if (self.currentCell.grid !== undefined) {\n                return;\n            }\n            function checkSelectionChange() {\n                if (!selectionChanged) { return; }\n                self.dispatchEvent('selectionchanged', {\n                    selectedData: self.getSelectedData(),\n                    selections: self.selections,\n                    selectionBounds: self.selectionBounds\n                });\n            }\n            if (self.input) {\n                self.endEdit();\n            }\n            if (self.ignoreNextClick) {\n                self.ignoreNextClick = false;\n                return;\n            }\n            i = self.currentCell;\n            if (self.dispatchEvent('click', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'cell') {\n                if (self.currentCell.style === 'cornerCell') {\n                    self.order(self.uniqueId, 'asc');\n                    self.setFilter();\n                    checkSelectionChange();\n                    return;\n                }\n                if (self.currentCell.style === 'headerCell') {\n                    if (self.orderBy === i.header.name) {\n                        self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                    } else {\n                        self.orderDirection = 'asc';\n                    }\n                    self.order(i.header.name, self.orderDirection);\n                    checkSelectionChange();\n                    return;\n                }\n                if (['rowHeaderCell', 'headerCell'].indexOf(self.currentCell.style) === -1 && !ctrl) {\n                    self.setActiveCell(i.columnIndex, i.rowIndex);\n                }\n                self.selections[i.rowIndex] = self.selections[i.rowIndex] || [];\n                if ((self.attributes.rowSelectionMode || self.currentCell.style === 'rowHeaderCell')) {\n                    if (self.currentCell.style === 'rowHeaderCell'\n                            && self.attributes.tree && pos.x > 0\n                            && pos.x - self.currentCell.x < self.style.treeArrowWidth\n                            + self.style.treeArrowMarginLeft\n                            + self.style.treeArrowMarginRight + self.style.treeArrowClickRadius\n                            && pos.y - self.currentCell.y < self.style.treeArrowHeight\n                            + self.style.treeArrowMarginTop + self.style.treeArrowClickRadius\n                            && pos.y > 0) {\n                        self.toggleTree(i.rowIndex);\n                        return;\n                    }\n                    selectionChanged = true;\n                    self.selectRow(i.rowIndex, ctrl, true);\n                }\n                if (e.shiftKey && !ctrl) {\n                    self.selectionBounds = self.getSelectionBounds();\n                    self.selectArea(undefined, false);\n                }\n            }\n            checkSelectionChange();\n            self.draw(true);\n        };\n        self.dragResizeColumn = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = self.resizingStartingWidth + pos.x - self.dragStart.x;\n            y = self.resizingStartingHeight + pos.y - self.dragStart.y;\n            if (x < self.style.minColumnWidth) {\n                x = self.style.minColumnWidth;\n            }\n            if (y < self.style.minRowHeight) {\n                y = self.style.minRowHeight;\n            }\n            if (self.dispatchEvent('resizecolumn', {x: x, y: y, draggingItem: self.draggingItem})) { return false; }\n            if (self.scrollBox.scrollLeft > self.scrollBox.scrollWidth - self.attributes.resizeScrollZone\n                    && self.dragMode === 'ew-resize') {\n                self.resize(true);\n                self.scrollBox.scrollLeft += x;\n            }\n            if (self.dragMode === 'ew-resize') {\n                self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] = x;\n                if (['rowHeaderCell', 'cornerCell'].indexOf(self.draggingItem.header.style) !== -1) {\n                    self.resize(true);\n                }\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.dragMode === 'ns-resize') {\n                if (self.draggingItem.rowOpen) {\n                    self.sizes.trees[self.draggingItem.data[self.uniqueId]] = y;\n                } else if (self.attributes.globalRowResize) {\n                    self.style.cellHeight = y;\n                } else {\n                    self.sizes.rows[self.draggingItem.data[self.uniqueId]] = y;\n                }\n                self.dispatchEvent('resizerow', {row: y});\n                self.resizeChildGrids();\n                return;\n            }\n            self.ellipsisCache = {};\n        };\n        self.stopDragResize = function () {\n            self.resize();\n            document.body.removeEventListener('mousemove', self.dragResizeColumn, false);\n            document.body.removeEventListener('mouseup', self.stopDragResize, false);\n            self.setStorageData();\n            self.draw(true);\n            self.ignoreNextClick = true;\n        };\n        self.scrollGrid = function (e) {\n            var pos = self.getLayerPos(e);\n            self.scrollMode = self.getCellAt(pos.x, pos.y).context;\n            if (self.scrollMode === 'horizontal-scroll-box' && self.scrollStartMode !== 'horizontal-scroll-box') {\n                self.scrollStartMode = 'horizontal-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.left = self.scrollBox.scrollLeft;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box' && self.scrollStartMode !== 'vertical-scroll-box') {\n                self.scrollStartMode = 'vertical-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.top = self.scrollBox.scrollTop;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollStartMode === 'vertical-scroll-box'\n                    && self.scrollMode !== 'vertical-scroll-box') {\n                self.scrollMode = 'vertical-scroll-box';\n            }\n            if (self.scrollStartMode === 'horizontal-scroll-box'\n                    && self.scrollMode !== 'horizontal-scroll-box') {\n                self.scrollMode = 'horizontal-scroll-box';\n            }\n            clearTimeout(self.scrollTimer);\n            if (self.scrollModes.indexOf(self.scrollMode) === -1) {\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box') {\n                self.scrollBox.scrollTop = self.scrollStart.top + ((pos.y - self.dragStart.y)\n                    / self.scrollBox.heightBoxRatio);\n            } else if (self.scrollMode === 'vertical-scroll-top') {\n                self.scrollBox.scrollTop -= (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'vertical-scroll-bottom') {\n                self.scrollBox.scrollTop += (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n            if (self.scrollMode === 'horizontal-scroll-box') {\n                self.scrollBox.scrollLeft = self.scrollStart.left + ((pos.x - self.dragStart.x)\n                    / self.scrollBox.widthBoxRatio);\n            } else if (self.scrollMode === 'horizontal-scroll-right') {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'horizontal-scroll-left') {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.stopScrollGrid = function () {\n            clearTimeout(self.scrollTimer);\n            document.body.removeEventListener('mousemove', self.scrollGrid, false);\n        };\n        self.dragReorder = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = pos.x - self.dragStart.x;\n            y = pos.y - self.dragStart.y;\n            if (!self.attributes.allowColumnReordering && self.dragMode === 'column-reorder') {\n                return;\n            }\n            if (!self.attributes.allowRowReordering && self.dragMode === 'row-reorder') {\n                return;\n            }\n            if (self.dispatchEvent('reordering', {\n                    NativeEvent: e,\n                    source: self.dragStartObject,\n                    target: self.currentCell,\n                    dragMode: self.dragMode\n                })) {\n                return;\n            }\n            if (Math.abs(x) > self.attributes.reorderDeadZone || Math.abs(y) > self.attributes.reorderDeadZone) {\n                self.reorderObject = self.dragStartObject;\n                self.reorderTarget = self.currentCell;\n                self.reorderObject.dragOffset = {\n                    x: x,\n                    y: y\n                };\n                self.autoScrollZone(e, pos.x, pos.x, false);\n            }\n        };\n        self.stopDragReorder = function (e) {\n            var cr = {\n                    'row-reorder': self.orders.rows,\n                    'column-reorder': self.orders.columns\n                },\n                i = {\n                    'row-reorder': 'rowIndex',\n                    'column-reorder': 'columnIndex'\n                }[self.dragMode];\n            document.body.removeEventListener('mousemove', self.dragReorder, false);\n            document.body.removeEventListener('mouseup', self.stopDragReorder, false);\n            if (self.reorderObject\n                    && self.reorderTarget) {\n                self.ignoreNextClick = true;\n                if (self.reorderObject[i] !== self.reorderTarget[i]\n                        && !self.dispatchEvent('reorder', {\n                            NativeEvent: e,\n                            source: self.reorderObject,\n                            target: self.reorderTarget,\n                            dragMode: self.dragMode\n                        })) {\n                    cr[self.dragMode].splice(cr[self.dragMode].indexOf(self.reorderObject[i]), 1);\n                    cr[self.dragMode].splice(cr[self.dragMode].indexOf(self.reorderTarget[i]), 0, self.reorderObject[i]);\n                    self.setStorageData();\n                }\n            }\n            self.reorderObject = undefined;\n            self.reorderTarget = undefined;\n            self.draw(true);\n        };\n        self.mousedown = function (e, overridePos) {\n            self.lastMouseDownTarget = e.target;\n            if (self.dispatchEvent('mousedown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (e.button === 2 || self.input) { return; }\n            var ctrl = (e.controlKey || e.metaKey);\n            self.dragStart = overridePos || self.getLayerPos(e);\n            self.scrollStart = {\n                left: self.scrollBox.scrollLeft,\n                top: self.scrollBox.scrollTop\n            };\n            self.dragStartObject = self.getCellAt(self.dragStart.x, self.dragStart.y);\n            self.dragAddToSelection = !self.dragStartObject.selected;\n            if (!ctrl && !e.shiftKey && !/(vertical|horizontal)-scroll-(bar|box)/\n                    .test(self.dragStartObject.context)) {\n                self.selections = [];\n            }\n            if (self.dragStartObject.isGrid) {\n                return;\n            }\n            if (self.scrollModes.indexOf(self.dragStartObject.context) !== -1) {\n                self.scrollMode = self.dragStartObject.context;\n                self.scrollStartMode = self.dragStartObject.context;\n                self.scrollGrid(e);\n                document.body.addEventListener('mousemove', self.scrollGrid, false);\n                document.body.addEventListener('mouseup', self.stopScrollGrid, false);\n                self.ignoreNextClick = true;\n                return;\n            }\n            if (self.dragMode === 'cell') {\n                self.selecting = true;\n                if (self.attributes.rowSelectionMode) {\n                    self.selectRow(self.dragStartObject.rowIndex, ctrl, true);\n                }\n                return self.mousemove(e);\n            }\n            if (['ns-resize', 'ew-resize'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragItem;\n                if (self.draggingItem.rowOpen) {\n                    self.resizingStartingHeight = self.sizes.trees[self.draggingItem.data[self.uniqueId]];\n                } else {\n                    self.resizingStartingHeight = self.sizes.rows[self.draggingItem.data[self.uniqueId]] || self.style.cellHeight;\n                }\n                self.resizingStartingWidth = self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] || self.draggingItem.header.width;\n                document.body.addEventListener('mousemove', self.dragResizeColumn, false);\n                document.body.addEventListener('mouseup', self.stopDragResize, false);\n            }\n            if (['row-reorder', 'column-reorder'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragItem;\n                document.body.addEventListener('mousemove', self.dragReorder, false);\n                document.body.addEventListener('mouseup', self.stopDragReorder, false);\n            }\n        };\n        self.mouseup = function (e) {\n            clearTimeout(self.scrollTimer);\n            self.cellBoundaryCrossed = true;\n            self.selecting = undefined;\n            self.draggingItem = undefined;\n            self.dragStartObject = undefined;\n            if (self.dispatchEvent('mouseup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            if (self.currentCell && self.currentCell.grid !== undefined) {\n                return;\n            }\n            if (self.contextMenu || self.input) { return; }\n            if (self.dragStart && self.isInGrid(self.dragStart)) {\n                self.controlInput.focus();\n            }\n            e.preventDefault();\n        };\n        self.keydown = function (e) {\n            var i,\n                x = self.activeCell.columnIndex,\n                y = self.activeCell.rowIndex,\n                ctrl = (e.controlKey || e.metaKey),\n                last = self.data.length - 1,\n                cols = self.getVisibleSchema().length - 1;\n            if (self.dispatchEvent('keydown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            if (self.attributes.showNewRow) {\n                last += 1;\n            }\n            if (e.keyCode === 'Tab') {\n                e.preventDefault();\n            }\n            //ArrowDown\n            if (e.keyCode === 40) {\n                y += 1;\n            //ArrowUp\n            } else if (e.keyCode === 38) {\n                y -= 1;\n            //ArrowLeft Tab\n            } else if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {\n                x -= 1;\n            //ArrowRight Tab\n            } else if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {\n                x += 1;\n            //PageUp\n            } else if (e.keyCode === 33) {\n                y -= self.page;\n                e.preventDefault();\n            //PageDown\n            } else if (e.keyCode === 34) {\n                y += self.page;\n                e.preventDefault();\n            //Home ArrowUp\n            } else if (e.keyCode === 36 || (ctrl && e.keyCode === 38)) {\n                y = 0;\n            //End ArrowDown\n            } else if (e.keyCode === 35 || (ctrl && e.keyCode === 40)) {\n                y = self.data.length - 1;\n            //ArrowRight\n            } else if (ctrl && e.keyCode === 39) {\n                x = cols;\n            //ArrowLeft\n            } else if (ctrl && e.keyCode === 37) {\n                x = 0;\n            }\n            //Enter\n            if (e.keyCode === 13) {\n                return self.beginEditAt(x, y);\n            }\n            //Space\n            if (e.keyCode === 32) {\n                self.selections = [];\n                self.selections[Math.max(y, 0)] = [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                if (self.attributes.rowSelectionMode) {\n                    for (i = self.selectionBounds.top; i <= self.selectionBounds.bottom; i += 1) {\n                        self.selectRow(i, ctrl, true);\n                    }\n                } else {\n                    self.selectArea(undefined, ctrl);\n                }\n                e.preventDefault();\n                self.draw(true);\n                return;\n            }\n            if (x < 0) {\n                x = 0;\n            }\n            if (y > last) {\n                y = last;\n            }\n            if (y < 0) {\n                y = 0;\n            }\n            if (x > cols) {\n                x = cols;\n            }\n            // Arrows\n            if (e.shiftKey && [37, 38, 39, 40].indexOf(e.keyCode) !== -1) {\n                self.selections[Math.max(y, 0)] = self.selections[Math.max(y, 0)] || [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                self.selectArea(undefined, ctrl);\n                self.draw(true);\n            }\n            if (x !== self.activeCell.columnIndex || y !== self.activeCell.rowIndex) {\n                self.scrollIntoView(x !== self.activeCell.columnIndex ? x : undefined, y !== self.activeCell.rowIndex ? y : undefined);\n                self.setActiveCell(x, y);\n                if (!e.shiftKey && self.attributes.selectionFollowsActiveCell) {\n                    if (!ctrl) {\n                        self.selections = [];\n                    }\n                    self.selections[y] = self.selections[y] || [];\n                    self.selections[y].push(x);\n                    self.dispatchEvent('selectionchanged', {\n                        selectedData: self.getSelectedData(),\n                        selections: self.selections,\n                        selectionBounds: self.selectionBounds\n                    });\n                }\n                self.draw(true);\n            }\n        };\n        self.keyup = function (e) {\n            if (self.dispatchEvent('keyup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            self.controlInput.value = '';\n        };\n        self.keypress = function (e) {\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.dispatchEvent('keypress', {NativeEvent: e, cell: self.currentCell})) { return; }\n        };\n        self.dblclick = function (e) {\n            if (self.dispatchEvent('dblclick', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'headerCell') {\n                self.fitColumnToValues(self.currentCell.header.name);\n            } else if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'cornerCell') {\n                self.autosize();\n            } else if (['cell', 'activeCell'].indexOf(self.currentCell.style) !== -1) {\n                self.beginEditAt(self.currentCell.columnIndex, self.currentCell.rowIndex);\n            }\n        };\n        self.scrollWheel = function (e) {\n            if (self.dispatchEvent('wheel', {NativeEvent: e})) {\n                return;\n            }\n            self.touchHaltAnimation = true;\n            var l = self.scrollBox.scrollLeft,\n                t = self.scrollBox.scrollTop;\n            if (self.hasFocus) {\n                self.scrollBox.scrollTop += e.deltaY;\n                self.scrollBox.scrollLeft += e.deltaX;\n            }\n            if (t !== self.scrollBox.scrollTop || l !== self.scrollBox.scrollLeft) {\n                e.preventDefault();\n            }\n        };\n        self.copy = function (e) {\n            if (self.dispatchEvent('copy', {NativeEvent: e})) { return; }\n            if (!self.hasFocus || !e.clipboardData) { return; }\n            var rows = [], sData = self.getSelectedData();\n            if (sData.length > 0) {\n                sData.forEach(function (row) {\n                    if (row) {\n                        var r = [];\n                        Object.keys(row).forEach(function (key) {\n                            r.push(row[key]);\n                        });\n                        r.join(',');\n                        rows.push(r);\n                    }\n                });\n                e.clipboardData.setData('text/plain', rows.join('\\n'));\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        self.intf.blur = function (e) {\n            self.hasFocus = false;\n        };\n        self.intf.focus = function () {\n            self.hasFocus = true;\n            self.controlInput.focus();\n        };\n        Object.defineProperty(self.intf, 'height', {\n            get: function () {\n                return self.parentNode.height;\n            },\n            set: function (value) {\n                self.parentNode.height = value;\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'width', {\n            get: function () {\n                return self.parentNode.width;\n            },\n            set: function (value) {\n                self.parentNode.width = value;\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'openChildren', {\n            get: function () {\n                return self.openChildren;\n            }\n        });\n        Object.defineProperty(self.intf, 'childGrids', {\n            get: function () {\n                return Object.keys(self.childGrids).map(function (gridId) {\n                    return self.childGrids[gridId];\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'isChildGrid', {\n            get: function () {\n                return self.isChildGrid;\n            }\n        });\n        Object.defineProperty(self.intf, 'parentNode', {\n            get: function () {\n                return self.parentNode;\n            },\n            set: function (value) {\n                self.parentNode = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetParent', {\n            get: function () {\n                return self.parentNode;\n            },\n            set: function (value) {\n                self.parentNode = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetLeft', {\n            get: function () {\n                return self.parentNode.offsetLeft;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetTop', {\n            get: function () {\n                return self.parentNode.offsetTop;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollHeight', {\n            get: function () {\n                return self.scrollBox.scrollHeight;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollWidth', {\n            get: function () {\n                return self.scrollBox.scrollWidth;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollTop', {\n            get: function () {\n                return self.scrollBox.scrollTop;\n            },\n            set: function (value) {\n                self.scrollBox.scrollTop = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollLeft', {\n            get: function () {\n                return self.scrollBox.scrollLeft;\n            },\n            set: function (value) {\n                self.scrollBox.scrollLeft = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'sizes', {\n            get: function () {\n                return self.sizes;\n            }\n        });\n        Object.defineProperty(self.intf, 'input', {\n            get: function () {\n                return self.input;\n            }\n        });\n        Object.defineProperty(self.intf, 'controlInput', {\n            get: function () {\n                return self.controlInput;\n            }\n        });\n        Object.defineProperty(self.intf, 'currentCell', {\n            get: function () {\n                return self.currentCell;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleCells', {\n            get: function () {\n                return self.visibleCells;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRows', {\n            get: function () {\n                return self.visibleRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'selections', {\n            get: function () {\n                return self.selections;\n            }\n        });\n        Object.defineProperty(self.intf, 'dragMode', {\n            get: function () {\n                return self.dragMode;\n            }\n        });\n        Object.defineProperty(self.intf, 'changes', {\n            get: function () {\n                return self.changes;\n            }\n        });\n        self.intf.attributes = {};\n        self.intf.formatters = self.formatters;\n        self.normalizeDataset = function (data) {\n            if (!Array.isArray(data)) {\n                throw new Error('Data must be an array of objects or arrays.');\n            }\n            if ((typeof data[0] === 'object' && data[0] !== null)\n                            || (Array.isArray(data) && data.length === 0)) {\n                return data;\n            }\n            if (Array.isArray(data)) {\n                if (!Array.isArray(data[0])) {\n                    //array of something?  throw it all into 1 row!\n                    data = [data];\n                }\n                // find the longest length\n                var max = 0, d = [];\n                data.forEach(function (row) {\n                    max = Math.max(max, row.length);\n                });\n                // map against length indexes\n                data.forEach(function (row, index) {\n                    var x;\n                    d[index] = {};\n                    for (x = 0; x < max; x += 1) {\n                        d[index][self.integerToAlpha(x).toUpperCase()] = row[x] || null;\n                    }\n                });\n                return d;\n            }\n            throw new Error('Unsupported data type.  Must be an array of arrays or an array of objects.');\n        };\n        Object.defineProperty(self.intf, 'selectionBounds', {\n            get: function () {\n                return self.getSelectionBounds();\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedRows', {\n            get: function () {\n                return self.getSelectedData(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedCells', {\n            get: function () {\n                return self.getSelectedData();\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleSchema', {\n            get: function () {\n                return self.getVisibleSchema().map(function eachDataRow(col) {\n                    return col;\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'ctx', {\n            get: function () {\n                return self.ctx;\n            }\n        });\n        Object.defineProperty(self.intf, 'schema', {\n            get: function schemaGetter() {\n                return self.getSchema();\n            },\n            set: function schemaSetter(value) {\n                if (!Array.isArray(value) || typeof value[0] !== 'object') {\n                    throw new Error('Schema must be an array of objects.');\n                }\n                if (value[0].name === undefined) {\n                    throw new Error('Expected schema to contain an object with at least a name property.');\n                }\n                self.schema = value.map(function eachSchemaColumn(column, index) {\n                    column.width = column.width || self.style.columnWidth;\n                    column[self.uniqueId] = self.getSchemaNameHash(column.name);\n                    column.filter = column.filter || self.filter(column.type);\n                    column.type = column.type || 'string';\n                    column.index = index;\n                    column.columnIndex = index;\n                    column.rowIndex = -1;\n                    return column;\n                });\n                self.tempSchema = undefined;\n                self.createNewRowData();\n                self.createColumnOrders();\n                self.tryLoadStoredOrders();\n                self.resize(true);\n                self.dispatchEvent('schemachanged', {schema: self.schema});\n            }\n        });\n        Object.defineProperty(self.intf, 'data', {\n            get: function dataGetter() {\n                return self.data;\n            },\n            set: function dataSetter(value) {\n                self.originalData = self.normalizeDataset(value).map(function eachDataRow(row) {\n                    row[self.uniqueId] = self.uId;\n                    self.uId += 1;\n                    return row;\n                });\n                self.changes = [];\n                //TODO apply filter to incoming dataset\n                self.data = self.originalData;\n                if (!self.schema && self.data.length > 0) {\n                    self.tempSchema = self.getSchemaFromData();\n                }\n                if (!self.schema && self.data.length === 0) {\n                    self.tempSchema = [{name: ''}];\n                    self.tempSchema[0][self.uniqueId] = self.getSchemaNameHash('');\n                }\n                if (self.tempSchema && !self.schema) {\n                    self.createColumnOrders();\n                    self.tryLoadStoredOrders();\n                    self.dispatchEvent('schemachanged', {schema: self.tempSchema});\n                }\n                self.createNewRowData();\n                if (self.attributes.autoResizeColumns && self.data.length > 0\n                        && self.storedSettings === undefined) {\n                    self.autosize();\n                }\n                // width cannot be determined correctly until after inserted into the dom?\n                requestAnimationFrame(function () {\n                    self.fitColumnToValues('cornerCell');\n                });\n                if (!self.resize()) { self.draw(true); }\n                self.createRowOrders();\n                self.tryLoadStoredOrders();\n                self.dispatchEvent('datachanged', {data: self.data});\n            }\n        });\n        return;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false, Event: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var zIndexTop = 2, hoverScrollTimeout, autoCompleteContext;\n        function createContextMenu(ev, pos, items, parentContextMenu) {\n            var container = document.createElement('div'),\n                upArrow = document.createElement('div'),\n                downArrow = document.createElement('div'),\n                children = [],\n                selectedIndex = -1,\n                intf = {},\n                rect;\n            if (!Array.isArray(items)) { throw new Error('createContextMenu expects an array.'); }\n            function createItems() {\n                items.forEach(function (item) {\n                    var contextItemContainer = document.createElement('div'),\n                        childMenuArrow;\n                    function removeChildContext(e) {\n                        if (e.relatedTarget === container\n                                || item.contextMenu.container === e.relatedTarget\n                                || childMenuArrow === e.relatedTarget\n                                || (contextItemContainer === e.relatedTarget)\n                                ) { return; }\n                        item.contextMenu.dispose();\n                        children.splice(children.indexOf(item.contextMenu), 1);\n                        item.contextMenu = undefined;\n                        contextItemContainer.removeEventListener('mouseout', removeChildContext);\n                        container.removeEventListener('mouseout', removeChildContext);\n                        contextItemContainer.setAttribute('contextOpen', '0');\n                        contextItemContainer.setAttribute('opening', '0');\n                    }\n                    function contextAddCallback(items) {\n                        // check yet again if the user hasn't moved off\n                        if (contextItemContainer.getAttribute('opening') !== '1' ||\n                                contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        var cPos = contextItemContainer.getBoundingClientRect();\n                        cPos = {\n                            left: cPos.left + self.style.childContextMenuMarginLeft + container.offsetWidth,\n                            top: cPos.top + self.style.childContextMenuMarginTop,\n                            bottom: cPos.bottom,\n                            right: cPos.right,\n                        };\n                        item.contextMenu = createContextMenu(ev, cPos, items, intf);\n                        contextItemContainer.setAttribute('contextOpen', '1');\n                        contextItemContainer.addEventListener('mouseout', removeChildContext);\n                        container.addEventListener('mouseout', removeChildContext);\n                        children.push(item.contextMenu);\n                    }\n                    function createChildContext() {\n                        var i;\n                        if (contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        contextItemContainer.setAttribute('opening', '1');\n                        if (typeof item.items === 'function') {\n                            i  = item.items.apply(intf, [function (items) {\n                                contextAddCallback(items);\n                            }]);\n                            if (i !== undefined && Array.isArray(i)) {\n                                contextAddCallback(i);\n                            }\n                            return;\n                        }\n                        contextAddCallback(item.items);\n                    }\n                    function addItem(item) {\n                        function addContent(content) {\n                            if (typeof content === 'function') {\n                                return addContent(content(ev));\n                            }\n                            if (typeof content === 'object') {\n                                contextItemContainer.appendChild(content);\n                                return;\n                            }\n                            self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n                            contextItemContainer.addEventListener('mouseover', function () {\n                                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                            });\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n                            });\n                            contextItemContainer.innerHTML = content;\n                            return;\n                        }\n                        addContent(item.title);\n                        item.contextItemContainer = contextItemContainer;\n                        if (item.items && item.items.length > 0) {\n                            childMenuArrow = document.createElement('div');\n                            self.createInlineStyle(childMenuArrow, 'canvas-datagrid-context-child-arrow');\n                            childMenuArrow.innerHTML = self.style.childContextMenuArrowHTML;\n                            contextItemContainer.appendChild(childMenuArrow);\n                            contextItemContainer.addEventListener('mouseover', createChildContext);\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                contextItemContainer.setAttribute('opening', '0');\n                            });\n                        }\n                        if (item.click) {\n                            contextItemContainer.addEventListener('click', function (ev) {\n                                item.click.apply(self, [ev]);\n                            });\n                        }\n                    }\n                    addItem(item);\n                    container.appendChild(contextItemContainer);\n                });\n            }\n            function clickIndex(idx) {\n                items[idx].contextItemContainer.dispatchEvent(new Event('click'));\n            }\n            function checkArrowVisibility() {\n                if (container.scrollTop > 0) {\n                    document.body.appendChild(upArrow);\n                } else if (upArrow.parentNode) {\n                    upArrow.parentNode.removeChild(upArrow);\n                }\n                if (container.scrollTop >= container.scrollHeight - container.offsetHeight && downArrow.parentNode) {\n                    downArrow.parentNode.removeChild(downArrow);\n                } else if (container.scrollHeight - container.offsetHeight > 0\n                        && !(container.scrollTop >= container.scrollHeight - container.offsetHeight)) {\n                    document.body.appendChild(downArrow);\n                }\n            }\n            function startHoverScroll(type) {\n                return function t() {\n                    var a = self.attributes.contextHoverScrollAmount;\n                    if (type === 'up' && container.scrollTop === 0) { return; }\n                    if (type === 'down' && container.scrollTop === container.scrollHeight) { return; }\n                    container.scrollTop += (type === 'up' ? -a : a);\n                    hoverScrollTimeout = setTimeout(t, self.attributes.contextHoverScrollRateMs, type);\n                };\n            }\n            function endHoverScroll(type) {\n                return function () {\n                    clearTimeout(hoverScrollTimeout);\n                };\n            }\n            function init() {\n                var loc = {},\n                    s = self.scrollOffset(self.canvas);\n                createItems();\n                self.createInlineStyle(container, 'canvas-datagrid-context-menu');\n                loc.x = pos.left - s.left;\n                loc.y = pos.top - s.top;\n                loc.height = 0;\n                zIndexTop += 1;\n                container.style.position = 'absolute';\n                upArrow.style.color = self.style.contextMenuArrowColor;\n                downArrow.style.color = self.style.contextMenuArrowColor;\n                [upArrow, downArrow].forEach(function (el) {\n                    el.style.textAlign = 'center';\n                    el.style.position = 'absolute';\n                    el.style.zIndex = zIndexTop + 1;\n                });\n                container.style.zIndex = zIndexTop;\n                if (parentContextMenu && parentContextMenu.inputDropdown) {\n                    container.style.maxHeight = window.innerHeight - loc.y - self.style.autocompleteBottomMargin + 'px';\n                    container.style.minWidth = pos.width + 'px';\n                    loc.y += pos.height;\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                container.addEventListener('scroll', checkArrowVisibility);\n                container.addEventListener('wheel', function (e) {\n                    if (self.hasFocus) {\n                        container.scrollTop += e.deltaY;\n                        container.scrollLeft += e.deltaX;\n                    }\n                    checkArrowVisibility();\n                });\n                upArrow.innerHTML = self.style.contextMenuArrowUpHTML;\n                downArrow.innerHTML = self.style.contextMenuArrowDownHTML;\n                container.appendChild(upArrow);\n                document.body.appendChild(downArrow);\n                document.body.appendChild(container);\n                rect = container.getBoundingClientRect();\n                if (rect.bottom > window.innerHeight && !(parentContextMenu && parentContextMenu.inputDropdown)) {\n                    loc.y = window.innerHeight - container.offsetHeight;\n                    if (loc.y < 0) { loc.y = 0; }\n                    if (container.offsetHeight > window.innerHeight) {\n                        container.style.height = window.innerHeight - self.style.contextMenuWindowMargin + 'px';\n                    }\n                }\n                if (rect.right > window.innerWidth) {\n                    if (parentContextMenu) {\n                        loc.x = parentContextMenu.container.offsetLeft - container.offsetWidth;\n                    } else {\n                        loc.x = window.innerWidth - container.offsetWidth;\n                    }\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                rect = container.getBoundingClientRect();\n                upArrow.style.top = rect.top + 'px';\n                downArrow.style.top = rect.top + rect.height - downArrow.offsetHeight + 'px';\n                upArrow.style.left = rect.left + 'px';\n                downArrow.style.left = rect.left + 'px';\n                downArrow.style.width = container.offsetWidth + 'px';\n                upArrow.style.width = container.offsetWidth + 'px';\n                downArrow.addEventListener('mouseover', startHoverScroll('down'));\n                downArrow.addEventListener('mouseout', endHoverScroll('down'));\n                upArrow.addEventListener('mouseover', startHoverScroll('up'));\n                upArrow.addEventListener('mouseout', endHoverScroll('up'));\n                checkArrowVisibility();\n            }\n            intf.parentGrid = self.intf;\n            intf.parentContextMenu = parentContextMenu;\n            intf.container = container;\n            init();\n            intf.clickIndex = clickIndex;\n            intf.rect = rect;\n            intf.items = items;\n            intf.dispose = function () {\n                clearTimeout(hoverScrollTimeout);\n                children.forEach(function (c) {\n                    c.dispose();\n                });\n                [downArrow, upArrow, container].forEach(function (el) {\n                    if (el.parentNode) { el.parentNode.removeChild(el); }\n                });\n            };\n            Object.defineProperty(intf, 'selectedIndex', {\n                get: function () {\n                    return selectedIndex;\n                },\n                set: function (value) {\n                    if (typeof value !== 'number' || isNaN(value || !isFinite(value))) {\n                        throw new Error('Context menu selected index must be a sane number.');\n                    }\n                    selectedIndex = value;\n                    if (selectedIndex > items.length - 1) {\n                        selectedIndex = items.length - 1;\n                    }\n                    if (selectedIndex < 0) {\n                        selectedIndex = 0;\n                    }\n                    items.forEach(function (item, index) {\n                        if (index === selectedIndex) {\n                            return self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                        }\n                        self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item');\n                    });\n                }\n            });\n            return intf;\n        }\n        function createFilterContextMenuItems(e) {\n            var filterContainer = document.createElement('div'),\n                filterLabel = document.createElement('div'),\n                filterAutoCompleteButton = document.createElement('button'),\n                filterInput = document.createElement('input'),\n                n = e.cell && e.cell.header ? e.cell.header.title || e.cell.header.name : '',\n                autoCompleteItems,\n                iRect;\n            function fillAutoComplete() {\n                autoCompleteItems = {};\n                self.data.forEach(function (row) {\n                    var value = row[e.cell.header.name];\n                    if (autoCompleteItems[value]) { return; }\n                    autoCompleteItems[value] = {\n                        title: self.formatters[e.cell.header.type || 'string']({ cell: { value: value }}),\n                        click: function (e) {\n                            filterInput.value = value;\n                            e.stopPropagation();\n                            filterInput.dispatchEvent(new Event('keyup'));\n                            self.disposeAutocomplete();\n                            return;\n                        }\n                    };\n                });\n                autoCompleteItems = Object.keys(autoCompleteItems).map(function (key) {\n                    return autoCompleteItems[key];\n                });\n            }\n            function createAutoCompleteContext(ev) {\n                if (ev && [40, 38, 13, 9, 27].indexOf(ev.keyCode) !== -1) { return; }\n                fillAutoComplete();\n                iRect = filterInput.getBoundingClientRect();\n                if (autoCompleteContext) {\n                    autoCompleteContext.dispose();\n                    autoCompleteContext = undefined;\n                }\n                autoCompleteContext = createContextMenu(e, {\n                    left: iRect.left,\n                    top: iRect.top,\n                    right: iRect.right,\n                    bottom: iRect.bottom,\n                    height: iRect.height,\n                    width: iRect.width\n                }, autoCompleteItems, {inputDropdown: true});\n                autoCompleteContext.selectedIndex = 0;\n            }\n            self.createInlineStyle(filterLabel, 'canvas-datagrid-context-menu-label');\n            self.createInlineStyle(filterAutoCompleteButton, 'canvas-datagrid-context-menu-filter-button');\n            self.createInlineStyle(filterInput, 'canvas-datagrid-context-menu-filter-input');\n            filterInput.onclick = self.disposeAutocomplete;\n            filterInput.addEventListener('keydown', function (e) {\n                //down\n                if (e.keyCode === 40) {\n                    autoCompleteContext.selectedIndex += 1;\n                }\n                //up\n                if (e.keyCode === 38) {\n                    autoCompleteContext.selectedIndex -= 1;\n                }\n                //enter\n                if (e.keyCode === 13) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    self.disposeContextMenu();\n                }\n                //tab\n                if (e.keyCode === 9) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    e.preventDefault();\n                }\n                //esc\n                if (e.keyCode === 27) {\n                    self.disposeContextMenu();\n                }\n            });\n            filterInput.addEventListener('keyup', function () {\n                self.setFilter(e.cell.header.name, filterInput.value);\n            });\n            filterInput.addEventListener('keyup', createAutoCompleteContext);\n            filterInput.value = self.columnFilters[e.cell.header.name] || '';\n            filterLabel.innerHTML = self.attributes.filterOptionText.replace(/%s/g, n);\n            filterAutoCompleteButton.onclick = function () {\n                if (autoCompleteContext) {\n                    return self.disposeAutocomplete();\n                }\n                createAutoCompleteContext();\n            };\n            filterAutoCompleteButton.innerHTML = self.style.contextFilterButtonHTML;\n            filterContainer.addEventListener('click', function (e) {\n                return e.stopPropagation();\n            });\n            filterContainer.appendChild(filterLabel);\n            filterContainer.appendChild(filterInput);\n            filterContainer.appendChild(filterAutoCompleteButton);\n            e.items.push({\n                title: filterContainer\n            });\n            if (Object.keys(self.columnFilters).length) {\n                Object.keys(self.columnFilters).forEach(function (cf) {\n                    var h = self.getHeaderByName(cf);\n                    e.items.push({\n                        title: self.attributes.removeFilterOptionText.replace(/%s/g, h.title || h.name),\n                        click: function removeFilterClick(e) {\n                            e.preventDefault();\n                            self.setFilter(cf, '');\n                            self.controlInput.focus();\n                        }\n                    });\n                });\n            }\n        }\n        function addDefaultContextMenuItem(e) {\n            var isNormalCell = !(e.cell.isBackground || e.cell.isHeaderCellCap\n                            || e.cell.isScrollBar || e.cell.isCorner || e.cell.isRowHeader);\n            if (self.attributes.showFilter && isNormalCell) {\n                createFilterContextMenuItems(e);\n            }\n            if (self.attributes.showCopy\n                    && self.selections.reduce(function (p, r) {\n                        return p + r.length;\n                    }, 0) > 0) {\n                e.items.push({\n                    title: self.attributes.copyText,\n                    click: function () {\n                        document.execCommand('copy');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.saveAppearance && self.attributes.showClearSettingsOption\n                    && (Object.keys(self.sizes.rows).length > 0\n                        || Object.keys(self.sizes.columns).length > 0)) {\n                e.items.push({\n                    title: self.attributes.clearSettingsOptionText,\n                    click: function (e) {\n                        e.preventDefault();\n                        self.sizes.rows = {};\n                        self.sizes.columns = {};\n                        self.createRowOrders();\n                        self.createColumnOrders();\n                        self.storedSettings = undefined;\n                        self.dispatchEvent('resizecolumn', {columnWidth: self.style.columnWidth});\n                        self.dispatchEvent('resizerow', {cellHeight: self.style.cellHeight});\n                        self.setStorageData();\n                        self.resize(true);\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.allowSorting && self.attributes.showOrderByOption && isNormalCell) {\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextAsc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'asc');\n                        self.controlInput.focus();\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextDesc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'desc');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n        }\n        self.disposeAutocomplete = function () {\n            if (autoCompleteContext) {\n                autoCompleteContext.dispose();\n                autoCompleteContext = undefined;\n            }\n        };\n        self.disposeContextMenu = function () {\n            document.removeEventListener('click', self.disposeContextMenu);\n            zIndexTop = 2;\n            self.disposeAutocomplete();\n            self.contextMenu.dispose();\n            self.contextMenu = undefined;\n        };\n        self.contextmenuEvent = function (e, overridePos) {\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            var items = [],\n                pos = overridePos || self.getLayerPos(e, true),\n                ev = {\n                    NativeEvent: e,\n                    cell: self.getCellAt(pos.x, pos.y),\n                    items: items\n                };\n            if (!ev.cell.isGrid) {\n                addDefaultContextMenuItem(ev);\n            }\n            if (self.dispatchEvent('contextmenu', ev)) {\n                return;\n            }\n            if (!ev.cell.isGrid) {\n                if (self.contextMenu) {\n                    self.disposeContextMenu();\n                }\n                self.contextMenu = createContextMenu(ev, {\n                    left: pos.x + pos.rect.left + self.style.contextMenuMarginLeft + self.canvasOffsetLeft,\n                    top: pos.y + pos.rect.top + self.style.contextMenuMarginTop + self.canvasOffsetTop,\n                    right: ev.cell.width + ev.cell.x + pos.rect.left,\n                    bottom: ev.cell.height + ev.cell.y + pos.rect.top,\n                    height: ev.cell.height,\n                    width: ev.cell.width\n                }, items);\n                document.addEventListener('click', self.disposeContextMenu);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        self.defaults = {\n            attributes: [\n                ['name', ''],\n                ['tree', false],\n                ['showNewRow', false],\n                ['treeHorizontalScroll', false],\n                ['saveAppearance', true],\n                ['selectionFollowsActiveCell', false],\n                ['multiLine', false],\n                ['editable', true],\n                ['allowColumnReordering', true],\n                ['allowRowReordering', false],\n                ['allowSorting', true],\n                ['showFilter', true],\n                ['globalRowResize', false],\n                ['pageUpDownOverlap', 1],\n                ['persistantSelectionMode', false],\n                ['rowSelectionMode', false],\n                ['autoResizeColumns', false],\n                ['allowRowHeaderResize', true],\n                ['allowColumnResize', true],\n                ['allowRowResize', true],\n                ['allowRowResizeFromCell', false],\n                ['allowColumnResizeFromCell', false],\n                ['debug', false],\n                ['borderResizeZone', 10],\n                ['showColumnHeaders', true],\n                ['showRowNumbers', true],\n                ['showRowHeaders', true],\n                ['scrollRepeatRate', 75],\n                ['selectionScrollZone', 20],\n                ['resizeScrollZone', 20],\n                ['contextHoverScrollRateMs', 5],\n                ['contextHoverScrollAmount', 2],\n                ['selectionScrollIncrement', 20],\n                ['reorderDeadZone', 3],\n                ['showClearSettingsOption', true],\n                ['showOrderByOption', true],\n                ['clearSettingsOptionText', 'Clear saved settings'],\n                ['showOrderByOptionTextAsc', 'Order by %s ascending'],\n                ['showOrderByOptionTextDesc', 'Order by %s descending'],\n                ['removeFilterOptionText', 'Remove filter on %s'],\n                ['filterOptionText', 'Filter %s'],\n                ['filterTextPrefix', '(filtered) '],\n                ['touchReleaseAnimationDurationMs', 1000],\n                ['touchReleaseAcceleration', 30],\n                ['touchDeadZone', 3],\n                ['touchSelectTimeMs', 800],\n                ['touchScrollZone', 40],\n                ['copyText', 'Copy'],\n                ['showCopy', true]\n            ],\n            styles: [\n                ['activeCellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['activeCellBorderWidth', 0.25],\n                ['activeCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellFont', '16px sans-serif'],\n                ['activeCellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['activeCellOverlayBorderWidth', 1.50],\n                ['activeCellPaddingBottom', 5],\n                ['activeCellPaddingLeft', 5],\n                ['activeCellPaddingRight', 7],\n                ['activeCellPaddingTop', 5],\n                ['activeCellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['activeCellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['activeHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeRowHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeRowHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['autocompleteBottomMargin', 60],\n                ['autosizeHeaderCellPadding', 8],\n                ['autosizePadding', 5],\n                ['backgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cellAutoResizePadding', 13],\n                ['cellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['cellBorderWidth', 0.25],\n                ['cellColor', 'rgba(0, 0, 0, 1)'],\n                ['cellFont', '16px sans-serif'],\n                ['cellHeight', 24],\n                ['cellHeightWithChildGrid', 150],\n                ['cellHorizontalAlignment', 'left'],\n                ['cellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['cellPaddingBottom', 5],\n                ['cellPaddingLeft', 5],\n                ['cellPaddingRight', 7],\n                ['cellPaddingTop', 5],\n                ['cellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['cellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['cellVerticalAlignment', 'center'],\n                ['cellWidthWithChildGrid', 250],\n                ['childContextMenuMarginLeft', -15],\n                ['childContextMenuMarginTop', 0],\n                ['childContextMenuArrowHTML', '&#x25BA;'],\n                ['childContextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuChildArrowFontSize', '12px'],\n                ['columnWidth', 250],\n                ['contextMenuBackground', 'rgba(240, 240, 240, 1)'],\n                ['contextMenuBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextMenuBorderRadius', '3px'],\n                ['contextMenuColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuFilterInvalidExpresion', 'rgba(237, 155, 156, 1)'],\n                ['contextMenuFontFamily', 'sans-serif'],\n                ['contextMenuFontSize', '16px'],\n                ['contextMenuHoverBackground', 'rgba(182, 205, 250, 1)'],\n                ['contextMenuHoverColor', 'rgba(43, 48, 153, 1)'],\n                ['contextMenuItemBorderRadius', '3px'],\n                ['contextMenuItemMargin', '2px'],\n                ['contextMenuLabelDisplay', 'inline-block'],\n                ['contextMenuLabelMargin', '0 3px 0 0'],\n                ['contextMenuLabelMaxWidth', '700px'],\n                ['contextMenuLabelMinWidth', '75px'],\n                ['contextMenuMarginLeft', 3],\n                ['contextMenuMarginTop', -3],\n                ['contextMenuWindowMargin', 6],\n                ['contextMenuOpacity', '0.98'],\n                ['contextMenuPadding', '2px'],\n                ['contextMenuArrowUpHTML', '&#x25B2;'],\n                ['contextMenuArrowDownHTML', '&#x25BC;'],\n                ['contextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextFilterButtonHTML', '&#x25BC;'],\n                ['contextFilterButtonBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterButtonBorderRadius', '3px'],\n                ['contextMenuFilterButtonFontFamily', 'sans-serif'],\n                ['contextMenuFilterButtonFontSize', '10px'],\n                ['contextFilterInputBackground', 'rgba(255,255,255,1)'],\n                ['contextFilterInputColor', 'rgba(0,0,0,1)'],\n                ['contextFilterInputBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterInputBorderRadius', '0'],\n                ['contextFilterInputFontFamily', 'sans-serif'],\n                ['contextFilterInputFontSize', '14px'],\n                ['cornerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cornerCellBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['editCellBorder', 'solid 1px rgba(110, 168, 255, 1)'],\n                ['editCellBoxShadow', '0 2px 5px rgba(0,0,0,0.4)'],\n                ['editCellFontFamily', 'sans-serif'],\n                ['editCellFontSize', '16px'],\n                ['editCellPaddingLeft', 4],\n                ['editCellColor', 'black'],\n                ['editCellBackgroundColor', 'white'],\n                ['gridBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['gridBorderWidth', 1],\n                ['headerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['headerCellBorderColor', 'rgba(152, 152, 152, 1)'],\n                ['headerCellBorderWidth', 0.25],\n                ['headerCellColor', 'rgba(50, 50, 50, 1)'],\n                ['headerCellFont', '16px sans-serif'],\n                ['headerCellHeight', 25],\n                ['headerCellHorizontalAlignment', 'left'],\n                ['headerCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['headerCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['headerCellPaddingBottom', 5],\n                ['headerCellPaddingLeft', 5],\n                ['headerCellPaddingRight', 7],\n                ['headerCellPaddingTop', 5],\n                ['headerCellVerticalAlignment', 'center'],\n                ['headerOrderByArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['headerOrderByArrowBorderWidth', 1],\n                ['headerOrderByArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['headerOrderByArrowHeight', 8],\n                ['headerOrderByArrowMarginLeft', 0],\n                ['headerOrderByArrowMarginRight', 5],\n                ['headerOrderByArrowMarginTop', 6],\n                ['headerOrderByArrowWidth', 13],\n                ['headerRowWidth', 57],\n                ['minColumnWidth', 45],\n                ['minHeight', 24],\n                ['minRowHeight', 24],\n                ['name', 'default'],\n                ['reorderMarkerBackgroundColor', 'rgba(0, 0, 0, 0.1)'],\n                ['reorderMarkerBorderColor', 'rgba(0, 0, 0, 0.2)'],\n                ['reorderMarkerBorderWidth', 1.25],\n                ['reorderMarkerIndexBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['reorderMarkerIndexBorderWidth', 2.75],\n                ['rowHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['rowHeaderCellBorderColor', 'rgba(152, 152, 152, 1)'],\n                ['rowHeaderCellBorderWidth', 0.25],\n                ['rowHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellFont', '16px sans-serif'],\n                ['rowHeaderCellHeight', 25],\n                ['rowHeaderCellHorizontalAlignment', 'left'],\n                ['rowHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['rowHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['rowHeaderCellPaddingBottom', 5],\n                ['rowHeaderCellPaddingLeft', 5],\n                ['rowHeaderCellPaddingRight', 5],\n                ['rowHeaderCellPaddingTop', 5],\n                ['rowHeaderCellSelectedBackgroundColor', 'rgba(217, 217, 217, 1)'],\n                ['rowHeaderCellSelectedColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellVerticalAlignment', 'center'],\n                ['scrollBarActiveColor', 'rgba(125, 125, 125, 1)'],\n                ['scrollBarBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarBorderWidth', 0.5],\n                ['scrollBarBoxBorderRadius', 3],\n                ['scrollBarBoxColor', 'rgba(192, 192, 192, 1)'],\n                ['scrollBarBoxMargin', 2],\n                ['scrollBarBoxMinSize', 15],\n                ['scrollBarBoxWidth', 8],\n                ['scrollBarCornerBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarCornerBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarWidth', 11],\n                ['selectionOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionOverlayBorderWidth', 0.75],\n                ['treeArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['treeArrowBorderWidth', 1],\n                ['treeArrowClickRadius', 5],\n                ['treeArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['treeArrowHeight', 8],\n                ['treeArrowMarginLeft', 0],\n                ['treeArrowMarginRight', 5],\n                ['treeArrowMarginTop', 6],\n                ['treeArrowWidth', 13],\n                ['treeGridHeight', 250]\n            ]\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        self.createInlineStyle = function (el, className) {\n            var css = {\n                'canvas-datagrid-context-menu-filter-input': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextFilterInputBackground,\n                    color: self.style.contextFilterInputColor,\n                    border: self.style.contextFilterInputBorder,\n                    borderRadius: self.style.contextFilterInputBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextFilterInputFontFamily,\n                    fontSize: self.style.contextFilterInputFontSize\n                },\n                'canvas-datagrid-context-menu-filter-button': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextFilterButtonBorder,\n                    borderRadius: self.style.contextFilterButtonBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFilterButtonFontFamily,\n                    fontSize: self.style.contextMenuFilterButtonFontSize\n                },\n                'canvas-datagrid-context-child-arrow': {\n                    cssFloat: 'right',\n                    color: self.style.childContextMenuArrowColor,\n                    fontSize: self.style.contextMenuChildArrowFontSize,\n                    fontFamily: self.style.contextMenuFontFamily,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-autocomplete': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    position: 'absolute',\n                    zIndex: 3,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-autocomplete-item': {\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor\n                },\n                'canvas-datagrid-autocomplete-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-canvas': {\n                    position: 'absolute',\n                    zIndex: '-1'\n                },\n                'canvas-datagrid': {\n                    position: 'absolute',\n                    background: self.style.backgroundColor,\n                    zIndex: '1',\n                    boxSizing: 'content-box',\n                    padding: '0'\n                },\n                'canvas-datagrid-control-input': {\n                    position: 'fixed',\n                    top: '-5px',\n                    left: '-5px',\n                    border: 'none',\n                    opacity: '0',\n                    cursor: 'pointer',\n                    width: '1px',\n                    height: '1px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize\n                },\n                'canvas-datagrid-edit-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 ' + self.style.editCellPaddingLeft + 'px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.editCellFontFamily,\n                    fontSize: self.style.editCellFontSize,\n                    boxShadow: self.style.editCellBoxShadow,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-context-menu-item': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-context-menu-label': {\n                    margin: self.style.contextMenuLabelMargin,\n                    display: self.style.contextMenuLabelDisplay,\n                    minWidth: self.style.contextMenuLabelMinWidth,\n                    maxWidth: self.style.contextMenuLabelMaxWidth\n                },\n                'canvas-datagrid-context-menu': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-invalid-search-regExp': {\n                    background: self.style.contextMenuFilterInvalidExpresion\n                }\n            };\n            if (css[className]) {\n                Object.keys(css[className]).map(function (prop) {\n                    el.style[prop] = css[className][prop];\n                });\n            }\n            return;\n        };\n        self.appendTo = function (n) {\n            self.parentNode = n;\n            self.height = self.parentNode.offsetHeight;\n            self.width = self.parentNode.offsetWidth;\n            if (self.parentNode && /canvas-datagrid-(cell|tree)/.test(self.parentNode.nodeType)) {\n                self.isChildGrid = true;\n                self.parentGrid = self.parentNode.parentGrid;\n                self.ctx = self.parentGrid.context;\n                self.canvas = self.parentGrid.canvas;\n                self.controlInput = self.parentGrid.controlInput;\n                self.eventParent = self.canvas;\n                self.intf.offsetParent = self.parentNode;\n            } else {\n                self.controlInput = document.createElement('input');\n                self.controlInput.onblur = self.intf.blur;\n                self.createInlineStyle(self.controlInput, 'canvas-datagrid-control-input');\n                self.isChildGrid = false;\n                self.parentDOMNode = self.parentNode;\n                self.parentNode = self.parentDOMNode;\n                self.canvas = document.createElement('canvas');\n                self.ctx = self.canvas.getContext('2d');\n                self.ctx.textBaseline = 'alphabetic';\n                self.parentDOMNode.appendChild(self.canvas);\n                self.parentDOMNode.appendChild(self.controlInput);\n                self.eventParent = self.canvas;\n            }\n            self.controlInput.addEventListener('blur', function (e) {\n                if (e.target !== self.canvas) {\n                    self.hasFocus = false;\n                }\n            });\n            window.addEventListener('resize', self.resize);\n            if (MutationObserver) {\n                self.observer = new MutationObserver(function (mutations) {\n                    mutations.forEach(function (mutation) {\n                        self.resize(true);\n                    });\n                });\n                [self.canvas.parentNode].forEach(function (el) {\n                    self.observer.observe(el, { attributes: true });\n                });\n            }\n            self.eventParent.addEventListener('scroll', self.resize, false);\n            self.eventParent.addEventListener('touchstart', self.touchstart, false);\n            self.eventParent.addEventListener('mouseup', self.mouseup, false);\n            self.eventParent.addEventListener('mousedown', self.mousedown, false);\n            self.eventParent.addEventListener('dblclick', self.dblclick, false);\n            self.eventParent.addEventListener('click', self.click, false);\n            self.eventParent.addEventListener('mousemove', self.mousemove);\n            self.eventParent.addEventListener('wheel', self.scrollWheel, false);\n            self.canvas.addEventListener('contextmenu', self.contextmenuEvent, false);\n            (self.isChildGrid ? self.parentGrid : document).addEventListener('copy', self.copy);\n            self.controlInput.addEventListener('keypress', self.keypress, false);\n            self.controlInput.addEventListener('keyup', self.keyup, false);\n            self.controlInput.addEventListener('keydown', self.keydown, false);\n        };\n        self.setDom = function () {\n            self.appendTo(self.args.parentNode);\n        };\n        self.initScrollBox = function () {\n            var sHeight = 0,\n                sWidth = 0,\n                scrollTop = 0,\n                scrollLeft = 0,\n                scrollHeight = 0,\n                scrollWidth = 0,\n                scrollBoxHeight = 20,\n                scrollBoxWidth = 20;\n            function setScrollTop(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollTop value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollHeight) {\n                    value = scrollHeight;\n                }\n                if (scrollHeight < 0) {\n                    value = 0;\n                }\n                scrollTop = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            function setScrollLeft(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollLeft value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollWidth) {\n                    value = scrollWidth;\n                }\n                if (scrollWidth < 0) {\n                    value = 0;\n                }\n                scrollLeft = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            self.scrollBox.scrollTo = function (x, y) {\n\n                setScrollLeft(x, true);\n                setScrollTop(y);\n            };\n            Object.defineProperty(self.scrollBox, 'scrollBoxHeight', {\n                get: function () {\n                    return scrollBoxHeight;\n                },\n                set: function (value) {\n                    scrollBoxHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollBoxWidth', {\n                get: function () {\n                    return scrollBoxWidth;\n                },\n                set: function (value) {\n                    scrollBoxWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'height', {\n                get: function () {\n                    return sHeight;\n                },\n                set: function (value) {\n                    if (scrollHeight < value) {\n                        scrollTop = 0;\n                    }\n                    sHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'width', {\n                get: function () {\n                    return sWidth;\n                },\n                set: function (value) {\n                    sWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollTop', {\n                get: function () {\n                    return scrollTop;\n                },\n                set: setScrollTop\n            });\n            Object.defineProperty(self.scrollBox, 'scrollLeft', {\n                get: function () {\n                    return scrollLeft;\n                },\n                set: setScrollLeft\n            });\n            Object.defineProperty(self.scrollBox, 'scrollHeight', {\n                get: function () {\n                    return scrollHeight;\n                },\n                set: function (value) {\n                    if (scrollTop > value) {\n                        scrollTop = Math.max(value, 0);\n                    }\n                    if (scrollHeight < sHeight) {\n                        scrollTop = 0;\n                    }\n                    scrollHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollWidth', {\n                get: function () {\n                    return scrollWidth;\n                },\n                set: function (value) {\n                    if (scrollLeft > value) {\n                        scrollLeft = Math.max(value, 0);\n                    }\n                    scrollWidth = value;\n                }\n            });\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        // all methods here are exposed by intf\n        // to users\n        /**\n         * Converts a integer into a letter A - ZZZZZ...\n         * @memberof canvasDataGrid\n         * @name integerToAlpha\n         * @method\n         * @param {column} n The number to convert.\n         */\n        self.integerToAlpha = function (n) {\n            var ordA = 'a'.charCodeAt(0),\n                ordZ = 'z'.charCodeAt(0),\n                len = ordZ - ordA + 1,\n                s = '';\n            while (n >= 0) {\n                s = String.fromCharCode(n % len + ordA) + s;\n                n = Math.floor(n / len) - 1;\n            }\n            return s;\n        };\n        /**\n         * Inserts a new column before the specified index into the schema.\n         * @see canvasDataGrid#schema\n         * @tutorial schema\n         * @memberof canvasDataGrid\n         * @name insertColumn\n         * @method\n         * @param {column} rowIndex The column to insert into the schema.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertColumn = function (c, index) {\n            var s = self.getSchema();\n            if (s.length < index) {\n                throw new Error('Index is beyond the length of the schema.');\n            }\n            self.validateColumn(c, s);\n            self.intf.schema = s.splice(index, 0, c);\n        };\n        /**\n         * Deletes a column from the schema at the specified index.\n         * @memberof canvasDataGrid\n         * @name deleteColumn\n         * @tutorial schema\n         * @method\n         * @param {number} index The index of the column to delete.\n         */\n        self.deleteColumn = function (index) {\n            var s = self.getSchema();\n            self.intf.schema = s.splice(index, 1);\n        };\n        /**\n         * Adds a new column into the schema.\n         * @see canvasDataGrid#schema\n         * @tutorial schema\n         * @memberof canvasDataGrid\n         * @name addColumn\n         * @method\n         * @param {column} c The column to add to the schema.\n         */\n        self.addColumn = function (c) {\n            var s = self.getSchema();\n            self.validateColumn(c, s);\n            s.push(c);\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a row from the dataset at the specified index.\n         * @memberof canvasDataGrid\n         * @name deleteRow\n         * @method\n         * @param {number} index The index of the row to delete.\n         */\n        self.deleteRow = function (index) {\n            self.originalData.splice(index, 1);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Inserts a new row into the dataset before the specified index.\n         * @memberof canvasDataGrid\n         * @name insertRow\n         * @method\n         * @param {object} d data.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertRow = function (d, index) {\n            if (self.originalData.length < index) {\n                throw new Error('Index is beyond the length of the dataset.');\n            }\n            self.originalData.splice(index, 0, d);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Adds a new row into the dataset.\n         * @memberof canvasDataGrid\n         * @name addRow\n         * @method\n         * @param {object} d data.\n         */\n        self.addRow = function (d) {\n            self.originalData.push(d);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Sets the height of a given row by index number.\n         * @memberof canvasDataGrid\n         * @name setRowHeight\n         * @method\n         * @param {number} rowIndex The index of the row to set.\n         * @param {number} height Height to set the row to.\n         */\n        self.setRowHeight = function (rowIndex, height) {\n            self.sizes.rows[self.data[rowIndex][self.uniqueId]] = height;\n            self.draw(true);\n        };\n        /**\n         * Sets the width of a given column by index number.\n         * @memberof canvasDataGrid\n         * @name setColumnWidth\n         * @method\n         * @param {number} colIndex The index of the column to set.\n         * @param {number} width Width to set the column to.\n         */\n        self.setColumnWidth = function (colIndex, width) {\n            var s = self.getSchema();\n            self.sizes.columns[s[colIndex][self.uniqueId]] = width;\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the width of the columns due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDataGrid\n         * @name resetColumnWidths\n         * @tutorial schema\n         * @method\n         */\n        self.resetColumnWidths = function () {\n            self.sizes.columns = {};\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the height of the rows due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDataGrid\n         * @name resetRowHeights\n         * @tutorial schema\n         * @method\n         */\n        self.resetRowHeights = function () {\n            self.sizes.rows = {};\n            self.draw(true);\n        };\n        /**\n         * Sets the value of the filter.\n         * @memberof canvasDataGrid\n         * @name setFilter\n         * @method\n         * @param {string} column Name of the column to filter.\n         * @param {string} value The value to filter for.\n         */\n        self.setFilter = function (column, value) {\n            function applyFilter() {\n                self.refreshFromOrigialData();\n                Object.keys(self.columnFilters).forEach(function (filter) {\n                    var header = self.getHeaderByName(column);\n                    if (!header) {\n                        return;\n                    }\n                    self.currentFilter = header.filter || self.filter(column.type || 'string');\n                    self.data = self.data.filter(function (row) {\n                        return self.currentFilter(row[filter], self.columnFilters[filter]);\n                    });\n                });\n                self.resize();\n                self.draw(true);\n            }\n            if (self.coulumn === undefined && value === undefined) {\n                return applyFilter();\n            }\n            if (column && (value === '' || value === undefined)) {\n                delete self.columnFilters[column];\n            } else {\n                self.columnFilters[column] = value;\n            }\n            applyFilter();\n        };\n        /**\n         * Returns the number of pixels to scroll down to line up with row rowIndex.\n         * @memberof canvasDataGrid\n         * @name findRowScrollTop\n         * @method\n         * @param {number} rowIndex The row index of the row to scroll find.\n         */\n        self.findRowScrollTop = function (rowIndex) {\n            var top = 0, x = 0, l = self.data.length,\n                cellBorder = self.style.cellBorderWidth * 2;\n            if (!self.attributes.showNewRow) {\n                l -= 1;\n            }\n            if (rowIndex > l) {\n                throw new Error('Impossible row index');\n            }\n            while (x < rowIndex) {\n                top += (self.sizes.rows[self.data[x][self.uniqueId]] || self.style.cellHeight) + cellBorder;\n                x += 1;\n            }\n            //TODO: This is not super accurate, causes pageUp/Dn to not move around right\n            return top - (self.sizes.rows[self.data[rowIndex][self.uniqueId]] || self.style.cellHeight);\n        };\n        /**\n         * Returns the number of pixels to scroll to the left to line up with column columnIndex.\n         * @memberof canvasDataGrid\n         * @name findColumnScrollLeft\n         * @method\n         * @param {number} columnIndex The column index of the column to find.\n         */\n        self.findColumnScrollLeft = function (columnIndex) {\n            var left = 0, y = 0, s = self.getSchema(), l = s.length - 1;\n            if (columnIndex > l) {\n                throw new Error('Impossible column index');\n            }\n            while (y < columnIndex) {\n                left += self.sizes.columns[s[y][self.uniqueId]] || s[y].width;\n                y += 1;\n            }\n            return left;\n        };\n        /**\n         * Scrolls the cell at cell x, row y.\n         * @memberof canvasDataGrid\n         * @name gotoCell\n         * @method\n         * @param {number} x The column index of the cell to scroll to.\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoCell = function (x, y) {\n            if (x !== undefined) {\n                self.scrollBox.scrollLeft = self.findColumnScrollLeft(x);\n            }\n            if (y !== undefined) {\n                self.scrollBox.scrollTop = self.findRowScrollTop(y);\n            }\n        };\n        /**\n         * Scrolls the row y.\n         * @memberof canvasDataGrid\n         * @name gotoRow\n         * @method\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoRow = function (y) {\n            self.gotoCell(0, y);\n        };\n        /**\n         * Scrolls the cell at cell x, row y into view if it is not already.\n         * @memberof canvasDataGrid\n         * @name scrollIntoView\n         * @method\n         * @param {number} x The column index of the cell to scroll into view.\n         * @param {number} y The row index of the cell to scroll into view.\n         */\n        self.scrollIntoView = function (x, y) {\n            if (self.visibleCells.filter(function (cell) {\n                    return (cell.rowIndex === y || y === undefined)\n                        && (cell.columnIndex === x || x === undefined)\n                        && cell.x > 0\n                        && cell.y > 0\n                        && cell.x + cell.width < self.width\n                        && cell.y + cell.height < self.height;\n                }).length === 0) {\n                self.gotoCell(x, y);\n            }\n        };\n        /**\n         * Sets the active cell. Requires redrawing.\n         * @memberof canvasDataGrid\n         * @name setActiveCell\n         * @method\n         * @param {number} x The column index of the cell to set active.\n         * @param {number} y The row index of the cell to set active.\n         */\n        self.setActiveCell = function (x, y) {\n            self.activeCell = {\n                rowIndex: y,\n                columnIndex: x\n            };\n        };\n        /**\n         * Selects a row.\n         * @memberof canvasDataGrid\n         * @name selectRow\n         * @method\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the row.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectRow = function (rowIndex, ctrl, supressEvent) {\n            var s = self.getSchema();\n            if (self.dragAddToSelection === false) {\n                if (self.selections[rowIndex] && self.selections[rowIndex].length - 1 === s.length) {\n                    if (ctrl) {\n                        self.selections[rowIndex] = [];\n                        return;\n                    }\n                }\n            }\n            if (self.dragAddToSelection === true) {\n                self.selections[rowIndex] = [];\n                self.selections[rowIndex].push(-1);\n                s.forEach(function (col) {\n                    self.selections[rowIndex].push(col.index);\n                });\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Collapse a tree grid by row index.\n         * @memberof canvasDataGrid\n         * @name collapseTree\n         * @method\n         * @param {number} index The index of the row to collapse.\n         */\n        self.collapseTree = function (rowIndex) {\n            var rowId = self.data[rowIndex][self.uniqueId];\n            self.dispatchEvent('collapsetree', {\n                childGrid: self.childGrids[rowId],\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId].blur();\n            self.openChildren[rowId].dispose();\n            delete self.openChildren[rowId];\n            delete self.sizes.trees[rowId];\n            delete self.childGrids[rowId];\n            self.dispatchEvent('resizerow', {\n                cellHeight: self.style.cellHeight\n            });\n            self.resize(true);\n            self.draw(true);\n        };\n        /**\n         * Expands a tree grid by row index.\n         * @memberof canvasDataGrid\n         * @name expandTree\n         * @method\n         * @param {number} index The index of the row to expand.\n         */\n        self.expandTree = function (rowIndex) {\n            var headerCellHeight = self.getHeaderCellHeight(),\n                headerCellWidth = self.sizes.columns.cornerCell || self.style.headerRowWidth,\n                rowId = self.data[rowIndex][self.uniqueId],\n                h = self.sizes.trees[rowId] || self.style.treeGridHeight,\n                treeGrid;\n            if (!self.childGrids[rowId]) {\n                treeGrid = self.createGrid({\n                    debug: self.attributes.debug,\n                    name: self.attributes.saveAppearance\n                        ? self.attributes.name + 'tree' + rowId : undefined,\n                    parentNode: {\n                        parentGrid: self.intf,\n                        nodeType: 'canvas-datagrid-tree',\n                        offsetHeight: h,\n                        offsetWidth: self.width - headerCellWidth,\n                        header: { width: self.width - headerCellWidth },\n                        offsetLeft: headerCellWidth,\n                        offsetTop: headerCellHeight,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: 'tree',\n                        data: self.data[rowIndex]\n                    }\n                });\n                self.childGrids[rowId] = treeGrid;\n            }\n            treeGrid = self.childGrids[rowId];\n            treeGrid.visible = true;\n            self.dispatchEvent('expandtree', {\n                treeGrid: treeGrid,\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId] = treeGrid;\n            self.sizes.trees[rowId] = h;\n            self.dispatchEvent('resizerow', {height: self.style.cellHeight});\n            self.resize(true);\n        };\n        /**\n         * Toggles tree grid open and close by row index.\n         * @memberof canvasDataGrid\n         * @name toggleTree\n         * @method\n         * @param {number} index The index of the row to toggle.\n         */\n        self.toggleTree = function (rowIndex) {\n            var i = self.openChildren[self.data[rowIndex][self.uniqueId]];\n            if (i) {\n                return self.collapseTree(rowIndex);\n            }\n            self.expandTree(rowIndex);\n        };\n        /**\n         * Returns a header from the schema by name.\n         * @memberof canvasDataGrid\n         * @name getHeaderByName\n         * @tutorial schema\n         * @method\n         * @returns {header} header with the selected name, or undefined.\n         * @param {string} name The name of the column to resize.\n         */\n        self.getHeaderByName = function (name) {\n            var x, i = self.getSchema();\n            for (x = 0; x < i.length; x += 1) {\n                if (i[x].name === name) {\n                    return i[x];\n                }\n            }\n        };\n        /**\n         * Resizes a column to fit the longest value in the column. Call without a value to resize all columns.\n         * Warning, can be slow on very large record sets (1m records ~3-5 seconds on an i7).\n         * @memberof canvasDataGrid\n         * @name fitColumnToValues\n         * @method\n         * @param {string} name The name of the column to resize.\n         */\n        self.fitColumnToValues = function (name) {\n            self.sizes.columns[name === 'cornerCell' ? name : self.getHeaderByName(name)[self.uniqueId]]\n                = self.findColumnMaxTextLength(name);\n            self.resize();\n            self.draw(true);\n        };\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDataGrid\n         * @name isCellVisible\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {cell} cell The cell to check for.  Alternatively you can pass an object { x: <x-index>, y: <y-index> }.\n         */\n        self.isCellVisible = function (cell) {\n            var x, l = self.visibleCells.length;\n            for (x = 0; x < l; x += 1) {\n                if (cell.x === self.visibleCells[x].x && cell.y === self.visibleCells[x].y) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n         * Sets the order of the data.\n         * @memberof canvasDataGrid\n         * @name order\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} columnName Number of pixels from the left.\n         * @param {string} direction `asc` for ascending or `desc` for descending.\n         * @param {bool} dontSetStorageData Don't store this setting for future use.\n         */\n        self.order = function (columnName, direction, dontSetStorageData) {\n            var f,\n                c = self.getSchema().filter(function (col) {\n                    return col.name === columnName;\n                });\n            self.orderBy = columnName;\n            if (c.length === 0) {\n                throw new Error('Cannot sort.  No such column name');\n            }\n            f = self.sorters[c[0].type];\n            if (!f && c[0].type !== undefined) {\n                console.warn('Cannot sort type \"%s\" falling back to string sort.', c[0].type);\n            }\n            self.data = self.data.sort(typeof f === 'function' ? f(columnName, direction) : self.sorters.string);\n            self.dispatchEvent('ordercolumn', {name: columnName, direction: direction});\n            self.draw(true);\n            if (dontSetStorageData) { return; }\n            self.setStorageData();\n        };\n        self.isInGrid = function (e) {\n            if (e.x < 0\n                    || e.x > self.width\n                    || e.y < 0\n                    || e.y > self.height) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Gets the cell at columnIndex and rowIndex.\n         * @memberof canvasDataGrid\n         * @name getVisibleCellByIndex\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Column index.\n         * @param {number} y Row index.\n         */\n        self.getVisibleCellByIndex = function (x, y) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === x && c.rowIndex === y;\n            })[0];\n        };\n        /**\n         * Gets the cell at grid pixel coordinate x and y.\n         * @memberof canvasDataGrid\n         * @name getCellAt\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Number of pixels from the left.\n         * @param {number} y Number of pixels from the top.\n         */\n        self.getCellAt = function (x, y, useTouchScrollZones) {\n            var tsz = useTouchScrollZones ? self.attributes.touchScrollZone : 0, i, l = self.visibleCells.length, cell;\n            if (!self.visibleCells || !self.visibleCells.length) { return; }\n            self.hasFocus = true;\n            if (!(y < self.height\n                && y > 0\n                && x < self.width\n                && x > 0)) {\n                self.hasFocus = false;\n                return {\n                    dragContext: 'inherit',\n                    context: 'inherit'\n                };\n            }\n            for (i = 0; i < l; i += 1) {\n                cell = self.visibleCells[i];\n                if (useTouchScrollZones && /(vertical|horizontal)-scroll-/.test(cell.style)) {\n                    cell.x -= tsz;\n                    cell.y -= tsz;\n                    cell.height += tsz;\n                    cell.width += tsz;\n                }\n                if (cell.x - self.style.cellBorderWidth < x\n                        && cell.x + cell.width + self.style.cellBorderWidth > x\n                        && cell.y - self.style.cellBorderWidth < y\n                        && cell.y + cell.height + self.style.cellBorderWidth > y) {\n                    if (/vertical-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'vertical-scroll-box';\n                        cell.context = 'vertical-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isVerticalScrollBar = true;\n                        if (y > self.scrollBox.box.v.y + self.scrollBox.scrollBoxHeight) {\n                            cell.dragContext = 'vertical-scroll-bottom';\n                            cell.context = 'vertical-scroll-bottom';\n                        } else if (y < self.scrollBox.box.v.y) {\n                            cell.dragContext = 'vertical-scroll-top';\n                            cell.context = 'vertical-scroll-top';\n                        }\n                        self.canvas.style.cursor = 'default';\n                        return cell;\n                    }\n                    if (/horizontal-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'horizontal-scroll-box';\n                        cell.context = 'horizontal-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isHorizontalScrollBar = true;\n                        if (x > self.scrollBox.box.h.x + self.scrollBox.scrollBoxWidth) {\n                            cell.dragContext = 'horizontal-scroll-right';\n                            cell.context = 'horizontal-scroll-right';\n                        } else if (x < self.scrollBox.box.h.x) {\n                            cell.dragContext = 'horizontal-scroll-left';\n                            cell.context = 'horizontal-scroll-left';\n                        }\n                        self.canvas.style.cursor = 'default';\n                        return cell;\n                    }\n                    if (cell.x + cell.width - (self.attributes.borderResizeZone * 0.4) < x\n                            && cell.x + cell.width + (self.attributes.borderResizeZone * 0.6) > x\n                            && self.attributes.allowColumnResize\n                            && ((self.attributes.allowColumnResizeFromCell && cell.style === 'cell')\n                                || cell.style !== 'cell')\n                            && ((self.attributes.allowRowHeaderResize\n                                && ['rowHeaderCell', 'cornerCell'].indexOf(cell.style) !== -1)\n                                || ['rowHeaderCell', 'cornerCell'].indexOf(cell.style) === -1)) {\n                        cell.context = 'ew-resize';\n                        cell.dragContext = 'ew-resize';\n                        return cell;\n                    }\n                    if (cell.y + cell.height - (self.attributes.borderResizeZone * 0.4) < y\n                            && cell.y + cell.height + (self.attributes.borderResizeZone * 0.6) > y\n                            && self.attributes.allowRowResize\n                            && ((self.attributes.allowRowResizeFromCell && cell.style === 'cell')\n                                || cell.style !== 'cell')\n                            && cell.style !== 'headerCell') {\n                        cell.context = 'ns-resize';\n                        cell.dragContext = 'ns-resize';\n                        return cell;\n                    }\n                    if (cell.style === 'headerCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'column-reorder';\n                        return cell;\n                    }\n                    if (cell.style === 'rowHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'row-reorder';\n                        return cell;\n                    }\n                    if (cell.isGrid) {\n                        self.hasFocus = false;\n                        cell.dragContext = 'cell-grid';\n                        cell.context = 'cell-grid';\n                        return cell;\n                    }\n                    if (cell.style === 'tree-grid') {\n                        self.hasFocus = false;\n                        cell.dragContext = 'tree';\n                        cell.context = 'tree';\n                        return cell;\n                    }\n                    cell.dragContext = 'cell';\n                    cell.context = 'cell';\n                    return cell;\n                }\n            }\n            self.hasFocus = true;\n            self.canvas.style.cursor = 'default';\n            return {\n                dragContext: 'background',\n                context: 'background',\n                style: 'background',\n                isBackground: true\n            };\n        };\n        /**\n         * Gets the bounds of current selection. \n         * @returns {rect} selection.\n         * @memberof canvasDataGrid\n         * @name getSelectionBounds\n         * @method\n         */\n        self.getSelectionBounds = function () {\n            var low = {x: Infinity, y: Infinity},\n                high = {x: -Infinity, y: -Infinity};\n            self.data.forEach(function (row, rowIndex) {\n                var maxCol, minCol;\n                if (self.selections[rowIndex] && self.selections[rowIndex].length) {\n                    low.y = rowIndex < low.y ? rowIndex : low.y;\n                    high.y = rowIndex > high.y ? rowIndex : high.y;\n                    maxCol = Math.max.apply(null, self.selections[rowIndex]);\n                    minCol = Math.min.apply(null, self.selections[rowIndex]);\n                    low.x = minCol < low.x ? minCol : low.x;\n                    high.x = maxCol > high.x ? maxCol : high.x;\n                }\n            });\n            return {\n                top: low.y,\n                left: low.x,\n                bottom: high.y,\n                right: high.x\n            };\n        };\n        /**\n         * Returns an auto generated schema based on data structure.\n         * @memberof canvasDataGrid\n         * @name getSchemaFromData\n         * @method\n         * @tutorial schema\n         * @returns {schema} schema A schema based on the first item in the data array.\n         */\n        self.getSchemaFromData = function () {\n            return Object.keys(self.data[0] || {' ': ''}).map(function mapEachSchemaColumn(key, index) {\n                var type = self.getBestGuessDataType(key),\n                    i = {\n                        name: key,\n                        title: key,\n                        width: self.style.columnWidth,\n                        index: index,\n                        type: type,\n                        filter: self.filter(type)\n                    };\n                if (key === self.uniqueId) {\n                    i.hidden = true;\n                }\n                i[self.uniqueId] = self.getSchemaNameHash(key);\n                return i;\n            });\n        };\n        /**\n         * Clears the change log grid.changes that keeps track of changes to the data set.\n         * This does not undo changes or alter data it is simply a convince array to keep\n         * track of changes made to the data since last this method was called.\n         * @memberof canvasDataGrid\n         * @name clearChangeLog\n         * @method\n         */\n        self.clearChangeLog = function () {\n            self.changes = [];\n        };\n        /**\n         * Selects an area of the grid.\n         * @memberof canvasDataGrid\n         * @name selectArea\n         * @method\n         * @param {rect} bounds A rect object representing the selected values.\n         */\n        self.selectArea = function (bounds, ctrl) {\n            self.selectionBounds = bounds || self.selectionBounds;\n            var x, y, s = self.getSchema();\n            if (!ctrl) {\n                self.selections = [];\n            }\n            if (self.selectionBounds.top < -1\n                    || self.selectionBounds.bottom > self.data.length\n                    || self.selectionBounds.left < -1\n                    || self.selectionBounds.right > s.length) {\n                throw new Error('Impossible selection area');\n            }\n            for (x = self.selectionBounds.top; x <= self.selectionBounds.bottom; x += 1) {\n                self.selections[x] = [];\n                for (y = self.selectionBounds.left; y <= self.selectionBounds.right; y += 1) {\n                    if (self.selections[x].indexOf(y) === -1) {\n                        self.selections[x].push(y);\n                    }\n                }\n            }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Returns the maximum text width for a given column by column name.\n         * @memberof canvasDataGrid\n         * @name findColumnMaxTextLength\n         * @method\n         * @returns {number} The number of pixels wide the maximum width value in the selected column.\n         * @param {string} name The name of the column to calculate the value's width of.\n         */\n        self.findColumnMaxTextLength = function (name) {\n            var m = -Infinity;\n            if (name === 'cornerCell') {\n                self.ctx.font = self.style.rowHeaderCellFont;\n                return self.ctx.measureText((self.data.length + (self.attributes.showNewRow ? 1 : 0)).toString()).width\n                    + self.style.autosizePadding + self.style.autosizeHeaderCellPadding\n                    + self.style.rowHeaderCellPaddingRight\n                    + self.style.rowHeaderCellPaddingLeft\n                    + (self.attributes.tree ? self.style.treeArrowWidth\n                        + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight : 0);\n            }\n            self.getSchema().forEach(function (col) {\n                if (col.name !== name) { return; }\n                self.ctx.font = self.style.headerCellFont;\n                var t = self.ctx.measureText(col.title || col.name).width\n                    + self.style.headerCellPaddingRight\n                    + self.style.headerCellPaddingLeft;\n                m = t > m ? t : m;\n            });\n            self.data.forEach(function (row) {\n                self.ctx.font = self.style.cellFont;\n                var t = self.ctx.measureText(row[name]).width\n                    + self.style.cellPaddingRight\n                    + self.style.cellPaddingLeft + self.style.cellAutoResizePadding;\n                m = t > m ? t : m;\n            });\n            return m;\n        };\n        /**\n         * Gets the total width of all header columns.\n         * @memberof canvasDataGrid\n         * @name getHeaderWidth\n         * @method\n         */\n        self.getHeaderWidth = function () {\n            return self.getVisibleSchema().reduce(function (total, header) {\n                return total + header.width;\n            }, 0);\n        };\n        self.formatters.string = function cellFormatterString(e) {\n            return e.cell.value !== undefined ? e.cell.value : '';\n        };\n        self.formatters.rowHeaderCell = self.formatters.string;\n        self.formatters.headerCell = self.formatters.string;\n        self.formatters.number = self.formatters.string;\n        self.formatters.int = self.formatters.string;\n        self.formatters.html = self.formatters.string;\n        self.sorters.string = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (a[columnName] === undefined || a[columnName] === null) {\n                    return 1;\n                }\n                if (b[columnName] === undefined || b[columnName] === null) {\n                    return 0;\n                }\n                if (asc) {\n                    if (!a[columnName].localeCompare) { return 1; }\n                    return a[columnName].localeCompare(b[columnName]);\n                }\n                if (!b[columnName].localeCompare) { return 1; }\n                return b[columnName].localeCompare(a[columnName]);\n            };\n        };\n        self.sorters.number = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return a[columnName] - b[columnName];\n                }\n                return b[columnName] - a[columnName];\n            };\n        };\n        self.sorters.date = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return new Date(a[columnName]).getTime()\n                        - new Date(b[columnName]).getTime();\n                }\n                return new Date(b[columnName]).getTime()\n                        - new Date(a[columnName]).getTime();\n            };\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ })\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// canvas-datagrid.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 1b1f77de5c4f966ebe32","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine('canvas-datagrid', [\n    './draw',\n    './events',\n    './intf',\n    './contextMenu',\n    './defaults',\n    './dom',\n    './publicMethods'\n], function context() {\n    'use strict';\n    var modules = Array.prototype.slice.call(arguments);\n    function grid(args) {\n        args = args || {};\n        var self = {};\n        self.args = args;\n        self.createGrid = grid;\n        self.orders = {\n            rows: [],\n            columns: []\n        };\n        self.hasFocus = false;\n        self.activeCell = {\n            columnIndex: 0,\n            rowIndex: 0\n        };\n        self.storageName = 'canvasDataGrid';\n        self.invalidSearchExpClass = 'canvas-datagrid-invalid-search-regExp';\n        self.localStyleLibraryStorageKey = 'canvas-datagrid-user-style-library';\n        self.uniqueId = '_canvasDataGridUniqueId';\n        self.orderBy = self.uniqueId;\n        self.orderDirection = 'asc';\n        self.columnFilters = {};\n        self.filters = {};\n        self.ellipsisCache = {};\n        self.scrollBox = {};\n        self.visibleRows = [];\n        self.sizes = {\n            rows: {},\n            columns: {},\n            trees: {}\n        };\n        self.currentFilter = function () {\n            return true;\n        };\n        self.selections = [];\n        self.hovers = {};\n        self.attributes = {};\n        self.style = {};\n        self.intf = {};\n        self.formatters = {};\n        self.sorters = {};\n        self.schemaHashes = {};\n        self.events = {};\n        self.uId = 0;\n        self.changes = [];\n        self.scrollIndexTop = 0;\n        self.scrollPixelTop = 0;\n        self.scrollIndexLeft = 0;\n        self.scrollPixelLeft = 0;\n        self.childGrids = {};\n        self.openChildren = {};\n        self.scrollModes = [\n            'vertical-scroll-box',\n            'vertical-scroll-top',\n            'vertical-scroll-bottom',\n            'horizontal-scroll-box',\n            'horizontal-scroll-right',\n            'horizontal-scroll-left'\n        ];\n        self.mouse = { x: 0, y: 0};\n        self.getSelectedData = function (expandToRow) {\n            var d = [], s = self.getSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                d[index] = {};\n                if (expandToRow) {\n                    s.forEach(function (column) {\n                        d[index][column.name] = self.data[index][column.name];\n                    });\n                } else {\n                    row.forEach(function (col) {\n                        if (col === -1) { return; }\n                        d[index][s[col].name] = self.data[index][s[col].name];\n                    });\n                }\n            });\n            return d;\n        };\n        self.scrollOffset = function (e) {\n            var x = 0, y = 0;\n            while (e.parentNode) {\n                if (e.nodeType !== 'canvas-datagrid-tree'\n                        && e.nodeType !== 'canvas-datagrid-cell') {\n                    x -= e.scrollLeft;\n                    y -= e.scrollTop;\n                }\n                e = e.parentNode;\n            }\n            return {left: x, top: y};\n        };\n        self.position = function (e, ignoreScrollOffset) {\n            var x = 0, y = 0, s = e, h, w;\n            while (e.offsetParent) {\n                x += e.offsetLeft;\n                y += e.offsetTop;\n                h = e.offsetHeight;\n                w = e.offsetWidth;\n                e = e.offsetParent;\n            }\n            if (ignoreScrollOffset) {\n                return {left: x, top: y, height: h, width: w};\n            }\n            e = s;\n            s = self.scrollOffset(e);\n            return { left: x + s.left, top: y + s.top, height: h, width: w };\n        };\n        self.getLayerPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.clientX - rect.left,\n                    y: e.clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        self.fillArray = function (low, high, step) {\n            step = step || 1;\n            var i = [], x;\n            for (x = low; x <= high; x += step) {\n                i[x] = x;\n            }\n            return i;\n        };\n        self.getHeaderCellHeight = function () {\n            if (!self.attributes.showColumnHeaders) { return 0; }\n            return self.sizes.rows[-1] || self.style.headerCellHeight;\n        };\n        self.getHeaderCellWidth = function () {\n            if (!self.attributes.showRowHeaders) { return 0; }\n            return self.sizes.columns.cornerCell || self.style.headerRowWidth;\n        };\n        self.setStorageData = function () {\n            if (!self.attributes.saveAppearance) { return; }\n            localStorage.setItem(self.storageName + '-' + self.attributes.name, JSON.stringify({\n                sizes: {\n                    rows: self.sizes.rows,\n                    columns: self.sizes.columns\n                },\n                orders: {\n                    rows: self.orders.rows,\n                    columns: self.orders.columns\n                },\n                orderBy: self.orderBy,\n                orderDirection: self.orderDirection\n            }));\n        };\n        self.getSchema = function () {\n            return self.schema || self.tempSchema;\n        };\n        self.createColumnOrders = function () {\n            var s = self.getSchema();\n            self.orders.columns = self.fillArray(0, s.length - 1);\n        };\n        self.createRowOrders = function () {\n            self.orders.rows = self.fillArray(0, self.data.length - 1);\n        };\n        self.getVisibleSchema = function () {\n            return self.getSchema().filter(function (col) { return !col.hidden; });\n        };\n        self.createNewRowData = function () {\n            self.newRow = {};\n            self.newRow[self.uniqueId] = self.uId;\n            self.uId += 1;\n            self.getSchema().forEach(function forEachHeader(header, index) {\n                var d = header.defaultValue || '';\n                if (typeof d === 'function') {\n                    d = d.apply(self.intf, [header, index]);\n                }\n                self.newRow[header.name] = d;\n            });\n        };\n        self.getSchemaNameHash = function (key) {\n            var n = 0;\n            while (self.schemaHashes[key]) {\n                n += 1;\n                key = key + n;\n            }\n            return key;\n        };\n        self.filter = function (type) {\n            var f = self.filters[type];\n            if (!f && type !== undefined) {\n                console.warn('Cannot find filter for type %s, falling back to substring match.', type);\n                f = self.filters.string;\n            }\n            return f;\n        };\n        self.getBestGuessDataType = function (columnName) {\n            var t, x, l = self.data.length;\n            for (x = 0; x < l; x += 1) {\n                if ([null, undefined].indexOf(self.data[x][columnName]) !== -1) {\n                    t = typeof self.data[x];\n                    return t === 'object' ? 'string' : t;\n                }\n            }\n            return 'string';\n        };\n        self.drawChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].draw();\n            });\n        };\n        self.resizeChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].resize();\n            });\n        };\n        self.getClippingRect = function (ele) {\n            var boundingRect = self.position(self.parentNode),\n                eleRect = self.position(ele),\n                s = self.scrollOffset(self.canvas),\n                clipRect = {\n                    x: 0,\n                    y: 0,\n                    h: 0,\n                    w: 0\n                },\n                parentRect = {\n                    x: -Infinity,\n                    y: -Infinity,\n                    h: Infinity,\n                    w: Infinity\n                },\n                headerCellHeight = self.getHeaderCellHeight(),\n                headerCellWidth = self.getHeaderCellWidth();\n            boundingRect.top -= s.top;\n            boundingRect.left -= s.left;\n            eleRect.top -= s.top;\n            eleRect.left -= s.left;\n            clipRect.h = boundingRect.top + boundingRect.height - ele.offsetTop - self.style.scrollBarWidth;\n            clipRect.w = boundingRect.left + boundingRect.width - ele.offsetLeft - self.style.scrollBarWidth;\n            clipRect.x = boundingRect.left + (eleRect.left * -1) + headerCellWidth;\n            clipRect.y = boundingRect.top + (eleRect.top * -1) + headerCellHeight;\n            return {\n                x: clipRect.x > parentRect.x ? clipRect.x : parentRect.x,\n                y: clipRect.y > parentRect.y ? clipRect.y : parentRect.y,\n                h: clipRect.h < parentRect.h ? clipRect.h : parentRect.h,\n                w: clipRect.w < parentRect.w ? clipRect.w : parentRect.w\n            };\n        };\n        self.clipElement = function (ele) {\n            var clipRect = self.getClippingRect(ele);\n            if (clipRect.w < 0) { clipRect.w = 0; }\n            if (clipRect.h < 0) { clipRect.h = 0; }\n            ele.style.clip = 'rect('\n                + clipRect.y + 'px,'\n                + clipRect.w + 'px,'\n                + clipRect.h + 'px,'\n                + clipRect.x + 'px'\n                + ')';\n            // INFO https://developer.mozilla.org/en-US/docs/Web/CSS/clip\n            // clip has been \"deprecated\" for clipPath.  Of course nothing but chrome\n            // supports clip path, so we'll keep using clip until someday clipPath becomes\n            // more widely support.  The code below works correctly, but setting clipPath and clip\n            // at the same time has undesirable results.\n            // ele.style.clipPath = 'polygon('\n            //     + clipRect.x + 'px ' + clipRect.y + 'px,'\n            //     + clipRect.x + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.y + 'px'\n            //     + ')';\n        };\n        self.autoScrollZone = function (e, x, y, ctrl) {\n            var setTimer,\n                headerCellWidth = self.getHeaderCellWidth(),\n                headerCellHeight = self.getHeaderCellHeight();\n            if (x > self.width - self.attributes.selectionScrollZone && x < self.width) {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y > self.height - self.attributes.selectionScrollZone && y < self.height) {\n                self.scrollBox.scrollTop += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (x - self.attributes.selectionScrollZone - headerCellWidth < 0) {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y - self.attributes.selectionScrollZone - headerCellHeight < 0) {\n                self.scrollBox.scrollTop -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (setTimer && !ctrl && self.currentCell && self.currentCell.columnIndex !== -1) {\n                self.scrollTimer = setTimeout(self.mousemove, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.refreshFromOrigialData = function () {\n            self.data = self.originalData.filter(function (row) {\n                return true;\n            });\n        };\n        self.validateColumn = function (c, s) {\n            if (!c.name) {\n                throw new Error('A column must contain at least a name.');\n            }\n            if (s.filter(function (i) { return i.name === c.name; }).length > 0) {\n                throw new Error('A column with the name '\n                    + c.name + ' already exists and cannot be added again.');\n            }\n            return true;\n        };\n        self.setDefaults = function (obj1, obj2, key, def) {\n            obj1[key] = obj2[key] === undefined ? def : obj2[key];\n        };\n        self.setAttributes = function () {\n            self.defaults.attributes.forEach(function eachAttribute(i) {\n                self.setDefaults(self.attributes, args, i[0], i[1]);\n            });\n        };\n        self.setStyle = function () {\n            self.defaults.styles.forEach(function eachStyle(i) {\n                self.setDefaults(self.style, args.style || {}, i[0], i[1]);\n            });\n        };\n        self.autosize = function (colName) {\n            self.getVisibleSchema().forEach(function (col) {\n                if (col.name === colName || colName === undefined) {\n                    self.fitColumnToValues(col.name);\n                }\n            });\n            self.fitColumnToValues('cornerCell');\n        };\n        self.dispose = function () {\n            if (!self.isChildGrid && self.canvas && self.canvas.parentNode) {\n                self.canvas.parentNode.removeChild(self.canvas);\n            }\n            self.eventParent.removeEventListener('mouseup', self.mouseup, false);\n            self.eventParent.removeEventListener('mousedown', self.mousedown, false);\n            self.eventParent.removeEventListener('dblclick', self.dblclick, false);\n            self.eventParent.removeEventListener('click', self.click, false);\n            self.eventParent.removeEventListener('mousemove', self.mousemove);\n            self.eventParent.removeEventListener('wheel', self.scrollWheel, false);\n            self.canvas.removeEventListener('contextmenu', self.contextmenu, false);\n            self.canvas.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('keypress', self.keypress, false);\n            self.controlInput.removeEventListener('keyup', self.keyup, false);\n            self.controlInput.removeEventListener('keydown', self.keydown, false);\n            window.removeEventListener('resize', self.resize);\n            if (self.observer && self.observer.disconnect) {\n                self.observer.disconnect();\n            }\n        };\n        self.tryLoadStoredOrders = function () {\n            var s;\n            if (self.storedSettings && typeof self.storedSettings.orders === 'object') {\n                if (self.storedSettings.orders.rows.length >= self.data.length) {\n                    self.orders.rows = self.storedSettings.orders.rows;\n                }\n                s = self.getSchema();\n                self.orders.columns = self.storedSettings.orders.columns;\n                s.forEach(function (h, i) {\n                    if (self.orders.columns.indexOf(i) === -1) {\n                        self.orders.columns.push(i);\n                    }\n                });\n                self.orderBy = self.storedSettings.orderBy === undefined\n                    ? self.uniqueId : self.storedSettings.orderBy;\n                self.orderDirection = self.storedSettings.orderDirection === undefined\n                    ? self.uniqueId : self.storedSettings.orderDirection;\n                if (self.getHeaderByName(self.orderBy) && self.orderDirection) {\n                    self.order(self.orderBy, self.orderDirection);\n                }\n            }\n        };\n        self.getFontHeight = function (fontStyle) {\n            return parseFloat(fontStyle, 10);\n        };\n        self.getFontHeightLong = function (fontStyle) {\n            var pixels,\n                start,\n                end,\n                row,\n                column,\n                index,\n                canvas = document.createElement('canvas'),\n                ctx = canvas.getContext('2d');\n            canvas.height = 5000;\n            canvas.width = 5000;\n            ctx.save();\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\n            ctx.textBaseline = 'top';\n            ctx.fillStyle = 'white';\n            ctx.font = fontStyle;\n            ctx.fillText('gM', 0, 0);\n            pixels = ctx.getImageData(0, 0, canvas.width, canvas.height).data;\n            start = -1;\n            end = -1;\n            for (row = 0; row < canvas.height; row += 1) {\n                for (column = 0; column < canvas.width; column += 1) {\n                    index = (row * canvas.width + column) * 4;\n                    if (pixels[index] === 0) {\n                        if (column === canvas.width - 1 && start !== -1) {\n                            end = row;\n                            row = canvas.height;\n                            break;\n                        }\n                    } else {\n                        if (start === -1) {\n                            start = row;\n                        }\n                        break;\n                    }\n                }\n            }\n            ctx.restore();\n            console.log(end - start);\n            return end - start;\n        };\n        self.parseFont = function (key) {\n            if (/Font/.test(key)) {\n                self.style[key + 'Height'] = self.getFontHeight(self.style[key]);\n            }\n        };\n        self.init = function () {\n            var publicStyleKeyIntf = {};\n            self.setAttributes();\n            self.setStyle();\n            self.initScrollBox();\n            self.setDom();\n            Object.keys(self.style).forEach(self.parseFont);\n            self.intf.type = 'canvas-datagrid';\n            self.intf.addEventListener = self.addEventListener;\n            self.intf.removeEventListener = self.removeEventListener;\n            self.intf.dispatchEvent = self.dispatchEvent;\n            self.intf.dispose = self.dispose;\n            self.intf.appendTo = self.appendTo;\n            self.intf.filters = self.filters;\n            self.intf.sorters = self.sorters;\n            self.intf.autosize = self.autosize;\n            self.intf.beginEditAt = self.beginEditAt;\n            self.intf.endEdit = self.endEdit;\n            self.intf.setActiveCell = self.setActiveCell;\n            self.intf.scrollIntoView = self.scrollIntoView;\n            self.intf.clearChangeLog = self.clearChangeLog;\n            self.intf.gotoCell = self.gotoCell;\n            self.intf.gotoRow = self.gotoRow;\n            self.intf.findColumnScrollLeft = self.findColumnScrollLeft;\n            self.intf.findRowScrollTop = self.findRowScrollTop;\n            self.intf.fitColumnToValues = self.fitColumnToValues;\n            self.intf.findColumnMaxTextLength = self.findColumnMaxTextLength;\n            self.intf.disposeContextMenu = self.disposeContextMenu;\n            self.intf.getCellAt = self.getCellAt;\n            self.intf.isCellVisible = self.isCellVisible;\n            self.intf.order = self.order;\n            self.intf.draw = self.draw;\n            self.intf.selectArea = self.selectArea;\n            self.intf.clipElement = self.clipElement;\n            self.intf.getSchemaFromData = self.getSchemaFromData;\n            self.intf.setFilter = self.setFilter;\n            self.intf.selectRow = self.selectRow;\n            self.intf.parentGrid = self.parentGrid;\n            self.intf.toggleTree = self.toggleTree;\n            self.intf.expandTree = self.expandTree;\n            self.intf.collapseTree = self.collapseTree;\n            self.intf.canvas = self.canvas;\n            self.intf.context = self.ctx;\n            self.intf.insertRow = self.insertRow;\n            self.intf.deleteRow = self.deleteRow;\n            self.intf.addRow = self.addRow;\n            self.intf.insertColumn = self.insertColumn;\n            self.intf.deleteColumn = self.deleteColumn;\n            self.intf.addColumn = self.addColumn;\n            self.intf.getClippingRect = self.getClippingRect;\n            self.intf.setRowHeight = self.setRowHeight;\n            self.intf.setColumnWidth = self.setColumnWidth;\n            self.intf.resetColumnWidths = self.resetColumnWidths;\n            self.intf.resetRowHeights = self.resetRowHeights;\n            self.intf.resize = self.resize;\n            self.intf.drawChildGrids = self.drawChildGrids;\n            self.intf.style = {};\n            Object.keys(self.style).forEach(function (key) {\n                // unless this line is here, Object.keys() will not work on <instance>.style\n                publicStyleKeyIntf[key] = undefined;\n                Object.defineProperty(publicStyleKeyIntf, key, {\n                    get: function () {\n                        return self.style[key];\n                    },\n                    set: function (value) {\n                        self.parseFont(value);\n                        self.style[key] = value;\n                        self.draw(true);\n                        self.dispatchEvent('stylechanged', {name: key, value: value});\n                    }\n                });\n            });\n            Object.defineProperty(self.intf, 'style', {\n                get: function () {\n                    return publicStyleKeyIntf;\n                },\n                set: function (value) {\n                    Object.keys(value).forEach(function (key) {\n                        self.parseFont(value);\n                        self.style[key] = value[key];\n                    });\n                    self.draw(true);\n                    self.dispatchEvent('stylechanged', {name: 'style', value: value});\n                }\n            });\n            Object.keys(self.attributes).forEach(function (key) {\n                Object.defineProperty(self.intf.attributes, key, {\n                    get: function () {\n                        return self.attributes[key];\n                    },\n                    set: function (value) {\n                        self.attributes[key] = value;\n                        self.draw(true);\n                        self.dispatchEvent('attributechanged', {name: key, value: value[key]});\n                    }\n                });\n            });\n            self.filters.string = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                var filterRegExp;\n                self.invalidFilterRegEx = undefined;\n                try {\n                    filterRegExp = new RegExp(filterFor, 'ig');\n                } catch (e) {\n                    self.invalidFilterRegEx = e;\n                    return;\n                }\n                return filterRegExp.test(value);\n            };\n            self.filters.number = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                return value === filterFor;\n            };\n            if (self.attributes.name && self.attributes.saveAppearance) {\n                self.storedSettings = localStorage.getItem(self.storageName + '-' + self.attributes.name);\n                if (self.storedSettings) {\n                    try {\n                        self.storedSettings = JSON.parse(self.storedSettings);\n                    } catch (e) {\n                        console.warn('could not read settings from localStore', e);\n                        self.storedSettings = undefined;\n                    }\n                }\n                if (self.storedSettings) {\n                    if (typeof self.storedSettings.sizes === 'object') {\n                        self.sizes.rows = self.storedSettings.sizes.rows;\n                        self.sizes.columns = self.storedSettings.sizes.columns;\n                        ['trees', 'columns', 'rows'].forEach(function (i) {\n                            if (!self.sizes[i]) {\n                                self.sizes[i] = {};\n                            }\n                        });\n                    }\n                }\n            }\n            if (args.data) {\n                self.intf.data = args.data;\n            }\n            if (args.schema) {\n                self.intf.schema = args.schema;\n            }\n            if (!self.data) {\n                self.intf.data = [];\n            }\n            self.resize(true);\n        };\n        modules.forEach(function (module) {\n            module(self);\n        });\n        self.init();\n        return self.intf;\n    }\n    if (window && !window.canvasDatagrid) {\n        window.canvasDatagrid = grid;\n    }\n    module.exports = grid;\n    return grid;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/main.js\n// module id = 0\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals XMLSerializer: false, define: true, Blob: false, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var perfCounters = [],\n            drawCount = 0,\n            perfWindowSize = 20;\n        self.htmlImageCache = {};\n        function drawOnAllImagesLoaded() {\n            var loaded = true;\n            Object.keys(self.htmlImageCache).forEach(function (html) {\n                if (!self.htmlImageCache[html].complete) {\n                    loaded = false;\n                }\n            });\n            if (loaded) {\n                self.draw();\n            }\n        }\n        function drawHtml(cell) {\n            var img,\n                v = cell.innerHTML || cell.formattedValue,\n                x = cell.x + self.canvasOffsetLeft,\n                y = cell.y + self.canvasOffsetTop;\n            if (self.htmlImageCache[v]) {\n                img = self.htmlImageCache[v];\n                if (img.height !== cell.height || img.width !== cell.width) {\n                    // height and width of the cell has changed, invalidate cache\n                    self.htmlImageCache[v] = undefined;\n                } else {\n                    if (!img.complete) {\n                        return;\n                    }\n                    return self.ctx.drawImage(img, x, y);\n                }\n            }\n            img = new Image(cell.width, cell.height);\n            self.htmlImageCache[v] = img;\n            img.onload = function () {\n                self.ctx.drawImage(img, x, y);\n                drawOnAllImagesLoaded();\n            };\n            img.src = 'data:image/svg+xml;base64,' + btoa(\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + cell.width + '\" height=\"' + cell.height + '\">\\n' +\n                    '<foreignObject class=\"node\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\\n' +\n                    '<body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;padding:0;\">\\n' +\n                    v + '\\n' +\n                    '</body>' +\n                    '</foreignObject>\\n' +\n                    '</svg>\\n'\n            );\n        }\n        function drawOrderByArrow(x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.headerOrderByArrowColor;\n            self.ctx.strokeStyle = self.style.headerOrderByArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + self.style.headerOrderByArrowMarginLeft;\n            y = y + self.style.headerOrderByArrowMarginTop;\n            if (self.orderDirection === 'asc') {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + self.style.headerOrderByArrowWidth, y);\n                self.ctx.lineTo(x + (self.style.headerOrderByArrowWidth * 0.5), y + self.style.headerOrderByArrowHeight);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y + self.style.headerOrderByArrowHeight);\n                self.ctx.lineTo(x + self.style.headerOrderByArrowWidth, y + self.style.headerOrderByArrowHeight);\n                self.ctx.lineTo(x + (self.style.headerOrderByArrowWidth * 0.5), y);\n                self.ctx.lineTo(x, y + self.style.headerOrderByArrowHeight);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return self.style.headerOrderByArrowMarginLeft\n                + self.style.headerOrderByArrowWidth\n                + self.style.headerOrderByArrowMarginRight;\n        }\n        function drawTreeArrow(cell, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.treeArrowColor;\n            self.ctx.strokeStyle = self.style.treeArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + self.style.treeArrowMarginLeft;\n            y = y + self.style.treeArrowMarginTop;\n            if (self.openChildren[cell.data[self.uniqueId]]) {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + self.style.treeArrowWidth, y);\n                self.ctx.lineTo(x + (self.style.treeArrowWidth * 0.5), y + self.style.treeArrowHeight);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y);\n                self.ctx.lineTo(x + self.style.treeArrowHeight, y + (self.style.treeArrowWidth * 0.5));\n                self.ctx.lineTo(x, y + self.style.treeArrowWidth);\n                self.ctx.lineTo(x, y);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return self.style.treeArrowMarginLeft\n                + self.style.treeArrowWidth\n                + self.style.treeArrowMarginRight;\n        }\n        function radiusRect(x, y, w, h, radius) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            var r = x + w, b = y + h;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x + radius, y);\n            self.ctx.lineTo(r - radius, y);\n            self.ctx.quadraticCurveTo(r, y, r, y + radius);\n            self.ctx.lineTo(r, y + h - radius);\n            self.ctx.quadraticCurveTo(r, b, r - radius, b);\n            self.ctx.lineTo(x + radius, b);\n            self.ctx.quadraticCurveTo(x, b, x, b - radius);\n            self.ctx.lineTo(x, y + radius);\n            self.ctx.quadraticCurveTo(x, y, x + radius, y);\n        }\n        function fillRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillRect(x, y, w, h);\n        }\n        function strokeRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.strokeRect(x, y, w, h);\n        }\n        function fillText(text, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillText(text, x, y);\n        }\n        function addBorderLine(c, pos) {\n            self.ctx.beginPath();\n            var p = {\n                t: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                },\n                r: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                b: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                l: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                },\n            };\n            p[pos]();\n            self.ctx.stroke();\n        }\n        function addEllipsis(text, width) {\n            var c, w = 0;\n            if (self.ellipsisCache[text] && self.ellipsisCache[text][width]) {\n                return self.ellipsisCache[text][width];\n            }\n            //TODO Add ellipsis back when there is a fast way to do it\n            w = self.ctx.measureText(text).width;\n            self.ellipsisCache[text] = self.ellipsisCache[text] || {};\n            c = {value: text, width: w};\n            self.ellipsisCache[text][width] = c;\n            return c;\n        }\n        function drawText(cell) {\n            var paddingLeft = self.style[cell.style + 'PaddingLeft'],\n                paddingTop = self.style[cell.style + 'PaddingTop'],\n                paddingRight = self.style[cell.style + 'PaddingRight'],\n                paddingBottom = self.style[cell.style + 'PaddingBottom'],\n                vPos = paddingTop + cell.height - (cell.height * 0.5),\n                hPos = paddingLeft + cell.treeArrowWidth + cell.orderByArrowWidth;\n            cell.text = addEllipsis(cell.formattedValue, cell.width - paddingRight - paddingLeft);\n            cell.text.height = cell.fontHeight;\n            if (cell.horizontalAlignment === 'right') {\n                hPos = cell.width - cell.text.width - paddingRight;\n            } else if (cell.horizontalAlignment === 'center') {\n                hPos = (cell.width / 2) - (cell.text.width / 2);\n            }\n            if (cell.verticalAlignment === 'top') {\n                vPos = paddingTop + cell.text.height;\n            } else if (cell.verticalAlignment === 'bottom') {\n                vPos = cell.height - paddingBottom - cell.text.height;\n            }\n            cell.text.x = cell.x + hPos;\n            cell.text.y = cell.y + vPos;\n            fillText(cell.text.value, cell.text.x, cell.text.y);\n        }\n        /**\n         * Redraws the grid. No matter what the change, this is the only method required to refresh everything.\n         * @memberof canvasDataGrid\n         * @name draw\n         * @method\n         */\n        self.draw = function (internal) {\n            if (!self.isChildGrid && (!self.height || !self.width)) {\n                return;\n            }\n            // if something asked a child to draw, ask the parent to draw, unless it was the parent that asked... then.. idk... stack overflow!\n            // if (self.isChildGrid && internal) {\n            //     self.parentGrid.draw();\n            //     return;\n            // }\n            if (self.intf.visible === false) {\n                return;\n            }\n            // initial values\n            var checkScrollHeight, borderWidth, rowHeaderCell, p, cx, cy, treeGrid, rowOpen,\n                rowHeight, cornerCell, y, x, c, h, w, s, r, rd, aCell,\n                selectionBorders = [],\n                rowHeaders = [],\n                l = self.data.length,\n                u = self.currentCell || {},\n                headerCellHeight = self.getHeaderCellHeight(),\n                headerCellWidth = self.getHeaderCellWidth(),\n                cellHeight = self.style.cellHeight;\n            drawCount += 1;\n            p = performance.now();\n            // if data length has changed, there is no way to know\n            if (self.data.length > self.orders.rows.length) {\n                self.createRowOrders();\n            }\n            function drawScrollBars() {\n                var v = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-bar'\n                    },\n                    n = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-bar'\n                    },\n                    vb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-box'\n                    },\n                    nb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-box'\n                    },\n                    co = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        isCorner: true,\n                        isScrollBoxCorner: true,\n                        style: 'scroll-box-corner'\n                    },\n                    m = (self.style.scrollBarBoxMargin * 2),\n                    d = self.style.scrollBarBoxMargin * 0.5;\n                self.ctx.strokeStyle = self.style.scrollBarBorderColor;\n                self.ctx.lineWidth = self.style.scrollBarBorderWidth;\n                // vertical\n                v.x += w - self.style.scrollBarWidth - self.style.scrollBarBorderWidth - d;\n                v.y += headerCellHeight;\n                v.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                v.height = h - headerCellHeight - self.style.scrollBarWidth - d - m;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(v.x, v.y, v.width, v.height + m);\n                strokeRect(v.x, v.y, v.width, v.height + m);\n                // vertical box\n                vb.x = v.x + self.style.scrollBarBoxMargin;\n                vb.y = headerCellHeight + self.style.scrollBarBoxMargin\n                    + ((v.height - self.scrollBox.scrollBoxHeight)\n                        * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight));\n                vb.width = self.style.scrollBarBoxWidth;\n                vb.height = self.scrollBox.scrollBoxHeight;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/vertical/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (vb.width < v.width) {\n                    radiusRect(vb.x, vb.y, vb.width, vb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                // horizontal\n                n.x += headerCellWidth;\n                n.y += h - self.style.scrollBarWidth - d;\n                n.width = w - self.style.scrollBarWidth - headerCellWidth - d - m;\n                n.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(n.x, n.y, n.width + m, n.height);\n                strokeRect(n.x, n.y, n.width + m, n.height);\n                // horizontal box\n                nb.y = n.y + self.style.scrollBarBoxMargin;\n                nb.x = headerCellWidth + self.style.scrollBarBoxMargin\n                    + ((n.width - self.scrollBox.scrollBoxWidth)\n                        * (self.scrollBox.scrollLeft / self.scrollBox.scrollWidth));\n                nb.width = self.scrollBox.scrollBoxWidth;\n                nb.height = self.style.scrollBarBoxWidth;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/horizontal/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (nb.width < n.width) {\n                    radiusRect(nb.x, nb.y, nb.width, nb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                //corner\n                self.ctx.strokeStyle = self.style.scrollBarCornerBorderColor;\n                self.ctx.fillStyle = self.style.scrollBarCornerBackgroundColor;\n                co.x = n.x + n.width + m;\n                co.y = v.y + v.height + m;\n                co.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                co.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                radiusRect(co.x, co.y, co.width, co.height, 0);\n                self.ctx.stroke();\n                self.ctx.fill();\n                self.visibleCells.unshift(v);\n                self.visibleCells.unshift(vb);\n                self.visibleCells.unshift(n);\n                self.visibleCells.unshift(nb);\n                self.visibleCells.unshift(co);\n                self.scrollBox.bar = {\n                    v: v,\n                    h: n\n                };\n                self.scrollBox.box = {\n                    v: vb,\n                    h: nb\n                };\n            }\n            function drawCell(d, rowIndex, rowOrderIndex) {\n                return function drawEach(header, headerIndex, columnOrderIndex) {\n                    var cellStyle = header.style || 'cell',\n                        childGridAttributes,\n                        cell,\n                        isHeader = /headerCell/.test(cellStyle),\n                        isCorner = /cornerCell/.test(cellStyle),\n                        isRowHeader = 'rowHeaderCell' === cellStyle,\n                        selected = self.selections[rowOrderIndex] && self.selections[rowOrderIndex].indexOf(columnOrderIndex) !== -1,\n                        hovered = self.hovers[d[self.uniqueId]] && self.hovers[d[self.uniqueId]].indexOf(columnOrderIndex) !== -1,\n                        active = self.activeCell.rowIndex === rowOrderIndex && self.activeCell.columnIndex === columnOrderIndex,\n                        isGrid = Array.isArray(d[header.name]),\n                        activeHeader = (self.orders.rows[self.activeCell.rowIndex] === rowOrderIndex\n                                || self.orders.columns[self.activeCell.columnIndex] === columnOrderIndex)\n                            && (columnOrderIndex === -1 || rowOrderIndex === -1)\n                            ? (isRowHeader ? 'activeRowHeaderCell' : 'activeHeaderCell') : false,\n                        val,\n                        f = self.formatters[header.type || 'string'],\n                        orderByArrowSize = 0,\n                        treeArrowSize = 0,\n                        cellWidth = self.sizes.columns[isRowHeader ? 'cornerCell' : header[self.uniqueId]] || header.width,\n                        ev = {\n                            value: d[header.name],\n                            row: d,\n                            header: header\n                        };\n                    if (cellStyle === 'headerCellCap') {\n                        cellWidth = w - x;\n                    }\n                    // if no data or schema are defined, a width is provided to the stub column\n                    if (cellWidth === undefined) {\n                        cellWidth = self.style.columnWidth;\n                    }\n                    if (x + cellWidth + borderWidth < 0) {\n                        x += cellWidth + borderWidth;\n                    }\n                    if (active) {\n                        cellStyle = 'activeCell';\n                    }\n                    if (self.visibleRows.indexOf(rowIndex) === -1 && !isHeader) {\n                        self.visibleRows.push(rowIndex);\n                    }\n                    val = self.dispatchEvent('formatcellvalue', ev);\n                    if (!self.dispatchEvent('beforerendercell', ev)) {\n                        cx = x;\n                        cy = y;\n                        if (cellStyle === 'cornerCell') {\n                            cx = 0;\n                            cy = 0;\n                        } else if (isRowHeader) {\n                            cx = 0;\n                        } else if (isHeader) {\n                            cy = 0;\n                        }\n                        cell = {\n                            type: isGrid ? 'canvas-datagrid-cell' : header.type,\n                            style: cellStyle,\n                            nodeType: 'canvas-datagrid-cell',\n                            x: cx,\n                            y: cy,\n                            horizontalAlignment: self.style[cellStyle + 'HorizontalAlignment'],\n                            verticalAlignment: self.style[cellStyle + 'VerticalAlignment'],\n                            offsetTop: self.canvasOffsetTop + cy,\n                            offsetLeft: self.canvasOffsetLeft + cx,\n                            scrollTop: self.scrollBox.scrollTop,\n                            scrollLeft: self.scrollBox.scrollLeft,\n                            active: active || activeHeader,\n                            hovered: hovered,\n                            selected: selected,\n                            width: cellWidth,\n                            height: cellHeight,\n                            offsetWidth: cellWidth,\n                            offsetHeight: cellHeight,\n                            parentNode: self.intf.parentNode,\n                            offsetParent: self.intf.parentNode,\n                            data: d,\n                            isCorner: isCorner,\n                            isHeader: isHeader,\n                            isHeaderCellCap: !!header.isHeaderCellCap,\n                            isRowHeader: isRowHeader,\n                            rowOpen: rowOpen,\n                            header: header,\n                            columnIndex: columnOrderIndex,\n                            rowIndex: rowOrderIndex,\n                            sortColumnIndex: headerIndex,\n                            sortRowIndex: rowIndex,\n                            isGrid: isGrid,\n                            gridId: (self.attributes.name || '') + d[self.uniqueId] + ':' + header[self.uniqueId],\n                            parentGrid: self.intf,\n                            innerHTML: '',\n                            activeHeader: activeHeader,\n                            value: isHeader\n                                ? (header.title || header.name) : d[header.name]\n                        };\n                        ev.cell = cell;\n                        cell.userHeight = cell.isHeader ? self.sizes.rows[-1] : rowHeight;\n                        cell.userWidth = cell.isHeader ? self.sizes.columns.cornerCell : self.sizes.columns[header[self.uniqueId]];\n                        cell[self.uniqueId] = d[self.uniqueId];\n                        self.visibleCells.unshift(cell);\n                        self.ctx.fillStyle = self.style[cellStyle + 'BackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'BorderColor'];\n                        self.ctx.lineWidth = self.style[cellStyle + 'BorderWidth'];\n                        if (hovered) {\n                            self.ctx.fillStyle = self.style[cellStyle + 'HoverBackgroundColor'];\n                            self.ctx.strokeStyle = self.style[cellStyle + 'HoverBorderColor'];\n                        }\n                        if (selected) {\n                            self.ctx.fillStyle = self.style[cellStyle + 'SelectedBackgroundColor'];\n                            self.ctx.strokeStyle = self.style[cellStyle + 'SelectedBorderColor'];\n                        }\n                        if (activeHeader) {\n                            self.ctx.fillStyle = self.style[activeHeader + 'BackgroundColor'];\n                        }\n                        self.dispatchEvent('rendercell', ev);\n                        if (cell.isGrid) {\n                            if (cell.height !== rowHeight) {\n                                cell.height = rowHeight || self.style.cellHeightWithChildGrid;\n                                checkScrollHeight = true;\n                            }\n                            cell.width = self.sizes.columns[header[self.uniqueId]] || self.style.cellWidthWithChildGrid;\n                        }\n                        if (rowOpen && !cell.isRowHeader) {\n                            cell.height = self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight;\n                        }\n                        if (!cell.isGrid) {\n                            fillRect(cx, cy, cell.width, cell.height);\n                            strokeRect(cx, cy, cell.width, cell.height);\n                        }\n                        self.ctx.save();\n                        radiusRect(cell.x, cell.y, cell.width, cell.height, 0);\n                        self.ctx.clip();\n                        self.dispatchEvent('afterrendercell', ev);\n                        if (cell.height !== cellHeight && !(rowOpen && !cell.isRowHeader)) {\n                            self.sizes.rows[isHeader ? -1 : d[self.uniqueId]] = cell.height;\n                            checkScrollHeight = true;\n                        }\n                        if (cell.width !== cellWidth) {\n                            self.sizes.columns[header[self.uniqueId]] = cell.width;\n                            checkScrollHeight = true;\n                        }\n                        if (isRowHeader && self.attributes.tree) {\n                            if (!self.dispatchEvent('rendertreearrow', ev)) {\n                                treeArrowSize = drawTreeArrow(cell, self.style[cellStyle + 'PaddingLeft'], cy, 0);\n                            }\n                        }\n                        if ((self.attributes.showRowNumbers && isRowHeader)\n                                || !isRowHeader) {\n                            if (cell.isGrid) {\n                                if (!self.childGrids[cell.gridId]) {\n                                    childGridAttributes = self.args.childGridAttributes || self.args;\n                                    childGridAttributes.name = self.attributes.saveAppearance ? cell.gridId : undefined;\n                                    childGridAttributes.parentNode = cell;\n                                    childGridAttributes.data = d[header.name];\n                                    self.childGrids[cell.gridId] = self.createGrid(childGridAttributes);\n                                    checkScrollHeight = true;\n                                }\n                                cell.grid = self.childGrids[cell.gridId];\n                                cell.grid.parentNode = cell;\n                                cell.grid.visible = true;\n                                cell.grid.draw();\n                                self.dispatchEvent('rendercellgrid', ev);\n                            } else {\n                                if (self.childGrids[cell.gridId]) {\n                                    self.childGrids[cell.gridId].parentNode.offsetHeight = 0;\n                                }\n                                if (isHeader && self.orderBy === header.name) {\n                                    if (!self.dispatchEvent('renderorderbyarrow', ev)) {\n                                        orderByArrowSize = drawOrderByArrow(cx + self.style[cellStyle + 'PaddingLeft'], 0);\n                                    }\n                                }\n                                self.ctx.fillStyle = self.style[cellStyle + 'Color'];\n                                if (hovered) {\n                                    self.ctx.fillStyle = self.style[cellStyle + 'HoverColor'];\n                                }\n                                if (selected) {\n                                    self.ctx.fillStyle = self.style[cellStyle + 'SelectedColor'];\n                                }\n                                if (activeHeader) {\n                                    self.ctx.fillStyle = self.style[activeHeader + 'Color'];\n                                }\n                                self.ctx.font = self.style[cellStyle + 'Font'];\n                                cell.fontHeight = self.style[cellStyle + 'FontHeight'];\n                                cell.treeArrowWidth = treeArrowSize;\n                                cell.orderByArrowWidth = orderByArrowSize;\n                                val = val !== undefined ? val : f\n                                    ? f(ev) : '';\n                                if (val === undefined && !f) {\n                                    val = '';\n                                    console.warn('canvas-datagrid: Unknown format '\n                                        + header.type + ' add a cellFormater');\n                                }\n                                cell.formattedValue = ((val !== undefined && val !== null) ? val : '').toString();\n                                if (self.columnFilters && self.columnFilters[val] !== undefined && isHeader) {\n                                    cell.formattedValue = self.attributes.filterTextPrefix + val;\n                                }\n                                if (!self.dispatchEvent('rendertext', ev)) {\n                                    if (cell.innerHTML || header.type === 'html') {\n                                        drawHtml(cell);\n                                    } else {\n                                        drawText(cell);\n                                    }\n                                }\n                            }\n                        }\n                        if (active) {\n                            aCell = cell;\n                        }\n                        if (selected && !isRowHeader) {\n                            if ((!self.selections[cell.rowIndex - 1]\n                                    || self.selections[cell.rowIndex - 1].indexOf(cell.columnIndex) === -1\n                                    || cell.rowIndex === 0)\n                                    && !cell.isHeader) {\n                                selectionBorders.push([cell, 't']);\n                            }\n                            if (!self.selections[cell.rowIndex + 1]\n                                    || self.selections[cell.rowIndex + 1].indexOf(cell.columnIndex) === -1) {\n                                selectionBorders.push([cell, 'b']);\n                            }\n                            if (!self.selections[cell.rowIndex] || cell.columnIndex === 0\n                                    || self.selections[cell.rowIndex].indexOf(cell.columnIndex - 1) === -1) {\n                                selectionBorders.push([cell, 'l']);\n                            }\n                        } else if (self.selections[cell.rowIndex]\n                                && self.selections[cell.rowIndex].indexOf(cell.columnIndex - 1) !== -1) {\n                            selectionBorders.push([cell, 'l']);\n                        }\n                        self.ctx.restore();\n                        x += cell.width + borderWidth;\n                        return cell.width;\n                    }\n                };\n            }\n            function drawRowHeader(rowData, index, rowOrderIndex) {\n                var a;\n                if (self.attributes.showRowHeaders) {\n                    x = 0;\n                    rowHeaderCell = {'rowHeaderCell': index + 1 };\n                    rowHeaderCell[self.uniqueId] = rowData[self.uniqueId];\n                    a = {\n                        name: 'rowHeaderCell',\n                        width: self.style.headerRowWidth,\n                        style: 'rowHeaderCell',\n                        type: 'string',\n                        data: rowData[self.uniqueId],\n                        index: -1\n                    };\n                    a[self.uniqueId] = rowData[self.uniqueId];\n                    rowOpen = self.openChildren[rowData[self.uniqueId]];\n                    drawCell(rowHeaderCell, index, rowOrderIndex)(a, -1, -1);\n                }\n            }\n            function drawHeaders() {\n                var d, g = s.length, i, o, headerCell, header;\n                rowHeaders.forEach(function (rArgs) {\n                    y = rArgs[3];\n                    cellHeight = rArgs[4];\n                    drawRowHeader(rArgs[0], rArgs[1], rArgs[2]);\n                });\n                if (self.attributes.showColumnHeaders) {\n                    x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft;\n                    if (self.attributes.showRowHeaders) {\n                        x += headerCellWidth;\n                    }\n                    y = 0;\n                    // cell height might have changed during drawing\n                    cellHeight = self.getHeaderCellHeight();\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        header = s[i];\n                        d = {\n                            title: header.title,\n                            name: header.name,\n                            width: header.width,\n                            style: 'headerCell',\n                            type: 'string',\n                            index: o,\n                            order: i\n                        };\n                        headerCell = {'headerCell': header.title || header.name};\n                        headerCell[self.uniqueId] = 'h' + header[self.uniqueId];\n                        d[self.uniqueId] = header[self.uniqueId];\n                        x += drawCell(headerCell, -1, -1)(d, o, i);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    // fill in the space right of the headers\n                    if (x < w) {\n                        c = {\n                            name: '',\n                            width: self.style.scrollBarWidth,\n                            style: 'headerCellCap',\n                            isHeaderCell: true,\n                            isHeaderCellCap: true,\n                            type: 'string',\n                            index: s.length\n                        };\n                        c[self.uniqueId] = 'headerCell';\n                        drawCell({endCap: ''}, -1, -1)(c, -1, -1);\n                    }\n                    // fill in the space left of the headers\n                    if (self.attributes.showRowHeaders) {\n                        cornerCell = {'cornerCell': '' };\n                        cornerCell[self.uniqueId] = 'cornerCell';\n                        x = 0;\n                        c = {\n                            name: 'cornerCell',\n                            width: self.style.headerRowWidth,\n                            style: 'cornerCell',\n                            type: 'string',\n                            index: -1\n                        };\n                        c[self.uniqueId] = 'cornerCell';\n                        drawCell(cornerCell, -1, -1)(c, -1, -1);\n                    }\n                }\n            }\n            function drawRow(r, d) {\n                var i, treeHeight, rowSansTreeHeight, o, g = s.length;\n                if (y - (cellHeight * 2) > h) {\n                    return false;\n                }\n                rd = self.data[r];\n                rowOpen = self.openChildren[rd[self.uniqueId]];\n                rowSansTreeHeight = self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight;\n                treeHeight = (rowOpen ? self.sizes.trees[rd[self.uniqueId]] : 0);\n                rowHeight = rowSansTreeHeight + treeHeight;\n                if (y < rowHeight * -1) {\n                    return false;\n                }\n                if (self.attributes.showRowHeaders) {\n                    x += headerCellWidth;\n                }\n                cellHeight = rowHeight;\n                for (o = self.scrollIndexLeft; o < g; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        break;\n                    }\n                }\n                // cell height might have changed during drawing\n                cellHeight = rowHeight;\n                x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft;\n                // don't draw a tree for the new row\n                treeGrid = self.childGrids[rd[self.uniqueId]];\n                if (r !== self.data.length && rowOpen) {\n                    treeGrid.visible = true;\n                    treeGrid.parentNode = {\n                        offsetTop: y + rowSansTreeHeight + self.canvasOffsetTop,\n                        offsetLeft: headerCellWidth - 1 + self.canvasOffsetLeft,\n                        offsetHeight: treeHeight,\n                        offsetWidth: self.width - headerCellWidth - self.style.scrollBarWidth - 1,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: self.style,\n                        nodeType: 'canvas-datagrid-tree',\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        rowIndex: r\n                    };\n                    self.visibleCells.unshift({\n                        rowIndex: x,\n                        columnIndex: 0,\n                        y: treeGrid.parentNode.offsetTop,\n                        x: treeGrid.parentNode.offsetLeft,\n                        height: treeGrid.parentNode.offsetHeight,\n                        width: treeGrid.parentNode.offsetWidth,\n                        style: 'tree-grid',\n                        type: treeGrid.parentNode.nodeType\n                    });\n                    treeGrid.draw();\n                } else if (treeGrid) {\n                    treeGrid.parentNode.offsetHeight = 0;\n                    delete self.sizes.trees[rd[self.uniqueId]];\n                }\n                rowHeaders.push([rd, r, d, y, rowHeight]);\n                y += cellHeight + borderWidth;\n                return true;\n            }\n            function initDraw() {\n                borderWidth = self.style.cellBorderWidth;\n                self.visibleRows = [];\n                s = self.getVisibleSchema();\n                self.visibleCells = [];\n                self.canvasOffsetTop = self.isChildGrid ? self.parentNode.offsetTop : 0;\n                self.canvasOffsetLeft = self.isChildGrid ? self.parentNode.offsetLeft : 0;\n                h = self.height;\n                w = self.width;\n                if (!self.isChildGrid) {\n                    self.ctx.scale(window.devicePixelRatio, window.devicePixelRatio);\n                }\n            }\n            function drawBackground() {\n                radiusRect(0, 0, w, h, 0);\n                self.ctx.clip();\n                self.ctx.fillStyle = self.style.backgroundColor;\n                fillRect(0, 0, w, h);\n            }\n            function drawRows() {\n                var o, n, i, g = s.length;\n                x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft;\n                y = (self.scrollBox.scrollTop * -1) + headerCellHeight + self.scrollPixelTop;\n                for (r = self.scrollIndexTop; r < l; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.showNewRow) {\n                    if (self.attributes.showRowHeaders) {\n                        x += headerCellWidth;\n                    }\n                    rowHeight = cellHeight = self.style.cellHeight;\n                    rowOpen = false;\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        x += drawCell(self.newRow, self.data.length, self.data.length)(s[i], i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    rowHeaders.push([self.newRow, self.data.length, self.data.length, y, rowHeight]);\n                }\n            }\n            function drawReorderMarkers() {\n                if (!self.reorderObject) { return; }\n                var b = {\n                        height: self.reorderObject.height,\n                        width: self.reorderObject.width,\n                        x: self.reorderObject.x + self.reorderObject.dragOffset.x,\n                        y: self.reorderObject.y + self.reorderObject.dragOffset.y\n                    },\n                    m = {\n                        width: w,\n                        heigth: h,\n                        x: 0,\n                        y: 0\n                    };\n                self.ctx.fillStyle = self.style.reorderMarkerBackgroundColor;\n                self.ctx.lineWidth = self.style.reorderMarkerBorderWidth;\n                self.ctx.strokeStyle = self.style.reorderMarkerBorderColor;\n                if (self.dragMode === 'row-reorder') {\n                    b.width = w;\n                    b.x = 0;\n                    m.width = w;\n                    m.y = self.currentCell.y;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.rowIndex !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex - 1 !== self.reorderObject.rowIndex) {\n                        addBorderLine(m, 't');\n                    }\n                } else if (self.dragMode === 'column-reorder' && self.reorderObject) {\n                    b.height = h;\n                    b.y = 0;\n                    m.height = h;\n                    m.x = self.currentCell.x;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.columnIndex !== self.reorderObject.columnIndex\n                            && self.currentCell.columnIndex - 1 !== self.reorderObject.columnIndex) {\n                        addBorderLine(m, 'l');\n                    }\n                }\n            }\n            function drawBorder() {\n                self.ctx.lineWidth = self.style.gridBorderWidth;\n                self.ctx.strokeStyle = self.style.gridBorderColor;\n                strokeRect(0, 0, self.width, self.height);\n            }\n            function drawSelectionBorders() {\n                self.ctx.lineWidth = self.style.selectionOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.selectionOverlayBorderColor;\n                selectionBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n            }\n            function drawActiveCell() {\n                if (!aCell) { return; }\n                if (self.attributes.rowSelectionMode) {\n                    if (self.activeCell && self.activeCell.rowIndex === aCell.rowIndex) {\n                        self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                        self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                        strokeRect(0, aCell.y, self.getHeaderWidth() + headerCellWidth, rowHeight);\n                    }\n                } else {\n                    self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                    self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                    strokeRect(aCell.x, aCell.y, aCell.width, aCell.height);\n                }\n\n            }\n            function drawDebug() {\n                perfCounters[drawCount % perfWindowSize] = performance.now() - p;\n                var d;\n                if (self.attributes.debug) {\n                    self.ctx.font = '11px sans-serif';\n                    d = {};\n                    d.perf = (perfCounters.reduce(function (a, b) {\n                        return a + b;\n                    }, 0) / perfCounters.length).toFixed(1)\n                        + 'ms (' +\n                        perfCounters.map(function (a) { return a.toFixed(1); }).join(', ') + ')';\n                    d.htmlImages = Object.keys(self.htmlImageCache).length;\n                    d.scrollLeft = self.scrollBox.scrollLeft;\n                    d.scrollTop = self.scrollBox.scrollTop;\n                    d.scrollIndexTop = self.scrollIndexTop;\n                    d.scrollPixelTop = self.scrollPixelTop;\n                    d.scrollIndexLeft = self.scrollIndexLeft;\n                    d.scrollPixelLeft = self.scrollPixelLeft;\n                    d.canvasOffsetLeft = self.canvasOffsetLeft;\n                    d.canvasOffsetTop = self.canvasOffsetTop;\n                    d.width = self.width;\n                    d.height = self.height;\n                    d.mousex = self.mouse.x;\n                    d.mousey = self.mouse.y;\n                    d.touchx = !self.touchStart ? 0 : self.touchStart.x;\n                    d.touchy = !self.touchStart ? 0 : self.touchStart.y;\n                    d.entities = self.visibleCells.length;\n                    d.hasFocus = self.hasFocus;\n                    d.dragMode = self.dragMode;\n                    if (self.currentCell) {\n                        d.columnIndex = self.currentCell.columnIndex;\n                        d.rowIndex = self.currentCell.rowIndex;\n                        d.sortColumnIndex = self.currentCell.sortColumnIndex;\n                        d.sortRowIndex = self.currentCell.sortRowIndex;\n                        d.context = self.currentCell.context;\n                        d.dragContext = self.currentCell.dragContext;\n                        d.style = self.currentCell.style;\n                        d.type = self.currentCell.type;\n                    }\n                    self.ctx.save();\n                    Object.keys(d).forEach(function (key, index) {\n                        var m = key + ': ' + d[key],\n                            lh = 14;\n                        self.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n                        fillRect(headerCellWidth, lh + (index * lh), 100, lh);\n                        self.ctx.fillStyle = 'rgba(0, 0, 0, 1)';\n                        fillText(m, headerCellWidth + 1, headerCellHeight + (index * lh));\n                    });\n                    self.ctx.restore();\n                }\n            }\n            self.ctx.save();\n            initDraw();\n            drawBackground();\n            drawRows();\n            drawSelectionBorders();\n            drawHeaders();\n            drawActiveCell();\n            drawReorderMarkers();\n            drawScrollBars();\n            if (checkScrollHeight) {\n                self.resize(true);\n            }\n            drawBorder();\n            drawDebug();\n            self.ctx.restore();\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/draw.js\n// module id = 1\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var touchDelta = {x: 0, y: 0, scrollTop: 0, scrollLeft: 0},\n            touchAnimateTo = {scrollLeft: 0, scrollTop: 0},\n            touchSigma = {scrollLeft: 0, scrollTop: 0},\n            xPPS = 0,\n            yPPS = 0,\n            touchingCell = false,\n            startingCell = false,\n            animationFrames = 0;\n        self.getTouchPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.touches[0].clientX - rect.left,\n                    y: e.touches[0].clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        self.calculatePPS = function () {\n            xPPS = ((touchDelta.scrollLeft - touchSigma.scrollLeft) / (touchDelta.t - touchSigma.t));\n            yPPS = ((touchDelta.scrollTop - touchSigma.scrollTop) / (touchDelta.t - touchSigma.t));\n            touchSigma = {\n                scrollLeft: touchDelta.scrollLeft,\n                scrollTop: touchDelta.scrollTop,\n                t: performance.now() / 1000\n            };\n        };\n        self.touchCell = function (e) {\n            return function () {\n                clearInterval(self.touchCalcTimeout);\n                var pos = self.getTouchPos(e);\n                if (Math.abs(touchDelta.x) + Math.abs(touchDelta.y) < self.attributes.touchDeadZone) {\n                    touchingCell = self.getCellAt(pos.x, pos.y);\n                    self.mousemove(e, pos);\n                    self.mousedown(e, pos);\n                    self.mousemove(e, pos);\n                    self.draw();\n                }\n            };\n        };\n        self.touchstart = function (e) {\n            touchingCell = false;\n            self.touchStart = self.getTouchPos(e);\n            startingCell = self.getCellAt(self.touchStart.x, self.touchStart.y, true);\n            if (self.dispatchEvent('touchstart', {NativeEvent: e, cell: self.startingCell})) { return; }\n            if (!self.hasFocus) { return; }\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (e.touches.length === 2) {\n                return self.contextmenu(e, self.touchStart);\n            }\n            self.touchScrollStart = {\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: performance.now() / 1000\n            };\n            touchDelta = {\n                x: self.touchStart.x,\n                y: self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: 0\n            };\n            self.touchmove(e);\n            clearTimeout(self.touchTimeout);\n            clearInterval(self.touchCalcTimeout);\n            self.touchTimeout = setTimeout(self.touchCell(e), self.attributes.touchSelectTimeMs);\n            self.touchCalcTimeout = setInterval(self.calculatePPS, 20);\n            self.touchHaltAnimation = true;\n            document.body.addEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.addEventListener('touchend', self.touchend, false);\n            document.body.addEventListener('touchcancel', self.touchcancel, false);\n        };\n        self.easing = function (t, b, c, d) {\n            return c * (t / d) * (2 - t) + b;\n        };\n        self.touchEndAnimation = function () {\n            if (!self.canvas || !self.scrollBox.scrollTo) { return requestAnimationFrame(self.touchEndAnimation); }\n            var x,\n                y,\n                n = performance.now() / 1000,\n                d = (self.attributes.touchReleaseAnimationDurationMs / 1000),\n                t;\n            touchDelta.t = touchDelta.t || n + d;\n            t = n - touchDelta.t + 1;\n            if (t > 1 || self.touchHaltAnimation || (animationFrames > 1000)) {\n                animationFrames = 0;\n                self.touchHaltAnimation = false;\n                touchAnimateTo = {scrollLeft: -1, scrollTop: -1};\n                return;\n            }\n            animationFrames += 1;\n            x = self.easing(t, touchDelta.scrollLeft, -touchAnimateTo.scrollLeft, d);\n            y = self.easing(t, touchDelta.scrollTop, -touchAnimateTo.scrollTop, d);\n            self.scrollBox.scrollTo(x, y);\n            requestAnimationFrame(self.touchEndAnimation);\n        };\n        self.touchend = function (e) {\n            if (self.dispatchEvent('touchend', {NativeEvent: e})) { return; }\n            var dz = Math.abs(touchDelta.x) + Math.abs(touchDelta.y) < self.attributes.touchDeadZone,\n                pos = {\n                    x: self.touchStart.x + touchDelta.x,\n                    y: self.touchStart.y + touchDelta.y\n                },\n                cell = self.getCellAt(pos.x, pos.y);\n            if (!self.hasFocus) { return; }\n            if (touchingCell) {\n                self.mouseup(e, self.touchStart);\n            } else if (dz) {\n                if (cell.active) {\n                    self.beginEditAt(cell.columnIndex, cell.rowIndex);\n                } else {\n                    self.mousedown(e, self.touchStart);\n                    self.mouseup(e, self.touchStart);\n                    self.click(e, self.touchStart);\n                }\n            }\n            touchingCell = false;\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n            clearTimeout(self.touchTimeout);\n            clearInterval(self.touchCalcTimeout);\n            self.calculatePPS();\n            touchAnimateTo.scrollLeft = xPPS * self.attributes.touchReleaseAcceleration;\n            touchAnimateTo.scrollTop = yPPS * self.attributes.touchReleaseAcceleration;\n            self.touchHaltAnimation = false;\n            if (animationFrames === 0 && !/-scroll-/.test(startingCell.style) && !dz) {\n                self.touchEndAnimation();\n            }\n        };\n        self.touchmove = function (e) {\n            var d = self.getTouchPos(e);\n            if (self.dispatchEvent('touchmove', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (!self.hasFocus) { return; }\n            touchDelta = {\n                x: d.x - self.touchStart.x,\n                y: d.y - self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: 0\n            };\n            if (/vertical-scroll-/.test(startingCell.style)) {\n                self.scrollBox.scrollTop = self.scrollBox.scrollHeight * (d.y / self.height);\n            } else if (/horizontal-scroll-/.test(startingCell.style)) {\n                self.scrollBox.scrollLeft = self.scrollBox.scrollWidth * (d.x / self.width);\n            } else if (touchingCell) {\n                self.mousemove(e, d);\n                self.draw();\n            } else {\n                if (animationFrames === 0) {\n                    self.scrollBox.scrollTo(self.touchScrollStart.scrollLeft - touchDelta.x,\n                        self.touchScrollStart.scrollTop - touchDelta.y);\n                }\n            }\n        };\n        self.touchcancel = function (e) {\n            if (self.dispatchEvent('touchcancel', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) { return; }\n            touchingCell = false;\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n            return;\n        };\n        self.stopPropagation = function (e) { e.stopPropagation(); };\n        self.addEventListener = function (ev, fn) {\n            self.events[ev] = self.events[ev] || [];\n            self.events[ev].unshift(fn);\n        };\n        self.removeEventListener = function (ev, fn) {\n            (self.events[ev] || []).forEach(function removeEachListener(sfn, idx) {\n                if (fn === sfn) {\n                    self.events[ev].splice(idx, 1);\n                }\n            });\n        };\n        self.dispatchEvent = function (ev, e) {\n            var defaultPrevented;\n            function preventDefault() {\n                defaultPrevented = true;\n            }\n            if (!self.events[ev]) { return; }\n            self.events[ev].forEach(function dispatchEachEvent(fn) {\n                e.ctx = self.ctx;\n                e.preventDefault = preventDefault;\n                fn.apply(self.intf, [e]);\n            });\n            return defaultPrevented;\n        };\n        self.resize = function (drawAfterResize) {\n            var cellBorder = self.style.cellBorderWidth * 2,\n                headerCellBorder =  self.style.headerCellBorderWidth * 2,\n                scrollHeight,\n                scrollWidth,\n                headerCellHeight = self.getHeaderCellHeight(),\n                headerCellWidth = self.getHeaderCellWidth(),\n                // TODO: What the hell are these numbers!?  They are probably some value in the style.\n                scrollDragPositionOffsetY = 30,\n                scrollDragPositionOffsetX = 15;\n            if (self.isChildGrid) {\n                self.height = self.parentNode.offsetHeight;\n                self.width = self.parentNode.offsetWidth;\n            } else {\n                self.height = self.parentDOMNode.offsetHeight - (self.style.scrollBarBoxMargin * 2);\n                self.width = self.parentDOMNode.offsetWidth - (self.style.scrollBarBoxMargin * 2);\n                self.parentNode = self.parentDOMNode;\n                self.canvas.height = self.height * window.devicePixelRatio;\n                self.canvas.width = self.width * window.devicePixelRatio;\n                self.canvas.style.height = self.height + 'px';\n                self.canvas.style.width = self.width + 'px';\n                self.canvasOffsetTop = 0;\n                self.canvasOffsetLeft = 0;\n            }\n            scrollHeight = self.data.reduce(function reduceData(accumulator, row) {\n                return accumulator\n                    + (self.sizes.rows[row[self.uniqueId]] || self.style.cellHeight)\n                    + (self.sizes.trees[row[self.uniqueId]] || 0)\n                    + cellBorder;\n            }, 0) || 0;\n            scrollWidth = self.getVisibleSchema().reduce(function reduceSchema(accumulator, column) {\n                if (column.hidden) { return accumulator; }\n                return accumulator + (self.sizes.columns[column[self.uniqueId]] || column.width || self.style.columnWidth) + cellBorder;\n            }, 0) || 0;\n            if (self.attributes.showNewRow) {\n                scrollHeight += self.style.cellHeight + cellBorder;\n            }\n            self.scrollBox.width = self.width - headerCellWidth;\n            self.scrollBox.height = self.height - headerCellHeight - headerCellBorder;\n            self.scrollBox.top = headerCellHeight + headerCellBorder;\n            self.scrollBox.left = headerCellWidth;\n            self.scrollBox.scrollHeight = scrollHeight + self.style.scrollBarWidth - self.scrollBox.height;\n            self.scrollBox.scrollWidth = scrollWidth + self.style.scrollBarWidth - self.scrollBox.width;\n            self.scrollBox.widthBoxRatio = ((self.scrollBox.width - scrollDragPositionOffsetX)\n                / (self.scrollBox.scrollWidth + self.scrollBox.width - scrollDragPositionOffsetX));\n            self.scrollBox.scrollBoxWidth = self.scrollBox.width\n                * self.scrollBox.widthBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.heightBoxRatio = ((self.scrollBox.height - scrollDragPositionOffsetY)\n                / (self.scrollBox.scrollHeight + (self.scrollBox.height - scrollDragPositionOffsetY)));\n            self.scrollBox.scrollBoxHeight = self.scrollBox.height\n                * self.scrollBox.heightBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.scrollBoxWidth = Math.max(self.scrollBox.scrollBoxWidth, self.style.scrollBarBoxMinSize);\n            self.scrollBox.scrollBoxHeight = Math.max(self.scrollBox.scrollBoxHeight, self.style.scrollBarBoxMinSize);\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            self.resizeEditInput();\n            if (drawAfterResize) {\n                self.draw(true);\n            }\n            self.dispatchEvent('resize', {});\n            return true;\n        };\n        self.resizeEditInput = function () {\n            if (self.input) {\n                var pos = self.canvas.getBoundingClientRect(),\n                    s = self.scrollOffset(self.canvas),\n                    bx2 = (self.style.cellBorderWidth * 2),\n                    cell = self.getVisibleCellByIndex(self.input.editCell.columnIndex, self.input.editCell.rowIndex)\n                        || {x: -100, y: -100, height: 0, width: 0};\n                self.input.style.left = pos.left + cell.x - self.style.cellBorderWidth + self.canvasOffsetLeft - s.left + 'px';\n                self.input.style.top = pos.top + cell.y - bx2 + self.canvasOffsetTop - s.top + 'px';\n                self.input.style.height = cell.height - bx2 - 1 + 'px';\n                self.input.style.width = cell.width - bx2 - self.style.cellPaddingLeft + 'px';\n                self.clipElement(self.input);\n            }\n        };\n        self.scroll = function (e) {\n            var s = self.getVisibleSchema(),\n                cellBorder = self.style.cellBorderWidth * 2;\n            self.scrollIndexTop = 0;\n            self.scrollPixelTop = 0;\n            self.scrollIndexLeft = 0;\n            self.scrollPixelLeft = 0;\n            while (self.scrollPixelTop < self.scrollBox.scrollTop && self.scrollIndexTop < self.data.length) {\n                self.scrollPixelTop +=\n                    (self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || self.style.cellHeight)\n                    + (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0)\n                    + cellBorder;\n                self.scrollIndexTop += 1;\n            }\n            while (self.scrollPixelLeft < self.scrollBox.scrollLeft && self.scrollIndexLeft < s.length) {\n                self.scrollPixelLeft +=\n                    (self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width);\n                self.scrollIndexLeft += 1;\n            }\n            if (self.data.length > 0) {\n                self.scrollIndexLeft = Math.max(self.scrollIndexLeft - 1, 0);\n                self.scrollPixelLeft = Math.max(self.scrollPixelLeft\n                    - (self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width), 0);\n                self.scrollIndexTop = Math.max(self.scrollIndexTop - 1, 0);\n                self.scrollPixelTop = Math.max(self.scrollPixelTop\n                    - (self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || self.style.cellHeight)\n                    - (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0), 0);\n            }\n            self.ellipsisCache = {};\n            self.draw(true);\n            //TODO: figure out why this has to be delayed for child grids\n            //BUG: scrolling event on 3rd level hierarchy fails to move input box\n            requestAnimationFrame(self.resizeEditInput);\n            self.dispatchEvent('scroll', {top: self.scrollBox.scrollTop, left: self.scrollBox.scrollLeft});\n        };\n        self.mousemove = function (e, overridePos) {\n            if (self.contextMenu || self.input) {\n                return;\n            }\n            self.mouse = overridePos || self.getLayerPos(e);\n            var ctrl = (e.controlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                i,\n                s = self.getSchema(),\n                dragBounds,\n                sBounds,\n                x = self.mouse.x,\n                y = self.mouse.y,\n                o = self.getCellAt(x, y),\n                delta,\n                ev = {NativeEvent: e, cell: o, x: x, y: y},\n                previousCell = self.currentCell;\n            clearTimeout(self.scrollTimer);\n            if (!self.isInGrid({x: x, y: y})) {\n                self.hasFocus = false;\n            }\n            if (self.dispatchEvent('mousemove', ev)) {\n                return;\n            }\n            if (o && self.currentCell && (self.currentCell.rowIndex !== o.rowIndex\n                    || self.currentCell.columnIndex !== o.columnIndex)) {\n                self.cellBoundaryCrossed = true;\n                ev.cell = previousCell;\n                self.dispatchEvent('cellmouseout', ev);\n                ev.cell = o;\n                self.dispatchEvent('cellmouseover', ev);\n            }\n            self.currentCell = o;\n            if (!self.hasFocus) {\n                return;\n            }\n            self.hovers = {};\n            if (!self.draggingItem\n                    && o\n                    && self.scrollModes.indexOf(o.context) === -1) {\n                self.dragItem = o;\n                self.dragMode = o.dragContext;\n                self.canvas.style.cursor = o.context;\n                if (o.context === 'cell' && o.data) {\n                    self.canvas.style.cursor = 'pointer';\n                    self.hovers[o.data[self.uniqueId]] = [o.columnIndex];\n                }\n                if ((self.selecting || self.reorderObject)\n                        && o.context === 'cell'\n                        && o.data) {\n                    sBounds = self.getSelectionBounds();\n                    delta = {\n                        x: Math.abs(self.dragStart.x - x),\n                        y: Math.abs(self.dragStart.y - y),\n                    };\n                    if (self.dragStartObject.columnIndex !== -1 && e.shiftKey) {\n                        self.dragStartObject = {\n                            rowIndex: self.activeCell.rowIndex,\n                            columnIndex: self.activeCell.columnIndex\n                        };\n                    }\n                    dragBounds = {\n                        top: Math.min(self.dragStartObject.rowIndex, o.rowIndex),\n                        left: Math.min(self.dragStartObject.columnIndex, o.columnIndex),\n                        bottom: Math.max(self.dragStartObject.rowIndex, o.rowIndex),\n                        right: Math.max(self.dragStartObject.columnIndex, o.columnIndex)\n                    };\n                    if (self.dragStartObject.columnIndex === -1) {\n                        dragBounds.left = -1;\n                        dragBounds.right = s.length - 1;\n                        dragBounds.top = Math.min(sBounds.top, o.rowIndex);\n                        dragBounds.bottom = Math.max(sBounds.bottom, o.rowIndex);\n                    }\n                    if (self.dragStartObject.rowIndex !== o.rowIndex\n                                || self.dragStartObject.columnIndex !== o.columnIndex) {\n                        self.ignoreNextClick = true;\n                    }\n                    if (self.cellBoundaryCrossed || (delta.x === 0 && delta.y === 0) || self.attributes.rowSelectionMode) {\n                        if (self.attributes.rowSelectionMode || self.dragStartObject.columnIndex === -1) {\n                            self.selectRow(o.rowIndex, ctrl, true);\n                        } else {\n                            if (!self.dragAddToSelection && o.rowIndex) {\n                                if (self.selections[o.rowIndex] && self.selections[o.rowIndex].indexOf(o.columnIndex) !== -1) {\n                                    self.selections[o.rowIndex].splice(self.selections[o.rowIndex].indexOf(o.columnIndex), 1);\n                                }\n                            } else {\n                                self.selections[o.rowIndex] = self.selections[o.rowIndex] || [];\n                                if (self.selections[o.rowIndex].indexOf(o.columnIndex) === -1) {\n                                    self.selections[o.rowIndex].push(o.columnIndex);\n                                }\n                            }\n                        }\n                    }\n                    if ((!self.selectionBounds || (dragBounds.top !== self.selectionBounds.top\n                            || dragBounds.left !== self.selectionBounds.left\n                            || dragBounds.bottom !== self.selectionBounds.bottom\n                            || dragBounds.right !== self.selectionBounds.right)) && !ctrl) {\n                        self.selections = [];\n                        sBounds = dragBounds;\n                        if (self.attributes.rowSelectionMode) {\n                            for (i = sBounds.top; i <= sBounds.bottom; i += 1) {\n                                self.selectRow(i, true, true);\n                            }\n                        } else {\n                            self.selectArea(sBounds, true);\n                        }\n                    }\n                    self.autoScrollZone(e, x, y, ctrl);\n                }\n            }\n            self.cellBoundaryCrossed = false;\n            self.draw(true);\n        };\n        /**\n         * Ends editing, optionally aborting the edit.\n         * @memberof canvasDataGrid\n         * @name endEdit\n         * @method\n         * @param {boolean} abort When true, abort the edit.\n         */\n        self.endEdit = function (abort) {\n            var cell = self.input.editCell,\n                y = cell.rowIndex;\n            function abortEdit() {\n                abort = true;\n            }\n            if (self.dispatchEvent('beforeendedit', {\n                    cell: cell,\n                    newValue: self.input.value,\n                    oldValue: cell.value,\n                    abort: abortEdit,\n                    input: self.input\n                })) { return false; }\n            if (self.input.value !== cell.value && !abort) {\n                self.changes[y] = self.changes[y] || {};\n                self.changes[y][cell.header.name] = self.input.value;\n                cell.data[cell.header.name] = self.input.value;\n                if (y === self.data.length) {\n                    if (self.dispatchEvent('newrow', {\n                            value: self.input.value,\n                            defaultValue: cell.value,\n                            aborted: abort,\n                            cell: cell,\n                            input: self.input\n                        })) { return false; }\n                    self.uId += 1;\n                    self.addRow(cell.data);\n                    self.createNewRowData();\n                }\n                self.draw(true);\n            }\n            document.body.removeChild(self.input);\n            self.controlInput.focus();\n            self.dispatchEvent('endedit', {\n                cell: cell,\n                value: self.input.value,\n                aborted: abort,\n                input: self.input\n            });\n            self.input = undefined;\n            return true;\n        };\n        /**\n         * Begins editing at cell x, row y.\n         * @memberof canvasDataGrid\n         * @name beginEditAt\n         * @method\n         * @param {number} x The column index of the cell to edit.\n         * @param {number} y The row index of the cell to edit.\n         */\n        self.beginEditAt = function (x, y) {\n            if (!self.attributes.editable) { return; }\n            var cell = self.getVisibleCellByIndex(x, y),\n                s = self.getVisibleSchema(),\n                enumItems;\n            if (self.dispatchEvent('beforebeginedit', {cell: cell})) { return false; }\n            self.scrollIntoView(x, y);\n            self.setActiveCell(x, y);\n            function postDraw() {\n                var mEv, option, valueInEnum;\n                cell = self.getVisibleCellByIndex(x, y);\n                if (cell.header.enum) {\n                    self.input = document.createElement('select');\n                    // add enums\n                    if (typeof cell.header.enum === 'function') {\n                        enumItems = cell.header.enum.apply(self.intf, [{cell: cell}]);\n                    } else if (Array.isArray(cell.header.enum)) {\n                        enumItems = cell.header.enum;\n                    }\n                    enumItems.forEach(function (e) {\n                        var i = document.createElement('option'),\n                            val,\n                            title;\n                        if (Array.isArray(e)) {\n                            val = e[0];\n                            title = e[1];\n                        } else {\n                            val = e;\n                            title = e;\n                        }\n                        if (val === cell.value) { valueInEnum = true; }\n                        i.value = val;\n                        i.innerHTML = title;\n                        self.input.appendChild(i);\n                    });\n                    if (!valueInEnum) {\n                        option = document.createElement('option');\n                        option.value = cell.value;\n                        option.innerHTML = cell.value;\n                        self.input.appendChild(option);\n                    }\n                    self.input.addEventListener('change', function () {\n                        self.endEdit();\n                        self.draw(true);\n                    });\n                } else {\n                    self.input = document.createElement(self.attributes.multiLine ? 'textarea' : 'input');\n                }\n                document.body.appendChild(self.input);\n                self.createInlineStyle(self.input, 'canvas-datagrid-edit-input');\n                self.input.style.position = 'absolute';\n                self.input.editCell = cell;\n                self.resizeEditInput();\n                self.input.style.zIndex = '2';\n                self.input.value = cell.value;\n                self.input.focus();\n                self.input.addEventListener('click', self.stopPropagation);\n                self.input.addEventListener('dblclick', self.stopPropagation);\n                self.input.addEventListener('mouseup', self.stopPropagation);\n                self.input.addEventListener('mousedown', self.stopPropagation);\n                self.input.addEventListener('keydown', function (e) {\n                    var nx = cell.columnIndex,\n                        ny = cell.rowIndex;\n                    // esc\n                    if (e.keyCode === 27) {\n                        self.endEdit(true);\n                        self.draw(true);\n                    // enter\n                    } else if (e.keyCode === 13\n                            && (!self.attributes.multiLine\n                                || (self.attributes.multiLine && e.shiftKey))) {\n                        self.endEdit();\n                        self.draw(true);\n                    } else if (e.keyCode === 9) {\n                        e.preventDefault();\n                        if (!self.endEdit()) {\n                            return;\n                        }\n                        if (e.shiftKey) {\n                            nx -= 1;\n                        } else {\n                            nx += 1;\n                        }\n                        if (nx < 0) {\n                            nx = s.length - 1;\n                            ny -= 1;\n                        }\n                        if (nx > s.length - 1) {\n                            nx = 0;\n                            ny += 1;\n                        }\n                        if (ny < 0) {\n                            ny = self.data.length - 1;\n                        }\n                        if (ny > self.data.length - 1) {\n                            ny = 0;\n                        }\n                        self.beginEditAt(nx, ny);\n                    }\n                });\n            }\n            requestAnimationFrame(postDraw);\n            self.dispatchEvent('beginedit', {cell: cell, input: self.input});\n        };\n        self.click = function (e, overridePos) {\n            var i,\n                selectionChanged,\n                ctrl = (e.controlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                pos = overridePos || self.getLayerPos(e);\n            self.currentCell = self.getCellAt(pos.x, pos.y);\n            if (self.currentCell.grid !== undefined) {\n                return;\n            }\n            function checkSelectionChange() {\n                if (!selectionChanged) { return; }\n                self.dispatchEvent('selectionchanged', {\n                    selectedData: self.getSelectedData(),\n                    selections: self.selections,\n                    selectionBounds: self.selectionBounds\n                });\n            }\n            if (self.input) {\n                self.endEdit();\n            }\n            if (self.ignoreNextClick) {\n                self.ignoreNextClick = false;\n                return;\n            }\n            i = self.currentCell;\n            if (self.dispatchEvent('click', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'cell') {\n                if (self.currentCell.style === 'cornerCell') {\n                    self.order(self.uniqueId, 'asc');\n                    self.setFilter();\n                    checkSelectionChange();\n                    return;\n                }\n                if (self.currentCell.style === 'headerCell') {\n                    if (self.orderBy === i.header.name) {\n                        self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                    } else {\n                        self.orderDirection = 'asc';\n                    }\n                    self.order(i.header.name, self.orderDirection);\n                    checkSelectionChange();\n                    return;\n                }\n                if (['rowHeaderCell', 'headerCell'].indexOf(self.currentCell.style) === -1 && !ctrl) {\n                    self.setActiveCell(i.columnIndex, i.rowIndex);\n                }\n                self.selections[i.rowIndex] = self.selections[i.rowIndex] || [];\n                if ((self.attributes.rowSelectionMode || self.currentCell.style === 'rowHeaderCell')) {\n                    if (self.currentCell.style === 'rowHeaderCell'\n                            && self.attributes.tree && pos.x > 0\n                            && pos.x - self.currentCell.x < self.style.treeArrowWidth\n                            + self.style.treeArrowMarginLeft\n                            + self.style.treeArrowMarginRight + self.style.treeArrowClickRadius\n                            && pos.y - self.currentCell.y < self.style.treeArrowHeight\n                            + self.style.treeArrowMarginTop + self.style.treeArrowClickRadius\n                            && pos.y > 0) {\n                        self.toggleTree(i.rowIndex);\n                        return;\n                    }\n                    selectionChanged = true;\n                    self.selectRow(i.rowIndex, ctrl, true);\n                }\n                if (e.shiftKey && !ctrl) {\n                    self.selectionBounds = self.getSelectionBounds();\n                    self.selectArea(undefined, false);\n                }\n            }\n            checkSelectionChange();\n            self.draw(true);\n        };\n        self.dragResizeColumn = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = self.resizingStartingWidth + pos.x - self.dragStart.x;\n            y = self.resizingStartingHeight + pos.y - self.dragStart.y;\n            if (x < self.style.minColumnWidth) {\n                x = self.style.minColumnWidth;\n            }\n            if (y < self.style.minRowHeight) {\n                y = self.style.minRowHeight;\n            }\n            if (self.dispatchEvent('resizecolumn', {x: x, y: y, draggingItem: self.draggingItem})) { return false; }\n            if (self.scrollBox.scrollLeft > self.scrollBox.scrollWidth - self.attributes.resizeScrollZone\n                    && self.dragMode === 'ew-resize') {\n                self.resize(true);\n                self.scrollBox.scrollLeft += x;\n            }\n            if (self.dragMode === 'ew-resize') {\n                self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] = x;\n                if (['rowHeaderCell', 'cornerCell'].indexOf(self.draggingItem.header.style) !== -1) {\n                    self.resize(true);\n                }\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.dragMode === 'ns-resize') {\n                if (self.draggingItem.rowOpen) {\n                    self.sizes.trees[self.draggingItem.data[self.uniqueId]] = y;\n                } else if (self.attributes.globalRowResize) {\n                    self.style.cellHeight = y;\n                } else {\n                    self.sizes.rows[self.draggingItem.data[self.uniqueId]] = y;\n                }\n                self.dispatchEvent('resizerow', {row: y});\n                self.resizeChildGrids();\n                return;\n            }\n            self.ellipsisCache = {};\n        };\n        self.stopDragResize = function () {\n            self.resize();\n            document.body.removeEventListener('mousemove', self.dragResizeColumn, false);\n            document.body.removeEventListener('mouseup', self.stopDragResize, false);\n            self.setStorageData();\n            self.draw(true);\n            self.ignoreNextClick = true;\n        };\n        self.scrollGrid = function (e) {\n            var pos = self.getLayerPos(e);\n            self.scrollMode = self.getCellAt(pos.x, pos.y).context;\n            if (self.scrollMode === 'horizontal-scroll-box' && self.scrollStartMode !== 'horizontal-scroll-box') {\n                self.scrollStartMode = 'horizontal-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.left = self.scrollBox.scrollLeft;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box' && self.scrollStartMode !== 'vertical-scroll-box') {\n                self.scrollStartMode = 'vertical-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.top = self.scrollBox.scrollTop;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollStartMode === 'vertical-scroll-box'\n                    && self.scrollMode !== 'vertical-scroll-box') {\n                self.scrollMode = 'vertical-scroll-box';\n            }\n            if (self.scrollStartMode === 'horizontal-scroll-box'\n                    && self.scrollMode !== 'horizontal-scroll-box') {\n                self.scrollMode = 'horizontal-scroll-box';\n            }\n            clearTimeout(self.scrollTimer);\n            if (self.scrollModes.indexOf(self.scrollMode) === -1) {\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box') {\n                self.scrollBox.scrollTop = self.scrollStart.top + ((pos.y - self.dragStart.y)\n                    / self.scrollBox.heightBoxRatio);\n            } else if (self.scrollMode === 'vertical-scroll-top') {\n                self.scrollBox.scrollTop -= (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'vertical-scroll-bottom') {\n                self.scrollBox.scrollTop += (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n            if (self.scrollMode === 'horizontal-scroll-box') {\n                self.scrollBox.scrollLeft = self.scrollStart.left + ((pos.x - self.dragStart.x)\n                    / self.scrollBox.widthBoxRatio);\n            } else if (self.scrollMode === 'horizontal-scroll-right') {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'horizontal-scroll-left') {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.stopScrollGrid = function () {\n            clearTimeout(self.scrollTimer);\n            document.body.removeEventListener('mousemove', self.scrollGrid, false);\n        };\n        self.dragReorder = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = pos.x - self.dragStart.x;\n            y = pos.y - self.dragStart.y;\n            if (!self.attributes.allowColumnReordering && self.dragMode === 'column-reorder') {\n                return;\n            }\n            if (!self.attributes.allowRowReordering && self.dragMode === 'row-reorder') {\n                return;\n            }\n            if (self.dispatchEvent('reordering', {\n                    NativeEvent: e,\n                    source: self.dragStartObject,\n                    target: self.currentCell,\n                    dragMode: self.dragMode\n                })) {\n                return;\n            }\n            if (Math.abs(x) > self.attributes.reorderDeadZone || Math.abs(y) > self.attributes.reorderDeadZone) {\n                self.reorderObject = self.dragStartObject;\n                self.reorderTarget = self.currentCell;\n                self.reorderObject.dragOffset = {\n                    x: x,\n                    y: y\n                };\n                self.autoScrollZone(e, pos.x, pos.x, false);\n            }\n        };\n        self.stopDragReorder = function (e) {\n            var cr = {\n                    'row-reorder': self.orders.rows,\n                    'column-reorder': self.orders.columns\n                },\n                i = {\n                    'row-reorder': 'rowIndex',\n                    'column-reorder': 'columnIndex'\n                }[self.dragMode];\n            document.body.removeEventListener('mousemove', self.dragReorder, false);\n            document.body.removeEventListener('mouseup', self.stopDragReorder, false);\n            if (self.reorderObject\n                    && self.reorderTarget) {\n                self.ignoreNextClick = true;\n                if (self.reorderObject[i] !== self.reorderTarget[i]\n                        && !self.dispatchEvent('reorder', {\n                            NativeEvent: e,\n                            source: self.reorderObject,\n                            target: self.reorderTarget,\n                            dragMode: self.dragMode\n                        })) {\n                    cr[self.dragMode].splice(cr[self.dragMode].indexOf(self.reorderObject[i]), 1);\n                    cr[self.dragMode].splice(cr[self.dragMode].indexOf(self.reorderTarget[i]), 0, self.reorderObject[i]);\n                    self.setStorageData();\n                }\n            }\n            self.reorderObject = undefined;\n            self.reorderTarget = undefined;\n            self.draw(true);\n        };\n        self.mousedown = function (e, overridePos) {\n            self.lastMouseDownTarget = e.target;\n            if (self.dispatchEvent('mousedown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (e.button === 2 || self.input) { return; }\n            var ctrl = (e.controlKey || e.metaKey);\n            self.dragStart = overridePos || self.getLayerPos(e);\n            self.scrollStart = {\n                left: self.scrollBox.scrollLeft,\n                top: self.scrollBox.scrollTop\n            };\n            self.dragStartObject = self.getCellAt(self.dragStart.x, self.dragStart.y);\n            self.dragAddToSelection = !self.dragStartObject.selected;\n            if (!ctrl && !e.shiftKey && !/(vertical|horizontal)-scroll-(bar|box)/\n                    .test(self.dragStartObject.context)) {\n                self.selections = [];\n            }\n            if (self.dragStartObject.isGrid) {\n                return;\n            }\n            if (self.scrollModes.indexOf(self.dragStartObject.context) !== -1) {\n                self.scrollMode = self.dragStartObject.context;\n                self.scrollStartMode = self.dragStartObject.context;\n                self.scrollGrid(e);\n                document.body.addEventListener('mousemove', self.scrollGrid, false);\n                document.body.addEventListener('mouseup', self.stopScrollGrid, false);\n                self.ignoreNextClick = true;\n                return;\n            }\n            if (self.dragMode === 'cell') {\n                self.selecting = true;\n                if (self.attributes.rowSelectionMode) {\n                    self.selectRow(self.dragStartObject.rowIndex, ctrl, true);\n                }\n                return self.mousemove(e);\n            }\n            if (['ns-resize', 'ew-resize'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragItem;\n                if (self.draggingItem.rowOpen) {\n                    self.resizingStartingHeight = self.sizes.trees[self.draggingItem.data[self.uniqueId]];\n                } else {\n                    self.resizingStartingHeight = self.sizes.rows[self.draggingItem.data[self.uniqueId]] || self.style.cellHeight;\n                }\n                self.resizingStartingWidth = self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] || self.draggingItem.header.width;\n                document.body.addEventListener('mousemove', self.dragResizeColumn, false);\n                document.body.addEventListener('mouseup', self.stopDragResize, false);\n            }\n            if (['row-reorder', 'column-reorder'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragItem;\n                document.body.addEventListener('mousemove', self.dragReorder, false);\n                document.body.addEventListener('mouseup', self.stopDragReorder, false);\n            }\n        };\n        self.mouseup = function (e) {\n            clearTimeout(self.scrollTimer);\n            self.cellBoundaryCrossed = true;\n            self.selecting = undefined;\n            self.draggingItem = undefined;\n            self.dragStartObject = undefined;\n            if (self.dispatchEvent('mouseup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            if (self.currentCell && self.currentCell.grid !== undefined) {\n                return;\n            }\n            if (self.contextMenu || self.input) { return; }\n            if (self.dragStart && self.isInGrid(self.dragStart)) {\n                self.controlInput.focus();\n            }\n            e.preventDefault();\n        };\n        self.keydown = function (e) {\n            var i,\n                x = self.activeCell.columnIndex,\n                y = self.activeCell.rowIndex,\n                ctrl = (e.controlKey || e.metaKey),\n                last = self.data.length - 1,\n                cols = self.getVisibleSchema().length - 1;\n            if (self.dispatchEvent('keydown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            if (self.attributes.showNewRow) {\n                last += 1;\n            }\n            if (e.keyCode === 'Tab') {\n                e.preventDefault();\n            }\n            //ArrowDown\n            if (e.keyCode === 40) {\n                y += 1;\n            //ArrowUp\n            } else if (e.keyCode === 38) {\n                y -= 1;\n            //ArrowLeft Tab\n            } else if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {\n                x -= 1;\n            //ArrowRight Tab\n            } else if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {\n                x += 1;\n            //PageUp\n            } else if (e.keyCode === 33) {\n                y -= self.page;\n                e.preventDefault();\n            //PageDown\n            } else if (e.keyCode === 34) {\n                y += self.page;\n                e.preventDefault();\n            //Home ArrowUp\n            } else if (e.keyCode === 36 || (ctrl && e.keyCode === 38)) {\n                y = 0;\n            //End ArrowDown\n            } else if (e.keyCode === 35 || (ctrl && e.keyCode === 40)) {\n                y = self.data.length - 1;\n            //ArrowRight\n            } else if (ctrl && e.keyCode === 39) {\n                x = cols;\n            //ArrowLeft\n            } else if (ctrl && e.keyCode === 37) {\n                x = 0;\n            }\n            //Enter\n            if (e.keyCode === 13) {\n                return self.beginEditAt(x, y);\n            }\n            //Space\n            if (e.keyCode === 32) {\n                self.selections = [];\n                self.selections[Math.max(y, 0)] = [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                if (self.attributes.rowSelectionMode) {\n                    for (i = self.selectionBounds.top; i <= self.selectionBounds.bottom; i += 1) {\n                        self.selectRow(i, ctrl, true);\n                    }\n                } else {\n                    self.selectArea(undefined, ctrl);\n                }\n                e.preventDefault();\n                self.draw(true);\n                return;\n            }\n            if (x < 0) {\n                x = 0;\n            }\n            if (y > last) {\n                y = last;\n            }\n            if (y < 0) {\n                y = 0;\n            }\n            if (x > cols) {\n                x = cols;\n            }\n            // Arrows\n            if (e.shiftKey && [37, 38, 39, 40].indexOf(e.keyCode) !== -1) {\n                self.selections[Math.max(y, 0)] = self.selections[Math.max(y, 0)] || [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                self.selectArea(undefined, ctrl);\n                self.draw(true);\n            }\n            if (x !== self.activeCell.columnIndex || y !== self.activeCell.rowIndex) {\n                self.scrollIntoView(x !== self.activeCell.columnIndex ? x : undefined, y !== self.activeCell.rowIndex ? y : undefined);\n                self.setActiveCell(x, y);\n                if (!e.shiftKey && self.attributes.selectionFollowsActiveCell) {\n                    if (!ctrl) {\n                        self.selections = [];\n                    }\n                    self.selections[y] = self.selections[y] || [];\n                    self.selections[y].push(x);\n                    self.dispatchEvent('selectionchanged', {\n                        selectedData: self.getSelectedData(),\n                        selections: self.selections,\n                        selectionBounds: self.selectionBounds\n                    });\n                }\n                self.draw(true);\n            }\n        };\n        self.keyup = function (e) {\n            if (self.dispatchEvent('keyup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            self.controlInput.value = '';\n        };\n        self.keypress = function (e) {\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.dispatchEvent('keypress', {NativeEvent: e, cell: self.currentCell})) { return; }\n        };\n        self.dblclick = function (e) {\n            if (self.dispatchEvent('dblclick', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'headerCell') {\n                self.fitColumnToValues(self.currentCell.header.name);\n            } else if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'cornerCell') {\n                self.autosize();\n            } else if (['cell', 'activeCell'].indexOf(self.currentCell.style) !== -1) {\n                self.beginEditAt(self.currentCell.columnIndex, self.currentCell.rowIndex);\n            }\n        };\n        self.scrollWheel = function (e) {\n            if (self.dispatchEvent('wheel', {NativeEvent: e})) {\n                return;\n            }\n            self.touchHaltAnimation = true;\n            var l = self.scrollBox.scrollLeft,\n                t = self.scrollBox.scrollTop;\n            if (self.hasFocus) {\n                self.scrollBox.scrollTop += e.deltaY;\n                self.scrollBox.scrollLeft += e.deltaX;\n            }\n            if (t !== self.scrollBox.scrollTop || l !== self.scrollBox.scrollLeft) {\n                e.preventDefault();\n            }\n        };\n        self.copy = function (e) {\n            if (self.dispatchEvent('copy', {NativeEvent: e})) { return; }\n            if (!self.hasFocus || !e.clipboardData) { return; }\n            var rows = [], sData = self.getSelectedData();\n            if (sData.length > 0) {\n                sData.forEach(function (row) {\n                    if (row) {\n                        var r = [];\n                        Object.keys(row).forEach(function (key) {\n                            r.push(row[key]);\n                        });\n                        r.join(',');\n                        rows.push(r);\n                    }\n                });\n                e.clipboardData.setData('text/plain', rows.join('\\n'));\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/events.js\n// module id = 2\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.intf.blur = function (e) {\n            self.hasFocus = false;\n        };\n        self.intf.focus = function () {\n            self.hasFocus = true;\n            self.controlInput.focus();\n        };\n        Object.defineProperty(self.intf, 'height', {\n            get: function () {\n                return self.parentNode.height;\n            },\n            set: function (value) {\n                self.parentNode.height = value;\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'width', {\n            get: function () {\n                return self.parentNode.width;\n            },\n            set: function (value) {\n                self.parentNode.width = value;\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'openChildren', {\n            get: function () {\n                return self.openChildren;\n            }\n        });\n        Object.defineProperty(self.intf, 'childGrids', {\n            get: function () {\n                return Object.keys(self.childGrids).map(function (gridId) {\n                    return self.childGrids[gridId];\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'isChildGrid', {\n            get: function () {\n                return self.isChildGrid;\n            }\n        });\n        Object.defineProperty(self.intf, 'parentNode', {\n            get: function () {\n                return self.parentNode;\n            },\n            set: function (value) {\n                self.parentNode = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetParent', {\n            get: function () {\n                return self.parentNode;\n            },\n            set: function (value) {\n                self.parentNode = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetLeft', {\n            get: function () {\n                return self.parentNode.offsetLeft;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetTop', {\n            get: function () {\n                return self.parentNode.offsetTop;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollHeight', {\n            get: function () {\n                return self.scrollBox.scrollHeight;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollWidth', {\n            get: function () {\n                return self.scrollBox.scrollWidth;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollTop', {\n            get: function () {\n                return self.scrollBox.scrollTop;\n            },\n            set: function (value) {\n                self.scrollBox.scrollTop = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollLeft', {\n            get: function () {\n                return self.scrollBox.scrollLeft;\n            },\n            set: function (value) {\n                self.scrollBox.scrollLeft = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'sizes', {\n            get: function () {\n                return self.sizes;\n            }\n        });\n        Object.defineProperty(self.intf, 'input', {\n            get: function () {\n                return self.input;\n            }\n        });\n        Object.defineProperty(self.intf, 'controlInput', {\n            get: function () {\n                return self.controlInput;\n            }\n        });\n        Object.defineProperty(self.intf, 'currentCell', {\n            get: function () {\n                return self.currentCell;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleCells', {\n            get: function () {\n                return self.visibleCells;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRows', {\n            get: function () {\n                return self.visibleRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'selections', {\n            get: function () {\n                return self.selections;\n            }\n        });\n        Object.defineProperty(self.intf, 'dragMode', {\n            get: function () {\n                return self.dragMode;\n            }\n        });\n        Object.defineProperty(self.intf, 'changes', {\n            get: function () {\n                return self.changes;\n            }\n        });\n        self.intf.attributes = {};\n        self.intf.formatters = self.formatters;\n        self.normalizeDataset = function (data) {\n            if (!Array.isArray(data)) {\n                throw new Error('Data must be an array of objects or arrays.');\n            }\n            if ((typeof data[0] === 'object' && data[0] !== null)\n                            || (Array.isArray(data) && data.length === 0)) {\n                return data;\n            }\n            if (Array.isArray(data)) {\n                if (!Array.isArray(data[0])) {\n                    //array of something?  throw it all into 1 row!\n                    data = [data];\n                }\n                // find the longest length\n                var max = 0, d = [];\n                data.forEach(function (row) {\n                    max = Math.max(max, row.length);\n                });\n                // map against length indexes\n                data.forEach(function (row, index) {\n                    var x;\n                    d[index] = {};\n                    for (x = 0; x < max; x += 1) {\n                        d[index][self.integerToAlpha(x).toUpperCase()] = row[x] || null;\n                    }\n                });\n                return d;\n            }\n            throw new Error('Unsupported data type.  Must be an array of arrays or an array of objects.');\n        };\n        Object.defineProperty(self.intf, 'selectionBounds', {\n            get: function () {\n                return self.getSelectionBounds();\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedRows', {\n            get: function () {\n                return self.getSelectedData(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedCells', {\n            get: function () {\n                return self.getSelectedData();\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleSchema', {\n            get: function () {\n                return self.getVisibleSchema().map(function eachDataRow(col) {\n                    return col;\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'ctx', {\n            get: function () {\n                return self.ctx;\n            }\n        });\n        Object.defineProperty(self.intf, 'schema', {\n            get: function schemaGetter() {\n                return self.getSchema();\n            },\n            set: function schemaSetter(value) {\n                if (!Array.isArray(value) || typeof value[0] !== 'object') {\n                    throw new Error('Schema must be an array of objects.');\n                }\n                if (value[0].name === undefined) {\n                    throw new Error('Expected schema to contain an object with at least a name property.');\n                }\n                self.schema = value.map(function eachSchemaColumn(column, index) {\n                    column.width = column.width || self.style.columnWidth;\n                    column[self.uniqueId] = self.getSchemaNameHash(column.name);\n                    column.filter = column.filter || self.filter(column.type);\n                    column.type = column.type || 'string';\n                    column.index = index;\n                    column.columnIndex = index;\n                    column.rowIndex = -1;\n                    return column;\n                });\n                self.tempSchema = undefined;\n                self.createNewRowData();\n                self.createColumnOrders();\n                self.tryLoadStoredOrders();\n                self.resize(true);\n                self.dispatchEvent('schemachanged', {schema: self.schema});\n            }\n        });\n        Object.defineProperty(self.intf, 'data', {\n            get: function dataGetter() {\n                return self.data;\n            },\n            set: function dataSetter(value) {\n                self.originalData = self.normalizeDataset(value).map(function eachDataRow(row) {\n                    row[self.uniqueId] = self.uId;\n                    self.uId += 1;\n                    return row;\n                });\n                self.changes = [];\n                //TODO apply filter to incoming dataset\n                self.data = self.originalData;\n                if (!self.schema && self.data.length > 0) {\n                    self.tempSchema = self.getSchemaFromData();\n                }\n                if (!self.schema && self.data.length === 0) {\n                    self.tempSchema = [{name: ''}];\n                    self.tempSchema[0][self.uniqueId] = self.getSchemaNameHash('');\n                }\n                if (self.tempSchema && !self.schema) {\n                    self.createColumnOrders();\n                    self.tryLoadStoredOrders();\n                    self.dispatchEvent('schemachanged', {schema: self.tempSchema});\n                }\n                self.createNewRowData();\n                if (self.attributes.autoResizeColumns && self.data.length > 0\n                        && self.storedSettings === undefined) {\n                    self.autosize();\n                }\n                // width cannot be determined correctly until after inserted into the dom?\n                requestAnimationFrame(function () {\n                    self.fitColumnToValues('cornerCell');\n                });\n                if (!self.resize()) { self.draw(true); }\n                self.createRowOrders();\n                self.tryLoadStoredOrders();\n                self.dispatchEvent('datachanged', {data: self.data});\n            }\n        });\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/intf.js\n// module id = 3\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false, Event: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var zIndexTop = 2, hoverScrollTimeout, autoCompleteContext;\n        function createContextMenu(ev, pos, items, parentContextMenu) {\n            var container = document.createElement('div'),\n                upArrow = document.createElement('div'),\n                downArrow = document.createElement('div'),\n                children = [],\n                selectedIndex = -1,\n                intf = {},\n                rect;\n            if (!Array.isArray(items)) { throw new Error('createContextMenu expects an array.'); }\n            function createItems() {\n                items.forEach(function (item) {\n                    var contextItemContainer = document.createElement('div'),\n                        childMenuArrow;\n                    function removeChildContext(e) {\n                        if (e.relatedTarget === container\n                                || item.contextMenu.container === e.relatedTarget\n                                || childMenuArrow === e.relatedTarget\n                                || (contextItemContainer === e.relatedTarget)\n                                ) { return; }\n                        item.contextMenu.dispose();\n                        children.splice(children.indexOf(item.contextMenu), 1);\n                        item.contextMenu = undefined;\n                        contextItemContainer.removeEventListener('mouseout', removeChildContext);\n                        container.removeEventListener('mouseout', removeChildContext);\n                        contextItemContainer.setAttribute('contextOpen', '0');\n                        contextItemContainer.setAttribute('opening', '0');\n                    }\n                    function contextAddCallback(items) {\n                        // check yet again if the user hasn't moved off\n                        if (contextItemContainer.getAttribute('opening') !== '1' ||\n                                contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        var cPos = contextItemContainer.getBoundingClientRect();\n                        cPos = {\n                            left: cPos.left + self.style.childContextMenuMarginLeft + container.offsetWidth,\n                            top: cPos.top + self.style.childContextMenuMarginTop,\n                            bottom: cPos.bottom,\n                            right: cPos.right,\n                        };\n                        item.contextMenu = createContextMenu(ev, cPos, items, intf);\n                        contextItemContainer.setAttribute('contextOpen', '1');\n                        contextItemContainer.addEventListener('mouseout', removeChildContext);\n                        container.addEventListener('mouseout', removeChildContext);\n                        children.push(item.contextMenu);\n                    }\n                    function createChildContext() {\n                        var i;\n                        if (contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        contextItemContainer.setAttribute('opening', '1');\n                        if (typeof item.items === 'function') {\n                            i  = item.items.apply(intf, [function (items) {\n                                contextAddCallback(items);\n                            }]);\n                            if (i !== undefined && Array.isArray(i)) {\n                                contextAddCallback(i);\n                            }\n                            return;\n                        }\n                        contextAddCallback(item.items);\n                    }\n                    function addItem(item) {\n                        function addContent(content) {\n                            if (typeof content === 'function') {\n                                return addContent(content(ev));\n                            }\n                            if (typeof content === 'object') {\n                                contextItemContainer.appendChild(content);\n                                return;\n                            }\n                            self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n                            contextItemContainer.addEventListener('mouseover', function () {\n                                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                            });\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n                            });\n                            contextItemContainer.innerHTML = content;\n                            return;\n                        }\n                        addContent(item.title);\n                        item.contextItemContainer = contextItemContainer;\n                        if (item.items && item.items.length > 0) {\n                            childMenuArrow = document.createElement('div');\n                            self.createInlineStyle(childMenuArrow, 'canvas-datagrid-context-child-arrow');\n                            childMenuArrow.innerHTML = self.style.childContextMenuArrowHTML;\n                            contextItemContainer.appendChild(childMenuArrow);\n                            contextItemContainer.addEventListener('mouseover', createChildContext);\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                contextItemContainer.setAttribute('opening', '0');\n                            });\n                        }\n                        if (item.click) {\n                            contextItemContainer.addEventListener('click', function (ev) {\n                                item.click.apply(self, [ev]);\n                            });\n                        }\n                    }\n                    addItem(item);\n                    container.appendChild(contextItemContainer);\n                });\n            }\n            function clickIndex(idx) {\n                items[idx].contextItemContainer.dispatchEvent(new Event('click'));\n            }\n            function checkArrowVisibility() {\n                if (container.scrollTop > 0) {\n                    document.body.appendChild(upArrow);\n                } else if (upArrow.parentNode) {\n                    upArrow.parentNode.removeChild(upArrow);\n                }\n                if (container.scrollTop >= container.scrollHeight - container.offsetHeight && downArrow.parentNode) {\n                    downArrow.parentNode.removeChild(downArrow);\n                } else if (container.scrollHeight - container.offsetHeight > 0\n                        && !(container.scrollTop >= container.scrollHeight - container.offsetHeight)) {\n                    document.body.appendChild(downArrow);\n                }\n            }\n            function startHoverScroll(type) {\n                return function t() {\n                    var a = self.attributes.contextHoverScrollAmount;\n                    if (type === 'up' && container.scrollTop === 0) { return; }\n                    if (type === 'down' && container.scrollTop === container.scrollHeight) { return; }\n                    container.scrollTop += (type === 'up' ? -a : a);\n                    hoverScrollTimeout = setTimeout(t, self.attributes.contextHoverScrollRateMs, type);\n                };\n            }\n            function endHoverScroll(type) {\n                return function () {\n                    clearTimeout(hoverScrollTimeout);\n                };\n            }\n            function init() {\n                var loc = {},\n                    s = self.scrollOffset(self.canvas);\n                createItems();\n                self.createInlineStyle(container, 'canvas-datagrid-context-menu');\n                loc.x = pos.left - s.left;\n                loc.y = pos.top - s.top;\n                loc.height = 0;\n                zIndexTop += 1;\n                container.style.position = 'absolute';\n                upArrow.style.color = self.style.contextMenuArrowColor;\n                downArrow.style.color = self.style.contextMenuArrowColor;\n                [upArrow, downArrow].forEach(function (el) {\n                    el.style.textAlign = 'center';\n                    el.style.position = 'absolute';\n                    el.style.zIndex = zIndexTop + 1;\n                });\n                container.style.zIndex = zIndexTop;\n                if (parentContextMenu && parentContextMenu.inputDropdown) {\n                    container.style.maxHeight = window.innerHeight - loc.y - self.style.autocompleteBottomMargin + 'px';\n                    container.style.minWidth = pos.width + 'px';\n                    loc.y += pos.height;\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                container.addEventListener('scroll', checkArrowVisibility);\n                container.addEventListener('wheel', function (e) {\n                    if (self.hasFocus) {\n                        container.scrollTop += e.deltaY;\n                        container.scrollLeft += e.deltaX;\n                    }\n                    checkArrowVisibility();\n                });\n                upArrow.innerHTML = self.style.contextMenuArrowUpHTML;\n                downArrow.innerHTML = self.style.contextMenuArrowDownHTML;\n                container.appendChild(upArrow);\n                document.body.appendChild(downArrow);\n                document.body.appendChild(container);\n                rect = container.getBoundingClientRect();\n                if (rect.bottom > window.innerHeight && !(parentContextMenu && parentContextMenu.inputDropdown)) {\n                    loc.y = window.innerHeight - container.offsetHeight;\n                    if (loc.y < 0) { loc.y = 0; }\n                    if (container.offsetHeight > window.innerHeight) {\n                        container.style.height = window.innerHeight - self.style.contextMenuWindowMargin + 'px';\n                    }\n                }\n                if (rect.right > window.innerWidth) {\n                    if (parentContextMenu) {\n                        loc.x = parentContextMenu.container.offsetLeft - container.offsetWidth;\n                    } else {\n                        loc.x = window.innerWidth - container.offsetWidth;\n                    }\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                rect = container.getBoundingClientRect();\n                upArrow.style.top = rect.top + 'px';\n                downArrow.style.top = rect.top + rect.height - downArrow.offsetHeight + 'px';\n                upArrow.style.left = rect.left + 'px';\n                downArrow.style.left = rect.left + 'px';\n                downArrow.style.width = container.offsetWidth + 'px';\n                upArrow.style.width = container.offsetWidth + 'px';\n                downArrow.addEventListener('mouseover', startHoverScroll('down'));\n                downArrow.addEventListener('mouseout', endHoverScroll('down'));\n                upArrow.addEventListener('mouseover', startHoverScroll('up'));\n                upArrow.addEventListener('mouseout', endHoverScroll('up'));\n                checkArrowVisibility();\n            }\n            intf.parentGrid = self.intf;\n            intf.parentContextMenu = parentContextMenu;\n            intf.container = container;\n            init();\n            intf.clickIndex = clickIndex;\n            intf.rect = rect;\n            intf.items = items;\n            intf.dispose = function () {\n                clearTimeout(hoverScrollTimeout);\n                children.forEach(function (c) {\n                    c.dispose();\n                });\n                [downArrow, upArrow, container].forEach(function (el) {\n                    if (el.parentNode) { el.parentNode.removeChild(el); }\n                });\n            };\n            Object.defineProperty(intf, 'selectedIndex', {\n                get: function () {\n                    return selectedIndex;\n                },\n                set: function (value) {\n                    if (typeof value !== 'number' || isNaN(value || !isFinite(value))) {\n                        throw new Error('Context menu selected index must be a sane number.');\n                    }\n                    selectedIndex = value;\n                    if (selectedIndex > items.length - 1) {\n                        selectedIndex = items.length - 1;\n                    }\n                    if (selectedIndex < 0) {\n                        selectedIndex = 0;\n                    }\n                    items.forEach(function (item, index) {\n                        if (index === selectedIndex) {\n                            return self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                        }\n                        self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item');\n                    });\n                }\n            });\n            return intf;\n        }\n        function createFilterContextMenuItems(e) {\n            var filterContainer = document.createElement('div'),\n                filterLabel = document.createElement('div'),\n                filterAutoCompleteButton = document.createElement('button'),\n                filterInput = document.createElement('input'),\n                n = e.cell && e.cell.header ? e.cell.header.title || e.cell.header.name : '',\n                autoCompleteItems,\n                iRect;\n            function fillAutoComplete() {\n                autoCompleteItems = {};\n                self.data.forEach(function (row) {\n                    var value = row[e.cell.header.name];\n                    if (autoCompleteItems[value]) { return; }\n                    autoCompleteItems[value] = {\n                        title: self.formatters[e.cell.header.type || 'string']({ cell: { value: value }}),\n                        click: function (e) {\n                            filterInput.value = value;\n                            e.stopPropagation();\n                            filterInput.dispatchEvent(new Event('keyup'));\n                            self.disposeAutocomplete();\n                            return;\n                        }\n                    };\n                });\n                autoCompleteItems = Object.keys(autoCompleteItems).map(function (key) {\n                    return autoCompleteItems[key];\n                });\n            }\n            function createAutoCompleteContext(ev) {\n                if (ev && [40, 38, 13, 9, 27].indexOf(ev.keyCode) !== -1) { return; }\n                fillAutoComplete();\n                iRect = filterInput.getBoundingClientRect();\n                if (autoCompleteContext) {\n                    autoCompleteContext.dispose();\n                    autoCompleteContext = undefined;\n                }\n                autoCompleteContext = createContextMenu(e, {\n                    left: iRect.left,\n                    top: iRect.top,\n                    right: iRect.right,\n                    bottom: iRect.bottom,\n                    height: iRect.height,\n                    width: iRect.width\n                }, autoCompleteItems, {inputDropdown: true});\n                autoCompleteContext.selectedIndex = 0;\n            }\n            self.createInlineStyle(filterLabel, 'canvas-datagrid-context-menu-label');\n            self.createInlineStyle(filterAutoCompleteButton, 'canvas-datagrid-context-menu-filter-button');\n            self.createInlineStyle(filterInput, 'canvas-datagrid-context-menu-filter-input');\n            filterInput.onclick = self.disposeAutocomplete;\n            filterInput.addEventListener('keydown', function (e) {\n                //down\n                if (e.keyCode === 40) {\n                    autoCompleteContext.selectedIndex += 1;\n                }\n                //up\n                if (e.keyCode === 38) {\n                    autoCompleteContext.selectedIndex -= 1;\n                }\n                //enter\n                if (e.keyCode === 13) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    self.disposeContextMenu();\n                }\n                //tab\n                if (e.keyCode === 9) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    e.preventDefault();\n                }\n                //esc\n                if (e.keyCode === 27) {\n                    self.disposeContextMenu();\n                }\n            });\n            filterInput.addEventListener('keyup', function () {\n                self.setFilter(e.cell.header.name, filterInput.value);\n            });\n            filterInput.addEventListener('keyup', createAutoCompleteContext);\n            filterInput.value = self.columnFilters[e.cell.header.name] || '';\n            filterLabel.innerHTML = self.attributes.filterOptionText.replace(/%s/g, n);\n            filterAutoCompleteButton.onclick = function () {\n                if (autoCompleteContext) {\n                    return self.disposeAutocomplete();\n                }\n                createAutoCompleteContext();\n            };\n            filterAutoCompleteButton.innerHTML = self.style.contextFilterButtonHTML;\n            filterContainer.addEventListener('click', function (e) {\n                return e.stopPropagation();\n            });\n            filterContainer.appendChild(filterLabel);\n            filterContainer.appendChild(filterInput);\n            filterContainer.appendChild(filterAutoCompleteButton);\n            e.items.push({\n                title: filterContainer\n            });\n            if (Object.keys(self.columnFilters).length) {\n                Object.keys(self.columnFilters).forEach(function (cf) {\n                    var h = self.getHeaderByName(cf);\n                    e.items.push({\n                        title: self.attributes.removeFilterOptionText.replace(/%s/g, h.title || h.name),\n                        click: function removeFilterClick(e) {\n                            e.preventDefault();\n                            self.setFilter(cf, '');\n                            self.controlInput.focus();\n                        }\n                    });\n                });\n            }\n        }\n        function addDefaultContextMenuItem(e) {\n            var isNormalCell = !(e.cell.isBackground || e.cell.isHeaderCellCap\n                            || e.cell.isScrollBar || e.cell.isCorner || e.cell.isRowHeader);\n            if (self.attributes.showFilter && isNormalCell) {\n                createFilterContextMenuItems(e);\n            }\n            if (self.attributes.showCopy\n                    && self.selections.reduce(function (p, r) {\n                        return p + r.length;\n                    }, 0) > 0) {\n                e.items.push({\n                    title: self.attributes.copyText,\n                    click: function () {\n                        document.execCommand('copy');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.saveAppearance && self.attributes.showClearSettingsOption\n                    && (Object.keys(self.sizes.rows).length > 0\n                        || Object.keys(self.sizes.columns).length > 0)) {\n                e.items.push({\n                    title: self.attributes.clearSettingsOptionText,\n                    click: function (e) {\n                        e.preventDefault();\n                        self.sizes.rows = {};\n                        self.sizes.columns = {};\n                        self.createRowOrders();\n                        self.createColumnOrders();\n                        self.storedSettings = undefined;\n                        self.dispatchEvent('resizecolumn', {columnWidth: self.style.columnWidth});\n                        self.dispatchEvent('resizerow', {cellHeight: self.style.cellHeight});\n                        self.setStorageData();\n                        self.resize(true);\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.allowSorting && self.attributes.showOrderByOption && isNormalCell) {\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextAsc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'asc');\n                        self.controlInput.focus();\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextDesc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'desc');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n        }\n        self.disposeAutocomplete = function () {\n            if (autoCompleteContext) {\n                autoCompleteContext.dispose();\n                autoCompleteContext = undefined;\n            }\n        };\n        self.disposeContextMenu = function () {\n            document.removeEventListener('click', self.disposeContextMenu);\n            zIndexTop = 2;\n            self.disposeAutocomplete();\n            self.contextMenu.dispose();\n            self.contextMenu = undefined;\n        };\n        self.contextmenuEvent = function (e, overridePos) {\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            var items = [],\n                pos = overridePos || self.getLayerPos(e, true),\n                ev = {\n                    NativeEvent: e,\n                    cell: self.getCellAt(pos.x, pos.y),\n                    items: items\n                };\n            if (!ev.cell.isGrid) {\n                addDefaultContextMenuItem(ev);\n            }\n            if (self.dispatchEvent('contextmenu', ev)) {\n                return;\n            }\n            if (!ev.cell.isGrid) {\n                if (self.contextMenu) {\n                    self.disposeContextMenu();\n                }\n                self.contextMenu = createContextMenu(ev, {\n                    left: pos.x + pos.rect.left + self.style.contextMenuMarginLeft + self.canvasOffsetLeft,\n                    top: pos.y + pos.rect.top + self.style.contextMenuMarginTop + self.canvasOffsetTop,\n                    right: ev.cell.width + ev.cell.x + pos.rect.left,\n                    bottom: ev.cell.height + ev.cell.y + pos.rect.top,\n                    height: ev.cell.height,\n                    width: ev.cell.width\n                }, items);\n                document.addEventListener('click', self.disposeContextMenu);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/contextMenu.js\n// module id = 4\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.defaults = {\n            attributes: [\n                ['name', ''],\n                ['tree', false],\n                ['showNewRow', false],\n                ['treeHorizontalScroll', false],\n                ['saveAppearance', true],\n                ['selectionFollowsActiveCell', false],\n                ['multiLine', false],\n                ['editable', true],\n                ['allowColumnReordering', true],\n                ['allowRowReordering', false],\n                ['allowSorting', true],\n                ['showFilter', true],\n                ['globalRowResize', false],\n                ['pageUpDownOverlap', 1],\n                ['persistantSelectionMode', false],\n                ['rowSelectionMode', false],\n                ['autoResizeColumns', false],\n                ['allowRowHeaderResize', true],\n                ['allowColumnResize', true],\n                ['allowRowResize', true],\n                ['allowRowResizeFromCell', false],\n                ['allowColumnResizeFromCell', false],\n                ['debug', false],\n                ['borderResizeZone', 10],\n                ['showColumnHeaders', true],\n                ['showRowNumbers', true],\n                ['showRowHeaders', true],\n                ['scrollRepeatRate', 75],\n                ['selectionScrollZone', 20],\n                ['resizeScrollZone', 20],\n                ['contextHoverScrollRateMs', 5],\n                ['contextHoverScrollAmount', 2],\n                ['selectionScrollIncrement', 20],\n                ['reorderDeadZone', 3],\n                ['showClearSettingsOption', true],\n                ['showOrderByOption', true],\n                ['clearSettingsOptionText', 'Clear saved settings'],\n                ['showOrderByOptionTextAsc', 'Order by %s ascending'],\n                ['showOrderByOptionTextDesc', 'Order by %s descending'],\n                ['removeFilterOptionText', 'Remove filter on %s'],\n                ['filterOptionText', 'Filter %s'],\n                ['filterTextPrefix', '(filtered) '],\n                ['touchReleaseAnimationDurationMs', 1000],\n                ['touchReleaseAcceleration', 30],\n                ['touchDeadZone', 3],\n                ['touchSelectTimeMs', 800],\n                ['touchScrollZone', 40],\n                ['copyText', 'Copy'],\n                ['showCopy', true]\n            ],\n            styles: [\n                ['activeCellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['activeCellBorderWidth', 0.25],\n                ['activeCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellFont', '16px sans-serif'],\n                ['activeCellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['activeCellOverlayBorderWidth', 1.50],\n                ['activeCellPaddingBottom', 5],\n                ['activeCellPaddingLeft', 5],\n                ['activeCellPaddingRight', 7],\n                ['activeCellPaddingTop', 5],\n                ['activeCellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['activeCellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['activeHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeRowHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeRowHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['autocompleteBottomMargin', 60],\n                ['autosizeHeaderCellPadding', 8],\n                ['autosizePadding', 5],\n                ['backgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cellAutoResizePadding', 13],\n                ['cellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['cellBorderWidth', 0.25],\n                ['cellColor', 'rgba(0, 0, 0, 1)'],\n                ['cellFont', '16px sans-serif'],\n                ['cellHeight', 24],\n                ['cellHeightWithChildGrid', 150],\n                ['cellHorizontalAlignment', 'left'],\n                ['cellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['cellPaddingBottom', 5],\n                ['cellPaddingLeft', 5],\n                ['cellPaddingRight', 7],\n                ['cellPaddingTop', 5],\n                ['cellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['cellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['cellVerticalAlignment', 'center'],\n                ['cellWidthWithChildGrid', 250],\n                ['childContextMenuMarginLeft', -15],\n                ['childContextMenuMarginTop', 0],\n                ['childContextMenuArrowHTML', '&#x25BA;'],\n                ['childContextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuChildArrowFontSize', '12px'],\n                ['columnWidth', 250],\n                ['contextMenuBackground', 'rgba(240, 240, 240, 1)'],\n                ['contextMenuBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextMenuBorderRadius', '3px'],\n                ['contextMenuColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuFilterInvalidExpresion', 'rgba(237, 155, 156, 1)'],\n                ['contextMenuFontFamily', 'sans-serif'],\n                ['contextMenuFontSize', '16px'],\n                ['contextMenuHoverBackground', 'rgba(182, 205, 250, 1)'],\n                ['contextMenuHoverColor', 'rgba(43, 48, 153, 1)'],\n                ['contextMenuItemBorderRadius', '3px'],\n                ['contextMenuItemMargin', '2px'],\n                ['contextMenuLabelDisplay', 'inline-block'],\n                ['contextMenuLabelMargin', '0 3px 0 0'],\n                ['contextMenuLabelMaxWidth', '700px'],\n                ['contextMenuLabelMinWidth', '75px'],\n                ['contextMenuMarginLeft', 3],\n                ['contextMenuMarginTop', -3],\n                ['contextMenuWindowMargin', 6],\n                ['contextMenuOpacity', '0.98'],\n                ['contextMenuPadding', '2px'],\n                ['contextMenuArrowUpHTML', '&#x25B2;'],\n                ['contextMenuArrowDownHTML', '&#x25BC;'],\n                ['contextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextFilterButtonHTML', '&#x25BC;'],\n                ['contextFilterButtonBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterButtonBorderRadius', '3px'],\n                ['contextMenuFilterButtonFontFamily', 'sans-serif'],\n                ['contextMenuFilterButtonFontSize', '10px'],\n                ['contextFilterInputBackground', 'rgba(255,255,255,1)'],\n                ['contextFilterInputColor', 'rgba(0,0,0,1)'],\n                ['contextFilterInputBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterInputBorderRadius', '0'],\n                ['contextFilterInputFontFamily', 'sans-serif'],\n                ['contextFilterInputFontSize', '14px'],\n                ['cornerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cornerCellBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['editCellBorder', 'solid 1px rgba(110, 168, 255, 1)'],\n                ['editCellBoxShadow', '0 2px 5px rgba(0,0,0,0.4)'],\n                ['editCellFontFamily', 'sans-serif'],\n                ['editCellFontSize', '16px'],\n                ['editCellPaddingLeft', 4],\n                ['editCellColor', 'black'],\n                ['editCellBackgroundColor', 'white'],\n                ['gridBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['gridBorderWidth', 1],\n                ['headerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['headerCellBorderColor', 'rgba(152, 152, 152, 1)'],\n                ['headerCellBorderWidth', 0.25],\n                ['headerCellColor', 'rgba(50, 50, 50, 1)'],\n                ['headerCellFont', '16px sans-serif'],\n                ['headerCellHeight', 25],\n                ['headerCellHorizontalAlignment', 'left'],\n                ['headerCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['headerCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['headerCellPaddingBottom', 5],\n                ['headerCellPaddingLeft', 5],\n                ['headerCellPaddingRight', 7],\n                ['headerCellPaddingTop', 5],\n                ['headerCellVerticalAlignment', 'center'],\n                ['headerOrderByArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['headerOrderByArrowBorderWidth', 1],\n                ['headerOrderByArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['headerOrderByArrowHeight', 8],\n                ['headerOrderByArrowMarginLeft', 0],\n                ['headerOrderByArrowMarginRight', 5],\n                ['headerOrderByArrowMarginTop', 6],\n                ['headerOrderByArrowWidth', 13],\n                ['headerRowWidth', 57],\n                ['minColumnWidth', 45],\n                ['minHeight', 24],\n                ['minRowHeight', 24],\n                ['name', 'default'],\n                ['reorderMarkerBackgroundColor', 'rgba(0, 0, 0, 0.1)'],\n                ['reorderMarkerBorderColor', 'rgba(0, 0, 0, 0.2)'],\n                ['reorderMarkerBorderWidth', 1.25],\n                ['reorderMarkerIndexBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['reorderMarkerIndexBorderWidth', 2.75],\n                ['rowHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['rowHeaderCellBorderColor', 'rgba(152, 152, 152, 1)'],\n                ['rowHeaderCellBorderWidth', 0.25],\n                ['rowHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellFont', '16px sans-serif'],\n                ['rowHeaderCellHeight', 25],\n                ['rowHeaderCellHorizontalAlignment', 'left'],\n                ['rowHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['rowHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['rowHeaderCellPaddingBottom', 5],\n                ['rowHeaderCellPaddingLeft', 5],\n                ['rowHeaderCellPaddingRight', 5],\n                ['rowHeaderCellPaddingTop', 5],\n                ['rowHeaderCellSelectedBackgroundColor', 'rgba(217, 217, 217, 1)'],\n                ['rowHeaderCellSelectedColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellVerticalAlignment', 'center'],\n                ['scrollBarActiveColor', 'rgba(125, 125, 125, 1)'],\n                ['scrollBarBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarBorderWidth', 0.5],\n                ['scrollBarBoxBorderRadius', 3],\n                ['scrollBarBoxColor', 'rgba(192, 192, 192, 1)'],\n                ['scrollBarBoxMargin', 2],\n                ['scrollBarBoxMinSize', 15],\n                ['scrollBarBoxWidth', 8],\n                ['scrollBarCornerBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarCornerBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarWidth', 11],\n                ['selectionOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionOverlayBorderWidth', 0.75],\n                ['treeArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['treeArrowBorderWidth', 1],\n                ['treeArrowClickRadius', 5],\n                ['treeArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['treeArrowHeight', 8],\n                ['treeArrowMarginLeft', 0],\n                ['treeArrowMarginRight', 5],\n                ['treeArrowMarginTop', 6],\n                ['treeArrowWidth', 13],\n                ['treeGridHeight', 250]\n            ]\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/defaults.js\n// module id = 5\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.createInlineStyle = function (el, className) {\n            var css = {\n                'canvas-datagrid-context-menu-filter-input': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextFilterInputBackground,\n                    color: self.style.contextFilterInputColor,\n                    border: self.style.contextFilterInputBorder,\n                    borderRadius: self.style.contextFilterInputBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextFilterInputFontFamily,\n                    fontSize: self.style.contextFilterInputFontSize\n                },\n                'canvas-datagrid-context-menu-filter-button': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextFilterButtonBorder,\n                    borderRadius: self.style.contextFilterButtonBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFilterButtonFontFamily,\n                    fontSize: self.style.contextMenuFilterButtonFontSize\n                },\n                'canvas-datagrid-context-child-arrow': {\n                    cssFloat: 'right',\n                    color: self.style.childContextMenuArrowColor,\n                    fontSize: self.style.contextMenuChildArrowFontSize,\n                    fontFamily: self.style.contextMenuFontFamily,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-autocomplete': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    position: 'absolute',\n                    zIndex: 3,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-autocomplete-item': {\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor\n                },\n                'canvas-datagrid-autocomplete-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-canvas': {\n                    position: 'absolute',\n                    zIndex: '-1'\n                },\n                'canvas-datagrid': {\n                    position: 'absolute',\n                    background: self.style.backgroundColor,\n                    zIndex: '1',\n                    boxSizing: 'content-box',\n                    padding: '0'\n                },\n                'canvas-datagrid-control-input': {\n                    position: 'fixed',\n                    top: '-5px',\n                    left: '-5px',\n                    border: 'none',\n                    opacity: '0',\n                    cursor: 'pointer',\n                    width: '1px',\n                    height: '1px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize\n                },\n                'canvas-datagrid-edit-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 ' + self.style.editCellPaddingLeft + 'px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.editCellFontFamily,\n                    fontSize: self.style.editCellFontSize,\n                    boxShadow: self.style.editCellBoxShadow,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-context-menu-item': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-context-menu-label': {\n                    margin: self.style.contextMenuLabelMargin,\n                    display: self.style.contextMenuLabelDisplay,\n                    minWidth: self.style.contextMenuLabelMinWidth,\n                    maxWidth: self.style.contextMenuLabelMaxWidth\n                },\n                'canvas-datagrid-context-menu': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-invalid-search-regExp': {\n                    background: self.style.contextMenuFilterInvalidExpresion\n                }\n            };\n            if (css[className]) {\n                Object.keys(css[className]).map(function (prop) {\n                    el.style[prop] = css[className][prop];\n                });\n            }\n            return;\n        };\n        self.appendTo = function (n) {\n            self.parentNode = n;\n            self.height = self.parentNode.offsetHeight;\n            self.width = self.parentNode.offsetWidth;\n            if (self.parentNode && /canvas-datagrid-(cell|tree)/.test(self.parentNode.nodeType)) {\n                self.isChildGrid = true;\n                self.parentGrid = self.parentNode.parentGrid;\n                self.ctx = self.parentGrid.context;\n                self.canvas = self.parentGrid.canvas;\n                self.controlInput = self.parentGrid.controlInput;\n                self.eventParent = self.canvas;\n                self.intf.offsetParent = self.parentNode;\n            } else {\n                self.controlInput = document.createElement('input');\n                self.controlInput.onblur = self.intf.blur;\n                self.createInlineStyle(self.controlInput, 'canvas-datagrid-control-input');\n                self.isChildGrid = false;\n                self.parentDOMNode = self.parentNode;\n                self.parentNode = self.parentDOMNode;\n                self.canvas = document.createElement('canvas');\n                self.ctx = self.canvas.getContext('2d');\n                self.ctx.textBaseline = 'alphabetic';\n                self.parentDOMNode.appendChild(self.canvas);\n                self.parentDOMNode.appendChild(self.controlInput);\n                self.eventParent = self.canvas;\n            }\n            self.controlInput.addEventListener('blur', function (e) {\n                if (e.target !== self.canvas) {\n                    self.hasFocus = false;\n                }\n            });\n            window.addEventListener('resize', self.resize);\n            if (MutationObserver) {\n                self.observer = new MutationObserver(function (mutations) {\n                    mutations.forEach(function (mutation) {\n                        self.resize(true);\n                    });\n                });\n                [self.canvas.parentNode].forEach(function (el) {\n                    self.observer.observe(el, { attributes: true });\n                });\n            }\n            self.eventParent.addEventListener('scroll', self.resize, false);\n            self.eventParent.addEventListener('touchstart', self.touchstart, false);\n            self.eventParent.addEventListener('mouseup', self.mouseup, false);\n            self.eventParent.addEventListener('mousedown', self.mousedown, false);\n            self.eventParent.addEventListener('dblclick', self.dblclick, false);\n            self.eventParent.addEventListener('click', self.click, false);\n            self.eventParent.addEventListener('mousemove', self.mousemove);\n            self.eventParent.addEventListener('wheel', self.scrollWheel, false);\n            self.canvas.addEventListener('contextmenu', self.contextmenuEvent, false);\n            (self.isChildGrid ? self.parentGrid : document).addEventListener('copy', self.copy);\n            self.controlInput.addEventListener('keypress', self.keypress, false);\n            self.controlInput.addEventListener('keyup', self.keyup, false);\n            self.controlInput.addEventListener('keydown', self.keydown, false);\n        };\n        self.setDom = function () {\n            self.appendTo(self.args.parentNode);\n        };\n        self.initScrollBox = function () {\n            var sHeight = 0,\n                sWidth = 0,\n                scrollTop = 0,\n                scrollLeft = 0,\n                scrollHeight = 0,\n                scrollWidth = 0,\n                scrollBoxHeight = 20,\n                scrollBoxWidth = 20;\n            function setScrollTop(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollTop value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollHeight) {\n                    value = scrollHeight;\n                }\n                if (scrollHeight < 0) {\n                    value = 0;\n                }\n                scrollTop = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            function setScrollLeft(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollLeft value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollWidth) {\n                    value = scrollWidth;\n                }\n                if (scrollWidth < 0) {\n                    value = 0;\n                }\n                scrollLeft = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            self.scrollBox.scrollTo = function (x, y) {\n\n                setScrollLeft(x, true);\n                setScrollTop(y);\n            };\n            Object.defineProperty(self.scrollBox, 'scrollBoxHeight', {\n                get: function () {\n                    return scrollBoxHeight;\n                },\n                set: function (value) {\n                    scrollBoxHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollBoxWidth', {\n                get: function () {\n                    return scrollBoxWidth;\n                },\n                set: function (value) {\n                    scrollBoxWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'height', {\n                get: function () {\n                    return sHeight;\n                },\n                set: function (value) {\n                    if (scrollHeight < value) {\n                        scrollTop = 0;\n                    }\n                    sHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'width', {\n                get: function () {\n                    return sWidth;\n                },\n                set: function (value) {\n                    sWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollTop', {\n                get: function () {\n                    return scrollTop;\n                },\n                set: setScrollTop\n            });\n            Object.defineProperty(self.scrollBox, 'scrollLeft', {\n                get: function () {\n                    return scrollLeft;\n                },\n                set: setScrollLeft\n            });\n            Object.defineProperty(self.scrollBox, 'scrollHeight', {\n                get: function () {\n                    return scrollHeight;\n                },\n                set: function (value) {\n                    if (scrollTop > value) {\n                        scrollTop = Math.max(value, 0);\n                    }\n                    if (scrollHeight < sHeight) {\n                        scrollTop = 0;\n                    }\n                    scrollHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollWidth', {\n                get: function () {\n                    return scrollWidth;\n                },\n                set: function (value) {\n                    if (scrollLeft > value) {\n                        scrollLeft = Math.max(value, 0);\n                    }\n                    scrollWidth = value;\n                }\n            });\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/dom.js\n// module id = 6\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        // all methods here are exposed by intf\n        // to users\n        /**\n         * Converts a integer into a letter A - ZZZZZ...\n         * @memberof canvasDataGrid\n         * @name integerToAlpha\n         * @method\n         * @param {column} n The number to convert.\n         */\n        self.integerToAlpha = function (n) {\n            var ordA = 'a'.charCodeAt(0),\n                ordZ = 'z'.charCodeAt(0),\n                len = ordZ - ordA + 1,\n                s = '';\n            while (n >= 0) {\n                s = String.fromCharCode(n % len + ordA) + s;\n                n = Math.floor(n / len) - 1;\n            }\n            return s;\n        };\n        /**\n         * Inserts a new column before the specified index into the schema.\n         * @see canvasDataGrid#schema\n         * @tutorial schema\n         * @memberof canvasDataGrid\n         * @name insertColumn\n         * @method\n         * @param {column} rowIndex The column to insert into the schema.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertColumn = function (c, index) {\n            var s = self.getSchema();\n            if (s.length < index) {\n                throw new Error('Index is beyond the length of the schema.');\n            }\n            self.validateColumn(c, s);\n            self.intf.schema = s.splice(index, 0, c);\n        };\n        /**\n         * Deletes a column from the schema at the specified index.\n         * @memberof canvasDataGrid\n         * @name deleteColumn\n         * @tutorial schema\n         * @method\n         * @param {number} index The index of the column to delete.\n         */\n        self.deleteColumn = function (index) {\n            var s = self.getSchema();\n            self.intf.schema = s.splice(index, 1);\n        };\n        /**\n         * Adds a new column into the schema.\n         * @see canvasDataGrid#schema\n         * @tutorial schema\n         * @memberof canvasDataGrid\n         * @name addColumn\n         * @method\n         * @param {column} c The column to add to the schema.\n         */\n        self.addColumn = function (c) {\n            var s = self.getSchema();\n            self.validateColumn(c, s);\n            s.push(c);\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a row from the dataset at the specified index.\n         * @memberof canvasDataGrid\n         * @name deleteRow\n         * @method\n         * @param {number} index The index of the row to delete.\n         */\n        self.deleteRow = function (index) {\n            self.originalData.splice(index, 1);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Inserts a new row into the dataset before the specified index.\n         * @memberof canvasDataGrid\n         * @name insertRow\n         * @method\n         * @param {object} d data.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertRow = function (d, index) {\n            if (self.originalData.length < index) {\n                throw new Error('Index is beyond the length of the dataset.');\n            }\n            self.originalData.splice(index, 0, d);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Adds a new row into the dataset.\n         * @memberof canvasDataGrid\n         * @name addRow\n         * @method\n         * @param {object} d data.\n         */\n        self.addRow = function (d) {\n            self.originalData.push(d);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Sets the height of a given row by index number.\n         * @memberof canvasDataGrid\n         * @name setRowHeight\n         * @method\n         * @param {number} rowIndex The index of the row to set.\n         * @param {number} height Height to set the row to.\n         */\n        self.setRowHeight = function (rowIndex, height) {\n            self.sizes.rows[self.data[rowIndex][self.uniqueId]] = height;\n            self.draw(true);\n        };\n        /**\n         * Sets the width of a given column by index number.\n         * @memberof canvasDataGrid\n         * @name setColumnWidth\n         * @method\n         * @param {number} colIndex The index of the column to set.\n         * @param {number} width Width to set the column to.\n         */\n        self.setColumnWidth = function (colIndex, width) {\n            var s = self.getSchema();\n            self.sizes.columns[s[colIndex][self.uniqueId]] = width;\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the width of the columns due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDataGrid\n         * @name resetColumnWidths\n         * @tutorial schema\n         * @method\n         */\n        self.resetColumnWidths = function () {\n            self.sizes.columns = {};\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the height of the rows due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDataGrid\n         * @name resetRowHeights\n         * @tutorial schema\n         * @method\n         */\n        self.resetRowHeights = function () {\n            self.sizes.rows = {};\n            self.draw(true);\n        };\n        /**\n         * Sets the value of the filter.\n         * @memberof canvasDataGrid\n         * @name setFilter\n         * @method\n         * @param {string} column Name of the column to filter.\n         * @param {string} value The value to filter for.\n         */\n        self.setFilter = function (column, value) {\n            function applyFilter() {\n                self.refreshFromOrigialData();\n                Object.keys(self.columnFilters).forEach(function (filter) {\n                    var header = self.getHeaderByName(column);\n                    if (!header) {\n                        return;\n                    }\n                    self.currentFilter = header.filter || self.filter(column.type || 'string');\n                    self.data = self.data.filter(function (row) {\n                        return self.currentFilter(row[filter], self.columnFilters[filter]);\n                    });\n                });\n                self.resize();\n                self.draw(true);\n            }\n            if (self.coulumn === undefined && value === undefined) {\n                return applyFilter();\n            }\n            if (column && (value === '' || value === undefined)) {\n                delete self.columnFilters[column];\n            } else {\n                self.columnFilters[column] = value;\n            }\n            applyFilter();\n        };\n        /**\n         * Returns the number of pixels to scroll down to line up with row rowIndex.\n         * @memberof canvasDataGrid\n         * @name findRowScrollTop\n         * @method\n         * @param {number} rowIndex The row index of the row to scroll find.\n         */\n        self.findRowScrollTop = function (rowIndex) {\n            var top = 0, x = 0, l = self.data.length,\n                cellBorder = self.style.cellBorderWidth * 2;\n            if (!self.attributes.showNewRow) {\n                l -= 1;\n            }\n            if (rowIndex > l) {\n                throw new Error('Impossible row index');\n            }\n            while (x < rowIndex) {\n                top += (self.sizes.rows[self.data[x][self.uniqueId]] || self.style.cellHeight) + cellBorder;\n                x += 1;\n            }\n            //TODO: This is not super accurate, causes pageUp/Dn to not move around right\n            return top - (self.sizes.rows[self.data[rowIndex][self.uniqueId]] || self.style.cellHeight);\n        };\n        /**\n         * Returns the number of pixels to scroll to the left to line up with column columnIndex.\n         * @memberof canvasDataGrid\n         * @name findColumnScrollLeft\n         * @method\n         * @param {number} columnIndex The column index of the column to find.\n         */\n        self.findColumnScrollLeft = function (columnIndex) {\n            var left = 0, y = 0, s = self.getSchema(), l = s.length - 1;\n            if (columnIndex > l) {\n                throw new Error('Impossible column index');\n            }\n            while (y < columnIndex) {\n                left += self.sizes.columns[s[y][self.uniqueId]] || s[y].width;\n                y += 1;\n            }\n            return left;\n        };\n        /**\n         * Scrolls the cell at cell x, row y.\n         * @memberof canvasDataGrid\n         * @name gotoCell\n         * @method\n         * @param {number} x The column index of the cell to scroll to.\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoCell = function (x, y) {\n            if (x !== undefined) {\n                self.scrollBox.scrollLeft = self.findColumnScrollLeft(x);\n            }\n            if (y !== undefined) {\n                self.scrollBox.scrollTop = self.findRowScrollTop(y);\n            }\n        };\n        /**\n         * Scrolls the row y.\n         * @memberof canvasDataGrid\n         * @name gotoRow\n         * @method\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoRow = function (y) {\n            self.gotoCell(0, y);\n        };\n        /**\n         * Scrolls the cell at cell x, row y into view if it is not already.\n         * @memberof canvasDataGrid\n         * @name scrollIntoView\n         * @method\n         * @param {number} x The column index of the cell to scroll into view.\n         * @param {number} y The row index of the cell to scroll into view.\n         */\n        self.scrollIntoView = function (x, y) {\n            if (self.visibleCells.filter(function (cell) {\n                    return (cell.rowIndex === y || y === undefined)\n                        && (cell.columnIndex === x || x === undefined)\n                        && cell.x > 0\n                        && cell.y > 0\n                        && cell.x + cell.width < self.width\n                        && cell.y + cell.height < self.height;\n                }).length === 0) {\n                self.gotoCell(x, y);\n            }\n        };\n        /**\n         * Sets the active cell. Requires redrawing.\n         * @memberof canvasDataGrid\n         * @name setActiveCell\n         * @method\n         * @param {number} x The column index of the cell to set active.\n         * @param {number} y The row index of the cell to set active.\n         */\n        self.setActiveCell = function (x, y) {\n            self.activeCell = {\n                rowIndex: y,\n                columnIndex: x\n            };\n        };\n        /**\n         * Selects a row.\n         * @memberof canvasDataGrid\n         * @name selectRow\n         * @method\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the row.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectRow = function (rowIndex, ctrl, supressEvent) {\n            var s = self.getSchema();\n            if (self.dragAddToSelection === false) {\n                if (self.selections[rowIndex] && self.selections[rowIndex].length - 1 === s.length) {\n                    if (ctrl) {\n                        self.selections[rowIndex] = [];\n                        return;\n                    }\n                }\n            }\n            if (self.dragAddToSelection === true) {\n                self.selections[rowIndex] = [];\n                self.selections[rowIndex].push(-1);\n                s.forEach(function (col) {\n                    self.selections[rowIndex].push(col.index);\n                });\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Collapse a tree grid by row index.\n         * @memberof canvasDataGrid\n         * @name collapseTree\n         * @method\n         * @param {number} index The index of the row to collapse.\n         */\n        self.collapseTree = function (rowIndex) {\n            var rowId = self.data[rowIndex][self.uniqueId];\n            self.dispatchEvent('collapsetree', {\n                childGrid: self.childGrids[rowId],\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId].blur();\n            self.openChildren[rowId].dispose();\n            delete self.openChildren[rowId];\n            delete self.sizes.trees[rowId];\n            delete self.childGrids[rowId];\n            self.dispatchEvent('resizerow', {\n                cellHeight: self.style.cellHeight\n            });\n            self.resize(true);\n            self.draw(true);\n        };\n        /**\n         * Expands a tree grid by row index.\n         * @memberof canvasDataGrid\n         * @name expandTree\n         * @method\n         * @param {number} index The index of the row to expand.\n         */\n        self.expandTree = function (rowIndex) {\n            var headerCellHeight = self.getHeaderCellHeight(),\n                headerCellWidth = self.sizes.columns.cornerCell || self.style.headerRowWidth,\n                rowId = self.data[rowIndex][self.uniqueId],\n                h = self.sizes.trees[rowId] || self.style.treeGridHeight,\n                treeGrid;\n            if (!self.childGrids[rowId]) {\n                treeGrid = self.createGrid({\n                    debug: self.attributes.debug,\n                    name: self.attributes.saveAppearance\n                        ? self.attributes.name + 'tree' + rowId : undefined,\n                    parentNode: {\n                        parentGrid: self.intf,\n                        nodeType: 'canvas-datagrid-tree',\n                        offsetHeight: h,\n                        offsetWidth: self.width - headerCellWidth,\n                        header: { width: self.width - headerCellWidth },\n                        offsetLeft: headerCellWidth,\n                        offsetTop: headerCellHeight,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: 'tree',\n                        data: self.data[rowIndex]\n                    }\n                });\n                self.childGrids[rowId] = treeGrid;\n            }\n            treeGrid = self.childGrids[rowId];\n            treeGrid.visible = true;\n            self.dispatchEvent('expandtree', {\n                treeGrid: treeGrid,\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId] = treeGrid;\n            self.sizes.trees[rowId] = h;\n            self.dispatchEvent('resizerow', {height: self.style.cellHeight});\n            self.resize(true);\n        };\n        /**\n         * Toggles tree grid open and close by row index.\n         * @memberof canvasDataGrid\n         * @name toggleTree\n         * @method\n         * @param {number} index The index of the row to toggle.\n         */\n        self.toggleTree = function (rowIndex) {\n            var i = self.openChildren[self.data[rowIndex][self.uniqueId]];\n            if (i) {\n                return self.collapseTree(rowIndex);\n            }\n            self.expandTree(rowIndex);\n        };\n        /**\n         * Returns a header from the schema by name.\n         * @memberof canvasDataGrid\n         * @name getHeaderByName\n         * @tutorial schema\n         * @method\n         * @returns {header} header with the selected name, or undefined.\n         * @param {string} name The name of the column to resize.\n         */\n        self.getHeaderByName = function (name) {\n            var x, i = self.getSchema();\n            for (x = 0; x < i.length; x += 1) {\n                if (i[x].name === name) {\n                    return i[x];\n                }\n            }\n        };\n        /**\n         * Resizes a column to fit the longest value in the column. Call without a value to resize all columns.\n         * Warning, can be slow on very large record sets (1m records ~3-5 seconds on an i7).\n         * @memberof canvasDataGrid\n         * @name fitColumnToValues\n         * @method\n         * @param {string} name The name of the column to resize.\n         */\n        self.fitColumnToValues = function (name) {\n            self.sizes.columns[name === 'cornerCell' ? name : self.getHeaderByName(name)[self.uniqueId]]\n                = self.findColumnMaxTextLength(name);\n            self.resize();\n            self.draw(true);\n        };\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDataGrid\n         * @name isCellVisible\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {cell} cell The cell to check for.  Alternatively you can pass an object { x: <x-index>, y: <y-index> }.\n         */\n        self.isCellVisible = function (cell) {\n            var x, l = self.visibleCells.length;\n            for (x = 0; x < l; x += 1) {\n                if (cell.x === self.visibleCells[x].x && cell.y === self.visibleCells[x].y) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n         * Sets the order of the data.\n         * @memberof canvasDataGrid\n         * @name order\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} columnName Number of pixels from the left.\n         * @param {string} direction `asc` for ascending or `desc` for descending.\n         * @param {bool} dontSetStorageData Don't store this setting for future use.\n         */\n        self.order = function (columnName, direction, dontSetStorageData) {\n            var f,\n                c = self.getSchema().filter(function (col) {\n                    return col.name === columnName;\n                });\n            self.orderBy = columnName;\n            if (c.length === 0) {\n                throw new Error('Cannot sort.  No such column name');\n            }\n            f = self.sorters[c[0].type];\n            if (!f && c[0].type !== undefined) {\n                console.warn('Cannot sort type \"%s\" falling back to string sort.', c[0].type);\n            }\n            self.data = self.data.sort(typeof f === 'function' ? f(columnName, direction) : self.sorters.string);\n            self.dispatchEvent('ordercolumn', {name: columnName, direction: direction});\n            self.draw(true);\n            if (dontSetStorageData) { return; }\n            self.setStorageData();\n        };\n        self.isInGrid = function (e) {\n            if (e.x < 0\n                    || e.x > self.width\n                    || e.y < 0\n                    || e.y > self.height) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Gets the cell at columnIndex and rowIndex.\n         * @memberof canvasDataGrid\n         * @name getVisibleCellByIndex\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Column index.\n         * @param {number} y Row index.\n         */\n        self.getVisibleCellByIndex = function (x, y) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === x && c.rowIndex === y;\n            })[0];\n        };\n        /**\n         * Gets the cell at grid pixel coordinate x and y.\n         * @memberof canvasDataGrid\n         * @name getCellAt\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Number of pixels from the left.\n         * @param {number} y Number of pixels from the top.\n         */\n        self.getCellAt = function (x, y, useTouchScrollZones) {\n            var tsz = useTouchScrollZones ? self.attributes.touchScrollZone : 0, i, l = self.visibleCells.length, cell;\n            if (!self.visibleCells || !self.visibleCells.length) { return; }\n            self.hasFocus = true;\n            if (!(y < self.height\n                && y > 0\n                && x < self.width\n                && x > 0)) {\n                self.hasFocus = false;\n                return {\n                    dragContext: 'inherit',\n                    context: 'inherit'\n                };\n            }\n            for (i = 0; i < l; i += 1) {\n                cell = self.visibleCells[i];\n                if (useTouchScrollZones && /(vertical|horizontal)-scroll-/.test(cell.style)) {\n                    cell.x -= tsz;\n                    cell.y -= tsz;\n                    cell.height += tsz;\n                    cell.width += tsz;\n                }\n                if (cell.x - self.style.cellBorderWidth < x\n                        && cell.x + cell.width + self.style.cellBorderWidth > x\n                        && cell.y - self.style.cellBorderWidth < y\n                        && cell.y + cell.height + self.style.cellBorderWidth > y) {\n                    if (/vertical-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'vertical-scroll-box';\n                        cell.context = 'vertical-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isVerticalScrollBar = true;\n                        if (y > self.scrollBox.box.v.y + self.scrollBox.scrollBoxHeight) {\n                            cell.dragContext = 'vertical-scroll-bottom';\n                            cell.context = 'vertical-scroll-bottom';\n                        } else if (y < self.scrollBox.box.v.y) {\n                            cell.dragContext = 'vertical-scroll-top';\n                            cell.context = 'vertical-scroll-top';\n                        }\n                        self.canvas.style.cursor = 'default';\n                        return cell;\n                    }\n                    if (/horizontal-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'horizontal-scroll-box';\n                        cell.context = 'horizontal-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isHorizontalScrollBar = true;\n                        if (x > self.scrollBox.box.h.x + self.scrollBox.scrollBoxWidth) {\n                            cell.dragContext = 'horizontal-scroll-right';\n                            cell.context = 'horizontal-scroll-right';\n                        } else if (x < self.scrollBox.box.h.x) {\n                            cell.dragContext = 'horizontal-scroll-left';\n                            cell.context = 'horizontal-scroll-left';\n                        }\n                        self.canvas.style.cursor = 'default';\n                        return cell;\n                    }\n                    if (cell.x + cell.width - (self.attributes.borderResizeZone * 0.4) < x\n                            && cell.x + cell.width + (self.attributes.borderResizeZone * 0.6) > x\n                            && self.attributes.allowColumnResize\n                            && ((self.attributes.allowColumnResizeFromCell && cell.style === 'cell')\n                                || cell.style !== 'cell')\n                            && ((self.attributes.allowRowHeaderResize\n                                && ['rowHeaderCell', 'cornerCell'].indexOf(cell.style) !== -1)\n                                || ['rowHeaderCell', 'cornerCell'].indexOf(cell.style) === -1)) {\n                        cell.context = 'ew-resize';\n                        cell.dragContext = 'ew-resize';\n                        return cell;\n                    }\n                    if (cell.y + cell.height - (self.attributes.borderResizeZone * 0.4) < y\n                            && cell.y + cell.height + (self.attributes.borderResizeZone * 0.6) > y\n                            && self.attributes.allowRowResize\n                            && ((self.attributes.allowRowResizeFromCell && cell.style === 'cell')\n                                || cell.style !== 'cell')\n                            && cell.style !== 'headerCell') {\n                        cell.context = 'ns-resize';\n                        cell.dragContext = 'ns-resize';\n                        return cell;\n                    }\n                    if (cell.style === 'headerCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'column-reorder';\n                        return cell;\n                    }\n                    if (cell.style === 'rowHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'row-reorder';\n                        return cell;\n                    }\n                    if (cell.isGrid) {\n                        self.hasFocus = false;\n                        cell.dragContext = 'cell-grid';\n                        cell.context = 'cell-grid';\n                        return cell;\n                    }\n                    if (cell.style === 'tree-grid') {\n                        self.hasFocus = false;\n                        cell.dragContext = 'tree';\n                        cell.context = 'tree';\n                        return cell;\n                    }\n                    cell.dragContext = 'cell';\n                    cell.context = 'cell';\n                    return cell;\n                }\n            }\n            self.hasFocus = true;\n            self.canvas.style.cursor = 'default';\n            return {\n                dragContext: 'background',\n                context: 'background',\n                style: 'background',\n                isBackground: true\n            };\n        };\n        /**\n         * Gets the bounds of current selection. \n         * @returns {rect} selection.\n         * @memberof canvasDataGrid\n         * @name getSelectionBounds\n         * @method\n         */\n        self.getSelectionBounds = function () {\n            var low = {x: Infinity, y: Infinity},\n                high = {x: -Infinity, y: -Infinity};\n            self.data.forEach(function (row, rowIndex) {\n                var maxCol, minCol;\n                if (self.selections[rowIndex] && self.selections[rowIndex].length) {\n                    low.y = rowIndex < low.y ? rowIndex : low.y;\n                    high.y = rowIndex > high.y ? rowIndex : high.y;\n                    maxCol = Math.max.apply(null, self.selections[rowIndex]);\n                    minCol = Math.min.apply(null, self.selections[rowIndex]);\n                    low.x = minCol < low.x ? minCol : low.x;\n                    high.x = maxCol > high.x ? maxCol : high.x;\n                }\n            });\n            return {\n                top: low.y,\n                left: low.x,\n                bottom: high.y,\n                right: high.x\n            };\n        };\n        /**\n         * Returns an auto generated schema based on data structure.\n         * @memberof canvasDataGrid\n         * @name getSchemaFromData\n         * @method\n         * @tutorial schema\n         * @returns {schema} schema A schema based on the first item in the data array.\n         */\n        self.getSchemaFromData = function () {\n            return Object.keys(self.data[0] || {' ': ''}).map(function mapEachSchemaColumn(key, index) {\n                var type = self.getBestGuessDataType(key),\n                    i = {\n                        name: key,\n                        title: key,\n                        width: self.style.columnWidth,\n                        index: index,\n                        type: type,\n                        filter: self.filter(type)\n                    };\n                if (key === self.uniqueId) {\n                    i.hidden = true;\n                }\n                i[self.uniqueId] = self.getSchemaNameHash(key);\n                return i;\n            });\n        };\n        /**\n         * Clears the change log grid.changes that keeps track of changes to the data set.\n         * This does not undo changes or alter data it is simply a convince array to keep\n         * track of changes made to the data since last this method was called.\n         * @memberof canvasDataGrid\n         * @name clearChangeLog\n         * @method\n         */\n        self.clearChangeLog = function () {\n            self.changes = [];\n        };\n        /**\n         * Selects an area of the grid.\n         * @memberof canvasDataGrid\n         * @name selectArea\n         * @method\n         * @param {rect} bounds A rect object representing the selected values.\n         */\n        self.selectArea = function (bounds, ctrl) {\n            self.selectionBounds = bounds || self.selectionBounds;\n            var x, y, s = self.getSchema();\n            if (!ctrl) {\n                self.selections = [];\n            }\n            if (self.selectionBounds.top < -1\n                    || self.selectionBounds.bottom > self.data.length\n                    || self.selectionBounds.left < -1\n                    || self.selectionBounds.right > s.length) {\n                throw new Error('Impossible selection area');\n            }\n            for (x = self.selectionBounds.top; x <= self.selectionBounds.bottom; x += 1) {\n                self.selections[x] = [];\n                for (y = self.selectionBounds.left; y <= self.selectionBounds.right; y += 1) {\n                    if (self.selections[x].indexOf(y) === -1) {\n                        self.selections[x].push(y);\n                    }\n                }\n            }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Returns the maximum text width for a given column by column name.\n         * @memberof canvasDataGrid\n         * @name findColumnMaxTextLength\n         * @method\n         * @returns {number} The number of pixels wide the maximum width value in the selected column.\n         * @param {string} name The name of the column to calculate the value's width of.\n         */\n        self.findColumnMaxTextLength = function (name) {\n            var m = -Infinity;\n            if (name === 'cornerCell') {\n                self.ctx.font = self.style.rowHeaderCellFont;\n                return self.ctx.measureText((self.data.length + (self.attributes.showNewRow ? 1 : 0)).toString()).width\n                    + self.style.autosizePadding + self.style.autosizeHeaderCellPadding\n                    + self.style.rowHeaderCellPaddingRight\n                    + self.style.rowHeaderCellPaddingLeft\n                    + (self.attributes.tree ? self.style.treeArrowWidth\n                        + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight : 0);\n            }\n            self.getSchema().forEach(function (col) {\n                if (col.name !== name) { return; }\n                self.ctx.font = self.style.headerCellFont;\n                var t = self.ctx.measureText(col.title || col.name).width\n                    + self.style.headerCellPaddingRight\n                    + self.style.headerCellPaddingLeft;\n                m = t > m ? t : m;\n            });\n            self.data.forEach(function (row) {\n                self.ctx.font = self.style.cellFont;\n                var t = self.ctx.measureText(row[name]).width\n                    + self.style.cellPaddingRight\n                    + self.style.cellPaddingLeft + self.style.cellAutoResizePadding;\n                m = t > m ? t : m;\n            });\n            return m;\n        };\n        /**\n         * Gets the total width of all header columns.\n         * @memberof canvasDataGrid\n         * @name getHeaderWidth\n         * @method\n         */\n        self.getHeaderWidth = function () {\n            return self.getVisibleSchema().reduce(function (total, header) {\n                return total + header.width;\n            }, 0);\n        };\n        self.formatters.string = function cellFormatterString(e) {\n            return e.cell.value !== undefined ? e.cell.value : '';\n        };\n        self.formatters.rowHeaderCell = self.formatters.string;\n        self.formatters.headerCell = self.formatters.string;\n        self.formatters.number = self.formatters.string;\n        self.formatters.int = self.formatters.string;\n        self.formatters.html = self.formatters.string;\n        self.sorters.string = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (a[columnName] === undefined || a[columnName] === null) {\n                    return 1;\n                }\n                if (b[columnName] === undefined || b[columnName] === null) {\n                    return 0;\n                }\n                if (asc) {\n                    if (!a[columnName].localeCompare) { return 1; }\n                    return a[columnName].localeCompare(b[columnName]);\n                }\n                if (!b[columnName].localeCompare) { return 1; }\n                return b[columnName].localeCompare(a[columnName]);\n            };\n        };\n        self.sorters.number = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return a[columnName] - b[columnName];\n                }\n                return b[columnName] - a[columnName];\n            };\n        };\n        self.sorters.date = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return new Date(a[columnName]).getTime()\n                        - new Date(b[columnName]).getTime();\n                }\n                return new Date(b[columnName]).getTime()\n                        - new Date(a[columnName]).getTime();\n            };\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/publicMethods.js\n// module id = 7\n// module chunks = 0"],"sourceRoot":""}