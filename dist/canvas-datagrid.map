{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///canvas-datagrid.js","webpack:///webpack/bootstrap 9b9fdb62f0a8b5d4ea1d","webpack:///./lib/defaults.js","webpack:///./lib/main.js","webpack:///./lib/component.js","webpack:///./lib/draw.js","webpack:///./lib/events.js","webpack:///./lib/touch.js","webpack:///./lib/intf.js","webpack:///./lib/contextMenu.js","webpack:///./lib/dom.js","webpack:///./lib/publicMethods.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","undefined","self","defaults","attributes","styles","apply","context","component","Grid","args","isComponent","isChildGrid","parentNode","test","nodeType","intf","eval","document","createElement","applyComponentStyle","createGrid","forEach","shadowRoot","createShadowRoot","attachShadow","mode","init","Array","slice","arguments","window","HTMLElement","create","customElements","observedAttributes","getObservableAttributes","disconnectedCallback","attributeChangedCallback","connectedCallback","adoptedCallback","canvasDatagrid","require","tKeys","body","keys","argKey","appendChild","indexOf","tKey","sKey","hyphenateProperty","prop","cust","char","toUpperCase","toLowerCase","getDefaultItem","base","item","filter","typeMap","supressChangeAndDrawEvents","cStyle","getComputedStyle","tagName","canvas","defs","computedStyle","def","val","getPropertyValue","setStyleProperty","replace","requestAnimationFrame","resize","dispatchEvent","style","data","strData","JSON","parse","e","Error","schema","strSchema","number","strNum","parseInt","isNaN","boolean","strBool","string","str","attrs","attr","push","connected","observe","attrName","oldVal","newVal","tfn","addEventListener","observer","MutationObserver","mutations","checkInnerHTML","checkStyle","mutation","attributeName","target","nodeName","addedNodes","length","type","innerHTML","characterData","childList","subtree","querySelectorAll","el","drawPerfLine","w","h","x","y","perfArr","arrIndex","max","color","useAbs","r","canvasOffsetLeft","canvasOffsetTop","ctx","beginPath","moveTo","cx","cy","Math","abs","lineTo","strokeStyle","stroke","drawOnAllImagesLoaded","loaded","htmlImageCache","html","complete","draw","drawHtml","cell","img","v","formattedValue","height","width","drawImage","Image","onload","src","btoa","drawOrderByArrow","mt","columnHeaderOrderByArrowMarginTop","scale","ml","columnHeaderOrderByArrowMarginLeft","mr","columnHeaderOrderByArrowMarginRight","aw","columnHeaderOrderByArrowWidth","ah","columnHeaderOrderByArrowHeight","fillStyle","columnHeaderOrderByArrowColor","columnHeaderOrderByArrowBorderColor","orderDirection","fill","drawTreeArrow","treeArrowMarginTop","treeArrowMarginRight","treeArrowMarginLeft","treeArrowWidth","treeArrowHeight","treeArrowColor","treeArrowBorderColor","openChildren","uniqueId","radiusRect","radius","b","quadraticCurveTo","fillRect","strokeRect","fillText","text","fillCircle","arc","PI","strokeCircle","clipFrozenArea","lastFrozenColumnPixel","lastFrozenRowPixel","clip","fillHandle","selectionHandleType","strokeHandle","addselectionHandle","pos","hw","selectionHandleSize","tr","br","tl","bl","addBorderLine","t","addEllipsis","ellipsisCache","measureText","value","drawText","paddingLeft","paddingTop","paddingRight","paddingBottom","vPos","hPos","orderByArrowWidth","fontHeight","horizontalAlignment","verticalAlignment","getFrozenColumnsWidth","column","getVisibleSchema","min","frozenColumn","orders","columns","sizes","cellWidth","perfCounters","drawCount","perfWindowSize","entityCount","scrollDebugCounters","touchPPSCounters","internal","createHandlesOverlayArray","allowMovingSelection","mobile","selectionBorderTop","selectionBorderRight","selectionHandles","selectionHandle","selectionBorderLeft","selectionBorderBottom","selectionHandleBehavior","createBorderOverlayArray","drawArray","propPrefix","offsetPoint","selectionBorder","isRowHeader","selections","rowIndex","columnIndex","isHeader","drawCell","rowOrderIndex","header","headerIndex","columnOrderIndex","cellGridAttributes","cellStyle","isCorner","isColumnHeader","selected","hovered","hovers","active","activeCell","isGrid","activeHeader","rows","f","formatters","orderByArrowSize","treeArrowSize","ev","row","cellBorderWidth","visibleRows","offsetTop","offsetLeft","scrollTop","scrollBox","scrollLeft","cellHeight","offsetWidth","offsetHeight","offsetParent","isHeaderCellCap","rowOpen","sortColumnIndex","sortRowIndex","isNormal","gridId","parentGrid","title","userHeight","rowHeight","userWidth","cornerCell","visibleCells","unshift","lineWidth","cellHeightWithChildGrid","checkScrollHeight","cellWidthWithChildGrid","rd","save","tree","showRowNumbers","childGrids","saveAppearance","cellGridHeight","grid","visible","orderBy","font","console","warn","toString","columnFilters","filterTextPrefix","aCell","selectionBorders","movingSelection","moveBorders","moveOffset","restore","bc","drawRowHeader","rowData","index","a","showRowHeaders","rowHeaderCell","rowHeaderCellWidth","drawRow","treeHeight","rowSansTreeHeight","g","trees","allowFreezingColumns","frozenColumnWidths","scrollIndexLeft","scrollIndexRight","scrollPixelRight","scrollPixelLeft","treeGrid","scrollBarWidth","rowHeaders","visibleRowHeights","gridBorderCollapse","u","currentCell","columnHeaderCellHeight","getColumnHeaderCellHeight","getRowHeaderCellWidth","performance","now","createRowOrders","gridBackgroundColor","ln","frozenRow","allowFreezingRows","frozenMarkerBorderWidth","frozenMarkerWidth","snapToRow","scrollPixelTop","scrollIndexTop","scrollIndexBottom","scrollPixelBottom","showNewRow","newRow","cl","selectionMode","activeCellOverlayBorderWidth","activeCellOverlayBorderColor","getHeaderWidth","drawHeaderColumnRange","start","end","order","columnHeaderCell","nonFrozenHeaderWidth","rArgs","rhIndex","showColumnHeaders","columnHeaderCellBorderWidth","isHeaderCell","endCap","my","mx","xHover","yHover","frozenMarkerHoverColor","frozenMarkerColor","frozenMarkerHoverBorderColor","frozenMarkerBorderColor","freezeMarkerPosition","frozenMarkerActiveColor","frozenMarkerActiveBorderColor","dragMode","dsb","selectionOverlayBorderWidth","selectionOverlayBorderColor","selectionHandleBorderWidth","selectionHandleBorderColor","selectionHandleColor","az","touchSelectHandleZone","ax","ay","reorderObject","dragOffset","reorderMarkerBackgroundColor","reorderMarkerBorderWidth","reorderMarkerBorderColor","reorderMarkerIndexBorderWidth","reorderMarkerIndexBorderColor","reorderTarget","moveOverlayBorderWidth","moveOverlayBorderColor","setLineDash","moveOverlayBorderSegments","drawCorner","en","entities","scrollBarBoxMargin","scrollBarBorderColor","scrollBarBorderWidth","horizontalBox","horizontalBar","scrollBoxWidth","scrollWidth","verticalBox","verticalBar","scrollBoxHeight","scrollHeight","horizontalBarVisible","scrollBarBackgroundColor","scrollBarBoxColor","scrollBarActiveColor","scrollBarBoxBorderRadius","verticalBarVisible","scrollBarCornerBorderColor","scrollBarCornerBackgroundColor","corner","gridBorderWidth","gridBorderColor","showPerformance","debug","fillArray","pop","perf","reduce","toFixed","htmlImages","startScale","scaleDelta","zoomDeltaStart","touchLength","touches","touchPosition","touchPosition1","scrollIndex","scrollPixel","canvasOffset","touchDelta","touchAnimateTo","scrollAnimation","touchPPS","xPPS","yPPS","touchPPST","xPPST","yPPST","touchDuration","pointerLockPosition","size","mouse","touch","touchStart","hasFocus","dragContext","textAlign","key","dpl","pw","ph","px","py","wheeling","stopPropagation","fn","events","removeEventListener","sfn","idx","splice","preventDefault","defaultPrevented","getRatio","maxPixelRatio","devicePixelRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","backingStorePixelRatio","drawAfterResize","setCanvasSize","dims","dataHeight","cellBorder","dataWidth","dim","parentNodeStyle","vb","nb","co","isScrollBoxCorner","sbw","ratio","bm","columnHeaderCellBorder","ch","scrollCache","accumulator","va","hidden","top","left","widthBoxRatio","heightBoxRatio","scrollBarBoxMinSize","scrollBarBoxWidth","bar","box","page","pageUpDownOverlap","resizeEditInput","scroll","dontDraw","mousemove","overridePos","contextMenu","input","getLayerPos","dragBounds","sBounds","delta","ctrl","ctrlKey","metaKey","persistantSelectionMode","vs","getCellAt","NativeEvent","previousCell","clearTimeout","scrollTimer","isInGrid","rowBoundaryCrossed","columnBoundaryCrossed","cellBoundaryCrossed","prefix","draggingItem","scrollModes","dragItem","cursor","selecting","getSelectionBounds","dragStart","dragStartObject","shiftKey","bottom","right","ignoreNextClick","dragAddToSelection","selectRow","selectionBounds","selectArea","autoScrollZone","click","checkSelectionChange","selectedData","getSelectedData","endEdit","setActiveCell","selectAll","columnHeaderClickBehavior","selectColumn","treeArrowClickRadius","toggleTree","dragResizeColumn","resizingStartingWidth","resizingStartingHeight","minColumnWidth","minRowHeight","resizeScrollZone","resizeChildGrids","globalRowResize","stopDragResize","setStorageData","scrollGrid","scrollPointerLock","scrollStartMode","movementX","movementY","scrollMode","scrollStart","setTimeout","scrollRepeatRate","selectionScrollIncrement","stopScrollGrid","exitPointerLock","dragReorder","allowColumnReordering","allowRowReordering","source","reorderDeadZone","stopDragReorder","oIndex","tIndex","cr","row-reorder","column-reorder","dragMove","stopDragMove","moveSelection","freezeMove","stopFreezeMove","startFreezeMove","mousedown","lastMouseDownTarget","button","move","freeze","requestPointerLock","concat","dragging","mouseup","controlInput","focus","keydown","last","cols","keyCode","beginEditAt","scrollIntoView","selectionFollowsActiveCell","keyup","keypress","dblclick","fitColumnToValues","autosize","scrollWheel","deltaX","deltaY","deltaMode","touchHaltAnimation","scrollTo","pasteItem","clipData","mimeType","normalizeRowData","importingRow","existingRow","offsetX","isArray","map","colKey","substring","split","sel","cellData","colIndex","cName","yi","paste","clipboardData","items","dti","getAsString","cut","copy","forEachSelectedCell","colName","fCopyCell","trows","sData","rt","join","setData","stringify","touchScrollTimeout","animationFrames","getTouchPos","touchIndex","rect","getBoundingClientRect","clientX","clientY","easingFunctions","linear","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easing","touchEasingMethod","calculatePPSTimed","touchSigmaTimed","calculatePPS","touchSigma","touchEndAnimation","touchReleaseAnimationDurationMs","stopAnimation","touchEditCell","touchCell","clearInterval","calculatePPSTimer","touchDeadZone","touchingCell","editCell","touchstart","changedTouches","startingCell","disposeContextMenu","touchContextTimeout","touchStartEvent","zoomAltered","touchStart1","touchScrollStart","contextmenuEvent","touchContextMenuTimeMs","setInterval","touchEndEvents","touchmove","passive","touchend","touchcancel","touchSelect","handleType","touchSelecting","bounds","getSchema","touchScroll","rScrollZone","bScrollZone","tScrollZone","lScrollZone","rw","t1","t2","touchZoomSensitivity","touchZoomMin","touchZoomMax","selectionScrollZone","dz","touchReleaseAcceleration","scrollAnimationPPSThreshold","ctor","treeGridAttributes","storageName","invalidSearchExpClass","localStyleLibraryStorageKey","filters","currentFilter","sorters","schemaHashes","uId","changes","componentL1Events","eventNames","expandToRow","col","orderedIndex","low","high","step","visibility","localStorage","setItem","tempSchema","createColumnOrders","applyDefaultValue","defaultValue","createNewRowData","getSchemaNameHash","getBestGuessDataType","columnName","drawChildGrids","gridKey","setTimer","refreshFromOrigialData","originalData","validateColumn","setDefaults","obj1","obj2","setAttributes","setStyle","dispose","removeChild","eventParent","contextmenu","disconnect","tryLoadStoredSettings","reloadStoredValues","storedSettings","getHeaderByName","getDomRoot","host","getFontName","fontStyle","getFontHeight","parseFloat","parseStyleValue","initProp","propName","getStyleProperty","styleKeys","supressDrawAndEvent","isDim","getItem","initialized","publicStyleKeyIntf","initScrollBox","setDom","ie","navigator","userAgent","edge","webKit","moz","cursorGrab","cursorGrabing","cursorGrabbing","appendTo","clearChangeLog","gotoCell","gotoRow","findColumnScrollLeft","findRowScrollTop","findColumnMaxTextLength","isCellVisible","clipElement","getSchemaFromData","setFilter","expandTree","collapseTree","insertRow","deleteRow","addRow","insertColumn","deleteColumn","addColumn","getClippingRect","setRowHeight","setColumnWidth","resetColumnWidths","resetRowHeights","selectNone","assertPxColor","clearPxColorAssertions","integerToAlpha","DOMStyles","set","valueObject","filterFor","String","filterRegExp","regEnd","pattern","exec","flags","flagLength","invalidFilterRegEx","RegExp","toLocaleUpperCase","innerText","textContent","blur","TypeError","currentCursor","find","normalizeDataset","callback","syncFnInvoked","0","eventName","RangeError","autoGenerateSchema","autoResizeColumns","setScrollTop","preventScrollEvent","setScrollLeft","sHeight","sWidth","supressDrawEvent","applyContextItemStyle","contextItemContainer","createInlineStyle","createContextMenu","parentContextMenu","createItems","removeChildContext","relatedTarget","container","childMenuArrow","contains","children","setAttribute","contextAddCallback","getAttribute","cPos","childContextMenuMarginLeft","childContextMenuMarginTop","createChildContext","addContent","content","childContextMenuArrowHTML","clickIndex","Event","checkArrowVisibility","parentDOMNode","upArrow","downArrow","startHoverScroll","contextHoverScrollAmount","hoverScrollTimeout","contextHoverScrollRateMs","endHoverScroll","selectedIndex","loc","scrollOffset","zIndexTop","contextMenuZIndex","position","contextMenuArrowColor","zIndex","inputDropdown","maxHeight","innerHeight","autocompleteBottomMargin","minWidth","contextMenuArrowUpHTML","contextMenuArrowDownHTML","contextMenuWindowMargin","innerWidth","isFinite","createFilterContextMenuItems","checkRegExpErrorState","filterInput","background","contextFilterInputBackground","contextFilterInputColor","contextFilterInvalidRegExpBackground","contextFilterInvalidRegExpColor","fillAutoComplete","count","autoCompleteItems","maxAutoCompleteItems","disposeAutocomplete","createAutoCompleteContext","iRect","autoCompleteContext","filterContainer","filterLabel","filterAutoCompleteButton","onclick","filterOptionText","contextFilterButtonHTML","cf","removeFilterOptionText","addDefaultContextMenuItem","isNormalCell","isBackground","isScrollBar","showFilter","showCopy","copyText","execCommand","showPaste","clipBoardData","pasteText","showColumnSelector","columnSelectorText","toggleColumnVisibility","columnSelectorHiddenText","columnSelectorVisibleText","hideColumnText","showClearSettingsOption","clearSettingsOptionText","columnWidth","allowSorting","showOrderByOption","showOrderByOptionTextAsc","showOrderByOptionTextDesc","createDiposeEvent","contextPosition","contextMenuMarginLeft","contextMenuMarginTop","mobileContextMenuMargin","ele","boundingRect","eleRect","clipRect","parentRect","Infinity","scrollingElement","borderWidth","getVisibleCellByIndex","mobileEditInputHeight","cellPaddingLeft","ignoreScrollOffset","abort","abortEdit","newValue","oldValue","aborted","editable","enumItems","enu","option","valueInEnum","multiLine","editCellZIndex","fontSize","editCellFontSize","nx","ny","className","css","canvas-datagrid-context-menu-filter-input","verticalAlign","marginLeft","padding","border","contextFilterInputBorder","borderRadius","contextFilterInputBorderRadius","lineHeight","fontWeight","fontFamily","contextFilterInputFontFamily","contextFilterInputFontSize","canvas-datagrid-context-menu-filter-button","contextMenuBackground","contextMenuColor","contextFilterButtonBorder","contextFilterButtonBorderRadius","contextMenuFilterButtonFontFamily","contextMenuFilterButtonFontSize","canvas-datagrid-context-child-arrow","cssFloat","childContextMenuArrowColor","contextMenuChildArrowFontSize","contextMenuFontFamily","canvas-datagrid-autocomplete","contextMenuFontSize","contextMenuBorder","contextMenuPadding","contextMenuBorderRadius","opacity","contextMenuOpacity","overflow","canvas-datagrid-autocomplete-item","canvas-datagrid-autocomplete-item:hover","contextMenuHoverBackground","contextMenuHoverColor","canvas-datagrid-canvas","canvas-datagrid","display","canvas-datagrid-control-input","canvas-datagrid-edit-mobile-input","boxSizing","outline","margin","mobileEditFontFamily","mobileEditFontSize","editCellBorder","editCellColor","editCellBackgroundColor","appearance","webkitAppearance","mozAppearance","canvas-datagrid-edit-input","editCellPaddingLeft","editCellFontFamily","boxShadow","editCellBoxShadow","canvas-datagrid-context-menu-item-mobile","contextMenuItemMargin","contextMenuItemBorderRadius","canvas-datagrid-context-menu-item","canvas-datagrid-context-menu-item:hover","canvas-datagrid-context-menu-label","contextMenuLabelMargin","contextMenuLabelDisplay","contextMenuLabelMinWidth","maxWidth","contextMenuLabelMaxWidth","canvas-datagrid-context-menu-mobile","whiteSpace","canvas-datagrid-context-menu","canvas-datagrid-invalid-search-regExp","contextMenuFilterInvalidExpresion","onblur","parentIsCanvas","getContext","textBaseline","ordA","charCodeAt","ordZ","len","fromCharCode","floor","applyFilter","isColumnSelected","colIsSelected","shift","supressEvent","addCol","ri","st","dragObject","rowId","childGrid","trArgs","treeGridHeight","direction","sortFunction","dontSetStorageData","sort","offsetY","xi","cidx","isColumnVisible","isRowVisible","useTouchScrollZones","moveBorder","entitiy","tsz","touchScrollZone","moveMode","borderDragBehavior","xBorderBehavior","yBorderBehavior","isVerticalScrollBar","isHorizontalScrollBar","borderResizeZone","allowColumnResize","allowColumnResizeFromCell","allowRowHeaderResize","allowRowResize","allowRowResizeFromCell","rowGrabZoneSize","maxCol","minCol"," ","rowHeaderCellFont","autosizePadding","autosizeHeaderCellPadding","rowHeaderCellPaddingRight","rowHeaderCellPaddingLeft","columnHeaderCellFont","headerCellPaddingRight","headerCellPaddingLeft","cellFont","cellPaddingRight","cellAutoResizePadding","total","headerCell","int","asc","localeCompare","date","Date","getTime"],"mappings":"CAAA,SAAAA,EAAAC,GACA,gBAAAC,UAAA,gBAAAC,QACAA,OAAAD,QAAAD,IACA,kBAAAG,gBAAAC,IACAD,UAAAH,GACA,gBAAAC,SACAA,QAAA,eAAAD,IAEAD,EAAA,eAAAC,KACCK,KAAA,WACD,MCAgB,UAAUC,GCN1B,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAP,OAGA,IAAAC,GAAAO,EAAAD,IACAE,EAAAF,EACAG,GAAA,EACAV,WAUA,OANAK,GAAAE,GAAAI,KAAAV,EAAAD,QAAAC,IAAAD,QAAAM,GAGAL,EAAAS,GAAA,EAGAT,EAAAD,QAvBA,GAAAQ,KA4DA,OAhCAF,GAAAM,EAAAP,EAGAC,EAAAO,EAAAL,EAGAF,EAAAQ,EAAA,SAAAd,EAAAe,EAAAC,GACAV,EAAAW,EAAAjB,EAAAe,IACAG,OAAAC,eAAAnB,EAAAe,GACAK,cAAA,EACAC,YAAA,EACAC,IAAAN,KAMAV,EAAAiB,EAAA,SAAAtB,GACA,GAAAe,GAAAf,KAAAuB,WACA,WAA2B,MAAAvB,GAAA,SAC3B,WAAiC,MAAAA,GAEjC,OADAK,GAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAQ,EAAAC,GAAsD,MAAAR,QAAAS,UAAAC,eAAAjB,KAAAc,EAAAC,IAGtDpB,EAAAuB,EAAA,GAGAvB,IAAAwB,EAAA,KDgBM,SAAU7B,EAAQD,EAASM,GE7EjC,GAAAyB,GAAAC,CAEAD,UA0RCE,MA1RDD,EAAA,WACA,YACA,iBAAAE,GACAA,EAAAC,UACAC,aACA,6BACA,yBACA,iCACA,yBACA,4BACA,4BACA,4BACA,0BACA,sBACA,8BACA,oBACA,0BACA,yBACA,8BACA,wBACA,mDACA,qCACA,kDACA,4CACA,kCACA,+BACA,+BACA,oBACA,aACA,gBACA,iCACA,mCACA,uBACA,6BACA,6BACA,iBACA,YACA,wBACA,sBACA,+BACA,iDACA,sBACA,wBACA,sBACA,sBACA,oCACA,yBACA,wBACA,kCACA,mCACA,yBACA,gCACA,2BACA,+BACA,yBACA,0BACA,gBACA,kBACA,kBACA,yBACA,qDACA,uDACA,iBACA,uBACA,sBACA,sBACA,iBACA,+BACA,oBACA,oCACA,iCACA,wCACA,uBACA,6BACA,8BACA,oBACA,sBACA,oBACA,YACA,4BAEAC,SACA,uDACA,mDACA,4BACA,uCACA,qCACA,4DACA,4CACA,yDACA,mCACA,8BACA,4BACA,6BACA,2BACA,+DACA,+CACA,mEACA,mDACA,gEACA,gDACA,gCACA,gCACA,sBACA,6BACA,iDACA,6CACA,sBACA,iCACA,+BACA,uBACA,kBACA,gCACA,mCACA,sDACA,sCACA,wBACA,sBACA,uBACA,qBACA,yDACA,yCACA,mCACA,kBACA,+BACA,qDACA,yCACA,mCACA,iCACA,6DACA,yDACA,kCACA,gDACA,2CACA,8BACA,+CACA,kEACA,kDACA,oCACA,kCACA,mCACA,iCACA,+CACA,iEACA,0CACA,2DACA,qCACA,yCACA,0CACA,wCACA,qCACA,iEACA,0CACA,uCACA,uDACA,gEACA,uCACA,4CACA,8CACA,sCACA,8DACA,6DACA,gDACA,wCACA,sCACA,mDACA,yDACA,kCACA,yCACA,2CACA,mDACA,2CACA,+DACA,uCACA,+BACA,wDACA,iDACA,sCACA,gCACA,2CACA,uCACA,qCACA,oCACA,4BACA,4BACA,8BACA,6BACA,gCACA,0BACA,uDACA,mDACA,2BACA,oCACA,sDACA,kDACA,0BACA,oCACA,4BACA,0BACA,uBACA,oDACA,0DACA,qDACA,2DACA,+CACA,qDACA,8BACA,wBACA,iDACA,kCACA,6CACA,sBACA,kBACA,wBACA,uBACA,sBACA,wBACA,oBACA,uBACA,+BACA,6BACA,sCACA,8BACA,6BACA,mDACA,sCACA,mBACA,sDACA,kDACA,kCACA,0DACA,uCACA,0DACA,sDACA,+BACA,6CACA,wCACA,2BACA,4CACA,+DACA,+CACA,iCACA,+BACA,gCACA,8BACA,kEACA,qDACA,4CACA,0BACA,kDACA,sDACA,kDACA,4BACA,mCACA,+CACA,yBACA,2BACA,wBACA,4DACA,wDA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","file":"canvas-datagrid.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"canvasDatagrid\"] = factory();\n\telse\n\t\troot[\"canvasDatagrid\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"canvasDatagrid\"] = factory();\n\telse\n\t\troot[\"canvasDatagrid\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 1);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        self.defaults = {\n            attributes: [\n                ['allowColumnReordering', true],\n                ['allowColumnResize', true],\n                ['allowColumnResizeFromCell', false],\n                ['allowFreezingRows', false],\n                ['allowFreezingColumns', false],\n                ['allowMovingSelection', true],\n                ['allowRowHeaderResize', true],\n                ['allowRowReordering', false],\n                ['allowRowResize', true],\n                ['allowRowResizeFromCell', false],\n                ['allowSorting', true],\n                ['autoGenerateSchema', false],\n                ['autoResizeColumns', false],\n                ['borderDragBehavior', 'none'],\n                ['borderResizeZone', 10],\n                ['clearSettingsOptionText', 'Clear saved settings'],\n                ['columnHeaderClickBehavior', 'sort'],\n                ['columnSelectorHiddenText', '&nbsp;&nbsp;&nbsp;'],\n                ['columnSelectorText', 'Add/Remove columns'],\n                ['columnSelectorVisibleText', '\\u2713'],\n                ['contextHoverScrollAmount', 2],\n                ['contextHoverScrollRateMs', 5],\n                ['copyText', 'Copy'],\n                ['debug', false],\n                ['editable', true],\n                ['filterOptionText', 'Filter %s'],\n                ['filterTextPrefix', '(filtered) '],\n                ['globalRowResize', false],\n                ['hideColumnText', 'Hide %s'],\n                ['maxAutoCompleteItems', 200],\n                ['multiLine', false],\n                ['name', ''],\n                ['pageUpDownOverlap', 1],\n                ['pasteText', 'Paste'],\n                ['persistantSelectionMode', false],\n                ['removeFilterOptionText', 'Remove filter on %s'],\n                ['reorderDeadZone', 3],\n                ['resizeScrollZone', 20],\n                ['rowGrabZoneSize', 5],\n                ['saveAppearance', true],\n                ['scrollAnimationPPSThreshold', 0.75],\n                ['scrollPointerLock', false],\n                ['scrollRepeatRate', 75],\n                ['selectionFollowsActiveCell', false],\n                ['selectionHandleBehavior', 'none'],\n                ['selectionMode', 'cell'],\n                ['selectionScrollIncrement', 20],\n                ['selectionScrollZone', 20],\n                ['showClearSettingsOption', true],\n                ['showColumnHeaders', true],\n                ['showColumnSelector', true],\n                ['showCopy', true],\n                ['showFilter', true],\n                ['showNewRow', false],\n                ['showOrderByOption', true],\n                ['showOrderByOptionTextAsc', 'Order by %s ascending'],\n                ['showOrderByOptionTextDesc', 'Order by %s descending'],\n                ['showPaste', false],\n                ['showPerformance', false],\n                ['showRowHeaders', true],\n                ['showRowNumbers', true],\n                ['snapToRow', false],\n                ['touchContextMenuTimeMs', 800],\n                ['touchDeadZone', 3],\n                ['touchEasingMethod', 'easeOutQuad'],\n                ['touchReleaseAcceleration', 1000],\n                ['touchReleaseAnimationDurationMs', 2000],\n                ['touchScrollZone', 20],\n                ['touchSelectHandleZone', 20],\n                ['touchZoomSensitivity', 0.005],\n                ['touchZoomMin', 0.5],\n                ['touchZoomMax', 1.75],\n                ['maxPixelRatio', 1],\n                ['tree', false],\n                ['treeHorizontalScroll', false]\n            ],\n            styles: [\n                ['activeCellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['activeCellBorderWidth', 1],\n                ['activeCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellFont', '16px sans-serif'],\n                ['activeCellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['activeCellOverlayBorderWidth', 1],\n                ['activeCellPaddingBottom', 5],\n                ['activeCellPaddingLeft', 5],\n                ['activeCellPaddingRight', 7],\n                ['activeCellPaddingTop', 5],\n                ['activeCellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['activeCellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['activeColumnHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeColumnHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeRowHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeRowHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['autocompleteBottomMargin', 60],\n                ['autosizeHeaderCellPadding', 8],\n                ['autosizePadding', 5],\n                ['cellAutoResizePadding', 13],\n                ['cellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['cellBorderWidth', 1],\n                ['cellColor', 'rgba(0, 0, 0, 1)'],\n                ['cellFont', '16px sans-serif'],\n                ['cellGridHeight', 250],\n                ['cellHeight', 24],\n                ['cellHeightWithChildGrid', 150],\n                ['cellHorizontalAlignment', 'left'],\n                ['cellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['cellPaddingBottom', 5],\n                ['cellPaddingLeft', 5],\n                ['cellPaddingRight', 7],\n                ['cellPaddingTop', 5],\n                ['cellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['cellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['cellVerticalAlignment', 'center'],\n                ['cellWidth', 250],\n                ['cellWidthWithChildGrid', 250],\n                ['childContextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['childContextMenuArrowHTML', '&#x25BA;'],\n                ['childContextMenuMarginLeft', -11],\n                ['childContextMenuMarginTop', -6],\n                ['columnHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellBorderColor', 'rgba(172, 172, 172, 1)'],\n                ['columnHeaderCellBorderWidth', 1],\n                ['columnHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['columnHeaderCellFont', '16px sans-serif'],\n                ['columnHeaderCellHeight', 25],\n                ['columnHeaderCellHorizontalAlignment', 'left'],\n                ['columnHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['columnHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['columnHeaderCellPaddingBottom', 5],\n                ['columnHeaderCellPaddingLeft', 5],\n                ['columnHeaderCellPaddingRight', 7],\n                ['columnHeaderCellPaddingTop', 5],\n                ['columnHeaderCellVerticalAlignment', 'center'],\n                ['columnHeaderOrderByArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['columnHeaderOrderByArrowBorderWidth', 1],\n                ['columnHeaderOrderByArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['columnHeaderOrderByArrowHeight', 8],\n                ['columnHeaderOrderByArrowMarginLeft', 0],\n                ['columnHeaderOrderByArrowMarginRight', 5],\n                ['columnHeaderOrderByArrowMarginTop', 6],\n                ['columnHeaderOrderByArrowWidth', 13],\n                ['contextFilterButtonBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterButtonBorderRadius', '3px'],\n                ['contextFilterButtonHTML', '&#x25BC;'],\n                ['contextFilterInputBackground', 'rgba(255,255,255,1)'],\n                ['contextFilterInputBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterInputBorderRadius', '0'],\n                ['contextFilterInputColor', 'rgba(0,0,0,1)'],\n                ['contextFilterInputFontFamily', 'sans-serif'],\n                ['contextFilterInputFontSize', '14px'],\n                ['contextFilterInvalidRegExpBackground', 'rgba(180, 6, 1, 1)'],\n                ['contextFilterInvalidRegExpColor', 'rgba(255, 255, 255, 1)'],\n                ['contextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuArrowDownHTML', '&#x25BC;'],\n                ['contextMenuArrowUpHTML', '&#x25B2;'],\n                ['contextMenuBackground', 'rgba(240, 240, 240, 1)'],\n                ['contextMenuBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextMenuBorderRadius', '3px'],\n                ['contextMenuChildArrowFontSize', '12px'],\n                ['contextMenuColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuFilterButtonFontFamily', 'sans-serif'],\n                ['contextMenuFilterButtonFontSize', '10px'],\n                ['contextMenuFilterInvalidExpresion', 'rgba(237, 155, 156, 1)'],\n                ['contextMenuFontFamily', 'sans-serif'],\n                ['contextMenuFontSize', '16px'],\n                ['contextMenuHoverBackground', 'rgba(182, 205, 250, 1)'],\n                ['contextMenuHoverColor', 'rgba(43, 48, 153, 1)'],\n                ['contextMenuItemBorderRadius', '3px'],\n                ['contextMenuItemMargin', '2px'],\n                ['contextMenuLabelDisplay', 'inline-block'],\n                ['contextMenuLabelMargin', '0 3px 0 0'],\n                ['contextMenuLabelMaxWidth', '700px'],\n                ['contextMenuLabelMinWidth', '75px'],\n                ['contextMenuMarginLeft', 3],\n                ['contextMenuMarginTop', -3],\n                ['contextMenuOpacity', '0.98'],\n                ['contextMenuPadding', '2px'],\n                ['contextMenuWindowMargin', 100],\n                ['contextMenuZIndex', 10000],\n                ['cornerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cornerCellBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['display', 'inline-block'],\n                ['editCellBackgroundColor', 'white'],\n                ['editCellBorder', 'solid 1px rgba(110, 168, 255, 1)'],\n                ['editCellBoxShadow', '0 2px 5px rgba(0,0,0,0.4)'],\n                ['editCellColor', 'black'],\n                ['editCellFontFamily', 'sans-serif'],\n                ['editCellFontSize', '16px'],\n                ['editCellPaddingLeft', 4],\n                ['editCellZIndex', 10000],\n                ['frozenMarkerHoverColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerHoverBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerActiveColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerActiveBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerColor', 'rgba(222, 222, 222, 1)'],\n                ['frozenMarkerBorderColor', 'rgba(168, 168, 168, 1)'],\n                ['frozenMarkerBorderWidth', 1],\n                ['frozenMarkerWidth', 2],\n                ['gridBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['gridBorderCollapse', 'collapse'],\n                ['gridBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['gridBorderWidth', 1],\n                ['height', 'auto'],\n                ['maxHeight', 'inherit'],\n                ['maxWidth', 'inherit'],\n                ['minColumnWidth', 45],\n                ['minHeight', 'inherit'],\n                ['minRowHeight', 24],\n                ['minWidth', 'inherit'],\n                ['mobileContextMenuMargin', 10],\n                ['mobileEditInputHeight', 30],\n                ['mobileEditFontFamily', 'sans-serif'],\n                ['mobileEditFontSize', '16px'],\n                ['moveOverlayBorderWidth', 1],\n                ['moveOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['moveOverlayBorderSegments', '12, 7'],\n                ['name', 'default'],\n                ['reorderMarkerBackgroundColor', 'rgba(0, 0, 0, 0.1)'],\n                ['reorderMarkerBorderColor', 'rgba(0, 0, 0, 0.2)'],\n                ['reorderMarkerBorderWidth', 1.25],\n                ['reorderMarkerIndexBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['reorderMarkerIndexBorderWidth', 2.75],\n                ['rowHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['rowHeaderCellBorderColor', 'rgba(200, 200, 200, 1)'],\n                ['rowHeaderCellBorderWidth', 1],\n                ['rowHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellFont', '16px sans-serif'],\n                ['rowHeaderCellHeight', 25],\n                ['rowHeaderCellHorizontalAlignment', 'left'],\n                ['rowHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['rowHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['rowHeaderCellPaddingBottom', 5],\n                ['rowHeaderCellPaddingLeft', 5],\n                ['rowHeaderCellPaddingRight', 5],\n                ['rowHeaderCellPaddingTop', 5],\n                ['rowHeaderCellSelectedBackgroundColor', 'rgba(217, 217, 217, 1)'],\n                ['rowHeaderCellSelectedColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellVerticalAlignment', 'center'],\n                ['rowHeaderCellWidth', 57],\n                ['scrollBarActiveColor', 'rgba(125, 125, 125, 1)'],\n                ['scrollBarBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarBorderWidth', 0.5],\n                ['scrollBarBoxBorderRadius', 4.125],\n                ['scrollBarBoxColor', 'rgba(192, 192, 192, 1)'],\n                ['scrollBarBoxMargin', 2],\n                ['scrollBarBoxMinSize', 15],\n                ['scrollBarBoxWidth', 8],\n                ['scrollBarCornerBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarCornerBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarWidth', 11],\n                ['selectionHandleBorderColor', 'rgba(255, 255, 255, 1)'],\n                ['selectionHandleBorderWidth', 1.5],\n                ['selectionHandleColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionHandleSize', 8],\n                ['selectionHandleType', 'square'],\n                ['selectionOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionOverlayBorderWidth', 1],\n                ['treeArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['treeArrowBorderWidth', 1],\n                ['treeArrowClickRadius', 5],\n                ['treeArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['treeArrowHeight', 8],\n                ['treeArrowMarginLeft', 0],\n                ['treeArrowMarginRight', 5],\n                ['treeArrowMarginTop', 6],\n                ['treeArrowWidth', 13],\n                ['treeGridHeight', 250],\n                ['width', 'auto']\n            ]\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, evil: true*/\n/*globals Reflect: false, HTMLElement: true, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n    __webpack_require__(2),\n    __webpack_require__(0),\n    __webpack_require__(3),\n    __webpack_require__(4),\n    __webpack_require__(5),\n    __webpack_require__(6),\n    __webpack_require__(7),\n    __webpack_require__(8),\n    __webpack_require__(9)\n], __WEBPACK_AMD_DEFINE_RESULT__ = function context(component) {\n    'use strict';\n    component = component();\n    var modules = Array.prototype.slice.call(arguments);\n    function Grid(args) {\n        args = args || {};\n        var self = {};\n        self.isComponent = args.component === undefined;\n        self.isChildGrid = args.parentNode && /canvas-datagrid-(cell|tree)/.test(args.parentNode.nodeType);\n        if (self.isChildGrid) {\n            self.intf = {};\n        } else {\n            self.intf = self.isComponent ? eval('Reflect.construct(HTMLElement, [], new.target)')\n                : document.createElement('canvas');\n        }\n        self.args = args;\n        self.intf.args = args;\n        self.applyComponentStyle = component.applyComponentStyle;\n        self.createGrid = function grid(args) {\n            args.component = false;\n            return new Grid(args);\n        };\n        modules.forEach(function (module) {\n            module(self);\n        });\n        if (self.isChildGrid) {\n            self.shadowRoot = args.parentNode.shadowRoot;\n            self.parentNode = args.parentNode;\n        } else if (self.intf.createShadowRoot) {\n            self.shadowRoot = self.intf.attachShadow({mode: 'open'});\n            self.parentNode = self.shadowRoot;\n        } else {\n            self.parentNode = self.intf;\n        }\n        self.init();\n        return self.intf;\n    }\n    if (window.HTMLElement) {\n        Grid.prototype = Object.create(window.HTMLElement.prototype);\n    }\n    // export web component\n    if (window.customElements) {\n        Grid.observedAttributes = component.getObservableAttributes();\n        Grid.prototype.disconnectedCallback = component.disconnectedCallback;\n        Grid.prototype.attributeChangedCallback = component.attributeChangedCallback;\n        Grid.prototype.connectedCallback = component.connectedCallback;\n        Grid.prototype.adoptedCallback = component.adoptedCallback;\n        window.customElements.define('canvas-datagrid', Grid);\n    }\n    // export global\n    if (window && !window.canvasDatagrid && !window.require) {\n        window.canvasDatagrid = function (args) { return new Grid(args); };\n    }\n    // export amd loader\n    module.exports = function grid(args) {\n        args = args || {};\n        var i, tKeys = ['style', 'schema', 'data', 'formatters',\n                    'sorters', 'filters', 'treeGridAttributes', 'cellGridAttributes'];\n        if (window.customElements && document.body.createShadowRoot) {\n            i = document.createElement('canvas-datagrid');\n            Object.keys(args).forEach(function (argKey) {\n                if (argKey === 'parentNode') {\n                    args.parentNode.appendChild(i);\n                    return;\n                }\n                // top level keys in args\n                if (tKeys.indexOf(argKey) !== -1) {\n                    tKeys.forEach(function (tKey) {\n                        if (args[tKey] === undefined || tKey !== argKey) { return; }\n                        if (['formatters', 'sorters', 'filters'].indexOf(argKey) !== -1) {\n                            if (typeof args[tKey] === 'object' && args[tKey] !== null) {\n                                Object.keys(args[tKey]).forEach(function (sKey) {\n                                    i[tKey][sKey] = args[tKey][sKey];\n                                });\n                            }\n                        } else {\n                            i[tKey] = args[tKey];\n                        }\n                    });\n                    return;\n                }\n                // all others are attribute level keys\n                i.attributes[argKey] = args[argKey];\n            });\n            return i;\n        }\n        args.component = false;\n        i = new Grid(args);\n        if (args.parentNode && args.parentNode.appendChild) {\n            args.parentNode.appendChild(i);\n        }\n        return i;\n    };\n    return module.exports;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_RESULT__ = function (defaults) {\n    'use strict';\n    return function () {\n        var typeMap, component = {};\n        function hyphenateProperty(prop, cust) {\n            var p = '';\n            Array.prototype.forEach.call(prop, function (char) {\n                if (char === char.toUpperCase()) {\n                    p += '-' + char.toLowerCase();\n                    return;\n                }\n                p += char;\n            });\n            return (cust ? '--cdg-' : '') + p;\n        }\n        function getDefaultItem(base, item) {\n            var i = {},\n                r;\n            defaults(i);\n            r = i.defaults[base].filter(function (i) {\n                return i[0].toLowerCase() === item.toLowerCase()\n                    || hyphenateProperty(i[0]) === item.toLowerCase()\n                    || hyphenateProperty(i[0], true) === item.toLowerCase();\n            })[0];\n            return r;\n        }\n        component.applyComponentStyle = function (supressChangeAndDrawEvents, intf) {\n            var cStyle = window.getComputedStyle(intf.tagName === 'CANVAS-DATAGRID' ? intf : intf.canvas, null),\n                defs = {};\n            intf.computedStyle = cStyle;\n            defaults(defs);\n            defs = defs.defaults.styles;\n            defs.forEach(function (def) {\n                var val;\n                val = cStyle.getPropertyValue(hyphenateProperty(def[0], true));\n                if (val === \"\") {\n                    val = cStyle.getPropertyValue(hyphenateProperty(def[0], false));\n                }\n                if (val !== \"\" && typeof val === 'string') {\n                    intf.setStyleProperty(def[0], typeMap[typeof def[1]](val\n                        .replace(/^\\s+/, '').replace(/\\s+$/, ''), def[1]));\n                }\n            });\n            requestAnimationFrame(function () { intf.resize(true); });\n            if (!supressChangeAndDrawEvents && intf.dispatchEvent) {\n                intf.dispatchEvent('stylechanged', intf.style);\n            }\n        };\n        typeMap = {\n            data: function (strData) {\n                try {\n                    return JSON.parse(strData);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid data.');\n                }\n            },\n            schema: function (strSchema) {\n                try {\n                    return JSON.parse(strSchema);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid schema attribute.');\n                }\n            },\n            number: function (strNum, def) {\n                var n = parseInt(strNum, 10);\n                return isNaN(n) ? def : n;\n            },\n            boolean: function (strBool) {\n                return (/true/i).test(strBool);\n            },\n            string: function (str) {\n                return str;\n            }\n        };\n        component.getObservableAttributes = function () {\n            var i = {}, attrs = ['data', 'schema', 'style', 'className', 'name'];\n            defaults(i);\n            i.defaults.attributes.forEach(function (attr) {\n                attrs.push(attr[0].toLowerCase());\n            });\n            return attrs;\n        };\n        component.disconnectedCallback = function () {\n            this.connected = false;\n        };\n        component.connectedCallback = function () {\n            var intf = this;\n            intf.connected = true;\n            component.observe(intf);\n            component.applyComponentStyle(true, intf);\n            intf.resize(true);\n        };\n        component.adoptedCallback = function () {\n            this.resize();\n        };\n        component.attributeChangedCallback = function (attrName, oldVal, newVal) {\n            var tfn, intf = this, def;\n            if (attrName === 'style') {\n                component.applyComponentStyle(false, intf);\n                return;\n            }\n            if (attrName === 'data') {\n                intf.args.data = typeMap.data(newVal);\n                return;\n            }\n            if (attrName === 'schema') {\n                intf.args.schema = typeMap.schema(newVal);\n                return;\n            }\n            if (attrName === 'name') {\n                intf.name = newVal;\n                return;\n            }\n            if (attrName === 'class' || attrName === 'className') {\n                return;\n            }\n            def = getDefaultItem('attributes', attrName);\n            if (def) {\n                tfn = typeMap[typeof def[1]];\n                intf.attributes[def[0]] = tfn(newVal);\n                return;\n            }\n            if (/^on/.test(attrName)) {\n                intf.addEventListener('on' + attrName, function (e) {\n                    eval(newVal);\n                });\n            }\n            return;\n        };\n        component.observe = function (intf) {\n            var observer;\n            if (!window.MutationObserver) { return; }\n            intf.applyComponentStyle = function () { component.applyComponentStyle(false, intf); intf.resize(); };\n            /**\n             * Applies the computed css styles to the grid.  In some browsers, changing directives in attached style sheets does not automatically update the styles in this component.  It is necessary to call this method to update in these cases.\n             * @memberof canvasDatagrid\n             * @name applyComponentStyle\n             * @method\n             */\n            observer = new window.MutationObserver(function (mutations) {\n                var checkInnerHTML, checkStyle;\n                Array.prototype.forEach.call(mutations, function (mutation) {\n                    if (mutation.attributeName === 'class'\n                            || mutation.attributeName === 'style') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.target.parentNode\n                            && mutation.target.parentNode.nodeName === 'STYLE') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.addedNodes.length > 0 || mutation.type === 'characterData') {\n                        checkInnerHTML = true;\n                    }\n                });\n                if (checkStyle) {\n                    intf.applyComponentStyle(false, intf);\n                }\n                if (checkInnerHTML) {\n                    intf.data = typeMap.data(intf.innerHTML);\n                }\n            });\n            observer.observe(intf, { characterData: true, childList: true, attributes: true, subtree: true });\n            Array.prototype.forEach.call(document.querySelectorAll('style'), function (el) {\n                observer.observe(el, { characterData: true, childList: true, attributes: true, subtree: true });\n            });\n        };\n        return component;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals XMLSerializer: false, define: true, Blob: false, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var perfCounters = [],\n            drawCount = 0,\n            perfWindowSize = 300,\n            entityCount = [],\n            scrollDebugCounters = [],\n            touchPPSCounters = [];\n        self.htmlImageCache = {};\n        function drawPerfLine(w, h, x, y, perfArr, arrIndex, max, color, useAbs) {\n            var i = w / perfArr.length,\n                r = h / max;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x, y + h);\n            perfArr.forEach(function (n) {\n                var val = (arrIndex === undefined ? n : n[arrIndex]),\n                    cx,\n                    cy;\n                if (useAbs) {\n                    val = Math.abs(val);\n                }\n                cx = x + i;\n                cy = y + h - (val * r);\n                self.ctx.lineTo(cx, cy);\n                x += i;\n            });\n            self.ctx.moveTo(x + w, y + h);\n            self.ctx.strokeStyle = color;\n            self.ctx.stroke();\n        }\n        function drawOnAllImagesLoaded() {\n            var loaded = true;\n            Object.keys(self.htmlImageCache).forEach(function (html) {\n                if (!self.htmlImageCache[html].complete) {\n                    loaded = false;\n                }\n            });\n            if (loaded) {\n                self.draw();\n            }\n        }\n        function drawHtml(cell) {\n            var img,\n                v = cell.innerHTML || cell.formattedValue,\n                x = cell.x + self.canvasOffsetLeft,\n                y = cell.y + self.canvasOffsetTop;\n            if (self.htmlImageCache[v]) {\n                img = self.htmlImageCache[v];\n                if (img.height !== cell.height || img.width !== cell.width) {\n                    // height and width of the cell has changed, invalidate cache\n                    self.htmlImageCache[v] = undefined;\n                } else {\n                    if (!img.complete) {\n                        return;\n                    }\n                    return self.ctx.drawImage(img, x, y);\n                }\n            }\n            img = new Image(cell.width, cell.height);\n            self.htmlImageCache[v] = img;\n            img.onload = function () {\n                self.ctx.drawImage(img, x, y);\n                drawOnAllImagesLoaded();\n            };\n            img.src = 'data:image/svg+xml;base64,' + btoa(\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + cell.width + '\" height=\"' + cell.height + '\">\\n' +\n                    '<foreignObject class=\"node\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\\n' +\n                    '<body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;padding:0;\">\\n' +\n                    v + '\\n' +\n                    '</body>' +\n                    '</foreignObject>\\n' +\n                    '</svg>\\n'\n            );\n        }\n        function drawOrderByArrow(x, y) {\n            var mt = self.style.columnHeaderOrderByArrowMarginTop * self.scale,\n                ml = self.style.columnHeaderOrderByArrowMarginLeft * self.scale,\n                mr = self.style.columnHeaderOrderByArrowMarginRight * self.scale,\n                aw = self.style.columnHeaderOrderByArrowWidth * self.scale,\n                ah = self.style.columnHeaderOrderByArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.columnHeaderOrderByArrowColor;\n            self.ctx.strokeStyle = self.style.columnHeaderOrderByArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.orderDirection === 'asc') {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y + ah);\n                self.ctx.lineTo(x + aw, y + ah);\n                self.ctx.lineTo(x + (aw * 0.5), y);\n                self.ctx.lineTo(x, y + ah);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function drawTreeArrow(cell, x, y) {\n            var mt = self.style.treeArrowMarginTop * self.scale,\n                mr = self.style.treeArrowMarginRight * self.scale,\n                ml = self.style.treeArrowMarginLeft * self.scale,\n                aw = self.style.treeArrowWidth * self.scale,\n                ah = self.style.treeArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.treeArrowColor;\n            self.ctx.strokeStyle = self.style.treeArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.openChildren[cell.data[self.uniqueId]]) {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y);\n                self.ctx.lineTo(x + ah, y + (aw * 0.5));\n                self.ctx.lineTo(x, y + aw);\n                self.ctx.lineTo(x, y);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function radiusRect(x, y, w, h, radius) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            var r = x + w, b = y + h;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x + radius, y);\n            self.ctx.lineTo(r - radius, y);\n            self.ctx.quadraticCurveTo(r, y, r, y + radius);\n            self.ctx.lineTo(r, y + h - radius);\n            self.ctx.quadraticCurveTo(r, b, r - radius, b);\n            self.ctx.lineTo(x + radius, b);\n            self.ctx.quadraticCurveTo(x, b, x, b - radius);\n            self.ctx.lineTo(x, y + radius);\n            self.ctx.quadraticCurveTo(x, y, x + radius, y);\n        }\n        function fillRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillRect(x, y, w, h);\n        }\n        function strokeRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.strokeRect(x, y, w, h);\n        }\n        function fillText(text, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillText(text, x, y);\n        }\n        function fillCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.fill();\n        }\n        function strokeCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.stroke();\n        }\n        function clipFrozenArea(mode) {\n            // 0 both, 1 rows, 2 cols\n            // self.lastFrozenColumnPixel;\n            // self.lastFrozenRowPixel;\n            self.ctx.beginPath();\n            if (mode === 0) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, self.lastFrozenRowPixel);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 1) {\n                self.ctx.moveTo(0, self.lastFrozenRowPixel);\n                self.ctx.lineTo(0, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 2) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, 0);\n                self.ctx.lineTo(self.width, 0);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n            }\n            self.ctx.clip();\n        }\n        function fillHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return fillCircle(x, y, r * 0.5);\n            }\n            fillRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function strokeHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return strokeCircle(x, y, r * 0.5);\n            }\n            strokeRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function addselectionHandle(c, pos) {\n            var hw = self.style.selectionHandleSize,\n                p = {\n                    tr: function () {\n                        fillHandle(c.x + c.width, c.y, hw);\n                        strokeHandle(c.x + c.width, c.y, hw);\n                    },\n                    br: function () {\n                        fillHandle(c.x + c.width, c.y + c.height, hw);\n                        strokeHandle(c.x + c.width, c.y + c.height, hw);\n                    },\n                    tl: function () {\n                        fillHandle(c.x, c.y, hw);\n                        strokeHandle(c.x, c.y, hw);\n                    },\n                    bl: function () {\n                        fillHandle(c.x, c.y + c.height, hw);\n                        strokeHandle(c.x, c.y + c.height, hw);\n                    }\n                };\n            p[pos]();\n        }\n        function addBorderLine(c, pos) {\n            self.ctx.beginPath();\n            var p = {\n                t: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                },\n                r: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                b: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                l: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                }\n            };\n            p[pos]();\n            self.ctx.stroke();\n        }\n        function addEllipsis(text, width) {\n            var c, w = 0;\n            if (self.ellipsisCache[text] && self.ellipsisCache[text][width]) {\n                return self.ellipsisCache[text][width];\n            }\n            //TODO Add ellipsis back when there is a fast way to do it\n            w = self.ctx.measureText(text).width;\n            self.ellipsisCache[text] = self.ellipsisCache[text] || {};\n            c = {value: text, width: w};\n            self.ellipsisCache[text][width] = c;\n            return c;\n        }\n        function drawText(cell) {\n            var paddingLeft = self.style[cell.style + 'PaddingLeft'] * self.scale,\n                paddingTop = self.style[cell.style + 'PaddingTop'] * self.scale,\n                paddingRight = self.style[cell.style + 'PaddingRight'] * self.scale,\n                paddingBottom = self.style[cell.style + 'PaddingBottom'] * self.scale,\n                vPos = paddingTop + cell.height - (cell.height * 0.5),\n                hPos = paddingLeft + cell.treeArrowWidth + cell.orderByArrowWidth;\n            cell.text = addEllipsis(cell.formattedValue, cell.width - paddingRight - paddingLeft);\n            cell.text.height = cell.fontHeight;\n            if (cell.horizontalAlignment === 'right') {\n                hPos = cell.width - cell.text.width - paddingRight;\n            } else if (cell.horizontalAlignment === 'center') {\n                hPos = (cell.width / 2) - (cell.text.width / 2);\n            }\n            if (cell.verticalAlignment === 'top') {\n                vPos = paddingTop + cell.text.height;\n            } else if (cell.verticalAlignment === 'bottom') {\n                vPos = cell.height - paddingBottom - cell.text.height;\n            }\n            cell.text.x = cell.x + hPos;\n            cell.text.y = cell.y + vPos;\n            fillText(cell.text.value, cell.text.x, cell.text.y);\n        }\n        function getFrozenColumnsWidth() {\n            var w = 0,\n                s = self.getVisibleSchema(),\n                x = 0,\n                n = Math.min(self.frozenColumn, s.length),\n                column;\n            while (x < n) {\n                column = s[self.orders.columns[x]];\n                w += ((self.sizes.columns[column[self.uniqueId]] || column.width || self.style.cellWidth) * self.scale);\n                x += 1;\n            }\n            return w;\n        }\n        /**\n         * Redraws the grid. No matter what the change, this is the only method required to refresh everything.\n         * @memberof canvasDatagrid\n         * @name draw\n         * @method\n         */\n         // r = literal row index\n         // rd = row data array\n         // i = user order index\n         // o = literal data index\n         // y = y drawing cursor\n         // x = x drawing cursor\n         // s = visible schema array\n         // cx = current x drawing cursor sub calculation var\n         // cy = current y drawing cursor sub calculation var\n         // a = static cell (like corner cell)\n         // p = perf counter\n         // l = data length\n         // u = current cell\n         // h = current height\n         // w = current width\n        self.draw = function (internal) {\n            if (self.dispatchEvent('beforedraw', {})) { return; }\n            if (!self.isChildGrid && (!self.height || !self.width)) {\n                return;\n            }\n            if (self.isChildGrid && internal) {\n                requestAnimationFrame(self.parentGrid.draw);\n                return;\n            }\n            if (self.intf.visible === false) {\n                return;\n            }\n            // initial values\n            var checkScrollHeight, rowHeaderCell, p, cx, cy, treeGrid, rowOpen,\n                rowHeight, cornerCell, y, x, c, h, w, s, r, rd, aCell,\n                data = (self.data || []),\n                bc = self.style.gridBorderCollapse === 'collapse',\n                selectionBorders = [],\n                moveBorders = [],\n                selectionHandles = [],\n                rowHeaders = [],\n                frozenColumnWidths = getFrozenColumnsWidth(),\n                l = data.length,\n                u = self.currentCell || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                cellHeight = self.style.cellHeight;\n            drawCount += 1;\n            p = performance.now();\n            self.visibleRowHeights = [];\n            // if data length has changed, there is no way to know\n            if (data.length > self.orders.rows.length) {\n                self.createRowOrders();\n            }\n            function drawScrollBars() {\n                var drawCorner,\n                    en = self.scrollBox.entities,\n                    m = (self.style.scrollBarBoxMargin * 2);\n                self.ctx.strokeStyle = self.style.scrollBarBorderColor;\n                self.ctx.lineWidth = self.style.scrollBarBorderWidth;\n                en.horizontalBox.x = rowHeaderCellWidth + self.style.scrollBarBoxMargin\n                    + ((en.horizontalBar.width - self.scrollBox.scrollBoxWidth)\n                        * (self.scrollBox.scrollLeft / self.scrollBox.scrollWidth));\n                en.verticalBox.y = columnHeaderCellHeight + self.style.scrollBarBoxMargin\n                    + ((en.verticalBar.height - self.scrollBox.scrollBoxHeight)\n                        * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight));\n                if (self.scrollBox.horizontalBarVisible) {\n                    self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                    fillRect(en.horizontalBar.x, en.horizontalBar.y, en.horizontalBar.width + m, en.horizontalBar.height);\n                    strokeRect(en.horizontalBar.x, en.horizontalBar.y, en.horizontalBar.width + m, en.horizontalBar.height);\n                    self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                    if (/horizontal/.test(u.context)) {\n                        self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                    }\n                    radiusRect(en.horizontalBox.x, en.horizontalBox.y,\n                        en.horizontalBox.width, en.horizontalBox.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                    drawCorner = true;\n                    self.visibleCells.unshift(en.horizontalBar);\n                    self.visibleCells.unshift(en.horizontalBox);\n                }\n                if (self.scrollBox.verticalBarVisible) {\n                    self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                    fillRect(en.verticalBar.x, en.verticalBar.y, en.verticalBar.width, en.verticalBar.height + m);\n                    strokeRect(en.verticalBar.x, en.verticalBar.y, en.verticalBar.width, en.verticalBar.height + m);\n                    self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                    if (/vertical/.test(u.context)) {\n                        self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                    }\n                    radiusRect(en.verticalBox.x, en.verticalBox.y, en.verticalBox.width,\n                        en.verticalBox.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                    drawCorner = true;\n                    self.visibleCells.unshift(en.verticalBar);\n                    self.visibleCells.unshift(en.verticalBox);\n                }\n                if (drawCorner) {\n                    //corner\n                    self.ctx.strokeStyle = self.style.scrollBarCornerBorderColor;\n                    self.ctx.fillStyle = self.style.scrollBarCornerBackgroundColor;\n                    radiusRect(en.corner.x, en.corner.y, en.corner.width, en.corner.height, 0);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                    self.visibleCells.unshift(en.corner);\n                }\n            }\n            function createHandlesOverlayArray(cell) {\n                if (self.attributes.allowMovingSelection || self.mobile) {\n                    if (cell.selectionBorderTop && cell.selectionBorderRight && self.mobile) {\n                        selectionHandles.push([cell, 'tr']);\n                        cell.selectionHandle = 'tr';\n                    }\n                    if (cell.selectionBorderTop && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'tl']);\n                        cell.selectionHandle = 'tl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'bl']);\n                        cell.selectionHandle = 'bl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderRight\n                            && (self.attributes.selectionHandleBehavior !== 'none' || self.mobile)) {\n                        selectionHandles.push([cell, 'br']);\n                        cell.selectionHandle = 'br';\n                    }\n                }\n            }\n            function createBorderOverlayArray(cell, drawArray, propPrefix, offsetPoint) {\n                offsetPoint = offsetPoint || {x: 0, y: 0};\n                cell.selectionBorder = '';\n                if (!cell.isRowHeader\n                        && self.selections[cell.rowIndex + -offsetPoint.y]\n                        && self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) !== -1) {\n                    if ((!self.selections[cell.rowIndex - 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex - 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1\n                            || cell.rowIndex === 0)\n                            && !cell.isHeader) {\n                        drawArray.push([cell, 't']);\n                        cell[propPrefix + 'BorderTop'] = true;\n                        cell[propPrefix + 'Border'] += 't';\n                    }\n                    if (!self.selections[cell.rowIndex + 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex + 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'b']);\n                        cell[propPrefix + 'BorderBottom'] = true;\n                        cell[propPrefix + 'Border'] += 'b';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === 0\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex - 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'l']);\n                        cell[propPrefix + 'BorderLeft'] = true;\n                        cell[propPrefix + 'Border'] += 'l';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === s.length\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'r']);\n                        cell[propPrefix + 'BorderRight'] = true;\n                        cell[propPrefix + 'Border'] += 'r';\n                    }\n                }\n            }\n            function drawCell(d, rowOrderIndex, rowIndex) {\n                return function drawEach(header, headerIndex, columnOrderIndex) {\n                    var cellStyle = header.style || 'cell',\n                        cellGridAttributes,\n                        cell,\n                        isHeader = /HeaderCell/.test(cellStyle),\n                        isCorner = /cornerCell/.test(cellStyle),\n                        isRowHeader = 'rowHeaderCell' === cellStyle,\n                        isColumnHeader = 'columnHeaderCell' === cellStyle,\n                        selected = self.selections[rowOrderIndex] && self.selections[rowOrderIndex].indexOf(columnOrderIndex) !== -1,\n                        hovered = self.hovers[d[self.uniqueId]] && self.hovers[d[self.uniqueId]].indexOf(columnOrderIndex) !== -1,\n                        active = self.activeCell.rowIndex === rowOrderIndex && self.activeCell.columnIndex === columnOrderIndex,\n                        isGrid = typeof d[header.name] === 'object' && d[header.name] !== null && d[header.name] !== undefined,\n                        activeHeader = (self.orders.rows[self.activeCell.rowIndex] === rowOrderIndex\n                                || self.orders.columns[self.activeCell.columnIndex] === columnOrderIndex)\n                            && (columnOrderIndex === -1 || rowOrderIndex === -1)\n                            ? (isRowHeader ? 'activeRowHeaderCell' : 'activeColumnHeaderCell') : false,\n                        val,\n                        f = self.formatters[header.type || 'string'],\n                        orderByArrowSize = 0,\n                        treeArrowSize = 0,\n                        cellWidth = self.sizes.columns[isRowHeader ? 'cornerCell' : header[self.uniqueId]] || header.width,\n                        ev = {\n                            value: d[header.name],\n                            row: d,\n                            header: header\n                        };\n                    if (cellStyle === 'headerCellCap') {\n                        cellWidth = w - x;\n                    }\n                    // if no data or schema are defined, a width is provided to the stub column\n                    if (cellWidth === undefined) {\n                        cellWidth = self.style.cellWidth;\n                    }\n                    cellWidth = cellWidth * self.scale;\n                    if (x + cellWidth + self.style.cellBorderWidth < 0) {\n                        x += cellWidth + self.style.cellBorderWidth;\n                    }\n                    if (active && cellStyle !== 'cornerCell') {\n                        cellStyle = 'activeCell';\n                    }\n                    if (self.visibleRows.indexOf(rowIndex) === -1 && !isHeader) {\n                        self.visibleRows.push(rowIndex);\n                    }\n                    val = self.dispatchEvent('formatcellvalue', ev);\n                    cx = x;\n                    cy = y;\n                    if (cellStyle === 'cornerCell') {\n                        cx = 0;\n                        cy = 0;\n                    } else if (isRowHeader) {\n                        cx = 0;\n                    } else if (isHeader) {\n                        cy = 0;\n                    }\n                    cell = {\n                        type: isGrid ? 'canvas-datagrid-cell' : header.type,\n                        style: cellStyle,\n                        nodeType: 'canvas-datagrid-cell',\n                        x: cx,\n                        y: cy,\n                        horizontalAlignment: self.style[cellStyle + 'HorizontalAlignment'],\n                        verticalAlignment: self.style[cellStyle + 'VerticalAlignment'],\n                        offsetTop: self.canvasOffsetTop + cy,\n                        offsetLeft: self.canvasOffsetLeft + cx,\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        active: active || activeHeader,\n                        hovered: hovered,\n                        selected: selected,\n                        width: cellWidth,\n                        height: cellHeight,\n                        offsetWidth: cellWidth,\n                        offsetHeight: cellHeight,\n                        parentNode: self.intf.parentNode,\n                        offsetParent: self.intf.parentNode,\n                        data: d,\n                        isCorner: isCorner,\n                        isHeader: isHeader,\n                        isColumnHeader: isColumnHeader,\n                        isHeaderCellCap: !!header.isHeaderCellCap,\n                        isRowHeader: isRowHeader,\n                        rowOpen: rowOpen,\n                        header: header,\n                        columnIndex: columnOrderIndex,\n                        rowIndex: rowOrderIndex,\n                        sortColumnIndex: headerIndex,\n                        sortRowIndex: rowIndex,\n                        isGrid: isGrid,\n                        isNormal: !isGrid && !isCorner && !isHeader,\n                        gridId: (self.attributes.name || '') + d[self.uniqueId] + ':' + header[self.uniqueId],\n                        parentGrid: self.intf,\n                        innerHTML: '',\n                        activeHeader: activeHeader,\n                        value: isHeader && !isRowHeader ? (header.title || header.name) : d[header.name]\n                    };\n                    ev.cell = cell;\n                    cell.userHeight = cell.isHeader ? self.sizes.rows[-1] : rowHeight;\n                    cell.userWidth = cell.isHeader ? self.sizes.columns.cornerCell : self.sizes.columns[header[self.uniqueId]];\n                    cell[self.uniqueId] = d[self.uniqueId];\n                    self.visibleCells.unshift(cell);\n                    if (self.dispatchEvent('beforerendercell', ev)) { return; }\n                    self.ctx.fillStyle = self.style[cellStyle + 'BackgroundColor'];\n                    self.ctx.strokeStyle = self.style[cellStyle + 'BorderColor'];\n                    self.ctx.lineWidth = self.style[cellStyle + 'BorderWidth'];\n                    if (hovered) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'HoverBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'HoverBorderColor'];\n                    }\n                    if (selected) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'SelectedBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'SelectedBorderColor'];\n                    }\n                    if (activeHeader) {\n                        self.ctx.fillStyle = self.style[activeHeader + 'BackgroundColor'];\n                    }\n                    self.dispatchEvent('rendercell', ev);\n                    if (cell.isGrid) {\n                        if (cell.height !== rowHeight) {\n                            cell.height = rowHeight || self.style.cellHeightWithChildGrid;\n                            checkScrollHeight = true;\n                        }\n                        cell.width = self.sizes.columns[header[self.uniqueId]] || self.style.cellWidthWithChildGrid;\n                    }\n                    if (rowOpen && !cell.isRowHeader) {\n                        cell.height = self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight;\n                    }\n                    if (!cell.isGrid) {\n                        fillRect(cx, cy, cell.width, cell.height);\n                        strokeRect(cx, cy, cell.width, cell.height);\n                    }\n                    self.ctx.save();\n                    radiusRect(cell.x, cell.y, cell.width, cell.height, 0);\n                    self.ctx.clip();\n                    self.dispatchEvent('afterrendercell', ev);\n                    if (cell.height !== cellHeight && !(rowOpen && !cell.isRowHeader)) {\n                        self.sizes.rows[isHeader ? -1 : d[self.uniqueId]] = cell.height;\n                        checkScrollHeight = true;\n                    }\n                    if (cell.width !== cellWidth) {\n                        self.sizes.columns[header[self.uniqueId]] = cell.width;\n                        checkScrollHeight = true;\n                    }\n                    if (isRowHeader && self.attributes.tree) {\n                        if (!self.dispatchEvent('rendertreearrow', ev)) {\n                            treeArrowSize = drawTreeArrow(cell, self.style[cellStyle + 'PaddingLeft'], cy, 0);\n                        }\n                    }\n                    if ((self.attributes.showRowNumbers && isRowHeader)\n                            || !isRowHeader) {\n                        if (cell.isGrid && !self.dispatchEvent('beforerendercellgrid', ev)) {\n                            if (!self.childGrids[cell.gridId]) {\n                                cellGridAttributes = self.cellGridAttributes;\n                                cellGridAttributes.name = self.attributes.saveAppearance ? cell.gridId : undefined;\n                                cellGridAttributes.component = false;\n                                cellGridAttributes.parentNode = cell;\n                                cellGridAttributes.data = d[header.name];\n                                ev.cellGridAttributes = cellGridAttributes;\n                                if (self.dispatchEvent('beforecreatecellgrid', ev)) { return; }\n                                self.childGrids[cell.gridId] = self.createGrid(cellGridAttributes);\n                                self.childGrids[cell.gridId].style = cellGridAttributes.style;\n                                self.sizes.rows[rd[self.uniqueId]]\n                                    = self.sizes.rows[rd[self.uniqueId]] || self.style.cellGridHeight;\n                                checkScrollHeight = true;\n                            }\n                            cell.grid = self.childGrids[cell.gridId];\n                            cell.grid.parentNode = cell;\n                            cell.grid.visible = true;\n                            cell.grid.draw();\n                            self.dispatchEvent('rendercellgrid', ev);\n                        } else if (!cell.isGrid) {\n                            if (self.childGrids[cell.gridId]) {\n                                self.childGrids[cell.gridId].parentNode.offsetHeight = 0;\n                            }\n                            if (isHeader && self.orderBy === header.name) {\n                                if (!self.dispatchEvent('renderorderbyarrow', ev)) {\n                                    orderByArrowSize = drawOrderByArrow(cx + self.style[cellStyle + 'PaddingLeft'], 0);\n                                }\n                            }\n                            self.ctx.fillStyle = self.style[cellStyle + 'Color'];\n                            if (hovered) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'HoverColor'];\n                            }\n                            if (selected) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'SelectedColor'];\n                            }\n                            if (activeHeader) {\n                                self.ctx.fillStyle = self.style[activeHeader + 'Color'];\n                            }\n                            self.ctx.font = (self.style[cellStyle + 'FontHeight'] * self.scale) + 'px ' + self.style[cellStyle + 'FontName'];\n                            cell.fontHeight = (self.style[cellStyle + 'FontHeight'] * self.scale);\n                            cell.treeArrowWidth = treeArrowSize;\n                            cell.orderByArrowWidth = orderByArrowSize;\n                            val = val !== undefined ? val : f\n                                ? f(ev) : '';\n                            if (val === undefined && !f) {\n                                val = '';\n                                console.warn('canvas-datagrid: Unknown format '\n                                    + header.type + ' add a cellFormater');\n                            }\n                            cell.formattedValue = ((val !== undefined && val !== null) ? val : '').toString();\n                            if (self.columnFilters && self.columnFilters[val] !== undefined && isHeader) {\n                                cell.formattedValue = self.attributes.filterTextPrefix + val;\n                            }\n                            if (!self.dispatchEvent('rendertext', ev)) {\n                                if (cell.innerHTML || header.type === 'html') {\n                                    drawHtml(cell);\n                                } else {\n                                    drawText(cell);\n                                }\n                            }\n                        }\n                    }\n                    if (active) {\n                        aCell = cell;\n                    }\n                    createBorderOverlayArray(cell, selectionBorders, 'selection');\n                    // createBorderOverlayArray calculates data for createHandlesOverlayArray so it must go 2nd\n                    createHandlesOverlayArray(cell);\n                    if (self.movingSelection) {\n                        createBorderOverlayArray(cell, moveBorders, 'move', self.moveOffset);\n                    }\n                    self.ctx.restore();\n                    x += cell.width + (bc ? 0 : self.style.cellBorderWidth);\n                    return cell.width;\n                };\n            }\n            function drawRowHeader(rowData, index, rowOrderIndex) {\n                var a;\n                if (self.attributes.showRowHeaders) {\n                    x = 0;\n                    rowHeaderCell = {'rowHeaderCell': index + 1 };\n                    rowHeaderCell[self.uniqueId] = rowData[self.uniqueId];\n                    a = {\n                        name: 'rowHeaderCell',\n                        width: self.style.rowHeaderCellWidth,\n                        style: 'rowHeaderCell',\n                        type: 'string',\n                        data: rowData[self.uniqueId],\n                        index: -1\n                    };\n                    a[self.uniqueId] = rowData[self.uniqueId];\n                    rowOpen = self.openChildren[rowData[self.uniqueId]];\n                    drawCell(rowHeaderCell, index, rowOrderIndex)(a, -1, -1);\n                }\n            }\n            function drawHeaders() {\n                var d, g = s.length, i, o, columnHeaderCell, header, nonFrozenHeaderWidth;\n                function drawHeaderColumnRange(start, end) {\n                    end = Math.min(end, g);\n                    for (o = start; o < end; o += 1) {\n                        i = self.orders.columns[o];\n                        header = s[i];\n                        d = {\n                            title: header.title,\n                            name: header.name,\n                            width: header.width || self.style.cellWidth,\n                            style: 'columnHeaderCell',\n                            type: 'string',\n                            index: o,\n                            order: i\n                        };\n                        columnHeaderCell = {'columnHeaderCell': header.title || header.name};\n                        columnHeaderCell[self.uniqueId] = 'h' + header[self.uniqueId];\n                        d[self.uniqueId] = header[self.uniqueId];\n                        x += drawCell(columnHeaderCell, -1, -1)(d, o, i);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                }\n                rowHeaders.forEach(function (rArgs, rhIndex) {\n                    y = rArgs[3];\n                    cellHeight = rArgs[4];\n                    if (rhIndex === self.frozenRow) {\n                        self.ctx.save();\n                        radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                        self.ctx.clip();\n                    }\n                    drawRowHeader(rArgs[0], rArgs[1], rArgs[2]);\n                });\n                self.ctx.restore();\n                if (self.attributes.showColumnHeaders) {\n                    x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    if (self.attributes.allowFreezingColumns) {\n                        x += frozenColumnWidths;\n                    }\n                    y = 0;\n                    // cell height might have changed during drawing\n                    cellHeight = self.getColumnHeaderCellHeight();\n                    drawHeaderColumnRange(self.scrollIndexLeft + self.frozenColumn, g);\n                    nonFrozenHeaderWidth = x;\n                    x = self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    drawHeaderColumnRange(0, self.frozenColumn);\n                    // fill in the space right of the headers\n                    x = nonFrozenHeaderWidth;\n                    if (x < w) {\n                        c = {\n                            name: '',\n                            width: self.style.scrollBarWidth,\n                            style: 'headerCellCap',\n                            isHeaderCell: true,\n                            isHeaderCellCap: true,\n                            type: 'string',\n                            index: s.length\n                        };\n                        c[self.uniqueId] = 'columnHeaderCell';\n                        drawCell({endCap: ''}, -1, -1)(c, -1, -1);\n                    }\n                    // fill in the space right of the headers\n                    if (self.attributes.showRowHeaders) {\n                        cornerCell = {'cornerCell': '' };\n                        cornerCell[self.uniqueId] = 'cornerCell';\n                        x = 0;\n                        c = {\n                            name: 'cornerCell',\n                            width: self.style.rowHeaderCellWidth,\n                            style: 'cornerCell',\n                            type: 'string',\n                            index: -1\n                        };\n                        c[self.uniqueId] = 'cornerCell';\n                        drawCell(cornerCell, -1, -1)(c, -1, -1);\n                    }\n                }\n            }\n            function drawRow(r, d) {\n                var i, treeHeight, rowSansTreeHeight, o, g = s.length;\n                if (y - (cellHeight * 2) > h) {\n                    return false;\n                }\n                rd = data[r];\n                rowOpen = self.openChildren[rd[self.uniqueId]];\n                rowSansTreeHeight = (self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight) * self.scale;\n                treeHeight = (rowOpen ? self.sizes.trees[rd[self.uniqueId]] : 0) * self.scale;\n                rowHeight = (rowSansTreeHeight + treeHeight);\n                if (y < -rowHeight) {\n                    return false;\n                }\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                cellHeight = rowHeight;\n                if (self.attributes.allowFreezingColumns) {\n                    x += frozenColumnWidths;\n                }\n                //draw normal columns\n                for (o = (self.scrollIndexLeft + self.frozenColumn); o < g; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        self.scrollIndexRight = o;\n                        self.scrollPixelRight = x;\n                        break;\n                    }\n                }\n                //draw frozen columns\n                x = 0;\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                for (o = 0; o < self.frozenColumn; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        break;\n                    }\n                }\n                self.lastFrozenColumnPixel = x;\n                // cell height might have changed during drawing\n                cellHeight = rowHeight;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                // don't draw a tree for the new row\n                treeGrid = self.childGrids[rd[self.uniqueId]];\n                if (r !== data.length && rowOpen) {\n                    treeGrid.visible = true;\n                    treeGrid.parentNode = {\n                        offsetTop: y + rowSansTreeHeight + self.canvasOffsetTop,\n                        offsetLeft: rowHeaderCellWidth - 1 + self.canvasOffsetLeft,\n                        offsetHeight: treeHeight,\n                        offsetWidth: self.width - rowHeaderCellWidth - self.style.scrollBarWidth - 1,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: self.style,\n                        nodeType: 'canvas-datagrid-tree',\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        rowIndex: r\n                    };\n                    self.visibleCells.unshift({\n                        rowIndex: r,\n                        columnIndex: 0,\n                        y: treeGrid.parentNode.offsetTop,\n                        x: treeGrid.parentNode.offsetLeft,\n                        height: treeGrid.height,\n                        width: treeGrid.width,\n                        style: 'tree-grid',\n                        type: treeGrid.parentNode.nodeType\n                    });\n                    treeGrid.draw();\n                } else if (treeGrid) {\n                    treeGrid.parentNode.offsetHeight = 0;\n                    delete self.sizes.trees[rd[self.uniqueId]];\n                }\n                rowHeaders.push([rd, r, d, y, rowHeight]);\n                self.visibleRowHeights[r] = rowHeight;\n                y += cellHeight + (bc ? 0 : self.style.cellBorderWidth);\n                return true;\n            }\n            function initDraw() {\n                self.visibleRows = [];\n                s = self.getVisibleSchema();\n                self.visibleCells = [];\n                self.canvasOffsetTop = self.isChildGrid ? self.parentNode.offsetTop : 0;\n                self.canvasOffsetLeft = self.isChildGrid ? self.parentNode.offsetLeft : 0;\n                h = self.height;\n                w = self.width;\n            }\n            function drawBackground() {\n                radiusRect(0, 0, w, h, 0);\n                self.ctx.clip();\n                self.ctx.fillStyle = self.style.gridBackgroundColor;\n                fillRect(0, 0, w, h);\n            }\n            function drawFrozenRows() {\n                var n, ln = Math.min(data.length, self.frozenRow);\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                y = columnHeaderCellHeight;\n                for (r = 0; r < ln; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.allowFreezingRows) {\n                    // HACK great, another stupid magic number.\n                    // Background will appear as a 0.5px artifact behind the row freeze bar without this hack\n                    y += self.style.frozenMarkerBorderWidth + self.style.frozenMarkerWidth - 0.4999999999;\n                }\n                self.lastFrozenRowPixel = y;\n            }\n            function drawRows() {\n                self.ctx.save();\n                if (self.frozenRow > 0) {\n                    radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                    self.ctx.clip();\n                }\n                var o, n, i, g = s.length;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                if (!self.attributes.snapToRow) {\n                    y += -self.scrollBox.scrollTop + self.scrollPixelTop + self.style.cellBorderWidth;\n                }\n                for (r = self.frozenRow + self.scrollIndexTop; r < l; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        self.scrollIndexBottom = r;\n                        self.scrollPixelBottom = y;\n                        break;\n                    }\n                }\n                if (self.attributes.showNewRow) {\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    rowHeight = cellHeight = self.style.cellHeight;\n                    rowOpen = false;\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        x += drawCell(self.newRow, data.length, data.length)(s[i], i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    rowHeaders.push([self.newRow, data.length, data.length, y, rowHeight]);\n                }\n                self.ctx.restore();\n            }\n            function drawMoveMarkers() {\n                if (!self.movingSelection) { return; }\n                self.ctx.lineWidth = self.style.moveOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.moveOverlayBorderColor;\n                self.ctx.setLineDash(self.style.moveOverlayBorderSegments);\n                moveBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n                self.ctx.setLineDash([]);\n            }\n            function drawReorderMarkers() {\n                if (!self.reorderObject) { return; }\n                var b = {\n                        height: self.reorderObject.height,\n                        width: self.reorderObject.width,\n                        x: self.reorderObject.x + self.reorderObject.dragOffset.x,\n                        y: self.reorderObject.y + self.reorderObject.dragOffset.y\n                    },\n                    m = {\n                        width: w,\n                        height: h,\n                        x: 0,\n                        y: 0\n                    };\n                self.ctx.fillStyle = self.style.reorderMarkerBackgroundColor;\n                self.ctx.lineWidth = self.style.reorderMarkerBorderWidth;\n                self.ctx.strokeStyle = self.style.reorderMarkerBorderColor;\n                if (self.dragMode === 'row-reorder') {\n                    b.width = w;\n                    b.x = 0;\n                    m.width = w;\n                    m.height = self.currentCell.height;\n                    m.y = self.currentCell.y;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.rowIndex !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex > -1\n                            && self.currentCell.rowIndex < l) {\n                        addBorderLine(m, self.reorderTarget.sortRowIndex > self.reorderObject.sortRowIndex ? 'b' : 't');\n                    }\n                } else if (self.dragMode === 'column-reorder' && self.reorderObject) {\n                    b.height = h;\n                    b.y = 0;\n                    m.height = h;\n                    m.width = self.currentCell.width;\n                    m.y = 0;\n                    m.x = self.currentCell.x;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.columnIndex !== self.reorderObject.columnIndex\n                            && self.currentCell.columnIndex > -1\n                            && self.currentCell.columnIndex < s.length) {\n                        addBorderLine(m, self.reorderTarget.sortColumnIndex > self.reorderObject.sortColumnIndex ? 'r' : 'l');\n                    }\n                }\n            }\n            function drawBorder() {\n                self.ctx.lineWidth = self.style.gridBorderWidth;\n                self.ctx.strokeStyle = self.style.gridBorderColor;\n                strokeRect(0, 0, self.width, self.height);\n            }\n            function drawSelectionBorders() {\n                self.ctx.lineWidth = self.style.selectionOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.selectionOverlayBorderColor;\n                function dsb(c) {\n                    addBorderLine(c[0], c[1]);\n                }\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.save();\n                clipFrozenArea(0);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(1);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(2);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n            }\n            function drawSelectionHandles() {\n                if (self.mobile || self.attributes.allowMovingSelection) {\n                    self.ctx.lineWidth = self.style.selectionHandleBorderWidth;\n                    self.ctx.strokeStyle = self.style.selectionHandleBorderColor;\n                    self.ctx.fillStyle = self.style.selectionHandleColor;\n                    selectionHandles.forEach(function (c) {\n                        addselectionHandle(c[0], c[1]);\n                        var az = self.attributes.touchSelectHandleZone / 2,\n                            ax = c[0].x + (c[1] === 'tl' || c[1] === 'bl' ? 0 : c[0].width) - az,\n                            ay = c[0].y + (c[1] === 'bl' || c[1] === 'br' ? c[0].height : 0) - az;\n                        self.visibleCells.unshift({\n                            x: ax,\n                            y: ay,\n                            height: self.style.selectionHandleSize + az,\n                            width: self.style.selectionHandleSize + az,\n                            style: 'selection-handle-' + c[1]\n                        });\n                    });\n                }\n            }\n            function drawActiveCell() {\n                if (!aCell) { return; }\n                self.ctx.save();\n                var cl = self.activeCell.columnIndex + 1 > self.frozenColumn || self.activeCell.rowIndex + 1 > self.frozenRow,\n                    acx = cl ? self.lastFrozenColumnPixel : 0,\n                    acy = cl ? self.lastFrozenRowPixel : 0,\n                    acw = cl ? self.width - self.lastFrozenColumnPixel : self.width,\n                    ach = cl ? self.height - self.lastFrozenRowPixel : self.height;\n                radiusRect(acx, acy, acw, ach, 0);\n                self.ctx.clip();\n                if (self.attributes.selectionMode === 'row') {\n                    if (self.activeCell && self.activeCell.rowIndex === aCell.rowIndex) {\n                        self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                        self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                        strokeRect(0, aCell.y, self.getHeaderWidth() + rowHeaderCellWidth, self.visibleRowHeights[aCell.rowIndex]);\n                    }\n                } else {\n                    self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                    self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                    strokeRect(aCell.x, aCell.y, aCell.width, aCell.height);\n                }\n                self.ctx.restore();\n            }\n            function drawFrozenMarkers() {\n                var my = self.lastFrozenRowPixel - self.style.frozenMarkerWidth,\n                    mx = self.lastFrozenColumnPixel - self.style.frozenMarkerBorderWidth,\n                    xHover = self.currentCell && self.currentCell.style === 'frozen-row-marker',\n                    yHover = self.currentCell && self.currentCell.style === 'frozen-column-marker';\n                self.ctx.lineWidth = self.style.frozenMarkerBorderWidth;\n                if (self.attributes.allowFreezingColumns) {\n                    self.ctx.fillStyle = yHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = yHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    strokeRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    self.visibleCells.unshift({\n                        x: mx,\n                        y: 0,\n                        height: self.height,\n                        width: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        style: 'frozen-column-marker'\n                    });\n                }\n                if (self.attributes.allowFreezingRows) {\n                    self.ctx.fillStyle = xHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = xHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    strokeRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    self.visibleCells.unshift({\n                        x: 0,\n                        y: my,\n                        height: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        width: self.width,\n                        style: 'frozen-row-marker'\n                    });\n                }\n                if (self.freezeMarkerPosition) {\n                    self.ctx.fillStyle = self.style.frozenMarkerActiveColor;\n                    self.ctx.strokeStyle = self.style.frozenMarkerActiveBorderColor;\n                    if (self.dragMode === 'frozen-column-marker') {\n                        fillRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                        strokeRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                    } else {\n                        fillRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                        strokeRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                    }\n                }\n            }\n            function drawPerfLines() {\n                if (!self.attributes.showPerformance) { return; }\n                var pw = 250,\n                    px = self.width - pw - self.style.scrollBarWidth - (self.style.scrollBarBorderWidth * 2),\n                    py = columnHeaderCellHeight,\n                    ph = 100;\n                if (scrollDebugCounters.length === 0) { scrollDebugCounters = self.fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (touchPPSCounters.length === 0) { touchPPSCounters = self.fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (entityCount.length === 0) { entityCount = self.fillArray(0, perfWindowSize, 1, 0); }\n                self.ctx.lineWidth = 0.5;\n                function dpl(name, perfArr, arrIndex, max, color, useAbs, rowIndex) {\n                    var v;\n                    drawPerfLine(pw, ph, px, py, perfArr, arrIndex, max, color, useAbs);\n                    self.ctx.fillStyle = color;\n                    fillRect(3 + px, py + 9 + (rowIndex * 11), 8, 8);\n                    self.ctx.fillStyle = '#999999';\n                    v = arrIndex !== undefined ? perfArr[0][arrIndex] : perfArr[0];\n                    fillText(name + ' ' + (isNaN(v) ? 0 : v).toFixed(3), 14 + px, py + 16 + (rowIndex * 11));\n                }\n                self.ctx.textAlign = 'left';\n                self.ctx.font = '8px sans-serif';\n                self.ctx.fillStyle = 'rgba(29, 25, 26, 1.00)';\n                fillRect(px, py, pw, ph);\n                [['Scroll Height', scrollDebugCounters, 0, self.scrollBox.scrollHeight, 'rgba(248, 33, 103, 1.00)', false],\n                    ['Scroll Width', scrollDebugCounters, 1, self.scrollBox.scrollWidth, 'rgba(66, 255, 27, 1.00)', false],\n                    ['Performance', perfCounters, undefined, 200, 'rgba(252, 255, 37, 1.00)', false],\n                    ['Entities', entityCount, undefined, 1500, 'rgba(76, 231, 239, 1.00)', false],\n                    ['TouchPPSX', touchPPSCounters, 0, 1000, 'rgba(246, 102, 24, 1.00)', true],\n                    ['TouchPPSY', touchPPSCounters, 1, 1000, 'purple', true]\n                    ].forEach(function (i, index) {\n                    i.push(index);\n                    dpl.apply(null, i);\n                });\n                self.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n                entityCount.pop();\n                entityCount.unshift(self.visibleCells.length);\n                scrollDebugCounters.pop();\n                scrollDebugCounters.unshift([self.scrollBox.scrollTop, self.scrollBox.scrollLeft]);\n                touchPPSCounters.pop();\n                touchPPSCounters.unshift([self.yPPS, self.xPPS]);\n            }\n            function drawDebug() {\n                self.ctx.save();\n                var d;\n                if (self.attributes.showPerformance || self.attributes.debug) {\n                    if (perfCounters.length === 0) { perfCounters = self.fillArray(0, perfWindowSize, 1, 0); }\n                    perfCounters.pop();\n                    perfCounters.unshift(performance.now() - p);\n                }\n                if (!self.attributes.debug) {\n                    self.ctx.restore();\n                    return;\n                }\n                self.ctx.font = '14px sans-serif';\n                d = {};\n                d.perf = (perfCounters.reduce(function (a, b) {\n                    return a + b;\n                }, 0) / Math.min(drawCount, perfCounters.length)).toFixed(1);\n                d.htmlImages = Object.keys(self.htmlImageCache).length;\n                d.reorderObject = 'x: ' + (self.reorderObject || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderObject || {rowIndex: 0}).rowIndex;\n                d.reorderTarget = 'x: ' + (self.reorderTarget || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderTarget || {rowIndex: 0}).rowIndex;\n                d.scale = self.scale;\n                d.startScale = self.startScale;\n                d.scaleDelta = self.scaleDelta;\n                d.zoomDeltaStart = self.zoomDeltaStart;\n                d.touchLength = self.touchLength;\n                d.touches = 'y0: ' + (self.touchPosition || {y: 0}).y + ' y1: ' + (self.touchPosition1 || {y: 0}).y;\n                d.scrollBox = self.scrollBox.toString();\n                d.scrollIndex = 'x: ' + self.scrollIndexLeft + ', y: ' + self.scrollIndexTop;\n                d.scrollPixel = 'x: ' + self.scrollPixelLeft + ', y: ' + self.scrollPixelTop;\n                d.canvasOffset = 'x: ' + self.canvasOffsetLeft + ', y: ' + self.canvasOffsetTop;\n                d.touchDelta = 'x: ' + self.touchDelta.x + ', y: ' + self.touchDelta.y;\n                d.touchAnimateTo = 'x: ' + self.touchAnimateTo.x + ', y: ' + self.touchAnimateTo.y;\n                d.scrollAnimation = 'x: ' + self.scrollAnimation.x + ', y: ' + self.scrollAnimation.y;\n                d.touchPPS = 'x: ' + self.xPPS + ', y: ' + self.yPPS;\n                d.touchPPST = 'x: ' + self.xPPST + ', y: ' + self.yPPST;\n                d.touchDuration = self.touchDuration;\n                d.pointerLockPosition =  self.pointerLockPosition ?\n                        self.pointerLockPosition.x + ', ' + self.pointerLockPosition.y : '';\n                d.size = 'w: ' + self.width + ', h: ' + self.height;\n                d.mouse = 'x: ' + self.mouse.x + ', y: ' + self.mouse.y;\n                d.touch = !self.touchStart\n                    ? '' : 'x: ' + self.touchStart.x + ', y: ' + self.touchStart.y;\n                d.entities = self.visibleCells.length;\n                d.hasFocus = self.hasFocus;\n                d.dragMode = self.dragMode;\n                if (self.currentCell) {\n                    d.columnIndex = self.currentCell.columnIndex;\n                    d.rowIndex = self.currentCell.rowIndex;\n                    d.sortColumnIndex = self.currentCell.sortColumnIndex;\n                    d.sortRowIndex = self.currentCell.sortRowIndex;\n                    d.context = self.currentCell.context;\n                    d.dragContext = self.currentCell.dragContext;\n                    d.style = self.currentCell.style;\n                    d.type = self.currentCell.type;\n                }\n                self.ctx.textAlign = 'right';\n                self.ctx.fillStyle = 'rgba(0, 0, 0, .60)';\n                fillRect(0, 0, self.width, self.height);\n                Object.keys(d).forEach(function (key, index) {\n                    var m = key + ': ' + d[key],\n                        lh = 14;\n                    self.ctx.fillStyle = 'rgba(37, 254, 21, 1)';\n                    fillText(m, w - 20, (self.attributes.showPerformance ? 140 : 24) + (index * lh));\n                });\n                self.ctx.restore();\n            }\n            self.ctx.save();\n            initDraw();\n            drawBackground();\n            drawFrozenRows();\n            drawRows();\n            drawActiveCell();\n            drawHeaders();\n            drawFrozenMarkers();\n            drawSelectionBorders();\n            drawSelectionHandles();\n            drawReorderMarkers();\n            drawMoveMarkers();\n            drawScrollBars();\n            if (checkScrollHeight) {\n                self.resize(true);\n            }\n            drawBorder();\n            drawDebug();\n            drawPerfLines();\n            if (self.dispatchEvent('afterdraw', {})) { return; }\n            self.ctx.restore();\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var wheeling;\n        self.stopPropagation = function (e) { e.stopPropagation(); };\n        /**\n         * Adds an event listener to the given event.\n         * @memberof canvasDatagrid\n         * @name addEventListener\n         * @method\n         * @param {string} ev The name of the event to subscribe to.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.addEventListener = function (ev, fn) {\n            self.events[ev] = self.events[ev] || [];\n            self.events[ev].unshift(fn);\n        };\n        /**\n         * Removes the given listener function from the given event.  Must be an actual reference to the function that was bound.\n         * @memberof canvasDatagrid\n         * @name removeEventListener\n         * @method\n         * @param {string} ev The name of the event to unsubscribe from.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.removeEventListener = function (ev, fn) {\n            (self.events[ev] || []).forEach(function removeEachListener(sfn, idx) {\n                if (fn === sfn) {\n                    self.events[ev].splice(idx, 1);\n                }\n            });\n        };\n        /**\n         * Fires the given event, padding an event object to the event subscribers.\n         * @memberof canvasDatagrid\n         * @name dispatchEvent\n         * @method\n         * @param {number} ev The name of the event to dispatch.\n         * @param {number} e The event object.\n         */\n        self.dispatchEvent = function (ev, e) {\n            e = ev.type ? ev : (e || {});\n            ev = ev.type || ev;\n            var defaultPrevented;\n            function preventDefault() {\n                defaultPrevented = true;\n            }\n            if (!self.events[ev]) { return; }\n            self.events[ev].forEach(function dispatchEachEvent(fn) {\n                e.ctx = self.ctx;\n                e.preventDefault = preventDefault;\n                fn.apply(self.intf, [e]);\n            });\n            return defaultPrevented;\n        };\n        self.getRatio = function () {\n            return Math.min(self.attributes.maxPixelRatio, (window.devicePixelRatio || 1) /\n                (self.ctx.webkitBackingStorePixelRatio ||\n                    self.ctx.mozBackingStorePixelRatio ||\n                    self.ctx.msBackingStorePixelRatio ||\n                    self.ctx.oBackingStorePixelRatio ||\n                    self.ctx.backingStorePixelRatio || 1));\n        };\n        self.resize = function (drawAfterResize) {\n            if (!self.canvas) { return; }\n            var v = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'vertical-scroll-bar'\n                },\n                n = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'horizontal-scroll-bar'\n                },\n                vb = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'vertical-scroll-box'\n                },\n                nb = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'horizontal-scroll-box'\n                },\n                co = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    isCorner: true,\n                    isScrollBoxCorner: true,\n                    style: 'scroll-box-corner'\n                },\n                m = (self.style.scrollBarBoxMargin * 2),\n                b = (self.style.scrollBarBorderWidth * 2),\n                d = self.style.scrollBarBoxMargin * 0.5,\n                sbw = self.style.scrollBarWidth + (self.style.scrollBarBorderWidth * 2),\n                ratio = self.getRatio(),\n                bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                cellBorder = self.style.cellBorderWidth * bm,\n                columnHeaderCellBorder = self.style.columnHeaderCellBorderWidth * bm,\n                dataHeight,\n                dataWidth,\n                dims,\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                ch = self.style.cellHeight,\n                // TODO: These offset numbers are terribly wrong.\n                // They should be a result of the size of the grid/canvas?\n                // it being off causes the scroll bar to \"slide\" under\n                // the dragged mouse.\n                // https://github.com/TonyGermaneri/canvas-datagrid/issues/97\n                scrollDragPositionOffsetY = 55,\n                scrollDragPositionOffsetX = -100;\n            // sets actual DOM canvas element\n            function setCanvasSize() {\n                if (self.isChildGrid) {\n                    return;\n                }\n                dims = {\n                    // HACK +1 ? maybe it's a magic cell border?  Required to line up properly in auto height mode.\n                    height: dataHeight + cellBorder + 1,\n                    width: dataWidth + rowHeaderCellWidth + cellBorder\n                };\n                ['width', 'height'].forEach(function (dim) {\n                    //TODO: support inherit\n                    if (['auto', undefined].indexOf(self.style[dim]) !== -1) {\n                        self.parentNodeStyle[dim] = dims[dim] + 'px';\n                    } else {\n                        self.parentNodeStyle[dim] = self.style[dim];\n                    }\n                });\n            }\n            self.scrollCache.x = [];\n            self.scrollCache.y = [];\n            dataHeight = (self.data || []).reduce(function reduceData(accumulator, row, rowIndex) {\n                var va = accumulator\n                    + (((self.sizes.rows[row[self.uniqueId]] || ch) + (self.sizes.trees[row[self.uniqueId]] || 0)) * self.scale)\n                    // HACK? if an expanded tree row is frozen it is necessary to add the tree row's height a second time.\n                    + (self.frozenRow > rowIndex ? (self.sizes.trees[row[self.uniqueId]] || 0) : 0);\n                self.scrollCache.y[rowIndex] = va;\n                return va;\n            }, 0) || 0;\n            dataWidth = self.getVisibleSchema().reduce(function reduceSchema(accumulator, column, columnIndex) {\n                if (column.hidden) {\n                    self.scrollCache.x[columnIndex] = accumulator;\n                    return accumulator;\n                }\n                var va = accumulator + ((self.sizes.columns[column[self.uniqueId]] || column.width || self.style.cellWidth) * self.scale);\n                self.scrollCache.x[columnIndex] = va;\n                return va;\n            }, 0) || 0;\n            if (self.attributes.showNewRow) {\n                dataHeight += ch + cellBorder;\n            }\n            // accounts for the offset of the headers if any\n            dataHeight += columnHeaderCellHeight;\n            setCanvasSize();\n            if (self.isChildGrid) {\n                self.width = self.parentNode.offsetWidth;\n                self.height = self.parentNode.offsetHeight;\n            } else if (self.height !== self.canvas.offsetHeight || self.width !== self.canvas.offsetWidth) {\n                self.height = self.canvas.offsetHeight;\n                self.width = self.canvas.offsetWidth;\n                self.canvasOffsetLeft = self.args.canvasOffsetLeft || 0;\n                self.canvasOffsetTop = self.args.canvasOffsetTop || 0;\n            }\n            /// calculate scroll bar dimensions\n            // non-controversial\n            self.scrollBox.top = columnHeaderCellHeight + columnHeaderCellBorder;\n            self.scrollBox.left = rowHeaderCellWidth;\n            // width and height of scroll box\n            self.scrollBox.width = self.width - rowHeaderCellWidth - cellBorder;\n            self.scrollBox.height = self.height - columnHeaderCellBorder - cellBorder;\n            // is the data larger than the scroll box\n            self.scrollBox.horizontalBarVisible = dataWidth > self.scrollBox.width;\n            self.scrollBox.verticalBarVisible = dataHeight > self.scrollBox.height;\n            // if the scroll box is visible, make room for it by expanding the size of the element\n            // if the other dimension is set to auto\n            if (self.scrollBox.horizontalBarVisible && !self.isChildGrid) {\n                self.height += sbw;\n                dataHeight += sbw;\n                setCanvasSize();\n                self.scrollBox.horizontalBarVisible = dataWidth > self.scrollBox.width;\n            }\n            if (self.scrollBox.verticalBarVisible && !self.isChildGrid) {\n                self.width += sbw;\n                dataWidth += sbw;\n                setCanvasSize();\n                self.scrollBox.verticalBarVisible = dataHeight > self.scrollBox.height;\n            }\n            self.scrollBox.scrollWidth = dataWidth - self.scrollBox.width;\n            self.scrollBox.scrollHeight = dataHeight - self.scrollBox.height;\n            self.scrollBox.widthBoxRatio = ((self.scrollBox.width - scrollDragPositionOffsetX)\n                / (self.scrollBox.scrollWidth + (self.scrollBox.width - scrollDragPositionOffsetX)));\n            self.scrollBox.scrollBoxWidth = self.scrollBox.width\n                * self.scrollBox.widthBoxRatio\n                - self.style.scrollBarWidth - b - d;\n            self.scrollBox.heightBoxRatio = ((self.scrollBox.height - scrollDragPositionOffsetY)\n                / (self.scrollBox.scrollHeight + (self.scrollBox.height - scrollDragPositionOffsetY)));\n            self.scrollBox.scrollBoxHeight = self.scrollBox.height\n                * self.scrollBox.heightBoxRatio\n                - self.style.scrollBarWidth - b - d - (columnHeaderCellHeight - cellBorder);\n            self.scrollBox.scrollBoxWidth = Math.max(self.scrollBox.scrollBoxWidth, self.style.scrollBarBoxMinSize);\n            self.scrollBox.scrollBoxHeight = Math.max(self.scrollBox.scrollBoxHeight, self.style.scrollBarBoxMinSize);\n            // horizontal\n            n.x += rowHeaderCellWidth;\n            n.y += self.height - self.style.scrollBarWidth - d;\n            n.width = self.width - self.style.scrollBarWidth - rowHeaderCellWidth - d - m;\n            n.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n            // horizontal box\n            nb.y = n.y + self.style.scrollBarBoxMargin;\n            nb.width = self.scrollBox.scrollBoxWidth;\n            nb.height = self.style.scrollBarBoxWidth;\n            // vertical\n            v.x += self.width - self.style.scrollBarWidth - self.style.scrollBarBorderWidth - d;\n            v.y += columnHeaderCellHeight;\n            v.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n            v.height = self.height - columnHeaderCellHeight - self.style.scrollBarWidth - d - m;\n            // vertical box\n            vb.x = v.x + self.style.scrollBarBoxMargin;\n            vb.width = self.style.scrollBarBoxWidth;\n            vb.height = self.scrollBox.scrollBoxHeight;\n            // corner\n            co.x = n.x + n.width + m;\n            co.y = v.y + v.height + m;\n            co.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n            co.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n            self.scrollBox.entities = {\n                horizontalBar: n,\n                horizontalBox: nb,\n                verticalBar: v,\n                verticalBox: vb,\n                corner: co\n            };\n            self.scrollBox.bar = {\n                v: v,\n                h: n\n            };\n            self.scrollBox.box = {\n                v: vb,\n                h: nb\n            };\n            /// calculate page and dom elements\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            // set canvas drawing related items\n            if (!self.isChildGrid) {\n                self.canvas.width = self.width * ratio;\n                self.canvas.height = self.height * ratio;\n                self.ctx.scale(ratio, ratio);\n            }\n            // resize any open dom elements (input/textarea)\n            self.resizeEditInput();\n            self.scroll(true);\n            if (drawAfterResize) {\n                self.draw(true);\n            }\n            self.dispatchEvent('resize', {});\n            return true;\n        };\n        self.scroll = function (dontDraw) {\n            var s = self.getVisibleSchema(),\n                ch = self.style.cellHeight;\n            self.scrollIndexTop = 0;\n            self.scrollPixelTop = 0;\n            self.scrollIndexLeft = 0;\n            self.scrollPixelLeft = 0;\n            while (self.scrollPixelTop < self.scrollBox.scrollTop && self.scrollIndexTop < self.data.length) {\n                self.scrollPixelTop = self.scrollCache.y[self.scrollIndexTop];\n                self.scrollIndexTop += 1;\n            }\n            while (self.scrollPixelLeft < self.scrollBox.scrollLeft && self.scrollIndexLeft < s.length) {\n                self.scrollPixelLeft = self.scrollCache.x[self.scrollIndexLeft];\n                self.scrollIndexLeft += 1;\n            }\n            if ((self.data || []).length > 0 && s.length > 0) {\n                self.scrollIndexLeft = Math.max(self.scrollIndexLeft - 1, 0);\n                self.scrollPixelLeft = Math.max(self.scrollPixelLeft\n                    - ((self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width || self.style.cellWidth) * self.scale), 0);\n                self.scrollIndexTop = Math.max(self.scrollIndexTop - 1, 0);\n                self.scrollPixelTop = Math.max((self.scrollPixelTop\n                    - ((self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || ch)\n                    + (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0)) * self.scale), 0);\n            }\n            self.ellipsisCache = {};\n            if (!dontDraw) {\n                self.draw(true);\n            }\n            //TODO: figure out why this has to be delayed for child grids\n            //BUG: wheeling event on 3rd level hierarchy fails to move input box\n            requestAnimationFrame(self.resizeEditInput);\n            self.dispatchEvent('scroll', {top: self.scrollBox.scrollTop, left: self.scrollBox.scrollLeft});\n        };\n        self.mousemove = function (e, overridePos) {\n            if (self.contextMenu || self.input) {\n                return;\n            }\n            self.mouse = overridePos || self.getLayerPos(e);\n            var ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                i,\n                vs = self.getVisibleSchema(),\n                dragBounds,\n                sBounds,\n                x = self.mouse.x,\n                y = self.mouse.y,\n                o = self.getCellAt(x, y),\n                delta,\n                ev = {NativeEvent: e, cell: o, x: x, y: y},\n                previousCell = self.currentCell;\n            clearTimeout(self.scrollTimer);\n            if (!self.isInGrid({x: x, y: y})) {\n                self.hasFocus = false;\n            }\n            if (self.dispatchEvent('mousemove', ev)) {\n                return;\n            }\n            if (o && self.currentCell) {\n                self.rowBoundaryCrossed = self.currentCell.rowIndex !== o.rowIndex;\n                self.columnBoundaryCrossed = self.currentCell.columnIndex !== o.columnIndex;\n                self.cellBoundaryCrossed = self.rowBoundaryCrossed || self.columnBoundaryCrossed;\n                ['row', 'column', 'cell'].forEach(function (prefix) {\n                    if (self[prefix + 'BoundaryCrossed']) {\n                        ev.cell = previousCell;\n                        self.dispatchEvent(prefix + 'mouseout', ev);\n                        ev.cell = o;\n                        self.dispatchEvent(prefix + 'mouseover', ev);\n                    }\n                });\n            }\n            self.currentCell = o;\n            if (!self.hasFocus) {\n                return;\n            }\n            self.hovers = {};\n            if (!self.draggingItem\n                    && o\n                    && self.scrollModes.indexOf(o.context) === -1) {\n                self.dragItem = o;\n                self.dragMode = o.dragContext;\n                self.cursor = o.context;\n                if (o.context === 'cell' && o.data) {\n                    self.cursor = 'default';\n                    self.hovers[o.data[self.uniqueId]] = [o.columnIndex];\n                }\n                if ((self.selecting || self.reorderObject)\n                        && o.context === 'cell'\n                        && o.data) {\n                    sBounds = self.getSelectionBounds();\n                    delta = {\n                        x: Math.abs(self.dragStart.x - x),\n                        y: Math.abs(self.dragStart.y - y)\n                    };\n                    if (self.dragStartObject.columnIndex !== -1 && e.shiftKey) {\n                        self.dragStartObject = {\n                            rowIndex: self.activeCell.rowIndex,\n                            columnIndex: self.activeCell.columnIndex\n                        };\n                    }\n                    dragBounds = {\n                        top: Math.min(self.dragStartObject.rowIndex, o.rowIndex),\n                        left: Math.min(self.dragStartObject.columnIndex, o.columnIndex),\n                        bottom: Math.max(self.dragStartObject.rowIndex, o.rowIndex),\n                        right: Math.max(self.dragStartObject.columnIndex, o.columnIndex)\n                    };\n                    if (self.dragStartObject.columnIndex === -1) {\n                        dragBounds.left = -1;\n                        dragBounds.right = vs.length - 1;\n                        dragBounds.top = Math.min(sBounds.top, o.rowIndex);\n                        dragBounds.bottom = Math.max(sBounds.bottom, o.rowIndex);\n                    }\n                    if (self.dragStartObject.rowIndex !== o.rowIndex\n                                || self.dragStartObject.columnIndex !== o.columnIndex) {\n                        self.ignoreNextClick = true;\n                    }\n                    if (self.cellBoundaryCrossed || (delta.x === 0 && delta.y === 0) || (self.attributes.selectionMode === 'row')) {\n                        if (((self.attributes.selectionMode === 'row') || self.dragStartObject.columnIndex === -1)\n                                && self.rowBoundaryCrossed) {\n                            self.selectRow(o.rowIndex, ctrl, null, true);\n                        } else if (self.attributes.selectionMode !== 'row') {\n                            if (!self.dragAddToSelection && o.rowIndex !== undefined) {\n                                if (self.selections[o.rowIndex] && self.selections[o.rowIndex].indexOf(o.columnIndex) !== -1) {\n                                    self.selections[o.rowIndex].splice(self.selections[o.rowIndex].indexOf(o.columnIndex), 1);\n                                }\n                            } else {\n                                self.selections[o.rowIndex] = self.selections[o.rowIndex] || [];\n                                if (self.selections[o.rowIndex].indexOf(o.columnIndex) === -1) {\n                                    self.selections[o.rowIndex].push(o.columnIndex);\n                                }\n                            }\n                        }\n                    }\n                    if ((!self.selectionBounds || (dragBounds.top !== self.selectionBounds.top\n                            || dragBounds.left !== self.selectionBounds.left\n                            || dragBounds.bottom !== self.selectionBounds.bottom\n                            || dragBounds.right !== self.selectionBounds.right)) && !ctrl) {\n                        self.selections = [];\n                        sBounds = dragBounds;\n                        if (self.attributes.selectionMode === 'row') {\n                            for (i = sBounds.top; i <= sBounds.bottom; i += 1) {\n                                self.selectRow(i, true, null, true);\n                            }\n                        } else if (dragBounds.top !== -1) {\n                            self.selectArea(sBounds, true);\n                        }\n                    }\n                    self.autoScrollZone(e, x, y, ctrl);\n                }\n            }\n            self.cellBoundaryCrossed = false;\n            self.rowBoundaryCrossed = false;\n            self.columnBoundaryCrossed = false;\n            self.draw(true);\n        };\n        self.click = function (e, overridePos) {\n            var i,\n                ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                pos = overridePos || self.getLayerPos(e);\n            self.currentCell = self.getCellAt(pos.x, pos.y);\n            if (self.currentCell.grid !== undefined) {\n                return;\n            }\n            function checkSelectionChange() {\n                self.dispatchEvent('selectionchanged', {\n                    selectedData: self.getSelectedData(),\n                    selections: self.selections,\n                    selectionBounds: self.selectionBounds\n                });\n            }\n            if (self.input) {\n                self.endEdit();\n            }\n            if (self.ignoreNextClick) {\n                self.ignoreNextClick = false;\n                return;\n            }\n            i = self.currentCell;\n            if (self.dispatchEvent('click', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (['rowHeaderCell', 'columnHeaderCell'].indexOf(self.currentCell.style) === -1 && !ctrl) {\n                self.setActiveCell(i.columnIndex, i.rowIndex);\n            }\n            if (self.currentCell.context === 'cell') {\n                if (self.currentCell.style === 'cornerCell') {\n                    self.selectAll();\n                    self.draw();\n                    checkSelectionChange();\n                    return;\n                }\n                if (self.currentCell.style === 'columnHeaderCell') {\n                    if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                        if (self.orderBy === i.header.name) {\n                            self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                        } else {\n                            self.orderDirection = 'asc';\n                        }\n                        self.order(i.header.name, self.orderDirection);\n                        checkSelectionChange();\n                        return;\n                    }\n                    if (self.attributes.columnHeaderClickBehavior === 'select') {\n                        self.selectColumn(i.header.index, ctrl, e.shiftKey, true);\n                        checkSelectionChange();\n                        self.draw();\n                        return;\n                    }\n                }\n                self.selections[i.rowIndex] = self.selections[i.rowIndex] || [];\n                if (((self.attributes.selectionMode === 'row') || self.currentCell.style === 'rowHeaderCell')) {\n                    if (self.currentCell.style === 'rowHeaderCell'\n                            && self.attributes.tree && pos.x > 0\n                            && pos.x - self.currentCell.x < self.style.treeArrowWidth\n                            + self.style.treeArrowMarginLeft\n                            + self.style.treeArrowMarginRight + self.style.treeArrowClickRadius\n                            && pos.y - self.currentCell.y < self.style.treeArrowHeight\n                            + self.style.treeArrowMarginTop + self.style.treeArrowClickRadius\n                            && pos.y > 0) {\n                        self.toggleTree(i.rowIndex);\n                        return;\n                    }\n                }\n                if (e.shiftKey && !ctrl) {\n                    self.selectionBounds = self.getSelectionBounds();\n                    self.selectArea(undefined, false);\n                }\n            }\n            checkSelectionChange();\n            self.draw(true);\n        };\n        self.dragResizeColumn = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = self.resizingStartingWidth + pos.x - self.dragStart.x;\n            y = self.resizingStartingHeight + pos.y - self.dragStart.y;\n            if (x < self.style.minColumnWidth) {\n                x = self.style.minColumnWidth;\n            }\n            if (y < self.style.minRowHeight) {\n                y = self.style.minRowHeight;\n            }\n            if (self.dispatchEvent('resizecolumn', {x: x, y: y, draggingItem: self.draggingItem})) { return false; }\n            if (self.scrollBox.scrollLeft > self.scrollBox.scrollWidth - self.attributes.resizeScrollZone\n                    && self.dragMode === 'ew-resize') {\n                self.resize(true);\n                self.scrollBox.scrollLeft += x;\n            }\n            if (self.dragMode === 'ew-resize') {\n                self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] = x;\n                if (['rowHeaderCell', 'cornerCell'].indexOf(self.draggingItem.header.style) !== -1) {\n                    self.resize(true);\n                }\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.dragMode === 'ns-resize') {\n                if (self.draggingItem.rowOpen) {\n                    self.sizes.trees[self.draggingItem.data[self.uniqueId]] = y;\n                } else if (self.attributes.globalRowResize) {\n                    self.style.cellHeight = y;\n                } else {\n                    self.sizes.rows[self.draggingItem.data[self.uniqueId]] = y;\n                }\n                self.dispatchEvent('resizerow', {row: y});\n                self.resizeChildGrids();\n                return;\n            }\n            self.ellipsisCache = {};\n        };\n        self.stopDragResize = function () {\n            self.resize();\n            document.body.removeEventListener('mousemove', self.dragResizeColumn, false);\n            document.body.removeEventListener('mouseup', self.stopDragResize, false);\n            self.setStorageData();\n            self.draw(true);\n            self.ignoreNextClick = true;\n        };\n        self.scrollGrid = function (e) {\n            var pos = self.getLayerPos(e);\n            if (self.attributes.scrollPointerLock && self.pointerLockPosition\n                    && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                self.pointerLockPosition.x += e.movementX;\n                self.pointerLockPosition.y += e.movementY;\n                self.pointerLockPosition.x = Math.min(self.width - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.x));\n                self.pointerLockPosition.y = Math.min(self.height - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.y));\n                pos = self.pointerLockPosition;\n            }\n            self.scrollMode = self.getCellAt(pos.x, pos.y).context;\n            if (self.scrollMode === 'horizontal-scroll-box' && self.scrollStartMode !== 'horizontal-scroll-box') {\n                self.scrollStartMode = 'horizontal-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.left = self.scrollBox.scrollLeft;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box' && self.scrollStartMode !== 'vertical-scroll-box') {\n                self.scrollStartMode = 'vertical-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.top = self.scrollBox.scrollTop;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollStartMode === 'vertical-scroll-box'\n                    && self.scrollMode !== 'vertical-scroll-box') {\n                self.scrollMode = 'vertical-scroll-box';\n            }\n            if (self.scrollStartMode === 'horizontal-scroll-box'\n                    && self.scrollMode !== 'horizontal-scroll-box') {\n                self.scrollMode = 'horizontal-scroll-box';\n            }\n            clearTimeout(self.scrollTimer);\n            if (self.scrollModes.indexOf(self.scrollMode) === -1) {\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box') {\n                self.scrollBox.scrollTop = self.scrollStart.top + ((pos.y - self.dragStart.y)\n                    / self.scrollBox.heightBoxRatio);\n            } else if (self.scrollMode === 'vertical-scroll-top') {\n                self.scrollBox.scrollTop -= (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'vertical-scroll-bottom') {\n                self.scrollBox.scrollTop += (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n            if (self.scrollMode === 'horizontal-scroll-box') {\n                self.scrollBox.scrollLeft = self.scrollStart.left + ((pos.x - self.dragStart.x)\n                    / self.scrollBox.widthBoxRatio);\n            } else if (self.scrollMode === 'horizontal-scroll-right') {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'horizontal-scroll-left') {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.stopScrollGrid = function () {\n            clearTimeout(self.scrollTimer);\n            if (document.exitPointerLock) {\n                document.exitPointerLock();\n            }\n            document.body.removeEventListener('mousemove', self.scrollGrid, false);\n        };\n        self.dragReorder = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = pos.x - self.dragStart.x;\n            y = pos.y - self.dragStart.y;\n            if (!self.attributes.allowColumnReordering && self.dragMode === 'column-reorder') {\n                return;\n            }\n            if (!self.attributes.allowRowReordering && self.dragMode === 'row-reorder') {\n                return;\n            }\n            if (self.dispatchEvent('reordering', {\n                    NativeEvent: e,\n                    source: self.dragStartObject,\n                    target: self.currentCell,\n                    dragMode: self.dragMode\n                })) {\n                return;\n            }\n            if (Math.abs(x) > self.attributes.reorderDeadZone || Math.abs(y) > self.attributes.reorderDeadZone) {\n                self.reorderObject = self.draggingItem;\n                self.reorderTarget = self.currentCell;\n                self.reorderObject.dragOffset = {\n                    x: x,\n                    y: y\n                };\n                self.autoScrollZone(e, pos.x, pos.y, false);\n            }\n        };\n        self.stopDragReorder = function (e) {\n            var oIndex,\n                tIndex,\n                cr = {\n                    'row-reorder': self.orders.rows,\n                    'column-reorder': self.orders.columns\n                },\n                i = {\n                    'row-reorder': 'rowIndex',\n                    'column-reorder': 'columnIndex'\n                }[self.dragMode];\n            document.body.removeEventListener('mousemove', self.dragReorder, false);\n            document.body.removeEventListener('mouseup', self.stopDragReorder, false);\n            if (self.reorderObject\n                    && self.reorderTarget\n                    && ((self.dragMode === 'column-reorder' && self.reorderTarget.columnIndex > -1\n                        && self.reorderTarget.columnIndex < self.getVisibleSchema().length)\n                    || (self.dragMode === 'row-reorder' && self.reorderTarget.rowIndex > -1\n                        && self.reorderTarget.rowIndex < self.data.length))\n                    && self.reorderObject[i] !== self.reorderTarget[i]\n                    && !self.dispatchEvent('reorder', {\n                        NativeEvent: e,\n                        source: self.reorderObject,\n                        target: self.reorderTarget,\n                        dragMode: self.dragMode\n                    })) {\n                self.ignoreNextClick = true;\n                oIndex = cr[self.dragMode].indexOf(self.reorderObject[i]);\n                tIndex = cr[self.dragMode].indexOf(self.reorderTarget[i]);\n                cr[self.dragMode].splice(oIndex, 1);\n                cr[self.dragMode].splice(tIndex, 0, self.reorderObject[i]);\n                self.setStorageData();\n            }\n            self.reorderObject = undefined;\n            self.reorderTarget = undefined;\n            self.draw(true);\n        };\n        self.dragMove = function (e) {\n            if (self.dispatchEvent('moving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.moveOffset = {\n                x: self.currentCell.columnIndex - self.dragStartObject.columnIndex,\n                y: self.currentCell.rowIndex - self.dragStartObject.rowIndex\n            };\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopDragMove = function (e) {\n            document.body.removeEventListener('mousemove', self.dragMove, false);\n            document.body.removeEventListener('mouseup', self.stopDragMove, false);\n            var b = self.getSelectionBounds();\n            if (self.dispatchEvent('endmove', {NativeEvent: e, cell: self.currentCell})) {\n                self.movingSelection = undefined;\n                self.moveOffset = undefined;\n                self.draw(true);\n                return;\n            }\n            if (self.moveOffset) {\n                self.moveTo(self.movingSelection, b.left + self.moveOffset.x, b.top + self.moveOffset.y);\n                self.moveSelection(self.moveOffset.x, self.moveOffset.y);\n            }\n            self.movingSelection = undefined;\n            self.moveOffset = undefined;\n            self.draw(true);\n        };\n        self.freezeMove = function (e) {\n            if (self.dispatchEvent('freezemoving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.ignoreNextClick = true;\n            self.freezeMarkerPosition = pos;\n            if (self.currentCell && self.currentCell.rowIndex !== undefined && self.dragMode === 'frozen-row-marker') {\n                self.scrollBox.scrollTop = 0;\n                self.frozenRow = self.currentCell.rowIndex + 1;\n            }\n            if (self.currentCell && self.currentCell.columnIndex !== undefined && self.dragMode === 'frozen-column-marker') {\n                self.scrollBox.scrollLeft = 0;\n                self.frozenColumn = self.currentCell.columnIndex + 1;\n            }\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopFreezeMove = function (e) {\n            document.body.removeEventListener('mousemove', self.freezeMove, false);\n            document.body.removeEventListener('mouseup', self.stopFreezeMove, false);\n            self.freezeMarkerPosition = undefined;\n            if (self.dispatchEvent('endfreezemove', {NativeEvent: e})) {\n                self.frozenRow = self.startFreezeMove.x;\n                self.frozenColumn = self.startFreezeMove.y;\n                self.draw(true);\n                return;\n            }\n            self.draw(true);\n        };\n        self.mousedown = function (e, overridePos) {\n            self.lastMouseDownTarget = e.target;\n            if (self.dispatchEvent('mousedown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (e.button === 2 || self.input) { return; }\n            var ctrl = (e.ctrlKey || e.metaKey),\n                move = /-move/.test(self.dragMode),\n                freeze = /frozen-row-marker|frozen-column-marker/.test(self.dragMode),\n                resize = /-resize/.test(self.dragMode);\n            self.dragStart = overridePos || self.getLayerPos(e);\n            self.scrollStart = {\n                left: self.scrollBox.scrollLeft,\n                top: self.scrollBox.scrollTop\n            };\n            self.dragStartObject = self.getCellAt(self.dragStart.x, self.dragStart.y);\n            self.dragAddToSelection = !self.dragStartObject.selected;\n            if (!ctrl && !e.shiftKey && !/(vertical|horizontal)-scroll-(bar|box)/\n                    .test(self.dragStartObject.context)\n                    && self.currentCell\n                    && !self.currentCell.isColumnHeader\n                    && !move\n                    && !freeze\n                    && !resize) {\n                self.selections = [];\n            }\n            if (self.dragStartObject.isGrid) {\n                return;\n            }\n            if (self.scrollModes.indexOf(self.dragStartObject.context) !== -1) {\n                self.scrollMode = self.dragStartObject.context;\n                self.scrollStartMode = self.dragStartObject.context;\n                self.scrollGrid(e);\n                if (self.attributes.scrollPointerLock\n                        && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                    self.pointerLockPosition = {\n                        x: self.dragStart.x,\n                        y: self.dragStart.y\n                    };\n                    self.canvas.requestPointerLock();\n                }\n                document.body.addEventListener('mousemove', self.scrollGrid, false);\n                document.body.addEventListener('mouseup', self.stopScrollGrid, false);\n                self.ignoreNextClick = true;\n                return;\n            }\n            if (self.dragMode === 'cell') {\n                self.selecting = true;\n                if ((self.attributes.selectionMode === 'row' || self.dragStartObject.columnIndex === -1)\n                        && self.dragStartObject.rowIndex > -1) {\n                    self.selectRow(self.dragStartObject.rowIndex, ctrl, null, true);\n                } else if (self.attributes.selectionMode !== 'row') {\n                    self.mousemove(e);\n                }\n                return;\n            }\n            if (move) {\n                self.draggingItem = self.dragItem;\n                self.movingSelection = self.selections.concat([]);\n                self.dragging = self.dragStartObject;\n                if (self.dispatchEvent('beginmove', {NativeEvent: e, cell: self.currentCell})) { return; }\n                document.body.addEventListener('mousemove', self.dragMove, false);\n                document.body.addEventListener('mouseup', self.stopDragMove, false);\n                return self.mousemove(e);\n            }\n            if (freeze) {\n                self.draggingItem = self.dragItem;\n                self.startFreezeMove = {\n                    x: self.frozenRow,\n                    y: self.frozenColumn\n                };\n                if (self.dispatchEvent('beginfreezemove', {NativeEvent: e})) { return; }\n                document.body.addEventListener('mousemove', self.freezeMove, false);\n                document.body.addEventListener('mouseup', self.stopFreezeMove, false);\n                return self.mousemove(e);\n            }\n            if (resize) {\n                self.draggingItem = self.dragItem;\n                if (self.draggingItem.rowOpen) {\n                    self.resizingStartingHeight = self.sizes.trees[self.draggingItem.data[self.uniqueId]];\n                } else {\n                    self.resizingStartingHeight = self.sizes.rows[self.draggingItem.data[self.uniqueId]] || self.style.cellHeight;\n                }\n                self.resizingStartingWidth = self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] || self.draggingItem.width;\n                document.body.addEventListener('mousemove', self.dragResizeColumn, false);\n                document.body.addEventListener('mouseup', self.stopDragResize, false);\n                return;\n            }\n            if (['row-reorder', 'column-reorder'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragStartObject;\n                document.body.addEventListener('mousemove', self.dragReorder, false);\n                document.body.addEventListener('mouseup', self.stopDragReorder, false);\n                return;\n            }\n        };\n        self.mouseup = function (e) {\n            clearTimeout(self.scrollTimer);\n            self.cellBoundaryCrossed = true;\n            self.rowBoundaryCrossed = true;\n            self.columnBoundaryCrossed = true;\n            self.selecting = undefined;\n            self.draggingItem = undefined;\n            self.dragStartObject = undefined;\n            if (self.dispatchEvent('mouseup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            if (self.currentCell && self.currentCell.grid !== undefined) {\n                return;\n            }\n            if (self.contextMenu || self.input) { return; }\n            if (self.dragStart && self.isInGrid(self.dragStart)) {\n                self.controlInput.focus();\n            }\n            e.preventDefault();\n        };\n        self.keydown = function (e) {\n            var i,\n                x = self.activeCell.columnIndex,\n                y = self.activeCell.rowIndex,\n                ctrl = (e.ctrlKey || e.metaKey),\n                last = self.data.length - 1,\n                cols = self.getVisibleSchema().length - 1;\n            if (self.dispatchEvent('keydown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            if (self.attributes.showNewRow) {\n                last += 1;\n            }\n            if (e.keyCode === 9) {\n                e.preventDefault();\n            }\n            // esc\n            if (e.keyCode === 27) {\n                self.selections = [];\n                self.draw(true);\n            // ctrl + a\n            } else if (ctrl && e.keyCode === 65) {\n                self.selectAll();\n            //ArrowDown\n            } else if (e.keyCode === 40) {\n                y += 1;\n            //ArrowUp\n            } else if (e.keyCode === 38) {\n                y -= 1;\n            //ArrowLeft Tab\n            } else if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {\n                x -= 1;\n            //ArrowRight Tab\n            } else if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {\n                x += 1;\n            //PageUp\n            } else if (e.keyCode === 33) {\n                y -= self.page;\n                e.preventDefault();\n            //PageDown\n            } else if (e.keyCode === 34) {\n                y += self.page;\n                e.preventDefault();\n            //Home ArrowUp\n            } else if (e.keyCode === 36 || (ctrl && e.keyCode === 38)) {\n                y = 0;\n            //End ArrowDown\n            } else if (e.keyCode === 35 || (ctrl && e.keyCode === 40)) {\n                y = self.data.length - 1;\n            //ArrowRight\n            } else if (ctrl && e.keyCode === 39) {\n                x = cols;\n            //ArrowLeft\n            } else if (ctrl && e.keyCode === 37) {\n                x = 0;\n            }\n            //Enter\n            if (e.keyCode === 13) {\n                return self.beginEditAt(x, y);\n            }\n            //Space\n            if (e.keyCode === 32) {\n                self.selections = [];\n                self.selections[Math.max(y, 0)] = [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                if (self.attributes.selectionMode === 'row') {\n                    for (i = self.selectionBounds.top; i <= self.selectionBounds.bottom; i += 1) {\n                        self.selectRow(i, ctrl, null, true);\n                    }\n                } else {\n                    self.selectArea(undefined, ctrl);\n                }\n                e.preventDefault();\n                self.draw(true);\n                return;\n            }\n            if (x < 0) {\n                x = 0;\n            }\n            if (y > last) {\n                y = last;\n            }\n            if (y < 0) {\n                y = 0;\n            }\n            if (x > cols) {\n                x = cols;\n            }\n            // Arrows\n            if (e.shiftKey && [37, 38, 39, 40].indexOf(e.keyCode) !== -1) {\n                self.selections[Math.max(y, 0)] = self.selections[Math.max(y, 0)] || [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                self.selectArea(undefined, ctrl);\n                self.draw(true);\n            }\n            if (x !== self.activeCell.columnIndex || y !== self.activeCell.rowIndex) {\n                self.scrollIntoView(x !== self.activeCell.columnIndex ? x : undefined, y !== self.activeCell.rowIndex ? y : undefined);\n                self.setActiveCell(x, y);\n                if (!e.shiftKey && self.attributes.selectionFollowsActiveCell) {\n                    if (!ctrl) {\n                        self.selections = [];\n                    }\n                    self.selections[y] = self.selections[y] || [];\n                    self.selections[y].push(x);\n                    self.dispatchEvent('selectionchanged', {\n                        selectedData: self.getSelectedData(),\n                        selections: self.selections,\n                        selectionBounds: self.selectionBounds\n                    });\n                }\n                self.draw(true);\n            }\n        };\n        self.keyup = function (e) {\n            if (self.dispatchEvent('keyup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n        };\n        self.keypress = function (e) {\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.dispatchEvent('keypress', {NativeEvent: e, cell: self.currentCell})) { return; }\n        };\n        self.dblclick = function (e) {\n            if (self.dispatchEvent('dblclick', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'columnHeaderCell') {\n                self.fitColumnToValues(self.currentCell.header.name);\n            } else if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'cornerCell') {\n                self.autosize();\n            } else if (['cell', 'activeCell'].indexOf(self.currentCell.style) !== -1) {\n                self.beginEditAt(self.currentCell.columnIndex, self.currentCell.rowIndex);\n            }\n        };\n        self.scrollWheel = function (e) {\n            var l,\n                t,\n                deltaX = e.deltaX === undefined ? e.NativeEvent.deltaX : e.deltaX,\n                deltaY = e.deltaY === undefined ? e.NativeEvent.deltaY : e.deltaY,\n                deltaMode = e.deltaMode === undefined ? e.NativeEvent.deltaMode : e.deltaMode;\n            if (wheeling) {\n                return;\n            }\n            if (self.dispatchEvent('wheel', {NativeEvent: e})) {\n                return;\n            }\n            e = e.NativeEvent || e;\n            self.touchHaltAnimation = true;\n            l = self.scrollBox.scrollLeft;\n            t = self.scrollBox.scrollTop;\n            if (self.hasFocus) {\n                //BUG Issue 42: https://github.com/TonyGermaneri/canvas-datagrid/issues/42\n                //https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\n                if (deltaMode === 1) {\n                    // line mode = 17 pixels per line\n                    deltaY = deltaY * 17;\n                }\n                if ((self.scrollBox.scrollTop < self.scrollBox.scrollHeight && deltaY > 0)\n                        || (self.scrollBox.scrollLeft < self.scrollBox.scrollWidth && deltaX > 0)\n                        || (self.scrollBox.scrollTop > 0 && deltaY < 0)\n                        || (self.scrollBox.scrollLeft > 0 && deltaX < 0)) {\n                    e.preventDefault(e);\n                }\n                wheeling = setTimeout(function () {\n                    wheeling = undefined;\n                    self.scrollBox.scrollTo(deltaX + l, deltaY + t);\n                }, 1);\n            }\n        };\n        self.pasteItem = function (clipData, x, y, mimeType) {\n            var l, s = self.getVisibleSchema(), yi = y - 1, sel = [];\n            function normalizeRowData(importingRow, existingRow, offsetX, schema, mimeType, rowIndex) {\n                var r = existingRow;\n                if (!Array.isArray(importingRow) && importingRow !== null && typeof importingRow === 'object') {\n                    importingRow = Object.keys(importingRow).map(function (colKey) {\n                        return importingRow[colKey];\n                    });\n                }\n                if (/^text\\/html/.test(mimeType)) {\n                    importingRow = importingRow.substring(4, importingRow.length - 5).split('</td><td>');\n                }\n                if (typeof importingRow === 'string') {\n                    importingRow = [importingRow];\n                }\n                sel[rowIndex] = [];\n                importingRow.forEach(function (cellData, colIndex) {\n                    var cName = schema[colIndex + offsetX].name;\n                    if (importingRow[colIndex] === undefined || importingRow[colIndex] === null) {\n                        r[cName] = existingRow[cName];\n                        return;\n                    }\n                    sel[rowIndex].push(colIndex + offsetX);\n                    r[cName] = importingRow[colIndex];\n                });\n                return r;\n            }\n            if (/^text\\/html/.test(mimeType)) {\n                if (!/^(<meta[^>]+>)?<table>/.test(clipData.substring(0, 29))) {\n                    console.warn('Unrecognized HTML format.  HTML must be a simple table, e.g.: <table><tr><td>data</td></tr></table>.  Data with the mime type text/html not in this format will not be imported as row data.');\n                    return;\n                }\n                // strip table beginning and ending off, then split at rows\n                clipData = clipData.substring(clipData.indexOf('<table><tr>') + 11, clipData.length - 13).split('</tr><tr>');\n            } else {\n                clipData = clipData.split('\\n');\n            }\n            l = clipData.length;\n            clipData.forEach(function (rowData) {\n                yi += 1;\n                var i = self.orders.columns[yi];\n                self.data[i] = normalizeRowData(rowData, self.data[i], x, s, mimeType, i);\n            });\n            self.selections = sel;\n            return l;\n        };\n        self.paste = function (e) {\n            var d;\n            function getItem(dti) {\n                var type = dti.type;\n                dti.getAsString(function (s) {\n                    self.pasteItem(s, self.activeCell.columnIndex, self.activeCell.rowIndex, type);\n                    self.draw();\n                });\n            }\n            d = Array.prototype.filter.call(e.clipboardData.items, function (dti) {\n                return dti.type === 'text/html';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/csv';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/plain';\n            })[0];\n            if (!d) {\n                console.warn('Cannot find supported clipboard data type.  Supported types are text/html, text/csv, text/plain.');\n                return;\n            }\n            getItem(d);\n        };\n        self.cut = function (e) {\n            self.copy(e);\n            self.forEachSelectedCell(function (data, index, colName) {\n                data[index][colName] = '';\n            });\n        };\n        self.copy = function (e) {\n            if (self.dispatchEvent('copy', {NativeEvent: e})) { return; }\n            if (!self.hasFocus || !e.clipboardData) { return; }\n            var t,\n                d,\n                rows = [],\n                trows = [],\n                sData = self.getSelectedData();\n            function fCopyCell(d) {\n                d = d === null || d === undefined ? '' : d;\n                return '<td>' + (typeof d === 'string' ? d.replace(/</g, '&lt;').replace(/>/g, '&gt;') : d) + '</td>';\n            }\n            if (sData.length > 0) {\n                sData.forEach(function (row) {\n                    if (row) {\n                        // r = array for HTML, rt = array for plain text\n                        var r = [],\n                            rt = [];\n                        Object.keys(row).forEach(function (key) {\n                            // escape strings\n                            if (row[key] !== null\n                                    && row[key] !== false\n                                    && row[key] !== undefined\n                                    && row[key].replace) {\n                                rt.push('\"' + row[key].replace(/\"/g, '\"\"') + '\"');\n                                r.push(fCopyCell(row[key]));\n                                return;\n                            }\n                            rt.push(row[key]);\n                            r.push(fCopyCell(row[key]));\n                        });\n                        rows.push(r.join(''));\n                        trows.push(rt.join(','));\n                    }\n                });\n                d = '<table><tr>' + rows.join('</tr><tr>') + '</tr></table>';\n                t = trows.join('\\n');\n                e.clipboardData.setData('text/html', d);\n                e.clipboardData.setData('text/plain', t);\n                e.clipboardData.setData('text/csv', t);\n                e.clipboardData.setData('application/json', JSON.stringify(sData));\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var touchTimerMs = 50,\n            touchScrollTimeout;\n        self.scrollAnimation = {};\n        self.touchDelta = {};\n        self.touchAnimateTo = {};\n        self.animationFrames = 0;\n        self.getTouchPos = function (e, touchIndex) {\n            var t = touchIndex ? e.touches[touchIndex] : e.touches[0],\n                rect = self.canvas.getBoundingClientRect(),\n                pos;\n            if (!t) { return; }\n            pos = {\n                x: t.clientX - rect.left,\n                y: t.clientY - rect.top\n            };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        // shamelessly stolen from from https://gist.github.com/gre/1650294\n        self.easingFunctions = {\n            linear: function (t) { return t; },\n            easeInQuad: function (t) { return t * t; },\n            easeOutQuad: function (t) { return t * (2 - t); },\n            easeInOutQuad: function (t) { return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t; },\n            easeInCubic: function (t) { return t * t * t; },\n            easeOutCubic: function (t) { return (--t) * t * t + 1; },\n            easeInOutCubic: function (t) { return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1; },\n            easeInQuart: function (t) { return t * t * t * t; },\n            easeOutQuart: function (t) { return 1 - (--t) * t * t * t; },\n            easeInOutQuart: function (t) { return t < 0.5 ? 8 * t  * t  * t * t : 1 - 8 * (--t) * t * t * t; },\n            easeInQuint: function (t) { return t * t * t * t * t; },\n            easeOutQuint: function (t) { return 1 + (--t) * t *  t * t * t; },\n            easeInOutQuint: function (t) { return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t; }\n        };\n        self.easing = function (t, b, c, d) {\n            return c * self.easingFunctions[self.attributes.touchEasingMethod](t / d) + b;\n        };\n        self.calculatePPSTimed = function () {\n            self.xPPST = -((self.touchDelta.x - self.touchSigmaTimed.x) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.yPPST = -((self.touchDelta.y - self.touchSigmaTimed.y) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.touchSigmaTimed = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.calculatePPS = function () {\n            self.xPPS = -((self.touchDelta.x - self.touchSigma.x) / (self.touchDelta.t - self.touchSigma.t));\n            self.yPPS = -((self.touchDelta.y - self.touchSigma.y) / (self.touchDelta.t - self.touchSigma.t));\n            self.touchSigma = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.touchEndAnimation = function () {\n            if (!self.canvas || !self.scrollBox.scrollTo) { return requestAnimationFrame(self.touchEndAnimation); }\n            var n = performance.now(),\n                d = self.attributes.touchReleaseAnimationDurationMs,\n                t;\n            t = n - self.touchDelta.t;\n            self.animationFrames += 1;\n            self.scrollAnimation.x = self.easing(t, self.touchDelta.scrollLeft, self.touchAnimateTo.x, d);\n            self.scrollAnimation.y = self.easing(t, self.touchDelta.scrollTop, self.touchAnimateTo.y, d);\n            if (t > d || (self.scrollAnimation.y === self.scrollBox.scrollTop\n                    && self.scrollAnimation.x === self.scrollBox.scrollLeft) || self.stopAnimation) {\n                return;\n            }\n            self.scrollBox.scrollTo(self.scrollAnimation.x, self.scrollAnimation.y);\n            requestAnimationFrame(self.touchEndAnimation);\n        };\n        self.touchEditCell = function (cell) {\n            self.beginEditAt(cell.columnIndex, cell.rowIndex);\n        };\n        self.touchCell = function (e) {\n            return function () {\n                clearInterval(self.calculatePPSTimer);\n                var i, pos = self.getTouchPos(e);\n                if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone) {\n                    i = self.getCellAt(pos.x, pos.y);\n                    if (!i) { return; }\n                    if (self.touchingCell && self.touchingCell.rowIndex === i.rowIndex\n                            && self.touchingCell.columnIndex === i.columnIndex) {\n                        self.touchEditCell(i);\n                        return;\n                    }\n                    if (self.input && self.input.editCell) {\n                        self.endEdit();\n                    }\n                    self.touchingCell = i;\n                    self.selectArea({\n                        top: i.rowIndex,\n                        bottom: i.rowIndex,\n                        left: i.columnIndex,\n                        right: i.columnIndex\n                    });\n                    self.draw(true);\n                }\n            };\n        };\n        self.touchstart = function (e) {\n            if (e.changedTouches[0]) {\n                self.touchStart = self.getTouchPos(e);\n                self.startingCell = self.getCellAt(self.touchStart.x, self.touchStart.y, true);\n            }\n            if (self.dispatchEvent('touchstart', {NativeEvent: e, cell: self.startingCell})) { return; }\n            self.disposeContextMenu();\n            clearInterval(self.calculatePPSTimer);\n            clearTimeout(self.touchContextTimeout);\n            self.touchStartEvent = e;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (e.touches.length === 1 && e.changedTouches[0] && !self.zoomAltered) {\n                self.touchLength = 1;\n                self.touchStart = self.touchStart || self.touchStart1;\n                self.touchScrollStart = {\n                    x: self.scrollBox.scrollLeft,\n                    y: self.scrollBox.scrollTop,\n                    t: performance.now()\n                };\n                self.touchDelta = {\n                    x: 0,\n                    y: 0,\n                    scrollLeft: self.scrollBox.scrollLeft,\n                    scrollTop: self.scrollBox.scrollTop,\n                    t: self.touchScrollStart.t\n                };\n                self.touchSigma = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchSigmaTimed = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchContextTimeout = setTimeout(function () {\n                    self.contextmenuEvent(e, self.touchStart);\n                }, self.attributes.touchContextMenuTimeMs);\n                self.calculatePPSTimer = setInterval(self.calculatePPSTimed, touchTimerMs);\n                if (self.startingCell && (self.startingCell.isGrid || ['tree', 'inherit'].indexOf(self.startingCell.context) !== -1)) {\n                    self.hasFocus = false;\n                    return;\n                }\n                self.hasFocus = true;\n                if (self.startingCell.isHeader) {\n                    if (self.startingCell.isRowHeader) {\n                        self.selectArea({\n                            top: self.startingCell.rowIndex,\n                            bottom: self.startingCell.rowIndex,\n                            left: 0,\n                            right: self.getVisibleSchema().length - 1,\n                        });\n                        self.draw(true);\n                    } else if (self.startingCell.isColumnHeader) {\n                        if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                            if (self.orderBy === self.startingCell.header.name) {\n                                self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                            } else {\n                                self.orderDirection = 'asc';\n                            }\n                            self.order(self.startingCell.header.name, self.orderDirection);\n                        }\n                        if (self.attributes.columnHeaderClickBehavior === 'select') {\n                            self.selectArea({\n                                top: 0,\n                                bottom: self.data.length - 1,\n                                left: self.startingCell.columnIndex,\n                                right: self.startingCell.columnIndex,\n                            });\n                            self.draw(true);\n                        }\n                    }\n                    self.touchEndEvents(e);\n                    return;\n                }\n            }\n            if (self.zoomAltered) { return; }\n            document.body.addEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.addEventListener('touchend', self.touchend, false);\n            document.body.addEventListener('touchcancel', self.touchcancel, false);\n            self.draw(true);\n        };\n        self.touchSelect = function (cell, handleType) {\n            if (cell.rowIndex === undefined || cell.columnIndex === undefined) { return; }\n            self.touchSelecting = true;\n            var bounds = self.getSelectionBounds();\n            if (handleType === 'selection-handle-bl'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex <= bounds.right) {\n                bounds.bottom = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tl'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex <= bounds.right) {\n                bounds.top = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tr'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex >= bounds.left) {\n                bounds.top = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            } else if (handleType === 'selection-handle-br'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex >= bounds.left) {\n                bounds.bottom = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            }\n            if (self.attributes.selectionMode === 'row' || cell.rowIndex === -1) {\n                bounds.left = 0;\n                bounds.right = self.getSchema().length - 1;\n            } else {\n                bounds.left = Math.max(0, bounds.left);\n            }\n            self.selectArea(bounds);\n            self.draw(true);\n        };\n        self.touchmove = function (e) {\n            var ch, rw, rScrollZone, lScrollZone, bScrollZone, tScrollZone, sbw, t1, t2;\n            if (self.dispatchEvent('beforetouchmove', {NativeEvent: e})) { return; }\n            clearTimeout(touchScrollTimeout);\n            if (e.changedTouches[0]) {\n                self.touchPosition = self.getTouchPos(e);\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = self.getTouchPos(e, 1);\n            }\n            if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) > self.attributes.touchDeadZone) {\n                clearTimeout(self.touchContextTimeout);\n            }\n            if (e.touches.length === 2 && self.touchPosition && self.touchPosition1) {\n                t1 = self.touchPosition.y;\n                t2 = self.touchPosition1.y;\n                if (!self.zoomDeltaStart) {\n                    self.zoomDeltaStart = Math.abs(t1 - t2);\n                    self.startScale = self.scale;\n                }\n                self.touchLength = 2;\n                self.scaleDelta = self.zoomDeltaStart - Math.abs(t1 - t2);\n                self.scale = self.startScale - (self.scaleDelta * self.attributes.touchZoomSensitivity);\n                self.scale = Math.min(Math.max(self.scale, self.attributes.touchZoomMin), self.attributes.touchZoomMax);\n                self.zoomAltered = true;\n                self.resize(true);\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.zoomAltered) { return; }\n            self.touchLength = 1;\n            self.touchPosition = self.touchPosition || self.touchPosition1;\n            ch = self.getColumnHeaderCellHeight();\n            rw = self.getRowHeaderCellWidth();\n            rScrollZone = self.width - self.style.scrollBarWidth - self.touchPosition.x < self.attributes.selectionScrollZone;\n            lScrollZone = self.touchPosition.x - rw < self.attributes.selectionScrollZone;\n            bScrollZone = self.height - self.style.scrollBarWidth - self.touchPosition.y < self.attributes.selectionScrollZone;\n            tScrollZone = self.touchPosition.y - ch < self.attributes.selectionScrollZone;\n            sbw = self.style.scrollBarWidth;\n            function touchScroll() {\n                var x = self.scrollBox.scrollLeft,\n                    y = self.scrollBox.scrollTop;\n                x += (rScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y += (bScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y -= (tScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                x -= (lScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                self.scrollBox.scrollTo(x, y);\n                touchScrollTimeout = setTimeout(touchScroll, self.attributes.scrollRepeatRate);\n            }\n            e.stopPropagation();\n            self.touchDelta = {\n                x: self.touchPosition.x - self.touchStart.x,\n                y: self.touchPosition.y - self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: performance.now()\n            };\n            self.currentCell = self.getCellAt(self.touchPosition.x, self.touchPosition.y);\n            self.dispatchEvent('touchmove', {NativeEvent: e, cell: self.currentCell});\n            self.calculatePPS();\n            self.touchDuration = performance.now() - self.touchScrollStart.t;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            if (self.touchSelecting && (rScrollZone || lScrollZone || tScrollZone || bScrollZone)) {\n                touchScroll();\n            }\n            if (/vertical-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollTop = self.scrollBox.scrollHeight\n                    * ((self.touchPosition.y - ch - sbw) / (self.scrollBox.height - sbw - ch));\n                return;\n            }\n            if (/horizontal-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollLeft = self.scrollBox.scrollWidth\n                    * ((self.touchPosition.x - rw - sbw) / (self.scrollBox.width - sbw - rw));\n                return;\n            }\n            if (/selection-handle-/.test(self.startingCell.style)) {\n                self.touchSelect(self.currentCell, self.startingCell.style);\n                return;\n            }\n            self.scrollBox.scrollTo(self.touchScrollStart.x - self.touchDelta.x,\n                self.touchScrollStart.y - self.touchDelta.y);\n            self.draw(true);\n        };\n        self.touchEndEvents = function (e) {\n            self.zoomDeltaStart = undefined;\n            self.touchSelecting = false;\n            clearInterval(self.touchScrollTimeout);\n            clearInterval(self.touchContextTimeout);\n            clearInterval(self.calculatePPSTimer);\n            e.stopPropagation();\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n        };\n        self.touchend = function (e) {\n            if (self.dispatchEvent('touchend', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.zoomDeltaStart = undefined;\n            if (e.changedTouches[0]) {\n                self.touchPosition = undefined;\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = undefined;\n            }\n            if (self.zoomAltered) {\n                if (e.touches.length === 0) {\n                    self.zoomAltered = false;\n                }\n                return;\n            }\n            var dz = Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone;\n            if (isNaN(self.xPPS)) {\n                self.xPPS = 0;\n            }\n            if (isNaN(self.yPPS)) {\n                self.yPPS = 0;\n            }\n            if (isNaN(self.xPPST)) {\n                self.xPPST = 0;\n            }\n            if (isNaN(self.yPPST)) {\n                self.yPPST = 0;\n            }\n            self.touchAnimateTo.x = self.xPPS * self.attributes.touchReleaseAcceleration;\n            self.touchAnimateTo.y = self.yPPS * self.attributes.touchReleaseAcceleration;\n            self.calculatePPSTimed();\n            if (dz && !self.contextMenu) {\n                self.touchCell(self.touchStartEvent)();\n            } else if (self.animationFrames === 0\n                    && (Math.abs(self.xPPST) > self.attributes.scrollAnimationPPSThreshold\n                        || Math.abs(self.yPPST) > self.attributes.scrollAnimationPPSThreshold)\n                    && !/-scroll-/.test(self.startingCell.style)\n                    && !dz) {\n                self.stopAnimation = false;\n                self.touchEndAnimation();\n            }\n            self.touchEndEvents(e);\n        };\n        self.touchcancel = function (e) {\n            if (self.dispatchEvent('touchcancel', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.touchEndEvents(e);\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals HTMLElement: false, Reflect: false, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self, ctor) {\n        self.scale = 1;\n        self.orders = {\n            rows: [],\n            columns: []\n        };\n        self.cellGridAttributes = {};\n        self.treeGridAttributes = {};\n        self.visibleRowHeights = [];\n        self.hasFocus = false;\n        self.activeCell = {\n            columnIndex: 0,\n            rowIndex: 0\n        };\n        self.innerHTML = '';\n        self.storageName = 'canvasDataGrid';\n        self.invalidSearchExpClass = 'canvas-datagrid-invalid-search-regExp';\n        self.localStyleLibraryStorageKey = 'canvas-datagrid-user-style-library';\n        self.uniqueId = '_canvasDataGridUniqueId';\n        self.orderBy = null;\n        self.orderDirection = 'asc';\n        self.columnFilters = {};\n        self.filters = {};\n        self.frozenRow = 0;\n        self.frozenColumn = 0;\n        self.ellipsisCache = {};\n        self.scrollCache = { x: [], y: [] };\n        self.scrollBox = {};\n        self.visibleRows = [];\n        self.sizes = {\n            rows: {},\n            columns: {},\n            trees: {}\n        };\n        self.currentFilter = function () {\n            return true;\n        };\n        self.selections = [];\n        self.hovers = {};\n        self.attributes = {};\n        self.style = {};\n        self.formatters = {};\n        self.sorters = {};\n        self.schemaHashes = {};\n        self.events = {};\n        self.uId = 0;\n        self.changes = [];\n        self.scrollIndexTop = 0;\n        self.scrollPixelTop = 0;\n        self.scrollIndexLeft = 0;\n        self.scrollPixelLeft = 0;\n        self.childGrids = {};\n        self.openChildren = {};\n        self.scrollModes = [\n            'vertical-scroll-box',\n            'vertical-scroll-top',\n            'vertical-scroll-bottom',\n            'horizontal-scroll-box',\n            'horizontal-scroll-right',\n            'horizontal-scroll-left'\n        ];\n        self.componentL1Events = {};\n        self.eventNames = ['afterdraw', 'afterrendercell', 'attributechanged', 'beforebeginedit',\n            'beforecreatecellgrid', 'beforedraw', 'beforeendedit', 'beforerendercell', 'beforerendercellgrid',\n            'beginedit', 'cellmouseout', 'cellmouseover', 'click', 'collapsetree', 'contextmenu', 'copy',\n            'datachanged', 'dblclick', 'endedit', 'expandtree', 'formatcellvalue', 'keydown', 'keypress',\n            'keyup', 'mousedown', 'mousemove', 'mouseup', 'newrow', 'ordercolumn', 'rendercell', 'rendercellgrid',\n            'renderorderbyarrow', 'rendertext', 'rendertreearrow', 'reorder', 'reordering', 'resize',\n            'resizecolumn', 'resizerow', 'schemachanged', 'scroll', 'selectionchanged', 'stylechanged',\n            'touchcancel', 'touchend', 'touchmove', 'touchstart', 'wheel'];\n        self.mouse = { x: 0, y: 0};\n        self.getSelectedData = function (expandToRow) {\n            var d = [], s = expandToRow ? self.getSchema() : self.getVisibleSchema(), l = self.data.length;\n            if (l === 0) { return []; }\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    var orderedIndex;\n                    if (col === -1 || !s[col]) { return; }\n                    orderedIndex = self.orders.columns[col];\n                    d[index][s[orderedIndex].name] = self.data[index][s[orderedIndex].name];\n                });\n            });\n            return d;\n        };\n        self.fillArray = function (low, high, step, def) {\n            step = step || 1;\n            var i = [], x;\n            for (x = low; x <= high; x += step) {\n                i[x] = def === undefined ? x : (typeof def === 'function' ? def(x) : def);\n            }\n            return i;\n        };\n        self.getColumnHeaderCellHeight = function () {\n            if (!self.attributes.showColumnHeaders) { return 0; }\n            return ((self.sizes.rows[-1] || self.style.columnHeaderCellHeight) * self.scale);\n        };\n        self.getRowHeaderCellWidth = function () {\n            if (!self.attributes.showRowHeaders) { return 0; }\n            return (self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth) * self.scale;\n        };\n        self.setStorageData = function () {\n            if (!self.attributes.saveAppearance || !self.attributes.name) { return; }\n            var visibility = {};\n            self.getSchema().forEach(function (column) {\n                visibility[column.name] = !column.hidden;\n            });\n            localStorage.setItem(self.storageName + '-' + self.attributes.name, JSON.stringify({\n                sizes: {\n                    rows: self.sizes.rows,\n                    columns: self.sizes.columns\n                },\n                orders: {\n                    rows: self.orders.rows,\n                    columns: self.orders.columns\n                },\n                orderBy: self.orderBy,\n                orderDirection: self.orderDirection,\n                visibility: visibility\n            }));\n        };\n        self.getSchema = function () {\n            return self.schema || self.tempSchema || [];\n        };\n        self.createColumnOrders = function () {\n            var s = self.getSchema();\n            self.orders.columns = self.fillArray(0, s.length - 1);\n        };\n        self.createRowOrders = function () {\n            self.orders.rows = self.fillArray(0, self.data.length - 1);\n        };\n        self.getVisibleSchema = function () {\n            return self.getSchema().filter(function (col) {\n                return !col.hidden && col.name !== self.uniqueId;\n            });\n        };\n        self.applyDefaultValue = function (row, header) {\n            var d = header.defaultValue || '';\n            if (typeof d === 'function') {\n                d = d.apply(self.intf, [header]);\n            }\n            row[header.name] = d;\n        };\n        self.createNewRowData = function () {\n            self.newRow = {};\n            self.newRow[self.uniqueId] = self.uId;\n            self.uId += 1;\n            self.getSchema().forEach(function forEachHeader(header) {\n                self.applyDefaultValue(self.newRow, header);\n            });\n        };\n        self.getSchemaNameHash = function (key) {\n            var n = 0;\n            while (self.schemaHashes[key]) {\n                n += 1;\n                key = key + n;\n            }\n            return key;\n        };\n        self.filter = function (type) {\n            var f = self.filters[type];\n            if (!f && type !== undefined) {\n                console.warn('Cannot find filter for type %s, falling back to substring match.', type);\n                f = self.filters.string;\n            }\n            return f;\n        };\n        self.getBestGuessDataType = function (columnName) {\n            var t, x, l = self.data.length;\n            for (x = 0; x < l; x += 1) {\n                if ([null, undefined].indexOf(self.data[x][columnName]) !== -1) {\n                    t = typeof self.data[x];\n                    return t === 'object' ? 'string' : t;\n                }\n            }\n            return 'string';\n        };\n        self.drawChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].draw();\n            });\n        };\n        self.resizeChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].resize();\n            });\n        };\n        self.autoScrollZone = function (e, x, y, ctrl) {\n            var setTimer,\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight();\n            if (x > self.width - self.attributes.selectionScrollZone && x < self.width) {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y > self.height - self.attributes.selectionScrollZone && y < self.height) {\n                self.scrollBox.scrollTop += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (x - self.attributes.selectionScrollZone - rowHeaderCellWidth < 0) {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y - self.attributes.selectionScrollZone - columnHeaderCellHeight < 0) {\n                self.scrollBox.scrollTop -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (setTimer && !ctrl && self.currentCell && self.currentCell.columnIndex !== -1) {\n                self.scrollTimer = setTimeout(self.mousemove, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.refreshFromOrigialData = function () {\n            self.data = self.originalData.filter(function (row) {\n                return true;\n            });\n        };\n        self.validateColumn = function (c, s) {\n            if (!c.name) {\n                throw new Error('A column must contain at least a name.');\n            }\n            if (s.filter(function (i) { return i.name === c.name; }).length > 0) {\n                throw new Error('A column with the name '\n                    + c.name + ' already exists and cannot be added again.');\n            }\n            return true;\n        };\n        self.setDefaults = function (obj1, obj2, key, def) {\n            obj1[key] = obj2[key] === undefined ? def : obj2[key];\n        };\n        self.setAttributes = function () {\n            self.defaults.attributes.forEach(function eachAttribute(i) {\n                self.setDefaults(self.attributes, self.args, i[0], i[1]);\n            });\n        };\n        self.setStyle = function () {\n            self.defaults.styles.forEach(function eachStyle(i) {\n                self.setDefaults(self.style, self.args.style || {}, i[0], i[1]);\n            });\n        };\n        self.autosize = function (colName) {\n            self.getVisibleSchema().forEach(function (col) {\n                if (col.name === colName || colName === undefined) {\n                    self.fitColumnToValues(col.name);\n                }\n            });\n            self.fitColumnToValues('cornerCell');\n        };\n        self.dispose = function () {\n            if (!self.isChildGrid && self.canvas && self.canvas.parentNode) {\n                self.canvas.parentNode.removeChild(self.canvas);\n            }\n            self.eventParent.removeEventListener('mouseup', self.mouseup, false);\n            self.eventParent.removeEventListener('mousedown', self.mousedown, false);\n            self.eventParent.removeEventListener('dblclick', self.dblclick, false);\n            self.eventParent.removeEventListener('click', self.click, false);\n            self.eventParent.removeEventListener('mousemove', self.mousemove);\n            self.eventParent.removeEventListener('wheel', self.scrollWheel, false);\n            self.canvas.removeEventListener('contextmenu', self.contextmenu, false);\n            self.canvas.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('keypress', self.keypress, false);\n            self.controlInput.removeEventListener('keyup', self.keyup, false);\n            self.controlInput.removeEventListener('keydown', self.keydown, false);\n            window.removeEventListener('resize', self.resize);\n            if (self.observer && self.observer.disconnect) {\n                self.observer.disconnect();\n            }\n        };\n        self.tryLoadStoredSettings = function () {\n            var s;\n            self.reloadStoredValues();\n            if (self.storedSettings\n                    && typeof self.storedSettings.orders === 'object'\n                    && self.storedSettings.orders !== null) {\n                if (self.storedSettings.orders.rows.length >= self.data.length) {\n                    self.orders.rows = self.storedSettings.orders.rows;\n                }\n                s = self.getSchema();\n                if (self.storedSettings.orders.columns.length === s.length) {\n                    self.orders.columns = self.storedSettings.orders.columns;\n                }\n                self.orderBy = self.storedSettings.orderBy === undefined\n                    ? self.uniqueId : self.storedSettings.orderBy;\n                self.orderDirection = self.storedSettings.orderDirection === undefined\n                    ? self.uniqueId : self.storedSettings.orderDirection;\n                if (self.orderBy !== self.uniqueId && self.getHeaderByName(self.orderBy) && self.orderDirection) {\n                    self.order(self.orderBy, self.orderDirection);\n                }\n            }\n        };\n        self.getDomRoot = function () {\n            return self.shadowRoot ? self.shadowRoot.host : self.parentNode;\n        };\n        self.getFontName = function (fontStyle) {\n            return fontStyle.replace(/\\d+\\.?\\d*px/, '');\n        };\n        self.getFontHeight = function (fontStyle) {\n            return parseFloat(fontStyle, 10);\n        };\n        self.parseStyleValue = function (key) {\n            if (/Font/.test(key)) {\n                self.style[key + 'Height'] = self.getFontHeight(self.style[key]);\n                self.style[key + 'Name'] = self.getFontName(self.style[key]);\n                return;\n            }\n            // when inheriting styles from already instantiated grids, don't parse already parsed values.\n            if (key === 'moveOverlayBorderSegments' && typeof self.style[key] === 'string') {\n                self.style[key] = self.style[key].split(',')\n                    .map(function (i) { return parseInt(i, 10); });\n            }\n        };\n        self.initProp = function (propName) {\n            if (!self.args[propName]) { return; }\n            Object.keys(self.args[propName]).forEach(function (key) {\n                self[propName][key] = self.args[propName][key];\n            });\n        };\n        self.getStyleProperty = function (key) {\n            if (self.styleKeys.indexOf(key) === -1) {\n                return self.parentNodeStyle[key];\n            }\n            return self.style[key];\n        };\n        self.setStyleProperty = function (key, value, supressDrawAndEvent) {\n            var isDim = ['height', 'width', 'minHeight', 'minWidth', 'maxHeight', 'maxWidth'].indexOf(key) !== -1;\n            if (self.styleKeys.indexOf(key) === -1) {\n                self.parentNodeStyle[key] = value;\n            } else {\n                self.style[key] = value;\n                self.parseStyleValue(key);\n            }\n            if (isDim) {\n                self.resize();\n            }\n            if (!supressDrawAndEvent) {\n                self.draw(true);\n                self.dispatchEvent('stylechanged', {name: 'style', value: value});\n            }\n        };\n        self.reloadStoredValues = function () {\n            if (self.attributes.name && self.attributes.saveAppearance) {\n                self.storedSettings = localStorage.getItem(self.storageName + '-' + self.attributes.name);\n                if (self.storedSettings) {\n                    try {\n                        self.storedSettings = JSON.parse(self.storedSettings);\n                    } catch (e) {\n                        console.warn('could not read settings from localStore', e);\n                        self.storedSettings = undefined;\n                    }\n                }\n                if (self.storedSettings) {\n                    if (typeof self.storedSettings.sizes === 'object'\n                            && self.storedSettings.sizes !== null) {\n                        self.sizes.rows = self.storedSettings.sizes.rows;\n                        self.sizes.columns = self.storedSettings.sizes.columns;\n                        ['trees', 'columns', 'rows'].forEach(function (i) {\n                            if (!self.sizes[i]) {\n                                self.sizes[i] = {};\n                            }\n                        });\n                    }\n                    if (typeof self.storedSettings.visibility === 'object') {\n                        self.getSchema().forEach(function (column) {\n                            if (self.storedSettings.visibility && self.storedSettings.visibility[column.name] !== undefined) {\n                                column.hidden = !self.storedSettings.visibility[column.name];\n                            }\n                        });\n                    }\n                }\n            }\n        };\n        self.init = function () {\n            if (self.initialized) { return; }\n            var publicStyleKeyIntf = {};\n            self.setAttributes();\n            self.setStyle();\n            self.initScrollBox();\n            self.setDom();\n            self.type = 'canvas-datagrid';\n            self.initialized = true;\n            self.ie = /Trident/.test(window.navigator.userAgent);\n            self.edge = /Edge/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.moz = /Gecko/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.mobile = /Mobile/i.test(window.navigator.userAgent);\n            self.cursorGrab = 'grab';\n            self.cursorGrabing = 'grabbing';\n            self.cursorGrab = self.webKit ? '-webkit-grab' : self.cursorGrab;\n            self.cursorGrabing = self.moz ? '-webkit-grabbing' : self.cursorGrabbing;\n            self.pointerLockPosition = {x: 0, y: 0};\n            Object.keys(self.style).forEach(self.parseStyleValue);\n            self.intf.moveSelection = self.moveSelection;\n            self.intf.moveTo = self.moveTo;\n            self.intf.type = self.type;\n            self.intf.addEventListener = self.addEventListener;\n            self.intf.removeEventListener = self.removeEventListener;\n            self.intf.dispatchEvent = self.dispatchEvent;\n            /**\n             * Releases grid resources and removes grid elements.\n             * @memberof canvasDatagrid\n             * @name dispose\n             * @method\n             */\n            self.intf.dispose = self.dispose;\n            /**\n             * Appends the grid to another element later.  Not implemented.\n             * @memberof canvasDatagrid\n             * @name appendTo\n             * @method\n             * @param {number} el The element to append the grid to.\n             */\n            self.intf.appendTo = self.appendTo;\n            self.intf.filters = self.filters;\n            self.intf.sorters = self.sorters;\n            self.intf.autosize = self.autosize;\n            self.intf.beginEditAt = self.beginEditAt;\n            self.intf.endEdit = self.endEdit;\n            self.intf.setActiveCell = self.setActiveCell;\n            self.intf.forEachSelectedCell = self.forEachSelectedCell;\n            self.intf.scrollIntoView = self.scrollIntoView;\n            self.intf.clearChangeLog = self.clearChangeLog;\n            self.intf.gotoCell = self.gotoCell;\n            self.intf.gotoRow = self.gotoRow;\n            self.intf.getHeaderByName = self.getHeaderByName;\n            self.intf.findColumnScrollLeft = self.findColumnScrollLeft;\n            self.intf.findRowScrollTop = self.findRowScrollTop;\n            self.intf.fitColumnToValues = self.fitColumnToValues;\n            self.intf.findColumnMaxTextLength = self.findColumnMaxTextLength;\n            self.intf.disposeContextMenu = self.disposeContextMenu;\n            self.intf.getCellAt = self.getCellAt;\n            self.intf.isCellVisible = self.isCellVisible;\n            self.intf.order = self.order;\n            self.intf.draw = self.draw;\n            self.intf.selectArea = self.selectArea;\n            self.intf.clipElement = self.clipElement;\n            self.intf.getSchemaFromData = self.getSchemaFromData;\n            self.intf.setFilter = self.setFilter;\n            self.intf.selectRow = self.selectRow;\n            self.intf.parentGrid = self.parentGrid;\n            self.intf.toggleTree = self.toggleTree;\n            self.intf.expandTree = self.expandTree;\n            self.intf.collapseTree = self.collapseTree;\n            self.intf.canvas = self.canvas;\n            self.intf.context = self.ctx;\n            self.intf.insertRow = self.insertRow;\n            self.intf.deleteRow = self.deleteRow;\n            self.intf.addRow = self.addRow;\n            self.intf.insertColumn = self.insertColumn;\n            self.intf.deleteColumn = self.deleteColumn;\n            self.intf.addColumn = self.addColumn;\n            self.intf.getClippingRect = self.getClippingRect;\n            self.intf.setRowHeight = self.setRowHeight;\n            self.intf.setColumnWidth = self.setColumnWidth;\n            self.intf.resetColumnWidths = self.resetColumnWidths;\n            self.intf.resetRowHeights = self.resetRowHeights;\n            self.intf.resize = self.resize;\n            self.intf.selectColumn = self.selectColumn;\n            self.intf.selectRow = self.selectRow;\n            self.intf.selectAll = self.selectAll;\n            self.intf.selectNone = self.selectNone;\n            self.intf.drawChildGrids = self.drawChildGrids;\n            self.intf.assertPxColor = self.assertPxColor;\n            self.intf.clearPxColorAssertions = self.clearPxColorAssertions;\n            self.intf.integerToAlpha = self.integerToAlpha;\n            self.intf.copy = self.copy;\n            self.intf.setStyleProperty = self.setStyleProperty;\n            Object.defineProperty(self.intf, 'defaults', {\n                get: function () {\n                    return {\n                        styles: self.defaults.styles.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {}),\n                        attributes: self.defaults.attributes.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {})\n                    };\n                }\n            });\n            self.styleKeys = Object.keys(self.intf.defaults.styles);\n            self.DOMStyles = window.getComputedStyle(document.body, null);\n            Object.keys(self.DOMStyles).concat(Object.keys(self.style)).forEach(function (key) {\n                // unless this line is here, Object.keys() will not work on <instance>.style\n                publicStyleKeyIntf[key] = undefined;\n                Object.defineProperty(publicStyleKeyIntf, key, {\n                    get: function () {\n                        return self.getStyleProperty(key);\n                    },\n                    set: function (value) {\n                        self.setStyleProperty(key, value);\n                    }\n                });\n            });\n            Object.defineProperty(self.intf, 'shadowRoot', {\n                get: function () {\n                    return self.shadowRoot;\n                }\n            });\n            Object.defineProperty(self.intf, 'activeCell', {\n                get: function () {\n                    return self.activeCell;\n                }\n            });\n            Object.defineProperty(self.intf, 'hasFocus', {\n                get: function () {\n                    return self.hasFocus;\n                }\n            });\n            Object.defineProperty(self.intf, 'style', {\n                get: function () {\n                    return publicStyleKeyIntf;\n                },\n                set: function (valueObject) {\n                    Object.keys(valueObject).forEach(function (key) {\n                        self.setStyleProperty(key, valueObject[key], true);\n                    });\n                    self.draw(true);\n                    self.dispatchEvent('stylechanged', {name: 'style', value: valueObject});\n                }\n            });\n            Object.defineProperty(self.intf, 'attributes', { value: {}});\n            Object.keys(self.attributes).forEach(function (key) {\n                Object.defineProperty(self.intf.attributes, key, {\n                    get: function () {\n                        return self.attributes[key];\n                    },\n                    set: function (value) {\n                        self.attributes[key] = value;\n                        if (key === 'name') {\n                            self.tryLoadStoredSettings();\n                        }\n                        self.draw(true);\n                        self.dispatchEvent('attributechanged', {name: key, value: value[key]});\n                    }\n                });\n            });\n            self.filters.string = function (value, filterFor) {\n                value = String(value);\n                var filterRegExp,\n                    regEnd = /\\/(i|g|m)*$/,\n                    pattern = regEnd.exec(filterFor),\n                    flags = pattern ? pattern[0].substring(1) : '',\n                    flagLength = flags.length;\n                self.invalidFilterRegEx = undefined;\n                if (filterFor.substring(0, 1) === '/' && pattern) {\n                    try {\n                        filterRegExp = new RegExp(filterFor.substring(1, filterFor.length - (flagLength + 1)), flags);\n                    } catch (e) {\n                        self.invalidFilterRegEx = e;\n                        return;\n                    }\n                    return filterRegExp.test(value);\n                }\n                return value.toString ? value.toString().toLocaleUpperCase()\n                    .indexOf(filterFor.toLocaleUpperCase()) !== -1 : false;\n            };\n            self.filters.number = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                return value === filterFor;\n            };\n            ['formatters', 'filters', 'sorters'].forEach(self.initProp);\n            self.applyComponentStyle(false, self.intf);\n            self.resize();\n            self.reloadStoredValues();\n            if (self.args.data) {\n                self.intf.data = self.args.data;\n            }\n            if (!self.data) {\n                self.intf.data = [];\n            }\n            if (self.intf.innerText || self.intf.textContent) {\n                try {\n                    self.intf.data = JSON.parse(self.intf.innerText || self.intf.textContent);\n                } catch (e) {\n                    console.warn('Cannot parse innerText', e);\n                }\n            }\n            if (self.args.schema) {\n                self.intf.schema = self.args.schema;\n            }\n            if (self.isChildGrid) {\n                requestAnimationFrame(function () { self.resize(true); });\n            } else {\n                self.resize(true);\n            }\n            return self;\n        };\n        /**\n         * Removes focus from the grid.\n         * @memberof canvasDatagrid\n         * @name blur\n         * @method\n         */\n        self.intf.blur = function (e) {\n            self.hasFocus = false;\n        };\n        /**\n         * Focuses on the grid.\n         * @memberof canvasDatagrid\n         * @name focus\n         * @method\n         */\n        self.intf.focus = function () {\n            self.hasFocus = true;\n            self.controlInput.focus();\n        };\n        if (self.shadowRoot || self.isChildGrid) {\n            Object.defineProperty(self.intf, 'height', {\n                get: function () {\n                    if (self.shadowRoot) {\n                        return self.shadowRoot.height;\n                    }\n                    return self.parentNode.height;\n                },\n                set: function (value) {\n                    if (self.shadowRoot) {\n                        self.shadowRoot.height = value;\n                    } else {\n                        self.parentNode.height = value;\n                    }\n                    self.resize(true);\n                }\n            });\n            Object.defineProperty(self.intf, 'width', {\n                get: function () {\n                    if (self.shadowRoot) {\n                        return self.shadowRoot.width;\n                    }\n                    return self.parentNode.width;\n                },\n                set: function (value) {\n                    if (self.shadowRoot) {\n                        self.shadowRoot.width = value;\n                    } else {\n                        self.parentNode.width = value;\n                    }\n                    self.resize(true);\n                }\n            });\n            Object.defineProperty(self.intf, 'parentNode', {\n                get: function () {\n                    return self.parentNode;\n                },\n                set: function (value) {\n                    if (!self.isChildGrid) {\n                        throw new TypeError('Cannot set property parentNode which has only a getter');\n                    }\n                    self.parentNode = value;\n                }\n            });\n        }\n        Object.defineProperty(self.intf, 'visibleRowHeights', {\n            get: function () {\n                return self.visibleRowHeights;\n            }\n        });\n        Object.defineProperty(self.intf, 'openChildren', {\n            get: function () {\n                return self.openChildren;\n            }\n        });\n        Object.defineProperty(self.intf, 'childGrids', {\n            get: function () {\n                return Object.keys(self.childGrids).map(function (gridId) {\n                    return self.childGrids[gridId];\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'isChildGrid', {\n            get: function () {\n                return self.isChildGrid;\n            }\n        });\n        Object.defineProperty(self, 'cursor', {\n            get: function () {\n                return self.parentNodeStyle.cursor;\n            },\n            set: function (value) {\n                if (value === 'cell') { value = 'default'; }\n                if (self.currentCursor !== value) {\n                    self.parentNodeStyle.cursor = value;\n                    self.currentCursor = value;\n                }\n            }\n        });\n        Object.defineProperty(self.intf, 'orderDirection', {\n            get: function () {\n                return self.orderDirection;\n            },\n            set: function (value) {\n                if (value !== 'desc') {\n                    value = 'asc';\n                }\n                self.orderDirection = value;\n                self.order(self.orderBy, self.orderDirection);\n            }\n        });\n        Object.defineProperty(self.intf, 'orderBy', {\n            get: function () {\n                return self.orderBy;\n            },\n            set: function (value) {\n                if (self.getSchema().find(function (col) {\n                        return col.name === value;\n                    }) === undefined) {\n                    throw new Error('Cannot sort by unknown column name.');\n                }\n                self.orderBy = value;\n                self.order(self.orderBy, self.orderDirection);\n            }\n        });\n        if (self.isComponent) {\n            Object.defineProperty(self.intf, 'offsetHeight', {\n                get: function () {\n                    return self.canvas.offsetHeight;\n                }\n            });\n            Object.defineProperty(self.intf, 'offsetWidth', {\n                get: function () {\n                    return self.canvas.offsetWidth;\n                }\n            });\n        }\n        Object.defineProperty(self.intf, 'scrollHeight', {\n            get: function () {\n                return self.scrollBox.scrollHeight;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollWidth', {\n            get: function () {\n                return self.scrollBox.scrollWidth;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollTop', {\n            get: function () {\n                return self.scrollBox.scrollTop;\n            },\n            set: function (value) {\n                self.scrollBox.scrollTop = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollLeft', {\n            get: function () {\n                return self.scrollBox.scrollLeft;\n            },\n            set: function (value) {\n                self.scrollBox.scrollLeft = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'sizes', {\n            get: function () {\n                return self.sizes;\n            }\n        });\n        Object.defineProperty(self.intf, 'input', {\n            get: function () {\n                return self.input;\n            }\n        });\n        Object.defineProperty(self.intf, 'controlInput', {\n            get: function () {\n                return self.controlInput;\n            }\n        });\n        Object.defineProperty(self.intf, 'currentCell', {\n            get: function () {\n                return self.currentCell;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleCells', {\n            get: function () {\n                return self.visibleCells;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRows', {\n            get: function () {\n                return self.visibleRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'selections', {\n            get: function () {\n                return self.selections;\n            }\n        });\n        Object.defineProperty(self.intf, 'dragMode', {\n            get: function () {\n                return self.dragMode;\n            }\n        });\n        Object.defineProperty(self.intf, 'changes', {\n            get: function () {\n                return self.changes;\n            }\n        });\n        self.intf.formatters = self.formatters;\n        self.normalizeDataset = function (data, callback) {\n            var i, d, max, syncFnInvoked;\n            if (data === null || data === '' || data === undefined) {\n                return callback([]);\n            }\n            if (typeof data === 'string'\n                    || typeof data === 'number'\n                    || typeof data === 'boolean') {\n                data = [{'0': data}];\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if ((!Array.isArray(data[0]) && typeof data[0] === 'object' && data[0] !== null)\n                            || (Array.isArray(data) && data.length === 0)) {\n                return callback(data);\n            }\n            if (typeof data === 'function') {\n                i = data.apply(self.intf, [function (d) {\n                    if (syncFnInvoked) {\n                        console.warn('Detected a callback to the data setter function after the same function already returned a value synchronously.');\n                    }\n                    self.normalizeDataset(d, callback);\n                }]);\n                if (i) {\n                    syncFnInvoked = true;\n                    self.normalizeDataset(i, callback);\n                }\n                return;\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if (Array.isArray(data)) {\n                if (!Array.isArray(data[0])) {\n                    //array of something?  throw it all into 1 row!\n                    data = [data];\n                }\n                // find the longest length\n                max = 0;\n                d = [];\n                data.forEach(function (row) {\n                    max = Math.max(max, row.length);\n                });\n                // map against length indexes\n                data.forEach(function (row, index) {\n                    var x;\n                    d[index] = {};\n                    for (x = 0; x < max; x += 1) {\n                        d[index][x] = row[x];\n                    }\n                });\n                return callback(d);\n            }\n            throw new Error('Unsupported data type.  Must be an array of arrays or an array of objects, function or string.');\n        };\n        self.eventNames.forEach(function (eventName) {\n            Object.defineProperty(self.intf, 'on' + eventName, {\n                get: function () {\n                    return self.componentL1Events[eventName];\n                },\n                set: function (value) {\n                    self.events[eventName] = [];\n                    self.componentL1Events[eventName] = value;\n                    if (!value) { return; }\n                    self.addEventListener(eventName, value);\n                }\n            });\n        });\n        Object.defineProperty(self.intf, 'frozenRow', {\n            get: function () {\n                return self.frozenRow;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.visibleRows.length < val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible rows.');\n                }\n                self.frozenRow = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'frozenColumn', {\n            get: function () {\n                return self.frozenColumn;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.getVisibleSchema().length < val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible columns.');\n                }\n                self.frozenColumn = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollIndexRect', {\n            get: function () {\n                return {\n                    top: self.scrollIndexTop,\n                    right: self.scrollIndexRight,\n                    bottom: self.scrollIndexBottom,\n                    left: self.scrollIndexLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollPixelRect', {\n            get: function () {\n                return {\n                    top: self.scrollPixelTop,\n                    right: self.scrollPixelRight,\n                    bottom: self.scrollPixelBottom,\n                    left: self.scrollPixelLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'selectionBounds', {\n            get: function () {\n                return self.getSelectionBounds();\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedRows', {\n            get: function () {\n                return self.getSelectedData(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedCells', {\n            get: function () {\n                return self.getSelectedData();\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleSchema', {\n            get: function () {\n                return self.getVisibleSchema().map(function eachDataRow(col) {\n                    return col;\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'treeGridAttributes', {\n            get: function () {\n                return self.treeGridAttributes;\n            },\n            set: function (value) {\n                self.treeGridAttributes = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'cellGridAttributes', {\n            get: function () {\n                return self.cellGridAttributes;\n            },\n            set: function (value) {\n                self.cellGridAttributes = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'ctx', {\n            get: function () {\n                return self.ctx;\n            }\n        });\n        Object.defineProperty(self.intf, 'schema', {\n            get: function schemaGetter() {\n                return self.getSchema();\n            },\n            set: function schemaSetter(value) {\n                if (value === undefined) {\n                    // Issue #89 - allow schema to be set to initialized state\n                    self.schema = undefined;\n                    self.tempSchema = undefined;\n                    self.dispatchEvent('schemachanged', {schema: undefined});\n                    return;\n                }\n                if (!Array.isArray(value) || typeof value[0] !== 'object') {\n                    throw new Error('Schema must be an array of objects.');\n                }\n                if (value[0].name === undefined) {\n                    throw new Error('Expected schema to contain an object with at least a name property.');\n                }\n                self.schema = value.map(function eachSchemaColumn(column, index) {\n                    column.width = column.width || self.style.cellWidth;\n                    column[self.uniqueId] = self.getSchemaNameHash(column.name);\n                    column.filter = column.filter || self.filter(column.type);\n                    column.type = column.type || 'string';\n                    column.index = index;\n                    column.columnIndex = index;\n                    column.rowIndex = -1;\n                    return column;\n                });\n                self.tempSchema = undefined;\n                self.createNewRowData();\n                self.createColumnOrders();\n                self.tryLoadStoredSettings();\n                if (self.storedSettings && typeof self.storedSettings.visibility === 'object') {\n                    self.schema.forEach(function hideEachSchemaColumn(column, index) {\n                        if (self.storedSettings && self.storedSettings.visibility[column.name] !== undefined) {\n                            column.hidden = !self.storedSettings.visibility[column.name];\n                        }\n                    });\n                }\n                self.resize(true);\n                self.dispatchEvent('schemachanged', {schema: self.schema});\n            }\n        });\n        Object.defineProperty(self.intf, 'data', {\n            get: function dataGetter() {\n                return self.data.map(function (row) {\n                    delete row[self.uniqueId];\n                    return row;\n                });\n            },\n            set: function dataSetter(value) {\n                self.normalizeDataset(value, function (d) {\n                    self.originalData = d.map(function eachDataRow(row) {\n                        row[self.uniqueId] = self.uId;\n                        self.uId += 1;\n                        return row;\n                    });\n                    self.changes = [];\n                    //TODO apply filter to incoming dataset\n                    self.data = self.originalData;\n                    if (!self.schema) {\n                        self.tempSchema = self.getSchemaFromData();\n                    }\n                    // Issue #89 - allow schema to be auto-created every time data is set\n                    if (self.attributes.autoGenerateSchema) {\n                        self.schema = self.getSchemaFromData();\n                    }\n                    if (!self.schema && self.data.length === 0) {\n                        self.tempSchema = [{name: ''}];\n                        self.tempSchema[0][self.uniqueId] = self.getSchemaNameHash('');\n                    }\n                    if ((self.tempSchema && !self.schema) || self.attributes.autoGenerateSchema) {\n                        self.createColumnOrders();\n                        self.tryLoadStoredSettings();\n                        self.dispatchEvent('schemachanged', {schema: self.tempSchema});\n                    }\n                    self.createNewRowData();\n                    if (self.attributes.autoResizeColumns && self.data.length > 0\n                            && self.storedSettings === undefined) {\n                        self.autosize();\n                    }\n                    self.fitColumnToValues('cornerCell', true);\n                    self.resize(true);\n                    self.createRowOrders();\n                    self.tryLoadStoredSettings();\n                    self.dispatchEvent('datachanged', {data: self.data});\n                });\n            }\n        });\n        self.initScrollBox = function () {\n            var sHeight = 0,\n                sWidth = 0,\n                scrollTop = 0,\n                scrollLeft = 0,\n                scrollHeight = 0,\n                scrollWidth = 0,\n                scrollBoxHeight = 20,\n                scrollBoxWidth = 20;\n            function setScrollTop(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollTop value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollHeight) {\n                    value = scrollHeight;\n                }\n                if (scrollHeight < 0) {\n                    value = 0;\n                }\n                scrollTop = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            function setScrollLeft(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollLeft value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollWidth) {\n                    value = scrollWidth;\n                }\n                if (scrollWidth < 0) {\n                    value = 0;\n                }\n                scrollLeft = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            self.scrollBox.toString = function () {\n                return '{\"width\": ' + scrollWidth\n                    + ', \"height\": ' + scrollHeight\n                    + ', \"left\": ' + scrollLeft\n                    + ', \"top\": ' + scrollTop + '}';\n            };\n            self.scrollBox.scrollTo = function (x, y, supressDrawEvent) {\n                setScrollLeft(x, true);\n                setScrollTop(y, supressDrawEvent);\n            };\n            Object.defineProperty(self.scrollBox, 'scrollBoxHeight', {\n                get: function () {\n                    return scrollBoxHeight;\n                },\n                set: function (value) {\n                    scrollBoxHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollBoxWidth', {\n                get: function () {\n                    return scrollBoxWidth;\n                },\n                set: function (value) {\n                    scrollBoxWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'height', {\n                get: function () {\n                    return sHeight;\n                },\n                set: function (value) {\n                    if (scrollHeight < value) {\n                        scrollTop = 0;\n                    }\n                    sHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'width', {\n                get: function () {\n                    return sWidth;\n                },\n                set: function (value) {\n                    sWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollTop', {\n                get: function () {\n                    return scrollTop;\n                },\n                set: setScrollTop\n            });\n            Object.defineProperty(self.scrollBox, 'scrollLeft', {\n                get: function () {\n                    return scrollLeft;\n                },\n                set: setScrollLeft\n            });\n            Object.defineProperty(self.scrollBox, 'scrollHeight', {\n                get: function () {\n                    return scrollHeight;\n                },\n                set: function (value) {\n                    if (scrollTop > value) {\n                        scrollTop = Math.max(value, 0);\n                    }\n                    if (scrollHeight < sHeight) {\n                        scrollTop = 0;\n                    }\n                    scrollHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollWidth', {\n                get: function () {\n                    return scrollWidth;\n                },\n                set: function (value) {\n                    if (scrollLeft > value) {\n                        scrollLeft = Math.max(value, 0);\n                    }\n                    scrollWidth = value;\n                }\n            });\n        };\n        return;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false, Event: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var zIndexTop, hoverScrollTimeout, autoCompleteContext;\n        function applyContextItemStyle(contextItemContainer) {\n            self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item' + (self.mobile ? '-mobile' : ''));\n            contextItemContainer.addEventListener('mouseover', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n            });\n            contextItemContainer.addEventListener('mouseout', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n            });\n        }\n        function createContextMenu(ev, pos, items, parentContextMenu) {\n            var container = document.createElement('div'),\n                upArrow = document.createElement('div'),\n                downArrow = document.createElement('div'),\n                children = [],\n                selectedIndex = -1,\n                intf = {},\n                rect;\n            if (!Array.isArray(items)) { throw new Error('createContextMenu expects an array.'); }\n            function createItems() {\n                items.forEach(function (item) {\n                    var contextItemContainer = document.createElement('div'),\n                        childMenuArrow;\n                    function removeChildContext(e) {\n                        if (e.relatedTarget === container\n                                || item.contextMenu.container === e.relatedTarget\n                                || childMenuArrow === e.relatedTarget\n                                || (contextItemContainer === e.relatedTarget)\n                                || item.contextMenu.container.contains(e.relatedTarget)\n                                ) { return; }\n                        item.contextMenu.dispose();\n                        children.splice(children.indexOf(item.contextMenu), 1);\n                        item.contextMenu = undefined;\n                        contextItemContainer.removeEventListener('mouseout', removeChildContext);\n                        container.removeEventListener('mouseout', removeChildContext);\n                        contextItemContainer.setAttribute('contextOpen', '0');\n                        contextItemContainer.setAttribute('opening', '0');\n                    }\n                    function contextAddCallback(items) {\n                        // check yet again if the user hasn't moved off\n                        if (contextItemContainer.getAttribute('opening') !== '1' ||\n                                contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        var cPos = contextItemContainer.getBoundingClientRect();\n                        cPos = {\n                            left: cPos.left + self.style.childContextMenuMarginLeft + container.offsetWidth,\n                            top: cPos.top + self.style.childContextMenuMarginTop,\n                            bottom: cPos.bottom,\n                            right: cPos.right\n                        };\n                        item.contextMenu = createContextMenu(ev, cPos, items, intf);\n                        contextItemContainer.setAttribute('contextOpen', '1');\n                        contextItemContainer.addEventListener('mouseout', removeChildContext);\n                        container.addEventListener('mouseout', removeChildContext);\n                        children.push(item.contextMenu);\n                    }\n                    function createChildContext() {\n                        var i;\n                        if (contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        contextItemContainer.setAttribute('opening', '1');\n                        if (typeof item.items === 'function') {\n                            i  = item.items.apply(intf, [function (items) {\n                                contextAddCallback(items);\n                            }]);\n                            if (i !== undefined && Array.isArray(i)) {\n                                contextAddCallback(i);\n                            }\n                            return;\n                        }\n                        contextAddCallback(item.items);\n                    }\n                    function addItem(item) {\n                        function addContent(content) {\n                            if (content === null) { return; }\n                            if (typeof content === 'function') {\n                                return addContent(content(ev));\n                            }\n                            if (typeof content === 'object') {\n                                contextItemContainer.appendChild(content);\n                                return;\n                            }\n                            applyContextItemStyle(contextItemContainer);\n                            contextItemContainer.innerHTML = content;\n                            return;\n                        }\n                        addContent(item.title);\n                        item.contextItemContainer = contextItemContainer;\n                        if ((item.items && item.items.length > 0) || typeof item.items === 'function') {\n                            childMenuArrow = document.createElement('div');\n                            self.createInlineStyle(childMenuArrow, 'canvas-datagrid-context-child-arrow');\n                            childMenuArrow.innerHTML = self.style.childContextMenuArrowHTML;\n                            contextItemContainer.appendChild(childMenuArrow);\n                            contextItemContainer.addEventListener('mouseover', createChildContext);\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                contextItemContainer.setAttribute('opening', '0');\n                            });\n                        }\n                        if (item.click) {\n                            contextItemContainer.addEventListener('click', function (ev) {\n                                item.click.apply(self, [ev]);\n                            });\n                        }\n                    }\n                    addItem(item);\n                    container.appendChild(contextItemContainer);\n                });\n            }\n            function clickIndex(idx) {\n                items[idx].contextItemContainer.dispatchEvent(new Event('click'));\n            }\n            function checkArrowVisibility() {\n                if (container.scrollTop > 0) {\n                    self.parentDOMNode.appendChild(upArrow);\n                } else if (upArrow.parentNode) {\n                    upArrow.parentNode.removeChild(upArrow);\n                }\n                if (container.scrollTop >= container.scrollHeight - container.offsetHeight && downArrow.parentNode) {\n                    downArrow.parentNode.removeChild(downArrow);\n                } else if (container.scrollHeight - container.offsetHeight > 0\n                        && !(container.scrollTop >= container.scrollHeight - container.offsetHeight)) {\n                    self.parentDOMNode.appendChild(downArrow);\n                }\n            }\n            function startHoverScroll(type) {\n                return function t() {\n                    var a = self.attributes.contextHoverScrollAmount;\n                    if (type === 'up' && container.scrollTop === 0) { return; }\n                    if (type === 'down' && container.scrollTop === container.scrollHeight) { return; }\n                    container.scrollTop += (type === 'up' ? -a : a);\n                    hoverScrollTimeout = setTimeout(t, self.attributes.contextHoverScrollRateMs, type);\n                };\n            }\n            function endHoverScroll(type) {\n                return function () {\n                    clearTimeout(hoverScrollTimeout);\n                };\n            }\n            function init() {\n                var loc = {},\n                    s = self.scrollOffset(self.canvas);\n                if (zIndexTop === undefined) {\n                    zIndexTop = self.style.contextMenuZIndex;\n                }\n                createItems();\n                self.createInlineStyle(container, 'canvas-datagrid-context-menu' + (self.mobile ? '-mobile' : ''));\n                loc.x = pos.left - s.left;\n                loc.y = pos.top - s.top;\n                loc.height = 0;\n                zIndexTop += 1;\n                container.style.position = 'absolute';\n                upArrow.style.color = self.style.contextMenuArrowColor;\n                downArrow.style.color = self.style.contextMenuArrowColor;\n                [upArrow, downArrow].forEach(function (el) {\n                    el.style.textAlign = 'center';\n                    el.style.position = 'absolute';\n                    el.style.zIndex = zIndexTop + 1;\n                });\n                container.style.zIndex = zIndexTop;\n                if (parentContextMenu && parentContextMenu.inputDropdown) {\n                    container.style.maxHeight = window.innerHeight - loc.y - self.style.autocompleteBottomMargin + 'px';\n                    container.style.minWidth = pos.width + 'px';\n                    loc.y += pos.height;\n                }\n                if (self.mobile) {\n                    container.style.width = pos.width + 'px';\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                container.addEventListener('scroll', checkArrowVisibility);\n                container.addEventListener('wheel', function (e) {\n                    if (self.hasFocus) {\n                        container.scrollTop += e.deltaY;\n                        container.scrollLeft += e.deltaX;\n                    }\n                    checkArrowVisibility();\n                });\n                upArrow.innerHTML = self.style.contextMenuArrowUpHTML;\n                downArrow.innerHTML = self.style.contextMenuArrowDownHTML;\n                container.appendChild(upArrow);\n                document.body.appendChild(downArrow);\n                document.body.appendChild(container);\n                rect = container.getBoundingClientRect();\n                // TODO: fix !(parentContextMenu && parentContextMenu.inputDropdown) state (autocomplete)\n                if (rect.bottom > window.innerHeight) {\n                    if (!(parentContextMenu && parentContextMenu.inputDropdown)) {\n                        loc.y -= (rect.bottom + self.style.contextMenuWindowMargin) - window.innerHeight;\n                    }\n                    if (loc.y < 0) { loc.y = 0; }\n                    if (container.offsetHeight > window.innerHeight - self.style.contextMenuWindowMargin) {\n                        container.style.height = window.innerHeight - self.style.contextMenuWindowMargin + 'px';\n                        loc.y -= self.style.contextMenuWindowMargin;\n                    }\n                }\n                if (rect.right > window.innerWidth) {\n                    loc.x -= rect.right - window.innerWidth + self.style.contextMenuWindowMargin;\n                }\n                if (loc.x < 0) { loc.x = 0; }\n                if (loc.y < 0) { loc.y = 0; }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                rect = container.getBoundingClientRect();\n                upArrow.style.top = rect.top + 'px';\n                downArrow.style.top = rect.top + rect.height - downArrow.offsetHeight + 'px';\n                upArrow.style.left = rect.left + 'px';\n                downArrow.style.left = rect.left + 'px';\n                downArrow.style.width = container.offsetWidth + 'px';\n                upArrow.style.width = container.offsetWidth + 'px';\n                downArrow.addEventListener('mouseover', startHoverScroll('down'));\n                downArrow.addEventListener('mouseout', endHoverScroll('down'));\n                upArrow.addEventListener('mouseover', startHoverScroll('up'));\n                upArrow.addEventListener('mouseout', endHoverScroll('up'));\n                checkArrowVisibility();\n            }\n            intf.parentGrid = self.intf;\n            intf.parentContextMenu = parentContextMenu;\n            intf.container = container;\n            init();\n            intf.clickIndex = clickIndex;\n            intf.rect = rect;\n            intf.items = items;\n            intf.upArrow = upArrow;\n            intf.downArrow = downArrow;\n            intf.dispose = function () {\n                clearTimeout(hoverScrollTimeout);\n                children.forEach(function (c) {\n                    c.dispose();\n                });\n                [downArrow, upArrow, container].forEach(function (el) {\n                    if (el.parentNode) { el.parentNode.removeChild(el); }\n                });\n            };\n            Object.defineProperty(intf, 'selectedIndex', {\n                get: function () {\n                    return selectedIndex;\n                },\n                set: function (value) {\n                    if (typeof value !== 'number' || isNaN(value || !isFinite(value))) {\n                        throw new Error('Context menu selected index must be a sane number.');\n                    }\n                    selectedIndex = value;\n                    if (selectedIndex > items.length - 1) {\n                        selectedIndex = items.length - 1;\n                    }\n                    if (selectedIndex < 0) {\n                        selectedIndex = 0;\n                    }\n                    items.forEach(function (item, index) {\n                        if (index === selectedIndex) {\n                            return self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                        }\n                        self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item');\n                    });\n                }\n            });\n            return intf;\n        }\n        function createFilterContextMenuItems(e) {\n            var filterContainer = document.createElement('div'),\n                filterLabel = document.createElement('div'),\n                filterAutoCompleteButton = document.createElement('button'),\n                filterInput = document.createElement('input'),\n                n = e.cell && e.cell.header ? e.cell.header.title || e.cell.header.name : '',\n                autoCompleteItems,\n                iRect;\n            function checkRegExpErrorState() {\n                filterInput.style.background = self.style.contextFilterInputBackground;\n                filterInput.style.color = self.style.contextFilterInputColor;\n                if (self.invalidFilterRegEx) {\n                    filterInput.style.background = self.style.contextFilterInvalidRegExpBackground;\n                    filterInput.style.color = self.style.contextFilterInvalidRegExpColor;\n                }\n            }\n            function fillAutoComplete() {\n                var count = 0;\n                autoCompleteItems = {};\n                self.data.forEach(function (row) {\n                    var value = row[e.cell.header.name];\n                    if (autoCompleteItems[value] || count > self.attributes.maxAutoCompleteItems) { return; }\n                    count += 1;\n                    autoCompleteItems[value] = {\n                        title: self.formatters[e.cell.header.type || 'string']({ cell: { value: value }}),\n                        click: function (e) {\n                            filterInput.value = value;\n                            e.stopPropagation();\n                            filterInput.dispatchEvent(new Event('keyup'));\n                            self.disposeAutocomplete();\n                            return;\n                        }\n                    };\n                });\n                autoCompleteItems = Object.keys(autoCompleteItems).map(function (key) {\n                    return autoCompleteItems[key];\n                });\n            }\n            function createAutoCompleteContext(ev) {\n                if (ev && [40, 38, 13, 9].indexOf(ev.keyCode) !== -1) { return; }\n                fillAutoComplete();\n                iRect = filterInput.getBoundingClientRect();\n                if (autoCompleteContext) {\n                    autoCompleteContext.dispose();\n                    autoCompleteContext = undefined;\n                }\n                autoCompleteContext = createContextMenu(e, {\n                    left: iRect.left,\n                    top: iRect.top,\n                    right: iRect.right,\n                    bottom: iRect.bottom,\n                    height: iRect.height,\n                    width: iRect.width\n                }, autoCompleteItems, {inputDropdown: true});\n                autoCompleteContext.selectedIndex = 0;\n            }\n            self.createInlineStyle(filterLabel, 'canvas-datagrid-context-menu-label');\n            self.createInlineStyle(filterAutoCompleteButton, 'canvas-datagrid-context-menu-filter-button');\n            self.createInlineStyle(filterInput, 'canvas-datagrid-context-menu-filter-input');\n            checkRegExpErrorState();\n            filterInput.onclick = self.disposeAutocomplete;\n            filterInput.addEventListener('keydown', function (e) {\n                //down\n                if (e.keyCode === 40) {\n                    autoCompleteContext.selectedIndex += 1;\n                }\n                //up\n                if (e.keyCode === 38) {\n                    autoCompleteContext.selectedIndex -= 1;\n                }\n                //enter\n                if (e.keyCode === 13) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    self.disposeContextMenu();\n                }\n                //tab\n                if (e.keyCode === 9) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    e.preventDefault();\n                }\n                //esc\n                if (e.keyCode === 27) {\n                    self.disposeContextMenu();\n                }\n            });\n            filterInput.addEventListener('keyup', function () {\n                self.setFilter(e.cell.header.name, filterInput.value);\n            });\n            filterInput.addEventListener('keyup', createAutoCompleteContext);\n            ['focus', 'blur', 'keydown', 'keyup', 'change'].forEach(function (en) {\n                filterInput.addEventListener(en, checkRegExpErrorState);\n            });\n            filterInput.value = e.cell.header ? self.columnFilters[e.cell.header.name] || '' : '';\n            filterLabel.innerHTML = self.attributes.filterOptionText.replace(/%s/g, n);\n            filterAutoCompleteButton.onclick = function () {\n                if (autoCompleteContext) {\n                    return self.disposeAutocomplete();\n                }\n                createAutoCompleteContext();\n            };\n            filterAutoCompleteButton.innerHTML = self.style.contextFilterButtonHTML;\n            filterContainer.addEventListener('click', function (e) {\n                return e.stopPropagation();\n            });\n            filterContainer.appendChild(filterLabel);\n            filterContainer.appendChild(filterInput);\n            filterContainer.appendChild(filterAutoCompleteButton);\n            e.items.push({\n                title: filterContainer\n            });\n            if (Object.keys(self.columnFilters).length) {\n                Object.keys(self.columnFilters).forEach(function (cf) {\n                    var h = self.getHeaderByName(cf);\n                    e.items.push({\n                        title: self.attributes.removeFilterOptionText.replace(/%s/g, h.title || h.name),\n                        click: function removeFilterClick(e) {\n                            e.preventDefault();\n                            self.setFilter(cf, '');\n                            self.controlInput.focus();\n                        }\n                    });\n                });\n            }\n        }\n        function addDefaultContextMenuItem(e) {\n            var isNormalCell = !(e.cell.isBackground || e.cell.isHeaderCellCap\n                    || e.cell.isScrollBar || e.cell.isCorner || e.cell.isRowHeader)\n                    && e.cell.header;\n            if (self.attributes.showFilter && isNormalCell) {\n                createFilterContextMenuItems(e);\n            }\n            if (self.attributes.showCopy\n                    && self.selections.reduce(function (p, r) {\n                        return p + r.length;\n                    }, 0) > 0) {\n                e.items.push({\n                    title: self.attributes.copyText,\n                    click: function () {\n                        document.execCommand('copy');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.showPaste && self.clipBoardData) {\n                e.items.push({\n                    title: self.attributes.pasteText,\n                    click: function () {\n                        self.paste(self.clipBoardData, e.cell.columnIndex, e.cell.rowIndex);\n                        self.draw();\n                    }\n                });\n            }\n            if (self.attributes.showColumnSelector) {\n                e.items.push({\n                    title: self.attributes.columnSelectorText,\n                    items: function () {\n                        var d = [];\n                        self.getSchema().forEach(function (column) {\n                            if (column.name === self.uniqueId) { return; }\n                            function toggleColumnVisibility(e) {\n                                column.hidden = !column.hidden;\n                                e.preventDefault();\n                                self.stopPropagation(e);\n                                self.disposeContextMenu();\n                                self.resize(true);\n                                self.setStorageData();\n                            }\n                            var el = document.createElement('div');\n                            applyContextItemStyle(el);\n                            el.addEventListener('touchstart', toggleColumnVisibility);\n                            el.addEventListener('click', toggleColumnVisibility);\n                            el.innerHTML = (column.hidden ? self.attributes.columnSelectorHiddenText\n                                    : self.attributes.columnSelectorVisibleText)\n                                    + (column.title || column.name);\n                            d.push({\n                                title: el\n                            });\n                        });\n                        return d;\n                    }\n                });\n                if (e.cell && e.cell.header) {\n                    e.items.push({\n                        title: self.attributes.hideColumnText\n                            .replace(/%s/ig, e.cell.header.title || e.cell.header.name),\n                        click: function (ev) {\n                            e.cell.header.hidden = true;\n                            ev.preventDefault();\n                            self.stopPropagation(ev);\n                            self.disposeContextMenu();\n                            self.setStorageData();\n                            setTimeout(function () { self.resize(true); }, 10);\n                        }\n                    });\n                }\n            }\n            if (self.attributes.saveAppearance && self.attributes.showClearSettingsOption\n                    && (Object.keys(self.sizes.rows).length > 0\n                        || Object.keys(self.sizes.columns).length > 0)) {\n                e.items.push({\n                    title: self.attributes.clearSettingsOptionText,\n                    click: function (e) {\n                        e.preventDefault();\n                        self.sizes.rows = {};\n                        self.sizes.columns = {};\n                        self.createRowOrders();\n                        self.createColumnOrders();\n                        self.storedSettings = undefined;\n                        self.dispatchEvent('resizecolumn', {columnWidth: self.style.cellWidth});\n                        self.dispatchEvent('resizerow', {cellHeight: self.style.cellHeight});\n                        self.setStorageData();\n                        self.resize(true);\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.allowSorting && self.attributes.showOrderByOption && isNormalCell) {\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextAsc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'asc');\n                        self.controlInput.focus();\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextDesc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'desc');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n        }\n        self.disposeAutocomplete = function () {\n            if (autoCompleteContext) {\n                autoCompleteContext.dispose();\n                autoCompleteContext = undefined;\n            }\n        };\n        self.disposeContextMenu = function () {\n            document.removeEventListener('click', self.disposeContextMenu);\n            zIndexTop = self.style.contextMenuZIndex;\n            self.disposeAutocomplete();\n            if (self.contextMenu) {\n                self.contextMenu.dispose();\n            }\n            self.contextMenu = undefined;\n        };\n        self.contextmenuEvent = function (e, overridePos) {\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            function createDiposeEvent() {\n                requestAnimationFrame(function () {\n                    document.addEventListener('click', self.disposeContextMenu);\n                    document.removeEventListener('mouseup', createDiposeEvent);\n                });\n            }\n            var contextPosition,\n                items = [],\n                pos = overridePos || self.getLayerPos(e),\n                ev = {\n                    NativeEvent: e,\n                    cell: self.getCellAt(pos.x, pos.y),\n                    items: items\n                };\n            if (!ev.cell.isGrid) {\n                addDefaultContextMenuItem(ev);\n            }\n            if (self.dispatchEvent('contextmenu', ev)) {\n                return;\n            }\n            if (!ev.cell.isGrid) {\n                if (self.contextMenu) {\n                    self.disposeContextMenu();\n                }\n                contextPosition = {\n                    left: pos.x + pos.rect.left\n                        + self.style.contextMenuMarginLeft + self.canvasOffsetLeft,\n                    top: pos.y + pos.rect.top\n                        + self.style.contextMenuMarginTop + self.canvasOffsetTop,\n                    right: ev.cell.width + ev.cell.x + pos.rect.left,\n                    bottom: ev.cell.height + ev.cell.y + pos.rect.top,\n                    height: ev.cell.height,\n                    width: ev.cell.width\n                };\n                if (self.mobile) {\n                    contextPosition.left = self.style.mobileContextMenuMargin + 'px';\n                    contextPosition.width = self.width - (self.style.mobileContextMenuMargin * 2) + 'px';\n                }\n                self.contextMenu = createContextMenu(ev, contextPosition, items);\n                document.addEventListener('mouseup', createDiposeEvent);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        self.getClippingRect = function (ele) {\n            var boundingRect = self.position(self.parentNode),\n                eleRect = self.position(ele),\n                s = self.scrollOffset(self.canvas),\n                clipRect = {\n                    x: 0,\n                    y: 0,\n                    h: 0,\n                    w: 0\n                },\n                parentRect = {\n                    x: -Infinity,\n                    y: -Infinity,\n                    h: Infinity,\n                    w: Infinity\n                },\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth();\n            boundingRect.top -= s.top;\n            boundingRect.left -= s.left;\n            eleRect.top -= s.top;\n            eleRect.left -= s.left;\n            clipRect.h = boundingRect.top + boundingRect.height - ele.offsetTop - self.style.scrollBarWidth;\n            clipRect.w = boundingRect.left + boundingRect.width - ele.offsetLeft - self.style.scrollBarWidth;\n            clipRect.x = boundingRect.left + (eleRect.left * -1) + rowHeaderCellWidth;\n            clipRect.y = boundingRect.top + (eleRect.top * -1) + columnHeaderCellHeight;\n            return {\n                x: clipRect.x > parentRect.x ? clipRect.x : parentRect.x,\n                y: clipRect.y > parentRect.y ? clipRect.y : parentRect.y,\n                h: clipRect.h < parentRect.h ? clipRect.h : parentRect.h,\n                w: clipRect.w < parentRect.w ? clipRect.w : parentRect.w\n            };\n        };\n        self.clipElement = function (ele) {\n            var clipRect = self.getClippingRect(ele);\n            if (clipRect.w < 0) { clipRect.w = 0; }\n            if (clipRect.h < 0) { clipRect.h = 0; }\n            ele.style.clip = 'rect('\n                + clipRect.y + 'px,'\n                + clipRect.w + 'px,'\n                + clipRect.h + 'px,'\n                + clipRect.x + 'px'\n                + ')';\n            // INFO https://developer.mozilla.org/en-US/docs/Web/CSS/clip\n            // clip has been \"deprecated\" for clipPath.  Of course nothing but chrome\n            // supports clip path, so we'll keep using clip until someday clipPath becomes\n            // more widely support.  The code below works correctly, but setting clipPath and clip\n            // at the same time has undesirable results.\n            // ele.style.clipPath = 'polygon('\n            //     + clipRect.x + 'px ' + clipRect.y + 'px,'\n            //     + clipRect.x + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.y + 'px'\n            //     + ')';\n        };\n        self.scrollOffset = function (e) {\n            var x = 0, y = 0;\n            while (e.parentNode && e.nodeName !== 'CANVAS-DATAGRID' && e !== self.intf) {\n                if (e.nodeType !== 'canvas-datagrid-tree'\n                        && e.nodeType !== 'canvas-datagrid-cell') {\n                    x -= e.scrollLeft;\n                    y -= e.scrollTop;\n                }\n                e = e.parentNode;\n            }\n            return {\n                left: x - document.scrollingElement.scrollLeft,\n                top: y - document.scrollingElement.scrollTop\n            };\n        };\n        self.resizeEditInput = function () {\n            if (self.input && self.input.editCell) {\n                var pos = self.canvas.getBoundingClientRect(),\n                    s = self.scrollOffset(self.intf),\n                    bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                    borderWidth = (self.style.cellBorderWidth * bm),\n                    cell = self.getVisibleCellByIndex(self.input.editCell.columnIndex, self.input.editCell.rowIndex)\n                        || {x: -100, y: -100, height: 0, width: 0};\n                if (self.mobile) {\n                    self.input.style.left = '0';\n                    self.input.style.top = (self.height - self.style.mobileEditInputHeight) - borderWidth - 1 + 'px';\n                    self.input.style.height = self.style.mobileEditInputHeight + 'px';\n                    self.input.style.width = self.width - borderWidth - 1 + 'px';\n                    return;\n                }\n                self.input.style.left = pos.left + cell.x + self.canvasOffsetLeft - s.left + 'px';\n                self.input.style.top = pos.top + cell.y - self.style.cellBorderWidth + self.canvasOffsetTop - s.top + 'px';\n                self.input.style.height = cell.height - borderWidth + 'px';\n                self.input.style.width = cell.width - self.style.cellPaddingLeft + 'px';\n                self.clipElement(self.input);\n            }\n        };\n        self.position = function (e, ignoreScrollOffset) {\n            var x = 0, y = 0, s = e, h, w;\n            while (e.offsetParent && e.nodeName !== 'CANVAS-DATAGRID') {\n                x += e.offsetLeft;\n                y += e.offsetTop;\n                h = e.offsetHeight;\n                w = e.offsetWidth;\n                e = e.offsetParent;\n            }\n            if (ignoreScrollOffset) {\n                return {left: x, top: y, height: h, width: w};\n            }\n            e = s;\n            s = self.scrollOffset(e);\n            return { left: x + s.left, top: y + s.top, height: h, width: w };\n        };\n        self.getLayerPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.clientX - rect.left,\n                    y: e.clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        /**\n         * Ends editing, optionally aborting the edit.\n         * @memberof canvasDatagrid\n         * @name endEdit\n         * @method\n         * @param {boolean} abort When true, abort the edit.\n         */\n        self.endEdit = function (abort) {\n            var cell = self.input.editCell,\n                y = cell.rowIndex;\n            function abortEdit() {\n                abort = true;\n            }\n            if (self.dispatchEvent('beforeendedit', {\n                    cell: cell,\n                    newValue: self.input.value,\n                    oldValue: cell.value,\n                    abort: abortEdit,\n                    input: self.input\n                })) { return false; }\n            if (self.input.value !== cell.value && !abort) {\n                self.changes[y] = self.changes[y] || {};\n                self.changes[y][cell.header.name] = self.input.value;\n                cell.data[cell.header.name] = self.input.value;\n                if (y === self.data.length) {\n                    if (self.dispatchEvent('newrow', {\n                            value: self.input.value,\n                            defaultValue: cell.value,\n                            aborted: abort,\n                            cell: cell,\n                            input: self.input\n                        })) { return false; }\n                    self.uId += 1;\n                    self.addRow(cell.data);\n                    self.createNewRowData();\n                }\n                self.draw(true);\n            }\n            document.body.removeChild(self.input);\n            self.intf.focus();\n            self.dispatchEvent('endedit', {\n                cell: cell,\n                value: self.input.value,\n                aborted: abort,\n                input: self.input\n            });\n            self.input = undefined;\n            return true;\n        };\n        /**\n         * Begins editing at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name beginEditAt\n         * @method\n         * @param {number} x The column index of the cell to edit.\n         * @param {number} y The row index of the cell to edit.\n         */\n        self.beginEditAt = function (x, y) {\n            if (!self.attributes.editable) { return; }\n            if (self.input) {\n                self.endEdit();\n            }\n            var cell = self.getVisibleCellByIndex(x, y),\n                s = self.getVisibleSchema(),\n                enumItems,\n                enu,\n                option,\n                valueInEnum;\n            if (!(cell && cell.header)) { return; }\n            //HACK for IE10, does not like literal enum\n            enu = cell.header['enum'];\n            if (self.dispatchEvent('beforebeginedit', {cell: cell})) { return false; }\n            self.scrollIntoView(x, y);\n            self.setActiveCell(x, y);\n            if (enu) {\n                self.input = document.createElement('select');\n            } else {\n                self.input = document.createElement(self.attributes.multiLine\n                    ? 'textarea' : 'input');\n            }\n            cell = self.getVisibleCellByIndex(x, y);\n            //HACK on mobile devices sometimes edit can begin without the cell being in view, I don't know how.\n            if (!cell) { return; }\n            if (enu) {\n                // add enums\n                if (typeof enu === 'function') {\n                    enumItems = enu.apply(self.intf, [{cell: cell}]);\n                } else if (Array.isArray(enu)) {\n                    enumItems = enu;\n                }\n                enumItems.forEach(function (e) {\n                    var i = document.createElement('option'),\n                        val,\n                        title;\n                    if (Array.isArray(e)) {\n                        val = e[0];\n                        title = e[1];\n                    } else {\n                        val = e;\n                        title = e;\n                    }\n                    if (val === cell.value) { valueInEnum = true; }\n                    i.value = val;\n                    i.innerHTML = title;\n                    self.input.appendChild(i);\n                });\n                if (!valueInEnum) {\n                    option = document.createElement('option');\n                    option.value = cell.value;\n                    option.innerHTML = cell.value;\n                    self.input.appendChild(option);\n                }\n                self.input.addEventListener('change', function () {\n                    self.endEdit();\n                    self.draw(true);\n                });\n            }\n            document.body.appendChild(self.input);\n            self.createInlineStyle(self.input, self.mobile ? 'canvas-datagrid-edit-mobile-input' : 'canvas-datagrid-edit-input');\n            self.input.style.position = 'absolute';\n            self.input.editCell = cell;\n            self.resizeEditInput();\n            self.input.style.zIndex = self.style.editCellZIndex;\n            self.input.style.fontSize = (parseInt(self.style.editCellFontSize, 10) * self.scale) + 'px';\n            self.input.value = cell.value;\n            self.input.focus();\n            self.input.addEventListener('click', self.stopPropagation);\n            self.input.addEventListener('dblclick', self.stopPropagation);\n            self.input.addEventListener('mouseup', self.stopPropagation);\n            self.input.addEventListener('mousedown', self.stopPropagation);\n            self.input.addEventListener('keydown', function (e) {\n                var nx = cell.columnIndex,\n                    ny = cell.rowIndex;\n                // esc\n                if (e.keyCode === 27) {\n                    self.endEdit(true);\n                    self.draw(true);\n                // enter\n                } else if (e.keyCode === 13\n                        && (!self.attributes.multiLine\n                            || (self.attributes.multiLine && e.shiftKey))) {\n                    self.endEdit();\n                    self.draw(true);\n                } else if (e.keyCode === 9) {\n                    e.preventDefault();\n                    if (!self.endEdit()) {\n                        return;\n                    }\n                    if (e.shiftKey) {\n                        nx -= 1;\n                    } else {\n                        nx += 1;\n                    }\n                    if (nx < 0) {\n                        nx = s.length - 1;\n                        ny -= 1;\n                    }\n                    if (nx > s.length - 1) {\n                        nx = 0;\n                        ny += 1;\n                    }\n                    if (ny < 0) {\n                        ny = self.data.length - 1;\n                    }\n                    if (ny > self.data.length - 1) {\n                        ny = 0;\n                    }\n                    self.scrollIntoView(nx, ny);\n                    self.beginEditAt(nx, ny);\n                }\n            });\n            self.dispatchEvent('beginedit', {cell: cell, input: self.input});\n        };\n        self.createInlineStyle = function (el, className) {\n            var css = {\n                'canvas-datagrid-context-menu-filter-input': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextFilterInputBackground,\n                    color: self.style.contextFilterInputColor,\n                    border: self.style.contextFilterInputBorder,\n                    borderRadius: self.style.contextFilterInputBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextFilterInputFontFamily,\n                    fontSize: self.style.contextFilterInputFontSize\n                },\n                'canvas-datagrid-context-menu-filter-button': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextFilterButtonBorder,\n                    borderRadius: self.style.contextFilterButtonBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFilterButtonFontFamily,\n                    fontSize: self.style.contextMenuFilterButtonFontSize\n                },\n                'canvas-datagrid-context-child-arrow': {\n                    cssFloat: 'right',\n                    color: self.style.childContextMenuArrowColor,\n                    fontSize: self.style.contextMenuChildArrowFontSize,\n                    fontFamily: self.style.contextMenuFontFamily,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-autocomplete': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    position: 'absolute',\n                    zIndex: 9999,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-autocomplete-item': {\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor\n                },\n                'canvas-datagrid-autocomplete-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-canvas': {\n                    position: 'absolute',\n                    zIndex: '-1'\n                },\n                'canvas-datagrid': {\n                    display: 'block'\n                },\n                'canvas-datagrid-control-input': {\n                    position: 'fixed',\n                    top: '-5px',\n                    left: '-5px',\n                    border: 'none',\n                    opacity: '0',\n                    cursor: 'pointer',\n                    width: '1px',\n                    height: '1px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize\n                },\n                'canvas-datagrid-edit-mobile-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 0',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.mobileEditFontFamily,\n                    fontSize: self.style.mobileEditFontSize,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-edit-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 ' + self.style.editCellPaddingLeft + 'px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.editCellFontFamily,\n                    fontSize: self.style.editCellFontSize,\n                    boxShadow: self.style.editCellBoxShadow,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-context-menu-item-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-context-menu-label': {\n                    margin: self.style.contextMenuLabelMargin,\n                    display: self.style.contextMenuLabelDisplay,\n                    minWidth: self.style.contextMenuLabelMinWidth,\n                    maxWidth: self.style.contextMenuLabelMaxWidth\n                },\n                'canvas-datagrid-context-menu-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-context-menu': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-invalid-search-regExp': {\n                    background: self.style.contextMenuFilterInvalidExpresion\n                }\n            };\n            if (css[className]) {\n                Object.keys(css[className]).map(function (prop) {\n                    el.style[prop] = css[className][prop];\n                });\n            }\n            return;\n        };\n        self.appendTo = function (e) {\n            self.parentNode = e;\n            self.setDom();\n        };\n        self.setDom = function () {\n            if (self.isChildGrid) {\n                self.parentGrid = self.parentNode.parentGrid;\n                self.ctx = self.parentGrid.context;\n                self.canvas = self.parentGrid.canvas;\n                self.controlInput = self.parentGrid.controlInput;\n                self.eventParent = self.canvas;\n            } else {\n                self.controlInput = self.controlInput || document.createElement('input');\n                self.controlInput.onblur = self.intf.blur;\n                self.createInlineStyle(self.controlInput, 'canvas-datagrid-control-input');\n                self.isChildGrid = false;\n                self.parentDOMNode = self.parentNode;\n                self.parentIsCanvas = /^canvas$/i.test(self.parentDOMNode.tagName);\n                if (self.parentIsCanvas) {\n                    self.canvas = self.parentDOMNode;\n                    self.parentDOMNode.appendChild(self.controlInput);\n                } else {\n                    self.canvas = document.createElement('canvas');\n                    self.parentDOMNode.appendChild(self.canvas);\n                    self.parentDOMNode.appendChild(self.controlInput);\n                }\n                self.createInlineStyle(self.canvas, 'canvas-datagrid');\n                self.ctx = self.canvas.getContext('2d');\n                self.ctx.textBaseline = 'alphabetic';\n                self.eventParent = self.canvas;\n            }\n            self.parentNodeStyle = self.canvas.style;\n            self.controlInput.setAttribute('readonly', true);\n            self.controlInput.addEventListener('blur', function (e) {\n                if (e.target !== self.canvas) {\n                    self.hasFocus = false;\n                }\n            });\n            self.eventParent.addEventListener('scroll', self.resize, false);\n            self.eventParent.addEventListener('touchstart', self.touchstart, false);\n            self.eventParent.addEventListener('mouseup', self.mouseup, false);\n            self.eventParent.addEventListener('mousedown', self.mousedown, false);\n            self.eventParent.addEventListener('dblclick', self.dblclick, false);\n            self.eventParent.addEventListener('click', self.click, false);\n            self.eventParent.addEventListener('mousemove', self.mousemove);\n            self.eventParent.addEventListener('wheel', self.scrollWheel, false);\n            self.canvas.addEventListener('contextmenu', self.contextmenuEvent, false);\n            self.controlInput.addEventListener('copy', self.copy);\n            self.controlInput.addEventListener('cut', self.cut);\n            self.controlInput.addEventListener('paste', self.paste);\n            self.controlInput.addEventListener('keypress', self.keypress, false);\n            self.controlInput.addEventListener('keyup', self.keyup, false);\n            self.controlInput.addEventListener('keydown', self.keydown, false);\n            window.addEventListener('resize', self.resize);\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        // all methods here are exposed by intf\n        // to users\n        /**\n         * Converts a integer into a letter A - ZZZZZ...\n         * @memberof canvasDatagrid\n         * @name integerToAlpha\n         * @method\n         * @param {column} n The number to convert.\n         */\n        self.integerToAlpha = function (n) {\n            var ordA = 'a'.charCodeAt(0),\n                ordZ = 'z'.charCodeAt(0),\n                len = ordZ - ordA + 1,\n                s = '';\n            while (n >= 0) {\n                s = String.fromCharCode(n % len + ordA) + s;\n                n = Math.floor(n / len) - 1;\n            }\n            return s;\n        };\n        /**\n         * Inserts a new column before the specified index into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name insertColumn\n         * @method\n         * @param {column} c The column to insert into the schema.\n         * @param {number} index The index of the column to insert before.\n         */\n        self.insertColumn = function (c, index) {\n            var s = self.getSchema();\n            if (s.length < index) {\n                throw new Error('Index is beyond the length of the schema.');\n            }\n            self.validateColumn(c, s);\n            s.splice(index, 0, c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a column from the schema at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteColumn\n         * @tutorial schema\n         * @method\n         * @param {number} index The index of the column to delete.\n         */\n        self.deleteColumn = function (index) {\n            var s = self.getSchema();\n            // remove data matching this column name from data\n            self.data.forEach(function (row) {\n                delete row[s[index].name];\n            });\n            s.splice(index, 1);\n            self.intf.schema = s;\n        };\n        /**\n         * Adds a new column into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name addColumn\n         * @method\n         * @param {column} c The column to add to the schema.\n         */\n        self.addColumn = function (c) {\n            var s = self.getSchema();\n            self.validateColumn(c, s);\n            s.push(c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a row from the dataset at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteRow\n         * @method\n         * @param {number} index The index of the row to delete.\n         */\n        self.deleteRow = function (index) {\n            self.originalData.splice(index, 1);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Inserts a new row into the dataset before the specified index.\n         * @memberof canvasDatagrid\n         * @name insertRow\n         * @method\n         * @param {object} d data.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertRow = function (d, index) {\n            if (self.originalData.length < index) {\n                throw new Error('Index is beyond the length of the dataset.');\n            }\n            self.originalData.splice(index, 0, d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[index], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Adds a new row into the dataset.\n         * @memberof canvasDatagrid\n         * @name addRow\n         * @method\n         * @param {object} d data.\n         */\n        self.addRow = function (d) {\n            self.originalData.push(d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[self.originalData.length - 1], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Sets the height of a given row by index number.\n         * @memberof canvasDatagrid\n         * @name setRowHeight\n         * @method\n         * @param {number} rowIndex The index of the row to set.\n         * @param {number} height Height to set the row to.\n         */\n        self.setRowHeight = function (rowIndex, height) {\n            self.sizes.rows[self.data[rowIndex][self.uniqueId]] = height;\n            self.draw(true);\n        };\n        /**\n         * Sets the width of a given column by index number.\n         * @memberof canvasDatagrid\n         * @name setColumnWidth\n         * @method\n         * @param {number} colIndex The index of the column to set.\n         * @param {number} width Width to set the column to.\n         */\n        self.setColumnWidth = function (colIndex, width) {\n            var s = self.getSchema();\n            self.sizes.columns[s[colIndex][self.uniqueId]] = width;\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the width of the columns due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetColumnWidths\n         * @tutorial schema\n         * @method\n         */\n        self.resetColumnWidths = function () {\n            self.sizes.columns = {};\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the height of the rows due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetRowHeights\n         * @tutorial schema\n         * @method\n         */\n        self.resetRowHeights = function () {\n            self.sizes.rows = {};\n            self.draw(true);\n        };\n        /**\n         * Sets the value of the filter.\n         * @memberof canvasDatagrid\n         * @name setFilter\n         * @method\n         * @param {string} column Name of the column to filter.\n         * @param {string} value The value to filter for.\n         */\n        self.setFilter = function (column, value) {\n            function applyFilter() {\n                self.refreshFromOrigialData();\n                Object.keys(self.columnFilters).forEach(function (filter) {\n                    var header = self.getHeaderByName(column);\n                    if (!header) {\n                        return;\n                    }\n                    self.currentFilter = header.filter || self.filter(column.type || 'string');\n                    self.data = self.data.filter(function (row) {\n                        return self.currentFilter(row[filter], self.columnFilters[filter]);\n                    });\n                });\n                self.resize();\n                self.draw(true);\n            }\n            if (column === undefined && value === undefined) {\n                self.columnFilters = {};\n                return applyFilter();\n            }\n            if (column && (value === '' || value === undefined)) {\n                delete self.columnFilters[column];\n            } else {\n                self.columnFilters[column] = value;\n            }\n            applyFilter();\n        };\n        /**\n         * Returns the number of pixels to scroll down to line up with row rowIndex.\n         * @memberof canvasDatagrid\n         * @name findRowScrollTop\n         * @method\n         * @param {number} rowIndex The row index of the row to scroll find.\n         */\n        self.findRowScrollTop = function (rowIndex) {\n            var top = 0, x = 0, l = self.data.length,\n                bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                cellBorder = self.style.cellBorderWidth * bm;\n            if (!self.attributes.showNewRow) {\n                l -= 1;\n            }\n            if (rowIndex > l) {\n                throw new Error('Impossible row index');\n            }\n            while (x < rowIndex) {\n                top += (self.sizes.rows[self.data[x][self.uniqueId]] || self.style.cellHeight) + cellBorder;\n                x += 1;\n            }\n            //TODO: This is not super accurate, causes pageUp/Dn to not move around right\n            return top - (self.sizes.rows[self.data[rowIndex][self.uniqueId]] || self.style.cellHeight);\n        };\n        /**\n         * Returns the number of pixels to scroll to the left to line up with column columnIndex.\n         * @memberof canvasDatagrid\n         * @name findColumnScrollLeft\n         * @method\n         * @param {number} columnIndex The column index of the column to find.\n         */\n        self.findColumnScrollLeft = function (columnIndex) {\n            var left = 0, y = 0, s = self.getSchema(), l = s.length - 1;\n            if (columnIndex > l) {\n                throw new Error('Impossible column index');\n            }\n            while (y < columnIndex) {\n                left += self.sizes.columns[s[y][self.uniqueId]] || s[y].width || self.style.cellWidth;\n                y += 1;\n            }\n            return left;\n        };\n        /**\n         * Scrolls the cell at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name gotoCell\n         * @method\n         * @param {number} x The column index of the cell to scroll to.\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoCell = function (x, y) {\n            if (x !== undefined) {\n                self.scrollBox.scrollLeft = self.findColumnScrollLeft(x);\n            }\n            if (y !== undefined) {\n                self.scrollBox.scrollTop = self.findRowScrollTop(y);\n            }\n        };\n        /**\n         * Scrolls the row y.\n         * @memberof canvasDatagrid\n         * @name gotoRow\n         * @method\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoRow = function (y) {\n            self.gotoCell(0, y);\n        };\n        /**\n         * Scrolls the cell at cell x, row y into view if it is not already.\n         * @memberof canvasDatagrid\n         * @name scrollIntoView\n         * @method\n         * @param {number} x The column index of the cell to scroll into view.\n         * @param {number} y The row index of the cell to scroll into view.\n         */\n        self.scrollIntoView = function (x, y) {\n            if (self.visibleCells.filter(function (cell) {\n                    return (cell.rowIndex === y || y === undefined)\n                        && (cell.columnIndex === x || x === undefined)\n                        && cell.x > 0\n                        && cell.y > 0\n                        && cell.x + cell.width < self.width\n                        && cell.y + cell.height < self.height;\n                }).length === 0) {\n                self.gotoCell(x, y);\n            }\n        };\n        /**\n         * Sets the active cell. Requires redrawing.\n         * @memberof canvasDatagrid\n         * @name setActiveCell\n         * @method\n         * @param {number} x The column index of the cell to set active.\n         * @param {number} y The row index of the cell to set active.\n         */\n        self.setActiveCell = function (x, y) {\n            self.activeCell = {\n                rowIndex: y,\n                columnIndex: x\n            };\n        };\n        /**\n         * Removes the selection.\n         * @memberof canvasDatagrid\n         * @name selectNone\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectNone = function (dontDraw) {\n            self.selections = [];\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Selects every visible cell.\n         * @memberof canvasDatagrid\n         * @name selectAll\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectAll = function (dontDraw) {\n            self.selectArea({\n                top: 0,\n                left: 0,\n                right: self.getVisibleSchema().length - 1,\n                bottom: self.data.length - 1\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Returns true if the selected columnIndex is selected on every row.\n         * @memberof canvasDatagrid\n         * @name isColumnSelected\n         * @method\n         * @param {number} columnIndex The column index to check.\n         */\n        self.isColumnSelected = function (columnIndex) {\n            var colIsSelected = true;\n            self.data.forEach(function (row, rowIndex) {\n                if (!self.selections[rowIndex] || self.selections[rowIndex].indexOf(self.orders.columns[columnIndex]) === -1) {\n                    colIsSelected = false;\n                }\n            });\n            return colIsSelected;\n        };\n        /**\n         * Runs the defined method on each selected cell.\n         * @memberof canvasDatagrid\n         * @name forEachSelectedCell\n         * @method\n         * @param {number} fn The function to execute.  The signature of the function is: (data, rowIndex, columnName).\n         * @param {number} expandToRow When true the data in the array is expanded to the entire row.\n         */\n        self.forEachSelectedCell = function (fn, expandToRow) {\n            var d = [], s = expandToRow ? self.getSchema() : self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    if (col === -1 || !s[col]) { return; }\n                    fn(self.data, index, s[col].name);\n                });\n            });\n        };\n        /**\n         * Selects a column.\n         * @memberof canvasDatagrid\n         * @name selectColumn\n         * @method\n         * @param {number} columnIndex The column index to select.\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the column.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the column.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectColumn = function (columnIndex, ctrl, shift, supressEvent) {\n            var s, e, x;\n            function addCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) === -1) {\n                        self.selections[rowIndex].push(i);\n                    }\n                });\n            }\n            function removeCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) !== -1) {\n                        self.selections[rowIndex].splice(self.selections[rowIndex].indexOf(i), 1);\n                    }\n                });\n            }\n            if (shift) {\n                if (!self.activeCell) { return; }\n                s = Math.min(self.activeCell.columnIndex, columnIndex);\n                e = Math.max(self.activeCell.columnIndex, columnIndex);\n                for (x = s; e > x; x += 1) {\n                    addCol(x);\n                }\n            }\n            if (!ctrl && !shift) {\n                self.selections = [];\n                self.activeCell.columnIndex = columnIndex;\n                self.activeCell.rowIndex = self.scrollIndexTop;\n            }\n            if (ctrl && self.isColumnSelected(columnIndex)) {\n                removeCol(columnIndex);\n            } else {\n                addCol(columnIndex);\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.getSelectionBounds()\n            });\n        };\n        /**\n         * Selects a row.\n         * @memberof canvasDatagrid\n         * @name selectRow\n         * @method\n         * @param {number} rowIndex The row index to select.\n         * @param {boolean} ctrl When true, behaves as if you were holding control/command when you clicked the row.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the row.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectRow = function (rowIndex, ctrl, shift, supressEvent) {\n            var x, st, en, s = self.getVisibleSchema();\n            function addRow(ri) {\n                self.selections[ri] = [];\n                self.selections[ri].push(-1);\n                s.forEach(function (col, index) {\n                    self.selections[ri].push(index);\n                });\n            }\n            if (self.dragAddToSelection === false || self.dragObject === undefined) {\n                if (self.selections[rowIndex] && self.selections[rowIndex].length - 1 === s.length) {\n                    if (ctrl) {\n                        self.selections[rowIndex] = [];\n                        return;\n                    }\n                }\n            }\n            if (self.dragAddToSelection === true || self.dragObject === undefined) {\n                if (shift && self.dragObject === undefined) {\n                    if (!self.activeCell) { return; }\n                    st = Math.min(self.activeCell.rowIndex, rowIndex);\n                    en = Math.max(self.activeCell.rowIndex, rowIndex);\n                    for (x = st; en >= x; x += 1) {\n                        addRow(x);\n                    }\n                } else {\n                    addRow(rowIndex);\n                }\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Collapse a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name collapseTree\n         * @method\n         * @param {number} index The index of the row to collapse.\n         */\n        self.collapseTree = function (rowIndex) {\n            var rowId = self.data[rowIndex][self.uniqueId];\n            self.dispatchEvent('collapsetree', {\n                childGrid: self.childGrids[rowId],\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId].blur();\n            self.openChildren[rowId].dispose();\n            delete self.openChildren[rowId];\n            delete self.sizes.trees[rowId];\n            delete self.childGrids[rowId];\n            self.dispatchEvent('resizerow', {\n                cellHeight: self.style.cellHeight\n            });\n            self.resize(true);\n            self.draw(true);\n        };\n        /**\n         * Expands a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name expandTree\n         * @method\n         * @param {number} index The index of the row to expand.\n         */\n        self.expandTree = function (rowIndex) {\n            var trArgs = self.args.treeGridAttributes || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth,\n                rowId = self.data[rowIndex][self.uniqueId],\n                h = self.sizes.trees[rowId] || self.style.treeGridHeight,\n                treeGrid;\n            if (!self.childGrids[rowId]) {\n                trArgs.debug = self.attributes.debug;\n                trArgs.name = self.attributes.saveAppearance ? self.attributes.name + 'tree' + rowId : undefined;\n                trArgs.style = trArgs.style || self.style;\n                trArgs.parentNode = {\n                    parentGrid: self.intf,\n                    nodeType: 'canvas-datagrid-tree',\n                    offsetHeight: h,\n                    offsetWidth: self.width - rowHeaderCellWidth,\n                    header: { width: self.width - rowHeaderCellWidth },\n                    offsetLeft: rowHeaderCellWidth,\n                    offsetTop: columnHeaderCellHeight,\n                    offsetParent: self.intf.parentNode,\n                    parentNode: self.intf.parentNode,\n                    style: 'tree',\n                    data: self.data[rowIndex]\n                };\n                treeGrid = self.createGrid(trArgs);\n                self.childGrids[rowId] = treeGrid;\n            }\n            treeGrid = self.childGrids[rowId];\n            treeGrid.visible = true;\n            self.dispatchEvent('expandtree', {\n                treeGrid: treeGrid,\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId] = treeGrid;\n            self.sizes.trees[rowId] = h;\n            self.dispatchEvent('resizerow', {height: self.style.cellHeight});\n            self.resize(true);\n        };\n        /**\n         * Toggles tree grid open and close by row index.\n         * @memberof canvasDatagrid\n         * @name toggleTree\n         * @method\n         * @param {number} index The index of the row to toggle.\n         */\n        self.toggleTree = function (rowIndex) {\n            var i = self.openChildren[self.data[rowIndex][self.uniqueId]];\n            if (i) {\n                return self.collapseTree(rowIndex);\n            }\n            self.expandTree(rowIndex);\n        };\n        /**\n         * Returns a header from the schema by name.\n         * @memberof canvasDatagrid\n         * @name getHeaderByName\n         * @tutorial schema\n         * @method\n         * @returns {header} header with the selected name, or undefined.\n         * @param {string} name The name of the column to resize.\n         */\n        self.getHeaderByName = function (name) {\n            var x, i = self.getSchema();\n            for (x = 0; x < i.length; x += 1) {\n                if (i[x].name === name) {\n                    return i[x];\n                }\n            }\n        };\n        /**\n         * Resizes a column to fit the longest value in the column. Call without a value to resize all columns.\n         * Warning, can be slow on very large record sets (1m records ~3-5 seconds on an i7).\n         * @memberof canvasDatagrid\n         * @name fitColumnToValues\n         * @method\n         * @param {string} name The name of the column to resize.\n         */\n        self.fitColumnToValues = function (name, internal) {\n            if (!self.canvas) { return; }\n            self.sizes.columns[name === 'cornerCell' ? name : self.getHeaderByName(name)[self.uniqueId]]\n                = self.findColumnMaxTextLength(name);\n            if (!internal) {\n                self.resize();\n                self.draw(true);\n            }\n        };\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @overload\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {number} columnIndex The column index of the cell to check.\n         * @param {number} rowIndex The row index of the cell to check.\n         */\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {cell} cell The cell to check for.  Alternatively you can pass an object { x: <x-pixel-value>, y: <y-pixel-value> }.\n         */\n        self.isCellVisible = function (cell, rowIndex) {\n            // overload\n            if (rowIndex !== undefined) {\n                return self.visibleCells.filter(function (c) {\n                    return c.columnIndex === cell && c.rowIndex === rowIndex;\n                }).length > 0;\n            }\n            var x, l = self.visibleCells.length;\n            for (x = 0; x < l; x += 1) {\n                if (cell.x === self.visibleCells[x].x && cell.y === self.visibleCells[x].y) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n         * Sets the order of the data.\n         * @memberof canvasDatagrid\n         * @name order\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} columnName Name of the column to be sorted.\n         * @param {string} direction `asc` for ascending or `desc` for descending.\n         * @param {function} [sortFunction] When defined, override the default sorting method defined in the column's schema and use this one.\n         * @param {bool} [dontSetStorageData] Don't store this setting for future use.\n         */\n        self.order = function (columnName, direction, sortFunction, dontSetStorageData) {\n            var f,\n                c = self.getSchema().filter(function (col) {\n                    return col.name === columnName;\n                });\n            if (self.dispatchEvent('beforesortcolumn', {name: columnName, direction: direction})) { return; }\n            self.orderBy = columnName;\n            if (c.length === 0) {\n                throw new Error('Cannot sort.  No such column name');\n            }\n            f = sortFunction || self.sorters[c[0].type];\n            if (!f && c[0].type !== undefined) {\n                console.warn('Cannot sort type \"%s\" falling back to string sort.', c[0].type);\n            }\n            self.data = self.data.sort(typeof f === 'function' ? f(columnName, direction) : self.sorters.string);\n            self.dispatchEvent('sortcolumn', {name: columnName, direction: direction});\n            self.draw(true);\n            if (dontSetStorageData) { return; }\n            self.setStorageData();\n        };\n        self.isInGrid = function (e) {\n            if (e.x < 0\n                    || e.x > self.width\n                    || e.y < 0\n                    || e.y > self.height) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Moves the current selection relative to the its current position.  Note: this method does not move the selected data, just the selection itself.\n         * @memberof canvasDatagrid\n         * @name moveSelection\n         * @method\n         * @param {number} offsetX The number of columns to offset the selection.\n         * @param {number} offsetY The number of rows to offset the selection.\n         */\n        self.moveSelection = function (offsetX, offsetY) {\n            var sel = [];\n            self.selections.forEach(function (row, rowIndex) {\n                sel[rowIndex + offsetY] = [];\n                row.forEach(function (colIndex) {\n                    sel[rowIndex + offsetY].push(colIndex + offsetX);\n                });\n            });\n            self.selections = sel;\n        };\n        /**\n         * Moves data in the provided selection to another position in the grid.  Moving data off the edge of the schema (columns/x) will truncate data.\n         * @memberof canvasDatagrid\n         * @name moveTo\n         * @method\n         * @param {array} sel 2D array representing selected rows and columns.  `canvasDatagrid.selections` is in this format and can be used here.\n         * @param {number} x The column index to start inserting the selection at.\n         * @param {number} y The row index to start inserting the selection at.\n         */\n        self.moveTo = function (sel, x, y) {\n            var d = self.getSelectedData(),\n                s = self.getVisibleSchema(),\n                l = sel.length,\n                xi,\n                yi = y - 1;\n            sel.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) { return; }\n                row.forEach(function (col) {\n                    if (!s[col]) { return; }\n                    self.data[index][s[col].name] = null;\n                });\n            });\n            sel.forEach(function (row, index) {\n                yi += 1;\n                xi = x - 1;\n                row.forEach(function (col, cidx) {\n                    xi += 1;\n                    if (col === -1\n                            || !s[xi]\n                            || !s[col]\n                            || self.data.length - 1 < yi\n                            || yi < 0) { return; }\n                    self.data[yi][s[xi].name] = d[index][s[col].name];\n                });\n            });\n        };\n        /**\n         * Checks if a given column is visible.\n         * @memberof canvasDatagrid\n         * @name isColumnVisible\n         * @method\n         * @returns {boolean} When true, the column is visible.\n         * @param {number} columnIndex Column index.\n         */\n        self.isColumnVisible = function (columnIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === columnIndex;\n            }).length > 0;\n        };\n        /**\n         * Checks if a given row is visible.\n         * @memberof canvasDatagrid\n         * @name isRowVisible\n         * @method\n         * @returns {boolean} When true, the row is visible.\n         * @param {number} rowIndex Row index.\n         */\n        self.isRowVisible = function (rowIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.rowIndex === rowIndex;\n            }).length > 0;\n        };\n        /**\n         * Gets the cell at columnIndex and rowIndex.\n         * @memberof canvasDatagrid\n         * @name getVisibleCellByIndex\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Column index.\n         * @param {number} y Row index.\n         */\n        self.getVisibleCellByIndex = function (x, y) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === x && c.rowIndex === y;\n            })[0];\n        };\n        /**\n         * Gets the cell at grid pixel coordinate x and y.  Author's note.  This function ties drawing and events together.  This is a very complex function and is core to the component.\n         * @memberof canvasDatagrid\n         * @name getCellAt\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Number of pixels from the left.\n         * @param {number} y Number of pixels from the top.\n         */\n        self.getCellAt = function (x, y, useTouchScrollZones) {\n            function getBorder(entitiy) {\n                if (entitiy.x + entitiy.width - (self.attributes.borderResizeZone * 0.4) < x && entitiy.x + entitiy.width + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'r';\n                }\n                if (entitiy.x - (self.attributes.borderResizeZone * 0.4) < x && entitiy.x + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'l';\n                }\n                if (entitiy.y + entitiy.height - (self.attributes.borderResizeZone * 0.4) < y && entitiy.y + entitiy.height + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 'b';\n                }\n                if (entitiy.y - (self.attributes.borderResizeZone * 0.4) < y && entitiy.y + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 't';\n                }\n            }\n            if (!self.visibleCells) { return; }\n            var border,\n                tsz = useTouchScrollZones ? self.attributes.touchScrollZone : 0,\n                moveMode = self.attributes.borderDragBehavior === 'move',\n                i,\n                l = self.visibleCells.length,\n                moveBorder,\n                xBorderBehavior = moveMode ? self.cursorGrab : 'ew-resize',\n                yBorderBehavior = moveMode ? self.cursorGrab : 'ns-resize',\n                cell,\n                entitiy;\n            if (!self.visibleCells || !self.visibleCells.length) { return; }\n            self.hasFocus = true;\n            if (!(y < self.height\n                && y > 0\n                && x < self.width\n                && x > 0)) {\n                self.hasFocus = false;\n                return {\n                    dragContext: 'inherit',\n                    context: 'inherit'\n                };\n            }\n            for (i = 0; i < l; i += 1) {\n                cell = self.visibleCells[i];\n                // interactive dimensions of the cell.  used for touch \"over size\" zones\n                entitiy = {\n                    x: cell.x,\n                    y: cell.y,\n                    height: cell.height,\n                    width: cell.width\n                };\n                if (useTouchScrollZones && /(vertical|horizontal)-scroll-/.test(cell.style)) {\n                    entitiy.x -= tsz;\n                    entitiy.y -= tsz;\n                    entitiy.height += tsz;\n                    entitiy.width += tsz;\n                }\n                if (entitiy.x - self.style.cellBorderWidth < x\n                        && entitiy.x + entitiy.width + self.style.cellBorderWidth > x\n                        && entitiy.y - self.style.cellBorderWidth < y\n                        && entitiy.y + entitiy.height + self.style.cellBorderWidth > y) {\n                    if (/frozen-row-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'row-resize';\n                        return cell;\n                    }\n                    if (/frozen-column-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'col-resize';\n                        return cell;\n                    }\n                    if (/selection-handle-/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'crosshair';\n                        return cell;\n                    }\n                    if (/vertical-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'vertical-scroll-box';\n                        cell.context = 'vertical-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isVerticalScrollBar = true;\n                        if (y > self.scrollBox.box.v.y + self.scrollBox.scrollBoxHeight) {\n                            cell.dragContext = 'vertical-scroll-bottom';\n                            cell.context = 'vertical-scroll-bottom';\n                        } else if (y < self.scrollBox.box.v.y) {\n                            cell.dragContext = 'vertical-scroll-top';\n                            cell.context = 'vertical-scroll-top';\n                        }\n                        self.cursor = 'default';\n                        return cell;\n                    }\n                    if (/horizontal-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'horizontal-scroll-box';\n                        cell.context = 'horizontal-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isHorizontalScrollBar = true;\n                        if (x > self.scrollBox.box.h.x + self.scrollBox.scrollBoxWidth) {\n                            cell.dragContext = 'horizontal-scroll-right';\n                            cell.context = 'horizontal-scroll-right';\n                        } else if (x < self.scrollBox.box.h.x) {\n                            cell.dragContext = 'horizontal-scroll-left';\n                            cell.context = 'horizontal-scroll-left';\n                        }\n                        self.cursor = 'default';\n                        return cell;\n                    }\n                    border = getBorder(entitiy);\n                    // check if the border of this cell is the border of the selection and if so show move cursor in move mode\n                    moveBorder = moveMode && cell.selectionBorder && cell.selectionBorder.indexOf(border) !== -1;\n                    if (['l', 'r'].indexOf(border) !== -1\n                            && (self.attributes.allowColumnResize || moveBorder)\n                            && ((self.attributes.allowColumnResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && ((self.attributes.allowRowHeaderResize && (cell.isRowHeader || cell.isCorner)) || !(cell.isRowHeader && cell.isCorner))) {\n                        if (((cell.isColumnHeader || cell.isCorner) || (self.attributes.allowColumnResizeFromCell && cell.isNormal)) && border === 'r') {\n                            cell.context = 'ew-resize';\n                            cell.dragContext = 'ew-resize';\n                            return cell;\n                        }\n                        if (!(cell.isColumnHeader || cell.isCorner) && moveBorder) {\n                            cell.context = xBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (['t', 'b'].indexOf(border) !== -1\n                            && cell.rowIndex > -1\n                            && (self.attributes.allowRowResize || moveBorder)\n                            && ((self.attributes.allowRowResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && !cell.isColumnHeader) {\n                        if (((cell.isRowHeader || cell.isCorner) || (self.attributes.allowRowResizeFromCell && cell.isNormal)) && border === 'b') {\n                            cell.context = 'ns-resize';\n                            cell.dragContext = 'ns-resize';\n                            return cell;\n                        }\n                        if (!(cell.isRowHeader || cell.isCorner) && moveBorder) {\n                            cell.context = yBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (cell.style === 'columnHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'column-reorder';\n                        return cell;\n                    }\n                    if (cell.style === 'rowHeaderCell') {\n                        if ((self.attributes.rowGrabZoneSize + (cell.y - self.style.cellBorderWidth) < y)\n                                || !self.attributes.allowRowReordering) {\n                            cell.dragContext = 'cell';\n                            cell.context = 'cell';\n                        } else {\n                            cell.context = self.cursorGrab;\n                            cell.dragContext = 'row-reorder';\n                        }\n                        return cell;\n                    }\n                    if (cell.isGrid) {\n                        self.hasFocus = false;\n                        cell.dragContext = 'cell-grid';\n                        cell.context = 'cell-grid';\n                        return cell;\n                    }\n                    if (cell.style === 'tree-grid') {\n                        self.hasFocus = false;\n                        cell.dragContext = 'tree';\n                        cell.context = 'tree';\n                        return cell;\n                    }\n                    cell.dragContext = 'cell';\n                    cell.context = 'cell';\n                    return cell;\n                }\n            }\n            self.hasFocus = true;\n            self.cursor = 'default';\n            return {\n                dragContext: 'background',\n                context: 'background',\n                style: 'background',\n                isBackground: true\n            };\n        };\n        /**\n         * Gets the bounds of current selection. \n         * @returns {rect} selection.\n         * @memberof canvasDatagrid\n         * @name getSelectionBounds\n         * @method\n         */\n        self.getSelectionBounds = function () {\n            var low = {x: Infinity, y: Infinity},\n                high = {x: -Infinity, y: -Infinity};\n            self.data.forEach(function (row, rowIndex) {\n                var maxCol, minCol;\n                if (self.selections[rowIndex] && self.selections[rowIndex].length) {\n                    low.y = rowIndex < low.y ? rowIndex : low.y;\n                    high.y = rowIndex > high.y ? rowIndex : high.y;\n                    maxCol = Math.max.apply(null, self.selections[rowIndex]);\n                    minCol = Math.min.apply(null, self.selections[rowIndex]);\n                    low.x = minCol < low.x ? minCol : low.x;\n                    high.x = maxCol > high.x ? maxCol : high.x;\n                }\n            });\n            return {\n                top: low.y,\n                left: low.x,\n                bottom: high.y,\n                right: high.x\n            };\n        };\n        /**\n         * Returns an auto generated schema based on data structure.\n         * @memberof canvasDatagrid\n         * @name getSchemaFromData\n         * @method\n         * @tutorial schema\n         * @returns {schema} schema A schema based on the first item in the data array.\n         */\n        self.getSchemaFromData = function () {\n            return Object.keys(self.data[0] || {' ': ''}).map(function mapEachSchemaColumn(key, index) {\n                var type = self.getBestGuessDataType(key),\n                    i = {\n                        name: key,\n                        title: isNaN(parseInt(key, 10)) ? key : self.integerToAlpha(key).toUpperCase(),\n                        index: index,\n                        type: type,\n                        filter: self.filter(type)\n                    };\n                if (key === self.uniqueId) {\n                    i.hidden = true;\n                }\n                if (self.storedSettings\n                        && self.storedSettings.visibility\n                        && self.storedSettings.visibility[i.name] !== undefined) {\n                    i.hidden = !self.storedSettings.visibility[i.name];\n                }\n                i[self.uniqueId] = self.getSchemaNameHash(key);\n                return i;\n            });\n        };\n        /**\n         * Clears the change log grid.changes that keeps track of changes to the data set.\n         * This does not undo changes or alter data it is simply a convince array to keep\n         * track of changes made to the data since last this method was called.\n         * @memberof canvasDatagrid\n         * @name clearChangeLog\n         * @method\n         */\n        self.clearChangeLog = function () {\n            self.changes = [];\n        };\n        /**\n         * Selects an area of the grid.\n         * @memberof canvasDatagrid\n         * @name selectArea\n         * @method\n         * @param {rect} bounds A rect object representing the selected values.\n         */\n        self.selectArea = function (bounds, ctrl) {\n            self.selectionBounds = bounds || self.selectionBounds;\n            var x, y, s = self.getSchema();\n            if (!ctrl) {\n                self.selections = [];\n            }\n            if (self.selectionBounds.top < -1\n                    || self.selectionBounds.bottom > self.data.length\n                    || self.selectionBounds.left < -1\n                    || self.selectionBounds.right > s.length) {\n                throw new Error('Impossible selection area');\n            }\n            for (x = self.selectionBounds.top; x <= self.selectionBounds.bottom; x += 1) {\n                self.selections[x] = [];\n                for (y = self.selectionBounds.left; y <= self.selectionBounds.right; y += 1) {\n                    if (self.selections[x].indexOf(y) === -1) {\n                        self.selections[x].push(y);\n                    }\n                }\n            }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Returns the maximum text width for a given column by column name.\n         * @memberof canvasDatagrid\n         * @name findColumnMaxTextLength\n         * @method\n         * @returns {number} The number of pixels wide the maximum width value in the selected column.\n         * @param {string} name The name of the column to calculate the value's width of.\n         */\n        self.findColumnMaxTextLength = function (name) {\n            var m = -Infinity;\n            if (name === 'cornerCell') {\n                self.ctx.font = self.style.rowHeaderCellFont;\n                return self.ctx.measureText((self.data.length + (self.attributes.showNewRow ? 1 : 0)).toString()).width\n                    + self.style.autosizePadding + self.style.autosizeHeaderCellPadding\n                    + self.style.rowHeaderCellPaddingRight\n                    + self.style.rowHeaderCellPaddingLeft\n                    + (self.attributes.tree ? self.style.treeArrowWidth\n                        + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight : 0);\n            }\n            self.getSchema().forEach(function (col) {\n                if (col.name !== name) { return; }\n                self.ctx.font = self.style.columnHeaderCellFont;\n                var t = self.ctx.measureText(col.title || col.name).width\n                    + self.style.headerCellPaddingRight\n                    + self.style.headerCellPaddingLeft;\n                m = t > m ? t : m;\n            });\n            self.data.forEach(function (row) {\n                self.ctx.font = self.style.cellFont;\n                var t = self.ctx.measureText(row[name]).width\n                    + self.style.cellPaddingRight\n                    + self.style.cellPaddingLeft + self.style.cellAutoResizePadding;\n                m = t > m ? t : m;\n            });\n            return m;\n        };\n        /**\n         * Gets the total width of all header columns.\n         * @memberof canvasDatagrid\n         * @name getHeaderWidth\n         * @method\n         */\n        self.getHeaderWidth = function () {\n            return self.getVisibleSchema().reduce(function (total, header) {\n                return total + (header.width || self.style.cellWidth);\n            }, 0);\n        };\n        self.formatters.string = function cellFormatterString(e) {\n            return e.cell.value !== undefined ? e.cell.value : '';\n        };\n        self.formatters.rowHeaderCell = self.formatters.string;\n        self.formatters.headerCell = self.formatters.string;\n        self.formatters.number = self.formatters.string;\n        self.formatters.int = self.formatters.string;\n        self.formatters.html = self.formatters.string;\n        self.sorters.string = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (a[columnName] === undefined || a[columnName] === null) {\n                    return 1;\n                }\n                if (b[columnName] === undefined || b[columnName] === null) {\n                    return 0;\n                }\n                if (asc) {\n                    if (!a[columnName].localeCompare) { return 1; }\n                    return a[columnName].localeCompare(b[columnName]);\n                }\n                if (!b[columnName].localeCompare) { return 1; }\n                return b[columnName].localeCompare(a[columnName]);\n            };\n        };\n        self.sorters.number = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return a[columnName] - b[columnName];\n                }\n                return b[columnName] - a[columnName];\n            };\n        };\n        self.sorters.date = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return new Date(a[columnName]).getTime()\n                        - new Date(b[columnName]).getTime();\n                }\n                return new Date(b[columnName]).getTime()\n                        - new Date(a[columnName]).getTime();\n            };\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// canvas-datagrid.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 9b9fdb62f0a8b5d4ea1d","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.defaults = {\n            attributes: [\n                ['allowColumnReordering', true],\n                ['allowColumnResize', true],\n                ['allowColumnResizeFromCell', false],\n                ['allowFreezingRows', false],\n                ['allowFreezingColumns', false],\n                ['allowMovingSelection', true],\n                ['allowRowHeaderResize', true],\n                ['allowRowReordering', false],\n                ['allowRowResize', true],\n                ['allowRowResizeFromCell', false],\n                ['allowSorting', true],\n                ['autoGenerateSchema', false],\n                ['autoResizeColumns', false],\n                ['borderDragBehavior', 'none'],\n                ['borderResizeZone', 10],\n                ['clearSettingsOptionText', 'Clear saved settings'],\n                ['columnHeaderClickBehavior', 'sort'],\n                ['columnSelectorHiddenText', '&nbsp;&nbsp;&nbsp;'],\n                ['columnSelectorText', 'Add/Remove columns'],\n                ['columnSelectorVisibleText', '\\u2713'],\n                ['contextHoverScrollAmount', 2],\n                ['contextHoverScrollRateMs', 5],\n                ['copyText', 'Copy'],\n                ['debug', false],\n                ['editable', true],\n                ['filterOptionText', 'Filter %s'],\n                ['filterTextPrefix', '(filtered) '],\n                ['globalRowResize', false],\n                ['hideColumnText', 'Hide %s'],\n                ['maxAutoCompleteItems', 200],\n                ['multiLine', false],\n                ['name', ''],\n                ['pageUpDownOverlap', 1],\n                ['pasteText', 'Paste'],\n                ['persistantSelectionMode', false],\n                ['removeFilterOptionText', 'Remove filter on %s'],\n                ['reorderDeadZone', 3],\n                ['resizeScrollZone', 20],\n                ['rowGrabZoneSize', 5],\n                ['saveAppearance', true],\n                ['scrollAnimationPPSThreshold', 0.75],\n                ['scrollPointerLock', false],\n                ['scrollRepeatRate', 75],\n                ['selectionFollowsActiveCell', false],\n                ['selectionHandleBehavior', 'none'],\n                ['selectionMode', 'cell'],\n                ['selectionScrollIncrement', 20],\n                ['selectionScrollZone', 20],\n                ['showClearSettingsOption', true],\n                ['showColumnHeaders', true],\n                ['showColumnSelector', true],\n                ['showCopy', true],\n                ['showFilter', true],\n                ['showNewRow', false],\n                ['showOrderByOption', true],\n                ['showOrderByOptionTextAsc', 'Order by %s ascending'],\n                ['showOrderByOptionTextDesc', 'Order by %s descending'],\n                ['showPaste', false],\n                ['showPerformance', false],\n                ['showRowHeaders', true],\n                ['showRowNumbers', true],\n                ['snapToRow', false],\n                ['touchContextMenuTimeMs', 800],\n                ['touchDeadZone', 3],\n                ['touchEasingMethod', 'easeOutQuad'],\n                ['touchReleaseAcceleration', 1000],\n                ['touchReleaseAnimationDurationMs', 2000],\n                ['touchScrollZone', 20],\n                ['touchSelectHandleZone', 20],\n                ['touchZoomSensitivity', 0.005],\n                ['touchZoomMin', 0.5],\n                ['touchZoomMax', 1.75],\n                ['maxPixelRatio', 1],\n                ['tree', false],\n                ['treeHorizontalScroll', false]\n            ],\n            styles: [\n                ['activeCellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['activeCellBorderWidth', 1],\n                ['activeCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellFont', '16px sans-serif'],\n                ['activeCellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['activeCellOverlayBorderWidth', 1],\n                ['activeCellPaddingBottom', 5],\n                ['activeCellPaddingLeft', 5],\n                ['activeCellPaddingRight', 7],\n                ['activeCellPaddingTop', 5],\n                ['activeCellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['activeCellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['activeColumnHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeColumnHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeRowHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeRowHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['autocompleteBottomMargin', 60],\n                ['autosizeHeaderCellPadding', 8],\n                ['autosizePadding', 5],\n                ['cellAutoResizePadding', 13],\n                ['cellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['cellBorderWidth', 1],\n                ['cellColor', 'rgba(0, 0, 0, 1)'],\n                ['cellFont', '16px sans-serif'],\n                ['cellGridHeight', 250],\n                ['cellHeight', 24],\n                ['cellHeightWithChildGrid', 150],\n                ['cellHorizontalAlignment', 'left'],\n                ['cellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['cellPaddingBottom', 5],\n                ['cellPaddingLeft', 5],\n                ['cellPaddingRight', 7],\n                ['cellPaddingTop', 5],\n                ['cellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['cellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['cellVerticalAlignment', 'center'],\n                ['cellWidth', 250],\n                ['cellWidthWithChildGrid', 250],\n                ['childContextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['childContextMenuArrowHTML', '&#x25BA;'],\n                ['childContextMenuMarginLeft', -11],\n                ['childContextMenuMarginTop', -6],\n                ['columnHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellBorderColor', 'rgba(172, 172, 172, 1)'],\n                ['columnHeaderCellBorderWidth', 1],\n                ['columnHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['columnHeaderCellFont', '16px sans-serif'],\n                ['columnHeaderCellHeight', 25],\n                ['columnHeaderCellHorizontalAlignment', 'left'],\n                ['columnHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['columnHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['columnHeaderCellPaddingBottom', 5],\n                ['columnHeaderCellPaddingLeft', 5],\n                ['columnHeaderCellPaddingRight', 7],\n                ['columnHeaderCellPaddingTop', 5],\n                ['columnHeaderCellVerticalAlignment', 'center'],\n                ['columnHeaderOrderByArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['columnHeaderOrderByArrowBorderWidth', 1],\n                ['columnHeaderOrderByArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['columnHeaderOrderByArrowHeight', 8],\n                ['columnHeaderOrderByArrowMarginLeft', 0],\n                ['columnHeaderOrderByArrowMarginRight', 5],\n                ['columnHeaderOrderByArrowMarginTop', 6],\n                ['columnHeaderOrderByArrowWidth', 13],\n                ['contextFilterButtonBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterButtonBorderRadius', '3px'],\n                ['contextFilterButtonHTML', '&#x25BC;'],\n                ['contextFilterInputBackground', 'rgba(255,255,255,1)'],\n                ['contextFilterInputBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterInputBorderRadius', '0'],\n                ['contextFilterInputColor', 'rgba(0,0,0,1)'],\n                ['contextFilterInputFontFamily', 'sans-serif'],\n                ['contextFilterInputFontSize', '14px'],\n                ['contextFilterInvalidRegExpBackground', 'rgba(180, 6, 1, 1)'],\n                ['contextFilterInvalidRegExpColor', 'rgba(255, 255, 255, 1)'],\n                ['contextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuArrowDownHTML', '&#x25BC;'],\n                ['contextMenuArrowUpHTML', '&#x25B2;'],\n                ['contextMenuBackground', 'rgba(240, 240, 240, 1)'],\n                ['contextMenuBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextMenuBorderRadius', '3px'],\n                ['contextMenuChildArrowFontSize', '12px'],\n                ['contextMenuColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuFilterButtonFontFamily', 'sans-serif'],\n                ['contextMenuFilterButtonFontSize', '10px'],\n                ['contextMenuFilterInvalidExpresion', 'rgba(237, 155, 156, 1)'],\n                ['contextMenuFontFamily', 'sans-serif'],\n                ['contextMenuFontSize', '16px'],\n                ['contextMenuHoverBackground', 'rgba(182, 205, 250, 1)'],\n                ['contextMenuHoverColor', 'rgba(43, 48, 153, 1)'],\n                ['contextMenuItemBorderRadius', '3px'],\n                ['contextMenuItemMargin', '2px'],\n                ['contextMenuLabelDisplay', 'inline-block'],\n                ['contextMenuLabelMargin', '0 3px 0 0'],\n                ['contextMenuLabelMaxWidth', '700px'],\n                ['contextMenuLabelMinWidth', '75px'],\n                ['contextMenuMarginLeft', 3],\n                ['contextMenuMarginTop', -3],\n                ['contextMenuOpacity', '0.98'],\n                ['contextMenuPadding', '2px'],\n                ['contextMenuWindowMargin', 100],\n                ['contextMenuZIndex', 10000],\n                ['cornerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cornerCellBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['display', 'inline-block'],\n                ['editCellBackgroundColor', 'white'],\n                ['editCellBorder', 'solid 1px rgba(110, 168, 255, 1)'],\n                ['editCellBoxShadow', '0 2px 5px rgba(0,0,0,0.4)'],\n                ['editCellColor', 'black'],\n                ['editCellFontFamily', 'sans-serif'],\n                ['editCellFontSize', '16px'],\n                ['editCellPaddingLeft', 4],\n                ['editCellZIndex', 10000],\n                ['frozenMarkerHoverColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerHoverBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerActiveColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerActiveBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerColor', 'rgba(222, 222, 222, 1)'],\n                ['frozenMarkerBorderColor', 'rgba(168, 168, 168, 1)'],\n                ['frozenMarkerBorderWidth', 1],\n                ['frozenMarkerWidth', 2],\n                ['gridBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['gridBorderCollapse', 'collapse'],\n                ['gridBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['gridBorderWidth', 1],\n                ['height', 'auto'],\n                ['maxHeight', 'inherit'],\n                ['maxWidth', 'inherit'],\n                ['minColumnWidth', 45],\n                ['minHeight', 'inherit'],\n                ['minRowHeight', 24],\n                ['minWidth', 'inherit'],\n                ['mobileContextMenuMargin', 10],\n                ['mobileEditInputHeight', 30],\n                ['mobileEditFontFamily', 'sans-serif'],\n                ['mobileEditFontSize', '16px'],\n                ['moveOverlayBorderWidth', 1],\n                ['moveOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['moveOverlayBorderSegments', '12, 7'],\n                ['name', 'default'],\n                ['reorderMarkerBackgroundColor', 'rgba(0, 0, 0, 0.1)'],\n                ['reorderMarkerBorderColor', 'rgba(0, 0, 0, 0.2)'],\n                ['reorderMarkerBorderWidth', 1.25],\n                ['reorderMarkerIndexBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['reorderMarkerIndexBorderWidth', 2.75],\n                ['rowHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['rowHeaderCellBorderColor', 'rgba(200, 200, 200, 1)'],\n                ['rowHeaderCellBorderWidth', 1],\n                ['rowHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellFont', '16px sans-serif'],\n                ['rowHeaderCellHeight', 25],\n                ['rowHeaderCellHorizontalAlignment', 'left'],\n                ['rowHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['rowHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['rowHeaderCellPaddingBottom', 5],\n                ['rowHeaderCellPaddingLeft', 5],\n                ['rowHeaderCellPaddingRight', 5],\n                ['rowHeaderCellPaddingTop', 5],\n                ['rowHeaderCellSelectedBackgroundColor', 'rgba(217, 217, 217, 1)'],\n                ['rowHeaderCellSelectedColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellVerticalAlignment', 'center'],\n                ['rowHeaderCellWidth', 57],\n                ['scrollBarActiveColor', 'rgba(125, 125, 125, 1)'],\n                ['scrollBarBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarBorderWidth', 0.5],\n                ['scrollBarBoxBorderRadius', 4.125],\n                ['scrollBarBoxColor', 'rgba(192, 192, 192, 1)'],\n                ['scrollBarBoxMargin', 2],\n                ['scrollBarBoxMinSize', 15],\n                ['scrollBarBoxWidth', 8],\n                ['scrollBarCornerBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarCornerBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarWidth', 11],\n                ['selectionHandleBorderColor', 'rgba(255, 255, 255, 1)'],\n                ['selectionHandleBorderWidth', 1.5],\n                ['selectionHandleColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionHandleSize', 8],\n                ['selectionHandleType', 'square'],\n                ['selectionOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionOverlayBorderWidth', 1],\n                ['treeArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['treeArrowBorderWidth', 1],\n                ['treeArrowClickRadius', 5],\n                ['treeArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['treeArrowHeight', 8],\n                ['treeArrowMarginLeft', 0],\n                ['treeArrowMarginRight', 5],\n                ['treeArrowMarginTop', 6],\n                ['treeArrowWidth', 13],\n                ['treeGridHeight', 250],\n                ['width', 'auto']\n            ]\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/defaults.js\n// module id = 0\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true, evil: true*/\n/*globals Reflect: false, HTMLElement: true, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([\n    './component',\n    './defaults',\n    './draw',\n    './events',\n    './touch',\n    './intf',\n    './contextMenu',\n    './dom',\n    './publicMethods'\n], function context(component) {\n    'use strict';\n    component = component();\n    var modules = Array.prototype.slice.call(arguments);\n    function Grid(args) {\n        args = args || {};\n        var self = {};\n        self.isComponent = args.component === undefined;\n        self.isChildGrid = args.parentNode && /canvas-datagrid-(cell|tree)/.test(args.parentNode.nodeType);\n        if (self.isChildGrid) {\n            self.intf = {};\n        } else {\n            self.intf = self.isComponent ? eval('Reflect.construct(HTMLElement, [], new.target)')\n                : document.createElement('canvas');\n        }\n        self.args = args;\n        self.intf.args = args;\n        self.applyComponentStyle = component.applyComponentStyle;\n        self.createGrid = function grid(args) {\n            args.component = false;\n            return new Grid(args);\n        };\n        modules.forEach(function (module) {\n            module(self);\n        });\n        if (self.isChildGrid) {\n            self.shadowRoot = args.parentNode.shadowRoot;\n            self.parentNode = args.parentNode;\n        } else if (self.intf.createShadowRoot) {\n            self.shadowRoot = self.intf.attachShadow({mode: 'open'});\n            self.parentNode = self.shadowRoot;\n        } else {\n            self.parentNode = self.intf;\n        }\n        self.init();\n        return self.intf;\n    }\n    if (window.HTMLElement) {\n        Grid.prototype = Object.create(window.HTMLElement.prototype);\n    }\n    // export web component\n    if (window.customElements) {\n        Grid.observedAttributes = component.getObservableAttributes();\n        Grid.prototype.disconnectedCallback = component.disconnectedCallback;\n        Grid.prototype.attributeChangedCallback = component.attributeChangedCallback;\n        Grid.prototype.connectedCallback = component.connectedCallback;\n        Grid.prototype.adoptedCallback = component.adoptedCallback;\n        window.customElements.define('canvas-datagrid', Grid);\n    }\n    // export global\n    if (window && !window.canvasDatagrid && !window.require) {\n        window.canvasDatagrid = function (args) { return new Grid(args); };\n    }\n    // export amd loader\n    module.exports = function grid(args) {\n        args = args || {};\n        var i, tKeys = ['style', 'schema', 'data', 'formatters',\n                    'sorters', 'filters', 'treeGridAttributes', 'cellGridAttributes'];\n        if (window.customElements && document.body.createShadowRoot) {\n            i = document.createElement('canvas-datagrid');\n            Object.keys(args).forEach(function (argKey) {\n                if (argKey === 'parentNode') {\n                    args.parentNode.appendChild(i);\n                    return;\n                }\n                // top level keys in args\n                if (tKeys.indexOf(argKey) !== -1) {\n                    tKeys.forEach(function (tKey) {\n                        if (args[tKey] === undefined || tKey !== argKey) { return; }\n                        if (['formatters', 'sorters', 'filters'].indexOf(argKey) !== -1) {\n                            if (typeof args[tKey] === 'object' && args[tKey] !== null) {\n                                Object.keys(args[tKey]).forEach(function (sKey) {\n                                    i[tKey][sKey] = args[tKey][sKey];\n                                });\n                            }\n                        } else {\n                            i[tKey] = args[tKey];\n                        }\n                    });\n                    return;\n                }\n                // all others are attribute level keys\n                i.attributes[argKey] = args[argKey];\n            });\n            return i;\n        }\n        args.component = false;\n        i = new Grid(args);\n        if (args.parentNode && args.parentNode.appendChild) {\n            args.parentNode.appendChild(i);\n        }\n        return i;\n    };\n    return module.exports;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/main.js\n// module id = 1\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine(['./defaults'], function (defaults) {\n    'use strict';\n    return function () {\n        var typeMap, component = {};\n        function hyphenateProperty(prop, cust) {\n            var p = '';\n            Array.prototype.forEach.call(prop, function (char) {\n                if (char === char.toUpperCase()) {\n                    p += '-' + char.toLowerCase();\n                    return;\n                }\n                p += char;\n            });\n            return (cust ? '--cdg-' : '') + p;\n        }\n        function getDefaultItem(base, item) {\n            var i = {},\n                r;\n            defaults(i);\n            r = i.defaults[base].filter(function (i) {\n                return i[0].toLowerCase() === item.toLowerCase()\n                    || hyphenateProperty(i[0]) === item.toLowerCase()\n                    || hyphenateProperty(i[0], true) === item.toLowerCase();\n            })[0];\n            return r;\n        }\n        component.applyComponentStyle = function (supressChangeAndDrawEvents, intf) {\n            var cStyle = window.getComputedStyle(intf.tagName === 'CANVAS-DATAGRID' ? intf : intf.canvas, null),\n                defs = {};\n            intf.computedStyle = cStyle;\n            defaults(defs);\n            defs = defs.defaults.styles;\n            defs.forEach(function (def) {\n                var val;\n                val = cStyle.getPropertyValue(hyphenateProperty(def[0], true));\n                if (val === \"\") {\n                    val = cStyle.getPropertyValue(hyphenateProperty(def[0], false));\n                }\n                if (val !== \"\" && typeof val === 'string') {\n                    intf.setStyleProperty(def[0], typeMap[typeof def[1]](val\n                        .replace(/^\\s+/, '').replace(/\\s+$/, ''), def[1]));\n                }\n            });\n            requestAnimationFrame(function () { intf.resize(true); });\n            if (!supressChangeAndDrawEvents && intf.dispatchEvent) {\n                intf.dispatchEvent('stylechanged', intf.style);\n            }\n        };\n        typeMap = {\n            data: function (strData) {\n                try {\n                    return JSON.parse(strData);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid data.');\n                }\n            },\n            schema: function (strSchema) {\n                try {\n                    return JSON.parse(strSchema);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid schema attribute.');\n                }\n            },\n            number: function (strNum, def) {\n                var n = parseInt(strNum, 10);\n                return isNaN(n) ? def : n;\n            },\n            boolean: function (strBool) {\n                return (/true/i).test(strBool);\n            },\n            string: function (str) {\n                return str;\n            }\n        };\n        component.getObservableAttributes = function () {\n            var i = {}, attrs = ['data', 'schema', 'style', 'className', 'name'];\n            defaults(i);\n            i.defaults.attributes.forEach(function (attr) {\n                attrs.push(attr[0].toLowerCase());\n            });\n            return attrs;\n        };\n        component.disconnectedCallback = function () {\n            this.connected = false;\n        };\n        component.connectedCallback = function () {\n            var intf = this;\n            intf.connected = true;\n            component.observe(intf);\n            component.applyComponentStyle(true, intf);\n            intf.resize(true);\n        };\n        component.adoptedCallback = function () {\n            this.resize();\n        };\n        component.attributeChangedCallback = function (attrName, oldVal, newVal) {\n            var tfn, intf = this, def;\n            if (attrName === 'style') {\n                component.applyComponentStyle(false, intf);\n                return;\n            }\n            if (attrName === 'data') {\n                intf.args.data = typeMap.data(newVal);\n                return;\n            }\n            if (attrName === 'schema') {\n                intf.args.schema = typeMap.schema(newVal);\n                return;\n            }\n            if (attrName === 'name') {\n                intf.name = newVal;\n                return;\n            }\n            if (attrName === 'class' || attrName === 'className') {\n                return;\n            }\n            def = getDefaultItem('attributes', attrName);\n            if (def) {\n                tfn = typeMap[typeof def[1]];\n                intf.attributes[def[0]] = tfn(newVal);\n                return;\n            }\n            if (/^on/.test(attrName)) {\n                intf.addEventListener('on' + attrName, function (e) {\n                    eval(newVal);\n                });\n            }\n            return;\n        };\n        component.observe = function (intf) {\n            var observer;\n            if (!window.MutationObserver) { return; }\n            intf.applyComponentStyle = function () { component.applyComponentStyle(false, intf); intf.resize(); };\n            /**\n             * Applies the computed css styles to the grid.  In some browsers, changing directives in attached style sheets does not automatically update the styles in this component.  It is necessary to call this method to update in these cases.\n             * @memberof canvasDatagrid\n             * @name applyComponentStyle\n             * @method\n             */\n            observer = new window.MutationObserver(function (mutations) {\n                var checkInnerHTML, checkStyle;\n                Array.prototype.forEach.call(mutations, function (mutation) {\n                    if (mutation.attributeName === 'class'\n                            || mutation.attributeName === 'style') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.target.parentNode\n                            && mutation.target.parentNode.nodeName === 'STYLE') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.addedNodes.length > 0 || mutation.type === 'characterData') {\n                        checkInnerHTML = true;\n                    }\n                });\n                if (checkStyle) {\n                    intf.applyComponentStyle(false, intf);\n                }\n                if (checkInnerHTML) {\n                    intf.data = typeMap.data(intf.innerHTML);\n                }\n            });\n            observer.observe(intf, { characterData: true, childList: true, attributes: true, subtree: true });\n            Array.prototype.forEach.call(document.querySelectorAll('style'), function (el) {\n                observer.observe(el, { characterData: true, childList: true, attributes: true, subtree: true });\n            });\n        };\n        return component;\n    };\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/component.js\n// module id = 2\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals XMLSerializer: false, define: true, Blob: false, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var perfCounters = [],\n            drawCount = 0,\n            perfWindowSize = 300,\n            entityCount = [],\n            scrollDebugCounters = [],\n            touchPPSCounters = [];\n        self.htmlImageCache = {};\n        function drawPerfLine(w, h, x, y, perfArr, arrIndex, max, color, useAbs) {\n            var i = w / perfArr.length,\n                r = h / max;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x, y + h);\n            perfArr.forEach(function (n) {\n                var val = (arrIndex === undefined ? n : n[arrIndex]),\n                    cx,\n                    cy;\n                if (useAbs) {\n                    val = Math.abs(val);\n                }\n                cx = x + i;\n                cy = y + h - (val * r);\n                self.ctx.lineTo(cx, cy);\n                x += i;\n            });\n            self.ctx.moveTo(x + w, y + h);\n            self.ctx.strokeStyle = color;\n            self.ctx.stroke();\n        }\n        function drawOnAllImagesLoaded() {\n            var loaded = true;\n            Object.keys(self.htmlImageCache).forEach(function (html) {\n                if (!self.htmlImageCache[html].complete) {\n                    loaded = false;\n                }\n            });\n            if (loaded) {\n                self.draw();\n            }\n        }\n        function drawHtml(cell) {\n            var img,\n                v = cell.innerHTML || cell.formattedValue,\n                x = cell.x + self.canvasOffsetLeft,\n                y = cell.y + self.canvasOffsetTop;\n            if (self.htmlImageCache[v]) {\n                img = self.htmlImageCache[v];\n                if (img.height !== cell.height || img.width !== cell.width) {\n                    // height and width of the cell has changed, invalidate cache\n                    self.htmlImageCache[v] = undefined;\n                } else {\n                    if (!img.complete) {\n                        return;\n                    }\n                    return self.ctx.drawImage(img, x, y);\n                }\n            }\n            img = new Image(cell.width, cell.height);\n            self.htmlImageCache[v] = img;\n            img.onload = function () {\n                self.ctx.drawImage(img, x, y);\n                drawOnAllImagesLoaded();\n            };\n            img.src = 'data:image/svg+xml;base64,' + btoa(\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + cell.width + '\" height=\"' + cell.height + '\">\\n' +\n                    '<foreignObject class=\"node\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\\n' +\n                    '<body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;padding:0;\">\\n' +\n                    v + '\\n' +\n                    '</body>' +\n                    '</foreignObject>\\n' +\n                    '</svg>\\n'\n            );\n        }\n        function drawOrderByArrow(x, y) {\n            var mt = self.style.columnHeaderOrderByArrowMarginTop * self.scale,\n                ml = self.style.columnHeaderOrderByArrowMarginLeft * self.scale,\n                mr = self.style.columnHeaderOrderByArrowMarginRight * self.scale,\n                aw = self.style.columnHeaderOrderByArrowWidth * self.scale,\n                ah = self.style.columnHeaderOrderByArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.columnHeaderOrderByArrowColor;\n            self.ctx.strokeStyle = self.style.columnHeaderOrderByArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.orderDirection === 'asc') {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y + ah);\n                self.ctx.lineTo(x + aw, y + ah);\n                self.ctx.lineTo(x + (aw * 0.5), y);\n                self.ctx.lineTo(x, y + ah);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function drawTreeArrow(cell, x, y) {\n            var mt = self.style.treeArrowMarginTop * self.scale,\n                mr = self.style.treeArrowMarginRight * self.scale,\n                ml = self.style.treeArrowMarginLeft * self.scale,\n                aw = self.style.treeArrowWidth * self.scale,\n                ah = self.style.treeArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.treeArrowColor;\n            self.ctx.strokeStyle = self.style.treeArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.openChildren[cell.data[self.uniqueId]]) {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y);\n                self.ctx.lineTo(x + ah, y + (aw * 0.5));\n                self.ctx.lineTo(x, y + aw);\n                self.ctx.lineTo(x, y);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function radiusRect(x, y, w, h, radius) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            var r = x + w, b = y + h;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x + radius, y);\n            self.ctx.lineTo(r - radius, y);\n            self.ctx.quadraticCurveTo(r, y, r, y + radius);\n            self.ctx.lineTo(r, y + h - radius);\n            self.ctx.quadraticCurveTo(r, b, r - radius, b);\n            self.ctx.lineTo(x + radius, b);\n            self.ctx.quadraticCurveTo(x, b, x, b - radius);\n            self.ctx.lineTo(x, y + radius);\n            self.ctx.quadraticCurveTo(x, y, x + radius, y);\n        }\n        function fillRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillRect(x, y, w, h);\n        }\n        function strokeRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.strokeRect(x, y, w, h);\n        }\n        function fillText(text, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillText(text, x, y);\n        }\n        function fillCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.fill();\n        }\n        function strokeCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.stroke();\n        }\n        function clipFrozenArea(mode) {\n            // 0 both, 1 rows, 2 cols\n            // self.lastFrozenColumnPixel;\n            // self.lastFrozenRowPixel;\n            self.ctx.beginPath();\n            if (mode === 0) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, self.lastFrozenRowPixel);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 1) {\n                self.ctx.moveTo(0, self.lastFrozenRowPixel);\n                self.ctx.lineTo(0, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 2) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, 0);\n                self.ctx.lineTo(self.width, 0);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n            }\n            self.ctx.clip();\n        }\n        function fillHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return fillCircle(x, y, r * 0.5);\n            }\n            fillRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function strokeHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return strokeCircle(x, y, r * 0.5);\n            }\n            strokeRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function addselectionHandle(c, pos) {\n            var hw = self.style.selectionHandleSize,\n                p = {\n                    tr: function () {\n                        fillHandle(c.x + c.width, c.y, hw);\n                        strokeHandle(c.x + c.width, c.y, hw);\n                    },\n                    br: function () {\n                        fillHandle(c.x + c.width, c.y + c.height, hw);\n                        strokeHandle(c.x + c.width, c.y + c.height, hw);\n                    },\n                    tl: function () {\n                        fillHandle(c.x, c.y, hw);\n                        strokeHandle(c.x, c.y, hw);\n                    },\n                    bl: function () {\n                        fillHandle(c.x, c.y + c.height, hw);\n                        strokeHandle(c.x, c.y + c.height, hw);\n                    }\n                };\n            p[pos]();\n        }\n        function addBorderLine(c, pos) {\n            self.ctx.beginPath();\n            var p = {\n                t: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                },\n                r: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                b: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                l: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                }\n            };\n            p[pos]();\n            self.ctx.stroke();\n        }\n        function addEllipsis(text, width) {\n            var c, w = 0;\n            if (self.ellipsisCache[text] && self.ellipsisCache[text][width]) {\n                return self.ellipsisCache[text][width];\n            }\n            //TODO Add ellipsis back when there is a fast way to do it\n            w = self.ctx.measureText(text).width;\n            self.ellipsisCache[text] = self.ellipsisCache[text] || {};\n            c = {value: text, width: w};\n            self.ellipsisCache[text][width] = c;\n            return c;\n        }\n        function drawText(cell) {\n            var paddingLeft = self.style[cell.style + 'PaddingLeft'] * self.scale,\n                paddingTop = self.style[cell.style + 'PaddingTop'] * self.scale,\n                paddingRight = self.style[cell.style + 'PaddingRight'] * self.scale,\n                paddingBottom = self.style[cell.style + 'PaddingBottom'] * self.scale,\n                vPos = paddingTop + cell.height - (cell.height * 0.5),\n                hPos = paddingLeft + cell.treeArrowWidth + cell.orderByArrowWidth;\n            cell.text = addEllipsis(cell.formattedValue, cell.width - paddingRight - paddingLeft);\n            cell.text.height = cell.fontHeight;\n            if (cell.horizontalAlignment === 'right') {\n                hPos = cell.width - cell.text.width - paddingRight;\n            } else if (cell.horizontalAlignment === 'center') {\n                hPos = (cell.width / 2) - (cell.text.width / 2);\n            }\n            if (cell.verticalAlignment === 'top') {\n                vPos = paddingTop + cell.text.height;\n            } else if (cell.verticalAlignment === 'bottom') {\n                vPos = cell.height - paddingBottom - cell.text.height;\n            }\n            cell.text.x = cell.x + hPos;\n            cell.text.y = cell.y + vPos;\n            fillText(cell.text.value, cell.text.x, cell.text.y);\n        }\n        function getFrozenColumnsWidth() {\n            var w = 0,\n                s = self.getVisibleSchema(),\n                x = 0,\n                n = Math.min(self.frozenColumn, s.length),\n                column;\n            while (x < n) {\n                column = s[self.orders.columns[x]];\n                w += ((self.sizes.columns[column[self.uniqueId]] || column.width || self.style.cellWidth) * self.scale);\n                x += 1;\n            }\n            return w;\n        }\n        /**\n         * Redraws the grid. No matter what the change, this is the only method required to refresh everything.\n         * @memberof canvasDatagrid\n         * @name draw\n         * @method\n         */\n         // r = literal row index\n         // rd = row data array\n         // i = user order index\n         // o = literal data index\n         // y = y drawing cursor\n         // x = x drawing cursor\n         // s = visible schema array\n         // cx = current x drawing cursor sub calculation var\n         // cy = current y drawing cursor sub calculation var\n         // a = static cell (like corner cell)\n         // p = perf counter\n         // l = data length\n         // u = current cell\n         // h = current height\n         // w = current width\n        self.draw = function (internal) {\n            if (self.dispatchEvent('beforedraw', {})) { return; }\n            if (!self.isChildGrid && (!self.height || !self.width)) {\n                return;\n            }\n            if (self.isChildGrid && internal) {\n                requestAnimationFrame(self.parentGrid.draw);\n                return;\n            }\n            if (self.intf.visible === false) {\n                return;\n            }\n            // initial values\n            var checkScrollHeight, rowHeaderCell, p, cx, cy, treeGrid, rowOpen,\n                rowHeight, cornerCell, y, x, c, h, w, s, r, rd, aCell,\n                data = (self.data || []),\n                bc = self.style.gridBorderCollapse === 'collapse',\n                selectionBorders = [],\n                moveBorders = [],\n                selectionHandles = [],\n                rowHeaders = [],\n                frozenColumnWidths = getFrozenColumnsWidth(),\n                l = data.length,\n                u = self.currentCell || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                cellHeight = self.style.cellHeight;\n            drawCount += 1;\n            p = performance.now();\n            self.visibleRowHeights = [];\n            // if data length has changed, there is no way to know\n            if (data.length > self.orders.rows.length) {\n                self.createRowOrders();\n            }\n            function drawScrollBars() {\n                var drawCorner,\n                    en = self.scrollBox.entities,\n                    m = (self.style.scrollBarBoxMargin * 2);\n                self.ctx.strokeStyle = self.style.scrollBarBorderColor;\n                self.ctx.lineWidth = self.style.scrollBarBorderWidth;\n                en.horizontalBox.x = rowHeaderCellWidth + self.style.scrollBarBoxMargin\n                    + ((en.horizontalBar.width - self.scrollBox.scrollBoxWidth)\n                        * (self.scrollBox.scrollLeft / self.scrollBox.scrollWidth));\n                en.verticalBox.y = columnHeaderCellHeight + self.style.scrollBarBoxMargin\n                    + ((en.verticalBar.height - self.scrollBox.scrollBoxHeight)\n                        * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight));\n                if (self.scrollBox.horizontalBarVisible) {\n                    self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                    fillRect(en.horizontalBar.x, en.horizontalBar.y, en.horizontalBar.width + m, en.horizontalBar.height);\n                    strokeRect(en.horizontalBar.x, en.horizontalBar.y, en.horizontalBar.width + m, en.horizontalBar.height);\n                    self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                    if (/horizontal/.test(u.context)) {\n                        self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                    }\n                    radiusRect(en.horizontalBox.x, en.horizontalBox.y,\n                        en.horizontalBox.width, en.horizontalBox.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                    drawCorner = true;\n                    self.visibleCells.unshift(en.horizontalBar);\n                    self.visibleCells.unshift(en.horizontalBox);\n                }\n                if (self.scrollBox.verticalBarVisible) {\n                    self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                    fillRect(en.verticalBar.x, en.verticalBar.y, en.verticalBar.width, en.verticalBar.height + m);\n                    strokeRect(en.verticalBar.x, en.verticalBar.y, en.verticalBar.width, en.verticalBar.height + m);\n                    self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                    if (/vertical/.test(u.context)) {\n                        self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                    }\n                    radiusRect(en.verticalBox.x, en.verticalBox.y, en.verticalBox.width,\n                        en.verticalBox.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                    drawCorner = true;\n                    self.visibleCells.unshift(en.verticalBar);\n                    self.visibleCells.unshift(en.verticalBox);\n                }\n                if (drawCorner) {\n                    //corner\n                    self.ctx.strokeStyle = self.style.scrollBarCornerBorderColor;\n                    self.ctx.fillStyle = self.style.scrollBarCornerBackgroundColor;\n                    radiusRect(en.corner.x, en.corner.y, en.corner.width, en.corner.height, 0);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                    self.visibleCells.unshift(en.corner);\n                }\n            }\n            function createHandlesOverlayArray(cell) {\n                if (self.attributes.allowMovingSelection || self.mobile) {\n                    if (cell.selectionBorderTop && cell.selectionBorderRight && self.mobile) {\n                        selectionHandles.push([cell, 'tr']);\n                        cell.selectionHandle = 'tr';\n                    }\n                    if (cell.selectionBorderTop && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'tl']);\n                        cell.selectionHandle = 'tl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'bl']);\n                        cell.selectionHandle = 'bl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderRight\n                            && (self.attributes.selectionHandleBehavior !== 'none' || self.mobile)) {\n                        selectionHandles.push([cell, 'br']);\n                        cell.selectionHandle = 'br';\n                    }\n                }\n            }\n            function createBorderOverlayArray(cell, drawArray, propPrefix, offsetPoint) {\n                offsetPoint = offsetPoint || {x: 0, y: 0};\n                cell.selectionBorder = '';\n                if (!cell.isRowHeader\n                        && self.selections[cell.rowIndex + -offsetPoint.y]\n                        && self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) !== -1) {\n                    if ((!self.selections[cell.rowIndex - 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex - 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1\n                            || cell.rowIndex === 0)\n                            && !cell.isHeader) {\n                        drawArray.push([cell, 't']);\n                        cell[propPrefix + 'BorderTop'] = true;\n                        cell[propPrefix + 'Border'] += 't';\n                    }\n                    if (!self.selections[cell.rowIndex + 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex + 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'b']);\n                        cell[propPrefix + 'BorderBottom'] = true;\n                        cell[propPrefix + 'Border'] += 'b';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === 0\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex - 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'l']);\n                        cell[propPrefix + 'BorderLeft'] = true;\n                        cell[propPrefix + 'Border'] += 'l';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === s.length\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'r']);\n                        cell[propPrefix + 'BorderRight'] = true;\n                        cell[propPrefix + 'Border'] += 'r';\n                    }\n                }\n            }\n            function drawCell(d, rowOrderIndex, rowIndex) {\n                return function drawEach(header, headerIndex, columnOrderIndex) {\n                    var cellStyle = header.style || 'cell',\n                        cellGridAttributes,\n                        cell,\n                        isHeader = /HeaderCell/.test(cellStyle),\n                        isCorner = /cornerCell/.test(cellStyle),\n                        isRowHeader = 'rowHeaderCell' === cellStyle,\n                        isColumnHeader = 'columnHeaderCell' === cellStyle,\n                        selected = self.selections[rowOrderIndex] && self.selections[rowOrderIndex].indexOf(columnOrderIndex) !== -1,\n                        hovered = self.hovers[d[self.uniqueId]] && self.hovers[d[self.uniqueId]].indexOf(columnOrderIndex) !== -1,\n                        active = self.activeCell.rowIndex === rowOrderIndex && self.activeCell.columnIndex === columnOrderIndex,\n                        isGrid = typeof d[header.name] === 'object' && d[header.name] !== null && d[header.name] !== undefined,\n                        activeHeader = (self.orders.rows[self.activeCell.rowIndex] === rowOrderIndex\n                                || self.orders.columns[self.activeCell.columnIndex] === columnOrderIndex)\n                            && (columnOrderIndex === -1 || rowOrderIndex === -1)\n                            ? (isRowHeader ? 'activeRowHeaderCell' : 'activeColumnHeaderCell') : false,\n                        val,\n                        f = self.formatters[header.type || 'string'],\n                        orderByArrowSize = 0,\n                        treeArrowSize = 0,\n                        cellWidth = self.sizes.columns[isRowHeader ? 'cornerCell' : header[self.uniqueId]] || header.width,\n                        ev = {\n                            value: d[header.name],\n                            row: d,\n                            header: header\n                        };\n                    if (cellStyle === 'headerCellCap') {\n                        cellWidth = w - x;\n                    }\n                    // if no data or schema are defined, a width is provided to the stub column\n                    if (cellWidth === undefined) {\n                        cellWidth = self.style.cellWidth;\n                    }\n                    cellWidth = cellWidth * self.scale;\n                    if (x + cellWidth + self.style.cellBorderWidth < 0) {\n                        x += cellWidth + self.style.cellBorderWidth;\n                    }\n                    if (active && cellStyle !== 'cornerCell') {\n                        cellStyle = 'activeCell';\n                    }\n                    if (self.visibleRows.indexOf(rowIndex) === -1 && !isHeader) {\n                        self.visibleRows.push(rowIndex);\n                    }\n                    val = self.dispatchEvent('formatcellvalue', ev);\n                    cx = x;\n                    cy = y;\n                    if (cellStyle === 'cornerCell') {\n                        cx = 0;\n                        cy = 0;\n                    } else if (isRowHeader) {\n                        cx = 0;\n                    } else if (isHeader) {\n                        cy = 0;\n                    }\n                    cell = {\n                        type: isGrid ? 'canvas-datagrid-cell' : header.type,\n                        style: cellStyle,\n                        nodeType: 'canvas-datagrid-cell',\n                        x: cx,\n                        y: cy,\n                        horizontalAlignment: self.style[cellStyle + 'HorizontalAlignment'],\n                        verticalAlignment: self.style[cellStyle + 'VerticalAlignment'],\n                        offsetTop: self.canvasOffsetTop + cy,\n                        offsetLeft: self.canvasOffsetLeft + cx,\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        active: active || activeHeader,\n                        hovered: hovered,\n                        selected: selected,\n                        width: cellWidth,\n                        height: cellHeight,\n                        offsetWidth: cellWidth,\n                        offsetHeight: cellHeight,\n                        parentNode: self.intf.parentNode,\n                        offsetParent: self.intf.parentNode,\n                        data: d,\n                        isCorner: isCorner,\n                        isHeader: isHeader,\n                        isColumnHeader: isColumnHeader,\n                        isHeaderCellCap: !!header.isHeaderCellCap,\n                        isRowHeader: isRowHeader,\n                        rowOpen: rowOpen,\n                        header: header,\n                        columnIndex: columnOrderIndex,\n                        rowIndex: rowOrderIndex,\n                        sortColumnIndex: headerIndex,\n                        sortRowIndex: rowIndex,\n                        isGrid: isGrid,\n                        isNormal: !isGrid && !isCorner && !isHeader,\n                        gridId: (self.attributes.name || '') + d[self.uniqueId] + ':' + header[self.uniqueId],\n                        parentGrid: self.intf,\n                        innerHTML: '',\n                        activeHeader: activeHeader,\n                        value: isHeader && !isRowHeader ? (header.title || header.name) : d[header.name]\n                    };\n                    ev.cell = cell;\n                    cell.userHeight = cell.isHeader ? self.sizes.rows[-1] : rowHeight;\n                    cell.userWidth = cell.isHeader ? self.sizes.columns.cornerCell : self.sizes.columns[header[self.uniqueId]];\n                    cell[self.uniqueId] = d[self.uniqueId];\n                    self.visibleCells.unshift(cell);\n                    if (self.dispatchEvent('beforerendercell', ev)) { return; }\n                    self.ctx.fillStyle = self.style[cellStyle + 'BackgroundColor'];\n                    self.ctx.strokeStyle = self.style[cellStyle + 'BorderColor'];\n                    self.ctx.lineWidth = self.style[cellStyle + 'BorderWidth'];\n                    if (hovered) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'HoverBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'HoverBorderColor'];\n                    }\n                    if (selected) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'SelectedBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'SelectedBorderColor'];\n                    }\n                    if (activeHeader) {\n                        self.ctx.fillStyle = self.style[activeHeader + 'BackgroundColor'];\n                    }\n                    self.dispatchEvent('rendercell', ev);\n                    if (cell.isGrid) {\n                        if (cell.height !== rowHeight) {\n                            cell.height = rowHeight || self.style.cellHeightWithChildGrid;\n                            checkScrollHeight = true;\n                        }\n                        cell.width = self.sizes.columns[header[self.uniqueId]] || self.style.cellWidthWithChildGrid;\n                    }\n                    if (rowOpen && !cell.isRowHeader) {\n                        cell.height = self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight;\n                    }\n                    if (!cell.isGrid) {\n                        fillRect(cx, cy, cell.width, cell.height);\n                        strokeRect(cx, cy, cell.width, cell.height);\n                    }\n                    self.ctx.save();\n                    radiusRect(cell.x, cell.y, cell.width, cell.height, 0);\n                    self.ctx.clip();\n                    self.dispatchEvent('afterrendercell', ev);\n                    if (cell.height !== cellHeight && !(rowOpen && !cell.isRowHeader)) {\n                        self.sizes.rows[isHeader ? -1 : d[self.uniqueId]] = cell.height;\n                        checkScrollHeight = true;\n                    }\n                    if (cell.width !== cellWidth) {\n                        self.sizes.columns[header[self.uniqueId]] = cell.width;\n                        checkScrollHeight = true;\n                    }\n                    if (isRowHeader && self.attributes.tree) {\n                        if (!self.dispatchEvent('rendertreearrow', ev)) {\n                            treeArrowSize = drawTreeArrow(cell, self.style[cellStyle + 'PaddingLeft'], cy, 0);\n                        }\n                    }\n                    if ((self.attributes.showRowNumbers && isRowHeader)\n                            || !isRowHeader) {\n                        if (cell.isGrid && !self.dispatchEvent('beforerendercellgrid', ev)) {\n                            if (!self.childGrids[cell.gridId]) {\n                                cellGridAttributes = self.cellGridAttributes;\n                                cellGridAttributes.name = self.attributes.saveAppearance ? cell.gridId : undefined;\n                                cellGridAttributes.component = false;\n                                cellGridAttributes.parentNode = cell;\n                                cellGridAttributes.data = d[header.name];\n                                ev.cellGridAttributes = cellGridAttributes;\n                                if (self.dispatchEvent('beforecreatecellgrid', ev)) { return; }\n                                self.childGrids[cell.gridId] = self.createGrid(cellGridAttributes);\n                                self.childGrids[cell.gridId].style = cellGridAttributes.style;\n                                self.sizes.rows[rd[self.uniqueId]]\n                                    = self.sizes.rows[rd[self.uniqueId]] || self.style.cellGridHeight;\n                                checkScrollHeight = true;\n                            }\n                            cell.grid = self.childGrids[cell.gridId];\n                            cell.grid.parentNode = cell;\n                            cell.grid.visible = true;\n                            cell.grid.draw();\n                            self.dispatchEvent('rendercellgrid', ev);\n                        } else if (!cell.isGrid) {\n                            if (self.childGrids[cell.gridId]) {\n                                self.childGrids[cell.gridId].parentNode.offsetHeight = 0;\n                            }\n                            if (isHeader && self.orderBy === header.name) {\n                                if (!self.dispatchEvent('renderorderbyarrow', ev)) {\n                                    orderByArrowSize = drawOrderByArrow(cx + self.style[cellStyle + 'PaddingLeft'], 0);\n                                }\n                            }\n                            self.ctx.fillStyle = self.style[cellStyle + 'Color'];\n                            if (hovered) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'HoverColor'];\n                            }\n                            if (selected) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'SelectedColor'];\n                            }\n                            if (activeHeader) {\n                                self.ctx.fillStyle = self.style[activeHeader + 'Color'];\n                            }\n                            self.ctx.font = (self.style[cellStyle + 'FontHeight'] * self.scale) + 'px ' + self.style[cellStyle + 'FontName'];\n                            cell.fontHeight = (self.style[cellStyle + 'FontHeight'] * self.scale);\n                            cell.treeArrowWidth = treeArrowSize;\n                            cell.orderByArrowWidth = orderByArrowSize;\n                            val = val !== undefined ? val : f\n                                ? f(ev) : '';\n                            if (val === undefined && !f) {\n                                val = '';\n                                console.warn('canvas-datagrid: Unknown format '\n                                    + header.type + ' add a cellFormater');\n                            }\n                            cell.formattedValue = ((val !== undefined && val !== null) ? val : '').toString();\n                            if (self.columnFilters && self.columnFilters[val] !== undefined && isHeader) {\n                                cell.formattedValue = self.attributes.filterTextPrefix + val;\n                            }\n                            if (!self.dispatchEvent('rendertext', ev)) {\n                                if (cell.innerHTML || header.type === 'html') {\n                                    drawHtml(cell);\n                                } else {\n                                    drawText(cell);\n                                }\n                            }\n                        }\n                    }\n                    if (active) {\n                        aCell = cell;\n                    }\n                    createBorderOverlayArray(cell, selectionBorders, 'selection');\n                    // createBorderOverlayArray calculates data for createHandlesOverlayArray so it must go 2nd\n                    createHandlesOverlayArray(cell);\n                    if (self.movingSelection) {\n                        createBorderOverlayArray(cell, moveBorders, 'move', self.moveOffset);\n                    }\n                    self.ctx.restore();\n                    x += cell.width + (bc ? 0 : self.style.cellBorderWidth);\n                    return cell.width;\n                };\n            }\n            function drawRowHeader(rowData, index, rowOrderIndex) {\n                var a;\n                if (self.attributes.showRowHeaders) {\n                    x = 0;\n                    rowHeaderCell = {'rowHeaderCell': index + 1 };\n                    rowHeaderCell[self.uniqueId] = rowData[self.uniqueId];\n                    a = {\n                        name: 'rowHeaderCell',\n                        width: self.style.rowHeaderCellWidth,\n                        style: 'rowHeaderCell',\n                        type: 'string',\n                        data: rowData[self.uniqueId],\n                        index: -1\n                    };\n                    a[self.uniqueId] = rowData[self.uniqueId];\n                    rowOpen = self.openChildren[rowData[self.uniqueId]];\n                    drawCell(rowHeaderCell, index, rowOrderIndex)(a, -1, -1);\n                }\n            }\n            function drawHeaders() {\n                var d, g = s.length, i, o, columnHeaderCell, header, nonFrozenHeaderWidth;\n                function drawHeaderColumnRange(start, end) {\n                    end = Math.min(end, g);\n                    for (o = start; o < end; o += 1) {\n                        i = self.orders.columns[o];\n                        header = s[i];\n                        d = {\n                            title: header.title,\n                            name: header.name,\n                            width: header.width || self.style.cellWidth,\n                            style: 'columnHeaderCell',\n                            type: 'string',\n                            index: o,\n                            order: i\n                        };\n                        columnHeaderCell = {'columnHeaderCell': header.title || header.name};\n                        columnHeaderCell[self.uniqueId] = 'h' + header[self.uniqueId];\n                        d[self.uniqueId] = header[self.uniqueId];\n                        x += drawCell(columnHeaderCell, -1, -1)(d, o, i);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                }\n                rowHeaders.forEach(function (rArgs, rhIndex) {\n                    y = rArgs[3];\n                    cellHeight = rArgs[4];\n                    if (rhIndex === self.frozenRow) {\n                        self.ctx.save();\n                        radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                        self.ctx.clip();\n                    }\n                    drawRowHeader(rArgs[0], rArgs[1], rArgs[2]);\n                });\n                self.ctx.restore();\n                if (self.attributes.showColumnHeaders) {\n                    x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    if (self.attributes.allowFreezingColumns) {\n                        x += frozenColumnWidths;\n                    }\n                    y = 0;\n                    // cell height might have changed during drawing\n                    cellHeight = self.getColumnHeaderCellHeight();\n                    drawHeaderColumnRange(self.scrollIndexLeft + self.frozenColumn, g);\n                    nonFrozenHeaderWidth = x;\n                    x = self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    drawHeaderColumnRange(0, self.frozenColumn);\n                    // fill in the space right of the headers\n                    x = nonFrozenHeaderWidth;\n                    if (x < w) {\n                        c = {\n                            name: '',\n                            width: self.style.scrollBarWidth,\n                            style: 'headerCellCap',\n                            isHeaderCell: true,\n                            isHeaderCellCap: true,\n                            type: 'string',\n                            index: s.length\n                        };\n                        c[self.uniqueId] = 'columnHeaderCell';\n                        drawCell({endCap: ''}, -1, -1)(c, -1, -1);\n                    }\n                    // fill in the space right of the headers\n                    if (self.attributes.showRowHeaders) {\n                        cornerCell = {'cornerCell': '' };\n                        cornerCell[self.uniqueId] = 'cornerCell';\n                        x = 0;\n                        c = {\n                            name: 'cornerCell',\n                            width: self.style.rowHeaderCellWidth,\n                            style: 'cornerCell',\n                            type: 'string',\n                            index: -1\n                        };\n                        c[self.uniqueId] = 'cornerCell';\n                        drawCell(cornerCell, -1, -1)(c, -1, -1);\n                    }\n                }\n            }\n            function drawRow(r, d) {\n                var i, treeHeight, rowSansTreeHeight, o, g = s.length;\n                if (y - (cellHeight * 2) > h) {\n                    return false;\n                }\n                rd = data[r];\n                rowOpen = self.openChildren[rd[self.uniqueId]];\n                rowSansTreeHeight = (self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight) * self.scale;\n                treeHeight = (rowOpen ? self.sizes.trees[rd[self.uniqueId]] : 0) * self.scale;\n                rowHeight = (rowSansTreeHeight + treeHeight);\n                if (y < -rowHeight) {\n                    return false;\n                }\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                cellHeight = rowHeight;\n                if (self.attributes.allowFreezingColumns) {\n                    x += frozenColumnWidths;\n                }\n                //draw normal columns\n                for (o = (self.scrollIndexLeft + self.frozenColumn); o < g; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        self.scrollIndexRight = o;\n                        self.scrollPixelRight = x;\n                        break;\n                    }\n                }\n                //draw frozen columns\n                x = 0;\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                for (o = 0; o < self.frozenColumn; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        break;\n                    }\n                }\n                self.lastFrozenColumnPixel = x;\n                // cell height might have changed during drawing\n                cellHeight = rowHeight;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                // don't draw a tree for the new row\n                treeGrid = self.childGrids[rd[self.uniqueId]];\n                if (r !== data.length && rowOpen) {\n                    treeGrid.visible = true;\n                    treeGrid.parentNode = {\n                        offsetTop: y + rowSansTreeHeight + self.canvasOffsetTop,\n                        offsetLeft: rowHeaderCellWidth - 1 + self.canvasOffsetLeft,\n                        offsetHeight: treeHeight,\n                        offsetWidth: self.width - rowHeaderCellWidth - self.style.scrollBarWidth - 1,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: self.style,\n                        nodeType: 'canvas-datagrid-tree',\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        rowIndex: r\n                    };\n                    self.visibleCells.unshift({\n                        rowIndex: r,\n                        columnIndex: 0,\n                        y: treeGrid.parentNode.offsetTop,\n                        x: treeGrid.parentNode.offsetLeft,\n                        height: treeGrid.height,\n                        width: treeGrid.width,\n                        style: 'tree-grid',\n                        type: treeGrid.parentNode.nodeType\n                    });\n                    treeGrid.draw();\n                } else if (treeGrid) {\n                    treeGrid.parentNode.offsetHeight = 0;\n                    delete self.sizes.trees[rd[self.uniqueId]];\n                }\n                rowHeaders.push([rd, r, d, y, rowHeight]);\n                self.visibleRowHeights[r] = rowHeight;\n                y += cellHeight + (bc ? 0 : self.style.cellBorderWidth);\n                return true;\n            }\n            function initDraw() {\n                self.visibleRows = [];\n                s = self.getVisibleSchema();\n                self.visibleCells = [];\n                self.canvasOffsetTop = self.isChildGrid ? self.parentNode.offsetTop : 0;\n                self.canvasOffsetLeft = self.isChildGrid ? self.parentNode.offsetLeft : 0;\n                h = self.height;\n                w = self.width;\n            }\n            function drawBackground() {\n                radiusRect(0, 0, w, h, 0);\n                self.ctx.clip();\n                self.ctx.fillStyle = self.style.gridBackgroundColor;\n                fillRect(0, 0, w, h);\n            }\n            function drawFrozenRows() {\n                var n, ln = Math.min(data.length, self.frozenRow);\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                y = columnHeaderCellHeight;\n                for (r = 0; r < ln; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.allowFreezingRows) {\n                    // HACK great, another stupid magic number.\n                    // Background will appear as a 0.5px artifact behind the row freeze bar without this hack\n                    y += self.style.frozenMarkerBorderWidth + self.style.frozenMarkerWidth - 0.4999999999;\n                }\n                self.lastFrozenRowPixel = y;\n            }\n            function drawRows() {\n                self.ctx.save();\n                if (self.frozenRow > 0) {\n                    radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                    self.ctx.clip();\n                }\n                var o, n, i, g = s.length;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                if (!self.attributes.snapToRow) {\n                    y += -self.scrollBox.scrollTop + self.scrollPixelTop + self.style.cellBorderWidth;\n                }\n                for (r = self.frozenRow + self.scrollIndexTop; r < l; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        self.scrollIndexBottom = r;\n                        self.scrollPixelBottom = y;\n                        break;\n                    }\n                }\n                if (self.attributes.showNewRow) {\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    rowHeight = cellHeight = self.style.cellHeight;\n                    rowOpen = false;\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        x += drawCell(self.newRow, data.length, data.length)(s[i], i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    rowHeaders.push([self.newRow, data.length, data.length, y, rowHeight]);\n                }\n                self.ctx.restore();\n            }\n            function drawMoveMarkers() {\n                if (!self.movingSelection) { return; }\n                self.ctx.lineWidth = self.style.moveOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.moveOverlayBorderColor;\n                self.ctx.setLineDash(self.style.moveOverlayBorderSegments);\n                moveBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n                self.ctx.setLineDash([]);\n            }\n            function drawReorderMarkers() {\n                if (!self.reorderObject) { return; }\n                var b = {\n                        height: self.reorderObject.height,\n                        width: self.reorderObject.width,\n                        x: self.reorderObject.x + self.reorderObject.dragOffset.x,\n                        y: self.reorderObject.y + self.reorderObject.dragOffset.y\n                    },\n                    m = {\n                        width: w,\n                        height: h,\n                        x: 0,\n                        y: 0\n                    };\n                self.ctx.fillStyle = self.style.reorderMarkerBackgroundColor;\n                self.ctx.lineWidth = self.style.reorderMarkerBorderWidth;\n                self.ctx.strokeStyle = self.style.reorderMarkerBorderColor;\n                if (self.dragMode === 'row-reorder') {\n                    b.width = w;\n                    b.x = 0;\n                    m.width = w;\n                    m.height = self.currentCell.height;\n                    m.y = self.currentCell.y;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.rowIndex !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex > -1\n                            && self.currentCell.rowIndex < l) {\n                        addBorderLine(m, self.reorderTarget.sortRowIndex > self.reorderObject.sortRowIndex ? 'b' : 't');\n                    }\n                } else if (self.dragMode === 'column-reorder' && self.reorderObject) {\n                    b.height = h;\n                    b.y = 0;\n                    m.height = h;\n                    m.width = self.currentCell.width;\n                    m.y = 0;\n                    m.x = self.currentCell.x;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.columnIndex !== self.reorderObject.columnIndex\n                            && self.currentCell.columnIndex > -1\n                            && self.currentCell.columnIndex < s.length) {\n                        addBorderLine(m, self.reorderTarget.sortColumnIndex > self.reorderObject.sortColumnIndex ? 'r' : 'l');\n                    }\n                }\n            }\n            function drawBorder() {\n                self.ctx.lineWidth = self.style.gridBorderWidth;\n                self.ctx.strokeStyle = self.style.gridBorderColor;\n                strokeRect(0, 0, self.width, self.height);\n            }\n            function drawSelectionBorders() {\n                self.ctx.lineWidth = self.style.selectionOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.selectionOverlayBorderColor;\n                function dsb(c) {\n                    addBorderLine(c[0], c[1]);\n                }\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.save();\n                clipFrozenArea(0);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(1);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(2);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n            }\n            function drawSelectionHandles() {\n                if (self.mobile || self.attributes.allowMovingSelection) {\n                    self.ctx.lineWidth = self.style.selectionHandleBorderWidth;\n                    self.ctx.strokeStyle = self.style.selectionHandleBorderColor;\n                    self.ctx.fillStyle = self.style.selectionHandleColor;\n                    selectionHandles.forEach(function (c) {\n                        addselectionHandle(c[0], c[1]);\n                        var az = self.attributes.touchSelectHandleZone / 2,\n                            ax = c[0].x + (c[1] === 'tl' || c[1] === 'bl' ? 0 : c[0].width) - az,\n                            ay = c[0].y + (c[1] === 'bl' || c[1] === 'br' ? c[0].height : 0) - az;\n                        self.visibleCells.unshift({\n                            x: ax,\n                            y: ay,\n                            height: self.style.selectionHandleSize + az,\n                            width: self.style.selectionHandleSize + az,\n                            style: 'selection-handle-' + c[1]\n                        });\n                    });\n                }\n            }\n            function drawActiveCell() {\n                if (!aCell) { return; }\n                self.ctx.save();\n                var cl = self.activeCell.columnIndex + 1 > self.frozenColumn || self.activeCell.rowIndex + 1 > self.frozenRow,\n                    acx = cl ? self.lastFrozenColumnPixel : 0,\n                    acy = cl ? self.lastFrozenRowPixel : 0,\n                    acw = cl ? self.width - self.lastFrozenColumnPixel : self.width,\n                    ach = cl ? self.height - self.lastFrozenRowPixel : self.height;\n                radiusRect(acx, acy, acw, ach, 0);\n                self.ctx.clip();\n                if (self.attributes.selectionMode === 'row') {\n                    if (self.activeCell && self.activeCell.rowIndex === aCell.rowIndex) {\n                        self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                        self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                        strokeRect(0, aCell.y, self.getHeaderWidth() + rowHeaderCellWidth, self.visibleRowHeights[aCell.rowIndex]);\n                    }\n                } else {\n                    self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                    self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                    strokeRect(aCell.x, aCell.y, aCell.width, aCell.height);\n                }\n                self.ctx.restore();\n            }\n            function drawFrozenMarkers() {\n                var my = self.lastFrozenRowPixel - self.style.frozenMarkerWidth,\n                    mx = self.lastFrozenColumnPixel - self.style.frozenMarkerBorderWidth,\n                    xHover = self.currentCell && self.currentCell.style === 'frozen-row-marker',\n                    yHover = self.currentCell && self.currentCell.style === 'frozen-column-marker';\n                self.ctx.lineWidth = self.style.frozenMarkerBorderWidth;\n                if (self.attributes.allowFreezingColumns) {\n                    self.ctx.fillStyle = yHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = yHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    strokeRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    self.visibleCells.unshift({\n                        x: mx,\n                        y: 0,\n                        height: self.height,\n                        width: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        style: 'frozen-column-marker'\n                    });\n                }\n                if (self.attributes.allowFreezingRows) {\n                    self.ctx.fillStyle = xHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = xHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    strokeRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    self.visibleCells.unshift({\n                        x: 0,\n                        y: my,\n                        height: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        width: self.width,\n                        style: 'frozen-row-marker'\n                    });\n                }\n                if (self.freezeMarkerPosition) {\n                    self.ctx.fillStyle = self.style.frozenMarkerActiveColor;\n                    self.ctx.strokeStyle = self.style.frozenMarkerActiveBorderColor;\n                    if (self.dragMode === 'frozen-column-marker') {\n                        fillRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                        strokeRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                    } else {\n                        fillRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                        strokeRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                    }\n                }\n            }\n            function drawPerfLines() {\n                if (!self.attributes.showPerformance) { return; }\n                var pw = 250,\n                    px = self.width - pw - self.style.scrollBarWidth - (self.style.scrollBarBorderWidth * 2),\n                    py = columnHeaderCellHeight,\n                    ph = 100;\n                if (scrollDebugCounters.length === 0) { scrollDebugCounters = self.fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (touchPPSCounters.length === 0) { touchPPSCounters = self.fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (entityCount.length === 0) { entityCount = self.fillArray(0, perfWindowSize, 1, 0); }\n                self.ctx.lineWidth = 0.5;\n                function dpl(name, perfArr, arrIndex, max, color, useAbs, rowIndex) {\n                    var v;\n                    drawPerfLine(pw, ph, px, py, perfArr, arrIndex, max, color, useAbs);\n                    self.ctx.fillStyle = color;\n                    fillRect(3 + px, py + 9 + (rowIndex * 11), 8, 8);\n                    self.ctx.fillStyle = '#999999';\n                    v = arrIndex !== undefined ? perfArr[0][arrIndex] : perfArr[0];\n                    fillText(name + ' ' + (isNaN(v) ? 0 : v).toFixed(3), 14 + px, py + 16 + (rowIndex * 11));\n                }\n                self.ctx.textAlign = 'left';\n                self.ctx.font = '8px sans-serif';\n                self.ctx.fillStyle = 'rgba(29, 25, 26, 1.00)';\n                fillRect(px, py, pw, ph);\n                [['Scroll Height', scrollDebugCounters, 0, self.scrollBox.scrollHeight, 'rgba(248, 33, 103, 1.00)', false],\n                    ['Scroll Width', scrollDebugCounters, 1, self.scrollBox.scrollWidth, 'rgba(66, 255, 27, 1.00)', false],\n                    ['Performance', perfCounters, undefined, 200, 'rgba(252, 255, 37, 1.00)', false],\n                    ['Entities', entityCount, undefined, 1500, 'rgba(76, 231, 239, 1.00)', false],\n                    ['TouchPPSX', touchPPSCounters, 0, 1000, 'rgba(246, 102, 24, 1.00)', true],\n                    ['TouchPPSY', touchPPSCounters, 1, 1000, 'purple', true]\n                    ].forEach(function (i, index) {\n                    i.push(index);\n                    dpl.apply(null, i);\n                });\n                self.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n                entityCount.pop();\n                entityCount.unshift(self.visibleCells.length);\n                scrollDebugCounters.pop();\n                scrollDebugCounters.unshift([self.scrollBox.scrollTop, self.scrollBox.scrollLeft]);\n                touchPPSCounters.pop();\n                touchPPSCounters.unshift([self.yPPS, self.xPPS]);\n            }\n            function drawDebug() {\n                self.ctx.save();\n                var d;\n                if (self.attributes.showPerformance || self.attributes.debug) {\n                    if (perfCounters.length === 0) { perfCounters = self.fillArray(0, perfWindowSize, 1, 0); }\n                    perfCounters.pop();\n                    perfCounters.unshift(performance.now() - p);\n                }\n                if (!self.attributes.debug) {\n                    self.ctx.restore();\n                    return;\n                }\n                self.ctx.font = '14px sans-serif';\n                d = {};\n                d.perf = (perfCounters.reduce(function (a, b) {\n                    return a + b;\n                }, 0) / Math.min(drawCount, perfCounters.length)).toFixed(1);\n                d.htmlImages = Object.keys(self.htmlImageCache).length;\n                d.reorderObject = 'x: ' + (self.reorderObject || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderObject || {rowIndex: 0}).rowIndex;\n                d.reorderTarget = 'x: ' + (self.reorderTarget || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderTarget || {rowIndex: 0}).rowIndex;\n                d.scale = self.scale;\n                d.startScale = self.startScale;\n                d.scaleDelta = self.scaleDelta;\n                d.zoomDeltaStart = self.zoomDeltaStart;\n                d.touchLength = self.touchLength;\n                d.touches = 'y0: ' + (self.touchPosition || {y: 0}).y + ' y1: ' + (self.touchPosition1 || {y: 0}).y;\n                d.scrollBox = self.scrollBox.toString();\n                d.scrollIndex = 'x: ' + self.scrollIndexLeft + ', y: ' + self.scrollIndexTop;\n                d.scrollPixel = 'x: ' + self.scrollPixelLeft + ', y: ' + self.scrollPixelTop;\n                d.canvasOffset = 'x: ' + self.canvasOffsetLeft + ', y: ' + self.canvasOffsetTop;\n                d.touchDelta = 'x: ' + self.touchDelta.x + ', y: ' + self.touchDelta.y;\n                d.touchAnimateTo = 'x: ' + self.touchAnimateTo.x + ', y: ' + self.touchAnimateTo.y;\n                d.scrollAnimation = 'x: ' + self.scrollAnimation.x + ', y: ' + self.scrollAnimation.y;\n                d.touchPPS = 'x: ' + self.xPPS + ', y: ' + self.yPPS;\n                d.touchPPST = 'x: ' + self.xPPST + ', y: ' + self.yPPST;\n                d.touchDuration = self.touchDuration;\n                d.pointerLockPosition =  self.pointerLockPosition ?\n                        self.pointerLockPosition.x + ', ' + self.pointerLockPosition.y : '';\n                d.size = 'w: ' + self.width + ', h: ' + self.height;\n                d.mouse = 'x: ' + self.mouse.x + ', y: ' + self.mouse.y;\n                d.touch = !self.touchStart\n                    ? '' : 'x: ' + self.touchStart.x + ', y: ' + self.touchStart.y;\n                d.entities = self.visibleCells.length;\n                d.hasFocus = self.hasFocus;\n                d.dragMode = self.dragMode;\n                if (self.currentCell) {\n                    d.columnIndex = self.currentCell.columnIndex;\n                    d.rowIndex = self.currentCell.rowIndex;\n                    d.sortColumnIndex = self.currentCell.sortColumnIndex;\n                    d.sortRowIndex = self.currentCell.sortRowIndex;\n                    d.context = self.currentCell.context;\n                    d.dragContext = self.currentCell.dragContext;\n                    d.style = self.currentCell.style;\n                    d.type = self.currentCell.type;\n                }\n                self.ctx.textAlign = 'right';\n                self.ctx.fillStyle = 'rgba(0, 0, 0, .60)';\n                fillRect(0, 0, self.width, self.height);\n                Object.keys(d).forEach(function (key, index) {\n                    var m = key + ': ' + d[key],\n                        lh = 14;\n                    self.ctx.fillStyle = 'rgba(37, 254, 21, 1)';\n                    fillText(m, w - 20, (self.attributes.showPerformance ? 140 : 24) + (index * lh));\n                });\n                self.ctx.restore();\n            }\n            self.ctx.save();\n            initDraw();\n            drawBackground();\n            drawFrozenRows();\n            drawRows();\n            drawActiveCell();\n            drawHeaders();\n            drawFrozenMarkers();\n            drawSelectionBorders();\n            drawSelectionHandles();\n            drawReorderMarkers();\n            drawMoveMarkers();\n            drawScrollBars();\n            if (checkScrollHeight) {\n                self.resize(true);\n            }\n            drawBorder();\n            drawDebug();\n            drawPerfLines();\n            if (self.dispatchEvent('afterdraw', {})) { return; }\n            self.ctx.restore();\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/draw.js\n// module id = 3\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var wheeling;\n        self.stopPropagation = function (e) { e.stopPropagation(); };\n        /**\n         * Adds an event listener to the given event.\n         * @memberof canvasDatagrid\n         * @name addEventListener\n         * @method\n         * @param {string} ev The name of the event to subscribe to.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.addEventListener = function (ev, fn) {\n            self.events[ev] = self.events[ev] || [];\n            self.events[ev].unshift(fn);\n        };\n        /**\n         * Removes the given listener function from the given event.  Must be an actual reference to the function that was bound.\n         * @memberof canvasDatagrid\n         * @name removeEventListener\n         * @method\n         * @param {string} ev The name of the event to unsubscribe from.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.removeEventListener = function (ev, fn) {\n            (self.events[ev] || []).forEach(function removeEachListener(sfn, idx) {\n                if (fn === sfn) {\n                    self.events[ev].splice(idx, 1);\n                }\n            });\n        };\n        /**\n         * Fires the given event, padding an event object to the event subscribers.\n         * @memberof canvasDatagrid\n         * @name dispatchEvent\n         * @method\n         * @param {number} ev The name of the event to dispatch.\n         * @param {number} e The event object.\n         */\n        self.dispatchEvent = function (ev, e) {\n            e = ev.type ? ev : (e || {});\n            ev = ev.type || ev;\n            var defaultPrevented;\n            function preventDefault() {\n                defaultPrevented = true;\n            }\n            if (!self.events[ev]) { return; }\n            self.events[ev].forEach(function dispatchEachEvent(fn) {\n                e.ctx = self.ctx;\n                e.preventDefault = preventDefault;\n                fn.apply(self.intf, [e]);\n            });\n            return defaultPrevented;\n        };\n        self.getRatio = function () {\n            return Math.min(self.attributes.maxPixelRatio, (window.devicePixelRatio || 1) /\n                (self.ctx.webkitBackingStorePixelRatio ||\n                    self.ctx.mozBackingStorePixelRatio ||\n                    self.ctx.msBackingStorePixelRatio ||\n                    self.ctx.oBackingStorePixelRatio ||\n                    self.ctx.backingStorePixelRatio || 1));\n        };\n        self.resize = function (drawAfterResize) {\n            if (!self.canvas) { return; }\n            var v = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'vertical-scroll-bar'\n                },\n                n = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'horizontal-scroll-bar'\n                },\n                vb = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'vertical-scroll-box'\n                },\n                nb = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'horizontal-scroll-box'\n                },\n                co = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    isCorner: true,\n                    isScrollBoxCorner: true,\n                    style: 'scroll-box-corner'\n                },\n                m = (self.style.scrollBarBoxMargin * 2),\n                b = (self.style.scrollBarBorderWidth * 2),\n                d = self.style.scrollBarBoxMargin * 0.5,\n                sbw = self.style.scrollBarWidth + (self.style.scrollBarBorderWidth * 2),\n                ratio = self.getRatio(),\n                bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                cellBorder = self.style.cellBorderWidth * bm,\n                columnHeaderCellBorder = self.style.columnHeaderCellBorderWidth * bm,\n                dataHeight,\n                dataWidth,\n                dims,\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                ch = self.style.cellHeight,\n                // TODO: These offset numbers are terribly wrong.\n                // They should be a result of the size of the grid/canvas?\n                // it being off causes the scroll bar to \"slide\" under\n                // the dragged mouse.\n                // https://github.com/TonyGermaneri/canvas-datagrid/issues/97\n                scrollDragPositionOffsetY = 55,\n                scrollDragPositionOffsetX = -100;\n            // sets actual DOM canvas element\n            function setCanvasSize() {\n                if (self.isChildGrid) {\n                    return;\n                }\n                dims = {\n                    // HACK +1 ? maybe it's a magic cell border?  Required to line up properly in auto height mode.\n                    height: dataHeight + cellBorder + 1,\n                    width: dataWidth + rowHeaderCellWidth + cellBorder\n                };\n                ['width', 'height'].forEach(function (dim) {\n                    //TODO: support inherit\n                    if (['auto', undefined].indexOf(self.style[dim]) !== -1) {\n                        self.parentNodeStyle[dim] = dims[dim] + 'px';\n                    } else {\n                        self.parentNodeStyle[dim] = self.style[dim];\n                    }\n                });\n            }\n            self.scrollCache.x = [];\n            self.scrollCache.y = [];\n            dataHeight = (self.data || []).reduce(function reduceData(accumulator, row, rowIndex) {\n                var va = accumulator\n                    + (((self.sizes.rows[row[self.uniqueId]] || ch) + (self.sizes.trees[row[self.uniqueId]] || 0)) * self.scale)\n                    // HACK? if an expanded tree row is frozen it is necessary to add the tree row's height a second time.\n                    + (self.frozenRow > rowIndex ? (self.sizes.trees[row[self.uniqueId]] || 0) : 0);\n                self.scrollCache.y[rowIndex] = va;\n                return va;\n            }, 0) || 0;\n            dataWidth = self.getVisibleSchema().reduce(function reduceSchema(accumulator, column, columnIndex) {\n                if (column.hidden) {\n                    self.scrollCache.x[columnIndex] = accumulator;\n                    return accumulator;\n                }\n                var va = accumulator + ((self.sizes.columns[column[self.uniqueId]] || column.width || self.style.cellWidth) * self.scale);\n                self.scrollCache.x[columnIndex] = va;\n                return va;\n            }, 0) || 0;\n            if (self.attributes.showNewRow) {\n                dataHeight += ch + cellBorder;\n            }\n            // accounts for the offset of the headers if any\n            dataHeight += columnHeaderCellHeight;\n            setCanvasSize();\n            if (self.isChildGrid) {\n                self.width = self.parentNode.offsetWidth;\n                self.height = self.parentNode.offsetHeight;\n            } else if (self.height !== self.canvas.offsetHeight || self.width !== self.canvas.offsetWidth) {\n                self.height = self.canvas.offsetHeight;\n                self.width = self.canvas.offsetWidth;\n                self.canvasOffsetLeft = self.args.canvasOffsetLeft || 0;\n                self.canvasOffsetTop = self.args.canvasOffsetTop || 0;\n            }\n            /// calculate scroll bar dimensions\n            // non-controversial\n            self.scrollBox.top = columnHeaderCellHeight + columnHeaderCellBorder;\n            self.scrollBox.left = rowHeaderCellWidth;\n            // width and height of scroll box\n            self.scrollBox.width = self.width - rowHeaderCellWidth - cellBorder;\n            self.scrollBox.height = self.height - columnHeaderCellBorder - cellBorder;\n            // is the data larger than the scroll box\n            self.scrollBox.horizontalBarVisible = dataWidth > self.scrollBox.width;\n            self.scrollBox.verticalBarVisible = dataHeight > self.scrollBox.height;\n            // if the scroll box is visible, make room for it by expanding the size of the element\n            // if the other dimension is set to auto\n            if (self.scrollBox.horizontalBarVisible && !self.isChildGrid) {\n                self.height += sbw;\n                dataHeight += sbw;\n                setCanvasSize();\n                self.scrollBox.horizontalBarVisible = dataWidth > self.scrollBox.width;\n            }\n            if (self.scrollBox.verticalBarVisible && !self.isChildGrid) {\n                self.width += sbw;\n                dataWidth += sbw;\n                setCanvasSize();\n                self.scrollBox.verticalBarVisible = dataHeight > self.scrollBox.height;\n            }\n            self.scrollBox.scrollWidth = dataWidth - self.scrollBox.width;\n            self.scrollBox.scrollHeight = dataHeight - self.scrollBox.height;\n            self.scrollBox.widthBoxRatio = ((self.scrollBox.width - scrollDragPositionOffsetX)\n                / (self.scrollBox.scrollWidth + (self.scrollBox.width - scrollDragPositionOffsetX)));\n            self.scrollBox.scrollBoxWidth = self.scrollBox.width\n                * self.scrollBox.widthBoxRatio\n                - self.style.scrollBarWidth - b - d;\n            self.scrollBox.heightBoxRatio = ((self.scrollBox.height - scrollDragPositionOffsetY)\n                / (self.scrollBox.scrollHeight + (self.scrollBox.height - scrollDragPositionOffsetY)));\n            self.scrollBox.scrollBoxHeight = self.scrollBox.height\n                * self.scrollBox.heightBoxRatio\n                - self.style.scrollBarWidth - b - d - (columnHeaderCellHeight - cellBorder);\n            self.scrollBox.scrollBoxWidth = Math.max(self.scrollBox.scrollBoxWidth, self.style.scrollBarBoxMinSize);\n            self.scrollBox.scrollBoxHeight = Math.max(self.scrollBox.scrollBoxHeight, self.style.scrollBarBoxMinSize);\n            // horizontal\n            n.x += rowHeaderCellWidth;\n            n.y += self.height - self.style.scrollBarWidth - d;\n            n.width = self.width - self.style.scrollBarWidth - rowHeaderCellWidth - d - m;\n            n.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n            // horizontal box\n            nb.y = n.y + self.style.scrollBarBoxMargin;\n            nb.width = self.scrollBox.scrollBoxWidth;\n            nb.height = self.style.scrollBarBoxWidth;\n            // vertical\n            v.x += self.width - self.style.scrollBarWidth - self.style.scrollBarBorderWidth - d;\n            v.y += columnHeaderCellHeight;\n            v.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n            v.height = self.height - columnHeaderCellHeight - self.style.scrollBarWidth - d - m;\n            // vertical box\n            vb.x = v.x + self.style.scrollBarBoxMargin;\n            vb.width = self.style.scrollBarBoxWidth;\n            vb.height = self.scrollBox.scrollBoxHeight;\n            // corner\n            co.x = n.x + n.width + m;\n            co.y = v.y + v.height + m;\n            co.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n            co.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n            self.scrollBox.entities = {\n                horizontalBar: n,\n                horizontalBox: nb,\n                verticalBar: v,\n                verticalBox: vb,\n                corner: co\n            };\n            self.scrollBox.bar = {\n                v: v,\n                h: n\n            };\n            self.scrollBox.box = {\n                v: vb,\n                h: nb\n            };\n            /// calculate page and dom elements\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            // set canvas drawing related items\n            if (!self.isChildGrid) {\n                self.canvas.width = self.width * ratio;\n                self.canvas.height = self.height * ratio;\n                self.ctx.scale(ratio, ratio);\n            }\n            // resize any open dom elements (input/textarea)\n            self.resizeEditInput();\n            self.scroll(true);\n            if (drawAfterResize) {\n                self.draw(true);\n            }\n            self.dispatchEvent('resize', {});\n            return true;\n        };\n        self.scroll = function (dontDraw) {\n            var s = self.getVisibleSchema(),\n                ch = self.style.cellHeight;\n            self.scrollIndexTop = 0;\n            self.scrollPixelTop = 0;\n            self.scrollIndexLeft = 0;\n            self.scrollPixelLeft = 0;\n            while (self.scrollPixelTop < self.scrollBox.scrollTop && self.scrollIndexTop < self.data.length) {\n                self.scrollPixelTop = self.scrollCache.y[self.scrollIndexTop];\n                self.scrollIndexTop += 1;\n            }\n            while (self.scrollPixelLeft < self.scrollBox.scrollLeft && self.scrollIndexLeft < s.length) {\n                self.scrollPixelLeft = self.scrollCache.x[self.scrollIndexLeft];\n                self.scrollIndexLeft += 1;\n            }\n            if ((self.data || []).length > 0 && s.length > 0) {\n                self.scrollIndexLeft = Math.max(self.scrollIndexLeft - 1, 0);\n                self.scrollPixelLeft = Math.max(self.scrollPixelLeft\n                    - ((self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width || self.style.cellWidth) * self.scale), 0);\n                self.scrollIndexTop = Math.max(self.scrollIndexTop - 1, 0);\n                self.scrollPixelTop = Math.max((self.scrollPixelTop\n                    - ((self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || ch)\n                    + (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0)) * self.scale), 0);\n            }\n            self.ellipsisCache = {};\n            if (!dontDraw) {\n                self.draw(true);\n            }\n            //TODO: figure out why this has to be delayed for child grids\n            //BUG: wheeling event on 3rd level hierarchy fails to move input box\n            requestAnimationFrame(self.resizeEditInput);\n            self.dispatchEvent('scroll', {top: self.scrollBox.scrollTop, left: self.scrollBox.scrollLeft});\n        };\n        self.mousemove = function (e, overridePos) {\n            if (self.contextMenu || self.input) {\n                return;\n            }\n            self.mouse = overridePos || self.getLayerPos(e);\n            var ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                i,\n                vs = self.getVisibleSchema(),\n                dragBounds,\n                sBounds,\n                x = self.mouse.x,\n                y = self.mouse.y,\n                o = self.getCellAt(x, y),\n                delta,\n                ev = {NativeEvent: e, cell: o, x: x, y: y},\n                previousCell = self.currentCell;\n            clearTimeout(self.scrollTimer);\n            if (!self.isInGrid({x: x, y: y})) {\n                self.hasFocus = false;\n            }\n            if (self.dispatchEvent('mousemove', ev)) {\n                return;\n            }\n            if (o && self.currentCell) {\n                self.rowBoundaryCrossed = self.currentCell.rowIndex !== o.rowIndex;\n                self.columnBoundaryCrossed = self.currentCell.columnIndex !== o.columnIndex;\n                self.cellBoundaryCrossed = self.rowBoundaryCrossed || self.columnBoundaryCrossed;\n                ['row', 'column', 'cell'].forEach(function (prefix) {\n                    if (self[prefix + 'BoundaryCrossed']) {\n                        ev.cell = previousCell;\n                        self.dispatchEvent(prefix + 'mouseout', ev);\n                        ev.cell = o;\n                        self.dispatchEvent(prefix + 'mouseover', ev);\n                    }\n                });\n            }\n            self.currentCell = o;\n            if (!self.hasFocus) {\n                return;\n            }\n            self.hovers = {};\n            if (!self.draggingItem\n                    && o\n                    && self.scrollModes.indexOf(o.context) === -1) {\n                self.dragItem = o;\n                self.dragMode = o.dragContext;\n                self.cursor = o.context;\n                if (o.context === 'cell' && o.data) {\n                    self.cursor = 'default';\n                    self.hovers[o.data[self.uniqueId]] = [o.columnIndex];\n                }\n                if ((self.selecting || self.reorderObject)\n                        && o.context === 'cell'\n                        && o.data) {\n                    sBounds = self.getSelectionBounds();\n                    delta = {\n                        x: Math.abs(self.dragStart.x - x),\n                        y: Math.abs(self.dragStart.y - y)\n                    };\n                    if (self.dragStartObject.columnIndex !== -1 && e.shiftKey) {\n                        self.dragStartObject = {\n                            rowIndex: self.activeCell.rowIndex,\n                            columnIndex: self.activeCell.columnIndex\n                        };\n                    }\n                    dragBounds = {\n                        top: Math.min(self.dragStartObject.rowIndex, o.rowIndex),\n                        left: Math.min(self.dragStartObject.columnIndex, o.columnIndex),\n                        bottom: Math.max(self.dragStartObject.rowIndex, o.rowIndex),\n                        right: Math.max(self.dragStartObject.columnIndex, o.columnIndex)\n                    };\n                    if (self.dragStartObject.columnIndex === -1) {\n                        dragBounds.left = -1;\n                        dragBounds.right = vs.length - 1;\n                        dragBounds.top = Math.min(sBounds.top, o.rowIndex);\n                        dragBounds.bottom = Math.max(sBounds.bottom, o.rowIndex);\n                    }\n                    if (self.dragStartObject.rowIndex !== o.rowIndex\n                                || self.dragStartObject.columnIndex !== o.columnIndex) {\n                        self.ignoreNextClick = true;\n                    }\n                    if (self.cellBoundaryCrossed || (delta.x === 0 && delta.y === 0) || (self.attributes.selectionMode === 'row')) {\n                        if (((self.attributes.selectionMode === 'row') || self.dragStartObject.columnIndex === -1)\n                                && self.rowBoundaryCrossed) {\n                            self.selectRow(o.rowIndex, ctrl, null, true);\n                        } else if (self.attributes.selectionMode !== 'row') {\n                            if (!self.dragAddToSelection && o.rowIndex !== undefined) {\n                                if (self.selections[o.rowIndex] && self.selections[o.rowIndex].indexOf(o.columnIndex) !== -1) {\n                                    self.selections[o.rowIndex].splice(self.selections[o.rowIndex].indexOf(o.columnIndex), 1);\n                                }\n                            } else {\n                                self.selections[o.rowIndex] = self.selections[o.rowIndex] || [];\n                                if (self.selections[o.rowIndex].indexOf(o.columnIndex) === -1) {\n                                    self.selections[o.rowIndex].push(o.columnIndex);\n                                }\n                            }\n                        }\n                    }\n                    if ((!self.selectionBounds || (dragBounds.top !== self.selectionBounds.top\n                            || dragBounds.left !== self.selectionBounds.left\n                            || dragBounds.bottom !== self.selectionBounds.bottom\n                            || dragBounds.right !== self.selectionBounds.right)) && !ctrl) {\n                        self.selections = [];\n                        sBounds = dragBounds;\n                        if (self.attributes.selectionMode === 'row') {\n                            for (i = sBounds.top; i <= sBounds.bottom; i += 1) {\n                                self.selectRow(i, true, null, true);\n                            }\n                        } else if (dragBounds.top !== -1) {\n                            self.selectArea(sBounds, true);\n                        }\n                    }\n                    self.autoScrollZone(e, x, y, ctrl);\n                }\n            }\n            self.cellBoundaryCrossed = false;\n            self.rowBoundaryCrossed = false;\n            self.columnBoundaryCrossed = false;\n            self.draw(true);\n        };\n        self.click = function (e, overridePos) {\n            var i,\n                ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                pos = overridePos || self.getLayerPos(e);\n            self.currentCell = self.getCellAt(pos.x, pos.y);\n            if (self.currentCell.grid !== undefined) {\n                return;\n            }\n            function checkSelectionChange() {\n                self.dispatchEvent('selectionchanged', {\n                    selectedData: self.getSelectedData(),\n                    selections: self.selections,\n                    selectionBounds: self.selectionBounds\n                });\n            }\n            if (self.input) {\n                self.endEdit();\n            }\n            if (self.ignoreNextClick) {\n                self.ignoreNextClick = false;\n                return;\n            }\n            i = self.currentCell;\n            if (self.dispatchEvent('click', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (['rowHeaderCell', 'columnHeaderCell'].indexOf(self.currentCell.style) === -1 && !ctrl) {\n                self.setActiveCell(i.columnIndex, i.rowIndex);\n            }\n            if (self.currentCell.context === 'cell') {\n                if (self.currentCell.style === 'cornerCell') {\n                    self.selectAll();\n                    self.draw();\n                    checkSelectionChange();\n                    return;\n                }\n                if (self.currentCell.style === 'columnHeaderCell') {\n                    if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                        if (self.orderBy === i.header.name) {\n                            self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                        } else {\n                            self.orderDirection = 'asc';\n                        }\n                        self.order(i.header.name, self.orderDirection);\n                        checkSelectionChange();\n                        return;\n                    }\n                    if (self.attributes.columnHeaderClickBehavior === 'select') {\n                        self.selectColumn(i.header.index, ctrl, e.shiftKey, true);\n                        checkSelectionChange();\n                        self.draw();\n                        return;\n                    }\n                }\n                self.selections[i.rowIndex] = self.selections[i.rowIndex] || [];\n                if (((self.attributes.selectionMode === 'row') || self.currentCell.style === 'rowHeaderCell')) {\n                    if (self.currentCell.style === 'rowHeaderCell'\n                            && self.attributes.tree && pos.x > 0\n                            && pos.x - self.currentCell.x < self.style.treeArrowWidth\n                            + self.style.treeArrowMarginLeft\n                            + self.style.treeArrowMarginRight + self.style.treeArrowClickRadius\n                            && pos.y - self.currentCell.y < self.style.treeArrowHeight\n                            + self.style.treeArrowMarginTop + self.style.treeArrowClickRadius\n                            && pos.y > 0) {\n                        self.toggleTree(i.rowIndex);\n                        return;\n                    }\n                }\n                if (e.shiftKey && !ctrl) {\n                    self.selectionBounds = self.getSelectionBounds();\n                    self.selectArea(undefined, false);\n                }\n            }\n            checkSelectionChange();\n            self.draw(true);\n        };\n        self.dragResizeColumn = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = self.resizingStartingWidth + pos.x - self.dragStart.x;\n            y = self.resizingStartingHeight + pos.y - self.dragStart.y;\n            if (x < self.style.minColumnWidth) {\n                x = self.style.minColumnWidth;\n            }\n            if (y < self.style.minRowHeight) {\n                y = self.style.minRowHeight;\n            }\n            if (self.dispatchEvent('resizecolumn', {x: x, y: y, draggingItem: self.draggingItem})) { return false; }\n            if (self.scrollBox.scrollLeft > self.scrollBox.scrollWidth - self.attributes.resizeScrollZone\n                    && self.dragMode === 'ew-resize') {\n                self.resize(true);\n                self.scrollBox.scrollLeft += x;\n            }\n            if (self.dragMode === 'ew-resize') {\n                self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] = x;\n                if (['rowHeaderCell', 'cornerCell'].indexOf(self.draggingItem.header.style) !== -1) {\n                    self.resize(true);\n                }\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.dragMode === 'ns-resize') {\n                if (self.draggingItem.rowOpen) {\n                    self.sizes.trees[self.draggingItem.data[self.uniqueId]] = y;\n                } else if (self.attributes.globalRowResize) {\n                    self.style.cellHeight = y;\n                } else {\n                    self.sizes.rows[self.draggingItem.data[self.uniqueId]] = y;\n                }\n                self.dispatchEvent('resizerow', {row: y});\n                self.resizeChildGrids();\n                return;\n            }\n            self.ellipsisCache = {};\n        };\n        self.stopDragResize = function () {\n            self.resize();\n            document.body.removeEventListener('mousemove', self.dragResizeColumn, false);\n            document.body.removeEventListener('mouseup', self.stopDragResize, false);\n            self.setStorageData();\n            self.draw(true);\n            self.ignoreNextClick = true;\n        };\n        self.scrollGrid = function (e) {\n            var pos = self.getLayerPos(e);\n            if (self.attributes.scrollPointerLock && self.pointerLockPosition\n                    && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                self.pointerLockPosition.x += e.movementX;\n                self.pointerLockPosition.y += e.movementY;\n                self.pointerLockPosition.x = Math.min(self.width - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.x));\n                self.pointerLockPosition.y = Math.min(self.height - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.y));\n                pos = self.pointerLockPosition;\n            }\n            self.scrollMode = self.getCellAt(pos.x, pos.y).context;\n            if (self.scrollMode === 'horizontal-scroll-box' && self.scrollStartMode !== 'horizontal-scroll-box') {\n                self.scrollStartMode = 'horizontal-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.left = self.scrollBox.scrollLeft;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box' && self.scrollStartMode !== 'vertical-scroll-box') {\n                self.scrollStartMode = 'vertical-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.top = self.scrollBox.scrollTop;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollStartMode === 'vertical-scroll-box'\n                    && self.scrollMode !== 'vertical-scroll-box') {\n                self.scrollMode = 'vertical-scroll-box';\n            }\n            if (self.scrollStartMode === 'horizontal-scroll-box'\n                    && self.scrollMode !== 'horizontal-scroll-box') {\n                self.scrollMode = 'horizontal-scroll-box';\n            }\n            clearTimeout(self.scrollTimer);\n            if (self.scrollModes.indexOf(self.scrollMode) === -1) {\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box') {\n                self.scrollBox.scrollTop = self.scrollStart.top + ((pos.y - self.dragStart.y)\n                    / self.scrollBox.heightBoxRatio);\n            } else if (self.scrollMode === 'vertical-scroll-top') {\n                self.scrollBox.scrollTop -= (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'vertical-scroll-bottom') {\n                self.scrollBox.scrollTop += (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n            if (self.scrollMode === 'horizontal-scroll-box') {\n                self.scrollBox.scrollLeft = self.scrollStart.left + ((pos.x - self.dragStart.x)\n                    / self.scrollBox.widthBoxRatio);\n            } else if (self.scrollMode === 'horizontal-scroll-right') {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'horizontal-scroll-left') {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.stopScrollGrid = function () {\n            clearTimeout(self.scrollTimer);\n            if (document.exitPointerLock) {\n                document.exitPointerLock();\n            }\n            document.body.removeEventListener('mousemove', self.scrollGrid, false);\n        };\n        self.dragReorder = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = pos.x - self.dragStart.x;\n            y = pos.y - self.dragStart.y;\n            if (!self.attributes.allowColumnReordering && self.dragMode === 'column-reorder') {\n                return;\n            }\n            if (!self.attributes.allowRowReordering && self.dragMode === 'row-reorder') {\n                return;\n            }\n            if (self.dispatchEvent('reordering', {\n                    NativeEvent: e,\n                    source: self.dragStartObject,\n                    target: self.currentCell,\n                    dragMode: self.dragMode\n                })) {\n                return;\n            }\n            if (Math.abs(x) > self.attributes.reorderDeadZone || Math.abs(y) > self.attributes.reorderDeadZone) {\n                self.reorderObject = self.draggingItem;\n                self.reorderTarget = self.currentCell;\n                self.reorderObject.dragOffset = {\n                    x: x,\n                    y: y\n                };\n                self.autoScrollZone(e, pos.x, pos.y, false);\n            }\n        };\n        self.stopDragReorder = function (e) {\n            var oIndex,\n                tIndex,\n                cr = {\n                    'row-reorder': self.orders.rows,\n                    'column-reorder': self.orders.columns\n                },\n                i = {\n                    'row-reorder': 'rowIndex',\n                    'column-reorder': 'columnIndex'\n                }[self.dragMode];\n            document.body.removeEventListener('mousemove', self.dragReorder, false);\n            document.body.removeEventListener('mouseup', self.stopDragReorder, false);\n            if (self.reorderObject\n                    && self.reorderTarget\n                    && ((self.dragMode === 'column-reorder' && self.reorderTarget.columnIndex > -1\n                        && self.reorderTarget.columnIndex < self.getVisibleSchema().length)\n                    || (self.dragMode === 'row-reorder' && self.reorderTarget.rowIndex > -1\n                        && self.reorderTarget.rowIndex < self.data.length))\n                    && self.reorderObject[i] !== self.reorderTarget[i]\n                    && !self.dispatchEvent('reorder', {\n                        NativeEvent: e,\n                        source: self.reorderObject,\n                        target: self.reorderTarget,\n                        dragMode: self.dragMode\n                    })) {\n                self.ignoreNextClick = true;\n                oIndex = cr[self.dragMode].indexOf(self.reorderObject[i]);\n                tIndex = cr[self.dragMode].indexOf(self.reorderTarget[i]);\n                cr[self.dragMode].splice(oIndex, 1);\n                cr[self.dragMode].splice(tIndex, 0, self.reorderObject[i]);\n                self.setStorageData();\n            }\n            self.reorderObject = undefined;\n            self.reorderTarget = undefined;\n            self.draw(true);\n        };\n        self.dragMove = function (e) {\n            if (self.dispatchEvent('moving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.moveOffset = {\n                x: self.currentCell.columnIndex - self.dragStartObject.columnIndex,\n                y: self.currentCell.rowIndex - self.dragStartObject.rowIndex\n            };\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopDragMove = function (e) {\n            document.body.removeEventListener('mousemove', self.dragMove, false);\n            document.body.removeEventListener('mouseup', self.stopDragMove, false);\n            var b = self.getSelectionBounds();\n            if (self.dispatchEvent('endmove', {NativeEvent: e, cell: self.currentCell})) {\n                self.movingSelection = undefined;\n                self.moveOffset = undefined;\n                self.draw(true);\n                return;\n            }\n            if (self.moveOffset) {\n                self.moveTo(self.movingSelection, b.left + self.moveOffset.x, b.top + self.moveOffset.y);\n                self.moveSelection(self.moveOffset.x, self.moveOffset.y);\n            }\n            self.movingSelection = undefined;\n            self.moveOffset = undefined;\n            self.draw(true);\n        };\n        self.freezeMove = function (e) {\n            if (self.dispatchEvent('freezemoving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.ignoreNextClick = true;\n            self.freezeMarkerPosition = pos;\n            if (self.currentCell && self.currentCell.rowIndex !== undefined && self.dragMode === 'frozen-row-marker') {\n                self.scrollBox.scrollTop = 0;\n                self.frozenRow = self.currentCell.rowIndex + 1;\n            }\n            if (self.currentCell && self.currentCell.columnIndex !== undefined && self.dragMode === 'frozen-column-marker') {\n                self.scrollBox.scrollLeft = 0;\n                self.frozenColumn = self.currentCell.columnIndex + 1;\n            }\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopFreezeMove = function (e) {\n            document.body.removeEventListener('mousemove', self.freezeMove, false);\n            document.body.removeEventListener('mouseup', self.stopFreezeMove, false);\n            self.freezeMarkerPosition = undefined;\n            if (self.dispatchEvent('endfreezemove', {NativeEvent: e})) {\n                self.frozenRow = self.startFreezeMove.x;\n                self.frozenColumn = self.startFreezeMove.y;\n                self.draw(true);\n                return;\n            }\n            self.draw(true);\n        };\n        self.mousedown = function (e, overridePos) {\n            self.lastMouseDownTarget = e.target;\n            if (self.dispatchEvent('mousedown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (e.button === 2 || self.input) { return; }\n            var ctrl = (e.ctrlKey || e.metaKey),\n                move = /-move/.test(self.dragMode),\n                freeze = /frozen-row-marker|frozen-column-marker/.test(self.dragMode),\n                resize = /-resize/.test(self.dragMode);\n            self.dragStart = overridePos || self.getLayerPos(e);\n            self.scrollStart = {\n                left: self.scrollBox.scrollLeft,\n                top: self.scrollBox.scrollTop\n            };\n            self.dragStartObject = self.getCellAt(self.dragStart.x, self.dragStart.y);\n            self.dragAddToSelection = !self.dragStartObject.selected;\n            if (!ctrl && !e.shiftKey && !/(vertical|horizontal)-scroll-(bar|box)/\n                    .test(self.dragStartObject.context)\n                    && self.currentCell\n                    && !self.currentCell.isColumnHeader\n                    && !move\n                    && !freeze\n                    && !resize) {\n                self.selections = [];\n            }\n            if (self.dragStartObject.isGrid) {\n                return;\n            }\n            if (self.scrollModes.indexOf(self.dragStartObject.context) !== -1) {\n                self.scrollMode = self.dragStartObject.context;\n                self.scrollStartMode = self.dragStartObject.context;\n                self.scrollGrid(e);\n                if (self.attributes.scrollPointerLock\n                        && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                    self.pointerLockPosition = {\n                        x: self.dragStart.x,\n                        y: self.dragStart.y\n                    };\n                    self.canvas.requestPointerLock();\n                }\n                document.body.addEventListener('mousemove', self.scrollGrid, false);\n                document.body.addEventListener('mouseup', self.stopScrollGrid, false);\n                self.ignoreNextClick = true;\n                return;\n            }\n            if (self.dragMode === 'cell') {\n                self.selecting = true;\n                if ((self.attributes.selectionMode === 'row' || self.dragStartObject.columnIndex === -1)\n                        && self.dragStartObject.rowIndex > -1) {\n                    self.selectRow(self.dragStartObject.rowIndex, ctrl, null, true);\n                } else if (self.attributes.selectionMode !== 'row') {\n                    self.mousemove(e);\n                }\n                return;\n            }\n            if (move) {\n                self.draggingItem = self.dragItem;\n                self.movingSelection = self.selections.concat([]);\n                self.dragging = self.dragStartObject;\n                if (self.dispatchEvent('beginmove', {NativeEvent: e, cell: self.currentCell})) { return; }\n                document.body.addEventListener('mousemove', self.dragMove, false);\n                document.body.addEventListener('mouseup', self.stopDragMove, false);\n                return self.mousemove(e);\n            }\n            if (freeze) {\n                self.draggingItem = self.dragItem;\n                self.startFreezeMove = {\n                    x: self.frozenRow,\n                    y: self.frozenColumn\n                };\n                if (self.dispatchEvent('beginfreezemove', {NativeEvent: e})) { return; }\n                document.body.addEventListener('mousemove', self.freezeMove, false);\n                document.body.addEventListener('mouseup', self.stopFreezeMove, false);\n                return self.mousemove(e);\n            }\n            if (resize) {\n                self.draggingItem = self.dragItem;\n                if (self.draggingItem.rowOpen) {\n                    self.resizingStartingHeight = self.sizes.trees[self.draggingItem.data[self.uniqueId]];\n                } else {\n                    self.resizingStartingHeight = self.sizes.rows[self.draggingItem.data[self.uniqueId]] || self.style.cellHeight;\n                }\n                self.resizingStartingWidth = self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] || self.draggingItem.width;\n                document.body.addEventListener('mousemove', self.dragResizeColumn, false);\n                document.body.addEventListener('mouseup', self.stopDragResize, false);\n                return;\n            }\n            if (['row-reorder', 'column-reorder'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragStartObject;\n                document.body.addEventListener('mousemove', self.dragReorder, false);\n                document.body.addEventListener('mouseup', self.stopDragReorder, false);\n                return;\n            }\n        };\n        self.mouseup = function (e) {\n            clearTimeout(self.scrollTimer);\n            self.cellBoundaryCrossed = true;\n            self.rowBoundaryCrossed = true;\n            self.columnBoundaryCrossed = true;\n            self.selecting = undefined;\n            self.draggingItem = undefined;\n            self.dragStartObject = undefined;\n            if (self.dispatchEvent('mouseup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            if (self.currentCell && self.currentCell.grid !== undefined) {\n                return;\n            }\n            if (self.contextMenu || self.input) { return; }\n            if (self.dragStart && self.isInGrid(self.dragStart)) {\n                self.controlInput.focus();\n            }\n            e.preventDefault();\n        };\n        self.keydown = function (e) {\n            var i,\n                x = self.activeCell.columnIndex,\n                y = self.activeCell.rowIndex,\n                ctrl = (e.ctrlKey || e.metaKey),\n                last = self.data.length - 1,\n                cols = self.getVisibleSchema().length - 1;\n            if (self.dispatchEvent('keydown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            if (self.attributes.showNewRow) {\n                last += 1;\n            }\n            if (e.keyCode === 9) {\n                e.preventDefault();\n            }\n            // esc\n            if (e.keyCode === 27) {\n                self.selections = [];\n                self.draw(true);\n            // ctrl + a\n            } else if (ctrl && e.keyCode === 65) {\n                self.selectAll();\n            //ArrowDown\n            } else if (e.keyCode === 40) {\n                y += 1;\n            //ArrowUp\n            } else if (e.keyCode === 38) {\n                y -= 1;\n            //ArrowLeft Tab\n            } else if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {\n                x -= 1;\n            //ArrowRight Tab\n            } else if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {\n                x += 1;\n            //PageUp\n            } else if (e.keyCode === 33) {\n                y -= self.page;\n                e.preventDefault();\n            //PageDown\n            } else if (e.keyCode === 34) {\n                y += self.page;\n                e.preventDefault();\n            //Home ArrowUp\n            } else if (e.keyCode === 36 || (ctrl && e.keyCode === 38)) {\n                y = 0;\n            //End ArrowDown\n            } else if (e.keyCode === 35 || (ctrl && e.keyCode === 40)) {\n                y = self.data.length - 1;\n            //ArrowRight\n            } else if (ctrl && e.keyCode === 39) {\n                x = cols;\n            //ArrowLeft\n            } else if (ctrl && e.keyCode === 37) {\n                x = 0;\n            }\n            //Enter\n            if (e.keyCode === 13) {\n                return self.beginEditAt(x, y);\n            }\n            //Space\n            if (e.keyCode === 32) {\n                self.selections = [];\n                self.selections[Math.max(y, 0)] = [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                if (self.attributes.selectionMode === 'row') {\n                    for (i = self.selectionBounds.top; i <= self.selectionBounds.bottom; i += 1) {\n                        self.selectRow(i, ctrl, null, true);\n                    }\n                } else {\n                    self.selectArea(undefined, ctrl);\n                }\n                e.preventDefault();\n                self.draw(true);\n                return;\n            }\n            if (x < 0) {\n                x = 0;\n            }\n            if (y > last) {\n                y = last;\n            }\n            if (y < 0) {\n                y = 0;\n            }\n            if (x > cols) {\n                x = cols;\n            }\n            // Arrows\n            if (e.shiftKey && [37, 38, 39, 40].indexOf(e.keyCode) !== -1) {\n                self.selections[Math.max(y, 0)] = self.selections[Math.max(y, 0)] || [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                self.selectArea(undefined, ctrl);\n                self.draw(true);\n            }\n            if (x !== self.activeCell.columnIndex || y !== self.activeCell.rowIndex) {\n                self.scrollIntoView(x !== self.activeCell.columnIndex ? x : undefined, y !== self.activeCell.rowIndex ? y : undefined);\n                self.setActiveCell(x, y);\n                if (!e.shiftKey && self.attributes.selectionFollowsActiveCell) {\n                    if (!ctrl) {\n                        self.selections = [];\n                    }\n                    self.selections[y] = self.selections[y] || [];\n                    self.selections[y].push(x);\n                    self.dispatchEvent('selectionchanged', {\n                        selectedData: self.getSelectedData(),\n                        selections: self.selections,\n                        selectionBounds: self.selectionBounds\n                    });\n                }\n                self.draw(true);\n            }\n        };\n        self.keyup = function (e) {\n            if (self.dispatchEvent('keyup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n        };\n        self.keypress = function (e) {\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.dispatchEvent('keypress', {NativeEvent: e, cell: self.currentCell})) { return; }\n        };\n        self.dblclick = function (e) {\n            if (self.dispatchEvent('dblclick', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'columnHeaderCell') {\n                self.fitColumnToValues(self.currentCell.header.name);\n            } else if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'cornerCell') {\n                self.autosize();\n            } else if (['cell', 'activeCell'].indexOf(self.currentCell.style) !== -1) {\n                self.beginEditAt(self.currentCell.columnIndex, self.currentCell.rowIndex);\n            }\n        };\n        self.scrollWheel = function (e) {\n            var l,\n                t,\n                deltaX = e.deltaX === undefined ? e.NativeEvent.deltaX : e.deltaX,\n                deltaY = e.deltaY === undefined ? e.NativeEvent.deltaY : e.deltaY,\n                deltaMode = e.deltaMode === undefined ? e.NativeEvent.deltaMode : e.deltaMode;\n            if (wheeling) {\n                return;\n            }\n            if (self.dispatchEvent('wheel', {NativeEvent: e})) {\n                return;\n            }\n            e = e.NativeEvent || e;\n            self.touchHaltAnimation = true;\n            l = self.scrollBox.scrollLeft;\n            t = self.scrollBox.scrollTop;\n            if (self.hasFocus) {\n                //BUG Issue 42: https://github.com/TonyGermaneri/canvas-datagrid/issues/42\n                //https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\n                if (deltaMode === 1) {\n                    // line mode = 17 pixels per line\n                    deltaY = deltaY * 17;\n                }\n                if ((self.scrollBox.scrollTop < self.scrollBox.scrollHeight && deltaY > 0)\n                        || (self.scrollBox.scrollLeft < self.scrollBox.scrollWidth && deltaX > 0)\n                        || (self.scrollBox.scrollTop > 0 && deltaY < 0)\n                        || (self.scrollBox.scrollLeft > 0 && deltaX < 0)) {\n                    e.preventDefault(e);\n                }\n                wheeling = setTimeout(function () {\n                    wheeling = undefined;\n                    self.scrollBox.scrollTo(deltaX + l, deltaY + t);\n                }, 1);\n            }\n        };\n        self.pasteItem = function (clipData, x, y, mimeType) {\n            var l, s = self.getVisibleSchema(), yi = y - 1, sel = [];\n            function normalizeRowData(importingRow, existingRow, offsetX, schema, mimeType, rowIndex) {\n                var r = existingRow;\n                if (!Array.isArray(importingRow) && importingRow !== null && typeof importingRow === 'object') {\n                    importingRow = Object.keys(importingRow).map(function (colKey) {\n                        return importingRow[colKey];\n                    });\n                }\n                if (/^text\\/html/.test(mimeType)) {\n                    importingRow = importingRow.substring(4, importingRow.length - 5).split('</td><td>');\n                }\n                if (typeof importingRow === 'string') {\n                    importingRow = [importingRow];\n                }\n                sel[rowIndex] = [];\n                importingRow.forEach(function (cellData, colIndex) {\n                    var cName = schema[colIndex + offsetX].name;\n                    if (importingRow[colIndex] === undefined || importingRow[colIndex] === null) {\n                        r[cName] = existingRow[cName];\n                        return;\n                    }\n                    sel[rowIndex].push(colIndex + offsetX);\n                    r[cName] = importingRow[colIndex];\n                });\n                return r;\n            }\n            if (/^text\\/html/.test(mimeType)) {\n                if (!/^(<meta[^>]+>)?<table>/.test(clipData.substring(0, 29))) {\n                    console.warn('Unrecognized HTML format.  HTML must be a simple table, e.g.: <table><tr><td>data</td></tr></table>.  Data with the mime type text/html not in this format will not be imported as row data.');\n                    return;\n                }\n                // strip table beginning and ending off, then split at rows\n                clipData = clipData.substring(clipData.indexOf('<table><tr>') + 11, clipData.length - 13).split('</tr><tr>');\n            } else {\n                clipData = clipData.split('\\n');\n            }\n            l = clipData.length;\n            clipData.forEach(function (rowData) {\n                yi += 1;\n                var i = self.orders.columns[yi];\n                self.data[i] = normalizeRowData(rowData, self.data[i], x, s, mimeType, i);\n            });\n            self.selections = sel;\n            return l;\n        };\n        self.paste = function (e) {\n            var d;\n            function getItem(dti) {\n                var type = dti.type;\n                dti.getAsString(function (s) {\n                    self.pasteItem(s, self.activeCell.columnIndex, self.activeCell.rowIndex, type);\n                    self.draw();\n                });\n            }\n            d = Array.prototype.filter.call(e.clipboardData.items, function (dti) {\n                return dti.type === 'text/html';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/csv';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/plain';\n            })[0];\n            if (!d) {\n                console.warn('Cannot find supported clipboard data type.  Supported types are text/html, text/csv, text/plain.');\n                return;\n            }\n            getItem(d);\n        };\n        self.cut = function (e) {\n            self.copy(e);\n            self.forEachSelectedCell(function (data, index, colName) {\n                data[index][colName] = '';\n            });\n        };\n        self.copy = function (e) {\n            if (self.dispatchEvent('copy', {NativeEvent: e})) { return; }\n            if (!self.hasFocus || !e.clipboardData) { return; }\n            var t,\n                d,\n                rows = [],\n                trows = [],\n                sData = self.getSelectedData();\n            function fCopyCell(d) {\n                d = d === null || d === undefined ? '' : d;\n                return '<td>' + (typeof d === 'string' ? d.replace(/</g, '&lt;').replace(/>/g, '&gt;') : d) + '</td>';\n            }\n            if (sData.length > 0) {\n                sData.forEach(function (row) {\n                    if (row) {\n                        // r = array for HTML, rt = array for plain text\n                        var r = [],\n                            rt = [];\n                        Object.keys(row).forEach(function (key) {\n                            // escape strings\n                            if (row[key] !== null\n                                    && row[key] !== false\n                                    && row[key] !== undefined\n                                    && row[key].replace) {\n                                rt.push('\"' + row[key].replace(/\"/g, '\"\"') + '\"');\n                                r.push(fCopyCell(row[key]));\n                                return;\n                            }\n                            rt.push(row[key]);\n                            r.push(fCopyCell(row[key]));\n                        });\n                        rows.push(r.join(''));\n                        trows.push(rt.join(','));\n                    }\n                });\n                d = '<table><tr>' + rows.join('</tr><tr>') + '</tr></table>';\n                t = trows.join('\\n');\n                e.clipboardData.setData('text/html', d);\n                e.clipboardData.setData('text/plain', t);\n                e.clipboardData.setData('text/csv', t);\n                e.clipboardData.setData('application/json', JSON.stringify(sData));\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/events.js\n// module id = 4\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var touchTimerMs = 50,\n            touchScrollTimeout;\n        self.scrollAnimation = {};\n        self.touchDelta = {};\n        self.touchAnimateTo = {};\n        self.animationFrames = 0;\n        self.getTouchPos = function (e, touchIndex) {\n            var t = touchIndex ? e.touches[touchIndex] : e.touches[0],\n                rect = self.canvas.getBoundingClientRect(),\n                pos;\n            if (!t) { return; }\n            pos = {\n                x: t.clientX - rect.left,\n                y: t.clientY - rect.top\n            };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        // shamelessly stolen from from https://gist.github.com/gre/1650294\n        self.easingFunctions = {\n            linear: function (t) { return t; },\n            easeInQuad: function (t) { return t * t; },\n            easeOutQuad: function (t) { return t * (2 - t); },\n            easeInOutQuad: function (t) { return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t; },\n            easeInCubic: function (t) { return t * t * t; },\n            easeOutCubic: function (t) { return (--t) * t * t + 1; },\n            easeInOutCubic: function (t) { return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1; },\n            easeInQuart: function (t) { return t * t * t * t; },\n            easeOutQuart: function (t) { return 1 - (--t) * t * t * t; },\n            easeInOutQuart: function (t) { return t < 0.5 ? 8 * t  * t  * t * t : 1 - 8 * (--t) * t * t * t; },\n            easeInQuint: function (t) { return t * t * t * t * t; },\n            easeOutQuint: function (t) { return 1 + (--t) * t *  t * t * t; },\n            easeInOutQuint: function (t) { return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t; }\n        };\n        self.easing = function (t, b, c, d) {\n            return c * self.easingFunctions[self.attributes.touchEasingMethod](t / d) + b;\n        };\n        self.calculatePPSTimed = function () {\n            self.xPPST = -((self.touchDelta.x - self.touchSigmaTimed.x) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.yPPST = -((self.touchDelta.y - self.touchSigmaTimed.y) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.touchSigmaTimed = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.calculatePPS = function () {\n            self.xPPS = -((self.touchDelta.x - self.touchSigma.x) / (self.touchDelta.t - self.touchSigma.t));\n            self.yPPS = -((self.touchDelta.y - self.touchSigma.y) / (self.touchDelta.t - self.touchSigma.t));\n            self.touchSigma = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.touchEndAnimation = function () {\n            if (!self.canvas || !self.scrollBox.scrollTo) { return requestAnimationFrame(self.touchEndAnimation); }\n            var n = performance.now(),\n                d = self.attributes.touchReleaseAnimationDurationMs,\n                t;\n            t = n - self.touchDelta.t;\n            self.animationFrames += 1;\n            self.scrollAnimation.x = self.easing(t, self.touchDelta.scrollLeft, self.touchAnimateTo.x, d);\n            self.scrollAnimation.y = self.easing(t, self.touchDelta.scrollTop, self.touchAnimateTo.y, d);\n            if (t > d || (self.scrollAnimation.y === self.scrollBox.scrollTop\n                    && self.scrollAnimation.x === self.scrollBox.scrollLeft) || self.stopAnimation) {\n                return;\n            }\n            self.scrollBox.scrollTo(self.scrollAnimation.x, self.scrollAnimation.y);\n            requestAnimationFrame(self.touchEndAnimation);\n        };\n        self.touchEditCell = function (cell) {\n            self.beginEditAt(cell.columnIndex, cell.rowIndex);\n        };\n        self.touchCell = function (e) {\n            return function () {\n                clearInterval(self.calculatePPSTimer);\n                var i, pos = self.getTouchPos(e);\n                if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone) {\n                    i = self.getCellAt(pos.x, pos.y);\n                    if (!i) { return; }\n                    if (self.touchingCell && self.touchingCell.rowIndex === i.rowIndex\n                            && self.touchingCell.columnIndex === i.columnIndex) {\n                        self.touchEditCell(i);\n                        return;\n                    }\n                    if (self.input && self.input.editCell) {\n                        self.endEdit();\n                    }\n                    self.touchingCell = i;\n                    self.selectArea({\n                        top: i.rowIndex,\n                        bottom: i.rowIndex,\n                        left: i.columnIndex,\n                        right: i.columnIndex\n                    });\n                    self.draw(true);\n                }\n            };\n        };\n        self.touchstart = function (e) {\n            if (e.changedTouches[0]) {\n                self.touchStart = self.getTouchPos(e);\n                self.startingCell = self.getCellAt(self.touchStart.x, self.touchStart.y, true);\n            }\n            if (self.dispatchEvent('touchstart', {NativeEvent: e, cell: self.startingCell})) { return; }\n            self.disposeContextMenu();\n            clearInterval(self.calculatePPSTimer);\n            clearTimeout(self.touchContextTimeout);\n            self.touchStartEvent = e;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (e.touches.length === 1 && e.changedTouches[0] && !self.zoomAltered) {\n                self.touchLength = 1;\n                self.touchStart = self.touchStart || self.touchStart1;\n                self.touchScrollStart = {\n                    x: self.scrollBox.scrollLeft,\n                    y: self.scrollBox.scrollTop,\n                    t: performance.now()\n                };\n                self.touchDelta = {\n                    x: 0,\n                    y: 0,\n                    scrollLeft: self.scrollBox.scrollLeft,\n                    scrollTop: self.scrollBox.scrollTop,\n                    t: self.touchScrollStart.t\n                };\n                self.touchSigma = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchSigmaTimed = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchContextTimeout = setTimeout(function () {\n                    self.contextmenuEvent(e, self.touchStart);\n                }, self.attributes.touchContextMenuTimeMs);\n                self.calculatePPSTimer = setInterval(self.calculatePPSTimed, touchTimerMs);\n                if (self.startingCell && (self.startingCell.isGrid || ['tree', 'inherit'].indexOf(self.startingCell.context) !== -1)) {\n                    self.hasFocus = false;\n                    return;\n                }\n                self.hasFocus = true;\n                if (self.startingCell.isHeader) {\n                    if (self.startingCell.isRowHeader) {\n                        self.selectArea({\n                            top: self.startingCell.rowIndex,\n                            bottom: self.startingCell.rowIndex,\n                            left: 0,\n                            right: self.getVisibleSchema().length - 1,\n                        });\n                        self.draw(true);\n                    } else if (self.startingCell.isColumnHeader) {\n                        if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                            if (self.orderBy === self.startingCell.header.name) {\n                                self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                            } else {\n                                self.orderDirection = 'asc';\n                            }\n                            self.order(self.startingCell.header.name, self.orderDirection);\n                        }\n                        if (self.attributes.columnHeaderClickBehavior === 'select') {\n                            self.selectArea({\n                                top: 0,\n                                bottom: self.data.length - 1,\n                                left: self.startingCell.columnIndex,\n                                right: self.startingCell.columnIndex,\n                            });\n                            self.draw(true);\n                        }\n                    }\n                    self.touchEndEvents(e);\n                    return;\n                }\n            }\n            if (self.zoomAltered) { return; }\n            document.body.addEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.addEventListener('touchend', self.touchend, false);\n            document.body.addEventListener('touchcancel', self.touchcancel, false);\n            self.draw(true);\n        };\n        self.touchSelect = function (cell, handleType) {\n            if (cell.rowIndex === undefined || cell.columnIndex === undefined) { return; }\n            self.touchSelecting = true;\n            var bounds = self.getSelectionBounds();\n            if (handleType === 'selection-handle-bl'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex <= bounds.right) {\n                bounds.bottom = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tl'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex <= bounds.right) {\n                bounds.top = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tr'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex >= bounds.left) {\n                bounds.top = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            } else if (handleType === 'selection-handle-br'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex >= bounds.left) {\n                bounds.bottom = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            }\n            if (self.attributes.selectionMode === 'row' || cell.rowIndex === -1) {\n                bounds.left = 0;\n                bounds.right = self.getSchema().length - 1;\n            } else {\n                bounds.left = Math.max(0, bounds.left);\n            }\n            self.selectArea(bounds);\n            self.draw(true);\n        };\n        self.touchmove = function (e) {\n            var ch, rw, rScrollZone, lScrollZone, bScrollZone, tScrollZone, sbw, t1, t2;\n            if (self.dispatchEvent('beforetouchmove', {NativeEvent: e})) { return; }\n            clearTimeout(touchScrollTimeout);\n            if (e.changedTouches[0]) {\n                self.touchPosition = self.getTouchPos(e);\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = self.getTouchPos(e, 1);\n            }\n            if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) > self.attributes.touchDeadZone) {\n                clearTimeout(self.touchContextTimeout);\n            }\n            if (e.touches.length === 2 && self.touchPosition && self.touchPosition1) {\n                t1 = self.touchPosition.y;\n                t2 = self.touchPosition1.y;\n                if (!self.zoomDeltaStart) {\n                    self.zoomDeltaStart = Math.abs(t1 - t2);\n                    self.startScale = self.scale;\n                }\n                self.touchLength = 2;\n                self.scaleDelta = self.zoomDeltaStart - Math.abs(t1 - t2);\n                self.scale = self.startScale - (self.scaleDelta * self.attributes.touchZoomSensitivity);\n                self.scale = Math.min(Math.max(self.scale, self.attributes.touchZoomMin), self.attributes.touchZoomMax);\n                self.zoomAltered = true;\n                self.resize(true);\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.zoomAltered) { return; }\n            self.touchLength = 1;\n            self.touchPosition = self.touchPosition || self.touchPosition1;\n            ch = self.getColumnHeaderCellHeight();\n            rw = self.getRowHeaderCellWidth();\n            rScrollZone = self.width - self.style.scrollBarWidth - self.touchPosition.x < self.attributes.selectionScrollZone;\n            lScrollZone = self.touchPosition.x - rw < self.attributes.selectionScrollZone;\n            bScrollZone = self.height - self.style.scrollBarWidth - self.touchPosition.y < self.attributes.selectionScrollZone;\n            tScrollZone = self.touchPosition.y - ch < self.attributes.selectionScrollZone;\n            sbw = self.style.scrollBarWidth;\n            function touchScroll() {\n                var x = self.scrollBox.scrollLeft,\n                    y = self.scrollBox.scrollTop;\n                x += (rScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y += (bScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y -= (tScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                x -= (lScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                self.scrollBox.scrollTo(x, y);\n                touchScrollTimeout = setTimeout(touchScroll, self.attributes.scrollRepeatRate);\n            }\n            e.stopPropagation();\n            self.touchDelta = {\n                x: self.touchPosition.x - self.touchStart.x,\n                y: self.touchPosition.y - self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: performance.now()\n            };\n            self.currentCell = self.getCellAt(self.touchPosition.x, self.touchPosition.y);\n            self.dispatchEvent('touchmove', {NativeEvent: e, cell: self.currentCell});\n            self.calculatePPS();\n            self.touchDuration = performance.now() - self.touchScrollStart.t;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            if (self.touchSelecting && (rScrollZone || lScrollZone || tScrollZone || bScrollZone)) {\n                touchScroll();\n            }\n            if (/vertical-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollTop = self.scrollBox.scrollHeight\n                    * ((self.touchPosition.y - ch - sbw) / (self.scrollBox.height - sbw - ch));\n                return;\n            }\n            if (/horizontal-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollLeft = self.scrollBox.scrollWidth\n                    * ((self.touchPosition.x - rw - sbw) / (self.scrollBox.width - sbw - rw));\n                return;\n            }\n            if (/selection-handle-/.test(self.startingCell.style)) {\n                self.touchSelect(self.currentCell, self.startingCell.style);\n                return;\n            }\n            self.scrollBox.scrollTo(self.touchScrollStart.x - self.touchDelta.x,\n                self.touchScrollStart.y - self.touchDelta.y);\n            self.draw(true);\n        };\n        self.touchEndEvents = function (e) {\n            self.zoomDeltaStart = undefined;\n            self.touchSelecting = false;\n            clearInterval(self.touchScrollTimeout);\n            clearInterval(self.touchContextTimeout);\n            clearInterval(self.calculatePPSTimer);\n            e.stopPropagation();\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n        };\n        self.touchend = function (e) {\n            if (self.dispatchEvent('touchend', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.zoomDeltaStart = undefined;\n            if (e.changedTouches[0]) {\n                self.touchPosition = undefined;\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = undefined;\n            }\n            if (self.zoomAltered) {\n                if (e.touches.length === 0) {\n                    self.zoomAltered = false;\n                }\n                return;\n            }\n            var dz = Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone;\n            if (isNaN(self.xPPS)) {\n                self.xPPS = 0;\n            }\n            if (isNaN(self.yPPS)) {\n                self.yPPS = 0;\n            }\n            if (isNaN(self.xPPST)) {\n                self.xPPST = 0;\n            }\n            if (isNaN(self.yPPST)) {\n                self.yPPST = 0;\n            }\n            self.touchAnimateTo.x = self.xPPS * self.attributes.touchReleaseAcceleration;\n            self.touchAnimateTo.y = self.yPPS * self.attributes.touchReleaseAcceleration;\n            self.calculatePPSTimed();\n            if (dz && !self.contextMenu) {\n                self.touchCell(self.touchStartEvent)();\n            } else if (self.animationFrames === 0\n                    && (Math.abs(self.xPPST) > self.attributes.scrollAnimationPPSThreshold\n                        || Math.abs(self.yPPST) > self.attributes.scrollAnimationPPSThreshold)\n                    && !/-scroll-/.test(self.startingCell.style)\n                    && !dz) {\n                self.stopAnimation = false;\n                self.touchEndAnimation();\n            }\n            self.touchEndEvents(e);\n        };\n        self.touchcancel = function (e) {\n            if (self.dispatchEvent('touchcancel', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.touchEndEvents(e);\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/touch.js\n// module id = 5\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals HTMLElement: false, Reflect: false, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self, ctor) {\n        self.scale = 1;\n        self.orders = {\n            rows: [],\n            columns: []\n        };\n        self.cellGridAttributes = {};\n        self.treeGridAttributes = {};\n        self.visibleRowHeights = [];\n        self.hasFocus = false;\n        self.activeCell = {\n            columnIndex: 0,\n            rowIndex: 0\n        };\n        self.innerHTML = '';\n        self.storageName = 'canvasDataGrid';\n        self.invalidSearchExpClass = 'canvas-datagrid-invalid-search-regExp';\n        self.localStyleLibraryStorageKey = 'canvas-datagrid-user-style-library';\n        self.uniqueId = '_canvasDataGridUniqueId';\n        self.orderBy = null;\n        self.orderDirection = 'asc';\n        self.columnFilters = {};\n        self.filters = {};\n        self.frozenRow = 0;\n        self.frozenColumn = 0;\n        self.ellipsisCache = {};\n        self.scrollCache = { x: [], y: [] };\n        self.scrollBox = {};\n        self.visibleRows = [];\n        self.sizes = {\n            rows: {},\n            columns: {},\n            trees: {}\n        };\n        self.currentFilter = function () {\n            return true;\n        };\n        self.selections = [];\n        self.hovers = {};\n        self.attributes = {};\n        self.style = {};\n        self.formatters = {};\n        self.sorters = {};\n        self.schemaHashes = {};\n        self.events = {};\n        self.uId = 0;\n        self.changes = [];\n        self.scrollIndexTop = 0;\n        self.scrollPixelTop = 0;\n        self.scrollIndexLeft = 0;\n        self.scrollPixelLeft = 0;\n        self.childGrids = {};\n        self.openChildren = {};\n        self.scrollModes = [\n            'vertical-scroll-box',\n            'vertical-scroll-top',\n            'vertical-scroll-bottom',\n            'horizontal-scroll-box',\n            'horizontal-scroll-right',\n            'horizontal-scroll-left'\n        ];\n        self.componentL1Events = {};\n        self.eventNames = ['afterdraw', 'afterrendercell', 'attributechanged', 'beforebeginedit',\n            'beforecreatecellgrid', 'beforedraw', 'beforeendedit', 'beforerendercell', 'beforerendercellgrid',\n            'beginedit', 'cellmouseout', 'cellmouseover', 'click', 'collapsetree', 'contextmenu', 'copy',\n            'datachanged', 'dblclick', 'endedit', 'expandtree', 'formatcellvalue', 'keydown', 'keypress',\n            'keyup', 'mousedown', 'mousemove', 'mouseup', 'newrow', 'ordercolumn', 'rendercell', 'rendercellgrid',\n            'renderorderbyarrow', 'rendertext', 'rendertreearrow', 'reorder', 'reordering', 'resize',\n            'resizecolumn', 'resizerow', 'schemachanged', 'scroll', 'selectionchanged', 'stylechanged',\n            'touchcancel', 'touchend', 'touchmove', 'touchstart', 'wheel'];\n        self.mouse = { x: 0, y: 0};\n        self.getSelectedData = function (expandToRow) {\n            var d = [], s = expandToRow ? self.getSchema() : self.getVisibleSchema(), l = self.data.length;\n            if (l === 0) { return []; }\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    var orderedIndex;\n                    if (col === -1 || !s[col]) { return; }\n                    orderedIndex = self.orders.columns[col];\n                    d[index][s[orderedIndex].name] = self.data[index][s[orderedIndex].name];\n                });\n            });\n            return d;\n        };\n        self.fillArray = function (low, high, step, def) {\n            step = step || 1;\n            var i = [], x;\n            for (x = low; x <= high; x += step) {\n                i[x] = def === undefined ? x : (typeof def === 'function' ? def(x) : def);\n            }\n            return i;\n        };\n        self.getColumnHeaderCellHeight = function () {\n            if (!self.attributes.showColumnHeaders) { return 0; }\n            return ((self.sizes.rows[-1] || self.style.columnHeaderCellHeight) * self.scale);\n        };\n        self.getRowHeaderCellWidth = function () {\n            if (!self.attributes.showRowHeaders) { return 0; }\n            return (self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth) * self.scale;\n        };\n        self.setStorageData = function () {\n            if (!self.attributes.saveAppearance || !self.attributes.name) { return; }\n            var visibility = {};\n            self.getSchema().forEach(function (column) {\n                visibility[column.name] = !column.hidden;\n            });\n            localStorage.setItem(self.storageName + '-' + self.attributes.name, JSON.stringify({\n                sizes: {\n                    rows: self.sizes.rows,\n                    columns: self.sizes.columns\n                },\n                orders: {\n                    rows: self.orders.rows,\n                    columns: self.orders.columns\n                },\n                orderBy: self.orderBy,\n                orderDirection: self.orderDirection,\n                visibility: visibility\n            }));\n        };\n        self.getSchema = function () {\n            return self.schema || self.tempSchema || [];\n        };\n        self.createColumnOrders = function () {\n            var s = self.getSchema();\n            self.orders.columns = self.fillArray(0, s.length - 1);\n        };\n        self.createRowOrders = function () {\n            self.orders.rows = self.fillArray(0, self.data.length - 1);\n        };\n        self.getVisibleSchema = function () {\n            return self.getSchema().filter(function (col) {\n                return !col.hidden && col.name !== self.uniqueId;\n            });\n        };\n        self.applyDefaultValue = function (row, header) {\n            var d = header.defaultValue || '';\n            if (typeof d === 'function') {\n                d = d.apply(self.intf, [header]);\n            }\n            row[header.name] = d;\n        };\n        self.createNewRowData = function () {\n            self.newRow = {};\n            self.newRow[self.uniqueId] = self.uId;\n            self.uId += 1;\n            self.getSchema().forEach(function forEachHeader(header) {\n                self.applyDefaultValue(self.newRow, header);\n            });\n        };\n        self.getSchemaNameHash = function (key) {\n            var n = 0;\n            while (self.schemaHashes[key]) {\n                n += 1;\n                key = key + n;\n            }\n            return key;\n        };\n        self.filter = function (type) {\n            var f = self.filters[type];\n            if (!f && type !== undefined) {\n                console.warn('Cannot find filter for type %s, falling back to substring match.', type);\n                f = self.filters.string;\n            }\n            return f;\n        };\n        self.getBestGuessDataType = function (columnName) {\n            var t, x, l = self.data.length;\n            for (x = 0; x < l; x += 1) {\n                if ([null, undefined].indexOf(self.data[x][columnName]) !== -1) {\n                    t = typeof self.data[x];\n                    return t === 'object' ? 'string' : t;\n                }\n            }\n            return 'string';\n        };\n        self.drawChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].draw();\n            });\n        };\n        self.resizeChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].resize();\n            });\n        };\n        self.autoScrollZone = function (e, x, y, ctrl) {\n            var setTimer,\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight();\n            if (x > self.width - self.attributes.selectionScrollZone && x < self.width) {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y > self.height - self.attributes.selectionScrollZone && y < self.height) {\n                self.scrollBox.scrollTop += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (x - self.attributes.selectionScrollZone - rowHeaderCellWidth < 0) {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y - self.attributes.selectionScrollZone - columnHeaderCellHeight < 0) {\n                self.scrollBox.scrollTop -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (setTimer && !ctrl && self.currentCell && self.currentCell.columnIndex !== -1) {\n                self.scrollTimer = setTimeout(self.mousemove, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.refreshFromOrigialData = function () {\n            self.data = self.originalData.filter(function (row) {\n                return true;\n            });\n        };\n        self.validateColumn = function (c, s) {\n            if (!c.name) {\n                throw new Error('A column must contain at least a name.');\n            }\n            if (s.filter(function (i) { return i.name === c.name; }).length > 0) {\n                throw new Error('A column with the name '\n                    + c.name + ' already exists and cannot be added again.');\n            }\n            return true;\n        };\n        self.setDefaults = function (obj1, obj2, key, def) {\n            obj1[key] = obj2[key] === undefined ? def : obj2[key];\n        };\n        self.setAttributes = function () {\n            self.defaults.attributes.forEach(function eachAttribute(i) {\n                self.setDefaults(self.attributes, self.args, i[0], i[1]);\n            });\n        };\n        self.setStyle = function () {\n            self.defaults.styles.forEach(function eachStyle(i) {\n                self.setDefaults(self.style, self.args.style || {}, i[0], i[1]);\n            });\n        };\n        self.autosize = function (colName) {\n            self.getVisibleSchema().forEach(function (col) {\n                if (col.name === colName || colName === undefined) {\n                    self.fitColumnToValues(col.name);\n                }\n            });\n            self.fitColumnToValues('cornerCell');\n        };\n        self.dispose = function () {\n            if (!self.isChildGrid && self.canvas && self.canvas.parentNode) {\n                self.canvas.parentNode.removeChild(self.canvas);\n            }\n            self.eventParent.removeEventListener('mouseup', self.mouseup, false);\n            self.eventParent.removeEventListener('mousedown', self.mousedown, false);\n            self.eventParent.removeEventListener('dblclick', self.dblclick, false);\n            self.eventParent.removeEventListener('click', self.click, false);\n            self.eventParent.removeEventListener('mousemove', self.mousemove);\n            self.eventParent.removeEventListener('wheel', self.scrollWheel, false);\n            self.canvas.removeEventListener('contextmenu', self.contextmenu, false);\n            self.canvas.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('keypress', self.keypress, false);\n            self.controlInput.removeEventListener('keyup', self.keyup, false);\n            self.controlInput.removeEventListener('keydown', self.keydown, false);\n            window.removeEventListener('resize', self.resize);\n            if (self.observer && self.observer.disconnect) {\n                self.observer.disconnect();\n            }\n        };\n        self.tryLoadStoredSettings = function () {\n            var s;\n            self.reloadStoredValues();\n            if (self.storedSettings\n                    && typeof self.storedSettings.orders === 'object'\n                    && self.storedSettings.orders !== null) {\n                if (self.storedSettings.orders.rows.length >= self.data.length) {\n                    self.orders.rows = self.storedSettings.orders.rows;\n                }\n                s = self.getSchema();\n                if (self.storedSettings.orders.columns.length === s.length) {\n                    self.orders.columns = self.storedSettings.orders.columns;\n                }\n                self.orderBy = self.storedSettings.orderBy === undefined\n                    ? self.uniqueId : self.storedSettings.orderBy;\n                self.orderDirection = self.storedSettings.orderDirection === undefined\n                    ? self.uniqueId : self.storedSettings.orderDirection;\n                if (self.orderBy !== self.uniqueId && self.getHeaderByName(self.orderBy) && self.orderDirection) {\n                    self.order(self.orderBy, self.orderDirection);\n                }\n            }\n        };\n        self.getDomRoot = function () {\n            return self.shadowRoot ? self.shadowRoot.host : self.parentNode;\n        };\n        self.getFontName = function (fontStyle) {\n            return fontStyle.replace(/\\d+\\.?\\d*px/, '');\n        };\n        self.getFontHeight = function (fontStyle) {\n            return parseFloat(fontStyle, 10);\n        };\n        self.parseStyleValue = function (key) {\n            if (/Font/.test(key)) {\n                self.style[key + 'Height'] = self.getFontHeight(self.style[key]);\n                self.style[key + 'Name'] = self.getFontName(self.style[key]);\n                return;\n            }\n            // when inheriting styles from already instantiated grids, don't parse already parsed values.\n            if (key === 'moveOverlayBorderSegments' && typeof self.style[key] === 'string') {\n                self.style[key] = self.style[key].split(',')\n                    .map(function (i) { return parseInt(i, 10); });\n            }\n        };\n        self.initProp = function (propName) {\n            if (!self.args[propName]) { return; }\n            Object.keys(self.args[propName]).forEach(function (key) {\n                self[propName][key] = self.args[propName][key];\n            });\n        };\n        self.getStyleProperty = function (key) {\n            if (self.styleKeys.indexOf(key) === -1) {\n                return self.parentNodeStyle[key];\n            }\n            return self.style[key];\n        };\n        self.setStyleProperty = function (key, value, supressDrawAndEvent) {\n            var isDim = ['height', 'width', 'minHeight', 'minWidth', 'maxHeight', 'maxWidth'].indexOf(key) !== -1;\n            if (self.styleKeys.indexOf(key) === -1) {\n                self.parentNodeStyle[key] = value;\n            } else {\n                self.style[key] = value;\n                self.parseStyleValue(key);\n            }\n            if (isDim) {\n                self.resize();\n            }\n            if (!supressDrawAndEvent) {\n                self.draw(true);\n                self.dispatchEvent('stylechanged', {name: 'style', value: value});\n            }\n        };\n        self.reloadStoredValues = function () {\n            if (self.attributes.name && self.attributes.saveAppearance) {\n                self.storedSettings = localStorage.getItem(self.storageName + '-' + self.attributes.name);\n                if (self.storedSettings) {\n                    try {\n                        self.storedSettings = JSON.parse(self.storedSettings);\n                    } catch (e) {\n                        console.warn('could not read settings from localStore', e);\n                        self.storedSettings = undefined;\n                    }\n                }\n                if (self.storedSettings) {\n                    if (typeof self.storedSettings.sizes === 'object'\n                            && self.storedSettings.sizes !== null) {\n                        self.sizes.rows = self.storedSettings.sizes.rows;\n                        self.sizes.columns = self.storedSettings.sizes.columns;\n                        ['trees', 'columns', 'rows'].forEach(function (i) {\n                            if (!self.sizes[i]) {\n                                self.sizes[i] = {};\n                            }\n                        });\n                    }\n                    if (typeof self.storedSettings.visibility === 'object') {\n                        self.getSchema().forEach(function (column) {\n                            if (self.storedSettings.visibility && self.storedSettings.visibility[column.name] !== undefined) {\n                                column.hidden = !self.storedSettings.visibility[column.name];\n                            }\n                        });\n                    }\n                }\n            }\n        };\n        self.init = function () {\n            if (self.initialized) { return; }\n            var publicStyleKeyIntf = {};\n            self.setAttributes();\n            self.setStyle();\n            self.initScrollBox();\n            self.setDom();\n            self.type = 'canvas-datagrid';\n            self.initialized = true;\n            self.ie = /Trident/.test(window.navigator.userAgent);\n            self.edge = /Edge/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.moz = /Gecko/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.mobile = /Mobile/i.test(window.navigator.userAgent);\n            self.cursorGrab = 'grab';\n            self.cursorGrabing = 'grabbing';\n            self.cursorGrab = self.webKit ? '-webkit-grab' : self.cursorGrab;\n            self.cursorGrabing = self.moz ? '-webkit-grabbing' : self.cursorGrabbing;\n            self.pointerLockPosition = {x: 0, y: 0};\n            Object.keys(self.style).forEach(self.parseStyleValue);\n            self.intf.moveSelection = self.moveSelection;\n            self.intf.moveTo = self.moveTo;\n            self.intf.type = self.type;\n            self.intf.addEventListener = self.addEventListener;\n            self.intf.removeEventListener = self.removeEventListener;\n            self.intf.dispatchEvent = self.dispatchEvent;\n            /**\n             * Releases grid resources and removes grid elements.\n             * @memberof canvasDatagrid\n             * @name dispose\n             * @method\n             */\n            self.intf.dispose = self.dispose;\n            /**\n             * Appends the grid to another element later.  Not implemented.\n             * @memberof canvasDatagrid\n             * @name appendTo\n             * @method\n             * @param {number} el The element to append the grid to.\n             */\n            self.intf.appendTo = self.appendTo;\n            self.intf.filters = self.filters;\n            self.intf.sorters = self.sorters;\n            self.intf.autosize = self.autosize;\n            self.intf.beginEditAt = self.beginEditAt;\n            self.intf.endEdit = self.endEdit;\n            self.intf.setActiveCell = self.setActiveCell;\n            self.intf.forEachSelectedCell = self.forEachSelectedCell;\n            self.intf.scrollIntoView = self.scrollIntoView;\n            self.intf.clearChangeLog = self.clearChangeLog;\n            self.intf.gotoCell = self.gotoCell;\n            self.intf.gotoRow = self.gotoRow;\n            self.intf.getHeaderByName = self.getHeaderByName;\n            self.intf.findColumnScrollLeft = self.findColumnScrollLeft;\n            self.intf.findRowScrollTop = self.findRowScrollTop;\n            self.intf.fitColumnToValues = self.fitColumnToValues;\n            self.intf.findColumnMaxTextLength = self.findColumnMaxTextLength;\n            self.intf.disposeContextMenu = self.disposeContextMenu;\n            self.intf.getCellAt = self.getCellAt;\n            self.intf.isCellVisible = self.isCellVisible;\n            self.intf.order = self.order;\n            self.intf.draw = self.draw;\n            self.intf.selectArea = self.selectArea;\n            self.intf.clipElement = self.clipElement;\n            self.intf.getSchemaFromData = self.getSchemaFromData;\n            self.intf.setFilter = self.setFilter;\n            self.intf.selectRow = self.selectRow;\n            self.intf.parentGrid = self.parentGrid;\n            self.intf.toggleTree = self.toggleTree;\n            self.intf.expandTree = self.expandTree;\n            self.intf.collapseTree = self.collapseTree;\n            self.intf.canvas = self.canvas;\n            self.intf.context = self.ctx;\n            self.intf.insertRow = self.insertRow;\n            self.intf.deleteRow = self.deleteRow;\n            self.intf.addRow = self.addRow;\n            self.intf.insertColumn = self.insertColumn;\n            self.intf.deleteColumn = self.deleteColumn;\n            self.intf.addColumn = self.addColumn;\n            self.intf.getClippingRect = self.getClippingRect;\n            self.intf.setRowHeight = self.setRowHeight;\n            self.intf.setColumnWidth = self.setColumnWidth;\n            self.intf.resetColumnWidths = self.resetColumnWidths;\n            self.intf.resetRowHeights = self.resetRowHeights;\n            self.intf.resize = self.resize;\n            self.intf.selectColumn = self.selectColumn;\n            self.intf.selectRow = self.selectRow;\n            self.intf.selectAll = self.selectAll;\n            self.intf.selectNone = self.selectNone;\n            self.intf.drawChildGrids = self.drawChildGrids;\n            self.intf.assertPxColor = self.assertPxColor;\n            self.intf.clearPxColorAssertions = self.clearPxColorAssertions;\n            self.intf.integerToAlpha = self.integerToAlpha;\n            self.intf.copy = self.copy;\n            self.intf.setStyleProperty = self.setStyleProperty;\n            Object.defineProperty(self.intf, 'defaults', {\n                get: function () {\n                    return {\n                        styles: self.defaults.styles.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {}),\n                        attributes: self.defaults.attributes.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {})\n                    };\n                }\n            });\n            self.styleKeys = Object.keys(self.intf.defaults.styles);\n            self.DOMStyles = window.getComputedStyle(document.body, null);\n            Object.keys(self.DOMStyles).concat(Object.keys(self.style)).forEach(function (key) {\n                // unless this line is here, Object.keys() will not work on <instance>.style\n                publicStyleKeyIntf[key] = undefined;\n                Object.defineProperty(publicStyleKeyIntf, key, {\n                    get: function () {\n                        return self.getStyleProperty(key);\n                    },\n                    set: function (value) {\n                        self.setStyleProperty(key, value);\n                    }\n                });\n            });\n            Object.defineProperty(self.intf, 'shadowRoot', {\n                get: function () {\n                    return self.shadowRoot;\n                }\n            });\n            Object.defineProperty(self.intf, 'activeCell', {\n                get: function () {\n                    return self.activeCell;\n                }\n            });\n            Object.defineProperty(self.intf, 'hasFocus', {\n                get: function () {\n                    return self.hasFocus;\n                }\n            });\n            Object.defineProperty(self.intf, 'style', {\n                get: function () {\n                    return publicStyleKeyIntf;\n                },\n                set: function (valueObject) {\n                    Object.keys(valueObject).forEach(function (key) {\n                        self.setStyleProperty(key, valueObject[key], true);\n                    });\n                    self.draw(true);\n                    self.dispatchEvent('stylechanged', {name: 'style', value: valueObject});\n                }\n            });\n            Object.defineProperty(self.intf, 'attributes', { value: {}});\n            Object.keys(self.attributes).forEach(function (key) {\n                Object.defineProperty(self.intf.attributes, key, {\n                    get: function () {\n                        return self.attributes[key];\n                    },\n                    set: function (value) {\n                        self.attributes[key] = value;\n                        if (key === 'name') {\n                            self.tryLoadStoredSettings();\n                        }\n                        self.draw(true);\n                        self.dispatchEvent('attributechanged', {name: key, value: value[key]});\n                    }\n                });\n            });\n            self.filters.string = function (value, filterFor) {\n                value = String(value);\n                var filterRegExp,\n                    regEnd = /\\/(i|g|m)*$/,\n                    pattern = regEnd.exec(filterFor),\n                    flags = pattern ? pattern[0].substring(1) : '',\n                    flagLength = flags.length;\n                self.invalidFilterRegEx = undefined;\n                if (filterFor.substring(0, 1) === '/' && pattern) {\n                    try {\n                        filterRegExp = new RegExp(filterFor.substring(1, filterFor.length - (flagLength + 1)), flags);\n                    } catch (e) {\n                        self.invalidFilterRegEx = e;\n                        return;\n                    }\n                    return filterRegExp.test(value);\n                }\n                return value.toString ? value.toString().toLocaleUpperCase()\n                    .indexOf(filterFor.toLocaleUpperCase()) !== -1 : false;\n            };\n            self.filters.number = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                return value === filterFor;\n            };\n            ['formatters', 'filters', 'sorters'].forEach(self.initProp);\n            self.applyComponentStyle(false, self.intf);\n            self.resize();\n            self.reloadStoredValues();\n            if (self.args.data) {\n                self.intf.data = self.args.data;\n            }\n            if (!self.data) {\n                self.intf.data = [];\n            }\n            if (self.intf.innerText || self.intf.textContent) {\n                try {\n                    self.intf.data = JSON.parse(self.intf.innerText || self.intf.textContent);\n                } catch (e) {\n                    console.warn('Cannot parse innerText', e);\n                }\n            }\n            if (self.args.schema) {\n                self.intf.schema = self.args.schema;\n            }\n            if (self.isChildGrid) {\n                requestAnimationFrame(function () { self.resize(true); });\n            } else {\n                self.resize(true);\n            }\n            return self;\n        };\n        /**\n         * Removes focus from the grid.\n         * @memberof canvasDatagrid\n         * @name blur\n         * @method\n         */\n        self.intf.blur = function (e) {\n            self.hasFocus = false;\n        };\n        /**\n         * Focuses on the grid.\n         * @memberof canvasDatagrid\n         * @name focus\n         * @method\n         */\n        self.intf.focus = function () {\n            self.hasFocus = true;\n            self.controlInput.focus();\n        };\n        if (self.shadowRoot || self.isChildGrid) {\n            Object.defineProperty(self.intf, 'height', {\n                get: function () {\n                    if (self.shadowRoot) {\n                        return self.shadowRoot.height;\n                    }\n                    return self.parentNode.height;\n                },\n                set: function (value) {\n                    if (self.shadowRoot) {\n                        self.shadowRoot.height = value;\n                    } else {\n                        self.parentNode.height = value;\n                    }\n                    self.resize(true);\n                }\n            });\n            Object.defineProperty(self.intf, 'width', {\n                get: function () {\n                    if (self.shadowRoot) {\n                        return self.shadowRoot.width;\n                    }\n                    return self.parentNode.width;\n                },\n                set: function (value) {\n                    if (self.shadowRoot) {\n                        self.shadowRoot.width = value;\n                    } else {\n                        self.parentNode.width = value;\n                    }\n                    self.resize(true);\n                }\n            });\n            Object.defineProperty(self.intf, 'parentNode', {\n                get: function () {\n                    return self.parentNode;\n                },\n                set: function (value) {\n                    if (!self.isChildGrid) {\n                        throw new TypeError('Cannot set property parentNode which has only a getter');\n                    }\n                    self.parentNode = value;\n                }\n            });\n        }\n        Object.defineProperty(self.intf, 'visibleRowHeights', {\n            get: function () {\n                return self.visibleRowHeights;\n            }\n        });\n        Object.defineProperty(self.intf, 'openChildren', {\n            get: function () {\n                return self.openChildren;\n            }\n        });\n        Object.defineProperty(self.intf, 'childGrids', {\n            get: function () {\n                return Object.keys(self.childGrids).map(function (gridId) {\n                    return self.childGrids[gridId];\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'isChildGrid', {\n            get: function () {\n                return self.isChildGrid;\n            }\n        });\n        Object.defineProperty(self, 'cursor', {\n            get: function () {\n                return self.parentNodeStyle.cursor;\n            },\n            set: function (value) {\n                if (value === 'cell') { value = 'default'; }\n                if (self.currentCursor !== value) {\n                    self.parentNodeStyle.cursor = value;\n                    self.currentCursor = value;\n                }\n            }\n        });\n        Object.defineProperty(self.intf, 'orderDirection', {\n            get: function () {\n                return self.orderDirection;\n            },\n            set: function (value) {\n                if (value !== 'desc') {\n                    value = 'asc';\n                }\n                self.orderDirection = value;\n                self.order(self.orderBy, self.orderDirection);\n            }\n        });\n        Object.defineProperty(self.intf, 'orderBy', {\n            get: function () {\n                return self.orderBy;\n            },\n            set: function (value) {\n                if (self.getSchema().find(function (col) {\n                        return col.name === value;\n                    }) === undefined) {\n                    throw new Error('Cannot sort by unknown column name.');\n                }\n                self.orderBy = value;\n                self.order(self.orderBy, self.orderDirection);\n            }\n        });\n        if (self.isComponent) {\n            Object.defineProperty(self.intf, 'offsetHeight', {\n                get: function () {\n                    return self.canvas.offsetHeight;\n                }\n            });\n            Object.defineProperty(self.intf, 'offsetWidth', {\n                get: function () {\n                    return self.canvas.offsetWidth;\n                }\n            });\n        }\n        Object.defineProperty(self.intf, 'scrollHeight', {\n            get: function () {\n                return self.scrollBox.scrollHeight;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollWidth', {\n            get: function () {\n                return self.scrollBox.scrollWidth;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollTop', {\n            get: function () {\n                return self.scrollBox.scrollTop;\n            },\n            set: function (value) {\n                self.scrollBox.scrollTop = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollLeft', {\n            get: function () {\n                return self.scrollBox.scrollLeft;\n            },\n            set: function (value) {\n                self.scrollBox.scrollLeft = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'sizes', {\n            get: function () {\n                return self.sizes;\n            }\n        });\n        Object.defineProperty(self.intf, 'input', {\n            get: function () {\n                return self.input;\n            }\n        });\n        Object.defineProperty(self.intf, 'controlInput', {\n            get: function () {\n                return self.controlInput;\n            }\n        });\n        Object.defineProperty(self.intf, 'currentCell', {\n            get: function () {\n                return self.currentCell;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleCells', {\n            get: function () {\n                return self.visibleCells;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRows', {\n            get: function () {\n                return self.visibleRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'selections', {\n            get: function () {\n                return self.selections;\n            }\n        });\n        Object.defineProperty(self.intf, 'dragMode', {\n            get: function () {\n                return self.dragMode;\n            }\n        });\n        Object.defineProperty(self.intf, 'changes', {\n            get: function () {\n                return self.changes;\n            }\n        });\n        self.intf.formatters = self.formatters;\n        self.normalizeDataset = function (data, callback) {\n            var i, d, max, syncFnInvoked;\n            if (data === null || data === '' || data === undefined) {\n                return callback([]);\n            }\n            if (typeof data === 'string'\n                    || typeof data === 'number'\n                    || typeof data === 'boolean') {\n                data = [{'0': data}];\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if ((!Array.isArray(data[0]) && typeof data[0] === 'object' && data[0] !== null)\n                            || (Array.isArray(data) && data.length === 0)) {\n                return callback(data);\n            }\n            if (typeof data === 'function') {\n                i = data.apply(self.intf, [function (d) {\n                    if (syncFnInvoked) {\n                        console.warn('Detected a callback to the data setter function after the same function already returned a value synchronously.');\n                    }\n                    self.normalizeDataset(d, callback);\n                }]);\n                if (i) {\n                    syncFnInvoked = true;\n                    self.normalizeDataset(i, callback);\n                }\n                return;\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if (Array.isArray(data)) {\n                if (!Array.isArray(data[0])) {\n                    //array of something?  throw it all into 1 row!\n                    data = [data];\n                }\n                // find the longest length\n                max = 0;\n                d = [];\n                data.forEach(function (row) {\n                    max = Math.max(max, row.length);\n                });\n                // map against length indexes\n                data.forEach(function (row, index) {\n                    var x;\n                    d[index] = {};\n                    for (x = 0; x < max; x += 1) {\n                        d[index][x] = row[x];\n                    }\n                });\n                return callback(d);\n            }\n            throw new Error('Unsupported data type.  Must be an array of arrays or an array of objects, function or string.');\n        };\n        self.eventNames.forEach(function (eventName) {\n            Object.defineProperty(self.intf, 'on' + eventName, {\n                get: function () {\n                    return self.componentL1Events[eventName];\n                },\n                set: function (value) {\n                    self.events[eventName] = [];\n                    self.componentL1Events[eventName] = value;\n                    if (!value) { return; }\n                    self.addEventListener(eventName, value);\n                }\n            });\n        });\n        Object.defineProperty(self.intf, 'frozenRow', {\n            get: function () {\n                return self.frozenRow;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.visibleRows.length < val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible rows.');\n                }\n                self.frozenRow = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'frozenColumn', {\n            get: function () {\n                return self.frozenColumn;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.getVisibleSchema().length < val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible columns.');\n                }\n                self.frozenColumn = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollIndexRect', {\n            get: function () {\n                return {\n                    top: self.scrollIndexTop,\n                    right: self.scrollIndexRight,\n                    bottom: self.scrollIndexBottom,\n                    left: self.scrollIndexLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollPixelRect', {\n            get: function () {\n                return {\n                    top: self.scrollPixelTop,\n                    right: self.scrollPixelRight,\n                    bottom: self.scrollPixelBottom,\n                    left: self.scrollPixelLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'selectionBounds', {\n            get: function () {\n                return self.getSelectionBounds();\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedRows', {\n            get: function () {\n                return self.getSelectedData(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedCells', {\n            get: function () {\n                return self.getSelectedData();\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleSchema', {\n            get: function () {\n                return self.getVisibleSchema().map(function eachDataRow(col) {\n                    return col;\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'treeGridAttributes', {\n            get: function () {\n                return self.treeGridAttributes;\n            },\n            set: function (value) {\n                self.treeGridAttributes = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'cellGridAttributes', {\n            get: function () {\n                return self.cellGridAttributes;\n            },\n            set: function (value) {\n                self.cellGridAttributes = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'ctx', {\n            get: function () {\n                return self.ctx;\n            }\n        });\n        Object.defineProperty(self.intf, 'schema', {\n            get: function schemaGetter() {\n                return self.getSchema();\n            },\n            set: function schemaSetter(value) {\n                if (value === undefined) {\n                    // Issue #89 - allow schema to be set to initialized state\n                    self.schema = undefined;\n                    self.tempSchema = undefined;\n                    self.dispatchEvent('schemachanged', {schema: undefined});\n                    return;\n                }\n                if (!Array.isArray(value) || typeof value[0] !== 'object') {\n                    throw new Error('Schema must be an array of objects.');\n                }\n                if (value[0].name === undefined) {\n                    throw new Error('Expected schema to contain an object with at least a name property.');\n                }\n                self.schema = value.map(function eachSchemaColumn(column, index) {\n                    column.width = column.width || self.style.cellWidth;\n                    column[self.uniqueId] = self.getSchemaNameHash(column.name);\n                    column.filter = column.filter || self.filter(column.type);\n                    column.type = column.type || 'string';\n                    column.index = index;\n                    column.columnIndex = index;\n                    column.rowIndex = -1;\n                    return column;\n                });\n                self.tempSchema = undefined;\n                self.createNewRowData();\n                self.createColumnOrders();\n                self.tryLoadStoredSettings();\n                if (self.storedSettings && typeof self.storedSettings.visibility === 'object') {\n                    self.schema.forEach(function hideEachSchemaColumn(column, index) {\n                        if (self.storedSettings && self.storedSettings.visibility[column.name] !== undefined) {\n                            column.hidden = !self.storedSettings.visibility[column.name];\n                        }\n                    });\n                }\n                self.resize(true);\n                self.dispatchEvent('schemachanged', {schema: self.schema});\n            }\n        });\n        Object.defineProperty(self.intf, 'data', {\n            get: function dataGetter() {\n                return self.data.map(function (row) {\n                    delete row[self.uniqueId];\n                    return row;\n                });\n            },\n            set: function dataSetter(value) {\n                self.normalizeDataset(value, function (d) {\n                    self.originalData = d.map(function eachDataRow(row) {\n                        row[self.uniqueId] = self.uId;\n                        self.uId += 1;\n                        return row;\n                    });\n                    self.changes = [];\n                    //TODO apply filter to incoming dataset\n                    self.data = self.originalData;\n                    if (!self.schema) {\n                        self.tempSchema = self.getSchemaFromData();\n                    }\n                    // Issue #89 - allow schema to be auto-created every time data is set\n                    if (self.attributes.autoGenerateSchema) {\n                        self.schema = self.getSchemaFromData();\n                    }\n                    if (!self.schema && self.data.length === 0) {\n                        self.tempSchema = [{name: ''}];\n                        self.tempSchema[0][self.uniqueId] = self.getSchemaNameHash('');\n                    }\n                    if ((self.tempSchema && !self.schema) || self.attributes.autoGenerateSchema) {\n                        self.createColumnOrders();\n                        self.tryLoadStoredSettings();\n                        self.dispatchEvent('schemachanged', {schema: self.tempSchema});\n                    }\n                    self.createNewRowData();\n                    if (self.attributes.autoResizeColumns && self.data.length > 0\n                            && self.storedSettings === undefined) {\n                        self.autosize();\n                    }\n                    self.fitColumnToValues('cornerCell', true);\n                    self.resize(true);\n                    self.createRowOrders();\n                    self.tryLoadStoredSettings();\n                    self.dispatchEvent('datachanged', {data: self.data});\n                });\n            }\n        });\n        self.initScrollBox = function () {\n            var sHeight = 0,\n                sWidth = 0,\n                scrollTop = 0,\n                scrollLeft = 0,\n                scrollHeight = 0,\n                scrollWidth = 0,\n                scrollBoxHeight = 20,\n                scrollBoxWidth = 20;\n            function setScrollTop(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollTop value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollHeight) {\n                    value = scrollHeight;\n                }\n                if (scrollHeight < 0) {\n                    value = 0;\n                }\n                scrollTop = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            function setScrollLeft(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollLeft value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollWidth) {\n                    value = scrollWidth;\n                }\n                if (scrollWidth < 0) {\n                    value = 0;\n                }\n                scrollLeft = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            self.scrollBox.toString = function () {\n                return '{\"width\": ' + scrollWidth\n                    + ', \"height\": ' + scrollHeight\n                    + ', \"left\": ' + scrollLeft\n                    + ', \"top\": ' + scrollTop + '}';\n            };\n            self.scrollBox.scrollTo = function (x, y, supressDrawEvent) {\n                setScrollLeft(x, true);\n                setScrollTop(y, supressDrawEvent);\n            };\n            Object.defineProperty(self.scrollBox, 'scrollBoxHeight', {\n                get: function () {\n                    return scrollBoxHeight;\n                },\n                set: function (value) {\n                    scrollBoxHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollBoxWidth', {\n                get: function () {\n                    return scrollBoxWidth;\n                },\n                set: function (value) {\n                    scrollBoxWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'height', {\n                get: function () {\n                    return sHeight;\n                },\n                set: function (value) {\n                    if (scrollHeight < value) {\n                        scrollTop = 0;\n                    }\n                    sHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'width', {\n                get: function () {\n                    return sWidth;\n                },\n                set: function (value) {\n                    sWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollTop', {\n                get: function () {\n                    return scrollTop;\n                },\n                set: setScrollTop\n            });\n            Object.defineProperty(self.scrollBox, 'scrollLeft', {\n                get: function () {\n                    return scrollLeft;\n                },\n                set: setScrollLeft\n            });\n            Object.defineProperty(self.scrollBox, 'scrollHeight', {\n                get: function () {\n                    return scrollHeight;\n                },\n                set: function (value) {\n                    if (scrollTop > value) {\n                        scrollTop = Math.max(value, 0);\n                    }\n                    if (scrollHeight < sHeight) {\n                        scrollTop = 0;\n                    }\n                    scrollHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollWidth', {\n                get: function () {\n                    return scrollWidth;\n                },\n                set: function (value) {\n                    if (scrollLeft > value) {\n                        scrollLeft = Math.max(value, 0);\n                    }\n                    scrollWidth = value;\n                }\n            });\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/intf.js\n// module id = 6\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false, Event: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var zIndexTop, hoverScrollTimeout, autoCompleteContext;\n        function applyContextItemStyle(contextItemContainer) {\n            self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item' + (self.mobile ? '-mobile' : ''));\n            contextItemContainer.addEventListener('mouseover', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n            });\n            contextItemContainer.addEventListener('mouseout', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n            });\n        }\n        function createContextMenu(ev, pos, items, parentContextMenu) {\n            var container = document.createElement('div'),\n                upArrow = document.createElement('div'),\n                downArrow = document.createElement('div'),\n                children = [],\n                selectedIndex = -1,\n                intf = {},\n                rect;\n            if (!Array.isArray(items)) { throw new Error('createContextMenu expects an array.'); }\n            function createItems() {\n                items.forEach(function (item) {\n                    var contextItemContainer = document.createElement('div'),\n                        childMenuArrow;\n                    function removeChildContext(e) {\n                        if (e.relatedTarget === container\n                                || item.contextMenu.container === e.relatedTarget\n                                || childMenuArrow === e.relatedTarget\n                                || (contextItemContainer === e.relatedTarget)\n                                || item.contextMenu.container.contains(e.relatedTarget)\n                                ) { return; }\n                        item.contextMenu.dispose();\n                        children.splice(children.indexOf(item.contextMenu), 1);\n                        item.contextMenu = undefined;\n                        contextItemContainer.removeEventListener('mouseout', removeChildContext);\n                        container.removeEventListener('mouseout', removeChildContext);\n                        contextItemContainer.setAttribute('contextOpen', '0');\n                        contextItemContainer.setAttribute('opening', '0');\n                    }\n                    function contextAddCallback(items) {\n                        // check yet again if the user hasn't moved off\n                        if (contextItemContainer.getAttribute('opening') !== '1' ||\n                                contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        var cPos = contextItemContainer.getBoundingClientRect();\n                        cPos = {\n                            left: cPos.left + self.style.childContextMenuMarginLeft + container.offsetWidth,\n                            top: cPos.top + self.style.childContextMenuMarginTop,\n                            bottom: cPos.bottom,\n                            right: cPos.right\n                        };\n                        item.contextMenu = createContextMenu(ev, cPos, items, intf);\n                        contextItemContainer.setAttribute('contextOpen', '1');\n                        contextItemContainer.addEventListener('mouseout', removeChildContext);\n                        container.addEventListener('mouseout', removeChildContext);\n                        children.push(item.contextMenu);\n                    }\n                    function createChildContext() {\n                        var i;\n                        if (contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        contextItemContainer.setAttribute('opening', '1');\n                        if (typeof item.items === 'function') {\n                            i  = item.items.apply(intf, [function (items) {\n                                contextAddCallback(items);\n                            }]);\n                            if (i !== undefined && Array.isArray(i)) {\n                                contextAddCallback(i);\n                            }\n                            return;\n                        }\n                        contextAddCallback(item.items);\n                    }\n                    function addItem(item) {\n                        function addContent(content) {\n                            if (content === null) { return; }\n                            if (typeof content === 'function') {\n                                return addContent(content(ev));\n                            }\n                            if (typeof content === 'object') {\n                                contextItemContainer.appendChild(content);\n                                return;\n                            }\n                            applyContextItemStyle(contextItemContainer);\n                            contextItemContainer.innerHTML = content;\n                            return;\n                        }\n                        addContent(item.title);\n                        item.contextItemContainer = contextItemContainer;\n                        if ((item.items && item.items.length > 0) || typeof item.items === 'function') {\n                            childMenuArrow = document.createElement('div');\n                            self.createInlineStyle(childMenuArrow, 'canvas-datagrid-context-child-arrow');\n                            childMenuArrow.innerHTML = self.style.childContextMenuArrowHTML;\n                            contextItemContainer.appendChild(childMenuArrow);\n                            contextItemContainer.addEventListener('mouseover', createChildContext);\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                contextItemContainer.setAttribute('opening', '0');\n                            });\n                        }\n                        if (item.click) {\n                            contextItemContainer.addEventListener('click', function (ev) {\n                                item.click.apply(self, [ev]);\n                            });\n                        }\n                    }\n                    addItem(item);\n                    container.appendChild(contextItemContainer);\n                });\n            }\n            function clickIndex(idx) {\n                items[idx].contextItemContainer.dispatchEvent(new Event('click'));\n            }\n            function checkArrowVisibility() {\n                if (container.scrollTop > 0) {\n                    self.parentDOMNode.appendChild(upArrow);\n                } else if (upArrow.parentNode) {\n                    upArrow.parentNode.removeChild(upArrow);\n                }\n                if (container.scrollTop >= container.scrollHeight - container.offsetHeight && downArrow.parentNode) {\n                    downArrow.parentNode.removeChild(downArrow);\n                } else if (container.scrollHeight - container.offsetHeight > 0\n                        && !(container.scrollTop >= container.scrollHeight - container.offsetHeight)) {\n                    self.parentDOMNode.appendChild(downArrow);\n                }\n            }\n            function startHoverScroll(type) {\n                return function t() {\n                    var a = self.attributes.contextHoverScrollAmount;\n                    if (type === 'up' && container.scrollTop === 0) { return; }\n                    if (type === 'down' && container.scrollTop === container.scrollHeight) { return; }\n                    container.scrollTop += (type === 'up' ? -a : a);\n                    hoverScrollTimeout = setTimeout(t, self.attributes.contextHoverScrollRateMs, type);\n                };\n            }\n            function endHoverScroll(type) {\n                return function () {\n                    clearTimeout(hoverScrollTimeout);\n                };\n            }\n            function init() {\n                var loc = {},\n                    s = self.scrollOffset(self.canvas);\n                if (zIndexTop === undefined) {\n                    zIndexTop = self.style.contextMenuZIndex;\n                }\n                createItems();\n                self.createInlineStyle(container, 'canvas-datagrid-context-menu' + (self.mobile ? '-mobile' : ''));\n                loc.x = pos.left - s.left;\n                loc.y = pos.top - s.top;\n                loc.height = 0;\n                zIndexTop += 1;\n                container.style.position = 'absolute';\n                upArrow.style.color = self.style.contextMenuArrowColor;\n                downArrow.style.color = self.style.contextMenuArrowColor;\n                [upArrow, downArrow].forEach(function (el) {\n                    el.style.textAlign = 'center';\n                    el.style.position = 'absolute';\n                    el.style.zIndex = zIndexTop + 1;\n                });\n                container.style.zIndex = zIndexTop;\n                if (parentContextMenu && parentContextMenu.inputDropdown) {\n                    container.style.maxHeight = window.innerHeight - loc.y - self.style.autocompleteBottomMargin + 'px';\n                    container.style.minWidth = pos.width + 'px';\n                    loc.y += pos.height;\n                }\n                if (self.mobile) {\n                    container.style.width = pos.width + 'px';\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                container.addEventListener('scroll', checkArrowVisibility);\n                container.addEventListener('wheel', function (e) {\n                    if (self.hasFocus) {\n                        container.scrollTop += e.deltaY;\n                        container.scrollLeft += e.deltaX;\n                    }\n                    checkArrowVisibility();\n                });\n                upArrow.innerHTML = self.style.contextMenuArrowUpHTML;\n                downArrow.innerHTML = self.style.contextMenuArrowDownHTML;\n                container.appendChild(upArrow);\n                document.body.appendChild(downArrow);\n                document.body.appendChild(container);\n                rect = container.getBoundingClientRect();\n                // TODO: fix !(parentContextMenu && parentContextMenu.inputDropdown) state (autocomplete)\n                if (rect.bottom > window.innerHeight) {\n                    if (!(parentContextMenu && parentContextMenu.inputDropdown)) {\n                        loc.y -= (rect.bottom + self.style.contextMenuWindowMargin) - window.innerHeight;\n                    }\n                    if (loc.y < 0) { loc.y = 0; }\n                    if (container.offsetHeight > window.innerHeight - self.style.contextMenuWindowMargin) {\n                        container.style.height = window.innerHeight - self.style.contextMenuWindowMargin + 'px';\n                        loc.y -= self.style.contextMenuWindowMargin;\n                    }\n                }\n                if (rect.right > window.innerWidth) {\n                    loc.x -= rect.right - window.innerWidth + self.style.contextMenuWindowMargin;\n                }\n                if (loc.x < 0) { loc.x = 0; }\n                if (loc.y < 0) { loc.y = 0; }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                rect = container.getBoundingClientRect();\n                upArrow.style.top = rect.top + 'px';\n                downArrow.style.top = rect.top + rect.height - downArrow.offsetHeight + 'px';\n                upArrow.style.left = rect.left + 'px';\n                downArrow.style.left = rect.left + 'px';\n                downArrow.style.width = container.offsetWidth + 'px';\n                upArrow.style.width = container.offsetWidth + 'px';\n                downArrow.addEventListener('mouseover', startHoverScroll('down'));\n                downArrow.addEventListener('mouseout', endHoverScroll('down'));\n                upArrow.addEventListener('mouseover', startHoverScroll('up'));\n                upArrow.addEventListener('mouseout', endHoverScroll('up'));\n                checkArrowVisibility();\n            }\n            intf.parentGrid = self.intf;\n            intf.parentContextMenu = parentContextMenu;\n            intf.container = container;\n            init();\n            intf.clickIndex = clickIndex;\n            intf.rect = rect;\n            intf.items = items;\n            intf.upArrow = upArrow;\n            intf.downArrow = downArrow;\n            intf.dispose = function () {\n                clearTimeout(hoverScrollTimeout);\n                children.forEach(function (c) {\n                    c.dispose();\n                });\n                [downArrow, upArrow, container].forEach(function (el) {\n                    if (el.parentNode) { el.parentNode.removeChild(el); }\n                });\n            };\n            Object.defineProperty(intf, 'selectedIndex', {\n                get: function () {\n                    return selectedIndex;\n                },\n                set: function (value) {\n                    if (typeof value !== 'number' || isNaN(value || !isFinite(value))) {\n                        throw new Error('Context menu selected index must be a sane number.');\n                    }\n                    selectedIndex = value;\n                    if (selectedIndex > items.length - 1) {\n                        selectedIndex = items.length - 1;\n                    }\n                    if (selectedIndex < 0) {\n                        selectedIndex = 0;\n                    }\n                    items.forEach(function (item, index) {\n                        if (index === selectedIndex) {\n                            return self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                        }\n                        self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item');\n                    });\n                }\n            });\n            return intf;\n        }\n        function createFilterContextMenuItems(e) {\n            var filterContainer = document.createElement('div'),\n                filterLabel = document.createElement('div'),\n                filterAutoCompleteButton = document.createElement('button'),\n                filterInput = document.createElement('input'),\n                n = e.cell && e.cell.header ? e.cell.header.title || e.cell.header.name : '',\n                autoCompleteItems,\n                iRect;\n            function checkRegExpErrorState() {\n                filterInput.style.background = self.style.contextFilterInputBackground;\n                filterInput.style.color = self.style.contextFilterInputColor;\n                if (self.invalidFilterRegEx) {\n                    filterInput.style.background = self.style.contextFilterInvalidRegExpBackground;\n                    filterInput.style.color = self.style.contextFilterInvalidRegExpColor;\n                }\n            }\n            function fillAutoComplete() {\n                var count = 0;\n                autoCompleteItems = {};\n                self.data.forEach(function (row) {\n                    var value = row[e.cell.header.name];\n                    if (autoCompleteItems[value] || count > self.attributes.maxAutoCompleteItems) { return; }\n                    count += 1;\n                    autoCompleteItems[value] = {\n                        title: self.formatters[e.cell.header.type || 'string']({ cell: { value: value }}),\n                        click: function (e) {\n                            filterInput.value = value;\n                            e.stopPropagation();\n                            filterInput.dispatchEvent(new Event('keyup'));\n                            self.disposeAutocomplete();\n                            return;\n                        }\n                    };\n                });\n                autoCompleteItems = Object.keys(autoCompleteItems).map(function (key) {\n                    return autoCompleteItems[key];\n                });\n            }\n            function createAutoCompleteContext(ev) {\n                if (ev && [40, 38, 13, 9].indexOf(ev.keyCode) !== -1) { return; }\n                fillAutoComplete();\n                iRect = filterInput.getBoundingClientRect();\n                if (autoCompleteContext) {\n                    autoCompleteContext.dispose();\n                    autoCompleteContext = undefined;\n                }\n                autoCompleteContext = createContextMenu(e, {\n                    left: iRect.left,\n                    top: iRect.top,\n                    right: iRect.right,\n                    bottom: iRect.bottom,\n                    height: iRect.height,\n                    width: iRect.width\n                }, autoCompleteItems, {inputDropdown: true});\n                autoCompleteContext.selectedIndex = 0;\n            }\n            self.createInlineStyle(filterLabel, 'canvas-datagrid-context-menu-label');\n            self.createInlineStyle(filterAutoCompleteButton, 'canvas-datagrid-context-menu-filter-button');\n            self.createInlineStyle(filterInput, 'canvas-datagrid-context-menu-filter-input');\n            checkRegExpErrorState();\n            filterInput.onclick = self.disposeAutocomplete;\n            filterInput.addEventListener('keydown', function (e) {\n                //down\n                if (e.keyCode === 40) {\n                    autoCompleteContext.selectedIndex += 1;\n                }\n                //up\n                if (e.keyCode === 38) {\n                    autoCompleteContext.selectedIndex -= 1;\n                }\n                //enter\n                if (e.keyCode === 13) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    self.disposeContextMenu();\n                }\n                //tab\n                if (e.keyCode === 9) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    e.preventDefault();\n                }\n                //esc\n                if (e.keyCode === 27) {\n                    self.disposeContextMenu();\n                }\n            });\n            filterInput.addEventListener('keyup', function () {\n                self.setFilter(e.cell.header.name, filterInput.value);\n            });\n            filterInput.addEventListener('keyup', createAutoCompleteContext);\n            ['focus', 'blur', 'keydown', 'keyup', 'change'].forEach(function (en) {\n                filterInput.addEventListener(en, checkRegExpErrorState);\n            });\n            filterInput.value = e.cell.header ? self.columnFilters[e.cell.header.name] || '' : '';\n            filterLabel.innerHTML = self.attributes.filterOptionText.replace(/%s/g, n);\n            filterAutoCompleteButton.onclick = function () {\n                if (autoCompleteContext) {\n                    return self.disposeAutocomplete();\n                }\n                createAutoCompleteContext();\n            };\n            filterAutoCompleteButton.innerHTML = self.style.contextFilterButtonHTML;\n            filterContainer.addEventListener('click', function (e) {\n                return e.stopPropagation();\n            });\n            filterContainer.appendChild(filterLabel);\n            filterContainer.appendChild(filterInput);\n            filterContainer.appendChild(filterAutoCompleteButton);\n            e.items.push({\n                title: filterContainer\n            });\n            if (Object.keys(self.columnFilters).length) {\n                Object.keys(self.columnFilters).forEach(function (cf) {\n                    var h = self.getHeaderByName(cf);\n                    e.items.push({\n                        title: self.attributes.removeFilterOptionText.replace(/%s/g, h.title || h.name),\n                        click: function removeFilterClick(e) {\n                            e.preventDefault();\n                            self.setFilter(cf, '');\n                            self.controlInput.focus();\n                        }\n                    });\n                });\n            }\n        }\n        function addDefaultContextMenuItem(e) {\n            var isNormalCell = !(e.cell.isBackground || e.cell.isHeaderCellCap\n                    || e.cell.isScrollBar || e.cell.isCorner || e.cell.isRowHeader)\n                    && e.cell.header;\n            if (self.attributes.showFilter && isNormalCell) {\n                createFilterContextMenuItems(e);\n            }\n            if (self.attributes.showCopy\n                    && self.selections.reduce(function (p, r) {\n                        return p + r.length;\n                    }, 0) > 0) {\n                e.items.push({\n                    title: self.attributes.copyText,\n                    click: function () {\n                        document.execCommand('copy');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.showPaste && self.clipBoardData) {\n                e.items.push({\n                    title: self.attributes.pasteText,\n                    click: function () {\n                        self.paste(self.clipBoardData, e.cell.columnIndex, e.cell.rowIndex);\n                        self.draw();\n                    }\n                });\n            }\n            if (self.attributes.showColumnSelector) {\n                e.items.push({\n                    title: self.attributes.columnSelectorText,\n                    items: function () {\n                        var d = [];\n                        self.getSchema().forEach(function (column) {\n                            if (column.name === self.uniqueId) { return; }\n                            function toggleColumnVisibility(e) {\n                                column.hidden = !column.hidden;\n                                e.preventDefault();\n                                self.stopPropagation(e);\n                                self.disposeContextMenu();\n                                self.resize(true);\n                                self.setStorageData();\n                            }\n                            var el = document.createElement('div');\n                            applyContextItemStyle(el);\n                            el.addEventListener('touchstart', toggleColumnVisibility);\n                            el.addEventListener('click', toggleColumnVisibility);\n                            el.innerHTML = (column.hidden ? self.attributes.columnSelectorHiddenText\n                                    : self.attributes.columnSelectorVisibleText)\n                                    + (column.title || column.name);\n                            d.push({\n                                title: el\n                            });\n                        });\n                        return d;\n                    }\n                });\n                if (e.cell && e.cell.header) {\n                    e.items.push({\n                        title: self.attributes.hideColumnText\n                            .replace(/%s/ig, e.cell.header.title || e.cell.header.name),\n                        click: function (ev) {\n                            e.cell.header.hidden = true;\n                            ev.preventDefault();\n                            self.stopPropagation(ev);\n                            self.disposeContextMenu();\n                            self.setStorageData();\n                            setTimeout(function () { self.resize(true); }, 10);\n                        }\n                    });\n                }\n            }\n            if (self.attributes.saveAppearance && self.attributes.showClearSettingsOption\n                    && (Object.keys(self.sizes.rows).length > 0\n                        || Object.keys(self.sizes.columns).length > 0)) {\n                e.items.push({\n                    title: self.attributes.clearSettingsOptionText,\n                    click: function (e) {\n                        e.preventDefault();\n                        self.sizes.rows = {};\n                        self.sizes.columns = {};\n                        self.createRowOrders();\n                        self.createColumnOrders();\n                        self.storedSettings = undefined;\n                        self.dispatchEvent('resizecolumn', {columnWidth: self.style.cellWidth});\n                        self.dispatchEvent('resizerow', {cellHeight: self.style.cellHeight});\n                        self.setStorageData();\n                        self.resize(true);\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.allowSorting && self.attributes.showOrderByOption && isNormalCell) {\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextAsc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'asc');\n                        self.controlInput.focus();\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextDesc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'desc');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n        }\n        self.disposeAutocomplete = function () {\n            if (autoCompleteContext) {\n                autoCompleteContext.dispose();\n                autoCompleteContext = undefined;\n            }\n        };\n        self.disposeContextMenu = function () {\n            document.removeEventListener('click', self.disposeContextMenu);\n            zIndexTop = self.style.contextMenuZIndex;\n            self.disposeAutocomplete();\n            if (self.contextMenu) {\n                self.contextMenu.dispose();\n            }\n            self.contextMenu = undefined;\n        };\n        self.contextmenuEvent = function (e, overridePos) {\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            function createDiposeEvent() {\n                requestAnimationFrame(function () {\n                    document.addEventListener('click', self.disposeContextMenu);\n                    document.removeEventListener('mouseup', createDiposeEvent);\n                });\n            }\n            var contextPosition,\n                items = [],\n                pos = overridePos || self.getLayerPos(e),\n                ev = {\n                    NativeEvent: e,\n                    cell: self.getCellAt(pos.x, pos.y),\n                    items: items\n                };\n            if (!ev.cell.isGrid) {\n                addDefaultContextMenuItem(ev);\n            }\n            if (self.dispatchEvent('contextmenu', ev)) {\n                return;\n            }\n            if (!ev.cell.isGrid) {\n                if (self.contextMenu) {\n                    self.disposeContextMenu();\n                }\n                contextPosition = {\n                    left: pos.x + pos.rect.left\n                        + self.style.contextMenuMarginLeft + self.canvasOffsetLeft,\n                    top: pos.y + pos.rect.top\n                        + self.style.contextMenuMarginTop + self.canvasOffsetTop,\n                    right: ev.cell.width + ev.cell.x + pos.rect.left,\n                    bottom: ev.cell.height + ev.cell.y + pos.rect.top,\n                    height: ev.cell.height,\n                    width: ev.cell.width\n                };\n                if (self.mobile) {\n                    contextPosition.left = self.style.mobileContextMenuMargin + 'px';\n                    contextPosition.width = self.width - (self.style.mobileContextMenuMargin * 2) + 'px';\n                }\n                self.contextMenu = createContextMenu(ev, contextPosition, items);\n                document.addEventListener('mouseup', createDiposeEvent);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/contextMenu.js\n// module id = 7\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.getClippingRect = function (ele) {\n            var boundingRect = self.position(self.parentNode),\n                eleRect = self.position(ele),\n                s = self.scrollOffset(self.canvas),\n                clipRect = {\n                    x: 0,\n                    y: 0,\n                    h: 0,\n                    w: 0\n                },\n                parentRect = {\n                    x: -Infinity,\n                    y: -Infinity,\n                    h: Infinity,\n                    w: Infinity\n                },\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth();\n            boundingRect.top -= s.top;\n            boundingRect.left -= s.left;\n            eleRect.top -= s.top;\n            eleRect.left -= s.left;\n            clipRect.h = boundingRect.top + boundingRect.height - ele.offsetTop - self.style.scrollBarWidth;\n            clipRect.w = boundingRect.left + boundingRect.width - ele.offsetLeft - self.style.scrollBarWidth;\n            clipRect.x = boundingRect.left + (eleRect.left * -1) + rowHeaderCellWidth;\n            clipRect.y = boundingRect.top + (eleRect.top * -1) + columnHeaderCellHeight;\n            return {\n                x: clipRect.x > parentRect.x ? clipRect.x : parentRect.x,\n                y: clipRect.y > parentRect.y ? clipRect.y : parentRect.y,\n                h: clipRect.h < parentRect.h ? clipRect.h : parentRect.h,\n                w: clipRect.w < parentRect.w ? clipRect.w : parentRect.w\n            };\n        };\n        self.clipElement = function (ele) {\n            var clipRect = self.getClippingRect(ele);\n            if (clipRect.w < 0) { clipRect.w = 0; }\n            if (clipRect.h < 0) { clipRect.h = 0; }\n            ele.style.clip = 'rect('\n                + clipRect.y + 'px,'\n                + clipRect.w + 'px,'\n                + clipRect.h + 'px,'\n                + clipRect.x + 'px'\n                + ')';\n            // INFO https://developer.mozilla.org/en-US/docs/Web/CSS/clip\n            // clip has been \"deprecated\" for clipPath.  Of course nothing but chrome\n            // supports clip path, so we'll keep using clip until someday clipPath becomes\n            // more widely support.  The code below works correctly, but setting clipPath and clip\n            // at the same time has undesirable results.\n            // ele.style.clipPath = 'polygon('\n            //     + clipRect.x + 'px ' + clipRect.y + 'px,'\n            //     + clipRect.x + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.y + 'px'\n            //     + ')';\n        };\n        self.scrollOffset = function (e) {\n            var x = 0, y = 0;\n            while (e.parentNode && e.nodeName !== 'CANVAS-DATAGRID' && e !== self.intf) {\n                if (e.nodeType !== 'canvas-datagrid-tree'\n                        && e.nodeType !== 'canvas-datagrid-cell') {\n                    x -= e.scrollLeft;\n                    y -= e.scrollTop;\n                }\n                e = e.parentNode;\n            }\n            return {\n                left: x - document.scrollingElement.scrollLeft,\n                top: y - document.scrollingElement.scrollTop\n            };\n        };\n        self.resizeEditInput = function () {\n            if (self.input && self.input.editCell) {\n                var pos = self.canvas.getBoundingClientRect(),\n                    s = self.scrollOffset(self.intf),\n                    bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                    borderWidth = (self.style.cellBorderWidth * bm),\n                    cell = self.getVisibleCellByIndex(self.input.editCell.columnIndex, self.input.editCell.rowIndex)\n                        || {x: -100, y: -100, height: 0, width: 0};\n                if (self.mobile) {\n                    self.input.style.left = '0';\n                    self.input.style.top = (self.height - self.style.mobileEditInputHeight) - borderWidth - 1 + 'px';\n                    self.input.style.height = self.style.mobileEditInputHeight + 'px';\n                    self.input.style.width = self.width - borderWidth - 1 + 'px';\n                    return;\n                }\n                self.input.style.left = pos.left + cell.x + self.canvasOffsetLeft - s.left + 'px';\n                self.input.style.top = pos.top + cell.y - self.style.cellBorderWidth + self.canvasOffsetTop - s.top + 'px';\n                self.input.style.height = cell.height - borderWidth + 'px';\n                self.input.style.width = cell.width - self.style.cellPaddingLeft + 'px';\n                self.clipElement(self.input);\n            }\n        };\n        self.position = function (e, ignoreScrollOffset) {\n            var x = 0, y = 0, s = e, h, w;\n            while (e.offsetParent && e.nodeName !== 'CANVAS-DATAGRID') {\n                x += e.offsetLeft;\n                y += e.offsetTop;\n                h = e.offsetHeight;\n                w = e.offsetWidth;\n                e = e.offsetParent;\n            }\n            if (ignoreScrollOffset) {\n                return {left: x, top: y, height: h, width: w};\n            }\n            e = s;\n            s = self.scrollOffset(e);\n            return { left: x + s.left, top: y + s.top, height: h, width: w };\n        };\n        self.getLayerPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.clientX - rect.left,\n                    y: e.clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        /**\n         * Ends editing, optionally aborting the edit.\n         * @memberof canvasDatagrid\n         * @name endEdit\n         * @method\n         * @param {boolean} abort When true, abort the edit.\n         */\n        self.endEdit = function (abort) {\n            var cell = self.input.editCell,\n                y = cell.rowIndex;\n            function abortEdit() {\n                abort = true;\n            }\n            if (self.dispatchEvent('beforeendedit', {\n                    cell: cell,\n                    newValue: self.input.value,\n                    oldValue: cell.value,\n                    abort: abortEdit,\n                    input: self.input\n                })) { return false; }\n            if (self.input.value !== cell.value && !abort) {\n                self.changes[y] = self.changes[y] || {};\n                self.changes[y][cell.header.name] = self.input.value;\n                cell.data[cell.header.name] = self.input.value;\n                if (y === self.data.length) {\n                    if (self.dispatchEvent('newrow', {\n                            value: self.input.value,\n                            defaultValue: cell.value,\n                            aborted: abort,\n                            cell: cell,\n                            input: self.input\n                        })) { return false; }\n                    self.uId += 1;\n                    self.addRow(cell.data);\n                    self.createNewRowData();\n                }\n                self.draw(true);\n            }\n            document.body.removeChild(self.input);\n            self.intf.focus();\n            self.dispatchEvent('endedit', {\n                cell: cell,\n                value: self.input.value,\n                aborted: abort,\n                input: self.input\n            });\n            self.input = undefined;\n            return true;\n        };\n        /**\n         * Begins editing at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name beginEditAt\n         * @method\n         * @param {number} x The column index of the cell to edit.\n         * @param {number} y The row index of the cell to edit.\n         */\n        self.beginEditAt = function (x, y) {\n            if (!self.attributes.editable) { return; }\n            if (self.input) {\n                self.endEdit();\n            }\n            var cell = self.getVisibleCellByIndex(x, y),\n                s = self.getVisibleSchema(),\n                enumItems,\n                enu,\n                option,\n                valueInEnum;\n            if (!(cell && cell.header)) { return; }\n            //HACK for IE10, does not like literal enum\n            enu = cell.header['enum'];\n            if (self.dispatchEvent('beforebeginedit', {cell: cell})) { return false; }\n            self.scrollIntoView(x, y);\n            self.setActiveCell(x, y);\n            if (enu) {\n                self.input = document.createElement('select');\n            } else {\n                self.input = document.createElement(self.attributes.multiLine\n                    ? 'textarea' : 'input');\n            }\n            cell = self.getVisibleCellByIndex(x, y);\n            //HACK on mobile devices sometimes edit can begin without the cell being in view, I don't know how.\n            if (!cell) { return; }\n            if (enu) {\n                // add enums\n                if (typeof enu === 'function') {\n                    enumItems = enu.apply(self.intf, [{cell: cell}]);\n                } else if (Array.isArray(enu)) {\n                    enumItems = enu;\n                }\n                enumItems.forEach(function (e) {\n                    var i = document.createElement('option'),\n                        val,\n                        title;\n                    if (Array.isArray(e)) {\n                        val = e[0];\n                        title = e[1];\n                    } else {\n                        val = e;\n                        title = e;\n                    }\n                    if (val === cell.value) { valueInEnum = true; }\n                    i.value = val;\n                    i.innerHTML = title;\n                    self.input.appendChild(i);\n                });\n                if (!valueInEnum) {\n                    option = document.createElement('option');\n                    option.value = cell.value;\n                    option.innerHTML = cell.value;\n                    self.input.appendChild(option);\n                }\n                self.input.addEventListener('change', function () {\n                    self.endEdit();\n                    self.draw(true);\n                });\n            }\n            document.body.appendChild(self.input);\n            self.createInlineStyle(self.input, self.mobile ? 'canvas-datagrid-edit-mobile-input' : 'canvas-datagrid-edit-input');\n            self.input.style.position = 'absolute';\n            self.input.editCell = cell;\n            self.resizeEditInput();\n            self.input.style.zIndex = self.style.editCellZIndex;\n            self.input.style.fontSize = (parseInt(self.style.editCellFontSize, 10) * self.scale) + 'px';\n            self.input.value = cell.value;\n            self.input.focus();\n            self.input.addEventListener('click', self.stopPropagation);\n            self.input.addEventListener('dblclick', self.stopPropagation);\n            self.input.addEventListener('mouseup', self.stopPropagation);\n            self.input.addEventListener('mousedown', self.stopPropagation);\n            self.input.addEventListener('keydown', function (e) {\n                var nx = cell.columnIndex,\n                    ny = cell.rowIndex;\n                // esc\n                if (e.keyCode === 27) {\n                    self.endEdit(true);\n                    self.draw(true);\n                // enter\n                } else if (e.keyCode === 13\n                        && (!self.attributes.multiLine\n                            || (self.attributes.multiLine && e.shiftKey))) {\n                    self.endEdit();\n                    self.draw(true);\n                } else if (e.keyCode === 9) {\n                    e.preventDefault();\n                    if (!self.endEdit()) {\n                        return;\n                    }\n                    if (e.shiftKey) {\n                        nx -= 1;\n                    } else {\n                        nx += 1;\n                    }\n                    if (nx < 0) {\n                        nx = s.length - 1;\n                        ny -= 1;\n                    }\n                    if (nx > s.length - 1) {\n                        nx = 0;\n                        ny += 1;\n                    }\n                    if (ny < 0) {\n                        ny = self.data.length - 1;\n                    }\n                    if (ny > self.data.length - 1) {\n                        ny = 0;\n                    }\n                    self.scrollIntoView(nx, ny);\n                    self.beginEditAt(nx, ny);\n                }\n            });\n            self.dispatchEvent('beginedit', {cell: cell, input: self.input});\n        };\n        self.createInlineStyle = function (el, className) {\n            var css = {\n                'canvas-datagrid-context-menu-filter-input': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextFilterInputBackground,\n                    color: self.style.contextFilterInputColor,\n                    border: self.style.contextFilterInputBorder,\n                    borderRadius: self.style.contextFilterInputBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextFilterInputFontFamily,\n                    fontSize: self.style.contextFilterInputFontSize\n                },\n                'canvas-datagrid-context-menu-filter-button': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextFilterButtonBorder,\n                    borderRadius: self.style.contextFilterButtonBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFilterButtonFontFamily,\n                    fontSize: self.style.contextMenuFilterButtonFontSize\n                },\n                'canvas-datagrid-context-child-arrow': {\n                    cssFloat: 'right',\n                    color: self.style.childContextMenuArrowColor,\n                    fontSize: self.style.contextMenuChildArrowFontSize,\n                    fontFamily: self.style.contextMenuFontFamily,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-autocomplete': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    position: 'absolute',\n                    zIndex: 9999,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-autocomplete-item': {\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor\n                },\n                'canvas-datagrid-autocomplete-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-canvas': {\n                    position: 'absolute',\n                    zIndex: '-1'\n                },\n                'canvas-datagrid': {\n                    display: 'block'\n                },\n                'canvas-datagrid-control-input': {\n                    position: 'fixed',\n                    top: '-5px',\n                    left: '-5px',\n                    border: 'none',\n                    opacity: '0',\n                    cursor: 'pointer',\n                    width: '1px',\n                    height: '1px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize\n                },\n                'canvas-datagrid-edit-mobile-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 0',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.mobileEditFontFamily,\n                    fontSize: self.style.mobileEditFontSize,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-edit-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 ' + self.style.editCellPaddingLeft + 'px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.editCellFontFamily,\n                    fontSize: self.style.editCellFontSize,\n                    boxShadow: self.style.editCellBoxShadow,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-context-menu-item-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-context-menu-label': {\n                    margin: self.style.contextMenuLabelMargin,\n                    display: self.style.contextMenuLabelDisplay,\n                    minWidth: self.style.contextMenuLabelMinWidth,\n                    maxWidth: self.style.contextMenuLabelMaxWidth\n                },\n                'canvas-datagrid-context-menu-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-context-menu': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-invalid-search-regExp': {\n                    background: self.style.contextMenuFilterInvalidExpresion\n                }\n            };\n            if (css[className]) {\n                Object.keys(css[className]).map(function (prop) {\n                    el.style[prop] = css[className][prop];\n                });\n            }\n            return;\n        };\n        self.appendTo = function (e) {\n            self.parentNode = e;\n            self.setDom();\n        };\n        self.setDom = function () {\n            if (self.isChildGrid) {\n                self.parentGrid = self.parentNode.parentGrid;\n                self.ctx = self.parentGrid.context;\n                self.canvas = self.parentGrid.canvas;\n                self.controlInput = self.parentGrid.controlInput;\n                self.eventParent = self.canvas;\n            } else {\n                self.controlInput = self.controlInput || document.createElement('input');\n                self.controlInput.onblur = self.intf.blur;\n                self.createInlineStyle(self.controlInput, 'canvas-datagrid-control-input');\n                self.isChildGrid = false;\n                self.parentDOMNode = self.parentNode;\n                self.parentIsCanvas = /^canvas$/i.test(self.parentDOMNode.tagName);\n                if (self.parentIsCanvas) {\n                    self.canvas = self.parentDOMNode;\n                    self.parentDOMNode.appendChild(self.controlInput);\n                } else {\n                    self.canvas = document.createElement('canvas');\n                    self.parentDOMNode.appendChild(self.canvas);\n                    self.parentDOMNode.appendChild(self.controlInput);\n                }\n                self.createInlineStyle(self.canvas, 'canvas-datagrid');\n                self.ctx = self.canvas.getContext('2d');\n                self.ctx.textBaseline = 'alphabetic';\n                self.eventParent = self.canvas;\n            }\n            self.parentNodeStyle = self.canvas.style;\n            self.controlInput.setAttribute('readonly', true);\n            self.controlInput.addEventListener('blur', function (e) {\n                if (e.target !== self.canvas) {\n                    self.hasFocus = false;\n                }\n            });\n            self.eventParent.addEventListener('scroll', self.resize, false);\n            self.eventParent.addEventListener('touchstart', self.touchstart, false);\n            self.eventParent.addEventListener('mouseup', self.mouseup, false);\n            self.eventParent.addEventListener('mousedown', self.mousedown, false);\n            self.eventParent.addEventListener('dblclick', self.dblclick, false);\n            self.eventParent.addEventListener('click', self.click, false);\n            self.eventParent.addEventListener('mousemove', self.mousemove);\n            self.eventParent.addEventListener('wheel', self.scrollWheel, false);\n            self.canvas.addEventListener('contextmenu', self.contextmenuEvent, false);\n            self.controlInput.addEventListener('copy', self.copy);\n            self.controlInput.addEventListener('cut', self.cut);\n            self.controlInput.addEventListener('paste', self.paste);\n            self.controlInput.addEventListener('keypress', self.keypress, false);\n            self.controlInput.addEventListener('keyup', self.keyup, false);\n            self.controlInput.addEventListener('keydown', self.keydown, false);\n            window.addEventListener('resize', self.resize);\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/dom.js\n// module id = 8\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        // all methods here are exposed by intf\n        // to users\n        /**\n         * Converts a integer into a letter A - ZZZZZ...\n         * @memberof canvasDatagrid\n         * @name integerToAlpha\n         * @method\n         * @param {column} n The number to convert.\n         */\n        self.integerToAlpha = function (n) {\n            var ordA = 'a'.charCodeAt(0),\n                ordZ = 'z'.charCodeAt(0),\n                len = ordZ - ordA + 1,\n                s = '';\n            while (n >= 0) {\n                s = String.fromCharCode(n % len + ordA) + s;\n                n = Math.floor(n / len) - 1;\n            }\n            return s;\n        };\n        /**\n         * Inserts a new column before the specified index into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name insertColumn\n         * @method\n         * @param {column} c The column to insert into the schema.\n         * @param {number} index The index of the column to insert before.\n         */\n        self.insertColumn = function (c, index) {\n            var s = self.getSchema();\n            if (s.length < index) {\n                throw new Error('Index is beyond the length of the schema.');\n            }\n            self.validateColumn(c, s);\n            s.splice(index, 0, c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a column from the schema at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteColumn\n         * @tutorial schema\n         * @method\n         * @param {number} index The index of the column to delete.\n         */\n        self.deleteColumn = function (index) {\n            var s = self.getSchema();\n            // remove data matching this column name from data\n            self.data.forEach(function (row) {\n                delete row[s[index].name];\n            });\n            s.splice(index, 1);\n            self.intf.schema = s;\n        };\n        /**\n         * Adds a new column into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name addColumn\n         * @method\n         * @param {column} c The column to add to the schema.\n         */\n        self.addColumn = function (c) {\n            var s = self.getSchema();\n            self.validateColumn(c, s);\n            s.push(c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a row from the dataset at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteRow\n         * @method\n         * @param {number} index The index of the row to delete.\n         */\n        self.deleteRow = function (index) {\n            self.originalData.splice(index, 1);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Inserts a new row into the dataset before the specified index.\n         * @memberof canvasDatagrid\n         * @name insertRow\n         * @method\n         * @param {object} d data.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertRow = function (d, index) {\n            if (self.originalData.length < index) {\n                throw new Error('Index is beyond the length of the dataset.');\n            }\n            self.originalData.splice(index, 0, d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[index], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Adds a new row into the dataset.\n         * @memberof canvasDatagrid\n         * @name addRow\n         * @method\n         * @param {object} d data.\n         */\n        self.addRow = function (d) {\n            self.originalData.push(d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[self.originalData.length - 1], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Sets the height of a given row by index number.\n         * @memberof canvasDatagrid\n         * @name setRowHeight\n         * @method\n         * @param {number} rowIndex The index of the row to set.\n         * @param {number} height Height to set the row to.\n         */\n        self.setRowHeight = function (rowIndex, height) {\n            self.sizes.rows[self.data[rowIndex][self.uniqueId]] = height;\n            self.draw(true);\n        };\n        /**\n         * Sets the width of a given column by index number.\n         * @memberof canvasDatagrid\n         * @name setColumnWidth\n         * @method\n         * @param {number} colIndex The index of the column to set.\n         * @param {number} width Width to set the column to.\n         */\n        self.setColumnWidth = function (colIndex, width) {\n            var s = self.getSchema();\n            self.sizes.columns[s[colIndex][self.uniqueId]] = width;\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the width of the columns due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetColumnWidths\n         * @tutorial schema\n         * @method\n         */\n        self.resetColumnWidths = function () {\n            self.sizes.columns = {};\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the height of the rows due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetRowHeights\n         * @tutorial schema\n         * @method\n         */\n        self.resetRowHeights = function () {\n            self.sizes.rows = {};\n            self.draw(true);\n        };\n        /**\n         * Sets the value of the filter.\n         * @memberof canvasDatagrid\n         * @name setFilter\n         * @method\n         * @param {string} column Name of the column to filter.\n         * @param {string} value The value to filter for.\n         */\n        self.setFilter = function (column, value) {\n            function applyFilter() {\n                self.refreshFromOrigialData();\n                Object.keys(self.columnFilters).forEach(function (filter) {\n                    var header = self.getHeaderByName(column);\n                    if (!header) {\n                        return;\n                    }\n                    self.currentFilter = header.filter || self.filter(column.type || 'string');\n                    self.data = self.data.filter(function (row) {\n                        return self.currentFilter(row[filter], self.columnFilters[filter]);\n                    });\n                });\n                self.resize();\n                self.draw(true);\n            }\n            if (column === undefined && value === undefined) {\n                self.columnFilters = {};\n                return applyFilter();\n            }\n            if (column && (value === '' || value === undefined)) {\n                delete self.columnFilters[column];\n            } else {\n                self.columnFilters[column] = value;\n            }\n            applyFilter();\n        };\n        /**\n         * Returns the number of pixels to scroll down to line up with row rowIndex.\n         * @memberof canvasDatagrid\n         * @name findRowScrollTop\n         * @method\n         * @param {number} rowIndex The row index of the row to scroll find.\n         */\n        self.findRowScrollTop = function (rowIndex) {\n            var top = 0, x = 0, l = self.data.length,\n                bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                cellBorder = self.style.cellBorderWidth * bm;\n            if (!self.attributes.showNewRow) {\n                l -= 1;\n            }\n            if (rowIndex > l) {\n                throw new Error('Impossible row index');\n            }\n            while (x < rowIndex) {\n                top += (self.sizes.rows[self.data[x][self.uniqueId]] || self.style.cellHeight) + cellBorder;\n                x += 1;\n            }\n            //TODO: This is not super accurate, causes pageUp/Dn to not move around right\n            return top - (self.sizes.rows[self.data[rowIndex][self.uniqueId]] || self.style.cellHeight);\n        };\n        /**\n         * Returns the number of pixels to scroll to the left to line up with column columnIndex.\n         * @memberof canvasDatagrid\n         * @name findColumnScrollLeft\n         * @method\n         * @param {number} columnIndex The column index of the column to find.\n         */\n        self.findColumnScrollLeft = function (columnIndex) {\n            var left = 0, y = 0, s = self.getSchema(), l = s.length - 1;\n            if (columnIndex > l) {\n                throw new Error('Impossible column index');\n            }\n            while (y < columnIndex) {\n                left += self.sizes.columns[s[y][self.uniqueId]] || s[y].width || self.style.cellWidth;\n                y += 1;\n            }\n            return left;\n        };\n        /**\n         * Scrolls the cell at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name gotoCell\n         * @method\n         * @param {number} x The column index of the cell to scroll to.\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoCell = function (x, y) {\n            if (x !== undefined) {\n                self.scrollBox.scrollLeft = self.findColumnScrollLeft(x);\n            }\n            if (y !== undefined) {\n                self.scrollBox.scrollTop = self.findRowScrollTop(y);\n            }\n        };\n        /**\n         * Scrolls the row y.\n         * @memberof canvasDatagrid\n         * @name gotoRow\n         * @method\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoRow = function (y) {\n            self.gotoCell(0, y);\n        };\n        /**\n         * Scrolls the cell at cell x, row y into view if it is not already.\n         * @memberof canvasDatagrid\n         * @name scrollIntoView\n         * @method\n         * @param {number} x The column index of the cell to scroll into view.\n         * @param {number} y The row index of the cell to scroll into view.\n         */\n        self.scrollIntoView = function (x, y) {\n            if (self.visibleCells.filter(function (cell) {\n                    return (cell.rowIndex === y || y === undefined)\n                        && (cell.columnIndex === x || x === undefined)\n                        && cell.x > 0\n                        && cell.y > 0\n                        && cell.x + cell.width < self.width\n                        && cell.y + cell.height < self.height;\n                }).length === 0) {\n                self.gotoCell(x, y);\n            }\n        };\n        /**\n         * Sets the active cell. Requires redrawing.\n         * @memberof canvasDatagrid\n         * @name setActiveCell\n         * @method\n         * @param {number} x The column index of the cell to set active.\n         * @param {number} y The row index of the cell to set active.\n         */\n        self.setActiveCell = function (x, y) {\n            self.activeCell = {\n                rowIndex: y,\n                columnIndex: x\n            };\n        };\n        /**\n         * Removes the selection.\n         * @memberof canvasDatagrid\n         * @name selectNone\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectNone = function (dontDraw) {\n            self.selections = [];\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Selects every visible cell.\n         * @memberof canvasDatagrid\n         * @name selectAll\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectAll = function (dontDraw) {\n            self.selectArea({\n                top: 0,\n                left: 0,\n                right: self.getVisibleSchema().length - 1,\n                bottom: self.data.length - 1\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Returns true if the selected columnIndex is selected on every row.\n         * @memberof canvasDatagrid\n         * @name isColumnSelected\n         * @method\n         * @param {number} columnIndex The column index to check.\n         */\n        self.isColumnSelected = function (columnIndex) {\n            var colIsSelected = true;\n            self.data.forEach(function (row, rowIndex) {\n                if (!self.selections[rowIndex] || self.selections[rowIndex].indexOf(self.orders.columns[columnIndex]) === -1) {\n                    colIsSelected = false;\n                }\n            });\n            return colIsSelected;\n        };\n        /**\n         * Runs the defined method on each selected cell.\n         * @memberof canvasDatagrid\n         * @name forEachSelectedCell\n         * @method\n         * @param {number} fn The function to execute.  The signature of the function is: (data, rowIndex, columnName).\n         * @param {number} expandToRow When true the data in the array is expanded to the entire row.\n         */\n        self.forEachSelectedCell = function (fn, expandToRow) {\n            var d = [], s = expandToRow ? self.getSchema() : self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    if (col === -1 || !s[col]) { return; }\n                    fn(self.data, index, s[col].name);\n                });\n            });\n        };\n        /**\n         * Selects a column.\n         * @memberof canvasDatagrid\n         * @name selectColumn\n         * @method\n         * @param {number} columnIndex The column index to select.\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the column.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the column.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectColumn = function (columnIndex, ctrl, shift, supressEvent) {\n            var s, e, x;\n            function addCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) === -1) {\n                        self.selections[rowIndex].push(i);\n                    }\n                });\n            }\n            function removeCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) !== -1) {\n                        self.selections[rowIndex].splice(self.selections[rowIndex].indexOf(i), 1);\n                    }\n                });\n            }\n            if (shift) {\n                if (!self.activeCell) { return; }\n                s = Math.min(self.activeCell.columnIndex, columnIndex);\n                e = Math.max(self.activeCell.columnIndex, columnIndex);\n                for (x = s; e > x; x += 1) {\n                    addCol(x);\n                }\n            }\n            if (!ctrl && !shift) {\n                self.selections = [];\n                self.activeCell.columnIndex = columnIndex;\n                self.activeCell.rowIndex = self.scrollIndexTop;\n            }\n            if (ctrl && self.isColumnSelected(columnIndex)) {\n                removeCol(columnIndex);\n            } else {\n                addCol(columnIndex);\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.getSelectionBounds()\n            });\n        };\n        /**\n         * Selects a row.\n         * @memberof canvasDatagrid\n         * @name selectRow\n         * @method\n         * @param {number} rowIndex The row index to select.\n         * @param {boolean} ctrl When true, behaves as if you were holding control/command when you clicked the row.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the row.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectRow = function (rowIndex, ctrl, shift, supressEvent) {\n            var x, st, en, s = self.getVisibleSchema();\n            function addRow(ri) {\n                self.selections[ri] = [];\n                self.selections[ri].push(-1);\n                s.forEach(function (col, index) {\n                    self.selections[ri].push(index);\n                });\n            }\n            if (self.dragAddToSelection === false || self.dragObject === undefined) {\n                if (self.selections[rowIndex] && self.selections[rowIndex].length - 1 === s.length) {\n                    if (ctrl) {\n                        self.selections[rowIndex] = [];\n                        return;\n                    }\n                }\n            }\n            if (self.dragAddToSelection === true || self.dragObject === undefined) {\n                if (shift && self.dragObject === undefined) {\n                    if (!self.activeCell) { return; }\n                    st = Math.min(self.activeCell.rowIndex, rowIndex);\n                    en = Math.max(self.activeCell.rowIndex, rowIndex);\n                    for (x = st; en >= x; x += 1) {\n                        addRow(x);\n                    }\n                } else {\n                    addRow(rowIndex);\n                }\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Collapse a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name collapseTree\n         * @method\n         * @param {number} index The index of the row to collapse.\n         */\n        self.collapseTree = function (rowIndex) {\n            var rowId = self.data[rowIndex][self.uniqueId];\n            self.dispatchEvent('collapsetree', {\n                childGrid: self.childGrids[rowId],\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId].blur();\n            self.openChildren[rowId].dispose();\n            delete self.openChildren[rowId];\n            delete self.sizes.trees[rowId];\n            delete self.childGrids[rowId];\n            self.dispatchEvent('resizerow', {\n                cellHeight: self.style.cellHeight\n            });\n            self.resize(true);\n            self.draw(true);\n        };\n        /**\n         * Expands a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name expandTree\n         * @method\n         * @param {number} index The index of the row to expand.\n         */\n        self.expandTree = function (rowIndex) {\n            var trArgs = self.args.treeGridAttributes || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth,\n                rowId = self.data[rowIndex][self.uniqueId],\n                h = self.sizes.trees[rowId] || self.style.treeGridHeight,\n                treeGrid;\n            if (!self.childGrids[rowId]) {\n                trArgs.debug = self.attributes.debug;\n                trArgs.name = self.attributes.saveAppearance ? self.attributes.name + 'tree' + rowId : undefined;\n                trArgs.style = trArgs.style || self.style;\n                trArgs.parentNode = {\n                    parentGrid: self.intf,\n                    nodeType: 'canvas-datagrid-tree',\n                    offsetHeight: h,\n                    offsetWidth: self.width - rowHeaderCellWidth,\n                    header: { width: self.width - rowHeaderCellWidth },\n                    offsetLeft: rowHeaderCellWidth,\n                    offsetTop: columnHeaderCellHeight,\n                    offsetParent: self.intf.parentNode,\n                    parentNode: self.intf.parentNode,\n                    style: 'tree',\n                    data: self.data[rowIndex]\n                };\n                treeGrid = self.createGrid(trArgs);\n                self.childGrids[rowId] = treeGrid;\n            }\n            treeGrid = self.childGrids[rowId];\n            treeGrid.visible = true;\n            self.dispatchEvent('expandtree', {\n                treeGrid: treeGrid,\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId] = treeGrid;\n            self.sizes.trees[rowId] = h;\n            self.dispatchEvent('resizerow', {height: self.style.cellHeight});\n            self.resize(true);\n        };\n        /**\n         * Toggles tree grid open and close by row index.\n         * @memberof canvasDatagrid\n         * @name toggleTree\n         * @method\n         * @param {number} index The index of the row to toggle.\n         */\n        self.toggleTree = function (rowIndex) {\n            var i = self.openChildren[self.data[rowIndex][self.uniqueId]];\n            if (i) {\n                return self.collapseTree(rowIndex);\n            }\n            self.expandTree(rowIndex);\n        };\n        /**\n         * Returns a header from the schema by name.\n         * @memberof canvasDatagrid\n         * @name getHeaderByName\n         * @tutorial schema\n         * @method\n         * @returns {header} header with the selected name, or undefined.\n         * @param {string} name The name of the column to resize.\n         */\n        self.getHeaderByName = function (name) {\n            var x, i = self.getSchema();\n            for (x = 0; x < i.length; x += 1) {\n                if (i[x].name === name) {\n                    return i[x];\n                }\n            }\n        };\n        /**\n         * Resizes a column to fit the longest value in the column. Call without a value to resize all columns.\n         * Warning, can be slow on very large record sets (1m records ~3-5 seconds on an i7).\n         * @memberof canvasDatagrid\n         * @name fitColumnToValues\n         * @method\n         * @param {string} name The name of the column to resize.\n         */\n        self.fitColumnToValues = function (name, internal) {\n            if (!self.canvas) { return; }\n            self.sizes.columns[name === 'cornerCell' ? name : self.getHeaderByName(name)[self.uniqueId]]\n                = self.findColumnMaxTextLength(name);\n            if (!internal) {\n                self.resize();\n                self.draw(true);\n            }\n        };\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @overload\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {number} columnIndex The column index of the cell to check.\n         * @param {number} rowIndex The row index of the cell to check.\n         */\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {cell} cell The cell to check for.  Alternatively you can pass an object { x: <x-pixel-value>, y: <y-pixel-value> }.\n         */\n        self.isCellVisible = function (cell, rowIndex) {\n            // overload\n            if (rowIndex !== undefined) {\n                return self.visibleCells.filter(function (c) {\n                    return c.columnIndex === cell && c.rowIndex === rowIndex;\n                }).length > 0;\n            }\n            var x, l = self.visibleCells.length;\n            for (x = 0; x < l; x += 1) {\n                if (cell.x === self.visibleCells[x].x && cell.y === self.visibleCells[x].y) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n         * Sets the order of the data.\n         * @memberof canvasDatagrid\n         * @name order\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} columnName Name of the column to be sorted.\n         * @param {string} direction `asc` for ascending or `desc` for descending.\n         * @param {function} [sortFunction] When defined, override the default sorting method defined in the column's schema and use this one.\n         * @param {bool} [dontSetStorageData] Don't store this setting for future use.\n         */\n        self.order = function (columnName, direction, sortFunction, dontSetStorageData) {\n            var f,\n                c = self.getSchema().filter(function (col) {\n                    return col.name === columnName;\n                });\n            if (self.dispatchEvent('beforesortcolumn', {name: columnName, direction: direction})) { return; }\n            self.orderBy = columnName;\n            if (c.length === 0) {\n                throw new Error('Cannot sort.  No such column name');\n            }\n            f = sortFunction || self.sorters[c[0].type];\n            if (!f && c[0].type !== undefined) {\n                console.warn('Cannot sort type \"%s\" falling back to string sort.', c[0].type);\n            }\n            self.data = self.data.sort(typeof f === 'function' ? f(columnName, direction) : self.sorters.string);\n            self.dispatchEvent('sortcolumn', {name: columnName, direction: direction});\n            self.draw(true);\n            if (dontSetStorageData) { return; }\n            self.setStorageData();\n        };\n        self.isInGrid = function (e) {\n            if (e.x < 0\n                    || e.x > self.width\n                    || e.y < 0\n                    || e.y > self.height) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Moves the current selection relative to the its current position.  Note: this method does not move the selected data, just the selection itself.\n         * @memberof canvasDatagrid\n         * @name moveSelection\n         * @method\n         * @param {number} offsetX The number of columns to offset the selection.\n         * @param {number} offsetY The number of rows to offset the selection.\n         */\n        self.moveSelection = function (offsetX, offsetY) {\n            var sel = [];\n            self.selections.forEach(function (row, rowIndex) {\n                sel[rowIndex + offsetY] = [];\n                row.forEach(function (colIndex) {\n                    sel[rowIndex + offsetY].push(colIndex + offsetX);\n                });\n            });\n            self.selections = sel;\n        };\n        /**\n         * Moves data in the provided selection to another position in the grid.  Moving data off the edge of the schema (columns/x) will truncate data.\n         * @memberof canvasDatagrid\n         * @name moveTo\n         * @method\n         * @param {array} sel 2D array representing selected rows and columns.  `canvasDatagrid.selections` is in this format and can be used here.\n         * @param {number} x The column index to start inserting the selection at.\n         * @param {number} y The row index to start inserting the selection at.\n         */\n        self.moveTo = function (sel, x, y) {\n            var d = self.getSelectedData(),\n                s = self.getVisibleSchema(),\n                l = sel.length,\n                xi,\n                yi = y - 1;\n            sel.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) { return; }\n                row.forEach(function (col) {\n                    if (!s[col]) { return; }\n                    self.data[index][s[col].name] = null;\n                });\n            });\n            sel.forEach(function (row, index) {\n                yi += 1;\n                xi = x - 1;\n                row.forEach(function (col, cidx) {\n                    xi += 1;\n                    if (col === -1\n                            || !s[xi]\n                            || !s[col]\n                            || self.data.length - 1 < yi\n                            || yi < 0) { return; }\n                    self.data[yi][s[xi].name] = d[index][s[col].name];\n                });\n            });\n        };\n        /**\n         * Checks if a given column is visible.\n         * @memberof canvasDatagrid\n         * @name isColumnVisible\n         * @method\n         * @returns {boolean} When true, the column is visible.\n         * @param {number} columnIndex Column index.\n         */\n        self.isColumnVisible = function (columnIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === columnIndex;\n            }).length > 0;\n        };\n        /**\n         * Checks if a given row is visible.\n         * @memberof canvasDatagrid\n         * @name isRowVisible\n         * @method\n         * @returns {boolean} When true, the row is visible.\n         * @param {number} rowIndex Row index.\n         */\n        self.isRowVisible = function (rowIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.rowIndex === rowIndex;\n            }).length > 0;\n        };\n        /**\n         * Gets the cell at columnIndex and rowIndex.\n         * @memberof canvasDatagrid\n         * @name getVisibleCellByIndex\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Column index.\n         * @param {number} y Row index.\n         */\n        self.getVisibleCellByIndex = function (x, y) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === x && c.rowIndex === y;\n            })[0];\n        };\n        /**\n         * Gets the cell at grid pixel coordinate x and y.  Author's note.  This function ties drawing and events together.  This is a very complex function and is core to the component.\n         * @memberof canvasDatagrid\n         * @name getCellAt\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Number of pixels from the left.\n         * @param {number} y Number of pixels from the top.\n         */\n        self.getCellAt = function (x, y, useTouchScrollZones) {\n            function getBorder(entitiy) {\n                if (entitiy.x + entitiy.width - (self.attributes.borderResizeZone * 0.4) < x && entitiy.x + entitiy.width + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'r';\n                }\n                if (entitiy.x - (self.attributes.borderResizeZone * 0.4) < x && entitiy.x + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'l';\n                }\n                if (entitiy.y + entitiy.height - (self.attributes.borderResizeZone * 0.4) < y && entitiy.y + entitiy.height + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 'b';\n                }\n                if (entitiy.y - (self.attributes.borderResizeZone * 0.4) < y && entitiy.y + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 't';\n                }\n            }\n            if (!self.visibleCells) { return; }\n            var border,\n                tsz = useTouchScrollZones ? self.attributes.touchScrollZone : 0,\n                moveMode = self.attributes.borderDragBehavior === 'move',\n                i,\n                l = self.visibleCells.length,\n                moveBorder,\n                xBorderBehavior = moveMode ? self.cursorGrab : 'ew-resize',\n                yBorderBehavior = moveMode ? self.cursorGrab : 'ns-resize',\n                cell,\n                entitiy;\n            if (!self.visibleCells || !self.visibleCells.length) { return; }\n            self.hasFocus = true;\n            if (!(y < self.height\n                && y > 0\n                && x < self.width\n                && x > 0)) {\n                self.hasFocus = false;\n                return {\n                    dragContext: 'inherit',\n                    context: 'inherit'\n                };\n            }\n            for (i = 0; i < l; i += 1) {\n                cell = self.visibleCells[i];\n                // interactive dimensions of the cell.  used for touch \"over size\" zones\n                entitiy = {\n                    x: cell.x,\n                    y: cell.y,\n                    height: cell.height,\n                    width: cell.width\n                };\n                if (useTouchScrollZones && /(vertical|horizontal)-scroll-/.test(cell.style)) {\n                    entitiy.x -= tsz;\n                    entitiy.y -= tsz;\n                    entitiy.height += tsz;\n                    entitiy.width += tsz;\n                }\n                if (entitiy.x - self.style.cellBorderWidth < x\n                        && entitiy.x + entitiy.width + self.style.cellBorderWidth > x\n                        && entitiy.y - self.style.cellBorderWidth < y\n                        && entitiy.y + entitiy.height + self.style.cellBorderWidth > y) {\n                    if (/frozen-row-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'row-resize';\n                        return cell;\n                    }\n                    if (/frozen-column-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'col-resize';\n                        return cell;\n                    }\n                    if (/selection-handle-/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'crosshair';\n                        return cell;\n                    }\n                    if (/vertical-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'vertical-scroll-box';\n                        cell.context = 'vertical-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isVerticalScrollBar = true;\n                        if (y > self.scrollBox.box.v.y + self.scrollBox.scrollBoxHeight) {\n                            cell.dragContext = 'vertical-scroll-bottom';\n                            cell.context = 'vertical-scroll-bottom';\n                        } else if (y < self.scrollBox.box.v.y) {\n                            cell.dragContext = 'vertical-scroll-top';\n                            cell.context = 'vertical-scroll-top';\n                        }\n                        self.cursor = 'default';\n                        return cell;\n                    }\n                    if (/horizontal-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'horizontal-scroll-box';\n                        cell.context = 'horizontal-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isHorizontalScrollBar = true;\n                        if (x > self.scrollBox.box.h.x + self.scrollBox.scrollBoxWidth) {\n                            cell.dragContext = 'horizontal-scroll-right';\n                            cell.context = 'horizontal-scroll-right';\n                        } else if (x < self.scrollBox.box.h.x) {\n                            cell.dragContext = 'horizontal-scroll-left';\n                            cell.context = 'horizontal-scroll-left';\n                        }\n                        self.cursor = 'default';\n                        return cell;\n                    }\n                    border = getBorder(entitiy);\n                    // check if the border of this cell is the border of the selection and if so show move cursor in move mode\n                    moveBorder = moveMode && cell.selectionBorder && cell.selectionBorder.indexOf(border) !== -1;\n                    if (['l', 'r'].indexOf(border) !== -1\n                            && (self.attributes.allowColumnResize || moveBorder)\n                            && ((self.attributes.allowColumnResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && ((self.attributes.allowRowHeaderResize && (cell.isRowHeader || cell.isCorner)) || !(cell.isRowHeader && cell.isCorner))) {\n                        if (((cell.isColumnHeader || cell.isCorner) || (self.attributes.allowColumnResizeFromCell && cell.isNormal)) && border === 'r') {\n                            cell.context = 'ew-resize';\n                            cell.dragContext = 'ew-resize';\n                            return cell;\n                        }\n                        if (!(cell.isColumnHeader || cell.isCorner) && moveBorder) {\n                            cell.context = xBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (['t', 'b'].indexOf(border) !== -1\n                            && cell.rowIndex > -1\n                            && (self.attributes.allowRowResize || moveBorder)\n                            && ((self.attributes.allowRowResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && !cell.isColumnHeader) {\n                        if (((cell.isRowHeader || cell.isCorner) || (self.attributes.allowRowResizeFromCell && cell.isNormal)) && border === 'b') {\n                            cell.context = 'ns-resize';\n                            cell.dragContext = 'ns-resize';\n                            return cell;\n                        }\n                        if (!(cell.isRowHeader || cell.isCorner) && moveBorder) {\n                            cell.context = yBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (cell.style === 'columnHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'column-reorder';\n                        return cell;\n                    }\n                    if (cell.style === 'rowHeaderCell') {\n                        if ((self.attributes.rowGrabZoneSize + (cell.y - self.style.cellBorderWidth) < y)\n                                || !self.attributes.allowRowReordering) {\n                            cell.dragContext = 'cell';\n                            cell.context = 'cell';\n                        } else {\n                            cell.context = self.cursorGrab;\n                            cell.dragContext = 'row-reorder';\n                        }\n                        return cell;\n                    }\n                    if (cell.isGrid) {\n                        self.hasFocus = false;\n                        cell.dragContext = 'cell-grid';\n                        cell.context = 'cell-grid';\n                        return cell;\n                    }\n                    if (cell.style === 'tree-grid') {\n                        self.hasFocus = false;\n                        cell.dragContext = 'tree';\n                        cell.context = 'tree';\n                        return cell;\n                    }\n                    cell.dragContext = 'cell';\n                    cell.context = 'cell';\n                    return cell;\n                }\n            }\n            self.hasFocus = true;\n            self.cursor = 'default';\n            return {\n                dragContext: 'background',\n                context: 'background',\n                style: 'background',\n                isBackground: true\n            };\n        };\n        /**\n         * Gets the bounds of current selection. \n         * @returns {rect} selection.\n         * @memberof canvasDatagrid\n         * @name getSelectionBounds\n         * @method\n         */\n        self.getSelectionBounds = function () {\n            var low = {x: Infinity, y: Infinity},\n                high = {x: -Infinity, y: -Infinity};\n            self.data.forEach(function (row, rowIndex) {\n                var maxCol, minCol;\n                if (self.selections[rowIndex] && self.selections[rowIndex].length) {\n                    low.y = rowIndex < low.y ? rowIndex : low.y;\n                    high.y = rowIndex > high.y ? rowIndex : high.y;\n                    maxCol = Math.max.apply(null, self.selections[rowIndex]);\n                    minCol = Math.min.apply(null, self.selections[rowIndex]);\n                    low.x = minCol < low.x ? minCol : low.x;\n                    high.x = maxCol > high.x ? maxCol : high.x;\n                }\n            });\n            return {\n                top: low.y,\n                left: low.x,\n                bottom: high.y,\n                right: high.x\n            };\n        };\n        /**\n         * Returns an auto generated schema based on data structure.\n         * @memberof canvasDatagrid\n         * @name getSchemaFromData\n         * @method\n         * @tutorial schema\n         * @returns {schema} schema A schema based on the first item in the data array.\n         */\n        self.getSchemaFromData = function () {\n            return Object.keys(self.data[0] || {' ': ''}).map(function mapEachSchemaColumn(key, index) {\n                var type = self.getBestGuessDataType(key),\n                    i = {\n                        name: key,\n                        title: isNaN(parseInt(key, 10)) ? key : self.integerToAlpha(key).toUpperCase(),\n                        index: index,\n                        type: type,\n                        filter: self.filter(type)\n                    };\n                if (key === self.uniqueId) {\n                    i.hidden = true;\n                }\n                if (self.storedSettings\n                        && self.storedSettings.visibility\n                        && self.storedSettings.visibility[i.name] !== undefined) {\n                    i.hidden = !self.storedSettings.visibility[i.name];\n                }\n                i[self.uniqueId] = self.getSchemaNameHash(key);\n                return i;\n            });\n        };\n        /**\n         * Clears the change log grid.changes that keeps track of changes to the data set.\n         * This does not undo changes or alter data it is simply a convince array to keep\n         * track of changes made to the data since last this method was called.\n         * @memberof canvasDatagrid\n         * @name clearChangeLog\n         * @method\n         */\n        self.clearChangeLog = function () {\n            self.changes = [];\n        };\n        /**\n         * Selects an area of the grid.\n         * @memberof canvasDatagrid\n         * @name selectArea\n         * @method\n         * @param {rect} bounds A rect object representing the selected values.\n         */\n        self.selectArea = function (bounds, ctrl) {\n            self.selectionBounds = bounds || self.selectionBounds;\n            var x, y, s = self.getSchema();\n            if (!ctrl) {\n                self.selections = [];\n            }\n            if (self.selectionBounds.top < -1\n                    || self.selectionBounds.bottom > self.data.length\n                    || self.selectionBounds.left < -1\n                    || self.selectionBounds.right > s.length) {\n                throw new Error('Impossible selection area');\n            }\n            for (x = self.selectionBounds.top; x <= self.selectionBounds.bottom; x += 1) {\n                self.selections[x] = [];\n                for (y = self.selectionBounds.left; y <= self.selectionBounds.right; y += 1) {\n                    if (self.selections[x].indexOf(y) === -1) {\n                        self.selections[x].push(y);\n                    }\n                }\n            }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Returns the maximum text width for a given column by column name.\n         * @memberof canvasDatagrid\n         * @name findColumnMaxTextLength\n         * @method\n         * @returns {number} The number of pixels wide the maximum width value in the selected column.\n         * @param {string} name The name of the column to calculate the value's width of.\n         */\n        self.findColumnMaxTextLength = function (name) {\n            var m = -Infinity;\n            if (name === 'cornerCell') {\n                self.ctx.font = self.style.rowHeaderCellFont;\n                return self.ctx.measureText((self.data.length + (self.attributes.showNewRow ? 1 : 0)).toString()).width\n                    + self.style.autosizePadding + self.style.autosizeHeaderCellPadding\n                    + self.style.rowHeaderCellPaddingRight\n                    + self.style.rowHeaderCellPaddingLeft\n                    + (self.attributes.tree ? self.style.treeArrowWidth\n                        + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight : 0);\n            }\n            self.getSchema().forEach(function (col) {\n                if (col.name !== name) { return; }\n                self.ctx.font = self.style.columnHeaderCellFont;\n                var t = self.ctx.measureText(col.title || col.name).width\n                    + self.style.headerCellPaddingRight\n                    + self.style.headerCellPaddingLeft;\n                m = t > m ? t : m;\n            });\n            self.data.forEach(function (row) {\n                self.ctx.font = self.style.cellFont;\n                var t = self.ctx.measureText(row[name]).width\n                    + self.style.cellPaddingRight\n                    + self.style.cellPaddingLeft + self.style.cellAutoResizePadding;\n                m = t > m ? t : m;\n            });\n            return m;\n        };\n        /**\n         * Gets the total width of all header columns.\n         * @memberof canvasDatagrid\n         * @name getHeaderWidth\n         * @method\n         */\n        self.getHeaderWidth = function () {\n            return self.getVisibleSchema().reduce(function (total, header) {\n                return total + (header.width || self.style.cellWidth);\n            }, 0);\n        };\n        self.formatters.string = function cellFormatterString(e) {\n            return e.cell.value !== undefined ? e.cell.value : '';\n        };\n        self.formatters.rowHeaderCell = self.formatters.string;\n        self.formatters.headerCell = self.formatters.string;\n        self.formatters.number = self.formatters.string;\n        self.formatters.int = self.formatters.string;\n        self.formatters.html = self.formatters.string;\n        self.sorters.string = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (a[columnName] === undefined || a[columnName] === null) {\n                    return 1;\n                }\n                if (b[columnName] === undefined || b[columnName] === null) {\n                    return 0;\n                }\n                if (asc) {\n                    if (!a[columnName].localeCompare) { return 1; }\n                    return a[columnName].localeCompare(b[columnName]);\n                }\n                if (!b[columnName].localeCompare) { return 1; }\n                return b[columnName].localeCompare(a[columnName]);\n            };\n        };\n        self.sorters.number = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return a[columnName] - b[columnName];\n                }\n                return b[columnName] - a[columnName];\n            };\n        };\n        self.sorters.date = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return new Date(a[columnName]).getTime()\n                        - new Date(b[columnName]).getTime();\n                }\n                return new Date(b[columnName]).getTime()\n                        - new Date(a[columnName]).getTime();\n            };\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/publicMethods.js\n// module id = 9\n// module chunks = 0"],"sourceRoot":""}