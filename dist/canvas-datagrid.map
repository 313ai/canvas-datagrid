{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///canvas-datagrid.js","webpack:///webpack/bootstrap 9ad391b55d72e1b9a082","webpack:///./lib/defaults.js","webpack:///./lib/main.js","webpack:///./lib/component.js","webpack:///./lib/draw.js","webpack:///./lib/events.js","webpack:///./lib/touch.js","webpack:///./lib/intf.js","webpack:///./lib/contextMenu.js","webpack:///./lib/dom.js","webpack:///./lib/publicMethods.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","undefined","self","defaults","attributes","styles","apply","context","component","Grid","args","isComponent","intf","eval","createGrid","forEach","parentNode","createShadowRoot","shadowRoot","attachShadow","mode","debug","init","Array","slice","arguments","window","HTMLElement","create","customElements","observedAttributes","getObservableAttributes","disconnectedCallback","attributeChangedCallback","connectedCallback","adoptedCallback","canvasDatagrid","require","document","createElement","appendChild","hyphenateProperty","prop","cust","char","toUpperCase","toLowerCase","getDefaultItem","base","item","filter","applyComponentStyle","supressChangeAndDrawEvents","cStyle","getComputedStyle","defs","computedStyle","def","val","getPropertyValue","setStyleProperty","typeMap","resize","dispatchEvent","style","data","strData","JSON","parse","e","Error","schema","strSchema","number","strNum","parseInt","isNaN","boolean","strBool","test","string","str","attrs","attr","push","connected","observe","attrName","oldVal","newVal","tfn","requestAnimationFrame","addEventListener","observer","MutationObserver","mutations","checkInnerHTML","checkStyle","mutation","attributeName","target","nodeName","addedNodes","length","type","innerHTML","characterData","childList","subtree","querySelectorAll","el","drawPerfLine","w","h","x","y","perfArr","arrIndex","max","color","useAbs","r","canvasOffsetLeft","canvasOffsetTop","ctx","beginPath","moveTo","cx","cy","Math","abs","lineTo","strokeStyle","stroke","drawOnAllImagesLoaded","loaded","keys","htmlImageCache","html","complete","draw","drawHtml","cell","img","v","formattedValue","height","width","drawImage","Image","onload","src","btoa","drawOrderByArrow","mt","columnHeaderOrderByArrowMarginTop","scale","ml","columnHeaderOrderByArrowMarginLeft","mr","columnHeaderOrderByArrowMarginRight","aw","columnHeaderOrderByArrowWidth","ah","columnHeaderOrderByArrowHeight","fillStyle","columnHeaderOrderByArrowColor","columnHeaderOrderByArrowBorderColor","orderDirection","fill","drawTreeArrow","treeArrowMarginTop","treeArrowMarginRight","treeArrowMarginLeft","treeArrowWidth","treeArrowHeight","treeArrowColor","treeArrowBorderColor","openChildren","uniqueId","radiusRect","radius","b","quadraticCurveTo","fillRect","strokeRect","fillText","text","fillCircle","arc","PI","strokeCircle","clipFrozenArea","lastFrozenColumnPixel","lastFrozenRowPixel","clip","fillHandle","selectionHandleType","strokeHandle","addselectionHandle","pos","hw","selectionHandleSize","tr","br","tl","bl","addBorderLine","t","addEllipsis","ellipsisCache","measureText","value","drawText","paddingLeft","paddingTop","paddingRight","paddingBottom","vPos","hPos","orderByArrowWidth","fontHeight","horizontalAlignment","verticalAlignment","getFrozenColumnsWidth","column","getVisibleSchema","min","frozenColumn","orders","columns","sizes","cellWidth","perfCounters","drawCount","perfWindowSize","entityCount","scrollDebugCounters","touchPPSCounters","internal","createHandlesOverlayArray","allowMovingSelection","mobile","selectionBorderTop","selectionBorderRight","selectionHandles","selectionHandle","selectionBorderLeft","selectionBorderBottom","selectionHandleBehavior","createBorderOverlayArray","drawArray","propPrefix","offsetPoint","selectionBorder","isRowHeader","selections","rowIndex","indexOf","columnIndex","isHeader","drawCell","rowOrderIndex","header","headerIndex","columnOrderIndex","cellGridAttributes","cellStyle","isCorner","isColumnHeader","selected","hovered","hovers","active","activeCell","isGrid","activeHeader","rows","f","formatters","orderByArrowSize","treeArrowSize","ev","row","cellBorderWidth","visibleRows","nodeType","offsetTop","offsetLeft","scrollTop","scrollBox","scrollLeft","cellHeight","offsetWidth","offsetHeight","offsetParent","isHeaderCellCap","rowOpen","sortColumnIndex","sortRowIndex","isNormal","gridId","parentGrid","title","userHeight","rowHeight","userWidth","cornerCell","visibleCells","unshift","lineWidth","cellHeightWithChildGrid","checkScrollHeight","cellWidthWithChildGrid","rd","save","tree","showRowNumbers","childGrids","saveAppearance","cellGridHeight","grid","visible","orderBy","font","console","warn","toString","columnFilters","filterTextPrefix","aCell","selectionBorders","movingSelection","moveBorders","moveOffset","restore","bc","drawRowHeader","rowData","index","a","showRowHeaders","rowHeaderCell","rowHeaderCellWidth","drawRow","treeHeight","rowSansTreeHeight","g","trees","allowFreezingColumns","frozenColumnWidths","scrollIndexLeft","scrollIndexRight","scrollPixelRight","scrollPixelLeft","treeGrid","scrollBarWidth","rowHeaders","visibleRowHeights","isChildGrid","borderCollapse","u","currentCell","columnHeaderCellHeight","getColumnHeaderCellHeight","getRowHeaderCellWidth","performance","now","createRowOrders","devicePixelRatio","gridBackgroundColor","ln","frozenRow","allowFreezingRows","frozenMarkerBorderWidth","frozenMarkerWidth","snapToRow","scrollPixelTop","scrollIndexTop","scrollIndexBottom","scrollPixelBottom","showNewRow","newRow","cl","selectionMode","activeCellOverlayBorderWidth","activeCellOverlayBorderColor","getHeaderWidth","drawHeaderColumnRange","start","end","order","columnHeaderCell","nonFrozenHeaderWidth","rArgs","rhIndex","showColumnHeaders","columnHeaderCellBorderWidth","isHeaderCell","endCap","my","mx","xHover","yHover","frozenMarkerHoverColor","frozenMarkerColor","frozenMarkerHoverBorderColor","frozenMarkerBorderColor","freezeMarkerPosition","frozenMarkerActiveColor","frozenMarkerActiveBorderColor","dragMode","dsb","selectionOverlayBorderWidth","selectionOverlayBorderColor","selectionHandleBorderWidth","selectionHandleBorderColor","selectionHandleColor","az","touchSelectHandleZone","ax","ay","reorderObject","dragOffset","reorderMarkerBackgroundColor","reorderMarkerBorderWidth","reorderMarkerBorderColor","reorderMarkerIndexBorderWidth","reorderMarkerIndexBorderColor","reorderTarget","moveOverlayBorderWidth","moveOverlayBorderColor","setLineDash","moveOverlayBorderSegments","vb","nb","co","isScrollBoxCorner","scrollBarBoxMargin","scrollBarBorderColor","scrollBarBorderWidth","scrollBarBackgroundColor","scrollBoxHeight","scrollHeight","scrollBarBoxWidth","scrollBarBoxColor","scrollBarActiveColor","scrollBarBoxBorderRadius","scrollBoxWidth","scrollWidth","scrollBarCornerBorderColor","scrollBarCornerBackgroundColor","bar","box","gridBorderWidth","gridBorderColor","showPerformance","fillArray","pop","perf","reduce","toFixed","htmlImages","startScale","scaleDelta","zoomDeltaStart","touchLength","touches","touchPosition","touchPosition1","scrollIndex","scrollPixel","canvasOffset","touchDelta","touchAnimateTo","scrollAnimation","touchPPS","xPPS","yPPS","touchPPST","xPPST","yPPST","touchDuration","pointerLockPosition","size","mouse","touch","touchStart","entities","hasFocus","dragContext","textAlign","key","dpl","pw","ph","px","py","wheeling","stopPropagation","fn","events","removeEventListener","sfn","idx","splice","preventDefault","defaultPrevented","drawAfterResize","canvas","bm","cellBorder","columnHeaderCellBorder","ch","accumulator","hidden","top","left","widthBoxRatio","heightBoxRatio","scrollBarBoxMinSize","page","pageUpDownOverlap","resizeEditInput","scroll","dontDraw","mousemove","overridePos","contextMenu","input","getLayerPos","dragBounds","sBounds","delta","ctrl","ctrlKey","metaKey","persistantSelectionMode","vs","getCellAt","NativeEvent","previousCell","clearTimeout","scrollTimer","isInGrid","cellBoundaryCrossed","draggingItem","scrollModes","dragItem","cursor","selecting","getSelectionBounds","dragStart","dragStartObject","shiftKey","bottom","right","ignoreNextClick","selectRow","dragAddToSelection","selectionBounds","selectArea","autoScrollZone","click","checkSelectionChange","selectedData","getSelectedData","endEdit","setActiveCell","selectAll","columnHeaderClickBehavior","selectColumn","treeArrowClickRadius","toggleTree","dragResizeColumn","resizingStartingWidth","resizingStartingHeight","minColumnWidth","minRowHeight","resizeScrollZone","resizeChildGrids","globalRowResize","stopDragResize","body","setStorageData","scrollGrid","scrollPointerLock","scrollStartMode","movementX","movementY","scrollMode","scrollStart","setTimeout","scrollRepeatRate","selectionScrollIncrement","stopScrollGrid","exitPointerLock","dragReorder","allowColumnReordering","allowRowReordering","source","reorderDeadZone","stopDragReorder","oIndex","tIndex","cr","row-reorder","column-reorder","dragMove","stopDragMove","moveSelection","freezeMove","stopFreezeMove","startFreezeMove","mousedown","lastMouseDownTarget","button","move","freeze","requestPointerLock","concat","dragging","mouseup","controlInput","focus","keydown","last","cols","keyCode","beginEditAt","scrollIntoView","selectionFollowsActiveCell","keyup","keypress","dblclick","fitColumnToValues","autosize","scrollWheel","deltaX","deltaY","deltaMode","touchHaltAnimation","scrollTo","pasteItem","clipData","mimeType","normalizeRowData","importingRow","existingRow","offsetX","isArray","map","colKey","substring","split","sel","cellData","colIndex","cName","yi","paste","clipboardData","items","dti","getAsString","cut","copy","forEachSelectedCell","colName","fCopyCell","replace","trows","sData","rt","join","setData","touchScrollTimeout","animationFrames","getTouchPos","touchIndex","rect","getBoundingClientRect","clientX","clientY","easingFunctions","linear","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easing","touchEasingMethod","calculatePPSTimed","touchSigmaTimed","calculatePPS","touchSigma","touchEndAnimation","touchReleaseAnimationDurationMs","stopAnimation","touchEditCell","touchCell","clearInterval","calculatePPSTimer","touchDeadZone","touchingCell","touchstart","disposeContextMenu","touchContextTimeout","touchStartEvent","changedTouches","zoomAltered","touchStart1","touchScrollStart","contextmenuEvent","touchContextMenuTimeMs","setInterval","startingCell","touchEndEvents","touchmove","passive","touchend","touchcancel","touchSelect","handleType","touchSelecting","bounds","getSchema","touchScroll","rScrollZone","bScrollZone","tScrollZone","lScrollZone","rw","sbw","t1","t2","touchZoomSensitivity","touchZoomMin","touchZoomMax","selectionScrollZone","dz","touchReleaseAcceleration","scrollAnimationPPSThreshold","ctor","storageName","invalidSearchExpClass","localStyleLibraryStorageKey","filters","currentFilter","sorters","schemaHashes","uId","changes","componentL1Events","eventNames","expandToRow","col","low","high","step","localStorage","setItem","stringify","tempSchema","createColumnOrders","applyDefaultValue","defaultValue","createNewRowData","getSchemaNameHash","getBestGuessDataType","columnName","drawChildGrids","gridKey","setTimer","refreshFromOrigialData","originalData","validateColumn","setDefaults","obj1","obj2","setAttributes","setStyle","dispose","removeChild","eventParent","contextmenu","disconnect","tryLoadStoredOrders","storedSettings","getHeaderByName","getDomRoot","host","getFontName","fontStyle","getFontHeight","parseFloat","parseStyleValue","initProp","propName","getStyleProperty","styleKeys","parentNodeStyle","supressDrawAndEvent","initialized","publicStyleKeyIntf","initScrollBox","setDom","ie","navigator","userAgent","edge","webKit","moz","cursorGrab","cursorGrabing","cursorGrabbing","appendTo","clearChangeLog","gotoCell","gotoRow","findColumnScrollLeft","findRowScrollTop","findColumnMaxTextLength","isCellVisible","clipElement","getSchemaFromData","setFilter","expandTree","collapseTree","insertRow","deleteRow","addRow","insertColumn","deleteColumn","addColumn","getClippingRect","setRowHeight","setColumnWidth","resetColumnWidths","resetRowHeights","selectNone","assertPxColor","clearPxColorAssertions","integerToAlpha","DOMStyles","set","valueObject","filterFor","String","filterRegExp","regEnd","pattern","exec","flags","flagLength","invalidFilterRegEx","RegExp","toLocaleUpperCase","getItem","blur","TypeError","normalizeDataset","callback","syncFnInvoked","0","eventName","RangeError","autoResizeColumns","setScrollTop","preventScrollEvent","setScrollLeft","sHeight","sWidth","supressDrawEvent","applyContextItemStyle","contextItemContainer","createInlineStyle","createContextMenu","parentContextMenu","createItems","removeChildContext","relatedTarget","container","childMenuArrow","contains","children","setAttribute","contextAddCallback","getAttribute","cPos","childContextMenuMarginLeft","childContextMenuMarginTop","createChildContext","addContent","content","childContextMenuArrowHTML","clickIndex","Event","checkArrowVisibility","parentDOMNode","upArrow","downArrow","startHoverScroll","contextHoverScrollAmount","hoverScrollTimeout","contextHoverScrollRateMs","endHoverScroll","selectedIndex","loc","scrollOffset","zIndexTop","position","contextMenuArrowColor","zIndex","inputDropdown","maxHeight","innerHeight","autocompleteBottomMargin","minWidth","contextMenuArrowUpHTML","contextMenuArrowDownHTML","contextMenuWindowMargin","innerWidth","isFinite","createFilterContextMenuItems","checkRegExpErrorState","filterInput","background","contextFilterInputBackground","contextFilterInputColor","contextFilterInvalidRegExpBackground","contextFilterInvalidRegExpColor","fillAutoComplete","count","autoCompleteItems","maxAutoCompleteItems","disposeAutocomplete","createAutoCompleteContext","iRect","autoCompleteContext","filterContainer","filterLabel","filterAutoCompleteButton","onclick","en","filterOptionText","contextFilterButtonHTML","cf","removeFilterOptionText","addDefaultContextMenuItem","isNormalCell","isBackground","isScrollBar","showFilter","showCopy","copyText","execCommand","showPaste","clipBoardData","pasteText","showColumnSelector","columnSelectorText","toggleColumnVisibility","columnSelectorHiddenText","columnSelectorVisibleText","hideColumnText","showClearSettingsOption","clearSettingsOptionText","columnWidth","allowSorting","showOrderByOption","showOrderByOptionTextAsc","showOrderByOptionTextDesc","createDiposeEvent","contextPosition","st","sl","scrollingElement","contextMenuMarginLeft","contextMenuMarginTop","mobileContextMenuMargin","ele","boundingRect","eleRect","clipRect","parentRect","Infinity","borderWidth","getVisibleCellByIndex","editCell","mobileEditInputHeight","cellPaddingLeft","ignoreScrollOffset","abort","abortEdit","newValue","oldValue","aborted","editable","enumItems","enu","option","valueInEnum","multiLine","fontSize","editCellFontSize","nx","ny","className","css","canvas-datagrid-context-menu-filter-input","verticalAlign","marginLeft","padding","border","contextFilterInputBorder","borderRadius","contextFilterInputBorderRadius","lineHeight","fontWeight","fontFamily","contextFilterInputFontFamily","contextFilterInputFontSize","canvas-datagrid-context-menu-filter-button","contextMenuBackground","contextMenuColor","contextFilterButtonBorder","contextFilterButtonBorderRadius","contextMenuFilterButtonFontFamily","contextMenuFilterButtonFontSize","canvas-datagrid-context-child-arrow","cssFloat","childContextMenuArrowColor","contextMenuChildArrowFontSize","contextMenuFontFamily","canvas-datagrid-autocomplete","contextMenuFontSize","contextMenuBorder","contextMenuPadding","contextMenuBorderRadius","opacity","contextMenuOpacity","overflow","canvas-datagrid-autocomplete-item","canvas-datagrid-autocomplete-item:hover","contextMenuHoverBackground","contextMenuHoverColor","canvas-datagrid-canvas","canvas-datagrid","display","canvas-datagrid-control-input","canvas-datagrid-edit-mobile-input","boxSizing","outline","margin","mobileEditFontFamily","mobileEditFontSize","editCellBorder","editCellColor","editCellBackgroundColor","appearance","webkitAppearance","mozAppearance","canvas-datagrid-edit-input","editCellPaddingLeft","editCellFontFamily","boxShadow","editCellBoxShadow","canvas-datagrid-context-menu-item-mobile","contextMenuItemMargin","contextMenuItemBorderRadius","canvas-datagrid-context-menu-item","canvas-datagrid-context-menu-item:hover","canvas-datagrid-context-menu-label","contextMenuLabelMargin","contextMenuLabelDisplay","contextMenuLabelMinWidth","maxWidth","contextMenuLabelMaxWidth","canvas-datagrid-context-menu-mobile","whiteSpace","canvas-datagrid-context-menu","canvas-datagrid-invalid-search-regExp","contextMenuFilterInvalidExpresion","onblur","parentIsCanvas","tagName","getContext","textBaseline","ordA","charCodeAt","ordZ","len","fromCharCode","floor","applyFilter","isColumnSelected","colIsSelected","shift","supressEvent","addCol","ri","dragObject","rowId","childGrid","treeGridHeight","direction","sortFunction","dontSetStorageData","sort","offsetY","xi","cidx","isColumnVisible","isRowVisible","useTouchScrollZones","moveBorder","tsz","touchScrollZone","moveMode","borderDragBehavior","xBorderBehavior","yBorderBehavior","isVerticalScrollBar","isHorizontalScrollBar","borderResizeZone","allowColumnResize","allowColumnResizeFromCell","allowRowHeaderResize","allowRowResize","allowRowResizeFromCell","rowGrabZoneSize","maxCol","minCol"," ","rowHeaderCellFont","autosizePadding","autosizeHeaderCellPadding","rowHeaderCellPaddingRight","rowHeaderCellPaddingLeft","columnHeaderCellFont","headerCellPaddingRight","headerCellPaddingLeft","cellFont","cellPaddingRight","cellAutoResizePadding","total","headerCell","int","asc","localeCompare","date","Date","getTime"],"mappings":"CAAA,SAAAA,EAAAC,GACA,gBAAAC,UAAA,gBAAAC,QACAA,OAAAD,QAAAD,IACA,kBAAAG,gBAAAC,IACAD,UAAAH,GACA,gBAAAC,SACAA,QAAA,eAAAD,IAEAD,EAAA,eAAAC,KACCK,KAAA,WACD,MCAgB,UAAUC,GCN1B,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAP,OAGA,IAAAC,GAAAO,EAAAD,IACAE,EAAAF,EACAG,GAAA,EACAV,WAUA,OANAK,GAAAE,GAAAI,KAAAV,EAAAD,QAAAC,IAAAD,QAAAM,GAGAL,EAAAS,GAAA,EAGAT,EAAAD,QAvBA,GAAAQ,KA4DA,OAhCAF,GAAAM,EAAAP,EAGAC,EAAAO,EAAAL,EAGAF,EAAAQ,EAAA,SAAAd,EAAAe,EAAAC,GACAV,EAAAW,EAAAjB,EAAAe,IACAG,OAAAC,eAAAnB,EAAAe,GACAK,cAAA,EACAC,YAAA,EACAC,IAAAN,KAMAV,EAAAiB,EAAA,SAAAtB,GACA,GAAAe,GAAAf,KAAAuB,WACA,WAA2B,MAAAvB,GAAA,SAC3B,WAAiC,MAAAA,GAEjC,OADAK,GAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAQ,EAAAC,GAAsD,MAAAR,QAAAS,UAAAC,eAAAjB,KAAAc,EAAAC,IAGtDpB,EAAAuB,EAAA,GAGAvB,IAAAwB,EAAA,KDgBM,SAAU7B,EAAQD,EAASM,GE7EjC,GAAAyB,GAAAC,CAEAD,UA+QCE,MA/QDD,EAAA,WACA,YACA,iBAAAE,GACAA,EAAAC,UACAC,aACA,6BACA,yBACA,iCACA,yBACA,4BACA,4BACA,4BACA,0BACA,sBACA,8BACA,oBACA,yBACA,8BACA,wBACA,mDACA,qCACA,kDACA,4CACA,kCACA,+BACA,+BACA,oBACA,aACA,gBACA,iCACA,mCACA,uBACA,6BACA,6BACA,iBACA,YACA,wBACA,sBACA,+BACA,iDACA,sBACA,wBACA,sBACA,sBACA,oCACA,yBACA,wBACA,kCACA,mCACA,yBACA,gCACA,2BACA,+BACA,yBACA,0BACA,gBACA,kBACA,kBACA,yBACA,qDACA,uDACA,iBACA,uBACA,sBACA,sBACA,iBACA,+BACA,oBACA,oCACA,iCACA,wCACA,uBACA,6BACA,8BACA,oBACA,sBACA,YACA,4BAEAC,SACA,uDACA,mDACA,4BACA,uCACA,qCACA,4DACA,4CACA,yDACA,mCACA,8BACA,4BACA,6BACA,2BACA,+DACA,+CACA,mEACA,mDACA,gEACA,gDACA,gCACA,gCACA,sBACA,8BACA,6BACA,iDACA,6CACA,sBACA,iCACA,+BACA,uBACA,kBACA,gCACA,mCACA,sDACA,sCACA,wBACA,sBACA,uBACA,qBACA,yDACA,yCACA,mCACA,kBACA,+BACA,qDACA,yCACA,mCACA,iCACA,6DACA,yDACA,kCACA,gDACA,2CACA,8BACA,+CACA,kEACA,kDACA,oCACA,kCACA,mCACA,iCACA,+CACA,iEACA,0CACA,2DACA,qCACA,yCACA,0CACA,wCACA,qCACA,iEACA,0CACA,uCACA,uDACA,gEACA,uCACA,4CACA,8CACA,sCACA,8DACA,6DACA,gDACA,wCACA,sCACA,mDACA,yDACA,kCACA,yCACA,2CACA,mDACA,2CACA,+DACA,uCACA,+BACA,wDACA,iDACA,sCACA,gCACA,2CACA,uCACA,qCACA,oCACA,4BACA,4BACA,8BACA,6BACA,gCACA,uDACA,mDACA,oCACA,sDACA,kDACA,0BACA,oCACA,4BACA,0BACA,oDACA,0DACA,qDACA,2DACA,+CACA,qDACA,8BACA,wBACA,iDACA,6CACA,sBACA,sBACA,oBACA,+BACA,6BACA,sCACA,8BACA,6BACA,mDACA,sCACA,mBACA,sDACA,kDACA,kCACA,0DACA,uCACA,0DACA,sDACA,+BACA,6CACA,wCACA,2BACA,4CACA,+DACA,+CACA,iCACA,+BACA,gCACA,8BACA,kEACA,qDACA,4CACA,0BACA,kDACA,sDACA,kDACA,4BACA,mCACA,+CACA,yBACA,2BACA,wBACA,4DACA,wDACA,sBACA,wDACA,mCACA,iDACA,0BACA,iCACA,wDACA,kCACA,kDACA,2BA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","file":"canvas-datagrid.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"canvasDatagrid\"] = factory();\n\telse\n\t\troot[\"canvasDatagrid\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"canvasDatagrid\"] = factory();\n\telse\n\t\troot[\"canvasDatagrid\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 1);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        self.defaults = {\n            attributes: [\n                ['allowColumnReordering', true],\n                ['allowColumnResize', true],\n                ['allowColumnResizeFromCell', false],\n                ['allowFreezingRows', false],\n                ['allowFreezingColumns', false],\n                ['allowMovingSelection', true],\n                ['allowRowHeaderResize', true],\n                ['allowRowReordering', false],\n                ['allowRowResize', true],\n                ['allowRowResizeFromCell', false],\n                ['allowSorting', true],\n                ['autoResizeColumns', false],\n                ['borderDragBehavior', 'none'],\n                ['borderResizeZone', 10],\n                ['clearSettingsOptionText', 'Clear saved settings'],\n                ['columnHeaderClickBehavior', 'sort'],\n                ['columnSelectorHiddenText', '&nbsp;&nbsp;&nbsp;'],\n                ['columnSelectorText', 'Add/Remove columns'],\n                ['columnSelectorVisibleText', '\\u2713'],\n                ['contextHoverScrollAmount', 2],\n                ['contextHoverScrollRateMs', 5],\n                ['copyText', 'Copy'],\n                ['debug', false],\n                ['editable', true],\n                ['filterOptionText', 'Filter %s'],\n                ['filterTextPrefix', '(filtered) '],\n                ['globalRowResize', false],\n                ['hideColumnText', 'Hide %s'],\n                ['maxAutoCompleteItems', 200],\n                ['multiLine', false],\n                ['name', ''],\n                ['pageUpDownOverlap', 1],\n                ['pasteText', 'Paste'],\n                ['persistantSelectionMode', false],\n                ['removeFilterOptionText', 'Remove filter on %s'],\n                ['reorderDeadZone', 3],\n                ['resizeScrollZone', 20],\n                ['rowGrabZoneSize', 5],\n                ['saveAppearance', true],\n                ['scrollAnimationPPSThreshold', 0.75],\n                ['scrollPointerLock', false],\n                ['scrollRepeatRate', 75],\n                ['selectionFollowsActiveCell', false],\n                ['selectionHandleBehavior', 'none'],\n                ['selectionMode', 'cell'],\n                ['selectionScrollIncrement', 20],\n                ['selectionScrollZone', 20],\n                ['showClearSettingsOption', true],\n                ['showColumnHeaders', true],\n                ['showColumnSelector', true],\n                ['showCopy', true],\n                ['showFilter', true],\n                ['showNewRow', false],\n                ['showOrderByOption', true],\n                ['showOrderByOptionTextAsc', 'Order by %s ascending'],\n                ['showOrderByOptionTextDesc', 'Order by %s descending'],\n                ['showPaste', false],\n                ['showPerformance', false],\n                ['showRowHeaders', true],\n                ['showRowNumbers', true],\n                ['snapToRow', false],\n                ['touchContextMenuTimeMs', 800],\n                ['touchDeadZone', 3],\n                ['touchEasingMethod', 'easeOutQuad'],\n                ['touchReleaseAcceleration', 1000],\n                ['touchReleaseAnimationDurationMs', 2000],\n                ['touchScrollZone', 20],\n                ['touchSelectHandleZone', 20],\n                ['touchZoomSensitivity', 0.005],\n                ['touchZoomMin', 0.5],\n                ['touchZoomMax', 1.75],\n                ['tree', false],\n                ['treeHorizontalScroll', false]\n            ],\n            styles: [\n                ['activeCellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['activeCellBorderWidth', 1],\n                ['activeCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellFont', '16px sans-serif'],\n                ['activeCellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['activeCellOverlayBorderWidth', 1],\n                ['activeCellPaddingBottom', 5],\n                ['activeCellPaddingLeft', 5],\n                ['activeCellPaddingRight', 7],\n                ['activeCellPaddingTop', 5],\n                ['activeCellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['activeCellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['activeColumnHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeColumnHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeRowHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeRowHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['autocompleteBottomMargin', 60],\n                ['autosizeHeaderCellPadding', 8],\n                ['autosizePadding', 5],\n                ['borderCollapse', 'collapse'],\n                ['cellAutoResizePadding', 13],\n                ['cellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['cellBorderWidth', 1],\n                ['cellColor', 'rgba(0, 0, 0, 1)'],\n                ['cellFont', '16px sans-serif'],\n                ['cellGridHeight', 250],\n                ['cellHeight', 24],\n                ['cellHeightWithChildGrid', 150],\n                ['cellHorizontalAlignment', 'left'],\n                ['cellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['cellPaddingBottom', 5],\n                ['cellPaddingLeft', 5],\n                ['cellPaddingRight', 7],\n                ['cellPaddingTop', 5],\n                ['cellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['cellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['cellVerticalAlignment', 'center'],\n                ['cellWidth', 250],\n                ['cellWidthWithChildGrid', 250],\n                ['childContextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['childContextMenuArrowHTML', '&#x25BA;'],\n                ['childContextMenuMarginLeft', -11],\n                ['childContextMenuMarginTop', -6],\n                ['columnHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellBorderColor', 'rgba(172, 172, 172, 1)'],\n                ['columnHeaderCellBorderWidth', 1],\n                ['columnHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['columnHeaderCellFont', '16px sans-serif'],\n                ['columnHeaderCellHeight', 25],\n                ['columnHeaderCellHorizontalAlignment', 'left'],\n                ['columnHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['columnHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['columnHeaderCellPaddingBottom', 5],\n                ['columnHeaderCellPaddingLeft', 5],\n                ['columnHeaderCellPaddingRight', 7],\n                ['columnHeaderCellPaddingTop', 5],\n                ['columnHeaderCellVerticalAlignment', 'center'],\n                ['columnHeaderOrderByArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['columnHeaderOrderByArrowBorderWidth', 1],\n                ['columnHeaderOrderByArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['columnHeaderOrderByArrowHeight', 8],\n                ['columnHeaderOrderByArrowMarginLeft', 0],\n                ['columnHeaderOrderByArrowMarginRight', 5],\n                ['columnHeaderOrderByArrowMarginTop', 6],\n                ['columnHeaderOrderByArrowWidth', 13],\n                ['contextFilterButtonBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterButtonBorderRadius', '3px'],\n                ['contextFilterButtonHTML', '&#x25BC;'],\n                ['contextFilterInputBackground', 'rgba(255,255,255,1)'],\n                ['contextFilterInputBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterInputBorderRadius', '0'],\n                ['contextFilterInputColor', 'rgba(0,0,0,1)'],\n                ['contextFilterInputFontFamily', 'sans-serif'],\n                ['contextFilterInputFontSize', '14px'],\n                ['contextFilterInvalidRegExpBackground', 'rgba(180, 6, 1, 1)'],\n                ['contextFilterInvalidRegExpColor', 'rgba(255, 255, 255, 1)'],\n                ['contextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuArrowDownHTML', '&#x25BC;'],\n                ['contextMenuArrowUpHTML', '&#x25B2;'],\n                ['contextMenuBackground', 'rgba(240, 240, 240, 1)'],\n                ['contextMenuBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextMenuBorderRadius', '3px'],\n                ['contextMenuChildArrowFontSize', '12px'],\n                ['contextMenuColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuFilterButtonFontFamily', 'sans-serif'],\n                ['contextMenuFilterButtonFontSize', '10px'],\n                ['contextMenuFilterInvalidExpresion', 'rgba(237, 155, 156, 1)'],\n                ['contextMenuFontFamily', 'sans-serif'],\n                ['contextMenuFontSize', '16px'],\n                ['contextMenuHoverBackground', 'rgba(182, 205, 250, 1)'],\n                ['contextMenuHoverColor', 'rgba(43, 48, 153, 1)'],\n                ['contextMenuItemBorderRadius', '3px'],\n                ['contextMenuItemMargin', '2px'],\n                ['contextMenuLabelDisplay', 'inline-block'],\n                ['contextMenuLabelMargin', '0 3px 0 0'],\n                ['contextMenuLabelMaxWidth', '700px'],\n                ['contextMenuLabelMinWidth', '75px'],\n                ['contextMenuMarginLeft', 3],\n                ['contextMenuMarginTop', -3],\n                ['contextMenuOpacity', '0.98'],\n                ['contextMenuPadding', '2px'],\n                ['contextMenuWindowMargin', 100],\n                ['cornerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cornerCellBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['editCellBackgroundColor', 'white'],\n                ['editCellBorder', 'solid 1px rgba(110, 168, 255, 1)'],\n                ['editCellBoxShadow', '0 2px 5px rgba(0,0,0,0.4)'],\n                ['editCellColor', 'black'],\n                ['editCellFontFamily', 'sans-serif'],\n                ['editCellFontSize', '16px'],\n                ['editCellPaddingLeft', 4],\n                ['frozenMarkerHoverColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerHoverBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerActiveColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerActiveBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerColor', 'rgba(222, 222, 222, 1)'],\n                ['frozenMarkerBorderColor', 'rgba(168, 168, 168, 1)'],\n                ['frozenMarkerBorderWidth', 1],\n                ['frozenMarkerWidth', 2],\n                ['gridBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['gridBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['gridBorderWidth', 1],\n                ['minColumnWidth', 45],\n                ['minRowHeight', 24],\n                ['mobileContextMenuMargin', 10],\n                ['mobileEditInputHeight', 30],\n                ['mobileEditFontFamily', 'sans-serif'],\n                ['mobileEditFontSize', '16px'],\n                ['moveOverlayBorderWidth', 1],\n                ['moveOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['moveOverlayBorderSegments', '12, 7'],\n                ['name', 'default'],\n                ['reorderMarkerBackgroundColor', 'rgba(0, 0, 0, 0.1)'],\n                ['reorderMarkerBorderColor', 'rgba(0, 0, 0, 0.2)'],\n                ['reorderMarkerBorderWidth', 1.25],\n                ['reorderMarkerIndexBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['reorderMarkerIndexBorderWidth', 2.75],\n                ['rowHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['rowHeaderCellBorderColor', 'rgba(200, 200, 200, 1)'],\n                ['rowHeaderCellBorderWidth', 1],\n                ['rowHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellFont', '16px sans-serif'],\n                ['rowHeaderCellHeight', 25],\n                ['rowHeaderCellHorizontalAlignment', 'left'],\n                ['rowHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['rowHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['rowHeaderCellPaddingBottom', 5],\n                ['rowHeaderCellPaddingLeft', 5],\n                ['rowHeaderCellPaddingRight', 5],\n                ['rowHeaderCellPaddingTop', 5],\n                ['rowHeaderCellSelectedBackgroundColor', 'rgba(217, 217, 217, 1)'],\n                ['rowHeaderCellSelectedColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellVerticalAlignment', 'center'],\n                ['rowHeaderCellWidth', 57],\n                ['scrollBarActiveColor', 'rgba(125, 125, 125, 1)'],\n                ['scrollBarBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarBorderWidth', 0.5],\n                ['scrollBarBoxBorderRadius', 4.125],\n                ['scrollBarBoxColor', 'rgba(192, 192, 192, 1)'],\n                ['scrollBarBoxMargin', 2],\n                ['scrollBarBoxMinSize', 15],\n                ['scrollBarBoxWidth', 8],\n                ['scrollBarCornerBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarCornerBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarWidth', 11],\n                ['selectionHandleBorderColor', 'rgba(255, 255, 255, 1)'],\n                ['selectionHandleBorderWidth', 1.5],\n                ['selectionHandleColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionHandleSize', 8],\n                ['selectionHandleType', 'square'],\n                ['selectionOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionOverlayBorderWidth', 1],\n                ['treeArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['treeArrowBorderWidth', 1],\n                ['treeArrowClickRadius', 5],\n                ['treeArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['treeArrowHeight', 8],\n                ['treeArrowMarginLeft', 0],\n                ['treeArrowMarginRight', 5],\n                ['treeArrowMarginTop', 6],\n                ['treeArrowWidth', 13],\n                ['treeGridHeight', 250]\n            ]\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, evil: true*/\n/*globals Reflect: false, HTMLElement: true, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n    __webpack_require__(2),\n    __webpack_require__(0),\n    __webpack_require__(3),\n    __webpack_require__(4),\n    __webpack_require__(5),\n    __webpack_require__(6),\n    __webpack_require__(7),\n    __webpack_require__(8),\n    __webpack_require__(9)\n], __WEBPACK_AMD_DEFINE_RESULT__ = function context(component) {\n    'use strict';\n    component = component();\n    var modules = Array.prototype.slice.call(arguments);\n    function Grid(args) {\n        args = args || {};\n        var self = {};\n        self.isComponent = args.component === undefined;\n        self.intf = self.isComponent ? eval('Reflect.construct(HTMLElement, [], new.target)') : {};\n        self.args = args;\n        self.createGrid = function grid(args) {\n            args.component = false;\n            return new Grid(args);\n        };\n        modules.forEach(function (module) {\n            module(self);\n        });\n        if (self.isComponent) {\n            self.args.parentNode = self.intf;\n        } else {\n            self.args.parentNode = args.parentNode;\n        }\n        if (self.args.parentNode && self.args.parentNode.createShadowRoot) {\n            self.shadowRoot = self.args.parentNode.attachShadow({mode: self.args.debug ? 'open' : 'closed'});\n            self.parentNode = self.shadowRoot;\n        } else {\n            self.parentNode = args.parentNode;\n        }\n        self.init();\n        return self.intf;\n    }\n    if (window.HTMLElement) {\n        Grid.prototype = Object.create(window.HTMLElement.prototype);\n    }\n    // export web component\n    if (window.customElements) {\n        Grid.observedAttributes = component.getObservableAttributes();\n        Grid.prototype.disconnectedCallback = component.disconnectedCallback;\n        Grid.prototype.attributeChangedCallback = component.attributeChangedCallback;\n        Grid.prototype.connectedCallback = component.connectedCallback;\n        Grid.prototype.adoptedCallback = component.adoptedCallback;\n        window.customElements.define('canvas-datagrid', Grid);\n    }\n    // export global\n    if (window && !window.canvasDatagrid && !window.require) {\n        window.canvasDatagrid = function (args) { return new Grid(args); };\n    }\n    // export amd loader\n    module.exports = function grid(args) {\n        args = args || {};\n        var i;\n        if (window.customElements) {\n            i = document.createElement('canvas-datagrid');\n            if (args.parentNode) {\n                args.parentNode.appendChild(i);\n            }\n            return i;\n        }\n        args.component = false;\n        return new Grid(args);\n    };\n    return module.exports;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_RESULT__ = function (defaults) {\n    'use strict';\n    return function () {\n        var typeMap, component = {};\n        function hyphenateProperty(prop, cust) {\n            var p = '';\n            Array.prototype.forEach.call(prop, function (char) {\n                if (char === char.toUpperCase()) {\n                    p += '-' + char.toLowerCase();\n                    return;\n                }\n                p += char;\n            });\n            return (cust ? '--cdg-' : '') + p;\n        }\n        function getDefaultItem(base, item) {\n            var i = {},\n                r;\n            defaults(i);\n            r = i.defaults[base].filter(function (i) {\n                return i[0].toLowerCase() === item.toLowerCase()\n                    || hyphenateProperty(i[0]) === item.toLowerCase()\n                    || hyphenateProperty(i[0], true) === item.toLowerCase();\n            })[0];\n            return r;\n        }\n        function applyComponentStyle(supressChangeAndDrawEvents, intf) {\n            var cStyle = window.getComputedStyle(intf, null),\n                defs = {};\n            intf.computedStyle = cStyle;\n            defaults(defs);\n            defs = defs.defaults.styles;\n            defs.forEach(function (def) {\n                var val = cStyle.getPropertyValue(hyphenateProperty(def[0], true));\n                if (val === \"\") {\n                    val = cStyle.getPropertyValue(hyphenateProperty(def[0], false));\n                }\n                if (val !== \"\") {\n                    intf.setStyleProperty(def[0], typeMap[typeof def[1]](val, def[1]));\n                }\n            });\n            intf.resize(true);\n            if (!supressChangeAndDrawEvents && intf.dispatchEvent) {\n                intf.dispatchEvent('stylechanged', intf.style);\n            }\n        }\n        typeMap = {\n            data: function (strData) {\n                try {\n                    return JSON.parse(strData);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid data.');\n                }\n            },\n            schema: function (strSchema) {\n                try {\n                    return JSON.parse(strSchema);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid schema attribute.');\n                }\n            },\n            number: function (strNum, def) {\n                var n = parseInt(strNum, 10);\n                return isNaN(n) ? def : n;\n            },\n            boolean: function (strBool) {\n                return (/true/i).test(strBool);\n            },\n            string: function (str) {\n                return str;\n            }\n        };\n        component.getObservableAttributes = function () {\n            var i = {}, attrs = ['data', 'schema', 'style', 'className'];\n            defaults(i);\n            i.defaults.attributes.forEach(function (attr) {\n                attrs.push(attr[0].toLowerCase());\n            });\n            return attrs;\n        };\n        component.disconnectedCallback = function () {\n            this.connected = false;\n        };\n        component.connectedCallback = function () {\n            var intf = this;\n            intf.connected = true;\n            component.observe(intf);\n            applyComponentStyle(true, intf);\n            intf.resize(true);\n        };\n        component.adoptedCallback = function () {\n            this.resize();\n        };\n        component.attributeChangedCallback = function (attrName, oldVal, newVal) {\n            var tfn, intf = this, def;\n            if (attrName === 'style') {\n                requestAnimationFrame(function () { applyComponentStyle(false, intf); });\n                return;\n            }\n            if (attrName === 'data') {\n                intf.args.data = typeMap.data(newVal);\n                return;\n            }\n            if (attrName === 'schema') {\n                intf.args.schema = typeMap.schema(newVal);\n                return;\n            }\n            if (attrName === 'class' || attrName === 'className') {\n                return;\n            }\n            def = getDefaultItem('attributes', attrName);\n            if (def) {\n                tfn = typeMap[typeof def[1]];\n                intf.attributes[def[0]] = tfn(newVal);\n                return;\n            }\n            if (/^on/.test(attrName)) {\n                intf.addEventListener('on' + attrName, function (e) {\n                    eval(newVal);\n                });\n            }\n            return;\n        };\n        component.observe = function (intf) {\n            var observer;\n            if (!window.MutationObserver) { return; }\n            intf.applyComponentStyle = function () { applyComponentStyle(false, intf); intf.resize(); };\n            /**\n             * Applies the computed css styles to the grid.  In some browsers, changing directives in attached style sheets does not automatically update the styles in this component.  It is necessary to call this method to update in these cases.\n             * @memberof canvasDatagrid\n             * @name applyComponentStyle\n             * @method\n             */\n            observer = new window.MutationObserver(function (mutations) {\n                var checkInnerHTML, checkStyle;\n                Array.prototype.forEach.call(mutations, function (mutation) {\n                    if (mutation.attributeName === 'class'\n                            || mutation.attributeName === 'style') {\n                        intf.applyComponentStyle(false, intf);\n                        return;\n                    }\n                    if (mutation.target.parentNode.nodeName === 'STYLE') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.addedNodes.length > 0 || mutation.type === 'characterData') {\n                        checkInnerHTML = true;\n                    }\n                });\n                if (checkStyle) {\n                    intf.applyComponentStyle(false, intf);\n                }\n                if (checkInnerHTML) {\n                    intf.data = typeMap.data(intf.innerHTML);\n                }\n            });\n            observer.observe(intf, { characterData: true, childList: true, attributes: true, subtree: true });\n            Array.prototype.forEach.call(document.querySelectorAll('style'), function (el) {\n                observer.observe(el, { characterData: true, childList: true, attributes: true, subtree: true });\n            });\n        };\n        return component;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals XMLSerializer: false, define: true, Blob: false, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var perfCounters = [],\n            drawCount = 0,\n            perfWindowSize = 300,\n            entityCount = [],\n            scrollDebugCounters = [],\n            touchPPSCounters = [];\n        self.htmlImageCache = {};\n        function drawPerfLine(w, h, x, y, perfArr, arrIndex, max, color, useAbs) {\n            var i = w / perfArr.length,\n                r = h / max;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x, y + h);\n            perfArr.forEach(function (n) {\n                var val = (arrIndex === undefined ? n : n[arrIndex]),\n                    cx,\n                    cy;\n                if (useAbs) {\n                    val = Math.abs(val);\n                }\n                cx = x + i;\n                cy = y + h - (val * r);\n                self.ctx.lineTo(cx, cy);\n                x += i;\n            });\n            self.ctx.moveTo(x + w, y + h);\n            self.ctx.strokeStyle = color;\n            self.ctx.stroke();\n        }\n        function drawOnAllImagesLoaded() {\n            var loaded = true;\n            Object.keys(self.htmlImageCache).forEach(function (html) {\n                if (!self.htmlImageCache[html].complete) {\n                    loaded = false;\n                }\n            });\n            if (loaded) {\n                self.draw();\n            }\n        }\n        function drawHtml(cell) {\n            var img,\n                v = cell.innerHTML || cell.formattedValue,\n                x = cell.x + self.canvasOffsetLeft,\n                y = cell.y + self.canvasOffsetTop;\n            if (self.htmlImageCache[v]) {\n                img = self.htmlImageCache[v];\n                if (img.height !== cell.height || img.width !== cell.width) {\n                    // height and width of the cell has changed, invalidate cache\n                    self.htmlImageCache[v] = undefined;\n                } else {\n                    if (!img.complete) {\n                        return;\n                    }\n                    return self.ctx.drawImage(img, x, y);\n                }\n            }\n            img = new Image(cell.width, cell.height);\n            self.htmlImageCache[v] = img;\n            img.onload = function () {\n                self.ctx.drawImage(img, x, y);\n                drawOnAllImagesLoaded();\n            };\n            img.src = 'data:image/svg+xml;base64,' + btoa(\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + cell.width + '\" height=\"' + cell.height + '\">\\n' +\n                    '<foreignObject class=\"node\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\\n' +\n                    '<body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;padding:0;\">\\n' +\n                    v + '\\n' +\n                    '</body>' +\n                    '</foreignObject>\\n' +\n                    '</svg>\\n'\n            );\n        }\n        function drawOrderByArrow(x, y) {\n            var mt = self.style.columnHeaderOrderByArrowMarginTop * self.scale,\n                ml = self.style.columnHeaderOrderByArrowMarginLeft * self.scale,\n                mr = self.style.columnHeaderOrderByArrowMarginRight * self.scale,\n                aw = self.style.columnHeaderOrderByArrowWidth * self.scale,\n                ah = self.style.columnHeaderOrderByArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.columnHeaderOrderByArrowColor;\n            self.ctx.strokeStyle = self.style.columnHeaderOrderByArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.orderDirection === 'asc') {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y + ah);\n                self.ctx.lineTo(x + aw, y + ah);\n                self.ctx.lineTo(x + (aw * 0.5), y);\n                self.ctx.lineTo(x, y + ah);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function drawTreeArrow(cell, x, y) {\n            var mt = self.style.treeArrowMarginTop * self.scale,\n                mr = self.style.treeArrowMarginRight * self.scale,\n                ml = self.style.treeArrowMarginLeft * self.scale,\n                aw = self.style.treeArrowWidth * self.scale,\n                ah = self.style.treeArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.treeArrowColor;\n            self.ctx.strokeStyle = self.style.treeArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.openChildren[cell.data[self.uniqueId]]) {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y);\n                self.ctx.lineTo(x + ah, y + (aw * 0.5));\n                self.ctx.lineTo(x, y + aw);\n                self.ctx.lineTo(x, y);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function radiusRect(x, y, w, h, radius) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            var r = x + w, b = y + h;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x + radius, y);\n            self.ctx.lineTo(r - radius, y);\n            self.ctx.quadraticCurveTo(r, y, r, y + radius);\n            self.ctx.lineTo(r, y + h - radius);\n            self.ctx.quadraticCurveTo(r, b, r - radius, b);\n            self.ctx.lineTo(x + radius, b);\n            self.ctx.quadraticCurveTo(x, b, x, b - radius);\n            self.ctx.lineTo(x, y + radius);\n            self.ctx.quadraticCurveTo(x, y, x + radius, y);\n        }\n        function fillRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillRect(x, y, w, h);\n        }\n        function strokeRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.strokeRect(x, y, w, h);\n        }\n        function fillText(text, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillText(text, x, y);\n        }\n        function fillCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.fill();\n        }\n        function strokeCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.stroke();\n        }\n        function clipFrozenArea(mode) {\n            // 0 both, 1 rows, 2 cols\n            // self.lastFrozenColumnPixel;\n            // self.lastFrozenRowPixel;\n            self.ctx.beginPath();\n            if (mode === 0) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, self.lastFrozenRowPixel);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 1) {\n                self.ctx.moveTo(0, self.lastFrozenRowPixel);\n                self.ctx.lineTo(0, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 2) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, 0);\n                self.ctx.lineTo(self.width, 0);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n            }\n            self.ctx.clip();\n        }\n        function fillHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return fillCircle(x, y, r * 0.5);\n            }\n            fillRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function strokeHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return strokeCircle(x, y, r * 0.5);\n            }\n            strokeRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function addselectionHandle(c, pos) {\n            var hw = self.style.selectionHandleSize,\n                p = {\n                    tr: function () {\n                        fillHandle(c.x + c.width, c.y, hw);\n                        strokeHandle(c.x + c.width, c.y, hw);\n                    },\n                    br: function () {\n                        fillHandle(c.x + c.width, c.y + c.height, hw);\n                        strokeHandle(c.x + c.width, c.y + c.height, hw);\n                    },\n                    tl: function () {\n                        fillHandle(c.x, c.y, hw);\n                        strokeHandle(c.x, c.y, hw);\n                    },\n                    bl: function () {\n                        fillHandle(c.x, c.y + c.height, hw);\n                        strokeHandle(c.x, c.y + c.height, hw);\n                    }\n                };\n            p[pos]();\n        }\n        function addBorderLine(c, pos) {\n            self.ctx.beginPath();\n            var p = {\n                t: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                },\n                r: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                b: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                l: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                }\n            };\n            p[pos]();\n            self.ctx.stroke();\n        }\n        function addEllipsis(text, width) {\n            var c, w = 0;\n            if (self.ellipsisCache[text] && self.ellipsisCache[text][width]) {\n                return self.ellipsisCache[text][width];\n            }\n            //TODO Add ellipsis back when there is a fast way to do it\n            w = self.ctx.measureText(text).width;\n            self.ellipsisCache[text] = self.ellipsisCache[text] || {};\n            c = {value: text, width: w};\n            self.ellipsisCache[text][width] = c;\n            return c;\n        }\n        function drawText(cell) {\n            var paddingLeft = self.style[cell.style + 'PaddingLeft'] * self.scale,\n                paddingTop = self.style[cell.style + 'PaddingTop'] * self.scale,\n                paddingRight = self.style[cell.style + 'PaddingRight'] * self.scale,\n                paddingBottom = self.style[cell.style + 'PaddingBottom'] * self.scale,\n                vPos = paddingTop + cell.height - (cell.height * 0.5),\n                hPos = paddingLeft + cell.treeArrowWidth + cell.orderByArrowWidth;\n            cell.text = addEllipsis(cell.formattedValue, cell.width - paddingRight - paddingLeft);\n            cell.text.height = cell.fontHeight;\n            if (cell.horizontalAlignment === 'right') {\n                hPos = cell.width - cell.text.width - paddingRight;\n            } else if (cell.horizontalAlignment === 'center') {\n                hPos = (cell.width / 2) - (cell.text.width / 2);\n            }\n            if (cell.verticalAlignment === 'top') {\n                vPos = paddingTop + cell.text.height;\n            } else if (cell.verticalAlignment === 'bottom') {\n                vPos = cell.height - paddingBottom - cell.text.height;\n            }\n            cell.text.x = cell.x + hPos;\n            cell.text.y = cell.y + vPos;\n            fillText(cell.text.value, cell.text.x, cell.text.y);\n        }\n        function getFrozenColumnsWidth() {\n            var w = 0,\n                s = self.getVisibleSchema(),\n                x = 0,\n                n = Math.min(self.frozenColumn, s.length),\n                column;\n            while (x < n) {\n                column = s[self.orders.columns[x]];\n                w += ((self.sizes.columns[column[self.uniqueId]] || column.width || self.style.cellWidth) * self.scale);\n                x += 1;\n            }\n            return w;\n        }\n        /**\n         * Redraws the grid. No matter what the change, this is the only method required to refresh everything.\n         * @memberof canvasDatagrid\n         * @name draw\n         * @method\n         */\n         // r = literal row index\n         // rd = row data array\n         // i = user order index\n         // o = literal data index\n         // y = y drawing cursor\n         // x = x drawing cursor\n         // s = visible schema array\n         // cx = current x drawing cursor sub calculation var\n         // cy = current y drawing cursor sub calculation var\n         // a = static cell (like corner cell)\n         // p = perf counter\n         // l = data length\n         // u = current cell\n         // h = current height\n         // w = current width\n        self.draw = function (internal) {\n            if (self.dispatchEvent('beforedraw', {})) { return; }\n            if (!self.isChildGrid && (!self.height || !self.width)) {\n                return;\n            }\n            if (self.isChildGrid && internal) {\n                requestAnimationFrame(self.parentGrid.draw);\n                return;\n            }\n            if (self.intf.visible === false) {\n                return;\n            }\n            // initial values\n            var checkScrollHeight, rowHeaderCell, p, cx, cy, treeGrid, rowOpen,\n                rowHeight, cornerCell, y, x, c, h, w, s, r, rd, aCell,\n                bc = self.style.borderCollapse === 'collapse',\n                selectionBorders = [],\n                moveBorders = [],\n                selectionHandles = [],\n                rowHeaders = [],\n                frozenColumnWidths = getFrozenColumnsWidth(),\n                l = self.data.length,\n                u = self.currentCell || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                cellHeight = self.style.cellHeight;\n            drawCount += 1;\n            p = performance.now();\n            self.visibleRowHeights = [];\n            // if data length has changed, there is no way to know\n            if (self.data.length > self.orders.rows.length) {\n                self.createRowOrders();\n            }\n            function drawScrollBars() {\n                var v = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-bar'\n                    },\n                    n = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-bar'\n                    },\n                    vb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-box'\n                    },\n                    nb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-box'\n                    },\n                    co = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        isCorner: true,\n                        isScrollBoxCorner: true,\n                        style: 'scroll-box-corner'\n                    },\n                    m = (self.style.scrollBarBoxMargin * 2),\n                    d = self.style.scrollBarBoxMargin * 0.5;\n                self.ctx.strokeStyle = self.style.scrollBarBorderColor;\n                self.ctx.lineWidth = self.style.scrollBarBorderWidth;\n                // vertical\n                v.x += w - self.style.scrollBarWidth - self.style.scrollBarBorderWidth - d;\n                v.y += columnHeaderCellHeight;\n                v.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                v.height = h - columnHeaderCellHeight - self.style.scrollBarWidth - d - m;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(v.x, v.y, v.width, v.height + m);\n                strokeRect(v.x, v.y, v.width, v.height + m);\n                // vertical box\n                vb.x = v.x + self.style.scrollBarBoxMargin;\n                vb.y = columnHeaderCellHeight + self.style.scrollBarBoxMargin\n                    + ((v.height - self.scrollBox.scrollBoxHeight)\n                        * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight));\n                vb.width = self.style.scrollBarBoxWidth;\n                vb.height = self.scrollBox.scrollBoxHeight;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/vertical/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (vb.height < v.height) {\n                    radiusRect(vb.x, vb.y, vb.width, vb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                // horizontal\n                n.x += rowHeaderCellWidth;\n                n.y += h - self.style.scrollBarWidth - d;\n                n.width = w - self.style.scrollBarWidth - rowHeaderCellWidth - d - m;\n                n.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(n.x, n.y, n.width + m, n.height);\n                strokeRect(n.x, n.y, n.width + m, n.height);\n                // horizontal box\n                nb.y = n.y + self.style.scrollBarBoxMargin;\n                nb.x = rowHeaderCellWidth + self.style.scrollBarBoxMargin\n                    + ((n.width - self.scrollBox.scrollBoxWidth)\n                        * (self.scrollBox.scrollLeft / self.scrollBox.scrollWidth));\n                nb.width = self.scrollBox.scrollBoxWidth;\n                nb.height = self.style.scrollBarBoxWidth;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/horizontal/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (nb.width < n.width) {\n                    radiusRect(nb.x, nb.y, nb.width, nb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                //corner\n                self.ctx.strokeStyle = self.style.scrollBarCornerBorderColor;\n                self.ctx.fillStyle = self.style.scrollBarCornerBackgroundColor;\n                co.x = n.x + n.width + m;\n                co.y = v.y + v.height + m;\n                co.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                co.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                radiusRect(co.x, co.y, co.width, co.height, 0);\n                self.ctx.stroke();\n                self.ctx.fill();\n                self.visibleCells.unshift(v);\n                self.visibleCells.unshift(vb);\n                self.visibleCells.unshift(n);\n                self.visibleCells.unshift(nb);\n                self.visibleCells.unshift(co);\n                self.scrollBox.bar = {\n                    v: v,\n                    h: n\n                };\n                self.scrollBox.box = {\n                    v: vb,\n                    h: nb\n                };\n            }\n            function createHandlesOverlayArray(cell) {\n                if (self.attributes.allowMovingSelection || self.mobile) {\n                    if (cell.selectionBorderTop && cell.selectionBorderRight && self.mobile) {\n                        selectionHandles.push([cell, 'tr']);\n                        cell.selectionHandle = 'tr';\n                    }\n                    if (cell.selectionBorderTop && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'tl']);\n                        cell.selectionHandle = 'tl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'bl']);\n                        cell.selectionHandle = 'bl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderRight\n                            && (self.attributes.selectionHandleBehavior !== 'none' || self.mobile)) {\n                        selectionHandles.push([cell, 'br']);\n                        cell.selectionHandle = 'br';\n                    }\n                }\n            }\n            function createBorderOverlayArray(cell, drawArray, propPrefix, offsetPoint) {\n                offsetPoint = offsetPoint || {x: 0, y: 0};\n                cell.selectionBorder = '';\n                if (!cell.isRowHeader\n                        && self.selections[cell.rowIndex + -offsetPoint.y]\n                        && self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) !== -1) {\n                    if ((!self.selections[cell.rowIndex - 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex - 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1\n                            || cell.rowIndex === 0)\n                            && !cell.isHeader) {\n                        drawArray.push([cell, 't']);\n                        cell[propPrefix + 'BorderTop'] = true;\n                        cell[propPrefix + 'Border'] += 't';\n                    }\n                    if (!self.selections[cell.rowIndex + 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex + 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'b']);\n                        cell[propPrefix + 'BorderBottom'] = true;\n                        cell[propPrefix + 'Border'] += 'b';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === 0\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex - 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'l']);\n                        cell[propPrefix + 'BorderLeft'] = true;\n                        cell[propPrefix + 'Border'] += 'l';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === s.length\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'r']);\n                        cell[propPrefix + 'BorderRight'] = true;\n                        cell[propPrefix + 'Border'] += 'r';\n                    }\n                }\n            }\n            function drawCell(d, rowOrderIndex, rowIndex) {\n                return function drawEach(header, headerIndex, columnOrderIndex) {\n                    var cellStyle = header.style || 'cell',\n                        cellGridAttributes,\n                        cell,\n                        isHeader = /HeaderCell/.test(cellStyle),\n                        isCorner = /cornerCell/.test(cellStyle),\n                        isRowHeader = 'rowHeaderCell' === cellStyle,\n                        isColumnHeader = 'columnHeaderCell' === cellStyle,\n                        selected = self.selections[rowOrderIndex] && self.selections[rowOrderIndex].indexOf(columnOrderIndex) !== -1,\n                        hovered = self.hovers[d[self.uniqueId]] && self.hovers[d[self.uniqueId]].indexOf(columnOrderIndex) !== -1,\n                        active = self.activeCell.rowIndex === rowOrderIndex && self.activeCell.columnIndex === columnOrderIndex,\n                        isGrid = typeof d[header.name] === 'object' && d[header.name] !== null && d[header.name] !== undefined,\n                        activeHeader = (self.orders.rows[self.activeCell.rowIndex] === rowOrderIndex\n                                || self.orders.columns[self.activeCell.columnIndex] === columnOrderIndex)\n                            && (columnOrderIndex === -1 || rowOrderIndex === -1)\n                            ? (isRowHeader ? 'activeRowHeaderCell' : 'activeColumnHeaderCell') : false,\n                        val,\n                        f = self.formatters[header.type || 'string'],\n                        orderByArrowSize = 0,\n                        treeArrowSize = 0,\n                        cellWidth = self.sizes.columns[isRowHeader ? 'cornerCell' : header[self.uniqueId]] || header.width,\n                        ev = {\n                            value: d[header.name],\n                            row: d,\n                            header: header\n                        };\n                    if (cellStyle === 'headerCellCap') {\n                        cellWidth = w - x;\n                    }\n                    // if no data or schema are defined, a width is provided to the stub column\n                    if (cellWidth === undefined) {\n                        cellWidth = self.style.cellWidth;\n                    }\n                    cellWidth = cellWidth * self.scale;\n                    if (x + cellWidth + self.style.cellBorderWidth < 0) {\n                        x += cellWidth + self.style.cellBorderWidth;\n                    }\n                    if (active) {\n                        cellStyle = 'activeCell';\n                    }\n                    if (self.visibleRows.indexOf(rowIndex) === -1 && !isHeader) {\n                        self.visibleRows.push(rowIndex);\n                    }\n                    val = self.dispatchEvent('formatcellvalue', ev);\n                    cx = x;\n                    cy = y;\n                    if (cellStyle === 'cornerCell') {\n                        cx = 0;\n                        cy = 0;\n                    } else if (isRowHeader) {\n                        cx = 0;\n                    } else if (isHeader) {\n                        cy = 0;\n                    }\n                    cell = {\n                        type: isGrid ? 'canvas-datagrid-cell' : header.type,\n                        style: cellStyle,\n                        nodeType: 'canvas-datagrid-cell',\n                        x: cx,\n                        y: cy,\n                        horizontalAlignment: self.style[cellStyle + 'HorizontalAlignment'],\n                        verticalAlignment: self.style[cellStyle + 'VerticalAlignment'],\n                        offsetTop: self.canvasOffsetTop + cy,\n                        offsetLeft: self.canvasOffsetLeft + cx,\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        active: active || activeHeader,\n                        hovered: hovered,\n                        selected: selected,\n                        width: cellWidth,\n                        height: cellHeight,\n                        offsetWidth: cellWidth,\n                        offsetHeight: cellHeight,\n                        parentNode: self.intf.parentNode,\n                        offsetParent: self.intf.parentNode,\n                        data: d,\n                        isCorner: isCorner,\n                        isHeader: isHeader,\n                        isColumnHeader: isColumnHeader,\n                        isHeaderCellCap: !!header.isHeaderCellCap,\n                        isRowHeader: isRowHeader,\n                        rowOpen: rowOpen,\n                        header: header,\n                        columnIndex: columnOrderIndex,\n                        rowIndex: rowOrderIndex,\n                        sortColumnIndex: headerIndex,\n                        sortRowIndex: rowIndex,\n                        isGrid: isGrid,\n                        isNormal: !isGrid && !isCorner && !isHeader,\n                        gridId: (self.attributes.name || '') + d[self.uniqueId] + ':' + header[self.uniqueId],\n                        parentGrid: self.intf,\n                        innerHTML: '',\n                        activeHeader: activeHeader,\n                        value: isHeader && !isRowHeader ? (header.title || header.name) : d[header.name]\n                    };\n                    ev.cell = cell;\n                    cell.userHeight = cell.isHeader ? self.sizes.rows[-1] : rowHeight;\n                    cell.userWidth = cell.isHeader ? self.sizes.columns.cornerCell : self.sizes.columns[header[self.uniqueId]];\n                    cell[self.uniqueId] = d[self.uniqueId];\n                    self.visibleCells.unshift(cell);\n                    if (self.dispatchEvent('beforerendercell', ev)) { return; }\n                    self.ctx.fillStyle = self.style[cellStyle + 'BackgroundColor'];\n                    self.ctx.strokeStyle = self.style[cellStyle + 'BorderColor'];\n                    self.ctx.lineWidth = self.style[cellStyle + 'BorderWidth'];\n                    if (hovered) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'HoverBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'HoverBorderColor'];\n                    }\n                    if (selected) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'SelectedBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'SelectedBorderColor'];\n                    }\n                    if (activeHeader) {\n                        self.ctx.fillStyle = self.style[activeHeader + 'BackgroundColor'];\n                    }\n                    self.dispatchEvent('rendercell', ev);\n                    if (cell.isGrid) {\n                        if (cell.height !== rowHeight) {\n                            cell.height = rowHeight || self.style.cellHeightWithChildGrid;\n                            checkScrollHeight = true;\n                        }\n                        cell.width = self.sizes.columns[header[self.uniqueId]] || self.style.cellWidthWithChildGrid;\n                    }\n                    if (rowOpen && !cell.isRowHeader) {\n                        cell.height = self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight;\n                    }\n                    if (!cell.isGrid) {\n                        fillRect(cx, cy, cell.width, cell.height);\n                        strokeRect(cx, cy, cell.width, cell.height);\n                    }\n                    self.ctx.save();\n                    radiusRect(cell.x, cell.y, cell.width, cell.height, 0);\n                    self.ctx.clip();\n                    self.dispatchEvent('afterrendercell', ev);\n                    if (cell.height !== cellHeight && !(rowOpen && !cell.isRowHeader)) {\n                        self.sizes.rows[isHeader ? -1 : d[self.uniqueId]] = cell.height;\n                        checkScrollHeight = true;\n                    }\n                    if (cell.width !== cellWidth) {\n                        self.sizes.columns[header[self.uniqueId]] = cell.width;\n                        checkScrollHeight = true;\n                    }\n                    if (isRowHeader && self.attributes.tree) {\n                        if (!self.dispatchEvent('rendertreearrow', ev)) {\n                            treeArrowSize = drawTreeArrow(cell, self.style[cellStyle + 'PaddingLeft'], cy, 0);\n                        }\n                    }\n                    if ((self.attributes.showRowNumbers && isRowHeader)\n                            || !isRowHeader) {\n                        if (cell.isGrid && !self.dispatchEvent('beforerendercellgrid', ev)) {\n                            if (!self.childGrids[cell.gridId]) {\n                                cellGridAttributes = self.args.cellGridAttributes || self.args;\n                                cellGridAttributes.name = self.attributes.saveAppearance ? cell.gridId : undefined;\n                                cellGridAttributes.parentNode = cell;\n                                cellGridAttributes.data = d[header.name];\n                                ev.cellGridAttributes = cellGridAttributes;\n                                if (self.dispatchEvent('beforecreatecellgrid', ev)) { return; }\n                                self.childGrids[cell.gridId] = self.createGrid(cellGridAttributes);\n                                self.sizes.rows[rd[self.uniqueId]]\n                                    = self.sizes.rows[rd[self.uniqueId]] || self.style.cellGridHeight;\n                                checkScrollHeight = true;\n                            }\n                            cell.grid = self.childGrids[cell.gridId];\n                            cell.grid.parentNode = cell;\n                            cell.grid.visible = true;\n                            cell.grid.draw();\n                            self.dispatchEvent('rendercellgrid', ev);\n                        } else if (!cell.isGrid) {\n                            if (self.childGrids[cell.gridId]) {\n                                self.childGrids[cell.gridId].parentNode.offsetHeight = 0;\n                            }\n                            if (isHeader && self.orderBy === header.name) {\n                                if (!self.dispatchEvent('renderorderbyarrow', ev)) {\n                                    orderByArrowSize = drawOrderByArrow(cx + self.style[cellStyle + 'PaddingLeft'], 0);\n                                }\n                            }\n                            self.ctx.fillStyle = self.style[cellStyle + 'Color'];\n                            if (hovered) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'HoverColor'];\n                            }\n                            if (selected) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'SelectedColor'];\n                            }\n                            if (activeHeader) {\n                                self.ctx.fillStyle = self.style[activeHeader + 'Color'];\n                            }\n                            self.ctx.font = (self.style[cellStyle + 'FontHeight'] * self.scale) + 'px ' + self.style[cellStyle + 'FontName'];\n                            cell.fontHeight = (self.style[cellStyle + 'FontHeight'] * self.scale);\n                            cell.treeArrowWidth = treeArrowSize;\n                            cell.orderByArrowWidth = orderByArrowSize;\n                            val = val !== undefined ? val : f\n                                ? f(ev) : '';\n                            if (val === undefined && !f) {\n                                val = '';\n                                console.warn('canvas-datagrid: Unknown format '\n                                    + header.type + ' add a cellFormater');\n                            }\n                            cell.formattedValue = ((val !== undefined && val !== null) ? val : '').toString();\n                            if (self.columnFilters && self.columnFilters[val] !== undefined && isHeader) {\n                                cell.formattedValue = self.attributes.filterTextPrefix + val;\n                            }\n                            if (!self.dispatchEvent('rendertext', ev)) {\n                                if (cell.innerHTML || header.type === 'html') {\n                                    drawHtml(cell);\n                                } else {\n                                    drawText(cell);\n                                }\n                            }\n                        }\n                    }\n                    if (active) {\n                        aCell = cell;\n                    }\n                    createBorderOverlayArray(cell, selectionBorders, 'selection');\n                    // createBorderOverlayArray calculates data for createHandlesOverlayArray so it must go 2nd\n                    createHandlesOverlayArray(cell);\n                    if (self.movingSelection) {\n                        createBorderOverlayArray(cell, moveBorders, 'move', self.moveOffset);\n                    }\n                    self.ctx.restore();\n                    x += cell.width + (bc ? 0 : self.style.cellBorderWidth);\n                    return cell.width;\n                };\n            }\n            function drawRowHeader(rowData, index, rowOrderIndex) {\n                var a;\n                if (self.attributes.showRowHeaders) {\n                    x = 0;\n                    rowHeaderCell = {'rowHeaderCell': index + 1 };\n                    rowHeaderCell[self.uniqueId] = rowData[self.uniqueId];\n                    a = {\n                        name: 'rowHeaderCell',\n                        width: self.style.rowHeaderCellWidth,\n                        style: 'rowHeaderCell',\n                        type: 'string',\n                        data: rowData[self.uniqueId],\n                        index: -1\n                    };\n                    a[self.uniqueId] = rowData[self.uniqueId];\n                    rowOpen = self.openChildren[rowData[self.uniqueId]];\n                    drawCell(rowHeaderCell, index, rowOrderIndex)(a, -1, -1);\n                }\n            }\n            function drawHeaders() {\n                var d, g = s.length, i, o, columnHeaderCell, header, nonFrozenHeaderWidth;\n                function drawHeaderColumnRange(start, end) {\n                    end = Math.min(end, g);\n                    for (o = start; o < end; o += 1) {\n                        i = self.orders.columns[o];\n                        header = s[i];\n                        d = {\n                            title: header.title,\n                            name: header.name,\n                            width: header.width,\n                            style: 'columnHeaderCell',\n                            type: 'string',\n                            index: o,\n                            order: i\n                        };\n                        columnHeaderCell = {'columnHeaderCell': header.title || header.name};\n                        columnHeaderCell[self.uniqueId] = 'h' + header[self.uniqueId];\n                        d[self.uniqueId] = header[self.uniqueId];\n                        x += drawCell(columnHeaderCell, -1, -1)(d, o, i);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                }\n                rowHeaders.forEach(function (rArgs, rhIndex) {\n                    y = rArgs[3];\n                    cellHeight = rArgs[4];\n                    if (rhIndex === self.frozenRow) {\n                        self.ctx.save();\n                        radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                        self.ctx.clip();\n                    }\n                    drawRowHeader(rArgs[0], rArgs[1], rArgs[2]);\n                });\n                self.ctx.restore();\n                if (self.attributes.showColumnHeaders) {\n                    x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    x += frozenColumnWidths;\n                    y = 0;\n                    // cell height might have changed during drawing\n                    cellHeight = self.getColumnHeaderCellHeight();\n                    drawHeaderColumnRange(self.scrollIndexLeft + self.frozenColumn, g);\n                    nonFrozenHeaderWidth = x;\n                    x = self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    drawHeaderColumnRange(0, self.frozenColumn);\n                    // fill in the space right of the headers\n                    x = nonFrozenHeaderWidth;\n                    if (x < w) {\n                        c = {\n                            name: '',\n                            width: self.style.scrollBarWidth,\n                            style: 'headerCellCap',\n                            isHeaderCell: true,\n                            isHeaderCellCap: true,\n                            type: 'string',\n                            index: s.length\n                        };\n                        c[self.uniqueId] = 'columnHeaderCell';\n                        drawCell({endCap: ''}, -1, -1)(c, -1, -1);\n                    }\n                    // fill in the space right of the headers\n                    if (self.attributes.showRowHeaders) {\n                        cornerCell = {'cornerCell': '' };\n                        cornerCell[self.uniqueId] = 'cornerCell';\n                        x = 0;\n                        c = {\n                            name: 'cornerCell',\n                            width: self.style.rowHeaderCellWidth,\n                            style: 'cornerCell',\n                            type: 'string',\n                            index: -1\n                        };\n                        c[self.uniqueId] = 'cornerCell';\n                        drawCell(cornerCell, -1, -1)(c, -1, -1);\n                    }\n                }\n            }\n            function drawRow(r, d) {\n                var i, treeHeight, rowSansTreeHeight, o, g = s.length;\n                if (y - (cellHeight * 2) > h) {\n                    return false;\n                }\n                rd = self.data[r];\n                rowOpen = self.openChildren[rd[self.uniqueId]];\n                rowSansTreeHeight = (self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight) * self.scale;\n                treeHeight = (rowOpen ? self.sizes.trees[rd[self.uniqueId]] : 0) * self.scale;\n                rowHeight = (rowSansTreeHeight + treeHeight);\n                if (y < -rowHeight) {\n                    return false;\n                }\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                cellHeight = rowHeight;\n                if (self.attributes.allowFreezingColumns) {\n                    x += frozenColumnWidths;\n                }\n                //draw normal columns\n                for (o = (self.scrollIndexLeft + self.frozenColumn); o < g; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        self.scrollIndexRight = o;\n                        self.scrollPixelRight = x;\n                        break;\n                    }\n                }\n                //draw frozen columns\n                x = 0;\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                for (o = 0; o < self.frozenColumn; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        break;\n                    }\n                }\n                self.lastFrozenColumnPixel = x;\n                // cell height might have changed during drawing\n                cellHeight = rowHeight;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                // don't draw a tree for the new row\n                treeGrid = self.childGrids[rd[self.uniqueId]];\n                if (r !== self.data.length && rowOpen) {\n                    treeGrid.visible = true;\n                    treeGrid.parentNode = {\n                        offsetTop: y + rowSansTreeHeight + self.canvasOffsetTop,\n                        offsetLeft: rowHeaderCellWidth - 1 + self.canvasOffsetLeft,\n                        offsetHeight: treeHeight,\n                        offsetWidth: self.width - rowHeaderCellWidth - self.style.scrollBarWidth - 1,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: self.style,\n                        nodeType: 'canvas-datagrid-tree',\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        rowIndex: r\n                    };\n                    self.visibleCells.unshift({\n                        rowIndex: r,\n                        columnIndex: 0,\n                        y: treeGrid.parentNode.offsetTop,\n                        x: treeGrid.parentNode.offsetLeft,\n                        height: treeGrid.height,\n                        width: treeGrid.width,\n                        style: 'tree-grid',\n                        type: treeGrid.parentNode.nodeType\n                    });\n                    treeGrid.draw();\n                } else if (treeGrid) {\n                    treeGrid.parentNode.offsetHeight = 0;\n                    delete self.sizes.trees[rd[self.uniqueId]];\n                }\n                rowHeaders.push([rd, r, d, y, rowHeight]);\n                self.visibleRowHeights[r] = rowHeight;\n                y += cellHeight + (bc ? 0 : self.style.cellBorderWidth);\n                return true;\n            }\n            function initDraw() {\n                self.visibleRows = [];\n                s = self.getVisibleSchema();\n                self.visibleCells = [];\n                self.canvasOffsetTop = self.isChildGrid ? self.parentNode.offsetTop : 0;\n                self.canvasOffsetLeft = self.isChildGrid ? self.parentNode.offsetLeft : 0;\n                h = self.height;\n                w = self.width;\n                if (!self.isChildGrid) {\n                    self.ctx.scale(window.devicePixelRatio, window.devicePixelRatio);\n                }\n            }\n            function drawBackground() {\n                radiusRect(0, 0, w, h, 0);\n                self.ctx.clip();\n                self.ctx.fillStyle = self.style.gridBackgroundColor;\n                fillRect(0, 0, w, h);\n            }\n            function drawFrozenRows() {\n                var n, ln = Math.min(self.data.length, self.frozenRow);\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                y = columnHeaderCellHeight;\n                for (r = 0; r < ln; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.allowFreezingRows) {\n                    // HACK great, another stupid magic number.\n                    // Background will appear as a 0.5px artifact behind the row freeze bar without this hack\n                    y += self.style.frozenMarkerBorderWidth + self.style.frozenMarkerWidth - 0.4999999999;\n                }\n                self.lastFrozenRowPixel = y;\n            }\n            function drawRows() {\n                self.ctx.save();\n                if (self.frozenRow > 0) {\n                    radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                    self.ctx.clip();\n                }\n                var o, n, i, g = s.length;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                if (!self.attributes.snapToRow) {\n                    y += -self.scrollBox.scrollTop + self.scrollPixelTop;\n                }\n                for (r = self.frozenRow + self.scrollIndexTop; r < l; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        self.scrollIndexBottom = r;\n                        self.scrollPixelBottom = y;\n                        break;\n                    }\n                }\n                if (self.attributes.showNewRow) {\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    rowHeight = cellHeight = self.style.cellHeight;\n                    rowOpen = false;\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        x += drawCell(self.newRow, self.data.length, self.data.length)(s[i], i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    rowHeaders.push([self.newRow, self.data.length, self.data.length, y, rowHeight]);\n                }\n                self.ctx.restore();\n            }\n            function drawMoveMarkers() {\n                if (!self.movingSelection) { return; }\n                self.ctx.lineWidth = self.style.moveOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.moveOverlayBorderColor;\n                self.ctx.setLineDash(self.style.moveOverlayBorderSegments);\n                moveBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n                self.ctx.setLineDash([]);\n            }\n            function drawReorderMarkers() {\n                if (!self.reorderObject) { return; }\n                var b = {\n                        height: self.reorderObject.height,\n                        width: self.reorderObject.width,\n                        x: self.reorderObject.x + self.reorderObject.dragOffset.x,\n                        y: self.reorderObject.y + self.reorderObject.dragOffset.y\n                    },\n                    m = {\n                        width: w,\n                        height: h,\n                        x: 0,\n                        y: 0\n                    };\n                self.ctx.fillStyle = self.style.reorderMarkerBackgroundColor;\n                self.ctx.lineWidth = self.style.reorderMarkerBorderWidth;\n                self.ctx.strokeStyle = self.style.reorderMarkerBorderColor;\n                if (self.dragMode === 'row-reorder') {\n                    b.width = w;\n                    b.x = 0;\n                    m.width = w;\n                    m.height = self.currentCell.height;\n                    m.y = self.currentCell.y;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.rowIndex !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex > -1\n                            && self.currentCell.rowIndex < l) {\n                        addBorderLine(m, self.reorderTarget.sortRowIndex > self.reorderObject.sortRowIndex ? 'b' : 't');\n                    }\n                } else if (self.dragMode === 'column-reorder' && self.reorderObject) {\n                    b.height = h;\n                    b.y = 0;\n                    m.height = h;\n                    m.width = self.currentCell.width;\n                    m.y = 0;\n                    m.x = self.currentCell.x;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.columnIndex !== self.reorderObject.columnIndex\n                            && self.currentCell.columnIndex > -1\n                            && self.currentCell.columnIndex < s.length) {\n                        addBorderLine(m, self.reorderTarget.sortColumnIndex > self.reorderObject.sortColumnIndex ? 'r' : 'l');\n                    }\n                }\n            }\n            function drawBorder() {\n                self.ctx.lineWidth = self.style.gridBorderWidth;\n                self.ctx.strokeStyle = self.style.gridBorderColor;\n                strokeRect(0, 0, self.width, self.height);\n            }\n            function drawSelectionBorders() {\n                self.ctx.lineWidth = self.style.selectionOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.selectionOverlayBorderColor;\n                function dsb(c) {\n                    addBorderLine(c[0], c[1]);\n                }\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.save();\n                clipFrozenArea(0);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(1);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(2);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n            }\n            function drawSelectionHandles() {\n                if (self.mobile || self.attributes.allowMovingSelection) {\n                    self.ctx.lineWidth = self.style.selectionHandleBorderWidth;\n                    self.ctx.strokeStyle = self.style.selectionHandleBorderColor;\n                    self.ctx.fillStyle = self.style.selectionHandleColor;\n                    selectionHandles.forEach(function (c) {\n                        addselectionHandle(c[0], c[1]);\n                        var az = self.attributes.touchSelectHandleZone / 2,\n                            ax = c[0].x + (c[1] === 'tl' || c[1] === 'bl' ? 0 : c[0].width) - az,\n                            ay = c[0].y + (c[1] === 'bl' || c[1] === 'br' ? c[0].height : 0) - az;\n                        self.visibleCells.unshift({\n                            x: ax,\n                            y: ay,\n                            height: self.style.selectionHandleSize + az,\n                            width: self.style.selectionHandleSize + az,\n                            style: 'selection-handle-' + c[1]\n                        });\n                    });\n                }\n            }\n            function drawActiveCell() {\n                if (!aCell) { return; }\n                self.ctx.save();\n                var cl = self.activeCell.columnIndex + 1 > self.frozenColumn || self.activeCell.rowIndex + 1 > self.frozenRow,\n                    acx = cl ? self.lastFrozenColumnPixel : 0,\n                    acy = cl ? self.lastFrozenRowPixel : 0,\n                    acw = cl ? self.width - self.lastFrozenColumnPixel : self.width,\n                    ach = cl ? self.height - self.lastFrozenRowPixel : self.height;\n                radiusRect(acx, acy, acw, ach, 0);\n                self.ctx.clip();\n                if (self.attributes.selectionMode === 'row') {\n                    if (self.activeCell && self.activeCell.rowIndex === aCell.rowIndex) {\n                        self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                        self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                        strokeRect(0, aCell.y, self.getHeaderWidth() + rowHeaderCellWidth, self.visibleRowHeights[aCell.rowIndex]);\n                    }\n                } else {\n                    self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                    self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                    strokeRect(aCell.x, aCell.y, aCell.width, aCell.height);\n                }\n                self.ctx.restore();\n            }\n            function drawFrozenMarkers() {\n                var my = self.lastFrozenRowPixel - self.style.frozenMarkerWidth,\n                    mx = self.lastFrozenColumnPixel - self.style.frozenMarkerBorderWidth,\n                    xHover = self.currentCell && self.currentCell.style === 'frozen-row-marker',\n                    yHover = self.currentCell && self.currentCell.style === 'frozen-column-marker';\n                self.ctx.lineWidth = self.style.frozenMarkerBorderWidth;\n                if (self.attributes.allowFreezingColumns) {\n                    self.ctx.fillStyle = yHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = yHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    strokeRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    self.visibleCells.unshift({\n                        x: mx,\n                        y: 0,\n                        height: self.height,\n                        width: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        style: 'frozen-column-marker'\n                    });\n                }\n                if (self.attributes.allowFreezingRows) {\n                    self.ctx.fillStyle = xHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = xHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    strokeRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    self.visibleCells.unshift({\n                        x: 0,\n                        y: my,\n                        height: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        width: self.width,\n                        style: 'frozen-row-marker'\n                    });\n                }\n                if (self.freezeMarkerPosition) {\n                    self.ctx.fillStyle = self.style.frozenMarkerActiveColor;\n                    self.ctx.strokeStyle = self.style.frozenMarkerActiveBorderColor;\n                    if (self.dragMode === 'frozen-column-marker') {\n                        fillRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                        strokeRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                    } else {\n                        fillRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                        strokeRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                    }\n                }\n            }\n            function drawPerfLines() {\n                if (!self.attributes.showPerformance) { return; }\n                var pw = 250,\n                    px = self.width - pw - self.style.scrollBarWidth - (self.style.scrollBarBorderWidth * 2),\n                    py = columnHeaderCellHeight,\n                    ph = 100;\n                if (scrollDebugCounters.length === 0) { scrollDebugCounters = self.fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (touchPPSCounters.length === 0) { touchPPSCounters = self.fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (entityCount.length === 0) { entityCount = self.fillArray(0, perfWindowSize, 1, 0); }\n                self.ctx.lineWidth = 0.5;\n                function dpl(name, perfArr, arrIndex, max, color, useAbs, rowIndex) {\n                    var v;\n                    drawPerfLine(pw, ph, px, py, perfArr, arrIndex, max, color, useAbs);\n                    self.ctx.fillStyle = color;\n                    fillRect(3 + px, py + 9 + (rowIndex * 11), 8, 8);\n                    self.ctx.fillStyle = '#999999';\n                    v = arrIndex !== undefined ? perfArr[0][arrIndex] : perfArr[0];\n                    fillText(name + ' ' + (isNaN(v) ? 0 : v).toFixed(3), 14 + px, py + 16 + (rowIndex * 11));\n                }\n                self.ctx.textAlign = 'left';\n                self.ctx.font = '8px sans-serif';\n                self.ctx.fillStyle = 'rgba(29, 25, 26, 1.00)';\n                fillRect(px, py, pw, ph);\n                [['Scroll Height', scrollDebugCounters, 0, self.scrollBox.scrollHeight, 'rgba(248, 33, 103, 1.00)', false],\n                    ['Scroll Width', scrollDebugCounters, 1, self.scrollBox.scrollWidth, 'rgba(66, 255, 27, 1.00)', false],\n                    ['Performance', perfCounters, undefined, 200, 'rgba(252, 255, 37, 1.00)', false],\n                    ['Entities', entityCount, undefined, 1500, 'rgba(76, 231, 239, 1.00)', false],\n                    ['TouchPPSX', touchPPSCounters, 0, 1000, 'rgba(246, 102, 24, 1.00)', true],\n                    ['TouchPPSY', touchPPSCounters, 1, 1000, 'purple', true]\n                    ].forEach(function (i, index) {\n                    i.push(index);\n                    dpl.apply(null, i);\n                });\n                self.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n                entityCount.pop();\n                entityCount.unshift(self.visibleCells.length);\n                scrollDebugCounters.pop();\n                scrollDebugCounters.unshift([self.scrollBox.scrollTop, self.scrollBox.scrollLeft]);\n                touchPPSCounters.pop();\n                touchPPSCounters.unshift([self.yPPS, self.xPPS]);\n            }\n            function drawDebug() {\n                self.ctx.save();\n                var d;\n                if (self.attributes.showPerformance || self.attributes.debug) {\n                    if (perfCounters.length === 0) { perfCounters = self.fillArray(0, perfWindowSize, 1, 0); }\n                    perfCounters.pop();\n                    perfCounters.unshift(performance.now() - p);\n                }\n                if (!self.attributes.debug) {\n                    self.ctx.restore();\n                    return;\n                }\n                self.ctx.font = '14px sans-serif';\n                d = {};\n                d.perf = (perfCounters.reduce(function (a, b) {\n                    return a + b;\n                }, 0) / Math.min(drawCount, perfCounters.length)).toFixed(1);\n                d.htmlImages = Object.keys(self.htmlImageCache).length;\n                d.reorderObject = 'x: ' + (self.reorderObject || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderObject || {rowIndex: 0}).rowIndex;\n                d.reorderTarget = 'x: ' + (self.reorderTarget || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderTarget || {rowIndex: 0}).rowIndex;\n                d.scale = self.scale;\n                d.startScale = self.startScale;\n                d.scaleDelta = self.scaleDelta;\n                d.zoomDeltaStart = self.zoomDeltaStart;\n                d.touchLength = self.touchLength;\n                d.touches = 'y0: ' + (self.touchPosition || {y: 0}).y + ' y1: ' + (self.touchPosition1 || {y: 0}).y;\n                d.scrollBox = self.scrollBox.toString();\n                d.scrollIndex = 'x: ' + self.scrollIndexLeft + ', y: ' + self.scrollIndexTop;\n                d.scrollPixel = 'x: ' + self.scrollPixelLeft + ', y: ' + self.scrollPixelTop;\n                d.canvasOffset = 'x: ' + self.canvasOffsetLeft + ', y: ' + self.canvasOffsetTop;\n                d.touchDelta = 'x: ' + self.touchDelta.x + ', y: ' + self.touchDelta.y;\n                d.touchAnimateTo = 'x: ' + self.touchAnimateTo.x + ', y: ' + self.touchAnimateTo.y;\n                d.scrollAnimation = 'x: ' + self.scrollAnimation.x + ', y: ' + self.scrollAnimation.y;\n                d.touchPPS = 'x: ' + self.xPPS + ', y: ' + self.yPPS;\n                d.touchPPST = 'x: ' + self.xPPST + ', y: ' + self.yPPST;\n                d.touchDuration = self.touchDuration;\n                d.pointerLockPosition =  self.pointerLockPosition ?\n                        self.pointerLockPosition.x + ', ' + self.pointerLockPosition.y : '';\n                d.size = 'w: ' + self.width + ', h: ' + self.height;\n                d.mouse = 'x: ' + self.mouse.x + ', y: ' + self.mouse.y;\n                d.touch = !self.touchStart\n                    ? '' : 'x: ' + self.touchStart.x + ', y: ' + self.touchStart.y;\n                d.entities = self.visibleCells.length;\n                d.hasFocus = self.hasFocus;\n                d.dragMode = self.dragMode;\n                if (self.currentCell) {\n                    d.columnIndex = self.currentCell.columnIndex;\n                    d.rowIndex = self.currentCell.rowIndex;\n                    d.sortColumnIndex = self.currentCell.sortColumnIndex;\n                    d.sortRowIndex = self.currentCell.sortRowIndex;\n                    d.context = self.currentCell.context;\n                    d.dragContext = self.currentCell.dragContext;\n                    d.style = self.currentCell.style;\n                    d.type = self.currentCell.type;\n                }\n                self.ctx.textAlign = 'right';\n                self.ctx.fillStyle = 'rgba(0, 0, 0, .60)';\n                fillRect(0, 0, self.width, self.height);\n                Object.keys(d).forEach(function (key, index) {\n                    var m = key + ': ' + d[key],\n                        lh = 14;\n                    self.ctx.fillStyle = 'rgba(37, 254, 21, 1)';\n                    fillText(m, w - 20, 140 + (index * lh));\n                });\n                self.ctx.restore();\n            }\n            self.ctx.save();\n            initDraw();\n            drawBackground();\n            drawFrozenRows();\n            drawRows();\n            drawActiveCell();\n            drawHeaders();\n            drawFrozenMarkers();\n            drawSelectionBorders();\n            drawSelectionHandles();\n            drawReorderMarkers();\n            drawMoveMarkers();\n            drawScrollBars();\n            if (checkScrollHeight) {\n                self.resize(true);\n            }\n            drawBorder();\n            drawDebug();\n            drawPerfLines();\n            if (self.dispatchEvent('afterdraw', {})) { return; }\n            self.ctx.restore();\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var wheeling;\n        self.stopPropagation = function (e) { e.stopPropagation(); };\n        /**\n         * Adds an event listener to the given event.\n         * @memberof canvasDatagrid\n         * @name addEventListener\n         * @method\n         * @param {string} ev The name of the event to subscribe to.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.addEventListener = function (ev, fn) {\n            self.events[ev] = self.events[ev] || [];\n            self.events[ev].unshift(fn);\n        };\n        /**\n         * Removes the given listener function from the given event.  Must be an actual reference to the function that was bound.\n         * @memberof canvasDatagrid\n         * @name removeEventListener\n         * @method\n         * @param {string} ev The name of the event to unsubscribe from.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.removeEventListener = function (ev, fn) {\n            (self.events[ev] || []).forEach(function removeEachListener(sfn, idx) {\n                if (fn === sfn) {\n                    self.events[ev].splice(idx, 1);\n                }\n            });\n        };\n        /**\n         * Fires the given event, padding an event object to the event subscribers.\n         * @memberof canvasDatagrid\n         * @name dispatchEvent\n         * @method\n         * @param {number} ev The name of the event to dispatch.\n         * @param {number} e The event object.\n         */\n        self.dispatchEvent = function (ev, e) {\n            var defaultPrevented;\n            function preventDefault() {\n                defaultPrevented = true;\n            }\n            if (!self.events[ev]) { return; }\n            self.events[ev].forEach(function dispatchEachEvent(fn) {\n                e.ctx = self.ctx;\n                e.preventDefault = preventDefault;\n                fn.apply(self.intf, [e]);\n            });\n            return defaultPrevented;\n        };\n        self.resize = function (drawAfterResize) {\n            if (!self.canvas) { return; }\n            var bm = self.style.borderCollapse === 'collapse' ? 1 : 2,\n                cellBorder = self.style.cellBorderWidth * bm,\n                columnHeaderCellBorder = self.style.columnHeaderCellBorderWidth * bm,\n                scrollHeight,\n                scrollWidth,\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                ch = self.style.cellHeight,\n                // TODO: What the hell are these numbers!?  They are probably some value in the style.\n                scrollDragPositionOffsetY = 30,\n                scrollDragPositionOffsetX = 15;\n            scrollHeight = self.data.reduce(function reduceData(accumulator, row, rowIndex) {\n                return accumulator\n                    + (((self.sizes.rows[row[self.uniqueId]] || ch) + (self.sizes.trees[row[self.uniqueId]] || 0)) * self.scale)\n                    + cellBorder\n                    // HACK? if an expanded tree row is frozen it is necessary to add the tree row's height a second time.\n                    + (self.frozenRow > rowIndex ? (self.sizes.trees[row[self.uniqueId]] || 0) : 0);\n            }, 0) || 0;\n            scrollWidth = self.getVisibleSchema().reduce(function reduceSchema(accumulator, column) {\n                if (column.hidden) { return accumulator; }\n                return accumulator + ((self.sizes.columns[column[self.uniqueId]] || column.width || self.style.cellWidth) * self.scale) + cellBorder;\n            }, 0) || 0;\n            if (self.isChildGrid) {\n                self.width = self.parentNode.offsetWidth;\n                self.height = self.parentNode.offsetHeight;\n            } else {\n                self.height = self.canvas.offsetHeight;\n                self.width = self.canvas.offsetWidth;\n                self.canvas.width = self.width * window.devicePixelRatio;\n                self.canvas.height = self.height * window.devicePixelRatio;\n                self.canvasOffsetLeft = self.args.canvasOffsetLeft || 0;\n                self.canvasOffsetTop = self.args.canvasOffsetTop || 0;\n            }\n            if (self.attributes.showNewRow) {\n                scrollHeight += ch + cellBorder;\n            }\n            self.scrollBox.width = self.width - rowHeaderCellWidth;\n            self.scrollBox.height = self.height - columnHeaderCellHeight - columnHeaderCellBorder;\n            self.scrollBox.top = columnHeaderCellHeight + columnHeaderCellBorder;\n            self.scrollBox.left = rowHeaderCellWidth;\n            self.scrollBox.scrollHeight = scrollHeight + self.style.scrollBarWidth - self.scrollBox.height;\n            self.scrollBox.scrollWidth = scrollWidth + self.style.scrollBarWidth - self.scrollBox.width;\n            self.scrollBox.widthBoxRatio = ((self.scrollBox.width - scrollDragPositionOffsetX)\n                / (self.scrollBox.scrollWidth + self.scrollBox.width - scrollDragPositionOffsetX));\n            self.scrollBox.scrollBoxWidth = self.scrollBox.width\n                * self.scrollBox.widthBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.heightBoxRatio = ((self.scrollBox.height - scrollDragPositionOffsetY)\n                / (self.scrollBox.scrollHeight + (self.scrollBox.height - scrollDragPositionOffsetY)));\n            self.scrollBox.scrollBoxHeight = self.scrollBox.height\n                * self.scrollBox.heightBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.scrollBoxWidth = Math.max(self.scrollBox.scrollBoxWidth, self.style.scrollBarBoxMinSize);\n            self.scrollBox.scrollBoxHeight = Math.max(self.scrollBox.scrollBoxHeight, self.style.scrollBarBoxMinSize);\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            self.resizeEditInput();\n            self.scroll(true);\n            if (drawAfterResize) {\n                self.draw(true);\n            }\n            self.dispatchEvent('resize', {});\n            return true;\n        };\n        self.scroll = function (dontDraw) {\n            var bm = self.style.borderCollapse === 'collapse' ? 1 : 2,\n                s = self.getVisibleSchema(),\n                cellBorder = self.style.cellBorderWidth * bm,\n                ch = self.style.cellHeight;\n            self.scrollIndexTop = 0;\n            self.scrollPixelTop = 0;\n            self.scrollIndexLeft = 0;\n            self.scrollPixelLeft = 0;\n            while (self.scrollPixelTop < self.scrollBox.scrollTop && self.scrollIndexTop < self.data.length) {\n                self.scrollPixelTop +=\n                    (((self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || ch)\n                        + (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0)) * self.scale)\n                    + cellBorder;\n                self.scrollIndexTop += 1;\n            }\n            while (self.scrollPixelLeft < self.scrollBox.scrollLeft && self.scrollIndexLeft < s.length) {\n                self.scrollPixelLeft +=\n                    ((self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width) * self.scale)\n                    + cellBorder;\n                self.scrollIndexLeft += 1;\n            }\n            if (self.data.length > 0) {\n                self.scrollIndexLeft = Math.max(self.scrollIndexLeft - 1, 0);\n                self.scrollPixelLeft = Math.max(self.scrollPixelLeft\n                    - ((self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width) * self.scale), 0);\n                self.scrollIndexTop = Math.max(self.scrollIndexTop - 1, 0);\n                self.scrollPixelTop = Math.max((self.scrollPixelTop\n                    - ((self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || ch)\n                    + (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0)) * self.scale), 0);\n            }\n            self.ellipsisCache = {};\n            if (!dontDraw) {\n                self.draw(true);\n            }\n            //TODO: figure out why this has to be delayed for child grids\n            //BUG: wheeling event on 3rd level hierarchy fails to move input box\n            requestAnimationFrame(self.resizeEditInput);\n            self.dispatchEvent('scroll', {top: self.scrollBox.scrollTop, left: self.scrollBox.scrollLeft});\n        };\n        self.mousemove = function (e, overridePos) {\n            if (self.contextMenu || self.input) {\n                return;\n            }\n            self.mouse = overridePos || self.getLayerPos(e);\n            var ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                i,\n                vs = self.getVisibleSchema(),\n                dragBounds,\n                sBounds,\n                x = self.mouse.x,\n                y = self.mouse.y,\n                o = self.getCellAt(x, y),\n                delta,\n                ev = {NativeEvent: e, cell: o, x: x, y: y},\n                previousCell = self.currentCell;\n            clearTimeout(self.scrollTimer);\n            if (!self.isInGrid({x: x, y: y})) {\n                self.hasFocus = false;\n            }\n            if (self.dispatchEvent('mousemove', ev)) {\n                return;\n            }\n            if (o && self.currentCell && (self.currentCell.rowIndex !== o.rowIndex\n                    || self.currentCell.columnIndex !== o.columnIndex)) {\n                self.cellBoundaryCrossed = true;\n                ev.cell = previousCell;\n                self.dispatchEvent('cellmouseout', ev);\n                ev.cell = o;\n                self.dispatchEvent('cellmouseover', ev);\n            }\n            self.currentCell = o;\n            if (!self.hasFocus) {\n                return;\n            }\n            self.hovers = {};\n            if (!self.draggingItem\n                    && o\n                    && self.scrollModes.indexOf(o.context) === -1) {\n                self.dragItem = o;\n                self.dragMode = o.dragContext;\n                self.canvas.style.cursor = o.context;\n                if (o.context === 'cell' && o.data) {\n                    self.canvas.style.cursor = 'default';\n                    self.hovers[o.data[self.uniqueId]] = [o.columnIndex];\n                }\n                if ((self.selecting || self.reorderObject)\n                        && o.context === 'cell'\n                        && o.data) {\n                    sBounds = self.getSelectionBounds();\n                    delta = {\n                        x: Math.abs(self.dragStart.x - x),\n                        y: Math.abs(self.dragStart.y - y)\n                    };\n                    if (self.dragStartObject.columnIndex !== -1 && e.shiftKey) {\n                        self.dragStartObject = {\n                            rowIndex: self.activeCell.rowIndex,\n                            columnIndex: self.activeCell.columnIndex\n                        };\n                    }\n                    dragBounds = {\n                        top: Math.min(self.dragStartObject.rowIndex, o.rowIndex),\n                        left: Math.min(self.dragStartObject.columnIndex, o.columnIndex),\n                        bottom: Math.max(self.dragStartObject.rowIndex, o.rowIndex),\n                        right: Math.max(self.dragStartObject.columnIndex, o.columnIndex)\n                    };\n                    if (self.dragStartObject.columnIndex === -1) {\n                        dragBounds.left = -1;\n                        dragBounds.right = vs.length - 1;\n                        dragBounds.top = Math.min(sBounds.top, o.rowIndex);\n                        dragBounds.bottom = Math.max(sBounds.bottom, o.rowIndex);\n                    }\n                    if (self.dragStartObject.rowIndex !== o.rowIndex\n                                || self.dragStartObject.columnIndex !== o.columnIndex) {\n                        self.ignoreNextClick = true;\n                    }\n                    if (self.cellBoundaryCrossed || (delta.x === 0 && delta.y === 0) || (self.attributes.selectionMode === 'row')) {\n                        if ((self.attributes.selectionMode === 'row') || self.dragStartObject.columnIndex === -1) {\n                            self.selectRow(o.rowIndex, ctrl, null, true);\n                        } else {\n                            if (!self.dragAddToSelection && o.rowIndex !== undefined) {\n                                if (self.selections[o.rowIndex] && self.selections[o.rowIndex].indexOf(o.columnIndex) !== -1) {\n                                    self.selections[o.rowIndex].splice(self.selections[o.rowIndex].indexOf(o.columnIndex), 1);\n                                }\n                            } else {\n                                self.selections[o.rowIndex] = self.selections[o.rowIndex] || [];\n                                if (self.selections[o.rowIndex].indexOf(o.columnIndex) === -1) {\n                                    self.selections[o.rowIndex].push(o.columnIndex);\n                                }\n                            }\n                        }\n                    }\n                    if ((!self.selectionBounds || (dragBounds.top !== self.selectionBounds.top\n                            || dragBounds.left !== self.selectionBounds.left\n                            || dragBounds.bottom !== self.selectionBounds.bottom\n                            || dragBounds.right !== self.selectionBounds.right)) && !ctrl) {\n                        self.selections = [];\n                        sBounds = dragBounds;\n                        if (self.attributes.selectionMode === 'row') {\n                            for (i = sBounds.top; i <= sBounds.bottom; i += 1) {\n                                self.selectRow(i, true, null, true);\n                            }\n                        } else {\n                            self.selectArea(sBounds, true);\n                        }\n                    }\n                    self.autoScrollZone(e, x, y, ctrl);\n                }\n            }\n            self.cellBoundaryCrossed = false;\n            self.draw(true);\n        };\n        self.click = function (e, overridePos) {\n            var i,\n                ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                pos = overridePos || self.getLayerPos(e);\n            self.currentCell = self.getCellAt(pos.x, pos.y);\n            if (self.currentCell.grid !== undefined) {\n                return;\n            }\n            function checkSelectionChange() {\n                self.dispatchEvent('selectionchanged', {\n                    selectedData: self.getSelectedData(),\n                    selections: self.selections,\n                    selectionBounds: self.selectionBounds\n                });\n            }\n            if (self.input) {\n                self.endEdit();\n            }\n            if (self.ignoreNextClick) {\n                self.ignoreNextClick = false;\n                return;\n            }\n            i = self.currentCell;\n            if (self.dispatchEvent('click', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (['rowHeaderCell', 'columnHeaderCell'].indexOf(self.currentCell.style) === -1 && !ctrl) {\n                self.setActiveCell(i.columnIndex, i.rowIndex);\n            }\n            if (self.currentCell.context === 'cell') {\n                if (self.currentCell.style === 'cornerCell') {\n                    self.selectAll();\n                    self.draw();\n                    checkSelectionChange();\n                    return;\n                }\n                if (self.currentCell.style === 'columnHeaderCell') {\n                    if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                        if (self.orderBy === i.header.name) {\n                            self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                        } else {\n                            self.orderDirection = 'asc';\n                        }\n                        self.order(i.header.name, self.orderDirection);\n                        checkSelectionChange();\n                        return;\n                    }\n                    if (self.attributes.columnHeaderClickBehavior === 'select') {\n                        self.selectColumn(i.header.index, ctrl, e.shiftKey, true);\n                        checkSelectionChange();\n                        self.draw();\n                        return;\n                    }\n                }\n                self.selections[i.rowIndex] = self.selections[i.rowIndex] || [];\n                if (((self.attributes.selectionMode === 'row') || self.currentCell.style === 'rowHeaderCell')) {\n                    if (self.currentCell.style === 'rowHeaderCell'\n                            && self.attributes.tree && pos.x > 0\n                            && pos.x - self.currentCell.x < self.style.treeArrowWidth\n                            + self.style.treeArrowMarginLeft\n                            + self.style.treeArrowMarginRight + self.style.treeArrowClickRadius\n                            && pos.y - self.currentCell.y < self.style.treeArrowHeight\n                            + self.style.treeArrowMarginTop + self.style.treeArrowClickRadius\n                            && pos.y > 0) {\n                        self.toggleTree(i.rowIndex);\n                        return;\n                    }\n                }\n                if (e.shiftKey && !ctrl) {\n                    self.selectionBounds = self.getSelectionBounds();\n                    self.selectArea(undefined, false);\n                }\n            }\n            checkSelectionChange();\n            self.draw(true);\n        };\n        self.dragResizeColumn = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = self.resizingStartingWidth + pos.x - self.dragStart.x;\n            y = self.resizingStartingHeight + pos.y - self.dragStart.y;\n            if (x < self.style.minColumnWidth) {\n                x = self.style.minColumnWidth;\n            }\n            if (y < self.style.minRowHeight) {\n                y = self.style.minRowHeight;\n            }\n            if (self.dispatchEvent('resizecolumn', {x: x, y: y, draggingItem: self.draggingItem})) { return false; }\n            if (self.scrollBox.scrollLeft > self.scrollBox.scrollWidth - self.attributes.resizeScrollZone\n                    && self.dragMode === 'ew-resize') {\n                self.resize(true);\n                self.scrollBox.scrollLeft += x;\n            }\n            if (self.dragMode === 'ew-resize') {\n                self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] = x;\n                if (['rowHeaderCell', 'cornerCell'].indexOf(self.draggingItem.header.style) !== -1) {\n                    self.resize(true);\n                }\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.dragMode === 'ns-resize') {\n                if (self.draggingItem.rowOpen) {\n                    self.sizes.trees[self.draggingItem.data[self.uniqueId]] = y;\n                } else if (self.attributes.globalRowResize) {\n                    self.style.cellHeight = y;\n                } else {\n                    self.sizes.rows[self.draggingItem.data[self.uniqueId]] = y;\n                }\n                self.dispatchEvent('resizerow', {row: y});\n                self.resizeChildGrids();\n                return;\n            }\n            self.ellipsisCache = {};\n        };\n        self.stopDragResize = function () {\n            self.resize();\n            document.body.removeEventListener('mousemove', self.dragResizeColumn, false);\n            document.body.removeEventListener('mouseup', self.stopDragResize, false);\n            self.setStorageData();\n            self.draw(true);\n            self.ignoreNextClick = true;\n        };\n        self.scrollGrid = function (e) {\n            var pos = self.getLayerPos(e);\n            if (self.attributes.scrollPointerLock && self.pointerLockPosition\n                    && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                self.pointerLockPosition.x += e.movementX;\n                self.pointerLockPosition.y += e.movementY;\n                self.pointerLockPosition.x = Math.min(self.width - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.x));\n                self.pointerLockPosition.y = Math.min(self.height - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.y));\n                pos = self.pointerLockPosition;\n            }\n            self.scrollMode = self.getCellAt(pos.x, pos.y).context;\n            if (self.scrollMode === 'horizontal-scroll-box' && self.scrollStartMode !== 'horizontal-scroll-box') {\n                self.scrollStartMode = 'horizontal-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.left = self.scrollBox.scrollLeft;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box' && self.scrollStartMode !== 'vertical-scroll-box') {\n                self.scrollStartMode = 'vertical-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.top = self.scrollBox.scrollTop;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollStartMode === 'vertical-scroll-box'\n                    && self.scrollMode !== 'vertical-scroll-box') {\n                self.scrollMode = 'vertical-scroll-box';\n            }\n            if (self.scrollStartMode === 'horizontal-scroll-box'\n                    && self.scrollMode !== 'horizontal-scroll-box') {\n                self.scrollMode = 'horizontal-scroll-box';\n            }\n            clearTimeout(self.scrollTimer);\n            if (self.scrollModes.indexOf(self.scrollMode) === -1) {\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box') {\n                self.scrollBox.scrollTop = self.scrollStart.top + ((pos.y - self.dragStart.y)\n                    / self.scrollBox.heightBoxRatio);\n            } else if (self.scrollMode === 'vertical-scroll-top') {\n                self.scrollBox.scrollTop -= (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'vertical-scroll-bottom') {\n                self.scrollBox.scrollTop += (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n            if (self.scrollMode === 'horizontal-scroll-box') {\n                self.scrollBox.scrollLeft = self.scrollStart.left + ((pos.x - self.dragStart.x)\n                    / self.scrollBox.widthBoxRatio);\n            } else if (self.scrollMode === 'horizontal-scroll-right') {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'horizontal-scroll-left') {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.stopScrollGrid = function () {\n            clearTimeout(self.scrollTimer);\n            if (document.exitPointerLock) {\n                document.exitPointerLock();\n            }\n            document.body.removeEventListener('mousemove', self.scrollGrid, false);\n        };\n        self.dragReorder = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = pos.x - self.dragStart.x;\n            y = pos.y - self.dragStart.y;\n            if (!self.attributes.allowColumnReordering && self.dragMode === 'column-reorder') {\n                return;\n            }\n            if (!self.attributes.allowRowReordering && self.dragMode === 'row-reorder') {\n                return;\n            }\n            if (self.dispatchEvent('reordering', {\n                    NativeEvent: e,\n                    source: self.dragStartObject,\n                    target: self.currentCell,\n                    dragMode: self.dragMode\n                })) {\n                return;\n            }\n            if (Math.abs(x) > self.attributes.reorderDeadZone || Math.abs(y) > self.attributes.reorderDeadZone) {\n                self.reorderObject = self.draggingItem;\n                self.reorderTarget = self.currentCell;\n                self.reorderObject.dragOffset = {\n                    x: x,\n                    y: y\n                };\n                self.autoScrollZone(e, pos.x, pos.y, false);\n            }\n        };\n        self.stopDragReorder = function (e) {\n            var oIndex,\n                tIndex,\n                cr = {\n                    'row-reorder': self.orders.rows,\n                    'column-reorder': self.orders.columns\n                },\n                i = {\n                    'row-reorder': 'rowIndex',\n                    'column-reorder': 'columnIndex'\n                }[self.dragMode];\n            document.body.removeEventListener('mousemove', self.dragReorder, false);\n            document.body.removeEventListener('mouseup', self.stopDragReorder, false);\n            if (self.reorderObject\n                    && self.reorderTarget\n                    && ((self.dragMode === 'column-reorder' && self.reorderTarget.columnIndex > -1\n                        && self.reorderTarget.columnIndex < self.getVisibleSchema().length)\n                    || (self.dragMode === 'row-reorder' && self.reorderTarget.rowIndex > -1\n                        && self.reorderTarget.rowIndex < self.data.length))\n                    && self.reorderObject[i] !== self.reorderTarget[i]\n                    && !self.dispatchEvent('reorder', {\n                        NativeEvent: e,\n                        source: self.reorderObject,\n                        target: self.reorderTarget,\n                        dragMode: self.dragMode\n                    })) {\n                self.ignoreNextClick = true;\n                oIndex = cr[self.dragMode].indexOf(self.reorderObject[i]);\n                tIndex = cr[self.dragMode].indexOf(self.reorderTarget[i]);\n                cr[self.dragMode].splice(oIndex, 1);\n                cr[self.dragMode].splice(tIndex, 0, self.reorderObject[i]);\n                self.setStorageData();\n            }\n            self.reorderObject = undefined;\n            self.reorderTarget = undefined;\n            self.draw(true);\n        };\n        self.dragMove = function (e) {\n            if (self.dispatchEvent('moving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.moveOffset = {\n                x: self.currentCell.columnIndex - self.dragStartObject.columnIndex,\n                y: self.currentCell.rowIndex - self.dragStartObject.rowIndex\n            };\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopDragMove = function (e) {\n            document.body.removeEventListener('mousemove', self.dragMove, false);\n            document.body.removeEventListener('mouseup', self.stopDragMove, false);\n            var b = self.getSelectionBounds();\n            if (self.dispatchEvent('endmove', {NativeEvent: e, cell: self.currentCell})) {\n                self.movingSelection = undefined;\n                self.moveOffset = undefined;\n                self.draw(true);\n                return;\n            }\n            if (self.moveOffset) {\n                self.moveTo(self.movingSelection, b.left + self.moveOffset.x, b.top + self.moveOffset.y);\n                self.moveSelection(self.moveOffset.x, self.moveOffset.y);\n            }\n            self.movingSelection = undefined;\n            self.moveOffset = undefined;\n            self.draw(true);\n        };\n        self.freezeMove = function (e) {\n            if (self.dispatchEvent('freezemoving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.ignoreNextClick = true;\n            self.freezeMarkerPosition = pos;\n            if (self.currentCell && self.currentCell.rowIndex !== undefined && self.dragMode === 'frozen-row-marker') {\n                self.scrollBox.scrollTop = 0;\n                self.frozenRow = self.currentCell.rowIndex + 1;\n            }\n            if (self.currentCell && self.currentCell.columnIndex !== undefined && self.dragMode === 'frozen-column-marker') {\n                self.scrollBox.scrollLeft = 0;\n                self.frozenColumn = self.currentCell.columnIndex + 1;\n            }\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopFreezeMove = function (e) {\n            document.body.removeEventListener('mousemove', self.freezeMove, false);\n            document.body.removeEventListener('mouseup', self.stopFreezeMove, false);\n            self.freezeMarkerPosition = undefined;\n            if (self.dispatchEvent('endfreezemove', {NativeEvent: e})) {\n                self.frozenRow = self.startFreezeMove.x;\n                self.frozenColumn = self.startFreezeMove.y;\n                self.draw(true);\n                return;\n            }\n            self.draw(true);\n        };\n        self.mousedown = function (e, overridePos) {\n            self.lastMouseDownTarget = e.target;\n            if (self.dispatchEvent('mousedown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (e.button === 2 || self.input) { return; }\n            var ctrl = (e.ctrlKey || e.metaKey),\n                move = /-move/.test(self.dragMode),\n                freeze = /frozen-row-marker|frozen-column-marker/.test(self.dragMode),\n                resize = /-resize/.test(self.dragMode);\n            self.dragStart = overridePos || self.getLayerPos(e);\n            self.scrollStart = {\n                left: self.scrollBox.scrollLeft,\n                top: self.scrollBox.scrollTop\n            };\n            self.dragStartObject = self.getCellAt(self.dragStart.x, self.dragStart.y);\n            self.dragAddToSelection = !self.dragStartObject.selected;\n            if (!ctrl && !e.shiftKey && !/(vertical|horizontal)-scroll-(bar|box)/\n                    .test(self.dragStartObject.context)\n                    && self.currentCell\n                    && !self.currentCell.isColumnHeader\n                    && !move\n                    && !freeze\n                    && !resize) {\n                self.selections = [];\n            }\n            if (self.dragStartObject.isGrid) {\n                return;\n            }\n            if (self.scrollModes.indexOf(self.dragStartObject.context) !== -1) {\n                self.scrollMode = self.dragStartObject.context;\n                self.scrollStartMode = self.dragStartObject.context;\n                self.scrollGrid(e);\n                if (self.attributes.scrollPointerLock\n                        && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                    self.pointerLockPosition = {\n                        x: self.dragStart.x,\n                        y: self.dragStart.y\n                    };\n                    self.canvas.requestPointerLock();\n                }\n                document.body.addEventListener('mousemove', self.scrollGrid, false);\n                document.body.addEventListener('mouseup', self.stopScrollGrid, false);\n                self.ignoreNextClick = true;\n                return;\n            }\n            if (self.dragMode === 'cell') {\n                self.selecting = true;\n                if (self.attributes.selectionMode === 'row') {\n                    self.selectRow(self.dragStartObject.rowIndex, ctrl, null, true);\n                }\n                return self.mousemove(e);\n            }\n            if (move) {\n                self.draggingItem = self.dragItem;\n                self.movingSelection = self.selections.concat([]);\n                self.dragging = self.dragStartObject;\n                if (self.dispatchEvent('beginmove', {NativeEvent: e, cell: self.currentCell})) { return; }\n                document.body.addEventListener('mousemove', self.dragMove, false);\n                document.body.addEventListener('mouseup', self.stopDragMove, false);\n                return self.mousemove(e);\n            }\n            if (freeze) {\n                self.draggingItem = self.dragItem;\n                self.startFreezeMove = {\n                    x: self.frozenRow,\n                    y: self.frozenColumn\n                };\n                if (self.dispatchEvent('beginfreezemove', {NativeEvent: e})) { return; }\n                document.body.addEventListener('mousemove', self.freezeMove, false);\n                document.body.addEventListener('mouseup', self.stopFreezeMove, false);\n                return self.mousemove(e);\n            }\n            if (resize) {\n                self.draggingItem = self.dragItem;\n                if (self.draggingItem.rowOpen) {\n                    self.resizingStartingHeight = self.sizes.trees[self.draggingItem.data[self.uniqueId]];\n                } else {\n                    self.resizingStartingHeight = self.sizes.rows[self.draggingItem.data[self.uniqueId]] || self.style.cellHeight;\n                }\n                self.resizingStartingWidth = self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] || self.draggingItem.width;\n                document.body.addEventListener('mousemove', self.dragResizeColumn, false);\n                document.body.addEventListener('mouseup', self.stopDragResize, false);\n            }\n            if (['row-reorder', 'column-reorder'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragStartObject;\n                document.body.addEventListener('mousemove', self.dragReorder, false);\n                document.body.addEventListener('mouseup', self.stopDragReorder, false);\n            }\n        };\n        self.mouseup = function (e) {\n            clearTimeout(self.scrollTimer);\n            self.cellBoundaryCrossed = true;\n            self.selecting = undefined;\n            self.draggingItem = undefined;\n            self.dragStartObject = undefined;\n            if (self.dispatchEvent('mouseup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            if (self.currentCell && self.currentCell.grid !== undefined) {\n                return;\n            }\n            if (self.contextMenu || self.input) { return; }\n            if (self.dragStart && self.isInGrid(self.dragStart)) {\n                self.controlInput.focus();\n            }\n            e.preventDefault();\n        };\n        self.keydown = function (e) {\n            var i,\n                x = self.activeCell.columnIndex,\n                y = self.activeCell.rowIndex,\n                ctrl = (e.ctrlKey || e.metaKey),\n                last = self.data.length - 1,\n                cols = self.getVisibleSchema().length - 1;\n            if (self.dispatchEvent('keydown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            if (self.attributes.showNewRow) {\n                last += 1;\n            }\n            if (e.keyCode === 9) {\n                e.preventDefault();\n            }\n            // esc\n            if (e.keyCode === 27) {\n                self.selections = [];\n                self.draw(true);\n            // ctrl + a\n            } else if (ctrl && e.keyCode === 65) {\n                self.selectAll();\n            //ArrowDown\n            } else if (e.keyCode === 40) {\n                y += 1;\n            //ArrowUp\n            } else if (e.keyCode === 38) {\n                y -= 1;\n            //ArrowLeft Tab\n            } else if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {\n                x -= 1;\n            //ArrowRight Tab\n            } else if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {\n                x += 1;\n            //PageUp\n            } else if (e.keyCode === 33) {\n                y -= self.page;\n                e.preventDefault();\n            //PageDown\n            } else if (e.keyCode === 34) {\n                y += self.page;\n                e.preventDefault();\n            //Home ArrowUp\n            } else if (e.keyCode === 36 || (ctrl && e.keyCode === 38)) {\n                y = 0;\n            //End ArrowDown\n            } else if (e.keyCode === 35 || (ctrl && e.keyCode === 40)) {\n                y = self.data.length - 1;\n            //ArrowRight\n            } else if (ctrl && e.keyCode === 39) {\n                x = cols;\n            //ArrowLeft\n            } else if (ctrl && e.keyCode === 37) {\n                x = 0;\n            }\n            //Enter\n            if (e.keyCode === 13) {\n                return self.beginEditAt(x, y);\n            }\n            //Space\n            if (e.keyCode === 32) {\n                self.selections = [];\n                self.selections[Math.max(y, 0)] = [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                if (self.attributes.selectionMode === 'row') {\n                    for (i = self.selectionBounds.top; i <= self.selectionBounds.bottom; i += 1) {\n                        self.selectRow(i, ctrl, null, true);\n                    }\n                } else {\n                    self.selectArea(undefined, ctrl);\n                }\n                e.preventDefault();\n                self.draw(true);\n                return;\n            }\n            if (x < 0) {\n                x = 0;\n            }\n            if (y > last) {\n                y = last;\n            }\n            if (y < 0) {\n                y = 0;\n            }\n            if (x > cols) {\n                x = cols;\n            }\n            // Arrows\n            if (e.shiftKey && [37, 38, 39, 40].indexOf(e.keyCode) !== -1) {\n                self.selections[Math.max(y, 0)] = self.selections[Math.max(y, 0)] || [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                self.selectArea(undefined, ctrl);\n                self.draw(true);\n            }\n            if (x !== self.activeCell.columnIndex || y !== self.activeCell.rowIndex) {\n                self.scrollIntoView(x !== self.activeCell.columnIndex ? x : undefined, y !== self.activeCell.rowIndex ? y : undefined);\n                self.setActiveCell(x, y);\n                if (!e.shiftKey && self.attributes.selectionFollowsActiveCell) {\n                    if (!ctrl) {\n                        self.selections = [];\n                    }\n                    self.selections[y] = self.selections[y] || [];\n                    self.selections[y].push(x);\n                    self.dispatchEvent('selectionchanged', {\n                        selectedData: self.getSelectedData(),\n                        selections: self.selections,\n                        selectionBounds: self.selectionBounds\n                    });\n                }\n                self.draw(true);\n            }\n        };\n        self.keyup = function (e) {\n            if (self.dispatchEvent('keyup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n        };\n        self.keypress = function (e) {\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.dispatchEvent('keypress', {NativeEvent: e, cell: self.currentCell})) { return; }\n        };\n        self.dblclick = function (e) {\n            if (self.dispatchEvent('dblclick', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'columnHeaderCell') {\n                self.fitColumnToValues(self.currentCell.header.name);\n            } else if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'cornerCell') {\n                self.autosize();\n            } else if (['cell', 'activeCell'].indexOf(self.currentCell.style) !== -1) {\n                self.beginEditAt(self.currentCell.columnIndex, self.currentCell.rowIndex);\n            }\n        };\n        self.scrollWheel = function (e) {\n            var l,\n                t,\n                deltaX = e.deltaX === undefined ? e.NativeEvent.deltaX : e.deltaX,\n                deltaY = e.deltaY === undefined ? e.NativeEvent.deltaY : e.deltaY,\n                deltaMode = e.deltaMode === undefined ? e.NativeEvent.deltaMode : e.deltaMode;\n            if (wheeling) {\n                return;\n            }\n            if (self.dispatchEvent('wheel', {NativeEvent: e})) {\n                return;\n            }\n            e = e.NativeEvent || e;\n            self.touchHaltAnimation = true;\n            l = self.scrollBox.scrollLeft;\n            t = self.scrollBox.scrollTop;\n            if (self.hasFocus) {\n                //BUG Issue 42: https://github.com/TonyGermaneri/canvas-datagrid/issues/42\n                //https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\n                if (deltaMode === 1) {\n                    // line mode = 17 pixels per line\n                    deltaY = deltaY * 17;\n                }\n                if ((self.scrollBox.scrollTop < self.scrollBox.scrollHeight && deltaY > 0)\n                        || (self.scrollBox.scrollLeft < self.scrollBox.scrollWidth && deltaX > 0)\n                        || (self.scrollBox.scrollTop > 0 && deltaY < 0)\n                        || (self.scrollBox.scrollLeft > 0 && deltaX < 0)) {\n                    e.preventDefault(e);\n                }\n                wheeling = setTimeout(function () {\n                    wheeling = undefined;\n                    self.scrollBox.scrollTo(deltaX + l, deltaY + t);\n                }, 1);\n            }\n        };\n        self.pasteItem = function (clipData, x, y, mimeType) {\n            var l, s = self.getVisibleSchema(), yi = y - 1, sel = [];\n            function normalizeRowData(importingRow, existingRow, offsetX, schema, mimeType, rowIndex) {\n                var r = existingRow;\n                if (!Array.isArray(importingRow) && importingRow !== null && typeof importingRow === 'object') {\n                    importingRow = Object.keys(importingRow).map(function (colKey) {\n                        return importingRow[colKey];\n                    });\n                }\n                if (/^text\\/html/.test(mimeType)) {\n                    importingRow = importingRow.substring(4, importingRow.length - 5).split('</td><td>');\n                }\n                if (typeof importingRow === 'string') {\n                    importingRow = [importingRow];\n                }\n                sel[rowIndex] = [];\n                importingRow.forEach(function (cellData, colIndex) {\n                    var cName = schema[colIndex + offsetX].name;\n                    if (importingRow[colIndex] === undefined || importingRow[colIndex] === null) {\n                        r[cName] = existingRow[cName];\n                        return;\n                    }\n                    sel[rowIndex].push(colIndex + offsetX);\n                    r[cName] = importingRow[colIndex];\n                });\n                return r;\n            }\n            if (/^text\\/html/.test(mimeType)) {\n                if (!/^(<meta[^>]+>)?<table>/.test(clipData.substring(0, 29))) {\n                    console.warn('Unrecognized HTML format.  HTML must be a simple table, e.g.: <table><tr><td>data</td></tr></table>.  Data with the mime type text/html not in this format will not be imported as row data.');\n                    return;\n                }\n                // strip table beginning and ending off, then split at rows\n                clipData = clipData.substring(clipData.indexOf('<table><tr>') + 11, clipData.length - 13).split('</tr><tr>');\n            } else {\n                clipData = clipData.split('\\n');\n            }\n            l = clipData.length;\n            clipData.forEach(function (rowData) {\n                yi += 1;\n                self.data[yi] = normalizeRowData(rowData, self.data[yi], x, s, mimeType, yi);\n            });\n            self.selections = sel;\n            return l;\n        };\n        self.paste = function (e) {\n            var d;\n            function getItem(dti) {\n                var type = dti.type;\n                dti.getAsString(function (s) {\n                    self.pasteItem(s, self.activeCell.columnIndex, self.activeCell.rowIndex, type);\n                    self.draw();\n                });\n            }\n            d = Array.prototype.filter.call(e.clipboardData.items, function (dti) {\n                return dti.type === 'text/html';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/csv';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/plain';\n            })[0];\n            if (!d) {\n                console.warn('Cannot find supported clipboard data type.  Supported types are text/html, text/csv, text/plain.');\n                return;\n            }\n            getItem(d);\n        };\n        self.cut = function (e) {\n            self.copy(e);\n            self.forEachSelectedCell(function (data, index, colName) {\n                data[index][colName] = '';\n            });\n        };\n        self.copy = function (e) {\n            if (self.dispatchEvent('copy', {NativeEvent: e})) { return; }\n            if (!self.hasFocus || !e.clipboardData) { return; }\n            var t,\n                d,\n                rows = [],\n                trows = [],\n                sData = self.getSelectedData();\n            function fCopyCell(d) {\n                d = d === null || d === undefined ? '' : d;\n                return '<td>' + (typeof d === 'string' ? d.replace(/</g, '&lt;').replace(/>/g, '&gt;') : d) + '</td>';\n            }\n            if (sData.length > 0) {\n                sData.forEach(function (row) {\n                    if (row) {\n                        // r = array for HTML, rt = array for plain text\n                        var r = [],\n                            rt = [];\n                        Object.keys(row).forEach(function (key) {\n                            // escape strings\n                            if (row[key] !== null\n                                    && row[key] !== false\n                                    && row[key] !== undefined\n                                    && row[key].replace) {\n                                rt.push('\"' + row[key].replace(/\"/g, '\"\"') + '\"');\n                                r.push(fCopyCell(row[key]));\n                                return;\n                            }\n                            rt.push(row[key]);\n                            r.push(fCopyCell(row[key]));\n                        });\n                        rows.push(r.join(''));\n                        trows.push(rt.join(','));\n                    }\n                });\n                d = '<table><tr>' + rows.join('</tr><tr>') + '</tr></table>';\n                t = trows.join('\\n');\n                e.clipboardData.setData('text/html', d);\n                e.clipboardData.setData('text/plain', t);\n                e.clipboardData.setData('text/csv', t);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var touchTimerMs = 50,\n            touchScrollTimeout;\n        self.scrollAnimation = {};\n        self.touchDelta = {};\n        self.touchAnimateTo = {};\n        self.animationFrames = 0;\n        self.getTouchPos = function (e, touchIndex) {\n            var t = touchIndex ? e.touches[touchIndex] : e.touches[0],\n                rect = self.canvas.getBoundingClientRect(),\n                pos;\n            if (!t) { return; }\n            pos = {\n                x: t.clientX - rect.left,\n                y: t.clientY - rect.top\n            };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        // shamelessly stolen from from https://gist.github.com/gre/1650294\n        self.easingFunctions = {\n            linear: function (t) { return t; },\n            easeInQuad: function (t) { return t * t; },\n            easeOutQuad: function (t) { return t * (2 - t); },\n            easeInOutQuad: function (t) { return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t; },\n            easeInCubic: function (t) { return t * t * t; },\n            easeOutCubic: function (t) { return (--t) * t * t + 1; },\n            easeInOutCubic: function (t) { return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1; },\n            easeInQuart: function (t) { return t * t * t * t; },\n            easeOutQuart: function (t) { return 1 - (--t) * t * t * t; },\n            easeInOutQuart: function (t) { return t < 0.5 ? 8 * t  * t  * t * t : 1 - 8 * (--t) * t * t * t; },\n            easeInQuint: function (t) { return t * t * t * t * t; },\n            easeOutQuint: function (t) { return 1 + (--t) * t *  t * t * t; },\n            easeInOutQuint: function (t) { return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t; }\n        };\n        self.easing = function (t, b, c, d) {\n            return c * self.easingFunctions[self.attributes.touchEasingMethod](t / d) + b;\n        };\n        self.calculatePPSTimed = function () {\n            self.xPPST = -((self.touchDelta.x - self.touchSigmaTimed.x) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.yPPST = -((self.touchDelta.y - self.touchSigmaTimed.y) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.touchSigmaTimed = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.calculatePPS = function () {\n            self.xPPS = -((self.touchDelta.x - self.touchSigma.x) / (self.touchDelta.t - self.touchSigma.t));\n            self.yPPS = -((self.touchDelta.y - self.touchSigma.y) / (self.touchDelta.t - self.touchSigma.t));\n            self.touchSigma = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.touchEndAnimation = function () {\n            if (!self.canvas || !self.scrollBox.scrollTo) { return requestAnimationFrame(self.touchEndAnimation); }\n            var n = performance.now(),\n                d = self.attributes.touchReleaseAnimationDurationMs,\n                t;\n            t = n - self.touchDelta.t;\n            self.animationFrames += 1;\n            self.scrollAnimation.x = self.easing(t, self.touchDelta.scrollLeft, self.touchAnimateTo.x, d);\n            self.scrollAnimation.y = self.easing(t, self.touchDelta.scrollTop, self.touchAnimateTo.y, d);\n            if (t > d || (self.scrollAnimation.y === self.scrollBox.scrollTop\n                    && self.scrollAnimation.x === self.scrollBox.scrollLeft) || self.stopAnimation) {\n                return;\n            }\n            self.scrollBox.scrollTo(self.scrollAnimation.x, self.scrollAnimation.y);\n            requestAnimationFrame(self.touchEndAnimation);\n        };\n        self.touchEditCell = function (cell) {\n            self.beginEditAt(cell.columnIndex, cell.rowIndex);\n        };\n        self.touchCell = function (e) {\n            return function () {\n                clearInterval(self.calculatePPSTimer);\n                var i, pos = self.getTouchPos(e);\n                if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone) {\n                    i = self.getCellAt(pos.x, pos.y);\n                    if (!i) { return; }\n                    if (self.touchingCell && self.touchingCell.rowIndex === i.rowIndex\n                            && self.touchingCell.columnIndex === i.columnIndex) {\n                        self.touchEditCell(i);\n                        return;\n                    }\n                    if (self.input) {\n                        self.endEdit();\n                    }\n                    self.touchingCell = i;\n                    self.selectArea({\n                        top: i.rowIndex,\n                        bottom: i.rowIndex,\n                        left: i.columnIndex,\n                        right: i.columnIndex\n                    });\n                    self.draw(true);\n                }\n            };\n        };\n        self.touchstart = function (e) {\n            if (self.dispatchEvent('touchstart', {NativeEvent: e})) { return; }\n            self.disposeContextMenu();\n            clearInterval(self.calculatePPSTimer);\n            clearTimeout(self.touchContextTimeout);\n            self.touchStartEvent = e;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (e.changedTouches[0]) {\n                self.touchStart = self.getTouchPos(e);\n            }\n            if (e.touches.length === 1 && e.changedTouches[0] && !self.zoomAltered) {\n                self.touchLength = 1;\n                self.touchStart = self.touchStart || self.touchStart1;\n                self.touchScrollStart = {\n                    x: self.scrollBox.scrollLeft,\n                    y: self.scrollBox.scrollTop,\n                    t: performance.now()\n                };\n                self.touchDelta = {\n                    x: 0,\n                    y: 0,\n                    scrollLeft: self.scrollBox.scrollLeft,\n                    scrollTop: self.scrollBox.scrollTop,\n                    t: self.touchScrollStart.t\n                };\n                self.touchSigma = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchSigmaTimed = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchContextTimeout = setTimeout(function () {\n                    self.contextmenuEvent(e, self.touchStart);\n                }, self.attributes.touchContextMenuTimeMs);\n                self.calculatePPSTimer = setInterval(self.calculatePPSTimed, touchTimerMs);\n                self.startingCell = self.getCellAt(self.touchStart.x, self.touchStart.y, true);\n                if (self.startingCell && (self.startingCell.isGrid || ['tree', 'inherit'].indexOf(self.startingCell.context) !== -1)) {\n                    self.hasFocus = false;\n                    return;\n                }\n                self.hasFocus = true;\n                if (self.startingCell.isHeader) {\n                    if (self.startingCell.isRowHeader) {\n                        self.selectArea({\n                            top: self.startingCell.rowIndex,\n                            bottom: self.startingCell.rowIndex,\n                            left: 0,\n                            right: self.getVisibleSchema().length - 1,\n                        });\n                        self.draw(true);\n                    } else if (self.startingCell.isColumnHeader) {\n                        if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                            if (self.orderBy === self.startingCell.header.name) {\n                                self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                            } else {\n                                self.orderDirection = 'asc';\n                            }\n                            self.order(self.startingCell.header.name, self.orderDirection);\n                        }\n                        if (self.attributes.columnHeaderClickBehavior === 'select') {\n                            self.selectArea({\n                                top: 0,\n                                bottom: self.data.length - 1,\n                                left: self.startingCell.columnIndex,\n                                right: self.startingCell.columnIndex,\n                            });\n                            self.draw(true);\n                        }\n                    }\n                    self.touchEndEvents(e);\n                    return;\n                }\n            }\n            if (self.zoomAltered) { return; }\n            document.body.addEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.addEventListener('touchend', self.touchend, false);\n            document.body.addEventListener('touchcancel', self.touchcancel, false);\n            self.draw(true);\n        };\n        self.touchSelect = function (cell, handleType) {\n            if (cell.rowIndex === undefined || cell.columnIndex === undefined) { return; }\n            self.touchSelecting = true;\n            var bounds = self.getSelectionBounds();\n            if (handleType === 'selection-handle-bl'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex <= bounds.right) {\n                bounds.bottom = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tl'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex <= bounds.right) {\n                bounds.top = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tr'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex >= bounds.left) {\n                bounds.top = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            } else if (handleType === 'selection-handle-br'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex >= bounds.left) {\n                bounds.bottom = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            }\n            if (self.attributes.selectionMode === 'row' || cell.rowIndex === -1) {\n                bounds.left = 0;\n                bounds.right = self.getSchema().length - 1;\n            } else {\n                bounds.left = Math.max(0, bounds.left);\n            }\n            self.selectArea(bounds);\n            self.draw(true);\n        };\n        self.touchmove = function (e) {\n            var ch, rw, rScrollZone, lScrollZone, bScrollZone, tScrollZone, sbw, t1, t2;\n            if (self.dispatchEvent('touchmove', {NativeEvent: e})) { return; }\n            clearTimeout(touchScrollTimeout);\n            if (e.changedTouches[0]) {\n                self.touchPosition = self.getTouchPos(e);\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = self.getTouchPos(e, 1);\n            }\n            if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) > self.attributes.touchDeadZone) {\n                clearTimeout(self.touchContextTimeout);\n            }\n            if (e.touches.length === 2 && self.touchPosition && self.touchPosition1) {\n                t1 = self.touchPosition.y;\n                t2 = self.touchPosition1.y;\n                if (!self.zoomDeltaStart) {\n                    self.zoomDeltaStart = Math.abs(t1 - t2);\n                    self.startScale = self.scale;\n                }\n                self.touchLength = 2;\n                self.scaleDelta = self.zoomDeltaStart - Math.abs(t1 - t2);\n                self.scale = self.startScale - (self.scaleDelta * self.attributes.touchZoomSensitivity);\n                self.scale = Math.min(Math.max(self.scale, self.attributes.touchZoomMin), self.attributes.touchZoomMax);\n                self.zoomAltered = true;\n                self.resize(true);\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.zoomAltered) { return; }\n            self.touchLength = 1;\n            self.touchPosition = self.touchPosition || self.touchPosition1;\n            ch = self.getColumnHeaderCellHeight();\n            rw = self.getRowHeaderCellWidth();\n            rScrollZone = self.width - self.style.scrollBarWidth - self.touchPosition.x < self.attributes.selectionScrollZone;\n            lScrollZone = self.touchPosition.x - rw < self.attributes.selectionScrollZone;\n            bScrollZone = self.height - self.style.scrollBarWidth - self.touchPosition.y < self.attributes.selectionScrollZone;\n            tScrollZone = self.touchPosition.y - ch < self.attributes.selectionScrollZone;\n            sbw = self.style.scrollBarWidth;\n            function touchScroll() {\n                var x = self.scrollBox.scrollLeft,\n                    y = self.scrollBox.scrollTop;\n                x += (rScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y += (bScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y -= (tScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                x -= (lScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                self.scrollBox.scrollTo(x, y);\n                touchScrollTimeout = setTimeout(touchScroll, self.attributes.scrollRepeatRate);\n            }\n            e.stopPropagation();\n            self.touchDelta = {\n                x: self.touchPosition.x - self.touchStart.x,\n                y: self.touchPosition.y - self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: performance.now()\n            };\n            self.currentCell = self.getCellAt(self.touchPosition.x, self.touchPosition.y);\n            self.calculatePPS();\n            self.touchDuration = performance.now() - self.touchScrollStart.t;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            if (self.touchSelecting && (rScrollZone || lScrollZone || tScrollZone || bScrollZone)) {\n                touchScroll();\n            }\n            if (/vertical-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollTop = self.scrollBox.scrollHeight\n                    * ((self.touchPosition.y - ch - sbw) / (self.scrollBox.height - sbw - ch));\n                return;\n            }\n            if (/horizontal-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollLeft = self.scrollBox.scrollWidth\n                    * ((self.touchPosition.x - rw - sbw) / (self.scrollBox.width - sbw - rw));\n                return;\n            }\n            if (/selection-handle-/.test(self.startingCell.style)) {\n                self.touchSelect(self.currentCell, self.startingCell.style);\n                return;\n            }\n            self.scrollBox.scrollTo(self.touchScrollStart.x - self.touchDelta.x,\n                self.touchScrollStart.y - self.touchDelta.y);\n            self.draw(true);\n        };\n        self.touchEndEvents = function (e) {\n            self.zoomDeltaStart = undefined;\n            self.touchSelecting = false;\n            clearInterval(self.touchScrollTimeout);\n            clearInterval(self.touchContextTimeout);\n            clearInterval(self.calculatePPSTimer);\n            e.stopPropagation();\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n        };\n        self.touchend = function (e) {\n            if (self.dispatchEvent('touchend', {NativeEvent: e})) { return; }\n            self.zoomDeltaStart = undefined;\n            if (e.changedTouches[0]) {\n                self.touchPosition = undefined;\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = undefined;\n            }\n            if (self.zoomAltered) {\n                if (e.touches.length === 0) {\n                    self.zoomAltered = false;\n                }\n                return;\n            }\n            var dz = Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone;\n            if (isNaN(self.xPPS)) {\n                self.xPPS = 0;\n            }\n            if (isNaN(self.yPPS)) {\n                self.yPPS = 0;\n            }\n            if (isNaN(self.xPPST)) {\n                self.xPPST = 0;\n            }\n            if (isNaN(self.yPPST)) {\n                self.yPPST = 0;\n            }\n            self.touchAnimateTo.x = self.xPPS * self.attributes.touchReleaseAcceleration;\n            self.touchAnimateTo.y = self.yPPS * self.attributes.touchReleaseAcceleration;\n            self.calculatePPSTimed();\n            if (dz && !self.contextMenu) {\n                self.touchCell(self.touchStartEvent)();\n            } else if (self.animationFrames === 0\n                    && (Math.abs(self.xPPST) > self.attributes.scrollAnimationPPSThreshold\n                        || Math.abs(self.yPPST) > self.attributes.scrollAnimationPPSThreshold)\n                    && !/-scroll-/.test(self.startingCell.style)\n                    && !dz) {\n                self.stopAnimation = false;\n                self.touchEndAnimation();\n            }\n            self.touchEndEvents(e);\n        };\n        self.touchcancel = function (e) {\n            if (self.dispatchEvent('touchcancel', {NativeEvent: e})) { return; }\n            self.touchEndEvents(e);\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals HTMLElement: false, Reflect: false, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self, ctor) {\n        self.scale = 1;\n        self.orders = {\n            rows: [],\n            columns: []\n        };\n        self.visibleRowHeights = [];\n        self.hasFocus = false;\n        self.activeCell = {\n            columnIndex: 0,\n            rowIndex: 0\n        };\n        self.storageName = 'canvasDataGrid';\n        self.invalidSearchExpClass = 'canvas-datagrid-invalid-search-regExp';\n        self.localStyleLibraryStorageKey = 'canvas-datagrid-user-style-library';\n        self.uniqueId = '_canvasDataGridUniqueId';\n        self.orderBy = self.uniqueId;\n        self.orderDirection = 'asc';\n        self.columnFilters = {};\n        self.filters = {};\n        self.frozenRow = 0;\n        self.frozenColumn = 0;\n        self.ellipsisCache = {};\n        self.scrollBox = {};\n        self.visibleRows = [];\n        self.sizes = {\n            rows: {},\n            columns: {},\n            trees: {}\n        };\n        self.currentFilter = function () {\n            return true;\n        };\n        self.selections = [];\n        self.hovers = {};\n        self.attributes = {};\n        self.style = {};\n        self.formatters = {};\n        self.sorters = {};\n        self.schemaHashes = {};\n        self.events = {};\n        self.uId = 0;\n        self.changes = [];\n        self.scrollIndexTop = 0;\n        self.scrollPixelTop = 0;\n        self.scrollIndexLeft = 0;\n        self.scrollPixelLeft = 0;\n        self.childGrids = {};\n        self.openChildren = {};\n        self.scrollModes = [\n            'vertical-scroll-box',\n            'vertical-scroll-top',\n            'vertical-scroll-bottom',\n            'horizontal-scroll-box',\n            'horizontal-scroll-right',\n            'horizontal-scroll-left'\n        ];\n        self.componentL1Events = {};\n        self.eventNames = ['afterdraw', 'afterrendercell', 'attributechanged', 'beforebeginedit',\n            'beforecreatecellgrid', 'beforedraw', 'beforeendedit', 'beforerendercell', 'beforerendercellgrid',\n            'beginedit', 'cellmouseout', 'cellmouseover', 'click', 'collapsetree', 'contextmenu', 'copy',\n            'datachanged', 'dblclick', 'endedit', 'expandtree', 'formatcellvalue', 'keydown', 'keypress',\n            'keyup', 'mousedown', 'mousemove', 'mouseup', 'newrow', 'ordercolumn', 'rendercell', 'rendercellgrid',\n            'renderorderbyarrow', 'rendertext', 'rendertreearrow', 'reorder', 'reordering', 'resize',\n            'resizecolumn', 'resizerow', 'schemachanged', 'scroll', 'selectionchanged', 'stylechanged',\n            'touchcancel', 'touchend', 'touchmove', 'touchstart', 'wheel'];\n        self.mouse = { x: 0, y: 0};\n        self.getSelectedData = function (expandToRow) {\n            var d = [], s = expandToRow ? self.getSchema() : self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    if (col === -1 || !s[col]) { return; }\n                    d[index][s[col].name] = self.data[index][s[col].name];\n                });\n            });\n            return d;\n        };\n        self.fillArray = function (low, high, step, def) {\n            step = step || 1;\n            var i = [], x;\n            for (x = low; x <= high; x += step) {\n                i[x] = def === undefined ? x : (typeof def === 'function' ? def(x) : def);\n            }\n            return i;\n        };\n        self.getColumnHeaderCellHeight = function () {\n            if (!self.attributes.showColumnHeaders) { return 0; }\n            return ((self.sizes.rows[-1] || self.style.columnHeaderCellHeight) * self.scale);\n        };\n        self.getRowHeaderCellWidth = function () {\n            if (!self.attributes.showRowHeaders) { return 0; }\n            return (self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth) * self.scale;\n        };\n        self.setStorageData = function () {\n            if (!self.attributes.saveAppearance) { return; }\n            localStorage.setItem(self.storageName + '-' + self.attributes.name, JSON.stringify({\n                sizes: {\n                    rows: self.sizes.rows,\n                    columns: self.sizes.columns\n                },\n                orders: {\n                    rows: self.orders.rows,\n                    columns: self.orders.columns\n                },\n                orderBy: self.orderBy,\n                orderDirection: self.orderDirection\n            }));\n        };\n        self.getSchema = function () {\n            return self.schema || self.tempSchema;\n        };\n        self.createColumnOrders = function () {\n            var s = self.getSchema();\n            self.orders.columns = self.fillArray(0, s.length - 1);\n        };\n        self.createRowOrders = function () {\n            self.orders.rows = self.fillArray(0, self.data.length - 1);\n        };\n        self.getVisibleSchema = function () {\n            return self.getSchema().filter(function (col) {\n                return !col.hidden && col.name !== self.uniqueId;\n            });\n        };\n        self.applyDefaultValue = function (row, header) {\n            var d = header.defaultValue || '';\n            if (typeof d === 'function') {\n                d = d.apply(self.intf, [header]);\n            }\n            row[header.name] = d;\n        };\n        self.createNewRowData = function () {\n            self.newRow = {};\n            self.newRow[self.uniqueId] = self.uId;\n            self.uId += 1;\n            self.getSchema().forEach(function forEachHeader(header) {\n                self.applyDefaultValue(self.newRow, header);\n            });\n        };\n        self.getSchemaNameHash = function (key) {\n            var n = 0;\n            while (self.schemaHashes[key]) {\n                n += 1;\n                key = key + n;\n            }\n            return key;\n        };\n        self.filter = function (type) {\n            var f = self.filters[type];\n            if (!f && type !== undefined) {\n                console.warn('Cannot find filter for type %s, falling back to substring match.', type);\n                f = self.filters.string;\n            }\n            return f;\n        };\n        self.getBestGuessDataType = function (columnName) {\n            var t, x, l = self.data.length;\n            for (x = 0; x < l; x += 1) {\n                if ([null, undefined].indexOf(self.data[x][columnName]) !== -1) {\n                    t = typeof self.data[x];\n                    return t === 'object' ? 'string' : t;\n                }\n            }\n            return 'string';\n        };\n        self.drawChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].draw();\n            });\n        };\n        self.resizeChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].resize();\n            });\n        };\n        self.autoScrollZone = function (e, x, y, ctrl) {\n            var setTimer,\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight();\n            if (x > self.width - self.attributes.selectionScrollZone && x < self.width) {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y > self.height - self.attributes.selectionScrollZone && y < self.height) {\n                self.scrollBox.scrollTop += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (x - self.attributes.selectionScrollZone - rowHeaderCellWidth < 0) {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y - self.attributes.selectionScrollZone - columnHeaderCellHeight < 0) {\n                self.scrollBox.scrollTop -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (setTimer && !ctrl && self.currentCell && self.currentCell.columnIndex !== -1) {\n                self.scrollTimer = setTimeout(self.mousemove, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.refreshFromOrigialData = function () {\n            self.data = self.originalData.filter(function (row) {\n                return true;\n            });\n        };\n        self.validateColumn = function (c, s) {\n            if (!c.name) {\n                throw new Error('A column must contain at least a name.');\n            }\n            if (s.filter(function (i) { return i.name === c.name; }).length > 0) {\n                throw new Error('A column with the name '\n                    + c.name + ' already exists and cannot be added again.');\n            }\n            return true;\n        };\n        self.setDefaults = function (obj1, obj2, key, def) {\n            obj1[key] = obj2[key] === undefined ? def : obj2[key];\n        };\n        self.setAttributes = function () {\n            self.defaults.attributes.forEach(function eachAttribute(i) {\n                self.setDefaults(self.attributes, self.args, i[0], i[1]);\n            });\n        };\n        self.setStyle = function () {\n            self.defaults.styles.forEach(function eachStyle(i) {\n                self.setDefaults(self.style, self.args.style || {}, i[0], i[1]);\n            });\n        };\n        self.autosize = function (colName) {\n            self.getVisibleSchema().forEach(function (col) {\n                if (col.name === colName || colName === undefined) {\n                    self.fitColumnToValues(col.name);\n                }\n            });\n            self.fitColumnToValues('cornerCell');\n        };\n        self.dispose = function () {\n            if (!self.isChildGrid && self.canvas && self.canvas.parentNode) {\n                self.canvas.parentNode.removeChild(self.canvas);\n            }\n            self.eventParent.removeEventListener('mouseup', self.mouseup, false);\n            self.eventParent.removeEventListener('mousedown', self.mousedown, false);\n            self.eventParent.removeEventListener('dblclick', self.dblclick, false);\n            self.eventParent.removeEventListener('click', self.click, false);\n            self.eventParent.removeEventListener('mousemove', self.mousemove);\n            self.eventParent.removeEventListener('wheel', self.scrollWheel, false);\n            self.canvas.removeEventListener('contextmenu', self.contextmenu, false);\n            self.canvas.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('keypress', self.keypress, false);\n            self.controlInput.removeEventListener('keyup', self.keyup, false);\n            self.controlInput.removeEventListener('keydown', self.keydown, false);\n            window.removeEventListener('resize', self.resize);\n            if (self.observer && self.observer.disconnect) {\n                self.observer.disconnect();\n            }\n        };\n        self.tryLoadStoredOrders = function () {\n            var s;\n            if (self.storedSettings\n                    && typeof self.storedSettings.orders === 'object'\n                    && self.storedSettings.orders !== null) {\n                if (self.storedSettings.orders.rows.length >= self.data.length) {\n                    self.orders.rows = self.storedSettings.orders.rows;\n                }\n                s = self.getSchema();\n                if (self.storedSettings.orders.columns.length === s.length) {\n                    self.orders.columns = self.storedSettings.orders.columns;\n                }\n                self.orderBy = self.storedSettings.orderBy === undefined\n                    ? self.uniqueId : self.storedSettings.orderBy;\n                self.orderDirection = self.storedSettings.orderDirection === undefined\n                    ? self.uniqueId : self.storedSettings.orderDirection;\n                if (self.orderBy !== self.uniqueId && self.getHeaderByName(self.orderBy) && self.orderDirection) {\n                    self.order(self.orderBy, self.orderDirection);\n                }\n            }\n        };\n        self.getDomRoot = function () {\n            return self.shadowRoot ? self.shadowRoot.host : self.parentNode;\n        };\n        self.getFontName = function (fontStyle) {\n            return fontStyle.replace(/\\d+\\.?\\d*px/, '');\n        };\n        self.getFontHeight = function (fontStyle) {\n            return parseFloat(fontStyle, 10);\n        };\n        self.parseStyleValue = function (key) {\n            if (/Font/.test(key)) {\n                self.style[key + 'Height'] = self.getFontHeight(self.style[key]);\n                self.style[key + 'Name'] = self.getFontName(self.style[key]);\n                return;\n            }\n            if (key === 'moveOverlayBorderSegments') {\n                self.style[key] = self.style[key].split(',')\n                    .map(function (i) { return parseInt(i, 10); });\n            }\n        };\n        self.initProp = function (propName) {\n            if (!self.args[propName]) { return; }\n            Object.keys(self.args[propName]).forEach(function (key) {\n                self[propName][key] = self.args[propName][key];\n            });\n        };\n        self.getStyleProperty = function (key) {\n            if (self.styleKeys.indexOf(key) === -1) {\n                return self.parentNodeStyle[key];\n            }\n            return self.style[key];\n        };\n        self.setStyleProperty = function (key, value, supressDrawAndEvent) {\n            if (self.styleKeys.indexOf(key) === -1) {\n                self.parentNodeStyle[key] = value;\n            } else {\n                self.parseStyleValue(value);\n                self.style[key] = value;\n            }\n            if (!supressDrawAndEvent) {\n                self.draw(true);\n                self.dispatchEvent('stylechanged', {name: 'style', value: value});\n            }\n        };\n        self.init = function () {\n            if (self.initialized) { return; }\n            var publicStyleKeyIntf = {};\n            self.setAttributes();\n            self.setStyle();\n            self.initScrollBox();\n            self.setDom();\n            self.type = 'canvas-datagrid';\n            self.initialized = true;\n            self.ie = /Trident/.test(window.navigator.userAgent);\n            self.edge = /Edge/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.moz = /Gecko/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.mobile = /Mobile/i.test(window.navigator.userAgent);\n            self.cursorGrab = 'grab';\n            self.cursorGrabing = 'grabbing';\n            self.cursorGrab = self.webKit ? '-webkit-grab' : self.cursorGrab;\n            self.cursorGrabing = self.moz ? '-webkit-grabbing' : self.cursorGrabbing;\n            self.pointerLockPosition = {x: 0, y: 0};\n            Object.keys(self.style).forEach(self.parseStyleValue);\n            self.intf.moveSelection = self.moveSelection;\n            self.intf.moveTo = self.moveTo;\n            self.intf.type = self.type;\n            self.intf.addEventListener = self.addEventListener;\n            self.intf.removeEventListener = self.removeEventListener;\n            self.intf.dispatchEvent = self.dispatchEvent;\n            /**\n             * Releases grid resources and removes grid elements.\n             * @memberof canvasDatagrid\n             * @name dispose\n             * @method\n             */\n            self.intf.dispose = self.dispose;\n            /**\n             * Appends the grid to another element later.  Not implemented.\n             * @memberof canvasDatagrid\n             * @name appendTo\n             * @method\n             * @param {number} el The element to append the grid to.\n             */\n            self.intf.appendTo = self.appendTo;\n            self.intf.filters = self.filters;\n            self.intf.sorters = self.sorters;\n            self.intf.autosize = self.autosize;\n            self.intf.beginEditAt = self.beginEditAt;\n            self.intf.endEdit = self.endEdit;\n            self.intf.setActiveCell = self.setActiveCell;\n            self.intf.forEachSelectedCell = self.forEachSelectedCell;\n            self.intf.scrollIntoView = self.scrollIntoView;\n            self.intf.clearChangeLog = self.clearChangeLog;\n            self.intf.gotoCell = self.gotoCell;\n            self.intf.gotoRow = self.gotoRow;\n            self.intf.getHeaderByName = self.getHeaderByName;\n            self.intf.findColumnScrollLeft = self.findColumnScrollLeft;\n            self.intf.findRowScrollTop = self.findRowScrollTop;\n            self.intf.fitColumnToValues = self.fitColumnToValues;\n            self.intf.findColumnMaxTextLength = self.findColumnMaxTextLength;\n            self.intf.disposeContextMenu = self.disposeContextMenu;\n            self.intf.getCellAt = self.getCellAt;\n            self.intf.isCellVisible = self.isCellVisible;\n            self.intf.order = self.order;\n            self.intf.draw = self.draw;\n            self.intf.selectArea = self.selectArea;\n            self.intf.clipElement = self.clipElement;\n            self.intf.getSchemaFromData = self.getSchemaFromData;\n            self.intf.setFilter = self.setFilter;\n            self.intf.selectRow = self.selectRow;\n            self.intf.parentGrid = self.parentGrid;\n            self.intf.toggleTree = self.toggleTree;\n            self.intf.expandTree = self.expandTree;\n            self.intf.collapseTree = self.collapseTree;\n            self.intf.canvas = self.canvas;\n            self.intf.context = self.ctx;\n            self.intf.insertRow = self.insertRow;\n            self.intf.deleteRow = self.deleteRow;\n            self.intf.addRow = self.addRow;\n            self.intf.insertColumn = self.insertColumn;\n            self.intf.deleteColumn = self.deleteColumn;\n            self.intf.addColumn = self.addColumn;\n            self.intf.getClippingRect = self.getClippingRect;\n            self.intf.setRowHeight = self.setRowHeight;\n            self.intf.setColumnWidth = self.setColumnWidth;\n            self.intf.resetColumnWidths = self.resetColumnWidths;\n            self.intf.resetRowHeights = self.resetRowHeights;\n            self.intf.resize = self.resize;\n            self.intf.selectColumn = self.selectColumn;\n            self.intf.selectRow = self.selectRow;\n            self.intf.selectAll = self.selectAll;\n            self.intf.selectNone = self.selectNone;\n            self.intf.drawChildGrids = self.drawChildGrids;\n            self.intf.assertPxColor = self.assertPxColor;\n            self.intf.clearPxColorAssertions = self.clearPxColorAssertions;\n            self.intf.integerToAlpha = self.integerToAlpha;\n            self.intf.copy = self.copy;\n            self.intf.setStyleProperty = self.setStyleProperty;\n            Object.defineProperty(self.intf, 'defaults', {\n                get: function () {\n                    return {\n                        styles: self.defaults.styles.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {}),\n                        attributes: self.defaults.attributes.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {})\n                    };\n                }\n            });\n            self.styleKeys = Object.keys(self.intf.defaults.styles);\n            self.DOMStyles = window.getComputedStyle(document.body, null);\n            self.intf.setStyleProperty('width', '100%');\n            self.intf.setStyleProperty('height', '100%');\n            Object.keys(self.DOMStyles).concat(Object.keys(self.style)).forEach(function (key) {\n                // unless this line is here, Object.keys() will not work on <instance>.style\n                publicStyleKeyIntf[key] = undefined;\n                Object.defineProperty(publicStyleKeyIntf, key, {\n                    get: function () {\n                        return self.getStyleProperty(key);\n                    },\n                    set: function (value) {\n                        self.setStyleProperty(key, value);\n                    }\n                });\n            });\n            Object.defineProperty(self.intf, 'shadowRoot', {\n                get: function () {\n                    return self.shadowRoot;\n                }\n            });\n            Object.defineProperty(self.intf, 'activeCell', {\n                get: function () {\n                    return self.activeCell;\n                }\n            });\n            Object.defineProperty(self.intf, 'hasFocus', {\n                get: function () {\n                    return self.hasFocus;\n                }\n            });\n            Object.defineProperty(self.intf, 'style', {\n                get: function () {\n                    return publicStyleKeyIntf;\n                },\n                set: function (valueObject) {\n                    Object.keys(valueObject).forEach(function (key) {\n                        self.setStyleProperty(key, valueObject[key], true);\n                    });\n                    self.draw(true);\n                    self.dispatchEvent('stylechanged', {name: 'style', value: valueObject});\n                }\n            });\n            Object.defineProperty(self.intf, 'attributes', { value: {}});\n            Object.keys(self.attributes).forEach(function (key) {\n                Object.defineProperty(self.intf.attributes, key, {\n                    get: function () {\n                        return self.attributes[key];\n                    },\n                    set: function (value) {\n                        self.attributes[key] = value;\n                        self.draw(true);\n                        self.dispatchEvent('attributechanged', {name: key, value: value[key]});\n                    }\n                });\n            });\n            self.filters.string = function (value, filterFor) {\n                value = String(value);\n                var filterRegExp,\n                    regEnd = /\\/(i|g|m)*$/,\n                    pattern = regEnd.exec(filterFor),\n                    flags = pattern ? pattern[0].substring(1) : '',\n                    flagLength = flags.length;\n                self.invalidFilterRegEx = undefined;\n                if (filterFor.substring(0, 1) === '/' && pattern) {\n                    try {\n                        filterRegExp = new RegExp(filterFor.substring(1, filterFor.length - (flagLength + 1)), flags);\n                    } catch (e) {\n                        self.invalidFilterRegEx = e;\n                        return;\n                    }\n                    return filterRegExp.test(value);\n                }\n                return value.toString ? value.toString().toLocaleUpperCase()\n                    .indexOf(filterFor.toLocaleUpperCase()) !== -1 : false;\n            };\n            self.filters.number = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                return value === filterFor;\n            };\n            if (self.attributes.name && self.attributes.saveAppearance) {\n                self.storedSettings = localStorage.getItem(self.storageName + '-' + self.attributes.name);\n                if (self.storedSettings) {\n                    try {\n                        self.storedSettings = JSON.parse(self.storedSettings);\n                    } catch (e) {\n                        console.warn('could not read settings from localStore', e);\n                        self.storedSettings = undefined;\n                    }\n                }\n                if (self.storedSettings) {\n                    if (typeof self.storedSettings.sizes === 'object'\n                            && self.storedSettings.sizes !== null) {\n                        self.sizes.rows = self.storedSettings.sizes.rows;\n                        self.sizes.columns = self.storedSettings.sizes.columns;\n                        ['trees', 'columns', 'rows'].forEach(function (i) {\n                            if (!self.sizes[i]) {\n                                self.sizes[i] = {};\n                            }\n                        });\n                    }\n                }\n            }\n            ['formatters', 'filters', 'sorters'].forEach(self.initProp);\n            if (self.args.data) {\n                self.intf.data = self.args.data;\n            }\n            if (!self.data) {\n                self.intf.data = [];\n            }\n            if (self.args.schema) {\n                self.intf.schema = self.args.schema;\n            }\n            if (self.isChildGrid) {\n                requestAnimationFrame(function () { self.resize(true); });\n            } else {\n                self.resize(true);\n            }\n            return self;\n        };\n        /**\n         * Removes focus from the grid.\n         * @memberof canvasDatagrid\n         * @name blur\n         * @method\n         */\n        self.intf.blur = function (e) {\n            self.hasFocus = false;\n        };\n        /**\n         * Focuses on the grid.\n         * @memberof canvasDatagrid\n         * @name focus\n         * @method\n         */\n        self.intf.focus = function () {\n            self.hasFocus = true;\n            self.controlInput.focus();\n        };\n        Object.defineProperty(self.intf, 'height', {\n            get: function () {\n                if (self.shadowRoot) {\n                    return self.shadowRoot.height;\n                }\n                return self.parentNode.height;\n            },\n            set: function (value) {\n                if (self.shadowRoot) {\n                    self.shadowRoot.height = value;\n                } else {\n                    self.parentNode.height = value;\n                }\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'width', {\n            get: function () {\n                if (self.shadowRoot) {\n                    return self.shadowRoot.width;\n                }\n                return self.parentNode.width;\n            },\n            set: function (value) {\n                if (self.shadowRoot) {\n                    self.shadowRoot.width = value;\n                } else {\n                    self.parentNode.width = value;\n                }\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRowHeights', {\n            get: function () {\n                return self.visibleRowHeights;\n            }\n        });\n        Object.defineProperty(self.intf, 'openChildren', {\n            get: function () {\n                return self.openChildren;\n            }\n        });\n        Object.defineProperty(self.intf, 'childGrids', {\n            get: function () {\n                return Object.keys(self.childGrids).map(function (gridId) {\n                    return self.childGrids[gridId];\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'isChildGrid', {\n            get: function () {\n                return self.isChildGrid;\n            }\n        });\n        Object.defineProperty(self.intf, 'parentNode', {\n            get: function () {\n                return self.parentNode;\n            },\n            set: function (value) {\n                if (!self.isChildGrid) {\n                    throw new TypeError('Cannot set property parentNode which has only a getter');\n                }\n                self.parentNode = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetParent', {\n            get: function () {\n                return self.parentNode;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetLeft', {\n            get: function () {\n                return self.parentNode.offsetLeft;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetTop', {\n            get: function () {\n                return self.parentNode.offsetTop;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollHeight', {\n            get: function () {\n                return self.scrollBox.scrollHeight;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollWidth', {\n            get: function () {\n                return self.scrollBox.scrollWidth;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollTop', {\n            get: function () {\n                return self.scrollBox.scrollTop;\n            },\n            set: function (value) {\n                self.scrollBox.scrollTop = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollLeft', {\n            get: function () {\n                return self.scrollBox.scrollLeft;\n            },\n            set: function (value) {\n                self.scrollBox.scrollLeft = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'sizes', {\n            get: function () {\n                return self.sizes;\n            }\n        });\n        Object.defineProperty(self.intf, 'input', {\n            get: function () {\n                return self.input;\n            }\n        });\n        Object.defineProperty(self.intf, 'controlInput', {\n            get: function () {\n                return self.controlInput;\n            }\n        });\n        Object.defineProperty(self.intf, 'currentCell', {\n            get: function () {\n                return self.currentCell;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleCells', {\n            get: function () {\n                return self.visibleCells;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRows', {\n            get: function () {\n                return self.visibleRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'selections', {\n            get: function () {\n                return self.selections;\n            }\n        });\n        Object.defineProperty(self.intf, 'dragMode', {\n            get: function () {\n                return self.dragMode;\n            }\n        });\n        Object.defineProperty(self.intf, 'changes', {\n            get: function () {\n                return self.changes;\n            }\n        });\n        self.intf.formatters = self.formatters;\n        self.normalizeDataset = function (data, callback) {\n            var i, d, max, syncFnInvoked;\n            if (data === null || data === '' || data === undefined) {\n                return callback([]);\n            }\n            if (typeof data === 'string'\n                    || typeof data === 'number'\n                    || typeof data === 'boolean') {\n                data = [{'0': data}];\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if ((!Array.isArray(data[0]) && typeof data[0] === 'object' && data[0] !== null)\n                            || (Array.isArray(data) && data.length === 0)) {\n                return callback(data);\n            }\n            if (typeof data === 'function') {\n                i = data.apply(self.intf, [function (d) {\n                    if (syncFnInvoked) {\n                        console.warn('Detected a callback to the data setter function after the same function already returned a value synchronously.');\n                    }\n                    self.normalizeDataset(d, callback);\n                }]);\n                if (i) {\n                    syncFnInvoked = true;\n                    self.normalizeDataset(i, callback);\n                }\n                return;\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if (Array.isArray(data)) {\n                if (!Array.isArray(data[0])) {\n                    //array of something?  throw it all into 1 row!\n                    data = [data];\n                }\n                // find the longest length\n                max = 0;\n                d = [];\n                data.forEach(function (row) {\n                    max = Math.max(max, row.length);\n                });\n                // map against length indexes\n                data.forEach(function (row, index) {\n                    var x;\n                    d[index] = {};\n                    for (x = 0; x < max; x += 1) {\n                        d[index][x] = row[x];\n                    }\n                });\n                return callback(d);\n            }\n            throw new Error('Unsupported data type.  Must be an array of arrays or an array of objects, function or string.');\n        };\n        self.eventNames.forEach(function (eventName) {\n            Object.defineProperty(self.intf, 'on' + eventName, {\n                get: function () {\n                    return self.componentL1Events[eventName];\n                },\n                set: function (value) {\n                    self.events[eventName] = [];\n                    self.componentL1Events[eventName] = value;\n                    if (!value) { return; }\n                    self.addEventListener(eventName, value);\n                }\n            });\n        });\n        Object.defineProperty(self.intf, 'frozenRow', {\n            get: function () {\n                return self.frozenRow;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.visibleRows.length > val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible rows.');\n                }\n                self.frozenRow = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'frozenColumn', {\n            get: function () {\n                return self.frozenColumn;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.getVisibleSchema().length > val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible columns.');\n                }\n                self.frozenColumn = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollIndexRect', {\n            get: function () {\n                return {\n                    top: self.scrollIndexTop,\n                    right: self.scrollIndexRight,\n                    bottom: self.scrollIndexBottom,\n                    left: self.scrollIndexLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollPixelRect', {\n            get: function () {\n                return {\n                    top: self.scrollPixelTop,\n                    right: self.scrollPixelRight,\n                    bottom: self.scrollPixelBottom,\n                    left: self.scrollPixelLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'selectionBounds', {\n            get: function () {\n                return self.getSelectionBounds();\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedRows', {\n            get: function () {\n                return self.getSelectedData(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedCells', {\n            get: function () {\n                return self.getSelectedData();\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleSchema', {\n            get: function () {\n                return self.getVisibleSchema().map(function eachDataRow(col) {\n                    return col;\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'ctx', {\n            get: function () {\n                return self.ctx;\n            }\n        });\n        Object.defineProperty(self.intf, 'schema', {\n            get: function schemaGetter() {\n                return self.getSchema();\n            },\n            set: function schemaSetter(value) {\n                if (!Array.isArray(value) || typeof value[0] !== 'object') {\n                    throw new Error('Schema must be an array of objects.');\n                }\n                if (value[0].name === undefined) {\n                    throw new Error('Expected schema to contain an object with at least a name property.');\n                }\n                self.schema = value.map(function eachSchemaColumn(column, index) {\n                    column.width = column.width || self.style.cellWidth;\n                    column[self.uniqueId] = self.getSchemaNameHash(column.name);\n                    column.filter = column.filter || self.filter(column.type);\n                    column.type = column.type || 'string';\n                    column.index = index;\n                    column.columnIndex = index;\n                    column.rowIndex = -1;\n                    return column;\n                });\n                self.tempSchema = undefined;\n                self.createNewRowData();\n                self.createColumnOrders();\n                self.tryLoadStoredOrders();\n                self.resize(true);\n                self.dispatchEvent('schemachanged', {schema: self.schema});\n            }\n        });\n        Object.defineProperty(self.intf, 'data', {\n            get: function dataGetter() {\n                return self.data.map(function (row) {\n                    delete row[self.uniqueId];\n                    return row;\n                });\n            },\n            set: function dataSetter(value) {\n                self.normalizeDataset(value, function (d) {\n                    self.originalData = d.map(function eachDataRow(row) {\n                        row[self.uniqueId] = self.uId;\n                        self.uId += 1;\n                        return row;\n                    });\n                    self.changes = [];\n                    //TODO apply filter to incoming dataset\n                    self.data = self.originalData;\n                    if (!self.schema) {\n                        self.tempSchema = self.getSchemaFromData();\n                    }\n                    if (!self.schema && self.data.length === 0) {\n                        self.tempSchema = [{name: ''}];\n                        self.tempSchema[0][self.uniqueId] = self.getSchemaNameHash('');\n                    }\n                    if (self.tempSchema && !self.schema) {\n                        self.createColumnOrders();\n                        self.tryLoadStoredOrders();\n                        self.dispatchEvent('schemachanged', {schema: self.tempSchema});\n                    }\n                    self.createNewRowData();\n                    if (self.attributes.autoResizeColumns && self.data.length > 0\n                            && self.storedSettings === undefined) {\n                        self.autosize();\n                    }\n                    self.fitColumnToValues('cornerCell', true);\n                    self.resize(true);\n                    self.createRowOrders();\n                    self.tryLoadStoredOrders();\n                    self.dispatchEvent('datachanged', {data: self.data});\n                });\n            }\n        });\n        self.initScrollBox = function () {\n            var sHeight = 0,\n                sWidth = 0,\n                scrollTop = 0,\n                scrollLeft = 0,\n                scrollHeight = 0,\n                scrollWidth = 0,\n                scrollBoxHeight = 20,\n                scrollBoxWidth = 20;\n            function setScrollTop(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollTop value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollHeight) {\n                    value = scrollHeight;\n                }\n                if (scrollHeight < 0) {\n                    value = 0;\n                }\n                scrollTop = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            function setScrollLeft(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollLeft value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollWidth) {\n                    value = scrollWidth;\n                }\n                if (scrollWidth < 0) {\n                    value = 0;\n                }\n                scrollLeft = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            self.scrollBox.toString = function () {\n                return '{\"width\": ' + scrollWidth\n                    + ', \"height\": ' + scrollHeight\n                    + ', \"left\": ' + scrollLeft\n                    + ', \"top\": ' + scrollTop + '}';\n            };\n            self.scrollBox.scrollTo = function (x, y, supressDrawEvent) {\n                setScrollLeft(x, true);\n                setScrollTop(y, supressDrawEvent);\n            };\n            Object.defineProperty(self.scrollBox, 'scrollBoxHeight', {\n                get: function () {\n                    return scrollBoxHeight;\n                },\n                set: function (value) {\n                    scrollBoxHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollBoxWidth', {\n                get: function () {\n                    return scrollBoxWidth;\n                },\n                set: function (value) {\n                    scrollBoxWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'height', {\n                get: function () {\n                    return sHeight;\n                },\n                set: function (value) {\n                    if (scrollHeight < value) {\n                        scrollTop = 0;\n                    }\n                    sHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'width', {\n                get: function () {\n                    return sWidth;\n                },\n                set: function (value) {\n                    sWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollTop', {\n                get: function () {\n                    return scrollTop;\n                },\n                set: setScrollTop\n            });\n            Object.defineProperty(self.scrollBox, 'scrollLeft', {\n                get: function () {\n                    return scrollLeft;\n                },\n                set: setScrollLeft\n            });\n            Object.defineProperty(self.scrollBox, 'scrollHeight', {\n                get: function () {\n                    return scrollHeight;\n                },\n                set: function (value) {\n                    if (scrollTop > value) {\n                        scrollTop = Math.max(value, 0);\n                    }\n                    if (scrollHeight < sHeight) {\n                        scrollTop = 0;\n                    }\n                    scrollHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollWidth', {\n                get: function () {\n                    return scrollWidth;\n                },\n                set: function (value) {\n                    if (scrollLeft > value) {\n                        scrollLeft = Math.max(value, 0);\n                    }\n                    scrollWidth = value;\n                }\n            });\n        };\n        return;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false, Event: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var zIndexTop = 9000, hoverScrollTimeout, autoCompleteContext;\n        function applyContextItemStyle(contextItemContainer) {\n            self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item' + (self.mobile ? '-mobile' : ''));\n            contextItemContainer.addEventListener('mouseover', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n            });\n            contextItemContainer.addEventListener('mouseout', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n            });\n        }\n        function createContextMenu(ev, pos, items, parentContextMenu) {\n            var container = document.createElement('div'),\n                upArrow = document.createElement('div'),\n                downArrow = document.createElement('div'),\n                children = [],\n                selectedIndex = -1,\n                intf = {},\n                rect;\n            if (!Array.isArray(items)) { throw new Error('createContextMenu expects an array.'); }\n            function createItems() {\n                items.forEach(function (item) {\n                    var contextItemContainer = document.createElement('div'),\n                        childMenuArrow;\n                    function removeChildContext(e) {\n                        if (e.relatedTarget === container\n                                || item.contextMenu.container === e.relatedTarget\n                                || childMenuArrow === e.relatedTarget\n                                || (contextItemContainer === e.relatedTarget)\n                                || item.contextMenu.container.contains(e.relatedTarget)\n                                ) { return; }\n                        item.contextMenu.dispose();\n                        children.splice(children.indexOf(item.contextMenu), 1);\n                        item.contextMenu = undefined;\n                        contextItemContainer.removeEventListener('mouseout', removeChildContext);\n                        container.removeEventListener('mouseout', removeChildContext);\n                        contextItemContainer.setAttribute('contextOpen', '0');\n                        contextItemContainer.setAttribute('opening', '0');\n                    }\n                    function contextAddCallback(items) {\n                        // check yet again if the user hasn't moved off\n                        if (contextItemContainer.getAttribute('opening') !== '1' ||\n                                contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        var cPos = contextItemContainer.getBoundingClientRect();\n                        cPos = {\n                            left: cPos.left + self.style.childContextMenuMarginLeft + container.offsetWidth,\n                            top: cPos.top + self.style.childContextMenuMarginTop,\n                            bottom: cPos.bottom,\n                            right: cPos.right\n                        };\n                        item.contextMenu = createContextMenu(ev, cPos, items, intf);\n                        contextItemContainer.setAttribute('contextOpen', '1');\n                        contextItemContainer.addEventListener('mouseout', removeChildContext);\n                        container.addEventListener('mouseout', removeChildContext);\n                        children.push(item.contextMenu);\n                    }\n                    function createChildContext() {\n                        var i;\n                        if (contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        contextItemContainer.setAttribute('opening', '1');\n                        if (typeof item.items === 'function') {\n                            i  = item.items.apply(intf, [function (items) {\n                                contextAddCallback(items);\n                            }]);\n                            if (i !== undefined && Array.isArray(i)) {\n                                contextAddCallback(i);\n                            }\n                            return;\n                        }\n                        contextAddCallback(item.items);\n                    }\n                    function addItem(item) {\n                        function addContent(content) {\n                            if (content === null) { return; }\n                            if (typeof content === 'function') {\n                                return addContent(content(ev));\n                            }\n                            if (typeof content === 'object') {\n                                contextItemContainer.appendChild(content);\n                                return;\n                            }\n                            applyContextItemStyle(contextItemContainer);\n                            contextItemContainer.innerHTML = content;\n                            return;\n                        }\n                        addContent(item.title);\n                        item.contextItemContainer = contextItemContainer;\n                        if ((item.items && item.items.length > 0) || typeof item.items === 'function') {\n                            childMenuArrow = document.createElement('div');\n                            self.createInlineStyle(childMenuArrow, 'canvas-datagrid-context-child-arrow');\n                            childMenuArrow.innerHTML = self.style.childContextMenuArrowHTML;\n                            contextItemContainer.appendChild(childMenuArrow);\n                            contextItemContainer.addEventListener('mouseover', createChildContext);\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                contextItemContainer.setAttribute('opening', '0');\n                            });\n                        }\n                        if (item.click) {\n                            contextItemContainer.addEventListener('click', function (ev) {\n                                item.click.apply(self, [ev]);\n                            });\n                        }\n                    }\n                    addItem(item);\n                    container.appendChild(contextItemContainer);\n                });\n            }\n            function clickIndex(idx) {\n                items[idx].contextItemContainer.dispatchEvent(new Event('click'));\n            }\n            function checkArrowVisibility() {\n                if (container.scrollTop > 0) {\n                    self.parentDOMNode.appendChild(upArrow);\n                } else if (upArrow.parentNode) {\n                    upArrow.parentNode.removeChild(upArrow);\n                }\n                if (container.scrollTop >= container.scrollHeight - container.offsetHeight && downArrow.parentNode) {\n                    downArrow.parentNode.removeChild(downArrow);\n                } else if (container.scrollHeight - container.offsetHeight > 0\n                        && !(container.scrollTop >= container.scrollHeight - container.offsetHeight)) {\n                    self.parentDOMNode.appendChild(downArrow);\n                }\n            }\n            function startHoverScroll(type) {\n                return function t() {\n                    var a = self.attributes.contextHoverScrollAmount;\n                    if (type === 'up' && container.scrollTop === 0) { return; }\n                    if (type === 'down' && container.scrollTop === container.scrollHeight) { return; }\n                    container.scrollTop += (type === 'up' ? -a : a);\n                    hoverScrollTimeout = setTimeout(t, self.attributes.contextHoverScrollRateMs, type);\n                };\n            }\n            function endHoverScroll(type) {\n                return function () {\n                    clearTimeout(hoverScrollTimeout);\n                };\n            }\n            function init() {\n                var loc = {},\n                    s = self.scrollOffset(self.canvas);\n                createItems();\n                self.createInlineStyle(container, 'canvas-datagrid-context-menu' + (self.mobile ? '-mobile' : ''));\n                loc.x = pos.left - s.left;\n                loc.y = pos.top - s.top;\n                loc.height = 0;\n                zIndexTop += 1;\n                container.style.position = 'absolute';\n                upArrow.style.color = self.style.contextMenuArrowColor;\n                downArrow.style.color = self.style.contextMenuArrowColor;\n                [upArrow, downArrow].forEach(function (el) {\n                    el.style.textAlign = 'center';\n                    el.style.position = 'absolute';\n                    el.style.zIndex = zIndexTop + 1;\n                });\n                container.style.zIndex = zIndexTop;\n                if (parentContextMenu && parentContextMenu.inputDropdown) {\n                    container.style.maxHeight = window.innerHeight - loc.y - self.style.autocompleteBottomMargin + 'px';\n                    container.style.minWidth = pos.width + 'px';\n                    loc.y += pos.height;\n                }\n                if (self.mobile) {\n                    container.style.width = pos.width + 'px';\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                container.addEventListener('scroll', checkArrowVisibility);\n                container.addEventListener('wheel', function (e) {\n                    if (self.hasFocus) {\n                        container.scrollTop += e.deltaY;\n                        container.scrollLeft += e.deltaX;\n                    }\n                    checkArrowVisibility();\n                });\n                upArrow.innerHTML = self.style.contextMenuArrowUpHTML;\n                downArrow.innerHTML = self.style.contextMenuArrowDownHTML;\n                container.appendChild(upArrow);\n                document.body.appendChild(downArrow);\n                document.body.appendChild(container);\n                rect = container.getBoundingClientRect();\n                if (rect.bottom > window.innerHeight && !(parentContextMenu && parentContextMenu.inputDropdown)) {\n                    loc.y = window.innerHeight - container.offsetHeight;\n                    if (loc.y < 0) { loc.y = 0; }\n                    if (container.offsetHeight > window.innerHeight - self.style.contextMenuWindowMargin) {\n                        container.style.height = window.innerHeight - self.style.contextMenuWindowMargin + 'px';\n                        loc.y += self.style.contextMenuWindowMargin * 0.5;\n                    }\n                }\n                if (rect.right > window.innerWidth) {\n                    if (parentContextMenu && parentContextMenu.container) {\n                        loc.x = parentContextMenu.container.offsetLeft - container.offsetWidth;\n                    } else {\n                        loc.x = window.innerWidth - container.offsetWidth;\n                    }\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                rect = container.getBoundingClientRect();\n                upArrow.style.top = rect.top + 'px';\n                downArrow.style.top = rect.top + rect.height - downArrow.offsetHeight + 'px';\n                upArrow.style.left = rect.left + 'px';\n                downArrow.style.left = rect.left + 'px';\n                downArrow.style.width = container.offsetWidth + 'px';\n                upArrow.style.width = container.offsetWidth + 'px';\n                downArrow.addEventListener('mouseover', startHoverScroll('down'));\n                downArrow.addEventListener('mouseout', endHoverScroll('down'));\n                upArrow.addEventListener('mouseover', startHoverScroll('up'));\n                upArrow.addEventListener('mouseout', endHoverScroll('up'));\n                checkArrowVisibility();\n            }\n            intf.parentGrid = self.intf;\n            intf.parentContextMenu = parentContextMenu;\n            intf.container = container;\n            init();\n            intf.clickIndex = clickIndex;\n            intf.rect = rect;\n            intf.items = items;\n            intf.upArrow = upArrow;\n            intf.downArrow = downArrow;\n            intf.dispose = function () {\n                clearTimeout(hoverScrollTimeout);\n                children.forEach(function (c) {\n                    c.dispose();\n                });\n                [downArrow, upArrow, container].forEach(function (el) {\n                    if (el.parentNode) { el.parentNode.removeChild(el); }\n                });\n            };\n            Object.defineProperty(intf, 'selectedIndex', {\n                get: function () {\n                    return selectedIndex;\n                },\n                set: function (value) {\n                    if (typeof value !== 'number' || isNaN(value || !isFinite(value))) {\n                        throw new Error('Context menu selected index must be a sane number.');\n                    }\n                    selectedIndex = value;\n                    if (selectedIndex > items.length - 1) {\n                        selectedIndex = items.length - 1;\n                    }\n                    if (selectedIndex < 0) {\n                        selectedIndex = 0;\n                    }\n                    items.forEach(function (item, index) {\n                        if (index === selectedIndex) {\n                            return self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                        }\n                        self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item');\n                    });\n                }\n            });\n            return intf;\n        }\n        function createFilterContextMenuItems(e) {\n            var filterContainer = document.createElement('div'),\n                filterLabel = document.createElement('div'),\n                filterAutoCompleteButton = document.createElement('button'),\n                filterInput = document.createElement('input'),\n                n = e.cell && e.cell.header ? e.cell.header.title || e.cell.header.name : '',\n                autoCompleteItems,\n                iRect;\n            function checkRegExpErrorState() {\n                filterInput.style.background = self.style.contextFilterInputBackground;\n                filterInput.style.color = self.style.contextFilterInputColor;\n                if (self.invalidFilterRegEx) {\n                    filterInput.style.background = self.style.contextFilterInvalidRegExpBackground;\n                    filterInput.style.color = self.style.contextFilterInvalidRegExpColor;\n                }\n            }\n            function fillAutoComplete() {\n                var count = 0;\n                autoCompleteItems = {};\n                self.data.forEach(function (row) {\n                    var value = row[e.cell.header.name];\n                    if (autoCompleteItems[value] || count > self.attributes.maxAutoCompleteItems) { return; }\n                    count += 1;\n                    autoCompleteItems[value] = {\n                        title: self.formatters[e.cell.header.type || 'string']({ cell: { value: value }}),\n                        click: function (e) {\n                            filterInput.value = value;\n                            e.stopPropagation();\n                            filterInput.dispatchEvent(new Event('keyup'));\n                            self.disposeAutocomplete();\n                            return;\n                        }\n                    };\n                });\n                autoCompleteItems = Object.keys(autoCompleteItems).map(function (key) {\n                    return autoCompleteItems[key];\n                });\n            }\n            function createAutoCompleteContext(ev) {\n                if (ev && [40, 38, 13, 9].indexOf(ev.keyCode) !== -1) { return; }\n                fillAutoComplete();\n                iRect = filterInput.getBoundingClientRect();\n                if (autoCompleteContext) {\n                    autoCompleteContext.dispose();\n                    autoCompleteContext = undefined;\n                }\n                autoCompleteContext = createContextMenu(e, {\n                    left: iRect.left,\n                    top: iRect.top,\n                    right: iRect.right,\n                    bottom: iRect.bottom,\n                    height: iRect.height,\n                    width: iRect.width\n                }, autoCompleteItems, {inputDropdown: true});\n                autoCompleteContext.selectedIndex = 0;\n            }\n            self.createInlineStyle(filterLabel, 'canvas-datagrid-context-menu-label');\n            self.createInlineStyle(filterAutoCompleteButton, 'canvas-datagrid-context-menu-filter-button');\n            self.createInlineStyle(filterInput, 'canvas-datagrid-context-menu-filter-input');\n            checkRegExpErrorState();\n            filterInput.onclick = self.disposeAutocomplete;\n            filterInput.addEventListener('keydown', function (e) {\n                //down\n                if (e.keyCode === 40) {\n                    autoCompleteContext.selectedIndex += 1;\n                }\n                //up\n                if (e.keyCode === 38) {\n                    autoCompleteContext.selectedIndex -= 1;\n                }\n                //enter\n                if (e.keyCode === 13) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    self.disposeContextMenu();\n                }\n                //tab\n                if (e.keyCode === 9) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    e.preventDefault();\n                }\n                //esc\n                if (e.keyCode === 27) {\n                    self.disposeContextMenu();\n                }\n            });\n            filterInput.addEventListener('keyup', function () {\n                self.setFilter(e.cell.header.name, filterInput.value);\n            });\n            filterInput.addEventListener('keyup', createAutoCompleteContext);\n            ['focus', 'blur', 'keydown', 'keyup', 'change'].forEach(function (en) {\n                filterInput.addEventListener(en, checkRegExpErrorState);\n            });\n            filterInput.value = e.cell.header ? self.columnFilters[e.cell.header.name] || '' : '';\n            filterLabel.innerHTML = self.attributes.filterOptionText.replace(/%s/g, n);\n            filterAutoCompleteButton.onclick = function () {\n                if (autoCompleteContext) {\n                    return self.disposeAutocomplete();\n                }\n                createAutoCompleteContext();\n            };\n            filterAutoCompleteButton.innerHTML = self.style.contextFilterButtonHTML;\n            filterContainer.addEventListener('click', function (e) {\n                return e.stopPropagation();\n            });\n            filterContainer.appendChild(filterLabel);\n            filterContainer.appendChild(filterInput);\n            filterContainer.appendChild(filterAutoCompleteButton);\n            e.items.push({\n                title: filterContainer\n            });\n            if (Object.keys(self.columnFilters).length) {\n                Object.keys(self.columnFilters).forEach(function (cf) {\n                    var h = self.getHeaderByName(cf);\n                    e.items.push({\n                        title: self.attributes.removeFilterOptionText.replace(/%s/g, h.title || h.name),\n                        click: function removeFilterClick(e) {\n                            e.preventDefault();\n                            self.setFilter(cf, '');\n                            self.controlInput.focus();\n                        }\n                    });\n                });\n            }\n        }\n        function addDefaultContextMenuItem(e) {\n            var isNormalCell = !(e.cell.isBackground || e.cell.isHeaderCellCap\n                    || e.cell.isScrollBar || e.cell.isCorner || e.cell.isRowHeader)\n                    && e.cell.header;\n            if (self.attributes.showFilter && isNormalCell) {\n                createFilterContextMenuItems(e);\n            }\n            if (self.attributes.showCopy\n                    && self.selections.reduce(function (p, r) {\n                        return p + r.length;\n                    }, 0) > 0) {\n                e.items.push({\n                    title: self.attributes.copyText,\n                    click: function () {\n                        document.execCommand('copy');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.showPaste && self.clipBoardData) {\n                e.items.push({\n                    title: self.attributes.pasteText,\n                    click: function () {\n                        self.paste(self.clipBoardData, e.cell.columnIndex, e.cell.rowIndex);\n                        self.draw();\n                    }\n                });\n            }\n            if (self.attributes.showColumnSelector) {\n                e.items.push({\n                    title: self.attributes.columnSelectorText,\n                    items: function () {\n                        var d = [];\n                        self.getSchema().forEach(function (column) {\n                            function toggleColumnVisibility(e) {\n                                column.hidden = !column.hidden;\n                                e.preventDefault();\n                                self.stopPropagation(e);\n                                self.disposeContextMenu();\n                                self.draw();\n                            }\n                            var el = document.createElement('div');\n                            applyContextItemStyle(el);\n                            el.addEventListener('touchstart', toggleColumnVisibility);\n                            el.addEventListener('click', toggleColumnVisibility);\n                            el.innerHTML = (column.hidden ? self.attributes.columnSelectorHiddenText\n                                    : self.attributes.columnSelectorVisibleText)\n                                    + (column.title || column.name);\n                            d.push({\n                                title: el\n                            });\n                        });\n                        return d;\n                    }\n                });\n                if (e.cell && e.cell.header) {\n                    e.items.push({\n                        title: self.attributes.hideColumnText\n                            .replace(/%s/ig, e.cell.header.title || e.cell.header.name),\n                        click: function (ev) {\n                            e.cell.header.hidden = true;\n                            ev.preventDefault();\n                            self.stopPropagation(ev);\n                            self.disposeContextMenu();\n                            setTimeout(self.draw, 10);\n                        }\n                    });\n                }\n            }\n            if (self.attributes.saveAppearance && self.attributes.showClearSettingsOption\n                    && (Object.keys(self.sizes.rows).length > 0\n                        || Object.keys(self.sizes.columns).length > 0)) {\n                e.items.push({\n                    title: self.attributes.clearSettingsOptionText,\n                    click: function (e) {\n                        e.preventDefault();\n                        self.sizes.rows = {};\n                        self.sizes.columns = {};\n                        self.createRowOrders();\n                        self.createColumnOrders();\n                        self.storedSettings = undefined;\n                        self.dispatchEvent('resizecolumn', {columnWidth: self.style.cellWidth});\n                        self.dispatchEvent('resizerow', {cellHeight: self.style.cellHeight});\n                        self.setStorageData();\n                        self.resize(true);\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.allowSorting && self.attributes.showOrderByOption && isNormalCell) {\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextAsc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'asc');\n                        self.controlInput.focus();\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextDesc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'desc');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n        }\n        self.disposeAutocomplete = function () {\n            if (autoCompleteContext) {\n                autoCompleteContext.dispose();\n                autoCompleteContext = undefined;\n            }\n        };\n        self.disposeContextMenu = function () {\n            document.removeEventListener('click', self.disposeContextMenu);\n            zIndexTop = 9000;\n            self.disposeAutocomplete();\n            if (self.contextMenu) {\n                self.contextMenu.dispose();\n            }\n            self.contextMenu = undefined;\n        };\n        self.contextmenuEvent = function (e, overridePos) {\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            function createDiposeEvent() {\n                requestAnimationFrame(function () {\n                    document.addEventListener('click', self.disposeContextMenu);\n                    document.removeEventListener('mouseup', createDiposeEvent);\n                });\n            }\n            var contextPosition,\n                items = [],\n                pos = overridePos || self.getLayerPos(e),\n                ev = {\n                    NativeEvent: e,\n                    cell: self.getCellAt(pos.x, pos.y),\n                    items: items\n                },\n                st,\n                sl;\n            if (!ev.cell.isGrid) {\n                addDefaultContextMenuItem(ev);\n            }\n            if (document.scrollingElement) {\n                sl = document.scrollingElement.scrollLeft;\n                st = document.scrollingElement.scrollTop;\n            }\n            if (self.dispatchEvent('contextmenu', ev)) {\n                return;\n            }\n            if (!ev.cell.isGrid) {\n                if (self.contextMenu) {\n                    self.disposeContextMenu();\n                }\n                contextPosition = {\n                    left: pos.x + sl + pos.rect.left + self.style.contextMenuMarginLeft + self.canvasOffsetLeft,\n                    top: pos.y + st + pos.rect.top + self.style.contextMenuMarginTop + self.canvasOffsetTop,\n                    right: ev.cell.width + ev.cell.x + pos.rect.left,\n                    bottom: ev.cell.height + ev.cell.y + pos.rect.top,\n                    height: ev.cell.height,\n                    width: ev.cell.width\n                };\n                if (self.mobile) {\n                    contextPosition.left = self.style.mobileContextMenuMargin + 'px';\n                    contextPosition.width = self.width - (self.style.mobileContextMenuMargin * 2) + 'px';\n                }\n                self.contextMenu = createContextMenu(ev, contextPosition, items);\n                document.addEventListener('mouseup', createDiposeEvent);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        self.getClippingRect = function (ele) {\n            var boundingRect = self.position(self.parentNode),\n                eleRect = self.position(ele),\n                s = self.scrollOffset(self.canvas),\n                clipRect = {\n                    x: 0,\n                    y: 0,\n                    h: 0,\n                    w: 0\n                },\n                parentRect = {\n                    x: -Infinity,\n                    y: -Infinity,\n                    h: Infinity,\n                    w: Infinity\n                },\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth();\n            boundingRect.top -= s.top;\n            boundingRect.left -= s.left;\n            eleRect.top -= s.top;\n            eleRect.left -= s.left;\n            clipRect.h = boundingRect.top + boundingRect.height - ele.offsetTop - self.style.scrollBarWidth;\n            clipRect.w = boundingRect.left + boundingRect.width - ele.offsetLeft - self.style.scrollBarWidth;\n            clipRect.x = boundingRect.left + (eleRect.left * -1) + rowHeaderCellWidth;\n            clipRect.y = boundingRect.top + (eleRect.top * -1) + columnHeaderCellHeight;\n            return {\n                x: clipRect.x > parentRect.x ? clipRect.x : parentRect.x,\n                y: clipRect.y > parentRect.y ? clipRect.y : parentRect.y,\n                h: clipRect.h < parentRect.h ? clipRect.h : parentRect.h,\n                w: clipRect.w < parentRect.w ? clipRect.w : parentRect.w\n            };\n        };\n        self.clipElement = function (ele) {\n            var clipRect = self.getClippingRect(ele);\n            if (clipRect.w < 0) { clipRect.w = 0; }\n            if (clipRect.h < 0) { clipRect.h = 0; }\n            ele.style.clip = 'rect('\n                + clipRect.y + 'px,'\n                + clipRect.w + 'px,'\n                + clipRect.h + 'px,'\n                + clipRect.x + 'px'\n                + ')';\n            // INFO https://developer.mozilla.org/en-US/docs/Web/CSS/clip\n            // clip has been \"deprecated\" for clipPath.  Of course nothing but chrome\n            // supports clip path, so we'll keep using clip until someday clipPath becomes\n            // more widely support.  The code below works correctly, but setting clipPath and clip\n            // at the same time has undesirable results.\n            // ele.style.clipPath = 'polygon('\n            //     + clipRect.x + 'px ' + clipRect.y + 'px,'\n            //     + clipRect.x + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.y + 'px'\n            //     + ')';\n        };\n        self.scrollOffset = function (e) {\n            var x = 0, y = 0;\n            while (e.parentNode && e.nodeName !== 'CANVAS-DATAGRID') {\n                if (e.nodeType !== 'canvas-datagrid-tree'\n                        && e.nodeType !== 'canvas-datagrid-cell') {\n                    x -= e.scrollLeft;\n                    y -= e.scrollTop;\n                }\n                e = e.parentNode;\n            }\n            return {left: x, top: y};\n        };\n        self.resizeEditInput = function () {\n            if (self.input) {\n                var pos = self.canvas.getBoundingClientRect(),\n                    s = self.scrollOffset(self.canvas),\n                    bm = self.style.borderCollapse === 'collapse' ? 1 : 2,\n                    borderWidth = (self.style.cellBorderWidth * bm),\n                    cell = self.getVisibleCellByIndex(self.input.editCell.columnIndex, self.input.editCell.rowIndex)\n                        || {x: -100, y: -100, height: 0, width: 0};\n                if (self.mobile) {\n                    self.input.style.left = '0';\n                    self.input.style.top = (self.height - self.style.mobileEditInputHeight) - borderWidth - 1 + 'px';\n                    self.input.style.height = self.style.mobileEditInputHeight + 'px';\n                    self.input.style.width = self.width - borderWidth - 1 + 'px';\n                    return;\n                }\n                self.input.style.left = pos.left + cell.x + self.canvasOffsetLeft - s.left + 'px';\n                self.input.style.top = pos.top + cell.y - self.style.cellBorderWidth + self.canvasOffsetTop - s.top + 'px';\n                self.input.style.height = cell.height - borderWidth + 'px';\n                self.input.style.width = cell.width - self.style.cellPaddingLeft + 'px';\n                self.clipElement(self.input);\n            }\n        };\n        self.position = function (e, ignoreScrollOffset) {\n            var x = 0, y = 0, s = e, h, w;\n            while (e.offsetParent && e.nodeName !== 'CANVAS-DATAGRID') {\n                x += e.offsetLeft;\n                y += e.offsetTop;\n                h = e.offsetHeight;\n                w = e.offsetWidth;\n                e = e.offsetParent;\n            }\n            if (ignoreScrollOffset) {\n                return {left: x, top: y, height: h, width: w};\n            }\n            e = s;\n            s = self.scrollOffset(e);\n            return { left: x + s.left, top: y + s.top, height: h, width: w };\n        };\n        self.getLayerPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.clientX - rect.left,\n                    y: e.clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        /**\n         * Ends editing, optionally aborting the edit.\n         * @memberof canvasDatagrid\n         * @name endEdit\n         * @method\n         * @param {boolean} abort When true, abort the edit.\n         */\n        self.endEdit = function (abort) {\n            var cell = self.input.editCell,\n                y = cell.rowIndex;\n            function abortEdit() {\n                abort = true;\n            }\n            if (self.dispatchEvent('beforeendedit', {\n                    cell: cell,\n                    newValue: self.input.value,\n                    oldValue: cell.value,\n                    abort: abortEdit,\n                    input: self.input\n                })) { return false; }\n            if (self.input.value !== cell.value && !abort) {\n                self.changes[y] = self.changes[y] || {};\n                self.changes[y][cell.header.name] = self.input.value;\n                cell.data[cell.header.name] = self.input.value;\n                if (y === self.data.length) {\n                    if (self.dispatchEvent('newrow', {\n                            value: self.input.value,\n                            defaultValue: cell.value,\n                            aborted: abort,\n                            cell: cell,\n                            input: self.input\n                        })) { return false; }\n                    self.uId += 1;\n                    self.addRow(cell.data);\n                    self.createNewRowData();\n                }\n                self.draw(true);\n            }\n            document.body.removeChild(self.input);\n            self.controlInput.focus();\n            self.dispatchEvent('endedit', {\n                cell: cell,\n                value: self.input.value,\n                aborted: abort,\n                input: self.input\n            });\n            self.input = undefined;\n            return true;\n        };\n        /**\n         * Begins editing at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name beginEditAt\n         * @method\n         * @param {number} x The column index of the cell to edit.\n         * @param {number} y The row index of the cell to edit.\n         */\n        self.beginEditAt = function (x, y) {\n            if (!self.attributes.editable) { return; }\n            if (self.input) {\n                self.endEdit();\n            }\n            var cell = self.getVisibleCellByIndex(x, y),\n                s = self.getVisibleSchema(),\n                enumItems,\n                enu,\n                option,\n                valueInEnum;\n            if (!(cell && cell.header)) { return; }\n            //HACK for IE10, does not like literal enum\n            enu = cell.header['enum'];\n            if (self.dispatchEvent('beforebeginedit', {cell: cell})) { return false; }\n            self.scrollIntoView(x, y);\n            self.setActiveCell(x, y);\n            if (enu) {\n                self.input = document.createElement('select');\n            } else {\n                self.input = document.createElement(self.attributes.multiLine\n                    ? 'textarea' : 'input');\n            }\n            cell = self.getVisibleCellByIndex(x, y);\n            //HACK on mobile devices sometimes edit can begin without the cell being in view, I don't know how.\n            if (!cell) { return; }\n            if (enu) {\n                // add enums\n                if (typeof enu === 'function') {\n                    enumItems = enu.apply(self.intf, [{cell: cell}]);\n                } else if (Array.isArray(enu)) {\n                    enumItems = enu;\n                }\n                enumItems.forEach(function (e) {\n                    var i = document.createElement('option'),\n                        val,\n                        title;\n                    if (Array.isArray(e)) {\n                        val = e[0];\n                        title = e[1];\n                    } else {\n                        val = e;\n                        title = e;\n                    }\n                    if (val === cell.value) { valueInEnum = true; }\n                    i.value = val;\n                    i.innerHTML = title;\n                    self.input.appendChild(i);\n                });\n                if (!valueInEnum) {\n                    option = document.createElement('option');\n                    option.value = cell.value;\n                    option.innerHTML = cell.value;\n                    self.input.appendChild(option);\n                }\n                self.input.addEventListener('change', function () {\n                    self.endEdit();\n                    self.draw(true);\n                });\n            }\n            document.body.appendChild(self.input);\n            self.createInlineStyle(self.input, self.mobile ? 'canvas-datagrid-edit-mobile-input' : 'canvas-datagrid-edit-input');\n            self.input.style.position = 'absolute';\n            self.input.editCell = cell;\n            self.resizeEditInput();\n            self.input.style.zIndex = '2';\n            self.input.style.fontSize = (parseInt(self.style.editCellFontSize, 10) * self.scale) + 'px';\n            self.input.value = cell.value;\n            self.input.focus();\n            self.input.addEventListener('click', self.stopPropagation);\n            self.input.addEventListener('dblclick', self.stopPropagation);\n            self.input.addEventListener('mouseup', self.stopPropagation);\n            self.input.addEventListener('mousedown', self.stopPropagation);\n            self.input.addEventListener('keydown', function (e) {\n                var nx = cell.columnIndex,\n                    ny = cell.rowIndex;\n                // esc\n                if (e.keyCode === 27) {\n                    self.endEdit(true);\n                    self.draw(true);\n                // enter\n                } else if (e.keyCode === 13\n                        && (!self.attributes.multiLine\n                            || (self.attributes.multiLine && e.shiftKey))) {\n                    self.endEdit();\n                    self.draw(true);\n                } else if (e.keyCode === 9) {\n                    e.preventDefault();\n                    if (!self.endEdit()) {\n                        return;\n                    }\n                    if (e.shiftKey) {\n                        nx -= 1;\n                    } else {\n                        nx += 1;\n                    }\n                    if (nx < 0) {\n                        nx = s.length - 1;\n                        ny -= 1;\n                    }\n                    if (nx > s.length - 1) {\n                        nx = 0;\n                        ny += 1;\n                    }\n                    if (ny < 0) {\n                        ny = self.data.length - 1;\n                    }\n                    if (ny > self.data.length - 1) {\n                        ny = 0;\n                    }\n                    self.scrollIntoView(nx, ny);\n                    self.beginEditAt(nx, ny);\n                }\n            });\n            self.dispatchEvent('beginedit', {cell: cell, input: self.input});\n        };\n        self.createInlineStyle = function (el, className) {\n            var css = {\n                'canvas-datagrid-context-menu-filter-input': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextFilterInputBackground,\n                    color: self.style.contextFilterInputColor,\n                    border: self.style.contextFilterInputBorder,\n                    borderRadius: self.style.contextFilterInputBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextFilterInputFontFamily,\n                    fontSize: self.style.contextFilterInputFontSize\n                },\n                'canvas-datagrid-context-menu-filter-button': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextFilterButtonBorder,\n                    borderRadius: self.style.contextFilterButtonBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFilterButtonFontFamily,\n                    fontSize: self.style.contextMenuFilterButtonFontSize\n                },\n                'canvas-datagrid-context-child-arrow': {\n                    cssFloat: 'right',\n                    color: self.style.childContextMenuArrowColor,\n                    fontSize: self.style.contextMenuChildArrowFontSize,\n                    fontFamily: self.style.contextMenuFontFamily,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-autocomplete': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    position: 'absolute',\n                    zIndex: 9999,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-autocomplete-item': {\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor\n                },\n                'canvas-datagrid-autocomplete-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-canvas': {\n                    position: 'absolute',\n                    zIndex: '-1'\n                },\n                'canvas-datagrid': {\n                    display: 'block'\n                },\n                'canvas-datagrid-control-input': {\n                    position: 'fixed',\n                    top: '-5px',\n                    left: '-5px',\n                    border: 'none',\n                    opacity: '0',\n                    cursor: 'pointer',\n                    width: '1px',\n                    height: '1px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize\n                },\n                'canvas-datagrid-edit-mobile-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 0',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.mobileEditFontFamily,\n                    fontSize: self.style.mobileEditFontSize,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-edit-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 ' + self.style.editCellPaddingLeft + 'px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.editCellFontFamily,\n                    fontSize: self.style.editCellFontSize,\n                    boxShadow: self.style.editCellBoxShadow,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-context-menu-item-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-context-menu-label': {\n                    margin: self.style.contextMenuLabelMargin,\n                    display: self.style.contextMenuLabelDisplay,\n                    minWidth: self.style.contextMenuLabelMinWidth,\n                    maxWidth: self.style.contextMenuLabelMaxWidth\n                },\n                'canvas-datagrid-context-menu-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-context-menu': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-invalid-search-regExp': {\n                    background: self.style.contextMenuFilterInvalidExpresion\n                }\n            };\n            if (css[className]) {\n                Object.keys(css[className]).map(function (prop) {\n                    el.style[prop] = css[className][prop];\n                });\n            }\n            return;\n        };\n        self.appendTo = function (e) {\n            self.parentNode = e;\n            self.setDom();\n        };\n        self.setDom = function () {\n            if (!self.parentNode) { return; }\n            if (self.parentNode && /canvas-datagrid-(cell|tree)/.test(self.parentNode.nodeType)) {\n                self.isChildGrid = true;\n                self.parentGrid = self.parentNode.parentGrid;\n                self.ctx = self.parentGrid.context;\n                self.canvas = self.parentGrid.canvas;\n                self.controlInput = self.parentGrid.controlInput;\n                self.eventParent = self.canvas;\n            } else {\n                self.controlInput = self.controlInput || document.createElement('input');\n                self.controlInput.onblur = self.intf.blur;\n                self.createInlineStyle(self.controlInput, 'canvas-datagrid-control-input');\n                self.isChildGrid = false;\n                self.parentDOMNode = self.parentNode;\n                self.parentIsCanvas = /^canvas$/i.test(self.parentDOMNode.tagName);\n                if (self.parentIsCanvas) {\n                    self.canvas = self.parentDOMNode;\n                    self.parentDOMNode.appendChild(self.controlInput);\n                } else {\n                    self.canvas = document.createElement('canvas');\n                    self.parentDOMNode.appendChild(self.canvas);\n                    self.parentDOMNode.appendChild(self.controlInput);\n                }\n                self.createInlineStyle(self.canvas, 'canvas-datagrid');\n                self.ctx = self.canvas.getContext('2d');\n                self.ctx.textBaseline = 'alphabetic';\n                self.eventParent = self.canvas;\n            }\n            self.parentNodeStyle = self.canvas.style;\n            self.controlInput.setAttribute('readonly', true);\n            self.controlInput.addEventListener('blur', function (e) {\n                if (e.target !== self.canvas) {\n                    self.hasFocus = false;\n                }\n            });\n            self.eventParent.addEventListener('scroll', self.resize, false);\n            self.eventParent.addEventListener('touchstart', self.touchstart, false);\n            self.eventParent.addEventListener('mouseup', self.mouseup, false);\n            self.eventParent.addEventListener('mousedown', self.mousedown, false);\n            self.eventParent.addEventListener('dblclick', self.dblclick, false);\n            self.eventParent.addEventListener('click', self.click, false);\n            self.eventParent.addEventListener('mousemove', self.mousemove);\n            self.eventParent.addEventListener('wheel', self.scrollWheel, false);\n            self.canvas.addEventListener('contextmenu', self.contextmenuEvent, false);\n            self.controlInput.addEventListener('copy', self.copy);\n            self.controlInput.addEventListener('cut', self.cut);\n            self.controlInput.addEventListener('paste', self.paste);\n            self.controlInput.addEventListener('keypress', self.keypress, false);\n            self.controlInput.addEventListener('keyup', self.keyup, false);\n            self.controlInput.addEventListener('keydown', self.keydown, false);\n            window.addEventListener('resize', self.resize);\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        // all methods here are exposed by intf\n        // to users\n        /**\n         * Converts a integer into a letter A - ZZZZZ...\n         * @memberof canvasDatagrid\n         * @name integerToAlpha\n         * @method\n         * @param {column} n The number to convert.\n         */\n        self.integerToAlpha = function (n) {\n            var ordA = 'a'.charCodeAt(0),\n                ordZ = 'z'.charCodeAt(0),\n                len = ordZ - ordA + 1,\n                s = '';\n            while (n >= 0) {\n                s = String.fromCharCode(n % len + ordA) + s;\n                n = Math.floor(n / len) - 1;\n            }\n            return s;\n        };\n        /**\n         * Inserts a new column before the specified index into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name insertColumn\n         * @method\n         * @param {column} c The column to insert into the schema.\n         * @param {number} index The index of the column to insert before.\n         */\n        self.insertColumn = function (c, index) {\n            var s = self.getSchema();\n            if (s.length < index) {\n                throw new Error('Index is beyond the length of the schema.');\n            }\n            self.validateColumn(c, s);\n            s.splice(index, 0, c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a column from the schema at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteColumn\n         * @tutorial schema\n         * @method\n         * @param {number} index The index of the column to delete.\n         */\n        self.deleteColumn = function (index) {\n            var s = self.getSchema();\n            // remove data matching this column name from data\n            self.data.forEach(function (row) {\n                delete row[s[index].name];\n            });\n            s.splice(index, 1);\n            self.intf.schema = s;\n        };\n        /**\n         * Adds a new column into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name addColumn\n         * @method\n         * @param {column} c The column to add to the schema.\n         */\n        self.addColumn = function (c) {\n            var s = self.getSchema();\n            self.validateColumn(c, s);\n            s.push(c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a row from the dataset at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteRow\n         * @method\n         * @param {number} index The index of the row to delete.\n         */\n        self.deleteRow = function (index) {\n            self.originalData.splice(index, 1);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Inserts a new row into the dataset before the specified index.\n         * @memberof canvasDatagrid\n         * @name insertRow\n         * @method\n         * @param {object} d data.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertRow = function (d, index) {\n            if (self.originalData.length < index) {\n                throw new Error('Index is beyond the length of the dataset.');\n            }\n            self.originalData.splice(index, 0, d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[index], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Adds a new row into the dataset.\n         * @memberof canvasDatagrid\n         * @name addRow\n         * @method\n         * @param {object} d data.\n         */\n        self.addRow = function (d) {\n            self.originalData.push(d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[self.originalData.length - 1], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Sets the height of a given row by index number.\n         * @memberof canvasDatagrid\n         * @name setRowHeight\n         * @method\n         * @param {number} rowIndex The index of the row to set.\n         * @param {number} height Height to set the row to.\n         */\n        self.setRowHeight = function (rowIndex, height) {\n            self.sizes.rows[self.data[rowIndex][self.uniqueId]] = height;\n            self.draw(true);\n        };\n        /**\n         * Sets the width of a given column by index number.\n         * @memberof canvasDatagrid\n         * @name setColumnWidth\n         * @method\n         * @param {number} colIndex The index of the column to set.\n         * @param {number} width Width to set the column to.\n         */\n        self.setColumnWidth = function (colIndex, width) {\n            var s = self.getSchema();\n            self.sizes.columns[s[colIndex][self.uniqueId]] = width;\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the width of the columns due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetColumnWidths\n         * @tutorial schema\n         * @method\n         */\n        self.resetColumnWidths = function () {\n            self.sizes.columns = {};\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the height of the rows due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetRowHeights\n         * @tutorial schema\n         * @method\n         */\n        self.resetRowHeights = function () {\n            self.sizes.rows = {};\n            self.draw(true);\n        };\n        /**\n         * Sets the value of the filter.\n         * @memberof canvasDatagrid\n         * @name setFilter\n         * @method\n         * @param {string} column Name of the column to filter.\n         * @param {string} value The value to filter for.\n         */\n        self.setFilter = function (column, value) {\n            function applyFilter() {\n                self.refreshFromOrigialData();\n                Object.keys(self.columnFilters).forEach(function (filter) {\n                    var header = self.getHeaderByName(column);\n                    if (!header) {\n                        return;\n                    }\n                    self.currentFilter = header.filter || self.filter(column.type || 'string');\n                    self.data = self.data.filter(function (row) {\n                        return self.currentFilter(row[filter], self.columnFilters[filter]);\n                    });\n                });\n                self.resize();\n                self.draw(true);\n            }\n            if (column === undefined && value === undefined) {\n                self.columnFilters = {};\n                return applyFilter();\n            }\n            if (column && (value === '' || value === undefined)) {\n                delete self.columnFilters[column];\n            } else {\n                self.columnFilters[column] = value;\n            }\n            applyFilter();\n        };\n        /**\n         * Returns the number of pixels to scroll down to line up with row rowIndex.\n         * @memberof canvasDatagrid\n         * @name findRowScrollTop\n         * @method\n         * @param {number} rowIndex The row index of the row to scroll find.\n         */\n        self.findRowScrollTop = function (rowIndex) {\n            var top = 0, x = 0, l = self.data.length,\n                bm = self.style.borderCollapse === 'collapse' ? 1 : 2,\n                cellBorder = self.style.cellBorderWidth * bm;\n            if (!self.attributes.showNewRow) {\n                l -= 1;\n            }\n            if (rowIndex > l) {\n                throw new Error('Impossible row index');\n            }\n            while (x < rowIndex) {\n                top += (self.sizes.rows[self.data[x][self.uniqueId]] || self.style.cellHeight) + cellBorder;\n                x += 1;\n            }\n            //TODO: This is not super accurate, causes pageUp/Dn to not move around right\n            return top - (self.sizes.rows[self.data[rowIndex][self.uniqueId]] || self.style.cellHeight);\n        };\n        /**\n         * Returns the number of pixels to scroll to the left to line up with column columnIndex.\n         * @memberof canvasDatagrid\n         * @name findColumnScrollLeft\n         * @method\n         * @param {number} columnIndex The column index of the column to find.\n         */\n        self.findColumnScrollLeft = function (columnIndex) {\n            var left = 0, y = 0, s = self.getSchema(), l = s.length - 1;\n            if (columnIndex > l) {\n                throw new Error('Impossible column index');\n            }\n            while (y < columnIndex) {\n                left += self.sizes.columns[s[y][self.uniqueId]] || s[y].width;\n                y += 1;\n            }\n            return left;\n        };\n        /**\n         * Scrolls the cell at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name gotoCell\n         * @method\n         * @param {number} x The column index of the cell to scroll to.\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoCell = function (x, y) {\n            if (x !== undefined) {\n                self.scrollBox.scrollLeft = self.findColumnScrollLeft(x);\n            }\n            if (y !== undefined) {\n                self.scrollBox.scrollTop = self.findRowScrollTop(y);\n            }\n        };\n        /**\n         * Scrolls the row y.\n         * @memberof canvasDatagrid\n         * @name gotoRow\n         * @method\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoRow = function (y) {\n            self.gotoCell(0, y);\n        };\n        /**\n         * Scrolls the cell at cell x, row y into view if it is not already.\n         * @memberof canvasDatagrid\n         * @name scrollIntoView\n         * @method\n         * @param {number} x The column index of the cell to scroll into view.\n         * @param {number} y The row index of the cell to scroll into view.\n         */\n        self.scrollIntoView = function (x, y) {\n            if (self.visibleCells.filter(function (cell) {\n                    return (cell.rowIndex === y || y === undefined)\n                        && (cell.columnIndex === x || x === undefined)\n                        && cell.x > 0\n                        && cell.y > 0\n                        && cell.x + cell.width < self.width\n                        && cell.y + cell.height < self.height;\n                }).length === 0) {\n                self.gotoCell(x, y);\n            }\n        };\n        /**\n         * Sets the active cell. Requires redrawing.\n         * @memberof canvasDatagrid\n         * @name setActiveCell\n         * @method\n         * @param {number} x The column index of the cell to set active.\n         * @param {number} y The row index of the cell to set active.\n         */\n        self.setActiveCell = function (x, y) {\n            self.activeCell = {\n                rowIndex: y,\n                columnIndex: x\n            };\n        };\n        /**\n         * Removes the selection.\n         * @memberof canvasDatagrid\n         * @name selectNone\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectNone = function (dontDraw) {\n            self.selections = [];\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Selects every visible cell.\n         * @memberof canvasDatagrid\n         * @name selectAll\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectAll = function (dontDraw) {\n            self.selectArea({\n                top: 0,\n                left: 0,\n                right: self.getVisibleSchema().length - 1,\n                bottom: self.data.length - 1\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Returns true if the selected columnIndex is selected on every row.\n         * @memberof canvasDatagrid\n         * @name isColumnSelected\n         * @method\n         * @param {number} columnIndex The column index to check.\n         */\n        self.isColumnSelected = function (columnIndex) {\n            var colIsSelected = true;\n            self.data.forEach(function (row, rowIndex) {\n                if (!self.selections[rowIndex] || self.selections[rowIndex].indexOf(self.orders.columns[columnIndex]) === -1) {\n                    colIsSelected = false;\n                }\n            });\n            return colIsSelected;\n        };\n        /**\n         * Runs the defined method on each selected cell.\n         * @memberof canvasDatagrid\n         * @name forEachSelectedCell\n         * @method\n         * @param {number} fn The function to execute.  The signature of the function is: (data, rowIndex, columnName).\n         * @param {number} expandToRow When true the data in the array is expanded to the entire row.\n         */\n        self.forEachSelectedCell = function (fn, expandToRow) {\n            var d = [], s = expandToRow ? self.getSchema() : self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    if (col === -1 || !s[col]) { return; }\n                    fn(self.data, index, s[col].name);\n                });\n            });\n        };\n        /**\n         * Selects a column.\n         * @memberof canvasDatagrid\n         * @name selectColumn\n         * @method\n         * @param {number} columnIndex The column index to select.\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the column.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the column.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectColumn = function (columnIndex, ctrl, shift, supressEvent) {\n            var s, e, x;\n            function addCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) === -1) {\n                        self.selections[rowIndex].push(i);\n                    }\n                });\n            }\n            function removeCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) !== -1) {\n                        self.selections[rowIndex].splice(self.selections[rowIndex].indexOf(i), 1);\n                    }\n                });\n            }\n            if (shift) {\n                if (!self.activeCell) { return; }\n                s = Math.min(self.activeCell.columnIndex, columnIndex);\n                e = Math.max(self.activeCell.columnIndex, columnIndex);\n                for (x = s; e > x; x += 1) {\n                    addCol(x);\n                }\n            }\n            if (!ctrl && !shift) {\n                self.selections = [];\n                self.activeCell.columnIndex = columnIndex;\n                self.activeCell.rowIndex = self.scrollIndexTop;\n            }\n            if (ctrl && self.isColumnSelected(columnIndex)) {\n                removeCol(columnIndex);\n            } else {\n                addCol(columnIndex);\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.getSelectionBounds()\n            });\n        };\n        /**\n         * Selects a row.\n         * @memberof canvasDatagrid\n         * @name selectRow\n         * @method\n         * @param {number} rowIndex The row index to select.\n         * @param {boolean} ctrl When true, behaves as if you were holding control/command when you clicked the row.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the row.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectRow = function (rowIndex, ctrl, shift, supressEvent) {\n            var x, st, en, s = self.getVisibleSchema();\n            function addRow(ri) {\n                self.selections[ri] = [];\n                self.selections[ri].push(-1);\n                s.forEach(function (col, index) {\n                    self.selections[ri].push(index);\n                });\n            }\n            if (self.dragAddToSelection === false || self.dragObject === undefined) {\n                if (self.selections[rowIndex] && self.selections[rowIndex].length - 1 === s.length) {\n                    if (ctrl) {\n                        self.selections[rowIndex] = [];\n                        return;\n                    }\n                }\n            }\n            if (self.dragAddToSelection === true || self.dragObject === undefined) {\n                if (shift && self.dragObject === undefined) {\n                    if (!self.activeCell) { return; }\n                    st = Math.min(self.activeCell.rowIndex, rowIndex);\n                    en = Math.max(self.activeCell.rowIndex, rowIndex);\n                    for (x = st; en >= x; x += 1) {\n                        addRow(x);\n                    }\n                } else {\n                    addRow(rowIndex);\n                }\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Collapse a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name collapseTree\n         * @method\n         * @param {number} index The index of the row to collapse.\n         */\n        self.collapseTree = function (rowIndex) {\n            var rowId = self.data[rowIndex][self.uniqueId];\n            self.dispatchEvent('collapsetree', {\n                childGrid: self.childGrids[rowId],\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId].blur();\n            self.openChildren[rowId].dispose();\n            delete self.openChildren[rowId];\n            delete self.sizes.trees[rowId];\n            delete self.childGrids[rowId];\n            self.dispatchEvent('resizerow', {\n                cellHeight: self.style.cellHeight\n            });\n            self.resize(true);\n            self.draw(true);\n        };\n        /**\n         * Expands a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name expandTree\n         * @method\n         * @param {number} index The index of the row to expand.\n         */\n        self.expandTree = function (rowIndex) {\n            var columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth,\n                rowId = self.data[rowIndex][self.uniqueId],\n                h = self.sizes.trees[rowId] || self.style.treeGridHeight,\n                treeGrid;\n            if (!self.childGrids[rowId]) {\n                treeGrid = self.createGrid({\n                    debug: self.attributes.debug,\n                    name: self.attributes.saveAppearance\n                        ? self.attributes.name + 'tree' + rowId : undefined,\n                    parentNode: {\n                        parentGrid: self.intf,\n                        nodeType: 'canvas-datagrid-tree',\n                        offsetHeight: h,\n                        offsetWidth: self.width - rowHeaderCellWidth,\n                        header: { width: self.width - rowHeaderCellWidth },\n                        offsetLeft: rowHeaderCellWidth,\n                        offsetTop: columnHeaderCellHeight,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: 'tree',\n                        data: self.data[rowIndex]\n                    }\n                });\n                self.childGrids[rowId] = treeGrid;\n            }\n            treeGrid = self.childGrids[rowId];\n            treeGrid.visible = true;\n            self.dispatchEvent('expandtree', {\n                treeGrid: treeGrid,\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId] = treeGrid;\n            self.sizes.trees[rowId] = h;\n            self.dispatchEvent('resizerow', {height: self.style.cellHeight});\n            self.resize(true);\n        };\n        /**\n         * Toggles tree grid open and close by row index.\n         * @memberof canvasDatagrid\n         * @name toggleTree\n         * @method\n         * @param {number} index The index of the row to toggle.\n         */\n        self.toggleTree = function (rowIndex) {\n            var i = self.openChildren[self.data[rowIndex][self.uniqueId]];\n            if (i) {\n                return self.collapseTree(rowIndex);\n            }\n            self.expandTree(rowIndex);\n        };\n        /**\n         * Returns a header from the schema by name.\n         * @memberof canvasDatagrid\n         * @name getHeaderByName\n         * @tutorial schema\n         * @method\n         * @returns {header} header with the selected name, or undefined.\n         * @param {string} name The name of the column to resize.\n         */\n        self.getHeaderByName = function (name) {\n            var x, i = self.getSchema();\n            for (x = 0; x < i.length; x += 1) {\n                if (i[x].name === name) {\n                    return i[x];\n                }\n            }\n        };\n        /**\n         * Resizes a column to fit the longest value in the column. Call without a value to resize all columns.\n         * Warning, can be slow on very large record sets (1m records ~3-5 seconds on an i7).\n         * @memberof canvasDatagrid\n         * @name fitColumnToValues\n         * @method\n         * @param {string} name The name of the column to resize.\n         */\n        self.fitColumnToValues = function (name, internal) {\n            if (!self.canvas) { return; }\n            self.sizes.columns[name === 'cornerCell' ? name : self.getHeaderByName(name)[self.uniqueId]]\n                = self.findColumnMaxTextLength(name);\n            if (!internal) {\n                self.resize();\n                self.draw(true);\n            }\n        };\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @overload\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {number} columnIndex The column index of the cell to check.\n         * @param {number} rowIndex The row index of the cell to check.\n         */\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {cell} cell The cell to check for.  Alternatively you can pass an object { x: <x-pixel-value>, y: <y-pixel-value> }.\n         */\n        self.isCellVisible = function (cell, rowIndex) {\n            // overload\n            if (rowIndex !== undefined) {\n                return self.visibleCells.filter(function (c) {\n                    return c.columnIndex === cell && c.rowIndex === rowIndex;\n                }).length > 0;\n            }\n            var x, l = self.visibleCells.length;\n            for (x = 0; x < l; x += 1) {\n                if (cell.x === self.visibleCells[x].x && cell.y === self.visibleCells[x].y) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n         * Sets the order of the data.\n         * @memberof canvasDatagrid\n         * @name order\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} columnName Number of pixels from the left.\n         * @param {string} direction `asc` for ascending or `desc` for descending.\n         * @param {function} [sortFunction] When defined, override the default sorting method defined in the column's schema and use this one.\n         * @param {bool} [dontSetStorageData] Don't store this setting for future use.\n         */\n        self.order = function (columnName, direction, sortFunction, dontSetStorageData) {\n            var f,\n                c = self.getSchema().filter(function (col) {\n                    return col.name === columnName;\n                });\n            self.orderBy = columnName;\n            if (c.length === 0) {\n                throw new Error('Cannot sort.  No such column name');\n            }\n            f = sortFunction || self.sorters[c[0].type];\n            if (!f && c[0].type !== undefined) {\n                console.warn('Cannot sort type \"%s\" falling back to string sort.', c[0].type);\n            }\n            self.data = self.data.sort(typeof f === 'function' ? f(columnName, direction) : self.sorters.string);\n            self.dispatchEvent('ordercolumn', {name: columnName, direction: direction});\n            self.draw(true);\n            if (dontSetStorageData) { return; }\n            self.setStorageData();\n        };\n        self.isInGrid = function (e) {\n            if (e.x < 0\n                    || e.x > self.width\n                    || e.y < 0\n                    || e.y > self.height) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Moves the current selection relative to the its current position.  Note: this method does not move the selected data, just the selection itself.\n         * @memberof canvasDatagrid\n         * @name moveSelection\n         * @method\n         * @param {number} offsetX The number of columns to offset the selection.\n         * @param {number} offsetY The number of rows to offset the selection.\n         */\n        self.moveSelection = function (offsetX, offsetY) {\n            var sel = [];\n            self.selections.forEach(function (row, rowIndex) {\n                sel[rowIndex + offsetY] = [];\n                row.forEach(function (colIndex) {\n                    sel[rowIndex + offsetY].push(colIndex + offsetX);\n                });\n            });\n            self.selections = sel;\n        };\n        /**\n         * Moves data in the provided selection to another position in the grid.  Moving data off the edge of the schema (columns/x) will truncate data.\n         * @memberof canvasDatagrid\n         * @name moveTo\n         * @method\n         * @param {array} sel 2D array representing selected rows and columns.  `canvasDatagrid.selections` is in this format and can be used here.\n         * @param {number} x The column index to start inserting the selection at.\n         * @param {number} y The row index to start inserting the selection at.\n         */\n        self.moveTo = function (sel, x, y) {\n            var d = self.getSelectedData(),\n                s = self.getVisibleSchema(),\n                l = sel.length,\n                xi,\n                yi = y - 1;\n            sel.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) { return; }\n                row.forEach(function (col) {\n                    if (!s[col]) { return; }\n                    self.data[index][s[col].name] = null;\n                });\n            });\n            sel.forEach(function (row, index) {\n                yi += 1;\n                xi = x - 1;\n                row.forEach(function (col, cidx) {\n                    xi += 1;\n                    if (col === -1\n                            || !s[xi]\n                            || !s[col]\n                            || self.data.length - 1 < yi\n                            || yi < 0) { return; }\n                    self.data[yi][s[xi].name] = d[index][s[col].name];\n                });\n            });\n        };\n        /**\n         * Checks if a given column is visible.\n         * @memberof canvasDatagrid\n         * @name isColumnVisible\n         * @method\n         * @returns {boolean} When true, the column is visible.\n         * @param {number} columnIndex Column index.\n         */\n        self.isColumnVisible = function (columnIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === columnIndex;\n            }).length > 0;\n        };\n        /**\n         * Checks if a given row is visible.\n         * @memberof canvasDatagrid\n         * @name isRowVisible\n         * @method\n         * @returns {boolean} When true, the row is visible.\n         * @param {number} rowIndex Row index.\n         */\n        self.isRowVisible = function (rowIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.rowIndex === rowIndex;\n            }).length > 0;\n        };\n        /**\n         * Gets the cell at columnIndex and rowIndex.\n         * @memberof canvasDatagrid\n         * @name getVisibleCellByIndex\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Column index.\n         * @param {number} y Row index.\n         */\n        self.getVisibleCellByIndex = function (x, y) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === x && c.rowIndex === y;\n            })[0];\n        };\n        /**\n         * Gets the cell at grid pixel coordinate x and y.  Author's note.  This function ties drawing and events together.  This is a very complex function and is core to the component.\n         * @memberof canvasDatagrid\n         * @name getCellAt\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Number of pixels from the left.\n         * @param {number} y Number of pixels from the top.\n         */\n        self.getCellAt = function (x, y, useTouchScrollZones) {\n            function getBorder(cell) {\n                if (cell.x + cell.width - (self.attributes.borderResizeZone * 0.4) < x && cell.x + cell.width + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'r';\n                }\n                if (cell.x - (self.attributes.borderResizeZone * 0.4) < x && cell.x + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'l';\n                }\n                if (cell.y + cell.height - (self.attributes.borderResizeZone * 0.4) < y && cell.y + cell.height + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 'b';\n                }\n                if (cell.y - (self.attributes.borderResizeZone * 0.4) < y && cell.y + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 't';\n                }\n            }\n            var border,\n                tsz = useTouchScrollZones ? self.attributes.touchScrollZone : 0,\n                moveMode = self.attributes.borderDragBehavior === 'move',\n                i,\n                l = self.visibleCells.length,\n                moveBorder,\n                xBorderBehavior = moveMode ? self.cursorGrab : 'ew-resize',\n                yBorderBehavior = moveMode ? self.cursorGrab : 'ns-resize',\n                cell;\n            if (!self.visibleCells || !self.visibleCells.length) { return; }\n            self.hasFocus = true;\n            if (!(y < self.height\n                && y > 0\n                && x < self.width\n                && x > 0)) {\n                self.hasFocus = false;\n                return {\n                    dragContext: 'inherit',\n                    context: 'inherit'\n                };\n            }\n            for (i = 0; i < l; i += 1) {\n                cell = self.visibleCells[i];\n                if (useTouchScrollZones && /(vertical|horizontal)-scroll-/.test(cell.style)) {\n                    cell.x -= tsz;\n                    cell.y -= tsz;\n                    cell.height += tsz;\n                    cell.width += tsz;\n                }\n                if (cell.x - self.style.cellBorderWidth < x\n                        && cell.x + cell.width + self.style.cellBorderWidth > x\n                        && cell.y - self.style.cellBorderWidth < y\n                        && cell.y + cell.height + self.style.cellBorderWidth > y) {\n                    if (/frozen-row-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'row-resize';\n                        return cell;\n                    }\n                    if (/frozen-column-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'col-resize';\n                        return cell;\n                    }\n                    if (/selection-handle-/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'crosshair';\n                        return cell;\n                    }\n                    if (/vertical-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'vertical-scroll-box';\n                        cell.context = 'vertical-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isVerticalScrollBar = true;\n                        if (y > self.scrollBox.box.v.y + self.scrollBox.scrollBoxHeight) {\n                            cell.dragContext = 'vertical-scroll-bottom';\n                            cell.context = 'vertical-scroll-bottom';\n                        } else if (y < self.scrollBox.box.v.y) {\n                            cell.dragContext = 'vertical-scroll-top';\n                            cell.context = 'vertical-scroll-top';\n                        }\n                        self.canvas.style.cursor = 'default';\n                        return cell;\n                    }\n                    if (/horizontal-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'horizontal-scroll-box';\n                        cell.context = 'horizontal-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isHorizontalScrollBar = true;\n                        if (x > self.scrollBox.box.h.x + self.scrollBox.scrollBoxWidth) {\n                            cell.dragContext = 'horizontal-scroll-right';\n                            cell.context = 'horizontal-scroll-right';\n                        } else if (x < self.scrollBox.box.h.x) {\n                            cell.dragContext = 'horizontal-scroll-left';\n                            cell.context = 'horizontal-scroll-left';\n                        }\n                        self.canvas.style.cursor = 'default';\n                        return cell;\n                    }\n                    border = getBorder(cell);\n                    // check if the border of this cell is the border of the selection and if so show move cursor in move mode\n                    moveBorder = moveMode && cell.selectionBorder && cell.selectionBorder.indexOf(border) !== -1;\n                    if (['l', 'r'].indexOf(border) !== -1\n                            && (self.attributes.allowColumnResize || moveBorder)\n                            && ((self.attributes.allowColumnResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && ((self.attributes.allowRowHeaderResize && (cell.isRowHeader || cell.isCorner)) || !(cell.isRowHeader && cell.isCorner))) {\n                        if (((cell.isColumnHeader || cell.isCorner) || (self.attributes.allowColumnResizeFromCell && cell.isNormal)) && border === 'r') {\n                            cell.context = 'ew-resize';\n                            cell.dragContext = 'ew-resize';\n                            return cell;\n                        }\n                        if (!(cell.isColumnHeader || cell.isCorner) && moveBorder) {\n                            cell.context = xBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (['t', 'b'].indexOf(border) !== -1\n                            && cell.rowIndex > -1\n                            && (self.attributes.allowRowResize || moveBorder)\n                            && ((self.attributes.allowRowResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && !cell.isColumnHeader) {\n                        if (((cell.isRowHeader || cell.isCorner) || (self.attributes.allowRowResizeFromCell && cell.isNormal)) && border === 'b') {\n                            cell.context = 'ns-resize';\n                            cell.dragContext = 'ns-resize';\n                            return cell;\n                        }\n                        if (!(cell.isRowHeader || cell.isCorner) && moveBorder) {\n                            cell.context = yBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (cell.style === 'columnHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'column-reorder';\n                        return cell;\n                    }\n                    if (cell.style === 'rowHeaderCell') {\n                        if ((self.attributes.rowGrabZoneSize + (cell.y - self.style.cellBorderWidth) < y)\n                                || !self.attributes.allowRowReordering) {\n                            cell.dragContext = 'cell';\n                            cell.context = 'cell';\n                        } else {\n                            cell.context = self.cursorGrab;\n                            cell.dragContext = 'row-reorder';\n                        }\n                        return cell;\n                    }\n                    if (cell.isGrid) {\n                        self.hasFocus = false;\n                        cell.dragContext = 'cell-grid';\n                        cell.context = 'cell-grid';\n                        return cell;\n                    }\n                    if (cell.style === 'tree-grid') {\n                        self.hasFocus = false;\n                        cell.dragContext = 'tree';\n                        cell.context = 'tree';\n                        return cell;\n                    }\n                    cell.dragContext = 'cell';\n                    cell.context = 'cell';\n                    return cell;\n                }\n            }\n            self.hasFocus = true;\n            self.canvas.style.cursor = 'default';\n            return {\n                dragContext: 'background',\n                context: 'background',\n                style: 'background',\n                isBackground: true\n            };\n        };\n        /**\n         * Gets the bounds of current selection. \n         * @returns {rect} selection.\n         * @memberof canvasDatagrid\n         * @name getSelectionBounds\n         * @method\n         */\n        self.getSelectionBounds = function () {\n            var low = {x: Infinity, y: Infinity},\n                high = {x: -Infinity, y: -Infinity};\n            self.data.forEach(function (row, rowIndex) {\n                var maxCol, minCol;\n                if (self.selections[rowIndex] && self.selections[rowIndex].length) {\n                    low.y = rowIndex < low.y ? rowIndex : low.y;\n                    high.y = rowIndex > high.y ? rowIndex : high.y;\n                    maxCol = Math.max.apply(null, self.selections[rowIndex]);\n                    minCol = Math.min.apply(null, self.selections[rowIndex]);\n                    low.x = minCol < low.x ? minCol : low.x;\n                    high.x = maxCol > high.x ? maxCol : high.x;\n                }\n            });\n            return {\n                top: low.y,\n                left: low.x,\n                bottom: high.y,\n                right: high.x\n            };\n        };\n        /**\n         * Returns an auto generated schema based on data structure.\n         * @memberof canvasDatagrid\n         * @name getSchemaFromData\n         * @method\n         * @tutorial schema\n         * @returns {schema} schema A schema based on the first item in the data array.\n         */\n        self.getSchemaFromData = function () {\n            return Object.keys(self.data[0] || {' ': ''}).map(function mapEachSchemaColumn(key, index) {\n                var type = self.getBestGuessDataType(key),\n                    i = {\n                        name: key,\n                        title: isNaN(parseInt(key, 10)) ? key : self.integerToAlpha(key).toUpperCase(),\n                        width: self.style.cellWidth,\n                        index: index,\n                        type: type,\n                        filter: self.filter(type)\n                    };\n                if (key === self.uniqueId) {\n                    i.hidden = true;\n                }\n                i[self.uniqueId] = self.getSchemaNameHash(key);\n                return i;\n            });\n        };\n        /**\n         * Clears the change log grid.changes that keeps track of changes to the data set.\n         * This does not undo changes or alter data it is simply a convince array to keep\n         * track of changes made to the data since last this method was called.\n         * @memberof canvasDatagrid\n         * @name clearChangeLog\n         * @method\n         */\n        self.clearChangeLog = function () {\n            self.changes = [];\n        };\n        /**\n         * Selects an area of the grid.\n         * @memberof canvasDatagrid\n         * @name selectArea\n         * @method\n         * @param {rect} bounds A rect object representing the selected values.\n         */\n        self.selectArea = function (bounds, ctrl) {\n            self.selectionBounds = bounds || self.selectionBounds;\n            var x, y, s = self.getSchema();\n            if (!ctrl) {\n                self.selections = [];\n            }\n            if (self.selectionBounds.top < -1\n                    || self.selectionBounds.bottom > self.data.length\n                    || self.selectionBounds.left < -1\n                    || self.selectionBounds.right > s.length) {\n                throw new Error('Impossible selection area');\n            }\n            for (x = self.selectionBounds.top; x <= self.selectionBounds.bottom; x += 1) {\n                self.selections[x] = [];\n                for (y = self.selectionBounds.left; y <= self.selectionBounds.right; y += 1) {\n                    if (self.selections[x].indexOf(y) === -1) {\n                        self.selections[x].push(y);\n                    }\n                }\n            }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Returns the maximum text width for a given column by column name.\n         * @memberof canvasDatagrid\n         * @name findColumnMaxTextLength\n         * @method\n         * @returns {number} The number of pixels wide the maximum width value in the selected column.\n         * @param {string} name The name of the column to calculate the value's width of.\n         */\n        self.findColumnMaxTextLength = function (name) {\n            var m = -Infinity;\n            if (name === 'cornerCell') {\n                self.ctx.font = self.style.rowHeaderCellFont;\n                return self.ctx.measureText((self.data.length + (self.attributes.showNewRow ? 1 : 0)).toString()).width\n                    + self.style.autosizePadding + self.style.autosizeHeaderCellPadding\n                    + self.style.rowHeaderCellPaddingRight\n                    + self.style.rowHeaderCellPaddingLeft\n                    + (self.attributes.tree ? self.style.treeArrowWidth\n                        + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight : 0);\n            }\n            self.getSchema().forEach(function (col) {\n                if (col.name !== name) { return; }\n                self.ctx.font = self.style.columnHeaderCellFont;\n                var t = self.ctx.measureText(col.title || col.name).width\n                    + self.style.headerCellPaddingRight\n                    + self.style.headerCellPaddingLeft;\n                m = t > m ? t : m;\n            });\n            self.data.forEach(function (row) {\n                self.ctx.font = self.style.cellFont;\n                var t = self.ctx.measureText(row[name]).width\n                    + self.style.cellPaddingRight\n                    + self.style.cellPaddingLeft + self.style.cellAutoResizePadding;\n                m = t > m ? t : m;\n            });\n            return m;\n        };\n        /**\n         * Gets the total width of all header columns.\n         * @memberof canvasDatagrid\n         * @name getHeaderWidth\n         * @method\n         */\n        self.getHeaderWidth = function () {\n            return self.getVisibleSchema().reduce(function (total, header) {\n                return total + header.width;\n            }, 0);\n        };\n        self.formatters.string = function cellFormatterString(e) {\n            return e.cell.value !== undefined ? e.cell.value : '';\n        };\n        self.formatters.rowHeaderCell = self.formatters.string;\n        self.formatters.headerCell = self.formatters.string;\n        self.formatters.number = self.formatters.string;\n        self.formatters.int = self.formatters.string;\n        self.formatters.html = self.formatters.string;\n        self.sorters.string = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (a[columnName] === undefined || a[columnName] === null) {\n                    return 1;\n                }\n                if (b[columnName] === undefined || b[columnName] === null) {\n                    return 0;\n                }\n                if (asc) {\n                    if (!a[columnName].localeCompare) { return 1; }\n                    return a[columnName].localeCompare(b[columnName]);\n                }\n                if (!b[columnName].localeCompare) { return 1; }\n                return b[columnName].localeCompare(a[columnName]);\n            };\n        };\n        self.sorters.number = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return a[columnName] - b[columnName];\n                }\n                return b[columnName] - a[columnName];\n            };\n        };\n        self.sorters.date = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return new Date(a[columnName]).getTime()\n                        - new Date(b[columnName]).getTime();\n                }\n                return new Date(b[columnName]).getTime()\n                        - new Date(a[columnName]).getTime();\n            };\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// canvas-datagrid.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 9ad391b55d72e1b9a082","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.defaults = {\n            attributes: [\n                ['allowColumnReordering', true],\n                ['allowColumnResize', true],\n                ['allowColumnResizeFromCell', false],\n                ['allowFreezingRows', false],\n                ['allowFreezingColumns', false],\n                ['allowMovingSelection', true],\n                ['allowRowHeaderResize', true],\n                ['allowRowReordering', false],\n                ['allowRowResize', true],\n                ['allowRowResizeFromCell', false],\n                ['allowSorting', true],\n                ['autoResizeColumns', false],\n                ['borderDragBehavior', 'none'],\n                ['borderResizeZone', 10],\n                ['clearSettingsOptionText', 'Clear saved settings'],\n                ['columnHeaderClickBehavior', 'sort'],\n                ['columnSelectorHiddenText', '&nbsp;&nbsp;&nbsp;'],\n                ['columnSelectorText', 'Add/Remove columns'],\n                ['columnSelectorVisibleText', '\\u2713'],\n                ['contextHoverScrollAmount', 2],\n                ['contextHoverScrollRateMs', 5],\n                ['copyText', 'Copy'],\n                ['debug', false],\n                ['editable', true],\n                ['filterOptionText', 'Filter %s'],\n                ['filterTextPrefix', '(filtered) '],\n                ['globalRowResize', false],\n                ['hideColumnText', 'Hide %s'],\n                ['maxAutoCompleteItems', 200],\n                ['multiLine', false],\n                ['name', ''],\n                ['pageUpDownOverlap', 1],\n                ['pasteText', 'Paste'],\n                ['persistantSelectionMode', false],\n                ['removeFilterOptionText', 'Remove filter on %s'],\n                ['reorderDeadZone', 3],\n                ['resizeScrollZone', 20],\n                ['rowGrabZoneSize', 5],\n                ['saveAppearance', true],\n                ['scrollAnimationPPSThreshold', 0.75],\n                ['scrollPointerLock', false],\n                ['scrollRepeatRate', 75],\n                ['selectionFollowsActiveCell', false],\n                ['selectionHandleBehavior', 'none'],\n                ['selectionMode', 'cell'],\n                ['selectionScrollIncrement', 20],\n                ['selectionScrollZone', 20],\n                ['showClearSettingsOption', true],\n                ['showColumnHeaders', true],\n                ['showColumnSelector', true],\n                ['showCopy', true],\n                ['showFilter', true],\n                ['showNewRow', false],\n                ['showOrderByOption', true],\n                ['showOrderByOptionTextAsc', 'Order by %s ascending'],\n                ['showOrderByOptionTextDesc', 'Order by %s descending'],\n                ['showPaste', false],\n                ['showPerformance', false],\n                ['showRowHeaders', true],\n                ['showRowNumbers', true],\n                ['snapToRow', false],\n                ['touchContextMenuTimeMs', 800],\n                ['touchDeadZone', 3],\n                ['touchEasingMethod', 'easeOutQuad'],\n                ['touchReleaseAcceleration', 1000],\n                ['touchReleaseAnimationDurationMs', 2000],\n                ['touchScrollZone', 20],\n                ['touchSelectHandleZone', 20],\n                ['touchZoomSensitivity', 0.005],\n                ['touchZoomMin', 0.5],\n                ['touchZoomMax', 1.75],\n                ['tree', false],\n                ['treeHorizontalScroll', false]\n            ],\n            styles: [\n                ['activeCellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['activeCellBorderWidth', 1],\n                ['activeCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellFont', '16px sans-serif'],\n                ['activeCellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['activeCellOverlayBorderWidth', 1],\n                ['activeCellPaddingBottom', 5],\n                ['activeCellPaddingLeft', 5],\n                ['activeCellPaddingRight', 7],\n                ['activeCellPaddingTop', 5],\n                ['activeCellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['activeCellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['activeColumnHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeColumnHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeRowHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeRowHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['autocompleteBottomMargin', 60],\n                ['autosizeHeaderCellPadding', 8],\n                ['autosizePadding', 5],\n                ['borderCollapse', 'collapse'],\n                ['cellAutoResizePadding', 13],\n                ['cellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['cellBorderWidth', 1],\n                ['cellColor', 'rgba(0, 0, 0, 1)'],\n                ['cellFont', '16px sans-serif'],\n                ['cellGridHeight', 250],\n                ['cellHeight', 24],\n                ['cellHeightWithChildGrid', 150],\n                ['cellHorizontalAlignment', 'left'],\n                ['cellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['cellPaddingBottom', 5],\n                ['cellPaddingLeft', 5],\n                ['cellPaddingRight', 7],\n                ['cellPaddingTop', 5],\n                ['cellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['cellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['cellVerticalAlignment', 'center'],\n                ['cellWidth', 250],\n                ['cellWidthWithChildGrid', 250],\n                ['childContextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['childContextMenuArrowHTML', '&#x25BA;'],\n                ['childContextMenuMarginLeft', -11],\n                ['childContextMenuMarginTop', -6],\n                ['columnHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellBorderColor', 'rgba(172, 172, 172, 1)'],\n                ['columnHeaderCellBorderWidth', 1],\n                ['columnHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['columnHeaderCellFont', '16px sans-serif'],\n                ['columnHeaderCellHeight', 25],\n                ['columnHeaderCellHorizontalAlignment', 'left'],\n                ['columnHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['columnHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['columnHeaderCellPaddingBottom', 5],\n                ['columnHeaderCellPaddingLeft', 5],\n                ['columnHeaderCellPaddingRight', 7],\n                ['columnHeaderCellPaddingTop', 5],\n                ['columnHeaderCellVerticalAlignment', 'center'],\n                ['columnHeaderOrderByArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['columnHeaderOrderByArrowBorderWidth', 1],\n                ['columnHeaderOrderByArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['columnHeaderOrderByArrowHeight', 8],\n                ['columnHeaderOrderByArrowMarginLeft', 0],\n                ['columnHeaderOrderByArrowMarginRight', 5],\n                ['columnHeaderOrderByArrowMarginTop', 6],\n                ['columnHeaderOrderByArrowWidth', 13],\n                ['contextFilterButtonBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterButtonBorderRadius', '3px'],\n                ['contextFilterButtonHTML', '&#x25BC;'],\n                ['contextFilterInputBackground', 'rgba(255,255,255,1)'],\n                ['contextFilterInputBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterInputBorderRadius', '0'],\n                ['contextFilterInputColor', 'rgba(0,0,0,1)'],\n                ['contextFilterInputFontFamily', 'sans-serif'],\n                ['contextFilterInputFontSize', '14px'],\n                ['contextFilterInvalidRegExpBackground', 'rgba(180, 6, 1, 1)'],\n                ['contextFilterInvalidRegExpColor', 'rgba(255, 255, 255, 1)'],\n                ['contextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuArrowDownHTML', '&#x25BC;'],\n                ['contextMenuArrowUpHTML', '&#x25B2;'],\n                ['contextMenuBackground', 'rgba(240, 240, 240, 1)'],\n                ['contextMenuBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextMenuBorderRadius', '3px'],\n                ['contextMenuChildArrowFontSize', '12px'],\n                ['contextMenuColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuFilterButtonFontFamily', 'sans-serif'],\n                ['contextMenuFilterButtonFontSize', '10px'],\n                ['contextMenuFilterInvalidExpresion', 'rgba(237, 155, 156, 1)'],\n                ['contextMenuFontFamily', 'sans-serif'],\n                ['contextMenuFontSize', '16px'],\n                ['contextMenuHoverBackground', 'rgba(182, 205, 250, 1)'],\n                ['contextMenuHoverColor', 'rgba(43, 48, 153, 1)'],\n                ['contextMenuItemBorderRadius', '3px'],\n                ['contextMenuItemMargin', '2px'],\n                ['contextMenuLabelDisplay', 'inline-block'],\n                ['contextMenuLabelMargin', '0 3px 0 0'],\n                ['contextMenuLabelMaxWidth', '700px'],\n                ['contextMenuLabelMinWidth', '75px'],\n                ['contextMenuMarginLeft', 3],\n                ['contextMenuMarginTop', -3],\n                ['contextMenuOpacity', '0.98'],\n                ['contextMenuPadding', '2px'],\n                ['contextMenuWindowMargin', 100],\n                ['cornerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cornerCellBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['editCellBackgroundColor', 'white'],\n                ['editCellBorder', 'solid 1px rgba(110, 168, 255, 1)'],\n                ['editCellBoxShadow', '0 2px 5px rgba(0,0,0,0.4)'],\n                ['editCellColor', 'black'],\n                ['editCellFontFamily', 'sans-serif'],\n                ['editCellFontSize', '16px'],\n                ['editCellPaddingLeft', 4],\n                ['frozenMarkerHoverColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerHoverBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerActiveColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerActiveBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerColor', 'rgba(222, 222, 222, 1)'],\n                ['frozenMarkerBorderColor', 'rgba(168, 168, 168, 1)'],\n                ['frozenMarkerBorderWidth', 1],\n                ['frozenMarkerWidth', 2],\n                ['gridBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['gridBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['gridBorderWidth', 1],\n                ['minColumnWidth', 45],\n                ['minRowHeight', 24],\n                ['mobileContextMenuMargin', 10],\n                ['mobileEditInputHeight', 30],\n                ['mobileEditFontFamily', 'sans-serif'],\n                ['mobileEditFontSize', '16px'],\n                ['moveOverlayBorderWidth', 1],\n                ['moveOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['moveOverlayBorderSegments', '12, 7'],\n                ['name', 'default'],\n                ['reorderMarkerBackgroundColor', 'rgba(0, 0, 0, 0.1)'],\n                ['reorderMarkerBorderColor', 'rgba(0, 0, 0, 0.2)'],\n                ['reorderMarkerBorderWidth', 1.25],\n                ['reorderMarkerIndexBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['reorderMarkerIndexBorderWidth', 2.75],\n                ['rowHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['rowHeaderCellBorderColor', 'rgba(200, 200, 200, 1)'],\n                ['rowHeaderCellBorderWidth', 1],\n                ['rowHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellFont', '16px sans-serif'],\n                ['rowHeaderCellHeight', 25],\n                ['rowHeaderCellHorizontalAlignment', 'left'],\n                ['rowHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['rowHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['rowHeaderCellPaddingBottom', 5],\n                ['rowHeaderCellPaddingLeft', 5],\n                ['rowHeaderCellPaddingRight', 5],\n                ['rowHeaderCellPaddingTop', 5],\n                ['rowHeaderCellSelectedBackgroundColor', 'rgba(217, 217, 217, 1)'],\n                ['rowHeaderCellSelectedColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellVerticalAlignment', 'center'],\n                ['rowHeaderCellWidth', 57],\n                ['scrollBarActiveColor', 'rgba(125, 125, 125, 1)'],\n                ['scrollBarBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarBorderWidth', 0.5],\n                ['scrollBarBoxBorderRadius', 4.125],\n                ['scrollBarBoxColor', 'rgba(192, 192, 192, 1)'],\n                ['scrollBarBoxMargin', 2],\n                ['scrollBarBoxMinSize', 15],\n                ['scrollBarBoxWidth', 8],\n                ['scrollBarCornerBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarCornerBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarWidth', 11],\n                ['selectionHandleBorderColor', 'rgba(255, 255, 255, 1)'],\n                ['selectionHandleBorderWidth', 1.5],\n                ['selectionHandleColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionHandleSize', 8],\n                ['selectionHandleType', 'square'],\n                ['selectionOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionOverlayBorderWidth', 1],\n                ['treeArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['treeArrowBorderWidth', 1],\n                ['treeArrowClickRadius', 5],\n                ['treeArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['treeArrowHeight', 8],\n                ['treeArrowMarginLeft', 0],\n                ['treeArrowMarginRight', 5],\n                ['treeArrowMarginTop', 6],\n                ['treeArrowWidth', 13],\n                ['treeGridHeight', 250]\n            ]\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/defaults.js\n// module id = 0\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true, evil: true*/\n/*globals Reflect: false, HTMLElement: true, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([\n    './component',\n    './defaults',\n    './draw',\n    './events',\n    './touch',\n    './intf',\n    './contextMenu',\n    './dom',\n    './publicMethods'\n], function context(component) {\n    'use strict';\n    component = component();\n    var modules = Array.prototype.slice.call(arguments);\n    function Grid(args) {\n        args = args || {};\n        var self = {};\n        self.isComponent = args.component === undefined;\n        self.intf = self.isComponent ? eval('Reflect.construct(HTMLElement, [], new.target)') : {};\n        self.args = args;\n        self.createGrid = function grid(args) {\n            args.component = false;\n            return new Grid(args);\n        };\n        modules.forEach(function (module) {\n            module(self);\n        });\n        if (self.isComponent) {\n            self.args.parentNode = self.intf;\n        } else {\n            self.args.parentNode = args.parentNode;\n        }\n        if (self.args.parentNode && self.args.parentNode.createShadowRoot) {\n            self.shadowRoot = self.args.parentNode.attachShadow({mode: self.args.debug ? 'open' : 'closed'});\n            self.parentNode = self.shadowRoot;\n        } else {\n            self.parentNode = args.parentNode;\n        }\n        self.init();\n        return self.intf;\n    }\n    if (window.HTMLElement) {\n        Grid.prototype = Object.create(window.HTMLElement.prototype);\n    }\n    // export web component\n    if (window.customElements) {\n        Grid.observedAttributes = component.getObservableAttributes();\n        Grid.prototype.disconnectedCallback = component.disconnectedCallback;\n        Grid.prototype.attributeChangedCallback = component.attributeChangedCallback;\n        Grid.prototype.connectedCallback = component.connectedCallback;\n        Grid.prototype.adoptedCallback = component.adoptedCallback;\n        window.customElements.define('canvas-datagrid', Grid);\n    }\n    // export global\n    if (window && !window.canvasDatagrid && !window.require) {\n        window.canvasDatagrid = function (args) { return new Grid(args); };\n    }\n    // export amd loader\n    module.exports = function grid(args) {\n        args = args || {};\n        var i;\n        if (window.customElements) {\n            i = document.createElement('canvas-datagrid');\n            if (args.parentNode) {\n                args.parentNode.appendChild(i);\n            }\n            return i;\n        }\n        args.component = false;\n        return new Grid(args);\n    };\n    return module.exports;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/main.js\n// module id = 1\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine(['./defaults'], function (defaults) {\n    'use strict';\n    return function () {\n        var typeMap, component = {};\n        function hyphenateProperty(prop, cust) {\n            var p = '';\n            Array.prototype.forEach.call(prop, function (char) {\n                if (char === char.toUpperCase()) {\n                    p += '-' + char.toLowerCase();\n                    return;\n                }\n                p += char;\n            });\n            return (cust ? '--cdg-' : '') + p;\n        }\n        function getDefaultItem(base, item) {\n            var i = {},\n                r;\n            defaults(i);\n            r = i.defaults[base].filter(function (i) {\n                return i[0].toLowerCase() === item.toLowerCase()\n                    || hyphenateProperty(i[0]) === item.toLowerCase()\n                    || hyphenateProperty(i[0], true) === item.toLowerCase();\n            })[0];\n            return r;\n        }\n        function applyComponentStyle(supressChangeAndDrawEvents, intf) {\n            var cStyle = window.getComputedStyle(intf, null),\n                defs = {};\n            intf.computedStyle = cStyle;\n            defaults(defs);\n            defs = defs.defaults.styles;\n            defs.forEach(function (def) {\n                var val = cStyle.getPropertyValue(hyphenateProperty(def[0], true));\n                if (val === \"\") {\n                    val = cStyle.getPropertyValue(hyphenateProperty(def[0], false));\n                }\n                if (val !== \"\") {\n                    intf.setStyleProperty(def[0], typeMap[typeof def[1]](val, def[1]));\n                }\n            });\n            intf.resize(true);\n            if (!supressChangeAndDrawEvents && intf.dispatchEvent) {\n                intf.dispatchEvent('stylechanged', intf.style);\n            }\n        }\n        typeMap = {\n            data: function (strData) {\n                try {\n                    return JSON.parse(strData);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid data.');\n                }\n            },\n            schema: function (strSchema) {\n                try {\n                    return JSON.parse(strSchema);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid schema attribute.');\n                }\n            },\n            number: function (strNum, def) {\n                var n = parseInt(strNum, 10);\n                return isNaN(n) ? def : n;\n            },\n            boolean: function (strBool) {\n                return (/true/i).test(strBool);\n            },\n            string: function (str) {\n                return str;\n            }\n        };\n        component.getObservableAttributes = function () {\n            var i = {}, attrs = ['data', 'schema', 'style', 'className'];\n            defaults(i);\n            i.defaults.attributes.forEach(function (attr) {\n                attrs.push(attr[0].toLowerCase());\n            });\n            return attrs;\n        };\n        component.disconnectedCallback = function () {\n            this.connected = false;\n        };\n        component.connectedCallback = function () {\n            var intf = this;\n            intf.connected = true;\n            component.observe(intf);\n            applyComponentStyle(true, intf);\n            intf.resize(true);\n        };\n        component.adoptedCallback = function () {\n            this.resize();\n        };\n        component.attributeChangedCallback = function (attrName, oldVal, newVal) {\n            var tfn, intf = this, def;\n            if (attrName === 'style') {\n                requestAnimationFrame(function () { applyComponentStyle(false, intf); });\n                return;\n            }\n            if (attrName === 'data') {\n                intf.args.data = typeMap.data(newVal);\n                return;\n            }\n            if (attrName === 'schema') {\n                intf.args.schema = typeMap.schema(newVal);\n                return;\n            }\n            if (attrName === 'class' || attrName === 'className') {\n                return;\n            }\n            def = getDefaultItem('attributes', attrName);\n            if (def) {\n                tfn = typeMap[typeof def[1]];\n                intf.attributes[def[0]] = tfn(newVal);\n                return;\n            }\n            if (/^on/.test(attrName)) {\n                intf.addEventListener('on' + attrName, function (e) {\n                    eval(newVal);\n                });\n            }\n            return;\n        };\n        component.observe = function (intf) {\n            var observer;\n            if (!window.MutationObserver) { return; }\n            intf.applyComponentStyle = function () { applyComponentStyle(false, intf); intf.resize(); };\n            /**\n             * Applies the computed css styles to the grid.  In some browsers, changing directives in attached style sheets does not automatically update the styles in this component.  It is necessary to call this method to update in these cases.\n             * @memberof canvasDatagrid\n             * @name applyComponentStyle\n             * @method\n             */\n            observer = new window.MutationObserver(function (mutations) {\n                var checkInnerHTML, checkStyle;\n                Array.prototype.forEach.call(mutations, function (mutation) {\n                    if (mutation.attributeName === 'class'\n                            || mutation.attributeName === 'style') {\n                        intf.applyComponentStyle(false, intf);\n                        return;\n                    }\n                    if (mutation.target.parentNode.nodeName === 'STYLE') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.addedNodes.length > 0 || mutation.type === 'characterData') {\n                        checkInnerHTML = true;\n                    }\n                });\n                if (checkStyle) {\n                    intf.applyComponentStyle(false, intf);\n                }\n                if (checkInnerHTML) {\n                    intf.data = typeMap.data(intf.innerHTML);\n                }\n            });\n            observer.observe(intf, { characterData: true, childList: true, attributes: true, subtree: true });\n            Array.prototype.forEach.call(document.querySelectorAll('style'), function (el) {\n                observer.observe(el, { characterData: true, childList: true, attributes: true, subtree: true });\n            });\n        };\n        return component;\n    };\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/component.js\n// module id = 2\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals XMLSerializer: false, define: true, Blob: false, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var perfCounters = [],\n            drawCount = 0,\n            perfWindowSize = 300,\n            entityCount = [],\n            scrollDebugCounters = [],\n            touchPPSCounters = [];\n        self.htmlImageCache = {};\n        function drawPerfLine(w, h, x, y, perfArr, arrIndex, max, color, useAbs) {\n            var i = w / perfArr.length,\n                r = h / max;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x, y + h);\n            perfArr.forEach(function (n) {\n                var val = (arrIndex === undefined ? n : n[arrIndex]),\n                    cx,\n                    cy;\n                if (useAbs) {\n                    val = Math.abs(val);\n                }\n                cx = x + i;\n                cy = y + h - (val * r);\n                self.ctx.lineTo(cx, cy);\n                x += i;\n            });\n            self.ctx.moveTo(x + w, y + h);\n            self.ctx.strokeStyle = color;\n            self.ctx.stroke();\n        }\n        function drawOnAllImagesLoaded() {\n            var loaded = true;\n            Object.keys(self.htmlImageCache).forEach(function (html) {\n                if (!self.htmlImageCache[html].complete) {\n                    loaded = false;\n                }\n            });\n            if (loaded) {\n                self.draw();\n            }\n        }\n        function drawHtml(cell) {\n            var img,\n                v = cell.innerHTML || cell.formattedValue,\n                x = cell.x + self.canvasOffsetLeft,\n                y = cell.y + self.canvasOffsetTop;\n            if (self.htmlImageCache[v]) {\n                img = self.htmlImageCache[v];\n                if (img.height !== cell.height || img.width !== cell.width) {\n                    // height and width of the cell has changed, invalidate cache\n                    self.htmlImageCache[v] = undefined;\n                } else {\n                    if (!img.complete) {\n                        return;\n                    }\n                    return self.ctx.drawImage(img, x, y);\n                }\n            }\n            img = new Image(cell.width, cell.height);\n            self.htmlImageCache[v] = img;\n            img.onload = function () {\n                self.ctx.drawImage(img, x, y);\n                drawOnAllImagesLoaded();\n            };\n            img.src = 'data:image/svg+xml;base64,' + btoa(\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + cell.width + '\" height=\"' + cell.height + '\">\\n' +\n                    '<foreignObject class=\"node\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\\n' +\n                    '<body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;padding:0;\">\\n' +\n                    v + '\\n' +\n                    '</body>' +\n                    '</foreignObject>\\n' +\n                    '</svg>\\n'\n            );\n        }\n        function drawOrderByArrow(x, y) {\n            var mt = self.style.columnHeaderOrderByArrowMarginTop * self.scale,\n                ml = self.style.columnHeaderOrderByArrowMarginLeft * self.scale,\n                mr = self.style.columnHeaderOrderByArrowMarginRight * self.scale,\n                aw = self.style.columnHeaderOrderByArrowWidth * self.scale,\n                ah = self.style.columnHeaderOrderByArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.columnHeaderOrderByArrowColor;\n            self.ctx.strokeStyle = self.style.columnHeaderOrderByArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.orderDirection === 'asc') {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y + ah);\n                self.ctx.lineTo(x + aw, y + ah);\n                self.ctx.lineTo(x + (aw * 0.5), y);\n                self.ctx.lineTo(x, y + ah);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function drawTreeArrow(cell, x, y) {\n            var mt = self.style.treeArrowMarginTop * self.scale,\n                mr = self.style.treeArrowMarginRight * self.scale,\n                ml = self.style.treeArrowMarginLeft * self.scale,\n                aw = self.style.treeArrowWidth * self.scale,\n                ah = self.style.treeArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.treeArrowColor;\n            self.ctx.strokeStyle = self.style.treeArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.openChildren[cell.data[self.uniqueId]]) {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y);\n                self.ctx.lineTo(x + ah, y + (aw * 0.5));\n                self.ctx.lineTo(x, y + aw);\n                self.ctx.lineTo(x, y);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function radiusRect(x, y, w, h, radius) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            var r = x + w, b = y + h;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x + radius, y);\n            self.ctx.lineTo(r - radius, y);\n            self.ctx.quadraticCurveTo(r, y, r, y + radius);\n            self.ctx.lineTo(r, y + h - radius);\n            self.ctx.quadraticCurveTo(r, b, r - radius, b);\n            self.ctx.lineTo(x + radius, b);\n            self.ctx.quadraticCurveTo(x, b, x, b - radius);\n            self.ctx.lineTo(x, y + radius);\n            self.ctx.quadraticCurveTo(x, y, x + radius, y);\n        }\n        function fillRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillRect(x, y, w, h);\n        }\n        function strokeRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.strokeRect(x, y, w, h);\n        }\n        function fillText(text, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillText(text, x, y);\n        }\n        function fillCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.fill();\n        }\n        function strokeCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.stroke();\n        }\n        function clipFrozenArea(mode) {\n            // 0 both, 1 rows, 2 cols\n            // self.lastFrozenColumnPixel;\n            // self.lastFrozenRowPixel;\n            self.ctx.beginPath();\n            if (mode === 0) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, self.lastFrozenRowPixel);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 1) {\n                self.ctx.moveTo(0, self.lastFrozenRowPixel);\n                self.ctx.lineTo(0, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 2) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, 0);\n                self.ctx.lineTo(self.width, 0);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n            }\n            self.ctx.clip();\n        }\n        function fillHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return fillCircle(x, y, r * 0.5);\n            }\n            fillRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function strokeHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return strokeCircle(x, y, r * 0.5);\n            }\n            strokeRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function addselectionHandle(c, pos) {\n            var hw = self.style.selectionHandleSize,\n                p = {\n                    tr: function () {\n                        fillHandle(c.x + c.width, c.y, hw);\n                        strokeHandle(c.x + c.width, c.y, hw);\n                    },\n                    br: function () {\n                        fillHandle(c.x + c.width, c.y + c.height, hw);\n                        strokeHandle(c.x + c.width, c.y + c.height, hw);\n                    },\n                    tl: function () {\n                        fillHandle(c.x, c.y, hw);\n                        strokeHandle(c.x, c.y, hw);\n                    },\n                    bl: function () {\n                        fillHandle(c.x, c.y + c.height, hw);\n                        strokeHandle(c.x, c.y + c.height, hw);\n                    }\n                };\n            p[pos]();\n        }\n        function addBorderLine(c, pos) {\n            self.ctx.beginPath();\n            var p = {\n                t: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                },\n                r: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                b: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                l: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                }\n            };\n            p[pos]();\n            self.ctx.stroke();\n        }\n        function addEllipsis(text, width) {\n            var c, w = 0;\n            if (self.ellipsisCache[text] && self.ellipsisCache[text][width]) {\n                return self.ellipsisCache[text][width];\n            }\n            //TODO Add ellipsis back when there is a fast way to do it\n            w = self.ctx.measureText(text).width;\n            self.ellipsisCache[text] = self.ellipsisCache[text] || {};\n            c = {value: text, width: w};\n            self.ellipsisCache[text][width] = c;\n            return c;\n        }\n        function drawText(cell) {\n            var paddingLeft = self.style[cell.style + 'PaddingLeft'] * self.scale,\n                paddingTop = self.style[cell.style + 'PaddingTop'] * self.scale,\n                paddingRight = self.style[cell.style + 'PaddingRight'] * self.scale,\n                paddingBottom = self.style[cell.style + 'PaddingBottom'] * self.scale,\n                vPos = paddingTop + cell.height - (cell.height * 0.5),\n                hPos = paddingLeft + cell.treeArrowWidth + cell.orderByArrowWidth;\n            cell.text = addEllipsis(cell.formattedValue, cell.width - paddingRight - paddingLeft);\n            cell.text.height = cell.fontHeight;\n            if (cell.horizontalAlignment === 'right') {\n                hPos = cell.width - cell.text.width - paddingRight;\n            } else if (cell.horizontalAlignment === 'center') {\n                hPos = (cell.width / 2) - (cell.text.width / 2);\n            }\n            if (cell.verticalAlignment === 'top') {\n                vPos = paddingTop + cell.text.height;\n            } else if (cell.verticalAlignment === 'bottom') {\n                vPos = cell.height - paddingBottom - cell.text.height;\n            }\n            cell.text.x = cell.x + hPos;\n            cell.text.y = cell.y + vPos;\n            fillText(cell.text.value, cell.text.x, cell.text.y);\n        }\n        function getFrozenColumnsWidth() {\n            var w = 0,\n                s = self.getVisibleSchema(),\n                x = 0,\n                n = Math.min(self.frozenColumn, s.length),\n                column;\n            while (x < n) {\n                column = s[self.orders.columns[x]];\n                w += ((self.sizes.columns[column[self.uniqueId]] || column.width || self.style.cellWidth) * self.scale);\n                x += 1;\n            }\n            return w;\n        }\n        /**\n         * Redraws the grid. No matter what the change, this is the only method required to refresh everything.\n         * @memberof canvasDatagrid\n         * @name draw\n         * @method\n         */\n         // r = literal row index\n         // rd = row data array\n         // i = user order index\n         // o = literal data index\n         // y = y drawing cursor\n         // x = x drawing cursor\n         // s = visible schema array\n         // cx = current x drawing cursor sub calculation var\n         // cy = current y drawing cursor sub calculation var\n         // a = static cell (like corner cell)\n         // p = perf counter\n         // l = data length\n         // u = current cell\n         // h = current height\n         // w = current width\n        self.draw = function (internal) {\n            if (self.dispatchEvent('beforedraw', {})) { return; }\n            if (!self.isChildGrid && (!self.height || !self.width)) {\n                return;\n            }\n            if (self.isChildGrid && internal) {\n                requestAnimationFrame(self.parentGrid.draw);\n                return;\n            }\n            if (self.intf.visible === false) {\n                return;\n            }\n            // initial values\n            var checkScrollHeight, rowHeaderCell, p, cx, cy, treeGrid, rowOpen,\n                rowHeight, cornerCell, y, x, c, h, w, s, r, rd, aCell,\n                bc = self.style.borderCollapse === 'collapse',\n                selectionBorders = [],\n                moveBorders = [],\n                selectionHandles = [],\n                rowHeaders = [],\n                frozenColumnWidths = getFrozenColumnsWidth(),\n                l = self.data.length,\n                u = self.currentCell || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                cellHeight = self.style.cellHeight;\n            drawCount += 1;\n            p = performance.now();\n            self.visibleRowHeights = [];\n            // if data length has changed, there is no way to know\n            if (self.data.length > self.orders.rows.length) {\n                self.createRowOrders();\n            }\n            function drawScrollBars() {\n                var v = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-bar'\n                    },\n                    n = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-bar'\n                    },\n                    vb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-box'\n                    },\n                    nb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-box'\n                    },\n                    co = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        isCorner: true,\n                        isScrollBoxCorner: true,\n                        style: 'scroll-box-corner'\n                    },\n                    m = (self.style.scrollBarBoxMargin * 2),\n                    d = self.style.scrollBarBoxMargin * 0.5;\n                self.ctx.strokeStyle = self.style.scrollBarBorderColor;\n                self.ctx.lineWidth = self.style.scrollBarBorderWidth;\n                // vertical\n                v.x += w - self.style.scrollBarWidth - self.style.scrollBarBorderWidth - d;\n                v.y += columnHeaderCellHeight;\n                v.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                v.height = h - columnHeaderCellHeight - self.style.scrollBarWidth - d - m;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(v.x, v.y, v.width, v.height + m);\n                strokeRect(v.x, v.y, v.width, v.height + m);\n                // vertical box\n                vb.x = v.x + self.style.scrollBarBoxMargin;\n                vb.y = columnHeaderCellHeight + self.style.scrollBarBoxMargin\n                    + ((v.height - self.scrollBox.scrollBoxHeight)\n                        * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight));\n                vb.width = self.style.scrollBarBoxWidth;\n                vb.height = self.scrollBox.scrollBoxHeight;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/vertical/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (vb.height < v.height) {\n                    radiusRect(vb.x, vb.y, vb.width, vb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                // horizontal\n                n.x += rowHeaderCellWidth;\n                n.y += h - self.style.scrollBarWidth - d;\n                n.width = w - self.style.scrollBarWidth - rowHeaderCellWidth - d - m;\n                n.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(n.x, n.y, n.width + m, n.height);\n                strokeRect(n.x, n.y, n.width + m, n.height);\n                // horizontal box\n                nb.y = n.y + self.style.scrollBarBoxMargin;\n                nb.x = rowHeaderCellWidth + self.style.scrollBarBoxMargin\n                    + ((n.width - self.scrollBox.scrollBoxWidth)\n                        * (self.scrollBox.scrollLeft / self.scrollBox.scrollWidth));\n                nb.width = self.scrollBox.scrollBoxWidth;\n                nb.height = self.style.scrollBarBoxWidth;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/horizontal/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (nb.width < n.width) {\n                    radiusRect(nb.x, nb.y, nb.width, nb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                //corner\n                self.ctx.strokeStyle = self.style.scrollBarCornerBorderColor;\n                self.ctx.fillStyle = self.style.scrollBarCornerBackgroundColor;\n                co.x = n.x + n.width + m;\n                co.y = v.y + v.height + m;\n                co.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                co.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                radiusRect(co.x, co.y, co.width, co.height, 0);\n                self.ctx.stroke();\n                self.ctx.fill();\n                self.visibleCells.unshift(v);\n                self.visibleCells.unshift(vb);\n                self.visibleCells.unshift(n);\n                self.visibleCells.unshift(nb);\n                self.visibleCells.unshift(co);\n                self.scrollBox.bar = {\n                    v: v,\n                    h: n\n                };\n                self.scrollBox.box = {\n                    v: vb,\n                    h: nb\n                };\n            }\n            function createHandlesOverlayArray(cell) {\n                if (self.attributes.allowMovingSelection || self.mobile) {\n                    if (cell.selectionBorderTop && cell.selectionBorderRight && self.mobile) {\n                        selectionHandles.push([cell, 'tr']);\n                        cell.selectionHandle = 'tr';\n                    }\n                    if (cell.selectionBorderTop && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'tl']);\n                        cell.selectionHandle = 'tl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'bl']);\n                        cell.selectionHandle = 'bl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderRight\n                            && (self.attributes.selectionHandleBehavior !== 'none' || self.mobile)) {\n                        selectionHandles.push([cell, 'br']);\n                        cell.selectionHandle = 'br';\n                    }\n                }\n            }\n            function createBorderOverlayArray(cell, drawArray, propPrefix, offsetPoint) {\n                offsetPoint = offsetPoint || {x: 0, y: 0};\n                cell.selectionBorder = '';\n                if (!cell.isRowHeader\n                        && self.selections[cell.rowIndex + -offsetPoint.y]\n                        && self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) !== -1) {\n                    if ((!self.selections[cell.rowIndex - 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex - 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1\n                            || cell.rowIndex === 0)\n                            && !cell.isHeader) {\n                        drawArray.push([cell, 't']);\n                        cell[propPrefix + 'BorderTop'] = true;\n                        cell[propPrefix + 'Border'] += 't';\n                    }\n                    if (!self.selections[cell.rowIndex + 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex + 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'b']);\n                        cell[propPrefix + 'BorderBottom'] = true;\n                        cell[propPrefix + 'Border'] += 'b';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === 0\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex - 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'l']);\n                        cell[propPrefix + 'BorderLeft'] = true;\n                        cell[propPrefix + 'Border'] += 'l';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === s.length\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'r']);\n                        cell[propPrefix + 'BorderRight'] = true;\n                        cell[propPrefix + 'Border'] += 'r';\n                    }\n                }\n            }\n            function drawCell(d, rowOrderIndex, rowIndex) {\n                return function drawEach(header, headerIndex, columnOrderIndex) {\n                    var cellStyle = header.style || 'cell',\n                        cellGridAttributes,\n                        cell,\n                        isHeader = /HeaderCell/.test(cellStyle),\n                        isCorner = /cornerCell/.test(cellStyle),\n                        isRowHeader = 'rowHeaderCell' === cellStyle,\n                        isColumnHeader = 'columnHeaderCell' === cellStyle,\n                        selected = self.selections[rowOrderIndex] && self.selections[rowOrderIndex].indexOf(columnOrderIndex) !== -1,\n                        hovered = self.hovers[d[self.uniqueId]] && self.hovers[d[self.uniqueId]].indexOf(columnOrderIndex) !== -1,\n                        active = self.activeCell.rowIndex === rowOrderIndex && self.activeCell.columnIndex === columnOrderIndex,\n                        isGrid = typeof d[header.name] === 'object' && d[header.name] !== null && d[header.name] !== undefined,\n                        activeHeader = (self.orders.rows[self.activeCell.rowIndex] === rowOrderIndex\n                                || self.orders.columns[self.activeCell.columnIndex] === columnOrderIndex)\n                            && (columnOrderIndex === -1 || rowOrderIndex === -1)\n                            ? (isRowHeader ? 'activeRowHeaderCell' : 'activeColumnHeaderCell') : false,\n                        val,\n                        f = self.formatters[header.type || 'string'],\n                        orderByArrowSize = 0,\n                        treeArrowSize = 0,\n                        cellWidth = self.sizes.columns[isRowHeader ? 'cornerCell' : header[self.uniqueId]] || header.width,\n                        ev = {\n                            value: d[header.name],\n                            row: d,\n                            header: header\n                        };\n                    if (cellStyle === 'headerCellCap') {\n                        cellWidth = w - x;\n                    }\n                    // if no data or schema are defined, a width is provided to the stub column\n                    if (cellWidth === undefined) {\n                        cellWidth = self.style.cellWidth;\n                    }\n                    cellWidth = cellWidth * self.scale;\n                    if (x + cellWidth + self.style.cellBorderWidth < 0) {\n                        x += cellWidth + self.style.cellBorderWidth;\n                    }\n                    if (active) {\n                        cellStyle = 'activeCell';\n                    }\n                    if (self.visibleRows.indexOf(rowIndex) === -1 && !isHeader) {\n                        self.visibleRows.push(rowIndex);\n                    }\n                    val = self.dispatchEvent('formatcellvalue', ev);\n                    cx = x;\n                    cy = y;\n                    if (cellStyle === 'cornerCell') {\n                        cx = 0;\n                        cy = 0;\n                    } else if (isRowHeader) {\n                        cx = 0;\n                    } else if (isHeader) {\n                        cy = 0;\n                    }\n                    cell = {\n                        type: isGrid ? 'canvas-datagrid-cell' : header.type,\n                        style: cellStyle,\n                        nodeType: 'canvas-datagrid-cell',\n                        x: cx,\n                        y: cy,\n                        horizontalAlignment: self.style[cellStyle + 'HorizontalAlignment'],\n                        verticalAlignment: self.style[cellStyle + 'VerticalAlignment'],\n                        offsetTop: self.canvasOffsetTop + cy,\n                        offsetLeft: self.canvasOffsetLeft + cx,\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        active: active || activeHeader,\n                        hovered: hovered,\n                        selected: selected,\n                        width: cellWidth,\n                        height: cellHeight,\n                        offsetWidth: cellWidth,\n                        offsetHeight: cellHeight,\n                        parentNode: self.intf.parentNode,\n                        offsetParent: self.intf.parentNode,\n                        data: d,\n                        isCorner: isCorner,\n                        isHeader: isHeader,\n                        isColumnHeader: isColumnHeader,\n                        isHeaderCellCap: !!header.isHeaderCellCap,\n                        isRowHeader: isRowHeader,\n                        rowOpen: rowOpen,\n                        header: header,\n                        columnIndex: columnOrderIndex,\n                        rowIndex: rowOrderIndex,\n                        sortColumnIndex: headerIndex,\n                        sortRowIndex: rowIndex,\n                        isGrid: isGrid,\n                        isNormal: !isGrid && !isCorner && !isHeader,\n                        gridId: (self.attributes.name || '') + d[self.uniqueId] + ':' + header[self.uniqueId],\n                        parentGrid: self.intf,\n                        innerHTML: '',\n                        activeHeader: activeHeader,\n                        value: isHeader && !isRowHeader ? (header.title || header.name) : d[header.name]\n                    };\n                    ev.cell = cell;\n                    cell.userHeight = cell.isHeader ? self.sizes.rows[-1] : rowHeight;\n                    cell.userWidth = cell.isHeader ? self.sizes.columns.cornerCell : self.sizes.columns[header[self.uniqueId]];\n                    cell[self.uniqueId] = d[self.uniqueId];\n                    self.visibleCells.unshift(cell);\n                    if (self.dispatchEvent('beforerendercell', ev)) { return; }\n                    self.ctx.fillStyle = self.style[cellStyle + 'BackgroundColor'];\n                    self.ctx.strokeStyle = self.style[cellStyle + 'BorderColor'];\n                    self.ctx.lineWidth = self.style[cellStyle + 'BorderWidth'];\n                    if (hovered) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'HoverBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'HoverBorderColor'];\n                    }\n                    if (selected) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'SelectedBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'SelectedBorderColor'];\n                    }\n                    if (activeHeader) {\n                        self.ctx.fillStyle = self.style[activeHeader + 'BackgroundColor'];\n                    }\n                    self.dispatchEvent('rendercell', ev);\n                    if (cell.isGrid) {\n                        if (cell.height !== rowHeight) {\n                            cell.height = rowHeight || self.style.cellHeightWithChildGrid;\n                            checkScrollHeight = true;\n                        }\n                        cell.width = self.sizes.columns[header[self.uniqueId]] || self.style.cellWidthWithChildGrid;\n                    }\n                    if (rowOpen && !cell.isRowHeader) {\n                        cell.height = self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight;\n                    }\n                    if (!cell.isGrid) {\n                        fillRect(cx, cy, cell.width, cell.height);\n                        strokeRect(cx, cy, cell.width, cell.height);\n                    }\n                    self.ctx.save();\n                    radiusRect(cell.x, cell.y, cell.width, cell.height, 0);\n                    self.ctx.clip();\n                    self.dispatchEvent('afterrendercell', ev);\n                    if (cell.height !== cellHeight && !(rowOpen && !cell.isRowHeader)) {\n                        self.sizes.rows[isHeader ? -1 : d[self.uniqueId]] = cell.height;\n                        checkScrollHeight = true;\n                    }\n                    if (cell.width !== cellWidth) {\n                        self.sizes.columns[header[self.uniqueId]] = cell.width;\n                        checkScrollHeight = true;\n                    }\n                    if (isRowHeader && self.attributes.tree) {\n                        if (!self.dispatchEvent('rendertreearrow', ev)) {\n                            treeArrowSize = drawTreeArrow(cell, self.style[cellStyle + 'PaddingLeft'], cy, 0);\n                        }\n                    }\n                    if ((self.attributes.showRowNumbers && isRowHeader)\n                            || !isRowHeader) {\n                        if (cell.isGrid && !self.dispatchEvent('beforerendercellgrid', ev)) {\n                            if (!self.childGrids[cell.gridId]) {\n                                cellGridAttributes = self.args.cellGridAttributes || self.args;\n                                cellGridAttributes.name = self.attributes.saveAppearance ? cell.gridId : undefined;\n                                cellGridAttributes.parentNode = cell;\n                                cellGridAttributes.data = d[header.name];\n                                ev.cellGridAttributes = cellGridAttributes;\n                                if (self.dispatchEvent('beforecreatecellgrid', ev)) { return; }\n                                self.childGrids[cell.gridId] = self.createGrid(cellGridAttributes);\n                                self.sizes.rows[rd[self.uniqueId]]\n                                    = self.sizes.rows[rd[self.uniqueId]] || self.style.cellGridHeight;\n                                checkScrollHeight = true;\n                            }\n                            cell.grid = self.childGrids[cell.gridId];\n                            cell.grid.parentNode = cell;\n                            cell.grid.visible = true;\n                            cell.grid.draw();\n                            self.dispatchEvent('rendercellgrid', ev);\n                        } else if (!cell.isGrid) {\n                            if (self.childGrids[cell.gridId]) {\n                                self.childGrids[cell.gridId].parentNode.offsetHeight = 0;\n                            }\n                            if (isHeader && self.orderBy === header.name) {\n                                if (!self.dispatchEvent('renderorderbyarrow', ev)) {\n                                    orderByArrowSize = drawOrderByArrow(cx + self.style[cellStyle + 'PaddingLeft'], 0);\n                                }\n                            }\n                            self.ctx.fillStyle = self.style[cellStyle + 'Color'];\n                            if (hovered) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'HoverColor'];\n                            }\n                            if (selected) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'SelectedColor'];\n                            }\n                            if (activeHeader) {\n                                self.ctx.fillStyle = self.style[activeHeader + 'Color'];\n                            }\n                            self.ctx.font = (self.style[cellStyle + 'FontHeight'] * self.scale) + 'px ' + self.style[cellStyle + 'FontName'];\n                            cell.fontHeight = (self.style[cellStyle + 'FontHeight'] * self.scale);\n                            cell.treeArrowWidth = treeArrowSize;\n                            cell.orderByArrowWidth = orderByArrowSize;\n                            val = val !== undefined ? val : f\n                                ? f(ev) : '';\n                            if (val === undefined && !f) {\n                                val = '';\n                                console.warn('canvas-datagrid: Unknown format '\n                                    + header.type + ' add a cellFormater');\n                            }\n                            cell.formattedValue = ((val !== undefined && val !== null) ? val : '').toString();\n                            if (self.columnFilters && self.columnFilters[val] !== undefined && isHeader) {\n                                cell.formattedValue = self.attributes.filterTextPrefix + val;\n                            }\n                            if (!self.dispatchEvent('rendertext', ev)) {\n                                if (cell.innerHTML || header.type === 'html') {\n                                    drawHtml(cell);\n                                } else {\n                                    drawText(cell);\n                                }\n                            }\n                        }\n                    }\n                    if (active) {\n                        aCell = cell;\n                    }\n                    createBorderOverlayArray(cell, selectionBorders, 'selection');\n                    // createBorderOverlayArray calculates data for createHandlesOverlayArray so it must go 2nd\n                    createHandlesOverlayArray(cell);\n                    if (self.movingSelection) {\n                        createBorderOverlayArray(cell, moveBorders, 'move', self.moveOffset);\n                    }\n                    self.ctx.restore();\n                    x += cell.width + (bc ? 0 : self.style.cellBorderWidth);\n                    return cell.width;\n                };\n            }\n            function drawRowHeader(rowData, index, rowOrderIndex) {\n                var a;\n                if (self.attributes.showRowHeaders) {\n                    x = 0;\n                    rowHeaderCell = {'rowHeaderCell': index + 1 };\n                    rowHeaderCell[self.uniqueId] = rowData[self.uniqueId];\n                    a = {\n                        name: 'rowHeaderCell',\n                        width: self.style.rowHeaderCellWidth,\n                        style: 'rowHeaderCell',\n                        type: 'string',\n                        data: rowData[self.uniqueId],\n                        index: -1\n                    };\n                    a[self.uniqueId] = rowData[self.uniqueId];\n                    rowOpen = self.openChildren[rowData[self.uniqueId]];\n                    drawCell(rowHeaderCell, index, rowOrderIndex)(a, -1, -1);\n                }\n            }\n            function drawHeaders() {\n                var d, g = s.length, i, o, columnHeaderCell, header, nonFrozenHeaderWidth;\n                function drawHeaderColumnRange(start, end) {\n                    end = Math.min(end, g);\n                    for (o = start; o < end; o += 1) {\n                        i = self.orders.columns[o];\n                        header = s[i];\n                        d = {\n                            title: header.title,\n                            name: header.name,\n                            width: header.width,\n                            style: 'columnHeaderCell',\n                            type: 'string',\n                            index: o,\n                            order: i\n                        };\n                        columnHeaderCell = {'columnHeaderCell': header.title || header.name};\n                        columnHeaderCell[self.uniqueId] = 'h' + header[self.uniqueId];\n                        d[self.uniqueId] = header[self.uniqueId];\n                        x += drawCell(columnHeaderCell, -1, -1)(d, o, i);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                }\n                rowHeaders.forEach(function (rArgs, rhIndex) {\n                    y = rArgs[3];\n                    cellHeight = rArgs[4];\n                    if (rhIndex === self.frozenRow) {\n                        self.ctx.save();\n                        radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                        self.ctx.clip();\n                    }\n                    drawRowHeader(rArgs[0], rArgs[1], rArgs[2]);\n                });\n                self.ctx.restore();\n                if (self.attributes.showColumnHeaders) {\n                    x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    x += frozenColumnWidths;\n                    y = 0;\n                    // cell height might have changed during drawing\n                    cellHeight = self.getColumnHeaderCellHeight();\n                    drawHeaderColumnRange(self.scrollIndexLeft + self.frozenColumn, g);\n                    nonFrozenHeaderWidth = x;\n                    x = self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    drawHeaderColumnRange(0, self.frozenColumn);\n                    // fill in the space right of the headers\n                    x = nonFrozenHeaderWidth;\n                    if (x < w) {\n                        c = {\n                            name: '',\n                            width: self.style.scrollBarWidth,\n                            style: 'headerCellCap',\n                            isHeaderCell: true,\n                            isHeaderCellCap: true,\n                            type: 'string',\n                            index: s.length\n                        };\n                        c[self.uniqueId] = 'columnHeaderCell';\n                        drawCell({endCap: ''}, -1, -1)(c, -1, -1);\n                    }\n                    // fill in the space right of the headers\n                    if (self.attributes.showRowHeaders) {\n                        cornerCell = {'cornerCell': '' };\n                        cornerCell[self.uniqueId] = 'cornerCell';\n                        x = 0;\n                        c = {\n                            name: 'cornerCell',\n                            width: self.style.rowHeaderCellWidth,\n                            style: 'cornerCell',\n                            type: 'string',\n                            index: -1\n                        };\n                        c[self.uniqueId] = 'cornerCell';\n                        drawCell(cornerCell, -1, -1)(c, -1, -1);\n                    }\n                }\n            }\n            function drawRow(r, d) {\n                var i, treeHeight, rowSansTreeHeight, o, g = s.length;\n                if (y - (cellHeight * 2) > h) {\n                    return false;\n                }\n                rd = self.data[r];\n                rowOpen = self.openChildren[rd[self.uniqueId]];\n                rowSansTreeHeight = (self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight) * self.scale;\n                treeHeight = (rowOpen ? self.sizes.trees[rd[self.uniqueId]] : 0) * self.scale;\n                rowHeight = (rowSansTreeHeight + treeHeight);\n                if (y < -rowHeight) {\n                    return false;\n                }\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                cellHeight = rowHeight;\n                if (self.attributes.allowFreezingColumns) {\n                    x += frozenColumnWidths;\n                }\n                //draw normal columns\n                for (o = (self.scrollIndexLeft + self.frozenColumn); o < g; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        self.scrollIndexRight = o;\n                        self.scrollPixelRight = x;\n                        break;\n                    }\n                }\n                //draw frozen columns\n                x = 0;\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                for (o = 0; o < self.frozenColumn; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        break;\n                    }\n                }\n                self.lastFrozenColumnPixel = x;\n                // cell height might have changed during drawing\n                cellHeight = rowHeight;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                // don't draw a tree for the new row\n                treeGrid = self.childGrids[rd[self.uniqueId]];\n                if (r !== self.data.length && rowOpen) {\n                    treeGrid.visible = true;\n                    treeGrid.parentNode = {\n                        offsetTop: y + rowSansTreeHeight + self.canvasOffsetTop,\n                        offsetLeft: rowHeaderCellWidth - 1 + self.canvasOffsetLeft,\n                        offsetHeight: treeHeight,\n                        offsetWidth: self.width - rowHeaderCellWidth - self.style.scrollBarWidth - 1,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: self.style,\n                        nodeType: 'canvas-datagrid-tree',\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        rowIndex: r\n                    };\n                    self.visibleCells.unshift({\n                        rowIndex: r,\n                        columnIndex: 0,\n                        y: treeGrid.parentNode.offsetTop,\n                        x: treeGrid.parentNode.offsetLeft,\n                        height: treeGrid.height,\n                        width: treeGrid.width,\n                        style: 'tree-grid',\n                        type: treeGrid.parentNode.nodeType\n                    });\n                    treeGrid.draw();\n                } else if (treeGrid) {\n                    treeGrid.parentNode.offsetHeight = 0;\n                    delete self.sizes.trees[rd[self.uniqueId]];\n                }\n                rowHeaders.push([rd, r, d, y, rowHeight]);\n                self.visibleRowHeights[r] = rowHeight;\n                y += cellHeight + (bc ? 0 : self.style.cellBorderWidth);\n                return true;\n            }\n            function initDraw() {\n                self.visibleRows = [];\n                s = self.getVisibleSchema();\n                self.visibleCells = [];\n                self.canvasOffsetTop = self.isChildGrid ? self.parentNode.offsetTop : 0;\n                self.canvasOffsetLeft = self.isChildGrid ? self.parentNode.offsetLeft : 0;\n                h = self.height;\n                w = self.width;\n                if (!self.isChildGrid) {\n                    self.ctx.scale(window.devicePixelRatio, window.devicePixelRatio);\n                }\n            }\n            function drawBackground() {\n                radiusRect(0, 0, w, h, 0);\n                self.ctx.clip();\n                self.ctx.fillStyle = self.style.gridBackgroundColor;\n                fillRect(0, 0, w, h);\n            }\n            function drawFrozenRows() {\n                var n, ln = Math.min(self.data.length, self.frozenRow);\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                y = columnHeaderCellHeight;\n                for (r = 0; r < ln; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.allowFreezingRows) {\n                    // HACK great, another stupid magic number.\n                    // Background will appear as a 0.5px artifact behind the row freeze bar without this hack\n                    y += self.style.frozenMarkerBorderWidth + self.style.frozenMarkerWidth - 0.4999999999;\n                }\n                self.lastFrozenRowPixel = y;\n            }\n            function drawRows() {\n                self.ctx.save();\n                if (self.frozenRow > 0) {\n                    radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                    self.ctx.clip();\n                }\n                var o, n, i, g = s.length;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                if (!self.attributes.snapToRow) {\n                    y += -self.scrollBox.scrollTop + self.scrollPixelTop;\n                }\n                for (r = self.frozenRow + self.scrollIndexTop; r < l; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        self.scrollIndexBottom = r;\n                        self.scrollPixelBottom = y;\n                        break;\n                    }\n                }\n                if (self.attributes.showNewRow) {\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    rowHeight = cellHeight = self.style.cellHeight;\n                    rowOpen = false;\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        x += drawCell(self.newRow, self.data.length, self.data.length)(s[i], i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    rowHeaders.push([self.newRow, self.data.length, self.data.length, y, rowHeight]);\n                }\n                self.ctx.restore();\n            }\n            function drawMoveMarkers() {\n                if (!self.movingSelection) { return; }\n                self.ctx.lineWidth = self.style.moveOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.moveOverlayBorderColor;\n                self.ctx.setLineDash(self.style.moveOverlayBorderSegments);\n                moveBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n                self.ctx.setLineDash([]);\n            }\n            function drawReorderMarkers() {\n                if (!self.reorderObject) { return; }\n                var b = {\n                        height: self.reorderObject.height,\n                        width: self.reorderObject.width,\n                        x: self.reorderObject.x + self.reorderObject.dragOffset.x,\n                        y: self.reorderObject.y + self.reorderObject.dragOffset.y\n                    },\n                    m = {\n                        width: w,\n                        height: h,\n                        x: 0,\n                        y: 0\n                    };\n                self.ctx.fillStyle = self.style.reorderMarkerBackgroundColor;\n                self.ctx.lineWidth = self.style.reorderMarkerBorderWidth;\n                self.ctx.strokeStyle = self.style.reorderMarkerBorderColor;\n                if (self.dragMode === 'row-reorder') {\n                    b.width = w;\n                    b.x = 0;\n                    m.width = w;\n                    m.height = self.currentCell.height;\n                    m.y = self.currentCell.y;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.rowIndex !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex > -1\n                            && self.currentCell.rowIndex < l) {\n                        addBorderLine(m, self.reorderTarget.sortRowIndex > self.reorderObject.sortRowIndex ? 'b' : 't');\n                    }\n                } else if (self.dragMode === 'column-reorder' && self.reorderObject) {\n                    b.height = h;\n                    b.y = 0;\n                    m.height = h;\n                    m.width = self.currentCell.width;\n                    m.y = 0;\n                    m.x = self.currentCell.x;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.columnIndex !== self.reorderObject.columnIndex\n                            && self.currentCell.columnIndex > -1\n                            && self.currentCell.columnIndex < s.length) {\n                        addBorderLine(m, self.reorderTarget.sortColumnIndex > self.reorderObject.sortColumnIndex ? 'r' : 'l');\n                    }\n                }\n            }\n            function drawBorder() {\n                self.ctx.lineWidth = self.style.gridBorderWidth;\n                self.ctx.strokeStyle = self.style.gridBorderColor;\n                strokeRect(0, 0, self.width, self.height);\n            }\n            function drawSelectionBorders() {\n                self.ctx.lineWidth = self.style.selectionOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.selectionOverlayBorderColor;\n                function dsb(c) {\n                    addBorderLine(c[0], c[1]);\n                }\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.save();\n                clipFrozenArea(0);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(1);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(2);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n            }\n            function drawSelectionHandles() {\n                if (self.mobile || self.attributes.allowMovingSelection) {\n                    self.ctx.lineWidth = self.style.selectionHandleBorderWidth;\n                    self.ctx.strokeStyle = self.style.selectionHandleBorderColor;\n                    self.ctx.fillStyle = self.style.selectionHandleColor;\n                    selectionHandles.forEach(function (c) {\n                        addselectionHandle(c[0], c[1]);\n                        var az = self.attributes.touchSelectHandleZone / 2,\n                            ax = c[0].x + (c[1] === 'tl' || c[1] === 'bl' ? 0 : c[0].width) - az,\n                            ay = c[0].y + (c[1] === 'bl' || c[1] === 'br' ? c[0].height : 0) - az;\n                        self.visibleCells.unshift({\n                            x: ax,\n                            y: ay,\n                            height: self.style.selectionHandleSize + az,\n                            width: self.style.selectionHandleSize + az,\n                            style: 'selection-handle-' + c[1]\n                        });\n                    });\n                }\n            }\n            function drawActiveCell() {\n                if (!aCell) { return; }\n                self.ctx.save();\n                var cl = self.activeCell.columnIndex + 1 > self.frozenColumn || self.activeCell.rowIndex + 1 > self.frozenRow,\n                    acx = cl ? self.lastFrozenColumnPixel : 0,\n                    acy = cl ? self.lastFrozenRowPixel : 0,\n                    acw = cl ? self.width - self.lastFrozenColumnPixel : self.width,\n                    ach = cl ? self.height - self.lastFrozenRowPixel : self.height;\n                radiusRect(acx, acy, acw, ach, 0);\n                self.ctx.clip();\n                if (self.attributes.selectionMode === 'row') {\n                    if (self.activeCell && self.activeCell.rowIndex === aCell.rowIndex) {\n                        self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                        self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                        strokeRect(0, aCell.y, self.getHeaderWidth() + rowHeaderCellWidth, self.visibleRowHeights[aCell.rowIndex]);\n                    }\n                } else {\n                    self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                    self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                    strokeRect(aCell.x, aCell.y, aCell.width, aCell.height);\n                }\n                self.ctx.restore();\n            }\n            function drawFrozenMarkers() {\n                var my = self.lastFrozenRowPixel - self.style.frozenMarkerWidth,\n                    mx = self.lastFrozenColumnPixel - self.style.frozenMarkerBorderWidth,\n                    xHover = self.currentCell && self.currentCell.style === 'frozen-row-marker',\n                    yHover = self.currentCell && self.currentCell.style === 'frozen-column-marker';\n                self.ctx.lineWidth = self.style.frozenMarkerBorderWidth;\n                if (self.attributes.allowFreezingColumns) {\n                    self.ctx.fillStyle = yHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = yHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    strokeRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    self.visibleCells.unshift({\n                        x: mx,\n                        y: 0,\n                        height: self.height,\n                        width: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        style: 'frozen-column-marker'\n                    });\n                }\n                if (self.attributes.allowFreezingRows) {\n                    self.ctx.fillStyle = xHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = xHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    strokeRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    self.visibleCells.unshift({\n                        x: 0,\n                        y: my,\n                        height: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        width: self.width,\n                        style: 'frozen-row-marker'\n                    });\n                }\n                if (self.freezeMarkerPosition) {\n                    self.ctx.fillStyle = self.style.frozenMarkerActiveColor;\n                    self.ctx.strokeStyle = self.style.frozenMarkerActiveBorderColor;\n                    if (self.dragMode === 'frozen-column-marker') {\n                        fillRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                        strokeRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                    } else {\n                        fillRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                        strokeRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                    }\n                }\n            }\n            function drawPerfLines() {\n                if (!self.attributes.showPerformance) { return; }\n                var pw = 250,\n                    px = self.width - pw - self.style.scrollBarWidth - (self.style.scrollBarBorderWidth * 2),\n                    py = columnHeaderCellHeight,\n                    ph = 100;\n                if (scrollDebugCounters.length === 0) { scrollDebugCounters = self.fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (touchPPSCounters.length === 0) { touchPPSCounters = self.fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (entityCount.length === 0) { entityCount = self.fillArray(0, perfWindowSize, 1, 0); }\n                self.ctx.lineWidth = 0.5;\n                function dpl(name, perfArr, arrIndex, max, color, useAbs, rowIndex) {\n                    var v;\n                    drawPerfLine(pw, ph, px, py, perfArr, arrIndex, max, color, useAbs);\n                    self.ctx.fillStyle = color;\n                    fillRect(3 + px, py + 9 + (rowIndex * 11), 8, 8);\n                    self.ctx.fillStyle = '#999999';\n                    v = arrIndex !== undefined ? perfArr[0][arrIndex] : perfArr[0];\n                    fillText(name + ' ' + (isNaN(v) ? 0 : v).toFixed(3), 14 + px, py + 16 + (rowIndex * 11));\n                }\n                self.ctx.textAlign = 'left';\n                self.ctx.font = '8px sans-serif';\n                self.ctx.fillStyle = 'rgba(29, 25, 26, 1.00)';\n                fillRect(px, py, pw, ph);\n                [['Scroll Height', scrollDebugCounters, 0, self.scrollBox.scrollHeight, 'rgba(248, 33, 103, 1.00)', false],\n                    ['Scroll Width', scrollDebugCounters, 1, self.scrollBox.scrollWidth, 'rgba(66, 255, 27, 1.00)', false],\n                    ['Performance', perfCounters, undefined, 200, 'rgba(252, 255, 37, 1.00)', false],\n                    ['Entities', entityCount, undefined, 1500, 'rgba(76, 231, 239, 1.00)', false],\n                    ['TouchPPSX', touchPPSCounters, 0, 1000, 'rgba(246, 102, 24, 1.00)', true],\n                    ['TouchPPSY', touchPPSCounters, 1, 1000, 'purple', true]\n                    ].forEach(function (i, index) {\n                    i.push(index);\n                    dpl.apply(null, i);\n                });\n                self.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n                entityCount.pop();\n                entityCount.unshift(self.visibleCells.length);\n                scrollDebugCounters.pop();\n                scrollDebugCounters.unshift([self.scrollBox.scrollTop, self.scrollBox.scrollLeft]);\n                touchPPSCounters.pop();\n                touchPPSCounters.unshift([self.yPPS, self.xPPS]);\n            }\n            function drawDebug() {\n                self.ctx.save();\n                var d;\n                if (self.attributes.showPerformance || self.attributes.debug) {\n                    if (perfCounters.length === 0) { perfCounters = self.fillArray(0, perfWindowSize, 1, 0); }\n                    perfCounters.pop();\n                    perfCounters.unshift(performance.now() - p);\n                }\n                if (!self.attributes.debug) {\n                    self.ctx.restore();\n                    return;\n                }\n                self.ctx.font = '14px sans-serif';\n                d = {};\n                d.perf = (perfCounters.reduce(function (a, b) {\n                    return a + b;\n                }, 0) / Math.min(drawCount, perfCounters.length)).toFixed(1);\n                d.htmlImages = Object.keys(self.htmlImageCache).length;\n                d.reorderObject = 'x: ' + (self.reorderObject || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderObject || {rowIndex: 0}).rowIndex;\n                d.reorderTarget = 'x: ' + (self.reorderTarget || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderTarget || {rowIndex: 0}).rowIndex;\n                d.scale = self.scale;\n                d.startScale = self.startScale;\n                d.scaleDelta = self.scaleDelta;\n                d.zoomDeltaStart = self.zoomDeltaStart;\n                d.touchLength = self.touchLength;\n                d.touches = 'y0: ' + (self.touchPosition || {y: 0}).y + ' y1: ' + (self.touchPosition1 || {y: 0}).y;\n                d.scrollBox = self.scrollBox.toString();\n                d.scrollIndex = 'x: ' + self.scrollIndexLeft + ', y: ' + self.scrollIndexTop;\n                d.scrollPixel = 'x: ' + self.scrollPixelLeft + ', y: ' + self.scrollPixelTop;\n                d.canvasOffset = 'x: ' + self.canvasOffsetLeft + ', y: ' + self.canvasOffsetTop;\n                d.touchDelta = 'x: ' + self.touchDelta.x + ', y: ' + self.touchDelta.y;\n                d.touchAnimateTo = 'x: ' + self.touchAnimateTo.x + ', y: ' + self.touchAnimateTo.y;\n                d.scrollAnimation = 'x: ' + self.scrollAnimation.x + ', y: ' + self.scrollAnimation.y;\n                d.touchPPS = 'x: ' + self.xPPS + ', y: ' + self.yPPS;\n                d.touchPPST = 'x: ' + self.xPPST + ', y: ' + self.yPPST;\n                d.touchDuration = self.touchDuration;\n                d.pointerLockPosition =  self.pointerLockPosition ?\n                        self.pointerLockPosition.x + ', ' + self.pointerLockPosition.y : '';\n                d.size = 'w: ' + self.width + ', h: ' + self.height;\n                d.mouse = 'x: ' + self.mouse.x + ', y: ' + self.mouse.y;\n                d.touch = !self.touchStart\n                    ? '' : 'x: ' + self.touchStart.x + ', y: ' + self.touchStart.y;\n                d.entities = self.visibleCells.length;\n                d.hasFocus = self.hasFocus;\n                d.dragMode = self.dragMode;\n                if (self.currentCell) {\n                    d.columnIndex = self.currentCell.columnIndex;\n                    d.rowIndex = self.currentCell.rowIndex;\n                    d.sortColumnIndex = self.currentCell.sortColumnIndex;\n                    d.sortRowIndex = self.currentCell.sortRowIndex;\n                    d.context = self.currentCell.context;\n                    d.dragContext = self.currentCell.dragContext;\n                    d.style = self.currentCell.style;\n                    d.type = self.currentCell.type;\n                }\n                self.ctx.textAlign = 'right';\n                self.ctx.fillStyle = 'rgba(0, 0, 0, .60)';\n                fillRect(0, 0, self.width, self.height);\n                Object.keys(d).forEach(function (key, index) {\n                    var m = key + ': ' + d[key],\n                        lh = 14;\n                    self.ctx.fillStyle = 'rgba(37, 254, 21, 1)';\n                    fillText(m, w - 20, 140 + (index * lh));\n                });\n                self.ctx.restore();\n            }\n            self.ctx.save();\n            initDraw();\n            drawBackground();\n            drawFrozenRows();\n            drawRows();\n            drawActiveCell();\n            drawHeaders();\n            drawFrozenMarkers();\n            drawSelectionBorders();\n            drawSelectionHandles();\n            drawReorderMarkers();\n            drawMoveMarkers();\n            drawScrollBars();\n            if (checkScrollHeight) {\n                self.resize(true);\n            }\n            drawBorder();\n            drawDebug();\n            drawPerfLines();\n            if (self.dispatchEvent('afterdraw', {})) { return; }\n            self.ctx.restore();\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/draw.js\n// module id = 3\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var wheeling;\n        self.stopPropagation = function (e) { e.stopPropagation(); };\n        /**\n         * Adds an event listener to the given event.\n         * @memberof canvasDatagrid\n         * @name addEventListener\n         * @method\n         * @param {string} ev The name of the event to subscribe to.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.addEventListener = function (ev, fn) {\n            self.events[ev] = self.events[ev] || [];\n            self.events[ev].unshift(fn);\n        };\n        /**\n         * Removes the given listener function from the given event.  Must be an actual reference to the function that was bound.\n         * @memberof canvasDatagrid\n         * @name removeEventListener\n         * @method\n         * @param {string} ev The name of the event to unsubscribe from.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.removeEventListener = function (ev, fn) {\n            (self.events[ev] || []).forEach(function removeEachListener(sfn, idx) {\n                if (fn === sfn) {\n                    self.events[ev].splice(idx, 1);\n                }\n            });\n        };\n        /**\n         * Fires the given event, padding an event object to the event subscribers.\n         * @memberof canvasDatagrid\n         * @name dispatchEvent\n         * @method\n         * @param {number} ev The name of the event to dispatch.\n         * @param {number} e The event object.\n         */\n        self.dispatchEvent = function (ev, e) {\n            var defaultPrevented;\n            function preventDefault() {\n                defaultPrevented = true;\n            }\n            if (!self.events[ev]) { return; }\n            self.events[ev].forEach(function dispatchEachEvent(fn) {\n                e.ctx = self.ctx;\n                e.preventDefault = preventDefault;\n                fn.apply(self.intf, [e]);\n            });\n            return defaultPrevented;\n        };\n        self.resize = function (drawAfterResize) {\n            if (!self.canvas) { return; }\n            var bm = self.style.borderCollapse === 'collapse' ? 1 : 2,\n                cellBorder = self.style.cellBorderWidth * bm,\n                columnHeaderCellBorder = self.style.columnHeaderCellBorderWidth * bm,\n                scrollHeight,\n                scrollWidth,\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                ch = self.style.cellHeight,\n                // TODO: What the hell are these numbers!?  They are probably some value in the style.\n                scrollDragPositionOffsetY = 30,\n                scrollDragPositionOffsetX = 15;\n            scrollHeight = self.data.reduce(function reduceData(accumulator, row, rowIndex) {\n                return accumulator\n                    + (((self.sizes.rows[row[self.uniqueId]] || ch) + (self.sizes.trees[row[self.uniqueId]] || 0)) * self.scale)\n                    + cellBorder\n                    // HACK? if an expanded tree row is frozen it is necessary to add the tree row's height a second time.\n                    + (self.frozenRow > rowIndex ? (self.sizes.trees[row[self.uniqueId]] || 0) : 0);\n            }, 0) || 0;\n            scrollWidth = self.getVisibleSchema().reduce(function reduceSchema(accumulator, column) {\n                if (column.hidden) { return accumulator; }\n                return accumulator + ((self.sizes.columns[column[self.uniqueId]] || column.width || self.style.cellWidth) * self.scale) + cellBorder;\n            }, 0) || 0;\n            if (self.isChildGrid) {\n                self.width = self.parentNode.offsetWidth;\n                self.height = self.parentNode.offsetHeight;\n            } else {\n                self.height = self.canvas.offsetHeight;\n                self.width = self.canvas.offsetWidth;\n                self.canvas.width = self.width * window.devicePixelRatio;\n                self.canvas.height = self.height * window.devicePixelRatio;\n                self.canvasOffsetLeft = self.args.canvasOffsetLeft || 0;\n                self.canvasOffsetTop = self.args.canvasOffsetTop || 0;\n            }\n            if (self.attributes.showNewRow) {\n                scrollHeight += ch + cellBorder;\n            }\n            self.scrollBox.width = self.width - rowHeaderCellWidth;\n            self.scrollBox.height = self.height - columnHeaderCellHeight - columnHeaderCellBorder;\n            self.scrollBox.top = columnHeaderCellHeight + columnHeaderCellBorder;\n            self.scrollBox.left = rowHeaderCellWidth;\n            self.scrollBox.scrollHeight = scrollHeight + self.style.scrollBarWidth - self.scrollBox.height;\n            self.scrollBox.scrollWidth = scrollWidth + self.style.scrollBarWidth - self.scrollBox.width;\n            self.scrollBox.widthBoxRatio = ((self.scrollBox.width - scrollDragPositionOffsetX)\n                / (self.scrollBox.scrollWidth + self.scrollBox.width - scrollDragPositionOffsetX));\n            self.scrollBox.scrollBoxWidth = self.scrollBox.width\n                * self.scrollBox.widthBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.heightBoxRatio = ((self.scrollBox.height - scrollDragPositionOffsetY)\n                / (self.scrollBox.scrollHeight + (self.scrollBox.height - scrollDragPositionOffsetY)));\n            self.scrollBox.scrollBoxHeight = self.scrollBox.height\n                * self.scrollBox.heightBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.scrollBoxWidth = Math.max(self.scrollBox.scrollBoxWidth, self.style.scrollBarBoxMinSize);\n            self.scrollBox.scrollBoxHeight = Math.max(self.scrollBox.scrollBoxHeight, self.style.scrollBarBoxMinSize);\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            self.resizeEditInput();\n            self.scroll(true);\n            if (drawAfterResize) {\n                self.draw(true);\n            }\n            self.dispatchEvent('resize', {});\n            return true;\n        };\n        self.scroll = function (dontDraw) {\n            var bm = self.style.borderCollapse === 'collapse' ? 1 : 2,\n                s = self.getVisibleSchema(),\n                cellBorder = self.style.cellBorderWidth * bm,\n                ch = self.style.cellHeight;\n            self.scrollIndexTop = 0;\n            self.scrollPixelTop = 0;\n            self.scrollIndexLeft = 0;\n            self.scrollPixelLeft = 0;\n            while (self.scrollPixelTop < self.scrollBox.scrollTop && self.scrollIndexTop < self.data.length) {\n                self.scrollPixelTop +=\n                    (((self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || ch)\n                        + (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0)) * self.scale)\n                    + cellBorder;\n                self.scrollIndexTop += 1;\n            }\n            while (self.scrollPixelLeft < self.scrollBox.scrollLeft && self.scrollIndexLeft < s.length) {\n                self.scrollPixelLeft +=\n                    ((self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width) * self.scale)\n                    + cellBorder;\n                self.scrollIndexLeft += 1;\n            }\n            if (self.data.length > 0) {\n                self.scrollIndexLeft = Math.max(self.scrollIndexLeft - 1, 0);\n                self.scrollPixelLeft = Math.max(self.scrollPixelLeft\n                    - ((self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width) * self.scale), 0);\n                self.scrollIndexTop = Math.max(self.scrollIndexTop - 1, 0);\n                self.scrollPixelTop = Math.max((self.scrollPixelTop\n                    - ((self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || ch)\n                    + (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0)) * self.scale), 0);\n            }\n            self.ellipsisCache = {};\n            if (!dontDraw) {\n                self.draw(true);\n            }\n            //TODO: figure out why this has to be delayed for child grids\n            //BUG: wheeling event on 3rd level hierarchy fails to move input box\n            requestAnimationFrame(self.resizeEditInput);\n            self.dispatchEvent('scroll', {top: self.scrollBox.scrollTop, left: self.scrollBox.scrollLeft});\n        };\n        self.mousemove = function (e, overridePos) {\n            if (self.contextMenu || self.input) {\n                return;\n            }\n            self.mouse = overridePos || self.getLayerPos(e);\n            var ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                i,\n                vs = self.getVisibleSchema(),\n                dragBounds,\n                sBounds,\n                x = self.mouse.x,\n                y = self.mouse.y,\n                o = self.getCellAt(x, y),\n                delta,\n                ev = {NativeEvent: e, cell: o, x: x, y: y},\n                previousCell = self.currentCell;\n            clearTimeout(self.scrollTimer);\n            if (!self.isInGrid({x: x, y: y})) {\n                self.hasFocus = false;\n            }\n            if (self.dispatchEvent('mousemove', ev)) {\n                return;\n            }\n            if (o && self.currentCell && (self.currentCell.rowIndex !== o.rowIndex\n                    || self.currentCell.columnIndex !== o.columnIndex)) {\n                self.cellBoundaryCrossed = true;\n                ev.cell = previousCell;\n                self.dispatchEvent('cellmouseout', ev);\n                ev.cell = o;\n                self.dispatchEvent('cellmouseover', ev);\n            }\n            self.currentCell = o;\n            if (!self.hasFocus) {\n                return;\n            }\n            self.hovers = {};\n            if (!self.draggingItem\n                    && o\n                    && self.scrollModes.indexOf(o.context) === -1) {\n                self.dragItem = o;\n                self.dragMode = o.dragContext;\n                self.canvas.style.cursor = o.context;\n                if (o.context === 'cell' && o.data) {\n                    self.canvas.style.cursor = 'default';\n                    self.hovers[o.data[self.uniqueId]] = [o.columnIndex];\n                }\n                if ((self.selecting || self.reorderObject)\n                        && o.context === 'cell'\n                        && o.data) {\n                    sBounds = self.getSelectionBounds();\n                    delta = {\n                        x: Math.abs(self.dragStart.x - x),\n                        y: Math.abs(self.dragStart.y - y)\n                    };\n                    if (self.dragStartObject.columnIndex !== -1 && e.shiftKey) {\n                        self.dragStartObject = {\n                            rowIndex: self.activeCell.rowIndex,\n                            columnIndex: self.activeCell.columnIndex\n                        };\n                    }\n                    dragBounds = {\n                        top: Math.min(self.dragStartObject.rowIndex, o.rowIndex),\n                        left: Math.min(self.dragStartObject.columnIndex, o.columnIndex),\n                        bottom: Math.max(self.dragStartObject.rowIndex, o.rowIndex),\n                        right: Math.max(self.dragStartObject.columnIndex, o.columnIndex)\n                    };\n                    if (self.dragStartObject.columnIndex === -1) {\n                        dragBounds.left = -1;\n                        dragBounds.right = vs.length - 1;\n                        dragBounds.top = Math.min(sBounds.top, o.rowIndex);\n                        dragBounds.bottom = Math.max(sBounds.bottom, o.rowIndex);\n                    }\n                    if (self.dragStartObject.rowIndex !== o.rowIndex\n                                || self.dragStartObject.columnIndex !== o.columnIndex) {\n                        self.ignoreNextClick = true;\n                    }\n                    if (self.cellBoundaryCrossed || (delta.x === 0 && delta.y === 0) || (self.attributes.selectionMode === 'row')) {\n                        if ((self.attributes.selectionMode === 'row') || self.dragStartObject.columnIndex === -1) {\n                            self.selectRow(o.rowIndex, ctrl, null, true);\n                        } else {\n                            if (!self.dragAddToSelection && o.rowIndex !== undefined) {\n                                if (self.selections[o.rowIndex] && self.selections[o.rowIndex].indexOf(o.columnIndex) !== -1) {\n                                    self.selections[o.rowIndex].splice(self.selections[o.rowIndex].indexOf(o.columnIndex), 1);\n                                }\n                            } else {\n                                self.selections[o.rowIndex] = self.selections[o.rowIndex] || [];\n                                if (self.selections[o.rowIndex].indexOf(o.columnIndex) === -1) {\n                                    self.selections[o.rowIndex].push(o.columnIndex);\n                                }\n                            }\n                        }\n                    }\n                    if ((!self.selectionBounds || (dragBounds.top !== self.selectionBounds.top\n                            || dragBounds.left !== self.selectionBounds.left\n                            || dragBounds.bottom !== self.selectionBounds.bottom\n                            || dragBounds.right !== self.selectionBounds.right)) && !ctrl) {\n                        self.selections = [];\n                        sBounds = dragBounds;\n                        if (self.attributes.selectionMode === 'row') {\n                            for (i = sBounds.top; i <= sBounds.bottom; i += 1) {\n                                self.selectRow(i, true, null, true);\n                            }\n                        } else {\n                            self.selectArea(sBounds, true);\n                        }\n                    }\n                    self.autoScrollZone(e, x, y, ctrl);\n                }\n            }\n            self.cellBoundaryCrossed = false;\n            self.draw(true);\n        };\n        self.click = function (e, overridePos) {\n            var i,\n                ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                pos = overridePos || self.getLayerPos(e);\n            self.currentCell = self.getCellAt(pos.x, pos.y);\n            if (self.currentCell.grid !== undefined) {\n                return;\n            }\n            function checkSelectionChange() {\n                self.dispatchEvent('selectionchanged', {\n                    selectedData: self.getSelectedData(),\n                    selections: self.selections,\n                    selectionBounds: self.selectionBounds\n                });\n            }\n            if (self.input) {\n                self.endEdit();\n            }\n            if (self.ignoreNextClick) {\n                self.ignoreNextClick = false;\n                return;\n            }\n            i = self.currentCell;\n            if (self.dispatchEvent('click', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (['rowHeaderCell', 'columnHeaderCell'].indexOf(self.currentCell.style) === -1 && !ctrl) {\n                self.setActiveCell(i.columnIndex, i.rowIndex);\n            }\n            if (self.currentCell.context === 'cell') {\n                if (self.currentCell.style === 'cornerCell') {\n                    self.selectAll();\n                    self.draw();\n                    checkSelectionChange();\n                    return;\n                }\n                if (self.currentCell.style === 'columnHeaderCell') {\n                    if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                        if (self.orderBy === i.header.name) {\n                            self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                        } else {\n                            self.orderDirection = 'asc';\n                        }\n                        self.order(i.header.name, self.orderDirection);\n                        checkSelectionChange();\n                        return;\n                    }\n                    if (self.attributes.columnHeaderClickBehavior === 'select') {\n                        self.selectColumn(i.header.index, ctrl, e.shiftKey, true);\n                        checkSelectionChange();\n                        self.draw();\n                        return;\n                    }\n                }\n                self.selections[i.rowIndex] = self.selections[i.rowIndex] || [];\n                if (((self.attributes.selectionMode === 'row') || self.currentCell.style === 'rowHeaderCell')) {\n                    if (self.currentCell.style === 'rowHeaderCell'\n                            && self.attributes.tree && pos.x > 0\n                            && pos.x - self.currentCell.x < self.style.treeArrowWidth\n                            + self.style.treeArrowMarginLeft\n                            + self.style.treeArrowMarginRight + self.style.treeArrowClickRadius\n                            && pos.y - self.currentCell.y < self.style.treeArrowHeight\n                            + self.style.treeArrowMarginTop + self.style.treeArrowClickRadius\n                            && pos.y > 0) {\n                        self.toggleTree(i.rowIndex);\n                        return;\n                    }\n                }\n                if (e.shiftKey && !ctrl) {\n                    self.selectionBounds = self.getSelectionBounds();\n                    self.selectArea(undefined, false);\n                }\n            }\n            checkSelectionChange();\n            self.draw(true);\n        };\n        self.dragResizeColumn = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = self.resizingStartingWidth + pos.x - self.dragStart.x;\n            y = self.resizingStartingHeight + pos.y - self.dragStart.y;\n            if (x < self.style.minColumnWidth) {\n                x = self.style.minColumnWidth;\n            }\n            if (y < self.style.minRowHeight) {\n                y = self.style.minRowHeight;\n            }\n            if (self.dispatchEvent('resizecolumn', {x: x, y: y, draggingItem: self.draggingItem})) { return false; }\n            if (self.scrollBox.scrollLeft > self.scrollBox.scrollWidth - self.attributes.resizeScrollZone\n                    && self.dragMode === 'ew-resize') {\n                self.resize(true);\n                self.scrollBox.scrollLeft += x;\n            }\n            if (self.dragMode === 'ew-resize') {\n                self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] = x;\n                if (['rowHeaderCell', 'cornerCell'].indexOf(self.draggingItem.header.style) !== -1) {\n                    self.resize(true);\n                }\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.dragMode === 'ns-resize') {\n                if (self.draggingItem.rowOpen) {\n                    self.sizes.trees[self.draggingItem.data[self.uniqueId]] = y;\n                } else if (self.attributes.globalRowResize) {\n                    self.style.cellHeight = y;\n                } else {\n                    self.sizes.rows[self.draggingItem.data[self.uniqueId]] = y;\n                }\n                self.dispatchEvent('resizerow', {row: y});\n                self.resizeChildGrids();\n                return;\n            }\n            self.ellipsisCache = {};\n        };\n        self.stopDragResize = function () {\n            self.resize();\n            document.body.removeEventListener('mousemove', self.dragResizeColumn, false);\n            document.body.removeEventListener('mouseup', self.stopDragResize, false);\n            self.setStorageData();\n            self.draw(true);\n            self.ignoreNextClick = true;\n        };\n        self.scrollGrid = function (e) {\n            var pos = self.getLayerPos(e);\n            if (self.attributes.scrollPointerLock && self.pointerLockPosition\n                    && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                self.pointerLockPosition.x += e.movementX;\n                self.pointerLockPosition.y += e.movementY;\n                self.pointerLockPosition.x = Math.min(self.width - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.x));\n                self.pointerLockPosition.y = Math.min(self.height - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.y));\n                pos = self.pointerLockPosition;\n            }\n            self.scrollMode = self.getCellAt(pos.x, pos.y).context;\n            if (self.scrollMode === 'horizontal-scroll-box' && self.scrollStartMode !== 'horizontal-scroll-box') {\n                self.scrollStartMode = 'horizontal-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.left = self.scrollBox.scrollLeft;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box' && self.scrollStartMode !== 'vertical-scroll-box') {\n                self.scrollStartMode = 'vertical-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.top = self.scrollBox.scrollTop;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollStartMode === 'vertical-scroll-box'\n                    && self.scrollMode !== 'vertical-scroll-box') {\n                self.scrollMode = 'vertical-scroll-box';\n            }\n            if (self.scrollStartMode === 'horizontal-scroll-box'\n                    && self.scrollMode !== 'horizontal-scroll-box') {\n                self.scrollMode = 'horizontal-scroll-box';\n            }\n            clearTimeout(self.scrollTimer);\n            if (self.scrollModes.indexOf(self.scrollMode) === -1) {\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box') {\n                self.scrollBox.scrollTop = self.scrollStart.top + ((pos.y - self.dragStart.y)\n                    / self.scrollBox.heightBoxRatio);\n            } else if (self.scrollMode === 'vertical-scroll-top') {\n                self.scrollBox.scrollTop -= (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'vertical-scroll-bottom') {\n                self.scrollBox.scrollTop += (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n            if (self.scrollMode === 'horizontal-scroll-box') {\n                self.scrollBox.scrollLeft = self.scrollStart.left + ((pos.x - self.dragStart.x)\n                    / self.scrollBox.widthBoxRatio);\n            } else if (self.scrollMode === 'horizontal-scroll-right') {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'horizontal-scroll-left') {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.stopScrollGrid = function () {\n            clearTimeout(self.scrollTimer);\n            if (document.exitPointerLock) {\n                document.exitPointerLock();\n            }\n            document.body.removeEventListener('mousemove', self.scrollGrid, false);\n        };\n        self.dragReorder = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = pos.x - self.dragStart.x;\n            y = pos.y - self.dragStart.y;\n            if (!self.attributes.allowColumnReordering && self.dragMode === 'column-reorder') {\n                return;\n            }\n            if (!self.attributes.allowRowReordering && self.dragMode === 'row-reorder') {\n                return;\n            }\n            if (self.dispatchEvent('reordering', {\n                    NativeEvent: e,\n                    source: self.dragStartObject,\n                    target: self.currentCell,\n                    dragMode: self.dragMode\n                })) {\n                return;\n            }\n            if (Math.abs(x) > self.attributes.reorderDeadZone || Math.abs(y) > self.attributes.reorderDeadZone) {\n                self.reorderObject = self.draggingItem;\n                self.reorderTarget = self.currentCell;\n                self.reorderObject.dragOffset = {\n                    x: x,\n                    y: y\n                };\n                self.autoScrollZone(e, pos.x, pos.y, false);\n            }\n        };\n        self.stopDragReorder = function (e) {\n            var oIndex,\n                tIndex,\n                cr = {\n                    'row-reorder': self.orders.rows,\n                    'column-reorder': self.orders.columns\n                },\n                i = {\n                    'row-reorder': 'rowIndex',\n                    'column-reorder': 'columnIndex'\n                }[self.dragMode];\n            document.body.removeEventListener('mousemove', self.dragReorder, false);\n            document.body.removeEventListener('mouseup', self.stopDragReorder, false);\n            if (self.reorderObject\n                    && self.reorderTarget\n                    && ((self.dragMode === 'column-reorder' && self.reorderTarget.columnIndex > -1\n                        && self.reorderTarget.columnIndex < self.getVisibleSchema().length)\n                    || (self.dragMode === 'row-reorder' && self.reorderTarget.rowIndex > -1\n                        && self.reorderTarget.rowIndex < self.data.length))\n                    && self.reorderObject[i] !== self.reorderTarget[i]\n                    && !self.dispatchEvent('reorder', {\n                        NativeEvent: e,\n                        source: self.reorderObject,\n                        target: self.reorderTarget,\n                        dragMode: self.dragMode\n                    })) {\n                self.ignoreNextClick = true;\n                oIndex = cr[self.dragMode].indexOf(self.reorderObject[i]);\n                tIndex = cr[self.dragMode].indexOf(self.reorderTarget[i]);\n                cr[self.dragMode].splice(oIndex, 1);\n                cr[self.dragMode].splice(tIndex, 0, self.reorderObject[i]);\n                self.setStorageData();\n            }\n            self.reorderObject = undefined;\n            self.reorderTarget = undefined;\n            self.draw(true);\n        };\n        self.dragMove = function (e) {\n            if (self.dispatchEvent('moving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.moveOffset = {\n                x: self.currentCell.columnIndex - self.dragStartObject.columnIndex,\n                y: self.currentCell.rowIndex - self.dragStartObject.rowIndex\n            };\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopDragMove = function (e) {\n            document.body.removeEventListener('mousemove', self.dragMove, false);\n            document.body.removeEventListener('mouseup', self.stopDragMove, false);\n            var b = self.getSelectionBounds();\n            if (self.dispatchEvent('endmove', {NativeEvent: e, cell: self.currentCell})) {\n                self.movingSelection = undefined;\n                self.moveOffset = undefined;\n                self.draw(true);\n                return;\n            }\n            if (self.moveOffset) {\n                self.moveTo(self.movingSelection, b.left + self.moveOffset.x, b.top + self.moveOffset.y);\n                self.moveSelection(self.moveOffset.x, self.moveOffset.y);\n            }\n            self.movingSelection = undefined;\n            self.moveOffset = undefined;\n            self.draw(true);\n        };\n        self.freezeMove = function (e) {\n            if (self.dispatchEvent('freezemoving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.ignoreNextClick = true;\n            self.freezeMarkerPosition = pos;\n            if (self.currentCell && self.currentCell.rowIndex !== undefined && self.dragMode === 'frozen-row-marker') {\n                self.scrollBox.scrollTop = 0;\n                self.frozenRow = self.currentCell.rowIndex + 1;\n            }\n            if (self.currentCell && self.currentCell.columnIndex !== undefined && self.dragMode === 'frozen-column-marker') {\n                self.scrollBox.scrollLeft = 0;\n                self.frozenColumn = self.currentCell.columnIndex + 1;\n            }\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopFreezeMove = function (e) {\n            document.body.removeEventListener('mousemove', self.freezeMove, false);\n            document.body.removeEventListener('mouseup', self.stopFreezeMove, false);\n            self.freezeMarkerPosition = undefined;\n            if (self.dispatchEvent('endfreezemove', {NativeEvent: e})) {\n                self.frozenRow = self.startFreezeMove.x;\n                self.frozenColumn = self.startFreezeMove.y;\n                self.draw(true);\n                return;\n            }\n            self.draw(true);\n        };\n        self.mousedown = function (e, overridePos) {\n            self.lastMouseDownTarget = e.target;\n            if (self.dispatchEvent('mousedown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (e.button === 2 || self.input) { return; }\n            var ctrl = (e.ctrlKey || e.metaKey),\n                move = /-move/.test(self.dragMode),\n                freeze = /frozen-row-marker|frozen-column-marker/.test(self.dragMode),\n                resize = /-resize/.test(self.dragMode);\n            self.dragStart = overridePos || self.getLayerPos(e);\n            self.scrollStart = {\n                left: self.scrollBox.scrollLeft,\n                top: self.scrollBox.scrollTop\n            };\n            self.dragStartObject = self.getCellAt(self.dragStart.x, self.dragStart.y);\n            self.dragAddToSelection = !self.dragStartObject.selected;\n            if (!ctrl && !e.shiftKey && !/(vertical|horizontal)-scroll-(bar|box)/\n                    .test(self.dragStartObject.context)\n                    && self.currentCell\n                    && !self.currentCell.isColumnHeader\n                    && !move\n                    && !freeze\n                    && !resize) {\n                self.selections = [];\n            }\n            if (self.dragStartObject.isGrid) {\n                return;\n            }\n            if (self.scrollModes.indexOf(self.dragStartObject.context) !== -1) {\n                self.scrollMode = self.dragStartObject.context;\n                self.scrollStartMode = self.dragStartObject.context;\n                self.scrollGrid(e);\n                if (self.attributes.scrollPointerLock\n                        && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                    self.pointerLockPosition = {\n                        x: self.dragStart.x,\n                        y: self.dragStart.y\n                    };\n                    self.canvas.requestPointerLock();\n                }\n                document.body.addEventListener('mousemove', self.scrollGrid, false);\n                document.body.addEventListener('mouseup', self.stopScrollGrid, false);\n                self.ignoreNextClick = true;\n                return;\n            }\n            if (self.dragMode === 'cell') {\n                self.selecting = true;\n                if (self.attributes.selectionMode === 'row') {\n                    self.selectRow(self.dragStartObject.rowIndex, ctrl, null, true);\n                }\n                return self.mousemove(e);\n            }\n            if (move) {\n                self.draggingItem = self.dragItem;\n                self.movingSelection = self.selections.concat([]);\n                self.dragging = self.dragStartObject;\n                if (self.dispatchEvent('beginmove', {NativeEvent: e, cell: self.currentCell})) { return; }\n                document.body.addEventListener('mousemove', self.dragMove, false);\n                document.body.addEventListener('mouseup', self.stopDragMove, false);\n                return self.mousemove(e);\n            }\n            if (freeze) {\n                self.draggingItem = self.dragItem;\n                self.startFreezeMove = {\n                    x: self.frozenRow,\n                    y: self.frozenColumn\n                };\n                if (self.dispatchEvent('beginfreezemove', {NativeEvent: e})) { return; }\n                document.body.addEventListener('mousemove', self.freezeMove, false);\n                document.body.addEventListener('mouseup', self.stopFreezeMove, false);\n                return self.mousemove(e);\n            }\n            if (resize) {\n                self.draggingItem = self.dragItem;\n                if (self.draggingItem.rowOpen) {\n                    self.resizingStartingHeight = self.sizes.trees[self.draggingItem.data[self.uniqueId]];\n                } else {\n                    self.resizingStartingHeight = self.sizes.rows[self.draggingItem.data[self.uniqueId]] || self.style.cellHeight;\n                }\n                self.resizingStartingWidth = self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] || self.draggingItem.width;\n                document.body.addEventListener('mousemove', self.dragResizeColumn, false);\n                document.body.addEventListener('mouseup', self.stopDragResize, false);\n            }\n            if (['row-reorder', 'column-reorder'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragStartObject;\n                document.body.addEventListener('mousemove', self.dragReorder, false);\n                document.body.addEventListener('mouseup', self.stopDragReorder, false);\n            }\n        };\n        self.mouseup = function (e) {\n            clearTimeout(self.scrollTimer);\n            self.cellBoundaryCrossed = true;\n            self.selecting = undefined;\n            self.draggingItem = undefined;\n            self.dragStartObject = undefined;\n            if (self.dispatchEvent('mouseup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            if (self.currentCell && self.currentCell.grid !== undefined) {\n                return;\n            }\n            if (self.contextMenu || self.input) { return; }\n            if (self.dragStart && self.isInGrid(self.dragStart)) {\n                self.controlInput.focus();\n            }\n            e.preventDefault();\n        };\n        self.keydown = function (e) {\n            var i,\n                x = self.activeCell.columnIndex,\n                y = self.activeCell.rowIndex,\n                ctrl = (e.ctrlKey || e.metaKey),\n                last = self.data.length - 1,\n                cols = self.getVisibleSchema().length - 1;\n            if (self.dispatchEvent('keydown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            if (self.attributes.showNewRow) {\n                last += 1;\n            }\n            if (e.keyCode === 9) {\n                e.preventDefault();\n            }\n            // esc\n            if (e.keyCode === 27) {\n                self.selections = [];\n                self.draw(true);\n            // ctrl + a\n            } else if (ctrl && e.keyCode === 65) {\n                self.selectAll();\n            //ArrowDown\n            } else if (e.keyCode === 40) {\n                y += 1;\n            //ArrowUp\n            } else if (e.keyCode === 38) {\n                y -= 1;\n            //ArrowLeft Tab\n            } else if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {\n                x -= 1;\n            //ArrowRight Tab\n            } else if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {\n                x += 1;\n            //PageUp\n            } else if (e.keyCode === 33) {\n                y -= self.page;\n                e.preventDefault();\n            //PageDown\n            } else if (e.keyCode === 34) {\n                y += self.page;\n                e.preventDefault();\n            //Home ArrowUp\n            } else if (e.keyCode === 36 || (ctrl && e.keyCode === 38)) {\n                y = 0;\n            //End ArrowDown\n            } else if (e.keyCode === 35 || (ctrl && e.keyCode === 40)) {\n                y = self.data.length - 1;\n            //ArrowRight\n            } else if (ctrl && e.keyCode === 39) {\n                x = cols;\n            //ArrowLeft\n            } else if (ctrl && e.keyCode === 37) {\n                x = 0;\n            }\n            //Enter\n            if (e.keyCode === 13) {\n                return self.beginEditAt(x, y);\n            }\n            //Space\n            if (e.keyCode === 32) {\n                self.selections = [];\n                self.selections[Math.max(y, 0)] = [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                if (self.attributes.selectionMode === 'row') {\n                    for (i = self.selectionBounds.top; i <= self.selectionBounds.bottom; i += 1) {\n                        self.selectRow(i, ctrl, null, true);\n                    }\n                } else {\n                    self.selectArea(undefined, ctrl);\n                }\n                e.preventDefault();\n                self.draw(true);\n                return;\n            }\n            if (x < 0) {\n                x = 0;\n            }\n            if (y > last) {\n                y = last;\n            }\n            if (y < 0) {\n                y = 0;\n            }\n            if (x > cols) {\n                x = cols;\n            }\n            // Arrows\n            if (e.shiftKey && [37, 38, 39, 40].indexOf(e.keyCode) !== -1) {\n                self.selections[Math.max(y, 0)] = self.selections[Math.max(y, 0)] || [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                self.selectArea(undefined, ctrl);\n                self.draw(true);\n            }\n            if (x !== self.activeCell.columnIndex || y !== self.activeCell.rowIndex) {\n                self.scrollIntoView(x !== self.activeCell.columnIndex ? x : undefined, y !== self.activeCell.rowIndex ? y : undefined);\n                self.setActiveCell(x, y);\n                if (!e.shiftKey && self.attributes.selectionFollowsActiveCell) {\n                    if (!ctrl) {\n                        self.selections = [];\n                    }\n                    self.selections[y] = self.selections[y] || [];\n                    self.selections[y].push(x);\n                    self.dispatchEvent('selectionchanged', {\n                        selectedData: self.getSelectedData(),\n                        selections: self.selections,\n                        selectionBounds: self.selectionBounds\n                    });\n                }\n                self.draw(true);\n            }\n        };\n        self.keyup = function (e) {\n            if (self.dispatchEvent('keyup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n        };\n        self.keypress = function (e) {\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.dispatchEvent('keypress', {NativeEvent: e, cell: self.currentCell})) { return; }\n        };\n        self.dblclick = function (e) {\n            if (self.dispatchEvent('dblclick', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'columnHeaderCell') {\n                self.fitColumnToValues(self.currentCell.header.name);\n            } else if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'cornerCell') {\n                self.autosize();\n            } else if (['cell', 'activeCell'].indexOf(self.currentCell.style) !== -1) {\n                self.beginEditAt(self.currentCell.columnIndex, self.currentCell.rowIndex);\n            }\n        };\n        self.scrollWheel = function (e) {\n            var l,\n                t,\n                deltaX = e.deltaX === undefined ? e.NativeEvent.deltaX : e.deltaX,\n                deltaY = e.deltaY === undefined ? e.NativeEvent.deltaY : e.deltaY,\n                deltaMode = e.deltaMode === undefined ? e.NativeEvent.deltaMode : e.deltaMode;\n            if (wheeling) {\n                return;\n            }\n            if (self.dispatchEvent('wheel', {NativeEvent: e})) {\n                return;\n            }\n            e = e.NativeEvent || e;\n            self.touchHaltAnimation = true;\n            l = self.scrollBox.scrollLeft;\n            t = self.scrollBox.scrollTop;\n            if (self.hasFocus) {\n                //BUG Issue 42: https://github.com/TonyGermaneri/canvas-datagrid/issues/42\n                //https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\n                if (deltaMode === 1) {\n                    // line mode = 17 pixels per line\n                    deltaY = deltaY * 17;\n                }\n                if ((self.scrollBox.scrollTop < self.scrollBox.scrollHeight && deltaY > 0)\n                        || (self.scrollBox.scrollLeft < self.scrollBox.scrollWidth && deltaX > 0)\n                        || (self.scrollBox.scrollTop > 0 && deltaY < 0)\n                        || (self.scrollBox.scrollLeft > 0 && deltaX < 0)) {\n                    e.preventDefault(e);\n                }\n                wheeling = setTimeout(function () {\n                    wheeling = undefined;\n                    self.scrollBox.scrollTo(deltaX + l, deltaY + t);\n                }, 1);\n            }\n        };\n        self.pasteItem = function (clipData, x, y, mimeType) {\n            var l, s = self.getVisibleSchema(), yi = y - 1, sel = [];\n            function normalizeRowData(importingRow, existingRow, offsetX, schema, mimeType, rowIndex) {\n                var r = existingRow;\n                if (!Array.isArray(importingRow) && importingRow !== null && typeof importingRow === 'object') {\n                    importingRow = Object.keys(importingRow).map(function (colKey) {\n                        return importingRow[colKey];\n                    });\n                }\n                if (/^text\\/html/.test(mimeType)) {\n                    importingRow = importingRow.substring(4, importingRow.length - 5).split('</td><td>');\n                }\n                if (typeof importingRow === 'string') {\n                    importingRow = [importingRow];\n                }\n                sel[rowIndex] = [];\n                importingRow.forEach(function (cellData, colIndex) {\n                    var cName = schema[colIndex + offsetX].name;\n                    if (importingRow[colIndex] === undefined || importingRow[colIndex] === null) {\n                        r[cName] = existingRow[cName];\n                        return;\n                    }\n                    sel[rowIndex].push(colIndex + offsetX);\n                    r[cName] = importingRow[colIndex];\n                });\n                return r;\n            }\n            if (/^text\\/html/.test(mimeType)) {\n                if (!/^(<meta[^>]+>)?<table>/.test(clipData.substring(0, 29))) {\n                    console.warn('Unrecognized HTML format.  HTML must be a simple table, e.g.: <table><tr><td>data</td></tr></table>.  Data with the mime type text/html not in this format will not be imported as row data.');\n                    return;\n                }\n                // strip table beginning and ending off, then split at rows\n                clipData = clipData.substring(clipData.indexOf('<table><tr>') + 11, clipData.length - 13).split('</tr><tr>');\n            } else {\n                clipData = clipData.split('\\n');\n            }\n            l = clipData.length;\n            clipData.forEach(function (rowData) {\n                yi += 1;\n                self.data[yi] = normalizeRowData(rowData, self.data[yi], x, s, mimeType, yi);\n            });\n            self.selections = sel;\n            return l;\n        };\n        self.paste = function (e) {\n            var d;\n            function getItem(dti) {\n                var type = dti.type;\n                dti.getAsString(function (s) {\n                    self.pasteItem(s, self.activeCell.columnIndex, self.activeCell.rowIndex, type);\n                    self.draw();\n                });\n            }\n            d = Array.prototype.filter.call(e.clipboardData.items, function (dti) {\n                return dti.type === 'text/html';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/csv';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/plain';\n            })[0];\n            if (!d) {\n                console.warn('Cannot find supported clipboard data type.  Supported types are text/html, text/csv, text/plain.');\n                return;\n            }\n            getItem(d);\n        };\n        self.cut = function (e) {\n            self.copy(e);\n            self.forEachSelectedCell(function (data, index, colName) {\n                data[index][colName] = '';\n            });\n        };\n        self.copy = function (e) {\n            if (self.dispatchEvent('copy', {NativeEvent: e})) { return; }\n            if (!self.hasFocus || !e.clipboardData) { return; }\n            var t,\n                d,\n                rows = [],\n                trows = [],\n                sData = self.getSelectedData();\n            function fCopyCell(d) {\n                d = d === null || d === undefined ? '' : d;\n                return '<td>' + (typeof d === 'string' ? d.replace(/</g, '&lt;').replace(/>/g, '&gt;') : d) + '</td>';\n            }\n            if (sData.length > 0) {\n                sData.forEach(function (row) {\n                    if (row) {\n                        // r = array for HTML, rt = array for plain text\n                        var r = [],\n                            rt = [];\n                        Object.keys(row).forEach(function (key) {\n                            // escape strings\n                            if (row[key] !== null\n                                    && row[key] !== false\n                                    && row[key] !== undefined\n                                    && row[key].replace) {\n                                rt.push('\"' + row[key].replace(/\"/g, '\"\"') + '\"');\n                                r.push(fCopyCell(row[key]));\n                                return;\n                            }\n                            rt.push(row[key]);\n                            r.push(fCopyCell(row[key]));\n                        });\n                        rows.push(r.join(''));\n                        trows.push(rt.join(','));\n                    }\n                });\n                d = '<table><tr>' + rows.join('</tr><tr>') + '</tr></table>';\n                t = trows.join('\\n');\n                e.clipboardData.setData('text/html', d);\n                e.clipboardData.setData('text/plain', t);\n                e.clipboardData.setData('text/csv', t);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/events.js\n// module id = 4\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var touchTimerMs = 50,\n            touchScrollTimeout;\n        self.scrollAnimation = {};\n        self.touchDelta = {};\n        self.touchAnimateTo = {};\n        self.animationFrames = 0;\n        self.getTouchPos = function (e, touchIndex) {\n            var t = touchIndex ? e.touches[touchIndex] : e.touches[0],\n                rect = self.canvas.getBoundingClientRect(),\n                pos;\n            if (!t) { return; }\n            pos = {\n                x: t.clientX - rect.left,\n                y: t.clientY - rect.top\n            };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        // shamelessly stolen from from https://gist.github.com/gre/1650294\n        self.easingFunctions = {\n            linear: function (t) { return t; },\n            easeInQuad: function (t) { return t * t; },\n            easeOutQuad: function (t) { return t * (2 - t); },\n            easeInOutQuad: function (t) { return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t; },\n            easeInCubic: function (t) { return t * t * t; },\n            easeOutCubic: function (t) { return (--t) * t * t + 1; },\n            easeInOutCubic: function (t) { return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1; },\n            easeInQuart: function (t) { return t * t * t * t; },\n            easeOutQuart: function (t) { return 1 - (--t) * t * t * t; },\n            easeInOutQuart: function (t) { return t < 0.5 ? 8 * t  * t  * t * t : 1 - 8 * (--t) * t * t * t; },\n            easeInQuint: function (t) { return t * t * t * t * t; },\n            easeOutQuint: function (t) { return 1 + (--t) * t *  t * t * t; },\n            easeInOutQuint: function (t) { return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t; }\n        };\n        self.easing = function (t, b, c, d) {\n            return c * self.easingFunctions[self.attributes.touchEasingMethod](t / d) + b;\n        };\n        self.calculatePPSTimed = function () {\n            self.xPPST = -((self.touchDelta.x - self.touchSigmaTimed.x) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.yPPST = -((self.touchDelta.y - self.touchSigmaTimed.y) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.touchSigmaTimed = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.calculatePPS = function () {\n            self.xPPS = -((self.touchDelta.x - self.touchSigma.x) / (self.touchDelta.t - self.touchSigma.t));\n            self.yPPS = -((self.touchDelta.y - self.touchSigma.y) / (self.touchDelta.t - self.touchSigma.t));\n            self.touchSigma = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.touchEndAnimation = function () {\n            if (!self.canvas || !self.scrollBox.scrollTo) { return requestAnimationFrame(self.touchEndAnimation); }\n            var n = performance.now(),\n                d = self.attributes.touchReleaseAnimationDurationMs,\n                t;\n            t = n - self.touchDelta.t;\n            self.animationFrames += 1;\n            self.scrollAnimation.x = self.easing(t, self.touchDelta.scrollLeft, self.touchAnimateTo.x, d);\n            self.scrollAnimation.y = self.easing(t, self.touchDelta.scrollTop, self.touchAnimateTo.y, d);\n            if (t > d || (self.scrollAnimation.y === self.scrollBox.scrollTop\n                    && self.scrollAnimation.x === self.scrollBox.scrollLeft) || self.stopAnimation) {\n                return;\n            }\n            self.scrollBox.scrollTo(self.scrollAnimation.x, self.scrollAnimation.y);\n            requestAnimationFrame(self.touchEndAnimation);\n        };\n        self.touchEditCell = function (cell) {\n            self.beginEditAt(cell.columnIndex, cell.rowIndex);\n        };\n        self.touchCell = function (e) {\n            return function () {\n                clearInterval(self.calculatePPSTimer);\n                var i, pos = self.getTouchPos(e);\n                if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone) {\n                    i = self.getCellAt(pos.x, pos.y);\n                    if (!i) { return; }\n                    if (self.touchingCell && self.touchingCell.rowIndex === i.rowIndex\n                            && self.touchingCell.columnIndex === i.columnIndex) {\n                        self.touchEditCell(i);\n                        return;\n                    }\n                    if (self.input) {\n                        self.endEdit();\n                    }\n                    self.touchingCell = i;\n                    self.selectArea({\n                        top: i.rowIndex,\n                        bottom: i.rowIndex,\n                        left: i.columnIndex,\n                        right: i.columnIndex\n                    });\n                    self.draw(true);\n                }\n            };\n        };\n        self.touchstart = function (e) {\n            if (self.dispatchEvent('touchstart', {NativeEvent: e})) { return; }\n            self.disposeContextMenu();\n            clearInterval(self.calculatePPSTimer);\n            clearTimeout(self.touchContextTimeout);\n            self.touchStartEvent = e;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (e.changedTouches[0]) {\n                self.touchStart = self.getTouchPos(e);\n            }\n            if (e.touches.length === 1 && e.changedTouches[0] && !self.zoomAltered) {\n                self.touchLength = 1;\n                self.touchStart = self.touchStart || self.touchStart1;\n                self.touchScrollStart = {\n                    x: self.scrollBox.scrollLeft,\n                    y: self.scrollBox.scrollTop,\n                    t: performance.now()\n                };\n                self.touchDelta = {\n                    x: 0,\n                    y: 0,\n                    scrollLeft: self.scrollBox.scrollLeft,\n                    scrollTop: self.scrollBox.scrollTop,\n                    t: self.touchScrollStart.t\n                };\n                self.touchSigma = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchSigmaTimed = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchContextTimeout = setTimeout(function () {\n                    self.contextmenuEvent(e, self.touchStart);\n                }, self.attributes.touchContextMenuTimeMs);\n                self.calculatePPSTimer = setInterval(self.calculatePPSTimed, touchTimerMs);\n                self.startingCell = self.getCellAt(self.touchStart.x, self.touchStart.y, true);\n                if (self.startingCell && (self.startingCell.isGrid || ['tree', 'inherit'].indexOf(self.startingCell.context) !== -1)) {\n                    self.hasFocus = false;\n                    return;\n                }\n                self.hasFocus = true;\n                if (self.startingCell.isHeader) {\n                    if (self.startingCell.isRowHeader) {\n                        self.selectArea({\n                            top: self.startingCell.rowIndex,\n                            bottom: self.startingCell.rowIndex,\n                            left: 0,\n                            right: self.getVisibleSchema().length - 1,\n                        });\n                        self.draw(true);\n                    } else if (self.startingCell.isColumnHeader) {\n                        if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                            if (self.orderBy === self.startingCell.header.name) {\n                                self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                            } else {\n                                self.orderDirection = 'asc';\n                            }\n                            self.order(self.startingCell.header.name, self.orderDirection);\n                        }\n                        if (self.attributes.columnHeaderClickBehavior === 'select') {\n                            self.selectArea({\n                                top: 0,\n                                bottom: self.data.length - 1,\n                                left: self.startingCell.columnIndex,\n                                right: self.startingCell.columnIndex,\n                            });\n                            self.draw(true);\n                        }\n                    }\n                    self.touchEndEvents(e);\n                    return;\n                }\n            }\n            if (self.zoomAltered) { return; }\n            document.body.addEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.addEventListener('touchend', self.touchend, false);\n            document.body.addEventListener('touchcancel', self.touchcancel, false);\n            self.draw(true);\n        };\n        self.touchSelect = function (cell, handleType) {\n            if (cell.rowIndex === undefined || cell.columnIndex === undefined) { return; }\n            self.touchSelecting = true;\n            var bounds = self.getSelectionBounds();\n            if (handleType === 'selection-handle-bl'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex <= bounds.right) {\n                bounds.bottom = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tl'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex <= bounds.right) {\n                bounds.top = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tr'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex >= bounds.left) {\n                bounds.top = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            } else if (handleType === 'selection-handle-br'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex >= bounds.left) {\n                bounds.bottom = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            }\n            if (self.attributes.selectionMode === 'row' || cell.rowIndex === -1) {\n                bounds.left = 0;\n                bounds.right = self.getSchema().length - 1;\n            } else {\n                bounds.left = Math.max(0, bounds.left);\n            }\n            self.selectArea(bounds);\n            self.draw(true);\n        };\n        self.touchmove = function (e) {\n            var ch, rw, rScrollZone, lScrollZone, bScrollZone, tScrollZone, sbw, t1, t2;\n            if (self.dispatchEvent('touchmove', {NativeEvent: e})) { return; }\n            clearTimeout(touchScrollTimeout);\n            if (e.changedTouches[0]) {\n                self.touchPosition = self.getTouchPos(e);\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = self.getTouchPos(e, 1);\n            }\n            if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) > self.attributes.touchDeadZone) {\n                clearTimeout(self.touchContextTimeout);\n            }\n            if (e.touches.length === 2 && self.touchPosition && self.touchPosition1) {\n                t1 = self.touchPosition.y;\n                t2 = self.touchPosition1.y;\n                if (!self.zoomDeltaStart) {\n                    self.zoomDeltaStart = Math.abs(t1 - t2);\n                    self.startScale = self.scale;\n                }\n                self.touchLength = 2;\n                self.scaleDelta = self.zoomDeltaStart - Math.abs(t1 - t2);\n                self.scale = self.startScale - (self.scaleDelta * self.attributes.touchZoomSensitivity);\n                self.scale = Math.min(Math.max(self.scale, self.attributes.touchZoomMin), self.attributes.touchZoomMax);\n                self.zoomAltered = true;\n                self.resize(true);\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.zoomAltered) { return; }\n            self.touchLength = 1;\n            self.touchPosition = self.touchPosition || self.touchPosition1;\n            ch = self.getColumnHeaderCellHeight();\n            rw = self.getRowHeaderCellWidth();\n            rScrollZone = self.width - self.style.scrollBarWidth - self.touchPosition.x < self.attributes.selectionScrollZone;\n            lScrollZone = self.touchPosition.x - rw < self.attributes.selectionScrollZone;\n            bScrollZone = self.height - self.style.scrollBarWidth - self.touchPosition.y < self.attributes.selectionScrollZone;\n            tScrollZone = self.touchPosition.y - ch < self.attributes.selectionScrollZone;\n            sbw = self.style.scrollBarWidth;\n            function touchScroll() {\n                var x = self.scrollBox.scrollLeft,\n                    y = self.scrollBox.scrollTop;\n                x += (rScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y += (bScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y -= (tScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                x -= (lScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                self.scrollBox.scrollTo(x, y);\n                touchScrollTimeout = setTimeout(touchScroll, self.attributes.scrollRepeatRate);\n            }\n            e.stopPropagation();\n            self.touchDelta = {\n                x: self.touchPosition.x - self.touchStart.x,\n                y: self.touchPosition.y - self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: performance.now()\n            };\n            self.currentCell = self.getCellAt(self.touchPosition.x, self.touchPosition.y);\n            self.calculatePPS();\n            self.touchDuration = performance.now() - self.touchScrollStart.t;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            if (self.touchSelecting && (rScrollZone || lScrollZone || tScrollZone || bScrollZone)) {\n                touchScroll();\n            }\n            if (/vertical-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollTop = self.scrollBox.scrollHeight\n                    * ((self.touchPosition.y - ch - sbw) / (self.scrollBox.height - sbw - ch));\n                return;\n            }\n            if (/horizontal-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollLeft = self.scrollBox.scrollWidth\n                    * ((self.touchPosition.x - rw - sbw) / (self.scrollBox.width - sbw - rw));\n                return;\n            }\n            if (/selection-handle-/.test(self.startingCell.style)) {\n                self.touchSelect(self.currentCell, self.startingCell.style);\n                return;\n            }\n            self.scrollBox.scrollTo(self.touchScrollStart.x - self.touchDelta.x,\n                self.touchScrollStart.y - self.touchDelta.y);\n            self.draw(true);\n        };\n        self.touchEndEvents = function (e) {\n            self.zoomDeltaStart = undefined;\n            self.touchSelecting = false;\n            clearInterval(self.touchScrollTimeout);\n            clearInterval(self.touchContextTimeout);\n            clearInterval(self.calculatePPSTimer);\n            e.stopPropagation();\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n        };\n        self.touchend = function (e) {\n            if (self.dispatchEvent('touchend', {NativeEvent: e})) { return; }\n            self.zoomDeltaStart = undefined;\n            if (e.changedTouches[0]) {\n                self.touchPosition = undefined;\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = undefined;\n            }\n            if (self.zoomAltered) {\n                if (e.touches.length === 0) {\n                    self.zoomAltered = false;\n                }\n                return;\n            }\n            var dz = Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone;\n            if (isNaN(self.xPPS)) {\n                self.xPPS = 0;\n            }\n            if (isNaN(self.yPPS)) {\n                self.yPPS = 0;\n            }\n            if (isNaN(self.xPPST)) {\n                self.xPPST = 0;\n            }\n            if (isNaN(self.yPPST)) {\n                self.yPPST = 0;\n            }\n            self.touchAnimateTo.x = self.xPPS * self.attributes.touchReleaseAcceleration;\n            self.touchAnimateTo.y = self.yPPS * self.attributes.touchReleaseAcceleration;\n            self.calculatePPSTimed();\n            if (dz && !self.contextMenu) {\n                self.touchCell(self.touchStartEvent)();\n            } else if (self.animationFrames === 0\n                    && (Math.abs(self.xPPST) > self.attributes.scrollAnimationPPSThreshold\n                        || Math.abs(self.yPPST) > self.attributes.scrollAnimationPPSThreshold)\n                    && !/-scroll-/.test(self.startingCell.style)\n                    && !dz) {\n                self.stopAnimation = false;\n                self.touchEndAnimation();\n            }\n            self.touchEndEvents(e);\n        };\n        self.touchcancel = function (e) {\n            if (self.dispatchEvent('touchcancel', {NativeEvent: e})) { return; }\n            self.touchEndEvents(e);\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/touch.js\n// module id = 5\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals HTMLElement: false, Reflect: false, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self, ctor) {\n        self.scale = 1;\n        self.orders = {\n            rows: [],\n            columns: []\n        };\n        self.visibleRowHeights = [];\n        self.hasFocus = false;\n        self.activeCell = {\n            columnIndex: 0,\n            rowIndex: 0\n        };\n        self.storageName = 'canvasDataGrid';\n        self.invalidSearchExpClass = 'canvas-datagrid-invalid-search-regExp';\n        self.localStyleLibraryStorageKey = 'canvas-datagrid-user-style-library';\n        self.uniqueId = '_canvasDataGridUniqueId';\n        self.orderBy = self.uniqueId;\n        self.orderDirection = 'asc';\n        self.columnFilters = {};\n        self.filters = {};\n        self.frozenRow = 0;\n        self.frozenColumn = 0;\n        self.ellipsisCache = {};\n        self.scrollBox = {};\n        self.visibleRows = [];\n        self.sizes = {\n            rows: {},\n            columns: {},\n            trees: {}\n        };\n        self.currentFilter = function () {\n            return true;\n        };\n        self.selections = [];\n        self.hovers = {};\n        self.attributes = {};\n        self.style = {};\n        self.formatters = {};\n        self.sorters = {};\n        self.schemaHashes = {};\n        self.events = {};\n        self.uId = 0;\n        self.changes = [];\n        self.scrollIndexTop = 0;\n        self.scrollPixelTop = 0;\n        self.scrollIndexLeft = 0;\n        self.scrollPixelLeft = 0;\n        self.childGrids = {};\n        self.openChildren = {};\n        self.scrollModes = [\n            'vertical-scroll-box',\n            'vertical-scroll-top',\n            'vertical-scroll-bottom',\n            'horizontal-scroll-box',\n            'horizontal-scroll-right',\n            'horizontal-scroll-left'\n        ];\n        self.componentL1Events = {};\n        self.eventNames = ['afterdraw', 'afterrendercell', 'attributechanged', 'beforebeginedit',\n            'beforecreatecellgrid', 'beforedraw', 'beforeendedit', 'beforerendercell', 'beforerendercellgrid',\n            'beginedit', 'cellmouseout', 'cellmouseover', 'click', 'collapsetree', 'contextmenu', 'copy',\n            'datachanged', 'dblclick', 'endedit', 'expandtree', 'formatcellvalue', 'keydown', 'keypress',\n            'keyup', 'mousedown', 'mousemove', 'mouseup', 'newrow', 'ordercolumn', 'rendercell', 'rendercellgrid',\n            'renderorderbyarrow', 'rendertext', 'rendertreearrow', 'reorder', 'reordering', 'resize',\n            'resizecolumn', 'resizerow', 'schemachanged', 'scroll', 'selectionchanged', 'stylechanged',\n            'touchcancel', 'touchend', 'touchmove', 'touchstart', 'wheel'];\n        self.mouse = { x: 0, y: 0};\n        self.getSelectedData = function (expandToRow) {\n            var d = [], s = expandToRow ? self.getSchema() : self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    if (col === -1 || !s[col]) { return; }\n                    d[index][s[col].name] = self.data[index][s[col].name];\n                });\n            });\n            return d;\n        };\n        self.fillArray = function (low, high, step, def) {\n            step = step || 1;\n            var i = [], x;\n            for (x = low; x <= high; x += step) {\n                i[x] = def === undefined ? x : (typeof def === 'function' ? def(x) : def);\n            }\n            return i;\n        };\n        self.getColumnHeaderCellHeight = function () {\n            if (!self.attributes.showColumnHeaders) { return 0; }\n            return ((self.sizes.rows[-1] || self.style.columnHeaderCellHeight) * self.scale);\n        };\n        self.getRowHeaderCellWidth = function () {\n            if (!self.attributes.showRowHeaders) { return 0; }\n            return (self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth) * self.scale;\n        };\n        self.setStorageData = function () {\n            if (!self.attributes.saveAppearance) { return; }\n            localStorage.setItem(self.storageName + '-' + self.attributes.name, JSON.stringify({\n                sizes: {\n                    rows: self.sizes.rows,\n                    columns: self.sizes.columns\n                },\n                orders: {\n                    rows: self.orders.rows,\n                    columns: self.orders.columns\n                },\n                orderBy: self.orderBy,\n                orderDirection: self.orderDirection\n            }));\n        };\n        self.getSchema = function () {\n            return self.schema || self.tempSchema;\n        };\n        self.createColumnOrders = function () {\n            var s = self.getSchema();\n            self.orders.columns = self.fillArray(0, s.length - 1);\n        };\n        self.createRowOrders = function () {\n            self.orders.rows = self.fillArray(0, self.data.length - 1);\n        };\n        self.getVisibleSchema = function () {\n            return self.getSchema().filter(function (col) {\n                return !col.hidden && col.name !== self.uniqueId;\n            });\n        };\n        self.applyDefaultValue = function (row, header) {\n            var d = header.defaultValue || '';\n            if (typeof d === 'function') {\n                d = d.apply(self.intf, [header]);\n            }\n            row[header.name] = d;\n        };\n        self.createNewRowData = function () {\n            self.newRow = {};\n            self.newRow[self.uniqueId] = self.uId;\n            self.uId += 1;\n            self.getSchema().forEach(function forEachHeader(header) {\n                self.applyDefaultValue(self.newRow, header);\n            });\n        };\n        self.getSchemaNameHash = function (key) {\n            var n = 0;\n            while (self.schemaHashes[key]) {\n                n += 1;\n                key = key + n;\n            }\n            return key;\n        };\n        self.filter = function (type) {\n            var f = self.filters[type];\n            if (!f && type !== undefined) {\n                console.warn('Cannot find filter for type %s, falling back to substring match.', type);\n                f = self.filters.string;\n            }\n            return f;\n        };\n        self.getBestGuessDataType = function (columnName) {\n            var t, x, l = self.data.length;\n            for (x = 0; x < l; x += 1) {\n                if ([null, undefined].indexOf(self.data[x][columnName]) !== -1) {\n                    t = typeof self.data[x];\n                    return t === 'object' ? 'string' : t;\n                }\n            }\n            return 'string';\n        };\n        self.drawChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].draw();\n            });\n        };\n        self.resizeChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].resize();\n            });\n        };\n        self.autoScrollZone = function (e, x, y, ctrl) {\n            var setTimer,\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight();\n            if (x > self.width - self.attributes.selectionScrollZone && x < self.width) {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y > self.height - self.attributes.selectionScrollZone && y < self.height) {\n                self.scrollBox.scrollTop += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (x - self.attributes.selectionScrollZone - rowHeaderCellWidth < 0) {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y - self.attributes.selectionScrollZone - columnHeaderCellHeight < 0) {\n                self.scrollBox.scrollTop -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (setTimer && !ctrl && self.currentCell && self.currentCell.columnIndex !== -1) {\n                self.scrollTimer = setTimeout(self.mousemove, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.refreshFromOrigialData = function () {\n            self.data = self.originalData.filter(function (row) {\n                return true;\n            });\n        };\n        self.validateColumn = function (c, s) {\n            if (!c.name) {\n                throw new Error('A column must contain at least a name.');\n            }\n            if (s.filter(function (i) { return i.name === c.name; }).length > 0) {\n                throw new Error('A column with the name '\n                    + c.name + ' already exists and cannot be added again.');\n            }\n            return true;\n        };\n        self.setDefaults = function (obj1, obj2, key, def) {\n            obj1[key] = obj2[key] === undefined ? def : obj2[key];\n        };\n        self.setAttributes = function () {\n            self.defaults.attributes.forEach(function eachAttribute(i) {\n                self.setDefaults(self.attributes, self.args, i[0], i[1]);\n            });\n        };\n        self.setStyle = function () {\n            self.defaults.styles.forEach(function eachStyle(i) {\n                self.setDefaults(self.style, self.args.style || {}, i[0], i[1]);\n            });\n        };\n        self.autosize = function (colName) {\n            self.getVisibleSchema().forEach(function (col) {\n                if (col.name === colName || colName === undefined) {\n                    self.fitColumnToValues(col.name);\n                }\n            });\n            self.fitColumnToValues('cornerCell');\n        };\n        self.dispose = function () {\n            if (!self.isChildGrid && self.canvas && self.canvas.parentNode) {\n                self.canvas.parentNode.removeChild(self.canvas);\n            }\n            self.eventParent.removeEventListener('mouseup', self.mouseup, false);\n            self.eventParent.removeEventListener('mousedown', self.mousedown, false);\n            self.eventParent.removeEventListener('dblclick', self.dblclick, false);\n            self.eventParent.removeEventListener('click', self.click, false);\n            self.eventParent.removeEventListener('mousemove', self.mousemove);\n            self.eventParent.removeEventListener('wheel', self.scrollWheel, false);\n            self.canvas.removeEventListener('contextmenu', self.contextmenu, false);\n            self.canvas.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('keypress', self.keypress, false);\n            self.controlInput.removeEventListener('keyup', self.keyup, false);\n            self.controlInput.removeEventListener('keydown', self.keydown, false);\n            window.removeEventListener('resize', self.resize);\n            if (self.observer && self.observer.disconnect) {\n                self.observer.disconnect();\n            }\n        };\n        self.tryLoadStoredOrders = function () {\n            var s;\n            if (self.storedSettings\n                    && typeof self.storedSettings.orders === 'object'\n                    && self.storedSettings.orders !== null) {\n                if (self.storedSettings.orders.rows.length >= self.data.length) {\n                    self.orders.rows = self.storedSettings.orders.rows;\n                }\n                s = self.getSchema();\n                if (self.storedSettings.orders.columns.length === s.length) {\n                    self.orders.columns = self.storedSettings.orders.columns;\n                }\n                self.orderBy = self.storedSettings.orderBy === undefined\n                    ? self.uniqueId : self.storedSettings.orderBy;\n                self.orderDirection = self.storedSettings.orderDirection === undefined\n                    ? self.uniqueId : self.storedSettings.orderDirection;\n                if (self.orderBy !== self.uniqueId && self.getHeaderByName(self.orderBy) && self.orderDirection) {\n                    self.order(self.orderBy, self.orderDirection);\n                }\n            }\n        };\n        self.getDomRoot = function () {\n            return self.shadowRoot ? self.shadowRoot.host : self.parentNode;\n        };\n        self.getFontName = function (fontStyle) {\n            return fontStyle.replace(/\\d+\\.?\\d*px/, '');\n        };\n        self.getFontHeight = function (fontStyle) {\n            return parseFloat(fontStyle, 10);\n        };\n        self.parseStyleValue = function (key) {\n            if (/Font/.test(key)) {\n                self.style[key + 'Height'] = self.getFontHeight(self.style[key]);\n                self.style[key + 'Name'] = self.getFontName(self.style[key]);\n                return;\n            }\n            if (key === 'moveOverlayBorderSegments') {\n                self.style[key] = self.style[key].split(',')\n                    .map(function (i) { return parseInt(i, 10); });\n            }\n        };\n        self.initProp = function (propName) {\n            if (!self.args[propName]) { return; }\n            Object.keys(self.args[propName]).forEach(function (key) {\n                self[propName][key] = self.args[propName][key];\n            });\n        };\n        self.getStyleProperty = function (key) {\n            if (self.styleKeys.indexOf(key) === -1) {\n                return self.parentNodeStyle[key];\n            }\n            return self.style[key];\n        };\n        self.setStyleProperty = function (key, value, supressDrawAndEvent) {\n            if (self.styleKeys.indexOf(key) === -1) {\n                self.parentNodeStyle[key] = value;\n            } else {\n                self.parseStyleValue(value);\n                self.style[key] = value;\n            }\n            if (!supressDrawAndEvent) {\n                self.draw(true);\n                self.dispatchEvent('stylechanged', {name: 'style', value: value});\n            }\n        };\n        self.init = function () {\n            if (self.initialized) { return; }\n            var publicStyleKeyIntf = {};\n            self.setAttributes();\n            self.setStyle();\n            self.initScrollBox();\n            self.setDom();\n            self.type = 'canvas-datagrid';\n            self.initialized = true;\n            self.ie = /Trident/.test(window.navigator.userAgent);\n            self.edge = /Edge/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.moz = /Gecko/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.mobile = /Mobile/i.test(window.navigator.userAgent);\n            self.cursorGrab = 'grab';\n            self.cursorGrabing = 'grabbing';\n            self.cursorGrab = self.webKit ? '-webkit-grab' : self.cursorGrab;\n            self.cursorGrabing = self.moz ? '-webkit-grabbing' : self.cursorGrabbing;\n            self.pointerLockPosition = {x: 0, y: 0};\n            Object.keys(self.style).forEach(self.parseStyleValue);\n            self.intf.moveSelection = self.moveSelection;\n            self.intf.moveTo = self.moveTo;\n            self.intf.type = self.type;\n            self.intf.addEventListener = self.addEventListener;\n            self.intf.removeEventListener = self.removeEventListener;\n            self.intf.dispatchEvent = self.dispatchEvent;\n            /**\n             * Releases grid resources and removes grid elements.\n             * @memberof canvasDatagrid\n             * @name dispose\n             * @method\n             */\n            self.intf.dispose = self.dispose;\n            /**\n             * Appends the grid to another element later.  Not implemented.\n             * @memberof canvasDatagrid\n             * @name appendTo\n             * @method\n             * @param {number} el The element to append the grid to.\n             */\n            self.intf.appendTo = self.appendTo;\n            self.intf.filters = self.filters;\n            self.intf.sorters = self.sorters;\n            self.intf.autosize = self.autosize;\n            self.intf.beginEditAt = self.beginEditAt;\n            self.intf.endEdit = self.endEdit;\n            self.intf.setActiveCell = self.setActiveCell;\n            self.intf.forEachSelectedCell = self.forEachSelectedCell;\n            self.intf.scrollIntoView = self.scrollIntoView;\n            self.intf.clearChangeLog = self.clearChangeLog;\n            self.intf.gotoCell = self.gotoCell;\n            self.intf.gotoRow = self.gotoRow;\n            self.intf.getHeaderByName = self.getHeaderByName;\n            self.intf.findColumnScrollLeft = self.findColumnScrollLeft;\n            self.intf.findRowScrollTop = self.findRowScrollTop;\n            self.intf.fitColumnToValues = self.fitColumnToValues;\n            self.intf.findColumnMaxTextLength = self.findColumnMaxTextLength;\n            self.intf.disposeContextMenu = self.disposeContextMenu;\n            self.intf.getCellAt = self.getCellAt;\n            self.intf.isCellVisible = self.isCellVisible;\n            self.intf.order = self.order;\n            self.intf.draw = self.draw;\n            self.intf.selectArea = self.selectArea;\n            self.intf.clipElement = self.clipElement;\n            self.intf.getSchemaFromData = self.getSchemaFromData;\n            self.intf.setFilter = self.setFilter;\n            self.intf.selectRow = self.selectRow;\n            self.intf.parentGrid = self.parentGrid;\n            self.intf.toggleTree = self.toggleTree;\n            self.intf.expandTree = self.expandTree;\n            self.intf.collapseTree = self.collapseTree;\n            self.intf.canvas = self.canvas;\n            self.intf.context = self.ctx;\n            self.intf.insertRow = self.insertRow;\n            self.intf.deleteRow = self.deleteRow;\n            self.intf.addRow = self.addRow;\n            self.intf.insertColumn = self.insertColumn;\n            self.intf.deleteColumn = self.deleteColumn;\n            self.intf.addColumn = self.addColumn;\n            self.intf.getClippingRect = self.getClippingRect;\n            self.intf.setRowHeight = self.setRowHeight;\n            self.intf.setColumnWidth = self.setColumnWidth;\n            self.intf.resetColumnWidths = self.resetColumnWidths;\n            self.intf.resetRowHeights = self.resetRowHeights;\n            self.intf.resize = self.resize;\n            self.intf.selectColumn = self.selectColumn;\n            self.intf.selectRow = self.selectRow;\n            self.intf.selectAll = self.selectAll;\n            self.intf.selectNone = self.selectNone;\n            self.intf.drawChildGrids = self.drawChildGrids;\n            self.intf.assertPxColor = self.assertPxColor;\n            self.intf.clearPxColorAssertions = self.clearPxColorAssertions;\n            self.intf.integerToAlpha = self.integerToAlpha;\n            self.intf.copy = self.copy;\n            self.intf.setStyleProperty = self.setStyleProperty;\n            Object.defineProperty(self.intf, 'defaults', {\n                get: function () {\n                    return {\n                        styles: self.defaults.styles.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {}),\n                        attributes: self.defaults.attributes.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {})\n                    };\n                }\n            });\n            self.styleKeys = Object.keys(self.intf.defaults.styles);\n            self.DOMStyles = window.getComputedStyle(document.body, null);\n            self.intf.setStyleProperty('width', '100%');\n            self.intf.setStyleProperty('height', '100%');\n            Object.keys(self.DOMStyles).concat(Object.keys(self.style)).forEach(function (key) {\n                // unless this line is here, Object.keys() will not work on <instance>.style\n                publicStyleKeyIntf[key] = undefined;\n                Object.defineProperty(publicStyleKeyIntf, key, {\n                    get: function () {\n                        return self.getStyleProperty(key);\n                    },\n                    set: function (value) {\n                        self.setStyleProperty(key, value);\n                    }\n                });\n            });\n            Object.defineProperty(self.intf, 'shadowRoot', {\n                get: function () {\n                    return self.shadowRoot;\n                }\n            });\n            Object.defineProperty(self.intf, 'activeCell', {\n                get: function () {\n                    return self.activeCell;\n                }\n            });\n            Object.defineProperty(self.intf, 'hasFocus', {\n                get: function () {\n                    return self.hasFocus;\n                }\n            });\n            Object.defineProperty(self.intf, 'style', {\n                get: function () {\n                    return publicStyleKeyIntf;\n                },\n                set: function (valueObject) {\n                    Object.keys(valueObject).forEach(function (key) {\n                        self.setStyleProperty(key, valueObject[key], true);\n                    });\n                    self.draw(true);\n                    self.dispatchEvent('stylechanged', {name: 'style', value: valueObject});\n                }\n            });\n            Object.defineProperty(self.intf, 'attributes', { value: {}});\n            Object.keys(self.attributes).forEach(function (key) {\n                Object.defineProperty(self.intf.attributes, key, {\n                    get: function () {\n                        return self.attributes[key];\n                    },\n                    set: function (value) {\n                        self.attributes[key] = value;\n                        self.draw(true);\n                        self.dispatchEvent('attributechanged', {name: key, value: value[key]});\n                    }\n                });\n            });\n            self.filters.string = function (value, filterFor) {\n                value = String(value);\n                var filterRegExp,\n                    regEnd = /\\/(i|g|m)*$/,\n                    pattern = regEnd.exec(filterFor),\n                    flags = pattern ? pattern[0].substring(1) : '',\n                    flagLength = flags.length;\n                self.invalidFilterRegEx = undefined;\n                if (filterFor.substring(0, 1) === '/' && pattern) {\n                    try {\n                        filterRegExp = new RegExp(filterFor.substring(1, filterFor.length - (flagLength + 1)), flags);\n                    } catch (e) {\n                        self.invalidFilterRegEx = e;\n                        return;\n                    }\n                    return filterRegExp.test(value);\n                }\n                return value.toString ? value.toString().toLocaleUpperCase()\n                    .indexOf(filterFor.toLocaleUpperCase()) !== -1 : false;\n            };\n            self.filters.number = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                return value === filterFor;\n            };\n            if (self.attributes.name && self.attributes.saveAppearance) {\n                self.storedSettings = localStorage.getItem(self.storageName + '-' + self.attributes.name);\n                if (self.storedSettings) {\n                    try {\n                        self.storedSettings = JSON.parse(self.storedSettings);\n                    } catch (e) {\n                        console.warn('could not read settings from localStore', e);\n                        self.storedSettings = undefined;\n                    }\n                }\n                if (self.storedSettings) {\n                    if (typeof self.storedSettings.sizes === 'object'\n                            && self.storedSettings.sizes !== null) {\n                        self.sizes.rows = self.storedSettings.sizes.rows;\n                        self.sizes.columns = self.storedSettings.sizes.columns;\n                        ['trees', 'columns', 'rows'].forEach(function (i) {\n                            if (!self.sizes[i]) {\n                                self.sizes[i] = {};\n                            }\n                        });\n                    }\n                }\n            }\n            ['formatters', 'filters', 'sorters'].forEach(self.initProp);\n            if (self.args.data) {\n                self.intf.data = self.args.data;\n            }\n            if (!self.data) {\n                self.intf.data = [];\n            }\n            if (self.args.schema) {\n                self.intf.schema = self.args.schema;\n            }\n            if (self.isChildGrid) {\n                requestAnimationFrame(function () { self.resize(true); });\n            } else {\n                self.resize(true);\n            }\n            return self;\n        };\n        /**\n         * Removes focus from the grid.\n         * @memberof canvasDatagrid\n         * @name blur\n         * @method\n         */\n        self.intf.blur = function (e) {\n            self.hasFocus = false;\n        };\n        /**\n         * Focuses on the grid.\n         * @memberof canvasDatagrid\n         * @name focus\n         * @method\n         */\n        self.intf.focus = function () {\n            self.hasFocus = true;\n            self.controlInput.focus();\n        };\n        Object.defineProperty(self.intf, 'height', {\n            get: function () {\n                if (self.shadowRoot) {\n                    return self.shadowRoot.height;\n                }\n                return self.parentNode.height;\n            },\n            set: function (value) {\n                if (self.shadowRoot) {\n                    self.shadowRoot.height = value;\n                } else {\n                    self.parentNode.height = value;\n                }\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'width', {\n            get: function () {\n                if (self.shadowRoot) {\n                    return self.shadowRoot.width;\n                }\n                return self.parentNode.width;\n            },\n            set: function (value) {\n                if (self.shadowRoot) {\n                    self.shadowRoot.width = value;\n                } else {\n                    self.parentNode.width = value;\n                }\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRowHeights', {\n            get: function () {\n                return self.visibleRowHeights;\n            }\n        });\n        Object.defineProperty(self.intf, 'openChildren', {\n            get: function () {\n                return self.openChildren;\n            }\n        });\n        Object.defineProperty(self.intf, 'childGrids', {\n            get: function () {\n                return Object.keys(self.childGrids).map(function (gridId) {\n                    return self.childGrids[gridId];\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'isChildGrid', {\n            get: function () {\n                return self.isChildGrid;\n            }\n        });\n        Object.defineProperty(self.intf, 'parentNode', {\n            get: function () {\n                return self.parentNode;\n            },\n            set: function (value) {\n                if (!self.isChildGrid) {\n                    throw new TypeError('Cannot set property parentNode which has only a getter');\n                }\n                self.parentNode = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetParent', {\n            get: function () {\n                return self.parentNode;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetLeft', {\n            get: function () {\n                return self.parentNode.offsetLeft;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetTop', {\n            get: function () {\n                return self.parentNode.offsetTop;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollHeight', {\n            get: function () {\n                return self.scrollBox.scrollHeight;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollWidth', {\n            get: function () {\n                return self.scrollBox.scrollWidth;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollTop', {\n            get: function () {\n                return self.scrollBox.scrollTop;\n            },\n            set: function (value) {\n                self.scrollBox.scrollTop = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollLeft', {\n            get: function () {\n                return self.scrollBox.scrollLeft;\n            },\n            set: function (value) {\n                self.scrollBox.scrollLeft = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'sizes', {\n            get: function () {\n                return self.sizes;\n            }\n        });\n        Object.defineProperty(self.intf, 'input', {\n            get: function () {\n                return self.input;\n            }\n        });\n        Object.defineProperty(self.intf, 'controlInput', {\n            get: function () {\n                return self.controlInput;\n            }\n        });\n        Object.defineProperty(self.intf, 'currentCell', {\n            get: function () {\n                return self.currentCell;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleCells', {\n            get: function () {\n                return self.visibleCells;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRows', {\n            get: function () {\n                return self.visibleRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'selections', {\n            get: function () {\n                return self.selections;\n            }\n        });\n        Object.defineProperty(self.intf, 'dragMode', {\n            get: function () {\n                return self.dragMode;\n            }\n        });\n        Object.defineProperty(self.intf, 'changes', {\n            get: function () {\n                return self.changes;\n            }\n        });\n        self.intf.formatters = self.formatters;\n        self.normalizeDataset = function (data, callback) {\n            var i, d, max, syncFnInvoked;\n            if (data === null || data === '' || data === undefined) {\n                return callback([]);\n            }\n            if (typeof data === 'string'\n                    || typeof data === 'number'\n                    || typeof data === 'boolean') {\n                data = [{'0': data}];\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if ((!Array.isArray(data[0]) && typeof data[0] === 'object' && data[0] !== null)\n                            || (Array.isArray(data) && data.length === 0)) {\n                return callback(data);\n            }\n            if (typeof data === 'function') {\n                i = data.apply(self.intf, [function (d) {\n                    if (syncFnInvoked) {\n                        console.warn('Detected a callback to the data setter function after the same function already returned a value synchronously.');\n                    }\n                    self.normalizeDataset(d, callback);\n                }]);\n                if (i) {\n                    syncFnInvoked = true;\n                    self.normalizeDataset(i, callback);\n                }\n                return;\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if (Array.isArray(data)) {\n                if (!Array.isArray(data[0])) {\n                    //array of something?  throw it all into 1 row!\n                    data = [data];\n                }\n                // find the longest length\n                max = 0;\n                d = [];\n                data.forEach(function (row) {\n                    max = Math.max(max, row.length);\n                });\n                // map against length indexes\n                data.forEach(function (row, index) {\n                    var x;\n                    d[index] = {};\n                    for (x = 0; x < max; x += 1) {\n                        d[index][x] = row[x];\n                    }\n                });\n                return callback(d);\n            }\n            throw new Error('Unsupported data type.  Must be an array of arrays or an array of objects, function or string.');\n        };\n        self.eventNames.forEach(function (eventName) {\n            Object.defineProperty(self.intf, 'on' + eventName, {\n                get: function () {\n                    return self.componentL1Events[eventName];\n                },\n                set: function (value) {\n                    self.events[eventName] = [];\n                    self.componentL1Events[eventName] = value;\n                    if (!value) { return; }\n                    self.addEventListener(eventName, value);\n                }\n            });\n        });\n        Object.defineProperty(self.intf, 'frozenRow', {\n            get: function () {\n                return self.frozenRow;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.visibleRows.length > val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible rows.');\n                }\n                self.frozenRow = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'frozenColumn', {\n            get: function () {\n                return self.frozenColumn;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.getVisibleSchema().length > val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible columns.');\n                }\n                self.frozenColumn = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollIndexRect', {\n            get: function () {\n                return {\n                    top: self.scrollIndexTop,\n                    right: self.scrollIndexRight,\n                    bottom: self.scrollIndexBottom,\n                    left: self.scrollIndexLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollPixelRect', {\n            get: function () {\n                return {\n                    top: self.scrollPixelTop,\n                    right: self.scrollPixelRight,\n                    bottom: self.scrollPixelBottom,\n                    left: self.scrollPixelLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'selectionBounds', {\n            get: function () {\n                return self.getSelectionBounds();\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedRows', {\n            get: function () {\n                return self.getSelectedData(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedCells', {\n            get: function () {\n                return self.getSelectedData();\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleSchema', {\n            get: function () {\n                return self.getVisibleSchema().map(function eachDataRow(col) {\n                    return col;\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'ctx', {\n            get: function () {\n                return self.ctx;\n            }\n        });\n        Object.defineProperty(self.intf, 'schema', {\n            get: function schemaGetter() {\n                return self.getSchema();\n            },\n            set: function schemaSetter(value) {\n                if (!Array.isArray(value) || typeof value[0] !== 'object') {\n                    throw new Error('Schema must be an array of objects.');\n                }\n                if (value[0].name === undefined) {\n                    throw new Error('Expected schema to contain an object with at least a name property.');\n                }\n                self.schema = value.map(function eachSchemaColumn(column, index) {\n                    column.width = column.width || self.style.cellWidth;\n                    column[self.uniqueId] = self.getSchemaNameHash(column.name);\n                    column.filter = column.filter || self.filter(column.type);\n                    column.type = column.type || 'string';\n                    column.index = index;\n                    column.columnIndex = index;\n                    column.rowIndex = -1;\n                    return column;\n                });\n                self.tempSchema = undefined;\n                self.createNewRowData();\n                self.createColumnOrders();\n                self.tryLoadStoredOrders();\n                self.resize(true);\n                self.dispatchEvent('schemachanged', {schema: self.schema});\n            }\n        });\n        Object.defineProperty(self.intf, 'data', {\n            get: function dataGetter() {\n                return self.data.map(function (row) {\n                    delete row[self.uniqueId];\n                    return row;\n                });\n            },\n            set: function dataSetter(value) {\n                self.normalizeDataset(value, function (d) {\n                    self.originalData = d.map(function eachDataRow(row) {\n                        row[self.uniqueId] = self.uId;\n                        self.uId += 1;\n                        return row;\n                    });\n                    self.changes = [];\n                    //TODO apply filter to incoming dataset\n                    self.data = self.originalData;\n                    if (!self.schema) {\n                        self.tempSchema = self.getSchemaFromData();\n                    }\n                    if (!self.schema && self.data.length === 0) {\n                        self.tempSchema = [{name: ''}];\n                        self.tempSchema[0][self.uniqueId] = self.getSchemaNameHash('');\n                    }\n                    if (self.tempSchema && !self.schema) {\n                        self.createColumnOrders();\n                        self.tryLoadStoredOrders();\n                        self.dispatchEvent('schemachanged', {schema: self.tempSchema});\n                    }\n                    self.createNewRowData();\n                    if (self.attributes.autoResizeColumns && self.data.length > 0\n                            && self.storedSettings === undefined) {\n                        self.autosize();\n                    }\n                    self.fitColumnToValues('cornerCell', true);\n                    self.resize(true);\n                    self.createRowOrders();\n                    self.tryLoadStoredOrders();\n                    self.dispatchEvent('datachanged', {data: self.data});\n                });\n            }\n        });\n        self.initScrollBox = function () {\n            var sHeight = 0,\n                sWidth = 0,\n                scrollTop = 0,\n                scrollLeft = 0,\n                scrollHeight = 0,\n                scrollWidth = 0,\n                scrollBoxHeight = 20,\n                scrollBoxWidth = 20;\n            function setScrollTop(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollTop value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollHeight) {\n                    value = scrollHeight;\n                }\n                if (scrollHeight < 0) {\n                    value = 0;\n                }\n                scrollTop = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            function setScrollLeft(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollLeft value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollWidth) {\n                    value = scrollWidth;\n                }\n                if (scrollWidth < 0) {\n                    value = 0;\n                }\n                scrollLeft = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            self.scrollBox.toString = function () {\n                return '{\"width\": ' + scrollWidth\n                    + ', \"height\": ' + scrollHeight\n                    + ', \"left\": ' + scrollLeft\n                    + ', \"top\": ' + scrollTop + '}';\n            };\n            self.scrollBox.scrollTo = function (x, y, supressDrawEvent) {\n                setScrollLeft(x, true);\n                setScrollTop(y, supressDrawEvent);\n            };\n            Object.defineProperty(self.scrollBox, 'scrollBoxHeight', {\n                get: function () {\n                    return scrollBoxHeight;\n                },\n                set: function (value) {\n                    scrollBoxHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollBoxWidth', {\n                get: function () {\n                    return scrollBoxWidth;\n                },\n                set: function (value) {\n                    scrollBoxWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'height', {\n                get: function () {\n                    return sHeight;\n                },\n                set: function (value) {\n                    if (scrollHeight < value) {\n                        scrollTop = 0;\n                    }\n                    sHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'width', {\n                get: function () {\n                    return sWidth;\n                },\n                set: function (value) {\n                    sWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollTop', {\n                get: function () {\n                    return scrollTop;\n                },\n                set: setScrollTop\n            });\n            Object.defineProperty(self.scrollBox, 'scrollLeft', {\n                get: function () {\n                    return scrollLeft;\n                },\n                set: setScrollLeft\n            });\n            Object.defineProperty(self.scrollBox, 'scrollHeight', {\n                get: function () {\n                    return scrollHeight;\n                },\n                set: function (value) {\n                    if (scrollTop > value) {\n                        scrollTop = Math.max(value, 0);\n                    }\n                    if (scrollHeight < sHeight) {\n                        scrollTop = 0;\n                    }\n                    scrollHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollWidth', {\n                get: function () {\n                    return scrollWidth;\n                },\n                set: function (value) {\n                    if (scrollLeft > value) {\n                        scrollLeft = Math.max(value, 0);\n                    }\n                    scrollWidth = value;\n                }\n            });\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/intf.js\n// module id = 6\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false, Event: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var zIndexTop = 9000, hoverScrollTimeout, autoCompleteContext;\n        function applyContextItemStyle(contextItemContainer) {\n            self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item' + (self.mobile ? '-mobile' : ''));\n            contextItemContainer.addEventListener('mouseover', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n            });\n            contextItemContainer.addEventListener('mouseout', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n            });\n        }\n        function createContextMenu(ev, pos, items, parentContextMenu) {\n            var container = document.createElement('div'),\n                upArrow = document.createElement('div'),\n                downArrow = document.createElement('div'),\n                children = [],\n                selectedIndex = -1,\n                intf = {},\n                rect;\n            if (!Array.isArray(items)) { throw new Error('createContextMenu expects an array.'); }\n            function createItems() {\n                items.forEach(function (item) {\n                    var contextItemContainer = document.createElement('div'),\n                        childMenuArrow;\n                    function removeChildContext(e) {\n                        if (e.relatedTarget === container\n                                || item.contextMenu.container === e.relatedTarget\n                                || childMenuArrow === e.relatedTarget\n                                || (contextItemContainer === e.relatedTarget)\n                                || item.contextMenu.container.contains(e.relatedTarget)\n                                ) { return; }\n                        item.contextMenu.dispose();\n                        children.splice(children.indexOf(item.contextMenu), 1);\n                        item.contextMenu = undefined;\n                        contextItemContainer.removeEventListener('mouseout', removeChildContext);\n                        container.removeEventListener('mouseout', removeChildContext);\n                        contextItemContainer.setAttribute('contextOpen', '0');\n                        contextItemContainer.setAttribute('opening', '0');\n                    }\n                    function contextAddCallback(items) {\n                        // check yet again if the user hasn't moved off\n                        if (contextItemContainer.getAttribute('opening') !== '1' ||\n                                contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        var cPos = contextItemContainer.getBoundingClientRect();\n                        cPos = {\n                            left: cPos.left + self.style.childContextMenuMarginLeft + container.offsetWidth,\n                            top: cPos.top + self.style.childContextMenuMarginTop,\n                            bottom: cPos.bottom,\n                            right: cPos.right\n                        };\n                        item.contextMenu = createContextMenu(ev, cPos, items, intf);\n                        contextItemContainer.setAttribute('contextOpen', '1');\n                        contextItemContainer.addEventListener('mouseout', removeChildContext);\n                        container.addEventListener('mouseout', removeChildContext);\n                        children.push(item.contextMenu);\n                    }\n                    function createChildContext() {\n                        var i;\n                        if (contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        contextItemContainer.setAttribute('opening', '1');\n                        if (typeof item.items === 'function') {\n                            i  = item.items.apply(intf, [function (items) {\n                                contextAddCallback(items);\n                            }]);\n                            if (i !== undefined && Array.isArray(i)) {\n                                contextAddCallback(i);\n                            }\n                            return;\n                        }\n                        contextAddCallback(item.items);\n                    }\n                    function addItem(item) {\n                        function addContent(content) {\n                            if (content === null) { return; }\n                            if (typeof content === 'function') {\n                                return addContent(content(ev));\n                            }\n                            if (typeof content === 'object') {\n                                contextItemContainer.appendChild(content);\n                                return;\n                            }\n                            applyContextItemStyle(contextItemContainer);\n                            contextItemContainer.innerHTML = content;\n                            return;\n                        }\n                        addContent(item.title);\n                        item.contextItemContainer = contextItemContainer;\n                        if ((item.items && item.items.length > 0) || typeof item.items === 'function') {\n                            childMenuArrow = document.createElement('div');\n                            self.createInlineStyle(childMenuArrow, 'canvas-datagrid-context-child-arrow');\n                            childMenuArrow.innerHTML = self.style.childContextMenuArrowHTML;\n                            contextItemContainer.appendChild(childMenuArrow);\n                            contextItemContainer.addEventListener('mouseover', createChildContext);\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                contextItemContainer.setAttribute('opening', '0');\n                            });\n                        }\n                        if (item.click) {\n                            contextItemContainer.addEventListener('click', function (ev) {\n                                item.click.apply(self, [ev]);\n                            });\n                        }\n                    }\n                    addItem(item);\n                    container.appendChild(contextItemContainer);\n                });\n            }\n            function clickIndex(idx) {\n                items[idx].contextItemContainer.dispatchEvent(new Event('click'));\n            }\n            function checkArrowVisibility() {\n                if (container.scrollTop > 0) {\n                    self.parentDOMNode.appendChild(upArrow);\n                } else if (upArrow.parentNode) {\n                    upArrow.parentNode.removeChild(upArrow);\n                }\n                if (container.scrollTop >= container.scrollHeight - container.offsetHeight && downArrow.parentNode) {\n                    downArrow.parentNode.removeChild(downArrow);\n                } else if (container.scrollHeight - container.offsetHeight > 0\n                        && !(container.scrollTop >= container.scrollHeight - container.offsetHeight)) {\n                    self.parentDOMNode.appendChild(downArrow);\n                }\n            }\n            function startHoverScroll(type) {\n                return function t() {\n                    var a = self.attributes.contextHoverScrollAmount;\n                    if (type === 'up' && container.scrollTop === 0) { return; }\n                    if (type === 'down' && container.scrollTop === container.scrollHeight) { return; }\n                    container.scrollTop += (type === 'up' ? -a : a);\n                    hoverScrollTimeout = setTimeout(t, self.attributes.contextHoverScrollRateMs, type);\n                };\n            }\n            function endHoverScroll(type) {\n                return function () {\n                    clearTimeout(hoverScrollTimeout);\n                };\n            }\n            function init() {\n                var loc = {},\n                    s = self.scrollOffset(self.canvas);\n                createItems();\n                self.createInlineStyle(container, 'canvas-datagrid-context-menu' + (self.mobile ? '-mobile' : ''));\n                loc.x = pos.left - s.left;\n                loc.y = pos.top - s.top;\n                loc.height = 0;\n                zIndexTop += 1;\n                container.style.position = 'absolute';\n                upArrow.style.color = self.style.contextMenuArrowColor;\n                downArrow.style.color = self.style.contextMenuArrowColor;\n                [upArrow, downArrow].forEach(function (el) {\n                    el.style.textAlign = 'center';\n                    el.style.position = 'absolute';\n                    el.style.zIndex = zIndexTop + 1;\n                });\n                container.style.zIndex = zIndexTop;\n                if (parentContextMenu && parentContextMenu.inputDropdown) {\n                    container.style.maxHeight = window.innerHeight - loc.y - self.style.autocompleteBottomMargin + 'px';\n                    container.style.minWidth = pos.width + 'px';\n                    loc.y += pos.height;\n                }\n                if (self.mobile) {\n                    container.style.width = pos.width + 'px';\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                container.addEventListener('scroll', checkArrowVisibility);\n                container.addEventListener('wheel', function (e) {\n                    if (self.hasFocus) {\n                        container.scrollTop += e.deltaY;\n                        container.scrollLeft += e.deltaX;\n                    }\n                    checkArrowVisibility();\n                });\n                upArrow.innerHTML = self.style.contextMenuArrowUpHTML;\n                downArrow.innerHTML = self.style.contextMenuArrowDownHTML;\n                container.appendChild(upArrow);\n                document.body.appendChild(downArrow);\n                document.body.appendChild(container);\n                rect = container.getBoundingClientRect();\n                if (rect.bottom > window.innerHeight && !(parentContextMenu && parentContextMenu.inputDropdown)) {\n                    loc.y = window.innerHeight - container.offsetHeight;\n                    if (loc.y < 0) { loc.y = 0; }\n                    if (container.offsetHeight > window.innerHeight - self.style.contextMenuWindowMargin) {\n                        container.style.height = window.innerHeight - self.style.contextMenuWindowMargin + 'px';\n                        loc.y += self.style.contextMenuWindowMargin * 0.5;\n                    }\n                }\n                if (rect.right > window.innerWidth) {\n                    if (parentContextMenu && parentContextMenu.container) {\n                        loc.x = parentContextMenu.container.offsetLeft - container.offsetWidth;\n                    } else {\n                        loc.x = window.innerWidth - container.offsetWidth;\n                    }\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                rect = container.getBoundingClientRect();\n                upArrow.style.top = rect.top + 'px';\n                downArrow.style.top = rect.top + rect.height - downArrow.offsetHeight + 'px';\n                upArrow.style.left = rect.left + 'px';\n                downArrow.style.left = rect.left + 'px';\n                downArrow.style.width = container.offsetWidth + 'px';\n                upArrow.style.width = container.offsetWidth + 'px';\n                downArrow.addEventListener('mouseover', startHoverScroll('down'));\n                downArrow.addEventListener('mouseout', endHoverScroll('down'));\n                upArrow.addEventListener('mouseover', startHoverScroll('up'));\n                upArrow.addEventListener('mouseout', endHoverScroll('up'));\n                checkArrowVisibility();\n            }\n            intf.parentGrid = self.intf;\n            intf.parentContextMenu = parentContextMenu;\n            intf.container = container;\n            init();\n            intf.clickIndex = clickIndex;\n            intf.rect = rect;\n            intf.items = items;\n            intf.upArrow = upArrow;\n            intf.downArrow = downArrow;\n            intf.dispose = function () {\n                clearTimeout(hoverScrollTimeout);\n                children.forEach(function (c) {\n                    c.dispose();\n                });\n                [downArrow, upArrow, container].forEach(function (el) {\n                    if (el.parentNode) { el.parentNode.removeChild(el); }\n                });\n            };\n            Object.defineProperty(intf, 'selectedIndex', {\n                get: function () {\n                    return selectedIndex;\n                },\n                set: function (value) {\n                    if (typeof value !== 'number' || isNaN(value || !isFinite(value))) {\n                        throw new Error('Context menu selected index must be a sane number.');\n                    }\n                    selectedIndex = value;\n                    if (selectedIndex > items.length - 1) {\n                        selectedIndex = items.length - 1;\n                    }\n                    if (selectedIndex < 0) {\n                        selectedIndex = 0;\n                    }\n                    items.forEach(function (item, index) {\n                        if (index === selectedIndex) {\n                            return self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                        }\n                        self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item');\n                    });\n                }\n            });\n            return intf;\n        }\n        function createFilterContextMenuItems(e) {\n            var filterContainer = document.createElement('div'),\n                filterLabel = document.createElement('div'),\n                filterAutoCompleteButton = document.createElement('button'),\n                filterInput = document.createElement('input'),\n                n = e.cell && e.cell.header ? e.cell.header.title || e.cell.header.name : '',\n                autoCompleteItems,\n                iRect;\n            function checkRegExpErrorState() {\n                filterInput.style.background = self.style.contextFilterInputBackground;\n                filterInput.style.color = self.style.contextFilterInputColor;\n                if (self.invalidFilterRegEx) {\n                    filterInput.style.background = self.style.contextFilterInvalidRegExpBackground;\n                    filterInput.style.color = self.style.contextFilterInvalidRegExpColor;\n                }\n            }\n            function fillAutoComplete() {\n                var count = 0;\n                autoCompleteItems = {};\n                self.data.forEach(function (row) {\n                    var value = row[e.cell.header.name];\n                    if (autoCompleteItems[value] || count > self.attributes.maxAutoCompleteItems) { return; }\n                    count += 1;\n                    autoCompleteItems[value] = {\n                        title: self.formatters[e.cell.header.type || 'string']({ cell: { value: value }}),\n                        click: function (e) {\n                            filterInput.value = value;\n                            e.stopPropagation();\n                            filterInput.dispatchEvent(new Event('keyup'));\n                            self.disposeAutocomplete();\n                            return;\n                        }\n                    };\n                });\n                autoCompleteItems = Object.keys(autoCompleteItems).map(function (key) {\n                    return autoCompleteItems[key];\n                });\n            }\n            function createAutoCompleteContext(ev) {\n                if (ev && [40, 38, 13, 9].indexOf(ev.keyCode) !== -1) { return; }\n                fillAutoComplete();\n                iRect = filterInput.getBoundingClientRect();\n                if (autoCompleteContext) {\n                    autoCompleteContext.dispose();\n                    autoCompleteContext = undefined;\n                }\n                autoCompleteContext = createContextMenu(e, {\n                    left: iRect.left,\n                    top: iRect.top,\n                    right: iRect.right,\n                    bottom: iRect.bottom,\n                    height: iRect.height,\n                    width: iRect.width\n                }, autoCompleteItems, {inputDropdown: true});\n                autoCompleteContext.selectedIndex = 0;\n            }\n            self.createInlineStyle(filterLabel, 'canvas-datagrid-context-menu-label');\n            self.createInlineStyle(filterAutoCompleteButton, 'canvas-datagrid-context-menu-filter-button');\n            self.createInlineStyle(filterInput, 'canvas-datagrid-context-menu-filter-input');\n            checkRegExpErrorState();\n            filterInput.onclick = self.disposeAutocomplete;\n            filterInput.addEventListener('keydown', function (e) {\n                //down\n                if (e.keyCode === 40) {\n                    autoCompleteContext.selectedIndex += 1;\n                }\n                //up\n                if (e.keyCode === 38) {\n                    autoCompleteContext.selectedIndex -= 1;\n                }\n                //enter\n                if (e.keyCode === 13) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    self.disposeContextMenu();\n                }\n                //tab\n                if (e.keyCode === 9) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    e.preventDefault();\n                }\n                //esc\n                if (e.keyCode === 27) {\n                    self.disposeContextMenu();\n                }\n            });\n            filterInput.addEventListener('keyup', function () {\n                self.setFilter(e.cell.header.name, filterInput.value);\n            });\n            filterInput.addEventListener('keyup', createAutoCompleteContext);\n            ['focus', 'blur', 'keydown', 'keyup', 'change'].forEach(function (en) {\n                filterInput.addEventListener(en, checkRegExpErrorState);\n            });\n            filterInput.value = e.cell.header ? self.columnFilters[e.cell.header.name] || '' : '';\n            filterLabel.innerHTML = self.attributes.filterOptionText.replace(/%s/g, n);\n            filterAutoCompleteButton.onclick = function () {\n                if (autoCompleteContext) {\n                    return self.disposeAutocomplete();\n                }\n                createAutoCompleteContext();\n            };\n            filterAutoCompleteButton.innerHTML = self.style.contextFilterButtonHTML;\n            filterContainer.addEventListener('click', function (e) {\n                return e.stopPropagation();\n            });\n            filterContainer.appendChild(filterLabel);\n            filterContainer.appendChild(filterInput);\n            filterContainer.appendChild(filterAutoCompleteButton);\n            e.items.push({\n                title: filterContainer\n            });\n            if (Object.keys(self.columnFilters).length) {\n                Object.keys(self.columnFilters).forEach(function (cf) {\n                    var h = self.getHeaderByName(cf);\n                    e.items.push({\n                        title: self.attributes.removeFilterOptionText.replace(/%s/g, h.title || h.name),\n                        click: function removeFilterClick(e) {\n                            e.preventDefault();\n                            self.setFilter(cf, '');\n                            self.controlInput.focus();\n                        }\n                    });\n                });\n            }\n        }\n        function addDefaultContextMenuItem(e) {\n            var isNormalCell = !(e.cell.isBackground || e.cell.isHeaderCellCap\n                    || e.cell.isScrollBar || e.cell.isCorner || e.cell.isRowHeader)\n                    && e.cell.header;\n            if (self.attributes.showFilter && isNormalCell) {\n                createFilterContextMenuItems(e);\n            }\n            if (self.attributes.showCopy\n                    && self.selections.reduce(function (p, r) {\n                        return p + r.length;\n                    }, 0) > 0) {\n                e.items.push({\n                    title: self.attributes.copyText,\n                    click: function () {\n                        document.execCommand('copy');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.showPaste && self.clipBoardData) {\n                e.items.push({\n                    title: self.attributes.pasteText,\n                    click: function () {\n                        self.paste(self.clipBoardData, e.cell.columnIndex, e.cell.rowIndex);\n                        self.draw();\n                    }\n                });\n            }\n            if (self.attributes.showColumnSelector) {\n                e.items.push({\n                    title: self.attributes.columnSelectorText,\n                    items: function () {\n                        var d = [];\n                        self.getSchema().forEach(function (column) {\n                            function toggleColumnVisibility(e) {\n                                column.hidden = !column.hidden;\n                                e.preventDefault();\n                                self.stopPropagation(e);\n                                self.disposeContextMenu();\n                                self.draw();\n                            }\n                            var el = document.createElement('div');\n                            applyContextItemStyle(el);\n                            el.addEventListener('touchstart', toggleColumnVisibility);\n                            el.addEventListener('click', toggleColumnVisibility);\n                            el.innerHTML = (column.hidden ? self.attributes.columnSelectorHiddenText\n                                    : self.attributes.columnSelectorVisibleText)\n                                    + (column.title || column.name);\n                            d.push({\n                                title: el\n                            });\n                        });\n                        return d;\n                    }\n                });\n                if (e.cell && e.cell.header) {\n                    e.items.push({\n                        title: self.attributes.hideColumnText\n                            .replace(/%s/ig, e.cell.header.title || e.cell.header.name),\n                        click: function (ev) {\n                            e.cell.header.hidden = true;\n                            ev.preventDefault();\n                            self.stopPropagation(ev);\n                            self.disposeContextMenu();\n                            setTimeout(self.draw, 10);\n                        }\n                    });\n                }\n            }\n            if (self.attributes.saveAppearance && self.attributes.showClearSettingsOption\n                    && (Object.keys(self.sizes.rows).length > 0\n                        || Object.keys(self.sizes.columns).length > 0)) {\n                e.items.push({\n                    title: self.attributes.clearSettingsOptionText,\n                    click: function (e) {\n                        e.preventDefault();\n                        self.sizes.rows = {};\n                        self.sizes.columns = {};\n                        self.createRowOrders();\n                        self.createColumnOrders();\n                        self.storedSettings = undefined;\n                        self.dispatchEvent('resizecolumn', {columnWidth: self.style.cellWidth});\n                        self.dispatchEvent('resizerow', {cellHeight: self.style.cellHeight});\n                        self.setStorageData();\n                        self.resize(true);\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.allowSorting && self.attributes.showOrderByOption && isNormalCell) {\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextAsc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'asc');\n                        self.controlInput.focus();\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextDesc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'desc');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n        }\n        self.disposeAutocomplete = function () {\n            if (autoCompleteContext) {\n                autoCompleteContext.dispose();\n                autoCompleteContext = undefined;\n            }\n        };\n        self.disposeContextMenu = function () {\n            document.removeEventListener('click', self.disposeContextMenu);\n            zIndexTop = 9000;\n            self.disposeAutocomplete();\n            if (self.contextMenu) {\n                self.contextMenu.dispose();\n            }\n            self.contextMenu = undefined;\n        };\n        self.contextmenuEvent = function (e, overridePos) {\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            function createDiposeEvent() {\n                requestAnimationFrame(function () {\n                    document.addEventListener('click', self.disposeContextMenu);\n                    document.removeEventListener('mouseup', createDiposeEvent);\n                });\n            }\n            var contextPosition,\n                items = [],\n                pos = overridePos || self.getLayerPos(e),\n                ev = {\n                    NativeEvent: e,\n                    cell: self.getCellAt(pos.x, pos.y),\n                    items: items\n                },\n                st,\n                sl;\n            if (!ev.cell.isGrid) {\n                addDefaultContextMenuItem(ev);\n            }\n            if (document.scrollingElement) {\n                sl = document.scrollingElement.scrollLeft;\n                st = document.scrollingElement.scrollTop;\n            }\n            if (self.dispatchEvent('contextmenu', ev)) {\n                return;\n            }\n            if (!ev.cell.isGrid) {\n                if (self.contextMenu) {\n                    self.disposeContextMenu();\n                }\n                contextPosition = {\n                    left: pos.x + sl + pos.rect.left + self.style.contextMenuMarginLeft + self.canvasOffsetLeft,\n                    top: pos.y + st + pos.rect.top + self.style.contextMenuMarginTop + self.canvasOffsetTop,\n                    right: ev.cell.width + ev.cell.x + pos.rect.left,\n                    bottom: ev.cell.height + ev.cell.y + pos.rect.top,\n                    height: ev.cell.height,\n                    width: ev.cell.width\n                };\n                if (self.mobile) {\n                    contextPosition.left = self.style.mobileContextMenuMargin + 'px';\n                    contextPosition.width = self.width - (self.style.mobileContextMenuMargin * 2) + 'px';\n                }\n                self.contextMenu = createContextMenu(ev, contextPosition, items);\n                document.addEventListener('mouseup', createDiposeEvent);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/contextMenu.js\n// module id = 7\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.getClippingRect = function (ele) {\n            var boundingRect = self.position(self.parentNode),\n                eleRect = self.position(ele),\n                s = self.scrollOffset(self.canvas),\n                clipRect = {\n                    x: 0,\n                    y: 0,\n                    h: 0,\n                    w: 0\n                },\n                parentRect = {\n                    x: -Infinity,\n                    y: -Infinity,\n                    h: Infinity,\n                    w: Infinity\n                },\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth();\n            boundingRect.top -= s.top;\n            boundingRect.left -= s.left;\n            eleRect.top -= s.top;\n            eleRect.left -= s.left;\n            clipRect.h = boundingRect.top + boundingRect.height - ele.offsetTop - self.style.scrollBarWidth;\n            clipRect.w = boundingRect.left + boundingRect.width - ele.offsetLeft - self.style.scrollBarWidth;\n            clipRect.x = boundingRect.left + (eleRect.left * -1) + rowHeaderCellWidth;\n            clipRect.y = boundingRect.top + (eleRect.top * -1) + columnHeaderCellHeight;\n            return {\n                x: clipRect.x > parentRect.x ? clipRect.x : parentRect.x,\n                y: clipRect.y > parentRect.y ? clipRect.y : parentRect.y,\n                h: clipRect.h < parentRect.h ? clipRect.h : parentRect.h,\n                w: clipRect.w < parentRect.w ? clipRect.w : parentRect.w\n            };\n        };\n        self.clipElement = function (ele) {\n            var clipRect = self.getClippingRect(ele);\n            if (clipRect.w < 0) { clipRect.w = 0; }\n            if (clipRect.h < 0) { clipRect.h = 0; }\n            ele.style.clip = 'rect('\n                + clipRect.y + 'px,'\n                + clipRect.w + 'px,'\n                + clipRect.h + 'px,'\n                + clipRect.x + 'px'\n                + ')';\n            // INFO https://developer.mozilla.org/en-US/docs/Web/CSS/clip\n            // clip has been \"deprecated\" for clipPath.  Of course nothing but chrome\n            // supports clip path, so we'll keep using clip until someday clipPath becomes\n            // more widely support.  The code below works correctly, but setting clipPath and clip\n            // at the same time has undesirable results.\n            // ele.style.clipPath = 'polygon('\n            //     + clipRect.x + 'px ' + clipRect.y + 'px,'\n            //     + clipRect.x + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.y + 'px'\n            //     + ')';\n        };\n        self.scrollOffset = function (e) {\n            var x = 0, y = 0;\n            while (e.parentNode && e.nodeName !== 'CANVAS-DATAGRID') {\n                if (e.nodeType !== 'canvas-datagrid-tree'\n                        && e.nodeType !== 'canvas-datagrid-cell') {\n                    x -= e.scrollLeft;\n                    y -= e.scrollTop;\n                }\n                e = e.parentNode;\n            }\n            return {left: x, top: y};\n        };\n        self.resizeEditInput = function () {\n            if (self.input) {\n                var pos = self.canvas.getBoundingClientRect(),\n                    s = self.scrollOffset(self.canvas),\n                    bm = self.style.borderCollapse === 'collapse' ? 1 : 2,\n                    borderWidth = (self.style.cellBorderWidth * bm),\n                    cell = self.getVisibleCellByIndex(self.input.editCell.columnIndex, self.input.editCell.rowIndex)\n                        || {x: -100, y: -100, height: 0, width: 0};\n                if (self.mobile) {\n                    self.input.style.left = '0';\n                    self.input.style.top = (self.height - self.style.mobileEditInputHeight) - borderWidth - 1 + 'px';\n                    self.input.style.height = self.style.mobileEditInputHeight + 'px';\n                    self.input.style.width = self.width - borderWidth - 1 + 'px';\n                    return;\n                }\n                self.input.style.left = pos.left + cell.x + self.canvasOffsetLeft - s.left + 'px';\n                self.input.style.top = pos.top + cell.y - self.style.cellBorderWidth + self.canvasOffsetTop - s.top + 'px';\n                self.input.style.height = cell.height - borderWidth + 'px';\n                self.input.style.width = cell.width - self.style.cellPaddingLeft + 'px';\n                self.clipElement(self.input);\n            }\n        };\n        self.position = function (e, ignoreScrollOffset) {\n            var x = 0, y = 0, s = e, h, w;\n            while (e.offsetParent && e.nodeName !== 'CANVAS-DATAGRID') {\n                x += e.offsetLeft;\n                y += e.offsetTop;\n                h = e.offsetHeight;\n                w = e.offsetWidth;\n                e = e.offsetParent;\n            }\n            if (ignoreScrollOffset) {\n                return {left: x, top: y, height: h, width: w};\n            }\n            e = s;\n            s = self.scrollOffset(e);\n            return { left: x + s.left, top: y + s.top, height: h, width: w };\n        };\n        self.getLayerPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.clientX - rect.left,\n                    y: e.clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        /**\n         * Ends editing, optionally aborting the edit.\n         * @memberof canvasDatagrid\n         * @name endEdit\n         * @method\n         * @param {boolean} abort When true, abort the edit.\n         */\n        self.endEdit = function (abort) {\n            var cell = self.input.editCell,\n                y = cell.rowIndex;\n            function abortEdit() {\n                abort = true;\n            }\n            if (self.dispatchEvent('beforeendedit', {\n                    cell: cell,\n                    newValue: self.input.value,\n                    oldValue: cell.value,\n                    abort: abortEdit,\n                    input: self.input\n                })) { return false; }\n            if (self.input.value !== cell.value && !abort) {\n                self.changes[y] = self.changes[y] || {};\n                self.changes[y][cell.header.name] = self.input.value;\n                cell.data[cell.header.name] = self.input.value;\n                if (y === self.data.length) {\n                    if (self.dispatchEvent('newrow', {\n                            value: self.input.value,\n                            defaultValue: cell.value,\n                            aborted: abort,\n                            cell: cell,\n                            input: self.input\n                        })) { return false; }\n                    self.uId += 1;\n                    self.addRow(cell.data);\n                    self.createNewRowData();\n                }\n                self.draw(true);\n            }\n            document.body.removeChild(self.input);\n            self.controlInput.focus();\n            self.dispatchEvent('endedit', {\n                cell: cell,\n                value: self.input.value,\n                aborted: abort,\n                input: self.input\n            });\n            self.input = undefined;\n            return true;\n        };\n        /**\n         * Begins editing at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name beginEditAt\n         * @method\n         * @param {number} x The column index of the cell to edit.\n         * @param {number} y The row index of the cell to edit.\n         */\n        self.beginEditAt = function (x, y) {\n            if (!self.attributes.editable) { return; }\n            if (self.input) {\n                self.endEdit();\n            }\n            var cell = self.getVisibleCellByIndex(x, y),\n                s = self.getVisibleSchema(),\n                enumItems,\n                enu,\n                option,\n                valueInEnum;\n            if (!(cell && cell.header)) { return; }\n            //HACK for IE10, does not like literal enum\n            enu = cell.header['enum'];\n            if (self.dispatchEvent('beforebeginedit', {cell: cell})) { return false; }\n            self.scrollIntoView(x, y);\n            self.setActiveCell(x, y);\n            if (enu) {\n                self.input = document.createElement('select');\n            } else {\n                self.input = document.createElement(self.attributes.multiLine\n                    ? 'textarea' : 'input');\n            }\n            cell = self.getVisibleCellByIndex(x, y);\n            //HACK on mobile devices sometimes edit can begin without the cell being in view, I don't know how.\n            if (!cell) { return; }\n            if (enu) {\n                // add enums\n                if (typeof enu === 'function') {\n                    enumItems = enu.apply(self.intf, [{cell: cell}]);\n                } else if (Array.isArray(enu)) {\n                    enumItems = enu;\n                }\n                enumItems.forEach(function (e) {\n                    var i = document.createElement('option'),\n                        val,\n                        title;\n                    if (Array.isArray(e)) {\n                        val = e[0];\n                        title = e[1];\n                    } else {\n                        val = e;\n                        title = e;\n                    }\n                    if (val === cell.value) { valueInEnum = true; }\n                    i.value = val;\n                    i.innerHTML = title;\n                    self.input.appendChild(i);\n                });\n                if (!valueInEnum) {\n                    option = document.createElement('option');\n                    option.value = cell.value;\n                    option.innerHTML = cell.value;\n                    self.input.appendChild(option);\n                }\n                self.input.addEventListener('change', function () {\n                    self.endEdit();\n                    self.draw(true);\n                });\n            }\n            document.body.appendChild(self.input);\n            self.createInlineStyle(self.input, self.mobile ? 'canvas-datagrid-edit-mobile-input' : 'canvas-datagrid-edit-input');\n            self.input.style.position = 'absolute';\n            self.input.editCell = cell;\n            self.resizeEditInput();\n            self.input.style.zIndex = '2';\n            self.input.style.fontSize = (parseInt(self.style.editCellFontSize, 10) * self.scale) + 'px';\n            self.input.value = cell.value;\n            self.input.focus();\n            self.input.addEventListener('click', self.stopPropagation);\n            self.input.addEventListener('dblclick', self.stopPropagation);\n            self.input.addEventListener('mouseup', self.stopPropagation);\n            self.input.addEventListener('mousedown', self.stopPropagation);\n            self.input.addEventListener('keydown', function (e) {\n                var nx = cell.columnIndex,\n                    ny = cell.rowIndex;\n                // esc\n                if (e.keyCode === 27) {\n                    self.endEdit(true);\n                    self.draw(true);\n                // enter\n                } else if (e.keyCode === 13\n                        && (!self.attributes.multiLine\n                            || (self.attributes.multiLine && e.shiftKey))) {\n                    self.endEdit();\n                    self.draw(true);\n                } else if (e.keyCode === 9) {\n                    e.preventDefault();\n                    if (!self.endEdit()) {\n                        return;\n                    }\n                    if (e.shiftKey) {\n                        nx -= 1;\n                    } else {\n                        nx += 1;\n                    }\n                    if (nx < 0) {\n                        nx = s.length - 1;\n                        ny -= 1;\n                    }\n                    if (nx > s.length - 1) {\n                        nx = 0;\n                        ny += 1;\n                    }\n                    if (ny < 0) {\n                        ny = self.data.length - 1;\n                    }\n                    if (ny > self.data.length - 1) {\n                        ny = 0;\n                    }\n                    self.scrollIntoView(nx, ny);\n                    self.beginEditAt(nx, ny);\n                }\n            });\n            self.dispatchEvent('beginedit', {cell: cell, input: self.input});\n        };\n        self.createInlineStyle = function (el, className) {\n            var css = {\n                'canvas-datagrid-context-menu-filter-input': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextFilterInputBackground,\n                    color: self.style.contextFilterInputColor,\n                    border: self.style.contextFilterInputBorder,\n                    borderRadius: self.style.contextFilterInputBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextFilterInputFontFamily,\n                    fontSize: self.style.contextFilterInputFontSize\n                },\n                'canvas-datagrid-context-menu-filter-button': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextFilterButtonBorder,\n                    borderRadius: self.style.contextFilterButtonBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFilterButtonFontFamily,\n                    fontSize: self.style.contextMenuFilterButtonFontSize\n                },\n                'canvas-datagrid-context-child-arrow': {\n                    cssFloat: 'right',\n                    color: self.style.childContextMenuArrowColor,\n                    fontSize: self.style.contextMenuChildArrowFontSize,\n                    fontFamily: self.style.contextMenuFontFamily,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-autocomplete': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    position: 'absolute',\n                    zIndex: 9999,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-autocomplete-item': {\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor\n                },\n                'canvas-datagrid-autocomplete-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-canvas': {\n                    position: 'absolute',\n                    zIndex: '-1'\n                },\n                'canvas-datagrid': {\n                    display: 'block'\n                },\n                'canvas-datagrid-control-input': {\n                    position: 'fixed',\n                    top: '-5px',\n                    left: '-5px',\n                    border: 'none',\n                    opacity: '0',\n                    cursor: 'pointer',\n                    width: '1px',\n                    height: '1px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize\n                },\n                'canvas-datagrid-edit-mobile-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 0',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.mobileEditFontFamily,\n                    fontSize: self.style.mobileEditFontSize,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-edit-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 ' + self.style.editCellPaddingLeft + 'px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.editCellFontFamily,\n                    fontSize: self.style.editCellFontSize,\n                    boxShadow: self.style.editCellBoxShadow,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-context-menu-item-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-context-menu-label': {\n                    margin: self.style.contextMenuLabelMargin,\n                    display: self.style.contextMenuLabelDisplay,\n                    minWidth: self.style.contextMenuLabelMinWidth,\n                    maxWidth: self.style.contextMenuLabelMaxWidth\n                },\n                'canvas-datagrid-context-menu-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-context-menu': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-invalid-search-regExp': {\n                    background: self.style.contextMenuFilterInvalidExpresion\n                }\n            };\n            if (css[className]) {\n                Object.keys(css[className]).map(function (prop) {\n                    el.style[prop] = css[className][prop];\n                });\n            }\n            return;\n        };\n        self.appendTo = function (e) {\n            self.parentNode = e;\n            self.setDom();\n        };\n        self.setDom = function () {\n            if (!self.parentNode) { return; }\n            if (self.parentNode && /canvas-datagrid-(cell|tree)/.test(self.parentNode.nodeType)) {\n                self.isChildGrid = true;\n                self.parentGrid = self.parentNode.parentGrid;\n                self.ctx = self.parentGrid.context;\n                self.canvas = self.parentGrid.canvas;\n                self.controlInput = self.parentGrid.controlInput;\n                self.eventParent = self.canvas;\n            } else {\n                self.controlInput = self.controlInput || document.createElement('input');\n                self.controlInput.onblur = self.intf.blur;\n                self.createInlineStyle(self.controlInput, 'canvas-datagrid-control-input');\n                self.isChildGrid = false;\n                self.parentDOMNode = self.parentNode;\n                self.parentIsCanvas = /^canvas$/i.test(self.parentDOMNode.tagName);\n                if (self.parentIsCanvas) {\n                    self.canvas = self.parentDOMNode;\n                    self.parentDOMNode.appendChild(self.controlInput);\n                } else {\n                    self.canvas = document.createElement('canvas');\n                    self.parentDOMNode.appendChild(self.canvas);\n                    self.parentDOMNode.appendChild(self.controlInput);\n                }\n                self.createInlineStyle(self.canvas, 'canvas-datagrid');\n                self.ctx = self.canvas.getContext('2d');\n                self.ctx.textBaseline = 'alphabetic';\n                self.eventParent = self.canvas;\n            }\n            self.parentNodeStyle = self.canvas.style;\n            self.controlInput.setAttribute('readonly', true);\n            self.controlInput.addEventListener('blur', function (e) {\n                if (e.target !== self.canvas) {\n                    self.hasFocus = false;\n                }\n            });\n            self.eventParent.addEventListener('scroll', self.resize, false);\n            self.eventParent.addEventListener('touchstart', self.touchstart, false);\n            self.eventParent.addEventListener('mouseup', self.mouseup, false);\n            self.eventParent.addEventListener('mousedown', self.mousedown, false);\n            self.eventParent.addEventListener('dblclick', self.dblclick, false);\n            self.eventParent.addEventListener('click', self.click, false);\n            self.eventParent.addEventListener('mousemove', self.mousemove);\n            self.eventParent.addEventListener('wheel', self.scrollWheel, false);\n            self.canvas.addEventListener('contextmenu', self.contextmenuEvent, false);\n            self.controlInput.addEventListener('copy', self.copy);\n            self.controlInput.addEventListener('cut', self.cut);\n            self.controlInput.addEventListener('paste', self.paste);\n            self.controlInput.addEventListener('keypress', self.keypress, false);\n            self.controlInput.addEventListener('keyup', self.keyup, false);\n            self.controlInput.addEventListener('keydown', self.keydown, false);\n            window.addEventListener('resize', self.resize);\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/dom.js\n// module id = 8\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        // all methods here are exposed by intf\n        // to users\n        /**\n         * Converts a integer into a letter A - ZZZZZ...\n         * @memberof canvasDatagrid\n         * @name integerToAlpha\n         * @method\n         * @param {column} n The number to convert.\n         */\n        self.integerToAlpha = function (n) {\n            var ordA = 'a'.charCodeAt(0),\n                ordZ = 'z'.charCodeAt(0),\n                len = ordZ - ordA + 1,\n                s = '';\n            while (n >= 0) {\n                s = String.fromCharCode(n % len + ordA) + s;\n                n = Math.floor(n / len) - 1;\n            }\n            return s;\n        };\n        /**\n         * Inserts a new column before the specified index into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name insertColumn\n         * @method\n         * @param {column} c The column to insert into the schema.\n         * @param {number} index The index of the column to insert before.\n         */\n        self.insertColumn = function (c, index) {\n            var s = self.getSchema();\n            if (s.length < index) {\n                throw new Error('Index is beyond the length of the schema.');\n            }\n            self.validateColumn(c, s);\n            s.splice(index, 0, c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a column from the schema at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteColumn\n         * @tutorial schema\n         * @method\n         * @param {number} index The index of the column to delete.\n         */\n        self.deleteColumn = function (index) {\n            var s = self.getSchema();\n            // remove data matching this column name from data\n            self.data.forEach(function (row) {\n                delete row[s[index].name];\n            });\n            s.splice(index, 1);\n            self.intf.schema = s;\n        };\n        /**\n         * Adds a new column into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name addColumn\n         * @method\n         * @param {column} c The column to add to the schema.\n         */\n        self.addColumn = function (c) {\n            var s = self.getSchema();\n            self.validateColumn(c, s);\n            s.push(c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a row from the dataset at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteRow\n         * @method\n         * @param {number} index The index of the row to delete.\n         */\n        self.deleteRow = function (index) {\n            self.originalData.splice(index, 1);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Inserts a new row into the dataset before the specified index.\n         * @memberof canvasDatagrid\n         * @name insertRow\n         * @method\n         * @param {object} d data.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertRow = function (d, index) {\n            if (self.originalData.length < index) {\n                throw new Error('Index is beyond the length of the dataset.');\n            }\n            self.originalData.splice(index, 0, d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[index], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Adds a new row into the dataset.\n         * @memberof canvasDatagrid\n         * @name addRow\n         * @method\n         * @param {object} d data.\n         */\n        self.addRow = function (d) {\n            self.originalData.push(d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[self.originalData.length - 1], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Sets the height of a given row by index number.\n         * @memberof canvasDatagrid\n         * @name setRowHeight\n         * @method\n         * @param {number} rowIndex The index of the row to set.\n         * @param {number} height Height to set the row to.\n         */\n        self.setRowHeight = function (rowIndex, height) {\n            self.sizes.rows[self.data[rowIndex][self.uniqueId]] = height;\n            self.draw(true);\n        };\n        /**\n         * Sets the width of a given column by index number.\n         * @memberof canvasDatagrid\n         * @name setColumnWidth\n         * @method\n         * @param {number} colIndex The index of the column to set.\n         * @param {number} width Width to set the column to.\n         */\n        self.setColumnWidth = function (colIndex, width) {\n            var s = self.getSchema();\n            self.sizes.columns[s[colIndex][self.uniqueId]] = width;\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the width of the columns due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetColumnWidths\n         * @tutorial schema\n         * @method\n         */\n        self.resetColumnWidths = function () {\n            self.sizes.columns = {};\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the height of the rows due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetRowHeights\n         * @tutorial schema\n         * @method\n         */\n        self.resetRowHeights = function () {\n            self.sizes.rows = {};\n            self.draw(true);\n        };\n        /**\n         * Sets the value of the filter.\n         * @memberof canvasDatagrid\n         * @name setFilter\n         * @method\n         * @param {string} column Name of the column to filter.\n         * @param {string} value The value to filter for.\n         */\n        self.setFilter = function (column, value) {\n            function applyFilter() {\n                self.refreshFromOrigialData();\n                Object.keys(self.columnFilters).forEach(function (filter) {\n                    var header = self.getHeaderByName(column);\n                    if (!header) {\n                        return;\n                    }\n                    self.currentFilter = header.filter || self.filter(column.type || 'string');\n                    self.data = self.data.filter(function (row) {\n                        return self.currentFilter(row[filter], self.columnFilters[filter]);\n                    });\n                });\n                self.resize();\n                self.draw(true);\n            }\n            if (column === undefined && value === undefined) {\n                self.columnFilters = {};\n                return applyFilter();\n            }\n            if (column && (value === '' || value === undefined)) {\n                delete self.columnFilters[column];\n            } else {\n                self.columnFilters[column] = value;\n            }\n            applyFilter();\n        };\n        /**\n         * Returns the number of pixels to scroll down to line up with row rowIndex.\n         * @memberof canvasDatagrid\n         * @name findRowScrollTop\n         * @method\n         * @param {number} rowIndex The row index of the row to scroll find.\n         */\n        self.findRowScrollTop = function (rowIndex) {\n            var top = 0, x = 0, l = self.data.length,\n                bm = self.style.borderCollapse === 'collapse' ? 1 : 2,\n                cellBorder = self.style.cellBorderWidth * bm;\n            if (!self.attributes.showNewRow) {\n                l -= 1;\n            }\n            if (rowIndex > l) {\n                throw new Error('Impossible row index');\n            }\n            while (x < rowIndex) {\n                top += (self.sizes.rows[self.data[x][self.uniqueId]] || self.style.cellHeight) + cellBorder;\n                x += 1;\n            }\n            //TODO: This is not super accurate, causes pageUp/Dn to not move around right\n            return top - (self.sizes.rows[self.data[rowIndex][self.uniqueId]] || self.style.cellHeight);\n        };\n        /**\n         * Returns the number of pixels to scroll to the left to line up with column columnIndex.\n         * @memberof canvasDatagrid\n         * @name findColumnScrollLeft\n         * @method\n         * @param {number} columnIndex The column index of the column to find.\n         */\n        self.findColumnScrollLeft = function (columnIndex) {\n            var left = 0, y = 0, s = self.getSchema(), l = s.length - 1;\n            if (columnIndex > l) {\n                throw new Error('Impossible column index');\n            }\n            while (y < columnIndex) {\n                left += self.sizes.columns[s[y][self.uniqueId]] || s[y].width;\n                y += 1;\n            }\n            return left;\n        };\n        /**\n         * Scrolls the cell at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name gotoCell\n         * @method\n         * @param {number} x The column index of the cell to scroll to.\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoCell = function (x, y) {\n            if (x !== undefined) {\n                self.scrollBox.scrollLeft = self.findColumnScrollLeft(x);\n            }\n            if (y !== undefined) {\n                self.scrollBox.scrollTop = self.findRowScrollTop(y);\n            }\n        };\n        /**\n         * Scrolls the row y.\n         * @memberof canvasDatagrid\n         * @name gotoRow\n         * @method\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoRow = function (y) {\n            self.gotoCell(0, y);\n        };\n        /**\n         * Scrolls the cell at cell x, row y into view if it is not already.\n         * @memberof canvasDatagrid\n         * @name scrollIntoView\n         * @method\n         * @param {number} x The column index of the cell to scroll into view.\n         * @param {number} y The row index of the cell to scroll into view.\n         */\n        self.scrollIntoView = function (x, y) {\n            if (self.visibleCells.filter(function (cell) {\n                    return (cell.rowIndex === y || y === undefined)\n                        && (cell.columnIndex === x || x === undefined)\n                        && cell.x > 0\n                        && cell.y > 0\n                        && cell.x + cell.width < self.width\n                        && cell.y + cell.height < self.height;\n                }).length === 0) {\n                self.gotoCell(x, y);\n            }\n        };\n        /**\n         * Sets the active cell. Requires redrawing.\n         * @memberof canvasDatagrid\n         * @name setActiveCell\n         * @method\n         * @param {number} x The column index of the cell to set active.\n         * @param {number} y The row index of the cell to set active.\n         */\n        self.setActiveCell = function (x, y) {\n            self.activeCell = {\n                rowIndex: y,\n                columnIndex: x\n            };\n        };\n        /**\n         * Removes the selection.\n         * @memberof canvasDatagrid\n         * @name selectNone\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectNone = function (dontDraw) {\n            self.selections = [];\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Selects every visible cell.\n         * @memberof canvasDatagrid\n         * @name selectAll\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectAll = function (dontDraw) {\n            self.selectArea({\n                top: 0,\n                left: 0,\n                right: self.getVisibleSchema().length - 1,\n                bottom: self.data.length - 1\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Returns true if the selected columnIndex is selected on every row.\n         * @memberof canvasDatagrid\n         * @name isColumnSelected\n         * @method\n         * @param {number} columnIndex The column index to check.\n         */\n        self.isColumnSelected = function (columnIndex) {\n            var colIsSelected = true;\n            self.data.forEach(function (row, rowIndex) {\n                if (!self.selections[rowIndex] || self.selections[rowIndex].indexOf(self.orders.columns[columnIndex]) === -1) {\n                    colIsSelected = false;\n                }\n            });\n            return colIsSelected;\n        };\n        /**\n         * Runs the defined method on each selected cell.\n         * @memberof canvasDatagrid\n         * @name forEachSelectedCell\n         * @method\n         * @param {number} fn The function to execute.  The signature of the function is: (data, rowIndex, columnName).\n         * @param {number} expandToRow When true the data in the array is expanded to the entire row.\n         */\n        self.forEachSelectedCell = function (fn, expandToRow) {\n            var d = [], s = expandToRow ? self.getSchema() : self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    if (col === -1 || !s[col]) { return; }\n                    fn(self.data, index, s[col].name);\n                });\n            });\n        };\n        /**\n         * Selects a column.\n         * @memberof canvasDatagrid\n         * @name selectColumn\n         * @method\n         * @param {number} columnIndex The column index to select.\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the column.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the column.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectColumn = function (columnIndex, ctrl, shift, supressEvent) {\n            var s, e, x;\n            function addCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) === -1) {\n                        self.selections[rowIndex].push(i);\n                    }\n                });\n            }\n            function removeCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) !== -1) {\n                        self.selections[rowIndex].splice(self.selections[rowIndex].indexOf(i), 1);\n                    }\n                });\n            }\n            if (shift) {\n                if (!self.activeCell) { return; }\n                s = Math.min(self.activeCell.columnIndex, columnIndex);\n                e = Math.max(self.activeCell.columnIndex, columnIndex);\n                for (x = s; e > x; x += 1) {\n                    addCol(x);\n                }\n            }\n            if (!ctrl && !shift) {\n                self.selections = [];\n                self.activeCell.columnIndex = columnIndex;\n                self.activeCell.rowIndex = self.scrollIndexTop;\n            }\n            if (ctrl && self.isColumnSelected(columnIndex)) {\n                removeCol(columnIndex);\n            } else {\n                addCol(columnIndex);\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.getSelectionBounds()\n            });\n        };\n        /**\n         * Selects a row.\n         * @memberof canvasDatagrid\n         * @name selectRow\n         * @method\n         * @param {number} rowIndex The row index to select.\n         * @param {boolean} ctrl When true, behaves as if you were holding control/command when you clicked the row.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the row.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectRow = function (rowIndex, ctrl, shift, supressEvent) {\n            var x, st, en, s = self.getVisibleSchema();\n            function addRow(ri) {\n                self.selections[ri] = [];\n                self.selections[ri].push(-1);\n                s.forEach(function (col, index) {\n                    self.selections[ri].push(index);\n                });\n            }\n            if (self.dragAddToSelection === false || self.dragObject === undefined) {\n                if (self.selections[rowIndex] && self.selections[rowIndex].length - 1 === s.length) {\n                    if (ctrl) {\n                        self.selections[rowIndex] = [];\n                        return;\n                    }\n                }\n            }\n            if (self.dragAddToSelection === true || self.dragObject === undefined) {\n                if (shift && self.dragObject === undefined) {\n                    if (!self.activeCell) { return; }\n                    st = Math.min(self.activeCell.rowIndex, rowIndex);\n                    en = Math.max(self.activeCell.rowIndex, rowIndex);\n                    for (x = st; en >= x; x += 1) {\n                        addRow(x);\n                    }\n                } else {\n                    addRow(rowIndex);\n                }\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Collapse a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name collapseTree\n         * @method\n         * @param {number} index The index of the row to collapse.\n         */\n        self.collapseTree = function (rowIndex) {\n            var rowId = self.data[rowIndex][self.uniqueId];\n            self.dispatchEvent('collapsetree', {\n                childGrid: self.childGrids[rowId],\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId].blur();\n            self.openChildren[rowId].dispose();\n            delete self.openChildren[rowId];\n            delete self.sizes.trees[rowId];\n            delete self.childGrids[rowId];\n            self.dispatchEvent('resizerow', {\n                cellHeight: self.style.cellHeight\n            });\n            self.resize(true);\n            self.draw(true);\n        };\n        /**\n         * Expands a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name expandTree\n         * @method\n         * @param {number} index The index of the row to expand.\n         */\n        self.expandTree = function (rowIndex) {\n            var columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth,\n                rowId = self.data[rowIndex][self.uniqueId],\n                h = self.sizes.trees[rowId] || self.style.treeGridHeight,\n                treeGrid;\n            if (!self.childGrids[rowId]) {\n                treeGrid = self.createGrid({\n                    debug: self.attributes.debug,\n                    name: self.attributes.saveAppearance\n                        ? self.attributes.name + 'tree' + rowId : undefined,\n                    parentNode: {\n                        parentGrid: self.intf,\n                        nodeType: 'canvas-datagrid-tree',\n                        offsetHeight: h,\n                        offsetWidth: self.width - rowHeaderCellWidth,\n                        header: { width: self.width - rowHeaderCellWidth },\n                        offsetLeft: rowHeaderCellWidth,\n                        offsetTop: columnHeaderCellHeight,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: 'tree',\n                        data: self.data[rowIndex]\n                    }\n                });\n                self.childGrids[rowId] = treeGrid;\n            }\n            treeGrid = self.childGrids[rowId];\n            treeGrid.visible = true;\n            self.dispatchEvent('expandtree', {\n                treeGrid: treeGrid,\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId] = treeGrid;\n            self.sizes.trees[rowId] = h;\n            self.dispatchEvent('resizerow', {height: self.style.cellHeight});\n            self.resize(true);\n        };\n        /**\n         * Toggles tree grid open and close by row index.\n         * @memberof canvasDatagrid\n         * @name toggleTree\n         * @method\n         * @param {number} index The index of the row to toggle.\n         */\n        self.toggleTree = function (rowIndex) {\n            var i = self.openChildren[self.data[rowIndex][self.uniqueId]];\n            if (i) {\n                return self.collapseTree(rowIndex);\n            }\n            self.expandTree(rowIndex);\n        };\n        /**\n         * Returns a header from the schema by name.\n         * @memberof canvasDatagrid\n         * @name getHeaderByName\n         * @tutorial schema\n         * @method\n         * @returns {header} header with the selected name, or undefined.\n         * @param {string} name The name of the column to resize.\n         */\n        self.getHeaderByName = function (name) {\n            var x, i = self.getSchema();\n            for (x = 0; x < i.length; x += 1) {\n                if (i[x].name === name) {\n                    return i[x];\n                }\n            }\n        };\n        /**\n         * Resizes a column to fit the longest value in the column. Call without a value to resize all columns.\n         * Warning, can be slow on very large record sets (1m records ~3-5 seconds on an i7).\n         * @memberof canvasDatagrid\n         * @name fitColumnToValues\n         * @method\n         * @param {string} name The name of the column to resize.\n         */\n        self.fitColumnToValues = function (name, internal) {\n            if (!self.canvas) { return; }\n            self.sizes.columns[name === 'cornerCell' ? name : self.getHeaderByName(name)[self.uniqueId]]\n                = self.findColumnMaxTextLength(name);\n            if (!internal) {\n                self.resize();\n                self.draw(true);\n            }\n        };\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @overload\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {number} columnIndex The column index of the cell to check.\n         * @param {number} rowIndex The row index of the cell to check.\n         */\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {cell} cell The cell to check for.  Alternatively you can pass an object { x: <x-pixel-value>, y: <y-pixel-value> }.\n         */\n        self.isCellVisible = function (cell, rowIndex) {\n            // overload\n            if (rowIndex !== undefined) {\n                return self.visibleCells.filter(function (c) {\n                    return c.columnIndex === cell && c.rowIndex === rowIndex;\n                }).length > 0;\n            }\n            var x, l = self.visibleCells.length;\n            for (x = 0; x < l; x += 1) {\n                if (cell.x === self.visibleCells[x].x && cell.y === self.visibleCells[x].y) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n         * Sets the order of the data.\n         * @memberof canvasDatagrid\n         * @name order\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} columnName Number of pixels from the left.\n         * @param {string} direction `asc` for ascending or `desc` for descending.\n         * @param {function} [sortFunction] When defined, override the default sorting method defined in the column's schema and use this one.\n         * @param {bool} [dontSetStorageData] Don't store this setting for future use.\n         */\n        self.order = function (columnName, direction, sortFunction, dontSetStorageData) {\n            var f,\n                c = self.getSchema().filter(function (col) {\n                    return col.name === columnName;\n                });\n            self.orderBy = columnName;\n            if (c.length === 0) {\n                throw new Error('Cannot sort.  No such column name');\n            }\n            f = sortFunction || self.sorters[c[0].type];\n            if (!f && c[0].type !== undefined) {\n                console.warn('Cannot sort type \"%s\" falling back to string sort.', c[0].type);\n            }\n            self.data = self.data.sort(typeof f === 'function' ? f(columnName, direction) : self.sorters.string);\n            self.dispatchEvent('ordercolumn', {name: columnName, direction: direction});\n            self.draw(true);\n            if (dontSetStorageData) { return; }\n            self.setStorageData();\n        };\n        self.isInGrid = function (e) {\n            if (e.x < 0\n                    || e.x > self.width\n                    || e.y < 0\n                    || e.y > self.height) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Moves the current selection relative to the its current position.  Note: this method does not move the selected data, just the selection itself.\n         * @memberof canvasDatagrid\n         * @name moveSelection\n         * @method\n         * @param {number} offsetX The number of columns to offset the selection.\n         * @param {number} offsetY The number of rows to offset the selection.\n         */\n        self.moveSelection = function (offsetX, offsetY) {\n            var sel = [];\n            self.selections.forEach(function (row, rowIndex) {\n                sel[rowIndex + offsetY] = [];\n                row.forEach(function (colIndex) {\n                    sel[rowIndex + offsetY].push(colIndex + offsetX);\n                });\n            });\n            self.selections = sel;\n        };\n        /**\n         * Moves data in the provided selection to another position in the grid.  Moving data off the edge of the schema (columns/x) will truncate data.\n         * @memberof canvasDatagrid\n         * @name moveTo\n         * @method\n         * @param {array} sel 2D array representing selected rows and columns.  `canvasDatagrid.selections` is in this format and can be used here.\n         * @param {number} x The column index to start inserting the selection at.\n         * @param {number} y The row index to start inserting the selection at.\n         */\n        self.moveTo = function (sel, x, y) {\n            var d = self.getSelectedData(),\n                s = self.getVisibleSchema(),\n                l = sel.length,\n                xi,\n                yi = y - 1;\n            sel.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) { return; }\n                row.forEach(function (col) {\n                    if (!s[col]) { return; }\n                    self.data[index][s[col].name] = null;\n                });\n            });\n            sel.forEach(function (row, index) {\n                yi += 1;\n                xi = x - 1;\n                row.forEach(function (col, cidx) {\n                    xi += 1;\n                    if (col === -1\n                            || !s[xi]\n                            || !s[col]\n                            || self.data.length - 1 < yi\n                            || yi < 0) { return; }\n                    self.data[yi][s[xi].name] = d[index][s[col].name];\n                });\n            });\n        };\n        /**\n         * Checks if a given column is visible.\n         * @memberof canvasDatagrid\n         * @name isColumnVisible\n         * @method\n         * @returns {boolean} When true, the column is visible.\n         * @param {number} columnIndex Column index.\n         */\n        self.isColumnVisible = function (columnIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === columnIndex;\n            }).length > 0;\n        };\n        /**\n         * Checks if a given row is visible.\n         * @memberof canvasDatagrid\n         * @name isRowVisible\n         * @method\n         * @returns {boolean} When true, the row is visible.\n         * @param {number} rowIndex Row index.\n         */\n        self.isRowVisible = function (rowIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.rowIndex === rowIndex;\n            }).length > 0;\n        };\n        /**\n         * Gets the cell at columnIndex and rowIndex.\n         * @memberof canvasDatagrid\n         * @name getVisibleCellByIndex\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Column index.\n         * @param {number} y Row index.\n         */\n        self.getVisibleCellByIndex = function (x, y) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === x && c.rowIndex === y;\n            })[0];\n        };\n        /**\n         * Gets the cell at grid pixel coordinate x and y.  Author's note.  This function ties drawing and events together.  This is a very complex function and is core to the component.\n         * @memberof canvasDatagrid\n         * @name getCellAt\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Number of pixels from the left.\n         * @param {number} y Number of pixels from the top.\n         */\n        self.getCellAt = function (x, y, useTouchScrollZones) {\n            function getBorder(cell) {\n                if (cell.x + cell.width - (self.attributes.borderResizeZone * 0.4) < x && cell.x + cell.width + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'r';\n                }\n                if (cell.x - (self.attributes.borderResizeZone * 0.4) < x && cell.x + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'l';\n                }\n                if (cell.y + cell.height - (self.attributes.borderResizeZone * 0.4) < y && cell.y + cell.height + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 'b';\n                }\n                if (cell.y - (self.attributes.borderResizeZone * 0.4) < y && cell.y + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 't';\n                }\n            }\n            var border,\n                tsz = useTouchScrollZones ? self.attributes.touchScrollZone : 0,\n                moveMode = self.attributes.borderDragBehavior === 'move',\n                i,\n                l = self.visibleCells.length,\n                moveBorder,\n                xBorderBehavior = moveMode ? self.cursorGrab : 'ew-resize',\n                yBorderBehavior = moveMode ? self.cursorGrab : 'ns-resize',\n                cell;\n            if (!self.visibleCells || !self.visibleCells.length) { return; }\n            self.hasFocus = true;\n            if (!(y < self.height\n                && y > 0\n                && x < self.width\n                && x > 0)) {\n                self.hasFocus = false;\n                return {\n                    dragContext: 'inherit',\n                    context: 'inherit'\n                };\n            }\n            for (i = 0; i < l; i += 1) {\n                cell = self.visibleCells[i];\n                if (useTouchScrollZones && /(vertical|horizontal)-scroll-/.test(cell.style)) {\n                    cell.x -= tsz;\n                    cell.y -= tsz;\n                    cell.height += tsz;\n                    cell.width += tsz;\n                }\n                if (cell.x - self.style.cellBorderWidth < x\n                        && cell.x + cell.width + self.style.cellBorderWidth > x\n                        && cell.y - self.style.cellBorderWidth < y\n                        && cell.y + cell.height + self.style.cellBorderWidth > y) {\n                    if (/frozen-row-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'row-resize';\n                        return cell;\n                    }\n                    if (/frozen-column-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'col-resize';\n                        return cell;\n                    }\n                    if (/selection-handle-/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'crosshair';\n                        return cell;\n                    }\n                    if (/vertical-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'vertical-scroll-box';\n                        cell.context = 'vertical-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isVerticalScrollBar = true;\n                        if (y > self.scrollBox.box.v.y + self.scrollBox.scrollBoxHeight) {\n                            cell.dragContext = 'vertical-scroll-bottom';\n                            cell.context = 'vertical-scroll-bottom';\n                        } else if (y < self.scrollBox.box.v.y) {\n                            cell.dragContext = 'vertical-scroll-top';\n                            cell.context = 'vertical-scroll-top';\n                        }\n                        self.canvas.style.cursor = 'default';\n                        return cell;\n                    }\n                    if (/horizontal-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'horizontal-scroll-box';\n                        cell.context = 'horizontal-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isHorizontalScrollBar = true;\n                        if (x > self.scrollBox.box.h.x + self.scrollBox.scrollBoxWidth) {\n                            cell.dragContext = 'horizontal-scroll-right';\n                            cell.context = 'horizontal-scroll-right';\n                        } else if (x < self.scrollBox.box.h.x) {\n                            cell.dragContext = 'horizontal-scroll-left';\n                            cell.context = 'horizontal-scroll-left';\n                        }\n                        self.canvas.style.cursor = 'default';\n                        return cell;\n                    }\n                    border = getBorder(cell);\n                    // check if the border of this cell is the border of the selection and if so show move cursor in move mode\n                    moveBorder = moveMode && cell.selectionBorder && cell.selectionBorder.indexOf(border) !== -1;\n                    if (['l', 'r'].indexOf(border) !== -1\n                            && (self.attributes.allowColumnResize || moveBorder)\n                            && ((self.attributes.allowColumnResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && ((self.attributes.allowRowHeaderResize && (cell.isRowHeader || cell.isCorner)) || !(cell.isRowHeader && cell.isCorner))) {\n                        if (((cell.isColumnHeader || cell.isCorner) || (self.attributes.allowColumnResizeFromCell && cell.isNormal)) && border === 'r') {\n                            cell.context = 'ew-resize';\n                            cell.dragContext = 'ew-resize';\n                            return cell;\n                        }\n                        if (!(cell.isColumnHeader || cell.isCorner) && moveBorder) {\n                            cell.context = xBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (['t', 'b'].indexOf(border) !== -1\n                            && cell.rowIndex > -1\n                            && (self.attributes.allowRowResize || moveBorder)\n                            && ((self.attributes.allowRowResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && !cell.isColumnHeader) {\n                        if (((cell.isRowHeader || cell.isCorner) || (self.attributes.allowRowResizeFromCell && cell.isNormal)) && border === 'b') {\n                            cell.context = 'ns-resize';\n                            cell.dragContext = 'ns-resize';\n                            return cell;\n                        }\n                        if (!(cell.isRowHeader || cell.isCorner) && moveBorder) {\n                            cell.context = yBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (cell.style === 'columnHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'column-reorder';\n                        return cell;\n                    }\n                    if (cell.style === 'rowHeaderCell') {\n                        if ((self.attributes.rowGrabZoneSize + (cell.y - self.style.cellBorderWidth) < y)\n                                || !self.attributes.allowRowReordering) {\n                            cell.dragContext = 'cell';\n                            cell.context = 'cell';\n                        } else {\n                            cell.context = self.cursorGrab;\n                            cell.dragContext = 'row-reorder';\n                        }\n                        return cell;\n                    }\n                    if (cell.isGrid) {\n                        self.hasFocus = false;\n                        cell.dragContext = 'cell-grid';\n                        cell.context = 'cell-grid';\n                        return cell;\n                    }\n                    if (cell.style === 'tree-grid') {\n                        self.hasFocus = false;\n                        cell.dragContext = 'tree';\n                        cell.context = 'tree';\n                        return cell;\n                    }\n                    cell.dragContext = 'cell';\n                    cell.context = 'cell';\n                    return cell;\n                }\n            }\n            self.hasFocus = true;\n            self.canvas.style.cursor = 'default';\n            return {\n                dragContext: 'background',\n                context: 'background',\n                style: 'background',\n                isBackground: true\n            };\n        };\n        /**\n         * Gets the bounds of current selection. \n         * @returns {rect} selection.\n         * @memberof canvasDatagrid\n         * @name getSelectionBounds\n         * @method\n         */\n        self.getSelectionBounds = function () {\n            var low = {x: Infinity, y: Infinity},\n                high = {x: -Infinity, y: -Infinity};\n            self.data.forEach(function (row, rowIndex) {\n                var maxCol, minCol;\n                if (self.selections[rowIndex] && self.selections[rowIndex].length) {\n                    low.y = rowIndex < low.y ? rowIndex : low.y;\n                    high.y = rowIndex > high.y ? rowIndex : high.y;\n                    maxCol = Math.max.apply(null, self.selections[rowIndex]);\n                    minCol = Math.min.apply(null, self.selections[rowIndex]);\n                    low.x = minCol < low.x ? minCol : low.x;\n                    high.x = maxCol > high.x ? maxCol : high.x;\n                }\n            });\n            return {\n                top: low.y,\n                left: low.x,\n                bottom: high.y,\n                right: high.x\n            };\n        };\n        /**\n         * Returns an auto generated schema based on data structure.\n         * @memberof canvasDatagrid\n         * @name getSchemaFromData\n         * @method\n         * @tutorial schema\n         * @returns {schema} schema A schema based on the first item in the data array.\n         */\n        self.getSchemaFromData = function () {\n            return Object.keys(self.data[0] || {' ': ''}).map(function mapEachSchemaColumn(key, index) {\n                var type = self.getBestGuessDataType(key),\n                    i = {\n                        name: key,\n                        title: isNaN(parseInt(key, 10)) ? key : self.integerToAlpha(key).toUpperCase(),\n                        width: self.style.cellWidth,\n                        index: index,\n                        type: type,\n                        filter: self.filter(type)\n                    };\n                if (key === self.uniqueId) {\n                    i.hidden = true;\n                }\n                i[self.uniqueId] = self.getSchemaNameHash(key);\n                return i;\n            });\n        };\n        /**\n         * Clears the change log grid.changes that keeps track of changes to the data set.\n         * This does not undo changes or alter data it is simply a convince array to keep\n         * track of changes made to the data since last this method was called.\n         * @memberof canvasDatagrid\n         * @name clearChangeLog\n         * @method\n         */\n        self.clearChangeLog = function () {\n            self.changes = [];\n        };\n        /**\n         * Selects an area of the grid.\n         * @memberof canvasDatagrid\n         * @name selectArea\n         * @method\n         * @param {rect} bounds A rect object representing the selected values.\n         */\n        self.selectArea = function (bounds, ctrl) {\n            self.selectionBounds = bounds || self.selectionBounds;\n            var x, y, s = self.getSchema();\n            if (!ctrl) {\n                self.selections = [];\n            }\n            if (self.selectionBounds.top < -1\n                    || self.selectionBounds.bottom > self.data.length\n                    || self.selectionBounds.left < -1\n                    || self.selectionBounds.right > s.length) {\n                throw new Error('Impossible selection area');\n            }\n            for (x = self.selectionBounds.top; x <= self.selectionBounds.bottom; x += 1) {\n                self.selections[x] = [];\n                for (y = self.selectionBounds.left; y <= self.selectionBounds.right; y += 1) {\n                    if (self.selections[x].indexOf(y) === -1) {\n                        self.selections[x].push(y);\n                    }\n                }\n            }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Returns the maximum text width for a given column by column name.\n         * @memberof canvasDatagrid\n         * @name findColumnMaxTextLength\n         * @method\n         * @returns {number} The number of pixels wide the maximum width value in the selected column.\n         * @param {string} name The name of the column to calculate the value's width of.\n         */\n        self.findColumnMaxTextLength = function (name) {\n            var m = -Infinity;\n            if (name === 'cornerCell') {\n                self.ctx.font = self.style.rowHeaderCellFont;\n                return self.ctx.measureText((self.data.length + (self.attributes.showNewRow ? 1 : 0)).toString()).width\n                    + self.style.autosizePadding + self.style.autosizeHeaderCellPadding\n                    + self.style.rowHeaderCellPaddingRight\n                    + self.style.rowHeaderCellPaddingLeft\n                    + (self.attributes.tree ? self.style.treeArrowWidth\n                        + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight : 0);\n            }\n            self.getSchema().forEach(function (col) {\n                if (col.name !== name) { return; }\n                self.ctx.font = self.style.columnHeaderCellFont;\n                var t = self.ctx.measureText(col.title || col.name).width\n                    + self.style.headerCellPaddingRight\n                    + self.style.headerCellPaddingLeft;\n                m = t > m ? t : m;\n            });\n            self.data.forEach(function (row) {\n                self.ctx.font = self.style.cellFont;\n                var t = self.ctx.measureText(row[name]).width\n                    + self.style.cellPaddingRight\n                    + self.style.cellPaddingLeft + self.style.cellAutoResizePadding;\n                m = t > m ? t : m;\n            });\n            return m;\n        };\n        /**\n         * Gets the total width of all header columns.\n         * @memberof canvasDatagrid\n         * @name getHeaderWidth\n         * @method\n         */\n        self.getHeaderWidth = function () {\n            return self.getVisibleSchema().reduce(function (total, header) {\n                return total + header.width;\n            }, 0);\n        };\n        self.formatters.string = function cellFormatterString(e) {\n            return e.cell.value !== undefined ? e.cell.value : '';\n        };\n        self.formatters.rowHeaderCell = self.formatters.string;\n        self.formatters.headerCell = self.formatters.string;\n        self.formatters.number = self.formatters.string;\n        self.formatters.int = self.formatters.string;\n        self.formatters.html = self.formatters.string;\n        self.sorters.string = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (a[columnName] === undefined || a[columnName] === null) {\n                    return 1;\n                }\n                if (b[columnName] === undefined || b[columnName] === null) {\n                    return 0;\n                }\n                if (asc) {\n                    if (!a[columnName].localeCompare) { return 1; }\n                    return a[columnName].localeCompare(b[columnName]);\n                }\n                if (!b[columnName].localeCompare) { return 1; }\n                return b[columnName].localeCompare(a[columnName]);\n            };\n        };\n        self.sorters.number = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return a[columnName] - b[columnName];\n                }\n                return b[columnName] - a[columnName];\n            };\n        };\n        self.sorters.date = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return new Date(a[columnName]).getTime()\n                        - new Date(b[columnName]).getTime();\n                }\n                return new Date(b[columnName]).getTime()\n                        - new Date(a[columnName]).getTime();\n            };\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/publicMethods.js\n// module id = 9\n// module chunks = 0"],"sourceRoot":""}