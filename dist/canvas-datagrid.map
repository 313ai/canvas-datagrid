{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///canvas-datagrid.js","webpack:///webpack/bootstrap 58b6012e9ee00f7cba5c","webpack:///./lib/main.js","webpack:///./lib/draw.js","webpack:///./lib/events.js","webpack:///./lib/intf.js","webpack:///./lib/contextMenu.js","webpack:///./lib/defaults.js","webpack:///./lib/dom.js","webpack:///./lib/publicMethods.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","undefined","grid","args","self","createGrid","forEach","init","intf","Array","slice","arguments","window","canvasDatagrid","require","apply","drawOnAllImagesLoaded","loaded","keys","htmlImageCache","html","complete","draw","drawHtml","cell","img","v","innerHTML","formattedValue","x","canvasOffsetLeft","y","canvasOffsetTop","height","width","ctx","drawImage","Image","onload","src","btoa","drawOrderByArrow","fillStyle","style","columnHeaderOrderByArrowColor","strokeStyle","columnHeaderOrderByArrowBorderColor","beginPath","columnHeaderOrderByArrowMarginLeft","columnHeaderOrderByArrowMarginTop","orderDirection","moveTo","lineTo","columnHeaderOrderByArrowWidth","columnHeaderOrderByArrowHeight","stroke","fill","columnHeaderOrderByArrowMarginRight","drawTreeArrow","treeArrowColor","treeArrowBorderColor","treeArrowMarginLeft","treeArrowMarginTop","openChildren","data","uniqueId","treeArrowWidth","treeArrowHeight","treeArrowMarginRight","radiusRect","w","h","radius","r","b","quadraticCurveTo","fillRect","strokeRect","fillText","text","addBorderLine","pos","t","addEllipsis","ellipsisCache","measureText","value","drawText","paddingLeft","paddingTop","paddingRight","paddingBottom","vPos","hPos","orderByArrowWidth","fontHeight","horizontalAlignment","verticalAlignment","perfCounters","drawCount","perfWindowSize","internal","drawCell","rowIndex","rowOrderIndex","header","headerIndex","columnOrderIndex","cellGridAttributes","val","cellStyle","isHeader","test","isCorner","isRowHeader","isColumnHeader","selected","selections","indexOf","hovered","hovers","active","activeCell","columnIndex","isGrid","activeHeader","orders","rows","columns","f","formatters","type","orderByArrowSize","treeArrowSize","cellWidth","sizes","ev","row","columnWidth","cellBorderWidth","visibleRows","push","dispatchEvent","cx","cy","nodeType","offsetTop","offsetLeft","scrollTop","scrollBox","scrollLeft","cellHeight","offsetWidth","offsetHeight","parentNode","offsetParent","isHeaderCellCap","rowOpen","sortColumnIndex","sortRowIndex","gridId","attributes","parentGrid","title","userHeight","rowHeight","userWidth","cornerCell","visibleCells","unshift","lineWidth","cellHeightWithChildGrid","checkScrollHeight","cellWidthWithChildGrid","rd","save","clip","tree","showRowNumbers","childGrids","saveAppearance","cellGridHeight","visible","orderBy","font","console","warn","toString","columnFilters","filterTextPrefix","aCell","selectionBorders","length","restore","drawRowHeader","rowData","index","a","showRowHeaders","rowHeaderCell","rowHeaderCellWidth","drawRow","treeHeight","rowSansTreeHeight","g","trees","columnHeaderCellWidth","scrollIndexLeft","scrollPixelLeft","treeGrid","scrollBarWidth","rowHeaders","isChildGrid","requestAnimationFrame","u","currentCell","rowHeaderCellHeight","getRowHeaderCellHeight","getColumnHeaderCellWidth","performance","now","createRowOrders","getVisibleSchema","scale","devicePixelRatio","backgroundColor","scrollPixelTop","scrollIndexTop","showNewRow","newRow","selectionOverlayBorderWidth","selectionOverlayBorderColor","selectionMode","activeCellOverlayBorderWidth","activeCellOverlayBorderColor","getHeaderWidth","columnHeaderCell","rArgs","showColumnHeaders","order","isHeaderCell","endCap","reorderObject","dragOffset","heigth","reorderMarkerBackgroundColor","reorderMarkerBorderWidth","reorderMarkerBorderColor","dragMode","reorderMarkerIndexBorderWidth","reorderMarkerIndexBorderColor","vb","nb","co","isScrollBoxCorner","scrollBarBoxMargin","scrollBarBorderColor","scrollBarBorderWidth","scrollBarBackgroundColor","scrollBoxHeight","scrollHeight","scrollBarBoxWidth","scrollBarBoxColor","context","scrollBarActiveColor","scrollBarBoxBorderRadius","scrollBoxWidth","scrollWidth","scrollBarCornerBorderColor","scrollBarCornerBackgroundColor","bar","box","resize","gridBorderWidth","gridBorderColor","debug","perf","reduce","toFixed","map","join","htmlImages","scrollIndex","scrollPixel","canvasOffset","pointerLockPosition","size","mouse","touch","touchStart","entities","hasFocus","dragContext","key","touchDelta","touchAnimateTo","touchSigma","xPPS","yPPS","touchingCell","startingCell","animationFrames","getTouchPos","e","rect","canvas","getBoundingClientRect","touches","clientX","left","clientY","top","calculatePPS","touchCell","clearInterval","touchCalcTimeout","Math","abs","touchDeadZone","getCellAt","mousemove","mousedown","touchstart","NativeEvent","stopPropagation","preventDefault","contextmenu","touchScrollStart","touchmove","clearTimeout","touchTimeout","setTimeout","touchSelectTimeMs","setInterval","touchHaltAnimation","document","body","addEventListener","passive","touchend","touchcancel","easing","touchEndAnimation","scrollTo","touchReleaseAnimationDurationMs","dz","mouseup","beginEditAt","click","removeEventListener","touchReleaseAcceleration","fn","events","sfn","idx","splice","defaultPrevented","drawAfterResize","cellBorder","columnHeaderCellBorder","columnHeaderCellBorderWidth","parentDOMNode","parentIsCanvas","accumulator","column","hidden","widthBoxRatio","heightBoxRatio","max","scrollBarBoxMinSize","page","pageUpDownOverlap","resizeEditInput","scroll","input","scrollOffset","bx2","getVisibleCellByIndex","editCell","cellPaddingLeft","clipElement","dontDraw","overridePos","contextMenu","getLayerPos","dragBounds","sBounds","delta","ctrl","controlKey","metaKey","persistantSelectionMode","getSchema","previousCell","scrollTimer","isInGrid","cellBoundaryCrossed","draggingItem","scrollModes","dragItem","cursor","selecting","getSelectionBounds","dragStart","dragStartObject","shiftKey","min","bottom","right","ignoreNextClick","selectRow","dragAddToSelection","selectionBounds","selectArea","autoScrollZone","checkSelectionChange","selectionChanged","selectedData","getSelectedData","endEdit","sorters","number","setFilter","columnHeaderClickBehavior","selectColumn","setActiveCell","treeArrowClickRadius","toggleTree","dragResizeColumn","resizingStartingWidth","resizingStartingHeight","minColumnWidth","minRowHeight","resizeScrollZone","resizeChildGrids","globalRowResize","stopDragResize","setStorageData","scrollGrid","scrollPointerLock","scrollStartMode","movementX","movementY","scrollMode","scrollStart","scrollRepeatRate","selectionScrollIncrement","stopScrollGrid","exitPointerLock","dragReorder","allowColumnReordering","allowRowReordering","source","target","reorderDeadZone","reorderTarget","stopDragReorder","cr","row-reorder","column-reorder","lastMouseDownTarget","button","requestPointerLock","controlInput","focus","keydown","last","cols","keyCode","selectAll","scrollIntoView","selectionFollowsActiveCell","keyup","keypress","dblclick","fitColumnToValues","autosize","scrollWheel","deltaX","deltaY","deltaMode","copy","clipboardData","sData","replace","setData","storageName","invalidSearchExpClass","localStyleLibraryStorageKey","filters","currentFilter","schemaHashes","uId","changes","expandToRow","col","position","ignoreScrollOffset","fillArray","low","high","step","columnHeaderCellHeight","localStorage","setItem","JSON","stringify","schema","tempSchema","createColumnOrders","filter","applyDefaultValue","defaultValue","createNewRowData","getSchemaNameHash","string","getBestGuessDataType","columnName","drawChildGrids","gridKey","getClippingRect","ele","boundingRect","eleRect","clipRect","parentRect","Infinity","setTimer","selectionScrollZone","refreshFromOrigialData","originalData","validateColumn","Error","setDefaults","obj1","obj2","def","setAttributes","defaults","setStyle","styles","colName","dispose","removeChild","eventParent","observer","disconnect","tryLoadStoredOrders","storedSettings","getHeaderByName","getFontHeight","fontStyle","parseFloat","parseFont","initProp","propName","publicStyleKeyIntf","initScrollBox","setDom","appendTo","clearChangeLog","gotoCell","gotoRow","findColumnScrollLeft","findRowScrollTop","findColumnMaxTextLength","disposeContextMenu","isCellVisible","getSchemaFromData","expandTree","collapseTree","insertRow","deleteRow","addRow","insertColumn","deleteColumn","addColumn","setRowHeight","setColumnWidth","resetColumnWidths","resetRowHeights","assertPxColor","clearPxColorAssertions","integerToAlpha","set","filterFor","filterRegExp","regEnd","pattern","exec","flags","substring","flagLength","invalidFilterRegEx","RegExp","toLocaleUpperCase","getItem","parse","blur","normalizeDataset","callback","syncFnInvoked","0","isArray","autoResizeColumns","setScrollTop","preventScrollEvent","isNaN","setScrollLeft","sHeight","sWidth","createContextMenu","items","parentContextMenu","createItems","item","removeChildContext","relatedTarget","container","childMenuArrow","contextItemContainer","children","setAttribute","contextAddCallback","getAttribute","cPos","childContextMenuMarginLeft","childContextMenuMarginTop","createChildContext","createElement","addContent","content","appendChild","createInlineStyle","childContextMenuArrowHTML","clickIndex","Event","checkArrowVisibility","upArrow","downArrow","startHoverScroll","contextHoverScrollAmount","hoverScrollTimeout","contextHoverScrollRateMs","endHoverScroll","selectedIndex","loc","zIndexTop","color","contextMenuArrowColor","el","textAlign","zIndex","inputDropdown","maxHeight","innerHeight","autocompleteBottomMargin","minWidth","contextMenuArrowUpHTML","contextMenuArrowDownHTML","contextMenuWindowMargin","innerWidth","isFinite","createFilterContextMenuItems","checkRegExpErrorState","filterInput","background","contextFilterInputBackground","contextFilterInputColor","contextFilterInvalidRegExpBackground","contextFilterInvalidRegExpColor","fillAutoComplete","autoCompleteItems","maxAutoCompleteItems","disposeAutocomplete","createAutoCompleteContext","iRect","autoCompleteContext","filterContainer","filterLabel","filterAutoCompleteButton","onclick","en","filterOptionText","contextFilterButtonHTML","cf","removeFilterOptionText","addDefaultContextMenuItem","isNormalCell","isBackground","isScrollBar","showFilter","showCopy","copyText","execCommand","showClearSettingsOption","clearSettingsOptionText","allowSorting","showOrderByOption","showOrderByOptionTextAsc","showOrderByOptionTextDesc","contextmenuEvent","createDiposeEvent","contextMenuMarginLeft","contextMenuMarginTop","abort","abortEdit","newValue","oldValue","aborted","editable","enumItems","enum","multiLine","option","valueInEnum","nx","ny","className","css","canvas-datagrid-context-menu-filter-input","verticalAlign","marginLeft","padding","border","contextFilterInputBorder","borderRadius","contextFilterInputBorderRadius","lineHeight","fontWeight","fontFamily","contextFilterInputFontFamily","fontSize","contextFilterInputFontSize","canvas-datagrid-context-menu-filter-button","contextMenuBackground","contextMenuColor","contextFilterButtonBorder","contextFilterButtonBorderRadius","contextMenuFilterButtonFontFamily","contextMenuFilterButtonFontSize","canvas-datagrid-context-child-arrow","cssFloat","childContextMenuArrowColor","contextMenuChildArrowFontSize","contextMenuFontFamily","canvas-datagrid-autocomplete","contextMenuFontSize","contextMenuBorder","contextMenuPadding","contextMenuBorderRadius","opacity","contextMenuOpacity","overflow","canvas-datagrid-autocomplete-item","canvas-datagrid-autocomplete-item:hover","contextMenuHoverBackground","contextMenuHoverColor","canvas-datagrid-canvas","canvas-datagrid","boxSizing","canvas-datagrid-control-input","canvas-datagrid-edit-input","outline","margin","editCellPaddingLeft","editCellFontFamily","editCellFontSize","boxShadow","editCellBoxShadow","editCellBorder","editCellColor","editCellBackgroundColor","appearance","webkitAppearance","mozAppearance","canvas-datagrid-context-menu-item","contextMenuItemMargin","contextMenuItemBorderRadius","canvas-datagrid-context-menu-item:hover","canvas-datagrid-context-menu-label","contextMenuLabelMargin","display","contextMenuLabelDisplay","contextMenuLabelMinWidth","maxWidth","contextMenuLabelMaxWidth","canvas-datagrid-context-menu","canvas-datagrid-invalid-search-regExp","contextMenuFilterInvalidExpresion","prop","onblur","tagName","getContext","textBaseline","MutationObserver","mutations","mutation","observe","ordA","charCodeAt","ordZ","len","String","fromCharCode","floor","colIndex","applyFilter","isColumnSelected","colIsSelected","shift","supressEvent","addCol","ri","st","dragObject","rowId","childGrid","treeGridHeight","direction","sortFunction","dontSetStorageData","sort","useTouchScrollZones","tsz","touchScrollZone","isVerticalScrollBar","isHorizontalScrollBar","borderResizeZone","allowColumnResize","allowColumnResizeFromCell","allowRowHeaderResize","allowRowResize","allowRowResizeFromCell","maxCol","minCol"," ","parseInt","toUpperCase","bounds","rowHeaderCellFont","autosizePadding","autosizeHeaderCellPadding","rowHeaderCellPaddingRight","rowHeaderCellPaddingLeft","columnHeaderCellFont","headerCellPaddingRight","headerCellPaddingLeft","cellFont","cellPaddingRight","cellAutoResizePadding","total","headerCell","int","asc","localeCompare","date","Date","getTime"],"mappings":"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pD,EAAAoD,EAAA+N,KAAAK,KAAAjT,EAAAuC,MAAAopB,sBAAA3rB,EAAA0B,iBACAyR,IAAAtO,EAAAlD,EAAAkD,EAAA+N,KAAAO,IAAAnT,EAAAuC,MAAAqpB,qBAAA5rB,EAAA4B,gBACAwX,MAAAhR,EAAAhH,KAAAU,MAAAsG,EAAAhH,KAAAK,EAAAoD,EAAA+N,KAAAK,KACAkG,OAAA/Q,EAAAhH,KAAAS,OAAAuG,EAAAhH,KAAAO,EAAAkD,EAAA+N,KAAAO,IACAtR,OAAAuG,EAAAhH,KAAAS,OACAC,MAAAsG,EAAAhH,KAAAU,OACiBkkB,GACjBrR,SAAAE,iBAAA,UAAA6W,GACA/Y,EAAAsB,sBAKCtT,MAAA/C,EAAA+B,MAAA9B,EAAAD,QAAAgC,INs9FK,SAAU/B,EAAQD,EAASM,GOh8GjC,GAAAyB,GAAAC,CAEAD,UAuOCE,MAvODD,EAAA,WACA,YACA,iBAAAI,GACAA,EAAAshB,UACAzX,aACA,YACA,YACA,kBACA,4BACA,sBACA,kCACA,iBACA,gBACA,6BACA,0BACA,oBACA,kBACA,uBACA,wBACA,+BACA,wBACA,yBACA,yBACA,4BACA,yBACA,sBACA,8BACA,iCACA,aACA,wBACA,yBACA,sBACA,sBACA,wBACA,2BACA,wBACA,+BACA,+BACA,gCACA,sBACA,+BACA,yBACA,mDACA,qDACA,uDACA,iDACA,iCACA,mCACA,wCACA,gCACA,oBACA,0BACA,uBACA,oBACA,gBACA,qCACA,yBACA,6BAEA2X,SACA,uDACA,mDACA,8BACA,uCACA,qCACA,4DACA,4CACA,yDACA,oCACA,8BACA,4BACA,6BACA,2BACA,+DACA,+CACA,mEACA,mDACA,gEACA,gDACA,gCACA,gCACA,sBACA,6CACA,6BACA,iDACA,6CACA,uBACA,iCACA,+BACA,uBACA,kBACA,gCACA,mCACA,sDACA,sCACA,wBACA,sBACA,uBACA,qBACA,yDACA,yCACA,mCACA,+BACA,qDACA,yCACA,mCACA,gCACA,6DACA,yDACA,oCACA,gDACA,2CACA,8BACA,+CACA,kEACA,kDACA,oCACA,kCACA,mCACA,iCACA,+CACA,oBACA,iEACA,0CACA,uCACA,uDACA,gEACA,uCACA,4CACA,8CACA,sCACA,8DACA,6DACA,gDACA,wCACA,sCACA,mDACA,yDACA,kCACA,yCACA,2CACA,mDACA,2CACA,+DACA,uCACA,+BACA,wDACA,iDACA,sCACA,gCACA,2CACA,uCACA,qCACA,oCACA,4BACA,4BACA,8BACA,6BACA,8BACA,uDACA,mDACA,oCACA,sDACA,kDACA,0BACA,oCACA,4BACA,0BACA,6CACA,sBACA,iEACA,0CACA,2DACA,qCACA,yCACA,0CACA,wCACA,qCACA,sBACA,iBACA,oBACA,mBACA,sDACA,kDACA,kCACA,0DACA,uCACA,0DACA,sDACA,+BACA,6CACA,wCACA,2BACA,4CACA,+DACA,+CACA,iCACA,+BACA,gCACA,8BACA,kEACA,qDACA,4CACA,0BACA,kDACA,sDACA,kDACA,4BACA,mCACA,+CACA,yBACA,2BACA,wBACA,4DACA,wDACA,sBACA,wDACA,oCACA,kDACA,2BACA,2BACA,4CACA,sBACA,0BACA,2BACA,yBACA,sBACA,0BAIC7gB,MAAA/C,EAAA+B,MAAA9B,EAAAD,QAAAgC,IPw8GK,SAAU/B,EAAQD,EAASM,GQjrHjC,GAAAyB,GAAAC,CAEAD,UA4XCE,MA5XDD,EAAA,WACA,YACA,iBAAAI,GAQAA,EAAA+Z,QAAA,SAAA8R,GAGA,QAAAC,KACAD,GAAA,EAHA,GAAAzqB,GAAApB,EAAAkX,MAAAI,SACA3V,EAAAP,EAAA+E,QAIA,IAAAnG,EAAA0I,cAAA,iBACAtH,OACA2qB,SAAA/rB,EAAAkX,MAAAhS,MACA8mB,SAAA5qB,EAAA8D,MACA2mB,MAAAC,EACA5U,MAAAlX,EAAAkX,QACqB,QACrB,IAAAlX,EAAAkX,MAAAhS,QAAA9D,EAAA8D,QAAA2mB,EAAA,CAIA,GAHA7rB,EAAAye,QAAA9c,GAAA3B,EAAAye,QAAA9c,OACA3B,EAAAye,QAAA9c,GAAAP,EAAAiF,OAAA1H,MAAAqB,EAAAkX,MAAAhS,MACA9D,EAAAwC,KAAA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","file":"canvas-datagrid.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"canvasDatagrid\"] = factory();\n\telse\n\t\troot[\"canvasDatagrid\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"canvasDatagrid\"] = factory();\n\telse\n\t\troot[\"canvasDatagrid\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n    __webpack_require__(1),\n    __webpack_require__(2),\n    __webpack_require__(3),\n    __webpack_require__(4),\n    __webpack_require__(5),\n    __webpack_require__(6),\n    __webpack_require__(7)\n], __WEBPACK_AMD_DEFINE_RESULT__ = function context() {\n    'use strict';\n    var modules = Array.prototype.slice.call(arguments);\n    function grid(args) {\n        args = args || {};\n        var self = {};\n        self.args = args;\n        self.createGrid = grid;\n        modules.forEach(function (module) {\n            module(self);\n        });\n        self.init();\n        return self.intf;\n    }\n    if (window && !window.canvasDatagrid && !window.require) {\n        window.canvasDatagrid = grid;\n    }\n    module.exports = grid;\n    return grid;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals XMLSerializer: false, define: true, Blob: false, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var perfCounters = [],\n            drawCount = 0,\n            perfWindowSize = 20;\n        self.htmlImageCache = {};\n        function drawOnAllImagesLoaded() {\n            var loaded = true;\n            Object.keys(self.htmlImageCache).forEach(function (html) {\n                if (!self.htmlImageCache[html].complete) {\n                    loaded = false;\n                }\n            });\n            if (loaded) {\n                self.draw();\n            }\n        }\n        function drawHtml(cell) {\n            var img,\n                v = cell.innerHTML || cell.formattedValue,\n                x = cell.x + self.canvasOffsetLeft,\n                y = cell.y + self.canvasOffsetTop;\n            if (self.htmlImageCache[v]) {\n                img = self.htmlImageCache[v];\n                if (img.height !== cell.height || img.width !== cell.width) {\n                    // height and width of the cell has changed, invalidate cache\n                    self.htmlImageCache[v] = undefined;\n                } else {\n                    if (!img.complete) {\n                        return;\n                    }\n                    return self.ctx.drawImage(img, x, y);\n                }\n            }\n            img = new Image(cell.width, cell.height);\n            self.htmlImageCache[v] = img;\n            img.onload = function () {\n                self.ctx.drawImage(img, x, y);\n                drawOnAllImagesLoaded();\n            };\n            img.src = 'data:image/svg+xml;base64,' + btoa(\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + cell.width + '\" height=\"' + cell.height + '\">\\n' +\n                    '<foreignObject class=\"node\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\\n' +\n                    '<body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;padding:0;\">\\n' +\n                    v + '\\n' +\n                    '</body>' +\n                    '</foreignObject>\\n' +\n                    '</svg>\\n'\n            );\n        }\n        function drawOrderByArrow(x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.columnHeaderOrderByArrowColor;\n            self.ctx.strokeStyle = self.style.columnHeaderOrderByArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + self.style.columnHeaderOrderByArrowMarginLeft;\n            y = y + self.style.columnHeaderOrderByArrowMarginTop;\n            if (self.orderDirection === 'asc') {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + self.style.columnHeaderOrderByArrowWidth, y);\n                self.ctx.lineTo(x + (self.style.columnHeaderOrderByArrowWidth * 0.5), y + self.style.columnHeaderOrderByArrowHeight);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y + self.style.columnHeaderOrderByArrowHeight);\n                self.ctx.lineTo(x + self.style.columnHeaderOrderByArrowWidth, y + self.style.columnHeaderOrderByArrowHeight);\n                self.ctx.lineTo(x + (self.style.columnHeaderOrderByArrowWidth * 0.5), y);\n                self.ctx.lineTo(x, y + self.style.columnHeaderOrderByArrowHeight);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return self.style.columnHeaderOrderByArrowMarginLeft\n                + self.style.columnHeaderOrderByArrowWidth\n                + self.style.columnHeaderOrderByArrowMarginRight;\n        }\n        function drawTreeArrow(cell, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.treeArrowColor;\n            self.ctx.strokeStyle = self.style.treeArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + self.style.treeArrowMarginLeft;\n            y = y + self.style.treeArrowMarginTop;\n            if (self.openChildren[cell.data[self.uniqueId]]) {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + self.style.treeArrowWidth, y);\n                self.ctx.lineTo(x + (self.style.treeArrowWidth * 0.5), y + self.style.treeArrowHeight);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y);\n                self.ctx.lineTo(x + self.style.treeArrowHeight, y + (self.style.treeArrowWidth * 0.5));\n                self.ctx.lineTo(x, y + self.style.treeArrowWidth);\n                self.ctx.lineTo(x, y);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return self.style.treeArrowMarginLeft\n                + self.style.treeArrowWidth\n                + self.style.treeArrowMarginRight;\n        }\n        function radiusRect(x, y, w, h, radius) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            var r = x + w, b = y + h;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x + radius, y);\n            self.ctx.lineTo(r - radius, y);\n            self.ctx.quadraticCurveTo(r, y, r, y + radius);\n            self.ctx.lineTo(r, y + h - radius);\n            self.ctx.quadraticCurveTo(r, b, r - radius, b);\n            self.ctx.lineTo(x + radius, b);\n            self.ctx.quadraticCurveTo(x, b, x, b - radius);\n            self.ctx.lineTo(x, y + radius);\n            self.ctx.quadraticCurveTo(x, y, x + radius, y);\n        }\n        function fillRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillRect(x, y, w, h);\n        }\n        function strokeRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.strokeRect(x, y, w, h);\n        }\n        function fillText(text, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillText(text, x, y);\n        }\n        function addBorderLine(c, pos) {\n            self.ctx.beginPath();\n            var p = {\n                t: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                },\n                r: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                b: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                l: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                },\n            };\n            p[pos]();\n            self.ctx.stroke();\n        }\n        function addEllipsis(text, width) {\n            var c, w = 0;\n            if (self.ellipsisCache[text] && self.ellipsisCache[text][width]) {\n                return self.ellipsisCache[text][width];\n            }\n            //TODO Add ellipsis back when there is a fast way to do it\n            w = self.ctx.measureText(text).width;\n            self.ellipsisCache[text] = self.ellipsisCache[text] || {};\n            c = {value: text, width: w};\n            self.ellipsisCache[text][width] = c;\n            return c;\n        }\n        function drawText(cell) {\n            var paddingLeft = self.style[cell.style + 'PaddingLeft'],\n                paddingTop = self.style[cell.style + 'PaddingTop'],\n                paddingRight = self.style[cell.style + 'PaddingRight'],\n                paddingBottom = self.style[cell.style + 'PaddingBottom'],\n                vPos = paddingTop + cell.height - (cell.height * 0.5),\n                hPos = paddingLeft + cell.treeArrowWidth + cell.orderByArrowWidth;\n            cell.text = addEllipsis(cell.formattedValue, cell.width - paddingRight - paddingLeft);\n            cell.text.height = cell.fontHeight;\n            if (cell.horizontalAlignment === 'right') {\n                hPos = cell.width - cell.text.width - paddingRight;\n            } else if (cell.horizontalAlignment === 'center') {\n                hPos = (cell.width / 2) - (cell.text.width / 2);\n            }\n            if (cell.verticalAlignment === 'top') {\n                vPos = paddingTop + cell.text.height;\n            } else if (cell.verticalAlignment === 'bottom') {\n                vPos = cell.height - paddingBottom - cell.text.height;\n            }\n            cell.text.x = cell.x + hPos;\n            cell.text.y = cell.y + vPos;\n            fillText(cell.text.value, cell.text.x, cell.text.y);\n        }\n        /**\n         * Redraws the grid. No matter what the change, this is the only method required to refresh everything.\n         * @memberof canvasDataGrid\n         * @name draw\n         * @method\n         */\n        self.draw = function (internal) {\n            if (self.dispatchEvent('beforedraw', {})) { return; }\n            if (!self.isChildGrid && (!self.height || !self.width)) {\n                return;\n            }\n            if (self.isChildGrid && internal) {\n                requestAnimationFrame(self.parentGrid.draw);\n                return;\n            }\n            if (self.intf.visible === false) {\n                return;\n            }\n            // initial values\n            var checkScrollHeight, rowHeaderCell, p, cx, cy, treeGrid, rowOpen,\n                rowHeight, cornerCell, y, x, c, h, w, s, r, rd, aCell,\n                selectionBorders = [],\n                rowHeaders = [],\n                l = self.data.length,\n                u = self.currentCell || {},\n                rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth(),\n                cellHeight = self.style.cellHeight;\n            drawCount += 1;\n            p = performance.now();\n            // if data length has changed, there is no way to know\n            if (self.data.length > self.orders.rows.length) {\n                self.createRowOrders();\n            }\n            function drawScrollBars() {\n                var v = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-bar'\n                    },\n                    n = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-bar'\n                    },\n                    vb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-box'\n                    },\n                    nb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-box'\n                    },\n                    co = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        isCorner: true,\n                        isScrollBoxCorner: true,\n                        style: 'scroll-box-corner'\n                    },\n                    m = (self.style.scrollBarBoxMargin * 2),\n                    d = self.style.scrollBarBoxMargin * 0.5;\n                self.ctx.strokeStyle = self.style.scrollBarBorderColor;\n                self.ctx.lineWidth = self.style.scrollBarBorderWidth;\n                // vertical\n                v.x += w - self.style.scrollBarWidth - self.style.scrollBarBorderWidth - d;\n                v.y += rowHeaderCellHeight;\n                v.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                v.height = h - rowHeaderCellHeight - self.style.scrollBarWidth - d - m;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(v.x, v.y, v.width, v.height + m);\n                strokeRect(v.x, v.y, v.width, v.height + m);\n                // vertical box\n                vb.x = v.x + self.style.scrollBarBoxMargin;\n                vb.y = rowHeaderCellHeight + self.style.scrollBarBoxMargin\n                    + ((v.height - self.scrollBox.scrollBoxHeight)\n                        * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight));\n                vb.width = self.style.scrollBarBoxWidth;\n                vb.height = self.scrollBox.scrollBoxHeight;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/vertical/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (vb.height < v.height) {\n                    radiusRect(vb.x, vb.y, vb.width, vb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                // horizontal\n                n.x += columnHeaderCellWidth;\n                n.y += h - self.style.scrollBarWidth - d;\n                n.width = w - self.style.scrollBarWidth - columnHeaderCellWidth - d - m;\n                n.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(n.x, n.y, n.width + m, n.height);\n                strokeRect(n.x, n.y, n.width + m, n.height);\n                // horizontal box\n                nb.y = n.y + self.style.scrollBarBoxMargin;\n                nb.x = columnHeaderCellWidth + self.style.scrollBarBoxMargin\n                    + ((n.width - self.scrollBox.scrollBoxWidth)\n                        * (self.scrollBox.scrollLeft / self.scrollBox.scrollWidth));\n                nb.width = self.scrollBox.scrollBoxWidth;\n                nb.height = self.style.scrollBarBoxWidth;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/horizontal/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (nb.width < n.width) {\n                    radiusRect(nb.x, nb.y, nb.width, nb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                //corner\n                self.ctx.strokeStyle = self.style.scrollBarCornerBorderColor;\n                self.ctx.fillStyle = self.style.scrollBarCornerBackgroundColor;\n                co.x = n.x + n.width + m;\n                co.y = v.y + v.height + m;\n                co.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                co.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                radiusRect(co.x, co.y, co.width, co.height, 0);\n                self.ctx.stroke();\n                self.ctx.fill();\n                self.visibleCells.unshift(v);\n                self.visibleCells.unshift(vb);\n                self.visibleCells.unshift(n);\n                self.visibleCells.unshift(nb);\n                self.visibleCells.unshift(co);\n                self.scrollBox.bar = {\n                    v: v,\n                    h: n\n                };\n                self.scrollBox.box = {\n                    v: vb,\n                    h: nb\n                };\n            }\n            function drawCell(d, rowIndex, rowOrderIndex) {\n                return function drawEach(header, headerIndex, columnOrderIndex) {\n                    var cellStyle = header.style || 'cell',\n                        cellGridAttributes,\n                        cell,\n                        isHeader = /HeaderCell/.test(cellStyle),\n                        isCorner = /cornerCell/.test(cellStyle),\n                        isRowHeader = 'rowHeaderCell' === cellStyle,\n                        isColumnHeader = 'columnHeaderCell' === cellStyle,\n                        selected = self.selections[rowOrderIndex] && self.selections[rowOrderIndex].indexOf(columnOrderIndex) !== -1,\n                        hovered = self.hovers[d[self.uniqueId]] && self.hovers[d[self.uniqueId]].indexOf(columnOrderIndex) !== -1,\n                        active = self.activeCell.rowIndex === rowOrderIndex && self.activeCell.columnIndex === columnOrderIndex,\n                        isGrid = typeof d[header.name] === 'object' && d[header.name] !== null && d[header.name] !== undefined,\n                        activeHeader = (self.orders.rows[self.activeCell.rowIndex] === rowOrderIndex\n                                || self.orders.columns[self.activeCell.columnIndex] === columnOrderIndex)\n                            && (columnOrderIndex === -1 || rowOrderIndex === -1)\n                            ? (isRowHeader ? 'activeRowHeaderCell' : 'activeColumnHeaderCell') : false,\n                        val,\n                        f = self.formatters[header.type || 'string'],\n                        orderByArrowSize = 0,\n                        treeArrowSize = 0,\n                        cellWidth = self.sizes.columns[isRowHeader ? 'cornerCell' : header[self.uniqueId]] || header.width,\n                        ev = {\n                            value: d[header.name],\n                            row: d,\n                            header: header\n                        };\n                    if (cellStyle === 'headerCellCap') {\n                        cellWidth = w - x;\n                    }\n                    // if no data or schema are defined, a width is provided to the stub column\n                    if (cellWidth === undefined) {\n                        cellWidth = self.style.columnWidth;\n                    }\n                    if (x + cellWidth + self.style.cellBorderWidth < 0) {\n                        x += cellWidth + self.style.cellBorderWidth;\n                    }\n                    if (active) {\n                        cellStyle = 'activeCell';\n                    }\n                    if (self.visibleRows.indexOf(rowIndex) === -1 && !isHeader) {\n                        self.visibleRows.push(rowIndex);\n                    }\n                    val = self.dispatchEvent('formatcellvalue', ev);\n                    if (!self.dispatchEvent('beforerendercell', ev)) {\n                        cx = x;\n                        cy = y;\n                        if (cellStyle === 'cornerCell') {\n                            cx = 0;\n                            cy = 0;\n                        } else if (isRowHeader) {\n                            cx = 0;\n                        } else if (isHeader) {\n                            cy = 0;\n                        }\n                        cell = {\n                            type: isGrid ? 'canvas-datagrid-cell' : header.type,\n                            style: cellStyle,\n                            nodeType: 'canvas-datagrid-cell',\n                            x: cx,\n                            y: cy,\n                            horizontalAlignment: self.style[cellStyle + 'HorizontalAlignment'],\n                            verticalAlignment: self.style[cellStyle + 'VerticalAlignment'],\n                            offsetTop: self.canvasOffsetTop + cy,\n                            offsetLeft: self.canvasOffsetLeft + cx,\n                            scrollTop: self.scrollBox.scrollTop,\n                            scrollLeft: self.scrollBox.scrollLeft,\n                            active: active || activeHeader,\n                            hovered: hovered,\n                            selected: selected,\n                            width: cellWidth,\n                            height: cellHeight,\n                            offsetWidth: cellWidth,\n                            offsetHeight: cellHeight,\n                            parentNode: self.intf.parentNode,\n                            offsetParent: self.intf.parentNode,\n                            data: d,\n                            isCorner: isCorner,\n                            isHeader: isHeader,\n                            isColumnHeader: isColumnHeader,\n                            isHeaderCellCap: !!header.isHeaderCellCap,\n                            isRowHeader: isRowHeader,\n                            rowOpen: rowOpen,\n                            header: header,\n                            columnIndex: columnOrderIndex,\n                            rowIndex: rowOrderIndex,\n                            sortColumnIndex: headerIndex,\n                            sortRowIndex: rowIndex,\n                            isGrid: isGrid,\n                            gridId: (self.attributes.name || '') + d[self.uniqueId] + ':' + header[self.uniqueId],\n                            parentGrid: self.intf,\n                            innerHTML: '',\n                            activeHeader: activeHeader,\n                            value: isHeader && !isRowHeader ? (header.title || header.name) : d[header.name]\n                        };\n                        ev.cell = cell;\n                        cell.userHeight = cell.isHeader ? self.sizes.rows[-1] : rowHeight;\n                        cell.userWidth = cell.isHeader ? self.sizes.columns.cornerCell : self.sizes.columns[header[self.uniqueId]];\n                        cell[self.uniqueId] = d[self.uniqueId];\n                        self.visibleCells.unshift(cell);\n                        self.ctx.fillStyle = self.style[cellStyle + 'BackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'BorderColor'];\n                        self.ctx.lineWidth = self.style[cellStyle + 'BorderWidth'];\n                        if (hovered) {\n                            self.ctx.fillStyle = self.style[cellStyle + 'HoverBackgroundColor'];\n                            self.ctx.strokeStyle = self.style[cellStyle + 'HoverBorderColor'];\n                        }\n                        if (selected) {\n                            self.ctx.fillStyle = self.style[cellStyle + 'SelectedBackgroundColor'];\n                            self.ctx.strokeStyle = self.style[cellStyle + 'SelectedBorderColor'];\n                        }\n                        if (activeHeader) {\n                            self.ctx.fillStyle = self.style[activeHeader + 'BackgroundColor'];\n                        }\n                        self.dispatchEvent('rendercell', ev);\n                        if (cell.isGrid) {\n                            if (cell.height !== rowHeight) {\n                                cell.height = rowHeight || self.style.cellHeightWithChildGrid;\n                                checkScrollHeight = true;\n                            }\n                            cell.width = self.sizes.columns[header[self.uniqueId]] || self.style.cellWidthWithChildGrid;\n                        }\n                        if (rowOpen && !cell.isRowHeader) {\n                            cell.height = self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight;\n                        }\n                        if (!cell.isGrid) {\n                            fillRect(cx, cy, cell.width, cell.height);\n                            strokeRect(cx, cy, cell.width, cell.height);\n                        }\n                        self.ctx.save();\n                        radiusRect(cell.x, cell.y, cell.width, cell.height, 0);\n                        self.ctx.clip();\n                        self.dispatchEvent('afterrendercell', ev);\n                        if (cell.height !== cellHeight && !(rowOpen && !cell.isRowHeader)) {\n                            self.sizes.rows[isHeader ? -1 : d[self.uniqueId]] = cell.height;\n                            checkScrollHeight = true;\n                        }\n                        if (cell.width !== cellWidth) {\n                            self.sizes.columns[header[self.uniqueId]] = cell.width;\n                            checkScrollHeight = true;\n                        }\n                        if (isRowHeader && self.attributes.tree) {\n                            if (!self.dispatchEvent('rendertreearrow', ev)) {\n                                treeArrowSize = drawTreeArrow(cell, self.style[cellStyle + 'PaddingLeft'], cy, 0);\n                            }\n                        }\n                        if ((self.attributes.showRowNumbers && isRowHeader)\n                                || !isRowHeader) {\n                            if (cell.isGrid) {\n                                if (!self.childGrids[cell.gridId]) {\n                                    cellGridAttributes = self.args.cellGridAttributes || self.args;\n                                    cellGridAttributes.name = self.attributes.saveAppearance ? cell.gridId : undefined;\n                                    cellGridAttributes.parentNode = cell;\n                                    cellGridAttributes.data = d[header.name];\n                                    self.childGrids[cell.gridId] = self.createGrid(cellGridAttributes);\n                                    self.sizes.rows[rd[self.uniqueId]]\n                                        = self.sizes.rows[rd[self.uniqueId]] || self.style.cellGridHeight;\n                                    checkScrollHeight = true;\n                                }\n                                cell.grid = self.childGrids[cell.gridId];\n                                cell.grid.parentNode = cell;\n                                cell.grid.visible = true;\n                                cell.grid.draw();\n                                self.dispatchEvent('rendercellgrid', ev);\n                            } else {\n                                if (self.childGrids[cell.gridId]) {\n                                    self.childGrids[cell.gridId].parentNode.offsetHeight = 0;\n                                }\n                                if (isHeader && self.orderBy === header.name) {\n                                    if (!self.dispatchEvent('renderorderbyarrow', ev)) {\n                                        orderByArrowSize = drawOrderByArrow(cx + self.style[cellStyle + 'PaddingLeft'], 0);\n                                    }\n                                }\n                                self.ctx.fillStyle = self.style[cellStyle + 'Color'];\n                                if (hovered) {\n                                    self.ctx.fillStyle = self.style[cellStyle + 'HoverColor'];\n                                }\n                                if (selected) {\n                                    self.ctx.fillStyle = self.style[cellStyle + 'SelectedColor'];\n                                }\n                                if (activeHeader) {\n                                    self.ctx.fillStyle = self.style[activeHeader + 'Color'];\n                                }\n                                self.ctx.font = self.style[cellStyle + 'Font'];\n                                cell.fontHeight = self.style[cellStyle + 'FontHeight'];\n                                cell.treeArrowWidth = treeArrowSize;\n                                cell.orderByArrowWidth = orderByArrowSize;\n                                val = val !== undefined ? val : f\n                                    ? f(ev) : '';\n                                if (val === undefined && !f) {\n                                    val = '';\n                                    console.warn('canvas-datagrid: Unknown format '\n                                        + header.type + ' add a cellFormater');\n                                }\n                                cell.formattedValue = ((val !== undefined && val !== null) ? val : '').toString();\n                                if (self.columnFilters && self.columnFilters[val] !== undefined && isHeader) {\n                                    cell.formattedValue = self.attributes.filterTextPrefix + val;\n                                }\n                                if (!self.dispatchEvent('rendertext', ev)) {\n                                    if (cell.innerHTML || header.type === 'html') {\n                                        drawHtml(cell);\n                                    } else {\n                                        drawText(cell);\n                                    }\n                                }\n                            }\n                        }\n                        if (active) {\n                            aCell = cell;\n                        }\n                        if (selected && !isRowHeader) {\n                            if ((!self.selections[cell.rowIndex - 1]\n                                    || self.selections[cell.rowIndex - 1].indexOf(cell.columnIndex) === -1\n                                    || cell.rowIndex === 0)\n                                    && !cell.isHeader) {\n                                selectionBorders.push([cell, 't']);\n                            }\n                            if (!self.selections[cell.rowIndex + 1]\n                                    || self.selections[cell.rowIndex + 1].indexOf(cell.columnIndex) === -1) {\n                                selectionBorders.push([cell, 'b']);\n                            }\n                            if (!self.selections[cell.rowIndex] || cell.columnIndex === 0\n                                    || self.selections[cell.rowIndex].indexOf(cell.columnIndex - 1) === -1) {\n                                selectionBorders.push([cell, 'l']);\n                            }\n                            if (!self.selections[cell.rowIndex] || cell.columnIndex === s.length\n                                    || self.selections[cell.rowIndex].indexOf(cell.columnIndex + 1) === -1) {\n                                selectionBorders.push([cell, 'r']);\n                            }\n                        }\n                        self.ctx.restore();\n                        x += cell.width + self.style.cellBorderWidth;\n                        return cell.width;\n                    }\n                };\n            }\n            function drawRowHeader(rowData, index, rowOrderIndex) {\n                var a;\n                if (self.attributes.showRowHeaders) {\n                    x = 0;\n                    rowHeaderCell = {'rowHeaderCell': index + 1 };\n                    rowHeaderCell[self.uniqueId] = rowData[self.uniqueId];\n                    a = {\n                        name: 'rowHeaderCell',\n                        width: self.style.rowHeaderCellWidth,\n                        style: 'rowHeaderCell',\n                        type: 'string',\n                        data: rowData[self.uniqueId],\n                        index: -1\n                    };\n                    a[self.uniqueId] = rowData[self.uniqueId];\n                    rowOpen = self.openChildren[rowData[self.uniqueId]];\n                    drawCell(rowHeaderCell, index, rowOrderIndex)(a, -1, -1);\n                }\n            }\n            function drawHeaders() {\n                var d, g = s.length, i, o, columnHeaderCell, header;\n                rowHeaders.forEach(function (rArgs) {\n                    y = rArgs[3];\n                    cellHeight = rArgs[4];\n                    drawRowHeader(rArgs[0], rArgs[1], rArgs[2]);\n                });\n                if (self.attributes.showColumnHeaders) {\n                    x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft;\n                    if (self.attributes.showRowHeaders) {\n                        x += columnHeaderCellWidth;\n                    }\n                    y = 0;\n                    // cell height might have changed during drawing\n                    cellHeight = self.getRowHeaderCellHeight();\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        header = s[i];\n                        d = {\n                            title: header.title,\n                            name: header.name,\n                            width: header.width,\n                            style: 'columnHeaderCell',\n                            type: 'string',\n                            index: o,\n                            order: i\n                        };\n                        columnHeaderCell = {'columnHeaderCell': header.title || header.name};\n                        columnHeaderCell[self.uniqueId] = 'h' + header[self.uniqueId];\n                        d[self.uniqueId] = header[self.uniqueId];\n                        x += drawCell(columnHeaderCell, -1, -1)(d, o, i);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    // fill in the space right of the headers\n                    if (x < w) {\n                        c = {\n                            name: '',\n                            width: self.style.scrollBarWidth,\n                            style: 'headerCellCap',\n                            isHeaderCell: true,\n                            isHeaderCellCap: true,\n                            type: 'string',\n                            index: s.length\n                        };\n                        c[self.uniqueId] = 'columnHeaderCell';\n                        drawCell({endCap: ''}, -1, -1)(c, -1, -1);\n                    }\n                    // fill in the space right of the headers\n                    if (self.attributes.showRowHeaders) {\n                        cornerCell = {'cornerCell': '' };\n                        cornerCell[self.uniqueId] = 'cornerCell';\n                        x = 0;\n                        c = {\n                            name: 'cornerCell',\n                            width: self.style.rowHeaderCellWidth,\n                            style: 'cornerCell',\n                            type: 'string',\n                            index: -1\n                        };\n                        c[self.uniqueId] = 'cornerCell';\n                        drawCell(cornerCell, -1, -1)(c, -1, -1);\n                    }\n                }\n            }\n            function drawRow(r, d) {\n                var i, treeHeight, rowSansTreeHeight, o, g = s.length;\n                if (y - (cellHeight * 2) > h) {\n                    return false;\n                }\n                rd = self.data[r];\n                rowOpen = self.openChildren[rd[self.uniqueId]];\n                rowSansTreeHeight = self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight;\n                treeHeight = (rowOpen ? self.sizes.trees[rd[self.uniqueId]] : 0);\n                rowHeight = rowSansTreeHeight + treeHeight;\n                if (y < rowHeight * -1) {\n                    return false;\n                }\n                if (self.attributes.showRowHeaders) {\n                    x += columnHeaderCellWidth;\n                }\n                cellHeight = rowHeight;\n                for (o = self.scrollIndexLeft; o < g; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        break;\n                    }\n                }\n                // cell height might have changed during drawing\n                cellHeight = rowHeight;\n                x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft + self.style.cellBorderWidth;\n                // don't draw a tree for the new row\n                treeGrid = self.childGrids[rd[self.uniqueId]];\n                if (r !== self.data.length && rowOpen) {\n                    treeGrid.visible = true;\n                    treeGrid.parentNode = {\n                        offsetTop: y + rowSansTreeHeight + self.canvasOffsetTop,\n                        offsetLeft: columnHeaderCellWidth - 1 + self.canvasOffsetLeft,\n                        offsetHeight: treeHeight,\n                        offsetWidth: self.width - columnHeaderCellWidth - self.style.scrollBarWidth - 1,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: self.style,\n                        nodeType: 'canvas-datagrid-tree',\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        rowIndex: r\n                    };\n                    self.visibleCells.unshift({\n                        rowIndex: x,\n                        columnIndex: 0,\n                        y: treeGrid.parentNode.offsetTop,\n                        x: treeGrid.parentNode.offsetLeft,\n                        height: treeGrid.parentNode.offsetHeight,\n                        width: treeGrid.parentNode.offsetWidth,\n                        style: 'tree-grid',\n                        type: treeGrid.parentNode.nodeType\n                    });\n                    treeGrid.draw();\n                } else if (treeGrid) {\n                    treeGrid.parentNode.offsetHeight = 0;\n                    delete self.sizes.trees[rd[self.uniqueId]];\n                }\n                rowHeaders.push([rd, r, d, y, rowHeight]);\n                y += cellHeight + self.style.cellBorderWidth;\n                return true;\n            }\n            function initDraw() {\n                self.visibleRows = [];\n                s = self.getVisibleSchema();\n                self.visibleCells = [];\n                self.canvasOffsetTop = self.isChildGrid ? self.parentNode.offsetTop : 0;\n                self.canvasOffsetLeft = self.isChildGrid ? self.parentNode.offsetLeft : 0;\n                h = self.height;\n                w = self.width;\n                if (!self.isChildGrid) {\n                    self.ctx.scale(window.devicePixelRatio, window.devicePixelRatio);\n                }\n            }\n            function drawBackground() {\n                radiusRect(0, 0, w, h, 0);\n                self.ctx.clip();\n                self.ctx.fillStyle = self.style.backgroundColor;\n                fillRect(0, 0, w, h);\n            }\n            function drawRows() {\n                var o, n, i, g = s.length;\n                x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft + self.style.cellBorderWidth;\n                y = (self.scrollBox.scrollTop * -1) + rowHeaderCellHeight + self.scrollPixelTop + self.style.cellBorderWidth;\n                for (r = self.scrollIndexTop; r < l; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.showNewRow) {\n                    if (self.attributes.showRowHeaders) {\n                        x += columnHeaderCellWidth;\n                    }\n                    rowHeight = cellHeight = self.style.cellHeight;\n                    rowOpen = false;\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        x += drawCell(self.newRow, self.data.length, self.data.length)(s[i], i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    rowHeaders.push([self.newRow, self.data.length, self.data.length, y, rowHeight]);\n                }\n            }\n            function drawReorderMarkers() {\n                if (!self.reorderObject) { return; }\n                var b = {\n                        height: self.reorderObject.height,\n                        width: self.reorderObject.width,\n                        x: self.reorderObject.x + self.reorderObject.dragOffset.x,\n                        y: self.reorderObject.y + self.reorderObject.dragOffset.y\n                    },\n                    m = {\n                        width: w,\n                        heigth: h,\n                        x: 0,\n                        y: 0\n                    };\n                self.ctx.fillStyle = self.style.reorderMarkerBackgroundColor;\n                self.ctx.lineWidth = self.style.reorderMarkerBorderWidth;\n                self.ctx.strokeStyle = self.style.reorderMarkerBorderColor;\n                if (self.dragMode === 'row-reorder') {\n                    b.width = w;\n                    b.x = 0;\n                    m.width = w;\n                    m.y = self.currentCell.y;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.rowIndex !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex - 1 !== self.reorderObject.rowIndex) {\n                        addBorderLine(m, 't');\n                    }\n                } else if (self.dragMode === 'column-reorder' && self.reorderObject) {\n                    b.height = h;\n                    b.y = 0;\n                    m.height = h;\n                    m.x = self.currentCell.x;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.columnIndex !== self.reorderObject.columnIndex\n                            && self.currentCell.columnIndex - 1 !== self.reorderObject.columnIndex) {\n                        addBorderLine(m, 'l');\n                    }\n                }\n            }\n            function drawBorder() {\n                self.ctx.lineWidth = self.style.gridBorderWidth;\n                self.ctx.strokeStyle = self.style.gridBorderColor;\n                strokeRect(0, 0, self.width, self.height);\n            }\n            function drawSelectionBorders() {\n                self.ctx.lineWidth = self.style.selectionOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.selectionOverlayBorderColor;\n                selectionBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n            }\n            function drawActiveCell() {\n                if (!aCell) { return; }\n                if (self.attributes.selectionMode === 'row') {\n                    if (self.activeCell && self.activeCell.rowIndex === aCell.rowIndex) {\n                        self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                        self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                        strokeRect(0, aCell.y, self.getHeaderWidth() + columnHeaderCellWidth, rowHeight);\n                    }\n                } else {\n                    self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                    self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                    strokeRect(aCell.x, aCell.y, aCell.width, aCell.height);\n                }\n            }\n            function drawDebug() {\n                perfCounters[drawCount % perfWindowSize] = performance.now() - p;\n                var d;\n                if (self.attributes.debug) {\n                    self.ctx.font = '11px sans-serif';\n                    d = {};\n                    d.perf = (perfCounters.reduce(function (a, b) {\n                        return a + b;\n                    }, 0) / perfCounters.length).toFixed(1)\n                        + 'ms (' +\n                        perfCounters.map(function (a) { return a.toFixed(1); }).join(', ') + ')';\n                    d.htmlImages = Object.keys(self.htmlImageCache).length;\n                    d.scrollBox = self.scrollBox.toString();\n                    d.scrollIndex = '{\"top\": ' + self.scrollIndexTop + ', \"left\": ' + self.scrollIndexLeft + '}';\n                    d.scrollPixel = '{\"top\": ' + self.scrollPixelTop + ', \"left\": ' + self.scrollPixelLeft + '}';\n                    d.canvasOffset = '{\"top\": ' + self.canvasOffsetTop + ', \"left\": ' + self.canvasOffsetLeft + '}';\n                    d.pointerLockPosition =  self.pointerLockPosition ?\n                            self.pointerLockPosition.x + ', ' + self.pointerLockPosition.y : '';\n                    d.size = '{\"width\": ' + self.width + ', \"height\": ' + self.height + '}';\n                    d.mouse = '{\"x\": ' + self.mouse.x + ', \"y\": ' + self.mouse.y + '}';\n                    d.touch = !self.touchStart\n                        ? '' : '{\"x\": ' + self.touchStart.x + ', \"y\": ' + self.touchStart.y + \"}\";\n                    d.entities = self.visibleCells.length;\n                    d.hasFocus = self.hasFocus;\n                    d.dragMode = self.dragMode;\n                    if (self.currentCell) {\n                        d.columnIndex = self.currentCell.columnIndex;\n                        d.rowIndex = self.currentCell.rowIndex;\n                        d.sortColumnIndex = self.currentCell.sortColumnIndex;\n                        d.sortRowIndex = self.currentCell.sortRowIndex;\n                        d.context = self.currentCell.context;\n                        d.dragContext = self.currentCell.dragContext;\n                        d.style = self.currentCell.style;\n                        d.type = self.currentCell.type;\n                    }\n                    self.ctx.save();\n                    Object.keys(d).forEach(function (key, index) {\n                        var m = key + ': ' + d[key],\n                            lh = 14;\n                        self.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n                        fillRect(columnHeaderCellWidth, lh + (index * lh), 800, lh);\n                        self.ctx.fillStyle = 'rgba(0, 0, 0, 1)';\n                        fillText(m, columnHeaderCellWidth + 1, rowHeaderCellHeight + (index * lh));\n                    });\n                    self.ctx.restore();\n                }\n            }\n            self.ctx.save();\n            initDraw();\n            drawBackground();\n            drawRows();\n            drawSelectionBorders();\n            drawActiveCell();\n            drawHeaders();\n            drawReorderMarkers();\n            drawScrollBars();\n            if (checkScrollHeight) {\n                self.resize(true);\n            }\n            drawBorder();\n            drawDebug();\n            if (self.dispatchEvent('afterdraw', {})) { return; }\n            self.ctx.restore();\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var touchDelta = {x: 0, y: 0, scrollTop: 0, scrollLeft: 0},\n            touchAnimateTo = {scrollLeft: 0, scrollTop: 0},\n            touchSigma = {scrollLeft: 0, scrollTop: 0},\n            xPPS = 0,\n            yPPS = 0,\n            touchingCell = false,\n            startingCell = false,\n            animationFrames = 0;\n        self.getTouchPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.touches[0].clientX - rect.left,\n                    y: e.touches[0].clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        self.calculatePPS = function () {\n            xPPS = ((touchDelta.scrollLeft - touchSigma.scrollLeft) / (touchDelta.t - touchSigma.t));\n            yPPS = ((touchDelta.scrollTop - touchSigma.scrollTop) / (touchDelta.t - touchSigma.t));\n            touchSigma = {\n                scrollLeft: touchDelta.scrollLeft,\n                scrollTop: touchDelta.scrollTop,\n                t: performance.now() / 1000\n            };\n        };\n        self.touchCell = function (e) {\n            return function () {\n                clearInterval(self.touchCalcTimeout);\n                var pos = self.getTouchPos(e);\n                if (Math.abs(touchDelta.x) + Math.abs(touchDelta.y) < self.attributes.touchDeadZone) {\n                    touchingCell = self.getCellAt(pos.x, pos.y);\n                    self.mousemove(e, pos);\n                    self.mousedown(e, pos);\n                    self.mousemove(e, pos);\n                    self.draw();\n                }\n            };\n        };\n        self.touchstart = function (e) {\n            touchingCell = false;\n            self.touchStart = self.getTouchPos(e);\n            startingCell = self.getCellAt(self.touchStart.x, self.touchStart.y, true);\n            if (self.dispatchEvent('touchstart', {NativeEvent: e, cell: self.startingCell})) { return; }\n            if (!self.hasFocus) { return; }\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (e.touches.length === 2) {\n                return self.contextmenu(e, self.touchStart);\n            }\n            self.touchScrollStart = {\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: performance.now() / 1000\n            };\n            touchDelta = {\n                x: self.touchStart.x,\n                y: self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: 0\n            };\n            self.touchmove(e);\n            clearTimeout(self.touchTimeout);\n            clearInterval(self.touchCalcTimeout);\n            self.touchTimeout = setTimeout(self.touchCell(e), self.attributes.touchSelectTimeMs);\n            self.touchCalcTimeout = setInterval(self.calculatePPS, 20);\n            self.touchHaltAnimation = true;\n            document.body.addEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.addEventListener('touchend', self.touchend, false);\n            document.body.addEventListener('touchcancel', self.touchcancel, false);\n        };\n        self.easing = function (t, b, c, d) {\n            return c * (t / d) * (2 - t) + b;\n        };\n        self.touchEndAnimation = function () {\n            if (!self.canvas || !self.scrollBox.scrollTo) { return requestAnimationFrame(self.touchEndAnimation); }\n            var x,\n                y,\n                n = performance.now() / 1000,\n                d = (self.attributes.touchReleaseAnimationDurationMs / 1000),\n                t;\n            touchDelta.t = touchDelta.t || n + d;\n            t = n - touchDelta.t + 1;\n            if (t > 1 || self.touchHaltAnimation || (animationFrames > 1000)) {\n                animationFrames = 0;\n                self.touchHaltAnimation = false;\n                touchAnimateTo = {scrollLeft: -1, scrollTop: -1};\n                return;\n            }\n            animationFrames += 1;\n            x = self.easing(t, touchDelta.scrollLeft, -touchAnimateTo.scrollLeft, d);\n            y = self.easing(t, touchDelta.scrollTop, -touchAnimateTo.scrollTop, d);\n            self.scrollBox.scrollTo(x, y);\n            requestAnimationFrame(self.touchEndAnimation);\n        };\n        self.touchend = function (e) {\n            if (self.dispatchEvent('touchend', {NativeEvent: e})) { return; }\n            var dz = Math.abs(touchDelta.x) + Math.abs(touchDelta.y) < self.attributes.touchDeadZone,\n                pos = {\n                    x: self.touchStart.x + touchDelta.x,\n                    y: self.touchStart.y + touchDelta.y\n                },\n                cell = self.getCellAt(pos.x, pos.y);\n            if (!self.hasFocus) { return; }\n            if (touchingCell) {\n                self.mouseup(e, self.touchStart);\n            } else if (dz) {\n                if (cell.active) {\n                    self.beginEditAt(cell.columnIndex, cell.rowIndex);\n                } else {\n                    self.mousedown(e, self.touchStart);\n                    self.mouseup(e, self.touchStart);\n                    self.click(e, self.touchStart);\n                }\n            }\n            touchingCell = false;\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n            clearTimeout(self.touchTimeout);\n            clearInterval(self.touchCalcTimeout);\n            self.calculatePPS();\n            touchAnimateTo.scrollLeft = xPPS * self.attributes.touchReleaseAcceleration;\n            touchAnimateTo.scrollTop = yPPS * self.attributes.touchReleaseAcceleration;\n            self.touchHaltAnimation = false;\n            if (animationFrames === 0 && !/-scroll-/.test(startingCell.style) && !dz) {\n                self.touchEndAnimation();\n            }\n        };\n        self.touchmove = function (e) {\n            var d = self.getTouchPos(e);\n            if (self.dispatchEvent('touchmove', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (!self.hasFocus) { return; }\n            touchDelta = {\n                x: d.x - self.touchStart.x,\n                y: d.y - self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: 0\n            };\n            if (/vertical-scroll-/.test(startingCell.style)) {\n                self.scrollBox.scrollTop = self.scrollBox.scrollHeight * (d.y / self.height);\n            } else if (/horizontal-scroll-/.test(startingCell.style)) {\n                self.scrollBox.scrollLeft = self.scrollBox.scrollWidth * (d.x / self.width);\n            } else if (touchingCell) {\n                self.mousemove(e, d);\n                self.draw();\n            } else {\n                if (animationFrames === 0) {\n                    self.scrollBox.scrollTo(self.touchScrollStart.scrollLeft - touchDelta.x,\n                        self.touchScrollStart.scrollTop - touchDelta.y);\n                }\n            }\n        };\n        self.touchcancel = function (e) {\n            if (self.dispatchEvent('touchcancel', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) { return; }\n            self.touchend(e);\n            touchingCell = false;\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n            return;\n        };\n        self.stopPropagation = function (e) { e.stopPropagation(); };\n        self.addEventListener = function (ev, fn) {\n            self.events[ev] = self.events[ev] || [];\n            self.events[ev].unshift(fn);\n        };\n        self.removeEventListener = function (ev, fn) {\n            (self.events[ev] || []).forEach(function removeEachListener(sfn, idx) {\n                if (fn === sfn) {\n                    self.events[ev].splice(idx, 1);\n                }\n            });\n        };\n        self.dispatchEvent = function (ev, e) {\n            var defaultPrevented;\n            function preventDefault() {\n                defaultPrevented = true;\n            }\n            if (!self.events[ev]) { return; }\n            self.events[ev].forEach(function dispatchEachEvent(fn) {\n                e.ctx = self.ctx;\n                e.preventDefault = preventDefault;\n                fn.apply(self.intf, [e]);\n            });\n            return defaultPrevented;\n        };\n        self.resize = function (drawAfterResize) {\n            var cellBorder = self.style.cellBorderWidth * 2,\n                columnHeaderCellBorder =  self.style.columnHeaderCellBorderWidth * 2,\n                scrollHeight,\n                scrollWidth,\n                rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth(),\n                // TODO: What the hell are these numbers!?  They are probably some value in the style.\n                scrollDragPositionOffsetY = 30,\n                scrollDragPositionOffsetX = 15;\n            if (self.isChildGrid) {\n                self.height = self.parentNode.offsetHeight;\n                self.width = self.parentNode.offsetWidth;\n            } else {\n                self.parentNode = self.parentDOMNode;\n                if (!self.parentIsCanvas) {\n                    self.height = self.parentDOMNode.offsetHeight;\n                    self.width = self.parentDOMNode.offsetWidth;\n                    self.canvas.height = self.height * window.devicePixelRatio;\n                    self.canvas.width = self.width * window.devicePixelRatio;\n                    self.canvas.style.height = self.height + 'px';\n                    self.canvas.style.width = self.width + 'px';\n                }\n                self.canvasOffsetTop = self.args.canvasOffsetTop || 0;\n                self.canvasOffsetLeft = self.args.canvasOffsetLeft || 0;\n            }\n            scrollHeight = self.data.reduce(function reduceData(accumulator, row) {\n                return accumulator\n                    + (self.sizes.rows[row[self.uniqueId]] || self.style.cellHeight)\n                    + (self.sizes.trees[row[self.uniqueId]] || 0)\n                    + cellBorder;\n            }, 0) || 0;\n            scrollWidth = self.getVisibleSchema().reduce(function reduceSchema(accumulator, column) {\n                if (column.hidden) { return accumulator; }\n                return accumulator + (self.sizes.columns[column[self.uniqueId]] || column.width || self.style.columnWidth) + cellBorder;\n            }, 0) || 0;\n            if (self.attributes.showNewRow) {\n                scrollHeight += self.style.cellHeight + cellBorder;\n            }\n            self.scrollBox.width = self.width - columnHeaderCellWidth;\n            self.scrollBox.height = self.height - rowHeaderCellHeight - columnHeaderCellBorder;\n            self.scrollBox.top = rowHeaderCellHeight + columnHeaderCellBorder;\n            self.scrollBox.left = columnHeaderCellWidth;\n            self.scrollBox.scrollHeight = scrollHeight + self.style.scrollBarWidth - self.scrollBox.height;\n            self.scrollBox.scrollWidth = scrollWidth + self.style.scrollBarWidth - self.scrollBox.width;\n            self.scrollBox.widthBoxRatio = ((self.scrollBox.width - scrollDragPositionOffsetX)\n                / (self.scrollBox.scrollWidth + self.scrollBox.width - scrollDragPositionOffsetX));\n            self.scrollBox.scrollBoxWidth = self.scrollBox.width\n                * self.scrollBox.widthBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.heightBoxRatio = ((self.scrollBox.height - scrollDragPositionOffsetY)\n                / (self.scrollBox.scrollHeight + (self.scrollBox.height - scrollDragPositionOffsetY)));\n            self.scrollBox.scrollBoxHeight = self.scrollBox.height\n                * self.scrollBox.heightBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.scrollBoxWidth = Math.max(self.scrollBox.scrollBoxWidth, self.style.scrollBarBoxMinSize);\n            self.scrollBox.scrollBoxHeight = Math.max(self.scrollBox.scrollBoxHeight, self.style.scrollBarBoxMinSize);\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            self.resizeEditInput();\n            self.scroll(true);\n            if (drawAfterResize) {\n                self.draw(true);\n            }\n            self.dispatchEvent('resize', {});\n            return true;\n        };\n        self.resizeEditInput = function () {\n            if (self.input) {\n                var pos = self.canvas.getBoundingClientRect(),\n                    s = self.scrollOffset(self.canvas),\n                    bx2 = (self.style.cellBorderWidth * 2),\n                    cell = self.getVisibleCellByIndex(self.input.editCell.columnIndex, self.input.editCell.rowIndex)\n                        || {x: -100, y: -100, height: 0, width: 0};\n                self.input.style.left = pos.left + cell.x - self.style.cellBorderWidth + self.canvasOffsetLeft - s.left + 'px';\n                self.input.style.top = pos.top + cell.y - bx2 + self.canvasOffsetTop - s.top + 'px';\n                self.input.style.height = cell.height - bx2 - 1 + 'px';\n                self.input.style.width = cell.width - bx2 - self.style.cellPaddingLeft + 'px';\n                self.clipElement(self.input);\n            }\n        };\n        self.scroll = function (e, dontDraw) {\n            var s = self.getVisibleSchema(),\n                cellBorder = self.style.cellBorderWidth * 2;\n            self.scrollIndexTop = 0;\n            self.scrollPixelTop = 0;\n            self.scrollIndexLeft = 0;\n            self.scrollPixelLeft = 0;\n            while (self.scrollPixelTop < self.scrollBox.scrollTop && self.scrollIndexTop < self.data.length) {\n                self.scrollPixelTop +=\n                    (self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || self.style.cellHeight)\n                    + (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0)\n                    + cellBorder;\n                self.scrollIndexTop += 1;\n            }\n            while (self.scrollPixelLeft < self.scrollBox.scrollLeft && self.scrollIndexLeft < s.length) {\n                self.scrollPixelLeft +=\n                    (self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width);\n                self.scrollIndexLeft += 1;\n            }\n            if (self.data.length > 0) {\n                self.scrollIndexLeft = Math.max(self.scrollIndexLeft - 1, 0);\n                self.scrollPixelLeft = Math.max(self.scrollPixelLeft\n                    - (self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width), 0);\n                self.scrollIndexTop = Math.max(self.scrollIndexTop - 1, 0);\n                self.scrollPixelTop = Math.max(self.scrollPixelTop\n                    - (self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || self.style.cellHeight)\n                    - (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0), 0);\n            }\n            self.ellipsisCache = {};\n            if (!dontDraw) {\n                self.draw(true);\n            }\n            //TODO: figure out why this has to be delayed for child grids\n            //BUG: scrolling event on 3rd level hierarchy fails to move input box\n            requestAnimationFrame(self.resizeEditInput);\n            self.dispatchEvent('scroll', {top: self.scrollBox.scrollTop, left: self.scrollBox.scrollLeft});\n        };\n        self.mousemove = function (e, overridePos) {\n            if (self.contextMenu || self.input) {\n                return;\n            }\n            self.mouse = overridePos || self.getLayerPos(e);\n            var ctrl = (e.controlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                i,\n                s = self.getSchema(),\n                dragBounds,\n                sBounds,\n                x = self.mouse.x,\n                y = self.mouse.y,\n                o = self.getCellAt(x, y),\n                delta,\n                ev = {NativeEvent: e, cell: o, x: x, y: y},\n                previousCell = self.currentCell;\n            clearTimeout(self.scrollTimer);\n            if (!self.isInGrid({x: x, y: y})) {\n                self.hasFocus = false;\n            }\n            if (self.dispatchEvent('mousemove', ev)) {\n                return;\n            }\n            if (o && self.currentCell && (self.currentCell.rowIndex !== o.rowIndex\n                    || self.currentCell.columnIndex !== o.columnIndex)) {\n                self.cellBoundaryCrossed = true;\n                ev.cell = previousCell;\n                self.dispatchEvent('cellmouseout', ev);\n                ev.cell = o;\n                self.dispatchEvent('cellmouseover', ev);\n            }\n            self.currentCell = o;\n            if (!self.hasFocus) {\n                return;\n            }\n            self.hovers = {};\n            if (!self.draggingItem\n                    && o\n                    && self.scrollModes.indexOf(o.context) === -1) {\n                self.dragItem = o;\n                self.dragMode = o.dragContext;\n                self.canvas.style.cursor = o.context;\n                if (o.context === 'cell' && o.data) {\n                    self.canvas.style.cursor = 'pointer';\n                    self.hovers[o.data[self.uniqueId]] = [o.columnIndex];\n                }\n                if ((self.selecting || self.reorderObject)\n                        && o.context === 'cell'\n                        && o.data) {\n                    sBounds = self.getSelectionBounds();\n                    delta = {\n                        x: Math.abs(self.dragStart.x - x),\n                        y: Math.abs(self.dragStart.y - y),\n                    };\n                    if (self.dragStartObject.columnIndex !== -1 && e.shiftKey) {\n                        self.dragStartObject = {\n                            rowIndex: self.activeCell.rowIndex,\n                            columnIndex: self.activeCell.columnIndex\n                        };\n                    }\n                    dragBounds = {\n                        top: Math.min(self.dragStartObject.rowIndex, o.rowIndex),\n                        left: Math.min(self.dragStartObject.columnIndex, o.columnIndex),\n                        bottom: Math.max(self.dragStartObject.rowIndex, o.rowIndex),\n                        right: Math.max(self.dragStartObject.columnIndex, o.columnIndex)\n                    };\n                    if (self.dragStartObject.columnIndex === -1) {\n                        dragBounds.left = -1;\n                        dragBounds.right = s.length - 1;\n                        dragBounds.top = Math.min(sBounds.top, o.rowIndex);\n                        dragBounds.bottom = Math.max(sBounds.bottom, o.rowIndex);\n                    }\n                    if (self.dragStartObject.rowIndex !== o.rowIndex\n                                || self.dragStartObject.columnIndex !== o.columnIndex) {\n                        self.ignoreNextClick = true;\n                    }\n                    if (self.cellBoundaryCrossed || (delta.x === 0 && delta.y === 0) || (self.attributes.selectionMode === 'row')) {\n                        if ((self.attributes.selectionMode === 'row') || self.dragStartObject.columnIndex === -1) {\n                            self.selectRow(o.rowIndex, ctrl, null, true);\n                        } else {\n                            if (!self.dragAddToSelection && o.rowIndex !== undefined) {\n                                if (self.selections[o.rowIndex] && self.selections[o.rowIndex].indexOf(o.columnIndex) !== -1) {\n                                    self.selections[o.rowIndex].splice(self.selections[o.rowIndex].indexOf(o.columnIndex), 1);\n                                }\n                            } else {\n                                self.selections[o.rowIndex] = self.selections[o.rowIndex] || [];\n                                if (self.selections[o.rowIndex].indexOf(o.columnIndex) === -1) {\n                                    self.selections[o.rowIndex].push(o.columnIndex);\n                                }\n                            }\n                        }\n                    }\n                    if ((!self.selectionBounds || (dragBounds.top !== self.selectionBounds.top\n                            || dragBounds.left !== self.selectionBounds.left\n                            || dragBounds.bottom !== self.selectionBounds.bottom\n                            || dragBounds.right !== self.selectionBounds.right)) && !ctrl) {\n                        self.selections = [];\n                        sBounds = dragBounds;\n                        if (self.attributes.selectionMode === 'row') {\n                            for (i = sBounds.top; i <= sBounds.bottom; i += 1) {\n                                self.selectRow(i, true, null, true);\n                            }\n                        } else {\n                            self.selectArea(sBounds, true);\n                        }\n                    }\n                    self.autoScrollZone(e, x, y, ctrl);\n                }\n            }\n            self.cellBoundaryCrossed = false;\n            self.draw(true);\n        };\n        self.click = function (e, overridePos) {\n            var i,\n                selectionChanged,\n                ctrl = (e.controlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                pos = overridePos || self.getLayerPos(e);\n            self.currentCell = self.getCellAt(pos.x, pos.y);\n            if (self.currentCell.grid !== undefined) {\n                return;\n            }\n            function checkSelectionChange() {\n                if (!selectionChanged) { return; }\n                self.dispatchEvent('selectionchanged', {\n                    selectedData: self.getSelectedData(),\n                    selections: self.selections,\n                    selectionBounds: self.selectionBounds\n                });\n            }\n            if (self.input) {\n                self.endEdit();\n            }\n            if (self.ignoreNextClick) {\n                self.ignoreNextClick = false;\n                return;\n            }\n            i = self.currentCell;\n            if (self.dispatchEvent('click', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'cell') {\n                if (self.currentCell.style === 'cornerCell') {\n                    self.order(self.uniqueId, 'asc', self.sorters.number);\n                    self.setFilter();\n                    checkSelectionChange();\n                    return;\n                }\n                if (self.currentCell.style === 'columnHeaderCell') {\n                    if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                        if (self.orderBy === i.header.name) {\n                            self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                        } else {\n                            self.orderDirection = 'asc';\n                        }\n                        self.order(i.header.name, self.orderDirection);\n                        checkSelectionChange();\n                        return;\n                    }\n                    if (self.attributes.columnHeaderClickBehavior === 'select') {\n                        self.selectColumn(i.header.index, ctrl, e.shiftKey, true);\n                        checkSelectionChange();\n                        self.draw();\n                        return;\n                    }\n                }\n                if (['rowHeaderCell', 'columnHeaderCell'].indexOf(self.currentCell.style) === -1 && !ctrl) {\n                    self.setActiveCell(i.columnIndex, i.rowIndex);\n                }\n                self.selections[i.rowIndex] = self.selections[i.rowIndex] || [];\n                if (((self.attributes.selectionMode === 'row') || self.currentCell.style === 'rowHeaderCell')) {\n                    if (self.currentCell.style === 'rowHeaderCell'\n                            && self.attributes.tree && pos.x > 0\n                            && pos.x - self.currentCell.x < self.style.treeArrowWidth\n                            + self.style.treeArrowMarginLeft\n                            + self.style.treeArrowMarginRight + self.style.treeArrowClickRadius\n                            && pos.y - self.currentCell.y < self.style.treeArrowHeight\n                            + self.style.treeArrowMarginTop + self.style.treeArrowClickRadius\n                            && pos.y > 0) {\n                        self.toggleTree(i.rowIndex);\n                        return;\n                    }\n                    selectionChanged = true;\n                    self.selectRow(i.rowIndex, ctrl, null, true);\n                }\n                if (e.shiftKey && !ctrl) {\n                    self.selectionBounds = self.getSelectionBounds();\n                    self.selectArea(undefined, false);\n                }\n            }\n            checkSelectionChange();\n            self.draw(true);\n        };\n        self.dragResizeColumn = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = self.resizingStartingWidth + pos.x - self.dragStart.x;\n            y = self.resizingStartingHeight + pos.y - self.dragStart.y;\n            if (x < self.style.minColumnWidth) {\n                x = self.style.minColumnWidth;\n            }\n            if (y < self.style.minRowHeight) {\n                y = self.style.minRowHeight;\n            }\n            if (self.dispatchEvent('resizecolumn', {x: x, y: y, draggingItem: self.draggingItem})) { return false; }\n            if (self.scrollBox.scrollLeft > self.scrollBox.scrollWidth - self.attributes.resizeScrollZone\n                    && self.dragMode === 'ew-resize') {\n                self.resize(true);\n                self.scrollBox.scrollLeft += x;\n            }\n            if (self.dragMode === 'ew-resize') {\n                self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] = x;\n                if (['rowHeaderCell', 'cornerCell'].indexOf(self.draggingItem.header.style) !== -1) {\n                    self.resize(true);\n                }\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.dragMode === 'ns-resize') {\n                if (self.draggingItem.rowOpen) {\n                    self.sizes.trees[self.draggingItem.data[self.uniqueId]] = y;\n                } else if (self.attributes.globalRowResize) {\n                    self.style.cellHeight = y;\n                } else {\n                    self.sizes.rows[self.draggingItem.data[self.uniqueId]] = y;\n                }\n                self.dispatchEvent('resizerow', {row: y});\n                self.resizeChildGrids();\n                return;\n            }\n            self.ellipsisCache = {};\n        };\n        self.stopDragResize = function () {\n            self.resize();\n            document.body.removeEventListener('mousemove', self.dragResizeColumn, false);\n            document.body.removeEventListener('mouseup', self.stopDragResize, false);\n            self.setStorageData();\n            self.draw(true);\n            self.ignoreNextClick = true;\n        };\n        self.scrollGrid = function (e) {\n            var pos = self.getLayerPos(e);\n            if (self.attributes.scrollPointerLock && self.pointerLockPosition\n                    && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                self.pointerLockPosition.x += e.movementX;\n                self.pointerLockPosition.y += e.movementY;\n                self.pointerLockPosition.x = Math.min(self.width - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.x));\n                self.pointerLockPosition.y = Math.min(self.height - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.y));\n                pos = self.pointerLockPosition;\n            }\n            self.scrollMode = self.getCellAt(pos.x, pos.y).context;\n            if (self.scrollMode === 'horizontal-scroll-box' && self.scrollStartMode !== 'horizontal-scroll-box') {\n                self.scrollStartMode = 'horizontal-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.left = self.scrollBox.scrollLeft;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box' && self.scrollStartMode !== 'vertical-scroll-box') {\n                self.scrollStartMode = 'vertical-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.top = self.scrollBox.scrollTop;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollStartMode === 'vertical-scroll-box'\n                    && self.scrollMode !== 'vertical-scroll-box') {\n                self.scrollMode = 'vertical-scroll-box';\n            }\n            if (self.scrollStartMode === 'horizontal-scroll-box'\n                    && self.scrollMode !== 'horizontal-scroll-box') {\n                self.scrollMode = 'horizontal-scroll-box';\n            }\n            clearTimeout(self.scrollTimer);\n            if (self.scrollModes.indexOf(self.scrollMode) === -1) {\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box') {\n                self.scrollBox.scrollTop = self.scrollStart.top + ((pos.y - self.dragStart.y)\n                    / self.scrollBox.heightBoxRatio);\n            } else if (self.scrollMode === 'vertical-scroll-top') {\n                self.scrollBox.scrollTop -= (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'vertical-scroll-bottom') {\n                self.scrollBox.scrollTop += (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n            if (self.scrollMode === 'horizontal-scroll-box') {\n                self.scrollBox.scrollLeft = self.scrollStart.left + ((pos.x - self.dragStart.x)\n                    / self.scrollBox.widthBoxRatio);\n            } else if (self.scrollMode === 'horizontal-scroll-right') {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'horizontal-scroll-left') {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.stopScrollGrid = function () {\n            clearTimeout(self.scrollTimer);\n            if (document.exitPointerLock) {\n                document.exitPointerLock();\n            }\n            document.body.removeEventListener('mousemove', self.scrollGrid, false);\n        };\n        self.dragReorder = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = pos.x - self.dragStart.x;\n            y = pos.y - self.dragStart.y;\n            if (!self.attributes.allowColumnReordering && self.dragMode === 'column-reorder') {\n                return;\n            }\n            if (!self.attributes.allowRowReordering && self.dragMode === 'row-reorder') {\n                return;\n            }\n            if (self.dispatchEvent('reordering', {\n                    NativeEvent: e,\n                    source: self.dragStartObject,\n                    target: self.currentCell,\n                    dragMode: self.dragMode\n                })) {\n                return;\n            }\n            if (Math.abs(x) > self.attributes.reorderDeadZone || Math.abs(y) > self.attributes.reorderDeadZone) {\n                self.reorderObject = self.dragStartObject;\n                self.reorderTarget = self.currentCell;\n                self.reorderObject.dragOffset = {\n                    x: x,\n                    y: y\n                };\n                self.autoScrollZone(e, pos.x, pos.x, false);\n            }\n        };\n        self.stopDragReorder = function (e) {\n            var cr = {\n                    'row-reorder': self.orders.rows,\n                    'column-reorder': self.orders.columns\n                },\n                i = {\n                    'row-reorder': 'rowIndex',\n                    'column-reorder': 'columnIndex'\n                }[self.dragMode];\n            document.body.removeEventListener('mousemove', self.dragReorder, false);\n            document.body.removeEventListener('mouseup', self.stopDragReorder, false);\n            if (self.reorderObject\n                    && self.reorderTarget) {\n                self.ignoreNextClick = true;\n                if (self.reorderObject[i] !== self.reorderTarget[i]\n                        && !self.dispatchEvent('reorder', {\n                            NativeEvent: e,\n                            source: self.reorderObject,\n                            target: self.reorderTarget,\n                            dragMode: self.dragMode\n                        })) {\n                    cr[self.dragMode].splice(cr[self.dragMode].indexOf(self.reorderObject[i]), 1);\n                    cr[self.dragMode].splice(cr[self.dragMode].indexOf(self.reorderTarget[i]), 0, self.reorderObject[i]);\n                    self.setStorageData();\n                }\n            }\n            self.reorderObject = undefined;\n            self.reorderTarget = undefined;\n            self.draw(true);\n        };\n        self.mousedown = function (e, overridePos) {\n            self.lastMouseDownTarget = e.target;\n            if (self.dispatchEvent('mousedown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (e.button === 2 || self.input) { return; }\n            var ctrl = (e.controlKey || e.metaKey);\n            self.dragStart = overridePos || self.getLayerPos(e);\n            self.scrollStart = {\n                left: self.scrollBox.scrollLeft,\n                top: self.scrollBox.scrollTop\n            };\n            self.dragStartObject = self.getCellAt(self.dragStart.x, self.dragStart.y);\n            self.dragAddToSelection = !self.dragStartObject.selected;\n            if (!ctrl && !e.shiftKey && !/(vertical|horizontal)-scroll-(bar|box)/\n                    .test(self.dragStartObject.context) && !self.currentCell.isColumnHeader) {\n                self.selections = [];\n            }\n            if (self.dragStartObject.isGrid) {\n                return;\n            }\n            if (self.scrollModes.indexOf(self.dragStartObject.context) !== -1) {\n                self.scrollMode = self.dragStartObject.context;\n                self.scrollStartMode = self.dragStartObject.context;\n                self.scrollGrid(e);\n                if (self.attributes.scrollPointerLock\n                        && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                    self.pointerLockPosition = {\n                        x: self.dragStart.x,\n                        y: self.dragStart.y\n                    };\n                    self.canvas.requestPointerLock();\n                }\n                document.body.addEventListener('mousemove', self.scrollGrid, false);\n                document.body.addEventListener('mouseup', self.stopScrollGrid, false);\n                self.ignoreNextClick = true;\n                return;\n            }\n            if (self.dragMode === 'cell') {\n                self.selecting = true;\n                if (self.attributes.selectionMode === 'row') {\n                    self.selectRow(self.dragStartObject.rowIndex, ctrl, null, true);\n                }\n                return self.mousemove(e);\n            }\n            if (['ns-resize', 'ew-resize'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragItem;\n                if (self.draggingItem.rowOpen) {\n                    self.resizingStartingHeight = self.sizes.trees[self.draggingItem.data[self.uniqueId]];\n                } else {\n                    self.resizingStartingHeight = self.sizes.rows[self.draggingItem.data[self.uniqueId]] || self.style.cellHeight;\n                }\n                self.resizingStartingWidth = self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] || self.draggingItem.width;\n                document.body.addEventListener('mousemove', self.dragResizeColumn, false);\n                document.body.addEventListener('mouseup', self.stopDragResize, false);\n            }\n            if (['row-reorder', 'column-reorder'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragItem;\n                document.body.addEventListener('mousemove', self.dragReorder, false);\n                document.body.addEventListener('mouseup', self.stopDragReorder, false);\n            }\n        };\n        self.mouseup = function (e) {\n            clearTimeout(self.scrollTimer);\n            self.cellBoundaryCrossed = true;\n            self.selecting = undefined;\n            self.draggingItem = undefined;\n            self.dragStartObject = undefined;\n            if (self.dispatchEvent('mouseup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            if (self.currentCell && self.currentCell.grid !== undefined) {\n                return;\n            }\n            if (self.contextMenu || self.input) { return; }\n            if (self.dragStart && self.isInGrid(self.dragStart)) {\n                self.controlInput.focus();\n            }\n            e.preventDefault();\n        };\n        self.keydown = function (e) {\n            var i,\n                x = self.activeCell.columnIndex,\n                y = self.activeCell.rowIndex,\n                ctrl = (e.controlKey || e.metaKey),\n                last = self.data.length - 1,\n                cols = self.getVisibleSchema().length - 1;\n            if (self.dispatchEvent('keydown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            if (self.attributes.showNewRow) {\n                last += 1;\n            }\n            if (e.keyCode === 9) {\n                e.preventDefault();\n            }\n            // esc\n            if (e.keyCode === 27) {\n                self.selections = [];\n                self.draw(true);\n            // ctrl + a\n            } else if (ctrl && e.keyCode === 65) {\n                self.selectAll();\n            //ArrowDown\n            } else if (e.keyCode === 40) {\n                y += 1;\n            //ArrowUp\n            } else if (e.keyCode === 38) {\n                y -= 1;\n            //ArrowLeft Tab\n            } else if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {\n                x -= 1;\n            //ArrowRight Tab\n            } else if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {\n                x += 1;\n            //PageUp\n            } else if (e.keyCode === 33) {\n                y -= self.page;\n                e.preventDefault();\n            //PageDown\n            } else if (e.keyCode === 34) {\n                y += self.page;\n                e.preventDefault();\n            //Home ArrowUp\n            } else if (e.keyCode === 36 || (ctrl && e.keyCode === 38)) {\n                y = 0;\n            //End ArrowDown\n            } else if (e.keyCode === 35 || (ctrl && e.keyCode === 40)) {\n                y = self.data.length - 1;\n            //ArrowRight\n            } else if (ctrl && e.keyCode === 39) {\n                x = cols;\n            //ArrowLeft\n            } else if (ctrl && e.keyCode === 37) {\n                x = 0;\n            }\n            //Enter\n            if (e.keyCode === 13) {\n                return self.beginEditAt(x, y);\n            }\n            //Space\n            if (e.keyCode === 32) {\n                self.selections = [];\n                self.selections[Math.max(y, 0)] = [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                if (self.attributes.selectionMode === 'row') {\n                    for (i = self.selectionBounds.top; i <= self.selectionBounds.bottom; i += 1) {\n                        self.selectRow(i, ctrl, null, true);\n                    }\n                } else {\n                    self.selectArea(undefined, ctrl);\n                }\n                e.preventDefault();\n                self.draw(true);\n                return;\n            }\n            if (x < 0) {\n                x = 0;\n            }\n            if (y > last) {\n                y = last;\n            }\n            if (y < 0) {\n                y = 0;\n            }\n            if (x > cols) {\n                x = cols;\n            }\n            // Arrows\n            if (e.shiftKey && [37, 38, 39, 40].indexOf(e.keyCode) !== -1) {\n                self.selections[Math.max(y, 0)] = self.selections[Math.max(y, 0)] || [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                self.selectArea(undefined, ctrl);\n                self.draw(true);\n            }\n            if (x !== self.activeCell.columnIndex || y !== self.activeCell.rowIndex) {\n                self.scrollIntoView(x !== self.activeCell.columnIndex ? x : undefined, y !== self.activeCell.rowIndex ? y : undefined);\n                self.setActiveCell(x, y);\n                if (!e.shiftKey && self.attributes.selectionFollowsActiveCell) {\n                    if (!ctrl) {\n                        self.selections = [];\n                    }\n                    self.selections[y] = self.selections[y] || [];\n                    self.selections[y].push(x);\n                    self.dispatchEvent('selectionchanged', {\n                        selectedData: self.getSelectedData(),\n                        selections: self.selections,\n                        selectionBounds: self.selectionBounds\n                    });\n                }\n                self.draw(true);\n            }\n        };\n        self.keyup = function (e) {\n            if (self.dispatchEvent('keyup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            self.controlInput.value = '';\n        };\n        self.keypress = function (e) {\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.dispatchEvent('keypress', {NativeEvent: e, cell: self.currentCell})) { return; }\n        };\n        self.dblclick = function (e) {\n            if (self.dispatchEvent('dblclick', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'columnHeaderCell') {\n                self.fitColumnToValues(self.currentCell.header.name);\n            } else if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'cornerCell') {\n                self.autosize();\n            } else if (['cell', 'activeCell'].indexOf(self.currentCell.style) !== -1) {\n                self.beginEditAt(self.currentCell.columnIndex, self.currentCell.rowIndex);\n            }\n        };\n        self.scrollWheel = function (e) {\n            var l,\n                t,\n                deltaX = e.deltaX === undefined ? e.NativeEvent.deltaX : e.deltaX,\n                deltaY = e.deltaY === undefined ? e.NativeEvent.deltaY : e.deltaY,\n                deltaMode = e.deltaMode === undefined ? e.NativeEvent.deltaMode : e.deltaMode;\n            if (self.dispatchEvent('wheel', {NativeEvent: e})) {\n                return;\n            }\n            e = e.NativeEvent || e;\n            self.touchHaltAnimation = true;\n            l = self.scrollBox.scrollLeft;\n            t = self.scrollBox.scrollTop;\n            if (self.hasFocus) {\n                //BUG Issue 42: https://github.com/TonyGermaneri/canvas-datagrid/issues/42\n                //https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\n                if (deltaMode === 1) {\n                    // line mode = 17 pixels per line\n                    deltaY = deltaY * 17;\n                }\n                self.scrollBox.scrollTop += deltaY;\n                self.scrollBox.scrollLeft += deltaX;\n            }\n            if (t !== self.scrollBox.scrollTop || l !== self.scrollBox.scrollLeft) {\n                e.preventDefault();\n            }\n        };\n        self.copy = function (e) {\n            if (self.dispatchEvent('copy', {NativeEvent: e})) { return; }\n            if (!self.hasFocus || !e.clipboardData) { return; }\n            var rows = [], sData = self.getSelectedData();\n            if (sData.length > 0) {\n                sData.forEach(function (row) {\n                    if (row) {\n                        var r = [];\n                        Object.keys(row).forEach(function (key) {\n                            if (row[key] !== null\n                                    && row[key] !== false\n                                    && row[key] !== undefined\n                                    && row[key].replace) {\n                                return r.push('\"' + row[key].replace(/\"/g, '\"\"') + '\"');\n                            }\n                            r.push(row[key]);\n                        });\n                        r.join(',');\n                        rows.push(r);\n                    }\n                });\n                e.clipboardData.setData('text/plain', rows.join('\\n'));\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        self.orders = {\n            rows: [],\n            columns: []\n        };\n        self.hasFocus = false;\n        self.activeCell = {\n            columnIndex: 0,\n            rowIndex: 0\n        };\n        self.storageName = 'canvasDataGrid';\n        self.invalidSearchExpClass = 'canvas-datagrid-invalid-search-regExp';\n        self.localStyleLibraryStorageKey = 'canvas-datagrid-user-style-library';\n        self.uniqueId = '_canvasDataGridUniqueId';\n        self.orderBy = self.uniqueId;\n        self.orderDirection = 'asc';\n        self.columnFilters = {};\n        self.filters = {};\n        self.ellipsisCache = {};\n        self.scrollBox = {};\n        self.visibleRows = [];\n        /**\n         * Used internally to keep track of sizes of row, columns and child grids.\n         * @memberof canvasDataGrid\n         * @property sizes\n         * @readonly\n         */\n        self.sizes = {\n            rows: {},\n            columns: {},\n            trees: {}\n        };\n        self.currentFilter = function () {\n            return true;\n        };\n        self.selections = [];\n        self.hovers = {};\n        self.attributes = {};\n        self.style = {};\n        self.intf = {};\n        self.formatters = {};\n        self.sorters = {};\n        self.schemaHashes = {};\n        self.events = {};\n        self.uId = 0;\n        self.changes = [];\n        self.scrollIndexTop = 0;\n        self.scrollPixelTop = 0;\n        self.scrollIndexLeft = 0;\n        self.scrollPixelLeft = 0;\n        self.childGrids = {};\n        self.openChildren = {};\n        self.scrollModes = [\n            'vertical-scroll-box',\n            'vertical-scroll-top',\n            'vertical-scroll-bottom',\n            'horizontal-scroll-box',\n            'horizontal-scroll-right',\n            'horizontal-scroll-left'\n        ];\n        self.mouse = { x: 0, y: 0};\n        self.getSelectedData = function (expandToRow) {\n            var d = [], s = self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                if (expandToRow) {\n                    s.forEach(function (column) {\n                        d[index][column.name] = self.data[index][column.name];\n                    });\n                } else {\n                    row.forEach(function (col) {\n                        if (col === -1 || !s[col]) { return; }\n                        d[index][s[col].name] = self.data[index][s[col].name];\n                    });\n                }\n            });\n            return d;\n        };\n        self.scrollOffset = function (e) {\n            var x = 0, y = 0;\n            while (e.parentNode) {\n                if (e.nodeType !== 'canvas-datagrid-tree'\n                        && e.nodeType !== 'canvas-datagrid-cell') {\n                    x -= e.scrollLeft;\n                    y -= e.scrollTop;\n                }\n                e = e.parentNode;\n            }\n            return {left: x, top: y};\n        };\n        self.position = function (e, ignoreScrollOffset) {\n            var x = 0, y = 0, s = e, h, w;\n            while (e.offsetParent) {\n                x += e.offsetLeft;\n                y += e.offsetTop;\n                h = e.offsetHeight;\n                w = e.offsetWidth;\n                e = e.offsetParent;\n            }\n            if (ignoreScrollOffset) {\n                return {left: x, top: y, height: h, width: w};\n            }\n            e = s;\n            s = self.scrollOffset(e);\n            return { left: x + s.left, top: y + s.top, height: h, width: w };\n        };\n        self.getLayerPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.clientX - rect.left,\n                    y: e.clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        self.fillArray = function (low, high, step) {\n            step = step || 1;\n            var i = [], x;\n            for (x = low; x <= high; x += step) {\n                i[x] = x;\n            }\n            return i;\n        };\n        self.getRowHeaderCellHeight = function () {\n            if (!self.attributes.showColumnHeaders) { return 0; }\n            return self.sizes.rows[-1] || self.style.columnHeaderCellHeight;\n        };\n        self.getColumnHeaderCellWidth = function () {\n            if (!self.attributes.showRowHeaders) { return 0; }\n            return self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth;\n        };\n        self.setStorageData = function () {\n            if (!self.attributes.saveAppearance) { return; }\n            localStorage.setItem(self.storageName + '-' + self.attributes.name, JSON.stringify({\n                sizes: {\n                    rows: self.sizes.rows,\n                    columns: self.sizes.columns\n                },\n                orders: {\n                    rows: self.orders.rows,\n                    columns: self.orders.columns\n                },\n                orderBy: self.orderBy,\n                orderDirection: self.orderDirection\n            }));\n        };\n        self.getSchema = function () {\n            return self.schema || self.tempSchema;\n        };\n        self.createColumnOrders = function () {\n            var s = self.getSchema();\n            self.orders.columns = self.fillArray(0, s.length - 1);\n        };\n        self.createRowOrders = function () {\n            self.orders.rows = self.fillArray(0, self.data.length - 1);\n        };\n        self.getVisibleSchema = function () {\n            return self.getSchema().filter(function (col) { return !col.hidden; });\n        };\n        self.applyDefaultValue = function (row, header) {\n            var d = header.defaultValue || '';\n            if (typeof d === 'function') {\n                d = d.apply(self.intf, [header]);\n            }\n            row[header.name] = d;\n        };\n        self.createNewRowData = function () {\n            self.newRow = {};\n            self.newRow[self.uniqueId] = self.uId;\n            self.uId += 1;\n            self.getSchema().forEach(function forEachHeader(header) {\n                self.applyDefaultValue(self.newRow, header);\n            });\n        };\n        self.getSchemaNameHash = function (key) {\n            var n = 0;\n            while (self.schemaHashes[key]) {\n                n += 1;\n                key = key + n;\n            }\n            return key;\n        };\n        self.filter = function (type) {\n            var f = self.filters[type];\n            if (!f && type !== undefined) {\n                console.warn('Cannot find filter for type %s, falling back to substring match.', type);\n                f = self.filters.string;\n            }\n            return f;\n        };\n        self.getBestGuessDataType = function (columnName) {\n            var t, x, l = self.data.length;\n            for (x = 0; x < l; x += 1) {\n                if ([null, undefined].indexOf(self.data[x][columnName]) !== -1) {\n                    t = typeof self.data[x];\n                    return t === 'object' ? 'string' : t;\n                }\n            }\n            return 'string';\n        };\n        self.drawChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].draw();\n            });\n        };\n        self.resizeChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].resize();\n            });\n        };\n        self.getClippingRect = function (ele) {\n            var boundingRect = self.position(self.parentNode),\n                eleRect = self.position(ele),\n                s = self.scrollOffset(self.canvas),\n                clipRect = {\n                    x: 0,\n                    y: 0,\n                    h: 0,\n                    w: 0\n                },\n                parentRect = {\n                    x: -Infinity,\n                    y: -Infinity,\n                    h: Infinity,\n                    w: Infinity\n                },\n                rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth();\n            boundingRect.top -= s.top;\n            boundingRect.left -= s.left;\n            eleRect.top -= s.top;\n            eleRect.left -= s.left;\n            clipRect.h = boundingRect.top + boundingRect.height - ele.offsetTop - self.style.scrollBarWidth;\n            clipRect.w = boundingRect.left + boundingRect.width - ele.offsetLeft - self.style.scrollBarWidth;\n            clipRect.x = boundingRect.left + (eleRect.left * -1) + columnHeaderCellWidth;\n            clipRect.y = boundingRect.top + (eleRect.top * -1) + rowHeaderCellHeight;\n            return {\n                x: clipRect.x > parentRect.x ? clipRect.x : parentRect.x,\n                y: clipRect.y > parentRect.y ? clipRect.y : parentRect.y,\n                h: clipRect.h < parentRect.h ? clipRect.h : parentRect.h,\n                w: clipRect.w < parentRect.w ? clipRect.w : parentRect.w\n            };\n        };\n        self.clipElement = function (ele) {\n            var clipRect = self.getClippingRect(ele);\n            if (clipRect.w < 0) { clipRect.w = 0; }\n            if (clipRect.h < 0) { clipRect.h = 0; }\n            ele.style.clip = 'rect('\n                + clipRect.y + 'px,'\n                + clipRect.w + 'px,'\n                + clipRect.h + 'px,'\n                + clipRect.x + 'px'\n                + ')';\n            // INFO https://developer.mozilla.org/en-US/docs/Web/CSS/clip\n            // clip has been \"deprecated\" for clipPath.  Of course nothing but chrome\n            // supports clip path, so we'll keep using clip until someday clipPath becomes\n            // more widely support.  The code below works correctly, but setting clipPath and clip\n            // at the same time has undesirable results.\n            // ele.style.clipPath = 'polygon('\n            //     + clipRect.x + 'px ' + clipRect.y + 'px,'\n            //     + clipRect.x + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.y + 'px'\n            //     + ')';\n        };\n        self.autoScrollZone = function (e, x, y, ctrl) {\n            var setTimer,\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth(),\n                rowHeaderCellHeight = self.getRowHeaderCellHeight();\n            if (x > self.width - self.attributes.selectionScrollZone && x < self.width) {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y > self.height - self.attributes.selectionScrollZone && y < self.height) {\n                self.scrollBox.scrollTop += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (x - self.attributes.selectionScrollZone - columnHeaderCellWidth < 0) {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y - self.attributes.selectionScrollZone - rowHeaderCellHeight < 0) {\n                self.scrollBox.scrollTop -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (setTimer && !ctrl && self.currentCell && self.currentCell.columnIndex !== -1) {\n                self.scrollTimer = setTimeout(self.mousemove, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.refreshFromOrigialData = function () {\n            self.data = self.originalData.filter(function (row) {\n                return true;\n            });\n        };\n        self.validateColumn = function (c, s) {\n            if (!c.name) {\n                throw new Error('A column must contain at least a name.');\n            }\n            if (s.filter(function (i) { return i.name === c.name; }).length > 0) {\n                throw new Error('A column with the name '\n                    + c.name + ' already exists and cannot be added again.');\n            }\n            return true;\n        };\n        self.setDefaults = function (obj1, obj2, key, def) {\n            obj1[key] = obj2[key] === undefined ? def : obj2[key];\n        };\n        self.setAttributes = function () {\n            self.defaults.attributes.forEach(function eachAttribute(i) {\n                self.setDefaults(self.attributes, self.args, i[0], i[1]);\n            });\n        };\n        self.setStyle = function () {\n            self.defaults.styles.forEach(function eachStyle(i) {\n                self.setDefaults(self.style, self.args.style || {}, i[0], i[1]);\n            });\n        };\n        self.autosize = function (colName) {\n            self.getVisibleSchema().forEach(function (col) {\n                if (col.name === colName || colName === undefined) {\n                    self.fitColumnToValues(col.name);\n                }\n            });\n            self.fitColumnToValues('cornerCell');\n        };\n        self.dispose = function () {\n            if (!self.isChildGrid && self.canvas && self.canvas.parentNode) {\n                self.canvas.parentNode.removeChild(self.canvas);\n            }\n            self.eventParent.removeEventListener('mouseup', self.mouseup, false);\n            self.eventParent.removeEventListener('mousedown', self.mousedown, false);\n            self.eventParent.removeEventListener('dblclick', self.dblclick, false);\n            self.eventParent.removeEventListener('click', self.click, false);\n            self.eventParent.removeEventListener('mousemove', self.mousemove);\n            self.eventParent.removeEventListener('wheel', self.scrollWheel, false);\n            self.canvas.removeEventListener('contextmenu', self.contextmenu, false);\n            self.canvas.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('keypress', self.keypress, false);\n            self.controlInput.removeEventListener('keyup', self.keyup, false);\n            self.controlInput.removeEventListener('keydown', self.keydown, false);\n            window.removeEventListener('resize', self.resize);\n            if (self.observer && self.observer.disconnect) {\n                self.observer.disconnect();\n            }\n        };\n        self.tryLoadStoredOrders = function () {\n            var s;\n            if (self.storedSettings && typeof self.storedSettings.orders === 'object') {\n                if (self.storedSettings.orders.rows.length >= self.data.length) {\n                    self.orders.rows = self.storedSettings.orders.rows;\n                }\n                s = self.getSchema();\n                if (self.storedSettings.orders.columns.length === s.length) {\n                    self.orders.columns = self.storedSettings.orders.columns;\n                }\n                self.orderBy = self.storedSettings.orderBy === undefined\n                    ? self.uniqueId : self.storedSettings.orderBy;\n                self.orderDirection = self.storedSettings.orderDirection === undefined\n                    ? self.uniqueId : self.storedSettings.orderDirection;\n                if (self.getHeaderByName(self.orderBy) && self.orderDirection) {\n                    self.order(self.orderBy, self.orderDirection);\n                }\n            }\n        };\n        self.getFontHeight = function (fontStyle) {\n            return parseFloat(fontStyle, 10);\n        };\n        self.parseFont = function (key) {\n            if (/Font/.test(key)) {\n                self.style[key + 'Height'] = self.getFontHeight(self.style[key]);\n            }\n        };\n        self.initProp = function (propName) {\n            if (!self.args[propName]) { return; }\n            Object.keys(self.args[propName]).forEach(function (key) {\n                self[propName][key] = self.args[propName][key];\n            });\n        };\n        self.init = function () {\n            var publicStyleKeyIntf = {};\n            self.setAttributes();\n            self.setStyle();\n            self.initScrollBox();\n            self.setDom();\n            self.type = 'canvas-datagrid';\n            Object.keys(self.style).forEach(self.parseFont);\n            self.intf.type = self.type;\n            self.intf.addEventListener = self.addEventListener;\n            self.intf.removeEventListener = self.removeEventListener;\n            self.intf.dispatchEvent = self.dispatchEvent;\n            self.intf.dispose = self.dispose;\n            self.intf.appendTo = self.appendTo;\n            self.intf.filters = self.filters;\n            self.intf.sorters = self.sorters;\n            self.intf.autosize = self.autosize;\n            self.intf.beginEditAt = self.beginEditAt;\n            self.intf.endEdit = self.endEdit;\n            self.intf.setActiveCell = self.setActiveCell;\n            self.intf.scrollIntoView = self.scrollIntoView;\n            self.intf.clearChangeLog = self.clearChangeLog;\n            self.intf.gotoCell = self.gotoCell;\n            self.intf.gotoRow = self.gotoRow;\n            self.intf.findColumnScrollLeft = self.findColumnScrollLeft;\n            self.intf.findRowScrollTop = self.findRowScrollTop;\n            self.intf.fitColumnToValues = self.fitColumnToValues;\n            self.intf.findColumnMaxTextLength = self.findColumnMaxTextLength;\n            self.intf.disposeContextMenu = self.disposeContextMenu;\n            self.intf.getCellAt = self.getCellAt;\n            self.intf.isCellVisible = self.isCellVisible;\n            self.intf.order = self.order;\n            self.intf.draw = self.draw;\n            self.intf.selectArea = self.selectArea;\n            self.intf.clipElement = self.clipElement;\n            self.intf.getSchemaFromData = self.getSchemaFromData;\n            self.intf.setFilter = self.setFilter;\n            self.intf.selectRow = self.selectRow;\n            self.intf.parentGrid = self.parentGrid;\n            self.intf.toggleTree = self.toggleTree;\n            self.intf.expandTree = self.expandTree;\n            self.intf.collapseTree = self.collapseTree;\n            self.intf.canvas = self.canvas;\n            self.intf.context = self.ctx;\n            self.intf.insertRow = self.insertRow;\n            self.intf.deleteRow = self.deleteRow;\n            self.intf.addRow = self.addRow;\n            self.intf.insertColumn = self.insertColumn;\n            self.intf.deleteColumn = self.deleteColumn;\n            self.intf.addColumn = self.addColumn;\n            self.intf.getClippingRect = self.getClippingRect;\n            self.intf.setRowHeight = self.setRowHeight;\n            self.intf.setColumnWidth = self.setColumnWidth;\n            self.intf.resetColumnWidths = self.resetColumnWidths;\n            self.intf.resetRowHeights = self.resetRowHeights;\n            self.intf.resize = self.resize;\n            self.intf.selectColumn = self.selectColumn;\n            self.intf.selectRow = self.selectRow;\n            self.intf.selectAll = self.selectAll;\n            self.intf.drawChildGrids = self.drawChildGrids;\n            self.intf.assertPxColor = self.assertPxColor;\n            self.intf.clearPxColorAssertions = self.clearPxColorAssertions;\n            self.intf.integerToAlpha = self.integerToAlpha;\n            self.intf.copy = self.copy;\n            self.intf.style = {};\n            Object.keys(self.style).forEach(function (key) {\n                // unless this line is here, Object.keys() will not work on <instance>.style\n                publicStyleKeyIntf[key] = undefined;\n                Object.defineProperty(publicStyleKeyIntf, key, {\n                    get: function () {\n                        return self.style[key];\n                    },\n                    set: function (value) {\n                        self.parseFont(value);\n                        self.style[key] = value;\n                        self.draw(true);\n                        self.dispatchEvent('stylechanged', {name: key, value: value});\n                    }\n                });\n            });\n            Object.defineProperty(self.intf, 'activeCell', {\n                get: function () {\n                    return self.activeCell;\n                }\n            });\n            /**\n             * When true, the grid is has focus.\n             * @memberof canvasDataGrid\n             * @property hasFocus\n             * @readonly\n             */\n            Object.defineProperty(self.intf, 'hasFocus', {\n                get: function () {\n                    return self.hasFocus;\n                }\n            });\n            Object.defineProperty(self.intf, 'style', {\n                get: function () {\n                    return publicStyleKeyIntf;\n                },\n                set: function (value) {\n                    Object.keys(value).forEach(function (key) {\n                        self.parseFont(value);\n                        self.style[key] = value[key];\n                    });\n                    self.draw(true);\n                    self.dispatchEvent('stylechanged', {name: 'style', value: value});\n                }\n            });\n            Object.keys(self.attributes).forEach(function (key) {\n                Object.defineProperty(self.intf.attributes, key, {\n                    get: function () {\n                        return self.attributes[key];\n                    },\n                    set: function (value) {\n                        self.attributes[key] = value;\n                        self.draw(true);\n                        self.dispatchEvent('attributechanged', {name: key, value: value[key]});\n                    }\n                });\n            });\n            self.filters.string = function (value, filterFor) {\n                var filterRegExp,\n                    regEnd = /\\/(i|g|m)*$/,\n                    pattern = regEnd.exec(filterFor),\n                    flags = pattern ? pattern[0].substring(1) : '',\n                    flagLength = flags.length;\n                self.invalidFilterRegEx = undefined;\n                if (filterFor.substring(0, 1) === '/' && pattern) {\n                    try {\n                        filterRegExp = new RegExp(filterFor.substring(1, filterFor.length - (flagLength + 1)), flags);\n                    } catch (e) {\n                        self.invalidFilterRegEx = e;\n                        return;\n                    }\n                    return filterRegExp.test(value);\n                }\n                return value.toString ? value.toString().toLocaleUpperCase()\n                    .indexOf(filterFor.toLocaleUpperCase()) !== -1 : false;\n            };\n            self.filters.number = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                return value === filterFor;\n            };\n            if (self.attributes.name && self.attributes.saveAppearance) {\n                self.storedSettings = localStorage.getItem(self.storageName + '-' + self.attributes.name);\n                if (self.storedSettings) {\n                    try {\n                        self.storedSettings = JSON.parse(self.storedSettings);\n                    } catch (e) {\n                        console.warn('could not read settings from localStore', e);\n                        self.storedSettings = undefined;\n                    }\n                }\n                if (self.storedSettings) {\n                    if (typeof self.storedSettings.sizes === 'object') {\n                        self.sizes.rows = self.storedSettings.sizes.rows;\n                        self.sizes.columns = self.storedSettings.sizes.columns;\n                        ['trees', 'columns', 'rows'].forEach(function (i) {\n                            if (!self.sizes[i]) {\n                                self.sizes[i] = {};\n                            }\n                        });\n                    }\n                }\n            }\n            ['formatters', 'filters', 'sorters'].forEach(self.initProp);\n            if (self.args.data) {\n                self.intf.data = self.args.data;\n            }\n            if (!self.data) {\n                self.intf.data = [];\n            }\n            if (self.args.schema) {\n                self.intf.schema = self.args.schema;\n            }\n            if (self.isChildGrid) {\n                requestAnimationFrame(function () { self.resize(true); });\n            } else {\n                self.resize(true);\n            }\n        };\n        /**\n         * Removes focus from the grid.\n         * @memberof canvasDataGrid\n         * @name blur\n         * @method\n         */\n        self.intf.blur = function (e) {\n            self.hasFocus = false;\n        };\n        /**\n         * Focuses on the grid.\n         * @memberof canvasDataGrid\n         * @name focus\n         * @method\n         */\n        self.intf.focus = function () {\n            self.hasFocus = true;\n            self.controlInput.focus();\n        };\n        Object.defineProperty(self.intf, 'height', {\n            get: function () {\n                return self.parentNode.height;\n            },\n            set: function (value) {\n                self.parentNode.height = value;\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'width', {\n            get: function () {\n                return self.parentNode.width;\n            },\n            set: function (value) {\n                self.parentNode.width = value;\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'openChildren', {\n            get: function () {\n                return self.openChildren;\n            }\n        });\n        Object.defineProperty(self.intf, 'childGrids', {\n            get: function () {\n                return Object.keys(self.childGrids).map(function (gridId) {\n                    return self.childGrids[gridId];\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'isChildGrid', {\n            get: function () {\n                return self.isChildGrid;\n            }\n        });\n        Object.defineProperty(self.intf, 'parentNode', {\n            get: function () {\n                return self.parentNode;\n            },\n            set: function (value) {\n                self.parentNode = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetParent', {\n            get: function () {\n                return self.parentNode;\n            },\n            set: function (value) {\n                self.parentNode = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetLeft', {\n            get: function () {\n                return self.parentNode.offsetLeft;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetTop', {\n            get: function () {\n                return self.parentNode.offsetTop;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollHeight', {\n            get: function () {\n                return self.scrollBox.scrollHeight;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollWidth', {\n            get: function () {\n                return self.scrollBox.scrollWidth;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollTop', {\n            get: function () {\n                return self.scrollBox.scrollTop;\n            },\n            set: function (value) {\n                self.scrollBox.scrollTop = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollLeft', {\n            get: function () {\n                return self.scrollBox.scrollLeft;\n            },\n            set: function (value) {\n                self.scrollBox.scrollLeft = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'sizes', {\n            get: function () {\n                return self.sizes;\n            }\n        });\n        Object.defineProperty(self.intf, 'input', {\n            get: function () {\n                return self.input;\n            }\n        });\n        Object.defineProperty(self.intf, 'controlInput', {\n            get: function () {\n                return self.controlInput;\n            }\n        });\n        Object.defineProperty(self.intf, 'currentCell', {\n            get: function () {\n                return self.currentCell;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleCells', {\n            get: function () {\n                return self.visibleCells;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRows', {\n            get: function () {\n                return self.visibleRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'selections', {\n            get: function () {\n                return self.selections;\n            }\n        });\n        Object.defineProperty(self.intf, 'dragMode', {\n            get: function () {\n                return self.dragMode;\n            }\n        });\n        Object.defineProperty(self.intf, 'changes', {\n            get: function () {\n                return self.changes;\n            }\n        });\n        self.intf.attributes = {};\n        self.intf.formatters = self.formatters;\n        self.normalizeDataset = function (data, callback) {\n            var i, d, max, syncFnInvoked;\n            if (data === null || data === '' || data === undefined) {\n                return callback([]);\n            }\n            if (typeof data === 'string'\n                    || typeof data === 'number'\n                    || typeof data === 'boolean') {\n                data = [{'0': data}];\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if ((!Array.isArray(data[0]) && typeof data[0] === 'object' && data[0] !== null)\n                            || (Array.isArray(data) && data.length === 0)) {\n                return callback(data);\n            }\n            if (typeof data === 'function') {\n                i = data.apply(self.intf, [function (d) {\n                    if (syncFnInvoked) {\n                        console.warn('Detected a callback to the data setter function after the same function already returned a value synchronously.');\n                    }\n                    self.normalizeDataset(d, callback);\n                }]);\n                if (i) {\n                    syncFnInvoked = true;\n                    self.normalizeDataset(i, callback);\n                }\n                return;\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if (Array.isArray(data)) {\n                if (!Array.isArray(data[0])) {\n                    //array of something?  throw it all into 1 row!\n                    data = [data];\n                }\n                // find the longest length\n                max = 0;\n                d = [];\n                data.forEach(function (row) {\n                    max = Math.max(max, row.length);\n                });\n                // map against length indexes\n                data.forEach(function (row, index) {\n                    var x;\n                    d[index] = {};\n                    for (x = 0; x < max; x += 1) {\n                        d[index][x] = row[x];\n                    }\n                });\n                return callback(d);\n            }\n            throw new Error('Unsupported data type.  Must be an array of arrays or an array of objects, function or string.');\n        };\n        Object.defineProperty(self.intf, 'selectionBounds', {\n            get: function () {\n                return self.getSelectionBounds();\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedRows', {\n            get: function () {\n                return self.getSelectedData(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedCells', {\n            get: function () {\n                return self.getSelectedData();\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleSchema', {\n            get: function () {\n                return self.getVisibleSchema().map(function eachDataRow(col) {\n                    return col;\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'ctx', {\n            get: function () {\n                return self.ctx;\n            }\n        });\n        Object.defineProperty(self.intf, 'schema', {\n            get: function schemaGetter() {\n                return self.getSchema();\n            },\n            set: function schemaSetter(value) {\n                if (!Array.isArray(value) || typeof value[0] !== 'object') {\n                    throw new Error('Schema must be an array of objects.');\n                }\n                if (value[0].name === undefined) {\n                    throw new Error('Expected schema to contain an object with at least a name property.');\n                }\n                self.schema = value.map(function eachSchemaColumn(column, index) {\n                    column.width = column.width || self.style.columnWidth;\n                    column[self.uniqueId] = self.getSchemaNameHash(column.name);\n                    column.filter = column.filter || self.filter(column.type);\n                    column.type = column.type || 'string';\n                    column.index = index;\n                    column.columnIndex = index;\n                    column.rowIndex = -1;\n                    return column;\n                });\n                self.tempSchema = undefined;\n                self.createNewRowData();\n                self.createColumnOrders();\n                self.tryLoadStoredOrders();\n                self.resize(true);\n                self.dispatchEvent('schemachanged', {schema: self.schema});\n            }\n        });\n        Object.defineProperty(self.intf, 'data', {\n            get: function dataGetter() {\n                return self.data.map(function (row) {\n                    delete row[self.uniqueId];\n                    return row;\n                });\n            },\n            set: function dataSetter(value) {\n                self.normalizeDataset(value, function (d) {\n                    self.originalData = d.map(function eachDataRow(row) {\n                        row[self.uniqueId] = self.uId;\n                        self.uId += 1;\n                        return row;\n                    });\n                    self.changes = [];\n                    //TODO apply filter to incoming dataset\n                    self.data = self.originalData;\n                    if (!self.schema) {\n                        self.tempSchema = self.getSchemaFromData();\n                    }\n                    if (!self.schema && self.data.length === 0) {\n                        self.tempSchema = [{name: ''}];\n                        self.tempSchema[0][self.uniqueId] = self.getSchemaNameHash('');\n                    }\n                    if (self.tempSchema && !self.schema) {\n                        self.createColumnOrders();\n                        self.tryLoadStoredOrders();\n                        self.dispatchEvent('schemachanged', {schema: self.tempSchema});\n                    }\n                    self.createNewRowData();\n                    if (self.attributes.autoResizeColumns && self.data.length > 0\n                            && self.storedSettings === undefined) {\n                        self.autosize();\n                    }\n                    self.fitColumnToValues('cornerCell', true);\n                    if (!self.resize() || !self.isChildGrid) { self.draw(true); }\n                    self.createRowOrders();\n                    self.tryLoadStoredOrders();\n                    self.dispatchEvent('datachanged', {data: self.data});\n                });\n            }\n        });\n        self.initScrollBox = function () {\n            var sHeight = 0,\n                sWidth = 0,\n                scrollTop = 0,\n                scrollLeft = 0,\n                scrollHeight = 0,\n                scrollWidth = 0,\n                scrollBoxHeight = 20,\n                scrollBoxWidth = 20;\n            function setScrollTop(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollTop value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollHeight) {\n                    value = scrollHeight;\n                }\n                if (scrollHeight < 0) {\n                    value = 0;\n                }\n                scrollTop = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            function setScrollLeft(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollLeft value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollWidth) {\n                    value = scrollWidth;\n                }\n                if (scrollWidth < 0) {\n                    value = 0;\n                }\n                scrollLeft = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            self.scrollBox.toString = function () {\n                return '{\"width\": ' + scrollWidth\n                    + ', \"height\": ' + scrollHeight\n                    + ', \"left\": ' + scrollLeft\n                    + ', \"top\": ' + scrollTop + '}';\n            };\n            self.scrollBox.scrollTo = function (x, y) {\n                setScrollLeft(x, true);\n                setScrollTop(y);\n            };\n            Object.defineProperty(self.scrollBox, 'scrollBoxHeight', {\n                get: function () {\n                    return scrollBoxHeight;\n                },\n                set: function (value) {\n                    scrollBoxHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollBoxWidth', {\n                get: function () {\n                    return scrollBoxWidth;\n                },\n                set: function (value) {\n                    scrollBoxWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'height', {\n                get: function () {\n                    return sHeight;\n                },\n                set: function (value) {\n                    if (scrollHeight < value) {\n                        scrollTop = 0;\n                    }\n                    sHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'width', {\n                get: function () {\n                    return sWidth;\n                },\n                set: function (value) {\n                    sWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollTop', {\n                get: function () {\n                    return scrollTop;\n                },\n                set: setScrollTop\n            });\n            Object.defineProperty(self.scrollBox, 'scrollLeft', {\n                get: function () {\n                    return scrollLeft;\n                },\n                set: setScrollLeft\n            });\n            Object.defineProperty(self.scrollBox, 'scrollHeight', {\n                get: function () {\n                    return scrollHeight;\n                },\n                set: function (value) {\n                    if (scrollTop > value) {\n                        scrollTop = Math.max(value, 0);\n                    }\n                    if (scrollHeight < sHeight) {\n                        scrollTop = 0;\n                    }\n                    scrollHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollWidth', {\n                get: function () {\n                    return scrollWidth;\n                },\n                set: function (value) {\n                    if (scrollLeft > value) {\n                        scrollLeft = Math.max(value, 0);\n                    }\n                    scrollWidth = value;\n                }\n            });\n        };\n        return;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false, Event: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var zIndexTop = 2, hoverScrollTimeout, autoCompleteContext;\n        function createContextMenu(ev, pos, items, parentContextMenu) {\n            var container = document.createElement('div'),\n                upArrow = document.createElement('div'),\n                downArrow = document.createElement('div'),\n                children = [],\n                selectedIndex = -1,\n                intf = {},\n                rect;\n            if (!Array.isArray(items)) { throw new Error('createContextMenu expects an array.'); }\n            function createItems() {\n                items.forEach(function (item) {\n                    var contextItemContainer = document.createElement('div'),\n                        childMenuArrow;\n                    function removeChildContext(e) {\n                        if (e.relatedTarget === container\n                                || item.contextMenu.container === e.relatedTarget\n                                || childMenuArrow === e.relatedTarget\n                                || (contextItemContainer === e.relatedTarget)\n                                ) { return; }\n                        item.contextMenu.dispose();\n                        children.splice(children.indexOf(item.contextMenu), 1);\n                        item.contextMenu = undefined;\n                        contextItemContainer.removeEventListener('mouseout', removeChildContext);\n                        container.removeEventListener('mouseout', removeChildContext);\n                        contextItemContainer.setAttribute('contextOpen', '0');\n                        contextItemContainer.setAttribute('opening', '0');\n                    }\n                    function contextAddCallback(items) {\n                        // check yet again if the user hasn't moved off\n                        if (contextItemContainer.getAttribute('opening') !== '1' ||\n                                contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        var cPos = contextItemContainer.getBoundingClientRect();\n                        cPos = {\n                            left: cPos.left + self.style.childContextMenuMarginLeft + container.offsetWidth,\n                            top: cPos.top + self.style.childContextMenuMarginTop,\n                            bottom: cPos.bottom,\n                            right: cPos.right,\n                        };\n                        item.contextMenu = createContextMenu(ev, cPos, items, intf);\n                        contextItemContainer.setAttribute('contextOpen', '1');\n                        contextItemContainer.addEventListener('mouseout', removeChildContext);\n                        container.addEventListener('mouseout', removeChildContext);\n                        children.push(item.contextMenu);\n                    }\n                    function createChildContext() {\n                        var i;\n                        if (contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        contextItemContainer.setAttribute('opening', '1');\n                        if (typeof item.items === 'function') {\n                            i  = item.items.apply(intf, [function (items) {\n                                contextAddCallback(items);\n                            }]);\n                            if (i !== undefined && Array.isArray(i)) {\n                                contextAddCallback(i);\n                            }\n                            return;\n                        }\n                        contextAddCallback(item.items);\n                    }\n                    function addItem(item) {\n                        function addContent(content) {\n                            if (typeof content === 'function') {\n                                return addContent(content(ev));\n                            }\n                            if (typeof content === 'object') {\n                                contextItemContainer.appendChild(content);\n                                return;\n                            }\n                            self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n                            contextItemContainer.addEventListener('mouseover', function () {\n                                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                            });\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n                            });\n                            contextItemContainer.innerHTML = content;\n                            return;\n                        }\n                        addContent(item.title);\n                        item.contextItemContainer = contextItemContainer;\n                        if ((item.items && item.items.length > 0) || typeof item.items === 'function') {\n                            childMenuArrow = document.createElement('div');\n                            self.createInlineStyle(childMenuArrow, 'canvas-datagrid-context-child-arrow');\n                            childMenuArrow.innerHTML = self.style.childContextMenuArrowHTML;\n                            contextItemContainer.appendChild(childMenuArrow);\n                            contextItemContainer.addEventListener('mouseover', createChildContext);\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                contextItemContainer.setAttribute('opening', '0');\n                            });\n                        }\n                        if (item.click) {\n                            contextItemContainer.addEventListener('click', function (ev) {\n                                item.click.apply(self, [ev]);\n                            });\n                        }\n                    }\n                    addItem(item);\n                    container.appendChild(contextItemContainer);\n                });\n            }\n            function clickIndex(idx) {\n                items[idx].contextItemContainer.dispatchEvent(new Event('click'));\n            }\n            function checkArrowVisibility() {\n                if (container.scrollTop > 0) {\n                    document.body.appendChild(upArrow);\n                } else if (upArrow.parentNode) {\n                    upArrow.parentNode.removeChild(upArrow);\n                }\n                if (container.scrollTop >= container.scrollHeight - container.offsetHeight && downArrow.parentNode) {\n                    downArrow.parentNode.removeChild(downArrow);\n                } else if (container.scrollHeight - container.offsetHeight > 0\n                        && !(container.scrollTop >= container.scrollHeight - container.offsetHeight)) {\n                    document.body.appendChild(downArrow);\n                }\n            }\n            function startHoverScroll(type) {\n                return function t() {\n                    var a = self.attributes.contextHoverScrollAmount;\n                    if (type === 'up' && container.scrollTop === 0) { return; }\n                    if (type === 'down' && container.scrollTop === container.scrollHeight) { return; }\n                    container.scrollTop += (type === 'up' ? -a : a);\n                    hoverScrollTimeout = setTimeout(t, self.attributes.contextHoverScrollRateMs, type);\n                };\n            }\n            function endHoverScroll(type) {\n                return function () {\n                    clearTimeout(hoverScrollTimeout);\n                };\n            }\n            function init() {\n                var loc = {},\n                    s = self.scrollOffset(self.canvas);\n                createItems();\n                self.createInlineStyle(container, 'canvas-datagrid-context-menu');\n                loc.x = pos.left - s.left;\n                loc.y = pos.top - s.top;\n                loc.height = 0;\n                zIndexTop += 1;\n                container.style.position = 'absolute';\n                upArrow.style.color = self.style.contextMenuArrowColor;\n                downArrow.style.color = self.style.contextMenuArrowColor;\n                [upArrow, downArrow].forEach(function (el) {\n                    el.style.textAlign = 'center';\n                    el.style.position = 'absolute';\n                    el.style.zIndex = zIndexTop + 1;\n                });\n                container.style.zIndex = zIndexTop;\n                if (parentContextMenu && parentContextMenu.inputDropdown) {\n                    container.style.maxHeight = window.innerHeight - loc.y - self.style.autocompleteBottomMargin + 'px';\n                    container.style.minWidth = pos.width + 'px';\n                    loc.y += pos.height;\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                container.addEventListener('scroll', checkArrowVisibility);\n                container.addEventListener('wheel', function (e) {\n                    if (self.hasFocus) {\n                        container.scrollTop += e.deltaY;\n                        container.scrollLeft += e.deltaX;\n                    }\n                    checkArrowVisibility();\n                });\n                upArrow.innerHTML = self.style.contextMenuArrowUpHTML;\n                downArrow.innerHTML = self.style.contextMenuArrowDownHTML;\n                container.appendChild(upArrow);\n                document.body.appendChild(downArrow);\n                document.body.appendChild(container);\n                rect = container.getBoundingClientRect();\n                if (rect.bottom > window.innerHeight && !(parentContextMenu && parentContextMenu.inputDropdown)) {\n                    loc.y = window.innerHeight - container.offsetHeight;\n                    if (loc.y < 0) { loc.y = 0; }\n                    if (container.offsetHeight > window.innerHeight) {\n                        container.style.height = window.innerHeight - self.style.contextMenuWindowMargin + 'px';\n                    }\n                }\n                if (rect.right > window.innerWidth) {\n                    if (parentContextMenu) {\n                        loc.x = parentContextMenu.container.offsetLeft - container.offsetWidth;\n                    } else {\n                        loc.x = window.innerWidth - container.offsetWidth;\n                    }\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                rect = container.getBoundingClientRect();\n                upArrow.style.top = rect.top + 'px';\n                downArrow.style.top = rect.top + rect.height - downArrow.offsetHeight + 'px';\n                upArrow.style.left = rect.left + 'px';\n                downArrow.style.left = rect.left + 'px';\n                downArrow.style.width = container.offsetWidth + 'px';\n                upArrow.style.width = container.offsetWidth + 'px';\n                downArrow.addEventListener('mouseover', startHoverScroll('down'));\n                downArrow.addEventListener('mouseout', endHoverScroll('down'));\n                upArrow.addEventListener('mouseover', startHoverScroll('up'));\n                upArrow.addEventListener('mouseout', endHoverScroll('up'));\n                checkArrowVisibility();\n            }\n            intf.parentGrid = self.intf;\n            intf.parentContextMenu = parentContextMenu;\n            intf.container = container;\n            init();\n            intf.clickIndex = clickIndex;\n            intf.rect = rect;\n            intf.items = items;\n            intf.upArrow = upArrow;\n            intf.downArrow = downArrow;\n            intf.dispose = function () {\n                clearTimeout(hoverScrollTimeout);\n                children.forEach(function (c) {\n                    c.dispose();\n                });\n                [downArrow, upArrow, container].forEach(function (el) {\n                    if (el.parentNode) { el.parentNode.removeChild(el); }\n                });\n            };\n            Object.defineProperty(intf, 'selectedIndex', {\n                get: function () {\n                    return selectedIndex;\n                },\n                set: function (value) {\n                    if (typeof value !== 'number' || isNaN(value || !isFinite(value))) {\n                        throw new Error('Context menu selected index must be a sane number.');\n                    }\n                    selectedIndex = value;\n                    if (selectedIndex > items.length - 1) {\n                        selectedIndex = items.length - 1;\n                    }\n                    if (selectedIndex < 0) {\n                        selectedIndex = 0;\n                    }\n                    items.forEach(function (item, index) {\n                        if (index === selectedIndex) {\n                            return self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                        }\n                        self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item');\n                    });\n                }\n            });\n            return intf;\n        }\n        function createFilterContextMenuItems(e) {\n            var filterContainer = document.createElement('div'),\n                filterLabel = document.createElement('div'),\n                filterAutoCompleteButton = document.createElement('button'),\n                filterInput = document.createElement('input'),\n                n = e.cell && e.cell.header ? e.cell.header.title || e.cell.header.name : '',\n                autoCompleteItems,\n                iRect;\n            function checkRegExpErrorState() {\n                filterInput.style.background = self.style.contextFilterInputBackground;\n                filterInput.style.color = self.style.contextFilterInputColor;\n                if (self.invalidFilterRegEx) {\n                    filterInput.style.background = self.style.contextFilterInvalidRegExpBackground;\n                    filterInput.style.color = self.style.contextFilterInvalidRegExpColor;\n                }\n            }\n            function fillAutoComplete() {\n                autoCompleteItems = {};\n                self.data.filter(function (d, i) { return i < self.attributes.maxAutoCompleteItems; }).forEach(function (row) {\n                    var value = row[e.cell.header.name];\n                    if (autoCompleteItems[value]) { return; }\n                    autoCompleteItems[value] = {\n                        title: self.formatters[e.cell.header.type || 'string']({ cell: { value: value }}),\n                        click: function (e) {\n                            filterInput.value = value;\n                            e.stopPropagation();\n                            filterInput.dispatchEvent(new Event('keyup'));\n                            self.disposeAutocomplete();\n                            return;\n                        }\n                    };\n                });\n                autoCompleteItems = Object.keys(autoCompleteItems).map(function (key) {\n                    return autoCompleteItems[key];\n                });\n            }\n            function createAutoCompleteContext(ev) {\n                if (ev && [40, 38, 13, 9, 27].indexOf(ev.keyCode) !== -1) { return; }\n                fillAutoComplete();\n                iRect = filterInput.getBoundingClientRect();\n                if (autoCompleteContext) {\n                    autoCompleteContext.dispose();\n                    autoCompleteContext = undefined;\n                }\n                autoCompleteContext = createContextMenu(e, {\n                    left: iRect.left,\n                    top: iRect.top,\n                    right: iRect.right,\n                    bottom: iRect.bottom,\n                    height: iRect.height,\n                    width: iRect.width\n                }, autoCompleteItems, {inputDropdown: true});\n                autoCompleteContext.selectedIndex = 0;\n            }\n            self.createInlineStyle(filterLabel, 'canvas-datagrid-context-menu-label');\n            self.createInlineStyle(filterAutoCompleteButton, 'canvas-datagrid-context-menu-filter-button');\n            self.createInlineStyle(filterInput, 'canvas-datagrid-context-menu-filter-input');\n            checkRegExpErrorState();\n            filterInput.onclick = self.disposeAutocomplete;\n            filterInput.addEventListener('keydown', function (e) {\n                //down\n                if (e.keyCode === 40) {\n                    autoCompleteContext.selectedIndex += 1;\n                }\n                //up\n                if (e.keyCode === 38) {\n                    autoCompleteContext.selectedIndex -= 1;\n                }\n                //enter\n                if (e.keyCode === 13) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    self.disposeContextMenu();\n                }\n                //tab\n                if (e.keyCode === 9) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    e.preventDefault();\n                }\n                //esc\n                if (e.keyCode === 27) {\n                    self.disposeContextMenu();\n                }\n            });\n            filterInput.addEventListener('keyup', function () {\n                self.setFilter(e.cell.header.name, filterInput.value);\n            });\n            filterInput.addEventListener('keyup', createAutoCompleteContext);\n            ['focus', 'blur', 'keydown', 'keyup', 'change'].forEach(function (en) {\n                filterInput.addEventListener(en, checkRegExpErrorState);\n            });\n            filterInput.value = e.cell.header ? self.columnFilters[e.cell.header.name] || '' : '';\n            filterLabel.innerHTML = self.attributes.filterOptionText.replace(/%s/g, n);\n            filterAutoCompleteButton.onclick = function () {\n                if (autoCompleteContext) {\n                    return self.disposeAutocomplete();\n                }\n                createAutoCompleteContext();\n            };\n            filterAutoCompleteButton.innerHTML = self.style.contextFilterButtonHTML;\n            filterContainer.addEventListener('click', function (e) {\n                return e.stopPropagation();\n            });\n            filterContainer.appendChild(filterLabel);\n            filterContainer.appendChild(filterInput);\n            filterContainer.appendChild(filterAutoCompleteButton);\n            e.items.push({\n                title: filterContainer\n            });\n            if (Object.keys(self.columnFilters).length) {\n                Object.keys(self.columnFilters).forEach(function (cf) {\n                    var h = self.getHeaderByName(cf);\n                    e.items.push({\n                        title: self.attributes.removeFilterOptionText.replace(/%s/g, h.title || h.name),\n                        click: function removeFilterClick(e) {\n                            e.preventDefault();\n                            self.setFilter(cf, '');\n                            self.controlInput.focus();\n                        }\n                    });\n                });\n            }\n        }\n        function addDefaultContextMenuItem(e) {\n            var isNormalCell = !(e.cell.isBackground || e.cell.isHeaderCellCap\n                    || e.cell.isScrollBar || e.cell.isCorner || e.cell.isRowHeader)\n                    && e.cell.header;\n            if (self.attributes.showFilter && isNormalCell) {\n                createFilterContextMenuItems(e);\n            }\n            if (self.attributes.showCopy\n                    && self.selections.reduce(function (p, r) {\n                        return p + r.length;\n                    }, 0) > 0) {\n                e.items.push({\n                    title: self.attributes.copyText,\n                    click: function () {\n                        document.execCommand('copy');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.saveAppearance && self.attributes.showClearSettingsOption\n                    && (Object.keys(self.sizes.rows).length > 0\n                        || Object.keys(self.sizes.columns).length > 0)) {\n                e.items.push({\n                    title: self.attributes.clearSettingsOptionText,\n                    click: function (e) {\n                        e.preventDefault();\n                        self.sizes.rows = {};\n                        self.sizes.columns = {};\n                        self.createRowOrders();\n                        self.createColumnOrders();\n                        self.storedSettings = undefined;\n                        self.dispatchEvent('resizecolumn', {columnWidth: self.style.columnWidth});\n                        self.dispatchEvent('resizerow', {cellHeight: self.style.cellHeight});\n                        self.setStorageData();\n                        self.resize(true);\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.allowSorting && self.attributes.showOrderByOption && isNormalCell) {\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextAsc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'asc');\n                        self.controlInput.focus();\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextDesc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'desc');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n        }\n        self.disposeAutocomplete = function () {\n            if (autoCompleteContext) {\n                autoCompleteContext.dispose();\n                autoCompleteContext = undefined;\n            }\n        };\n        self.disposeContextMenu = function () {\n            document.removeEventListener('click', self.disposeContextMenu);\n            zIndexTop = 2;\n            self.disposeAutocomplete();\n            if (self.contextMenu) {\n                self.contextMenu.dispose();\n            }\n            self.contextMenu = undefined;\n        };\n        self.contextmenuEvent = function (e, overridePos) {\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            function createDiposeEvent() {\n                requestAnimationFrame(function () {\n                    document.addEventListener('click', self.disposeContextMenu);\n                    document.removeEventListener('mouseup', createDiposeEvent);\n                });\n            }\n            var items = [],\n                pos = overridePos || self.getLayerPos(e, true),\n                ev = {\n                    NativeEvent: e,\n                    cell: self.getCellAt(pos.x, pos.y),\n                    items: items\n                };\n            if (!ev.cell.isGrid) {\n                addDefaultContextMenuItem(ev);\n            }\n            if (self.dispatchEvent('contextmenu', ev)) {\n                return;\n            }\n            if (!ev.cell.isGrid) {\n                if (self.contextMenu) {\n                    self.disposeContextMenu();\n                }\n                self.contextMenu = createContextMenu(ev, {\n                    left: pos.x + pos.rect.left + self.style.contextMenuMarginLeft + self.canvasOffsetLeft,\n                    top: pos.y + pos.rect.top + self.style.contextMenuMarginTop + self.canvasOffsetTop,\n                    right: ev.cell.width + ev.cell.x + pos.rect.left,\n                    bottom: ev.cell.height + ev.cell.y + pos.rect.top,\n                    height: ev.cell.height,\n                    width: ev.cell.width\n                }, items);\n                document.addEventListener('mouseup', createDiposeEvent);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        self.defaults = {\n            attributes: [\n                ['name', ''],\n                ['tree', false],\n                ['showNewRow', false],\n                ['treeHorizontalScroll', false],\n                ['saveAppearance', true],\n                ['selectionFollowsActiveCell', false],\n                ['multiLine', false],\n                ['editable', true],\n                ['allowColumnReordering', true],\n                ['allowRowReordering', false],\n                ['allowSorting', true],\n                ['showFilter', true],\n                ['globalRowResize', false],\n                ['pageUpDownOverlap', 1],\n                ['persistantSelectionMode', false],\n                ['rowSelectionMode', false],\n                ['selectionMode', 'cell'],\n                ['autoResizeColumns', false],\n                ['allowRowHeaderResize', true],\n                ['allowColumnResize', true],\n                ['allowRowResize', true],\n                ['allowRowResizeFromCell', false],\n                ['allowColumnResizeFromCell', false],\n                ['debug', false],\n                ['borderResizeZone', 10],\n                ['showColumnHeaders', true],\n                ['showRowNumbers', true],\n                ['showRowHeaders', true],\n                ['scrollRepeatRate', 75],\n                ['selectionScrollZone', 20],\n                ['resizeScrollZone', 20],\n                ['contextHoverScrollRateMs', 5],\n                ['contextHoverScrollAmount', 2],\n                ['selectionScrollIncrement', 20],\n                ['reorderDeadZone', 3],\n                ['showClearSettingsOption', true],\n                ['showOrderByOption', true],\n                ['clearSettingsOptionText', 'Clear saved settings'],\n                ['showOrderByOptionTextAsc', 'Order by %s ascending'],\n                ['showOrderByOptionTextDesc', 'Order by %s descending'],\n                ['removeFilterOptionText', 'Remove filter on %s'],\n                ['filterOptionText', 'Filter %s'],\n                ['filterTextPrefix', '(filtered) '],\n                ['touchReleaseAnimationDurationMs', 2000],\n                ['touchReleaseAcceleration', 90],\n                ['touchDeadZone', 3],\n                ['touchSelectTimeMs', 800],\n                ['touchScrollZone', 30],\n                ['copyText', 'Copy'],\n                ['showCopy', true],\n                ['columnHeaderClickBehavior', 'sort'],\n                ['scrollPointerLock', false],\n                ['maxAutoCompleteItems', 200]\n            ],\n            styles: [\n                ['activeCellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['activeCellBorderWidth', 0.25],\n                ['activeCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellFont', '16px sans-serif'],\n                ['activeCellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['activeCellOverlayBorderWidth', 0.5],\n                ['activeCellPaddingBottom', 5],\n                ['activeCellPaddingLeft', 5],\n                ['activeCellPaddingRight', 7],\n                ['activeCellPaddingTop', 5],\n                ['activeCellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['activeCellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['activeColumnHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeColumnHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeRowHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeRowHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['autocompleteBottomMargin', 60],\n                ['autosizeHeaderCellPadding', 8],\n                ['autosizePadding', 5],\n                ['backgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cellAutoResizePadding', 13],\n                ['cellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['cellBorderWidth', 0.5],\n                ['cellColor', 'rgba(0, 0, 0, 1)'],\n                ['cellFont', '16px sans-serif'],\n                ['cellGridHeight', 250],\n                ['cellHeight', 25],\n                ['cellHeightWithChildGrid', 150],\n                ['cellHorizontalAlignment', 'left'],\n                ['cellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['cellPaddingBottom', 5],\n                ['cellPaddingLeft', 5],\n                ['cellPaddingRight', 7],\n                ['cellPaddingTop', 5],\n                ['cellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['cellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['cellVerticalAlignment', 'center'],\n                ['cellWidthWithChildGrid', 250],\n                ['childContextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['childContextMenuArrowHTML', '&#x25BA;'],\n                ['childContextMenuMarginLeft', -15],\n                ['childContextMenuMarginTop', 0],\n                ['columnHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellBorderColor', 'rgba(152, 152, 152, 1)'],\n                ['columnHeaderCellBorderWidth', 0.25],\n                ['columnHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['columnHeaderCellFont', '16px sans-serif'],\n                ['columnHeaderCellHeight', 25],\n                ['columnHeaderCellHorizontalAlignment', 'left'],\n                ['columnHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['columnHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['columnHeaderCellPaddingBottom', 5],\n                ['columnHeaderCellPaddingLeft', 5],\n                ['columnHeaderCellPaddingRight', 7],\n                ['columnHeaderCellPaddingTop', 5],\n                ['columnHeaderCellVerticalAlignment', 'center'],\n                ['columnWidth', 250],\n                ['contextFilterButtonBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterButtonBorderRadius', '3px'],\n                ['contextFilterButtonHTML', '&#x25BC;'],\n                ['contextFilterInputBackground', 'rgba(255,255,255,1)'],\n                ['contextFilterInputBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterInputBorderRadius', '0'],\n                ['contextFilterInputColor', 'rgba(0,0,0,1)'],\n                ['contextFilterInputFontFamily', 'sans-serif'],\n                ['contextFilterInputFontSize', '14px'],\n                ['contextFilterInvalidRegExpBackground', 'rgba(180, 6, 1, 1)'],\n                ['contextFilterInvalidRegExpColor', 'rgba(255, 255, 255, 1)'],\n                ['contextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuArrowDownHTML', '&#x25BC;'],\n                ['contextMenuArrowUpHTML', '&#x25B2;'],\n                ['contextMenuBackground', 'rgba(240, 240, 240, 1)'],\n                ['contextMenuBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextMenuBorderRadius', '3px'],\n                ['contextMenuChildArrowFontSize', '12px'],\n                ['contextMenuColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuFilterButtonFontFamily', 'sans-serif'],\n                ['contextMenuFilterButtonFontSize', '10px'],\n                ['contextMenuFilterInvalidExpresion', 'rgba(237, 155, 156, 1)'],\n                ['contextMenuFontFamily', 'sans-serif'],\n                ['contextMenuFontSize', '16px'],\n                ['contextMenuHoverBackground', 'rgba(182, 205, 250, 1)'],\n                ['contextMenuHoverColor', 'rgba(43, 48, 153, 1)'],\n                ['contextMenuItemBorderRadius', '3px'],\n                ['contextMenuItemMargin', '2px'],\n                ['contextMenuLabelDisplay', 'inline-block'],\n                ['contextMenuLabelMargin', '0 3px 0 0'],\n                ['contextMenuLabelMaxWidth', '700px'],\n                ['contextMenuLabelMinWidth', '75px'],\n                ['contextMenuMarginLeft', 3],\n                ['contextMenuMarginTop', -3],\n                ['contextMenuOpacity', '0.98'],\n                ['contextMenuPadding', '2px'],\n                ['contextMenuWindowMargin', 6],\n                ['cornerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cornerCellBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['editCellBackgroundColor', 'white'],\n                ['editCellBorder', 'solid 1px rgba(110, 168, 255, 1)'],\n                ['editCellBoxShadow', '0 2px 5px rgba(0,0,0,0.4)'],\n                ['editCellColor', 'black'],\n                ['editCellFontFamily', 'sans-serif'],\n                ['editCellFontSize', '16px'],\n                ['editCellPaddingLeft', 4],\n                ['gridBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['gridBorderWidth', 1],\n                ['columnHeaderOrderByArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['columnHeaderOrderByArrowBorderWidth', 1],\n                ['columnHeaderOrderByArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['columnHeaderOrderByArrowHeight', 8],\n                ['columnHeaderOrderByArrowMarginLeft', 0],\n                ['columnHeaderOrderByArrowMarginRight', 5],\n                ['columnHeaderOrderByArrowMarginTop', 6],\n                ['columnHeaderOrderByArrowWidth', 13],\n                ['minColumnWidth', 45],\n                ['minHeight', 24],\n                ['minRowHeight', 24],\n                ['name', 'default'],\n                ['reorderMarkerBackgroundColor', 'rgba(0, 0, 0, 0.1)'],\n                ['reorderMarkerBorderColor', 'rgba(0, 0, 0, 0.2)'],\n                ['reorderMarkerBorderWidth', 1.25],\n                ['reorderMarkerIndexBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['reorderMarkerIndexBorderWidth', 2.75],\n                ['rowHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['rowHeaderCellBorderColor', 'rgba(200, 200, 200, 1)'],\n                ['rowHeaderCellBorderWidth', 1],\n                ['rowHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellFont', '16px sans-serif'],\n                ['rowHeaderCellHeight', 25],\n                ['rowHeaderCellHorizontalAlignment', 'left'],\n                ['rowHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['rowHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['rowHeaderCellPaddingBottom', 5],\n                ['rowHeaderCellPaddingLeft', 5],\n                ['rowHeaderCellPaddingRight', 5],\n                ['rowHeaderCellPaddingTop', 5],\n                ['rowHeaderCellSelectedBackgroundColor', 'rgba(217, 217, 217, 1)'],\n                ['rowHeaderCellSelectedColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellVerticalAlignment', 'center'],\n                ['rowHeaderCellWidth', 57],\n                ['scrollBarActiveColor', 'rgba(125, 125, 125, 1)'],\n                ['scrollBarBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarBorderWidth', 0.5],\n                ['scrollBarBoxBorderRadius', 4.125],\n                ['scrollBarBoxColor', 'rgba(192, 192, 192, 1)'],\n                ['scrollBarBoxMargin', 2],\n                ['scrollBarBoxMinSize', 15],\n                ['scrollBarBoxWidth', 8],\n                ['scrollBarCornerBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarCornerBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarWidth', 11],\n                ['selectionOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionOverlayBorderWidth', 0.75],\n                ['treeArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['treeArrowBorderWidth', 1],\n                ['treeArrowClickRadius', 5],\n                ['treeArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['treeArrowHeight', 8],\n                ['treeArrowMarginLeft', 0],\n                ['treeArrowMarginRight', 5],\n                ['treeArrowMarginTop', 6],\n                ['treeArrowWidth', 13],\n                ['treeGridHeight', 250]\n            ]\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        /**\n         * Ends editing, optionally aborting the edit.\n         * @memberof canvasDataGrid\n         * @name endEdit\n         * @method\n         * @param {boolean} abort When true, abort the edit.\n         */\n        self.endEdit = function (abort) {\n            var cell = self.input.editCell,\n                y = cell.rowIndex;\n            function abortEdit() {\n                abort = true;\n            }\n            if (self.dispatchEvent('beforeendedit', {\n                    cell: cell,\n                    newValue: self.input.value,\n                    oldValue: cell.value,\n                    abort: abortEdit,\n                    input: self.input\n                })) { return false; }\n            if (self.input.value !== cell.value && !abort) {\n                self.changes[y] = self.changes[y] || {};\n                self.changes[y][cell.header.name] = self.input.value;\n                cell.data[cell.header.name] = self.input.value;\n                if (y === self.data.length) {\n                    if (self.dispatchEvent('newrow', {\n                            value: self.input.value,\n                            defaultValue: cell.value,\n                            aborted: abort,\n                            cell: cell,\n                            input: self.input\n                        })) { return false; }\n                    self.uId += 1;\n                    self.addRow(cell.data);\n                    self.createNewRowData();\n                }\n                self.draw(true);\n            }\n            document.body.removeChild(self.input);\n            self.controlInput.focus();\n            self.dispatchEvent('endedit', {\n                cell: cell,\n                value: self.input.value,\n                aborted: abort,\n                input: self.input\n            });\n            self.input = undefined;\n            return true;\n        };\n        /**\n         * Begins editing at cell x, row y.\n         * @memberof canvasDataGrid\n         * @name beginEditAt\n         * @method\n         * @param {number} x The column index of the cell to edit.\n         * @param {number} y The row index of the cell to edit.\n         */\n        self.beginEditAt = function (x, y) {\n            if (!self.attributes.editable) { return; }\n            var cell = self.getVisibleCellByIndex(x, y),\n                s = self.getVisibleSchema(),\n                enumItems;\n            if (self.dispatchEvent('beforebeginedit', {cell: cell})) { return false; }\n            self.scrollIntoView(x, y);\n            self.setActiveCell(x, y);\n            if (cell.header.enum) {\n                self.input = document.createElement('select');\n            } else {\n                self.input = document.createElement(self.attributes.multiLine\n                    ? 'textarea' : 'input');\n            }\n            function postDraw() {\n                var option, valueInEnum;\n                cell = self.getVisibleCellByIndex(x, y);\n                if (cell.header.enum) {\n                    // add enums\n                    if (typeof cell.header.enum === 'function') {\n                        enumItems = cell.header.enum.apply(self.intf, [{cell: cell}]);\n                    } else if (Array.isArray(cell.header.enum)) {\n                        enumItems = cell.header.enum;\n                    }\n                    enumItems.forEach(function (e) {\n                        var i = document.createElement('option'),\n                            val,\n                            title;\n                        if (Array.isArray(e)) {\n                            val = e[0];\n                            title = e[1];\n                        } else {\n                            val = e;\n                            title = e;\n                        }\n                        if (val === cell.value) { valueInEnum = true; }\n                        i.value = val;\n                        i.innerHTML = title;\n                        self.input.appendChild(i);\n                    });\n                    if (!valueInEnum) {\n                        option = document.createElement('option');\n                        option.value = cell.value;\n                        option.innerHTML = cell.value;\n                        self.input.appendChild(option);\n                    }\n                    self.input.addEventListener('change', function () {\n                        self.endEdit();\n                        self.draw(true);\n                    });\n                }\n                document.body.appendChild(self.input);\n                self.createInlineStyle(self.input, 'canvas-datagrid-edit-input');\n                self.input.style.position = 'absolute';\n                self.input.editCell = cell;\n                self.resizeEditInput();\n                self.input.style.zIndex = '2';\n                self.input.value = cell.value;\n                self.input.focus();\n                self.input.addEventListener('click', self.stopPropagation);\n                self.input.addEventListener('dblclick', self.stopPropagation);\n                self.input.addEventListener('mouseup', self.stopPropagation);\n                self.input.addEventListener('mousedown', self.stopPropagation);\n                self.input.addEventListener('keydown', function (e) {\n                    var nx = cell.columnIndex,\n                        ny = cell.rowIndex;\n                    // esc\n                    if (e.keyCode === 27) {\n                        self.endEdit(true);\n                        self.draw(true);\n                    // enter\n                    } else if (e.keyCode === 13\n                            && (!self.attributes.multiLine\n                                || (self.attributes.multiLine && e.shiftKey))) {\n                        self.endEdit();\n                        self.draw(true);\n                    } else if (e.keyCode === 9) {\n                        e.preventDefault();\n                        if (!self.endEdit()) {\n                            return;\n                        }\n                        if (e.shiftKey) {\n                            nx -= 1;\n                        } else {\n                            nx += 1;\n                        }\n                        if (nx < 0) {\n                            nx = s.length - 1;\n                            ny -= 1;\n                        }\n                        if (nx > s.length - 1) {\n                            nx = 0;\n                            ny += 1;\n                        }\n                        if (ny < 0) {\n                            ny = self.data.length - 1;\n                        }\n                        if (ny > self.data.length - 1) {\n                            ny = 0;\n                        }\n                        self.scrollIntoView(nx, ny);\n                        self.beginEditAt(nx, ny);\n                    }\n                });\n            }\n            postDraw();\n            self.dispatchEvent('beginedit', {cell: cell, input: self.input});\n        };\n        self.createInlineStyle = function (el, className) {\n            var css = {\n                'canvas-datagrid-context-menu-filter-input': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextFilterInputBackground,\n                    color: self.style.contextFilterInputColor,\n                    border: self.style.contextFilterInputBorder,\n                    borderRadius: self.style.contextFilterInputBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextFilterInputFontFamily,\n                    fontSize: self.style.contextFilterInputFontSize\n                },\n                'canvas-datagrid-context-menu-filter-button': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextFilterButtonBorder,\n                    borderRadius: self.style.contextFilterButtonBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFilterButtonFontFamily,\n                    fontSize: self.style.contextMenuFilterButtonFontSize\n                },\n                'canvas-datagrid-context-child-arrow': {\n                    cssFloat: 'right',\n                    color: self.style.childContextMenuArrowColor,\n                    fontSize: self.style.contextMenuChildArrowFontSize,\n                    fontFamily: self.style.contextMenuFontFamily,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-autocomplete': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    position: 'absolute',\n                    zIndex: 3,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-autocomplete-item': {\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor\n                },\n                'canvas-datagrid-autocomplete-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-canvas': {\n                    position: 'absolute',\n                    zIndex: '-1'\n                },\n                'canvas-datagrid': {\n                    position: 'absolute',\n                    background: self.style.backgroundColor,\n                    zIndex: '1',\n                    boxSizing: 'content-box',\n                    padding: '0'\n                },\n                'canvas-datagrid-control-input': {\n                    position: 'fixed',\n                    top: '-5px',\n                    left: '-5px',\n                    border: 'none',\n                    opacity: '0',\n                    cursor: 'pointer',\n                    width: '1px',\n                    height: '1px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize\n                },\n                'canvas-datagrid-edit-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 ' + self.style.editCellPaddingLeft + 'px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.editCellFontFamily,\n                    fontSize: self.style.editCellFontSize,\n                    boxShadow: self.style.editCellBoxShadow,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-context-menu-item': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-context-menu-label': {\n                    margin: self.style.contextMenuLabelMargin,\n                    display: self.style.contextMenuLabelDisplay,\n                    minWidth: self.style.contextMenuLabelMinWidth,\n                    maxWidth: self.style.contextMenuLabelMaxWidth\n                },\n                'canvas-datagrid-context-menu': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-invalid-search-regExp': {\n                    background: self.style.contextMenuFilterInvalidExpresion\n                }\n            };\n            if (css[className]) {\n                Object.keys(css[className]).map(function (prop) {\n                    el.style[prop] = css[className][prop];\n                });\n            }\n            return;\n        };\n        self.appendTo = function (n) {\n            self.parentNode = n || document.createElement('canvas');\n            self.height = self.parentNode;\n            self.width = self.parentNode;\n            if (self.parentNode && /canvas-datagrid-(cell|tree)/.test(self.parentNode.nodeType)) {\n                self.isChildGrid = true;\n                self.parentGrid = self.parentNode.parentGrid;\n                self.ctx = self.parentGrid.context;\n                self.canvas = self.parentGrid.canvas;\n                self.controlInput = self.parentGrid.controlInput;\n                self.eventParent = self.canvas;\n                self.intf.offsetParent = self.parentNode;\n            } else {\n                self.controlInput = document.createElement('input');\n                self.controlInput.onblur = self.intf.blur;\n                self.createInlineStyle(self.controlInput, 'canvas-datagrid-control-input');\n                self.isChildGrid = false;\n                self.parentDOMNode = self.parentNode;\n                self.parentNode = self.parentDOMNode;\n                self.parentIsCanvas = /canvas/i.test(self.parentDOMNode.tagName);\n                if (self.parentIsCanvas) {\n                    self.canvas = self.parentDOMNode;\n                } else {\n                    self.canvas = document.createElement('canvas');\n                    self.parentDOMNode.appendChild(self.canvas);\n                }\n                self.ctx = self.canvas.getContext('2d');\n                self.ctx.textBaseline = 'alphabetic';\n                document.body.appendChild(self.controlInput);\n                self.eventParent = self.canvas;\n            }\n            self.controlInput.addEventListener('blur', function (e) {\n                if (e.target !== self.canvas) {\n                    self.hasFocus = false;\n                }\n            });\n            window.addEventListener('resize', self.resize);\n            if (MutationObserver) {\n                self.observer = new MutationObserver(function (mutations) {\n                    mutations.forEach(function (mutation) {\n                        self.resize(true);\n                    });\n                });\n                [self.canvas.parentNode].forEach(function (el) {\n                    if (!el) { return; }\n                    self.observer.observe(el, { attributes: true });\n                });\n            }\n            self.eventParent.addEventListener('scroll', self.resize, false);\n            self.eventParent.addEventListener('touchstart', self.touchstart, false);\n            self.eventParent.addEventListener('mouseup', self.mouseup, false);\n            self.eventParent.addEventListener('mousedown', self.mousedown, false);\n            self.eventParent.addEventListener('dblclick', self.dblclick, false);\n            self.eventParent.addEventListener('click', self.click, false);\n            self.eventParent.addEventListener('mousemove', self.mousemove);\n            self.eventParent.addEventListener('wheel', self.scrollWheel, false);\n            self.canvas.addEventListener('contextmenu', self.contextmenuEvent, false);\n            (self.isChildGrid ? self.parentGrid : document).addEventListener('copy', self.copy);\n            self.controlInput.addEventListener('keypress', self.keypress, false);\n            self.controlInput.addEventListener('keyup', self.keyup, false);\n            self.controlInput.addEventListener('keydown', self.keydown, false);\n        };\n        self.setDom = function () {\n            self.appendTo(self.args.parentNode);\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        // all methods here are exposed by intf\n        // to users\n        /**\n         * Converts a integer into a letter A - ZZZZZ...\n         * @memberof canvasDataGrid\n         * @name integerToAlpha\n         * @method\n         * @param {column} n The number to convert.\n         */\n        self.integerToAlpha = function (n) {\n            var ordA = 'a'.charCodeAt(0),\n                ordZ = 'z'.charCodeAt(0),\n                len = ordZ - ordA + 1,\n                s = '';\n            while (n >= 0) {\n                s = String.fromCharCode(n % len + ordA) + s;\n                n = Math.floor(n / len) - 1;\n            }\n            return s;\n        };\n        /**\n         * Inserts a new column before the specified index into the schema.\n         * @see canvasDataGrid#schema\n         * @tutorial schema\n         * @memberof canvasDataGrid\n         * @name insertColumn\n         * @method\n         * @param {column} c The column to insert into the schema.\n         * @param {number} index The index of the column to insert before.\n         */\n        self.insertColumn = function (c, index) {\n            var s = self.getSchema();\n            if (s.length < index) {\n                throw new Error('Index is beyond the length of the schema.');\n            }\n            self.validateColumn(c, s);\n            s.splice(index, 0, c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a column from the schema at the specified index.\n         * @memberof canvasDataGrid\n         * @name deleteColumn\n         * @tutorial schema\n         * @method\n         * @param {number} index The index of the column to delete.\n         */\n        self.deleteColumn = function (index) {\n            var s = self.getSchema();\n            // remove data matching this column name from data\n            self.data.forEach(function (row) {\n                delete row[s[index].name];\n            });\n            s.splice(index, 1);\n            self.intf.schema = s;\n        };\n        /**\n         * Adds a new column into the schema.\n         * @see canvasDataGrid#schema\n         * @tutorial schema\n         * @memberof canvasDataGrid\n         * @name addColumn\n         * @method\n         * @param {column} c The column to add to the schema.\n         */\n        self.addColumn = function (c) {\n            var s = self.getSchema();\n            self.validateColumn(c, s);\n            s.push(c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a row from the dataset at the specified index.\n         * @memberof canvasDataGrid\n         * @name deleteRow\n         * @method\n         * @param {number} index The index of the row to delete.\n         */\n        self.deleteRow = function (index) {\n            self.originalData.splice(index, 1);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Inserts a new row into the dataset before the specified index.\n         * @memberof canvasDataGrid\n         * @name insertRow\n         * @method\n         * @param {object} d data.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertRow = function (d, index) {\n            if (self.originalData.length < index) {\n                throw new Error('Index is beyond the length of the dataset.');\n            }\n            self.originalData.splice(index, 0, d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[index], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Adds a new row into the dataset.\n         * @memberof canvasDataGrid\n         * @name addRow\n         * @method\n         * @param {object} d data.\n         */\n        self.addRow = function (d) {\n            self.originalData.push(d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[self.originalData.length - 1], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Sets the height of a given row by index number.\n         * @memberof canvasDataGrid\n         * @name setRowHeight\n         * @method\n         * @param {number} rowIndex The index of the row to set.\n         * @param {number} height Height to set the row to.\n         */\n        self.setRowHeight = function (rowIndex, height) {\n            self.sizes.rows[self.data[rowIndex][self.uniqueId]] = height;\n            self.draw(true);\n        };\n        /**\n         * Sets the width of a given column by index number.\n         * @memberof canvasDataGrid\n         * @name setColumnWidth\n         * @method\n         * @param {number} colIndex The index of the column to set.\n         * @param {number} width Width to set the column to.\n         */\n        self.setColumnWidth = function (colIndex, width) {\n            var s = self.getSchema();\n            self.sizes.columns[s[colIndex][self.uniqueId]] = width;\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the width of the columns due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDataGrid\n         * @name resetColumnWidths\n         * @tutorial schema\n         * @method\n         */\n        self.resetColumnWidths = function () {\n            self.sizes.columns = {};\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the height of the rows due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDataGrid\n         * @name resetRowHeights\n         * @tutorial schema\n         * @method\n         */\n        self.resetRowHeights = function () {\n            self.sizes.rows = {};\n            self.draw(true);\n        };\n        /**\n         * Sets the value of the filter.\n         * @memberof canvasDataGrid\n         * @name setFilter\n         * @method\n         * @param {string} column Name of the column to filter.\n         * @param {string} value The value to filter for.\n         */\n        self.setFilter = function (column, value) {\n            function applyFilter() {\n                self.refreshFromOrigialData();\n                Object.keys(self.columnFilters).forEach(function (filter) {\n                    var header = self.getHeaderByName(column);\n                    if (!header) {\n                        return;\n                    }\n                    self.currentFilter = header.filter || self.filter(column.type || 'string');\n                    self.data = self.data.filter(function (row) {\n                        return self.currentFilter(row[filter], self.columnFilters[filter]);\n                    });\n                });\n                self.resize();\n                self.draw(true);\n            }\n            if (column === undefined && value === undefined) {\n                self.columnFilters = {};\n                return applyFilter();\n            }\n            if (column && (value === '' || value === undefined)) {\n                delete self.columnFilters[column];\n            } else {\n                self.columnFilters[column] = value;\n            }\n            applyFilter();\n        };\n        /**\n         * Returns the number of pixels to scroll down to line up with row rowIndex.\n         * @memberof canvasDataGrid\n         * @name findRowScrollTop\n         * @method\n         * @param {number} rowIndex The row index of the row to scroll find.\n         */\n        self.findRowScrollTop = function (rowIndex) {\n            var top = 0, x = 0, l = self.data.length,\n                cellBorder = self.style.cellBorderWidth * 2;\n            if (!self.attributes.showNewRow) {\n                l -= 1;\n            }\n            if (rowIndex > l) {\n                throw new Error('Impossible row index');\n            }\n            while (x < rowIndex) {\n                top += (self.sizes.rows[self.data[x][self.uniqueId]] || self.style.cellHeight) + cellBorder;\n                x += 1;\n            }\n            //TODO: This is not super accurate, causes pageUp/Dn to not move around right\n            return top - (self.sizes.rows[self.data[rowIndex][self.uniqueId]] || self.style.cellHeight);\n        };\n        /**\n         * Returns the number of pixels to scroll to the left to line up with column columnIndex.\n         * @memberof canvasDataGrid\n         * @name findColumnScrollLeft\n         * @method\n         * @param {number} columnIndex The column index of the column to find.\n         */\n        self.findColumnScrollLeft = function (columnIndex) {\n            var left = 0, y = 0, s = self.getSchema(), l = s.length - 1;\n            if (columnIndex > l) {\n                throw new Error('Impossible column index');\n            }\n            while (y < columnIndex) {\n                left += self.sizes.columns[s[y][self.uniqueId]] || s[y].width;\n                y += 1;\n            }\n            return left;\n        };\n        /**\n         * Scrolls the cell at cell x, row y.\n         * @memberof canvasDataGrid\n         * @name gotoCell\n         * @method\n         * @param {number} x The column index of the cell to scroll to.\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoCell = function (x, y) {\n            if (x !== undefined) {\n                self.scrollBox.scrollLeft = self.findColumnScrollLeft(x);\n            }\n            if (y !== undefined) {\n                self.scrollBox.scrollTop = self.findRowScrollTop(y);\n            }\n        };\n        /**\n         * Scrolls the row y.\n         * @memberof canvasDataGrid\n         * @name gotoRow\n         * @method\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoRow = function (y) {\n            self.gotoCell(0, y);\n        };\n        /**\n         * Scrolls the cell at cell x, row y into view if it is not already.\n         * @memberof canvasDataGrid\n         * @name scrollIntoView\n         * @method\n         * @param {number} x The column index of the cell to scroll into view.\n         * @param {number} y The row index of the cell to scroll into view.\n         */\n        self.scrollIntoView = function (x, y) {\n            if (self.visibleCells.filter(function (cell) {\n                    return (cell.rowIndex === y || y === undefined)\n                        && (cell.columnIndex === x || x === undefined)\n                        && cell.x > 0\n                        && cell.y > 0\n                        && cell.x + cell.width < self.width\n                        && cell.y + cell.height < self.height;\n                }).length === 0) {\n                self.gotoCell(x, y);\n            }\n        };\n        /**\n         * Sets the active cell. Requires redrawing.\n         * @memberof canvasDataGrid\n         * @name setActiveCell\n         * @method\n         * @param {number} x The column index of the cell to set active.\n         * @param {number} y The row index of the cell to set active.\n         */\n        self.setActiveCell = function (x, y) {\n            self.activeCell = {\n                rowIndex: y,\n                columnIndex: x\n            };\n        };\n        /**\n         * Selects every visible cell.\n         * @memberof canvasDataGrid\n         * @name selectAll\n         * @method\n         */\n        self.selectAll = function () {\n            self.selectArea({\n                top: 0,\n                left: 0,\n                right: self.getVisibleSchema().length - 1,\n                bottom: self.data.length - 1\n            });\n        };\n        /**\n         * Returns true if the selected columnIndex is selected on every row.\n         * @memberof canvasDataGrid\n         * @name isColumnSelected\n         * @method\n         * @param {number} columnIndex The column index to check.\n         */\n        self.isColumnSelected = function (columnIndex) {\n            var colIsSelected = true;\n            self.data.forEach(function (row, rowIndex) {\n                if (!self.selections[rowIndex] || self.selections[rowIndex].indexOf(self.orders.columns[columnIndex]) === -1) {\n                    colIsSelected = false;\n                }\n            });\n            return colIsSelected;\n        };\n        /**\n         * Selects a column.\n         * @memberof canvasDataGrid\n         * @name selectColumn\n         * @method\n         * @param {number} columnIndex The column index to select.\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the column.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the column.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectColumn = function (columnIndex, ctrl, shift, supressEvent) {\n            var s, e, x;\n            function addCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) === -1) {\n                        self.selections[rowIndex].push(i);\n                    }\n                });\n            }\n            function removeCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) !== -1) {\n                        self.selections[rowIndex].splice(self.selections[rowIndex].indexOf(i), 1);\n                    }\n                });\n            }\n            if (shift) {\n                if (!self.activeCell) { return; }\n                s = Math.min(self.activeCell.columnIndex, columnIndex);\n                e = Math.max(self.activeCell.columnIndex, columnIndex);\n                for (x = s; e > x; x += 1) {\n                    addCol(x);\n                }\n            }\n            if (!ctrl && !shift) {\n                self.selections = [];\n                self.activeCell.columnIndex = columnIndex;\n                self.activeCell.rowIndex = self.scrollIndexTop;\n            }\n            if (ctrl && self.isColumnSelected(columnIndex)) {\n                removeCol(columnIndex);\n            } else {\n                addCol(columnIndex);\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.getSelectionBounds()\n            });\n        };\n        /**\n         * Selects a row.\n         * @memberof canvasDataGrid\n         * @name selectRow\n         * @method\n         * @param {number} rowIndex The row index to select.\n         * @param {boolean} ctrl When true, behaves as if you were holding control/command when you clicked the row.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the row.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectRow = function (rowIndex, ctrl, shift, supressEvent) {\n            var x, st, en, s = self.getSchema();\n            function addRow(ri) {\n                self.selections[ri] = [];\n                self.selections[ri].push(-1);\n                s.forEach(function (col) {\n                    self.selections[ri].push(col.index);\n                });\n            }\n            if (self.dragAddToSelection === false || self.dragObject === undefined) {\n                if (self.selections[rowIndex] && self.selections[rowIndex].length - 1 === s.length) {\n                    if (ctrl) {\n                        self.selections[rowIndex] = [];\n                        return;\n                    }\n                }\n            }\n            if (self.dragAddToSelection === true || self.dragObject === undefined) {\n                if (shift && self.dragObject === undefined) {\n                    if (!self.activeCell) { return; }\n                    st = Math.min(self.activeCell.rowIndex, rowIndex);\n                    en = Math.max(self.activeCell.rowIndex, rowIndex);\n                    for (x = st; en >= x; x += 1) {\n                        addRow(x);\n                    }\n                } else {\n                    addRow(rowIndex);\n                }\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Collapse a tree grid by row index.\n         * @memberof canvasDataGrid\n         * @name collapseTree\n         * @method\n         * @param {number} index The index of the row to collapse.\n         */\n        self.collapseTree = function (rowIndex) {\n            var rowId = self.data[rowIndex][self.uniqueId];\n            self.dispatchEvent('collapsetree', {\n                childGrid: self.childGrids[rowId],\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId].blur();\n            self.openChildren[rowId].dispose();\n            delete self.openChildren[rowId];\n            delete self.sizes.trees[rowId];\n            delete self.childGrids[rowId];\n            self.dispatchEvent('resizerow', {\n                cellHeight: self.style.cellHeight\n            });\n            self.resize(true);\n            self.draw(true);\n        };\n        /**\n         * Expands a tree grid by row index.\n         * @memberof canvasDataGrid\n         * @name expandTree\n         * @method\n         * @param {number} index The index of the row to expand.\n         */\n        self.expandTree = function (rowIndex) {\n            var rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth,\n                rowId = self.data[rowIndex][self.uniqueId],\n                h = self.sizes.trees[rowId] || self.style.treeGridHeight,\n                treeGrid;\n            if (!self.childGrids[rowId]) {\n                treeGrid = self.createGrid({\n                    debug: self.attributes.debug,\n                    name: self.attributes.saveAppearance\n                        ? self.attributes.name + 'tree' + rowId : undefined,\n                    parentNode: {\n                        parentGrid: self.intf,\n                        nodeType: 'canvas-datagrid-tree',\n                        offsetHeight: h,\n                        offsetWidth: self.width - columnHeaderCellWidth,\n                        header: { width: self.width - columnHeaderCellWidth },\n                        offsetLeft: columnHeaderCellWidth,\n                        offsetTop: rowHeaderCellHeight,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: 'tree',\n                        data: self.data[rowIndex]\n                    }\n                });\n                self.childGrids[rowId] = treeGrid;\n            }\n            treeGrid = self.childGrids[rowId];\n            treeGrid.visible = true;\n            self.dispatchEvent('expandtree', {\n                treeGrid: treeGrid,\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId] = treeGrid;\n            self.sizes.trees[rowId] = h;\n            self.dispatchEvent('resizerow', {height: self.style.cellHeight});\n            self.resize(true);\n        };\n        /**\n         * Toggles tree grid open and close by row index.\n         * @memberof canvasDataGrid\n         * @name toggleTree\n         * @method\n         * @param {number} index The index of the row to toggle.\n         */\n        self.toggleTree = function (rowIndex) {\n            var i = self.openChildren[self.data[rowIndex][self.uniqueId]];\n            if (i) {\n                return self.collapseTree(rowIndex);\n            }\n            self.expandTree(rowIndex);\n        };\n        /**\n         * Returns a header from the schema by name.\n         * @memberof canvasDataGrid\n         * @name getHeaderByName\n         * @tutorial schema\n         * @method\n         * @returns {header} header with the selected name, or undefined.\n         * @param {string} name The name of the column to resize.\n         */\n        self.getHeaderByName = function (name) {\n            var x, i = self.getSchema();\n            for (x = 0; x < i.length; x += 1) {\n                if (i[x].name === name) {\n                    return i[x];\n                }\n            }\n        };\n        /**\n         * Resizes a column to fit the longest value in the column. Call without a value to resize all columns.\n         * Warning, can be slow on very large record sets (1m records ~3-5 seconds on an i7).\n         * @memberof canvasDataGrid\n         * @name fitColumnToValues\n         * @method\n         * @param {string} name The name of the column to resize.\n         */\n        self.fitColumnToValues = function (name, internal) {\n            self.sizes.columns[name === 'cornerCell' ? name : self.getHeaderByName(name)[self.uniqueId]]\n                = self.findColumnMaxTextLength(name);\n            if (!internal) {\n                self.resize();\n                self.draw(true);\n            }\n        };\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDataGrid\n         * @name isCellVisible\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {cell} cell The cell to check for.  Alternatively you can pass an object { x: <x-index>, y: <y-index> }.\n         */\n        self.isCellVisible = function (cell) {\n            var x, l = self.visibleCells.length;\n            for (x = 0; x < l; x += 1) {\n                if (cell.x === self.visibleCells[x].x && cell.y === self.visibleCells[x].y) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n         * Sets the order of the data.\n         * @memberof canvasDataGrid\n         * @name order\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} columnName Number of pixels from the left.\n         * @param {string} direction `asc` for ascending or `desc` for descending.\n         * @param {function} [sortFunction] When defined, override the default sorting method defined in the column's schema and use this one.\n         * @param {bool} [dontSetStorageData] Don't store this setting for future use.\n         */\n        self.order = function (columnName, direction, sortFunction, dontSetStorageData) {\n            var f,\n                c = self.getSchema().filter(function (col) {\n                    return col.name === columnName;\n                });\n            self.orderBy = columnName;\n            if (c.length === 0) {\n                throw new Error('Cannot sort.  No such column name');\n            }\n            f = sortFunction || self.sorters[c[0].type];\n            if (!f && c[0].type !== undefined) {\n                console.warn('Cannot sort type \"%s\" falling back to string sort.', c[0].type);\n            }\n            self.data = self.data.sort(typeof f === 'function' ? f(columnName, direction) : self.sorters.string);\n            self.dispatchEvent('ordercolumn', {name: columnName, direction: direction});\n            self.draw(true);\n            if (dontSetStorageData) { return; }\n            self.setStorageData();\n        };\n        self.isInGrid = function (e) {\n            if (e.x < 0\n                    || e.x > self.width\n                    || e.y < 0\n                    || e.y > self.height) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Gets the cell at columnIndex and rowIndex.\n         * @memberof canvasDataGrid\n         * @name getVisibleCellByIndex\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Column index.\n         * @param {number} y Row index.\n         */\n        self.getVisibleCellByIndex = function (x, y) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === x && c.rowIndex === y;\n            })[0];\n        };\n        /**\n         * Gets the cell at grid pixel coordinate x and y.\n         * @memberof canvasDataGrid\n         * @name getCellAt\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Number of pixels from the left.\n         * @param {number} y Number of pixels from the top.\n         */\n        self.getCellAt = function (x, y, useTouchScrollZones) {\n            var tsz = useTouchScrollZones ? self.attributes.touchScrollZone : 0, i, l = self.visibleCells.length, cell;\n            if (!self.visibleCells || !self.visibleCells.length) { return; }\n            self.hasFocus = true;\n            if (!(y < self.height\n                && y > 0\n                && x < self.width\n                && x > 0)) {\n                self.hasFocus = false;\n                return {\n                    dragContext: 'inherit',\n                    context: 'inherit'\n                };\n            }\n            for (i = 0; i < l; i += 1) {\n                cell = self.visibleCells[i];\n                if (useTouchScrollZones && /(vertical|horizontal)-scroll-/.test(cell.style)) {\n                    cell.x -= tsz;\n                    cell.y -= tsz;\n                    cell.height += tsz;\n                    cell.width += tsz;\n                }\n                if (cell.x - self.style.cellBorderWidth < x\n                        && cell.x + cell.width + self.style.cellBorderWidth > x\n                        && cell.y - self.style.cellBorderWidth < y\n                        && cell.y + cell.height + self.style.cellBorderWidth > y) {\n                    if (/vertical-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'vertical-scroll-box';\n                        cell.context = 'vertical-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isVerticalScrollBar = true;\n                        if (y > self.scrollBox.box.v.y + self.scrollBox.scrollBoxHeight) {\n                            cell.dragContext = 'vertical-scroll-bottom';\n                            cell.context = 'vertical-scroll-bottom';\n                        } else if (y < self.scrollBox.box.v.y) {\n                            cell.dragContext = 'vertical-scroll-top';\n                            cell.context = 'vertical-scroll-top';\n                        }\n                        self.canvas.style.cursor = 'default';\n                        return cell;\n                    }\n                    if (/horizontal-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'horizontal-scroll-box';\n                        cell.context = 'horizontal-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isHorizontalScrollBar = true;\n                        if (x > self.scrollBox.box.h.x + self.scrollBox.scrollBoxWidth) {\n                            cell.dragContext = 'horizontal-scroll-right';\n                            cell.context = 'horizontal-scroll-right';\n                        } else if (x < self.scrollBox.box.h.x) {\n                            cell.dragContext = 'horizontal-scroll-left';\n                            cell.context = 'horizontal-scroll-left';\n                        }\n                        self.canvas.style.cursor = 'default';\n                        return cell;\n                    }\n                    if (cell.x + cell.width - (self.attributes.borderResizeZone * 0.4) < x\n                            && cell.x + cell.width + (self.attributes.borderResizeZone * 0.6) > x\n                            && self.attributes.allowColumnResize\n                            && ((self.attributes.allowColumnResizeFromCell && cell.style === 'cell')\n                                || cell.style !== 'cell')\n                            && ((self.attributes.allowRowHeaderResize\n                                && ['rowHeaderCell', 'cornerCell'].indexOf(cell.style) !== -1)\n                                || ['rowHeaderCell', 'cornerCell'].indexOf(cell.style) === -1)) {\n                        cell.context = 'ew-resize';\n                        cell.dragContext = 'ew-resize';\n                        return cell;\n                    }\n                    if (cell.y + cell.height - (self.attributes.borderResizeZone * 0.4) < y\n                            && cell.y + cell.height + (self.attributes.borderResizeZone * 0.6) > y\n                            && self.attributes.allowRowResize\n                            && ((self.attributes.allowRowResizeFromCell && cell.style === 'cell')\n                                || cell.style !== 'cell')\n                            && cell.style !== 'columnHeaderCell') {\n                        cell.context = 'ns-resize';\n                        cell.dragContext = 'ns-resize';\n                        return cell;\n                    }\n                    if (cell.style === 'columnHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'column-reorder';\n                        return cell;\n                    }\n                    if (cell.style === 'rowHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'row-reorder';\n                        return cell;\n                    }\n                    if (cell.isGrid) {\n                        self.hasFocus = false;\n                        cell.dragContext = 'cell-grid';\n                        cell.context = 'cell-grid';\n                        return cell;\n                    }\n                    if (cell.style === 'tree-grid') {\n                        self.hasFocus = false;\n                        cell.dragContext = 'tree';\n                        cell.context = 'tree';\n                        return cell;\n                    }\n                    cell.dragContext = 'cell';\n                    cell.context = 'cell';\n                    return cell;\n                }\n            }\n            self.hasFocus = true;\n            self.canvas.style.cursor = 'default';\n            return {\n                dragContext: 'background',\n                context: 'background',\n                style: 'background',\n                isBackground: true\n            };\n        };\n        /**\n         * Gets the bounds of current selection. \n         * @returns {rect} selection.\n         * @memberof canvasDataGrid\n         * @name getSelectionBounds\n         * @method\n         */\n        self.getSelectionBounds = function () {\n            var low = {x: Infinity, y: Infinity},\n                high = {x: -Infinity, y: -Infinity};\n            self.data.forEach(function (row, rowIndex) {\n                var maxCol, minCol;\n                if (self.selections[rowIndex] && self.selections[rowIndex].length) {\n                    low.y = rowIndex < low.y ? rowIndex : low.y;\n                    high.y = rowIndex > high.y ? rowIndex : high.y;\n                    maxCol = Math.max.apply(null, self.selections[rowIndex]);\n                    minCol = Math.min.apply(null, self.selections[rowIndex]);\n                    low.x = minCol < low.x ? minCol : low.x;\n                    high.x = maxCol > high.x ? maxCol : high.x;\n                }\n            });\n            return {\n                top: low.y,\n                left: low.x,\n                bottom: high.y,\n                right: high.x\n            };\n        };\n        /**\n         * Returns an auto generated schema based on data structure.\n         * @memberof canvasDataGrid\n         * @name getSchemaFromData\n         * @method\n         * @tutorial schema\n         * @returns {schema} schema A schema based on the first item in the data array.\n         */\n        self.getSchemaFromData = function () {\n            return Object.keys(self.data[0] || {' ': ''}).map(function mapEachSchemaColumn(key, index) {\n                var type = self.getBestGuessDataType(key),\n                    i = {\n                        name: key,\n                        title: isNaN(parseInt(key, 10)) ? key : self.integerToAlpha(key).toUpperCase(),\n                        width: self.style.columnWidth,\n                        index: index,\n                        type: type,\n                        filter: self.filter(type)\n                    };\n                if (key === self.uniqueId) {\n                    i.hidden = true;\n                }\n                i[self.uniqueId] = self.getSchemaNameHash(key);\n                return i;\n            });\n        };\n        /**\n         * Clears the change log grid.changes that keeps track of changes to the data set.\n         * This does not undo changes or alter data it is simply a convince array to keep\n         * track of changes made to the data since last this method was called.\n         * @memberof canvasDataGrid\n         * @name clearChangeLog\n         * @method\n         */\n        self.clearChangeLog = function () {\n            self.changes = [];\n        };\n        /**\n         * Selects an area of the grid.\n         * @memberof canvasDataGrid\n         * @name selectArea\n         * @method\n         * @param {rect} bounds A rect object representing the selected values.\n         */\n        self.selectArea = function (bounds, ctrl) {\n            self.selectionBounds = bounds || self.selectionBounds;\n            var x, y, s = self.getSchema();\n            if (!ctrl) {\n                self.selections = [];\n            }\n            if (self.selectionBounds.top < -1\n                    || self.selectionBounds.bottom > self.data.length\n                    || self.selectionBounds.left < -1\n                    || self.selectionBounds.right > s.length) {\n                throw new Error('Impossible selection area');\n            }\n            for (x = self.selectionBounds.top; x <= self.selectionBounds.bottom; x += 1) {\n                self.selections[x] = [];\n                for (y = self.selectionBounds.left; y <= self.selectionBounds.right; y += 1) {\n                    if (self.selections[x].indexOf(y) === -1) {\n                        self.selections[x].push(y);\n                    }\n                }\n            }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Returns the maximum text width for a given column by column name.\n         * @memberof canvasDataGrid\n         * @name findColumnMaxTextLength\n         * @method\n         * @returns {number} The number of pixels wide the maximum width value in the selected column.\n         * @param {string} name The name of the column to calculate the value's width of.\n         */\n        self.findColumnMaxTextLength = function (name) {\n            var m = -Infinity;\n            if (name === 'cornerCell') {\n                self.ctx.font = self.style.rowHeaderCellFont;\n                return self.ctx.measureText((self.data.length + (self.attributes.showNewRow ? 1 : 0)).toString()).width\n                    + self.style.autosizePadding + self.style.autosizeHeaderCellPadding\n                    + self.style.rowHeaderCellPaddingRight\n                    + self.style.rowHeaderCellPaddingLeft\n                    + (self.attributes.tree ? self.style.treeArrowWidth\n                        + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight : 0);\n            }\n            self.getSchema().forEach(function (col) {\n                if (col.name !== name) { return; }\n                self.ctx.font = self.style.columnHeaderCellFont;\n                var t = self.ctx.measureText(col.title || col.name).width\n                    + self.style.headerCellPaddingRight\n                    + self.style.headerCellPaddingLeft;\n                m = t > m ? t : m;\n            });\n            self.data.forEach(function (row) {\n                self.ctx.font = self.style.cellFont;\n                var t = self.ctx.measureText(row[name]).width\n                    + self.style.cellPaddingRight\n                    + self.style.cellPaddingLeft + self.style.cellAutoResizePadding;\n                m = t > m ? t : m;\n            });\n            return m;\n        };\n        /**\n         * Gets the total width of all header columns.\n         * @memberof canvasDataGrid\n         * @name getHeaderWidth\n         * @method\n         */\n        self.getHeaderWidth = function () {\n            return self.getVisibleSchema().reduce(function (total, header) {\n                return total + header.width;\n            }, 0);\n        };\n        self.formatters.string = function cellFormatterString(e) {\n            return e.cell.value !== undefined ? e.cell.value : '';\n        };\n        self.formatters.rowHeaderCell = self.formatters.string;\n        self.formatters.headerCell = self.formatters.string;\n        self.formatters.number = self.formatters.string;\n        self.formatters.int = self.formatters.string;\n        self.formatters.html = self.formatters.string;\n        self.sorters.string = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (a[columnName] === undefined || a[columnName] === null) {\n                    return 1;\n                }\n                if (b[columnName] === undefined || b[columnName] === null) {\n                    return 0;\n                }\n                if (asc) {\n                    if (!a[columnName].localeCompare) { return 1; }\n                    return a[columnName].localeCompare(b[columnName]);\n                }\n                if (!b[columnName].localeCompare) { return 1; }\n                return b[columnName].localeCompare(a[columnName]);\n            };\n        };\n        self.sorters.number = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return a[columnName] - b[columnName];\n                }\n                return b[columnName] - a[columnName];\n            };\n        };\n        self.sorters.date = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return new Date(a[columnName]).getTime()\n                        - new Date(b[columnName]).getTime();\n                }\n                return new Date(b[columnName]).getTime()\n                        - new Date(a[columnName]).getTime();\n            };\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// canvas-datagrid.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 58b6012e9ee00f7cba5c","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([\n    './draw',\n    './events',\n    './intf',\n    './contextMenu',\n    './defaults',\n    './dom',\n    './publicMethods'\n], function context() {\n    'use strict';\n    var modules = Array.prototype.slice.call(arguments);\n    function grid(args) {\n        args = args || {};\n        var self = {};\n        self.args = args;\n        self.createGrid = grid;\n        modules.forEach(function (module) {\n            module(self);\n        });\n        self.init();\n        return self.intf;\n    }\n    if (window && !window.canvasDatagrid && !window.require) {\n        window.canvasDatagrid = grid;\n    }\n    module.exports = grid;\n    return grid;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/main.js\n// module id = 0\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals XMLSerializer: false, define: true, Blob: false, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var perfCounters = [],\n            drawCount = 0,\n            perfWindowSize = 20;\n        self.htmlImageCache = {};\n        function drawOnAllImagesLoaded() {\n            var loaded = true;\n            Object.keys(self.htmlImageCache).forEach(function (html) {\n                if (!self.htmlImageCache[html].complete) {\n                    loaded = false;\n                }\n            });\n            if (loaded) {\n                self.draw();\n            }\n        }\n        function drawHtml(cell) {\n            var img,\n                v = cell.innerHTML || cell.formattedValue,\n                x = cell.x + self.canvasOffsetLeft,\n                y = cell.y + self.canvasOffsetTop;\n            if (self.htmlImageCache[v]) {\n                img = self.htmlImageCache[v];\n                if (img.height !== cell.height || img.width !== cell.width) {\n                    // height and width of the cell has changed, invalidate cache\n                    self.htmlImageCache[v] = undefined;\n                } else {\n                    if (!img.complete) {\n                        return;\n                    }\n                    return self.ctx.drawImage(img, x, y);\n                }\n            }\n            img = new Image(cell.width, cell.height);\n            self.htmlImageCache[v] = img;\n            img.onload = function () {\n                self.ctx.drawImage(img, x, y);\n                drawOnAllImagesLoaded();\n            };\n            img.src = 'data:image/svg+xml;base64,' + btoa(\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + cell.width + '\" height=\"' + cell.height + '\">\\n' +\n                    '<foreignObject class=\"node\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\\n' +\n                    '<body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;padding:0;\">\\n' +\n                    v + '\\n' +\n                    '</body>' +\n                    '</foreignObject>\\n' +\n                    '</svg>\\n'\n            );\n        }\n        function drawOrderByArrow(x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.columnHeaderOrderByArrowColor;\n            self.ctx.strokeStyle = self.style.columnHeaderOrderByArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + self.style.columnHeaderOrderByArrowMarginLeft;\n            y = y + self.style.columnHeaderOrderByArrowMarginTop;\n            if (self.orderDirection === 'asc') {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + self.style.columnHeaderOrderByArrowWidth, y);\n                self.ctx.lineTo(x + (self.style.columnHeaderOrderByArrowWidth * 0.5), y + self.style.columnHeaderOrderByArrowHeight);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y + self.style.columnHeaderOrderByArrowHeight);\n                self.ctx.lineTo(x + self.style.columnHeaderOrderByArrowWidth, y + self.style.columnHeaderOrderByArrowHeight);\n                self.ctx.lineTo(x + (self.style.columnHeaderOrderByArrowWidth * 0.5), y);\n                self.ctx.lineTo(x, y + self.style.columnHeaderOrderByArrowHeight);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return self.style.columnHeaderOrderByArrowMarginLeft\n                + self.style.columnHeaderOrderByArrowWidth\n                + self.style.columnHeaderOrderByArrowMarginRight;\n        }\n        function drawTreeArrow(cell, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.treeArrowColor;\n            self.ctx.strokeStyle = self.style.treeArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + self.style.treeArrowMarginLeft;\n            y = y + self.style.treeArrowMarginTop;\n            if (self.openChildren[cell.data[self.uniqueId]]) {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + self.style.treeArrowWidth, y);\n                self.ctx.lineTo(x + (self.style.treeArrowWidth * 0.5), y + self.style.treeArrowHeight);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y);\n                self.ctx.lineTo(x + self.style.treeArrowHeight, y + (self.style.treeArrowWidth * 0.5));\n                self.ctx.lineTo(x, y + self.style.treeArrowWidth);\n                self.ctx.lineTo(x, y);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return self.style.treeArrowMarginLeft\n                + self.style.treeArrowWidth\n                + self.style.treeArrowMarginRight;\n        }\n        function radiusRect(x, y, w, h, radius) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            var r = x + w, b = y + h;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x + radius, y);\n            self.ctx.lineTo(r - radius, y);\n            self.ctx.quadraticCurveTo(r, y, r, y + radius);\n            self.ctx.lineTo(r, y + h - radius);\n            self.ctx.quadraticCurveTo(r, b, r - radius, b);\n            self.ctx.lineTo(x + radius, b);\n            self.ctx.quadraticCurveTo(x, b, x, b - radius);\n            self.ctx.lineTo(x, y + radius);\n            self.ctx.quadraticCurveTo(x, y, x + radius, y);\n        }\n        function fillRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillRect(x, y, w, h);\n        }\n        function strokeRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.strokeRect(x, y, w, h);\n        }\n        function fillText(text, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillText(text, x, y);\n        }\n        function addBorderLine(c, pos) {\n            self.ctx.beginPath();\n            var p = {\n                t: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                },\n                r: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                b: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                l: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                },\n            };\n            p[pos]();\n            self.ctx.stroke();\n        }\n        function addEllipsis(text, width) {\n            var c, w = 0;\n            if (self.ellipsisCache[text] && self.ellipsisCache[text][width]) {\n                return self.ellipsisCache[text][width];\n            }\n            //TODO Add ellipsis back when there is a fast way to do it\n            w = self.ctx.measureText(text).width;\n            self.ellipsisCache[text] = self.ellipsisCache[text] || {};\n            c = {value: text, width: w};\n            self.ellipsisCache[text][width] = c;\n            return c;\n        }\n        function drawText(cell) {\n            var paddingLeft = self.style[cell.style + 'PaddingLeft'],\n                paddingTop = self.style[cell.style + 'PaddingTop'],\n                paddingRight = self.style[cell.style + 'PaddingRight'],\n                paddingBottom = self.style[cell.style + 'PaddingBottom'],\n                vPos = paddingTop + cell.height - (cell.height * 0.5),\n                hPos = paddingLeft + cell.treeArrowWidth + cell.orderByArrowWidth;\n            cell.text = addEllipsis(cell.formattedValue, cell.width - paddingRight - paddingLeft);\n            cell.text.height = cell.fontHeight;\n            if (cell.horizontalAlignment === 'right') {\n                hPos = cell.width - cell.text.width - paddingRight;\n            } else if (cell.horizontalAlignment === 'center') {\n                hPos = (cell.width / 2) - (cell.text.width / 2);\n            }\n            if (cell.verticalAlignment === 'top') {\n                vPos = paddingTop + cell.text.height;\n            } else if (cell.verticalAlignment === 'bottom') {\n                vPos = cell.height - paddingBottom - cell.text.height;\n            }\n            cell.text.x = cell.x + hPos;\n            cell.text.y = cell.y + vPos;\n            fillText(cell.text.value, cell.text.x, cell.text.y);\n        }\n        /**\n         * Redraws the grid. No matter what the change, this is the only method required to refresh everything.\n         * @memberof canvasDataGrid\n         * @name draw\n         * @method\n         */\n        self.draw = function (internal) {\n            if (self.dispatchEvent('beforedraw', {})) { return; }\n            if (!self.isChildGrid && (!self.height || !self.width)) {\n                return;\n            }\n            if (self.isChildGrid && internal) {\n                requestAnimationFrame(self.parentGrid.draw);\n                return;\n            }\n            if (self.intf.visible === false) {\n                return;\n            }\n            // initial values\n            var checkScrollHeight, rowHeaderCell, p, cx, cy, treeGrid, rowOpen,\n                rowHeight, cornerCell, y, x, c, h, w, s, r, rd, aCell,\n                selectionBorders = [],\n                rowHeaders = [],\n                l = self.data.length,\n                u = self.currentCell || {},\n                rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth(),\n                cellHeight = self.style.cellHeight;\n            drawCount += 1;\n            p = performance.now();\n            // if data length has changed, there is no way to know\n            if (self.data.length > self.orders.rows.length) {\n                self.createRowOrders();\n            }\n            function drawScrollBars() {\n                var v = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-bar'\n                    },\n                    n = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-bar'\n                    },\n                    vb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-box'\n                    },\n                    nb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-box'\n                    },\n                    co = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        isCorner: true,\n                        isScrollBoxCorner: true,\n                        style: 'scroll-box-corner'\n                    },\n                    m = (self.style.scrollBarBoxMargin * 2),\n                    d = self.style.scrollBarBoxMargin * 0.5;\n                self.ctx.strokeStyle = self.style.scrollBarBorderColor;\n                self.ctx.lineWidth = self.style.scrollBarBorderWidth;\n                // vertical\n                v.x += w - self.style.scrollBarWidth - self.style.scrollBarBorderWidth - d;\n                v.y += rowHeaderCellHeight;\n                v.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                v.height = h - rowHeaderCellHeight - self.style.scrollBarWidth - d - m;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(v.x, v.y, v.width, v.height + m);\n                strokeRect(v.x, v.y, v.width, v.height + m);\n                // vertical box\n                vb.x = v.x + self.style.scrollBarBoxMargin;\n                vb.y = rowHeaderCellHeight + self.style.scrollBarBoxMargin\n                    + ((v.height - self.scrollBox.scrollBoxHeight)\n                        * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight));\n                vb.width = self.style.scrollBarBoxWidth;\n                vb.height = self.scrollBox.scrollBoxHeight;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/vertical/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (vb.height < v.height) {\n                    radiusRect(vb.x, vb.y, vb.width, vb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                // horizontal\n                n.x += columnHeaderCellWidth;\n                n.y += h - self.style.scrollBarWidth - d;\n                n.width = w - self.style.scrollBarWidth - columnHeaderCellWidth - d - m;\n                n.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(n.x, n.y, n.width + m, n.height);\n                strokeRect(n.x, n.y, n.width + m, n.height);\n                // horizontal box\n                nb.y = n.y + self.style.scrollBarBoxMargin;\n                nb.x = columnHeaderCellWidth + self.style.scrollBarBoxMargin\n                    + ((n.width - self.scrollBox.scrollBoxWidth)\n                        * (self.scrollBox.scrollLeft / self.scrollBox.scrollWidth));\n                nb.width = self.scrollBox.scrollBoxWidth;\n                nb.height = self.style.scrollBarBoxWidth;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/horizontal/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (nb.width < n.width) {\n                    radiusRect(nb.x, nb.y, nb.width, nb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                //corner\n                self.ctx.strokeStyle = self.style.scrollBarCornerBorderColor;\n                self.ctx.fillStyle = self.style.scrollBarCornerBackgroundColor;\n                co.x = n.x + n.width + m;\n                co.y = v.y + v.height + m;\n                co.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                co.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                radiusRect(co.x, co.y, co.width, co.height, 0);\n                self.ctx.stroke();\n                self.ctx.fill();\n                self.visibleCells.unshift(v);\n                self.visibleCells.unshift(vb);\n                self.visibleCells.unshift(n);\n                self.visibleCells.unshift(nb);\n                self.visibleCells.unshift(co);\n                self.scrollBox.bar = {\n                    v: v,\n                    h: n\n                };\n                self.scrollBox.box = {\n                    v: vb,\n                    h: nb\n                };\n            }\n            function drawCell(d, rowIndex, rowOrderIndex) {\n                return function drawEach(header, headerIndex, columnOrderIndex) {\n                    var cellStyle = header.style || 'cell',\n                        cellGridAttributes,\n                        cell,\n                        isHeader = /HeaderCell/.test(cellStyle),\n                        isCorner = /cornerCell/.test(cellStyle),\n                        isRowHeader = 'rowHeaderCell' === cellStyle,\n                        isColumnHeader = 'columnHeaderCell' === cellStyle,\n                        selected = self.selections[rowOrderIndex] && self.selections[rowOrderIndex].indexOf(columnOrderIndex) !== -1,\n                        hovered = self.hovers[d[self.uniqueId]] && self.hovers[d[self.uniqueId]].indexOf(columnOrderIndex) !== -1,\n                        active = self.activeCell.rowIndex === rowOrderIndex && self.activeCell.columnIndex === columnOrderIndex,\n                        isGrid = typeof d[header.name] === 'object' && d[header.name] !== null && d[header.name] !== undefined,\n                        activeHeader = (self.orders.rows[self.activeCell.rowIndex] === rowOrderIndex\n                                || self.orders.columns[self.activeCell.columnIndex] === columnOrderIndex)\n                            && (columnOrderIndex === -1 || rowOrderIndex === -1)\n                            ? (isRowHeader ? 'activeRowHeaderCell' : 'activeColumnHeaderCell') : false,\n                        val,\n                        f = self.formatters[header.type || 'string'],\n                        orderByArrowSize = 0,\n                        treeArrowSize = 0,\n                        cellWidth = self.sizes.columns[isRowHeader ? 'cornerCell' : header[self.uniqueId]] || header.width,\n                        ev = {\n                            value: d[header.name],\n                            row: d,\n                            header: header\n                        };\n                    if (cellStyle === 'headerCellCap') {\n                        cellWidth = w - x;\n                    }\n                    // if no data or schema are defined, a width is provided to the stub column\n                    if (cellWidth === undefined) {\n                        cellWidth = self.style.columnWidth;\n                    }\n                    if (x + cellWidth + self.style.cellBorderWidth < 0) {\n                        x += cellWidth + self.style.cellBorderWidth;\n                    }\n                    if (active) {\n                        cellStyle = 'activeCell';\n                    }\n                    if (self.visibleRows.indexOf(rowIndex) === -1 && !isHeader) {\n                        self.visibleRows.push(rowIndex);\n                    }\n                    val = self.dispatchEvent('formatcellvalue', ev);\n                    if (!self.dispatchEvent('beforerendercell', ev)) {\n                        cx = x;\n                        cy = y;\n                        if (cellStyle === 'cornerCell') {\n                            cx = 0;\n                            cy = 0;\n                        } else if (isRowHeader) {\n                            cx = 0;\n                        } else if (isHeader) {\n                            cy = 0;\n                        }\n                        cell = {\n                            type: isGrid ? 'canvas-datagrid-cell' : header.type,\n                            style: cellStyle,\n                            nodeType: 'canvas-datagrid-cell',\n                            x: cx,\n                            y: cy,\n                            horizontalAlignment: self.style[cellStyle + 'HorizontalAlignment'],\n                            verticalAlignment: self.style[cellStyle + 'VerticalAlignment'],\n                            offsetTop: self.canvasOffsetTop + cy,\n                            offsetLeft: self.canvasOffsetLeft + cx,\n                            scrollTop: self.scrollBox.scrollTop,\n                            scrollLeft: self.scrollBox.scrollLeft,\n                            active: active || activeHeader,\n                            hovered: hovered,\n                            selected: selected,\n                            width: cellWidth,\n                            height: cellHeight,\n                            offsetWidth: cellWidth,\n                            offsetHeight: cellHeight,\n                            parentNode: self.intf.parentNode,\n                            offsetParent: self.intf.parentNode,\n                            data: d,\n                            isCorner: isCorner,\n                            isHeader: isHeader,\n                            isColumnHeader: isColumnHeader,\n                            isHeaderCellCap: !!header.isHeaderCellCap,\n                            isRowHeader: isRowHeader,\n                            rowOpen: rowOpen,\n                            header: header,\n                            columnIndex: columnOrderIndex,\n                            rowIndex: rowOrderIndex,\n                            sortColumnIndex: headerIndex,\n                            sortRowIndex: rowIndex,\n                            isGrid: isGrid,\n                            gridId: (self.attributes.name || '') + d[self.uniqueId] + ':' + header[self.uniqueId],\n                            parentGrid: self.intf,\n                            innerHTML: '',\n                            activeHeader: activeHeader,\n                            value: isHeader && !isRowHeader ? (header.title || header.name) : d[header.name]\n                        };\n                        ev.cell = cell;\n                        cell.userHeight = cell.isHeader ? self.sizes.rows[-1] : rowHeight;\n                        cell.userWidth = cell.isHeader ? self.sizes.columns.cornerCell : self.sizes.columns[header[self.uniqueId]];\n                        cell[self.uniqueId] = d[self.uniqueId];\n                        self.visibleCells.unshift(cell);\n                        self.ctx.fillStyle = self.style[cellStyle + 'BackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'BorderColor'];\n                        self.ctx.lineWidth = self.style[cellStyle + 'BorderWidth'];\n                        if (hovered) {\n                            self.ctx.fillStyle = self.style[cellStyle + 'HoverBackgroundColor'];\n                            self.ctx.strokeStyle = self.style[cellStyle + 'HoverBorderColor'];\n                        }\n                        if (selected) {\n                            self.ctx.fillStyle = self.style[cellStyle + 'SelectedBackgroundColor'];\n                            self.ctx.strokeStyle = self.style[cellStyle + 'SelectedBorderColor'];\n                        }\n                        if (activeHeader) {\n                            self.ctx.fillStyle = self.style[activeHeader + 'BackgroundColor'];\n                        }\n                        self.dispatchEvent('rendercell', ev);\n                        if (cell.isGrid) {\n                            if (cell.height !== rowHeight) {\n                                cell.height = rowHeight || self.style.cellHeightWithChildGrid;\n                                checkScrollHeight = true;\n                            }\n                            cell.width = self.sizes.columns[header[self.uniqueId]] || self.style.cellWidthWithChildGrid;\n                        }\n                        if (rowOpen && !cell.isRowHeader) {\n                            cell.height = self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight;\n                        }\n                        if (!cell.isGrid) {\n                            fillRect(cx, cy, cell.width, cell.height);\n                            strokeRect(cx, cy, cell.width, cell.height);\n                        }\n                        self.ctx.save();\n                        radiusRect(cell.x, cell.y, cell.width, cell.height, 0);\n                        self.ctx.clip();\n                        self.dispatchEvent('afterrendercell', ev);\n                        if (cell.height !== cellHeight && !(rowOpen && !cell.isRowHeader)) {\n                            self.sizes.rows[isHeader ? -1 : d[self.uniqueId]] = cell.height;\n                            checkScrollHeight = true;\n                        }\n                        if (cell.width !== cellWidth) {\n                            self.sizes.columns[header[self.uniqueId]] = cell.width;\n                            checkScrollHeight = true;\n                        }\n                        if (isRowHeader && self.attributes.tree) {\n                            if (!self.dispatchEvent('rendertreearrow', ev)) {\n                                treeArrowSize = drawTreeArrow(cell, self.style[cellStyle + 'PaddingLeft'], cy, 0);\n                            }\n                        }\n                        if ((self.attributes.showRowNumbers && isRowHeader)\n                                || !isRowHeader) {\n                            if (cell.isGrid) {\n                                if (!self.childGrids[cell.gridId]) {\n                                    cellGridAttributes = self.args.cellGridAttributes || self.args;\n                                    cellGridAttributes.name = self.attributes.saveAppearance ? cell.gridId : undefined;\n                                    cellGridAttributes.parentNode = cell;\n                                    cellGridAttributes.data = d[header.name];\n                                    self.childGrids[cell.gridId] = self.createGrid(cellGridAttributes);\n                                    self.sizes.rows[rd[self.uniqueId]]\n                                        = self.sizes.rows[rd[self.uniqueId]] || self.style.cellGridHeight;\n                                    checkScrollHeight = true;\n                                }\n                                cell.grid = self.childGrids[cell.gridId];\n                                cell.grid.parentNode = cell;\n                                cell.grid.visible = true;\n                                cell.grid.draw();\n                                self.dispatchEvent('rendercellgrid', ev);\n                            } else {\n                                if (self.childGrids[cell.gridId]) {\n                                    self.childGrids[cell.gridId].parentNode.offsetHeight = 0;\n                                }\n                                if (isHeader && self.orderBy === header.name) {\n                                    if (!self.dispatchEvent('renderorderbyarrow', ev)) {\n                                        orderByArrowSize = drawOrderByArrow(cx + self.style[cellStyle + 'PaddingLeft'], 0);\n                                    }\n                                }\n                                self.ctx.fillStyle = self.style[cellStyle + 'Color'];\n                                if (hovered) {\n                                    self.ctx.fillStyle = self.style[cellStyle + 'HoverColor'];\n                                }\n                                if (selected) {\n                                    self.ctx.fillStyle = self.style[cellStyle + 'SelectedColor'];\n                                }\n                                if (activeHeader) {\n                                    self.ctx.fillStyle = self.style[activeHeader + 'Color'];\n                                }\n                                self.ctx.font = self.style[cellStyle + 'Font'];\n                                cell.fontHeight = self.style[cellStyle + 'FontHeight'];\n                                cell.treeArrowWidth = treeArrowSize;\n                                cell.orderByArrowWidth = orderByArrowSize;\n                                val = val !== undefined ? val : f\n                                    ? f(ev) : '';\n                                if (val === undefined && !f) {\n                                    val = '';\n                                    console.warn('canvas-datagrid: Unknown format '\n                                        + header.type + ' add a cellFormater');\n                                }\n                                cell.formattedValue = ((val !== undefined && val !== null) ? val : '').toString();\n                                if (self.columnFilters && self.columnFilters[val] !== undefined && isHeader) {\n                                    cell.formattedValue = self.attributes.filterTextPrefix + val;\n                                }\n                                if (!self.dispatchEvent('rendertext', ev)) {\n                                    if (cell.innerHTML || header.type === 'html') {\n                                        drawHtml(cell);\n                                    } else {\n                                        drawText(cell);\n                                    }\n                                }\n                            }\n                        }\n                        if (active) {\n                            aCell = cell;\n                        }\n                        if (selected && !isRowHeader) {\n                            if ((!self.selections[cell.rowIndex - 1]\n                                    || self.selections[cell.rowIndex - 1].indexOf(cell.columnIndex) === -1\n                                    || cell.rowIndex === 0)\n                                    && !cell.isHeader) {\n                                selectionBorders.push([cell, 't']);\n                            }\n                            if (!self.selections[cell.rowIndex + 1]\n                                    || self.selections[cell.rowIndex + 1].indexOf(cell.columnIndex) === -1) {\n                                selectionBorders.push([cell, 'b']);\n                            }\n                            if (!self.selections[cell.rowIndex] || cell.columnIndex === 0\n                                    || self.selections[cell.rowIndex].indexOf(cell.columnIndex - 1) === -1) {\n                                selectionBorders.push([cell, 'l']);\n                            }\n                            if (!self.selections[cell.rowIndex] || cell.columnIndex === s.length\n                                    || self.selections[cell.rowIndex].indexOf(cell.columnIndex + 1) === -1) {\n                                selectionBorders.push([cell, 'r']);\n                            }\n                        }\n                        self.ctx.restore();\n                        x += cell.width + self.style.cellBorderWidth;\n                        return cell.width;\n                    }\n                };\n            }\n            function drawRowHeader(rowData, index, rowOrderIndex) {\n                var a;\n                if (self.attributes.showRowHeaders) {\n                    x = 0;\n                    rowHeaderCell = {'rowHeaderCell': index + 1 };\n                    rowHeaderCell[self.uniqueId] = rowData[self.uniqueId];\n                    a = {\n                        name: 'rowHeaderCell',\n                        width: self.style.rowHeaderCellWidth,\n                        style: 'rowHeaderCell',\n                        type: 'string',\n                        data: rowData[self.uniqueId],\n                        index: -1\n                    };\n                    a[self.uniqueId] = rowData[self.uniqueId];\n                    rowOpen = self.openChildren[rowData[self.uniqueId]];\n                    drawCell(rowHeaderCell, index, rowOrderIndex)(a, -1, -1);\n                }\n            }\n            function drawHeaders() {\n                var d, g = s.length, i, o, columnHeaderCell, header;\n                rowHeaders.forEach(function (rArgs) {\n                    y = rArgs[3];\n                    cellHeight = rArgs[4];\n                    drawRowHeader(rArgs[0], rArgs[1], rArgs[2]);\n                });\n                if (self.attributes.showColumnHeaders) {\n                    x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft;\n                    if (self.attributes.showRowHeaders) {\n                        x += columnHeaderCellWidth;\n                    }\n                    y = 0;\n                    // cell height might have changed during drawing\n                    cellHeight = self.getRowHeaderCellHeight();\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        header = s[i];\n                        d = {\n                            title: header.title,\n                            name: header.name,\n                            width: header.width,\n                            style: 'columnHeaderCell',\n                            type: 'string',\n                            index: o,\n                            order: i\n                        };\n                        columnHeaderCell = {'columnHeaderCell': header.title || header.name};\n                        columnHeaderCell[self.uniqueId] = 'h' + header[self.uniqueId];\n                        d[self.uniqueId] = header[self.uniqueId];\n                        x += drawCell(columnHeaderCell, -1, -1)(d, o, i);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    // fill in the space right of the headers\n                    if (x < w) {\n                        c = {\n                            name: '',\n                            width: self.style.scrollBarWidth,\n                            style: 'headerCellCap',\n                            isHeaderCell: true,\n                            isHeaderCellCap: true,\n                            type: 'string',\n                            index: s.length\n                        };\n                        c[self.uniqueId] = 'columnHeaderCell';\n                        drawCell({endCap: ''}, -1, -1)(c, -1, -1);\n                    }\n                    // fill in the space right of the headers\n                    if (self.attributes.showRowHeaders) {\n                        cornerCell = {'cornerCell': '' };\n                        cornerCell[self.uniqueId] = 'cornerCell';\n                        x = 0;\n                        c = {\n                            name: 'cornerCell',\n                            width: self.style.rowHeaderCellWidth,\n                            style: 'cornerCell',\n                            type: 'string',\n                            index: -1\n                        };\n                        c[self.uniqueId] = 'cornerCell';\n                        drawCell(cornerCell, -1, -1)(c, -1, -1);\n                    }\n                }\n            }\n            function drawRow(r, d) {\n                var i, treeHeight, rowSansTreeHeight, o, g = s.length;\n                if (y - (cellHeight * 2) > h) {\n                    return false;\n                }\n                rd = self.data[r];\n                rowOpen = self.openChildren[rd[self.uniqueId]];\n                rowSansTreeHeight = self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight;\n                treeHeight = (rowOpen ? self.sizes.trees[rd[self.uniqueId]] : 0);\n                rowHeight = rowSansTreeHeight + treeHeight;\n                if (y < rowHeight * -1) {\n                    return false;\n                }\n                if (self.attributes.showRowHeaders) {\n                    x += columnHeaderCellWidth;\n                }\n                cellHeight = rowHeight;\n                for (o = self.scrollIndexLeft; o < g; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        break;\n                    }\n                }\n                // cell height might have changed during drawing\n                cellHeight = rowHeight;\n                x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft + self.style.cellBorderWidth;\n                // don't draw a tree for the new row\n                treeGrid = self.childGrids[rd[self.uniqueId]];\n                if (r !== self.data.length && rowOpen) {\n                    treeGrid.visible = true;\n                    treeGrid.parentNode = {\n                        offsetTop: y + rowSansTreeHeight + self.canvasOffsetTop,\n                        offsetLeft: columnHeaderCellWidth - 1 + self.canvasOffsetLeft,\n                        offsetHeight: treeHeight,\n                        offsetWidth: self.width - columnHeaderCellWidth - self.style.scrollBarWidth - 1,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: self.style,\n                        nodeType: 'canvas-datagrid-tree',\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        rowIndex: r\n                    };\n                    self.visibleCells.unshift({\n                        rowIndex: x,\n                        columnIndex: 0,\n                        y: treeGrid.parentNode.offsetTop,\n                        x: treeGrid.parentNode.offsetLeft,\n                        height: treeGrid.parentNode.offsetHeight,\n                        width: treeGrid.parentNode.offsetWidth,\n                        style: 'tree-grid',\n                        type: treeGrid.parentNode.nodeType\n                    });\n                    treeGrid.draw();\n                } else if (treeGrid) {\n                    treeGrid.parentNode.offsetHeight = 0;\n                    delete self.sizes.trees[rd[self.uniqueId]];\n                }\n                rowHeaders.push([rd, r, d, y, rowHeight]);\n                y += cellHeight + self.style.cellBorderWidth;\n                return true;\n            }\n            function initDraw() {\n                self.visibleRows = [];\n                s = self.getVisibleSchema();\n                self.visibleCells = [];\n                self.canvasOffsetTop = self.isChildGrid ? self.parentNode.offsetTop : 0;\n                self.canvasOffsetLeft = self.isChildGrid ? self.parentNode.offsetLeft : 0;\n                h = self.height;\n                w = self.width;\n                if (!self.isChildGrid) {\n                    self.ctx.scale(window.devicePixelRatio, window.devicePixelRatio);\n                }\n            }\n            function drawBackground() {\n                radiusRect(0, 0, w, h, 0);\n                self.ctx.clip();\n                self.ctx.fillStyle = self.style.backgroundColor;\n                fillRect(0, 0, w, h);\n            }\n            function drawRows() {\n                var o, n, i, g = s.length;\n                x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft + self.style.cellBorderWidth;\n                y = (self.scrollBox.scrollTop * -1) + rowHeaderCellHeight + self.scrollPixelTop + self.style.cellBorderWidth;\n                for (r = self.scrollIndexTop; r < l; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.showNewRow) {\n                    if (self.attributes.showRowHeaders) {\n                        x += columnHeaderCellWidth;\n                    }\n                    rowHeight = cellHeight = self.style.cellHeight;\n                    rowOpen = false;\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        x += drawCell(self.newRow, self.data.length, self.data.length)(s[i], i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    rowHeaders.push([self.newRow, self.data.length, self.data.length, y, rowHeight]);\n                }\n            }\n            function drawReorderMarkers() {\n                if (!self.reorderObject) { return; }\n                var b = {\n                        height: self.reorderObject.height,\n                        width: self.reorderObject.width,\n                        x: self.reorderObject.x + self.reorderObject.dragOffset.x,\n                        y: self.reorderObject.y + self.reorderObject.dragOffset.y\n                    },\n                    m = {\n                        width: w,\n                        heigth: h,\n                        x: 0,\n                        y: 0\n                    };\n                self.ctx.fillStyle = self.style.reorderMarkerBackgroundColor;\n                self.ctx.lineWidth = self.style.reorderMarkerBorderWidth;\n                self.ctx.strokeStyle = self.style.reorderMarkerBorderColor;\n                if (self.dragMode === 'row-reorder') {\n                    b.width = w;\n                    b.x = 0;\n                    m.width = w;\n                    m.y = self.currentCell.y;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.rowIndex !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex - 1 !== self.reorderObject.rowIndex) {\n                        addBorderLine(m, 't');\n                    }\n                } else if (self.dragMode === 'column-reorder' && self.reorderObject) {\n                    b.height = h;\n                    b.y = 0;\n                    m.height = h;\n                    m.x = self.currentCell.x;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.columnIndex !== self.reorderObject.columnIndex\n                            && self.currentCell.columnIndex - 1 !== self.reorderObject.columnIndex) {\n                        addBorderLine(m, 'l');\n                    }\n                }\n            }\n            function drawBorder() {\n                self.ctx.lineWidth = self.style.gridBorderWidth;\n                self.ctx.strokeStyle = self.style.gridBorderColor;\n                strokeRect(0, 0, self.width, self.height);\n            }\n            function drawSelectionBorders() {\n                self.ctx.lineWidth = self.style.selectionOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.selectionOverlayBorderColor;\n                selectionBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n            }\n            function drawActiveCell() {\n                if (!aCell) { return; }\n                if (self.attributes.selectionMode === 'row') {\n                    if (self.activeCell && self.activeCell.rowIndex === aCell.rowIndex) {\n                        self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                        self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                        strokeRect(0, aCell.y, self.getHeaderWidth() + columnHeaderCellWidth, rowHeight);\n                    }\n                } else {\n                    self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                    self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                    strokeRect(aCell.x, aCell.y, aCell.width, aCell.height);\n                }\n            }\n            function drawDebug() {\n                perfCounters[drawCount % perfWindowSize] = performance.now() - p;\n                var d;\n                if (self.attributes.debug) {\n                    self.ctx.font = '11px sans-serif';\n                    d = {};\n                    d.perf = (perfCounters.reduce(function (a, b) {\n                        return a + b;\n                    }, 0) / perfCounters.length).toFixed(1)\n                        + 'ms (' +\n                        perfCounters.map(function (a) { return a.toFixed(1); }).join(', ') + ')';\n                    d.htmlImages = Object.keys(self.htmlImageCache).length;\n                    d.scrollBox = self.scrollBox.toString();\n                    d.scrollIndex = '{\"top\": ' + self.scrollIndexTop + ', \"left\": ' + self.scrollIndexLeft + '}';\n                    d.scrollPixel = '{\"top\": ' + self.scrollPixelTop + ', \"left\": ' + self.scrollPixelLeft + '}';\n                    d.canvasOffset = '{\"top\": ' + self.canvasOffsetTop + ', \"left\": ' + self.canvasOffsetLeft + '}';\n                    d.pointerLockPosition =  self.pointerLockPosition ?\n                            self.pointerLockPosition.x + ', ' + self.pointerLockPosition.y : '';\n                    d.size = '{\"width\": ' + self.width + ', \"height\": ' + self.height + '}';\n                    d.mouse = '{\"x\": ' + self.mouse.x + ', \"y\": ' + self.mouse.y + '}';\n                    d.touch = !self.touchStart\n                        ? '' : '{\"x\": ' + self.touchStart.x + ', \"y\": ' + self.touchStart.y + \"}\";\n                    d.entities = self.visibleCells.length;\n                    d.hasFocus = self.hasFocus;\n                    d.dragMode = self.dragMode;\n                    if (self.currentCell) {\n                        d.columnIndex = self.currentCell.columnIndex;\n                        d.rowIndex = self.currentCell.rowIndex;\n                        d.sortColumnIndex = self.currentCell.sortColumnIndex;\n                        d.sortRowIndex = self.currentCell.sortRowIndex;\n                        d.context = self.currentCell.context;\n                        d.dragContext = self.currentCell.dragContext;\n                        d.style = self.currentCell.style;\n                        d.type = self.currentCell.type;\n                    }\n                    self.ctx.save();\n                    Object.keys(d).forEach(function (key, index) {\n                        var m = key + ': ' + d[key],\n                            lh = 14;\n                        self.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n                        fillRect(columnHeaderCellWidth, lh + (index * lh), 800, lh);\n                        self.ctx.fillStyle = 'rgba(0, 0, 0, 1)';\n                        fillText(m, columnHeaderCellWidth + 1, rowHeaderCellHeight + (index * lh));\n                    });\n                    self.ctx.restore();\n                }\n            }\n            self.ctx.save();\n            initDraw();\n            drawBackground();\n            drawRows();\n            drawSelectionBorders();\n            drawActiveCell();\n            drawHeaders();\n            drawReorderMarkers();\n            drawScrollBars();\n            if (checkScrollHeight) {\n                self.resize(true);\n            }\n            drawBorder();\n            drawDebug();\n            if (self.dispatchEvent('afterdraw', {})) { return; }\n            self.ctx.restore();\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/draw.js\n// module id = 1\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var touchDelta = {x: 0, y: 0, scrollTop: 0, scrollLeft: 0},\n            touchAnimateTo = {scrollLeft: 0, scrollTop: 0},\n            touchSigma = {scrollLeft: 0, scrollTop: 0},\n            xPPS = 0,\n            yPPS = 0,\n            touchingCell = false,\n            startingCell = false,\n            animationFrames = 0;\n        self.getTouchPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.touches[0].clientX - rect.left,\n                    y: e.touches[0].clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        self.calculatePPS = function () {\n            xPPS = ((touchDelta.scrollLeft - touchSigma.scrollLeft) / (touchDelta.t - touchSigma.t));\n            yPPS = ((touchDelta.scrollTop - touchSigma.scrollTop) / (touchDelta.t - touchSigma.t));\n            touchSigma = {\n                scrollLeft: touchDelta.scrollLeft,\n                scrollTop: touchDelta.scrollTop,\n                t: performance.now() / 1000\n            };\n        };\n        self.touchCell = function (e) {\n            return function () {\n                clearInterval(self.touchCalcTimeout);\n                var pos = self.getTouchPos(e);\n                if (Math.abs(touchDelta.x) + Math.abs(touchDelta.y) < self.attributes.touchDeadZone) {\n                    touchingCell = self.getCellAt(pos.x, pos.y);\n                    self.mousemove(e, pos);\n                    self.mousedown(e, pos);\n                    self.mousemove(e, pos);\n                    self.draw();\n                }\n            };\n        };\n        self.touchstart = function (e) {\n            touchingCell = false;\n            self.touchStart = self.getTouchPos(e);\n            startingCell = self.getCellAt(self.touchStart.x, self.touchStart.y, true);\n            if (self.dispatchEvent('touchstart', {NativeEvent: e, cell: self.startingCell})) { return; }\n            if (!self.hasFocus) { return; }\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (e.touches.length === 2) {\n                return self.contextmenu(e, self.touchStart);\n            }\n            self.touchScrollStart = {\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: performance.now() / 1000\n            };\n            touchDelta = {\n                x: self.touchStart.x,\n                y: self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: 0\n            };\n            self.touchmove(e);\n            clearTimeout(self.touchTimeout);\n            clearInterval(self.touchCalcTimeout);\n            self.touchTimeout = setTimeout(self.touchCell(e), self.attributes.touchSelectTimeMs);\n            self.touchCalcTimeout = setInterval(self.calculatePPS, 20);\n            self.touchHaltAnimation = true;\n            document.body.addEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.addEventListener('touchend', self.touchend, false);\n            document.body.addEventListener('touchcancel', self.touchcancel, false);\n        };\n        self.easing = function (t, b, c, d) {\n            return c * (t / d) * (2 - t) + b;\n        };\n        self.touchEndAnimation = function () {\n            if (!self.canvas || !self.scrollBox.scrollTo) { return requestAnimationFrame(self.touchEndAnimation); }\n            var x,\n                y,\n                n = performance.now() / 1000,\n                d = (self.attributes.touchReleaseAnimationDurationMs / 1000),\n                t;\n            touchDelta.t = touchDelta.t || n + d;\n            t = n - touchDelta.t + 1;\n            if (t > 1 || self.touchHaltAnimation || (animationFrames > 1000)) {\n                animationFrames = 0;\n                self.touchHaltAnimation = false;\n                touchAnimateTo = {scrollLeft: -1, scrollTop: -1};\n                return;\n            }\n            animationFrames += 1;\n            x = self.easing(t, touchDelta.scrollLeft, -touchAnimateTo.scrollLeft, d);\n            y = self.easing(t, touchDelta.scrollTop, -touchAnimateTo.scrollTop, d);\n            self.scrollBox.scrollTo(x, y);\n            requestAnimationFrame(self.touchEndAnimation);\n        };\n        self.touchend = function (e) {\n            if (self.dispatchEvent('touchend', {NativeEvent: e})) { return; }\n            var dz = Math.abs(touchDelta.x) + Math.abs(touchDelta.y) < self.attributes.touchDeadZone,\n                pos = {\n                    x: self.touchStart.x + touchDelta.x,\n                    y: self.touchStart.y + touchDelta.y\n                },\n                cell = self.getCellAt(pos.x, pos.y);\n            if (!self.hasFocus) { return; }\n            if (touchingCell) {\n                self.mouseup(e, self.touchStart);\n            } else if (dz) {\n                if (cell.active) {\n                    self.beginEditAt(cell.columnIndex, cell.rowIndex);\n                } else {\n                    self.mousedown(e, self.touchStart);\n                    self.mouseup(e, self.touchStart);\n                    self.click(e, self.touchStart);\n                }\n            }\n            touchingCell = false;\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n            clearTimeout(self.touchTimeout);\n            clearInterval(self.touchCalcTimeout);\n            self.calculatePPS();\n            touchAnimateTo.scrollLeft = xPPS * self.attributes.touchReleaseAcceleration;\n            touchAnimateTo.scrollTop = yPPS * self.attributes.touchReleaseAcceleration;\n            self.touchHaltAnimation = false;\n            if (animationFrames === 0 && !/-scroll-/.test(startingCell.style) && !dz) {\n                self.touchEndAnimation();\n            }\n        };\n        self.touchmove = function (e) {\n            var d = self.getTouchPos(e);\n            if (self.dispatchEvent('touchmove', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (!self.hasFocus) { return; }\n            touchDelta = {\n                x: d.x - self.touchStart.x,\n                y: d.y - self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: 0\n            };\n            if (/vertical-scroll-/.test(startingCell.style)) {\n                self.scrollBox.scrollTop = self.scrollBox.scrollHeight * (d.y / self.height);\n            } else if (/horizontal-scroll-/.test(startingCell.style)) {\n                self.scrollBox.scrollLeft = self.scrollBox.scrollWidth * (d.x / self.width);\n            } else if (touchingCell) {\n                self.mousemove(e, d);\n                self.draw();\n            } else {\n                if (animationFrames === 0) {\n                    self.scrollBox.scrollTo(self.touchScrollStart.scrollLeft - touchDelta.x,\n                        self.touchScrollStart.scrollTop - touchDelta.y);\n                }\n            }\n        };\n        self.touchcancel = function (e) {\n            if (self.dispatchEvent('touchcancel', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) { return; }\n            self.touchend(e);\n            touchingCell = false;\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n            return;\n        };\n        self.stopPropagation = function (e) { e.stopPropagation(); };\n        self.addEventListener = function (ev, fn) {\n            self.events[ev] = self.events[ev] || [];\n            self.events[ev].unshift(fn);\n        };\n        self.removeEventListener = function (ev, fn) {\n            (self.events[ev] || []).forEach(function removeEachListener(sfn, idx) {\n                if (fn === sfn) {\n                    self.events[ev].splice(idx, 1);\n                }\n            });\n        };\n        self.dispatchEvent = function (ev, e) {\n            var defaultPrevented;\n            function preventDefault() {\n                defaultPrevented = true;\n            }\n            if (!self.events[ev]) { return; }\n            self.events[ev].forEach(function dispatchEachEvent(fn) {\n                e.ctx = self.ctx;\n                e.preventDefault = preventDefault;\n                fn.apply(self.intf, [e]);\n            });\n            return defaultPrevented;\n        };\n        self.resize = function (drawAfterResize) {\n            var cellBorder = self.style.cellBorderWidth * 2,\n                columnHeaderCellBorder =  self.style.columnHeaderCellBorderWidth * 2,\n                scrollHeight,\n                scrollWidth,\n                rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth(),\n                // TODO: What the hell are these numbers!?  They are probably some value in the style.\n                scrollDragPositionOffsetY = 30,\n                scrollDragPositionOffsetX = 15;\n            if (self.isChildGrid) {\n                self.height = self.parentNode.offsetHeight;\n                self.width = self.parentNode.offsetWidth;\n            } else {\n                self.parentNode = self.parentDOMNode;\n                if (!self.parentIsCanvas) {\n                    self.height = self.parentDOMNode.offsetHeight;\n                    self.width = self.parentDOMNode.offsetWidth;\n                    self.canvas.height = self.height * window.devicePixelRatio;\n                    self.canvas.width = self.width * window.devicePixelRatio;\n                    self.canvas.style.height = self.height + 'px';\n                    self.canvas.style.width = self.width + 'px';\n                }\n                self.canvasOffsetTop = self.args.canvasOffsetTop || 0;\n                self.canvasOffsetLeft = self.args.canvasOffsetLeft || 0;\n            }\n            scrollHeight = self.data.reduce(function reduceData(accumulator, row) {\n                return accumulator\n                    + (self.sizes.rows[row[self.uniqueId]] || self.style.cellHeight)\n                    + (self.sizes.trees[row[self.uniqueId]] || 0)\n                    + cellBorder;\n            }, 0) || 0;\n            scrollWidth = self.getVisibleSchema().reduce(function reduceSchema(accumulator, column) {\n                if (column.hidden) { return accumulator; }\n                return accumulator + (self.sizes.columns[column[self.uniqueId]] || column.width || self.style.columnWidth) + cellBorder;\n            }, 0) || 0;\n            if (self.attributes.showNewRow) {\n                scrollHeight += self.style.cellHeight + cellBorder;\n            }\n            self.scrollBox.width = self.width - columnHeaderCellWidth;\n            self.scrollBox.height = self.height - rowHeaderCellHeight - columnHeaderCellBorder;\n            self.scrollBox.top = rowHeaderCellHeight + columnHeaderCellBorder;\n            self.scrollBox.left = columnHeaderCellWidth;\n            self.scrollBox.scrollHeight = scrollHeight + self.style.scrollBarWidth - self.scrollBox.height;\n            self.scrollBox.scrollWidth = scrollWidth + self.style.scrollBarWidth - self.scrollBox.width;\n            self.scrollBox.widthBoxRatio = ((self.scrollBox.width - scrollDragPositionOffsetX)\n                / (self.scrollBox.scrollWidth + self.scrollBox.width - scrollDragPositionOffsetX));\n            self.scrollBox.scrollBoxWidth = self.scrollBox.width\n                * self.scrollBox.widthBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.heightBoxRatio = ((self.scrollBox.height - scrollDragPositionOffsetY)\n                / (self.scrollBox.scrollHeight + (self.scrollBox.height - scrollDragPositionOffsetY)));\n            self.scrollBox.scrollBoxHeight = self.scrollBox.height\n                * self.scrollBox.heightBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.scrollBoxWidth = Math.max(self.scrollBox.scrollBoxWidth, self.style.scrollBarBoxMinSize);\n            self.scrollBox.scrollBoxHeight = Math.max(self.scrollBox.scrollBoxHeight, self.style.scrollBarBoxMinSize);\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            self.resizeEditInput();\n            self.scroll(true);\n            if (drawAfterResize) {\n                self.draw(true);\n            }\n            self.dispatchEvent('resize', {});\n            return true;\n        };\n        self.resizeEditInput = function () {\n            if (self.input) {\n                var pos = self.canvas.getBoundingClientRect(),\n                    s = self.scrollOffset(self.canvas),\n                    bx2 = (self.style.cellBorderWidth * 2),\n                    cell = self.getVisibleCellByIndex(self.input.editCell.columnIndex, self.input.editCell.rowIndex)\n                        || {x: -100, y: -100, height: 0, width: 0};\n                self.input.style.left = pos.left + cell.x - self.style.cellBorderWidth + self.canvasOffsetLeft - s.left + 'px';\n                self.input.style.top = pos.top + cell.y - bx2 + self.canvasOffsetTop - s.top + 'px';\n                self.input.style.height = cell.height - bx2 - 1 + 'px';\n                self.input.style.width = cell.width - bx2 - self.style.cellPaddingLeft + 'px';\n                self.clipElement(self.input);\n            }\n        };\n        self.scroll = function (e, dontDraw) {\n            var s = self.getVisibleSchema(),\n                cellBorder = self.style.cellBorderWidth * 2;\n            self.scrollIndexTop = 0;\n            self.scrollPixelTop = 0;\n            self.scrollIndexLeft = 0;\n            self.scrollPixelLeft = 0;\n            while (self.scrollPixelTop < self.scrollBox.scrollTop && self.scrollIndexTop < self.data.length) {\n                self.scrollPixelTop +=\n                    (self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || self.style.cellHeight)\n                    + (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0)\n                    + cellBorder;\n                self.scrollIndexTop += 1;\n            }\n            while (self.scrollPixelLeft < self.scrollBox.scrollLeft && self.scrollIndexLeft < s.length) {\n                self.scrollPixelLeft +=\n                    (self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width);\n                self.scrollIndexLeft += 1;\n            }\n            if (self.data.length > 0) {\n                self.scrollIndexLeft = Math.max(self.scrollIndexLeft - 1, 0);\n                self.scrollPixelLeft = Math.max(self.scrollPixelLeft\n                    - (self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width), 0);\n                self.scrollIndexTop = Math.max(self.scrollIndexTop - 1, 0);\n                self.scrollPixelTop = Math.max(self.scrollPixelTop\n                    - (self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || self.style.cellHeight)\n                    - (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0), 0);\n            }\n            self.ellipsisCache = {};\n            if (!dontDraw) {\n                self.draw(true);\n            }\n            //TODO: figure out why this has to be delayed for child grids\n            //BUG: scrolling event on 3rd level hierarchy fails to move input box\n            requestAnimationFrame(self.resizeEditInput);\n            self.dispatchEvent('scroll', {top: self.scrollBox.scrollTop, left: self.scrollBox.scrollLeft});\n        };\n        self.mousemove = function (e, overridePos) {\n            if (self.contextMenu || self.input) {\n                return;\n            }\n            self.mouse = overridePos || self.getLayerPos(e);\n            var ctrl = (e.controlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                i,\n                s = self.getSchema(),\n                dragBounds,\n                sBounds,\n                x = self.mouse.x,\n                y = self.mouse.y,\n                o = self.getCellAt(x, y),\n                delta,\n                ev = {NativeEvent: e, cell: o, x: x, y: y},\n                previousCell = self.currentCell;\n            clearTimeout(self.scrollTimer);\n            if (!self.isInGrid({x: x, y: y})) {\n                self.hasFocus = false;\n            }\n            if (self.dispatchEvent('mousemove', ev)) {\n                return;\n            }\n            if (o && self.currentCell && (self.currentCell.rowIndex !== o.rowIndex\n                    || self.currentCell.columnIndex !== o.columnIndex)) {\n                self.cellBoundaryCrossed = true;\n                ev.cell = previousCell;\n                self.dispatchEvent('cellmouseout', ev);\n                ev.cell = o;\n                self.dispatchEvent('cellmouseover', ev);\n            }\n            self.currentCell = o;\n            if (!self.hasFocus) {\n                return;\n            }\n            self.hovers = {};\n            if (!self.draggingItem\n                    && o\n                    && self.scrollModes.indexOf(o.context) === -1) {\n                self.dragItem = o;\n                self.dragMode = o.dragContext;\n                self.canvas.style.cursor = o.context;\n                if (o.context === 'cell' && o.data) {\n                    self.canvas.style.cursor = 'pointer';\n                    self.hovers[o.data[self.uniqueId]] = [o.columnIndex];\n                }\n                if ((self.selecting || self.reorderObject)\n                        && o.context === 'cell'\n                        && o.data) {\n                    sBounds = self.getSelectionBounds();\n                    delta = {\n                        x: Math.abs(self.dragStart.x - x),\n                        y: Math.abs(self.dragStart.y - y),\n                    };\n                    if (self.dragStartObject.columnIndex !== -1 && e.shiftKey) {\n                        self.dragStartObject = {\n                            rowIndex: self.activeCell.rowIndex,\n                            columnIndex: self.activeCell.columnIndex\n                        };\n                    }\n                    dragBounds = {\n                        top: Math.min(self.dragStartObject.rowIndex, o.rowIndex),\n                        left: Math.min(self.dragStartObject.columnIndex, o.columnIndex),\n                        bottom: Math.max(self.dragStartObject.rowIndex, o.rowIndex),\n                        right: Math.max(self.dragStartObject.columnIndex, o.columnIndex)\n                    };\n                    if (self.dragStartObject.columnIndex === -1) {\n                        dragBounds.left = -1;\n                        dragBounds.right = s.length - 1;\n                        dragBounds.top = Math.min(sBounds.top, o.rowIndex);\n                        dragBounds.bottom = Math.max(sBounds.bottom, o.rowIndex);\n                    }\n                    if (self.dragStartObject.rowIndex !== o.rowIndex\n                                || self.dragStartObject.columnIndex !== o.columnIndex) {\n                        self.ignoreNextClick = true;\n                    }\n                    if (self.cellBoundaryCrossed || (delta.x === 0 && delta.y === 0) || (self.attributes.selectionMode === 'row')) {\n                        if ((self.attributes.selectionMode === 'row') || self.dragStartObject.columnIndex === -1) {\n                            self.selectRow(o.rowIndex, ctrl, null, true);\n                        } else {\n                            if (!self.dragAddToSelection && o.rowIndex !== undefined) {\n                                if (self.selections[o.rowIndex] && self.selections[o.rowIndex].indexOf(o.columnIndex) !== -1) {\n                                    self.selections[o.rowIndex].splice(self.selections[o.rowIndex].indexOf(o.columnIndex), 1);\n                                }\n                            } else {\n                                self.selections[o.rowIndex] = self.selections[o.rowIndex] || [];\n                                if (self.selections[o.rowIndex].indexOf(o.columnIndex) === -1) {\n                                    self.selections[o.rowIndex].push(o.columnIndex);\n                                }\n                            }\n                        }\n                    }\n                    if ((!self.selectionBounds || (dragBounds.top !== self.selectionBounds.top\n                            || dragBounds.left !== self.selectionBounds.left\n                            || dragBounds.bottom !== self.selectionBounds.bottom\n                            || dragBounds.right !== self.selectionBounds.right)) && !ctrl) {\n                        self.selections = [];\n                        sBounds = dragBounds;\n                        if (self.attributes.selectionMode === 'row') {\n                            for (i = sBounds.top; i <= sBounds.bottom; i += 1) {\n                                self.selectRow(i, true, null, true);\n                            }\n                        } else {\n                            self.selectArea(sBounds, true);\n                        }\n                    }\n                    self.autoScrollZone(e, x, y, ctrl);\n                }\n            }\n            self.cellBoundaryCrossed = false;\n            self.draw(true);\n        };\n        self.click = function (e, overridePos) {\n            var i,\n                selectionChanged,\n                ctrl = (e.controlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                pos = overridePos || self.getLayerPos(e);\n            self.currentCell = self.getCellAt(pos.x, pos.y);\n            if (self.currentCell.grid !== undefined) {\n                return;\n            }\n            function checkSelectionChange() {\n                if (!selectionChanged) { return; }\n                self.dispatchEvent('selectionchanged', {\n                    selectedData: self.getSelectedData(),\n                    selections: self.selections,\n                    selectionBounds: self.selectionBounds\n                });\n            }\n            if (self.input) {\n                self.endEdit();\n            }\n            if (self.ignoreNextClick) {\n                self.ignoreNextClick = false;\n                return;\n            }\n            i = self.currentCell;\n            if (self.dispatchEvent('click', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'cell') {\n                if (self.currentCell.style === 'cornerCell') {\n                    self.order(self.uniqueId, 'asc', self.sorters.number);\n                    self.setFilter();\n                    checkSelectionChange();\n                    return;\n                }\n                if (self.currentCell.style === 'columnHeaderCell') {\n                    if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                        if (self.orderBy === i.header.name) {\n                            self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                        } else {\n                            self.orderDirection = 'asc';\n                        }\n                        self.order(i.header.name, self.orderDirection);\n                        checkSelectionChange();\n                        return;\n                    }\n                    if (self.attributes.columnHeaderClickBehavior === 'select') {\n                        self.selectColumn(i.header.index, ctrl, e.shiftKey, true);\n                        checkSelectionChange();\n                        self.draw();\n                        return;\n                    }\n                }\n                if (['rowHeaderCell', 'columnHeaderCell'].indexOf(self.currentCell.style) === -1 && !ctrl) {\n                    self.setActiveCell(i.columnIndex, i.rowIndex);\n                }\n                self.selections[i.rowIndex] = self.selections[i.rowIndex] || [];\n                if (((self.attributes.selectionMode === 'row') || self.currentCell.style === 'rowHeaderCell')) {\n                    if (self.currentCell.style === 'rowHeaderCell'\n                            && self.attributes.tree && pos.x > 0\n                            && pos.x - self.currentCell.x < self.style.treeArrowWidth\n                            + self.style.treeArrowMarginLeft\n                            + self.style.treeArrowMarginRight + self.style.treeArrowClickRadius\n                            && pos.y - self.currentCell.y < self.style.treeArrowHeight\n                            + self.style.treeArrowMarginTop + self.style.treeArrowClickRadius\n                            && pos.y > 0) {\n                        self.toggleTree(i.rowIndex);\n                        return;\n                    }\n                    selectionChanged = true;\n                    self.selectRow(i.rowIndex, ctrl, null, true);\n                }\n                if (e.shiftKey && !ctrl) {\n                    self.selectionBounds = self.getSelectionBounds();\n                    self.selectArea(undefined, false);\n                }\n            }\n            checkSelectionChange();\n            self.draw(true);\n        };\n        self.dragResizeColumn = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = self.resizingStartingWidth + pos.x - self.dragStart.x;\n            y = self.resizingStartingHeight + pos.y - self.dragStart.y;\n            if (x < self.style.minColumnWidth) {\n                x = self.style.minColumnWidth;\n            }\n            if (y < self.style.minRowHeight) {\n                y = self.style.minRowHeight;\n            }\n            if (self.dispatchEvent('resizecolumn', {x: x, y: y, draggingItem: self.draggingItem})) { return false; }\n            if (self.scrollBox.scrollLeft > self.scrollBox.scrollWidth - self.attributes.resizeScrollZone\n                    && self.dragMode === 'ew-resize') {\n                self.resize(true);\n                self.scrollBox.scrollLeft += x;\n            }\n            if (self.dragMode === 'ew-resize') {\n                self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] = x;\n                if (['rowHeaderCell', 'cornerCell'].indexOf(self.draggingItem.header.style) !== -1) {\n                    self.resize(true);\n                }\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.dragMode === 'ns-resize') {\n                if (self.draggingItem.rowOpen) {\n                    self.sizes.trees[self.draggingItem.data[self.uniqueId]] = y;\n                } else if (self.attributes.globalRowResize) {\n                    self.style.cellHeight = y;\n                } else {\n                    self.sizes.rows[self.draggingItem.data[self.uniqueId]] = y;\n                }\n                self.dispatchEvent('resizerow', {row: y});\n                self.resizeChildGrids();\n                return;\n            }\n            self.ellipsisCache = {};\n        };\n        self.stopDragResize = function () {\n            self.resize();\n            document.body.removeEventListener('mousemove', self.dragResizeColumn, false);\n            document.body.removeEventListener('mouseup', self.stopDragResize, false);\n            self.setStorageData();\n            self.draw(true);\n            self.ignoreNextClick = true;\n        };\n        self.scrollGrid = function (e) {\n            var pos = self.getLayerPos(e);\n            if (self.attributes.scrollPointerLock && self.pointerLockPosition\n                    && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                self.pointerLockPosition.x += e.movementX;\n                self.pointerLockPosition.y += e.movementY;\n                self.pointerLockPosition.x = Math.min(self.width - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.x));\n                self.pointerLockPosition.y = Math.min(self.height - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.y));\n                pos = self.pointerLockPosition;\n            }\n            self.scrollMode = self.getCellAt(pos.x, pos.y).context;\n            if (self.scrollMode === 'horizontal-scroll-box' && self.scrollStartMode !== 'horizontal-scroll-box') {\n                self.scrollStartMode = 'horizontal-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.left = self.scrollBox.scrollLeft;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box' && self.scrollStartMode !== 'vertical-scroll-box') {\n                self.scrollStartMode = 'vertical-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.top = self.scrollBox.scrollTop;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollStartMode === 'vertical-scroll-box'\n                    && self.scrollMode !== 'vertical-scroll-box') {\n                self.scrollMode = 'vertical-scroll-box';\n            }\n            if (self.scrollStartMode === 'horizontal-scroll-box'\n                    && self.scrollMode !== 'horizontal-scroll-box') {\n                self.scrollMode = 'horizontal-scroll-box';\n            }\n            clearTimeout(self.scrollTimer);\n            if (self.scrollModes.indexOf(self.scrollMode) === -1) {\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box') {\n                self.scrollBox.scrollTop = self.scrollStart.top + ((pos.y - self.dragStart.y)\n                    / self.scrollBox.heightBoxRatio);\n            } else if (self.scrollMode === 'vertical-scroll-top') {\n                self.scrollBox.scrollTop -= (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'vertical-scroll-bottom') {\n                self.scrollBox.scrollTop += (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n            if (self.scrollMode === 'horizontal-scroll-box') {\n                self.scrollBox.scrollLeft = self.scrollStart.left + ((pos.x - self.dragStart.x)\n                    / self.scrollBox.widthBoxRatio);\n            } else if (self.scrollMode === 'horizontal-scroll-right') {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'horizontal-scroll-left') {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.stopScrollGrid = function () {\n            clearTimeout(self.scrollTimer);\n            if (document.exitPointerLock) {\n                document.exitPointerLock();\n            }\n            document.body.removeEventListener('mousemove', self.scrollGrid, false);\n        };\n        self.dragReorder = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = pos.x - self.dragStart.x;\n            y = pos.y - self.dragStart.y;\n            if (!self.attributes.allowColumnReordering && self.dragMode === 'column-reorder') {\n                return;\n            }\n            if (!self.attributes.allowRowReordering && self.dragMode === 'row-reorder') {\n                return;\n            }\n            if (self.dispatchEvent('reordering', {\n                    NativeEvent: e,\n                    source: self.dragStartObject,\n                    target: self.currentCell,\n                    dragMode: self.dragMode\n                })) {\n                return;\n            }\n            if (Math.abs(x) > self.attributes.reorderDeadZone || Math.abs(y) > self.attributes.reorderDeadZone) {\n                self.reorderObject = self.dragStartObject;\n                self.reorderTarget = self.currentCell;\n                self.reorderObject.dragOffset = {\n                    x: x,\n                    y: y\n                };\n                self.autoScrollZone(e, pos.x, pos.x, false);\n            }\n        };\n        self.stopDragReorder = function (e) {\n            var cr = {\n                    'row-reorder': self.orders.rows,\n                    'column-reorder': self.orders.columns\n                },\n                i = {\n                    'row-reorder': 'rowIndex',\n                    'column-reorder': 'columnIndex'\n                }[self.dragMode];\n            document.body.removeEventListener('mousemove', self.dragReorder, false);\n            document.body.removeEventListener('mouseup', self.stopDragReorder, false);\n            if (self.reorderObject\n                    && self.reorderTarget) {\n                self.ignoreNextClick = true;\n                if (self.reorderObject[i] !== self.reorderTarget[i]\n                        && !self.dispatchEvent('reorder', {\n                            NativeEvent: e,\n                            source: self.reorderObject,\n                            target: self.reorderTarget,\n                            dragMode: self.dragMode\n                        })) {\n                    cr[self.dragMode].splice(cr[self.dragMode].indexOf(self.reorderObject[i]), 1);\n                    cr[self.dragMode].splice(cr[self.dragMode].indexOf(self.reorderTarget[i]), 0, self.reorderObject[i]);\n                    self.setStorageData();\n                }\n            }\n            self.reorderObject = undefined;\n            self.reorderTarget = undefined;\n            self.draw(true);\n        };\n        self.mousedown = function (e, overridePos) {\n            self.lastMouseDownTarget = e.target;\n            if (self.dispatchEvent('mousedown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (e.button === 2 || self.input) { return; }\n            var ctrl = (e.controlKey || e.metaKey);\n            self.dragStart = overridePos || self.getLayerPos(e);\n            self.scrollStart = {\n                left: self.scrollBox.scrollLeft,\n                top: self.scrollBox.scrollTop\n            };\n            self.dragStartObject = self.getCellAt(self.dragStart.x, self.dragStart.y);\n            self.dragAddToSelection = !self.dragStartObject.selected;\n            if (!ctrl && !e.shiftKey && !/(vertical|horizontal)-scroll-(bar|box)/\n                    .test(self.dragStartObject.context) && !self.currentCell.isColumnHeader) {\n                self.selections = [];\n            }\n            if (self.dragStartObject.isGrid) {\n                return;\n            }\n            if (self.scrollModes.indexOf(self.dragStartObject.context) !== -1) {\n                self.scrollMode = self.dragStartObject.context;\n                self.scrollStartMode = self.dragStartObject.context;\n                self.scrollGrid(e);\n                if (self.attributes.scrollPointerLock\n                        && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                    self.pointerLockPosition = {\n                        x: self.dragStart.x,\n                        y: self.dragStart.y\n                    };\n                    self.canvas.requestPointerLock();\n                }\n                document.body.addEventListener('mousemove', self.scrollGrid, false);\n                document.body.addEventListener('mouseup', self.stopScrollGrid, false);\n                self.ignoreNextClick = true;\n                return;\n            }\n            if (self.dragMode === 'cell') {\n                self.selecting = true;\n                if (self.attributes.selectionMode === 'row') {\n                    self.selectRow(self.dragStartObject.rowIndex, ctrl, null, true);\n                }\n                return self.mousemove(e);\n            }\n            if (['ns-resize', 'ew-resize'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragItem;\n                if (self.draggingItem.rowOpen) {\n                    self.resizingStartingHeight = self.sizes.trees[self.draggingItem.data[self.uniqueId]];\n                } else {\n                    self.resizingStartingHeight = self.sizes.rows[self.draggingItem.data[self.uniqueId]] || self.style.cellHeight;\n                }\n                self.resizingStartingWidth = self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] || self.draggingItem.width;\n                document.body.addEventListener('mousemove', self.dragResizeColumn, false);\n                document.body.addEventListener('mouseup', self.stopDragResize, false);\n            }\n            if (['row-reorder', 'column-reorder'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragItem;\n                document.body.addEventListener('mousemove', self.dragReorder, false);\n                document.body.addEventListener('mouseup', self.stopDragReorder, false);\n            }\n        };\n        self.mouseup = function (e) {\n            clearTimeout(self.scrollTimer);\n            self.cellBoundaryCrossed = true;\n            self.selecting = undefined;\n            self.draggingItem = undefined;\n            self.dragStartObject = undefined;\n            if (self.dispatchEvent('mouseup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            if (self.currentCell && self.currentCell.grid !== undefined) {\n                return;\n            }\n            if (self.contextMenu || self.input) { return; }\n            if (self.dragStart && self.isInGrid(self.dragStart)) {\n                self.controlInput.focus();\n            }\n            e.preventDefault();\n        };\n        self.keydown = function (e) {\n            var i,\n                x = self.activeCell.columnIndex,\n                y = self.activeCell.rowIndex,\n                ctrl = (e.controlKey || e.metaKey),\n                last = self.data.length - 1,\n                cols = self.getVisibleSchema().length - 1;\n            if (self.dispatchEvent('keydown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            if (self.attributes.showNewRow) {\n                last += 1;\n            }\n            if (e.keyCode === 9) {\n                e.preventDefault();\n            }\n            // esc\n            if (e.keyCode === 27) {\n                self.selections = [];\n                self.draw(true);\n            // ctrl + a\n            } else if (ctrl && e.keyCode === 65) {\n                self.selectAll();\n            //ArrowDown\n            } else if (e.keyCode === 40) {\n                y += 1;\n            //ArrowUp\n            } else if (e.keyCode === 38) {\n                y -= 1;\n            //ArrowLeft Tab\n            } else if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {\n                x -= 1;\n            //ArrowRight Tab\n            } else if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {\n                x += 1;\n            //PageUp\n            } else if (e.keyCode === 33) {\n                y -= self.page;\n                e.preventDefault();\n            //PageDown\n            } else if (e.keyCode === 34) {\n                y += self.page;\n                e.preventDefault();\n            //Home ArrowUp\n            } else if (e.keyCode === 36 || (ctrl && e.keyCode === 38)) {\n                y = 0;\n            //End ArrowDown\n            } else if (e.keyCode === 35 || (ctrl && e.keyCode === 40)) {\n                y = self.data.length - 1;\n            //ArrowRight\n            } else if (ctrl && e.keyCode === 39) {\n                x = cols;\n            //ArrowLeft\n            } else if (ctrl && e.keyCode === 37) {\n                x = 0;\n            }\n            //Enter\n            if (e.keyCode === 13) {\n                return self.beginEditAt(x, y);\n            }\n            //Space\n            if (e.keyCode === 32) {\n                self.selections = [];\n                self.selections[Math.max(y, 0)] = [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                if (self.attributes.selectionMode === 'row') {\n                    for (i = self.selectionBounds.top; i <= self.selectionBounds.bottom; i += 1) {\n                        self.selectRow(i, ctrl, null, true);\n                    }\n                } else {\n                    self.selectArea(undefined, ctrl);\n                }\n                e.preventDefault();\n                self.draw(true);\n                return;\n            }\n            if (x < 0) {\n                x = 0;\n            }\n            if (y > last) {\n                y = last;\n            }\n            if (y < 0) {\n                y = 0;\n            }\n            if (x > cols) {\n                x = cols;\n            }\n            // Arrows\n            if (e.shiftKey && [37, 38, 39, 40].indexOf(e.keyCode) !== -1) {\n                self.selections[Math.max(y, 0)] = self.selections[Math.max(y, 0)] || [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                self.selectArea(undefined, ctrl);\n                self.draw(true);\n            }\n            if (x !== self.activeCell.columnIndex || y !== self.activeCell.rowIndex) {\n                self.scrollIntoView(x !== self.activeCell.columnIndex ? x : undefined, y !== self.activeCell.rowIndex ? y : undefined);\n                self.setActiveCell(x, y);\n                if (!e.shiftKey && self.attributes.selectionFollowsActiveCell) {\n                    if (!ctrl) {\n                        self.selections = [];\n                    }\n                    self.selections[y] = self.selections[y] || [];\n                    self.selections[y].push(x);\n                    self.dispatchEvent('selectionchanged', {\n                        selectedData: self.getSelectedData(),\n                        selections: self.selections,\n                        selectionBounds: self.selectionBounds\n                    });\n                }\n                self.draw(true);\n            }\n        };\n        self.keyup = function (e) {\n            if (self.dispatchEvent('keyup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            self.controlInput.value = '';\n        };\n        self.keypress = function (e) {\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.dispatchEvent('keypress', {NativeEvent: e, cell: self.currentCell})) { return; }\n        };\n        self.dblclick = function (e) {\n            if (self.dispatchEvent('dblclick', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'columnHeaderCell') {\n                self.fitColumnToValues(self.currentCell.header.name);\n            } else if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'cornerCell') {\n                self.autosize();\n            } else if (['cell', 'activeCell'].indexOf(self.currentCell.style) !== -1) {\n                self.beginEditAt(self.currentCell.columnIndex, self.currentCell.rowIndex);\n            }\n        };\n        self.scrollWheel = function (e) {\n            var l,\n                t,\n                deltaX = e.deltaX === undefined ? e.NativeEvent.deltaX : e.deltaX,\n                deltaY = e.deltaY === undefined ? e.NativeEvent.deltaY : e.deltaY,\n                deltaMode = e.deltaMode === undefined ? e.NativeEvent.deltaMode : e.deltaMode;\n            if (self.dispatchEvent('wheel', {NativeEvent: e})) {\n                return;\n            }\n            e = e.NativeEvent || e;\n            self.touchHaltAnimation = true;\n            l = self.scrollBox.scrollLeft;\n            t = self.scrollBox.scrollTop;\n            if (self.hasFocus) {\n                //BUG Issue 42: https://github.com/TonyGermaneri/canvas-datagrid/issues/42\n                //https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\n                if (deltaMode === 1) {\n                    // line mode = 17 pixels per line\n                    deltaY = deltaY * 17;\n                }\n                self.scrollBox.scrollTop += deltaY;\n                self.scrollBox.scrollLeft += deltaX;\n            }\n            if (t !== self.scrollBox.scrollTop || l !== self.scrollBox.scrollLeft) {\n                e.preventDefault();\n            }\n        };\n        self.copy = function (e) {\n            if (self.dispatchEvent('copy', {NativeEvent: e})) { return; }\n            if (!self.hasFocus || !e.clipboardData) { return; }\n            var rows = [], sData = self.getSelectedData();\n            if (sData.length > 0) {\n                sData.forEach(function (row) {\n                    if (row) {\n                        var r = [];\n                        Object.keys(row).forEach(function (key) {\n                            if (row[key] !== null\n                                    && row[key] !== false\n                                    && row[key] !== undefined\n                                    && row[key].replace) {\n                                return r.push('\"' + row[key].replace(/\"/g, '\"\"') + '\"');\n                            }\n                            r.push(row[key]);\n                        });\n                        r.join(',');\n                        rows.push(r);\n                    }\n                });\n                e.clipboardData.setData('text/plain', rows.join('\\n'));\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/events.js\n// module id = 2\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.orders = {\n            rows: [],\n            columns: []\n        };\n        self.hasFocus = false;\n        self.activeCell = {\n            columnIndex: 0,\n            rowIndex: 0\n        };\n        self.storageName = 'canvasDataGrid';\n        self.invalidSearchExpClass = 'canvas-datagrid-invalid-search-regExp';\n        self.localStyleLibraryStorageKey = 'canvas-datagrid-user-style-library';\n        self.uniqueId = '_canvasDataGridUniqueId';\n        self.orderBy = self.uniqueId;\n        self.orderDirection = 'asc';\n        self.columnFilters = {};\n        self.filters = {};\n        self.ellipsisCache = {};\n        self.scrollBox = {};\n        self.visibleRows = [];\n        /**\n         * Used internally to keep track of sizes of row, columns and child grids.\n         * @memberof canvasDataGrid\n         * @property sizes\n         * @readonly\n         */\n        self.sizes = {\n            rows: {},\n            columns: {},\n            trees: {}\n        };\n        self.currentFilter = function () {\n            return true;\n        };\n        self.selections = [];\n        self.hovers = {};\n        self.attributes = {};\n        self.style = {};\n        self.intf = {};\n        self.formatters = {};\n        self.sorters = {};\n        self.schemaHashes = {};\n        self.events = {};\n        self.uId = 0;\n        self.changes = [];\n        self.scrollIndexTop = 0;\n        self.scrollPixelTop = 0;\n        self.scrollIndexLeft = 0;\n        self.scrollPixelLeft = 0;\n        self.childGrids = {};\n        self.openChildren = {};\n        self.scrollModes = [\n            'vertical-scroll-box',\n            'vertical-scroll-top',\n            'vertical-scroll-bottom',\n            'horizontal-scroll-box',\n            'horizontal-scroll-right',\n            'horizontal-scroll-left'\n        ];\n        self.mouse = { x: 0, y: 0};\n        self.getSelectedData = function (expandToRow) {\n            var d = [], s = self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                if (expandToRow) {\n                    s.forEach(function (column) {\n                        d[index][column.name] = self.data[index][column.name];\n                    });\n                } else {\n                    row.forEach(function (col) {\n                        if (col === -1 || !s[col]) { return; }\n                        d[index][s[col].name] = self.data[index][s[col].name];\n                    });\n                }\n            });\n            return d;\n        };\n        self.scrollOffset = function (e) {\n            var x = 0, y = 0;\n            while (e.parentNode) {\n                if (e.nodeType !== 'canvas-datagrid-tree'\n                        && e.nodeType !== 'canvas-datagrid-cell') {\n                    x -= e.scrollLeft;\n                    y -= e.scrollTop;\n                }\n                e = e.parentNode;\n            }\n            return {left: x, top: y};\n        };\n        self.position = function (e, ignoreScrollOffset) {\n            var x = 0, y = 0, s = e, h, w;\n            while (e.offsetParent) {\n                x += e.offsetLeft;\n                y += e.offsetTop;\n                h = e.offsetHeight;\n                w = e.offsetWidth;\n                e = e.offsetParent;\n            }\n            if (ignoreScrollOffset) {\n                return {left: x, top: y, height: h, width: w};\n            }\n            e = s;\n            s = self.scrollOffset(e);\n            return { left: x + s.left, top: y + s.top, height: h, width: w };\n        };\n        self.getLayerPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.clientX - rect.left,\n                    y: e.clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        self.fillArray = function (low, high, step) {\n            step = step || 1;\n            var i = [], x;\n            for (x = low; x <= high; x += step) {\n                i[x] = x;\n            }\n            return i;\n        };\n        self.getRowHeaderCellHeight = function () {\n            if (!self.attributes.showColumnHeaders) { return 0; }\n            return self.sizes.rows[-1] || self.style.columnHeaderCellHeight;\n        };\n        self.getColumnHeaderCellWidth = function () {\n            if (!self.attributes.showRowHeaders) { return 0; }\n            return self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth;\n        };\n        self.setStorageData = function () {\n            if (!self.attributes.saveAppearance) { return; }\n            localStorage.setItem(self.storageName + '-' + self.attributes.name, JSON.stringify({\n                sizes: {\n                    rows: self.sizes.rows,\n                    columns: self.sizes.columns\n                },\n                orders: {\n                    rows: self.orders.rows,\n                    columns: self.orders.columns\n                },\n                orderBy: self.orderBy,\n                orderDirection: self.orderDirection\n            }));\n        };\n        self.getSchema = function () {\n            return self.schema || self.tempSchema;\n        };\n        self.createColumnOrders = function () {\n            var s = self.getSchema();\n            self.orders.columns = self.fillArray(0, s.length - 1);\n        };\n        self.createRowOrders = function () {\n            self.orders.rows = self.fillArray(0, self.data.length - 1);\n        };\n        self.getVisibleSchema = function () {\n            return self.getSchema().filter(function (col) { return !col.hidden; });\n        };\n        self.applyDefaultValue = function (row, header) {\n            var d = header.defaultValue || '';\n            if (typeof d === 'function') {\n                d = d.apply(self.intf, [header]);\n            }\n            row[header.name] = d;\n        };\n        self.createNewRowData = function () {\n            self.newRow = {};\n            self.newRow[self.uniqueId] = self.uId;\n            self.uId += 1;\n            self.getSchema().forEach(function forEachHeader(header) {\n                self.applyDefaultValue(self.newRow, header);\n            });\n        };\n        self.getSchemaNameHash = function (key) {\n            var n = 0;\n            while (self.schemaHashes[key]) {\n                n += 1;\n                key = key + n;\n            }\n            return key;\n        };\n        self.filter = function (type) {\n            var f = self.filters[type];\n            if (!f && type !== undefined) {\n                console.warn('Cannot find filter for type %s, falling back to substring match.', type);\n                f = self.filters.string;\n            }\n            return f;\n        };\n        self.getBestGuessDataType = function (columnName) {\n            var t, x, l = self.data.length;\n            for (x = 0; x < l; x += 1) {\n                if ([null, undefined].indexOf(self.data[x][columnName]) !== -1) {\n                    t = typeof self.data[x];\n                    return t === 'object' ? 'string' : t;\n                }\n            }\n            return 'string';\n        };\n        self.drawChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].draw();\n            });\n        };\n        self.resizeChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].resize();\n            });\n        };\n        self.getClippingRect = function (ele) {\n            var boundingRect = self.position(self.parentNode),\n                eleRect = self.position(ele),\n                s = self.scrollOffset(self.canvas),\n                clipRect = {\n                    x: 0,\n                    y: 0,\n                    h: 0,\n                    w: 0\n                },\n                parentRect = {\n                    x: -Infinity,\n                    y: -Infinity,\n                    h: Infinity,\n                    w: Infinity\n                },\n                rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth();\n            boundingRect.top -= s.top;\n            boundingRect.left -= s.left;\n            eleRect.top -= s.top;\n            eleRect.left -= s.left;\n            clipRect.h = boundingRect.top + boundingRect.height - ele.offsetTop - self.style.scrollBarWidth;\n            clipRect.w = boundingRect.left + boundingRect.width - ele.offsetLeft - self.style.scrollBarWidth;\n            clipRect.x = boundingRect.left + (eleRect.left * -1) + columnHeaderCellWidth;\n            clipRect.y = boundingRect.top + (eleRect.top * -1) + rowHeaderCellHeight;\n            return {\n                x: clipRect.x > parentRect.x ? clipRect.x : parentRect.x,\n                y: clipRect.y > parentRect.y ? clipRect.y : parentRect.y,\n                h: clipRect.h < parentRect.h ? clipRect.h : parentRect.h,\n                w: clipRect.w < parentRect.w ? clipRect.w : parentRect.w\n            };\n        };\n        self.clipElement = function (ele) {\n            var clipRect = self.getClippingRect(ele);\n            if (clipRect.w < 0) { clipRect.w = 0; }\n            if (clipRect.h < 0) { clipRect.h = 0; }\n            ele.style.clip = 'rect('\n                + clipRect.y + 'px,'\n                + clipRect.w + 'px,'\n                + clipRect.h + 'px,'\n                + clipRect.x + 'px'\n                + ')';\n            // INFO https://developer.mozilla.org/en-US/docs/Web/CSS/clip\n            // clip has been \"deprecated\" for clipPath.  Of course nothing but chrome\n            // supports clip path, so we'll keep using clip until someday clipPath becomes\n            // more widely support.  The code below works correctly, but setting clipPath and clip\n            // at the same time has undesirable results.\n            // ele.style.clipPath = 'polygon('\n            //     + clipRect.x + 'px ' + clipRect.y + 'px,'\n            //     + clipRect.x + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.y + 'px'\n            //     + ')';\n        };\n        self.autoScrollZone = function (e, x, y, ctrl) {\n            var setTimer,\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth(),\n                rowHeaderCellHeight = self.getRowHeaderCellHeight();\n            if (x > self.width - self.attributes.selectionScrollZone && x < self.width) {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y > self.height - self.attributes.selectionScrollZone && y < self.height) {\n                self.scrollBox.scrollTop += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (x - self.attributes.selectionScrollZone - columnHeaderCellWidth < 0) {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y - self.attributes.selectionScrollZone - rowHeaderCellHeight < 0) {\n                self.scrollBox.scrollTop -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (setTimer && !ctrl && self.currentCell && self.currentCell.columnIndex !== -1) {\n                self.scrollTimer = setTimeout(self.mousemove, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.refreshFromOrigialData = function () {\n            self.data = self.originalData.filter(function (row) {\n                return true;\n            });\n        };\n        self.validateColumn = function (c, s) {\n            if (!c.name) {\n                throw new Error('A column must contain at least a name.');\n            }\n            if (s.filter(function (i) { return i.name === c.name; }).length > 0) {\n                throw new Error('A column with the name '\n                    + c.name + ' already exists and cannot be added again.');\n            }\n            return true;\n        };\n        self.setDefaults = function (obj1, obj2, key, def) {\n            obj1[key] = obj2[key] === undefined ? def : obj2[key];\n        };\n        self.setAttributes = function () {\n            self.defaults.attributes.forEach(function eachAttribute(i) {\n                self.setDefaults(self.attributes, self.args, i[0], i[1]);\n            });\n        };\n        self.setStyle = function () {\n            self.defaults.styles.forEach(function eachStyle(i) {\n                self.setDefaults(self.style, self.args.style || {}, i[0], i[1]);\n            });\n        };\n        self.autosize = function (colName) {\n            self.getVisibleSchema().forEach(function (col) {\n                if (col.name === colName || colName === undefined) {\n                    self.fitColumnToValues(col.name);\n                }\n            });\n            self.fitColumnToValues('cornerCell');\n        };\n        self.dispose = function () {\n            if (!self.isChildGrid && self.canvas && self.canvas.parentNode) {\n                self.canvas.parentNode.removeChild(self.canvas);\n            }\n            self.eventParent.removeEventListener('mouseup', self.mouseup, false);\n            self.eventParent.removeEventListener('mousedown', self.mousedown, false);\n            self.eventParent.removeEventListener('dblclick', self.dblclick, false);\n            self.eventParent.removeEventListener('click', self.click, false);\n            self.eventParent.removeEventListener('mousemove', self.mousemove);\n            self.eventParent.removeEventListener('wheel', self.scrollWheel, false);\n            self.canvas.removeEventListener('contextmenu', self.contextmenu, false);\n            self.canvas.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('keypress', self.keypress, false);\n            self.controlInput.removeEventListener('keyup', self.keyup, false);\n            self.controlInput.removeEventListener('keydown', self.keydown, false);\n            window.removeEventListener('resize', self.resize);\n            if (self.observer && self.observer.disconnect) {\n                self.observer.disconnect();\n            }\n        };\n        self.tryLoadStoredOrders = function () {\n            var s;\n            if (self.storedSettings && typeof self.storedSettings.orders === 'object') {\n                if (self.storedSettings.orders.rows.length >= self.data.length) {\n                    self.orders.rows = self.storedSettings.orders.rows;\n                }\n                s = self.getSchema();\n                if (self.storedSettings.orders.columns.length === s.length) {\n                    self.orders.columns = self.storedSettings.orders.columns;\n                }\n                self.orderBy = self.storedSettings.orderBy === undefined\n                    ? self.uniqueId : self.storedSettings.orderBy;\n                self.orderDirection = self.storedSettings.orderDirection === undefined\n                    ? self.uniqueId : self.storedSettings.orderDirection;\n                if (self.getHeaderByName(self.orderBy) && self.orderDirection) {\n                    self.order(self.orderBy, self.orderDirection);\n                }\n            }\n        };\n        self.getFontHeight = function (fontStyle) {\n            return parseFloat(fontStyle, 10);\n        };\n        self.parseFont = function (key) {\n            if (/Font/.test(key)) {\n                self.style[key + 'Height'] = self.getFontHeight(self.style[key]);\n            }\n        };\n        self.initProp = function (propName) {\n            if (!self.args[propName]) { return; }\n            Object.keys(self.args[propName]).forEach(function (key) {\n                self[propName][key] = self.args[propName][key];\n            });\n        };\n        self.init = function () {\n            var publicStyleKeyIntf = {};\n            self.setAttributes();\n            self.setStyle();\n            self.initScrollBox();\n            self.setDom();\n            self.type = 'canvas-datagrid';\n            Object.keys(self.style).forEach(self.parseFont);\n            self.intf.type = self.type;\n            self.intf.addEventListener = self.addEventListener;\n            self.intf.removeEventListener = self.removeEventListener;\n            self.intf.dispatchEvent = self.dispatchEvent;\n            self.intf.dispose = self.dispose;\n            self.intf.appendTo = self.appendTo;\n            self.intf.filters = self.filters;\n            self.intf.sorters = self.sorters;\n            self.intf.autosize = self.autosize;\n            self.intf.beginEditAt = self.beginEditAt;\n            self.intf.endEdit = self.endEdit;\n            self.intf.setActiveCell = self.setActiveCell;\n            self.intf.scrollIntoView = self.scrollIntoView;\n            self.intf.clearChangeLog = self.clearChangeLog;\n            self.intf.gotoCell = self.gotoCell;\n            self.intf.gotoRow = self.gotoRow;\n            self.intf.findColumnScrollLeft = self.findColumnScrollLeft;\n            self.intf.findRowScrollTop = self.findRowScrollTop;\n            self.intf.fitColumnToValues = self.fitColumnToValues;\n            self.intf.findColumnMaxTextLength = self.findColumnMaxTextLength;\n            self.intf.disposeContextMenu = self.disposeContextMenu;\n            self.intf.getCellAt = self.getCellAt;\n            self.intf.isCellVisible = self.isCellVisible;\n            self.intf.order = self.order;\n            self.intf.draw = self.draw;\n            self.intf.selectArea = self.selectArea;\n            self.intf.clipElement = self.clipElement;\n            self.intf.getSchemaFromData = self.getSchemaFromData;\n            self.intf.setFilter = self.setFilter;\n            self.intf.selectRow = self.selectRow;\n            self.intf.parentGrid = self.parentGrid;\n            self.intf.toggleTree = self.toggleTree;\n            self.intf.expandTree = self.expandTree;\n            self.intf.collapseTree = self.collapseTree;\n            self.intf.canvas = self.canvas;\n            self.intf.context = self.ctx;\n            self.intf.insertRow = self.insertRow;\n            self.intf.deleteRow = self.deleteRow;\n            self.intf.addRow = self.addRow;\n            self.intf.insertColumn = self.insertColumn;\n            self.intf.deleteColumn = self.deleteColumn;\n            self.intf.addColumn = self.addColumn;\n            self.intf.getClippingRect = self.getClippingRect;\n            self.intf.setRowHeight = self.setRowHeight;\n            self.intf.setColumnWidth = self.setColumnWidth;\n            self.intf.resetColumnWidths = self.resetColumnWidths;\n            self.intf.resetRowHeights = self.resetRowHeights;\n            self.intf.resize = self.resize;\n            self.intf.selectColumn = self.selectColumn;\n            self.intf.selectRow = self.selectRow;\n            self.intf.selectAll = self.selectAll;\n            self.intf.drawChildGrids = self.drawChildGrids;\n            self.intf.assertPxColor = self.assertPxColor;\n            self.intf.clearPxColorAssertions = self.clearPxColorAssertions;\n            self.intf.integerToAlpha = self.integerToAlpha;\n            self.intf.copy = self.copy;\n            self.intf.style = {};\n            Object.keys(self.style).forEach(function (key) {\n                // unless this line is here, Object.keys() will not work on <instance>.style\n                publicStyleKeyIntf[key] = undefined;\n                Object.defineProperty(publicStyleKeyIntf, key, {\n                    get: function () {\n                        return self.style[key];\n                    },\n                    set: function (value) {\n                        self.parseFont(value);\n                        self.style[key] = value;\n                        self.draw(true);\n                        self.dispatchEvent('stylechanged', {name: key, value: value});\n                    }\n                });\n            });\n            Object.defineProperty(self.intf, 'activeCell', {\n                get: function () {\n                    return self.activeCell;\n                }\n            });\n            /**\n             * When true, the grid is has focus.\n             * @memberof canvasDataGrid\n             * @property hasFocus\n             * @readonly\n             */\n            Object.defineProperty(self.intf, 'hasFocus', {\n                get: function () {\n                    return self.hasFocus;\n                }\n            });\n            Object.defineProperty(self.intf, 'style', {\n                get: function () {\n                    return publicStyleKeyIntf;\n                },\n                set: function (value) {\n                    Object.keys(value).forEach(function (key) {\n                        self.parseFont(value);\n                        self.style[key] = value[key];\n                    });\n                    self.draw(true);\n                    self.dispatchEvent('stylechanged', {name: 'style', value: value});\n                }\n            });\n            Object.keys(self.attributes).forEach(function (key) {\n                Object.defineProperty(self.intf.attributes, key, {\n                    get: function () {\n                        return self.attributes[key];\n                    },\n                    set: function (value) {\n                        self.attributes[key] = value;\n                        self.draw(true);\n                        self.dispatchEvent('attributechanged', {name: key, value: value[key]});\n                    }\n                });\n            });\n            self.filters.string = function (value, filterFor) {\n                var filterRegExp,\n                    regEnd = /\\/(i|g|m)*$/,\n                    pattern = regEnd.exec(filterFor),\n                    flags = pattern ? pattern[0].substring(1) : '',\n                    flagLength = flags.length;\n                self.invalidFilterRegEx = undefined;\n                if (filterFor.substring(0, 1) === '/' && pattern) {\n                    try {\n                        filterRegExp = new RegExp(filterFor.substring(1, filterFor.length - (flagLength + 1)), flags);\n                    } catch (e) {\n                        self.invalidFilterRegEx = e;\n                        return;\n                    }\n                    return filterRegExp.test(value);\n                }\n                return value.toString ? value.toString().toLocaleUpperCase()\n                    .indexOf(filterFor.toLocaleUpperCase()) !== -1 : false;\n            };\n            self.filters.number = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                return value === filterFor;\n            };\n            if (self.attributes.name && self.attributes.saveAppearance) {\n                self.storedSettings = localStorage.getItem(self.storageName + '-' + self.attributes.name);\n                if (self.storedSettings) {\n                    try {\n                        self.storedSettings = JSON.parse(self.storedSettings);\n                    } catch (e) {\n                        console.warn('could not read settings from localStore', e);\n                        self.storedSettings = undefined;\n                    }\n                }\n                if (self.storedSettings) {\n                    if (typeof self.storedSettings.sizes === 'object') {\n                        self.sizes.rows = self.storedSettings.sizes.rows;\n                        self.sizes.columns = self.storedSettings.sizes.columns;\n                        ['trees', 'columns', 'rows'].forEach(function (i) {\n                            if (!self.sizes[i]) {\n                                self.sizes[i] = {};\n                            }\n                        });\n                    }\n                }\n            }\n            ['formatters', 'filters', 'sorters'].forEach(self.initProp);\n            if (self.args.data) {\n                self.intf.data = self.args.data;\n            }\n            if (!self.data) {\n                self.intf.data = [];\n            }\n            if (self.args.schema) {\n                self.intf.schema = self.args.schema;\n            }\n            if (self.isChildGrid) {\n                requestAnimationFrame(function () { self.resize(true); });\n            } else {\n                self.resize(true);\n            }\n        };\n        /**\n         * Removes focus from the grid.\n         * @memberof canvasDataGrid\n         * @name blur\n         * @method\n         */\n        self.intf.blur = function (e) {\n            self.hasFocus = false;\n        };\n        /**\n         * Focuses on the grid.\n         * @memberof canvasDataGrid\n         * @name focus\n         * @method\n         */\n        self.intf.focus = function () {\n            self.hasFocus = true;\n            self.controlInput.focus();\n        };\n        Object.defineProperty(self.intf, 'height', {\n            get: function () {\n                return self.parentNode.height;\n            },\n            set: function (value) {\n                self.parentNode.height = value;\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'width', {\n            get: function () {\n                return self.parentNode.width;\n            },\n            set: function (value) {\n                self.parentNode.width = value;\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'openChildren', {\n            get: function () {\n                return self.openChildren;\n            }\n        });\n        Object.defineProperty(self.intf, 'childGrids', {\n            get: function () {\n                return Object.keys(self.childGrids).map(function (gridId) {\n                    return self.childGrids[gridId];\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'isChildGrid', {\n            get: function () {\n                return self.isChildGrid;\n            }\n        });\n        Object.defineProperty(self.intf, 'parentNode', {\n            get: function () {\n                return self.parentNode;\n            },\n            set: function (value) {\n                self.parentNode = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetParent', {\n            get: function () {\n                return self.parentNode;\n            },\n            set: function (value) {\n                self.parentNode = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetLeft', {\n            get: function () {\n                return self.parentNode.offsetLeft;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetTop', {\n            get: function () {\n                return self.parentNode.offsetTop;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollHeight', {\n            get: function () {\n                return self.scrollBox.scrollHeight;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollWidth', {\n            get: function () {\n                return self.scrollBox.scrollWidth;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollTop', {\n            get: function () {\n                return self.scrollBox.scrollTop;\n            },\n            set: function (value) {\n                self.scrollBox.scrollTop = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollLeft', {\n            get: function () {\n                return self.scrollBox.scrollLeft;\n            },\n            set: function (value) {\n                self.scrollBox.scrollLeft = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'sizes', {\n            get: function () {\n                return self.sizes;\n            }\n        });\n        Object.defineProperty(self.intf, 'input', {\n            get: function () {\n                return self.input;\n            }\n        });\n        Object.defineProperty(self.intf, 'controlInput', {\n            get: function () {\n                return self.controlInput;\n            }\n        });\n        Object.defineProperty(self.intf, 'currentCell', {\n            get: function () {\n                return self.currentCell;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleCells', {\n            get: function () {\n                return self.visibleCells;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRows', {\n            get: function () {\n                return self.visibleRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'selections', {\n            get: function () {\n                return self.selections;\n            }\n        });\n        Object.defineProperty(self.intf, 'dragMode', {\n            get: function () {\n                return self.dragMode;\n            }\n        });\n        Object.defineProperty(self.intf, 'changes', {\n            get: function () {\n                return self.changes;\n            }\n        });\n        self.intf.attributes = {};\n        self.intf.formatters = self.formatters;\n        self.normalizeDataset = function (data, callback) {\n            var i, d, max, syncFnInvoked;\n            if (data === null || data === '' || data === undefined) {\n                return callback([]);\n            }\n            if (typeof data === 'string'\n                    || typeof data === 'number'\n                    || typeof data === 'boolean') {\n                data = [{'0': data}];\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if ((!Array.isArray(data[0]) && typeof data[0] === 'object' && data[0] !== null)\n                            || (Array.isArray(data) && data.length === 0)) {\n                return callback(data);\n            }\n            if (typeof data === 'function') {\n                i = data.apply(self.intf, [function (d) {\n                    if (syncFnInvoked) {\n                        console.warn('Detected a callback to the data setter function after the same function already returned a value synchronously.');\n                    }\n                    self.normalizeDataset(d, callback);\n                }]);\n                if (i) {\n                    syncFnInvoked = true;\n                    self.normalizeDataset(i, callback);\n                }\n                return;\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if (Array.isArray(data)) {\n                if (!Array.isArray(data[0])) {\n                    //array of something?  throw it all into 1 row!\n                    data = [data];\n                }\n                // find the longest length\n                max = 0;\n                d = [];\n                data.forEach(function (row) {\n                    max = Math.max(max, row.length);\n                });\n                // map against length indexes\n                data.forEach(function (row, index) {\n                    var x;\n                    d[index] = {};\n                    for (x = 0; x < max; x += 1) {\n                        d[index][x] = row[x];\n                    }\n                });\n                return callback(d);\n            }\n            throw new Error('Unsupported data type.  Must be an array of arrays or an array of objects, function or string.');\n        };\n        Object.defineProperty(self.intf, 'selectionBounds', {\n            get: function () {\n                return self.getSelectionBounds();\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedRows', {\n            get: function () {\n                return self.getSelectedData(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedCells', {\n            get: function () {\n                return self.getSelectedData();\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleSchema', {\n            get: function () {\n                return self.getVisibleSchema().map(function eachDataRow(col) {\n                    return col;\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'ctx', {\n            get: function () {\n                return self.ctx;\n            }\n        });\n        Object.defineProperty(self.intf, 'schema', {\n            get: function schemaGetter() {\n                return self.getSchema();\n            },\n            set: function schemaSetter(value) {\n                if (!Array.isArray(value) || typeof value[0] !== 'object') {\n                    throw new Error('Schema must be an array of objects.');\n                }\n                if (value[0].name === undefined) {\n                    throw new Error('Expected schema to contain an object with at least a name property.');\n                }\n                self.schema = value.map(function eachSchemaColumn(column, index) {\n                    column.width = column.width || self.style.columnWidth;\n                    column[self.uniqueId] = self.getSchemaNameHash(column.name);\n                    column.filter = column.filter || self.filter(column.type);\n                    column.type = column.type || 'string';\n                    column.index = index;\n                    column.columnIndex = index;\n                    column.rowIndex = -1;\n                    return column;\n                });\n                self.tempSchema = undefined;\n                self.createNewRowData();\n                self.createColumnOrders();\n                self.tryLoadStoredOrders();\n                self.resize(true);\n                self.dispatchEvent('schemachanged', {schema: self.schema});\n            }\n        });\n        Object.defineProperty(self.intf, 'data', {\n            get: function dataGetter() {\n                return self.data.map(function (row) {\n                    delete row[self.uniqueId];\n                    return row;\n                });\n            },\n            set: function dataSetter(value) {\n                self.normalizeDataset(value, function (d) {\n                    self.originalData = d.map(function eachDataRow(row) {\n                        row[self.uniqueId] = self.uId;\n                        self.uId += 1;\n                        return row;\n                    });\n                    self.changes = [];\n                    //TODO apply filter to incoming dataset\n                    self.data = self.originalData;\n                    if (!self.schema) {\n                        self.tempSchema = self.getSchemaFromData();\n                    }\n                    if (!self.schema && self.data.length === 0) {\n                        self.tempSchema = [{name: ''}];\n                        self.tempSchema[0][self.uniqueId] = self.getSchemaNameHash('');\n                    }\n                    if (self.tempSchema && !self.schema) {\n                        self.createColumnOrders();\n                        self.tryLoadStoredOrders();\n                        self.dispatchEvent('schemachanged', {schema: self.tempSchema});\n                    }\n                    self.createNewRowData();\n                    if (self.attributes.autoResizeColumns && self.data.length > 0\n                            && self.storedSettings === undefined) {\n                        self.autosize();\n                    }\n                    self.fitColumnToValues('cornerCell', true);\n                    if (!self.resize() || !self.isChildGrid) { self.draw(true); }\n                    self.createRowOrders();\n                    self.tryLoadStoredOrders();\n                    self.dispatchEvent('datachanged', {data: self.data});\n                });\n            }\n        });\n        self.initScrollBox = function () {\n            var sHeight = 0,\n                sWidth = 0,\n                scrollTop = 0,\n                scrollLeft = 0,\n                scrollHeight = 0,\n                scrollWidth = 0,\n                scrollBoxHeight = 20,\n                scrollBoxWidth = 20;\n            function setScrollTop(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollTop value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollHeight) {\n                    value = scrollHeight;\n                }\n                if (scrollHeight < 0) {\n                    value = 0;\n                }\n                scrollTop = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            function setScrollLeft(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollLeft value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollWidth) {\n                    value = scrollWidth;\n                }\n                if (scrollWidth < 0) {\n                    value = 0;\n                }\n                scrollLeft = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            self.scrollBox.toString = function () {\n                return '{\"width\": ' + scrollWidth\n                    + ', \"height\": ' + scrollHeight\n                    + ', \"left\": ' + scrollLeft\n                    + ', \"top\": ' + scrollTop + '}';\n            };\n            self.scrollBox.scrollTo = function (x, y) {\n                setScrollLeft(x, true);\n                setScrollTop(y);\n            };\n            Object.defineProperty(self.scrollBox, 'scrollBoxHeight', {\n                get: function () {\n                    return scrollBoxHeight;\n                },\n                set: function (value) {\n                    scrollBoxHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollBoxWidth', {\n                get: function () {\n                    return scrollBoxWidth;\n                },\n                set: function (value) {\n                    scrollBoxWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'height', {\n                get: function () {\n                    return sHeight;\n                },\n                set: function (value) {\n                    if (scrollHeight < value) {\n                        scrollTop = 0;\n                    }\n                    sHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'width', {\n                get: function () {\n                    return sWidth;\n                },\n                set: function (value) {\n                    sWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollTop', {\n                get: function () {\n                    return scrollTop;\n                },\n                set: setScrollTop\n            });\n            Object.defineProperty(self.scrollBox, 'scrollLeft', {\n                get: function () {\n                    return scrollLeft;\n                },\n                set: setScrollLeft\n            });\n            Object.defineProperty(self.scrollBox, 'scrollHeight', {\n                get: function () {\n                    return scrollHeight;\n                },\n                set: function (value) {\n                    if (scrollTop > value) {\n                        scrollTop = Math.max(value, 0);\n                    }\n                    if (scrollHeight < sHeight) {\n                        scrollTop = 0;\n                    }\n                    scrollHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollWidth', {\n                get: function () {\n                    return scrollWidth;\n                },\n                set: function (value) {\n                    if (scrollLeft > value) {\n                        scrollLeft = Math.max(value, 0);\n                    }\n                    scrollWidth = value;\n                }\n            });\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/intf.js\n// module id = 3\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false, Event: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var zIndexTop = 2, hoverScrollTimeout, autoCompleteContext;\n        function createContextMenu(ev, pos, items, parentContextMenu) {\n            var container = document.createElement('div'),\n                upArrow = document.createElement('div'),\n                downArrow = document.createElement('div'),\n                children = [],\n                selectedIndex = -1,\n                intf = {},\n                rect;\n            if (!Array.isArray(items)) { throw new Error('createContextMenu expects an array.'); }\n            function createItems() {\n                items.forEach(function (item) {\n                    var contextItemContainer = document.createElement('div'),\n                        childMenuArrow;\n                    function removeChildContext(e) {\n                        if (e.relatedTarget === container\n                                || item.contextMenu.container === e.relatedTarget\n                                || childMenuArrow === e.relatedTarget\n                                || (contextItemContainer === e.relatedTarget)\n                                ) { return; }\n                        item.contextMenu.dispose();\n                        children.splice(children.indexOf(item.contextMenu), 1);\n                        item.contextMenu = undefined;\n                        contextItemContainer.removeEventListener('mouseout', removeChildContext);\n                        container.removeEventListener('mouseout', removeChildContext);\n                        contextItemContainer.setAttribute('contextOpen', '0');\n                        contextItemContainer.setAttribute('opening', '0');\n                    }\n                    function contextAddCallback(items) {\n                        // check yet again if the user hasn't moved off\n                        if (contextItemContainer.getAttribute('opening') !== '1' ||\n                                contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        var cPos = contextItemContainer.getBoundingClientRect();\n                        cPos = {\n                            left: cPos.left + self.style.childContextMenuMarginLeft + container.offsetWidth,\n                            top: cPos.top + self.style.childContextMenuMarginTop,\n                            bottom: cPos.bottom,\n                            right: cPos.right,\n                        };\n                        item.contextMenu = createContextMenu(ev, cPos, items, intf);\n                        contextItemContainer.setAttribute('contextOpen', '1');\n                        contextItemContainer.addEventListener('mouseout', removeChildContext);\n                        container.addEventListener('mouseout', removeChildContext);\n                        children.push(item.contextMenu);\n                    }\n                    function createChildContext() {\n                        var i;\n                        if (contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        contextItemContainer.setAttribute('opening', '1');\n                        if (typeof item.items === 'function') {\n                            i  = item.items.apply(intf, [function (items) {\n                                contextAddCallback(items);\n                            }]);\n                            if (i !== undefined && Array.isArray(i)) {\n                                contextAddCallback(i);\n                            }\n                            return;\n                        }\n                        contextAddCallback(item.items);\n                    }\n                    function addItem(item) {\n                        function addContent(content) {\n                            if (typeof content === 'function') {\n                                return addContent(content(ev));\n                            }\n                            if (typeof content === 'object') {\n                                contextItemContainer.appendChild(content);\n                                return;\n                            }\n                            self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n                            contextItemContainer.addEventListener('mouseover', function () {\n                                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                            });\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n                            });\n                            contextItemContainer.innerHTML = content;\n                            return;\n                        }\n                        addContent(item.title);\n                        item.contextItemContainer = contextItemContainer;\n                        if ((item.items && item.items.length > 0) || typeof item.items === 'function') {\n                            childMenuArrow = document.createElement('div');\n                            self.createInlineStyle(childMenuArrow, 'canvas-datagrid-context-child-arrow');\n                            childMenuArrow.innerHTML = self.style.childContextMenuArrowHTML;\n                            contextItemContainer.appendChild(childMenuArrow);\n                            contextItemContainer.addEventListener('mouseover', createChildContext);\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                contextItemContainer.setAttribute('opening', '0');\n                            });\n                        }\n                        if (item.click) {\n                            contextItemContainer.addEventListener('click', function (ev) {\n                                item.click.apply(self, [ev]);\n                            });\n                        }\n                    }\n                    addItem(item);\n                    container.appendChild(contextItemContainer);\n                });\n            }\n            function clickIndex(idx) {\n                items[idx].contextItemContainer.dispatchEvent(new Event('click'));\n            }\n            function checkArrowVisibility() {\n                if (container.scrollTop > 0) {\n                    document.body.appendChild(upArrow);\n                } else if (upArrow.parentNode) {\n                    upArrow.parentNode.removeChild(upArrow);\n                }\n                if (container.scrollTop >= container.scrollHeight - container.offsetHeight && downArrow.parentNode) {\n                    downArrow.parentNode.removeChild(downArrow);\n                } else if (container.scrollHeight - container.offsetHeight > 0\n                        && !(container.scrollTop >= container.scrollHeight - container.offsetHeight)) {\n                    document.body.appendChild(downArrow);\n                }\n            }\n            function startHoverScroll(type) {\n                return function t() {\n                    var a = self.attributes.contextHoverScrollAmount;\n                    if (type === 'up' && container.scrollTop === 0) { return; }\n                    if (type === 'down' && container.scrollTop === container.scrollHeight) { return; }\n                    container.scrollTop += (type === 'up' ? -a : a);\n                    hoverScrollTimeout = setTimeout(t, self.attributes.contextHoverScrollRateMs, type);\n                };\n            }\n            function endHoverScroll(type) {\n                return function () {\n                    clearTimeout(hoverScrollTimeout);\n                };\n            }\n            function init() {\n                var loc = {},\n                    s = self.scrollOffset(self.canvas);\n                createItems();\n                self.createInlineStyle(container, 'canvas-datagrid-context-menu');\n                loc.x = pos.left - s.left;\n                loc.y = pos.top - s.top;\n                loc.height = 0;\n                zIndexTop += 1;\n                container.style.position = 'absolute';\n                upArrow.style.color = self.style.contextMenuArrowColor;\n                downArrow.style.color = self.style.contextMenuArrowColor;\n                [upArrow, downArrow].forEach(function (el) {\n                    el.style.textAlign = 'center';\n                    el.style.position = 'absolute';\n                    el.style.zIndex = zIndexTop + 1;\n                });\n                container.style.zIndex = zIndexTop;\n                if (parentContextMenu && parentContextMenu.inputDropdown) {\n                    container.style.maxHeight = window.innerHeight - loc.y - self.style.autocompleteBottomMargin + 'px';\n                    container.style.minWidth = pos.width + 'px';\n                    loc.y += pos.height;\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                container.addEventListener('scroll', checkArrowVisibility);\n                container.addEventListener('wheel', function (e) {\n                    if (self.hasFocus) {\n                        container.scrollTop += e.deltaY;\n                        container.scrollLeft += e.deltaX;\n                    }\n                    checkArrowVisibility();\n                });\n                upArrow.innerHTML = self.style.contextMenuArrowUpHTML;\n                downArrow.innerHTML = self.style.contextMenuArrowDownHTML;\n                container.appendChild(upArrow);\n                document.body.appendChild(downArrow);\n                document.body.appendChild(container);\n                rect = container.getBoundingClientRect();\n                if (rect.bottom > window.innerHeight && !(parentContextMenu && parentContextMenu.inputDropdown)) {\n                    loc.y = window.innerHeight - container.offsetHeight;\n                    if (loc.y < 0) { loc.y = 0; }\n                    if (container.offsetHeight > window.innerHeight) {\n                        container.style.height = window.innerHeight - self.style.contextMenuWindowMargin + 'px';\n                    }\n                }\n                if (rect.right > window.innerWidth) {\n                    if (parentContextMenu) {\n                        loc.x = parentContextMenu.container.offsetLeft - container.offsetWidth;\n                    } else {\n                        loc.x = window.innerWidth - container.offsetWidth;\n                    }\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                rect = container.getBoundingClientRect();\n                upArrow.style.top = rect.top + 'px';\n                downArrow.style.top = rect.top + rect.height - downArrow.offsetHeight + 'px';\n                upArrow.style.left = rect.left + 'px';\n                downArrow.style.left = rect.left + 'px';\n                downArrow.style.width = container.offsetWidth + 'px';\n                upArrow.style.width = container.offsetWidth + 'px';\n                downArrow.addEventListener('mouseover', startHoverScroll('down'));\n                downArrow.addEventListener('mouseout', endHoverScroll('down'));\n                upArrow.addEventListener('mouseover', startHoverScroll('up'));\n                upArrow.addEventListener('mouseout', endHoverScroll('up'));\n                checkArrowVisibility();\n            }\n            intf.parentGrid = self.intf;\n            intf.parentContextMenu = parentContextMenu;\n            intf.container = container;\n            init();\n            intf.clickIndex = clickIndex;\n            intf.rect = rect;\n            intf.items = items;\n            intf.upArrow = upArrow;\n            intf.downArrow = downArrow;\n            intf.dispose = function () {\n                clearTimeout(hoverScrollTimeout);\n                children.forEach(function (c) {\n                    c.dispose();\n                });\n                [downArrow, upArrow, container].forEach(function (el) {\n                    if (el.parentNode) { el.parentNode.removeChild(el); }\n                });\n            };\n            Object.defineProperty(intf, 'selectedIndex', {\n                get: function () {\n                    return selectedIndex;\n                },\n                set: function (value) {\n                    if (typeof value !== 'number' || isNaN(value || !isFinite(value))) {\n                        throw new Error('Context menu selected index must be a sane number.');\n                    }\n                    selectedIndex = value;\n                    if (selectedIndex > items.length - 1) {\n                        selectedIndex = items.length - 1;\n                    }\n                    if (selectedIndex < 0) {\n                        selectedIndex = 0;\n                    }\n                    items.forEach(function (item, index) {\n                        if (index === selectedIndex) {\n                            return self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                        }\n                        self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item');\n                    });\n                }\n            });\n            return intf;\n        }\n        function createFilterContextMenuItems(e) {\n            var filterContainer = document.createElement('div'),\n                filterLabel = document.createElement('div'),\n                filterAutoCompleteButton = document.createElement('button'),\n                filterInput = document.createElement('input'),\n                n = e.cell && e.cell.header ? e.cell.header.title || e.cell.header.name : '',\n                autoCompleteItems,\n                iRect;\n            function checkRegExpErrorState() {\n                filterInput.style.background = self.style.contextFilterInputBackground;\n                filterInput.style.color = self.style.contextFilterInputColor;\n                if (self.invalidFilterRegEx) {\n                    filterInput.style.background = self.style.contextFilterInvalidRegExpBackground;\n                    filterInput.style.color = self.style.contextFilterInvalidRegExpColor;\n                }\n            }\n            function fillAutoComplete() {\n                autoCompleteItems = {};\n                self.data.filter(function (d, i) { return i < self.attributes.maxAutoCompleteItems; }).forEach(function (row) {\n                    var value = row[e.cell.header.name];\n                    if (autoCompleteItems[value]) { return; }\n                    autoCompleteItems[value] = {\n                        title: self.formatters[e.cell.header.type || 'string']({ cell: { value: value }}),\n                        click: function (e) {\n                            filterInput.value = value;\n                            e.stopPropagation();\n                            filterInput.dispatchEvent(new Event('keyup'));\n                            self.disposeAutocomplete();\n                            return;\n                        }\n                    };\n                });\n                autoCompleteItems = Object.keys(autoCompleteItems).map(function (key) {\n                    return autoCompleteItems[key];\n                });\n            }\n            function createAutoCompleteContext(ev) {\n                if (ev && [40, 38, 13, 9, 27].indexOf(ev.keyCode) !== -1) { return; }\n                fillAutoComplete();\n                iRect = filterInput.getBoundingClientRect();\n                if (autoCompleteContext) {\n                    autoCompleteContext.dispose();\n                    autoCompleteContext = undefined;\n                }\n                autoCompleteContext = createContextMenu(e, {\n                    left: iRect.left,\n                    top: iRect.top,\n                    right: iRect.right,\n                    bottom: iRect.bottom,\n                    height: iRect.height,\n                    width: iRect.width\n                }, autoCompleteItems, {inputDropdown: true});\n                autoCompleteContext.selectedIndex = 0;\n            }\n            self.createInlineStyle(filterLabel, 'canvas-datagrid-context-menu-label');\n            self.createInlineStyle(filterAutoCompleteButton, 'canvas-datagrid-context-menu-filter-button');\n            self.createInlineStyle(filterInput, 'canvas-datagrid-context-menu-filter-input');\n            checkRegExpErrorState();\n            filterInput.onclick = self.disposeAutocomplete;\n            filterInput.addEventListener('keydown', function (e) {\n                //down\n                if (e.keyCode === 40) {\n                    autoCompleteContext.selectedIndex += 1;\n                }\n                //up\n                if (e.keyCode === 38) {\n                    autoCompleteContext.selectedIndex -= 1;\n                }\n                //enter\n                if (e.keyCode === 13) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    self.disposeContextMenu();\n                }\n                //tab\n                if (e.keyCode === 9) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    e.preventDefault();\n                }\n                //esc\n                if (e.keyCode === 27) {\n                    self.disposeContextMenu();\n                }\n            });\n            filterInput.addEventListener('keyup', function () {\n                self.setFilter(e.cell.header.name, filterInput.value);\n            });\n            filterInput.addEventListener('keyup', createAutoCompleteContext);\n            ['focus', 'blur', 'keydown', 'keyup', 'change'].forEach(function (en) {\n                filterInput.addEventListener(en, checkRegExpErrorState);\n            });\n            filterInput.value = e.cell.header ? self.columnFilters[e.cell.header.name] || '' : '';\n            filterLabel.innerHTML = self.attributes.filterOptionText.replace(/%s/g, n);\n            filterAutoCompleteButton.onclick = function () {\n                if (autoCompleteContext) {\n                    return self.disposeAutocomplete();\n                }\n                createAutoCompleteContext();\n            };\n            filterAutoCompleteButton.innerHTML = self.style.contextFilterButtonHTML;\n            filterContainer.addEventListener('click', function (e) {\n                return e.stopPropagation();\n            });\n            filterContainer.appendChild(filterLabel);\n            filterContainer.appendChild(filterInput);\n            filterContainer.appendChild(filterAutoCompleteButton);\n            e.items.push({\n                title: filterContainer\n            });\n            if (Object.keys(self.columnFilters).length) {\n                Object.keys(self.columnFilters).forEach(function (cf) {\n                    var h = self.getHeaderByName(cf);\n                    e.items.push({\n                        title: self.attributes.removeFilterOptionText.replace(/%s/g, h.title || h.name),\n                        click: function removeFilterClick(e) {\n                            e.preventDefault();\n                            self.setFilter(cf, '');\n                            self.controlInput.focus();\n                        }\n                    });\n                });\n            }\n        }\n        function addDefaultContextMenuItem(e) {\n            var isNormalCell = !(e.cell.isBackground || e.cell.isHeaderCellCap\n                    || e.cell.isScrollBar || e.cell.isCorner || e.cell.isRowHeader)\n                    && e.cell.header;\n            if (self.attributes.showFilter && isNormalCell) {\n                createFilterContextMenuItems(e);\n            }\n            if (self.attributes.showCopy\n                    && self.selections.reduce(function (p, r) {\n                        return p + r.length;\n                    }, 0) > 0) {\n                e.items.push({\n                    title: self.attributes.copyText,\n                    click: function () {\n                        document.execCommand('copy');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.saveAppearance && self.attributes.showClearSettingsOption\n                    && (Object.keys(self.sizes.rows).length > 0\n                        || Object.keys(self.sizes.columns).length > 0)) {\n                e.items.push({\n                    title: self.attributes.clearSettingsOptionText,\n                    click: function (e) {\n                        e.preventDefault();\n                        self.sizes.rows = {};\n                        self.sizes.columns = {};\n                        self.createRowOrders();\n                        self.createColumnOrders();\n                        self.storedSettings = undefined;\n                        self.dispatchEvent('resizecolumn', {columnWidth: self.style.columnWidth});\n                        self.dispatchEvent('resizerow', {cellHeight: self.style.cellHeight});\n                        self.setStorageData();\n                        self.resize(true);\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.allowSorting && self.attributes.showOrderByOption && isNormalCell) {\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextAsc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'asc');\n                        self.controlInput.focus();\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextDesc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'desc');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n        }\n        self.disposeAutocomplete = function () {\n            if (autoCompleteContext) {\n                autoCompleteContext.dispose();\n                autoCompleteContext = undefined;\n            }\n        };\n        self.disposeContextMenu = function () {\n            document.removeEventListener('click', self.disposeContextMenu);\n            zIndexTop = 2;\n            self.disposeAutocomplete();\n            if (self.contextMenu) {\n                self.contextMenu.dispose();\n            }\n            self.contextMenu = undefined;\n        };\n        self.contextmenuEvent = function (e, overridePos) {\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            function createDiposeEvent() {\n                requestAnimationFrame(function () {\n                    document.addEventListener('click', self.disposeContextMenu);\n                    document.removeEventListener('mouseup', createDiposeEvent);\n                });\n            }\n            var items = [],\n                pos = overridePos || self.getLayerPos(e, true),\n                ev = {\n                    NativeEvent: e,\n                    cell: self.getCellAt(pos.x, pos.y),\n                    items: items\n                };\n            if (!ev.cell.isGrid) {\n                addDefaultContextMenuItem(ev);\n            }\n            if (self.dispatchEvent('contextmenu', ev)) {\n                return;\n            }\n            if (!ev.cell.isGrid) {\n                if (self.contextMenu) {\n                    self.disposeContextMenu();\n                }\n                self.contextMenu = createContextMenu(ev, {\n                    left: pos.x + pos.rect.left + self.style.contextMenuMarginLeft + self.canvasOffsetLeft,\n                    top: pos.y + pos.rect.top + self.style.contextMenuMarginTop + self.canvasOffsetTop,\n                    right: ev.cell.width + ev.cell.x + pos.rect.left,\n                    bottom: ev.cell.height + ev.cell.y + pos.rect.top,\n                    height: ev.cell.height,\n                    width: ev.cell.width\n                }, items);\n                document.addEventListener('mouseup', createDiposeEvent);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/contextMenu.js\n// module id = 4\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.defaults = {\n            attributes: [\n                ['name', ''],\n                ['tree', false],\n                ['showNewRow', false],\n                ['treeHorizontalScroll', false],\n                ['saveAppearance', true],\n                ['selectionFollowsActiveCell', false],\n                ['multiLine', false],\n                ['editable', true],\n                ['allowColumnReordering', true],\n                ['allowRowReordering', false],\n                ['allowSorting', true],\n                ['showFilter', true],\n                ['globalRowResize', false],\n                ['pageUpDownOverlap', 1],\n                ['persistantSelectionMode', false],\n                ['rowSelectionMode', false],\n                ['selectionMode', 'cell'],\n                ['autoResizeColumns', false],\n                ['allowRowHeaderResize', true],\n                ['allowColumnResize', true],\n                ['allowRowResize', true],\n                ['allowRowResizeFromCell', false],\n                ['allowColumnResizeFromCell', false],\n                ['debug', false],\n                ['borderResizeZone', 10],\n                ['showColumnHeaders', true],\n                ['showRowNumbers', true],\n                ['showRowHeaders', true],\n                ['scrollRepeatRate', 75],\n                ['selectionScrollZone', 20],\n                ['resizeScrollZone', 20],\n                ['contextHoverScrollRateMs', 5],\n                ['contextHoverScrollAmount', 2],\n                ['selectionScrollIncrement', 20],\n                ['reorderDeadZone', 3],\n                ['showClearSettingsOption', true],\n                ['showOrderByOption', true],\n                ['clearSettingsOptionText', 'Clear saved settings'],\n                ['showOrderByOptionTextAsc', 'Order by %s ascending'],\n                ['showOrderByOptionTextDesc', 'Order by %s descending'],\n                ['removeFilterOptionText', 'Remove filter on %s'],\n                ['filterOptionText', 'Filter %s'],\n                ['filterTextPrefix', '(filtered) '],\n                ['touchReleaseAnimationDurationMs', 2000],\n                ['touchReleaseAcceleration', 90],\n                ['touchDeadZone', 3],\n                ['touchSelectTimeMs', 800],\n                ['touchScrollZone', 30],\n                ['copyText', 'Copy'],\n                ['showCopy', true],\n                ['columnHeaderClickBehavior', 'sort'],\n                ['scrollPointerLock', false],\n                ['maxAutoCompleteItems', 200]\n            ],\n            styles: [\n                ['activeCellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['activeCellBorderWidth', 0.25],\n                ['activeCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellFont', '16px sans-serif'],\n                ['activeCellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['activeCellOverlayBorderWidth', 0.5],\n                ['activeCellPaddingBottom', 5],\n                ['activeCellPaddingLeft', 5],\n                ['activeCellPaddingRight', 7],\n                ['activeCellPaddingTop', 5],\n                ['activeCellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['activeCellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['activeColumnHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeColumnHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeRowHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeRowHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['autocompleteBottomMargin', 60],\n                ['autosizeHeaderCellPadding', 8],\n                ['autosizePadding', 5],\n                ['backgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cellAutoResizePadding', 13],\n                ['cellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['cellBorderWidth', 0.5],\n                ['cellColor', 'rgba(0, 0, 0, 1)'],\n                ['cellFont', '16px sans-serif'],\n                ['cellGridHeight', 250],\n                ['cellHeight', 25],\n                ['cellHeightWithChildGrid', 150],\n                ['cellHorizontalAlignment', 'left'],\n                ['cellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['cellPaddingBottom', 5],\n                ['cellPaddingLeft', 5],\n                ['cellPaddingRight', 7],\n                ['cellPaddingTop', 5],\n                ['cellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['cellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['cellVerticalAlignment', 'center'],\n                ['cellWidthWithChildGrid', 250],\n                ['childContextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['childContextMenuArrowHTML', '&#x25BA;'],\n                ['childContextMenuMarginLeft', -15],\n                ['childContextMenuMarginTop', 0],\n                ['columnHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellBorderColor', 'rgba(152, 152, 152, 1)'],\n                ['columnHeaderCellBorderWidth', 0.25],\n                ['columnHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['columnHeaderCellFont', '16px sans-serif'],\n                ['columnHeaderCellHeight', 25],\n                ['columnHeaderCellHorizontalAlignment', 'left'],\n                ['columnHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['columnHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['columnHeaderCellPaddingBottom', 5],\n                ['columnHeaderCellPaddingLeft', 5],\n                ['columnHeaderCellPaddingRight', 7],\n                ['columnHeaderCellPaddingTop', 5],\n                ['columnHeaderCellVerticalAlignment', 'center'],\n                ['columnWidth', 250],\n                ['contextFilterButtonBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterButtonBorderRadius', '3px'],\n                ['contextFilterButtonHTML', '&#x25BC;'],\n                ['contextFilterInputBackground', 'rgba(255,255,255,1)'],\n                ['contextFilterInputBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterInputBorderRadius', '0'],\n                ['contextFilterInputColor', 'rgba(0,0,0,1)'],\n                ['contextFilterInputFontFamily', 'sans-serif'],\n                ['contextFilterInputFontSize', '14px'],\n                ['contextFilterInvalidRegExpBackground', 'rgba(180, 6, 1, 1)'],\n                ['contextFilterInvalidRegExpColor', 'rgba(255, 255, 255, 1)'],\n                ['contextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuArrowDownHTML', '&#x25BC;'],\n                ['contextMenuArrowUpHTML', '&#x25B2;'],\n                ['contextMenuBackground', 'rgba(240, 240, 240, 1)'],\n                ['contextMenuBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextMenuBorderRadius', '3px'],\n                ['contextMenuChildArrowFontSize', '12px'],\n                ['contextMenuColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuFilterButtonFontFamily', 'sans-serif'],\n                ['contextMenuFilterButtonFontSize', '10px'],\n                ['contextMenuFilterInvalidExpresion', 'rgba(237, 155, 156, 1)'],\n                ['contextMenuFontFamily', 'sans-serif'],\n                ['contextMenuFontSize', '16px'],\n                ['contextMenuHoverBackground', 'rgba(182, 205, 250, 1)'],\n                ['contextMenuHoverColor', 'rgba(43, 48, 153, 1)'],\n                ['contextMenuItemBorderRadius', '3px'],\n                ['contextMenuItemMargin', '2px'],\n                ['contextMenuLabelDisplay', 'inline-block'],\n                ['contextMenuLabelMargin', '0 3px 0 0'],\n                ['contextMenuLabelMaxWidth', '700px'],\n                ['contextMenuLabelMinWidth', '75px'],\n                ['contextMenuMarginLeft', 3],\n                ['contextMenuMarginTop', -3],\n                ['contextMenuOpacity', '0.98'],\n                ['contextMenuPadding', '2px'],\n                ['contextMenuWindowMargin', 6],\n                ['cornerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cornerCellBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['editCellBackgroundColor', 'white'],\n                ['editCellBorder', 'solid 1px rgba(110, 168, 255, 1)'],\n                ['editCellBoxShadow', '0 2px 5px rgba(0,0,0,0.4)'],\n                ['editCellColor', 'black'],\n                ['editCellFontFamily', 'sans-serif'],\n                ['editCellFontSize', '16px'],\n                ['editCellPaddingLeft', 4],\n                ['gridBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['gridBorderWidth', 1],\n                ['columnHeaderOrderByArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['columnHeaderOrderByArrowBorderWidth', 1],\n                ['columnHeaderOrderByArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['columnHeaderOrderByArrowHeight', 8],\n                ['columnHeaderOrderByArrowMarginLeft', 0],\n                ['columnHeaderOrderByArrowMarginRight', 5],\n                ['columnHeaderOrderByArrowMarginTop', 6],\n                ['columnHeaderOrderByArrowWidth', 13],\n                ['minColumnWidth', 45],\n                ['minHeight', 24],\n                ['minRowHeight', 24],\n                ['name', 'default'],\n                ['reorderMarkerBackgroundColor', 'rgba(0, 0, 0, 0.1)'],\n                ['reorderMarkerBorderColor', 'rgba(0, 0, 0, 0.2)'],\n                ['reorderMarkerBorderWidth', 1.25],\n                ['reorderMarkerIndexBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['reorderMarkerIndexBorderWidth', 2.75],\n                ['rowHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['rowHeaderCellBorderColor', 'rgba(200, 200, 200, 1)'],\n                ['rowHeaderCellBorderWidth', 1],\n                ['rowHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellFont', '16px sans-serif'],\n                ['rowHeaderCellHeight', 25],\n                ['rowHeaderCellHorizontalAlignment', 'left'],\n                ['rowHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['rowHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['rowHeaderCellPaddingBottom', 5],\n                ['rowHeaderCellPaddingLeft', 5],\n                ['rowHeaderCellPaddingRight', 5],\n                ['rowHeaderCellPaddingTop', 5],\n                ['rowHeaderCellSelectedBackgroundColor', 'rgba(217, 217, 217, 1)'],\n                ['rowHeaderCellSelectedColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellVerticalAlignment', 'center'],\n                ['rowHeaderCellWidth', 57],\n                ['scrollBarActiveColor', 'rgba(125, 125, 125, 1)'],\n                ['scrollBarBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarBorderWidth', 0.5],\n                ['scrollBarBoxBorderRadius', 4.125],\n                ['scrollBarBoxColor', 'rgba(192, 192, 192, 1)'],\n                ['scrollBarBoxMargin', 2],\n                ['scrollBarBoxMinSize', 15],\n                ['scrollBarBoxWidth', 8],\n                ['scrollBarCornerBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarCornerBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarWidth', 11],\n                ['selectionOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionOverlayBorderWidth', 0.75],\n                ['treeArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['treeArrowBorderWidth', 1],\n                ['treeArrowClickRadius', 5],\n                ['treeArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['treeArrowHeight', 8],\n                ['treeArrowMarginLeft', 0],\n                ['treeArrowMarginRight', 5],\n                ['treeArrowMarginTop', 6],\n                ['treeArrowWidth', 13],\n                ['treeGridHeight', 250]\n            ]\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/defaults.js\n// module id = 5\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        /**\n         * Ends editing, optionally aborting the edit.\n         * @memberof canvasDataGrid\n         * @name endEdit\n         * @method\n         * @param {boolean} abort When true, abort the edit.\n         */\n        self.endEdit = function (abort) {\n            var cell = self.input.editCell,\n                y = cell.rowIndex;\n            function abortEdit() {\n                abort = true;\n            }\n            if (self.dispatchEvent('beforeendedit', {\n                    cell: cell,\n                    newValue: self.input.value,\n                    oldValue: cell.value,\n                    abort: abortEdit,\n                    input: self.input\n                })) { return false; }\n            if (self.input.value !== cell.value && !abort) {\n                self.changes[y] = self.changes[y] || {};\n                self.changes[y][cell.header.name] = self.input.value;\n                cell.data[cell.header.name] = self.input.value;\n                if (y === self.data.length) {\n                    if (self.dispatchEvent('newrow', {\n                            value: self.input.value,\n                            defaultValue: cell.value,\n                            aborted: abort,\n                            cell: cell,\n                            input: self.input\n                        })) { return false; }\n                    self.uId += 1;\n                    self.addRow(cell.data);\n                    self.createNewRowData();\n                }\n                self.draw(true);\n            }\n            document.body.removeChild(self.input);\n            self.controlInput.focus();\n            self.dispatchEvent('endedit', {\n                cell: cell,\n                value: self.input.value,\n                aborted: abort,\n                input: self.input\n            });\n            self.input = undefined;\n            return true;\n        };\n        /**\n         * Begins editing at cell x, row y.\n         * @memberof canvasDataGrid\n         * @name beginEditAt\n         * @method\n         * @param {number} x The column index of the cell to edit.\n         * @param {number} y The row index of the cell to edit.\n         */\n        self.beginEditAt = function (x, y) {\n            if (!self.attributes.editable) { return; }\n            var cell = self.getVisibleCellByIndex(x, y),\n                s = self.getVisibleSchema(),\n                enumItems;\n            if (self.dispatchEvent('beforebeginedit', {cell: cell})) { return false; }\n            self.scrollIntoView(x, y);\n            self.setActiveCell(x, y);\n            if (cell.header.enum) {\n                self.input = document.createElement('select');\n            } else {\n                self.input = document.createElement(self.attributes.multiLine\n                    ? 'textarea' : 'input');\n            }\n            function postDraw() {\n                var option, valueInEnum;\n                cell = self.getVisibleCellByIndex(x, y);\n                if (cell.header.enum) {\n                    // add enums\n                    if (typeof cell.header.enum === 'function') {\n                        enumItems = cell.header.enum.apply(self.intf, [{cell: cell}]);\n                    } else if (Array.isArray(cell.header.enum)) {\n                        enumItems = cell.header.enum;\n                    }\n                    enumItems.forEach(function (e) {\n                        var i = document.createElement('option'),\n                            val,\n                            title;\n                        if (Array.isArray(e)) {\n                            val = e[0];\n                            title = e[1];\n                        } else {\n                            val = e;\n                            title = e;\n                        }\n                        if (val === cell.value) { valueInEnum = true; }\n                        i.value = val;\n                        i.innerHTML = title;\n                        self.input.appendChild(i);\n                    });\n                    if (!valueInEnum) {\n                        option = document.createElement('option');\n                        option.value = cell.value;\n                        option.innerHTML = cell.value;\n                        self.input.appendChild(option);\n                    }\n                    self.input.addEventListener('change', function () {\n                        self.endEdit();\n                        self.draw(true);\n                    });\n                }\n                document.body.appendChild(self.input);\n                self.createInlineStyle(self.input, 'canvas-datagrid-edit-input');\n                self.input.style.position = 'absolute';\n                self.input.editCell = cell;\n                self.resizeEditInput();\n                self.input.style.zIndex = '2';\n                self.input.value = cell.value;\n                self.input.focus();\n                self.input.addEventListener('click', self.stopPropagation);\n                self.input.addEventListener('dblclick', self.stopPropagation);\n                self.input.addEventListener('mouseup', self.stopPropagation);\n                self.input.addEventListener('mousedown', self.stopPropagation);\n                self.input.addEventListener('keydown', function (e) {\n                    var nx = cell.columnIndex,\n                        ny = cell.rowIndex;\n                    // esc\n                    if (e.keyCode === 27) {\n                        self.endEdit(true);\n                        self.draw(true);\n                    // enter\n                    } else if (e.keyCode === 13\n                            && (!self.attributes.multiLine\n                                || (self.attributes.multiLine && e.shiftKey))) {\n                        self.endEdit();\n                        self.draw(true);\n                    } else if (e.keyCode === 9) {\n                        e.preventDefault();\n                        if (!self.endEdit()) {\n                            return;\n                        }\n                        if (e.shiftKey) {\n                            nx -= 1;\n                        } else {\n                            nx += 1;\n                        }\n                        if (nx < 0) {\n                            nx = s.length - 1;\n                            ny -= 1;\n                        }\n                        if (nx > s.length - 1) {\n                            nx = 0;\n                            ny += 1;\n                        }\n                        if (ny < 0) {\n                            ny = self.data.length - 1;\n                        }\n                        if (ny > self.data.length - 1) {\n                            ny = 0;\n                        }\n                        self.scrollIntoView(nx, ny);\n                        self.beginEditAt(nx, ny);\n                    }\n                });\n            }\n            postDraw();\n            self.dispatchEvent('beginedit', {cell: cell, input: self.input});\n        };\n        self.createInlineStyle = function (el, className) {\n            var css = {\n                'canvas-datagrid-context-menu-filter-input': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextFilterInputBackground,\n                    color: self.style.contextFilterInputColor,\n                    border: self.style.contextFilterInputBorder,\n                    borderRadius: self.style.contextFilterInputBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextFilterInputFontFamily,\n                    fontSize: self.style.contextFilterInputFontSize\n                },\n                'canvas-datagrid-context-menu-filter-button': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextFilterButtonBorder,\n                    borderRadius: self.style.contextFilterButtonBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFilterButtonFontFamily,\n                    fontSize: self.style.contextMenuFilterButtonFontSize\n                },\n                'canvas-datagrid-context-child-arrow': {\n                    cssFloat: 'right',\n                    color: self.style.childContextMenuArrowColor,\n                    fontSize: self.style.contextMenuChildArrowFontSize,\n                    fontFamily: self.style.contextMenuFontFamily,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-autocomplete': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    position: 'absolute',\n                    zIndex: 3,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-autocomplete-item': {\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor\n                },\n                'canvas-datagrid-autocomplete-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-canvas': {\n                    position: 'absolute',\n                    zIndex: '-1'\n                },\n                'canvas-datagrid': {\n                    position: 'absolute',\n                    background: self.style.backgroundColor,\n                    zIndex: '1',\n                    boxSizing: 'content-box',\n                    padding: '0'\n                },\n                'canvas-datagrid-control-input': {\n                    position: 'fixed',\n                    top: '-5px',\n                    left: '-5px',\n                    border: 'none',\n                    opacity: '0',\n                    cursor: 'pointer',\n                    width: '1px',\n                    height: '1px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize\n                },\n                'canvas-datagrid-edit-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 ' + self.style.editCellPaddingLeft + 'px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.editCellFontFamily,\n                    fontSize: self.style.editCellFontSize,\n                    boxShadow: self.style.editCellBoxShadow,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-context-menu-item': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-context-menu-label': {\n                    margin: self.style.contextMenuLabelMargin,\n                    display: self.style.contextMenuLabelDisplay,\n                    minWidth: self.style.contextMenuLabelMinWidth,\n                    maxWidth: self.style.contextMenuLabelMaxWidth\n                },\n                'canvas-datagrid-context-menu': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-invalid-search-regExp': {\n                    background: self.style.contextMenuFilterInvalidExpresion\n                }\n            };\n            if (css[className]) {\n                Object.keys(css[className]).map(function (prop) {\n                    el.style[prop] = css[className][prop];\n                });\n            }\n            return;\n        };\n        self.appendTo = function (n) {\n            self.parentNode = n || document.createElement('canvas');\n            self.height = self.parentNode;\n            self.width = self.parentNode;\n            if (self.parentNode && /canvas-datagrid-(cell|tree)/.test(self.parentNode.nodeType)) {\n                self.isChildGrid = true;\n                self.parentGrid = self.parentNode.parentGrid;\n                self.ctx = self.parentGrid.context;\n                self.canvas = self.parentGrid.canvas;\n                self.controlInput = self.parentGrid.controlInput;\n                self.eventParent = self.canvas;\n                self.intf.offsetParent = self.parentNode;\n            } else {\n                self.controlInput = document.createElement('input');\n                self.controlInput.onblur = self.intf.blur;\n                self.createInlineStyle(self.controlInput, 'canvas-datagrid-control-input');\n                self.isChildGrid = false;\n                self.parentDOMNode = self.parentNode;\n                self.parentNode = self.parentDOMNode;\n                self.parentIsCanvas = /canvas/i.test(self.parentDOMNode.tagName);\n                if (self.parentIsCanvas) {\n                    self.canvas = self.parentDOMNode;\n                } else {\n                    self.canvas = document.createElement('canvas');\n                    self.parentDOMNode.appendChild(self.canvas);\n                }\n                self.ctx = self.canvas.getContext('2d');\n                self.ctx.textBaseline = 'alphabetic';\n                document.body.appendChild(self.controlInput);\n                self.eventParent = self.canvas;\n            }\n            self.controlInput.addEventListener('blur', function (e) {\n                if (e.target !== self.canvas) {\n                    self.hasFocus = false;\n                }\n            });\n            window.addEventListener('resize', self.resize);\n            if (MutationObserver) {\n                self.observer = new MutationObserver(function (mutations) {\n                    mutations.forEach(function (mutation) {\n                        self.resize(true);\n                    });\n                });\n                [self.canvas.parentNode].forEach(function (el) {\n                    if (!el) { return; }\n                    self.observer.observe(el, { attributes: true });\n                });\n            }\n            self.eventParent.addEventListener('scroll', self.resize, false);\n            self.eventParent.addEventListener('touchstart', self.touchstart, false);\n            self.eventParent.addEventListener('mouseup', self.mouseup, false);\n            self.eventParent.addEventListener('mousedown', self.mousedown, false);\n            self.eventParent.addEventListener('dblclick', self.dblclick, false);\n            self.eventParent.addEventListener('click', self.click, false);\n            self.eventParent.addEventListener('mousemove', self.mousemove);\n            self.eventParent.addEventListener('wheel', self.scrollWheel, false);\n            self.canvas.addEventListener('contextmenu', self.contextmenuEvent, false);\n            (self.isChildGrid ? self.parentGrid : document).addEventListener('copy', self.copy);\n            self.controlInput.addEventListener('keypress', self.keypress, false);\n            self.controlInput.addEventListener('keyup', self.keyup, false);\n            self.controlInput.addEventListener('keydown', self.keydown, false);\n        };\n        self.setDom = function () {\n            self.appendTo(self.args.parentNode);\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/dom.js\n// module id = 6\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        // all methods here are exposed by intf\n        // to users\n        /**\n         * Converts a integer into a letter A - ZZZZZ...\n         * @memberof canvasDataGrid\n         * @name integerToAlpha\n         * @method\n         * @param {column} n The number to convert.\n         */\n        self.integerToAlpha = function (n) {\n            var ordA = 'a'.charCodeAt(0),\n                ordZ = 'z'.charCodeAt(0),\n                len = ordZ - ordA + 1,\n                s = '';\n            while (n >= 0) {\n                s = String.fromCharCode(n % len + ordA) + s;\n                n = Math.floor(n / len) - 1;\n            }\n            return s;\n        };\n        /**\n         * Inserts a new column before the specified index into the schema.\n         * @see canvasDataGrid#schema\n         * @tutorial schema\n         * @memberof canvasDataGrid\n         * @name insertColumn\n         * @method\n         * @param {column} c The column to insert into the schema.\n         * @param {number} index The index of the column to insert before.\n         */\n        self.insertColumn = function (c, index) {\n            var s = self.getSchema();\n            if (s.length < index) {\n                throw new Error('Index is beyond the length of the schema.');\n            }\n            self.validateColumn(c, s);\n            s.splice(index, 0, c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a column from the schema at the specified index.\n         * @memberof canvasDataGrid\n         * @name deleteColumn\n         * @tutorial schema\n         * @method\n         * @param {number} index The index of the column to delete.\n         */\n        self.deleteColumn = function (index) {\n            var s = self.getSchema();\n            // remove data matching this column name from data\n            self.data.forEach(function (row) {\n                delete row[s[index].name];\n            });\n            s.splice(index, 1);\n            self.intf.schema = s;\n        };\n        /**\n         * Adds a new column into the schema.\n         * @see canvasDataGrid#schema\n         * @tutorial schema\n         * @memberof canvasDataGrid\n         * @name addColumn\n         * @method\n         * @param {column} c The column to add to the schema.\n         */\n        self.addColumn = function (c) {\n            var s = self.getSchema();\n            self.validateColumn(c, s);\n            s.push(c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a row from the dataset at the specified index.\n         * @memberof canvasDataGrid\n         * @name deleteRow\n         * @method\n         * @param {number} index The index of the row to delete.\n         */\n        self.deleteRow = function (index) {\n            self.originalData.splice(index, 1);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Inserts a new row into the dataset before the specified index.\n         * @memberof canvasDataGrid\n         * @name insertRow\n         * @method\n         * @param {object} d data.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertRow = function (d, index) {\n            if (self.originalData.length < index) {\n                throw new Error('Index is beyond the length of the dataset.');\n            }\n            self.originalData.splice(index, 0, d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[index], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Adds a new row into the dataset.\n         * @memberof canvasDataGrid\n         * @name addRow\n         * @method\n         * @param {object} d data.\n         */\n        self.addRow = function (d) {\n            self.originalData.push(d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[self.originalData.length - 1], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Sets the height of a given row by index number.\n         * @memberof canvasDataGrid\n         * @name setRowHeight\n         * @method\n         * @param {number} rowIndex The index of the row to set.\n         * @param {number} height Height to set the row to.\n         */\n        self.setRowHeight = function (rowIndex, height) {\n            self.sizes.rows[self.data[rowIndex][self.uniqueId]] = height;\n            self.draw(true);\n        };\n        /**\n         * Sets the width of a given column by index number.\n         * @memberof canvasDataGrid\n         * @name setColumnWidth\n         * @method\n         * @param {number} colIndex The index of the column to set.\n         * @param {number} width Width to set the column to.\n         */\n        self.setColumnWidth = function (colIndex, width) {\n            var s = self.getSchema();\n            self.sizes.columns[s[colIndex][self.uniqueId]] = width;\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the width of the columns due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDataGrid\n         * @name resetColumnWidths\n         * @tutorial schema\n         * @method\n         */\n        self.resetColumnWidths = function () {\n            self.sizes.columns = {};\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the height of the rows due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDataGrid\n         * @name resetRowHeights\n         * @tutorial schema\n         * @method\n         */\n        self.resetRowHeights = function () {\n            self.sizes.rows = {};\n            self.draw(true);\n        };\n        /**\n         * Sets the value of the filter.\n         * @memberof canvasDataGrid\n         * @name setFilter\n         * @method\n         * @param {string} column Name of the column to filter.\n         * @param {string} value The value to filter for.\n         */\n        self.setFilter = function (column, value) {\n            function applyFilter() {\n                self.refreshFromOrigialData();\n                Object.keys(self.columnFilters).forEach(function (filter) {\n                    var header = self.getHeaderByName(column);\n                    if (!header) {\n                        return;\n                    }\n                    self.currentFilter = header.filter || self.filter(column.type || 'string');\n                    self.data = self.data.filter(function (row) {\n                        return self.currentFilter(row[filter], self.columnFilters[filter]);\n                    });\n                });\n                self.resize();\n                self.draw(true);\n            }\n            if (column === undefined && value === undefined) {\n                self.columnFilters = {};\n                return applyFilter();\n            }\n            if (column && (value === '' || value === undefined)) {\n                delete self.columnFilters[column];\n            } else {\n                self.columnFilters[column] = value;\n            }\n            applyFilter();\n        };\n        /**\n         * Returns the number of pixels to scroll down to line up with row rowIndex.\n         * @memberof canvasDataGrid\n         * @name findRowScrollTop\n         * @method\n         * @param {number} rowIndex The row index of the row to scroll find.\n         */\n        self.findRowScrollTop = function (rowIndex) {\n            var top = 0, x = 0, l = self.data.length,\n                cellBorder = self.style.cellBorderWidth * 2;\n            if (!self.attributes.showNewRow) {\n                l -= 1;\n            }\n            if (rowIndex > l) {\n                throw new Error('Impossible row index');\n            }\n            while (x < rowIndex) {\n                top += (self.sizes.rows[self.data[x][self.uniqueId]] || self.style.cellHeight) + cellBorder;\n                x += 1;\n            }\n            //TODO: This is not super accurate, causes pageUp/Dn to not move around right\n            return top - (self.sizes.rows[self.data[rowIndex][self.uniqueId]] || self.style.cellHeight);\n        };\n        /**\n         * Returns the number of pixels to scroll to the left to line up with column columnIndex.\n         * @memberof canvasDataGrid\n         * @name findColumnScrollLeft\n         * @method\n         * @param {number} columnIndex The column index of the column to find.\n         */\n        self.findColumnScrollLeft = function (columnIndex) {\n            var left = 0, y = 0, s = self.getSchema(), l = s.length - 1;\n            if (columnIndex > l) {\n                throw new Error('Impossible column index');\n            }\n            while (y < columnIndex) {\n                left += self.sizes.columns[s[y][self.uniqueId]] || s[y].width;\n                y += 1;\n            }\n            return left;\n        };\n        /**\n         * Scrolls the cell at cell x, row y.\n         * @memberof canvasDataGrid\n         * @name gotoCell\n         * @method\n         * @param {number} x The column index of the cell to scroll to.\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoCell = function (x, y) {\n            if (x !== undefined) {\n                self.scrollBox.scrollLeft = self.findColumnScrollLeft(x);\n            }\n            if (y !== undefined) {\n                self.scrollBox.scrollTop = self.findRowScrollTop(y);\n            }\n        };\n        /**\n         * Scrolls the row y.\n         * @memberof canvasDataGrid\n         * @name gotoRow\n         * @method\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoRow = function (y) {\n            self.gotoCell(0, y);\n        };\n        /**\n         * Scrolls the cell at cell x, row y into view if it is not already.\n         * @memberof canvasDataGrid\n         * @name scrollIntoView\n         * @method\n         * @param {number} x The column index of the cell to scroll into view.\n         * @param {number} y The row index of the cell to scroll into view.\n         */\n        self.scrollIntoView = function (x, y) {\n            if (self.visibleCells.filter(function (cell) {\n                    return (cell.rowIndex === y || y === undefined)\n                        && (cell.columnIndex === x || x === undefined)\n                        && cell.x > 0\n                        && cell.y > 0\n                        && cell.x + cell.width < self.width\n                        && cell.y + cell.height < self.height;\n                }).length === 0) {\n                self.gotoCell(x, y);\n            }\n        };\n        /**\n         * Sets the active cell. Requires redrawing.\n         * @memberof canvasDataGrid\n         * @name setActiveCell\n         * @method\n         * @param {number} x The column index of the cell to set active.\n         * @param {number} y The row index of the cell to set active.\n         */\n        self.setActiveCell = function (x, y) {\n            self.activeCell = {\n                rowIndex: y,\n                columnIndex: x\n            };\n        };\n        /**\n         * Selects every visible cell.\n         * @memberof canvasDataGrid\n         * @name selectAll\n         * @method\n         */\n        self.selectAll = function () {\n            self.selectArea({\n                top: 0,\n                left: 0,\n                right: self.getVisibleSchema().length - 1,\n                bottom: self.data.length - 1\n            });\n        };\n        /**\n         * Returns true if the selected columnIndex is selected on every row.\n         * @memberof canvasDataGrid\n         * @name isColumnSelected\n         * @method\n         * @param {number} columnIndex The column index to check.\n         */\n        self.isColumnSelected = function (columnIndex) {\n            var colIsSelected = true;\n            self.data.forEach(function (row, rowIndex) {\n                if (!self.selections[rowIndex] || self.selections[rowIndex].indexOf(self.orders.columns[columnIndex]) === -1) {\n                    colIsSelected = false;\n                }\n            });\n            return colIsSelected;\n        };\n        /**\n         * Selects a column.\n         * @memberof canvasDataGrid\n         * @name selectColumn\n         * @method\n         * @param {number} columnIndex The column index to select.\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the column.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the column.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectColumn = function (columnIndex, ctrl, shift, supressEvent) {\n            var s, e, x;\n            function addCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) === -1) {\n                        self.selections[rowIndex].push(i);\n                    }\n                });\n            }\n            function removeCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) !== -1) {\n                        self.selections[rowIndex].splice(self.selections[rowIndex].indexOf(i), 1);\n                    }\n                });\n            }\n            if (shift) {\n                if (!self.activeCell) { return; }\n                s = Math.min(self.activeCell.columnIndex, columnIndex);\n                e = Math.max(self.activeCell.columnIndex, columnIndex);\n                for (x = s; e > x; x += 1) {\n                    addCol(x);\n                }\n            }\n            if (!ctrl && !shift) {\n                self.selections = [];\n                self.activeCell.columnIndex = columnIndex;\n                self.activeCell.rowIndex = self.scrollIndexTop;\n            }\n            if (ctrl && self.isColumnSelected(columnIndex)) {\n                removeCol(columnIndex);\n            } else {\n                addCol(columnIndex);\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.getSelectionBounds()\n            });\n        };\n        /**\n         * Selects a row.\n         * @memberof canvasDataGrid\n         * @name selectRow\n         * @method\n         * @param {number} rowIndex The row index to select.\n         * @param {boolean} ctrl When true, behaves as if you were holding control/command when you clicked the row.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the row.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectRow = function (rowIndex, ctrl, shift, supressEvent) {\n            var x, st, en, s = self.getSchema();\n            function addRow(ri) {\n                self.selections[ri] = [];\n                self.selections[ri].push(-1);\n                s.forEach(function (col) {\n                    self.selections[ri].push(col.index);\n                });\n            }\n            if (self.dragAddToSelection === false || self.dragObject === undefined) {\n                if (self.selections[rowIndex] && self.selections[rowIndex].length - 1 === s.length) {\n                    if (ctrl) {\n                        self.selections[rowIndex] = [];\n                        return;\n                    }\n                }\n            }\n            if (self.dragAddToSelection === true || self.dragObject === undefined) {\n                if (shift && self.dragObject === undefined) {\n                    if (!self.activeCell) { return; }\n                    st = Math.min(self.activeCell.rowIndex, rowIndex);\n                    en = Math.max(self.activeCell.rowIndex, rowIndex);\n                    for (x = st; en >= x; x += 1) {\n                        addRow(x);\n                    }\n                } else {\n                    addRow(rowIndex);\n                }\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Collapse a tree grid by row index.\n         * @memberof canvasDataGrid\n         * @name collapseTree\n         * @method\n         * @param {number} index The index of the row to collapse.\n         */\n        self.collapseTree = function (rowIndex) {\n            var rowId = self.data[rowIndex][self.uniqueId];\n            self.dispatchEvent('collapsetree', {\n                childGrid: self.childGrids[rowId],\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId].blur();\n            self.openChildren[rowId].dispose();\n            delete self.openChildren[rowId];\n            delete self.sizes.trees[rowId];\n            delete self.childGrids[rowId];\n            self.dispatchEvent('resizerow', {\n                cellHeight: self.style.cellHeight\n            });\n            self.resize(true);\n            self.draw(true);\n        };\n        /**\n         * Expands a tree grid by row index.\n         * @memberof canvasDataGrid\n         * @name expandTree\n         * @method\n         * @param {number} index The index of the row to expand.\n         */\n        self.expandTree = function (rowIndex) {\n            var rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth,\n                rowId = self.data[rowIndex][self.uniqueId],\n                h = self.sizes.trees[rowId] || self.style.treeGridHeight,\n                treeGrid;\n            if (!self.childGrids[rowId]) {\n                treeGrid = self.createGrid({\n                    debug: self.attributes.debug,\n                    name: self.attributes.saveAppearance\n                        ? self.attributes.name + 'tree' + rowId : undefined,\n                    parentNode: {\n                        parentGrid: self.intf,\n                        nodeType: 'canvas-datagrid-tree',\n                        offsetHeight: h,\n                        offsetWidth: self.width - columnHeaderCellWidth,\n                        header: { width: self.width - columnHeaderCellWidth },\n                        offsetLeft: columnHeaderCellWidth,\n                        offsetTop: rowHeaderCellHeight,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: 'tree',\n                        data: self.data[rowIndex]\n                    }\n                });\n                self.childGrids[rowId] = treeGrid;\n            }\n            treeGrid = self.childGrids[rowId];\n            treeGrid.visible = true;\n            self.dispatchEvent('expandtree', {\n                treeGrid: treeGrid,\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId] = treeGrid;\n            self.sizes.trees[rowId] = h;\n            self.dispatchEvent('resizerow', {height: self.style.cellHeight});\n            self.resize(true);\n        };\n        /**\n         * Toggles tree grid open and close by row index.\n         * @memberof canvasDataGrid\n         * @name toggleTree\n         * @method\n         * @param {number} index The index of the row to toggle.\n         */\n        self.toggleTree = function (rowIndex) {\n            var i = self.openChildren[self.data[rowIndex][self.uniqueId]];\n            if (i) {\n                return self.collapseTree(rowIndex);\n            }\n            self.expandTree(rowIndex);\n        };\n        /**\n         * Returns a header from the schema by name.\n         * @memberof canvasDataGrid\n         * @name getHeaderByName\n         * @tutorial schema\n         * @method\n         * @returns {header} header with the selected name, or undefined.\n         * @param {string} name The name of the column to resize.\n         */\n        self.getHeaderByName = function (name) {\n            var x, i = self.getSchema();\n            for (x = 0; x < i.length; x += 1) {\n                if (i[x].name === name) {\n                    return i[x];\n                }\n            }\n        };\n        /**\n         * Resizes a column to fit the longest value in the column. Call without a value to resize all columns.\n         * Warning, can be slow on very large record sets (1m records ~3-5 seconds on an i7).\n         * @memberof canvasDataGrid\n         * @name fitColumnToValues\n         * @method\n         * @param {string} name The name of the column to resize.\n         */\n        self.fitColumnToValues = function (name, internal) {\n            self.sizes.columns[name === 'cornerCell' ? name : self.getHeaderByName(name)[self.uniqueId]]\n                = self.findColumnMaxTextLength(name);\n            if (!internal) {\n                self.resize();\n                self.draw(true);\n            }\n        };\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDataGrid\n         * @name isCellVisible\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {cell} cell The cell to check for.  Alternatively you can pass an object { x: <x-index>, y: <y-index> }.\n         */\n        self.isCellVisible = function (cell) {\n            var x, l = self.visibleCells.length;\n            for (x = 0; x < l; x += 1) {\n                if (cell.x === self.visibleCells[x].x && cell.y === self.visibleCells[x].y) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n         * Sets the order of the data.\n         * @memberof canvasDataGrid\n         * @name order\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} columnName Number of pixels from the left.\n         * @param {string} direction `asc` for ascending or `desc` for descending.\n         * @param {function} [sortFunction] When defined, override the default sorting method defined in the column's schema and use this one.\n         * @param {bool} [dontSetStorageData] Don't store this setting for future use.\n         */\n        self.order = function (columnName, direction, sortFunction, dontSetStorageData) {\n            var f,\n                c = self.getSchema().filter(function (col) {\n                    return col.name === columnName;\n                });\n            self.orderBy = columnName;\n            if (c.length === 0) {\n                throw new Error('Cannot sort.  No such column name');\n            }\n            f = sortFunction || self.sorters[c[0].type];\n            if (!f && c[0].type !== undefined) {\n                console.warn('Cannot sort type \"%s\" falling back to string sort.', c[0].type);\n            }\n            self.data = self.data.sort(typeof f === 'function' ? f(columnName, direction) : self.sorters.string);\n            self.dispatchEvent('ordercolumn', {name: columnName, direction: direction});\n            self.draw(true);\n            if (dontSetStorageData) { return; }\n            self.setStorageData();\n        };\n        self.isInGrid = function (e) {\n            if (e.x < 0\n                    || e.x > self.width\n                    || e.y < 0\n                    || e.y > self.height) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Gets the cell at columnIndex and rowIndex.\n         * @memberof canvasDataGrid\n         * @name getVisibleCellByIndex\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Column index.\n         * @param {number} y Row index.\n         */\n        self.getVisibleCellByIndex = function (x, y) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === x && c.rowIndex === y;\n            })[0];\n        };\n        /**\n         * Gets the cell at grid pixel coordinate x and y.\n         * @memberof canvasDataGrid\n         * @name getCellAt\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Number of pixels from the left.\n         * @param {number} y Number of pixels from the top.\n         */\n        self.getCellAt = function (x, y, useTouchScrollZones) {\n            var tsz = useTouchScrollZones ? self.attributes.touchScrollZone : 0, i, l = self.visibleCells.length, cell;\n            if (!self.visibleCells || !self.visibleCells.length) { return; }\n            self.hasFocus = true;\n            if (!(y < self.height\n                && y > 0\n                && x < self.width\n                && x > 0)) {\n                self.hasFocus = false;\n                return {\n                    dragContext: 'inherit',\n                    context: 'inherit'\n                };\n            }\n            for (i = 0; i < l; i += 1) {\n                cell = self.visibleCells[i];\n                if (useTouchScrollZones && /(vertical|horizontal)-scroll-/.test(cell.style)) {\n                    cell.x -= tsz;\n                    cell.y -= tsz;\n                    cell.height += tsz;\n                    cell.width += tsz;\n                }\n                if (cell.x - self.style.cellBorderWidth < x\n                        && cell.x + cell.width + self.style.cellBorderWidth > x\n                        && cell.y - self.style.cellBorderWidth < y\n                        && cell.y + cell.height + self.style.cellBorderWidth > y) {\n                    if (/vertical-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'vertical-scroll-box';\n                        cell.context = 'vertical-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isVerticalScrollBar = true;\n                        if (y > self.scrollBox.box.v.y + self.scrollBox.scrollBoxHeight) {\n                            cell.dragContext = 'vertical-scroll-bottom';\n                            cell.context = 'vertical-scroll-bottom';\n                        } else if (y < self.scrollBox.box.v.y) {\n                            cell.dragContext = 'vertical-scroll-top';\n                            cell.context = 'vertical-scroll-top';\n                        }\n                        self.canvas.style.cursor = 'default';\n                        return cell;\n                    }\n                    if (/horizontal-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'horizontal-scroll-box';\n                        cell.context = 'horizontal-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isHorizontalScrollBar = true;\n                        if (x > self.scrollBox.box.h.x + self.scrollBox.scrollBoxWidth) {\n                            cell.dragContext = 'horizontal-scroll-right';\n                            cell.context = 'horizontal-scroll-right';\n                        } else if (x < self.scrollBox.box.h.x) {\n                            cell.dragContext = 'horizontal-scroll-left';\n                            cell.context = 'horizontal-scroll-left';\n                        }\n                        self.canvas.style.cursor = 'default';\n                        return cell;\n                    }\n                    if (cell.x + cell.width - (self.attributes.borderResizeZone * 0.4) < x\n                            && cell.x + cell.width + (self.attributes.borderResizeZone * 0.6) > x\n                            && self.attributes.allowColumnResize\n                            && ((self.attributes.allowColumnResizeFromCell && cell.style === 'cell')\n                                || cell.style !== 'cell')\n                            && ((self.attributes.allowRowHeaderResize\n                                && ['rowHeaderCell', 'cornerCell'].indexOf(cell.style) !== -1)\n                                || ['rowHeaderCell', 'cornerCell'].indexOf(cell.style) === -1)) {\n                        cell.context = 'ew-resize';\n                        cell.dragContext = 'ew-resize';\n                        return cell;\n                    }\n                    if (cell.y + cell.height - (self.attributes.borderResizeZone * 0.4) < y\n                            && cell.y + cell.height + (self.attributes.borderResizeZone * 0.6) > y\n                            && self.attributes.allowRowResize\n                            && ((self.attributes.allowRowResizeFromCell && cell.style === 'cell')\n                                || cell.style !== 'cell')\n                            && cell.style !== 'columnHeaderCell') {\n                        cell.context = 'ns-resize';\n                        cell.dragContext = 'ns-resize';\n                        return cell;\n                    }\n                    if (cell.style === 'columnHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'column-reorder';\n                        return cell;\n                    }\n                    if (cell.style === 'rowHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'row-reorder';\n                        return cell;\n                    }\n                    if (cell.isGrid) {\n                        self.hasFocus = false;\n                        cell.dragContext = 'cell-grid';\n                        cell.context = 'cell-grid';\n                        return cell;\n                    }\n                    if (cell.style === 'tree-grid') {\n                        self.hasFocus = false;\n                        cell.dragContext = 'tree';\n                        cell.context = 'tree';\n                        return cell;\n                    }\n                    cell.dragContext = 'cell';\n                    cell.context = 'cell';\n                    return cell;\n                }\n            }\n            self.hasFocus = true;\n            self.canvas.style.cursor = 'default';\n            return {\n                dragContext: 'background',\n                context: 'background',\n                style: 'background',\n                isBackground: true\n            };\n        };\n        /**\n         * Gets the bounds of current selection. \n         * @returns {rect} selection.\n         * @memberof canvasDataGrid\n         * @name getSelectionBounds\n         * @method\n         */\n        self.getSelectionBounds = function () {\n            var low = {x: Infinity, y: Infinity},\n                high = {x: -Infinity, y: -Infinity};\n            self.data.forEach(function (row, rowIndex) {\n                var maxCol, minCol;\n                if (self.selections[rowIndex] && self.selections[rowIndex].length) {\n                    low.y = rowIndex < low.y ? rowIndex : low.y;\n                    high.y = rowIndex > high.y ? rowIndex : high.y;\n                    maxCol = Math.max.apply(null, self.selections[rowIndex]);\n                    minCol = Math.min.apply(null, self.selections[rowIndex]);\n                    low.x = minCol < low.x ? minCol : low.x;\n                    high.x = maxCol > high.x ? maxCol : high.x;\n                }\n            });\n            return {\n                top: low.y,\n                left: low.x,\n                bottom: high.y,\n                right: high.x\n            };\n        };\n        /**\n         * Returns an auto generated schema based on data structure.\n         * @memberof canvasDataGrid\n         * @name getSchemaFromData\n         * @method\n         * @tutorial schema\n         * @returns {schema} schema A schema based on the first item in the data array.\n         */\n        self.getSchemaFromData = function () {\n            return Object.keys(self.data[0] || {' ': ''}).map(function mapEachSchemaColumn(key, index) {\n                var type = self.getBestGuessDataType(key),\n                    i = {\n                        name: key,\n                        title: isNaN(parseInt(key, 10)) ? key : self.integerToAlpha(key).toUpperCase(),\n                        width: self.style.columnWidth,\n                        index: index,\n                        type: type,\n                        filter: self.filter(type)\n                    };\n                if (key === self.uniqueId) {\n                    i.hidden = true;\n                }\n                i[self.uniqueId] = self.getSchemaNameHash(key);\n                return i;\n            });\n        };\n        /**\n         * Clears the change log grid.changes that keeps track of changes to the data set.\n         * This does not undo changes or alter data it is simply a convince array to keep\n         * track of changes made to the data since last this method was called.\n         * @memberof canvasDataGrid\n         * @name clearChangeLog\n         * @method\n         */\n        self.clearChangeLog = function () {\n            self.changes = [];\n        };\n        /**\n         * Selects an area of the grid.\n         * @memberof canvasDataGrid\n         * @name selectArea\n         * @method\n         * @param {rect} bounds A rect object representing the selected values.\n         */\n        self.selectArea = function (bounds, ctrl) {\n            self.selectionBounds = bounds || self.selectionBounds;\n            var x, y, s = self.getSchema();\n            if (!ctrl) {\n                self.selections = [];\n            }\n            if (self.selectionBounds.top < -1\n                    || self.selectionBounds.bottom > self.data.length\n                    || self.selectionBounds.left < -1\n                    || self.selectionBounds.right > s.length) {\n                throw new Error('Impossible selection area');\n            }\n            for (x = self.selectionBounds.top; x <= self.selectionBounds.bottom; x += 1) {\n                self.selections[x] = [];\n                for (y = self.selectionBounds.left; y <= self.selectionBounds.right; y += 1) {\n                    if (self.selections[x].indexOf(y) === -1) {\n                        self.selections[x].push(y);\n                    }\n                }\n            }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Returns the maximum text width for a given column by column name.\n         * @memberof canvasDataGrid\n         * @name findColumnMaxTextLength\n         * @method\n         * @returns {number} The number of pixels wide the maximum width value in the selected column.\n         * @param {string} name The name of the column to calculate the value's width of.\n         */\n        self.findColumnMaxTextLength = function (name) {\n            var m = -Infinity;\n            if (name === 'cornerCell') {\n                self.ctx.font = self.style.rowHeaderCellFont;\n                return self.ctx.measureText((self.data.length + (self.attributes.showNewRow ? 1 : 0)).toString()).width\n                    + self.style.autosizePadding + self.style.autosizeHeaderCellPadding\n                    + self.style.rowHeaderCellPaddingRight\n                    + self.style.rowHeaderCellPaddingLeft\n                    + (self.attributes.tree ? self.style.treeArrowWidth\n                        + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight : 0);\n            }\n            self.getSchema().forEach(function (col) {\n                if (col.name !== name) { return; }\n                self.ctx.font = self.style.columnHeaderCellFont;\n                var t = self.ctx.measureText(col.title || col.name).width\n                    + self.style.headerCellPaddingRight\n                    + self.style.headerCellPaddingLeft;\n                m = t > m ? t : m;\n            });\n            self.data.forEach(function (row) {\n                self.ctx.font = self.style.cellFont;\n                var t = self.ctx.measureText(row[name]).width\n                    + self.style.cellPaddingRight\n                    + self.style.cellPaddingLeft + self.style.cellAutoResizePadding;\n                m = t > m ? t : m;\n            });\n            return m;\n        };\n        /**\n         * Gets the total width of all header columns.\n         * @memberof canvasDataGrid\n         * @name getHeaderWidth\n         * @method\n         */\n        self.getHeaderWidth = function () {\n            return self.getVisibleSchema().reduce(function (total, header) {\n                return total + header.width;\n            }, 0);\n        };\n        self.formatters.string = function cellFormatterString(e) {\n            return e.cell.value !== undefined ? e.cell.value : '';\n        };\n        self.formatters.rowHeaderCell = self.formatters.string;\n        self.formatters.headerCell = self.formatters.string;\n        self.formatters.number = self.formatters.string;\n        self.formatters.int = self.formatters.string;\n        self.formatters.html = self.formatters.string;\n        self.sorters.string = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (a[columnName] === undefined || a[columnName] === null) {\n                    return 1;\n                }\n                if (b[columnName] === undefined || b[columnName] === null) {\n                    return 0;\n                }\n                if (asc) {\n                    if (!a[columnName].localeCompare) { return 1; }\n                    return a[columnName].localeCompare(b[columnName]);\n                }\n                if (!b[columnName].localeCompare) { return 1; }\n                return b[columnName].localeCompare(a[columnName]);\n            };\n        };\n        self.sorters.number = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return a[columnName] - b[columnName];\n                }\n                return b[columnName] - a[columnName];\n            };\n        };\n        self.sorters.date = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return new Date(a[columnName]).getTime()\n                        - new Date(b[columnName]).getTime();\n                }\n                return new Date(b[columnName]).getTime()\n                        - new Date(a[columnName]).getTime();\n            };\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/publicMethods.js\n// module id = 7\n// module chunks = 0"],"sourceRoot":""}