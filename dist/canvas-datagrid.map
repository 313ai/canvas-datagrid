{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///canvas-datagrid.js","webpack:///webpack/bootstrap 9df4b24f878dde1f47a9","webpack:///./lib/defaults.js","webpack:///./lib/main.js","webpack:///./lib/component.js","webpack:///./lib/draw.js","webpack:///./lib/events.js","webpack:///./lib/touch.js","webpack:///./lib/intf.js","webpack:///./lib/contextMenu.js","webpack:///./lib/dom.js","webpack:///./lib/publicMethods.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","undefined","self","defaults","attributes","styles","apply","context","component","Grid","args","isComponent","intf","eval","createGrid","forEach","parentNode","createShadowRoot","shadowRoot","attachShadow","mode","debug","init","Array","slice","arguments","window","HTMLElement","create","customElements","observedAttributes","getObservableAttributes","disconnectedCallback","attributeChangedCallback","connectedCallback","adoptedCallback","canvasDatagrid","require","tKeys","document","createElement","keys","argKey","appendChild","indexOf","tKey","sKey","hyphenateProperty","prop","cust","char","toUpperCase","toLowerCase","getDefaultItem","base","item","filter","applyComponentStyle","supressChangeAndDrawEvents","cStyle","getComputedStyle","defs","computedStyle","def","val","getPropertyValue","setStyleProperty","typeMap","resize","dispatchEvent","style","data","strData","JSON","parse","e","Error","schema","strSchema","number","strNum","parseInt","isNaN","boolean","strBool","test","string","str","attrs","attr","push","connected","observe","attrName","oldVal","newVal","tfn","requestAnimationFrame","addEventListener","observer","MutationObserver","mutations","checkInnerHTML","checkStyle","mutation","attributeName","target","nodeName","addedNodes","length","type","innerHTML","characterData","childList","subtree","querySelectorAll","el","drawPerfLine","w","h","x","y","perfArr","arrIndex","max","color","useAbs","r","canvasOffsetLeft","canvasOffsetTop","ctx","beginPath","moveTo","cx","cy","Math","abs","lineTo","strokeStyle","stroke","drawOnAllImagesLoaded","loaded","htmlImageCache","html","complete","draw","drawHtml","cell","img","v","formattedValue","height","width","drawImage","Image","onload","src","btoa","drawOrderByArrow","mt","columnHeaderOrderByArrowMarginTop","scale","ml","columnHeaderOrderByArrowMarginLeft","mr","columnHeaderOrderByArrowMarginRight","aw","columnHeaderOrderByArrowWidth","ah","columnHeaderOrderByArrowHeight","fillStyle","columnHeaderOrderByArrowColor","columnHeaderOrderByArrowBorderColor","orderDirection","fill","drawTreeArrow","treeArrowMarginTop","treeArrowMarginRight","treeArrowMarginLeft","treeArrowWidth","treeArrowHeight","treeArrowColor","treeArrowBorderColor","openChildren","uniqueId","radiusRect","radius","b","quadraticCurveTo","fillRect","strokeRect","fillText","text","fillCircle","arc","PI","strokeCircle","clipFrozenArea","lastFrozenColumnPixel","lastFrozenRowPixel","clip","fillHandle","selectionHandleType","strokeHandle","addselectionHandle","pos","hw","selectionHandleSize","tr","br","tl","bl","addBorderLine","t","addEllipsis","ellipsisCache","measureText","value","drawText","paddingLeft","paddingTop","paddingRight","paddingBottom","vPos","hPos","orderByArrowWidth","fontHeight","horizontalAlignment","verticalAlignment","getFrozenColumnsWidth","column","getVisibleSchema","min","frozenColumn","orders","columns","sizes","cellWidth","perfCounters","drawCount","perfWindowSize","entityCount","scrollDebugCounters","touchPPSCounters","internal","createHandlesOverlayArray","allowMovingSelection","mobile","selectionBorderTop","selectionBorderRight","selectionHandles","selectionHandle","selectionBorderLeft","selectionBorderBottom","selectionHandleBehavior","createBorderOverlayArray","drawArray","propPrefix","offsetPoint","selectionBorder","isRowHeader","selections","rowIndex","columnIndex","isHeader","drawCell","rowOrderIndex","header","headerIndex","columnOrderIndex","cellGridAttributes","cellStyle","isCorner","isColumnHeader","selected","hovered","hovers","active","activeCell","isGrid","activeHeader","rows","f","formatters","orderByArrowSize","treeArrowSize","ev","row","cellBorderWidth","visibleRows","nodeType","offsetTop","offsetLeft","scrollTop","scrollBox","scrollLeft","cellHeight","offsetWidth","offsetHeight","offsetParent","isHeaderCellCap","rowOpen","sortColumnIndex","sortRowIndex","isNormal","gridId","parentGrid","title","userHeight","rowHeight","userWidth","cornerCell","visibleCells","unshift","lineWidth","cellHeightWithChildGrid","checkScrollHeight","cellWidthWithChildGrid","rd","save","tree","showRowNumbers","childGrids","saveAppearance","cellGridHeight","grid","visible","orderBy","font","console","warn","toString","columnFilters","filterTextPrefix","aCell","selectionBorders","movingSelection","moveBorders","moveOffset","restore","bc","drawRowHeader","rowData","index","a","showRowHeaders","rowHeaderCell","rowHeaderCellWidth","drawRow","treeHeight","rowSansTreeHeight","g","trees","allowFreezingColumns","frozenColumnWidths","scrollIndexLeft","scrollIndexRight","scrollPixelRight","scrollPixelLeft","treeGrid","scrollBarWidth","rowHeaders","visibleRowHeights","isChildGrid","gridBorderCollapse","u","currentCell","columnHeaderCellHeight","getColumnHeaderCellHeight","getRowHeaderCellWidth","performance","now","createRowOrders","devicePixelRatio","gridBackgroundColor","ln","frozenRow","allowFreezingRows","frozenMarkerBorderWidth","frozenMarkerWidth","snapToRow","scrollPixelTop","scrollIndexTop","scrollIndexBottom","scrollPixelBottom","showNewRow","newRow","cl","selectionMode","activeCellOverlayBorderWidth","activeCellOverlayBorderColor","getHeaderWidth","drawHeaderColumnRange","start","end","order","columnHeaderCell","nonFrozenHeaderWidth","rArgs","rhIndex","showColumnHeaders","columnHeaderCellBorderWidth","isHeaderCell","endCap","my","mx","xHover","yHover","frozenMarkerHoverColor","frozenMarkerColor","frozenMarkerHoverBorderColor","frozenMarkerBorderColor","freezeMarkerPosition","frozenMarkerActiveColor","frozenMarkerActiveBorderColor","dragMode","dsb","selectionOverlayBorderWidth","selectionOverlayBorderColor","selectionHandleBorderWidth","selectionHandleBorderColor","selectionHandleColor","az","touchSelectHandleZone","ax","ay","reorderObject","dragOffset","reorderMarkerBackgroundColor","reorderMarkerBorderWidth","reorderMarkerBorderColor","reorderMarkerIndexBorderWidth","reorderMarkerIndexBorderColor","reorderTarget","moveOverlayBorderWidth","moveOverlayBorderColor","setLineDash","moveOverlayBorderSegments","vb","nb","co","isScrollBoxCorner","scrollBarBoxMargin","scrollBarBorderColor","scrollBarBorderWidth","scrollBarBackgroundColor","scrollBoxHeight","scrollHeight","scrollBarBoxWidth","scrollBarBoxColor","scrollBarActiveColor","scrollBarBoxBorderRadius","scrollBoxWidth","scrollWidth","scrollBarCornerBorderColor","scrollBarCornerBackgroundColor","bar","box","gridBorderWidth","gridBorderColor","showPerformance","fillArray","pop","perf","reduce","toFixed","htmlImages","startScale","scaleDelta","zoomDeltaStart","touchLength","touches","touchPosition","touchPosition1","scrollIndex","scrollPixel","canvasOffset","touchDelta","touchAnimateTo","scrollAnimation","touchPPS","xPPS","yPPS","touchPPST","xPPST","yPPST","touchDuration","pointerLockPosition","size","mouse","touch","touchStart","entities","hasFocus","dragContext","textAlign","key","dpl","pw","ph","px","py","wheeling","stopPropagation","fn","events","removeEventListener","sfn","idx","splice","preventDefault","defaultPrevented","drawAfterResize","canvas","bm","cellBorder","columnHeaderCellBorder","ch","accumulator","hidden","top","left","widthBoxRatio","heightBoxRatio","scrollBarBoxMinSize","page","pageUpDownOverlap","resizeEditInput","scroll","dontDraw","mousemove","overridePos","contextMenu","input","getLayerPos","dragBounds","sBounds","delta","ctrl","ctrlKey","metaKey","persistantSelectionMode","vs","getCellAt","NativeEvent","previousCell","clearTimeout","scrollTimer","isInGrid","cellBoundaryCrossed","draggingItem","scrollModes","dragItem","cursor","selecting","getSelectionBounds","dragStart","dragStartObject","shiftKey","bottom","right","ignoreNextClick","selectRow","dragAddToSelection","selectionBounds","selectArea","autoScrollZone","click","checkSelectionChange","selectedData","getSelectedData","endEdit","setActiveCell","selectAll","columnHeaderClickBehavior","selectColumn","treeArrowClickRadius","toggleTree","dragResizeColumn","resizingStartingWidth","resizingStartingHeight","minColumnWidth","minRowHeight","resizeScrollZone","resizeChildGrids","globalRowResize","stopDragResize","body","setStorageData","scrollGrid","scrollPointerLock","scrollStartMode","movementX","movementY","scrollMode","scrollStart","setTimeout","scrollRepeatRate","selectionScrollIncrement","stopScrollGrid","exitPointerLock","dragReorder","allowColumnReordering","allowRowReordering","source","reorderDeadZone","stopDragReorder","oIndex","tIndex","cr","row-reorder","column-reorder","dragMove","stopDragMove","moveSelection","freezeMove","stopFreezeMove","startFreezeMove","mousedown","lastMouseDownTarget","button","move","freeze","requestPointerLock","concat","dragging","mouseup","controlInput","focus","keydown","last","cols","keyCode","beginEditAt","scrollIntoView","selectionFollowsActiveCell","keyup","keypress","dblclick","fitColumnToValues","autosize","scrollWheel","deltaX","deltaY","deltaMode","touchHaltAnimation","scrollTo","pasteItem","clipData","mimeType","normalizeRowData","importingRow","existingRow","offsetX","isArray","map","colKey","substring","split","sel","cellData","colIndex","cName","yi","paste","clipboardData","items","dti","getAsString","cut","copy","forEachSelectedCell","colName","fCopyCell","replace","trows","sData","rt","join","setData","touchScrollTimeout","animationFrames","getTouchPos","touchIndex","rect","getBoundingClientRect","clientX","clientY","easingFunctions","linear","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easing","touchEasingMethod","calculatePPSTimed","touchSigmaTimed","calculatePPS","touchSigma","touchEndAnimation","touchReleaseAnimationDurationMs","stopAnimation","touchEditCell","touchCell","clearInterval","calculatePPSTimer","touchDeadZone","touchingCell","editCell","touchstart","disposeContextMenu","touchContextTimeout","touchStartEvent","changedTouches","zoomAltered","touchStart1","touchScrollStart","contextmenuEvent","touchContextMenuTimeMs","setInterval","startingCell","touchEndEvents","touchmove","passive","touchend","touchcancel","touchSelect","handleType","touchSelecting","bounds","getSchema","touchScroll","rScrollZone","bScrollZone","tScrollZone","lScrollZone","rw","sbw","t1","t2","touchZoomSensitivity","touchZoomMin","touchZoomMax","selectionScrollZone","dz","touchReleaseAcceleration","scrollAnimationPPSThreshold","ctor","storageName","invalidSearchExpClass","localStyleLibraryStorageKey","filters","currentFilter","sorters","schemaHashes","uId","changes","componentL1Events","eventNames","expandToRow","col","low","high","step","localStorage","setItem","stringify","tempSchema","createColumnOrders","applyDefaultValue","defaultValue","createNewRowData","getSchemaNameHash","getBestGuessDataType","columnName","drawChildGrids","gridKey","setTimer","refreshFromOrigialData","originalData","validateColumn","setDefaults","obj1","obj2","setAttributes","setStyle","dispose","removeChild","eventParent","contextmenu","disconnect","tryLoadStoredOrders","storedSettings","getHeaderByName","getDomRoot","host","getFontName","fontStyle","getFontHeight","parseFloat","parseStyleValue","initProp","propName","getStyleProperty","styleKeys","parentNodeStyle","supressDrawAndEvent","reloadStoredValues","getItem","initialized","publicStyleKeyIntf","initScrollBox","setDom","ie","navigator","userAgent","edge","webKit","moz","cursorGrab","cursorGrabing","cursorGrabbing","appendTo","clearChangeLog","gotoCell","gotoRow","findColumnScrollLeft","findRowScrollTop","findColumnMaxTextLength","isCellVisible","clipElement","getSchemaFromData","setFilter","expandTree","collapseTree","insertRow","deleteRow","addRow","insertColumn","deleteColumn","addColumn","getClippingRect","setRowHeight","setColumnWidth","resetColumnWidths","resetRowHeights","selectNone","assertPxColor","clearPxColorAssertions","integerToAlpha","DOMStyles","set","valueObject","filterFor","String","filterRegExp","regEnd","pattern","exec","flags","flagLength","invalidFilterRegEx","RegExp","toLocaleUpperCase","blur","TypeError","normalizeDataset","callback","syncFnInvoked","0","eventName","RangeError","autoResizeColumns","setScrollTop","preventScrollEvent","setScrollLeft","sHeight","sWidth","supressDrawEvent","applyContextItemStyle","contextItemContainer","createInlineStyle","createContextMenu","parentContextMenu","createItems","removeChildContext","relatedTarget","container","childMenuArrow","contains","children","setAttribute","contextAddCallback","getAttribute","cPos","childContextMenuMarginLeft","childContextMenuMarginTop","createChildContext","addContent","content","childContextMenuArrowHTML","clickIndex","Event","checkArrowVisibility","parentDOMNode","upArrow","downArrow","startHoverScroll","contextHoverScrollAmount","hoverScrollTimeout","contextHoverScrollRateMs","endHoverScroll","selectedIndex","loc","scrollOffset","zIndexTop","position","contextMenuArrowColor","zIndex","inputDropdown","maxHeight","innerHeight","autocompleteBottomMargin","minWidth","contextMenuArrowUpHTML","contextMenuArrowDownHTML","contextMenuWindowMargin","innerWidth","isFinite","createFilterContextMenuItems","checkRegExpErrorState","filterInput","background","contextFilterInputBackground","contextFilterInputColor","contextFilterInvalidRegExpBackground","contextFilterInvalidRegExpColor","fillAutoComplete","count","autoCompleteItems","maxAutoCompleteItems","disposeAutocomplete","createAutoCompleteContext","iRect","autoCompleteContext","filterContainer","filterLabel","filterAutoCompleteButton","onclick","en","filterOptionText","contextFilterButtonHTML","cf","removeFilterOptionText","addDefaultContextMenuItem","isNormalCell","isBackground","isScrollBar","showFilter","showCopy","copyText","execCommand","showPaste","clipBoardData","pasteText","showColumnSelector","columnSelectorText","toggleColumnVisibility","columnSelectorHiddenText","columnSelectorVisibleText","hideColumnText","showClearSettingsOption","clearSettingsOptionText","columnWidth","allowSorting","showOrderByOption","showOrderByOptionTextAsc","showOrderByOptionTextDesc","createDiposeEvent","contextPosition","st","sl","scrollingElement","contextMenuMarginLeft","contextMenuMarginTop","mobileContextMenuMargin","ele","boundingRect","eleRect","clipRect","parentRect","Infinity","borderWidth","getVisibleCellByIndex","mobileEditInputHeight","cellPaddingLeft","ignoreScrollOffset","abort","abortEdit","newValue","oldValue","aborted","editable","enumItems","enu","option","valueInEnum","multiLine","fontSize","editCellFontSize","nx","ny","className","css","canvas-datagrid-context-menu-filter-input","verticalAlign","marginLeft","padding","border","contextFilterInputBorder","borderRadius","contextFilterInputBorderRadius","lineHeight","fontWeight","fontFamily","contextFilterInputFontFamily","contextFilterInputFontSize","canvas-datagrid-context-menu-filter-button","contextMenuBackground","contextMenuColor","contextFilterButtonBorder","contextFilterButtonBorderRadius","contextMenuFilterButtonFontFamily","contextMenuFilterButtonFontSize","canvas-datagrid-context-child-arrow","cssFloat","childContextMenuArrowColor","contextMenuChildArrowFontSize","contextMenuFontFamily","canvas-datagrid-autocomplete","contextMenuFontSize","contextMenuBorder","contextMenuPadding","contextMenuBorderRadius","opacity","contextMenuOpacity","overflow","canvas-datagrid-autocomplete-item","canvas-datagrid-autocomplete-item:hover","contextMenuHoverBackground","contextMenuHoverColor","canvas-datagrid-canvas","canvas-datagrid","display","canvas-datagrid-control-input","canvas-datagrid-edit-mobile-input","boxSizing","outline","margin","mobileEditFontFamily","mobileEditFontSize","editCellBorder","editCellColor","editCellBackgroundColor","appearance","webkitAppearance","mozAppearance","canvas-datagrid-edit-input","editCellPaddingLeft","editCellFontFamily","boxShadow","editCellBoxShadow","canvas-datagrid-context-menu-item-mobile","contextMenuItemMargin","contextMenuItemBorderRadius","canvas-datagrid-context-menu-item","canvas-datagrid-context-menu-item:hover","canvas-datagrid-context-menu-label","contextMenuLabelMargin","contextMenuLabelDisplay","contextMenuLabelMinWidth","maxWidth","contextMenuLabelMaxWidth","canvas-datagrid-context-menu-mobile","whiteSpace","canvas-datagrid-context-menu","canvas-datagrid-invalid-search-regExp","contextMenuFilterInvalidExpresion","onblur","parentIsCanvas","tagName","getContext","textBaseline","ordA","charCodeAt","ordZ","len","fromCharCode","floor","applyFilter","isColumnSelected","colIsSelected","shift","supressEvent","addCol","ri","dragObject","rowId","childGrid","trArgs","treeGridAttributes","treeGridHeight","direction","sortFunction","dontSetStorageData","sort","offsetY","xi","cidx","isColumnVisible","isRowVisible","useTouchScrollZones","moveBorder","tsz","touchScrollZone","moveMode","borderDragBehavior","xBorderBehavior","yBorderBehavior","isVerticalScrollBar","isHorizontalScrollBar","borderResizeZone","allowColumnResize","allowColumnResizeFromCell","allowRowHeaderResize","allowRowResize","allowRowResizeFromCell","rowGrabZoneSize","maxCol","minCol"," ","rowHeaderCellFont","autosizePadding","autosizeHeaderCellPadding","rowHeaderCellPaddingRight","rowHeaderCellPaddingLeft","columnHeaderCellFont","headerCellPaddingRight","headerCellPaddingLeft","cellFont","cellPaddingRight","cellAutoResizePadding","total","headerCell","int","asc","localeCompare","date","Date","getTime"],"mappings":"CAAA,SAAAA,EAAAC,GACA,gBAAAC,UAAA,gBAAAC,QACAA,OAAAD,QAAAD,IACA,kBAAAG,gBAAAC,IACAD,UAAAH,GACA,gBAAAC,SACAA,QAAA,eAAAD,IAEAD,EAAA,eAAAC,KACCK,KAAA,WACD,MCAgB,UAAUC,GCN1B,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAP,OAGA,IAAAC,GAAAO,EAAAD,IACAE,EAAAF,EACAG,GAAA,EACAV,WAUA,OANAK,GAAAE,GAAAI,KAAAV,EAAAD,QAAAC,IAAAD,QAAAM,GAGAL,EAAAS,GAAA,EAGAT,EAAAD,QAvBA,GAAAQ,KA4DA,OAhCAF,GAAAM,EAAAP,EAGAC,EAAAO,EAAAL,EAGAF,EAAAQ,EAAA,SAAAd,EAAAe,EAAAC,GACAV,EAAAW,EAAAjB,EAAAe,IACAG,OAAAC,eAAAnB,EAAAe,GACAK,cAAA,EACAC,YAAA,EACAC,IAAAN,KAMAV,EAAAiB,EAAA,SAAAtB,GACA,GAAAe,GAAAf,KAAAuB,WACA,WAA2B,MAAAvB,GAAA,SAC3B,WAAiC,MAAAA,GAEjC,OADAK,GAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAQ,EAAAC,GAAsD,MAAAR,QAAAS,UAAAC,eAAAjB,KAAAc,EAAAC,IAGtDpB,EAAAuB,EAAA,GAGAvB,IAAAwB,EAAA,KDgBM,SAAU7B,EAAQD,EAASM,GE7EjC,GAAAyB,GAAAC,CAEAD,UA+QCE,MA/QDD,EAAA,WACA,YACA,iBAAAE,GACAA,EAAAC,UACAC,aACA,6BACA,yBACA,iCACA,yBACA,4BACA,4BACA,4BACA,0BACA,sBACA,8BACA,oBACA,yBACA,8BACA,wBACA,mDACA,qCACA,kDACA,4CACA,kCACA,+BACA,+BACA,oBACA,aACA,gBACA,iCACA,mCACA,uBACA,6BACA,6BACA,iBACA,YACA,wBACA,sBACA,+BACA,iDACA,sBACA,wBACA,sBACA,sBACA,oCACA,yBACA,wBACA,kCACA,mCACA,yBACA,gCACA,2BACA,+BACA,yBACA,0BACA,gBACA,kBACA,kBACA,yBACA,qDACA,uDACA,iBACA,uBACA,sBACA,sBACA,iBACA,+BACA,oBACA,oCACA,iCACA,wCACA,uBACA,6BACA,8BACA,oBACA,sBACA,YACA,4BAEAC,SACA,uDACA,mDACA,4BACA,uCACA,qCACA,4DACA,4CACA,yDACA,mCACA,8BACA,4BACA,6BACA,2BACA,+DACA,+CACA,mEACA,mDACA,gEACA,gDACA,gCACA,gCACA,sBACA,6BACA,iDACA,6CACA,sBACA,iCACA,+BACA,uBACA,kBACA,gCACA,mCACA,sDACA,sCACA,wBACA,sBACA,uBACA,qBACA,yDACA,yCACA,mCACA,kBACA,+BACA,qDACA,yCACA,mCACA,iCACA,6DACA,yDACA,kCACA,gDACA,2CACA,8BACA,+CACA,kEACA,kDACA,oCACA,kCACA,mCACA,iCACA,+CACA,iEACA,0CACA,2DACA,qCACA,yCACA,0CACA,wCACA,qCACA,iEACA,0CACA,uCACA,uDACA,gEACA,uCACA,4CACA,8CACA,sCACA,8DACA,6DACA,gDACA,wCACA,sCACA,mDACA,yDACA,kCACA,yCACA,2CACA,mDACA,2CACA,+DACA,uCACA,+BACA,wDACA,iDACA,sCACA,gCACA,2CACA,uCACA,qCACA,oCACA,4BACA,4BACA,8BACA,6BACA,gCACA,uDACA,mDACA,oCACA,sDACA,kDACA,0BACA,oCACA,4BACA,0BACA,oDACA,0DACA,qDACA,2DACA,+CACA,qDACA,8BACA,wBACA,iDACA,kCACA,6CACA,sBACA,sBACA,oBACA,+BACA,6BACA,sCACA,8BACA,6BACA,mDACA,sCACA,mBACA,sDACA,kDACA,kCACA,0DACA,uCACA,0DACA,sDACA,+BACA,6CACA,wCACA,2BACA,4CACA,+DACA,+CACA,iCACA,+BACA,gCACA,8BACA,kEACA,qDACA,4CACA,0BACA,kDACA,sDACA,kDACA,4BACA,mCACA,+CACA,yBACA,2BACA,wBACA,4DACA,wDACA,sBACA,wDACA,mCACA,iDACA,0BACA,iCACA,wDACA,kCACA,kDACA,2BA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","file":"canvas-datagrid.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"canvasDatagrid\"] = factory();\n\telse\n\t\troot[\"canvasDatagrid\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"canvasDatagrid\"] = factory();\n\telse\n\t\troot[\"canvasDatagrid\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 1);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        self.defaults = {\n            attributes: [\n                ['allowColumnReordering', true],\n                ['allowColumnResize', true],\n                ['allowColumnResizeFromCell', false],\n                ['allowFreezingRows', false],\n                ['allowFreezingColumns', false],\n                ['allowMovingSelection', true],\n                ['allowRowHeaderResize', true],\n                ['allowRowReordering', false],\n                ['allowRowResize', true],\n                ['allowRowResizeFromCell', false],\n                ['allowSorting', true],\n                ['autoResizeColumns', false],\n                ['borderDragBehavior', 'none'],\n                ['borderResizeZone', 10],\n                ['clearSettingsOptionText', 'Clear saved settings'],\n                ['columnHeaderClickBehavior', 'sort'],\n                ['columnSelectorHiddenText', '&nbsp;&nbsp;&nbsp;'],\n                ['columnSelectorText', 'Add/Remove columns'],\n                ['columnSelectorVisibleText', '\\u2713'],\n                ['contextHoverScrollAmount', 2],\n                ['contextHoverScrollRateMs', 5],\n                ['copyText', 'Copy'],\n                ['debug', false],\n                ['editable', true],\n                ['filterOptionText', 'Filter %s'],\n                ['filterTextPrefix', '(filtered) '],\n                ['globalRowResize', false],\n                ['hideColumnText', 'Hide %s'],\n                ['maxAutoCompleteItems', 200],\n                ['multiLine', false],\n                ['name', ''],\n                ['pageUpDownOverlap', 1],\n                ['pasteText', 'Paste'],\n                ['persistantSelectionMode', false],\n                ['removeFilterOptionText', 'Remove filter on %s'],\n                ['reorderDeadZone', 3],\n                ['resizeScrollZone', 20],\n                ['rowGrabZoneSize', 5],\n                ['saveAppearance', true],\n                ['scrollAnimationPPSThreshold', 0.75],\n                ['scrollPointerLock', false],\n                ['scrollRepeatRate', 75],\n                ['selectionFollowsActiveCell', false],\n                ['selectionHandleBehavior', 'none'],\n                ['selectionMode', 'cell'],\n                ['selectionScrollIncrement', 20],\n                ['selectionScrollZone', 20],\n                ['showClearSettingsOption', true],\n                ['showColumnHeaders', true],\n                ['showColumnSelector', true],\n                ['showCopy', true],\n                ['showFilter', true],\n                ['showNewRow', false],\n                ['showOrderByOption', true],\n                ['showOrderByOptionTextAsc', 'Order by %s ascending'],\n                ['showOrderByOptionTextDesc', 'Order by %s descending'],\n                ['showPaste', false],\n                ['showPerformance', false],\n                ['showRowHeaders', true],\n                ['showRowNumbers', true],\n                ['snapToRow', false],\n                ['touchContextMenuTimeMs', 800],\n                ['touchDeadZone', 3],\n                ['touchEasingMethod', 'easeOutQuad'],\n                ['touchReleaseAcceleration', 1000],\n                ['touchReleaseAnimationDurationMs', 2000],\n                ['touchScrollZone', 20],\n                ['touchSelectHandleZone', 20],\n                ['touchZoomSensitivity', 0.005],\n                ['touchZoomMin', 0.5],\n                ['touchZoomMax', 1.75],\n                ['tree', false],\n                ['treeHorizontalScroll', false]\n            ],\n            styles: [\n                ['activeCellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['activeCellBorderWidth', 1],\n                ['activeCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellFont', '16px sans-serif'],\n                ['activeCellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['activeCellOverlayBorderWidth', 1],\n                ['activeCellPaddingBottom', 5],\n                ['activeCellPaddingLeft', 5],\n                ['activeCellPaddingRight', 7],\n                ['activeCellPaddingTop', 5],\n                ['activeCellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['activeCellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['activeColumnHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeColumnHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeRowHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeRowHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['autocompleteBottomMargin', 60],\n                ['autosizeHeaderCellPadding', 8],\n                ['autosizePadding', 5],\n                ['cellAutoResizePadding', 13],\n                ['cellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['cellBorderWidth', 1],\n                ['cellColor', 'rgba(0, 0, 0, 1)'],\n                ['cellFont', '16px sans-serif'],\n                ['cellGridHeight', 250],\n                ['cellHeight', 24],\n                ['cellHeightWithChildGrid', 150],\n                ['cellHorizontalAlignment', 'left'],\n                ['cellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['cellPaddingBottom', 5],\n                ['cellPaddingLeft', 5],\n                ['cellPaddingRight', 7],\n                ['cellPaddingTop', 5],\n                ['cellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['cellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['cellVerticalAlignment', 'center'],\n                ['cellWidth', 250],\n                ['cellWidthWithChildGrid', 250],\n                ['childContextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['childContextMenuArrowHTML', '&#x25BA;'],\n                ['childContextMenuMarginLeft', -11],\n                ['childContextMenuMarginTop', -6],\n                ['columnHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellBorderColor', 'rgba(172, 172, 172, 1)'],\n                ['columnHeaderCellBorderWidth', 1],\n                ['columnHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['columnHeaderCellFont', '16px sans-serif'],\n                ['columnHeaderCellHeight', 25],\n                ['columnHeaderCellHorizontalAlignment', 'left'],\n                ['columnHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['columnHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['columnHeaderCellPaddingBottom', 5],\n                ['columnHeaderCellPaddingLeft', 5],\n                ['columnHeaderCellPaddingRight', 7],\n                ['columnHeaderCellPaddingTop', 5],\n                ['columnHeaderCellVerticalAlignment', 'center'],\n                ['columnHeaderOrderByArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['columnHeaderOrderByArrowBorderWidth', 1],\n                ['columnHeaderOrderByArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['columnHeaderOrderByArrowHeight', 8],\n                ['columnHeaderOrderByArrowMarginLeft', 0],\n                ['columnHeaderOrderByArrowMarginRight', 5],\n                ['columnHeaderOrderByArrowMarginTop', 6],\n                ['columnHeaderOrderByArrowWidth', 13],\n                ['contextFilterButtonBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterButtonBorderRadius', '3px'],\n                ['contextFilterButtonHTML', '&#x25BC;'],\n                ['contextFilterInputBackground', 'rgba(255,255,255,1)'],\n                ['contextFilterInputBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterInputBorderRadius', '0'],\n                ['contextFilterInputColor', 'rgba(0,0,0,1)'],\n                ['contextFilterInputFontFamily', 'sans-serif'],\n                ['contextFilterInputFontSize', '14px'],\n                ['contextFilterInvalidRegExpBackground', 'rgba(180, 6, 1, 1)'],\n                ['contextFilterInvalidRegExpColor', 'rgba(255, 255, 255, 1)'],\n                ['contextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuArrowDownHTML', '&#x25BC;'],\n                ['contextMenuArrowUpHTML', '&#x25B2;'],\n                ['contextMenuBackground', 'rgba(240, 240, 240, 1)'],\n                ['contextMenuBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextMenuBorderRadius', '3px'],\n                ['contextMenuChildArrowFontSize', '12px'],\n                ['contextMenuColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuFilterButtonFontFamily', 'sans-serif'],\n                ['contextMenuFilterButtonFontSize', '10px'],\n                ['contextMenuFilterInvalidExpresion', 'rgba(237, 155, 156, 1)'],\n                ['contextMenuFontFamily', 'sans-serif'],\n                ['contextMenuFontSize', '16px'],\n                ['contextMenuHoverBackground', 'rgba(182, 205, 250, 1)'],\n                ['contextMenuHoverColor', 'rgba(43, 48, 153, 1)'],\n                ['contextMenuItemBorderRadius', '3px'],\n                ['contextMenuItemMargin', '2px'],\n                ['contextMenuLabelDisplay', 'inline-block'],\n                ['contextMenuLabelMargin', '0 3px 0 0'],\n                ['contextMenuLabelMaxWidth', '700px'],\n                ['contextMenuLabelMinWidth', '75px'],\n                ['contextMenuMarginLeft', 3],\n                ['contextMenuMarginTop', -3],\n                ['contextMenuOpacity', '0.98'],\n                ['contextMenuPadding', '2px'],\n                ['contextMenuWindowMargin', 100],\n                ['cornerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cornerCellBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['editCellBackgroundColor', 'white'],\n                ['editCellBorder', 'solid 1px rgba(110, 168, 255, 1)'],\n                ['editCellBoxShadow', '0 2px 5px rgba(0,0,0,0.4)'],\n                ['editCellColor', 'black'],\n                ['editCellFontFamily', 'sans-serif'],\n                ['editCellFontSize', '16px'],\n                ['editCellPaddingLeft', 4],\n                ['frozenMarkerHoverColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerHoverBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerActiveColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerActiveBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerColor', 'rgba(222, 222, 222, 1)'],\n                ['frozenMarkerBorderColor', 'rgba(168, 168, 168, 1)'],\n                ['frozenMarkerBorderWidth', 1],\n                ['frozenMarkerWidth', 2],\n                ['gridBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['gridBorderCollapse', 'collapse'],\n                ['gridBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['gridBorderWidth', 1],\n                ['minColumnWidth', 45],\n                ['minRowHeight', 24],\n                ['mobileContextMenuMargin', 10],\n                ['mobileEditInputHeight', 30],\n                ['mobileEditFontFamily', 'sans-serif'],\n                ['mobileEditFontSize', '16px'],\n                ['moveOverlayBorderWidth', 1],\n                ['moveOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['moveOverlayBorderSegments', '12, 7'],\n                ['name', 'default'],\n                ['reorderMarkerBackgroundColor', 'rgba(0, 0, 0, 0.1)'],\n                ['reorderMarkerBorderColor', 'rgba(0, 0, 0, 0.2)'],\n                ['reorderMarkerBorderWidth', 1.25],\n                ['reorderMarkerIndexBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['reorderMarkerIndexBorderWidth', 2.75],\n                ['rowHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['rowHeaderCellBorderColor', 'rgba(200, 200, 200, 1)'],\n                ['rowHeaderCellBorderWidth', 1],\n                ['rowHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellFont', '16px sans-serif'],\n                ['rowHeaderCellHeight', 25],\n                ['rowHeaderCellHorizontalAlignment', 'left'],\n                ['rowHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['rowHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['rowHeaderCellPaddingBottom', 5],\n                ['rowHeaderCellPaddingLeft', 5],\n                ['rowHeaderCellPaddingRight', 5],\n                ['rowHeaderCellPaddingTop', 5],\n                ['rowHeaderCellSelectedBackgroundColor', 'rgba(217, 217, 217, 1)'],\n                ['rowHeaderCellSelectedColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellVerticalAlignment', 'center'],\n                ['rowHeaderCellWidth', 57],\n                ['scrollBarActiveColor', 'rgba(125, 125, 125, 1)'],\n                ['scrollBarBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarBorderWidth', 0.5],\n                ['scrollBarBoxBorderRadius', 4.125],\n                ['scrollBarBoxColor', 'rgba(192, 192, 192, 1)'],\n                ['scrollBarBoxMargin', 2],\n                ['scrollBarBoxMinSize', 15],\n                ['scrollBarBoxWidth', 8],\n                ['scrollBarCornerBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarCornerBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarWidth', 11],\n                ['selectionHandleBorderColor', 'rgba(255, 255, 255, 1)'],\n                ['selectionHandleBorderWidth', 1.5],\n                ['selectionHandleColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionHandleSize', 8],\n                ['selectionHandleType', 'square'],\n                ['selectionOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionOverlayBorderWidth', 1],\n                ['treeArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['treeArrowBorderWidth', 1],\n                ['treeArrowClickRadius', 5],\n                ['treeArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['treeArrowHeight', 8],\n                ['treeArrowMarginLeft', 0],\n                ['treeArrowMarginRight', 5],\n                ['treeArrowMarginTop', 6],\n                ['treeArrowWidth', 13],\n                ['treeGridHeight', 250]\n            ]\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, evil: true*/\n/*globals Reflect: false, HTMLElement: true, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n    __webpack_require__(2),\n    __webpack_require__(0),\n    __webpack_require__(3),\n    __webpack_require__(4),\n    __webpack_require__(5),\n    __webpack_require__(6),\n    __webpack_require__(7),\n    __webpack_require__(8),\n    __webpack_require__(9)\n], __WEBPACK_AMD_DEFINE_RESULT__ = function context(component) {\n    'use strict';\n    component = component();\n    var modules = Array.prototype.slice.call(arguments);\n    function Grid(args) {\n        args = args || {};\n        var self = {};\n        self.isComponent = args.component === undefined;\n        self.intf = self.isComponent ? eval('Reflect.construct(HTMLElement, [], new.target)') : {};\n        self.args = args;\n        self.createGrid = function grid(args) {\n            args.component = false;\n            return new Grid(args);\n        };\n        modules.forEach(function (module) {\n            module(self);\n        });\n        if (self.isComponent) {\n            self.args.parentNode = self.intf;\n        } else {\n            self.args.parentNode = args.parentNode;\n        }\n        if (self.args.parentNode && self.args.parentNode.createShadowRoot) {\n            self.shadowRoot = self.args.parentNode.attachShadow({mode: self.args.debug ? 'open' : 'closed'});\n            self.parentNode = self.shadowRoot;\n        } else {\n            self.parentNode = args.parentNode;\n        }\n        self.init();\n        return self.intf;\n    }\n    if (window.HTMLElement) {\n        Grid.prototype = Object.create(window.HTMLElement.prototype);\n    }\n    // export web component\n    if (window.customElements) {\n        Grid.observedAttributes = component.getObservableAttributes();\n        Grid.prototype.disconnectedCallback = component.disconnectedCallback;\n        Grid.prototype.attributeChangedCallback = component.attributeChangedCallback;\n        Grid.prototype.connectedCallback = component.connectedCallback;\n        Grid.prototype.adoptedCallback = component.adoptedCallback;\n        window.customElements.define('canvas-datagrid', Grid);\n    }\n    // export global\n    if (window && !window.canvasDatagrid && !window.require) {\n        window.canvasDatagrid = function (args) { return new Grid(args); };\n    }\n    // export amd loader\n    module.exports = function grid(args) {\n        args = args || {};\n        var i, tKeys = ['style', 'schema', 'data', 'formatters',\n                    'sorters', 'filters'];\n        if (window.customElements) {\n            i = document.createElement('canvas-datagrid');\n            Object.keys(args).forEach(function (argKey) {\n                if (argKey === 'parentNode') {\n                    args.parentNode.appendChild(i);\n                    return;\n                }\n                // top level keys in args\n                if (tKeys.indexOf(argKey) !== -1) {\n                    tKeys.forEach(function (tKey) {\n                        if (args[tKey] === undefined || tKey !== argKey) { return; }\n                        if (['formatters', 'sorters', 'filters'].indexOf(argKey) !== -1) {\n                            if (typeof args[tKey] === 'object' && args[tKey] !== null) {\n                                Object.keys(args[tKey]).forEach(function (sKey) {\n                                    i[tKey][sKey] = args[tKey][sKey];\n                                });\n                            }\n                        } else {\n                            i[tKey] = args[tKey];\n                        }\n                    });\n                    return;\n                }\n                // all others are attribute level keys\n                i.attributes[argKey] = args[argKey];\n            });\n            return i;\n        }\n        args.component = false;\n        i = new Grid(args);\n        return i;\n    };\n    return module.exports;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_RESULT__ = function (defaults) {\n    'use strict';\n    return function () {\n        var typeMap, component = {};\n        function hyphenateProperty(prop, cust) {\n            var p = '';\n            Array.prototype.forEach.call(prop, function (char) {\n                if (char === char.toUpperCase()) {\n                    p += '-' + char.toLowerCase();\n                    return;\n                }\n                p += char;\n            });\n            return (cust ? '--cdg-' : '') + p;\n        }\n        function getDefaultItem(base, item) {\n            var i = {},\n                r;\n            defaults(i);\n            r = i.defaults[base].filter(function (i) {\n                return i[0].toLowerCase() === item.toLowerCase()\n                    || hyphenateProperty(i[0]) === item.toLowerCase()\n                    || hyphenateProperty(i[0], true) === item.toLowerCase();\n            })[0];\n            return r;\n        }\n        function applyComponentStyle(supressChangeAndDrawEvents, intf) {\n            var cStyle = window.getComputedStyle(intf, null),\n                defs = {};\n            intf.computedStyle = cStyle;\n            defaults(defs);\n            defs = defs.defaults.styles;\n            defs.forEach(function (def) {\n                var val = cStyle.getPropertyValue(hyphenateProperty(def[0], true));\n                if (val === \"\") {\n                    val = cStyle.getPropertyValue(hyphenateProperty(def[0], false));\n                }\n                if (val !== \"\") {\n                    intf.setStyleProperty(def[0], typeMap[typeof def[1]](val, def[1]));\n                }\n            });\n            intf.resize(true);\n            if (!supressChangeAndDrawEvents && intf.dispatchEvent) {\n                intf.dispatchEvent('stylechanged', intf.style);\n            }\n        }\n        typeMap = {\n            data: function (strData) {\n                try {\n                    return JSON.parse(strData);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid data.');\n                }\n            },\n            schema: function (strSchema) {\n                try {\n                    return JSON.parse(strSchema);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid schema attribute.');\n                }\n            },\n            number: function (strNum, def) {\n                var n = parseInt(strNum, 10);\n                return isNaN(n) ? def : n;\n            },\n            boolean: function (strBool) {\n                return (/true/i).test(strBool);\n            },\n            string: function (str) {\n                return str;\n            }\n        };\n        component.getObservableAttributes = function () {\n            var i = {}, attrs = ['data', 'schema', 'style', 'className', 'name'];\n            defaults(i);\n            i.defaults.attributes.forEach(function (attr) {\n                attrs.push(attr[0].toLowerCase());\n            });\n            return attrs;\n        };\n        component.disconnectedCallback = function () {\n            this.connected = false;\n        };\n        component.connectedCallback = function () {\n            var intf = this;\n            intf.connected = true;\n            component.observe(intf);\n            applyComponentStyle(true, intf);\n            intf.resize(true);\n        };\n        component.adoptedCallback = function () {\n            this.resize();\n        };\n        component.attributeChangedCallback = function (attrName, oldVal, newVal) {\n            var tfn, intf = this, def;\n            if (attrName === 'style') {\n                requestAnimationFrame(function () { applyComponentStyle(false, intf); });\n                return;\n            }\n            if (attrName === 'data') {\n                intf.args.data = typeMap.data(newVal);\n                return;\n            }\n            if (attrName === 'schema') {\n                intf.args.schema = typeMap.schema(newVal);\n                return;\n            }\n            if (attrName === 'name') {\n                intf.name = newVal;\n                return;\n            }\n            if (attrName === 'class' || attrName === 'className') {\n                return;\n            }\n            def = getDefaultItem('attributes', attrName);\n            if (def) {\n                tfn = typeMap[typeof def[1]];\n                intf.attributes[def[0]] = tfn(newVal);\n                return;\n            }\n            if (/^on/.test(attrName)) {\n                intf.addEventListener('on' + attrName, function (e) {\n                    eval(newVal);\n                });\n            }\n            return;\n        };\n        component.observe = function (intf) {\n            var observer;\n            if (!window.MutationObserver) { return; }\n            intf.applyComponentStyle = function () { applyComponentStyle(false, intf); intf.resize(); };\n            /**\n             * Applies the computed css styles to the grid.  In some browsers, changing directives in attached style sheets does not automatically update the styles in this component.  It is necessary to call this method to update in these cases.\n             * @memberof canvasDatagrid\n             * @name applyComponentStyle\n             * @method\n             */\n            observer = new window.MutationObserver(function (mutations) {\n                var checkInnerHTML, checkStyle;\n                Array.prototype.forEach.call(mutations, function (mutation) {\n                    if (mutation.attributeName === 'class'\n                            || mutation.attributeName === 'style') {\n                        intf.applyComponentStyle(false, intf);\n                        return;\n                    }\n                    if (mutation.target.parentNode.nodeName === 'STYLE') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.addedNodes.length > 0 || mutation.type === 'characterData') {\n                        checkInnerHTML = true;\n                    }\n                });\n                if (checkStyle) {\n                    intf.applyComponentStyle(false, intf);\n                }\n                if (checkInnerHTML) {\n                    intf.data = typeMap.data(intf.innerHTML);\n                }\n            });\n            observer.observe(intf, { characterData: true, childList: true, attributes: true, subtree: true });\n            Array.prototype.forEach.call(document.querySelectorAll('style'), function (el) {\n                observer.observe(el, { characterData: true, childList: true, attributes: true, subtree: true });\n            });\n        };\n        return component;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals XMLSerializer: false, define: true, Blob: false, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var perfCounters = [],\n            drawCount = 0,\n            perfWindowSize = 300,\n            entityCount = [],\n            scrollDebugCounters = [],\n            touchPPSCounters = [];\n        self.htmlImageCache = {};\n        function drawPerfLine(w, h, x, y, perfArr, arrIndex, max, color, useAbs) {\n            var i = w / perfArr.length,\n                r = h / max;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x, y + h);\n            perfArr.forEach(function (n) {\n                var val = (arrIndex === undefined ? n : n[arrIndex]),\n                    cx,\n                    cy;\n                if (useAbs) {\n                    val = Math.abs(val);\n                }\n                cx = x + i;\n                cy = y + h - (val * r);\n                self.ctx.lineTo(cx, cy);\n                x += i;\n            });\n            self.ctx.moveTo(x + w, y + h);\n            self.ctx.strokeStyle = color;\n            self.ctx.stroke();\n        }\n        function drawOnAllImagesLoaded() {\n            var loaded = true;\n            Object.keys(self.htmlImageCache).forEach(function (html) {\n                if (!self.htmlImageCache[html].complete) {\n                    loaded = false;\n                }\n            });\n            if (loaded) {\n                self.draw();\n            }\n        }\n        function drawHtml(cell) {\n            var img,\n                v = cell.innerHTML || cell.formattedValue,\n                x = cell.x + self.canvasOffsetLeft,\n                y = cell.y + self.canvasOffsetTop;\n            if (self.htmlImageCache[v]) {\n                img = self.htmlImageCache[v];\n                if (img.height !== cell.height || img.width !== cell.width) {\n                    // height and width of the cell has changed, invalidate cache\n                    self.htmlImageCache[v] = undefined;\n                } else {\n                    if (!img.complete) {\n                        return;\n                    }\n                    return self.ctx.drawImage(img, x, y);\n                }\n            }\n            img = new Image(cell.width, cell.height);\n            self.htmlImageCache[v] = img;\n            img.onload = function () {\n                self.ctx.drawImage(img, x, y);\n                drawOnAllImagesLoaded();\n            };\n            img.src = 'data:image/svg+xml;base64,' + btoa(\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + cell.width + '\" height=\"' + cell.height + '\">\\n' +\n                    '<foreignObject class=\"node\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\\n' +\n                    '<body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;padding:0;\">\\n' +\n                    v + '\\n' +\n                    '</body>' +\n                    '</foreignObject>\\n' +\n                    '</svg>\\n'\n            );\n        }\n        function drawOrderByArrow(x, y) {\n            var mt = self.style.columnHeaderOrderByArrowMarginTop * self.scale,\n                ml = self.style.columnHeaderOrderByArrowMarginLeft * self.scale,\n                mr = self.style.columnHeaderOrderByArrowMarginRight * self.scale,\n                aw = self.style.columnHeaderOrderByArrowWidth * self.scale,\n                ah = self.style.columnHeaderOrderByArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.columnHeaderOrderByArrowColor;\n            self.ctx.strokeStyle = self.style.columnHeaderOrderByArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.orderDirection === 'asc') {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y + ah);\n                self.ctx.lineTo(x + aw, y + ah);\n                self.ctx.lineTo(x + (aw * 0.5), y);\n                self.ctx.lineTo(x, y + ah);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function drawTreeArrow(cell, x, y) {\n            var mt = self.style.treeArrowMarginTop * self.scale,\n                mr = self.style.treeArrowMarginRight * self.scale,\n                ml = self.style.treeArrowMarginLeft * self.scale,\n                aw = self.style.treeArrowWidth * self.scale,\n                ah = self.style.treeArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.treeArrowColor;\n            self.ctx.strokeStyle = self.style.treeArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.openChildren[cell.data[self.uniqueId]]) {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y);\n                self.ctx.lineTo(x + ah, y + (aw * 0.5));\n                self.ctx.lineTo(x, y + aw);\n                self.ctx.lineTo(x, y);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function radiusRect(x, y, w, h, radius) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            var r = x + w, b = y + h;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x + radius, y);\n            self.ctx.lineTo(r - radius, y);\n            self.ctx.quadraticCurveTo(r, y, r, y + radius);\n            self.ctx.lineTo(r, y + h - radius);\n            self.ctx.quadraticCurveTo(r, b, r - radius, b);\n            self.ctx.lineTo(x + radius, b);\n            self.ctx.quadraticCurveTo(x, b, x, b - radius);\n            self.ctx.lineTo(x, y + radius);\n            self.ctx.quadraticCurveTo(x, y, x + radius, y);\n        }\n        function fillRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillRect(x, y, w, h);\n        }\n        function strokeRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.strokeRect(x, y, w, h);\n        }\n        function fillText(text, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillText(text, x, y);\n        }\n        function fillCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.fill();\n        }\n        function strokeCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.stroke();\n        }\n        function clipFrozenArea(mode) {\n            // 0 both, 1 rows, 2 cols\n            // self.lastFrozenColumnPixel;\n            // self.lastFrozenRowPixel;\n            self.ctx.beginPath();\n            if (mode === 0) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, self.lastFrozenRowPixel);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 1) {\n                self.ctx.moveTo(0, self.lastFrozenRowPixel);\n                self.ctx.lineTo(0, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 2) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, 0);\n                self.ctx.lineTo(self.width, 0);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n            }\n            self.ctx.clip();\n        }\n        function fillHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return fillCircle(x, y, r * 0.5);\n            }\n            fillRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function strokeHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return strokeCircle(x, y, r * 0.5);\n            }\n            strokeRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function addselectionHandle(c, pos) {\n            var hw = self.style.selectionHandleSize,\n                p = {\n                    tr: function () {\n                        fillHandle(c.x + c.width, c.y, hw);\n                        strokeHandle(c.x + c.width, c.y, hw);\n                    },\n                    br: function () {\n                        fillHandle(c.x + c.width, c.y + c.height, hw);\n                        strokeHandle(c.x + c.width, c.y + c.height, hw);\n                    },\n                    tl: function () {\n                        fillHandle(c.x, c.y, hw);\n                        strokeHandle(c.x, c.y, hw);\n                    },\n                    bl: function () {\n                        fillHandle(c.x, c.y + c.height, hw);\n                        strokeHandle(c.x, c.y + c.height, hw);\n                    }\n                };\n            p[pos]();\n        }\n        function addBorderLine(c, pos) {\n            self.ctx.beginPath();\n            var p = {\n                t: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                },\n                r: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                b: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                l: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                }\n            };\n            p[pos]();\n            self.ctx.stroke();\n        }\n        function addEllipsis(text, width) {\n            var c, w = 0;\n            if (self.ellipsisCache[text] && self.ellipsisCache[text][width]) {\n                return self.ellipsisCache[text][width];\n            }\n            //TODO Add ellipsis back when there is a fast way to do it\n            w = self.ctx.measureText(text).width;\n            self.ellipsisCache[text] = self.ellipsisCache[text] || {};\n            c = {value: text, width: w};\n            self.ellipsisCache[text][width] = c;\n            return c;\n        }\n        function drawText(cell) {\n            var paddingLeft = self.style[cell.style + 'PaddingLeft'] * self.scale,\n                paddingTop = self.style[cell.style + 'PaddingTop'] * self.scale,\n                paddingRight = self.style[cell.style + 'PaddingRight'] * self.scale,\n                paddingBottom = self.style[cell.style + 'PaddingBottom'] * self.scale,\n                vPos = paddingTop + cell.height - (cell.height * 0.5),\n                hPos = paddingLeft + cell.treeArrowWidth + cell.orderByArrowWidth;\n            cell.text = addEllipsis(cell.formattedValue, cell.width - paddingRight - paddingLeft);\n            cell.text.height = cell.fontHeight;\n            if (cell.horizontalAlignment === 'right') {\n                hPos = cell.width - cell.text.width - paddingRight;\n            } else if (cell.horizontalAlignment === 'center') {\n                hPos = (cell.width / 2) - (cell.text.width / 2);\n            }\n            if (cell.verticalAlignment === 'top') {\n                vPos = paddingTop + cell.text.height;\n            } else if (cell.verticalAlignment === 'bottom') {\n                vPos = cell.height - paddingBottom - cell.text.height;\n            }\n            cell.text.x = cell.x + hPos;\n            cell.text.y = cell.y + vPos;\n            fillText(cell.text.value, cell.text.x, cell.text.y);\n        }\n        function getFrozenColumnsWidth() {\n            var w = 0,\n                s = self.getVisibleSchema(),\n                x = 0,\n                n = Math.min(self.frozenColumn, s.length),\n                column;\n            while (x < n) {\n                column = s[self.orders.columns[x]];\n                w += ((self.sizes.columns[column[self.uniqueId]] || column.width || self.style.cellWidth) * self.scale);\n                x += 1;\n            }\n            return w;\n        }\n        /**\n         * Redraws the grid. No matter what the change, this is the only method required to refresh everything.\n         * @memberof canvasDatagrid\n         * @name draw\n         * @method\n         */\n         // r = literal row index\n         // rd = row data array\n         // i = user order index\n         // o = literal data index\n         // y = y drawing cursor\n         // x = x drawing cursor\n         // s = visible schema array\n         // cx = current x drawing cursor sub calculation var\n         // cy = current y drawing cursor sub calculation var\n         // a = static cell (like corner cell)\n         // p = perf counter\n         // l = data length\n         // u = current cell\n         // h = current height\n         // w = current width\n        self.draw = function (internal) {\n            if (self.dispatchEvent('beforedraw', {})) { return; }\n            if (!self.isChildGrid && (!self.height || !self.width)) {\n                return;\n            }\n            if (self.isChildGrid && internal) {\n                requestAnimationFrame(self.parentGrid.draw);\n                return;\n            }\n            if (self.intf.visible === false) {\n                return;\n            }\n            // initial values\n            var checkScrollHeight, rowHeaderCell, p, cx, cy, treeGrid, rowOpen,\n                rowHeight, cornerCell, y, x, c, h, w, s, r, rd, aCell,\n                bc = self.style.gridBorderCollapse === 'collapse',\n                selectionBorders = [],\n                moveBorders = [],\n                selectionHandles = [],\n                rowHeaders = [],\n                frozenColumnWidths = getFrozenColumnsWidth(),\n                l = self.data.length,\n                u = self.currentCell || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                cellHeight = self.style.cellHeight;\n            drawCount += 1;\n            p = performance.now();\n            self.visibleRowHeights = [];\n            // if data length has changed, there is no way to know\n            if (self.data.length > self.orders.rows.length) {\n                self.createRowOrders();\n            }\n            function drawScrollBars() {\n                var v = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-bar'\n                    },\n                    n = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-bar'\n                    },\n                    vb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-box'\n                    },\n                    nb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-box'\n                    },\n                    co = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        isCorner: true,\n                        isScrollBoxCorner: true,\n                        style: 'scroll-box-corner'\n                    },\n                    m = (self.style.scrollBarBoxMargin * 2),\n                    d = self.style.scrollBarBoxMargin * 0.5;\n                self.ctx.strokeStyle = self.style.scrollBarBorderColor;\n                self.ctx.lineWidth = self.style.scrollBarBorderWidth;\n                // vertical\n                v.x += w - self.style.scrollBarWidth - self.style.scrollBarBorderWidth - d;\n                v.y += columnHeaderCellHeight;\n                v.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                v.height = h - columnHeaderCellHeight - self.style.scrollBarWidth - d - m;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(v.x, v.y, v.width, v.height + m);\n                strokeRect(v.x, v.y, v.width, v.height + m);\n                // vertical box\n                vb.x = v.x + self.style.scrollBarBoxMargin;\n                vb.y = columnHeaderCellHeight + self.style.scrollBarBoxMargin\n                    + ((v.height - self.scrollBox.scrollBoxHeight)\n                        * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight));\n                vb.width = self.style.scrollBarBoxWidth;\n                vb.height = self.scrollBox.scrollBoxHeight;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/vertical/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (vb.height < v.height) {\n                    radiusRect(vb.x, vb.y, vb.width, vb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                // horizontal\n                n.x += rowHeaderCellWidth;\n                n.y += h - self.style.scrollBarWidth - d;\n                n.width = w - self.style.scrollBarWidth - rowHeaderCellWidth - d - m;\n                n.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(n.x, n.y, n.width + m, n.height);\n                strokeRect(n.x, n.y, n.width + m, n.height);\n                // horizontal box\n                nb.y = n.y + self.style.scrollBarBoxMargin;\n                nb.x = rowHeaderCellWidth + self.style.scrollBarBoxMargin\n                    + ((n.width - self.scrollBox.scrollBoxWidth)\n                        * (self.scrollBox.scrollLeft / self.scrollBox.scrollWidth));\n                nb.width = self.scrollBox.scrollBoxWidth;\n                nb.height = self.style.scrollBarBoxWidth;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/horizontal/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (nb.width < n.width) {\n                    radiusRect(nb.x, nb.y, nb.width, nb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                //corner\n                self.ctx.strokeStyle = self.style.scrollBarCornerBorderColor;\n                self.ctx.fillStyle = self.style.scrollBarCornerBackgroundColor;\n                co.x = n.x + n.width + m;\n                co.y = v.y + v.height + m;\n                co.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                co.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                radiusRect(co.x, co.y, co.width, co.height, 0);\n                self.ctx.stroke();\n                self.ctx.fill();\n                self.visibleCells.unshift(v);\n                self.visibleCells.unshift(vb);\n                self.visibleCells.unshift(n);\n                self.visibleCells.unshift(nb);\n                self.visibleCells.unshift(co);\n                self.scrollBox.bar = {\n                    v: v,\n                    h: n\n                };\n                self.scrollBox.box = {\n                    v: vb,\n                    h: nb\n                };\n            }\n            function createHandlesOverlayArray(cell) {\n                if (self.attributes.allowMovingSelection || self.mobile) {\n                    if (cell.selectionBorderTop && cell.selectionBorderRight && self.mobile) {\n                        selectionHandles.push([cell, 'tr']);\n                        cell.selectionHandle = 'tr';\n                    }\n                    if (cell.selectionBorderTop && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'tl']);\n                        cell.selectionHandle = 'tl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'bl']);\n                        cell.selectionHandle = 'bl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderRight\n                            && (self.attributes.selectionHandleBehavior !== 'none' || self.mobile)) {\n                        selectionHandles.push([cell, 'br']);\n                        cell.selectionHandle = 'br';\n                    }\n                }\n            }\n            function createBorderOverlayArray(cell, drawArray, propPrefix, offsetPoint) {\n                offsetPoint = offsetPoint || {x: 0, y: 0};\n                cell.selectionBorder = '';\n                if (!cell.isRowHeader\n                        && self.selections[cell.rowIndex + -offsetPoint.y]\n                        && self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) !== -1) {\n                    if ((!self.selections[cell.rowIndex - 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex - 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1\n                            || cell.rowIndex === 0)\n                            && !cell.isHeader) {\n                        drawArray.push([cell, 't']);\n                        cell[propPrefix + 'BorderTop'] = true;\n                        cell[propPrefix + 'Border'] += 't';\n                    }\n                    if (!self.selections[cell.rowIndex + 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex + 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'b']);\n                        cell[propPrefix + 'BorderBottom'] = true;\n                        cell[propPrefix + 'Border'] += 'b';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === 0\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex - 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'l']);\n                        cell[propPrefix + 'BorderLeft'] = true;\n                        cell[propPrefix + 'Border'] += 'l';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === s.length\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'r']);\n                        cell[propPrefix + 'BorderRight'] = true;\n                        cell[propPrefix + 'Border'] += 'r';\n                    }\n                }\n            }\n            function drawCell(d, rowOrderIndex, rowIndex) {\n                return function drawEach(header, headerIndex, columnOrderIndex) {\n                    var cellStyle = header.style || 'cell',\n                        cellGridAttributes,\n                        cell,\n                        isHeader = /HeaderCell/.test(cellStyle),\n                        isCorner = /cornerCell/.test(cellStyle),\n                        isRowHeader = 'rowHeaderCell' === cellStyle,\n                        isColumnHeader = 'columnHeaderCell' === cellStyle,\n                        selected = self.selections[rowOrderIndex] && self.selections[rowOrderIndex].indexOf(columnOrderIndex) !== -1,\n                        hovered = self.hovers[d[self.uniqueId]] && self.hovers[d[self.uniqueId]].indexOf(columnOrderIndex) !== -1,\n                        active = self.activeCell.rowIndex === rowOrderIndex && self.activeCell.columnIndex === columnOrderIndex,\n                        isGrid = typeof d[header.name] === 'object' && d[header.name] !== null && d[header.name] !== undefined,\n                        activeHeader = (self.orders.rows[self.activeCell.rowIndex] === rowOrderIndex\n                                || self.orders.columns[self.activeCell.columnIndex] === columnOrderIndex)\n                            && (columnOrderIndex === -1 || rowOrderIndex === -1)\n                            ? (isRowHeader ? 'activeRowHeaderCell' : 'activeColumnHeaderCell') : false,\n                        val,\n                        f = self.formatters[header.type || 'string'],\n                        orderByArrowSize = 0,\n                        treeArrowSize = 0,\n                        cellWidth = self.sizes.columns[isRowHeader ? 'cornerCell' : header[self.uniqueId]] || header.width,\n                        ev = {\n                            value: d[header.name],\n                            row: d,\n                            header: header\n                        };\n                    if (cellStyle === 'headerCellCap') {\n                        cellWidth = w - x;\n                    }\n                    // if no data or schema are defined, a width is provided to the stub column\n                    if (cellWidth === undefined) {\n                        cellWidth = self.style.cellWidth;\n                    }\n                    cellWidth = cellWidth * self.scale;\n                    if (x + cellWidth + self.style.cellBorderWidth < 0) {\n                        x += cellWidth + self.style.cellBorderWidth;\n                    }\n                    if (active) {\n                        cellStyle = 'activeCell';\n                    }\n                    if (self.visibleRows.indexOf(rowIndex) === -1 && !isHeader) {\n                        self.visibleRows.push(rowIndex);\n                    }\n                    val = self.dispatchEvent('formatcellvalue', ev);\n                    cx = x;\n                    cy = y;\n                    if (cellStyle === 'cornerCell') {\n                        cx = 0;\n                        cy = 0;\n                    } else if (isRowHeader) {\n                        cx = 0;\n                    } else if (isHeader) {\n                        cy = 0;\n                    }\n                    cell = {\n                        type: isGrid ? 'canvas-datagrid-cell' : header.type,\n                        style: cellStyle,\n                        nodeType: 'canvas-datagrid-cell',\n                        x: cx,\n                        y: cy,\n                        horizontalAlignment: self.style[cellStyle + 'HorizontalAlignment'],\n                        verticalAlignment: self.style[cellStyle + 'VerticalAlignment'],\n                        offsetTop: self.canvasOffsetTop + cy,\n                        offsetLeft: self.canvasOffsetLeft + cx,\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        active: active || activeHeader,\n                        hovered: hovered,\n                        selected: selected,\n                        width: cellWidth,\n                        height: cellHeight,\n                        offsetWidth: cellWidth,\n                        offsetHeight: cellHeight,\n                        parentNode: self.intf.parentNode,\n                        offsetParent: self.intf.parentNode,\n                        data: d,\n                        isCorner: isCorner,\n                        isHeader: isHeader,\n                        isColumnHeader: isColumnHeader,\n                        isHeaderCellCap: !!header.isHeaderCellCap,\n                        isRowHeader: isRowHeader,\n                        rowOpen: rowOpen,\n                        header: header,\n                        columnIndex: columnOrderIndex,\n                        rowIndex: rowOrderIndex,\n                        sortColumnIndex: headerIndex,\n                        sortRowIndex: rowIndex,\n                        isGrid: isGrid,\n                        isNormal: !isGrid && !isCorner && !isHeader,\n                        gridId: (self.attributes.name || '') + d[self.uniqueId] + ':' + header[self.uniqueId],\n                        parentGrid: self.intf,\n                        innerHTML: '',\n                        activeHeader: activeHeader,\n                        value: isHeader && !isRowHeader ? (header.title || header.name) : d[header.name]\n                    };\n                    ev.cell = cell;\n                    cell.userHeight = cell.isHeader ? self.sizes.rows[-1] : rowHeight;\n                    cell.userWidth = cell.isHeader ? self.sizes.columns.cornerCell : self.sizes.columns[header[self.uniqueId]];\n                    cell[self.uniqueId] = d[self.uniqueId];\n                    self.visibleCells.unshift(cell);\n                    if (self.dispatchEvent('beforerendercell', ev)) { return; }\n                    self.ctx.fillStyle = self.style[cellStyle + 'BackgroundColor'];\n                    self.ctx.strokeStyle = self.style[cellStyle + 'BorderColor'];\n                    self.ctx.lineWidth = self.style[cellStyle + 'BorderWidth'];\n                    if (hovered) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'HoverBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'HoverBorderColor'];\n                    }\n                    if (selected) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'SelectedBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'SelectedBorderColor'];\n                    }\n                    if (activeHeader) {\n                        self.ctx.fillStyle = self.style[activeHeader + 'BackgroundColor'];\n                    }\n                    self.dispatchEvent('rendercell', ev);\n                    if (cell.isGrid) {\n                        if (cell.height !== rowHeight) {\n                            cell.height = rowHeight || self.style.cellHeightWithChildGrid;\n                            checkScrollHeight = true;\n                        }\n                        cell.width = self.sizes.columns[header[self.uniqueId]] || self.style.cellWidthWithChildGrid;\n                    }\n                    if (rowOpen && !cell.isRowHeader) {\n                        cell.height = self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight;\n                    }\n                    if (!cell.isGrid) {\n                        fillRect(cx, cy, cell.width, cell.height);\n                        strokeRect(cx, cy, cell.width, cell.height);\n                    }\n                    self.ctx.save();\n                    radiusRect(cell.x, cell.y, cell.width, cell.height, 0);\n                    self.ctx.clip();\n                    self.dispatchEvent('afterrendercell', ev);\n                    if (cell.height !== cellHeight && !(rowOpen && !cell.isRowHeader)) {\n                        self.sizes.rows[isHeader ? -1 : d[self.uniqueId]] = cell.height;\n                        checkScrollHeight = true;\n                    }\n                    if (cell.width !== cellWidth) {\n                        self.sizes.columns[header[self.uniqueId]] = cell.width;\n                        checkScrollHeight = true;\n                    }\n                    if (isRowHeader && self.attributes.tree) {\n                        if (!self.dispatchEvent('rendertreearrow', ev)) {\n                            treeArrowSize = drawTreeArrow(cell, self.style[cellStyle + 'PaddingLeft'], cy, 0);\n                        }\n                    }\n                    if ((self.attributes.showRowNumbers && isRowHeader)\n                            || !isRowHeader) {\n                        if (cell.isGrid && !self.dispatchEvent('beforerendercellgrid', ev)) {\n                            if (!self.childGrids[cell.gridId]) {\n                                cellGridAttributes = self.args.cellGridAttributes || self.args;\n                                cellGridAttributes.name = self.attributes.saveAppearance ? cell.gridId : undefined;\n                                cellGridAttributes.parentNode = cell;\n                                cellGridAttributes.data = d[header.name];\n                                cellGridAttributes.style = cellGridAttributes.style || self.style;\n                                ev.cellGridAttributes = cellGridAttributes;\n                                if (self.dispatchEvent('beforecreatecellgrid', ev)) { return; }\n                                self.childGrids[cell.gridId] = self.createGrid(cellGridAttributes);\n                                self.sizes.rows[rd[self.uniqueId]]\n                                    = self.sizes.rows[rd[self.uniqueId]] || self.style.cellGridHeight;\n                                checkScrollHeight = true;\n                            }\n                            cell.grid = self.childGrids[cell.gridId];\n                            cell.grid.parentNode = cell;\n                            cell.grid.visible = true;\n                            cell.grid.draw();\n                            self.dispatchEvent('rendercellgrid', ev);\n                        } else if (!cell.isGrid) {\n                            if (self.childGrids[cell.gridId]) {\n                                self.childGrids[cell.gridId].parentNode.offsetHeight = 0;\n                            }\n                            if (isHeader && self.orderBy === header.name) {\n                                if (!self.dispatchEvent('renderorderbyarrow', ev)) {\n                                    orderByArrowSize = drawOrderByArrow(cx + self.style[cellStyle + 'PaddingLeft'], 0);\n                                }\n                            }\n                            self.ctx.fillStyle = self.style[cellStyle + 'Color'];\n                            if (hovered) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'HoverColor'];\n                            }\n                            if (selected) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'SelectedColor'];\n                            }\n                            if (activeHeader) {\n                                self.ctx.fillStyle = self.style[activeHeader + 'Color'];\n                            }\n                            self.ctx.font = (self.style[cellStyle + 'FontHeight'] * self.scale) + 'px ' + self.style[cellStyle + 'FontName'];\n                            cell.fontHeight = (self.style[cellStyle + 'FontHeight'] * self.scale);\n                            cell.treeArrowWidth = treeArrowSize;\n                            cell.orderByArrowWidth = orderByArrowSize;\n                            val = val !== undefined ? val : f\n                                ? f(ev) : '';\n                            if (val === undefined && !f) {\n                                val = '';\n                                console.warn('canvas-datagrid: Unknown format '\n                                    + header.type + ' add a cellFormater');\n                            }\n                            cell.formattedValue = ((val !== undefined && val !== null) ? val : '').toString();\n                            if (self.columnFilters && self.columnFilters[val] !== undefined && isHeader) {\n                                cell.formattedValue = self.attributes.filterTextPrefix + val;\n                            }\n                            if (!self.dispatchEvent('rendertext', ev)) {\n                                if (cell.innerHTML || header.type === 'html') {\n                                    drawHtml(cell);\n                                } else {\n                                    drawText(cell);\n                                }\n                            }\n                        }\n                    }\n                    if (active) {\n                        aCell = cell;\n                    }\n                    createBorderOverlayArray(cell, selectionBorders, 'selection');\n                    // createBorderOverlayArray calculates data for createHandlesOverlayArray so it must go 2nd\n                    createHandlesOverlayArray(cell);\n                    if (self.movingSelection) {\n                        createBorderOverlayArray(cell, moveBorders, 'move', self.moveOffset);\n                    }\n                    self.ctx.restore();\n                    x += cell.width + (bc ? 0 : self.style.cellBorderWidth);\n                    return cell.width;\n                };\n            }\n            function drawRowHeader(rowData, index, rowOrderIndex) {\n                var a;\n                if (self.attributes.showRowHeaders) {\n                    x = 0;\n                    rowHeaderCell = {'rowHeaderCell': index + 1 };\n                    rowHeaderCell[self.uniqueId] = rowData[self.uniqueId];\n                    a = {\n                        name: 'rowHeaderCell',\n                        width: self.style.rowHeaderCellWidth,\n                        style: 'rowHeaderCell',\n                        type: 'string',\n                        data: rowData[self.uniqueId],\n                        index: -1\n                    };\n                    a[self.uniqueId] = rowData[self.uniqueId];\n                    rowOpen = self.openChildren[rowData[self.uniqueId]];\n                    drawCell(rowHeaderCell, index, rowOrderIndex)(a, -1, -1);\n                }\n            }\n            function drawHeaders() {\n                var d, g = s.length, i, o, columnHeaderCell, header, nonFrozenHeaderWidth;\n                function drawHeaderColumnRange(start, end) {\n                    end = Math.min(end, g);\n                    for (o = start; o < end; o += 1) {\n                        i = self.orders.columns[o];\n                        header = s[i];\n                        d = {\n                            title: header.title,\n                            name: header.name,\n                            width: header.width || self.style.cellWidth,\n                            style: 'columnHeaderCell',\n                            type: 'string',\n                            index: o,\n                            order: i\n                        };\n                        columnHeaderCell = {'columnHeaderCell': header.title || header.name};\n                        columnHeaderCell[self.uniqueId] = 'h' + header[self.uniqueId];\n                        d[self.uniqueId] = header[self.uniqueId];\n                        x += drawCell(columnHeaderCell, -1, -1)(d, o, i);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                }\n                rowHeaders.forEach(function (rArgs, rhIndex) {\n                    y = rArgs[3];\n                    cellHeight = rArgs[4];\n                    if (rhIndex === self.frozenRow) {\n                        self.ctx.save();\n                        radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                        self.ctx.clip();\n                    }\n                    drawRowHeader(rArgs[0], rArgs[1], rArgs[2]);\n                });\n                self.ctx.restore();\n                if (self.attributes.showColumnHeaders) {\n                    x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    x += frozenColumnWidths;\n                    y = 0;\n                    // cell height might have changed during drawing\n                    cellHeight = self.getColumnHeaderCellHeight();\n                    drawHeaderColumnRange(self.scrollIndexLeft + self.frozenColumn, g);\n                    nonFrozenHeaderWidth = x;\n                    x = self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    drawHeaderColumnRange(0, self.frozenColumn);\n                    // fill in the space right of the headers\n                    x = nonFrozenHeaderWidth;\n                    if (x < w) {\n                        c = {\n                            name: '',\n                            width: self.style.scrollBarWidth,\n                            style: 'headerCellCap',\n                            isHeaderCell: true,\n                            isHeaderCellCap: true,\n                            type: 'string',\n                            index: s.length\n                        };\n                        c[self.uniqueId] = 'columnHeaderCell';\n                        drawCell({endCap: ''}, -1, -1)(c, -1, -1);\n                    }\n                    // fill in the space right of the headers\n                    if (self.attributes.showRowHeaders) {\n                        cornerCell = {'cornerCell': '' };\n                        cornerCell[self.uniqueId] = 'cornerCell';\n                        x = 0;\n                        c = {\n                            name: 'cornerCell',\n                            width: self.style.rowHeaderCellWidth,\n                            style: 'cornerCell',\n                            type: 'string',\n                            index: -1\n                        };\n                        c[self.uniqueId] = 'cornerCell';\n                        drawCell(cornerCell, -1, -1)(c, -1, -1);\n                    }\n                }\n            }\n            function drawRow(r, d) {\n                var i, treeHeight, rowSansTreeHeight, o, g = s.length;\n                if (y - (cellHeight * 2) > h) {\n                    return false;\n                }\n                rd = self.data[r];\n                rowOpen = self.openChildren[rd[self.uniqueId]];\n                rowSansTreeHeight = (self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight) * self.scale;\n                treeHeight = (rowOpen ? self.sizes.trees[rd[self.uniqueId]] : 0) * self.scale;\n                rowHeight = (rowSansTreeHeight + treeHeight);\n                if (y < -rowHeight) {\n                    return false;\n                }\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                cellHeight = rowHeight;\n                if (self.attributes.allowFreezingColumns) {\n                    x += frozenColumnWidths;\n                }\n                //draw normal columns\n                for (o = (self.scrollIndexLeft + self.frozenColumn); o < g; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        self.scrollIndexRight = o;\n                        self.scrollPixelRight = x;\n                        break;\n                    }\n                }\n                //draw frozen columns\n                x = 0;\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                for (o = 0; o < self.frozenColumn; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        break;\n                    }\n                }\n                self.lastFrozenColumnPixel = x;\n                // cell height might have changed during drawing\n                cellHeight = rowHeight;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                // don't draw a tree for the new row\n                treeGrid = self.childGrids[rd[self.uniqueId]];\n                if (r !== self.data.length && rowOpen) {\n                    treeGrid.visible = true;\n                    treeGrid.parentNode = {\n                        offsetTop: y + rowSansTreeHeight + self.canvasOffsetTop,\n                        offsetLeft: rowHeaderCellWidth - 1 + self.canvasOffsetLeft,\n                        offsetHeight: treeHeight,\n                        offsetWidth: self.width - rowHeaderCellWidth - self.style.scrollBarWidth - 1,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: self.style,\n                        nodeType: 'canvas-datagrid-tree',\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        rowIndex: r\n                    };\n                    self.visibleCells.unshift({\n                        rowIndex: r,\n                        columnIndex: 0,\n                        y: treeGrid.parentNode.offsetTop,\n                        x: treeGrid.parentNode.offsetLeft,\n                        height: treeGrid.height,\n                        width: treeGrid.width,\n                        style: 'tree-grid',\n                        type: treeGrid.parentNode.nodeType\n                    });\n                    treeGrid.draw();\n                } else if (treeGrid) {\n                    treeGrid.parentNode.offsetHeight = 0;\n                    delete self.sizes.trees[rd[self.uniqueId]];\n                }\n                rowHeaders.push([rd, r, d, y, rowHeight]);\n                self.visibleRowHeights[r] = rowHeight;\n                y += cellHeight + (bc ? 0 : self.style.cellBorderWidth);\n                return true;\n            }\n            function initDraw() {\n                self.visibleRows = [];\n                s = self.getVisibleSchema();\n                self.visibleCells = [];\n                self.canvasOffsetTop = self.isChildGrid ? self.parentNode.offsetTop : 0;\n                self.canvasOffsetLeft = self.isChildGrid ? self.parentNode.offsetLeft : 0;\n                h = self.height;\n                w = self.width;\n                if (!self.isChildGrid) {\n                    self.ctx.scale(window.devicePixelRatio, window.devicePixelRatio);\n                }\n            }\n            function drawBackground() {\n                radiusRect(0, 0, w, h, 0);\n                self.ctx.clip();\n                self.ctx.fillStyle = self.style.gridBackgroundColor;\n                fillRect(0, 0, w, h);\n            }\n            function drawFrozenRows() {\n                var n, ln = Math.min(self.data.length, self.frozenRow);\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                y = columnHeaderCellHeight;\n                for (r = 0; r < ln; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.allowFreezingRows) {\n                    // HACK great, another stupid magic number.\n                    // Background will appear as a 0.5px artifact behind the row freeze bar without this hack\n                    y += self.style.frozenMarkerBorderWidth + self.style.frozenMarkerWidth - 0.4999999999;\n                }\n                self.lastFrozenRowPixel = y;\n            }\n            function drawRows() {\n                self.ctx.save();\n                if (self.frozenRow > 0) {\n                    radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                    self.ctx.clip();\n                }\n                var o, n, i, g = s.length;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                if (!self.attributes.snapToRow) {\n                    y += -self.scrollBox.scrollTop + self.scrollPixelTop;\n                }\n                for (r = self.frozenRow + self.scrollIndexTop; r < l; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        self.scrollIndexBottom = r;\n                        self.scrollPixelBottom = y;\n                        break;\n                    }\n                }\n                if (self.attributes.showNewRow) {\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    rowHeight = cellHeight = self.style.cellHeight;\n                    rowOpen = false;\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        x += drawCell(self.newRow, self.data.length, self.data.length)(s[i], i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    rowHeaders.push([self.newRow, self.data.length, self.data.length, y, rowHeight]);\n                }\n                self.ctx.restore();\n            }\n            function drawMoveMarkers() {\n                if (!self.movingSelection) { return; }\n                self.ctx.lineWidth = self.style.moveOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.moveOverlayBorderColor;\n                self.ctx.setLineDash(self.style.moveOverlayBorderSegments);\n                moveBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n                self.ctx.setLineDash([]);\n            }\n            function drawReorderMarkers() {\n                if (!self.reorderObject) { return; }\n                var b = {\n                        height: self.reorderObject.height,\n                        width: self.reorderObject.width,\n                        x: self.reorderObject.x + self.reorderObject.dragOffset.x,\n                        y: self.reorderObject.y + self.reorderObject.dragOffset.y\n                    },\n                    m = {\n                        width: w,\n                        height: h,\n                        x: 0,\n                        y: 0\n                    };\n                self.ctx.fillStyle = self.style.reorderMarkerBackgroundColor;\n                self.ctx.lineWidth = self.style.reorderMarkerBorderWidth;\n                self.ctx.strokeStyle = self.style.reorderMarkerBorderColor;\n                if (self.dragMode === 'row-reorder') {\n                    b.width = w;\n                    b.x = 0;\n                    m.width = w;\n                    m.height = self.currentCell.height;\n                    m.y = self.currentCell.y;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.rowIndex !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex > -1\n                            && self.currentCell.rowIndex < l) {\n                        addBorderLine(m, self.reorderTarget.sortRowIndex > self.reorderObject.sortRowIndex ? 'b' : 't');\n                    }\n                } else if (self.dragMode === 'column-reorder' && self.reorderObject) {\n                    b.height = h;\n                    b.y = 0;\n                    m.height = h;\n                    m.width = self.currentCell.width;\n                    m.y = 0;\n                    m.x = self.currentCell.x;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.columnIndex !== self.reorderObject.columnIndex\n                            && self.currentCell.columnIndex > -1\n                            && self.currentCell.columnIndex < s.length) {\n                        addBorderLine(m, self.reorderTarget.sortColumnIndex > self.reorderObject.sortColumnIndex ? 'r' : 'l');\n                    }\n                }\n            }\n            function drawBorder() {\n                self.ctx.lineWidth = self.style.gridBorderWidth;\n                self.ctx.strokeStyle = self.style.gridBorderColor;\n                strokeRect(0, 0, self.width, self.height);\n            }\n            function drawSelectionBorders() {\n                self.ctx.lineWidth = self.style.selectionOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.selectionOverlayBorderColor;\n                function dsb(c) {\n                    addBorderLine(c[0], c[1]);\n                }\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.save();\n                clipFrozenArea(0);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(1);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(2);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n            }\n            function drawSelectionHandles() {\n                if (self.mobile || self.attributes.allowMovingSelection) {\n                    self.ctx.lineWidth = self.style.selectionHandleBorderWidth;\n                    self.ctx.strokeStyle = self.style.selectionHandleBorderColor;\n                    self.ctx.fillStyle = self.style.selectionHandleColor;\n                    selectionHandles.forEach(function (c) {\n                        addselectionHandle(c[0], c[1]);\n                        var az = self.attributes.touchSelectHandleZone / 2,\n                            ax = c[0].x + (c[1] === 'tl' || c[1] === 'bl' ? 0 : c[0].width) - az,\n                            ay = c[0].y + (c[1] === 'bl' || c[1] === 'br' ? c[0].height : 0) - az;\n                        self.visibleCells.unshift({\n                            x: ax,\n                            y: ay,\n                            height: self.style.selectionHandleSize + az,\n                            width: self.style.selectionHandleSize + az,\n                            style: 'selection-handle-' + c[1]\n                        });\n                    });\n                }\n            }\n            function drawActiveCell() {\n                if (!aCell) { return; }\n                self.ctx.save();\n                var cl = self.activeCell.columnIndex + 1 > self.frozenColumn || self.activeCell.rowIndex + 1 > self.frozenRow,\n                    acx = cl ? self.lastFrozenColumnPixel : 0,\n                    acy = cl ? self.lastFrozenRowPixel : 0,\n                    acw = cl ? self.width - self.lastFrozenColumnPixel : self.width,\n                    ach = cl ? self.height - self.lastFrozenRowPixel : self.height;\n                radiusRect(acx, acy, acw, ach, 0);\n                self.ctx.clip();\n                if (self.attributes.selectionMode === 'row') {\n                    if (self.activeCell && self.activeCell.rowIndex === aCell.rowIndex) {\n                        self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                        self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                        strokeRect(0, aCell.y, self.getHeaderWidth() + rowHeaderCellWidth, self.visibleRowHeights[aCell.rowIndex]);\n                    }\n                } else {\n                    self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                    self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                    strokeRect(aCell.x, aCell.y, aCell.width, aCell.height);\n                }\n                self.ctx.restore();\n            }\n            function drawFrozenMarkers() {\n                var my = self.lastFrozenRowPixel - self.style.frozenMarkerWidth,\n                    mx = self.lastFrozenColumnPixel - self.style.frozenMarkerBorderWidth,\n                    xHover = self.currentCell && self.currentCell.style === 'frozen-row-marker',\n                    yHover = self.currentCell && self.currentCell.style === 'frozen-column-marker';\n                self.ctx.lineWidth = self.style.frozenMarkerBorderWidth;\n                if (self.attributes.allowFreezingColumns) {\n                    self.ctx.fillStyle = yHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = yHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    strokeRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    self.visibleCells.unshift({\n                        x: mx,\n                        y: 0,\n                        height: self.height,\n                        width: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        style: 'frozen-column-marker'\n                    });\n                }\n                if (self.attributes.allowFreezingRows) {\n                    self.ctx.fillStyle = xHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = xHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    strokeRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    self.visibleCells.unshift({\n                        x: 0,\n                        y: my,\n                        height: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        width: self.width,\n                        style: 'frozen-row-marker'\n                    });\n                }\n                if (self.freezeMarkerPosition) {\n                    self.ctx.fillStyle = self.style.frozenMarkerActiveColor;\n                    self.ctx.strokeStyle = self.style.frozenMarkerActiveBorderColor;\n                    if (self.dragMode === 'frozen-column-marker') {\n                        fillRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                        strokeRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                    } else {\n                        fillRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                        strokeRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                    }\n                }\n            }\n            function drawPerfLines() {\n                if (!self.attributes.showPerformance) { return; }\n                var pw = 250,\n                    px = self.width - pw - self.style.scrollBarWidth - (self.style.scrollBarBorderWidth * 2),\n                    py = columnHeaderCellHeight,\n                    ph = 100;\n                if (scrollDebugCounters.length === 0) { scrollDebugCounters = self.fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (touchPPSCounters.length === 0) { touchPPSCounters = self.fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (entityCount.length === 0) { entityCount = self.fillArray(0, perfWindowSize, 1, 0); }\n                self.ctx.lineWidth = 0.5;\n                function dpl(name, perfArr, arrIndex, max, color, useAbs, rowIndex) {\n                    var v;\n                    drawPerfLine(pw, ph, px, py, perfArr, arrIndex, max, color, useAbs);\n                    self.ctx.fillStyle = color;\n                    fillRect(3 + px, py + 9 + (rowIndex * 11), 8, 8);\n                    self.ctx.fillStyle = '#999999';\n                    v = arrIndex !== undefined ? perfArr[0][arrIndex] : perfArr[0];\n                    fillText(name + ' ' + (isNaN(v) ? 0 : v).toFixed(3), 14 + px, py + 16 + (rowIndex * 11));\n                }\n                self.ctx.textAlign = 'left';\n                self.ctx.font = '8px sans-serif';\n                self.ctx.fillStyle = 'rgba(29, 25, 26, 1.00)';\n                fillRect(px, py, pw, ph);\n                [['Scroll Height', scrollDebugCounters, 0, self.scrollBox.scrollHeight, 'rgba(248, 33, 103, 1.00)', false],\n                    ['Scroll Width', scrollDebugCounters, 1, self.scrollBox.scrollWidth, 'rgba(66, 255, 27, 1.00)', false],\n                    ['Performance', perfCounters, undefined, 200, 'rgba(252, 255, 37, 1.00)', false],\n                    ['Entities', entityCount, undefined, 1500, 'rgba(76, 231, 239, 1.00)', false],\n                    ['TouchPPSX', touchPPSCounters, 0, 1000, 'rgba(246, 102, 24, 1.00)', true],\n                    ['TouchPPSY', touchPPSCounters, 1, 1000, 'purple', true]\n                    ].forEach(function (i, index) {\n                    i.push(index);\n                    dpl.apply(null, i);\n                });\n                self.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n                entityCount.pop();\n                entityCount.unshift(self.visibleCells.length);\n                scrollDebugCounters.pop();\n                scrollDebugCounters.unshift([self.scrollBox.scrollTop, self.scrollBox.scrollLeft]);\n                touchPPSCounters.pop();\n                touchPPSCounters.unshift([self.yPPS, self.xPPS]);\n            }\n            function drawDebug() {\n                self.ctx.save();\n                var d;\n                if (self.attributes.showPerformance || self.attributes.debug) {\n                    if (perfCounters.length === 0) { perfCounters = self.fillArray(0, perfWindowSize, 1, 0); }\n                    perfCounters.pop();\n                    perfCounters.unshift(performance.now() - p);\n                }\n                if (!self.attributes.debug) {\n                    self.ctx.restore();\n                    return;\n                }\n                self.ctx.font = '14px sans-serif';\n                d = {};\n                d.perf = (perfCounters.reduce(function (a, b) {\n                    return a + b;\n                }, 0) / Math.min(drawCount, perfCounters.length)).toFixed(1);\n                d.htmlImages = Object.keys(self.htmlImageCache).length;\n                d.reorderObject = 'x: ' + (self.reorderObject || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderObject || {rowIndex: 0}).rowIndex;\n                d.reorderTarget = 'x: ' + (self.reorderTarget || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderTarget || {rowIndex: 0}).rowIndex;\n                d.scale = self.scale;\n                d.startScale = self.startScale;\n                d.scaleDelta = self.scaleDelta;\n                d.zoomDeltaStart = self.zoomDeltaStart;\n                d.touchLength = self.touchLength;\n                d.touches = 'y0: ' + (self.touchPosition || {y: 0}).y + ' y1: ' + (self.touchPosition1 || {y: 0}).y;\n                d.scrollBox = self.scrollBox.toString();\n                d.scrollIndex = 'x: ' + self.scrollIndexLeft + ', y: ' + self.scrollIndexTop;\n                d.scrollPixel = 'x: ' + self.scrollPixelLeft + ', y: ' + self.scrollPixelTop;\n                d.canvasOffset = 'x: ' + self.canvasOffsetLeft + ', y: ' + self.canvasOffsetTop;\n                d.touchDelta = 'x: ' + self.touchDelta.x + ', y: ' + self.touchDelta.y;\n                d.touchAnimateTo = 'x: ' + self.touchAnimateTo.x + ', y: ' + self.touchAnimateTo.y;\n                d.scrollAnimation = 'x: ' + self.scrollAnimation.x + ', y: ' + self.scrollAnimation.y;\n                d.touchPPS = 'x: ' + self.xPPS + ', y: ' + self.yPPS;\n                d.touchPPST = 'x: ' + self.xPPST + ', y: ' + self.yPPST;\n                d.touchDuration = self.touchDuration;\n                d.pointerLockPosition =  self.pointerLockPosition ?\n                        self.pointerLockPosition.x + ', ' + self.pointerLockPosition.y : '';\n                d.size = 'w: ' + self.width + ', h: ' + self.height;\n                d.mouse = 'x: ' + self.mouse.x + ', y: ' + self.mouse.y;\n                d.touch = !self.touchStart\n                    ? '' : 'x: ' + self.touchStart.x + ', y: ' + self.touchStart.y;\n                d.entities = self.visibleCells.length;\n                d.hasFocus = self.hasFocus;\n                d.dragMode = self.dragMode;\n                if (self.currentCell) {\n                    d.columnIndex = self.currentCell.columnIndex;\n                    d.rowIndex = self.currentCell.rowIndex;\n                    d.sortColumnIndex = self.currentCell.sortColumnIndex;\n                    d.sortRowIndex = self.currentCell.sortRowIndex;\n                    d.context = self.currentCell.context;\n                    d.dragContext = self.currentCell.dragContext;\n                    d.style = self.currentCell.style;\n                    d.type = self.currentCell.type;\n                }\n                self.ctx.textAlign = 'right';\n                self.ctx.fillStyle = 'rgba(0, 0, 0, .60)';\n                fillRect(0, 0, self.width, self.height);\n                Object.keys(d).forEach(function (key, index) {\n                    var m = key + ': ' + d[key],\n                        lh = 14;\n                    self.ctx.fillStyle = 'rgba(37, 254, 21, 1)';\n                    fillText(m, w - 20, 140 + (index * lh));\n                });\n                self.ctx.restore();\n            }\n            self.ctx.save();\n            initDraw();\n            drawBackground();\n            drawFrozenRows();\n            drawRows();\n            drawActiveCell();\n            drawHeaders();\n            drawFrozenMarkers();\n            drawSelectionBorders();\n            drawSelectionHandles();\n            drawReorderMarkers();\n            drawMoveMarkers();\n            drawScrollBars();\n            if (checkScrollHeight) {\n                self.resize(true);\n            }\n            drawBorder();\n            drawDebug();\n            drawPerfLines();\n            if (self.dispatchEvent('afterdraw', {})) { return; }\n            self.ctx.restore();\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var wheeling;\n        self.stopPropagation = function (e) { e.stopPropagation(); };\n        /**\n         * Adds an event listener to the given event.\n         * @memberof canvasDatagrid\n         * @name addEventListener\n         * @method\n         * @param {string} ev The name of the event to subscribe to.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.addEventListener = function (ev, fn) {\n            self.events[ev] = self.events[ev] || [];\n            self.events[ev].unshift(fn);\n        };\n        /**\n         * Removes the given listener function from the given event.  Must be an actual reference to the function that was bound.\n         * @memberof canvasDatagrid\n         * @name removeEventListener\n         * @method\n         * @param {string} ev The name of the event to unsubscribe from.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.removeEventListener = function (ev, fn) {\n            (self.events[ev] || []).forEach(function removeEachListener(sfn, idx) {\n                if (fn === sfn) {\n                    self.events[ev].splice(idx, 1);\n                }\n            });\n        };\n        /**\n         * Fires the given event, padding an event object to the event subscribers.\n         * @memberof canvasDatagrid\n         * @name dispatchEvent\n         * @method\n         * @param {number} ev The name of the event to dispatch.\n         * @param {number} e The event object.\n         */\n        self.dispatchEvent = function (ev, e) {\n            var defaultPrevented;\n            function preventDefault() {\n                defaultPrevented = true;\n            }\n            if (!self.events[ev]) { return; }\n            self.events[ev].forEach(function dispatchEachEvent(fn) {\n                e.ctx = self.ctx;\n                e.preventDefault = preventDefault;\n                fn.apply(self.intf, [e]);\n            });\n            return defaultPrevented;\n        };\n        self.resize = function (drawAfterResize) {\n            if (!self.canvas) { return; }\n            var bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                cellBorder = self.style.cellBorderWidth * bm,\n                columnHeaderCellBorder = self.style.columnHeaderCellBorderWidth * bm,\n                scrollHeight,\n                scrollWidth,\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                ch = self.style.cellHeight,\n                // TODO: What the hell are these numbers!?  They are probably some value in the style.\n                scrollDragPositionOffsetY = 30,\n                scrollDragPositionOffsetX = 15;\n            scrollHeight = self.data.reduce(function reduceData(accumulator, row, rowIndex) {\n                return accumulator\n                    + (((self.sizes.rows[row[self.uniqueId]] || ch) + (self.sizes.trees[row[self.uniqueId]] || 0)) * self.scale)\n                    + cellBorder\n                    // HACK? if an expanded tree row is frozen it is necessary to add the tree row's height a second time.\n                    + (self.frozenRow > rowIndex ? (self.sizes.trees[row[self.uniqueId]] || 0) : 0);\n            }, 0) || 0;\n            scrollWidth = self.getVisibleSchema().reduce(function reduceSchema(accumulator, column) {\n                if (column.hidden) { return accumulator; }\n                return accumulator + ((self.sizes.columns[column[self.uniqueId]] || column.width || self.style.cellWidth) * self.scale) + cellBorder;\n            }, 0) || 0;\n            if (self.isChildGrid) {\n                self.width = self.parentNode.offsetWidth;\n                self.height = self.parentNode.offsetHeight;\n            } else {\n                self.height = self.canvas.offsetHeight;\n                self.width = self.canvas.offsetWidth;\n                self.canvas.width = self.width * window.devicePixelRatio;\n                self.canvas.height = self.height * window.devicePixelRatio;\n                self.canvasOffsetLeft = self.args.canvasOffsetLeft || 0;\n                self.canvasOffsetTop = self.args.canvasOffsetTop || 0;\n            }\n            if (self.attributes.showNewRow) {\n                scrollHeight += ch + cellBorder;\n            }\n            self.scrollBox.width = self.width - rowHeaderCellWidth;\n            self.scrollBox.height = self.height - columnHeaderCellHeight - columnHeaderCellBorder;\n            self.scrollBox.top = columnHeaderCellHeight + columnHeaderCellBorder;\n            self.scrollBox.left = rowHeaderCellWidth;\n            self.scrollBox.scrollHeight = scrollHeight + self.style.scrollBarWidth - self.scrollBox.height;\n            self.scrollBox.scrollWidth = scrollWidth + self.style.scrollBarWidth - self.scrollBox.width;\n            self.scrollBox.widthBoxRatio = ((self.scrollBox.width - scrollDragPositionOffsetX)\n                / (self.scrollBox.scrollWidth + self.scrollBox.width - scrollDragPositionOffsetX));\n            self.scrollBox.scrollBoxWidth = self.scrollBox.width\n                * self.scrollBox.widthBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.heightBoxRatio = ((self.scrollBox.height - scrollDragPositionOffsetY)\n                / (self.scrollBox.scrollHeight + (self.scrollBox.height - scrollDragPositionOffsetY)));\n            self.scrollBox.scrollBoxHeight = self.scrollBox.height\n                * self.scrollBox.heightBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.scrollBoxWidth = Math.max(self.scrollBox.scrollBoxWidth, self.style.scrollBarBoxMinSize);\n            self.scrollBox.scrollBoxHeight = Math.max(self.scrollBox.scrollBoxHeight, self.style.scrollBarBoxMinSize);\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            self.resizeEditInput();\n            self.scroll(true);\n            if (drawAfterResize) {\n                self.draw(true);\n            }\n            self.dispatchEvent('resize', {});\n            return true;\n        };\n        self.scroll = function (dontDraw) {\n            var bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                s = self.getVisibleSchema(),\n                cellBorder = self.style.cellBorderWidth * bm,\n                ch = self.style.cellHeight;\n            self.scrollIndexTop = 0;\n            self.scrollPixelTop = 0;\n            self.scrollIndexLeft = 0;\n            self.scrollPixelLeft = 0;\n            while (self.scrollPixelTop < self.scrollBox.scrollTop && self.scrollIndexTop < self.data.length) {\n                self.scrollPixelTop +=\n                    (((self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || ch)\n                        + (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0)) * self.scale)\n                    + cellBorder;\n                self.scrollIndexTop += 1;\n            }\n            while (self.scrollPixelLeft < self.scrollBox.scrollLeft && self.scrollIndexLeft < s.length) {\n                self.scrollPixelLeft +=\n                    ((self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]]\n                        || s[self.scrollIndexLeft].width\n                        || self.style.cellWidth) * self.scale)\n                    + cellBorder;\n                self.scrollIndexLeft += 1;\n            }\n            if (self.data.length > 0) {\n                self.scrollIndexLeft = Math.max(self.scrollIndexLeft - 1, 0);\n                self.scrollPixelLeft = Math.max(self.scrollPixelLeft\n                    - ((self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width || self.style.cellWidth) * self.scale), 0);\n                self.scrollIndexTop = Math.max(self.scrollIndexTop - 1, 0);\n                self.scrollPixelTop = Math.max((self.scrollPixelTop\n                    - ((self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || ch)\n                    + (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0)) * self.scale), 0);\n            }\n            self.ellipsisCache = {};\n            if (!dontDraw) {\n                self.draw(true);\n            }\n            //TODO: figure out why this has to be delayed for child grids\n            //BUG: wheeling event on 3rd level hierarchy fails to move input box\n            requestAnimationFrame(self.resizeEditInput);\n            self.dispatchEvent('scroll', {top: self.scrollBox.scrollTop, left: self.scrollBox.scrollLeft});\n        };\n        self.mousemove = function (e, overridePos) {\n            if (self.contextMenu || self.input) {\n                return;\n            }\n            self.mouse = overridePos || self.getLayerPos(e);\n            var ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                i,\n                vs = self.getVisibleSchema(),\n                dragBounds,\n                sBounds,\n                x = self.mouse.x,\n                y = self.mouse.y,\n                o = self.getCellAt(x, y),\n                delta,\n                ev = {NativeEvent: e, cell: o, x: x, y: y},\n                previousCell = self.currentCell;\n            clearTimeout(self.scrollTimer);\n            if (!self.isInGrid({x: x, y: y})) {\n                self.hasFocus = false;\n            }\n            if (self.dispatchEvent('mousemove', ev)) {\n                return;\n            }\n            if (o && self.currentCell && (self.currentCell.rowIndex !== o.rowIndex\n                    || self.currentCell.columnIndex !== o.columnIndex)) {\n                self.cellBoundaryCrossed = true;\n                ev.cell = previousCell;\n                self.dispatchEvent('cellmouseout', ev);\n                ev.cell = o;\n                self.dispatchEvent('cellmouseover', ev);\n            }\n            self.currentCell = o;\n            if (!self.hasFocus) {\n                return;\n            }\n            self.hovers = {};\n            if (!self.draggingItem\n                    && o\n                    && self.scrollModes.indexOf(o.context) === -1) {\n                self.dragItem = o;\n                self.dragMode = o.dragContext;\n                self.canvas.style.cursor = o.context;\n                if (o.context === 'cell' && o.data) {\n                    self.canvas.style.cursor = 'default';\n                    self.hovers[o.data[self.uniqueId]] = [o.columnIndex];\n                }\n                if ((self.selecting || self.reorderObject)\n                        && o.context === 'cell'\n                        && o.data) {\n                    sBounds = self.getSelectionBounds();\n                    delta = {\n                        x: Math.abs(self.dragStart.x - x),\n                        y: Math.abs(self.dragStart.y - y)\n                    };\n                    if (self.dragStartObject.columnIndex !== -1 && e.shiftKey) {\n                        self.dragStartObject = {\n                            rowIndex: self.activeCell.rowIndex,\n                            columnIndex: self.activeCell.columnIndex\n                        };\n                    }\n                    dragBounds = {\n                        top: Math.min(self.dragStartObject.rowIndex, o.rowIndex),\n                        left: Math.min(self.dragStartObject.columnIndex, o.columnIndex),\n                        bottom: Math.max(self.dragStartObject.rowIndex, o.rowIndex),\n                        right: Math.max(self.dragStartObject.columnIndex, o.columnIndex)\n                    };\n                    if (self.dragStartObject.columnIndex === -1) {\n                        dragBounds.left = -1;\n                        dragBounds.right = vs.length - 1;\n                        dragBounds.top = Math.min(sBounds.top, o.rowIndex);\n                        dragBounds.bottom = Math.max(sBounds.bottom, o.rowIndex);\n                    }\n                    if (self.dragStartObject.rowIndex !== o.rowIndex\n                                || self.dragStartObject.columnIndex !== o.columnIndex) {\n                        self.ignoreNextClick = true;\n                    }\n                    if (self.cellBoundaryCrossed || (delta.x === 0 && delta.y === 0) || (self.attributes.selectionMode === 'row')) {\n                        if ((self.attributes.selectionMode === 'row') || self.dragStartObject.columnIndex === -1) {\n                            self.selectRow(o.rowIndex, ctrl, null, true);\n                        } else {\n                            if (!self.dragAddToSelection && o.rowIndex !== undefined) {\n                                if (self.selections[o.rowIndex] && self.selections[o.rowIndex].indexOf(o.columnIndex) !== -1) {\n                                    self.selections[o.rowIndex].splice(self.selections[o.rowIndex].indexOf(o.columnIndex), 1);\n                                }\n                            } else {\n                                self.selections[o.rowIndex] = self.selections[o.rowIndex] || [];\n                                if (self.selections[o.rowIndex].indexOf(o.columnIndex) === -1) {\n                                    self.selections[o.rowIndex].push(o.columnIndex);\n                                }\n                            }\n                        }\n                    }\n                    if ((!self.selectionBounds || (dragBounds.top !== self.selectionBounds.top\n                            || dragBounds.left !== self.selectionBounds.left\n                            || dragBounds.bottom !== self.selectionBounds.bottom\n                            || dragBounds.right !== self.selectionBounds.right)) && !ctrl) {\n                        self.selections = [];\n                        sBounds = dragBounds;\n                        if (self.attributes.selectionMode === 'row') {\n                            for (i = sBounds.top; i <= sBounds.bottom; i += 1) {\n                                self.selectRow(i, true, null, true);\n                            }\n                        } else {\n                            self.selectArea(sBounds, true);\n                        }\n                    }\n                    self.autoScrollZone(e, x, y, ctrl);\n                }\n            }\n            self.cellBoundaryCrossed = false;\n            self.draw(true);\n        };\n        self.click = function (e, overridePos) {\n            var i,\n                ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                pos = overridePos || self.getLayerPos(e);\n            self.currentCell = self.getCellAt(pos.x, pos.y);\n            if (self.currentCell.grid !== undefined) {\n                return;\n            }\n            function checkSelectionChange() {\n                self.dispatchEvent('selectionchanged', {\n                    selectedData: self.getSelectedData(),\n                    selections: self.selections,\n                    selectionBounds: self.selectionBounds\n                });\n            }\n            if (self.input) {\n                self.endEdit();\n            }\n            if (self.ignoreNextClick) {\n                self.ignoreNextClick = false;\n                return;\n            }\n            i = self.currentCell;\n            if (self.dispatchEvent('click', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (['rowHeaderCell', 'columnHeaderCell'].indexOf(self.currentCell.style) === -1 && !ctrl) {\n                self.setActiveCell(i.columnIndex, i.rowIndex);\n            }\n            if (self.currentCell.context === 'cell') {\n                if (self.currentCell.style === 'cornerCell') {\n                    self.selectAll();\n                    self.draw();\n                    checkSelectionChange();\n                    return;\n                }\n                if (self.currentCell.style === 'columnHeaderCell') {\n                    if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                        if (self.orderBy === i.header.name) {\n                            self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                        } else {\n                            self.orderDirection = 'asc';\n                        }\n                        self.order(i.header.name, self.orderDirection);\n                        checkSelectionChange();\n                        return;\n                    }\n                    if (self.attributes.columnHeaderClickBehavior === 'select') {\n                        self.selectColumn(i.header.index, ctrl, e.shiftKey, true);\n                        checkSelectionChange();\n                        self.draw();\n                        return;\n                    }\n                }\n                self.selections[i.rowIndex] = self.selections[i.rowIndex] || [];\n                if (((self.attributes.selectionMode === 'row') || self.currentCell.style === 'rowHeaderCell')) {\n                    if (self.currentCell.style === 'rowHeaderCell'\n                            && self.attributes.tree && pos.x > 0\n                            && pos.x - self.currentCell.x < self.style.treeArrowWidth\n                            + self.style.treeArrowMarginLeft\n                            + self.style.treeArrowMarginRight + self.style.treeArrowClickRadius\n                            && pos.y - self.currentCell.y < self.style.treeArrowHeight\n                            + self.style.treeArrowMarginTop + self.style.treeArrowClickRadius\n                            && pos.y > 0) {\n                        self.toggleTree(i.rowIndex);\n                        return;\n                    }\n                }\n                if (e.shiftKey && !ctrl) {\n                    self.selectionBounds = self.getSelectionBounds();\n                    self.selectArea(undefined, false);\n                }\n            }\n            checkSelectionChange();\n            self.draw(true);\n        };\n        self.dragResizeColumn = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = self.resizingStartingWidth + pos.x - self.dragStart.x;\n            y = self.resizingStartingHeight + pos.y - self.dragStart.y;\n            if (x < self.style.minColumnWidth) {\n                x = self.style.minColumnWidth;\n            }\n            if (y < self.style.minRowHeight) {\n                y = self.style.minRowHeight;\n            }\n            if (self.dispatchEvent('resizecolumn', {x: x, y: y, draggingItem: self.draggingItem})) { return false; }\n            if (self.scrollBox.scrollLeft > self.scrollBox.scrollWidth - self.attributes.resizeScrollZone\n                    && self.dragMode === 'ew-resize') {\n                self.resize(true);\n                self.scrollBox.scrollLeft += x;\n            }\n            if (self.dragMode === 'ew-resize') {\n                self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] = x;\n                if (['rowHeaderCell', 'cornerCell'].indexOf(self.draggingItem.header.style) !== -1) {\n                    self.resize(true);\n                }\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.dragMode === 'ns-resize') {\n                if (self.draggingItem.rowOpen) {\n                    self.sizes.trees[self.draggingItem.data[self.uniqueId]] = y;\n                } else if (self.attributes.globalRowResize) {\n                    self.style.cellHeight = y;\n                } else {\n                    self.sizes.rows[self.draggingItem.data[self.uniqueId]] = y;\n                }\n                self.dispatchEvent('resizerow', {row: y});\n                self.resizeChildGrids();\n                return;\n            }\n            self.ellipsisCache = {};\n        };\n        self.stopDragResize = function () {\n            self.resize();\n            document.body.removeEventListener('mousemove', self.dragResizeColumn, false);\n            document.body.removeEventListener('mouseup', self.stopDragResize, false);\n            self.setStorageData();\n            self.draw(true);\n            self.ignoreNextClick = true;\n        };\n        self.scrollGrid = function (e) {\n            var pos = self.getLayerPos(e);\n            if (self.attributes.scrollPointerLock && self.pointerLockPosition\n                    && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                self.pointerLockPosition.x += e.movementX;\n                self.pointerLockPosition.y += e.movementY;\n                self.pointerLockPosition.x = Math.min(self.width - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.x));\n                self.pointerLockPosition.y = Math.min(self.height - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.y));\n                pos = self.pointerLockPosition;\n            }\n            self.scrollMode = self.getCellAt(pos.x, pos.y).context;\n            if (self.scrollMode === 'horizontal-scroll-box' && self.scrollStartMode !== 'horizontal-scroll-box') {\n                self.scrollStartMode = 'horizontal-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.left = self.scrollBox.scrollLeft;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box' && self.scrollStartMode !== 'vertical-scroll-box') {\n                self.scrollStartMode = 'vertical-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.top = self.scrollBox.scrollTop;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollStartMode === 'vertical-scroll-box'\n                    && self.scrollMode !== 'vertical-scroll-box') {\n                self.scrollMode = 'vertical-scroll-box';\n            }\n            if (self.scrollStartMode === 'horizontal-scroll-box'\n                    && self.scrollMode !== 'horizontal-scroll-box') {\n                self.scrollMode = 'horizontal-scroll-box';\n            }\n            clearTimeout(self.scrollTimer);\n            if (self.scrollModes.indexOf(self.scrollMode) === -1) {\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box') {\n                self.scrollBox.scrollTop = self.scrollStart.top + ((pos.y - self.dragStart.y)\n                    / self.scrollBox.heightBoxRatio);\n            } else if (self.scrollMode === 'vertical-scroll-top') {\n                self.scrollBox.scrollTop -= (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'vertical-scroll-bottom') {\n                self.scrollBox.scrollTop += (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n            if (self.scrollMode === 'horizontal-scroll-box') {\n                self.scrollBox.scrollLeft = self.scrollStart.left + ((pos.x - self.dragStart.x)\n                    / self.scrollBox.widthBoxRatio);\n            } else if (self.scrollMode === 'horizontal-scroll-right') {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'horizontal-scroll-left') {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.stopScrollGrid = function () {\n            clearTimeout(self.scrollTimer);\n            if (document.exitPointerLock) {\n                document.exitPointerLock();\n            }\n            document.body.removeEventListener('mousemove', self.scrollGrid, false);\n        };\n        self.dragReorder = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = pos.x - self.dragStart.x;\n            y = pos.y - self.dragStart.y;\n            if (!self.attributes.allowColumnReordering && self.dragMode === 'column-reorder') {\n                return;\n            }\n            if (!self.attributes.allowRowReordering && self.dragMode === 'row-reorder') {\n                return;\n            }\n            if (self.dispatchEvent('reordering', {\n                    NativeEvent: e,\n                    source: self.dragStartObject,\n                    target: self.currentCell,\n                    dragMode: self.dragMode\n                })) {\n                return;\n            }\n            if (Math.abs(x) > self.attributes.reorderDeadZone || Math.abs(y) > self.attributes.reorderDeadZone) {\n                self.reorderObject = self.draggingItem;\n                self.reorderTarget = self.currentCell;\n                self.reorderObject.dragOffset = {\n                    x: x,\n                    y: y\n                };\n                self.autoScrollZone(e, pos.x, pos.y, false);\n            }\n        };\n        self.stopDragReorder = function (e) {\n            var oIndex,\n                tIndex,\n                cr = {\n                    'row-reorder': self.orders.rows,\n                    'column-reorder': self.orders.columns\n                },\n                i = {\n                    'row-reorder': 'rowIndex',\n                    'column-reorder': 'columnIndex'\n                }[self.dragMode];\n            document.body.removeEventListener('mousemove', self.dragReorder, false);\n            document.body.removeEventListener('mouseup', self.stopDragReorder, false);\n            if (self.reorderObject\n                    && self.reorderTarget\n                    && ((self.dragMode === 'column-reorder' && self.reorderTarget.columnIndex > -1\n                        && self.reorderTarget.columnIndex < self.getVisibleSchema().length)\n                    || (self.dragMode === 'row-reorder' && self.reorderTarget.rowIndex > -1\n                        && self.reorderTarget.rowIndex < self.data.length))\n                    && self.reorderObject[i] !== self.reorderTarget[i]\n                    && !self.dispatchEvent('reorder', {\n                        NativeEvent: e,\n                        source: self.reorderObject,\n                        target: self.reorderTarget,\n                        dragMode: self.dragMode\n                    })) {\n                self.ignoreNextClick = true;\n                oIndex = cr[self.dragMode].indexOf(self.reorderObject[i]);\n                tIndex = cr[self.dragMode].indexOf(self.reorderTarget[i]);\n                cr[self.dragMode].splice(oIndex, 1);\n                cr[self.dragMode].splice(tIndex, 0, self.reorderObject[i]);\n                self.setStorageData();\n            }\n            self.reorderObject = undefined;\n            self.reorderTarget = undefined;\n            self.draw(true);\n        };\n        self.dragMove = function (e) {\n            if (self.dispatchEvent('moving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.moveOffset = {\n                x: self.currentCell.columnIndex - self.dragStartObject.columnIndex,\n                y: self.currentCell.rowIndex - self.dragStartObject.rowIndex\n            };\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopDragMove = function (e) {\n            document.body.removeEventListener('mousemove', self.dragMove, false);\n            document.body.removeEventListener('mouseup', self.stopDragMove, false);\n            var b = self.getSelectionBounds();\n            if (self.dispatchEvent('endmove', {NativeEvent: e, cell: self.currentCell})) {\n                self.movingSelection = undefined;\n                self.moveOffset = undefined;\n                self.draw(true);\n                return;\n            }\n            if (self.moveOffset) {\n                self.moveTo(self.movingSelection, b.left + self.moveOffset.x, b.top + self.moveOffset.y);\n                self.moveSelection(self.moveOffset.x, self.moveOffset.y);\n            }\n            self.movingSelection = undefined;\n            self.moveOffset = undefined;\n            self.draw(true);\n        };\n        self.freezeMove = function (e) {\n            if (self.dispatchEvent('freezemoving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.ignoreNextClick = true;\n            self.freezeMarkerPosition = pos;\n            if (self.currentCell && self.currentCell.rowIndex !== undefined && self.dragMode === 'frozen-row-marker') {\n                self.scrollBox.scrollTop = 0;\n                self.frozenRow = self.currentCell.rowIndex + 1;\n            }\n            if (self.currentCell && self.currentCell.columnIndex !== undefined && self.dragMode === 'frozen-column-marker') {\n                self.scrollBox.scrollLeft = 0;\n                self.frozenColumn = self.currentCell.columnIndex + 1;\n            }\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopFreezeMove = function (e) {\n            document.body.removeEventListener('mousemove', self.freezeMove, false);\n            document.body.removeEventListener('mouseup', self.stopFreezeMove, false);\n            self.freezeMarkerPosition = undefined;\n            if (self.dispatchEvent('endfreezemove', {NativeEvent: e})) {\n                self.frozenRow = self.startFreezeMove.x;\n                self.frozenColumn = self.startFreezeMove.y;\n                self.draw(true);\n                return;\n            }\n            self.draw(true);\n        };\n        self.mousedown = function (e, overridePos) {\n            self.lastMouseDownTarget = e.target;\n            if (self.dispatchEvent('mousedown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (e.button === 2 || self.input) { return; }\n            var ctrl = (e.ctrlKey || e.metaKey),\n                move = /-move/.test(self.dragMode),\n                freeze = /frozen-row-marker|frozen-column-marker/.test(self.dragMode),\n                resize = /-resize/.test(self.dragMode);\n            self.dragStart = overridePos || self.getLayerPos(e);\n            self.scrollStart = {\n                left: self.scrollBox.scrollLeft,\n                top: self.scrollBox.scrollTop\n            };\n            self.dragStartObject = self.getCellAt(self.dragStart.x, self.dragStart.y);\n            self.dragAddToSelection = !self.dragStartObject.selected;\n            if (!ctrl && !e.shiftKey && !/(vertical|horizontal)-scroll-(bar|box)/\n                    .test(self.dragStartObject.context)\n                    && self.currentCell\n                    && !self.currentCell.isColumnHeader\n                    && !move\n                    && !freeze\n                    && !resize) {\n                self.selections = [];\n            }\n            if (self.dragStartObject.isGrid) {\n                return;\n            }\n            if (self.scrollModes.indexOf(self.dragStartObject.context) !== -1) {\n                self.scrollMode = self.dragStartObject.context;\n                self.scrollStartMode = self.dragStartObject.context;\n                self.scrollGrid(e);\n                if (self.attributes.scrollPointerLock\n                        && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                    self.pointerLockPosition = {\n                        x: self.dragStart.x,\n                        y: self.dragStart.y\n                    };\n                    self.canvas.requestPointerLock();\n                }\n                document.body.addEventListener('mousemove', self.scrollGrid, false);\n                document.body.addEventListener('mouseup', self.stopScrollGrid, false);\n                self.ignoreNextClick = true;\n                return;\n            }\n            if (self.dragMode === 'cell') {\n                self.selecting = true;\n                if (self.attributes.selectionMode === 'row') {\n                    self.selectRow(self.dragStartObject.rowIndex, ctrl, null, true);\n                }\n                return self.mousemove(e);\n            }\n            if (move) {\n                self.draggingItem = self.dragItem;\n                self.movingSelection = self.selections.concat([]);\n                self.dragging = self.dragStartObject;\n                if (self.dispatchEvent('beginmove', {NativeEvent: e, cell: self.currentCell})) { return; }\n                document.body.addEventListener('mousemove', self.dragMove, false);\n                document.body.addEventListener('mouseup', self.stopDragMove, false);\n                return self.mousemove(e);\n            }\n            if (freeze) {\n                self.draggingItem = self.dragItem;\n                self.startFreezeMove = {\n                    x: self.frozenRow,\n                    y: self.frozenColumn\n                };\n                if (self.dispatchEvent('beginfreezemove', {NativeEvent: e})) { return; }\n                document.body.addEventListener('mousemove', self.freezeMove, false);\n                document.body.addEventListener('mouseup', self.stopFreezeMove, false);\n                return self.mousemove(e);\n            }\n            if (resize) {\n                self.draggingItem = self.dragItem;\n                if (self.draggingItem.rowOpen) {\n                    self.resizingStartingHeight = self.sizes.trees[self.draggingItem.data[self.uniqueId]];\n                } else {\n                    self.resizingStartingHeight = self.sizes.rows[self.draggingItem.data[self.uniqueId]] || self.style.cellHeight;\n                }\n                self.resizingStartingWidth = self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] || self.draggingItem.width;\n                document.body.addEventListener('mousemove', self.dragResizeColumn, false);\n                document.body.addEventListener('mouseup', self.stopDragResize, false);\n            }\n            if (['row-reorder', 'column-reorder'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragStartObject;\n                document.body.addEventListener('mousemove', self.dragReorder, false);\n                document.body.addEventListener('mouseup', self.stopDragReorder, false);\n            }\n        };\n        self.mouseup = function (e) {\n            clearTimeout(self.scrollTimer);\n            self.cellBoundaryCrossed = true;\n            self.selecting = undefined;\n            self.draggingItem = undefined;\n            self.dragStartObject = undefined;\n            if (self.dispatchEvent('mouseup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            if (self.currentCell && self.currentCell.grid !== undefined) {\n                return;\n            }\n            if (self.contextMenu || self.input) { return; }\n            if (self.dragStart && self.isInGrid(self.dragStart)) {\n                self.controlInput.focus();\n            }\n            e.preventDefault();\n        };\n        self.keydown = function (e) {\n            var i,\n                x = self.activeCell.columnIndex,\n                y = self.activeCell.rowIndex,\n                ctrl = (e.ctrlKey || e.metaKey),\n                last = self.data.length - 1,\n                cols = self.getVisibleSchema().length - 1;\n            if (self.dispatchEvent('keydown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            if (self.attributes.showNewRow) {\n                last += 1;\n            }\n            if (e.keyCode === 9) {\n                e.preventDefault();\n            }\n            // esc\n            if (e.keyCode === 27) {\n                self.selections = [];\n                self.draw(true);\n            // ctrl + a\n            } else if (ctrl && e.keyCode === 65) {\n                self.selectAll();\n            //ArrowDown\n            } else if (e.keyCode === 40) {\n                y += 1;\n            //ArrowUp\n            } else if (e.keyCode === 38) {\n                y -= 1;\n            //ArrowLeft Tab\n            } else if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {\n                x -= 1;\n            //ArrowRight Tab\n            } else if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {\n                x += 1;\n            //PageUp\n            } else if (e.keyCode === 33) {\n                y -= self.page;\n                e.preventDefault();\n            //PageDown\n            } else if (e.keyCode === 34) {\n                y += self.page;\n                e.preventDefault();\n            //Home ArrowUp\n            } else if (e.keyCode === 36 || (ctrl && e.keyCode === 38)) {\n                y = 0;\n            //End ArrowDown\n            } else if (e.keyCode === 35 || (ctrl && e.keyCode === 40)) {\n                y = self.data.length - 1;\n            //ArrowRight\n            } else if (ctrl && e.keyCode === 39) {\n                x = cols;\n            //ArrowLeft\n            } else if (ctrl && e.keyCode === 37) {\n                x = 0;\n            }\n            //Enter\n            if (e.keyCode === 13) {\n                return self.beginEditAt(x, y);\n            }\n            //Space\n            if (e.keyCode === 32) {\n                self.selections = [];\n                self.selections[Math.max(y, 0)] = [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                if (self.attributes.selectionMode === 'row') {\n                    for (i = self.selectionBounds.top; i <= self.selectionBounds.bottom; i += 1) {\n                        self.selectRow(i, ctrl, null, true);\n                    }\n                } else {\n                    self.selectArea(undefined, ctrl);\n                }\n                e.preventDefault();\n                self.draw(true);\n                return;\n            }\n            if (x < 0) {\n                x = 0;\n            }\n            if (y > last) {\n                y = last;\n            }\n            if (y < 0) {\n                y = 0;\n            }\n            if (x > cols) {\n                x = cols;\n            }\n            // Arrows\n            if (e.shiftKey && [37, 38, 39, 40].indexOf(e.keyCode) !== -1) {\n                self.selections[Math.max(y, 0)] = self.selections[Math.max(y, 0)] || [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                self.selectArea(undefined, ctrl);\n                self.draw(true);\n            }\n            if (x !== self.activeCell.columnIndex || y !== self.activeCell.rowIndex) {\n                self.scrollIntoView(x !== self.activeCell.columnIndex ? x : undefined, y !== self.activeCell.rowIndex ? y : undefined);\n                self.setActiveCell(x, y);\n                if (!e.shiftKey && self.attributes.selectionFollowsActiveCell) {\n                    if (!ctrl) {\n                        self.selections = [];\n                    }\n                    self.selections[y] = self.selections[y] || [];\n                    self.selections[y].push(x);\n                    self.dispatchEvent('selectionchanged', {\n                        selectedData: self.getSelectedData(),\n                        selections: self.selections,\n                        selectionBounds: self.selectionBounds\n                    });\n                }\n                self.draw(true);\n            }\n        };\n        self.keyup = function (e) {\n            if (self.dispatchEvent('keyup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n        };\n        self.keypress = function (e) {\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.dispatchEvent('keypress', {NativeEvent: e, cell: self.currentCell})) { return; }\n        };\n        self.dblclick = function (e) {\n            if (self.dispatchEvent('dblclick', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'columnHeaderCell') {\n                self.fitColumnToValues(self.currentCell.header.name);\n            } else if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'cornerCell') {\n                self.autosize();\n            } else if (['cell', 'activeCell'].indexOf(self.currentCell.style) !== -1) {\n                self.beginEditAt(self.currentCell.columnIndex, self.currentCell.rowIndex);\n            }\n        };\n        self.scrollWheel = function (e) {\n            var l,\n                t,\n                deltaX = e.deltaX === undefined ? e.NativeEvent.deltaX : e.deltaX,\n                deltaY = e.deltaY === undefined ? e.NativeEvent.deltaY : e.deltaY,\n                deltaMode = e.deltaMode === undefined ? e.NativeEvent.deltaMode : e.deltaMode;\n            if (wheeling) {\n                return;\n            }\n            if (self.dispatchEvent('wheel', {NativeEvent: e})) {\n                return;\n            }\n            e = e.NativeEvent || e;\n            self.touchHaltAnimation = true;\n            l = self.scrollBox.scrollLeft;\n            t = self.scrollBox.scrollTop;\n            if (self.hasFocus) {\n                //BUG Issue 42: https://github.com/TonyGermaneri/canvas-datagrid/issues/42\n                //https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\n                if (deltaMode === 1) {\n                    // line mode = 17 pixels per line\n                    deltaY = deltaY * 17;\n                }\n                if ((self.scrollBox.scrollTop < self.scrollBox.scrollHeight && deltaY > 0)\n                        || (self.scrollBox.scrollLeft < self.scrollBox.scrollWidth && deltaX > 0)\n                        || (self.scrollBox.scrollTop > 0 && deltaY < 0)\n                        || (self.scrollBox.scrollLeft > 0 && deltaX < 0)) {\n                    e.preventDefault(e);\n                }\n                wheeling = setTimeout(function () {\n                    wheeling = undefined;\n                    self.scrollBox.scrollTo(deltaX + l, deltaY + t);\n                }, 1);\n            }\n        };\n        self.pasteItem = function (clipData, x, y, mimeType) {\n            var l, s = self.getVisibleSchema(), yi = y - 1, sel = [];\n            function normalizeRowData(importingRow, existingRow, offsetX, schema, mimeType, rowIndex) {\n                var r = existingRow;\n                if (!Array.isArray(importingRow) && importingRow !== null && typeof importingRow === 'object') {\n                    importingRow = Object.keys(importingRow).map(function (colKey) {\n                        return importingRow[colKey];\n                    });\n                }\n                if (/^text\\/html/.test(mimeType)) {\n                    importingRow = importingRow.substring(4, importingRow.length - 5).split('</td><td>');\n                }\n                if (typeof importingRow === 'string') {\n                    importingRow = [importingRow];\n                }\n                sel[rowIndex] = [];\n                importingRow.forEach(function (cellData, colIndex) {\n                    var cName = schema[colIndex + offsetX].name;\n                    if (importingRow[colIndex] === undefined || importingRow[colIndex] === null) {\n                        r[cName] = existingRow[cName];\n                        return;\n                    }\n                    sel[rowIndex].push(colIndex + offsetX);\n                    r[cName] = importingRow[colIndex];\n                });\n                return r;\n            }\n            if (/^text\\/html/.test(mimeType)) {\n                if (!/^(<meta[^>]+>)?<table>/.test(clipData.substring(0, 29))) {\n                    console.warn('Unrecognized HTML format.  HTML must be a simple table, e.g.: <table><tr><td>data</td></tr></table>.  Data with the mime type text/html not in this format will not be imported as row data.');\n                    return;\n                }\n                // strip table beginning and ending off, then split at rows\n                clipData = clipData.substring(clipData.indexOf('<table><tr>') + 11, clipData.length - 13).split('</tr><tr>');\n            } else {\n                clipData = clipData.split('\\n');\n            }\n            l = clipData.length;\n            clipData.forEach(function (rowData) {\n                yi += 1;\n                self.data[yi] = normalizeRowData(rowData, self.data[yi], x, s, mimeType, yi);\n            });\n            self.selections = sel;\n            return l;\n        };\n        self.paste = function (e) {\n            var d;\n            function getItem(dti) {\n                var type = dti.type;\n                dti.getAsString(function (s) {\n                    self.pasteItem(s, self.activeCell.columnIndex, self.activeCell.rowIndex, type);\n                    self.draw();\n                });\n            }\n            d = Array.prototype.filter.call(e.clipboardData.items, function (dti) {\n                return dti.type === 'text/html';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/csv';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/plain';\n            })[0];\n            if (!d) {\n                console.warn('Cannot find supported clipboard data type.  Supported types are text/html, text/csv, text/plain.');\n                return;\n            }\n            getItem(d);\n        };\n        self.cut = function (e) {\n            self.copy(e);\n            self.forEachSelectedCell(function (data, index, colName) {\n                data[index][colName] = '';\n            });\n        };\n        self.copy = function (e) {\n            if (self.dispatchEvent('copy', {NativeEvent: e})) { return; }\n            if (!self.hasFocus || !e.clipboardData) { return; }\n            var t,\n                d,\n                rows = [],\n                trows = [],\n                sData = self.getSelectedData();\n            function fCopyCell(d) {\n                d = d === null || d === undefined ? '' : d;\n                return '<td>' + (typeof d === 'string' ? d.replace(/</g, '&lt;').replace(/>/g, '&gt;') : d) + '</td>';\n            }\n            if (sData.length > 0) {\n                sData.forEach(function (row) {\n                    if (row) {\n                        // r = array for HTML, rt = array for plain text\n                        var r = [],\n                            rt = [];\n                        Object.keys(row).forEach(function (key) {\n                            // escape strings\n                            if (row[key] !== null\n                                    && row[key] !== false\n                                    && row[key] !== undefined\n                                    && row[key].replace) {\n                                rt.push('\"' + row[key].replace(/\"/g, '\"\"') + '\"');\n                                r.push(fCopyCell(row[key]));\n                                return;\n                            }\n                            rt.push(row[key]);\n                            r.push(fCopyCell(row[key]));\n                        });\n                        rows.push(r.join(''));\n                        trows.push(rt.join(','));\n                    }\n                });\n                d = '<table><tr>' + rows.join('</tr><tr>') + '</tr></table>';\n                t = trows.join('\\n');\n                e.clipboardData.setData('text/html', d);\n                e.clipboardData.setData('text/plain', t);\n                e.clipboardData.setData('text/csv', t);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var touchTimerMs = 50,\n            touchScrollTimeout;\n        self.scrollAnimation = {};\n        self.touchDelta = {};\n        self.touchAnimateTo = {};\n        self.animationFrames = 0;\n        self.getTouchPos = function (e, touchIndex) {\n            var t = touchIndex ? e.touches[touchIndex] : e.touches[0],\n                rect = self.canvas.getBoundingClientRect(),\n                pos;\n            if (!t) { return; }\n            pos = {\n                x: t.clientX - rect.left,\n                y: t.clientY - rect.top\n            };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        // shamelessly stolen from from https://gist.github.com/gre/1650294\n        self.easingFunctions = {\n            linear: function (t) { return t; },\n            easeInQuad: function (t) { return t * t; },\n            easeOutQuad: function (t) { return t * (2 - t); },\n            easeInOutQuad: function (t) { return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t; },\n            easeInCubic: function (t) { return t * t * t; },\n            easeOutCubic: function (t) { return (--t) * t * t + 1; },\n            easeInOutCubic: function (t) { return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1; },\n            easeInQuart: function (t) { return t * t * t * t; },\n            easeOutQuart: function (t) { return 1 - (--t) * t * t * t; },\n            easeInOutQuart: function (t) { return t < 0.5 ? 8 * t  * t  * t * t : 1 - 8 * (--t) * t * t * t; },\n            easeInQuint: function (t) { return t * t * t * t * t; },\n            easeOutQuint: function (t) { return 1 + (--t) * t *  t * t * t; },\n            easeInOutQuint: function (t) { return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t; }\n        };\n        self.easing = function (t, b, c, d) {\n            return c * self.easingFunctions[self.attributes.touchEasingMethod](t / d) + b;\n        };\n        self.calculatePPSTimed = function () {\n            self.xPPST = -((self.touchDelta.x - self.touchSigmaTimed.x) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.yPPST = -((self.touchDelta.y - self.touchSigmaTimed.y) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.touchSigmaTimed = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.calculatePPS = function () {\n            self.xPPS = -((self.touchDelta.x - self.touchSigma.x) / (self.touchDelta.t - self.touchSigma.t));\n            self.yPPS = -((self.touchDelta.y - self.touchSigma.y) / (self.touchDelta.t - self.touchSigma.t));\n            self.touchSigma = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.touchEndAnimation = function () {\n            if (!self.canvas || !self.scrollBox.scrollTo) { return requestAnimationFrame(self.touchEndAnimation); }\n            var n = performance.now(),\n                d = self.attributes.touchReleaseAnimationDurationMs,\n                t;\n            t = n - self.touchDelta.t;\n            self.animationFrames += 1;\n            self.scrollAnimation.x = self.easing(t, self.touchDelta.scrollLeft, self.touchAnimateTo.x, d);\n            self.scrollAnimation.y = self.easing(t, self.touchDelta.scrollTop, self.touchAnimateTo.y, d);\n            if (t > d || (self.scrollAnimation.y === self.scrollBox.scrollTop\n                    && self.scrollAnimation.x === self.scrollBox.scrollLeft) || self.stopAnimation) {\n                return;\n            }\n            self.scrollBox.scrollTo(self.scrollAnimation.x, self.scrollAnimation.y);\n            requestAnimationFrame(self.touchEndAnimation);\n        };\n        self.touchEditCell = function (cell) {\n            self.beginEditAt(cell.columnIndex, cell.rowIndex);\n        };\n        self.touchCell = function (e) {\n            return function () {\n                clearInterval(self.calculatePPSTimer);\n                var i, pos = self.getTouchPos(e);\n                if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone) {\n                    i = self.getCellAt(pos.x, pos.y);\n                    if (!i) { return; }\n                    if (self.touchingCell && self.touchingCell.rowIndex === i.rowIndex\n                            && self.touchingCell.columnIndex === i.columnIndex) {\n                        self.touchEditCell(i);\n                        return;\n                    }\n                    if (self.input && self.input.editCell) {\n                        self.endEdit();\n                    }\n                    self.touchingCell = i;\n                    self.selectArea({\n                        top: i.rowIndex,\n                        bottom: i.rowIndex,\n                        left: i.columnIndex,\n                        right: i.columnIndex\n                    });\n                    self.draw(true);\n                }\n            };\n        };\n        self.touchstart = function (e) {\n            if (self.dispatchEvent('touchstart', {NativeEvent: e})) { return; }\n            self.disposeContextMenu();\n            clearInterval(self.calculatePPSTimer);\n            clearTimeout(self.touchContextTimeout);\n            self.touchStartEvent = e;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (e.changedTouches[0]) {\n                self.touchStart = self.getTouchPos(e);\n            }\n            if (e.touches.length === 1 && e.changedTouches[0] && !self.zoomAltered) {\n                self.touchLength = 1;\n                self.touchStart = self.touchStart || self.touchStart1;\n                self.touchScrollStart = {\n                    x: self.scrollBox.scrollLeft,\n                    y: self.scrollBox.scrollTop,\n                    t: performance.now()\n                };\n                self.touchDelta = {\n                    x: 0,\n                    y: 0,\n                    scrollLeft: self.scrollBox.scrollLeft,\n                    scrollTop: self.scrollBox.scrollTop,\n                    t: self.touchScrollStart.t\n                };\n                self.touchSigma = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchSigmaTimed = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchContextTimeout = setTimeout(function () {\n                    self.contextmenuEvent(e, self.touchStart);\n                }, self.attributes.touchContextMenuTimeMs);\n                self.calculatePPSTimer = setInterval(self.calculatePPSTimed, touchTimerMs);\n                self.startingCell = self.getCellAt(self.touchStart.x, self.touchStart.y, true);\n                if (self.startingCell && (self.startingCell.isGrid || ['tree', 'inherit'].indexOf(self.startingCell.context) !== -1)) {\n                    self.hasFocus = false;\n                    return;\n                }\n                self.hasFocus = true;\n                if (self.startingCell.isHeader) {\n                    if (self.startingCell.isRowHeader) {\n                        self.selectArea({\n                            top: self.startingCell.rowIndex,\n                            bottom: self.startingCell.rowIndex,\n                            left: 0,\n                            right: self.getVisibleSchema().length - 1,\n                        });\n                        self.draw(true);\n                    } else if (self.startingCell.isColumnHeader) {\n                        if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                            if (self.orderBy === self.startingCell.header.name) {\n                                self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                            } else {\n                                self.orderDirection = 'asc';\n                            }\n                            self.order(self.startingCell.header.name, self.orderDirection);\n                        }\n                        if (self.attributes.columnHeaderClickBehavior === 'select') {\n                            self.selectArea({\n                                top: 0,\n                                bottom: self.data.length - 1,\n                                left: self.startingCell.columnIndex,\n                                right: self.startingCell.columnIndex,\n                            });\n                            self.draw(true);\n                        }\n                    }\n                    self.touchEndEvents(e);\n                    return;\n                }\n            }\n            if (self.zoomAltered) { return; }\n            document.body.addEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.addEventListener('touchend', self.touchend, false);\n            document.body.addEventListener('touchcancel', self.touchcancel, false);\n            self.draw(true);\n        };\n        self.touchSelect = function (cell, handleType) {\n            if (cell.rowIndex === undefined || cell.columnIndex === undefined) { return; }\n            self.touchSelecting = true;\n            var bounds = self.getSelectionBounds();\n            if (handleType === 'selection-handle-bl'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex <= bounds.right) {\n                bounds.bottom = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tl'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex <= bounds.right) {\n                bounds.top = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tr'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex >= bounds.left) {\n                bounds.top = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            } else if (handleType === 'selection-handle-br'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex >= bounds.left) {\n                bounds.bottom = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            }\n            if (self.attributes.selectionMode === 'row' || cell.rowIndex === -1) {\n                bounds.left = 0;\n                bounds.right = self.getSchema().length - 1;\n            } else {\n                bounds.left = Math.max(0, bounds.left);\n            }\n            self.selectArea(bounds);\n            self.draw(true);\n        };\n        self.touchmove = function (e) {\n            var ch, rw, rScrollZone, lScrollZone, bScrollZone, tScrollZone, sbw, t1, t2;\n            if (self.dispatchEvent('touchmove', {NativeEvent: e})) { return; }\n            clearTimeout(touchScrollTimeout);\n            if (e.changedTouches[0]) {\n                self.touchPosition = self.getTouchPos(e);\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = self.getTouchPos(e, 1);\n            }\n            if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) > self.attributes.touchDeadZone) {\n                clearTimeout(self.touchContextTimeout);\n            }\n            if (e.touches.length === 2 && self.touchPosition && self.touchPosition1) {\n                t1 = self.touchPosition.y;\n                t2 = self.touchPosition1.y;\n                if (!self.zoomDeltaStart) {\n                    self.zoomDeltaStart = Math.abs(t1 - t2);\n                    self.startScale = self.scale;\n                }\n                self.touchLength = 2;\n                self.scaleDelta = self.zoomDeltaStart - Math.abs(t1 - t2);\n                self.scale = self.startScale - (self.scaleDelta * self.attributes.touchZoomSensitivity);\n                self.scale = Math.min(Math.max(self.scale, self.attributes.touchZoomMin), self.attributes.touchZoomMax);\n                self.zoomAltered = true;\n                self.resize(true);\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.zoomAltered) { return; }\n            self.touchLength = 1;\n            self.touchPosition = self.touchPosition || self.touchPosition1;\n            ch = self.getColumnHeaderCellHeight();\n            rw = self.getRowHeaderCellWidth();\n            rScrollZone = self.width - self.style.scrollBarWidth - self.touchPosition.x < self.attributes.selectionScrollZone;\n            lScrollZone = self.touchPosition.x - rw < self.attributes.selectionScrollZone;\n            bScrollZone = self.height - self.style.scrollBarWidth - self.touchPosition.y < self.attributes.selectionScrollZone;\n            tScrollZone = self.touchPosition.y - ch < self.attributes.selectionScrollZone;\n            sbw = self.style.scrollBarWidth;\n            function touchScroll() {\n                var x = self.scrollBox.scrollLeft,\n                    y = self.scrollBox.scrollTop;\n                x += (rScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y += (bScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y -= (tScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                x -= (lScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                self.scrollBox.scrollTo(x, y);\n                touchScrollTimeout = setTimeout(touchScroll, self.attributes.scrollRepeatRate);\n            }\n            e.stopPropagation();\n            self.touchDelta = {\n                x: self.touchPosition.x - self.touchStart.x,\n                y: self.touchPosition.y - self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: performance.now()\n            };\n            self.currentCell = self.getCellAt(self.touchPosition.x, self.touchPosition.y);\n            self.calculatePPS();\n            self.touchDuration = performance.now() - self.touchScrollStart.t;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            if (self.touchSelecting && (rScrollZone || lScrollZone || tScrollZone || bScrollZone)) {\n                touchScroll();\n            }\n            if (/vertical-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollTop = self.scrollBox.scrollHeight\n                    * ((self.touchPosition.y - ch - sbw) / (self.scrollBox.height - sbw - ch));\n                return;\n            }\n            if (/horizontal-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollLeft = self.scrollBox.scrollWidth\n                    * ((self.touchPosition.x - rw - sbw) / (self.scrollBox.width - sbw - rw));\n                return;\n            }\n            if (/selection-handle-/.test(self.startingCell.style)) {\n                self.touchSelect(self.currentCell, self.startingCell.style);\n                return;\n            }\n            self.scrollBox.scrollTo(self.touchScrollStart.x - self.touchDelta.x,\n                self.touchScrollStart.y - self.touchDelta.y);\n            self.draw(true);\n        };\n        self.touchEndEvents = function (e) {\n            self.zoomDeltaStart = undefined;\n            self.touchSelecting = false;\n            clearInterval(self.touchScrollTimeout);\n            clearInterval(self.touchContextTimeout);\n            clearInterval(self.calculatePPSTimer);\n            e.stopPropagation();\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n        };\n        self.touchend = function (e) {\n            if (self.dispatchEvent('touchend', {NativeEvent: e})) { return; }\n            self.zoomDeltaStart = undefined;\n            if (e.changedTouches[0]) {\n                self.touchPosition = undefined;\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = undefined;\n            }\n            if (self.zoomAltered) {\n                if (e.touches.length === 0) {\n                    self.zoomAltered = false;\n                }\n                return;\n            }\n            var dz = Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone;\n            if (isNaN(self.xPPS)) {\n                self.xPPS = 0;\n            }\n            if (isNaN(self.yPPS)) {\n                self.yPPS = 0;\n            }\n            if (isNaN(self.xPPST)) {\n                self.xPPST = 0;\n            }\n            if (isNaN(self.yPPST)) {\n                self.yPPST = 0;\n            }\n            self.touchAnimateTo.x = self.xPPS * self.attributes.touchReleaseAcceleration;\n            self.touchAnimateTo.y = self.yPPS * self.attributes.touchReleaseAcceleration;\n            self.calculatePPSTimed();\n            if (dz && !self.contextMenu) {\n                self.touchCell(self.touchStartEvent)();\n            } else if (self.animationFrames === 0\n                    && (Math.abs(self.xPPST) > self.attributes.scrollAnimationPPSThreshold\n                        || Math.abs(self.yPPST) > self.attributes.scrollAnimationPPSThreshold)\n                    && !/-scroll-/.test(self.startingCell.style)\n                    && !dz) {\n                self.stopAnimation = false;\n                self.touchEndAnimation();\n            }\n            self.touchEndEvents(e);\n        };\n        self.touchcancel = function (e) {\n            if (self.dispatchEvent('touchcancel', {NativeEvent: e})) { return; }\n            self.touchEndEvents(e);\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals HTMLElement: false, Reflect: false, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self, ctor) {\n        self.scale = 1;\n        self.orders = {\n            rows: [],\n            columns: []\n        };\n        self.visibleRowHeights = [];\n        self.hasFocus = false;\n        self.activeCell = {\n            columnIndex: 0,\n            rowIndex: 0\n        };\n        self.storageName = 'canvasDataGrid';\n        self.invalidSearchExpClass = 'canvas-datagrid-invalid-search-regExp';\n        self.localStyleLibraryStorageKey = 'canvas-datagrid-user-style-library';\n        self.uniqueId = '_canvasDataGridUniqueId';\n        self.orderBy = self.uniqueId;\n        self.orderDirection = 'asc';\n        self.columnFilters = {};\n        self.filters = {};\n        self.frozenRow = 0;\n        self.frozenColumn = 0;\n        self.ellipsisCache = {};\n        self.scrollBox = {};\n        self.visibleRows = [];\n        self.sizes = {\n            rows: {},\n            columns: {},\n            trees: {}\n        };\n        self.currentFilter = function () {\n            return true;\n        };\n        self.selections = [];\n        self.hovers = {};\n        self.attributes = {};\n        self.style = {};\n        self.formatters = {};\n        self.sorters = {};\n        self.schemaHashes = {};\n        self.events = {};\n        self.uId = 0;\n        self.changes = [];\n        self.scrollIndexTop = 0;\n        self.scrollPixelTop = 0;\n        self.scrollIndexLeft = 0;\n        self.scrollPixelLeft = 0;\n        self.childGrids = {};\n        self.openChildren = {};\n        self.scrollModes = [\n            'vertical-scroll-box',\n            'vertical-scroll-top',\n            'vertical-scroll-bottom',\n            'horizontal-scroll-box',\n            'horizontal-scroll-right',\n            'horizontal-scroll-left'\n        ];\n        self.componentL1Events = {};\n        self.eventNames = ['afterdraw', 'afterrendercell', 'attributechanged', 'beforebeginedit',\n            'beforecreatecellgrid', 'beforedraw', 'beforeendedit', 'beforerendercell', 'beforerendercellgrid',\n            'beginedit', 'cellmouseout', 'cellmouseover', 'click', 'collapsetree', 'contextmenu', 'copy',\n            'datachanged', 'dblclick', 'endedit', 'expandtree', 'formatcellvalue', 'keydown', 'keypress',\n            'keyup', 'mousedown', 'mousemove', 'mouseup', 'newrow', 'ordercolumn', 'rendercell', 'rendercellgrid',\n            'renderorderbyarrow', 'rendertext', 'rendertreearrow', 'reorder', 'reordering', 'resize',\n            'resizecolumn', 'resizerow', 'schemachanged', 'scroll', 'selectionchanged', 'stylechanged',\n            'touchcancel', 'touchend', 'touchmove', 'touchstart', 'wheel'];\n        self.mouse = { x: 0, y: 0};\n        self.getSelectedData = function (expandToRow) {\n            var d = [], s = expandToRow ? self.getSchema() : self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    if (col === -1 || !s[col]) { return; }\n                    d[index][s[col].name] = self.data[index][s[col].name];\n                });\n            });\n            return d;\n        };\n        self.fillArray = function (low, high, step, def) {\n            step = step || 1;\n            var i = [], x;\n            for (x = low; x <= high; x += step) {\n                i[x] = def === undefined ? x : (typeof def === 'function' ? def(x) : def);\n            }\n            return i;\n        };\n        self.getColumnHeaderCellHeight = function () {\n            if (!self.attributes.showColumnHeaders) { return 0; }\n            return ((self.sizes.rows[-1] || self.style.columnHeaderCellHeight) * self.scale);\n        };\n        self.getRowHeaderCellWidth = function () {\n            if (!self.attributes.showRowHeaders) { return 0; }\n            return (self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth) * self.scale;\n        };\n        self.setStorageData = function () {\n            if (!self.attributes.saveAppearance || !self.attributes.name) { return; }\n            localStorage.setItem(self.storageName + '-' + self.attributes.name, JSON.stringify({\n                sizes: {\n                    rows: self.sizes.rows,\n                    columns: self.sizes.columns\n                },\n                orders: {\n                    rows: self.orders.rows,\n                    columns: self.orders.columns\n                },\n                orderBy: self.orderBy,\n                orderDirection: self.orderDirection\n            }));\n        };\n        self.getSchema = function () {\n            return self.schema || self.tempSchema;\n        };\n        self.createColumnOrders = function () {\n            var s = self.getSchema();\n            self.orders.columns = self.fillArray(0, s.length - 1);\n        };\n        self.createRowOrders = function () {\n            self.orders.rows = self.fillArray(0, self.data.length - 1);\n        };\n        self.getVisibleSchema = function () {\n            return self.getSchema().filter(function (col) {\n                return !col.hidden && col.name !== self.uniqueId;\n            });\n        };\n        self.applyDefaultValue = function (row, header) {\n            var d = header.defaultValue || '';\n            if (typeof d === 'function') {\n                d = d.apply(self.intf, [header]);\n            }\n            row[header.name] = d;\n        };\n        self.createNewRowData = function () {\n            self.newRow = {};\n            self.newRow[self.uniqueId] = self.uId;\n            self.uId += 1;\n            self.getSchema().forEach(function forEachHeader(header) {\n                self.applyDefaultValue(self.newRow, header);\n            });\n        };\n        self.getSchemaNameHash = function (key) {\n            var n = 0;\n            while (self.schemaHashes[key]) {\n                n += 1;\n                key = key + n;\n            }\n            return key;\n        };\n        self.filter = function (type) {\n            var f = self.filters[type];\n            if (!f && type !== undefined) {\n                console.warn('Cannot find filter for type %s, falling back to substring match.', type);\n                f = self.filters.string;\n            }\n            return f;\n        };\n        self.getBestGuessDataType = function (columnName) {\n            var t, x, l = self.data.length;\n            for (x = 0; x < l; x += 1) {\n                if ([null, undefined].indexOf(self.data[x][columnName]) !== -1) {\n                    t = typeof self.data[x];\n                    return t === 'object' ? 'string' : t;\n                }\n            }\n            return 'string';\n        };\n        self.drawChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].draw();\n            });\n        };\n        self.resizeChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].resize();\n            });\n        };\n        self.autoScrollZone = function (e, x, y, ctrl) {\n            var setTimer,\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight();\n            if (x > self.width - self.attributes.selectionScrollZone && x < self.width) {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y > self.height - self.attributes.selectionScrollZone && y < self.height) {\n                self.scrollBox.scrollTop += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (x - self.attributes.selectionScrollZone - rowHeaderCellWidth < 0) {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y - self.attributes.selectionScrollZone - columnHeaderCellHeight < 0) {\n                self.scrollBox.scrollTop -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (setTimer && !ctrl && self.currentCell && self.currentCell.columnIndex !== -1) {\n                self.scrollTimer = setTimeout(self.mousemove, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.refreshFromOrigialData = function () {\n            self.data = self.originalData.filter(function (row) {\n                return true;\n            });\n        };\n        self.validateColumn = function (c, s) {\n            if (!c.name) {\n                throw new Error('A column must contain at least a name.');\n            }\n            if (s.filter(function (i) { return i.name === c.name; }).length > 0) {\n                throw new Error('A column with the name '\n                    + c.name + ' already exists and cannot be added again.');\n            }\n            return true;\n        };\n        self.setDefaults = function (obj1, obj2, key, def) {\n            obj1[key] = obj2[key] === undefined ? def : obj2[key];\n        };\n        self.setAttributes = function () {\n            self.defaults.attributes.forEach(function eachAttribute(i) {\n                self.setDefaults(self.attributes, self.args, i[0], i[1]);\n            });\n        };\n        self.setStyle = function () {\n            self.defaults.styles.forEach(function eachStyle(i) {\n                self.setDefaults(self.style, self.args.style || {}, i[0], i[1]);\n            });\n        };\n        self.autosize = function (colName) {\n            self.getVisibleSchema().forEach(function (col) {\n                if (col.name === colName || colName === undefined) {\n                    self.fitColumnToValues(col.name);\n                }\n            });\n            self.fitColumnToValues('cornerCell');\n        };\n        self.dispose = function () {\n            if (!self.isChildGrid && self.canvas && self.canvas.parentNode) {\n                self.canvas.parentNode.removeChild(self.canvas);\n            }\n            self.eventParent.removeEventListener('mouseup', self.mouseup, false);\n            self.eventParent.removeEventListener('mousedown', self.mousedown, false);\n            self.eventParent.removeEventListener('dblclick', self.dblclick, false);\n            self.eventParent.removeEventListener('click', self.click, false);\n            self.eventParent.removeEventListener('mousemove', self.mousemove);\n            self.eventParent.removeEventListener('wheel', self.scrollWheel, false);\n            self.canvas.removeEventListener('contextmenu', self.contextmenu, false);\n            self.canvas.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('keypress', self.keypress, false);\n            self.controlInput.removeEventListener('keyup', self.keyup, false);\n            self.controlInput.removeEventListener('keydown', self.keydown, false);\n            window.removeEventListener('resize', self.resize);\n            if (self.observer && self.observer.disconnect) {\n                self.observer.disconnect();\n            }\n        };\n        self.tryLoadStoredOrders = function () {\n            var s;\n            if (self.storedSettings\n                    && typeof self.storedSettings.orders === 'object'\n                    && self.storedSettings.orders !== null) {\n                if (self.storedSettings.orders.rows.length >= self.data.length) {\n                    self.orders.rows = self.storedSettings.orders.rows;\n                }\n                s = self.getSchema();\n                if (self.storedSettings.orders.columns.length === s.length) {\n                    self.orders.columns = self.storedSettings.orders.columns;\n                }\n                self.orderBy = self.storedSettings.orderBy === undefined\n                    ? self.uniqueId : self.storedSettings.orderBy;\n                self.orderDirection = self.storedSettings.orderDirection === undefined\n                    ? self.uniqueId : self.storedSettings.orderDirection;\n                if (self.orderBy !== self.uniqueId && self.getHeaderByName(self.orderBy) && self.orderDirection) {\n                    self.order(self.orderBy, self.orderDirection);\n                }\n            }\n        };\n        self.getDomRoot = function () {\n            return self.shadowRoot ? self.shadowRoot.host : self.parentNode;\n        };\n        self.getFontName = function (fontStyle) {\n            return fontStyle.replace(/\\d+\\.?\\d*px/, '');\n        };\n        self.getFontHeight = function (fontStyle) {\n            return parseFloat(fontStyle, 10);\n        };\n        self.parseStyleValue = function (key) {\n            if (/Font/.test(key)) {\n                self.style[key + 'Height'] = self.getFontHeight(self.style[key]);\n                self.style[key + 'Name'] = self.getFontName(self.style[key]);\n                return;\n            }\n            // when inheriting styles from already instantiated grids, don't parse already parsed values.\n            if (key === 'moveOverlayBorderSegments' && typeof self.style[key] === 'string') {\n                self.style[key] = self.style[key].split(',')\n                    .map(function (i) { return parseInt(i, 10); });\n            }\n        };\n        self.initProp = function (propName) {\n            if (!self.args[propName]) { return; }\n            Object.keys(self.args[propName]).forEach(function (key) {\n                self[propName][key] = self.args[propName][key];\n            });\n        };\n        self.getStyleProperty = function (key) {\n            if (self.styleKeys.indexOf(key) === -1) {\n                return self.parentNodeStyle[key];\n            }\n            return self.style[key];\n        };\n        self.setStyleProperty = function (key, value, supressDrawAndEvent) {\n            if (self.styleKeys.indexOf(key) === -1) {\n                self.parentNodeStyle[key] = value;\n            } else {\n                self.style[key] = value;\n                self.parseStyleValue(key);\n            }\n            if (!supressDrawAndEvent) {\n                self.draw(true);\n                self.dispatchEvent('stylechanged', {name: 'style', value: value});\n            }\n        };\n        self.reloadStoredValues = function () {\n            if (self.attributes.name && self.attributes.saveAppearance) {\n                self.storedSettings = localStorage.getItem(self.storageName + '-' + self.attributes.name);\n                if (self.storedSettings) {\n                    try {\n                        self.storedSettings = JSON.parse(self.storedSettings);\n                    } catch (e) {\n                        console.warn('could not read settings from localStore', e);\n                        self.storedSettings = undefined;\n                    }\n                }\n                if (self.storedSettings) {\n                    if (typeof self.storedSettings.sizes === 'object'\n                            && self.storedSettings.sizes !== null) {\n                        self.sizes.rows = self.storedSettings.sizes.rows;\n                        self.sizes.columns = self.storedSettings.sizes.columns;\n                        ['trees', 'columns', 'rows'].forEach(function (i) {\n                            if (!self.sizes[i]) {\n                                self.sizes[i] = {};\n                            }\n                        });\n                    }\n                }\n            }\n        };\n        self.init = function () {\n            if (self.initialized) { return; }\n            var publicStyleKeyIntf = {};\n            self.setAttributes();\n            self.setStyle();\n            self.initScrollBox();\n            self.setDom();\n            self.type = 'canvas-datagrid';\n            self.initialized = true;\n            self.ie = /Trident/.test(window.navigator.userAgent);\n            self.edge = /Edge/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.moz = /Gecko/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.mobile = /Mobile/i.test(window.navigator.userAgent);\n            self.cursorGrab = 'grab';\n            self.cursorGrabing = 'grabbing';\n            self.cursorGrab = self.webKit ? '-webkit-grab' : self.cursorGrab;\n            self.cursorGrabing = self.moz ? '-webkit-grabbing' : self.cursorGrabbing;\n            self.pointerLockPosition = {x: 0, y: 0};\n            Object.keys(self.style).forEach(self.parseStyleValue);\n            self.intf.moveSelection = self.moveSelection;\n            self.intf.moveTo = self.moveTo;\n            self.intf.type = self.type;\n            self.intf.addEventListener = self.addEventListener;\n            self.intf.removeEventListener = self.removeEventListener;\n            self.intf.dispatchEvent = self.dispatchEvent;\n            /**\n             * Releases grid resources and removes grid elements.\n             * @memberof canvasDatagrid\n             * @name dispose\n             * @method\n             */\n            self.intf.dispose = self.dispose;\n            /**\n             * Appends the grid to another element later.  Not implemented.\n             * @memberof canvasDatagrid\n             * @name appendTo\n             * @method\n             * @param {number} el The element to append the grid to.\n             */\n            self.intf.appendTo = self.appendTo;\n            self.intf.filters = self.filters;\n            self.intf.sorters = self.sorters;\n            self.intf.autosize = self.autosize;\n            self.intf.beginEditAt = self.beginEditAt;\n            self.intf.endEdit = self.endEdit;\n            self.intf.setActiveCell = self.setActiveCell;\n            self.intf.forEachSelectedCell = self.forEachSelectedCell;\n            self.intf.scrollIntoView = self.scrollIntoView;\n            self.intf.clearChangeLog = self.clearChangeLog;\n            self.intf.gotoCell = self.gotoCell;\n            self.intf.gotoRow = self.gotoRow;\n            self.intf.getHeaderByName = self.getHeaderByName;\n            self.intf.findColumnScrollLeft = self.findColumnScrollLeft;\n            self.intf.findRowScrollTop = self.findRowScrollTop;\n            self.intf.fitColumnToValues = self.fitColumnToValues;\n            self.intf.findColumnMaxTextLength = self.findColumnMaxTextLength;\n            self.intf.disposeContextMenu = self.disposeContextMenu;\n            self.intf.getCellAt = self.getCellAt;\n            self.intf.isCellVisible = self.isCellVisible;\n            self.intf.order = self.order;\n            self.intf.draw = self.draw;\n            self.intf.selectArea = self.selectArea;\n            self.intf.clipElement = self.clipElement;\n            self.intf.getSchemaFromData = self.getSchemaFromData;\n            self.intf.setFilter = self.setFilter;\n            self.intf.selectRow = self.selectRow;\n            self.intf.parentGrid = self.parentGrid;\n            self.intf.toggleTree = self.toggleTree;\n            self.intf.expandTree = self.expandTree;\n            self.intf.collapseTree = self.collapseTree;\n            self.intf.canvas = self.canvas;\n            self.intf.context = self.ctx;\n            self.intf.insertRow = self.insertRow;\n            self.intf.deleteRow = self.deleteRow;\n            self.intf.addRow = self.addRow;\n            self.intf.insertColumn = self.insertColumn;\n            self.intf.deleteColumn = self.deleteColumn;\n            self.intf.addColumn = self.addColumn;\n            self.intf.getClippingRect = self.getClippingRect;\n            self.intf.setRowHeight = self.setRowHeight;\n            self.intf.setColumnWidth = self.setColumnWidth;\n            self.intf.resetColumnWidths = self.resetColumnWidths;\n            self.intf.resetRowHeights = self.resetRowHeights;\n            self.intf.resize = self.resize;\n            self.intf.selectColumn = self.selectColumn;\n            self.intf.selectRow = self.selectRow;\n            self.intf.selectAll = self.selectAll;\n            self.intf.selectNone = self.selectNone;\n            self.intf.drawChildGrids = self.drawChildGrids;\n            self.intf.assertPxColor = self.assertPxColor;\n            self.intf.clearPxColorAssertions = self.clearPxColorAssertions;\n            self.intf.integerToAlpha = self.integerToAlpha;\n            self.intf.copy = self.copy;\n            self.intf.setStyleProperty = self.setStyleProperty;\n            Object.defineProperty(self.intf, 'defaults', {\n                get: function () {\n                    return {\n                        styles: self.defaults.styles.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {}),\n                        attributes: self.defaults.attributes.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {})\n                    };\n                }\n            });\n            self.styleKeys = Object.keys(self.intf.defaults.styles);\n            self.DOMStyles = window.getComputedStyle(document.body, null);\n            self.intf.setStyleProperty('width', '100%');\n            self.intf.setStyleProperty('height', '100%');\n            Object.keys(self.DOMStyles).concat(Object.keys(self.style)).forEach(function (key) {\n                // unless this line is here, Object.keys() will not work on <instance>.style\n                publicStyleKeyIntf[key] = undefined;\n                Object.defineProperty(publicStyleKeyIntf, key, {\n                    get: function () {\n                        return self.getStyleProperty(key);\n                    },\n                    set: function (value) {\n                        self.setStyleProperty(key, value);\n                    }\n                });\n            });\n            Object.defineProperty(self.intf, 'shadowRoot', {\n                get: function () {\n                    return self.shadowRoot;\n                }\n            });\n            Object.defineProperty(self.intf, 'activeCell', {\n                get: function () {\n                    return self.activeCell;\n                }\n            });\n            Object.defineProperty(self.intf, 'hasFocus', {\n                get: function () {\n                    return self.hasFocus;\n                }\n            });\n            Object.defineProperty(self.intf, 'style', {\n                get: function () {\n                    return publicStyleKeyIntf;\n                },\n                set: function (valueObject) {\n                    Object.keys(valueObject).forEach(function (key) {\n                        self.setStyleProperty(key, valueObject[key], true);\n                    });\n                    self.draw(true);\n                    self.dispatchEvent('stylechanged', {name: 'style', value: valueObject});\n                }\n            });\n            Object.defineProperty(self.intf, 'attributes', { value: {}});\n            Object.keys(self.attributes).forEach(function (key) {\n                Object.defineProperty(self.intf.attributes, key, {\n                    get: function () {\n                        return self.attributes[key];\n                    },\n                    set: function (value) {\n                        self.attributes[key] = value;\n                        if (key === 'name') {\n                            self.reloadStoredValues();\n                            self.tryLoadStoredOrders();\n                        }\n                        self.draw(true);\n                        self.dispatchEvent('attributechanged', {name: key, value: value[key]});\n                    }\n                });\n            });\n            self.filters.string = function (value, filterFor) {\n                value = String(value);\n                var filterRegExp,\n                    regEnd = /\\/(i|g|m)*$/,\n                    pattern = regEnd.exec(filterFor),\n                    flags = pattern ? pattern[0].substring(1) : '',\n                    flagLength = flags.length;\n                self.invalidFilterRegEx = undefined;\n                if (filterFor.substring(0, 1) === '/' && pattern) {\n                    try {\n                        filterRegExp = new RegExp(filterFor.substring(1, filterFor.length - (flagLength + 1)), flags);\n                    } catch (e) {\n                        self.invalidFilterRegEx = e;\n                        return;\n                    }\n                    return filterRegExp.test(value);\n                }\n                return value.toString ? value.toString().toLocaleUpperCase()\n                    .indexOf(filterFor.toLocaleUpperCase()) !== -1 : false;\n            };\n            self.filters.number = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                return value === filterFor;\n            };\n            ['formatters', 'filters', 'sorters'].forEach(self.initProp);\n            self.reloadStoredValues();\n            if (self.args.data) {\n                self.intf.data = self.args.data;\n            }\n            if (!self.data) {\n                self.intf.data = [];\n            }\n            if (self.args.schema) {\n                self.intf.schema = self.args.schema;\n            }\n            if (self.isChildGrid) {\n                requestAnimationFrame(function () { self.resize(true); });\n            } else {\n                self.resize(true);\n            }\n            return self;\n        };\n        /**\n         * Removes focus from the grid.\n         * @memberof canvasDatagrid\n         * @name blur\n         * @method\n         */\n        self.intf.blur = function (e) {\n            self.hasFocus = false;\n        };\n        /**\n         * Focuses on the grid.\n         * @memberof canvasDatagrid\n         * @name focus\n         * @method\n         */\n        self.intf.focus = function () {\n            self.hasFocus = true;\n            self.controlInput.focus();\n        };\n        Object.defineProperty(self.intf, 'height', {\n            get: function () {\n                if (self.shadowRoot) {\n                    return self.shadowRoot.height;\n                }\n                return self.parentNode.height;\n            },\n            set: function (value) {\n                if (self.shadowRoot) {\n                    self.shadowRoot.height = value;\n                } else {\n                    self.parentNode.height = value;\n                }\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'width', {\n            get: function () {\n                if (self.shadowRoot) {\n                    return self.shadowRoot.width;\n                }\n                return self.parentNode.width;\n            },\n            set: function (value) {\n                if (self.shadowRoot) {\n                    self.shadowRoot.width = value;\n                } else {\n                    self.parentNode.width = value;\n                }\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRowHeights', {\n            get: function () {\n                return self.visibleRowHeights;\n            }\n        });\n        Object.defineProperty(self.intf, 'openChildren', {\n            get: function () {\n                return self.openChildren;\n            }\n        });\n        Object.defineProperty(self.intf, 'childGrids', {\n            get: function () {\n                return Object.keys(self.childGrids).map(function (gridId) {\n                    return self.childGrids[gridId];\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'isChildGrid', {\n            get: function () {\n                return self.isChildGrid;\n            }\n        });\n        Object.defineProperty(self.intf, 'parentNode', {\n            get: function () {\n                return self.parentNode;\n            },\n            set: function (value) {\n                if (!self.isChildGrid) {\n                    throw new TypeError('Cannot set property parentNode which has only a getter');\n                }\n                self.parentNode = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetParent', {\n            get: function () {\n                return self.parentNode;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetLeft', {\n            get: function () {\n                return self.parentNode.offsetLeft;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetTop', {\n            get: function () {\n                return self.parentNode.offsetTop;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollHeight', {\n            get: function () {\n                return self.scrollBox.scrollHeight;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollWidth', {\n            get: function () {\n                return self.scrollBox.scrollWidth;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollTop', {\n            get: function () {\n                return self.scrollBox.scrollTop;\n            },\n            set: function (value) {\n                self.scrollBox.scrollTop = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollLeft', {\n            get: function () {\n                return self.scrollBox.scrollLeft;\n            },\n            set: function (value) {\n                self.scrollBox.scrollLeft = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'sizes', {\n            get: function () {\n                return self.sizes;\n            }\n        });\n        Object.defineProperty(self.intf, 'input', {\n            get: function () {\n                return self.input;\n            }\n        });\n        Object.defineProperty(self.intf, 'controlInput', {\n            get: function () {\n                return self.controlInput;\n            }\n        });\n        Object.defineProperty(self.intf, 'currentCell', {\n            get: function () {\n                return self.currentCell;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleCells', {\n            get: function () {\n                return self.visibleCells;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRows', {\n            get: function () {\n                return self.visibleRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'selections', {\n            get: function () {\n                return self.selections;\n            }\n        });\n        Object.defineProperty(self.intf, 'dragMode', {\n            get: function () {\n                return self.dragMode;\n            }\n        });\n        Object.defineProperty(self.intf, 'changes', {\n            get: function () {\n                return self.changes;\n            }\n        });\n        self.intf.formatters = self.formatters;\n        self.normalizeDataset = function (data, callback) {\n            var i, d, max, syncFnInvoked;\n            if (data === null || data === '' || data === undefined) {\n                return callback([]);\n            }\n            if (typeof data === 'string'\n                    || typeof data === 'number'\n                    || typeof data === 'boolean') {\n                data = [{'0': data}];\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if ((!Array.isArray(data[0]) && typeof data[0] === 'object' && data[0] !== null)\n                            || (Array.isArray(data) && data.length === 0)) {\n                return callback(data);\n            }\n            if (typeof data === 'function') {\n                i = data.apply(self.intf, [function (d) {\n                    if (syncFnInvoked) {\n                        console.warn('Detected a callback to the data setter function after the same function already returned a value synchronously.');\n                    }\n                    self.normalizeDataset(d, callback);\n                }]);\n                if (i) {\n                    syncFnInvoked = true;\n                    self.normalizeDataset(i, callback);\n                }\n                return;\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if (Array.isArray(data)) {\n                if (!Array.isArray(data[0])) {\n                    //array of something?  throw it all into 1 row!\n                    data = [data];\n                }\n                // find the longest length\n                max = 0;\n                d = [];\n                data.forEach(function (row) {\n                    max = Math.max(max, row.length);\n                });\n                // map against length indexes\n                data.forEach(function (row, index) {\n                    var x;\n                    d[index] = {};\n                    for (x = 0; x < max; x += 1) {\n                        d[index][x] = row[x];\n                    }\n                });\n                return callback(d);\n            }\n            throw new Error('Unsupported data type.  Must be an array of arrays or an array of objects, function or string.');\n        };\n        self.eventNames.forEach(function (eventName) {\n            Object.defineProperty(self.intf, 'on' + eventName, {\n                get: function () {\n                    return self.componentL1Events[eventName];\n                },\n                set: function (value) {\n                    self.events[eventName] = [];\n                    self.componentL1Events[eventName] = value;\n                    if (!value) { return; }\n                    self.addEventListener(eventName, value);\n                }\n            });\n        });\n        Object.defineProperty(self.intf, 'frozenRow', {\n            get: function () {\n                return self.frozenRow;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.visibleRows.length > val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible rows.');\n                }\n                self.frozenRow = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'frozenColumn', {\n            get: function () {\n                return self.frozenColumn;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.getVisibleSchema().length > val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible columns.');\n                }\n                self.frozenColumn = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollIndexRect', {\n            get: function () {\n                return {\n                    top: self.scrollIndexTop,\n                    right: self.scrollIndexRight,\n                    bottom: self.scrollIndexBottom,\n                    left: self.scrollIndexLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollPixelRect', {\n            get: function () {\n                return {\n                    top: self.scrollPixelTop,\n                    right: self.scrollPixelRight,\n                    bottom: self.scrollPixelBottom,\n                    left: self.scrollPixelLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'selectionBounds', {\n            get: function () {\n                return self.getSelectionBounds();\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedRows', {\n            get: function () {\n                return self.getSelectedData(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedCells', {\n            get: function () {\n                return self.getSelectedData();\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleSchema', {\n            get: function () {\n                return self.getVisibleSchema().map(function eachDataRow(col) {\n                    return col;\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'ctx', {\n            get: function () {\n                return self.ctx;\n            }\n        });\n        Object.defineProperty(self.intf, 'schema', {\n            get: function schemaGetter() {\n                return self.getSchema();\n            },\n            set: function schemaSetter(value) {\n                if (!Array.isArray(value) || typeof value[0] !== 'object') {\n                    throw new Error('Schema must be an array of objects.');\n                }\n                if (value[0].name === undefined) {\n                    throw new Error('Expected schema to contain an object with at least a name property.');\n                }\n                self.schema = value.map(function eachSchemaColumn(column, index) {\n                    column.width = column.width || self.style.cellWidth;\n                    column[self.uniqueId] = self.getSchemaNameHash(column.name);\n                    column.filter = column.filter || self.filter(column.type);\n                    column.type = column.type || 'string';\n                    column.index = index;\n                    column.columnIndex = index;\n                    column.rowIndex = -1;\n                    return column;\n                });\n                self.tempSchema = undefined;\n                self.createNewRowData();\n                self.createColumnOrders();\n                self.tryLoadStoredOrders();\n                self.resize(true);\n                self.dispatchEvent('schemachanged', {schema: self.schema});\n            }\n        });\n        Object.defineProperty(self.intf, 'data', {\n            get: function dataGetter() {\n                return self.data.map(function (row) {\n                    delete row[self.uniqueId];\n                    return row;\n                });\n            },\n            set: function dataSetter(value) {\n                self.normalizeDataset(value, function (d) {\n                    self.originalData = d.map(function eachDataRow(row) {\n                        row[self.uniqueId] = self.uId;\n                        self.uId += 1;\n                        return row;\n                    });\n                    self.changes = [];\n                    //TODO apply filter to incoming dataset\n                    self.data = self.originalData;\n                    if (!self.schema) {\n                        self.tempSchema = self.getSchemaFromData();\n                    }\n                    if (!self.schema && self.data.length === 0) {\n                        self.tempSchema = [{name: ''}];\n                        self.tempSchema[0][self.uniqueId] = self.getSchemaNameHash('');\n                    }\n                    if (self.tempSchema && !self.schema) {\n                        self.createColumnOrders();\n                        self.tryLoadStoredOrders();\n                        self.dispatchEvent('schemachanged', {schema: self.tempSchema});\n                    }\n                    self.createNewRowData();\n                    if (self.attributes.autoResizeColumns && self.data.length > 0\n                            && self.storedSettings === undefined) {\n                        self.autosize();\n                    }\n                    self.fitColumnToValues('cornerCell', true);\n                    self.resize(true);\n                    self.createRowOrders();\n                    self.tryLoadStoredOrders();\n                    self.dispatchEvent('datachanged', {data: self.data});\n                });\n            }\n        });\n        self.initScrollBox = function () {\n            var sHeight = 0,\n                sWidth = 0,\n                scrollTop = 0,\n                scrollLeft = 0,\n                scrollHeight = 0,\n                scrollWidth = 0,\n                scrollBoxHeight = 20,\n                scrollBoxWidth = 20;\n            function setScrollTop(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollTop value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollHeight) {\n                    value = scrollHeight;\n                }\n                if (scrollHeight < 0) {\n                    value = 0;\n                }\n                scrollTop = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            function setScrollLeft(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollLeft value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollWidth) {\n                    value = scrollWidth;\n                }\n                if (scrollWidth < 0) {\n                    value = 0;\n                }\n                scrollLeft = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            self.scrollBox.toString = function () {\n                return '{\"width\": ' + scrollWidth\n                    + ', \"height\": ' + scrollHeight\n                    + ', \"left\": ' + scrollLeft\n                    + ', \"top\": ' + scrollTop + '}';\n            };\n            self.scrollBox.scrollTo = function (x, y, supressDrawEvent) {\n                setScrollLeft(x, true);\n                setScrollTop(y, supressDrawEvent);\n            };\n            Object.defineProperty(self.scrollBox, 'scrollBoxHeight', {\n                get: function () {\n                    return scrollBoxHeight;\n                },\n                set: function (value) {\n                    scrollBoxHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollBoxWidth', {\n                get: function () {\n                    return scrollBoxWidth;\n                },\n                set: function (value) {\n                    scrollBoxWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'height', {\n                get: function () {\n                    return sHeight;\n                },\n                set: function (value) {\n                    if (scrollHeight < value) {\n                        scrollTop = 0;\n                    }\n                    sHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'width', {\n                get: function () {\n                    return sWidth;\n                },\n                set: function (value) {\n                    sWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollTop', {\n                get: function () {\n                    return scrollTop;\n                },\n                set: setScrollTop\n            });\n            Object.defineProperty(self.scrollBox, 'scrollLeft', {\n                get: function () {\n                    return scrollLeft;\n                },\n                set: setScrollLeft\n            });\n            Object.defineProperty(self.scrollBox, 'scrollHeight', {\n                get: function () {\n                    return scrollHeight;\n                },\n                set: function (value) {\n                    if (scrollTop > value) {\n                        scrollTop = Math.max(value, 0);\n                    }\n                    if (scrollHeight < sHeight) {\n                        scrollTop = 0;\n                    }\n                    scrollHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollWidth', {\n                get: function () {\n                    return scrollWidth;\n                },\n                set: function (value) {\n                    if (scrollLeft > value) {\n                        scrollLeft = Math.max(value, 0);\n                    }\n                    scrollWidth = value;\n                }\n            });\n        };\n        return;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false, Event: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var zIndexTop = 9000, hoverScrollTimeout, autoCompleteContext;\n        function applyContextItemStyle(contextItemContainer) {\n            self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item' + (self.mobile ? '-mobile' : ''));\n            contextItemContainer.addEventListener('mouseover', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n            });\n            contextItemContainer.addEventListener('mouseout', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n            });\n        }\n        function createContextMenu(ev, pos, items, parentContextMenu) {\n            var container = document.createElement('div'),\n                upArrow = document.createElement('div'),\n                downArrow = document.createElement('div'),\n                children = [],\n                selectedIndex = -1,\n                intf = {},\n                rect;\n            if (!Array.isArray(items)) { throw new Error('createContextMenu expects an array.'); }\n            function createItems() {\n                items.forEach(function (item) {\n                    var contextItemContainer = document.createElement('div'),\n                        childMenuArrow;\n                    function removeChildContext(e) {\n                        if (e.relatedTarget === container\n                                || item.contextMenu.container === e.relatedTarget\n                                || childMenuArrow === e.relatedTarget\n                                || (contextItemContainer === e.relatedTarget)\n                                || item.contextMenu.container.contains(e.relatedTarget)\n                                ) { return; }\n                        item.contextMenu.dispose();\n                        children.splice(children.indexOf(item.contextMenu), 1);\n                        item.contextMenu = undefined;\n                        contextItemContainer.removeEventListener('mouseout', removeChildContext);\n                        container.removeEventListener('mouseout', removeChildContext);\n                        contextItemContainer.setAttribute('contextOpen', '0');\n                        contextItemContainer.setAttribute('opening', '0');\n                    }\n                    function contextAddCallback(items) {\n                        // check yet again if the user hasn't moved off\n                        if (contextItemContainer.getAttribute('opening') !== '1' ||\n                                contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        var cPos = contextItemContainer.getBoundingClientRect();\n                        cPos = {\n                            left: cPos.left + self.style.childContextMenuMarginLeft + container.offsetWidth,\n                            top: cPos.top + self.style.childContextMenuMarginTop,\n                            bottom: cPos.bottom,\n                            right: cPos.right\n                        };\n                        item.contextMenu = createContextMenu(ev, cPos, items, intf);\n                        contextItemContainer.setAttribute('contextOpen', '1');\n                        contextItemContainer.addEventListener('mouseout', removeChildContext);\n                        container.addEventListener('mouseout', removeChildContext);\n                        children.push(item.contextMenu);\n                    }\n                    function createChildContext() {\n                        var i;\n                        if (contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        contextItemContainer.setAttribute('opening', '1');\n                        if (typeof item.items === 'function') {\n                            i  = item.items.apply(intf, [function (items) {\n                                contextAddCallback(items);\n                            }]);\n                            if (i !== undefined && Array.isArray(i)) {\n                                contextAddCallback(i);\n                            }\n                            return;\n                        }\n                        contextAddCallback(item.items);\n                    }\n                    function addItem(item) {\n                        function addContent(content) {\n                            if (content === null) { return; }\n                            if (typeof content === 'function') {\n                                return addContent(content(ev));\n                            }\n                            if (typeof content === 'object') {\n                                contextItemContainer.appendChild(content);\n                                return;\n                            }\n                            applyContextItemStyle(contextItemContainer);\n                            contextItemContainer.innerHTML = content;\n                            return;\n                        }\n                        addContent(item.title);\n                        item.contextItemContainer = contextItemContainer;\n                        if ((item.items && item.items.length > 0) || typeof item.items === 'function') {\n                            childMenuArrow = document.createElement('div');\n                            self.createInlineStyle(childMenuArrow, 'canvas-datagrid-context-child-arrow');\n                            childMenuArrow.innerHTML = self.style.childContextMenuArrowHTML;\n                            contextItemContainer.appendChild(childMenuArrow);\n                            contextItemContainer.addEventListener('mouseover', createChildContext);\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                contextItemContainer.setAttribute('opening', '0');\n                            });\n                        }\n                        if (item.click) {\n                            contextItemContainer.addEventListener('click', function (ev) {\n                                item.click.apply(self, [ev]);\n                            });\n                        }\n                    }\n                    addItem(item);\n                    container.appendChild(contextItemContainer);\n                });\n            }\n            function clickIndex(idx) {\n                items[idx].contextItemContainer.dispatchEvent(new Event('click'));\n            }\n            function checkArrowVisibility() {\n                if (container.scrollTop > 0) {\n                    self.parentDOMNode.appendChild(upArrow);\n                } else if (upArrow.parentNode) {\n                    upArrow.parentNode.removeChild(upArrow);\n                }\n                if (container.scrollTop >= container.scrollHeight - container.offsetHeight && downArrow.parentNode) {\n                    downArrow.parentNode.removeChild(downArrow);\n                } else if (container.scrollHeight - container.offsetHeight > 0\n                        && !(container.scrollTop >= container.scrollHeight - container.offsetHeight)) {\n                    self.parentDOMNode.appendChild(downArrow);\n                }\n            }\n            function startHoverScroll(type) {\n                return function t() {\n                    var a = self.attributes.contextHoverScrollAmount;\n                    if (type === 'up' && container.scrollTop === 0) { return; }\n                    if (type === 'down' && container.scrollTop === container.scrollHeight) { return; }\n                    container.scrollTop += (type === 'up' ? -a : a);\n                    hoverScrollTimeout = setTimeout(t, self.attributes.contextHoverScrollRateMs, type);\n                };\n            }\n            function endHoverScroll(type) {\n                return function () {\n                    clearTimeout(hoverScrollTimeout);\n                };\n            }\n            function init() {\n                var loc = {},\n                    s = self.scrollOffset(self.canvas);\n                createItems();\n                self.createInlineStyle(container, 'canvas-datagrid-context-menu' + (self.mobile ? '-mobile' : ''));\n                loc.x = pos.left - s.left;\n                loc.y = pos.top - s.top;\n                loc.height = 0;\n                zIndexTop += 1;\n                container.style.position = 'absolute';\n                upArrow.style.color = self.style.contextMenuArrowColor;\n                downArrow.style.color = self.style.contextMenuArrowColor;\n                [upArrow, downArrow].forEach(function (el) {\n                    el.style.textAlign = 'center';\n                    el.style.position = 'absolute';\n                    el.style.zIndex = zIndexTop + 1;\n                });\n                container.style.zIndex = zIndexTop;\n                if (parentContextMenu && parentContextMenu.inputDropdown) {\n                    container.style.maxHeight = window.innerHeight - loc.y - self.style.autocompleteBottomMargin + 'px';\n                    container.style.minWidth = pos.width + 'px';\n                    loc.y += pos.height;\n                }\n                if (self.mobile) {\n                    container.style.width = pos.width + 'px';\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                container.addEventListener('scroll', checkArrowVisibility);\n                container.addEventListener('wheel', function (e) {\n                    if (self.hasFocus) {\n                        container.scrollTop += e.deltaY;\n                        container.scrollLeft += e.deltaX;\n                    }\n                    checkArrowVisibility();\n                });\n                upArrow.innerHTML = self.style.contextMenuArrowUpHTML;\n                downArrow.innerHTML = self.style.contextMenuArrowDownHTML;\n                container.appendChild(upArrow);\n                document.body.appendChild(downArrow);\n                document.body.appendChild(container);\n                rect = container.getBoundingClientRect();\n                if (rect.bottom > window.innerHeight && !(parentContextMenu && parentContextMenu.inputDropdown)) {\n                    loc.y = window.innerHeight - container.offsetHeight;\n                    if (loc.y < 0) { loc.y = 0; }\n                    if (container.offsetHeight > window.innerHeight - self.style.contextMenuWindowMargin) {\n                        container.style.height = window.innerHeight - self.style.contextMenuWindowMargin + 'px';\n                        loc.y += self.style.contextMenuWindowMargin * 0.5;\n                    }\n                }\n                if (rect.right > window.innerWidth) {\n                    if (parentContextMenu && parentContextMenu.container) {\n                        loc.x = parentContextMenu.container.offsetLeft - container.offsetWidth;\n                    } else {\n                        loc.x = window.innerWidth - container.offsetWidth;\n                    }\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                rect = container.getBoundingClientRect();\n                upArrow.style.top = rect.top + 'px';\n                downArrow.style.top = rect.top + rect.height - downArrow.offsetHeight + 'px';\n                upArrow.style.left = rect.left + 'px';\n                downArrow.style.left = rect.left + 'px';\n                downArrow.style.width = container.offsetWidth + 'px';\n                upArrow.style.width = container.offsetWidth + 'px';\n                downArrow.addEventListener('mouseover', startHoverScroll('down'));\n                downArrow.addEventListener('mouseout', endHoverScroll('down'));\n                upArrow.addEventListener('mouseover', startHoverScroll('up'));\n                upArrow.addEventListener('mouseout', endHoverScroll('up'));\n                checkArrowVisibility();\n            }\n            intf.parentGrid = self.intf;\n            intf.parentContextMenu = parentContextMenu;\n            intf.container = container;\n            init();\n            intf.clickIndex = clickIndex;\n            intf.rect = rect;\n            intf.items = items;\n            intf.upArrow = upArrow;\n            intf.downArrow = downArrow;\n            intf.dispose = function () {\n                clearTimeout(hoverScrollTimeout);\n                children.forEach(function (c) {\n                    c.dispose();\n                });\n                [downArrow, upArrow, container].forEach(function (el) {\n                    if (el.parentNode) { el.parentNode.removeChild(el); }\n                });\n            };\n            Object.defineProperty(intf, 'selectedIndex', {\n                get: function () {\n                    return selectedIndex;\n                },\n                set: function (value) {\n                    if (typeof value !== 'number' || isNaN(value || !isFinite(value))) {\n                        throw new Error('Context menu selected index must be a sane number.');\n                    }\n                    selectedIndex = value;\n                    if (selectedIndex > items.length - 1) {\n                        selectedIndex = items.length - 1;\n                    }\n                    if (selectedIndex < 0) {\n                        selectedIndex = 0;\n                    }\n                    items.forEach(function (item, index) {\n                        if (index === selectedIndex) {\n                            return self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                        }\n                        self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item');\n                    });\n                }\n            });\n            return intf;\n        }\n        function createFilterContextMenuItems(e) {\n            var filterContainer = document.createElement('div'),\n                filterLabel = document.createElement('div'),\n                filterAutoCompleteButton = document.createElement('button'),\n                filterInput = document.createElement('input'),\n                n = e.cell && e.cell.header ? e.cell.header.title || e.cell.header.name : '',\n                autoCompleteItems,\n                iRect;\n            function checkRegExpErrorState() {\n                filterInput.style.background = self.style.contextFilterInputBackground;\n                filterInput.style.color = self.style.contextFilterInputColor;\n                if (self.invalidFilterRegEx) {\n                    filterInput.style.background = self.style.contextFilterInvalidRegExpBackground;\n                    filterInput.style.color = self.style.contextFilterInvalidRegExpColor;\n                }\n            }\n            function fillAutoComplete() {\n                var count = 0;\n                autoCompleteItems = {};\n                self.data.forEach(function (row) {\n                    var value = row[e.cell.header.name];\n                    if (autoCompleteItems[value] || count > self.attributes.maxAutoCompleteItems) { return; }\n                    count += 1;\n                    autoCompleteItems[value] = {\n                        title: self.formatters[e.cell.header.type || 'string']({ cell: { value: value }}),\n                        click: function (e) {\n                            filterInput.value = value;\n                            e.stopPropagation();\n                            filterInput.dispatchEvent(new Event('keyup'));\n                            self.disposeAutocomplete();\n                            return;\n                        }\n                    };\n                });\n                autoCompleteItems = Object.keys(autoCompleteItems).map(function (key) {\n                    return autoCompleteItems[key];\n                });\n            }\n            function createAutoCompleteContext(ev) {\n                if (ev && [40, 38, 13, 9].indexOf(ev.keyCode) !== -1) { return; }\n                fillAutoComplete();\n                iRect = filterInput.getBoundingClientRect();\n                if (autoCompleteContext) {\n                    autoCompleteContext.dispose();\n                    autoCompleteContext = undefined;\n                }\n                autoCompleteContext = createContextMenu(e, {\n                    left: iRect.left,\n                    top: iRect.top,\n                    right: iRect.right,\n                    bottom: iRect.bottom,\n                    height: iRect.height,\n                    width: iRect.width\n                }, autoCompleteItems, {inputDropdown: true});\n                autoCompleteContext.selectedIndex = 0;\n            }\n            self.createInlineStyle(filterLabel, 'canvas-datagrid-context-menu-label');\n            self.createInlineStyle(filterAutoCompleteButton, 'canvas-datagrid-context-menu-filter-button');\n            self.createInlineStyle(filterInput, 'canvas-datagrid-context-menu-filter-input');\n            checkRegExpErrorState();\n            filterInput.onclick = self.disposeAutocomplete;\n            filterInput.addEventListener('keydown', function (e) {\n                //down\n                if (e.keyCode === 40) {\n                    autoCompleteContext.selectedIndex += 1;\n                }\n                //up\n                if (e.keyCode === 38) {\n                    autoCompleteContext.selectedIndex -= 1;\n                }\n                //enter\n                if (e.keyCode === 13) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    self.disposeContextMenu();\n                }\n                //tab\n                if (e.keyCode === 9) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    e.preventDefault();\n                }\n                //esc\n                if (e.keyCode === 27) {\n                    self.disposeContextMenu();\n                }\n            });\n            filterInput.addEventListener('keyup', function () {\n                self.setFilter(e.cell.header.name, filterInput.value);\n            });\n            filterInput.addEventListener('keyup', createAutoCompleteContext);\n            ['focus', 'blur', 'keydown', 'keyup', 'change'].forEach(function (en) {\n                filterInput.addEventListener(en, checkRegExpErrorState);\n            });\n            filterInput.value = e.cell.header ? self.columnFilters[e.cell.header.name] || '' : '';\n            filterLabel.innerHTML = self.attributes.filterOptionText.replace(/%s/g, n);\n            filterAutoCompleteButton.onclick = function () {\n                if (autoCompleteContext) {\n                    return self.disposeAutocomplete();\n                }\n                createAutoCompleteContext();\n            };\n            filterAutoCompleteButton.innerHTML = self.style.contextFilterButtonHTML;\n            filterContainer.addEventListener('click', function (e) {\n                return e.stopPropagation();\n            });\n            filterContainer.appendChild(filterLabel);\n            filterContainer.appendChild(filterInput);\n            filterContainer.appendChild(filterAutoCompleteButton);\n            e.items.push({\n                title: filterContainer\n            });\n            if (Object.keys(self.columnFilters).length) {\n                Object.keys(self.columnFilters).forEach(function (cf) {\n                    var h = self.getHeaderByName(cf);\n                    e.items.push({\n                        title: self.attributes.removeFilterOptionText.replace(/%s/g, h.title || h.name),\n                        click: function removeFilterClick(e) {\n                            e.preventDefault();\n                            self.setFilter(cf, '');\n                            self.controlInput.focus();\n                        }\n                    });\n                });\n            }\n        }\n        function addDefaultContextMenuItem(e) {\n            var isNormalCell = !(e.cell.isBackground || e.cell.isHeaderCellCap\n                    || e.cell.isScrollBar || e.cell.isCorner || e.cell.isRowHeader)\n                    && e.cell.header;\n            if (self.attributes.showFilter && isNormalCell) {\n                createFilterContextMenuItems(e);\n            }\n            if (self.attributes.showCopy\n                    && self.selections.reduce(function (p, r) {\n                        return p + r.length;\n                    }, 0) > 0) {\n                e.items.push({\n                    title: self.attributes.copyText,\n                    click: function () {\n                        document.execCommand('copy');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.showPaste && self.clipBoardData) {\n                e.items.push({\n                    title: self.attributes.pasteText,\n                    click: function () {\n                        self.paste(self.clipBoardData, e.cell.columnIndex, e.cell.rowIndex);\n                        self.draw();\n                    }\n                });\n            }\n            if (self.attributes.showColumnSelector) {\n                e.items.push({\n                    title: self.attributes.columnSelectorText,\n                    items: function () {\n                        var d = [];\n                        self.getSchema().forEach(function (column) {\n                            if (column.name === self.uniqueId) { return; }\n                            function toggleColumnVisibility(e) {\n                                column.hidden = !column.hidden;\n                                e.preventDefault();\n                                self.stopPropagation(e);\n                                self.disposeContextMenu();\n                                self.resize(true);\n                            }\n                            var el = document.createElement('div');\n                            applyContextItemStyle(el);\n                            el.addEventListener('touchstart', toggleColumnVisibility);\n                            el.addEventListener('click', toggleColumnVisibility);\n                            el.innerHTML = (column.hidden ? self.attributes.columnSelectorHiddenText\n                                    : self.attributes.columnSelectorVisibleText)\n                                    + (column.title || column.name);\n                            d.push({\n                                title: el\n                            });\n                        });\n                        return d;\n                    }\n                });\n                if (e.cell && e.cell.header) {\n                    e.items.push({\n                        title: self.attributes.hideColumnText\n                            .replace(/%s/ig, e.cell.header.title || e.cell.header.name),\n                        click: function (ev) {\n                            e.cell.header.hidden = true;\n                            ev.preventDefault();\n                            self.stopPropagation(ev);\n                            self.disposeContextMenu();\n                            setTimeout(function () { self.resize(true); }, 10);\n                        }\n                    });\n                }\n            }\n            if (self.attributes.saveAppearance && self.attributes.showClearSettingsOption\n                    && (Object.keys(self.sizes.rows).length > 0\n                        || Object.keys(self.sizes.columns).length > 0)) {\n                e.items.push({\n                    title: self.attributes.clearSettingsOptionText,\n                    click: function (e) {\n                        e.preventDefault();\n                        self.sizes.rows = {};\n                        self.sizes.columns = {};\n                        self.createRowOrders();\n                        self.createColumnOrders();\n                        self.storedSettings = undefined;\n                        self.dispatchEvent('resizecolumn', {columnWidth: self.style.cellWidth});\n                        self.dispatchEvent('resizerow', {cellHeight: self.style.cellHeight});\n                        self.setStorageData();\n                        self.resize(true);\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.allowSorting && self.attributes.showOrderByOption && isNormalCell) {\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextAsc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'asc');\n                        self.controlInput.focus();\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextDesc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'desc');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n        }\n        self.disposeAutocomplete = function () {\n            if (autoCompleteContext) {\n                autoCompleteContext.dispose();\n                autoCompleteContext = undefined;\n            }\n        };\n        self.disposeContextMenu = function () {\n            document.removeEventListener('click', self.disposeContextMenu);\n            zIndexTop = 9000;\n            self.disposeAutocomplete();\n            if (self.contextMenu) {\n                self.contextMenu.dispose();\n            }\n            self.contextMenu = undefined;\n        };\n        self.contextmenuEvent = function (e, overridePos) {\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            function createDiposeEvent() {\n                requestAnimationFrame(function () {\n                    document.addEventListener('click', self.disposeContextMenu);\n                    document.removeEventListener('mouseup', createDiposeEvent);\n                });\n            }\n            var contextPosition,\n                items = [],\n                pos = overridePos || self.getLayerPos(e),\n                ev = {\n                    NativeEvent: e,\n                    cell: self.getCellAt(pos.x, pos.y),\n                    items: items\n                },\n                st,\n                sl;\n            if (!ev.cell.isGrid) {\n                addDefaultContextMenuItem(ev);\n            }\n            if (document.scrollingElement) {\n                sl = document.scrollingElement.scrollLeft;\n                st = document.scrollingElement.scrollTop;\n            }\n            if (self.dispatchEvent('contextmenu', ev)) {\n                return;\n            }\n            if (!ev.cell.isGrid) {\n                if (self.contextMenu) {\n                    self.disposeContextMenu();\n                }\n                contextPosition = {\n                    left: pos.x + sl + pos.rect.left + self.style.contextMenuMarginLeft + self.canvasOffsetLeft,\n                    top: pos.y + st + pos.rect.top + self.style.contextMenuMarginTop + self.canvasOffsetTop,\n                    right: ev.cell.width + ev.cell.x + pos.rect.left,\n                    bottom: ev.cell.height + ev.cell.y + pos.rect.top,\n                    height: ev.cell.height,\n                    width: ev.cell.width\n                };\n                if (self.mobile) {\n                    contextPosition.left = self.style.mobileContextMenuMargin + 'px';\n                    contextPosition.width = self.width - (self.style.mobileContextMenuMargin * 2) + 'px';\n                }\n                self.contextMenu = createContextMenu(ev, contextPosition, items);\n                document.addEventListener('mouseup', createDiposeEvent);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        self.getClippingRect = function (ele) {\n            var boundingRect = self.position(self.parentNode),\n                eleRect = self.position(ele),\n                s = self.scrollOffset(self.canvas),\n                clipRect = {\n                    x: 0,\n                    y: 0,\n                    h: 0,\n                    w: 0\n                },\n                parentRect = {\n                    x: -Infinity,\n                    y: -Infinity,\n                    h: Infinity,\n                    w: Infinity\n                },\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth();\n            boundingRect.top -= s.top;\n            boundingRect.left -= s.left;\n            eleRect.top -= s.top;\n            eleRect.left -= s.left;\n            clipRect.h = boundingRect.top + boundingRect.height - ele.offsetTop - self.style.scrollBarWidth;\n            clipRect.w = boundingRect.left + boundingRect.width - ele.offsetLeft - self.style.scrollBarWidth;\n            clipRect.x = boundingRect.left + (eleRect.left * -1) + rowHeaderCellWidth;\n            clipRect.y = boundingRect.top + (eleRect.top * -1) + columnHeaderCellHeight;\n            return {\n                x: clipRect.x > parentRect.x ? clipRect.x : parentRect.x,\n                y: clipRect.y > parentRect.y ? clipRect.y : parentRect.y,\n                h: clipRect.h < parentRect.h ? clipRect.h : parentRect.h,\n                w: clipRect.w < parentRect.w ? clipRect.w : parentRect.w\n            };\n        };\n        self.clipElement = function (ele) {\n            var clipRect = self.getClippingRect(ele);\n            if (clipRect.w < 0) { clipRect.w = 0; }\n            if (clipRect.h < 0) { clipRect.h = 0; }\n            ele.style.clip = 'rect('\n                + clipRect.y + 'px,'\n                + clipRect.w + 'px,'\n                + clipRect.h + 'px,'\n                + clipRect.x + 'px'\n                + ')';\n            // INFO https://developer.mozilla.org/en-US/docs/Web/CSS/clip\n            // clip has been \"deprecated\" for clipPath.  Of course nothing but chrome\n            // supports clip path, so we'll keep using clip until someday clipPath becomes\n            // more widely support.  The code below works correctly, but setting clipPath and clip\n            // at the same time has undesirable results.\n            // ele.style.clipPath = 'polygon('\n            //     + clipRect.x + 'px ' + clipRect.y + 'px,'\n            //     + clipRect.x + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.y + 'px'\n            //     + ')';\n        };\n        self.scrollOffset = function (e) {\n            var x = 0, y = 0;\n            while (e.parentNode && e.nodeName !== 'CANVAS-DATAGRID') {\n                if (e.nodeType !== 'canvas-datagrid-tree'\n                        && e.nodeType !== 'canvas-datagrid-cell') {\n                    x -= e.scrollLeft;\n                    y -= e.scrollTop;\n                }\n                e = e.parentNode;\n            }\n            return {left: x, top: y};\n        };\n        self.resizeEditInput = function () {\n            if (self.input && self.input.editCell) {\n                var pos = self.canvas.getBoundingClientRect(),\n                    s = self.scrollOffset(self.canvas),\n                    bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                    borderWidth = (self.style.cellBorderWidth * bm),\n                    cell = self.getVisibleCellByIndex(self.input.editCell.columnIndex, self.input.editCell.rowIndex)\n                        || {x: -100, y: -100, height: 0, width: 0};\n                if (self.mobile) {\n                    self.input.style.left = '0';\n                    self.input.style.top = (self.height - self.style.mobileEditInputHeight) - borderWidth - 1 + 'px';\n                    self.input.style.height = self.style.mobileEditInputHeight + 'px';\n                    self.input.style.width = self.width - borderWidth - 1 + 'px';\n                    return;\n                }\n                self.input.style.left = pos.left + cell.x + self.canvasOffsetLeft - s.left + 'px';\n                self.input.style.top = pos.top + cell.y - self.style.cellBorderWidth + self.canvasOffsetTop - s.top + 'px';\n                self.input.style.height = cell.height - borderWidth + 'px';\n                self.input.style.width = cell.width - self.style.cellPaddingLeft + 'px';\n                self.clipElement(self.input);\n            }\n        };\n        self.position = function (e, ignoreScrollOffset) {\n            var x = 0, y = 0, s = e, h, w;\n            while (e.offsetParent && e.nodeName !== 'CANVAS-DATAGRID') {\n                x += e.offsetLeft;\n                y += e.offsetTop;\n                h = e.offsetHeight;\n                w = e.offsetWidth;\n                e = e.offsetParent;\n            }\n            if (ignoreScrollOffset) {\n                return {left: x, top: y, height: h, width: w};\n            }\n            e = s;\n            s = self.scrollOffset(e);\n            return { left: x + s.left, top: y + s.top, height: h, width: w };\n        };\n        self.getLayerPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.clientX - rect.left,\n                    y: e.clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        /**\n         * Ends editing, optionally aborting the edit.\n         * @memberof canvasDatagrid\n         * @name endEdit\n         * @method\n         * @param {boolean} abort When true, abort the edit.\n         */\n        self.endEdit = function (abort) {\n            var cell = self.input.editCell,\n                y = cell.rowIndex;\n            function abortEdit() {\n                abort = true;\n            }\n            if (self.dispatchEvent('beforeendedit', {\n                    cell: cell,\n                    newValue: self.input.value,\n                    oldValue: cell.value,\n                    abort: abortEdit,\n                    input: self.input\n                })) { return false; }\n            if (self.input.value !== cell.value && !abort) {\n                self.changes[y] = self.changes[y] || {};\n                self.changes[y][cell.header.name] = self.input.value;\n                cell.data[cell.header.name] = self.input.value;\n                if (y === self.data.length) {\n                    if (self.dispatchEvent('newrow', {\n                            value: self.input.value,\n                            defaultValue: cell.value,\n                            aborted: abort,\n                            cell: cell,\n                            input: self.input\n                        })) { return false; }\n                    self.uId += 1;\n                    self.addRow(cell.data);\n                    self.createNewRowData();\n                }\n                self.draw(true);\n            }\n            document.body.removeChild(self.input);\n            self.intf.focus();\n            self.dispatchEvent('endedit', {\n                cell: cell,\n                value: self.input.value,\n                aborted: abort,\n                input: self.input\n            });\n            self.input = undefined;\n            return true;\n        };\n        /**\n         * Begins editing at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name beginEditAt\n         * @method\n         * @param {number} x The column index of the cell to edit.\n         * @param {number} y The row index of the cell to edit.\n         */\n        self.beginEditAt = function (x, y) {\n            if (!self.attributes.editable) { return; }\n            if (self.input) {\n                self.endEdit();\n            }\n            var cell = self.getVisibleCellByIndex(x, y),\n                s = self.getVisibleSchema(),\n                enumItems,\n                enu,\n                option,\n                valueInEnum;\n            if (!(cell && cell.header)) { return; }\n            //HACK for IE10, does not like literal enum\n            enu = cell.header['enum'];\n            if (self.dispatchEvent('beforebeginedit', {cell: cell})) { return false; }\n            self.scrollIntoView(x, y);\n            self.setActiveCell(x, y);\n            if (enu) {\n                self.input = document.createElement('select');\n            } else {\n                self.input = document.createElement(self.attributes.multiLine\n                    ? 'textarea' : 'input');\n            }\n            cell = self.getVisibleCellByIndex(x, y);\n            //HACK on mobile devices sometimes edit can begin without the cell being in view, I don't know how.\n            if (!cell) { return; }\n            if (enu) {\n                // add enums\n                if (typeof enu === 'function') {\n                    enumItems = enu.apply(self.intf, [{cell: cell}]);\n                } else if (Array.isArray(enu)) {\n                    enumItems = enu;\n                }\n                enumItems.forEach(function (e) {\n                    var i = document.createElement('option'),\n                        val,\n                        title;\n                    if (Array.isArray(e)) {\n                        val = e[0];\n                        title = e[1];\n                    } else {\n                        val = e;\n                        title = e;\n                    }\n                    if (val === cell.value) { valueInEnum = true; }\n                    i.value = val;\n                    i.innerHTML = title;\n                    self.input.appendChild(i);\n                });\n                if (!valueInEnum) {\n                    option = document.createElement('option');\n                    option.value = cell.value;\n                    option.innerHTML = cell.value;\n                    self.input.appendChild(option);\n                }\n                self.input.addEventListener('change', function () {\n                    self.endEdit();\n                    self.draw(true);\n                });\n            }\n            document.body.appendChild(self.input);\n            self.createInlineStyle(self.input, self.mobile ? 'canvas-datagrid-edit-mobile-input' : 'canvas-datagrid-edit-input');\n            self.input.style.position = 'absolute';\n            self.input.editCell = cell;\n            self.resizeEditInput();\n            self.input.style.zIndex = '2';\n            self.input.style.fontSize = (parseInt(self.style.editCellFontSize, 10) * self.scale) + 'px';\n            self.input.value = cell.value;\n            self.input.focus();\n            self.input.addEventListener('click', self.stopPropagation);\n            self.input.addEventListener('dblclick', self.stopPropagation);\n            self.input.addEventListener('mouseup', self.stopPropagation);\n            self.input.addEventListener('mousedown', self.stopPropagation);\n            self.input.addEventListener('keydown', function (e) {\n                var nx = cell.columnIndex,\n                    ny = cell.rowIndex;\n                // esc\n                if (e.keyCode === 27) {\n                    self.endEdit(true);\n                    self.draw(true);\n                // enter\n                } else if (e.keyCode === 13\n                        && (!self.attributes.multiLine\n                            || (self.attributes.multiLine && e.shiftKey))) {\n                    self.endEdit();\n                    self.draw(true);\n                } else if (e.keyCode === 9) {\n                    e.preventDefault();\n                    if (!self.endEdit()) {\n                        return;\n                    }\n                    if (e.shiftKey) {\n                        nx -= 1;\n                    } else {\n                        nx += 1;\n                    }\n                    if (nx < 0) {\n                        nx = s.length - 1;\n                        ny -= 1;\n                    }\n                    if (nx > s.length - 1) {\n                        nx = 0;\n                        ny += 1;\n                    }\n                    if (ny < 0) {\n                        ny = self.data.length - 1;\n                    }\n                    if (ny > self.data.length - 1) {\n                        ny = 0;\n                    }\n                    self.scrollIntoView(nx, ny);\n                    self.beginEditAt(nx, ny);\n                }\n            });\n            self.dispatchEvent('beginedit', {cell: cell, input: self.input});\n        };\n        self.createInlineStyle = function (el, className) {\n            var css = {\n                'canvas-datagrid-context-menu-filter-input': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextFilterInputBackground,\n                    color: self.style.contextFilterInputColor,\n                    border: self.style.contextFilterInputBorder,\n                    borderRadius: self.style.contextFilterInputBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextFilterInputFontFamily,\n                    fontSize: self.style.contextFilterInputFontSize\n                },\n                'canvas-datagrid-context-menu-filter-button': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextFilterButtonBorder,\n                    borderRadius: self.style.contextFilterButtonBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFilterButtonFontFamily,\n                    fontSize: self.style.contextMenuFilterButtonFontSize\n                },\n                'canvas-datagrid-context-child-arrow': {\n                    cssFloat: 'right',\n                    color: self.style.childContextMenuArrowColor,\n                    fontSize: self.style.contextMenuChildArrowFontSize,\n                    fontFamily: self.style.contextMenuFontFamily,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-autocomplete': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    position: 'absolute',\n                    zIndex: 9999,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-autocomplete-item': {\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor\n                },\n                'canvas-datagrid-autocomplete-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-canvas': {\n                    position: 'absolute',\n                    zIndex: '-1'\n                },\n                'canvas-datagrid': {\n                    display: 'block'\n                },\n                'canvas-datagrid-control-input': {\n                    position: 'fixed',\n                    top: '-5px',\n                    left: '-5px',\n                    border: 'none',\n                    opacity: '0',\n                    cursor: 'pointer',\n                    width: '1px',\n                    height: '1px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize\n                },\n                'canvas-datagrid-edit-mobile-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 0',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.mobileEditFontFamily,\n                    fontSize: self.style.mobileEditFontSize,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-edit-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 ' + self.style.editCellPaddingLeft + 'px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.editCellFontFamily,\n                    fontSize: self.style.editCellFontSize,\n                    boxShadow: self.style.editCellBoxShadow,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-context-menu-item-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-context-menu-label': {\n                    margin: self.style.contextMenuLabelMargin,\n                    display: self.style.contextMenuLabelDisplay,\n                    minWidth: self.style.contextMenuLabelMinWidth,\n                    maxWidth: self.style.contextMenuLabelMaxWidth\n                },\n                'canvas-datagrid-context-menu-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-context-menu': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-invalid-search-regExp': {\n                    background: self.style.contextMenuFilterInvalidExpresion\n                }\n            };\n            if (css[className]) {\n                Object.keys(css[className]).map(function (prop) {\n                    el.style[prop] = css[className][prop];\n                });\n            }\n            return;\n        };\n        self.appendTo = function (e) {\n            self.parentNode = e;\n            self.setDom();\n        };\n        self.setDom = function () {\n            if (!self.parentNode) { return; }\n            if (self.parentNode && /canvas-datagrid-(cell|tree)/.test(self.parentNode.nodeType)) {\n                self.isChildGrid = true;\n                self.parentGrid = self.parentNode.parentGrid;\n                self.ctx = self.parentGrid.context;\n                self.canvas = self.parentGrid.canvas;\n                self.controlInput = self.parentGrid.controlInput;\n                self.eventParent = self.canvas;\n            } else {\n                self.controlInput = self.controlInput || document.createElement('input');\n                self.controlInput.onblur = self.intf.blur;\n                self.createInlineStyle(self.controlInput, 'canvas-datagrid-control-input');\n                self.isChildGrid = false;\n                self.parentDOMNode = self.parentNode;\n                self.parentIsCanvas = /^canvas$/i.test(self.parentDOMNode.tagName);\n                if (self.parentIsCanvas) {\n                    self.canvas = self.parentDOMNode;\n                    self.parentDOMNode.appendChild(self.controlInput);\n                } else {\n                    self.canvas = document.createElement('canvas');\n                    self.parentDOMNode.appendChild(self.canvas);\n                    self.parentDOMNode.appendChild(self.controlInput);\n                }\n                self.createInlineStyle(self.canvas, 'canvas-datagrid');\n                self.ctx = self.canvas.getContext('2d');\n                self.ctx.textBaseline = 'alphabetic';\n                self.eventParent = self.canvas;\n            }\n            self.parentNodeStyle = self.canvas.style;\n            self.controlInput.setAttribute('readonly', true);\n            self.controlInput.addEventListener('blur', function (e) {\n                if (e.target !== self.canvas) {\n                    self.hasFocus = false;\n                }\n            });\n            self.eventParent.addEventListener('scroll', self.resize, false);\n            self.eventParent.addEventListener('touchstart', self.touchstart, false);\n            self.eventParent.addEventListener('mouseup', self.mouseup, false);\n            self.eventParent.addEventListener('mousedown', self.mousedown, false);\n            self.eventParent.addEventListener('dblclick', self.dblclick, false);\n            self.eventParent.addEventListener('click', self.click, false);\n            self.eventParent.addEventListener('mousemove', self.mousemove);\n            self.eventParent.addEventListener('wheel', self.scrollWheel, false);\n            self.canvas.addEventListener('contextmenu', self.contextmenuEvent, false);\n            self.controlInput.addEventListener('copy', self.copy);\n            self.controlInput.addEventListener('cut', self.cut);\n            self.controlInput.addEventListener('paste', self.paste);\n            self.controlInput.addEventListener('keypress', self.keypress, false);\n            self.controlInput.addEventListener('keyup', self.keyup, false);\n            self.controlInput.addEventListener('keydown', self.keydown, false);\n            window.addEventListener('resize', self.resize);\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        // all methods here are exposed by intf\n        // to users\n        /**\n         * Converts a integer into a letter A - ZZZZZ...\n         * @memberof canvasDatagrid\n         * @name integerToAlpha\n         * @method\n         * @param {column} n The number to convert.\n         */\n        self.integerToAlpha = function (n) {\n            var ordA = 'a'.charCodeAt(0),\n                ordZ = 'z'.charCodeAt(0),\n                len = ordZ - ordA + 1,\n                s = '';\n            while (n >= 0) {\n                s = String.fromCharCode(n % len + ordA) + s;\n                n = Math.floor(n / len) - 1;\n            }\n            return s;\n        };\n        /**\n         * Inserts a new column before the specified index into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name insertColumn\n         * @method\n         * @param {column} c The column to insert into the schema.\n         * @param {number} index The index of the column to insert before.\n         */\n        self.insertColumn = function (c, index) {\n            var s = self.getSchema();\n            if (s.length < index) {\n                throw new Error('Index is beyond the length of the schema.');\n            }\n            self.validateColumn(c, s);\n            s.splice(index, 0, c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a column from the schema at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteColumn\n         * @tutorial schema\n         * @method\n         * @param {number} index The index of the column to delete.\n         */\n        self.deleteColumn = function (index) {\n            var s = self.getSchema();\n            // remove data matching this column name from data\n            self.data.forEach(function (row) {\n                delete row[s[index].name];\n            });\n            s.splice(index, 1);\n            self.intf.schema = s;\n        };\n        /**\n         * Adds a new column into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name addColumn\n         * @method\n         * @param {column} c The column to add to the schema.\n         */\n        self.addColumn = function (c) {\n            var s = self.getSchema();\n            self.validateColumn(c, s);\n            s.push(c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a row from the dataset at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteRow\n         * @method\n         * @param {number} index The index of the row to delete.\n         */\n        self.deleteRow = function (index) {\n            self.originalData.splice(index, 1);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Inserts a new row into the dataset before the specified index.\n         * @memberof canvasDatagrid\n         * @name insertRow\n         * @method\n         * @param {object} d data.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertRow = function (d, index) {\n            if (self.originalData.length < index) {\n                throw new Error('Index is beyond the length of the dataset.');\n            }\n            self.originalData.splice(index, 0, d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[index], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Adds a new row into the dataset.\n         * @memberof canvasDatagrid\n         * @name addRow\n         * @method\n         * @param {object} d data.\n         */\n        self.addRow = function (d) {\n            self.originalData.push(d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[self.originalData.length - 1], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Sets the height of a given row by index number.\n         * @memberof canvasDatagrid\n         * @name setRowHeight\n         * @method\n         * @param {number} rowIndex The index of the row to set.\n         * @param {number} height Height to set the row to.\n         */\n        self.setRowHeight = function (rowIndex, height) {\n            self.sizes.rows[self.data[rowIndex][self.uniqueId]] = height;\n            self.draw(true);\n        };\n        /**\n         * Sets the width of a given column by index number.\n         * @memberof canvasDatagrid\n         * @name setColumnWidth\n         * @method\n         * @param {number} colIndex The index of the column to set.\n         * @param {number} width Width to set the column to.\n         */\n        self.setColumnWidth = function (colIndex, width) {\n            var s = self.getSchema();\n            self.sizes.columns[s[colIndex][self.uniqueId]] = width;\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the width of the columns due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetColumnWidths\n         * @tutorial schema\n         * @method\n         */\n        self.resetColumnWidths = function () {\n            self.sizes.columns = {};\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the height of the rows due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetRowHeights\n         * @tutorial schema\n         * @method\n         */\n        self.resetRowHeights = function () {\n            self.sizes.rows = {};\n            self.draw(true);\n        };\n        /**\n         * Sets the value of the filter.\n         * @memberof canvasDatagrid\n         * @name setFilter\n         * @method\n         * @param {string} column Name of the column to filter.\n         * @param {string} value The value to filter for.\n         */\n        self.setFilter = function (column, value) {\n            function applyFilter() {\n                self.refreshFromOrigialData();\n                Object.keys(self.columnFilters).forEach(function (filter) {\n                    var header = self.getHeaderByName(column);\n                    if (!header) {\n                        return;\n                    }\n                    self.currentFilter = header.filter || self.filter(column.type || 'string');\n                    self.data = self.data.filter(function (row) {\n                        return self.currentFilter(row[filter], self.columnFilters[filter]);\n                    });\n                });\n                self.resize();\n                self.draw(true);\n            }\n            if (column === undefined && value === undefined) {\n                self.columnFilters = {};\n                return applyFilter();\n            }\n            if (column && (value === '' || value === undefined)) {\n                delete self.columnFilters[column];\n            } else {\n                self.columnFilters[column] = value;\n            }\n            applyFilter();\n        };\n        /**\n         * Returns the number of pixels to scroll down to line up with row rowIndex.\n         * @memberof canvasDatagrid\n         * @name findRowScrollTop\n         * @method\n         * @param {number} rowIndex The row index of the row to scroll find.\n         */\n        self.findRowScrollTop = function (rowIndex) {\n            var top = 0, x = 0, l = self.data.length,\n                bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                cellBorder = self.style.cellBorderWidth * bm;\n            if (!self.attributes.showNewRow) {\n                l -= 1;\n            }\n            if (rowIndex > l) {\n                throw new Error('Impossible row index');\n            }\n            while (x < rowIndex) {\n                top += (self.sizes.rows[self.data[x][self.uniqueId]] || self.style.cellHeight) + cellBorder;\n                x += 1;\n            }\n            //TODO: This is not super accurate, causes pageUp/Dn to not move around right\n            return top - (self.sizes.rows[self.data[rowIndex][self.uniqueId]] || self.style.cellHeight);\n        };\n        /**\n         * Returns the number of pixels to scroll to the left to line up with column columnIndex.\n         * @memberof canvasDatagrid\n         * @name findColumnScrollLeft\n         * @method\n         * @param {number} columnIndex The column index of the column to find.\n         */\n        self.findColumnScrollLeft = function (columnIndex) {\n            var left = 0, y = 0, s = self.getSchema(), l = s.length - 1;\n            if (columnIndex > l) {\n                throw new Error('Impossible column index');\n            }\n            while (y < columnIndex) {\n                left += self.sizes.columns[s[y][self.uniqueId]] || s[y].width || self.style.cellWidth;\n                y += 1;\n            }\n            return left;\n        };\n        /**\n         * Scrolls the cell at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name gotoCell\n         * @method\n         * @param {number} x The column index of the cell to scroll to.\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoCell = function (x, y) {\n            if (x !== undefined) {\n                self.scrollBox.scrollLeft = self.findColumnScrollLeft(x);\n            }\n            if (y !== undefined) {\n                self.scrollBox.scrollTop = self.findRowScrollTop(y);\n            }\n        };\n        /**\n         * Scrolls the row y.\n         * @memberof canvasDatagrid\n         * @name gotoRow\n         * @method\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoRow = function (y) {\n            self.gotoCell(0, y);\n        };\n        /**\n         * Scrolls the cell at cell x, row y into view if it is not already.\n         * @memberof canvasDatagrid\n         * @name scrollIntoView\n         * @method\n         * @param {number} x The column index of the cell to scroll into view.\n         * @param {number} y The row index of the cell to scroll into view.\n         */\n        self.scrollIntoView = function (x, y) {\n            if (self.visibleCells.filter(function (cell) {\n                    return (cell.rowIndex === y || y === undefined)\n                        && (cell.columnIndex === x || x === undefined)\n                        && cell.x > 0\n                        && cell.y > 0\n                        && cell.x + cell.width < self.width\n                        && cell.y + cell.height < self.height;\n                }).length === 0) {\n                self.gotoCell(x, y);\n            }\n        };\n        /**\n         * Sets the active cell. Requires redrawing.\n         * @memberof canvasDatagrid\n         * @name setActiveCell\n         * @method\n         * @param {number} x The column index of the cell to set active.\n         * @param {number} y The row index of the cell to set active.\n         */\n        self.setActiveCell = function (x, y) {\n            self.activeCell = {\n                rowIndex: y,\n                columnIndex: x\n            };\n        };\n        /**\n         * Removes the selection.\n         * @memberof canvasDatagrid\n         * @name selectNone\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectNone = function (dontDraw) {\n            self.selections = [];\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Selects every visible cell.\n         * @memberof canvasDatagrid\n         * @name selectAll\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectAll = function (dontDraw) {\n            self.selectArea({\n                top: 0,\n                left: 0,\n                right: self.getVisibleSchema().length - 1,\n                bottom: self.data.length - 1\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Returns true if the selected columnIndex is selected on every row.\n         * @memberof canvasDatagrid\n         * @name isColumnSelected\n         * @method\n         * @param {number} columnIndex The column index to check.\n         */\n        self.isColumnSelected = function (columnIndex) {\n            var colIsSelected = true;\n            self.data.forEach(function (row, rowIndex) {\n                if (!self.selections[rowIndex] || self.selections[rowIndex].indexOf(self.orders.columns[columnIndex]) === -1) {\n                    colIsSelected = false;\n                }\n            });\n            return colIsSelected;\n        };\n        /**\n         * Runs the defined method on each selected cell.\n         * @memberof canvasDatagrid\n         * @name forEachSelectedCell\n         * @method\n         * @param {number} fn The function to execute.  The signature of the function is: (data, rowIndex, columnName).\n         * @param {number} expandToRow When true the data in the array is expanded to the entire row.\n         */\n        self.forEachSelectedCell = function (fn, expandToRow) {\n            var d = [], s = expandToRow ? self.getSchema() : self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    if (col === -1 || !s[col]) { return; }\n                    fn(self.data, index, s[col].name);\n                });\n            });\n        };\n        /**\n         * Selects a column.\n         * @memberof canvasDatagrid\n         * @name selectColumn\n         * @method\n         * @param {number} columnIndex The column index to select.\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the column.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the column.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectColumn = function (columnIndex, ctrl, shift, supressEvent) {\n            var s, e, x;\n            function addCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) === -1) {\n                        self.selections[rowIndex].push(i);\n                    }\n                });\n            }\n            function removeCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) !== -1) {\n                        self.selections[rowIndex].splice(self.selections[rowIndex].indexOf(i), 1);\n                    }\n                });\n            }\n            if (shift) {\n                if (!self.activeCell) { return; }\n                s = Math.min(self.activeCell.columnIndex, columnIndex);\n                e = Math.max(self.activeCell.columnIndex, columnIndex);\n                for (x = s; e > x; x += 1) {\n                    addCol(x);\n                }\n            }\n            if (!ctrl && !shift) {\n                self.selections = [];\n                self.activeCell.columnIndex = columnIndex;\n                self.activeCell.rowIndex = self.scrollIndexTop;\n            }\n            if (ctrl && self.isColumnSelected(columnIndex)) {\n                removeCol(columnIndex);\n            } else {\n                addCol(columnIndex);\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.getSelectionBounds()\n            });\n        };\n        /**\n         * Selects a row.\n         * @memberof canvasDatagrid\n         * @name selectRow\n         * @method\n         * @param {number} rowIndex The row index to select.\n         * @param {boolean} ctrl When true, behaves as if you were holding control/command when you clicked the row.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the row.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectRow = function (rowIndex, ctrl, shift, supressEvent) {\n            var x, st, en, s = self.getVisibleSchema();\n            function addRow(ri) {\n                self.selections[ri] = [];\n                self.selections[ri].push(-1);\n                s.forEach(function (col, index) {\n                    self.selections[ri].push(index);\n                });\n            }\n            if (self.dragAddToSelection === false || self.dragObject === undefined) {\n                if (self.selections[rowIndex] && self.selections[rowIndex].length - 1 === s.length) {\n                    if (ctrl) {\n                        self.selections[rowIndex] = [];\n                        return;\n                    }\n                }\n            }\n            if (self.dragAddToSelection === true || self.dragObject === undefined) {\n                if (shift && self.dragObject === undefined) {\n                    if (!self.activeCell) { return; }\n                    st = Math.min(self.activeCell.rowIndex, rowIndex);\n                    en = Math.max(self.activeCell.rowIndex, rowIndex);\n                    for (x = st; en >= x; x += 1) {\n                        addRow(x);\n                    }\n                } else {\n                    addRow(rowIndex);\n                }\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Collapse a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name collapseTree\n         * @method\n         * @param {number} index The index of the row to collapse.\n         */\n        self.collapseTree = function (rowIndex) {\n            var rowId = self.data[rowIndex][self.uniqueId];\n            self.dispatchEvent('collapsetree', {\n                childGrid: self.childGrids[rowId],\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId].blur();\n            self.openChildren[rowId].dispose();\n            delete self.openChildren[rowId];\n            delete self.sizes.trees[rowId];\n            delete self.childGrids[rowId];\n            self.dispatchEvent('resizerow', {\n                cellHeight: self.style.cellHeight\n            });\n            self.resize(true);\n            self.draw(true);\n        };\n        /**\n         * Expands a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name expandTree\n         * @method\n         * @param {number} index The index of the row to expand.\n         */\n        self.expandTree = function (rowIndex) {\n            var trArgs = self.args.treeGridAttributes || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth,\n                rowId = self.data[rowIndex][self.uniqueId],\n                h = self.sizes.trees[rowId] || self.style.treeGridHeight,\n                treeGrid;\n            if (!self.childGrids[rowId]) {\n                trArgs.debug = self.attributes.debug;\n                trArgs.name = self.attributes.saveAppearance ? self.attributes.name + 'tree' + rowId : undefined;\n                trArgs.style = trArgs.style || self.style;\n                trArgs.parentNode = {\n                    parentGrid: self.intf,\n                    nodeType: 'canvas-datagrid-tree',\n                    offsetHeight: h,\n                    offsetWidth: self.width - rowHeaderCellWidth,\n                    header: { width: self.width - rowHeaderCellWidth },\n                    offsetLeft: rowHeaderCellWidth,\n                    offsetTop: columnHeaderCellHeight,\n                    offsetParent: self.intf.parentNode,\n                    parentNode: self.intf.parentNode,\n                    style: 'tree',\n                    data: self.data[rowIndex]\n                };\n                treeGrid = self.createGrid(trArgs);\n                self.childGrids[rowId] = treeGrid;\n            }\n            treeGrid = self.childGrids[rowId];\n            treeGrid.visible = true;\n            self.dispatchEvent('expandtree', {\n                treeGrid: treeGrid,\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId] = treeGrid;\n            self.sizes.trees[rowId] = h;\n            self.dispatchEvent('resizerow', {height: self.style.cellHeight});\n            self.resize(true);\n        };\n        /**\n         * Toggles tree grid open and close by row index.\n         * @memberof canvasDatagrid\n         * @name toggleTree\n         * @method\n         * @param {number} index The index of the row to toggle.\n         */\n        self.toggleTree = function (rowIndex) {\n            var i = self.openChildren[self.data[rowIndex][self.uniqueId]];\n            if (i) {\n                return self.collapseTree(rowIndex);\n            }\n            self.expandTree(rowIndex);\n        };\n        /**\n         * Returns a header from the schema by name.\n         * @memberof canvasDatagrid\n         * @name getHeaderByName\n         * @tutorial schema\n         * @method\n         * @returns {header} header with the selected name, or undefined.\n         * @param {string} name The name of the column to resize.\n         */\n        self.getHeaderByName = function (name) {\n            var x, i = self.getSchema();\n            for (x = 0; x < i.length; x += 1) {\n                if (i[x].name === name) {\n                    return i[x];\n                }\n            }\n        };\n        /**\n         * Resizes a column to fit the longest value in the column. Call without a value to resize all columns.\n         * Warning, can be slow on very large record sets (1m records ~3-5 seconds on an i7).\n         * @memberof canvasDatagrid\n         * @name fitColumnToValues\n         * @method\n         * @param {string} name The name of the column to resize.\n         */\n        self.fitColumnToValues = function (name, internal) {\n            if (!self.canvas) { return; }\n            self.sizes.columns[name === 'cornerCell' ? name : self.getHeaderByName(name)[self.uniqueId]]\n                = self.findColumnMaxTextLength(name);\n            if (!internal) {\n                self.resize();\n                self.draw(true);\n            }\n        };\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @overload\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {number} columnIndex The column index of the cell to check.\n         * @param {number} rowIndex The row index of the cell to check.\n         */\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {cell} cell The cell to check for.  Alternatively you can pass an object { x: <x-pixel-value>, y: <y-pixel-value> }.\n         */\n        self.isCellVisible = function (cell, rowIndex) {\n            // overload\n            if (rowIndex !== undefined) {\n                return self.visibleCells.filter(function (c) {\n                    return c.columnIndex === cell && c.rowIndex === rowIndex;\n                }).length > 0;\n            }\n            var x, l = self.visibleCells.length;\n            for (x = 0; x < l; x += 1) {\n                if (cell.x === self.visibleCells[x].x && cell.y === self.visibleCells[x].y) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n         * Sets the order of the data.\n         * @memberof canvasDatagrid\n         * @name order\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} columnName Number of pixels from the left.\n         * @param {string} direction `asc` for ascending or `desc` for descending.\n         * @param {function} [sortFunction] When defined, override the default sorting method defined in the column's schema and use this one.\n         * @param {bool} [dontSetStorageData] Don't store this setting for future use.\n         */\n        self.order = function (columnName, direction, sortFunction, dontSetStorageData) {\n            var f,\n                c = self.getSchema().filter(function (col) {\n                    return col.name === columnName;\n                });\n            self.orderBy = columnName;\n            if (c.length === 0) {\n                throw new Error('Cannot sort.  No such column name');\n            }\n            f = sortFunction || self.sorters[c[0].type];\n            if (!f && c[0].type !== undefined) {\n                console.warn('Cannot sort type \"%s\" falling back to string sort.', c[0].type);\n            }\n            self.data = self.data.sort(typeof f === 'function' ? f(columnName, direction) : self.sorters.string);\n            self.dispatchEvent('ordercolumn', {name: columnName, direction: direction});\n            self.draw(true);\n            if (dontSetStorageData) { return; }\n            self.setStorageData();\n        };\n        self.isInGrid = function (e) {\n            if (e.x < 0\n                    || e.x > self.width\n                    || e.y < 0\n                    || e.y > self.height) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Moves the current selection relative to the its current position.  Note: this method does not move the selected data, just the selection itself.\n         * @memberof canvasDatagrid\n         * @name moveSelection\n         * @method\n         * @param {number} offsetX The number of columns to offset the selection.\n         * @param {number} offsetY The number of rows to offset the selection.\n         */\n        self.moveSelection = function (offsetX, offsetY) {\n            var sel = [];\n            self.selections.forEach(function (row, rowIndex) {\n                sel[rowIndex + offsetY] = [];\n                row.forEach(function (colIndex) {\n                    sel[rowIndex + offsetY].push(colIndex + offsetX);\n                });\n            });\n            self.selections = sel;\n        };\n        /**\n         * Moves data in the provided selection to another position in the grid.  Moving data off the edge of the schema (columns/x) will truncate data.\n         * @memberof canvasDatagrid\n         * @name moveTo\n         * @method\n         * @param {array} sel 2D array representing selected rows and columns.  `canvasDatagrid.selections` is in this format and can be used here.\n         * @param {number} x The column index to start inserting the selection at.\n         * @param {number} y The row index to start inserting the selection at.\n         */\n        self.moveTo = function (sel, x, y) {\n            var d = self.getSelectedData(),\n                s = self.getVisibleSchema(),\n                l = sel.length,\n                xi,\n                yi = y - 1;\n            sel.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) { return; }\n                row.forEach(function (col) {\n                    if (!s[col]) { return; }\n                    self.data[index][s[col].name] = null;\n                });\n            });\n            sel.forEach(function (row, index) {\n                yi += 1;\n                xi = x - 1;\n                row.forEach(function (col, cidx) {\n                    xi += 1;\n                    if (col === -1\n                            || !s[xi]\n                            || !s[col]\n                            || self.data.length - 1 < yi\n                            || yi < 0) { return; }\n                    self.data[yi][s[xi].name] = d[index][s[col].name];\n                });\n            });\n        };\n        /**\n         * Checks if a given column is visible.\n         * @memberof canvasDatagrid\n         * @name isColumnVisible\n         * @method\n         * @returns {boolean} When true, the column is visible.\n         * @param {number} columnIndex Column index.\n         */\n        self.isColumnVisible = function (columnIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === columnIndex;\n            }).length > 0;\n        };\n        /**\n         * Checks if a given row is visible.\n         * @memberof canvasDatagrid\n         * @name isRowVisible\n         * @method\n         * @returns {boolean} When true, the row is visible.\n         * @param {number} rowIndex Row index.\n         */\n        self.isRowVisible = function (rowIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.rowIndex === rowIndex;\n            }).length > 0;\n        };\n        /**\n         * Gets the cell at columnIndex and rowIndex.\n         * @memberof canvasDatagrid\n         * @name getVisibleCellByIndex\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Column index.\n         * @param {number} y Row index.\n         */\n        self.getVisibleCellByIndex = function (x, y) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === x && c.rowIndex === y;\n            })[0];\n        };\n        /**\n         * Gets the cell at grid pixel coordinate x and y.  Author's note.  This function ties drawing and events together.  This is a very complex function and is core to the component.\n         * @memberof canvasDatagrid\n         * @name getCellAt\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Number of pixels from the left.\n         * @param {number} y Number of pixels from the top.\n         */\n        self.getCellAt = function (x, y, useTouchScrollZones) {\n            function getBorder(cell) {\n                if (cell.x + cell.width - (self.attributes.borderResizeZone * 0.4) < x && cell.x + cell.width + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'r';\n                }\n                if (cell.x - (self.attributes.borderResizeZone * 0.4) < x && cell.x + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'l';\n                }\n                if (cell.y + cell.height - (self.attributes.borderResizeZone * 0.4) < y && cell.y + cell.height + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 'b';\n                }\n                if (cell.y - (self.attributes.borderResizeZone * 0.4) < y && cell.y + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 't';\n                }\n            }\n            var border,\n                tsz = useTouchScrollZones ? self.attributes.touchScrollZone : 0,\n                moveMode = self.attributes.borderDragBehavior === 'move',\n                i,\n                l = self.visibleCells.length,\n                moveBorder,\n                xBorderBehavior = moveMode ? self.cursorGrab : 'ew-resize',\n                yBorderBehavior = moveMode ? self.cursorGrab : 'ns-resize',\n                cell;\n            if (!self.visibleCells || !self.visibleCells.length) { return; }\n            self.hasFocus = true;\n            if (!(y < self.height\n                && y > 0\n                && x < self.width\n                && x > 0)) {\n                self.hasFocus = false;\n                return {\n                    dragContext: 'inherit',\n                    context: 'inherit'\n                };\n            }\n            for (i = 0; i < l; i += 1) {\n                cell = self.visibleCells[i];\n                if (useTouchScrollZones && /(vertical|horizontal)-scroll-/.test(cell.style)) {\n                    cell.x -= tsz;\n                    cell.y -= tsz;\n                    cell.height += tsz;\n                    cell.width += tsz;\n                }\n                if (cell.x - self.style.cellBorderWidth < x\n                        && cell.x + cell.width + self.style.cellBorderWidth > x\n                        && cell.y - self.style.cellBorderWidth < y\n                        && cell.y + cell.height + self.style.cellBorderWidth > y) {\n                    if (/frozen-row-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'row-resize';\n                        return cell;\n                    }\n                    if (/frozen-column-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'col-resize';\n                        return cell;\n                    }\n                    if (/selection-handle-/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'crosshair';\n                        return cell;\n                    }\n                    if (/vertical-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'vertical-scroll-box';\n                        cell.context = 'vertical-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isVerticalScrollBar = true;\n                        if (y > self.scrollBox.box.v.y + self.scrollBox.scrollBoxHeight) {\n                            cell.dragContext = 'vertical-scroll-bottom';\n                            cell.context = 'vertical-scroll-bottom';\n                        } else if (y < self.scrollBox.box.v.y) {\n                            cell.dragContext = 'vertical-scroll-top';\n                            cell.context = 'vertical-scroll-top';\n                        }\n                        self.canvas.style.cursor = 'default';\n                        return cell;\n                    }\n                    if (/horizontal-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'horizontal-scroll-box';\n                        cell.context = 'horizontal-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isHorizontalScrollBar = true;\n                        if (x > self.scrollBox.box.h.x + self.scrollBox.scrollBoxWidth) {\n                            cell.dragContext = 'horizontal-scroll-right';\n                            cell.context = 'horizontal-scroll-right';\n                        } else if (x < self.scrollBox.box.h.x) {\n                            cell.dragContext = 'horizontal-scroll-left';\n                            cell.context = 'horizontal-scroll-left';\n                        }\n                        self.canvas.style.cursor = 'default';\n                        return cell;\n                    }\n                    border = getBorder(cell);\n                    // check if the border of this cell is the border of the selection and if so show move cursor in move mode\n                    moveBorder = moveMode && cell.selectionBorder && cell.selectionBorder.indexOf(border) !== -1;\n                    if (['l', 'r'].indexOf(border) !== -1\n                            && (self.attributes.allowColumnResize || moveBorder)\n                            && ((self.attributes.allowColumnResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && ((self.attributes.allowRowHeaderResize && (cell.isRowHeader || cell.isCorner)) || !(cell.isRowHeader && cell.isCorner))) {\n                        if (((cell.isColumnHeader || cell.isCorner) || (self.attributes.allowColumnResizeFromCell && cell.isNormal)) && border === 'r') {\n                            cell.context = 'ew-resize';\n                            cell.dragContext = 'ew-resize';\n                            return cell;\n                        }\n                        if (!(cell.isColumnHeader || cell.isCorner) && moveBorder) {\n                            cell.context = xBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (['t', 'b'].indexOf(border) !== -1\n                            && cell.rowIndex > -1\n                            && (self.attributes.allowRowResize || moveBorder)\n                            && ((self.attributes.allowRowResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && !cell.isColumnHeader) {\n                        if (((cell.isRowHeader || cell.isCorner) || (self.attributes.allowRowResizeFromCell && cell.isNormal)) && border === 'b') {\n                            cell.context = 'ns-resize';\n                            cell.dragContext = 'ns-resize';\n                            return cell;\n                        }\n                        if (!(cell.isRowHeader || cell.isCorner) && moveBorder) {\n                            cell.context = yBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (cell.style === 'columnHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'column-reorder';\n                        return cell;\n                    }\n                    if (cell.style === 'rowHeaderCell') {\n                        if ((self.attributes.rowGrabZoneSize + (cell.y - self.style.cellBorderWidth) < y)\n                                || !self.attributes.allowRowReordering) {\n                            cell.dragContext = 'cell';\n                            cell.context = 'cell';\n                        } else {\n                            cell.context = self.cursorGrab;\n                            cell.dragContext = 'row-reorder';\n                        }\n                        return cell;\n                    }\n                    if (cell.isGrid) {\n                        self.hasFocus = false;\n                        cell.dragContext = 'cell-grid';\n                        cell.context = 'cell-grid';\n                        return cell;\n                    }\n                    if (cell.style === 'tree-grid') {\n                        self.hasFocus = false;\n                        cell.dragContext = 'tree';\n                        cell.context = 'tree';\n                        return cell;\n                    }\n                    cell.dragContext = 'cell';\n                    cell.context = 'cell';\n                    return cell;\n                }\n            }\n            self.hasFocus = true;\n            self.canvas.style.cursor = 'default';\n            return {\n                dragContext: 'background',\n                context: 'background',\n                style: 'background',\n                isBackground: true\n            };\n        };\n        /**\n         * Gets the bounds of current selection. \n         * @returns {rect} selection.\n         * @memberof canvasDatagrid\n         * @name getSelectionBounds\n         * @method\n         */\n        self.getSelectionBounds = function () {\n            var low = {x: Infinity, y: Infinity},\n                high = {x: -Infinity, y: -Infinity};\n            self.data.forEach(function (row, rowIndex) {\n                var maxCol, minCol;\n                if (self.selections[rowIndex] && self.selections[rowIndex].length) {\n                    low.y = rowIndex < low.y ? rowIndex : low.y;\n                    high.y = rowIndex > high.y ? rowIndex : high.y;\n                    maxCol = Math.max.apply(null, self.selections[rowIndex]);\n                    minCol = Math.min.apply(null, self.selections[rowIndex]);\n                    low.x = minCol < low.x ? minCol : low.x;\n                    high.x = maxCol > high.x ? maxCol : high.x;\n                }\n            });\n            return {\n                top: low.y,\n                left: low.x,\n                bottom: high.y,\n                right: high.x\n            };\n        };\n        /**\n         * Returns an auto generated schema based on data structure.\n         * @memberof canvasDatagrid\n         * @name getSchemaFromData\n         * @method\n         * @tutorial schema\n         * @returns {schema} schema A schema based on the first item in the data array.\n         */\n        self.getSchemaFromData = function () {\n            return Object.keys(self.data[0] || {' ': ''}).map(function mapEachSchemaColumn(key, index) {\n                var type = self.getBestGuessDataType(key),\n                    i = {\n                        name: key,\n                        title: isNaN(parseInt(key, 10)) ? key : self.integerToAlpha(key).toUpperCase(),\n                        index: index,\n                        type: type,\n                        filter: self.filter(type)\n                    };\n                if (key === self.uniqueId) {\n                    i.hidden = true;\n                }\n                i[self.uniqueId] = self.getSchemaNameHash(key);\n                return i;\n            });\n        };\n        /**\n         * Clears the change log grid.changes that keeps track of changes to the data set.\n         * This does not undo changes or alter data it is simply a convince array to keep\n         * track of changes made to the data since last this method was called.\n         * @memberof canvasDatagrid\n         * @name clearChangeLog\n         * @method\n         */\n        self.clearChangeLog = function () {\n            self.changes = [];\n        };\n        /**\n         * Selects an area of the grid.\n         * @memberof canvasDatagrid\n         * @name selectArea\n         * @method\n         * @param {rect} bounds A rect object representing the selected values.\n         */\n        self.selectArea = function (bounds, ctrl) {\n            self.selectionBounds = bounds || self.selectionBounds;\n            var x, y, s = self.getSchema();\n            if (!ctrl) {\n                self.selections = [];\n            }\n            if (self.selectionBounds.top < -1\n                    || self.selectionBounds.bottom > self.data.length\n                    || self.selectionBounds.left < -1\n                    || self.selectionBounds.right > s.length) {\n                throw new Error('Impossible selection area');\n            }\n            for (x = self.selectionBounds.top; x <= self.selectionBounds.bottom; x += 1) {\n                self.selections[x] = [];\n                for (y = self.selectionBounds.left; y <= self.selectionBounds.right; y += 1) {\n                    if (self.selections[x].indexOf(y) === -1) {\n                        self.selections[x].push(y);\n                    }\n                }\n            }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Returns the maximum text width for a given column by column name.\n         * @memberof canvasDatagrid\n         * @name findColumnMaxTextLength\n         * @method\n         * @returns {number} The number of pixels wide the maximum width value in the selected column.\n         * @param {string} name The name of the column to calculate the value's width of.\n         */\n        self.findColumnMaxTextLength = function (name) {\n            var m = -Infinity;\n            if (name === 'cornerCell') {\n                self.ctx.font = self.style.rowHeaderCellFont;\n                return self.ctx.measureText((self.data.length + (self.attributes.showNewRow ? 1 : 0)).toString()).width\n                    + self.style.autosizePadding + self.style.autosizeHeaderCellPadding\n                    + self.style.rowHeaderCellPaddingRight\n                    + self.style.rowHeaderCellPaddingLeft\n                    + (self.attributes.tree ? self.style.treeArrowWidth\n                        + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight : 0);\n            }\n            self.getSchema().forEach(function (col) {\n                if (col.name !== name) { return; }\n                self.ctx.font = self.style.columnHeaderCellFont;\n                var t = self.ctx.measureText(col.title || col.name).width\n                    + self.style.headerCellPaddingRight\n                    + self.style.headerCellPaddingLeft;\n                m = t > m ? t : m;\n            });\n            self.data.forEach(function (row) {\n                self.ctx.font = self.style.cellFont;\n                var t = self.ctx.measureText(row[name]).width\n                    + self.style.cellPaddingRight\n                    + self.style.cellPaddingLeft + self.style.cellAutoResizePadding;\n                m = t > m ? t : m;\n            });\n            return m;\n        };\n        /**\n         * Gets the total width of all header columns.\n         * @memberof canvasDatagrid\n         * @name getHeaderWidth\n         * @method\n         */\n        self.getHeaderWidth = function () {\n            return self.getVisibleSchema().reduce(function (total, header) {\n                return total + (header.width || self.style.cellWidth);\n            }, 0);\n        };\n        self.formatters.string = function cellFormatterString(e) {\n            return e.cell.value !== undefined ? e.cell.value : '';\n        };\n        self.formatters.rowHeaderCell = self.formatters.string;\n        self.formatters.headerCell = self.formatters.string;\n        self.formatters.number = self.formatters.string;\n        self.formatters.int = self.formatters.string;\n        self.formatters.html = self.formatters.string;\n        self.sorters.string = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (a[columnName] === undefined || a[columnName] === null) {\n                    return 1;\n                }\n                if (b[columnName] === undefined || b[columnName] === null) {\n                    return 0;\n                }\n                if (asc) {\n                    if (!a[columnName].localeCompare) { return 1; }\n                    return a[columnName].localeCompare(b[columnName]);\n                }\n                if (!b[columnName].localeCompare) { return 1; }\n                return b[columnName].localeCompare(a[columnName]);\n            };\n        };\n        self.sorters.number = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return a[columnName] - b[columnName];\n                }\n                return b[columnName] - a[columnName];\n            };\n        };\n        self.sorters.date = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return new Date(a[columnName]).getTime()\n                        - new Date(b[columnName]).getTime();\n                }\n                return new Date(b[columnName]).getTime()\n                        - new Date(a[columnName]).getTime();\n            };\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// canvas-datagrid.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 9df4b24f878dde1f47a9","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.defaults = {\n            attributes: [\n                ['allowColumnReordering', true],\n                ['allowColumnResize', true],\n                ['allowColumnResizeFromCell', false],\n                ['allowFreezingRows', false],\n                ['allowFreezingColumns', false],\n                ['allowMovingSelection', true],\n                ['allowRowHeaderResize', true],\n                ['allowRowReordering', false],\n                ['allowRowResize', true],\n                ['allowRowResizeFromCell', false],\n                ['allowSorting', true],\n                ['autoResizeColumns', false],\n                ['borderDragBehavior', 'none'],\n                ['borderResizeZone', 10],\n                ['clearSettingsOptionText', 'Clear saved settings'],\n                ['columnHeaderClickBehavior', 'sort'],\n                ['columnSelectorHiddenText', '&nbsp;&nbsp;&nbsp;'],\n                ['columnSelectorText', 'Add/Remove columns'],\n                ['columnSelectorVisibleText', '\\u2713'],\n                ['contextHoverScrollAmount', 2],\n                ['contextHoverScrollRateMs', 5],\n                ['copyText', 'Copy'],\n                ['debug', false],\n                ['editable', true],\n                ['filterOptionText', 'Filter %s'],\n                ['filterTextPrefix', '(filtered) '],\n                ['globalRowResize', false],\n                ['hideColumnText', 'Hide %s'],\n                ['maxAutoCompleteItems', 200],\n                ['multiLine', false],\n                ['name', ''],\n                ['pageUpDownOverlap', 1],\n                ['pasteText', 'Paste'],\n                ['persistantSelectionMode', false],\n                ['removeFilterOptionText', 'Remove filter on %s'],\n                ['reorderDeadZone', 3],\n                ['resizeScrollZone', 20],\n                ['rowGrabZoneSize', 5],\n                ['saveAppearance', true],\n                ['scrollAnimationPPSThreshold', 0.75],\n                ['scrollPointerLock', false],\n                ['scrollRepeatRate', 75],\n                ['selectionFollowsActiveCell', false],\n                ['selectionHandleBehavior', 'none'],\n                ['selectionMode', 'cell'],\n                ['selectionScrollIncrement', 20],\n                ['selectionScrollZone', 20],\n                ['showClearSettingsOption', true],\n                ['showColumnHeaders', true],\n                ['showColumnSelector', true],\n                ['showCopy', true],\n                ['showFilter', true],\n                ['showNewRow', false],\n                ['showOrderByOption', true],\n                ['showOrderByOptionTextAsc', 'Order by %s ascending'],\n                ['showOrderByOptionTextDesc', 'Order by %s descending'],\n                ['showPaste', false],\n                ['showPerformance', false],\n                ['showRowHeaders', true],\n                ['showRowNumbers', true],\n                ['snapToRow', false],\n                ['touchContextMenuTimeMs', 800],\n                ['touchDeadZone', 3],\n                ['touchEasingMethod', 'easeOutQuad'],\n                ['touchReleaseAcceleration', 1000],\n                ['touchReleaseAnimationDurationMs', 2000],\n                ['touchScrollZone', 20],\n                ['touchSelectHandleZone', 20],\n                ['touchZoomSensitivity', 0.005],\n                ['touchZoomMin', 0.5],\n                ['touchZoomMax', 1.75],\n                ['tree', false],\n                ['treeHorizontalScroll', false]\n            ],\n            styles: [\n                ['activeCellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['activeCellBorderWidth', 1],\n                ['activeCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellFont', '16px sans-serif'],\n                ['activeCellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['activeCellOverlayBorderWidth', 1],\n                ['activeCellPaddingBottom', 5],\n                ['activeCellPaddingLeft', 5],\n                ['activeCellPaddingRight', 7],\n                ['activeCellPaddingTop', 5],\n                ['activeCellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['activeCellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['activeColumnHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeColumnHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeRowHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeRowHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['autocompleteBottomMargin', 60],\n                ['autosizeHeaderCellPadding', 8],\n                ['autosizePadding', 5],\n                ['cellAutoResizePadding', 13],\n                ['cellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['cellBorderWidth', 1],\n                ['cellColor', 'rgba(0, 0, 0, 1)'],\n                ['cellFont', '16px sans-serif'],\n                ['cellGridHeight', 250],\n                ['cellHeight', 24],\n                ['cellHeightWithChildGrid', 150],\n                ['cellHorizontalAlignment', 'left'],\n                ['cellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['cellPaddingBottom', 5],\n                ['cellPaddingLeft', 5],\n                ['cellPaddingRight', 7],\n                ['cellPaddingTop', 5],\n                ['cellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['cellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['cellVerticalAlignment', 'center'],\n                ['cellWidth', 250],\n                ['cellWidthWithChildGrid', 250],\n                ['childContextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['childContextMenuArrowHTML', '&#x25BA;'],\n                ['childContextMenuMarginLeft', -11],\n                ['childContextMenuMarginTop', -6],\n                ['columnHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellBorderColor', 'rgba(172, 172, 172, 1)'],\n                ['columnHeaderCellBorderWidth', 1],\n                ['columnHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['columnHeaderCellFont', '16px sans-serif'],\n                ['columnHeaderCellHeight', 25],\n                ['columnHeaderCellHorizontalAlignment', 'left'],\n                ['columnHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['columnHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['columnHeaderCellPaddingBottom', 5],\n                ['columnHeaderCellPaddingLeft', 5],\n                ['columnHeaderCellPaddingRight', 7],\n                ['columnHeaderCellPaddingTop', 5],\n                ['columnHeaderCellVerticalAlignment', 'center'],\n                ['columnHeaderOrderByArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['columnHeaderOrderByArrowBorderWidth', 1],\n                ['columnHeaderOrderByArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['columnHeaderOrderByArrowHeight', 8],\n                ['columnHeaderOrderByArrowMarginLeft', 0],\n                ['columnHeaderOrderByArrowMarginRight', 5],\n                ['columnHeaderOrderByArrowMarginTop', 6],\n                ['columnHeaderOrderByArrowWidth', 13],\n                ['contextFilterButtonBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterButtonBorderRadius', '3px'],\n                ['contextFilterButtonHTML', '&#x25BC;'],\n                ['contextFilterInputBackground', 'rgba(255,255,255,1)'],\n                ['contextFilterInputBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterInputBorderRadius', '0'],\n                ['contextFilterInputColor', 'rgba(0,0,0,1)'],\n                ['contextFilterInputFontFamily', 'sans-serif'],\n                ['contextFilterInputFontSize', '14px'],\n                ['contextFilterInvalidRegExpBackground', 'rgba(180, 6, 1, 1)'],\n                ['contextFilterInvalidRegExpColor', 'rgba(255, 255, 255, 1)'],\n                ['contextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuArrowDownHTML', '&#x25BC;'],\n                ['contextMenuArrowUpHTML', '&#x25B2;'],\n                ['contextMenuBackground', 'rgba(240, 240, 240, 1)'],\n                ['contextMenuBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextMenuBorderRadius', '3px'],\n                ['contextMenuChildArrowFontSize', '12px'],\n                ['contextMenuColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuFilterButtonFontFamily', 'sans-serif'],\n                ['contextMenuFilterButtonFontSize', '10px'],\n                ['contextMenuFilterInvalidExpresion', 'rgba(237, 155, 156, 1)'],\n                ['contextMenuFontFamily', 'sans-serif'],\n                ['contextMenuFontSize', '16px'],\n                ['contextMenuHoverBackground', 'rgba(182, 205, 250, 1)'],\n                ['contextMenuHoverColor', 'rgba(43, 48, 153, 1)'],\n                ['contextMenuItemBorderRadius', '3px'],\n                ['contextMenuItemMargin', '2px'],\n                ['contextMenuLabelDisplay', 'inline-block'],\n                ['contextMenuLabelMargin', '0 3px 0 0'],\n                ['contextMenuLabelMaxWidth', '700px'],\n                ['contextMenuLabelMinWidth', '75px'],\n                ['contextMenuMarginLeft', 3],\n                ['contextMenuMarginTop', -3],\n                ['contextMenuOpacity', '0.98'],\n                ['contextMenuPadding', '2px'],\n                ['contextMenuWindowMargin', 100],\n                ['cornerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cornerCellBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['editCellBackgroundColor', 'white'],\n                ['editCellBorder', 'solid 1px rgba(110, 168, 255, 1)'],\n                ['editCellBoxShadow', '0 2px 5px rgba(0,0,0,0.4)'],\n                ['editCellColor', 'black'],\n                ['editCellFontFamily', 'sans-serif'],\n                ['editCellFontSize', '16px'],\n                ['editCellPaddingLeft', 4],\n                ['frozenMarkerHoverColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerHoverBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerActiveColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerActiveBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerColor', 'rgba(222, 222, 222, 1)'],\n                ['frozenMarkerBorderColor', 'rgba(168, 168, 168, 1)'],\n                ['frozenMarkerBorderWidth', 1],\n                ['frozenMarkerWidth', 2],\n                ['gridBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['gridBorderCollapse', 'collapse'],\n                ['gridBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['gridBorderWidth', 1],\n                ['minColumnWidth', 45],\n                ['minRowHeight', 24],\n                ['mobileContextMenuMargin', 10],\n                ['mobileEditInputHeight', 30],\n                ['mobileEditFontFamily', 'sans-serif'],\n                ['mobileEditFontSize', '16px'],\n                ['moveOverlayBorderWidth', 1],\n                ['moveOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['moveOverlayBorderSegments', '12, 7'],\n                ['name', 'default'],\n                ['reorderMarkerBackgroundColor', 'rgba(0, 0, 0, 0.1)'],\n                ['reorderMarkerBorderColor', 'rgba(0, 0, 0, 0.2)'],\n                ['reorderMarkerBorderWidth', 1.25],\n                ['reorderMarkerIndexBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['reorderMarkerIndexBorderWidth', 2.75],\n                ['rowHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['rowHeaderCellBorderColor', 'rgba(200, 200, 200, 1)'],\n                ['rowHeaderCellBorderWidth', 1],\n                ['rowHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellFont', '16px sans-serif'],\n                ['rowHeaderCellHeight', 25],\n                ['rowHeaderCellHorizontalAlignment', 'left'],\n                ['rowHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['rowHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['rowHeaderCellPaddingBottom', 5],\n                ['rowHeaderCellPaddingLeft', 5],\n                ['rowHeaderCellPaddingRight', 5],\n                ['rowHeaderCellPaddingTop', 5],\n                ['rowHeaderCellSelectedBackgroundColor', 'rgba(217, 217, 217, 1)'],\n                ['rowHeaderCellSelectedColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellVerticalAlignment', 'center'],\n                ['rowHeaderCellWidth', 57],\n                ['scrollBarActiveColor', 'rgba(125, 125, 125, 1)'],\n                ['scrollBarBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarBorderWidth', 0.5],\n                ['scrollBarBoxBorderRadius', 4.125],\n                ['scrollBarBoxColor', 'rgba(192, 192, 192, 1)'],\n                ['scrollBarBoxMargin', 2],\n                ['scrollBarBoxMinSize', 15],\n                ['scrollBarBoxWidth', 8],\n                ['scrollBarCornerBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarCornerBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarWidth', 11],\n                ['selectionHandleBorderColor', 'rgba(255, 255, 255, 1)'],\n                ['selectionHandleBorderWidth', 1.5],\n                ['selectionHandleColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionHandleSize', 8],\n                ['selectionHandleType', 'square'],\n                ['selectionOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionOverlayBorderWidth', 1],\n                ['treeArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['treeArrowBorderWidth', 1],\n                ['treeArrowClickRadius', 5],\n                ['treeArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['treeArrowHeight', 8],\n                ['treeArrowMarginLeft', 0],\n                ['treeArrowMarginRight', 5],\n                ['treeArrowMarginTop', 6],\n                ['treeArrowWidth', 13],\n                ['treeGridHeight', 250]\n            ]\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/defaults.js\n// module id = 0\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true, evil: true*/\n/*globals Reflect: false, HTMLElement: true, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([\n    './component',\n    './defaults',\n    './draw',\n    './events',\n    './touch',\n    './intf',\n    './contextMenu',\n    './dom',\n    './publicMethods'\n], function context(component) {\n    'use strict';\n    component = component();\n    var modules = Array.prototype.slice.call(arguments);\n    function Grid(args) {\n        args = args || {};\n        var self = {};\n        self.isComponent = args.component === undefined;\n        self.intf = self.isComponent ? eval('Reflect.construct(HTMLElement, [], new.target)') : {};\n        self.args = args;\n        self.createGrid = function grid(args) {\n            args.component = false;\n            return new Grid(args);\n        };\n        modules.forEach(function (module) {\n            module(self);\n        });\n        if (self.isComponent) {\n            self.args.parentNode = self.intf;\n        } else {\n            self.args.parentNode = args.parentNode;\n        }\n        if (self.args.parentNode && self.args.parentNode.createShadowRoot) {\n            self.shadowRoot = self.args.parentNode.attachShadow({mode: self.args.debug ? 'open' : 'closed'});\n            self.parentNode = self.shadowRoot;\n        } else {\n            self.parentNode = args.parentNode;\n        }\n        self.init();\n        return self.intf;\n    }\n    if (window.HTMLElement) {\n        Grid.prototype = Object.create(window.HTMLElement.prototype);\n    }\n    // export web component\n    if (window.customElements) {\n        Grid.observedAttributes = component.getObservableAttributes();\n        Grid.prototype.disconnectedCallback = component.disconnectedCallback;\n        Grid.prototype.attributeChangedCallback = component.attributeChangedCallback;\n        Grid.prototype.connectedCallback = component.connectedCallback;\n        Grid.prototype.adoptedCallback = component.adoptedCallback;\n        window.customElements.define('canvas-datagrid', Grid);\n    }\n    // export global\n    if (window && !window.canvasDatagrid && !window.require) {\n        window.canvasDatagrid = function (args) { return new Grid(args); };\n    }\n    // export amd loader\n    module.exports = function grid(args) {\n        args = args || {};\n        var i, tKeys = ['style', 'schema', 'data', 'formatters',\n                    'sorters', 'filters'];\n        if (window.customElements) {\n            i = document.createElement('canvas-datagrid');\n            Object.keys(args).forEach(function (argKey) {\n                if (argKey === 'parentNode') {\n                    args.parentNode.appendChild(i);\n                    return;\n                }\n                // top level keys in args\n                if (tKeys.indexOf(argKey) !== -1) {\n                    tKeys.forEach(function (tKey) {\n                        if (args[tKey] === undefined || tKey !== argKey) { return; }\n                        if (['formatters', 'sorters', 'filters'].indexOf(argKey) !== -1) {\n                            if (typeof args[tKey] === 'object' && args[tKey] !== null) {\n                                Object.keys(args[tKey]).forEach(function (sKey) {\n                                    i[tKey][sKey] = args[tKey][sKey];\n                                });\n                            }\n                        } else {\n                            i[tKey] = args[tKey];\n                        }\n                    });\n                    return;\n                }\n                // all others are attribute level keys\n                i.attributes[argKey] = args[argKey];\n            });\n            return i;\n        }\n        args.component = false;\n        i = new Grid(args);\n        return i;\n    };\n    return module.exports;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/main.js\n// module id = 1\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine(['./defaults'], function (defaults) {\n    'use strict';\n    return function () {\n        var typeMap, component = {};\n        function hyphenateProperty(prop, cust) {\n            var p = '';\n            Array.prototype.forEach.call(prop, function (char) {\n                if (char === char.toUpperCase()) {\n                    p += '-' + char.toLowerCase();\n                    return;\n                }\n                p += char;\n            });\n            return (cust ? '--cdg-' : '') + p;\n        }\n        function getDefaultItem(base, item) {\n            var i = {},\n                r;\n            defaults(i);\n            r = i.defaults[base].filter(function (i) {\n                return i[0].toLowerCase() === item.toLowerCase()\n                    || hyphenateProperty(i[0]) === item.toLowerCase()\n                    || hyphenateProperty(i[0], true) === item.toLowerCase();\n            })[0];\n            return r;\n        }\n        function applyComponentStyle(supressChangeAndDrawEvents, intf) {\n            var cStyle = window.getComputedStyle(intf, null),\n                defs = {};\n            intf.computedStyle = cStyle;\n            defaults(defs);\n            defs = defs.defaults.styles;\n            defs.forEach(function (def) {\n                var val = cStyle.getPropertyValue(hyphenateProperty(def[0], true));\n                if (val === \"\") {\n                    val = cStyle.getPropertyValue(hyphenateProperty(def[0], false));\n                }\n                if (val !== \"\") {\n                    intf.setStyleProperty(def[0], typeMap[typeof def[1]](val, def[1]));\n                }\n            });\n            intf.resize(true);\n            if (!supressChangeAndDrawEvents && intf.dispatchEvent) {\n                intf.dispatchEvent('stylechanged', intf.style);\n            }\n        }\n        typeMap = {\n            data: function (strData) {\n                try {\n                    return JSON.parse(strData);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid data.');\n                }\n            },\n            schema: function (strSchema) {\n                try {\n                    return JSON.parse(strSchema);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid schema attribute.');\n                }\n            },\n            number: function (strNum, def) {\n                var n = parseInt(strNum, 10);\n                return isNaN(n) ? def : n;\n            },\n            boolean: function (strBool) {\n                return (/true/i).test(strBool);\n            },\n            string: function (str) {\n                return str;\n            }\n        };\n        component.getObservableAttributes = function () {\n            var i = {}, attrs = ['data', 'schema', 'style', 'className', 'name'];\n            defaults(i);\n            i.defaults.attributes.forEach(function (attr) {\n                attrs.push(attr[0].toLowerCase());\n            });\n            return attrs;\n        };\n        component.disconnectedCallback = function () {\n            this.connected = false;\n        };\n        component.connectedCallback = function () {\n            var intf = this;\n            intf.connected = true;\n            component.observe(intf);\n            applyComponentStyle(true, intf);\n            intf.resize(true);\n        };\n        component.adoptedCallback = function () {\n            this.resize();\n        };\n        component.attributeChangedCallback = function (attrName, oldVal, newVal) {\n            var tfn, intf = this, def;\n            if (attrName === 'style') {\n                requestAnimationFrame(function () { applyComponentStyle(false, intf); });\n                return;\n            }\n            if (attrName === 'data') {\n                intf.args.data = typeMap.data(newVal);\n                return;\n            }\n            if (attrName === 'schema') {\n                intf.args.schema = typeMap.schema(newVal);\n                return;\n            }\n            if (attrName === 'name') {\n                intf.name = newVal;\n                return;\n            }\n            if (attrName === 'class' || attrName === 'className') {\n                return;\n            }\n            def = getDefaultItem('attributes', attrName);\n            if (def) {\n                tfn = typeMap[typeof def[1]];\n                intf.attributes[def[0]] = tfn(newVal);\n                return;\n            }\n            if (/^on/.test(attrName)) {\n                intf.addEventListener('on' + attrName, function (e) {\n                    eval(newVal);\n                });\n            }\n            return;\n        };\n        component.observe = function (intf) {\n            var observer;\n            if (!window.MutationObserver) { return; }\n            intf.applyComponentStyle = function () { applyComponentStyle(false, intf); intf.resize(); };\n            /**\n             * Applies the computed css styles to the grid.  In some browsers, changing directives in attached style sheets does not automatically update the styles in this component.  It is necessary to call this method to update in these cases.\n             * @memberof canvasDatagrid\n             * @name applyComponentStyle\n             * @method\n             */\n            observer = new window.MutationObserver(function (mutations) {\n                var checkInnerHTML, checkStyle;\n                Array.prototype.forEach.call(mutations, function (mutation) {\n                    if (mutation.attributeName === 'class'\n                            || mutation.attributeName === 'style') {\n                        intf.applyComponentStyle(false, intf);\n                        return;\n                    }\n                    if (mutation.target.parentNode.nodeName === 'STYLE') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.addedNodes.length > 0 || mutation.type === 'characterData') {\n                        checkInnerHTML = true;\n                    }\n                });\n                if (checkStyle) {\n                    intf.applyComponentStyle(false, intf);\n                }\n                if (checkInnerHTML) {\n                    intf.data = typeMap.data(intf.innerHTML);\n                }\n            });\n            observer.observe(intf, { characterData: true, childList: true, attributes: true, subtree: true });\n            Array.prototype.forEach.call(document.querySelectorAll('style'), function (el) {\n                observer.observe(el, { characterData: true, childList: true, attributes: true, subtree: true });\n            });\n        };\n        return component;\n    };\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/component.js\n// module id = 2\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals XMLSerializer: false, define: true, Blob: false, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var perfCounters = [],\n            drawCount = 0,\n            perfWindowSize = 300,\n            entityCount = [],\n            scrollDebugCounters = [],\n            touchPPSCounters = [];\n        self.htmlImageCache = {};\n        function drawPerfLine(w, h, x, y, perfArr, arrIndex, max, color, useAbs) {\n            var i = w / perfArr.length,\n                r = h / max;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x, y + h);\n            perfArr.forEach(function (n) {\n                var val = (arrIndex === undefined ? n : n[arrIndex]),\n                    cx,\n                    cy;\n                if (useAbs) {\n                    val = Math.abs(val);\n                }\n                cx = x + i;\n                cy = y + h - (val * r);\n                self.ctx.lineTo(cx, cy);\n                x += i;\n            });\n            self.ctx.moveTo(x + w, y + h);\n            self.ctx.strokeStyle = color;\n            self.ctx.stroke();\n        }\n        function drawOnAllImagesLoaded() {\n            var loaded = true;\n            Object.keys(self.htmlImageCache).forEach(function (html) {\n                if (!self.htmlImageCache[html].complete) {\n                    loaded = false;\n                }\n            });\n            if (loaded) {\n                self.draw();\n            }\n        }\n        function drawHtml(cell) {\n            var img,\n                v = cell.innerHTML || cell.formattedValue,\n                x = cell.x + self.canvasOffsetLeft,\n                y = cell.y + self.canvasOffsetTop;\n            if (self.htmlImageCache[v]) {\n                img = self.htmlImageCache[v];\n                if (img.height !== cell.height || img.width !== cell.width) {\n                    // height and width of the cell has changed, invalidate cache\n                    self.htmlImageCache[v] = undefined;\n                } else {\n                    if (!img.complete) {\n                        return;\n                    }\n                    return self.ctx.drawImage(img, x, y);\n                }\n            }\n            img = new Image(cell.width, cell.height);\n            self.htmlImageCache[v] = img;\n            img.onload = function () {\n                self.ctx.drawImage(img, x, y);\n                drawOnAllImagesLoaded();\n            };\n            img.src = 'data:image/svg+xml;base64,' + btoa(\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + cell.width + '\" height=\"' + cell.height + '\">\\n' +\n                    '<foreignObject class=\"node\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\\n' +\n                    '<body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;padding:0;\">\\n' +\n                    v + '\\n' +\n                    '</body>' +\n                    '</foreignObject>\\n' +\n                    '</svg>\\n'\n            );\n        }\n        function drawOrderByArrow(x, y) {\n            var mt = self.style.columnHeaderOrderByArrowMarginTop * self.scale,\n                ml = self.style.columnHeaderOrderByArrowMarginLeft * self.scale,\n                mr = self.style.columnHeaderOrderByArrowMarginRight * self.scale,\n                aw = self.style.columnHeaderOrderByArrowWidth * self.scale,\n                ah = self.style.columnHeaderOrderByArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.columnHeaderOrderByArrowColor;\n            self.ctx.strokeStyle = self.style.columnHeaderOrderByArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.orderDirection === 'asc') {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y + ah);\n                self.ctx.lineTo(x + aw, y + ah);\n                self.ctx.lineTo(x + (aw * 0.5), y);\n                self.ctx.lineTo(x, y + ah);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function drawTreeArrow(cell, x, y) {\n            var mt = self.style.treeArrowMarginTop * self.scale,\n                mr = self.style.treeArrowMarginRight * self.scale,\n                ml = self.style.treeArrowMarginLeft * self.scale,\n                aw = self.style.treeArrowWidth * self.scale,\n                ah = self.style.treeArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.treeArrowColor;\n            self.ctx.strokeStyle = self.style.treeArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.openChildren[cell.data[self.uniqueId]]) {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y);\n                self.ctx.lineTo(x + ah, y + (aw * 0.5));\n                self.ctx.lineTo(x, y + aw);\n                self.ctx.lineTo(x, y);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function radiusRect(x, y, w, h, radius) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            var r = x + w, b = y + h;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x + radius, y);\n            self.ctx.lineTo(r - radius, y);\n            self.ctx.quadraticCurveTo(r, y, r, y + radius);\n            self.ctx.lineTo(r, y + h - radius);\n            self.ctx.quadraticCurveTo(r, b, r - radius, b);\n            self.ctx.lineTo(x + radius, b);\n            self.ctx.quadraticCurveTo(x, b, x, b - radius);\n            self.ctx.lineTo(x, y + radius);\n            self.ctx.quadraticCurveTo(x, y, x + radius, y);\n        }\n        function fillRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillRect(x, y, w, h);\n        }\n        function strokeRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.strokeRect(x, y, w, h);\n        }\n        function fillText(text, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillText(text, x, y);\n        }\n        function fillCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.fill();\n        }\n        function strokeCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.stroke();\n        }\n        function clipFrozenArea(mode) {\n            // 0 both, 1 rows, 2 cols\n            // self.lastFrozenColumnPixel;\n            // self.lastFrozenRowPixel;\n            self.ctx.beginPath();\n            if (mode === 0) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, self.lastFrozenRowPixel);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 1) {\n                self.ctx.moveTo(0, self.lastFrozenRowPixel);\n                self.ctx.lineTo(0, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 2) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, 0);\n                self.ctx.lineTo(self.width, 0);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n            }\n            self.ctx.clip();\n        }\n        function fillHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return fillCircle(x, y, r * 0.5);\n            }\n            fillRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function strokeHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return strokeCircle(x, y, r * 0.5);\n            }\n            strokeRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function addselectionHandle(c, pos) {\n            var hw = self.style.selectionHandleSize,\n                p = {\n                    tr: function () {\n                        fillHandle(c.x + c.width, c.y, hw);\n                        strokeHandle(c.x + c.width, c.y, hw);\n                    },\n                    br: function () {\n                        fillHandle(c.x + c.width, c.y + c.height, hw);\n                        strokeHandle(c.x + c.width, c.y + c.height, hw);\n                    },\n                    tl: function () {\n                        fillHandle(c.x, c.y, hw);\n                        strokeHandle(c.x, c.y, hw);\n                    },\n                    bl: function () {\n                        fillHandle(c.x, c.y + c.height, hw);\n                        strokeHandle(c.x, c.y + c.height, hw);\n                    }\n                };\n            p[pos]();\n        }\n        function addBorderLine(c, pos) {\n            self.ctx.beginPath();\n            var p = {\n                t: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                },\n                r: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                b: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                l: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                }\n            };\n            p[pos]();\n            self.ctx.stroke();\n        }\n        function addEllipsis(text, width) {\n            var c, w = 0;\n            if (self.ellipsisCache[text] && self.ellipsisCache[text][width]) {\n                return self.ellipsisCache[text][width];\n            }\n            //TODO Add ellipsis back when there is a fast way to do it\n            w = self.ctx.measureText(text).width;\n            self.ellipsisCache[text] = self.ellipsisCache[text] || {};\n            c = {value: text, width: w};\n            self.ellipsisCache[text][width] = c;\n            return c;\n        }\n        function drawText(cell) {\n            var paddingLeft = self.style[cell.style + 'PaddingLeft'] * self.scale,\n                paddingTop = self.style[cell.style + 'PaddingTop'] * self.scale,\n                paddingRight = self.style[cell.style + 'PaddingRight'] * self.scale,\n                paddingBottom = self.style[cell.style + 'PaddingBottom'] * self.scale,\n                vPos = paddingTop + cell.height - (cell.height * 0.5),\n                hPos = paddingLeft + cell.treeArrowWidth + cell.orderByArrowWidth;\n            cell.text = addEllipsis(cell.formattedValue, cell.width - paddingRight - paddingLeft);\n            cell.text.height = cell.fontHeight;\n            if (cell.horizontalAlignment === 'right') {\n                hPos = cell.width - cell.text.width - paddingRight;\n            } else if (cell.horizontalAlignment === 'center') {\n                hPos = (cell.width / 2) - (cell.text.width / 2);\n            }\n            if (cell.verticalAlignment === 'top') {\n                vPos = paddingTop + cell.text.height;\n            } else if (cell.verticalAlignment === 'bottom') {\n                vPos = cell.height - paddingBottom - cell.text.height;\n            }\n            cell.text.x = cell.x + hPos;\n            cell.text.y = cell.y + vPos;\n            fillText(cell.text.value, cell.text.x, cell.text.y);\n        }\n        function getFrozenColumnsWidth() {\n            var w = 0,\n                s = self.getVisibleSchema(),\n                x = 0,\n                n = Math.min(self.frozenColumn, s.length),\n                column;\n            while (x < n) {\n                column = s[self.orders.columns[x]];\n                w += ((self.sizes.columns[column[self.uniqueId]] || column.width || self.style.cellWidth) * self.scale);\n                x += 1;\n            }\n            return w;\n        }\n        /**\n         * Redraws the grid. No matter what the change, this is the only method required to refresh everything.\n         * @memberof canvasDatagrid\n         * @name draw\n         * @method\n         */\n         // r = literal row index\n         // rd = row data array\n         // i = user order index\n         // o = literal data index\n         // y = y drawing cursor\n         // x = x drawing cursor\n         // s = visible schema array\n         // cx = current x drawing cursor sub calculation var\n         // cy = current y drawing cursor sub calculation var\n         // a = static cell (like corner cell)\n         // p = perf counter\n         // l = data length\n         // u = current cell\n         // h = current height\n         // w = current width\n        self.draw = function (internal) {\n            if (self.dispatchEvent('beforedraw', {})) { return; }\n            if (!self.isChildGrid && (!self.height || !self.width)) {\n                return;\n            }\n            if (self.isChildGrid && internal) {\n                requestAnimationFrame(self.parentGrid.draw);\n                return;\n            }\n            if (self.intf.visible === false) {\n                return;\n            }\n            // initial values\n            var checkScrollHeight, rowHeaderCell, p, cx, cy, treeGrid, rowOpen,\n                rowHeight, cornerCell, y, x, c, h, w, s, r, rd, aCell,\n                bc = self.style.gridBorderCollapse === 'collapse',\n                selectionBorders = [],\n                moveBorders = [],\n                selectionHandles = [],\n                rowHeaders = [],\n                frozenColumnWidths = getFrozenColumnsWidth(),\n                l = self.data.length,\n                u = self.currentCell || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                cellHeight = self.style.cellHeight;\n            drawCount += 1;\n            p = performance.now();\n            self.visibleRowHeights = [];\n            // if data length has changed, there is no way to know\n            if (self.data.length > self.orders.rows.length) {\n                self.createRowOrders();\n            }\n            function drawScrollBars() {\n                var v = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-bar'\n                    },\n                    n = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-bar'\n                    },\n                    vb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-box'\n                    },\n                    nb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-box'\n                    },\n                    co = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        isCorner: true,\n                        isScrollBoxCorner: true,\n                        style: 'scroll-box-corner'\n                    },\n                    m = (self.style.scrollBarBoxMargin * 2),\n                    d = self.style.scrollBarBoxMargin * 0.5;\n                self.ctx.strokeStyle = self.style.scrollBarBorderColor;\n                self.ctx.lineWidth = self.style.scrollBarBorderWidth;\n                // vertical\n                v.x += w - self.style.scrollBarWidth - self.style.scrollBarBorderWidth - d;\n                v.y += columnHeaderCellHeight;\n                v.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                v.height = h - columnHeaderCellHeight - self.style.scrollBarWidth - d - m;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(v.x, v.y, v.width, v.height + m);\n                strokeRect(v.x, v.y, v.width, v.height + m);\n                // vertical box\n                vb.x = v.x + self.style.scrollBarBoxMargin;\n                vb.y = columnHeaderCellHeight + self.style.scrollBarBoxMargin\n                    + ((v.height - self.scrollBox.scrollBoxHeight)\n                        * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight));\n                vb.width = self.style.scrollBarBoxWidth;\n                vb.height = self.scrollBox.scrollBoxHeight;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/vertical/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (vb.height < v.height) {\n                    radiusRect(vb.x, vb.y, vb.width, vb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                // horizontal\n                n.x += rowHeaderCellWidth;\n                n.y += h - self.style.scrollBarWidth - d;\n                n.width = w - self.style.scrollBarWidth - rowHeaderCellWidth - d - m;\n                n.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(n.x, n.y, n.width + m, n.height);\n                strokeRect(n.x, n.y, n.width + m, n.height);\n                // horizontal box\n                nb.y = n.y + self.style.scrollBarBoxMargin;\n                nb.x = rowHeaderCellWidth + self.style.scrollBarBoxMargin\n                    + ((n.width - self.scrollBox.scrollBoxWidth)\n                        * (self.scrollBox.scrollLeft / self.scrollBox.scrollWidth));\n                nb.width = self.scrollBox.scrollBoxWidth;\n                nb.height = self.style.scrollBarBoxWidth;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/horizontal/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (nb.width < n.width) {\n                    radiusRect(nb.x, nb.y, nb.width, nb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                //corner\n                self.ctx.strokeStyle = self.style.scrollBarCornerBorderColor;\n                self.ctx.fillStyle = self.style.scrollBarCornerBackgroundColor;\n                co.x = n.x + n.width + m;\n                co.y = v.y + v.height + m;\n                co.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                co.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                radiusRect(co.x, co.y, co.width, co.height, 0);\n                self.ctx.stroke();\n                self.ctx.fill();\n                self.visibleCells.unshift(v);\n                self.visibleCells.unshift(vb);\n                self.visibleCells.unshift(n);\n                self.visibleCells.unshift(nb);\n                self.visibleCells.unshift(co);\n                self.scrollBox.bar = {\n                    v: v,\n                    h: n\n                };\n                self.scrollBox.box = {\n                    v: vb,\n                    h: nb\n                };\n            }\n            function createHandlesOverlayArray(cell) {\n                if (self.attributes.allowMovingSelection || self.mobile) {\n                    if (cell.selectionBorderTop && cell.selectionBorderRight && self.mobile) {\n                        selectionHandles.push([cell, 'tr']);\n                        cell.selectionHandle = 'tr';\n                    }\n                    if (cell.selectionBorderTop && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'tl']);\n                        cell.selectionHandle = 'tl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'bl']);\n                        cell.selectionHandle = 'bl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderRight\n                            && (self.attributes.selectionHandleBehavior !== 'none' || self.mobile)) {\n                        selectionHandles.push([cell, 'br']);\n                        cell.selectionHandle = 'br';\n                    }\n                }\n            }\n            function createBorderOverlayArray(cell, drawArray, propPrefix, offsetPoint) {\n                offsetPoint = offsetPoint || {x: 0, y: 0};\n                cell.selectionBorder = '';\n                if (!cell.isRowHeader\n                        && self.selections[cell.rowIndex + -offsetPoint.y]\n                        && self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) !== -1) {\n                    if ((!self.selections[cell.rowIndex - 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex - 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1\n                            || cell.rowIndex === 0)\n                            && !cell.isHeader) {\n                        drawArray.push([cell, 't']);\n                        cell[propPrefix + 'BorderTop'] = true;\n                        cell[propPrefix + 'Border'] += 't';\n                    }\n                    if (!self.selections[cell.rowIndex + 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex + 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'b']);\n                        cell[propPrefix + 'BorderBottom'] = true;\n                        cell[propPrefix + 'Border'] += 'b';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === 0\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex - 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'l']);\n                        cell[propPrefix + 'BorderLeft'] = true;\n                        cell[propPrefix + 'Border'] += 'l';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === s.length\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'r']);\n                        cell[propPrefix + 'BorderRight'] = true;\n                        cell[propPrefix + 'Border'] += 'r';\n                    }\n                }\n            }\n            function drawCell(d, rowOrderIndex, rowIndex) {\n                return function drawEach(header, headerIndex, columnOrderIndex) {\n                    var cellStyle = header.style || 'cell',\n                        cellGridAttributes,\n                        cell,\n                        isHeader = /HeaderCell/.test(cellStyle),\n                        isCorner = /cornerCell/.test(cellStyle),\n                        isRowHeader = 'rowHeaderCell' === cellStyle,\n                        isColumnHeader = 'columnHeaderCell' === cellStyle,\n                        selected = self.selections[rowOrderIndex] && self.selections[rowOrderIndex].indexOf(columnOrderIndex) !== -1,\n                        hovered = self.hovers[d[self.uniqueId]] && self.hovers[d[self.uniqueId]].indexOf(columnOrderIndex) !== -1,\n                        active = self.activeCell.rowIndex === rowOrderIndex && self.activeCell.columnIndex === columnOrderIndex,\n                        isGrid = typeof d[header.name] === 'object' && d[header.name] !== null && d[header.name] !== undefined,\n                        activeHeader = (self.orders.rows[self.activeCell.rowIndex] === rowOrderIndex\n                                || self.orders.columns[self.activeCell.columnIndex] === columnOrderIndex)\n                            && (columnOrderIndex === -1 || rowOrderIndex === -1)\n                            ? (isRowHeader ? 'activeRowHeaderCell' : 'activeColumnHeaderCell') : false,\n                        val,\n                        f = self.formatters[header.type || 'string'],\n                        orderByArrowSize = 0,\n                        treeArrowSize = 0,\n                        cellWidth = self.sizes.columns[isRowHeader ? 'cornerCell' : header[self.uniqueId]] || header.width,\n                        ev = {\n                            value: d[header.name],\n                            row: d,\n                            header: header\n                        };\n                    if (cellStyle === 'headerCellCap') {\n                        cellWidth = w - x;\n                    }\n                    // if no data or schema are defined, a width is provided to the stub column\n                    if (cellWidth === undefined) {\n                        cellWidth = self.style.cellWidth;\n                    }\n                    cellWidth = cellWidth * self.scale;\n                    if (x + cellWidth + self.style.cellBorderWidth < 0) {\n                        x += cellWidth + self.style.cellBorderWidth;\n                    }\n                    if (active) {\n                        cellStyle = 'activeCell';\n                    }\n                    if (self.visibleRows.indexOf(rowIndex) === -1 && !isHeader) {\n                        self.visibleRows.push(rowIndex);\n                    }\n                    val = self.dispatchEvent('formatcellvalue', ev);\n                    cx = x;\n                    cy = y;\n                    if (cellStyle === 'cornerCell') {\n                        cx = 0;\n                        cy = 0;\n                    } else if (isRowHeader) {\n                        cx = 0;\n                    } else if (isHeader) {\n                        cy = 0;\n                    }\n                    cell = {\n                        type: isGrid ? 'canvas-datagrid-cell' : header.type,\n                        style: cellStyle,\n                        nodeType: 'canvas-datagrid-cell',\n                        x: cx,\n                        y: cy,\n                        horizontalAlignment: self.style[cellStyle + 'HorizontalAlignment'],\n                        verticalAlignment: self.style[cellStyle + 'VerticalAlignment'],\n                        offsetTop: self.canvasOffsetTop + cy,\n                        offsetLeft: self.canvasOffsetLeft + cx,\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        active: active || activeHeader,\n                        hovered: hovered,\n                        selected: selected,\n                        width: cellWidth,\n                        height: cellHeight,\n                        offsetWidth: cellWidth,\n                        offsetHeight: cellHeight,\n                        parentNode: self.intf.parentNode,\n                        offsetParent: self.intf.parentNode,\n                        data: d,\n                        isCorner: isCorner,\n                        isHeader: isHeader,\n                        isColumnHeader: isColumnHeader,\n                        isHeaderCellCap: !!header.isHeaderCellCap,\n                        isRowHeader: isRowHeader,\n                        rowOpen: rowOpen,\n                        header: header,\n                        columnIndex: columnOrderIndex,\n                        rowIndex: rowOrderIndex,\n                        sortColumnIndex: headerIndex,\n                        sortRowIndex: rowIndex,\n                        isGrid: isGrid,\n                        isNormal: !isGrid && !isCorner && !isHeader,\n                        gridId: (self.attributes.name || '') + d[self.uniqueId] + ':' + header[self.uniqueId],\n                        parentGrid: self.intf,\n                        innerHTML: '',\n                        activeHeader: activeHeader,\n                        value: isHeader && !isRowHeader ? (header.title || header.name) : d[header.name]\n                    };\n                    ev.cell = cell;\n                    cell.userHeight = cell.isHeader ? self.sizes.rows[-1] : rowHeight;\n                    cell.userWidth = cell.isHeader ? self.sizes.columns.cornerCell : self.sizes.columns[header[self.uniqueId]];\n                    cell[self.uniqueId] = d[self.uniqueId];\n                    self.visibleCells.unshift(cell);\n                    if (self.dispatchEvent('beforerendercell', ev)) { return; }\n                    self.ctx.fillStyle = self.style[cellStyle + 'BackgroundColor'];\n                    self.ctx.strokeStyle = self.style[cellStyle + 'BorderColor'];\n                    self.ctx.lineWidth = self.style[cellStyle + 'BorderWidth'];\n                    if (hovered) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'HoverBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'HoverBorderColor'];\n                    }\n                    if (selected) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'SelectedBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'SelectedBorderColor'];\n                    }\n                    if (activeHeader) {\n                        self.ctx.fillStyle = self.style[activeHeader + 'BackgroundColor'];\n                    }\n                    self.dispatchEvent('rendercell', ev);\n                    if (cell.isGrid) {\n                        if (cell.height !== rowHeight) {\n                            cell.height = rowHeight || self.style.cellHeightWithChildGrid;\n                            checkScrollHeight = true;\n                        }\n                        cell.width = self.sizes.columns[header[self.uniqueId]] || self.style.cellWidthWithChildGrid;\n                    }\n                    if (rowOpen && !cell.isRowHeader) {\n                        cell.height = self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight;\n                    }\n                    if (!cell.isGrid) {\n                        fillRect(cx, cy, cell.width, cell.height);\n                        strokeRect(cx, cy, cell.width, cell.height);\n                    }\n                    self.ctx.save();\n                    radiusRect(cell.x, cell.y, cell.width, cell.height, 0);\n                    self.ctx.clip();\n                    self.dispatchEvent('afterrendercell', ev);\n                    if (cell.height !== cellHeight && !(rowOpen && !cell.isRowHeader)) {\n                        self.sizes.rows[isHeader ? -1 : d[self.uniqueId]] = cell.height;\n                        checkScrollHeight = true;\n                    }\n                    if (cell.width !== cellWidth) {\n                        self.sizes.columns[header[self.uniqueId]] = cell.width;\n                        checkScrollHeight = true;\n                    }\n                    if (isRowHeader && self.attributes.tree) {\n                        if (!self.dispatchEvent('rendertreearrow', ev)) {\n                            treeArrowSize = drawTreeArrow(cell, self.style[cellStyle + 'PaddingLeft'], cy, 0);\n                        }\n                    }\n                    if ((self.attributes.showRowNumbers && isRowHeader)\n                            || !isRowHeader) {\n                        if (cell.isGrid && !self.dispatchEvent('beforerendercellgrid', ev)) {\n                            if (!self.childGrids[cell.gridId]) {\n                                cellGridAttributes = self.args.cellGridAttributes || self.args;\n                                cellGridAttributes.name = self.attributes.saveAppearance ? cell.gridId : undefined;\n                                cellGridAttributes.parentNode = cell;\n                                cellGridAttributes.data = d[header.name];\n                                cellGridAttributes.style = cellGridAttributes.style || self.style;\n                                ev.cellGridAttributes = cellGridAttributes;\n                                if (self.dispatchEvent('beforecreatecellgrid', ev)) { return; }\n                                self.childGrids[cell.gridId] = self.createGrid(cellGridAttributes);\n                                self.sizes.rows[rd[self.uniqueId]]\n                                    = self.sizes.rows[rd[self.uniqueId]] || self.style.cellGridHeight;\n                                checkScrollHeight = true;\n                            }\n                            cell.grid = self.childGrids[cell.gridId];\n                            cell.grid.parentNode = cell;\n                            cell.grid.visible = true;\n                            cell.grid.draw();\n                            self.dispatchEvent('rendercellgrid', ev);\n                        } else if (!cell.isGrid) {\n                            if (self.childGrids[cell.gridId]) {\n                                self.childGrids[cell.gridId].parentNode.offsetHeight = 0;\n                            }\n                            if (isHeader && self.orderBy === header.name) {\n                                if (!self.dispatchEvent('renderorderbyarrow', ev)) {\n                                    orderByArrowSize = drawOrderByArrow(cx + self.style[cellStyle + 'PaddingLeft'], 0);\n                                }\n                            }\n                            self.ctx.fillStyle = self.style[cellStyle + 'Color'];\n                            if (hovered) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'HoverColor'];\n                            }\n                            if (selected) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'SelectedColor'];\n                            }\n                            if (activeHeader) {\n                                self.ctx.fillStyle = self.style[activeHeader + 'Color'];\n                            }\n                            self.ctx.font = (self.style[cellStyle + 'FontHeight'] * self.scale) + 'px ' + self.style[cellStyle + 'FontName'];\n                            cell.fontHeight = (self.style[cellStyle + 'FontHeight'] * self.scale);\n                            cell.treeArrowWidth = treeArrowSize;\n                            cell.orderByArrowWidth = orderByArrowSize;\n                            val = val !== undefined ? val : f\n                                ? f(ev) : '';\n                            if (val === undefined && !f) {\n                                val = '';\n                                console.warn('canvas-datagrid: Unknown format '\n                                    + header.type + ' add a cellFormater');\n                            }\n                            cell.formattedValue = ((val !== undefined && val !== null) ? val : '').toString();\n                            if (self.columnFilters && self.columnFilters[val] !== undefined && isHeader) {\n                                cell.formattedValue = self.attributes.filterTextPrefix + val;\n                            }\n                            if (!self.dispatchEvent('rendertext', ev)) {\n                                if (cell.innerHTML || header.type === 'html') {\n                                    drawHtml(cell);\n                                } else {\n                                    drawText(cell);\n                                }\n                            }\n                        }\n                    }\n                    if (active) {\n                        aCell = cell;\n                    }\n                    createBorderOverlayArray(cell, selectionBorders, 'selection');\n                    // createBorderOverlayArray calculates data for createHandlesOverlayArray so it must go 2nd\n                    createHandlesOverlayArray(cell);\n                    if (self.movingSelection) {\n                        createBorderOverlayArray(cell, moveBorders, 'move', self.moveOffset);\n                    }\n                    self.ctx.restore();\n                    x += cell.width + (bc ? 0 : self.style.cellBorderWidth);\n                    return cell.width;\n                };\n            }\n            function drawRowHeader(rowData, index, rowOrderIndex) {\n                var a;\n                if (self.attributes.showRowHeaders) {\n                    x = 0;\n                    rowHeaderCell = {'rowHeaderCell': index + 1 };\n                    rowHeaderCell[self.uniqueId] = rowData[self.uniqueId];\n                    a = {\n                        name: 'rowHeaderCell',\n                        width: self.style.rowHeaderCellWidth,\n                        style: 'rowHeaderCell',\n                        type: 'string',\n                        data: rowData[self.uniqueId],\n                        index: -1\n                    };\n                    a[self.uniqueId] = rowData[self.uniqueId];\n                    rowOpen = self.openChildren[rowData[self.uniqueId]];\n                    drawCell(rowHeaderCell, index, rowOrderIndex)(a, -1, -1);\n                }\n            }\n            function drawHeaders() {\n                var d, g = s.length, i, o, columnHeaderCell, header, nonFrozenHeaderWidth;\n                function drawHeaderColumnRange(start, end) {\n                    end = Math.min(end, g);\n                    for (o = start; o < end; o += 1) {\n                        i = self.orders.columns[o];\n                        header = s[i];\n                        d = {\n                            title: header.title,\n                            name: header.name,\n                            width: header.width || self.style.cellWidth,\n                            style: 'columnHeaderCell',\n                            type: 'string',\n                            index: o,\n                            order: i\n                        };\n                        columnHeaderCell = {'columnHeaderCell': header.title || header.name};\n                        columnHeaderCell[self.uniqueId] = 'h' + header[self.uniqueId];\n                        d[self.uniqueId] = header[self.uniqueId];\n                        x += drawCell(columnHeaderCell, -1, -1)(d, o, i);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                }\n                rowHeaders.forEach(function (rArgs, rhIndex) {\n                    y = rArgs[3];\n                    cellHeight = rArgs[4];\n                    if (rhIndex === self.frozenRow) {\n                        self.ctx.save();\n                        radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                        self.ctx.clip();\n                    }\n                    drawRowHeader(rArgs[0], rArgs[1], rArgs[2]);\n                });\n                self.ctx.restore();\n                if (self.attributes.showColumnHeaders) {\n                    x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    x += frozenColumnWidths;\n                    y = 0;\n                    // cell height might have changed during drawing\n                    cellHeight = self.getColumnHeaderCellHeight();\n                    drawHeaderColumnRange(self.scrollIndexLeft + self.frozenColumn, g);\n                    nonFrozenHeaderWidth = x;\n                    x = self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    drawHeaderColumnRange(0, self.frozenColumn);\n                    // fill in the space right of the headers\n                    x = nonFrozenHeaderWidth;\n                    if (x < w) {\n                        c = {\n                            name: '',\n                            width: self.style.scrollBarWidth,\n                            style: 'headerCellCap',\n                            isHeaderCell: true,\n                            isHeaderCellCap: true,\n                            type: 'string',\n                            index: s.length\n                        };\n                        c[self.uniqueId] = 'columnHeaderCell';\n                        drawCell({endCap: ''}, -1, -1)(c, -1, -1);\n                    }\n                    // fill in the space right of the headers\n                    if (self.attributes.showRowHeaders) {\n                        cornerCell = {'cornerCell': '' };\n                        cornerCell[self.uniqueId] = 'cornerCell';\n                        x = 0;\n                        c = {\n                            name: 'cornerCell',\n                            width: self.style.rowHeaderCellWidth,\n                            style: 'cornerCell',\n                            type: 'string',\n                            index: -1\n                        };\n                        c[self.uniqueId] = 'cornerCell';\n                        drawCell(cornerCell, -1, -1)(c, -1, -1);\n                    }\n                }\n            }\n            function drawRow(r, d) {\n                var i, treeHeight, rowSansTreeHeight, o, g = s.length;\n                if (y - (cellHeight * 2) > h) {\n                    return false;\n                }\n                rd = self.data[r];\n                rowOpen = self.openChildren[rd[self.uniqueId]];\n                rowSansTreeHeight = (self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight) * self.scale;\n                treeHeight = (rowOpen ? self.sizes.trees[rd[self.uniqueId]] : 0) * self.scale;\n                rowHeight = (rowSansTreeHeight + treeHeight);\n                if (y < -rowHeight) {\n                    return false;\n                }\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                cellHeight = rowHeight;\n                if (self.attributes.allowFreezingColumns) {\n                    x += frozenColumnWidths;\n                }\n                //draw normal columns\n                for (o = (self.scrollIndexLeft + self.frozenColumn); o < g; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        self.scrollIndexRight = o;\n                        self.scrollPixelRight = x;\n                        break;\n                    }\n                }\n                //draw frozen columns\n                x = 0;\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                for (o = 0; o < self.frozenColumn; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        break;\n                    }\n                }\n                self.lastFrozenColumnPixel = x;\n                // cell height might have changed during drawing\n                cellHeight = rowHeight;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                // don't draw a tree for the new row\n                treeGrid = self.childGrids[rd[self.uniqueId]];\n                if (r !== self.data.length && rowOpen) {\n                    treeGrid.visible = true;\n                    treeGrid.parentNode = {\n                        offsetTop: y + rowSansTreeHeight + self.canvasOffsetTop,\n                        offsetLeft: rowHeaderCellWidth - 1 + self.canvasOffsetLeft,\n                        offsetHeight: treeHeight,\n                        offsetWidth: self.width - rowHeaderCellWidth - self.style.scrollBarWidth - 1,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: self.style,\n                        nodeType: 'canvas-datagrid-tree',\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        rowIndex: r\n                    };\n                    self.visibleCells.unshift({\n                        rowIndex: r,\n                        columnIndex: 0,\n                        y: treeGrid.parentNode.offsetTop,\n                        x: treeGrid.parentNode.offsetLeft,\n                        height: treeGrid.height,\n                        width: treeGrid.width,\n                        style: 'tree-grid',\n                        type: treeGrid.parentNode.nodeType\n                    });\n                    treeGrid.draw();\n                } else if (treeGrid) {\n                    treeGrid.parentNode.offsetHeight = 0;\n                    delete self.sizes.trees[rd[self.uniqueId]];\n                }\n                rowHeaders.push([rd, r, d, y, rowHeight]);\n                self.visibleRowHeights[r] = rowHeight;\n                y += cellHeight + (bc ? 0 : self.style.cellBorderWidth);\n                return true;\n            }\n            function initDraw() {\n                self.visibleRows = [];\n                s = self.getVisibleSchema();\n                self.visibleCells = [];\n                self.canvasOffsetTop = self.isChildGrid ? self.parentNode.offsetTop : 0;\n                self.canvasOffsetLeft = self.isChildGrid ? self.parentNode.offsetLeft : 0;\n                h = self.height;\n                w = self.width;\n                if (!self.isChildGrid) {\n                    self.ctx.scale(window.devicePixelRatio, window.devicePixelRatio);\n                }\n            }\n            function drawBackground() {\n                radiusRect(0, 0, w, h, 0);\n                self.ctx.clip();\n                self.ctx.fillStyle = self.style.gridBackgroundColor;\n                fillRect(0, 0, w, h);\n            }\n            function drawFrozenRows() {\n                var n, ln = Math.min(self.data.length, self.frozenRow);\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                y = columnHeaderCellHeight;\n                for (r = 0; r < ln; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.allowFreezingRows) {\n                    // HACK great, another stupid magic number.\n                    // Background will appear as a 0.5px artifact behind the row freeze bar without this hack\n                    y += self.style.frozenMarkerBorderWidth + self.style.frozenMarkerWidth - 0.4999999999;\n                }\n                self.lastFrozenRowPixel = y;\n            }\n            function drawRows() {\n                self.ctx.save();\n                if (self.frozenRow > 0) {\n                    radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                    self.ctx.clip();\n                }\n                var o, n, i, g = s.length;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                if (!self.attributes.snapToRow) {\n                    y += -self.scrollBox.scrollTop + self.scrollPixelTop;\n                }\n                for (r = self.frozenRow + self.scrollIndexTop; r < l; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        self.scrollIndexBottom = r;\n                        self.scrollPixelBottom = y;\n                        break;\n                    }\n                }\n                if (self.attributes.showNewRow) {\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    rowHeight = cellHeight = self.style.cellHeight;\n                    rowOpen = false;\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        x += drawCell(self.newRow, self.data.length, self.data.length)(s[i], i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    rowHeaders.push([self.newRow, self.data.length, self.data.length, y, rowHeight]);\n                }\n                self.ctx.restore();\n            }\n            function drawMoveMarkers() {\n                if (!self.movingSelection) { return; }\n                self.ctx.lineWidth = self.style.moveOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.moveOverlayBorderColor;\n                self.ctx.setLineDash(self.style.moveOverlayBorderSegments);\n                moveBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n                self.ctx.setLineDash([]);\n            }\n            function drawReorderMarkers() {\n                if (!self.reorderObject) { return; }\n                var b = {\n                        height: self.reorderObject.height,\n                        width: self.reorderObject.width,\n                        x: self.reorderObject.x + self.reorderObject.dragOffset.x,\n                        y: self.reorderObject.y + self.reorderObject.dragOffset.y\n                    },\n                    m = {\n                        width: w,\n                        height: h,\n                        x: 0,\n                        y: 0\n                    };\n                self.ctx.fillStyle = self.style.reorderMarkerBackgroundColor;\n                self.ctx.lineWidth = self.style.reorderMarkerBorderWidth;\n                self.ctx.strokeStyle = self.style.reorderMarkerBorderColor;\n                if (self.dragMode === 'row-reorder') {\n                    b.width = w;\n                    b.x = 0;\n                    m.width = w;\n                    m.height = self.currentCell.height;\n                    m.y = self.currentCell.y;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.rowIndex !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex > -1\n                            && self.currentCell.rowIndex < l) {\n                        addBorderLine(m, self.reorderTarget.sortRowIndex > self.reorderObject.sortRowIndex ? 'b' : 't');\n                    }\n                } else if (self.dragMode === 'column-reorder' && self.reorderObject) {\n                    b.height = h;\n                    b.y = 0;\n                    m.height = h;\n                    m.width = self.currentCell.width;\n                    m.y = 0;\n                    m.x = self.currentCell.x;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.columnIndex !== self.reorderObject.columnIndex\n                            && self.currentCell.columnIndex > -1\n                            && self.currentCell.columnIndex < s.length) {\n                        addBorderLine(m, self.reorderTarget.sortColumnIndex > self.reorderObject.sortColumnIndex ? 'r' : 'l');\n                    }\n                }\n            }\n            function drawBorder() {\n                self.ctx.lineWidth = self.style.gridBorderWidth;\n                self.ctx.strokeStyle = self.style.gridBorderColor;\n                strokeRect(0, 0, self.width, self.height);\n            }\n            function drawSelectionBorders() {\n                self.ctx.lineWidth = self.style.selectionOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.selectionOverlayBorderColor;\n                function dsb(c) {\n                    addBorderLine(c[0], c[1]);\n                }\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.save();\n                clipFrozenArea(0);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(1);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(2);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n            }\n            function drawSelectionHandles() {\n                if (self.mobile || self.attributes.allowMovingSelection) {\n                    self.ctx.lineWidth = self.style.selectionHandleBorderWidth;\n                    self.ctx.strokeStyle = self.style.selectionHandleBorderColor;\n                    self.ctx.fillStyle = self.style.selectionHandleColor;\n                    selectionHandles.forEach(function (c) {\n                        addselectionHandle(c[0], c[1]);\n                        var az = self.attributes.touchSelectHandleZone / 2,\n                            ax = c[0].x + (c[1] === 'tl' || c[1] === 'bl' ? 0 : c[0].width) - az,\n                            ay = c[0].y + (c[1] === 'bl' || c[1] === 'br' ? c[0].height : 0) - az;\n                        self.visibleCells.unshift({\n                            x: ax,\n                            y: ay,\n                            height: self.style.selectionHandleSize + az,\n                            width: self.style.selectionHandleSize + az,\n                            style: 'selection-handle-' + c[1]\n                        });\n                    });\n                }\n            }\n            function drawActiveCell() {\n                if (!aCell) { return; }\n                self.ctx.save();\n                var cl = self.activeCell.columnIndex + 1 > self.frozenColumn || self.activeCell.rowIndex + 1 > self.frozenRow,\n                    acx = cl ? self.lastFrozenColumnPixel : 0,\n                    acy = cl ? self.lastFrozenRowPixel : 0,\n                    acw = cl ? self.width - self.lastFrozenColumnPixel : self.width,\n                    ach = cl ? self.height - self.lastFrozenRowPixel : self.height;\n                radiusRect(acx, acy, acw, ach, 0);\n                self.ctx.clip();\n                if (self.attributes.selectionMode === 'row') {\n                    if (self.activeCell && self.activeCell.rowIndex === aCell.rowIndex) {\n                        self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                        self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                        strokeRect(0, aCell.y, self.getHeaderWidth() + rowHeaderCellWidth, self.visibleRowHeights[aCell.rowIndex]);\n                    }\n                } else {\n                    self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                    self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                    strokeRect(aCell.x, aCell.y, aCell.width, aCell.height);\n                }\n                self.ctx.restore();\n            }\n            function drawFrozenMarkers() {\n                var my = self.lastFrozenRowPixel - self.style.frozenMarkerWidth,\n                    mx = self.lastFrozenColumnPixel - self.style.frozenMarkerBorderWidth,\n                    xHover = self.currentCell && self.currentCell.style === 'frozen-row-marker',\n                    yHover = self.currentCell && self.currentCell.style === 'frozen-column-marker';\n                self.ctx.lineWidth = self.style.frozenMarkerBorderWidth;\n                if (self.attributes.allowFreezingColumns) {\n                    self.ctx.fillStyle = yHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = yHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    strokeRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    self.visibleCells.unshift({\n                        x: mx,\n                        y: 0,\n                        height: self.height,\n                        width: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        style: 'frozen-column-marker'\n                    });\n                }\n                if (self.attributes.allowFreezingRows) {\n                    self.ctx.fillStyle = xHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = xHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    strokeRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    self.visibleCells.unshift({\n                        x: 0,\n                        y: my,\n                        height: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        width: self.width,\n                        style: 'frozen-row-marker'\n                    });\n                }\n                if (self.freezeMarkerPosition) {\n                    self.ctx.fillStyle = self.style.frozenMarkerActiveColor;\n                    self.ctx.strokeStyle = self.style.frozenMarkerActiveBorderColor;\n                    if (self.dragMode === 'frozen-column-marker') {\n                        fillRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                        strokeRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                    } else {\n                        fillRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                        strokeRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                    }\n                }\n            }\n            function drawPerfLines() {\n                if (!self.attributes.showPerformance) { return; }\n                var pw = 250,\n                    px = self.width - pw - self.style.scrollBarWidth - (self.style.scrollBarBorderWidth * 2),\n                    py = columnHeaderCellHeight,\n                    ph = 100;\n                if (scrollDebugCounters.length === 0) { scrollDebugCounters = self.fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (touchPPSCounters.length === 0) { touchPPSCounters = self.fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (entityCount.length === 0) { entityCount = self.fillArray(0, perfWindowSize, 1, 0); }\n                self.ctx.lineWidth = 0.5;\n                function dpl(name, perfArr, arrIndex, max, color, useAbs, rowIndex) {\n                    var v;\n                    drawPerfLine(pw, ph, px, py, perfArr, arrIndex, max, color, useAbs);\n                    self.ctx.fillStyle = color;\n                    fillRect(3 + px, py + 9 + (rowIndex * 11), 8, 8);\n                    self.ctx.fillStyle = '#999999';\n                    v = arrIndex !== undefined ? perfArr[0][arrIndex] : perfArr[0];\n                    fillText(name + ' ' + (isNaN(v) ? 0 : v).toFixed(3), 14 + px, py + 16 + (rowIndex * 11));\n                }\n                self.ctx.textAlign = 'left';\n                self.ctx.font = '8px sans-serif';\n                self.ctx.fillStyle = 'rgba(29, 25, 26, 1.00)';\n                fillRect(px, py, pw, ph);\n                [['Scroll Height', scrollDebugCounters, 0, self.scrollBox.scrollHeight, 'rgba(248, 33, 103, 1.00)', false],\n                    ['Scroll Width', scrollDebugCounters, 1, self.scrollBox.scrollWidth, 'rgba(66, 255, 27, 1.00)', false],\n                    ['Performance', perfCounters, undefined, 200, 'rgba(252, 255, 37, 1.00)', false],\n                    ['Entities', entityCount, undefined, 1500, 'rgba(76, 231, 239, 1.00)', false],\n                    ['TouchPPSX', touchPPSCounters, 0, 1000, 'rgba(246, 102, 24, 1.00)', true],\n                    ['TouchPPSY', touchPPSCounters, 1, 1000, 'purple', true]\n                    ].forEach(function (i, index) {\n                    i.push(index);\n                    dpl.apply(null, i);\n                });\n                self.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n                entityCount.pop();\n                entityCount.unshift(self.visibleCells.length);\n                scrollDebugCounters.pop();\n                scrollDebugCounters.unshift([self.scrollBox.scrollTop, self.scrollBox.scrollLeft]);\n                touchPPSCounters.pop();\n                touchPPSCounters.unshift([self.yPPS, self.xPPS]);\n            }\n            function drawDebug() {\n                self.ctx.save();\n                var d;\n                if (self.attributes.showPerformance || self.attributes.debug) {\n                    if (perfCounters.length === 0) { perfCounters = self.fillArray(0, perfWindowSize, 1, 0); }\n                    perfCounters.pop();\n                    perfCounters.unshift(performance.now() - p);\n                }\n                if (!self.attributes.debug) {\n                    self.ctx.restore();\n                    return;\n                }\n                self.ctx.font = '14px sans-serif';\n                d = {};\n                d.perf = (perfCounters.reduce(function (a, b) {\n                    return a + b;\n                }, 0) / Math.min(drawCount, perfCounters.length)).toFixed(1);\n                d.htmlImages = Object.keys(self.htmlImageCache).length;\n                d.reorderObject = 'x: ' + (self.reorderObject || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderObject || {rowIndex: 0}).rowIndex;\n                d.reorderTarget = 'x: ' + (self.reorderTarget || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderTarget || {rowIndex: 0}).rowIndex;\n                d.scale = self.scale;\n                d.startScale = self.startScale;\n                d.scaleDelta = self.scaleDelta;\n                d.zoomDeltaStart = self.zoomDeltaStart;\n                d.touchLength = self.touchLength;\n                d.touches = 'y0: ' + (self.touchPosition || {y: 0}).y + ' y1: ' + (self.touchPosition1 || {y: 0}).y;\n                d.scrollBox = self.scrollBox.toString();\n                d.scrollIndex = 'x: ' + self.scrollIndexLeft + ', y: ' + self.scrollIndexTop;\n                d.scrollPixel = 'x: ' + self.scrollPixelLeft + ', y: ' + self.scrollPixelTop;\n                d.canvasOffset = 'x: ' + self.canvasOffsetLeft + ', y: ' + self.canvasOffsetTop;\n                d.touchDelta = 'x: ' + self.touchDelta.x + ', y: ' + self.touchDelta.y;\n                d.touchAnimateTo = 'x: ' + self.touchAnimateTo.x + ', y: ' + self.touchAnimateTo.y;\n                d.scrollAnimation = 'x: ' + self.scrollAnimation.x + ', y: ' + self.scrollAnimation.y;\n                d.touchPPS = 'x: ' + self.xPPS + ', y: ' + self.yPPS;\n                d.touchPPST = 'x: ' + self.xPPST + ', y: ' + self.yPPST;\n                d.touchDuration = self.touchDuration;\n                d.pointerLockPosition =  self.pointerLockPosition ?\n                        self.pointerLockPosition.x + ', ' + self.pointerLockPosition.y : '';\n                d.size = 'w: ' + self.width + ', h: ' + self.height;\n                d.mouse = 'x: ' + self.mouse.x + ', y: ' + self.mouse.y;\n                d.touch = !self.touchStart\n                    ? '' : 'x: ' + self.touchStart.x + ', y: ' + self.touchStart.y;\n                d.entities = self.visibleCells.length;\n                d.hasFocus = self.hasFocus;\n                d.dragMode = self.dragMode;\n                if (self.currentCell) {\n                    d.columnIndex = self.currentCell.columnIndex;\n                    d.rowIndex = self.currentCell.rowIndex;\n                    d.sortColumnIndex = self.currentCell.sortColumnIndex;\n                    d.sortRowIndex = self.currentCell.sortRowIndex;\n                    d.context = self.currentCell.context;\n                    d.dragContext = self.currentCell.dragContext;\n                    d.style = self.currentCell.style;\n                    d.type = self.currentCell.type;\n                }\n                self.ctx.textAlign = 'right';\n                self.ctx.fillStyle = 'rgba(0, 0, 0, .60)';\n                fillRect(0, 0, self.width, self.height);\n                Object.keys(d).forEach(function (key, index) {\n                    var m = key + ': ' + d[key],\n                        lh = 14;\n                    self.ctx.fillStyle = 'rgba(37, 254, 21, 1)';\n                    fillText(m, w - 20, 140 + (index * lh));\n                });\n                self.ctx.restore();\n            }\n            self.ctx.save();\n            initDraw();\n            drawBackground();\n            drawFrozenRows();\n            drawRows();\n            drawActiveCell();\n            drawHeaders();\n            drawFrozenMarkers();\n            drawSelectionBorders();\n            drawSelectionHandles();\n            drawReorderMarkers();\n            drawMoveMarkers();\n            drawScrollBars();\n            if (checkScrollHeight) {\n                self.resize(true);\n            }\n            drawBorder();\n            drawDebug();\n            drawPerfLines();\n            if (self.dispatchEvent('afterdraw', {})) { return; }\n            self.ctx.restore();\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/draw.js\n// module id = 3\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var wheeling;\n        self.stopPropagation = function (e) { e.stopPropagation(); };\n        /**\n         * Adds an event listener to the given event.\n         * @memberof canvasDatagrid\n         * @name addEventListener\n         * @method\n         * @param {string} ev The name of the event to subscribe to.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.addEventListener = function (ev, fn) {\n            self.events[ev] = self.events[ev] || [];\n            self.events[ev].unshift(fn);\n        };\n        /**\n         * Removes the given listener function from the given event.  Must be an actual reference to the function that was bound.\n         * @memberof canvasDatagrid\n         * @name removeEventListener\n         * @method\n         * @param {string} ev The name of the event to unsubscribe from.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.removeEventListener = function (ev, fn) {\n            (self.events[ev] || []).forEach(function removeEachListener(sfn, idx) {\n                if (fn === sfn) {\n                    self.events[ev].splice(idx, 1);\n                }\n            });\n        };\n        /**\n         * Fires the given event, padding an event object to the event subscribers.\n         * @memberof canvasDatagrid\n         * @name dispatchEvent\n         * @method\n         * @param {number} ev The name of the event to dispatch.\n         * @param {number} e The event object.\n         */\n        self.dispatchEvent = function (ev, e) {\n            var defaultPrevented;\n            function preventDefault() {\n                defaultPrevented = true;\n            }\n            if (!self.events[ev]) { return; }\n            self.events[ev].forEach(function dispatchEachEvent(fn) {\n                e.ctx = self.ctx;\n                e.preventDefault = preventDefault;\n                fn.apply(self.intf, [e]);\n            });\n            return defaultPrevented;\n        };\n        self.resize = function (drawAfterResize) {\n            if (!self.canvas) { return; }\n            var bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                cellBorder = self.style.cellBorderWidth * bm,\n                columnHeaderCellBorder = self.style.columnHeaderCellBorderWidth * bm,\n                scrollHeight,\n                scrollWidth,\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                ch = self.style.cellHeight,\n                // TODO: What the hell are these numbers!?  They are probably some value in the style.\n                scrollDragPositionOffsetY = 30,\n                scrollDragPositionOffsetX = 15;\n            scrollHeight = self.data.reduce(function reduceData(accumulator, row, rowIndex) {\n                return accumulator\n                    + (((self.sizes.rows[row[self.uniqueId]] || ch) + (self.sizes.trees[row[self.uniqueId]] || 0)) * self.scale)\n                    + cellBorder\n                    // HACK? if an expanded tree row is frozen it is necessary to add the tree row's height a second time.\n                    + (self.frozenRow > rowIndex ? (self.sizes.trees[row[self.uniqueId]] || 0) : 0);\n            }, 0) || 0;\n            scrollWidth = self.getVisibleSchema().reduce(function reduceSchema(accumulator, column) {\n                if (column.hidden) { return accumulator; }\n                return accumulator + ((self.sizes.columns[column[self.uniqueId]] || column.width || self.style.cellWidth) * self.scale) + cellBorder;\n            }, 0) || 0;\n            if (self.isChildGrid) {\n                self.width = self.parentNode.offsetWidth;\n                self.height = self.parentNode.offsetHeight;\n            } else {\n                self.height = self.canvas.offsetHeight;\n                self.width = self.canvas.offsetWidth;\n                self.canvas.width = self.width * window.devicePixelRatio;\n                self.canvas.height = self.height * window.devicePixelRatio;\n                self.canvasOffsetLeft = self.args.canvasOffsetLeft || 0;\n                self.canvasOffsetTop = self.args.canvasOffsetTop || 0;\n            }\n            if (self.attributes.showNewRow) {\n                scrollHeight += ch + cellBorder;\n            }\n            self.scrollBox.width = self.width - rowHeaderCellWidth;\n            self.scrollBox.height = self.height - columnHeaderCellHeight - columnHeaderCellBorder;\n            self.scrollBox.top = columnHeaderCellHeight + columnHeaderCellBorder;\n            self.scrollBox.left = rowHeaderCellWidth;\n            self.scrollBox.scrollHeight = scrollHeight + self.style.scrollBarWidth - self.scrollBox.height;\n            self.scrollBox.scrollWidth = scrollWidth + self.style.scrollBarWidth - self.scrollBox.width;\n            self.scrollBox.widthBoxRatio = ((self.scrollBox.width - scrollDragPositionOffsetX)\n                / (self.scrollBox.scrollWidth + self.scrollBox.width - scrollDragPositionOffsetX));\n            self.scrollBox.scrollBoxWidth = self.scrollBox.width\n                * self.scrollBox.widthBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.heightBoxRatio = ((self.scrollBox.height - scrollDragPositionOffsetY)\n                / (self.scrollBox.scrollHeight + (self.scrollBox.height - scrollDragPositionOffsetY)));\n            self.scrollBox.scrollBoxHeight = self.scrollBox.height\n                * self.scrollBox.heightBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.scrollBoxWidth = Math.max(self.scrollBox.scrollBoxWidth, self.style.scrollBarBoxMinSize);\n            self.scrollBox.scrollBoxHeight = Math.max(self.scrollBox.scrollBoxHeight, self.style.scrollBarBoxMinSize);\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            self.resizeEditInput();\n            self.scroll(true);\n            if (drawAfterResize) {\n                self.draw(true);\n            }\n            self.dispatchEvent('resize', {});\n            return true;\n        };\n        self.scroll = function (dontDraw) {\n            var bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                s = self.getVisibleSchema(),\n                cellBorder = self.style.cellBorderWidth * bm,\n                ch = self.style.cellHeight;\n            self.scrollIndexTop = 0;\n            self.scrollPixelTop = 0;\n            self.scrollIndexLeft = 0;\n            self.scrollPixelLeft = 0;\n            while (self.scrollPixelTop < self.scrollBox.scrollTop && self.scrollIndexTop < self.data.length) {\n                self.scrollPixelTop +=\n                    (((self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || ch)\n                        + (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0)) * self.scale)\n                    + cellBorder;\n                self.scrollIndexTop += 1;\n            }\n            while (self.scrollPixelLeft < self.scrollBox.scrollLeft && self.scrollIndexLeft < s.length) {\n                self.scrollPixelLeft +=\n                    ((self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]]\n                        || s[self.scrollIndexLeft].width\n                        || self.style.cellWidth) * self.scale)\n                    + cellBorder;\n                self.scrollIndexLeft += 1;\n            }\n            if (self.data.length > 0) {\n                self.scrollIndexLeft = Math.max(self.scrollIndexLeft - 1, 0);\n                self.scrollPixelLeft = Math.max(self.scrollPixelLeft\n                    - ((self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width || self.style.cellWidth) * self.scale), 0);\n                self.scrollIndexTop = Math.max(self.scrollIndexTop - 1, 0);\n                self.scrollPixelTop = Math.max((self.scrollPixelTop\n                    - ((self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || ch)\n                    + (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0)) * self.scale), 0);\n            }\n            self.ellipsisCache = {};\n            if (!dontDraw) {\n                self.draw(true);\n            }\n            //TODO: figure out why this has to be delayed for child grids\n            //BUG: wheeling event on 3rd level hierarchy fails to move input box\n            requestAnimationFrame(self.resizeEditInput);\n            self.dispatchEvent('scroll', {top: self.scrollBox.scrollTop, left: self.scrollBox.scrollLeft});\n        };\n        self.mousemove = function (e, overridePos) {\n            if (self.contextMenu || self.input) {\n                return;\n            }\n            self.mouse = overridePos || self.getLayerPos(e);\n            var ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                i,\n                vs = self.getVisibleSchema(),\n                dragBounds,\n                sBounds,\n                x = self.mouse.x,\n                y = self.mouse.y,\n                o = self.getCellAt(x, y),\n                delta,\n                ev = {NativeEvent: e, cell: o, x: x, y: y},\n                previousCell = self.currentCell;\n            clearTimeout(self.scrollTimer);\n            if (!self.isInGrid({x: x, y: y})) {\n                self.hasFocus = false;\n            }\n            if (self.dispatchEvent('mousemove', ev)) {\n                return;\n            }\n            if (o && self.currentCell && (self.currentCell.rowIndex !== o.rowIndex\n                    || self.currentCell.columnIndex !== o.columnIndex)) {\n                self.cellBoundaryCrossed = true;\n                ev.cell = previousCell;\n                self.dispatchEvent('cellmouseout', ev);\n                ev.cell = o;\n                self.dispatchEvent('cellmouseover', ev);\n            }\n            self.currentCell = o;\n            if (!self.hasFocus) {\n                return;\n            }\n            self.hovers = {};\n            if (!self.draggingItem\n                    && o\n                    && self.scrollModes.indexOf(o.context) === -1) {\n                self.dragItem = o;\n                self.dragMode = o.dragContext;\n                self.canvas.style.cursor = o.context;\n                if (o.context === 'cell' && o.data) {\n                    self.canvas.style.cursor = 'default';\n                    self.hovers[o.data[self.uniqueId]] = [o.columnIndex];\n                }\n                if ((self.selecting || self.reorderObject)\n                        && o.context === 'cell'\n                        && o.data) {\n                    sBounds = self.getSelectionBounds();\n                    delta = {\n                        x: Math.abs(self.dragStart.x - x),\n                        y: Math.abs(self.dragStart.y - y)\n                    };\n                    if (self.dragStartObject.columnIndex !== -1 && e.shiftKey) {\n                        self.dragStartObject = {\n                            rowIndex: self.activeCell.rowIndex,\n                            columnIndex: self.activeCell.columnIndex\n                        };\n                    }\n                    dragBounds = {\n                        top: Math.min(self.dragStartObject.rowIndex, o.rowIndex),\n                        left: Math.min(self.dragStartObject.columnIndex, o.columnIndex),\n                        bottom: Math.max(self.dragStartObject.rowIndex, o.rowIndex),\n                        right: Math.max(self.dragStartObject.columnIndex, o.columnIndex)\n                    };\n                    if (self.dragStartObject.columnIndex === -1) {\n                        dragBounds.left = -1;\n                        dragBounds.right = vs.length - 1;\n                        dragBounds.top = Math.min(sBounds.top, o.rowIndex);\n                        dragBounds.bottom = Math.max(sBounds.bottom, o.rowIndex);\n                    }\n                    if (self.dragStartObject.rowIndex !== o.rowIndex\n                                || self.dragStartObject.columnIndex !== o.columnIndex) {\n                        self.ignoreNextClick = true;\n                    }\n                    if (self.cellBoundaryCrossed || (delta.x === 0 && delta.y === 0) || (self.attributes.selectionMode === 'row')) {\n                        if ((self.attributes.selectionMode === 'row') || self.dragStartObject.columnIndex === -1) {\n                            self.selectRow(o.rowIndex, ctrl, null, true);\n                        } else {\n                            if (!self.dragAddToSelection && o.rowIndex !== undefined) {\n                                if (self.selections[o.rowIndex] && self.selections[o.rowIndex].indexOf(o.columnIndex) !== -1) {\n                                    self.selections[o.rowIndex].splice(self.selections[o.rowIndex].indexOf(o.columnIndex), 1);\n                                }\n                            } else {\n                                self.selections[o.rowIndex] = self.selections[o.rowIndex] || [];\n                                if (self.selections[o.rowIndex].indexOf(o.columnIndex) === -1) {\n                                    self.selections[o.rowIndex].push(o.columnIndex);\n                                }\n                            }\n                        }\n                    }\n                    if ((!self.selectionBounds || (dragBounds.top !== self.selectionBounds.top\n                            || dragBounds.left !== self.selectionBounds.left\n                            || dragBounds.bottom !== self.selectionBounds.bottom\n                            || dragBounds.right !== self.selectionBounds.right)) && !ctrl) {\n                        self.selections = [];\n                        sBounds = dragBounds;\n                        if (self.attributes.selectionMode === 'row') {\n                            for (i = sBounds.top; i <= sBounds.bottom; i += 1) {\n                                self.selectRow(i, true, null, true);\n                            }\n                        } else {\n                            self.selectArea(sBounds, true);\n                        }\n                    }\n                    self.autoScrollZone(e, x, y, ctrl);\n                }\n            }\n            self.cellBoundaryCrossed = false;\n            self.draw(true);\n        };\n        self.click = function (e, overridePos) {\n            var i,\n                ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                pos = overridePos || self.getLayerPos(e);\n            self.currentCell = self.getCellAt(pos.x, pos.y);\n            if (self.currentCell.grid !== undefined) {\n                return;\n            }\n            function checkSelectionChange() {\n                self.dispatchEvent('selectionchanged', {\n                    selectedData: self.getSelectedData(),\n                    selections: self.selections,\n                    selectionBounds: self.selectionBounds\n                });\n            }\n            if (self.input) {\n                self.endEdit();\n            }\n            if (self.ignoreNextClick) {\n                self.ignoreNextClick = false;\n                return;\n            }\n            i = self.currentCell;\n            if (self.dispatchEvent('click', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (['rowHeaderCell', 'columnHeaderCell'].indexOf(self.currentCell.style) === -1 && !ctrl) {\n                self.setActiveCell(i.columnIndex, i.rowIndex);\n            }\n            if (self.currentCell.context === 'cell') {\n                if (self.currentCell.style === 'cornerCell') {\n                    self.selectAll();\n                    self.draw();\n                    checkSelectionChange();\n                    return;\n                }\n                if (self.currentCell.style === 'columnHeaderCell') {\n                    if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                        if (self.orderBy === i.header.name) {\n                            self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                        } else {\n                            self.orderDirection = 'asc';\n                        }\n                        self.order(i.header.name, self.orderDirection);\n                        checkSelectionChange();\n                        return;\n                    }\n                    if (self.attributes.columnHeaderClickBehavior === 'select') {\n                        self.selectColumn(i.header.index, ctrl, e.shiftKey, true);\n                        checkSelectionChange();\n                        self.draw();\n                        return;\n                    }\n                }\n                self.selections[i.rowIndex] = self.selections[i.rowIndex] || [];\n                if (((self.attributes.selectionMode === 'row') || self.currentCell.style === 'rowHeaderCell')) {\n                    if (self.currentCell.style === 'rowHeaderCell'\n                            && self.attributes.tree && pos.x > 0\n                            && pos.x - self.currentCell.x < self.style.treeArrowWidth\n                            + self.style.treeArrowMarginLeft\n                            + self.style.treeArrowMarginRight + self.style.treeArrowClickRadius\n                            && pos.y - self.currentCell.y < self.style.treeArrowHeight\n                            + self.style.treeArrowMarginTop + self.style.treeArrowClickRadius\n                            && pos.y > 0) {\n                        self.toggleTree(i.rowIndex);\n                        return;\n                    }\n                }\n                if (e.shiftKey && !ctrl) {\n                    self.selectionBounds = self.getSelectionBounds();\n                    self.selectArea(undefined, false);\n                }\n            }\n            checkSelectionChange();\n            self.draw(true);\n        };\n        self.dragResizeColumn = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = self.resizingStartingWidth + pos.x - self.dragStart.x;\n            y = self.resizingStartingHeight + pos.y - self.dragStart.y;\n            if (x < self.style.minColumnWidth) {\n                x = self.style.minColumnWidth;\n            }\n            if (y < self.style.minRowHeight) {\n                y = self.style.minRowHeight;\n            }\n            if (self.dispatchEvent('resizecolumn', {x: x, y: y, draggingItem: self.draggingItem})) { return false; }\n            if (self.scrollBox.scrollLeft > self.scrollBox.scrollWidth - self.attributes.resizeScrollZone\n                    && self.dragMode === 'ew-resize') {\n                self.resize(true);\n                self.scrollBox.scrollLeft += x;\n            }\n            if (self.dragMode === 'ew-resize') {\n                self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] = x;\n                if (['rowHeaderCell', 'cornerCell'].indexOf(self.draggingItem.header.style) !== -1) {\n                    self.resize(true);\n                }\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.dragMode === 'ns-resize') {\n                if (self.draggingItem.rowOpen) {\n                    self.sizes.trees[self.draggingItem.data[self.uniqueId]] = y;\n                } else if (self.attributes.globalRowResize) {\n                    self.style.cellHeight = y;\n                } else {\n                    self.sizes.rows[self.draggingItem.data[self.uniqueId]] = y;\n                }\n                self.dispatchEvent('resizerow', {row: y});\n                self.resizeChildGrids();\n                return;\n            }\n            self.ellipsisCache = {};\n        };\n        self.stopDragResize = function () {\n            self.resize();\n            document.body.removeEventListener('mousemove', self.dragResizeColumn, false);\n            document.body.removeEventListener('mouseup', self.stopDragResize, false);\n            self.setStorageData();\n            self.draw(true);\n            self.ignoreNextClick = true;\n        };\n        self.scrollGrid = function (e) {\n            var pos = self.getLayerPos(e);\n            if (self.attributes.scrollPointerLock && self.pointerLockPosition\n                    && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                self.pointerLockPosition.x += e.movementX;\n                self.pointerLockPosition.y += e.movementY;\n                self.pointerLockPosition.x = Math.min(self.width - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.x));\n                self.pointerLockPosition.y = Math.min(self.height - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.y));\n                pos = self.pointerLockPosition;\n            }\n            self.scrollMode = self.getCellAt(pos.x, pos.y).context;\n            if (self.scrollMode === 'horizontal-scroll-box' && self.scrollStartMode !== 'horizontal-scroll-box') {\n                self.scrollStartMode = 'horizontal-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.left = self.scrollBox.scrollLeft;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box' && self.scrollStartMode !== 'vertical-scroll-box') {\n                self.scrollStartMode = 'vertical-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.top = self.scrollBox.scrollTop;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollStartMode === 'vertical-scroll-box'\n                    && self.scrollMode !== 'vertical-scroll-box') {\n                self.scrollMode = 'vertical-scroll-box';\n            }\n            if (self.scrollStartMode === 'horizontal-scroll-box'\n                    && self.scrollMode !== 'horizontal-scroll-box') {\n                self.scrollMode = 'horizontal-scroll-box';\n            }\n            clearTimeout(self.scrollTimer);\n            if (self.scrollModes.indexOf(self.scrollMode) === -1) {\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box') {\n                self.scrollBox.scrollTop = self.scrollStart.top + ((pos.y - self.dragStart.y)\n                    / self.scrollBox.heightBoxRatio);\n            } else if (self.scrollMode === 'vertical-scroll-top') {\n                self.scrollBox.scrollTop -= (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'vertical-scroll-bottom') {\n                self.scrollBox.scrollTop += (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n            if (self.scrollMode === 'horizontal-scroll-box') {\n                self.scrollBox.scrollLeft = self.scrollStart.left + ((pos.x - self.dragStart.x)\n                    / self.scrollBox.widthBoxRatio);\n            } else if (self.scrollMode === 'horizontal-scroll-right') {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'horizontal-scroll-left') {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.stopScrollGrid = function () {\n            clearTimeout(self.scrollTimer);\n            if (document.exitPointerLock) {\n                document.exitPointerLock();\n            }\n            document.body.removeEventListener('mousemove', self.scrollGrid, false);\n        };\n        self.dragReorder = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = pos.x - self.dragStart.x;\n            y = pos.y - self.dragStart.y;\n            if (!self.attributes.allowColumnReordering && self.dragMode === 'column-reorder') {\n                return;\n            }\n            if (!self.attributes.allowRowReordering && self.dragMode === 'row-reorder') {\n                return;\n            }\n            if (self.dispatchEvent('reordering', {\n                    NativeEvent: e,\n                    source: self.dragStartObject,\n                    target: self.currentCell,\n                    dragMode: self.dragMode\n                })) {\n                return;\n            }\n            if (Math.abs(x) > self.attributes.reorderDeadZone || Math.abs(y) > self.attributes.reorderDeadZone) {\n                self.reorderObject = self.draggingItem;\n                self.reorderTarget = self.currentCell;\n                self.reorderObject.dragOffset = {\n                    x: x,\n                    y: y\n                };\n                self.autoScrollZone(e, pos.x, pos.y, false);\n            }\n        };\n        self.stopDragReorder = function (e) {\n            var oIndex,\n                tIndex,\n                cr = {\n                    'row-reorder': self.orders.rows,\n                    'column-reorder': self.orders.columns\n                },\n                i = {\n                    'row-reorder': 'rowIndex',\n                    'column-reorder': 'columnIndex'\n                }[self.dragMode];\n            document.body.removeEventListener('mousemove', self.dragReorder, false);\n            document.body.removeEventListener('mouseup', self.stopDragReorder, false);\n            if (self.reorderObject\n                    && self.reorderTarget\n                    && ((self.dragMode === 'column-reorder' && self.reorderTarget.columnIndex > -1\n                        && self.reorderTarget.columnIndex < self.getVisibleSchema().length)\n                    || (self.dragMode === 'row-reorder' && self.reorderTarget.rowIndex > -1\n                        && self.reorderTarget.rowIndex < self.data.length))\n                    && self.reorderObject[i] !== self.reorderTarget[i]\n                    && !self.dispatchEvent('reorder', {\n                        NativeEvent: e,\n                        source: self.reorderObject,\n                        target: self.reorderTarget,\n                        dragMode: self.dragMode\n                    })) {\n                self.ignoreNextClick = true;\n                oIndex = cr[self.dragMode].indexOf(self.reorderObject[i]);\n                tIndex = cr[self.dragMode].indexOf(self.reorderTarget[i]);\n                cr[self.dragMode].splice(oIndex, 1);\n                cr[self.dragMode].splice(tIndex, 0, self.reorderObject[i]);\n                self.setStorageData();\n            }\n            self.reorderObject = undefined;\n            self.reorderTarget = undefined;\n            self.draw(true);\n        };\n        self.dragMove = function (e) {\n            if (self.dispatchEvent('moving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.moveOffset = {\n                x: self.currentCell.columnIndex - self.dragStartObject.columnIndex,\n                y: self.currentCell.rowIndex - self.dragStartObject.rowIndex\n            };\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopDragMove = function (e) {\n            document.body.removeEventListener('mousemove', self.dragMove, false);\n            document.body.removeEventListener('mouseup', self.stopDragMove, false);\n            var b = self.getSelectionBounds();\n            if (self.dispatchEvent('endmove', {NativeEvent: e, cell: self.currentCell})) {\n                self.movingSelection = undefined;\n                self.moveOffset = undefined;\n                self.draw(true);\n                return;\n            }\n            if (self.moveOffset) {\n                self.moveTo(self.movingSelection, b.left + self.moveOffset.x, b.top + self.moveOffset.y);\n                self.moveSelection(self.moveOffset.x, self.moveOffset.y);\n            }\n            self.movingSelection = undefined;\n            self.moveOffset = undefined;\n            self.draw(true);\n        };\n        self.freezeMove = function (e) {\n            if (self.dispatchEvent('freezemoving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.ignoreNextClick = true;\n            self.freezeMarkerPosition = pos;\n            if (self.currentCell && self.currentCell.rowIndex !== undefined && self.dragMode === 'frozen-row-marker') {\n                self.scrollBox.scrollTop = 0;\n                self.frozenRow = self.currentCell.rowIndex + 1;\n            }\n            if (self.currentCell && self.currentCell.columnIndex !== undefined && self.dragMode === 'frozen-column-marker') {\n                self.scrollBox.scrollLeft = 0;\n                self.frozenColumn = self.currentCell.columnIndex + 1;\n            }\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopFreezeMove = function (e) {\n            document.body.removeEventListener('mousemove', self.freezeMove, false);\n            document.body.removeEventListener('mouseup', self.stopFreezeMove, false);\n            self.freezeMarkerPosition = undefined;\n            if (self.dispatchEvent('endfreezemove', {NativeEvent: e})) {\n                self.frozenRow = self.startFreezeMove.x;\n                self.frozenColumn = self.startFreezeMove.y;\n                self.draw(true);\n                return;\n            }\n            self.draw(true);\n        };\n        self.mousedown = function (e, overridePos) {\n            self.lastMouseDownTarget = e.target;\n            if (self.dispatchEvent('mousedown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (e.button === 2 || self.input) { return; }\n            var ctrl = (e.ctrlKey || e.metaKey),\n                move = /-move/.test(self.dragMode),\n                freeze = /frozen-row-marker|frozen-column-marker/.test(self.dragMode),\n                resize = /-resize/.test(self.dragMode);\n            self.dragStart = overridePos || self.getLayerPos(e);\n            self.scrollStart = {\n                left: self.scrollBox.scrollLeft,\n                top: self.scrollBox.scrollTop\n            };\n            self.dragStartObject = self.getCellAt(self.dragStart.x, self.dragStart.y);\n            self.dragAddToSelection = !self.dragStartObject.selected;\n            if (!ctrl && !e.shiftKey && !/(vertical|horizontal)-scroll-(bar|box)/\n                    .test(self.dragStartObject.context)\n                    && self.currentCell\n                    && !self.currentCell.isColumnHeader\n                    && !move\n                    && !freeze\n                    && !resize) {\n                self.selections = [];\n            }\n            if (self.dragStartObject.isGrid) {\n                return;\n            }\n            if (self.scrollModes.indexOf(self.dragStartObject.context) !== -1) {\n                self.scrollMode = self.dragStartObject.context;\n                self.scrollStartMode = self.dragStartObject.context;\n                self.scrollGrid(e);\n                if (self.attributes.scrollPointerLock\n                        && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                    self.pointerLockPosition = {\n                        x: self.dragStart.x,\n                        y: self.dragStart.y\n                    };\n                    self.canvas.requestPointerLock();\n                }\n                document.body.addEventListener('mousemove', self.scrollGrid, false);\n                document.body.addEventListener('mouseup', self.stopScrollGrid, false);\n                self.ignoreNextClick = true;\n                return;\n            }\n            if (self.dragMode === 'cell') {\n                self.selecting = true;\n                if (self.attributes.selectionMode === 'row') {\n                    self.selectRow(self.dragStartObject.rowIndex, ctrl, null, true);\n                }\n                return self.mousemove(e);\n            }\n            if (move) {\n                self.draggingItem = self.dragItem;\n                self.movingSelection = self.selections.concat([]);\n                self.dragging = self.dragStartObject;\n                if (self.dispatchEvent('beginmove', {NativeEvent: e, cell: self.currentCell})) { return; }\n                document.body.addEventListener('mousemove', self.dragMove, false);\n                document.body.addEventListener('mouseup', self.stopDragMove, false);\n                return self.mousemove(e);\n            }\n            if (freeze) {\n                self.draggingItem = self.dragItem;\n                self.startFreezeMove = {\n                    x: self.frozenRow,\n                    y: self.frozenColumn\n                };\n                if (self.dispatchEvent('beginfreezemove', {NativeEvent: e})) { return; }\n                document.body.addEventListener('mousemove', self.freezeMove, false);\n                document.body.addEventListener('mouseup', self.stopFreezeMove, false);\n                return self.mousemove(e);\n            }\n            if (resize) {\n                self.draggingItem = self.dragItem;\n                if (self.draggingItem.rowOpen) {\n                    self.resizingStartingHeight = self.sizes.trees[self.draggingItem.data[self.uniqueId]];\n                } else {\n                    self.resizingStartingHeight = self.sizes.rows[self.draggingItem.data[self.uniqueId]] || self.style.cellHeight;\n                }\n                self.resizingStartingWidth = self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] || self.draggingItem.width;\n                document.body.addEventListener('mousemove', self.dragResizeColumn, false);\n                document.body.addEventListener('mouseup', self.stopDragResize, false);\n            }\n            if (['row-reorder', 'column-reorder'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragStartObject;\n                document.body.addEventListener('mousemove', self.dragReorder, false);\n                document.body.addEventListener('mouseup', self.stopDragReorder, false);\n            }\n        };\n        self.mouseup = function (e) {\n            clearTimeout(self.scrollTimer);\n            self.cellBoundaryCrossed = true;\n            self.selecting = undefined;\n            self.draggingItem = undefined;\n            self.dragStartObject = undefined;\n            if (self.dispatchEvent('mouseup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            if (self.currentCell && self.currentCell.grid !== undefined) {\n                return;\n            }\n            if (self.contextMenu || self.input) { return; }\n            if (self.dragStart && self.isInGrid(self.dragStart)) {\n                self.controlInput.focus();\n            }\n            e.preventDefault();\n        };\n        self.keydown = function (e) {\n            var i,\n                x = self.activeCell.columnIndex,\n                y = self.activeCell.rowIndex,\n                ctrl = (e.ctrlKey || e.metaKey),\n                last = self.data.length - 1,\n                cols = self.getVisibleSchema().length - 1;\n            if (self.dispatchEvent('keydown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            if (self.attributes.showNewRow) {\n                last += 1;\n            }\n            if (e.keyCode === 9) {\n                e.preventDefault();\n            }\n            // esc\n            if (e.keyCode === 27) {\n                self.selections = [];\n                self.draw(true);\n            // ctrl + a\n            } else if (ctrl && e.keyCode === 65) {\n                self.selectAll();\n            //ArrowDown\n            } else if (e.keyCode === 40) {\n                y += 1;\n            //ArrowUp\n            } else if (e.keyCode === 38) {\n                y -= 1;\n            //ArrowLeft Tab\n            } else if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {\n                x -= 1;\n            //ArrowRight Tab\n            } else if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {\n                x += 1;\n            //PageUp\n            } else if (e.keyCode === 33) {\n                y -= self.page;\n                e.preventDefault();\n            //PageDown\n            } else if (e.keyCode === 34) {\n                y += self.page;\n                e.preventDefault();\n            //Home ArrowUp\n            } else if (e.keyCode === 36 || (ctrl && e.keyCode === 38)) {\n                y = 0;\n            //End ArrowDown\n            } else if (e.keyCode === 35 || (ctrl && e.keyCode === 40)) {\n                y = self.data.length - 1;\n            //ArrowRight\n            } else if (ctrl && e.keyCode === 39) {\n                x = cols;\n            //ArrowLeft\n            } else if (ctrl && e.keyCode === 37) {\n                x = 0;\n            }\n            //Enter\n            if (e.keyCode === 13) {\n                return self.beginEditAt(x, y);\n            }\n            //Space\n            if (e.keyCode === 32) {\n                self.selections = [];\n                self.selections[Math.max(y, 0)] = [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                if (self.attributes.selectionMode === 'row') {\n                    for (i = self.selectionBounds.top; i <= self.selectionBounds.bottom; i += 1) {\n                        self.selectRow(i, ctrl, null, true);\n                    }\n                } else {\n                    self.selectArea(undefined, ctrl);\n                }\n                e.preventDefault();\n                self.draw(true);\n                return;\n            }\n            if (x < 0) {\n                x = 0;\n            }\n            if (y > last) {\n                y = last;\n            }\n            if (y < 0) {\n                y = 0;\n            }\n            if (x > cols) {\n                x = cols;\n            }\n            // Arrows\n            if (e.shiftKey && [37, 38, 39, 40].indexOf(e.keyCode) !== -1) {\n                self.selections[Math.max(y, 0)] = self.selections[Math.max(y, 0)] || [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                self.selectArea(undefined, ctrl);\n                self.draw(true);\n            }\n            if (x !== self.activeCell.columnIndex || y !== self.activeCell.rowIndex) {\n                self.scrollIntoView(x !== self.activeCell.columnIndex ? x : undefined, y !== self.activeCell.rowIndex ? y : undefined);\n                self.setActiveCell(x, y);\n                if (!e.shiftKey && self.attributes.selectionFollowsActiveCell) {\n                    if (!ctrl) {\n                        self.selections = [];\n                    }\n                    self.selections[y] = self.selections[y] || [];\n                    self.selections[y].push(x);\n                    self.dispatchEvent('selectionchanged', {\n                        selectedData: self.getSelectedData(),\n                        selections: self.selections,\n                        selectionBounds: self.selectionBounds\n                    });\n                }\n                self.draw(true);\n            }\n        };\n        self.keyup = function (e) {\n            if (self.dispatchEvent('keyup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n        };\n        self.keypress = function (e) {\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.dispatchEvent('keypress', {NativeEvent: e, cell: self.currentCell})) { return; }\n        };\n        self.dblclick = function (e) {\n            if (self.dispatchEvent('dblclick', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'columnHeaderCell') {\n                self.fitColumnToValues(self.currentCell.header.name);\n            } else if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'cornerCell') {\n                self.autosize();\n            } else if (['cell', 'activeCell'].indexOf(self.currentCell.style) !== -1) {\n                self.beginEditAt(self.currentCell.columnIndex, self.currentCell.rowIndex);\n            }\n        };\n        self.scrollWheel = function (e) {\n            var l,\n                t,\n                deltaX = e.deltaX === undefined ? e.NativeEvent.deltaX : e.deltaX,\n                deltaY = e.deltaY === undefined ? e.NativeEvent.deltaY : e.deltaY,\n                deltaMode = e.deltaMode === undefined ? e.NativeEvent.deltaMode : e.deltaMode;\n            if (wheeling) {\n                return;\n            }\n            if (self.dispatchEvent('wheel', {NativeEvent: e})) {\n                return;\n            }\n            e = e.NativeEvent || e;\n            self.touchHaltAnimation = true;\n            l = self.scrollBox.scrollLeft;\n            t = self.scrollBox.scrollTop;\n            if (self.hasFocus) {\n                //BUG Issue 42: https://github.com/TonyGermaneri/canvas-datagrid/issues/42\n                //https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\n                if (deltaMode === 1) {\n                    // line mode = 17 pixels per line\n                    deltaY = deltaY * 17;\n                }\n                if ((self.scrollBox.scrollTop < self.scrollBox.scrollHeight && deltaY > 0)\n                        || (self.scrollBox.scrollLeft < self.scrollBox.scrollWidth && deltaX > 0)\n                        || (self.scrollBox.scrollTop > 0 && deltaY < 0)\n                        || (self.scrollBox.scrollLeft > 0 && deltaX < 0)) {\n                    e.preventDefault(e);\n                }\n                wheeling = setTimeout(function () {\n                    wheeling = undefined;\n                    self.scrollBox.scrollTo(deltaX + l, deltaY + t);\n                }, 1);\n            }\n        };\n        self.pasteItem = function (clipData, x, y, mimeType) {\n            var l, s = self.getVisibleSchema(), yi = y - 1, sel = [];\n            function normalizeRowData(importingRow, existingRow, offsetX, schema, mimeType, rowIndex) {\n                var r = existingRow;\n                if (!Array.isArray(importingRow) && importingRow !== null && typeof importingRow === 'object') {\n                    importingRow = Object.keys(importingRow).map(function (colKey) {\n                        return importingRow[colKey];\n                    });\n                }\n                if (/^text\\/html/.test(mimeType)) {\n                    importingRow = importingRow.substring(4, importingRow.length - 5).split('</td><td>');\n                }\n                if (typeof importingRow === 'string') {\n                    importingRow = [importingRow];\n                }\n                sel[rowIndex] = [];\n                importingRow.forEach(function (cellData, colIndex) {\n                    var cName = schema[colIndex + offsetX].name;\n                    if (importingRow[colIndex] === undefined || importingRow[colIndex] === null) {\n                        r[cName] = existingRow[cName];\n                        return;\n                    }\n                    sel[rowIndex].push(colIndex + offsetX);\n                    r[cName] = importingRow[colIndex];\n                });\n                return r;\n            }\n            if (/^text\\/html/.test(mimeType)) {\n                if (!/^(<meta[^>]+>)?<table>/.test(clipData.substring(0, 29))) {\n                    console.warn('Unrecognized HTML format.  HTML must be a simple table, e.g.: <table><tr><td>data</td></tr></table>.  Data with the mime type text/html not in this format will not be imported as row data.');\n                    return;\n                }\n                // strip table beginning and ending off, then split at rows\n                clipData = clipData.substring(clipData.indexOf('<table><tr>') + 11, clipData.length - 13).split('</tr><tr>');\n            } else {\n                clipData = clipData.split('\\n');\n            }\n            l = clipData.length;\n            clipData.forEach(function (rowData) {\n                yi += 1;\n                self.data[yi] = normalizeRowData(rowData, self.data[yi], x, s, mimeType, yi);\n            });\n            self.selections = sel;\n            return l;\n        };\n        self.paste = function (e) {\n            var d;\n            function getItem(dti) {\n                var type = dti.type;\n                dti.getAsString(function (s) {\n                    self.pasteItem(s, self.activeCell.columnIndex, self.activeCell.rowIndex, type);\n                    self.draw();\n                });\n            }\n            d = Array.prototype.filter.call(e.clipboardData.items, function (dti) {\n                return dti.type === 'text/html';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/csv';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/plain';\n            })[0];\n            if (!d) {\n                console.warn('Cannot find supported clipboard data type.  Supported types are text/html, text/csv, text/plain.');\n                return;\n            }\n            getItem(d);\n        };\n        self.cut = function (e) {\n            self.copy(e);\n            self.forEachSelectedCell(function (data, index, colName) {\n                data[index][colName] = '';\n            });\n        };\n        self.copy = function (e) {\n            if (self.dispatchEvent('copy', {NativeEvent: e})) { return; }\n            if (!self.hasFocus || !e.clipboardData) { return; }\n            var t,\n                d,\n                rows = [],\n                trows = [],\n                sData = self.getSelectedData();\n            function fCopyCell(d) {\n                d = d === null || d === undefined ? '' : d;\n                return '<td>' + (typeof d === 'string' ? d.replace(/</g, '&lt;').replace(/>/g, '&gt;') : d) + '</td>';\n            }\n            if (sData.length > 0) {\n                sData.forEach(function (row) {\n                    if (row) {\n                        // r = array for HTML, rt = array for plain text\n                        var r = [],\n                            rt = [];\n                        Object.keys(row).forEach(function (key) {\n                            // escape strings\n                            if (row[key] !== null\n                                    && row[key] !== false\n                                    && row[key] !== undefined\n                                    && row[key].replace) {\n                                rt.push('\"' + row[key].replace(/\"/g, '\"\"') + '\"');\n                                r.push(fCopyCell(row[key]));\n                                return;\n                            }\n                            rt.push(row[key]);\n                            r.push(fCopyCell(row[key]));\n                        });\n                        rows.push(r.join(''));\n                        trows.push(rt.join(','));\n                    }\n                });\n                d = '<table><tr>' + rows.join('</tr><tr>') + '</tr></table>';\n                t = trows.join('\\n');\n                e.clipboardData.setData('text/html', d);\n                e.clipboardData.setData('text/plain', t);\n                e.clipboardData.setData('text/csv', t);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/events.js\n// module id = 4\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var touchTimerMs = 50,\n            touchScrollTimeout;\n        self.scrollAnimation = {};\n        self.touchDelta = {};\n        self.touchAnimateTo = {};\n        self.animationFrames = 0;\n        self.getTouchPos = function (e, touchIndex) {\n            var t = touchIndex ? e.touches[touchIndex] : e.touches[0],\n                rect = self.canvas.getBoundingClientRect(),\n                pos;\n            if (!t) { return; }\n            pos = {\n                x: t.clientX - rect.left,\n                y: t.clientY - rect.top\n            };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        // shamelessly stolen from from https://gist.github.com/gre/1650294\n        self.easingFunctions = {\n            linear: function (t) { return t; },\n            easeInQuad: function (t) { return t * t; },\n            easeOutQuad: function (t) { return t * (2 - t); },\n            easeInOutQuad: function (t) { return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t; },\n            easeInCubic: function (t) { return t * t * t; },\n            easeOutCubic: function (t) { return (--t) * t * t + 1; },\n            easeInOutCubic: function (t) { return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1; },\n            easeInQuart: function (t) { return t * t * t * t; },\n            easeOutQuart: function (t) { return 1 - (--t) * t * t * t; },\n            easeInOutQuart: function (t) { return t < 0.5 ? 8 * t  * t  * t * t : 1 - 8 * (--t) * t * t * t; },\n            easeInQuint: function (t) { return t * t * t * t * t; },\n            easeOutQuint: function (t) { return 1 + (--t) * t *  t * t * t; },\n            easeInOutQuint: function (t) { return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t; }\n        };\n        self.easing = function (t, b, c, d) {\n            return c * self.easingFunctions[self.attributes.touchEasingMethod](t / d) + b;\n        };\n        self.calculatePPSTimed = function () {\n            self.xPPST = -((self.touchDelta.x - self.touchSigmaTimed.x) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.yPPST = -((self.touchDelta.y - self.touchSigmaTimed.y) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.touchSigmaTimed = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.calculatePPS = function () {\n            self.xPPS = -((self.touchDelta.x - self.touchSigma.x) / (self.touchDelta.t - self.touchSigma.t));\n            self.yPPS = -((self.touchDelta.y - self.touchSigma.y) / (self.touchDelta.t - self.touchSigma.t));\n            self.touchSigma = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.touchEndAnimation = function () {\n            if (!self.canvas || !self.scrollBox.scrollTo) { return requestAnimationFrame(self.touchEndAnimation); }\n            var n = performance.now(),\n                d = self.attributes.touchReleaseAnimationDurationMs,\n                t;\n            t = n - self.touchDelta.t;\n            self.animationFrames += 1;\n            self.scrollAnimation.x = self.easing(t, self.touchDelta.scrollLeft, self.touchAnimateTo.x, d);\n            self.scrollAnimation.y = self.easing(t, self.touchDelta.scrollTop, self.touchAnimateTo.y, d);\n            if (t > d || (self.scrollAnimation.y === self.scrollBox.scrollTop\n                    && self.scrollAnimation.x === self.scrollBox.scrollLeft) || self.stopAnimation) {\n                return;\n            }\n            self.scrollBox.scrollTo(self.scrollAnimation.x, self.scrollAnimation.y);\n            requestAnimationFrame(self.touchEndAnimation);\n        };\n        self.touchEditCell = function (cell) {\n            self.beginEditAt(cell.columnIndex, cell.rowIndex);\n        };\n        self.touchCell = function (e) {\n            return function () {\n                clearInterval(self.calculatePPSTimer);\n                var i, pos = self.getTouchPos(e);\n                if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone) {\n                    i = self.getCellAt(pos.x, pos.y);\n                    if (!i) { return; }\n                    if (self.touchingCell && self.touchingCell.rowIndex === i.rowIndex\n                            && self.touchingCell.columnIndex === i.columnIndex) {\n                        self.touchEditCell(i);\n                        return;\n                    }\n                    if (self.input && self.input.editCell) {\n                        self.endEdit();\n                    }\n                    self.touchingCell = i;\n                    self.selectArea({\n                        top: i.rowIndex,\n                        bottom: i.rowIndex,\n                        left: i.columnIndex,\n                        right: i.columnIndex\n                    });\n                    self.draw(true);\n                }\n            };\n        };\n        self.touchstart = function (e) {\n            if (self.dispatchEvent('touchstart', {NativeEvent: e})) { return; }\n            self.disposeContextMenu();\n            clearInterval(self.calculatePPSTimer);\n            clearTimeout(self.touchContextTimeout);\n            self.touchStartEvent = e;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (e.changedTouches[0]) {\n                self.touchStart = self.getTouchPos(e);\n            }\n            if (e.touches.length === 1 && e.changedTouches[0] && !self.zoomAltered) {\n                self.touchLength = 1;\n                self.touchStart = self.touchStart || self.touchStart1;\n                self.touchScrollStart = {\n                    x: self.scrollBox.scrollLeft,\n                    y: self.scrollBox.scrollTop,\n                    t: performance.now()\n                };\n                self.touchDelta = {\n                    x: 0,\n                    y: 0,\n                    scrollLeft: self.scrollBox.scrollLeft,\n                    scrollTop: self.scrollBox.scrollTop,\n                    t: self.touchScrollStart.t\n                };\n                self.touchSigma = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchSigmaTimed = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchContextTimeout = setTimeout(function () {\n                    self.contextmenuEvent(e, self.touchStart);\n                }, self.attributes.touchContextMenuTimeMs);\n                self.calculatePPSTimer = setInterval(self.calculatePPSTimed, touchTimerMs);\n                self.startingCell = self.getCellAt(self.touchStart.x, self.touchStart.y, true);\n                if (self.startingCell && (self.startingCell.isGrid || ['tree', 'inherit'].indexOf(self.startingCell.context) !== -1)) {\n                    self.hasFocus = false;\n                    return;\n                }\n                self.hasFocus = true;\n                if (self.startingCell.isHeader) {\n                    if (self.startingCell.isRowHeader) {\n                        self.selectArea({\n                            top: self.startingCell.rowIndex,\n                            bottom: self.startingCell.rowIndex,\n                            left: 0,\n                            right: self.getVisibleSchema().length - 1,\n                        });\n                        self.draw(true);\n                    } else if (self.startingCell.isColumnHeader) {\n                        if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                            if (self.orderBy === self.startingCell.header.name) {\n                                self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                            } else {\n                                self.orderDirection = 'asc';\n                            }\n                            self.order(self.startingCell.header.name, self.orderDirection);\n                        }\n                        if (self.attributes.columnHeaderClickBehavior === 'select') {\n                            self.selectArea({\n                                top: 0,\n                                bottom: self.data.length - 1,\n                                left: self.startingCell.columnIndex,\n                                right: self.startingCell.columnIndex,\n                            });\n                            self.draw(true);\n                        }\n                    }\n                    self.touchEndEvents(e);\n                    return;\n                }\n            }\n            if (self.zoomAltered) { return; }\n            document.body.addEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.addEventListener('touchend', self.touchend, false);\n            document.body.addEventListener('touchcancel', self.touchcancel, false);\n            self.draw(true);\n        };\n        self.touchSelect = function (cell, handleType) {\n            if (cell.rowIndex === undefined || cell.columnIndex === undefined) { return; }\n            self.touchSelecting = true;\n            var bounds = self.getSelectionBounds();\n            if (handleType === 'selection-handle-bl'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex <= bounds.right) {\n                bounds.bottom = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tl'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex <= bounds.right) {\n                bounds.top = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tr'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex >= bounds.left) {\n                bounds.top = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            } else if (handleType === 'selection-handle-br'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex >= bounds.left) {\n                bounds.bottom = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            }\n            if (self.attributes.selectionMode === 'row' || cell.rowIndex === -1) {\n                bounds.left = 0;\n                bounds.right = self.getSchema().length - 1;\n            } else {\n                bounds.left = Math.max(0, bounds.left);\n            }\n            self.selectArea(bounds);\n            self.draw(true);\n        };\n        self.touchmove = function (e) {\n            var ch, rw, rScrollZone, lScrollZone, bScrollZone, tScrollZone, sbw, t1, t2;\n            if (self.dispatchEvent('touchmove', {NativeEvent: e})) { return; }\n            clearTimeout(touchScrollTimeout);\n            if (e.changedTouches[0]) {\n                self.touchPosition = self.getTouchPos(e);\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = self.getTouchPos(e, 1);\n            }\n            if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) > self.attributes.touchDeadZone) {\n                clearTimeout(self.touchContextTimeout);\n            }\n            if (e.touches.length === 2 && self.touchPosition && self.touchPosition1) {\n                t1 = self.touchPosition.y;\n                t2 = self.touchPosition1.y;\n                if (!self.zoomDeltaStart) {\n                    self.zoomDeltaStart = Math.abs(t1 - t2);\n                    self.startScale = self.scale;\n                }\n                self.touchLength = 2;\n                self.scaleDelta = self.zoomDeltaStart - Math.abs(t1 - t2);\n                self.scale = self.startScale - (self.scaleDelta * self.attributes.touchZoomSensitivity);\n                self.scale = Math.min(Math.max(self.scale, self.attributes.touchZoomMin), self.attributes.touchZoomMax);\n                self.zoomAltered = true;\n                self.resize(true);\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.zoomAltered) { return; }\n            self.touchLength = 1;\n            self.touchPosition = self.touchPosition || self.touchPosition1;\n            ch = self.getColumnHeaderCellHeight();\n            rw = self.getRowHeaderCellWidth();\n            rScrollZone = self.width - self.style.scrollBarWidth - self.touchPosition.x < self.attributes.selectionScrollZone;\n            lScrollZone = self.touchPosition.x - rw < self.attributes.selectionScrollZone;\n            bScrollZone = self.height - self.style.scrollBarWidth - self.touchPosition.y < self.attributes.selectionScrollZone;\n            tScrollZone = self.touchPosition.y - ch < self.attributes.selectionScrollZone;\n            sbw = self.style.scrollBarWidth;\n            function touchScroll() {\n                var x = self.scrollBox.scrollLeft,\n                    y = self.scrollBox.scrollTop;\n                x += (rScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y += (bScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y -= (tScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                x -= (lScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                self.scrollBox.scrollTo(x, y);\n                touchScrollTimeout = setTimeout(touchScroll, self.attributes.scrollRepeatRate);\n            }\n            e.stopPropagation();\n            self.touchDelta = {\n                x: self.touchPosition.x - self.touchStart.x,\n                y: self.touchPosition.y - self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: performance.now()\n            };\n            self.currentCell = self.getCellAt(self.touchPosition.x, self.touchPosition.y);\n            self.calculatePPS();\n            self.touchDuration = performance.now() - self.touchScrollStart.t;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            if (self.touchSelecting && (rScrollZone || lScrollZone || tScrollZone || bScrollZone)) {\n                touchScroll();\n            }\n            if (/vertical-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollTop = self.scrollBox.scrollHeight\n                    * ((self.touchPosition.y - ch - sbw) / (self.scrollBox.height - sbw - ch));\n                return;\n            }\n            if (/horizontal-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollLeft = self.scrollBox.scrollWidth\n                    * ((self.touchPosition.x - rw - sbw) / (self.scrollBox.width - sbw - rw));\n                return;\n            }\n            if (/selection-handle-/.test(self.startingCell.style)) {\n                self.touchSelect(self.currentCell, self.startingCell.style);\n                return;\n            }\n            self.scrollBox.scrollTo(self.touchScrollStart.x - self.touchDelta.x,\n                self.touchScrollStart.y - self.touchDelta.y);\n            self.draw(true);\n        };\n        self.touchEndEvents = function (e) {\n            self.zoomDeltaStart = undefined;\n            self.touchSelecting = false;\n            clearInterval(self.touchScrollTimeout);\n            clearInterval(self.touchContextTimeout);\n            clearInterval(self.calculatePPSTimer);\n            e.stopPropagation();\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n        };\n        self.touchend = function (e) {\n            if (self.dispatchEvent('touchend', {NativeEvent: e})) { return; }\n            self.zoomDeltaStart = undefined;\n            if (e.changedTouches[0]) {\n                self.touchPosition = undefined;\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = undefined;\n            }\n            if (self.zoomAltered) {\n                if (e.touches.length === 0) {\n                    self.zoomAltered = false;\n                }\n                return;\n            }\n            var dz = Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone;\n            if (isNaN(self.xPPS)) {\n                self.xPPS = 0;\n            }\n            if (isNaN(self.yPPS)) {\n                self.yPPS = 0;\n            }\n            if (isNaN(self.xPPST)) {\n                self.xPPST = 0;\n            }\n            if (isNaN(self.yPPST)) {\n                self.yPPST = 0;\n            }\n            self.touchAnimateTo.x = self.xPPS * self.attributes.touchReleaseAcceleration;\n            self.touchAnimateTo.y = self.yPPS * self.attributes.touchReleaseAcceleration;\n            self.calculatePPSTimed();\n            if (dz && !self.contextMenu) {\n                self.touchCell(self.touchStartEvent)();\n            } else if (self.animationFrames === 0\n                    && (Math.abs(self.xPPST) > self.attributes.scrollAnimationPPSThreshold\n                        || Math.abs(self.yPPST) > self.attributes.scrollAnimationPPSThreshold)\n                    && !/-scroll-/.test(self.startingCell.style)\n                    && !dz) {\n                self.stopAnimation = false;\n                self.touchEndAnimation();\n            }\n            self.touchEndEvents(e);\n        };\n        self.touchcancel = function (e) {\n            if (self.dispatchEvent('touchcancel', {NativeEvent: e})) { return; }\n            self.touchEndEvents(e);\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/touch.js\n// module id = 5\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals HTMLElement: false, Reflect: false, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self, ctor) {\n        self.scale = 1;\n        self.orders = {\n            rows: [],\n            columns: []\n        };\n        self.visibleRowHeights = [];\n        self.hasFocus = false;\n        self.activeCell = {\n            columnIndex: 0,\n            rowIndex: 0\n        };\n        self.storageName = 'canvasDataGrid';\n        self.invalidSearchExpClass = 'canvas-datagrid-invalid-search-regExp';\n        self.localStyleLibraryStorageKey = 'canvas-datagrid-user-style-library';\n        self.uniqueId = '_canvasDataGridUniqueId';\n        self.orderBy = self.uniqueId;\n        self.orderDirection = 'asc';\n        self.columnFilters = {};\n        self.filters = {};\n        self.frozenRow = 0;\n        self.frozenColumn = 0;\n        self.ellipsisCache = {};\n        self.scrollBox = {};\n        self.visibleRows = [];\n        self.sizes = {\n            rows: {},\n            columns: {},\n            trees: {}\n        };\n        self.currentFilter = function () {\n            return true;\n        };\n        self.selections = [];\n        self.hovers = {};\n        self.attributes = {};\n        self.style = {};\n        self.formatters = {};\n        self.sorters = {};\n        self.schemaHashes = {};\n        self.events = {};\n        self.uId = 0;\n        self.changes = [];\n        self.scrollIndexTop = 0;\n        self.scrollPixelTop = 0;\n        self.scrollIndexLeft = 0;\n        self.scrollPixelLeft = 0;\n        self.childGrids = {};\n        self.openChildren = {};\n        self.scrollModes = [\n            'vertical-scroll-box',\n            'vertical-scroll-top',\n            'vertical-scroll-bottom',\n            'horizontal-scroll-box',\n            'horizontal-scroll-right',\n            'horizontal-scroll-left'\n        ];\n        self.componentL1Events = {};\n        self.eventNames = ['afterdraw', 'afterrendercell', 'attributechanged', 'beforebeginedit',\n            'beforecreatecellgrid', 'beforedraw', 'beforeendedit', 'beforerendercell', 'beforerendercellgrid',\n            'beginedit', 'cellmouseout', 'cellmouseover', 'click', 'collapsetree', 'contextmenu', 'copy',\n            'datachanged', 'dblclick', 'endedit', 'expandtree', 'formatcellvalue', 'keydown', 'keypress',\n            'keyup', 'mousedown', 'mousemove', 'mouseup', 'newrow', 'ordercolumn', 'rendercell', 'rendercellgrid',\n            'renderorderbyarrow', 'rendertext', 'rendertreearrow', 'reorder', 'reordering', 'resize',\n            'resizecolumn', 'resizerow', 'schemachanged', 'scroll', 'selectionchanged', 'stylechanged',\n            'touchcancel', 'touchend', 'touchmove', 'touchstart', 'wheel'];\n        self.mouse = { x: 0, y: 0};\n        self.getSelectedData = function (expandToRow) {\n            var d = [], s = expandToRow ? self.getSchema() : self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    if (col === -1 || !s[col]) { return; }\n                    d[index][s[col].name] = self.data[index][s[col].name];\n                });\n            });\n            return d;\n        };\n        self.fillArray = function (low, high, step, def) {\n            step = step || 1;\n            var i = [], x;\n            for (x = low; x <= high; x += step) {\n                i[x] = def === undefined ? x : (typeof def === 'function' ? def(x) : def);\n            }\n            return i;\n        };\n        self.getColumnHeaderCellHeight = function () {\n            if (!self.attributes.showColumnHeaders) { return 0; }\n            return ((self.sizes.rows[-1] || self.style.columnHeaderCellHeight) * self.scale);\n        };\n        self.getRowHeaderCellWidth = function () {\n            if (!self.attributes.showRowHeaders) { return 0; }\n            return (self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth) * self.scale;\n        };\n        self.setStorageData = function () {\n            if (!self.attributes.saveAppearance || !self.attributes.name) { return; }\n            localStorage.setItem(self.storageName + '-' + self.attributes.name, JSON.stringify({\n                sizes: {\n                    rows: self.sizes.rows,\n                    columns: self.sizes.columns\n                },\n                orders: {\n                    rows: self.orders.rows,\n                    columns: self.orders.columns\n                },\n                orderBy: self.orderBy,\n                orderDirection: self.orderDirection\n            }));\n        };\n        self.getSchema = function () {\n            return self.schema || self.tempSchema;\n        };\n        self.createColumnOrders = function () {\n            var s = self.getSchema();\n            self.orders.columns = self.fillArray(0, s.length - 1);\n        };\n        self.createRowOrders = function () {\n            self.orders.rows = self.fillArray(0, self.data.length - 1);\n        };\n        self.getVisibleSchema = function () {\n            return self.getSchema().filter(function (col) {\n                return !col.hidden && col.name !== self.uniqueId;\n            });\n        };\n        self.applyDefaultValue = function (row, header) {\n            var d = header.defaultValue || '';\n            if (typeof d === 'function') {\n                d = d.apply(self.intf, [header]);\n            }\n            row[header.name] = d;\n        };\n        self.createNewRowData = function () {\n            self.newRow = {};\n            self.newRow[self.uniqueId] = self.uId;\n            self.uId += 1;\n            self.getSchema().forEach(function forEachHeader(header) {\n                self.applyDefaultValue(self.newRow, header);\n            });\n        };\n        self.getSchemaNameHash = function (key) {\n            var n = 0;\n            while (self.schemaHashes[key]) {\n                n += 1;\n                key = key + n;\n            }\n            return key;\n        };\n        self.filter = function (type) {\n            var f = self.filters[type];\n            if (!f && type !== undefined) {\n                console.warn('Cannot find filter for type %s, falling back to substring match.', type);\n                f = self.filters.string;\n            }\n            return f;\n        };\n        self.getBestGuessDataType = function (columnName) {\n            var t, x, l = self.data.length;\n            for (x = 0; x < l; x += 1) {\n                if ([null, undefined].indexOf(self.data[x][columnName]) !== -1) {\n                    t = typeof self.data[x];\n                    return t === 'object' ? 'string' : t;\n                }\n            }\n            return 'string';\n        };\n        self.drawChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].draw();\n            });\n        };\n        self.resizeChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].resize();\n            });\n        };\n        self.autoScrollZone = function (e, x, y, ctrl) {\n            var setTimer,\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight();\n            if (x > self.width - self.attributes.selectionScrollZone && x < self.width) {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y > self.height - self.attributes.selectionScrollZone && y < self.height) {\n                self.scrollBox.scrollTop += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (x - self.attributes.selectionScrollZone - rowHeaderCellWidth < 0) {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y - self.attributes.selectionScrollZone - columnHeaderCellHeight < 0) {\n                self.scrollBox.scrollTop -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (setTimer && !ctrl && self.currentCell && self.currentCell.columnIndex !== -1) {\n                self.scrollTimer = setTimeout(self.mousemove, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.refreshFromOrigialData = function () {\n            self.data = self.originalData.filter(function (row) {\n                return true;\n            });\n        };\n        self.validateColumn = function (c, s) {\n            if (!c.name) {\n                throw new Error('A column must contain at least a name.');\n            }\n            if (s.filter(function (i) { return i.name === c.name; }).length > 0) {\n                throw new Error('A column with the name '\n                    + c.name + ' already exists and cannot be added again.');\n            }\n            return true;\n        };\n        self.setDefaults = function (obj1, obj2, key, def) {\n            obj1[key] = obj2[key] === undefined ? def : obj2[key];\n        };\n        self.setAttributes = function () {\n            self.defaults.attributes.forEach(function eachAttribute(i) {\n                self.setDefaults(self.attributes, self.args, i[0], i[1]);\n            });\n        };\n        self.setStyle = function () {\n            self.defaults.styles.forEach(function eachStyle(i) {\n                self.setDefaults(self.style, self.args.style || {}, i[0], i[1]);\n            });\n        };\n        self.autosize = function (colName) {\n            self.getVisibleSchema().forEach(function (col) {\n                if (col.name === colName || colName === undefined) {\n                    self.fitColumnToValues(col.name);\n                }\n            });\n            self.fitColumnToValues('cornerCell');\n        };\n        self.dispose = function () {\n            if (!self.isChildGrid && self.canvas && self.canvas.parentNode) {\n                self.canvas.parentNode.removeChild(self.canvas);\n            }\n            self.eventParent.removeEventListener('mouseup', self.mouseup, false);\n            self.eventParent.removeEventListener('mousedown', self.mousedown, false);\n            self.eventParent.removeEventListener('dblclick', self.dblclick, false);\n            self.eventParent.removeEventListener('click', self.click, false);\n            self.eventParent.removeEventListener('mousemove', self.mousemove);\n            self.eventParent.removeEventListener('wheel', self.scrollWheel, false);\n            self.canvas.removeEventListener('contextmenu', self.contextmenu, false);\n            self.canvas.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('keypress', self.keypress, false);\n            self.controlInput.removeEventListener('keyup', self.keyup, false);\n            self.controlInput.removeEventListener('keydown', self.keydown, false);\n            window.removeEventListener('resize', self.resize);\n            if (self.observer && self.observer.disconnect) {\n                self.observer.disconnect();\n            }\n        };\n        self.tryLoadStoredOrders = function () {\n            var s;\n            if (self.storedSettings\n                    && typeof self.storedSettings.orders === 'object'\n                    && self.storedSettings.orders !== null) {\n                if (self.storedSettings.orders.rows.length >= self.data.length) {\n                    self.orders.rows = self.storedSettings.orders.rows;\n                }\n                s = self.getSchema();\n                if (self.storedSettings.orders.columns.length === s.length) {\n                    self.orders.columns = self.storedSettings.orders.columns;\n                }\n                self.orderBy = self.storedSettings.orderBy === undefined\n                    ? self.uniqueId : self.storedSettings.orderBy;\n                self.orderDirection = self.storedSettings.orderDirection === undefined\n                    ? self.uniqueId : self.storedSettings.orderDirection;\n                if (self.orderBy !== self.uniqueId && self.getHeaderByName(self.orderBy) && self.orderDirection) {\n                    self.order(self.orderBy, self.orderDirection);\n                }\n            }\n        };\n        self.getDomRoot = function () {\n            return self.shadowRoot ? self.shadowRoot.host : self.parentNode;\n        };\n        self.getFontName = function (fontStyle) {\n            return fontStyle.replace(/\\d+\\.?\\d*px/, '');\n        };\n        self.getFontHeight = function (fontStyle) {\n            return parseFloat(fontStyle, 10);\n        };\n        self.parseStyleValue = function (key) {\n            if (/Font/.test(key)) {\n                self.style[key + 'Height'] = self.getFontHeight(self.style[key]);\n                self.style[key + 'Name'] = self.getFontName(self.style[key]);\n                return;\n            }\n            // when inheriting styles from already instantiated grids, don't parse already parsed values.\n            if (key === 'moveOverlayBorderSegments' && typeof self.style[key] === 'string') {\n                self.style[key] = self.style[key].split(',')\n                    .map(function (i) { return parseInt(i, 10); });\n            }\n        };\n        self.initProp = function (propName) {\n            if (!self.args[propName]) { return; }\n            Object.keys(self.args[propName]).forEach(function (key) {\n                self[propName][key] = self.args[propName][key];\n            });\n        };\n        self.getStyleProperty = function (key) {\n            if (self.styleKeys.indexOf(key) === -1) {\n                return self.parentNodeStyle[key];\n            }\n            return self.style[key];\n        };\n        self.setStyleProperty = function (key, value, supressDrawAndEvent) {\n            if (self.styleKeys.indexOf(key) === -1) {\n                self.parentNodeStyle[key] = value;\n            } else {\n                self.style[key] = value;\n                self.parseStyleValue(key);\n            }\n            if (!supressDrawAndEvent) {\n                self.draw(true);\n                self.dispatchEvent('stylechanged', {name: 'style', value: value});\n            }\n        };\n        self.reloadStoredValues = function () {\n            if (self.attributes.name && self.attributes.saveAppearance) {\n                self.storedSettings = localStorage.getItem(self.storageName + '-' + self.attributes.name);\n                if (self.storedSettings) {\n                    try {\n                        self.storedSettings = JSON.parse(self.storedSettings);\n                    } catch (e) {\n                        console.warn('could not read settings from localStore', e);\n                        self.storedSettings = undefined;\n                    }\n                }\n                if (self.storedSettings) {\n                    if (typeof self.storedSettings.sizes === 'object'\n                            && self.storedSettings.sizes !== null) {\n                        self.sizes.rows = self.storedSettings.sizes.rows;\n                        self.sizes.columns = self.storedSettings.sizes.columns;\n                        ['trees', 'columns', 'rows'].forEach(function (i) {\n                            if (!self.sizes[i]) {\n                                self.sizes[i] = {};\n                            }\n                        });\n                    }\n                }\n            }\n        };\n        self.init = function () {\n            if (self.initialized) { return; }\n            var publicStyleKeyIntf = {};\n            self.setAttributes();\n            self.setStyle();\n            self.initScrollBox();\n            self.setDom();\n            self.type = 'canvas-datagrid';\n            self.initialized = true;\n            self.ie = /Trident/.test(window.navigator.userAgent);\n            self.edge = /Edge/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.moz = /Gecko/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.mobile = /Mobile/i.test(window.navigator.userAgent);\n            self.cursorGrab = 'grab';\n            self.cursorGrabing = 'grabbing';\n            self.cursorGrab = self.webKit ? '-webkit-grab' : self.cursorGrab;\n            self.cursorGrabing = self.moz ? '-webkit-grabbing' : self.cursorGrabbing;\n            self.pointerLockPosition = {x: 0, y: 0};\n            Object.keys(self.style).forEach(self.parseStyleValue);\n            self.intf.moveSelection = self.moveSelection;\n            self.intf.moveTo = self.moveTo;\n            self.intf.type = self.type;\n            self.intf.addEventListener = self.addEventListener;\n            self.intf.removeEventListener = self.removeEventListener;\n            self.intf.dispatchEvent = self.dispatchEvent;\n            /**\n             * Releases grid resources and removes grid elements.\n             * @memberof canvasDatagrid\n             * @name dispose\n             * @method\n             */\n            self.intf.dispose = self.dispose;\n            /**\n             * Appends the grid to another element later.  Not implemented.\n             * @memberof canvasDatagrid\n             * @name appendTo\n             * @method\n             * @param {number} el The element to append the grid to.\n             */\n            self.intf.appendTo = self.appendTo;\n            self.intf.filters = self.filters;\n            self.intf.sorters = self.sorters;\n            self.intf.autosize = self.autosize;\n            self.intf.beginEditAt = self.beginEditAt;\n            self.intf.endEdit = self.endEdit;\n            self.intf.setActiveCell = self.setActiveCell;\n            self.intf.forEachSelectedCell = self.forEachSelectedCell;\n            self.intf.scrollIntoView = self.scrollIntoView;\n            self.intf.clearChangeLog = self.clearChangeLog;\n            self.intf.gotoCell = self.gotoCell;\n            self.intf.gotoRow = self.gotoRow;\n            self.intf.getHeaderByName = self.getHeaderByName;\n            self.intf.findColumnScrollLeft = self.findColumnScrollLeft;\n            self.intf.findRowScrollTop = self.findRowScrollTop;\n            self.intf.fitColumnToValues = self.fitColumnToValues;\n            self.intf.findColumnMaxTextLength = self.findColumnMaxTextLength;\n            self.intf.disposeContextMenu = self.disposeContextMenu;\n            self.intf.getCellAt = self.getCellAt;\n            self.intf.isCellVisible = self.isCellVisible;\n            self.intf.order = self.order;\n            self.intf.draw = self.draw;\n            self.intf.selectArea = self.selectArea;\n            self.intf.clipElement = self.clipElement;\n            self.intf.getSchemaFromData = self.getSchemaFromData;\n            self.intf.setFilter = self.setFilter;\n            self.intf.selectRow = self.selectRow;\n            self.intf.parentGrid = self.parentGrid;\n            self.intf.toggleTree = self.toggleTree;\n            self.intf.expandTree = self.expandTree;\n            self.intf.collapseTree = self.collapseTree;\n            self.intf.canvas = self.canvas;\n            self.intf.context = self.ctx;\n            self.intf.insertRow = self.insertRow;\n            self.intf.deleteRow = self.deleteRow;\n            self.intf.addRow = self.addRow;\n            self.intf.insertColumn = self.insertColumn;\n            self.intf.deleteColumn = self.deleteColumn;\n            self.intf.addColumn = self.addColumn;\n            self.intf.getClippingRect = self.getClippingRect;\n            self.intf.setRowHeight = self.setRowHeight;\n            self.intf.setColumnWidth = self.setColumnWidth;\n            self.intf.resetColumnWidths = self.resetColumnWidths;\n            self.intf.resetRowHeights = self.resetRowHeights;\n            self.intf.resize = self.resize;\n            self.intf.selectColumn = self.selectColumn;\n            self.intf.selectRow = self.selectRow;\n            self.intf.selectAll = self.selectAll;\n            self.intf.selectNone = self.selectNone;\n            self.intf.drawChildGrids = self.drawChildGrids;\n            self.intf.assertPxColor = self.assertPxColor;\n            self.intf.clearPxColorAssertions = self.clearPxColorAssertions;\n            self.intf.integerToAlpha = self.integerToAlpha;\n            self.intf.copy = self.copy;\n            self.intf.setStyleProperty = self.setStyleProperty;\n            Object.defineProperty(self.intf, 'defaults', {\n                get: function () {\n                    return {\n                        styles: self.defaults.styles.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {}),\n                        attributes: self.defaults.attributes.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {})\n                    };\n                }\n            });\n            self.styleKeys = Object.keys(self.intf.defaults.styles);\n            self.DOMStyles = window.getComputedStyle(document.body, null);\n            self.intf.setStyleProperty('width', '100%');\n            self.intf.setStyleProperty('height', '100%');\n            Object.keys(self.DOMStyles).concat(Object.keys(self.style)).forEach(function (key) {\n                // unless this line is here, Object.keys() will not work on <instance>.style\n                publicStyleKeyIntf[key] = undefined;\n                Object.defineProperty(publicStyleKeyIntf, key, {\n                    get: function () {\n                        return self.getStyleProperty(key);\n                    },\n                    set: function (value) {\n                        self.setStyleProperty(key, value);\n                    }\n                });\n            });\n            Object.defineProperty(self.intf, 'shadowRoot', {\n                get: function () {\n                    return self.shadowRoot;\n                }\n            });\n            Object.defineProperty(self.intf, 'activeCell', {\n                get: function () {\n                    return self.activeCell;\n                }\n            });\n            Object.defineProperty(self.intf, 'hasFocus', {\n                get: function () {\n                    return self.hasFocus;\n                }\n            });\n            Object.defineProperty(self.intf, 'style', {\n                get: function () {\n                    return publicStyleKeyIntf;\n                },\n                set: function (valueObject) {\n                    Object.keys(valueObject).forEach(function (key) {\n                        self.setStyleProperty(key, valueObject[key], true);\n                    });\n                    self.draw(true);\n                    self.dispatchEvent('stylechanged', {name: 'style', value: valueObject});\n                }\n            });\n            Object.defineProperty(self.intf, 'attributes', { value: {}});\n            Object.keys(self.attributes).forEach(function (key) {\n                Object.defineProperty(self.intf.attributes, key, {\n                    get: function () {\n                        return self.attributes[key];\n                    },\n                    set: function (value) {\n                        self.attributes[key] = value;\n                        if (key === 'name') {\n                            self.reloadStoredValues();\n                            self.tryLoadStoredOrders();\n                        }\n                        self.draw(true);\n                        self.dispatchEvent('attributechanged', {name: key, value: value[key]});\n                    }\n                });\n            });\n            self.filters.string = function (value, filterFor) {\n                value = String(value);\n                var filterRegExp,\n                    regEnd = /\\/(i|g|m)*$/,\n                    pattern = regEnd.exec(filterFor),\n                    flags = pattern ? pattern[0].substring(1) : '',\n                    flagLength = flags.length;\n                self.invalidFilterRegEx = undefined;\n                if (filterFor.substring(0, 1) === '/' && pattern) {\n                    try {\n                        filterRegExp = new RegExp(filterFor.substring(1, filterFor.length - (flagLength + 1)), flags);\n                    } catch (e) {\n                        self.invalidFilterRegEx = e;\n                        return;\n                    }\n                    return filterRegExp.test(value);\n                }\n                return value.toString ? value.toString().toLocaleUpperCase()\n                    .indexOf(filterFor.toLocaleUpperCase()) !== -1 : false;\n            };\n            self.filters.number = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                return value === filterFor;\n            };\n            ['formatters', 'filters', 'sorters'].forEach(self.initProp);\n            self.reloadStoredValues();\n            if (self.args.data) {\n                self.intf.data = self.args.data;\n            }\n            if (!self.data) {\n                self.intf.data = [];\n            }\n            if (self.args.schema) {\n                self.intf.schema = self.args.schema;\n            }\n            if (self.isChildGrid) {\n                requestAnimationFrame(function () { self.resize(true); });\n            } else {\n                self.resize(true);\n            }\n            return self;\n        };\n        /**\n         * Removes focus from the grid.\n         * @memberof canvasDatagrid\n         * @name blur\n         * @method\n         */\n        self.intf.blur = function (e) {\n            self.hasFocus = false;\n        };\n        /**\n         * Focuses on the grid.\n         * @memberof canvasDatagrid\n         * @name focus\n         * @method\n         */\n        self.intf.focus = function () {\n            self.hasFocus = true;\n            self.controlInput.focus();\n        };\n        Object.defineProperty(self.intf, 'height', {\n            get: function () {\n                if (self.shadowRoot) {\n                    return self.shadowRoot.height;\n                }\n                return self.parentNode.height;\n            },\n            set: function (value) {\n                if (self.shadowRoot) {\n                    self.shadowRoot.height = value;\n                } else {\n                    self.parentNode.height = value;\n                }\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'width', {\n            get: function () {\n                if (self.shadowRoot) {\n                    return self.shadowRoot.width;\n                }\n                return self.parentNode.width;\n            },\n            set: function (value) {\n                if (self.shadowRoot) {\n                    self.shadowRoot.width = value;\n                } else {\n                    self.parentNode.width = value;\n                }\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRowHeights', {\n            get: function () {\n                return self.visibleRowHeights;\n            }\n        });\n        Object.defineProperty(self.intf, 'openChildren', {\n            get: function () {\n                return self.openChildren;\n            }\n        });\n        Object.defineProperty(self.intf, 'childGrids', {\n            get: function () {\n                return Object.keys(self.childGrids).map(function (gridId) {\n                    return self.childGrids[gridId];\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'isChildGrid', {\n            get: function () {\n                return self.isChildGrid;\n            }\n        });\n        Object.defineProperty(self.intf, 'parentNode', {\n            get: function () {\n                return self.parentNode;\n            },\n            set: function (value) {\n                if (!self.isChildGrid) {\n                    throw new TypeError('Cannot set property parentNode which has only a getter');\n                }\n                self.parentNode = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetParent', {\n            get: function () {\n                return self.parentNode;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetLeft', {\n            get: function () {\n                return self.parentNode.offsetLeft;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetTop', {\n            get: function () {\n                return self.parentNode.offsetTop;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollHeight', {\n            get: function () {\n                return self.scrollBox.scrollHeight;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollWidth', {\n            get: function () {\n                return self.scrollBox.scrollWidth;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollTop', {\n            get: function () {\n                return self.scrollBox.scrollTop;\n            },\n            set: function (value) {\n                self.scrollBox.scrollTop = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollLeft', {\n            get: function () {\n                return self.scrollBox.scrollLeft;\n            },\n            set: function (value) {\n                self.scrollBox.scrollLeft = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'sizes', {\n            get: function () {\n                return self.sizes;\n            }\n        });\n        Object.defineProperty(self.intf, 'input', {\n            get: function () {\n                return self.input;\n            }\n        });\n        Object.defineProperty(self.intf, 'controlInput', {\n            get: function () {\n                return self.controlInput;\n            }\n        });\n        Object.defineProperty(self.intf, 'currentCell', {\n            get: function () {\n                return self.currentCell;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleCells', {\n            get: function () {\n                return self.visibleCells;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRows', {\n            get: function () {\n                return self.visibleRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'selections', {\n            get: function () {\n                return self.selections;\n            }\n        });\n        Object.defineProperty(self.intf, 'dragMode', {\n            get: function () {\n                return self.dragMode;\n            }\n        });\n        Object.defineProperty(self.intf, 'changes', {\n            get: function () {\n                return self.changes;\n            }\n        });\n        self.intf.formatters = self.formatters;\n        self.normalizeDataset = function (data, callback) {\n            var i, d, max, syncFnInvoked;\n            if (data === null || data === '' || data === undefined) {\n                return callback([]);\n            }\n            if (typeof data === 'string'\n                    || typeof data === 'number'\n                    || typeof data === 'boolean') {\n                data = [{'0': data}];\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if ((!Array.isArray(data[0]) && typeof data[0] === 'object' && data[0] !== null)\n                            || (Array.isArray(data) && data.length === 0)) {\n                return callback(data);\n            }\n            if (typeof data === 'function') {\n                i = data.apply(self.intf, [function (d) {\n                    if (syncFnInvoked) {\n                        console.warn('Detected a callback to the data setter function after the same function already returned a value synchronously.');\n                    }\n                    self.normalizeDataset(d, callback);\n                }]);\n                if (i) {\n                    syncFnInvoked = true;\n                    self.normalizeDataset(i, callback);\n                }\n                return;\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if (Array.isArray(data)) {\n                if (!Array.isArray(data[0])) {\n                    //array of something?  throw it all into 1 row!\n                    data = [data];\n                }\n                // find the longest length\n                max = 0;\n                d = [];\n                data.forEach(function (row) {\n                    max = Math.max(max, row.length);\n                });\n                // map against length indexes\n                data.forEach(function (row, index) {\n                    var x;\n                    d[index] = {};\n                    for (x = 0; x < max; x += 1) {\n                        d[index][x] = row[x];\n                    }\n                });\n                return callback(d);\n            }\n            throw new Error('Unsupported data type.  Must be an array of arrays or an array of objects, function or string.');\n        };\n        self.eventNames.forEach(function (eventName) {\n            Object.defineProperty(self.intf, 'on' + eventName, {\n                get: function () {\n                    return self.componentL1Events[eventName];\n                },\n                set: function (value) {\n                    self.events[eventName] = [];\n                    self.componentL1Events[eventName] = value;\n                    if (!value) { return; }\n                    self.addEventListener(eventName, value);\n                }\n            });\n        });\n        Object.defineProperty(self.intf, 'frozenRow', {\n            get: function () {\n                return self.frozenRow;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.visibleRows.length > val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible rows.');\n                }\n                self.frozenRow = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'frozenColumn', {\n            get: function () {\n                return self.frozenColumn;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.getVisibleSchema().length > val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible columns.');\n                }\n                self.frozenColumn = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollIndexRect', {\n            get: function () {\n                return {\n                    top: self.scrollIndexTop,\n                    right: self.scrollIndexRight,\n                    bottom: self.scrollIndexBottom,\n                    left: self.scrollIndexLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollPixelRect', {\n            get: function () {\n                return {\n                    top: self.scrollPixelTop,\n                    right: self.scrollPixelRight,\n                    bottom: self.scrollPixelBottom,\n                    left: self.scrollPixelLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'selectionBounds', {\n            get: function () {\n                return self.getSelectionBounds();\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedRows', {\n            get: function () {\n                return self.getSelectedData(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedCells', {\n            get: function () {\n                return self.getSelectedData();\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleSchema', {\n            get: function () {\n                return self.getVisibleSchema().map(function eachDataRow(col) {\n                    return col;\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'ctx', {\n            get: function () {\n                return self.ctx;\n            }\n        });\n        Object.defineProperty(self.intf, 'schema', {\n            get: function schemaGetter() {\n                return self.getSchema();\n            },\n            set: function schemaSetter(value) {\n                if (!Array.isArray(value) || typeof value[0] !== 'object') {\n                    throw new Error('Schema must be an array of objects.');\n                }\n                if (value[0].name === undefined) {\n                    throw new Error('Expected schema to contain an object with at least a name property.');\n                }\n                self.schema = value.map(function eachSchemaColumn(column, index) {\n                    column.width = column.width || self.style.cellWidth;\n                    column[self.uniqueId] = self.getSchemaNameHash(column.name);\n                    column.filter = column.filter || self.filter(column.type);\n                    column.type = column.type || 'string';\n                    column.index = index;\n                    column.columnIndex = index;\n                    column.rowIndex = -1;\n                    return column;\n                });\n                self.tempSchema = undefined;\n                self.createNewRowData();\n                self.createColumnOrders();\n                self.tryLoadStoredOrders();\n                self.resize(true);\n                self.dispatchEvent('schemachanged', {schema: self.schema});\n            }\n        });\n        Object.defineProperty(self.intf, 'data', {\n            get: function dataGetter() {\n                return self.data.map(function (row) {\n                    delete row[self.uniqueId];\n                    return row;\n                });\n            },\n            set: function dataSetter(value) {\n                self.normalizeDataset(value, function (d) {\n                    self.originalData = d.map(function eachDataRow(row) {\n                        row[self.uniqueId] = self.uId;\n                        self.uId += 1;\n                        return row;\n                    });\n                    self.changes = [];\n                    //TODO apply filter to incoming dataset\n                    self.data = self.originalData;\n                    if (!self.schema) {\n                        self.tempSchema = self.getSchemaFromData();\n                    }\n                    if (!self.schema && self.data.length === 0) {\n                        self.tempSchema = [{name: ''}];\n                        self.tempSchema[0][self.uniqueId] = self.getSchemaNameHash('');\n                    }\n                    if (self.tempSchema && !self.schema) {\n                        self.createColumnOrders();\n                        self.tryLoadStoredOrders();\n                        self.dispatchEvent('schemachanged', {schema: self.tempSchema});\n                    }\n                    self.createNewRowData();\n                    if (self.attributes.autoResizeColumns && self.data.length > 0\n                            && self.storedSettings === undefined) {\n                        self.autosize();\n                    }\n                    self.fitColumnToValues('cornerCell', true);\n                    self.resize(true);\n                    self.createRowOrders();\n                    self.tryLoadStoredOrders();\n                    self.dispatchEvent('datachanged', {data: self.data});\n                });\n            }\n        });\n        self.initScrollBox = function () {\n            var sHeight = 0,\n                sWidth = 0,\n                scrollTop = 0,\n                scrollLeft = 0,\n                scrollHeight = 0,\n                scrollWidth = 0,\n                scrollBoxHeight = 20,\n                scrollBoxWidth = 20;\n            function setScrollTop(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollTop value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollHeight) {\n                    value = scrollHeight;\n                }\n                if (scrollHeight < 0) {\n                    value = 0;\n                }\n                scrollTop = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            function setScrollLeft(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollLeft value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollWidth) {\n                    value = scrollWidth;\n                }\n                if (scrollWidth < 0) {\n                    value = 0;\n                }\n                scrollLeft = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            self.scrollBox.toString = function () {\n                return '{\"width\": ' + scrollWidth\n                    + ', \"height\": ' + scrollHeight\n                    + ', \"left\": ' + scrollLeft\n                    + ', \"top\": ' + scrollTop + '}';\n            };\n            self.scrollBox.scrollTo = function (x, y, supressDrawEvent) {\n                setScrollLeft(x, true);\n                setScrollTop(y, supressDrawEvent);\n            };\n            Object.defineProperty(self.scrollBox, 'scrollBoxHeight', {\n                get: function () {\n                    return scrollBoxHeight;\n                },\n                set: function (value) {\n                    scrollBoxHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollBoxWidth', {\n                get: function () {\n                    return scrollBoxWidth;\n                },\n                set: function (value) {\n                    scrollBoxWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'height', {\n                get: function () {\n                    return sHeight;\n                },\n                set: function (value) {\n                    if (scrollHeight < value) {\n                        scrollTop = 0;\n                    }\n                    sHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'width', {\n                get: function () {\n                    return sWidth;\n                },\n                set: function (value) {\n                    sWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollTop', {\n                get: function () {\n                    return scrollTop;\n                },\n                set: setScrollTop\n            });\n            Object.defineProperty(self.scrollBox, 'scrollLeft', {\n                get: function () {\n                    return scrollLeft;\n                },\n                set: setScrollLeft\n            });\n            Object.defineProperty(self.scrollBox, 'scrollHeight', {\n                get: function () {\n                    return scrollHeight;\n                },\n                set: function (value) {\n                    if (scrollTop > value) {\n                        scrollTop = Math.max(value, 0);\n                    }\n                    if (scrollHeight < sHeight) {\n                        scrollTop = 0;\n                    }\n                    scrollHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollWidth', {\n                get: function () {\n                    return scrollWidth;\n                },\n                set: function (value) {\n                    if (scrollLeft > value) {\n                        scrollLeft = Math.max(value, 0);\n                    }\n                    scrollWidth = value;\n                }\n            });\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/intf.js\n// module id = 6\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false, Event: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var zIndexTop = 9000, hoverScrollTimeout, autoCompleteContext;\n        function applyContextItemStyle(contextItemContainer) {\n            self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item' + (self.mobile ? '-mobile' : ''));\n            contextItemContainer.addEventListener('mouseover', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n            });\n            contextItemContainer.addEventListener('mouseout', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n            });\n        }\n        function createContextMenu(ev, pos, items, parentContextMenu) {\n            var container = document.createElement('div'),\n                upArrow = document.createElement('div'),\n                downArrow = document.createElement('div'),\n                children = [],\n                selectedIndex = -1,\n                intf = {},\n                rect;\n            if (!Array.isArray(items)) { throw new Error('createContextMenu expects an array.'); }\n            function createItems() {\n                items.forEach(function (item) {\n                    var contextItemContainer = document.createElement('div'),\n                        childMenuArrow;\n                    function removeChildContext(e) {\n                        if (e.relatedTarget === container\n                                || item.contextMenu.container === e.relatedTarget\n                                || childMenuArrow === e.relatedTarget\n                                || (contextItemContainer === e.relatedTarget)\n                                || item.contextMenu.container.contains(e.relatedTarget)\n                                ) { return; }\n                        item.contextMenu.dispose();\n                        children.splice(children.indexOf(item.contextMenu), 1);\n                        item.contextMenu = undefined;\n                        contextItemContainer.removeEventListener('mouseout', removeChildContext);\n                        container.removeEventListener('mouseout', removeChildContext);\n                        contextItemContainer.setAttribute('contextOpen', '0');\n                        contextItemContainer.setAttribute('opening', '0');\n                    }\n                    function contextAddCallback(items) {\n                        // check yet again if the user hasn't moved off\n                        if (contextItemContainer.getAttribute('opening') !== '1' ||\n                                contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        var cPos = contextItemContainer.getBoundingClientRect();\n                        cPos = {\n                            left: cPos.left + self.style.childContextMenuMarginLeft + container.offsetWidth,\n                            top: cPos.top + self.style.childContextMenuMarginTop,\n                            bottom: cPos.bottom,\n                            right: cPos.right\n                        };\n                        item.contextMenu = createContextMenu(ev, cPos, items, intf);\n                        contextItemContainer.setAttribute('contextOpen', '1');\n                        contextItemContainer.addEventListener('mouseout', removeChildContext);\n                        container.addEventListener('mouseout', removeChildContext);\n                        children.push(item.contextMenu);\n                    }\n                    function createChildContext() {\n                        var i;\n                        if (contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        contextItemContainer.setAttribute('opening', '1');\n                        if (typeof item.items === 'function') {\n                            i  = item.items.apply(intf, [function (items) {\n                                contextAddCallback(items);\n                            }]);\n                            if (i !== undefined && Array.isArray(i)) {\n                                contextAddCallback(i);\n                            }\n                            return;\n                        }\n                        contextAddCallback(item.items);\n                    }\n                    function addItem(item) {\n                        function addContent(content) {\n                            if (content === null) { return; }\n                            if (typeof content === 'function') {\n                                return addContent(content(ev));\n                            }\n                            if (typeof content === 'object') {\n                                contextItemContainer.appendChild(content);\n                                return;\n                            }\n                            applyContextItemStyle(contextItemContainer);\n                            contextItemContainer.innerHTML = content;\n                            return;\n                        }\n                        addContent(item.title);\n                        item.contextItemContainer = contextItemContainer;\n                        if ((item.items && item.items.length > 0) || typeof item.items === 'function') {\n                            childMenuArrow = document.createElement('div');\n                            self.createInlineStyle(childMenuArrow, 'canvas-datagrid-context-child-arrow');\n                            childMenuArrow.innerHTML = self.style.childContextMenuArrowHTML;\n                            contextItemContainer.appendChild(childMenuArrow);\n                            contextItemContainer.addEventListener('mouseover', createChildContext);\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                contextItemContainer.setAttribute('opening', '0');\n                            });\n                        }\n                        if (item.click) {\n                            contextItemContainer.addEventListener('click', function (ev) {\n                                item.click.apply(self, [ev]);\n                            });\n                        }\n                    }\n                    addItem(item);\n                    container.appendChild(contextItemContainer);\n                });\n            }\n            function clickIndex(idx) {\n                items[idx].contextItemContainer.dispatchEvent(new Event('click'));\n            }\n            function checkArrowVisibility() {\n                if (container.scrollTop > 0) {\n                    self.parentDOMNode.appendChild(upArrow);\n                } else if (upArrow.parentNode) {\n                    upArrow.parentNode.removeChild(upArrow);\n                }\n                if (container.scrollTop >= container.scrollHeight - container.offsetHeight && downArrow.parentNode) {\n                    downArrow.parentNode.removeChild(downArrow);\n                } else if (container.scrollHeight - container.offsetHeight > 0\n                        && !(container.scrollTop >= container.scrollHeight - container.offsetHeight)) {\n                    self.parentDOMNode.appendChild(downArrow);\n                }\n            }\n            function startHoverScroll(type) {\n                return function t() {\n                    var a = self.attributes.contextHoverScrollAmount;\n                    if (type === 'up' && container.scrollTop === 0) { return; }\n                    if (type === 'down' && container.scrollTop === container.scrollHeight) { return; }\n                    container.scrollTop += (type === 'up' ? -a : a);\n                    hoverScrollTimeout = setTimeout(t, self.attributes.contextHoverScrollRateMs, type);\n                };\n            }\n            function endHoverScroll(type) {\n                return function () {\n                    clearTimeout(hoverScrollTimeout);\n                };\n            }\n            function init() {\n                var loc = {},\n                    s = self.scrollOffset(self.canvas);\n                createItems();\n                self.createInlineStyle(container, 'canvas-datagrid-context-menu' + (self.mobile ? '-mobile' : ''));\n                loc.x = pos.left - s.left;\n                loc.y = pos.top - s.top;\n                loc.height = 0;\n                zIndexTop += 1;\n                container.style.position = 'absolute';\n                upArrow.style.color = self.style.contextMenuArrowColor;\n                downArrow.style.color = self.style.contextMenuArrowColor;\n                [upArrow, downArrow].forEach(function (el) {\n                    el.style.textAlign = 'center';\n                    el.style.position = 'absolute';\n                    el.style.zIndex = zIndexTop + 1;\n                });\n                container.style.zIndex = zIndexTop;\n                if (parentContextMenu && parentContextMenu.inputDropdown) {\n                    container.style.maxHeight = window.innerHeight - loc.y - self.style.autocompleteBottomMargin + 'px';\n                    container.style.minWidth = pos.width + 'px';\n                    loc.y += pos.height;\n                }\n                if (self.mobile) {\n                    container.style.width = pos.width + 'px';\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                container.addEventListener('scroll', checkArrowVisibility);\n                container.addEventListener('wheel', function (e) {\n                    if (self.hasFocus) {\n                        container.scrollTop += e.deltaY;\n                        container.scrollLeft += e.deltaX;\n                    }\n                    checkArrowVisibility();\n                });\n                upArrow.innerHTML = self.style.contextMenuArrowUpHTML;\n                downArrow.innerHTML = self.style.contextMenuArrowDownHTML;\n                container.appendChild(upArrow);\n                document.body.appendChild(downArrow);\n                document.body.appendChild(container);\n                rect = container.getBoundingClientRect();\n                if (rect.bottom > window.innerHeight && !(parentContextMenu && parentContextMenu.inputDropdown)) {\n                    loc.y = window.innerHeight - container.offsetHeight;\n                    if (loc.y < 0) { loc.y = 0; }\n                    if (container.offsetHeight > window.innerHeight - self.style.contextMenuWindowMargin) {\n                        container.style.height = window.innerHeight - self.style.contextMenuWindowMargin + 'px';\n                        loc.y += self.style.contextMenuWindowMargin * 0.5;\n                    }\n                }\n                if (rect.right > window.innerWidth) {\n                    if (parentContextMenu && parentContextMenu.container) {\n                        loc.x = parentContextMenu.container.offsetLeft - container.offsetWidth;\n                    } else {\n                        loc.x = window.innerWidth - container.offsetWidth;\n                    }\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                rect = container.getBoundingClientRect();\n                upArrow.style.top = rect.top + 'px';\n                downArrow.style.top = rect.top + rect.height - downArrow.offsetHeight + 'px';\n                upArrow.style.left = rect.left + 'px';\n                downArrow.style.left = rect.left + 'px';\n                downArrow.style.width = container.offsetWidth + 'px';\n                upArrow.style.width = container.offsetWidth + 'px';\n                downArrow.addEventListener('mouseover', startHoverScroll('down'));\n                downArrow.addEventListener('mouseout', endHoverScroll('down'));\n                upArrow.addEventListener('mouseover', startHoverScroll('up'));\n                upArrow.addEventListener('mouseout', endHoverScroll('up'));\n                checkArrowVisibility();\n            }\n            intf.parentGrid = self.intf;\n            intf.parentContextMenu = parentContextMenu;\n            intf.container = container;\n            init();\n            intf.clickIndex = clickIndex;\n            intf.rect = rect;\n            intf.items = items;\n            intf.upArrow = upArrow;\n            intf.downArrow = downArrow;\n            intf.dispose = function () {\n                clearTimeout(hoverScrollTimeout);\n                children.forEach(function (c) {\n                    c.dispose();\n                });\n                [downArrow, upArrow, container].forEach(function (el) {\n                    if (el.parentNode) { el.parentNode.removeChild(el); }\n                });\n            };\n            Object.defineProperty(intf, 'selectedIndex', {\n                get: function () {\n                    return selectedIndex;\n                },\n                set: function (value) {\n                    if (typeof value !== 'number' || isNaN(value || !isFinite(value))) {\n                        throw new Error('Context menu selected index must be a sane number.');\n                    }\n                    selectedIndex = value;\n                    if (selectedIndex > items.length - 1) {\n                        selectedIndex = items.length - 1;\n                    }\n                    if (selectedIndex < 0) {\n                        selectedIndex = 0;\n                    }\n                    items.forEach(function (item, index) {\n                        if (index === selectedIndex) {\n                            return self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                        }\n                        self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item');\n                    });\n                }\n            });\n            return intf;\n        }\n        function createFilterContextMenuItems(e) {\n            var filterContainer = document.createElement('div'),\n                filterLabel = document.createElement('div'),\n                filterAutoCompleteButton = document.createElement('button'),\n                filterInput = document.createElement('input'),\n                n = e.cell && e.cell.header ? e.cell.header.title || e.cell.header.name : '',\n                autoCompleteItems,\n                iRect;\n            function checkRegExpErrorState() {\n                filterInput.style.background = self.style.contextFilterInputBackground;\n                filterInput.style.color = self.style.contextFilterInputColor;\n                if (self.invalidFilterRegEx) {\n                    filterInput.style.background = self.style.contextFilterInvalidRegExpBackground;\n                    filterInput.style.color = self.style.contextFilterInvalidRegExpColor;\n                }\n            }\n            function fillAutoComplete() {\n                var count = 0;\n                autoCompleteItems = {};\n                self.data.forEach(function (row) {\n                    var value = row[e.cell.header.name];\n                    if (autoCompleteItems[value] || count > self.attributes.maxAutoCompleteItems) { return; }\n                    count += 1;\n                    autoCompleteItems[value] = {\n                        title: self.formatters[e.cell.header.type || 'string']({ cell: { value: value }}),\n                        click: function (e) {\n                            filterInput.value = value;\n                            e.stopPropagation();\n                            filterInput.dispatchEvent(new Event('keyup'));\n                            self.disposeAutocomplete();\n                            return;\n                        }\n                    };\n                });\n                autoCompleteItems = Object.keys(autoCompleteItems).map(function (key) {\n                    return autoCompleteItems[key];\n                });\n            }\n            function createAutoCompleteContext(ev) {\n                if (ev && [40, 38, 13, 9].indexOf(ev.keyCode) !== -1) { return; }\n                fillAutoComplete();\n                iRect = filterInput.getBoundingClientRect();\n                if (autoCompleteContext) {\n                    autoCompleteContext.dispose();\n                    autoCompleteContext = undefined;\n                }\n                autoCompleteContext = createContextMenu(e, {\n                    left: iRect.left,\n                    top: iRect.top,\n                    right: iRect.right,\n                    bottom: iRect.bottom,\n                    height: iRect.height,\n                    width: iRect.width\n                }, autoCompleteItems, {inputDropdown: true});\n                autoCompleteContext.selectedIndex = 0;\n            }\n            self.createInlineStyle(filterLabel, 'canvas-datagrid-context-menu-label');\n            self.createInlineStyle(filterAutoCompleteButton, 'canvas-datagrid-context-menu-filter-button');\n            self.createInlineStyle(filterInput, 'canvas-datagrid-context-menu-filter-input');\n            checkRegExpErrorState();\n            filterInput.onclick = self.disposeAutocomplete;\n            filterInput.addEventListener('keydown', function (e) {\n                //down\n                if (e.keyCode === 40) {\n                    autoCompleteContext.selectedIndex += 1;\n                }\n                //up\n                if (e.keyCode === 38) {\n                    autoCompleteContext.selectedIndex -= 1;\n                }\n                //enter\n                if (e.keyCode === 13) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    self.disposeContextMenu();\n                }\n                //tab\n                if (e.keyCode === 9) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    e.preventDefault();\n                }\n                //esc\n                if (e.keyCode === 27) {\n                    self.disposeContextMenu();\n                }\n            });\n            filterInput.addEventListener('keyup', function () {\n                self.setFilter(e.cell.header.name, filterInput.value);\n            });\n            filterInput.addEventListener('keyup', createAutoCompleteContext);\n            ['focus', 'blur', 'keydown', 'keyup', 'change'].forEach(function (en) {\n                filterInput.addEventListener(en, checkRegExpErrorState);\n            });\n            filterInput.value = e.cell.header ? self.columnFilters[e.cell.header.name] || '' : '';\n            filterLabel.innerHTML = self.attributes.filterOptionText.replace(/%s/g, n);\n            filterAutoCompleteButton.onclick = function () {\n                if (autoCompleteContext) {\n                    return self.disposeAutocomplete();\n                }\n                createAutoCompleteContext();\n            };\n            filterAutoCompleteButton.innerHTML = self.style.contextFilterButtonHTML;\n            filterContainer.addEventListener('click', function (e) {\n                return e.stopPropagation();\n            });\n            filterContainer.appendChild(filterLabel);\n            filterContainer.appendChild(filterInput);\n            filterContainer.appendChild(filterAutoCompleteButton);\n            e.items.push({\n                title: filterContainer\n            });\n            if (Object.keys(self.columnFilters).length) {\n                Object.keys(self.columnFilters).forEach(function (cf) {\n                    var h = self.getHeaderByName(cf);\n                    e.items.push({\n                        title: self.attributes.removeFilterOptionText.replace(/%s/g, h.title || h.name),\n                        click: function removeFilterClick(e) {\n                            e.preventDefault();\n                            self.setFilter(cf, '');\n                            self.controlInput.focus();\n                        }\n                    });\n                });\n            }\n        }\n        function addDefaultContextMenuItem(e) {\n            var isNormalCell = !(e.cell.isBackground || e.cell.isHeaderCellCap\n                    || e.cell.isScrollBar || e.cell.isCorner || e.cell.isRowHeader)\n                    && e.cell.header;\n            if (self.attributes.showFilter && isNormalCell) {\n                createFilterContextMenuItems(e);\n            }\n            if (self.attributes.showCopy\n                    && self.selections.reduce(function (p, r) {\n                        return p + r.length;\n                    }, 0) > 0) {\n                e.items.push({\n                    title: self.attributes.copyText,\n                    click: function () {\n                        document.execCommand('copy');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.showPaste && self.clipBoardData) {\n                e.items.push({\n                    title: self.attributes.pasteText,\n                    click: function () {\n                        self.paste(self.clipBoardData, e.cell.columnIndex, e.cell.rowIndex);\n                        self.draw();\n                    }\n                });\n            }\n            if (self.attributes.showColumnSelector) {\n                e.items.push({\n                    title: self.attributes.columnSelectorText,\n                    items: function () {\n                        var d = [];\n                        self.getSchema().forEach(function (column) {\n                            if (column.name === self.uniqueId) { return; }\n                            function toggleColumnVisibility(e) {\n                                column.hidden = !column.hidden;\n                                e.preventDefault();\n                                self.stopPropagation(e);\n                                self.disposeContextMenu();\n                                self.resize(true);\n                            }\n                            var el = document.createElement('div');\n                            applyContextItemStyle(el);\n                            el.addEventListener('touchstart', toggleColumnVisibility);\n                            el.addEventListener('click', toggleColumnVisibility);\n                            el.innerHTML = (column.hidden ? self.attributes.columnSelectorHiddenText\n                                    : self.attributes.columnSelectorVisibleText)\n                                    + (column.title || column.name);\n                            d.push({\n                                title: el\n                            });\n                        });\n                        return d;\n                    }\n                });\n                if (e.cell && e.cell.header) {\n                    e.items.push({\n                        title: self.attributes.hideColumnText\n                            .replace(/%s/ig, e.cell.header.title || e.cell.header.name),\n                        click: function (ev) {\n                            e.cell.header.hidden = true;\n                            ev.preventDefault();\n                            self.stopPropagation(ev);\n                            self.disposeContextMenu();\n                            setTimeout(function () { self.resize(true); }, 10);\n                        }\n                    });\n                }\n            }\n            if (self.attributes.saveAppearance && self.attributes.showClearSettingsOption\n                    && (Object.keys(self.sizes.rows).length > 0\n                        || Object.keys(self.sizes.columns).length > 0)) {\n                e.items.push({\n                    title: self.attributes.clearSettingsOptionText,\n                    click: function (e) {\n                        e.preventDefault();\n                        self.sizes.rows = {};\n                        self.sizes.columns = {};\n                        self.createRowOrders();\n                        self.createColumnOrders();\n                        self.storedSettings = undefined;\n                        self.dispatchEvent('resizecolumn', {columnWidth: self.style.cellWidth});\n                        self.dispatchEvent('resizerow', {cellHeight: self.style.cellHeight});\n                        self.setStorageData();\n                        self.resize(true);\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.allowSorting && self.attributes.showOrderByOption && isNormalCell) {\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextAsc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'asc');\n                        self.controlInput.focus();\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextDesc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'desc');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n        }\n        self.disposeAutocomplete = function () {\n            if (autoCompleteContext) {\n                autoCompleteContext.dispose();\n                autoCompleteContext = undefined;\n            }\n        };\n        self.disposeContextMenu = function () {\n            document.removeEventListener('click', self.disposeContextMenu);\n            zIndexTop = 9000;\n            self.disposeAutocomplete();\n            if (self.contextMenu) {\n                self.contextMenu.dispose();\n            }\n            self.contextMenu = undefined;\n        };\n        self.contextmenuEvent = function (e, overridePos) {\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            function createDiposeEvent() {\n                requestAnimationFrame(function () {\n                    document.addEventListener('click', self.disposeContextMenu);\n                    document.removeEventListener('mouseup', createDiposeEvent);\n                });\n            }\n            var contextPosition,\n                items = [],\n                pos = overridePos || self.getLayerPos(e),\n                ev = {\n                    NativeEvent: e,\n                    cell: self.getCellAt(pos.x, pos.y),\n                    items: items\n                },\n                st,\n                sl;\n            if (!ev.cell.isGrid) {\n                addDefaultContextMenuItem(ev);\n            }\n            if (document.scrollingElement) {\n                sl = document.scrollingElement.scrollLeft;\n                st = document.scrollingElement.scrollTop;\n            }\n            if (self.dispatchEvent('contextmenu', ev)) {\n                return;\n            }\n            if (!ev.cell.isGrid) {\n                if (self.contextMenu) {\n                    self.disposeContextMenu();\n                }\n                contextPosition = {\n                    left: pos.x + sl + pos.rect.left + self.style.contextMenuMarginLeft + self.canvasOffsetLeft,\n                    top: pos.y + st + pos.rect.top + self.style.contextMenuMarginTop + self.canvasOffsetTop,\n                    right: ev.cell.width + ev.cell.x + pos.rect.left,\n                    bottom: ev.cell.height + ev.cell.y + pos.rect.top,\n                    height: ev.cell.height,\n                    width: ev.cell.width\n                };\n                if (self.mobile) {\n                    contextPosition.left = self.style.mobileContextMenuMargin + 'px';\n                    contextPosition.width = self.width - (self.style.mobileContextMenuMargin * 2) + 'px';\n                }\n                self.contextMenu = createContextMenu(ev, contextPosition, items);\n                document.addEventListener('mouseup', createDiposeEvent);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/contextMenu.js\n// module id = 7\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.getClippingRect = function (ele) {\n            var boundingRect = self.position(self.parentNode),\n                eleRect = self.position(ele),\n                s = self.scrollOffset(self.canvas),\n                clipRect = {\n                    x: 0,\n                    y: 0,\n                    h: 0,\n                    w: 0\n                },\n                parentRect = {\n                    x: -Infinity,\n                    y: -Infinity,\n                    h: Infinity,\n                    w: Infinity\n                },\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth();\n            boundingRect.top -= s.top;\n            boundingRect.left -= s.left;\n            eleRect.top -= s.top;\n            eleRect.left -= s.left;\n            clipRect.h = boundingRect.top + boundingRect.height - ele.offsetTop - self.style.scrollBarWidth;\n            clipRect.w = boundingRect.left + boundingRect.width - ele.offsetLeft - self.style.scrollBarWidth;\n            clipRect.x = boundingRect.left + (eleRect.left * -1) + rowHeaderCellWidth;\n            clipRect.y = boundingRect.top + (eleRect.top * -1) + columnHeaderCellHeight;\n            return {\n                x: clipRect.x > parentRect.x ? clipRect.x : parentRect.x,\n                y: clipRect.y > parentRect.y ? clipRect.y : parentRect.y,\n                h: clipRect.h < parentRect.h ? clipRect.h : parentRect.h,\n                w: clipRect.w < parentRect.w ? clipRect.w : parentRect.w\n            };\n        };\n        self.clipElement = function (ele) {\n            var clipRect = self.getClippingRect(ele);\n            if (clipRect.w < 0) { clipRect.w = 0; }\n            if (clipRect.h < 0) { clipRect.h = 0; }\n            ele.style.clip = 'rect('\n                + clipRect.y + 'px,'\n                + clipRect.w + 'px,'\n                + clipRect.h + 'px,'\n                + clipRect.x + 'px'\n                + ')';\n            // INFO https://developer.mozilla.org/en-US/docs/Web/CSS/clip\n            // clip has been \"deprecated\" for clipPath.  Of course nothing but chrome\n            // supports clip path, so we'll keep using clip until someday clipPath becomes\n            // more widely support.  The code below works correctly, but setting clipPath and clip\n            // at the same time has undesirable results.\n            // ele.style.clipPath = 'polygon('\n            //     + clipRect.x + 'px ' + clipRect.y + 'px,'\n            //     + clipRect.x + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.y + 'px'\n            //     + ')';\n        };\n        self.scrollOffset = function (e) {\n            var x = 0, y = 0;\n            while (e.parentNode && e.nodeName !== 'CANVAS-DATAGRID') {\n                if (e.nodeType !== 'canvas-datagrid-tree'\n                        && e.nodeType !== 'canvas-datagrid-cell') {\n                    x -= e.scrollLeft;\n                    y -= e.scrollTop;\n                }\n                e = e.parentNode;\n            }\n            return {left: x, top: y};\n        };\n        self.resizeEditInput = function () {\n            if (self.input && self.input.editCell) {\n                var pos = self.canvas.getBoundingClientRect(),\n                    s = self.scrollOffset(self.canvas),\n                    bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                    borderWidth = (self.style.cellBorderWidth * bm),\n                    cell = self.getVisibleCellByIndex(self.input.editCell.columnIndex, self.input.editCell.rowIndex)\n                        || {x: -100, y: -100, height: 0, width: 0};\n                if (self.mobile) {\n                    self.input.style.left = '0';\n                    self.input.style.top = (self.height - self.style.mobileEditInputHeight) - borderWidth - 1 + 'px';\n                    self.input.style.height = self.style.mobileEditInputHeight + 'px';\n                    self.input.style.width = self.width - borderWidth - 1 + 'px';\n                    return;\n                }\n                self.input.style.left = pos.left + cell.x + self.canvasOffsetLeft - s.left + 'px';\n                self.input.style.top = pos.top + cell.y - self.style.cellBorderWidth + self.canvasOffsetTop - s.top + 'px';\n                self.input.style.height = cell.height - borderWidth + 'px';\n                self.input.style.width = cell.width - self.style.cellPaddingLeft + 'px';\n                self.clipElement(self.input);\n            }\n        };\n        self.position = function (e, ignoreScrollOffset) {\n            var x = 0, y = 0, s = e, h, w;\n            while (e.offsetParent && e.nodeName !== 'CANVAS-DATAGRID') {\n                x += e.offsetLeft;\n                y += e.offsetTop;\n                h = e.offsetHeight;\n                w = e.offsetWidth;\n                e = e.offsetParent;\n            }\n            if (ignoreScrollOffset) {\n                return {left: x, top: y, height: h, width: w};\n            }\n            e = s;\n            s = self.scrollOffset(e);\n            return { left: x + s.left, top: y + s.top, height: h, width: w };\n        };\n        self.getLayerPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.clientX - rect.left,\n                    y: e.clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        /**\n         * Ends editing, optionally aborting the edit.\n         * @memberof canvasDatagrid\n         * @name endEdit\n         * @method\n         * @param {boolean} abort When true, abort the edit.\n         */\n        self.endEdit = function (abort) {\n            var cell = self.input.editCell,\n                y = cell.rowIndex;\n            function abortEdit() {\n                abort = true;\n            }\n            if (self.dispatchEvent('beforeendedit', {\n                    cell: cell,\n                    newValue: self.input.value,\n                    oldValue: cell.value,\n                    abort: abortEdit,\n                    input: self.input\n                })) { return false; }\n            if (self.input.value !== cell.value && !abort) {\n                self.changes[y] = self.changes[y] || {};\n                self.changes[y][cell.header.name] = self.input.value;\n                cell.data[cell.header.name] = self.input.value;\n                if (y === self.data.length) {\n                    if (self.dispatchEvent('newrow', {\n                            value: self.input.value,\n                            defaultValue: cell.value,\n                            aborted: abort,\n                            cell: cell,\n                            input: self.input\n                        })) { return false; }\n                    self.uId += 1;\n                    self.addRow(cell.data);\n                    self.createNewRowData();\n                }\n                self.draw(true);\n            }\n            document.body.removeChild(self.input);\n            self.intf.focus();\n            self.dispatchEvent('endedit', {\n                cell: cell,\n                value: self.input.value,\n                aborted: abort,\n                input: self.input\n            });\n            self.input = undefined;\n            return true;\n        };\n        /**\n         * Begins editing at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name beginEditAt\n         * @method\n         * @param {number} x The column index of the cell to edit.\n         * @param {number} y The row index of the cell to edit.\n         */\n        self.beginEditAt = function (x, y) {\n            if (!self.attributes.editable) { return; }\n            if (self.input) {\n                self.endEdit();\n            }\n            var cell = self.getVisibleCellByIndex(x, y),\n                s = self.getVisibleSchema(),\n                enumItems,\n                enu,\n                option,\n                valueInEnum;\n            if (!(cell && cell.header)) { return; }\n            //HACK for IE10, does not like literal enum\n            enu = cell.header['enum'];\n            if (self.dispatchEvent('beforebeginedit', {cell: cell})) { return false; }\n            self.scrollIntoView(x, y);\n            self.setActiveCell(x, y);\n            if (enu) {\n                self.input = document.createElement('select');\n            } else {\n                self.input = document.createElement(self.attributes.multiLine\n                    ? 'textarea' : 'input');\n            }\n            cell = self.getVisibleCellByIndex(x, y);\n            //HACK on mobile devices sometimes edit can begin without the cell being in view, I don't know how.\n            if (!cell) { return; }\n            if (enu) {\n                // add enums\n                if (typeof enu === 'function') {\n                    enumItems = enu.apply(self.intf, [{cell: cell}]);\n                } else if (Array.isArray(enu)) {\n                    enumItems = enu;\n                }\n                enumItems.forEach(function (e) {\n                    var i = document.createElement('option'),\n                        val,\n                        title;\n                    if (Array.isArray(e)) {\n                        val = e[0];\n                        title = e[1];\n                    } else {\n                        val = e;\n                        title = e;\n                    }\n                    if (val === cell.value) { valueInEnum = true; }\n                    i.value = val;\n                    i.innerHTML = title;\n                    self.input.appendChild(i);\n                });\n                if (!valueInEnum) {\n                    option = document.createElement('option');\n                    option.value = cell.value;\n                    option.innerHTML = cell.value;\n                    self.input.appendChild(option);\n                }\n                self.input.addEventListener('change', function () {\n                    self.endEdit();\n                    self.draw(true);\n                });\n            }\n            document.body.appendChild(self.input);\n            self.createInlineStyle(self.input, self.mobile ? 'canvas-datagrid-edit-mobile-input' : 'canvas-datagrid-edit-input');\n            self.input.style.position = 'absolute';\n            self.input.editCell = cell;\n            self.resizeEditInput();\n            self.input.style.zIndex = '2';\n            self.input.style.fontSize = (parseInt(self.style.editCellFontSize, 10) * self.scale) + 'px';\n            self.input.value = cell.value;\n            self.input.focus();\n            self.input.addEventListener('click', self.stopPropagation);\n            self.input.addEventListener('dblclick', self.stopPropagation);\n            self.input.addEventListener('mouseup', self.stopPropagation);\n            self.input.addEventListener('mousedown', self.stopPropagation);\n            self.input.addEventListener('keydown', function (e) {\n                var nx = cell.columnIndex,\n                    ny = cell.rowIndex;\n                // esc\n                if (e.keyCode === 27) {\n                    self.endEdit(true);\n                    self.draw(true);\n                // enter\n                } else if (e.keyCode === 13\n                        && (!self.attributes.multiLine\n                            || (self.attributes.multiLine && e.shiftKey))) {\n                    self.endEdit();\n                    self.draw(true);\n                } else if (e.keyCode === 9) {\n                    e.preventDefault();\n                    if (!self.endEdit()) {\n                        return;\n                    }\n                    if (e.shiftKey) {\n                        nx -= 1;\n                    } else {\n                        nx += 1;\n                    }\n                    if (nx < 0) {\n                        nx = s.length - 1;\n                        ny -= 1;\n                    }\n                    if (nx > s.length - 1) {\n                        nx = 0;\n                        ny += 1;\n                    }\n                    if (ny < 0) {\n                        ny = self.data.length - 1;\n                    }\n                    if (ny > self.data.length - 1) {\n                        ny = 0;\n                    }\n                    self.scrollIntoView(nx, ny);\n                    self.beginEditAt(nx, ny);\n                }\n            });\n            self.dispatchEvent('beginedit', {cell: cell, input: self.input});\n        };\n        self.createInlineStyle = function (el, className) {\n            var css = {\n                'canvas-datagrid-context-menu-filter-input': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextFilterInputBackground,\n                    color: self.style.contextFilterInputColor,\n                    border: self.style.contextFilterInputBorder,\n                    borderRadius: self.style.contextFilterInputBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextFilterInputFontFamily,\n                    fontSize: self.style.contextFilterInputFontSize\n                },\n                'canvas-datagrid-context-menu-filter-button': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextFilterButtonBorder,\n                    borderRadius: self.style.contextFilterButtonBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFilterButtonFontFamily,\n                    fontSize: self.style.contextMenuFilterButtonFontSize\n                },\n                'canvas-datagrid-context-child-arrow': {\n                    cssFloat: 'right',\n                    color: self.style.childContextMenuArrowColor,\n                    fontSize: self.style.contextMenuChildArrowFontSize,\n                    fontFamily: self.style.contextMenuFontFamily,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-autocomplete': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    position: 'absolute',\n                    zIndex: 9999,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-autocomplete-item': {\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor\n                },\n                'canvas-datagrid-autocomplete-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-canvas': {\n                    position: 'absolute',\n                    zIndex: '-1'\n                },\n                'canvas-datagrid': {\n                    display: 'block'\n                },\n                'canvas-datagrid-control-input': {\n                    position: 'fixed',\n                    top: '-5px',\n                    left: '-5px',\n                    border: 'none',\n                    opacity: '0',\n                    cursor: 'pointer',\n                    width: '1px',\n                    height: '1px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize\n                },\n                'canvas-datagrid-edit-mobile-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 0',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.mobileEditFontFamily,\n                    fontSize: self.style.mobileEditFontSize,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-edit-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 ' + self.style.editCellPaddingLeft + 'px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.editCellFontFamily,\n                    fontSize: self.style.editCellFontSize,\n                    boxShadow: self.style.editCellBoxShadow,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-context-menu-item-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-context-menu-label': {\n                    margin: self.style.contextMenuLabelMargin,\n                    display: self.style.contextMenuLabelDisplay,\n                    minWidth: self.style.contextMenuLabelMinWidth,\n                    maxWidth: self.style.contextMenuLabelMaxWidth\n                },\n                'canvas-datagrid-context-menu-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-context-menu': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-invalid-search-regExp': {\n                    background: self.style.contextMenuFilterInvalidExpresion\n                }\n            };\n            if (css[className]) {\n                Object.keys(css[className]).map(function (prop) {\n                    el.style[prop] = css[className][prop];\n                });\n            }\n            return;\n        };\n        self.appendTo = function (e) {\n            self.parentNode = e;\n            self.setDom();\n        };\n        self.setDom = function () {\n            if (!self.parentNode) { return; }\n            if (self.parentNode && /canvas-datagrid-(cell|tree)/.test(self.parentNode.nodeType)) {\n                self.isChildGrid = true;\n                self.parentGrid = self.parentNode.parentGrid;\n                self.ctx = self.parentGrid.context;\n                self.canvas = self.parentGrid.canvas;\n                self.controlInput = self.parentGrid.controlInput;\n                self.eventParent = self.canvas;\n            } else {\n                self.controlInput = self.controlInput || document.createElement('input');\n                self.controlInput.onblur = self.intf.blur;\n                self.createInlineStyle(self.controlInput, 'canvas-datagrid-control-input');\n                self.isChildGrid = false;\n                self.parentDOMNode = self.parentNode;\n                self.parentIsCanvas = /^canvas$/i.test(self.parentDOMNode.tagName);\n                if (self.parentIsCanvas) {\n                    self.canvas = self.parentDOMNode;\n                    self.parentDOMNode.appendChild(self.controlInput);\n                } else {\n                    self.canvas = document.createElement('canvas');\n                    self.parentDOMNode.appendChild(self.canvas);\n                    self.parentDOMNode.appendChild(self.controlInput);\n                }\n                self.createInlineStyle(self.canvas, 'canvas-datagrid');\n                self.ctx = self.canvas.getContext('2d');\n                self.ctx.textBaseline = 'alphabetic';\n                self.eventParent = self.canvas;\n            }\n            self.parentNodeStyle = self.canvas.style;\n            self.controlInput.setAttribute('readonly', true);\n            self.controlInput.addEventListener('blur', function (e) {\n                if (e.target !== self.canvas) {\n                    self.hasFocus = false;\n                }\n            });\n            self.eventParent.addEventListener('scroll', self.resize, false);\n            self.eventParent.addEventListener('touchstart', self.touchstart, false);\n            self.eventParent.addEventListener('mouseup', self.mouseup, false);\n            self.eventParent.addEventListener('mousedown', self.mousedown, false);\n            self.eventParent.addEventListener('dblclick', self.dblclick, false);\n            self.eventParent.addEventListener('click', self.click, false);\n            self.eventParent.addEventListener('mousemove', self.mousemove);\n            self.eventParent.addEventListener('wheel', self.scrollWheel, false);\n            self.canvas.addEventListener('contextmenu', self.contextmenuEvent, false);\n            self.controlInput.addEventListener('copy', self.copy);\n            self.controlInput.addEventListener('cut', self.cut);\n            self.controlInput.addEventListener('paste', self.paste);\n            self.controlInput.addEventListener('keypress', self.keypress, false);\n            self.controlInput.addEventListener('keyup', self.keyup, false);\n            self.controlInput.addEventListener('keydown', self.keydown, false);\n            window.addEventListener('resize', self.resize);\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/dom.js\n// module id = 8\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        // all methods here are exposed by intf\n        // to users\n        /**\n         * Converts a integer into a letter A - ZZZZZ...\n         * @memberof canvasDatagrid\n         * @name integerToAlpha\n         * @method\n         * @param {column} n The number to convert.\n         */\n        self.integerToAlpha = function (n) {\n            var ordA = 'a'.charCodeAt(0),\n                ordZ = 'z'.charCodeAt(0),\n                len = ordZ - ordA + 1,\n                s = '';\n            while (n >= 0) {\n                s = String.fromCharCode(n % len + ordA) + s;\n                n = Math.floor(n / len) - 1;\n            }\n            return s;\n        };\n        /**\n         * Inserts a new column before the specified index into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name insertColumn\n         * @method\n         * @param {column} c The column to insert into the schema.\n         * @param {number} index The index of the column to insert before.\n         */\n        self.insertColumn = function (c, index) {\n            var s = self.getSchema();\n            if (s.length < index) {\n                throw new Error('Index is beyond the length of the schema.');\n            }\n            self.validateColumn(c, s);\n            s.splice(index, 0, c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a column from the schema at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteColumn\n         * @tutorial schema\n         * @method\n         * @param {number} index The index of the column to delete.\n         */\n        self.deleteColumn = function (index) {\n            var s = self.getSchema();\n            // remove data matching this column name from data\n            self.data.forEach(function (row) {\n                delete row[s[index].name];\n            });\n            s.splice(index, 1);\n            self.intf.schema = s;\n        };\n        /**\n         * Adds a new column into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name addColumn\n         * @method\n         * @param {column} c The column to add to the schema.\n         */\n        self.addColumn = function (c) {\n            var s = self.getSchema();\n            self.validateColumn(c, s);\n            s.push(c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a row from the dataset at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteRow\n         * @method\n         * @param {number} index The index of the row to delete.\n         */\n        self.deleteRow = function (index) {\n            self.originalData.splice(index, 1);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Inserts a new row into the dataset before the specified index.\n         * @memberof canvasDatagrid\n         * @name insertRow\n         * @method\n         * @param {object} d data.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertRow = function (d, index) {\n            if (self.originalData.length < index) {\n                throw new Error('Index is beyond the length of the dataset.');\n            }\n            self.originalData.splice(index, 0, d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[index], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Adds a new row into the dataset.\n         * @memberof canvasDatagrid\n         * @name addRow\n         * @method\n         * @param {object} d data.\n         */\n        self.addRow = function (d) {\n            self.originalData.push(d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[self.originalData.length - 1], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Sets the height of a given row by index number.\n         * @memberof canvasDatagrid\n         * @name setRowHeight\n         * @method\n         * @param {number} rowIndex The index of the row to set.\n         * @param {number} height Height to set the row to.\n         */\n        self.setRowHeight = function (rowIndex, height) {\n            self.sizes.rows[self.data[rowIndex][self.uniqueId]] = height;\n            self.draw(true);\n        };\n        /**\n         * Sets the width of a given column by index number.\n         * @memberof canvasDatagrid\n         * @name setColumnWidth\n         * @method\n         * @param {number} colIndex The index of the column to set.\n         * @param {number} width Width to set the column to.\n         */\n        self.setColumnWidth = function (colIndex, width) {\n            var s = self.getSchema();\n            self.sizes.columns[s[colIndex][self.uniqueId]] = width;\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the width of the columns due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetColumnWidths\n         * @tutorial schema\n         * @method\n         */\n        self.resetColumnWidths = function () {\n            self.sizes.columns = {};\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the height of the rows due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetRowHeights\n         * @tutorial schema\n         * @method\n         */\n        self.resetRowHeights = function () {\n            self.sizes.rows = {};\n            self.draw(true);\n        };\n        /**\n         * Sets the value of the filter.\n         * @memberof canvasDatagrid\n         * @name setFilter\n         * @method\n         * @param {string} column Name of the column to filter.\n         * @param {string} value The value to filter for.\n         */\n        self.setFilter = function (column, value) {\n            function applyFilter() {\n                self.refreshFromOrigialData();\n                Object.keys(self.columnFilters).forEach(function (filter) {\n                    var header = self.getHeaderByName(column);\n                    if (!header) {\n                        return;\n                    }\n                    self.currentFilter = header.filter || self.filter(column.type || 'string');\n                    self.data = self.data.filter(function (row) {\n                        return self.currentFilter(row[filter], self.columnFilters[filter]);\n                    });\n                });\n                self.resize();\n                self.draw(true);\n            }\n            if (column === undefined && value === undefined) {\n                self.columnFilters = {};\n                return applyFilter();\n            }\n            if (column && (value === '' || value === undefined)) {\n                delete self.columnFilters[column];\n            } else {\n                self.columnFilters[column] = value;\n            }\n            applyFilter();\n        };\n        /**\n         * Returns the number of pixels to scroll down to line up with row rowIndex.\n         * @memberof canvasDatagrid\n         * @name findRowScrollTop\n         * @method\n         * @param {number} rowIndex The row index of the row to scroll find.\n         */\n        self.findRowScrollTop = function (rowIndex) {\n            var top = 0, x = 0, l = self.data.length,\n                bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                cellBorder = self.style.cellBorderWidth * bm;\n            if (!self.attributes.showNewRow) {\n                l -= 1;\n            }\n            if (rowIndex > l) {\n                throw new Error('Impossible row index');\n            }\n            while (x < rowIndex) {\n                top += (self.sizes.rows[self.data[x][self.uniqueId]] || self.style.cellHeight) + cellBorder;\n                x += 1;\n            }\n            //TODO: This is not super accurate, causes pageUp/Dn to not move around right\n            return top - (self.sizes.rows[self.data[rowIndex][self.uniqueId]] || self.style.cellHeight);\n        };\n        /**\n         * Returns the number of pixels to scroll to the left to line up with column columnIndex.\n         * @memberof canvasDatagrid\n         * @name findColumnScrollLeft\n         * @method\n         * @param {number} columnIndex The column index of the column to find.\n         */\n        self.findColumnScrollLeft = function (columnIndex) {\n            var left = 0, y = 0, s = self.getSchema(), l = s.length - 1;\n            if (columnIndex > l) {\n                throw new Error('Impossible column index');\n            }\n            while (y < columnIndex) {\n                left += self.sizes.columns[s[y][self.uniqueId]] || s[y].width || self.style.cellWidth;\n                y += 1;\n            }\n            return left;\n        };\n        /**\n         * Scrolls the cell at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name gotoCell\n         * @method\n         * @param {number} x The column index of the cell to scroll to.\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoCell = function (x, y) {\n            if (x !== undefined) {\n                self.scrollBox.scrollLeft = self.findColumnScrollLeft(x);\n            }\n            if (y !== undefined) {\n                self.scrollBox.scrollTop = self.findRowScrollTop(y);\n            }\n        };\n        /**\n         * Scrolls the row y.\n         * @memberof canvasDatagrid\n         * @name gotoRow\n         * @method\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoRow = function (y) {\n            self.gotoCell(0, y);\n        };\n        /**\n         * Scrolls the cell at cell x, row y into view if it is not already.\n         * @memberof canvasDatagrid\n         * @name scrollIntoView\n         * @method\n         * @param {number} x The column index of the cell to scroll into view.\n         * @param {number} y The row index of the cell to scroll into view.\n         */\n        self.scrollIntoView = function (x, y) {\n            if (self.visibleCells.filter(function (cell) {\n                    return (cell.rowIndex === y || y === undefined)\n                        && (cell.columnIndex === x || x === undefined)\n                        && cell.x > 0\n                        && cell.y > 0\n                        && cell.x + cell.width < self.width\n                        && cell.y + cell.height < self.height;\n                }).length === 0) {\n                self.gotoCell(x, y);\n            }\n        };\n        /**\n         * Sets the active cell. Requires redrawing.\n         * @memberof canvasDatagrid\n         * @name setActiveCell\n         * @method\n         * @param {number} x The column index of the cell to set active.\n         * @param {number} y The row index of the cell to set active.\n         */\n        self.setActiveCell = function (x, y) {\n            self.activeCell = {\n                rowIndex: y,\n                columnIndex: x\n            };\n        };\n        /**\n         * Removes the selection.\n         * @memberof canvasDatagrid\n         * @name selectNone\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectNone = function (dontDraw) {\n            self.selections = [];\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Selects every visible cell.\n         * @memberof canvasDatagrid\n         * @name selectAll\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectAll = function (dontDraw) {\n            self.selectArea({\n                top: 0,\n                left: 0,\n                right: self.getVisibleSchema().length - 1,\n                bottom: self.data.length - 1\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Returns true if the selected columnIndex is selected on every row.\n         * @memberof canvasDatagrid\n         * @name isColumnSelected\n         * @method\n         * @param {number} columnIndex The column index to check.\n         */\n        self.isColumnSelected = function (columnIndex) {\n            var colIsSelected = true;\n            self.data.forEach(function (row, rowIndex) {\n                if (!self.selections[rowIndex] || self.selections[rowIndex].indexOf(self.orders.columns[columnIndex]) === -1) {\n                    colIsSelected = false;\n                }\n            });\n            return colIsSelected;\n        };\n        /**\n         * Runs the defined method on each selected cell.\n         * @memberof canvasDatagrid\n         * @name forEachSelectedCell\n         * @method\n         * @param {number} fn The function to execute.  The signature of the function is: (data, rowIndex, columnName).\n         * @param {number} expandToRow When true the data in the array is expanded to the entire row.\n         */\n        self.forEachSelectedCell = function (fn, expandToRow) {\n            var d = [], s = expandToRow ? self.getSchema() : self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    if (col === -1 || !s[col]) { return; }\n                    fn(self.data, index, s[col].name);\n                });\n            });\n        };\n        /**\n         * Selects a column.\n         * @memberof canvasDatagrid\n         * @name selectColumn\n         * @method\n         * @param {number} columnIndex The column index to select.\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the column.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the column.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectColumn = function (columnIndex, ctrl, shift, supressEvent) {\n            var s, e, x;\n            function addCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) === -1) {\n                        self.selections[rowIndex].push(i);\n                    }\n                });\n            }\n            function removeCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) !== -1) {\n                        self.selections[rowIndex].splice(self.selections[rowIndex].indexOf(i), 1);\n                    }\n                });\n            }\n            if (shift) {\n                if (!self.activeCell) { return; }\n                s = Math.min(self.activeCell.columnIndex, columnIndex);\n                e = Math.max(self.activeCell.columnIndex, columnIndex);\n                for (x = s; e > x; x += 1) {\n                    addCol(x);\n                }\n            }\n            if (!ctrl && !shift) {\n                self.selections = [];\n                self.activeCell.columnIndex = columnIndex;\n                self.activeCell.rowIndex = self.scrollIndexTop;\n            }\n            if (ctrl && self.isColumnSelected(columnIndex)) {\n                removeCol(columnIndex);\n            } else {\n                addCol(columnIndex);\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.getSelectionBounds()\n            });\n        };\n        /**\n         * Selects a row.\n         * @memberof canvasDatagrid\n         * @name selectRow\n         * @method\n         * @param {number} rowIndex The row index to select.\n         * @param {boolean} ctrl When true, behaves as if you were holding control/command when you clicked the row.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the row.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectRow = function (rowIndex, ctrl, shift, supressEvent) {\n            var x, st, en, s = self.getVisibleSchema();\n            function addRow(ri) {\n                self.selections[ri] = [];\n                self.selections[ri].push(-1);\n                s.forEach(function (col, index) {\n                    self.selections[ri].push(index);\n                });\n            }\n            if (self.dragAddToSelection === false || self.dragObject === undefined) {\n                if (self.selections[rowIndex] && self.selections[rowIndex].length - 1 === s.length) {\n                    if (ctrl) {\n                        self.selections[rowIndex] = [];\n                        return;\n                    }\n                }\n            }\n            if (self.dragAddToSelection === true || self.dragObject === undefined) {\n                if (shift && self.dragObject === undefined) {\n                    if (!self.activeCell) { return; }\n                    st = Math.min(self.activeCell.rowIndex, rowIndex);\n                    en = Math.max(self.activeCell.rowIndex, rowIndex);\n                    for (x = st; en >= x; x += 1) {\n                        addRow(x);\n                    }\n                } else {\n                    addRow(rowIndex);\n                }\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Collapse a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name collapseTree\n         * @method\n         * @param {number} index The index of the row to collapse.\n         */\n        self.collapseTree = function (rowIndex) {\n            var rowId = self.data[rowIndex][self.uniqueId];\n            self.dispatchEvent('collapsetree', {\n                childGrid: self.childGrids[rowId],\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId].blur();\n            self.openChildren[rowId].dispose();\n            delete self.openChildren[rowId];\n            delete self.sizes.trees[rowId];\n            delete self.childGrids[rowId];\n            self.dispatchEvent('resizerow', {\n                cellHeight: self.style.cellHeight\n            });\n            self.resize(true);\n            self.draw(true);\n        };\n        /**\n         * Expands a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name expandTree\n         * @method\n         * @param {number} index The index of the row to expand.\n         */\n        self.expandTree = function (rowIndex) {\n            var trArgs = self.args.treeGridAttributes || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth,\n                rowId = self.data[rowIndex][self.uniqueId],\n                h = self.sizes.trees[rowId] || self.style.treeGridHeight,\n                treeGrid;\n            if (!self.childGrids[rowId]) {\n                trArgs.debug = self.attributes.debug;\n                trArgs.name = self.attributes.saveAppearance ? self.attributes.name + 'tree' + rowId : undefined;\n                trArgs.style = trArgs.style || self.style;\n                trArgs.parentNode = {\n                    parentGrid: self.intf,\n                    nodeType: 'canvas-datagrid-tree',\n                    offsetHeight: h,\n                    offsetWidth: self.width - rowHeaderCellWidth,\n                    header: { width: self.width - rowHeaderCellWidth },\n                    offsetLeft: rowHeaderCellWidth,\n                    offsetTop: columnHeaderCellHeight,\n                    offsetParent: self.intf.parentNode,\n                    parentNode: self.intf.parentNode,\n                    style: 'tree',\n                    data: self.data[rowIndex]\n                };\n                treeGrid = self.createGrid(trArgs);\n                self.childGrids[rowId] = treeGrid;\n            }\n            treeGrid = self.childGrids[rowId];\n            treeGrid.visible = true;\n            self.dispatchEvent('expandtree', {\n                treeGrid: treeGrid,\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId] = treeGrid;\n            self.sizes.trees[rowId] = h;\n            self.dispatchEvent('resizerow', {height: self.style.cellHeight});\n            self.resize(true);\n        };\n        /**\n         * Toggles tree grid open and close by row index.\n         * @memberof canvasDatagrid\n         * @name toggleTree\n         * @method\n         * @param {number} index The index of the row to toggle.\n         */\n        self.toggleTree = function (rowIndex) {\n            var i = self.openChildren[self.data[rowIndex][self.uniqueId]];\n            if (i) {\n                return self.collapseTree(rowIndex);\n            }\n            self.expandTree(rowIndex);\n        };\n        /**\n         * Returns a header from the schema by name.\n         * @memberof canvasDatagrid\n         * @name getHeaderByName\n         * @tutorial schema\n         * @method\n         * @returns {header} header with the selected name, or undefined.\n         * @param {string} name The name of the column to resize.\n         */\n        self.getHeaderByName = function (name) {\n            var x, i = self.getSchema();\n            for (x = 0; x < i.length; x += 1) {\n                if (i[x].name === name) {\n                    return i[x];\n                }\n            }\n        };\n        /**\n         * Resizes a column to fit the longest value in the column. Call without a value to resize all columns.\n         * Warning, can be slow on very large record sets (1m records ~3-5 seconds on an i7).\n         * @memberof canvasDatagrid\n         * @name fitColumnToValues\n         * @method\n         * @param {string} name The name of the column to resize.\n         */\n        self.fitColumnToValues = function (name, internal) {\n            if (!self.canvas) { return; }\n            self.sizes.columns[name === 'cornerCell' ? name : self.getHeaderByName(name)[self.uniqueId]]\n                = self.findColumnMaxTextLength(name);\n            if (!internal) {\n                self.resize();\n                self.draw(true);\n            }\n        };\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @overload\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {number} columnIndex The column index of the cell to check.\n         * @param {number} rowIndex The row index of the cell to check.\n         */\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {cell} cell The cell to check for.  Alternatively you can pass an object { x: <x-pixel-value>, y: <y-pixel-value> }.\n         */\n        self.isCellVisible = function (cell, rowIndex) {\n            // overload\n            if (rowIndex !== undefined) {\n                return self.visibleCells.filter(function (c) {\n                    return c.columnIndex === cell && c.rowIndex === rowIndex;\n                }).length > 0;\n            }\n            var x, l = self.visibleCells.length;\n            for (x = 0; x < l; x += 1) {\n                if (cell.x === self.visibleCells[x].x && cell.y === self.visibleCells[x].y) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n         * Sets the order of the data.\n         * @memberof canvasDatagrid\n         * @name order\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} columnName Number of pixels from the left.\n         * @param {string} direction `asc` for ascending or `desc` for descending.\n         * @param {function} [sortFunction] When defined, override the default sorting method defined in the column's schema and use this one.\n         * @param {bool} [dontSetStorageData] Don't store this setting for future use.\n         */\n        self.order = function (columnName, direction, sortFunction, dontSetStorageData) {\n            var f,\n                c = self.getSchema().filter(function (col) {\n                    return col.name === columnName;\n                });\n            self.orderBy = columnName;\n            if (c.length === 0) {\n                throw new Error('Cannot sort.  No such column name');\n            }\n            f = sortFunction || self.sorters[c[0].type];\n            if (!f && c[0].type !== undefined) {\n                console.warn('Cannot sort type \"%s\" falling back to string sort.', c[0].type);\n            }\n            self.data = self.data.sort(typeof f === 'function' ? f(columnName, direction) : self.sorters.string);\n            self.dispatchEvent('ordercolumn', {name: columnName, direction: direction});\n            self.draw(true);\n            if (dontSetStorageData) { return; }\n            self.setStorageData();\n        };\n        self.isInGrid = function (e) {\n            if (e.x < 0\n                    || e.x > self.width\n                    || e.y < 0\n                    || e.y > self.height) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Moves the current selection relative to the its current position.  Note: this method does not move the selected data, just the selection itself.\n         * @memberof canvasDatagrid\n         * @name moveSelection\n         * @method\n         * @param {number} offsetX The number of columns to offset the selection.\n         * @param {number} offsetY The number of rows to offset the selection.\n         */\n        self.moveSelection = function (offsetX, offsetY) {\n            var sel = [];\n            self.selections.forEach(function (row, rowIndex) {\n                sel[rowIndex + offsetY] = [];\n                row.forEach(function (colIndex) {\n                    sel[rowIndex + offsetY].push(colIndex + offsetX);\n                });\n            });\n            self.selections = sel;\n        };\n        /**\n         * Moves data in the provided selection to another position in the grid.  Moving data off the edge of the schema (columns/x) will truncate data.\n         * @memberof canvasDatagrid\n         * @name moveTo\n         * @method\n         * @param {array} sel 2D array representing selected rows and columns.  `canvasDatagrid.selections` is in this format and can be used here.\n         * @param {number} x The column index to start inserting the selection at.\n         * @param {number} y The row index to start inserting the selection at.\n         */\n        self.moveTo = function (sel, x, y) {\n            var d = self.getSelectedData(),\n                s = self.getVisibleSchema(),\n                l = sel.length,\n                xi,\n                yi = y - 1;\n            sel.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) { return; }\n                row.forEach(function (col) {\n                    if (!s[col]) { return; }\n                    self.data[index][s[col].name] = null;\n                });\n            });\n            sel.forEach(function (row, index) {\n                yi += 1;\n                xi = x - 1;\n                row.forEach(function (col, cidx) {\n                    xi += 1;\n                    if (col === -1\n                            || !s[xi]\n                            || !s[col]\n                            || self.data.length - 1 < yi\n                            || yi < 0) { return; }\n                    self.data[yi][s[xi].name] = d[index][s[col].name];\n                });\n            });\n        };\n        /**\n         * Checks if a given column is visible.\n         * @memberof canvasDatagrid\n         * @name isColumnVisible\n         * @method\n         * @returns {boolean} When true, the column is visible.\n         * @param {number} columnIndex Column index.\n         */\n        self.isColumnVisible = function (columnIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === columnIndex;\n            }).length > 0;\n        };\n        /**\n         * Checks if a given row is visible.\n         * @memberof canvasDatagrid\n         * @name isRowVisible\n         * @method\n         * @returns {boolean} When true, the row is visible.\n         * @param {number} rowIndex Row index.\n         */\n        self.isRowVisible = function (rowIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.rowIndex === rowIndex;\n            }).length > 0;\n        };\n        /**\n         * Gets the cell at columnIndex and rowIndex.\n         * @memberof canvasDatagrid\n         * @name getVisibleCellByIndex\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Column index.\n         * @param {number} y Row index.\n         */\n        self.getVisibleCellByIndex = function (x, y) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === x && c.rowIndex === y;\n            })[0];\n        };\n        /**\n         * Gets the cell at grid pixel coordinate x and y.  Author's note.  This function ties drawing and events together.  This is a very complex function and is core to the component.\n         * @memberof canvasDatagrid\n         * @name getCellAt\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Number of pixels from the left.\n         * @param {number} y Number of pixels from the top.\n         */\n        self.getCellAt = function (x, y, useTouchScrollZones) {\n            function getBorder(cell) {\n                if (cell.x + cell.width - (self.attributes.borderResizeZone * 0.4) < x && cell.x + cell.width + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'r';\n                }\n                if (cell.x - (self.attributes.borderResizeZone * 0.4) < x && cell.x + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'l';\n                }\n                if (cell.y + cell.height - (self.attributes.borderResizeZone * 0.4) < y && cell.y + cell.height + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 'b';\n                }\n                if (cell.y - (self.attributes.borderResizeZone * 0.4) < y && cell.y + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 't';\n                }\n            }\n            var border,\n                tsz = useTouchScrollZones ? self.attributes.touchScrollZone : 0,\n                moveMode = self.attributes.borderDragBehavior === 'move',\n                i,\n                l = self.visibleCells.length,\n                moveBorder,\n                xBorderBehavior = moveMode ? self.cursorGrab : 'ew-resize',\n                yBorderBehavior = moveMode ? self.cursorGrab : 'ns-resize',\n                cell;\n            if (!self.visibleCells || !self.visibleCells.length) { return; }\n            self.hasFocus = true;\n            if (!(y < self.height\n                && y > 0\n                && x < self.width\n                && x > 0)) {\n                self.hasFocus = false;\n                return {\n                    dragContext: 'inherit',\n                    context: 'inherit'\n                };\n            }\n            for (i = 0; i < l; i += 1) {\n                cell = self.visibleCells[i];\n                if (useTouchScrollZones && /(vertical|horizontal)-scroll-/.test(cell.style)) {\n                    cell.x -= tsz;\n                    cell.y -= tsz;\n                    cell.height += tsz;\n                    cell.width += tsz;\n                }\n                if (cell.x - self.style.cellBorderWidth < x\n                        && cell.x + cell.width + self.style.cellBorderWidth > x\n                        && cell.y - self.style.cellBorderWidth < y\n                        && cell.y + cell.height + self.style.cellBorderWidth > y) {\n                    if (/frozen-row-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'row-resize';\n                        return cell;\n                    }\n                    if (/frozen-column-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'col-resize';\n                        return cell;\n                    }\n                    if (/selection-handle-/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'crosshair';\n                        return cell;\n                    }\n                    if (/vertical-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'vertical-scroll-box';\n                        cell.context = 'vertical-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isVerticalScrollBar = true;\n                        if (y > self.scrollBox.box.v.y + self.scrollBox.scrollBoxHeight) {\n                            cell.dragContext = 'vertical-scroll-bottom';\n                            cell.context = 'vertical-scroll-bottom';\n                        } else if (y < self.scrollBox.box.v.y) {\n                            cell.dragContext = 'vertical-scroll-top';\n                            cell.context = 'vertical-scroll-top';\n                        }\n                        self.canvas.style.cursor = 'default';\n                        return cell;\n                    }\n                    if (/horizontal-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'horizontal-scroll-box';\n                        cell.context = 'horizontal-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isHorizontalScrollBar = true;\n                        if (x > self.scrollBox.box.h.x + self.scrollBox.scrollBoxWidth) {\n                            cell.dragContext = 'horizontal-scroll-right';\n                            cell.context = 'horizontal-scroll-right';\n                        } else if (x < self.scrollBox.box.h.x) {\n                            cell.dragContext = 'horizontal-scroll-left';\n                            cell.context = 'horizontal-scroll-left';\n                        }\n                        self.canvas.style.cursor = 'default';\n                        return cell;\n                    }\n                    border = getBorder(cell);\n                    // check if the border of this cell is the border of the selection and if so show move cursor in move mode\n                    moveBorder = moveMode && cell.selectionBorder && cell.selectionBorder.indexOf(border) !== -1;\n                    if (['l', 'r'].indexOf(border) !== -1\n                            && (self.attributes.allowColumnResize || moveBorder)\n                            && ((self.attributes.allowColumnResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && ((self.attributes.allowRowHeaderResize && (cell.isRowHeader || cell.isCorner)) || !(cell.isRowHeader && cell.isCorner))) {\n                        if (((cell.isColumnHeader || cell.isCorner) || (self.attributes.allowColumnResizeFromCell && cell.isNormal)) && border === 'r') {\n                            cell.context = 'ew-resize';\n                            cell.dragContext = 'ew-resize';\n                            return cell;\n                        }\n                        if (!(cell.isColumnHeader || cell.isCorner) && moveBorder) {\n                            cell.context = xBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (['t', 'b'].indexOf(border) !== -1\n                            && cell.rowIndex > -1\n                            && (self.attributes.allowRowResize || moveBorder)\n                            && ((self.attributes.allowRowResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && !cell.isColumnHeader) {\n                        if (((cell.isRowHeader || cell.isCorner) || (self.attributes.allowRowResizeFromCell && cell.isNormal)) && border === 'b') {\n                            cell.context = 'ns-resize';\n                            cell.dragContext = 'ns-resize';\n                            return cell;\n                        }\n                        if (!(cell.isRowHeader || cell.isCorner) && moveBorder) {\n                            cell.context = yBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (cell.style === 'columnHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'column-reorder';\n                        return cell;\n                    }\n                    if (cell.style === 'rowHeaderCell') {\n                        if ((self.attributes.rowGrabZoneSize + (cell.y - self.style.cellBorderWidth) < y)\n                                || !self.attributes.allowRowReordering) {\n                            cell.dragContext = 'cell';\n                            cell.context = 'cell';\n                        } else {\n                            cell.context = self.cursorGrab;\n                            cell.dragContext = 'row-reorder';\n                        }\n                        return cell;\n                    }\n                    if (cell.isGrid) {\n                        self.hasFocus = false;\n                        cell.dragContext = 'cell-grid';\n                        cell.context = 'cell-grid';\n                        return cell;\n                    }\n                    if (cell.style === 'tree-grid') {\n                        self.hasFocus = false;\n                        cell.dragContext = 'tree';\n                        cell.context = 'tree';\n                        return cell;\n                    }\n                    cell.dragContext = 'cell';\n                    cell.context = 'cell';\n                    return cell;\n                }\n            }\n            self.hasFocus = true;\n            self.canvas.style.cursor = 'default';\n            return {\n                dragContext: 'background',\n                context: 'background',\n                style: 'background',\n                isBackground: true\n            };\n        };\n        /**\n         * Gets the bounds of current selection. \n         * @returns {rect} selection.\n         * @memberof canvasDatagrid\n         * @name getSelectionBounds\n         * @method\n         */\n        self.getSelectionBounds = function () {\n            var low = {x: Infinity, y: Infinity},\n                high = {x: -Infinity, y: -Infinity};\n            self.data.forEach(function (row, rowIndex) {\n                var maxCol, minCol;\n                if (self.selections[rowIndex] && self.selections[rowIndex].length) {\n                    low.y = rowIndex < low.y ? rowIndex : low.y;\n                    high.y = rowIndex > high.y ? rowIndex : high.y;\n                    maxCol = Math.max.apply(null, self.selections[rowIndex]);\n                    minCol = Math.min.apply(null, self.selections[rowIndex]);\n                    low.x = minCol < low.x ? minCol : low.x;\n                    high.x = maxCol > high.x ? maxCol : high.x;\n                }\n            });\n            return {\n                top: low.y,\n                left: low.x,\n                bottom: high.y,\n                right: high.x\n            };\n        };\n        /**\n         * Returns an auto generated schema based on data structure.\n         * @memberof canvasDatagrid\n         * @name getSchemaFromData\n         * @method\n         * @tutorial schema\n         * @returns {schema} schema A schema based on the first item in the data array.\n         */\n        self.getSchemaFromData = function () {\n            return Object.keys(self.data[0] || {' ': ''}).map(function mapEachSchemaColumn(key, index) {\n                var type = self.getBestGuessDataType(key),\n                    i = {\n                        name: key,\n                        title: isNaN(parseInt(key, 10)) ? key : self.integerToAlpha(key).toUpperCase(),\n                        index: index,\n                        type: type,\n                        filter: self.filter(type)\n                    };\n                if (key === self.uniqueId) {\n                    i.hidden = true;\n                }\n                i[self.uniqueId] = self.getSchemaNameHash(key);\n                return i;\n            });\n        };\n        /**\n         * Clears the change log grid.changes that keeps track of changes to the data set.\n         * This does not undo changes or alter data it is simply a convince array to keep\n         * track of changes made to the data since last this method was called.\n         * @memberof canvasDatagrid\n         * @name clearChangeLog\n         * @method\n         */\n        self.clearChangeLog = function () {\n            self.changes = [];\n        };\n        /**\n         * Selects an area of the grid.\n         * @memberof canvasDatagrid\n         * @name selectArea\n         * @method\n         * @param {rect} bounds A rect object representing the selected values.\n         */\n        self.selectArea = function (bounds, ctrl) {\n            self.selectionBounds = bounds || self.selectionBounds;\n            var x, y, s = self.getSchema();\n            if (!ctrl) {\n                self.selections = [];\n            }\n            if (self.selectionBounds.top < -1\n                    || self.selectionBounds.bottom > self.data.length\n                    || self.selectionBounds.left < -1\n                    || self.selectionBounds.right > s.length) {\n                throw new Error('Impossible selection area');\n            }\n            for (x = self.selectionBounds.top; x <= self.selectionBounds.bottom; x += 1) {\n                self.selections[x] = [];\n                for (y = self.selectionBounds.left; y <= self.selectionBounds.right; y += 1) {\n                    if (self.selections[x].indexOf(y) === -1) {\n                        self.selections[x].push(y);\n                    }\n                }\n            }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Returns the maximum text width for a given column by column name.\n         * @memberof canvasDatagrid\n         * @name findColumnMaxTextLength\n         * @method\n         * @returns {number} The number of pixels wide the maximum width value in the selected column.\n         * @param {string} name The name of the column to calculate the value's width of.\n         */\n        self.findColumnMaxTextLength = function (name) {\n            var m = -Infinity;\n            if (name === 'cornerCell') {\n                self.ctx.font = self.style.rowHeaderCellFont;\n                return self.ctx.measureText((self.data.length + (self.attributes.showNewRow ? 1 : 0)).toString()).width\n                    + self.style.autosizePadding + self.style.autosizeHeaderCellPadding\n                    + self.style.rowHeaderCellPaddingRight\n                    + self.style.rowHeaderCellPaddingLeft\n                    + (self.attributes.tree ? self.style.treeArrowWidth\n                        + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight : 0);\n            }\n            self.getSchema().forEach(function (col) {\n                if (col.name !== name) { return; }\n                self.ctx.font = self.style.columnHeaderCellFont;\n                var t = self.ctx.measureText(col.title || col.name).width\n                    + self.style.headerCellPaddingRight\n                    + self.style.headerCellPaddingLeft;\n                m = t > m ? t : m;\n            });\n            self.data.forEach(function (row) {\n                self.ctx.font = self.style.cellFont;\n                var t = self.ctx.measureText(row[name]).width\n                    + self.style.cellPaddingRight\n                    + self.style.cellPaddingLeft + self.style.cellAutoResizePadding;\n                m = t > m ? t : m;\n            });\n            return m;\n        };\n        /**\n         * Gets the total width of all header columns.\n         * @memberof canvasDatagrid\n         * @name getHeaderWidth\n         * @method\n         */\n        self.getHeaderWidth = function () {\n            return self.getVisibleSchema().reduce(function (total, header) {\n                return total + (header.width || self.style.cellWidth);\n            }, 0);\n        };\n        self.formatters.string = function cellFormatterString(e) {\n            return e.cell.value !== undefined ? e.cell.value : '';\n        };\n        self.formatters.rowHeaderCell = self.formatters.string;\n        self.formatters.headerCell = self.formatters.string;\n        self.formatters.number = self.formatters.string;\n        self.formatters.int = self.formatters.string;\n        self.formatters.html = self.formatters.string;\n        self.sorters.string = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (a[columnName] === undefined || a[columnName] === null) {\n                    return 1;\n                }\n                if (b[columnName] === undefined || b[columnName] === null) {\n                    return 0;\n                }\n                if (asc) {\n                    if (!a[columnName].localeCompare) { return 1; }\n                    return a[columnName].localeCompare(b[columnName]);\n                }\n                if (!b[columnName].localeCompare) { return 1; }\n                return b[columnName].localeCompare(a[columnName]);\n            };\n        };\n        self.sorters.number = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return a[columnName] - b[columnName];\n                }\n                return b[columnName] - a[columnName];\n            };\n        };\n        self.sorters.date = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return new Date(a[columnName]).getTime()\n                        - new Date(b[columnName]).getTime();\n                }\n                return new Date(b[columnName]).getTime()\n                        - new Date(a[columnName]).getTime();\n            };\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/publicMethods.js\n// module id = 9\n// module chunks = 0"],"sourceRoot":""}