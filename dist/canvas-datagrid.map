{"version":3,"sources":["webpack://canvasDatagrid/webpack/universalModuleDefinition","webpack://canvasDatagrid/webpack/bootstrap","webpack://canvasDatagrid/./lib/defaults.js","webpack://canvasDatagrid/./lib/publicMethods.js","webpack://canvasDatagrid/./lib/dom.js","webpack://canvasDatagrid/./lib/contextMenu.js","webpack://canvasDatagrid/./lib/intf.js","webpack://canvasDatagrid/./lib/touch.js","webpack://canvasDatagrid/./lib/events.js","webpack://canvasDatagrid/./lib/draw.js","webpack://canvasDatagrid/./lib/component.js","webpack://canvasDatagrid/./lib/main.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_AMD_DEFINE_RESULT__","undefined","self","defaults","attributes","styles","apply","integerToAlpha","ordA","charCodeAt","len","String","fromCharCode","Math","floor","insertColumn","index","getSchema","length","Error","validateColumn","splice","data","forEach","row","applyDefaultValue","intf","schema","deleteColumn","addColumn","push","deleteRow","originalData","setFilter","resize","insertRow","addRow","setRowHeight","rowIndex","height","sizes","rows","draw","setColumnWidth","colIndex","width","columns","resetColumnWidths","resetRowHeights","column","applyFilter","refreshFromOrigialData","keys","columnFilters","filter","header","getHeaderByName","currentFilter","type","findRowScrollTop","scrollCache","y","RangeError","findColumnScrollLeft","columnIndex","max","x","getColummnWidth","orders","gotoCell","offsetX","offsetY","cell","targetX","targetY","sbw","scrollBox","verticalBarVisible","style","scrollBarWidth","sbh","horizontalBarVisible","scrollTo","requestAnimationFrame","getVisibleCellByIndex","scrollLeft","scrollTop","gotoRow","scrollIntoView","visibleCells","setActiveCell","activeCell","selectNone","dontDraw","selections","dispatchEvent","selectedData","getSelectedData","selectionBounds","selectAll","selectArea","top","left","right","getVisibleSchema","bottom","isColumnSelected","colIsSelected","indexOf","forEachSelectedCell","fn","expandToRow","col","selectColumn","ctrl","shift","supressEvent","e","addCol","min","scrollIndexTop","removeCol","getSelectionBounds","selectRow","st","en","ri","dragAddToSelection","dragObject","collapseTree","childGrid","childGrids","openChildren","blur","dispose","trees","cellHeight","expandTree","treeGrid","trArgs","args","treeGridAttributes","columnHeaderCellHeight","getColumnHeaderCellHeight","rowHeaderCellWidth","cornerCell","h","treeGridHeight","debug","saveAppearance","parentNode","parentGrid","nodeType","offsetHeight","offsetWidth","offsetLeft","offsetTop","offsetParent","createGrid","visible","toggleTree","fitColumnToValues","internal","canvas","findColumnMaxTextLength","minColumnWidth","isCellVisible","order","columnName","direction","sortFunction","dontSetStorageData","f","orderBy","sorters","console","warn","sort","string","setStorageData","isInGrid","moveSelection","sel","moveTo","xi","yi","getVisibleColumnIndexOf","lastSourceIndex","cidx","isColumnVisible","isRowVisible","getCellAt","useTouchScrollZones","getBorder","entitiy","borderResizeZone","border","moveBorder","tsz","touchScrollZone","moveMode","borderDragBehavior","xBorderBehavior","cursorGrab","yBorderBehavior","hasFocus","dragContext","context","test","cellBorderWidth","isScrollBar","isVerticalScrollBar","box","v","scrollBoxHeight","cursor","isHorizontalScrollBar","scrollBoxWidth","selectionBorder","allowColumnResize","allowColumnResizeFromCell","isNormal","allowRowHeaderResize","isRowHeader","isCorner","isColumnHeader","allowRowResize","allowRowResizeFromCell","rowGrabZoneSize","allowRowReordering","isGrid","isBackground","low","Infinity","high","maxCol","minCol","getSchemaFromData"," ","map","getBestGuessDataType","title","isNaN","parseInt","toUpperCase","storedSettings","visibility","hidden","clearChangeLog","changes","bounds","ev","ctx","font","rowHeaderCellFont","measureText","showNewRow","toString","autosizePadding","autosizeHeaderCellPadding","rowHeaderCellPaddingRight","rowHeaderCellPaddingLeft","tree","treeArrowWidth","treeArrowMarginLeft","treeArrowMarginRight","columnHeaderCellFont","headerCellPaddingRight","headerCellPaddingLeft","cellFont","cellPaddingRight","cellPaddingLeft","cellAutoResizePadding","getHeaderWidth","reduce","total","cellWidth","getRowHeight","scale","formatters","rowHeaderCell","headerCell","number","int","html","asc","a","b","localeCompare","date","Date","getTime","getClippingRect","ele","boundingRect","position","eleRect","scrollOffset","clipRect","w","parentRect","getRowHeaderCellWidth","clipElement","clip","scrollingElement","document","nodeName","resizeEditInput","input","editCell","pos","getBoundingClientRect","bm","gridBorderCollapse","borderWidth","mobile","mobileEditInputHeight","canvasOffsetLeft","canvasOffsetTop","ignoreScrollOffset","getLayerPos","rect","clientX","clientY","isChildGrid","endEdit","abort","newValue","oldValue","defaultValue","aborted","createNewRowData","removeChild","focus","beginEditAt","editable","adjacentCells","enumItems","enu","option","valueInEnum","getAdjacentCells","createElement","multiLine","Array","isArray","val","innerHTML","appendChild","addEventListener","body","createInlineStyle","zIndex","editCellZIndex","fontSize","editCellFontSize","stopPropagation","nx","ny","keyCode","shiftKey","preventDefault","last","first","el","className","css","canvas-datagrid-context-menu-filter-input","verticalAlign","marginLeft","padding","background","contextFilterInputBackground","color","contextFilterInputColor","contextFilterInputBorder","borderRadius","contextFilterInputBorderRadius","lineHeight","fontWeight","fontFamily","contextFilterInputFontFamily","contextFilterInputFontSize","canvas-datagrid-context-menu-filter-button","contextMenuBackground","contextMenuColor","contextFilterButtonBorder","contextFilterButtonBorderRadius","contextMenuFilterButtonFontFamily","contextMenuFilterButtonFontSize","canvas-datagrid-context-child-arrow","cssFloat","childContextMenuArrowColor","contextMenuChildArrowFontSize","contextMenuFontFamily","canvas-datagrid-autocomplete","contextMenuFontSize","contextMenuBorder","contextMenuPadding","contextMenuBorderRadius","opacity","contextMenuOpacity","overflow","canvas-datagrid-autocomplete-item","canvas-datagrid-autocomplete-item:hover","contextMenuHoverBackground","contextMenuHoverColor","canvas-datagrid-canvas","canvas-datagrid","display","canvas-datagrid-control-input","canvas-datagrid-edit-mobile-input","boxSizing","outline","margin","mobileEditFontFamily","mobileEditFontSize","editCellBorder","editCellColor","editCellBackgroundColor","appearance","webkitAppearance","mozAppearance","canvas-datagrid-edit-input","editCellPaddingLeft","editCellFontFamily","boxShadow","editCellBoxShadow","canvas-datagrid-context-menu-item-mobile","contextMenuItemMargin","contextMenuItemBorderRadius","canvas-datagrid-context-menu-item","canvas-datagrid-context-menu-item:hover","canvas-datagrid-context-menu-label","contextMenuLabelMargin","contextMenuLabelDisplay","minWidth","contextMenuLabelMinWidth","maxWidth","contextMenuLabelMaxWidth","canvas-datagrid-context-menu-mobile","whiteSpace","canvas-datagrid-context-menu","contextMenuCursor","canvas-datagrid-invalid-search-regExp","contextMenuFilterInvalidExpresion","prop","appendTo","setDom","controlInput","eventParent","onblur","parentDOMNode","parentIsCanvas","tagName","getContext","textBaseline","parentNodeStyle","setAttribute","target","touchstart","mouseup","mousedown","dblclick","click","mousemove","scrollWheel","contextmenuEvent","copy","cut","paste","keypress","keyup","keydown","zIndexTop","hoverScrollTimeout","autoCompleteContext","applyContextItemStyle","contextItemContainer","createContextMenu","items","parentContextMenu","container","upArrow","downArrow","children","selectedIndex","checkArrowVisibility","scrollHeight","startHoverScroll","contextHoverScrollAmount","setTimeout","contextHoverScrollRateMs","endHoverScroll","clearTimeout","loc","contextMenuZIndex","item","childMenuArrow","removeChildContext","relatedTarget","contextMenu","contains","removeEventListener","contextAddCallback","getAttribute","cPos","childContextMenuMarginLeft","childContextMenuMarginTop","createChildContext","addContent","content","childContextMenuArrowHTML","addItem","contextMenuArrowColor","textAlign","inputDropdown","maxHeight","innerHeight","autocompleteBottomMargin","deltaY","deltaX","contextMenuArrowUpHTML","contextMenuArrowDownHTML","contextMenuWindowMargin","innerWidth","init","clickIndex","idx","Event","set","isFinite","createFilterContextMenuItems","autoCompleteItems","iRect","filterContainer","filterLabel","filterAutoCompleteButton","filterInput","checkRegExpErrorState","invalidFilterRegEx","contextFilterInvalidRegExpBackground","contextFilterInvalidRegExpColor","createAutoCompleteContext","count","maxAutoCompleteItems","disposeAutocomplete","fillAutoComplete","onclick","disposeContextMenu","filterOptionText","replace","contextFilterButtonHTML","cf","removeFilterOptionText","overridePos","contextPosition","NativeEvent","isNormalCell","isColumnHeaderCellCap","showFilter","showCopy","copyText","execCommand","showPaste","clipBoardData","pasteText","showColumnSelector","columnSelectorText","toggleColumnVisibility","columnSelectorHiddenText","columnSelectorVisibleText","hideColumnText","showClearSettingsOption","clearSettingsOptionText","createRowOrders","createColumnOrders","columnWidth","allowSorting","showOrderByOption","showOrderByOptionTextAsc","showOrderByOptionTextDesc","addDefaultContextMenuItem","contextMenuMarginLeft","contextMenuMarginTop","mobileContextMenuMargin","createDiposeEvent","ctor","fillArray","appliedInlineStyles","cellGridAttributes","visibleRowHeights","storageName","invalidSearchExpClass","localStyleLibraryStorageKey","dataType","orderDirection","filters","frozenRow","frozenColumn","ellipsisCache","visibleRows","hovers","parsers","schemaHashes","events","scrollPixelTop","scrollIndexLeft","scrollPixelLeft","scrollModes","componentL1Events","eventNames","mouse","orderedIndex","showColumnHeaders","showRowHeaders","localStorage","setItem","JSON","stringify","tempSchema","newRow","getSchemaNameHash","drawChildGrids","gridKey","resizeChildGrids","autoScrollZone","setTimer","selectionScrollZone","selectionScrollIncrement","currentCell","scrollTimer","scrollRepeatRate","setDefaults","obj1","obj2","def","setAttributes","setStyle","autosize","colName","contextmenu","observer","disconnect","tryLoadStoredSettings","reloadStoredValues","getDomRoot","shadowRoot","host","getFontName","fontStyle","getFontHeight","parseFloat","parseStyleValue","split","initProp","propName","getStyleProperty","styleKeys","setStyleProperty","supressDrawAndEvent","isDim","dehyphenateProperty","getItem","message","parse","initialized","publicStyleKeyIntf","initScrollBox","ie","navigator","userAgent","edge","webKit","moz","cursorGrabing","cursorGrabbing","pointerLockPosition","isComponent","assertPxColor","clearPxColorAssertions","hyphenateProperty","addStyleKeyIfNoneExists","DOMStyles","getComputedStyle","concat","valueObject","filterFor","filterRegExp","pattern","exec","flags","substring","flagLength","RegExp","toLocaleUpperCase","applyComponentStyle","innerText","textContent","TypeError","gridId","currentCursor","find","scrollWidth","dragMode","eventName","scrollIndexRight","scrollIndexBottom","scrollPixelRight","scrollPixelBottom","getTypes","parseInnerHtml","callback","etl","autoGenerateSchema","autoResizeColumns","sHeight","sWidth","setScrollTop","preventScrollEvent","scroll","setScrollLeft","toFixed","widthBoxRatio","heightBoxRatio","supressDrawEvent","touchScrollTimeout","scrollAnimation","touchDelta","touchAnimateTo","animationFrames","getTouchPos","touchIndex","touches","easingFunctions","linear","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easing","touchEasingMethod","calculatePPSTimed","xPPST","touchSigmaTimed","yPPST","performance","now","calculatePPS","xPPS","touchSigma","yPPS","touchEndAnimation","touchReleaseAnimationDurationMs","stopAnimation","touchEditCell","touchCell","clearInterval","calculatePPSTimer","abs","touchDeadZone","touchingCell","changedTouches","touchStart","startingCell","touchContextTimeout","touchStartEvent","zoomAltered","touchLength","touchStart1","touchScrollStart","touchContextMenuTimeMs","setInterval","isHeader","columnHeaderClickBehavior","touchEndEvents","touchmove","passive","touchend","touchcancel","touchSelect","handleType","touchSelecting","selectionMode","ch","rw","rScrollZone","lScrollZone","bScrollZone","tScrollZone","t1","t2","touchPosition","touchPosition1","zoomDeltaStart","startScale","scaleDelta","touchZoomSensitivity","touchZoomMin","touchZoomMax","touchDuration","touchScroll","dz","touchReleaseAcceleration","scrollAnimationPPSThreshold","wheeling","unshift","sfn","defaultPrevented","getRatio","maxPixelRatio","devicePixelRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","backingStorePixelRatio","drawAfterResize","dims","vb","nb","co","isScrollBoxCorner","scrollBarBoxMargin","scrollBarBorderWidth","ratio","cellBorder","columnHeaderCellBorder","columnHeaderCellBorderWidth","dataHeight","dataWidth","accumulator","va","setCanvasSize","setScrollBoxSize","checkScrollBoxVisibility","scrollBarBoxMinSize","scrollBarBoxWidth","entities","horizontalBar","horizontalBox","verticalBar","verticalBox","corner","bar","page","pageUpDownOverlap","overflowX","horizontalBoxVisible","overflowY","verticalBoxVisible","dim","isComponet","dragBounds","sBounds","delta","ctrlKey","metaKey","persistantSelectionMode","previousCell","rowBoundaryCrossed","columnBoundaryCrossed","cellBoundaryCrossed","prefix","draggingItem","dragItem","selecting","reorderObject","dragStart","dragStartObject","ignoreNextClick","grid","checkSelectionChange","treeArrowClickRadius","treeArrowHeight","treeArrowMarginTop","dragResizeColumn","resizingStartingWidth","resizingStartingHeight","minRowHeight","resizeScrollZone","sortColumnIndex","rowOpen","globalRowResize","stopDragResize","scrollGrid","scrollPointerLock","scrollStartMode","movementX","movementY","scrollMode","scrollStart","stopScrollGrid","exitPointerLock","dragReorder","columReorder","rowReorder","allowColumnReordering","source","reorderDeadZone","reorderTarget","dragOffset","stopDragReorder","oIndex","tIndex","cr","row-reorder","column-reorder","dragMove","moveOffset","stopDragMove","movingSelection","freezeMove","freezeMarkerPosition","stopFreezeMove","startFreezeMove","lastMouseDownTarget","button","move","freeze","selected","requestPointerLock","dragging","cols","selectionFollowsActiveCell","deltaMode","touchHaltAnimation","pasteItem","clipData","mimeType","rowData","importingRow","existingRow","colKey","cellData","cName","normalizeRowData","getNextVisibleColumnIndex","visibleColumnIndex","clipboardData","dti","getAsString","outputHeaderKeys","tableRows","textRows","outputHeaders","sData","rowKeys","trRow","textRow","fCopyCell","addCellValue","join","addHeaders","setData","htmlSafe","headers","useHtml","hVal","perfCounters","cachedImagesDrawn","drawCount","perfWindowSize","entityCount","scrollDebugCounters","touchPPSCounters","step","drawHtml","img","formattedValue","cacheKey","htmlImageCache","complete","drawImage","Image","onload","loaded","drawOnAllImagesLoaded","src","btoa","radiusRect","radius","beginPath","lineTo","quadraticCurveTo","fillRect","strokeRect","fillText","text","clipFrozenArea","lastFrozenColumnPixel","lastFrozenRowPixel","fillHandle","selectionHandleType","arc","PI","fill","fillCircle","strokeHandle","stroke","strokeCircle","addBorderLine","checkScrollHeight","cx","cy","rowHeight","rd","aCell","bc","selectionBorders","moveBorders","selectionHandles","rowHeaders","u","save","fillStyle","gridBackgroundColor","ln","drawRow","allowFreezingRows","frozenMarkerBorderWidth","frozenMarkerWidth","drawFrozenRows","g","snapToRow","drawCell","restore","drawRows","cl","lineWidth","activeCellOverlayBorderWidth","strokeStyle","activeCellOverlayBorderColor","drawActiveCell","columnHeaderCell","nonFrozenHeaderWidth","drawHeaderColumnRange","start","end","rArgs","rhIndex","rowOrderIndex","drawRowHeader","isColumnHeaderCell","endCap","drawHeaders","my","mx","xHover","yHover","allowFreezingColumns","frozenMarkerHoverColor","frozenMarkerColor","frozenMarkerHoverBorderColor","frozenMarkerBorderColor","frozenMarkerActiveColor","frozenMarkerActiveBorderColor","drawFrozenMarkers","dsb","selectionOverlayBorderWidth","selectionOverlayBorderColor","drawSelectionBorders","allowMovingSelection","selectionHandleBorderWidth","selectionHandleBorderColor","selectionHandleColor","hw","selectionHandleSize","tr","br","tl","bl","addselectionHandle","az","touchSelectHandleZone","ax","ay","reorderMarkerBackgroundColor","reorderMarkerBorderWidth","reorderMarkerBorderColor","reorderMarkerIndexBorderWidth","reorderMarkerIndexBorderColor","sortRowIndex","drawReorderMarkers","moveOverlayBorderWidth","moveOverlayBorderColor","setLineDash","moveOverlayBorderSegments","drawCorner","scrollBarBorderColor","scrollBarBackgroundColor","scrollBarBoxColor","scrollBarActiveColor","scrollBarBoxBorderRadius","scrollBarCornerBorderColor","scrollBarCornerBackgroundColor","drawScrollBars","gridBorderWidth","gridBorderColor","showPerformance","pop","debugFont","perf","perfDelta","frozenColumnsWidth","getFrozenColumnsWidth","htmlImages","scrollIndex","scrollPixel","canvasOffset","touchPPS","touchPPST","size","touch","debugBackgroundColor","debugColor","drawDebug","pw","px","py","ph","debugPerfChartBackground","debugScrollHeightColor","debugScrollWidthColor","debugPerformanceColor","debugEntitiesColor","debugTouchPPSXColor","debugTouchPPSYColor","dpl","perfArr","arrIndex","useAbs","drawPerfLine","debugPerfChartTextColor","drawPerfLines","createBorderOverlayArray","drawArray","propPrefix","offsetPoint","headerIndex","columnOrderIndex","cellStyle","hovered","active","rawValue","activeHeader","orderByArrowSize","treeArrowSize","fontHeight","horizontalAlignment","verticalAlignment","paddingLeft","paddingTop","paddingRight","paddingBottom","cellWhiteSpace","cellLineHeight","lineSpacing","cellLineSpacing","calculatedLineHeight","paddedWidth","paddedHeight","userHeight","userWidth","cellHeightWithChildGrid","cellWidthWithChildGrid","mt","mr","ml","aw","ah","treeArrowColor","treeArrowBorderColor","drawTreeArrow","showRowNumbers","component","cellGridHeight","columnHeaderOrderByArrowMarginTop","columnHeaderOrderByArrowMarginLeft","columnHeaderOrderByArrowMarginRight","columnHeaderOrderByArrowWidth","columnHeaderOrderByArrowHeight","columnHeaderOrderByArrowColor","columnHeaderOrderByArrowBorderColor","drawOrderByArrow","orderByArrowWidth","filterTextPrefix","splitChar","lines","word","elWidth","elClipLength","plWidth","clippedVal","previousLine","words","textHeight","wrap","et","ellipsisText","line","cHeight","measure","wrapText","vPos","hPos","idx_ord","drawText","selectionBorderTop","selectionBorderRight","selectionHandle","selectionBorderLeft","selectionBorderBottom","selectionHandleBehavior","createHandlesOverlayArray","treeHeight","rowSansTreeHeight","__WEBPACK_AMD_DEFINE_ARRAY__","typeMap","getDefaultItem","base","toLowerCase","nextLetterCap","char","cust","supressChangeAndDrawEvents","cStyle","defs","computedStyle","getPropertyValue","strData","strSchema","strNum","boolean","strBool","str","getObservableAttributes","attrs","attr","disconnectedCallback","this","connected","connectedCallback","observe","adoptedCallback","attributeChangedCallback","attrName","oldVal","newVal","tfn","eval","MutationObserver","mutations","checkInnerHTML","checkStyle","mutation","attributeName","addedNodes","characterData","childList","subtree","querySelectorAll","slice","arguments","Grid","createShadowRoot","attachShadow","HTMLElement","customElements","observedAttributes","canvasDatagrid","require","tKeys","argKey","tKey","sKey"],"mappings":"CAAA,SAAAA,EAAAC,GACA,iBAAAC,SAAA,iBAAAC,OACAA,OAAAD,QAAAD,IACA,mBAAAG,eAAAC,IACAD,UAAAH,GACA,iBAAAC,QACAA,QAAA,eAAAD,IAEAD,EAAA,eAAAC,IARA,CASCK,OAAA,WACD,mBCTA,IAAAC,KAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAP,QAGA,IAAAC,EAAAI,EAAAE,IACAC,EAAAD,EACAE,GAAA,EACAT,YAUA,OANAU,EAAAH,GAAAI,KAAAV,EAAAD,QAAAC,IAAAD,QAAAM,GAGAL,EAAAQ,GAAA,EAGAR,EAAAD,QA0DA,OArDAM,EAAAM,EAAAF,EAGAJ,EAAAO,EAAAR,EAGAC,EAAAQ,EAAA,SAAAd,EAAAe,EAAAC,GACAV,EAAAW,EAAAjB,EAAAe,IACAG,OAAAC,eAAAnB,EAAAe,GAA0CK,YAAA,EAAAC,IAAAL,KAK1CV,EAAAgB,EAAA,SAAAtB,GACA,oBAAAuB,eAAAC,aACAN,OAAAC,eAAAnB,EAAAuB,OAAAC,aAAwDC,MAAA,WAExDP,OAAAC,eAAAnB,EAAA,cAAiDyB,OAAA,KAQjDnB,EAAAoB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAAnB,EAAAmB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFAxB,EAAAgB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAAnB,EAAAQ,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAvB,EAAA2B,EAAA,SAAAhC,GACA,IAAAe,EAAAf,KAAA2B,WACA,WAA2B,OAAA3B,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAK,EAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD7B,EAAAgC,EAAA,GAIAhC,IAAAiC,EAAA,qBClFA,IAAAC,OAoTCC,KAlTDD,EAAA,WACA,aACA,gBAAAE,GACAA,EAAAC,UACAC,aACA,6BACA,yBACA,iCACA,yBACA,4BACA,4BACA,4BACA,0BACA,sBACA,8BACA,oBACA,0BACA,yBACA,8BACA,wBACA,mDACA,qCACA,kDACA,4CACA,kCACA,+BACA,+BACA,8BACA,oBACA,aACA,gBACA,uBACA,iCACA,mCACA,uBACA,6BACA,6BACA,iBACA,YACA,wBACA,sBACA,+BACA,iDACA,sBACA,wBACA,sBACA,sBACA,oCACA,yBACA,wBACA,kCACA,mCACA,yBACA,gCACA,2BACA,+BACA,yBACA,0BACA,gBACA,kBACA,kBACA,yBACA,qDACA,uDACA,iBACA,uBACA,sBACA,sBACA,iBACA,+BACA,oBACA,oCACA,iCACA,wCACA,uBACA,6BACA,8BACA,oBACA,sBACA,oBACA,YACA,4BAEAC,SACA,uDACA,mDACA,4BACA,uCACA,qCACA,4DACA,yCACA,4CACA,yDACA,mCACA,8BACA,4BACA,6BACA,2BACA,+DACA,+CACA,yCACA,mEACA,mDACA,gEACA,gDACA,gCACA,gCACA,sBACA,6BACA,iDACA,6CACA,sBACA,iCACA,+BACA,uBACA,kBACA,gCACA,mCACA,sDACA,sCACA,wBACA,sBACA,uBACA,qBACA,yDACA,yCACA,mCACA,kBACA,+BACA,4BACA,qBACA,sBACA,qDACA,yCACA,mCACA,iCACA,6DACA,yDACA,kCACA,gEACA,4DACA,qCACA,gDACA,2CACA,8BACA,+CACA,kEACA,kDACA,oCACA,kCACA,mCACA,iCACA,+CACA,iEACA,0CACA,2DACA,qCACA,yCACA,0CACA,wCACA,qCACA,iEACA,0CACA,uCACA,uDACA,gEACA,uCACA,4CACA,8CACA,sCACA,8DACA,6DACA,gDACA,wCACA,sCACA,mDACA,yDACA,kCACA,yCACA,2CACA,gCACA,mDACA,2CACA,+DACA,uCACA,+BACA,wDACA,iDACA,sCACA,gCACA,2CACA,uCACA,qCACA,oCACA,4BACA,4BACA,8BACA,6BACA,+BACA,0BACA,uDACA,mDACA,6CACA,sCACA,kDACA,gCACA,sDACA,uDACA,qDACA,sDACA,oDACA,mDACA,kDACA,2BACA,oCACA,sDACA,kDACA,0BACA,oCACA,4BACA,0BACA,uBACA,oDACA,0DACA,qDACA,2DACA,+CACA,qDACA,8BACA,wBACA,iDACA,kCACA,6CACA,sBACA,kBACA,wBACA,uBACA,sBACA,wBACA,oBACA,uBACA,+BACA,6BACA,sCACA,8BACA,6BACA,mDACA,sCACA,mBACA,qBACA,qBACA,sDACA,kDACA,kCACA,0DACA,uCACA,0DACA,sDACA,+BACA,6CACA,wCACA,2BACA,4CACA,+DACA,+CACA,iCACA,+BACA,gCACA,8BACA,kEACA,qDACA,4CACA,0BACA,kDACA,sDACA,kDACA,4BACA,mCACA,+CACA,yBACA,2BACA,wBACA,4DACA,wDACA,sBACA,wDACA,mCACA,iDACA,0BACA,iCACA,wDACA,kCACA,kDACA,2BACA,2BACA,4CACA,sBACA,0BACA,2BACA,yBACA,sBACA,uBACA,oBAICC,MAAA9C,SAAAC,EAAAD,QAAAwC,oBCpTD,IAAAA,OAuqCCC,KArqCDD,EAAA,WACA,aACA,gBAAAE,GAQAA,EAAAK,eAAA,SAAAd,GAKA,IAJA,IAAAe,EAAA,IAAAC,WAAA,GAEAC,EADA,IAAAD,WAAA,GACAD,EAAA,EACAT,EAAA,GACAN,GAAA,GACAM,EAAAY,OAAAC,aAAAnB,EAAAiB,EAAAF,GAAAT,EACAN,EAAAoB,KAAAC,MAAArB,EAAAiB,GAAA,EAEA,OAAAX,GAWAG,EAAAa,aAAA,SAAA1C,EAAA2C,GACA,IAAAjB,EAAAG,EAAAe,YACA,GAAAlB,EAAAmB,OAAAF,EACA,UAAAG,MAAA,6CAEAjB,EAAAkB,eAAA/C,EAAA0B,GACAA,EAAAsB,OAAAL,EAAA,EAAA3C,GACA6B,EAAAoB,KAAAC,QAAA,SAAAC,GACAtB,EAAAuB,kBAAAD,EAAAnD,KAEA6B,EAAAwB,KAAAC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","file":"canvas-datagrid.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"canvasDatagrid\"] = factory();\n\telse\n\t\troot[\"canvasDatagrid\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 9);\n","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.defaults = {\n            attributes: [\n                ['allowColumnReordering', true],\n                ['allowColumnResize', true],\n                ['allowColumnResizeFromCell', false],\n                ['allowFreezingRows', false],\n                ['allowFreezingColumns', false],\n                ['allowMovingSelection', true],\n                ['allowRowHeaderResize', true],\n                ['allowRowReordering', false],\n                ['allowRowResize', true],\n                ['allowRowResizeFromCell', false],\n                ['allowSorting', true],\n                ['autoGenerateSchema', false],\n                ['autoResizeColumns', false],\n                ['borderDragBehavior', 'none'],\n                ['borderResizeZone', 10],\n                ['clearSettingsOptionText', 'Clear saved settings'],\n                ['columnHeaderClickBehavior', 'sort'],\n                ['columnSelectorHiddenText', '&nbsp;&nbsp;&nbsp;'],\n                ['columnSelectorText', 'Add/Remove columns'],\n                ['columnSelectorVisibleText', '\\u2713'],\n                ['contextHoverScrollAmount', 2],\n                ['contextHoverScrollRateMs', 5],\n                ['copyHeadersOnSelectAll', true],\n                ['copyText', 'Copy'],\n                ['debug', false],\n                ['editable', true],\n                ['ellipsisText', '...'],\n                ['filterOptionText', 'Filter %s'],\n                ['filterTextPrefix', '(filtered) '],\n                ['globalRowResize', false],\n                ['hideColumnText', 'Hide %s'],\n                ['maxAutoCompleteItems', 200],\n                ['multiLine', false],\n                ['name', ''],\n                ['pageUpDownOverlap', 1],\n                ['pasteText', 'Paste'],\n                ['persistantSelectionMode', false],\n                ['removeFilterOptionText', 'Remove filter on %s'],\n                ['reorderDeadZone', 3],\n                ['resizeScrollZone', 20],\n                ['rowGrabZoneSize', 5],\n                ['saveAppearance', true],\n                ['scrollAnimationPPSThreshold', 0.75],\n                ['scrollPointerLock', false],\n                ['scrollRepeatRate', 75],\n                ['selectionFollowsActiveCell', false],\n                ['selectionHandleBehavior', 'none'],\n                ['selectionMode', 'cell'],\n                ['selectionScrollIncrement', 20],\n                ['selectionScrollZone', 20],\n                ['showClearSettingsOption', true],\n                ['showColumnHeaders', true],\n                ['showColumnSelector', true],\n                ['showCopy', false],\n                ['showFilter', true],\n                ['showNewRow', false],\n                ['showOrderByOption', true],\n                ['showOrderByOptionTextAsc', 'Order by %s ascending'],\n                ['showOrderByOptionTextDesc', 'Order by %s descending'],\n                ['showPaste', false],\n                ['showPerformance', false],\n                ['showRowHeaders', true],\n                ['showRowNumbers', true],\n                ['snapToRow', false],\n                ['touchContextMenuTimeMs', 800],\n                ['touchDeadZone', 3],\n                ['touchEasingMethod', 'easeOutQuad'],\n                ['touchReleaseAcceleration', 1000],\n                ['touchReleaseAnimationDurationMs', 2000],\n                ['touchScrollZone', 20],\n                ['touchSelectHandleZone', 20],\n                ['touchZoomSensitivity', 0.005],\n                ['touchZoomMin', 0.5],\n                ['touchZoomMax', 1.75],\n                ['maxPixelRatio', 2],\n                ['tree', false],\n                ['treeHorizontalScroll', false]\n            ],\n            styles: [\n                ['activeCellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['activeCellBorderWidth', 1],\n                ['activeCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellFont', '16px sans-serif'],\n                ['activeCellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellHorizontalAlignment', 'left'],\n                ['activeCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['activeCellOverlayBorderWidth', 1],\n                ['activeCellPaddingBottom', 5],\n                ['activeCellPaddingLeft', 5],\n                ['activeCellPaddingRight', 5],\n                ['activeCellPaddingTop', 5],\n                ['activeCellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['activeCellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellVerticalAlignment', 'center'],\n                ['activeColumnHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeColumnHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeRowHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeRowHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['autocompleteBottomMargin', 60],\n                ['autosizeHeaderCellPadding', 8],\n                ['autosizePadding', 5],\n                ['cellAutoResizePadding', 13],\n                ['cellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['cellBorderWidth', 1],\n                ['cellColor', 'rgba(0, 0, 0, 1)'],\n                ['cellFont', '16px sans-serif'],\n                ['cellGridHeight', 250],\n                ['cellHeight', 24],\n                ['cellHeightWithChildGrid', 150],\n                ['cellHorizontalAlignment', 'left'],\n                ['cellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['cellPaddingBottom', 5],\n                ['cellPaddingLeft', 5],\n                ['cellPaddingRight', 5],\n                ['cellPaddingTop', 5],\n                ['cellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['cellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['cellVerticalAlignment', 'center'],\n                ['cellWidth', 250],\n                ['cellWidthWithChildGrid', 250],\n                ['cellWhiteSpace', 'nowrap'],\n                ['cellLineHeight', 1],\n                ['cellLineSpacing', 3],\n                ['childContextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['childContextMenuArrowHTML', '&#x25BA;'],\n                ['childContextMenuMarginLeft', -11],\n                ['childContextMenuMarginTop', -6],\n                ['columnHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellBorderColor', 'rgba(172, 172, 172, 1)'],\n                ['columnHeaderCellBorderWidth', 1],\n                ['columnHeaderCellCapBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellCapBorderColor', 'rgba(172, 172, 172, 1)'],\n                ['columnHeaderCellCapBorderWidth', 1],\n                ['columnHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['columnHeaderCellFont', '16px sans-serif'],\n                ['columnHeaderCellHeight', 25],\n                ['columnHeaderCellHorizontalAlignment', 'left'],\n                ['columnHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['columnHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['columnHeaderCellPaddingBottom', 5],\n                ['columnHeaderCellPaddingLeft', 5],\n                ['columnHeaderCellPaddingRight', 5],\n                ['columnHeaderCellPaddingTop', 5],\n                ['columnHeaderCellVerticalAlignment', 'center'],\n                ['columnHeaderOrderByArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['columnHeaderOrderByArrowBorderWidth', 1],\n                ['columnHeaderOrderByArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['columnHeaderOrderByArrowHeight', 8],\n                ['columnHeaderOrderByArrowMarginLeft', 0],\n                ['columnHeaderOrderByArrowMarginRight', 5],\n                ['columnHeaderOrderByArrowMarginTop', 6],\n                ['columnHeaderOrderByArrowWidth', 13],\n                ['contextFilterButtonBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterButtonBorderRadius', '3px'],\n                ['contextFilterButtonHTML', '&#x25BC;'],\n                ['contextFilterInputBackground', 'rgba(255,255,255,1)'],\n                ['contextFilterInputBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterInputBorderRadius', '0'],\n                ['contextFilterInputColor', 'rgba(0,0,0,1)'],\n                ['contextFilterInputFontFamily', 'sans-serif'],\n                ['contextFilterInputFontSize', '14px'],\n                ['contextFilterInvalidRegExpBackground', 'rgba(180, 6, 1, 1)'],\n                ['contextFilterInvalidRegExpColor', 'rgba(255, 255, 255, 1)'],\n                ['contextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuArrowDownHTML', '&#x25BC;'],\n                ['contextMenuArrowUpHTML', '&#x25B2;'],\n                ['contextMenuBackground', 'rgba(240, 240, 240, 1)'],\n                ['contextMenuBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextMenuBorderRadius', '3px'],\n                ['contextMenuChildArrowFontSize', '12px'],\n                ['contextMenuColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuCursor', 'default'],\n                ['contextMenuFilterButtonFontFamily', 'sans-serif'],\n                ['contextMenuFilterButtonFontSize', '10px'],\n                ['contextMenuFilterInvalidExpresion', 'rgba(237, 155, 156, 1)'],\n                ['contextMenuFontFamily', 'sans-serif'],\n                ['contextMenuFontSize', '16px'],\n                ['contextMenuHoverBackground', 'rgba(182, 205, 250, 1)'],\n                ['contextMenuHoverColor', 'rgba(43, 48, 153, 1)'],\n                ['contextMenuItemBorderRadius', '3px'],\n                ['contextMenuItemMargin', '2px'],\n                ['contextMenuLabelDisplay', 'inline-block'],\n                ['contextMenuLabelMargin', '0 3px 0 0'],\n                ['contextMenuLabelMaxWidth', '700px'],\n                ['contextMenuLabelMinWidth', '75px'],\n                ['contextMenuMarginLeft', 3],\n                ['contextMenuMarginTop', -3],\n                ['contextMenuOpacity', '0.98'],\n                ['contextMenuPadding', '2px'],\n                ['contextMenuWindowMargin', 30],\n                ['contextMenuZIndex', 10000],\n                ['cornerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cornerCellBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['debugBackgroundColor', 'rgba(0, 0, 0, .0)'],\n                ['debugColor', 'rgba(255, 15, 24, 1)'],\n                ['debugEntitiesColor', 'rgba(76, 231, 239, 1.00)'],\n                ['debugFont', '11px sans-serif'],\n                ['debugPerfChartBackground', 'rgba(29, 25, 26, 1.00)'],\n                ['debugPerfChartTextColor', 'rgba(255, 255, 255, 0.8)'],\n                ['debugPerformanceColor', 'rgba(252, 255, 37, 1.00)'],\n                ['debugScrollHeightColor', 'rgba(248, 33, 103, 1.00)'],\n                ['debugScrollWidthColor', 'rgba(66, 255, 27, 1.00)'],\n                ['debugTouchPPSXColor', 'rgba(246, 102, 24, 1.00)'],\n                ['debugTouchPPSYColor', 'rgba(186, 0, 255, 1.00)'],\n                ['display', 'inline-block'],\n                ['editCellBackgroundColor', 'white'],\n                ['editCellBorder', 'solid 1px rgba(110, 168, 255, 1)'],\n                ['editCellBoxShadow', '0 2px 5px rgba(0,0,0,0.4)'],\n                ['editCellColor', 'black'],\n                ['editCellFontFamily', 'sans-serif'],\n                ['editCellFontSize', '16px'],\n                ['editCellPaddingLeft', 4],\n                ['editCellZIndex', 10000],\n                ['frozenMarkerHoverColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerHoverBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerActiveColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerActiveBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerColor', 'rgba(222, 222, 222, 1)'],\n                ['frozenMarkerBorderColor', 'rgba(168, 168, 168, 1)'],\n                ['frozenMarkerBorderWidth', 1],\n                ['frozenMarkerWidth', 2],\n                ['gridBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['gridBorderCollapse', 'collapse'],\n                ['gridBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['gridBorderWidth', 1],\n                ['height', 'auto'],\n                ['maxHeight', 'inherit'],\n                ['maxWidth', 'inherit'],\n                ['minColumnWidth', 45],\n                ['minHeight', 'inherit'],\n                ['minRowHeight', 24],\n                ['minWidth', 'inherit'],\n                ['mobileContextMenuMargin', 10],\n                ['mobileEditInputHeight', 30],\n                ['mobileEditFontFamily', 'sans-serif'],\n                ['mobileEditFontSize', '16px'],\n                ['moveOverlayBorderWidth', 1],\n                ['moveOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['moveOverlayBorderSegments', '12, 7'],\n                ['name', 'default'],\n                ['overflowY', 'auto'],\n                ['overflowX', 'auto'],\n                ['reorderMarkerBackgroundColor', 'rgba(0, 0, 0, 0.1)'],\n                ['reorderMarkerBorderColor', 'rgba(0, 0, 0, 0.2)'],\n                ['reorderMarkerBorderWidth', 1.25],\n                ['reorderMarkerIndexBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['reorderMarkerIndexBorderWidth', 2.75],\n                ['rowHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['rowHeaderCellBorderColor', 'rgba(200, 200, 200, 1)'],\n                ['rowHeaderCellBorderWidth', 1],\n                ['rowHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellFont', '16px sans-serif'],\n                ['rowHeaderCellHeight', 25],\n                ['rowHeaderCellHorizontalAlignment', 'left'],\n                ['rowHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['rowHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['rowHeaderCellPaddingBottom', 5],\n                ['rowHeaderCellPaddingLeft', 5],\n                ['rowHeaderCellPaddingRight', 5],\n                ['rowHeaderCellPaddingTop', 5],\n                ['rowHeaderCellSelectedBackgroundColor', 'rgba(217, 217, 217, 1)'],\n                ['rowHeaderCellSelectedColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellVerticalAlignment', 'center'],\n                ['rowHeaderCellWidth', 57],\n                ['scrollBarActiveColor', 'rgba(125, 125, 125, 1)'],\n                ['scrollBarBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarBorderWidth', 0.5],\n                ['scrollBarBoxBorderRadius', 4.125],\n                ['scrollBarBoxColor', 'rgba(192, 192, 192, 1)'],\n                ['scrollBarBoxMargin', 2],\n                ['scrollBarBoxMinSize', 15],\n                ['scrollBarBoxWidth', 8],\n                ['scrollBarCornerBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarCornerBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarWidth', 11],\n                ['selectionHandleBorderColor', 'rgba(255, 255, 255, 1)'],\n                ['selectionHandleBorderWidth', 1.5],\n                ['selectionHandleColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionHandleSize', 8],\n                ['selectionHandleType', 'square'],\n                ['selectionOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionOverlayBorderWidth', 1],\n                ['treeArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['treeArrowBorderWidth', 1],\n                ['treeArrowClickRadius', 5],\n                ['treeArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['treeArrowHeight', 8],\n                ['treeArrowMarginLeft', 0],\n                ['treeArrowMarginRight', 5],\n                ['treeArrowMarginTop', 6],\n                ['treeArrowWidth', 13],\n                ['treeGridHeight', 250],\n                ['width', 'auto']\n            ]\n        };\n    };\n});\n","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        /**\n         * Converts a integer into a letter A - ZZZZZ...\n         * @memberof canvasDatagrid\n         * @name integerToAlpha\n         * @method\n         * @param {column} n The number to convert.\n         */\n        self.integerToAlpha = function (n) {\n            var ordA = 'a'.charCodeAt(0),\n                ordZ = 'z'.charCodeAt(0),\n                len = ordZ - ordA + 1,\n                s = '';\n            while (n >= 0) {\n                s = String.fromCharCode(n % len + ordA) + s;\n                n = Math.floor(n / len) - 1;\n            }\n            return s;\n        };\n        /**\n         * Inserts a new column before the specified index into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name insertColumn\n         * @method\n         * @param {column} c The column to insert into the schema.\n         * @param {number} index The index of the column to insert before.\n         */\n        self.insertColumn = function (c, index) {\n            var s = self.getSchema();\n            if (s.length < index) {\n                throw new Error('Index is beyond the length of the schema.');\n            }\n            self.validateColumn(c, s);\n            s.splice(index, 0, c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a column from the schema at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteColumn\n         * @tutorial schema\n         * @method\n         * @param {number} index The index of the column to delete.\n         */\n        self.deleteColumn = function (index) {\n            var s = self.getSchema();\n            // remove data matching this column name from data\n            self.data.forEach(function (row) {\n                delete row[s[index].name];\n            });\n            s.splice(index, 1);\n            self.intf.schema = s;\n        };\n        /**\n         * Adds a new column into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name addColumn\n         * @method\n         * @param {column} c The column to add to the schema.\n         */\n        self.addColumn = function (c) {\n            var s = self.getSchema();\n            self.validateColumn(c, s);\n            s.push(c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a row from the dataset at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteRow\n         * @method\n         * @param {number} index The index of the row to delete.\n         */\n        self.deleteRow = function (index) {\n            self.originalData.splice(index, 1);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Inserts a new row into the dataset before the specified index.\n         * @memberof canvasDatagrid\n         * @name insertRow\n         * @method\n         * @param {object} d data.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertRow = function (d, index) {\n            if (self.originalData.length < index) {\n                throw new Error('Index is beyond the length of the dataset.');\n            }\n            self.originalData.splice(index, 0, d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[index], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Adds a new row into the dataset.\n         * @memberof canvasDatagrid\n         * @name addRow\n         * @method\n         * @param {object} d data.\n         */\n        self.addRow = function (d) {\n            self.originalData.push(d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[self.originalData.length - 1], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Sets the height of a given row by index number.\n         * @memberof canvasDatagrid\n         * @name setRowHeight\n         * @method\n         * @param {number} rowIndex The index of the row to set.\n         * @param {number} height Height to set the row to.\n         */\n        self.setRowHeight = function (rowIndex, height) {\n            self.sizes.rows[rowIndex] = height;\n            self.draw(true);\n        };\n        /**\n         * Sets the width of a given column by index number.\n         * @memberof canvasDatagrid\n         * @name setColumnWidth\n         * @method\n         * @param {number} colIndex The index of the column to set.\n         * @param {number} width Width to set the column to.\n         */\n        self.setColumnWidth = function (colIndex, width) {\n            self.sizes.columns[colIndex] = width;\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the width of the columns due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetColumnWidths\n         * @tutorial schema\n         * @method\n         */\n        self.resetColumnWidths = function () {\n            self.sizes.columns = {};\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the height of the rows due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetRowHeights\n         * @tutorial schema\n         * @method\n         */\n        self.resetRowHeights = function () {\n            self.sizes.rows = {};\n            self.draw(true);\n        };\n        /**\n         * Sets the value of the filter.\n         * @memberof canvasDatagrid\n         * @name setFilter\n         * @method\n         * @param {string} column Name of the column to filter.\n         * @param {string} value The value to filter for.\n         */\n        self.setFilter = function (column, value) {\n            function applyFilter() {\n                self.refreshFromOrigialData();\n                Object.keys(self.columnFilters).forEach(function (filter) {\n                    var header = self.getHeaderByName(column);\n                    if (!header) {\n                        return;\n                    }\n                    self.currentFilter = header.filter || self.filter(column.type || 'string');\n                    self.data = self.data.filter(function (row) {\n                        return self.currentFilter(row[filter], self.columnFilters[filter]);\n                    });\n                });\n                self.resize();\n                self.draw(true);\n            }\n            if (column === undefined && value === undefined) {\n                self.columnFilters = {};\n                return applyFilter();\n            }\n            if (column && (value === '' || value === undefined)) {\n                delete self.columnFilters[column];\n            } else {\n                self.columnFilters[column] = value;\n            }\n            applyFilter();\n        };\n        /**\n         * Returns the number of pixels to scroll down to line up with row rowIndex.\n         * @memberof canvasDatagrid\n         * @name findRowScrollTop\n         * @method\n         * @param {number} rowIndex The row index of the row to scroll find.\n         */\n        self.findRowScrollTop = function (rowIndex) {\n            if (self.scrollCache.y[rowIndex] === undefined) { throw new RangeError('Row index out of range.'); }\n            return self.scrollCache.y[rowIndex];\n        };\n        /**\n         * Returns the number of pixels to scroll to the left to line up with column columnIndex.\n         * @memberof canvasDatagrid\n         * @name findColumnScrollLeft\n         * @method\n         * @param {number} columnIndex The column index of the column to find.\n         */\n        self.findColumnScrollLeft = function (columnIndex) {\n            var i = Math.max(columnIndex - 1, 0);\n            if (self.scrollCache.x[i] === undefined) { throw new Error('Column index out of range.'); }\n            return self.scrollCache.x[i] - self.getColummnWidth(self.orders.columns[columnIndex]);\n        };\n        /**\n         * Scrolls to the cell at columnIndex x, and rowIndex y.  If you define both rowIndex and columnIndex additional calculations can be made to center the cell using the target cell's height and width.  Defining only one rowIndex or only columnIndex will result in simpler calculations.\n         * @memberof canvasDatagrid\n         * @name gotoCell\n         * @method\n         * @param {number} x The column index of the cell to scroll to.\n         * @param {number} y The row index of the cell to scroll to.\n         * @param {number} [offsetX=0] Percentage offset the cell should be from the left edge (not including headers).  The default is 0, meaning the cell will appear at the left edge. Valid values are 0 through 1. 1 = Left, 0 = Right, 0.5 = Center.\n         * @param {number} [offsetY=0] Percentage offset the cell should be from the top edge (not including headers).  The default is 0, meaning the cell will appear at the top edge. Valid values are 0 through 1. 1 = Bottom, 0 = Top, 0.5 = Center.\n         */\n        self.gotoCell = function (x, y, offsetX, offsetY) {\n            var targetX = x === undefined ? undefined : self.findColumnScrollLeft(x),\n                targetY = y === undefined ? undefined : self.findRowScrollTop(y),\n                cell,\n                sbw = self.scrollBox.width - (self.scrollBox.verticalBarVisible ? self.style.scrollBarWidth : 0),\n                sbh = self.scrollBox.height - (self.scrollBox.horizontalBarVisible ? self.style.scrollBarWidth : 0);\n            offsetX = offsetX === undefined ? 0 : offsetX;\n            offsetY = offsetY === undefined ? 0 : offsetY;\n            targetX -= sbw * offsetX;\n            targetY -= sbh * offsetY;\n            if (x !== undefined && y !== undefined) {\n                self.scrollBox.scrollTo(targetX, targetY);\n                requestAnimationFrame(function () {\n                    cell = self.getVisibleCellByIndex(x, y);\n                    // HACK: just don't offset if the target cell cannot be seen\n                    // TODO: offset does not work on very small grids, not sure why\n                    if (!cell) { return; }\n                    targetX += cell.width * offsetX;\n                    targetY += cell.height * offsetY;\n                    self.scrollBox.scrollTo(targetX, targetY);\n                });\n            } else if (x !== undefined) {\n                self.scrollBox.scrollLeft = targetX;\n            } else if (y !== undefined) {\n                self.scrollBox.scrollTop = targetY;\n            }\n        };\n        /**\n         * Scrolls the row y.\n         * @memberof canvasDatagrid\n         * @name gotoRow\n         * @method\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoRow = function (y) {\n            self.gotoCell(0, y);\n        };\n        /**\n         * Scrolls the cell at cell x, row y into view if it is not already.\n         * @memberof canvasDatagrid\n         * @name scrollIntoView\n         * @method\n         * @param {number} x The column index of the cell to scroll into view.\n         * @param {number} y The row index of the cell to scroll into view.\n         * @param {number} [offsetX=0] Percentage offset the cell should be from the left edge (not including headers).  The default is 0, meaning the cell will appear at the left edge. Valid values are 0 through 1. 1 = Left, 0 = Right, 0.5 = Center.\n         * @param {number} [offsetY=0] Percentage offset the cell should be from the top edge (not including headers).  The default is 0, meaning the cell will appear at the top edge. Valid values are 0 through 1. 1 = Bottom, 0 = Top, 0.5 = Center.\n         */\n        self.scrollIntoView = function (x, y, offsetX, offsetY) {\n            if (self.visibleCells.filter(function (cell) {\n                    return (cell.rowIndex === y || y === undefined)\n                        && (cell.columnIndex === x || x === undefined)\n                        && cell.x > 0\n                        && cell.y > 0\n                        && cell.x + cell.width < self.width\n                        && cell.y + cell.height < self.height;\n                }).length === 0) {\n                self.gotoCell(x, y, offsetX, offsetY);\n            }\n        };\n        /**\n         * Sets the active cell. Requires redrawing.\n         * @memberof canvasDatagrid\n         * @name setActiveCell\n         * @method\n         * @param {number} x The column index of the cell to set active.\n         * @param {number} y The row index of the cell to set active.\n         */\n        self.setActiveCell = function (x, y) {\n            if (x < 0) { x = 0; }\n            if (y < 0) { y = 0; }\n            self.activeCell = {\n                rowIndex: y,\n                columnIndex: x\n            };\n        };\n        /**\n         * Removes the selection.\n         * @memberof canvasDatagrid\n         * @name selectNone\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectNone = function (dontDraw) {\n            self.selections = [];\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Selects every visible cell.\n         * @memberof canvasDatagrid\n         * @name selectAll\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectAll = function (dontDraw) {\n            self.selectArea({\n                top: 0,\n                left: 0,\n                right: self.getVisibleSchema().length - 1,\n                bottom: self.data.length - 1\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Returns true if the selected columnIndex is selected on every row.\n         * @memberof canvasDatagrid\n         * @name isColumnSelected\n         * @method\n         * @param {number} columnIndex The column index to check.\n         */\n        self.isColumnSelected = function (columnIndex) {\n            var colIsSelected = true;\n            self.data.forEach(function (row, rowIndex) {\n                if (!self.selections[rowIndex] || self.selections[rowIndex].indexOf(self.orders.columns[columnIndex]) === -1) {\n                    colIsSelected = false;\n                }\n            });\n            return colIsSelected;\n        };\n        /**\n         * Runs the defined method on each selected cell.\n         * @memberof canvasDatagrid\n         * @name forEachSelectedCell\n         * @method\n         * @param {number} fn The function to execute.  The signature of the function is: (data, rowIndex, columnName).\n         * @param {number} expandToRow When true the data in the array is expanded to the entire row.\n         */\n        self.forEachSelectedCell = function (fn, expandToRow) {\n            var d = [], s = expandToRow ? self.getSchema() : self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    if (col === -1 || !s[col]) { return; }\n                    fn(self.data, index, s[col].name);\n                });\n            });\n        };\n        /**\n         * Selects a column.\n         * @memberof canvasDatagrid\n         * @name selectColumn\n         * @method\n         * @param {number} columnIndex The column index to select.\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the column.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the column.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectColumn = function (columnIndex, ctrl, shift, supressEvent) {\n            var s, e, x;\n            function addCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) === -1) {\n                        self.selections[rowIndex].push(i);\n                    }\n                });\n            }\n            function removeCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) !== -1) {\n                        self.selections[rowIndex].splice(self.selections[rowIndex].indexOf(i), 1);\n                    }\n                });\n            }\n            if (shift) {\n                if (!self.activeCell) { return; }\n                s = Math.min(self.activeCell.columnIndex, columnIndex);\n                e = Math.max(self.activeCell.columnIndex, columnIndex);\n                for (x = s; e > x; x += 1) {\n                    addCol(x);\n                }\n            }\n            if (!ctrl && !shift) {\n                self.selections = [];\n                self.activeCell.columnIndex = columnIndex;\n                self.activeCell.rowIndex = self.scrollIndexTop;\n            }\n            if (ctrl && self.isColumnSelected(columnIndex)) {\n                removeCol(columnIndex);\n            } else {\n                addCol(columnIndex);\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.getSelectionBounds()\n            });\n        };\n        /**\n         * Selects a row.\n         * @memberof canvasDatagrid\n         * @name selectRow\n         * @method\n         * @param {number} rowIndex The row index to select.\n         * @param {boolean} ctrl When true, behaves as if you were holding control/command when you clicked the row.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the row.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectRow = function (rowIndex, ctrl, shift, supressEvent) {\n            var x, st, en, s = self.getVisibleSchema();\n            function addRow(ri) {\n                self.selections[ri] = [];\n                self.selections[ri].push(-1);\n                s.forEach(function (col, index) {\n                    self.selections[ri].push(self.orders.columns.indexOf(col.index));\n                });\n            }\n            if (self.dragAddToSelection === false || self.dragObject === undefined) {\n                if (self.selections[rowIndex] && self.selections[rowIndex].length - 1 === s.length) {\n                    if (ctrl) {\n                        self.selections[rowIndex] = [];\n                        return;\n                    }\n                }\n            }\n            if (self.dragAddToSelection === true || self.dragObject === undefined) {\n                if (shift && self.dragObject === undefined) {\n                    if (!self.activeCell) { return; }\n                    st = Math.min(self.activeCell.rowIndex, rowIndex);\n                    en = Math.max(self.activeCell.rowIndex, rowIndex);\n                    for (x = st; en >= x; x += 1) {\n                        addRow(x);\n                    }\n                } else {\n                    addRow(rowIndex);\n                }\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Collapse a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name collapseTree\n         * @method\n         * @param {number} index The index of the row to collapse.\n         */\n        self.collapseTree = function (rowIndex) {\n            self.dispatchEvent('collapsetree', {\n                childGrid: self.childGrids[rowIndex],\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowIndex].blur();\n            self.openChildren[rowIndex].dispose();\n            delete self.openChildren[rowIndex];\n            delete self.sizes.trees[rowIndex];\n            delete self.childGrids[rowIndex];\n            self.dispatchEvent('resizerow', {\n                cellHeight: self.style.cellHeight\n            });\n            self.resize(true);\n            self.draw(true);\n        };\n        /**\n         * Expands a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name expandTree\n         * @method\n         * @param {number} index The index of the row to expand.\n         */\n        self.expandTree = function (rowIndex) {\n            var trArgs = self.args.treeGridAttributes || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth,\n                h = self.sizes.trees[rowIndex] || self.style.treeGridHeight,\n                treeGrid;\n            if (!self.childGrids[rowIndex]) {\n                trArgs.debug = self.attributes.debug;\n                trArgs.name = self.attributes.saveAppearance ? self.attributes.name + 'tree' + rowIndex : undefined;\n                trArgs.style = trArgs.style || self.style;\n                trArgs.parentNode = {\n                    parentGrid: self.intf,\n                    nodeType: 'canvas-datagrid-tree',\n                    offsetHeight: h,\n                    offsetWidth: self.width - rowHeaderCellWidth,\n                    header: { width: self.width - rowHeaderCellWidth },\n                    offsetLeft: rowHeaderCellWidth,\n                    offsetTop: columnHeaderCellHeight,\n                    offsetParent: self.intf.parentNode,\n                    parentNode: self.intf.parentNode,\n                    style: 'tree',\n                    data: self.data[rowIndex]\n                };\n                treeGrid = self.createGrid(trArgs);\n                self.childGrids[rowIndex] = treeGrid;\n            }\n            treeGrid = self.childGrids[rowIndex];\n            treeGrid.visible = true;\n            self.dispatchEvent('expandtree', {\n                treeGrid: treeGrid,\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowIndex] = treeGrid;\n            self.sizes.trees[rowIndex] = h;\n            self.dispatchEvent('resizerow', {height: self.style.cellHeight});\n            self.resize(true);\n        };\n        /**\n         * Toggles tree grid open and close by row index.\n         * @memberof canvasDatagrid\n         * @name toggleTree\n         * @method\n         * @param {number} index The index of the row to toggle.\n         */\n        self.toggleTree = function (rowIndex) {\n            var i = self.openChildren[rowIndex];\n            if (i) {\n                return self.collapseTree(rowIndex);\n            }\n            self.expandTree(rowIndex);\n        };\n        /**\n         * Returns a header from the schema by name.\n         * @memberof canvasDatagrid\n         * @name getHeaderByName\n         * @tutorial schema\n         * @method\n         * @returns {header} header with the selected name, or undefined.\n         * @param {string} name The name of the column to resize.\n         */\n        self.getHeaderByName = function (name) {\n            var x, i = self.getSchema();\n            for (x = 0; x < i.length; x += 1) {\n                if (i[x].name === name) {\n                    return i[x];\n                }\n            }\n        };\n        /**\n         * Resizes a column to fit the longest value in the column. Call without a value to resize all columns.\n         * Warning, can be slow on very large record sets (1m records ~3-5 seconds on an i7).\n         * @memberof canvasDatagrid\n         * @name fitColumnToValues\n         * @method\n         * @param {string} name The name of the column to resize.\n         */\n        self.fitColumnToValues = function (name, internal) {\n            if (!self.canvas) { return; }\n            self.sizes.columns[name === 'cornerCell' ? -1 : self.getHeaderByName(name).index]\n                = Math.max(self.findColumnMaxTextLength(name), self.style.minColumnWidth);\n            if (!internal) {\n                self.resize();\n                self.draw(true);\n            }\n        };\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @overload\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {number} columnIndex The column index of the cell to check.\n         * @param {number} rowIndex The row index of the cell to check.\n         */\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {cell} cell The cell to check for.  Alternatively you can pass an object { x: <x-pixel-value>, y: <y-pixel-value> }.\n         */\n        self.isCellVisible = function (cell, rowIndex) {\n            // overload\n            if (rowIndex !== undefined) {\n                return self.visibleCells.filter(function (c) {\n                    return c.columnIndex === cell && c.rowIndex === rowIndex;\n                }).length > 0;\n            }\n            var x, l = self.visibleCells.length;\n            for (x = 0; x < l; x += 1) {\n                if (cell.x === self.visibleCells[x].x && cell.y === self.visibleCells[x].y) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n         * Sets the order of the data.\n         * @memberof canvasDatagrid\n         * @name order\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} columnName Name of the column to be sorted.\n         * @param {string} direction `asc` for ascending or `desc` for descending.\n         * @param {function} [sortFunction] When defined, override the default sorting method defined in the column's schema and use this one.\n         * @param {bool} [dontSetStorageData] Don't store this setting for future use.\n         */\n        self.order = function (columnName, direction, sortFunction, dontSetStorageData) {\n            var f,\n                c = self.getSchema().filter(function (col) {\n                    return col.name === columnName;\n                });\n            if (self.dispatchEvent('beforesortcolumn', {name: columnName, direction: direction})) { return; }\n            self.orderBy = columnName;\n            if (!self.data || self.data.length === 0) { return; }\n            if (c.length === 0) {\n                throw new Error('Cannot sort.  No such column name');\n            }\n            f = sortFunction || self.sorters[c[0].type];\n            if (!f && c[0].type !== undefined) {\n                console.warn('Cannot sort type \"%s\" falling back to string sort.', c[0].type);\n            }\n            self.data = self.data.sort(typeof f === 'function' ? f(columnName, direction) : self.sorters.string);\n            self.dispatchEvent('sortcolumn', {name: columnName, direction: direction});\n            self.draw(true);\n            if (dontSetStorageData) { return; }\n            self.setStorageData();\n        };\n        self.isInGrid = function (e) {\n            if (e.x < 0\n                    || e.x > self.width\n                    || e.y < 0\n                    || e.y > self.height) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Moves the current selection relative to the its current position.  Note: this method does not move the selected data, just the selection itself.\n         * @memberof canvasDatagrid\n         * @name moveSelection\n         * @method\n         * @param {number} offsetX The number of columns to offset the selection.\n         * @param {number} offsetY The number of rows to offset the selection.\n         */\n        self.moveSelection = function (offsetX, offsetY) {\n            var sel = [];\n            self.selections.forEach(function (row, rowIndex) {\n                sel[rowIndex + offsetY] = [];\n                row.forEach(function (colIndex) {\n                    sel[rowIndex + offsetY].push(colIndex + offsetX);\n                });\n            });\n            self.selections = sel;\n        };\n        /**\n         * Moves data in the provided selection to another position in the grid.  Moving data off the edge of the schema (columns/x) will truncate data.\n         * @memberof canvasDatagrid\n         * @name moveTo\n         * @method\n         * @param {array} sel 2D array representing selected rows and columns.  `canvasDatagrid.selections` is in this format and can be used here.\n         * @param {number} x The column index to start inserting the selection at.\n         * @param {number} y The row index to start inserting the selection at.\n         */\n        self.moveTo = function (sel, x, y) {\n            var d = self.getSelectedData(),\n                s = self.getVisibleSchema(),\n                l = sel.length,\n                xi,\n                yi = y - 1;\n            sel.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) { return; }\n                row.forEach(function (colIndex) {\n                    // intentional redef of colIndex\n                    colIndex = self.getVisibleColumnIndexOf(colIndex);\n                    if (!s[colIndex]) { return; }\n                    if (!self.data[index]) { self.data[index] = {}; }\n                    self.data[index][s[colIndex].name] = null;\n                });\n            });\n            sel.forEach(function (row, index) {\n                var lastSourceIndex;\n                yi += 1;\n                xi = self.getVisibleColumnIndexOf(x);\n                row.forEach(function (col, cidx) {\n                    col = self.getVisibleColumnIndexOf(col);\n                    if (cidx > 0) {\n                        // this confusing bit of nonsense figures out\n                        // if the selection has skipped cells\n                        xi += col - lastSourceIndex;\n                    }\n                    lastSourceIndex = col;\n                    if (col === -1\n                            || !s[xi]\n                            || !s[col]\n                            || self.data.length - 1 < yi\n                            || yi < 0) { return; }\n                    if (!self.data[yi]) { self.data[yi] = {}; }\n                    self.data[yi][s[xi].name] = d[index][s[col].name];\n                });\n            });\n        };\n        /**\n         * Checks if a given column is visible.\n         * @memberof canvasDatagrid\n         * @name isColumnVisible\n         * @method\n         * @returns {boolean} When true, the column is visible.\n         * @param {number} columnIndex Column index.\n         */\n        self.isColumnVisible = function (columnIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === columnIndex;\n            }).length > 0;\n        };\n        /**\n         * Checks if a given row is visible.\n         * @memberof canvasDatagrid\n         * @name isRowVisible\n         * @method\n         * @returns {boolean} When true, the row is visible.\n         * @param {number} rowIndex Row index.\n         */\n        self.isRowVisible = function (rowIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.rowIndex === rowIndex;\n            }).length > 0;\n        };\n        /**\n         * Gets the cell at columnIndex and rowIndex.\n         * @memberof canvasDatagrid\n         * @name getVisibleCellByIndex\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Column index.\n         * @param {number} y Row index.\n         */\n        self.getVisibleCellByIndex = function (x, y) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === x && c.rowIndex === y;\n            })[0];\n        };\n        /**\n         * Gets the cell at grid pixel coordinate x and y.  Author's note.  This function ties drawing and events together.  This is a very complex function and is core to the component.\n         * @memberof canvasDatagrid\n         * @name getCellAt\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Number of pixels from the left.\n         * @param {number} y Number of pixels from the top.\n         */\n        self.getCellAt = function (x, y, useTouchScrollZones) {\n            function getBorder(entitiy) {\n                if (entitiy.x + entitiy.width - (self.attributes.borderResizeZone * 0.4) < x && entitiy.x + entitiy.width + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'r';\n                }\n                if (entitiy.x - (self.attributes.borderResizeZone * 0.4) < x && entitiy.x + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'l';\n                }\n                if (entitiy.y + entitiy.height - (self.attributes.borderResizeZone * 0.4) < y && entitiy.y + entitiy.height + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 'b';\n                }\n                if (entitiy.y - (self.attributes.borderResizeZone * 0.4) < y && entitiy.y + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 't';\n                }\n            }\n            if (!self.visibleCells) { return; }\n            var border,\n                tsz = useTouchScrollZones ? self.attributes.touchScrollZone : 0,\n                moveMode = self.attributes.borderDragBehavior === 'move',\n                i,\n                l = self.visibleCells.length,\n                moveBorder,\n                xBorderBehavior = moveMode ? self.cursorGrab : 'ew-resize',\n                yBorderBehavior = moveMode ? self.cursorGrab : 'ns-resize',\n                cell,\n                entitiy;\n            if (!self.visibleCells || !self.visibleCells.length) { return; }\n            self.hasFocus = true;\n            if (!(y < self.height\n                && y > 0\n                && x < self.width\n                && x > 0)) {\n                self.hasFocus = false;\n                return {\n                    dragContext: 'inherit',\n                    context: 'inherit'\n                };\n            }\n            for (i = 0; i < l; i += 1) {\n                cell = self.visibleCells[i];\n                // interactive dimensions of the cell.  used for touch \"over size\" zones\n                entitiy = {\n                    x: cell.x,\n                    y: cell.y,\n                    height: cell.height,\n                    width: cell.width\n                };\n                if (useTouchScrollZones && /(vertical|horizontal)-scroll-/.test(cell.style)) {\n                    entitiy.x -= tsz;\n                    entitiy.y -= tsz;\n                    entitiy.height += tsz;\n                    entitiy.width += tsz;\n                }\n                if (entitiy.x - self.style.cellBorderWidth < x\n                        && entitiy.x + entitiy.width + self.style.cellBorderWidth > x\n                        && entitiy.y - self.style.cellBorderWidth < y\n                        && entitiy.y + entitiy.height + self.style.cellBorderWidth > y) {\n                    if (/frozen-row-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'row-resize';\n                        return cell;\n                    }\n                    if (/frozen-column-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'col-resize';\n                        return cell;\n                    }\n                    if (/selection-handle-/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'crosshair';\n                        return cell;\n                    }\n                    if (/vertical-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'vertical-scroll-box';\n                        cell.context = 'vertical-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isVerticalScrollBar = true;\n                        if (y > self.scrollBox.box.v.y + self.scrollBox.scrollBoxHeight) {\n                            cell.dragContext = 'vertical-scroll-bottom';\n                            cell.context = 'vertical-scroll-bottom';\n                        } else if (y < self.scrollBox.box.v.y) {\n                            cell.dragContext = 'vertical-scroll-top';\n                            cell.context = 'vertical-scroll-top';\n                        }\n                        self.cursor = 'default';\n                        return cell;\n                    }\n                    if (/horizontal-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'horizontal-scroll-box';\n                        cell.context = 'horizontal-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isHorizontalScrollBar = true;\n                        if (x > self.scrollBox.box.h.x + self.scrollBox.scrollBoxWidth) {\n                            cell.dragContext = 'horizontal-scroll-right';\n                            cell.context = 'horizontal-scroll-right';\n                        } else if (x < self.scrollBox.box.h.x) {\n                            cell.dragContext = 'horizontal-scroll-left';\n                            cell.context = 'horizontal-scroll-left';\n                        }\n                        self.cursor = 'default';\n                        return cell;\n                    }\n                    border = getBorder(entitiy);\n                    // check if the border of this cell is the border of the selection and if so show move cursor in move mode\n                    moveBorder = moveMode && cell.selectionBorder && cell.selectionBorder.indexOf(border) !== -1;\n                    if (['l', 'r'].indexOf(border) !== -1\n                            && (self.attributes.allowColumnResize || moveBorder)\n                            && ((self.attributes.allowColumnResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && ((self.attributes.allowRowHeaderResize && (cell.isRowHeader || cell.isCorner)) || !(cell.isRowHeader && cell.isCorner))) {\n                        if (((cell.isColumnHeader || cell.isCorner) || (self.attributes.allowColumnResizeFromCell && cell.isNormal)) && border === 'r') {\n                            cell.context = 'ew-resize';\n                            cell.dragContext = 'ew-resize';\n                            return cell;\n                        }\n                        if (!(cell.isColumnHeader || cell.isCorner) && moveBorder) {\n                            cell.context = xBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (['t', 'b'].indexOf(border) !== -1\n                            && cell.rowIndex > -1\n                            && (self.attributes.allowRowResize || moveBorder)\n                            && ((self.attributes.allowRowResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && !cell.isColumnHeader) {\n                        if (((cell.isRowHeader || cell.isCorner) || (self.attributes.allowRowResizeFromCell && cell.isNormal)) && border === 'b') {\n                            cell.context = 'ns-resize';\n                            cell.dragContext = 'ns-resize';\n                            return cell;\n                        }\n                        if (!(cell.isRowHeader || cell.isCorner) && moveBorder) {\n                            cell.context = yBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (cell.style === 'columnHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'column-reorder';\n                        return cell;\n                    }\n                    if (cell.style === 'rowHeaderCell') {\n                        if ((self.attributes.rowGrabZoneSize + (cell.y - self.style.cellBorderWidth) < y)\n                                || !self.attributes.allowRowReordering) {\n                            cell.dragContext = 'cell';\n                            cell.context = 'cell';\n                        } else {\n                            cell.context = self.cursorGrab;\n                            cell.dragContext = 'row-reorder';\n                        }\n                        return cell;\n                    }\n                    if (cell.isGrid) {\n                        self.hasFocus = false;\n                        cell.dragContext = 'cell-grid';\n                        cell.context = 'cell-grid';\n                        return cell;\n                    }\n                    if (cell.style === 'tree-grid') {\n                        self.hasFocus = false;\n                        cell.dragContext = 'tree';\n                        cell.context = 'tree';\n                        return cell;\n                    }\n                    cell.dragContext = 'cell';\n                    cell.context = 'cell';\n                    return cell;\n                }\n            }\n            self.hasFocus = true;\n            self.cursor = 'default';\n            return {\n                dragContext: 'background',\n                context: 'background',\n                style: 'background',\n                isBackground: true\n            };\n        };\n        /**\n         * Gets the bounds of current selection. \n         * @returns {rect} selection.\n         * @memberof canvasDatagrid\n         * @name getSelectionBounds\n         * @method\n         */\n        self.getSelectionBounds = function () {\n            var low = {x: Infinity, y: Infinity},\n                high = {x: -Infinity, y: -Infinity};\n            self.selections.forEach(function (row, rowIndex) {\n                var maxCol, minCol;\n                low.y = rowIndex < low.y ? rowIndex : low.y;\n                high.y = rowIndex > high.y ? rowIndex : high.y;\n                maxCol = Math.max.apply(null, row);\n                minCol = Math.min.apply(null, row);\n                low.x = minCol < low.x ? minCol : low.x;\n                high.x = maxCol > high.x ? maxCol : high.x;\n            });\n            return {\n                top: low.y,\n                left: low.x,\n                bottom: high.y,\n                right: high.x\n            };\n        };\n        /**\n         * Returns an auto generated schema based on data structure.\n         * @memberof canvasDatagrid\n         * @name getSchemaFromData\n         * @method\n         * @tutorial schema\n         * @returns {schema} schema A schema based on the first item in the data array.\n         */\n        self.getSchemaFromData = function (d) {\n            d = d || self.data;\n            return Object.keys(d[0] || {' ': ''}).map(function mapEachSchemaColumn(key, index) {\n                var type = self.getBestGuessDataType(key, d),\n                    i = {\n                        name: key,\n                        title: isNaN(parseInt(key, 10)) ? key : self.integerToAlpha(key).toUpperCase(),\n                        index: index,\n                        type: type,\n                        filter: self.filter(type)\n                    };\n                if (self.storedSettings\n                        && self.storedSettings.visibility\n                        && self.storedSettings.visibility[i.name] !== undefined) {\n                    i.hidden = !self.storedSettings.visibility[i.name];\n                }\n                return i;\n            });\n        };\n        /**\n         * Clears the change log grid.changes that keeps track of changes to the data set.\n         * This does not undo changes or alter data it is simply a convince array to keep\n         * track of changes made to the data since last this method was called.\n         * @memberof canvasDatagrid\n         * @name clearChangeLog\n         * @method\n         */\n        self.clearChangeLog = function () {\n            self.changes = [];\n        };\n        /**\n         * Selects an area of the grid.\n         * @memberof canvasDatagrid\n         * @name selectArea\n         * @method\n         * @param {rect} bounds A rect object representing the selected values.\n         */\n        self.selectArea = function (bounds, ctrl) {\n            self.selectionBounds = bounds || self.selectionBounds;\n            var ev, x, y, s = self.getSchema();\n            if (!ctrl) {\n                self.selections = [];\n            }\n            if (self.selectionBounds.top < -1\n                    || self.selectionBounds.bottom > self.data.length\n                    || self.selectionBounds.left < -1\n                    || self.selectionBounds.right > s.length) {\n                throw new Error('Impossible selection area');\n            }\n            for (x = self.selectionBounds.top; x <= self.selectionBounds.bottom; x += 1) {\n                self.selections[x] = [];\n                for (y = self.selectionBounds.left; y <= self.selectionBounds.right; y += 1) {\n                    if (self.selections[x].indexOf(y) === -1) {\n                        self.selections[x].push(y);\n                    }\n                }\n            }\n            ev = {\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            };\n            Object.defineProperty(ev, 'selectedData', {\n                get: function () {\n                    return self.getSelectedData();\n                }\n            });\n            self.dispatchEvent('selectionchanged', ev);\n        };\n        /**\n         * Returns the maximum text width for a given column by column name.\n         * @memberof canvasDatagrid\n         * @name findColumnMaxTextLength\n         * @method\n         * @returns {number} The number of pixels wide the maximum width value in the selected column.\n         * @param {string} name The name of the column to calculate the value's width of.\n         */\n        self.findColumnMaxTextLength = function (name) {\n            var m = -Infinity;\n            if (name === 'cornerCell') {\n                self.ctx.font = self.style.rowHeaderCellFont;\n                return self.ctx.measureText((self.data.length + (self.attributes.showNewRow ? 1 : 0)).toString()).width\n                    + self.style.autosizePadding + self.style.autosizeHeaderCellPadding\n                    + self.style.rowHeaderCellPaddingRight\n                    + self.style.rowHeaderCellPaddingLeft\n                    + (self.attributes.tree ? self.style.treeArrowWidth\n                        + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight : 0);\n            }\n            self.getSchema().forEach(function (col) {\n                if (col.name !== name) { return; }\n                self.ctx.font = self.style.columnHeaderCellFont;\n                var t = self.ctx.measureText(col.title || col.name).width\n                    + self.style.headerCellPaddingRight\n                    + self.style.headerCellPaddingLeft;\n                m = t > m ? t : m;\n            });\n            self.data.forEach(function (row) {\n                self.ctx.font = self.style.cellFont;\n                var t = self.ctx.measureText(row[name]).width\n                    + self.style.cellPaddingRight\n                    + self.style.cellPaddingLeft + self.style.cellAutoResizePadding;\n                m = t > m ? t : m;\n            });\n            return m;\n        };\n        /**\n         * Gets the total width of all header columns.\n         * @memberof canvasDatagrid\n         * @name getHeaderWidth\n         * @method\n         */\n        self.getHeaderWidth = function () {\n            return self.getVisibleSchema().reduce(function (total, header) {\n                return total + (header.width || self.style.cellWidth);\n            }, 0);\n        };\n        /**\n         * Gets the height of a row by index.\n         * @memberof canvasDatagrid\n         * @name getRowHeight\n         * @method\n         * @param {number} rowIndex The row index to lookup.\n         */\n        self.getRowHeight = function (rowIndex) {\n            return ((self.sizes.rows[rowIndex]\n                    || self.style.cellHeight) * self.scale);\n        };\n        /**\n         * Gets the width of a column by index.\n         * @memberof canvasDatagrid\n         * @name getColummnWidth\n         * @method\n         * @param {number} columnIndex The column index to lookup.\n         */\n        self.getColummnWidth = function (columnIndex) {\n            return ((self.sizes.columns[columnIndex]\n                    || self.getSchema()[columnIndex].width\n                    || self.style.cellWidth) * self.scale);\n        };\n        self.formatters.string = function cellFormatterString(e) {\n            return e.cell.value !== undefined ? e.cell.value : '';\n        };\n        self.formatters.rowHeaderCell = self.formatters.string;\n        self.formatters.headerCell = self.formatters.string;\n        self.formatters.number = self.formatters.string;\n        self.formatters.int = self.formatters.string;\n        self.formatters.html = self.formatters.string;\n        self.sorters.string = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (a[columnName] === undefined || a[columnName] === null) {\n                    return 1;\n                }\n                if (b[columnName] === undefined || b[columnName] === null) {\n                    return 0;\n                }\n                if (asc) {\n                    if (!a[columnName].localeCompare) { return 1; }\n                    return a[columnName].localeCompare(b[columnName]);\n                }\n                if (!b[columnName].localeCompare) { return 1; }\n                return b[columnName].localeCompare(a[columnName]);\n            };\n        };\n        self.sorters.number = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return a[columnName] - b[columnName];\n                }\n                return b[columnName] - a[columnName];\n            };\n        };\n        self.sorters.date = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return new Date(a[columnName]).getTime()\n                        - new Date(b[columnName]).getTime();\n                }\n                return new Date(b[columnName]).getTime()\n                        - new Date(a[columnName]).getTime();\n            };\n        };\n    };\n});\n","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.getClippingRect = function (ele) {\n            var boundingRect = self.position(self.parentNode),\n                eleRect = self.position(ele),\n                s = self.scrollOffset(self.canvas),\n                clipRect = {\n                    x: 0,\n                    y: 0,\n                    h: 0,\n                    w: 0\n                },\n                parentRect = {\n                    x: -Infinity,\n                    y: -Infinity,\n                    h: Infinity,\n                    w: Infinity\n                },\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth();\n            boundingRect.top -= s.top;\n            boundingRect.left -= s.left;\n            eleRect.top -= s.top;\n            eleRect.left -= s.left;\n            clipRect.h = boundingRect.top + boundingRect.height - ele.offsetTop - self.style.scrollBarWidth;\n            clipRect.w = boundingRect.left + boundingRect.width - ele.offsetLeft - self.style.scrollBarWidth;\n            clipRect.x = boundingRect.left + (eleRect.left * -1) + rowHeaderCellWidth;\n            clipRect.y = boundingRect.top + (eleRect.top * -1) + columnHeaderCellHeight;\n            return {\n                x: clipRect.x > parentRect.x ? clipRect.x : parentRect.x,\n                y: clipRect.y > parentRect.y ? clipRect.y : parentRect.y,\n                h: clipRect.h < parentRect.h ? clipRect.h : parentRect.h,\n                w: clipRect.w < parentRect.w ? clipRect.w : parentRect.w\n            };\n        };\n        self.clipElement = function (ele) {\n            var clipRect = self.getClippingRect(ele);\n            if (clipRect.w < 0) { clipRect.w = 0; }\n            if (clipRect.h < 0) { clipRect.h = 0; }\n            ele.style.clip = 'rect('\n                + clipRect.y + 'px,'\n                + clipRect.w + 'px,'\n                + clipRect.h + 'px,'\n                + clipRect.x + 'px'\n                + ')';\n            // INFO https://developer.mozilla.org/en-US/docs/Web/CSS/clip\n            // clip has been \"deprecated\" for clipPath.  Of course nothing but chrome\n            // supports clip path, so we'll keep using clip until someday clipPath becomes\n            // more widely support.  The code below works correctly, but setting clipPath and clip\n            // at the same time has undesirable results.\n            // ele.style.clipPath = 'polygon('\n            //     + clipRect.x + 'px ' + clipRect.y + 'px,'\n            //     + clipRect.x + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.y + 'px'\n            //     + ')';\n        };\n        self.scrollOffset = function (e) {\n            var x = 0, y = 0, scrollingElement = document.scrollingElement || { scrollLeft: 0, scrollTop: 0 };\n            while (e.parentNode && e.nodeName !== 'CANVAS-DATAGRID' && e !== self.intf) {\n                if (e.nodeType !== 'canvas-datagrid-tree'\n                        && e.nodeType !== 'canvas-datagrid-cell') {\n                    x -= e.scrollLeft;\n                    y -= e.scrollTop;\n                }\n                e = e.parentNode;\n            }\n            return {\n                left: x - scrollingElement.scrollLeft,\n                top: y - scrollingElement.scrollTop\n            };\n        };\n        self.resizeEditInput = function () {\n            if (self.input && self.input.editCell) {\n                var pos = self.canvas.getBoundingClientRect(),\n                    s = self.scrollOffset(self.intf),\n                    bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                    borderWidth = (self.style.cellBorderWidth * bm),\n                    cell = self.getVisibleCellByIndex(self.input.editCell.columnIndex, self.input.editCell.rowIndex)\n                        || {x: -100, y: -100, height: 0, width: 0};\n                if (self.mobile) {\n                    self.input.style.left = '0';\n                    self.input.style.top = (self.height - self.style.mobileEditInputHeight) - borderWidth - 1 + 'px';\n                    self.input.style.height = self.style.mobileEditInputHeight + 'px';\n                    self.input.style.width = self.width - borderWidth - 1 + 'px';\n                    return;\n                }\n                self.input.style.left = pos.left + cell.x + self.canvasOffsetLeft - s.left + 'px';\n                self.input.style.top = pos.top + cell.y - self.style.cellBorderWidth + self.canvasOffsetTop - s.top + 'px';\n                self.input.style.height = cell.height - borderWidth + 'px';\n                self.input.style.width = cell.width - self.style.cellPaddingLeft + 'px';\n                self.clipElement(self.input);\n            }\n        };\n        self.position = function (e, ignoreScrollOffset) {\n            var x = 0, y = 0, s = e, h, w;\n            while (e.offsetParent && e.nodeName !== 'CANVAS-DATAGRID') {\n                x += e.offsetLeft;\n                y += e.offsetTop;\n                h = e.offsetHeight;\n                w = e.offsetWidth;\n                e = e.offsetParent;\n            }\n            if (ignoreScrollOffset) {\n                return {left: x, top: y, height: h, width: w};\n            }\n            e = s;\n            s = self.scrollOffset(e);\n            return { left: x + s.left, top: y + s.top, height: h, width: w };\n        };\n        self.getLayerPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.clientX - rect.left,\n                    y: e.clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        /**\n         * Ends editing, optionally aborting the edit.\n         * @memberof canvasDatagrid\n         * @name endEdit\n         * @method\n         * @param {boolean} abort When true, abort the edit.\n         */\n        self.endEdit = function (abort) {\n            var cell = self.input.editCell,\n                y = cell.rowIndex;\n            function abortEdit() {\n                abort = true;\n            }\n            if (self.dispatchEvent('beforeendedit', {\n                    cell: cell,\n                    newValue: self.input.value,\n                    oldValue: cell.value,\n                    abort: abortEdit,\n                    input: self.input\n                })) { return false; }\n            if (self.input.value !== cell.value && !abort) {\n                self.changes[y] = self.changes[y] || {};\n                self.changes[y][cell.header.name] = self.input.value;\n                if (!cell.data) {\n                    self.data[cell.rowIndex] = {};\n                    cell.data = self.data[cell.rowIndex];\n                }\n                cell.data[cell.header.name] = self.input.value;\n                if (y === self.data.length) {\n                    if (self.dispatchEvent('newrow', {\n                            value: self.input.value,\n                            defaultValue: cell.value,\n                            aborted: abort,\n                            cell: cell,\n                            input: self.input\n                        })) { return false; }\n                    self.addRow(cell.data);\n                    self.createNewRowData();\n                }\n                self.draw(true);\n            }\n            if (self.input.parentNode) {\n                self.input.parentNode.removeChild(self.input);\n            }\n            self.intf.focus();\n            self.dispatchEvent('endedit', {\n                cell: cell,\n                value: self.input.value,\n                aborted: abort,\n                input: self.input\n            });\n            self.input = undefined;\n            return true;\n        };\n        /**\n         * Begins editing at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name beginEditAt\n         * @method\n         * @param {number} x The column index of the cell to edit.\n         * @param {number} y The row index of the cell to edit.\n         */\n        self.beginEditAt = function (x, y) {\n            if (!self.attributes.editable) { return; }\n            if (self.input) {\n                self.endEdit();\n            }\n            var cell = self.getVisibleCellByIndex(x, y),\n                s = self.getSchema(),\n                adjacentCells,\n                enumItems,\n                enu,\n                option,\n                valueInEnum;\n            if (!(cell && cell.header)) { return; }\n            //HACK for IE10, does not like literal enum\n            enu = cell.header['enum'];\n            if (self.dispatchEvent('beforebeginedit', {cell: cell})) { return false; }\n            self.scrollIntoView(x, y);\n            self.setActiveCell(x, y);\n            adjacentCells = self.getAdjacentCells();\n            if (enu) {\n                self.input = document.createElement('select');\n            } else {\n                self.input = document.createElement(self.attributes.multiLine\n                    ? 'textarea' : 'input');\n            }\n            cell = self.getVisibleCellByIndex(x, y);\n            //HACK on mobile devices sometimes edit can begin without the cell being in view, I don't know how.\n            if (!cell) { return; }\n            if (enu) {\n                // add enums\n                if (typeof enu === 'function') {\n                    enumItems = enu.apply(self.intf, [{cell: cell}]);\n                } else if (Array.isArray(enu)) {\n                    enumItems = enu;\n                }\n                enumItems.forEach(function (e) {\n                    var i = document.createElement('option'),\n                        val,\n                        title;\n                    if (Array.isArray(e)) {\n                        val = e[0];\n                        title = e[1];\n                    } else {\n                        val = e;\n                        title = e;\n                    }\n                    if (val === cell.value) { valueInEnum = true; }\n                    i.value = val;\n                    i.innerHTML = title;\n                    self.input.appendChild(i);\n                });\n                if (!valueInEnum) {\n                    option = document.createElement('option');\n                    option.value = cell.value;\n                    option.innerHTML = cell.value;\n                    self.input.appendChild(option);\n                }\n                self.input.addEventListener('change', function () {\n                    self.endEdit();\n                    self.draw(true);\n                });\n            }\n            // if the user has not prevented the default action, append to the body\n            if (!self.dispatchEvent('appendeditinput', {cell: cell, input:self.input})) { \n                document.body.appendChild(self.input);\n            }\n            self.createInlineStyle(self.input, self.mobile ? 'canvas-datagrid-edit-mobile-input' : 'canvas-datagrid-edit-input');\n            self.input.style.position = 'absolute';\n            self.input.editCell = cell;\n            self.resizeEditInput();\n            self.input.style.zIndex = self.style.editCellZIndex;\n            self.input.style.fontSize = (parseInt(self.style.editCellFontSize, 10) * self.scale) + 'px';\n            self.input.value = [null, undefined].indexOf(cell.value) !== -1 ? '' : cell.value;\n            self.input.focus();\n            self.input.addEventListener('click', self.stopPropagation);\n            self.input.addEventListener('dblclick', self.stopPropagation);\n            self.input.addEventListener('mouseup', self.stopPropagation);\n            self.input.addEventListener('mousedown', self.stopPropagation);\n            self.input.addEventListener('keydown', function (e) {\n                var nx = cell.columnIndex,\n                    ny = cell.rowIndex;\n                // esc\n                if (e.keyCode === 27) {\n                    self.endEdit(true);\n                    self.draw(true);\n                // enter\n                } else if (e.keyCode === 13\n                        && (!self.attributes.multiLine\n                            || (self.attributes.multiLine && e.shiftKey))) {\n                    self.endEdit();\n                    self.draw(true);\n                } else if (e.keyCode === 9) {\n                    e.preventDefault();\n                    if (!self.endEdit()) {\n                        return;\n                    }\n                    if (e.shiftKey) {\n                        nx = adjacentCells.left;\n                    } else {\n                        nx = adjacentCells.right;\n                    }\n                    if (adjacentCells.left === x && e.shiftKey) {\n                        nx = adjacentCells.last;\n                        ny -= 1;\n                    }\n                    if (adjacentCells.right === x && !e.shiftKey) {\n                        nx = adjacentCells.first;\n                        ny += 1;\n                    }\n                    if (ny < 0) {\n                        ny = self.data.length - 1;\n                    }\n                    if (ny > self.data.length - 1) {\n                        ny = 0;\n                    }\n                    self.scrollIntoView(nx, ny);\n                    self.beginEditAt(nx, ny);\n                }\n            });\n            self.dispatchEvent('beginedit', {cell: cell, input: self.input});\n        };\n        self.createInlineStyle = function (el, className) {\n            var css = {\n                'canvas-datagrid-context-menu-filter-input': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextFilterInputBackground,\n                    color: self.style.contextFilterInputColor,\n                    border: self.style.contextFilterInputBorder,\n                    borderRadius: self.style.contextFilterInputBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextFilterInputFontFamily,\n                    fontSize: self.style.contextFilterInputFontSize\n                },\n                'canvas-datagrid-context-menu-filter-button': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextFilterButtonBorder,\n                    borderRadius: self.style.contextFilterButtonBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFilterButtonFontFamily,\n                    fontSize: self.style.contextMenuFilterButtonFontSize\n                },\n                'canvas-datagrid-context-child-arrow': {\n                    cssFloat: 'right',\n                    color: self.style.childContextMenuArrowColor,\n                    fontSize: self.style.contextMenuChildArrowFontSize,\n                    fontFamily: self.style.contextMenuFontFamily,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-autocomplete': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    position: 'absolute',\n                    zIndex: 9999,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-autocomplete-item': {\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor\n                },\n                'canvas-datagrid-autocomplete-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-canvas': {\n                    position: 'absolute',\n                    zIndex: '-1'\n                },\n                'canvas-datagrid': {\n                    display: 'block'\n                },\n                'canvas-datagrid-control-input': {\n                    position: 'fixed',\n                    top: '-5px',\n                    left: '-5px',\n                    border: 'none',\n                    opacity: '0',\n                    cursor: 'pointer',\n                    width: '1px',\n                    height: '1px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize\n                },\n                'canvas-datagrid-edit-mobile-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 0',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.mobileEditFontFamily,\n                    fontSize: self.style.mobileEditFontSize,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-edit-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 ' + self.style.editCellPaddingLeft + 'px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.editCellFontFamily,\n                    fontSize: self.style.editCellFontSize,\n                    boxShadow: self.style.editCellBoxShadow,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-context-menu-item-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-context-menu-label': {\n                    margin: self.style.contextMenuLabelMargin,\n                    display: self.style.contextMenuLabelDisplay,\n                    minWidth: self.style.contextMenuLabelMinWidth,\n                    maxWidth: self.style.contextMenuLabelMaxWidth\n                },\n                'canvas-datagrid-context-menu-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-context-menu': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap',\n                    cursor: self.style.contextMenuCursor\n                },\n                'canvas-datagrid-invalid-search-regExp': {\n                    background: self.style.contextMenuFilterInvalidExpresion\n                }\n            };\n            if (css[className]) {\n                Object.keys(css[className]).map(function (prop) {\n                    el.style[prop] = css[className][prop];\n                });\n            }\n            return;\n        };\n        self.appendTo = function (e) {\n            self.parentNode = e;\n            self.setDom();\n        };\n        self.setDom = function () {\n            if (self.isChildGrid) {\n                self.parentGrid = self.parentNode.parentGrid;\n                self.ctx = self.parentGrid.context;\n                self.canvas = self.parentGrid.canvas;\n                self.controlInput = self.parentGrid.controlInput;\n                self.eventParent = self.canvas;\n            } else {\n                self.controlInput = self.controlInput || document.createElement('input');\n                self.controlInput.onblur = self.intf.blur;\n                self.createInlineStyle(self.controlInput, 'canvas-datagrid-control-input');\n                self.isChildGrid = false;\n                self.parentDOMNode = self.parentNode;\n                self.parentIsCanvas = /^canvas$/i.test(self.parentDOMNode.tagName);\n                if (self.parentIsCanvas) {\n                    self.canvas = self.parentDOMNode;\n                    document.body.appendChild(self.controlInput);\n                } else {\n                    self.canvas = document.createElement('canvas');\n                    self.parentDOMNode.appendChild(self.canvas);\n                    document.body.appendChild(self.controlInput);\n                }\n                self.createInlineStyle(self.canvas, 'canvas-datagrid');\n                self.ctx = self.canvas.getContext('2d');\n                self.ctx.textBaseline = 'alphabetic';\n                self.eventParent = self.canvas;\n            }\n            self.parentNodeStyle = self.canvas.style;\n            self.controlInput.setAttribute('readonly', true);\n            self.controlInput.addEventListener('blur', function (e) {\n                if (e.target !== self.canvas) {\n                    self.hasFocus = false;\n                }\n            });\n            self.eventParent.addEventListener('scroll', self.resize, false);\n            self.eventParent.addEventListener('touchstart', self.touchstart, false);\n            self.eventParent.addEventListener('mouseup', self.mouseup, false);\n            self.eventParent.addEventListener('mousedown', self.mousedown, false);\n            self.eventParent.addEventListener('dblclick', self.dblclick, false);\n            self.eventParent.addEventListener('click', self.click, false);\n            self.eventParent.addEventListener('mousemove', self.mousemove);\n            self[self.isChildGrid ? 'parentGrid' : 'eventParent'].addEventListener('wheel', self.scrollWheel, false);\n            self.canvas.addEventListener('contextmenu', self.contextmenuEvent, false);\n            self.controlInput.addEventListener('copy', self.copy);\n            self.controlInput.addEventListener('cut', self.cut);\n            self.controlInput.addEventListener('paste', self.paste);\n            self.controlInput.addEventListener('keypress', self.keypress, false);\n            self.controlInput.addEventListener('keyup', self.keyup, false);\n            self.controlInput.addEventListener('keydown', self.keydown, false);\n            window.addEventListener('resize', self.resize);\n        };\n    };\n});\n","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false, Event: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var zIndexTop, hoverScrollTimeout, autoCompleteContext;\n        function applyContextItemStyle(contextItemContainer) {\n            self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item' + (self.mobile ? '-mobile' : ''));\n            contextItemContainer.addEventListener('mouseover', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n            });\n            contextItemContainer.addEventListener('mouseout', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n            });\n        }\n        function createContextMenu(ev, pos, items, parentContextMenu) {\n            var container = document.createElement('div'),\n                upArrow = document.createElement('div'),\n                downArrow = document.createElement('div'),\n                children = [],\n                selectedIndex = -1,\n                intf = {},\n                rect;\n            if (!Array.isArray(items)) { throw new Error('createContextMenu expects an array.'); }\n            function createItems() {\n                items.forEach(function (item) {\n                    var contextItemContainer = document.createElement('div'),\n                        childMenuArrow;\n                    function removeChildContext(e) {\n                        if (e.relatedTarget === container\n                                || item.contextMenu.container === e.relatedTarget\n                                || childMenuArrow === e.relatedTarget\n                                || (contextItemContainer === e.relatedTarget)\n                                || item.contextMenu.container.contains(e.relatedTarget)\n                                ) { return; }\n                        item.contextMenu.dispose();\n                        children.splice(children.indexOf(item.contextMenu), 1);\n                        item.contextMenu = undefined;\n                        contextItemContainer.removeEventListener('mouseout', removeChildContext);\n                        container.removeEventListener('mouseout', removeChildContext);\n                        contextItemContainer.setAttribute('contextOpen', '0');\n                        contextItemContainer.setAttribute('opening', '0');\n                    }\n                    function contextAddCallback(items) {\n                        // check yet again if the user hasn't moved off\n                        if (contextItemContainer.getAttribute('opening') !== '1' ||\n                                contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        var cPos = contextItemContainer.getBoundingClientRect();\n                        cPos = {\n                            left: cPos.left + self.style.childContextMenuMarginLeft + container.offsetWidth,\n                            top: cPos.top + self.style.childContextMenuMarginTop,\n                            bottom: cPos.bottom,\n                            right: cPos.right\n                        };\n                        item.contextMenu = createContextMenu(ev, cPos, items, intf);\n                        contextItemContainer.setAttribute('contextOpen', '1');\n                        contextItemContainer.addEventListener('mouseout', removeChildContext);\n                        container.addEventListener('mouseout', removeChildContext);\n                        children.push(item.contextMenu);\n                    }\n                    function createChildContext() {\n                        var i;\n                        if (contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        contextItemContainer.setAttribute('opening', '1');\n                        if (typeof item.items === 'function') {\n                            i  = item.items.apply(intf, [function (items) {\n                                contextAddCallback(items);\n                            }]);\n                            if (i !== undefined && Array.isArray(i)) {\n                                contextAddCallback(i);\n                            }\n                            return;\n                        }\n                        contextAddCallback(item.items);\n                    }\n                    function addItem(item) {\n                        function addContent(content) {\n                            if (content === null) { return; }\n                            if (typeof content === 'function') {\n                                return addContent(content(ev));\n                            }\n                            if (typeof content === 'object') {\n                                contextItemContainer.appendChild(content);\n                                return;\n                            }\n                            applyContextItemStyle(contextItemContainer);\n                            contextItemContainer.innerHTML = content;\n                            return;\n                        }\n                        addContent(item.title);\n                        item.contextItemContainer = contextItemContainer;\n                        if ((item.items && item.items.length > 0) || typeof item.items === 'function') {\n                            childMenuArrow = document.createElement('div');\n                            self.createInlineStyle(childMenuArrow, 'canvas-datagrid-context-child-arrow');\n                            childMenuArrow.innerHTML = self.style.childContextMenuArrowHTML;\n                            contextItemContainer.appendChild(childMenuArrow);\n                            contextItemContainer.addEventListener('mouseover', createChildContext);\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                contextItemContainer.setAttribute('opening', '0');\n                            });\n                        }\n                        if (item.click) {\n                            contextItemContainer.addEventListener('click', function (ev) {\n                                item.click.apply(self, [ev]);\n                            });\n                        }\n                    }\n                    addItem(item);\n                    container.appendChild(contextItemContainer);\n                });\n            }\n            function clickIndex(idx) {\n                items[idx].contextItemContainer.dispatchEvent(new Event('click'));\n            }\n            function checkArrowVisibility() {\n                if (container.scrollTop > 0) {\n                    self.parentDOMNode.appendChild(upArrow);\n                } else if (upArrow.parentNode) {\n                    upArrow.parentNode.removeChild(upArrow);\n                }\n                if (container.scrollTop >= container.scrollHeight - container.offsetHeight && downArrow.parentNode) {\n                    downArrow.parentNode.removeChild(downArrow);\n                } else if (container.scrollHeight - container.offsetHeight > 0\n                        && !(container.scrollTop >= container.scrollHeight - container.offsetHeight)) {\n                    self.parentDOMNode.appendChild(downArrow);\n                }\n            }\n            function startHoverScroll(type) {\n                return function t() {\n                    var a = self.attributes.contextHoverScrollAmount;\n                    if (type === 'up' && container.scrollTop === 0) { return; }\n                    if (type === 'down' && container.scrollTop === container.scrollHeight) { return; }\n                    container.scrollTop += (type === 'up' ? -a : a);\n                    hoverScrollTimeout = setTimeout(t, self.attributes.contextHoverScrollRateMs, type);\n                };\n            }\n            function endHoverScroll(type) {\n                return function () {\n                    clearTimeout(hoverScrollTimeout);\n                };\n            }\n            function init() {\n                var loc = {},\n                    s = self.scrollOffset(self.canvas);\n                if (zIndexTop === undefined) {\n                    zIndexTop = self.style.contextMenuZIndex;\n                }\n                createItems();\n                self.createInlineStyle(container, 'canvas-datagrid-context-menu' + (self.mobile ? '-mobile' : ''));\n                loc.x = pos.left - s.left;\n                loc.y = pos.top - s.top;\n                loc.height = 0;\n                zIndexTop += 1;\n                container.style.position = 'absolute';\n                upArrow.style.color = self.style.contextMenuArrowColor;\n                downArrow.style.color = self.style.contextMenuArrowColor;\n                [upArrow, downArrow].forEach(function (el) {\n                    el.style.textAlign = 'center';\n                    el.style.position = 'absolute';\n                    el.style.zIndex = zIndexTop + 1;\n                });\n                container.style.zIndex = zIndexTop;\n                if (parentContextMenu && parentContextMenu.inputDropdown) {\n                    container.style.maxHeight = window.innerHeight - loc.y - self.style.autocompleteBottomMargin + 'px';\n                    container.style.minWidth = pos.width + 'px';\n                    loc.y += pos.height;\n                }\n                if (self.mobile) {\n                    container.style.width = pos.width + 'px';\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                container.addEventListener('scroll', checkArrowVisibility);\n                container.addEventListener('wheel', function (e) {\n                    if (self.hasFocus) {\n                        container.scrollTop += e.deltaY;\n                        container.scrollLeft += e.deltaX;\n                    }\n                    checkArrowVisibility();\n                });\n                upArrow.innerHTML = self.style.contextMenuArrowUpHTML;\n                downArrow.innerHTML = self.style.contextMenuArrowDownHTML;\n                container.appendChild(upArrow);\n                document.body.appendChild(downArrow);\n                document.body.appendChild(container);\n                rect = container.getBoundingClientRect();\n                // TODO: fix !(parentContextMenu && parentContextMenu.inputDropdown) state (autocomplete)\n                if (rect.bottom > window.innerHeight) {\n                    if (!(parentContextMenu && parentContextMenu.inputDropdown)) {\n                        loc.y -= (rect.bottom + self.style.contextMenuWindowMargin) - window.innerHeight;\n                    }\n                    if (loc.y < 0) { loc.y = self.style.contextMenuWindowMargin; }\n                    if (container.offsetHeight > window.innerHeight - self.style.contextMenuWindowMargin) {\n                        container.style.height = window.innerHeight - (self.style.contextMenuWindowMargin * 2) + 'px';\n                    }\n                }\n                if (rect.right > window.innerWidth) {\n                    loc.x -= rect.right - window.innerWidth + self.style.contextMenuWindowMargin;\n                }\n                if (loc.x < 0) { loc.x = self.style.contextMenuWindowMargin; }\n                if (loc.y < 0) { loc.y = self.style.contextMenuWindowMargin; }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                rect = container.getBoundingClientRect();\n                upArrow.style.top = rect.top + 'px';\n                downArrow.style.top = rect.top + rect.height - downArrow.offsetHeight + 'px';\n                upArrow.style.left = rect.left + 'px';\n                downArrow.style.left = rect.left + 'px';\n                downArrow.style.width = container.offsetWidth + 'px';\n                upArrow.style.width = container.offsetWidth + 'px';\n                downArrow.addEventListener('mouseover', startHoverScroll('down'));\n                downArrow.addEventListener('mouseout', endHoverScroll('down'));\n                upArrow.addEventListener('mouseover', startHoverScroll('up'));\n                upArrow.addEventListener('mouseout', endHoverScroll('up'));\n                checkArrowVisibility();\n            }\n            intf.parentGrid = self.intf;\n            intf.parentContextMenu = parentContextMenu;\n            intf.container = container;\n            init();\n            intf.clickIndex = clickIndex;\n            intf.rect = rect;\n            intf.items = items;\n            intf.upArrow = upArrow;\n            intf.downArrow = downArrow;\n            intf.dispose = function () {\n                clearTimeout(hoverScrollTimeout);\n                children.forEach(function (c) {\n                    c.dispose();\n                });\n                [downArrow, upArrow, container].forEach(function (el) {\n                    if (el.parentNode) { el.parentNode.removeChild(el); }\n                });\n            };\n            Object.defineProperty(intf, 'selectedIndex', {\n                get: function () {\n                    return selectedIndex;\n                },\n                set: function (value) {\n                    if (typeof value !== 'number' || isNaN(value || !isFinite(value))) {\n                        throw new Error('Context menu selected index must be a sane number.');\n                    }\n                    selectedIndex = value;\n                    if (selectedIndex > items.length - 1) {\n                        selectedIndex = items.length - 1;\n                    }\n                    if (selectedIndex < 0) {\n                        selectedIndex = 0;\n                    }\n                    items.forEach(function (item, index) {\n                        if (index === selectedIndex) {\n                            return self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                        }\n                        self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item');\n                    });\n                }\n            });\n            return intf;\n        }\n        function createFilterContextMenuItems(e) {\n            var filterContainer = document.createElement('div'),\n                filterLabel = document.createElement('div'),\n                filterAutoCompleteButton = document.createElement('button'),\n                filterInput = document.createElement('input'),\n                n = e.cell && e.cell.header ? e.cell.header.title || e.cell.header.name : '',\n                autoCompleteItems,\n                iRect;\n            function checkRegExpErrorState() {\n                filterInput.style.background = self.style.contextFilterInputBackground;\n                filterInput.style.color = self.style.contextFilterInputColor;\n                if (self.invalidFilterRegEx) {\n                    filterInput.style.background = self.style.contextFilterInvalidRegExpBackground;\n                    filterInput.style.color = self.style.contextFilterInvalidRegExpColor;\n                }\n            }\n            function fillAutoComplete() {\n                var count = 0;\n                autoCompleteItems = {};\n                self.data.forEach(function (row) {\n                    var value = row[e.cell.header.name];\n                    if (autoCompleteItems[value] || count > self.attributes.maxAutoCompleteItems) { return; }\n                    count += 1;\n                    autoCompleteItems[value] = {\n                        title: self.formatters[e.cell.header.type || 'string']({ cell: { value: value }}),\n                        click: function (e) {\n                            filterInput.value = value;\n                            e.stopPropagation();\n                            filterInput.dispatchEvent(new Event('keyup'));\n                            self.disposeAutocomplete();\n                            return;\n                        }\n                    };\n                });\n                autoCompleteItems = Object.keys(autoCompleteItems).map(function (key) {\n                    return autoCompleteItems[key];\n                });\n            }\n            function createAutoCompleteContext(ev) {\n                if (ev && [40, 38, 13, 9].indexOf(ev.keyCode) !== -1) { return; }\n                fillAutoComplete();\n                iRect = filterInput.getBoundingClientRect();\n                if (autoCompleteContext) {\n                    autoCompleteContext.dispose();\n                    autoCompleteContext = undefined;\n                }\n                autoCompleteContext = createContextMenu(e, {\n                    left: iRect.left,\n                    top: iRect.top,\n                    right: iRect.right,\n                    bottom: iRect.bottom,\n                    height: iRect.height,\n                    width: iRect.width\n                }, autoCompleteItems, {inputDropdown: true});\n                autoCompleteContext.selectedIndex = 0;\n            }\n            self.createInlineStyle(filterLabel, 'canvas-datagrid-context-menu-label');\n            self.createInlineStyle(filterAutoCompleteButton, 'canvas-datagrid-context-menu-filter-button');\n            self.createInlineStyle(filterInput, 'canvas-datagrid-context-menu-filter-input');\n            checkRegExpErrorState();\n            filterInput.onclick = self.disposeAutocomplete;\n            filterInput.addEventListener('keydown', function (e) {\n                //down\n                if (e.keyCode === 40) {\n                    autoCompleteContext.selectedIndex += 1;\n                }\n                //up\n                if (e.keyCode === 38) {\n                    autoCompleteContext.selectedIndex -= 1;\n                }\n                //enter\n                if (e.keyCode === 13) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    self.disposeContextMenu();\n                }\n                //tab\n                if (e.keyCode === 9) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    e.preventDefault();\n                }\n                //esc\n                if (e.keyCode === 27) {\n                    self.disposeContextMenu();\n                }\n            });\n            filterInput.addEventListener('keyup', function () {\n                self.setFilter(e.cell.header.name, filterInput.value);\n            });\n            filterInput.addEventListener('keyup', createAutoCompleteContext);\n            ['focus', 'blur', 'keydown', 'keyup', 'change'].forEach(function (en) {\n                filterInput.addEventListener(en, checkRegExpErrorState);\n            });\n            filterInput.value = e.cell.header ? self.columnFilters[e.cell.header.name] || '' : '';\n            filterLabel.innerHTML = self.attributes.filterOptionText.replace(/%s/g, n);\n            filterAutoCompleteButton.onclick = function () {\n                if (autoCompleteContext) {\n                    return self.disposeAutocomplete();\n                }\n                createAutoCompleteContext();\n            };\n            filterAutoCompleteButton.innerHTML = self.style.contextFilterButtonHTML;\n            filterContainer.addEventListener('click', function (e) {\n                return e.stopPropagation();\n            });\n            filterContainer.appendChild(filterLabel);\n            filterContainer.appendChild(filterInput);\n            filterContainer.appendChild(filterAutoCompleteButton);\n            e.items.push({\n                title: filterContainer\n            });\n            if (Object.keys(self.columnFilters).length) {\n                Object.keys(self.columnFilters).forEach(function (cf) {\n                    var h = self.getHeaderByName(cf);\n                    e.items.push({\n                        title: self.attributes.removeFilterOptionText.replace(/%s/g, h.title || h.name),\n                        click: function removeFilterClick(e) {\n                            e.preventDefault();\n                            self.setFilter(cf, '');\n                            self.controlInput.focus();\n                        }\n                    });\n                });\n            }\n        }\n        function addDefaultContextMenuItem(e) {\n            var isNormalCell = !(e.cell.isBackground || e.cell.isColumnHeaderCellCap\n                    || e.cell.isScrollBar || e.cell.isCorner || e.cell.isRowHeader)\n                    && e.cell.header;\n            if (self.attributes.showFilter && isNormalCell) {\n                createFilterContextMenuItems(e);\n            }\n            if (self.attributes.showCopy\n                    && self.selections.reduce(function (p, r) {\n                        return p + r.length;\n                    }, 0) > 0) {\n                e.items.push({\n                    title: self.attributes.copyText,\n                    click: function () {\n                        document.execCommand('copy');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.showPaste && self.clipBoardData) {\n                e.items.push({\n                    title: self.attributes.pasteText,\n                    click: function () {\n                        self.paste(self.clipBoardData, e.cell.columnIndex, e.cell.rowIndex);\n                        self.draw();\n                    }\n                });\n            }\n            if (self.attributes.showColumnSelector) {\n                e.items.push({\n                    title: self.attributes.columnSelectorText,\n                    items: function () {\n                        var d = [];\n                        self.getSchema().forEach(function (column) {\n                            function toggleColumnVisibility(e) {\n                                column.hidden = !column.hidden;\n                                e.preventDefault();\n                                self.stopPropagation(e);\n                                self.disposeContextMenu();\n                                self.resize(true);\n                                self.setStorageData();\n                            }\n                            var el = document.createElement('div');\n                            applyContextItemStyle(el);\n                            el.addEventListener('touchstart', toggleColumnVisibility);\n                            el.addEventListener('click', toggleColumnVisibility);\n                            el.innerHTML = (column.hidden ? self.attributes.columnSelectorHiddenText\n                                    : self.attributes.columnSelectorVisibleText)\n                                    + (column.title || column.name);\n                            d.push({\n                                title: el\n                            });\n                        });\n                        return d;\n                    }\n                });\n                if (e.cell && e.cell.header && e.cell.columnIndex > -1) {\n                    e.items.push({\n                        title: self.attributes.hideColumnText\n                            .replace(/%s/ig, e.cell.header.title || e.cell.header.name),\n                        click: function (ev) {\n                            self.getSchema()[e.cell.columnIndex].hidden = true;\n                            ev.preventDefault();\n                            self.stopPropagation(ev);\n                            self.disposeContextMenu();\n                            self.setStorageData();\n                            setTimeout(function () { self.resize(true); }, 10);\n                        }\n                    });\n                }\n            }\n            if (self.attributes.saveAppearance && self.attributes.showClearSettingsOption\n                    && (Object.keys(self.sizes.rows).length > 0\n                        || Object.keys(self.sizes.columns).length > 0)) {\n                e.items.push({\n                    title: self.attributes.clearSettingsOptionText,\n                    click: function (e) {\n                        e.preventDefault();\n                        self.sizes.rows = {};\n                        self.sizes.columns = {};\n                        self.createRowOrders();\n                        self.createColumnOrders();\n                        self.storedSettings = undefined;\n                        self.dispatchEvent('resizecolumn', {columnWidth: self.style.cellWidth});\n                        self.dispatchEvent('resizerow', {cellHeight: self.style.cellHeight});\n                        self.setStorageData();\n                        self.resize(true);\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.allowSorting && self.attributes.showOrderByOption && isNormalCell) {\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextAsc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'asc');\n                        self.controlInput.focus();\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextDesc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'desc');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n        }\n        self.disposeAutocomplete = function () {\n            if (autoCompleteContext) {\n                autoCompleteContext.dispose();\n                autoCompleteContext = undefined;\n            }\n        };\n        self.disposeContextMenu = function () {\n            document.removeEventListener('click', self.disposeContextMenu);\n            zIndexTop = self.style.contextMenuZIndex;\n            self.disposeAutocomplete();\n            if (self.contextMenu) {\n                self.contextMenu.dispose();\n            }\n            self.contextMenu = undefined;\n        };\n        self.contextmenuEvent = function (e, overridePos) {\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            function createDiposeEvent() {\n                requestAnimationFrame(function () {\n                    document.addEventListener('click', self.disposeContextMenu);\n                    document.removeEventListener('mouseup', createDiposeEvent);\n                });\n            }\n            var contextPosition,\n                items = [],\n                pos = overridePos || self.getLayerPos(e),\n                ev = {\n                    NativeEvent: e,\n                    cell: self.getCellAt(pos.x, pos.y),\n                    items: items\n                };\n            if (!ev.cell.isGrid) {\n                addDefaultContextMenuItem(ev);\n            }\n            if (self.dispatchEvent('contextmenu', ev)) {\n                return;\n            }\n            if (!ev.cell.isGrid) {\n                if (self.contextMenu) {\n                    self.disposeContextMenu();\n                }\n                contextPosition = {\n                    left: pos.x + pos.rect.left\n                        + self.style.contextMenuMarginLeft + self.canvasOffsetLeft,\n                    top: pos.y + pos.rect.top\n                        + self.style.contextMenuMarginTop + self.canvasOffsetTop,\n                    right: ev.cell.width + ev.cell.x + pos.rect.left,\n                    bottom: ev.cell.height + ev.cell.y + pos.rect.top,\n                    height: ev.cell.height,\n                    width: ev.cell.width\n                };\n                if (self.mobile) {\n                    contextPosition.left = self.style.mobileContextMenuMargin + 'px';\n                    contextPosition.width = self.width - (self.style.mobileContextMenuMargin * 2) + 'px';\n                }\n                self.contextMenu = createContextMenu(ev, contextPosition, items);\n                document.addEventListener('mouseup', createDiposeEvent);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n","/*jslint browser: true, unparam: true, todo: true*/\n/*globals HTMLElement: false, Reflect: false, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self, ctor) {\n        self.scale = 1;\n        self.orders = {\n            rows: [],\n            columns: []\n        };\n        self.appliedInlineStyles = {};\n        self.cellGridAttributes = {};\n        self.treeGridAttributes = {};\n        self.visibleRowHeights = [];\n        self.hasFocus = false;\n        self.activeCell = {\n            columnIndex: 0,\n            rowIndex: 0\n        };\n        self.innerHTML = '';\n        self.storageName = 'canvasDataGrid';\n        self.invalidSearchExpClass = 'canvas-datagrid-invalid-search-regExp';\n        self.localStyleLibraryStorageKey = 'canvas-datagrid-user-style-library';\n        self.dataType = 'application/x-canvas-datagrid';\n        self.orderBy = null;\n        self.orderDirection = 'asc';\n        self.columnFilters = {};\n        self.filters = {};\n        self.frozenRow = 0;\n        self.frozenColumn = 0;\n        self.ellipsisCache = {};\n        self.scrollCache = { x: [], y: [] };\n        self.scrollBox = {};\n        self.visibleRows = [];\n        self.sizes = {\n            rows: {},\n            columns: {},\n            trees: {}\n        };\n        self.currentFilter = function () {\n            return true;\n        };\n        self.selections = [];\n        self.hovers = {};\n        self.attributes = {};\n        self.style = {};\n        self.formatters = {};\n        self.sorters = {};\n        self.parsers = {};\n        self.schemaHashes = {};\n        self.events = {};\n        self.changes = [];\n        self.scrollIndexTop = 0;\n        self.scrollPixelTop = 0;\n        self.scrollIndexLeft = 0;\n        self.scrollPixelLeft = 0;\n        self.childGrids = {};\n        self.openChildren = {};\n        self.scrollModes = [\n            'vertical-scroll-box',\n            'vertical-scroll-top',\n            'vertical-scroll-bottom',\n            'horizontal-scroll-box',\n            'horizontal-scroll-right',\n            'horizontal-scroll-left'\n        ];\n        self.componentL1Events = {};\n        self.eventNames = ['afterdraw', 'afterrendercell', 'attributechanged', 'beforebeginedit',\n            'beforecreatecellgrid', 'beforedraw', 'beforeendedit', 'beforerendercell', 'beforerendercellgrid',\n            'beginedit', 'cellmouseout', 'cellmouseover', 'click', 'collapsetree', 'contextmenu', 'copy',\n            'datachanged', 'dblclick', 'endedit', 'expandtree', 'formatcellvalue', 'keydown', 'keypress',\n            'keyup', 'mousedown', 'mousemove', 'mouseup', 'newrow', 'ordercolumn', 'rendercell', 'rendercellgrid',\n            'renderorderbyarrow', 'rendertext', 'rendertreearrow', 'reorder', 'reordering', 'resize',\n            'resizecolumn', 'resizerow', 'schemachanged', 'scroll', 'selectionchanged', 'stylechanged',\n            'touchcancel', 'touchend', 'touchmove', 'touchstart', 'wheel'];\n        self.mouse = { x: 0, y: 0};\n        self.getSelectedData = function (expandToRow) {\n            var d = [], s = self.getSchema(), l = self.data.length;\n            if (l === 0) { return []; }\n            self.selections.forEach(function (row, index) {\n                if (!row) { return; }\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    var orderedIndex;\n                    if (col === -1 || !s[col]) { return; }\n                    orderedIndex = self.orders.columns[col];\n                    if (!expandToRow && s[orderedIndex].hidden) { return; }\n                    if (self.data[index]) {\n                        d[index][s[orderedIndex].name] = self.data[index][s[orderedIndex].name];\n                    }\n                });\n            });\n            return d;\n        };\n        self.getColumnHeaderCellHeight = function () {\n            if (!self.attributes.showColumnHeaders) { return 0; }\n            return ((self.sizes.rows[-1] || self.style.columnHeaderCellHeight) * self.scale);\n        };\n        self.getRowHeaderCellWidth = function () {\n            if (!self.attributes.showRowHeaders) { return 0; }\n            return (self.sizes.columns[-1] || self.style.rowHeaderCellWidth) * self.scale;\n        };\n        self.setStorageData = function () {\n            if (!self.attributes.saveAppearance || !self.attributes.name) { return; }\n            var visibility = {};\n            self.getSchema().forEach(function (column) {\n                visibility[column.name] = !column.hidden;\n            });\n            localStorage.setItem(self.storageName + '-' + self.attributes.name, JSON.stringify({\n                sizes: {\n                    rows: self.sizes.rows,\n                    columns: self.sizes.columns\n                },\n                orders: {\n                    rows: self.orders.rows,\n                    columns: self.orders.columns\n                },\n                orderBy: self.orderBy,\n                orderDirection: self.orderDirection,\n                visibility: visibility\n            }));\n        };\n        self.getSchema = function () {\n            return self.schema || self.tempSchema || [];\n        };\n        function fillArray(low, high) {\n            var i = [], x;\n            for (x = low; x <= high; x += 1) {\n                i[x] = x;\n            }\n            return i;\n        }\n        self.createColumnOrders = function () {\n            var s = self.getSchema();\n            self.orders.columns = fillArray(0, s.length - 1);\n        };\n        self.createRowOrders = function () {\n            self.orders.rows = fillArray(0, self.data.length - 1);\n        };\n        self.getVisibleSchema = function () {\n            return self.getSchema().filter(function (col) {\n                return !col.hidden;\n            });\n        };\n        self.applyDefaultValue = function (row, header) {\n            var d = header.defaultValue || '';\n            if (typeof d === 'function') {\n                d = d.apply(self.intf, [header]);\n            }\n            row[header.name] = d;\n        };\n        self.createNewRowData = function () {\n            self.newRow = {};\n            self.getSchema().forEach(function forEachHeader(header) {\n                self.applyDefaultValue(self.newRow, header);\n            });\n        };\n        self.getSchemaNameHash = function (key) {\n            var n = 0;\n            while (self.schemaHashes[key]) {\n                n += 1;\n                key = key + n;\n            }\n            return key;\n        };\n        self.filter = function (type) {\n            var f = self.filters[type];\n            if (!f && type !== undefined) {\n                console.warn('Cannot find filter for type %s, falling back to substring match.', type);\n                f = self.filters.string;\n            }\n            return f;\n        };\n        self.getBestGuessDataType = function (columnName, data) {\n            var t, x, l = data.length;\n            for (x = 0; x < l; x += 1) {\n                if (data[x] !== undefined && data[x] !== null && [null, undefined].indexOf(data[x][columnName]) !== -1) {\n                    t = typeof data[x];\n                    return t === 'object' ? 'string' : t;\n                }\n            }\n            return 'string';\n        };\n        self.drawChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].draw();\n            });\n        };\n        self.resizeChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].resize();\n            });\n        };\n        self.autoScrollZone = function (e, x, y, ctrl) {\n            var setTimer,\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight();\n            if (y !== -1) {\n                if (x > self.width - self.attributes.selectionScrollZone && x < self.width) {\n                    self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n                if (x - self.attributes.selectionScrollZone - rowHeaderCellWidth < 0) {\n                    self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n            }\n            if (y !== -1) {\n                if (y > self.height - self.attributes.selectionScrollZone && y < self.height) {\n                    self.scrollBox.scrollTop += self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n                if (y - self.attributes.selectionScrollZone - columnHeaderCellHeight < 0) {\n                    self.scrollBox.scrollTop -= self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n            }\n            if (setTimer && !ctrl && self.currentCell && self.currentCell.columnIndex !== -1) {\n                self.scrollTimer = setTimeout(self.mousemove, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.refreshFromOrigialData = function () {\n            self.data = self.originalData.filter(function (row) {\n                return true;\n            });\n        };\n        self.validateColumn = function (c, s) {\n            if (!c.name) {\n                throw new Error('A column must contain at least a name.');\n            }\n            if (s.filter(function (i) { return i.name === c.name; }).length > 0) {\n                throw new Error('A column with the name '\n                    + c.name + ' already exists and cannot be added again.');\n            }\n            return true;\n        };\n        self.setDefaults = function (obj1, obj2, key, def) {\n            obj1[key] = obj2[key] === undefined ? def : obj2[key];\n        };\n        self.setAttributes = function () {\n            self.defaults.attributes.forEach(function eachAttribute(i) {\n                self.setDefaults(self.attributes, self.args, i[0], i[1]);\n            });\n        };\n        self.setStyle = function () {\n            self.defaults.styles.forEach(function eachStyle(i) {\n                self.setDefaults(self.style, self.args.style || {}, i[0], i[1]);\n            });\n        };\n        self.autosize = function (colName) {\n            self.getVisibleSchema().forEach(function (col, colIndex) {\n                if (col.name === colName || colName === undefined) {\n                    self.sizes.columns[colIndex]\n                        = Math.max(self.findColumnMaxTextLength(col.name), self.style.minColumnWidth);\n                }\n            });\n            self.sizes.columns[-1] = self.findColumnMaxTextLength('cornerCell');\n        };\n        self.dispose = function () {\n            if (!self.isChildGrid && self.canvas && self.canvas.parentNode) {\n                self.canvas.parentNode.removeChild(self.canvas);\n            }\n            self.eventParent.removeEventListener('mouseup', self.mouseup, false);\n            self.eventParent.removeEventListener('mousedown', self.mousedown, false);\n            self.eventParent.removeEventListener('dblclick', self.dblclick, false);\n            self.eventParent.removeEventListener('click', self.click, false);\n            self.eventParent.removeEventListener('mousemove', self.mousemove);\n            self.eventParent.removeEventListener('wheel', self.scrollWheel, false);\n            self.canvas.removeEventListener('contextmenu', self.contextmenu, false);\n            self.canvas.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('keypress', self.keypress, false);\n            self.controlInput.removeEventListener('keyup', self.keyup, false);\n            self.controlInput.removeEventListener('keydown', self.keydown, false);\n            window.removeEventListener('resize', self.resize);\n            if (self.observer && self.observer.disconnect) {\n                self.observer.disconnect();\n            }\n        };\n        self.tryLoadStoredSettings = function () {\n            var s;\n            self.reloadStoredValues();\n            if (self.storedSettings\n                    && typeof self.storedSettings.orders === 'object'\n                    && self.storedSettings.orders !== null) {\n                if (self.storedSettings.orders.rows.length >= (self.data || []).length) {\n                    self.orders.rows = self.storedSettings.orders.rows;\n                }\n                s = self.getSchema();\n                if (self.storedSettings.orders.columns.length === s.length) {\n                    self.orders.columns = self.storedSettings.orders.columns;\n                }\n                self.orderBy = self.storedSettings.orderBy === undefined\n                    ? s[0].name : self.storedSettings.orderBy;\n                self.orderDirection = self.storedSettings.orderDirection === undefined\n                    ? 'asc' : self.storedSettings.orderDirection;\n                if (self.storedSettings.orderBy !== undefined && self.getHeaderByName(self.orderBy) && self.orderDirection) {\n                    self.order(self.orderBy, self.orderDirection);\n                }\n            }\n        };\n        self.getDomRoot = function () {\n            return self.shadowRoot ? self.shadowRoot.host : self.parentNode;\n        };\n        self.getFontName = function (fontStyle) {\n            return fontStyle.replace(/\\d+\\.?\\d*px/, '');\n        };\n        self.getFontHeight = function (fontStyle) {\n            return parseFloat(fontStyle, 10);\n        };\n        self.parseStyleValue = function (key) {\n            if (/Font/.test(key)) {\n                self.style[key + 'Height'] = self.getFontHeight(self.style[key]);\n                self.style[key + 'Name'] = self.getFontName(self.style[key]);\n                return;\n            }\n            // when inheriting styles from already instantiated grids, don't parse already parsed values.\n            if (key === 'moveOverlayBorderSegments' && typeof self.style[key] === 'string') {\n                self.style[key] = self.style[key].split(',')\n                    .map(function (i) { return parseInt(i, 10); });\n            }\n        };\n        self.initProp = function (propName) {\n            if (!self.args[propName]) { return; }\n            Object.keys(self.args[propName]).forEach(function (key) {\n                self[propName][key] = self.args[propName][key];\n            });\n        };\n        self.getStyleProperty = function (key) {\n            if (self.styleKeys.indexOf(key) === -1) {\n                return self.parentNodeStyle[key];\n            }\n            return self.style[key];\n        };\n        self.setStyleProperty = function (key, value, supressDrawAndEvent) {\n            var isDim = ['height', 'width', 'minHeight', 'minWidth', 'maxHeight', 'maxWidth'].indexOf(key) !== -1;\n            if (self.styleKeys.indexOf(key) === -1) {\n                self.parentNodeStyle[key] = value;\n            } else {\n                if (/-/.test(key)) {\n                    key = self.dehyphenateProperty(key);\n                }\n                self.style[key] = value;\n                self.parseStyleValue(key);\n            }\n            if (isDim) {\n                self.resize();\n            }\n            if (!supressDrawAndEvent) {\n                self.draw(true);\n                self.dispatchEvent('stylechanged', {name: 'style', value: value});\n            }\n        };\n        self.reloadStoredValues = function () {\n            if (self.attributes.name && self.attributes.saveAppearance) {\n                try {\n                    self.storedSettings = localStorage.getItem(self.storageName + '-' + self.attributes.name);\n                } catch (e) {\n                    console.warn(\"Error loading stored values. \" + e.message);\n                    self.storedSettings = undefined;\n                }\n                if (self.storedSettings) {\n                    try {\n                        self.storedSettings = JSON.parse(self.storedSettings);\n                    } catch (e) {\n                        console.warn('could not read settings from localStore', e);\n                        self.storedSettings = undefined;\n                    }\n                }\n                if (self.storedSettings) {\n                    if (typeof self.storedSettings.sizes === 'object'\n                            && self.storedSettings.sizes !== null) {\n                        self.sizes.rows = self.storedSettings.sizes.rows;\n                        self.sizes.columns = self.storedSettings.sizes.columns;\n                        ['trees', 'columns', 'rows'].forEach(function (i) {\n                            if (!self.sizes[i]) {\n                                self.sizes[i] = {};\n                            }\n                        });\n                    }\n                    if (typeof self.storedSettings.visibility === 'object') {\n                        self.getSchema().forEach(function (column) {\n                            if (self.storedSettings.visibility && self.storedSettings.visibility[column.name] !== undefined) {\n                                column.hidden = !self.storedSettings.visibility[column.name];\n                            }\n                        });\n                    }\n                }\n            }\n        };\n        self.init = function () {\n            if (self.initialized) { return; }\n            function addStyleKeyIfNoneExists(key) {\n                if (self.styleKeys.indexOf(key) === -1) {\n                    self.styleKeys.push(key);\n                }\n            }\n            var publicStyleKeyIntf = {};\n            self.setAttributes();\n            self.setStyle();\n            self.initScrollBox();\n            self.setDom();\n            self.nodeType = 'canvas-datagrid';\n            self.ie = /Trident/.test(window.navigator.userAgent);\n            self.edge = /Edge/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.moz = /Gecko/.test(window.navigator.userAgent);\n            self.mobile = /Mobile/i.test(window.navigator.userAgent);\n            self.cursorGrab = 'grab';\n            self.cursorGrabing = 'grabbing';\n            self.cursorGrab = self.webKit ? '-webkit-grab' : self.cursorGrab;\n            self.cursorGrabing = self.moz ? '-webkit-grabbing' : self.cursorGrabbing;\n            self.pointerLockPosition = {x: 0, y: 0};\n            Object.keys(self.style).forEach(self.parseStyleValue);\n            self.intf.moveSelection = self.moveSelection;\n            self.intf.moveTo = self.moveTo;\n            self.intf.addEventListener = self.addEventListener;\n            self.intf.removeEventListener = self.removeEventListener;\n            self.intf.dispatchEvent = self.dispatchEvent;\n            /**\n             * Releases grid resources and removes grid elements.\n             * @memberof canvasDatagrid\n             * @name dispose\n             * @method\n             */\n            self.intf.dispose = self.dispose;\n            /**\n             * Appends the grid to another element later.  Not implemented.\n             * @memberof canvasDatagrid\n             * @name appendTo\n             * @method\n             * @param {number} el The element to append the grid to.\n             */\n            self.intf.appendTo = self.appendTo;\n            self.intf.getVisibleCellByIndex = self.getVisibleCellByIndex;\n            self.intf.filters = self.filters;\n            self.intf.sorters = self.sorters;\n            self.intf.autosize = self.autosize;\n            self.intf.beginEditAt = self.beginEditAt;\n            self.intf.endEdit = self.endEdit;\n            self.intf.setActiveCell = self.setActiveCell;\n            self.intf.forEachSelectedCell = self.forEachSelectedCell;\n            self.intf.scrollIntoView = self.scrollIntoView;\n            self.intf.clearChangeLog = self.clearChangeLog;\n            self.intf.gotoCell = self.gotoCell;\n            self.intf.gotoRow = self.gotoRow;\n            self.intf.getHeaderByName = self.getHeaderByName;\n            self.intf.findColumnScrollLeft = self.findColumnScrollLeft;\n            self.intf.findRowScrollTop = self.findRowScrollTop;\n            self.intf.fitColumnToValues = self.fitColumnToValues;\n            self.intf.findColumnMaxTextLength = self.findColumnMaxTextLength;\n            self.intf.disposeContextMenu = self.disposeContextMenu;\n            self.intf.getCellAt = self.getCellAt;\n            self.intf.isCellVisible = self.isCellVisible;\n            self.intf.isRowVisible = self.isRowVisible;\n            self.intf.isColumnVisible = self.isColumnVisible;\n            self.intf.order = self.order;\n            self.intf.draw = self.draw;\n            self.intf.isComponent = self.isComponent;\n            self.intf.selectArea = self.selectArea;\n            self.intf.clipElement = self.clipElement;\n            self.intf.getSchemaFromData = self.getSchemaFromData;\n            self.intf.setFilter = self.setFilter;\n            self.intf.selectRow = self.selectRow;\n            self.intf.parentGrid = self.parentGrid;\n            self.intf.toggleTree = self.toggleTree;\n            self.intf.expandTree = self.expandTree;\n            self.intf.collapseTree = self.collapseTree;\n            self.intf.canvas = self.canvas;\n            self.intf.context = self.ctx;\n            self.intf.insertRow = self.insertRow;\n            self.intf.deleteRow = self.deleteRow;\n            self.intf.addRow = self.addRow;\n            self.intf.insertColumn = self.insertColumn;\n            self.intf.deleteColumn = self.deleteColumn;\n            self.intf.addColumn = self.addColumn;\n            self.intf.getClippingRect = self.getClippingRect;\n            self.intf.setRowHeight = self.setRowHeight;\n            self.intf.setColumnWidth = self.setColumnWidth;\n            self.intf.resetColumnWidths = self.resetColumnWidths;\n            self.intf.resetRowHeights = self.resetRowHeights;\n            self.intf.resize = self.resize;\n            self.intf.selectColumn = self.selectColumn;\n            self.intf.selectRow = self.selectRow;\n            self.intf.selectAll = self.selectAll;\n            self.intf.selectNone = self.selectNone;\n            self.intf.drawChildGrids = self.drawChildGrids;\n            self.intf.assertPxColor = self.assertPxColor;\n            self.intf.clearPxColorAssertions = self.clearPxColorAssertions;\n            self.intf.integerToAlpha = self.integerToAlpha;\n            self.intf.copy = self.copy;\n            self.intf.setStyleProperty = self.setStyleProperty;\n            Object.defineProperty(self.intf, 'defaults', {\n                get: function () {\n                    return {\n                        styles: self.defaults.styles.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {}),\n                        attributes: self.defaults.attributes.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {})\n                    };\n                }\n            });\n            self.styleKeys = Object.keys(self.intf.defaults.styles);\n            self.styleKeys.map(function (i) { return self.hyphenateProperty(i, false); }).forEach(addStyleKeyIfNoneExists);\n            self.styleKeys.map(function (i) { return self.hyphenateProperty(i, true); }).forEach(addStyleKeyIfNoneExists);\n            self.DOMStyles = window.getComputedStyle(document.body, null);\n            self.styleKeys.concat(Object.keys(self.DOMStyles)).forEach(function (key) {\n                // unless this line is here, Object.keys() will not work on <instance>.style\n                publicStyleKeyIntf[key] = undefined;\n                Object.defineProperty(publicStyleKeyIntf, key, {\n                    get: function () {\n                        return self.getStyleProperty(key);\n                    },\n                    set: function (value) {\n                        if (self.initialized) {\n                            self.appliedInlineStyles[key] = value;\n                        }\n                        self.setStyleProperty(key, value);\n                    }\n                });\n            });\n            Object.defineProperty(self.intf, 'shadowRoot', {\n                get: function () {\n                    return self.shadowRoot;\n                }\n            });\n            Object.defineProperty(self.intf, 'activeCell', {\n                get: function () {\n                    return self.activeCell;\n                }\n            });\n            Object.defineProperty(self.intf, 'hasFocus', {\n                get: function () {\n                    return self.hasFocus;\n                }\n            });\n            Object.defineProperty(self.intf, 'style', {\n                get: function () {\n                    return publicStyleKeyIntf;\n                },\n                set: function (valueObject) {\n                    Object.keys(valueObject).forEach(function (key) {\n                        self.setStyleProperty(key, valueObject[key], true);\n                    });\n                    self.draw(true);\n                    self.dispatchEvent('stylechanged', {name: 'style', value: valueObject});\n                }\n            });\n            Object.defineProperty(self.intf, 'attributes', { value: {}});\n            Object.keys(self.attributes).forEach(function (key) {\n                Object.defineProperty(self.intf.attributes, key, {\n                    get: function () {\n                        return self.attributes[key];\n                    },\n                    set: function (value) {\n                        self.attributes[key] = value;\n                        if (key === 'name') {\n                            self.tryLoadStoredSettings();\n                        }\n                        self.draw(true);\n                        self.dispatchEvent('attributechanged', {name: key, value: value[key]});\n                    }\n                });\n            });\n            self.filters.string = function (value, filterFor) {\n                value = String(value);\n                var filterRegExp,\n                    regEnd = /\\/(i|g|m)*$/,\n                    pattern = regEnd.exec(filterFor),\n                    flags = pattern ? pattern[0].substring(1) : '',\n                    flagLength = flags.length;\n                self.invalidFilterRegEx = undefined;\n                if (filterFor.substring(0, 1) === '/' && pattern) {\n                    try {\n                        filterRegExp = new RegExp(filterFor.substring(1, filterFor.length - (flagLength + 1)), flags);\n                    } catch (e) {\n                        self.invalidFilterRegEx = e;\n                        return;\n                    }\n                    return filterRegExp.test(value);\n                }\n                return value.toString ? value.toString().toLocaleUpperCase()\n                    .indexOf(filterFor.toLocaleUpperCase()) !== -1 : false;\n            };\n            self.filters.number = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                return value === filterFor;\n            };\n            ['formatters', 'filters', 'sorters'].forEach(self.initProp);\n            self.applyComponentStyle(false, self.intf);\n            self.reloadStoredValues();\n            if (self.args.data) {\n                self.intf.data = self.args.data;\n            }\n            if (self.intf.innerText || self.intf.textContent) {\n                if (self.intf.dataType === 'application/x-canvas-datagrid') {\n                    self.intf.dataType = 'application/json+x-canvas-datagrid';\n                }\n                self.intf.data = self.intf.innerText || self.intf.textContent;\n            }\n            if (self.args.schema) {\n                self.intf.schema = self.args.schema;\n            }\n            if (self.isChildGrid || !self.isComponent) {\n                requestAnimationFrame(function () { self.resize(true); });\n            } else {\n                self.resize(true);\n            }\n            self.initialized = true;\n            return self;\n        };\n        /**\n         * Removes focus from the grid.\n         * @memberof canvasDatagrid\n         * @name blur\n         * @method\n         */\n        self.intf.blur = function (e) {\n            self.hasFocus = false;\n        };\n        /**\n         * Focuses on the grid.\n         * @memberof canvasDatagrid\n         * @name focus\n         * @method\n         */\n        self.intf.focus = function () {\n            self.hasFocus = true;\n            self.controlInput.focus();\n        };\n        if (self.shadowRoot || self.isChildGrid) {\n            Object.defineProperty(self.intf, 'height', {\n                get: function () {\n                    if (self.shadowRoot) {\n                        return self.shadowRoot.height;\n                    }\n                    return self.parentNode.height;\n                },\n                set: function (value) {\n                    if (self.shadowRoot) {\n                        self.shadowRoot.height = value;\n                    } else {\n                        self.parentNode.height = value;\n                    }\n                    self.resize(true);\n                }\n            });\n            Object.defineProperty(self.intf, 'width', {\n                get: function () {\n                    if (self.shadowRoot) {\n                        return self.shadowRoot.width;\n                    }\n                    return self.parentNode.width;\n                },\n                set: function (value) {\n                    if (self.shadowRoot) {\n                        self.shadowRoot.width = value;\n                    } else {\n                        self.parentNode.width = value;\n                    }\n                    self.resize(true);\n                }\n            });\n            Object.defineProperty(self.intf, 'parentNode', {\n                get: function () {\n                    return self.parentNode;\n                },\n                set: function (value) {\n                    if (!self.isChildGrid) {\n                        throw new TypeError('Cannot set property parentNode which has only a getter');\n                    }\n                    self.parentNode = value;\n                }\n            });\n        }\n        Object.defineProperty(self.intf, 'visibleRowHeights', {\n            get: function () {\n                return self.visibleRowHeights;\n            }\n        });\n        Object.defineProperty(self.intf, 'openChildren', {\n            get: function () {\n                return self.openChildren;\n            }\n        });\n        Object.defineProperty(self.intf, 'childGrids', {\n            get: function () {\n                return Object.keys(self.childGrids).map(function (gridId) {\n                    return self.childGrids[gridId];\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'isChildGrid', {\n            get: function () {\n                return self.isChildGrid;\n            }\n        });\n        Object.defineProperty(self, 'cursor', {\n            get: function () {\n                return self.parentNodeStyle.cursor;\n            },\n            set: function (value) {\n                if (value === 'cell') { value = 'default'; }\n                if (self.currentCursor !== value) {\n                    self.parentNodeStyle.cursor = value;\n                    self.currentCursor = value;\n                }\n            }\n        });\n        Object.defineProperty(self.intf, 'orderDirection', {\n            get: function () {\n                return self.orderDirection;\n            },\n            set: function (value) {\n                if (value !== 'desc') {\n                    value = 'asc';\n                }\n                self.orderDirection = value;\n                self.order(self.orderBy, self.orderDirection);\n            }\n        });\n        Object.defineProperty(self.intf, 'orderBy', {\n            get: function () {\n                return self.orderBy;\n            },\n            set: function (value) {\n                if (self.getSchema().find(function (col) {\n                        return col.name === value;\n                    }) === undefined) {\n                    throw new Error('Cannot sort by unknown column name.');\n                }\n                self.orderBy = value;\n                self.order(self.orderBy, self.orderDirection);\n            }\n        });\n        if (self.isComponent) {\n            Object.defineProperty(self.intf, 'offsetHeight', {\n                get: function () {\n                    return self.canvas.offsetHeight;\n                }\n            });\n            Object.defineProperty(self.intf, 'offsetWidth', {\n                get: function () {\n                    return self.canvas.offsetWidth;\n                }\n            });\n        }\n        Object.defineProperty(self.intf, 'scrollHeight', {\n            get: function () {\n                return self.scrollBox.scrollHeight;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollWidth', {\n            get: function () {\n                return self.scrollBox.scrollWidth;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollTop', {\n            get: function () {\n                return self.scrollBox.scrollTop;\n            },\n            set: function (value) {\n                self.scrollBox.scrollTop = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollLeft', {\n            get: function () {\n                return self.scrollBox.scrollLeft;\n            },\n            set: function (value) {\n                self.scrollBox.scrollLeft = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'sizes', {\n            get: function () {\n                return self.sizes;\n            }\n        });\n        Object.defineProperty(self.intf, 'input', {\n            get: function () {\n                return self.input;\n            }\n        });\n        Object.defineProperty(self.intf, 'controlInput', {\n            get: function () {\n                return self.controlInput;\n            }\n        });\n        Object.defineProperty(self.intf, 'currentCell', {\n            get: function () {\n                return self.currentCell;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleCells', {\n            get: function () {\n                return self.visibleCells;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRows', {\n            get: function () {\n                return self.visibleRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'selections', {\n            get: function () {\n                return self.selections;\n            }\n        });\n        Object.defineProperty(self.intf, 'dragMode', {\n            get: function () {\n                return self.dragMode;\n            }\n        });\n        Object.defineProperty(self.intf, 'changes', {\n            get: function () {\n                return self.changes;\n            }\n        });\n        self.intf.formatters = self.formatters;\n        Object.defineProperty(self.intf, 'dataType', {\n            get: function () {\n                return self.dataType;\n            },\n            set: function (value) {\n                if (!self.parsers[value]) {\n                    throw new Error('No parser for MIME type ' + value);\n                }\n                self.dataType = value;\n            }\n        });\n        self.eventNames.forEach(function (eventName) {\n            Object.defineProperty(self.intf, 'on' + eventName, {\n                get: function () {\n                    return self.componentL1Events[eventName];\n                },\n                set: function (value) {\n                    self.events[eventName] = [];\n                    self.componentL1Events[eventName] = value;\n                    if (!value) { return; }\n                    self.addEventListener(eventName, value);\n                }\n            });\n        });\n        Object.defineProperty(self.intf, 'frozenRow', {\n            get: function () {\n                return self.frozenRow;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.visibleRows.length < val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible rows.');\n                }\n                self.frozenRow = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'frozenColumn', {\n            get: function () {\n                return self.frozenColumn;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.getVisibleSchema().length < val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible columns.');\n                }\n                self.frozenColumn = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollIndexRect', {\n            get: function () {\n                return {\n                    top: self.scrollIndexTop,\n                    right: self.scrollIndexRight,\n                    bottom: self.scrollIndexBottom,\n                    left: self.scrollIndexLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollPixelRect', {\n            get: function () {\n                return {\n                    top: self.scrollPixelTop,\n                    right: self.scrollPixelRight,\n                    bottom: self.scrollPixelBottom,\n                    left: self.scrollPixelLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'rowOrder', {\n            get: function () {\n                return self.orders.rows;\n            },\n            set: function (val) {\n                if (!Array.isArray(val)) {\n                    throw new TypeError('Value must be an array.');\n                }\n                if (!self.data || val.length < self.data.length) {\n                    throw new RangeError('Array length must be equal to or greater than number of rows.');\n                }\n                self.orders.rows = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'columnOrder', {\n            get: function () {\n                return self.orders.columns;\n            },\n            set: function (val) {\n                if (!Array.isArray(val)) {\n                    throw new TypeError('Value must be an array.');\n                }\n                if (val.length < self.getSchema().length) {\n                    throw new RangeError('Array length must be equal to or greater than number of columns.');\n                }\n                self.orders.columns = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'selectionBounds', {\n            get: function () {\n                return self.getSelectionBounds();\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedRows', {\n            get: function () {\n                return self.getSelectedData(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedCells', {\n            get: function () {\n                return self.getSelectedData();\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleSchema', {\n            get: function () {\n                return self.getVisibleSchema().map(function eachDataRow(col) {\n                    return col;\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'treeGridAttributes', {\n            get: function () {\n                return self.treeGridAttributes;\n            },\n            set: function setTreeGridAttributes(value) {\n                self.treeGridAttributes = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'cellGridAttributes', {\n            get: function () {\n                return self.cellGridAttributes;\n            },\n            set: function setCellGridAttributes(value) {\n                self.cellGridAttributes = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'ctx', {\n            get: function () {\n                return self.ctx;\n            }\n        });\n        Object.defineProperty(self.intf, 'schema', {\n            get: function schemaGetter() {\n                return self.getSchema();\n            },\n            set: function schemaSetter(value) {\n                if (value === undefined) {\n                    // Issue #89 - allow schema to be set to initialized state\n                    self.schema = undefined;\n                    self.tempSchema = undefined;\n                    self.dispatchEvent('schemachanged', {schema: undefined});\n                    return;\n                }\n                if (!Array.isArray(value) || typeof value[0] !== 'object') {\n                    throw new Error('Schema must be an array of objects.');\n                }\n                if (value[0].name === undefined) {\n                    throw new Error('Expected schema to contain an object with at least a name property.');\n                }\n                self.schema = value.map(function eachSchemaColumn(column, index) {\n                    column.width = column.width || self.style.cellWidth;\n                    column.filter = column.filter || self.filter(column.type);\n                    column.type = column.type || 'string';\n                    column.index = index;\n                    column.columnIndex = index;\n                    column.rowIndex = -1;\n                    return column;\n                });\n                self.tempSchema = undefined;\n                self.createNewRowData();\n                self.createColumnOrders();\n                self.tryLoadStoredSettings();\n                if (self.storedSettings && typeof self.storedSettings.visibility === 'object') {\n                    self.schema.forEach(function hideEachSchemaColumn(column, index) {\n                        if (self.storedSettings && self.storedSettings.visibility[column.name] !== undefined) {\n                            column.hidden = !self.storedSettings.visibility[column.name];\n                        }\n                    });\n                }\n                self.resize(true);\n                self.dispatchEvent('schemachanged', {schema: self.schema});\n            }\n        });\n        /**\n         * Gets an array of currently registered MIME types.\n         * @memberof canvasDatagrid\n         * @name getDataTypes\n         * @method\n         */\n        self.intf.getTypes = function () {\n            return Object.keys(self.parsers);\n        };\n        self.parseInnerHtml = function (data) {\n            try {\n                data = JSON.parse(data);\n            } catch (e) {\n                throw new Error('Cannot parse application/json+x-canvas-datagrid formated data. '\n                    + e.message + '  \\nNote: canvas-datagrid.innerHTML is for string data only.  '\n                    + 'Use the canvas-datagrid.data property to set object data.');\n            }\n            return data;\n        };\n        self.parsers['application/json+x-canvas-datagrid'] = function (data, callback) {\n            self.parsers['application/x-canvas-datagrid'](self.parseInnerHtml(data), function (data, schema) {\n                return callback(data, schema);\n            });\n        };\n        self.parsers['application/x-canvas-datagrid'] = function (data, callback) {\n            return callback(data);\n        };\n        self.intf.parsers = self.parsers;\n        // send to dataType ETL function to extract from input data\n        // and transform into native [{}, {}] format\n        self.etl = function (data, callback) {\n            if (!self.intf.parsers[self.dataType]) {\n                throw new Error('Unsupported data type.');\n            }\n            self.intf.parsers[self.dataType](data, function (data, schema) {\n                if (Array.isArray(schema)) {\n                    self.schema = schema;\n                }\n                // Issue #89 - allow schema to be auto-created every time data is set\n                if (self.attributes.autoGenerateSchema) {\n                    self.schema = self.getSchemaFromData(data);\n                }\n                if (!self.schema) {\n                    self.tempSchema = self.getSchemaFromData(data);\n                }\n                if (self.getSchema()) {\n                    self.createColumnOrders();\n                }\n                // set the unfiltered/sorted data array\n                self.originalData = data;\n                //TODO apply filter to incoming dataset\n                self.data = self.originalData;\n                // empty data was set\n                if (!self.schema && (self.data || []).length === 0) {\n                    self.tempSchema = [{name: ''}];\n                }\n                self.fitColumnToValues('cornerCell', true);\n                if ((self.tempSchema && !self.schema) || self.attributes.autoGenerateSchema) {\n                    self.createColumnOrders();\n                    self.dispatchEvent('schemachanged', {schema: self.tempSchema});\n                }\n                callback();\n            });\n        };\n        Object.defineProperty(self.intf, 'data', {\n            get: function dataGetter() {\n                return self.data;\n            },\n            set: function dataSetter(value) {\n                self.etl(value, function () {\n                    self.changes = [];\n                    self.createNewRowData();\n                    if (self.attributes.autoResizeColumns && self.data.length > 0\n                            && self.storedSettings === undefined) {\n                        self.autosize();\n                    }\n                    // set the header column to fit the numbers in it\n                    self.fitColumnToValues('cornerCell', true);\n                    self.createRowOrders();\n                    self.tryLoadStoredSettings();\n                    self.dispatchEvent('datachanged', {data: self.data});\n                    self.resize(true);\n                });\n            }\n        });\n        self.initScrollBox = function () {\n            var sHeight = 0,\n                sWidth = 0,\n                scrollTop = 0,\n                scrollLeft = 0,\n                scrollHeight = 0,\n                scrollWidth = 0,\n                scrollBoxHeight = 20,\n                scrollBoxWidth = 20;\n            function setScrollTop(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollTop value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollHeight) {\n                    value = scrollHeight;\n                }\n                if (scrollHeight < 0) {\n                    value = 0;\n                }\n                scrollTop = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            function setScrollLeft(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollLeft value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollWidth) {\n                    value = scrollWidth;\n                }\n                if (scrollWidth < 0) {\n                    value = 0;\n                }\n                scrollLeft = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            self.scrollBox.toString = function () {\n                return '{\"width\": ' + scrollWidth.toFixed(2)\n                    + ', \"height\": ' + scrollHeight.toFixed(2)\n                    + ', \"left\": ' + scrollLeft.toFixed(2)\n                    + ', \"top\": ' + scrollTop.toFixed(2)\n                    + ', \"widthRatio\": ' + self.scrollBox.widthBoxRatio.toFixed(5)\n                    + ', \"heightRatio\": ' + self.scrollBox.heightBoxRatio.toFixed(5) + '}';\n            };\n            self.scrollBox.scrollTo = function (x, y, supressDrawEvent) {\n                setScrollLeft(x, true);\n                setScrollTop(y, supressDrawEvent);\n            };\n            Object.defineProperty(self.scrollBox, 'scrollBoxHeight', {\n                get: function () {\n                    return scrollBoxHeight;\n                },\n                set: function (value) {\n                    scrollBoxHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollBoxWidth', {\n                get: function () {\n                    return scrollBoxWidth;\n                },\n                set: function (value) {\n                    scrollBoxWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'height', {\n                get: function () {\n                    return sHeight;\n                },\n                set: function (value) {\n                    if (scrollHeight < value) {\n                        scrollTop = 0;\n                    }\n                    sHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'width', {\n                get: function () {\n                    return sWidth;\n                },\n                set: function (value) {\n                    sWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollTop', {\n                get: function () {\n                    return scrollTop;\n                },\n                set: setScrollTop\n            });\n            Object.defineProperty(self.scrollBox, 'scrollLeft', {\n                get: function () {\n                    return scrollLeft;\n                },\n                set: setScrollLeft\n            });\n            Object.defineProperty(self.scrollBox, 'scrollHeight', {\n                get: function () {\n                    return scrollHeight;\n                },\n                set: function (value) {\n                    if (scrollTop > value) {\n                        scrollTop = Math.max(value, 0);\n                    }\n                    if (scrollHeight < sHeight) {\n                        scrollTop = 0;\n                    }\n                    scrollHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollWidth', {\n                get: function () {\n                    return scrollWidth;\n                },\n                set: function (value) {\n                    if (scrollLeft > value) {\n                        scrollLeft = Math.max(value, 0);\n                    }\n                    scrollWidth = value;\n                }\n            });\n        };\n        return;\n    };\n});\n","/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var touchTimerMs = 50,\n            touchScrollTimeout;\n        self.scrollAnimation = {};\n        self.touchDelta = {};\n        self.touchAnimateTo = {};\n        self.animationFrames = 0;\n        self.getTouchPos = function (e, touchIndex) {\n            var t = touchIndex ? e.touches[touchIndex] : e.touches[0],\n                rect = self.canvas.getBoundingClientRect(),\n                pos;\n            if (!t) { return; }\n            pos = {\n                x: t.clientX - rect.left,\n                y: t.clientY - rect.top\n            };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        // shamelessly stolen from from https://gist.github.com/gre/1650294\n        self.easingFunctions = {\n            linear: function (t) { return t; },\n            easeInQuad: function (t) { return t * t; },\n            easeOutQuad: function (t) { return t * (2 - t); },\n            easeInOutQuad: function (t) { return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t; },\n            easeInCubic: function (t) { return t * t * t; },\n            easeOutCubic: function (t) { return (--t) * t * t + 1; },\n            easeInOutCubic: function (t) { return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1; },\n            easeInQuart: function (t) { return t * t * t * t; },\n            easeOutQuart: function (t) { return 1 - (--t) * t * t * t; },\n            easeInOutQuart: function (t) { return t < 0.5 ? 8 * t  * t  * t * t : 1 - 8 * (--t) * t * t * t; },\n            easeInQuint: function (t) { return t * t * t * t * t; },\n            easeOutQuint: function (t) { return 1 + (--t) * t *  t * t * t; },\n            easeInOutQuint: function (t) { return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t; }\n        };\n        self.easing = function (t, b, c, d) {\n            return c * self.easingFunctions[self.attributes.touchEasingMethod](t / d) + b;\n        };\n        self.calculatePPSTimed = function () {\n            self.xPPST = -((self.touchDelta.x - self.touchSigmaTimed.x) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.yPPST = -((self.touchDelta.y - self.touchSigmaTimed.y) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.touchSigmaTimed = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.calculatePPS = function () {\n            self.xPPS = -((self.touchDelta.x - self.touchSigma.x) / (self.touchDelta.t - self.touchSigma.t));\n            self.yPPS = -((self.touchDelta.y - self.touchSigma.y) / (self.touchDelta.t - self.touchSigma.t));\n            self.touchSigma = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.touchEndAnimation = function () {\n            if (!self.canvas || !self.scrollBox.scrollTo) { return requestAnimationFrame(self.touchEndAnimation); }\n            var n = performance.now(),\n                d = self.attributes.touchReleaseAnimationDurationMs,\n                t;\n            t = n - self.touchDelta.t;\n            self.animationFrames += 1;\n            self.scrollAnimation.x = self.easing(t, self.touchDelta.scrollLeft, self.touchAnimateTo.x, d);\n            self.scrollAnimation.y = self.easing(t, self.touchDelta.scrollTop, self.touchAnimateTo.y, d);\n            if (t > d || (self.scrollAnimation.y === self.scrollBox.scrollTop\n                    && self.scrollAnimation.x === self.scrollBox.scrollLeft) || self.stopAnimation) {\n                return;\n            }\n            self.scrollBox.scrollTo(self.scrollAnimation.x, self.scrollAnimation.y);\n            requestAnimationFrame(self.touchEndAnimation);\n        };\n        self.touchEditCell = function (cell) {\n            self.beginEditAt(cell.columnIndex, cell.rowIndex);\n        };\n        self.touchCell = function (e) {\n            return function () {\n                clearInterval(self.calculatePPSTimer);\n                var i, pos = self.getTouchPos(e);\n                if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone) {\n                    i = self.getCellAt(pos.x, pos.y);\n                    if (!i) { return; }\n                    if (self.touchingCell && self.touchingCell.rowIndex === i.rowIndex\n                            && self.touchingCell.columnIndex === i.columnIndex) {\n                        self.touchEditCell(i);\n                        return;\n                    }\n                    if (self.input && self.input.editCell) {\n                        self.endEdit();\n                    }\n                    self.touchingCell = i;\n                    self.selectArea({\n                        top: i.rowIndex,\n                        bottom: i.rowIndex,\n                        left: i.columnIndex,\n                        right: i.columnIndex\n                    });\n                    self.draw(true);\n                }\n            };\n        };\n        self.touchstart = function (e) {\n            if (e.changedTouches[0]) {\n                self.touchStart = self.getTouchPos(e);\n                self.startingCell = self.getCellAt(self.touchStart.x, self.touchStart.y, true);\n            }\n            if (self.dispatchEvent('touchstart', {NativeEvent: e, cell: self.startingCell})) { return; }\n            self.disposeContextMenu();\n            clearInterval(self.calculatePPSTimer);\n            clearTimeout(self.touchContextTimeout);\n            self.touchStartEvent = e;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (e.touches.length === 1 && e.changedTouches[0] && !self.zoomAltered) {\n                self.touchLength = 1;\n                self.touchStart = self.touchStart || self.touchStart1;\n                self.touchScrollStart = {\n                    x: self.scrollBox.scrollLeft,\n                    y: self.scrollBox.scrollTop,\n                    t: performance.now()\n                };\n                self.touchDelta = {\n                    x: 0,\n                    y: 0,\n                    scrollLeft: self.scrollBox.scrollLeft,\n                    scrollTop: self.scrollBox.scrollTop,\n                    t: self.touchScrollStart.t\n                };\n                self.touchSigma = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchSigmaTimed = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchContextTimeout = setTimeout(function () {\n                    self.contextmenuEvent(e, self.touchStart);\n                }, self.attributes.touchContextMenuTimeMs);\n                self.calculatePPSTimer = setInterval(self.calculatePPSTimed, touchTimerMs);\n                if (self.startingCell && (self.startingCell.isGrid || ['tree', 'inherit'].indexOf(self.startingCell.context) !== -1)) {\n                    self.hasFocus = false;\n                    return;\n                }\n                self.hasFocus = true;\n                if (self.startingCell.isHeader) {\n                    if (self.startingCell.isRowHeader) {\n                        self.selectArea({\n                            top: self.startingCell.rowIndex,\n                            bottom: self.startingCell.rowIndex,\n                            left: 0,\n                            right: self.getVisibleSchema().length - 1,\n                        });\n                        self.draw(true);\n                    } else if (self.startingCell.isColumnHeader) {\n                        if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                            if (self.orderBy === self.startingCell.header.name) {\n                                self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                            } else {\n                                self.orderDirection = 'asc';\n                            }\n                            self.order(self.startingCell.header.name, self.orderDirection);\n                        }\n                        if (self.attributes.columnHeaderClickBehavior === 'select') {\n                            self.selectArea({\n                                top: 0,\n                                bottom: self.data.length - 1,\n                                left: self.startingCell.columnIndex,\n                                right: self.startingCell.columnIndex,\n                            });\n                            self.draw(true);\n                        }\n                    }\n                    self.touchEndEvents(e);\n                    return;\n                }\n            }\n            if (self.zoomAltered) { return; }\n            document.body.addEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.addEventListener('touchend', self.touchend, false);\n            document.body.addEventListener('touchcancel', self.touchcancel, false);\n            self.draw(true);\n        };\n        self.touchSelect = function (cell, handleType) {\n            if (cell.rowIndex === undefined || cell.columnIndex === undefined) { return; }\n            self.touchSelecting = true;\n            var bounds = self.getSelectionBounds();\n            if (handleType === 'selection-handle-bl'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex <= bounds.right) {\n                bounds.bottom = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tl'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex <= bounds.right) {\n                bounds.top = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tr'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex >= bounds.left) {\n                bounds.top = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            } else if (handleType === 'selection-handle-br'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex >= bounds.left) {\n                bounds.bottom = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            }\n            if (self.attributes.selectionMode === 'row' || cell.rowIndex === -1) {\n                bounds.left = 0;\n                bounds.right = self.getSchema().length - 1;\n            } else {\n                bounds.left = Math.max(0, bounds.left);\n            }\n            self.selectArea(bounds);\n            self.draw(true);\n        };\n        self.touchmove = function (e) {\n            var ch, rw, rScrollZone, lScrollZone, bScrollZone, tScrollZone, sbw, t1, t2;\n            if (self.dispatchEvent('beforetouchmove', {NativeEvent: e})) { return; }\n            clearTimeout(touchScrollTimeout);\n            if (e.changedTouches[0]) {\n                self.touchPosition = self.getTouchPos(e);\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = self.getTouchPos(e, 1);\n            }\n            if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) > self.attributes.touchDeadZone) {\n                clearTimeout(self.touchContextTimeout);\n            }\n            if (e.touches.length === 2 && self.touchPosition && self.touchPosition1) {\n                t1 = self.touchPosition.y;\n                t2 = self.touchPosition1.y;\n                if (!self.zoomDeltaStart) {\n                    self.zoomDeltaStart = Math.abs(t1 - t2);\n                    self.startScale = self.scale;\n                }\n                self.touchLength = 2;\n                self.scaleDelta = self.zoomDeltaStart - Math.abs(t1 - t2);\n                self.scale = self.startScale - (self.scaleDelta * self.attributes.touchZoomSensitivity);\n                self.scale = Math.min(Math.max(self.scale, self.attributes.touchZoomMin), self.attributes.touchZoomMax);\n                self.zoomAltered = true;\n                self.resize(true);\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.zoomAltered) { return; }\n            self.touchLength = 1;\n            self.touchPosition = self.touchPosition || self.touchPosition1;\n            ch = self.getColumnHeaderCellHeight();\n            rw = self.getRowHeaderCellWidth();\n            rScrollZone = self.width - self.style.scrollBarWidth - self.touchPosition.x < self.attributes.selectionScrollZone;\n            lScrollZone = self.touchPosition.x - rw < self.attributes.selectionScrollZone;\n            bScrollZone = self.height - self.style.scrollBarWidth - self.touchPosition.y < self.attributes.selectionScrollZone;\n            tScrollZone = self.touchPosition.y - ch < self.attributes.selectionScrollZone;\n            sbw = self.style.scrollBarWidth;\n            function touchScroll() {\n                var x = self.scrollBox.scrollLeft,\n                    y = self.scrollBox.scrollTop;\n                x += (rScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y += (bScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y -= (tScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                x -= (lScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                self.scrollBox.scrollTo(x, y);\n                touchScrollTimeout = setTimeout(touchScroll, self.attributes.scrollRepeatRate);\n            }\n            e.stopPropagation();\n            self.touchDelta = {\n                x: self.touchPosition.x - self.touchStart.x,\n                y: self.touchPosition.y - self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: performance.now()\n            };\n            self.currentCell = self.getCellAt(self.touchPosition.x, self.touchPosition.y);\n            self.dispatchEvent('touchmove', {NativeEvent: e, cell: self.currentCell});\n            self.calculatePPS();\n            self.touchDuration = performance.now() - self.touchScrollStart.t;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            if (self.touchSelecting && (rScrollZone || lScrollZone || tScrollZone || bScrollZone)) {\n                touchScroll();\n            }\n            if (/vertical-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollTop = self.scrollBox.scrollHeight\n                    * ((self.touchPosition.y - ch - sbw) / (self.scrollBox.height - sbw - ch));\n                return;\n            }\n            if (/horizontal-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollLeft = self.scrollBox.scrollWidth\n                    * ((self.touchPosition.x - rw - sbw) / (self.scrollBox.width - sbw - rw));\n                return;\n            }\n            if (/selection-handle-/.test(self.startingCell.style)) {\n                self.touchSelect(self.currentCell, self.startingCell.style);\n                return;\n            }\n            self.scrollBox.scrollTo(self.touchScrollStart.x - self.touchDelta.x,\n                self.touchScrollStart.y - self.touchDelta.y);\n            self.draw(true);\n        };\n        self.touchEndEvents = function (e) {\n            self.zoomDeltaStart = undefined;\n            self.touchSelecting = false;\n            clearInterval(self.touchScrollTimeout);\n            clearInterval(self.touchContextTimeout);\n            clearInterval(self.calculatePPSTimer);\n            e.stopPropagation();\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n        };\n        self.touchend = function (e) {\n            if (self.dispatchEvent('touchend', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.zoomDeltaStart = undefined;\n            if (e.changedTouches[0]) {\n                self.touchPosition = undefined;\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = undefined;\n            }\n            if (self.zoomAltered) {\n                if (e.touches.length === 0) {\n                    self.zoomAltered = false;\n                }\n                return;\n            }\n            var dz = Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone;\n            if (isNaN(self.xPPS)) {\n                self.xPPS = 0;\n            }\n            if (isNaN(self.yPPS)) {\n                self.yPPS = 0;\n            }\n            if (isNaN(self.xPPST)) {\n                self.xPPST = 0;\n            }\n            if (isNaN(self.yPPST)) {\n                self.yPPST = 0;\n            }\n            self.touchAnimateTo.x = self.xPPS * self.attributes.touchReleaseAcceleration;\n            self.touchAnimateTo.y = self.yPPS * self.attributes.touchReleaseAcceleration;\n            self.calculatePPSTimed();\n            if (dz && !self.contextMenu) {\n                self.touchCell(self.touchStartEvent)();\n            } else if (self.animationFrames === 0\n                    && (Math.abs(self.xPPST) > self.attributes.scrollAnimationPPSThreshold\n                        || Math.abs(self.yPPST) > self.attributes.scrollAnimationPPSThreshold)\n                    && !/-scroll-/.test(self.startingCell.style)\n                    && !dz) {\n                self.stopAnimation = false;\n                self.touchEndAnimation();\n            }\n            self.touchEndEvents(e);\n        };\n        self.touchcancel = function (e) {\n            if (self.dispatchEvent('touchcancel', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.touchEndEvents(e);\n        };\n    };\n});\n","/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var wheeling;\n        self.stopPropagation = function (e) { e.stopPropagation(); };\n        /**\n         * Adds an event listener to the given event.\n         * @memberof canvasDatagrid\n         * @name addEventListener\n         * @method\n         * @param {string} ev The name of the event to subscribe to.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.addEventListener = function (ev, fn) {\n            self.events[ev] = self.events[ev] || [];\n            self.events[ev].unshift(fn);\n        };\n        /**\n         * Removes the given listener function from the given event.  Must be an actual reference to the function that was bound.\n         * @memberof canvasDatagrid\n         * @name removeEventListener\n         * @method\n         * @param {string} ev The name of the event to unsubscribe from.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.removeEventListener = function (ev, fn) {\n            (self.events[ev] || []).forEach(function removeEachListener(sfn, idx) {\n                if (fn === sfn) {\n                    self.events[ev].splice(idx, 1);\n                }\n            });\n        };\n        /**\n         * Fires the given event, padding an event object to the event subscribers.\n         * @memberof canvasDatagrid\n         * @name dispatchEvent\n         * @method\n         * @param {number} ev The name of the event to dispatch.\n         * @param {number} e The event object.\n         */\n        self.dispatchEvent = function (ev, e) {\n            e = ev.type ? ev : (e || {});\n            ev = ev.type || ev;\n            var defaultPrevented;\n            function preventDefault() {\n                defaultPrevented = true;\n            }\n            if (!self.events[ev]) { return; }\n            self.events[ev].forEach(function dispatchEachEvent(fn) {\n                e.ctx = self.ctx;\n                e.preventDefault = preventDefault;\n                fn.apply(self.intf, [e]);\n            });\n            return defaultPrevented;\n        };\n        self.getRatio = function () {\n            return Math.min(self.attributes.maxPixelRatio, (window.devicePixelRatio || 1) /\n                (self.ctx.webkitBackingStorePixelRatio ||\n                    self.ctx.mozBackingStorePixelRatio ||\n                    self.ctx.msBackingStorePixelRatio ||\n                    self.ctx.oBackingStorePixelRatio ||\n                    self.ctx.backingStorePixelRatio || 1));\n        };\n        self.resize = function (drawAfterResize) {\n            if (!self.canvas) { return; }\n            var x,\n                v = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'vertical-scroll-bar'\n                },\n                n = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'horizontal-scroll-bar'\n                },\n                vb = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'vertical-scroll-box'\n                },\n                nb = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'horizontal-scroll-box'\n                },\n                co = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    isCorner: true,\n                    isScrollBoxCorner: true,\n                    style: 'scroll-box-corner'\n                },\n                m = (self.style.scrollBarBoxMargin * 2),\n                b = (self.style.scrollBarBorderWidth * 2),\n                d = self.style.scrollBarBoxMargin * 0.5,\n                sbw = self.style.scrollBarWidth + (self.style.scrollBarBorderWidth * 2),\n                ratio = self.getRatio(),\n                bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                cellBorder = self.style.cellBorderWidth * bm,\n                columnHeaderCellBorder = self.style.columnHeaderCellBorderWidth * bm,\n                dataHeight = 0,\n                dataWidth = 0,\n                dims,\n                l = (self.data || []).length,\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                ch = self.style.cellHeight,\n                s = self.getSchema();\n            // sets actual DOM canvas element\n            function checkScrollBoxVisibility() {\n                self.scrollBox.horizontalBarVisible = (self.style.width !== 'auto' && dataWidth > self.scrollBox.width && self.style.overflowX !== 'hidden')\n                    || self.style.overflowX === 'scroll';\n                self.scrollBox.horizontalBoxVisible = dataWidth > self.scrollBox.width;\n                self.scrollBox.verticalBarVisible = (self.style.height !== 'auto' && dataHeight > self.scrollBox.height && self.style.overflowY !== 'hidden')\n                    || self.style.overflowY === 'scroll';\n                self.scrollBox.verticalBoxVisible = dataHeight > self.scrollBox.height;\n            }\n            function setScrollBoxSize() {\n                self.scrollBox.width = self.width - rowHeaderCellWidth;\n                self.scrollBox.height = self.height - columnHeaderCellHeight;\n            }\n            function setCanvasSize() {\n                if (self.isChildGrid) {\n                    return;\n                }\n                dims = {\n                    // HACK +1 ? maybe it's a magic cell border?  Required to line up properly in auto height mode.\n                    height: columnHeaderCellHeight + dataHeight + cellBorder + 1,\n                    width: dataWidth + rowHeaderCellWidth + cellBorder\n                };\n                ['width', 'height'].forEach(function (dim) {\n                    //TODO: support inherit\n                    if (['auto', undefined].indexOf(self.style[dim]) !== -1\n                            && ['auto', undefined].indexOf(self.appliedInlineStyles[dim]) !== -1) {\n                        self.parentNodeStyle[dim] = dims[dim] + 'px';\n                    } else {\n                        self.parentNodeStyle[dim] = self.style[dim];\n                        if (self.isComponet) {\n                            self.canvas.style[dim] = self.style[dim];\n                        }\n                    }\n                });\n            }\n            self.scrollCache.x = [];\n            self.scrollCache.y = [];\n            for (x = 0; x < l; x += 1) {\n                self.scrollCache.y[x] = dataHeight;\n                dataHeight += (((self.sizes.rows[x] || ch) + (self.sizes.trees[x] || 0)) * self.scale)\n                    // HACK? if an expanded tree row is frozen it is necessary to add the tree row's height a second time.\n                    + (self.frozenRow > x ? (self.sizes.trees[x] || 0) : 0);\n            }\n            if (l > 1) {\n                self.scrollCache.y[x] = dataHeight;\n            }\n            dataWidth = s.reduce(function reduceSchema(accumulator, column, columnIndex) {\n                // intentional redefintion of column.  This causes scrollCache to be in the correct order\n                column = s[self.orders.columns[columnIndex]];\n                if (column.hidden) {\n                    self.scrollCache.x[columnIndex] = accumulator;\n                    return accumulator;\n                }\n                var va = accumulator + self.getColummnWidth(self.orders.columns[columnIndex]);\n                self.scrollCache.x[columnIndex] = va;\n                return va;\n            }, 0) || 0;\n            if (self.attributes.showNewRow) {\n                dataHeight += ch;\n            }\n            setCanvasSize();\n            if (self.isChildGrid) {\n                self.width = self.parentNode.offsetWidth;\n                self.height = self.parentNode.offsetHeight;\n            } else if (self.height !== self.canvas.offsetHeight || self.width !== self.canvas.offsetWidth) {\n                self.height = self.canvas.offsetHeight;\n                self.width = self.canvas.offsetWidth;\n                self.canvasOffsetLeft = self.args.canvasOffsetLeft || 0;\n                self.canvasOffsetTop = self.args.canvasOffsetTop || 0;\n            }\n            /// calculate scroll bar dimensions\n            // non-controversial\n            self.scrollBox.top = columnHeaderCellHeight + columnHeaderCellBorder;\n            self.scrollBox.left = rowHeaderCellWidth;\n            // width and height of scroll box\n            setScrollBoxSize();\n            // is the data larger than the scroll box\n            checkScrollBoxVisibility();\n            // if the scroll box is visible, make room for it by expanding the size of the element\n            // if the other dimension is set to auto\n            if (self.scrollBox.horizontalBarVisible) {\n                if (self.style.height === 'auto' && !self.isChildGrid) {\n                    self.height += sbw;\n                }\n                dataHeight += sbw;\n                setCanvasSize();\n                setScrollBoxSize();\n                checkScrollBoxVisibility();\n            }\n            if (self.scrollBox.verticalBarVisible) {\n                if (self.style.width === 'auto' && !self.isChildGrid) {\n                    self.width += sbw;\n                }\n                dataWidth += sbw;\n                setCanvasSize();\n                setScrollBoxSize();\n                checkScrollBoxVisibility();\n            }\n            // set again after bar visibility checks\n            setScrollBoxSize();\n            self.scrollBox.scrollWidth = dataWidth - self.scrollBox.width;\n            self.scrollBox.scrollHeight = dataHeight - self.scrollBox.height;\n            self.scrollBox.widthBoxRatio = self.scrollBox.width / dataWidth;\n            self.scrollBox.scrollBoxWidth = self.scrollBox.width\n                * self.scrollBox.widthBoxRatio\n                - self.style.scrollBarWidth - b - d;\n            // TODO: This heightBoxRatio number is terribly wrong.\n            // They should be a result of the size of the grid/canvas?\n            // it being off causes the scroll bar to \"slide\" under\n            // the dragged mouse.\n            // https://github.com/TonyGermaneri/canvas-datagrid/issues/97\n            self.scrollBox.heightBoxRatio = (self.scrollBox.height - columnHeaderCellHeight) / dataHeight;\n            self.scrollBox.scrollBoxHeight = self.scrollBox.height\n                * self.scrollBox.heightBoxRatio\n                - self.style.scrollBarWidth - b - d;\n            self.scrollBox.scrollBoxWidth = Math.max(self.scrollBox.scrollBoxWidth, self.style.scrollBarBoxMinSize);\n            self.scrollBox.scrollBoxHeight = Math.max(self.scrollBox.scrollBoxHeight, self.style.scrollBarBoxMinSize);\n            // horizontal\n            n.x += rowHeaderCellWidth;\n            n.y += self.height - self.style.scrollBarWidth - d;\n            n.width = self.width - self.style.scrollBarWidth - rowHeaderCellWidth - d - m;\n            n.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n            // horizontal box\n            nb.y = n.y + self.style.scrollBarBoxMargin;\n            nb.width = self.scrollBox.scrollBoxWidth;\n            nb.height = self.style.scrollBarBoxWidth;\n            // vertical\n            v.x += self.width - self.style.scrollBarWidth - self.style.scrollBarBorderWidth - d;\n            v.y += columnHeaderCellHeight;\n            v.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n            v.height = self.height - columnHeaderCellHeight - self.style.scrollBarWidth - d - m;\n            // vertical box\n            vb.x = v.x + self.style.scrollBarBoxMargin;\n            vb.width = self.style.scrollBarBoxWidth;\n            vb.height = self.scrollBox.scrollBoxHeight;\n            // corner\n            co.x = n.x + n.width + m;\n            co.y = v.y + v.height + m;\n            co.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n            co.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n            self.scrollBox.entities = {\n                horizontalBar: n,\n                horizontalBox: nb,\n                verticalBar: v,\n                verticalBox: vb,\n                corner: co\n            };\n            self.scrollBox.bar = {\n                v: v,\n                h: n\n            };\n            self.scrollBox.box = {\n                v: vb,\n                h: nb\n            };\n            /// calculate page and dom elements\n            self.page = Math.max(1, self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap);\n            // set canvas drawing related items\n            if (!self.isChildGrid) {\n                self.canvas.width = self.width * ratio;\n                self.canvas.height = self.height * ratio;\n                self.ctx.scale(ratio, ratio);\n            }\n            // resize any open dom elements (input/textarea)\n            self.resizeEditInput();\n            self.scroll(true);\n            if (drawAfterResize) {\n                self.draw(true);\n            }\n            self.dispatchEvent('resize', {});\n            return true;\n        };\n        self.scroll = function (dontDraw) {\n            var s = self.getSchema(),\n                l = (self.data || []).length,\n                ch = self.style.cellHeight;\n            // go too far in leaps, then get focused\n            self.scrollIndexTop = Math.floor((l * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight)) - 100);\n            self.scrollIndexTop = Math.max(self.scrollIndexTop, 0);\n            self.scrollPixelTop = self.scrollCache.y[self.scrollIndexTop];\n            // sometimes the grid is rendered but the height is zero\n            if (self.scrollBox.scrollHeight === 0) {\n                self.scrollIndexTop = 0;\n            }\n            self.scrollPixelTop = 0;\n            self.scrollIndexLeft = self.frozenColumn;\n            self.scrollPixelLeft = 0;\n            while (self.scrollPixelTop < self.scrollBox.scrollTop && self.scrollIndexTop < self.data.length) {\n                // start on index +1 since index 0 was used in \"go too far\" section above\n                self.scrollIndexTop += 1;\n                self.scrollPixelTop = self.scrollCache.y[self.scrollIndexTop];\n            }\n            while (self.scrollPixelLeft < (self.scrollBox.scrollLeft + 1) && self.scrollIndexLeft < s.length) {\n                self.scrollPixelLeft = self.scrollCache.x[self.scrollIndexLeft];\n                self.scrollIndexLeft += 1;\n            }\n            if (s.length > 0) {\n                self.scrollIndexLeft = Math.max(self.scrollIndexLeft - 1, 0);\n                self.scrollPixelLeft -= self.getColummnWidth(self.orders.columns[self.scrollIndexLeft]);\n            }\n            if ((self.data || []).length > 0) {\n                self.scrollIndexTop = Math.max(self.scrollIndexTop - 1, 0);\n                self.scrollPixelTop = Math.max((self.scrollPixelTop\n                    - (\n                        self.data[self.scrollIndexTop] ? (self.sizes.rows[self.scrollIndexTop] || ch)\n                                + (self.sizes.trees[self.scrollIndexTop] || 0)\n                        : ch\n                    ) * self.scale), 0);\n            }\n            self.ellipsisCache = {};\n            if (!dontDraw) {\n                self.draw(true);\n            }\n            //TODO: figure out why this has to be delayed for child grids\n            //BUG: wheeling event on 3rd level hierarchy fails to move input box\n            requestAnimationFrame(self.resizeEditInput);\n            self.dispatchEvent('scroll', {top: self.scrollBox.scrollTop, left: self.scrollBox.scrollLeft});\n        };\n        self.mousemove = function (e, overridePos) {\n            if (self.contextMenu || self.input) {\n                return;\n            }\n            self.mouse = overridePos || self.getLayerPos(e);\n            var ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                i,\n                s = self.getSchema(),\n                dragBounds,\n                sBounds,\n                x = self.mouse.x,\n                y = self.mouse.y,\n                o = self.getCellAt(x, y),\n                delta,\n                ev = {NativeEvent: e, cell: o, x: x, y: y},\n                previousCell = self.currentCell;\n            clearTimeout(self.scrollTimer);\n            if (!self.isInGrid({x: x, y: y})) {\n                self.hasFocus = false;\n            }\n            if (self.dispatchEvent('mousemove', ev)) {\n                return;\n            }\n            if (o && self.currentCell) {\n                self.rowBoundaryCrossed = self.currentCell.rowIndex !== o.rowIndex;\n                self.columnBoundaryCrossed = self.currentCell.columnIndex !== o.columnIndex;\n                self.cellBoundaryCrossed = self.rowBoundaryCrossed || self.columnBoundaryCrossed;\n                ['row', 'column', 'cell'].forEach(function (prefix) {\n                    if (self[prefix + 'BoundaryCrossed']) {\n                        ev.cell = previousCell;\n                        self.dispatchEvent(prefix + 'mouseout', ev);\n                        ev.cell = o;\n                        self.dispatchEvent(prefix + 'mouseover', ev);\n                    }\n                });\n            }\n            self.currentCell = o;\n            if (!self.hasFocus) {\n                return;\n            }\n            self.hovers = {};\n            if (!self.draggingItem\n                    && o\n                    && self.scrollModes.indexOf(o.context) === -1) {\n                self.dragItem = o;\n                self.dragMode = o.dragContext;\n                self.cursor = o.context;\n                if (o.context === 'cell') {\n                    self.cursor = 'default';\n                    self.hovers = { rowIndex: o.rowIndex, columnIndex: o.columnIndex };\n                }\n                if ((self.selecting || self.reorderObject)\n                        && o.context === 'cell') {\n                    delta = {\n                        x: Math.abs(self.dragStart.x - x),\n                        y: Math.abs(self.dragStart.y - y)\n                    };\n                    if (self.dragStartObject.columnIndex !== -1 && e.shiftKey) {\n                        self.dragStartObject = {\n                            rowIndex: self.activeCell.rowIndex,\n                            columnIndex: self.activeCell.columnIndex\n                        };\n                    }\n                    dragBounds = {\n                        top: Math.min(self.dragStartObject.rowIndex, o.rowIndex),\n                        left: Math.min(self.dragStartObject.columnIndex, o.columnIndex),\n                        bottom: Math.max(self.dragStartObject.rowIndex, o.rowIndex),\n                        right: Math.max(self.dragStartObject.columnIndex, o.columnIndex)\n                    };\n                    if (self.dragStartObject.columnIndex === -1) {\n                        sBounds = self.getSelectionBounds();\n                        dragBounds.left = -1;\n                        dragBounds.right = s.length - 1;\n                        dragBounds.top = Math.min(sBounds.top, o.rowIndex);\n                        dragBounds.bottom = Math.max(sBounds.bottom, o.rowIndex);\n                    }\n                    if (self.dragStartObject.rowIndex !== o.rowIndex\n                                || self.dragStartObject.columnIndex !== o.columnIndex) {\n                        self.ignoreNextClick = true;\n                    }\n                    if (self.cellBoundaryCrossed || (delta.x === 0 && delta.y === 0) || (self.attributes.selectionMode === 'row')) {\n                        if (((self.attributes.selectionMode === 'row') || self.dragStartObject.columnIndex === -1)\n                                && self.rowBoundaryCrossed) {\n                            self.selectRow(o.rowIndex, ctrl, null, true);\n                        } else if (self.attributes.selectionMode !== 'row') {\n                            if (!self.dragAddToSelection && o.rowIndex !== undefined) {\n                                if (self.selections[o.rowIndex] && self.selections[o.rowIndex].indexOf(o.columnIndex) !== -1) {\n                                    self.selections[o.rowIndex].splice(self.selections[o.rowIndex].indexOf(o.columnIndex), 1);\n                                }\n                            } else {\n                                self.selections[o.rowIndex] = self.selections[o.rowIndex] || [];\n                                if (self.selections[o.rowIndex].indexOf(o.columnIndex) === -1) {\n                                    self.selections[o.rowIndex].push(o.columnIndex);\n                                }\n                            }\n                        }\n                    }\n                    if ((!self.selectionBounds || (dragBounds.top !== self.selectionBounds.top\n                            || dragBounds.left !== self.selectionBounds.left\n                            || dragBounds.bottom !== self.selectionBounds.bottom\n                            || dragBounds.right !== self.selectionBounds.right)) && !ctrl) {\n                        self.selections = [];\n                        sBounds = dragBounds;\n                        if (self.attributes.selectionMode === 'row') {\n                            for (i = sBounds.top; i <= sBounds.bottom; i += 1) {\n                                self.selectRow(i, true, null, true);\n                            }\n                        } else if (dragBounds.top !== -1) {\n                            self.selectArea(sBounds, true);\n                        }\n                    }\n                    self.autoScrollZone(e, x, y, ctrl);\n                }\n            }\n            self.cellBoundaryCrossed = false;\n            self.rowBoundaryCrossed = false;\n            self.columnBoundaryCrossed = false;\n            self.draw(true);\n        };\n        self.click = function (e, overridePos) {\n            var i,\n                ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                pos = overridePos || self.getLayerPos(e);\n            self.currentCell = self.getCellAt(pos.x, pos.y);\n            if (self.currentCell.grid !== undefined) {\n                return;\n            }\n            function checkSelectionChange() {\n                var ev = {\n                    selections: self.selections,\n                    selectionBounds: self.selectionBounds\n                };\n                Object.defineProperty(ev, 'selectedData', {\n                    get: function () {\n                        return self.getSelectedData();\n                    }\n                });\n            }\n            if (self.input) {\n                self.endEdit();\n            }\n            if (self.ignoreNextClick) {\n                self.ignoreNextClick = false;\n                return;\n            }\n            i = self.currentCell;\n            if (self.dispatchEvent('click', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (['rowHeaderCell', 'columnHeaderCell'].indexOf(self.currentCell.style) === -1 && !ctrl) {\n                self.setActiveCell(i.columnIndex, i.rowIndex);\n            }\n            if (self.currentCell.context === 'cell') {\n                if (self.currentCell.style === 'cornerCell') {\n                    self.selectAll();\n                    self.draw();\n                    checkSelectionChange();\n                    return;\n                }\n                if (self.currentCell.style === 'columnHeaderCell') {\n                    if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                        if (self.orderBy === i.header.name) {\n                            self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                        } else {\n                            self.orderDirection = 'asc';\n                        }\n                        self.order(i.header.name, self.orderDirection);\n                        checkSelectionChange();\n                        return;\n                    }\n                    if (self.attributes.columnHeaderClickBehavior === 'select') {\n                        self.selectColumn(i.header.index, ctrl, e.shiftKey, true);\n                        checkSelectionChange();\n                        self.draw();\n                        return;\n                    }\n                }\n                self.selections[i.rowIndex] = self.selections[i.rowIndex] || [];\n                if (((self.attributes.selectionMode === 'row') || self.currentCell.style === 'rowHeaderCell')) {\n                    if (self.currentCell.style === 'rowHeaderCell'\n                            && self.attributes.tree && pos.x > 0\n                            && pos.x - self.currentCell.x < self.style.treeArrowWidth\n                            + self.style.treeArrowMarginLeft\n                            + self.style.treeArrowMarginRight + self.style.treeArrowClickRadius\n                            && pos.y - self.currentCell.y < self.style.treeArrowHeight\n                            + self.style.treeArrowMarginTop + self.style.treeArrowClickRadius\n                            && pos.y > 0) {\n                        self.toggleTree(i.rowIndex);\n                        return;\n                    }\n                }\n                if (e.shiftKey && !ctrl) {\n                    self.selectionBounds = self.getSelectionBounds();\n                    self.selectArea(undefined, false);\n                }\n            }\n            checkSelectionChange();\n            self.draw(true);\n        };\n        self.dragResizeColumn = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = self.resizingStartingWidth + pos.x - self.dragStart.x;\n            y = self.resizingStartingHeight + pos.y - self.dragStart.y;\n            if (x < self.style.minColumnWidth) {\n                x = self.style.minColumnWidth;\n            }\n            if (y < self.style.minRowHeight) {\n                y = self.style.minRowHeight;\n            }\n            if (self.dispatchEvent('resizecolumn', {x: x, y: y, draggingItem: self.draggingItem})) { return false; }\n            if (self.scrollBox.scrollLeft > self.scrollBox.scrollWidth - self.attributes.resizeScrollZone\n                    && self.dragMode === 'ew-resize') {\n                self.resize(true);\n                self.scrollBox.scrollLeft += x;\n            }\n            if (self.dragMode === 'ew-resize') {\n                self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.sortColumnIndex] = x;\n                if (['rowHeaderCell', 'cornerCell'].indexOf(self.draggingItem.header.style) !== -1) {\n                    self.resize(true);\n                }\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.dragMode === 'ns-resize') {\n                if (self.draggingItem.rowOpen) {\n                    self.sizes.trees[self.draggingItem.rowIndex] = y;\n                } else if (self.attributes.globalRowResize) {\n                    self.style.cellHeight = y;\n                } else {\n                    self.sizes.rows[self.draggingItem.rowIndex] = y;\n                }\n                self.dispatchEvent('resizerow', {row: y});\n                self.resizeChildGrids();\n                return;\n            }\n            self.ellipsisCache = {};\n        };\n        self.stopDragResize = function () {\n            self.resize();\n            document.body.removeEventListener('mousemove', self.dragResizeColumn, false);\n            document.body.removeEventListener('mouseup', self.stopDragResize, false);\n            self.setStorageData();\n            self.draw(true);\n            self.ignoreNextClick = true;\n        };\n        self.scrollGrid = function (e) {\n            var pos = self.getLayerPos(e);\n            if (self.attributes.scrollPointerLock && self.pointerLockPosition\n                    && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                self.pointerLockPosition.x += e.movementX;\n                self.pointerLockPosition.y += e.movementY;\n                self.pointerLockPosition.x = Math.min(self.width - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.x));\n                self.pointerLockPosition.y = Math.min(self.height - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.y));\n                pos = self.pointerLockPosition;\n            }\n            self.scrollMode = self.getCellAt(pos.x, pos.y).context;\n            if (self.scrollMode === 'horizontal-scroll-box' && self.scrollStartMode !== 'horizontal-scroll-box') {\n                self.scrollStartMode = 'horizontal-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.left = self.scrollBox.scrollLeft;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box' && self.scrollStartMode !== 'vertical-scroll-box') {\n                self.scrollStartMode = 'vertical-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.top = self.scrollBox.scrollTop;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollStartMode === 'vertical-scroll-box'\n                    && self.scrollMode !== 'vertical-scroll-box') {\n                self.scrollMode = 'vertical-scroll-box';\n            }\n            if (self.scrollStartMode === 'horizontal-scroll-box'\n                    && self.scrollMode !== 'horizontal-scroll-box') {\n                self.scrollMode = 'horizontal-scroll-box';\n            }\n            clearTimeout(self.scrollTimer);\n            if (self.scrollModes.indexOf(self.scrollMode) === -1) {\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box') {\n                self.scrollBox.scrollTop = self.scrollStart.top + ((pos.y - self.dragStart.y)\n                    / self.scrollBox.heightBoxRatio);\n            } else if (self.scrollMode === 'vertical-scroll-top') {\n                self.scrollBox.scrollTop -= (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'vertical-scroll-bottom') {\n                self.scrollBox.scrollTop += (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n            if (self.scrollMode === 'horizontal-scroll-box') {\n                self.scrollBox.scrollLeft = self.scrollStart.left + ((pos.x - self.dragStart.x)\n                    / self.scrollBox.widthBoxRatio);\n            } else if (self.scrollMode === 'horizontal-scroll-right') {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'horizontal-scroll-left') {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.stopScrollGrid = function () {\n            clearTimeout(self.scrollTimer);\n            if (document.exitPointerLock) {\n                document.exitPointerLock();\n            }\n            document.removeEventListener('mousemove', self.scrollGrid, false);\n        };\n        self.dragReorder = function (e) {\n            var pos, x, y,\n                columReorder = self.dragMode === 'column-reorder',\n                rowReorder = self.dragMode === 'row-reorder';\n            pos = self.getLayerPos(e);\n            x = pos.x - self.dragStart.x;\n            y = pos.y - self.dragStart.y;\n            if (!self.attributes.allowColumnReordering && columReorder) {\n                return;\n            }\n            if (!self.attributes.allowRowReordering && rowReorder) {\n                return;\n            }\n            if (self.dispatchEvent('reordering', {\n                    NativeEvent: e,\n                    source: self.dragStartObject,\n                    target: self.currentCell,\n                    dragMode: self.dragMode\n                })) {\n                return;\n            }\n            if (Math.abs(x) > self.attributes.reorderDeadZone || Math.abs(y) > self.attributes.reorderDeadZone) {\n                self.reorderObject = self.draggingItem;\n                self.reorderTarget = self.currentCell;\n                self.reorderObject.dragOffset = {\n                    x: x,\n                    y: y\n                };\n                self.autoScrollZone(e, columReorder ? pos.x : -1, rowReorder ? pos.y : -1, false);\n            }\n        };\n        self.stopDragReorder = function (e) {\n            var oIndex,\n                tIndex,\n                cr = {\n                    'row-reorder': self.orders.rows,\n                    'column-reorder': self.orders.columns\n                },\n                i = {\n                    'row-reorder': 'rowIndex',\n                    'column-reorder': 'sortColumnIndex'\n                }[self.dragMode];\n            document.body.removeEventListener('mousemove', self.dragReorder, false);\n            document.body.removeEventListener('mouseup', self.stopDragReorder, false);\n            if (self.reorderObject\n                    && self.reorderTarget\n                    && ((self.dragMode === 'column-reorder' && self.reorderTarget.sortColumnIndex > -1\n                        && self.reorderTarget.sortColumnIndex < self.getSchema().length)\n                    || (self.dragMode === 'row-reorder' && self.reorderTarget.rowIndex > -1\n                        && self.reorderTarget.rowIndex < self.data.length))\n                    && self.reorderObject[i] !== self.reorderTarget[i]\n                    && !self.dispatchEvent('reorder', {\n                        NativeEvent: e,\n                        source: self.reorderObject,\n                        target: self.reorderTarget,\n                        dragMode: self.dragMode\n                    })) {\n                self.ignoreNextClick = true;\n                oIndex = cr[self.dragMode].indexOf(self.reorderObject[i]);\n                tIndex = cr[self.dragMode].indexOf(self.reorderTarget[i]);\n                cr[self.dragMode].splice(oIndex, 1);\n                cr[self.dragMode].splice(tIndex, 0, self.reorderObject[i]);\n                self.resize();\n                self.setStorageData();\n            }\n            self.reorderObject = undefined;\n            self.reorderTarget = undefined;\n            self.draw(true);\n        };\n        self.dragMove = function (e) {\n            if (self.dispatchEvent('moving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.moveOffset = {\n                x: self.currentCell.columnIndex - self.dragStartObject.columnIndex,\n                y: self.currentCell.rowIndex - self.dragStartObject.rowIndex\n            };\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopDragMove = function (e) {\n            document.body.removeEventListener('mousemove', self.dragMove, false);\n            document.body.removeEventListener('mouseup', self.stopDragMove, false);\n            var b = self.getSelectionBounds();\n            if (self.dispatchEvent('endmove', {NativeEvent: e, cell: self.currentCell})) {\n                self.movingSelection = undefined;\n                self.moveOffset = undefined;\n                self.draw(true);\n                return;\n            }\n            if (self.moveOffset) {\n                self.moveTo(self.movingSelection, b.left + self.moveOffset.x, b.top + self.moveOffset.y);\n                self.moveSelection(self.moveOffset.x, self.moveOffset.y);\n            }\n            self.movingSelection = undefined;\n            self.moveOffset = undefined;\n            self.draw(true);\n        };\n        self.freezeMove = function (e) {\n            if (self.dispatchEvent('freezemoving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.ignoreNextClick = true;\n            self.freezeMarkerPosition = pos;\n            if (self.currentCell && self.currentCell.rowIndex !== undefined && self.dragMode === 'frozen-row-marker') {\n                self.scrollBox.scrollTop = 0;\n                self.frozenRow = self.currentCell.rowIndex + 1;\n            }\n            if (self.currentCell && self.currentCell.columnIndex !== undefined && self.dragMode === 'frozen-column-marker') {\n                self.scrollBox.scrollLeft = 0;\n                self.frozenColumn = self.currentCell.columnIndex + 1;\n            }\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopFreezeMove = function (e) {\n            document.body.removeEventListener('mousemove', self.freezeMove, false);\n            document.body.removeEventListener('mouseup', self.stopFreezeMove, false);\n            self.freezeMarkerPosition = undefined;\n            if (self.dispatchEvent('endfreezemove', {NativeEvent: e})) {\n                self.frozenRow = self.startFreezeMove.x;\n                self.frozenColumn = self.startFreezeMove.y;\n                self.draw(true);\n                return;\n            }\n            self.draw(true);\n        };\n        self.mousedown = function (e, overridePos) {\n            self.lastMouseDownTarget = e.target;\n            if (self.dispatchEvent('mousedown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (e.button === 2 || self.input) { return; }\n            var ctrl = (e.ctrlKey || e.metaKey),\n                move = /-move/.test(self.dragMode),\n                freeze = /frozen-row-marker|frozen-column-marker/.test(self.dragMode),\n                resize = /-resize/.test(self.dragMode);\n            self.dragStart = overridePos || self.getLayerPos(e);\n            self.scrollStart = {\n                left: self.scrollBox.scrollLeft,\n                top: self.scrollBox.scrollTop\n            };\n            self.dragStartObject = self.getCellAt(self.dragStart.x, self.dragStart.y);\n            self.dragAddToSelection = !self.dragStartObject.selected;\n            if (!ctrl && !e.shiftKey && !/(vertical|horizontal)-scroll-(bar|box)/\n                    .test(self.dragStartObject.context)\n                    && self.currentCell\n                    && !self.currentCell.isColumnHeader\n                    && !move\n                    && !freeze\n                    && !resize) {\n                self.selections = [];\n            }\n            if (self.dragStartObject.isGrid) {\n                return;\n            }\n            if (self.scrollModes.indexOf(self.dragStartObject.context) !== -1) {\n                self.scrollMode = self.dragStartObject.context;\n                self.scrollStartMode = self.dragStartObject.context;\n                self.scrollGrid(e);\n                if (self.attributes.scrollPointerLock\n                        && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                    self.pointerLockPosition = {\n                        x: self.dragStart.x,\n                        y: self.dragStart.y\n                    };\n                    self.canvas.requestPointerLock();\n                }\n                document.addEventListener('mousemove', self.scrollGrid, false);\n                document.addEventListener('mouseup', self.stopScrollGrid, false);\n                self.ignoreNextClick = true;\n                return;\n            }\n            if (self.dragMode === 'cell') {\n                self.selecting = true;\n                if ((self.attributes.selectionMode === 'row' || self.dragStartObject.columnIndex === -1)\n                        && self.dragStartObject.rowIndex > -1) {\n                    self.selectRow(self.dragStartObject.rowIndex, ctrl, null, true);\n                } else if (self.attributes.selectionMode !== 'row') {\n                    self.mousemove(e);\n                }\n                return;\n            }\n            if (move) {\n                self.draggingItem = self.dragItem;\n                self.movingSelection = self.selections.concat([]);\n                self.dragging = self.dragStartObject;\n                if (self.dispatchEvent('beginmove', {NativeEvent: e, cell: self.currentCell})) { return; }\n                document.body.addEventListener('mousemove', self.dragMove, false);\n                document.body.addEventListener('mouseup', self.stopDragMove, false);\n                return self.mousemove(e);\n            }\n            if (freeze) {\n                self.draggingItem = self.dragItem;\n                self.startFreezeMove = {\n                    x: self.frozenRow,\n                    y: self.frozenColumn\n                };\n                if (self.dispatchEvent('beginfreezemove', {NativeEvent: e})) { return; }\n                document.body.addEventListener('mousemove', self.freezeMove, false);\n                document.body.addEventListener('mouseup', self.stopFreezeMove, false);\n                return self.mousemove(e);\n            }\n            if (resize) {\n                self.draggingItem = self.dragItem;\n                if (self.draggingItem.rowOpen) {\n                    self.resizingStartingHeight = self.sizes.trees[self.draggingItem.rowIndex];\n                } else {\n                    self.resizingStartingHeight = self.sizes.rows[self.draggingItem.rowIndex] || self.style.cellHeight;\n                }\n                self.resizingStartingWidth = self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.sortColumnIndex] || self.draggingItem.width;\n                document.body.addEventListener('mousemove', self.dragResizeColumn, false);\n                document.body.addEventListener('mouseup', self.stopDragResize, false);\n                return;\n            }\n            if (['row-reorder', 'column-reorder'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragStartObject;\n                document.body.addEventListener('mousemove', self.dragReorder, false);\n                document.body.addEventListener('mouseup', self.stopDragReorder, false);\n                return;\n            }\n        };\n        self.mouseup = function (e) {\n            clearTimeout(self.scrollTimer);\n            self.cellBoundaryCrossed = true;\n            self.rowBoundaryCrossed = true;\n            self.columnBoundaryCrossed = true;\n            self.selecting = undefined;\n            self.draggingItem = undefined;\n            self.dragStartObject = undefined;\n            if (self.dispatchEvent('mouseup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            if (self.currentCell && self.currentCell.grid !== undefined) {\n                return;\n            }\n            if (self.contextMenu || self.input) { return; }\n            if (self.dragStart && self.isInGrid(self.dragStart)) {\n                self.controlInput.focus();\n            }\n            e.preventDefault();\n        };\n        // gets the horizontal adjacent cells as well as first/last based on column visibility\n        self.getAdjacentCells = function () {\n            var x,\n                i,\n                s = self.getSchema(),\n                o = {};\n            for (x = 0; x < s.length; x += 1) {\n                i = self.orders.columns[x];\n                if (!s[i].hidden) {\n                    if (o.first === undefined) {\n                        o.first = x;\n                        o.left = x;\n                    }\n                    o.last = x;\n                    if (x > self.activeCell.columnIndex && o.right === undefined) {\n                        o.right = x;\n                    }\n                    if (x < self.activeCell.columnIndex) {\n                        o.left = x;\n                    }\n                }\n            }\n            if (o.right === undefined) {\n                o.right = o.last;\n            }\n            return o;\n        };\n        self.keydown = function (e) {\n            var i,\n                ev,\n                adjacentCells = self.getAdjacentCells(),\n                x = self.activeCell.columnIndex,\n                y = self.activeCell.rowIndex,\n                ctrl = (e.ctrlKey || e.metaKey),\n                last = self.data.length - 1,\n                s = self.getSchema(),\n                cols = s.length - 1;\n            if (self.dispatchEvent('keydown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.attributes.showNewRow) {\n                last += 1;\n            }\n            if (e.keyCode === 9) {\n                e.preventDefault();\n            }\n            // esc\n            if (e.keyCode === 27) {\n                self.selections = [];\n                self.draw(true);\n            // ctrl + a\n            } else if (ctrl && e.keyCode === 65) {\n                self.selectAll();\n            //ArrowDown\n            } else if (e.keyCode === 40) {\n                y += 1;\n            //ArrowUp\n            } else if (e.keyCode === 38) {\n                y -= 1;\n            //ArrowLeft Tab\n            } else if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {\n                x = adjacentCells.left;\n            //ArrowRight Tab\n            } else if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {\n                x = adjacentCells.right;\n            //PageUp\n            } else if (e.keyCode === 33) {\n                y -= self.page;\n                e.preventDefault();\n            //PageDown\n            } else if (e.keyCode === 34) {\n                y += self.page;\n                e.preventDefault();\n            //Home ArrowUp\n            } else if (e.keyCode === 36 || (ctrl && e.keyCode === 38)) {\n                y = 0;\n            //End ArrowDown\n            } else if (e.keyCode === 35 || (ctrl && e.keyCode === 40)) {\n                y = self.data.length - 1;\n            //ArrowRight\n            } else if (ctrl && e.keyCode === 39) {\n                x = adjacentCells.last;\n            //ArrowLeft\n            } else if (ctrl && e.keyCode === 37) {\n                x = adjacentCells.first;\n            }\n            //Enter\n            if (e.keyCode === 13) {\n                return self.beginEditAt(x, y);\n            }\n            //Space\n            if (e.keyCode === 32) {\n                self.selections = [];\n                self.selections[Math.max(y, 0)] = [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                if (self.attributes.selectionMode === 'row') {\n                    for (i = self.selectionBounds.top; i <= self.selectionBounds.bottom; i += 1) {\n                        self.selectRow(i, ctrl, null, true);\n                    }\n                } else {\n                    self.selectArea(undefined, ctrl);\n                }\n                e.preventDefault();\n                self.draw(true);\n                return;\n            }\n            if (x < 0) {\n                x = adjacentCells.first;\n            }\n            if (y > last) {\n                y = last;\n            }\n            if (y < 0) {\n                y = 0;\n            }\n            if (x > cols) {\n                x = adjacentCells.last;\n            }\n            // TODO - most likley some column order related bugs in key based selection\n            // Arrows\n            if (e.shiftKey && [37, 38, 39, 40].indexOf(e.keyCode) !== -1) {\n                self.selections[Math.max(y, 0)] = self.selections[Math.max(y, 0)] || [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                self.selectArea(undefined, ctrl);\n                self.draw(true);\n            }\n            if (x !== self.activeCell.columnIndex || y !== self.activeCell.rowIndex) {\n                self.scrollIntoView(x !== self.activeCell.columnIndex ? x : undefined, y !== self.activeCell.rowIndex ? y : undefined);\n                self.setActiveCell(x, y);\n                if (!e.shiftKey && self.attributes.selectionFollowsActiveCell) {\n                    if (!ctrl) {\n                        self.selections = [];\n                    }\n                    self.selections[y] = self.selections[y] || [];\n                    self.selections[y].push(x);\n                    ev = {\n                        selectedData: self.getSelectedData(),\n                        selections: self.selections,\n                        selectionBounds: self.selectionBounds\n                    };\n                    Object.defineProperty(ev, 'selectedData', {\n                        get: function () {\n                            return self.getSelectedData();\n                        }\n                    });\n                    self.dispatchEvent('selectionchanged', ev);\n                }\n                self.draw(true);\n            }\n        };\n        self.keyup = function (e) {\n            if (self.dispatchEvent('keyup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n        };\n        self.keypress = function (e) {\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.dispatchEvent('keypress', {NativeEvent: e, cell: self.currentCell})) { return; }\n        };\n        self.dblclick = function (e) {\n            if (self.dispatchEvent('dblclick', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'columnHeaderCell') {\n                self.fitColumnToValues(self.currentCell.header.name);\n            } else if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'cornerCell') {\n                self.autosize();\n            } else if (['cell', 'activeCell'].indexOf(self.currentCell.style) !== -1) {\n                self.beginEditAt(self.currentCell.columnIndex, self.currentCell.rowIndex);\n            }\n        };\n        self.scrollWheel = function (e) {\n            var l,\n                t,\n                ev = e,\n                deltaX = e.deltaX === undefined ? e.NativeEvent.deltaX : e.deltaX,\n                deltaY = e.deltaY === undefined ? e.NativeEvent.deltaY : e.deltaY,\n                deltaMode = e.deltaMode === undefined ? e.NativeEvent.deltaMode : e.deltaMode;\n            if (wheeling) {\n                return;\n            }\n            if (self.dispatchEvent('wheel', {NativeEvent: e})) {\n                return;\n            }\n            var e = e.NativeEvent || e;\n            self.touchHaltAnimation = true;\n            l = self.scrollBox.scrollLeft;\n            t = self.scrollBox.scrollTop;\n            if (self.hasFocus) {\n                //BUG Issue 42: https://github.com/TonyGermaneri/canvas-datagrid/issues/42\n                //https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\n                if (deltaMode === 1) {\n                    // line mode = 17 pixels per line\n                    deltaY = deltaY * 17;\n                }\n                if ((self.scrollBox.scrollTop  < self.scrollBox.scrollHeight && deltaY > 0)\n                        || (self.scrollBox.scrollLeft < self.scrollBox.scrollWidth && deltaX > 0)\n                        || (self.scrollBox.scrollTop > 0 && deltaY < 0)\n                        || (self.scrollBox.scrollLeft > 0 && deltaX < 0)) {\n                    ev.preventDefault(e);\n                }\n                wheeling = setTimeout(function () {\n                    wheeling = undefined;\n                    self.scrollBox.scrollTo(deltaX + l, deltaY + t);\n                }, 1);\n            }\n        };\n        self.pasteItem = function (clipData, x, y, mimeType) {\n            var l, s = self.getVisibleSchema(), yi = y - 1, sel = [];\n            function normalizeRowData(importingRow, existingRow, offsetX, schema, mimeType, rowIndex) {\n                var r = existingRow;\n                if (!Array.isArray(importingRow) && importingRow !== null && typeof importingRow === 'object') {\n                    importingRow = Object.keys(importingRow).map(function (colKey) {\n                        return importingRow[colKey];\n                    });\n                }\n                if (/^text\\/html/.test(mimeType)) {\n                    importingRow = importingRow.substring(4, importingRow.length - 5).split('</td><td>');\n                }\n                if (typeof importingRow === 'string') {\n                    importingRow = [importingRow];\n                }\n                sel[rowIndex] = [];\n                importingRow.forEach(function (cellData, colIndex) {\n                    var cName = schema[colIndex + offsetX].name;\n                    if (importingRow[colIndex] === undefined || importingRow[colIndex] === null) {\n                        r[cName] = existingRow[cName];\n                        return;\n                    }\n                    sel[rowIndex].push(colIndex + offsetX);\n                    r[cName] = importingRow[colIndex];\n                });\n                return r;\n            }\n            if (/^text\\/html/.test(mimeType)) {\n                if (!/^(<meta[^>]+>)?<table>/.test(clipData.substring(0, 29))) {\n                    console.warn('Unrecognized HTML format.  HTML must be a simple table, e.g.: <table><tr><td>data</td></tr></table>.  Data with the mime type text/html not in this format will not be imported as row data.');\n                    return;\n                }\n                // strip table beginning and ending off, then split at rows\n                clipData = clipData.substring(clipData.indexOf('<table><tr>') + 11, clipData.length - 13).split('</tr><tr>');\n                // ditch any headers on the table\n                clipData = clipData.filter(function (row) {\n                    return !/^<th>|^<thead>/.test(row);\n                });\n            } else {\n                clipData = clipData.split('\\n');\n            }\n            l = clipData.length;\n            clipData.forEach(function (rowData) {\n                yi += 1;\n                var i = self.orders.rows[yi];\n                self.data[i] = normalizeRowData(rowData, self.data[i], x, s, mimeType, i);\n            });\n            self.selections = sel;\n            return l;\n        };\n        self.getNextVisibleColumnIndex = function (visibleColumnIndex) {\n            var x, s = self.getVisibleSchema();\n            for (x = 0; x < s.length; x += 1) {\n                if (s[x].columnIndex === visibleColumnIndex) {\n                    return s[x + 1].columnIndex;\n                }\n            }\n            return -1;\n        };\n        self.getVisibleColumnIndexOf = function (columnIndex) {\n            var x, s = self.getVisibleSchema();\n            for (x = 0; x < s.length; x += 1) {\n                if (s[x].columnIndex === columnIndex) {\n                    return x;\n                }\n            }\n            return -1;\n        };\n        self.paste = function (e) {\n            var d;\n            function getItem(dti) {\n                var type = dti.type;\n                dti.getAsString(function (s) {\n                    self.pasteItem(s, self.getVisibleColumnIndexOf(self.activeCell.columnIndex), self.activeCell.rowIndex, type);\n                    self.draw();\n                });\n            }\n            d = Array.prototype.filter.call(e.clipboardData.items, function (dti) {\n                return dti.type === 'text/html';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/csv';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/plain';\n            })[0];\n            if (!d) {\n                console.warn('Cannot find supported clipboard data type.  Supported types are text/html, text/csv, text/plain.');\n                return;\n            }\n            getItem(d);\n        };\n        self.cut = function (e) {\n            self.copy(e);\n            self.forEachSelectedCell(function (data, index, colName) {\n                data[index][colName] = '';\n            });\n        };\n        self.copy = function (e) {\n            if (self.dispatchEvent('copy', {NativeEvent: e})) { return; }\n            if (!self.hasFocus || !e.clipboardData) { return; }\n            var t,\n                d,\n                data = (self.data || []),\n                tableRows = [],\n                textRows = [],\n                outputHeaders = {},\n                outputHeaderKeys,\n                sData = self.getSelectedData(),\n                s = self.getSchema();\n            function htmlSafe(v) {\n                return v.replace(/</g, '&lt;').replace(/>/g, '&gt;');\n            }\n            function fCopyCell(v) {\n                v = v === null || v === undefined ? '' : v;\n                return '<td>' + (typeof v === 'string' ? htmlSafe(v) : v) + '</td>';\n            }\n            function addHeaders(headers, useHtml) {\n                if (!s.length || headers.length < 2) { return ''; }\n                var h = [];\n                if (useHtml) {\n                    h.push('<tr>');\n                }\n                s.forEach(function (column, columnIndex) {\n                    if (!column.hidden && headers.indexOf(column.name) !== -1) {\n                        // intentional redefinition of column\n                        column = s[self.orders.columns[columnIndex]];\n                        var hVal = (column.name || column.title) || '';\n                        if (useHtml) {\n                            h.push('<th>' + htmlSafe(hVal) + '</th>');\n                        } else {\n                            h.push('\"' + hVal.replace(/\"/g, '\"\"') + '\"');\n                        }\n                    }\n                });\n                h.push(useHtml ? '</tr>' : '\\n');\n                return h.join(useHtml ? '' : ',');\n            }\n            function addCellValue(val, trRow, textRow, column) {\n                // escape strings\n                if (val !== null\n                        && val !== false\n                        && val !== undefined\n                        && val.replace) {\n                    trRow.push(fCopyCell(val));\n                    textRow.push('\"' + val.replace(/\"/g, '\"\"') + '\"');\n                    return;\n                }\n                if (val !== undefined) {\n                    textRow.push(val);\n                    trRow.push(fCopyCell(val));\n                    return;\n                }\n                // issue #66\n                textRow.push('');\n                trRow.push('<td>&nbsp;</td>');\n            }\n            if (sData.length > 0) {\n                sData.forEach(function (row) {\n                    var rowKeys = Object.keys(row);\n                    if (row) {\n                        var trRow = [],\n                            textRow = [];\n                        s.forEach(function (column, columnIndex) {\n                            if (rowKeys.indexOf(column.name) !== -1) {\n                                outputHeaders[column.name] = true;\n                                // intentional redefinition of column\n                                column = s[self.orders.columns[columnIndex]];\n                                // escape strings\n                                addCellValue(row[column.name], trRow, textRow, column);\n                            }\n                        });\n                        tableRows.push(trRow.join(''));\n                        textRows.push(textRow.join(','));\n                    }\n                });\n                outputHeaderKeys = Object.keys(outputHeaders);\n                t = addHeaders(outputHeaderKeys) + textRows.join('\\n');\n                d = '<table>' + addHeaders(outputHeaderKeys, true) + '<tr>' + tableRows.join('</tr><tr>') + '</tr></table>';\n                if (outputHeaderKeys.length === 1) {\n                    // if there was only one cell selected, remove the quotes from the string\n                    t = t.substring(1, t.length -1);\n                }\n                e.clipboardData.setData('text/html', d);\n                e.clipboardData.setData('text/plain', t);\n                e.clipboardData.setData('text/csv', t);\n                e.clipboardData.setData('application/json', JSON.stringify(sData));\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n","/*jslint browser: true, unparam: true, todo: true*/\n/*globals XMLSerializer: false, define: true, Blob: false, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var perfCounters = [],\n            cachedImagesDrawn = false,\n            drawCount = 0,\n            perfWindowSize = 300,\n            entityCount = [],\n            hiddenFrozenColumnCount = 0,\n            scrollDebugCounters = [],\n            touchPPSCounters = [];\n        self.htmlImageCache = {};\n        // more heavyweight version than fillArray defined in intf.js\n        function fillArray(low, high, step, def) {\n            step = step || 1;\n            var i = [], x;\n            for (x = low; x <= high; x += step) {\n                i[x] = def === undefined ? x : (typeof def === 'function' ? def(x) : def);\n            }\n            return i;\n        }\n        function drawPerfLine(w, h, x, y, perfArr, arrIndex, max, color, useAbs) {\n            var i = w / perfArr.length,\n                r = h / max;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x, y + h);\n            perfArr.forEach(function (n) {\n                var val = (arrIndex === undefined ? n : n[arrIndex]),\n                    cx,\n                    cy;\n                if (useAbs) {\n                    val = Math.abs(val);\n                }\n                cx = x + i;\n                cy = y + h - (val * r);\n                self.ctx.lineTo(cx, cy);\n                x += i;\n            });\n            self.ctx.moveTo(x + w, y + h);\n            self.ctx.strokeStyle = color;\n            self.ctx.stroke();\n        }\n        function drawOnAllImagesLoaded() {\n            var loaded = true;\n            Object.keys(self.htmlImageCache).forEach(function (html) {\n                if (!self.htmlImageCache[html].complete) {\n                    loaded = false;\n                }\n            });\n            if (loaded && !cachedImagesDrawn) {\n                cachedImagesDrawn = true;\n                self.draw();\n            }\n        }\n        function drawHtml(cell) {\n            var img,\n                v = cell.innerHTML || cell.formattedValue,\n                cacheKey = v.toString() + cell.rowIndex.toString() + cell.columnIndex.toString(), \n                x = cell.x + self.canvasOffsetLeft,\n                y = cell.y + self.canvasOffsetTop;\n            if (self.htmlImageCache[cacheKey]) {\n                img = self.htmlImageCache[cacheKey];\n                if (img.height !== cell.height || img.width !== cell.width) {\n                    // height and width of the cell has changed, invalidate cache\n                    self.htmlImageCache[cacheKey] = undefined;\n                } else {\n                    if (!img.complete) {\n                        return;\n                    }\n                    return self.ctx.drawImage(img, x, y);\n                }\n            } else {\n                cachedImagesDrawn = false;\n            }\n            img = new Image(cell.width, cell.height);\n            self.htmlImageCache[cacheKey] = img;\n            img.onload = function () {\n                self.ctx.drawImage(img, x, y);\n                drawOnAllImagesLoaded();\n            };\n            img.src = 'data:image/svg+xml;base64,' + btoa(\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + cell.width + '\" height=\"' + cell.height + '\">\\n' +\n                    '<foreignObject class=\"node\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\\n' +\n                    '<body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;padding:0;\">\\n' +\n                    v + '\\n' +\n                    '</body>' +\n                    '</foreignObject>\\n' +\n                    '</svg>\\n'\n            );\n        }\n        function drawOrderByArrow(x, y) {\n            var mt = self.style.columnHeaderOrderByArrowMarginTop * self.scale,\n                ml = self.style.columnHeaderOrderByArrowMarginLeft * self.scale,\n                mr = self.style.columnHeaderOrderByArrowMarginRight * self.scale,\n                aw = self.style.columnHeaderOrderByArrowWidth * self.scale,\n                ah = self.style.columnHeaderOrderByArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.columnHeaderOrderByArrowColor;\n            self.ctx.strokeStyle = self.style.columnHeaderOrderByArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.orderDirection === 'asc') {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y + ah);\n                self.ctx.lineTo(x + aw, y + ah);\n                self.ctx.lineTo(x + (aw * 0.5), y);\n                self.ctx.lineTo(x, y + ah);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function drawTreeArrow(cell, x, y) {\n            var mt = self.style.treeArrowMarginTop * self.scale,\n                mr = self.style.treeArrowMarginRight * self.scale,\n                ml = self.style.treeArrowMarginLeft * self.scale,\n                aw = self.style.treeArrowWidth * self.scale,\n                ah = self.style.treeArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.treeArrowColor;\n            self.ctx.strokeStyle = self.style.treeArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.openChildren[cell.rowIndex]) {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y);\n                self.ctx.lineTo(x + ah, y + (aw * 0.5));\n                self.ctx.lineTo(x, y + aw);\n                self.ctx.lineTo(x, y);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function radiusRect(x, y, w, h, radius) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            var r = x + w, b = y + h;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x + radius, y);\n            self.ctx.lineTo(r - radius, y);\n            self.ctx.quadraticCurveTo(r, y, r, y + radius);\n            self.ctx.lineTo(r, y + h - radius);\n            self.ctx.quadraticCurveTo(r, b, r - radius, b);\n            self.ctx.lineTo(x + radius, b);\n            self.ctx.quadraticCurveTo(x, b, x, b - radius);\n            self.ctx.lineTo(x, y + radius);\n            self.ctx.quadraticCurveTo(x, y, x + radius, y);\n        }\n        function fillRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillRect(x, y, w, h);\n        }\n        function strokeRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.strokeRect(x, y, w, h);\n        }\n        function fillText(text, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillText(text, x, y);\n        }\n        function fillCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.fill();\n        }\n        function strokeCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.stroke();\n        }\n        function clipFrozenArea(mode) {\n            // 0 both, 1 rows, 2 cols\n            // self.lastFrozenColumnPixel;\n            // self.lastFrozenRowPixel;\n            self.ctx.beginPath();\n            if (mode === 0) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, self.lastFrozenRowPixel);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 1) {\n                self.ctx.moveTo(0, self.lastFrozenRowPixel);\n                self.ctx.lineTo(0, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 2) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, 0);\n                self.ctx.lineTo(self.width, 0);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n            }\n            self.ctx.clip();\n        }\n        function fillHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return fillCircle(x, y, r * 0.5);\n            }\n            fillRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function strokeHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return strokeCircle(x, y, r * 0.5);\n            }\n            strokeRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function addselectionHandle(c, pos) {\n            var hw = self.style.selectionHandleSize,\n                p = {\n                    tr: function () {\n                        fillHandle(c.x + c.width, c.y, hw);\n                        strokeHandle(c.x + c.width, c.y, hw);\n                    },\n                    br: function () {\n                        fillHandle(c.x + c.width, c.y + c.height, hw);\n                        strokeHandle(c.x + c.width, c.y + c.height, hw);\n                    },\n                    tl: function () {\n                        fillHandle(c.x, c.y, hw);\n                        strokeHandle(c.x, c.y, hw);\n                    },\n                    bl: function () {\n                        fillHandle(c.x, c.y + c.height, hw);\n                        strokeHandle(c.x, c.y + c.height, hw);\n                    }\n                };\n            p[pos]();\n        }\n        function addBorderLine(c, pos) {\n            self.ctx.beginPath();\n            var p = {\n                t: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                },\n                r: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                b: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                l: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                }\n            };\n            p[pos]();\n            self.ctx.stroke();\n        }\n        function addEllipsis(text, width) {\n            var c, w = 0;\n            if (self.ellipsisCache[text] && self.ellipsisCache[text][width]) {\n                return self.ellipsisCache[text][width];\n            }\n            //TODO Add ellipsis back when there is a fast way to do it\n            w = self.ctx.measureText(text).width;\n            self.ellipsisCache[text] = self.ellipsisCache[text] || {};\n            c = {value: text, width: w};\n            self.ellipsisCache[text][width] = c;\n            return c;\n        }\n        function wrapText(cell, splitChar) {\n            if (!cell.formattedValue) {\n                return { lines: [{width: 0, value: ''}], width: 0, height: cell.calculatedLineHeight };\n            }\n            var max = 0,\n                n = '\\n',\n                x,\n                word,\n                words = cell.formattedValue.split(splitChar),\n                textHeight = cell.calculatedLineHeight,\n                lines = [],\n                out = [],\n                wrap = self.style.cellWhiteSpace !== 'nowrap',\n                elWidth,\n                et = self.attributes.ellipsisText,\n                elClipLength,\n                plWidth,\n                clippedVal,\n                ogWordWidth,\n                previousLine,\n                line = {\n                    width: 0,\n                    value: ''\n                },\n                cHeight = wrap ? cell.paddedHeight : cell.calculatedLineHeight;\n            lines.push(line);\n            elWidth = self.ctx.measureText(' ' + et).width;\n            for (x = 0; x < words.length; x += 1) {\n                word = words[x];\n                var measure = self.ctx.measureText(word + splitChar);\n                if (line.width + measure.width + elWidth < cell.paddedWidth) {\n                    line.value += word + splitChar;\n                    line.width += measure.width;\n                    continue;\n                }\n                // if there is a hyphenated word that is too long\n                // split it and add the split set to the array\n                // then back up and re-read new split set\n                // this behavior seems right, it might not be\n                if (/\\w-\\w/.test(word) && cell.paddedWidth < measure.width) {\n                    words.splice(x, 1, word.split('-')[0] + '-', word.split('-')[1]);\n                    x -= 1;\n                    continue;\n                }\n                line = {\n                    width: measure.width,\n                    value: word + splitChar\n                };\n                if (x === 0) {\n                    lines = [];\n                    lines.push(line);\n                }\n                textHeight += cell.calculatedLineHeight;\n                if (textHeight > cHeight) {\n                    if (lines.length === 0) { break; }\n                    elClipLength = 1;\n                    previousLine = lines[lines.length - 1];\n                    if (previousLine.width < cell.paddedWidth && words.length === 1) { break; }\n                    clippedVal = previousLine.value + word;\n                    while(plWidth == undefined || (plWidth > cell.paddedWidth && elClipLength < clippedVal.length)) {\n                        plWidth = self.ctx.measureText(clippedVal + et).width\n                        clippedVal = clippedVal.substring(0, clippedVal.length - elClipLength);\n                        elClipLength + 1;\n                    }\n                    clippedVal = clippedVal + et;\n                    previousLine.value = clippedVal;\n                    previousLine.width = plWidth;\n                    break;\n                }\n                if (x > 0) {\n                    lines.push(line);\n                }\n            }\n            return {\n                lines: lines,\n                width: max,\n                height: cell.calculatedLineHeight * lines.length\n            }\n        }\n        function drawText(cell) {\n            var ll = cell.text.lines.length,\n                h = (cell.fontHeight * cell.lineHeight),\n                x,\n                line,\n                wrap = self.style.cellWhiteSpace !== 'nowrap',\n                textHeight = 0;\n            for (x = 0; x < cell.text.lines.length; x += 1) {\n                line = cell.text.lines[x];\n                var vPos = Math.max((cell.height - (wrap ? cell.text.height : cell.calculatedLineHeight)) * 0.5, 0) + h,\n                    hPos = cell.paddingLeft + cell.treeArrowWidth + cell.orderByArrowWidth;\n                if (cell.horizontalAlignment === 'right') {\n                    hPos = cell.paddingLeft + cell.paddedWidth - line.width;\n                } else if (cell.horizontalAlignment === 'center') {\n                    hPos = cell.paddingLeft + ((cell.paddedWidth + cell.paddingRight) / 2) - (line.width / 2);\n                }\n                if (cell.verticalAlignment === 'top') {\n                    vPos = cell.calculatedLineHeight;\n                } else if (cell.verticalAlignment === 'bottom') {\n                    vPos = cell.height - cell.paddingBottom - cell.text.height;\n                }\n                line.height = h + cell.lineSpacing;\n                line.offsetLeft = hPos;\n                line.offsetTop = vPos;\n                line.x = cell.x + hPos;\n                line.y = cell.y + textHeight + vPos;\n                textHeight += line.height;\n                fillText(line.value, line.x, line.y);\n            }\n            if (self.attributes.debug && cell.active) {\n                requestAnimationFrame(function () {\n                    self.ctx.font = self.style.debugFont;\n                    self.ctx.fillStyle = self.style.debugColor;\n                    fillText(JSON.stringify({\n                        x: cell.x,\n                        y: cell.y,\n                        h: cell.height,\n                        w: cell.width,\n                        pw: cell.paddedWidth,\n                        idx: cell.columnIndex,\n                        idx_ord: cell.sortColumnIndex\n                    }, null, '\\t'),\n                        cell.x + 14, cell.y + 14);\n                    fillText(JSON.stringify(cell.text.lines.map(function (l) { return {w: l.width, v: l.value.length }; }), null, '\\t'),\n                        cell.x + 14, cell.y + 30);\n                });\n            }\n        }\n        function getFrozenColumnsWidth() {\n            var w = 0,\n                s = self.getSchema(),\n                x = 0,\n                n = Math.min(self.frozenColumn, s.length),\n                column;\n            hiddenFrozenColumnCount = 0;\n            while (x < n) {\n                column = s[x];\n                if (column.hidden) {\n                    hiddenFrozenColumnCount += 1;\n                } else {\n                    w += self.getColummnWidth(x);\n                }\n                x += 1;\n            }\n            return w;\n        }\n        /**\n         * Redraws the grid. No matter what the change, this is the only method required to refresh everything.\n         * @memberof canvasDatagrid\n         * @name draw\n         * @method\n         */\n         // r = literal row index\n         // rd = row data array\n         // i = user order index\n         // o = literal data index\n         // y = y drawing cursor\n         // x = x drawing cursor\n         // s = visible schema array\n         // cx = current x drawing cursor sub calculation var\n         // cy = current y drawing cursor sub calculation var\n         // a = static cell (like corner cell)\n         // p = perf counter\n         // l = data length\n         // u = current cell\n         // h = current height\n         // w = current width\n        self.draw = function (internal) {\n            if (self.dispatchEvent('beforedraw', {})) { return; }\n            if (!self.isChildGrid && (!self.height || !self.width)) {\n                return;\n            }\n            if (self.isChildGrid && internal) {\n                requestAnimationFrame(self.parentGrid.draw);\n                return;\n            }\n            if (self.intf.visible === false) {\n                return;\n            }\n            // initial values\n            var checkScrollHeight, rowHeaderCell, p, cx, cy, treeGrid, rowOpen,\n                rowHeight, cornerCell, y, x, c, h, w, s, r, rd, aCell,\n                data = (self.data || []),\n                bc = self.style.gridBorderCollapse === 'collapse',\n                selectionBorders = [],\n                moveBorders = [],\n                selectionHandles = [],\n                rowHeaders = [],\n                l = data.length,\n                u = self.currentCell || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                cellHeight = self.style.cellHeight;\n            drawCount += 1;\n            p = performance.now();\n            self.visibleRowHeights = [];\n            // if data length has changed, there is no way to know\n            if (data.length > self.orders.rows.length) {\n                self.createRowOrders();\n            }\n            function drawScrollBars() {\n                var drawCorner,\n                    en = self.scrollBox.entities,\n                    m = (self.style.scrollBarBoxMargin * 2);\n                self.ctx.strokeStyle = self.style.scrollBarBorderColor;\n                self.ctx.lineWidth = self.style.scrollBarBorderWidth;\n                en.horizontalBox.x = rowHeaderCellWidth + self.style.scrollBarBoxMargin\n                    + ((en.horizontalBar.width - self.scrollBox.scrollBoxWidth)\n                        * (self.scrollBox.scrollLeft / self.scrollBox.scrollWidth));\n                en.verticalBox.y = columnHeaderCellHeight + self.style.scrollBarBoxMargin\n                    + ((en.verticalBar.height - self.scrollBox.scrollBoxHeight)\n                        * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight));\n                if (self.scrollBox.horizontalBarVisible) {\n                    self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                    fillRect(en.horizontalBar.x, en.horizontalBar.y, en.horizontalBar.width + m, en.horizontalBar.height);\n                    strokeRect(en.horizontalBar.x, en.horizontalBar.y, en.horizontalBar.width + m, en.horizontalBar.height);\n                    self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                    if (self.scrollBox.horizontalBoxVisible) {\n                        if (/horizontal/.test(u.context)) {\n                            self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                        }\n                        radiusRect(en.horizontalBox.x, en.horizontalBox.y,\n                            en.horizontalBox.width, en.horizontalBox.height, self.style.scrollBarBoxBorderRadius);\n                        self.ctx.stroke();\n                        self.ctx.fill();\n                    }\n                    drawCorner = true;\n                    self.visibleCells.unshift(en.horizontalBar);\n                    self.visibleCells.unshift(en.horizontalBox);\n                }\n                if (self.scrollBox.verticalBarVisible) {\n                    self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                    fillRect(en.verticalBar.x, en.verticalBar.y, en.verticalBar.width, en.verticalBar.height + m);\n                    strokeRect(en.verticalBar.x, en.verticalBar.y, en.verticalBar.width, en.verticalBar.height + m);\n                    if (self.scrollBox.verticalBoxVisible) {\n                        self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                        if (/vertical/.test(u.context)) {\n                            self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                        }\n                        radiusRect(en.verticalBox.x, en.verticalBox.y, en.verticalBox.width,\n                            en.verticalBox.height, self.style.scrollBarBoxBorderRadius);\n                        self.ctx.stroke();\n                        self.ctx.fill();\n                    }\n                    drawCorner = true;\n                    self.visibleCells.unshift(en.verticalBar);\n                    self.visibleCells.unshift(en.verticalBox);\n                }\n                if (drawCorner) {\n                    //corner\n                    self.ctx.strokeStyle = self.style.scrollBarCornerBorderColor;\n                    self.ctx.fillStyle = self.style.scrollBarCornerBackgroundColor;\n                    radiusRect(en.corner.x, en.corner.y, en.corner.width, en.corner.height, 0);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                    self.visibleCells.unshift(en.corner);\n                }\n            }\n            function createHandlesOverlayArray(cell) {\n                if (self.attributes.allowMovingSelection || self.mobile) {\n                    if (cell.selectionBorderTop && cell.selectionBorderRight && self.mobile) {\n                        selectionHandles.push([cell, 'tr']);\n                        cell.selectionHandle = 'tr';\n                    }\n                    if (cell.selectionBorderTop && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'tl']);\n                        cell.selectionHandle = 'tl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'bl']);\n                        cell.selectionHandle = 'bl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderRight\n                            && (self.attributes.selectionHandleBehavior !== 'none' || self.mobile)) {\n                        selectionHandles.push([cell, 'br']);\n                        cell.selectionHandle = 'br';\n                    }\n                }\n            }\n            function createBorderOverlayArray(cell, drawArray, propPrefix, offsetPoint) {\n                offsetPoint = offsetPoint || {x: 0, y: 0};\n                cell.selectionBorder = '';\n                if (!cell.isRowHeader\n                        && self.selections[cell.rowIndex + -offsetPoint.y]\n                        && self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) !== -1) {\n                    if ((!self.selections[cell.rowIndex - 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex - 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1\n                            || cell.rowIndex === 0)\n                            && !cell.isHeader) {\n                        drawArray.push([cell, 't']);\n                        cell[propPrefix + 'BorderTop'] = true;\n                        cell[propPrefix + 'Border'] += 't';\n                    }\n                    if (!self.selections[cell.rowIndex + 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex + 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'b']);\n                        cell[propPrefix + 'BorderBottom'] = true;\n                        cell[propPrefix + 'Border'] += 'b';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === 0\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex - 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'l']);\n                        cell[propPrefix + 'BorderLeft'] = true;\n                        cell[propPrefix + 'Border'] += 'l';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === s.length\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'r']);\n                        cell[propPrefix + 'BorderRight'] = true;\n                        cell[propPrefix + 'Border'] += 'r';\n                    }\n                }\n            }\n            function drawCell(d, rowOrderIndex, rowIndex) {\n                return function drawEach(header, headerIndex, columnOrderIndex) {\n                    if (header.hidden) { return 0; }\n                    var cellStyle = header.style || 'cell',\n                        cellGridAttributes,\n                        cell,\n                        isHeader = /HeaderCell/.test(cellStyle),\n                        isCorner = /cornerCell/.test(cellStyle),\n                        isRowHeader = 'rowHeaderCell' === cellStyle,\n                        isColumnHeader = 'columnHeaderCell' === cellStyle,\n                        selected = self.selections[rowOrderIndex] && self.selections[rowOrderIndex].indexOf(columnOrderIndex) !== -1,\n                        hovered = self.hovers.rowIndex === rowOrderIndex && self.hovers.columnIndex === columnOrderIndex,\n                        active = self.activeCell.rowIndex === rowOrderIndex && self.activeCell.columnIndex === columnOrderIndex,\n                        isColumnHeaderCellCap = cellStyle === 'columnHeaderCellCap',\n                        rawValue = d ? d[header.name] : undefined,\n                        isGrid = header.type === 'canvas-datagrid',\n                        activeHeader = (self.orders.rows[self.activeCell.rowIndex] === rowOrderIndex\n                                || self.orders.columns[self.activeCell.columnIndex] === headerIndex)\n                            && (columnOrderIndex === -1 || rowOrderIndex === -1)\n                            ? (isRowHeader ? 'activeRowHeaderCell' : 'activeColumnHeaderCell') : false,\n                        val,\n                        f = self.formatters[header.type || 'string'],\n                        orderByArrowSize = 0,\n                        treeArrowSize = 0,\n                        cellWidth = self.sizes.columns[headerIndex] || header.width,\n                        ev = {\n                            value: rawValue,\n                            row: d,\n                            header: header\n                        };\n                    if (isColumnHeaderCellCap) {\n                        cellWidth = w - x;\n                    }\n                    // if no data or schema are defined, a width is provided to the stub column\n                    if (cellWidth === undefined) {\n                        cellWidth = self.style.cellWidth;\n                    }\n                    cellWidth = cellWidth * self.scale;\n                    if (x + cellWidth + self.style.cellBorderWidth < 0) {\n                        x += cellWidth + self.style.cellBorderWidth;\n                    }\n                    if (active && cellStyle !== 'cornerCell') {\n                        cellStyle = 'activeCell';\n                    }\n                    if (self.visibleRows.indexOf(rowIndex) === -1 && !isHeader) {\n                        self.visibleRows.push(rowIndex);\n                    }\n                    val = self.dispatchEvent('formatcellvalue', ev);\n                    cx = x;\n                    cy = y;\n                    if (cellStyle === 'cornerCell') {\n                        cx = 0;\n                        cy = 0;\n                    } else if (isRowHeader) {\n                        cx = 0;\n                    } else if (isHeader) {\n                        cy = 0;\n                    }\n                    cell = {\n                        type: isGrid ? 'canvas-datagrid-cell' : header.type,\n                        style: cellStyle,\n                        nodeType: 'canvas-datagrid-cell',\n                        x: cx,\n                        y: cy,\n                        fontHeight: (self.style[cellStyle + 'FontHeight'] || 0) * self.scale,\n                        horizontalAlignment: self.style[cellStyle + 'HorizontalAlignment'],\n                        verticalAlignment: self.style[cellStyle + 'VerticalAlignment'],\n                        paddingLeft: (self.style[cellStyle + 'PaddingLeft'] || 0) * self.scale,\n                        paddingTop: (self.style[cellStyle + 'PaddingTop'] || 0) * self.scale,\n                        paddingRight: (self.style[cellStyle + 'PaddingRight'] || 0) * self.scale,\n                        paddingBottom: (self.style[cellStyle + 'PaddingBottom'] || 0) * self.scale,\n                        whiteSpace: self.style.cellWhiteSpace,\n                        lineHeight: self.style.cellLineHeight,\n                        lineSpacing: self.style.cellLineSpacing,\n                        offsetTop: self.canvasOffsetTop + cy,\n                        offsetLeft: self.canvasOffsetLeft + cx,\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        active: active || activeHeader,\n                        hovered: hovered,\n                        selected: selected,\n                        width: cellWidth,\n                        height: cellHeight,\n                        offsetWidth: cellWidth,\n                        offsetHeight: cellHeight,\n                        parentNode: self.intf.parentNode,\n                        offsetParent: self.intf.parentNode,\n                        data: d,\n                        isCorner: isCorner,\n                        isHeader: isHeader,\n                        isColumnHeader: isColumnHeader,\n                        isColumnHeaderCellCap: isColumnHeaderCellCap,\n                        isRowHeader: isRowHeader,\n                        rowOpen: rowOpen,\n                        header: header,\n                        columnIndex: columnOrderIndex,\n                        rowIndex: rowOrderIndex,\n                        sortColumnIndex: headerIndex,\n                        sortRowIndex: rowIndex,\n                        isGrid: isGrid,\n                        isNormal: !isGrid && !isCorner && !isHeader,\n                        gridId: (self.attributes.name || '') + rowIndex + ':' + headerIndex,\n                        parentGrid: self.intf,\n                        innerHTML: '',\n                        activeHeader: activeHeader,\n                        value: isHeader && !isRowHeader ? (header.title || header.name) : rawValue\n                    };\n                    cell.calculatedLineHeight = (cell.fontHeight * cell.lineHeight) + cell.lineSpacing;\n                    cell.paddedWidth = cell.width - cell.paddingRight - cell.paddingLeft;\n                    cell.paddedHeight = cell.height - cell.paddingTop - cell.paddingBottom;\n                    ev.cell = cell;\n                    cell.userHeight = cell.isHeader ? self.sizes.rows[-1] : rowHeight;\n                    cell.userWidth = cell.isHeader ? self.sizes.columns.cornerCell : self.sizes.columns[headerIndex];\n                    self.visibleCells.unshift(cell);\n                    if (self.dispatchEvent('beforerendercell', ev)) { return; }\n                    self.ctx.fillStyle = self.style[cellStyle + 'BackgroundColor'];\n                    self.ctx.strokeStyle = self.style[cellStyle + 'BorderColor'];\n                    self.ctx.lineWidth = self.style[cellStyle + 'BorderWidth'];\n                    if (hovered) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'HoverBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'HoverBorderColor'];\n                    }\n                    if (selected) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'SelectedBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'SelectedBorderColor'];\n                    }\n                    if (activeHeader) {\n                        self.ctx.fillStyle = self.style[activeHeader + 'BackgroundColor'];\n                    }\n                    self.dispatchEvent('rendercell', ev);\n                    if (cell.isGrid) {\n                        if (cell.height !== rowHeight) {\n                            cell.height = rowHeight || self.style.cellHeightWithChildGrid;\n                            checkScrollHeight = true;\n                        }\n                        cell.width = self.sizes.columns[headerIndex] || self.style.cellWidthWithChildGrid;\n                    }\n                    if (rowOpen && !cell.isRowHeader) {\n                        cell.height = self.sizes.rows[rowIndex] || self.style.cellHeight;\n                    }\n                    if (!cell.isGrid) {\n                        fillRect(cx, cy, cell.width, cell.height);\n                        strokeRect(cx, cy, cell.width, cell.height);\n                    }\n                    self.ctx.save();\n                    radiusRect(cell.x, cell.y, cell.width, cell.height, 0);\n                    self.ctx.clip();\n                    self.dispatchEvent('afterrendercell', ev);\n                    if (cell.height !== cellHeight && !(rowOpen && !cell.isRowHeader)) {\n                        self.sizes.rows[isHeader ? -1 : rowIndex] = cell.height;\n                        checkScrollHeight = true;\n                    }\n                    if (cell.width !== cellWidth) {\n                        self.sizes.columns[headerIndex] = cell.width;\n                        checkScrollHeight = true;\n                    }\n                    if (isRowHeader && self.attributes.tree) {\n                        if (!self.dispatchEvent('rendertreearrow', ev)) {\n                            treeArrowSize = drawTreeArrow(cell, self.style[cellStyle + 'PaddingLeft'], cy, 0);\n                        }\n                    }\n                    if ((self.attributes.showRowNumbers && isRowHeader)\n                            || !isRowHeader) {\n                        if (cell.isGrid && !self.dispatchEvent('beforerendercellgrid', ev)) {\n                            if (!self.childGrids[cell.gridId]) {\n                                // HACK: this only allows setting of the child grids styles if data is set _after_\n                                // this is less than desirable.  An interface needs to be made to effect the\n                                // style of all cell grids.  One for individual grids already exists.\n                                cellGridAttributes = self.cellGridAttributes;\n                                cellGridAttributes.name = self.attributes.saveAppearance ? cell.gridId : undefined;\n                                cellGridAttributes.component = false;\n                                cellGridAttributes.parentNode = cell;\n                                cellGridAttributes.data = rawValue;\n                                ev.cellGridAttributes = cellGridAttributes;\n                                if (self.dispatchEvent('beforecreatecellgrid', ev)) { return; }\n                                self.childGrids[cell.gridId] = self.createGrid(cellGridAttributes);\n                                self.sizes.rows[rowIndex]\n                                    = self.sizes.rows[rowIndex] || self.style.cellGridHeight;\n                                checkScrollHeight = true;\n                            }\n                            cell.grid = self.childGrids[cell.gridId];\n                            cell.grid.parentNode = cell;\n                            cell.grid.visible = true;\n                            cell.grid.draw();\n                            self.dispatchEvent('rendercellgrid', ev);\n                        } else if (!cell.isGrid) {\n                            if (self.childGrids[cell.gridId]) {\n                                self.childGrids[cell.gridId].parentNode.offsetHeight = 0;\n                            }\n                            if (isHeader && self.orderBy === header.name) {\n                                if (!self.dispatchEvent('renderorderbyarrow', ev)) {\n                                    orderByArrowSize = drawOrderByArrow(cx + self.style[cellStyle + 'PaddingLeft'], 0);\n                                }\n                            }\n                            self.ctx.fillStyle = self.style[cellStyle + 'Color'];\n                            if (hovered) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'HoverColor'];\n                            }\n                            if (selected) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'SelectedColor'];\n                            }\n                            if (activeHeader) {\n                                self.ctx.fillStyle = self.style[activeHeader + 'Color'];\n                            }\n                            cell.treeArrowWidth = treeArrowSize;\n                            cell.orderByArrowWidth = orderByArrowSize;\n                            // create text ref to see if height needs to expand\n                            val = val !== undefined ? val : f\n                                ? f(ev) : '';\n                            if (val === undefined && !f) {\n                                val = '';\n                                console.warn('canvas-datagrid: Unknown format '\n                                    + header.type + ' add a cellFormater');\n                            }\n                            cell.formattedValue = ((val !== undefined && val !== null) ? val : '').toString();\n                            if (self.columnFilters && self.columnFilters[val] !== undefined && isHeader) {\n                                cell.formattedValue = self.attributes.filterTextPrefix + val;\n                            }\n                            self.ctx.font = (self.style[cellStyle + 'FontHeight'] * self.scale) + 'px ' + self.style[cellStyle + 'FontName'];\n                            if (!self.dispatchEvent('formattext', ev)) {\n                                cell.text = wrapText(cell, ' ');\n                            }\n                            if (!self.dispatchEvent('rendertext', ev)) {\n                                if (cell.innerHTML || header.type === 'html') {\n                                    drawHtml(cell);\n                                } else {\n                                    drawText(cell);\n                                }\n                            }\n                        }\n                    }\n                    if (active) {\n                        aCell = cell;\n                    }\n                    createBorderOverlayArray(cell, selectionBorders, 'selection');\n                    // createBorderOverlayArray calculates data for createHandlesOverlayArray so it must go 2nd\n                    createHandlesOverlayArray(cell);\n                    if (self.movingSelection) {\n                        createBorderOverlayArray(cell, moveBorders, 'move', self.moveOffset);\n                    }\n                    self.ctx.restore();\n                    x += cell.width + (bc ? 0 : self.style.cellBorderWidth);\n                    return cell.width;\n                };\n            }\n            function drawRowHeader(rowData, index, rowOrderIndex) {\n                var a, i;\n                if (self.attributes.showRowHeaders) {\n                    x = 0;\n                    i = index + 1;\n                    rowHeaderCell = {'rowHeaderCell': i };\n                    a = {\n                        name: 'rowHeaderCell',\n                        width: self.sizes.columns[-1] || self.style.rowHeaderCellWidth,\n                        style: 'rowHeaderCell',\n                        type: 'string',\n                        data: i,\n                        index: -1\n                    };\n                    rowOpen = self.openChildren[index];\n                    drawCell(rowHeaderCell, index, rowOrderIndex)(a, -1, -1);\n                }\n            }\n            function drawHeaders() {\n                var d, g = s.length, i, o, columnHeaderCell, header, nonFrozenHeaderWidth;\n                function drawHeaderColumnRange(start, end) {\n                    end = Math.min(end, g);\n                    for (o = start; o < end; o += 1) {\n                        i = self.orders.columns[o];\n                        header = s[i];\n                        if (!header.hidden) {\n                            d = {\n                                title: header.title,\n                                name: header.name,\n                                width: header.width || self.style.cellWidth,\n                                style: 'columnHeaderCell',\n                                type: 'string',\n                                index: o,\n                                order: i\n                            };\n                            columnHeaderCell = {'columnHeaderCell': header.title || header.name};\n                            x += drawCell(columnHeaderCell, -1, -1)(d, i, o);\n                            if (x > self.width + self.scrollBox.scrollLeft) {\n                                break;\n                            }\n                        }\n                    }\n                }\n                rowHeaders.forEach(function (rArgs, rhIndex) {\n                    y = rArgs[3];\n                    cellHeight = rArgs[4];\n                    if (rhIndex === self.frozenRow) {\n                        self.ctx.save();\n                        radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                        self.ctx.clip();\n                    }\n                    drawRowHeader(rArgs[0], rArgs[1], rArgs[2]);\n                });\n                self.ctx.restore();\n                if (self.attributes.showColumnHeaders) {\n                    x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    y = 0;\n                    // cell height might have changed during drawing\n                    cellHeight = self.getColumnHeaderCellHeight();\n                    drawHeaderColumnRange(self.scrollIndexLeft, g);\n                    nonFrozenHeaderWidth = x;\n                    x = self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    drawHeaderColumnRange(0, self.frozenColumn);\n                    // fill in the space right of the headers\n                    x = nonFrozenHeaderWidth;\n                    if (x < w) {\n                        c = {\n                            name: '',\n                            width: self.style.scrollBarWidth,\n                            style: 'columnHeaderCellCap',\n                            isColumnHeaderCell: true,\n                            isColumnHeaderCellCap: true,\n                            type: 'string',\n                            index: s.length\n                        };\n                        drawCell({endCap: ''}, -1, -1)(c, -1, -1);\n                    }\n                    // fill in the space right of the headers\n                    if (self.attributes.showRowHeaders) {\n                        cornerCell = {'cornerCell': '' };\n                        x = 0;\n                        c = {\n                            name: 'cornerCell',\n                            width: self.style.rowHeaderCellWidth,\n                            style: 'cornerCell',\n                            type: 'string',\n                            index: -1\n                        };\n                        drawCell(cornerCell, -1, -1)(c, -1, -1);\n                    }\n                }\n            }\n            function drawRow(r, d) {\n                var i, treeHeight, rowSansTreeHeight, o, g = s.length;\n                if (y - (cellHeight * 2) > h) {\n                    return false;\n                }\n                rd = data[r];\n                rowOpen = self.openChildren[r];\n                rowSansTreeHeight = (self.sizes.rows[r] || self.style.cellHeight) * self.scale;\n                treeHeight = (rowOpen ? self.sizes.trees[r] : 0) * self.scale;\n                rowHeight = (rowSansTreeHeight + treeHeight);\n                if (y < -rowHeight) {\n                    return false;\n                }\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                cellHeight = rowHeight;\n                //draw normal columns\n                for (o = (self.scrollIndexLeft); o < g; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        self.scrollIndexRight = o;\n                        self.scrollPixelRight = x;\n                        break;\n                    }\n                }\n                //draw frozen columns\n                x = 0;\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                for (o = 0; o < self.frozenColumn; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        break;\n                    }\n                }\n                self.lastFrozenColumnPixel = x;\n                // cell height might have changed during drawing\n                cellHeight = rowHeight;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                // don't draw a tree for the new row\n                treeGrid = self.childGrids[r];\n                if (r !== data.length && rowOpen) {\n                    treeGrid.visible = true;\n                    treeGrid.parentNode = {\n                        offsetTop: y + rowSansTreeHeight + self.canvasOffsetTop,\n                        offsetLeft: rowHeaderCellWidth - 1 + self.canvasOffsetLeft,\n                        offsetHeight: treeHeight,\n                        offsetWidth: self.width - rowHeaderCellWidth - self.style.scrollBarWidth - 1,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: self.style,\n                        nodeType: 'canvas-datagrid-tree',\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        rowIndex: r\n                    };\n                    self.visibleCells.unshift({\n                        rowIndex: r,\n                        columnIndex: 0,\n                        y: treeGrid.parentNode.offsetTop,\n                        x: treeGrid.parentNode.offsetLeft,\n                        height: treeGrid.height,\n                        width: treeGrid.width,\n                        style: 'tree-grid',\n                        type: treeGrid.parentNode.nodeType\n                    });\n                    treeGrid.draw();\n                } else if (treeGrid) {\n                    treeGrid.parentNode.offsetHeight = 0;\n                    delete self.sizes.trees[r];\n                }\n                rowHeaders.push([rd, r, d, y, rowHeight]);\n                self.visibleRowHeights[r] = rowHeight;\n                y += cellHeight + (bc ? 0 : self.style.cellBorderWidth);\n                return true;\n            }\n            function initDraw() {\n                self.visibleRows = [];\n                s = self.getSchema();\n                self.visibleCells = [];\n                self.canvasOffsetTop = self.isChildGrid ? self.parentNode.offsetTop : 0;\n                self.canvasOffsetLeft = self.isChildGrid ? self.parentNode.offsetLeft : 0;\n                h = self.height;\n                w = self.width;\n            }\n            function drawBackground() {\n                radiusRect(0, 0, w, h, 0);\n                self.ctx.clip();\n                self.ctx.fillStyle = self.style.gridBackgroundColor;\n                fillRect(0, 0, w, h);\n            }\n            function drawFrozenRows() {\n                var n, ln = Math.min(data.length, self.frozenRow);\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                y = columnHeaderCellHeight;\n                for (r = 0; r < ln; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.allowFreezingRows) {\n                    // HACK great, another stupid magic number.\n                    // Background will appear as a 0.5px artifact behind the row freeze bar without this hack\n                    y += self.style.frozenMarkerBorderWidth + self.style.frozenMarkerWidth - 0.4999999999;\n                }\n                self.lastFrozenRowPixel = y;\n            }\n            function drawRows() {\n                self.ctx.save();\n                if (self.frozenRow > 0) {\n                    radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                    self.ctx.clip();\n                }\n                var o, n, i, g = s.length;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                if (!self.attributes.snapToRow) {\n                    y += -self.scrollBox.scrollTop + self.scrollPixelTop + self.style.cellBorderWidth;\n                }\n                for (r = self.frozenRow + self.scrollIndexTop; r < l; r += 1) {\n                    n = self.orders.rows[r];\n                    self.scrollIndexBottom = r;\n                    self.scrollPixelBottom = y;\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.showNewRow) {\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    rowHeight = cellHeight = self.style.cellHeight;\n                    rowOpen = false;\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        x += drawCell(self.newRow, data.length, data.length)(s[i], i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    rowHeaders.push([self.newRow, data.length, data.length, y, rowHeight]);\n                }\n                self.ctx.restore();\n            }\n            function drawMoveMarkers() {\n                if (!self.movingSelection) { return; }\n                self.ctx.lineWidth = self.style.moveOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.moveOverlayBorderColor;\n                self.ctx.setLineDash(self.style.moveOverlayBorderSegments);\n                moveBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n                self.ctx.setLineDash([]);\n            }\n            function drawReorderMarkers() {\n                if (!self.reorderObject) { return; }\n                var b = {\n                        height: self.reorderObject.height,\n                        width: self.reorderObject.width,\n                        x: self.reorderObject.x + self.reorderObject.dragOffset.x,\n                        y: self.reorderObject.y + self.reorderObject.dragOffset.y\n                    },\n                    m = {\n                        width: w,\n                        height: h,\n                        x: 0,\n                        y: 0\n                    };\n                self.ctx.fillStyle = self.style.reorderMarkerBackgroundColor;\n                self.ctx.lineWidth = self.style.reorderMarkerBorderWidth;\n                self.ctx.strokeStyle = self.style.reorderMarkerBorderColor;\n                if (self.dragMode === 'row-reorder') {\n                    b.width = w;\n                    b.x = 0;\n                    m.width = w;\n                    m.height = self.currentCell.height;\n                    m.y = self.currentCell.y;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.rowIndex !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex > -1\n                            && self.currentCell.rowIndex < l) {\n                        addBorderLine(m, self.reorderTarget.sortRowIndex > self.reorderObject.sortRowIndex ? 'b' : 't');\n                    }\n                } else if (self.dragMode === 'column-reorder' && self.reorderObject) {\n                    b.height = h;\n                    b.y = 0;\n                    m.height = h;\n                    m.width = self.currentCell.width;\n                    m.y = 0;\n                    m.x = self.currentCell.x;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.sortColumnIndex !== self.reorderObject.sortColumnIndex\n                            && self.currentCell.sortColumnIndex > -1\n                            && self.currentCell.sortColumnIndex < s.length) {\n                        addBorderLine(m, self.reorderTarget.columnIndex > self.reorderObject.columnIndex ? 'r' : 'l');\n                    }\n                }\n            }\n            function drawBorder() {\n                self.ctx.lineWidth = self.style.gridBorderWidth;\n                self.ctx.strokeStyle = self.style.gridBorderColor;\n                strokeRect(0, 0, self.width, self.height);\n            }\n            function drawSelectionBorders() {\n                self.ctx.lineWidth = self.style.selectionOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.selectionOverlayBorderColor;\n                function dsb(c) {\n                    addBorderLine(c[0], c[1]);\n                }\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.save();\n                clipFrozenArea(0);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(1);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(2);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n            }\n            function drawSelectionHandles() {\n                if (self.mobile || self.attributes.allowMovingSelection) {\n                    self.ctx.lineWidth = self.style.selectionHandleBorderWidth;\n                    self.ctx.strokeStyle = self.style.selectionHandleBorderColor;\n                    self.ctx.fillStyle = self.style.selectionHandleColor;\n                    selectionHandles.forEach(function (c) {\n                        addselectionHandle(c[0], c[1]);\n                        var az = self.attributes.touchSelectHandleZone / 2,\n                            ax = c[0].x + (c[1] === 'tl' || c[1] === 'bl' ? 0 : c[0].width) - az,\n                            ay = c[0].y + (c[1] === 'bl' || c[1] === 'br' ? c[0].height : 0) - az;\n                        self.visibleCells.unshift({\n                            x: ax,\n                            y: ay,\n                            height: self.style.selectionHandleSize + az,\n                            width: self.style.selectionHandleSize + az,\n                            style: 'selection-handle-' + c[1]\n                        });\n                    });\n                }\n            }\n            function drawActiveCell() {\n                if (!aCell) { return; }\n                self.ctx.save();\n                var cl = self.activeCell.columnIndex + 1 > self.frozenColumn || self.activeCell.rowIndex + 1 > self.frozenRow,\n                    acx = cl ? self.lastFrozenColumnPixel : 0,\n                    acy = cl ? self.lastFrozenRowPixel : 0,\n                    acw = cl ? self.width - self.lastFrozenColumnPixel : self.width,\n                    ach = cl ? self.height - self.lastFrozenRowPixel : self.height;\n                radiusRect(acx, acy, acw, ach, 0);\n                self.ctx.clip();\n                if (self.attributes.selectionMode === 'row') {\n                    if (self.activeCell && self.activeCell.rowIndex === aCell.rowIndex) {\n                        self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                        self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                        strokeRect(0, aCell.y, self.getHeaderWidth() + rowHeaderCellWidth, self.visibleRowHeights[aCell.rowIndex]);\n                    }\n                } else {\n                    self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                    self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                    strokeRect(aCell.x, aCell.y, aCell.width, aCell.height);\n                }\n                self.ctx.restore();\n            }\n            function drawFrozenMarkers() {\n                var my = self.lastFrozenRowPixel - self.style.frozenMarkerWidth,\n                    mx = self.lastFrozenColumnPixel - self.style.frozenMarkerBorderWidth,\n                    xHover = self.currentCell && self.currentCell.style === 'frozen-row-marker',\n                    yHover = self.currentCell && self.currentCell.style === 'frozen-column-marker';\n                self.ctx.lineWidth = self.style.frozenMarkerBorderWidth;\n                if (self.attributes.allowFreezingColumns) {\n                    self.ctx.fillStyle = yHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = yHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    strokeRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    self.visibleCells.unshift({\n                        x: mx,\n                        y: 0,\n                        height: self.height,\n                        width: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        style: 'frozen-column-marker'\n                    });\n                }\n                if (self.attributes.allowFreezingRows) {\n                    self.ctx.fillStyle = xHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = xHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    strokeRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    self.visibleCells.unshift({\n                        x: 0,\n                        y: my,\n                        height: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        width: self.width,\n                        style: 'frozen-row-marker'\n                    });\n                }\n                if (self.freezeMarkerPosition) {\n                    self.ctx.fillStyle = self.style.frozenMarkerActiveColor;\n                    self.ctx.strokeStyle = self.style.frozenMarkerActiveBorderColor;\n                    if (self.dragMode === 'frozen-column-marker') {\n                        fillRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                        strokeRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                    } else {\n                        fillRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                        strokeRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                    }\n                }\n            }\n            function drawPerfLines() {\n                if (!self.attributes.showPerformance) { return; }\n                var pw = 250,\n                    px = self.width - pw - self.style.scrollBarWidth - (self.style.scrollBarBorderWidth * 2),\n                    py = columnHeaderCellHeight,\n                    ph = 100;\n                if (scrollDebugCounters.length === 0) { scrollDebugCounters = fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (touchPPSCounters.length === 0) { touchPPSCounters = fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (entityCount.length === 0) { entityCount = fillArray(0, perfWindowSize, 1, 0); }\n                self.ctx.lineWidth = 0.5;\n                function dpl(name, perfArr, arrIndex, max, color, useAbs, rowIndex) {\n                    var v;\n                    drawPerfLine(pw, ph, px, py, perfArr, arrIndex, max, color, useAbs);\n                    self.ctx.fillStyle = color;\n                    fillRect(3 + px, py + 9 + (rowIndex * 11), 8, 8);\n                    self.ctx.fillStyle = self.style.debugPerfChartTextColor;\n                    v = arrIndex !== undefined ? perfArr[0][arrIndex] : perfArr[0];\n                    fillText(name + ' ' + (isNaN(v) ? 0 : v).toFixed(3), 14 + px, py + 16 + (rowIndex * 11));\n                }\n                self.ctx.textAlign = 'left';\n                self.ctx.font = self.style.debugFont;\n                self.ctx.fillStyle = self.style.debugPerfChartBackground;\n                fillRect(px, py, pw, ph);\n                [['Scroll Height', scrollDebugCounters, 0, self.scrollBox.scrollHeight, self.style.debugScrollHeightColor, false],\n                    ['Scroll Width', scrollDebugCounters, 1, self.scrollBox.scrollWidth, self.style.debugScrollWidthColor, false],\n                    ['Performance', perfCounters, undefined, 200, self.style.debugPerformanceColor, false],\n                    ['Entities', entityCount, undefined, 1500, self.style.debugEntitiesColor, false],\n                    ['TouchPPSX', touchPPSCounters, 0, 1000, self.style.debugTouchPPSXColor, true],\n                    ['TouchPPSY', touchPPSCounters, 1, 1000, self.style.debugTouchPPSYColor, true]\n                    ].forEach(function (i, index) {\n                    i.push(index);\n                    dpl.apply(null, i);\n                });\n                self.ctx.fillStyle = self.style.debugPerfChartBackground;\n                entityCount.pop();\n                entityCount.unshift(self.visibleCells.length);\n                scrollDebugCounters.pop();\n                scrollDebugCounters.unshift([self.scrollBox.scrollTop, self.scrollBox.scrollLeft]);\n                touchPPSCounters.pop();\n                touchPPSCounters.unshift([self.yPPS, self.xPPS]);\n            }\n            function drawDebug() {\n                self.ctx.save();\n                var d;\n                if (self.attributes.showPerformance || self.attributes.debug) {\n                    if (perfCounters.length === 0) { perfCounters = fillArray(0, perfWindowSize, 1, 0); }\n                    perfCounters.pop();\n                    perfCounters.unshift(performance.now() - p);\n                }\n                if (!self.attributes.debug) {\n                    self.ctx.restore();\n                    return;\n                }\n                self.ctx.font = self.style.debugFont;\n                d = {};\n                d.perf = (perfCounters.reduce(function (a, b) {\n                    return a + b;\n                }, 0) / Math.min(drawCount, perfCounters.length)).toFixed(1);\n                d.perfDelta = perfCounters[0].toFixed(1);\n                d.frozenColumnsWidth = getFrozenColumnsWidth();\n                d.htmlImages = Object.keys(self.htmlImageCache).length;\n                d.reorderObject = 'x: ' + (self.reorderObject || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderObject || {rowIndex: 0}).rowIndex;\n                d.reorderTarget = 'x: ' + (self.reorderTarget || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderTarget || {rowIndex: 0}).rowIndex;\n                d.scale = self.scale;\n                d.startScale = self.startScale;\n                d.scaleDelta = self.scaleDelta;\n                d.zoomDeltaStart = self.zoomDeltaStart;\n                d.touchLength = self.touchLength;\n                d.touches = 'y0: ' + (self.touchPosition || {y: 0}).y + ' y1: ' + (self.touchPosition1 || {y: 0}).y;\n                d.scrollBox = self.scrollBox.toString();\n                d.scrollIndex = 'x: ' + self.scrollIndexLeft + ', y: ' + self.scrollIndexTop;\n                d.scrollPixel = 'x: ' + self.scrollPixelLeft + ', y: ' + self.scrollPixelTop;\n                d.canvasOffset = 'x: ' + self.canvasOffsetLeft + ', y: ' + self.canvasOffsetTop;\n                d.touchDelta = 'x: ' + self.touchDelta.x + ', y: ' + self.touchDelta.y;\n                d.touchAnimateTo = 'x: ' + self.touchAnimateTo.x + ', y: ' + self.touchAnimateTo.y;\n                d.scrollAnimation = 'x: ' + self.scrollAnimation.x + ', y: ' + self.scrollAnimation.y;\n                d.touchPPS = 'x: ' + self.xPPS + ', y: ' + self.yPPS;\n                d.touchPPST = 'x: ' + self.xPPST + ', y: ' + self.yPPST;\n                d.touchDuration = self.touchDuration;\n                d.pointerLockPosition =  self.pointerLockPosition ?\n                        self.pointerLockPosition.x + ', ' + self.pointerLockPosition.y : '';\n                d.size = 'w: ' + self.width + ', h: ' + self.height;\n                d.mouse = 'x: ' + self.mouse.x + ', y: ' + self.mouse.y;\n                d.touch = !self.touchStart\n                    ? '' : 'x: ' + self.touchStart.x + ', y: ' + self.touchStart.y;\n                d.entities = self.visibleCells.length;\n                d.hasFocus = self.hasFocus;\n                d.dragMode = self.dragMode;\n                if (self.currentCell) {\n                    d.columnIndex = self.currentCell.columnIndex;\n                    d.rowIndex = self.currentCell.rowIndex;\n                    d.sortColumnIndex = self.currentCell.sortColumnIndex;\n                    d.sortRowIndex = self.currentCell.sortRowIndex;\n                    d.context = self.currentCell.context;\n                    d.dragContext = self.currentCell.dragContext;\n                    d.style = self.currentCell.style;\n                    d.type = self.currentCell.type;\n                }\n                self.ctx.textAlign = 'right';\n                self.ctx.fillStyle = self.style.debugBackgroundColor;\n                fillRect(0, 0, self.width, self.height);\n                Object.keys(d).forEach(function (key, index) {\n                    var m = key + ': ' + d[key],\n                        lh = 14;\n                    self.ctx.fillStyle = self.style.debugColor;\n                    fillText(m, w - 20, (self.attributes.showPerformance ? 140 : 24) + (index * lh));\n                });\n                self.ctx.restore();\n            }\n            self.ctx.save();\n            initDraw();\n            drawBackground();\n            drawFrozenRows();\n            drawRows();\n            drawActiveCell();\n            drawHeaders();\n            drawFrozenMarkers();\n            drawSelectionBorders();\n            drawSelectionHandles();\n            drawReorderMarkers();\n            drawMoveMarkers();\n            drawScrollBars();\n            if (checkScrollHeight) {\n                self.resize(true);\n            }\n            drawBorder();\n            drawDebug();\n            drawPerfLines();\n            if (self.dispatchEvent('afterdraw', {})) { return; }\n            self.ctx.restore();\n        };\n    };\n});\n","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine(['./defaults'], function (defaults) {\n    'use strict';\n    return function () {\n        var typeMap, component = {};\n        component.dehyphenateProperty = function hyphenateProperty(prop) {\n            prop = prop.replace('--cdg-', '');\n            var p = '', nextLetterCap;\n            Array.prototype.forEach.call(prop, function (char) {\n                if (nextLetterCap) {\n                    nextLetterCap = false;\n                    p += char.toUpperCase();\n                    return;\n                }\n                if (char === '-') {\n                    nextLetterCap = true;\n                    return;\n                }\n                p += char;\n            });\n            return p;\n        };\n        component.hyphenateProperty = function hyphenateProperty(prop, cust) {\n            var p = '';\n            Array.prototype.forEach.call(prop, function (char) {\n                if (char === char.toUpperCase()) {\n                    p += '-' + char.toLowerCase();\n                    return;\n                }\n                p += char;\n            });\n            return (cust ? '--cdg-' : '') + p;\n        };\n        function getDefaultItem(base, item) {\n            var i = {},\n                r;\n            defaults(i);\n            r = i.defaults[base].filter(function (i) {\n                return i[0].toLowerCase() === item.toLowerCase()\n                    || component.hyphenateProperty(i[0]) === item.toLowerCase()\n                    || component.hyphenateProperty(i[0], true) === item.toLowerCase();\n            })[0];\n            return r;\n        }\n        component.applyComponentStyle = function (supressChangeAndDrawEvents, intf) {\n            if (!intf.isComponent) { return; }\n            var cStyle = window.getComputedStyle(intf.tagName === 'CANVAS-DATAGRID' ? intf : intf.canvas, null),\n                defs = {};\n            intf.computedStyle = cStyle;\n            defaults(defs);\n            defs = defs.defaults.styles;\n            defs.forEach(function (def) {\n                var val;\n                val = cStyle.getPropertyValue(component.hyphenateProperty(def[0], true));\n                if (val === \"\") {\n                    val = cStyle.getPropertyValue(component.hyphenateProperty(def[0], false));\n                }\n                if (val !== \"\" && typeof val === 'string') {\n                    intf.setStyleProperty(def[0], typeMap[typeof def[1]](val\n                        .replace(/^\\s+/, '').replace(/\\s+$/, ''), def[1]), true);\n                }\n            });\n            if (!supressChangeAndDrawEvents && intf.dispatchEvent) {\n                requestAnimationFrame(function () { intf.resize(true); });\n                intf.dispatchEvent('stylechanged', intf.style);\n            }\n        };\n        typeMap = {\n            data: function (strData) {\n                try {\n                    return JSON.parse(strData);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid data.');\n                }\n            },\n            schema: function (strSchema) {\n                try {\n                    return JSON.parse(strSchema);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid schema attribute.');\n                }\n            },\n            number: function (strNum, def) {\n                var n = parseInt(strNum, 10);\n                return isNaN(n) ? def : n;\n            },\n            boolean: function (strBool) {\n                return (/true/i).test(strBool);\n            },\n            string: function (str) {\n                return str;\n            }\n        };\n        component.getObservableAttributes = function () {\n            var i = {}, attrs = ['data', 'schema', 'style', 'className', 'name'];\n            defaults(i);\n            i.defaults.attributes.forEach(function (attr) {\n                attrs.push(attr[0].toLowerCase());\n            });\n            return attrs;\n        };\n        component.disconnectedCallback = function () {\n            this.connected = false;\n        };\n        component.connectedCallback = function () {\n            var intf = this;\n            intf.connected = true;\n            component.observe(intf);\n            component.applyComponentStyle(true, intf);\n            intf.resize(true);\n        };\n        component.adoptedCallback = function () {\n            this.resize();\n        };\n        component.attributeChangedCallback = function (attrName, oldVal, newVal) {\n            var tfn, intf = this, def;\n            if (attrName === 'style') {\n                component.applyComponentStyle(false, intf);\n                return;\n            }\n            if (attrName === 'data') {\n                if (intf.dataType === 'application/x-canvas-datagrid') {\n                    intf.dataType = 'application/json+x-canvas-datagrid';\n                }\n                intf.args.data = newVal;\n                return;\n            }\n            if (attrName === 'schema') {\n                intf.args.schema = typeMap.schema(newVal);\n                return;\n            }\n            if (attrName === 'name') {\n                intf.name = newVal;\n                return;\n            }\n            if (attrName === 'class' || attrName === 'className') {\n                return;\n            }\n            def = getDefaultItem('attributes', attrName);\n            if (def) {\n                tfn = typeMap[typeof def[1]];\n                intf.attributes[def[0]] = tfn(newVal);\n                return;\n            }\n            if (/^on/.test(attrName)) {\n                intf.addEventListener('on' + attrName, function (e) {\n                    eval(newVal);\n                });\n            }\n            return;\n        };\n        component.observe = function (intf) {\n            var observer;\n            if (!window.MutationObserver) { return; }\n            intf.applyComponentStyle = function () { component.applyComponentStyle(false, intf); intf.resize(); };\n            /**\n             * Applies the computed css styles to the grid.  In some browsers, changing directives in attached style sheets does not automatically update the styles in this component.  It is necessary to call this method to update in these cases.\n             * @memberof canvasDatagrid\n             * @name applyComponentStyle\n             * @method\n             */\n            observer = new window.MutationObserver(function (mutations) {\n                var checkInnerHTML, checkStyle;\n                Array.prototype.forEach.call(mutations, function (mutation) {\n                    if (mutation.attributeName === 'class'\n                            || mutation.attributeName === 'style') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.target.parentNode\n                            && mutation.target.parentNode.nodeName === 'STYLE') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.addedNodes.length > 0 || mutation.type === 'characterData') {\n                        checkInnerHTML = true;\n                    }\n                });\n                if (checkStyle) {\n                    intf.applyComponentStyle(false, intf);\n                }\n                if (checkInnerHTML) {\n                    if (intf.dataType === 'application/x-canvas-datagrid') {\n                        intf.dataType = 'application/json+x-canvas-datagrid';\n                    }\n                    intf.data = intf.innerHTML;\n                }\n            });\n            observer.observe(intf, { characterData: true, childList: true, attributes: true, subtree: true });\n            Array.prototype.forEach.call(document.querySelectorAll('style'), function (el) {\n                observer.observe(el, { characterData: true, childList: true, attributes: true, subtree: true });\n            });\n        };\n        return component;\n    };\n});","/*jslint browser: true, unparam: true, todo: true, evil: true*/\n/*globals Reflect: false, HTMLElement: true, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([\n    './component',\n    './defaults',\n    './draw',\n    './events',\n    './touch',\n    './intf',\n    './contextMenu',\n    './dom',\n    './publicMethods'\n], function context(component) {\n    'use strict';\n    component = component();\n    var modules = Array.prototype.slice.call(arguments);\n    function Grid(args) {\n        args = args || {};\n        var self = {};\n        self.isComponent = args.component === undefined;\n        self.isChildGrid = args.parentNode && /canvas-datagrid-(cell|tree)/.test(args.parentNode.nodeType);\n        if (self.isChildGrid) {\n            self.intf = {};\n        } else {\n            self.intf = self.isComponent ? eval('Reflect.construct(HTMLElement, [], new.target)')\n                : document.createElement('canvas');\n        }\n        self.args = args;\n        self.intf.args = args;\n        self.applyComponentStyle = component.applyComponentStyle;\n        self.hyphenateProperty = component.hyphenateProperty;\n        self.dehyphenateProperty = component.dehyphenateProperty;\n        self.createGrid = function grid(args) {\n            args.component = false;\n            return new Grid(args);\n        };\n        modules.forEach(function (module) {\n            module(self);\n        });\n        if (self.isChildGrid) {\n            self.shadowRoot = args.parentNode.shadowRoot;\n            self.parentNode = args.parentNode;\n        } else if (self.intf.createShadowRoot) {\n            self.shadowRoot = self.intf.attachShadow({mode: 'open'});\n            self.parentNode = self.shadowRoot;\n        } else {\n            self.parentNode = self.intf;\n        }\n        self.init();\n        return self.intf;\n    }\n    if (window.HTMLElement) {\n        Grid.prototype = Object.create(window.HTMLElement.prototype);\n    }\n    // export web component\n    if (window.customElements) {\n        Grid.observedAttributes = component.getObservableAttributes();\n        Grid.prototype.disconnectedCallback = component.disconnectedCallback;\n        Grid.prototype.attributeChangedCallback = component.attributeChangedCallback;\n        Grid.prototype.connectedCallback = component.connectedCallback;\n        Grid.prototype.adoptedCallback = component.adoptedCallback;\n        window.customElements.define('canvas-datagrid', Grid);\n    }\n    // export global\n    if (window && !window.canvasDatagrid && !window.require) {\n        window.canvasDatagrid = function (args) { return new Grid(args); };\n    }\n    // export amd loader\n    module.exports = function grid(args) {\n        args = args || {};\n        var i, tKeys = ['style', 'formatters', 'sorters', 'filters',\n                    'treeGridAttributes', 'cellGridAttributes', 'data', 'schema'];\n        if (window.customElements && document.body.createShadowRoot) {\n            i = document.createElement('canvas-datagrid');\n            Object.keys(args).forEach(function (argKey) {\n                // set data and parentNode after everything else\n                if (argKey === 'data') { return; }\n                if (argKey === 'parentNode') { return; }\n                // top level keys in args\n                if (tKeys.indexOf(argKey) !== -1) {\n                    tKeys.forEach(function (tKey) {\n                        if (args[tKey] === undefined || tKey !== argKey) { return; }\n                        if (['formatters', 'sorters', 'filters'].indexOf(argKey) !== -1) {\n                            if (typeof args[tKey] === 'object' && args[tKey] !== null) {\n                                Object.keys(args[tKey]).forEach(function (sKey) {\n                                    i[tKey][sKey] = args[tKey][sKey];\n                                });\n                            }\n                        } else {\n                            i[tKey] = args[tKey];\n                        }\n                    });\n                    return;\n                }\n                // all others are attribute level keys\n                i.attributes[argKey] = args[argKey];\n            });\n            if (args.data) {\n                i.data = args.data;\n            }\n            // add to the dom very last to avoid redraws\n            if (args.parentNode) {\n                args.parentNode.appendChild(i);\n            }\n            return i;\n        }\n        args.component = false;\n        i = new Grid(args);\n        if (args.parentNode && args.parentNode.appendChild) {\n            args.parentNode.appendChild(i);\n        }\n        return i;\n    };\n    return module.exports;\n});\n"],"sourceRoot":""}