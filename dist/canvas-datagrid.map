{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///canvas-datagrid.js","webpack:///webpack/bootstrap d3044317958739bec1a0","webpack:///./lib/defaults.js","webpack:///./lib/main.js","webpack:///./lib/component.js","webpack:///./lib/draw.js","webpack:///./lib/events.js","webpack:///./lib/touch.js","webpack:///./lib/intf.js","webpack:///./lib/contextMenu.js","webpack:///./lib/dom.js","webpack:///./lib/publicMethods.js"],"names":["root","factory","exports","module","define","amd","self","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","undefined","defaults","attributes","styles","apply","context","component","Grid","args","isComponent","isChildGrid","parentNode","test","nodeType","intf","eval","document","createElement","applyComponentStyle","createGrid","forEach","shadowRoot","createShadowRoot","attachShadow","mode","init","Array","slice","arguments","window","HTMLElement","create","customElements","observedAttributes","getObservableAttributes","disconnectedCallback","attributeChangedCallback","connectedCallback","adoptedCallback","canvasDatagrid","require","tKeys","body","keys","argKey","appendChild","indexOf","tKey","sKey","data","hyphenateProperty","prop","cust","char","toUpperCase","toLowerCase","getDefaultItem","base","item","filter","typeMap","supressChangeAndDrawEvents","cStyle","getComputedStyle","tagName","canvas","defs","computedStyle","def","val","getPropertyValue","setStyleProperty","replace","requestAnimationFrame","resize","dispatchEvent","style","strData","JSON","parse","e","Error","schema","strSchema","number","strNum","parseInt","isNaN","boolean","strBool","string","str","attrs","attr","push","connected","observe","attrName","oldVal","newVal","tfn","addEventListener","observer","MutationObserver","mutations","checkInnerHTML","checkStyle","mutation","attributeName","target","nodeName","addedNodes","length","type","innerHTML","characterData","childList","subtree","querySelectorAll","el","fillArray","low","high","step","x","drawPerfLine","w","h","y","perfArr","arrIndex","max","color","useAbs","r","canvasOffsetLeft","canvasOffsetTop","ctx","beginPath","moveTo","cx","cy","Math","abs","lineTo","strokeStyle","stroke","drawOnAllImagesLoaded","loaded","htmlImageCache","html","complete","draw","drawHtml","cell","img","v","formattedValue","height","width","drawImage","Image","onload","src","btoa","drawOrderByArrow","mt","columnHeaderOrderByArrowMarginTop","scale","ml","columnHeaderOrderByArrowMarginLeft","mr","columnHeaderOrderByArrowMarginRight","aw","columnHeaderOrderByArrowWidth","ah","columnHeaderOrderByArrowHeight","fillStyle","columnHeaderOrderByArrowColor","columnHeaderOrderByArrowBorderColor","orderDirection","fill","drawTreeArrow","treeArrowMarginTop","treeArrowMarginRight","treeArrowMarginLeft","treeArrowWidth","treeArrowHeight","treeArrowColor","treeArrowBorderColor","openChildren","uniqueId","radiusRect","radius","b","quadraticCurveTo","fillRect","strokeRect","fillText","text","fillCircle","arc","PI","strokeCircle","clipFrozenArea","lastFrozenColumnPixel","lastFrozenRowPixel","clip","fillHandle","selectionHandleType","strokeHandle","addselectionHandle","pos","hw","selectionHandleSize","tr","br","tl","bl","addBorderLine","t","addEllipsis","ellipsisCache","measureText","value","drawText","paddingLeft","paddingTop","paddingRight","paddingBottom","vPos","hPos","orderByArrowWidth","fontHeight","horizontalAlignment","verticalAlignment","getFrozenColumnsWidth","column","getVisibleSchema","min","frozenColumn","orders","columns","sizes","cellWidth","perfCounters","drawCount","perfWindowSize","entityCount","scrollDebugCounters","touchPPSCounters","internal","createHandlesOverlayArray","allowMovingSelection","mobile","selectionBorderTop","selectionBorderRight","selectionHandles","selectionHandle","selectionBorderLeft","selectionBorderBottom","selectionHandleBehavior","createBorderOverlayArray","drawArray","propPrefix","offsetPoint","selectionBorder","isRowHeader","selections","rowIndex","columnIndex","isHeader","drawCell","rowOrderIndex","header","headerIndex","columnOrderIndex","cellGridAttributes","cellStyle","isCorner","isColumnHeader","selected","hovered","hovers","active","activeCell","isGrid","activeHeader","rows","f","formatters","orderByArrowSize","treeArrowSize","ev","row","cellBorderWidth","visibleRows","offsetTop","offsetLeft","scrollTop","scrollBox","scrollLeft","cellHeight","offsetWidth","offsetHeight","offsetParent","isHeaderCellCap","rowOpen","sortColumnIndex","sortRowIndex","isNormal","gridId","parentGrid","title","userHeight","rowHeight","userWidth","cornerCell","visibleCells","unshift","lineWidth","cellHeightWithChildGrid","checkScrollHeight","cellWidthWithChildGrid","rd","save","tree","showRowNumbers","childGrids","saveAppearance","cellGridHeight","grid","visible","orderBy","font","console","warn","toString","columnFilters","filterTextPrefix","aCell","selectionBorders","movingSelection","moveBorders","moveOffset","restore","bc","drawRowHeader","rowData","index","a","showRowHeaders","rowHeaderCell","rowHeaderCellWidth","drawRow","treeHeight","rowSansTreeHeight","g","trees","allowFreezingColumns","frozenColumnWidths","scrollIndexLeft","scrollIndexRight","scrollPixelRight","scrollPixelLeft","treeGrid","scrollBarWidth","rowHeaders","visibleRowHeights","gridBorderCollapse","u","currentCell","columnHeaderCellHeight","getColumnHeaderCellHeight","getRowHeaderCellWidth","performance","now","createRowOrders","gridBackgroundColor","ln","frozenRow","allowFreezingRows","frozenMarkerBorderWidth","frozenMarkerWidth","snapToRow","scrollPixelTop","scrollIndexTop","scrollIndexBottom","scrollPixelBottom","showNewRow","newRow","cl","selectionMode","activeCellOverlayBorderWidth","activeCellOverlayBorderColor","getHeaderWidth","drawHeaderColumnRange","start","end","order","columnHeaderCell","nonFrozenHeaderWidth","rArgs","rhIndex","showColumnHeaders","columnHeaderCellBorderWidth","isHeaderCell","endCap","my","mx","xHover","yHover","frozenMarkerHoverColor","frozenMarkerColor","frozenMarkerHoverBorderColor","frozenMarkerBorderColor","freezeMarkerPosition","frozenMarkerActiveColor","frozenMarkerActiveBorderColor","dragMode","dsb","selectionOverlayBorderWidth","selectionOverlayBorderColor","selectionHandleBorderWidth","selectionHandleBorderColor","selectionHandleColor","az","touchSelectHandleZone","ax","ay","reorderObject","dragOffset","reorderMarkerBackgroundColor","reorderMarkerBorderWidth","reorderMarkerBorderColor","reorderMarkerIndexBorderWidth","reorderMarkerIndexBorderColor","reorderTarget","moveOverlayBorderWidth","moveOverlayBorderColor","setLineDash","moveOverlayBorderSegments","drawCorner","en","entities","scrollBarBoxMargin","scrollBarBorderColor","scrollBarBorderWidth","horizontalBox","horizontalBar","scrollBoxWidth","scrollWidth","verticalBox","verticalBar","scrollBoxHeight","scrollHeight","horizontalBarVisible","scrollBarBackgroundColor","scrollBarBoxColor","scrollBarActiveColor","scrollBarBoxBorderRadius","verticalBarVisible","scrollBarCornerBorderColor","scrollBarCornerBackgroundColor","corner","gridBorderWidth","gridBorderColor","showPerformance","debug","pop","perf","reduce","toFixed","htmlImages","startScale","scaleDelta","zoomDeltaStart","touchLength","touches","touchPosition","touchPosition1","scrollIndex","scrollPixel","canvasOffset","touchDelta","touchAnimateTo","scrollAnimation","touchPPS","xPPS","yPPS","touchPPST","xPPST","yPPST","touchDuration","pointerLockPosition","size","mouse","touch","touchStart","hasFocus","dragContext","textAlign","key","dpl","pw","ph","px","py","wheeling","stopPropagation","fn","events","removeEventListener","sfn","idx","splice","preventDefault","defaultPrevented","getRatio","maxPixelRatio","devicePixelRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","backingStorePixelRatio","drawAfterResize","setCanvasSize","dims","dataHeight","cellBorder","dataWidth","dim","parentNodeStyle","vb","nb","co","isScrollBoxCorner","sbw","ratio","bm","columnHeaderCellBorder","ch","scrollCache","disableRowResizing","accumulator","va","hidden","top","left","widthBoxRatio","heightBoxRatio","scrollBarBoxMinSize","scrollBarBoxWidth","bar","box","page","pageUpDownOverlap","resizeEditInput","scroll","dontDraw","mousemove","overridePos","contextMenu","input","getLayerPos","dragBounds","sBounds","delta","ctrl","ctrlKey","metaKey","persistantSelectionMode","vs","getCellAt","NativeEvent","previousCell","clearTimeout","scrollTimer","isInGrid","rowBoundaryCrossed","columnBoundaryCrossed","cellBoundaryCrossed","prefix","draggingItem","scrollModes","dragItem","cursor","selecting","getSelectionBounds","dragStart","dragStartObject","shiftKey","bottom","right","ignoreNextClick","dragAddToSelection","selectRow","selectionBounds","selectArea","autoScrollZone","click","checkSelectionChange","selectedData","getSelectedData","endEdit","setActiveCell","selectAll","columnHeaderClickBehavior","selectColumn","treeArrowClickRadius","toggleTree","dragResizeColumn","resizingStartingWidth","resizingStartingHeight","minColumnWidth","minRowHeight","resizeScrollZone","resizeChildGrids","globalRowResize","stopDragResize","setStorageData","scrollGrid","scrollPointerLock","scrollStartMode","movementX","movementY","scrollMode","scrollStart","setTimeout","scrollRepeatRate","selectionScrollIncrement","stopScrollGrid","exitPointerLock","dragReorder","allowColumnReordering","allowRowReordering","source","reorderDeadZone","stopDragReorder","oIndex","tIndex","cr","row-reorder","column-reorder","dragMove","stopDragMove","moveSelection","freezeMove","stopFreezeMove","startFreezeMove","mousedown","lastMouseDownTarget","button","move","freeze","requestPointerLock","concat","dragging","mouseup","controlInput","focus","keydown","last","cols","keyCode","beginEditAt","scrollIntoView","selectionFollowsActiveCell","keyup","keypress","dblclick","fitColumnToValues","autosize","scrollWheel","deltaX","deltaY","deltaMode","touchHaltAnimation","scrollTo","pasteItem","clipData","mimeType","normalizeRowData","importingRow","existingRow","offsetX","isArray","map","colKey","substring","split","sel","cellData","colIndex","cName","yi","paste","clipboardData","items","dti","getAsString","cut","copy","forEachSelectedCell","colName","htmlSafe","fCopyCell","addCellValue","trRow","textRow","ht","headers","sData","copyHeadersOnSelectAll","tableRows","textRows","join","setData","stringify","touchScrollTimeout","animationFrames","getTouchPos","touchIndex","rect","getBoundingClientRect","clientX","clientY","easingFunctions","linear","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easing","touchEasingMethod","calculatePPSTimed","touchSigmaTimed","calculatePPS","touchSigma","touchEndAnimation","touchReleaseAnimationDurationMs","stopAnimation","touchEditCell","touchCell","clearInterval","calculatePPSTimer","touchDeadZone","touchingCell","editCell","touchstart","changedTouches","startingCell","disposeContextMenu","touchContextTimeout","touchStartEvent","zoomAltered","touchStart1","touchScrollStart","contextmenuEvent","touchContextMenuTimeMs","setInterval","touchEndEvents","touchmove","passive","touchend","touchcancel","touchSelect","handleType","touchSelecting","bounds","getSchema","touchScroll","rScrollZone","bScrollZone","tScrollZone","lScrollZone","rw","t1","t2","touchZoomSensitivity","touchZoomMin","touchZoomMax","selectionScrollZone","dz","touchReleaseAcceleration","scrollAnimationPPSThreshold","ctor","treeGridAttributes","pkDefined","storageName","invalidSearchExpClass","localStyleLibraryStorageKey","dataType","filters","currentFilter","sorters","parsers","schemaHashes","uId","changes","componentL1Events","eventNames","expandToRow","col","orderedIndex","visibility","localStorage","setItem","tempSchema","createColumnOrders","applyDefaultValue","defaultValue","createNewRowData","getSchemaNameHash","getBestGuessDataType","columnName","drawChildGrids","gridKey","setTimer","refreshFromOrigialData","originalData","validateColumn","setDefaults","obj1","obj2","setAttributes","setStyle","dispose","removeChild","eventParent","contextmenu","disconnect","tryLoadStoredSettings","reloadStoredValues","storedSettings","getHeaderByName","getDomRoot","host","getFontName","fontStyle","getFontHeight","parseFloat","parseStyleValue","initProp","propName","getStyleProperty","styleKeys","supressDrawAndEvent","isDim","getItem","initialized","publicStyleKeyIntf","initScrollBox","setDom","ie","navigator","userAgent","edge","webKit","moz","cursorGrab","cursorGrabing","cursorGrabbing","appendTo","clearChangeLog","gotoCell","gotoRow","findColumnScrollLeft","findRowScrollTop","findColumnMaxTextLength","isCellVisible","clipElement","getSchemaFromData","setFilter","expandTree","collapseTree","insertRow","deleteRow","addRow","insertColumn","deleteColumn","addColumn","getClippingRect","setRowHeight","setColumnWidth","resetColumnWidths","resetRowHeights","selectNone","assertPxColor","clearPxColorAssertions","integerToAlpha","DOMStyles","set","valueObject","filterFor","String","filterRegExp","regEnd","pattern","exec","flags","flagLength","invalidFilterRegEx","RegExp","toLocaleUpperCase","innerText","textContent","blur","TypeError","currentCursor","find","eventName","RangeError","getTypes","callback","etl","schemaOrPk","pk","autoGenerateSchema","primaryKey","autoResizeColumns","disableRowOrdering","setScrollTop","preventScrollEvent","setScrollLeft","sHeight","sWidth","supressDrawEvent","applyContextItemStyle","contextItemContainer","createInlineStyle","createContextMenu","parentContextMenu","createItems","removeChildContext","relatedTarget","container","childMenuArrow","contains","children","setAttribute","contextAddCallback","getAttribute","cPos","childContextMenuMarginLeft","childContextMenuMarginTop","createChildContext","addContent","content","childContextMenuArrowHTML","clickIndex","Event","checkArrowVisibility","parentDOMNode","upArrow","downArrow","startHoverScroll","contextHoverScrollAmount","hoverScrollTimeout","contextHoverScrollRateMs","endHoverScroll","selectedIndex","loc","scrollOffset","zIndexTop","contextMenuZIndex","position","contextMenuArrowColor","zIndex","inputDropdown","maxHeight","innerHeight","autocompleteBottomMargin","minWidth","contextMenuArrowUpHTML","contextMenuArrowDownHTML","contextMenuWindowMargin","innerWidth","isFinite","createFilterContextMenuItems","checkRegExpErrorState","filterInput","background","contextFilterInputBackground","contextFilterInputColor","contextFilterInvalidRegExpBackground","contextFilterInvalidRegExpColor","fillAutoComplete","count","autoCompleteItems","maxAutoCompleteItems","disposeAutocomplete","createAutoCompleteContext","iRect","autoCompleteContext","filterContainer","filterLabel","filterAutoCompleteButton","onclick","filterOptionText","contextFilterButtonHTML","cf","removeFilterOptionText","addDefaultContextMenuItem","isNormalCell","isBackground","isScrollBar","showFilter","showCopy","copyText","execCommand","showPaste","clipBoardData","pasteText","showColumnSelector","columnSelectorText","toggleColumnVisibility","columnSelectorHiddenText","columnSelectorVisibleText","hideColumnText","showClearSettingsOption","clearSettingsOptionText","columnWidth","allowSorting","showOrderByOption","showOrderByOptionTextAsc","showOrderByOptionTextDesc","createDiposeEvent","contextPosition","contextMenuMarginLeft","contextMenuMarginTop","mobileContextMenuMargin","ele","boundingRect","eleRect","clipRect","parentRect","Infinity","scrollingElement","borderWidth","getVisibleCellByIndex","mobileEditInputHeight","cellPaddingLeft","ignoreScrollOffset","abort","abortEdit","newValue","oldValue","aborted","editable","enumItems","enu","option","valueInEnum","multiLine","editCellZIndex","fontSize","editCellFontSize","nx","ny","className","css","canvas-datagrid-context-menu-filter-input","verticalAlign","marginLeft","padding","border","contextFilterInputBorder","borderRadius","contextFilterInputBorderRadius","lineHeight","fontWeight","fontFamily","contextFilterInputFontFamily","contextFilterInputFontSize","canvas-datagrid-context-menu-filter-button","contextMenuBackground","contextMenuColor","contextFilterButtonBorder","contextFilterButtonBorderRadius","contextMenuFilterButtonFontFamily","contextMenuFilterButtonFontSize","canvas-datagrid-context-child-arrow","cssFloat","childContextMenuArrowColor","contextMenuChildArrowFontSize","contextMenuFontFamily","canvas-datagrid-autocomplete","contextMenuFontSize","contextMenuBorder","contextMenuPadding","contextMenuBorderRadius","opacity","contextMenuOpacity","overflow","canvas-datagrid-autocomplete-item","canvas-datagrid-autocomplete-item:hover","contextMenuHoverBackground","contextMenuHoverColor","canvas-datagrid-canvas","canvas-datagrid","display","canvas-datagrid-control-input","canvas-datagrid-edit-mobile-input","boxSizing","outline","margin","mobileEditFontFamily","mobileEditFontSize","editCellBorder","editCellColor","editCellBackgroundColor","appearance","webkitAppearance","mozAppearance","canvas-datagrid-edit-input","editCellPaddingLeft","editCellFontFamily","boxShadow","editCellBoxShadow","canvas-datagrid-context-menu-item-mobile","contextMenuItemMargin","contextMenuItemBorderRadius","canvas-datagrid-context-menu-item","canvas-datagrid-context-menu-item:hover","canvas-datagrid-context-menu-label","contextMenuLabelMargin","contextMenuLabelDisplay","contextMenuLabelMinWidth","maxWidth","contextMenuLabelMaxWidth","canvas-datagrid-context-menu-mobile","whiteSpace","canvas-datagrid-context-menu","canvas-datagrid-invalid-search-regExp","contextMenuFilterInvalidExpresion","onblur","parentIsCanvas","getContext","textBaseline","ordA","charCodeAt","ordZ","len","fromCharCode","floor","applyFilter","isColumnSelected","colIsSelected","shift","supressEvent","addCol","ri","st","dragObject","rowId","childGrid","trArgs","treeGridHeight","direction","sortFunction","dontSetStorageData","sort","offsetY","xi","cidx","isColumnVisible","isRowVisible","useTouchScrollZones","moveBorder","entitiy","tsz","touchScrollZone","moveMode","borderDragBehavior","xBorderBehavior","yBorderBehavior","isVerticalScrollBar","isHorizontalScrollBar","borderResizeZone","allowColumnResize","allowColumnResizeFromCell","allowRowHeaderResize","allowRowResize","allowRowResizeFromCell","rowGrabZoneSize","maxCol","minCol"," ","rowHeaderCellFont","autosizePadding","autosizeHeaderCellPadding","rowHeaderCellPaddingRight","rowHeaderCellPaddingLeft","columnHeaderCellFont","headerCellPaddingRight","headerCellPaddingLeft","cellFont","cellPaddingRight","cellAutoResizePadding","total","headerCell","int","asc","localeCompare","date","Date","getTime"],"mappings":"CAAA,SAAAA,EAAAC,GACA,gBAAAC,UAAA,gBAAAC,QACAA,OAAAD,QAAAD,IACA,kBAAAG,gBAAAC,IACAD,UAAAH,GACA,gBAAAC,SACAA,QAAA,eAAAD,IAEAD,EAAA,eAAAC,KACC,mBAAAK,WAAAC,KAAA,WACD,MCAgB,UAAUC,GCN1B,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAR,OAGA,IAAAC,GAAAQ,EAAAD,IACAE,EAAAF,EACAG,GAAA,EACAX,WAUA,OANAM,GAAAE,GAAAI,KAAAX,EAAAD,QAAAC,IAAAD,QAAAO,GAGAN,EAAAU,GAAA,EAGAV,EAAAD,QAvBA,GAAAS,KA4DA,OAhCAF,GAAAM,EAAAP,EAGAC,EAAAO,EAAAL,EAGAF,EAAAQ,EAAA,SAAAf,EAAAgB,EAAAC,GACAV,EAAAW,EAAAlB,EAAAgB,IACAG,OAAAC,eAAApB,EAAAgB,GACAK,cAAA,EACAC,YAAA,EACAC,IAAAN,KAMAV,EAAAiB,EAAA,SAAAvB,GACA,GAAAgB,GAAAhB,KAAAwB,WACA,WAA2B,MAAAxB,GAAA,SAC3B,WAAiC,MAAAA,GAEjC,OADAM,GAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAQ,EAAAC,GAAsD,MAAAR,QAAAS,UAAAC,eAAAjB,KAAAc,EAAAC,IAGtDpB,EAAAuB,EAAA,GAGAvB,IAAAwB,EAAA,KDgBM,SAAU9B,EAAQD,EAASO,GE7EjC,GAAAyB,GAAAC,CAEAD,UA6RCE,MA7RDD,EAAA,WACA,YACA,iBAAA7B,GACAA,EAAA+B,UACAC,aACA,6BACA,yBACA,iCACA,yBACA,4BACA,4BACA,4BACA,0BACA,sBACA,8BACA,oBACA,0BACA,yBACA,8BACA,wBACA,mDACA,qCACA,kDACA,4CACA,kCACA,+BACA,+BACA,8BACA,oBACA,aACA,0BACA,0BACA,gBACA,iCACA,mCACA,uBACA,6BACA,6BACA,iBACA,YACA,wBACA,sBACA,+BACA,iDACA,sBACA,wBACA,sBACA,sBACA,oCACA,yBACA,wBACA,kCACA,mCACA,yBACA,gCACA,2BACA,+BACA,yBACA,0BACA,gBACA,kBACA,kBACA,yBACA,qDACA,uDACA,iBACA,uBACA,sBACA,sBACA,iBACA,+BACA,oBACA,oCACA,iCACA,wCACA,uBACA,6BACA,8BACA,oBACA,sBACA,oBACA,YACA,4BAEAC,SACA,uDACA,mDACA,4BACA,uCACA,qCACA,4DACA,4CACA,yDACA,mCACA,8BACA,4BACA,6BACA,2BACA,+DACA,+CACA,mEACA,mDACA,gEACA,gDACA,gCACA,gCACA,sBACA,6BACA,iDACA,6CACA,sBACA,iCACA,+BACA,uBACA,kBACA,gCACA,mCACA,sDACA,sCACA,wBACA,sBACA,uBACA,qBACA,yDACA,yCACA,mCACA,kBACA,+BACA,qDACA,yCACA,mCACA,iCACA,6DACA,yDACA,kCACA,gDACA,2CACA,8BACA,+CACA,kEACA,kDACA,oCACA,kCACA,mCACA,iCACA,+CACA,iEACA,0CACA,2DACA,qCACA,yCACA,0CACA,wCACA,qCACA,iEACA,0CACA,uCACA,uDACA,gEACA,uCACA,4CACA,8CACA,sCACA,8DACA,6DACA,gDACA,wCACA,sCACA,mDACA,yDACA,kCACA,yCACA,2CACA,mDACA,2CACA,+DACA,uCACA,+BACA,wDACA,iDACA,sCACA,gCACA,2CACA,uCACA,qCACA,oCACA,4BACA,4BACA,8BACA,6BACA,gCACA,0BACA,uDACA,mDACA,2BACA,oCACA,sDACA,kDACA,0BACA,oCACA,4BACA,0BACA,uBACA,oDACA,0DACA,qDACA,2DACA,+CACA,qDACA,8BACA,wBACA,iDACA,kCACA,6CACA,sBACA,kBACA,wBACA,uBACA,sBACA,wBACA,oBACA,uBACA,+BACA,6BACA,sCACA,8BACA,6BACA,mDACA,sCACA,mBACA,sDACA,kDACA,kCACA,0DACA,uCACA,0DACA,sDACA,+BACA,6CACA,wCACA,2BACA,4CACA,+DACA,+CACA,iCACA,+BACA,gCACA,8BACA,kEACA,qDACA,4CACA,0BACA,kDACA,sDACA,kDACA,4BACA,mC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","file":"canvas-datagrid.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"canvasDatagrid\"] = factory();\n\telse\n\t\troot[\"canvasDatagrid\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"canvasDatagrid\"] = factory();\n\telse\n\t\troot[\"canvasDatagrid\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 1);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        self.defaults = {\n            attributes: [\n                ['allowColumnReordering', true],\n                ['allowColumnResize', true],\n                ['allowColumnResizeFromCell', false],\n                ['allowFreezingRows', false],\n                ['allowFreezingColumns', false],\n                ['allowMovingSelection', true],\n                ['allowRowHeaderResize', true],\n                ['allowRowReordering', false],\n                ['allowRowResize', true],\n                ['allowRowResizeFromCell', false],\n                ['allowSorting', true],\n                ['autoGenerateSchema', false],\n                ['autoResizeColumns', false],\n                ['borderDragBehavior', 'none'],\n                ['borderResizeZone', 10],\n                ['clearSettingsOptionText', 'Clear saved settings'],\n                ['columnHeaderClickBehavior', 'sort'],\n                ['columnSelectorHiddenText', '&nbsp;&nbsp;&nbsp;'],\n                ['columnSelectorText', 'Add/Remove columns'],\n                ['columnSelectorVisibleText', '\\u2713'],\n                ['contextHoverScrollAmount', 2],\n                ['contextHoverScrollRateMs', 5],\n                ['copyHeadersOnSelectAll', true],\n                ['copyText', 'Copy'],\n                ['debug', false],\n                ['disableRowOrdering', false],\n                ['disableRowResizing', false],\n                ['editable', true],\n                ['filterOptionText', 'Filter %s'],\n                ['filterTextPrefix', '(filtered) '],\n                ['globalRowResize', false],\n                ['hideColumnText', 'Hide %s'],\n                ['maxAutoCompleteItems', 200],\n                ['multiLine', false],\n                ['name', ''],\n                ['pageUpDownOverlap', 1],\n                ['pasteText', 'Paste'],\n                ['persistantSelectionMode', false],\n                ['removeFilterOptionText', 'Remove filter on %s'],\n                ['reorderDeadZone', 3],\n                ['resizeScrollZone', 20],\n                ['rowGrabZoneSize', 5],\n                ['saveAppearance', true],\n                ['scrollAnimationPPSThreshold', 0.75],\n                ['scrollPointerLock', false],\n                ['scrollRepeatRate', 75],\n                ['selectionFollowsActiveCell', false],\n                ['selectionHandleBehavior', 'none'],\n                ['selectionMode', 'cell'],\n                ['selectionScrollIncrement', 20],\n                ['selectionScrollZone', 20],\n                ['showClearSettingsOption', true],\n                ['showColumnHeaders', true],\n                ['showColumnSelector', true],\n                ['showCopy', false],\n                ['showFilter', true],\n                ['showNewRow', false],\n                ['showOrderByOption', true],\n                ['showOrderByOptionTextAsc', 'Order by %s ascending'],\n                ['showOrderByOptionTextDesc', 'Order by %s descending'],\n                ['showPaste', false],\n                ['showPerformance', false],\n                ['showRowHeaders', true],\n                ['showRowNumbers', true],\n                ['snapToRow', false],\n                ['touchContextMenuTimeMs', 800],\n                ['touchDeadZone', 3],\n                ['touchEasingMethod', 'easeOutQuad'],\n                ['touchReleaseAcceleration', 1000],\n                ['touchReleaseAnimationDurationMs', 2000],\n                ['touchScrollZone', 20],\n                ['touchSelectHandleZone', 20],\n                ['touchZoomSensitivity', 0.005],\n                ['touchZoomMin', 0.5],\n                ['touchZoomMax', 1.75],\n                ['maxPixelRatio', 1],\n                ['tree', false],\n                ['treeHorizontalScroll', false]\n            ],\n            styles: [\n                ['activeCellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['activeCellBorderWidth', 1],\n                ['activeCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellFont', '16px sans-serif'],\n                ['activeCellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['activeCellOverlayBorderWidth', 1],\n                ['activeCellPaddingBottom', 5],\n                ['activeCellPaddingLeft', 5],\n                ['activeCellPaddingRight', 7],\n                ['activeCellPaddingTop', 5],\n                ['activeCellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['activeCellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['activeColumnHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeColumnHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeRowHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeRowHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['autocompleteBottomMargin', 60],\n                ['autosizeHeaderCellPadding', 8],\n                ['autosizePadding', 5],\n                ['cellAutoResizePadding', 13],\n                ['cellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['cellBorderWidth', 1],\n                ['cellColor', 'rgba(0, 0, 0, 1)'],\n                ['cellFont', '16px sans-serif'],\n                ['cellGridHeight', 250],\n                ['cellHeight', 24],\n                ['cellHeightWithChildGrid', 150],\n                ['cellHorizontalAlignment', 'left'],\n                ['cellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['cellPaddingBottom', 5],\n                ['cellPaddingLeft', 5],\n                ['cellPaddingRight', 7],\n                ['cellPaddingTop', 5],\n                ['cellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['cellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['cellVerticalAlignment', 'center'],\n                ['cellWidth', 250],\n                ['cellWidthWithChildGrid', 250],\n                ['childContextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['childContextMenuArrowHTML', '&#x25BA;'],\n                ['childContextMenuMarginLeft', -11],\n                ['childContextMenuMarginTop', -6],\n                ['columnHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellBorderColor', 'rgba(172, 172, 172, 1)'],\n                ['columnHeaderCellBorderWidth', 1],\n                ['columnHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['columnHeaderCellFont', '16px sans-serif'],\n                ['columnHeaderCellHeight', 25],\n                ['columnHeaderCellHorizontalAlignment', 'left'],\n                ['columnHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['columnHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['columnHeaderCellPaddingBottom', 5],\n                ['columnHeaderCellPaddingLeft', 5],\n                ['columnHeaderCellPaddingRight', 7],\n                ['columnHeaderCellPaddingTop', 5],\n                ['columnHeaderCellVerticalAlignment', 'center'],\n                ['columnHeaderOrderByArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['columnHeaderOrderByArrowBorderWidth', 1],\n                ['columnHeaderOrderByArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['columnHeaderOrderByArrowHeight', 8],\n                ['columnHeaderOrderByArrowMarginLeft', 0],\n                ['columnHeaderOrderByArrowMarginRight', 5],\n                ['columnHeaderOrderByArrowMarginTop', 6],\n                ['columnHeaderOrderByArrowWidth', 13],\n                ['contextFilterButtonBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterButtonBorderRadius', '3px'],\n                ['contextFilterButtonHTML', '&#x25BC;'],\n                ['contextFilterInputBackground', 'rgba(255,255,255,1)'],\n                ['contextFilterInputBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterInputBorderRadius', '0'],\n                ['contextFilterInputColor', 'rgba(0,0,0,1)'],\n                ['contextFilterInputFontFamily', 'sans-serif'],\n                ['contextFilterInputFontSize', '14px'],\n                ['contextFilterInvalidRegExpBackground', 'rgba(180, 6, 1, 1)'],\n                ['contextFilterInvalidRegExpColor', 'rgba(255, 255, 255, 1)'],\n                ['contextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuArrowDownHTML', '&#x25BC;'],\n                ['contextMenuArrowUpHTML', '&#x25B2;'],\n                ['contextMenuBackground', 'rgba(240, 240, 240, 1)'],\n                ['contextMenuBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextMenuBorderRadius', '3px'],\n                ['contextMenuChildArrowFontSize', '12px'],\n                ['contextMenuColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuFilterButtonFontFamily', 'sans-serif'],\n                ['contextMenuFilterButtonFontSize', '10px'],\n                ['contextMenuFilterInvalidExpresion', 'rgba(237, 155, 156, 1)'],\n                ['contextMenuFontFamily', 'sans-serif'],\n                ['contextMenuFontSize', '16px'],\n                ['contextMenuHoverBackground', 'rgba(182, 205, 250, 1)'],\n                ['contextMenuHoverColor', 'rgba(43, 48, 153, 1)'],\n                ['contextMenuItemBorderRadius', '3px'],\n                ['contextMenuItemMargin', '2px'],\n                ['contextMenuLabelDisplay', 'inline-block'],\n                ['contextMenuLabelMargin', '0 3px 0 0'],\n                ['contextMenuLabelMaxWidth', '700px'],\n                ['contextMenuLabelMinWidth', '75px'],\n                ['contextMenuMarginLeft', 3],\n                ['contextMenuMarginTop', -3],\n                ['contextMenuOpacity', '0.98'],\n                ['contextMenuPadding', '2px'],\n                ['contextMenuWindowMargin', 100],\n                ['contextMenuZIndex', 10000],\n                ['cornerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cornerCellBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['display', 'inline-block'],\n                ['editCellBackgroundColor', 'white'],\n                ['editCellBorder', 'solid 1px rgba(110, 168, 255, 1)'],\n                ['editCellBoxShadow', '0 2px 5px rgba(0,0,0,0.4)'],\n                ['editCellColor', 'black'],\n                ['editCellFontFamily', 'sans-serif'],\n                ['editCellFontSize', '16px'],\n                ['editCellPaddingLeft', 4],\n                ['editCellZIndex', 10000],\n                ['frozenMarkerHoverColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerHoverBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerActiveColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerActiveBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerColor', 'rgba(222, 222, 222, 1)'],\n                ['frozenMarkerBorderColor', 'rgba(168, 168, 168, 1)'],\n                ['frozenMarkerBorderWidth', 1],\n                ['frozenMarkerWidth', 2],\n                ['gridBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['gridBorderCollapse', 'collapse'],\n                ['gridBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['gridBorderWidth', 1],\n                ['height', 'auto'],\n                ['maxHeight', 'inherit'],\n                ['maxWidth', 'inherit'],\n                ['minColumnWidth', 45],\n                ['minHeight', 'inherit'],\n                ['minRowHeight', 24],\n                ['minWidth', 'inherit'],\n                ['mobileContextMenuMargin', 10],\n                ['mobileEditInputHeight', 30],\n                ['mobileEditFontFamily', 'sans-serif'],\n                ['mobileEditFontSize', '16px'],\n                ['moveOverlayBorderWidth', 1],\n                ['moveOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['moveOverlayBorderSegments', '12, 7'],\n                ['name', 'default'],\n                ['reorderMarkerBackgroundColor', 'rgba(0, 0, 0, 0.1)'],\n                ['reorderMarkerBorderColor', 'rgba(0, 0, 0, 0.2)'],\n                ['reorderMarkerBorderWidth', 1.25],\n                ['reorderMarkerIndexBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['reorderMarkerIndexBorderWidth', 2.75],\n                ['rowHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['rowHeaderCellBorderColor', 'rgba(200, 200, 200, 1)'],\n                ['rowHeaderCellBorderWidth', 1],\n                ['rowHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellFont', '16px sans-serif'],\n                ['rowHeaderCellHeight', 25],\n                ['rowHeaderCellHorizontalAlignment', 'left'],\n                ['rowHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['rowHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['rowHeaderCellPaddingBottom', 5],\n                ['rowHeaderCellPaddingLeft', 5],\n                ['rowHeaderCellPaddingRight', 5],\n                ['rowHeaderCellPaddingTop', 5],\n                ['rowHeaderCellSelectedBackgroundColor', 'rgba(217, 217, 217, 1)'],\n                ['rowHeaderCellSelectedColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellVerticalAlignment', 'center'],\n                ['rowHeaderCellWidth', 57],\n                ['scrollBarActiveColor', 'rgba(125, 125, 125, 1)'],\n                ['scrollBarBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarBorderWidth', 0.5],\n                ['scrollBarBoxBorderRadius', 4.125],\n                ['scrollBarBoxColor', 'rgba(192, 192, 192, 1)'],\n                ['scrollBarBoxMargin', 2],\n                ['scrollBarBoxMinSize', 15],\n                ['scrollBarBoxWidth', 8],\n                ['scrollBarCornerBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarCornerBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarWidth', 11],\n                ['selectionHandleBorderColor', 'rgba(255, 255, 255, 1)'],\n                ['selectionHandleBorderWidth', 1.5],\n                ['selectionHandleColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionHandleSize', 8],\n                ['selectionHandleType', 'square'],\n                ['selectionOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionOverlayBorderWidth', 1],\n                ['treeArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['treeArrowBorderWidth', 1],\n                ['treeArrowClickRadius', 5],\n                ['treeArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['treeArrowHeight', 8],\n                ['treeArrowMarginLeft', 0],\n                ['treeArrowMarginRight', 5],\n                ['treeArrowMarginTop', 6],\n                ['treeArrowWidth', 13],\n                ['treeGridHeight', 250],\n                ['width', 'auto']\n            ]\n        };\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, evil: true*/\n/*globals Reflect: false, HTMLElement: true, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n    __webpack_require__(2),\n    __webpack_require__(0),\n    __webpack_require__(3),\n    __webpack_require__(4),\n    __webpack_require__(5),\n    __webpack_require__(6),\n    __webpack_require__(7),\n    __webpack_require__(8),\n    __webpack_require__(9)\n], __WEBPACK_AMD_DEFINE_RESULT__ = (function context(component) {\n    'use strict';\n    component = component();\n    var modules = Array.prototype.slice.call(arguments);\n    function Grid(args) {\n        args = args || {};\n        var self = {};\n        self.isComponent = args.component === undefined;\n        self.isChildGrid = args.parentNode && /canvas-datagrid-(cell|tree)/.test(args.parentNode.nodeType);\n        if (self.isChildGrid) {\n            self.intf = {};\n        } else {\n            self.intf = self.isComponent ? eval('Reflect.construct(HTMLElement, [], new.target)')\n                : document.createElement('canvas');\n        }\n        self.args = args;\n        self.intf.args = args;\n        self.applyComponentStyle = component.applyComponentStyle;\n        self.createGrid = function grid(args) {\n            args.component = false;\n            return new Grid(args);\n        };\n        modules.forEach(function (module) {\n            module(self);\n        });\n        if (self.isChildGrid) {\n            self.shadowRoot = args.parentNode.shadowRoot;\n            self.parentNode = args.parentNode;\n        } else if (self.intf.createShadowRoot) {\n            self.shadowRoot = self.intf.attachShadow({mode: 'open'});\n            self.parentNode = self.shadowRoot;\n        } else {\n            self.parentNode = self.intf;\n        }\n        self.init();\n        return self.intf;\n    }\n    if (window.HTMLElement) {\n        Grid.prototype = Object.create(window.HTMLElement.prototype);\n    }\n    // export web component\n    if (window.customElements) {\n        Grid.observedAttributes = component.getObservableAttributes();\n        Grid.prototype.disconnectedCallback = component.disconnectedCallback;\n        Grid.prototype.attributeChangedCallback = component.attributeChangedCallback;\n        Grid.prototype.connectedCallback = component.connectedCallback;\n        Grid.prototype.adoptedCallback = component.adoptedCallback;\n        window.customElements.define('canvas-datagrid', Grid);\n    }\n    // export global\n    if (window && !window.canvasDatagrid && !window.require) {\n        window.canvasDatagrid = function (args) { return new Grid(args); };\n    }\n    // export amd loader\n    module.exports = function grid(args) {\n        args = args || {};\n        var i, tKeys = ['style', 'formatters', 'sorters', 'filters',\n                    'treeGridAttributes', 'cellGridAttributes', 'data', 'schema'];\n        if (window.customElements && document.body.createShadowRoot) {\n            i = document.createElement('canvas-datagrid');\n            Object.keys(args).forEach(function (argKey) {\n                // set data after everything else\n                if (argKey === 'data') { return; }\n                if (argKey === 'parentNode') {\n                    args.parentNode.appendChild(i);\n                    return;\n                }\n                // top level keys in args\n                if (tKeys.indexOf(argKey) !== -1) {\n                    tKeys.forEach(function (tKey) {\n                        if (args[tKey] === undefined || tKey !== argKey) { return; }\n                        if (['formatters', 'sorters', 'filters'].indexOf(argKey) !== -1) {\n                            if (typeof args[tKey] === 'object' && args[tKey] !== null) {\n                                Object.keys(args[tKey]).forEach(function (sKey) {\n                                    i[tKey][sKey] = args[tKey][sKey];\n                                });\n                            }\n                        } else {\n                            i[tKey] = args[tKey];\n                        }\n                    });\n                    return;\n                }\n                // all others are attribute level keys\n                i.attributes[argKey] = args[argKey];\n            });\n            if (args.data) {\n                i.data = args.data;\n            }\n            return i;\n        }\n        args.component = false;\n        i = new Grid(args);\n        if (args.parentNode && args.parentNode.appendChild) {\n            args.parentNode.appendChild(i);\n        }\n        return i;\n    };\n    return module.exports;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (defaults) {\n    'use strict';\n    return function () {\n        var typeMap, component = {};\n        function hyphenateProperty(prop, cust) {\n            var p = '';\n            Array.prototype.forEach.call(prop, function (char) {\n                if (char === char.toUpperCase()) {\n                    p += '-' + char.toLowerCase();\n                    return;\n                }\n                p += char;\n            });\n            return (cust ? '--cdg-' : '') + p;\n        }\n        function getDefaultItem(base, item) {\n            var i = {},\n                r;\n            defaults(i);\n            r = i.defaults[base].filter(function (i) {\n                return i[0].toLowerCase() === item.toLowerCase()\n                    || hyphenateProperty(i[0]) === item.toLowerCase()\n                    || hyphenateProperty(i[0], true) === item.toLowerCase();\n            })[0];\n            return r;\n        }\n        component.applyComponentStyle = function (supressChangeAndDrawEvents, intf) {\n            var cStyle = window.getComputedStyle(intf.tagName === 'CANVAS-DATAGRID' ? intf : intf.canvas, null),\n                defs = {};\n            intf.computedStyle = cStyle;\n            defaults(defs);\n            defs = defs.defaults.styles;\n            defs.forEach(function (def) {\n                var val;\n                val = cStyle.getPropertyValue(hyphenateProperty(def[0], true));\n                if (val === \"\") {\n                    val = cStyle.getPropertyValue(hyphenateProperty(def[0], false));\n                }\n                if (val !== \"\" && typeof val === 'string') {\n                    intf.setStyleProperty(def[0], typeMap[typeof def[1]](val\n                        .replace(/^\\s+/, '').replace(/\\s+$/, ''), def[1]));\n                }\n            });\n            requestAnimationFrame(function () { intf.resize(true); });\n            if (!supressChangeAndDrawEvents && intf.dispatchEvent) {\n                intf.dispatchEvent('stylechanged', intf.style);\n            }\n        };\n        typeMap = {\n            data: function (strData) {\n                try {\n                    return JSON.parse(strData);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid data.');\n                }\n            },\n            schema: function (strSchema) {\n                try {\n                    return JSON.parse(strSchema);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid schema attribute.');\n                }\n            },\n            number: function (strNum, def) {\n                var n = parseInt(strNum, 10);\n                return isNaN(n) ? def : n;\n            },\n            boolean: function (strBool) {\n                return (/true/i).test(strBool);\n            },\n            string: function (str) {\n                return str;\n            }\n        };\n        component.getObservableAttributes = function () {\n            var i = {}, attrs = ['data', 'schema', 'style', 'className', 'name'];\n            defaults(i);\n            i.defaults.attributes.forEach(function (attr) {\n                attrs.push(attr[0].toLowerCase());\n            });\n            return attrs;\n        };\n        component.disconnectedCallback = function () {\n            this.connected = false;\n        };\n        component.connectedCallback = function () {\n            var intf = this;\n            intf.connected = true;\n            component.observe(intf);\n            component.applyComponentStyle(true, intf);\n            intf.resize(true);\n        };\n        component.adoptedCallback = function () {\n            this.resize();\n        };\n        component.attributeChangedCallback = function (attrName, oldVal, newVal) {\n            var tfn, intf = this, def;\n            if (attrName === 'style') {\n                component.applyComponentStyle(false, intf);\n                return;\n            }\n            if (attrName === 'data') {\n                intf.args.data = typeMap.data(newVal);\n                return;\n            }\n            if (attrName === 'schema') {\n                intf.args.schema = typeMap.schema(newVal);\n                return;\n            }\n            if (attrName === 'name') {\n                intf.name = newVal;\n                return;\n            }\n            if (attrName === 'class' || attrName === 'className') {\n                return;\n            }\n            def = getDefaultItem('attributes', attrName);\n            if (def) {\n                tfn = typeMap[typeof def[1]];\n                intf.attributes[def[0]] = tfn(newVal);\n                return;\n            }\n            if (/^on/.test(attrName)) {\n                intf.addEventListener('on' + attrName, function (e) {\n                    eval(newVal);\n                });\n            }\n            return;\n        };\n        component.observe = function (intf) {\n            var observer;\n            if (!window.MutationObserver) { return; }\n            intf.applyComponentStyle = function () { component.applyComponentStyle(false, intf); intf.resize(); };\n            /**\n             * Applies the computed css styles to the grid.  In some browsers, changing directives in attached style sheets does not automatically update the styles in this component.  It is necessary to call this method to update in these cases.\n             * @memberof canvasDatagrid\n             * @name applyComponentStyle\n             * @method\n             */\n            observer = new window.MutationObserver(function (mutations) {\n                var checkInnerHTML, checkStyle;\n                Array.prototype.forEach.call(mutations, function (mutation) {\n                    if (mutation.attributeName === 'class'\n                            || mutation.attributeName === 'style') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.target.parentNode\n                            && mutation.target.parentNode.nodeName === 'STYLE') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.addedNodes.length > 0 || mutation.type === 'characterData') {\n                        checkInnerHTML = true;\n                    }\n                });\n                if (checkStyle) {\n                    intf.applyComponentStyle(false, intf);\n                }\n                if (checkInnerHTML) {\n                    intf.data = typeMap.data(intf.innerHTML);\n                }\n            });\n            observer.observe(intf, { characterData: true, childList: true, attributes: true, subtree: true });\n            Array.prototype.forEach.call(document.querySelectorAll('style'), function (el) {\n                observer.observe(el, { characterData: true, childList: true, attributes: true, subtree: true });\n            });\n        };\n        return component;\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals XMLSerializer: false, define: true, Blob: false, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        var perfCounters = [],\n            drawCount = 0,\n            perfWindowSize = 300,\n            entityCount = [],\n            scrollDebugCounters = [],\n            touchPPSCounters = [];\n        self.htmlImageCache = {};\n        // more heavyweight version than fillArray defined in intf.js\n        function fillArray(low, high, step, def) {\n            step = step || 1;\n            var i = [], x;\n            for (x = low; x <= high; x += step) {\n                i[x] = def === undefined ? x : (typeof def === 'function' ? def(x) : def);\n            }\n            return i;\n        }\n        function drawPerfLine(w, h, x, y, perfArr, arrIndex, max, color, useAbs) {\n            var i = w / perfArr.length,\n                r = h / max;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x, y + h);\n            perfArr.forEach(function (n) {\n                var val = (arrIndex === undefined ? n : n[arrIndex]),\n                    cx,\n                    cy;\n                if (useAbs) {\n                    val = Math.abs(val);\n                }\n                cx = x + i;\n                cy = y + h - (val * r);\n                self.ctx.lineTo(cx, cy);\n                x += i;\n            });\n            self.ctx.moveTo(x + w, y + h);\n            self.ctx.strokeStyle = color;\n            self.ctx.stroke();\n        }\n        function drawOnAllImagesLoaded() {\n            var loaded = true;\n            Object.keys(self.htmlImageCache).forEach(function (html) {\n                if (!self.htmlImageCache[html].complete) {\n                    loaded = false;\n                }\n            });\n            if (loaded) {\n                self.draw();\n            }\n        }\n        function drawHtml(cell) {\n            var img,\n                v = cell.innerHTML || cell.formattedValue,\n                x = cell.x + self.canvasOffsetLeft,\n                y = cell.y + self.canvasOffsetTop;\n            if (self.htmlImageCache[v]) {\n                img = self.htmlImageCache[v];\n                if (img.height !== cell.height || img.width !== cell.width) {\n                    // height and width of the cell has changed, invalidate cache\n                    self.htmlImageCache[v] = undefined;\n                } else {\n                    if (!img.complete) {\n                        return;\n                    }\n                    return self.ctx.drawImage(img, x, y);\n                }\n            }\n            img = new Image(cell.width, cell.height);\n            self.htmlImageCache[v] = img;\n            img.onload = function () {\n                self.ctx.drawImage(img, x, y);\n                drawOnAllImagesLoaded();\n            };\n            img.src = 'data:image/svg+xml;base64,' + btoa(\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + cell.width + '\" height=\"' + cell.height + '\">\\n' +\n                    '<foreignObject class=\"node\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\\n' +\n                    '<body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;padding:0;\">\\n' +\n                    v + '\\n' +\n                    '</body>' +\n                    '</foreignObject>\\n' +\n                    '</svg>\\n'\n            );\n        }\n        function drawOrderByArrow(x, y) {\n            var mt = self.style.columnHeaderOrderByArrowMarginTop * self.scale,\n                ml = self.style.columnHeaderOrderByArrowMarginLeft * self.scale,\n                mr = self.style.columnHeaderOrderByArrowMarginRight * self.scale,\n                aw = self.style.columnHeaderOrderByArrowWidth * self.scale,\n                ah = self.style.columnHeaderOrderByArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.columnHeaderOrderByArrowColor;\n            self.ctx.strokeStyle = self.style.columnHeaderOrderByArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.orderDirection === 'asc') {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y + ah);\n                self.ctx.lineTo(x + aw, y + ah);\n                self.ctx.lineTo(x + (aw * 0.5), y);\n                self.ctx.lineTo(x, y + ah);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function drawTreeArrow(cell, x, y) {\n            var mt = self.style.treeArrowMarginTop * self.scale,\n                mr = self.style.treeArrowMarginRight * self.scale,\n                ml = self.style.treeArrowMarginLeft * self.scale,\n                aw = self.style.treeArrowWidth * self.scale,\n                ah = self.style.treeArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.treeArrowColor;\n            self.ctx.strokeStyle = self.style.treeArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.openChildren[cell.data[self.uniqueId]]) {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y);\n                self.ctx.lineTo(x + ah, y + (aw * 0.5));\n                self.ctx.lineTo(x, y + aw);\n                self.ctx.lineTo(x, y);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function radiusRect(x, y, w, h, radius) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            var r = x + w, b = y + h;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x + radius, y);\n            self.ctx.lineTo(r - radius, y);\n            self.ctx.quadraticCurveTo(r, y, r, y + radius);\n            self.ctx.lineTo(r, y + h - radius);\n            self.ctx.quadraticCurveTo(r, b, r - radius, b);\n            self.ctx.lineTo(x + radius, b);\n            self.ctx.quadraticCurveTo(x, b, x, b - radius);\n            self.ctx.lineTo(x, y + radius);\n            self.ctx.quadraticCurveTo(x, y, x + radius, y);\n        }\n        function fillRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillRect(x, y, w, h);\n        }\n        function strokeRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.strokeRect(x, y, w, h);\n        }\n        function fillText(text, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillText(text, x, y);\n        }\n        function fillCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.fill();\n        }\n        function strokeCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.stroke();\n        }\n        function clipFrozenArea(mode) {\n            // 0 both, 1 rows, 2 cols\n            // self.lastFrozenColumnPixel;\n            // self.lastFrozenRowPixel;\n            self.ctx.beginPath();\n            if (mode === 0) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, self.lastFrozenRowPixel);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 1) {\n                self.ctx.moveTo(0, self.lastFrozenRowPixel);\n                self.ctx.lineTo(0, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 2) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, 0);\n                self.ctx.lineTo(self.width, 0);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n            }\n            self.ctx.clip();\n        }\n        function fillHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return fillCircle(x, y, r * 0.5);\n            }\n            fillRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function strokeHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return strokeCircle(x, y, r * 0.5);\n            }\n            strokeRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function addselectionHandle(c, pos) {\n            var hw = self.style.selectionHandleSize,\n                p = {\n                    tr: function () {\n                        fillHandle(c.x + c.width, c.y, hw);\n                        strokeHandle(c.x + c.width, c.y, hw);\n                    },\n                    br: function () {\n                        fillHandle(c.x + c.width, c.y + c.height, hw);\n                        strokeHandle(c.x + c.width, c.y + c.height, hw);\n                    },\n                    tl: function () {\n                        fillHandle(c.x, c.y, hw);\n                        strokeHandle(c.x, c.y, hw);\n                    },\n                    bl: function () {\n                        fillHandle(c.x, c.y + c.height, hw);\n                        strokeHandle(c.x, c.y + c.height, hw);\n                    }\n                };\n            p[pos]();\n        }\n        function addBorderLine(c, pos) {\n            self.ctx.beginPath();\n            var p = {\n                t: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                },\n                r: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                b: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                l: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                }\n            };\n            p[pos]();\n            self.ctx.stroke();\n        }\n        function addEllipsis(text, width) {\n            var c, w = 0;\n            if (self.ellipsisCache[text] && self.ellipsisCache[text][width]) {\n                return self.ellipsisCache[text][width];\n            }\n            //TODO Add ellipsis back when there is a fast way to do it\n            w = self.ctx.measureText(text).width;\n            self.ellipsisCache[text] = self.ellipsisCache[text] || {};\n            c = {value: text, width: w};\n            self.ellipsisCache[text][width] = c;\n            return c;\n        }\n        function drawText(cell) {\n            var paddingLeft = self.style[cell.style + 'PaddingLeft'] * self.scale,\n                paddingTop = self.style[cell.style + 'PaddingTop'] * self.scale,\n                paddingRight = self.style[cell.style + 'PaddingRight'] * self.scale,\n                paddingBottom = self.style[cell.style + 'PaddingBottom'] * self.scale,\n                vPos = paddingTop + cell.height - (cell.height * 0.5),\n                hPos = paddingLeft + cell.treeArrowWidth + cell.orderByArrowWidth;\n            cell.text = addEllipsis(cell.formattedValue, cell.width - paddingRight - paddingLeft);\n            cell.text.height = cell.fontHeight;\n            if (cell.horizontalAlignment === 'right') {\n                hPos = cell.width - cell.text.width - paddingRight;\n            } else if (cell.horizontalAlignment === 'center') {\n                hPos = (cell.width / 2) - (cell.text.width / 2);\n            }\n            if (cell.verticalAlignment === 'top') {\n                vPos = paddingTop + cell.text.height;\n            } else if (cell.verticalAlignment === 'bottom') {\n                vPos = cell.height - paddingBottom - cell.text.height;\n            }\n            cell.text.x = cell.x + hPos;\n            cell.text.y = cell.y + vPos;\n            fillText(cell.text.value, cell.text.x, cell.text.y);\n        }\n        function getFrozenColumnsWidth() {\n            var w = 0,\n                s = self.getVisibleSchema(),\n                x = 0,\n                n = Math.min(self.frozenColumn, s.length),\n                column;\n            while (x < n) {\n                column = s[self.orders.columns[x]];\n                w += ((self.sizes.columns[column[self.uniqueId]] || column.width || self.style.cellWidth) * self.scale);\n                x += 1;\n            }\n            return w;\n        }\n        /**\n         * Redraws the grid. No matter what the change, this is the only method required to refresh everything.\n         * @memberof canvasDatagrid\n         * @name draw\n         * @method\n         */\n         // r = literal row index\n         // rd = row data array\n         // i = user order index\n         // o = literal data index\n         // y = y drawing cursor\n         // x = x drawing cursor\n         // s = visible schema array\n         // cx = current x drawing cursor sub calculation var\n         // cy = current y drawing cursor sub calculation var\n         // a = static cell (like corner cell)\n         // p = perf counter\n         // l = data length\n         // u = current cell\n         // h = current height\n         // w = current width\n        self.draw = function (internal) {\n            if (self.dispatchEvent('beforedraw', {})) { return; }\n            if (!self.isChildGrid && (!self.height || !self.width)) {\n                return;\n            }\n            if (self.isChildGrid && internal) {\n                requestAnimationFrame(self.parentGrid.draw);\n                return;\n            }\n            if (self.intf.visible === false) {\n                return;\n            }\n            // initial values\n            var checkScrollHeight, rowHeaderCell, p, cx, cy, treeGrid, rowOpen,\n                rowHeight, cornerCell, y, x, c, h, w, s, r, rd, aCell,\n                data = (self.data || []),\n                bc = self.style.gridBorderCollapse === 'collapse',\n                selectionBorders = [],\n                moveBorders = [],\n                selectionHandles = [],\n                rowHeaders = [],\n                frozenColumnWidths = getFrozenColumnsWidth(),\n                l = data.length,\n                u = self.currentCell || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                cellHeight = self.style.cellHeight;\n            drawCount += 1;\n            p = performance.now();\n            self.visibleRowHeights = [];\n            // if data length has changed, there is no way to know\n            if (data.length > self.orders.rows.length) {\n                self.createRowOrders();\n            }\n            function drawScrollBars() {\n                var drawCorner,\n                    en = self.scrollBox.entities,\n                    m = (self.style.scrollBarBoxMargin * 2);\n                self.ctx.strokeStyle = self.style.scrollBarBorderColor;\n                self.ctx.lineWidth = self.style.scrollBarBorderWidth;\n                en.horizontalBox.x = rowHeaderCellWidth + self.style.scrollBarBoxMargin\n                    + ((en.horizontalBar.width - self.scrollBox.scrollBoxWidth)\n                        * (self.scrollBox.scrollLeft / self.scrollBox.scrollWidth));\n                en.verticalBox.y = columnHeaderCellHeight + self.style.scrollBarBoxMargin\n                    + ((en.verticalBar.height - self.scrollBox.scrollBoxHeight)\n                        * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight));\n                if (self.scrollBox.horizontalBarVisible) {\n                    self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                    fillRect(en.horizontalBar.x, en.horizontalBar.y, en.horizontalBar.width + m, en.horizontalBar.height);\n                    strokeRect(en.horizontalBar.x, en.horizontalBar.y, en.horizontalBar.width + m, en.horizontalBar.height);\n                    self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                    if (/horizontal/.test(u.context)) {\n                        self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                    }\n                    radiusRect(en.horizontalBox.x, en.horizontalBox.y,\n                        en.horizontalBox.width, en.horizontalBox.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                    drawCorner = true;\n                    self.visibleCells.unshift(en.horizontalBar);\n                    self.visibleCells.unshift(en.horizontalBox);\n                }\n                if (self.scrollBox.verticalBarVisible) {\n                    self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                    fillRect(en.verticalBar.x, en.verticalBar.y, en.verticalBar.width, en.verticalBar.height + m);\n                    strokeRect(en.verticalBar.x, en.verticalBar.y, en.verticalBar.width, en.verticalBar.height + m);\n                    self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                    if (/vertical/.test(u.context)) {\n                        self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                    }\n                    radiusRect(en.verticalBox.x, en.verticalBox.y, en.verticalBox.width,\n                        en.verticalBox.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                    drawCorner = true;\n                    self.visibleCells.unshift(en.verticalBar);\n                    self.visibleCells.unshift(en.verticalBox);\n                }\n                if (drawCorner) {\n                    //corner\n                    self.ctx.strokeStyle = self.style.scrollBarCornerBorderColor;\n                    self.ctx.fillStyle = self.style.scrollBarCornerBackgroundColor;\n                    radiusRect(en.corner.x, en.corner.y, en.corner.width, en.corner.height, 0);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                    self.visibleCells.unshift(en.corner);\n                }\n            }\n            function createHandlesOverlayArray(cell) {\n                if (self.attributes.allowMovingSelection || self.mobile) {\n                    if (cell.selectionBorderTop && cell.selectionBorderRight && self.mobile) {\n                        selectionHandles.push([cell, 'tr']);\n                        cell.selectionHandle = 'tr';\n                    }\n                    if (cell.selectionBorderTop && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'tl']);\n                        cell.selectionHandle = 'tl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'bl']);\n                        cell.selectionHandle = 'bl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderRight\n                            && (self.attributes.selectionHandleBehavior !== 'none' || self.mobile)) {\n                        selectionHandles.push([cell, 'br']);\n                        cell.selectionHandle = 'br';\n                    }\n                }\n            }\n            function createBorderOverlayArray(cell, drawArray, propPrefix, offsetPoint) {\n                offsetPoint = offsetPoint || {x: 0, y: 0};\n                cell.selectionBorder = '';\n                if (!cell.isRowHeader\n                        && self.selections[cell.rowIndex + -offsetPoint.y]\n                        && self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) !== -1) {\n                    if ((!self.selections[cell.rowIndex - 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex - 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1\n                            || cell.rowIndex === 0)\n                            && !cell.isHeader) {\n                        drawArray.push([cell, 't']);\n                        cell[propPrefix + 'BorderTop'] = true;\n                        cell[propPrefix + 'Border'] += 't';\n                    }\n                    if (!self.selections[cell.rowIndex + 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex + 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'b']);\n                        cell[propPrefix + 'BorderBottom'] = true;\n                        cell[propPrefix + 'Border'] += 'b';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === 0\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex - 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'l']);\n                        cell[propPrefix + 'BorderLeft'] = true;\n                        cell[propPrefix + 'Border'] += 'l';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === s.length\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'r']);\n                        cell[propPrefix + 'BorderRight'] = true;\n                        cell[propPrefix + 'Border'] += 'r';\n                    }\n                }\n            }\n            function drawCell(d, rowOrderIndex, rowIndex) {\n                return function drawEach(header, headerIndex, columnOrderIndex) {\n                    var cellStyle = header.style || 'cell',\n                        cellGridAttributes,\n                        cell,\n                        isHeader = /HeaderCell/.test(cellStyle),\n                        isCorner = /cornerCell/.test(cellStyle),\n                        isRowHeader = 'rowHeaderCell' === cellStyle,\n                        isColumnHeader = 'columnHeaderCell' === cellStyle,\n                        selected = self.selections[rowOrderIndex] && self.selections[rowOrderIndex].indexOf(columnOrderIndex) !== -1,\n                        hovered = self.hovers[d[self.uniqueId]] && self.hovers[d[self.uniqueId]].indexOf(columnOrderIndex) !== -1,\n                        active = self.activeCell.rowIndex === rowOrderIndex && self.activeCell.columnIndex === columnOrderIndex,\n                        isGrid = typeof d[header.name] === 'object' && d[header.name] !== null && d[header.name] !== undefined,\n                        activeHeader = (self.orders.rows[self.activeCell.rowIndex] === rowOrderIndex\n                                || self.orders.columns[self.activeCell.columnIndex] === columnOrderIndex)\n                            && (columnOrderIndex === -1 || rowOrderIndex === -1)\n                            ? (isRowHeader ? 'activeRowHeaderCell' : 'activeColumnHeaderCell') : false,\n                        val,\n                        f = self.formatters[header.type || 'string'],\n                        orderByArrowSize = 0,\n                        treeArrowSize = 0,\n                        cellWidth = self.sizes.columns[isRowHeader ? 'cornerCell' : header[self.uniqueId]] || header.width,\n                        ev = {\n                            value: d[header.name],\n                            row: d,\n                            header: header\n                        };\n                    if (cellStyle === 'headerCellCap') {\n                        cellWidth = w - x;\n                    }\n                    // if no data or schema are defined, a width is provided to the stub column\n                    if (cellWidth === undefined) {\n                        cellWidth = self.style.cellWidth;\n                    }\n                    cellWidth = cellWidth * self.scale;\n                    if (x + cellWidth + self.style.cellBorderWidth < 0) {\n                        x += cellWidth + self.style.cellBorderWidth;\n                    }\n                    if (active && cellStyle !== 'cornerCell') {\n                        cellStyle = 'activeCell';\n                    }\n                    if (self.visibleRows.indexOf(rowIndex) === -1 && !isHeader) {\n                        self.visibleRows.push(rowIndex);\n                    }\n                    val = self.dispatchEvent('formatcellvalue', ev);\n                    cx = x;\n                    cy = y;\n                    if (cellStyle === 'cornerCell') {\n                        cx = 0;\n                        cy = 0;\n                    } else if (isRowHeader) {\n                        cx = 0;\n                    } else if (isHeader) {\n                        cy = 0;\n                    }\n                    cell = {\n                        type: isGrid ? 'canvas-datagrid-cell' : header.type,\n                        style: cellStyle,\n                        nodeType: 'canvas-datagrid-cell',\n                        x: cx,\n                        y: cy,\n                        horizontalAlignment: self.style[cellStyle + 'HorizontalAlignment'],\n                        verticalAlignment: self.style[cellStyle + 'VerticalAlignment'],\n                        offsetTop: self.canvasOffsetTop + cy,\n                        offsetLeft: self.canvasOffsetLeft + cx,\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        active: active || activeHeader,\n                        hovered: hovered,\n                        selected: selected,\n                        width: cellWidth,\n                        height: cellHeight,\n                        offsetWidth: cellWidth,\n                        offsetHeight: cellHeight,\n                        parentNode: self.intf.parentNode,\n                        offsetParent: self.intf.parentNode,\n                        data: d,\n                        isCorner: isCorner,\n                        isHeader: isHeader,\n                        isColumnHeader: isColumnHeader,\n                        isHeaderCellCap: !!header.isHeaderCellCap,\n                        isRowHeader: isRowHeader,\n                        rowOpen: rowOpen,\n                        header: header,\n                        columnIndex: columnOrderIndex,\n                        rowIndex: rowOrderIndex,\n                        sortColumnIndex: headerIndex,\n                        sortRowIndex: rowIndex,\n                        isGrid: isGrid,\n                        isNormal: !isGrid && !isCorner && !isHeader,\n                        gridId: (self.attributes.name || '') + d[self.uniqueId] + ':' + header[self.uniqueId],\n                        parentGrid: self.intf,\n                        innerHTML: '',\n                        activeHeader: activeHeader,\n                        value: isHeader && !isRowHeader ? (header.title || header.name) : d[header.name]\n                    };\n                    ev.cell = cell;\n                    cell.userHeight = cell.isHeader ? self.sizes.rows[-1] : rowHeight;\n                    cell.userWidth = cell.isHeader ? self.sizes.columns.cornerCell : self.sizes.columns[header[self.uniqueId]];\n                    cell[self.uniqueId] = d[self.uniqueId];\n                    self.visibleCells.unshift(cell);\n                    if (self.dispatchEvent('beforerendercell', ev)) { return; }\n                    self.ctx.fillStyle = self.style[cellStyle + 'BackgroundColor'];\n                    self.ctx.strokeStyle = self.style[cellStyle + 'BorderColor'];\n                    self.ctx.lineWidth = self.style[cellStyle + 'BorderWidth'];\n                    if (hovered) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'HoverBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'HoverBorderColor'];\n                    }\n                    if (selected) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'SelectedBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'SelectedBorderColor'];\n                    }\n                    if (activeHeader) {\n                        self.ctx.fillStyle = self.style[activeHeader + 'BackgroundColor'];\n                    }\n                    self.dispatchEvent('rendercell', ev);\n                    if (cell.isGrid) {\n                        if (cell.height !== rowHeight) {\n                            cell.height = rowHeight || self.style.cellHeightWithChildGrid;\n                            checkScrollHeight = true;\n                        }\n                        cell.width = self.sizes.columns[header[self.uniqueId]] || self.style.cellWidthWithChildGrid;\n                    }\n                    if (rowOpen && !cell.isRowHeader) {\n                        cell.height = self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight;\n                    }\n                    if (!cell.isGrid) {\n                        fillRect(cx, cy, cell.width, cell.height);\n                        strokeRect(cx, cy, cell.width, cell.height);\n                    }\n                    self.ctx.save();\n                    radiusRect(cell.x, cell.y, cell.width, cell.height, 0);\n                    self.ctx.clip();\n                    self.dispatchEvent('afterrendercell', ev);\n                    if (cell.height !== cellHeight && !(rowOpen && !cell.isRowHeader)) {\n                        self.sizes.rows[isHeader ? -1 : d[self.uniqueId]] = cell.height;\n                        checkScrollHeight = true;\n                    }\n                    if (cell.width !== cellWidth) {\n                        self.sizes.columns[header[self.uniqueId]] = cell.width;\n                        checkScrollHeight = true;\n                    }\n                    if (isRowHeader && self.attributes.tree) {\n                        if (!self.dispatchEvent('rendertreearrow', ev)) {\n                            treeArrowSize = drawTreeArrow(cell, self.style[cellStyle + 'PaddingLeft'], cy, 0);\n                        }\n                    }\n                    if ((self.attributes.showRowNumbers && isRowHeader)\n                            || !isRowHeader) {\n                        if (cell.isGrid && !self.dispatchEvent('beforerendercellgrid', ev)) {\n                            if (!self.childGrids[cell.gridId]) {\n                                // HACK: this only allows setting of the child grids styles if data is set _after_\n                                // this is less than desirable.  An interface needs to be made to effect the\n                                // style of all cell grids.  One for individual grids already exists.\n                                cellGridAttributes = self.cellGridAttributes;\n                                cellGridAttributes.name = self.attributes.saveAppearance ? cell.gridId : undefined;\n                                cellGridAttributes.component = false;\n                                cellGridAttributes.parentNode = cell;\n                                cellGridAttributes.data = d[header.name];\n                                ev.cellGridAttributes = cellGridAttributes;\n                                if (self.dispatchEvent('beforecreatecellgrid', ev)) { return; }\n                                self.childGrids[cell.gridId] = self.createGrid(cellGridAttributes);\n                                self.sizes.rows[rd[self.uniqueId]]\n                                    = self.sizes.rows[rd[self.uniqueId]] || self.style.cellGridHeight;\n                                checkScrollHeight = true;\n                            }\n                            cell.grid = self.childGrids[cell.gridId];\n                            cell.grid.parentNode = cell;\n                            cell.grid.visible = true;\n                            cell.grid.draw();\n                            self.dispatchEvent('rendercellgrid', ev);\n                        } else if (!cell.isGrid) {\n                            if (self.childGrids[cell.gridId]) {\n                                self.childGrids[cell.gridId].parentNode.offsetHeight = 0;\n                            }\n                            if (isHeader && self.orderBy === header.name) {\n                                if (!self.dispatchEvent('renderorderbyarrow', ev)) {\n                                    orderByArrowSize = drawOrderByArrow(cx + self.style[cellStyle + 'PaddingLeft'], 0);\n                                }\n                            }\n                            self.ctx.fillStyle = self.style[cellStyle + 'Color'];\n                            if (hovered) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'HoverColor'];\n                            }\n                            if (selected) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'SelectedColor'];\n                            }\n                            if (activeHeader) {\n                                self.ctx.fillStyle = self.style[activeHeader + 'Color'];\n                            }\n                            self.ctx.font = (self.style[cellStyle + 'FontHeight'] * self.scale) + 'px ' + self.style[cellStyle + 'FontName'];\n                            cell.fontHeight = (self.style[cellStyle + 'FontHeight'] * self.scale);\n                            cell.treeArrowWidth = treeArrowSize;\n                            cell.orderByArrowWidth = orderByArrowSize;\n                            val = val !== undefined ? val : f\n                                ? f(ev) : '';\n                            if (val === undefined && !f) {\n                                val = '';\n                                console.warn('canvas-datagrid: Unknown format '\n                                    + header.type + ' add a cellFormater');\n                            }\n                            cell.formattedValue = ((val !== undefined && val !== null) ? val : '').toString();\n                            if (self.columnFilters && self.columnFilters[val] !== undefined && isHeader) {\n                                cell.formattedValue = self.attributes.filterTextPrefix + val;\n                            }\n                            if (!self.dispatchEvent('rendertext', ev)) {\n                                if (cell.innerHTML || header.type === 'html') {\n                                    drawHtml(cell);\n                                } else {\n                                    drawText(cell);\n                                }\n                            }\n                        }\n                    }\n                    if (active) {\n                        aCell = cell;\n                    }\n                    createBorderOverlayArray(cell, selectionBorders, 'selection');\n                    // createBorderOverlayArray calculates data for createHandlesOverlayArray so it must go 2nd\n                    createHandlesOverlayArray(cell);\n                    if (self.movingSelection) {\n                        createBorderOverlayArray(cell, moveBorders, 'move', self.moveOffset);\n                    }\n                    self.ctx.restore();\n                    x += cell.width + (bc ? 0 : self.style.cellBorderWidth);\n                    return cell.width;\n                };\n            }\n            function drawRowHeader(rowData, index, rowOrderIndex) {\n                var a;\n                if (self.attributes.showRowHeaders) {\n                    x = 0;\n                    rowHeaderCell = {'rowHeaderCell': index + 1 };\n                    rowHeaderCell[self.uniqueId] = rowData[self.uniqueId];\n                    a = {\n                        name: 'rowHeaderCell',\n                        width: self.style.rowHeaderCellWidth,\n                        style: 'rowHeaderCell',\n                        type: 'string',\n                        data: rowData[self.uniqueId],\n                        index: -1\n                    };\n                    a[self.uniqueId] = rowData[self.uniqueId];\n                    rowOpen = self.openChildren[rowData[self.uniqueId]];\n                    drawCell(rowHeaderCell, index, rowOrderIndex)(a, -1, -1);\n                }\n            }\n            function drawHeaders() {\n                var d, g = s.length, i, o, columnHeaderCell, header, nonFrozenHeaderWidth;\n                function drawHeaderColumnRange(start, end) {\n                    end = Math.min(end, g);\n                    for (o = start; o < end; o += 1) {\n                        i = self.orders.columns[o];\n                        header = s[i];\n                        d = {\n                            title: header.title,\n                            name: header.name,\n                            width: header.width || self.style.cellWidth,\n                            style: 'columnHeaderCell',\n                            type: 'string',\n                            index: o,\n                            order: i\n                        };\n                        columnHeaderCell = {'columnHeaderCell': header.title || header.name};\n                        columnHeaderCell[self.uniqueId] = 'h' + header[self.uniqueId];\n                        d[self.uniqueId] = header[self.uniqueId];\n                        x += drawCell(columnHeaderCell, -1, -1)(d, o, i);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                }\n                rowHeaders.forEach(function (rArgs, rhIndex) {\n                    y = rArgs[3];\n                    cellHeight = rArgs[4];\n                    if (rhIndex === self.frozenRow) {\n                        self.ctx.save();\n                        radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                        self.ctx.clip();\n                    }\n                    drawRowHeader(rArgs[0], rArgs[1], rArgs[2]);\n                });\n                self.ctx.restore();\n                if (self.attributes.showColumnHeaders) {\n                    x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    if (self.attributes.allowFreezingColumns) {\n                        x += frozenColumnWidths;\n                    }\n                    y = 0;\n                    // cell height might have changed during drawing\n                    cellHeight = self.getColumnHeaderCellHeight();\n                    drawHeaderColumnRange(self.scrollIndexLeft + self.frozenColumn, g);\n                    nonFrozenHeaderWidth = x;\n                    x = self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    drawHeaderColumnRange(0, self.frozenColumn);\n                    // fill in the space right of the headers\n                    x = nonFrozenHeaderWidth;\n                    if (x < w) {\n                        c = {\n                            name: '',\n                            width: self.style.scrollBarWidth,\n                            style: 'headerCellCap',\n                            isHeaderCell: true,\n                            isHeaderCellCap: true,\n                            type: 'string',\n                            index: s.length\n                        };\n                        c[self.uniqueId] = 'columnHeaderCell';\n                        drawCell({endCap: ''}, -1, -1)(c, -1, -1);\n                    }\n                    // fill in the space right of the headers\n                    if (self.attributes.showRowHeaders) {\n                        cornerCell = {'cornerCell': '' };\n                        cornerCell[self.uniqueId] = 'cornerCell';\n                        x = 0;\n                        c = {\n                            name: 'cornerCell',\n                            width: self.style.rowHeaderCellWidth,\n                            style: 'cornerCell',\n                            type: 'string',\n                            index: -1\n                        };\n                        c[self.uniqueId] = 'cornerCell';\n                        drawCell(cornerCell, -1, -1)(c, -1, -1);\n                    }\n                }\n            }\n            function drawRow(r, d) {\n                var i, treeHeight, rowSansTreeHeight, o, g = s.length;\n                if (y - (cellHeight * 2) > h) {\n                    return false;\n                }\n                rd = data[r];\n                rowOpen = self.openChildren[rd[self.uniqueId]];\n                rowSansTreeHeight = (self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight) * self.scale;\n                treeHeight = (rowOpen ? self.sizes.trees[rd[self.uniqueId]] : 0) * self.scale;\n                rowHeight = (rowSansTreeHeight + treeHeight);\n                if (y < -rowHeight) {\n                    return false;\n                }\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                cellHeight = rowHeight;\n                if (self.attributes.allowFreezingColumns) {\n                    x += frozenColumnWidths;\n                }\n                //draw normal columns\n                for (o = (self.scrollIndexLeft + self.frozenColumn); o < g; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        self.scrollIndexRight = o;\n                        self.scrollPixelRight = x;\n                        break;\n                    }\n                }\n                //draw frozen columns\n                x = 0;\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                for (o = 0; o < self.frozenColumn; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        break;\n                    }\n                }\n                self.lastFrozenColumnPixel = x;\n                // cell height might have changed during drawing\n                cellHeight = rowHeight;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                // don't draw a tree for the new row\n                treeGrid = self.childGrids[rd[self.uniqueId]];\n                if (r !== data.length && rowOpen) {\n                    treeGrid.visible = true;\n                    treeGrid.parentNode = {\n                        offsetTop: y + rowSansTreeHeight + self.canvasOffsetTop,\n                        offsetLeft: rowHeaderCellWidth - 1 + self.canvasOffsetLeft,\n                        offsetHeight: treeHeight,\n                        offsetWidth: self.width - rowHeaderCellWidth - self.style.scrollBarWidth - 1,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: self.style,\n                        nodeType: 'canvas-datagrid-tree',\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        rowIndex: r\n                    };\n                    self.visibleCells.unshift({\n                        rowIndex: r,\n                        columnIndex: 0,\n                        y: treeGrid.parentNode.offsetTop,\n                        x: treeGrid.parentNode.offsetLeft,\n                        height: treeGrid.height,\n                        width: treeGrid.width,\n                        style: 'tree-grid',\n                        type: treeGrid.parentNode.nodeType\n                    });\n                    treeGrid.draw();\n                } else if (treeGrid) {\n                    treeGrid.parentNode.offsetHeight = 0;\n                    delete self.sizes.trees[rd[self.uniqueId]];\n                }\n                rowHeaders.push([rd, r, d, y, rowHeight]);\n                self.visibleRowHeights[r] = rowHeight;\n                y += cellHeight + (bc ? 0 : self.style.cellBorderWidth);\n                return true;\n            }\n            function initDraw() {\n                self.visibleRows = [];\n                s = self.getVisibleSchema();\n                self.visibleCells = [];\n                self.canvasOffsetTop = self.isChildGrid ? self.parentNode.offsetTop : 0;\n                self.canvasOffsetLeft = self.isChildGrid ? self.parentNode.offsetLeft : 0;\n                h = self.height;\n                w = self.width;\n            }\n            function drawBackground() {\n                radiusRect(0, 0, w, h, 0);\n                self.ctx.clip();\n                self.ctx.fillStyle = self.style.gridBackgroundColor;\n                fillRect(0, 0, w, h);\n            }\n            function drawFrozenRows() {\n                var n, ln = Math.min(data.length, self.frozenRow);\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                y = columnHeaderCellHeight;\n                for (r = 0; r < ln; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.allowFreezingRows) {\n                    // HACK great, another stupid magic number.\n                    // Background will appear as a 0.5px artifact behind the row freeze bar without this hack\n                    y += self.style.frozenMarkerBorderWidth + self.style.frozenMarkerWidth - 0.4999999999;\n                }\n                self.lastFrozenRowPixel = y;\n            }\n            function drawRows() {\n                self.ctx.save();\n                if (self.frozenRow > 0) {\n                    radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                    self.ctx.clip();\n                }\n                var o, n, i, g = s.length;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                if (!self.attributes.snapToRow) {\n                    y += -self.scrollBox.scrollTop + self.scrollPixelTop + self.style.cellBorderWidth;\n                }\n                for (r = self.frozenRow + self.scrollIndexTop; r < l; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        self.scrollIndexBottom = r;\n                        self.scrollPixelBottom = y;\n                        break;\n                    }\n                }\n                if (self.attributes.showNewRow) {\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    rowHeight = cellHeight = self.style.cellHeight;\n                    rowOpen = false;\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        x += drawCell(self.newRow, data.length, data.length)(s[i], i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    rowHeaders.push([self.newRow, data.length, data.length, y, rowHeight]);\n                }\n                self.ctx.restore();\n            }\n            function drawMoveMarkers() {\n                if (!self.movingSelection) { return; }\n                self.ctx.lineWidth = self.style.moveOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.moveOverlayBorderColor;\n                self.ctx.setLineDash(self.style.moveOverlayBorderSegments);\n                moveBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n                self.ctx.setLineDash([]);\n            }\n            function drawReorderMarkers() {\n                if (!self.reorderObject) { return; }\n                var b = {\n                        height: self.reorderObject.height,\n                        width: self.reorderObject.width,\n                        x: self.reorderObject.x + self.reorderObject.dragOffset.x,\n                        y: self.reorderObject.y + self.reorderObject.dragOffset.y\n                    },\n                    m = {\n                        width: w,\n                        height: h,\n                        x: 0,\n                        y: 0\n                    };\n                self.ctx.fillStyle = self.style.reorderMarkerBackgroundColor;\n                self.ctx.lineWidth = self.style.reorderMarkerBorderWidth;\n                self.ctx.strokeStyle = self.style.reorderMarkerBorderColor;\n                if (self.dragMode === 'row-reorder') {\n                    b.width = w;\n                    b.x = 0;\n                    m.width = w;\n                    m.height = self.currentCell.height;\n                    m.y = self.currentCell.y;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.rowIndex !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex > -1\n                            && self.currentCell.rowIndex < l) {\n                        addBorderLine(m, self.reorderTarget.sortRowIndex > self.reorderObject.sortRowIndex ? 'b' : 't');\n                    }\n                } else if (self.dragMode === 'column-reorder' && self.reorderObject) {\n                    b.height = h;\n                    b.y = 0;\n                    m.height = h;\n                    m.width = self.currentCell.width;\n                    m.y = 0;\n                    m.x = self.currentCell.x;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.columnIndex !== self.reorderObject.columnIndex\n                            && self.currentCell.columnIndex > -1\n                            && self.currentCell.columnIndex < s.length) {\n                        addBorderLine(m, self.reorderTarget.sortColumnIndex > self.reorderObject.sortColumnIndex ? 'r' : 'l');\n                    }\n                }\n            }\n            function drawBorder() {\n                self.ctx.lineWidth = self.style.gridBorderWidth;\n                self.ctx.strokeStyle = self.style.gridBorderColor;\n                strokeRect(0, 0, self.width, self.height);\n            }\n            function drawSelectionBorders() {\n                self.ctx.lineWidth = self.style.selectionOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.selectionOverlayBorderColor;\n                function dsb(c) {\n                    addBorderLine(c[0], c[1]);\n                }\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.save();\n                clipFrozenArea(0);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(1);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(2);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n            }\n            function drawSelectionHandles() {\n                if (self.mobile || self.attributes.allowMovingSelection) {\n                    self.ctx.lineWidth = self.style.selectionHandleBorderWidth;\n                    self.ctx.strokeStyle = self.style.selectionHandleBorderColor;\n                    self.ctx.fillStyle = self.style.selectionHandleColor;\n                    selectionHandles.forEach(function (c) {\n                        addselectionHandle(c[0], c[1]);\n                        var az = self.attributes.touchSelectHandleZone / 2,\n                            ax = c[0].x + (c[1] === 'tl' || c[1] === 'bl' ? 0 : c[0].width) - az,\n                            ay = c[0].y + (c[1] === 'bl' || c[1] === 'br' ? c[0].height : 0) - az;\n                        self.visibleCells.unshift({\n                            x: ax,\n                            y: ay,\n                            height: self.style.selectionHandleSize + az,\n                            width: self.style.selectionHandleSize + az,\n                            style: 'selection-handle-' + c[1]\n                        });\n                    });\n                }\n            }\n            function drawActiveCell() {\n                if (!aCell) { return; }\n                self.ctx.save();\n                var cl = self.activeCell.columnIndex + 1 > self.frozenColumn || self.activeCell.rowIndex + 1 > self.frozenRow,\n                    acx = cl ? self.lastFrozenColumnPixel : 0,\n                    acy = cl ? self.lastFrozenRowPixel : 0,\n                    acw = cl ? self.width - self.lastFrozenColumnPixel : self.width,\n                    ach = cl ? self.height - self.lastFrozenRowPixel : self.height;\n                radiusRect(acx, acy, acw, ach, 0);\n                self.ctx.clip();\n                if (self.attributes.selectionMode === 'row') {\n                    if (self.activeCell && self.activeCell.rowIndex === aCell.rowIndex) {\n                        self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                        self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                        strokeRect(0, aCell.y, self.getHeaderWidth() + rowHeaderCellWidth, self.visibleRowHeights[aCell.rowIndex]);\n                    }\n                } else {\n                    self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                    self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                    strokeRect(aCell.x, aCell.y, aCell.width, aCell.height);\n                }\n                self.ctx.restore();\n            }\n            function drawFrozenMarkers() {\n                var my = self.lastFrozenRowPixel - self.style.frozenMarkerWidth,\n                    mx = self.lastFrozenColumnPixel - self.style.frozenMarkerBorderWidth,\n                    xHover = self.currentCell && self.currentCell.style === 'frozen-row-marker',\n                    yHover = self.currentCell && self.currentCell.style === 'frozen-column-marker';\n                self.ctx.lineWidth = self.style.frozenMarkerBorderWidth;\n                if (self.attributes.allowFreezingColumns) {\n                    self.ctx.fillStyle = yHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = yHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    strokeRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    self.visibleCells.unshift({\n                        x: mx,\n                        y: 0,\n                        height: self.height,\n                        width: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        style: 'frozen-column-marker'\n                    });\n                }\n                if (self.attributes.allowFreezingRows) {\n                    self.ctx.fillStyle = xHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = xHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    strokeRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    self.visibleCells.unshift({\n                        x: 0,\n                        y: my,\n                        height: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        width: self.width,\n                        style: 'frozen-row-marker'\n                    });\n                }\n                if (self.freezeMarkerPosition) {\n                    self.ctx.fillStyle = self.style.frozenMarkerActiveColor;\n                    self.ctx.strokeStyle = self.style.frozenMarkerActiveBorderColor;\n                    if (self.dragMode === 'frozen-column-marker') {\n                        fillRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                        strokeRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                    } else {\n                        fillRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                        strokeRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                    }\n                }\n            }\n            function drawPerfLines() {\n                if (!self.attributes.showPerformance) { return; }\n                var pw = 250,\n                    px = self.width - pw - self.style.scrollBarWidth - (self.style.scrollBarBorderWidth * 2),\n                    py = columnHeaderCellHeight,\n                    ph = 100;\n                if (scrollDebugCounters.length === 0) { scrollDebugCounters = fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (touchPPSCounters.length === 0) { touchPPSCounters = fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (entityCount.length === 0) { entityCount = fillArray(0, perfWindowSize, 1, 0); }\n                self.ctx.lineWidth = 0.5;\n                function dpl(name, perfArr, arrIndex, max, color, useAbs, rowIndex) {\n                    var v;\n                    drawPerfLine(pw, ph, px, py, perfArr, arrIndex, max, color, useAbs);\n                    self.ctx.fillStyle = color;\n                    fillRect(3 + px, py + 9 + (rowIndex * 11), 8, 8);\n                    self.ctx.fillStyle = '#999999';\n                    v = arrIndex !== undefined ? perfArr[0][arrIndex] : perfArr[0];\n                    fillText(name + ' ' + (isNaN(v) ? 0 : v).toFixed(3), 14 + px, py + 16 + (rowIndex * 11));\n                }\n                self.ctx.textAlign = 'left';\n                self.ctx.font = '8px sans-serif';\n                self.ctx.fillStyle = 'rgba(29, 25, 26, 1.00)';\n                fillRect(px, py, pw, ph);\n                [['Scroll Height', scrollDebugCounters, 0, self.scrollBox.scrollHeight, 'rgba(248, 33, 103, 1.00)', false],\n                    ['Scroll Width', scrollDebugCounters, 1, self.scrollBox.scrollWidth, 'rgba(66, 255, 27, 1.00)', false],\n                    ['Performance', perfCounters, undefined, 200, 'rgba(252, 255, 37, 1.00)', false],\n                    ['Entities', entityCount, undefined, 1500, 'rgba(76, 231, 239, 1.00)', false],\n                    ['TouchPPSX', touchPPSCounters, 0, 1000, 'rgba(246, 102, 24, 1.00)', true],\n                    ['TouchPPSY', touchPPSCounters, 1, 1000, 'purple', true]\n                    ].forEach(function (i, index) {\n                    i.push(index);\n                    dpl.apply(null, i);\n                });\n                self.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n                entityCount.pop();\n                entityCount.unshift(self.visibleCells.length);\n                scrollDebugCounters.pop();\n                scrollDebugCounters.unshift([self.scrollBox.scrollTop, self.scrollBox.scrollLeft]);\n                touchPPSCounters.pop();\n                touchPPSCounters.unshift([self.yPPS, self.xPPS]);\n            }\n            function drawDebug() {\n                self.ctx.save();\n                var d;\n                if (self.attributes.showPerformance || self.attributes.debug) {\n                    if (perfCounters.length === 0) { perfCounters = fillArray(0, perfWindowSize, 1, 0); }\n                    perfCounters.pop();\n                    perfCounters.unshift(performance.now() - p);\n                }\n                if (!self.attributes.debug) {\n                    self.ctx.restore();\n                    return;\n                }\n                self.ctx.font = '14px sans-serif';\n                d = {};\n                d.perf = (perfCounters.reduce(function (a, b) {\n                    return a + b;\n                }, 0) / Math.min(drawCount, perfCounters.length)).toFixed(1);\n                d.htmlImages = Object.keys(self.htmlImageCache).length;\n                d.reorderObject = 'x: ' + (self.reorderObject || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderObject || {rowIndex: 0}).rowIndex;\n                d.reorderTarget = 'x: ' + (self.reorderTarget || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderTarget || {rowIndex: 0}).rowIndex;\n                d.scale = self.scale;\n                d.startScale = self.startScale;\n                d.scaleDelta = self.scaleDelta;\n                d.zoomDeltaStart = self.zoomDeltaStart;\n                d.touchLength = self.touchLength;\n                d.touches = 'y0: ' + (self.touchPosition || {y: 0}).y + ' y1: ' + (self.touchPosition1 || {y: 0}).y;\n                d.scrollBox = self.scrollBox.toString();\n                d.scrollIndex = 'x: ' + self.scrollIndexLeft + ', y: ' + self.scrollIndexTop;\n                d.scrollPixel = 'x: ' + self.scrollPixelLeft + ', y: ' + self.scrollPixelTop;\n                d.canvasOffset = 'x: ' + self.canvasOffsetLeft + ', y: ' + self.canvasOffsetTop;\n                d.touchDelta = 'x: ' + self.touchDelta.x + ', y: ' + self.touchDelta.y;\n                d.touchAnimateTo = 'x: ' + self.touchAnimateTo.x + ', y: ' + self.touchAnimateTo.y;\n                d.scrollAnimation = 'x: ' + self.scrollAnimation.x + ', y: ' + self.scrollAnimation.y;\n                d.touchPPS = 'x: ' + self.xPPS + ', y: ' + self.yPPS;\n                d.touchPPST = 'x: ' + self.xPPST + ', y: ' + self.yPPST;\n                d.touchDuration = self.touchDuration;\n                d.pointerLockPosition =  self.pointerLockPosition ?\n                        self.pointerLockPosition.x + ', ' + self.pointerLockPosition.y : '';\n                d.size = 'w: ' + self.width + ', h: ' + self.height;\n                d.mouse = 'x: ' + self.mouse.x + ', y: ' + self.mouse.y;\n                d.touch = !self.touchStart\n                    ? '' : 'x: ' + self.touchStart.x + ', y: ' + self.touchStart.y;\n                d.entities = self.visibleCells.length;\n                d.hasFocus = self.hasFocus;\n                d.dragMode = self.dragMode;\n                if (self.currentCell) {\n                    d.columnIndex = self.currentCell.columnIndex;\n                    d.rowIndex = self.currentCell.rowIndex;\n                    d.sortColumnIndex = self.currentCell.sortColumnIndex;\n                    d.sortRowIndex = self.currentCell.sortRowIndex;\n                    d.context = self.currentCell.context;\n                    d.dragContext = self.currentCell.dragContext;\n                    d.style = self.currentCell.style;\n                    d.type = self.currentCell.type;\n                }\n                self.ctx.textAlign = 'right';\n                self.ctx.fillStyle = 'rgba(0, 0, 0, .60)';\n                fillRect(0, 0, self.width, self.height);\n                Object.keys(d).forEach(function (key, index) {\n                    var m = key + ': ' + d[key],\n                        lh = 14;\n                    self.ctx.fillStyle = 'rgba(37, 254, 21, 1)';\n                    fillText(m, w - 20, (self.attributes.showPerformance ? 140 : 24) + (index * lh));\n                });\n                self.ctx.restore();\n            }\n            self.ctx.save();\n            initDraw();\n            drawBackground();\n            drawFrozenRows();\n            drawRows();\n            drawActiveCell();\n            drawHeaders();\n            drawFrozenMarkers();\n            drawSelectionBorders();\n            drawSelectionHandles();\n            drawReorderMarkers();\n            drawMoveMarkers();\n            drawScrollBars();\n            if (checkScrollHeight) {\n                self.resize(true);\n            }\n            drawBorder();\n            drawDebug();\n            drawPerfLines();\n            if (self.dispatchEvent('afterdraw', {})) { return; }\n            self.ctx.restore();\n        };\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        var wheeling;\n        self.stopPropagation = function (e) { e.stopPropagation(); };\n        /**\n         * Adds an event listener to the given event.\n         * @memberof canvasDatagrid\n         * @name addEventListener\n         * @method\n         * @param {string} ev The name of the event to subscribe to.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.addEventListener = function (ev, fn) {\n            self.events[ev] = self.events[ev] || [];\n            self.events[ev].unshift(fn);\n        };\n        /**\n         * Removes the given listener function from the given event.  Must be an actual reference to the function that was bound.\n         * @memberof canvasDatagrid\n         * @name removeEventListener\n         * @method\n         * @param {string} ev The name of the event to unsubscribe from.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.removeEventListener = function (ev, fn) {\n            (self.events[ev] || []).forEach(function removeEachListener(sfn, idx) {\n                if (fn === sfn) {\n                    self.events[ev].splice(idx, 1);\n                }\n            });\n        };\n        /**\n         * Fires the given event, padding an event object to the event subscribers.\n         * @memberof canvasDatagrid\n         * @name dispatchEvent\n         * @method\n         * @param {number} ev The name of the event to dispatch.\n         * @param {number} e The event object.\n         */\n        self.dispatchEvent = function (ev, e) {\n            e = ev.type ? ev : (e || {});\n            ev = ev.type || ev;\n            var defaultPrevented;\n            function preventDefault() {\n                defaultPrevented = true;\n            }\n            if (!self.events[ev]) { return; }\n            self.events[ev].forEach(function dispatchEachEvent(fn) {\n                e.ctx = self.ctx;\n                e.preventDefault = preventDefault;\n                fn.apply(self.intf, [e]);\n            });\n            return defaultPrevented;\n        };\n        self.getRatio = function () {\n            return Math.min(self.attributes.maxPixelRatio, (window.devicePixelRatio || 1) /\n                (self.ctx.webkitBackingStorePixelRatio ||\n                    self.ctx.mozBackingStorePixelRatio ||\n                    self.ctx.msBackingStorePixelRatio ||\n                    self.ctx.oBackingStorePixelRatio ||\n                    self.ctx.backingStorePixelRatio || 1));\n        };\n        self.resize = function (drawAfterResize) {\n            if (!self.canvas) { return; }\n            var v = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'vertical-scroll-bar'\n                },\n                n = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'horizontal-scroll-bar'\n                },\n                vb = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'vertical-scroll-box'\n                },\n                nb = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'horizontal-scroll-box'\n                },\n                co = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    isCorner: true,\n                    isScrollBoxCorner: true,\n                    style: 'scroll-box-corner'\n                },\n                m = (self.style.scrollBarBoxMargin * 2),\n                b = (self.style.scrollBarBorderWidth * 2),\n                d = self.style.scrollBarBoxMargin * 0.5,\n                sbw = self.style.scrollBarWidth + (self.style.scrollBarBorderWidth * 2),\n                ratio = self.getRatio(),\n                bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                cellBorder = self.style.cellBorderWidth * bm,\n                columnHeaderCellBorder = self.style.columnHeaderCellBorderWidth * bm,\n                dataHeight,\n                dataWidth,\n                dims,\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                ch = self.style.cellHeight,\n                // TODO: These offset numbers are terribly wrong.\n                // They should be a result of the size of the grid/canvas?\n                // it being off causes the scroll bar to \"slide\" under\n                // the dragged mouse.\n                // https://github.com/TonyGermaneri/canvas-datagrid/issues/97\n                scrollDragPositionOffsetY = 55,\n                scrollDragPositionOffsetX = -100;\n            // sets actual DOM canvas element\n            function setCanvasSize() {\n                if (self.isChildGrid) {\n                    return;\n                }\n                dims = {\n                    // HACK +1 ? maybe it's a magic cell border?  Required to line up properly in auto height mode.\n                    height: dataHeight + cellBorder + 1,\n                    width: dataWidth + rowHeaderCellWidth + cellBorder\n                };\n                ['width', 'height'].forEach(function (dim) {\n                    //TODO: support inherit\n                    if (['auto', undefined].indexOf(self.style[dim]) !== -1) {\n                        self.parentNodeStyle[dim] = dims[dim] + 'px';\n                    } else {\n                        self.parentNodeStyle[dim] = self.style[dim];\n                    }\n                });\n            }\n            self.scrollCache.x = [];\n            self.scrollCache.y = [];\n            if (self.attributes.disableRowResizing) {\n                dataHeight = self.data.length * (ch * self.scale);\n            } else {\n                dataHeight = (self.data || []).reduce(function reduceData(accumulator, row, rowIndex) {\n                    var va = accumulator\n                        + (((self.sizes.rows[row[self.uniqueId]] || ch) + (self.sizes.trees[row[self.uniqueId]] || 0)) * self.scale)\n                        // HACK? if an expanded tree row is frozen it is necessary to add the tree row's height a second time.\n                        + (self.frozenRow > rowIndex ? (self.sizes.trees[row[self.uniqueId]] || 0) : 0);\n                    self.scrollCache.y[rowIndex] = va;\n                    return va;\n                }, 0) || 0;\n            }\n            dataWidth = self.getVisibleSchema().reduce(function reduceSchema(accumulator, column, columnIndex) {\n                if (column.hidden) {\n                    self.scrollCache.x[columnIndex] = accumulator;\n                    return accumulator;\n                }\n                var va = accumulator + ((self.sizes.columns[column[self.uniqueId]] || column.width || self.style.cellWidth) * self.scale);\n                self.scrollCache.x[columnIndex] = va;\n                return va;\n            }, 0) || 0;\n            if (self.attributes.showNewRow) {\n                dataHeight += ch + cellBorder;\n            }\n            // accounts for the offset of the headers if any\n            dataHeight += columnHeaderCellHeight;\n            setCanvasSize();\n            if (self.isChildGrid) {\n                self.width = self.parentNode.offsetWidth;\n                self.height = self.parentNode.offsetHeight;\n            } else if (self.height !== self.canvas.offsetHeight || self.width !== self.canvas.offsetWidth) {\n                self.height = self.canvas.offsetHeight;\n                self.width = self.canvas.offsetWidth;\n                self.canvasOffsetLeft = self.args.canvasOffsetLeft || 0;\n                self.canvasOffsetTop = self.args.canvasOffsetTop || 0;\n            }\n            /// calculate scroll bar dimensions\n            // non-controversial\n            self.scrollBox.top = columnHeaderCellHeight + columnHeaderCellBorder;\n            self.scrollBox.left = rowHeaderCellWidth;\n            // width and height of scroll box\n            self.scrollBox.width = self.width - rowHeaderCellWidth - cellBorder;\n            self.scrollBox.height = self.height - columnHeaderCellBorder - cellBorder;\n            // is the data larger than the scroll box\n            self.scrollBox.horizontalBarVisible = dataWidth > self.scrollBox.width;\n            self.scrollBox.verticalBarVisible = dataHeight > self.scrollBox.height;\n            // if the scroll box is visible, make room for it by expanding the size of the element\n            // if the other dimension is set to auto\n            if (self.scrollBox.horizontalBarVisible && !self.isChildGrid) {\n                if (self.style.height === 'auto') {\n                    self.height += sbw;\n                }\n                dataHeight += sbw;\n                self.scrollBox.width = self.width - rowHeaderCellWidth - cellBorder;\n                setCanvasSize();\n                self.scrollBox.horizontalBarVisible = dataWidth > self.scrollBox.width;\n            }\n            if (self.scrollBox.verticalBarVisible && !self.isChildGrid) {\n                if (self.style.width === 'auto') {\n                    self.width += sbw;\n                }\n                dataWidth += sbw;\n                setCanvasSize();\n                self.scrollBox.verticalBarVisible = dataHeight > self.scrollBox.height;\n            }\n            self.scrollBox.scrollWidth = dataWidth - self.scrollBox.width;\n            self.scrollBox.scrollHeight = dataHeight - self.scrollBox.height;\n            self.scrollBox.widthBoxRatio = ((self.scrollBox.width - scrollDragPositionOffsetX)\n                / (self.scrollBox.scrollWidth + (self.scrollBox.width - scrollDragPositionOffsetX)));\n            self.scrollBox.scrollBoxWidth = self.scrollBox.width\n                * self.scrollBox.widthBoxRatio\n                - self.style.scrollBarWidth - b - d;\n            self.scrollBox.heightBoxRatio = ((self.scrollBox.height - scrollDragPositionOffsetY)\n                / (self.scrollBox.scrollHeight + (self.scrollBox.height - scrollDragPositionOffsetY)));\n            self.scrollBox.scrollBoxHeight = self.scrollBox.height\n                * self.scrollBox.heightBoxRatio\n                - self.style.scrollBarWidth - b - d - (columnHeaderCellHeight - cellBorder);\n            self.scrollBox.scrollBoxWidth = Math.max(self.scrollBox.scrollBoxWidth, self.style.scrollBarBoxMinSize);\n            self.scrollBox.scrollBoxHeight = Math.max(self.scrollBox.scrollBoxHeight, self.style.scrollBarBoxMinSize);\n            // horizontal\n            n.x += rowHeaderCellWidth;\n            n.y += self.height - self.style.scrollBarWidth - d;\n            n.width = self.width - self.style.scrollBarWidth - rowHeaderCellWidth - d - m;\n            n.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n            // horizontal box\n            nb.y = n.y + self.style.scrollBarBoxMargin;\n            nb.width = self.scrollBox.scrollBoxWidth;\n            nb.height = self.style.scrollBarBoxWidth;\n            // vertical\n            v.x += self.width - self.style.scrollBarWidth - self.style.scrollBarBorderWidth - d;\n            v.y += columnHeaderCellHeight;\n            v.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n            v.height = self.height - columnHeaderCellHeight - self.style.scrollBarWidth - d - m;\n            // vertical box\n            vb.x = v.x + self.style.scrollBarBoxMargin;\n            vb.width = self.style.scrollBarBoxWidth;\n            vb.height = self.scrollBox.scrollBoxHeight;\n            // corner\n            co.x = n.x + n.width + m;\n            co.y = v.y + v.height + m;\n            co.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n            co.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n            self.scrollBox.entities = {\n                horizontalBar: n,\n                horizontalBox: nb,\n                verticalBar: v,\n                verticalBox: vb,\n                corner: co\n            };\n            self.scrollBox.bar = {\n                v: v,\n                h: n\n            };\n            self.scrollBox.box = {\n                v: vb,\n                h: nb\n            };\n            /// calculate page and dom elements\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            // set canvas drawing related items\n            if (!self.isChildGrid) {\n                self.canvas.width = self.width * ratio;\n                self.canvas.height = self.height * ratio;\n                self.ctx.scale(ratio, ratio);\n            }\n            // resize any open dom elements (input/textarea)\n            self.resizeEditInput();\n            self.scroll(true);\n            if (drawAfterResize) {\n                self.draw(true);\n            }\n            self.dispatchEvent('resize', {});\n            return true;\n        };\n        self.scroll = function (dontDraw) {\n            var s = self.getVisibleSchema(),\n                ch = self.style.cellHeight;\n            self.scrollIndexTop = 0;\n            self.scrollPixelTop = 0;\n            self.scrollIndexLeft = 0;\n            self.scrollPixelLeft = 0;\n            while (self.scrollPixelTop < self.scrollBox.scrollTop && self.scrollIndexTop < self.data.length) {\n                if (self.attributes.disableRowResizing) {\n                    self.scrollPixelTop = self.scrollIndexTop * (ch * self.scale);\n                } else {\n                    self.scrollPixelTop = self.scrollCache.y[self.scrollIndexTop];\n                }\n                self.scrollIndexTop += 1;\n            }\n            while (self.scrollPixelLeft < self.scrollBox.scrollLeft && self.scrollIndexLeft < s.length) {\n                self.scrollPixelLeft = self.scrollCache.x[self.scrollIndexLeft];\n                self.scrollIndexLeft += 1;\n            }\n            if ((self.data || []).length > 0 && s.length > 0) {\n                self.scrollIndexLeft = Math.max(self.scrollIndexLeft - 1, 0);\n                self.scrollPixelLeft = Math.max(self.scrollPixelLeft\n                    - ((self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width || self.style.cellWidth) * self.scale), 0);\n                self.scrollIndexTop = Math.max(self.scrollIndexTop - 1, 0);\n                self.scrollPixelTop = Math.max((self.scrollPixelTop\n                    - ((self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || ch)\n                    + (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0)) * self.scale), 0);\n            }\n            self.ellipsisCache = {};\n            if (!dontDraw) {\n                self.draw(true);\n            }\n            //TODO: figure out why this has to be delayed for child grids\n            //BUG: wheeling event on 3rd level hierarchy fails to move input box\n            requestAnimationFrame(self.resizeEditInput);\n            self.dispatchEvent('scroll', {top: self.scrollBox.scrollTop, left: self.scrollBox.scrollLeft});\n        };\n        self.mousemove = function (e, overridePos) {\n            if (self.contextMenu || self.input) {\n                return;\n            }\n            self.mouse = overridePos || self.getLayerPos(e);\n            var ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                i,\n                vs = self.getVisibleSchema(),\n                dragBounds,\n                sBounds,\n                x = self.mouse.x,\n                y = self.mouse.y,\n                o = self.getCellAt(x, y),\n                delta,\n                ev = {NativeEvent: e, cell: o, x: x, y: y},\n                previousCell = self.currentCell;\n            clearTimeout(self.scrollTimer);\n            if (!self.isInGrid({x: x, y: y})) {\n                self.hasFocus = false;\n            }\n            if (self.dispatchEvent('mousemove', ev)) {\n                return;\n            }\n            if (o && self.currentCell) {\n                self.rowBoundaryCrossed = self.currentCell.rowIndex !== o.rowIndex;\n                self.columnBoundaryCrossed = self.currentCell.columnIndex !== o.columnIndex;\n                self.cellBoundaryCrossed = self.rowBoundaryCrossed || self.columnBoundaryCrossed;\n                ['row', 'column', 'cell'].forEach(function (prefix) {\n                    if (self[prefix + 'BoundaryCrossed']) {\n                        ev.cell = previousCell;\n                        self.dispatchEvent(prefix + 'mouseout', ev);\n                        ev.cell = o;\n                        self.dispatchEvent(prefix + 'mouseover', ev);\n                    }\n                });\n            }\n            self.currentCell = o;\n            if (!self.hasFocus) {\n                return;\n            }\n            self.hovers = {};\n            if (!self.draggingItem\n                    && o\n                    && self.scrollModes.indexOf(o.context) === -1) {\n                self.dragItem = o;\n                self.dragMode = o.dragContext;\n                self.cursor = o.context;\n                if (o.context === 'cell' && o.data) {\n                    self.cursor = 'default';\n                    self.hovers[o.data[self.uniqueId]] = [o.columnIndex];\n                }\n                if ((self.selecting || self.reorderObject)\n                        && o.context === 'cell'\n                        && o.data) {\n                    sBounds = self.getSelectionBounds();\n                    delta = {\n                        x: Math.abs(self.dragStart.x - x),\n                        y: Math.abs(self.dragStart.y - y)\n                    };\n                    if (self.dragStartObject.columnIndex !== -1 && e.shiftKey) {\n                        self.dragStartObject = {\n                            rowIndex: self.activeCell.rowIndex,\n                            columnIndex: self.activeCell.columnIndex\n                        };\n                    }\n                    dragBounds = {\n                        top: Math.min(self.dragStartObject.rowIndex, o.rowIndex),\n                        left: Math.min(self.dragStartObject.columnIndex, o.columnIndex),\n                        bottom: Math.max(self.dragStartObject.rowIndex, o.rowIndex),\n                        right: Math.max(self.dragStartObject.columnIndex, o.columnIndex)\n                    };\n                    if (self.dragStartObject.columnIndex === -1) {\n                        dragBounds.left = -1;\n                        dragBounds.right = vs.length - 1;\n                        dragBounds.top = Math.min(sBounds.top, o.rowIndex);\n                        dragBounds.bottom = Math.max(sBounds.bottom, o.rowIndex);\n                    }\n                    if (self.dragStartObject.rowIndex !== o.rowIndex\n                                || self.dragStartObject.columnIndex !== o.columnIndex) {\n                        self.ignoreNextClick = true;\n                    }\n                    if (self.cellBoundaryCrossed || (delta.x === 0 && delta.y === 0) || (self.attributes.selectionMode === 'row')) {\n                        if (((self.attributes.selectionMode === 'row') || self.dragStartObject.columnIndex === -1)\n                                && self.rowBoundaryCrossed) {\n                            self.selectRow(o.rowIndex, ctrl, null, true);\n                        } else if (self.attributes.selectionMode !== 'row') {\n                            if (!self.dragAddToSelection && o.rowIndex !== undefined) {\n                                if (self.selections[o.rowIndex] && self.selections[o.rowIndex].indexOf(o.columnIndex) !== -1) {\n                                    self.selections[o.rowIndex].splice(self.selections[o.rowIndex].indexOf(o.columnIndex), 1);\n                                }\n                            } else {\n                                self.selections[o.rowIndex] = self.selections[o.rowIndex] || [];\n                                if (self.selections[o.rowIndex].indexOf(o.columnIndex) === -1) {\n                                    self.selections[o.rowIndex].push(o.columnIndex);\n                                }\n                            }\n                        }\n                    }\n                    if ((!self.selectionBounds || (dragBounds.top !== self.selectionBounds.top\n                            || dragBounds.left !== self.selectionBounds.left\n                            || dragBounds.bottom !== self.selectionBounds.bottom\n                            || dragBounds.right !== self.selectionBounds.right)) && !ctrl) {\n                        self.selections = [];\n                        sBounds = dragBounds;\n                        if (self.attributes.selectionMode === 'row') {\n                            for (i = sBounds.top; i <= sBounds.bottom; i += 1) {\n                                self.selectRow(i, true, null, true);\n                            }\n                        } else if (dragBounds.top !== -1) {\n                            self.selectArea(sBounds, true);\n                        }\n                    }\n                    self.autoScrollZone(e, x, y, ctrl);\n                }\n            }\n            self.cellBoundaryCrossed = false;\n            self.rowBoundaryCrossed = false;\n            self.columnBoundaryCrossed = false;\n            self.draw(true);\n        };\n        self.click = function (e, overridePos) {\n            var i,\n                ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                pos = overridePos || self.getLayerPos(e);\n            self.currentCell = self.getCellAt(pos.x, pos.y);\n            if (self.currentCell.grid !== undefined) {\n                return;\n            }\n            function checkSelectionChange() {\n                self.dispatchEvent('selectionchanged', {\n                    selectedData: self.getSelectedData(),\n                    selections: self.selections,\n                    selectionBounds: self.selectionBounds\n                });\n            }\n            if (self.input) {\n                self.endEdit();\n            }\n            if (self.ignoreNextClick) {\n                self.ignoreNextClick = false;\n                return;\n            }\n            i = self.currentCell;\n            if (self.dispatchEvent('click', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (['rowHeaderCell', 'columnHeaderCell'].indexOf(self.currentCell.style) === -1 && !ctrl) {\n                self.setActiveCell(i.columnIndex, i.rowIndex);\n            }\n            if (self.currentCell.context === 'cell') {\n                if (self.currentCell.style === 'cornerCell') {\n                    self.selectAll();\n                    self.draw();\n                    checkSelectionChange();\n                    return;\n                }\n                if (self.currentCell.style === 'columnHeaderCell') {\n                    if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                        if (self.orderBy === i.header.name) {\n                            self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                        } else {\n                            self.orderDirection = 'asc';\n                        }\n                        self.order(i.header.name, self.orderDirection);\n                        checkSelectionChange();\n                        return;\n                    }\n                    if (self.attributes.columnHeaderClickBehavior === 'select') {\n                        self.selectColumn(i.header.index, ctrl, e.shiftKey, true);\n                        checkSelectionChange();\n                        self.draw();\n                        return;\n                    }\n                }\n                self.selections[i.rowIndex] = self.selections[i.rowIndex] || [];\n                if (((self.attributes.selectionMode === 'row') || self.currentCell.style === 'rowHeaderCell')) {\n                    if (self.currentCell.style === 'rowHeaderCell'\n                            && self.attributes.tree && pos.x > 0\n                            && pos.x - self.currentCell.x < self.style.treeArrowWidth\n                            + self.style.treeArrowMarginLeft\n                            + self.style.treeArrowMarginRight + self.style.treeArrowClickRadius\n                            && pos.y - self.currentCell.y < self.style.treeArrowHeight\n                            + self.style.treeArrowMarginTop + self.style.treeArrowClickRadius\n                            && pos.y > 0) {\n                        self.toggleTree(i.rowIndex);\n                        return;\n                    }\n                }\n                if (e.shiftKey && !ctrl) {\n                    self.selectionBounds = self.getSelectionBounds();\n                    self.selectArea(undefined, false);\n                }\n            }\n            checkSelectionChange();\n            self.draw(true);\n        };\n        self.dragResizeColumn = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = self.resizingStartingWidth + pos.x - self.dragStart.x;\n            y = self.resizingStartingHeight + pos.y - self.dragStart.y;\n            if (x < self.style.minColumnWidth) {\n                x = self.style.minColumnWidth;\n            }\n            if (y < self.style.minRowHeight) {\n                y = self.style.minRowHeight;\n            }\n            if (self.dispatchEvent('resizecolumn', {x: x, y: y, draggingItem: self.draggingItem})) { return false; }\n            if (self.scrollBox.scrollLeft > self.scrollBox.scrollWidth - self.attributes.resizeScrollZone\n                    && self.dragMode === 'ew-resize') {\n                self.resize(true);\n                self.scrollBox.scrollLeft += x;\n            }\n            if (self.dragMode === 'ew-resize') {\n                self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] = x;\n                if (['rowHeaderCell', 'cornerCell'].indexOf(self.draggingItem.header.style) !== -1) {\n                    self.resize(true);\n                }\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.dragMode === 'ns-resize') {\n                if (self.draggingItem.rowOpen) {\n                    self.sizes.trees[self.draggingItem.data[self.uniqueId]] = y;\n                } else if (self.attributes.globalRowResize) {\n                    self.style.cellHeight = y;\n                } else {\n                    self.sizes.rows[self.draggingItem.data[self.uniqueId]] = y;\n                }\n                self.dispatchEvent('resizerow', {row: y});\n                self.resizeChildGrids();\n                return;\n            }\n            self.ellipsisCache = {};\n        };\n        self.stopDragResize = function () {\n            self.resize();\n            document.body.removeEventListener('mousemove', self.dragResizeColumn, false);\n            document.body.removeEventListener('mouseup', self.stopDragResize, false);\n            self.setStorageData();\n            self.draw(true);\n            self.ignoreNextClick = true;\n        };\n        self.scrollGrid = function (e) {\n            var pos = self.getLayerPos(e);\n            if (self.attributes.scrollPointerLock && self.pointerLockPosition\n                    && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                self.pointerLockPosition.x += e.movementX;\n                self.pointerLockPosition.y += e.movementY;\n                self.pointerLockPosition.x = Math.min(self.width - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.x));\n                self.pointerLockPosition.y = Math.min(self.height - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.y));\n                pos = self.pointerLockPosition;\n            }\n            self.scrollMode = self.getCellAt(pos.x, pos.y).context;\n            if (self.scrollMode === 'horizontal-scroll-box' && self.scrollStartMode !== 'horizontal-scroll-box') {\n                self.scrollStartMode = 'horizontal-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.left = self.scrollBox.scrollLeft;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box' && self.scrollStartMode !== 'vertical-scroll-box') {\n                self.scrollStartMode = 'vertical-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.top = self.scrollBox.scrollTop;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollStartMode === 'vertical-scroll-box'\n                    && self.scrollMode !== 'vertical-scroll-box') {\n                self.scrollMode = 'vertical-scroll-box';\n            }\n            if (self.scrollStartMode === 'horizontal-scroll-box'\n                    && self.scrollMode !== 'horizontal-scroll-box') {\n                self.scrollMode = 'horizontal-scroll-box';\n            }\n            clearTimeout(self.scrollTimer);\n            if (self.scrollModes.indexOf(self.scrollMode) === -1) {\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box') {\n                self.scrollBox.scrollTop = self.scrollStart.top + ((pos.y - self.dragStart.y)\n                    / self.scrollBox.heightBoxRatio);\n            } else if (self.scrollMode === 'vertical-scroll-top') {\n                self.scrollBox.scrollTop -= (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'vertical-scroll-bottom') {\n                self.scrollBox.scrollTop += (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n            if (self.scrollMode === 'horizontal-scroll-box') {\n                self.scrollBox.scrollLeft = self.scrollStart.left + ((pos.x - self.dragStart.x)\n                    / self.scrollBox.widthBoxRatio);\n            } else if (self.scrollMode === 'horizontal-scroll-right') {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'horizontal-scroll-left') {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.stopScrollGrid = function () {\n            clearTimeout(self.scrollTimer);\n            if (document.exitPointerLock) {\n                document.exitPointerLock();\n            }\n            document.body.removeEventListener('mousemove', self.scrollGrid, false);\n        };\n        self.dragReorder = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = pos.x - self.dragStart.x;\n            y = pos.y - self.dragStart.y;\n            if (!self.attributes.allowColumnReordering && self.dragMode === 'column-reorder') {\n                return;\n            }\n            if (!self.attributes.allowRowReordering && self.dragMode === 'row-reorder') {\n                return;\n            }\n            if (self.dispatchEvent('reordering', {\n                    NativeEvent: e,\n                    source: self.dragStartObject,\n                    target: self.currentCell,\n                    dragMode: self.dragMode\n                })) {\n                return;\n            }\n            if (Math.abs(x) > self.attributes.reorderDeadZone || Math.abs(y) > self.attributes.reorderDeadZone) {\n                self.reorderObject = self.draggingItem;\n                self.reorderTarget = self.currentCell;\n                self.reorderObject.dragOffset = {\n                    x: x,\n                    y: y\n                };\n                self.autoScrollZone(e, pos.x, pos.y, false);\n            }\n        };\n        self.stopDragReorder = function (e) {\n            var oIndex,\n                tIndex,\n                cr = {\n                    'row-reorder': self.orders.rows,\n                    'column-reorder': self.orders.columns\n                },\n                i = {\n                    'row-reorder': 'rowIndex',\n                    'column-reorder': 'columnIndex'\n                }[self.dragMode];\n            document.body.removeEventListener('mousemove', self.dragReorder, false);\n            document.body.removeEventListener('mouseup', self.stopDragReorder, false);\n            if (self.reorderObject\n                    && self.reorderTarget\n                    && ((self.dragMode === 'column-reorder' && self.reorderTarget.columnIndex > -1\n                        && self.reorderTarget.columnIndex < self.getVisibleSchema().length)\n                    || (self.dragMode === 'row-reorder' && self.reorderTarget.rowIndex > -1\n                        && self.reorderTarget.rowIndex < self.data.length))\n                    && self.reorderObject[i] !== self.reorderTarget[i]\n                    && !self.dispatchEvent('reorder', {\n                        NativeEvent: e,\n                        source: self.reorderObject,\n                        target: self.reorderTarget,\n                        dragMode: self.dragMode\n                    })) {\n                self.ignoreNextClick = true;\n                oIndex = cr[self.dragMode].indexOf(self.reorderObject[i]);\n                tIndex = cr[self.dragMode].indexOf(self.reorderTarget[i]);\n                cr[self.dragMode].splice(oIndex, 1);\n                cr[self.dragMode].splice(tIndex, 0, self.reorderObject[i]);\n                self.setStorageData();\n            }\n            self.reorderObject = undefined;\n            self.reorderTarget = undefined;\n            self.draw(true);\n        };\n        self.dragMove = function (e) {\n            if (self.dispatchEvent('moving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.moveOffset = {\n                x: self.currentCell.columnIndex - self.dragStartObject.columnIndex,\n                y: self.currentCell.rowIndex - self.dragStartObject.rowIndex\n            };\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopDragMove = function (e) {\n            document.body.removeEventListener('mousemove', self.dragMove, false);\n            document.body.removeEventListener('mouseup', self.stopDragMove, false);\n            var b = self.getSelectionBounds();\n            if (self.dispatchEvent('endmove', {NativeEvent: e, cell: self.currentCell})) {\n                self.movingSelection = undefined;\n                self.moveOffset = undefined;\n                self.draw(true);\n                return;\n            }\n            if (self.moveOffset) {\n                self.moveTo(self.movingSelection, b.left + self.moveOffset.x, b.top + self.moveOffset.y);\n                self.moveSelection(self.moveOffset.x, self.moveOffset.y);\n            }\n            self.movingSelection = undefined;\n            self.moveOffset = undefined;\n            self.draw(true);\n        };\n        self.freezeMove = function (e) {\n            if (self.dispatchEvent('freezemoving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.ignoreNextClick = true;\n            self.freezeMarkerPosition = pos;\n            if (self.currentCell && self.currentCell.rowIndex !== undefined && self.dragMode === 'frozen-row-marker') {\n                self.scrollBox.scrollTop = 0;\n                self.frozenRow = self.currentCell.rowIndex + 1;\n            }\n            if (self.currentCell && self.currentCell.columnIndex !== undefined && self.dragMode === 'frozen-column-marker') {\n                self.scrollBox.scrollLeft = 0;\n                self.frozenColumn = self.currentCell.columnIndex + 1;\n            }\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopFreezeMove = function (e) {\n            document.body.removeEventListener('mousemove', self.freezeMove, false);\n            document.body.removeEventListener('mouseup', self.stopFreezeMove, false);\n            self.freezeMarkerPosition = undefined;\n            if (self.dispatchEvent('endfreezemove', {NativeEvent: e})) {\n                self.frozenRow = self.startFreezeMove.x;\n                self.frozenColumn = self.startFreezeMove.y;\n                self.draw(true);\n                return;\n            }\n            self.draw(true);\n        };\n        self.mousedown = function (e, overridePos) {\n            self.lastMouseDownTarget = e.target;\n            if (self.dispatchEvent('mousedown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (e.button === 2 || self.input) { return; }\n            var ctrl = (e.ctrlKey || e.metaKey),\n                move = /-move/.test(self.dragMode),\n                freeze = /frozen-row-marker|frozen-column-marker/.test(self.dragMode),\n                resize = /-resize/.test(self.dragMode);\n            self.dragStart = overridePos || self.getLayerPos(e);\n            self.scrollStart = {\n                left: self.scrollBox.scrollLeft,\n                top: self.scrollBox.scrollTop\n            };\n            self.dragStartObject = self.getCellAt(self.dragStart.x, self.dragStart.y);\n            self.dragAddToSelection = !self.dragStartObject.selected;\n            if (!ctrl && !e.shiftKey && !/(vertical|horizontal)-scroll-(bar|box)/\n                    .test(self.dragStartObject.context)\n                    && self.currentCell\n                    && !self.currentCell.isColumnHeader\n                    && !move\n                    && !freeze\n                    && !resize) {\n                self.selections = [];\n            }\n            if (self.dragStartObject.isGrid) {\n                return;\n            }\n            if (self.scrollModes.indexOf(self.dragStartObject.context) !== -1) {\n                self.scrollMode = self.dragStartObject.context;\n                self.scrollStartMode = self.dragStartObject.context;\n                self.scrollGrid(e);\n                if (self.attributes.scrollPointerLock\n                        && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                    self.pointerLockPosition = {\n                        x: self.dragStart.x,\n                        y: self.dragStart.y\n                    };\n                    self.canvas.requestPointerLock();\n                }\n                document.body.addEventListener('mousemove', self.scrollGrid, false);\n                document.body.addEventListener('mouseup', self.stopScrollGrid, false);\n                self.ignoreNextClick = true;\n                return;\n            }\n            if (self.dragMode === 'cell') {\n                self.selecting = true;\n                if ((self.attributes.selectionMode === 'row' || self.dragStartObject.columnIndex === -1)\n                        && self.dragStartObject.rowIndex > -1) {\n                    self.selectRow(self.dragStartObject.rowIndex, ctrl, null, true);\n                } else if (self.attributes.selectionMode !== 'row') {\n                    self.mousemove(e);\n                }\n                return;\n            }\n            if (move) {\n                self.draggingItem = self.dragItem;\n                self.movingSelection = self.selections.concat([]);\n                self.dragging = self.dragStartObject;\n                if (self.dispatchEvent('beginmove', {NativeEvent: e, cell: self.currentCell})) { return; }\n                document.body.addEventListener('mousemove', self.dragMove, false);\n                document.body.addEventListener('mouseup', self.stopDragMove, false);\n                return self.mousemove(e);\n            }\n            if (freeze) {\n                self.draggingItem = self.dragItem;\n                self.startFreezeMove = {\n                    x: self.frozenRow,\n                    y: self.frozenColumn\n                };\n                if (self.dispatchEvent('beginfreezemove', {NativeEvent: e})) { return; }\n                document.body.addEventListener('mousemove', self.freezeMove, false);\n                document.body.addEventListener('mouseup', self.stopFreezeMove, false);\n                return self.mousemove(e);\n            }\n            if (resize) {\n                self.draggingItem = self.dragItem;\n                if (self.draggingItem.rowOpen) {\n                    self.resizingStartingHeight = self.sizes.trees[self.draggingItem.data[self.uniqueId]];\n                } else {\n                    self.resizingStartingHeight = self.sizes.rows[self.draggingItem.data[self.uniqueId]] || self.style.cellHeight;\n                }\n                self.resizingStartingWidth = self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] || self.draggingItem.width;\n                document.body.addEventListener('mousemove', self.dragResizeColumn, false);\n                document.body.addEventListener('mouseup', self.stopDragResize, false);\n                return;\n            }\n            if (['row-reorder', 'column-reorder'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragStartObject;\n                document.body.addEventListener('mousemove', self.dragReorder, false);\n                document.body.addEventListener('mouseup', self.stopDragReorder, false);\n                return;\n            }\n        };\n        self.mouseup = function (e) {\n            clearTimeout(self.scrollTimer);\n            self.cellBoundaryCrossed = true;\n            self.rowBoundaryCrossed = true;\n            self.columnBoundaryCrossed = true;\n            self.selecting = undefined;\n            self.draggingItem = undefined;\n            self.dragStartObject = undefined;\n            if (self.dispatchEvent('mouseup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            if (self.currentCell && self.currentCell.grid !== undefined) {\n                return;\n            }\n            if (self.contextMenu || self.input) { return; }\n            if (self.dragStart && self.isInGrid(self.dragStart)) {\n                self.controlInput.focus();\n            }\n            e.preventDefault();\n        };\n        self.keydown = function (e) {\n            var i,\n                x = self.activeCell.columnIndex,\n                y = self.activeCell.rowIndex,\n                ctrl = (e.ctrlKey || e.metaKey),\n                last = self.data.length - 1,\n                cols = self.getVisibleSchema().length - 1;\n            if (self.dispatchEvent('keydown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            if (self.attributes.showNewRow) {\n                last += 1;\n            }\n            if (e.keyCode === 9) {\n                e.preventDefault();\n            }\n            // esc\n            if (e.keyCode === 27) {\n                self.selections = [];\n                self.draw(true);\n            // ctrl + a\n            } else if (ctrl && e.keyCode === 65) {\n                self.selectAll();\n            //ArrowDown\n            } else if (e.keyCode === 40) {\n                y += 1;\n            //ArrowUp\n            } else if (e.keyCode === 38) {\n                y -= 1;\n            //ArrowLeft Tab\n            } else if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {\n                x -= 1;\n            //ArrowRight Tab\n            } else if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {\n                x += 1;\n            //PageUp\n            } else if (e.keyCode === 33) {\n                y -= self.page;\n                e.preventDefault();\n            //PageDown\n            } else if (e.keyCode === 34) {\n                y += self.page;\n                e.preventDefault();\n            //Home ArrowUp\n            } else if (e.keyCode === 36 || (ctrl && e.keyCode === 38)) {\n                y = 0;\n            //End ArrowDown\n            } else if (e.keyCode === 35 || (ctrl && e.keyCode === 40)) {\n                y = self.data.length - 1;\n            //ArrowRight\n            } else if (ctrl && e.keyCode === 39) {\n                x = cols;\n            //ArrowLeft\n            } else if (ctrl && e.keyCode === 37) {\n                x = 0;\n            }\n            //Enter\n            if (e.keyCode === 13) {\n                return self.beginEditAt(x, y);\n            }\n            //Space\n            if (e.keyCode === 32) {\n                self.selections = [];\n                self.selections[Math.max(y, 0)] = [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                if (self.attributes.selectionMode === 'row') {\n                    for (i = self.selectionBounds.top; i <= self.selectionBounds.bottom; i += 1) {\n                        self.selectRow(i, ctrl, null, true);\n                    }\n                } else {\n                    self.selectArea(undefined, ctrl);\n                }\n                e.preventDefault();\n                self.draw(true);\n                return;\n            }\n            if (x < 0) {\n                x = 0;\n            }\n            if (y > last) {\n                y = last;\n            }\n            if (y < 0) {\n                y = 0;\n            }\n            if (x > cols) {\n                x = cols;\n            }\n            // Arrows\n            if (e.shiftKey && [37, 38, 39, 40].indexOf(e.keyCode) !== -1) {\n                self.selections[Math.max(y, 0)] = self.selections[Math.max(y, 0)] || [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                self.selectArea(undefined, ctrl);\n                self.draw(true);\n            }\n            if (x !== self.activeCell.columnIndex || y !== self.activeCell.rowIndex) {\n                self.scrollIntoView(x !== self.activeCell.columnIndex ? x : undefined, y !== self.activeCell.rowIndex ? y : undefined);\n                self.setActiveCell(x, y);\n                if (!e.shiftKey && self.attributes.selectionFollowsActiveCell) {\n                    if (!ctrl) {\n                        self.selections = [];\n                    }\n                    self.selections[y] = self.selections[y] || [];\n                    self.selections[y].push(x);\n                    self.dispatchEvent('selectionchanged', {\n                        selectedData: self.getSelectedData(),\n                        selections: self.selections,\n                        selectionBounds: self.selectionBounds\n                    });\n                }\n                self.draw(true);\n            }\n        };\n        self.keyup = function (e) {\n            if (self.dispatchEvent('keyup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n        };\n        self.keypress = function (e) {\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.dispatchEvent('keypress', {NativeEvent: e, cell: self.currentCell})) { return; }\n        };\n        self.dblclick = function (e) {\n            if (self.dispatchEvent('dblclick', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'columnHeaderCell') {\n                self.fitColumnToValues(self.currentCell.header.name);\n            } else if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'cornerCell') {\n                self.autosize();\n            } else if (['cell', 'activeCell'].indexOf(self.currentCell.style) !== -1) {\n                self.beginEditAt(self.currentCell.columnIndex, self.currentCell.rowIndex);\n            }\n        };\n        self.scrollWheel = function (e) {\n            var l,\n                t,\n                deltaX = e.deltaX === undefined ? e.NativeEvent.deltaX : e.deltaX,\n                deltaY = e.deltaY === undefined ? e.NativeEvent.deltaY : e.deltaY,\n                deltaMode = e.deltaMode === undefined ? e.NativeEvent.deltaMode : e.deltaMode;\n            if (wheeling) {\n                return;\n            }\n            if (self.dispatchEvent('wheel', {NativeEvent: e})) {\n                return;\n            }\n            e = e.NativeEvent || e;\n            self.touchHaltAnimation = true;\n            l = self.scrollBox.scrollLeft;\n            t = self.scrollBox.scrollTop;\n            if (self.hasFocus) {\n                //BUG Issue 42: https://github.com/TonyGermaneri/canvas-datagrid/issues/42\n                //https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\n                if (deltaMode === 1) {\n                    // line mode = 17 pixels per line\n                    deltaY = deltaY * 17;\n                }\n                if ((self.scrollBox.scrollTop < self.scrollBox.scrollHeight && deltaY > 0)\n                        || (self.scrollBox.scrollLeft < self.scrollBox.scrollWidth && deltaX > 0)\n                        || (self.scrollBox.scrollTop > 0 && deltaY < 0)\n                        || (self.scrollBox.scrollLeft > 0 && deltaX < 0)) {\n                    e.preventDefault(e);\n                }\n                wheeling = setTimeout(function () {\n                    wheeling = undefined;\n                    self.scrollBox.scrollTo(deltaX + l, deltaY + t);\n                }, 1);\n            }\n        };\n        self.pasteItem = function (clipData, x, y, mimeType) {\n            var l, s = self.getVisibleSchema(), yi = y - 1, sel = [];\n            function normalizeRowData(importingRow, existingRow, offsetX, schema, mimeType, rowIndex) {\n                var r = existingRow;\n                if (!Array.isArray(importingRow) && importingRow !== null && typeof importingRow === 'object') {\n                    importingRow = Object.keys(importingRow).map(function (colKey) {\n                        return importingRow[colKey];\n                    });\n                }\n                if (/^text\\/html/.test(mimeType)) {\n                    importingRow = importingRow.substring(4, importingRow.length - 5).split('</td><td>');\n                }\n                if (typeof importingRow === 'string') {\n                    importingRow = [importingRow];\n                }\n                sel[rowIndex] = [];\n                importingRow.forEach(function (cellData, colIndex) {\n                    var cName = schema[colIndex + offsetX].name;\n                    if (importingRow[colIndex] === undefined || importingRow[colIndex] === null) {\n                        r[cName] = existingRow[cName];\n                        return;\n                    }\n                    sel[rowIndex].push(colIndex + offsetX);\n                    r[cName] = importingRow[colIndex];\n                });\n                return r;\n            }\n            if (/^text\\/html/.test(mimeType)) {\n                if (!/^(<meta[^>]+>)?<table>/.test(clipData.substring(0, 29))) {\n                    console.warn('Unrecognized HTML format.  HTML must be a simple table, e.g.: <table><tr><td>data</td></tr></table>.  Data with the mime type text/html not in this format will not be imported as row data.');\n                    return;\n                }\n                // strip table beginning and ending off, then split at rows\n                clipData = clipData.substring(clipData.indexOf('<table><tr>') + 11, clipData.length - 13).split('</tr><tr>');\n            } else {\n                clipData = clipData.split('\\n');\n            }\n            l = clipData.length;\n            clipData.forEach(function (rowData) {\n                yi += 1;\n                var i = self.orders.columns[yi];\n                self.data[i] = normalizeRowData(rowData, self.data[i], x, s, mimeType, i);\n            });\n            self.selections = sel;\n            return l;\n        };\n        self.paste = function (e) {\n            var d;\n            function getItem(dti) {\n                var type = dti.type;\n                dti.getAsString(function (s) {\n                    self.pasteItem(s, self.activeCell.columnIndex, self.activeCell.rowIndex, type);\n                    self.draw();\n                });\n            }\n            d = Array.prototype.filter.call(e.clipboardData.items, function (dti) {\n                return dti.type === 'text/html';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/csv';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/plain';\n            })[0];\n            if (!d) {\n                console.warn('Cannot find supported clipboard data type.  Supported types are text/html, text/csv, text/plain.');\n                return;\n            }\n            getItem(d);\n        };\n        self.cut = function (e) {\n            self.copy(e);\n            self.forEachSelectedCell(function (data, index, colName) {\n                data[index][colName] = '';\n            });\n        };\n        self.copy = function (e) {\n            if (self.dispatchEvent('copy', {NativeEvent: e})) { return; }\n            if (!self.hasFocus || !e.clipboardData) { return; }\n            var t,\n                d,\n                data = (self.data || []),\n                tableRows = [],\n                textRows = [],\n                headers = [],\n                sData = self.getSelectedData(),\n                s = self.getVisibleSchema();\n            function htmlSafe(v) {\n                return v.replace(/</g, '&lt;').replace(/>/g, '&gt;');\n            }\n            function fCopyCell(v) {\n                v = v === null || v === undefined ? '' : v;\n                return '<td>' + (typeof v === 'string' ? htmlSafe(v) : v) + '</td>';\n            }\n            function addTableHeaders() {\n                if (!headers.length) { return ''; }\n                return '<tr>' + headers.map(function (name) {\n                    return '<th>' + htmlSafe(name) + '</th>';\n                }).join('') + '</tr>';\n            }\n            function addCellValue(val, trRow, textRow, column) {\n                // escape strings\n                var ht = column.title || column.name;\n                if (val !== null\n                        && val !== false\n                        && val !== undefined\n                        && val.replace) {\n                    if (headers.indexOf(ht) === -1\n                            && sData.length === data.length\n                            && self.attributes.copyHeadersOnSelectAll) {\n                        headers.push(ht);\n                    }\n                    trRow.push(fCopyCell(val));\n                    textRow.push('\"' + val.replace(/\"/g, '\"\"') + '\"');\n                    return;\n                }\n                if (val !== undefined) {\n                    textRow.push(val);\n                    trRow.push(fCopyCell(val));\n                    return;\n                }\n                // issue #66\n                textRow.push('');\n                trRow.push('<td>&nbsp;</td>');\n            }\n            if (sData.length > 0) {\n                sData.forEach(function (row) {\n                    if (row) {\n                        var trRow = [],\n                            textRow = [];\n                        s.forEach(function (column, columnIndex) {\n                            // intentional redefinition of column\n                            column = s[self.orders.columns[columnIndex]];\n                            // escape strings\n                            addCellValue(row[column.name], trRow, textRow, column);\n                        });\n                        tableRows.push(trRow.join(''));\n                        textRows.push(textRow.join(','));\n                    }\n                });\n                t = headers.join(',') + (headers.length > 0 ? '\\n' : '') + textRows.join('\\n');\n                d = '<table>' + addTableHeaders() + '<tr>' + tableRows.join('</tr><tr>') + '</tr></table>';\n                e.clipboardData.setData('text/html', d);\n                e.clipboardData.setData('text/plain', t);\n                e.clipboardData.setData('text/csv', t);\n                e.clipboardData.setData('application/json', JSON.stringify(sData));\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        var touchTimerMs = 50,\n            touchScrollTimeout;\n        self.scrollAnimation = {};\n        self.touchDelta = {};\n        self.touchAnimateTo = {};\n        self.animationFrames = 0;\n        self.getTouchPos = function (e, touchIndex) {\n            var t = touchIndex ? e.touches[touchIndex] : e.touches[0],\n                rect = self.canvas.getBoundingClientRect(),\n                pos;\n            if (!t) { return; }\n            pos = {\n                x: t.clientX - rect.left,\n                y: t.clientY - rect.top\n            };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        // shamelessly stolen from from https://gist.github.com/gre/1650294\n        self.easingFunctions = {\n            linear: function (t) { return t; },\n            easeInQuad: function (t) { return t * t; },\n            easeOutQuad: function (t) { return t * (2 - t); },\n            easeInOutQuad: function (t) { return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t; },\n            easeInCubic: function (t) { return t * t * t; },\n            easeOutCubic: function (t) { return (--t) * t * t + 1; },\n            easeInOutCubic: function (t) { return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1; },\n            easeInQuart: function (t) { return t * t * t * t; },\n            easeOutQuart: function (t) { return 1 - (--t) * t * t * t; },\n            easeInOutQuart: function (t) { return t < 0.5 ? 8 * t  * t  * t * t : 1 - 8 * (--t) * t * t * t; },\n            easeInQuint: function (t) { return t * t * t * t * t; },\n            easeOutQuint: function (t) { return 1 + (--t) * t *  t * t * t; },\n            easeInOutQuint: function (t) { return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t; }\n        };\n        self.easing = function (t, b, c, d) {\n            return c * self.easingFunctions[self.attributes.touchEasingMethod](t / d) + b;\n        };\n        self.calculatePPSTimed = function () {\n            self.xPPST = -((self.touchDelta.x - self.touchSigmaTimed.x) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.yPPST = -((self.touchDelta.y - self.touchSigmaTimed.y) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.touchSigmaTimed = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.calculatePPS = function () {\n            self.xPPS = -((self.touchDelta.x - self.touchSigma.x) / (self.touchDelta.t - self.touchSigma.t));\n            self.yPPS = -((self.touchDelta.y - self.touchSigma.y) / (self.touchDelta.t - self.touchSigma.t));\n            self.touchSigma = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.touchEndAnimation = function () {\n            if (!self.canvas || !self.scrollBox.scrollTo) { return requestAnimationFrame(self.touchEndAnimation); }\n            var n = performance.now(),\n                d = self.attributes.touchReleaseAnimationDurationMs,\n                t;\n            t = n - self.touchDelta.t;\n            self.animationFrames += 1;\n            self.scrollAnimation.x = self.easing(t, self.touchDelta.scrollLeft, self.touchAnimateTo.x, d);\n            self.scrollAnimation.y = self.easing(t, self.touchDelta.scrollTop, self.touchAnimateTo.y, d);\n            if (t > d || (self.scrollAnimation.y === self.scrollBox.scrollTop\n                    && self.scrollAnimation.x === self.scrollBox.scrollLeft) || self.stopAnimation) {\n                return;\n            }\n            self.scrollBox.scrollTo(self.scrollAnimation.x, self.scrollAnimation.y);\n            requestAnimationFrame(self.touchEndAnimation);\n        };\n        self.touchEditCell = function (cell) {\n            self.beginEditAt(cell.columnIndex, cell.rowIndex);\n        };\n        self.touchCell = function (e) {\n            return function () {\n                clearInterval(self.calculatePPSTimer);\n                var i, pos = self.getTouchPos(e);\n                if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone) {\n                    i = self.getCellAt(pos.x, pos.y);\n                    if (!i) { return; }\n                    if (self.touchingCell && self.touchingCell.rowIndex === i.rowIndex\n                            && self.touchingCell.columnIndex === i.columnIndex) {\n                        self.touchEditCell(i);\n                        return;\n                    }\n                    if (self.input && self.input.editCell) {\n                        self.endEdit();\n                    }\n                    self.touchingCell = i;\n                    self.selectArea({\n                        top: i.rowIndex,\n                        bottom: i.rowIndex,\n                        left: i.columnIndex,\n                        right: i.columnIndex\n                    });\n                    self.draw(true);\n                }\n            };\n        };\n        self.touchstart = function (e) {\n            if (e.changedTouches[0]) {\n                self.touchStart = self.getTouchPos(e);\n                self.startingCell = self.getCellAt(self.touchStart.x, self.touchStart.y, true);\n            }\n            if (self.dispatchEvent('touchstart', {NativeEvent: e, cell: self.startingCell})) { return; }\n            self.disposeContextMenu();\n            clearInterval(self.calculatePPSTimer);\n            clearTimeout(self.touchContextTimeout);\n            self.touchStartEvent = e;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (e.touches.length === 1 && e.changedTouches[0] && !self.zoomAltered) {\n                self.touchLength = 1;\n                self.touchStart = self.touchStart || self.touchStart1;\n                self.touchScrollStart = {\n                    x: self.scrollBox.scrollLeft,\n                    y: self.scrollBox.scrollTop,\n                    t: performance.now()\n                };\n                self.touchDelta = {\n                    x: 0,\n                    y: 0,\n                    scrollLeft: self.scrollBox.scrollLeft,\n                    scrollTop: self.scrollBox.scrollTop,\n                    t: self.touchScrollStart.t\n                };\n                self.touchSigma = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchSigmaTimed = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchContextTimeout = setTimeout(function () {\n                    self.contextmenuEvent(e, self.touchStart);\n                }, self.attributes.touchContextMenuTimeMs);\n                self.calculatePPSTimer = setInterval(self.calculatePPSTimed, touchTimerMs);\n                if (self.startingCell && (self.startingCell.isGrid || ['tree', 'inherit'].indexOf(self.startingCell.context) !== -1)) {\n                    self.hasFocus = false;\n                    return;\n                }\n                self.hasFocus = true;\n                if (self.startingCell.isHeader) {\n                    if (self.startingCell.isRowHeader) {\n                        self.selectArea({\n                            top: self.startingCell.rowIndex,\n                            bottom: self.startingCell.rowIndex,\n                            left: 0,\n                            right: self.getVisibleSchema().length - 1,\n                        });\n                        self.draw(true);\n                    } else if (self.startingCell.isColumnHeader) {\n                        if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                            if (self.orderBy === self.startingCell.header.name) {\n                                self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                            } else {\n                                self.orderDirection = 'asc';\n                            }\n                            self.order(self.startingCell.header.name, self.orderDirection);\n                        }\n                        if (self.attributes.columnHeaderClickBehavior === 'select') {\n                            self.selectArea({\n                                top: 0,\n                                bottom: self.data.length - 1,\n                                left: self.startingCell.columnIndex,\n                                right: self.startingCell.columnIndex,\n                            });\n                            self.draw(true);\n                        }\n                    }\n                    self.touchEndEvents(e);\n                    return;\n                }\n            }\n            if (self.zoomAltered) { return; }\n            document.body.addEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.addEventListener('touchend', self.touchend, false);\n            document.body.addEventListener('touchcancel', self.touchcancel, false);\n            self.draw(true);\n        };\n        self.touchSelect = function (cell, handleType) {\n            if (cell.rowIndex === undefined || cell.columnIndex === undefined) { return; }\n            self.touchSelecting = true;\n            var bounds = self.getSelectionBounds();\n            if (handleType === 'selection-handle-bl'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex <= bounds.right) {\n                bounds.bottom = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tl'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex <= bounds.right) {\n                bounds.top = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tr'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex >= bounds.left) {\n                bounds.top = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            } else if (handleType === 'selection-handle-br'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex >= bounds.left) {\n                bounds.bottom = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            }\n            if (self.attributes.selectionMode === 'row' || cell.rowIndex === -1) {\n                bounds.left = 0;\n                bounds.right = self.getSchema().length - 1;\n            } else {\n                bounds.left = Math.max(0, bounds.left);\n            }\n            self.selectArea(bounds);\n            self.draw(true);\n        };\n        self.touchmove = function (e) {\n            var ch, rw, rScrollZone, lScrollZone, bScrollZone, tScrollZone, sbw, t1, t2;\n            if (self.dispatchEvent('beforetouchmove', {NativeEvent: e})) { return; }\n            clearTimeout(touchScrollTimeout);\n            if (e.changedTouches[0]) {\n                self.touchPosition = self.getTouchPos(e);\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = self.getTouchPos(e, 1);\n            }\n            if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) > self.attributes.touchDeadZone) {\n                clearTimeout(self.touchContextTimeout);\n            }\n            if (e.touches.length === 2 && self.touchPosition && self.touchPosition1) {\n                t1 = self.touchPosition.y;\n                t2 = self.touchPosition1.y;\n                if (!self.zoomDeltaStart) {\n                    self.zoomDeltaStart = Math.abs(t1 - t2);\n                    self.startScale = self.scale;\n                }\n                self.touchLength = 2;\n                self.scaleDelta = self.zoomDeltaStart - Math.abs(t1 - t2);\n                self.scale = self.startScale - (self.scaleDelta * self.attributes.touchZoomSensitivity);\n                self.scale = Math.min(Math.max(self.scale, self.attributes.touchZoomMin), self.attributes.touchZoomMax);\n                self.zoomAltered = true;\n                self.resize(true);\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.zoomAltered) { return; }\n            self.touchLength = 1;\n            self.touchPosition = self.touchPosition || self.touchPosition1;\n            ch = self.getColumnHeaderCellHeight();\n            rw = self.getRowHeaderCellWidth();\n            rScrollZone = self.width - self.style.scrollBarWidth - self.touchPosition.x < self.attributes.selectionScrollZone;\n            lScrollZone = self.touchPosition.x - rw < self.attributes.selectionScrollZone;\n            bScrollZone = self.height - self.style.scrollBarWidth - self.touchPosition.y < self.attributes.selectionScrollZone;\n            tScrollZone = self.touchPosition.y - ch < self.attributes.selectionScrollZone;\n            sbw = self.style.scrollBarWidth;\n            function touchScroll() {\n                var x = self.scrollBox.scrollLeft,\n                    y = self.scrollBox.scrollTop;\n                x += (rScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y += (bScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y -= (tScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                x -= (lScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                self.scrollBox.scrollTo(x, y);\n                touchScrollTimeout = setTimeout(touchScroll, self.attributes.scrollRepeatRate);\n            }\n            e.stopPropagation();\n            self.touchDelta = {\n                x: self.touchPosition.x - self.touchStart.x,\n                y: self.touchPosition.y - self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: performance.now()\n            };\n            self.currentCell = self.getCellAt(self.touchPosition.x, self.touchPosition.y);\n            self.dispatchEvent('touchmove', {NativeEvent: e, cell: self.currentCell});\n            self.calculatePPS();\n            self.touchDuration = performance.now() - self.touchScrollStart.t;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            if (self.touchSelecting && (rScrollZone || lScrollZone || tScrollZone || bScrollZone)) {\n                touchScroll();\n            }\n            if (/vertical-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollTop = self.scrollBox.scrollHeight\n                    * ((self.touchPosition.y - ch - sbw) / (self.scrollBox.height - sbw - ch));\n                return;\n            }\n            if (/horizontal-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollLeft = self.scrollBox.scrollWidth\n                    * ((self.touchPosition.x - rw - sbw) / (self.scrollBox.width - sbw - rw));\n                return;\n            }\n            if (/selection-handle-/.test(self.startingCell.style)) {\n                self.touchSelect(self.currentCell, self.startingCell.style);\n                return;\n            }\n            self.scrollBox.scrollTo(self.touchScrollStart.x - self.touchDelta.x,\n                self.touchScrollStart.y - self.touchDelta.y);\n            self.draw(true);\n        };\n        self.touchEndEvents = function (e) {\n            self.zoomDeltaStart = undefined;\n            self.touchSelecting = false;\n            clearInterval(self.touchScrollTimeout);\n            clearInterval(self.touchContextTimeout);\n            clearInterval(self.calculatePPSTimer);\n            e.stopPropagation();\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n        };\n        self.touchend = function (e) {\n            if (self.dispatchEvent('touchend', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.zoomDeltaStart = undefined;\n            if (e.changedTouches[0]) {\n                self.touchPosition = undefined;\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = undefined;\n            }\n            if (self.zoomAltered) {\n                if (e.touches.length === 0) {\n                    self.zoomAltered = false;\n                }\n                return;\n            }\n            var dz = Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone;\n            if (isNaN(self.xPPS)) {\n                self.xPPS = 0;\n            }\n            if (isNaN(self.yPPS)) {\n                self.yPPS = 0;\n            }\n            if (isNaN(self.xPPST)) {\n                self.xPPST = 0;\n            }\n            if (isNaN(self.yPPST)) {\n                self.yPPST = 0;\n            }\n            self.touchAnimateTo.x = self.xPPS * self.attributes.touchReleaseAcceleration;\n            self.touchAnimateTo.y = self.yPPS * self.attributes.touchReleaseAcceleration;\n            self.calculatePPSTimed();\n            if (dz && !self.contextMenu) {\n                self.touchCell(self.touchStartEvent)();\n            } else if (self.animationFrames === 0\n                    && (Math.abs(self.xPPST) > self.attributes.scrollAnimationPPSThreshold\n                        || Math.abs(self.yPPST) > self.attributes.scrollAnimationPPSThreshold)\n                    && !/-scroll-/.test(self.startingCell.style)\n                    && !dz) {\n                self.stopAnimation = false;\n                self.touchEndAnimation();\n            }\n            self.touchEndEvents(e);\n        };\n        self.touchcancel = function (e) {\n            if (self.dispatchEvent('touchcancel', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.touchEndEvents(e);\n        };\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals HTMLElement: false, Reflect: false, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self, ctor) {\n        self.scale = 1;\n        self.orders = {\n            rows: [],\n            columns: []\n        };\n        self.cellGridAttributes = {};\n        self.treeGridAttributes = {};\n        self.visibleRowHeights = [];\n        self.hasFocus = false;\n        self.pkDefined = true;\n        self.activeCell = {\n            columnIndex: 0,\n            rowIndex: 0\n        };\n        self.innerHTML = '';\n        self.storageName = 'canvasDataGrid';\n        self.invalidSearchExpClass = 'canvas-datagrid-invalid-search-regExp';\n        self.localStyleLibraryStorageKey = 'canvas-datagrid-user-style-library';\n        self.uniqueId = '_canvasDataGridUniqueId';\n        self.dataType = 'application/x-canvas-datagrid';\n        self.orderBy = null;\n        self.orderDirection = 'asc';\n        self.columnFilters = {};\n        self.filters = {};\n        self.frozenRow = 0;\n        self.frozenColumn = 0;\n        self.ellipsisCache = {};\n        self.scrollCache = { x: [], y: [] };\n        self.scrollBox = {};\n        self.visibleRows = [];\n        self.sizes = {\n            rows: {},\n            columns: {},\n            trees: {}\n        };\n        self.currentFilter = function () {\n            return true;\n        };\n        self.selections = [];\n        self.hovers = {};\n        self.attributes = {};\n        self.style = {};\n        self.formatters = {};\n        self.sorters = {};\n        self.parsers = {};\n        self.schemaHashes = {};\n        self.events = {};\n        self.uId = 0;\n        self.changes = [];\n        self.scrollIndexTop = 0;\n        self.scrollPixelTop = 0;\n        self.scrollIndexLeft = 0;\n        self.scrollPixelLeft = 0;\n        self.childGrids = {};\n        self.openChildren = {};\n        self.scrollModes = [\n            'vertical-scroll-box',\n            'vertical-scroll-top',\n            'vertical-scroll-bottom',\n            'horizontal-scroll-box',\n            'horizontal-scroll-right',\n            'horizontal-scroll-left'\n        ];\n        self.componentL1Events = {};\n        self.eventNames = ['afterdraw', 'afterrendercell', 'attributechanged', 'beforebeginedit',\n            'beforecreatecellgrid', 'beforedraw', 'beforeendedit', 'beforerendercell', 'beforerendercellgrid',\n            'beginedit', 'cellmouseout', 'cellmouseover', 'click', 'collapsetree', 'contextmenu', 'copy',\n            'datachanged', 'dblclick', 'endedit', 'expandtree', 'formatcellvalue', 'keydown', 'keypress',\n            'keyup', 'mousedown', 'mousemove', 'mouseup', 'newrow', 'ordercolumn', 'rendercell', 'rendercellgrid',\n            'renderorderbyarrow', 'rendertext', 'rendertreearrow', 'reorder', 'reordering', 'resize',\n            'resizecolumn', 'resizerow', 'schemachanged', 'scroll', 'selectionchanged', 'stylechanged',\n            'touchcancel', 'touchend', 'touchmove', 'touchstart', 'wheel'];\n        self.mouse = { x: 0, y: 0};\n        self.getSelectedData = function (expandToRow) {\n            var d = [], s = expandToRow ? self.getSchema() : self.getVisibleSchema(), l = self.data.length;\n            if (l === 0) { return []; }\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    var orderedIndex;\n                    if (col === -1 || !s[col]) { return; }\n                    orderedIndex = self.orders.columns[col];\n                    d[index][s[orderedIndex].name] = self.data[index][s[orderedIndex].name];\n                });\n            });\n            return d;\n        };\n        self.getColumnHeaderCellHeight = function () {\n            if (!self.attributes.showColumnHeaders) { return 0; }\n            return ((self.sizes.rows[-1] || self.style.columnHeaderCellHeight) * self.scale);\n        };\n        self.getRowHeaderCellWidth = function () {\n            if (!self.attributes.showRowHeaders) { return 0; }\n            return (self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth) * self.scale;\n        };\n        self.setStorageData = function () {\n            if (!self.attributes.saveAppearance || !self.attributes.name) { return; }\n            var visibility = {};\n            self.getSchema().forEach(function (column) {\n                visibility[column.name] = !column.hidden;\n            });\n            localStorage.setItem(self.storageName + '-' + self.attributes.name, JSON.stringify({\n                sizes: {\n                    rows: self.sizes.rows,\n                    columns: self.sizes.columns\n                },\n                orders: {\n                    rows: self.orders.rows,\n                    columns: self.orders.columns\n                },\n                orderBy: self.orderBy,\n                orderDirection: self.orderDirection,\n                visibility: visibility\n            }));\n        };\n        self.getSchema = function () {\n            return self.schema || self.tempSchema || [];\n        };\n        function fillArray(low, high) {\n            var i = [], x;\n            for (x = low; x <= high; x += 1) {\n                i[x] = x;\n            }\n            return i;\n        }\n        self.createColumnOrders = function () {\n            var s = self.getSchema();\n            self.orders.columns = fillArray(0, s.length - 1);\n        };\n        self.createRowOrders = function () {\n            self.orders.rows = fillArray(0, self.data.length - 1);\n        };\n        self.getVisibleSchema = function () {\n            return self.getSchema().filter(function (col) {\n                return !col.hidden && col.name !== self.uniqueId;\n            });\n        };\n        self.applyDefaultValue = function (row, header) {\n            var d = header.defaultValue || '';\n            if (typeof d === 'function') {\n                d = d.apply(self.intf, [header]);\n            }\n            row[header.name] = d;\n        };\n        self.createNewRowData = function () {\n            self.newRow = {};\n            self.newRow[self.uniqueId] = self.uId;\n            self.uId += 1;\n            self.getSchema().forEach(function forEachHeader(header) {\n                self.applyDefaultValue(self.newRow, header);\n            });\n        };\n        self.getSchemaNameHash = function (key) {\n            var n = 0;\n            while (self.schemaHashes[key]) {\n                n += 1;\n                key = key + n;\n            }\n            return key;\n        };\n        self.filter = function (type) {\n            var f = self.filters[type];\n            if (!f && type !== undefined) {\n                console.warn('Cannot find filter for type %s, falling back to substring match.', type);\n                f = self.filters.string;\n            }\n            return f;\n        };\n        self.getBestGuessDataType = function (columnName, data) {\n            var t, x, l = data.length;\n            for (x = 0; x < l; x += 1) {\n                if ([null, undefined].indexOf(data[x][columnName]) !== -1) {\n                    t = typeof data[x];\n                    return t === 'object' ? 'string' : t;\n                }\n            }\n            return 'string';\n        };\n        self.drawChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].draw();\n            });\n        };\n        self.resizeChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].resize();\n            });\n        };\n        self.autoScrollZone = function (e, x, y, ctrl) {\n            var setTimer,\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight();\n            if (x > self.width - self.attributes.selectionScrollZone && x < self.width) {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y > self.height - self.attributes.selectionScrollZone && y < self.height) {\n                self.scrollBox.scrollTop += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (x - self.attributes.selectionScrollZone - rowHeaderCellWidth < 0) {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y - self.attributes.selectionScrollZone - columnHeaderCellHeight < 0) {\n                self.scrollBox.scrollTop -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (setTimer && !ctrl && self.currentCell && self.currentCell.columnIndex !== -1) {\n                self.scrollTimer = setTimeout(self.mousemove, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.refreshFromOrigialData = function () {\n            self.data = self.originalData.filter(function (row) {\n                return true;\n            });\n        };\n        self.validateColumn = function (c, s) {\n            if (!c.name) {\n                throw new Error('A column must contain at least a name.');\n            }\n            if (s.filter(function (i) { return i.name === c.name; }).length > 0) {\n                throw new Error('A column with the name '\n                    + c.name + ' already exists and cannot be added again.');\n            }\n            return true;\n        };\n        self.setDefaults = function (obj1, obj2, key, def) {\n            obj1[key] = obj2[key] === undefined ? def : obj2[key];\n        };\n        self.setAttributes = function () {\n            self.defaults.attributes.forEach(function eachAttribute(i) {\n                self.setDefaults(self.attributes, self.args, i[0], i[1]);\n            });\n        };\n        self.setStyle = function () {\n            self.defaults.styles.forEach(function eachStyle(i) {\n                self.setDefaults(self.style, self.args.style || {}, i[0], i[1]);\n            });\n        };\n        self.autosize = function (colName) {\n            self.getVisibleSchema().forEach(function (col) {\n                if (col.name === colName || colName === undefined) {\n                    self.fitColumnToValues(col.name);\n                }\n            });\n            self.fitColumnToValues('cornerCell');\n        };\n        self.dispose = function () {\n            if (!self.isChildGrid && self.canvas && self.canvas.parentNode) {\n                self.canvas.parentNode.removeChild(self.canvas);\n            }\n            self.eventParent.removeEventListener('mouseup', self.mouseup, false);\n            self.eventParent.removeEventListener('mousedown', self.mousedown, false);\n            self.eventParent.removeEventListener('dblclick', self.dblclick, false);\n            self.eventParent.removeEventListener('click', self.click, false);\n            self.eventParent.removeEventListener('mousemove', self.mousemove);\n            self.eventParent.removeEventListener('wheel', self.scrollWheel, false);\n            self.canvas.removeEventListener('contextmenu', self.contextmenu, false);\n            self.canvas.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('keypress', self.keypress, false);\n            self.controlInput.removeEventListener('keyup', self.keyup, false);\n            self.controlInput.removeEventListener('keydown', self.keydown, false);\n            window.removeEventListener('resize', self.resize);\n            if (self.observer && self.observer.disconnect) {\n                self.observer.disconnect();\n            }\n        };\n        self.tryLoadStoredSettings = function () {\n            var s;\n            self.reloadStoredValues();\n            if (self.storedSettings\n                    && typeof self.storedSettings.orders === 'object'\n                    && self.storedSettings.orders !== null) {\n                if (self.storedSettings.orders.rows.length >= self.data.length) {\n                    self.orders.rows = self.storedSettings.orders.rows;\n                }\n                s = self.getSchema();\n                if (self.storedSettings.orders.columns.length === s.length) {\n                    self.orders.columns = self.storedSettings.orders.columns;\n                }\n                self.orderBy = self.storedSettings.orderBy === undefined\n                    ? self.uniqueId : self.storedSettings.orderBy;\n                self.orderDirection = self.storedSettings.orderDirection === undefined\n                    ? self.uniqueId : self.storedSettings.orderDirection;\n                if (self.orderBy !== self.uniqueId && self.getHeaderByName(self.orderBy) && self.orderDirection) {\n                    self.order(self.orderBy, self.orderDirection);\n                }\n            }\n        };\n        self.getDomRoot = function () {\n            return self.shadowRoot ? self.shadowRoot.host : self.parentNode;\n        };\n        self.getFontName = function (fontStyle) {\n            return fontStyle.replace(/\\d+\\.?\\d*px/, '');\n        };\n        self.getFontHeight = function (fontStyle) {\n            return parseFloat(fontStyle, 10);\n        };\n        self.parseStyleValue = function (key) {\n            if (/Font/.test(key)) {\n                self.style[key + 'Height'] = self.getFontHeight(self.style[key]);\n                self.style[key + 'Name'] = self.getFontName(self.style[key]);\n                return;\n            }\n            // when inheriting styles from already instantiated grids, don't parse already parsed values.\n            if (key === 'moveOverlayBorderSegments' && typeof self.style[key] === 'string') {\n                self.style[key] = self.style[key].split(',')\n                    .map(function (i) { return parseInt(i, 10); });\n            }\n        };\n        self.initProp = function (propName) {\n            if (!self.args[propName]) { return; }\n            Object.keys(self.args[propName]).forEach(function (key) {\n                self[propName][key] = self.args[propName][key];\n            });\n        };\n        self.getStyleProperty = function (key) {\n            if (self.styleKeys.indexOf(key) === -1) {\n                return self.parentNodeStyle[key];\n            }\n            return self.style[key];\n        };\n        self.setStyleProperty = function (key, value, supressDrawAndEvent) {\n            var isDim = ['height', 'width', 'minHeight', 'minWidth', 'maxHeight', 'maxWidth'].indexOf(key) !== -1;\n            if (self.styleKeys.indexOf(key) === -1) {\n                self.parentNodeStyle[key] = value;\n            } else {\n                self.style[key] = value;\n                self.parseStyleValue(key);\n            }\n            if (isDim) {\n                self.resize();\n            }\n            if (!supressDrawAndEvent) {\n                self.draw(true);\n                self.dispatchEvent('stylechanged', {name: 'style', value: value});\n            }\n        };\n        self.reloadStoredValues = function () {\n            if (self.attributes.name && self.attributes.saveAppearance) {\n                self.storedSettings = localStorage.getItem(self.storageName + '-' + self.attributes.name);\n                if (self.storedSettings) {\n                    try {\n                        self.storedSettings = JSON.parse(self.storedSettings);\n                    } catch (e) {\n                        console.warn('could not read settings from localStore', e);\n                        self.storedSettings = undefined;\n                    }\n                }\n                if (self.storedSettings) {\n                    if (typeof self.storedSettings.sizes === 'object'\n                            && self.storedSettings.sizes !== null) {\n                        self.sizes.rows = self.storedSettings.sizes.rows;\n                        self.sizes.columns = self.storedSettings.sizes.columns;\n                        ['trees', 'columns', 'rows'].forEach(function (i) {\n                            if (!self.sizes[i]) {\n                                self.sizes[i] = {};\n                            }\n                        });\n                    }\n                    if (typeof self.storedSettings.visibility === 'object') {\n                        self.getSchema().forEach(function (column) {\n                            if (self.storedSettings.visibility && self.storedSettings.visibility[column.name] !== undefined) {\n                                column.hidden = !self.storedSettings.visibility[column.name];\n                            }\n                        });\n                    }\n                }\n            }\n        };\n        self.init = function () {\n            if (self.initialized) { return; }\n            var publicStyleKeyIntf = {};\n            self.setAttributes();\n            self.setStyle();\n            self.initScrollBox();\n            self.setDom();\n            self.nodeType = 'canvas-datagrid';\n            self.initialized = true;\n            self.ie = /Trident/.test(window.navigator.userAgent);\n            self.edge = /Edge/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.moz = /Gecko/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.mobile = /Mobile/i.test(window.navigator.userAgent);\n            self.cursorGrab = 'grab';\n            self.cursorGrabing = 'grabbing';\n            self.cursorGrab = self.webKit ? '-webkit-grab' : self.cursorGrab;\n            self.cursorGrabing = self.moz ? '-webkit-grabbing' : self.cursorGrabbing;\n            self.pointerLockPosition = {x: 0, y: 0};\n            Object.keys(self.style).forEach(self.parseStyleValue);\n            self.intf.moveSelection = self.moveSelection;\n            self.intf.moveTo = self.moveTo;\n            self.intf.addEventListener = self.addEventListener;\n            self.intf.removeEventListener = self.removeEventListener;\n            self.intf.dispatchEvent = self.dispatchEvent;\n            /**\n             * Releases grid resources and removes grid elements.\n             * @memberof canvasDatagrid\n             * @name dispose\n             * @method\n             */\n            self.intf.dispose = self.dispose;\n            /**\n             * Appends the grid to another element later.  Not implemented.\n             * @memberof canvasDatagrid\n             * @name appendTo\n             * @method\n             * @param {number} el The element to append the grid to.\n             */\n            self.intf.appendTo = self.appendTo;\n            self.intf.filters = self.filters;\n            self.intf.sorters = self.sorters;\n            self.intf.autosize = self.autosize;\n            self.intf.beginEditAt = self.beginEditAt;\n            self.intf.endEdit = self.endEdit;\n            self.intf.setActiveCell = self.setActiveCell;\n            self.intf.forEachSelectedCell = self.forEachSelectedCell;\n            self.intf.scrollIntoView = self.scrollIntoView;\n            self.intf.clearChangeLog = self.clearChangeLog;\n            self.intf.gotoCell = self.gotoCell;\n            self.intf.gotoRow = self.gotoRow;\n            self.intf.getHeaderByName = self.getHeaderByName;\n            self.intf.findColumnScrollLeft = self.findColumnScrollLeft;\n            self.intf.findRowScrollTop = self.findRowScrollTop;\n            self.intf.fitColumnToValues = self.fitColumnToValues;\n            self.intf.findColumnMaxTextLength = self.findColumnMaxTextLength;\n            self.intf.disposeContextMenu = self.disposeContextMenu;\n            self.intf.getCellAt = self.getCellAt;\n            self.intf.isCellVisible = self.isCellVisible;\n            self.intf.order = self.order;\n            self.intf.draw = self.draw;\n            self.intf.selectArea = self.selectArea;\n            self.intf.clipElement = self.clipElement;\n            self.intf.getSchemaFromData = self.getSchemaFromData;\n            self.intf.setFilter = self.setFilter;\n            self.intf.selectRow = self.selectRow;\n            self.intf.parentGrid = self.parentGrid;\n            self.intf.toggleTree = self.toggleTree;\n            self.intf.expandTree = self.expandTree;\n            self.intf.collapseTree = self.collapseTree;\n            self.intf.canvas = self.canvas;\n            self.intf.context = self.ctx;\n            self.intf.insertRow = self.insertRow;\n            self.intf.deleteRow = self.deleteRow;\n            self.intf.addRow = self.addRow;\n            self.intf.insertColumn = self.insertColumn;\n            self.intf.deleteColumn = self.deleteColumn;\n            self.intf.addColumn = self.addColumn;\n            self.intf.getClippingRect = self.getClippingRect;\n            self.intf.setRowHeight = self.setRowHeight;\n            self.intf.setColumnWidth = self.setColumnWidth;\n            self.intf.resetColumnWidths = self.resetColumnWidths;\n            self.intf.resetRowHeights = self.resetRowHeights;\n            self.intf.resize = self.resize;\n            self.intf.selectColumn = self.selectColumn;\n            self.intf.selectRow = self.selectRow;\n            self.intf.selectAll = self.selectAll;\n            self.intf.selectNone = self.selectNone;\n            self.intf.drawChildGrids = self.drawChildGrids;\n            self.intf.assertPxColor = self.assertPxColor;\n            self.intf.clearPxColorAssertions = self.clearPxColorAssertions;\n            self.intf.integerToAlpha = self.integerToAlpha;\n            self.intf.copy = self.copy;\n            self.intf.setStyleProperty = self.setStyleProperty;\n            Object.defineProperty(self.intf, 'defaults', {\n                get: function () {\n                    return {\n                        styles: self.defaults.styles.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {}),\n                        attributes: self.defaults.attributes.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {})\n                    };\n                }\n            });\n            self.styleKeys = Object.keys(self.intf.defaults.styles);\n            self.DOMStyles = window.getComputedStyle(document.body, null);\n            Object.keys(self.DOMStyles).concat(Object.keys(self.style)).forEach(function (key) {\n                // unless this line is here, Object.keys() will not work on <instance>.style\n                publicStyleKeyIntf[key] = undefined;\n                Object.defineProperty(publicStyleKeyIntf, key, {\n                    get: function () {\n                        return self.getStyleProperty(key);\n                    },\n                    set: function (value) {\n                        self.setStyleProperty(key, value);\n                    }\n                });\n            });\n            Object.defineProperty(self.intf, 'shadowRoot', {\n                get: function () {\n                    return self.shadowRoot;\n                }\n            });\n            Object.defineProperty(self.intf, 'activeCell', {\n                get: function () {\n                    return self.activeCell;\n                }\n            });\n            Object.defineProperty(self.intf, 'hasFocus', {\n                get: function () {\n                    return self.hasFocus;\n                }\n            });\n            Object.defineProperty(self.intf, 'style', {\n                get: function () {\n                    return publicStyleKeyIntf;\n                },\n                set: function (valueObject) {\n                    Object.keys(valueObject).forEach(function (key) {\n                        self.setStyleProperty(key, valueObject[key], true);\n                    });\n                    self.draw(true);\n                    self.dispatchEvent('stylechanged', {name: 'style', value: valueObject});\n                }\n            });\n            Object.defineProperty(self.intf, 'attributes', { value: {}});\n            Object.keys(self.attributes).forEach(function (key) {\n                Object.defineProperty(self.intf.attributes, key, {\n                    get: function () {\n                        return self.attributes[key];\n                    },\n                    set: function (value) {\n                        self.attributes[key] = value;\n                        if (key === 'name') {\n                            self.tryLoadStoredSettings();\n                        }\n                        self.draw(true);\n                        self.dispatchEvent('attributechanged', {name: key, value: value[key]});\n                    }\n                });\n            });\n            self.filters.string = function (value, filterFor) {\n                value = String(value);\n                var filterRegExp,\n                    regEnd = /\\/(i|g|m)*$/,\n                    pattern = regEnd.exec(filterFor),\n                    flags = pattern ? pattern[0].substring(1) : '',\n                    flagLength = flags.length;\n                self.invalidFilterRegEx = undefined;\n                if (filterFor.substring(0, 1) === '/' && pattern) {\n                    try {\n                        filterRegExp = new RegExp(filterFor.substring(1, filterFor.length - (flagLength + 1)), flags);\n                    } catch (e) {\n                        self.invalidFilterRegEx = e;\n                        return;\n                    }\n                    return filterRegExp.test(value);\n                }\n                return value.toString ? value.toString().toLocaleUpperCase()\n                    .indexOf(filterFor.toLocaleUpperCase()) !== -1 : false;\n            };\n            self.filters.number = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                return value === filterFor;\n            };\n            ['formatters', 'filters', 'sorters'].forEach(self.initProp);\n            self.applyComponentStyle(false, self.intf);\n            self.resize();\n            self.reloadStoredValues();\n            if (self.args.data) {\n                self.intf.data = self.args.data;\n            }\n            if (!self.data) {\n                self.intf.data = [];\n            }\n            if (self.intf.innerText || self.intf.textContent) {\n                try {\n                    self.intf.data = JSON.parse(self.intf.innerText || self.intf.textContent);\n                } catch (e) {\n                    console.warn('Cannot parse innerText', e);\n                }\n            }\n            if (self.args.schema) {\n                self.intf.schema = self.args.schema;\n            }\n            if (self.isChildGrid) {\n                requestAnimationFrame(function () { self.resize(true); });\n            } else {\n                self.resize(true);\n            }\n            return self;\n        };\n        /**\n         * Removes focus from the grid.\n         * @memberof canvasDatagrid\n         * @name blur\n         * @method\n         */\n        self.intf.blur = function (e) {\n            self.hasFocus = false;\n        };\n        /**\n         * Focuses on the grid.\n         * @memberof canvasDatagrid\n         * @name focus\n         * @method\n         */\n        self.intf.focus = function () {\n            self.hasFocus = true;\n            self.controlInput.focus();\n        };\n        if (self.shadowRoot || self.isChildGrid) {\n            Object.defineProperty(self.intf, 'height', {\n                get: function () {\n                    if (self.shadowRoot) {\n                        return self.shadowRoot.height;\n                    }\n                    return self.parentNode.height;\n                },\n                set: function (value) {\n                    if (self.shadowRoot) {\n                        self.shadowRoot.height = value;\n                    } else {\n                        self.parentNode.height = value;\n                    }\n                    self.resize(true);\n                }\n            });\n            Object.defineProperty(self.intf, 'width', {\n                get: function () {\n                    if (self.shadowRoot) {\n                        return self.shadowRoot.width;\n                    }\n                    return self.parentNode.width;\n                },\n                set: function (value) {\n                    if (self.shadowRoot) {\n                        self.shadowRoot.width = value;\n                    } else {\n                        self.parentNode.width = value;\n                    }\n                    self.resize(true);\n                }\n            });\n            Object.defineProperty(self.intf, 'parentNode', {\n                get: function () {\n                    return self.parentNode;\n                },\n                set: function (value) {\n                    if (!self.isChildGrid) {\n                        throw new TypeError('Cannot set property parentNode which has only a getter');\n                    }\n                    self.parentNode = value;\n                }\n            });\n        }\n        Object.defineProperty(self.intf, 'visibleRowHeights', {\n            get: function () {\n                return self.visibleRowHeights;\n            }\n        });\n        Object.defineProperty(self.intf, 'openChildren', {\n            get: function () {\n                return self.openChildren;\n            }\n        });\n        Object.defineProperty(self.intf, 'childGrids', {\n            get: function () {\n                return Object.keys(self.childGrids).map(function (gridId) {\n                    return self.childGrids[gridId];\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'isChildGrid', {\n            get: function () {\n                return self.isChildGrid;\n            }\n        });\n        Object.defineProperty(self, 'cursor', {\n            get: function () {\n                return self.parentNodeStyle.cursor;\n            },\n            set: function (value) {\n                if (value === 'cell') { value = 'default'; }\n                if (self.currentCursor !== value) {\n                    self.parentNodeStyle.cursor = value;\n                    self.currentCursor = value;\n                }\n            }\n        });\n        Object.defineProperty(self.intf, 'orderDirection', {\n            get: function () {\n                return self.orderDirection;\n            },\n            set: function (value) {\n                if (value !== 'desc') {\n                    value = 'asc';\n                }\n                self.orderDirection = value;\n                self.order(self.orderBy, self.orderDirection);\n            }\n        });\n        Object.defineProperty(self.intf, 'orderBy', {\n            get: function () {\n                return self.orderBy;\n            },\n            set: function (value) {\n                if (self.getSchema().find(function (col) {\n                        return col.name === value;\n                    }) === undefined) {\n                    throw new Error('Cannot sort by unknown column name.');\n                }\n                self.orderBy = value;\n                self.order(self.orderBy, self.orderDirection);\n            }\n        });\n        if (self.isComponent) {\n            Object.defineProperty(self.intf, 'offsetHeight', {\n                get: function () {\n                    return self.canvas.offsetHeight;\n                }\n            });\n            Object.defineProperty(self.intf, 'offsetWidth', {\n                get: function () {\n                    return self.canvas.offsetWidth;\n                }\n            });\n        }\n        Object.defineProperty(self.intf, 'scrollHeight', {\n            get: function () {\n                return self.scrollBox.scrollHeight;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollWidth', {\n            get: function () {\n                return self.scrollBox.scrollWidth;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollTop', {\n            get: function () {\n                return self.scrollBox.scrollTop;\n            },\n            set: function (value) {\n                self.scrollBox.scrollTop = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollLeft', {\n            get: function () {\n                return self.scrollBox.scrollLeft;\n            },\n            set: function (value) {\n                self.scrollBox.scrollLeft = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'sizes', {\n            get: function () {\n                return self.sizes;\n            }\n        });\n        Object.defineProperty(self.intf, 'input', {\n            get: function () {\n                return self.input;\n            }\n        });\n        Object.defineProperty(self.intf, 'controlInput', {\n            get: function () {\n                return self.controlInput;\n            }\n        });\n        Object.defineProperty(self.intf, 'currentCell', {\n            get: function () {\n                return self.currentCell;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleCells', {\n            get: function () {\n                return self.visibleCells;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRows', {\n            get: function () {\n                return self.visibleRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'selections', {\n            get: function () {\n                return self.selections;\n            }\n        });\n        Object.defineProperty(self.intf, 'dragMode', {\n            get: function () {\n                return self.dragMode;\n            }\n        });\n        Object.defineProperty(self.intf, 'changes', {\n            get: function () {\n                return self.changes;\n            }\n        });\n        self.intf.formatters = self.formatters;\n        Object.defineProperty(self.intf, 'type', {\n            get: function () {\n                return self.dataType;\n            },\n            set: function (value) {\n                if (!self.parsers[value]) {\n                    throw new Error('No parser for MIME type ' + value);\n                }\n                self.dataType = value;\n            }\n        });\n        self.eventNames.forEach(function (eventName) {\n            Object.defineProperty(self.intf, 'on' + eventName, {\n                get: function () {\n                    return self.componentL1Events[eventName];\n                },\n                set: function (value) {\n                    self.events[eventName] = [];\n                    self.componentL1Events[eventName] = value;\n                    if (!value) { return; }\n                    self.addEventListener(eventName, value);\n                }\n            });\n        });\n        Object.defineProperty(self.intf, 'frozenRow', {\n            get: function () {\n                return self.frozenRow;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.visibleRows.length < val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible rows.');\n                }\n                self.frozenRow = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'frozenColumn', {\n            get: function () {\n                return self.frozenColumn;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.getVisibleSchema().length < val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible columns.');\n                }\n                self.frozenColumn = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollIndexRect', {\n            get: function () {\n                return {\n                    top: self.scrollIndexTop,\n                    right: self.scrollIndexRight,\n                    bottom: self.scrollIndexBottom,\n                    left: self.scrollIndexLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollPixelRect', {\n            get: function () {\n                return {\n                    top: self.scrollPixelTop,\n                    right: self.scrollPixelRight,\n                    bottom: self.scrollPixelBottom,\n                    left: self.scrollPixelLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'selectionBounds', {\n            get: function () {\n                return self.getSelectionBounds();\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedRows', {\n            get: function () {\n                return self.getSelectedData(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedCells', {\n            get: function () {\n                return self.getSelectedData();\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleSchema', {\n            get: function () {\n                return self.getVisibleSchema().map(function eachDataRow(col) {\n                    return col;\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'treeGridAttributes', {\n            get: function () {\n                return self.treeGridAttributes;\n            },\n            set: function setTreeGridAttributes(value) {\n                self.treeGridAttributes = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'cellGridAttributes', {\n            get: function () {\n                return self.cellGridAttributes;\n            },\n            set: function setCellGridAttributes(value) {\n                self.cellGridAttributes = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'ctx', {\n            get: function () {\n                return self.ctx;\n            }\n        });\n        Object.defineProperty(self.intf, 'schema', {\n            get: function schemaGetter() {\n                return self.getSchema();\n            },\n            set: function schemaSetter(value) {\n                if (value === undefined) {\n                    // Issue #89 - allow schema to be set to initialized state\n                    self.schema = undefined;\n                    self.tempSchema = undefined;\n                    self.dispatchEvent('schemachanged', {schema: undefined});\n                    return;\n                }\n                if (!Array.isArray(value) || typeof value[0] !== 'object') {\n                    throw new Error('Schema must be an array of objects.');\n                }\n                if (value[0].name === undefined) {\n                    throw new Error('Expected schema to contain an object with at least a name property.');\n                }\n                self.schema = value.map(function eachSchemaColumn(column, index) {\n                    column.width = column.width || self.style.cellWidth;\n                    column[self.uniqueId] = self.getSchemaNameHash(column.name);\n                    column.filter = column.filter || self.filter(column.type);\n                    column.type = column.type || 'string';\n                    column.index = index;\n                    column.columnIndex = index;\n                    column.rowIndex = -1;\n                    return column;\n                });\n                self.tempSchema = undefined;\n                self.createNewRowData();\n                self.createColumnOrders();\n                self.tryLoadStoredSettings();\n                if (self.storedSettings && typeof self.storedSettings.visibility === 'object') {\n                    self.schema.forEach(function hideEachSchemaColumn(column, index) {\n                        if (self.storedSettings && self.storedSettings.visibility[column.name] !== undefined) {\n                            column.hidden = !self.storedSettings.visibility[column.name];\n                        }\n                    });\n                }\n                self.resize(true);\n                self.dispatchEvent('schemachanged', {schema: self.schema});\n            }\n        });\n        /**\n         * Gets an array of currently registered MIME types.\n         * @memberof canvasDatagrid\n         * @name getDataTypes\n         * @method\n         * @returns array List of registered MIME types.\n         */\n         //self.uniqueId\n        self.intf.getTypes = function () {\n            return Object.keys(self.parsers);\n        };\n        self.parsers['application/json+x-canvas-datagrid;2dArray'] = function (data, callback) {\n            self.parsers['application/x-canvas-datagrid;2dArray'](JSON.parse(data), function (data, schema) {\n                return callback(data, schema);\n            });\n        };\n        self.parsers['application/json+x-canvas-datagrid'] = function (data, callback) {\n            self.parsers['application/x-canvas-datagrid'](JSON.parse(data), function (data, schema) {\n                return callback(data, schema);\n            });\n        };\n        self.parsers['application/x-canvas-datagrid;2dArray'] = function (data, callback) {\n            var x, y, l, d, max;\n            // find the longest length\n            max = 0;\n            d = [];\n            l = data.length;\n            for (x = 0; x < l; x += 1) {\n                max = Math.max(max, data[x].length);\n            }\n            for (x = 0; x < l; x += 1) {\n                for (y = 0; y < max; y += 1) {\n                    d[x][y] = data[x][y];\n                }\n            }\n            // map against length indexes\n            data.forEach(function (row, index) {\n                d[index] = {};\n                for (x = 0; x < max; x += 1) {\n                    d[index][x] = row[x];\n                }\n            });\n            return callback(d, self.getSchemaFromData(data));\n        };\n        self.parsers['application/x-canvas-datagrid'] = function (data, callback) {\n            return callback(data);\n        };\n        self.intf.parsers = self.parsers;\n        // send to dataType ETL function to extract from input data\n        // and transform into native [{}, {}] format\n        self.etl = function (data, callback) {\n            if (!self.intf.parsers[self.dataType]) {\n                throw new Error('Unsupported data type.');\n            }\n            self.intf.parsers[self.dataType](data, function (data, schemaOrPk) {\n                var x, l, pk;\n                // overload for second argument.  Can be array schema or primary key column name\n                if (Array.isArray(schemaOrPk)) {\n                    self.schema = schemaOrPk;\n                } else if (typeof schemaOrPk === 'string') {\n                    pk = schemaOrPk;\n                    self.pkDefined = true;\n                }\n                // Issue #89 - allow schema to be auto-created every time data is set\n                if (self.attributes.autoGenerateSchema) {\n                    self.schema = self.getSchemaFromData(data);\n                }\n                if (!self.schema) {\n                    self.tempSchema = self.getSchemaFromData(data);\n                }\n                if (self.getSchema()) {\n                    self.createColumnOrders();\n                }\n                // set internal tracking of PK to the new PK\n                // or leave it be if no PK was set in this ETL task\n                self.uniqueId = pk || self.uniqueId;\n                // if no PK was defined, check schema and or define one now\n                if (!pk) {\n                    self.getSchema().forEach(function (col) {\n                        if (col.primaryKey) {\n                            pk = col.name;\n                            self.pkDefined = true;\n                        }\n                    });\n                    if (!pk) {\n                        l = data.length;\n                        for (x = 0; x < l; x += 1) {\n                            data[x][self.uniqueId] = x;\n                        }\n                        self.uId = x;\n                    }\n                }\n                // set the unfiltered/sorted data array\n                self.originalData = data;\n                //TODO apply filter to incoming dataset\n                self.data = self.originalData;\n                // empty data was set\n                if (!self.schema && self.data.length === 0) {\n                    self.tempSchema = [{name: ''}];\n                    self.tempSchema[0][self.uniqueId] = self.getSchemaNameHash('');\n                }\n                if ((self.tempSchema && !self.schema) || self.attributes.autoGenerateSchema) {\n                    self.createColumnOrders();\n                    self.dispatchEvent('schemachanged', {schema: self.tempSchema});\n                }\n            });\n        };\n        Object.defineProperty(self.intf, 'data', {\n            get: function dataGetter() {\n                if (self.pkDefined) {\n                    return self.data.map(function (row) {\n                        delete row[self.uniqueId];\n                        return row;\n                    });\n                }\n                return self.data;\n            },\n            set: function dataSetter(value) {\n                self.etl(value, function (d) {\n                    self.changes = [];\n                    self.createNewRowData();\n                    if (self.attributes.autoResizeColumns && self.data.length > 0\n                            && self.storedSettings === undefined) {\n                        self.autosize();\n                    }\n                    // set the header column to fit the numbers in it\n                    self.fitColumnToValues('cornerCell', true);\n                    if (!self.attributes.disableRowOrdering) {\n                        self.createRowOrders();\n                    }\n                    self.tryLoadStoredSettings();\n                    self.dispatchEvent('datachanged', {data: self.data});\n                    self.resize(true);\n                });\n            }\n        });\n        self.initScrollBox = function () {\n            var sHeight = 0,\n                sWidth = 0,\n                scrollTop = 0,\n                scrollLeft = 0,\n                scrollHeight = 0,\n                scrollWidth = 0,\n                scrollBoxHeight = 20,\n                scrollBoxWidth = 20;\n            function setScrollTop(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollTop value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollHeight) {\n                    value = scrollHeight;\n                }\n                if (scrollHeight < 0) {\n                    value = 0;\n                }\n                scrollTop = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            function setScrollLeft(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollLeft value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollWidth) {\n                    value = scrollWidth;\n                }\n                if (scrollWidth < 0) {\n                    value = 0;\n                }\n                scrollLeft = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            self.scrollBox.toString = function () {\n                return '{\"width\": ' + scrollWidth\n                    + ', \"height\": ' + scrollHeight\n                    + ', \"left\": ' + scrollLeft\n                    + ', \"top\": ' + scrollTop + '}';\n            };\n            self.scrollBox.scrollTo = function (x, y, supressDrawEvent) {\n                setScrollLeft(x, true);\n                setScrollTop(y, supressDrawEvent);\n            };\n            Object.defineProperty(self.scrollBox, 'scrollBoxHeight', {\n                get: function () {\n                    return scrollBoxHeight;\n                },\n                set: function (value) {\n                    scrollBoxHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollBoxWidth', {\n                get: function () {\n                    return scrollBoxWidth;\n                },\n                set: function (value) {\n                    scrollBoxWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'height', {\n                get: function () {\n                    return sHeight;\n                },\n                set: function (value) {\n                    if (scrollHeight < value) {\n                        scrollTop = 0;\n                    }\n                    sHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'width', {\n                get: function () {\n                    return sWidth;\n                },\n                set: function (value) {\n                    sWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollTop', {\n                get: function () {\n                    return scrollTop;\n                },\n                set: setScrollTop\n            });\n            Object.defineProperty(self.scrollBox, 'scrollLeft', {\n                get: function () {\n                    return scrollLeft;\n                },\n                set: setScrollLeft\n            });\n            Object.defineProperty(self.scrollBox, 'scrollHeight', {\n                get: function () {\n                    return scrollHeight;\n                },\n                set: function (value) {\n                    if (scrollTop > value) {\n                        scrollTop = Math.max(value, 0);\n                    }\n                    if (scrollHeight < sHeight) {\n                        scrollTop = 0;\n                    }\n                    scrollHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollWidth', {\n                get: function () {\n                    return scrollWidth;\n                },\n                set: function (value) {\n                    if (scrollLeft > value) {\n                        scrollLeft = Math.max(value, 0);\n                    }\n                    scrollWidth = value;\n                }\n            });\n        };\n        return;\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false, Event: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        var zIndexTop, hoverScrollTimeout, autoCompleteContext;\n        function applyContextItemStyle(contextItemContainer) {\n            self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item' + (self.mobile ? '-mobile' : ''));\n            contextItemContainer.addEventListener('mouseover', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n            });\n            contextItemContainer.addEventListener('mouseout', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n            });\n        }\n        function createContextMenu(ev, pos, items, parentContextMenu) {\n            var container = document.createElement('div'),\n                upArrow = document.createElement('div'),\n                downArrow = document.createElement('div'),\n                children = [],\n                selectedIndex = -1,\n                intf = {},\n                rect;\n            if (!Array.isArray(items)) { throw new Error('createContextMenu expects an array.'); }\n            function createItems() {\n                items.forEach(function (item) {\n                    var contextItemContainer = document.createElement('div'),\n                        childMenuArrow;\n                    function removeChildContext(e) {\n                        if (e.relatedTarget === container\n                                || item.contextMenu.container === e.relatedTarget\n                                || childMenuArrow === e.relatedTarget\n                                || (contextItemContainer === e.relatedTarget)\n                                || item.contextMenu.container.contains(e.relatedTarget)\n                                ) { return; }\n                        item.contextMenu.dispose();\n                        children.splice(children.indexOf(item.contextMenu), 1);\n                        item.contextMenu = undefined;\n                        contextItemContainer.removeEventListener('mouseout', removeChildContext);\n                        container.removeEventListener('mouseout', removeChildContext);\n                        contextItemContainer.setAttribute('contextOpen', '0');\n                        contextItemContainer.setAttribute('opening', '0');\n                    }\n                    function contextAddCallback(items) {\n                        // check yet again if the user hasn't moved off\n                        if (contextItemContainer.getAttribute('opening') !== '1' ||\n                                contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        var cPos = contextItemContainer.getBoundingClientRect();\n                        cPos = {\n                            left: cPos.left + self.style.childContextMenuMarginLeft + container.offsetWidth,\n                            top: cPos.top + self.style.childContextMenuMarginTop,\n                            bottom: cPos.bottom,\n                            right: cPos.right\n                        };\n                        item.contextMenu = createContextMenu(ev, cPos, items, intf);\n                        contextItemContainer.setAttribute('contextOpen', '1');\n                        contextItemContainer.addEventListener('mouseout', removeChildContext);\n                        container.addEventListener('mouseout', removeChildContext);\n                        children.push(item.contextMenu);\n                    }\n                    function createChildContext() {\n                        var i;\n                        if (contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        contextItemContainer.setAttribute('opening', '1');\n                        if (typeof item.items === 'function') {\n                            i  = item.items.apply(intf, [function (items) {\n                                contextAddCallback(items);\n                            }]);\n                            if (i !== undefined && Array.isArray(i)) {\n                                contextAddCallback(i);\n                            }\n                            return;\n                        }\n                        contextAddCallback(item.items);\n                    }\n                    function addItem(item) {\n                        function addContent(content) {\n                            if (content === null) { return; }\n                            if (typeof content === 'function') {\n                                return addContent(content(ev));\n                            }\n                            if (typeof content === 'object') {\n                                contextItemContainer.appendChild(content);\n                                return;\n                            }\n                            applyContextItemStyle(contextItemContainer);\n                            contextItemContainer.innerHTML = content;\n                            return;\n                        }\n                        addContent(item.title);\n                        item.contextItemContainer = contextItemContainer;\n                        if ((item.items && item.items.length > 0) || typeof item.items === 'function') {\n                            childMenuArrow = document.createElement('div');\n                            self.createInlineStyle(childMenuArrow, 'canvas-datagrid-context-child-arrow');\n                            childMenuArrow.innerHTML = self.style.childContextMenuArrowHTML;\n                            contextItemContainer.appendChild(childMenuArrow);\n                            contextItemContainer.addEventListener('mouseover', createChildContext);\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                contextItemContainer.setAttribute('opening', '0');\n                            });\n                        }\n                        if (item.click) {\n                            contextItemContainer.addEventListener('click', function (ev) {\n                                item.click.apply(self, [ev]);\n                            });\n                        }\n                    }\n                    addItem(item);\n                    container.appendChild(contextItemContainer);\n                });\n            }\n            function clickIndex(idx) {\n                items[idx].contextItemContainer.dispatchEvent(new Event('click'));\n            }\n            function checkArrowVisibility() {\n                if (container.scrollTop > 0) {\n                    self.parentDOMNode.appendChild(upArrow);\n                } else if (upArrow.parentNode) {\n                    upArrow.parentNode.removeChild(upArrow);\n                }\n                if (container.scrollTop >= container.scrollHeight - container.offsetHeight && downArrow.parentNode) {\n                    downArrow.parentNode.removeChild(downArrow);\n                } else if (container.scrollHeight - container.offsetHeight > 0\n                        && !(container.scrollTop >= container.scrollHeight - container.offsetHeight)) {\n                    self.parentDOMNode.appendChild(downArrow);\n                }\n            }\n            function startHoverScroll(type) {\n                return function t() {\n                    var a = self.attributes.contextHoverScrollAmount;\n                    if (type === 'up' && container.scrollTop === 0) { return; }\n                    if (type === 'down' && container.scrollTop === container.scrollHeight) { return; }\n                    container.scrollTop += (type === 'up' ? -a : a);\n                    hoverScrollTimeout = setTimeout(t, self.attributes.contextHoverScrollRateMs, type);\n                };\n            }\n            function endHoverScroll(type) {\n                return function () {\n                    clearTimeout(hoverScrollTimeout);\n                };\n            }\n            function init() {\n                var loc = {},\n                    s = self.scrollOffset(self.canvas);\n                if (zIndexTop === undefined) {\n                    zIndexTop = self.style.contextMenuZIndex;\n                }\n                createItems();\n                self.createInlineStyle(container, 'canvas-datagrid-context-menu' + (self.mobile ? '-mobile' : ''));\n                loc.x = pos.left - s.left;\n                loc.y = pos.top - s.top;\n                loc.height = 0;\n                zIndexTop += 1;\n                container.style.position = 'absolute';\n                upArrow.style.color = self.style.contextMenuArrowColor;\n                downArrow.style.color = self.style.contextMenuArrowColor;\n                [upArrow, downArrow].forEach(function (el) {\n                    el.style.textAlign = 'center';\n                    el.style.position = 'absolute';\n                    el.style.zIndex = zIndexTop + 1;\n                });\n                container.style.zIndex = zIndexTop;\n                if (parentContextMenu && parentContextMenu.inputDropdown) {\n                    container.style.maxHeight = window.innerHeight - loc.y - self.style.autocompleteBottomMargin + 'px';\n                    container.style.minWidth = pos.width + 'px';\n                    loc.y += pos.height;\n                }\n                if (self.mobile) {\n                    container.style.width = pos.width + 'px';\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                container.addEventListener('scroll', checkArrowVisibility);\n                container.addEventListener('wheel', function (e) {\n                    if (self.hasFocus) {\n                        container.scrollTop += e.deltaY;\n                        container.scrollLeft += e.deltaX;\n                    }\n                    checkArrowVisibility();\n                });\n                upArrow.innerHTML = self.style.contextMenuArrowUpHTML;\n                downArrow.innerHTML = self.style.contextMenuArrowDownHTML;\n                container.appendChild(upArrow);\n                document.body.appendChild(downArrow);\n                document.body.appendChild(container);\n                rect = container.getBoundingClientRect();\n                // TODO: fix !(parentContextMenu && parentContextMenu.inputDropdown) state (autocomplete)\n                if (rect.bottom > window.innerHeight) {\n                    if (!(parentContextMenu && parentContextMenu.inputDropdown)) {\n                        loc.y -= (rect.bottom + self.style.contextMenuWindowMargin) - window.innerHeight;\n                    }\n                    if (loc.y < 0) { loc.y = 0; }\n                    if (container.offsetHeight > window.innerHeight - self.style.contextMenuWindowMargin) {\n                        container.style.height = window.innerHeight - self.style.contextMenuWindowMargin + 'px';\n                        loc.y -= self.style.contextMenuWindowMargin;\n                    }\n                }\n                if (rect.right > window.innerWidth) {\n                    loc.x -= rect.right - window.innerWidth + self.style.contextMenuWindowMargin;\n                }\n                if (loc.x < 0) { loc.x = 0; }\n                if (loc.y < 0) { loc.y = 0; }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                rect = container.getBoundingClientRect();\n                upArrow.style.top = rect.top + 'px';\n                downArrow.style.top = rect.top + rect.height - downArrow.offsetHeight + 'px';\n                upArrow.style.left = rect.left + 'px';\n                downArrow.style.left = rect.left + 'px';\n                downArrow.style.width = container.offsetWidth + 'px';\n                upArrow.style.width = container.offsetWidth + 'px';\n                downArrow.addEventListener('mouseover', startHoverScroll('down'));\n                downArrow.addEventListener('mouseout', endHoverScroll('down'));\n                upArrow.addEventListener('mouseover', startHoverScroll('up'));\n                upArrow.addEventListener('mouseout', endHoverScroll('up'));\n                checkArrowVisibility();\n            }\n            intf.parentGrid = self.intf;\n            intf.parentContextMenu = parentContextMenu;\n            intf.container = container;\n            init();\n            intf.clickIndex = clickIndex;\n            intf.rect = rect;\n            intf.items = items;\n            intf.upArrow = upArrow;\n            intf.downArrow = downArrow;\n            intf.dispose = function () {\n                clearTimeout(hoverScrollTimeout);\n                children.forEach(function (c) {\n                    c.dispose();\n                });\n                [downArrow, upArrow, container].forEach(function (el) {\n                    if (el.parentNode) { el.parentNode.removeChild(el); }\n                });\n            };\n            Object.defineProperty(intf, 'selectedIndex', {\n                get: function () {\n                    return selectedIndex;\n                },\n                set: function (value) {\n                    if (typeof value !== 'number' || isNaN(value || !isFinite(value))) {\n                        throw new Error('Context menu selected index must be a sane number.');\n                    }\n                    selectedIndex = value;\n                    if (selectedIndex > items.length - 1) {\n                        selectedIndex = items.length - 1;\n                    }\n                    if (selectedIndex < 0) {\n                        selectedIndex = 0;\n                    }\n                    items.forEach(function (item, index) {\n                        if (index === selectedIndex) {\n                            return self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                        }\n                        self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item');\n                    });\n                }\n            });\n            return intf;\n        }\n        function createFilterContextMenuItems(e) {\n            var filterContainer = document.createElement('div'),\n                filterLabel = document.createElement('div'),\n                filterAutoCompleteButton = document.createElement('button'),\n                filterInput = document.createElement('input'),\n                n = e.cell && e.cell.header ? e.cell.header.title || e.cell.header.name : '',\n                autoCompleteItems,\n                iRect;\n            function checkRegExpErrorState() {\n                filterInput.style.background = self.style.contextFilterInputBackground;\n                filterInput.style.color = self.style.contextFilterInputColor;\n                if (self.invalidFilterRegEx) {\n                    filterInput.style.background = self.style.contextFilterInvalidRegExpBackground;\n                    filterInput.style.color = self.style.contextFilterInvalidRegExpColor;\n                }\n            }\n            function fillAutoComplete() {\n                var count = 0;\n                autoCompleteItems = {};\n                self.data.forEach(function (row) {\n                    var value = row[e.cell.header.name];\n                    if (autoCompleteItems[value] || count > self.attributes.maxAutoCompleteItems) { return; }\n                    count += 1;\n                    autoCompleteItems[value] = {\n                        title: self.formatters[e.cell.header.type || 'string']({ cell: { value: value }}),\n                        click: function (e) {\n                            filterInput.value = value;\n                            e.stopPropagation();\n                            filterInput.dispatchEvent(new Event('keyup'));\n                            self.disposeAutocomplete();\n                            return;\n                        }\n                    };\n                });\n                autoCompleteItems = Object.keys(autoCompleteItems).map(function (key) {\n                    return autoCompleteItems[key];\n                });\n            }\n            function createAutoCompleteContext(ev) {\n                if (ev && [40, 38, 13, 9].indexOf(ev.keyCode) !== -1) { return; }\n                fillAutoComplete();\n                iRect = filterInput.getBoundingClientRect();\n                if (autoCompleteContext) {\n                    autoCompleteContext.dispose();\n                    autoCompleteContext = undefined;\n                }\n                autoCompleteContext = createContextMenu(e, {\n                    left: iRect.left,\n                    top: iRect.top,\n                    right: iRect.right,\n                    bottom: iRect.bottom,\n                    height: iRect.height,\n                    width: iRect.width\n                }, autoCompleteItems, {inputDropdown: true});\n                autoCompleteContext.selectedIndex = 0;\n            }\n            self.createInlineStyle(filterLabel, 'canvas-datagrid-context-menu-label');\n            self.createInlineStyle(filterAutoCompleteButton, 'canvas-datagrid-context-menu-filter-button');\n            self.createInlineStyle(filterInput, 'canvas-datagrid-context-menu-filter-input');\n            checkRegExpErrorState();\n            filterInput.onclick = self.disposeAutocomplete;\n            filterInput.addEventListener('keydown', function (e) {\n                //down\n                if (e.keyCode === 40) {\n                    autoCompleteContext.selectedIndex += 1;\n                }\n                //up\n                if (e.keyCode === 38) {\n                    autoCompleteContext.selectedIndex -= 1;\n                }\n                //enter\n                if (e.keyCode === 13) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    self.disposeContextMenu();\n                }\n                //tab\n                if (e.keyCode === 9) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    e.preventDefault();\n                }\n                //esc\n                if (e.keyCode === 27) {\n                    self.disposeContextMenu();\n                }\n            });\n            filterInput.addEventListener('keyup', function () {\n                self.setFilter(e.cell.header.name, filterInput.value);\n            });\n            filterInput.addEventListener('keyup', createAutoCompleteContext);\n            ['focus', 'blur', 'keydown', 'keyup', 'change'].forEach(function (en) {\n                filterInput.addEventListener(en, checkRegExpErrorState);\n            });\n            filterInput.value = e.cell.header ? self.columnFilters[e.cell.header.name] || '' : '';\n            filterLabel.innerHTML = self.attributes.filterOptionText.replace(/%s/g, n);\n            filterAutoCompleteButton.onclick = function () {\n                if (autoCompleteContext) {\n                    return self.disposeAutocomplete();\n                }\n                createAutoCompleteContext();\n            };\n            filterAutoCompleteButton.innerHTML = self.style.contextFilterButtonHTML;\n            filterContainer.addEventListener('click', function (e) {\n                return e.stopPropagation();\n            });\n            filterContainer.appendChild(filterLabel);\n            filterContainer.appendChild(filterInput);\n            filterContainer.appendChild(filterAutoCompleteButton);\n            e.items.push({\n                title: filterContainer\n            });\n            if (Object.keys(self.columnFilters).length) {\n                Object.keys(self.columnFilters).forEach(function (cf) {\n                    var h = self.getHeaderByName(cf);\n                    e.items.push({\n                        title: self.attributes.removeFilterOptionText.replace(/%s/g, h.title || h.name),\n                        click: function removeFilterClick(e) {\n                            e.preventDefault();\n                            self.setFilter(cf, '');\n                            self.controlInput.focus();\n                        }\n                    });\n                });\n            }\n        }\n        function addDefaultContextMenuItem(e) {\n            var isNormalCell = !(e.cell.isBackground || e.cell.isHeaderCellCap\n                    || e.cell.isScrollBar || e.cell.isCorner || e.cell.isRowHeader)\n                    && e.cell.header;\n            if (self.attributes.showFilter && isNormalCell) {\n                createFilterContextMenuItems(e);\n            }\n            if (self.attributes.showCopy\n                    && self.selections.reduce(function (p, r) {\n                        return p + r.length;\n                    }, 0) > 0) {\n                e.items.push({\n                    title: self.attributes.copyText,\n                    click: function () {\n                        document.execCommand('copy');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.showPaste && self.clipBoardData) {\n                e.items.push({\n                    title: self.attributes.pasteText,\n                    click: function () {\n                        self.paste(self.clipBoardData, e.cell.columnIndex, e.cell.rowIndex);\n                        self.draw();\n                    }\n                });\n            }\n            if (self.attributes.showColumnSelector) {\n                e.items.push({\n                    title: self.attributes.columnSelectorText,\n                    items: function () {\n                        var d = [];\n                        self.getSchema().forEach(function (column) {\n                            if (column.name === self.uniqueId) { return; }\n                            function toggleColumnVisibility(e) {\n                                column.hidden = !column.hidden;\n                                e.preventDefault();\n                                self.stopPropagation(e);\n                                self.disposeContextMenu();\n                                self.resize(true);\n                                self.setStorageData();\n                            }\n                            var el = document.createElement('div');\n                            applyContextItemStyle(el);\n                            el.addEventListener('touchstart', toggleColumnVisibility);\n                            el.addEventListener('click', toggleColumnVisibility);\n                            el.innerHTML = (column.hidden ? self.attributes.columnSelectorHiddenText\n                                    : self.attributes.columnSelectorVisibleText)\n                                    + (column.title || column.name);\n                            d.push({\n                                title: el\n                            });\n                        });\n                        return d;\n                    }\n                });\n                if (e.cell && e.cell.header) {\n                    e.items.push({\n                        title: self.attributes.hideColumnText\n                            .replace(/%s/ig, e.cell.header.title || e.cell.header.name),\n                        click: function (ev) {\n                            e.cell.header.hidden = true;\n                            ev.preventDefault();\n                            self.stopPropagation(ev);\n                            self.disposeContextMenu();\n                            self.setStorageData();\n                            setTimeout(function () { self.resize(true); }, 10);\n                        }\n                    });\n                }\n            }\n            if (self.attributes.saveAppearance && self.attributes.showClearSettingsOption\n                    && (Object.keys(self.sizes.rows).length > 0\n                        || Object.keys(self.sizes.columns).length > 0)) {\n                e.items.push({\n                    title: self.attributes.clearSettingsOptionText,\n                    click: function (e) {\n                        e.preventDefault();\n                        self.sizes.rows = {};\n                        self.sizes.columns = {};\n                        self.createRowOrders();\n                        self.createColumnOrders();\n                        self.storedSettings = undefined;\n                        self.dispatchEvent('resizecolumn', {columnWidth: self.style.cellWidth});\n                        self.dispatchEvent('resizerow', {cellHeight: self.style.cellHeight});\n                        self.setStorageData();\n                        self.resize(true);\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.allowSorting && self.attributes.showOrderByOption && isNormalCell) {\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextAsc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'asc');\n                        self.controlInput.focus();\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextDesc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'desc');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n        }\n        self.disposeAutocomplete = function () {\n            if (autoCompleteContext) {\n                autoCompleteContext.dispose();\n                autoCompleteContext = undefined;\n            }\n        };\n        self.disposeContextMenu = function () {\n            document.removeEventListener('click', self.disposeContextMenu);\n            zIndexTop = self.style.contextMenuZIndex;\n            self.disposeAutocomplete();\n            if (self.contextMenu) {\n                self.contextMenu.dispose();\n            }\n            self.contextMenu = undefined;\n        };\n        self.contextmenuEvent = function (e, overridePos) {\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            function createDiposeEvent() {\n                requestAnimationFrame(function () {\n                    document.addEventListener('click', self.disposeContextMenu);\n                    document.removeEventListener('mouseup', createDiposeEvent);\n                });\n            }\n            var contextPosition,\n                items = [],\n                pos = overridePos || self.getLayerPos(e),\n                ev = {\n                    NativeEvent: e,\n                    cell: self.getCellAt(pos.x, pos.y),\n                    items: items\n                };\n            if (!ev.cell.isGrid) {\n                addDefaultContextMenuItem(ev);\n            }\n            if (self.dispatchEvent('contextmenu', ev)) {\n                return;\n            }\n            if (!ev.cell.isGrid) {\n                if (self.contextMenu) {\n                    self.disposeContextMenu();\n                }\n                contextPosition = {\n                    left: pos.x + pos.rect.left\n                        + self.style.contextMenuMarginLeft + self.canvasOffsetLeft,\n                    top: pos.y + pos.rect.top\n                        + self.style.contextMenuMarginTop + self.canvasOffsetTop,\n                    right: ev.cell.width + ev.cell.x + pos.rect.left,\n                    bottom: ev.cell.height + ev.cell.y + pos.rect.top,\n                    height: ev.cell.height,\n                    width: ev.cell.width\n                };\n                if (self.mobile) {\n                    contextPosition.left = self.style.mobileContextMenuMargin + 'px';\n                    contextPosition.width = self.width - (self.style.mobileContextMenuMargin * 2) + 'px';\n                }\n                self.contextMenu = createContextMenu(ev, contextPosition, items);\n                document.addEventListener('mouseup', createDiposeEvent);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        self.getClippingRect = function (ele) {\n            var boundingRect = self.position(self.parentNode),\n                eleRect = self.position(ele),\n                s = self.scrollOffset(self.canvas),\n                clipRect = {\n                    x: 0,\n                    y: 0,\n                    h: 0,\n                    w: 0\n                },\n                parentRect = {\n                    x: -Infinity,\n                    y: -Infinity,\n                    h: Infinity,\n                    w: Infinity\n                },\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth();\n            boundingRect.top -= s.top;\n            boundingRect.left -= s.left;\n            eleRect.top -= s.top;\n            eleRect.left -= s.left;\n            clipRect.h = boundingRect.top + boundingRect.height - ele.offsetTop - self.style.scrollBarWidth;\n            clipRect.w = boundingRect.left + boundingRect.width - ele.offsetLeft - self.style.scrollBarWidth;\n            clipRect.x = boundingRect.left + (eleRect.left * -1) + rowHeaderCellWidth;\n            clipRect.y = boundingRect.top + (eleRect.top * -1) + columnHeaderCellHeight;\n            return {\n                x: clipRect.x > parentRect.x ? clipRect.x : parentRect.x,\n                y: clipRect.y > parentRect.y ? clipRect.y : parentRect.y,\n                h: clipRect.h < parentRect.h ? clipRect.h : parentRect.h,\n                w: clipRect.w < parentRect.w ? clipRect.w : parentRect.w\n            };\n        };\n        self.clipElement = function (ele) {\n            var clipRect = self.getClippingRect(ele);\n            if (clipRect.w < 0) { clipRect.w = 0; }\n            if (clipRect.h < 0) { clipRect.h = 0; }\n            ele.style.clip = 'rect('\n                + clipRect.y + 'px,'\n                + clipRect.w + 'px,'\n                + clipRect.h + 'px,'\n                + clipRect.x + 'px'\n                + ')';\n            // INFO https://developer.mozilla.org/en-US/docs/Web/CSS/clip\n            // clip has been \"deprecated\" for clipPath.  Of course nothing but chrome\n            // supports clip path, so we'll keep using clip until someday clipPath becomes\n            // more widely support.  The code below works correctly, but setting clipPath and clip\n            // at the same time has undesirable results.\n            // ele.style.clipPath = 'polygon('\n            //     + clipRect.x + 'px ' + clipRect.y + 'px,'\n            //     + clipRect.x + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.y + 'px'\n            //     + ')';\n        };\n        self.scrollOffset = function (e) {\n            var x = 0, y = 0;\n            while (e.parentNode && e.nodeName !== 'CANVAS-DATAGRID' && e !== self.intf) {\n                if (e.nodeType !== 'canvas-datagrid-tree'\n                        && e.nodeType !== 'canvas-datagrid-cell') {\n                    x -= e.scrollLeft;\n                    y -= e.scrollTop;\n                }\n                e = e.parentNode;\n            }\n            return {\n                left: x - document.scrollingElement.scrollLeft,\n                top: y - document.scrollingElement.scrollTop\n            };\n        };\n        self.resizeEditInput = function () {\n            if (self.input && self.input.editCell) {\n                var pos = self.canvas.getBoundingClientRect(),\n                    s = self.scrollOffset(self.intf),\n                    bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                    borderWidth = (self.style.cellBorderWidth * bm),\n                    cell = self.getVisibleCellByIndex(self.input.editCell.columnIndex, self.input.editCell.rowIndex)\n                        || {x: -100, y: -100, height: 0, width: 0};\n                if (self.mobile) {\n                    self.input.style.left = '0';\n                    self.input.style.top = (self.height - self.style.mobileEditInputHeight) - borderWidth - 1 + 'px';\n                    self.input.style.height = self.style.mobileEditInputHeight + 'px';\n                    self.input.style.width = self.width - borderWidth - 1 + 'px';\n                    return;\n                }\n                self.input.style.left = pos.left + cell.x + self.canvasOffsetLeft - s.left + 'px';\n                self.input.style.top = pos.top + cell.y - self.style.cellBorderWidth + self.canvasOffsetTop - s.top + 'px';\n                self.input.style.height = cell.height - borderWidth + 'px';\n                self.input.style.width = cell.width - self.style.cellPaddingLeft + 'px';\n                self.clipElement(self.input);\n            }\n        };\n        self.position = function (e, ignoreScrollOffset) {\n            var x = 0, y = 0, s = e, h, w;\n            while (e.offsetParent && e.nodeName !== 'CANVAS-DATAGRID') {\n                x += e.offsetLeft;\n                y += e.offsetTop;\n                h = e.offsetHeight;\n                w = e.offsetWidth;\n                e = e.offsetParent;\n            }\n            if (ignoreScrollOffset) {\n                return {left: x, top: y, height: h, width: w};\n            }\n            e = s;\n            s = self.scrollOffset(e);\n            return { left: x + s.left, top: y + s.top, height: h, width: w };\n        };\n        self.getLayerPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.clientX - rect.left,\n                    y: e.clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        /**\n         * Ends editing, optionally aborting the edit.\n         * @memberof canvasDatagrid\n         * @name endEdit\n         * @method\n         * @param {boolean} abort When true, abort the edit.\n         */\n        self.endEdit = function (abort) {\n            var cell = self.input.editCell,\n                y = cell.rowIndex;\n            function abortEdit() {\n                abort = true;\n            }\n            if (self.dispatchEvent('beforeendedit', {\n                    cell: cell,\n                    newValue: self.input.value,\n                    oldValue: cell.value,\n                    abort: abortEdit,\n                    input: self.input\n                })) { return false; }\n            if (self.input.value !== cell.value && !abort) {\n                self.changes[y] = self.changes[y] || {};\n                self.changes[y][cell.header.name] = self.input.value;\n                cell.data[cell.header.name] = self.input.value;\n                if (y === self.data.length) {\n                    if (self.dispatchEvent('newrow', {\n                            value: self.input.value,\n                            defaultValue: cell.value,\n                            aborted: abort,\n                            cell: cell,\n                            input: self.input\n                        })) { return false; }\n                    self.uId += 1;\n                    self.addRow(cell.data);\n                    self.createNewRowData();\n                }\n                self.draw(true);\n            }\n            document.body.removeChild(self.input);\n            self.intf.focus();\n            self.dispatchEvent('endedit', {\n                cell: cell,\n                value: self.input.value,\n                aborted: abort,\n                input: self.input\n            });\n            self.input = undefined;\n            return true;\n        };\n        /**\n         * Begins editing at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name beginEditAt\n         * @method\n         * @param {number} x The column index of the cell to edit.\n         * @param {number} y The row index of the cell to edit.\n         */\n        self.beginEditAt = function (x, y) {\n            if (!self.attributes.editable) { return; }\n            if (self.input) {\n                self.endEdit();\n            }\n            var cell = self.getVisibleCellByIndex(x, y),\n                s = self.getVisibleSchema(),\n                enumItems,\n                enu,\n                option,\n                valueInEnum;\n            if (!(cell && cell.header)) { return; }\n            //HACK for IE10, does not like literal enum\n            enu = cell.header['enum'];\n            if (self.dispatchEvent('beforebeginedit', {cell: cell})) { return false; }\n            self.scrollIntoView(x, y);\n            self.setActiveCell(x, y);\n            if (enu) {\n                self.input = document.createElement('select');\n            } else {\n                self.input = document.createElement(self.attributes.multiLine\n                    ? 'textarea' : 'input');\n            }\n            cell = self.getVisibleCellByIndex(x, y);\n            //HACK on mobile devices sometimes edit can begin without the cell being in view, I don't know how.\n            if (!cell) { return; }\n            if (enu) {\n                // add enums\n                if (typeof enu === 'function') {\n                    enumItems = enu.apply(self.intf, [{cell: cell}]);\n                } else if (Array.isArray(enu)) {\n                    enumItems = enu;\n                }\n                enumItems.forEach(function (e) {\n                    var i = document.createElement('option'),\n                        val,\n                        title;\n                    if (Array.isArray(e)) {\n                        val = e[0];\n                        title = e[1];\n                    } else {\n                        val = e;\n                        title = e;\n                    }\n                    if (val === cell.value) { valueInEnum = true; }\n                    i.value = val;\n                    i.innerHTML = title;\n                    self.input.appendChild(i);\n                });\n                if (!valueInEnum) {\n                    option = document.createElement('option');\n                    option.value = cell.value;\n                    option.innerHTML = cell.value;\n                    self.input.appendChild(option);\n                }\n                self.input.addEventListener('change', function () {\n                    self.endEdit();\n                    self.draw(true);\n                });\n            }\n            document.body.appendChild(self.input);\n            self.createInlineStyle(self.input, self.mobile ? 'canvas-datagrid-edit-mobile-input' : 'canvas-datagrid-edit-input');\n            self.input.style.position = 'absolute';\n            self.input.editCell = cell;\n            self.resizeEditInput();\n            self.input.style.zIndex = self.style.editCellZIndex;\n            self.input.style.fontSize = (parseInt(self.style.editCellFontSize, 10) * self.scale) + 'px';\n            self.input.value = cell.value;\n            self.input.focus();\n            self.input.addEventListener('click', self.stopPropagation);\n            self.input.addEventListener('dblclick', self.stopPropagation);\n            self.input.addEventListener('mouseup', self.stopPropagation);\n            self.input.addEventListener('mousedown', self.stopPropagation);\n            self.input.addEventListener('keydown', function (e) {\n                var nx = cell.columnIndex,\n                    ny = cell.rowIndex;\n                // esc\n                if (e.keyCode === 27) {\n                    self.endEdit(true);\n                    self.draw(true);\n                // enter\n                } else if (e.keyCode === 13\n                        && (!self.attributes.multiLine\n                            || (self.attributes.multiLine && e.shiftKey))) {\n                    self.endEdit();\n                    self.draw(true);\n                } else if (e.keyCode === 9) {\n                    e.preventDefault();\n                    if (!self.endEdit()) {\n                        return;\n                    }\n                    if (e.shiftKey) {\n                        nx -= 1;\n                    } else {\n                        nx += 1;\n                    }\n                    if (nx < 0) {\n                        nx = s.length - 1;\n                        ny -= 1;\n                    }\n                    if (nx > s.length - 1) {\n                        nx = 0;\n                        ny += 1;\n                    }\n                    if (ny < 0) {\n                        ny = self.data.length - 1;\n                    }\n                    if (ny > self.data.length - 1) {\n                        ny = 0;\n                    }\n                    self.scrollIntoView(nx, ny);\n                    self.beginEditAt(nx, ny);\n                }\n            });\n            self.dispatchEvent('beginedit', {cell: cell, input: self.input});\n        };\n        self.createInlineStyle = function (el, className) {\n            var css = {\n                'canvas-datagrid-context-menu-filter-input': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextFilterInputBackground,\n                    color: self.style.contextFilterInputColor,\n                    border: self.style.contextFilterInputBorder,\n                    borderRadius: self.style.contextFilterInputBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextFilterInputFontFamily,\n                    fontSize: self.style.contextFilterInputFontSize\n                },\n                'canvas-datagrid-context-menu-filter-button': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextFilterButtonBorder,\n                    borderRadius: self.style.contextFilterButtonBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFilterButtonFontFamily,\n                    fontSize: self.style.contextMenuFilterButtonFontSize\n                },\n                'canvas-datagrid-context-child-arrow': {\n                    cssFloat: 'right',\n                    color: self.style.childContextMenuArrowColor,\n                    fontSize: self.style.contextMenuChildArrowFontSize,\n                    fontFamily: self.style.contextMenuFontFamily,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-autocomplete': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    position: 'absolute',\n                    zIndex: 9999,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-autocomplete-item': {\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor\n                },\n                'canvas-datagrid-autocomplete-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-canvas': {\n                    position: 'absolute',\n                    zIndex: '-1'\n                },\n                'canvas-datagrid': {\n                    display: 'block'\n                },\n                'canvas-datagrid-control-input': {\n                    position: 'fixed',\n                    top: '-5px',\n                    left: '-5px',\n                    border: 'none',\n                    opacity: '0',\n                    cursor: 'pointer',\n                    width: '1px',\n                    height: '1px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize\n                },\n                'canvas-datagrid-edit-mobile-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 0',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.mobileEditFontFamily,\n                    fontSize: self.style.mobileEditFontSize,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-edit-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 ' + self.style.editCellPaddingLeft + 'px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.editCellFontFamily,\n                    fontSize: self.style.editCellFontSize,\n                    boxShadow: self.style.editCellBoxShadow,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-context-menu-item-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-context-menu-label': {\n                    margin: self.style.contextMenuLabelMargin,\n                    display: self.style.contextMenuLabelDisplay,\n                    minWidth: self.style.contextMenuLabelMinWidth,\n                    maxWidth: self.style.contextMenuLabelMaxWidth\n                },\n                'canvas-datagrid-context-menu-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-context-menu': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-invalid-search-regExp': {\n                    background: self.style.contextMenuFilterInvalidExpresion\n                }\n            };\n            if (css[className]) {\n                Object.keys(css[className]).map(function (prop) {\n                    el.style[prop] = css[className][prop];\n                });\n            }\n            return;\n        };\n        self.appendTo = function (e) {\n            self.parentNode = e;\n            self.setDom();\n        };\n        self.setDom = function () {\n            if (self.isChildGrid) {\n                self.parentGrid = self.parentNode.parentGrid;\n                self.ctx = self.parentGrid.context;\n                self.canvas = self.parentGrid.canvas;\n                self.controlInput = self.parentGrid.controlInput;\n                self.eventParent = self.canvas;\n            } else {\n                self.controlInput = self.controlInput || document.createElement('input');\n                self.controlInput.onblur = self.intf.blur;\n                self.createInlineStyle(self.controlInput, 'canvas-datagrid-control-input');\n                self.isChildGrid = false;\n                self.parentDOMNode = self.parentNode;\n                self.parentIsCanvas = /^canvas$/i.test(self.parentDOMNode.tagName);\n                if (self.parentIsCanvas) {\n                    self.canvas = self.parentDOMNode;\n                    self.parentDOMNode.appendChild(self.controlInput);\n                } else {\n                    self.canvas = document.createElement('canvas');\n                    self.parentDOMNode.appendChild(self.canvas);\n                    self.parentDOMNode.appendChild(self.controlInput);\n                }\n                self.createInlineStyle(self.canvas, 'canvas-datagrid');\n                self.ctx = self.canvas.getContext('2d');\n                self.ctx.textBaseline = 'alphabetic';\n                self.eventParent = self.canvas;\n            }\n            self.parentNodeStyle = self.canvas.style;\n            self.controlInput.setAttribute('readonly', true);\n            self.controlInput.addEventListener('blur', function (e) {\n                if (e.target !== self.canvas) {\n                    self.hasFocus = false;\n                }\n            });\n            self.eventParent.addEventListener('scroll', self.resize, false);\n            self.eventParent.addEventListener('touchstart', self.touchstart, false);\n            self.eventParent.addEventListener('mouseup', self.mouseup, false);\n            self.eventParent.addEventListener('mousedown', self.mousedown, false);\n            self.eventParent.addEventListener('dblclick', self.dblclick, false);\n            self.eventParent.addEventListener('click', self.click, false);\n            self.eventParent.addEventListener('mousemove', self.mousemove);\n            self.eventParent.addEventListener('wheel', self.scrollWheel, false);\n            self.canvas.addEventListener('contextmenu', self.contextmenuEvent, false);\n            self.controlInput.addEventListener('copy', self.copy);\n            self.controlInput.addEventListener('cut', self.cut);\n            self.controlInput.addEventListener('paste', self.paste);\n            self.controlInput.addEventListener('keypress', self.keypress, false);\n            self.controlInput.addEventListener('keyup', self.keyup, false);\n            self.controlInput.addEventListener('keydown', self.keydown, false);\n            window.addEventListener('resize', self.resize);\n        };\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        /**\n         * Converts a integer into a letter A - ZZZZZ...\n         * @memberof canvasDatagrid\n         * @name integerToAlpha\n         * @method\n         * @param {column} n The number to convert.\n         */\n        self.integerToAlpha = function (n) {\n            var ordA = 'a'.charCodeAt(0),\n                ordZ = 'z'.charCodeAt(0),\n                len = ordZ - ordA + 1,\n                s = '';\n            while (n >= 0) {\n                s = String.fromCharCode(n % len + ordA) + s;\n                n = Math.floor(n / len) - 1;\n            }\n            return s;\n        };\n        /**\n         * Inserts a new column before the specified index into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name insertColumn\n         * @method\n         * @param {column} c The column to insert into the schema.\n         * @param {number} index The index of the column to insert before.\n         */\n        self.insertColumn = function (c, index) {\n            var s = self.getSchema();\n            if (s.length < index) {\n                throw new Error('Index is beyond the length of the schema.');\n            }\n            self.validateColumn(c, s);\n            s.splice(index, 0, c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a column from the schema at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteColumn\n         * @tutorial schema\n         * @method\n         * @param {number} index The index of the column to delete.\n         */\n        self.deleteColumn = function (index) {\n            var s = self.getSchema();\n            // remove data matching this column name from data\n            self.data.forEach(function (row) {\n                delete row[s[index].name];\n            });\n            s.splice(index, 1);\n            self.intf.schema = s;\n        };\n        /**\n         * Adds a new column into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name addColumn\n         * @method\n         * @param {column} c The column to add to the schema.\n         */\n        self.addColumn = function (c) {\n            var s = self.getSchema();\n            self.validateColumn(c, s);\n            s.push(c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a row from the dataset at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteRow\n         * @method\n         * @param {number} index The index of the row to delete.\n         */\n        self.deleteRow = function (index) {\n            self.originalData.splice(index, 1);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Inserts a new row into the dataset before the specified index.\n         * @memberof canvasDatagrid\n         * @name insertRow\n         * @method\n         * @param {object} d data.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertRow = function (d, index) {\n            if (self.originalData.length < index) {\n                throw new Error('Index is beyond the length of the dataset.');\n            }\n            self.originalData.splice(index, 0, d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[index], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Adds a new row into the dataset.\n         * @memberof canvasDatagrid\n         * @name addRow\n         * @method\n         * @param {object} d data.\n         */\n        self.addRow = function (d) {\n            self.originalData.push(d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[self.originalData.length - 1], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Sets the height of a given row by index number.\n         * @memberof canvasDatagrid\n         * @name setRowHeight\n         * @method\n         * @param {number} rowIndex The index of the row to set.\n         * @param {number} height Height to set the row to.\n         */\n        self.setRowHeight = function (rowIndex, height) {\n            self.sizes.rows[self.data[rowIndex][self.uniqueId]] = height;\n            self.draw(true);\n        };\n        /**\n         * Sets the width of a given column by index number.\n         * @memberof canvasDatagrid\n         * @name setColumnWidth\n         * @method\n         * @param {number} colIndex The index of the column to set.\n         * @param {number} width Width to set the column to.\n         */\n        self.setColumnWidth = function (colIndex, width) {\n            var s = self.getSchema();\n            self.sizes.columns[s[colIndex][self.uniqueId]] = width;\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the width of the columns due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetColumnWidths\n         * @tutorial schema\n         * @method\n         */\n        self.resetColumnWidths = function () {\n            self.sizes.columns = {};\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the height of the rows due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetRowHeights\n         * @tutorial schema\n         * @method\n         */\n        self.resetRowHeights = function () {\n            self.sizes.rows = {};\n            self.draw(true);\n        };\n        /**\n         * Sets the value of the filter.\n         * @memberof canvasDatagrid\n         * @name setFilter\n         * @method\n         * @param {string} column Name of the column to filter.\n         * @param {string} value The value to filter for.\n         */\n        self.setFilter = function (column, value) {\n            function applyFilter() {\n                self.refreshFromOrigialData();\n                Object.keys(self.columnFilters).forEach(function (filter) {\n                    var header = self.getHeaderByName(column);\n                    if (!header) {\n                        return;\n                    }\n                    self.currentFilter = header.filter || self.filter(column.type || 'string');\n                    self.data = self.data.filter(function (row) {\n                        return self.currentFilter(row[filter], self.columnFilters[filter]);\n                    });\n                });\n                self.resize();\n                self.draw(true);\n            }\n            if (column === undefined && value === undefined) {\n                self.columnFilters = {};\n                return applyFilter();\n            }\n            if (column && (value === '' || value === undefined)) {\n                delete self.columnFilters[column];\n            } else {\n                self.columnFilters[column] = value;\n            }\n            applyFilter();\n        };\n        /**\n         * Returns the number of pixels to scroll down to line up with row rowIndex.\n         * @memberof canvasDatagrid\n         * @name findRowScrollTop\n         * @method\n         * @param {number} rowIndex The row index of the row to scroll find.\n         */\n        self.findRowScrollTop = function (rowIndex) {\n            var top = 0, x = 0, l = self.data.length,\n                bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                cellBorder = self.style.cellBorderWidth * bm;\n            if (!self.attributes.showNewRow) {\n                l -= 1;\n            }\n            if (rowIndex > l) {\n                throw new Error('Impossible row index');\n            }\n            while (x < rowIndex) {\n                top += (self.sizes.rows[self.data[x][self.uniqueId]] || self.style.cellHeight) + cellBorder;\n                x += 1;\n            }\n            //TODO: This is not super accurate, causes pageUp/Dn to not move around right\n            return top - (self.sizes.rows[self.data[rowIndex][self.uniqueId]] || self.style.cellHeight);\n        };\n        /**\n         * Returns the number of pixels to scroll to the left to line up with column columnIndex.\n         * @memberof canvasDatagrid\n         * @name findColumnScrollLeft\n         * @method\n         * @param {number} columnIndex The column index of the column to find.\n         */\n        self.findColumnScrollLeft = function (columnIndex) {\n            var left = 0, y = 0, s = self.getSchema(), l = s.length - 1;\n            if (columnIndex > l) {\n                throw new Error('Impossible column index');\n            }\n            while (y < columnIndex) {\n                left += self.sizes.columns[s[y][self.uniqueId]] || s[y].width || self.style.cellWidth;\n                y += 1;\n            }\n            return left;\n        };\n        /**\n         * Scrolls the cell at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name gotoCell\n         * @method\n         * @param {number} x The column index of the cell to scroll to.\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoCell = function (x, y) {\n            if (x !== undefined) {\n                self.scrollBox.scrollLeft = self.findColumnScrollLeft(x);\n            }\n            if (y !== undefined) {\n                self.scrollBox.scrollTop = self.findRowScrollTop(y);\n            }\n        };\n        /**\n         * Scrolls the row y.\n         * @memberof canvasDatagrid\n         * @name gotoRow\n         * @method\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoRow = function (y) {\n            self.gotoCell(0, y);\n        };\n        /**\n         * Scrolls the cell at cell x, row y into view if it is not already.\n         * @memberof canvasDatagrid\n         * @name scrollIntoView\n         * @method\n         * @param {number} x The column index of the cell to scroll into view.\n         * @param {number} y The row index of the cell to scroll into view.\n         */\n        self.scrollIntoView = function (x, y) {\n            if (self.visibleCells.filter(function (cell) {\n                    return (cell.rowIndex === y || y === undefined)\n                        && (cell.columnIndex === x || x === undefined)\n                        && cell.x > 0\n                        && cell.y > 0\n                        && cell.x + cell.width < self.width\n                        && cell.y + cell.height < self.height;\n                }).length === 0) {\n                self.gotoCell(x, y);\n            }\n        };\n        /**\n         * Sets the active cell. Requires redrawing.\n         * @memberof canvasDatagrid\n         * @name setActiveCell\n         * @method\n         * @param {number} x The column index of the cell to set active.\n         * @param {number} y The row index of the cell to set active.\n         */\n        self.setActiveCell = function (x, y) {\n            self.activeCell = {\n                rowIndex: y,\n                columnIndex: x\n            };\n        };\n        /**\n         * Removes the selection.\n         * @memberof canvasDatagrid\n         * @name selectNone\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectNone = function (dontDraw) {\n            self.selections = [];\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Selects every visible cell.\n         * @memberof canvasDatagrid\n         * @name selectAll\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectAll = function (dontDraw) {\n            self.selectArea({\n                top: 0,\n                left: 0,\n                right: self.getVisibleSchema().length - 1,\n                bottom: self.data.length - 1\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Returns true if the selected columnIndex is selected on every row.\n         * @memberof canvasDatagrid\n         * @name isColumnSelected\n         * @method\n         * @param {number} columnIndex The column index to check.\n         */\n        self.isColumnSelected = function (columnIndex) {\n            var colIsSelected = true;\n            self.data.forEach(function (row, rowIndex) {\n                if (!self.selections[rowIndex] || self.selections[rowIndex].indexOf(self.orders.columns[columnIndex]) === -1) {\n                    colIsSelected = false;\n                }\n            });\n            return colIsSelected;\n        };\n        /**\n         * Runs the defined method on each selected cell.\n         * @memberof canvasDatagrid\n         * @name forEachSelectedCell\n         * @method\n         * @param {number} fn The function to execute.  The signature of the function is: (data, rowIndex, columnName).\n         * @param {number} expandToRow When true the data in the array is expanded to the entire row.\n         */\n        self.forEachSelectedCell = function (fn, expandToRow) {\n            var d = [], s = expandToRow ? self.getSchema() : self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    if (col === -1 || !s[col]) { return; }\n                    fn(self.data, index, s[col].name);\n                });\n            });\n        };\n        /**\n         * Selects a column.\n         * @memberof canvasDatagrid\n         * @name selectColumn\n         * @method\n         * @param {number} columnIndex The column index to select.\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the column.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the column.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectColumn = function (columnIndex, ctrl, shift, supressEvent) {\n            var s, e, x;\n            function addCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) === -1) {\n                        self.selections[rowIndex].push(i);\n                    }\n                });\n            }\n            function removeCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) !== -1) {\n                        self.selections[rowIndex].splice(self.selections[rowIndex].indexOf(i), 1);\n                    }\n                });\n            }\n            if (shift) {\n                if (!self.activeCell) { return; }\n                s = Math.min(self.activeCell.columnIndex, columnIndex);\n                e = Math.max(self.activeCell.columnIndex, columnIndex);\n                for (x = s; e > x; x += 1) {\n                    addCol(x);\n                }\n            }\n            if (!ctrl && !shift) {\n                self.selections = [];\n                self.activeCell.columnIndex = columnIndex;\n                self.activeCell.rowIndex = self.scrollIndexTop;\n            }\n            if (ctrl && self.isColumnSelected(columnIndex)) {\n                removeCol(columnIndex);\n            } else {\n                addCol(columnIndex);\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.getSelectionBounds()\n            });\n        };\n        /**\n         * Selects a row.\n         * @memberof canvasDatagrid\n         * @name selectRow\n         * @method\n         * @param {number} rowIndex The row index to select.\n         * @param {boolean} ctrl When true, behaves as if you were holding control/command when you clicked the row.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the row.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectRow = function (rowIndex, ctrl, shift, supressEvent) {\n            var x, st, en, s = self.getVisibleSchema();\n            function addRow(ri) {\n                self.selections[ri] = [];\n                self.selections[ri].push(-1);\n                s.forEach(function (col, index) {\n                    self.selections[ri].push(index);\n                });\n            }\n            if (self.dragAddToSelection === false || self.dragObject === undefined) {\n                if (self.selections[rowIndex] && self.selections[rowIndex].length - 1 === s.length) {\n                    if (ctrl) {\n                        self.selections[rowIndex] = [];\n                        return;\n                    }\n                }\n            }\n            if (self.dragAddToSelection === true || self.dragObject === undefined) {\n                if (shift && self.dragObject === undefined) {\n                    if (!self.activeCell) { return; }\n                    st = Math.min(self.activeCell.rowIndex, rowIndex);\n                    en = Math.max(self.activeCell.rowIndex, rowIndex);\n                    for (x = st; en >= x; x += 1) {\n                        addRow(x);\n                    }\n                } else {\n                    addRow(rowIndex);\n                }\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Collapse a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name collapseTree\n         * @method\n         * @param {number} index The index of the row to collapse.\n         */\n        self.collapseTree = function (rowIndex) {\n            var rowId = self.data[rowIndex][self.uniqueId];\n            self.dispatchEvent('collapsetree', {\n                childGrid: self.childGrids[rowId],\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId].blur();\n            self.openChildren[rowId].dispose();\n            delete self.openChildren[rowId];\n            delete self.sizes.trees[rowId];\n            delete self.childGrids[rowId];\n            self.dispatchEvent('resizerow', {\n                cellHeight: self.style.cellHeight\n            });\n            self.resize(true);\n            self.draw(true);\n        };\n        /**\n         * Expands a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name expandTree\n         * @method\n         * @param {number} index The index of the row to expand.\n         */\n        self.expandTree = function (rowIndex) {\n            var trArgs = self.args.treeGridAttributes || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth,\n                rowId = self.data[rowIndex][self.uniqueId],\n                h = self.sizes.trees[rowId] || self.style.treeGridHeight,\n                treeGrid;\n            if (!self.childGrids[rowId]) {\n                trArgs.debug = self.attributes.debug;\n                trArgs.name = self.attributes.saveAppearance ? self.attributes.name + 'tree' + rowId : undefined;\n                trArgs.style = trArgs.style || self.style;\n                trArgs.parentNode = {\n                    parentGrid: self.intf,\n                    nodeType: 'canvas-datagrid-tree',\n                    offsetHeight: h,\n                    offsetWidth: self.width - rowHeaderCellWidth,\n                    header: { width: self.width - rowHeaderCellWidth },\n                    offsetLeft: rowHeaderCellWidth,\n                    offsetTop: columnHeaderCellHeight,\n                    offsetParent: self.intf.parentNode,\n                    parentNode: self.intf.parentNode,\n                    style: 'tree',\n                    data: self.data[rowIndex]\n                };\n                treeGrid = self.createGrid(trArgs);\n                self.childGrids[rowId] = treeGrid;\n            }\n            treeGrid = self.childGrids[rowId];\n            treeGrid.visible = true;\n            self.dispatchEvent('expandtree', {\n                treeGrid: treeGrid,\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId] = treeGrid;\n            self.sizes.trees[rowId] = h;\n            self.dispatchEvent('resizerow', {height: self.style.cellHeight});\n            self.resize(true);\n        };\n        /**\n         * Toggles tree grid open and close by row index.\n         * @memberof canvasDatagrid\n         * @name toggleTree\n         * @method\n         * @param {number} index The index of the row to toggle.\n         */\n        self.toggleTree = function (rowIndex) {\n            var i = self.openChildren[self.data[rowIndex][self.uniqueId]];\n            if (i) {\n                return self.collapseTree(rowIndex);\n            }\n            self.expandTree(rowIndex);\n        };\n        /**\n         * Returns a header from the schema by name.\n         * @memberof canvasDatagrid\n         * @name getHeaderByName\n         * @tutorial schema\n         * @method\n         * @returns {header} header with the selected name, or undefined.\n         * @param {string} name The name of the column to resize.\n         */\n        self.getHeaderByName = function (name) {\n            var x, i = self.getSchema();\n            for (x = 0; x < i.length; x += 1) {\n                if (i[x].name === name) {\n                    return i[x];\n                }\n            }\n        };\n        /**\n         * Resizes a column to fit the longest value in the column. Call without a value to resize all columns.\n         * Warning, can be slow on very large record sets (1m records ~3-5 seconds on an i7).\n         * @memberof canvasDatagrid\n         * @name fitColumnToValues\n         * @method\n         * @param {string} name The name of the column to resize.\n         */\n        self.fitColumnToValues = function (name, internal) {\n            if (!self.canvas) { return; }\n            self.sizes.columns[name === 'cornerCell' ? name : self.getHeaderByName(name)[self.uniqueId]]\n                = self.findColumnMaxTextLength(name);\n            if (!internal) {\n                self.resize();\n                self.draw(true);\n            }\n        };\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @overload\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {number} columnIndex The column index of the cell to check.\n         * @param {number} rowIndex The row index of the cell to check.\n         */\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {cell} cell The cell to check for.  Alternatively you can pass an object { x: <x-pixel-value>, y: <y-pixel-value> }.\n         */\n        self.isCellVisible = function (cell, rowIndex) {\n            // overload\n            if (rowIndex !== undefined) {\n                return self.visibleCells.filter(function (c) {\n                    return c.columnIndex === cell && c.rowIndex === rowIndex;\n                }).length > 0;\n            }\n            var x, l = self.visibleCells.length;\n            for (x = 0; x < l; x += 1) {\n                if (cell.x === self.visibleCells[x].x && cell.y === self.visibleCells[x].y) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n         * Sets the order of the data.\n         * @memberof canvasDatagrid\n         * @name order\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} columnName Name of the column to be sorted.\n         * @param {string} direction `asc` for ascending or `desc` for descending.\n         * @param {function} [sortFunction] When defined, override the default sorting method defined in the column's schema and use this one.\n         * @param {bool} [dontSetStorageData] Don't store this setting for future use.\n         */\n        self.order = function (columnName, direction, sortFunction, dontSetStorageData) {\n            var f,\n                c = self.getSchema().filter(function (col) {\n                    return col.name === columnName;\n                });\n            if (self.dispatchEvent('beforesortcolumn', {name: columnName, direction: direction})) { return; }\n            self.orderBy = columnName;\n            if (c.length === 0) {\n                throw new Error('Cannot sort.  No such column name');\n            }\n            f = sortFunction || self.sorters[c[0].type];\n            if (!f && c[0].type !== undefined) {\n                console.warn('Cannot sort type \"%s\" falling back to string sort.', c[0].type);\n            }\n            self.data = self.data.sort(typeof f === 'function' ? f(columnName, direction) : self.sorters.string);\n            self.dispatchEvent('sortcolumn', {name: columnName, direction: direction});\n            self.draw(true);\n            if (dontSetStorageData) { return; }\n            self.setStorageData();\n        };\n        self.isInGrid = function (e) {\n            if (e.x < 0\n                    || e.x > self.width\n                    || e.y < 0\n                    || e.y > self.height) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Moves the current selection relative to the its current position.  Note: this method does not move the selected data, just the selection itself.\n         * @memberof canvasDatagrid\n         * @name moveSelection\n         * @method\n         * @param {number} offsetX The number of columns to offset the selection.\n         * @param {number} offsetY The number of rows to offset the selection.\n         */\n        self.moveSelection = function (offsetX, offsetY) {\n            var sel = [];\n            self.selections.forEach(function (row, rowIndex) {\n                sel[rowIndex + offsetY] = [];\n                row.forEach(function (colIndex) {\n                    sel[rowIndex + offsetY].push(colIndex + offsetX);\n                });\n            });\n            self.selections = sel;\n        };\n        /**\n         * Moves data in the provided selection to another position in the grid.  Moving data off the edge of the schema (columns/x) will truncate data.\n         * @memberof canvasDatagrid\n         * @name moveTo\n         * @method\n         * @param {array} sel 2D array representing selected rows and columns.  `canvasDatagrid.selections` is in this format and can be used here.\n         * @param {number} x The column index to start inserting the selection at.\n         * @param {number} y The row index to start inserting the selection at.\n         */\n        self.moveTo = function (sel, x, y) {\n            var d = self.getSelectedData(),\n                s = self.getVisibleSchema(),\n                l = sel.length,\n                xi,\n                yi = y - 1;\n            sel.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) { return; }\n                row.forEach(function (col) {\n                    if (!s[col]) { return; }\n                    self.data[index][s[col].name] = null;\n                });\n            });\n            sel.forEach(function (row, index) {\n                yi += 1;\n                xi = x - 1;\n                row.forEach(function (col, cidx) {\n                    xi += 1;\n                    if (col === -1\n                            || !s[xi]\n                            || !s[col]\n                            || self.data.length - 1 < yi\n                            || yi < 0) { return; }\n                    self.data[yi][s[xi].name] = d[index][s[col].name];\n                });\n            });\n        };\n        /**\n         * Checks if a given column is visible.\n         * @memberof canvasDatagrid\n         * @name isColumnVisible\n         * @method\n         * @returns {boolean} When true, the column is visible.\n         * @param {number} columnIndex Column index.\n         */\n        self.isColumnVisible = function (columnIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === columnIndex;\n            }).length > 0;\n        };\n        /**\n         * Checks if a given row is visible.\n         * @memberof canvasDatagrid\n         * @name isRowVisible\n         * @method\n         * @returns {boolean} When true, the row is visible.\n         * @param {number} rowIndex Row index.\n         */\n        self.isRowVisible = function (rowIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.rowIndex === rowIndex;\n            }).length > 0;\n        };\n        /**\n         * Gets the cell at columnIndex and rowIndex.\n         * @memberof canvasDatagrid\n         * @name getVisibleCellByIndex\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Column index.\n         * @param {number} y Row index.\n         */\n        self.getVisibleCellByIndex = function (x, y) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === x && c.rowIndex === y;\n            })[0];\n        };\n        /**\n         * Gets the cell at grid pixel coordinate x and y.  Author's note.  This function ties drawing and events together.  This is a very complex function and is core to the component.\n         * @memberof canvasDatagrid\n         * @name getCellAt\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Number of pixels from the left.\n         * @param {number} y Number of pixels from the top.\n         */\n        self.getCellAt = function (x, y, useTouchScrollZones) {\n            function getBorder(entitiy) {\n                if (entitiy.x + entitiy.width - (self.attributes.borderResizeZone * 0.4) < x && entitiy.x + entitiy.width + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'r';\n                }\n                if (entitiy.x - (self.attributes.borderResizeZone * 0.4) < x && entitiy.x + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'l';\n                }\n                if (entitiy.y + entitiy.height - (self.attributes.borderResizeZone * 0.4) < y && entitiy.y + entitiy.height + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 'b';\n                }\n                if (entitiy.y - (self.attributes.borderResizeZone * 0.4) < y && entitiy.y + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 't';\n                }\n            }\n            if (!self.visibleCells) { return; }\n            var border,\n                tsz = useTouchScrollZones ? self.attributes.touchScrollZone : 0,\n                moveMode = self.attributes.borderDragBehavior === 'move',\n                i,\n                l = self.visibleCells.length,\n                moveBorder,\n                xBorderBehavior = moveMode ? self.cursorGrab : 'ew-resize',\n                yBorderBehavior = moveMode ? self.cursorGrab : 'ns-resize',\n                cell,\n                entitiy;\n            if (!self.visibleCells || !self.visibleCells.length) { return; }\n            self.hasFocus = true;\n            if (!(y < self.height\n                && y > 0\n                && x < self.width\n                && x > 0)) {\n                self.hasFocus = false;\n                return {\n                    dragContext: 'inherit',\n                    context: 'inherit'\n                };\n            }\n            for (i = 0; i < l; i += 1) {\n                cell = self.visibleCells[i];\n                // interactive dimensions of the cell.  used for touch \"over size\" zones\n                entitiy = {\n                    x: cell.x,\n                    y: cell.y,\n                    height: cell.height,\n                    width: cell.width\n                };\n                if (useTouchScrollZones && /(vertical|horizontal)-scroll-/.test(cell.style)) {\n                    entitiy.x -= tsz;\n                    entitiy.y -= tsz;\n                    entitiy.height += tsz;\n                    entitiy.width += tsz;\n                }\n                if (entitiy.x - self.style.cellBorderWidth < x\n                        && entitiy.x + entitiy.width + self.style.cellBorderWidth > x\n                        && entitiy.y - self.style.cellBorderWidth < y\n                        && entitiy.y + entitiy.height + self.style.cellBorderWidth > y) {\n                    if (/frozen-row-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'row-resize';\n                        return cell;\n                    }\n                    if (/frozen-column-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'col-resize';\n                        return cell;\n                    }\n                    if (/selection-handle-/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'crosshair';\n                        return cell;\n                    }\n                    if (/vertical-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'vertical-scroll-box';\n                        cell.context = 'vertical-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isVerticalScrollBar = true;\n                        if (y > self.scrollBox.box.v.y + self.scrollBox.scrollBoxHeight) {\n                            cell.dragContext = 'vertical-scroll-bottom';\n                            cell.context = 'vertical-scroll-bottom';\n                        } else if (y < self.scrollBox.box.v.y) {\n                            cell.dragContext = 'vertical-scroll-top';\n                            cell.context = 'vertical-scroll-top';\n                        }\n                        self.cursor = 'default';\n                        return cell;\n                    }\n                    if (/horizontal-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'horizontal-scroll-box';\n                        cell.context = 'horizontal-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isHorizontalScrollBar = true;\n                        if (x > self.scrollBox.box.h.x + self.scrollBox.scrollBoxWidth) {\n                            cell.dragContext = 'horizontal-scroll-right';\n                            cell.context = 'horizontal-scroll-right';\n                        } else if (x < self.scrollBox.box.h.x) {\n                            cell.dragContext = 'horizontal-scroll-left';\n                            cell.context = 'horizontal-scroll-left';\n                        }\n                        self.cursor = 'default';\n                        return cell;\n                    }\n                    border = getBorder(entitiy);\n                    // check if the border of this cell is the border of the selection and if so show move cursor in move mode\n                    moveBorder = moveMode && cell.selectionBorder && cell.selectionBorder.indexOf(border) !== -1;\n                    if (['l', 'r'].indexOf(border) !== -1\n                            && (self.attributes.allowColumnResize || moveBorder)\n                            && ((self.attributes.allowColumnResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && ((self.attributes.allowRowHeaderResize && (cell.isRowHeader || cell.isCorner)) || !(cell.isRowHeader && cell.isCorner))) {\n                        if (((cell.isColumnHeader || cell.isCorner) || (self.attributes.allowColumnResizeFromCell && cell.isNormal)) && border === 'r') {\n                            cell.context = 'ew-resize';\n                            cell.dragContext = 'ew-resize';\n                            return cell;\n                        }\n                        if (!(cell.isColumnHeader || cell.isCorner) && moveBorder) {\n                            cell.context = xBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (['t', 'b'].indexOf(border) !== -1\n                            && cell.rowIndex > -1\n                            && (self.attributes.allowRowResize || moveBorder)\n                            && ((self.attributes.allowRowResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && !cell.isColumnHeader) {\n                        if (((cell.isRowHeader || cell.isCorner) || (self.attributes.allowRowResizeFromCell && cell.isNormal)) && border === 'b') {\n                            cell.context = 'ns-resize';\n                            cell.dragContext = 'ns-resize';\n                            return cell;\n                        }\n                        if (!(cell.isRowHeader || cell.isCorner) && moveBorder) {\n                            cell.context = yBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (cell.style === 'columnHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'column-reorder';\n                        return cell;\n                    }\n                    if (cell.style === 'rowHeaderCell') {\n                        if ((self.attributes.rowGrabZoneSize + (cell.y - self.style.cellBorderWidth) < y)\n                                || !self.attributes.allowRowReordering) {\n                            cell.dragContext = 'cell';\n                            cell.context = 'cell';\n                        } else {\n                            cell.context = self.cursorGrab;\n                            cell.dragContext = 'row-reorder';\n                        }\n                        return cell;\n                    }\n                    if (cell.isGrid) {\n                        self.hasFocus = false;\n                        cell.dragContext = 'cell-grid';\n                        cell.context = 'cell-grid';\n                        return cell;\n                    }\n                    if (cell.style === 'tree-grid') {\n                        self.hasFocus = false;\n                        cell.dragContext = 'tree';\n                        cell.context = 'tree';\n                        return cell;\n                    }\n                    cell.dragContext = 'cell';\n                    cell.context = 'cell';\n                    return cell;\n                }\n            }\n            self.hasFocus = true;\n            self.cursor = 'default';\n            return {\n                dragContext: 'background',\n                context: 'background',\n                style: 'background',\n                isBackground: true\n            };\n        };\n        /**\n         * Gets the bounds of current selection. \n         * @returns {rect} selection.\n         * @memberof canvasDatagrid\n         * @name getSelectionBounds\n         * @method\n         */\n        self.getSelectionBounds = function () {\n            var low = {x: Infinity, y: Infinity},\n                high = {x: -Infinity, y: -Infinity};\n            self.data.forEach(function (row, rowIndex) {\n                var maxCol, minCol;\n                if (self.selections[rowIndex] && self.selections[rowIndex].length) {\n                    low.y = rowIndex < low.y ? rowIndex : low.y;\n                    high.y = rowIndex > high.y ? rowIndex : high.y;\n                    maxCol = Math.max.apply(null, self.selections[rowIndex]);\n                    minCol = Math.min.apply(null, self.selections[rowIndex]);\n                    low.x = minCol < low.x ? minCol : low.x;\n                    high.x = maxCol > high.x ? maxCol : high.x;\n                }\n            });\n            return {\n                top: low.y,\n                left: low.x,\n                bottom: high.y,\n                right: high.x\n            };\n        };\n        /**\n         * Returns an auto generated schema based on data structure.\n         * @memberof canvasDatagrid\n         * @name getSchemaFromData\n         * @method\n         * @tutorial schema\n         * @returns {schema} schema A schema based on the first item in the data array.\n         */\n        self.getSchemaFromData = function (d) {\n            d = d || self.data;\n            return Object.keys(d[0] || {' ': ''}).map(function mapEachSchemaColumn(key, index) {\n                var type = self.getBestGuessDataType(key, d),\n                    i = {\n                        primaryKey: self.uniqueId === key,\n                        name: key,\n                        title: isNaN(parseInt(key, 10)) ? key : self.integerToAlpha(key).toUpperCase(),\n                        index: index,\n                        type: type,\n                        filter: self.filter(type)\n                    };\n                if (key === self.uniqueId) {\n                    i.hidden = true;\n                }\n                if (self.storedSettings\n                        && self.storedSettings.visibility\n                        && self.storedSettings.visibility[i.name] !== undefined) {\n                    i.hidden = !self.storedSettings.visibility[i.name];\n                }\n                i[self.uniqueId] = self.getSchemaNameHash(key);\n                return i;\n            });\n        };\n        /**\n         * Clears the change log grid.changes that keeps track of changes to the data set.\n         * This does not undo changes or alter data it is simply a convince array to keep\n         * track of changes made to the data since last this method was called.\n         * @memberof canvasDatagrid\n         * @name clearChangeLog\n         * @method\n         */\n        self.clearChangeLog = function () {\n            self.changes = [];\n        };\n        /**\n         * Selects an area of the grid.\n         * @memberof canvasDatagrid\n         * @name selectArea\n         * @method\n         * @param {rect} bounds A rect object representing the selected values.\n         */\n        self.selectArea = function (bounds, ctrl) {\n            self.selectionBounds = bounds || self.selectionBounds;\n            var x, y, s = self.getSchema();\n            if (!ctrl) {\n                self.selections = [];\n            }\n            if (self.selectionBounds.top < -1\n                    || self.selectionBounds.bottom > self.data.length\n                    || self.selectionBounds.left < -1\n                    || self.selectionBounds.right > s.length) {\n                throw new Error('Impossible selection area');\n            }\n            for (x = self.selectionBounds.top; x <= self.selectionBounds.bottom; x += 1) {\n                self.selections[x] = [];\n                for (y = self.selectionBounds.left; y <= self.selectionBounds.right; y += 1) {\n                    if (self.selections[x].indexOf(y) === -1) {\n                        self.selections[x].push(y);\n                    }\n                }\n            }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Returns the maximum text width for a given column by column name.\n         * @memberof canvasDatagrid\n         * @name findColumnMaxTextLength\n         * @method\n         * @returns {number} The number of pixels wide the maximum width value in the selected column.\n         * @param {string} name The name of the column to calculate the value's width of.\n         */\n        self.findColumnMaxTextLength = function (name) {\n            var m = -Infinity;\n            if (name === 'cornerCell') {\n                self.ctx.font = self.style.rowHeaderCellFont;\n                return self.ctx.measureText((self.data.length + (self.attributes.showNewRow ? 1 : 0)).toString()).width\n                    + self.style.autosizePadding + self.style.autosizeHeaderCellPadding\n                    + self.style.rowHeaderCellPaddingRight\n                    + self.style.rowHeaderCellPaddingLeft\n                    + (self.attributes.tree ? self.style.treeArrowWidth\n                        + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight : 0);\n            }\n            self.getSchema().forEach(function (col) {\n                if (col.name !== name) { return; }\n                self.ctx.font = self.style.columnHeaderCellFont;\n                var t = self.ctx.measureText(col.title || col.name).width\n                    + self.style.headerCellPaddingRight\n                    + self.style.headerCellPaddingLeft;\n                m = t > m ? t : m;\n            });\n            self.data.forEach(function (row) {\n                self.ctx.font = self.style.cellFont;\n                var t = self.ctx.measureText(row[name]).width\n                    + self.style.cellPaddingRight\n                    + self.style.cellPaddingLeft + self.style.cellAutoResizePadding;\n                m = t > m ? t : m;\n            });\n            return m;\n        };\n        /**\n         * Gets the total width of all header columns.\n         * @memberof canvasDatagrid\n         * @name getHeaderWidth\n         * @method\n         */\n        self.getHeaderWidth = function () {\n            return self.getVisibleSchema().reduce(function (total, header) {\n                return total + (header.width || self.style.cellWidth);\n            }, 0);\n        };\n        self.formatters.string = function cellFormatterString(e) {\n            return e.cell.value !== undefined ? e.cell.value : '';\n        };\n        self.formatters.rowHeaderCell = self.formatters.string;\n        self.formatters.headerCell = self.formatters.string;\n        self.formatters.number = self.formatters.string;\n        self.formatters.int = self.formatters.string;\n        self.formatters.html = self.formatters.string;\n        self.sorters.string = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (a[columnName] === undefined || a[columnName] === null) {\n                    return 1;\n                }\n                if (b[columnName] === undefined || b[columnName] === null) {\n                    return 0;\n                }\n                if (asc) {\n                    if (!a[columnName].localeCompare) { return 1; }\n                    return a[columnName].localeCompare(b[columnName]);\n                }\n                if (!b[columnName].localeCompare) { return 1; }\n                return b[columnName].localeCompare(a[columnName]);\n            };\n        };\n        self.sorters.number = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return a[columnName] - b[columnName];\n                }\n                return b[columnName] - a[columnName];\n            };\n        };\n        self.sorters.date = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return new Date(a[columnName]).getTime()\n                        - new Date(b[columnName]).getTime();\n                }\n                return new Date(b[columnName]).getTime()\n                        - new Date(a[columnName]).getTime();\n            };\n        };\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// canvas-datagrid.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap d3044317958739bec1a0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.defaults = {\n            attributes: [\n                ['allowColumnReordering', true],\n                ['allowColumnResize', true],\n                ['allowColumnResizeFromCell', false],\n                ['allowFreezingRows', false],\n                ['allowFreezingColumns', false],\n                ['allowMovingSelection', true],\n                ['allowRowHeaderResize', true],\n                ['allowRowReordering', false],\n                ['allowRowResize', true],\n                ['allowRowResizeFromCell', false],\n                ['allowSorting', true],\n                ['autoGenerateSchema', false],\n                ['autoResizeColumns', false],\n                ['borderDragBehavior', 'none'],\n                ['borderResizeZone', 10],\n                ['clearSettingsOptionText', 'Clear saved settings'],\n                ['columnHeaderClickBehavior', 'sort'],\n                ['columnSelectorHiddenText', '&nbsp;&nbsp;&nbsp;'],\n                ['columnSelectorText', 'Add/Remove columns'],\n                ['columnSelectorVisibleText', '\\u2713'],\n                ['contextHoverScrollAmount', 2],\n                ['contextHoverScrollRateMs', 5],\n                ['copyHeadersOnSelectAll', true],\n                ['copyText', 'Copy'],\n                ['debug', false],\n                ['disableRowOrdering', false],\n                ['disableRowResizing', false],\n                ['editable', true],\n                ['filterOptionText', 'Filter %s'],\n                ['filterTextPrefix', '(filtered) '],\n                ['globalRowResize', false],\n                ['hideColumnText', 'Hide %s'],\n                ['maxAutoCompleteItems', 200],\n                ['multiLine', false],\n                ['name', ''],\n                ['pageUpDownOverlap', 1],\n                ['pasteText', 'Paste'],\n                ['persistantSelectionMode', false],\n                ['removeFilterOptionText', 'Remove filter on %s'],\n                ['reorderDeadZone', 3],\n                ['resizeScrollZone', 20],\n                ['rowGrabZoneSize', 5],\n                ['saveAppearance', true],\n                ['scrollAnimationPPSThreshold', 0.75],\n                ['scrollPointerLock', false],\n                ['scrollRepeatRate', 75],\n                ['selectionFollowsActiveCell', false],\n                ['selectionHandleBehavior', 'none'],\n                ['selectionMode', 'cell'],\n                ['selectionScrollIncrement', 20],\n                ['selectionScrollZone', 20],\n                ['showClearSettingsOption', true],\n                ['showColumnHeaders', true],\n                ['showColumnSelector', true],\n                ['showCopy', false],\n                ['showFilter', true],\n                ['showNewRow', false],\n                ['showOrderByOption', true],\n                ['showOrderByOptionTextAsc', 'Order by %s ascending'],\n                ['showOrderByOptionTextDesc', 'Order by %s descending'],\n                ['showPaste', false],\n                ['showPerformance', false],\n                ['showRowHeaders', true],\n                ['showRowNumbers', true],\n                ['snapToRow', false],\n                ['touchContextMenuTimeMs', 800],\n                ['touchDeadZone', 3],\n                ['touchEasingMethod', 'easeOutQuad'],\n                ['touchReleaseAcceleration', 1000],\n                ['touchReleaseAnimationDurationMs', 2000],\n                ['touchScrollZone', 20],\n                ['touchSelectHandleZone', 20],\n                ['touchZoomSensitivity', 0.005],\n                ['touchZoomMin', 0.5],\n                ['touchZoomMax', 1.75],\n                ['maxPixelRatio', 1],\n                ['tree', false],\n                ['treeHorizontalScroll', false]\n            ],\n            styles: [\n                ['activeCellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['activeCellBorderWidth', 1],\n                ['activeCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellFont', '16px sans-serif'],\n                ['activeCellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['activeCellOverlayBorderWidth', 1],\n                ['activeCellPaddingBottom', 5],\n                ['activeCellPaddingLeft', 5],\n                ['activeCellPaddingRight', 7],\n                ['activeCellPaddingTop', 5],\n                ['activeCellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['activeCellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['activeColumnHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeColumnHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeRowHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeRowHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['autocompleteBottomMargin', 60],\n                ['autosizeHeaderCellPadding', 8],\n                ['autosizePadding', 5],\n                ['cellAutoResizePadding', 13],\n                ['cellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['cellBorderWidth', 1],\n                ['cellColor', 'rgba(0, 0, 0, 1)'],\n                ['cellFont', '16px sans-serif'],\n                ['cellGridHeight', 250],\n                ['cellHeight', 24],\n                ['cellHeightWithChildGrid', 150],\n                ['cellHorizontalAlignment', 'left'],\n                ['cellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['cellPaddingBottom', 5],\n                ['cellPaddingLeft', 5],\n                ['cellPaddingRight', 7],\n                ['cellPaddingTop', 5],\n                ['cellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['cellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['cellVerticalAlignment', 'center'],\n                ['cellWidth', 250],\n                ['cellWidthWithChildGrid', 250],\n                ['childContextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['childContextMenuArrowHTML', '&#x25BA;'],\n                ['childContextMenuMarginLeft', -11],\n                ['childContextMenuMarginTop', -6],\n                ['columnHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellBorderColor', 'rgba(172, 172, 172, 1)'],\n                ['columnHeaderCellBorderWidth', 1],\n                ['columnHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['columnHeaderCellFont', '16px sans-serif'],\n                ['columnHeaderCellHeight', 25],\n                ['columnHeaderCellHorizontalAlignment', 'left'],\n                ['columnHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['columnHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['columnHeaderCellPaddingBottom', 5],\n                ['columnHeaderCellPaddingLeft', 5],\n                ['columnHeaderCellPaddingRight', 7],\n                ['columnHeaderCellPaddingTop', 5],\n                ['columnHeaderCellVerticalAlignment', 'center'],\n                ['columnHeaderOrderByArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['columnHeaderOrderByArrowBorderWidth', 1],\n                ['columnHeaderOrderByArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['columnHeaderOrderByArrowHeight', 8],\n                ['columnHeaderOrderByArrowMarginLeft', 0],\n                ['columnHeaderOrderByArrowMarginRight', 5],\n                ['columnHeaderOrderByArrowMarginTop', 6],\n                ['columnHeaderOrderByArrowWidth', 13],\n                ['contextFilterButtonBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterButtonBorderRadius', '3px'],\n                ['contextFilterButtonHTML', '&#x25BC;'],\n                ['contextFilterInputBackground', 'rgba(255,255,255,1)'],\n                ['contextFilterInputBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterInputBorderRadius', '0'],\n                ['contextFilterInputColor', 'rgba(0,0,0,1)'],\n                ['contextFilterInputFontFamily', 'sans-serif'],\n                ['contextFilterInputFontSize', '14px'],\n                ['contextFilterInvalidRegExpBackground', 'rgba(180, 6, 1, 1)'],\n                ['contextFilterInvalidRegExpColor', 'rgba(255, 255, 255, 1)'],\n                ['contextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuArrowDownHTML', '&#x25BC;'],\n                ['contextMenuArrowUpHTML', '&#x25B2;'],\n                ['contextMenuBackground', 'rgba(240, 240, 240, 1)'],\n                ['contextMenuBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextMenuBorderRadius', '3px'],\n                ['contextMenuChildArrowFontSize', '12px'],\n                ['contextMenuColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuFilterButtonFontFamily', 'sans-serif'],\n                ['contextMenuFilterButtonFontSize', '10px'],\n                ['contextMenuFilterInvalidExpresion', 'rgba(237, 155, 156, 1)'],\n                ['contextMenuFontFamily', 'sans-serif'],\n                ['contextMenuFontSize', '16px'],\n                ['contextMenuHoverBackground', 'rgba(182, 205, 250, 1)'],\n                ['contextMenuHoverColor', 'rgba(43, 48, 153, 1)'],\n                ['contextMenuItemBorderRadius', '3px'],\n                ['contextMenuItemMargin', '2px'],\n                ['contextMenuLabelDisplay', 'inline-block'],\n                ['contextMenuLabelMargin', '0 3px 0 0'],\n                ['contextMenuLabelMaxWidth', '700px'],\n                ['contextMenuLabelMinWidth', '75px'],\n                ['contextMenuMarginLeft', 3],\n                ['contextMenuMarginTop', -3],\n                ['contextMenuOpacity', '0.98'],\n                ['contextMenuPadding', '2px'],\n                ['contextMenuWindowMargin', 100],\n                ['contextMenuZIndex', 10000],\n                ['cornerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cornerCellBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['display', 'inline-block'],\n                ['editCellBackgroundColor', 'white'],\n                ['editCellBorder', 'solid 1px rgba(110, 168, 255, 1)'],\n                ['editCellBoxShadow', '0 2px 5px rgba(0,0,0,0.4)'],\n                ['editCellColor', 'black'],\n                ['editCellFontFamily', 'sans-serif'],\n                ['editCellFontSize', '16px'],\n                ['editCellPaddingLeft', 4],\n                ['editCellZIndex', 10000],\n                ['frozenMarkerHoverColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerHoverBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerActiveColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerActiveBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerColor', 'rgba(222, 222, 222, 1)'],\n                ['frozenMarkerBorderColor', 'rgba(168, 168, 168, 1)'],\n                ['frozenMarkerBorderWidth', 1],\n                ['frozenMarkerWidth', 2],\n                ['gridBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['gridBorderCollapse', 'collapse'],\n                ['gridBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['gridBorderWidth', 1],\n                ['height', 'auto'],\n                ['maxHeight', 'inherit'],\n                ['maxWidth', 'inherit'],\n                ['minColumnWidth', 45],\n                ['minHeight', 'inherit'],\n                ['minRowHeight', 24],\n                ['minWidth', 'inherit'],\n                ['mobileContextMenuMargin', 10],\n                ['mobileEditInputHeight', 30],\n                ['mobileEditFontFamily', 'sans-serif'],\n                ['mobileEditFontSize', '16px'],\n                ['moveOverlayBorderWidth', 1],\n                ['moveOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['moveOverlayBorderSegments', '12, 7'],\n                ['name', 'default'],\n                ['reorderMarkerBackgroundColor', 'rgba(0, 0, 0, 0.1)'],\n                ['reorderMarkerBorderColor', 'rgba(0, 0, 0, 0.2)'],\n                ['reorderMarkerBorderWidth', 1.25],\n                ['reorderMarkerIndexBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['reorderMarkerIndexBorderWidth', 2.75],\n                ['rowHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['rowHeaderCellBorderColor', 'rgba(200, 200, 200, 1)'],\n                ['rowHeaderCellBorderWidth', 1],\n                ['rowHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellFont', '16px sans-serif'],\n                ['rowHeaderCellHeight', 25],\n                ['rowHeaderCellHorizontalAlignment', 'left'],\n                ['rowHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['rowHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['rowHeaderCellPaddingBottom', 5],\n                ['rowHeaderCellPaddingLeft', 5],\n                ['rowHeaderCellPaddingRight', 5],\n                ['rowHeaderCellPaddingTop', 5],\n                ['rowHeaderCellSelectedBackgroundColor', 'rgba(217, 217, 217, 1)'],\n                ['rowHeaderCellSelectedColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellVerticalAlignment', 'center'],\n                ['rowHeaderCellWidth', 57],\n                ['scrollBarActiveColor', 'rgba(125, 125, 125, 1)'],\n                ['scrollBarBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarBorderWidth', 0.5],\n                ['scrollBarBoxBorderRadius', 4.125],\n                ['scrollBarBoxColor', 'rgba(192, 192, 192, 1)'],\n                ['scrollBarBoxMargin', 2],\n                ['scrollBarBoxMinSize', 15],\n                ['scrollBarBoxWidth', 8],\n                ['scrollBarCornerBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarCornerBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarWidth', 11],\n                ['selectionHandleBorderColor', 'rgba(255, 255, 255, 1)'],\n                ['selectionHandleBorderWidth', 1.5],\n                ['selectionHandleColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionHandleSize', 8],\n                ['selectionHandleType', 'square'],\n                ['selectionOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionOverlayBorderWidth', 1],\n                ['treeArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['treeArrowBorderWidth', 1],\n                ['treeArrowClickRadius', 5],\n                ['treeArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['treeArrowHeight', 8],\n                ['treeArrowMarginLeft', 0],\n                ['treeArrowMarginRight', 5],\n                ['treeArrowMarginTop', 6],\n                ['treeArrowWidth', 13],\n                ['treeGridHeight', 250],\n                ['width', 'auto']\n            ]\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/defaults.js\n// module id = 0\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true, evil: true*/\n/*globals Reflect: false, HTMLElement: true, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([\n    './component',\n    './defaults',\n    './draw',\n    './events',\n    './touch',\n    './intf',\n    './contextMenu',\n    './dom',\n    './publicMethods'\n], function context(component) {\n    'use strict';\n    component = component();\n    var modules = Array.prototype.slice.call(arguments);\n    function Grid(args) {\n        args = args || {};\n        var self = {};\n        self.isComponent = args.component === undefined;\n        self.isChildGrid = args.parentNode && /canvas-datagrid-(cell|tree)/.test(args.parentNode.nodeType);\n        if (self.isChildGrid) {\n            self.intf = {};\n        } else {\n            self.intf = self.isComponent ? eval('Reflect.construct(HTMLElement, [], new.target)')\n                : document.createElement('canvas');\n        }\n        self.args = args;\n        self.intf.args = args;\n        self.applyComponentStyle = component.applyComponentStyle;\n        self.createGrid = function grid(args) {\n            args.component = false;\n            return new Grid(args);\n        };\n        modules.forEach(function (module) {\n            module(self);\n        });\n        if (self.isChildGrid) {\n            self.shadowRoot = args.parentNode.shadowRoot;\n            self.parentNode = args.parentNode;\n        } else if (self.intf.createShadowRoot) {\n            self.shadowRoot = self.intf.attachShadow({mode: 'open'});\n            self.parentNode = self.shadowRoot;\n        } else {\n            self.parentNode = self.intf;\n        }\n        self.init();\n        return self.intf;\n    }\n    if (window.HTMLElement) {\n        Grid.prototype = Object.create(window.HTMLElement.prototype);\n    }\n    // export web component\n    if (window.customElements) {\n        Grid.observedAttributes = component.getObservableAttributes();\n        Grid.prototype.disconnectedCallback = component.disconnectedCallback;\n        Grid.prototype.attributeChangedCallback = component.attributeChangedCallback;\n        Grid.prototype.connectedCallback = component.connectedCallback;\n        Grid.prototype.adoptedCallback = component.adoptedCallback;\n        window.customElements.define('canvas-datagrid', Grid);\n    }\n    // export global\n    if (window && !window.canvasDatagrid && !window.require) {\n        window.canvasDatagrid = function (args) { return new Grid(args); };\n    }\n    // export amd loader\n    module.exports = function grid(args) {\n        args = args || {};\n        var i, tKeys = ['style', 'formatters', 'sorters', 'filters',\n                    'treeGridAttributes', 'cellGridAttributes', 'data', 'schema'];\n        if (window.customElements && document.body.createShadowRoot) {\n            i = document.createElement('canvas-datagrid');\n            Object.keys(args).forEach(function (argKey) {\n                // set data after everything else\n                if (argKey === 'data') { return; }\n                if (argKey === 'parentNode') {\n                    args.parentNode.appendChild(i);\n                    return;\n                }\n                // top level keys in args\n                if (tKeys.indexOf(argKey) !== -1) {\n                    tKeys.forEach(function (tKey) {\n                        if (args[tKey] === undefined || tKey !== argKey) { return; }\n                        if (['formatters', 'sorters', 'filters'].indexOf(argKey) !== -1) {\n                            if (typeof args[tKey] === 'object' && args[tKey] !== null) {\n                                Object.keys(args[tKey]).forEach(function (sKey) {\n                                    i[tKey][sKey] = args[tKey][sKey];\n                                });\n                            }\n                        } else {\n                            i[tKey] = args[tKey];\n                        }\n                    });\n                    return;\n                }\n                // all others are attribute level keys\n                i.attributes[argKey] = args[argKey];\n            });\n            if (args.data) {\n                i.data = args.data;\n            }\n            return i;\n        }\n        args.component = false;\n        i = new Grid(args);\n        if (args.parentNode && args.parentNode.appendChild) {\n            args.parentNode.appendChild(i);\n        }\n        return i;\n    };\n    return module.exports;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/main.js\n// module id = 1\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine(['./defaults'], function (defaults) {\n    'use strict';\n    return function () {\n        var typeMap, component = {};\n        function hyphenateProperty(prop, cust) {\n            var p = '';\n            Array.prototype.forEach.call(prop, function (char) {\n                if (char === char.toUpperCase()) {\n                    p += '-' + char.toLowerCase();\n                    return;\n                }\n                p += char;\n            });\n            return (cust ? '--cdg-' : '') + p;\n        }\n        function getDefaultItem(base, item) {\n            var i = {},\n                r;\n            defaults(i);\n            r = i.defaults[base].filter(function (i) {\n                return i[0].toLowerCase() === item.toLowerCase()\n                    || hyphenateProperty(i[0]) === item.toLowerCase()\n                    || hyphenateProperty(i[0], true) === item.toLowerCase();\n            })[0];\n            return r;\n        }\n        component.applyComponentStyle = function (supressChangeAndDrawEvents, intf) {\n            var cStyle = window.getComputedStyle(intf.tagName === 'CANVAS-DATAGRID' ? intf : intf.canvas, null),\n                defs = {};\n            intf.computedStyle = cStyle;\n            defaults(defs);\n            defs = defs.defaults.styles;\n            defs.forEach(function (def) {\n                var val;\n                val = cStyle.getPropertyValue(hyphenateProperty(def[0], true));\n                if (val === \"\") {\n                    val = cStyle.getPropertyValue(hyphenateProperty(def[0], false));\n                }\n                if (val !== \"\" && typeof val === 'string') {\n                    intf.setStyleProperty(def[0], typeMap[typeof def[1]](val\n                        .replace(/^\\s+/, '').replace(/\\s+$/, ''), def[1]));\n                }\n            });\n            requestAnimationFrame(function () { intf.resize(true); });\n            if (!supressChangeAndDrawEvents && intf.dispatchEvent) {\n                intf.dispatchEvent('stylechanged', intf.style);\n            }\n        };\n        typeMap = {\n            data: function (strData) {\n                try {\n                    return JSON.parse(strData);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid data.');\n                }\n            },\n            schema: function (strSchema) {\n                try {\n                    return JSON.parse(strSchema);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid schema attribute.');\n                }\n            },\n            number: function (strNum, def) {\n                var n = parseInt(strNum, 10);\n                return isNaN(n) ? def : n;\n            },\n            boolean: function (strBool) {\n                return (/true/i).test(strBool);\n            },\n            string: function (str) {\n                return str;\n            }\n        };\n        component.getObservableAttributes = function () {\n            var i = {}, attrs = ['data', 'schema', 'style', 'className', 'name'];\n            defaults(i);\n            i.defaults.attributes.forEach(function (attr) {\n                attrs.push(attr[0].toLowerCase());\n            });\n            return attrs;\n        };\n        component.disconnectedCallback = function () {\n            this.connected = false;\n        };\n        component.connectedCallback = function () {\n            var intf = this;\n            intf.connected = true;\n            component.observe(intf);\n            component.applyComponentStyle(true, intf);\n            intf.resize(true);\n        };\n        component.adoptedCallback = function () {\n            this.resize();\n        };\n        component.attributeChangedCallback = function (attrName, oldVal, newVal) {\n            var tfn, intf = this, def;\n            if (attrName === 'style') {\n                component.applyComponentStyle(false, intf);\n                return;\n            }\n            if (attrName === 'data') {\n                intf.args.data = typeMap.data(newVal);\n                return;\n            }\n            if (attrName === 'schema') {\n                intf.args.schema = typeMap.schema(newVal);\n                return;\n            }\n            if (attrName === 'name') {\n                intf.name = newVal;\n                return;\n            }\n            if (attrName === 'class' || attrName === 'className') {\n                return;\n            }\n            def = getDefaultItem('attributes', attrName);\n            if (def) {\n                tfn = typeMap[typeof def[1]];\n                intf.attributes[def[0]] = tfn(newVal);\n                return;\n            }\n            if (/^on/.test(attrName)) {\n                intf.addEventListener('on' + attrName, function (e) {\n                    eval(newVal);\n                });\n            }\n            return;\n        };\n        component.observe = function (intf) {\n            var observer;\n            if (!window.MutationObserver) { return; }\n            intf.applyComponentStyle = function () { component.applyComponentStyle(false, intf); intf.resize(); };\n            /**\n             * Applies the computed css styles to the grid.  In some browsers, changing directives in attached style sheets does not automatically update the styles in this component.  It is necessary to call this method to update in these cases.\n             * @memberof canvasDatagrid\n             * @name applyComponentStyle\n             * @method\n             */\n            observer = new window.MutationObserver(function (mutations) {\n                var checkInnerHTML, checkStyle;\n                Array.prototype.forEach.call(mutations, function (mutation) {\n                    if (mutation.attributeName === 'class'\n                            || mutation.attributeName === 'style') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.target.parentNode\n                            && mutation.target.parentNode.nodeName === 'STYLE') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.addedNodes.length > 0 || mutation.type === 'characterData') {\n                        checkInnerHTML = true;\n                    }\n                });\n                if (checkStyle) {\n                    intf.applyComponentStyle(false, intf);\n                }\n                if (checkInnerHTML) {\n                    intf.data = typeMap.data(intf.innerHTML);\n                }\n            });\n            observer.observe(intf, { characterData: true, childList: true, attributes: true, subtree: true });\n            Array.prototype.forEach.call(document.querySelectorAll('style'), function (el) {\n                observer.observe(el, { characterData: true, childList: true, attributes: true, subtree: true });\n            });\n        };\n        return component;\n    };\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/component.js\n// module id = 2\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals XMLSerializer: false, define: true, Blob: false, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var perfCounters = [],\n            drawCount = 0,\n            perfWindowSize = 300,\n            entityCount = [],\n            scrollDebugCounters = [],\n            touchPPSCounters = [];\n        self.htmlImageCache = {};\n        // more heavyweight version than fillArray defined in intf.js\n        function fillArray(low, high, step, def) {\n            step = step || 1;\n            var i = [], x;\n            for (x = low; x <= high; x += step) {\n                i[x] = def === undefined ? x : (typeof def === 'function' ? def(x) : def);\n            }\n            return i;\n        }\n        function drawPerfLine(w, h, x, y, perfArr, arrIndex, max, color, useAbs) {\n            var i = w / perfArr.length,\n                r = h / max;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x, y + h);\n            perfArr.forEach(function (n) {\n                var val = (arrIndex === undefined ? n : n[arrIndex]),\n                    cx,\n                    cy;\n                if (useAbs) {\n                    val = Math.abs(val);\n                }\n                cx = x + i;\n                cy = y + h - (val * r);\n                self.ctx.lineTo(cx, cy);\n                x += i;\n            });\n            self.ctx.moveTo(x + w, y + h);\n            self.ctx.strokeStyle = color;\n            self.ctx.stroke();\n        }\n        function drawOnAllImagesLoaded() {\n            var loaded = true;\n            Object.keys(self.htmlImageCache).forEach(function (html) {\n                if (!self.htmlImageCache[html].complete) {\n                    loaded = false;\n                }\n            });\n            if (loaded) {\n                self.draw();\n            }\n        }\n        function drawHtml(cell) {\n            var img,\n                v = cell.innerHTML || cell.formattedValue,\n                x = cell.x + self.canvasOffsetLeft,\n                y = cell.y + self.canvasOffsetTop;\n            if (self.htmlImageCache[v]) {\n                img = self.htmlImageCache[v];\n                if (img.height !== cell.height || img.width !== cell.width) {\n                    // height and width of the cell has changed, invalidate cache\n                    self.htmlImageCache[v] = undefined;\n                } else {\n                    if (!img.complete) {\n                        return;\n                    }\n                    return self.ctx.drawImage(img, x, y);\n                }\n            }\n            img = new Image(cell.width, cell.height);\n            self.htmlImageCache[v] = img;\n            img.onload = function () {\n                self.ctx.drawImage(img, x, y);\n                drawOnAllImagesLoaded();\n            };\n            img.src = 'data:image/svg+xml;base64,' + btoa(\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + cell.width + '\" height=\"' + cell.height + '\">\\n' +\n                    '<foreignObject class=\"node\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\\n' +\n                    '<body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;padding:0;\">\\n' +\n                    v + '\\n' +\n                    '</body>' +\n                    '</foreignObject>\\n' +\n                    '</svg>\\n'\n            );\n        }\n        function drawOrderByArrow(x, y) {\n            var mt = self.style.columnHeaderOrderByArrowMarginTop * self.scale,\n                ml = self.style.columnHeaderOrderByArrowMarginLeft * self.scale,\n                mr = self.style.columnHeaderOrderByArrowMarginRight * self.scale,\n                aw = self.style.columnHeaderOrderByArrowWidth * self.scale,\n                ah = self.style.columnHeaderOrderByArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.columnHeaderOrderByArrowColor;\n            self.ctx.strokeStyle = self.style.columnHeaderOrderByArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.orderDirection === 'asc') {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y + ah);\n                self.ctx.lineTo(x + aw, y + ah);\n                self.ctx.lineTo(x + (aw * 0.5), y);\n                self.ctx.lineTo(x, y + ah);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function drawTreeArrow(cell, x, y) {\n            var mt = self.style.treeArrowMarginTop * self.scale,\n                mr = self.style.treeArrowMarginRight * self.scale,\n                ml = self.style.treeArrowMarginLeft * self.scale,\n                aw = self.style.treeArrowWidth * self.scale,\n                ah = self.style.treeArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.treeArrowColor;\n            self.ctx.strokeStyle = self.style.treeArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.openChildren[cell.data[self.uniqueId]]) {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y);\n                self.ctx.lineTo(x + ah, y + (aw * 0.5));\n                self.ctx.lineTo(x, y + aw);\n                self.ctx.lineTo(x, y);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function radiusRect(x, y, w, h, radius) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            var r = x + w, b = y + h;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x + radius, y);\n            self.ctx.lineTo(r - radius, y);\n            self.ctx.quadraticCurveTo(r, y, r, y + radius);\n            self.ctx.lineTo(r, y + h - radius);\n            self.ctx.quadraticCurveTo(r, b, r - radius, b);\n            self.ctx.lineTo(x + radius, b);\n            self.ctx.quadraticCurveTo(x, b, x, b - radius);\n            self.ctx.lineTo(x, y + radius);\n            self.ctx.quadraticCurveTo(x, y, x + radius, y);\n        }\n        function fillRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillRect(x, y, w, h);\n        }\n        function strokeRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.strokeRect(x, y, w, h);\n        }\n        function fillText(text, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillText(text, x, y);\n        }\n        function fillCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.fill();\n        }\n        function strokeCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.stroke();\n        }\n        function clipFrozenArea(mode) {\n            // 0 both, 1 rows, 2 cols\n            // self.lastFrozenColumnPixel;\n            // self.lastFrozenRowPixel;\n            self.ctx.beginPath();\n            if (mode === 0) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, self.lastFrozenRowPixel);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 1) {\n                self.ctx.moveTo(0, self.lastFrozenRowPixel);\n                self.ctx.lineTo(0, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 2) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, 0);\n                self.ctx.lineTo(self.width, 0);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n            }\n            self.ctx.clip();\n        }\n        function fillHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return fillCircle(x, y, r * 0.5);\n            }\n            fillRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function strokeHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return strokeCircle(x, y, r * 0.5);\n            }\n            strokeRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function addselectionHandle(c, pos) {\n            var hw = self.style.selectionHandleSize,\n                p = {\n                    tr: function () {\n                        fillHandle(c.x + c.width, c.y, hw);\n                        strokeHandle(c.x + c.width, c.y, hw);\n                    },\n                    br: function () {\n                        fillHandle(c.x + c.width, c.y + c.height, hw);\n                        strokeHandle(c.x + c.width, c.y + c.height, hw);\n                    },\n                    tl: function () {\n                        fillHandle(c.x, c.y, hw);\n                        strokeHandle(c.x, c.y, hw);\n                    },\n                    bl: function () {\n                        fillHandle(c.x, c.y + c.height, hw);\n                        strokeHandle(c.x, c.y + c.height, hw);\n                    }\n                };\n            p[pos]();\n        }\n        function addBorderLine(c, pos) {\n            self.ctx.beginPath();\n            var p = {\n                t: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                },\n                r: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                b: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                l: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                }\n            };\n            p[pos]();\n            self.ctx.stroke();\n        }\n        function addEllipsis(text, width) {\n            var c, w = 0;\n            if (self.ellipsisCache[text] && self.ellipsisCache[text][width]) {\n                return self.ellipsisCache[text][width];\n            }\n            //TODO Add ellipsis back when there is a fast way to do it\n            w = self.ctx.measureText(text).width;\n            self.ellipsisCache[text] = self.ellipsisCache[text] || {};\n            c = {value: text, width: w};\n            self.ellipsisCache[text][width] = c;\n            return c;\n        }\n        function drawText(cell) {\n            var paddingLeft = self.style[cell.style + 'PaddingLeft'] * self.scale,\n                paddingTop = self.style[cell.style + 'PaddingTop'] * self.scale,\n                paddingRight = self.style[cell.style + 'PaddingRight'] * self.scale,\n                paddingBottom = self.style[cell.style + 'PaddingBottom'] * self.scale,\n                vPos = paddingTop + cell.height - (cell.height * 0.5),\n                hPos = paddingLeft + cell.treeArrowWidth + cell.orderByArrowWidth;\n            cell.text = addEllipsis(cell.formattedValue, cell.width - paddingRight - paddingLeft);\n            cell.text.height = cell.fontHeight;\n            if (cell.horizontalAlignment === 'right') {\n                hPos = cell.width - cell.text.width - paddingRight;\n            } else if (cell.horizontalAlignment === 'center') {\n                hPos = (cell.width / 2) - (cell.text.width / 2);\n            }\n            if (cell.verticalAlignment === 'top') {\n                vPos = paddingTop + cell.text.height;\n            } else if (cell.verticalAlignment === 'bottom') {\n                vPos = cell.height - paddingBottom - cell.text.height;\n            }\n            cell.text.x = cell.x + hPos;\n            cell.text.y = cell.y + vPos;\n            fillText(cell.text.value, cell.text.x, cell.text.y);\n        }\n        function getFrozenColumnsWidth() {\n            var w = 0,\n                s = self.getVisibleSchema(),\n                x = 0,\n                n = Math.min(self.frozenColumn, s.length),\n                column;\n            while (x < n) {\n                column = s[self.orders.columns[x]];\n                w += ((self.sizes.columns[column[self.uniqueId]] || column.width || self.style.cellWidth) * self.scale);\n                x += 1;\n            }\n            return w;\n        }\n        /**\n         * Redraws the grid. No matter what the change, this is the only method required to refresh everything.\n         * @memberof canvasDatagrid\n         * @name draw\n         * @method\n         */\n         // r = literal row index\n         // rd = row data array\n         // i = user order index\n         // o = literal data index\n         // y = y drawing cursor\n         // x = x drawing cursor\n         // s = visible schema array\n         // cx = current x drawing cursor sub calculation var\n         // cy = current y drawing cursor sub calculation var\n         // a = static cell (like corner cell)\n         // p = perf counter\n         // l = data length\n         // u = current cell\n         // h = current height\n         // w = current width\n        self.draw = function (internal) {\n            if (self.dispatchEvent('beforedraw', {})) { return; }\n            if (!self.isChildGrid && (!self.height || !self.width)) {\n                return;\n            }\n            if (self.isChildGrid && internal) {\n                requestAnimationFrame(self.parentGrid.draw);\n                return;\n            }\n            if (self.intf.visible === false) {\n                return;\n            }\n            // initial values\n            var checkScrollHeight, rowHeaderCell, p, cx, cy, treeGrid, rowOpen,\n                rowHeight, cornerCell, y, x, c, h, w, s, r, rd, aCell,\n                data = (self.data || []),\n                bc = self.style.gridBorderCollapse === 'collapse',\n                selectionBorders = [],\n                moveBorders = [],\n                selectionHandles = [],\n                rowHeaders = [],\n                frozenColumnWidths = getFrozenColumnsWidth(),\n                l = data.length,\n                u = self.currentCell || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                cellHeight = self.style.cellHeight;\n            drawCount += 1;\n            p = performance.now();\n            self.visibleRowHeights = [];\n            // if data length has changed, there is no way to know\n            if (data.length > self.orders.rows.length) {\n                self.createRowOrders();\n            }\n            function drawScrollBars() {\n                var drawCorner,\n                    en = self.scrollBox.entities,\n                    m = (self.style.scrollBarBoxMargin * 2);\n                self.ctx.strokeStyle = self.style.scrollBarBorderColor;\n                self.ctx.lineWidth = self.style.scrollBarBorderWidth;\n                en.horizontalBox.x = rowHeaderCellWidth + self.style.scrollBarBoxMargin\n                    + ((en.horizontalBar.width - self.scrollBox.scrollBoxWidth)\n                        * (self.scrollBox.scrollLeft / self.scrollBox.scrollWidth));\n                en.verticalBox.y = columnHeaderCellHeight + self.style.scrollBarBoxMargin\n                    + ((en.verticalBar.height - self.scrollBox.scrollBoxHeight)\n                        * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight));\n                if (self.scrollBox.horizontalBarVisible) {\n                    self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                    fillRect(en.horizontalBar.x, en.horizontalBar.y, en.horizontalBar.width + m, en.horizontalBar.height);\n                    strokeRect(en.horizontalBar.x, en.horizontalBar.y, en.horizontalBar.width + m, en.horizontalBar.height);\n                    self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                    if (/horizontal/.test(u.context)) {\n                        self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                    }\n                    radiusRect(en.horizontalBox.x, en.horizontalBox.y,\n                        en.horizontalBox.width, en.horizontalBox.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                    drawCorner = true;\n                    self.visibleCells.unshift(en.horizontalBar);\n                    self.visibleCells.unshift(en.horizontalBox);\n                }\n                if (self.scrollBox.verticalBarVisible) {\n                    self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                    fillRect(en.verticalBar.x, en.verticalBar.y, en.verticalBar.width, en.verticalBar.height + m);\n                    strokeRect(en.verticalBar.x, en.verticalBar.y, en.verticalBar.width, en.verticalBar.height + m);\n                    self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                    if (/vertical/.test(u.context)) {\n                        self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                    }\n                    radiusRect(en.verticalBox.x, en.verticalBox.y, en.verticalBox.width,\n                        en.verticalBox.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                    drawCorner = true;\n                    self.visibleCells.unshift(en.verticalBar);\n                    self.visibleCells.unshift(en.verticalBox);\n                }\n                if (drawCorner) {\n                    //corner\n                    self.ctx.strokeStyle = self.style.scrollBarCornerBorderColor;\n                    self.ctx.fillStyle = self.style.scrollBarCornerBackgroundColor;\n                    radiusRect(en.corner.x, en.corner.y, en.corner.width, en.corner.height, 0);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                    self.visibleCells.unshift(en.corner);\n                }\n            }\n            function createHandlesOverlayArray(cell) {\n                if (self.attributes.allowMovingSelection || self.mobile) {\n                    if (cell.selectionBorderTop && cell.selectionBorderRight && self.mobile) {\n                        selectionHandles.push([cell, 'tr']);\n                        cell.selectionHandle = 'tr';\n                    }\n                    if (cell.selectionBorderTop && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'tl']);\n                        cell.selectionHandle = 'tl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'bl']);\n                        cell.selectionHandle = 'bl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderRight\n                            && (self.attributes.selectionHandleBehavior !== 'none' || self.mobile)) {\n                        selectionHandles.push([cell, 'br']);\n                        cell.selectionHandle = 'br';\n                    }\n                }\n            }\n            function createBorderOverlayArray(cell, drawArray, propPrefix, offsetPoint) {\n                offsetPoint = offsetPoint || {x: 0, y: 0};\n                cell.selectionBorder = '';\n                if (!cell.isRowHeader\n                        && self.selections[cell.rowIndex + -offsetPoint.y]\n                        && self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) !== -1) {\n                    if ((!self.selections[cell.rowIndex - 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex - 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1\n                            || cell.rowIndex === 0)\n                            && !cell.isHeader) {\n                        drawArray.push([cell, 't']);\n                        cell[propPrefix + 'BorderTop'] = true;\n                        cell[propPrefix + 'Border'] += 't';\n                    }\n                    if (!self.selections[cell.rowIndex + 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex + 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'b']);\n                        cell[propPrefix + 'BorderBottom'] = true;\n                        cell[propPrefix + 'Border'] += 'b';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === 0\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex - 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'l']);\n                        cell[propPrefix + 'BorderLeft'] = true;\n                        cell[propPrefix + 'Border'] += 'l';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === s.length\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'r']);\n                        cell[propPrefix + 'BorderRight'] = true;\n                        cell[propPrefix + 'Border'] += 'r';\n                    }\n                }\n            }\n            function drawCell(d, rowOrderIndex, rowIndex) {\n                return function drawEach(header, headerIndex, columnOrderIndex) {\n                    var cellStyle = header.style || 'cell',\n                        cellGridAttributes,\n                        cell,\n                        isHeader = /HeaderCell/.test(cellStyle),\n                        isCorner = /cornerCell/.test(cellStyle),\n                        isRowHeader = 'rowHeaderCell' === cellStyle,\n                        isColumnHeader = 'columnHeaderCell' === cellStyle,\n                        selected = self.selections[rowOrderIndex] && self.selections[rowOrderIndex].indexOf(columnOrderIndex) !== -1,\n                        hovered = self.hovers[d[self.uniqueId]] && self.hovers[d[self.uniqueId]].indexOf(columnOrderIndex) !== -1,\n                        active = self.activeCell.rowIndex === rowOrderIndex && self.activeCell.columnIndex === columnOrderIndex,\n                        isGrid = typeof d[header.name] === 'object' && d[header.name] !== null && d[header.name] !== undefined,\n                        activeHeader = (self.orders.rows[self.activeCell.rowIndex] === rowOrderIndex\n                                || self.orders.columns[self.activeCell.columnIndex] === columnOrderIndex)\n                            && (columnOrderIndex === -1 || rowOrderIndex === -1)\n                            ? (isRowHeader ? 'activeRowHeaderCell' : 'activeColumnHeaderCell') : false,\n                        val,\n                        f = self.formatters[header.type || 'string'],\n                        orderByArrowSize = 0,\n                        treeArrowSize = 0,\n                        cellWidth = self.sizes.columns[isRowHeader ? 'cornerCell' : header[self.uniqueId]] || header.width,\n                        ev = {\n                            value: d[header.name],\n                            row: d,\n                            header: header\n                        };\n                    if (cellStyle === 'headerCellCap') {\n                        cellWidth = w - x;\n                    }\n                    // if no data or schema are defined, a width is provided to the stub column\n                    if (cellWidth === undefined) {\n                        cellWidth = self.style.cellWidth;\n                    }\n                    cellWidth = cellWidth * self.scale;\n                    if (x + cellWidth + self.style.cellBorderWidth < 0) {\n                        x += cellWidth + self.style.cellBorderWidth;\n                    }\n                    if (active && cellStyle !== 'cornerCell') {\n                        cellStyle = 'activeCell';\n                    }\n                    if (self.visibleRows.indexOf(rowIndex) === -1 && !isHeader) {\n                        self.visibleRows.push(rowIndex);\n                    }\n                    val = self.dispatchEvent('formatcellvalue', ev);\n                    cx = x;\n                    cy = y;\n                    if (cellStyle === 'cornerCell') {\n                        cx = 0;\n                        cy = 0;\n                    } else if (isRowHeader) {\n                        cx = 0;\n                    } else if (isHeader) {\n                        cy = 0;\n                    }\n                    cell = {\n                        type: isGrid ? 'canvas-datagrid-cell' : header.type,\n                        style: cellStyle,\n                        nodeType: 'canvas-datagrid-cell',\n                        x: cx,\n                        y: cy,\n                        horizontalAlignment: self.style[cellStyle + 'HorizontalAlignment'],\n                        verticalAlignment: self.style[cellStyle + 'VerticalAlignment'],\n                        offsetTop: self.canvasOffsetTop + cy,\n                        offsetLeft: self.canvasOffsetLeft + cx,\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        active: active || activeHeader,\n                        hovered: hovered,\n                        selected: selected,\n                        width: cellWidth,\n                        height: cellHeight,\n                        offsetWidth: cellWidth,\n                        offsetHeight: cellHeight,\n                        parentNode: self.intf.parentNode,\n                        offsetParent: self.intf.parentNode,\n                        data: d,\n                        isCorner: isCorner,\n                        isHeader: isHeader,\n                        isColumnHeader: isColumnHeader,\n                        isHeaderCellCap: !!header.isHeaderCellCap,\n                        isRowHeader: isRowHeader,\n                        rowOpen: rowOpen,\n                        header: header,\n                        columnIndex: columnOrderIndex,\n                        rowIndex: rowOrderIndex,\n                        sortColumnIndex: headerIndex,\n                        sortRowIndex: rowIndex,\n                        isGrid: isGrid,\n                        isNormal: !isGrid && !isCorner && !isHeader,\n                        gridId: (self.attributes.name || '') + d[self.uniqueId] + ':' + header[self.uniqueId],\n                        parentGrid: self.intf,\n                        innerHTML: '',\n                        activeHeader: activeHeader,\n                        value: isHeader && !isRowHeader ? (header.title || header.name) : d[header.name]\n                    };\n                    ev.cell = cell;\n                    cell.userHeight = cell.isHeader ? self.sizes.rows[-1] : rowHeight;\n                    cell.userWidth = cell.isHeader ? self.sizes.columns.cornerCell : self.sizes.columns[header[self.uniqueId]];\n                    cell[self.uniqueId] = d[self.uniqueId];\n                    self.visibleCells.unshift(cell);\n                    if (self.dispatchEvent('beforerendercell', ev)) { return; }\n                    self.ctx.fillStyle = self.style[cellStyle + 'BackgroundColor'];\n                    self.ctx.strokeStyle = self.style[cellStyle + 'BorderColor'];\n                    self.ctx.lineWidth = self.style[cellStyle + 'BorderWidth'];\n                    if (hovered) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'HoverBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'HoverBorderColor'];\n                    }\n                    if (selected) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'SelectedBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'SelectedBorderColor'];\n                    }\n                    if (activeHeader) {\n                        self.ctx.fillStyle = self.style[activeHeader + 'BackgroundColor'];\n                    }\n                    self.dispatchEvent('rendercell', ev);\n                    if (cell.isGrid) {\n                        if (cell.height !== rowHeight) {\n                            cell.height = rowHeight || self.style.cellHeightWithChildGrid;\n                            checkScrollHeight = true;\n                        }\n                        cell.width = self.sizes.columns[header[self.uniqueId]] || self.style.cellWidthWithChildGrid;\n                    }\n                    if (rowOpen && !cell.isRowHeader) {\n                        cell.height = self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight;\n                    }\n                    if (!cell.isGrid) {\n                        fillRect(cx, cy, cell.width, cell.height);\n                        strokeRect(cx, cy, cell.width, cell.height);\n                    }\n                    self.ctx.save();\n                    radiusRect(cell.x, cell.y, cell.width, cell.height, 0);\n                    self.ctx.clip();\n                    self.dispatchEvent('afterrendercell', ev);\n                    if (cell.height !== cellHeight && !(rowOpen && !cell.isRowHeader)) {\n                        self.sizes.rows[isHeader ? -1 : d[self.uniqueId]] = cell.height;\n                        checkScrollHeight = true;\n                    }\n                    if (cell.width !== cellWidth) {\n                        self.sizes.columns[header[self.uniqueId]] = cell.width;\n                        checkScrollHeight = true;\n                    }\n                    if (isRowHeader && self.attributes.tree) {\n                        if (!self.dispatchEvent('rendertreearrow', ev)) {\n                            treeArrowSize = drawTreeArrow(cell, self.style[cellStyle + 'PaddingLeft'], cy, 0);\n                        }\n                    }\n                    if ((self.attributes.showRowNumbers && isRowHeader)\n                            || !isRowHeader) {\n                        if (cell.isGrid && !self.dispatchEvent('beforerendercellgrid', ev)) {\n                            if (!self.childGrids[cell.gridId]) {\n                                // HACK: this only allows setting of the child grids styles if data is set _after_\n                                // this is less than desirable.  An interface needs to be made to effect the\n                                // style of all cell grids.  One for individual grids already exists.\n                                cellGridAttributes = self.cellGridAttributes;\n                                cellGridAttributes.name = self.attributes.saveAppearance ? cell.gridId : undefined;\n                                cellGridAttributes.component = false;\n                                cellGridAttributes.parentNode = cell;\n                                cellGridAttributes.data = d[header.name];\n                                ev.cellGridAttributes = cellGridAttributes;\n                                if (self.dispatchEvent('beforecreatecellgrid', ev)) { return; }\n                                self.childGrids[cell.gridId] = self.createGrid(cellGridAttributes);\n                                self.sizes.rows[rd[self.uniqueId]]\n                                    = self.sizes.rows[rd[self.uniqueId]] || self.style.cellGridHeight;\n                                checkScrollHeight = true;\n                            }\n                            cell.grid = self.childGrids[cell.gridId];\n                            cell.grid.parentNode = cell;\n                            cell.grid.visible = true;\n                            cell.grid.draw();\n                            self.dispatchEvent('rendercellgrid', ev);\n                        } else if (!cell.isGrid) {\n                            if (self.childGrids[cell.gridId]) {\n                                self.childGrids[cell.gridId].parentNode.offsetHeight = 0;\n                            }\n                            if (isHeader && self.orderBy === header.name) {\n                                if (!self.dispatchEvent('renderorderbyarrow', ev)) {\n                                    orderByArrowSize = drawOrderByArrow(cx + self.style[cellStyle + 'PaddingLeft'], 0);\n                                }\n                            }\n                            self.ctx.fillStyle = self.style[cellStyle + 'Color'];\n                            if (hovered) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'HoverColor'];\n                            }\n                            if (selected) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'SelectedColor'];\n                            }\n                            if (activeHeader) {\n                                self.ctx.fillStyle = self.style[activeHeader + 'Color'];\n                            }\n                            self.ctx.font = (self.style[cellStyle + 'FontHeight'] * self.scale) + 'px ' + self.style[cellStyle + 'FontName'];\n                            cell.fontHeight = (self.style[cellStyle + 'FontHeight'] * self.scale);\n                            cell.treeArrowWidth = treeArrowSize;\n                            cell.orderByArrowWidth = orderByArrowSize;\n                            val = val !== undefined ? val : f\n                                ? f(ev) : '';\n                            if (val === undefined && !f) {\n                                val = '';\n                                console.warn('canvas-datagrid: Unknown format '\n                                    + header.type + ' add a cellFormater');\n                            }\n                            cell.formattedValue = ((val !== undefined && val !== null) ? val : '').toString();\n                            if (self.columnFilters && self.columnFilters[val] !== undefined && isHeader) {\n                                cell.formattedValue = self.attributes.filterTextPrefix + val;\n                            }\n                            if (!self.dispatchEvent('rendertext', ev)) {\n                                if (cell.innerHTML || header.type === 'html') {\n                                    drawHtml(cell);\n                                } else {\n                                    drawText(cell);\n                                }\n                            }\n                        }\n                    }\n                    if (active) {\n                        aCell = cell;\n                    }\n                    createBorderOverlayArray(cell, selectionBorders, 'selection');\n                    // createBorderOverlayArray calculates data for createHandlesOverlayArray so it must go 2nd\n                    createHandlesOverlayArray(cell);\n                    if (self.movingSelection) {\n                        createBorderOverlayArray(cell, moveBorders, 'move', self.moveOffset);\n                    }\n                    self.ctx.restore();\n                    x += cell.width + (bc ? 0 : self.style.cellBorderWidth);\n                    return cell.width;\n                };\n            }\n            function drawRowHeader(rowData, index, rowOrderIndex) {\n                var a;\n                if (self.attributes.showRowHeaders) {\n                    x = 0;\n                    rowHeaderCell = {'rowHeaderCell': index + 1 };\n                    rowHeaderCell[self.uniqueId] = rowData[self.uniqueId];\n                    a = {\n                        name: 'rowHeaderCell',\n                        width: self.style.rowHeaderCellWidth,\n                        style: 'rowHeaderCell',\n                        type: 'string',\n                        data: rowData[self.uniqueId],\n                        index: -1\n                    };\n                    a[self.uniqueId] = rowData[self.uniqueId];\n                    rowOpen = self.openChildren[rowData[self.uniqueId]];\n                    drawCell(rowHeaderCell, index, rowOrderIndex)(a, -1, -1);\n                }\n            }\n            function drawHeaders() {\n                var d, g = s.length, i, o, columnHeaderCell, header, nonFrozenHeaderWidth;\n                function drawHeaderColumnRange(start, end) {\n                    end = Math.min(end, g);\n                    for (o = start; o < end; o += 1) {\n                        i = self.orders.columns[o];\n                        header = s[i];\n                        d = {\n                            title: header.title,\n                            name: header.name,\n                            width: header.width || self.style.cellWidth,\n                            style: 'columnHeaderCell',\n                            type: 'string',\n                            index: o,\n                            order: i\n                        };\n                        columnHeaderCell = {'columnHeaderCell': header.title || header.name};\n                        columnHeaderCell[self.uniqueId] = 'h' + header[self.uniqueId];\n                        d[self.uniqueId] = header[self.uniqueId];\n                        x += drawCell(columnHeaderCell, -1, -1)(d, o, i);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                }\n                rowHeaders.forEach(function (rArgs, rhIndex) {\n                    y = rArgs[3];\n                    cellHeight = rArgs[4];\n                    if (rhIndex === self.frozenRow) {\n                        self.ctx.save();\n                        radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                        self.ctx.clip();\n                    }\n                    drawRowHeader(rArgs[0], rArgs[1], rArgs[2]);\n                });\n                self.ctx.restore();\n                if (self.attributes.showColumnHeaders) {\n                    x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    if (self.attributes.allowFreezingColumns) {\n                        x += frozenColumnWidths;\n                    }\n                    y = 0;\n                    // cell height might have changed during drawing\n                    cellHeight = self.getColumnHeaderCellHeight();\n                    drawHeaderColumnRange(self.scrollIndexLeft + self.frozenColumn, g);\n                    nonFrozenHeaderWidth = x;\n                    x = self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    drawHeaderColumnRange(0, self.frozenColumn);\n                    // fill in the space right of the headers\n                    x = nonFrozenHeaderWidth;\n                    if (x < w) {\n                        c = {\n                            name: '',\n                            width: self.style.scrollBarWidth,\n                            style: 'headerCellCap',\n                            isHeaderCell: true,\n                            isHeaderCellCap: true,\n                            type: 'string',\n                            index: s.length\n                        };\n                        c[self.uniqueId] = 'columnHeaderCell';\n                        drawCell({endCap: ''}, -1, -1)(c, -1, -1);\n                    }\n                    // fill in the space right of the headers\n                    if (self.attributes.showRowHeaders) {\n                        cornerCell = {'cornerCell': '' };\n                        cornerCell[self.uniqueId] = 'cornerCell';\n                        x = 0;\n                        c = {\n                            name: 'cornerCell',\n                            width: self.style.rowHeaderCellWidth,\n                            style: 'cornerCell',\n                            type: 'string',\n                            index: -1\n                        };\n                        c[self.uniqueId] = 'cornerCell';\n                        drawCell(cornerCell, -1, -1)(c, -1, -1);\n                    }\n                }\n            }\n            function drawRow(r, d) {\n                var i, treeHeight, rowSansTreeHeight, o, g = s.length;\n                if (y - (cellHeight * 2) > h) {\n                    return false;\n                }\n                rd = data[r];\n                rowOpen = self.openChildren[rd[self.uniqueId]];\n                rowSansTreeHeight = (self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight) * self.scale;\n                treeHeight = (rowOpen ? self.sizes.trees[rd[self.uniqueId]] : 0) * self.scale;\n                rowHeight = (rowSansTreeHeight + treeHeight);\n                if (y < -rowHeight) {\n                    return false;\n                }\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                cellHeight = rowHeight;\n                if (self.attributes.allowFreezingColumns) {\n                    x += frozenColumnWidths;\n                }\n                //draw normal columns\n                for (o = (self.scrollIndexLeft + self.frozenColumn); o < g; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        self.scrollIndexRight = o;\n                        self.scrollPixelRight = x;\n                        break;\n                    }\n                }\n                //draw frozen columns\n                x = 0;\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                for (o = 0; o < self.frozenColumn; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        break;\n                    }\n                }\n                self.lastFrozenColumnPixel = x;\n                // cell height might have changed during drawing\n                cellHeight = rowHeight;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                // don't draw a tree for the new row\n                treeGrid = self.childGrids[rd[self.uniqueId]];\n                if (r !== data.length && rowOpen) {\n                    treeGrid.visible = true;\n                    treeGrid.parentNode = {\n                        offsetTop: y + rowSansTreeHeight + self.canvasOffsetTop,\n                        offsetLeft: rowHeaderCellWidth - 1 + self.canvasOffsetLeft,\n                        offsetHeight: treeHeight,\n                        offsetWidth: self.width - rowHeaderCellWidth - self.style.scrollBarWidth - 1,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: self.style,\n                        nodeType: 'canvas-datagrid-tree',\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        rowIndex: r\n                    };\n                    self.visibleCells.unshift({\n                        rowIndex: r,\n                        columnIndex: 0,\n                        y: treeGrid.parentNode.offsetTop,\n                        x: treeGrid.parentNode.offsetLeft,\n                        height: treeGrid.height,\n                        width: treeGrid.width,\n                        style: 'tree-grid',\n                        type: treeGrid.parentNode.nodeType\n                    });\n                    treeGrid.draw();\n                } else if (treeGrid) {\n                    treeGrid.parentNode.offsetHeight = 0;\n                    delete self.sizes.trees[rd[self.uniqueId]];\n                }\n                rowHeaders.push([rd, r, d, y, rowHeight]);\n                self.visibleRowHeights[r] = rowHeight;\n                y += cellHeight + (bc ? 0 : self.style.cellBorderWidth);\n                return true;\n            }\n            function initDraw() {\n                self.visibleRows = [];\n                s = self.getVisibleSchema();\n                self.visibleCells = [];\n                self.canvasOffsetTop = self.isChildGrid ? self.parentNode.offsetTop : 0;\n                self.canvasOffsetLeft = self.isChildGrid ? self.parentNode.offsetLeft : 0;\n                h = self.height;\n                w = self.width;\n            }\n            function drawBackground() {\n                radiusRect(0, 0, w, h, 0);\n                self.ctx.clip();\n                self.ctx.fillStyle = self.style.gridBackgroundColor;\n                fillRect(0, 0, w, h);\n            }\n            function drawFrozenRows() {\n                var n, ln = Math.min(data.length, self.frozenRow);\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                y = columnHeaderCellHeight;\n                for (r = 0; r < ln; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.allowFreezingRows) {\n                    // HACK great, another stupid magic number.\n                    // Background will appear as a 0.5px artifact behind the row freeze bar without this hack\n                    y += self.style.frozenMarkerBorderWidth + self.style.frozenMarkerWidth - 0.4999999999;\n                }\n                self.lastFrozenRowPixel = y;\n            }\n            function drawRows() {\n                self.ctx.save();\n                if (self.frozenRow > 0) {\n                    radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                    self.ctx.clip();\n                }\n                var o, n, i, g = s.length;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                if (!self.attributes.snapToRow) {\n                    y += -self.scrollBox.scrollTop + self.scrollPixelTop + self.style.cellBorderWidth;\n                }\n                for (r = self.frozenRow + self.scrollIndexTop; r < l; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        self.scrollIndexBottom = r;\n                        self.scrollPixelBottom = y;\n                        break;\n                    }\n                }\n                if (self.attributes.showNewRow) {\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    rowHeight = cellHeight = self.style.cellHeight;\n                    rowOpen = false;\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        x += drawCell(self.newRow, data.length, data.length)(s[i], i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    rowHeaders.push([self.newRow, data.length, data.length, y, rowHeight]);\n                }\n                self.ctx.restore();\n            }\n            function drawMoveMarkers() {\n                if (!self.movingSelection) { return; }\n                self.ctx.lineWidth = self.style.moveOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.moveOverlayBorderColor;\n                self.ctx.setLineDash(self.style.moveOverlayBorderSegments);\n                moveBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n                self.ctx.setLineDash([]);\n            }\n            function drawReorderMarkers() {\n                if (!self.reorderObject) { return; }\n                var b = {\n                        height: self.reorderObject.height,\n                        width: self.reorderObject.width,\n                        x: self.reorderObject.x + self.reorderObject.dragOffset.x,\n                        y: self.reorderObject.y + self.reorderObject.dragOffset.y\n                    },\n                    m = {\n                        width: w,\n                        height: h,\n                        x: 0,\n                        y: 0\n                    };\n                self.ctx.fillStyle = self.style.reorderMarkerBackgroundColor;\n                self.ctx.lineWidth = self.style.reorderMarkerBorderWidth;\n                self.ctx.strokeStyle = self.style.reorderMarkerBorderColor;\n                if (self.dragMode === 'row-reorder') {\n                    b.width = w;\n                    b.x = 0;\n                    m.width = w;\n                    m.height = self.currentCell.height;\n                    m.y = self.currentCell.y;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.rowIndex !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex > -1\n                            && self.currentCell.rowIndex < l) {\n                        addBorderLine(m, self.reorderTarget.sortRowIndex > self.reorderObject.sortRowIndex ? 'b' : 't');\n                    }\n                } else if (self.dragMode === 'column-reorder' && self.reorderObject) {\n                    b.height = h;\n                    b.y = 0;\n                    m.height = h;\n                    m.width = self.currentCell.width;\n                    m.y = 0;\n                    m.x = self.currentCell.x;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.columnIndex !== self.reorderObject.columnIndex\n                            && self.currentCell.columnIndex > -1\n                            && self.currentCell.columnIndex < s.length) {\n                        addBorderLine(m, self.reorderTarget.sortColumnIndex > self.reorderObject.sortColumnIndex ? 'r' : 'l');\n                    }\n                }\n            }\n            function drawBorder() {\n                self.ctx.lineWidth = self.style.gridBorderWidth;\n                self.ctx.strokeStyle = self.style.gridBorderColor;\n                strokeRect(0, 0, self.width, self.height);\n            }\n            function drawSelectionBorders() {\n                self.ctx.lineWidth = self.style.selectionOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.selectionOverlayBorderColor;\n                function dsb(c) {\n                    addBorderLine(c[0], c[1]);\n                }\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.save();\n                clipFrozenArea(0);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(1);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(2);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n            }\n            function drawSelectionHandles() {\n                if (self.mobile || self.attributes.allowMovingSelection) {\n                    self.ctx.lineWidth = self.style.selectionHandleBorderWidth;\n                    self.ctx.strokeStyle = self.style.selectionHandleBorderColor;\n                    self.ctx.fillStyle = self.style.selectionHandleColor;\n                    selectionHandles.forEach(function (c) {\n                        addselectionHandle(c[0], c[1]);\n                        var az = self.attributes.touchSelectHandleZone / 2,\n                            ax = c[0].x + (c[1] === 'tl' || c[1] === 'bl' ? 0 : c[0].width) - az,\n                            ay = c[0].y + (c[1] === 'bl' || c[1] === 'br' ? c[0].height : 0) - az;\n                        self.visibleCells.unshift({\n                            x: ax,\n                            y: ay,\n                            height: self.style.selectionHandleSize + az,\n                            width: self.style.selectionHandleSize + az,\n                            style: 'selection-handle-' + c[1]\n                        });\n                    });\n                }\n            }\n            function drawActiveCell() {\n                if (!aCell) { return; }\n                self.ctx.save();\n                var cl = self.activeCell.columnIndex + 1 > self.frozenColumn || self.activeCell.rowIndex + 1 > self.frozenRow,\n                    acx = cl ? self.lastFrozenColumnPixel : 0,\n                    acy = cl ? self.lastFrozenRowPixel : 0,\n                    acw = cl ? self.width - self.lastFrozenColumnPixel : self.width,\n                    ach = cl ? self.height - self.lastFrozenRowPixel : self.height;\n                radiusRect(acx, acy, acw, ach, 0);\n                self.ctx.clip();\n                if (self.attributes.selectionMode === 'row') {\n                    if (self.activeCell && self.activeCell.rowIndex === aCell.rowIndex) {\n                        self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                        self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                        strokeRect(0, aCell.y, self.getHeaderWidth() + rowHeaderCellWidth, self.visibleRowHeights[aCell.rowIndex]);\n                    }\n                } else {\n                    self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                    self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                    strokeRect(aCell.x, aCell.y, aCell.width, aCell.height);\n                }\n                self.ctx.restore();\n            }\n            function drawFrozenMarkers() {\n                var my = self.lastFrozenRowPixel - self.style.frozenMarkerWidth,\n                    mx = self.lastFrozenColumnPixel - self.style.frozenMarkerBorderWidth,\n                    xHover = self.currentCell && self.currentCell.style === 'frozen-row-marker',\n                    yHover = self.currentCell && self.currentCell.style === 'frozen-column-marker';\n                self.ctx.lineWidth = self.style.frozenMarkerBorderWidth;\n                if (self.attributes.allowFreezingColumns) {\n                    self.ctx.fillStyle = yHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = yHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    strokeRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    self.visibleCells.unshift({\n                        x: mx,\n                        y: 0,\n                        height: self.height,\n                        width: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        style: 'frozen-column-marker'\n                    });\n                }\n                if (self.attributes.allowFreezingRows) {\n                    self.ctx.fillStyle = xHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = xHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    strokeRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    self.visibleCells.unshift({\n                        x: 0,\n                        y: my,\n                        height: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        width: self.width,\n                        style: 'frozen-row-marker'\n                    });\n                }\n                if (self.freezeMarkerPosition) {\n                    self.ctx.fillStyle = self.style.frozenMarkerActiveColor;\n                    self.ctx.strokeStyle = self.style.frozenMarkerActiveBorderColor;\n                    if (self.dragMode === 'frozen-column-marker') {\n                        fillRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                        strokeRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                    } else {\n                        fillRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                        strokeRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                    }\n                }\n            }\n            function drawPerfLines() {\n                if (!self.attributes.showPerformance) { return; }\n                var pw = 250,\n                    px = self.width - pw - self.style.scrollBarWidth - (self.style.scrollBarBorderWidth * 2),\n                    py = columnHeaderCellHeight,\n                    ph = 100;\n                if (scrollDebugCounters.length === 0) { scrollDebugCounters = fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (touchPPSCounters.length === 0) { touchPPSCounters = fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (entityCount.length === 0) { entityCount = fillArray(0, perfWindowSize, 1, 0); }\n                self.ctx.lineWidth = 0.5;\n                function dpl(name, perfArr, arrIndex, max, color, useAbs, rowIndex) {\n                    var v;\n                    drawPerfLine(pw, ph, px, py, perfArr, arrIndex, max, color, useAbs);\n                    self.ctx.fillStyle = color;\n                    fillRect(3 + px, py + 9 + (rowIndex * 11), 8, 8);\n                    self.ctx.fillStyle = '#999999';\n                    v = arrIndex !== undefined ? perfArr[0][arrIndex] : perfArr[0];\n                    fillText(name + ' ' + (isNaN(v) ? 0 : v).toFixed(3), 14 + px, py + 16 + (rowIndex * 11));\n                }\n                self.ctx.textAlign = 'left';\n                self.ctx.font = '8px sans-serif';\n                self.ctx.fillStyle = 'rgba(29, 25, 26, 1.00)';\n                fillRect(px, py, pw, ph);\n                [['Scroll Height', scrollDebugCounters, 0, self.scrollBox.scrollHeight, 'rgba(248, 33, 103, 1.00)', false],\n                    ['Scroll Width', scrollDebugCounters, 1, self.scrollBox.scrollWidth, 'rgba(66, 255, 27, 1.00)', false],\n                    ['Performance', perfCounters, undefined, 200, 'rgba(252, 255, 37, 1.00)', false],\n                    ['Entities', entityCount, undefined, 1500, 'rgba(76, 231, 239, 1.00)', false],\n                    ['TouchPPSX', touchPPSCounters, 0, 1000, 'rgba(246, 102, 24, 1.00)', true],\n                    ['TouchPPSY', touchPPSCounters, 1, 1000, 'purple', true]\n                    ].forEach(function (i, index) {\n                    i.push(index);\n                    dpl.apply(null, i);\n                });\n                self.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n                entityCount.pop();\n                entityCount.unshift(self.visibleCells.length);\n                scrollDebugCounters.pop();\n                scrollDebugCounters.unshift([self.scrollBox.scrollTop, self.scrollBox.scrollLeft]);\n                touchPPSCounters.pop();\n                touchPPSCounters.unshift([self.yPPS, self.xPPS]);\n            }\n            function drawDebug() {\n                self.ctx.save();\n                var d;\n                if (self.attributes.showPerformance || self.attributes.debug) {\n                    if (perfCounters.length === 0) { perfCounters = fillArray(0, perfWindowSize, 1, 0); }\n                    perfCounters.pop();\n                    perfCounters.unshift(performance.now() - p);\n                }\n                if (!self.attributes.debug) {\n                    self.ctx.restore();\n                    return;\n                }\n                self.ctx.font = '14px sans-serif';\n                d = {};\n                d.perf = (perfCounters.reduce(function (a, b) {\n                    return a + b;\n                }, 0) / Math.min(drawCount, perfCounters.length)).toFixed(1);\n                d.htmlImages = Object.keys(self.htmlImageCache).length;\n                d.reorderObject = 'x: ' + (self.reorderObject || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderObject || {rowIndex: 0}).rowIndex;\n                d.reorderTarget = 'x: ' + (self.reorderTarget || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderTarget || {rowIndex: 0}).rowIndex;\n                d.scale = self.scale;\n                d.startScale = self.startScale;\n                d.scaleDelta = self.scaleDelta;\n                d.zoomDeltaStart = self.zoomDeltaStart;\n                d.touchLength = self.touchLength;\n                d.touches = 'y0: ' + (self.touchPosition || {y: 0}).y + ' y1: ' + (self.touchPosition1 || {y: 0}).y;\n                d.scrollBox = self.scrollBox.toString();\n                d.scrollIndex = 'x: ' + self.scrollIndexLeft + ', y: ' + self.scrollIndexTop;\n                d.scrollPixel = 'x: ' + self.scrollPixelLeft + ', y: ' + self.scrollPixelTop;\n                d.canvasOffset = 'x: ' + self.canvasOffsetLeft + ', y: ' + self.canvasOffsetTop;\n                d.touchDelta = 'x: ' + self.touchDelta.x + ', y: ' + self.touchDelta.y;\n                d.touchAnimateTo = 'x: ' + self.touchAnimateTo.x + ', y: ' + self.touchAnimateTo.y;\n                d.scrollAnimation = 'x: ' + self.scrollAnimation.x + ', y: ' + self.scrollAnimation.y;\n                d.touchPPS = 'x: ' + self.xPPS + ', y: ' + self.yPPS;\n                d.touchPPST = 'x: ' + self.xPPST + ', y: ' + self.yPPST;\n                d.touchDuration = self.touchDuration;\n                d.pointerLockPosition =  self.pointerLockPosition ?\n                        self.pointerLockPosition.x + ', ' + self.pointerLockPosition.y : '';\n                d.size = 'w: ' + self.width + ', h: ' + self.height;\n                d.mouse = 'x: ' + self.mouse.x + ', y: ' + self.mouse.y;\n                d.touch = !self.touchStart\n                    ? '' : 'x: ' + self.touchStart.x + ', y: ' + self.touchStart.y;\n                d.entities = self.visibleCells.length;\n                d.hasFocus = self.hasFocus;\n                d.dragMode = self.dragMode;\n                if (self.currentCell) {\n                    d.columnIndex = self.currentCell.columnIndex;\n                    d.rowIndex = self.currentCell.rowIndex;\n                    d.sortColumnIndex = self.currentCell.sortColumnIndex;\n                    d.sortRowIndex = self.currentCell.sortRowIndex;\n                    d.context = self.currentCell.context;\n                    d.dragContext = self.currentCell.dragContext;\n                    d.style = self.currentCell.style;\n                    d.type = self.currentCell.type;\n                }\n                self.ctx.textAlign = 'right';\n                self.ctx.fillStyle = 'rgba(0, 0, 0, .60)';\n                fillRect(0, 0, self.width, self.height);\n                Object.keys(d).forEach(function (key, index) {\n                    var m = key + ': ' + d[key],\n                        lh = 14;\n                    self.ctx.fillStyle = 'rgba(37, 254, 21, 1)';\n                    fillText(m, w - 20, (self.attributes.showPerformance ? 140 : 24) + (index * lh));\n                });\n                self.ctx.restore();\n            }\n            self.ctx.save();\n            initDraw();\n            drawBackground();\n            drawFrozenRows();\n            drawRows();\n            drawActiveCell();\n            drawHeaders();\n            drawFrozenMarkers();\n            drawSelectionBorders();\n            drawSelectionHandles();\n            drawReorderMarkers();\n            drawMoveMarkers();\n            drawScrollBars();\n            if (checkScrollHeight) {\n                self.resize(true);\n            }\n            drawBorder();\n            drawDebug();\n            drawPerfLines();\n            if (self.dispatchEvent('afterdraw', {})) { return; }\n            self.ctx.restore();\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/draw.js\n// module id = 3\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var wheeling;\n        self.stopPropagation = function (e) { e.stopPropagation(); };\n        /**\n         * Adds an event listener to the given event.\n         * @memberof canvasDatagrid\n         * @name addEventListener\n         * @method\n         * @param {string} ev The name of the event to subscribe to.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.addEventListener = function (ev, fn) {\n            self.events[ev] = self.events[ev] || [];\n            self.events[ev].unshift(fn);\n        };\n        /**\n         * Removes the given listener function from the given event.  Must be an actual reference to the function that was bound.\n         * @memberof canvasDatagrid\n         * @name removeEventListener\n         * @method\n         * @param {string} ev The name of the event to unsubscribe from.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.removeEventListener = function (ev, fn) {\n            (self.events[ev] || []).forEach(function removeEachListener(sfn, idx) {\n                if (fn === sfn) {\n                    self.events[ev].splice(idx, 1);\n                }\n            });\n        };\n        /**\n         * Fires the given event, padding an event object to the event subscribers.\n         * @memberof canvasDatagrid\n         * @name dispatchEvent\n         * @method\n         * @param {number} ev The name of the event to dispatch.\n         * @param {number} e The event object.\n         */\n        self.dispatchEvent = function (ev, e) {\n            e = ev.type ? ev : (e || {});\n            ev = ev.type || ev;\n            var defaultPrevented;\n            function preventDefault() {\n                defaultPrevented = true;\n            }\n            if (!self.events[ev]) { return; }\n            self.events[ev].forEach(function dispatchEachEvent(fn) {\n                e.ctx = self.ctx;\n                e.preventDefault = preventDefault;\n                fn.apply(self.intf, [e]);\n            });\n            return defaultPrevented;\n        };\n        self.getRatio = function () {\n            return Math.min(self.attributes.maxPixelRatio, (window.devicePixelRatio || 1) /\n                (self.ctx.webkitBackingStorePixelRatio ||\n                    self.ctx.mozBackingStorePixelRatio ||\n                    self.ctx.msBackingStorePixelRatio ||\n                    self.ctx.oBackingStorePixelRatio ||\n                    self.ctx.backingStorePixelRatio || 1));\n        };\n        self.resize = function (drawAfterResize) {\n            if (!self.canvas) { return; }\n            var v = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'vertical-scroll-bar'\n                },\n                n = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'horizontal-scroll-bar'\n                },\n                vb = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'vertical-scroll-box'\n                },\n                nb = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'horizontal-scroll-box'\n                },\n                co = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    isCorner: true,\n                    isScrollBoxCorner: true,\n                    style: 'scroll-box-corner'\n                },\n                m = (self.style.scrollBarBoxMargin * 2),\n                b = (self.style.scrollBarBorderWidth * 2),\n                d = self.style.scrollBarBoxMargin * 0.5,\n                sbw = self.style.scrollBarWidth + (self.style.scrollBarBorderWidth * 2),\n                ratio = self.getRatio(),\n                bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                cellBorder = self.style.cellBorderWidth * bm,\n                columnHeaderCellBorder = self.style.columnHeaderCellBorderWidth * bm,\n                dataHeight,\n                dataWidth,\n                dims,\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                ch = self.style.cellHeight,\n                // TODO: These offset numbers are terribly wrong.\n                // They should be a result of the size of the grid/canvas?\n                // it being off causes the scroll bar to \"slide\" under\n                // the dragged mouse.\n                // https://github.com/TonyGermaneri/canvas-datagrid/issues/97\n                scrollDragPositionOffsetY = 55,\n                scrollDragPositionOffsetX = -100;\n            // sets actual DOM canvas element\n            function setCanvasSize() {\n                if (self.isChildGrid) {\n                    return;\n                }\n                dims = {\n                    // HACK +1 ? maybe it's a magic cell border?  Required to line up properly in auto height mode.\n                    height: dataHeight + cellBorder + 1,\n                    width: dataWidth + rowHeaderCellWidth + cellBorder\n                };\n                ['width', 'height'].forEach(function (dim) {\n                    //TODO: support inherit\n                    if (['auto', undefined].indexOf(self.style[dim]) !== -1) {\n                        self.parentNodeStyle[dim] = dims[dim] + 'px';\n                    } else {\n                        self.parentNodeStyle[dim] = self.style[dim];\n                    }\n                });\n            }\n            self.scrollCache.x = [];\n            self.scrollCache.y = [];\n            if (self.attributes.disableRowResizing) {\n                dataHeight = self.data.length * (ch * self.scale);\n            } else {\n                dataHeight = (self.data || []).reduce(function reduceData(accumulator, row, rowIndex) {\n                    var va = accumulator\n                        + (((self.sizes.rows[row[self.uniqueId]] || ch) + (self.sizes.trees[row[self.uniqueId]] || 0)) * self.scale)\n                        // HACK? if an expanded tree row is frozen it is necessary to add the tree row's height a second time.\n                        + (self.frozenRow > rowIndex ? (self.sizes.trees[row[self.uniqueId]] || 0) : 0);\n                    self.scrollCache.y[rowIndex] = va;\n                    return va;\n                }, 0) || 0;\n            }\n            dataWidth = self.getVisibleSchema().reduce(function reduceSchema(accumulator, column, columnIndex) {\n                if (column.hidden) {\n                    self.scrollCache.x[columnIndex] = accumulator;\n                    return accumulator;\n                }\n                var va = accumulator + ((self.sizes.columns[column[self.uniqueId]] || column.width || self.style.cellWidth) * self.scale);\n                self.scrollCache.x[columnIndex] = va;\n                return va;\n            }, 0) || 0;\n            if (self.attributes.showNewRow) {\n                dataHeight += ch + cellBorder;\n            }\n            // accounts for the offset of the headers if any\n            dataHeight += columnHeaderCellHeight;\n            setCanvasSize();\n            if (self.isChildGrid) {\n                self.width = self.parentNode.offsetWidth;\n                self.height = self.parentNode.offsetHeight;\n            } else if (self.height !== self.canvas.offsetHeight || self.width !== self.canvas.offsetWidth) {\n                self.height = self.canvas.offsetHeight;\n                self.width = self.canvas.offsetWidth;\n                self.canvasOffsetLeft = self.args.canvasOffsetLeft || 0;\n                self.canvasOffsetTop = self.args.canvasOffsetTop || 0;\n            }\n            /// calculate scroll bar dimensions\n            // non-controversial\n            self.scrollBox.top = columnHeaderCellHeight + columnHeaderCellBorder;\n            self.scrollBox.left = rowHeaderCellWidth;\n            // width and height of scroll box\n            self.scrollBox.width = self.width - rowHeaderCellWidth - cellBorder;\n            self.scrollBox.height = self.height - columnHeaderCellBorder - cellBorder;\n            // is the data larger than the scroll box\n            self.scrollBox.horizontalBarVisible = dataWidth > self.scrollBox.width;\n            self.scrollBox.verticalBarVisible = dataHeight > self.scrollBox.height;\n            // if the scroll box is visible, make room for it by expanding the size of the element\n            // if the other dimension is set to auto\n            if (self.scrollBox.horizontalBarVisible && !self.isChildGrid) {\n                if (self.style.height === 'auto') {\n                    self.height += sbw;\n                }\n                dataHeight += sbw;\n                self.scrollBox.width = self.width - rowHeaderCellWidth - cellBorder;\n                setCanvasSize();\n                self.scrollBox.horizontalBarVisible = dataWidth > self.scrollBox.width;\n            }\n            if (self.scrollBox.verticalBarVisible && !self.isChildGrid) {\n                if (self.style.width === 'auto') {\n                    self.width += sbw;\n                }\n                dataWidth += sbw;\n                setCanvasSize();\n                self.scrollBox.verticalBarVisible = dataHeight > self.scrollBox.height;\n            }\n            self.scrollBox.scrollWidth = dataWidth - self.scrollBox.width;\n            self.scrollBox.scrollHeight = dataHeight - self.scrollBox.height;\n            self.scrollBox.widthBoxRatio = ((self.scrollBox.width - scrollDragPositionOffsetX)\n                / (self.scrollBox.scrollWidth + (self.scrollBox.width - scrollDragPositionOffsetX)));\n            self.scrollBox.scrollBoxWidth = self.scrollBox.width\n                * self.scrollBox.widthBoxRatio\n                - self.style.scrollBarWidth - b - d;\n            self.scrollBox.heightBoxRatio = ((self.scrollBox.height - scrollDragPositionOffsetY)\n                / (self.scrollBox.scrollHeight + (self.scrollBox.height - scrollDragPositionOffsetY)));\n            self.scrollBox.scrollBoxHeight = self.scrollBox.height\n                * self.scrollBox.heightBoxRatio\n                - self.style.scrollBarWidth - b - d - (columnHeaderCellHeight - cellBorder);\n            self.scrollBox.scrollBoxWidth = Math.max(self.scrollBox.scrollBoxWidth, self.style.scrollBarBoxMinSize);\n            self.scrollBox.scrollBoxHeight = Math.max(self.scrollBox.scrollBoxHeight, self.style.scrollBarBoxMinSize);\n            // horizontal\n            n.x += rowHeaderCellWidth;\n            n.y += self.height - self.style.scrollBarWidth - d;\n            n.width = self.width - self.style.scrollBarWidth - rowHeaderCellWidth - d - m;\n            n.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n            // horizontal box\n            nb.y = n.y + self.style.scrollBarBoxMargin;\n            nb.width = self.scrollBox.scrollBoxWidth;\n            nb.height = self.style.scrollBarBoxWidth;\n            // vertical\n            v.x += self.width - self.style.scrollBarWidth - self.style.scrollBarBorderWidth - d;\n            v.y += columnHeaderCellHeight;\n            v.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n            v.height = self.height - columnHeaderCellHeight - self.style.scrollBarWidth - d - m;\n            // vertical box\n            vb.x = v.x + self.style.scrollBarBoxMargin;\n            vb.width = self.style.scrollBarBoxWidth;\n            vb.height = self.scrollBox.scrollBoxHeight;\n            // corner\n            co.x = n.x + n.width + m;\n            co.y = v.y + v.height + m;\n            co.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n            co.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n            self.scrollBox.entities = {\n                horizontalBar: n,\n                horizontalBox: nb,\n                verticalBar: v,\n                verticalBox: vb,\n                corner: co\n            };\n            self.scrollBox.bar = {\n                v: v,\n                h: n\n            };\n            self.scrollBox.box = {\n                v: vb,\n                h: nb\n            };\n            /// calculate page and dom elements\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            // set canvas drawing related items\n            if (!self.isChildGrid) {\n                self.canvas.width = self.width * ratio;\n                self.canvas.height = self.height * ratio;\n                self.ctx.scale(ratio, ratio);\n            }\n            // resize any open dom elements (input/textarea)\n            self.resizeEditInput();\n            self.scroll(true);\n            if (drawAfterResize) {\n                self.draw(true);\n            }\n            self.dispatchEvent('resize', {});\n            return true;\n        };\n        self.scroll = function (dontDraw) {\n            var s = self.getVisibleSchema(),\n                ch = self.style.cellHeight;\n            self.scrollIndexTop = 0;\n            self.scrollPixelTop = 0;\n            self.scrollIndexLeft = 0;\n            self.scrollPixelLeft = 0;\n            while (self.scrollPixelTop < self.scrollBox.scrollTop && self.scrollIndexTop < self.data.length) {\n                if (self.attributes.disableRowResizing) {\n                    self.scrollPixelTop = self.scrollIndexTop * (ch * self.scale);\n                } else {\n                    self.scrollPixelTop = self.scrollCache.y[self.scrollIndexTop];\n                }\n                self.scrollIndexTop += 1;\n            }\n            while (self.scrollPixelLeft < self.scrollBox.scrollLeft && self.scrollIndexLeft < s.length) {\n                self.scrollPixelLeft = self.scrollCache.x[self.scrollIndexLeft];\n                self.scrollIndexLeft += 1;\n            }\n            if ((self.data || []).length > 0 && s.length > 0) {\n                self.scrollIndexLeft = Math.max(self.scrollIndexLeft - 1, 0);\n                self.scrollPixelLeft = Math.max(self.scrollPixelLeft\n                    - ((self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width || self.style.cellWidth) * self.scale), 0);\n                self.scrollIndexTop = Math.max(self.scrollIndexTop - 1, 0);\n                self.scrollPixelTop = Math.max((self.scrollPixelTop\n                    - ((self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || ch)\n                    + (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0)) * self.scale), 0);\n            }\n            self.ellipsisCache = {};\n            if (!dontDraw) {\n                self.draw(true);\n            }\n            //TODO: figure out why this has to be delayed for child grids\n            //BUG: wheeling event on 3rd level hierarchy fails to move input box\n            requestAnimationFrame(self.resizeEditInput);\n            self.dispatchEvent('scroll', {top: self.scrollBox.scrollTop, left: self.scrollBox.scrollLeft});\n        };\n        self.mousemove = function (e, overridePos) {\n            if (self.contextMenu || self.input) {\n                return;\n            }\n            self.mouse = overridePos || self.getLayerPos(e);\n            var ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                i,\n                vs = self.getVisibleSchema(),\n                dragBounds,\n                sBounds,\n                x = self.mouse.x,\n                y = self.mouse.y,\n                o = self.getCellAt(x, y),\n                delta,\n                ev = {NativeEvent: e, cell: o, x: x, y: y},\n                previousCell = self.currentCell;\n            clearTimeout(self.scrollTimer);\n            if (!self.isInGrid({x: x, y: y})) {\n                self.hasFocus = false;\n            }\n            if (self.dispatchEvent('mousemove', ev)) {\n                return;\n            }\n            if (o && self.currentCell) {\n                self.rowBoundaryCrossed = self.currentCell.rowIndex !== o.rowIndex;\n                self.columnBoundaryCrossed = self.currentCell.columnIndex !== o.columnIndex;\n                self.cellBoundaryCrossed = self.rowBoundaryCrossed || self.columnBoundaryCrossed;\n                ['row', 'column', 'cell'].forEach(function (prefix) {\n                    if (self[prefix + 'BoundaryCrossed']) {\n                        ev.cell = previousCell;\n                        self.dispatchEvent(prefix + 'mouseout', ev);\n                        ev.cell = o;\n                        self.dispatchEvent(prefix + 'mouseover', ev);\n                    }\n                });\n            }\n            self.currentCell = o;\n            if (!self.hasFocus) {\n                return;\n            }\n            self.hovers = {};\n            if (!self.draggingItem\n                    && o\n                    && self.scrollModes.indexOf(o.context) === -1) {\n                self.dragItem = o;\n                self.dragMode = o.dragContext;\n                self.cursor = o.context;\n                if (o.context === 'cell' && o.data) {\n                    self.cursor = 'default';\n                    self.hovers[o.data[self.uniqueId]] = [o.columnIndex];\n                }\n                if ((self.selecting || self.reorderObject)\n                        && o.context === 'cell'\n                        && o.data) {\n                    sBounds = self.getSelectionBounds();\n                    delta = {\n                        x: Math.abs(self.dragStart.x - x),\n                        y: Math.abs(self.dragStart.y - y)\n                    };\n                    if (self.dragStartObject.columnIndex !== -1 && e.shiftKey) {\n                        self.dragStartObject = {\n                            rowIndex: self.activeCell.rowIndex,\n                            columnIndex: self.activeCell.columnIndex\n                        };\n                    }\n                    dragBounds = {\n                        top: Math.min(self.dragStartObject.rowIndex, o.rowIndex),\n                        left: Math.min(self.dragStartObject.columnIndex, o.columnIndex),\n                        bottom: Math.max(self.dragStartObject.rowIndex, o.rowIndex),\n                        right: Math.max(self.dragStartObject.columnIndex, o.columnIndex)\n                    };\n                    if (self.dragStartObject.columnIndex === -1) {\n                        dragBounds.left = -1;\n                        dragBounds.right = vs.length - 1;\n                        dragBounds.top = Math.min(sBounds.top, o.rowIndex);\n                        dragBounds.bottom = Math.max(sBounds.bottom, o.rowIndex);\n                    }\n                    if (self.dragStartObject.rowIndex !== o.rowIndex\n                                || self.dragStartObject.columnIndex !== o.columnIndex) {\n                        self.ignoreNextClick = true;\n                    }\n                    if (self.cellBoundaryCrossed || (delta.x === 0 && delta.y === 0) || (self.attributes.selectionMode === 'row')) {\n                        if (((self.attributes.selectionMode === 'row') || self.dragStartObject.columnIndex === -1)\n                                && self.rowBoundaryCrossed) {\n                            self.selectRow(o.rowIndex, ctrl, null, true);\n                        } else if (self.attributes.selectionMode !== 'row') {\n                            if (!self.dragAddToSelection && o.rowIndex !== undefined) {\n                                if (self.selections[o.rowIndex] && self.selections[o.rowIndex].indexOf(o.columnIndex) !== -1) {\n                                    self.selections[o.rowIndex].splice(self.selections[o.rowIndex].indexOf(o.columnIndex), 1);\n                                }\n                            } else {\n                                self.selections[o.rowIndex] = self.selections[o.rowIndex] || [];\n                                if (self.selections[o.rowIndex].indexOf(o.columnIndex) === -1) {\n                                    self.selections[o.rowIndex].push(o.columnIndex);\n                                }\n                            }\n                        }\n                    }\n                    if ((!self.selectionBounds || (dragBounds.top !== self.selectionBounds.top\n                            || dragBounds.left !== self.selectionBounds.left\n                            || dragBounds.bottom !== self.selectionBounds.bottom\n                            || dragBounds.right !== self.selectionBounds.right)) && !ctrl) {\n                        self.selections = [];\n                        sBounds = dragBounds;\n                        if (self.attributes.selectionMode === 'row') {\n                            for (i = sBounds.top; i <= sBounds.bottom; i += 1) {\n                                self.selectRow(i, true, null, true);\n                            }\n                        } else if (dragBounds.top !== -1) {\n                            self.selectArea(sBounds, true);\n                        }\n                    }\n                    self.autoScrollZone(e, x, y, ctrl);\n                }\n            }\n            self.cellBoundaryCrossed = false;\n            self.rowBoundaryCrossed = false;\n            self.columnBoundaryCrossed = false;\n            self.draw(true);\n        };\n        self.click = function (e, overridePos) {\n            var i,\n                ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                pos = overridePos || self.getLayerPos(e);\n            self.currentCell = self.getCellAt(pos.x, pos.y);\n            if (self.currentCell.grid !== undefined) {\n                return;\n            }\n            function checkSelectionChange() {\n                self.dispatchEvent('selectionchanged', {\n                    selectedData: self.getSelectedData(),\n                    selections: self.selections,\n                    selectionBounds: self.selectionBounds\n                });\n            }\n            if (self.input) {\n                self.endEdit();\n            }\n            if (self.ignoreNextClick) {\n                self.ignoreNextClick = false;\n                return;\n            }\n            i = self.currentCell;\n            if (self.dispatchEvent('click', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (['rowHeaderCell', 'columnHeaderCell'].indexOf(self.currentCell.style) === -1 && !ctrl) {\n                self.setActiveCell(i.columnIndex, i.rowIndex);\n            }\n            if (self.currentCell.context === 'cell') {\n                if (self.currentCell.style === 'cornerCell') {\n                    self.selectAll();\n                    self.draw();\n                    checkSelectionChange();\n                    return;\n                }\n                if (self.currentCell.style === 'columnHeaderCell') {\n                    if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                        if (self.orderBy === i.header.name) {\n                            self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                        } else {\n                            self.orderDirection = 'asc';\n                        }\n                        self.order(i.header.name, self.orderDirection);\n                        checkSelectionChange();\n                        return;\n                    }\n                    if (self.attributes.columnHeaderClickBehavior === 'select') {\n                        self.selectColumn(i.header.index, ctrl, e.shiftKey, true);\n                        checkSelectionChange();\n                        self.draw();\n                        return;\n                    }\n                }\n                self.selections[i.rowIndex] = self.selections[i.rowIndex] || [];\n                if (((self.attributes.selectionMode === 'row') || self.currentCell.style === 'rowHeaderCell')) {\n                    if (self.currentCell.style === 'rowHeaderCell'\n                            && self.attributes.tree && pos.x > 0\n                            && pos.x - self.currentCell.x < self.style.treeArrowWidth\n                            + self.style.treeArrowMarginLeft\n                            + self.style.treeArrowMarginRight + self.style.treeArrowClickRadius\n                            && pos.y - self.currentCell.y < self.style.treeArrowHeight\n                            + self.style.treeArrowMarginTop + self.style.treeArrowClickRadius\n                            && pos.y > 0) {\n                        self.toggleTree(i.rowIndex);\n                        return;\n                    }\n                }\n                if (e.shiftKey && !ctrl) {\n                    self.selectionBounds = self.getSelectionBounds();\n                    self.selectArea(undefined, false);\n                }\n            }\n            checkSelectionChange();\n            self.draw(true);\n        };\n        self.dragResizeColumn = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = self.resizingStartingWidth + pos.x - self.dragStart.x;\n            y = self.resizingStartingHeight + pos.y - self.dragStart.y;\n            if (x < self.style.minColumnWidth) {\n                x = self.style.minColumnWidth;\n            }\n            if (y < self.style.minRowHeight) {\n                y = self.style.minRowHeight;\n            }\n            if (self.dispatchEvent('resizecolumn', {x: x, y: y, draggingItem: self.draggingItem})) { return false; }\n            if (self.scrollBox.scrollLeft > self.scrollBox.scrollWidth - self.attributes.resizeScrollZone\n                    && self.dragMode === 'ew-resize') {\n                self.resize(true);\n                self.scrollBox.scrollLeft += x;\n            }\n            if (self.dragMode === 'ew-resize') {\n                self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] = x;\n                if (['rowHeaderCell', 'cornerCell'].indexOf(self.draggingItem.header.style) !== -1) {\n                    self.resize(true);\n                }\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.dragMode === 'ns-resize') {\n                if (self.draggingItem.rowOpen) {\n                    self.sizes.trees[self.draggingItem.data[self.uniqueId]] = y;\n                } else if (self.attributes.globalRowResize) {\n                    self.style.cellHeight = y;\n                } else {\n                    self.sizes.rows[self.draggingItem.data[self.uniqueId]] = y;\n                }\n                self.dispatchEvent('resizerow', {row: y});\n                self.resizeChildGrids();\n                return;\n            }\n            self.ellipsisCache = {};\n        };\n        self.stopDragResize = function () {\n            self.resize();\n            document.body.removeEventListener('mousemove', self.dragResizeColumn, false);\n            document.body.removeEventListener('mouseup', self.stopDragResize, false);\n            self.setStorageData();\n            self.draw(true);\n            self.ignoreNextClick = true;\n        };\n        self.scrollGrid = function (e) {\n            var pos = self.getLayerPos(e);\n            if (self.attributes.scrollPointerLock && self.pointerLockPosition\n                    && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                self.pointerLockPosition.x += e.movementX;\n                self.pointerLockPosition.y += e.movementY;\n                self.pointerLockPosition.x = Math.min(self.width - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.x));\n                self.pointerLockPosition.y = Math.min(self.height - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.y));\n                pos = self.pointerLockPosition;\n            }\n            self.scrollMode = self.getCellAt(pos.x, pos.y).context;\n            if (self.scrollMode === 'horizontal-scroll-box' && self.scrollStartMode !== 'horizontal-scroll-box') {\n                self.scrollStartMode = 'horizontal-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.left = self.scrollBox.scrollLeft;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box' && self.scrollStartMode !== 'vertical-scroll-box') {\n                self.scrollStartMode = 'vertical-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.top = self.scrollBox.scrollTop;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollStartMode === 'vertical-scroll-box'\n                    && self.scrollMode !== 'vertical-scroll-box') {\n                self.scrollMode = 'vertical-scroll-box';\n            }\n            if (self.scrollStartMode === 'horizontal-scroll-box'\n                    && self.scrollMode !== 'horizontal-scroll-box') {\n                self.scrollMode = 'horizontal-scroll-box';\n            }\n            clearTimeout(self.scrollTimer);\n            if (self.scrollModes.indexOf(self.scrollMode) === -1) {\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box') {\n                self.scrollBox.scrollTop = self.scrollStart.top + ((pos.y - self.dragStart.y)\n                    / self.scrollBox.heightBoxRatio);\n            } else if (self.scrollMode === 'vertical-scroll-top') {\n                self.scrollBox.scrollTop -= (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'vertical-scroll-bottom') {\n                self.scrollBox.scrollTop += (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n            if (self.scrollMode === 'horizontal-scroll-box') {\n                self.scrollBox.scrollLeft = self.scrollStart.left + ((pos.x - self.dragStart.x)\n                    / self.scrollBox.widthBoxRatio);\n            } else if (self.scrollMode === 'horizontal-scroll-right') {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'horizontal-scroll-left') {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.stopScrollGrid = function () {\n            clearTimeout(self.scrollTimer);\n            if (document.exitPointerLock) {\n                document.exitPointerLock();\n            }\n            document.body.removeEventListener('mousemove', self.scrollGrid, false);\n        };\n        self.dragReorder = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = pos.x - self.dragStart.x;\n            y = pos.y - self.dragStart.y;\n            if (!self.attributes.allowColumnReordering && self.dragMode === 'column-reorder') {\n                return;\n            }\n            if (!self.attributes.allowRowReordering && self.dragMode === 'row-reorder') {\n                return;\n            }\n            if (self.dispatchEvent('reordering', {\n                    NativeEvent: e,\n                    source: self.dragStartObject,\n                    target: self.currentCell,\n                    dragMode: self.dragMode\n                })) {\n                return;\n            }\n            if (Math.abs(x) > self.attributes.reorderDeadZone || Math.abs(y) > self.attributes.reorderDeadZone) {\n                self.reorderObject = self.draggingItem;\n                self.reorderTarget = self.currentCell;\n                self.reorderObject.dragOffset = {\n                    x: x,\n                    y: y\n                };\n                self.autoScrollZone(e, pos.x, pos.y, false);\n            }\n        };\n        self.stopDragReorder = function (e) {\n            var oIndex,\n                tIndex,\n                cr = {\n                    'row-reorder': self.orders.rows,\n                    'column-reorder': self.orders.columns\n                },\n                i = {\n                    'row-reorder': 'rowIndex',\n                    'column-reorder': 'columnIndex'\n                }[self.dragMode];\n            document.body.removeEventListener('mousemove', self.dragReorder, false);\n            document.body.removeEventListener('mouseup', self.stopDragReorder, false);\n            if (self.reorderObject\n                    && self.reorderTarget\n                    && ((self.dragMode === 'column-reorder' && self.reorderTarget.columnIndex > -1\n                        && self.reorderTarget.columnIndex < self.getVisibleSchema().length)\n                    || (self.dragMode === 'row-reorder' && self.reorderTarget.rowIndex > -1\n                        && self.reorderTarget.rowIndex < self.data.length))\n                    && self.reorderObject[i] !== self.reorderTarget[i]\n                    && !self.dispatchEvent('reorder', {\n                        NativeEvent: e,\n                        source: self.reorderObject,\n                        target: self.reorderTarget,\n                        dragMode: self.dragMode\n                    })) {\n                self.ignoreNextClick = true;\n                oIndex = cr[self.dragMode].indexOf(self.reorderObject[i]);\n                tIndex = cr[self.dragMode].indexOf(self.reorderTarget[i]);\n                cr[self.dragMode].splice(oIndex, 1);\n                cr[self.dragMode].splice(tIndex, 0, self.reorderObject[i]);\n                self.setStorageData();\n            }\n            self.reorderObject = undefined;\n            self.reorderTarget = undefined;\n            self.draw(true);\n        };\n        self.dragMove = function (e) {\n            if (self.dispatchEvent('moving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.moveOffset = {\n                x: self.currentCell.columnIndex - self.dragStartObject.columnIndex,\n                y: self.currentCell.rowIndex - self.dragStartObject.rowIndex\n            };\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopDragMove = function (e) {\n            document.body.removeEventListener('mousemove', self.dragMove, false);\n            document.body.removeEventListener('mouseup', self.stopDragMove, false);\n            var b = self.getSelectionBounds();\n            if (self.dispatchEvent('endmove', {NativeEvent: e, cell: self.currentCell})) {\n                self.movingSelection = undefined;\n                self.moveOffset = undefined;\n                self.draw(true);\n                return;\n            }\n            if (self.moveOffset) {\n                self.moveTo(self.movingSelection, b.left + self.moveOffset.x, b.top + self.moveOffset.y);\n                self.moveSelection(self.moveOffset.x, self.moveOffset.y);\n            }\n            self.movingSelection = undefined;\n            self.moveOffset = undefined;\n            self.draw(true);\n        };\n        self.freezeMove = function (e) {\n            if (self.dispatchEvent('freezemoving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.ignoreNextClick = true;\n            self.freezeMarkerPosition = pos;\n            if (self.currentCell && self.currentCell.rowIndex !== undefined && self.dragMode === 'frozen-row-marker') {\n                self.scrollBox.scrollTop = 0;\n                self.frozenRow = self.currentCell.rowIndex + 1;\n            }\n            if (self.currentCell && self.currentCell.columnIndex !== undefined && self.dragMode === 'frozen-column-marker') {\n                self.scrollBox.scrollLeft = 0;\n                self.frozenColumn = self.currentCell.columnIndex + 1;\n            }\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopFreezeMove = function (e) {\n            document.body.removeEventListener('mousemove', self.freezeMove, false);\n            document.body.removeEventListener('mouseup', self.stopFreezeMove, false);\n            self.freezeMarkerPosition = undefined;\n            if (self.dispatchEvent('endfreezemove', {NativeEvent: e})) {\n                self.frozenRow = self.startFreezeMove.x;\n                self.frozenColumn = self.startFreezeMove.y;\n                self.draw(true);\n                return;\n            }\n            self.draw(true);\n        };\n        self.mousedown = function (e, overridePos) {\n            self.lastMouseDownTarget = e.target;\n            if (self.dispatchEvent('mousedown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (e.button === 2 || self.input) { return; }\n            var ctrl = (e.ctrlKey || e.metaKey),\n                move = /-move/.test(self.dragMode),\n                freeze = /frozen-row-marker|frozen-column-marker/.test(self.dragMode),\n                resize = /-resize/.test(self.dragMode);\n            self.dragStart = overridePos || self.getLayerPos(e);\n            self.scrollStart = {\n                left: self.scrollBox.scrollLeft,\n                top: self.scrollBox.scrollTop\n            };\n            self.dragStartObject = self.getCellAt(self.dragStart.x, self.dragStart.y);\n            self.dragAddToSelection = !self.dragStartObject.selected;\n            if (!ctrl && !e.shiftKey && !/(vertical|horizontal)-scroll-(bar|box)/\n                    .test(self.dragStartObject.context)\n                    && self.currentCell\n                    && !self.currentCell.isColumnHeader\n                    && !move\n                    && !freeze\n                    && !resize) {\n                self.selections = [];\n            }\n            if (self.dragStartObject.isGrid) {\n                return;\n            }\n            if (self.scrollModes.indexOf(self.dragStartObject.context) !== -1) {\n                self.scrollMode = self.dragStartObject.context;\n                self.scrollStartMode = self.dragStartObject.context;\n                self.scrollGrid(e);\n                if (self.attributes.scrollPointerLock\n                        && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                    self.pointerLockPosition = {\n                        x: self.dragStart.x,\n                        y: self.dragStart.y\n                    };\n                    self.canvas.requestPointerLock();\n                }\n                document.body.addEventListener('mousemove', self.scrollGrid, false);\n                document.body.addEventListener('mouseup', self.stopScrollGrid, false);\n                self.ignoreNextClick = true;\n                return;\n            }\n            if (self.dragMode === 'cell') {\n                self.selecting = true;\n                if ((self.attributes.selectionMode === 'row' || self.dragStartObject.columnIndex === -1)\n                        && self.dragStartObject.rowIndex > -1) {\n                    self.selectRow(self.dragStartObject.rowIndex, ctrl, null, true);\n                } else if (self.attributes.selectionMode !== 'row') {\n                    self.mousemove(e);\n                }\n                return;\n            }\n            if (move) {\n                self.draggingItem = self.dragItem;\n                self.movingSelection = self.selections.concat([]);\n                self.dragging = self.dragStartObject;\n                if (self.dispatchEvent('beginmove', {NativeEvent: e, cell: self.currentCell})) { return; }\n                document.body.addEventListener('mousemove', self.dragMove, false);\n                document.body.addEventListener('mouseup', self.stopDragMove, false);\n                return self.mousemove(e);\n            }\n            if (freeze) {\n                self.draggingItem = self.dragItem;\n                self.startFreezeMove = {\n                    x: self.frozenRow,\n                    y: self.frozenColumn\n                };\n                if (self.dispatchEvent('beginfreezemove', {NativeEvent: e})) { return; }\n                document.body.addEventListener('mousemove', self.freezeMove, false);\n                document.body.addEventListener('mouseup', self.stopFreezeMove, false);\n                return self.mousemove(e);\n            }\n            if (resize) {\n                self.draggingItem = self.dragItem;\n                if (self.draggingItem.rowOpen) {\n                    self.resizingStartingHeight = self.sizes.trees[self.draggingItem.data[self.uniqueId]];\n                } else {\n                    self.resizingStartingHeight = self.sizes.rows[self.draggingItem.data[self.uniqueId]] || self.style.cellHeight;\n                }\n                self.resizingStartingWidth = self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] || self.draggingItem.width;\n                document.body.addEventListener('mousemove', self.dragResizeColumn, false);\n                document.body.addEventListener('mouseup', self.stopDragResize, false);\n                return;\n            }\n            if (['row-reorder', 'column-reorder'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragStartObject;\n                document.body.addEventListener('mousemove', self.dragReorder, false);\n                document.body.addEventListener('mouseup', self.stopDragReorder, false);\n                return;\n            }\n        };\n        self.mouseup = function (e) {\n            clearTimeout(self.scrollTimer);\n            self.cellBoundaryCrossed = true;\n            self.rowBoundaryCrossed = true;\n            self.columnBoundaryCrossed = true;\n            self.selecting = undefined;\n            self.draggingItem = undefined;\n            self.dragStartObject = undefined;\n            if (self.dispatchEvent('mouseup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            if (self.currentCell && self.currentCell.grid !== undefined) {\n                return;\n            }\n            if (self.contextMenu || self.input) { return; }\n            if (self.dragStart && self.isInGrid(self.dragStart)) {\n                self.controlInput.focus();\n            }\n            e.preventDefault();\n        };\n        self.keydown = function (e) {\n            var i,\n                x = self.activeCell.columnIndex,\n                y = self.activeCell.rowIndex,\n                ctrl = (e.ctrlKey || e.metaKey),\n                last = self.data.length - 1,\n                cols = self.getVisibleSchema().length - 1;\n            if (self.dispatchEvent('keydown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            if (self.attributes.showNewRow) {\n                last += 1;\n            }\n            if (e.keyCode === 9) {\n                e.preventDefault();\n            }\n            // esc\n            if (e.keyCode === 27) {\n                self.selections = [];\n                self.draw(true);\n            // ctrl + a\n            } else if (ctrl && e.keyCode === 65) {\n                self.selectAll();\n            //ArrowDown\n            } else if (e.keyCode === 40) {\n                y += 1;\n            //ArrowUp\n            } else if (e.keyCode === 38) {\n                y -= 1;\n            //ArrowLeft Tab\n            } else if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {\n                x -= 1;\n            //ArrowRight Tab\n            } else if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {\n                x += 1;\n            //PageUp\n            } else if (e.keyCode === 33) {\n                y -= self.page;\n                e.preventDefault();\n            //PageDown\n            } else if (e.keyCode === 34) {\n                y += self.page;\n                e.preventDefault();\n            //Home ArrowUp\n            } else if (e.keyCode === 36 || (ctrl && e.keyCode === 38)) {\n                y = 0;\n            //End ArrowDown\n            } else if (e.keyCode === 35 || (ctrl && e.keyCode === 40)) {\n                y = self.data.length - 1;\n            //ArrowRight\n            } else if (ctrl && e.keyCode === 39) {\n                x = cols;\n            //ArrowLeft\n            } else if (ctrl && e.keyCode === 37) {\n                x = 0;\n            }\n            //Enter\n            if (e.keyCode === 13) {\n                return self.beginEditAt(x, y);\n            }\n            //Space\n            if (e.keyCode === 32) {\n                self.selections = [];\n                self.selections[Math.max(y, 0)] = [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                if (self.attributes.selectionMode === 'row') {\n                    for (i = self.selectionBounds.top; i <= self.selectionBounds.bottom; i += 1) {\n                        self.selectRow(i, ctrl, null, true);\n                    }\n                } else {\n                    self.selectArea(undefined, ctrl);\n                }\n                e.preventDefault();\n                self.draw(true);\n                return;\n            }\n            if (x < 0) {\n                x = 0;\n            }\n            if (y > last) {\n                y = last;\n            }\n            if (y < 0) {\n                y = 0;\n            }\n            if (x > cols) {\n                x = cols;\n            }\n            // Arrows\n            if (e.shiftKey && [37, 38, 39, 40].indexOf(e.keyCode) !== -1) {\n                self.selections[Math.max(y, 0)] = self.selections[Math.max(y, 0)] || [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                self.selectArea(undefined, ctrl);\n                self.draw(true);\n            }\n            if (x !== self.activeCell.columnIndex || y !== self.activeCell.rowIndex) {\n                self.scrollIntoView(x !== self.activeCell.columnIndex ? x : undefined, y !== self.activeCell.rowIndex ? y : undefined);\n                self.setActiveCell(x, y);\n                if (!e.shiftKey && self.attributes.selectionFollowsActiveCell) {\n                    if (!ctrl) {\n                        self.selections = [];\n                    }\n                    self.selections[y] = self.selections[y] || [];\n                    self.selections[y].push(x);\n                    self.dispatchEvent('selectionchanged', {\n                        selectedData: self.getSelectedData(),\n                        selections: self.selections,\n                        selectionBounds: self.selectionBounds\n                    });\n                }\n                self.draw(true);\n            }\n        };\n        self.keyup = function (e) {\n            if (self.dispatchEvent('keyup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n        };\n        self.keypress = function (e) {\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.dispatchEvent('keypress', {NativeEvent: e, cell: self.currentCell})) { return; }\n        };\n        self.dblclick = function (e) {\n            if (self.dispatchEvent('dblclick', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'columnHeaderCell') {\n                self.fitColumnToValues(self.currentCell.header.name);\n            } else if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'cornerCell') {\n                self.autosize();\n            } else if (['cell', 'activeCell'].indexOf(self.currentCell.style) !== -1) {\n                self.beginEditAt(self.currentCell.columnIndex, self.currentCell.rowIndex);\n            }\n        };\n        self.scrollWheel = function (e) {\n            var l,\n                t,\n                deltaX = e.deltaX === undefined ? e.NativeEvent.deltaX : e.deltaX,\n                deltaY = e.deltaY === undefined ? e.NativeEvent.deltaY : e.deltaY,\n                deltaMode = e.deltaMode === undefined ? e.NativeEvent.deltaMode : e.deltaMode;\n            if (wheeling) {\n                return;\n            }\n            if (self.dispatchEvent('wheel', {NativeEvent: e})) {\n                return;\n            }\n            e = e.NativeEvent || e;\n            self.touchHaltAnimation = true;\n            l = self.scrollBox.scrollLeft;\n            t = self.scrollBox.scrollTop;\n            if (self.hasFocus) {\n                //BUG Issue 42: https://github.com/TonyGermaneri/canvas-datagrid/issues/42\n                //https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\n                if (deltaMode === 1) {\n                    // line mode = 17 pixels per line\n                    deltaY = deltaY * 17;\n                }\n                if ((self.scrollBox.scrollTop < self.scrollBox.scrollHeight && deltaY > 0)\n                        || (self.scrollBox.scrollLeft < self.scrollBox.scrollWidth && deltaX > 0)\n                        || (self.scrollBox.scrollTop > 0 && deltaY < 0)\n                        || (self.scrollBox.scrollLeft > 0 && deltaX < 0)) {\n                    e.preventDefault(e);\n                }\n                wheeling = setTimeout(function () {\n                    wheeling = undefined;\n                    self.scrollBox.scrollTo(deltaX + l, deltaY + t);\n                }, 1);\n            }\n        };\n        self.pasteItem = function (clipData, x, y, mimeType) {\n            var l, s = self.getVisibleSchema(), yi = y - 1, sel = [];\n            function normalizeRowData(importingRow, existingRow, offsetX, schema, mimeType, rowIndex) {\n                var r = existingRow;\n                if (!Array.isArray(importingRow) && importingRow !== null && typeof importingRow === 'object') {\n                    importingRow = Object.keys(importingRow).map(function (colKey) {\n                        return importingRow[colKey];\n                    });\n                }\n                if (/^text\\/html/.test(mimeType)) {\n                    importingRow = importingRow.substring(4, importingRow.length - 5).split('</td><td>');\n                }\n                if (typeof importingRow === 'string') {\n                    importingRow = [importingRow];\n                }\n                sel[rowIndex] = [];\n                importingRow.forEach(function (cellData, colIndex) {\n                    var cName = schema[colIndex + offsetX].name;\n                    if (importingRow[colIndex] === undefined || importingRow[colIndex] === null) {\n                        r[cName] = existingRow[cName];\n                        return;\n                    }\n                    sel[rowIndex].push(colIndex + offsetX);\n                    r[cName] = importingRow[colIndex];\n                });\n                return r;\n            }\n            if (/^text\\/html/.test(mimeType)) {\n                if (!/^(<meta[^>]+>)?<table>/.test(clipData.substring(0, 29))) {\n                    console.warn('Unrecognized HTML format.  HTML must be a simple table, e.g.: <table><tr><td>data</td></tr></table>.  Data with the mime type text/html not in this format will not be imported as row data.');\n                    return;\n                }\n                // strip table beginning and ending off, then split at rows\n                clipData = clipData.substring(clipData.indexOf('<table><tr>') + 11, clipData.length - 13).split('</tr><tr>');\n            } else {\n                clipData = clipData.split('\\n');\n            }\n            l = clipData.length;\n            clipData.forEach(function (rowData) {\n                yi += 1;\n                var i = self.orders.columns[yi];\n                self.data[i] = normalizeRowData(rowData, self.data[i], x, s, mimeType, i);\n            });\n            self.selections = sel;\n            return l;\n        };\n        self.paste = function (e) {\n            var d;\n            function getItem(dti) {\n                var type = dti.type;\n                dti.getAsString(function (s) {\n                    self.pasteItem(s, self.activeCell.columnIndex, self.activeCell.rowIndex, type);\n                    self.draw();\n                });\n            }\n            d = Array.prototype.filter.call(e.clipboardData.items, function (dti) {\n                return dti.type === 'text/html';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/csv';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/plain';\n            })[0];\n            if (!d) {\n                console.warn('Cannot find supported clipboard data type.  Supported types are text/html, text/csv, text/plain.');\n                return;\n            }\n            getItem(d);\n        };\n        self.cut = function (e) {\n            self.copy(e);\n            self.forEachSelectedCell(function (data, index, colName) {\n                data[index][colName] = '';\n            });\n        };\n        self.copy = function (e) {\n            if (self.dispatchEvent('copy', {NativeEvent: e})) { return; }\n            if (!self.hasFocus || !e.clipboardData) { return; }\n            var t,\n                d,\n                data = (self.data || []),\n                tableRows = [],\n                textRows = [],\n                headers = [],\n                sData = self.getSelectedData(),\n                s = self.getVisibleSchema();\n            function htmlSafe(v) {\n                return v.replace(/</g, '&lt;').replace(/>/g, '&gt;');\n            }\n            function fCopyCell(v) {\n                v = v === null || v === undefined ? '' : v;\n                return '<td>' + (typeof v === 'string' ? htmlSafe(v) : v) + '</td>';\n            }\n            function addTableHeaders() {\n                if (!headers.length) { return ''; }\n                return '<tr>' + headers.map(function (name) {\n                    return '<th>' + htmlSafe(name) + '</th>';\n                }).join('') + '</tr>';\n            }\n            function addCellValue(val, trRow, textRow, column) {\n                // escape strings\n                var ht = column.title || column.name;\n                if (val !== null\n                        && val !== false\n                        && val !== undefined\n                        && val.replace) {\n                    if (headers.indexOf(ht) === -1\n                            && sData.length === data.length\n                            && self.attributes.copyHeadersOnSelectAll) {\n                        headers.push(ht);\n                    }\n                    trRow.push(fCopyCell(val));\n                    textRow.push('\"' + val.replace(/\"/g, '\"\"') + '\"');\n                    return;\n                }\n                if (val !== undefined) {\n                    textRow.push(val);\n                    trRow.push(fCopyCell(val));\n                    return;\n                }\n                // issue #66\n                textRow.push('');\n                trRow.push('<td>&nbsp;</td>');\n            }\n            if (sData.length > 0) {\n                sData.forEach(function (row) {\n                    if (row) {\n                        var trRow = [],\n                            textRow = [];\n                        s.forEach(function (column, columnIndex) {\n                            // intentional redefinition of column\n                            column = s[self.orders.columns[columnIndex]];\n                            // escape strings\n                            addCellValue(row[column.name], trRow, textRow, column);\n                        });\n                        tableRows.push(trRow.join(''));\n                        textRows.push(textRow.join(','));\n                    }\n                });\n                t = headers.join(',') + (headers.length > 0 ? '\\n' : '') + textRows.join('\\n');\n                d = '<table>' + addTableHeaders() + '<tr>' + tableRows.join('</tr><tr>') + '</tr></table>';\n                e.clipboardData.setData('text/html', d);\n                e.clipboardData.setData('text/plain', t);\n                e.clipboardData.setData('text/csv', t);\n                e.clipboardData.setData('application/json', JSON.stringify(sData));\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/events.js\n// module id = 4\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var touchTimerMs = 50,\n            touchScrollTimeout;\n        self.scrollAnimation = {};\n        self.touchDelta = {};\n        self.touchAnimateTo = {};\n        self.animationFrames = 0;\n        self.getTouchPos = function (e, touchIndex) {\n            var t = touchIndex ? e.touches[touchIndex] : e.touches[0],\n                rect = self.canvas.getBoundingClientRect(),\n                pos;\n            if (!t) { return; }\n            pos = {\n                x: t.clientX - rect.left,\n                y: t.clientY - rect.top\n            };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        // shamelessly stolen from from https://gist.github.com/gre/1650294\n        self.easingFunctions = {\n            linear: function (t) { return t; },\n            easeInQuad: function (t) { return t * t; },\n            easeOutQuad: function (t) { return t * (2 - t); },\n            easeInOutQuad: function (t) { return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t; },\n            easeInCubic: function (t) { return t * t * t; },\n            easeOutCubic: function (t) { return (--t) * t * t + 1; },\n            easeInOutCubic: function (t) { return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1; },\n            easeInQuart: function (t) { return t * t * t * t; },\n            easeOutQuart: function (t) { return 1 - (--t) * t * t * t; },\n            easeInOutQuart: function (t) { return t < 0.5 ? 8 * t  * t  * t * t : 1 - 8 * (--t) * t * t * t; },\n            easeInQuint: function (t) { return t * t * t * t * t; },\n            easeOutQuint: function (t) { return 1 + (--t) * t *  t * t * t; },\n            easeInOutQuint: function (t) { return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t; }\n        };\n        self.easing = function (t, b, c, d) {\n            return c * self.easingFunctions[self.attributes.touchEasingMethod](t / d) + b;\n        };\n        self.calculatePPSTimed = function () {\n            self.xPPST = -((self.touchDelta.x - self.touchSigmaTimed.x) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.yPPST = -((self.touchDelta.y - self.touchSigmaTimed.y) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.touchSigmaTimed = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.calculatePPS = function () {\n            self.xPPS = -((self.touchDelta.x - self.touchSigma.x) / (self.touchDelta.t - self.touchSigma.t));\n            self.yPPS = -((self.touchDelta.y - self.touchSigma.y) / (self.touchDelta.t - self.touchSigma.t));\n            self.touchSigma = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.touchEndAnimation = function () {\n            if (!self.canvas || !self.scrollBox.scrollTo) { return requestAnimationFrame(self.touchEndAnimation); }\n            var n = performance.now(),\n                d = self.attributes.touchReleaseAnimationDurationMs,\n                t;\n            t = n - self.touchDelta.t;\n            self.animationFrames += 1;\n            self.scrollAnimation.x = self.easing(t, self.touchDelta.scrollLeft, self.touchAnimateTo.x, d);\n            self.scrollAnimation.y = self.easing(t, self.touchDelta.scrollTop, self.touchAnimateTo.y, d);\n            if (t > d || (self.scrollAnimation.y === self.scrollBox.scrollTop\n                    && self.scrollAnimation.x === self.scrollBox.scrollLeft) || self.stopAnimation) {\n                return;\n            }\n            self.scrollBox.scrollTo(self.scrollAnimation.x, self.scrollAnimation.y);\n            requestAnimationFrame(self.touchEndAnimation);\n        };\n        self.touchEditCell = function (cell) {\n            self.beginEditAt(cell.columnIndex, cell.rowIndex);\n        };\n        self.touchCell = function (e) {\n            return function () {\n                clearInterval(self.calculatePPSTimer);\n                var i, pos = self.getTouchPos(e);\n                if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone) {\n                    i = self.getCellAt(pos.x, pos.y);\n                    if (!i) { return; }\n                    if (self.touchingCell && self.touchingCell.rowIndex === i.rowIndex\n                            && self.touchingCell.columnIndex === i.columnIndex) {\n                        self.touchEditCell(i);\n                        return;\n                    }\n                    if (self.input && self.input.editCell) {\n                        self.endEdit();\n                    }\n                    self.touchingCell = i;\n                    self.selectArea({\n                        top: i.rowIndex,\n                        bottom: i.rowIndex,\n                        left: i.columnIndex,\n                        right: i.columnIndex\n                    });\n                    self.draw(true);\n                }\n            };\n        };\n        self.touchstart = function (e) {\n            if (e.changedTouches[0]) {\n                self.touchStart = self.getTouchPos(e);\n                self.startingCell = self.getCellAt(self.touchStart.x, self.touchStart.y, true);\n            }\n            if (self.dispatchEvent('touchstart', {NativeEvent: e, cell: self.startingCell})) { return; }\n            self.disposeContextMenu();\n            clearInterval(self.calculatePPSTimer);\n            clearTimeout(self.touchContextTimeout);\n            self.touchStartEvent = e;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (e.touches.length === 1 && e.changedTouches[0] && !self.zoomAltered) {\n                self.touchLength = 1;\n                self.touchStart = self.touchStart || self.touchStart1;\n                self.touchScrollStart = {\n                    x: self.scrollBox.scrollLeft,\n                    y: self.scrollBox.scrollTop,\n                    t: performance.now()\n                };\n                self.touchDelta = {\n                    x: 0,\n                    y: 0,\n                    scrollLeft: self.scrollBox.scrollLeft,\n                    scrollTop: self.scrollBox.scrollTop,\n                    t: self.touchScrollStart.t\n                };\n                self.touchSigma = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchSigmaTimed = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchContextTimeout = setTimeout(function () {\n                    self.contextmenuEvent(e, self.touchStart);\n                }, self.attributes.touchContextMenuTimeMs);\n                self.calculatePPSTimer = setInterval(self.calculatePPSTimed, touchTimerMs);\n                if (self.startingCell && (self.startingCell.isGrid || ['tree', 'inherit'].indexOf(self.startingCell.context) !== -1)) {\n                    self.hasFocus = false;\n                    return;\n                }\n                self.hasFocus = true;\n                if (self.startingCell.isHeader) {\n                    if (self.startingCell.isRowHeader) {\n                        self.selectArea({\n                            top: self.startingCell.rowIndex,\n                            bottom: self.startingCell.rowIndex,\n                            left: 0,\n                            right: self.getVisibleSchema().length - 1,\n                        });\n                        self.draw(true);\n                    } else if (self.startingCell.isColumnHeader) {\n                        if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                            if (self.orderBy === self.startingCell.header.name) {\n                                self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                            } else {\n                                self.orderDirection = 'asc';\n                            }\n                            self.order(self.startingCell.header.name, self.orderDirection);\n                        }\n                        if (self.attributes.columnHeaderClickBehavior === 'select') {\n                            self.selectArea({\n                                top: 0,\n                                bottom: self.data.length - 1,\n                                left: self.startingCell.columnIndex,\n                                right: self.startingCell.columnIndex,\n                            });\n                            self.draw(true);\n                        }\n                    }\n                    self.touchEndEvents(e);\n                    return;\n                }\n            }\n            if (self.zoomAltered) { return; }\n            document.body.addEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.addEventListener('touchend', self.touchend, false);\n            document.body.addEventListener('touchcancel', self.touchcancel, false);\n            self.draw(true);\n        };\n        self.touchSelect = function (cell, handleType) {\n            if (cell.rowIndex === undefined || cell.columnIndex === undefined) { return; }\n            self.touchSelecting = true;\n            var bounds = self.getSelectionBounds();\n            if (handleType === 'selection-handle-bl'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex <= bounds.right) {\n                bounds.bottom = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tl'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex <= bounds.right) {\n                bounds.top = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tr'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex >= bounds.left) {\n                bounds.top = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            } else if (handleType === 'selection-handle-br'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex >= bounds.left) {\n                bounds.bottom = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            }\n            if (self.attributes.selectionMode === 'row' || cell.rowIndex === -1) {\n                bounds.left = 0;\n                bounds.right = self.getSchema().length - 1;\n            } else {\n                bounds.left = Math.max(0, bounds.left);\n            }\n            self.selectArea(bounds);\n            self.draw(true);\n        };\n        self.touchmove = function (e) {\n            var ch, rw, rScrollZone, lScrollZone, bScrollZone, tScrollZone, sbw, t1, t2;\n            if (self.dispatchEvent('beforetouchmove', {NativeEvent: e})) { return; }\n            clearTimeout(touchScrollTimeout);\n            if (e.changedTouches[0]) {\n                self.touchPosition = self.getTouchPos(e);\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = self.getTouchPos(e, 1);\n            }\n            if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) > self.attributes.touchDeadZone) {\n                clearTimeout(self.touchContextTimeout);\n            }\n            if (e.touches.length === 2 && self.touchPosition && self.touchPosition1) {\n                t1 = self.touchPosition.y;\n                t2 = self.touchPosition1.y;\n                if (!self.zoomDeltaStart) {\n                    self.zoomDeltaStart = Math.abs(t1 - t2);\n                    self.startScale = self.scale;\n                }\n                self.touchLength = 2;\n                self.scaleDelta = self.zoomDeltaStart - Math.abs(t1 - t2);\n                self.scale = self.startScale - (self.scaleDelta * self.attributes.touchZoomSensitivity);\n                self.scale = Math.min(Math.max(self.scale, self.attributes.touchZoomMin), self.attributes.touchZoomMax);\n                self.zoomAltered = true;\n                self.resize(true);\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.zoomAltered) { return; }\n            self.touchLength = 1;\n            self.touchPosition = self.touchPosition || self.touchPosition1;\n            ch = self.getColumnHeaderCellHeight();\n            rw = self.getRowHeaderCellWidth();\n            rScrollZone = self.width - self.style.scrollBarWidth - self.touchPosition.x < self.attributes.selectionScrollZone;\n            lScrollZone = self.touchPosition.x - rw < self.attributes.selectionScrollZone;\n            bScrollZone = self.height - self.style.scrollBarWidth - self.touchPosition.y < self.attributes.selectionScrollZone;\n            tScrollZone = self.touchPosition.y - ch < self.attributes.selectionScrollZone;\n            sbw = self.style.scrollBarWidth;\n            function touchScroll() {\n                var x = self.scrollBox.scrollLeft,\n                    y = self.scrollBox.scrollTop;\n                x += (rScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y += (bScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y -= (tScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                x -= (lScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                self.scrollBox.scrollTo(x, y);\n                touchScrollTimeout = setTimeout(touchScroll, self.attributes.scrollRepeatRate);\n            }\n            e.stopPropagation();\n            self.touchDelta = {\n                x: self.touchPosition.x - self.touchStart.x,\n                y: self.touchPosition.y - self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: performance.now()\n            };\n            self.currentCell = self.getCellAt(self.touchPosition.x, self.touchPosition.y);\n            self.dispatchEvent('touchmove', {NativeEvent: e, cell: self.currentCell});\n            self.calculatePPS();\n            self.touchDuration = performance.now() - self.touchScrollStart.t;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            if (self.touchSelecting && (rScrollZone || lScrollZone || tScrollZone || bScrollZone)) {\n                touchScroll();\n            }\n            if (/vertical-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollTop = self.scrollBox.scrollHeight\n                    * ((self.touchPosition.y - ch - sbw) / (self.scrollBox.height - sbw - ch));\n                return;\n            }\n            if (/horizontal-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollLeft = self.scrollBox.scrollWidth\n                    * ((self.touchPosition.x - rw - sbw) / (self.scrollBox.width - sbw - rw));\n                return;\n            }\n            if (/selection-handle-/.test(self.startingCell.style)) {\n                self.touchSelect(self.currentCell, self.startingCell.style);\n                return;\n            }\n            self.scrollBox.scrollTo(self.touchScrollStart.x - self.touchDelta.x,\n                self.touchScrollStart.y - self.touchDelta.y);\n            self.draw(true);\n        };\n        self.touchEndEvents = function (e) {\n            self.zoomDeltaStart = undefined;\n            self.touchSelecting = false;\n            clearInterval(self.touchScrollTimeout);\n            clearInterval(self.touchContextTimeout);\n            clearInterval(self.calculatePPSTimer);\n            e.stopPropagation();\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n        };\n        self.touchend = function (e) {\n            if (self.dispatchEvent('touchend', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.zoomDeltaStart = undefined;\n            if (e.changedTouches[0]) {\n                self.touchPosition = undefined;\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = undefined;\n            }\n            if (self.zoomAltered) {\n                if (e.touches.length === 0) {\n                    self.zoomAltered = false;\n                }\n                return;\n            }\n            var dz = Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone;\n            if (isNaN(self.xPPS)) {\n                self.xPPS = 0;\n            }\n            if (isNaN(self.yPPS)) {\n                self.yPPS = 0;\n            }\n            if (isNaN(self.xPPST)) {\n                self.xPPST = 0;\n            }\n            if (isNaN(self.yPPST)) {\n                self.yPPST = 0;\n            }\n            self.touchAnimateTo.x = self.xPPS * self.attributes.touchReleaseAcceleration;\n            self.touchAnimateTo.y = self.yPPS * self.attributes.touchReleaseAcceleration;\n            self.calculatePPSTimed();\n            if (dz && !self.contextMenu) {\n                self.touchCell(self.touchStartEvent)();\n            } else if (self.animationFrames === 0\n                    && (Math.abs(self.xPPST) > self.attributes.scrollAnimationPPSThreshold\n                        || Math.abs(self.yPPST) > self.attributes.scrollAnimationPPSThreshold)\n                    && !/-scroll-/.test(self.startingCell.style)\n                    && !dz) {\n                self.stopAnimation = false;\n                self.touchEndAnimation();\n            }\n            self.touchEndEvents(e);\n        };\n        self.touchcancel = function (e) {\n            if (self.dispatchEvent('touchcancel', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.touchEndEvents(e);\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/touch.js\n// module id = 5\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals HTMLElement: false, Reflect: false, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self, ctor) {\n        self.scale = 1;\n        self.orders = {\n            rows: [],\n            columns: []\n        };\n        self.cellGridAttributes = {};\n        self.treeGridAttributes = {};\n        self.visibleRowHeights = [];\n        self.hasFocus = false;\n        self.pkDefined = true;\n        self.activeCell = {\n            columnIndex: 0,\n            rowIndex: 0\n        };\n        self.innerHTML = '';\n        self.storageName = 'canvasDataGrid';\n        self.invalidSearchExpClass = 'canvas-datagrid-invalid-search-regExp';\n        self.localStyleLibraryStorageKey = 'canvas-datagrid-user-style-library';\n        self.uniqueId = '_canvasDataGridUniqueId';\n        self.dataType = 'application/x-canvas-datagrid';\n        self.orderBy = null;\n        self.orderDirection = 'asc';\n        self.columnFilters = {};\n        self.filters = {};\n        self.frozenRow = 0;\n        self.frozenColumn = 0;\n        self.ellipsisCache = {};\n        self.scrollCache = { x: [], y: [] };\n        self.scrollBox = {};\n        self.visibleRows = [];\n        self.sizes = {\n            rows: {},\n            columns: {},\n            trees: {}\n        };\n        self.currentFilter = function () {\n            return true;\n        };\n        self.selections = [];\n        self.hovers = {};\n        self.attributes = {};\n        self.style = {};\n        self.formatters = {};\n        self.sorters = {};\n        self.parsers = {};\n        self.schemaHashes = {};\n        self.events = {};\n        self.uId = 0;\n        self.changes = [];\n        self.scrollIndexTop = 0;\n        self.scrollPixelTop = 0;\n        self.scrollIndexLeft = 0;\n        self.scrollPixelLeft = 0;\n        self.childGrids = {};\n        self.openChildren = {};\n        self.scrollModes = [\n            'vertical-scroll-box',\n            'vertical-scroll-top',\n            'vertical-scroll-bottom',\n            'horizontal-scroll-box',\n            'horizontal-scroll-right',\n            'horizontal-scroll-left'\n        ];\n        self.componentL1Events = {};\n        self.eventNames = ['afterdraw', 'afterrendercell', 'attributechanged', 'beforebeginedit',\n            'beforecreatecellgrid', 'beforedraw', 'beforeendedit', 'beforerendercell', 'beforerendercellgrid',\n            'beginedit', 'cellmouseout', 'cellmouseover', 'click', 'collapsetree', 'contextmenu', 'copy',\n            'datachanged', 'dblclick', 'endedit', 'expandtree', 'formatcellvalue', 'keydown', 'keypress',\n            'keyup', 'mousedown', 'mousemove', 'mouseup', 'newrow', 'ordercolumn', 'rendercell', 'rendercellgrid',\n            'renderorderbyarrow', 'rendertext', 'rendertreearrow', 'reorder', 'reordering', 'resize',\n            'resizecolumn', 'resizerow', 'schemachanged', 'scroll', 'selectionchanged', 'stylechanged',\n            'touchcancel', 'touchend', 'touchmove', 'touchstart', 'wheel'];\n        self.mouse = { x: 0, y: 0};\n        self.getSelectedData = function (expandToRow) {\n            var d = [], s = expandToRow ? self.getSchema() : self.getVisibleSchema(), l = self.data.length;\n            if (l === 0) { return []; }\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    var orderedIndex;\n                    if (col === -1 || !s[col]) { return; }\n                    orderedIndex = self.orders.columns[col];\n                    d[index][s[orderedIndex].name] = self.data[index][s[orderedIndex].name];\n                });\n            });\n            return d;\n        };\n        self.getColumnHeaderCellHeight = function () {\n            if (!self.attributes.showColumnHeaders) { return 0; }\n            return ((self.sizes.rows[-1] || self.style.columnHeaderCellHeight) * self.scale);\n        };\n        self.getRowHeaderCellWidth = function () {\n            if (!self.attributes.showRowHeaders) { return 0; }\n            return (self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth) * self.scale;\n        };\n        self.setStorageData = function () {\n            if (!self.attributes.saveAppearance || !self.attributes.name) { return; }\n            var visibility = {};\n            self.getSchema().forEach(function (column) {\n                visibility[column.name] = !column.hidden;\n            });\n            localStorage.setItem(self.storageName + '-' + self.attributes.name, JSON.stringify({\n                sizes: {\n                    rows: self.sizes.rows,\n                    columns: self.sizes.columns\n                },\n                orders: {\n                    rows: self.orders.rows,\n                    columns: self.orders.columns\n                },\n                orderBy: self.orderBy,\n                orderDirection: self.orderDirection,\n                visibility: visibility\n            }));\n        };\n        self.getSchema = function () {\n            return self.schema || self.tempSchema || [];\n        };\n        function fillArray(low, high) {\n            var i = [], x;\n            for (x = low; x <= high; x += 1) {\n                i[x] = x;\n            }\n            return i;\n        }\n        self.createColumnOrders = function () {\n            var s = self.getSchema();\n            self.orders.columns = fillArray(0, s.length - 1);\n        };\n        self.createRowOrders = function () {\n            self.orders.rows = fillArray(0, self.data.length - 1);\n        };\n        self.getVisibleSchema = function () {\n            return self.getSchema().filter(function (col) {\n                return !col.hidden && col.name !== self.uniqueId;\n            });\n        };\n        self.applyDefaultValue = function (row, header) {\n            var d = header.defaultValue || '';\n            if (typeof d === 'function') {\n                d = d.apply(self.intf, [header]);\n            }\n            row[header.name] = d;\n        };\n        self.createNewRowData = function () {\n            self.newRow = {};\n            self.newRow[self.uniqueId] = self.uId;\n            self.uId += 1;\n            self.getSchema().forEach(function forEachHeader(header) {\n                self.applyDefaultValue(self.newRow, header);\n            });\n        };\n        self.getSchemaNameHash = function (key) {\n            var n = 0;\n            while (self.schemaHashes[key]) {\n                n += 1;\n                key = key + n;\n            }\n            return key;\n        };\n        self.filter = function (type) {\n            var f = self.filters[type];\n            if (!f && type !== undefined) {\n                console.warn('Cannot find filter for type %s, falling back to substring match.', type);\n                f = self.filters.string;\n            }\n            return f;\n        };\n        self.getBestGuessDataType = function (columnName, data) {\n            var t, x, l = data.length;\n            for (x = 0; x < l; x += 1) {\n                if ([null, undefined].indexOf(data[x][columnName]) !== -1) {\n                    t = typeof data[x];\n                    return t === 'object' ? 'string' : t;\n                }\n            }\n            return 'string';\n        };\n        self.drawChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].draw();\n            });\n        };\n        self.resizeChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].resize();\n            });\n        };\n        self.autoScrollZone = function (e, x, y, ctrl) {\n            var setTimer,\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight();\n            if (x > self.width - self.attributes.selectionScrollZone && x < self.width) {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y > self.height - self.attributes.selectionScrollZone && y < self.height) {\n                self.scrollBox.scrollTop += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (x - self.attributes.selectionScrollZone - rowHeaderCellWidth < 0) {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y - self.attributes.selectionScrollZone - columnHeaderCellHeight < 0) {\n                self.scrollBox.scrollTop -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (setTimer && !ctrl && self.currentCell && self.currentCell.columnIndex !== -1) {\n                self.scrollTimer = setTimeout(self.mousemove, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.refreshFromOrigialData = function () {\n            self.data = self.originalData.filter(function (row) {\n                return true;\n            });\n        };\n        self.validateColumn = function (c, s) {\n            if (!c.name) {\n                throw new Error('A column must contain at least a name.');\n            }\n            if (s.filter(function (i) { return i.name === c.name; }).length > 0) {\n                throw new Error('A column with the name '\n                    + c.name + ' already exists and cannot be added again.');\n            }\n            return true;\n        };\n        self.setDefaults = function (obj1, obj2, key, def) {\n            obj1[key] = obj2[key] === undefined ? def : obj2[key];\n        };\n        self.setAttributes = function () {\n            self.defaults.attributes.forEach(function eachAttribute(i) {\n                self.setDefaults(self.attributes, self.args, i[0], i[1]);\n            });\n        };\n        self.setStyle = function () {\n            self.defaults.styles.forEach(function eachStyle(i) {\n                self.setDefaults(self.style, self.args.style || {}, i[0], i[1]);\n            });\n        };\n        self.autosize = function (colName) {\n            self.getVisibleSchema().forEach(function (col) {\n                if (col.name === colName || colName === undefined) {\n                    self.fitColumnToValues(col.name);\n                }\n            });\n            self.fitColumnToValues('cornerCell');\n        };\n        self.dispose = function () {\n            if (!self.isChildGrid && self.canvas && self.canvas.parentNode) {\n                self.canvas.parentNode.removeChild(self.canvas);\n            }\n            self.eventParent.removeEventListener('mouseup', self.mouseup, false);\n            self.eventParent.removeEventListener('mousedown', self.mousedown, false);\n            self.eventParent.removeEventListener('dblclick', self.dblclick, false);\n            self.eventParent.removeEventListener('click', self.click, false);\n            self.eventParent.removeEventListener('mousemove', self.mousemove);\n            self.eventParent.removeEventListener('wheel', self.scrollWheel, false);\n            self.canvas.removeEventListener('contextmenu', self.contextmenu, false);\n            self.canvas.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('keypress', self.keypress, false);\n            self.controlInput.removeEventListener('keyup', self.keyup, false);\n            self.controlInput.removeEventListener('keydown', self.keydown, false);\n            window.removeEventListener('resize', self.resize);\n            if (self.observer && self.observer.disconnect) {\n                self.observer.disconnect();\n            }\n        };\n        self.tryLoadStoredSettings = function () {\n            var s;\n            self.reloadStoredValues();\n            if (self.storedSettings\n                    && typeof self.storedSettings.orders === 'object'\n                    && self.storedSettings.orders !== null) {\n                if (self.storedSettings.orders.rows.length >= self.data.length) {\n                    self.orders.rows = self.storedSettings.orders.rows;\n                }\n                s = self.getSchema();\n                if (self.storedSettings.orders.columns.length === s.length) {\n                    self.orders.columns = self.storedSettings.orders.columns;\n                }\n                self.orderBy = self.storedSettings.orderBy === undefined\n                    ? self.uniqueId : self.storedSettings.orderBy;\n                self.orderDirection = self.storedSettings.orderDirection === undefined\n                    ? self.uniqueId : self.storedSettings.orderDirection;\n                if (self.orderBy !== self.uniqueId && self.getHeaderByName(self.orderBy) && self.orderDirection) {\n                    self.order(self.orderBy, self.orderDirection);\n                }\n            }\n        };\n        self.getDomRoot = function () {\n            return self.shadowRoot ? self.shadowRoot.host : self.parentNode;\n        };\n        self.getFontName = function (fontStyle) {\n            return fontStyle.replace(/\\d+\\.?\\d*px/, '');\n        };\n        self.getFontHeight = function (fontStyle) {\n            return parseFloat(fontStyle, 10);\n        };\n        self.parseStyleValue = function (key) {\n            if (/Font/.test(key)) {\n                self.style[key + 'Height'] = self.getFontHeight(self.style[key]);\n                self.style[key + 'Name'] = self.getFontName(self.style[key]);\n                return;\n            }\n            // when inheriting styles from already instantiated grids, don't parse already parsed values.\n            if (key === 'moveOverlayBorderSegments' && typeof self.style[key] === 'string') {\n                self.style[key] = self.style[key].split(',')\n                    .map(function (i) { return parseInt(i, 10); });\n            }\n        };\n        self.initProp = function (propName) {\n            if (!self.args[propName]) { return; }\n            Object.keys(self.args[propName]).forEach(function (key) {\n                self[propName][key] = self.args[propName][key];\n            });\n        };\n        self.getStyleProperty = function (key) {\n            if (self.styleKeys.indexOf(key) === -1) {\n                return self.parentNodeStyle[key];\n            }\n            return self.style[key];\n        };\n        self.setStyleProperty = function (key, value, supressDrawAndEvent) {\n            var isDim = ['height', 'width', 'minHeight', 'minWidth', 'maxHeight', 'maxWidth'].indexOf(key) !== -1;\n            if (self.styleKeys.indexOf(key) === -1) {\n                self.parentNodeStyle[key] = value;\n            } else {\n                self.style[key] = value;\n                self.parseStyleValue(key);\n            }\n            if (isDim) {\n                self.resize();\n            }\n            if (!supressDrawAndEvent) {\n                self.draw(true);\n                self.dispatchEvent('stylechanged', {name: 'style', value: value});\n            }\n        };\n        self.reloadStoredValues = function () {\n            if (self.attributes.name && self.attributes.saveAppearance) {\n                self.storedSettings = localStorage.getItem(self.storageName + '-' + self.attributes.name);\n                if (self.storedSettings) {\n                    try {\n                        self.storedSettings = JSON.parse(self.storedSettings);\n                    } catch (e) {\n                        console.warn('could not read settings from localStore', e);\n                        self.storedSettings = undefined;\n                    }\n                }\n                if (self.storedSettings) {\n                    if (typeof self.storedSettings.sizes === 'object'\n                            && self.storedSettings.sizes !== null) {\n                        self.sizes.rows = self.storedSettings.sizes.rows;\n                        self.sizes.columns = self.storedSettings.sizes.columns;\n                        ['trees', 'columns', 'rows'].forEach(function (i) {\n                            if (!self.sizes[i]) {\n                                self.sizes[i] = {};\n                            }\n                        });\n                    }\n                    if (typeof self.storedSettings.visibility === 'object') {\n                        self.getSchema().forEach(function (column) {\n                            if (self.storedSettings.visibility && self.storedSettings.visibility[column.name] !== undefined) {\n                                column.hidden = !self.storedSettings.visibility[column.name];\n                            }\n                        });\n                    }\n                }\n            }\n        };\n        self.init = function () {\n            if (self.initialized) { return; }\n            var publicStyleKeyIntf = {};\n            self.setAttributes();\n            self.setStyle();\n            self.initScrollBox();\n            self.setDom();\n            self.nodeType = 'canvas-datagrid';\n            self.initialized = true;\n            self.ie = /Trident/.test(window.navigator.userAgent);\n            self.edge = /Edge/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.moz = /Gecko/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.mobile = /Mobile/i.test(window.navigator.userAgent);\n            self.cursorGrab = 'grab';\n            self.cursorGrabing = 'grabbing';\n            self.cursorGrab = self.webKit ? '-webkit-grab' : self.cursorGrab;\n            self.cursorGrabing = self.moz ? '-webkit-grabbing' : self.cursorGrabbing;\n            self.pointerLockPosition = {x: 0, y: 0};\n            Object.keys(self.style).forEach(self.parseStyleValue);\n            self.intf.moveSelection = self.moveSelection;\n            self.intf.moveTo = self.moveTo;\n            self.intf.addEventListener = self.addEventListener;\n            self.intf.removeEventListener = self.removeEventListener;\n            self.intf.dispatchEvent = self.dispatchEvent;\n            /**\n             * Releases grid resources and removes grid elements.\n             * @memberof canvasDatagrid\n             * @name dispose\n             * @method\n             */\n            self.intf.dispose = self.dispose;\n            /**\n             * Appends the grid to another element later.  Not implemented.\n             * @memberof canvasDatagrid\n             * @name appendTo\n             * @method\n             * @param {number} el The element to append the grid to.\n             */\n            self.intf.appendTo = self.appendTo;\n            self.intf.filters = self.filters;\n            self.intf.sorters = self.sorters;\n            self.intf.autosize = self.autosize;\n            self.intf.beginEditAt = self.beginEditAt;\n            self.intf.endEdit = self.endEdit;\n            self.intf.setActiveCell = self.setActiveCell;\n            self.intf.forEachSelectedCell = self.forEachSelectedCell;\n            self.intf.scrollIntoView = self.scrollIntoView;\n            self.intf.clearChangeLog = self.clearChangeLog;\n            self.intf.gotoCell = self.gotoCell;\n            self.intf.gotoRow = self.gotoRow;\n            self.intf.getHeaderByName = self.getHeaderByName;\n            self.intf.findColumnScrollLeft = self.findColumnScrollLeft;\n            self.intf.findRowScrollTop = self.findRowScrollTop;\n            self.intf.fitColumnToValues = self.fitColumnToValues;\n            self.intf.findColumnMaxTextLength = self.findColumnMaxTextLength;\n            self.intf.disposeContextMenu = self.disposeContextMenu;\n            self.intf.getCellAt = self.getCellAt;\n            self.intf.isCellVisible = self.isCellVisible;\n            self.intf.order = self.order;\n            self.intf.draw = self.draw;\n            self.intf.selectArea = self.selectArea;\n            self.intf.clipElement = self.clipElement;\n            self.intf.getSchemaFromData = self.getSchemaFromData;\n            self.intf.setFilter = self.setFilter;\n            self.intf.selectRow = self.selectRow;\n            self.intf.parentGrid = self.parentGrid;\n            self.intf.toggleTree = self.toggleTree;\n            self.intf.expandTree = self.expandTree;\n            self.intf.collapseTree = self.collapseTree;\n            self.intf.canvas = self.canvas;\n            self.intf.context = self.ctx;\n            self.intf.insertRow = self.insertRow;\n            self.intf.deleteRow = self.deleteRow;\n            self.intf.addRow = self.addRow;\n            self.intf.insertColumn = self.insertColumn;\n            self.intf.deleteColumn = self.deleteColumn;\n            self.intf.addColumn = self.addColumn;\n            self.intf.getClippingRect = self.getClippingRect;\n            self.intf.setRowHeight = self.setRowHeight;\n            self.intf.setColumnWidth = self.setColumnWidth;\n            self.intf.resetColumnWidths = self.resetColumnWidths;\n            self.intf.resetRowHeights = self.resetRowHeights;\n            self.intf.resize = self.resize;\n            self.intf.selectColumn = self.selectColumn;\n            self.intf.selectRow = self.selectRow;\n            self.intf.selectAll = self.selectAll;\n            self.intf.selectNone = self.selectNone;\n            self.intf.drawChildGrids = self.drawChildGrids;\n            self.intf.assertPxColor = self.assertPxColor;\n            self.intf.clearPxColorAssertions = self.clearPxColorAssertions;\n            self.intf.integerToAlpha = self.integerToAlpha;\n            self.intf.copy = self.copy;\n            self.intf.setStyleProperty = self.setStyleProperty;\n            Object.defineProperty(self.intf, 'defaults', {\n                get: function () {\n                    return {\n                        styles: self.defaults.styles.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {}),\n                        attributes: self.defaults.attributes.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {})\n                    };\n                }\n            });\n            self.styleKeys = Object.keys(self.intf.defaults.styles);\n            self.DOMStyles = window.getComputedStyle(document.body, null);\n            Object.keys(self.DOMStyles).concat(Object.keys(self.style)).forEach(function (key) {\n                // unless this line is here, Object.keys() will not work on <instance>.style\n                publicStyleKeyIntf[key] = undefined;\n                Object.defineProperty(publicStyleKeyIntf, key, {\n                    get: function () {\n                        return self.getStyleProperty(key);\n                    },\n                    set: function (value) {\n                        self.setStyleProperty(key, value);\n                    }\n                });\n            });\n            Object.defineProperty(self.intf, 'shadowRoot', {\n                get: function () {\n                    return self.shadowRoot;\n                }\n            });\n            Object.defineProperty(self.intf, 'activeCell', {\n                get: function () {\n                    return self.activeCell;\n                }\n            });\n            Object.defineProperty(self.intf, 'hasFocus', {\n                get: function () {\n                    return self.hasFocus;\n                }\n            });\n            Object.defineProperty(self.intf, 'style', {\n                get: function () {\n                    return publicStyleKeyIntf;\n                },\n                set: function (valueObject) {\n                    Object.keys(valueObject).forEach(function (key) {\n                        self.setStyleProperty(key, valueObject[key], true);\n                    });\n                    self.draw(true);\n                    self.dispatchEvent('stylechanged', {name: 'style', value: valueObject});\n                }\n            });\n            Object.defineProperty(self.intf, 'attributes', { value: {}});\n            Object.keys(self.attributes).forEach(function (key) {\n                Object.defineProperty(self.intf.attributes, key, {\n                    get: function () {\n                        return self.attributes[key];\n                    },\n                    set: function (value) {\n                        self.attributes[key] = value;\n                        if (key === 'name') {\n                            self.tryLoadStoredSettings();\n                        }\n                        self.draw(true);\n                        self.dispatchEvent('attributechanged', {name: key, value: value[key]});\n                    }\n                });\n            });\n            self.filters.string = function (value, filterFor) {\n                value = String(value);\n                var filterRegExp,\n                    regEnd = /\\/(i|g|m)*$/,\n                    pattern = regEnd.exec(filterFor),\n                    flags = pattern ? pattern[0].substring(1) : '',\n                    flagLength = flags.length;\n                self.invalidFilterRegEx = undefined;\n                if (filterFor.substring(0, 1) === '/' && pattern) {\n                    try {\n                        filterRegExp = new RegExp(filterFor.substring(1, filterFor.length - (flagLength + 1)), flags);\n                    } catch (e) {\n                        self.invalidFilterRegEx = e;\n                        return;\n                    }\n                    return filterRegExp.test(value);\n                }\n                return value.toString ? value.toString().toLocaleUpperCase()\n                    .indexOf(filterFor.toLocaleUpperCase()) !== -1 : false;\n            };\n            self.filters.number = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                return value === filterFor;\n            };\n            ['formatters', 'filters', 'sorters'].forEach(self.initProp);\n            self.applyComponentStyle(false, self.intf);\n            self.resize();\n            self.reloadStoredValues();\n            if (self.args.data) {\n                self.intf.data = self.args.data;\n            }\n            if (!self.data) {\n                self.intf.data = [];\n            }\n            if (self.intf.innerText || self.intf.textContent) {\n                try {\n                    self.intf.data = JSON.parse(self.intf.innerText || self.intf.textContent);\n                } catch (e) {\n                    console.warn('Cannot parse innerText', e);\n                }\n            }\n            if (self.args.schema) {\n                self.intf.schema = self.args.schema;\n            }\n            if (self.isChildGrid) {\n                requestAnimationFrame(function () { self.resize(true); });\n            } else {\n                self.resize(true);\n            }\n            return self;\n        };\n        /**\n         * Removes focus from the grid.\n         * @memberof canvasDatagrid\n         * @name blur\n         * @method\n         */\n        self.intf.blur = function (e) {\n            self.hasFocus = false;\n        };\n        /**\n         * Focuses on the grid.\n         * @memberof canvasDatagrid\n         * @name focus\n         * @method\n         */\n        self.intf.focus = function () {\n            self.hasFocus = true;\n            self.controlInput.focus();\n        };\n        if (self.shadowRoot || self.isChildGrid) {\n            Object.defineProperty(self.intf, 'height', {\n                get: function () {\n                    if (self.shadowRoot) {\n                        return self.shadowRoot.height;\n                    }\n                    return self.parentNode.height;\n                },\n                set: function (value) {\n                    if (self.shadowRoot) {\n                        self.shadowRoot.height = value;\n                    } else {\n                        self.parentNode.height = value;\n                    }\n                    self.resize(true);\n                }\n            });\n            Object.defineProperty(self.intf, 'width', {\n                get: function () {\n                    if (self.shadowRoot) {\n                        return self.shadowRoot.width;\n                    }\n                    return self.parentNode.width;\n                },\n                set: function (value) {\n                    if (self.shadowRoot) {\n                        self.shadowRoot.width = value;\n                    } else {\n                        self.parentNode.width = value;\n                    }\n                    self.resize(true);\n                }\n            });\n            Object.defineProperty(self.intf, 'parentNode', {\n                get: function () {\n                    return self.parentNode;\n                },\n                set: function (value) {\n                    if (!self.isChildGrid) {\n                        throw new TypeError('Cannot set property parentNode which has only a getter');\n                    }\n                    self.parentNode = value;\n                }\n            });\n        }\n        Object.defineProperty(self.intf, 'visibleRowHeights', {\n            get: function () {\n                return self.visibleRowHeights;\n            }\n        });\n        Object.defineProperty(self.intf, 'openChildren', {\n            get: function () {\n                return self.openChildren;\n            }\n        });\n        Object.defineProperty(self.intf, 'childGrids', {\n            get: function () {\n                return Object.keys(self.childGrids).map(function (gridId) {\n                    return self.childGrids[gridId];\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'isChildGrid', {\n            get: function () {\n                return self.isChildGrid;\n            }\n        });\n        Object.defineProperty(self, 'cursor', {\n            get: function () {\n                return self.parentNodeStyle.cursor;\n            },\n            set: function (value) {\n                if (value === 'cell') { value = 'default'; }\n                if (self.currentCursor !== value) {\n                    self.parentNodeStyle.cursor = value;\n                    self.currentCursor = value;\n                }\n            }\n        });\n        Object.defineProperty(self.intf, 'orderDirection', {\n            get: function () {\n                return self.orderDirection;\n            },\n            set: function (value) {\n                if (value !== 'desc') {\n                    value = 'asc';\n                }\n                self.orderDirection = value;\n                self.order(self.orderBy, self.orderDirection);\n            }\n        });\n        Object.defineProperty(self.intf, 'orderBy', {\n            get: function () {\n                return self.orderBy;\n            },\n            set: function (value) {\n                if (self.getSchema().find(function (col) {\n                        return col.name === value;\n                    }) === undefined) {\n                    throw new Error('Cannot sort by unknown column name.');\n                }\n                self.orderBy = value;\n                self.order(self.orderBy, self.orderDirection);\n            }\n        });\n        if (self.isComponent) {\n            Object.defineProperty(self.intf, 'offsetHeight', {\n                get: function () {\n                    return self.canvas.offsetHeight;\n                }\n            });\n            Object.defineProperty(self.intf, 'offsetWidth', {\n                get: function () {\n                    return self.canvas.offsetWidth;\n                }\n            });\n        }\n        Object.defineProperty(self.intf, 'scrollHeight', {\n            get: function () {\n                return self.scrollBox.scrollHeight;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollWidth', {\n            get: function () {\n                return self.scrollBox.scrollWidth;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollTop', {\n            get: function () {\n                return self.scrollBox.scrollTop;\n            },\n            set: function (value) {\n                self.scrollBox.scrollTop = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollLeft', {\n            get: function () {\n                return self.scrollBox.scrollLeft;\n            },\n            set: function (value) {\n                self.scrollBox.scrollLeft = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'sizes', {\n            get: function () {\n                return self.sizes;\n            }\n        });\n        Object.defineProperty(self.intf, 'input', {\n            get: function () {\n                return self.input;\n            }\n        });\n        Object.defineProperty(self.intf, 'controlInput', {\n            get: function () {\n                return self.controlInput;\n            }\n        });\n        Object.defineProperty(self.intf, 'currentCell', {\n            get: function () {\n                return self.currentCell;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleCells', {\n            get: function () {\n                return self.visibleCells;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRows', {\n            get: function () {\n                return self.visibleRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'selections', {\n            get: function () {\n                return self.selections;\n            }\n        });\n        Object.defineProperty(self.intf, 'dragMode', {\n            get: function () {\n                return self.dragMode;\n            }\n        });\n        Object.defineProperty(self.intf, 'changes', {\n            get: function () {\n                return self.changes;\n            }\n        });\n        self.intf.formatters = self.formatters;\n        Object.defineProperty(self.intf, 'type', {\n            get: function () {\n                return self.dataType;\n            },\n            set: function (value) {\n                if (!self.parsers[value]) {\n                    throw new Error('No parser for MIME type ' + value);\n                }\n                self.dataType = value;\n            }\n        });\n        self.eventNames.forEach(function (eventName) {\n            Object.defineProperty(self.intf, 'on' + eventName, {\n                get: function () {\n                    return self.componentL1Events[eventName];\n                },\n                set: function (value) {\n                    self.events[eventName] = [];\n                    self.componentL1Events[eventName] = value;\n                    if (!value) { return; }\n                    self.addEventListener(eventName, value);\n                }\n            });\n        });\n        Object.defineProperty(self.intf, 'frozenRow', {\n            get: function () {\n                return self.frozenRow;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.visibleRows.length < val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible rows.');\n                }\n                self.frozenRow = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'frozenColumn', {\n            get: function () {\n                return self.frozenColumn;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.getVisibleSchema().length < val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible columns.');\n                }\n                self.frozenColumn = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollIndexRect', {\n            get: function () {\n                return {\n                    top: self.scrollIndexTop,\n                    right: self.scrollIndexRight,\n                    bottom: self.scrollIndexBottom,\n                    left: self.scrollIndexLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollPixelRect', {\n            get: function () {\n                return {\n                    top: self.scrollPixelTop,\n                    right: self.scrollPixelRight,\n                    bottom: self.scrollPixelBottom,\n                    left: self.scrollPixelLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'selectionBounds', {\n            get: function () {\n                return self.getSelectionBounds();\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedRows', {\n            get: function () {\n                return self.getSelectedData(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedCells', {\n            get: function () {\n                return self.getSelectedData();\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleSchema', {\n            get: function () {\n                return self.getVisibleSchema().map(function eachDataRow(col) {\n                    return col;\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'treeGridAttributes', {\n            get: function () {\n                return self.treeGridAttributes;\n            },\n            set: function setTreeGridAttributes(value) {\n                self.treeGridAttributes = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'cellGridAttributes', {\n            get: function () {\n                return self.cellGridAttributes;\n            },\n            set: function setCellGridAttributes(value) {\n                self.cellGridAttributes = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'ctx', {\n            get: function () {\n                return self.ctx;\n            }\n        });\n        Object.defineProperty(self.intf, 'schema', {\n            get: function schemaGetter() {\n                return self.getSchema();\n            },\n            set: function schemaSetter(value) {\n                if (value === undefined) {\n                    // Issue #89 - allow schema to be set to initialized state\n                    self.schema = undefined;\n                    self.tempSchema = undefined;\n                    self.dispatchEvent('schemachanged', {schema: undefined});\n                    return;\n                }\n                if (!Array.isArray(value) || typeof value[0] !== 'object') {\n                    throw new Error('Schema must be an array of objects.');\n                }\n                if (value[0].name === undefined) {\n                    throw new Error('Expected schema to contain an object with at least a name property.');\n                }\n                self.schema = value.map(function eachSchemaColumn(column, index) {\n                    column.width = column.width || self.style.cellWidth;\n                    column[self.uniqueId] = self.getSchemaNameHash(column.name);\n                    column.filter = column.filter || self.filter(column.type);\n                    column.type = column.type || 'string';\n                    column.index = index;\n                    column.columnIndex = index;\n                    column.rowIndex = -1;\n                    return column;\n                });\n                self.tempSchema = undefined;\n                self.createNewRowData();\n                self.createColumnOrders();\n                self.tryLoadStoredSettings();\n                if (self.storedSettings && typeof self.storedSettings.visibility === 'object') {\n                    self.schema.forEach(function hideEachSchemaColumn(column, index) {\n                        if (self.storedSettings && self.storedSettings.visibility[column.name] !== undefined) {\n                            column.hidden = !self.storedSettings.visibility[column.name];\n                        }\n                    });\n                }\n                self.resize(true);\n                self.dispatchEvent('schemachanged', {schema: self.schema});\n            }\n        });\n        /**\n         * Gets an array of currently registered MIME types.\n         * @memberof canvasDatagrid\n         * @name getDataTypes\n         * @method\n         * @returns array List of registered MIME types.\n         */\n         //self.uniqueId\n        self.intf.getTypes = function () {\n            return Object.keys(self.parsers);\n        };\n        self.parsers['application/json+x-canvas-datagrid;2dArray'] = function (data, callback) {\n            self.parsers['application/x-canvas-datagrid;2dArray'](JSON.parse(data), function (data, schema) {\n                return callback(data, schema);\n            });\n        };\n        self.parsers['application/json+x-canvas-datagrid'] = function (data, callback) {\n            self.parsers['application/x-canvas-datagrid'](JSON.parse(data), function (data, schema) {\n                return callback(data, schema);\n            });\n        };\n        self.parsers['application/x-canvas-datagrid;2dArray'] = function (data, callback) {\n            var x, y, l, d, max;\n            // find the longest length\n            max = 0;\n            d = [];\n            l = data.length;\n            for (x = 0; x < l; x += 1) {\n                max = Math.max(max, data[x].length);\n            }\n            for (x = 0; x < l; x += 1) {\n                for (y = 0; y < max; y += 1) {\n                    d[x][y] = data[x][y];\n                }\n            }\n            // map against length indexes\n            data.forEach(function (row, index) {\n                d[index] = {};\n                for (x = 0; x < max; x += 1) {\n                    d[index][x] = row[x];\n                }\n            });\n            return callback(d, self.getSchemaFromData(data));\n        };\n        self.parsers['application/x-canvas-datagrid'] = function (data, callback) {\n            return callback(data);\n        };\n        self.intf.parsers = self.parsers;\n        // send to dataType ETL function to extract from input data\n        // and transform into native [{}, {}] format\n        self.etl = function (data, callback) {\n            if (!self.intf.parsers[self.dataType]) {\n                throw new Error('Unsupported data type.');\n            }\n            self.intf.parsers[self.dataType](data, function (data, schemaOrPk) {\n                var x, l, pk;\n                // overload for second argument.  Can be array schema or primary key column name\n                if (Array.isArray(schemaOrPk)) {\n                    self.schema = schemaOrPk;\n                } else if (typeof schemaOrPk === 'string') {\n                    pk = schemaOrPk;\n                    self.pkDefined = true;\n                }\n                // Issue #89 - allow schema to be auto-created every time data is set\n                if (self.attributes.autoGenerateSchema) {\n                    self.schema = self.getSchemaFromData(data);\n                }\n                if (!self.schema) {\n                    self.tempSchema = self.getSchemaFromData(data);\n                }\n                if (self.getSchema()) {\n                    self.createColumnOrders();\n                }\n                // set internal tracking of PK to the new PK\n                // or leave it be if no PK was set in this ETL task\n                self.uniqueId = pk || self.uniqueId;\n                // if no PK was defined, check schema and or define one now\n                if (!pk) {\n                    self.getSchema().forEach(function (col) {\n                        if (col.primaryKey) {\n                            pk = col.name;\n                            self.pkDefined = true;\n                        }\n                    });\n                    if (!pk) {\n                        l = data.length;\n                        for (x = 0; x < l; x += 1) {\n                            data[x][self.uniqueId] = x;\n                        }\n                        self.uId = x;\n                    }\n                }\n                // set the unfiltered/sorted data array\n                self.originalData = data;\n                //TODO apply filter to incoming dataset\n                self.data = self.originalData;\n                // empty data was set\n                if (!self.schema && self.data.length === 0) {\n                    self.tempSchema = [{name: ''}];\n                    self.tempSchema[0][self.uniqueId] = self.getSchemaNameHash('');\n                }\n                if ((self.tempSchema && !self.schema) || self.attributes.autoGenerateSchema) {\n                    self.createColumnOrders();\n                    self.dispatchEvent('schemachanged', {schema: self.tempSchema});\n                }\n            });\n        };\n        Object.defineProperty(self.intf, 'data', {\n            get: function dataGetter() {\n                if (self.pkDefined) {\n                    return self.data.map(function (row) {\n                        delete row[self.uniqueId];\n                        return row;\n                    });\n                }\n                return self.data;\n            },\n            set: function dataSetter(value) {\n                self.etl(value, function (d) {\n                    self.changes = [];\n                    self.createNewRowData();\n                    if (self.attributes.autoResizeColumns && self.data.length > 0\n                            && self.storedSettings === undefined) {\n                        self.autosize();\n                    }\n                    // set the header column to fit the numbers in it\n                    self.fitColumnToValues('cornerCell', true);\n                    if (!self.attributes.disableRowOrdering) {\n                        self.createRowOrders();\n                    }\n                    self.tryLoadStoredSettings();\n                    self.dispatchEvent('datachanged', {data: self.data});\n                    self.resize(true);\n                });\n            }\n        });\n        self.initScrollBox = function () {\n            var sHeight = 0,\n                sWidth = 0,\n                scrollTop = 0,\n                scrollLeft = 0,\n                scrollHeight = 0,\n                scrollWidth = 0,\n                scrollBoxHeight = 20,\n                scrollBoxWidth = 20;\n            function setScrollTop(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollTop value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollHeight) {\n                    value = scrollHeight;\n                }\n                if (scrollHeight < 0) {\n                    value = 0;\n                }\n                scrollTop = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            function setScrollLeft(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollLeft value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollWidth) {\n                    value = scrollWidth;\n                }\n                if (scrollWidth < 0) {\n                    value = 0;\n                }\n                scrollLeft = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            self.scrollBox.toString = function () {\n                return '{\"width\": ' + scrollWidth\n                    + ', \"height\": ' + scrollHeight\n                    + ', \"left\": ' + scrollLeft\n                    + ', \"top\": ' + scrollTop + '}';\n            };\n            self.scrollBox.scrollTo = function (x, y, supressDrawEvent) {\n                setScrollLeft(x, true);\n                setScrollTop(y, supressDrawEvent);\n            };\n            Object.defineProperty(self.scrollBox, 'scrollBoxHeight', {\n                get: function () {\n                    return scrollBoxHeight;\n                },\n                set: function (value) {\n                    scrollBoxHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollBoxWidth', {\n                get: function () {\n                    return scrollBoxWidth;\n                },\n                set: function (value) {\n                    scrollBoxWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'height', {\n                get: function () {\n                    return sHeight;\n                },\n                set: function (value) {\n                    if (scrollHeight < value) {\n                        scrollTop = 0;\n                    }\n                    sHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'width', {\n                get: function () {\n                    return sWidth;\n                },\n                set: function (value) {\n                    sWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollTop', {\n                get: function () {\n                    return scrollTop;\n                },\n                set: setScrollTop\n            });\n            Object.defineProperty(self.scrollBox, 'scrollLeft', {\n                get: function () {\n                    return scrollLeft;\n                },\n                set: setScrollLeft\n            });\n            Object.defineProperty(self.scrollBox, 'scrollHeight', {\n                get: function () {\n                    return scrollHeight;\n                },\n                set: function (value) {\n                    if (scrollTop > value) {\n                        scrollTop = Math.max(value, 0);\n                    }\n                    if (scrollHeight < sHeight) {\n                        scrollTop = 0;\n                    }\n                    scrollHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollWidth', {\n                get: function () {\n                    return scrollWidth;\n                },\n                set: function (value) {\n                    if (scrollLeft > value) {\n                        scrollLeft = Math.max(value, 0);\n                    }\n                    scrollWidth = value;\n                }\n            });\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/intf.js\n// module id = 6\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false, Event: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var zIndexTop, hoverScrollTimeout, autoCompleteContext;\n        function applyContextItemStyle(contextItemContainer) {\n            self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item' + (self.mobile ? '-mobile' : ''));\n            contextItemContainer.addEventListener('mouseover', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n            });\n            contextItemContainer.addEventListener('mouseout', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n            });\n        }\n        function createContextMenu(ev, pos, items, parentContextMenu) {\n            var container = document.createElement('div'),\n                upArrow = document.createElement('div'),\n                downArrow = document.createElement('div'),\n                children = [],\n                selectedIndex = -1,\n                intf = {},\n                rect;\n            if (!Array.isArray(items)) { throw new Error('createContextMenu expects an array.'); }\n            function createItems() {\n                items.forEach(function (item) {\n                    var contextItemContainer = document.createElement('div'),\n                        childMenuArrow;\n                    function removeChildContext(e) {\n                        if (e.relatedTarget === container\n                                || item.contextMenu.container === e.relatedTarget\n                                || childMenuArrow === e.relatedTarget\n                                || (contextItemContainer === e.relatedTarget)\n                                || item.contextMenu.container.contains(e.relatedTarget)\n                                ) { return; }\n                        item.contextMenu.dispose();\n                        children.splice(children.indexOf(item.contextMenu), 1);\n                        item.contextMenu = undefined;\n                        contextItemContainer.removeEventListener('mouseout', removeChildContext);\n                        container.removeEventListener('mouseout', removeChildContext);\n                        contextItemContainer.setAttribute('contextOpen', '0');\n                        contextItemContainer.setAttribute('opening', '0');\n                    }\n                    function contextAddCallback(items) {\n                        // check yet again if the user hasn't moved off\n                        if (contextItemContainer.getAttribute('opening') !== '1' ||\n                                contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        var cPos = contextItemContainer.getBoundingClientRect();\n                        cPos = {\n                            left: cPos.left + self.style.childContextMenuMarginLeft + container.offsetWidth,\n                            top: cPos.top + self.style.childContextMenuMarginTop,\n                            bottom: cPos.bottom,\n                            right: cPos.right\n                        };\n                        item.contextMenu = createContextMenu(ev, cPos, items, intf);\n                        contextItemContainer.setAttribute('contextOpen', '1');\n                        contextItemContainer.addEventListener('mouseout', removeChildContext);\n                        container.addEventListener('mouseout', removeChildContext);\n                        children.push(item.contextMenu);\n                    }\n                    function createChildContext() {\n                        var i;\n                        if (contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        contextItemContainer.setAttribute('opening', '1');\n                        if (typeof item.items === 'function') {\n                            i  = item.items.apply(intf, [function (items) {\n                                contextAddCallback(items);\n                            }]);\n                            if (i !== undefined && Array.isArray(i)) {\n                                contextAddCallback(i);\n                            }\n                            return;\n                        }\n                        contextAddCallback(item.items);\n                    }\n                    function addItem(item) {\n                        function addContent(content) {\n                            if (content === null) { return; }\n                            if (typeof content === 'function') {\n                                return addContent(content(ev));\n                            }\n                            if (typeof content === 'object') {\n                                contextItemContainer.appendChild(content);\n                                return;\n                            }\n                            applyContextItemStyle(contextItemContainer);\n                            contextItemContainer.innerHTML = content;\n                            return;\n                        }\n                        addContent(item.title);\n                        item.contextItemContainer = contextItemContainer;\n                        if ((item.items && item.items.length > 0) || typeof item.items === 'function') {\n                            childMenuArrow = document.createElement('div');\n                            self.createInlineStyle(childMenuArrow, 'canvas-datagrid-context-child-arrow');\n                            childMenuArrow.innerHTML = self.style.childContextMenuArrowHTML;\n                            contextItemContainer.appendChild(childMenuArrow);\n                            contextItemContainer.addEventListener('mouseover', createChildContext);\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                contextItemContainer.setAttribute('opening', '0');\n                            });\n                        }\n                        if (item.click) {\n                            contextItemContainer.addEventListener('click', function (ev) {\n                                item.click.apply(self, [ev]);\n                            });\n                        }\n                    }\n                    addItem(item);\n                    container.appendChild(contextItemContainer);\n                });\n            }\n            function clickIndex(idx) {\n                items[idx].contextItemContainer.dispatchEvent(new Event('click'));\n            }\n            function checkArrowVisibility() {\n                if (container.scrollTop > 0) {\n                    self.parentDOMNode.appendChild(upArrow);\n                } else if (upArrow.parentNode) {\n                    upArrow.parentNode.removeChild(upArrow);\n                }\n                if (container.scrollTop >= container.scrollHeight - container.offsetHeight && downArrow.parentNode) {\n                    downArrow.parentNode.removeChild(downArrow);\n                } else if (container.scrollHeight - container.offsetHeight > 0\n                        && !(container.scrollTop >= container.scrollHeight - container.offsetHeight)) {\n                    self.parentDOMNode.appendChild(downArrow);\n                }\n            }\n            function startHoverScroll(type) {\n                return function t() {\n                    var a = self.attributes.contextHoverScrollAmount;\n                    if (type === 'up' && container.scrollTop === 0) { return; }\n                    if (type === 'down' && container.scrollTop === container.scrollHeight) { return; }\n                    container.scrollTop += (type === 'up' ? -a : a);\n                    hoverScrollTimeout = setTimeout(t, self.attributes.contextHoverScrollRateMs, type);\n                };\n            }\n            function endHoverScroll(type) {\n                return function () {\n                    clearTimeout(hoverScrollTimeout);\n                };\n            }\n            function init() {\n                var loc = {},\n                    s = self.scrollOffset(self.canvas);\n                if (zIndexTop === undefined) {\n                    zIndexTop = self.style.contextMenuZIndex;\n                }\n                createItems();\n                self.createInlineStyle(container, 'canvas-datagrid-context-menu' + (self.mobile ? '-mobile' : ''));\n                loc.x = pos.left - s.left;\n                loc.y = pos.top - s.top;\n                loc.height = 0;\n                zIndexTop += 1;\n                container.style.position = 'absolute';\n                upArrow.style.color = self.style.contextMenuArrowColor;\n                downArrow.style.color = self.style.contextMenuArrowColor;\n                [upArrow, downArrow].forEach(function (el) {\n                    el.style.textAlign = 'center';\n                    el.style.position = 'absolute';\n                    el.style.zIndex = zIndexTop + 1;\n                });\n                container.style.zIndex = zIndexTop;\n                if (parentContextMenu && parentContextMenu.inputDropdown) {\n                    container.style.maxHeight = window.innerHeight - loc.y - self.style.autocompleteBottomMargin + 'px';\n                    container.style.minWidth = pos.width + 'px';\n                    loc.y += pos.height;\n                }\n                if (self.mobile) {\n                    container.style.width = pos.width + 'px';\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                container.addEventListener('scroll', checkArrowVisibility);\n                container.addEventListener('wheel', function (e) {\n                    if (self.hasFocus) {\n                        container.scrollTop += e.deltaY;\n                        container.scrollLeft += e.deltaX;\n                    }\n                    checkArrowVisibility();\n                });\n                upArrow.innerHTML = self.style.contextMenuArrowUpHTML;\n                downArrow.innerHTML = self.style.contextMenuArrowDownHTML;\n                container.appendChild(upArrow);\n                document.body.appendChild(downArrow);\n                document.body.appendChild(container);\n                rect = container.getBoundingClientRect();\n                // TODO: fix !(parentContextMenu && parentContextMenu.inputDropdown) state (autocomplete)\n                if (rect.bottom > window.innerHeight) {\n                    if (!(parentContextMenu && parentContextMenu.inputDropdown)) {\n                        loc.y -= (rect.bottom + self.style.contextMenuWindowMargin) - window.innerHeight;\n                    }\n                    if (loc.y < 0) { loc.y = 0; }\n                    if (container.offsetHeight > window.innerHeight - self.style.contextMenuWindowMargin) {\n                        container.style.height = window.innerHeight - self.style.contextMenuWindowMargin + 'px';\n                        loc.y -= self.style.contextMenuWindowMargin;\n                    }\n                }\n                if (rect.right > window.innerWidth) {\n                    loc.x -= rect.right - window.innerWidth + self.style.contextMenuWindowMargin;\n                }\n                if (loc.x < 0) { loc.x = 0; }\n                if (loc.y < 0) { loc.y = 0; }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                rect = container.getBoundingClientRect();\n                upArrow.style.top = rect.top + 'px';\n                downArrow.style.top = rect.top + rect.height - downArrow.offsetHeight + 'px';\n                upArrow.style.left = rect.left + 'px';\n                downArrow.style.left = rect.left + 'px';\n                downArrow.style.width = container.offsetWidth + 'px';\n                upArrow.style.width = container.offsetWidth + 'px';\n                downArrow.addEventListener('mouseover', startHoverScroll('down'));\n                downArrow.addEventListener('mouseout', endHoverScroll('down'));\n                upArrow.addEventListener('mouseover', startHoverScroll('up'));\n                upArrow.addEventListener('mouseout', endHoverScroll('up'));\n                checkArrowVisibility();\n            }\n            intf.parentGrid = self.intf;\n            intf.parentContextMenu = parentContextMenu;\n            intf.container = container;\n            init();\n            intf.clickIndex = clickIndex;\n            intf.rect = rect;\n            intf.items = items;\n            intf.upArrow = upArrow;\n            intf.downArrow = downArrow;\n            intf.dispose = function () {\n                clearTimeout(hoverScrollTimeout);\n                children.forEach(function (c) {\n                    c.dispose();\n                });\n                [downArrow, upArrow, container].forEach(function (el) {\n                    if (el.parentNode) { el.parentNode.removeChild(el); }\n                });\n            };\n            Object.defineProperty(intf, 'selectedIndex', {\n                get: function () {\n                    return selectedIndex;\n                },\n                set: function (value) {\n                    if (typeof value !== 'number' || isNaN(value || !isFinite(value))) {\n                        throw new Error('Context menu selected index must be a sane number.');\n                    }\n                    selectedIndex = value;\n                    if (selectedIndex > items.length - 1) {\n                        selectedIndex = items.length - 1;\n                    }\n                    if (selectedIndex < 0) {\n                        selectedIndex = 0;\n                    }\n                    items.forEach(function (item, index) {\n                        if (index === selectedIndex) {\n                            return self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                        }\n                        self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item');\n                    });\n                }\n            });\n            return intf;\n        }\n        function createFilterContextMenuItems(e) {\n            var filterContainer = document.createElement('div'),\n                filterLabel = document.createElement('div'),\n                filterAutoCompleteButton = document.createElement('button'),\n                filterInput = document.createElement('input'),\n                n = e.cell && e.cell.header ? e.cell.header.title || e.cell.header.name : '',\n                autoCompleteItems,\n                iRect;\n            function checkRegExpErrorState() {\n                filterInput.style.background = self.style.contextFilterInputBackground;\n                filterInput.style.color = self.style.contextFilterInputColor;\n                if (self.invalidFilterRegEx) {\n                    filterInput.style.background = self.style.contextFilterInvalidRegExpBackground;\n                    filterInput.style.color = self.style.contextFilterInvalidRegExpColor;\n                }\n            }\n            function fillAutoComplete() {\n                var count = 0;\n                autoCompleteItems = {};\n                self.data.forEach(function (row) {\n                    var value = row[e.cell.header.name];\n                    if (autoCompleteItems[value] || count > self.attributes.maxAutoCompleteItems) { return; }\n                    count += 1;\n                    autoCompleteItems[value] = {\n                        title: self.formatters[e.cell.header.type || 'string']({ cell: { value: value }}),\n                        click: function (e) {\n                            filterInput.value = value;\n                            e.stopPropagation();\n                            filterInput.dispatchEvent(new Event('keyup'));\n                            self.disposeAutocomplete();\n                            return;\n                        }\n                    };\n                });\n                autoCompleteItems = Object.keys(autoCompleteItems).map(function (key) {\n                    return autoCompleteItems[key];\n                });\n            }\n            function createAutoCompleteContext(ev) {\n                if (ev && [40, 38, 13, 9].indexOf(ev.keyCode) !== -1) { return; }\n                fillAutoComplete();\n                iRect = filterInput.getBoundingClientRect();\n                if (autoCompleteContext) {\n                    autoCompleteContext.dispose();\n                    autoCompleteContext = undefined;\n                }\n                autoCompleteContext = createContextMenu(e, {\n                    left: iRect.left,\n                    top: iRect.top,\n                    right: iRect.right,\n                    bottom: iRect.bottom,\n                    height: iRect.height,\n                    width: iRect.width\n                }, autoCompleteItems, {inputDropdown: true});\n                autoCompleteContext.selectedIndex = 0;\n            }\n            self.createInlineStyle(filterLabel, 'canvas-datagrid-context-menu-label');\n            self.createInlineStyle(filterAutoCompleteButton, 'canvas-datagrid-context-menu-filter-button');\n            self.createInlineStyle(filterInput, 'canvas-datagrid-context-menu-filter-input');\n            checkRegExpErrorState();\n            filterInput.onclick = self.disposeAutocomplete;\n            filterInput.addEventListener('keydown', function (e) {\n                //down\n                if (e.keyCode === 40) {\n                    autoCompleteContext.selectedIndex += 1;\n                }\n                //up\n                if (e.keyCode === 38) {\n                    autoCompleteContext.selectedIndex -= 1;\n                }\n                //enter\n                if (e.keyCode === 13) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    self.disposeContextMenu();\n                }\n                //tab\n                if (e.keyCode === 9) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    e.preventDefault();\n                }\n                //esc\n                if (e.keyCode === 27) {\n                    self.disposeContextMenu();\n                }\n            });\n            filterInput.addEventListener('keyup', function () {\n                self.setFilter(e.cell.header.name, filterInput.value);\n            });\n            filterInput.addEventListener('keyup', createAutoCompleteContext);\n            ['focus', 'blur', 'keydown', 'keyup', 'change'].forEach(function (en) {\n                filterInput.addEventListener(en, checkRegExpErrorState);\n            });\n            filterInput.value = e.cell.header ? self.columnFilters[e.cell.header.name] || '' : '';\n            filterLabel.innerHTML = self.attributes.filterOptionText.replace(/%s/g, n);\n            filterAutoCompleteButton.onclick = function () {\n                if (autoCompleteContext) {\n                    return self.disposeAutocomplete();\n                }\n                createAutoCompleteContext();\n            };\n            filterAutoCompleteButton.innerHTML = self.style.contextFilterButtonHTML;\n            filterContainer.addEventListener('click', function (e) {\n                return e.stopPropagation();\n            });\n            filterContainer.appendChild(filterLabel);\n            filterContainer.appendChild(filterInput);\n            filterContainer.appendChild(filterAutoCompleteButton);\n            e.items.push({\n                title: filterContainer\n            });\n            if (Object.keys(self.columnFilters).length) {\n                Object.keys(self.columnFilters).forEach(function (cf) {\n                    var h = self.getHeaderByName(cf);\n                    e.items.push({\n                        title: self.attributes.removeFilterOptionText.replace(/%s/g, h.title || h.name),\n                        click: function removeFilterClick(e) {\n                            e.preventDefault();\n                            self.setFilter(cf, '');\n                            self.controlInput.focus();\n                        }\n                    });\n                });\n            }\n        }\n        function addDefaultContextMenuItem(e) {\n            var isNormalCell = !(e.cell.isBackground || e.cell.isHeaderCellCap\n                    || e.cell.isScrollBar || e.cell.isCorner || e.cell.isRowHeader)\n                    && e.cell.header;\n            if (self.attributes.showFilter && isNormalCell) {\n                createFilterContextMenuItems(e);\n            }\n            if (self.attributes.showCopy\n                    && self.selections.reduce(function (p, r) {\n                        return p + r.length;\n                    }, 0) > 0) {\n                e.items.push({\n                    title: self.attributes.copyText,\n                    click: function () {\n                        document.execCommand('copy');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.showPaste && self.clipBoardData) {\n                e.items.push({\n                    title: self.attributes.pasteText,\n                    click: function () {\n                        self.paste(self.clipBoardData, e.cell.columnIndex, e.cell.rowIndex);\n                        self.draw();\n                    }\n                });\n            }\n            if (self.attributes.showColumnSelector) {\n                e.items.push({\n                    title: self.attributes.columnSelectorText,\n                    items: function () {\n                        var d = [];\n                        self.getSchema().forEach(function (column) {\n                            if (column.name === self.uniqueId) { return; }\n                            function toggleColumnVisibility(e) {\n                                column.hidden = !column.hidden;\n                                e.preventDefault();\n                                self.stopPropagation(e);\n                                self.disposeContextMenu();\n                                self.resize(true);\n                                self.setStorageData();\n                            }\n                            var el = document.createElement('div');\n                            applyContextItemStyle(el);\n                            el.addEventListener('touchstart', toggleColumnVisibility);\n                            el.addEventListener('click', toggleColumnVisibility);\n                            el.innerHTML = (column.hidden ? self.attributes.columnSelectorHiddenText\n                                    : self.attributes.columnSelectorVisibleText)\n                                    + (column.title || column.name);\n                            d.push({\n                                title: el\n                            });\n                        });\n                        return d;\n                    }\n                });\n                if (e.cell && e.cell.header) {\n                    e.items.push({\n                        title: self.attributes.hideColumnText\n                            .replace(/%s/ig, e.cell.header.title || e.cell.header.name),\n                        click: function (ev) {\n                            e.cell.header.hidden = true;\n                            ev.preventDefault();\n                            self.stopPropagation(ev);\n                            self.disposeContextMenu();\n                            self.setStorageData();\n                            setTimeout(function () { self.resize(true); }, 10);\n                        }\n                    });\n                }\n            }\n            if (self.attributes.saveAppearance && self.attributes.showClearSettingsOption\n                    && (Object.keys(self.sizes.rows).length > 0\n                        || Object.keys(self.sizes.columns).length > 0)) {\n                e.items.push({\n                    title: self.attributes.clearSettingsOptionText,\n                    click: function (e) {\n                        e.preventDefault();\n                        self.sizes.rows = {};\n                        self.sizes.columns = {};\n                        self.createRowOrders();\n                        self.createColumnOrders();\n                        self.storedSettings = undefined;\n                        self.dispatchEvent('resizecolumn', {columnWidth: self.style.cellWidth});\n                        self.dispatchEvent('resizerow', {cellHeight: self.style.cellHeight});\n                        self.setStorageData();\n                        self.resize(true);\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.allowSorting && self.attributes.showOrderByOption && isNormalCell) {\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextAsc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'asc');\n                        self.controlInput.focus();\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextDesc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'desc');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n        }\n        self.disposeAutocomplete = function () {\n            if (autoCompleteContext) {\n                autoCompleteContext.dispose();\n                autoCompleteContext = undefined;\n            }\n        };\n        self.disposeContextMenu = function () {\n            document.removeEventListener('click', self.disposeContextMenu);\n            zIndexTop = self.style.contextMenuZIndex;\n            self.disposeAutocomplete();\n            if (self.contextMenu) {\n                self.contextMenu.dispose();\n            }\n            self.contextMenu = undefined;\n        };\n        self.contextmenuEvent = function (e, overridePos) {\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            function createDiposeEvent() {\n                requestAnimationFrame(function () {\n                    document.addEventListener('click', self.disposeContextMenu);\n                    document.removeEventListener('mouseup', createDiposeEvent);\n                });\n            }\n            var contextPosition,\n                items = [],\n                pos = overridePos || self.getLayerPos(e),\n                ev = {\n                    NativeEvent: e,\n                    cell: self.getCellAt(pos.x, pos.y),\n                    items: items\n                };\n            if (!ev.cell.isGrid) {\n                addDefaultContextMenuItem(ev);\n            }\n            if (self.dispatchEvent('contextmenu', ev)) {\n                return;\n            }\n            if (!ev.cell.isGrid) {\n                if (self.contextMenu) {\n                    self.disposeContextMenu();\n                }\n                contextPosition = {\n                    left: pos.x + pos.rect.left\n                        + self.style.contextMenuMarginLeft + self.canvasOffsetLeft,\n                    top: pos.y + pos.rect.top\n                        + self.style.contextMenuMarginTop + self.canvasOffsetTop,\n                    right: ev.cell.width + ev.cell.x + pos.rect.left,\n                    bottom: ev.cell.height + ev.cell.y + pos.rect.top,\n                    height: ev.cell.height,\n                    width: ev.cell.width\n                };\n                if (self.mobile) {\n                    contextPosition.left = self.style.mobileContextMenuMargin + 'px';\n                    contextPosition.width = self.width - (self.style.mobileContextMenuMargin * 2) + 'px';\n                }\n                self.contextMenu = createContextMenu(ev, contextPosition, items);\n                document.addEventListener('mouseup', createDiposeEvent);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/contextMenu.js\n// module id = 7\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.getClippingRect = function (ele) {\n            var boundingRect = self.position(self.parentNode),\n                eleRect = self.position(ele),\n                s = self.scrollOffset(self.canvas),\n                clipRect = {\n                    x: 0,\n                    y: 0,\n                    h: 0,\n                    w: 0\n                },\n                parentRect = {\n                    x: -Infinity,\n                    y: -Infinity,\n                    h: Infinity,\n                    w: Infinity\n                },\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth();\n            boundingRect.top -= s.top;\n            boundingRect.left -= s.left;\n            eleRect.top -= s.top;\n            eleRect.left -= s.left;\n            clipRect.h = boundingRect.top + boundingRect.height - ele.offsetTop - self.style.scrollBarWidth;\n            clipRect.w = boundingRect.left + boundingRect.width - ele.offsetLeft - self.style.scrollBarWidth;\n            clipRect.x = boundingRect.left + (eleRect.left * -1) + rowHeaderCellWidth;\n            clipRect.y = boundingRect.top + (eleRect.top * -1) + columnHeaderCellHeight;\n            return {\n                x: clipRect.x > parentRect.x ? clipRect.x : parentRect.x,\n                y: clipRect.y > parentRect.y ? clipRect.y : parentRect.y,\n                h: clipRect.h < parentRect.h ? clipRect.h : parentRect.h,\n                w: clipRect.w < parentRect.w ? clipRect.w : parentRect.w\n            };\n        };\n        self.clipElement = function (ele) {\n            var clipRect = self.getClippingRect(ele);\n            if (clipRect.w < 0) { clipRect.w = 0; }\n            if (clipRect.h < 0) { clipRect.h = 0; }\n            ele.style.clip = 'rect('\n                + clipRect.y + 'px,'\n                + clipRect.w + 'px,'\n                + clipRect.h + 'px,'\n                + clipRect.x + 'px'\n                + ')';\n            // INFO https://developer.mozilla.org/en-US/docs/Web/CSS/clip\n            // clip has been \"deprecated\" for clipPath.  Of course nothing but chrome\n            // supports clip path, so we'll keep using clip until someday clipPath becomes\n            // more widely support.  The code below works correctly, but setting clipPath and clip\n            // at the same time has undesirable results.\n            // ele.style.clipPath = 'polygon('\n            //     + clipRect.x + 'px ' + clipRect.y + 'px,'\n            //     + clipRect.x + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.y + 'px'\n            //     + ')';\n        };\n        self.scrollOffset = function (e) {\n            var x = 0, y = 0;\n            while (e.parentNode && e.nodeName !== 'CANVAS-DATAGRID' && e !== self.intf) {\n                if (e.nodeType !== 'canvas-datagrid-tree'\n                        && e.nodeType !== 'canvas-datagrid-cell') {\n                    x -= e.scrollLeft;\n                    y -= e.scrollTop;\n                }\n                e = e.parentNode;\n            }\n            return {\n                left: x - document.scrollingElement.scrollLeft,\n                top: y - document.scrollingElement.scrollTop\n            };\n        };\n        self.resizeEditInput = function () {\n            if (self.input && self.input.editCell) {\n                var pos = self.canvas.getBoundingClientRect(),\n                    s = self.scrollOffset(self.intf),\n                    bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                    borderWidth = (self.style.cellBorderWidth * bm),\n                    cell = self.getVisibleCellByIndex(self.input.editCell.columnIndex, self.input.editCell.rowIndex)\n                        || {x: -100, y: -100, height: 0, width: 0};\n                if (self.mobile) {\n                    self.input.style.left = '0';\n                    self.input.style.top = (self.height - self.style.mobileEditInputHeight) - borderWidth - 1 + 'px';\n                    self.input.style.height = self.style.mobileEditInputHeight + 'px';\n                    self.input.style.width = self.width - borderWidth - 1 + 'px';\n                    return;\n                }\n                self.input.style.left = pos.left + cell.x + self.canvasOffsetLeft - s.left + 'px';\n                self.input.style.top = pos.top + cell.y - self.style.cellBorderWidth + self.canvasOffsetTop - s.top + 'px';\n                self.input.style.height = cell.height - borderWidth + 'px';\n                self.input.style.width = cell.width - self.style.cellPaddingLeft + 'px';\n                self.clipElement(self.input);\n            }\n        };\n        self.position = function (e, ignoreScrollOffset) {\n            var x = 0, y = 0, s = e, h, w;\n            while (e.offsetParent && e.nodeName !== 'CANVAS-DATAGRID') {\n                x += e.offsetLeft;\n                y += e.offsetTop;\n                h = e.offsetHeight;\n                w = e.offsetWidth;\n                e = e.offsetParent;\n            }\n            if (ignoreScrollOffset) {\n                return {left: x, top: y, height: h, width: w};\n            }\n            e = s;\n            s = self.scrollOffset(e);\n            return { left: x + s.left, top: y + s.top, height: h, width: w };\n        };\n        self.getLayerPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.clientX - rect.left,\n                    y: e.clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        /**\n         * Ends editing, optionally aborting the edit.\n         * @memberof canvasDatagrid\n         * @name endEdit\n         * @method\n         * @param {boolean} abort When true, abort the edit.\n         */\n        self.endEdit = function (abort) {\n            var cell = self.input.editCell,\n                y = cell.rowIndex;\n            function abortEdit() {\n                abort = true;\n            }\n            if (self.dispatchEvent('beforeendedit', {\n                    cell: cell,\n                    newValue: self.input.value,\n                    oldValue: cell.value,\n                    abort: abortEdit,\n                    input: self.input\n                })) { return false; }\n            if (self.input.value !== cell.value && !abort) {\n                self.changes[y] = self.changes[y] || {};\n                self.changes[y][cell.header.name] = self.input.value;\n                cell.data[cell.header.name] = self.input.value;\n                if (y === self.data.length) {\n                    if (self.dispatchEvent('newrow', {\n                            value: self.input.value,\n                            defaultValue: cell.value,\n                            aborted: abort,\n                            cell: cell,\n                            input: self.input\n                        })) { return false; }\n                    self.uId += 1;\n                    self.addRow(cell.data);\n                    self.createNewRowData();\n                }\n                self.draw(true);\n            }\n            document.body.removeChild(self.input);\n            self.intf.focus();\n            self.dispatchEvent('endedit', {\n                cell: cell,\n                value: self.input.value,\n                aborted: abort,\n                input: self.input\n            });\n            self.input = undefined;\n            return true;\n        };\n        /**\n         * Begins editing at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name beginEditAt\n         * @method\n         * @param {number} x The column index of the cell to edit.\n         * @param {number} y The row index of the cell to edit.\n         */\n        self.beginEditAt = function (x, y) {\n            if (!self.attributes.editable) { return; }\n            if (self.input) {\n                self.endEdit();\n            }\n            var cell = self.getVisibleCellByIndex(x, y),\n                s = self.getVisibleSchema(),\n                enumItems,\n                enu,\n                option,\n                valueInEnum;\n            if (!(cell && cell.header)) { return; }\n            //HACK for IE10, does not like literal enum\n            enu = cell.header['enum'];\n            if (self.dispatchEvent('beforebeginedit', {cell: cell})) { return false; }\n            self.scrollIntoView(x, y);\n            self.setActiveCell(x, y);\n            if (enu) {\n                self.input = document.createElement('select');\n            } else {\n                self.input = document.createElement(self.attributes.multiLine\n                    ? 'textarea' : 'input');\n            }\n            cell = self.getVisibleCellByIndex(x, y);\n            //HACK on mobile devices sometimes edit can begin without the cell being in view, I don't know how.\n            if (!cell) { return; }\n            if (enu) {\n                // add enums\n                if (typeof enu === 'function') {\n                    enumItems = enu.apply(self.intf, [{cell: cell}]);\n                } else if (Array.isArray(enu)) {\n                    enumItems = enu;\n                }\n                enumItems.forEach(function (e) {\n                    var i = document.createElement('option'),\n                        val,\n                        title;\n                    if (Array.isArray(e)) {\n                        val = e[0];\n                        title = e[1];\n                    } else {\n                        val = e;\n                        title = e;\n                    }\n                    if (val === cell.value) { valueInEnum = true; }\n                    i.value = val;\n                    i.innerHTML = title;\n                    self.input.appendChild(i);\n                });\n                if (!valueInEnum) {\n                    option = document.createElement('option');\n                    option.value = cell.value;\n                    option.innerHTML = cell.value;\n                    self.input.appendChild(option);\n                }\n                self.input.addEventListener('change', function () {\n                    self.endEdit();\n                    self.draw(true);\n                });\n            }\n            document.body.appendChild(self.input);\n            self.createInlineStyle(self.input, self.mobile ? 'canvas-datagrid-edit-mobile-input' : 'canvas-datagrid-edit-input');\n            self.input.style.position = 'absolute';\n            self.input.editCell = cell;\n            self.resizeEditInput();\n            self.input.style.zIndex = self.style.editCellZIndex;\n            self.input.style.fontSize = (parseInt(self.style.editCellFontSize, 10) * self.scale) + 'px';\n            self.input.value = cell.value;\n            self.input.focus();\n            self.input.addEventListener('click', self.stopPropagation);\n            self.input.addEventListener('dblclick', self.stopPropagation);\n            self.input.addEventListener('mouseup', self.stopPropagation);\n            self.input.addEventListener('mousedown', self.stopPropagation);\n            self.input.addEventListener('keydown', function (e) {\n                var nx = cell.columnIndex,\n                    ny = cell.rowIndex;\n                // esc\n                if (e.keyCode === 27) {\n                    self.endEdit(true);\n                    self.draw(true);\n                // enter\n                } else if (e.keyCode === 13\n                        && (!self.attributes.multiLine\n                            || (self.attributes.multiLine && e.shiftKey))) {\n                    self.endEdit();\n                    self.draw(true);\n                } else if (e.keyCode === 9) {\n                    e.preventDefault();\n                    if (!self.endEdit()) {\n                        return;\n                    }\n                    if (e.shiftKey) {\n                        nx -= 1;\n                    } else {\n                        nx += 1;\n                    }\n                    if (nx < 0) {\n                        nx = s.length - 1;\n                        ny -= 1;\n                    }\n                    if (nx > s.length - 1) {\n                        nx = 0;\n                        ny += 1;\n                    }\n                    if (ny < 0) {\n                        ny = self.data.length - 1;\n                    }\n                    if (ny > self.data.length - 1) {\n                        ny = 0;\n                    }\n                    self.scrollIntoView(nx, ny);\n                    self.beginEditAt(nx, ny);\n                }\n            });\n            self.dispatchEvent('beginedit', {cell: cell, input: self.input});\n        };\n        self.createInlineStyle = function (el, className) {\n            var css = {\n                'canvas-datagrid-context-menu-filter-input': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextFilterInputBackground,\n                    color: self.style.contextFilterInputColor,\n                    border: self.style.contextFilterInputBorder,\n                    borderRadius: self.style.contextFilterInputBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextFilterInputFontFamily,\n                    fontSize: self.style.contextFilterInputFontSize\n                },\n                'canvas-datagrid-context-menu-filter-button': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextFilterButtonBorder,\n                    borderRadius: self.style.contextFilterButtonBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFilterButtonFontFamily,\n                    fontSize: self.style.contextMenuFilterButtonFontSize\n                },\n                'canvas-datagrid-context-child-arrow': {\n                    cssFloat: 'right',\n                    color: self.style.childContextMenuArrowColor,\n                    fontSize: self.style.contextMenuChildArrowFontSize,\n                    fontFamily: self.style.contextMenuFontFamily,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-autocomplete': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    position: 'absolute',\n                    zIndex: 9999,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-autocomplete-item': {\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor\n                },\n                'canvas-datagrid-autocomplete-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-canvas': {\n                    position: 'absolute',\n                    zIndex: '-1'\n                },\n                'canvas-datagrid': {\n                    display: 'block'\n                },\n                'canvas-datagrid-control-input': {\n                    position: 'fixed',\n                    top: '-5px',\n                    left: '-5px',\n                    border: 'none',\n                    opacity: '0',\n                    cursor: 'pointer',\n                    width: '1px',\n                    height: '1px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize\n                },\n                'canvas-datagrid-edit-mobile-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 0',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.mobileEditFontFamily,\n                    fontSize: self.style.mobileEditFontSize,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-edit-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 ' + self.style.editCellPaddingLeft + 'px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.editCellFontFamily,\n                    fontSize: self.style.editCellFontSize,\n                    boxShadow: self.style.editCellBoxShadow,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-context-menu-item-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-context-menu-label': {\n                    margin: self.style.contextMenuLabelMargin,\n                    display: self.style.contextMenuLabelDisplay,\n                    minWidth: self.style.contextMenuLabelMinWidth,\n                    maxWidth: self.style.contextMenuLabelMaxWidth\n                },\n                'canvas-datagrid-context-menu-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-context-menu': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-invalid-search-regExp': {\n                    background: self.style.contextMenuFilterInvalidExpresion\n                }\n            };\n            if (css[className]) {\n                Object.keys(css[className]).map(function (prop) {\n                    el.style[prop] = css[className][prop];\n                });\n            }\n            return;\n        };\n        self.appendTo = function (e) {\n            self.parentNode = e;\n            self.setDom();\n        };\n        self.setDom = function () {\n            if (self.isChildGrid) {\n                self.parentGrid = self.parentNode.parentGrid;\n                self.ctx = self.parentGrid.context;\n                self.canvas = self.parentGrid.canvas;\n                self.controlInput = self.parentGrid.controlInput;\n                self.eventParent = self.canvas;\n            } else {\n                self.controlInput = self.controlInput || document.createElement('input');\n                self.controlInput.onblur = self.intf.blur;\n                self.createInlineStyle(self.controlInput, 'canvas-datagrid-control-input');\n                self.isChildGrid = false;\n                self.parentDOMNode = self.parentNode;\n                self.parentIsCanvas = /^canvas$/i.test(self.parentDOMNode.tagName);\n                if (self.parentIsCanvas) {\n                    self.canvas = self.parentDOMNode;\n                    self.parentDOMNode.appendChild(self.controlInput);\n                } else {\n                    self.canvas = document.createElement('canvas');\n                    self.parentDOMNode.appendChild(self.canvas);\n                    self.parentDOMNode.appendChild(self.controlInput);\n                }\n                self.createInlineStyle(self.canvas, 'canvas-datagrid');\n                self.ctx = self.canvas.getContext('2d');\n                self.ctx.textBaseline = 'alphabetic';\n                self.eventParent = self.canvas;\n            }\n            self.parentNodeStyle = self.canvas.style;\n            self.controlInput.setAttribute('readonly', true);\n            self.controlInput.addEventListener('blur', function (e) {\n                if (e.target !== self.canvas) {\n                    self.hasFocus = false;\n                }\n            });\n            self.eventParent.addEventListener('scroll', self.resize, false);\n            self.eventParent.addEventListener('touchstart', self.touchstart, false);\n            self.eventParent.addEventListener('mouseup', self.mouseup, false);\n            self.eventParent.addEventListener('mousedown', self.mousedown, false);\n            self.eventParent.addEventListener('dblclick', self.dblclick, false);\n            self.eventParent.addEventListener('click', self.click, false);\n            self.eventParent.addEventListener('mousemove', self.mousemove);\n            self.eventParent.addEventListener('wheel', self.scrollWheel, false);\n            self.canvas.addEventListener('contextmenu', self.contextmenuEvent, false);\n            self.controlInput.addEventListener('copy', self.copy);\n            self.controlInput.addEventListener('cut', self.cut);\n            self.controlInput.addEventListener('paste', self.paste);\n            self.controlInput.addEventListener('keypress', self.keypress, false);\n            self.controlInput.addEventListener('keyup', self.keyup, false);\n            self.controlInput.addEventListener('keydown', self.keydown, false);\n            window.addEventListener('resize', self.resize);\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/dom.js\n// module id = 8\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        /**\n         * Converts a integer into a letter A - ZZZZZ...\n         * @memberof canvasDatagrid\n         * @name integerToAlpha\n         * @method\n         * @param {column} n The number to convert.\n         */\n        self.integerToAlpha = function (n) {\n            var ordA = 'a'.charCodeAt(0),\n                ordZ = 'z'.charCodeAt(0),\n                len = ordZ - ordA + 1,\n                s = '';\n            while (n >= 0) {\n                s = String.fromCharCode(n % len + ordA) + s;\n                n = Math.floor(n / len) - 1;\n            }\n            return s;\n        };\n        /**\n         * Inserts a new column before the specified index into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name insertColumn\n         * @method\n         * @param {column} c The column to insert into the schema.\n         * @param {number} index The index of the column to insert before.\n         */\n        self.insertColumn = function (c, index) {\n            var s = self.getSchema();\n            if (s.length < index) {\n                throw new Error('Index is beyond the length of the schema.');\n            }\n            self.validateColumn(c, s);\n            s.splice(index, 0, c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a column from the schema at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteColumn\n         * @tutorial schema\n         * @method\n         * @param {number} index The index of the column to delete.\n         */\n        self.deleteColumn = function (index) {\n            var s = self.getSchema();\n            // remove data matching this column name from data\n            self.data.forEach(function (row) {\n                delete row[s[index].name];\n            });\n            s.splice(index, 1);\n            self.intf.schema = s;\n        };\n        /**\n         * Adds a new column into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name addColumn\n         * @method\n         * @param {column} c The column to add to the schema.\n         */\n        self.addColumn = function (c) {\n            var s = self.getSchema();\n            self.validateColumn(c, s);\n            s.push(c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a row from the dataset at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteRow\n         * @method\n         * @param {number} index The index of the row to delete.\n         */\n        self.deleteRow = function (index) {\n            self.originalData.splice(index, 1);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Inserts a new row into the dataset before the specified index.\n         * @memberof canvasDatagrid\n         * @name insertRow\n         * @method\n         * @param {object} d data.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertRow = function (d, index) {\n            if (self.originalData.length < index) {\n                throw new Error('Index is beyond the length of the dataset.');\n            }\n            self.originalData.splice(index, 0, d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[index], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Adds a new row into the dataset.\n         * @memberof canvasDatagrid\n         * @name addRow\n         * @method\n         * @param {object} d data.\n         */\n        self.addRow = function (d) {\n            self.originalData.push(d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[self.originalData.length - 1], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Sets the height of a given row by index number.\n         * @memberof canvasDatagrid\n         * @name setRowHeight\n         * @method\n         * @param {number} rowIndex The index of the row to set.\n         * @param {number} height Height to set the row to.\n         */\n        self.setRowHeight = function (rowIndex, height) {\n            self.sizes.rows[self.data[rowIndex][self.uniqueId]] = height;\n            self.draw(true);\n        };\n        /**\n         * Sets the width of a given column by index number.\n         * @memberof canvasDatagrid\n         * @name setColumnWidth\n         * @method\n         * @param {number} colIndex The index of the column to set.\n         * @param {number} width Width to set the column to.\n         */\n        self.setColumnWidth = function (colIndex, width) {\n            var s = self.getSchema();\n            self.sizes.columns[s[colIndex][self.uniqueId]] = width;\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the width of the columns due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetColumnWidths\n         * @tutorial schema\n         * @method\n         */\n        self.resetColumnWidths = function () {\n            self.sizes.columns = {};\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the height of the rows due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetRowHeights\n         * @tutorial schema\n         * @method\n         */\n        self.resetRowHeights = function () {\n            self.sizes.rows = {};\n            self.draw(true);\n        };\n        /**\n         * Sets the value of the filter.\n         * @memberof canvasDatagrid\n         * @name setFilter\n         * @method\n         * @param {string} column Name of the column to filter.\n         * @param {string} value The value to filter for.\n         */\n        self.setFilter = function (column, value) {\n            function applyFilter() {\n                self.refreshFromOrigialData();\n                Object.keys(self.columnFilters).forEach(function (filter) {\n                    var header = self.getHeaderByName(column);\n                    if (!header) {\n                        return;\n                    }\n                    self.currentFilter = header.filter || self.filter(column.type || 'string');\n                    self.data = self.data.filter(function (row) {\n                        return self.currentFilter(row[filter], self.columnFilters[filter]);\n                    });\n                });\n                self.resize();\n                self.draw(true);\n            }\n            if (column === undefined && value === undefined) {\n                self.columnFilters = {};\n                return applyFilter();\n            }\n            if (column && (value === '' || value === undefined)) {\n                delete self.columnFilters[column];\n            } else {\n                self.columnFilters[column] = value;\n            }\n            applyFilter();\n        };\n        /**\n         * Returns the number of pixels to scroll down to line up with row rowIndex.\n         * @memberof canvasDatagrid\n         * @name findRowScrollTop\n         * @method\n         * @param {number} rowIndex The row index of the row to scroll find.\n         */\n        self.findRowScrollTop = function (rowIndex) {\n            var top = 0, x = 0, l = self.data.length,\n                bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                cellBorder = self.style.cellBorderWidth * bm;\n            if (!self.attributes.showNewRow) {\n                l -= 1;\n            }\n            if (rowIndex > l) {\n                throw new Error('Impossible row index');\n            }\n            while (x < rowIndex) {\n                top += (self.sizes.rows[self.data[x][self.uniqueId]] || self.style.cellHeight) + cellBorder;\n                x += 1;\n            }\n            //TODO: This is not super accurate, causes pageUp/Dn to not move around right\n            return top - (self.sizes.rows[self.data[rowIndex][self.uniqueId]] || self.style.cellHeight);\n        };\n        /**\n         * Returns the number of pixels to scroll to the left to line up with column columnIndex.\n         * @memberof canvasDatagrid\n         * @name findColumnScrollLeft\n         * @method\n         * @param {number} columnIndex The column index of the column to find.\n         */\n        self.findColumnScrollLeft = function (columnIndex) {\n            var left = 0, y = 0, s = self.getSchema(), l = s.length - 1;\n            if (columnIndex > l) {\n                throw new Error('Impossible column index');\n            }\n            while (y < columnIndex) {\n                left += self.sizes.columns[s[y][self.uniqueId]] || s[y].width || self.style.cellWidth;\n                y += 1;\n            }\n            return left;\n        };\n        /**\n         * Scrolls the cell at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name gotoCell\n         * @method\n         * @param {number} x The column index of the cell to scroll to.\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoCell = function (x, y) {\n            if (x !== undefined) {\n                self.scrollBox.scrollLeft = self.findColumnScrollLeft(x);\n            }\n            if (y !== undefined) {\n                self.scrollBox.scrollTop = self.findRowScrollTop(y);\n            }\n        };\n        /**\n         * Scrolls the row y.\n         * @memberof canvasDatagrid\n         * @name gotoRow\n         * @method\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoRow = function (y) {\n            self.gotoCell(0, y);\n        };\n        /**\n         * Scrolls the cell at cell x, row y into view if it is not already.\n         * @memberof canvasDatagrid\n         * @name scrollIntoView\n         * @method\n         * @param {number} x The column index of the cell to scroll into view.\n         * @param {number} y The row index of the cell to scroll into view.\n         */\n        self.scrollIntoView = function (x, y) {\n            if (self.visibleCells.filter(function (cell) {\n                    return (cell.rowIndex === y || y === undefined)\n                        && (cell.columnIndex === x || x === undefined)\n                        && cell.x > 0\n                        && cell.y > 0\n                        && cell.x + cell.width < self.width\n                        && cell.y + cell.height < self.height;\n                }).length === 0) {\n                self.gotoCell(x, y);\n            }\n        };\n        /**\n         * Sets the active cell. Requires redrawing.\n         * @memberof canvasDatagrid\n         * @name setActiveCell\n         * @method\n         * @param {number} x The column index of the cell to set active.\n         * @param {number} y The row index of the cell to set active.\n         */\n        self.setActiveCell = function (x, y) {\n            self.activeCell = {\n                rowIndex: y,\n                columnIndex: x\n            };\n        };\n        /**\n         * Removes the selection.\n         * @memberof canvasDatagrid\n         * @name selectNone\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectNone = function (dontDraw) {\n            self.selections = [];\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Selects every visible cell.\n         * @memberof canvasDatagrid\n         * @name selectAll\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectAll = function (dontDraw) {\n            self.selectArea({\n                top: 0,\n                left: 0,\n                right: self.getVisibleSchema().length - 1,\n                bottom: self.data.length - 1\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Returns true if the selected columnIndex is selected on every row.\n         * @memberof canvasDatagrid\n         * @name isColumnSelected\n         * @method\n         * @param {number} columnIndex The column index to check.\n         */\n        self.isColumnSelected = function (columnIndex) {\n            var colIsSelected = true;\n            self.data.forEach(function (row, rowIndex) {\n                if (!self.selections[rowIndex] || self.selections[rowIndex].indexOf(self.orders.columns[columnIndex]) === -1) {\n                    colIsSelected = false;\n                }\n            });\n            return colIsSelected;\n        };\n        /**\n         * Runs the defined method on each selected cell.\n         * @memberof canvasDatagrid\n         * @name forEachSelectedCell\n         * @method\n         * @param {number} fn The function to execute.  The signature of the function is: (data, rowIndex, columnName).\n         * @param {number} expandToRow When true the data in the array is expanded to the entire row.\n         */\n        self.forEachSelectedCell = function (fn, expandToRow) {\n            var d = [], s = expandToRow ? self.getSchema() : self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    if (col === -1 || !s[col]) { return; }\n                    fn(self.data, index, s[col].name);\n                });\n            });\n        };\n        /**\n         * Selects a column.\n         * @memberof canvasDatagrid\n         * @name selectColumn\n         * @method\n         * @param {number} columnIndex The column index to select.\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the column.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the column.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectColumn = function (columnIndex, ctrl, shift, supressEvent) {\n            var s, e, x;\n            function addCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) === -1) {\n                        self.selections[rowIndex].push(i);\n                    }\n                });\n            }\n            function removeCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) !== -1) {\n                        self.selections[rowIndex].splice(self.selections[rowIndex].indexOf(i), 1);\n                    }\n                });\n            }\n            if (shift) {\n                if (!self.activeCell) { return; }\n                s = Math.min(self.activeCell.columnIndex, columnIndex);\n                e = Math.max(self.activeCell.columnIndex, columnIndex);\n                for (x = s; e > x; x += 1) {\n                    addCol(x);\n                }\n            }\n            if (!ctrl && !shift) {\n                self.selections = [];\n                self.activeCell.columnIndex = columnIndex;\n                self.activeCell.rowIndex = self.scrollIndexTop;\n            }\n            if (ctrl && self.isColumnSelected(columnIndex)) {\n                removeCol(columnIndex);\n            } else {\n                addCol(columnIndex);\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.getSelectionBounds()\n            });\n        };\n        /**\n         * Selects a row.\n         * @memberof canvasDatagrid\n         * @name selectRow\n         * @method\n         * @param {number} rowIndex The row index to select.\n         * @param {boolean} ctrl When true, behaves as if you were holding control/command when you clicked the row.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the row.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectRow = function (rowIndex, ctrl, shift, supressEvent) {\n            var x, st, en, s = self.getVisibleSchema();\n            function addRow(ri) {\n                self.selections[ri] = [];\n                self.selections[ri].push(-1);\n                s.forEach(function (col, index) {\n                    self.selections[ri].push(index);\n                });\n            }\n            if (self.dragAddToSelection === false || self.dragObject === undefined) {\n                if (self.selections[rowIndex] && self.selections[rowIndex].length - 1 === s.length) {\n                    if (ctrl) {\n                        self.selections[rowIndex] = [];\n                        return;\n                    }\n                }\n            }\n            if (self.dragAddToSelection === true || self.dragObject === undefined) {\n                if (shift && self.dragObject === undefined) {\n                    if (!self.activeCell) { return; }\n                    st = Math.min(self.activeCell.rowIndex, rowIndex);\n                    en = Math.max(self.activeCell.rowIndex, rowIndex);\n                    for (x = st; en >= x; x += 1) {\n                        addRow(x);\n                    }\n                } else {\n                    addRow(rowIndex);\n                }\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Collapse a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name collapseTree\n         * @method\n         * @param {number} index The index of the row to collapse.\n         */\n        self.collapseTree = function (rowIndex) {\n            var rowId = self.data[rowIndex][self.uniqueId];\n            self.dispatchEvent('collapsetree', {\n                childGrid: self.childGrids[rowId],\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId].blur();\n            self.openChildren[rowId].dispose();\n            delete self.openChildren[rowId];\n            delete self.sizes.trees[rowId];\n            delete self.childGrids[rowId];\n            self.dispatchEvent('resizerow', {\n                cellHeight: self.style.cellHeight\n            });\n            self.resize(true);\n            self.draw(true);\n        };\n        /**\n         * Expands a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name expandTree\n         * @method\n         * @param {number} index The index of the row to expand.\n         */\n        self.expandTree = function (rowIndex) {\n            var trArgs = self.args.treeGridAttributes || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth,\n                rowId = self.data[rowIndex][self.uniqueId],\n                h = self.sizes.trees[rowId] || self.style.treeGridHeight,\n                treeGrid;\n            if (!self.childGrids[rowId]) {\n                trArgs.debug = self.attributes.debug;\n                trArgs.name = self.attributes.saveAppearance ? self.attributes.name + 'tree' + rowId : undefined;\n                trArgs.style = trArgs.style || self.style;\n                trArgs.parentNode = {\n                    parentGrid: self.intf,\n                    nodeType: 'canvas-datagrid-tree',\n                    offsetHeight: h,\n                    offsetWidth: self.width - rowHeaderCellWidth,\n                    header: { width: self.width - rowHeaderCellWidth },\n                    offsetLeft: rowHeaderCellWidth,\n                    offsetTop: columnHeaderCellHeight,\n                    offsetParent: self.intf.parentNode,\n                    parentNode: self.intf.parentNode,\n                    style: 'tree',\n                    data: self.data[rowIndex]\n                };\n                treeGrid = self.createGrid(trArgs);\n                self.childGrids[rowId] = treeGrid;\n            }\n            treeGrid = self.childGrids[rowId];\n            treeGrid.visible = true;\n            self.dispatchEvent('expandtree', {\n                treeGrid: treeGrid,\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId] = treeGrid;\n            self.sizes.trees[rowId] = h;\n            self.dispatchEvent('resizerow', {height: self.style.cellHeight});\n            self.resize(true);\n        };\n        /**\n         * Toggles tree grid open and close by row index.\n         * @memberof canvasDatagrid\n         * @name toggleTree\n         * @method\n         * @param {number} index The index of the row to toggle.\n         */\n        self.toggleTree = function (rowIndex) {\n            var i = self.openChildren[self.data[rowIndex][self.uniqueId]];\n            if (i) {\n                return self.collapseTree(rowIndex);\n            }\n            self.expandTree(rowIndex);\n        };\n        /**\n         * Returns a header from the schema by name.\n         * @memberof canvasDatagrid\n         * @name getHeaderByName\n         * @tutorial schema\n         * @method\n         * @returns {header} header with the selected name, or undefined.\n         * @param {string} name The name of the column to resize.\n         */\n        self.getHeaderByName = function (name) {\n            var x, i = self.getSchema();\n            for (x = 0; x < i.length; x += 1) {\n                if (i[x].name === name) {\n                    return i[x];\n                }\n            }\n        };\n        /**\n         * Resizes a column to fit the longest value in the column. Call without a value to resize all columns.\n         * Warning, can be slow on very large record sets (1m records ~3-5 seconds on an i7).\n         * @memberof canvasDatagrid\n         * @name fitColumnToValues\n         * @method\n         * @param {string} name The name of the column to resize.\n         */\n        self.fitColumnToValues = function (name, internal) {\n            if (!self.canvas) { return; }\n            self.sizes.columns[name === 'cornerCell' ? name : self.getHeaderByName(name)[self.uniqueId]]\n                = self.findColumnMaxTextLength(name);\n            if (!internal) {\n                self.resize();\n                self.draw(true);\n            }\n        };\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @overload\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {number} columnIndex The column index of the cell to check.\n         * @param {number} rowIndex The row index of the cell to check.\n         */\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {cell} cell The cell to check for.  Alternatively you can pass an object { x: <x-pixel-value>, y: <y-pixel-value> }.\n         */\n        self.isCellVisible = function (cell, rowIndex) {\n            // overload\n            if (rowIndex !== undefined) {\n                return self.visibleCells.filter(function (c) {\n                    return c.columnIndex === cell && c.rowIndex === rowIndex;\n                }).length > 0;\n            }\n            var x, l = self.visibleCells.length;\n            for (x = 0; x < l; x += 1) {\n                if (cell.x === self.visibleCells[x].x && cell.y === self.visibleCells[x].y) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n         * Sets the order of the data.\n         * @memberof canvasDatagrid\n         * @name order\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} columnName Name of the column to be sorted.\n         * @param {string} direction `asc` for ascending or `desc` for descending.\n         * @param {function} [sortFunction] When defined, override the default sorting method defined in the column's schema and use this one.\n         * @param {bool} [dontSetStorageData] Don't store this setting for future use.\n         */\n        self.order = function (columnName, direction, sortFunction, dontSetStorageData) {\n            var f,\n                c = self.getSchema().filter(function (col) {\n                    return col.name === columnName;\n                });\n            if (self.dispatchEvent('beforesortcolumn', {name: columnName, direction: direction})) { return; }\n            self.orderBy = columnName;\n            if (c.length === 0) {\n                throw new Error('Cannot sort.  No such column name');\n            }\n            f = sortFunction || self.sorters[c[0].type];\n            if (!f && c[0].type !== undefined) {\n                console.warn('Cannot sort type \"%s\" falling back to string sort.', c[0].type);\n            }\n            self.data = self.data.sort(typeof f === 'function' ? f(columnName, direction) : self.sorters.string);\n            self.dispatchEvent('sortcolumn', {name: columnName, direction: direction});\n            self.draw(true);\n            if (dontSetStorageData) { return; }\n            self.setStorageData();\n        };\n        self.isInGrid = function (e) {\n            if (e.x < 0\n                    || e.x > self.width\n                    || e.y < 0\n                    || e.y > self.height) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Moves the current selection relative to the its current position.  Note: this method does not move the selected data, just the selection itself.\n         * @memberof canvasDatagrid\n         * @name moveSelection\n         * @method\n         * @param {number} offsetX The number of columns to offset the selection.\n         * @param {number} offsetY The number of rows to offset the selection.\n         */\n        self.moveSelection = function (offsetX, offsetY) {\n            var sel = [];\n            self.selections.forEach(function (row, rowIndex) {\n                sel[rowIndex + offsetY] = [];\n                row.forEach(function (colIndex) {\n                    sel[rowIndex + offsetY].push(colIndex + offsetX);\n                });\n            });\n            self.selections = sel;\n        };\n        /**\n         * Moves data in the provided selection to another position in the grid.  Moving data off the edge of the schema (columns/x) will truncate data.\n         * @memberof canvasDatagrid\n         * @name moveTo\n         * @method\n         * @param {array} sel 2D array representing selected rows and columns.  `canvasDatagrid.selections` is in this format and can be used here.\n         * @param {number} x The column index to start inserting the selection at.\n         * @param {number} y The row index to start inserting the selection at.\n         */\n        self.moveTo = function (sel, x, y) {\n            var d = self.getSelectedData(),\n                s = self.getVisibleSchema(),\n                l = sel.length,\n                xi,\n                yi = y - 1;\n            sel.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) { return; }\n                row.forEach(function (col) {\n                    if (!s[col]) { return; }\n                    self.data[index][s[col].name] = null;\n                });\n            });\n            sel.forEach(function (row, index) {\n                yi += 1;\n                xi = x - 1;\n                row.forEach(function (col, cidx) {\n                    xi += 1;\n                    if (col === -1\n                            || !s[xi]\n                            || !s[col]\n                            || self.data.length - 1 < yi\n                            || yi < 0) { return; }\n                    self.data[yi][s[xi].name] = d[index][s[col].name];\n                });\n            });\n        };\n        /**\n         * Checks if a given column is visible.\n         * @memberof canvasDatagrid\n         * @name isColumnVisible\n         * @method\n         * @returns {boolean} When true, the column is visible.\n         * @param {number} columnIndex Column index.\n         */\n        self.isColumnVisible = function (columnIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === columnIndex;\n            }).length > 0;\n        };\n        /**\n         * Checks if a given row is visible.\n         * @memberof canvasDatagrid\n         * @name isRowVisible\n         * @method\n         * @returns {boolean} When true, the row is visible.\n         * @param {number} rowIndex Row index.\n         */\n        self.isRowVisible = function (rowIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.rowIndex === rowIndex;\n            }).length > 0;\n        };\n        /**\n         * Gets the cell at columnIndex and rowIndex.\n         * @memberof canvasDatagrid\n         * @name getVisibleCellByIndex\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Column index.\n         * @param {number} y Row index.\n         */\n        self.getVisibleCellByIndex = function (x, y) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === x && c.rowIndex === y;\n            })[0];\n        };\n        /**\n         * Gets the cell at grid pixel coordinate x and y.  Author's note.  This function ties drawing and events together.  This is a very complex function and is core to the component.\n         * @memberof canvasDatagrid\n         * @name getCellAt\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Number of pixels from the left.\n         * @param {number} y Number of pixels from the top.\n         */\n        self.getCellAt = function (x, y, useTouchScrollZones) {\n            function getBorder(entitiy) {\n                if (entitiy.x + entitiy.width - (self.attributes.borderResizeZone * 0.4) < x && entitiy.x + entitiy.width + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'r';\n                }\n                if (entitiy.x - (self.attributes.borderResizeZone * 0.4) < x && entitiy.x + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'l';\n                }\n                if (entitiy.y + entitiy.height - (self.attributes.borderResizeZone * 0.4) < y && entitiy.y + entitiy.height + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 'b';\n                }\n                if (entitiy.y - (self.attributes.borderResizeZone * 0.4) < y && entitiy.y + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 't';\n                }\n            }\n            if (!self.visibleCells) { return; }\n            var border,\n                tsz = useTouchScrollZones ? self.attributes.touchScrollZone : 0,\n                moveMode = self.attributes.borderDragBehavior === 'move',\n                i,\n                l = self.visibleCells.length,\n                moveBorder,\n                xBorderBehavior = moveMode ? self.cursorGrab : 'ew-resize',\n                yBorderBehavior = moveMode ? self.cursorGrab : 'ns-resize',\n                cell,\n                entitiy;\n            if (!self.visibleCells || !self.visibleCells.length) { return; }\n            self.hasFocus = true;\n            if (!(y < self.height\n                && y > 0\n                && x < self.width\n                && x > 0)) {\n                self.hasFocus = false;\n                return {\n                    dragContext: 'inherit',\n                    context: 'inherit'\n                };\n            }\n            for (i = 0; i < l; i += 1) {\n                cell = self.visibleCells[i];\n                // interactive dimensions of the cell.  used for touch \"over size\" zones\n                entitiy = {\n                    x: cell.x,\n                    y: cell.y,\n                    height: cell.height,\n                    width: cell.width\n                };\n                if (useTouchScrollZones && /(vertical|horizontal)-scroll-/.test(cell.style)) {\n                    entitiy.x -= tsz;\n                    entitiy.y -= tsz;\n                    entitiy.height += tsz;\n                    entitiy.width += tsz;\n                }\n                if (entitiy.x - self.style.cellBorderWidth < x\n                        && entitiy.x + entitiy.width + self.style.cellBorderWidth > x\n                        && entitiy.y - self.style.cellBorderWidth < y\n                        && entitiy.y + entitiy.height + self.style.cellBorderWidth > y) {\n                    if (/frozen-row-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'row-resize';\n                        return cell;\n                    }\n                    if (/frozen-column-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'col-resize';\n                        return cell;\n                    }\n                    if (/selection-handle-/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'crosshair';\n                        return cell;\n                    }\n                    if (/vertical-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'vertical-scroll-box';\n                        cell.context = 'vertical-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isVerticalScrollBar = true;\n                        if (y > self.scrollBox.box.v.y + self.scrollBox.scrollBoxHeight) {\n                            cell.dragContext = 'vertical-scroll-bottom';\n                            cell.context = 'vertical-scroll-bottom';\n                        } else if (y < self.scrollBox.box.v.y) {\n                            cell.dragContext = 'vertical-scroll-top';\n                            cell.context = 'vertical-scroll-top';\n                        }\n                        self.cursor = 'default';\n                        return cell;\n                    }\n                    if (/horizontal-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'horizontal-scroll-box';\n                        cell.context = 'horizontal-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isHorizontalScrollBar = true;\n                        if (x > self.scrollBox.box.h.x + self.scrollBox.scrollBoxWidth) {\n                            cell.dragContext = 'horizontal-scroll-right';\n                            cell.context = 'horizontal-scroll-right';\n                        } else if (x < self.scrollBox.box.h.x) {\n                            cell.dragContext = 'horizontal-scroll-left';\n                            cell.context = 'horizontal-scroll-left';\n                        }\n                        self.cursor = 'default';\n                        return cell;\n                    }\n                    border = getBorder(entitiy);\n                    // check if the border of this cell is the border of the selection and if so show move cursor in move mode\n                    moveBorder = moveMode && cell.selectionBorder && cell.selectionBorder.indexOf(border) !== -1;\n                    if (['l', 'r'].indexOf(border) !== -1\n                            && (self.attributes.allowColumnResize || moveBorder)\n                            && ((self.attributes.allowColumnResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && ((self.attributes.allowRowHeaderResize && (cell.isRowHeader || cell.isCorner)) || !(cell.isRowHeader && cell.isCorner))) {\n                        if (((cell.isColumnHeader || cell.isCorner) || (self.attributes.allowColumnResizeFromCell && cell.isNormal)) && border === 'r') {\n                            cell.context = 'ew-resize';\n                            cell.dragContext = 'ew-resize';\n                            return cell;\n                        }\n                        if (!(cell.isColumnHeader || cell.isCorner) && moveBorder) {\n                            cell.context = xBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (['t', 'b'].indexOf(border) !== -1\n                            && cell.rowIndex > -1\n                            && (self.attributes.allowRowResize || moveBorder)\n                            && ((self.attributes.allowRowResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && !cell.isColumnHeader) {\n                        if (((cell.isRowHeader || cell.isCorner) || (self.attributes.allowRowResizeFromCell && cell.isNormal)) && border === 'b') {\n                            cell.context = 'ns-resize';\n                            cell.dragContext = 'ns-resize';\n                            return cell;\n                        }\n                        if (!(cell.isRowHeader || cell.isCorner) && moveBorder) {\n                            cell.context = yBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (cell.style === 'columnHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'column-reorder';\n                        return cell;\n                    }\n                    if (cell.style === 'rowHeaderCell') {\n                        if ((self.attributes.rowGrabZoneSize + (cell.y - self.style.cellBorderWidth) < y)\n                                || !self.attributes.allowRowReordering) {\n                            cell.dragContext = 'cell';\n                            cell.context = 'cell';\n                        } else {\n                            cell.context = self.cursorGrab;\n                            cell.dragContext = 'row-reorder';\n                        }\n                        return cell;\n                    }\n                    if (cell.isGrid) {\n                        self.hasFocus = false;\n                        cell.dragContext = 'cell-grid';\n                        cell.context = 'cell-grid';\n                        return cell;\n                    }\n                    if (cell.style === 'tree-grid') {\n                        self.hasFocus = false;\n                        cell.dragContext = 'tree';\n                        cell.context = 'tree';\n                        return cell;\n                    }\n                    cell.dragContext = 'cell';\n                    cell.context = 'cell';\n                    return cell;\n                }\n            }\n            self.hasFocus = true;\n            self.cursor = 'default';\n            return {\n                dragContext: 'background',\n                context: 'background',\n                style: 'background',\n                isBackground: true\n            };\n        };\n        /**\n         * Gets the bounds of current selection. \n         * @returns {rect} selection.\n         * @memberof canvasDatagrid\n         * @name getSelectionBounds\n         * @method\n         */\n        self.getSelectionBounds = function () {\n            var low = {x: Infinity, y: Infinity},\n                high = {x: -Infinity, y: -Infinity};\n            self.data.forEach(function (row, rowIndex) {\n                var maxCol, minCol;\n                if (self.selections[rowIndex] && self.selections[rowIndex].length) {\n                    low.y = rowIndex < low.y ? rowIndex : low.y;\n                    high.y = rowIndex > high.y ? rowIndex : high.y;\n                    maxCol = Math.max.apply(null, self.selections[rowIndex]);\n                    minCol = Math.min.apply(null, self.selections[rowIndex]);\n                    low.x = minCol < low.x ? minCol : low.x;\n                    high.x = maxCol > high.x ? maxCol : high.x;\n                }\n            });\n            return {\n                top: low.y,\n                left: low.x,\n                bottom: high.y,\n                right: high.x\n            };\n        };\n        /**\n         * Returns an auto generated schema based on data structure.\n         * @memberof canvasDatagrid\n         * @name getSchemaFromData\n         * @method\n         * @tutorial schema\n         * @returns {schema} schema A schema based on the first item in the data array.\n         */\n        self.getSchemaFromData = function (d) {\n            d = d || self.data;\n            return Object.keys(d[0] || {' ': ''}).map(function mapEachSchemaColumn(key, index) {\n                var type = self.getBestGuessDataType(key, d),\n                    i = {\n                        primaryKey: self.uniqueId === key,\n                        name: key,\n                        title: isNaN(parseInt(key, 10)) ? key : self.integerToAlpha(key).toUpperCase(),\n                        index: index,\n                        type: type,\n                        filter: self.filter(type)\n                    };\n                if (key === self.uniqueId) {\n                    i.hidden = true;\n                }\n                if (self.storedSettings\n                        && self.storedSettings.visibility\n                        && self.storedSettings.visibility[i.name] !== undefined) {\n                    i.hidden = !self.storedSettings.visibility[i.name];\n                }\n                i[self.uniqueId] = self.getSchemaNameHash(key);\n                return i;\n            });\n        };\n        /**\n         * Clears the change log grid.changes that keeps track of changes to the data set.\n         * This does not undo changes or alter data it is simply a convince array to keep\n         * track of changes made to the data since last this method was called.\n         * @memberof canvasDatagrid\n         * @name clearChangeLog\n         * @method\n         */\n        self.clearChangeLog = function () {\n            self.changes = [];\n        };\n        /**\n         * Selects an area of the grid.\n         * @memberof canvasDatagrid\n         * @name selectArea\n         * @method\n         * @param {rect} bounds A rect object representing the selected values.\n         */\n        self.selectArea = function (bounds, ctrl) {\n            self.selectionBounds = bounds || self.selectionBounds;\n            var x, y, s = self.getSchema();\n            if (!ctrl) {\n                self.selections = [];\n            }\n            if (self.selectionBounds.top < -1\n                    || self.selectionBounds.bottom > self.data.length\n                    || self.selectionBounds.left < -1\n                    || self.selectionBounds.right > s.length) {\n                throw new Error('Impossible selection area');\n            }\n            for (x = self.selectionBounds.top; x <= self.selectionBounds.bottom; x += 1) {\n                self.selections[x] = [];\n                for (y = self.selectionBounds.left; y <= self.selectionBounds.right; y += 1) {\n                    if (self.selections[x].indexOf(y) === -1) {\n                        self.selections[x].push(y);\n                    }\n                }\n            }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Returns the maximum text width for a given column by column name.\n         * @memberof canvasDatagrid\n         * @name findColumnMaxTextLength\n         * @method\n         * @returns {number} The number of pixels wide the maximum width value in the selected column.\n         * @param {string} name The name of the column to calculate the value's width of.\n         */\n        self.findColumnMaxTextLength = function (name) {\n            var m = -Infinity;\n            if (name === 'cornerCell') {\n                self.ctx.font = self.style.rowHeaderCellFont;\n                return self.ctx.measureText((self.data.length + (self.attributes.showNewRow ? 1 : 0)).toString()).width\n                    + self.style.autosizePadding + self.style.autosizeHeaderCellPadding\n                    + self.style.rowHeaderCellPaddingRight\n                    + self.style.rowHeaderCellPaddingLeft\n                    + (self.attributes.tree ? self.style.treeArrowWidth\n                        + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight : 0);\n            }\n            self.getSchema().forEach(function (col) {\n                if (col.name !== name) { return; }\n                self.ctx.font = self.style.columnHeaderCellFont;\n                var t = self.ctx.measureText(col.title || col.name).width\n                    + self.style.headerCellPaddingRight\n                    + self.style.headerCellPaddingLeft;\n                m = t > m ? t : m;\n            });\n            self.data.forEach(function (row) {\n                self.ctx.font = self.style.cellFont;\n                var t = self.ctx.measureText(row[name]).width\n                    + self.style.cellPaddingRight\n                    + self.style.cellPaddingLeft + self.style.cellAutoResizePadding;\n                m = t > m ? t : m;\n            });\n            return m;\n        };\n        /**\n         * Gets the total width of all header columns.\n         * @memberof canvasDatagrid\n         * @name getHeaderWidth\n         * @method\n         */\n        self.getHeaderWidth = function () {\n            return self.getVisibleSchema().reduce(function (total, header) {\n                return total + (header.width || self.style.cellWidth);\n            }, 0);\n        };\n        self.formatters.string = function cellFormatterString(e) {\n            return e.cell.value !== undefined ? e.cell.value : '';\n        };\n        self.formatters.rowHeaderCell = self.formatters.string;\n        self.formatters.headerCell = self.formatters.string;\n        self.formatters.number = self.formatters.string;\n        self.formatters.int = self.formatters.string;\n        self.formatters.html = self.formatters.string;\n        self.sorters.string = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (a[columnName] === undefined || a[columnName] === null) {\n                    return 1;\n                }\n                if (b[columnName] === undefined || b[columnName] === null) {\n                    return 0;\n                }\n                if (asc) {\n                    if (!a[columnName].localeCompare) { return 1; }\n                    return a[columnName].localeCompare(b[columnName]);\n                }\n                if (!b[columnName].localeCompare) { return 1; }\n                return b[columnName].localeCompare(a[columnName]);\n            };\n        };\n        self.sorters.number = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return a[columnName] - b[columnName];\n                }\n                return b[columnName] - a[columnName];\n            };\n        };\n        self.sorters.date = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return new Date(a[columnName]).getTime()\n                        - new Date(b[columnName]).getTime();\n                }\n                return new Date(b[columnName]).getTime()\n                        - new Date(a[columnName]).getTime();\n            };\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/publicMethods.js\n// module id = 9\n// module chunks = 0"],"sourceRoot":""}