{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///canvas-datagrid.js","webpack:///webpack/bootstrap 376cd72e59dd11f62ff4","webpack:///./lib/main.js","webpack:///./lib/draw.js","webpack:///./lib/events.js","webpack:///./lib/intf.js","webpack:///./lib/contextMenu.js","webpack:///./lib/defaults.js","webpack:///./lib/dom.js","webpack:///./lib/publicMethods.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","undefined","grid","args","self","createGrid","forEach","init","intf","Array","slice","arguments","window","canvasDatagrid","require","apply","drawOnAllImagesLoaded","loaded","keys","htmlImageCache","html","complete","draw","drawHtml","cell","img","v","innerHTML","formattedValue","x","canvasOffsetLeft","y","canvasOffsetTop","height","width","ctx","drawImage","Image","onload","src","btoa","drawOrderByArrow","fillStyle","style","columnHeaderOrderByArrowColor","strokeStyle","columnHeaderOrderByArrowBorderColor","beginPath","columnHeaderOrderByArrowMarginLeft","columnHeaderOrderByArrowMarginTop","orderDirection","moveTo","lineTo","columnHeaderOrderByArrowWidth","columnHeaderOrderByArrowHeight","stroke","fill","columnHeaderOrderByArrowMarginRight","drawTreeArrow","treeArrowColor","treeArrowBorderColor","treeArrowMarginLeft","treeArrowMarginTop","openChildren","data","uniqueId","treeArrowWidth","treeArrowHeight","treeArrowMarginRight","radiusRect","w","h","radius","r","b","quadraticCurveTo","fillRect","strokeRect","fillText","text","addBorderLine","pos","t","addEllipsis","ellipsisCache","measureText","value","drawText","paddingLeft","paddingTop","paddingRight","paddingBottom","vPos","hPos","orderByArrowWidth","fontHeight","horizontalAlignment","verticalAlignment","perfCounters","drawCount","perfWindowSize","internal","drawCell","rowIndex","rowOrderIndex","header","headerIndex","columnOrderIndex","childGridAttributes","val","cellStyle","isHeader","test","isCorner","isRowHeader","isColumnHeader","selected","selections","indexOf","hovered","hovers","active","activeCell","columnIndex","isGrid","isArray","activeHeader","orders","rows","columns","f","formatters","type","orderByArrowSize","treeArrowSize","cellWidth","sizes","ev","row","columnWidth","cellBorderWidth","visibleRows","push","dispatchEvent","cx","cy","nodeType","offsetTop","offsetLeft","scrollTop","scrollBox","scrollLeft","cellHeight","offsetWidth","offsetHeight","parentNode","offsetParent","isHeaderCellCap","rowOpen","sortColumnIndex","sortRowIndex","gridId","attributes","parentGrid","title","userHeight","rowHeight","userWidth","cornerCell","visibleCells","unshift","lineWidth","cellHeightWithChildGrid","checkScrollHeight","cellWidthWithChildGrid","rd","save","clip","tree","showRowNumbers","childGrids","saveAppearance","visible","orderBy","font","console","warn","toString","columnFilters","filterTextPrefix","aCell","selectionBorders","length","restore","drawRowHeader","rowData","index","a","showRowHeaders","rowHeaderCell","rowHeaderCellWidth","drawRow","treeHeight","rowSansTreeHeight","g","trees","columnHeaderCellWidth","scrollIndexLeft","scrollPixelLeft","treeGrid","scrollBarWidth","rowHeaders","isChildGrid","u","currentCell","rowHeaderCellHeight","getRowHeaderCellHeight","getColumnHeaderCellWidth","performance","now","createRowOrders","getVisibleSchema","scale","devicePixelRatio","backgroundColor","scrollPixelTop","scrollIndexTop","showNewRow","newRow","selectionOverlayBorderWidth","selectionOverlayBorderColor","rowSelectionMode","activeCellOverlayBorderWidth","activeCellOverlayBorderColor","getHeaderWidth","columnHeaderCell","rArgs","showColumnHeaders","order","isHeaderCell","endCap","reorderObject","dragOffset","heigth","reorderMarkerBackgroundColor","reorderMarkerBorderWidth","reorderMarkerBorderColor","dragMode","reorderMarkerIndexBorderWidth","reorderMarkerIndexBorderColor","vb","nb","co","isScrollBoxCorner","scrollBarBoxMargin","scrollBarBorderColor","scrollBarBorderWidth","scrollBarBackgroundColor","scrollBoxHeight","scrollHeight","scrollBarBoxWidth","scrollBarBoxColor","context","scrollBarActiveColor","scrollBarBoxBorderRadius","scrollBoxWidth","scrollWidth","scrollBarCornerBorderColor","scrollBarCornerBackgroundColor","bar","box","resize","gridBorderWidth","gridBorderColor","debug","perf","reduce","toFixed","map","join","htmlImages","mousex","mouse","mousey","touchx","touchStart","touchy","entities","hasFocus","dragContext","key","touchDelta","touchAnimateTo","touchSigma","xPPS","yPPS","touchingCell","startingCell","animationFrames","getTouchPos","e","rect","canvas","getBoundingClientRect","touches","clientX","left","clientY","top","calculatePPS","touchCell","clearInterval","touchCalcTimeout","Math","abs","touchDeadZone","getCellAt","mousemove","mousedown","touchstart","NativeEvent","stopPropagation","preventDefault","contextmenu","touchScrollStart","touchmove","clearTimeout","touchTimeout","setTimeout","touchSelectTimeMs","setInterval","touchHaltAnimation","document","body","addEventListener","passive","touchend","touchcancel","easing","touchEndAnimation","scrollTo","requestAnimationFrame","touchReleaseAnimationDurationMs","dz","mouseup","beginEditAt","click","removeEventListener","touchReleaseAcceleration","fn","events","sfn","idx","splice","defaultPrevented","drawAfterResize","cellBorder","columnHeaderCellBorder","columnHeaderCellBorderWidth","parentDOMNode","parentIsCanvas","accumulator","column","hidden","widthBoxRatio","heightBoxRatio","max","scrollBarBoxMinSize","page","pageUpDownOverlap","resizeEditInput","input","scrollOffset","bx2","getVisibleCellByIndex","editCell","cellPaddingLeft","clipElement","scroll","overridePos","contextMenu","getLayerPos","dragBounds","sBounds","delta","ctrl","controlKey","metaKey","persistantSelectionMode","getSchema","previousCell","scrollTimer","isInGrid","cellBoundaryCrossed","draggingItem","scrollModes","dragItem","cursor","selecting","getSelectionBounds","dragStart","dragStartObject","shiftKey","min","bottom","right","ignoreNextClick","selectRow","dragAddToSelection","selectionBounds","selectArea","autoScrollZone","endEdit","abort","abortEdit","newValue","oldValue","changes","defaultValue","aborted","uId","addRow","createNewRowData","removeChild","controlInput","focus","editable","enumItems","scrollIntoView","setActiveCell","enum","createElement","multiLine","option","valueInEnum","appendChild","createInlineStyle","position","zIndex","nx","ny","keyCode","checkSelectionChange","selectionChanged","selectedData","getSelectedData","setFilter","columnHeaderClickBehavior","selectColumn","treeArrowClickRadius","toggleTree","dragResizeColumn","resizingStartingWidth","resizingStartingHeight","minColumnWidth","minRowHeight","resizeScrollZone","resizeChildGrids","globalRowResize","stopDragResize","setStorageData","scrollGrid","scrollPointerLock","pointerLockPosition","scrollStartMode","movementX","movementY","scrollMode","scrollStart","scrollRepeatRate","selectionScrollIncrement","stopScrollGrid","exitPointerLock","dragReorder","allowColumnReordering","allowRowReordering","source","target","reorderDeadZone","reorderTarget","stopDragReorder","cr","row-reorder","column-reorder","lastMouseDownTarget","button","requestPointerLock","keydown","last","cols","selectAll","selectionFollowsActiveCell","keyup","keypress","dblclick","fitColumnToValues","autosize","scrollWheel","deltaY","deltaX","copy","clipboardData","sData","setData","storageName","invalidSearchExpClass","localStyleLibraryStorageKey","filters","currentFilter","sorters","schemaHashes","expandToRow","col","ignoreScrollOffset","fillArray","low","high","step","columnHeaderCellHeight","localStorage","setItem","JSON","stringify","schema","tempSchema","createColumnOrders","filter","applyDefaultValue","getSchemaNameHash","string","getBestGuessDataType","columnName","drawChildGrids","gridKey","getClippingRect","ele","boundingRect","eleRect","clipRect","parentRect","Infinity","setTimer","selectionScrollZone","refreshFromOrigialData","originalData","validateColumn","Error","setDefaults","obj1","obj2","def","setAttributes","defaults","setStyle","styles","colName","dispose","eventParent","observer","disconnect","tryLoadStoredOrders","storedSettings","getHeaderByName","getFontHeight","fontStyle","parseFloat","parseFont","publicStyleKeyIntf","initScrollBox","setDom","appendTo","clearChangeLog","gotoCell","gotoRow","findColumnScrollLeft","findRowScrollTop","findColumnMaxTextLength","disposeContextMenu","isCellVisible","getSchemaFromData","expandTree","collapseTree","insertRow","deleteRow","insertColumn","deleteColumn","addColumn","setRowHeight","setColumnWidth","resetColumnWidths","resetRowHeights","assertPxColor","clearPxColorAssertions","integerToAlpha","set","filterFor","filterRegExp","invalidFilterRegEx","RegExp","number","getItem","parse","blur","normalizeDataset","syncFnInvoked","0","autoResizeColumns","setScrollTop","preventScrollEvent","isNaN","setScrollLeft","sHeight","sWidth","createContextMenu","items","parentContextMenu","createItems","item","removeChildContext","relatedTarget","container","childMenuArrow","contextItemContainer","children","setAttribute","contextAddCallback","getAttribute","cPos","childContextMenuMarginLeft","childContextMenuMarginTop","createChildContext","addContent","content","childContextMenuArrowHTML","clickIndex","Event","checkArrowVisibility","upArrow","downArrow","startHoverScroll","contextHoverScrollAmount","hoverScrollTimeout","contextHoverScrollRateMs","endHoverScroll","selectedIndex","loc","zIndexTop","color","contextMenuArrowColor","el","textAlign","inputDropdown","maxHeight","innerHeight","autocompleteBottomMargin","minWidth","contextMenuArrowUpHTML","contextMenuArrowDownHTML","contextMenuWindowMargin","innerWidth","isFinite","createFilterContextMenuItems","fillAutoComplete","autoCompleteItems","filterInput","disposeAutocomplete","createAutoCompleteContext","iRect","autoCompleteContext","filterContainer","filterLabel","filterAutoCompleteButton","onclick","filterOptionText","replace","contextFilterButtonHTML","cf","removeFilterOptionText","addDefaultContextMenuItem","isNormalCell","isBackground","isScrollBar","showFilter","showCopy","copyText","execCommand","showClearSettingsOption","clearSettingsOptionText","allowSorting","showOrderByOption","showOrderByOptionTextAsc","showOrderByOptionTextDesc","contextmenuEvent","contextMenuMarginLeft","contextMenuMarginTop","className","css","canvas-datagrid-context-menu-filter-input","verticalAlign","marginLeft","padding","background","contextFilterInputBackground","contextFilterInputColor","border","contextFilterInputBorder","borderRadius","contextFilterInputBorderRadius","lineHeight","fontWeight","fontFamily","contextFilterInputFontFamily","fontSize","contextFilterInputFontSize","canvas-datagrid-context-menu-filter-button","contextMenuBackground","contextMenuColor","contextFilterButtonBorder","contextFilterButtonBorderRadius","contextMenuFilterButtonFontFamily","contextMenuFilterButtonFontSize","canvas-datagrid-context-child-arrow","cssFloat","childContextMenuArrowColor","contextMenuChildArrowFontSize","contextMenuFontFamily","canvas-datagrid-autocomplete","contextMenuFontSize","contextMenuBorder","contextMenuPadding","contextMenuBorderRadius","opacity","contextMenuOpacity","overflow","canvas-datagrid-autocomplete-item","canvas-datagrid-autocomplete-item:hover","contextMenuHoverBackground","contextMenuHoverColor","canvas-datagrid-canvas","canvas-datagrid","boxSizing","canvas-datagrid-control-input","canvas-datagrid-edit-input","outline","margin","editCellPaddingLeft","editCellFontFamily","editCellFontSize","boxShadow","editCellBoxShadow","editCellBorder","editCellColor","editCellBackgroundColor","appearance","webkitAppearance","mozAppearance","canvas-datagrid-context-menu-item","contextMenuItemMargin","contextMenuItemBorderRadius","canvas-datagrid-context-menu-item:hover","canvas-datagrid-context-menu-label","contextMenuLabelMargin","display","contextMenuLabelDisplay","contextMenuLabelMinWidth","maxWidth","contextMenuLabelMaxWidth","canvas-datagrid-context-menu","canvas-datagrid-invalid-search-regExp","contextMenuFilterInvalidExpresion","prop","onblur","tagName","getContext","textBaseline","MutationObserver","mutations","mutation","observe","ordA","charCodeAt","ordZ","len","String","fromCharCode","floor","colIndex","applyFilter","coulumn","isColumnSelected","colIsSelected","shift","supressEvent","addCol","rowId","childGrid","treeGridHeight","direction","dontSetStorageData","sort","useTouchScrollZones","tsz","touchScrollZone","isVerticalScrollBar","isHorizontalScrollBar","borderResizeZone","allowColumnResize","allowColumnResizeFromCell","allowRowHeaderResize","allowRowResize","allowRowResizeFromCell","maxCol","minCol"," ","parseInt","toUpperCase","bounds","rowHeaderCellFont","autosizePadding","autosizeHeaderCellPadding","rowHeaderCellPaddingRight","rowHeaderCellPaddingLeft","columnHeaderCellFont","headerCellPaddingRight","headerCellPaddingLeft","cellFont","cellPaddingRight","cellAutoResizePadding","total","headerCell","int","asc","localeCompare","date","Date","getTime"],"mappings":"CAAA,SAAAA,EAAAC,GACA,gBAAAC,UAAA,gBAAAC,QACAA,OAAAD,QAAAD,IACA,kBAAAG,gBAAAC,IACAD,UAAAH,GACA,gBAAAC,SACAA,QAAA,eAAAD,IAEAD,EAAA,eAAAC,KACCK,KAAA,WACD,MCAgB,UAAUC,GCN1B,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAP,OAGA,IAAAC,GAAAO,EAAAD,IACAE,EAAAF,EACAG,GAAA,EACAV,WAUA,OANAK,GAAAE,GAAAI,KAAAV,EAAAD,QAAAC,IAAAD,QAAAM,GAGAL,EAAAS,GAAA,EAGAT,EAAAD,QAvBA,GAAAQ,KA4DA,OAhCAF,GAAAM,EAAAP,EAGAC,EAAAO,EAAAL,EAGAF,EAAAQ,EAAA,SAAAd,EAAAe,EAAAC,GACAV,EAAAW,EAAAjB,EAAAe,IACAG,OAAAC,eAAAnB,EAAAe,GACAK,cAAA,EACAC,YAAA,EACAC,IAAAN,KAMAV,EAAAiB,EAAA,SAAAtB,GACA,GAAAe,GAAAf,KAAAuB,WACA,WAA2B,MAAAvB,GAAA,SAC3B,WAAiC,MAAAA,GAEjC,OADAK,GAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAQ,EAAAC,GAAsD,MAAAR,QAAAS,UAAAC,eAAAjB,KAAAc,EAAAC,IAGtDpB,EAAAuB,EAAA,GAGAvB,IAAAwB,EAAA,KDgBM,SAAU7B,EAAQD,EAASM,GE7EjC,GAAAyB,GAAAC,CAEAD,IACAzB,EAAA,GACAA,EAAA,GACAA,EAAA,GACAA,EAAA,GACAA,EAAA,GACAA,EAAA,GACAA,EAAA,QAoBC2B,MAnBDD,EAAA,WACA,YAEA,SAAAE,GAAAC,GACAA,OACA,IAAAC,KAOA,OANAA,GAAAD,OACAC,EAAAC,WAAAH,EACA7B,EAAAiC,QAAA,SAAArC,GACAA,EAAAmC,KAEAA,EAAAG,OACAH,EAAAI,KAVA,GAAAnC,GAAAoC,MAAAd,UAAAe,MAAA/B,KAAAgC,UAgBA,QAJAC,eAAAC,gBAAAD,OAAAE,UACAF,OAAAC,eAAAX,GAEAjC,EAAAD,QAAAkC,EACAA,GACCa,MAAA/C,EAAA+B,MAAA9B,EAAAD,QAAAgC,IFqFK,SAAU/B,EAAQD,EAASM,GGlHjC,GAAAyB,GAAAC,CAEAD,UAy4BCE,MAz4BDD,EAAA,WACA,YACA,iBAAAI,GAKA,QAAAY,KACA,GAAAC,IAAA,CACA/B,QAAAgC,KAAAd,EAAAe,gBAAAb,QAAA,SAAAc,GACAhB,EAAAe,eAAAC,GAAAC,WACAJ,GAAA,KAGAA,GACAb,EAAAkB,OAGA,QAAAC,GAAAC,GACA,GAAAC,GACAC,EAAAF,EAAAG,WAAAH,EAAAI,eACAC,EAAAL,EAAAK,EAAAzB,EAAA0B,iBACAC,EAAAP,EAAAO,EAAA3B,EAAA4B,eACA,IAAA5B,EAAAe,eAAAO,GAAA,CAEA,GADAD,EAAArB,EAAAe,eAAAO,GACAD,EAAAQ,SAAAT,EAAAS,QAAAR,EAAAS,QAAAV,EAAAU,MAGiB,CACjB,IAAAT,EAAAJ,SACA,MAEA,OAAAjB,GAAA+B,IAAAC,UAAAX,EAAAI,EAAAE,GALA3B,EAAAe,eAAAO,OAAAzB,GAQAwB,EAAA,GAAAY,OAAAb,EAAAU,MAAAV,EAAAS,QACA7B,EAAAe,eAAAO,GAAAD,EACAA,EAAAa,OAAA,WACAlC,EAAA+B,IAAAC,UAAAX,EAAAI,EAAAE,GACAf,KAEAS,EAAAc,IAAA,6BAA0CC,KAC1C,kDAAAhB,EAAAU,MAAA,aAAAV,EAAAS,OAAA,qJAGAP,EAAA,uCAMA,QAAAe,GAAAZ,EAAAE,GAqBA,MApBAF,IAAAzB,EAAA0B,iBACAC,GAAA3B,EAAA4B,gBACA5B,EAAA+B,IAAAO,UAAAtC,EAAAuC,MAAAC,8BACAxC,EAAA+B,IAAAU,YAAAzC,EAAAuC,MAAAG,oCACA1C,EAAA+B,IAAAY,YACAlB,GAAAzB,EAAAuC,MAAAK,mCACAjB,GAAA3B,EAAAuC,MAAAM,kCACA,QAAA7C,EAAA8C,gBACA9C,EAAA+B,IAAAgB,OAAAtB,EAAAE,GACA3B,EAAA+B,IAAAiB,OAAAvB,EAAAzB,EAAAuC,MAAAU,8BAAAtB,GACA3B,EAAA+B,IAAAiB,OAAAvB,EAAA,GAAAzB,EAAAuC,MAAAU,8BAAAtB,EAAA3B,EAAAuC,MAAAW,gCACAlD,EAAA+B,IAAAgB,OAAAtB,EAAAE,KAEA3B,EAAA+B,IAAAiB,OAAAvB,EAAAE,EAAA3B,EAAAuC,MAAAW,gCACAlD,EAAA+B,IAAAiB,OAAAvB,EAAAzB,EAAAuC,MAAAU,8BAAAtB,EAAA3B,EAAAuC,MAAAW,gCACAlD,EAAA+B,IAAAiB,OAAAvB,EAAA,GAAAzB,EAAAuC,MAAAU,8BAAAtB,GACA3B,EAAA+B,IAAAiB,OAAAvB,EAAAE,EAAA3B,EAAAuC,MAAAW,iCAEAlD,EAAA+B,IAAAoB,SACAnD,EAAA+B,IAAAqB,OACApD,EAAAuC,MAAAK,mCACA5C,EAAAuC,MAAAU,8BACAjD,EAAAuC,MAAAc,oCAEA,QAAAC,GAAAlC,EAAAK,EAAAE,GAqBA,MApBAF,IAAAzB,EAAA0B,iBACAC,GAAA3B,EAAA4B,gBACA5B,EAAA+B,IAAAO,UAAAtC,EAAAuC,MAAAgB,eACAvD,EAAA+B,IAAAU,YAAAzC,EAAAuC,MAAAiB,qBACAxD,EAAA+B,IAAAY,YACAlB,GAAAzB,EAAAuC,MAAAkB,oBACA9B,GAAA3B,EAAAuC,MAAAmB,mBACA1D,EAAA2D,aAAAvC,EAAAwC,KAAA5D,EAAA6D,YACA7D,EAAA+B,IAAAgB,OAAAtB,EAAAE,GACA3B,EAAA+B,IAAAiB,OAAAvB,EAAAzB,EAAAuC,MAAAuB,eAAAnC,GACA3B,EAAA+B,IAAAiB,OAAAvB,EAAA,GAAAzB,EAAAuC,MAAAuB,eAAAnC,EAAA3B,EAAAuC,MAAAwB,iBACA/D,EAAA+B,IAAAgB,OAAAtB,EAAAE,KAEA3B,EAAA+B,IAAAiB,OAAAvB,EAAAE,GACA3B,EAAA+B,IAAAiB,OAAAvB,EAAAzB,EAAAuC,MAAAwB,gBAAApC,EAAA,GAAA3B,EAAAuC,MAAAuB,gBACA9D,EAAA+B,IAAAiB,OAAAvB,EAAAE,EAAA3B,EAAAuC,MAAAuB,gBACA9D,EAAA+B,IAAAiB,OAAAvB,EAAAE,IAEA3B,EAAA+B,IAAAoB,SACAnD,EAAA+B,IAAAqB,OACApD,EAAAuC,MAAAkB,oBACAzD,EAAAuC,MAAAuB,eACA9D,EAAAuC,MAAAyB,qBAEA,QAAAC,GAAAxC,EAAAE,EAAAuC,EAAAC,EAAAC,GACA3C,GAAAzB,EAAA0B,iBACAC,GAAA3B,EAAA4B,eACA,IAAAyC,GAAA5C,EAAAyC,EAAAI,EAAA3C,EAAAwC,CACAnE,GAAA+B,IAAAY,YACA3C,EAAA+B,IAAAgB,OAAAtB,EAAA2C,EAAAzC,GACA3B,EAAA+B,IAAAiB,OAAAqB,EAAAD,EAAAzC,GACA3B,EAAA+B,IAAAwC,iBAAAF,EAAA1C,EAAA0C,EAAA1C,EAAAyC,GACApE,EAAA+B,IAAAiB,OAAAqB,EAAA1C,EAAAwC,EAAAC,GACApE,EAAA+B,IAAAwC,iBAAAF,EAAAC,EAAAD,EAAAD,EAAAE,GACAtE,EAAA+B,IAAAiB,OAAAvB,EAAA2C,EAAAE,GACAtE,EAAA+B,IAAAwC,iBAAA9C,EAAA6C,EAAA7C,EAAA6C,EAAAF,GACApE,EAAA+B,IAAAiB,OAAAvB,EAAAE,EAAAyC,GACApE,EAAA+B,IAAAwC,iBAAA9C,EAAAE,EAAAF,EAAA2C,EAAAzC,GAEA,QAAA6C,GAAA/C,EAAAE,EAAAuC,EAAAC,GACA1C,GAAAzB,EAAA0B,iBACAC,GAAA3B,EAAA4B,gBACA5B,EAAA+B,IAAAyC,SAAA/C,EAAAE,EAAAuC,EAAAC,GAEA,QAAAM,GAAAhD,EAAAE,EAAAuC,EAAAC,GACA1C,GAAAzB,EAAA0B,iBACAC,GAAA3B,EAAA4B,gBACA5B,EAAA+B,IAAA0C,WAAAhD,EAAAE,EAAAuC,EAAAC,GAEA,QAAAO,GAAAC,EAAAlD,EAAAE,GACAF,GAAAzB,EAAA0B,iBACAC,GAAA3B,EAAA4B,gBACA5B,EAAA+B,IAAA2C,SAAAC,EAAAlD,EAAAE,GAEA,QAAAiD,GAAAnG,EAAAoG,GACA7E,EAAA+B,IAAAY,aAEAmC,EAAA,WACA9E,EAAA+B,IAAAgB,OAAAtE,EAAAgD,EAAAzB,EAAA0B,iBAAAjD,EAAAkD,EAAA3B,EAAA4B,iBACA5B,EAAA+B,IAAAiB,OAAAvE,EAAAgD,EAAAzB,EAAA0B,iBAAAjD,EAAAqD,MAAArD,EAAAkD,EAAA3B,EAAA4B,kBAEAyC,EAAA,WACArE,EAAA+B,IAAAgB,OAAAtE,EAAAgD,EAAAzB,EAAA0B,iBAAAjD,EAAAqD,MAAArD,EAAAkD,EAAA3B,EAAA4B,iBACA5B,EAAA+B,IAAAiB,OAAAvE,EAAAgD,EAAAzB,EAAA0B,iBAAAjD,EAAAqD,MAAArD,EAAAkD,EAAA3B,EAAA4B,gBAAAnD,EAAAoD,SAEAyC,EAAA,WACAtE,EAAA+B,IAAAgB,OAAAtE,EAAAgD,EAAAzB,EAAA0B,iBAAAjD,EAAAkD,EAAA3B,EAAA4B,gBAAAnD,EAAAoD,QACA7B,EAAA+B,IAAAiB,OAAAvE,EAAAgD,EAAAzB,EAAA0B,iBAAAjD,EAAAqD,MAAArD,EAAAkD,EAAA3B,EAAA4B,gBAAAnD,EAAAoD,SAEAvD,EAAA,WACA0B,EAAA+B,IAAAgB,OAAAtE,EAAAgD,EAAAzB,EAAA0B,iBAAAjD,EAAAkD,EAAA3B,EAAA4B,iBACA5B,EAAA+B,IAAAiB,OAAAvE,EAAAgD,EAAAzB,EAAA0B,iBAAAjD,EAAAkD,EAAA3B,EAAA4B,gBAAAnD,EAAAoD,UAGAgD,KACA7E,EAAA+B,IAAAoB,SAEA,QAAA4B,GAAAJ,EAAA7C,GACA,GAAArD,GAAAyF,EAAA,CACA,OAAAlE,GAAAgF,cAAAL,IAAA3E,EAAAgF,cAAAL,GAAA7C,GACA9B,EAAAgF,cAAAL,GAAA7C,IAGAoC,EAAAlE,EAAA+B,IAAAkD,YAAAN,GAAA7C,MACA9B,EAAAgF,cAAAL,GAAA3E,EAAAgF,cAAAL,OACAlG,GAAiByG,MAAAP,EAAA7C,MAAAoC,GACjBlE,EAAAgF,cAAAL,GAAA7C,GAAArD,EACAA,GAEA,QAAA0G,GAAA/D,GACA,GAAAgE,GAAApF,EAAAuC,MAAAnB,EAAAmB,MAAA,eACA8C,EAAArF,EAAAuC,MAAAnB,EAAAmB,MAAA,cACA+C,EAAAtF,EAAAuC,MAAAnB,EAAAmB,MAAA,gBACAgD,EAAAvF,EAAAuC,MAAAnB,EAAAmB,MAAA,iBACAiD,EAAAH,EAAAjE,EAAAS,OAAA,GAAAT,EAAAS,OACA4D,EAAAL,EAAAhE,EAAA0C,eAAA1C,EAAAsE,iBACAtE,GAAAuD,KAAAI,EAAA3D,EAAAI,eAAAJ,EAAAU,MAAAwD,EAAAF,GACAhE,EAAAuD,KAAA9C,OAAAT,EAAAuE,WACA,UAAAvE,EAAAwE,oBACAH,EAAArE,EAAAU,MAAAV,EAAAuD,KAAA7C,MAAAwD,EACa,WAAAlE,EAAAwE,sBACbH,EAAArE,EAAAU,MAAA,EAAAV,EAAAuD,KAAA7C,MAAA,GAEA,QAAAV,EAAAyE,kBACAL,EAAAH,EAAAjE,EAAAuD,KAAA9C,OACa,WAAAT,EAAAyE,oBACbL,EAAApE,EAAAS,OAAA0D,EAAAnE,EAAAuD,KAAA9C,QAEAT,EAAAuD,KAAAlD,EAAAL,EAAAK,EAAAgE,EACArE,EAAAuD,KAAAhD,EAAAP,EAAAO,EAAA6D,EACAd,EAAAtD,EAAAuD,KAAAO,MAAA9D,EAAAuD,KAAAlD,EAAAL,EAAAuD,KAAAhD,GAxLA,GAAAmE,MACAC,EAAA,EACAC,EAAA,EACAhG,GAAAe,kBA6LAf,EAAAkB,KAAA,SAAA+E,GA+IA,QAAAC,GAAAxH,EAAAyH,EAAAC,GACA,gBAAAC,EAAAC,EAAAC,GACA,GACAC,GACApF,EAaAqF,EAfAC,EAAAL,EAAA9D,OAAA,OAGAoE,EAAA,aAAAC,KAAAF,GACAG,EAAA,aAAAD,KAAAF,GACAI,EAAA,kBAAAJ,EACAK,EAAA,qBAAAL,EACAM,EAAAhH,EAAAiH,WAAAb,KAAA,IAAApG,EAAAiH,WAAAb,GAAAc,QAAAX,GACAY,EAAAnH,EAAAoH,OAAA1I,EAAAsB,EAAA6D,aAAA,IAAA7D,EAAAoH,OAAA1I,EAAAsB,EAAA6D,WAAAqD,QAAAX,GACAc,EAAArH,EAAAsH,WAAAnB,WAAAC,GAAApG,EAAAsH,WAAAC,cAAAhB,EACAiB,EAAAnH,MAAAoH,QAAA/I,EAAA2H,EAAA1H,OACA+I,IAAA1H,EAAA2H,OAAAC,KAAA5H,EAAAsH,WAAAnB,YAAAC,GACApG,EAAA2H,OAAAE,QAAA7H,EAAAsH,WAAAC,eAAAhB,IACA,IAAAA,IAAA,IAAAH,KACAU,EAAA,gDAEAgB,EAAA9H,EAAA+H,WAAA1B,EAAA2B,MAAA,UACAC,EAAA,EACAC,EAAA,EACAC,EAAAnI,EAAAoI,MAAAP,QAAAf,EAAA,aAAAT,EAAArG,EAAA6D,YAAAwC,EAAAvE,MACAuG,GACAnD,MAAAxG,EAAA2H,EAAA1H,MACA2J,IAAA5J,EACA2H,SAmBA,IAjBA,kBAAAK,IACAyB,EAAAjE,EAAAzC,OAGA5B,KAAAsI,IACAA,EAAAnI,EAAAuC,MAAAgG,aAEA9G,EAAA0G,EAAAnI,EAAAuC,MAAAiG,gBAAA,IACA/G,GAAA0G,EAAAnI,EAAAuC,MAAAiG,iBAEAnB,IACAX,EAAA,eAEA,IAAA1G,EAAAyI,YAAAvB,QAAAf,IAAAQ,GACA3G,EAAAyI,YAAAC,KAAAvC,GAEAM,EAAAzG,EAAA2I,cAAA,kBAAAN,IACArI,EAAA2I,cAAA,mBAAAN,GA0LA,MAzLAO,GAAAnH,EACAoH,EAAAlH,EACA,eAAA+E,GACAkC,EAAA,EACAC,EAAA,GACyB/B,EACzB8B,EAAA,EACyBjC,IACzBkC,EAAA,GAEAzH,GACA4G,KAAAR,EAAA,uBAAAnB,EAAA2B,KACAzF,MAAAmE,EACAoC,SAAA,uBACArH,EAAAmH,EACAjH,EAAAkH,EACAjD,oBAAA5F,EAAAuC,MAAAmE,EAAA,uBACAb,kBAAA7F,EAAAuC,MAAAmE,EAAA,qBACAqC,UAAA/I,EAAA4B,gBAAAiH,EACAG,WAAAhJ,EAAA0B,iBAAAkH,EACAK,UAAAjJ,EAAAkJ,UAAAD,UACAE,WAAAnJ,EAAAkJ,UAAAC,WACA9B,UAAAK,EACAP,UACAH,WACAlF,MAAAqG,EACAtG,OAAAuH,EACAC,YAAAlB,EACAmB,aAAAF,EACAG,WAAAvJ,EAAAI,KAAAmJ,WACAC,aAAAxJ,EAAAI,KAAAmJ,WACA3F,KAAAlF,EACAmI,WACAF,WACAI,iBACA0C,kBAAApD,EAAAoD,gBACA3C,cACA4C,UACArD,SACAkB,YAAAhB,EACAJ,SAAAC,EACAuD,gBAAArD,EACAsD,aAAAzD,EACAqB,SACAqC,QAAA7J,EAAA8J,WAAAnL,MAAA,IAAAD,EAAAsB,EAAA6D,UAAA,IAAAwC,EAAArG,EAAA6D,UACAkG,WAAA/J,EAAAI,KACAmB,UAAA,GACAmG,eACAxC,MAAAyB,IAAAG,EAAAT,EAAA2D,OAAA3D,EAAA1H,KAAAD,EAAA2H,EAAA1H,OAEA0J,EAAAjH,OACAA,EAAA6I,WAAA7I,EAAAuF,SAAA3G,EAAAoI,MAAAR,MAAA,GAAAsC,EACA9I,EAAA+I,UAAA/I,EAAAuF,SAAA3G,EAAAoI,MAAAP,QAAAuC,WAAApK,EAAAoI,MAAAP,QAAAxB,EAAArG,EAAA6D,WACAzC,EAAApB,EAAA6D,UAAAnF,EAAAsB,EAAA6D,UACA7D,EAAAqK,aAAAC,QAAAlJ,GACApB,EAAA+B,IAAAO,UAAAtC,EAAAuC,MAAAmE,EAAA,mBACA1G,EAAA+B,IAAAU,YAAAzC,EAAAuC,MAAAmE,EAAA,eACA1G,EAAA+B,IAAAwI,UAAAvK,EAAAuC,MAAAmE,EAAA,eACAS,IACAnH,EAAA+B,IAAAO,UAAAtC,EAAAuC,MAAAmE,EAAA,wBACA1G,EAAA+B,IAAAU,YAAAzC,EAAAuC,MAAAmE,EAAA,qBAEAM,IACAhH,EAAA+B,IAAAO,UAAAtC,EAAAuC,MAAAmE,EAAA,2BACA1G,EAAA+B,IAAAU,YAAAzC,EAAAuC,MAAAmE,EAAA,wBAEAgB,IACA1H,EAAA+B,IAAAO,UAAAtC,EAAAuC,MAAAmF,EAAA,oBAEA1H,EAAA2I,cAAA,aAAAN,GACAjH,EAAAoG,SACApG,EAAAS,SAAAqI,IACA9I,EAAAS,OAAAqI,GAAAlK,EAAAuC,MAAAiI,wBACAC,GAAA,GAEArJ,EAAAU,MAAA9B,EAAAoI,MAAAP,QAAAxB,EAAArG,EAAA6D,YAAA7D,EAAAuC,MAAAmI,wBAEAhB,IAAAtI,EAAA0F,cACA1F,EAAAS,OAAA7B,EAAAoI,MAAAR,KAAA+C,EAAA3K,EAAA6D,YAAA7D,EAAAuC,MAAA6G,YAEAhI,EAAAoG,SACAhD,EAAAoE,EAAAC,EAAAzH,EAAAU,MAAAV,EAAAS,QACA4C,EAAAmE,EAAAC,EAAAzH,EAAAU,MAAAV,EAAAS,SAEA7B,EAAA+B,IAAA6I,OACA3G,EAAA7C,EAAAK,EAAAL,EAAAO,EAAAP,EAAAU,MAAAV,EAAAS,OAAA,GACA7B,EAAA+B,IAAA8I,OACA7K,EAAA2I,cAAA,kBAAAN,GACAjH,EAAAS,SAAAuH,GAAAM,IAAAtI,EAAA0F,cACA9G,EAAAoI,MAAAR,KAAAjB,GAAA,EAAAjI,EAAAsB,EAAA6D,WAAAzC,EAAAS,OACA4I,GAAA,GAEArJ,EAAAU,QAAAqG,IACAnI,EAAAoI,MAAAP,QAAAxB,EAAArG,EAAA6D,WAAAzC,EAAAU,MACA2I,GAAA,GAEA3D,GAAA9G,EAAA8J,WAAAgB,OACA9K,EAAA2I,cAAA,kBAAAN,KACAH,EAAA5E,EAAAlC,EAAApB,EAAAuC,MAAAmE,EAAA,eAAAmC,EAAA,MAGA7I,EAAA8J,WAAAiB,gBAAAjE,IACAA,KACA1F,EAAAoG,QACAxH,EAAAgL,WAAA5J,EAAAyI,UACArD,EAAAxG,EAAAD,KAAAyG,qBAAAxG,EAAAD,KACAyG,EAAA7H,KAAAqB,EAAA8J,WAAAmB,eAAA7J,EAAAyI,WAAAhK,GACA2G,EAAA+C,WAAAnI,EACAoF,EAAA5C,KAAAlF,EAAA2H,EAAA1H,MACAqB,EAAAgL,WAAA5J,EAAAyI,QAAA7J,EAAAC,WAAAuG,GACAiE,GAAA,GAEArJ,EAAAtB,KAAAE,EAAAgL,WAAA5J,EAAAyI,QACAzI,EAAAtB,KAAAyJ,WAAAnI,EACAA,EAAAtB,KAAAoL,SAAA,EAEAlL,EAAA2I,cAAA,iBAAAN,KAEArI,EAAAgL,WAAA5J,EAAAyI,UACA7J,EAAAgL,WAAA5J,EAAAyI,QAAAN,WAAAD,aAAA,GAEA3C,GAAA3G,EAAAmL,UAAA9E,EAAA1H,OACAqB,EAAA2I,cAAA,qBAAAN,KACAJ,EAAA5F,EAAAuG,EAAA5I,EAAAuC,MAAAmE,EAAA,oBAGA1G,EAAA+B,IAAAO,UAAAtC,EAAAuC,MAAAmE,EAAA,SACAS,IACAnH,EAAA+B,IAAAO,UAAAtC,EAAAuC,MAAAmE,EAAA,eAEAM,IACAhH,EAAA+B,IAAAO,UAAAtC,EAAAuC,MAAAmE,EAAA,kBAEAgB,IACA1H,EAAA+B,IAAAO,UAAAtC,EAAAuC,MAAAmF,EAAA,UAEA1H,EAAA+B,IAAAqJ,KAAApL,EAAAuC,MAAAmE,EAAA,QACAtF,EAAAuE,WAAA3F,EAAAuC,MAAAmE,EAAA,cACAtF,EAAA0C,eAAAoE,EACA9G,EAAAsE,kBAAAuC,EACAxB,MAAA5G,KAAA4G,IAAAqB,EACAA,EAAAO,GAAA,OACAxI,KAAA4G,GAAAqB,IACArB,EAAA,GACA4E,QAAAC,KAAA,mCACAjF,EAAA2B,KAAA,wBAEA5G,EAAAI,oBAAA3B,KAAA4G,GAAA,OAAAA,IAAA,IAAA8E,WACAvL,EAAAwL,mBAAA3L,KAAAG,EAAAwL,cAAA/E,IAAAE,IACAvF,EAAAI,eAAAxB,EAAA8J,WAAA2B,iBAAAhF,GAEAzG,EAAA2I,cAAA,aAAAN,KACAjH,EAAAG,WAAA,SAAA8E,EAAA2B,KACA7G,EAAAC,GAEA+D,EAAA/D,MAKAiG,IACAqE,EAAAtK,GAEA4F,IAAAF,IACA9G,EAAAiH,WAAA7F,EAAA+E,SAAA,KACA,IAAAnG,EAAAiH,WAAA7F,EAAA+E,SAAA,GAAAe,QAAA9F,EAAAmG,cACA,IAAAnG,EAAA+E,UACA/E,EAAAuF,UACAgF,EAAAjD,MAAAtH,EAAA,MAEApB,EAAAiH,WAAA7F,EAAA+E,SAAA,KACA,IAAAnG,EAAAiH,WAAA7F,EAAA+E,SAAA,GAAAe,QAAA9F,EAAAmG,cACAoE,EAAAjD,MAAAtH,EAAA,MAEApB,EAAAiH,WAAA7F,EAAA+E,WAAA,IAAA/E,EAAAmG,cACA,IAAAvH,EAAAiH,WAAA7F,EAAA+E,UAAAe,QAAA9F,EAAAmG,YAAA,IACAoE,EAAAjD,MAAAtH,EAAA,MAEApB,EAAAiH,WAAA7F,EAAA+E,WAAA/E,EAAAmG,cAAA7H,EAAAkM,SACA,IAAA5L,EAAAiH,WAAA7F,EAAA+E,UAAAe,QAAA9F,EAAAmG,YAAA,IACAoE,EAAAjD,MAAAtH,EAAA,OAGApB,EAAA+B,IAAA8J,UACApK,GAAAL,EAAAU,MAAA9B,EAAAuC,MAAAiG,gBACApH,EAAAU,OAIA,QAAAgK,GAAAC,EAAAC,EAAA5F,GACA,GAAA6F,EACAjM,GAAA8J,WAAAoC,iBACAzK,EAAA,EACA0K,GAAqCA,cAAAH,EAAA,GACrCG,EAAAnM,EAAA6D,UAAAkI,EAAA/L,EAAA6D,UACAoI,GACAtN,KAAA,gBACAmD,MAAA9B,EAAAuC,MAAA6J,mBACA7J,MAAA,gBACAyF,KAAA,SACApE,KAAAmI,EAAA/L,EAAA6D,UACAmI,OAAA,GAEAC,EAAAjM,EAAA6D,UAAAkI,EAAA/L,EAAA6D,UACA6F,EAAA1J,EAAA2D,aAAAoI,EAAA/L,EAAA6D,WACAqC,EAAAiG,EAAAH,EAAA5F,GAAA6F,GAAA,OAqEA,QAAAI,GAAAhI,EAAA3F,GACA,GAAAL,GAAAiO,EAAAC,EAAA1N,EAAA2N,EAAA9M,EAAAkM,MACA,IAAAjK,EAAA,EAAAyH,EAAAjF,EACA,QAOA,IALAwG,EAAA3K,EAAA4D,KAAAS,GACAqF,EAAA1J,EAAA2D,aAAAgH,EAAA3K,EAAA6D,WACA0I,EAAAvM,EAAAoI,MAAAR,KAAA+C,EAAA3K,EAAA6D,YAAA7D,EAAAuC,MAAA6G,WACAkD,EAAA5C,EAAA1J,EAAAoI,MAAAqE,MAAA9B,EAAA3K,EAAA6D,WAAA,EACAqG,EAAAqC,EAAAD,EACA3K,GAAA,EAAAuI,EACA,QAMA,KAJAlK,EAAA8J,WAAAoC,iBACAzK,GAAAiL,GAEAtD,EAAAc,EACArL,EAAAmB,EAAA2M,gBAA8C9N,EAAA2N,IAC9CnO,EAAA2B,EAAA2H,OAAAE,QAAAhJ,MACA4C,GAAAyE,EAAAyE,EAAAtG,EAAA3F,GAAAgB,EAAArB,KAAAQ,IACAmB,EAAA8B,QAHqDjD,GAAA,GA4CrD,MApCAuK,GAAAc,EACAzI,GAAA,EAAAzB,EAAAkJ,UAAAC,WAAAnJ,EAAA4M,gBAAA5M,EAAAuC,MAAAiG,gBAEAqE,EAAA7M,EAAAgL,WAAAL,EAAA3K,EAAA6D,WACAQ,IAAArE,EAAA4D,KAAAgI,QAAAlC,GACAmD,EAAA3B,SAAA,EACA2B,EAAAtD,YACAR,UAAApH,EAAA4K,EAAAvM,EAAA4B,gBACAoH,WAAA0D,EAAA,EAAA1M,EAAA0B,iBACA4H,aAAAgD,EACAjD,YAAArJ,EAAA8B,MAAA4K,EAAA1M,EAAAuC,MAAAuK,eAAA,EACAtD,aAAAxJ,EAAAI,KAAAmJ,WACAA,WAAAvJ,EAAAI,KAAAmJ,WACAhH,MAAAvC,EAAAuC,MACAuG,SAAA,uBACAG,UAAAjJ,EAAAkJ,UAAAD,UACAE,WAAAnJ,EAAAkJ,UAAAC,WACAhD,SAAA9B,GAEArE,EAAAqK,aAAAC,SACAnE,SAAA1E,EACA8F,YAAA,EACA5F,EAAAkL,EAAAtD,WAAAR,UACAtH,EAAAoL,EAAAtD,WAAAP,WACAnH,OAAAgL,EAAAtD,WAAAD,aACAxH,MAAA+K,EAAAtD,WAAAF,YACA9G,MAAA,YACAyF,KAAA6E,EAAAtD,WAAAT,WAEA+D,EAAA3L,QACiB2L,IACjBA,EAAAtD,WAAAD,aAAA,QACAtJ,GAAAoI,MAAAqE,MAAA9B,EAAA3K,EAAA6D,YAEAkJ,EAAArE,MAAAiC,EAAAtG,EAAA3F,EAAAiD,EAAAuI,IACAvI,GAAAyH,EAAApJ,EAAAuC,MAAAiG,iBACA,EA1gBA,IAAAxI,EAAA2I,cAAA,mBACA3I,EAAAgN,aAAAhN,EAAA6B,QAAA7B,EAAA8B,SAQA,IAAA9B,EAAAI,KAAA8K,QAAA,CAIA,GAAAT,GAAA0B,EAAA1M,EAAAmJ,EAAAC,EAAAgE,EAAAnD,EACAQ,EAAAE,EAAAzI,EAAAF,EAAAhD,EAAA0F,EAAAD,EAAAxE,EAAA2E,EAAAsG,EAAAe,EACAC,KACAoB,KACAzO,EAAA0B,EAAA4D,KAAAgI,OACAqB,EAAAjN,EAAAkN,gBACAC,EAAAnN,EAAAoN,yBACAV,EAAA1M,EAAAqN,2BACAjE,EAAApJ,EAAAuC,MAAA6G,UACArD,IAAA,EACAtG,EAAA6N,YAAAC,MAEAvN,EAAA4D,KAAAgI,OAAA5L,EAAA2H,OAAAC,KAAAgE,QACA5L,EAAAwN,kBAypBAxN,EAAA+B,IAAA6I,OAvKA,WACA5K,EAAAyI,eACA/I,EAAAM,EAAAyN,mBACAzN,EAAAqK,gBACArK,EAAA4B,gBAAA5B,EAAAgN,YAAAhN,EAAAuJ,WAAAR,UAAA,EACA/I,EAAA0B,iBAAA1B,EAAAgN,YAAAhN,EAAAuJ,WAAAP,WAAA,EACA7E,EAAAnE,EAAA6B,OACAqC,EAAAlE,EAAA8B,MACA9B,EAAAgN,aACAhN,EAAA+B,IAAA2L,MAAAlN,OAAAmN,iBAAAnN,OAAAmN,qBAGA,WACA1J,EAAA,IAAAC,EAAAC,EAAA,GACAnE,EAAA+B,IAAA8I,OACA7K,EAAA+B,IAAAO,UAAAtC,EAAAuC,MAAAqL,gBACApJ,EAAA,IAAAN,EAAAC,MAEA,WACA,GAAAtF,GAAAM,EAAAd,EAAAmO,EAAA9M,EAAAkM,MAGA,KAFAnK,GAAA,EAAAzB,EAAAkJ,UAAAC,WAAAnJ,EAAA4M,gBAAA5M,EAAAuC,MAAAiG,gBACA7G,GAAA,EAAA3B,EAAAkJ,UAAAD,UAAAkE,EAAAnN,EAAA6N,eAAA7N,EAAAuC,MAAAiG,gBACAnE,EAAArE,EAAA8N,eAA6CzJ,EAAA/F,IAC7Ca,EAAAa,EAAA2H,OAAAC,KAAAvD,GACAgI,EAAAlN,EAAAkF,IAFoDA,GAAA,GAMpD,GAAArE,EAAA8J,WAAAiE,WAAA,CAMA,IALA/N,EAAA8J,WAAAoC,iBACAzK,GAAAiL,GAEAxC,EAAAd,EAAApJ,EAAAuC,MAAA6G,WACAM,GAAA,EACA7K,EAAAmB,EAAA2M,gBAAkD9N,EAAA2N,IAClDnO,EAAA2B,EAAA2H,OAAAE,QAAAhJ,MACA4C,GAAAyE,EAAAlG,EAAAgO,OAAAhO,EAAA4D,KAAAgI,OAAA5L,EAAA4D,KAAAgI,QAAAlM,EAAArB,KAAAQ,IACAmB,EAAA8B,MAAA9B,EAAAkJ,UAAAC,aAHyDtK,GAAA,GAOzDkO,EAAArE,MAAA1I,EAAAgO,OAAAhO,EAAA4D,KAAAgI,OAAA5L,EAAA4D,KAAAgI,OAAAjK,EAAAuI,QAqDA,WACAlK,EAAA+B,IAAAwI,UAAAvK,EAAAuC,MAAA0L,4BACAjO,EAAA+B,IAAAU,YAAAzC,EAAAuC,MAAA2L,4BACAvC,EAAAzL,QAAA,SAAAzB,GACAmG,EAAAnG,EAAA,GAAAA,EAAA,SAGA,WACAiN,IACA1L,EAAA8J,WAAAqE,iBACAnO,EAAAsH,YAAAtH,EAAAsH,WAAAnB,WAAAuF,EAAAvF,WACAnG,EAAA+B,IAAAwI,UAAAvK,EAAAuC,MAAA6L,6BACApO,EAAA+B,IAAAU,YAAAzC,EAAAuC,MAAA8L,6BACA5J,EAAA,EAAAiH,EAAA/J,EAAA3B,EAAAsO,iBAAA5B,EAAAxC,KAGAlK,EAAA+B,IAAAwI,UAAAvK,EAAAuC,MAAA6L,6BACApO,EAAA+B,IAAAU,YAAAzC,EAAAuC,MAAA8L,6BACA5J,EAAAiH,EAAAjK,EAAAiK,EAAA/J,EAAA+J,EAAA5J,MAAA4J,EAAA7J,aAjPA,WACA,GAAAnD,GAAAL,EAAAQ,EAAA0P,EAAAlI,EAAAmG,EAAA9M,EAAAkM,MAMA,IALAmB,EAAA7M,QAAA,SAAAsO,GACA7M,EAAA6M,EAAA,GACApF,EAAAoF,EAAA,GACA1C,EAAA0C,EAAA,GAAAA,EAAA,GAAAA,EAAA,MAEAxO,EAAA8J,WAAA2E,kBAAA,CAQA,IAPAhN,GAAA,EAAAzB,EAAAkJ,UAAAC,WAAAnJ,EAAA4M,gBACA5M,EAAA8J,WAAAoC,iBACAzK,GAAAiL,GAEA/K,EAAA,EAEAyH,EAAApJ,EAAAoN,yBACAvO,EAAAmB,EAAA2M,gBAAkD9N,EAAA2N,IAClDnO,EAAA2B,EAAA2H,OAAAE,QAAAhJ,GACAwH,EAAA3G,EAAArB,GACAK,GACAsL,MAAA3D,EAAA2D,MACArL,KAAA0H,EAAA1H,KACAmD,MAAAuE,EAAAvE,MACAS,MAAA,mBACAyF,KAAA,SACAgE,MAAAnN,EACA6P,MAAArQ,GAEAkQ,GAA4CA,iBAAAlI,EAAA2D,OAAA3D,EAAA1H,MAC5C4P,EAAAvO,EAAA6D,UAAA,IAAAwC,EAAArG,EAAA6D,UACAnF,EAAAsB,EAAA6D,UAAAwC,EAAArG,EAAA6D,aACApC,GAAAyE,EAAAqI,GAAA,MAAA7P,EAAAG,EAAAR,IACA2B,EAAA8B,MAAA9B,EAAAkJ,UAAAC,aAhByDtK,GAAA,GAqBzD4C,EAAAyC,IACAzF,GACAE,KAAA,GACAmD,MAAA9B,EAAAuC,MAAAuK,eACAvK,MAAA,gBACAoM,cAAA,EACAlF,iBAAA,EACAzB,KAAA,SACAgE,MAAAtM,EAAAkM,QAEAnN,EAAAuB,EAAA6D,UAAA,mBACAqC,GAAkC0I,OAAA,KAAW,MAAAnQ,GAAA,OAG7CuB,EAAA8J,WAAAoC,iBACA9B,GAAsCA,WAAA,IACtCA,EAAApK,EAAA6D,UAAA,aACApC,EAAA,EACAhD,GACAE,KAAA,aACAmD,MAAA9B,EAAAuC,MAAA6J,mBACA7J,MAAA,aACAyF,KAAA,SACAgE,OAAA,GAEAvN,EAAAuB,EAAA6D,UAAA,aACAqC,EAAAkE,GAAA,MAAA3L,GAAA,WA+GA,WACA,GAAAuB,EAAA6O,cAAA,CACA,GAAAvK,IACAzC,OAAA7B,EAAA6O,cAAAhN,OACAC,MAAA9B,EAAA6O,cAAA/M,MACAL,EAAAzB,EAAA6O,cAAApN,EAAAzB,EAAA6O,cAAAC,WAAArN,EACAE,EAAA3B,EAAA6O,cAAAlN,EAAA3B,EAAA6O,cAAAC,WAAAnN,GAEAnD,GACAsD,MAAAoC,EACA6K,OAAA5K,EACA1C,EAAA,EACAE,EAAA,EAEA3B,GAAA+B,IAAAO,UAAAtC,EAAAuC,MAAAyM,6BACAhP,EAAA+B,IAAAwI,UAAAvK,EAAAuC,MAAA0M,yBACAjP,EAAA+B,IAAAU,YAAAzC,EAAAuC,MAAA2M,yBACA,gBAAAlP,EAAAmP,UACA7K,EAAAxC,MAAAoC,EACAI,EAAA7C,EAAA,EACAjD,EAAAsD,MAAAoC,EACA1F,EAAAmD,EAAA3B,EAAAkN,YAAAvL,EACA6C,EAAAF,EAAA7C,EAAA6C,EAAA3C,EAAA2C,EAAAxC,MAAAwC,EAAAzC,QACA4C,EAAAH,EAAA7C,EAAA6C,EAAA3C,EAAA2C,EAAAxC,MAAAwC,EAAAzC,QACA7B,EAAA+B,IAAAwI,UAAAvK,EAAAuC,MAAA6M,8BACApP,EAAA+B,IAAAU,YAAAzC,EAAAuC,MAAA8M,8BACArP,EAAAkN,YAAA/G,WAAAnG,EAAA6O,cAAA1I,UACAnG,EAAAkN,YAAA/G,SAAA,IAAAnG,EAAA6O,cAAA1I,UACAvB,EAAApG,EAAA,MAEiB,mBAAAwB,EAAAmP,UAAAnP,EAAA6O,gBACjBvK,EAAAzC,OAAAsC,EACAG,EAAA3C,EAAA,EACAnD,EAAAqD,OAAAsC,EACA3F,EAAAiD,EAAAzB,EAAAkN,YAAAzL,EACA+C,EAAAF,EAAA7C,EAAA6C,EAAA3C,EAAA2C,EAAAxC,MAAAwC,EAAAzC,QACA4C,EAAAH,EAAA7C,EAAA6C,EAAA3C,EAAA2C,EAAAxC,MAAAwC,EAAAzC,QACA7B,EAAA+B,IAAAwI,UAAAvK,EAAAuC,MAAA6M,8BACApP,EAAA+B,IAAAU,YAAAzC,EAAAuC,MAAA8M,8BACArP,EAAAkN,YAAA3F,cAAAvH,EAAA6O,cAAAtH,aACAvH,EAAAkN,YAAA3F,YAAA,IAAAvH,EAAA6O,cAAAtH,aACA3C,EAAApG,EAAA,UArkBA,WACA,GAAA8C,IACAG,EAAA,EACAE,EAAA,EACAE,OAAA,EACAC,MAAA,EACAS,MAAA,uBAEApD,GACAsC,EAAA,EACAE,EAAA,EACAE,OAAA,EACAC,MAAA,EACAS,MAAA,yBAEA+M,GACA7N,EAAA,EACAE,EAAA,EACAE,OAAA,EACAC,MAAA,EACAS,MAAA,uBAEAgN,GACA9N,EAAA,EACAE,EAAA,EACAE,OAAA,EACAC,MAAA,EACAS,MAAA,yBAEAiN,GACA/N,EAAA,EACAE,EAAA,EACAE,OAAA,EACAC,MAAA,EACA+E,UAAA,EACA4I,mBAAA,EACAlN,MAAA,qBAEA/D,EAAA,EAAAwB,EAAAuC,MAAAmN,mBACAhR,EAAA,GAAAsB,EAAAuC,MAAAmN,kBACA1P,GAAA+B,IAAAU,YAAAzC,EAAAuC,MAAAoN,qBACA3P,EAAA+B,IAAAwI,UAAAvK,EAAAuC,MAAAqN,qBAEAtO,EAAAG,GAAAyC,EAAAlE,EAAAuC,MAAAuK,eAAA9M,EAAAuC,MAAAqN,qBAAAlR,EACA4C,EAAAK,GAAAwL,EACA7L,EAAAQ,MAAA9B,EAAAuC,MAAAuK,eAAA9M,EAAAuC,MAAAqN,qBAAAlR,EACA4C,EAAAO,OAAAsC,EAAAgJ,EAAAnN,EAAAuC,MAAAuK,eAAApO,EAAAF,EACAwB,EAAA+B,IAAAO,UAAAtC,EAAAuC,MAAAsN,yBACArL,EAAAlD,EAAAG,EAAAH,EAAAK,EAAAL,EAAAQ,MAAAR,EAAAO,OAAArD,GACAiG,EAAAnD,EAAAG,EAAAH,EAAAK,EAAAL,EAAAQ,MAAAR,EAAAO,OAAArD,GAEA8Q,EAAA7N,EAAAH,EAAAG,EAAAzB,EAAAuC,MAAAmN,mBACAJ,EAAA3N,EAAAwL,EAAAnN,EAAAuC,MAAAmN,oBACApO,EAAAO,OAAA7B,EAAAkJ,UAAA4G,kBACA9P,EAAAkJ,UAAAD,UAAAjJ,EAAAkJ,UAAA6G,cACAT,EAAAxN,MAAA9B,EAAAuC,MAAAyN,kBACAV,EAAAzN,OAAA7B,EAAAkJ,UAAA4G,gBACA9P,EAAA+B,IAAAO,UAAAtC,EAAAuC,MAAA0N,kBACA,WAAArJ,KAAAqG,EAAAiD,WACAlQ,EAAA+B,IAAAO,UAAAtC,EAAAuC,MAAA4N,sBAEAb,EAAAzN,OAAAP,EAAAO,SACAoC,EAAAqL,EAAA7N,EAAA6N,EAAA3N,EAAA2N,EAAAxN,MAAAwN,EAAAzN,OAAA7B,EAAAuC,MAAA6N,0BACApQ,EAAA+B,IAAAoB,SACAnD,EAAA+B,IAAAqB,QAGAjE,EAAAsC,GAAAiL,EACAvN,EAAAwC,GAAAwC,EAAAnE,EAAAuC,MAAAuK,eAAApO,EACAS,EAAA2C,MAAAoC,EAAAlE,EAAAuC,MAAAuK,eAAAJ,EAAAhO,EAAAF,EACAW,EAAA0C,OAAA7B,EAAAuC,MAAAuK,eAAA9M,EAAAuC,MAAAqN,qBAAAlR,EACAsB,EAAA+B,IAAAO,UAAAtC,EAAAuC,MAAAsN,yBACArL,EAAArF,EAAAsC,EAAAtC,EAAAwC,EAAAxC,EAAA2C,MAAAtD,EAAAW,EAAA0C,QACA4C,EAAAtF,EAAAsC,EAAAtC,EAAAwC,EAAAxC,EAAA2C,MAAAtD,EAAAW,EAAA0C,QAEA0N,EAAA5N,EAAAxC,EAAAwC,EAAA3B,EAAAuC,MAAAmN,mBACAH,EAAA9N,EAAAiL,EAAA1M,EAAAuC,MAAAmN,oBACAvQ,EAAA2C,MAAA9B,EAAAkJ,UAAAmH,iBACArQ,EAAAkJ,UAAAC,WAAAnJ,EAAAkJ,UAAAoH,aACAf,EAAAzN,MAAA9B,EAAAkJ,UAAAmH,eACAd,EAAA1N,OAAA7B,EAAAuC,MAAAyN,kBACAhQ,EAAA+B,IAAAO,UAAAtC,EAAAuC,MAAA0N,kBACA,aAAArJ,KAAAqG,EAAAiD,WACAlQ,EAAA+B,IAAAO,UAAAtC,EAAAuC,MAAA4N,sBAEAZ,EAAAzN,MAAA3C,EAAA2C,QACAmC,EAAAsL,EAAA9N,EAAA8N,EAAA5N,EAAA4N,EAAAzN,MAAAyN,EAAA1N,OAAA7B,EAAAuC,MAAA6N,0BACApQ,EAAA+B,IAAAoB,SACAnD,EAAA+B,IAAAqB,QAGApD,EAAA+B,IAAAU,YAAAzC,EAAAuC,MAAAgO,2BACAvQ,EAAA+B,IAAAO,UAAAtC,EAAAuC,MAAAiO,+BACAhB,EAAA/N,EAAAtC,EAAAsC,EAAAtC,EAAA2C,MAAAtD,EACAgR,EAAA7N,EAAAL,EAAAK,EAAAL,EAAAO,OAAArD,EACAgR,EAAA1N,MAAA9B,EAAAuC,MAAAuK,eAAA9M,EAAAuC,MAAAqN,qBACAJ,EAAA3N,OAAA7B,EAAAuC,MAAAuK,eAAA9M,EAAAuC,MAAAqN,qBACA3L,EAAAuL,EAAA/N,EAAA+N,EAAA7N,EAAA6N,EAAA1N,MAAA0N,EAAA3N,OAAA,GACA7B,EAAA+B,IAAAoB,SACAnD,EAAA+B,IAAAqB,OACApD,EAAAqK,aAAAC,QAAAhJ,GACAtB,EAAAqK,aAAAC,QAAAgF,GACAtP,EAAAqK,aAAAC,QAAAnL,GACAa,EAAAqK,aAAAC,QAAAiF,GACAvP,EAAAqK,aAAAC,QAAAkF,GACAxP,EAAAkJ,UAAAuH,KACAnP,IACA6C,EAAAhF,GAEAa,EAAAkJ,UAAAwH,KACApP,EAAAgO,EACAnL,EAAAoL,MAijBA9E,GACAzK,EAAA2Q,QAAA,GAxFA,WACA3Q,EAAA+B,IAAAwI,UAAAvK,EAAAuC,MAAAqO,gBACA5Q,EAAA+B,IAAAU,YAAAzC,EAAAuC,MAAAsO,gBACApM,EAAA,IAAAzE,EAAA8B,MAAA9B,EAAA6B,WAwBA,WACAiE,EAAAC,EAAAC,GAAAsH,YAAAC,MAAA9N,CACA,IAAAf,EACAsB,GAAA8J,WAAAgH,QACA9Q,EAAA+B,IAAAqJ,KAAA,kBACA1M,KACAA,EAAAqS,MAAAjL,EAAAkL,OAAA,SAAA/E,EAAA3H,GACA,MAAA2H,GAAA3H,GACqB,GAAAwB,EAAA8F,QAAAqF,QAAA,GACrB,OACAnL,EAAAoL,IAAA,SAAAjF,GAAuD,MAAAA,GAAAgF,QAAA,KAAuBE,KAAA,UAC9EzS,EAAA0S,WAAAtS,OAAAgC,KAAAd,EAAAe,gBAAA6K,OACAlN,EAAAyK,WAAAnJ,EAAAkJ,UAAAC,WACAzK,EAAAuK,UAAAjJ,EAAAkJ,UAAAD,UACAvK,EAAAoP,eAAA9N,EAAA8N,eACApP,EAAAmP,eAAA7N,EAAA6N,eACAnP,EAAAiO,gBAAA3M,EAAA2M,gBACAjO,EAAAkO,gBAAA5M,EAAA4M,gBACAlO,EAAAgD,iBAAA1B,EAAA0B,iBACAhD,EAAAkD,gBAAA5B,EAAA4B,gBACAlD,EAAAoD,MAAA9B,EAAA8B,MACApD,EAAAmD,OAAA7B,EAAA6B,OACAnD,EAAA2S,OAAArR,EAAAsR,MAAA7P,EACA/C,EAAA6S,OAAAvR,EAAAsR,MAAA3P,EACAjD,EAAA8S,OAAAxR,EAAAyR,WAAAzR,EAAAyR,WAAAhQ,EAAA,EACA/C,EAAAgT,OAAA1R,EAAAyR,WAAAzR,EAAAyR,WAAA9P,EAAA,EACAjD,EAAAiT,SAAA3R,EAAAqK,aAAAuB,OACAlN,EAAAkT,SAAA5R,EAAA4R,SACAlT,EAAAyQ,SAAAnP,EAAAmP,SACAnP,EAAAkN,cACAxO,EAAA6I,YAAAvH,EAAAkN,YAAA3F,YACA7I,EAAAyH,SAAAnG,EAAAkN,YAAA/G,SACAzH,EAAAiL,gBAAA3J,EAAAkN,YAAAvD,gBACAjL,EAAAkL,aAAA5J,EAAAkN,YAAAtD,aACAlL,EAAAwR,QAAAlQ,EAAAkN,YAAAgD,QACAxR,EAAAmT,YAAA7R,EAAAkN,YAAA2E,YACAnT,EAAA6D,MAAAvC,EAAAkN,YAAA3K,MACA7D,EAAAsJ,KAAAhI,EAAAkN,YAAAlF,MAEAhI,EAAA+B,IAAA6I,OACA9L,OAAAgC,KAAApC,GAAAwB,QAAA,SAAA4R,EAAA9F,GACA,GAAAxN,GAAAsT,EAAA,KAAApT,EAAAoT,EAEA9R,GAAA+B,IAAAO,UAAA,2BACAkC,EAAAkI,EAFA,MAEAV,EAAA,IAFA,IAGAhM,EAAA+B,IAAAO,UAAA,mBACAoC,EAAAlG,EAAAkO,EAAA,EAAAS,EAJA,GAIAnB,KAEAhM,EAAA+B,IAAA8J,cAiBA7L,EAAA2I,cAAA,iBACA3I,EAAA+B,IAAA8J,cAGClL,MAAA/C,EAAA+B,MAAA9B,EAAAD,QAAAgC,IH0HK,SAAU/B,EAAQD,EAASM,GIrgCjC,GAAAyB,GAAAC,CAEAD,UA8kCCE,MA9kCDD,EAAA,WACA,YACA,iBAAAI,GACA,GAAA+R,IAA0BtQ,EAAA,EAAAE,EAAA,EAAAsH,UAAA,EAAAE,WAAA,GAC1B6I,GAA8B7I,WAAA,EAAAF,UAAA,GAC9BgJ,GAA0B9I,WAAA,EAAAF,UAAA,GAC1BiJ,EAAA,EACAC,EAAA,EACAC,GAAA,EACAC,GAAA,EACAC,EAAA,CACAtS,GAAAuS,YAAA,SAAAC,GACA,GAAAC,GAAAzS,EAAA0S,OAAAC,wBACA9N,GACApD,EAAA+Q,EAAAI,QAAA,GAAAC,QAAAJ,EAAAK,KACAnR,EAAA6Q,EAAAI,QAAA,GAAAG,QAAAN,EAAAO,IAMA,OAJAhT,GAAAgN,cACAnI,EAAApD,GAAAzB,EAAA0B,iBACAmD,EAAAlD,GAAA3B,EAAA4B,kBAGAH,EAAAoD,EAAApD,EACAE,EAAAkD,EAAAlD,EACA8Q,SAGAzS,EAAAiT,aAAA,WACAf,GAAAH,EAAA5I,WAAA8I,EAAA9I,aAAA4I,EAAAjN,EAAAmN,EAAAnN,GACAqN,GAAAJ,EAAA9I,UAAAgJ,EAAAhJ,YAAA8I,EAAAjN,EAAAmN,EAAAnN,GACAmN,GACA9I,WAAA4I,EAAA5I,WACAF,UAAA8I,EAAA9I,UACAnE,EAAAwI,YAAAC,MAAA,MAGAvN,EAAAkT,UAAA,SAAAV,GACA,kBACAW,cAAAnT,EAAAoT,iBACA,IAAAvO,GAAA7E,EAAAuS,YAAAC,EACAa,MAAAC,IAAAvB,EAAAtQ,GAAA4R,KAAAC,IAAAvB,EAAApQ,GAAA3B,EAAA8J,WAAAyJ,gBACAnB,EAAApS,EAAAwT,UAAA3O,EAAApD,EAAAoD,EAAAlD,GACA3B,EAAAyT,UAAAjB,EAAA3N,GACA7E,EAAA0T,UAAAlB,EAAA3N,GACA7E,EAAAyT,UAAAjB,EAAA3N,GACA7E,EAAAkB,UAIAlB,EAAA2T,WAAA,SAAAnB,GAIA,GAHAJ,GAAA,EACApS,EAAAyR,WAAAzR,EAAAuS,YAAAC,GACAH,EAAArS,EAAAwT,UAAAxT,EAAAyR,WAAAhQ,EAAAzB,EAAAyR,WAAA9P,GAAA,IACA3B,EAAA2I,cAAA,cAAkDiL,YAAApB,EAAApR,KAAApB,EAAAqS,gBAClDrS,EAAA4R,SAAA,CAGA,GAFA5R,EAAA6T,gBAAArB,GACAA,EAAAsB,iBACA,IAAAtB,EAAAI,QAAAhH,OACA,MAAA5L,GAAA+T,YAAAvB,EAAAxS,EAAAyR,WAEAzR,GAAAgU,kBACA7K,WAAAnJ,EAAAkJ,UAAAC,WACAF,UAAAjJ,EAAAkJ,UAAAD,UACAnE,EAAAwI,YAAAC,MAAA,KAEAwE,GACAtQ,EAAAzB,EAAAyR,WAAAhQ,EACAE,EAAA3B,EAAAyR,WAAA9P,EACAwH,WAAAnJ,EAAAkJ,UAAAC,WACAF,UAAAjJ,EAAAkJ,UAAAD,UACAnE,EAAA,GAEA9E,EAAAiU,UAAAzB,GACA0B,aAAAlU,EAAAmU,cACAhB,cAAAnT,EAAAoT,kBACApT,EAAAmU,aAAAC,WAAApU,EAAAkT,UAAAV,GAAAxS,EAAA8J,WAAAuK,mBACArU,EAAAoT,iBAAAkB,YAAAtU,EAAAiT,aAAA,IACAjT,EAAAuU,oBAAA,EACAC,SAAAC,KAAAC,iBAAA,YAAA1U,EAAAiU,WAAyEU,SAAA,IACzEH,SAAAC,KAAAC,iBAAA,WAAA1U,EAAA4U,UAAA,GACAJ,SAAAC,KAAAC,iBAAA,cAAA1U,EAAA6U,aAAA,KAEA7U,EAAA8U,OAAA,SAAAhQ,EAAAR,EAAA7F,EAAAC,GACA,MAAAD,IAAAqG,EAAApG,IAAA,EAAAoG,GAAAR,GAEAtE,EAAA+U,kBAAA,WACA,IAAA/U,EAAA0S,SAAA1S,EAAAkJ,UAAA8L,SAA2D,MAAAC,uBAAAjV,EAAA+U,kBAC3D,IAAAtT,GACAE,EAGAmD,EAFA3F,EAAAmO,YAAAC,MAAA,IACA7O,EAAAsB,EAAA8J,WAAAoL,gCAAA,GAIA,IAFAnD,EAAAjN,EAAAiN,EAAAjN,GAAA3F,EAAAT,GACAoG,EAAA3F,EAAA4S,EAAAjN,EAAA,GACA,GAAA9E,EAAAuU,oBAAAjC,EAAA,IAIA,MAHAA,GAAA,EACAtS,EAAAuU,oBAAA,OACAvC,GAAkC7I,YAAA,EAAAF,WAAA,GAGlCqJ,IAAA,EACA7Q,EAAAzB,EAAA8U,OAAAhQ,EAAAiN,EAAA5I,YAAA6I,EAAA7I,WAAAzK,GACAiD,EAAA3B,EAAA8U,OAAAhQ,EAAAiN,EAAA9I,WAAA+I,EAAA/I,UAAAvK,GACAsB,EAAAkJ,UAAA8L,SAAAvT,EAAAE,GACAsT,sBAAAjV,EAAA+U,oBAEA/U,EAAA4U,SAAA,SAAApC,GACA,IAAAxS,EAAA2I,cAAA,YAAgDiL,YAAApB,IAAhD,CACA,GAAA2C,GAAA9B,KAAAC,IAAAvB,EAAAtQ,GAAA4R,KAAAC,IAAAvB,EAAApQ,GAAA3B,EAAA8J,WAAAyJ,cACA1O,GACApD,EAAAzB,EAAAyR,WAAAhQ,EAAAsQ,EAAAtQ,EACAE,EAAA3B,EAAAyR,WAAA9P,EAAAoQ,EAAApQ,GAEAP,EAAApB,EAAAwT,UAAA3O,EAAApD,EAAAoD,EAAAlD,EACA3B,GAAA4R,WACAQ,EACApS,EAAAoV,QAAA5C,EAAAxS,EAAAyR,YACa0D,IACb/T,EAAAiG,OACArH,EAAAqV,YAAAjU,EAAAmG,YAAAnG,EAAA+E,WAEAnG,EAAA0T,UAAAlB,EAAAxS,EAAAyR,YACAzR,EAAAoV,QAAA5C,EAAAxS,EAAAyR,YACAzR,EAAAsV,MAAA9C,EAAAxS,EAAAyR,cAGAW,GAAA,EACAoC,SAAAC,KAAAc,oBAAA,YAAAvV,EAAAiU,WAA4EU,SAAA,IAC5EH,SAAAC,KAAAc,oBAAA,WAAAvV,EAAA4U,UAAA,GACAJ,SAAAC,KAAAc,oBAAA,cAAAvV,EAAA6U,aAAA,GACAX,aAAAlU,EAAAmU,cACAhB,cAAAnT,EAAAoT,kBACApT,EAAAiT,eACAjB,EAAA7I,WAAA+I,EAAAlS,EAAA8J,WAAA0L,yBACAxD,EAAA/I,UAAAkJ,EAAAnS,EAAA8J,WAAA0L,yBACAxV,EAAAuU,oBAAA,EACA,IAAAjC,GAAA,WAAA1L,KAAAyL,EAAA9P,QAAA4S,GACAnV,EAAA+U,uBAGA/U,EAAAiU,UAAA,SAAAzB,GACA,GAAA9T,GAAAsB,EAAAuS,YAAAC,EACAxS,GAAA2I,cAAA,aAAiDiL,YAAApB,EAAApR,KAAApB,EAAAkN,gBACjDlN,EAAA6T,gBAAArB,GACAA,EAAAsB,iBACA9T,EAAA4R,WACAG,GACAtQ,EAAA/C,EAAA+C,EAAAzB,EAAAyR,WAAAhQ,EACAE,EAAAjD,EAAAiD,EAAA3B,EAAAyR,WAAA9P,EACAwH,WAAAnJ,EAAAkJ,UAAAC,WACAF,UAAAjJ,EAAAkJ,UAAAD,UACAnE,EAAA,GAEA,mBAAA8B,KAAAyL,EAAA9P,OACAvC,EAAAkJ,UAAAD,UAAAjJ,EAAAkJ,UAAA6G,cAAArR,EAAAiD,EAAA3B,EAAA6B,QACa,qBAAA+E,KAAAyL,EAAA9P,OACbvC,EAAAkJ,UAAAC,WAAAnJ,EAAAkJ,UAAAoH,aAAA5R,EAAA+C,EAAAzB,EAAA8B,OACasQ,GACbpS,EAAAyT,UAAAjB,EAAA9T,GACAsB,EAAAkB,QAEA,IAAAoR,GACAtS,EAAAkJ,UAAA8L,SAAAhV,EAAAgU,iBAAA7K,WAAA4I,EAAAtQ,EACAzB,EAAAgU,iBAAA/K,UAAA8I,EAAApQ,MAIA3B,EAAA6U,YAAA,SAAArC,GACAxS,EAAA2I,cAAA,eAAmDiL,YAAApB,EAAApR,KAAApB,EAAAkN,eACnDlN,EAAA4R,WACAQ,GAAA,EACAoC,SAAAC,KAAAc,oBAAA,YAAAvV,EAAAiU,WAA4EU,SAAA,IAC5EH,SAAAC,KAAAc,oBAAA,WAAAvV,EAAA4U,UAAA,GACAJ,SAAAC,KAAAc,oBAAA,cAAAvV,EAAA6U,aAAA,KAGA7U,EAAA6T,gBAAA,SAAArB,GAA6CA,EAAAqB,mBAC7C7T,EAAA0U,iBAAA,SAAArM,EAAAoN,GACAzV,EAAA0V,OAAArN,GAAArI,EAAA0V,OAAArN,OACArI,EAAA0V,OAAArN,GAAAiC,QAAAmL,IAEAzV,EAAAuV,oBAAA,SAAAlN,EAAAoN,IACAzV,EAAA0V,OAAArN,QAAAnI,QAAA,SAAAyV,EAAAC,GACAH,IAAAE,GACA3V,EAAA0V,OAAArN,GAAAwN,OAAAD,EAAA,MAIA5V,EAAA2I,cAAA,SAAAN,EAAAmK,GAEA,QAAAsB,KACAgC,GAAA,EAFA,GAAAA,EAIA,IAAA9V,EAAA0V,OAAArN,GAMA,MALArI,GAAA0V,OAAArN,GAAAnI,QAAA,SAAAuV,GACAjD,EAAAzQ,IAAA/B,EAAA+B,IACAyQ,EAAAsB,iBACA2B,EAAA9U,MAAAX,EAAAI,MAAAoS,MAEAsD,GAEA9V,EAAA2Q,OAAA,SAAAoF,GACA,GAEAhG,GACAO,EAHA0F,EAAA,EAAAhW,EAAAuC,MAAAiG,gBACAyN,EAAA,EAAAjW,EAAAuC,MAAA2T,4BAGA/I,EAAAnN,EAAAoN,yBACAV,EAAA1M,EAAAqN,0BAyDA,OArDArN,GAAAgN,aACAhN,EAAA6B,OAAA7B,EAAAuJ,WAAAD,aACAtJ,EAAA8B,MAAA9B,EAAAuJ,WAAAF,cAEArJ,EAAAuJ,WAAAvJ,EAAAmW,cACAnW,EAAAoW,iBACApW,EAAA6B,OAAA7B,EAAAmW,cAAA7M,aACAtJ,EAAA8B,MAAA9B,EAAAmW,cAAA9M,YACArJ,EAAA0S,OAAA7Q,OAAA7B,EAAA6B,OAAArB,OAAAmN,iBACA3N,EAAA0S,OAAA5Q,MAAA9B,EAAA8B,MAAAtB,OAAAmN,iBACA3N,EAAA0S,OAAAnQ,MAAAV,OAAA7B,EAAA6B,OAAA,KACA7B,EAAA0S,OAAAnQ,MAAAT,MAAA9B,EAAA8B,MAAA,MAEA9B,EAAA4B,gBAAA5B,EAAAD,KAAA6B,iBAAA,EACA5B,EAAA0B,iBAAA1B,EAAAD,KAAA2B,kBAAA,GAEAqO,EAAA/P,EAAA4D,KAAAoN,OAAA,SAAAqF,EAAA/N,GACA,MAAA+N,IACArW,EAAAoI,MAAAR,KAAAU,EAAAtI,EAAA6D,YAAA7D,EAAAuC,MAAA6G,aACApJ,EAAAoI,MAAAqE,MAAAnE,EAAAtI,EAAA6D,YAAA,GACAmS,GACa,MACb1F,EAAAtQ,EAAAyN,mBAAAuD,OAAA,SAAAqF,EAAAC,GACA,MAAAA,GAAAC,OAAoCF,EACpCA,GAAArW,EAAAoI,MAAAP,QAAAyO,EAAAtW,EAAA6D,YAAAyS,EAAAxU,OAAA9B,EAAAuC,MAAAgG,aAAAyN,GACa,MACbhW,EAAA8J,WAAAiE,aACAgC,GAAA/P,EAAAuC,MAAA6G,WAAA4M,GAEAhW,EAAAkJ,UAAApH,MAAA9B,EAAA8B,MAAA4K,EACA1M,EAAAkJ,UAAArH,OAAA7B,EAAA6B,OAAAsL,EAAA8I,EACAjW,EAAAkJ,UAAA8J,IAAA7F,EAAA8I,EACAjW,EAAAkJ,UAAA4J,KAAApG,EACA1M,EAAAkJ,UAAA6G,eAAA/P,EAAAuC,MAAAuK,eAAA9M,EAAAkJ,UAAArH,OACA7B,EAAAkJ,UAAAoH,cAAAtQ,EAAAuC,MAAAuK,eAAA9M,EAAAkJ,UAAApH,MACA9B,EAAAkJ,UAAAsN,eAAAxW,EAAAkJ,UAAApH,MApCA,KAqCA9B,EAAAkJ,UAAAoH,YAAAtQ,EAAAkJ,UAAApH,MArCA,IAsCA9B,EAAAkJ,UAAAmH,eAAArQ,EAAAkJ,UAAApH,MACA9B,EAAAkJ,UAAAsN,cACAxW,EAAAuC,MAAAuK,eACA9M,EAAAkJ,UAAAuN,gBAAAzW,EAAAkJ,UAAArH,OA1CA,KA2CA7B,EAAAkJ,UAAA6G,cAAA/P,EAAAkJ,UAAArH,OA3CA,KA4CA7B,EAAAkJ,UAAA4G,gBAAA9P,EAAAkJ,UAAArH,OACA7B,EAAAkJ,UAAAuN,eACAzW,EAAAuC,MAAAuK,eACA9M,EAAAkJ,UAAAmH,eAAAgD,KAAAqD,IAAA1W,EAAAkJ,UAAAmH,eAAArQ,EAAAuC,MAAAoU,qBACA3W,EAAAkJ,UAAA4G,gBAAAuD,KAAAqD,IAAA1W,EAAAkJ,UAAA4G,gBAAA9P,EAAAuC,MAAAoU,qBACA3W,EAAA4W,KAAA5W,EAAAyI,YAAAmD,OAAA,EAAA5L,EAAA8J,WAAA+M,kBACA7W,EAAA8W,kBACAf,GACA/V,EAAAkB,MAAA,GAEAlB,EAAA2I,cAAA,cACA,GAEA3I,EAAA8W,gBAAA,WACA,GAAA9W,EAAA+W,MAAA,CACA,GAAAlS,GAAA7E,EAAA0S,OAAAC,wBACAjT,EAAAM,EAAAgX,aAAAhX,EAAA0S,QACAuE,EAAA,EAAAjX,EAAAuC,MAAAiG,gBACApH,EAAApB,EAAAkX,sBAAAlX,EAAA+W,MAAAI,SAAA5P,YAAAvH,EAAA+W,MAAAI,SAAAhR,YAC4B1E,GAAA,IAAAE,GAAA,IAAAE,OAAA,EAAAC,MAAA,EAC5B9B,GAAA+W,MAAAxU,MAAAuQ,KAAAjO,EAAAiO,KAAA1R,EAAAK,EAAAzB,EAAAuC,MAAAiG,gBAAAxI,EAAA0B,iBAAAhC,EAAAoT,KAAA,KACA9S,EAAA+W,MAAAxU,MAAAyQ,IAAAnO,EAAAmO,IAAA5R,EAAAO,EAAAsV,EAAAjX,EAAA4B,gBAAAlC,EAAAsT,IAAA,KACAhT,EAAA+W,MAAAxU,MAAAV,OAAAT,EAAAS,OAAAoV,EAAA,OACAjX,EAAA+W,MAAAxU,MAAAT,MAAAV,EAAAU,MAAAmV,EAAAjX,EAAAuC,MAAA6U,gBAAA,KACApX,EAAAqX,YAAArX,EAAA+W,SAGA/W,EAAAsX,OAAA,SAAA9E,GACA,GAAA9S,GAAAM,EAAAyN,mBACAuI,EAAA,EAAAhW,EAAAuC,MAAAiG,eAKA,KAJAxI,EAAA8N,eAAA,EACA9N,EAAA6N,eAAA,EACA7N,EAAA2M,gBAAA,EACA3M,EAAA4M,gBAAA,EACA5M,EAAA6N,eAAA7N,EAAAkJ,UAAAD,WAAAjJ,EAAA8N,eAAA9N,EAAA4D,KAAAgI,QACA5L,EAAA6N,iBACA7N,EAAAoI,MAAAR,KAAA5H,EAAA4D,KAAA5D,EAAA8N,gBAAA9N,EAAA6D,YAAA7D,EAAAuC,MAAA6G,aACApJ,EAAAoI,MAAAqE,MAAAzM,EAAA4D,KAAA5D,EAAA8N,gBAAA9N,EAAA6D,YAAA,GACAmS,EACAhW,EAAA8N,gBAAA,CAEA,MAAA9N,EAAA4M,gBAAA5M,EAAAkJ,UAAAC,YAAAnJ,EAAA2M,gBAAAjN,EAAAkM,QACA5L,EAAA4M,iBACA5M,EAAAoI,MAAAP,QAAAnI,EAAAM,EAAA2M,iBAAA3M,EAAA6D,YAAAnE,EAAAM,EAAA2M,iBAAA7K,MACA9B,EAAA2M,iBAAA,CAEA3M,GAAA4D,KAAAgI,OAAA,IACA5L,EAAA2M,gBAAA0G,KAAAqD,IAAA1W,EAAA2M,gBAAA,KACA3M,EAAA4M,gBAAAyG,KAAAqD,IAAA1W,EAAA4M,iBACA5M,EAAAoI,MAAAP,QAAAnI,EAAAM,EAAA2M,iBAAA3M,EAAA6D,YAAAnE,EAAAM,EAAA2M,iBAAA7K,OAAA,GACA9B,EAAA8N,eAAAuF,KAAAqD,IAAA1W,EAAA8N,eAAA,KACA9N,EAAA6N,eAAAwF,KAAAqD,IAAA1W,EAAA6N,gBACA7N,EAAAoI,MAAAR,KAAA5H,EAAA4D,KAAA5D,EAAA8N,gBAAA9N,EAAA6D,YAAA7D,EAAAuC,MAAA6G,aACApJ,EAAAoI,MAAAqE,MAAAzM,EAAA4D,KAAA5D,EAAA8N,gBAAA9N,EAAA6D,YAAA,OAEA7D,EAAAgF,iBACAhF,EAAAkB,MAAA,GAGA+T,sBAAAjV,EAAA8W,iBACA9W,EAAA2I,cAAA,UAA0CqK,IAAAhT,EAAAkJ,UAAAD,UAAA6J,KAAA9S,EAAAkJ,UAAAC,cAE1CnJ,EAAAyT,UAAA,SAAAjB,EAAA+E,GACA,IAAAvX,EAAAwX,cAAAxX,EAAA+W,MAAA,CAGA/W,EAAAsR,MAAAiG,GAAAvX,EAAAyX,YAAAjF,EACA,IACAnU,GAEAqZ,EACAC,EAIAC,EARAC,EAAArF,EAAAsF,YAAAtF,EAAAuF,SAAA/X,EAAA8J,WAAAkO,wBAEAtY,EAAAM,EAAAiY,YAGAxW,EAAAzB,EAAAsR,MAAA7P,EACAE,EAAA3B,EAAAsR,MAAA3P,EACA9C,EAAAmB,EAAAwT,UAAA/R,EAAAE,GAEA0G,GAAsBuL,YAAApB,EAAApR,KAAAvC,EAAA4C,IAAAE,KACtBuW,EAAAlY,EAAAkN,WAKA,IAJAgH,aAAAlU,EAAAmY,aACAnY,EAAAoY,UAAgC3W,IAAAE,QAChC3B,EAAA4R,UAAA,IAEA5R,EAAA2I,cAAA,YAAAN,KAGAxJ,GAAAmB,EAAAkN,cAAAlN,EAAAkN,YAAA/G,WAAAtH,EAAAsH,UACAnG,EAAAkN,YAAA3F,cAAA1I,EAAA0I,eACAvH,EAAAqY,qBAAA,EACAhQ,EAAAjH,KAAA8W,EACAlY,EAAA2I,cAAA,eAAAN,GACAA,EAAAjH,KAAAvC,EACAmB,EAAA2I,cAAA,gBAAAN,IAEArI,EAAAkN,YAAArO,EACAmB,EAAA4R,UAAA,CAIA,GADA5R,EAAAoH,WACApH,EAAAsY,cACAzZ,IACA,IAAAmB,EAAAuY,YAAArR,QAAArI,EAAAqR,WACAlQ,EAAAwY,SAAA3Z,EACAmB,EAAAmP,SAAAtQ,EAAAgT,YACA7R,EAAA0S,OAAAnQ,MAAAkW,OAAA5Z,EAAAqR,QACA,SAAArR,EAAAqR,SAAArR,EAAA+E,OACA5D,EAAA0S,OAAAnQ,MAAAkW,OAAA,UACAzY,EAAAoH,OAAAvI,EAAA+E,KAAA5D,EAAA6D,YAAAhF,EAAA0I,eAEAvH,EAAA0Y,WAAA1Y,EAAA6O,gBACA,SAAAhQ,EAAAqR,SACArR,EAAA+E,MAAA,CA4CA,GA3CA+T,EAAA3X,EAAA2Y,qBACAf,GACAnW,EAAA4R,KAAAC,IAAAtT,EAAA4Y,UAAAnX,KACAE,EAAA0R,KAAAC,IAAAtT,EAAA4Y,UAAAjX,OAEA,IAAA3B,EAAA6Y,gBAAAtR,aAAAiL,EAAAsG,WACA9Y,EAAA6Y,iBACA1S,SAAAnG,EAAAsH,WAAAnB,SACAoB,YAAAvH,EAAAsH,WAAAC,cAGAmQ,GACA1E,IAAAK,KAAA0F,IAAA/Y,EAAA6Y,gBAAA1S,SAAAtH,EAAAsH,UACA2M,KAAAO,KAAA0F,IAAA/Y,EAAA6Y,gBAAAtR,YAAA1I,EAAA0I,aACAyR,OAAA3F,KAAAqD,IAAA1W,EAAA6Y,gBAAA1S,SAAAtH,EAAAsH,UACA8S,MAAA5F,KAAAqD,IAAA1W,EAAA6Y,gBAAAtR,YAAA1I,EAAA0I,eAEA,IAAAvH,EAAA6Y,gBAAAtR,cACAmQ,EAAA5E,MAAA,EACA4E,EAAAuB,MAAAvZ,EAAAkM,OAAA,EACA8L,EAAA1E,IAAAK,KAAA0F,IAAApB,EAAA3E,IAAAnU,EAAAsH,UACAuR,EAAAsB,OAAA3F,KAAAqD,IAAAiB,EAAAqB,OAAAna,EAAAsH,WAEAnG,EAAA6Y,gBAAA1S,WAAAtH,EAAAsH,UACAnG,EAAA6Y,gBAAAtR,cAAA1I,EAAA0I,cACAvH,EAAAkZ,iBAAA,IAEAlZ,EAAAqY,qBAAA,IAAAT,EAAAnW,GAAA,IAAAmW,EAAAjW,GAAA3B,EAAA8J,WAAAqE,oBACAnO,EAAA8J,WAAAqE,mBAAA,IAAAnO,EAAA6Y,gBAAAtR,YACAvH,EAAAmZ,UAAAta,EAAAsH,SAAA0R,GAAA,IAEA7X,EAAAoZ,oBAAAva,EAAAsH,SACAnG,EAAAiH,WAAApI,EAAAsH,YAAA,IAAAnG,EAAAiH,WAAApI,EAAAsH,UAAAe,QAAArI,EAAA0I,cACAvH,EAAAiH,WAAApI,EAAAsH,UAAA0P,OAAA7V,EAAAiH,WAAApI,EAAAsH,UAAAe,QAAArI,EAAA0I,aAAA,IAGAvH,EAAAiH,WAAApI,EAAAsH,UAAAnG,EAAAiH,WAAApI,EAAAsH,eACA,IAAAnG,EAAAiH,WAAApI,EAAAsH,UAAAe,QAAArI,EAAA0I,cACAvH,EAAAiH,WAAApI,EAAAsH,UAAAuC,KAAA7J,EAAA0I,iBAKAvH,EAAAqZ,iBAAA3B,EAAA1E,MAAAhT,EAAAqZ,gBAAArG,KACA0E,EAAA5E,OAAA9S,EAAAqZ,gBAAAvG,MACA4E,EAAAsB,SAAAhZ,EAAAqZ,gBAAAL,QACAtB,EAAAuB,QAAAjZ,EAAAqZ,gBAAAJ,OAAApB,GAGA,GAFA7X,EAAAiH,cACA0Q,EAAAD,EACA1X,EAAA8J,WAAAqE,iBACA,IAAA9P,EAAAsZ,EAAA3E,IAAiD3U,GAAAsZ,EAAAqB,OAAqB3a,GAAA,EACtE2B,EAAAmZ,UAAA9a,GAAA,UAGA2B,GAAAsZ,WAAA3B,GAAA,EAGA3X,GAAAuZ,eAAA/G,EAAA/Q,EAAAE,EAAAkW,GAGA7X,EAAAqY,qBAAA,EACArY,EAAAkB,MAAA,MASAlB,EAAAwZ,QAAA,SAAAC,GAGA,QAAAC,KACAD,GAAA,EAHA,GAAArY,GAAApB,EAAA+W,MAAAI,SACAxV,EAAAP,EAAA+E,QAIA,IAAAnG,EAAA2I,cAAA,iBACAvH,OACAuY,SAAA3Z,EAAA+W,MAAA7R,MACA0U,SAAAxY,EAAA8D,MACAuU,MAAAC,EACA3C,MAAA/W,EAAA+W,QACqB,QACrB,IAAA/W,EAAA+W,MAAA7R,QAAA9D,EAAA8D,QAAAuU,EAAA,CAIA,GAHAzZ,EAAA6Z,QAAAlY,GAAA3B,EAAA6Z,QAAAlY,OACA3B,EAAA6Z,QAAAlY,GAAAP,EAAAiF,OAAA1H,MAAAqB,EAAA+W,MAAA7R,MACA9D,EAAAwC,KAAAxC,EAAAiF,OAAA1H,MAAAqB,EAAA+W,MAAA7R,MACAvD,IAAA3B,EAAA4D,KAAAgI,OAAA,CACA,GAAA5L,EAAA2I,cAAA,UACAzD,MAAAlF,EAAA+W,MAAA7R,MACA4U,aAAA1Y,EAAA8D,MACA6U,QAAAN,EACArY,OACA2V,MAAA/W,EAAA+W,QAC6B,QAC7B/W,GAAAga,KAAA,EACAha,EAAAia,OAAA7Y,EAAAwC,MACA5D,EAAAka,mBAEAla,EAAAkB,MAAA,GAWA,MATAsT,UAAAC,KAAA0F,YAAAna,EAAA+W,OACA/W,EAAAoa,aAAAC,QACAra,EAAA2I,cAAA,WACAvH,OACA8D,MAAAlF,EAAA+W,MAAA7R,MACA6U,QAAAN,EACA1C,MAAA/W,EAAA+W,QAEA/W,EAAA+W,UAAAlX,IACA,GAUAG,EAAAqV,YAAA,SAAA5T,EAAAE,GACA,GAAA3B,EAAA8J,WAAAwQ,SAAA,CACA,GAEAC,GAFAnZ,EAAApB,EAAAkX,sBAAAzV,EAAAE,GACAjC,EAAAM,EAAAyN,kBAEA,IAAAzN,EAAA2I,cAAA,mBAAuDvH,SAAe,QACtEpB,GAAAwa,eAAA/Y,EAAAE,GACA3B,EAAAya,cAAAhZ,EAAAE,GACAP,EAAAiF,OAAAqU,KACA1a,EAAA+W,MAAAvC,SAAAmG,cAAA,UAEA3a,EAAA+W,MAAAvC,SAAAmG,cAAA3a,EAAA8J,WAAA8Q,UACA,oBAEA,WACA,GAAAC,GAAAC,CACA1Z,GAAApB,EAAAkX,sBAAAzV,EAAAE,GACAP,EAAAiF,OAAAqU,OAEA,kBAAAtZ,GAAAiF,OAAAqU,KACAH,EAAAnZ,EAAAiF,OAAAqU,KAAA/Z,MAAAX,EAAAI,OAAwEgB,UACnDf,MAAAoH,QAAArG,EAAAiF,OAAAqU,QACrBH,EAAAnZ,EAAAiF,OAAAqU,MAEAH,EAAAra,QAAA,SAAAsS,GACA,GACA/L,GACAuD,EAFA3L,EAAAmW,SAAAmG,cAAA,SAGAta,OAAAoH,QAAA+K,IACA/L,EAAA+L,EAAA,GACAxI,EAAAwI,EAAA,KAEA/L,EAAA+L,EACAxI,EAAAwI,GAEA/L,IAAArF,EAAA8D,QAAiD4V,GAAA,GACjDzc,EAAA6G,MAAAuB,EACApI,EAAAkD,UAAAyI,EACAhK,EAAA+W,MAAAgE,YAAA1c,KAEAyc,IACAD,EAAArG,SAAAmG,cAAA,UACAE,EAAA3V,MAAA9D,EAAA8D,MACA2V,EAAAtZ,UAAAH,EAAA8D,MACAlF,EAAA+W,MAAAgE,YAAAF,IAEA7a,EAAA+W,MAAArC,iBAAA,oBACA1U,EAAAwZ,UACAxZ,EAAAkB,MAAA,MAGAsT,SAAAC,KAAAsG,YAAA/a,EAAA+W,OACA/W,EAAAgb,kBAAAhb,EAAA+W,MAAA,8BACA/W,EAAA+W,MAAAxU,MAAA0Y,SAAA,WACAjb,EAAA+W,MAAAI,SAAA/V,EACApB,EAAA8W,kBACA9W,EAAA+W,MAAAxU,MAAA2Y,OAAA,IACAlb,EAAA+W,MAAA7R,MAAA9D,EAAA8D,MACAlF,EAAA+W,MAAAsD,QACAra,EAAA+W,MAAArC,iBAAA,QAAA1U,EAAA6T,iBACA7T,EAAA+W,MAAArC,iBAAA,WAAA1U,EAAA6T,iBACA7T,EAAA+W,MAAArC,iBAAA,UAAA1U,EAAA6T,iBACA7T,EAAA+W,MAAArC,iBAAA,YAAA1U,EAAA6T,iBACA7T,EAAA+W,MAAArC,iBAAA,mBAAAlC,GACA,GAAA2I,GAAA/Z,EAAAmG,YACA6T,EAAAha,EAAA+E,QAEA,SAAAqM,EAAA6I,QACArb,EAAAwZ,SAAA,GACAxZ,EAAAkB,MAAA,OAEqB,SAAAsR,EAAA6I,WACrBrb,EAAA8J,WAAA8Q,WACA5a,EAAA8J,WAAA8Q,WAAApI,EAAAsG,UACA9Y,EAAAwZ,UACAxZ,EAAAkB,MAAA,OACqB,QAAAsR,EAAA6I,QAAA,CAErB,GADA7I,EAAAsB,kBACA9T,EAAAwZ,UACA,MAEAhH,GAAAsG,SACAqC,GAAA,EAEAA,GAAA,EAEAA,EAAA,IACAA,EAAAzb,EAAAkM,OAAA,EACAwP,GAAA,GAEAD,EAAAzb,EAAAkM,OAAA,IACAuP,EAAA,EACAC,GAAA,GAEAA,EAAA,IACAA,EAAApb,EAAA4D,KAAAgI,OAAA,GAEAwP,EAAApb,EAAA4D,KAAAgI,OAAA,IACAwP,EAAA,GAEApb,EAAAqV,YAAA8F,EAAAC,SAKApb,EAAA2I,cAAA,aAA6CvH,OAAA2V,MAAA/W,EAAA+W,UAE7C/W,EAAAsV,MAAA,SAAA9C,EAAA+E,GASA,QAAA+D,KACAC,GACAvb,EAAA2I,cAAA,oBACA6S,aAAAxb,EAAAyb,kBACAxU,WAAAjH,EAAAiH,WACAoS,gBAAArZ,EAAAqZ,kBAbA,GAAAhb,GACAkd,EACA1D,EAAArF,EAAAsF,YAAAtF,EAAAuF,SAAA/X,EAAA8J,WAAAkO,wBACAnT,EAAA0S,GAAAvX,EAAAyX,YAAAjF,EAEA,IADAxS,EAAAkN,YAAAlN,EAAAwT,UAAA3O,EAAApD,EAAAoD,EAAAlD,OACA9B,KAAAG,EAAAkN,YAAApN,KAAA,CAcA,GAHAE,EAAA+W,OACA/W,EAAAwZ,UAEAxZ,EAAAkZ,gBAEA,YADAlZ,EAAAkZ,iBAAA,EAIA,IADA7a,EAAA2B,EAAAkN,aACAlN,EAAA2I,cAAA,SAA6CiL,YAAApB,EAAApR,KAAApB,EAAAkN,eAC7ClN,EAAA4R,SAAA,CAGA,YAAA5R,EAAAkN,YAAAgD,QAAA,CACA,kBAAAlQ,EAAAkN,YAAA3K,MAIA,MAHAvC,GAAA0O,MAAA1O,EAAA6D,SAAA,OACA7D,EAAA0b,gBACAJ,IAGA,yBAAAtb,EAAAkN,YAAA3K,MAAA,CACA,YAAAvC,EAAA8J,WAAA6R,0BAQA,MAPA3b,GAAAmL,UAAA9M,EAAAgI,OAAA1H,KACAqB,EAAA8C,eAAA,QAAA9C,EAAA8C,eAAA,aAEA9C,EAAA8C,eAAA,MAEA9C,EAAA0O,MAAArQ,EAAAgI,OAAA1H,KAAAqB,EAAA8C,oBACAwY,IAGA,eAAAtb,EAAA8J,WAAA6R,0BAIA,MAHA3b,GAAA4b,aAAAvd,EAAAgI,OAAA2F,MAAA6L,EAAArF,EAAAsG,UAAA,GACAwC,QACAtb,GAAAkB,OAQA,IAJA,yCAAAgG,QAAAlH,EAAAkN,YAAA3K,QAAAsV,GACA7X,EAAAya,cAAApc,EAAAkJ,YAAAlJ,EAAA8H,UAEAnG,EAAAiH,WAAA5I,EAAA8H,UAAAnG,EAAAiH,WAAA5I,EAAA8H,cACAnG,EAAA8J,WAAAqE,kBAAA,kBAAAnO,EAAAkN,YAAA3K,MAAA,CACA,qBAAAvC,EAAAkN,YAAA3K,OACAvC,EAAA8J,WAAAgB,MAAAjG,EAAApD,EAAA,GACAoD,EAAApD,EAAAzB,EAAAkN,YAAAzL,EAAAzB,EAAAuC,MAAAuB,eACA9D,EAAAuC,MAAAkB,oBACAzD,EAAAuC,MAAAyB,qBAAAhE,EAAAuC,MAAAsZ,sBACAhX,EAAAlD,EAAA3B,EAAAkN,YAAAvL,EAAA3B,EAAAuC,MAAAwB,gBACA/D,EAAAuC,MAAAmB,mBAAA1D,EAAAuC,MAAAsZ,sBACAhX,EAAAlD,EAAA,EAEA,WADA3B,GAAA8b,WAAAzd,EAAA8H,SAGAoV,IAAA,EACAvb,EAAAmZ,UAAA9a,EAAA8H,SAAA0R,GAAA,GAEArF,EAAAsG,WAAAjB,IACA7X,EAAAqZ,gBAAArZ,EAAA2Y,qBACA3Y,EAAAsZ,eAAAzZ,IAAA,IAGAyb,IACAtb,EAAAkB,MAAA,MAEAlB,EAAA+b,iBAAA,SAAAvJ,GACA,GAAA3N,GAAApD,EAAAE,CAUA,OATAkD,GAAA7E,EAAAyX,YAAAjF,GACA/Q,EAAAzB,EAAAgc,sBAAAnX,EAAApD,EAAAzB,EAAA4Y,UAAAnX,EACAE,EAAA3B,EAAAic,uBAAApX,EAAAlD,EAAA3B,EAAA4Y,UAAAjX,EACAF,EAAAzB,EAAAuC,MAAA2Z,iBACAza,EAAAzB,EAAAuC,MAAA2Z,gBAEAva,EAAA3B,EAAAuC,MAAA4Z,eACAxa,EAAA3B,EAAAuC,MAAA4Z,eAEAnc,EAAA2I,cAAA,gBAAoDlH,IAAAE,IAAA2W,aAAAtY,EAAAsY,iBACpDtY,EAAAkJ,UAAAC,WAAAnJ,EAAAkJ,UAAAoH,YAAAtQ,EAAA8J,WAAAsS,kBACA,cAAApc,EAAAmP,WACAnP,EAAA2Q,QAAA,GACA3Q,EAAAkJ,UAAAC,YAAA1H,GAEA,cAAAzB,EAAAmP,UACAnP,EAAAoI,MAAAP,QAAA,kBAAA7H,EAAAsY,aAAAjS,OAAA9D,MACA,aAAAvC,EAAAsY,aAAAjS,OAAArG,EAAA6D,WAAApC,GACA,mCAAAyF,QAAAlH,EAAAsY,aAAAjS,OAAA9D,QACAvC,EAAA2Q,QAAA,OAEA3Q,GAAAqc,oBAGA,cAAArc,EAAAmP,UACAnP,EAAAsY,aAAA5O,QACA1J,EAAAoI,MAAAqE,MAAAzM,EAAAsY,aAAA1U,KAAA5D,EAAA6D,WAAAlC,EACiB3B,EAAA8J,WAAAwS,gBACjBtc,EAAAuC,MAAA6G,WAAAzH,EAEA3B,EAAAoI,MAAAR,KAAA5H,EAAAsY,aAAA1U,KAAA5D,EAAA6D,WAAAlC,EAEA3B,EAAA2I,cAAA,aAAiDL,IAAA3G,QACjD3B,GAAAqc,yBAGArc,EAAAgF,oBAEAhF,EAAAuc,eAAA,WACAvc,EAAA2Q,SACA6D,SAAAC,KAAAc,oBAAA,YAAAvV,EAAA+b,kBAAA,GACAvH,SAAAC,KAAAc,oBAAA,UAAAvV,EAAAuc,gBAAA,GACAvc,EAAAwc,iBACAxc,EAAAkB,MAAA,GACAlB,EAAAkZ,iBAAA,GAEAlZ,EAAAyc,WAAA,SAAAjK,GACA,GAAA3N,GAAA7E,EAAAyX,YAAAjF,EAQA,OAPAxS,GAAA8J,WAAA4S,mBAAA1c,EAAA2c,sBACA,oDAAAzV,QAAAlH,EAAA4c,mBACA5c,EAAA2c,oBAAAlb,GAAA+Q,EAAAqK,UACA7c,EAAA2c,oBAAAhb,GAAA6Q,EAAAsK,UACAjY,EAAA7E,EAAA2c,qBAEA3c,EAAA+c,WAAA/c,EAAAwT,UAAA3O,EAAApD,EAAAoD,EAAAlD,GAAAuO,QACA,0BAAAlQ,EAAA+c,YAAA,0BAAA/c,EAAA4c,iBACA5c,EAAA4c,gBAAA,wBACA5c,EAAA4Y,UAAA/T,EACA7E,EAAAgd,YAAAlK,KAAA9S,EAAAkJ,UAAAC,eACA+K,cAAAlU,EAAAmY,cAGA,wBAAAnY,EAAA+c,YAAA,wBAAA/c,EAAA4c,iBACA5c,EAAA4c,gBAAA,sBACA5c,EAAA4Y,UAAA/T,EACA7E,EAAAgd,YAAAhK,IAAAhT,EAAAkJ,UAAAD,cACAiL,cAAAlU,EAAAmY,eAGA,wBAAAnY,EAAA4c,iBACA,wBAAA5c,EAAA+c,aACA/c,EAAA+c,WAAA,uBAEA,0BAAA/c,EAAA4c,iBACA,0BAAA5c,EAAA+c,aACA/c,EAAA+c,WAAA,yBAEA7I,aAAAlU,EAAAmY,mBACA,IAAAnY,EAAAuY,YAAArR,QAAAlH,EAAA+c,cAGA,wBAAA/c,EAAA+c,WACA/c,EAAAkJ,UAAAD,UAAAjJ,EAAAgd,YAAAhK,KAAAnO,EAAAlD,EAAA3B,EAAA4Y,UAAAjX,GACA3B,EAAAkJ,UAAAuN,eACa,wBAAAzW,EAAA+c,YACb/c,EAAAkJ,UAAAD,WAAAjJ,EAAA4W,KAAA5W,EAAAuC,MAAA6G,WACApJ,EAAAmY,YAAA/D,WAAApU,EAAAyc,WAAAzc,EAAA8J,WAAAmT,iBAAAzK,IACa,2BAAAxS,EAAA+c,aACb/c,EAAAkJ,UAAAD,WAAAjJ,EAAA4W,KAAA5W,EAAAuC,MAAA6G,WACApJ,EAAAmY,YAAA/D,WAAApU,EAAAyc,WAAAzc,EAAA8J,WAAAmT,iBAAAzK,IAEA,0BAAAxS,EAAA+c,WACA/c,EAAAkJ,UAAAC,WAAAnJ,EAAAgd,YAAAlK,MAAAjO,EAAApD,EAAAzB,EAAA4Y,UAAAnX,GACAzB,EAAAkJ,UAAAsN,cACa,4BAAAxW,EAAA+c,YACb/c,EAAAkJ,UAAAC,YAAAnJ,EAAA8J,WAAAoT,yBACAld,EAAAmY,YAAA/D,WAAApU,EAAAyc,WAAAzc,EAAA8J,WAAAmT,iBAAAzK,IACa,2BAAAxS,EAAA+c,aACb/c,EAAAkJ,UAAAC,YAAAnJ,EAAA8J,WAAAoT,yBACAld,EAAAmY,YAAA/D,WAAApU,EAAAyc,WAAAzc,EAAA8J,WAAAmT,iBAAAzK,QAGAxS,EAAAmd,eAAA,WACAjJ,aAAAlU,EAAAmY,aACA3D,SAAA4I,iBACA5I,SAAA4I,kBAEA5I,SAAAC,KAAAc,oBAAA,YAAAvV,EAAAyc,YAAA,IAEAzc,EAAAqd,YAAA,SAAA7K,GACA,GAAA3N,GAAApD,EAAAE,CACAkD,GAAA7E,EAAAyX,YAAAjF,GACA/Q,EAAAoD,EAAApD,EAAAzB,EAAA4Y,UAAAnX,EACAE,EAAAkD,EAAAlD,EAAA3B,EAAA4Y,UAAAjX,GACA3B,EAAA8J,WAAAwT,uBAAA,mBAAAtd,EAAAmP,YAGAnP,EAAA8J,WAAAyT,oBAAA,gBAAAvd,EAAAmP,YAGAnP,EAAA2I,cAAA,cACAiL,YAAApB,EACAgL,OAAAxd,EAAA6Y,gBACA4E,OAAAzd,EAAAkN,YACAiC,SAAAnP,EAAAmP,aAIAkE,KAAAC,IAAA7R,GAAAzB,EAAA8J,WAAA4T,iBAAArK,KAAAC,IAAA3R,GAAA3B,EAAA8J,WAAA4T,mBACA1d,EAAA6O,cAAA7O,EAAA6Y,gBACA7Y,EAAA2d,cAAA3d,EAAAkN,YACAlN,EAAA6O,cAAAC,YACArN,IACAE,KAEA3B,EAAAuZ,eAAA/G,EAAA3N,EAAApD,EAAAoD,EAAApD,GAAA,MAGAzB,EAAA4d,gBAAA,SAAApL,GACA,GAAAqL,IACAC,cAAA9d,EAAA2H,OAAAC,KACAmW,iBAAA/d,EAAA2H,OAAAE,SAEAxJ,GACAyf,cAAA,WACAC,iBAAA,eACiB/d,EAAAmP,SACjBqF,UAAAC,KAAAc,oBAAA,YAAAvV,EAAAqd,aAAA,GACA7I,SAAAC,KAAAc,oBAAA,UAAAvV,EAAA4d,iBAAA,GACA5d,EAAA6O,eACA7O,EAAA2d,gBACA3d,EAAAkZ,iBAAA,EACAlZ,EAAA6O,cAAAxQ,KAAA2B,EAAA2d,cAAAtf,IACA2B,EAAA2I,cAAA,WACAiL,YAAApB,EACAgL,OAAAxd,EAAA6O,cACA4O,OAAAzd,EAAA2d,cACAxO,SAAAnP,EAAAmP,aAEA0O,EAAA7d,EAAAmP,UAAA0G,OAAAgI,EAAA7d,EAAAmP,UAAAjI,QAAAlH,EAAA6O,cAAAxQ,IAAA,GACAwf,EAAA7d,EAAAmP,UAAA0G,OAAAgI,EAAA7d,EAAAmP,UAAAjI,QAAAlH,EAAA2d,cAAAtf,IAAA,EAAA2B,EAAA6O,cAAAxQ,IACA2B,EAAAwc,mBAGAxc,EAAA6O,kBAAAhP,GACAG,EAAA2d,kBAAA9d,GACAG,EAAAkB,MAAA,IAEAlB,EAAA0T,UAAA,SAAAlB,EAAA+E,GAEA,GADAvX,EAAAge,oBAAAxL,EAAAiL,QACAzd,EAAA2I,cAAA,aAAiDiL,YAAApB,EAAApR,KAAApB,EAAAkN,eACjDlN,EAAA4R,UAGA,IAAAY,EAAAyL,SAAAje,EAAA+W,MAAA,CACA,GAAAc,GAAArF,EAAAsF,YAAAtF,EAAAuF,OAYA,IAXA/X,EAAA4Y,UAAArB,GAAAvX,EAAAyX,YAAAjF,GACAxS,EAAAgd,aACAlK,KAAA9S,EAAAkJ,UAAAC,WACA6J,IAAAhT,EAAAkJ,UAAAD,WAEAjJ,EAAA6Y,gBAAA7Y,EAAAwT,UAAAxT,EAAA4Y,UAAAnX,EAAAzB,EAAA4Y,UAAAjX,GACA3B,EAAAoZ,oBAAApZ,EAAA6Y,gBAAA7R,SACA6Q,GAAArF,EAAAsG,UAAA,yCACAlS,KAAA5G,EAAA6Y,gBAAA3I,UAAAlQ,EAAAkN,YAAAnG,iBACA/G,EAAAiH,gBAEAjH,EAAA6Y,gBAAArR,OAAA,CAGA,QAAAxH,EAAAuY,YAAArR,QAAAlH,EAAA6Y,gBAAA3I,SAeA,MAdAlQ,GAAA+c,WAAA/c,EAAA6Y,gBAAA3I,QACAlQ,EAAA4c,gBAAA5c,EAAA6Y,gBAAA3I,QACAlQ,EAAAyc,WAAAjK,GACAxS,EAAA8J,WAAA4S,oBACA,oDAAAxV,QAAAlH,EAAA4c,mBACA5c,EAAA2c,qBACAlb,EAAAzB,EAAA4Y,UAAAnX,EACAE,EAAA3B,EAAA4Y,UAAAjX,GAEA3B,EAAA0S,OAAAwL,sBAEA1J,SAAAC,KAAAC,iBAAA,YAAA1U,EAAAyc,YAAA,GACAjI,SAAAC,KAAAC,iBAAA,UAAA1U,EAAAmd,gBAAA,QACAnd,EAAAkZ,iBAAA,EAGA,aAAAlZ,EAAAmP,SAKA,MAJAnP,GAAA0Y,WAAA,EACA1Y,EAAA8J,WAAAqE,kBACAnO,EAAAmZ,UAAAnZ,EAAA6Y,gBAAA1S,SAAA0R,GAAA,GAEA7X,EAAAyT,UAAAjB,IAEA,8BAAAtL,QAAAlH,EAAAmP,YACAnP,EAAAsY,aAAAtY,EAAAwY,SACAxY,EAAAsY,aAAA5O,QACA1J,EAAAic,uBAAAjc,EAAAoI,MAAAqE,MAAAzM,EAAAsY,aAAA1U,KAAA5D,EAAA6D,WAEA7D,EAAAic,uBAAAjc,EAAAoI,MAAAR,KAAA5H,EAAAsY,aAAA1U,KAAA5D,EAAA6D,YAAA7D,EAAAuC,MAAA6G,WAEApJ,EAAAgc,sBAAAhc,EAAAoI,MAAAP,QAAA,kBAAA7H,EAAAsY,aAAAjS,OAAA9D,MACA,aAAAvC,EAAAsY,aAAAjS,OAAArG,EAAA6D,YAAA7D,EAAAsY,aAAAjS,OAAAvE,MACA0S,SAAAC,KAAAC,iBAAA,YAAA1U,EAAA+b,kBAAA,GACAvH,SAAAC,KAAAC,iBAAA,UAAA1U,EAAAuc,gBAAA,KAEA,qCAAArV,QAAAlH,EAAAmP,YACAnP,EAAAsY,aAAAtY,EAAAwY,SACAhE,SAAAC,KAAAC,iBAAA,YAAA1U,EAAAqd,aAAA,GACA7I,SAAAC,KAAAC,iBAAA,UAAA1U,EAAA4d,iBAAA,OAGA5d,EAAAoV,QAAA,SAAA5C,GACA0B,aAAAlU,EAAAmY,aACAnY,EAAAqY,qBAAA,EACArY,EAAA0Y,cAAA7Y,GACAG,EAAAsY,iBAAAzY,GACAG,EAAA6Y,oBAAAhZ,GACAG,EAAA2I,cAAA,WAA+CiL,YAAApB,EAAApR,KAAApB,EAAAkN,gBAC/ClN,EAAA4R,UAAAY,EAAAiL,SAAAzd,EAAA0S,UAGA1S,EAAAkN,iBAAArN,KAAAG,EAAAkN,YAAApN,MAGAE,EAAAwX,aAAAxX,EAAA+W,QACA/W,EAAA4Y,WAAA5Y,EAAAoY,SAAApY,EAAA4Y,YACA5Y,EAAAoa,aAAAC,QAEA7H,EAAAsB,oBAEA9T,EAAAme,QAAA,SAAA3L,GACA,GAAAnU,GACAoD,EAAAzB,EAAAsH,WAAAC,YACA5F,EAAA3B,EAAAsH,WAAAnB,SACA0R,EAAArF,EAAAsF,YAAAtF,EAAAuF,QACAqG,EAAApe,EAAA4D,KAAAgI,OAAA,EACAyS,EAAAre,EAAAyN,mBAAA7B,OAAA,CACA,KAAA5L,EAAA2I,cAAA,WAA+CiL,YAAApB,EAAApR,KAAApB,EAAAkN,eAC/ClN,EAAA4R,SAAA,CA+CA,GA5CA5R,EAAA4W,KAAA5W,EAAAyI,YAAAmD,OAAA,EAAA5L,EAAA8J,WAAA+M,kBACA7W,EAAA8J,WAAAiE,aACAqQ,GAAA,GAEA,QAAA5L,EAAA6I,SACA7I,EAAAsB,iBAGA+D,GAAA,KAAArF,EAAA6I,QACArb,EAAAse,YAEa,KAAA9L,EAAA6I,QACb1Z,GAAA,EAEa,KAAA6Q,EAAA6I,QACb1Z,GAAA,EAEa,KAAA6Q,EAAA6I,SAAA7I,EAAAsG,UAAA,IAAAtG,EAAA6I,QACb5Z,GAAA,EAEa,KAAA+Q,EAAA6I,UAAA7I,EAAAsG,UAAA,IAAAtG,EAAA6I,QACb5Z,GAAA,EAEa,KAAA+Q,EAAA6I,SACb1Z,GAAA3B,EAAA4W,KACApE,EAAAsB,kBAEa,KAAAtB,EAAA6I,SACb1Z,GAAA3B,EAAA4W,KACApE,EAAAsB,kBAEa,KAAAtB,EAAA6I,SAAAxD,GAAA,KAAArF,EAAA6I,QACb1Z,EAAA,EAEa,KAAA6Q,EAAA6I,SAAAxD,GAAA,KAAArF,EAAA6I,QACb1Z,EAAA3B,EAAA4D,KAAAgI,OAAA,EAEaiM,GAAA,KAAArF,EAAA6I,QACb5Z,EAAA4c,EAEaxG,GAAA,KAAArF,EAAA6I,UACb5Z,EAAA,GAGA,KAAA+Q,EAAA6I,QACA,MAAArb,GAAAqV,YAAA5T,EAAAE,EAGA,SAAA6Q,EAAA6I,QAAA,CAKA,GAJArb,EAAAiH,cACAjH,EAAAiH,WAAAoM,KAAAqD,IAAA/U,EAAA,OACA3B,EAAAiH,WAAAoM,KAAAqD,IAAA/U,EAAA,IAAA+G,KAAAjH,GACAzB,EAAAqZ,gBAAArZ,EAAA2Y,qBACA3Y,EAAA8J,WAAAqE,iBACA,IAAA9P,EAAA2B,EAAAqZ,gBAAArG,IAAsD3U,GAAA2B,EAAAqZ,gBAAAL,OAAkC3a,GAAA,EACxF2B,EAAAmZ,UAAA9a,EAAAwZ,GAAA,OAGA7X,GAAAsZ,eAAAzZ,GAAAgY,EAIA,OAFArF,GAAAsB,qBACA9T,GAAAkB,MAAA,GAGAO,EAAA,IACAA,EAAA,GAEAE,EAAAyc,IACAzc,EAAAyc,GAEAzc,EAAA,IACAA,EAAA,GAEAF,EAAA4c,IACA5c,EAAA4c,GAGA7L,EAAAsG,WAAA,kBAAA5R,QAAAsL,EAAA6I,WACArb,EAAAiH,WAAAoM,KAAAqD,IAAA/U,EAAA,IAAA3B,EAAAiH,WAAAoM,KAAAqD,IAAA/U,EAAA,QACA3B,EAAAiH,WAAAoM,KAAAqD,IAAA/U,EAAA,IAAA+G,KAAAjH,GACAzB,EAAAqZ,gBAAArZ,EAAA2Y,qBACA3Y,EAAAsZ,eAAAzZ,GAAAgY,GACA7X,EAAAkB,MAAA,IAEAO,IAAAzB,EAAAsH,WAAAC,aAAA5F,IAAA3B,EAAAsH,WAAAnB,WACAnG,EAAAwa,eAAA/Y,IAAAzB,EAAAsH,WAAAC,YAAA9F,MAAA5B,GAAA8B,IAAA3B,EAAAsH,WAAAnB,SAAAxE,MAAA9B,IACAG,EAAAya,cAAAhZ,EAAAE,IACA6Q,EAAAsG,UAAA9Y,EAAA8J,WAAAyU,6BACA1G,IACA7X,EAAAiH,eAEAjH,EAAAiH,WAAAtF,GAAA3B,EAAAiH,WAAAtF,OACA3B,EAAAiH,WAAAtF,GAAA+G,KAAAjH,GACAzB,EAAA2I,cAAA,oBACA6S,aAAAxb,EAAAyb,kBACAxU,WAAAjH,EAAAiH,WACAoS,gBAAArZ,EAAAqZ,mBAGArZ,EAAAkB,MAAA,MAGAlB,EAAAwe,MAAA,SAAAhM,GACAxS,EAAA2I,cAAA,SAA6CiL,YAAApB,EAAApR,KAAApB,EAAAkN,eAC7ClN,EAAA4R,WAGA5R,EAAAoa,aAAAlV,MAAA,KAEAlF,EAAAye,SAAA,SAAAjM,GACAxS,EAAA4R,UAGA5R,EAAA2I,cAAA,YAAgDiL,YAAApB,EAAApR,KAAApB,EAAAkN,eAEhDlN,EAAA0e,SAAA,SAAAlM,GACAxS,EAAA2I,cAAA,YAAgDiL,YAAApB,EAAApR,KAAApB,EAAAkN,eAChDlN,EAAA4R,WAGA,cAAA5R,EAAAkN,YAAAgD,SACA,qBAAAlQ,EAAAkN,YAAA3K,MACAvC,EAAA2e,kBAAA3e,EAAAkN,YAAA7G,OAAA1H,MACa,cAAAqB,EAAAkN,YAAAgD,SACb,eAAAlQ,EAAAkN,YAAA3K,MACAvC,EAAA4e,YACa,0BAAA1X,QAAAlH,EAAAkN,YAAA3K,QACbvC,EAAAqV,YAAArV,EAAAkN,YAAA3F,YAAAvH,EAAAkN,YAAA/G,YAGAnG,EAAA6e,YAAA,SAAArM,GACA,IAAAxS,EAAA2I,cAAA,SAA6CiL,YAAApB,IAA7C,CAGAxS,EAAAuU,oBAAA,CACA,IAAAjW,GAAA0B,EAAAkJ,UAAAC,WACArE,EAAA9E,EAAAkJ,UAAAD,SACAjJ,GAAA4R,WACA5R,EAAAkJ,UAAAD,WAAAuJ,EAAAsM,OACA9e,EAAAkJ,UAAAC,YAAAqJ,EAAAuM,QAEAja,IAAA9E,EAAAkJ,UAAAD,WAAA3K,IAAA0B,EAAAkJ,UAAAC,YACAqJ,EAAAsB,mBAGA9T,EAAAgf,KAAA,SAAAxM,GACA,IAAAxS,EAAA2I,cAAA,QAA4CiL,YAAApB,KAC5CxS,EAAA4R,UAAAY,EAAAyM,cAAA,CACA,GAAArX,MAAAsX,EAAAlf,EAAAyb,iBACAyD,GAAAtT,OAAA,IACAsT,EAAAhf,QAAA,SAAAoI,GACA,GAAAA,EAAA,CACA,GAAAjE,KACAvF,QAAAgC,KAAAwH,GAAApI,QAAA,SAAA4R,GACAzN,EAAAqE,KAAAJ,EAAAwJ,MAEAzN,EAAA8M,KAAA,KACAvJ,EAAAc,KAAArE,MAGAmO,EAAAyM,cAAAE,QAAA,aAAAvX,EAAAuJ,KAAA,OACAqB,EAAAsB,sBAKCnT,MAAA/C,EAAA+B,MAAA9B,EAAAD,QAAAgC,IJ6gCK,SAAU/B,EAAQD,EAASM,GK7lEjC,GAAAyB,GAAAC,CAEAD,UAu8BCE,MAv8BDD,EAAA,WACA,YACA,iBAAAI,GACAA,EAAA2H,QACAC,QACAC,YAEA7H,EAAA4R,UAAA,EACA5R,EAAAsH,YACAC,YAAA,EACApB,SAAA,GAEAnG,EAAAof,YAAA,iBACApf,EAAAqf,sBAAA,wCACArf,EAAAsf,4BAAA,qCACAtf,EAAA6D,SAAA,0BACA7D,EAAAmL,QAAAnL,EAAA6D,SACA7D,EAAA8C,eAAA,MACA9C,EAAAwL,iBACAxL,EAAAuf,WACAvf,EAAAgF,iBACAhF,EAAAkJ,aACAlJ,EAAAyI,eACAzI,EAAAoI,OACAR,QACAC,WACA4E,UAEAzM,EAAAwf,cAAA,WACA,UAEAxf,EAAAiH,cACAjH,EAAAoH,UACApH,EAAA8J,cACA9J,EAAAuC,SACAvC,EAAAI,QACAJ,EAAA+H,cACA/H,EAAAyf,WACAzf,EAAA0f,gBACA1f,EAAA0V,UACA1V,EAAAga,IAAA,EACAha,EAAA6Z,WACA7Z,EAAA8N,eAAA,EACA9N,EAAA6N,eAAA,EACA7N,EAAA2M,gBAAA,EACA3M,EAAA4M,gBAAA,EACA5M,EAAAgL,cACAhL,EAAA2D,gBACA3D,EAAAuY,aACA,sBACA,sBACA,yBACA,wBACA,0BACA,0BAEAvY,EAAAsR,OAAsB7P,EAAA,EAAAE,EAAA,GACtB3B,EAAAyb,gBAAA,SAAAkE,GACA,GAAAjhB,MAAAgB,EAAAM,EAAAiY,YAAA3Z,EAAA0B,EAAA4D,KAAAgI,MAeA,OAdA5L,GAAAiH,WAAA/G,QAAA,SAAAoI,EAAA0D,GACAA,IAAA1N,IACAI,EAAAsN,MACA2T,EACAjgB,EAAAQ,QAAA,SAAAoW,GACA5X,EAAAsN,GAAAsK,EAAA3X,MAAAqB,EAAA4D,KAAAoI,GAAAsK,EAAA3X,QAGA2J,EAAApI,QAAA,SAAA0f,IACA,IAAAA,IACAlhB,EAAAsN,GAAAtM,EAAAkgB,GAAAjhB,MAAAqB,EAAA4D,KAAAoI,GAAAtM,EAAAkgB,GAAAjhB,YAIAD,GAEAsB,EAAAgX,aAAA,SAAAxE,GAEA,IADA,GAAA/Q,GAAA,EAAAE,EAAA,EACA6Q,EAAAjJ,YACA,yBAAAiJ,EAAA1J,UACA,yBAAA0J,EAAA1J,WACArH,GAAA+Q,EAAArJ,WACAxH,GAAA6Q,EAAAvJ,WAEAuJ,IAAAjJ,UAEA,QAAoBuJ,KAAArR,EAAAuR,IAAArR,IAEpB3B,EAAAib,SAAA,SAAAzI,EAAAqN,GAEA,IADA,GAAA1b,GAAAD,EAAAzC,EAAA,EAAAE,EAAA,EAAAjC,EAAA8S,EACAA,EAAAhJ,cACA/H,GAAA+Q,EAAAxJ,WACArH,GAAA6Q,EAAAzJ,UACA5E,EAAAqO,EAAAlJ,aACApF,EAAAsO,EAAAnJ,YACAmJ,IAAAhJ,YAEA,OAAAqW,IACwB/M,KAAArR,EAAAuR,IAAArR,EAAAE,OAAAsC,EAAArC,MAAAoC,IAExBsO,EAAA9S,EACAA,EAAAM,EAAAgX,aAAAxE,IACoBM,KAAArR,EAAA/B,EAAAoT,KAAAE,IAAArR,EAAAjC,EAAAsT,IAAAnR,OAAAsC,EAAArC,MAAAoC,KAEpBlE,EAAAyX,YAAA,SAAAjF,GACA,GAAAC,GAAAzS,EAAA0S,OAAAC,wBACA9N,GACApD,EAAA+Q,EAAAK,QAAAJ,EAAAK,KACAnR,EAAA6Q,EAAAO,QAAAN,EAAAO,IAMA,OAJAhT,GAAAgN,cACAnI,EAAApD,GAAAzB,EAAA0B,iBACAmD,EAAAlD,GAAA3B,EAAA4B,kBAGAH,EAAAoD,EAAApD,EACAE,EAAAkD,EAAAlD,EACA8Q,SAGAzS,EAAA8f,UAAA,SAAAC,EAAAC,EAAAC,GACAA,KAAA,CACA,IAAAxe,GAAApD,IACA,KAAAoD,EAAAse,EAAyBte,GAAAue,EAAWve,GAAAwe,EACpC5hB,EAAAoD,IAEA,OAAApD,IAEA2B,EAAAoN,uBAAA,WACA,MAAApN,GAAA8J,WAAA2E,kBACAzO,EAAAoI,MAAAR,MAAA,IAAA5H,EAAAuC,MAAA2d,uBADqD,GAGrDlgB,EAAAqN,yBAAA,WACA,MAAArN,GAAA8J,WAAAoC,eACAlM,EAAAoI,MAAAP,QAAAuC,YAAApK,EAAAuC,MAAA6J,mBADkD,GAGlDpM,EAAAwc,eAAA,WACAxc,EAAA8J,WAAAmB,gBACAkV,aAAAC,QAAApgB,EAAAof,YAAA,IAAApf,EAAA8J,WAAAnL,KAAA0hB,KAAAC,WACAlY,OACAR,KAAA5H,EAAAoI,MAAAR,KACAC,QAAA7H,EAAAoI,MAAAP,SAEAF,QACAC,KAAA5H,EAAA2H,OAAAC,KACAC,QAAA7H,EAAA2H,OAAAE,SAEAsD,QAAAnL,EAAAmL,QACArI,eAAA9C,EAAA8C,mBAGA9C,EAAAiY,UAAA,WACA,MAAAjY,GAAAugB,QAAAvgB,EAAAwgB,YAEAxgB,EAAAygB,mBAAA,WACA,GAAA/gB,GAAAM,EAAAiY,WACAjY,GAAA2H,OAAAE,QAAA7H,EAAA8f,UAAA,EAAApgB,EAAAkM,OAAA,IAEA5L,EAAAwN,gBAAA,WACAxN,EAAA2H,OAAAC,KAAA5H,EAAA8f,UAAA,EAAA9f,EAAA4D,KAAAgI,OAAA,IAEA5L,EAAAyN,iBAAA,WACA,MAAAzN,GAAAiY,YAAAyI,OAAA,SAAAd,GAA2D,OAAAA,EAAArJ,UAE3DvW,EAAA2gB,kBAAA,SAAArY,EAAAjC,GACA,GAAA3H,GAAA2H,EAAAyT,cAAA,EACA,mBAAApb,KACAA,IAAAiC,MAAAX,EAAAI,MAAAiG,KAEAiC,EAAAjC,EAAA1H,MAAAD,GAEAsB,EAAAka,iBAAA,WACAla,EAAAgO,UACAhO,EAAAgO,OAAAhO,EAAA6D,UAAA7D,EAAAga,IACAha,EAAAga,KAAA,EACAha,EAAAiY,YAAA/X,QAAA,SAAAmG,GACArG,EAAA2gB,kBAAA3gB,EAAAgO,OAAA3H,MAGArG,EAAA4gB,kBAAA,SAAA9O,GAEA,IADA,GAAA3S,GAAA,EACAa,EAAA0f,aAAA5N,IACA3S,GAAA,EACA2S,GAAA3S,CAEA,OAAA2S,IAEA9R,EAAA0gB,OAAA,SAAA1Y,GACA,GAAAF,GAAA9H,EAAAuf,QAAAvX,EAKA,OAJAF,QAAAjI,KAAAmI,IACAqD,QAAAC,KAAA,mEAAAtD,GACAF,EAAA9H,EAAAuf,QAAAsB,QAEA/Y,GAEA9H,EAAA8gB,qBAAA,SAAAC,GACA,GAAAjc,GAAArD,EAAAnD,EAAA0B,EAAA4D,KAAAgI,MACA,KAAAnK,EAAA,EAAuBA,EAAAnD,EAAOmD,GAAA,EAC9B,kBAAA5B,IAAAqH,QAAAlH,EAAA4D,KAAAnC,GAAAsf,IAEA,MADAjc,SAAA9E,GAAA4D,KAAAnC,GACA,WAAAqD,EAAA,SAAAA,CAGA,iBAEA9E,EAAAghB,eAAA,WACAliB,OAAAgC,KAAAd,EAAAgL,YAAA9K,QAAA,SAAA+gB,GACAjhB,EAAAgL,WAAAiW,GAAA/f,UAGAlB,EAAAqc,iBAAA,WACAvd,OAAAgC,KAAAd,EAAAgL,YAAA9K,QAAA,SAAA+gB,GACAjhB,EAAAgL,WAAAiW,GAAAtQ,YAGA3Q,EAAAkhB,gBAAA,SAAAC,GACA,GAAAC,GAAAphB,EAAAib,SAAAjb,EAAAuJ,YACA8X,EAAArhB,EAAAib,SAAAkG,GACAzhB,EAAAM,EAAAgX,aAAAhX,EAAA0S,QACA4O,GACA7f,EAAA,EACAE,EAAA,EACAwC,EAAA,EACAD,EAAA,GAEAqd,GACA9f,GAAA+f,IACA7f,GAAA6f,IACArd,EAAAqd,IACAtd,EAAAsd,KAEArU,EAAAnN,EAAAoN,yBACAV,EAAA1M,EAAAqN,0BASA,OARA+T,GAAApO,KAAAtT,EAAAsT,IACAoO,EAAAtO,MAAApT,EAAAoT,KACAuO,EAAArO,KAAAtT,EAAAsT,IACAqO,EAAAvO,MAAApT,EAAAoT,KACAwO,EAAAnd,EAAAid,EAAApO,IAAAoO,EAAAvf,OAAAsf,EAAApY,UAAA/I,EAAAuC,MAAAuK,eACAwU,EAAApd,EAAAkd,EAAAtO,KAAAsO,EAAAtf,MAAAqf,EAAAnY,WAAAhJ,EAAAuC,MAAAuK,eACAwU,EAAA7f,EAAA2f,EAAAtO,MAAA,EAAAuO,EAAAvO,KAAApG,EACA4U,EAAA3f,EAAAyf,EAAApO,KAAA,EAAAqO,EAAArO,IAAA7F,GAEA1L,EAAA6f,EAAA7f,EAAA8f,EAAA9f,EAAA6f,EAAA7f,EAAA8f,EAAA9f,EACAE,EAAA2f,EAAA3f,EAAA4f,EAAA5f,EAAA2f,EAAA3f,EAAA4f,EAAA5f,EACAwC,EAAAmd,EAAAnd,EAAAod,EAAApd,EAAAmd,EAAAnd,EAAAod,EAAApd,EACAD,EAAAod,EAAApd,EAAAqd,EAAArd,EAAAod,EAAApd,EAAAqd,EAAArd,IAGAlE,EAAAqX,YAAA,SAAA8J,GACA,GAAAG,GAAAthB,EAAAkhB,gBAAAC,EACAG,GAAApd,EAAA,IAAiCod,EAAApd,EAAA,GACjCod,EAAAnd,EAAA,IAAiCmd,EAAAnd,EAAA,GACjCgd,EAAA5e,MAAAsI,KAAA,QACAyW,EAAA3f,EAAA,MACA2f,EAAApd,EAAA,MACAod,EAAAnd,EAAA,MACAmd,EAAA7f,EAAA,OAcAzB,EAAAuZ,eAAA,SAAA/G,EAAA/Q,EAAAE,EAAAkW,GACA,GAAA4J,GACA/U,EAAA1M,EAAAqN,2BACAF,EAAAnN,EAAAoN,wBACA3L,GAAAzB,EAAA8B,MAAA9B,EAAA8J,WAAA4X,qBAAAjgB,EAAAzB,EAAA8B,QACA9B,EAAAkJ,UAAAC,YAAAnJ,EAAA8J,WAAAoT,yBACAuE,GAAA,GAEA9f,EAAA3B,EAAA6B,OAAA7B,EAAA8J,WAAA4X,qBAAA/f,EAAA3B,EAAA6B,SACA7B,EAAAkJ,UAAAD,WAAAjJ,EAAA8J,WAAAoT,yBACAuE,GAAA,GAEAhgB,EAAAzB,EAAA8J,WAAA4X,oBAAAhV,EAAA,IACA1M,EAAAkJ,UAAAC,YAAAnJ,EAAA8J,WAAAoT,yBACAuE,GAAA,GAEA9f,EAAA3B,EAAA8J,WAAA4X,oBAAAvU,EAAA,IACAnN,EAAAkJ,UAAAD,WAAAjJ,EAAA8J,WAAAoT,yBACAuE,GAAA,GAEAA,IAAA5J,GAAA7X,EAAAkN,cAAA,IAAAlN,EAAAkN,YAAA3F,cACAvH,EAAAmY,YAAA/D,WAAApU,EAAAyT,UAAAzT,EAAA8J,WAAAmT,iBAAAzK,KAGAxS,EAAA2hB,uBAAA,WACA3hB,EAAA4D,KAAA5D,EAAA4hB,aAAAlB,OAAA,SAAApY,GACA,YAGAtI,EAAA6hB,eAAA,SAAApjB,EAAAiB,GACA,IAAAjB,EAAAE,KACA,SAAAmjB,OAAA,yCAEA,IAAApiB,EAAAghB,OAAA,SAAAriB,GAAuC,MAAAA,GAAAM,OAAAF,EAAAE,OAA4BiN,OAAA,EACnE,SAAAkW,OAAA,0BACArjB,EAAAE,KAAA,6CAEA,WAEAqB,EAAA+hB,YAAA,SAAAC,EAAAC,EAAAnQ,EAAAoQ,GACAF,EAAAlQ,OAAAjS,KAAAoiB,EAAAnQ,GAAAoQ,EAAAD,EAAAnQ,IAEA9R,EAAAmiB,cAAA,WACAniB,EAAAoiB,SAAAtY,WAAA5J,QAAA,SAAA7B,GACA2B,EAAA+hB,YAAA/hB,EAAA8J,WAAA9J,EAAAD,KAAA1B,EAAA,GAAAA,EAAA,OAGA2B,EAAAqiB,SAAA,WACAriB,EAAAoiB,SAAAE,OAAApiB,QAAA,SAAA7B,GACA2B,EAAA+hB,YAAA/hB,EAAAuC,MAAAvC,EAAAD,KAAAwC,UAAkElE,EAAA,GAAAA,EAAA,OAGlE2B,EAAA4e,SAAA,SAAA2D,GACAviB,EAAAyN,mBAAAvN,QAAA,SAAA0f,GACAA,EAAAjhB,OAAA4jB,OAAA1iB,KAAA0iB,GACAviB,EAAA2e,kBAAAiB,EAAAjhB,QAGAqB,EAAA2e,kBAAA,eAEA3e,EAAAwiB,QAAA,YACAxiB,EAAAgN,aAAAhN,EAAA0S,QAAA1S,EAAA0S,OAAAnJ,YACAvJ,EAAA0S,OAAAnJ,WAAA4Q,YAAAna,EAAA0S,QAEA1S,EAAAyiB,YAAAlN,oBAAA,UAAAvV,EAAAoV,SAAA,GACApV,EAAAyiB,YAAAlN,oBAAA,YAAAvV,EAAA0T,WAAA,GACA1T,EAAAyiB,YAAAlN,oBAAA,WAAAvV,EAAA0e,UAAA,GACA1e,EAAAyiB,YAAAlN,oBAAA,QAAAvV,EAAAsV,OAAA,GACAtV,EAAAyiB,YAAAlN,oBAAA,YAAAvV,EAAAyT,WACAzT,EAAAyiB,YAAAlN,oBAAA,QAAAvV,EAAA6e,aAAA,GACA7e,EAAA0S,OAAA6C,oBAAA,cAAAvV,EAAA+T,aAAA,GACA/T,EAAA0S,OAAA6C,oBAAA,OAAAvV,EAAAgf,MACAhf,EAAAoa,aAAA7E,oBAAA,WAAAvV,EAAAye,UAAA,GACAze,EAAAoa,aAAA7E,oBAAA,QAAAvV,EAAAwe,OAAA,GACAxe,EAAAoa,aAAA7E,oBAAA,UAAAvV,EAAAme,SAAA,GACA3d,OAAA+U,oBAAA,SAAAvV,EAAA2Q,QACA3Q,EAAA0iB,UAAA1iB,EAAA0iB,SAAAC,YACA3iB,EAAA0iB,SAAAC,cAGA3iB,EAAA4iB,oBAAA,WACA,GAAAljB,EACAM,GAAA6iB,gBAAA,gBAAA7iB,GAAA6iB,eAAAlb,SACA3H,EAAA6iB,eAAAlb,OAAAC,KAAAgE,QAAA5L,EAAA4D,KAAAgI,SACA5L,EAAA2H,OAAAC,KAAA5H,EAAA6iB,eAAAlb,OAAAC,MAEAlI,EAAAM,EAAAiY,YACAjY,EAAA2H,OAAAE,QAAA7H,EAAA6iB,eAAAlb,OAAAE,QACAnI,EAAAQ,QAAA,SAAAiE,EAAA9F,IACA,IAAA2B,EAAA2H,OAAAE,QAAAX,QAAA7I,IACA2B,EAAA2H,OAAAE,QAAAa,KAAArK,KAGA2B,EAAAmL,YAAAtL,KAAAG,EAAA6iB,eAAA1X,QACAnL,EAAA6D,SAAA7D,EAAA6iB,eAAA1X,QACAnL,EAAA8C,mBAAAjD,KAAAG,EAAA6iB,eAAA/f,eACA9C,EAAA6D,SAAA7D,EAAA6iB,eAAA/f,eACA9C,EAAA8iB,gBAAA9iB,EAAAmL,UAAAnL,EAAA8C,gBACA9C,EAAA0O,MAAA1O,EAAAmL,QAAAnL,EAAA8C,kBAIA9C,EAAA+iB,cAAA,SAAAC,GACA,MAAAC,YAAAD,EAAA,KAEAhjB,EAAAkjB,UAAA,SAAApR,GACA,OAAAlL,KAAAkL,KACA9R,EAAAuC,MAAAuP,EAAA,UAAA9R,EAAA+iB,cAAA/iB,EAAAuC,MAAAuP,MAGA9R,EAAAG,KAAA,WACA,GAAAgjB,KA8HA,IA7HAnjB,EAAAmiB,gBACAniB,EAAAqiB,WACAriB,EAAAojB,gBACApjB,EAAAqjB,SACAvkB,OAAAgC,KAAAd,EAAAuC,OAAArC,QAAAF,EAAAkjB,WACAljB,EAAAI,KAAA4H,KAAA,kBACAhI,EAAAI,KAAAsU,iBAAA1U,EAAA0U,iBACA1U,EAAAI,KAAAmV,oBAAAvV,EAAAuV,oBACAvV,EAAAI,KAAAuI,cAAA3I,EAAA2I,cACA3I,EAAAI,KAAAoiB,QAAAxiB,EAAAwiB,QACAxiB,EAAAI,KAAAkjB,SAAAtjB,EAAAsjB,SACAtjB,EAAAI,KAAAmf,QAAAvf,EAAAuf,QACAvf,EAAAI,KAAAqf,QAAAzf,EAAAyf,QACAzf,EAAAI,KAAAwe,SAAA5e,EAAA4e,SACA5e,EAAAI,KAAAiV,YAAArV,EAAAqV,YACArV,EAAAI,KAAAoZ,QAAAxZ,EAAAwZ,QACAxZ,EAAAI,KAAAqa,cAAAza,EAAAya,cACAza,EAAAI,KAAAoa,eAAAxa,EAAAwa,eACAxa,EAAAI,KAAAmjB,eAAAvjB,EAAAujB,eACAvjB,EAAAI,KAAAojB,SAAAxjB,EAAAwjB,SACAxjB,EAAAI,KAAAqjB,QAAAzjB,EAAAyjB,QACAzjB,EAAAI,KAAAsjB,qBAAA1jB,EAAA0jB,qBACA1jB,EAAAI,KAAAujB,iBAAA3jB,EAAA2jB,iBACA3jB,EAAAI,KAAAue,kBAAA3e,EAAA2e,kBACA3e,EAAAI,KAAAwjB,wBAAA5jB,EAAA4jB,wBACA5jB,EAAAI,KAAAyjB,mBAAA7jB,EAAA6jB,mBACA7jB,EAAAI,KAAAoT,UAAAxT,EAAAwT,UACAxT,EAAAI,KAAA0jB,cAAA9jB,EAAA8jB,cACA9jB,EAAAI,KAAAsO,MAAA1O,EAAA0O,MACA1O,EAAAI,KAAAc,KAAAlB,EAAAkB,KACAlB,EAAAI,KAAAkZ,WAAAtZ,EAAAsZ,WACAtZ,EAAAI,KAAAiX,YAAArX,EAAAqX,YACArX,EAAAI,KAAA2jB,kBAAA/jB,EAAA+jB,kBACA/jB,EAAAI,KAAAsb,UAAA1b,EAAA0b,UACA1b,EAAAI,KAAA+Y,UAAAnZ,EAAAmZ,UACAnZ,EAAAI,KAAA2J,WAAA/J,EAAA+J,WACA/J,EAAAI,KAAA0b,WAAA9b,EAAA8b,WACA9b,EAAAI,KAAA4jB,WAAAhkB,EAAAgkB,WACAhkB,EAAAI,KAAA6jB,aAAAjkB,EAAAikB,aACAjkB,EAAAI,KAAAsS,OAAA1S,EAAA0S,OACA1S,EAAAI,KAAA8P,QAAAlQ,EAAA+B,IACA/B,EAAAI,KAAA8jB,UAAAlkB,EAAAkkB,UACAlkB,EAAAI,KAAA+jB,UAAAnkB,EAAAmkB,UACAnkB,EAAAI,KAAA6Z,OAAAja,EAAAia,OACAja,EAAAI,KAAAgkB,aAAApkB,EAAAokB,aACApkB,EAAAI,KAAAikB,aAAArkB,EAAAqkB,aACArkB,EAAAI,KAAAkkB,UAAAtkB,EAAAskB,UACAtkB,EAAAI,KAAA8gB,gBAAAlhB,EAAAkhB,gBACAlhB,EAAAI,KAAAmkB,aAAAvkB,EAAAukB,aACAvkB,EAAAI,KAAAokB,eAAAxkB,EAAAwkB,eACAxkB,EAAAI,KAAAqkB,kBAAAzkB,EAAAykB,kBACAzkB,EAAAI,KAAAskB,gBAAA1kB,EAAA0kB,gBACA1kB,EAAAI,KAAAuQ,OAAA3Q,EAAA2Q,OACA3Q,EAAAI,KAAA4gB,eAAAhhB,EAAAghB,eACAhhB,EAAAI,KAAAukB,cAAA3kB,EAAA2kB,cACA3kB,EAAAI,KAAAwkB,uBAAA5kB,EAAA4kB,uBACA5kB,EAAAI,KAAAykB,eAAA7kB,EAAA6kB,eACA7kB,EAAAI,KAAAmC,SACAzD,OAAAgC,KAAAd,EAAAuC,OAAArC,QAAA,SAAA4R,GAEAqR,EAAArR,OAAAjS,GACAf,OAAAC,eAAAokB,EAAArR,GACA5S,IAAA,WACA,MAAAc,GAAAuC,MAAAuP,IAEAgT,IAAA,SAAA5f,GACAlF,EAAAkjB,UAAAhe,GACAlF,EAAAuC,MAAAuP,GAAA5M,EACAlF,EAAAkB,MAAA,GACAlB,EAAA2I,cAAA,gBAA4DhK,KAAAmT,EAAA5M,eAU5DpG,OAAAC,eAAAiB,EAAAI,KAAA,YACAlB,IAAA,WACA,MAAAc,GAAA4R,YAGA9S,OAAAC,eAAAiB,EAAAI,KAAA,SACAlB,IAAA,WACA,MAAAikB,IAEA2B,IAAA,SAAA5f,GACApG,OAAAgC,KAAAoE,GAAAhF,QAAA,SAAA4R,GACA9R,EAAAkjB,UAAAhe,GACAlF,EAAAuC,MAAAuP,GAAA5M,EAAA4M,KAEA9R,EAAAkB,MAAA,GACAlB,EAAA2I,cAAA,gBAAwDhK,KAAA,QAAAuG,aAGxDpG,OAAAgC,KAAAd,EAAA8J,YAAA5J,QAAA,SAAA4R,GACAhT,OAAAC,eAAAiB,EAAAI,KAAA0J,WAAAgI,GACA5S,IAAA,WACA,MAAAc,GAAA8J,WAAAgI,IAEAgT,IAAA,SAAA5f,GACAlF,EAAA8J,WAAAgI,GAAA5M,EACAlF,EAAAkB,MAAA,GACAlB,EAAA2I,cAAA,oBAAgEhK,KAAAmT,EAAA5M,QAAA4M,UAIhE9R,EAAAuf,QAAAsB,OAAA,SAAA3b,EAAA6f,GACA,IAAAA,EAAiC,QACjC,IAAAC,EACAhlB,GAAAilB,uBAAAplB,EACA,KACAmlB,EAAA,GAAAE,QAAAH,EAAA,MACiB,MAAAvS,GAEjB,YADAxS,EAAAilB,mBAAAzS,GAGA,MAAAwS,GAAApe,KAAA1B,IAEAlF,EAAAuf,QAAA4F,OAAA,SAAAjgB,EAAA6f,GACA,OAAAA,GACA7f,IAAA6f,GAEA/kB,EAAA8J,WAAAnL,MAAAqB,EAAA8J,WAAAmB,eAAA,CAEA,GADAjL,EAAA6iB,eAAA1C,aAAAiF,QAAAplB,EAAAof,YAAA,IAAApf,EAAA8J,WAAAnL,MACAqB,EAAA6iB,eACA,IACA7iB,EAAA6iB,eAAAxC,KAAAgF,MAAArlB,EAAA6iB,gBACqB,MAAArQ,GACrBnH,QAAAC,KAAA,0CAAAkH,GACAxS,EAAA6iB,mBAAAhjB,GAGAG,EAAA6iB,gBACA,gBAAA7iB,GAAA6iB,eAAAza,QACApI,EAAAoI,MAAAR,KAAA5H,EAAA6iB,eAAAza,MAAAR,KACA5H,EAAAoI,MAAAP,QAAA7H,EAAA6iB,eAAAza,MAAAP,SACA,0BAAA3H,QAAA,SAAA7B,GACA2B,EAAAoI,MAAA/J,KACA2B,EAAAoI,MAAA/J,UAMA2B,EAAAD,KAAA6D,OACA5D,EAAAI,KAAAwD,KAAA5D,EAAAD,KAAA6D,MAEA5D,EAAAD,KAAAwgB,SACAvgB,EAAAI,KAAAmgB,OAAAvgB,EAAAD,KAAAwgB,QAEAvgB,EAAA4D,OACA5D,EAAAI,KAAAwD,SAEA5D,EAAA2Q,QAAA,IAQA3Q,EAAAI,KAAAklB,KAAA,SAAA9S,GACAxS,EAAA4R,UAAA,GAQA5R,EAAAI,KAAAia,MAAA,WACAra,EAAA4R,UAAA,EACA5R,EAAAoa,aAAAC,SAEAvb,OAAAC,eAAAiB,EAAAI,KAAA,UACAlB,IAAA,WACA,MAAAc,GAAAuJ,WAAA1H,QAEAijB,IAAA,SAAA5f,GACAlF,EAAAuJ,WAAA1H,OAAAqD,EACAlF,EAAA2Q,QAAA,MAGA7R,OAAAC,eAAAiB,EAAAI,KAAA,SACAlB,IAAA,WACA,MAAAc,GAAAuJ,WAAAzH,OAEAgjB,IAAA,SAAA5f,GACAlF,EAAAuJ,WAAAzH,MAAAoD,EACAlF,EAAA2Q,QAAA,MAGA7R,OAAAC,eAAAiB,EAAAI,KAAA,gBACAlB,IAAA,WACA,MAAAc,GAAA2D,gBAGA7E,OAAAC,eAAAiB,EAAAI,KAAA,cACAlB,IAAA,WACA,MAAAJ,QAAAgC,KAAAd,EAAAgL,YAAAkG,IAAA,SAAArH,GACA,MAAA7J,GAAAgL,WAAAnB,QAIA/K,OAAAC,eAAAiB,EAAAI,KAAA,eACAlB,IAAA,WACA,MAAAc,GAAAgN,eAGAlO,OAAAC,eAAAiB,EAAAI,KAAA,cACAlB,IAAA,WACA,MAAAc,GAAAuJ,YAEAub,IAAA,SAAA5f,GACAlF,EAAAuJ,WAAArE,KAGApG,OAAAC,eAAAiB,EAAAI,KAAA,gBACAlB,IAAA,WACA,MAAAc,GAAAuJ,YAEAub,IAAA,SAAA5f,GACAlF,EAAAuJ,WAAArE,KAGApG,OAAAC,eAAAiB,EAAAI,KAAA,cACAlB,IAAA,WACA,MAAAc,GAAAuJ,WAAAP,cAGAlK,OAAAC,eAAAiB,EAAAI,KAAA,aACAlB,IAAA,WACA,MAAAc,GAAAuJ,WAAAR,aAGAjK,OAAAC,eAAAiB,EAAAI,KAAA,gBACAlB,IAAA,WACA,MAAAc,GAAAkJ,UAAA6G,gBAGAjR,OAAAC,eAAAiB,EAAAI,KAAA,eACAlB,IAAA,WACA,MAAAc,GAAAkJ,UAAAoH,eAGAxR,OAAAC,eAAAiB,EAAAI,KAAA,aACAlB,IAAA,WACA,MAAAc,GAAAkJ,UAAAD,WAEA6b,IAAA,SAAA5f,GACAlF,EAAAkJ,UAAAD,UAAA/D,KAGApG,OAAAC,eAAAiB,EAAAI,KAAA,cACAlB,IAAA,WACA,MAAAc,GAAAkJ,UAAAC,YAEA2b,IAAA,SAAA5f,GACAlF,EAAAkJ,UAAAC,WAAAjE,KAGApG,OAAAC,eAAAiB,EAAAI,KAAA,SACAlB,IAAA,WACA,MAAAc,GAAAoI,SAGAtJ,OAAAC,eAAAiB,EAAAI,KAAA,SACAlB,IAAA,WACA,MAAAc,GAAA+W,SAGAjY,OAAAC,eAAAiB,EAAAI,KAAA,gBACAlB,IAAA,WACA,MAAAc,GAAAoa,gBAGAtb,OAAAC,eAAAiB,EAAAI,KAAA,eACAlB,IAAA,WACA,MAAAc,GAAAkN,eAGApO,OAAAC,eAAAiB,EAAAI,KAAA,gBACAlB,IAAA,WACA,MAAAc,GAAAqK,gBAGAvL,OAAAC,eAAAiB,EAAAI,KAAA,eACAlB,IAAA,WACA,MAAAc,GAAAyI,eAGA3J,OAAAC,eAAAiB,EAAAI,KAAA,cACAlB,IAAA,WACA,MAAAc,GAAAiH,cAGAnI,OAAAC,eAAAiB,EAAAI,KAAA,YACAlB,IAAA,WACA,MAAAc,GAAAmP,YAGArQ,OAAAC,eAAAiB,EAAAI,KAAA,WACAlB,IAAA,WACA,MAAAc,GAAA6Z,WAGA7Z,EAAAI,KAAA0J,cACA9J,EAAAI,KAAA2H,WAAA/H,EAAA+H,WACA/H,EAAAulB,iBAAA,SAAA3hB,GACA,GAAAvF,GAAAK,EAAAgY,EAAA8O,CACA,WAAA5hB,GAAA,KAAAA,OAAA/D,KAAA+D,EACA,QAOA,IALA,gBAAAA,IACA,gBAAAA,IACA,iBAAAA,KACAA,IAAyB6hB,EAAA7hB,MAEzBvD,MAAAoH,QAAA7D,EAAA,qBAAAA,GAAA,IACAvD,MAAAoH,QAAA7D,IAAA,IAAAA,EAAAgI,OACA,MAAAhI,EAiBA,IAfA,kBAAAA,KACAvF,EAAAuF,EAAAjD,MAAAX,EAAAI,MAAA,SAAA1B,GACA8mB,GACAna,QAAAC,KAAA,mHAEAtL,EAAAulB,iBAAA7mB,SAGA8mB,GAAA,EACAxlB,EAAAulB,iBAAAlnB,IAGAgC,MAAAoH,QAAA7D,IAAA,gBAAAA,KACAA,OAEAvD,MAAAoH,QAAA7D,GAmBA,MAlBAvD,OAAAoH,QAAA7D,EAAA,MAEAA,OAGA8S,EAAA,EACAhY,KACAkF,EAAA1D,QAAA,SAAAoI,GACAoO,EAAArD,KAAAqD,MAAApO,EAAAsD,UAGAhI,EAAA1D,QAAA,SAAAoI,EAAA0D,GACA,GAAAvK,EAEA,KADA/C,EAAAsN,MACAvK,EAAA,EAA+BA,EAAAiV,EAASjV,GAAA,EACxC/C,EAAAsN,GAAAvK,GAAA6G,EAAA7G,IAAA,OAGA/C,CAEA,UAAAojB,OAAA,mGAEAhjB,OAAAC,eAAAiB,EAAAI,KAAA,mBACAlB,IAAA,WACA,MAAAc,GAAA2Y,wBAGA7Z,OAAAC,eAAAiB,EAAAI,KAAA,gBACAlB,IAAA,WACA,MAAAc,GAAAyb,iBAAA,MAGA3c,OAAAC,eAAAiB,EAAAI,KAAA,iBACAlB,IAAA,WACA,MAAAc,GAAAyb,qBAGA3c,OAAAC,eAAAiB,EAAAI,KAAA,iBACAlB,IAAA,WACA,MAAAc,GAAAyN,mBAAAyD,IAAA,SAAA0O,GACA,MAAAA,QAIA9gB,OAAAC,eAAAiB,EAAAI,KAAA,OACAlB,IAAA,WACA,MAAAc,GAAA+B,OAGAjD,OAAAC,eAAAiB,EAAAI,KAAA,UACAlB,IAAA,WACA,MAAAc,GAAAiY,aAEA6M,IAAA,SAAA5f,GACA,IAAA7E,MAAAoH,QAAAvC,IAAA,gBAAAA,GAAA,GACA,SAAA4c,OAAA,sCAEA,QAAAjiB,KAAAqF,EAAA,GAAAvG,KACA,SAAAmjB,OAAA,sEAEA9hB,GAAAugB,OAAArb,EAAAgM,IAAA,SAAAoF,EAAAtK,GAQA,MAPAsK,GAAAxU,MAAAwU,EAAAxU,OAAA9B,EAAAuC,MAAAgG,YACA+N,EAAAtW,EAAA6D,UAAA7D,EAAA4gB,kBAAAtK,EAAA3X,MACA2X,EAAAoK,OAAApK,EAAAoK,QAAA1gB,EAAA0gB,OAAApK,EAAAtO,MACAsO,EAAAtO,KAAAsO,EAAAtO,MAAA,SACAsO,EAAAtK,QACAsK,EAAA/O,YAAAyE,EACAsK,EAAAnQ,UAAA,EACAmQ,IAEAtW,EAAAwgB,eAAA3gB,GACAG,EAAAka,mBACAla,EAAAygB,qBACAzgB,EAAA4iB,sBACA5iB,EAAA2Q,QAAA,GACA3Q,EAAA2I,cAAA,iBAAqD4X,OAAAvgB,EAAAugB,YAGrDzhB,OAAAC,eAAAiB,EAAAI,KAAA,QACAlB,IAAA,WACA,MAAAc,GAAA4D,KAAAsN,IAAA,SAAA5I,GAEA,aADAA,GAAAtI,EAAA6D,UACAyE,KAGAwc,IAAA,SAAA5f,GACAlF,EAAA4hB,aAAA5hB,EAAAulB,iBAAArgB,GAAAgM,IAAA,SAAA5I,GAGA,MAFAA,GAAAtI,EAAA6D,UAAA7D,EAAAga,IACAha,EAAAga,KAAA,EACA1R,IAEAtI,EAAA6Z,WAEA7Z,EAAA4D,KAAA5D,EAAA4hB,cACA5hB,EAAAugB,QAAAvgB,EAAA4D,KAAAgI,OAAA,IACA5L,EAAAwgB,WAAAxgB,EAAA+jB,qBAEA/jB,EAAAugB,QAAA,IAAAvgB,EAAA4D,KAAAgI,SACA5L,EAAAwgB,aAAwC7hB,KAAA,KACxCqB,EAAAwgB,WAAA,GAAAxgB,EAAA6D,UAAA7D,EAAA4gB,kBAAA,KAEA5gB,EAAAwgB,aAAAxgB,EAAAugB,SACAvgB,EAAAygB,qBACAzgB,EAAA4iB,sBACA5iB,EAAA2I,cAAA,iBAAyD4X,OAAAvgB,EAAAwgB,cAEzDxgB,EAAAka,mBACAla,EAAA8J,WAAA4b,mBAAA1lB,EAAA4D,KAAAgI,OAAA,OACA/L,KAAAG,EAAA6iB,gBACA7iB,EAAA4e,WAGA3J,sBAAA,WACAjV,EAAA2e,kBAAA,gBAEA3e,EAAA2Q,UAAqC3Q,EAAAkB,MAAA,GACrClB,EAAAwN,kBACAxN,EAAA4iB,sBACA5iB,EAAA2I,cAAA,eAAmD/E,KAAA5D,EAAA4D,UAGnD5D,EAAAojB,cAAA,WASA,QAAAuC,GAAAzgB,EAAA0gB,GACA,GAAAC,MAAA3gB,GACA,SAAA4c,OAAA,mCAEA5c,GAAA,IACAA,EAAA,GAEAA,EAAA6K,IACA7K,EAAA6K,GAEAA,EAAA,IACA7K,EAAA,GAEA+D,EAAA/D,EACA0gB,GACA5lB,EAAAsX,SAGA,QAAAwO,GAAA5gB,EAAA0gB,GACA,GAAAC,MAAA3gB,GACA,SAAA4c,OAAA,oCAEA5c,GAAA,IACAA,EAAA,GAEAA,EAAAoL,IACApL,EAAAoL,GAEAA,EAAA,IACApL,EAAA,GAEAiE,EAAAjE,EACA0gB,GACA5lB,EAAAsX,SAzCA,GAAAyO,GAAA,EACAC,EAAA,EACA/c,EAAA,EACAE,EAAA,EACA4G,EAAA,EACAO,EAAA,EACAR,EAAA,GACAO,EAAA,EAqCArQ,GAAAkJ,UAAA8L,SAAA,SAAAvT,EAAAE,GACAmkB,EAAArkB,GAAA,GACAkkB,EAAAhkB,IAEA7C,OAAAC,eAAAiB,EAAAkJ,UAAA,mBACAhK,IAAA,WACA,MAAA4Q,IAEAgV,IAAA,SAAA5f,GACA4K,EAAA5K,KAGApG,OAAAC,eAAAiB,EAAAkJ,UAAA,kBACAhK,IAAA,WACA,MAAAmR,IAEAyU,IAAA,SAAA5f,GACAmL,EAAAnL,KAGApG,OAAAC,eAAAiB,EAAAkJ,UAAA,UACAhK,IAAA,WACA,MAAA6mB,IAEAjB,IAAA,SAAA5f,GACA6K,EAAA7K,IACA+D,EAAA,GAEA8c,EAAA7gB,KAGApG,OAAAC,eAAAiB,EAAAkJ,UAAA,SACAhK,IAAA,WACA,MAAA8mB,IAEAlB,IAAA,SAAA5f,GACA8gB,EAAA9gB,KAGApG,OAAAC,eAAAiB,EAAAkJ,UAAA,aACAhK,IAAA,WACA,MAAA+J,IAEA6b,IAAAa,IAEA7mB,OAAAC,eAAAiB,EAAAkJ,UAAA,cACAhK,IAAA,WACA,MAAAiK,IAEA2b,IAAAgB,IAEAhnB,OAAAC,eAAAiB,EAAAkJ,UAAA,gBACAhK,IAAA,WACA,MAAA6Q,IAEA+U,IAAA,SAAA5f,GACA+D,EAAA/D,IACA+D,EAAAoK,KAAAqD,IAAAxR,EAAA,IAEA6K,EAAAgW,IACA9c,EAAA,GAEA8G,EAAA7K,KAGApG,OAAAC,eAAAiB,EAAAkJ,UAAA,eACAhK,IAAA,WACA,MAAAoR,IAEAwU,IAAA,SAAA5f,GACAiE,EAAAjE,IACAiE,EAAAkK,KAAAqD,IAAAxR,EAAA,IAEAoL,EAAApL,QAMCvE,MAAA/C,EAAA+B,MAAA9B,EAAAD,QAAAgC,ILqmEK,SAAU/B,EAAQD,EAASM,GM9iGjC,GAAAyB,GAAAC,CAEAD,UAmdCE,MAndDD,EAAA,WACA,YACA,iBAAAI,GAEA,QAAAimB,GAAA5d,EAAAxD,EAAAqhB,EAAAC,GASA,QAAAC,KACAF,EAAAhmB,QAAA,SAAAmmB,GAGA,QAAAC,GAAA9T,GACAA,EAAA+T,gBAAAC,GACAH,EAAA7O,YAAAgP,YAAAhU,EAAA+T,eACAE,IAAAjU,EAAA+T,eACAG,IAAAlU,EAAA+T,gBAEAF,EAAA7O,YAAAgL,UACAmE,EAAA9Q,OAAA8Q,EAAAzf,QAAAmf,EAAA7O,aAAA,GACA6O,EAAA7O,gBAAA3X,GACA6mB,EAAAnR,oBAAA,WAAA+Q,GACAE,EAAAjR,oBAAA,WAAA+Q,GACAI,EAAAE,aAAA,mBACAF,EAAAE,aAAA,gBAEA,QAAAC,GAAAX,GAEA,SAAAQ,EAAAI,aAAA,YACA,MAAAJ,EAAAI,aAAA,eADA,CAIA,GAAAC,GAAAL,EAAA/T,uBACAoU,IACAjU,KAAAiU,EAAAjU,KAAA9S,EAAAuC,MAAAykB,2BAAAR,EAAAnd,YACA2J,IAAA+T,EAAA/T,IAAAhT,EAAAuC,MAAA0kB,0BACAjO,OAAA+N,EAAA/N,OACAC,MAAA8N,EAAA9N,OAEAoN,EAAA7O,YAAAyO,EAAA5d,EAAA0e,EAAAb,EAAA9lB,GACAsmB,EAAAE,aAAA,mBACAF,EAAAhS,iBAAA,WAAA4R,GACAE,EAAA9R,iBAAA,WAAA4R,GACAK,EAAAje,KAAA2d,EAAA7O,cAEA,QAAA0P,KACA,GAAA7oB,EACA,UAAAqoB,EAAAI,aAAA,gBAIA,GADAJ,EAAAE,aAAA,eACA,kBAAAP,GAAAH,MAOA,gBAHArmB,MAHAxB,EAAAgoB,EAAAH,MAAAvlB,MAAAP,GAAA,SAAA8lB,GACAW,EAAAX,QAEA7lB,MAAAoH,QAAApJ,IACAwoB,EAAAxoB,GAIAwoB,GAAAR,EAAAH,QAlDA,GACAO,GADAC,EAAAlS,SAAAmG,cAAA,QAoDA,SAAA0L,GACA,QAAAc,GAAAC,GACA,wBAAAA,GACAD,EAAAC,EAAA/e,IAEA,gBAAA+e,OACAV,GAAA3L,YAAAqM,IAGApnB,EAAAgb,kBAAA0L,EAAA,qCACAA,EAAAhS,iBAAA,uBACA1U,EAAAgb,kBAAA0L,EAAA,6CAEAA,EAAAhS,iBAAA,sBACA1U,EAAAgb,kBAAA0L,EAAA,4CAEAA,EAAAnlB,UAAA6lB,IAGAD,EAAAd,EAAArc,OACAqc,EAAAK,uBACAL,EAAAH,OAAAG,EAAAH,MAAAta,OAAA,IACA6a,EAAAjS,SAAAmG,cAAA,OACA3a,EAAAgb,kBAAAyL,EAAA,uCACAA,EAAAllB,UAAAvB,EAAAuC,MAAA8kB,0BACAX,EAAA3L,YAAA0L,GACAC,EAAAhS,iBAAA,YAAAwS,GACAR,EAAAhS,iBAAA,sBACAgS,EAAAE,aAAA,kBAGAP,EAAA/Q,OACAoR,EAAAhS,iBAAA,iBAAArM,GACAge,EAAA/Q,MAAA3U,MAAAX,GAAAqI,OAIAge,GACAG,EAAAzL,YAAA2L,KAGA,QAAAY,GAAA1R,GACAsQ,EAAAtQ,GAAA8Q,qBAAA/d,cAAA,GAAA4e,OAAA,UAEA,QAAAC,KACAhB,EAAAvd,UAAA,EACAuL,SAAAC,KAAAsG,YAAA0M,GACiBA,EAAAle,YACjBke,EAAAle,WAAA4Q,YAAAsN,GAEAjB,EAAAvd,WAAAud,EAAAzW,aAAAyW,EAAAld,cAAAoe,EAAAne,WACAme,EAAAne,WAAA4Q,YAAAuN,GACiBlB,EAAAzW,aAAAyW,EAAAld,aAAA,KACjBkd,EAAAvd,WAAAud,EAAAzW,aAAAyW,EAAAld,eACAkL,SAAAC,KAAAsG,YAAA2M,GAGA,QAAAC,GAAA3f,GACA,eAAAlD,KACA,GAAAmH,GAAAjM,EAAA8J,WAAA8d,wBACA,QAAA5f,GAAA,IAAAwe,EAAAvd,WACA,SAAAjB,GAAAwe,EAAAvd,YAAAud,EAAAzW,eACAyW,EAAAvd,WAAA,OAAAjB,GAAAiE,IACA4b,EAAAzT,WAAAtP,EAAA9E,EAAA8J,WAAAge,yBAAA9f,KAGA,QAAA+f,GAAA/f,GACA,kBACAkM,aAAA2T,IAlIA,GAMApV,GANA+T,EAAAhS,SAAAmG,cAAA,OACA8M,EAAAjT,SAAAmG,cAAA,OACA+M,EAAAlT,SAAAmG,cAAA,OACAgM,KACAqB,GAAA,EACA5nB,IAEA,KAAAC,MAAAoH,QAAAye,GAAwC,SAAApE,OAAA,sCAyOxC,OAvCA1hB,GAAA2J,WAAA/J,EAAAI,KACAA,EAAA+lB,oBACA/lB,EAAAomB,YAtEA,WACA,GAAAyB,MACAvoB,EAAAM,EAAAgX,aAAAhX,EAAA0S,OACA0T,KACApmB,EAAAgb,kBAAAwL,EAAA,gCACAyB,EAAAxmB,EAAAoD,EAAAiO,KAAApT,EAAAoT,KACAmV,EAAAtmB,EAAAkD,EAAAmO,IAAAtT,EAAAsT,IACAiV,EAAApmB,OAAA,EACAqmB,GAAA,EACA1B,EAAAjkB,MAAA0Y,SAAA,WACAwM,EAAAllB,MAAA4lB,MAAAnoB,EAAAuC,MAAA6lB,sBACAV,EAAAnlB,MAAA4lB,MAAAnoB,EAAAuC,MAAA6lB,uBACAX,EAAAC,GAAAxnB,QAAA,SAAAmoB,GACAA,EAAA9lB,MAAA+lB,UAAA,SACAD,EAAA9lB,MAAA0Y,SAAA,WACAoN,EAAA9lB,MAAA2Y,OAAAgN,EAAA,IAEA1B,EAAAjkB,MAAA2Y,OAAAgN,EACA/B,KAAAoC,gBACA/B,EAAAjkB,MAAAimB,UAAAhoB,OAAAioB,YAAAR,EAAAtmB,EAAA3B,EAAAuC,MAAAmmB,yBAAA,KACAlC,EAAAjkB,MAAAomB,SAAA9jB,EAAA/C,MAAA,KACAmmB,EAAAtmB,GAAAkD,EAAAhD,QAEA2kB,EAAAjkB,MAAAuQ,KAAAmV,EAAAxmB,EAAA,KACA+kB,EAAAjkB,MAAAyQ,IAAAiV,EAAAtmB,EAAA,KACA6kB,EAAA9R,iBAAA,SAAA8S,GACAhB,EAAA9R,iBAAA,iBAAAlC,GACAxS,EAAA4R,WACA4U,EAAAvd,WAAAuJ,EAAAsM,OACA0H,EAAArd,YAAAqJ,EAAAuM,QAEAyI,MAEAC,EAAAlmB,UAAAvB,EAAAuC,MAAAqmB,uBACAlB,EAAAnmB,UAAAvB,EAAAuC,MAAAsmB,yBACArC,EAAAzL,YAAA0M,GACAjT,SAAAC,KAAAsG,YAAA2M,GACAlT,SAAAC,KAAAsG,YAAAyL,GACA/T,EAAA+T,EAAA7T,0BACAF,EAAAuG,OAAAxY,OAAAioB,cAAAtC,KAAAoC,gBACAN,EAAAtmB,EAAAnB,OAAAioB,YAAAjC,EAAAld,aACA2e,EAAAtmB,EAAA,IAAoCsmB,EAAAtmB,EAAA,GACpC6kB,EAAAld,aAAA9I,OAAAioB,cACAjC,EAAAjkB,MAAAV,OAAArB,OAAAioB,YAAAzoB,EAAAuC,MAAAumB,wBAAA,OAGArW,EAAAwG,MAAAzY,OAAAuoB,aAEAd,EAAAxmB,EADA0kB,EACAA,EAAAK,UAAAxd,WAAAwd,EAAAnd,YAEA7I,OAAAuoB,WAAAvC,EAAAnd,aAGAmd,EAAAjkB,MAAAuQ,KAAAmV,EAAAxmB,EAAA,KACA+kB,EAAAjkB,MAAAyQ,IAAAiV,EAAAtmB,EAAA,KACA8Q,EAAA+T,EAAA7T,wBACA8U,EAAAllB,MAAAyQ,IAAAP,EAAAO,IAAA,KACA0U,EAAAnlB,MAAAyQ,IAAAP,EAAAO,IAAAP,EAAA5Q,OAAA6lB,EAAApe,aAAA,KACAme,EAAAllB,MAAAuQ,KAAAL,EAAAK,KAAA,KACA4U,EAAAnlB,MAAAuQ,KAAAL,EAAAK,KAAA,KACA4U,EAAAnlB,MAAAT,MAAA0kB,EAAAnd,YAAA,KACAoe,EAAAllB,MAAAT,MAAA0kB,EAAAnd,YAAA,KACAqe,EAAAhT,iBAAA,YAAAiT,EAAA,SACAD,EAAAhT,iBAAA,WAAAqT,EAAA,SACAN,EAAA/S,iBAAA,YAAAiT,EAAA,OACAF,EAAA/S,iBAAA,WAAAqT,EAAA,OACAP,OAMApnB,EAAAknB,aACAlnB,EAAAqS,OACArS,EAAA8lB,QACA9lB,EAAAoiB,QAAA,WACAtO,aAAA2T,GACAlB,EAAAzmB,QAAA,SAAAzB,GACAA,EAAA+jB,aAEAkF,EAAAD,EAAAjB,GAAAtmB,QAAA,SAAAmoB,GACAA,EAAA9e,YAAwC8e,EAAA9e,WAAA4Q,YAAAkO,MAGxCvpB,OAAAC,eAAAqB,EAAA,iBACAlB,IAAA,WACA,MAAA8oB,IAEAlD,IAAA,SAAA5f,GACA,mBAAAA,IAAA2gB,MAAA3gB,IAAA8jB,SAAA9jB,IACA,SAAA4c,OAAA,qDAEAkG,GAAA9iB,EACA8iB,EAAA9B,EAAAta,OAAA,IACAoc,EAAA9B,EAAAta,OAAA,GAEAoc,EAAA,IACAA,EAAA,GAEA9B,EAAAhmB,QAAA,SAAAmmB,EAAAra,GACA,GAAAA,IAAAgc,EACA,MAAAhoB,GAAAgb,kBAAAqL,EAAAK,qBAAA,0CAEA1mB,GAAAgb,kBAAAqL,EAAAK,qBAAA,0CAIAtmB,EAEA,QAAA6oB,GAAAzW,GAQA,QAAA0W,KACAC,KACAnpB,EAAA4D,KAAA1D,QAAA,SAAAoI,GACA,GAAApD,GAAAoD,EAAAkK,EAAApR,KAAAiF,OAAA1H,KACAwqB,GAAAjkB,KACAikB,EAAAjkB,IACA8E,MAAAhK,EAAA+H,WAAAyK,EAAApR,KAAAiF,OAAA2B,MAAA,WAAgF5G,MAAQ8D,WACxFoQ,MAAA,SAAA9C,GACA4W,EAAAlkB,QACAsN,EAAAqB,kBACAuV,EAAAzgB,cAAA,GAAA4e,OAAA,UACAvnB,EAAAqpB,2BAKAF,EAAArqB,OAAAgC,KAAAqoB,GAAAjY,IAAA,SAAAY,GACA,MAAAqX,GAAArX,KAGA,QAAAwX,GAAAjhB,GACAA,IAAA,oBAAAnB,QAAAmB,EAAAgT,WACA6N,IACAK,EAAAH,EAAAzW,wBACA6W,IACAA,EAAAhH,UACAgH,MAAA3pB,IAEA2pB,EAAAvD,EAAAzT,GACAM,KAAAyW,EAAAzW,KACAE,IAAAuW,EAAAvW,IACAiG,MAAAsQ,EAAAtQ,MACAD,OAAAuQ,EAAAvQ,OACAnX,OAAA0nB,EAAA1nB,OACAC,MAAAynB,EAAAznB,OACiBqnB,GAAsBZ,eAAA,IACvCiB,EAAAxB,cAAA,GA3CA,GAKAmB,GACAI,EANAE,EAAAjV,SAAAmG,cAAA,OACA+O,EAAAlV,SAAAmG,cAAA,OACAgP,EAAAnV,SAAAmG,cAAA,UACAyO,EAAA5U,SAAAmG,cAAA,SACAxb,EAAAqT,EAAApR,MAAAoR,EAAApR,KAAAiF,OAAAmM,EAAApR,KAAAiF,OAAA2D,OAAAwI,EAAApR,KAAAiF,OAAA1H,KAAA,EAyCAqB,GAAAgb,kBAAA0O,EAAA,sCACA1pB,EAAAgb,kBAAA2O,EAAA,8CACA3pB,EAAAgb,kBAAAoO,EAAA,6CACAA,EAAAQ,QAAA5pB,EAAAqpB,oBACAD,EAAA1U,iBAAA,mBAAAlC,GAEA,KAAAA,EAAA6I,UACAmO,EAAAxB,eAAA,GAGA,KAAAxV,EAAA6I,UACAmO,EAAAxB,eAAA,GAGA,KAAAxV,EAAA6I,UACAmO,EAAAlC,WAAAkC,EAAAxB,eACAhoB,EAAA6jB,sBAGA,IAAArR,EAAA6I,UACAmO,EAAAlC,WAAAkC,EAAAxB,eACAxV,EAAAsB,kBAGA,KAAAtB,EAAA6I,SACArb,EAAA6jB,uBAGAuF,EAAA1U,iBAAA,mBACA1U,EAAA0b,UAAAlJ,EAAApR,KAAAiF,OAAA1H,KAAAyqB,EAAAlkB,SAEAkkB,EAAA1U,iBAAA,QAAA4U,GACAF,EAAAlkB,MAAAlF,EAAAwL,cAAAgH,EAAApR,KAAAiF,OAAA1H,OAAA,GACA+qB,EAAAnoB,UAAAvB,EAAA8J,WAAA+f,iBAAAC,QAAA,MAAA3qB,GACAwqB,EAAAC,QAAA,WACA,GAAAJ,EACA,MAAAxpB,GAAAqpB,qBAEAC,MAEAK,EAAApoB,UAAAvB,EAAAuC,MAAAwnB,wBACAN,EAAA/U,iBAAA,iBAAAlC,GACA,MAAAA,GAAAqB,oBAEA4V,EAAA1O,YAAA2O,GACAD,EAAA1O,YAAAqO,GACAK,EAAA1O,YAAA4O,GACAnX,EAAA0T,MAAAxd,MACAsB,MAAAyf,IAEA3qB,OAAAgC,KAAAd,EAAAwL,eAAAI,QACA9M,OAAAgC,KAAAd,EAAAwL,eAAAtL,QAAA,SAAA8pB,GACA,GAAA7lB,GAAAnE,EAAA8iB,gBAAAkH,EACAxX,GAAA0T,MAAAxd,MACAsB,MAAAhK,EAAA8J,WAAAmgB,uBAAAH,QAAA,MAAA3lB,EAAA6F,OAAA7F,EAAAxF,MACA2W,MAAA,SAAA9C,GACAA,EAAAsB,iBACA9T,EAAA0b,UAAAsO,EAAA,IACAhqB,EAAAoa,aAAAC,aAMA,QAAA6P,GAAA1X,GACA,GAAA2X,KAAA3X,EAAApR,KAAAgpB,cAAA5X,EAAApR,KAAAqI,iBACA+I,EAAApR,KAAAipB,aAAA7X,EAAApR,KAAAyF,UAAA2L,EAAApR,KAAA0F,YACA9G,GAAA8J,WAAAwgB,YAAAH,GACAlB,EAAAzW,GAEAxS,EAAA8J,WAAAygB,UACAvqB,EAAAiH,WAAA+J,OAAA,SAAAvR,EAAA4E,GACA,MAAA5E,GAAA4E,EAAAuH,QACqB,MACrB4G,EAAA0T,MAAAxd,MACAsB,MAAAhK,EAAA8J,WAAA0gB,SACAlV,MAAA,WACAd,SAAAiW,YAAA,QACAzqB,EAAA6jB,qBACA7jB,EAAAoa,aAAAC,WAIAra,EAAA8J,WAAAmB,gBAAAjL,EAAA8J,WAAA4gB,0BACA5rB,OAAAgC,KAAAd,EAAAoI,MAAAR,MAAAgE,OAAA,GACA9M,OAAAgC,KAAAd,EAAAoI,MAAAP,SAAA+D,OAAA,IACA4G,EAAA0T,MAAAxd,MACAsB,MAAAhK,EAAA8J,WAAA6gB,wBACArV,MAAA,SAAA9C,GACAA,EAAAsB,iBACA9T,EAAAoI,MAAAR,QACA5H,EAAAoI,MAAAP,WACA7H,EAAAwN,kBACAxN,EAAAygB,qBACAzgB,EAAA6iB,mBAAAhjB,GACAG,EAAA2I,cAAA,gBAA4DJ,YAAAvI,EAAAuC,MAAAgG,cAC5DvI,EAAA2I,cAAA,aAAyDS,WAAApJ,EAAAuC,MAAA6G,aACzDpJ,EAAAwc,iBACAxc,EAAA2Q,QAAA,GACA3Q,EAAA6jB,qBACA7jB,EAAAoa,aAAAC,WAIAra,EAAA8J,WAAA8gB,cAAA5qB,EAAA8J,WAAA+gB,mBAAAV,IACA3X,EAAA0T,MAAAxd,MACAsB,MAAAhK,EAAA8J,WAAAghB,yBAAAhB,QAAA,KAAAtX,EAAApR,KAAAiF,OAAA2D,OAAAwI,EAAApR,KAAAiF,OAAA1H,MACA2W,MAAA,SAAAjN,GACAA,EAAAyL,iBACA9T,EAAA0O,MAAA8D,EAAApR,KAAAiF,OAAA1H,KAAA,OACAqB,EAAAoa,aAAAC,WAGA7H,EAAA0T,MAAAxd,MACAsB,MAAAhK,EAAA8J,WAAAihB,0BAAAjB,QAAA,KAAAtX,EAAApR,KAAAiF,OAAA2D,OAAAwI,EAAApR,KAAAiF,OAAA1H,MACA2W,MAAA,SAAAjN,GACAA,EAAAyL,iBACA9T,EAAA0O,MAAA8D,EAAApR,KAAAiF,OAAA1H,KAAA,QACAqB,EAAA6jB,qBACA7jB,EAAAoa,aAAAC,YAzZA,GAAAwN,GAAA2B,EAAAtB,EAAA,CA8ZAloB,GAAAqpB,oBAAA,WACAG,IACAA,EAAAhH,UACAgH,MAAA3pB,KAGAG,EAAA6jB,mBAAA,WACArP,SAAAe,oBAAA,QAAAvV,EAAA6jB,oBACAqE,EAAA,EACAloB,EAAAqpB,sBACArpB,EAAAwX,aACAxX,EAAAwX,YAAAgL,UAEAxiB,EAAAwX,gBAAA3X,IAEAG,EAAAgrB,iBAAA,SAAAxY,EAAA+E,GACA,GAAAvX,EAAA4R,UAAAY,EAAAiL,SAAAzd,EAAA0S,OAAA,CAGA,GAAAwT,MACArhB,EAAA0S,GAAAvX,EAAAyX,YAAAjF,GAAA,GACAnK,GACAuL,YAAApB,EACApR,KAAApB,EAAAwT,UAAA3O,EAAApD,EAAAoD,EAAAlD,GACAukB,QAEA7d,GAAAjH,KAAAoG,QACA0iB,EAAA7hB,GAEArI,EAAA2I,cAAA,cAAAN,IAGAA,EAAAjH,KAAAoG,SACAxH,EAAAwX,aACAxX,EAAA6jB,qBAEA7jB,EAAAwX,YAAAyO,EAAA5d,GACAyK,KAAAjO,EAAApD,EAAAoD,EAAA4N,KAAAK,KAAA9S,EAAAuC,MAAA0oB,sBAAAjrB,EAAA0B,iBACAsR,IAAAnO,EAAAlD,EAAAkD,EAAA4N,KAAAO,IAAAhT,EAAAuC,MAAA2oB,qBAAAlrB,EAAA4B,gBACAqX,MAAA5Q,EAAAjH,KAAAU,MAAAuG,EAAAjH,KAAAK,EAAAoD,EAAA4N,KAAAK,KACAkG,OAAA3Q,EAAAjH,KAAAS,OAAAwG,EAAAjH,KAAAO,EAAAkD,EAAA4N,KAAAO,IACAnR,OAAAwG,EAAAjH,KAAAS,OACAC,MAAAuG,EAAAjH,KAAAU,OACiBokB,GACjB1R,SAAAE,iBAAA,QAAA1U,EAAA6jB,oBACArR,EAAAsB,sBAKCnT,MAAA/C,EAAA+B,MAAA9B,EAAAD,QAAAgC,INsjGK,SAAU/B,EAAQD,EAASM,GO3gHjC,GAAAyB,GAAAC,CAEAD,UAkOCE,MAlODD,EAAA,WACA,YACA,iBAAAI,GACAA,EAAAoiB,UACAtY,aACA,YACA,YACA,kBACA,4BACA,sBACA,kCACA,iBACA,gBACA,6BACA,0BACA,oBACA,kBACA,uBACA,wBACA,+BACA,wBACA,yBACA,4BACA,yBACA,sBACA,8BACA,iCACA,aACA,wBACA,yBACA,sBACA,sBACA,wBACA,2BACA,wBACA,+BACA,+BACA,gCACA,sBACA,+BACA,yBACA,mDACA,qDACA,uDACA,iDACA,iCACA,mCACA,wCACA,gCACA,oBACA,0BACA,uBACA,oBACA,gBACA,qCACA,yBAEAwY,SACA,uDACA,mDACA,8BACA,uCACA,qCACA,4DACA,4CACA,yDACA,oCACA,8BACA,4BACA,6BACA,2BACA,+DACA,+CACA,mEACA,mDACA,gEACA,gDACA,gCACA,gCACA,sBACA,6CACA,6BACA,iDACA,6CACA,uBACA,iCACA,+BACA,kBACA,gCACA,mCACA,sDACA,sCACA,wBACA,sBACA,uBACA,qBACA,yDACA,yCACA,mCACA,+BACA,qDACA,yCACA,mCACA,gCACA,6DACA,yDACA,oCACA,gDACA,2CACA,8BACA,+CACA,kEACA,kDACA,oCACA,kCACA,mCACA,iCACA,+CACA,oBACA,iEACA,0CACA,uCACA,uDACA,gEACA,uCACA,4CACA,8CACA,sCACA,gDACA,wCACA,sCACA,mDACA,yDACA,kCACA,yCACA,2CACA,mDACA,2CACA,+DACA,uCACA,+BACA,wDACA,iDACA,sCACA,gCACA,2CACA,uCACA,qCACA,oCACA,4BACA,4BACA,8BACA,6BACA,8BACA,uDACA,mDACA,oCACA,sDACA,kDACA,0BACA,oCACA,4BACA,0BACA,6CACA,sBACA,iEACA,0CACA,2DACA,qCACA,yCACA,0CACA,wCACA,qCACA,sBACA,iBACA,oBACA,mBACA,sDACA,kDACA,kCACA,0DACA,uCACA,0DACA,sDACA,+BACA,6CACA,wCACA,2BACA,4CACA,+DACA,+CACA,iCACA,+BACA,gCACA,8BACA,kEACA,qDACA,4CACA,0BACA,kDACA,sDACA,kDACA,4BACA,mCACA,+CACA,yBACA,2BACA,wBACA,4DACA,wDACA,sBACA,wDACA,oCACA,kDACA,2BACA,2BACA,4CACA,sBACA,0BACA,2BACA,yBACA,sBACA,0BAIC3hB,MAAA/C,EAAA+B,MAAA9B,EAAAD,QAAAgC,IP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","file":"canvas-datagrid.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"canvasDatagrid\"] = factory();\n\telse\n\t\troot[\"canvasDatagrid\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"canvasDatagrid\"] = factory();\n\telse\n\t\troot[\"canvasDatagrid\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n    __webpack_require__(1),\n    __webpack_require__(2),\n    __webpack_require__(3),\n    __webpack_require__(4),\n    __webpack_require__(5),\n    __webpack_require__(6),\n    __webpack_require__(7)\n], __WEBPACK_AMD_DEFINE_RESULT__ = function context() {\n    'use strict';\n    var modules = Array.prototype.slice.call(arguments);\n    function grid(args) {\n        args = args || {};\n        var self = {};\n        self.args = args;\n        self.createGrid = grid;\n        modules.forEach(function (module) {\n            module(self);\n        });\n        self.init();\n        return self.intf;\n    }\n    if (window && !window.canvasDatagrid && !window.require) {\n        window.canvasDatagrid = grid;\n    }\n    module.exports = grid;\n    return grid;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals XMLSerializer: false, define: true, Blob: false, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var perfCounters = [],\n            drawCount = 0,\n            perfWindowSize = 20;\n        self.htmlImageCache = {};\n        function drawOnAllImagesLoaded() {\n            var loaded = true;\n            Object.keys(self.htmlImageCache).forEach(function (html) {\n                if (!self.htmlImageCache[html].complete) {\n                    loaded = false;\n                }\n            });\n            if (loaded) {\n                self.draw();\n            }\n        }\n        function drawHtml(cell) {\n            var img,\n                v = cell.innerHTML || cell.formattedValue,\n                x = cell.x + self.canvasOffsetLeft,\n                y = cell.y + self.canvasOffsetTop;\n            if (self.htmlImageCache[v]) {\n                img = self.htmlImageCache[v];\n                if (img.height !== cell.height || img.width !== cell.width) {\n                    // height and width of the cell has changed, invalidate cache\n                    self.htmlImageCache[v] = undefined;\n                } else {\n                    if (!img.complete) {\n                        return;\n                    }\n                    return self.ctx.drawImage(img, x, y);\n                }\n            }\n            img = new Image(cell.width, cell.height);\n            self.htmlImageCache[v] = img;\n            img.onload = function () {\n                self.ctx.drawImage(img, x, y);\n                drawOnAllImagesLoaded();\n            };\n            img.src = 'data:image/svg+xml;base64,' + btoa(\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + cell.width + '\" height=\"' + cell.height + '\">\\n' +\n                    '<foreignObject class=\"node\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\\n' +\n                    '<body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;padding:0;\">\\n' +\n                    v + '\\n' +\n                    '</body>' +\n                    '</foreignObject>\\n' +\n                    '</svg>\\n'\n            );\n        }\n        function drawOrderByArrow(x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.columnHeaderOrderByArrowColor;\n            self.ctx.strokeStyle = self.style.columnHeaderOrderByArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + self.style.columnHeaderOrderByArrowMarginLeft;\n            y = y + self.style.columnHeaderOrderByArrowMarginTop;\n            if (self.orderDirection === 'asc') {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + self.style.columnHeaderOrderByArrowWidth, y);\n                self.ctx.lineTo(x + (self.style.columnHeaderOrderByArrowWidth * 0.5), y + self.style.columnHeaderOrderByArrowHeight);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y + self.style.columnHeaderOrderByArrowHeight);\n                self.ctx.lineTo(x + self.style.columnHeaderOrderByArrowWidth, y + self.style.columnHeaderOrderByArrowHeight);\n                self.ctx.lineTo(x + (self.style.columnHeaderOrderByArrowWidth * 0.5), y);\n                self.ctx.lineTo(x, y + self.style.columnHeaderOrderByArrowHeight);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return self.style.columnHeaderOrderByArrowMarginLeft\n                + self.style.columnHeaderOrderByArrowWidth\n                + self.style.columnHeaderOrderByArrowMarginRight;\n        }\n        function drawTreeArrow(cell, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.treeArrowColor;\n            self.ctx.strokeStyle = self.style.treeArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + self.style.treeArrowMarginLeft;\n            y = y + self.style.treeArrowMarginTop;\n            if (self.openChildren[cell.data[self.uniqueId]]) {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + self.style.treeArrowWidth, y);\n                self.ctx.lineTo(x + (self.style.treeArrowWidth * 0.5), y + self.style.treeArrowHeight);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y);\n                self.ctx.lineTo(x + self.style.treeArrowHeight, y + (self.style.treeArrowWidth * 0.5));\n                self.ctx.lineTo(x, y + self.style.treeArrowWidth);\n                self.ctx.lineTo(x, y);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return self.style.treeArrowMarginLeft\n                + self.style.treeArrowWidth\n                + self.style.treeArrowMarginRight;\n        }\n        function radiusRect(x, y, w, h, radius) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            var r = x + w, b = y + h;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x + radius, y);\n            self.ctx.lineTo(r - radius, y);\n            self.ctx.quadraticCurveTo(r, y, r, y + radius);\n            self.ctx.lineTo(r, y + h - radius);\n            self.ctx.quadraticCurveTo(r, b, r - radius, b);\n            self.ctx.lineTo(x + radius, b);\n            self.ctx.quadraticCurveTo(x, b, x, b - radius);\n            self.ctx.lineTo(x, y + radius);\n            self.ctx.quadraticCurveTo(x, y, x + radius, y);\n        }\n        function fillRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillRect(x, y, w, h);\n        }\n        function strokeRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.strokeRect(x, y, w, h);\n        }\n        function fillText(text, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillText(text, x, y);\n        }\n        function addBorderLine(c, pos) {\n            self.ctx.beginPath();\n            var p = {\n                t: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                },\n                r: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                b: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                l: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                },\n            };\n            p[pos]();\n            self.ctx.stroke();\n        }\n        function addEllipsis(text, width) {\n            var c, w = 0;\n            if (self.ellipsisCache[text] && self.ellipsisCache[text][width]) {\n                return self.ellipsisCache[text][width];\n            }\n            //TODO Add ellipsis back when there is a fast way to do it\n            w = self.ctx.measureText(text).width;\n            self.ellipsisCache[text] = self.ellipsisCache[text] || {};\n            c = {value: text, width: w};\n            self.ellipsisCache[text][width] = c;\n            return c;\n        }\n        function drawText(cell) {\n            var paddingLeft = self.style[cell.style + 'PaddingLeft'],\n                paddingTop = self.style[cell.style + 'PaddingTop'],\n                paddingRight = self.style[cell.style + 'PaddingRight'],\n                paddingBottom = self.style[cell.style + 'PaddingBottom'],\n                vPos = paddingTop + cell.height - (cell.height * 0.5),\n                hPos = paddingLeft + cell.treeArrowWidth + cell.orderByArrowWidth;\n            cell.text = addEllipsis(cell.formattedValue, cell.width - paddingRight - paddingLeft);\n            cell.text.height = cell.fontHeight;\n            if (cell.horizontalAlignment === 'right') {\n                hPos = cell.width - cell.text.width - paddingRight;\n            } else if (cell.horizontalAlignment === 'center') {\n                hPos = (cell.width / 2) - (cell.text.width / 2);\n            }\n            if (cell.verticalAlignment === 'top') {\n                vPos = paddingTop + cell.text.height;\n            } else if (cell.verticalAlignment === 'bottom') {\n                vPos = cell.height - paddingBottom - cell.text.height;\n            }\n            cell.text.x = cell.x + hPos;\n            cell.text.y = cell.y + vPos;\n            fillText(cell.text.value, cell.text.x, cell.text.y);\n        }\n        /**\n         * Redraws the grid. No matter what the change, this is the only method required to refresh everything.\n         * @memberof canvasDataGrid\n         * @name draw\n         * @method\n         */\n        self.draw = function (internal) {\n            if (self.dispatchEvent('beforedraw', {})) { return; }\n            if (!self.isChildGrid && (!self.height || !self.width)) {\n                return;\n            }\n            // if something asked a child to draw, ask the parent to draw, unless it was the parent that asked... then.. idk... stack overflow!\n            // if (self.isChildGrid && internal) {\n            //     self.parentGrid.draw();\n            //     return;\n            // }\n            if (self.intf.visible === false) {\n                return;\n            }\n            // initial values\n            var checkScrollHeight, rowHeaderCell, p, cx, cy, treeGrid, rowOpen,\n                rowHeight, cornerCell, y, x, c, h, w, s, r, rd, aCell,\n                selectionBorders = [],\n                rowHeaders = [],\n                l = self.data.length,\n                u = self.currentCell || {},\n                rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth(),\n                cellHeight = self.style.cellHeight;\n            drawCount += 1;\n            p = performance.now();\n            // if data length has changed, there is no way to know\n            if (self.data.length > self.orders.rows.length) {\n                self.createRowOrders();\n            }\n            function drawScrollBars() {\n                var v = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-bar'\n                    },\n                    n = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-bar'\n                    },\n                    vb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-box'\n                    },\n                    nb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-box'\n                    },\n                    co = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        isCorner: true,\n                        isScrollBoxCorner: true,\n                        style: 'scroll-box-corner'\n                    },\n                    m = (self.style.scrollBarBoxMargin * 2),\n                    d = self.style.scrollBarBoxMargin * 0.5;\n                self.ctx.strokeStyle = self.style.scrollBarBorderColor;\n                self.ctx.lineWidth = self.style.scrollBarBorderWidth;\n                // vertical\n                v.x += w - self.style.scrollBarWidth - self.style.scrollBarBorderWidth - d;\n                v.y += rowHeaderCellHeight;\n                v.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                v.height = h - rowHeaderCellHeight - self.style.scrollBarWidth - d - m;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(v.x, v.y, v.width, v.height + m);\n                strokeRect(v.x, v.y, v.width, v.height + m);\n                // vertical box\n                vb.x = v.x + self.style.scrollBarBoxMargin;\n                vb.y = rowHeaderCellHeight + self.style.scrollBarBoxMargin\n                    + ((v.height - self.scrollBox.scrollBoxHeight)\n                        * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight));\n                vb.width = self.style.scrollBarBoxWidth;\n                vb.height = self.scrollBox.scrollBoxHeight;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/vertical/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (vb.height < v.height) {\n                    radiusRect(vb.x, vb.y, vb.width, vb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                // horizontal\n                n.x += columnHeaderCellWidth;\n                n.y += h - self.style.scrollBarWidth - d;\n                n.width = w - self.style.scrollBarWidth - columnHeaderCellWidth - d - m;\n                n.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(n.x, n.y, n.width + m, n.height);\n                strokeRect(n.x, n.y, n.width + m, n.height);\n                // horizontal box\n                nb.y = n.y + self.style.scrollBarBoxMargin;\n                nb.x = columnHeaderCellWidth + self.style.scrollBarBoxMargin\n                    + ((n.width - self.scrollBox.scrollBoxWidth)\n                        * (self.scrollBox.scrollLeft / self.scrollBox.scrollWidth));\n                nb.width = self.scrollBox.scrollBoxWidth;\n                nb.height = self.style.scrollBarBoxWidth;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/horizontal/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (nb.width < n.width) {\n                    radiusRect(nb.x, nb.y, nb.width, nb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                //corner\n                self.ctx.strokeStyle = self.style.scrollBarCornerBorderColor;\n                self.ctx.fillStyle = self.style.scrollBarCornerBackgroundColor;\n                co.x = n.x + n.width + m;\n                co.y = v.y + v.height + m;\n                co.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                co.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                radiusRect(co.x, co.y, co.width, co.height, 0);\n                self.ctx.stroke();\n                self.ctx.fill();\n                self.visibleCells.unshift(v);\n                self.visibleCells.unshift(vb);\n                self.visibleCells.unshift(n);\n                self.visibleCells.unshift(nb);\n                self.visibleCells.unshift(co);\n                self.scrollBox.bar = {\n                    v: v,\n                    h: n\n                };\n                self.scrollBox.box = {\n                    v: vb,\n                    h: nb\n                };\n            }\n            function drawCell(d, rowIndex, rowOrderIndex) {\n                return function drawEach(header, headerIndex, columnOrderIndex) {\n                    var cellStyle = header.style || 'cell',\n                        childGridAttributes,\n                        cell,\n                        isHeader = /HeaderCell/.test(cellStyle),\n                        isCorner = /cornerCell/.test(cellStyle),\n                        isRowHeader = 'rowHeaderCell' === cellStyle,\n                        isColumnHeader = 'columnHeaderCell' === cellStyle,\n                        selected = self.selections[rowOrderIndex] && self.selections[rowOrderIndex].indexOf(columnOrderIndex) !== -1,\n                        hovered = self.hovers[d[self.uniqueId]] && self.hovers[d[self.uniqueId]].indexOf(columnOrderIndex) !== -1,\n                        active = self.activeCell.rowIndex === rowOrderIndex && self.activeCell.columnIndex === columnOrderIndex,\n                        isGrid = Array.isArray(d[header.name]),\n                        activeHeader = (self.orders.rows[self.activeCell.rowIndex] === rowOrderIndex\n                                || self.orders.columns[self.activeCell.columnIndex] === columnOrderIndex)\n                            && (columnOrderIndex === -1 || rowOrderIndex === -1)\n                            ? (isRowHeader ? 'activeRowHeaderCell' : 'activeColumnHeaderCell') : false,\n                        val,\n                        f = self.formatters[header.type || 'string'],\n                        orderByArrowSize = 0,\n                        treeArrowSize = 0,\n                        cellWidth = self.sizes.columns[isRowHeader ? 'cornerCell' : header[self.uniqueId]] || header.width,\n                        ev = {\n                            value: d[header.name],\n                            row: d,\n                            header: header\n                        };\n                    if (cellStyle === 'headerCellCap') {\n                        cellWidth = w - x;\n                    }\n                    // if no data or schema are defined, a width is provided to the stub column\n                    if (cellWidth === undefined) {\n                        cellWidth = self.style.columnWidth;\n                    }\n                    if (x + cellWidth + self.style.cellBorderWidth < 0) {\n                        x += cellWidth + self.style.cellBorderWidth;\n                    }\n                    if (active) {\n                        cellStyle = 'activeCell';\n                    }\n                    if (self.visibleRows.indexOf(rowIndex) === -1 && !isHeader) {\n                        self.visibleRows.push(rowIndex);\n                    }\n                    val = self.dispatchEvent('formatcellvalue', ev);\n                    if (!self.dispatchEvent('beforerendercell', ev)) {\n                        cx = x;\n                        cy = y;\n                        if (cellStyle === 'cornerCell') {\n                            cx = 0;\n                            cy = 0;\n                        } else if (isRowHeader) {\n                            cx = 0;\n                        } else if (isHeader) {\n                            cy = 0;\n                        }\n                        cell = {\n                            type: isGrid ? 'canvas-datagrid-cell' : header.type,\n                            style: cellStyle,\n                            nodeType: 'canvas-datagrid-cell',\n                            x: cx,\n                            y: cy,\n                            horizontalAlignment: self.style[cellStyle + 'HorizontalAlignment'],\n                            verticalAlignment: self.style[cellStyle + 'VerticalAlignment'],\n                            offsetTop: self.canvasOffsetTop + cy,\n                            offsetLeft: self.canvasOffsetLeft + cx,\n                            scrollTop: self.scrollBox.scrollTop,\n                            scrollLeft: self.scrollBox.scrollLeft,\n                            active: active || activeHeader,\n                            hovered: hovered,\n                            selected: selected,\n                            width: cellWidth,\n                            height: cellHeight,\n                            offsetWidth: cellWidth,\n                            offsetHeight: cellHeight,\n                            parentNode: self.intf.parentNode,\n                            offsetParent: self.intf.parentNode,\n                            data: d,\n                            isCorner: isCorner,\n                            isHeader: isHeader,\n                            isColumnHeader: isColumnHeader,\n                            isHeaderCellCap: !!header.isHeaderCellCap,\n                            isRowHeader: isRowHeader,\n                            rowOpen: rowOpen,\n                            header: header,\n                            columnIndex: columnOrderIndex,\n                            rowIndex: rowOrderIndex,\n                            sortColumnIndex: headerIndex,\n                            sortRowIndex: rowIndex,\n                            isGrid: isGrid,\n                            gridId: (self.attributes.name || '') + d[self.uniqueId] + ':' + header[self.uniqueId],\n                            parentGrid: self.intf,\n                            innerHTML: '',\n                            activeHeader: activeHeader,\n                            value: isHeader && !isRowHeader ? (header.title || header.name) : d[header.name]\n                        };\n                        ev.cell = cell;\n                        cell.userHeight = cell.isHeader ? self.sizes.rows[-1] : rowHeight;\n                        cell.userWidth = cell.isHeader ? self.sizes.columns.cornerCell : self.sizes.columns[header[self.uniqueId]];\n                        cell[self.uniqueId] = d[self.uniqueId];\n                        self.visibleCells.unshift(cell);\n                        self.ctx.fillStyle = self.style[cellStyle + 'BackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'BorderColor'];\n                        self.ctx.lineWidth = self.style[cellStyle + 'BorderWidth'];\n                        if (hovered) {\n                            self.ctx.fillStyle = self.style[cellStyle + 'HoverBackgroundColor'];\n                            self.ctx.strokeStyle = self.style[cellStyle + 'HoverBorderColor'];\n                        }\n                        if (selected) {\n                            self.ctx.fillStyle = self.style[cellStyle + 'SelectedBackgroundColor'];\n                            self.ctx.strokeStyle = self.style[cellStyle + 'SelectedBorderColor'];\n                        }\n                        if (activeHeader) {\n                            self.ctx.fillStyle = self.style[activeHeader + 'BackgroundColor'];\n                        }\n                        self.dispatchEvent('rendercell', ev);\n                        if (cell.isGrid) {\n                            if (cell.height !== rowHeight) {\n                                cell.height = rowHeight || self.style.cellHeightWithChildGrid;\n                                checkScrollHeight = true;\n                            }\n                            cell.width = self.sizes.columns[header[self.uniqueId]] || self.style.cellWidthWithChildGrid;\n                        }\n                        if (rowOpen && !cell.isRowHeader) {\n                            cell.height = self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight;\n                        }\n                        if (!cell.isGrid) {\n                            fillRect(cx, cy, cell.width, cell.height);\n                            strokeRect(cx, cy, cell.width, cell.height);\n                        }\n                        self.ctx.save();\n                        radiusRect(cell.x, cell.y, cell.width, cell.height, 0);\n                        self.ctx.clip();\n                        self.dispatchEvent('afterrendercell', ev);\n                        if (cell.height !== cellHeight && !(rowOpen && !cell.isRowHeader)) {\n                            self.sizes.rows[isHeader ? -1 : d[self.uniqueId]] = cell.height;\n                            checkScrollHeight = true;\n                        }\n                        if (cell.width !== cellWidth) {\n                            self.sizes.columns[header[self.uniqueId]] = cell.width;\n                            checkScrollHeight = true;\n                        }\n                        if (isRowHeader && self.attributes.tree) {\n                            if (!self.dispatchEvent('rendertreearrow', ev)) {\n                                treeArrowSize = drawTreeArrow(cell, self.style[cellStyle + 'PaddingLeft'], cy, 0);\n                            }\n                        }\n                        if ((self.attributes.showRowNumbers && isRowHeader)\n                                || !isRowHeader) {\n                            if (cell.isGrid) {\n                                if (!self.childGrids[cell.gridId]) {\n                                    childGridAttributes = self.args.childGridAttributes || self.args;\n                                    childGridAttributes.name = self.attributes.saveAppearance ? cell.gridId : undefined;\n                                    childGridAttributes.parentNode = cell;\n                                    childGridAttributes.data = d[header.name];\n                                    self.childGrids[cell.gridId] = self.createGrid(childGridAttributes);\n                                    checkScrollHeight = true;\n                                }\n                                cell.grid = self.childGrids[cell.gridId];\n                                cell.grid.parentNode = cell;\n                                cell.grid.visible = true;\n                                //cell.grid.resize(true);\n                                self.dispatchEvent('rendercellgrid', ev);\n                            } else {\n                                if (self.childGrids[cell.gridId]) {\n                                    self.childGrids[cell.gridId].parentNode.offsetHeight = 0;\n                                }\n                                if (isHeader && self.orderBy === header.name) {\n                                    if (!self.dispatchEvent('renderorderbyarrow', ev)) {\n                                        orderByArrowSize = drawOrderByArrow(cx + self.style[cellStyle + 'PaddingLeft'], 0);\n                                    }\n                                }\n                                self.ctx.fillStyle = self.style[cellStyle + 'Color'];\n                                if (hovered) {\n                                    self.ctx.fillStyle = self.style[cellStyle + 'HoverColor'];\n                                }\n                                if (selected) {\n                                    self.ctx.fillStyle = self.style[cellStyle + 'SelectedColor'];\n                                }\n                                if (activeHeader) {\n                                    self.ctx.fillStyle = self.style[activeHeader + 'Color'];\n                                }\n                                self.ctx.font = self.style[cellStyle + 'Font'];\n                                cell.fontHeight = self.style[cellStyle + 'FontHeight'];\n                                cell.treeArrowWidth = treeArrowSize;\n                                cell.orderByArrowWidth = orderByArrowSize;\n                                val = val !== undefined ? val : f\n                                    ? f(ev) : '';\n                                if (val === undefined && !f) {\n                                    val = '';\n                                    console.warn('canvas-datagrid: Unknown format '\n                                        + header.type + ' add a cellFormater');\n                                }\n                                cell.formattedValue = ((val !== undefined && val !== null) ? val : '').toString();\n                                if (self.columnFilters && self.columnFilters[val] !== undefined && isHeader) {\n                                    cell.formattedValue = self.attributes.filterTextPrefix + val;\n                                }\n                                if (!self.dispatchEvent('rendertext', ev)) {\n                                    if (cell.innerHTML || header.type === 'html') {\n                                        drawHtml(cell);\n                                    } else {\n                                        drawText(cell);\n                                    }\n                                }\n                            }\n                        }\n                        if (active) {\n                            aCell = cell;\n                        }\n                        if (selected && !isRowHeader) {\n                            if ((!self.selections[cell.rowIndex - 1]\n                                    || self.selections[cell.rowIndex - 1].indexOf(cell.columnIndex) === -1\n                                    || cell.rowIndex === 0)\n                                    && !cell.isHeader) {\n                                selectionBorders.push([cell, 't']);\n                            }\n                            if (!self.selections[cell.rowIndex + 1]\n                                    || self.selections[cell.rowIndex + 1].indexOf(cell.columnIndex) === -1) {\n                                selectionBorders.push([cell, 'b']);\n                            }\n                            if (!self.selections[cell.rowIndex] || cell.columnIndex === 0\n                                    || self.selections[cell.rowIndex].indexOf(cell.columnIndex - 1) === -1) {\n                                selectionBorders.push([cell, 'l']);\n                            }\n                            if (!self.selections[cell.rowIndex] || cell.columnIndex === s.length\n                                    || self.selections[cell.rowIndex].indexOf(cell.columnIndex + 1) === -1) {\n                                selectionBorders.push([cell, 'r']);\n                            }\n                        }\n                        self.ctx.restore();\n                        x += cell.width + self.style.cellBorderWidth;\n                        return cell.width;\n                    }\n                };\n            }\n            function drawRowHeader(rowData, index, rowOrderIndex) {\n                var a;\n                if (self.attributes.showRowHeaders) {\n                    x = 0;\n                    rowHeaderCell = {'rowHeaderCell': index + 1 };\n                    rowHeaderCell[self.uniqueId] = rowData[self.uniqueId];\n                    a = {\n                        name: 'rowHeaderCell',\n                        width: self.style.rowHeaderCellWidth,\n                        style: 'rowHeaderCell',\n                        type: 'string',\n                        data: rowData[self.uniqueId],\n                        index: -1\n                    };\n                    a[self.uniqueId] = rowData[self.uniqueId];\n                    rowOpen = self.openChildren[rowData[self.uniqueId]];\n                    drawCell(rowHeaderCell, index, rowOrderIndex)(a, -1, -1);\n                }\n            }\n            function drawHeaders() {\n                var d, g = s.length, i, o, columnHeaderCell, header;\n                rowHeaders.forEach(function (rArgs) {\n                    y = rArgs[3];\n                    cellHeight = rArgs[4];\n                    drawRowHeader(rArgs[0], rArgs[1], rArgs[2]);\n                });\n                if (self.attributes.showColumnHeaders) {\n                    x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft;\n                    if (self.attributes.showRowHeaders) {\n                        x += columnHeaderCellWidth;\n                    }\n                    y = 0;\n                    // cell height might have changed during drawing\n                    cellHeight = self.getRowHeaderCellHeight();\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        header = s[i];\n                        d = {\n                            title: header.title,\n                            name: header.name,\n                            width: header.width,\n                            style: 'columnHeaderCell',\n                            type: 'string',\n                            index: o,\n                            order: i\n                        };\n                        columnHeaderCell = {'columnHeaderCell': header.title || header.name};\n                        columnHeaderCell[self.uniqueId] = 'h' + header[self.uniqueId];\n                        d[self.uniqueId] = header[self.uniqueId];\n                        x += drawCell(columnHeaderCell, -1, -1)(d, o, i);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    // fill in the space right of the headers\n                    if (x < w) {\n                        c = {\n                            name: '',\n                            width: self.style.scrollBarWidth,\n                            style: 'headerCellCap',\n                            isHeaderCell: true,\n                            isHeaderCellCap: true,\n                            type: 'string',\n                            index: s.length\n                        };\n                        c[self.uniqueId] = 'columnHeaderCell';\n                        drawCell({endCap: ''}, -1, -1)(c, -1, -1);\n                    }\n                    // fill in the space right of the headers\n                    if (self.attributes.showRowHeaders) {\n                        cornerCell = {'cornerCell': '' };\n                        cornerCell[self.uniqueId] = 'cornerCell';\n                        x = 0;\n                        c = {\n                            name: 'cornerCell',\n                            width: self.style.rowHeaderCellWidth,\n                            style: 'cornerCell',\n                            type: 'string',\n                            index: -1\n                        };\n                        c[self.uniqueId] = 'cornerCell';\n                        drawCell(cornerCell, -1, -1)(c, -1, -1);\n                    }\n                }\n            }\n            function drawRow(r, d) {\n                var i, treeHeight, rowSansTreeHeight, o, g = s.length;\n                if (y - (cellHeight * 2) > h) {\n                    return false;\n                }\n                rd = self.data[r];\n                rowOpen = self.openChildren[rd[self.uniqueId]];\n                rowSansTreeHeight = self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight;\n                treeHeight = (rowOpen ? self.sizes.trees[rd[self.uniqueId]] : 0);\n                rowHeight = rowSansTreeHeight + treeHeight;\n                if (y < rowHeight * -1) {\n                    return false;\n                }\n                if (self.attributes.showRowHeaders) {\n                    x += columnHeaderCellWidth;\n                }\n                cellHeight = rowHeight;\n                for (o = self.scrollIndexLeft; o < g; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        break;\n                    }\n                }\n                // cell height might have changed during drawing\n                cellHeight = rowHeight;\n                x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft + self.style.cellBorderWidth;\n                // don't draw a tree for the new row\n                treeGrid = self.childGrids[rd[self.uniqueId]];\n                if (r !== self.data.length && rowOpen) {\n                    treeGrid.visible = true;\n                    treeGrid.parentNode = {\n                        offsetTop: y + rowSansTreeHeight + self.canvasOffsetTop,\n                        offsetLeft: columnHeaderCellWidth - 1 + self.canvasOffsetLeft,\n                        offsetHeight: treeHeight,\n                        offsetWidth: self.width - columnHeaderCellWidth - self.style.scrollBarWidth - 1,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: self.style,\n                        nodeType: 'canvas-datagrid-tree',\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        rowIndex: r\n                    };\n                    self.visibleCells.unshift({\n                        rowIndex: x,\n                        columnIndex: 0,\n                        y: treeGrid.parentNode.offsetTop,\n                        x: treeGrid.parentNode.offsetLeft,\n                        height: treeGrid.parentNode.offsetHeight,\n                        width: treeGrid.parentNode.offsetWidth,\n                        style: 'tree-grid',\n                        type: treeGrid.parentNode.nodeType\n                    });\n                    treeGrid.draw();\n                } else if (treeGrid) {\n                    treeGrid.parentNode.offsetHeight = 0;\n                    delete self.sizes.trees[rd[self.uniqueId]];\n                }\n                rowHeaders.push([rd, r, d, y, rowHeight]);\n                y += cellHeight + self.style.cellBorderWidth;\n                return true;\n            }\n            function initDraw() {\n                self.visibleRows = [];\n                s = self.getVisibleSchema();\n                self.visibleCells = [];\n                self.canvasOffsetTop = self.isChildGrid ? self.parentNode.offsetTop : 0;\n                self.canvasOffsetLeft = self.isChildGrid ? self.parentNode.offsetLeft : 0;\n                h = self.height;\n                w = self.width;\n                if (!self.isChildGrid) {\n                    self.ctx.scale(window.devicePixelRatio, window.devicePixelRatio);\n                }\n            }\n            function drawBackground() {\n                radiusRect(0, 0, w, h, 0);\n                self.ctx.clip();\n                self.ctx.fillStyle = self.style.backgroundColor;\n                fillRect(0, 0, w, h);\n            }\n            function drawRows() {\n                var o, n, i, g = s.length;\n                x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft + self.style.cellBorderWidth;\n                y = (self.scrollBox.scrollTop * -1) + rowHeaderCellHeight + self.scrollPixelTop + self.style.cellBorderWidth;\n                for (r = self.scrollIndexTop; r < l; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.showNewRow) {\n                    if (self.attributes.showRowHeaders) {\n                        x += columnHeaderCellWidth;\n                    }\n                    rowHeight = cellHeight = self.style.cellHeight;\n                    rowOpen = false;\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        x += drawCell(self.newRow, self.data.length, self.data.length)(s[i], i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    rowHeaders.push([self.newRow, self.data.length, self.data.length, y, rowHeight]);\n                }\n            }\n            function drawReorderMarkers() {\n                if (!self.reorderObject) { return; }\n                var b = {\n                        height: self.reorderObject.height,\n                        width: self.reorderObject.width,\n                        x: self.reorderObject.x + self.reorderObject.dragOffset.x,\n                        y: self.reorderObject.y + self.reorderObject.dragOffset.y\n                    },\n                    m = {\n                        width: w,\n                        heigth: h,\n                        x: 0,\n                        y: 0\n                    };\n                self.ctx.fillStyle = self.style.reorderMarkerBackgroundColor;\n                self.ctx.lineWidth = self.style.reorderMarkerBorderWidth;\n                self.ctx.strokeStyle = self.style.reorderMarkerBorderColor;\n                if (self.dragMode === 'row-reorder') {\n                    b.width = w;\n                    b.x = 0;\n                    m.width = w;\n                    m.y = self.currentCell.y;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.rowIndex !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex - 1 !== self.reorderObject.rowIndex) {\n                        addBorderLine(m, 't');\n                    }\n                } else if (self.dragMode === 'column-reorder' && self.reorderObject) {\n                    b.height = h;\n                    b.y = 0;\n                    m.height = h;\n                    m.x = self.currentCell.x;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.columnIndex !== self.reorderObject.columnIndex\n                            && self.currentCell.columnIndex - 1 !== self.reorderObject.columnIndex) {\n                        addBorderLine(m, 'l');\n                    }\n                }\n            }\n            function drawBorder() {\n                self.ctx.lineWidth = self.style.gridBorderWidth;\n                self.ctx.strokeStyle = self.style.gridBorderColor;\n                strokeRect(0, 0, self.width, self.height);\n            }\n            function drawSelectionBorders() {\n                self.ctx.lineWidth = self.style.selectionOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.selectionOverlayBorderColor;\n                selectionBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n            }\n            function drawActiveCell() {\n                if (!aCell) { return; }\n                if (self.attributes.rowSelectionMode) {\n                    if (self.activeCell && self.activeCell.rowIndex === aCell.rowIndex) {\n                        self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                        self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                        strokeRect(0, aCell.y, self.getHeaderWidth() + columnHeaderCellWidth, rowHeight);\n                    }\n                } else {\n                    self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                    self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                    strokeRect(aCell.x, aCell.y, aCell.width, aCell.height);\n                }\n\n            }\n            function drawDebug() {\n                perfCounters[drawCount % perfWindowSize] = performance.now() - p;\n                var d;\n                if (self.attributes.debug) {\n                    self.ctx.font = '11px sans-serif';\n                    d = {};\n                    d.perf = (perfCounters.reduce(function (a, b) {\n                        return a + b;\n                    }, 0) / perfCounters.length).toFixed(1)\n                        + 'ms (' +\n                        perfCounters.map(function (a) { return a.toFixed(1); }).join(', ') + ')';\n                    d.htmlImages = Object.keys(self.htmlImageCache).length;\n                    d.scrollLeft = self.scrollBox.scrollLeft;\n                    d.scrollTop = self.scrollBox.scrollTop;\n                    d.scrollIndexTop = self.scrollIndexTop;\n                    d.scrollPixelTop = self.scrollPixelTop;\n                    d.scrollIndexLeft = self.scrollIndexLeft;\n                    d.scrollPixelLeft = self.scrollPixelLeft;\n                    d.canvasOffsetLeft = self.canvasOffsetLeft;\n                    d.canvasOffsetTop = self.canvasOffsetTop;\n                    d.width = self.width;\n                    d.height = self.height;\n                    d.mousex = self.mouse.x;\n                    d.mousey = self.mouse.y;\n                    d.touchx = !self.touchStart ? 0 : self.touchStart.x;\n                    d.touchy = !self.touchStart ? 0 : self.touchStart.y;\n                    d.entities = self.visibleCells.length;\n                    d.hasFocus = self.hasFocus;\n                    d.dragMode = self.dragMode;\n                    if (self.currentCell) {\n                        d.columnIndex = self.currentCell.columnIndex;\n                        d.rowIndex = self.currentCell.rowIndex;\n                        d.sortColumnIndex = self.currentCell.sortColumnIndex;\n                        d.sortRowIndex = self.currentCell.sortRowIndex;\n                        d.context = self.currentCell.context;\n                        d.dragContext = self.currentCell.dragContext;\n                        d.style = self.currentCell.style;\n                        d.type = self.currentCell.type;\n                    }\n                    self.ctx.save();\n                    Object.keys(d).forEach(function (key, index) {\n                        var m = key + ': ' + d[key],\n                            lh = 14;\n                        self.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n                        fillRect(columnHeaderCellWidth, lh + (index * lh), 100, lh);\n                        self.ctx.fillStyle = 'rgba(0, 0, 0, 1)';\n                        fillText(m, columnHeaderCellWidth + 1, rowHeaderCellHeight + (index * lh));\n                    });\n                    self.ctx.restore();\n                }\n            }\n            self.ctx.save();\n            initDraw();\n            drawBackground();\n            drawRows();\n            drawSelectionBorders();\n            drawActiveCell();\n            drawHeaders();\n            drawReorderMarkers();\n            drawScrollBars();\n            if (checkScrollHeight) {\n                self.resize(true);\n            }\n            drawBorder();\n            drawDebug();\n            if (self.dispatchEvent('afterdraw', {})) { return; }\n            self.ctx.restore();\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var touchDelta = {x: 0, y: 0, scrollTop: 0, scrollLeft: 0},\n            touchAnimateTo = {scrollLeft: 0, scrollTop: 0},\n            touchSigma = {scrollLeft: 0, scrollTop: 0},\n            xPPS = 0,\n            yPPS = 0,\n            touchingCell = false,\n            startingCell = false,\n            animationFrames = 0;\n        self.getTouchPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.touches[0].clientX - rect.left,\n                    y: e.touches[0].clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        self.calculatePPS = function () {\n            xPPS = ((touchDelta.scrollLeft - touchSigma.scrollLeft) / (touchDelta.t - touchSigma.t));\n            yPPS = ((touchDelta.scrollTop - touchSigma.scrollTop) / (touchDelta.t - touchSigma.t));\n            touchSigma = {\n                scrollLeft: touchDelta.scrollLeft,\n                scrollTop: touchDelta.scrollTop,\n                t: performance.now() / 1000\n            };\n        };\n        self.touchCell = function (e) {\n            return function () {\n                clearInterval(self.touchCalcTimeout);\n                var pos = self.getTouchPos(e);\n                if (Math.abs(touchDelta.x) + Math.abs(touchDelta.y) < self.attributes.touchDeadZone) {\n                    touchingCell = self.getCellAt(pos.x, pos.y);\n                    self.mousemove(e, pos);\n                    self.mousedown(e, pos);\n                    self.mousemove(e, pos);\n                    self.draw();\n                }\n            };\n        };\n        self.touchstart = function (e) {\n            touchingCell = false;\n            self.touchStart = self.getTouchPos(e);\n            startingCell = self.getCellAt(self.touchStart.x, self.touchStart.y, true);\n            if (self.dispatchEvent('touchstart', {NativeEvent: e, cell: self.startingCell})) { return; }\n            if (!self.hasFocus) { return; }\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (e.touches.length === 2) {\n                return self.contextmenu(e, self.touchStart);\n            }\n            self.touchScrollStart = {\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: performance.now() / 1000\n            };\n            touchDelta = {\n                x: self.touchStart.x,\n                y: self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: 0\n            };\n            self.touchmove(e);\n            clearTimeout(self.touchTimeout);\n            clearInterval(self.touchCalcTimeout);\n            self.touchTimeout = setTimeout(self.touchCell(e), self.attributes.touchSelectTimeMs);\n            self.touchCalcTimeout = setInterval(self.calculatePPS, 20);\n            self.touchHaltAnimation = true;\n            document.body.addEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.addEventListener('touchend', self.touchend, false);\n            document.body.addEventListener('touchcancel', self.touchcancel, false);\n        };\n        self.easing = function (t, b, c, d) {\n            return c * (t / d) * (2 - t) + b;\n        };\n        self.touchEndAnimation = function () {\n            if (!self.canvas || !self.scrollBox.scrollTo) { return requestAnimationFrame(self.touchEndAnimation); }\n            var x,\n                y,\n                n = performance.now() / 1000,\n                d = (self.attributes.touchReleaseAnimationDurationMs / 1000),\n                t;\n            touchDelta.t = touchDelta.t || n + d;\n            t = n - touchDelta.t + 1;\n            if (t > 1 || self.touchHaltAnimation || (animationFrames > 1000)) {\n                animationFrames = 0;\n                self.touchHaltAnimation = false;\n                touchAnimateTo = {scrollLeft: -1, scrollTop: -1};\n                return;\n            }\n            animationFrames += 1;\n            x = self.easing(t, touchDelta.scrollLeft, -touchAnimateTo.scrollLeft, d);\n            y = self.easing(t, touchDelta.scrollTop, -touchAnimateTo.scrollTop, d);\n            self.scrollBox.scrollTo(x, y);\n            requestAnimationFrame(self.touchEndAnimation);\n        };\n        self.touchend = function (e) {\n            if (self.dispatchEvent('touchend', {NativeEvent: e})) { return; }\n            var dz = Math.abs(touchDelta.x) + Math.abs(touchDelta.y) < self.attributes.touchDeadZone,\n                pos = {\n                    x: self.touchStart.x + touchDelta.x,\n                    y: self.touchStart.y + touchDelta.y\n                },\n                cell = self.getCellAt(pos.x, pos.y);\n            if (!self.hasFocus) { return; }\n            if (touchingCell) {\n                self.mouseup(e, self.touchStart);\n            } else if (dz) {\n                if (cell.active) {\n                    self.beginEditAt(cell.columnIndex, cell.rowIndex);\n                } else {\n                    self.mousedown(e, self.touchStart);\n                    self.mouseup(e, self.touchStart);\n                    self.click(e, self.touchStart);\n                }\n            }\n            touchingCell = false;\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n            clearTimeout(self.touchTimeout);\n            clearInterval(self.touchCalcTimeout);\n            self.calculatePPS();\n            touchAnimateTo.scrollLeft = xPPS * self.attributes.touchReleaseAcceleration;\n            touchAnimateTo.scrollTop = yPPS * self.attributes.touchReleaseAcceleration;\n            self.touchHaltAnimation = false;\n            if (animationFrames === 0 && !/-scroll-/.test(startingCell.style) && !dz) {\n                self.touchEndAnimation();\n            }\n        };\n        self.touchmove = function (e) {\n            var d = self.getTouchPos(e);\n            if (self.dispatchEvent('touchmove', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (!self.hasFocus) { return; }\n            touchDelta = {\n                x: d.x - self.touchStart.x,\n                y: d.y - self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: 0\n            };\n            if (/vertical-scroll-/.test(startingCell.style)) {\n                self.scrollBox.scrollTop = self.scrollBox.scrollHeight * (d.y / self.height);\n            } else if (/horizontal-scroll-/.test(startingCell.style)) {\n                self.scrollBox.scrollLeft = self.scrollBox.scrollWidth * (d.x / self.width);\n            } else if (touchingCell) {\n                self.mousemove(e, d);\n                self.draw();\n            } else {\n                if (animationFrames === 0) {\n                    self.scrollBox.scrollTo(self.touchScrollStart.scrollLeft - touchDelta.x,\n                        self.touchScrollStart.scrollTop - touchDelta.y);\n                }\n            }\n        };\n        self.touchcancel = function (e) {\n            if (self.dispatchEvent('touchcancel', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) { return; }\n            touchingCell = false;\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n            return;\n        };\n        self.stopPropagation = function (e) { e.stopPropagation(); };\n        self.addEventListener = function (ev, fn) {\n            self.events[ev] = self.events[ev] || [];\n            self.events[ev].unshift(fn);\n        };\n        self.removeEventListener = function (ev, fn) {\n            (self.events[ev] || []).forEach(function removeEachListener(sfn, idx) {\n                if (fn === sfn) {\n                    self.events[ev].splice(idx, 1);\n                }\n            });\n        };\n        self.dispatchEvent = function (ev, e) {\n            var defaultPrevented;\n            function preventDefault() {\n                defaultPrevented = true;\n            }\n            if (!self.events[ev]) { return; }\n            self.events[ev].forEach(function dispatchEachEvent(fn) {\n                e.ctx = self.ctx;\n                e.preventDefault = preventDefault;\n                fn.apply(self.intf, [e]);\n            });\n            return defaultPrevented;\n        };\n        self.resize = function (drawAfterResize) {\n            var cellBorder = self.style.cellBorderWidth * 2,\n                columnHeaderCellBorder =  self.style.columnHeaderCellBorderWidth * 2,\n                scrollHeight,\n                scrollWidth,\n                rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth(),\n                // TODO: What the hell are these numbers!?  They are probably some value in the style.\n                scrollDragPositionOffsetY = 30,\n                scrollDragPositionOffsetX = 15;\n            if (self.isChildGrid) {\n                self.height = self.parentNode.offsetHeight;\n                self.width = self.parentNode.offsetWidth;\n            } else {\n                self.parentNode = self.parentDOMNode;\n                if (!self.parentIsCanvas) {\n                    self.height = self.parentDOMNode.offsetHeight;\n                    self.width = self.parentDOMNode.offsetWidth;\n                    self.canvas.height = self.height * window.devicePixelRatio;\n                    self.canvas.width = self.width * window.devicePixelRatio;\n                    self.canvas.style.height = self.height + 'px';\n                    self.canvas.style.width = self.width + 'px';\n                }\n                self.canvasOffsetTop = self.args.canvasOffsetTop || 0;\n                self.canvasOffsetLeft = self.args.canvasOffsetLeft || 0;\n            }\n            scrollHeight = self.data.reduce(function reduceData(accumulator, row) {\n                return accumulator\n                    + (self.sizes.rows[row[self.uniqueId]] || self.style.cellHeight)\n                    + (self.sizes.trees[row[self.uniqueId]] || 0)\n                    + cellBorder;\n            }, 0) || 0;\n            scrollWidth = self.getVisibleSchema().reduce(function reduceSchema(accumulator, column) {\n                if (column.hidden) { return accumulator; }\n                return accumulator + (self.sizes.columns[column[self.uniqueId]] || column.width || self.style.columnWidth) + cellBorder;\n            }, 0) || 0;\n            if (self.attributes.showNewRow) {\n                scrollHeight += self.style.cellHeight + cellBorder;\n            }\n            self.scrollBox.width = self.width - columnHeaderCellWidth;\n            self.scrollBox.height = self.height - rowHeaderCellHeight - columnHeaderCellBorder;\n            self.scrollBox.top = rowHeaderCellHeight + columnHeaderCellBorder;\n            self.scrollBox.left = columnHeaderCellWidth;\n            self.scrollBox.scrollHeight = scrollHeight + self.style.scrollBarWidth - self.scrollBox.height;\n            self.scrollBox.scrollWidth = scrollWidth + self.style.scrollBarWidth - self.scrollBox.width;\n            self.scrollBox.widthBoxRatio = ((self.scrollBox.width - scrollDragPositionOffsetX)\n                / (self.scrollBox.scrollWidth + self.scrollBox.width - scrollDragPositionOffsetX));\n            self.scrollBox.scrollBoxWidth = self.scrollBox.width\n                * self.scrollBox.widthBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.heightBoxRatio = ((self.scrollBox.height - scrollDragPositionOffsetY)\n                / (self.scrollBox.scrollHeight + (self.scrollBox.height - scrollDragPositionOffsetY)));\n            self.scrollBox.scrollBoxHeight = self.scrollBox.height\n                * self.scrollBox.heightBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.scrollBoxWidth = Math.max(self.scrollBox.scrollBoxWidth, self.style.scrollBarBoxMinSize);\n            self.scrollBox.scrollBoxHeight = Math.max(self.scrollBox.scrollBoxHeight, self.style.scrollBarBoxMinSize);\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            self.resizeEditInput();\n            if (drawAfterResize) {\n                self.draw(true);\n            }\n            self.dispatchEvent('resize', {});\n            return true;\n        };\n        self.resizeEditInput = function () {\n            if (self.input) {\n                var pos = self.canvas.getBoundingClientRect(),\n                    s = self.scrollOffset(self.canvas),\n                    bx2 = (self.style.cellBorderWidth * 2),\n                    cell = self.getVisibleCellByIndex(self.input.editCell.columnIndex, self.input.editCell.rowIndex)\n                        || {x: -100, y: -100, height: 0, width: 0};\n                self.input.style.left = pos.left + cell.x - self.style.cellBorderWidth + self.canvasOffsetLeft - s.left + 'px';\n                self.input.style.top = pos.top + cell.y - bx2 + self.canvasOffsetTop - s.top + 'px';\n                self.input.style.height = cell.height - bx2 - 1 + 'px';\n                self.input.style.width = cell.width - bx2 - self.style.cellPaddingLeft + 'px';\n                self.clipElement(self.input);\n            }\n        };\n        self.scroll = function (e) {\n            var s = self.getVisibleSchema(),\n                cellBorder = self.style.cellBorderWidth * 2;\n            self.scrollIndexTop = 0;\n            self.scrollPixelTop = 0;\n            self.scrollIndexLeft = 0;\n            self.scrollPixelLeft = 0;\n            while (self.scrollPixelTop < self.scrollBox.scrollTop && self.scrollIndexTop < self.data.length) {\n                self.scrollPixelTop +=\n                    (self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || self.style.cellHeight)\n                    + (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0)\n                    + cellBorder;\n                self.scrollIndexTop += 1;\n            }\n            while (self.scrollPixelLeft < self.scrollBox.scrollLeft && self.scrollIndexLeft < s.length) {\n                self.scrollPixelLeft +=\n                    (self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width);\n                self.scrollIndexLeft += 1;\n            }\n            if (self.data.length > 0) {\n                self.scrollIndexLeft = Math.max(self.scrollIndexLeft - 1, 0);\n                self.scrollPixelLeft = Math.max(self.scrollPixelLeft\n                    - (self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width), 0);\n                self.scrollIndexTop = Math.max(self.scrollIndexTop - 1, 0);\n                self.scrollPixelTop = Math.max(self.scrollPixelTop\n                    - (self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || self.style.cellHeight)\n                    - (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0), 0);\n            }\n            self.ellipsisCache = {};\n            self.draw(true);\n            //TODO: figure out why this has to be delayed for child grids\n            //BUG: scrolling event on 3rd level hierarchy fails to move input box\n            requestAnimationFrame(self.resizeEditInput);\n            self.dispatchEvent('scroll', {top: self.scrollBox.scrollTop, left: self.scrollBox.scrollLeft});\n        };\n        self.mousemove = function (e, overridePos) {\n            if (self.contextMenu || self.input) {\n                return;\n            }\n            self.mouse = overridePos || self.getLayerPos(e);\n            var ctrl = (e.controlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                i,\n                s = self.getSchema(),\n                dragBounds,\n                sBounds,\n                x = self.mouse.x,\n                y = self.mouse.y,\n                o = self.getCellAt(x, y),\n                delta,\n                ev = {NativeEvent: e, cell: o, x: x, y: y},\n                previousCell = self.currentCell;\n            clearTimeout(self.scrollTimer);\n            if (!self.isInGrid({x: x, y: y})) {\n                self.hasFocus = false;\n            }\n            if (self.dispatchEvent('mousemove', ev)) {\n                return;\n            }\n            if (o && self.currentCell && (self.currentCell.rowIndex !== o.rowIndex\n                    || self.currentCell.columnIndex !== o.columnIndex)) {\n                self.cellBoundaryCrossed = true;\n                ev.cell = previousCell;\n                self.dispatchEvent('cellmouseout', ev);\n                ev.cell = o;\n                self.dispatchEvent('cellmouseover', ev);\n            }\n            self.currentCell = o;\n            if (!self.hasFocus) {\n                return;\n            }\n            self.hovers = {};\n            if (!self.draggingItem\n                    && o\n                    && self.scrollModes.indexOf(o.context) === -1) {\n                self.dragItem = o;\n                self.dragMode = o.dragContext;\n                self.canvas.style.cursor = o.context;\n                if (o.context === 'cell' && o.data) {\n                    self.canvas.style.cursor = 'pointer';\n                    self.hovers[o.data[self.uniqueId]] = [o.columnIndex];\n                }\n                if ((self.selecting || self.reorderObject)\n                        && o.context === 'cell'\n                        && o.data) {\n                    sBounds = self.getSelectionBounds();\n                    delta = {\n                        x: Math.abs(self.dragStart.x - x),\n                        y: Math.abs(self.dragStart.y - y),\n                    };\n                    if (self.dragStartObject.columnIndex !== -1 && e.shiftKey) {\n                        self.dragStartObject = {\n                            rowIndex: self.activeCell.rowIndex,\n                            columnIndex: self.activeCell.columnIndex\n                        };\n                    }\n                    dragBounds = {\n                        top: Math.min(self.dragStartObject.rowIndex, o.rowIndex),\n                        left: Math.min(self.dragStartObject.columnIndex, o.columnIndex),\n                        bottom: Math.max(self.dragStartObject.rowIndex, o.rowIndex),\n                        right: Math.max(self.dragStartObject.columnIndex, o.columnIndex)\n                    };\n                    if (self.dragStartObject.columnIndex === -1) {\n                        dragBounds.left = -1;\n                        dragBounds.right = s.length - 1;\n                        dragBounds.top = Math.min(sBounds.top, o.rowIndex);\n                        dragBounds.bottom = Math.max(sBounds.bottom, o.rowIndex);\n                    }\n                    if (self.dragStartObject.rowIndex !== o.rowIndex\n                                || self.dragStartObject.columnIndex !== o.columnIndex) {\n                        self.ignoreNextClick = true;\n                    }\n                    if (self.cellBoundaryCrossed || (delta.x === 0 && delta.y === 0) || self.attributes.rowSelectionMode) {\n                        if (self.attributes.rowSelectionMode || self.dragStartObject.columnIndex === -1) {\n                            self.selectRow(o.rowIndex, ctrl, true);\n                        } else {\n                            if (!self.dragAddToSelection && o.rowIndex) {\n                                if (self.selections[o.rowIndex] && self.selections[o.rowIndex].indexOf(o.columnIndex) !== -1) {\n                                    self.selections[o.rowIndex].splice(self.selections[o.rowIndex].indexOf(o.columnIndex), 1);\n                                }\n                            } else {\n                                self.selections[o.rowIndex] = self.selections[o.rowIndex] || [];\n                                if (self.selections[o.rowIndex].indexOf(o.columnIndex) === -1) {\n                                    self.selections[o.rowIndex].push(o.columnIndex);\n                                }\n                            }\n                        }\n                    }\n                    if ((!self.selectionBounds || (dragBounds.top !== self.selectionBounds.top\n                            || dragBounds.left !== self.selectionBounds.left\n                            || dragBounds.bottom !== self.selectionBounds.bottom\n                            || dragBounds.right !== self.selectionBounds.right)) && !ctrl) {\n                        self.selections = [];\n                        sBounds = dragBounds;\n                        if (self.attributes.rowSelectionMode) {\n                            for (i = sBounds.top; i <= sBounds.bottom; i += 1) {\n                                self.selectRow(i, true, true);\n                            }\n                        } else {\n                            self.selectArea(sBounds, true);\n                        }\n                    }\n                    self.autoScrollZone(e, x, y, ctrl);\n                }\n            }\n            self.cellBoundaryCrossed = false;\n            self.draw(true);\n        };\n        /**\n         * Ends editing, optionally aborting the edit.\n         * @memberof canvasDataGrid\n         * @name endEdit\n         * @method\n         * @param {boolean} abort When true, abort the edit.\n         */\n        self.endEdit = function (abort) {\n            var cell = self.input.editCell,\n                y = cell.rowIndex;\n            function abortEdit() {\n                abort = true;\n            }\n            if (self.dispatchEvent('beforeendedit', {\n                    cell: cell,\n                    newValue: self.input.value,\n                    oldValue: cell.value,\n                    abort: abortEdit,\n                    input: self.input\n                })) { return false; }\n            if (self.input.value !== cell.value && !abort) {\n                self.changes[y] = self.changes[y] || {};\n                self.changes[y][cell.header.name] = self.input.value;\n                cell.data[cell.header.name] = self.input.value;\n                if (y === self.data.length) {\n                    if (self.dispatchEvent('newrow', {\n                            value: self.input.value,\n                            defaultValue: cell.value,\n                            aborted: abort,\n                            cell: cell,\n                            input: self.input\n                        })) { return false; }\n                    self.uId += 1;\n                    self.addRow(cell.data);\n                    self.createNewRowData();\n                }\n                self.draw(true);\n            }\n            document.body.removeChild(self.input);\n            self.controlInput.focus();\n            self.dispatchEvent('endedit', {\n                cell: cell,\n                value: self.input.value,\n                aborted: abort,\n                input: self.input\n            });\n            self.input = undefined;\n            return true;\n        };\n        /**\n         * Begins editing at cell x, row y.\n         * @memberof canvasDataGrid\n         * @name beginEditAt\n         * @method\n         * @param {number} x The column index of the cell to edit.\n         * @param {number} y The row index of the cell to edit.\n         */\n        self.beginEditAt = function (x, y) {\n            if (!self.attributes.editable) { return; }\n            var cell = self.getVisibleCellByIndex(x, y),\n                s = self.getVisibleSchema(),\n                enumItems;\n            if (self.dispatchEvent('beforebeginedit', {cell: cell})) { return false; }\n            self.scrollIntoView(x, y);\n            self.setActiveCell(x, y);\n            if (cell.header.enum) {\n                self.input = document.createElement('select');\n            } else {\n                self.input = document.createElement(self.attributes.multiLine\n                    ? 'textarea' : 'input');\n            }\n            function postDraw() {\n                var option, valueInEnum;\n                cell = self.getVisibleCellByIndex(x, y);\n                if (cell.header.enum) {\n                    // add enums\n                    if (typeof cell.header.enum === 'function') {\n                        enumItems = cell.header.enum.apply(self.intf, [{cell: cell}]);\n                    } else if (Array.isArray(cell.header.enum)) {\n                        enumItems = cell.header.enum;\n                    }\n                    enumItems.forEach(function (e) {\n                        var i = document.createElement('option'),\n                            val,\n                            title;\n                        if (Array.isArray(e)) {\n                            val = e[0];\n                            title = e[1];\n                        } else {\n                            val = e;\n                            title = e;\n                        }\n                        if (val === cell.value) { valueInEnum = true; }\n                        i.value = val;\n                        i.innerHTML = title;\n                        self.input.appendChild(i);\n                    });\n                    if (!valueInEnum) {\n                        option = document.createElement('option');\n                        option.value = cell.value;\n                        option.innerHTML = cell.value;\n                        self.input.appendChild(option);\n                    }\n                    self.input.addEventListener('change', function () {\n                        self.endEdit();\n                        self.draw(true);\n                    });\n                }\n                document.body.appendChild(self.input);\n                self.createInlineStyle(self.input, 'canvas-datagrid-edit-input');\n                self.input.style.position = 'absolute';\n                self.input.editCell = cell;\n                self.resizeEditInput();\n                self.input.style.zIndex = '2';\n                self.input.value = cell.value;\n                self.input.focus();\n                self.input.addEventListener('click', self.stopPropagation);\n                self.input.addEventListener('dblclick', self.stopPropagation);\n                self.input.addEventListener('mouseup', self.stopPropagation);\n                self.input.addEventListener('mousedown', self.stopPropagation);\n                self.input.addEventListener('keydown', function (e) {\n                    var nx = cell.columnIndex,\n                        ny = cell.rowIndex;\n                    // esc\n                    if (e.keyCode === 27) {\n                        self.endEdit(true);\n                        self.draw(true);\n                    // enter\n                    } else if (e.keyCode === 13\n                            && (!self.attributes.multiLine\n                                || (self.attributes.multiLine && e.shiftKey))) {\n                        self.endEdit();\n                        self.draw(true);\n                    } else if (e.keyCode === 9) {\n                        e.preventDefault();\n                        if (!self.endEdit()) {\n                            return;\n                        }\n                        if (e.shiftKey) {\n                            nx -= 1;\n                        } else {\n                            nx += 1;\n                        }\n                        if (nx < 0) {\n                            nx = s.length - 1;\n                            ny -= 1;\n                        }\n                        if (nx > s.length - 1) {\n                            nx = 0;\n                            ny += 1;\n                        }\n                        if (ny < 0) {\n                            ny = self.data.length - 1;\n                        }\n                        if (ny > self.data.length - 1) {\n                            ny = 0;\n                        }\n                        self.beginEditAt(nx, ny);\n                    }\n                });\n            }\n            postDraw();\n            self.dispatchEvent('beginedit', {cell: cell, input: self.input});\n        };\n        self.click = function (e, overridePos) {\n            var i,\n                selectionChanged,\n                ctrl = (e.controlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                pos = overridePos || self.getLayerPos(e);\n            self.currentCell = self.getCellAt(pos.x, pos.y);\n            if (self.currentCell.grid !== undefined) {\n                return;\n            }\n            function checkSelectionChange() {\n                if (!selectionChanged) { return; }\n                self.dispatchEvent('selectionchanged', {\n                    selectedData: self.getSelectedData(),\n                    selections: self.selections,\n                    selectionBounds: self.selectionBounds\n                });\n            }\n            if (self.input) {\n                self.endEdit();\n            }\n            if (self.ignoreNextClick) {\n                self.ignoreNextClick = false;\n                return;\n            }\n            i = self.currentCell;\n            if (self.dispatchEvent('click', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'cell') {\n                if (self.currentCell.style === 'cornerCell') {\n                    self.order(self.uniqueId, 'asc');\n                    self.setFilter();\n                    checkSelectionChange();\n                    return;\n                }\n                if (self.currentCell.style === 'columnHeaderCell') {\n                    if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                        if (self.orderBy === i.header.name) {\n                            self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                        } else {\n                            self.orderDirection = 'asc';\n                        }\n                        self.order(i.header.name, self.orderDirection);\n                        checkSelectionChange();\n                        return;\n                    }\n                    if (self.attributes.columnHeaderClickBehavior === 'select') {\n                        self.selectColumn(i.header.index, ctrl, e.shiftKey, true);\n                        checkSelectionChange();\n                        self.draw();\n                        return;\n                    }\n                }\n                if (['rowHeaderCell', 'columnHeaderCell'].indexOf(self.currentCell.style) === -1 && !ctrl) {\n                    self.setActiveCell(i.columnIndex, i.rowIndex);\n                }\n                self.selections[i.rowIndex] = self.selections[i.rowIndex] || [];\n                if ((self.attributes.rowSelectionMode || self.currentCell.style === 'rowHeaderCell')) {\n                    if (self.currentCell.style === 'rowHeaderCell'\n                            && self.attributes.tree && pos.x > 0\n                            && pos.x - self.currentCell.x < self.style.treeArrowWidth\n                            + self.style.treeArrowMarginLeft\n                            + self.style.treeArrowMarginRight + self.style.treeArrowClickRadius\n                            && pos.y - self.currentCell.y < self.style.treeArrowHeight\n                            + self.style.treeArrowMarginTop + self.style.treeArrowClickRadius\n                            && pos.y > 0) {\n                        self.toggleTree(i.rowIndex);\n                        return;\n                    }\n                    selectionChanged = true;\n                    self.selectRow(i.rowIndex, ctrl, true);\n                }\n                if (e.shiftKey && !ctrl) {\n                    self.selectionBounds = self.getSelectionBounds();\n                    self.selectArea(undefined, false);\n                }\n            }\n            checkSelectionChange();\n            self.draw(true);\n        };\n        self.dragResizeColumn = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = self.resizingStartingWidth + pos.x - self.dragStart.x;\n            y = self.resizingStartingHeight + pos.y - self.dragStart.y;\n            if (x < self.style.minColumnWidth) {\n                x = self.style.minColumnWidth;\n            }\n            if (y < self.style.minRowHeight) {\n                y = self.style.minRowHeight;\n            }\n            if (self.dispatchEvent('resizecolumn', {x: x, y: y, draggingItem: self.draggingItem})) { return false; }\n            if (self.scrollBox.scrollLeft > self.scrollBox.scrollWidth - self.attributes.resizeScrollZone\n                    && self.dragMode === 'ew-resize') {\n                self.resize(true);\n                self.scrollBox.scrollLeft += x;\n            }\n            if (self.dragMode === 'ew-resize') {\n                self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] = x;\n                if (['rowHeaderCell', 'cornerCell'].indexOf(self.draggingItem.header.style) !== -1) {\n                    self.resize(true);\n                }\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.dragMode === 'ns-resize') {\n                if (self.draggingItem.rowOpen) {\n                    self.sizes.trees[self.draggingItem.data[self.uniqueId]] = y;\n                } else if (self.attributes.globalRowResize) {\n                    self.style.cellHeight = y;\n                } else {\n                    self.sizes.rows[self.draggingItem.data[self.uniqueId]] = y;\n                }\n                self.dispatchEvent('resizerow', {row: y});\n                self.resizeChildGrids();\n                return;\n            }\n            self.ellipsisCache = {};\n        };\n        self.stopDragResize = function () {\n            self.resize();\n            document.body.removeEventListener('mousemove', self.dragResizeColumn, false);\n            document.body.removeEventListener('mouseup', self.stopDragResize, false);\n            self.setStorageData();\n            self.draw(true);\n            self.ignoreNextClick = true;\n        };\n        self.scrollGrid = function (e) {\n            var pos = self.getLayerPos(e);\n            if (self.attributes.scrollPointerLock && self.pointerLockPosition\n                    && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                self.pointerLockPosition.x += e.movementX;\n                self.pointerLockPosition.y += e.movementY;\n                pos = self.pointerLockPosition;\n            }\n            self.scrollMode = self.getCellAt(pos.x, pos.y).context;\n            if (self.scrollMode === 'horizontal-scroll-box' && self.scrollStartMode !== 'horizontal-scroll-box') {\n                self.scrollStartMode = 'horizontal-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.left = self.scrollBox.scrollLeft;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box' && self.scrollStartMode !== 'vertical-scroll-box') {\n                self.scrollStartMode = 'vertical-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.top = self.scrollBox.scrollTop;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollStartMode === 'vertical-scroll-box'\n                    && self.scrollMode !== 'vertical-scroll-box') {\n                self.scrollMode = 'vertical-scroll-box';\n            }\n            if (self.scrollStartMode === 'horizontal-scroll-box'\n                    && self.scrollMode !== 'horizontal-scroll-box') {\n                self.scrollMode = 'horizontal-scroll-box';\n            }\n            clearTimeout(self.scrollTimer);\n            if (self.scrollModes.indexOf(self.scrollMode) === -1) {\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box') {\n                self.scrollBox.scrollTop = self.scrollStart.top + ((pos.y - self.dragStart.y)\n                    / self.scrollBox.heightBoxRatio);\n            } else if (self.scrollMode === 'vertical-scroll-top') {\n                self.scrollBox.scrollTop -= (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'vertical-scroll-bottom') {\n                self.scrollBox.scrollTop += (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n            if (self.scrollMode === 'horizontal-scroll-box') {\n                self.scrollBox.scrollLeft = self.scrollStart.left + ((pos.x - self.dragStart.x)\n                    / self.scrollBox.widthBoxRatio);\n            } else if (self.scrollMode === 'horizontal-scroll-right') {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'horizontal-scroll-left') {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.stopScrollGrid = function () {\n            clearTimeout(self.scrollTimer);\n            if (document.exitPointerLock) {\n                document.exitPointerLock();\n            }\n            document.body.removeEventListener('mousemove', self.scrollGrid, false);\n        };\n        self.dragReorder = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = pos.x - self.dragStart.x;\n            y = pos.y - self.dragStart.y;\n            if (!self.attributes.allowColumnReordering && self.dragMode === 'column-reorder') {\n                return;\n            }\n            if (!self.attributes.allowRowReordering && self.dragMode === 'row-reorder') {\n                return;\n            }\n            if (self.dispatchEvent('reordering', {\n                    NativeEvent: e,\n                    source: self.dragStartObject,\n                    target: self.currentCell,\n                    dragMode: self.dragMode\n                })) {\n                return;\n            }\n            if (Math.abs(x) > self.attributes.reorderDeadZone || Math.abs(y) > self.attributes.reorderDeadZone) {\n                self.reorderObject = self.dragStartObject;\n                self.reorderTarget = self.currentCell;\n                self.reorderObject.dragOffset = {\n                    x: x,\n                    y: y\n                };\n                self.autoScrollZone(e, pos.x, pos.x, false);\n            }\n        };\n        self.stopDragReorder = function (e) {\n            var cr = {\n                    'row-reorder': self.orders.rows,\n                    'column-reorder': self.orders.columns\n                },\n                i = {\n                    'row-reorder': 'rowIndex',\n                    'column-reorder': 'columnIndex'\n                }[self.dragMode];\n            document.body.removeEventListener('mousemove', self.dragReorder, false);\n            document.body.removeEventListener('mouseup', self.stopDragReorder, false);\n            if (self.reorderObject\n                    && self.reorderTarget) {\n                self.ignoreNextClick = true;\n                if (self.reorderObject[i] !== self.reorderTarget[i]\n                        && !self.dispatchEvent('reorder', {\n                            NativeEvent: e,\n                            source: self.reorderObject,\n                            target: self.reorderTarget,\n                            dragMode: self.dragMode\n                        })) {\n                    cr[self.dragMode].splice(cr[self.dragMode].indexOf(self.reorderObject[i]), 1);\n                    cr[self.dragMode].splice(cr[self.dragMode].indexOf(self.reorderTarget[i]), 0, self.reorderObject[i]);\n                    self.setStorageData();\n                }\n            }\n            self.reorderObject = undefined;\n            self.reorderTarget = undefined;\n            self.draw(true);\n        };\n        self.mousedown = function (e, overridePos) {\n            self.lastMouseDownTarget = e.target;\n            if (self.dispatchEvent('mousedown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (e.button === 2 || self.input) { return; }\n            var ctrl = (e.controlKey || e.metaKey);\n            self.dragStart = overridePos || self.getLayerPos(e);\n            self.scrollStart = {\n                left: self.scrollBox.scrollLeft,\n                top: self.scrollBox.scrollTop\n            };\n            self.dragStartObject = self.getCellAt(self.dragStart.x, self.dragStart.y);\n            self.dragAddToSelection = !self.dragStartObject.selected;\n            if (!ctrl && !e.shiftKey && !/(vertical|horizontal)-scroll-(bar|box)/\n                    .test(self.dragStartObject.context) && !self.currentCell.isColumnHeader) {\n                self.selections = [];\n            }\n            if (self.dragStartObject.isGrid) {\n                return;\n            }\n            if (self.scrollModes.indexOf(self.dragStartObject.context) !== -1) {\n                self.scrollMode = self.dragStartObject.context;\n                self.scrollStartMode = self.dragStartObject.context;\n                self.scrollGrid(e);\n                if (self.attributes.scrollPointerLock\n                        && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                    self.pointerLockPosition = {\n                        x: self.dragStart.x,\n                        y: self.dragStart.y\n                    };\n                    self.canvas.requestPointerLock();\n                }\n                document.body.addEventListener('mousemove', self.scrollGrid, false);\n                document.body.addEventListener('mouseup', self.stopScrollGrid, false);\n                self.ignoreNextClick = true;\n                return;\n            }\n            if (self.dragMode === 'cell') {\n                self.selecting = true;\n                if (self.attributes.rowSelectionMode) {\n                    self.selectRow(self.dragStartObject.rowIndex, ctrl, true);\n                }\n                return self.mousemove(e);\n            }\n            if (['ns-resize', 'ew-resize'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragItem;\n                if (self.draggingItem.rowOpen) {\n                    self.resizingStartingHeight = self.sizes.trees[self.draggingItem.data[self.uniqueId]];\n                } else {\n                    self.resizingStartingHeight = self.sizes.rows[self.draggingItem.data[self.uniqueId]] || self.style.cellHeight;\n                }\n                self.resizingStartingWidth = self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] || self.draggingItem.header.width;\n                document.body.addEventListener('mousemove', self.dragResizeColumn, false);\n                document.body.addEventListener('mouseup', self.stopDragResize, false);\n            }\n            if (['row-reorder', 'column-reorder'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragItem;\n                document.body.addEventListener('mousemove', self.dragReorder, false);\n                document.body.addEventListener('mouseup', self.stopDragReorder, false);\n            }\n        };\n        self.mouseup = function (e) {\n            clearTimeout(self.scrollTimer);\n            self.cellBoundaryCrossed = true;\n            self.selecting = undefined;\n            self.draggingItem = undefined;\n            self.dragStartObject = undefined;\n            if (self.dispatchEvent('mouseup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            if (self.currentCell && self.currentCell.grid !== undefined) {\n                return;\n            }\n            if (self.contextMenu || self.input) { return; }\n            if (self.dragStart && self.isInGrid(self.dragStart)) {\n                self.controlInput.focus();\n            }\n            e.preventDefault();\n        };\n        self.keydown = function (e) {\n            var i,\n                x = self.activeCell.columnIndex,\n                y = self.activeCell.rowIndex,\n                ctrl = (e.controlKey || e.metaKey),\n                last = self.data.length - 1,\n                cols = self.getVisibleSchema().length - 1;\n            if (self.dispatchEvent('keydown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            if (self.attributes.showNewRow) {\n                last += 1;\n            }\n            if (e.keyCode === 'Tab') {\n                e.preventDefault();\n            }\n            // ctrl + a\n            if (ctrl && e.keyCode === 65) {\n                self.selectAll();\n            //ArrowDown\n            } else if (e.keyCode === 40) {\n                y += 1;\n            //ArrowUp\n            } else if (e.keyCode === 38) {\n                y -= 1;\n            //ArrowLeft Tab\n            } else if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {\n                x -= 1;\n            //ArrowRight Tab\n            } else if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {\n                x += 1;\n            //PageUp\n            } else if (e.keyCode === 33) {\n                y -= self.page;\n                e.preventDefault();\n            //PageDown\n            } else if (e.keyCode === 34) {\n                y += self.page;\n                e.preventDefault();\n            //Home ArrowUp\n            } else if (e.keyCode === 36 || (ctrl && e.keyCode === 38)) {\n                y = 0;\n            //End ArrowDown\n            } else if (e.keyCode === 35 || (ctrl && e.keyCode === 40)) {\n                y = self.data.length - 1;\n            //ArrowRight\n            } else if (ctrl && e.keyCode === 39) {\n                x = cols;\n            //ArrowLeft\n            } else if (ctrl && e.keyCode === 37) {\n                x = 0;\n            }\n            //Enter\n            if (e.keyCode === 13) {\n                return self.beginEditAt(x, y);\n            }\n            //Space\n            if (e.keyCode === 32) {\n                self.selections = [];\n                self.selections[Math.max(y, 0)] = [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                if (self.attributes.rowSelectionMode) {\n                    for (i = self.selectionBounds.top; i <= self.selectionBounds.bottom; i += 1) {\n                        self.selectRow(i, ctrl, true);\n                    }\n                } else {\n                    self.selectArea(undefined, ctrl);\n                }\n                e.preventDefault();\n                self.draw(true);\n                return;\n            }\n            if (x < 0) {\n                x = 0;\n            }\n            if (y > last) {\n                y = last;\n            }\n            if (y < 0) {\n                y = 0;\n            }\n            if (x > cols) {\n                x = cols;\n            }\n            // Arrows\n            if (e.shiftKey && [37, 38, 39, 40].indexOf(e.keyCode) !== -1) {\n                self.selections[Math.max(y, 0)] = self.selections[Math.max(y, 0)] || [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                self.selectArea(undefined, ctrl);\n                self.draw(true);\n            }\n            if (x !== self.activeCell.columnIndex || y !== self.activeCell.rowIndex) {\n                self.scrollIntoView(x !== self.activeCell.columnIndex ? x : undefined, y !== self.activeCell.rowIndex ? y : undefined);\n                self.setActiveCell(x, y);\n                if (!e.shiftKey && self.attributes.selectionFollowsActiveCell) {\n                    if (!ctrl) {\n                        self.selections = [];\n                    }\n                    self.selections[y] = self.selections[y] || [];\n                    self.selections[y].push(x);\n                    self.dispatchEvent('selectionchanged', {\n                        selectedData: self.getSelectedData(),\n                        selections: self.selections,\n                        selectionBounds: self.selectionBounds\n                    });\n                }\n                self.draw(true);\n            }\n        };\n        self.keyup = function (e) {\n            if (self.dispatchEvent('keyup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            self.controlInput.value = '';\n        };\n        self.keypress = function (e) {\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.dispatchEvent('keypress', {NativeEvent: e, cell: self.currentCell})) { return; }\n        };\n        self.dblclick = function (e) {\n            if (self.dispatchEvent('dblclick', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'columnHeaderCell') {\n                self.fitColumnToValues(self.currentCell.header.name);\n            } else if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'cornerCell') {\n                self.autosize();\n            } else if (['cell', 'activeCell'].indexOf(self.currentCell.style) !== -1) {\n                self.beginEditAt(self.currentCell.columnIndex, self.currentCell.rowIndex);\n            }\n        };\n        self.scrollWheel = function (e) {\n            if (self.dispatchEvent('wheel', {NativeEvent: e})) {\n                return;\n            }\n            self.touchHaltAnimation = true;\n            var l = self.scrollBox.scrollLeft,\n                t = self.scrollBox.scrollTop;\n            if (self.hasFocus) {\n                self.scrollBox.scrollTop += e.deltaY;\n                self.scrollBox.scrollLeft += e.deltaX;\n            }\n            if (t !== self.scrollBox.scrollTop || l !== self.scrollBox.scrollLeft) {\n                e.preventDefault();\n            }\n        };\n        self.copy = function (e) {\n            if (self.dispatchEvent('copy', {NativeEvent: e})) { return; }\n            if (!self.hasFocus || !e.clipboardData) { return; }\n            var rows = [], sData = self.getSelectedData();\n            if (sData.length > 0) {\n                sData.forEach(function (row) {\n                    if (row) {\n                        var r = [];\n                        Object.keys(row).forEach(function (key) {\n                            r.push(row[key]);\n                        });\n                        r.join(',');\n                        rows.push(r);\n                    }\n                });\n                e.clipboardData.setData('text/plain', rows.join('\\n'));\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        self.orders = {\n            rows: [],\n            columns: []\n        };\n        self.hasFocus = false;\n        self.activeCell = {\n            columnIndex: 0,\n            rowIndex: 0\n        };\n        self.storageName = 'canvasDataGrid';\n        self.invalidSearchExpClass = 'canvas-datagrid-invalid-search-regExp';\n        self.localStyleLibraryStorageKey = 'canvas-datagrid-user-style-library';\n        self.uniqueId = '_canvasDataGridUniqueId';\n        self.orderBy = self.uniqueId;\n        self.orderDirection = 'asc';\n        self.columnFilters = {};\n        self.filters = {};\n        self.ellipsisCache = {};\n        self.scrollBox = {};\n        self.visibleRows = [];\n        self.sizes = {\n            rows: {},\n            columns: {},\n            trees: {}\n        };\n        self.currentFilter = function () {\n            return true;\n        };\n        self.selections = [];\n        self.hovers = {};\n        self.attributes = {};\n        self.style = {};\n        self.intf = {};\n        self.formatters = {};\n        self.sorters = {};\n        self.schemaHashes = {};\n        self.events = {};\n        self.uId = 0;\n        self.changes = [];\n        self.scrollIndexTop = 0;\n        self.scrollPixelTop = 0;\n        self.scrollIndexLeft = 0;\n        self.scrollPixelLeft = 0;\n        self.childGrids = {};\n        self.openChildren = {};\n        self.scrollModes = [\n            'vertical-scroll-box',\n            'vertical-scroll-top',\n            'vertical-scroll-bottom',\n            'horizontal-scroll-box',\n            'horizontal-scroll-right',\n            'horizontal-scroll-left'\n        ];\n        self.mouse = { x: 0, y: 0};\n        self.getSelectedData = function (expandToRow) {\n            var d = [], s = self.getSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                d[index] = {};\n                if (expandToRow) {\n                    s.forEach(function (column) {\n                        d[index][column.name] = self.data[index][column.name];\n                    });\n                } else {\n                    row.forEach(function (col) {\n                        if (col === -1) { return; }\n                        d[index][s[col].name] = self.data[index][s[col].name];\n                    });\n                }\n            });\n            return d;\n        };\n        self.scrollOffset = function (e) {\n            var x = 0, y = 0;\n            while (e.parentNode) {\n                if (e.nodeType !== 'canvas-datagrid-tree'\n                        && e.nodeType !== 'canvas-datagrid-cell') {\n                    x -= e.scrollLeft;\n                    y -= e.scrollTop;\n                }\n                e = e.parentNode;\n            }\n            return {left: x, top: y};\n        };\n        self.position = function (e, ignoreScrollOffset) {\n            var x = 0, y = 0, s = e, h, w;\n            while (e.offsetParent) {\n                x += e.offsetLeft;\n                y += e.offsetTop;\n                h = e.offsetHeight;\n                w = e.offsetWidth;\n                e = e.offsetParent;\n            }\n            if (ignoreScrollOffset) {\n                return {left: x, top: y, height: h, width: w};\n            }\n            e = s;\n            s = self.scrollOffset(e);\n            return { left: x + s.left, top: y + s.top, height: h, width: w };\n        };\n        self.getLayerPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.clientX - rect.left,\n                    y: e.clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        self.fillArray = function (low, high, step) {\n            step = step || 1;\n            var i = [], x;\n            for (x = low; x <= high; x += step) {\n                i[x] = x;\n            }\n            return i;\n        };\n        self.getRowHeaderCellHeight = function () {\n            if (!self.attributes.showColumnHeaders) { return 0; }\n            return self.sizes.rows[-1] || self.style.columnHeaderCellHeight;\n        };\n        self.getColumnHeaderCellWidth = function () {\n            if (!self.attributes.showRowHeaders) { return 0; }\n            return self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth;\n        };\n        self.setStorageData = function () {\n            if (!self.attributes.saveAppearance) { return; }\n            localStorage.setItem(self.storageName + '-' + self.attributes.name, JSON.stringify({\n                sizes: {\n                    rows: self.sizes.rows,\n                    columns: self.sizes.columns\n                },\n                orders: {\n                    rows: self.orders.rows,\n                    columns: self.orders.columns\n                },\n                orderBy: self.orderBy,\n                orderDirection: self.orderDirection\n            }));\n        };\n        self.getSchema = function () {\n            return self.schema || self.tempSchema;\n        };\n        self.createColumnOrders = function () {\n            var s = self.getSchema();\n            self.orders.columns = self.fillArray(0, s.length - 1);\n        };\n        self.createRowOrders = function () {\n            self.orders.rows = self.fillArray(0, self.data.length - 1);\n        };\n        self.getVisibleSchema = function () {\n            return self.getSchema().filter(function (col) { return !col.hidden; });\n        };\n        self.applyDefaultValue = function (row, header) {\n            var d = header.defaultValue || '';\n            if (typeof d === 'function') {\n                d = d.apply(self.intf, [header]);\n            }\n            row[header.name] = d;\n        };\n        self.createNewRowData = function () {\n            self.newRow = {};\n            self.newRow[self.uniqueId] = self.uId;\n            self.uId += 1;\n            self.getSchema().forEach(function forEachHeader(header) {\n                self.applyDefaultValue(self.newRow, header);\n            });\n        };\n        self.getSchemaNameHash = function (key) {\n            var n = 0;\n            while (self.schemaHashes[key]) {\n                n += 1;\n                key = key + n;\n            }\n            return key;\n        };\n        self.filter = function (type) {\n            var f = self.filters[type];\n            if (!f && type !== undefined) {\n                console.warn('Cannot find filter for type %s, falling back to substring match.', type);\n                f = self.filters.string;\n            }\n            return f;\n        };\n        self.getBestGuessDataType = function (columnName) {\n            var t, x, l = self.data.length;\n            for (x = 0; x < l; x += 1) {\n                if ([null, undefined].indexOf(self.data[x][columnName]) !== -1) {\n                    t = typeof self.data[x];\n                    return t === 'object' ? 'string' : t;\n                }\n            }\n            return 'string';\n        };\n        self.drawChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].draw();\n            });\n        };\n        self.resizeChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].resize();\n            });\n        };\n        self.getClippingRect = function (ele) {\n            var boundingRect = self.position(self.parentNode),\n                eleRect = self.position(ele),\n                s = self.scrollOffset(self.canvas),\n                clipRect = {\n                    x: 0,\n                    y: 0,\n                    h: 0,\n                    w: 0\n                },\n                parentRect = {\n                    x: -Infinity,\n                    y: -Infinity,\n                    h: Infinity,\n                    w: Infinity\n                },\n                rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth();\n            boundingRect.top -= s.top;\n            boundingRect.left -= s.left;\n            eleRect.top -= s.top;\n            eleRect.left -= s.left;\n            clipRect.h = boundingRect.top + boundingRect.height - ele.offsetTop - self.style.scrollBarWidth;\n            clipRect.w = boundingRect.left + boundingRect.width - ele.offsetLeft - self.style.scrollBarWidth;\n            clipRect.x = boundingRect.left + (eleRect.left * -1) + columnHeaderCellWidth;\n            clipRect.y = boundingRect.top + (eleRect.top * -1) + rowHeaderCellHeight;\n            return {\n                x: clipRect.x > parentRect.x ? clipRect.x : parentRect.x,\n                y: clipRect.y > parentRect.y ? clipRect.y : parentRect.y,\n                h: clipRect.h < parentRect.h ? clipRect.h : parentRect.h,\n                w: clipRect.w < parentRect.w ? clipRect.w : parentRect.w\n            };\n        };\n        self.clipElement = function (ele) {\n            var clipRect = self.getClippingRect(ele);\n            if (clipRect.w < 0) { clipRect.w = 0; }\n            if (clipRect.h < 0) { clipRect.h = 0; }\n            ele.style.clip = 'rect('\n                + clipRect.y + 'px,'\n                + clipRect.w + 'px,'\n                + clipRect.h + 'px,'\n                + clipRect.x + 'px'\n                + ')';\n            // INFO https://developer.mozilla.org/en-US/docs/Web/CSS/clip\n            // clip has been \"deprecated\" for clipPath.  Of course nothing but chrome\n            // supports clip path, so we'll keep using clip until someday clipPath becomes\n            // more widely support.  The code below works correctly, but setting clipPath and clip\n            // at the same time has undesirable results.\n            // ele.style.clipPath = 'polygon('\n            //     + clipRect.x + 'px ' + clipRect.y + 'px,'\n            //     + clipRect.x + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.y + 'px'\n            //     + ')';\n        };\n        self.autoScrollZone = function (e, x, y, ctrl) {\n            var setTimer,\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth(),\n                rowHeaderCellHeight = self.getRowHeaderCellHeight();\n            if (x > self.width - self.attributes.selectionScrollZone && x < self.width) {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y > self.height - self.attributes.selectionScrollZone && y < self.height) {\n                self.scrollBox.scrollTop += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (x - self.attributes.selectionScrollZone - columnHeaderCellWidth < 0) {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y - self.attributes.selectionScrollZone - rowHeaderCellHeight < 0) {\n                self.scrollBox.scrollTop -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (setTimer && !ctrl && self.currentCell && self.currentCell.columnIndex !== -1) {\n                self.scrollTimer = setTimeout(self.mousemove, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.refreshFromOrigialData = function () {\n            self.data = self.originalData.filter(function (row) {\n                return true;\n            });\n        };\n        self.validateColumn = function (c, s) {\n            if (!c.name) {\n                throw new Error('A column must contain at least a name.');\n            }\n            if (s.filter(function (i) { return i.name === c.name; }).length > 0) {\n                throw new Error('A column with the name '\n                    + c.name + ' already exists and cannot be added again.');\n            }\n            return true;\n        };\n        self.setDefaults = function (obj1, obj2, key, def) {\n            obj1[key] = obj2[key] === undefined ? def : obj2[key];\n        };\n        self.setAttributes = function () {\n            self.defaults.attributes.forEach(function eachAttribute(i) {\n                self.setDefaults(self.attributes, self.args, i[0], i[1]);\n            });\n        };\n        self.setStyle = function () {\n            self.defaults.styles.forEach(function eachStyle(i) {\n                self.setDefaults(self.style, self.args.style || {}, i[0], i[1]);\n            });\n        };\n        self.autosize = function (colName) {\n            self.getVisibleSchema().forEach(function (col) {\n                if (col.name === colName || colName === undefined) {\n                    self.fitColumnToValues(col.name);\n                }\n            });\n            self.fitColumnToValues('cornerCell');\n        };\n        self.dispose = function () {\n            if (!self.isChildGrid && self.canvas && self.canvas.parentNode) {\n                self.canvas.parentNode.removeChild(self.canvas);\n            }\n            self.eventParent.removeEventListener('mouseup', self.mouseup, false);\n            self.eventParent.removeEventListener('mousedown', self.mousedown, false);\n            self.eventParent.removeEventListener('dblclick', self.dblclick, false);\n            self.eventParent.removeEventListener('click', self.click, false);\n            self.eventParent.removeEventListener('mousemove', self.mousemove);\n            self.eventParent.removeEventListener('wheel', self.scrollWheel, false);\n            self.canvas.removeEventListener('contextmenu', self.contextmenu, false);\n            self.canvas.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('keypress', self.keypress, false);\n            self.controlInput.removeEventListener('keyup', self.keyup, false);\n            self.controlInput.removeEventListener('keydown', self.keydown, false);\n            window.removeEventListener('resize', self.resize);\n            if (self.observer && self.observer.disconnect) {\n                self.observer.disconnect();\n            }\n        };\n        self.tryLoadStoredOrders = function () {\n            var s;\n            if (self.storedSettings && typeof self.storedSettings.orders === 'object') {\n                if (self.storedSettings.orders.rows.length >= self.data.length) {\n                    self.orders.rows = self.storedSettings.orders.rows;\n                }\n                s = self.getSchema();\n                self.orders.columns = self.storedSettings.orders.columns;\n                s.forEach(function (h, i) {\n                    if (self.orders.columns.indexOf(i) === -1) {\n                        self.orders.columns.push(i);\n                    }\n                });\n                self.orderBy = self.storedSettings.orderBy === undefined\n                    ? self.uniqueId : self.storedSettings.orderBy;\n                self.orderDirection = self.storedSettings.orderDirection === undefined\n                    ? self.uniqueId : self.storedSettings.orderDirection;\n                if (self.getHeaderByName(self.orderBy) && self.orderDirection) {\n                    self.order(self.orderBy, self.orderDirection);\n                }\n            }\n        };\n        self.getFontHeight = function (fontStyle) {\n            return parseFloat(fontStyle, 10);\n        };\n        self.parseFont = function (key) {\n            if (/Font/.test(key)) {\n                self.style[key + 'Height'] = self.getFontHeight(self.style[key]);\n            }\n        };\n        self.init = function () {\n            var publicStyleKeyIntf = {};\n            self.setAttributes();\n            self.setStyle();\n            self.initScrollBox();\n            self.setDom();\n            Object.keys(self.style).forEach(self.parseFont);\n            self.intf.type = 'canvas-datagrid';\n            self.intf.addEventListener = self.addEventListener;\n            self.intf.removeEventListener = self.removeEventListener;\n            self.intf.dispatchEvent = self.dispatchEvent;\n            self.intf.dispose = self.dispose;\n            self.intf.appendTo = self.appendTo;\n            self.intf.filters = self.filters;\n            self.intf.sorters = self.sorters;\n            self.intf.autosize = self.autosize;\n            self.intf.beginEditAt = self.beginEditAt;\n            self.intf.endEdit = self.endEdit;\n            self.intf.setActiveCell = self.setActiveCell;\n            self.intf.scrollIntoView = self.scrollIntoView;\n            self.intf.clearChangeLog = self.clearChangeLog;\n            self.intf.gotoCell = self.gotoCell;\n            self.intf.gotoRow = self.gotoRow;\n            self.intf.findColumnScrollLeft = self.findColumnScrollLeft;\n            self.intf.findRowScrollTop = self.findRowScrollTop;\n            self.intf.fitColumnToValues = self.fitColumnToValues;\n            self.intf.findColumnMaxTextLength = self.findColumnMaxTextLength;\n            self.intf.disposeContextMenu = self.disposeContextMenu;\n            self.intf.getCellAt = self.getCellAt;\n            self.intf.isCellVisible = self.isCellVisible;\n            self.intf.order = self.order;\n            self.intf.draw = self.draw;\n            self.intf.selectArea = self.selectArea;\n            self.intf.clipElement = self.clipElement;\n            self.intf.getSchemaFromData = self.getSchemaFromData;\n            self.intf.setFilter = self.setFilter;\n            self.intf.selectRow = self.selectRow;\n            self.intf.parentGrid = self.parentGrid;\n            self.intf.toggleTree = self.toggleTree;\n            self.intf.expandTree = self.expandTree;\n            self.intf.collapseTree = self.collapseTree;\n            self.intf.canvas = self.canvas;\n            self.intf.context = self.ctx;\n            self.intf.insertRow = self.insertRow;\n            self.intf.deleteRow = self.deleteRow;\n            self.intf.addRow = self.addRow;\n            self.intf.insertColumn = self.insertColumn;\n            self.intf.deleteColumn = self.deleteColumn;\n            self.intf.addColumn = self.addColumn;\n            self.intf.getClippingRect = self.getClippingRect;\n            self.intf.setRowHeight = self.setRowHeight;\n            self.intf.setColumnWidth = self.setColumnWidth;\n            self.intf.resetColumnWidths = self.resetColumnWidths;\n            self.intf.resetRowHeights = self.resetRowHeights;\n            self.intf.resize = self.resize;\n            self.intf.drawChildGrids = self.drawChildGrids;\n            self.intf.assertPxColor = self.assertPxColor;\n            self.intf.clearPxColorAssertions = self.clearPxColorAssertions;\n            self.intf.integerToAlpha = self.integerToAlpha;\n            self.intf.style = {};\n            Object.keys(self.style).forEach(function (key) {\n                // unless this line is here, Object.keys() will not work on <instance>.style\n                publicStyleKeyIntf[key] = undefined;\n                Object.defineProperty(publicStyleKeyIntf, key, {\n                    get: function () {\n                        return self.style[key];\n                    },\n                    set: function (value) {\n                        self.parseFont(value);\n                        self.style[key] = value;\n                        self.draw(true);\n                        self.dispatchEvent('stylechanged', {name: key, value: value});\n                    }\n                });\n            });\n            /**\n             * When true, the grid is has focus.\n             * @memberof canvasDataGrid\n             * @property hasFocus\n             * @readonly\n             */\n            Object.defineProperty(self.intf, 'hasFocus', {\n                get: function () {\n                    return self.hasFocus;\n                }\n            });\n            Object.defineProperty(self.intf, 'style', {\n                get: function () {\n                    return publicStyleKeyIntf;\n                },\n                set: function (value) {\n                    Object.keys(value).forEach(function (key) {\n                        self.parseFont(value);\n                        self.style[key] = value[key];\n                    });\n                    self.draw(true);\n                    self.dispatchEvent('stylechanged', {name: 'style', value: value});\n                }\n            });\n            Object.keys(self.attributes).forEach(function (key) {\n                Object.defineProperty(self.intf.attributes, key, {\n                    get: function () {\n                        return self.attributes[key];\n                    },\n                    set: function (value) {\n                        self.attributes[key] = value;\n                        self.draw(true);\n                        self.dispatchEvent('attributechanged', {name: key, value: value[key]});\n                    }\n                });\n            });\n            self.filters.string = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                var filterRegExp;\n                self.invalidFilterRegEx = undefined;\n                try {\n                    filterRegExp = new RegExp(filterFor, 'ig');\n                } catch (e) {\n                    self.invalidFilterRegEx = e;\n                    return;\n                }\n                return filterRegExp.test(value);\n            };\n            self.filters.number = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                return value === filterFor;\n            };\n            if (self.attributes.name && self.attributes.saveAppearance) {\n                self.storedSettings = localStorage.getItem(self.storageName + '-' + self.attributes.name);\n                if (self.storedSettings) {\n                    try {\n                        self.storedSettings = JSON.parse(self.storedSettings);\n                    } catch (e) {\n                        console.warn('could not read settings from localStore', e);\n                        self.storedSettings = undefined;\n                    }\n                }\n                if (self.storedSettings) {\n                    if (typeof self.storedSettings.sizes === 'object') {\n                        self.sizes.rows = self.storedSettings.sizes.rows;\n                        self.sizes.columns = self.storedSettings.sizes.columns;\n                        ['trees', 'columns', 'rows'].forEach(function (i) {\n                            if (!self.sizes[i]) {\n                                self.sizes[i] = {};\n                            }\n                        });\n                    }\n                }\n            }\n            if (self.args.data) {\n                self.intf.data = self.args.data;\n            }\n            if (self.args.schema) {\n                self.intf.schema = self.args.schema;\n            }\n            if (!self.data) {\n                self.intf.data = [];\n            }\n            self.resize(true);\n        };\n        /**\n         * Removes focus from the grid.\n         * @memberof canvasDataGrid\n         * @name blur\n         * @method\n         */\n        self.intf.blur = function (e) {\n            self.hasFocus = false;\n        };\n        /**\n         * Focuses on the grid.\n         * @memberof canvasDataGrid\n         * @name focus\n         * @method\n         */\n        self.intf.focus = function () {\n            self.hasFocus = true;\n            self.controlInput.focus();\n        };\n        Object.defineProperty(self.intf, 'height', {\n            get: function () {\n                return self.parentNode.height;\n            },\n            set: function (value) {\n                self.parentNode.height = value;\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'width', {\n            get: function () {\n                return self.parentNode.width;\n            },\n            set: function (value) {\n                self.parentNode.width = value;\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'openChildren', {\n            get: function () {\n                return self.openChildren;\n            }\n        });\n        Object.defineProperty(self.intf, 'childGrids', {\n            get: function () {\n                return Object.keys(self.childGrids).map(function (gridId) {\n                    return self.childGrids[gridId];\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'isChildGrid', {\n            get: function () {\n                return self.isChildGrid;\n            }\n        });\n        Object.defineProperty(self.intf, 'parentNode', {\n            get: function () {\n                return self.parentNode;\n            },\n            set: function (value) {\n                self.parentNode = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetParent', {\n            get: function () {\n                return self.parentNode;\n            },\n            set: function (value) {\n                self.parentNode = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetLeft', {\n            get: function () {\n                return self.parentNode.offsetLeft;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetTop', {\n            get: function () {\n                return self.parentNode.offsetTop;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollHeight', {\n            get: function () {\n                return self.scrollBox.scrollHeight;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollWidth', {\n            get: function () {\n                return self.scrollBox.scrollWidth;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollTop', {\n            get: function () {\n                return self.scrollBox.scrollTop;\n            },\n            set: function (value) {\n                self.scrollBox.scrollTop = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollLeft', {\n            get: function () {\n                return self.scrollBox.scrollLeft;\n            },\n            set: function (value) {\n                self.scrollBox.scrollLeft = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'sizes', {\n            get: function () {\n                return self.sizes;\n            }\n        });\n        Object.defineProperty(self.intf, 'input', {\n            get: function () {\n                return self.input;\n            }\n        });\n        Object.defineProperty(self.intf, 'controlInput', {\n            get: function () {\n                return self.controlInput;\n            }\n        });\n        Object.defineProperty(self.intf, 'currentCell', {\n            get: function () {\n                return self.currentCell;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleCells', {\n            get: function () {\n                return self.visibleCells;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRows', {\n            get: function () {\n                return self.visibleRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'selections', {\n            get: function () {\n                return self.selections;\n            }\n        });\n        Object.defineProperty(self.intf, 'dragMode', {\n            get: function () {\n                return self.dragMode;\n            }\n        });\n        Object.defineProperty(self.intf, 'changes', {\n            get: function () {\n                return self.changes;\n            }\n        });\n        self.intf.attributes = {};\n        self.intf.formatters = self.formatters;\n        self.normalizeDataset = function (data) {\n            var i, d, max, syncFnInvoked;\n            if (data === null || data === '' || data === undefined) {\n                return [];\n            }\n            if (typeof data === 'string'\n                    || typeof data === 'number'\n                    || typeof data === 'boolean') {\n                data = [{'0': data}];\n            }\n            if ((!Array.isArray(data[0]) && typeof data[0] === 'object')\n                            || (Array.isArray(data) && data.length === 0)) {\n                return data;\n            }\n            if (typeof data === 'function') {\n                i = data.apply(self.intf, [function (d) {\n                    if (syncFnInvoked) {\n                        console.warn('Detected a callback to the data setter function after the same function already returned a value synchronously.');\n                    }\n                    self.normalizeDataset(d);\n                }]);\n                if (i) {\n                    syncFnInvoked = true;\n                    self.normalizeDataset(i);\n                }\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if (Array.isArray(data)) {\n                if (!Array.isArray(data[0])) {\n                    //array of something?  throw it all into 1 row!\n                    data = [data];\n                }\n                // find the longest length\n                max = 0;\n                d = [];\n                data.forEach(function (row) {\n                    max = Math.max(max, row.length);\n                });\n                // map against length indexes\n                data.forEach(function (row, index) {\n                    var x;\n                    d[index] = {};\n                    for (x = 0; x < max; x += 1) {\n                        d[index][x] = row[x] || null;\n                    }\n                });\n                return d;\n            }\n            throw new Error('Unsupported data type.  Must be an array of arrays or an array of objects, function or string.');\n        };\n        Object.defineProperty(self.intf, 'selectionBounds', {\n            get: function () {\n                return self.getSelectionBounds();\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedRows', {\n            get: function () {\n                return self.getSelectedData(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedCells', {\n            get: function () {\n                return self.getSelectedData();\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleSchema', {\n            get: function () {\n                return self.getVisibleSchema().map(function eachDataRow(col) {\n                    return col;\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'ctx', {\n            get: function () {\n                return self.ctx;\n            }\n        });\n        Object.defineProperty(self.intf, 'schema', {\n            get: function schemaGetter() {\n                return self.getSchema();\n            },\n            set: function schemaSetter(value) {\n                if (!Array.isArray(value) || typeof value[0] !== 'object') {\n                    throw new Error('Schema must be an array of objects.');\n                }\n                if (value[0].name === undefined) {\n                    throw new Error('Expected schema to contain an object with at least a name property.');\n                }\n                self.schema = value.map(function eachSchemaColumn(column, index) {\n                    column.width = column.width || self.style.columnWidth;\n                    column[self.uniqueId] = self.getSchemaNameHash(column.name);\n                    column.filter = column.filter || self.filter(column.type);\n                    column.type = column.type || 'string';\n                    column.index = index;\n                    column.columnIndex = index;\n                    column.rowIndex = -1;\n                    return column;\n                });\n                self.tempSchema = undefined;\n                self.createNewRowData();\n                self.createColumnOrders();\n                self.tryLoadStoredOrders();\n                self.resize(true);\n                self.dispatchEvent('schemachanged', {schema: self.schema});\n            }\n        });\n        Object.defineProperty(self.intf, 'data', {\n            get: function dataGetter() {\n                return self.data.map(function (row) {\n                    delete row[self.uniqueId];\n                    return row;\n                });\n            },\n            set: function dataSetter(value) {\n                self.originalData = self.normalizeDataset(value).map(function eachDataRow(row) {\n                    row[self.uniqueId] = self.uId;\n                    self.uId += 1;\n                    return row;\n                });\n                self.changes = [];\n                //TODO apply filter to incoming dataset\n                self.data = self.originalData;\n                if (!self.schema && self.data.length > 0) {\n                    self.tempSchema = self.getSchemaFromData();\n                }\n                if (!self.schema && self.data.length === 0) {\n                    self.tempSchema = [{name: ''}];\n                    self.tempSchema[0][self.uniqueId] = self.getSchemaNameHash('');\n                }\n                if (self.tempSchema && !self.schema) {\n                    self.createColumnOrders();\n                    self.tryLoadStoredOrders();\n                    self.dispatchEvent('schemachanged', {schema: self.tempSchema});\n                }\n                self.createNewRowData();\n                if (self.attributes.autoResizeColumns && self.data.length > 0\n                        && self.storedSettings === undefined) {\n                    self.autosize();\n                }\n                // width cannot be determined correctly until after inserted into the dom?\n                requestAnimationFrame(function () {\n                    self.fitColumnToValues('cornerCell');\n                });\n                if (!self.resize()) { self.draw(true); }\n                self.createRowOrders();\n                self.tryLoadStoredOrders();\n                self.dispatchEvent('datachanged', {data: self.data});\n            }\n        });\n        self.initScrollBox = function () {\n            var sHeight = 0,\n                sWidth = 0,\n                scrollTop = 0,\n                scrollLeft = 0,\n                scrollHeight = 0,\n                scrollWidth = 0,\n                scrollBoxHeight = 20,\n                scrollBoxWidth = 20;\n            function setScrollTop(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollTop value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollHeight) {\n                    value = scrollHeight;\n                }\n                if (scrollHeight < 0) {\n                    value = 0;\n                }\n                scrollTop = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            function setScrollLeft(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollLeft value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollWidth) {\n                    value = scrollWidth;\n                }\n                if (scrollWidth < 0) {\n                    value = 0;\n                }\n                scrollLeft = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            self.scrollBox.scrollTo = function (x, y) {\n                setScrollLeft(x, true);\n                setScrollTop(y);\n            };\n            Object.defineProperty(self.scrollBox, 'scrollBoxHeight', {\n                get: function () {\n                    return scrollBoxHeight;\n                },\n                set: function (value) {\n                    scrollBoxHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollBoxWidth', {\n                get: function () {\n                    return scrollBoxWidth;\n                },\n                set: function (value) {\n                    scrollBoxWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'height', {\n                get: function () {\n                    return sHeight;\n                },\n                set: function (value) {\n                    if (scrollHeight < value) {\n                        scrollTop = 0;\n                    }\n                    sHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'width', {\n                get: function () {\n                    return sWidth;\n                },\n                set: function (value) {\n                    sWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollTop', {\n                get: function () {\n                    return scrollTop;\n                },\n                set: setScrollTop\n            });\n            Object.defineProperty(self.scrollBox, 'scrollLeft', {\n                get: function () {\n                    return scrollLeft;\n                },\n                set: setScrollLeft\n            });\n            Object.defineProperty(self.scrollBox, 'scrollHeight', {\n                get: function () {\n                    return scrollHeight;\n                },\n                set: function (value) {\n                    if (scrollTop > value) {\n                        scrollTop = Math.max(value, 0);\n                    }\n                    if (scrollHeight < sHeight) {\n                        scrollTop = 0;\n                    }\n                    scrollHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollWidth', {\n                get: function () {\n                    return scrollWidth;\n                },\n                set: function (value) {\n                    if (scrollLeft > value) {\n                        scrollLeft = Math.max(value, 0);\n                    }\n                    scrollWidth = value;\n                }\n            });\n        };\n        return;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false, Event: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var zIndexTop = 2, hoverScrollTimeout, autoCompleteContext;\n        function createContextMenu(ev, pos, items, parentContextMenu) {\n            var container = document.createElement('div'),\n                upArrow = document.createElement('div'),\n                downArrow = document.createElement('div'),\n                children = [],\n                selectedIndex = -1,\n                intf = {},\n                rect;\n            if (!Array.isArray(items)) { throw new Error('createContextMenu expects an array.'); }\n            function createItems() {\n                items.forEach(function (item) {\n                    var contextItemContainer = document.createElement('div'),\n                        childMenuArrow;\n                    function removeChildContext(e) {\n                        if (e.relatedTarget === container\n                                || item.contextMenu.container === e.relatedTarget\n                                || childMenuArrow === e.relatedTarget\n                                || (contextItemContainer === e.relatedTarget)\n                                ) { return; }\n                        item.contextMenu.dispose();\n                        children.splice(children.indexOf(item.contextMenu), 1);\n                        item.contextMenu = undefined;\n                        contextItemContainer.removeEventListener('mouseout', removeChildContext);\n                        container.removeEventListener('mouseout', removeChildContext);\n                        contextItemContainer.setAttribute('contextOpen', '0');\n                        contextItemContainer.setAttribute('opening', '0');\n                    }\n                    function contextAddCallback(items) {\n                        // check yet again if the user hasn't moved off\n                        if (contextItemContainer.getAttribute('opening') !== '1' ||\n                                contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        var cPos = contextItemContainer.getBoundingClientRect();\n                        cPos = {\n                            left: cPos.left + self.style.childContextMenuMarginLeft + container.offsetWidth,\n                            top: cPos.top + self.style.childContextMenuMarginTop,\n                            bottom: cPos.bottom,\n                            right: cPos.right,\n                        };\n                        item.contextMenu = createContextMenu(ev, cPos, items, intf);\n                        contextItemContainer.setAttribute('contextOpen', '1');\n                        contextItemContainer.addEventListener('mouseout', removeChildContext);\n                        container.addEventListener('mouseout', removeChildContext);\n                        children.push(item.contextMenu);\n                    }\n                    function createChildContext() {\n                        var i;\n                        if (contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        contextItemContainer.setAttribute('opening', '1');\n                        if (typeof item.items === 'function') {\n                            i  = item.items.apply(intf, [function (items) {\n                                contextAddCallback(items);\n                            }]);\n                            if (i !== undefined && Array.isArray(i)) {\n                                contextAddCallback(i);\n                            }\n                            return;\n                        }\n                        contextAddCallback(item.items);\n                    }\n                    function addItem(item) {\n                        function addContent(content) {\n                            if (typeof content === 'function') {\n                                return addContent(content(ev));\n                            }\n                            if (typeof content === 'object') {\n                                contextItemContainer.appendChild(content);\n                                return;\n                            }\n                            self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n                            contextItemContainer.addEventListener('mouseover', function () {\n                                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                            });\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n                            });\n                            contextItemContainer.innerHTML = content;\n                            return;\n                        }\n                        addContent(item.title);\n                        item.contextItemContainer = contextItemContainer;\n                        if (item.items && item.items.length > 0) {\n                            childMenuArrow = document.createElement('div');\n                            self.createInlineStyle(childMenuArrow, 'canvas-datagrid-context-child-arrow');\n                            childMenuArrow.innerHTML = self.style.childContextMenuArrowHTML;\n                            contextItemContainer.appendChild(childMenuArrow);\n                            contextItemContainer.addEventListener('mouseover', createChildContext);\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                contextItemContainer.setAttribute('opening', '0');\n                            });\n                        }\n                        if (item.click) {\n                            contextItemContainer.addEventListener('click', function (ev) {\n                                item.click.apply(self, [ev]);\n                            });\n                        }\n                    }\n                    addItem(item);\n                    container.appendChild(contextItemContainer);\n                });\n            }\n            function clickIndex(idx) {\n                items[idx].contextItemContainer.dispatchEvent(new Event('click'));\n            }\n            function checkArrowVisibility() {\n                if (container.scrollTop > 0) {\n                    document.body.appendChild(upArrow);\n                } else if (upArrow.parentNode) {\n                    upArrow.parentNode.removeChild(upArrow);\n                }\n                if (container.scrollTop >= container.scrollHeight - container.offsetHeight && downArrow.parentNode) {\n                    downArrow.parentNode.removeChild(downArrow);\n                } else if (container.scrollHeight - container.offsetHeight > 0\n                        && !(container.scrollTop >= container.scrollHeight - container.offsetHeight)) {\n                    document.body.appendChild(downArrow);\n                }\n            }\n            function startHoverScroll(type) {\n                return function t() {\n                    var a = self.attributes.contextHoverScrollAmount;\n                    if (type === 'up' && container.scrollTop === 0) { return; }\n                    if (type === 'down' && container.scrollTop === container.scrollHeight) { return; }\n                    container.scrollTop += (type === 'up' ? -a : a);\n                    hoverScrollTimeout = setTimeout(t, self.attributes.contextHoverScrollRateMs, type);\n                };\n            }\n            function endHoverScroll(type) {\n                return function () {\n                    clearTimeout(hoverScrollTimeout);\n                };\n            }\n            function init() {\n                var loc = {},\n                    s = self.scrollOffset(self.canvas);\n                createItems();\n                self.createInlineStyle(container, 'canvas-datagrid-context-menu');\n                loc.x = pos.left - s.left;\n                loc.y = pos.top - s.top;\n                loc.height = 0;\n                zIndexTop += 1;\n                container.style.position = 'absolute';\n                upArrow.style.color = self.style.contextMenuArrowColor;\n                downArrow.style.color = self.style.contextMenuArrowColor;\n                [upArrow, downArrow].forEach(function (el) {\n                    el.style.textAlign = 'center';\n                    el.style.position = 'absolute';\n                    el.style.zIndex = zIndexTop + 1;\n                });\n                container.style.zIndex = zIndexTop;\n                if (parentContextMenu && parentContextMenu.inputDropdown) {\n                    container.style.maxHeight = window.innerHeight - loc.y - self.style.autocompleteBottomMargin + 'px';\n                    container.style.minWidth = pos.width + 'px';\n                    loc.y += pos.height;\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                container.addEventListener('scroll', checkArrowVisibility);\n                container.addEventListener('wheel', function (e) {\n                    if (self.hasFocus) {\n                        container.scrollTop += e.deltaY;\n                        container.scrollLeft += e.deltaX;\n                    }\n                    checkArrowVisibility();\n                });\n                upArrow.innerHTML = self.style.contextMenuArrowUpHTML;\n                downArrow.innerHTML = self.style.contextMenuArrowDownHTML;\n                container.appendChild(upArrow);\n                document.body.appendChild(downArrow);\n                document.body.appendChild(container);\n                rect = container.getBoundingClientRect();\n                if (rect.bottom > window.innerHeight && !(parentContextMenu && parentContextMenu.inputDropdown)) {\n                    loc.y = window.innerHeight - container.offsetHeight;\n                    if (loc.y < 0) { loc.y = 0; }\n                    if (container.offsetHeight > window.innerHeight) {\n                        container.style.height = window.innerHeight - self.style.contextMenuWindowMargin + 'px';\n                    }\n                }\n                if (rect.right > window.innerWidth) {\n                    if (parentContextMenu) {\n                        loc.x = parentContextMenu.container.offsetLeft - container.offsetWidth;\n                    } else {\n                        loc.x = window.innerWidth - container.offsetWidth;\n                    }\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                rect = container.getBoundingClientRect();\n                upArrow.style.top = rect.top + 'px';\n                downArrow.style.top = rect.top + rect.height - downArrow.offsetHeight + 'px';\n                upArrow.style.left = rect.left + 'px';\n                downArrow.style.left = rect.left + 'px';\n                downArrow.style.width = container.offsetWidth + 'px';\n                upArrow.style.width = container.offsetWidth + 'px';\n                downArrow.addEventListener('mouseover', startHoverScroll('down'));\n                downArrow.addEventListener('mouseout', endHoverScroll('down'));\n                upArrow.addEventListener('mouseover', startHoverScroll('up'));\n                upArrow.addEventListener('mouseout', endHoverScroll('up'));\n                checkArrowVisibility();\n            }\n            intf.parentGrid = self.intf;\n            intf.parentContextMenu = parentContextMenu;\n            intf.container = container;\n            init();\n            intf.clickIndex = clickIndex;\n            intf.rect = rect;\n            intf.items = items;\n            intf.dispose = function () {\n                clearTimeout(hoverScrollTimeout);\n                children.forEach(function (c) {\n                    c.dispose();\n                });\n                [downArrow, upArrow, container].forEach(function (el) {\n                    if (el.parentNode) { el.parentNode.removeChild(el); }\n                });\n            };\n            Object.defineProperty(intf, 'selectedIndex', {\n                get: function () {\n                    return selectedIndex;\n                },\n                set: function (value) {\n                    if (typeof value !== 'number' || isNaN(value || !isFinite(value))) {\n                        throw new Error('Context menu selected index must be a sane number.');\n                    }\n                    selectedIndex = value;\n                    if (selectedIndex > items.length - 1) {\n                        selectedIndex = items.length - 1;\n                    }\n                    if (selectedIndex < 0) {\n                        selectedIndex = 0;\n                    }\n                    items.forEach(function (item, index) {\n                        if (index === selectedIndex) {\n                            return self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                        }\n                        self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item');\n                    });\n                }\n            });\n            return intf;\n        }\n        function createFilterContextMenuItems(e) {\n            var filterContainer = document.createElement('div'),\n                filterLabel = document.createElement('div'),\n                filterAutoCompleteButton = document.createElement('button'),\n                filterInput = document.createElement('input'),\n                n = e.cell && e.cell.header ? e.cell.header.title || e.cell.header.name : '',\n                autoCompleteItems,\n                iRect;\n            function fillAutoComplete() {\n                autoCompleteItems = {};\n                self.data.forEach(function (row) {\n                    var value = row[e.cell.header.name];\n                    if (autoCompleteItems[value]) { return; }\n                    autoCompleteItems[value] = {\n                        title: self.formatters[e.cell.header.type || 'string']({ cell: { value: value }}),\n                        click: function (e) {\n                            filterInput.value = value;\n                            e.stopPropagation();\n                            filterInput.dispatchEvent(new Event('keyup'));\n                            self.disposeAutocomplete();\n                            return;\n                        }\n                    };\n                });\n                autoCompleteItems = Object.keys(autoCompleteItems).map(function (key) {\n                    return autoCompleteItems[key];\n                });\n            }\n            function createAutoCompleteContext(ev) {\n                if (ev && [40, 38, 13, 9, 27].indexOf(ev.keyCode) !== -1) { return; }\n                fillAutoComplete();\n                iRect = filterInput.getBoundingClientRect();\n                if (autoCompleteContext) {\n                    autoCompleteContext.dispose();\n                    autoCompleteContext = undefined;\n                }\n                autoCompleteContext = createContextMenu(e, {\n                    left: iRect.left,\n                    top: iRect.top,\n                    right: iRect.right,\n                    bottom: iRect.bottom,\n                    height: iRect.height,\n                    width: iRect.width\n                }, autoCompleteItems, {inputDropdown: true});\n                autoCompleteContext.selectedIndex = 0;\n            }\n            self.createInlineStyle(filterLabel, 'canvas-datagrid-context-menu-label');\n            self.createInlineStyle(filterAutoCompleteButton, 'canvas-datagrid-context-menu-filter-button');\n            self.createInlineStyle(filterInput, 'canvas-datagrid-context-menu-filter-input');\n            filterInput.onclick = self.disposeAutocomplete;\n            filterInput.addEventListener('keydown', function (e) {\n                //down\n                if (e.keyCode === 40) {\n                    autoCompleteContext.selectedIndex += 1;\n                }\n                //up\n                if (e.keyCode === 38) {\n                    autoCompleteContext.selectedIndex -= 1;\n                }\n                //enter\n                if (e.keyCode === 13) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    self.disposeContextMenu();\n                }\n                //tab\n                if (e.keyCode === 9) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    e.preventDefault();\n                }\n                //esc\n                if (e.keyCode === 27) {\n                    self.disposeContextMenu();\n                }\n            });\n            filterInput.addEventListener('keyup', function () {\n                self.setFilter(e.cell.header.name, filterInput.value);\n            });\n            filterInput.addEventListener('keyup', createAutoCompleteContext);\n            filterInput.value = self.columnFilters[e.cell.header.name] || '';\n            filterLabel.innerHTML = self.attributes.filterOptionText.replace(/%s/g, n);\n            filterAutoCompleteButton.onclick = function () {\n                if (autoCompleteContext) {\n                    return self.disposeAutocomplete();\n                }\n                createAutoCompleteContext();\n            };\n            filterAutoCompleteButton.innerHTML = self.style.contextFilterButtonHTML;\n            filterContainer.addEventListener('click', function (e) {\n                return e.stopPropagation();\n            });\n            filterContainer.appendChild(filterLabel);\n            filterContainer.appendChild(filterInput);\n            filterContainer.appendChild(filterAutoCompleteButton);\n            e.items.push({\n                title: filterContainer\n            });\n            if (Object.keys(self.columnFilters).length) {\n                Object.keys(self.columnFilters).forEach(function (cf) {\n                    var h = self.getHeaderByName(cf);\n                    e.items.push({\n                        title: self.attributes.removeFilterOptionText.replace(/%s/g, h.title || h.name),\n                        click: function removeFilterClick(e) {\n                            e.preventDefault();\n                            self.setFilter(cf, '');\n                            self.controlInput.focus();\n                        }\n                    });\n                });\n            }\n        }\n        function addDefaultContextMenuItem(e) {\n            var isNormalCell = !(e.cell.isBackground || e.cell.isHeaderCellCap\n                            || e.cell.isScrollBar || e.cell.isCorner || e.cell.isRowHeader);\n            if (self.attributes.showFilter && isNormalCell) {\n                createFilterContextMenuItems(e);\n            }\n            if (self.attributes.showCopy\n                    && self.selections.reduce(function (p, r) {\n                        return p + r.length;\n                    }, 0) > 0) {\n                e.items.push({\n                    title: self.attributes.copyText,\n                    click: function () {\n                        document.execCommand('copy');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.saveAppearance && self.attributes.showClearSettingsOption\n                    && (Object.keys(self.sizes.rows).length > 0\n                        || Object.keys(self.sizes.columns).length > 0)) {\n                e.items.push({\n                    title: self.attributes.clearSettingsOptionText,\n                    click: function (e) {\n                        e.preventDefault();\n                        self.sizes.rows = {};\n                        self.sizes.columns = {};\n                        self.createRowOrders();\n                        self.createColumnOrders();\n                        self.storedSettings = undefined;\n                        self.dispatchEvent('resizecolumn', {columnWidth: self.style.columnWidth});\n                        self.dispatchEvent('resizerow', {cellHeight: self.style.cellHeight});\n                        self.setStorageData();\n                        self.resize(true);\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.allowSorting && self.attributes.showOrderByOption && isNormalCell) {\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextAsc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'asc');\n                        self.controlInput.focus();\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextDesc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'desc');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n        }\n        self.disposeAutocomplete = function () {\n            if (autoCompleteContext) {\n                autoCompleteContext.dispose();\n                autoCompleteContext = undefined;\n            }\n        };\n        self.disposeContextMenu = function () {\n            document.removeEventListener('click', self.disposeContextMenu);\n            zIndexTop = 2;\n            self.disposeAutocomplete();\n            if (self.contextMenu) {\n                self.contextMenu.dispose();\n            }\n            self.contextMenu = undefined;\n        };\n        self.contextmenuEvent = function (e, overridePos) {\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            var items = [],\n                pos = overridePos || self.getLayerPos(e, true),\n                ev = {\n                    NativeEvent: e,\n                    cell: self.getCellAt(pos.x, pos.y),\n                    items: items\n                };\n            if (!ev.cell.isGrid) {\n                addDefaultContextMenuItem(ev);\n            }\n            if (self.dispatchEvent('contextmenu', ev)) {\n                return;\n            }\n            if (!ev.cell.isGrid) {\n                if (self.contextMenu) {\n                    self.disposeContextMenu();\n                }\n                self.contextMenu = createContextMenu(ev, {\n                    left: pos.x + pos.rect.left + self.style.contextMenuMarginLeft + self.canvasOffsetLeft,\n                    top: pos.y + pos.rect.top + self.style.contextMenuMarginTop + self.canvasOffsetTop,\n                    right: ev.cell.width + ev.cell.x + pos.rect.left,\n                    bottom: ev.cell.height + ev.cell.y + pos.rect.top,\n                    height: ev.cell.height,\n                    width: ev.cell.width\n                }, items);\n                document.addEventListener('click', self.disposeContextMenu);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        self.defaults = {\n            attributes: [\n                ['name', ''],\n                ['tree', false],\n                ['showNewRow', false],\n                ['treeHorizontalScroll', false],\n                ['saveAppearance', true],\n                ['selectionFollowsActiveCell', false],\n                ['multiLine', false],\n                ['editable', true],\n                ['allowColumnReordering', true],\n                ['allowRowReordering', false],\n                ['allowSorting', true],\n                ['showFilter', true],\n                ['globalRowResize', false],\n                ['pageUpDownOverlap', 1],\n                ['persistantSelectionMode', false],\n                ['rowSelectionMode', false],\n                ['autoResizeColumns', false],\n                ['allowRowHeaderResize', true],\n                ['allowColumnResize', true],\n                ['allowRowResize', true],\n                ['allowRowResizeFromCell', false],\n                ['allowColumnResizeFromCell', false],\n                ['debug', false],\n                ['borderResizeZone', 10],\n                ['showColumnHeaders', true],\n                ['showRowNumbers', true],\n                ['showRowHeaders', true],\n                ['scrollRepeatRate', 75],\n                ['selectionScrollZone', 20],\n                ['resizeScrollZone', 20],\n                ['contextHoverScrollRateMs', 5],\n                ['contextHoverScrollAmount', 2],\n                ['selectionScrollIncrement', 20],\n                ['reorderDeadZone', 3],\n                ['showClearSettingsOption', true],\n                ['showOrderByOption', true],\n                ['clearSettingsOptionText', 'Clear saved settings'],\n                ['showOrderByOptionTextAsc', 'Order by %s ascending'],\n                ['showOrderByOptionTextDesc', 'Order by %s descending'],\n                ['removeFilterOptionText', 'Remove filter on %s'],\n                ['filterOptionText', 'Filter %s'],\n                ['filterTextPrefix', '(filtered) '],\n                ['touchReleaseAnimationDurationMs', 1000],\n                ['touchReleaseAcceleration', 30],\n                ['touchDeadZone', 3],\n                ['touchSelectTimeMs', 800],\n                ['touchScrollZone', 40],\n                ['copyText', 'Copy'],\n                ['showCopy', true],\n                ['columnHeaderClickBehavior', 'sort'],\n                ['scrollPointerLock', true]\n            ],\n            styles: [\n                ['activeCellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['activeCellBorderWidth', 0.25],\n                ['activeCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellFont', '16px sans-serif'],\n                ['activeCellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['activeCellOverlayBorderWidth', 0.5],\n                ['activeCellPaddingBottom', 5],\n                ['activeCellPaddingLeft', 5],\n                ['activeCellPaddingRight', 7],\n                ['activeCellPaddingTop', 5],\n                ['activeCellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['activeCellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['activeColumnHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeColumnHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeRowHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeRowHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['autocompleteBottomMargin', 60],\n                ['autosizeHeaderCellPadding', 8],\n                ['autosizePadding', 5],\n                ['backgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cellAutoResizePadding', 13],\n                ['cellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['cellBorderWidth', 0.5],\n                ['cellColor', 'rgba(0, 0, 0, 1)'],\n                ['cellFont', '16px sans-serif'],\n                ['cellHeight', 24],\n                ['cellHeightWithChildGrid', 150],\n                ['cellHorizontalAlignment', 'left'],\n                ['cellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['cellPaddingBottom', 5],\n                ['cellPaddingLeft', 5],\n                ['cellPaddingRight', 7],\n                ['cellPaddingTop', 5],\n                ['cellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['cellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['cellVerticalAlignment', 'center'],\n                ['cellWidthWithChildGrid', 250],\n                ['childContextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['childContextMenuArrowHTML', '&#x25BA;'],\n                ['childContextMenuMarginLeft', -15],\n                ['childContextMenuMarginTop', 0],\n                ['columnHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellBorderColor', 'rgba(152, 152, 152, 1)'],\n                ['columnHeaderCellBorderWidth', 0.25],\n                ['columnHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['columnHeaderCellFont', '16px sans-serif'],\n                ['columnHeaderCellHeight', 25],\n                ['columnHeaderCellHorizontalAlignment', 'left'],\n                ['columnHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['columnHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['columnHeaderCellPaddingBottom', 5],\n                ['columnHeaderCellPaddingLeft', 5],\n                ['columnHeaderCellPaddingRight', 7],\n                ['columnHeaderCellPaddingTop', 5],\n                ['columnHeaderCellVerticalAlignment', 'center'],\n                ['columnWidth', 250],\n                ['contextFilterButtonBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterButtonBorderRadius', '3px'],\n                ['contextFilterButtonHTML', '&#x25BC;'],\n                ['contextFilterInputBackground', 'rgba(255,255,255,1)'],\n                ['contextFilterInputBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterInputBorderRadius', '0'],\n                ['contextFilterInputColor', 'rgba(0,0,0,1)'],\n                ['contextFilterInputFontFamily', 'sans-serif'],\n                ['contextFilterInputFontSize', '14px'],\n                ['contextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuArrowDownHTML', '&#x25BC;'],\n                ['contextMenuArrowUpHTML', '&#x25B2;'],\n                ['contextMenuBackground', 'rgba(240, 240, 240, 1)'],\n                ['contextMenuBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextMenuBorderRadius', '3px'],\n                ['contextMenuChildArrowFontSize', '12px'],\n                ['contextMenuColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuFilterButtonFontFamily', 'sans-serif'],\n                ['contextMenuFilterButtonFontSize', '10px'],\n                ['contextMenuFilterInvalidExpresion', 'rgba(237, 155, 156, 1)'],\n                ['contextMenuFontFamily', 'sans-serif'],\n                ['contextMenuFontSize', '16px'],\n                ['contextMenuHoverBackground', 'rgba(182, 205, 250, 1)'],\n                ['contextMenuHoverColor', 'rgba(43, 48, 153, 1)'],\n                ['contextMenuItemBorderRadius', '3px'],\n                ['contextMenuItemMargin', '2px'],\n                ['contextMenuLabelDisplay', 'inline-block'],\n                ['contextMenuLabelMargin', '0 3px 0 0'],\n                ['contextMenuLabelMaxWidth', '700px'],\n                ['contextMenuLabelMinWidth', '75px'],\n                ['contextMenuMarginLeft', 3],\n                ['contextMenuMarginTop', -3],\n                ['contextMenuOpacity', '0.98'],\n                ['contextMenuPadding', '2px'],\n                ['contextMenuWindowMargin', 6],\n                ['cornerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cornerCellBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['editCellBackgroundColor', 'white'],\n                ['editCellBorder', 'solid 1px rgba(110, 168, 255, 1)'],\n                ['editCellBoxShadow', '0 2px 5px rgba(0,0,0,0.4)'],\n                ['editCellColor', 'black'],\n                ['editCellFontFamily', 'sans-serif'],\n                ['editCellFontSize', '16px'],\n                ['editCellPaddingLeft', 4],\n                ['gridBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['gridBorderWidth', 1],\n                ['columnHeaderOrderByArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['columnHeaderOrderByArrowBorderWidth', 1],\n                ['columnHeaderOrderByArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['columnHeaderOrderByArrowHeight', 8],\n                ['columnHeaderOrderByArrowMarginLeft', 0],\n                ['columnHeaderOrderByArrowMarginRight', 5],\n                ['columnHeaderOrderByArrowMarginTop', 6],\n                ['columnHeaderOrderByArrowWidth', 13],\n                ['minColumnWidth', 45],\n                ['minHeight', 24],\n                ['minRowHeight', 24],\n                ['name', 'default'],\n                ['reorderMarkerBackgroundColor', 'rgba(0, 0, 0, 0.1)'],\n                ['reorderMarkerBorderColor', 'rgba(0, 0, 0, 0.2)'],\n                ['reorderMarkerBorderWidth', 1.25],\n                ['reorderMarkerIndexBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['reorderMarkerIndexBorderWidth', 2.75],\n                ['rowHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['rowHeaderCellBorderColor', 'rgba(200, 200, 200, 1)'],\n                ['rowHeaderCellBorderWidth', 1],\n                ['rowHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellFont', '16px sans-serif'],\n                ['rowHeaderCellHeight', 25],\n                ['rowHeaderCellHorizontalAlignment', 'left'],\n                ['rowHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['rowHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['rowHeaderCellPaddingBottom', 5],\n                ['rowHeaderCellPaddingLeft', 5],\n                ['rowHeaderCellPaddingRight', 5],\n                ['rowHeaderCellPaddingTop', 5],\n                ['rowHeaderCellSelectedBackgroundColor', 'rgba(217, 217, 217, 1)'],\n                ['rowHeaderCellSelectedColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellVerticalAlignment', 'center'],\n                ['rowHeaderCellWidth', 57],\n                ['scrollBarActiveColor', 'rgba(125, 125, 125, 1)'],\n                ['scrollBarBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarBorderWidth', 0.5],\n                ['scrollBarBoxBorderRadius', 4.125],\n                ['scrollBarBoxColor', 'rgba(192, 192, 192, 1)'],\n                ['scrollBarBoxMargin', 2],\n                ['scrollBarBoxMinSize', 15],\n                ['scrollBarBoxWidth', 8],\n                ['scrollBarCornerBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarCornerBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarWidth', 11],\n                ['selectionOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionOverlayBorderWidth', 0.75],\n                ['treeArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['treeArrowBorderWidth', 1],\n                ['treeArrowClickRadius', 5],\n                ['treeArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['treeArrowHeight', 8],\n                ['treeArrowMarginLeft', 0],\n                ['treeArrowMarginRight', 5],\n                ['treeArrowMarginTop', 6],\n                ['treeArrowWidth', 13],\n                ['treeGridHeight', 250]\n            ]\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        self.createInlineStyle = function (el, className) {\n            var css = {\n                'canvas-datagrid-context-menu-filter-input': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextFilterInputBackground,\n                    color: self.style.contextFilterInputColor,\n                    border: self.style.contextFilterInputBorder,\n                    borderRadius: self.style.contextFilterInputBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextFilterInputFontFamily,\n                    fontSize: self.style.contextFilterInputFontSize\n                },\n                'canvas-datagrid-context-menu-filter-button': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextFilterButtonBorder,\n                    borderRadius: self.style.contextFilterButtonBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFilterButtonFontFamily,\n                    fontSize: self.style.contextMenuFilterButtonFontSize\n                },\n                'canvas-datagrid-context-child-arrow': {\n                    cssFloat: 'right',\n                    color: self.style.childContextMenuArrowColor,\n                    fontSize: self.style.contextMenuChildArrowFontSize,\n                    fontFamily: self.style.contextMenuFontFamily,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-autocomplete': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    position: 'absolute',\n                    zIndex: 3,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-autocomplete-item': {\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor\n                },\n                'canvas-datagrid-autocomplete-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-canvas': {\n                    position: 'absolute',\n                    zIndex: '-1'\n                },\n                'canvas-datagrid': {\n                    position: 'absolute',\n                    background: self.style.backgroundColor,\n                    zIndex: '1',\n                    boxSizing: 'content-box',\n                    padding: '0'\n                },\n                'canvas-datagrid-control-input': {\n                    position: 'fixed',\n                    top: '-5px',\n                    left: '-5px',\n                    border: 'none',\n                    opacity: '0',\n                    cursor: 'pointer',\n                    width: '1px',\n                    height: '1px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize\n                },\n                'canvas-datagrid-edit-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 ' + self.style.editCellPaddingLeft + 'px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.editCellFontFamily,\n                    fontSize: self.style.editCellFontSize,\n                    boxShadow: self.style.editCellBoxShadow,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-context-menu-item': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-context-menu-label': {\n                    margin: self.style.contextMenuLabelMargin,\n                    display: self.style.contextMenuLabelDisplay,\n                    minWidth: self.style.contextMenuLabelMinWidth,\n                    maxWidth: self.style.contextMenuLabelMaxWidth\n                },\n                'canvas-datagrid-context-menu': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-invalid-search-regExp': {\n                    background: self.style.contextMenuFilterInvalidExpresion\n                }\n            };\n            if (css[className]) {\n                Object.keys(css[className]).map(function (prop) {\n                    el.style[prop] = css[className][prop];\n                });\n            }\n            return;\n        };\n        self.appendTo = function (n) {\n            self.parentNode = n;\n            self.height = self.parentNode.offsetHeight;\n            self.width = self.parentNode.offsetWidth;\n            if (self.parentNode && /canvas-datagrid-(cell|tree)/.test(self.parentNode.nodeType)) {\n                self.isChildGrid = true;\n                self.parentGrid = self.parentNode.parentGrid;\n                self.ctx = self.parentGrid.context;\n                self.canvas = self.parentGrid.canvas;\n                self.controlInput = self.parentGrid.controlInput;\n                self.eventParent = self.canvas;\n                self.intf.offsetParent = self.parentNode;\n            } else {\n                self.controlInput = document.createElement('input');\n                self.controlInput.onblur = self.intf.blur;\n                self.createInlineStyle(self.controlInput, 'canvas-datagrid-control-input');\n                self.isChildGrid = false;\n                self.parentDOMNode = self.parentNode;\n                self.parentNode = self.parentDOMNode;\n                self.parentIsCanvas = /canvas/i.test(self.parentDOMNode.tagName);\n                if (self.parentIsCanvas) {\n                    self.canvas = self.parentDOMNode;\n                } else {\n                    self.canvas = document.createElement('canvas');\n                    self.parentDOMNode.appendChild(self.canvas);\n                }\n                self.ctx = self.canvas.getContext('2d');\n                self.ctx.textBaseline = 'alphabetic';\n                document.body.appendChild(self.controlInput);\n                self.eventParent = self.canvas;\n            }\n            self.controlInput.addEventListener('blur', function (e) {\n                if (e.target !== self.canvas) {\n                    self.hasFocus = false;\n                }\n            });\n            window.addEventListener('resize', self.resize);\n            if (MutationObserver) {\n                self.observer = new MutationObserver(function (mutations) {\n                    mutations.forEach(function (mutation) {\n                        self.resize(true);\n                    });\n                });\n                [self.canvas.parentNode].forEach(function (el) {\n                    self.observer.observe(el, { attributes: true });\n                });\n            }\n            self.eventParent.addEventListener('scroll', self.resize, false);\n            self.eventParent.addEventListener('touchstart', self.touchstart, false);\n            self.eventParent.addEventListener('mouseup', self.mouseup, false);\n            self.eventParent.addEventListener('mousedown', self.mousedown, false);\n            self.eventParent.addEventListener('dblclick', self.dblclick, false);\n            self.eventParent.addEventListener('click', self.click, false);\n            self.eventParent.addEventListener('mousemove', self.mousemove);\n            self.eventParent.addEventListener('wheel', self.scrollWheel, false);\n            self.canvas.addEventListener('contextmenu', self.contextmenuEvent, false);\n            (self.isChildGrid ? self.parentGrid : document).addEventListener('copy', self.copy);\n            self.controlInput.addEventListener('keypress', self.keypress, false);\n            self.controlInput.addEventListener('keyup', self.keyup, false);\n            self.controlInput.addEventListener('keydown', self.keydown, false);\n        };\n        self.setDom = function () {\n            self.appendTo(self.args.parentNode);\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        // all methods here are exposed by intf\n        // to users\n        /**\n         * Converts a integer into a letter A - ZZZZZ...\n         * @memberof canvasDataGrid\n         * @name integerToAlpha\n         * @method\n         * @param {column} n The number to convert.\n         */\n        self.integerToAlpha = function (n) {\n            var ordA = 'a'.charCodeAt(0),\n                ordZ = 'z'.charCodeAt(0),\n                len = ordZ - ordA + 1,\n                s = '';\n            while (n >= 0) {\n                s = String.fromCharCode(n % len + ordA) + s;\n                n = Math.floor(n / len) - 1;\n            }\n            return s;\n        };\n        /**\n         * Inserts a new column before the specified index into the schema.\n         * @see canvasDataGrid#schema\n         * @tutorial schema\n         * @memberof canvasDataGrid\n         * @name insertColumn\n         * @method\n         * @param {column} c The column to insert into the schema.\n         * @param {number} index The index of the column to insert before.\n         */\n        self.insertColumn = function (c, index) {\n            var s = self.getSchema();\n            if (s.length < index) {\n                throw new Error('Index is beyond the length of the schema.');\n            }\n            self.validateColumn(c, s);\n            s.splice(index, 0, c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a column from the schema at the specified index.\n         * @memberof canvasDataGrid\n         * @name deleteColumn\n         * @tutorial schema\n         * @method\n         * @param {number} index The index of the column to delete.\n         */\n        self.deleteColumn = function (index) {\n            var s = self.getSchema();\n            // remove data matching this column name from data\n            self.data.forEach(function (row) {\n                delete row[s[index].name];\n            });\n            s.splice(index, 1);\n            self.intf.schema = s;\n        };\n        /**\n         * Adds a new column into the schema.\n         * @see canvasDataGrid#schema\n         * @tutorial schema\n         * @memberof canvasDataGrid\n         * @name addColumn\n         * @method\n         * @param {column} c The column to add to the schema.\n         */\n        self.addColumn = function (c) {\n            var s = self.getSchema();\n            self.validateColumn(c, s);\n            s.push(c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a row from the dataset at the specified index.\n         * @memberof canvasDataGrid\n         * @name deleteRow\n         * @method\n         * @param {number} index The index of the row to delete.\n         */\n        self.deleteRow = function (index) {\n            self.originalData.splice(index, 1);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Inserts a new row into the dataset before the specified index.\n         * @memberof canvasDataGrid\n         * @name insertRow\n         * @method\n         * @param {object} d data.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertRow = function (d, index) {\n            if (self.originalData.length < index) {\n                throw new Error('Index is beyond the length of the dataset.');\n            }\n            self.originalData.splice(index, 0, d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[index], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Adds a new row into the dataset.\n         * @memberof canvasDataGrid\n         * @name addRow\n         * @method\n         * @param {object} d data.\n         */\n        self.addRow = function (d) {\n            self.originalData.push(d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[self.originalData.length - 1], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Sets the height of a given row by index number.\n         * @memberof canvasDataGrid\n         * @name setRowHeight\n         * @method\n         * @param {number} rowIndex The index of the row to set.\n         * @param {number} height Height to set the row to.\n         */\n        self.setRowHeight = function (rowIndex, height) {\n            self.sizes.rows[self.data[rowIndex][self.uniqueId]] = height;\n            self.draw(true);\n        };\n        /**\n         * Sets the width of a given column by index number.\n         * @memberof canvasDataGrid\n         * @name setColumnWidth\n         * @method\n         * @param {number} colIndex The index of the column to set.\n         * @param {number} width Width to set the column to.\n         */\n        self.setColumnWidth = function (colIndex, width) {\n            var s = self.getSchema();\n            self.sizes.columns[s[colIndex][self.uniqueId]] = width;\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the width of the columns due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDataGrid\n         * @name resetColumnWidths\n         * @tutorial schema\n         * @method\n         */\n        self.resetColumnWidths = function () {\n            self.sizes.columns = {};\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the height of the rows due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDataGrid\n         * @name resetRowHeights\n         * @tutorial schema\n         * @method\n         */\n        self.resetRowHeights = function () {\n            self.sizes.rows = {};\n            self.draw(true);\n        };\n        /**\n         * Sets the value of the filter.\n         * @memberof canvasDataGrid\n         * @name setFilter\n         * @method\n         * @param {string} column Name of the column to filter.\n         * @param {string} value The value to filter for.\n         */\n        self.setFilter = function (column, value) {\n            function applyFilter() {\n                self.refreshFromOrigialData();\n                Object.keys(self.columnFilters).forEach(function (filter) {\n                    var header = self.getHeaderByName(column);\n                    if (!header) {\n                        return;\n                    }\n                    self.currentFilter = header.filter || self.filter(column.type || 'string');\n                    self.data = self.data.filter(function (row) {\n                        return self.currentFilter(row[filter], self.columnFilters[filter]);\n                    });\n                });\n                self.resize();\n                self.draw(true);\n            }\n            if (self.coulumn === undefined && value === undefined) {\n                return applyFilter();\n            }\n            if (column && (value === '' || value === undefined)) {\n                delete self.columnFilters[column];\n            } else {\n                self.columnFilters[column] = value;\n            }\n            applyFilter();\n        };\n        /**\n         * Returns the number of pixels to scroll down to line up with row rowIndex.\n         * @memberof canvasDataGrid\n         * @name findRowScrollTop\n         * @method\n         * @param {number} rowIndex The row index of the row to scroll find.\n         */\n        self.findRowScrollTop = function (rowIndex) {\n            var top = 0, x = 0, l = self.data.length,\n                cellBorder = self.style.cellBorderWidth * 2;\n            if (!self.attributes.showNewRow) {\n                l -= 1;\n            }\n            if (rowIndex > l) {\n                throw new Error('Impossible row index');\n            }\n            while (x < rowIndex) {\n                top += (self.sizes.rows[self.data[x][self.uniqueId]] || self.style.cellHeight) + cellBorder;\n                x += 1;\n            }\n            //TODO: This is not super accurate, causes pageUp/Dn to not move around right\n            return top - (self.sizes.rows[self.data[rowIndex][self.uniqueId]] || self.style.cellHeight);\n        };\n        /**\n         * Returns the number of pixels to scroll to the left to line up with column columnIndex.\n         * @memberof canvasDataGrid\n         * @name findColumnScrollLeft\n         * @method\n         * @param {number} columnIndex The column index of the column to find.\n         */\n        self.findColumnScrollLeft = function (columnIndex) {\n            var left = 0, y = 0, s = self.getSchema(), l = s.length - 1;\n            if (columnIndex > l) {\n                throw new Error('Impossible column index');\n            }\n            while (y < columnIndex) {\n                left += self.sizes.columns[s[y][self.uniqueId]] || s[y].width;\n                y += 1;\n            }\n            return left;\n        };\n        /**\n         * Scrolls the cell at cell x, row y.\n         * @memberof canvasDataGrid\n         * @name gotoCell\n         * @method\n         * @param {number} x The column index of the cell to scroll to.\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoCell = function (x, y) {\n            if (x !== undefined) {\n                self.scrollBox.scrollLeft = self.findColumnScrollLeft(x);\n            }\n            if (y !== undefined) {\n                self.scrollBox.scrollTop = self.findRowScrollTop(y);\n            }\n        };\n        /**\n         * Scrolls the row y.\n         * @memberof canvasDataGrid\n         * @name gotoRow\n         * @method\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoRow = function (y) {\n            self.gotoCell(0, y);\n        };\n        /**\n         * Scrolls the cell at cell x, row y into view if it is not already.\n         * @memberof canvasDataGrid\n         * @name scrollIntoView\n         * @method\n         * @param {number} x The column index of the cell to scroll into view.\n         * @param {number} y The row index of the cell to scroll into view.\n         */\n        self.scrollIntoView = function (x, y) {\n            if (self.visibleCells.filter(function (cell) {\n                    return (cell.rowIndex === y || y === undefined)\n                        && (cell.columnIndex === x || x === undefined)\n                        && cell.x > 0\n                        && cell.y > 0\n                        && cell.x + cell.width < self.width\n                        && cell.y + cell.height < self.height;\n                }).length === 0) {\n                self.gotoCell(x, y);\n            }\n        };\n        /**\n         * Sets the active cell. Requires redrawing.\n         * @memberof canvasDataGrid\n         * @name setActiveCell\n         * @method\n         * @param {number} x The column index of the cell to set active.\n         * @param {number} y The row index of the cell to set active.\n         */\n        self.setActiveCell = function (x, y) {\n            self.activeCell = {\n                rowIndex: y,\n                columnIndex: x\n            };\n        };\n        /**\n         * Selects every visible cell.\n         * @memberof canvasDataGrid\n         * @name selectAll\n         * @method\n         */\n        self.selectAll = function () {\n            self.selectArea({\n                top: 0,\n                left: 0,\n                right: self.getVisibleSchema().length - 1,\n                bottom: self.data.length - 1\n            });\n        };\n        /**\n         * Returns true if the selected columnIndex is selected on every row.\n         * @memberof canvasDataGrid\n         * @name isColumnSelected\n         * @method\n         * @param {number} columnIndex The column index to check.\n         */\n        self.isColumnSelected = function (columnIndex) {\n            var colIsSelected = true;\n            self.data.forEach(function (row, rowIndex) {\n                if (!self.selections[rowIndex] || self.selections[rowIndex].indexOf(self.orders.columns[columnIndex]) === -1) {\n                    colIsSelected = false;\n                }\n            });\n            return colIsSelected;\n        };\n        /**\n         * Selects a column.\n         * @memberof canvasDataGrid\n         * @name selectColumn\n         * @method\n         * @param {number} columnIndex The column index to select.\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the column.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the column.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectColumn = function (columnIndex, ctrl, shift, supressEvent) {\n            var s, e, x;\n            function addCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) === -1) {\n                        self.selections[rowIndex].push(i);\n                    }\n                });\n            }\n            function removeCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) !== -1) {\n                        self.selections[rowIndex].splice(self.selections[rowIndex].indexOf(i), 1);\n                    }\n                });\n            }\n            if (shift) {\n                if (!self.activeCell) { return; }\n                s = Math.min(self.activeCell.columnIndex, columnIndex);\n                e = Math.max(self.activeCell.columnIndex, columnIndex);\n                for (x = s; e > x; x += 1) {\n                    addCol(x);\n                }\n            }\n            if (!ctrl && !shift) {\n                self.selections = [];\n                self.activeCell.columnIndex = columnIndex;\n                self.activeCell.rowIndex = self.scrollIndexTop;\n            }\n            if (self.dragAddToSelection === true) {\n                if (ctrl && self.isColumnSelected(columnIndex)) {\n                    removeCol(columnIndex);\n                } else {\n                    addCol(columnIndex);\n                }\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Selects a row.\n         * @memberof canvasDataGrid\n         * @name selectRow\n         * @method\n         * @param {number} rowIndex The row index to select.\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the row.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectRow = function (rowIndex, ctrl, supressEvent) {\n            var s = self.getSchema();\n            if (self.dragAddToSelection === false) {\n                if (self.selections[rowIndex] && self.selections[rowIndex].length - 1 === s.length) {\n                    if (ctrl) {\n                        self.selections[rowIndex] = [];\n                        return;\n                    }\n                }\n            }\n            if (self.dragAddToSelection === true) {\n                self.selections[rowIndex] = [];\n                self.selections[rowIndex].push(-1);\n                s.forEach(function (col) {\n                    self.selections[rowIndex].push(col.index);\n                });\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Collapse a tree grid by row index.\n         * @memberof canvasDataGrid\n         * @name collapseTree\n         * @method\n         * @param {number} index The index of the row to collapse.\n         */\n        self.collapseTree = function (rowIndex) {\n            var rowId = self.data[rowIndex][self.uniqueId];\n            self.dispatchEvent('collapsetree', {\n                childGrid: self.childGrids[rowId],\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId].blur();\n            self.openChildren[rowId].dispose();\n            delete self.openChildren[rowId];\n            delete self.sizes.trees[rowId];\n            delete self.childGrids[rowId];\n            self.dispatchEvent('resizerow', {\n                cellHeight: self.style.cellHeight\n            });\n            self.resize(true);\n            self.draw(true);\n        };\n        /**\n         * Expands a tree grid by row index.\n         * @memberof canvasDataGrid\n         * @name expandTree\n         * @method\n         * @param {number} index The index of the row to expand.\n         */\n        self.expandTree = function (rowIndex) {\n            var rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth,\n                rowId = self.data[rowIndex][self.uniqueId],\n                h = self.sizes.trees[rowId] || self.style.treeGridHeight,\n                treeGrid;\n            if (!self.childGrids[rowId]) {\n                treeGrid = self.createGrid({\n                    debug: self.attributes.debug,\n                    name: self.attributes.saveAppearance\n                        ? self.attributes.name + 'tree' + rowId : undefined,\n                    parentNode: {\n                        parentGrid: self.intf,\n                        nodeType: 'canvas-datagrid-tree',\n                        offsetHeight: h,\n                        offsetWidth: self.width - columnHeaderCellWidth,\n                        header: { width: self.width - columnHeaderCellWidth },\n                        offsetLeft: columnHeaderCellWidth,\n                        offsetTop: rowHeaderCellHeight,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: 'tree',\n                        data: self.data[rowIndex]\n                    }\n                });\n                self.childGrids[rowId] = treeGrid;\n            }\n            treeGrid = self.childGrids[rowId];\n            treeGrid.visible = true;\n            self.dispatchEvent('expandtree', {\n                treeGrid: treeGrid,\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId] = treeGrid;\n            self.sizes.trees[rowId] = h;\n            self.dispatchEvent('resizerow', {height: self.style.cellHeight});\n            self.resize(true);\n        };\n        /**\n         * Toggles tree grid open and close by row index.\n         * @memberof canvasDataGrid\n         * @name toggleTree\n         * @method\n         * @param {number} index The index of the row to toggle.\n         */\n        self.toggleTree = function (rowIndex) {\n            var i = self.openChildren[self.data[rowIndex][self.uniqueId]];\n            if (i) {\n                return self.collapseTree(rowIndex);\n            }\n            self.expandTree(rowIndex);\n        };\n        /**\n         * Returns a header from the schema by name.\n         * @memberof canvasDataGrid\n         * @name getHeaderByName\n         * @tutorial schema\n         * @method\n         * @returns {header} header with the selected name, or undefined.\n         * @param {string} name The name of the column to resize.\n         */\n        self.getHeaderByName = function (name) {\n            var x, i = self.getSchema();\n            for (x = 0; x < i.length; x += 1) {\n                if (i[x].name === name) {\n                    return i[x];\n                }\n            }\n        };\n        /**\n         * Resizes a column to fit the longest value in the column. Call without a value to resize all columns.\n         * Warning, can be slow on very large record sets (1m records ~3-5 seconds on an i7).\n         * @memberof canvasDataGrid\n         * @name fitColumnToValues\n         * @method\n         * @param {string} name The name of the column to resize.\n         */\n        self.fitColumnToValues = function (name) {\n            self.sizes.columns[name === 'cornerCell' ? name : self.getHeaderByName(name)[self.uniqueId]]\n                = self.findColumnMaxTextLength(name);\n            self.resize();\n            self.draw(true);\n        };\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDataGrid\n         * @name isCellVisible\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {cell} cell The cell to check for.  Alternatively you can pass an object { x: <x-index>, y: <y-index> }.\n         */\n        self.isCellVisible = function (cell) {\n            var x, l = self.visibleCells.length;\n            for (x = 0; x < l; x += 1) {\n                if (cell.x === self.visibleCells[x].x && cell.y === self.visibleCells[x].y) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n         * Sets the order of the data.\n         * @memberof canvasDataGrid\n         * @name order\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} columnName Number of pixels from the left.\n         * @param {string} direction `asc` for ascending or `desc` for descending.\n         * @param {bool} dontSetStorageData Don't store this setting for future use.\n         */\n        self.order = function (columnName, direction, dontSetStorageData) {\n            var f,\n                c = self.getSchema().filter(function (col) {\n                    return col.name === columnName;\n                });\n            self.orderBy = columnName;\n            if (c.length === 0) {\n                throw new Error('Cannot sort.  No such column name');\n            }\n            f = self.sorters[c[0].type];\n            if (!f && c[0].type !== undefined) {\n                console.warn('Cannot sort type \"%s\" falling back to string sort.', c[0].type);\n            }\n            self.data = self.data.sort(typeof f === 'function' ? f(columnName, direction) : self.sorters.string);\n            self.dispatchEvent('ordercolumn', {name: columnName, direction: direction});\n            self.draw(true);\n            if (dontSetStorageData) { return; }\n            self.setStorageData();\n        };\n        self.isInGrid = function (e) {\n            if (e.x < 0\n                    || e.x > self.width\n                    || e.y < 0\n                    || e.y > self.height) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Gets the cell at columnIndex and rowIndex.\n         * @memberof canvasDataGrid\n         * @name getVisibleCellByIndex\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Column index.\n         * @param {number} y Row index.\n         */\n        self.getVisibleCellByIndex = function (x, y) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === x && c.rowIndex === y;\n            })[0];\n        };\n        /**\n         * Gets the cell at grid pixel coordinate x and y.\n         * @memberof canvasDataGrid\n         * @name getCellAt\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Number of pixels from the left.\n         * @param {number} y Number of pixels from the top.\n         */\n        self.getCellAt = function (x, y, useTouchScrollZones) {\n            var tsz = useTouchScrollZones ? self.attributes.touchScrollZone : 0, i, l = self.visibleCells.length, cell;\n            if (!self.visibleCells || !self.visibleCells.length) { return; }\n            self.hasFocus = true;\n            if (!(y < self.height\n                && y > 0\n                && x < self.width\n                && x > 0)) {\n                self.hasFocus = false;\n                return {\n                    dragContext: 'inherit',\n                    context: 'inherit'\n                };\n            }\n            for (i = 0; i < l; i += 1) {\n                cell = self.visibleCells[i];\n                if (useTouchScrollZones && /(vertical|horizontal)-scroll-/.test(cell.style)) {\n                    cell.x -= tsz;\n                    cell.y -= tsz;\n                    cell.height += tsz;\n                    cell.width += tsz;\n                }\n                if (cell.x - self.style.cellBorderWidth < x\n                        && cell.x + cell.width + self.style.cellBorderWidth > x\n                        && cell.y - self.style.cellBorderWidth < y\n                        && cell.y + cell.height + self.style.cellBorderWidth > y) {\n                    if (/vertical-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'vertical-scroll-box';\n                        cell.context = 'vertical-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isVerticalScrollBar = true;\n                        if (y > self.scrollBox.box.v.y + self.scrollBox.scrollBoxHeight) {\n                            cell.dragContext = 'vertical-scroll-bottom';\n                            cell.context = 'vertical-scroll-bottom';\n                        } else if (y < self.scrollBox.box.v.y) {\n                            cell.dragContext = 'vertical-scroll-top';\n                            cell.context = 'vertical-scroll-top';\n                        }\n                        self.canvas.style.cursor = 'default';\n                        return cell;\n                    }\n                    if (/horizontal-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'horizontal-scroll-box';\n                        cell.context = 'horizontal-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isHorizontalScrollBar = true;\n                        if (x > self.scrollBox.box.h.x + self.scrollBox.scrollBoxWidth) {\n                            cell.dragContext = 'horizontal-scroll-right';\n                            cell.context = 'horizontal-scroll-right';\n                        } else if (x < self.scrollBox.box.h.x) {\n                            cell.dragContext = 'horizontal-scroll-left';\n                            cell.context = 'horizontal-scroll-left';\n                        }\n                        self.canvas.style.cursor = 'default';\n                        return cell;\n                    }\n                    if (cell.x + cell.width - (self.attributes.borderResizeZone * 0.4) < x\n                            && cell.x + cell.width + (self.attributes.borderResizeZone * 0.6) > x\n                            && self.attributes.allowColumnResize\n                            && ((self.attributes.allowColumnResizeFromCell && cell.style === 'cell')\n                                || cell.style !== 'cell')\n                            && ((self.attributes.allowRowHeaderResize\n                                && ['rowHeaderCell', 'cornerCell'].indexOf(cell.style) !== -1)\n                                || ['rowHeaderCell', 'cornerCell'].indexOf(cell.style) === -1)) {\n                        cell.context = 'ew-resize';\n                        cell.dragContext = 'ew-resize';\n                        return cell;\n                    }\n                    if (cell.y + cell.height - (self.attributes.borderResizeZone * 0.4) < y\n                            && cell.y + cell.height + (self.attributes.borderResizeZone * 0.6) > y\n                            && self.attributes.allowRowResize\n                            && ((self.attributes.allowRowResizeFromCell && cell.style === 'cell')\n                                || cell.style !== 'cell')\n                            && cell.style !== 'columnHeaderCell') {\n                        cell.context = 'ns-resize';\n                        cell.dragContext = 'ns-resize';\n                        return cell;\n                    }\n                    if (cell.style === 'columnHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'column-reorder';\n                        return cell;\n                    }\n                    if (cell.style === 'rowHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'row-reorder';\n                        return cell;\n                    }\n                    if (cell.isGrid) {\n                        self.hasFocus = false;\n                        cell.dragContext = 'cell-grid';\n                        cell.context = 'cell-grid';\n                        return cell;\n                    }\n                    if (cell.style === 'tree-grid') {\n                        self.hasFocus = false;\n                        cell.dragContext = 'tree';\n                        cell.context = 'tree';\n                        return cell;\n                    }\n                    cell.dragContext = 'cell';\n                    cell.context = 'cell';\n                    return cell;\n                }\n            }\n            self.hasFocus = true;\n            self.canvas.style.cursor = 'default';\n            return {\n                dragContext: 'background',\n                context: 'background',\n                style: 'background',\n                isBackground: true\n            };\n        };\n        /**\n         * Gets the bounds of current selection. \n         * @returns {rect} selection.\n         * @memberof canvasDataGrid\n         * @name getSelectionBounds\n         * @method\n         */\n        self.getSelectionBounds = function () {\n            var low = {x: Infinity, y: Infinity},\n                high = {x: -Infinity, y: -Infinity};\n            self.data.forEach(function (row, rowIndex) {\n                var maxCol, minCol;\n                if (self.selections[rowIndex] && self.selections[rowIndex].length) {\n                    low.y = rowIndex < low.y ? rowIndex : low.y;\n                    high.y = rowIndex > high.y ? rowIndex : high.y;\n                    maxCol = Math.max.apply(null, self.selections[rowIndex]);\n                    minCol = Math.min.apply(null, self.selections[rowIndex]);\n                    low.x = minCol < low.x ? minCol : low.x;\n                    high.x = maxCol > high.x ? maxCol : high.x;\n                }\n            });\n            return {\n                top: low.y,\n                left: low.x,\n                bottom: high.y,\n                right: high.x\n            };\n        };\n        /**\n         * Returns an auto generated schema based on data structure.\n         * @memberof canvasDataGrid\n         * @name getSchemaFromData\n         * @method\n         * @tutorial schema\n         * @returns {schema} schema A schema based on the first item in the data array.\n         */\n        self.getSchemaFromData = function () {\n            return Object.keys(self.data[0] || {' ': ''}).map(function mapEachSchemaColumn(key, index) {\n                var type = self.getBestGuessDataType(key),\n                    i = {\n                        name: key,\n                        title: isNaN(parseInt(key, 10)) ? key : self.integerToAlpha(key).toUpperCase(),\n                        width: self.style.columnWidth,\n                        index: index,\n                        type: type,\n                        filter: self.filter(type)\n                    };\n                if (key === self.uniqueId) {\n                    i.hidden = true;\n                }\n                i[self.uniqueId] = self.getSchemaNameHash(key);\n                return i;\n            });\n        };\n        /**\n         * Clears the change log grid.changes that keeps track of changes to the data set.\n         * This does not undo changes or alter data it is simply a convince array to keep\n         * track of changes made to the data since last this method was called.\n         * @memberof canvasDataGrid\n         * @name clearChangeLog\n         * @method\n         */\n        self.clearChangeLog = function () {\n            self.changes = [];\n        };\n        /**\n         * Selects an area of the grid.\n         * @memberof canvasDataGrid\n         * @name selectArea\n         * @method\n         * @param {rect} bounds A rect object representing the selected values.\n         */\n        self.selectArea = function (bounds, ctrl) {\n            self.selectionBounds = bounds || self.selectionBounds;\n            var x, y, s = self.getSchema();\n            if (!ctrl) {\n                self.selections = [];\n            }\n            if (self.selectionBounds.top < -1\n                    || self.selectionBounds.bottom > self.data.length\n                    || self.selectionBounds.left < -1\n                    || self.selectionBounds.right > s.length) {\n                throw new Error('Impossible selection area');\n            }\n            for (x = self.selectionBounds.top; x <= self.selectionBounds.bottom; x += 1) {\n                self.selections[x] = [];\n                for (y = self.selectionBounds.left; y <= self.selectionBounds.right; y += 1) {\n                    if (self.selections[x].indexOf(y) === -1) {\n                        self.selections[x].push(y);\n                    }\n                }\n            }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Returns the maximum text width for a given column by column name.\n         * @memberof canvasDataGrid\n         * @name findColumnMaxTextLength\n         * @method\n         * @returns {number} The number of pixels wide the maximum width value in the selected column.\n         * @param {string} name The name of the column to calculate the value's width of.\n         */\n        self.findColumnMaxTextLength = function (name) {\n            var m = -Infinity;\n            if (name === 'cornerCell') {\n                self.ctx.font = self.style.rowHeaderCellFont;\n                return self.ctx.measureText((self.data.length + (self.attributes.showNewRow ? 1 : 0)).toString()).width\n                    + self.style.autosizePadding + self.style.autosizeHeaderCellPadding\n                    + self.style.rowHeaderCellPaddingRight\n                    + self.style.rowHeaderCellPaddingLeft\n                    + (self.attributes.tree ? self.style.treeArrowWidth\n                        + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight : 0);\n            }\n            self.getSchema().forEach(function (col) {\n                if (col.name !== name) { return; }\n                self.ctx.font = self.style.columnHeaderCellFont;\n                var t = self.ctx.measureText(col.title || col.name).width\n                    + self.style.headerCellPaddingRight\n                    + self.style.headerCellPaddingLeft;\n                m = t > m ? t : m;\n            });\n            self.data.forEach(function (row) {\n                self.ctx.font = self.style.cellFont;\n                var t = self.ctx.measureText(row[name]).width\n                    + self.style.cellPaddingRight\n                    + self.style.cellPaddingLeft + self.style.cellAutoResizePadding;\n                m = t > m ? t : m;\n            });\n            return m;\n        };\n        /**\n         * Gets the total width of all header columns.\n         * @memberof canvasDataGrid\n         * @name getHeaderWidth\n         * @method\n         */\n        self.getHeaderWidth = function () {\n            return self.getVisibleSchema().reduce(function (total, header) {\n                return total + header.width;\n            }, 0);\n        };\n        self.formatters.string = function cellFormatterString(e) {\n            return e.cell.value !== undefined ? e.cell.value : '';\n        };\n        self.formatters.rowHeaderCell = self.formatters.string;\n        self.formatters.headerCell = self.formatters.string;\n        self.formatters.number = self.formatters.string;\n        self.formatters.int = self.formatters.string;\n        self.formatters.html = self.formatters.string;\n        self.sorters.string = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (a[columnName] === undefined || a[columnName] === null) {\n                    return 1;\n                }\n                if (b[columnName] === undefined || b[columnName] === null) {\n                    return 0;\n                }\n                if (asc) {\n                    if (!a[columnName].localeCompare) { return 1; }\n                    return a[columnName].localeCompare(b[columnName]);\n                }\n                if (!b[columnName].localeCompare) { return 1; }\n                return b[columnName].localeCompare(a[columnName]);\n            };\n        };\n        self.sorters.number = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return a[columnName] - b[columnName];\n                }\n                return b[columnName] - a[columnName];\n            };\n        };\n        self.sorters.date = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return new Date(a[columnName]).getTime()\n                        - new Date(b[columnName]).getTime();\n                }\n                return new Date(b[columnName]).getTime()\n                        - new Date(a[columnName]).getTime();\n            };\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// canvas-datagrid.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 376cd72e59dd11f62ff4","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([\n    './draw',\n    './events',\n    './intf',\n    './contextMenu',\n    './defaults',\n    './dom',\n    './publicMethods'\n], function context() {\n    'use strict';\n    var modules = Array.prototype.slice.call(arguments);\n    function grid(args) {\n        args = args || {};\n        var self = {};\n        self.args = args;\n        self.createGrid = grid;\n        modules.forEach(function (module) {\n            module(self);\n        });\n        self.init();\n        return self.intf;\n    }\n    if (window && !window.canvasDatagrid && !window.require) {\n        window.canvasDatagrid = grid;\n    }\n    module.exports = grid;\n    return grid;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/main.js\n// module id = 0\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals XMLSerializer: false, define: true, Blob: false, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var perfCounters = [],\n            drawCount = 0,\n            perfWindowSize = 20;\n        self.htmlImageCache = {};\n        function drawOnAllImagesLoaded() {\n            var loaded = true;\n            Object.keys(self.htmlImageCache).forEach(function (html) {\n                if (!self.htmlImageCache[html].complete) {\n                    loaded = false;\n                }\n            });\n            if (loaded) {\n                self.draw();\n            }\n        }\n        function drawHtml(cell) {\n            var img,\n                v = cell.innerHTML || cell.formattedValue,\n                x = cell.x + self.canvasOffsetLeft,\n                y = cell.y + self.canvasOffsetTop;\n            if (self.htmlImageCache[v]) {\n                img = self.htmlImageCache[v];\n                if (img.height !== cell.height || img.width !== cell.width) {\n                    // height and width of the cell has changed, invalidate cache\n                    self.htmlImageCache[v] = undefined;\n                } else {\n                    if (!img.complete) {\n                        return;\n                    }\n                    return self.ctx.drawImage(img, x, y);\n                }\n            }\n            img = new Image(cell.width, cell.height);\n            self.htmlImageCache[v] = img;\n            img.onload = function () {\n                self.ctx.drawImage(img, x, y);\n                drawOnAllImagesLoaded();\n            };\n            img.src = 'data:image/svg+xml;base64,' + btoa(\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + cell.width + '\" height=\"' + cell.height + '\">\\n' +\n                    '<foreignObject class=\"node\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\\n' +\n                    '<body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;padding:0;\">\\n' +\n                    v + '\\n' +\n                    '</body>' +\n                    '</foreignObject>\\n' +\n                    '</svg>\\n'\n            );\n        }\n        function drawOrderByArrow(x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.columnHeaderOrderByArrowColor;\n            self.ctx.strokeStyle = self.style.columnHeaderOrderByArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + self.style.columnHeaderOrderByArrowMarginLeft;\n            y = y + self.style.columnHeaderOrderByArrowMarginTop;\n            if (self.orderDirection === 'asc') {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + self.style.columnHeaderOrderByArrowWidth, y);\n                self.ctx.lineTo(x + (self.style.columnHeaderOrderByArrowWidth * 0.5), y + self.style.columnHeaderOrderByArrowHeight);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y + self.style.columnHeaderOrderByArrowHeight);\n                self.ctx.lineTo(x + self.style.columnHeaderOrderByArrowWidth, y + self.style.columnHeaderOrderByArrowHeight);\n                self.ctx.lineTo(x + (self.style.columnHeaderOrderByArrowWidth * 0.5), y);\n                self.ctx.lineTo(x, y + self.style.columnHeaderOrderByArrowHeight);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return self.style.columnHeaderOrderByArrowMarginLeft\n                + self.style.columnHeaderOrderByArrowWidth\n                + self.style.columnHeaderOrderByArrowMarginRight;\n        }\n        function drawTreeArrow(cell, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.treeArrowColor;\n            self.ctx.strokeStyle = self.style.treeArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + self.style.treeArrowMarginLeft;\n            y = y + self.style.treeArrowMarginTop;\n            if (self.openChildren[cell.data[self.uniqueId]]) {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + self.style.treeArrowWidth, y);\n                self.ctx.lineTo(x + (self.style.treeArrowWidth * 0.5), y + self.style.treeArrowHeight);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y);\n                self.ctx.lineTo(x + self.style.treeArrowHeight, y + (self.style.treeArrowWidth * 0.5));\n                self.ctx.lineTo(x, y + self.style.treeArrowWidth);\n                self.ctx.lineTo(x, y);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return self.style.treeArrowMarginLeft\n                + self.style.treeArrowWidth\n                + self.style.treeArrowMarginRight;\n        }\n        function radiusRect(x, y, w, h, radius) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            var r = x + w, b = y + h;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x + radius, y);\n            self.ctx.lineTo(r - radius, y);\n            self.ctx.quadraticCurveTo(r, y, r, y + radius);\n            self.ctx.lineTo(r, y + h - radius);\n            self.ctx.quadraticCurveTo(r, b, r - radius, b);\n            self.ctx.lineTo(x + radius, b);\n            self.ctx.quadraticCurveTo(x, b, x, b - radius);\n            self.ctx.lineTo(x, y + radius);\n            self.ctx.quadraticCurveTo(x, y, x + radius, y);\n        }\n        function fillRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillRect(x, y, w, h);\n        }\n        function strokeRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.strokeRect(x, y, w, h);\n        }\n        function fillText(text, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillText(text, x, y);\n        }\n        function addBorderLine(c, pos) {\n            self.ctx.beginPath();\n            var p = {\n                t: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                },\n                r: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                b: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                l: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                },\n            };\n            p[pos]();\n            self.ctx.stroke();\n        }\n        function addEllipsis(text, width) {\n            var c, w = 0;\n            if (self.ellipsisCache[text] && self.ellipsisCache[text][width]) {\n                return self.ellipsisCache[text][width];\n            }\n            //TODO Add ellipsis back when there is a fast way to do it\n            w = self.ctx.measureText(text).width;\n            self.ellipsisCache[text] = self.ellipsisCache[text] || {};\n            c = {value: text, width: w};\n            self.ellipsisCache[text][width] = c;\n            return c;\n        }\n        function drawText(cell) {\n            var paddingLeft = self.style[cell.style + 'PaddingLeft'],\n                paddingTop = self.style[cell.style + 'PaddingTop'],\n                paddingRight = self.style[cell.style + 'PaddingRight'],\n                paddingBottom = self.style[cell.style + 'PaddingBottom'],\n                vPos = paddingTop + cell.height - (cell.height * 0.5),\n                hPos = paddingLeft + cell.treeArrowWidth + cell.orderByArrowWidth;\n            cell.text = addEllipsis(cell.formattedValue, cell.width - paddingRight - paddingLeft);\n            cell.text.height = cell.fontHeight;\n            if (cell.horizontalAlignment === 'right') {\n                hPos = cell.width - cell.text.width - paddingRight;\n            } else if (cell.horizontalAlignment === 'center') {\n                hPos = (cell.width / 2) - (cell.text.width / 2);\n            }\n            if (cell.verticalAlignment === 'top') {\n                vPos = paddingTop + cell.text.height;\n            } else if (cell.verticalAlignment === 'bottom') {\n                vPos = cell.height - paddingBottom - cell.text.height;\n            }\n            cell.text.x = cell.x + hPos;\n            cell.text.y = cell.y + vPos;\n            fillText(cell.text.value, cell.text.x, cell.text.y);\n        }\n        /**\n         * Redraws the grid. No matter what the change, this is the only method required to refresh everything.\n         * @memberof canvasDataGrid\n         * @name draw\n         * @method\n         */\n        self.draw = function (internal) {\n            if (self.dispatchEvent('beforedraw', {})) { return; }\n            if (!self.isChildGrid && (!self.height || !self.width)) {\n                return;\n            }\n            // if something asked a child to draw, ask the parent to draw, unless it was the parent that asked... then.. idk... stack overflow!\n            // if (self.isChildGrid && internal) {\n            //     self.parentGrid.draw();\n            //     return;\n            // }\n            if (self.intf.visible === false) {\n                return;\n            }\n            // initial values\n            var checkScrollHeight, rowHeaderCell, p, cx, cy, treeGrid, rowOpen,\n                rowHeight, cornerCell, y, x, c, h, w, s, r, rd, aCell,\n                selectionBorders = [],\n                rowHeaders = [],\n                l = self.data.length,\n                u = self.currentCell || {},\n                rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth(),\n                cellHeight = self.style.cellHeight;\n            drawCount += 1;\n            p = performance.now();\n            // if data length has changed, there is no way to know\n            if (self.data.length > self.orders.rows.length) {\n                self.createRowOrders();\n            }\n            function drawScrollBars() {\n                var v = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-bar'\n                    },\n                    n = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-bar'\n                    },\n                    vb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-box'\n                    },\n                    nb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-box'\n                    },\n                    co = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        isCorner: true,\n                        isScrollBoxCorner: true,\n                        style: 'scroll-box-corner'\n                    },\n                    m = (self.style.scrollBarBoxMargin * 2),\n                    d = self.style.scrollBarBoxMargin * 0.5;\n                self.ctx.strokeStyle = self.style.scrollBarBorderColor;\n                self.ctx.lineWidth = self.style.scrollBarBorderWidth;\n                // vertical\n                v.x += w - self.style.scrollBarWidth - self.style.scrollBarBorderWidth - d;\n                v.y += rowHeaderCellHeight;\n                v.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                v.height = h - rowHeaderCellHeight - self.style.scrollBarWidth - d - m;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(v.x, v.y, v.width, v.height + m);\n                strokeRect(v.x, v.y, v.width, v.height + m);\n                // vertical box\n                vb.x = v.x + self.style.scrollBarBoxMargin;\n                vb.y = rowHeaderCellHeight + self.style.scrollBarBoxMargin\n                    + ((v.height - self.scrollBox.scrollBoxHeight)\n                        * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight));\n                vb.width = self.style.scrollBarBoxWidth;\n                vb.height = self.scrollBox.scrollBoxHeight;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/vertical/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (vb.height < v.height) {\n                    radiusRect(vb.x, vb.y, vb.width, vb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                // horizontal\n                n.x += columnHeaderCellWidth;\n                n.y += h - self.style.scrollBarWidth - d;\n                n.width = w - self.style.scrollBarWidth - columnHeaderCellWidth - d - m;\n                n.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(n.x, n.y, n.width + m, n.height);\n                strokeRect(n.x, n.y, n.width + m, n.height);\n                // horizontal box\n                nb.y = n.y + self.style.scrollBarBoxMargin;\n                nb.x = columnHeaderCellWidth + self.style.scrollBarBoxMargin\n                    + ((n.width - self.scrollBox.scrollBoxWidth)\n                        * (self.scrollBox.scrollLeft / self.scrollBox.scrollWidth));\n                nb.width = self.scrollBox.scrollBoxWidth;\n                nb.height = self.style.scrollBarBoxWidth;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/horizontal/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (nb.width < n.width) {\n                    radiusRect(nb.x, nb.y, nb.width, nb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                //corner\n                self.ctx.strokeStyle = self.style.scrollBarCornerBorderColor;\n                self.ctx.fillStyle = self.style.scrollBarCornerBackgroundColor;\n                co.x = n.x + n.width + m;\n                co.y = v.y + v.height + m;\n                co.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                co.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                radiusRect(co.x, co.y, co.width, co.height, 0);\n                self.ctx.stroke();\n                self.ctx.fill();\n                self.visibleCells.unshift(v);\n                self.visibleCells.unshift(vb);\n                self.visibleCells.unshift(n);\n                self.visibleCells.unshift(nb);\n                self.visibleCells.unshift(co);\n                self.scrollBox.bar = {\n                    v: v,\n                    h: n\n                };\n                self.scrollBox.box = {\n                    v: vb,\n                    h: nb\n                };\n            }\n            function drawCell(d, rowIndex, rowOrderIndex) {\n                return function drawEach(header, headerIndex, columnOrderIndex) {\n                    var cellStyle = header.style || 'cell',\n                        childGridAttributes,\n                        cell,\n                        isHeader = /HeaderCell/.test(cellStyle),\n                        isCorner = /cornerCell/.test(cellStyle),\n                        isRowHeader = 'rowHeaderCell' === cellStyle,\n                        isColumnHeader = 'columnHeaderCell' === cellStyle,\n                        selected = self.selections[rowOrderIndex] && self.selections[rowOrderIndex].indexOf(columnOrderIndex) !== -1,\n                        hovered = self.hovers[d[self.uniqueId]] && self.hovers[d[self.uniqueId]].indexOf(columnOrderIndex) !== -1,\n                        active = self.activeCell.rowIndex === rowOrderIndex && self.activeCell.columnIndex === columnOrderIndex,\n                        isGrid = Array.isArray(d[header.name]),\n                        activeHeader = (self.orders.rows[self.activeCell.rowIndex] === rowOrderIndex\n                                || self.orders.columns[self.activeCell.columnIndex] === columnOrderIndex)\n                            && (columnOrderIndex === -1 || rowOrderIndex === -1)\n                            ? (isRowHeader ? 'activeRowHeaderCell' : 'activeColumnHeaderCell') : false,\n                        val,\n                        f = self.formatters[header.type || 'string'],\n                        orderByArrowSize = 0,\n                        treeArrowSize = 0,\n                        cellWidth = self.sizes.columns[isRowHeader ? 'cornerCell' : header[self.uniqueId]] || header.width,\n                        ev = {\n                            value: d[header.name],\n                            row: d,\n                            header: header\n                        };\n                    if (cellStyle === 'headerCellCap') {\n                        cellWidth = w - x;\n                    }\n                    // if no data or schema are defined, a width is provided to the stub column\n                    if (cellWidth === undefined) {\n                        cellWidth = self.style.columnWidth;\n                    }\n                    if (x + cellWidth + self.style.cellBorderWidth < 0) {\n                        x += cellWidth + self.style.cellBorderWidth;\n                    }\n                    if (active) {\n                        cellStyle = 'activeCell';\n                    }\n                    if (self.visibleRows.indexOf(rowIndex) === -1 && !isHeader) {\n                        self.visibleRows.push(rowIndex);\n                    }\n                    val = self.dispatchEvent('formatcellvalue', ev);\n                    if (!self.dispatchEvent('beforerendercell', ev)) {\n                        cx = x;\n                        cy = y;\n                        if (cellStyle === 'cornerCell') {\n                            cx = 0;\n                            cy = 0;\n                        } else if (isRowHeader) {\n                            cx = 0;\n                        } else if (isHeader) {\n                            cy = 0;\n                        }\n                        cell = {\n                            type: isGrid ? 'canvas-datagrid-cell' : header.type,\n                            style: cellStyle,\n                            nodeType: 'canvas-datagrid-cell',\n                            x: cx,\n                            y: cy,\n                            horizontalAlignment: self.style[cellStyle + 'HorizontalAlignment'],\n                            verticalAlignment: self.style[cellStyle + 'VerticalAlignment'],\n                            offsetTop: self.canvasOffsetTop + cy,\n                            offsetLeft: self.canvasOffsetLeft + cx,\n                            scrollTop: self.scrollBox.scrollTop,\n                            scrollLeft: self.scrollBox.scrollLeft,\n                            active: active || activeHeader,\n                            hovered: hovered,\n                            selected: selected,\n                            width: cellWidth,\n                            height: cellHeight,\n                            offsetWidth: cellWidth,\n                            offsetHeight: cellHeight,\n                            parentNode: self.intf.parentNode,\n                            offsetParent: self.intf.parentNode,\n                            data: d,\n                            isCorner: isCorner,\n                            isHeader: isHeader,\n                            isColumnHeader: isColumnHeader,\n                            isHeaderCellCap: !!header.isHeaderCellCap,\n                            isRowHeader: isRowHeader,\n                            rowOpen: rowOpen,\n                            header: header,\n                            columnIndex: columnOrderIndex,\n                            rowIndex: rowOrderIndex,\n                            sortColumnIndex: headerIndex,\n                            sortRowIndex: rowIndex,\n                            isGrid: isGrid,\n                            gridId: (self.attributes.name || '') + d[self.uniqueId] + ':' + header[self.uniqueId],\n                            parentGrid: self.intf,\n                            innerHTML: '',\n                            activeHeader: activeHeader,\n                            value: isHeader && !isRowHeader ? (header.title || header.name) : d[header.name]\n                        };\n                        ev.cell = cell;\n                        cell.userHeight = cell.isHeader ? self.sizes.rows[-1] : rowHeight;\n                        cell.userWidth = cell.isHeader ? self.sizes.columns.cornerCell : self.sizes.columns[header[self.uniqueId]];\n                        cell[self.uniqueId] = d[self.uniqueId];\n                        self.visibleCells.unshift(cell);\n                        self.ctx.fillStyle = self.style[cellStyle + 'BackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'BorderColor'];\n                        self.ctx.lineWidth = self.style[cellStyle + 'BorderWidth'];\n                        if (hovered) {\n                            self.ctx.fillStyle = self.style[cellStyle + 'HoverBackgroundColor'];\n                            self.ctx.strokeStyle = self.style[cellStyle + 'HoverBorderColor'];\n                        }\n                        if (selected) {\n                            self.ctx.fillStyle = self.style[cellStyle + 'SelectedBackgroundColor'];\n                            self.ctx.strokeStyle = self.style[cellStyle + 'SelectedBorderColor'];\n                        }\n                        if (activeHeader) {\n                            self.ctx.fillStyle = self.style[activeHeader + 'BackgroundColor'];\n                        }\n                        self.dispatchEvent('rendercell', ev);\n                        if (cell.isGrid) {\n                            if (cell.height !== rowHeight) {\n                                cell.height = rowHeight || self.style.cellHeightWithChildGrid;\n                                checkScrollHeight = true;\n                            }\n                            cell.width = self.sizes.columns[header[self.uniqueId]] || self.style.cellWidthWithChildGrid;\n                        }\n                        if (rowOpen && !cell.isRowHeader) {\n                            cell.height = self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight;\n                        }\n                        if (!cell.isGrid) {\n                            fillRect(cx, cy, cell.width, cell.height);\n                            strokeRect(cx, cy, cell.width, cell.height);\n                        }\n                        self.ctx.save();\n                        radiusRect(cell.x, cell.y, cell.width, cell.height, 0);\n                        self.ctx.clip();\n                        self.dispatchEvent('afterrendercell', ev);\n                        if (cell.height !== cellHeight && !(rowOpen && !cell.isRowHeader)) {\n                            self.sizes.rows[isHeader ? -1 : d[self.uniqueId]] = cell.height;\n                            checkScrollHeight = true;\n                        }\n                        if (cell.width !== cellWidth) {\n                            self.sizes.columns[header[self.uniqueId]] = cell.width;\n                            checkScrollHeight = true;\n                        }\n                        if (isRowHeader && self.attributes.tree) {\n                            if (!self.dispatchEvent('rendertreearrow', ev)) {\n                                treeArrowSize = drawTreeArrow(cell, self.style[cellStyle + 'PaddingLeft'], cy, 0);\n                            }\n                        }\n                        if ((self.attributes.showRowNumbers && isRowHeader)\n                                || !isRowHeader) {\n                            if (cell.isGrid) {\n                                if (!self.childGrids[cell.gridId]) {\n                                    childGridAttributes = self.args.childGridAttributes || self.args;\n                                    childGridAttributes.name = self.attributes.saveAppearance ? cell.gridId : undefined;\n                                    childGridAttributes.parentNode = cell;\n                                    childGridAttributes.data = d[header.name];\n                                    self.childGrids[cell.gridId] = self.createGrid(childGridAttributes);\n                                    checkScrollHeight = true;\n                                }\n                                cell.grid = self.childGrids[cell.gridId];\n                                cell.grid.parentNode = cell;\n                                cell.grid.visible = true;\n                                //cell.grid.resize(true);\n                                self.dispatchEvent('rendercellgrid', ev);\n                            } else {\n                                if (self.childGrids[cell.gridId]) {\n                                    self.childGrids[cell.gridId].parentNode.offsetHeight = 0;\n                                }\n                                if (isHeader && self.orderBy === header.name) {\n                                    if (!self.dispatchEvent('renderorderbyarrow', ev)) {\n                                        orderByArrowSize = drawOrderByArrow(cx + self.style[cellStyle + 'PaddingLeft'], 0);\n                                    }\n                                }\n                                self.ctx.fillStyle = self.style[cellStyle + 'Color'];\n                                if (hovered) {\n                                    self.ctx.fillStyle = self.style[cellStyle + 'HoverColor'];\n                                }\n                                if (selected) {\n                                    self.ctx.fillStyle = self.style[cellStyle + 'SelectedColor'];\n                                }\n                                if (activeHeader) {\n                                    self.ctx.fillStyle = self.style[activeHeader + 'Color'];\n                                }\n                                self.ctx.font = self.style[cellStyle + 'Font'];\n                                cell.fontHeight = self.style[cellStyle + 'FontHeight'];\n                                cell.treeArrowWidth = treeArrowSize;\n                                cell.orderByArrowWidth = orderByArrowSize;\n                                val = val !== undefined ? val : f\n                                    ? f(ev) : '';\n                                if (val === undefined && !f) {\n                                    val = '';\n                                    console.warn('canvas-datagrid: Unknown format '\n                                        + header.type + ' add a cellFormater');\n                                }\n                                cell.formattedValue = ((val !== undefined && val !== null) ? val : '').toString();\n                                if (self.columnFilters && self.columnFilters[val] !== undefined && isHeader) {\n                                    cell.formattedValue = self.attributes.filterTextPrefix + val;\n                                }\n                                if (!self.dispatchEvent('rendertext', ev)) {\n                                    if (cell.innerHTML || header.type === 'html') {\n                                        drawHtml(cell);\n                                    } else {\n                                        drawText(cell);\n                                    }\n                                }\n                            }\n                        }\n                        if (active) {\n                            aCell = cell;\n                        }\n                        if (selected && !isRowHeader) {\n                            if ((!self.selections[cell.rowIndex - 1]\n                                    || self.selections[cell.rowIndex - 1].indexOf(cell.columnIndex) === -1\n                                    || cell.rowIndex === 0)\n                                    && !cell.isHeader) {\n                                selectionBorders.push([cell, 't']);\n                            }\n                            if (!self.selections[cell.rowIndex + 1]\n                                    || self.selections[cell.rowIndex + 1].indexOf(cell.columnIndex) === -1) {\n                                selectionBorders.push([cell, 'b']);\n                            }\n                            if (!self.selections[cell.rowIndex] || cell.columnIndex === 0\n                                    || self.selections[cell.rowIndex].indexOf(cell.columnIndex - 1) === -1) {\n                                selectionBorders.push([cell, 'l']);\n                            }\n                            if (!self.selections[cell.rowIndex] || cell.columnIndex === s.length\n                                    || self.selections[cell.rowIndex].indexOf(cell.columnIndex + 1) === -1) {\n                                selectionBorders.push([cell, 'r']);\n                            }\n                        }\n                        self.ctx.restore();\n                        x += cell.width + self.style.cellBorderWidth;\n                        return cell.width;\n                    }\n                };\n            }\n            function drawRowHeader(rowData, index, rowOrderIndex) {\n                var a;\n                if (self.attributes.showRowHeaders) {\n                    x = 0;\n                    rowHeaderCell = {'rowHeaderCell': index + 1 };\n                    rowHeaderCell[self.uniqueId] = rowData[self.uniqueId];\n                    a = {\n                        name: 'rowHeaderCell',\n                        width: self.style.rowHeaderCellWidth,\n                        style: 'rowHeaderCell',\n                        type: 'string',\n                        data: rowData[self.uniqueId],\n                        index: -1\n                    };\n                    a[self.uniqueId] = rowData[self.uniqueId];\n                    rowOpen = self.openChildren[rowData[self.uniqueId]];\n                    drawCell(rowHeaderCell, index, rowOrderIndex)(a, -1, -1);\n                }\n            }\n            function drawHeaders() {\n                var d, g = s.length, i, o, columnHeaderCell, header;\n                rowHeaders.forEach(function (rArgs) {\n                    y = rArgs[3];\n                    cellHeight = rArgs[4];\n                    drawRowHeader(rArgs[0], rArgs[1], rArgs[2]);\n                });\n                if (self.attributes.showColumnHeaders) {\n                    x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft;\n                    if (self.attributes.showRowHeaders) {\n                        x += columnHeaderCellWidth;\n                    }\n                    y = 0;\n                    // cell height might have changed during drawing\n                    cellHeight = self.getRowHeaderCellHeight();\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        header = s[i];\n                        d = {\n                            title: header.title,\n                            name: header.name,\n                            width: header.width,\n                            style: 'columnHeaderCell',\n                            type: 'string',\n                            index: o,\n                            order: i\n                        };\n                        columnHeaderCell = {'columnHeaderCell': header.title || header.name};\n                        columnHeaderCell[self.uniqueId] = 'h' + header[self.uniqueId];\n                        d[self.uniqueId] = header[self.uniqueId];\n                        x += drawCell(columnHeaderCell, -1, -1)(d, o, i);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    // fill in the space right of the headers\n                    if (x < w) {\n                        c = {\n                            name: '',\n                            width: self.style.scrollBarWidth,\n                            style: 'headerCellCap',\n                            isHeaderCell: true,\n                            isHeaderCellCap: true,\n                            type: 'string',\n                            index: s.length\n                        };\n                        c[self.uniqueId] = 'columnHeaderCell';\n                        drawCell({endCap: ''}, -1, -1)(c, -1, -1);\n                    }\n                    // fill in the space right of the headers\n                    if (self.attributes.showRowHeaders) {\n                        cornerCell = {'cornerCell': '' };\n                        cornerCell[self.uniqueId] = 'cornerCell';\n                        x = 0;\n                        c = {\n                            name: 'cornerCell',\n                            width: self.style.rowHeaderCellWidth,\n                            style: 'cornerCell',\n                            type: 'string',\n                            index: -1\n                        };\n                        c[self.uniqueId] = 'cornerCell';\n                        drawCell(cornerCell, -1, -1)(c, -1, -1);\n                    }\n                }\n            }\n            function drawRow(r, d) {\n                var i, treeHeight, rowSansTreeHeight, o, g = s.length;\n                if (y - (cellHeight * 2) > h) {\n                    return false;\n                }\n                rd = self.data[r];\n                rowOpen = self.openChildren[rd[self.uniqueId]];\n                rowSansTreeHeight = self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight;\n                treeHeight = (rowOpen ? self.sizes.trees[rd[self.uniqueId]] : 0);\n                rowHeight = rowSansTreeHeight + treeHeight;\n                if (y < rowHeight * -1) {\n                    return false;\n                }\n                if (self.attributes.showRowHeaders) {\n                    x += columnHeaderCellWidth;\n                }\n                cellHeight = rowHeight;\n                for (o = self.scrollIndexLeft; o < g; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        break;\n                    }\n                }\n                // cell height might have changed during drawing\n                cellHeight = rowHeight;\n                x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft + self.style.cellBorderWidth;\n                // don't draw a tree for the new row\n                treeGrid = self.childGrids[rd[self.uniqueId]];\n                if (r !== self.data.length && rowOpen) {\n                    treeGrid.visible = true;\n                    treeGrid.parentNode = {\n                        offsetTop: y + rowSansTreeHeight + self.canvasOffsetTop,\n                        offsetLeft: columnHeaderCellWidth - 1 + self.canvasOffsetLeft,\n                        offsetHeight: treeHeight,\n                        offsetWidth: self.width - columnHeaderCellWidth - self.style.scrollBarWidth - 1,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: self.style,\n                        nodeType: 'canvas-datagrid-tree',\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        rowIndex: r\n                    };\n                    self.visibleCells.unshift({\n                        rowIndex: x,\n                        columnIndex: 0,\n                        y: treeGrid.parentNode.offsetTop,\n                        x: treeGrid.parentNode.offsetLeft,\n                        height: treeGrid.parentNode.offsetHeight,\n                        width: treeGrid.parentNode.offsetWidth,\n                        style: 'tree-grid',\n                        type: treeGrid.parentNode.nodeType\n                    });\n                    treeGrid.draw();\n                } else if (treeGrid) {\n                    treeGrid.parentNode.offsetHeight = 0;\n                    delete self.sizes.trees[rd[self.uniqueId]];\n                }\n                rowHeaders.push([rd, r, d, y, rowHeight]);\n                y += cellHeight + self.style.cellBorderWidth;\n                return true;\n            }\n            function initDraw() {\n                self.visibleRows = [];\n                s = self.getVisibleSchema();\n                self.visibleCells = [];\n                self.canvasOffsetTop = self.isChildGrid ? self.parentNode.offsetTop : 0;\n                self.canvasOffsetLeft = self.isChildGrid ? self.parentNode.offsetLeft : 0;\n                h = self.height;\n                w = self.width;\n                if (!self.isChildGrid) {\n                    self.ctx.scale(window.devicePixelRatio, window.devicePixelRatio);\n                }\n            }\n            function drawBackground() {\n                radiusRect(0, 0, w, h, 0);\n                self.ctx.clip();\n                self.ctx.fillStyle = self.style.backgroundColor;\n                fillRect(0, 0, w, h);\n            }\n            function drawRows() {\n                var o, n, i, g = s.length;\n                x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft + self.style.cellBorderWidth;\n                y = (self.scrollBox.scrollTop * -1) + rowHeaderCellHeight + self.scrollPixelTop + self.style.cellBorderWidth;\n                for (r = self.scrollIndexTop; r < l; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.showNewRow) {\n                    if (self.attributes.showRowHeaders) {\n                        x += columnHeaderCellWidth;\n                    }\n                    rowHeight = cellHeight = self.style.cellHeight;\n                    rowOpen = false;\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        x += drawCell(self.newRow, self.data.length, self.data.length)(s[i], i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    rowHeaders.push([self.newRow, self.data.length, self.data.length, y, rowHeight]);\n                }\n            }\n            function drawReorderMarkers() {\n                if (!self.reorderObject) { return; }\n                var b = {\n                        height: self.reorderObject.height,\n                        width: self.reorderObject.width,\n                        x: self.reorderObject.x + self.reorderObject.dragOffset.x,\n                        y: self.reorderObject.y + self.reorderObject.dragOffset.y\n                    },\n                    m = {\n                        width: w,\n                        heigth: h,\n                        x: 0,\n                        y: 0\n                    };\n                self.ctx.fillStyle = self.style.reorderMarkerBackgroundColor;\n                self.ctx.lineWidth = self.style.reorderMarkerBorderWidth;\n                self.ctx.strokeStyle = self.style.reorderMarkerBorderColor;\n                if (self.dragMode === 'row-reorder') {\n                    b.width = w;\n                    b.x = 0;\n                    m.width = w;\n                    m.y = self.currentCell.y;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.rowIndex !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex - 1 !== self.reorderObject.rowIndex) {\n                        addBorderLine(m, 't');\n                    }\n                } else if (self.dragMode === 'column-reorder' && self.reorderObject) {\n                    b.height = h;\n                    b.y = 0;\n                    m.height = h;\n                    m.x = self.currentCell.x;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.columnIndex !== self.reorderObject.columnIndex\n                            && self.currentCell.columnIndex - 1 !== self.reorderObject.columnIndex) {\n                        addBorderLine(m, 'l');\n                    }\n                }\n            }\n            function drawBorder() {\n                self.ctx.lineWidth = self.style.gridBorderWidth;\n                self.ctx.strokeStyle = self.style.gridBorderColor;\n                strokeRect(0, 0, self.width, self.height);\n            }\n            function drawSelectionBorders() {\n                self.ctx.lineWidth = self.style.selectionOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.selectionOverlayBorderColor;\n                selectionBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n            }\n            function drawActiveCell() {\n                if (!aCell) { return; }\n                if (self.attributes.rowSelectionMode) {\n                    if (self.activeCell && self.activeCell.rowIndex === aCell.rowIndex) {\n                        self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                        self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                        strokeRect(0, aCell.y, self.getHeaderWidth() + columnHeaderCellWidth, rowHeight);\n                    }\n                } else {\n                    self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                    self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                    strokeRect(aCell.x, aCell.y, aCell.width, aCell.height);\n                }\n\n            }\n            function drawDebug() {\n                perfCounters[drawCount % perfWindowSize] = performance.now() - p;\n                var d;\n                if (self.attributes.debug) {\n                    self.ctx.font = '11px sans-serif';\n                    d = {};\n                    d.perf = (perfCounters.reduce(function (a, b) {\n                        return a + b;\n                    }, 0) / perfCounters.length).toFixed(1)\n                        + 'ms (' +\n                        perfCounters.map(function (a) { return a.toFixed(1); }).join(', ') + ')';\n                    d.htmlImages = Object.keys(self.htmlImageCache).length;\n                    d.scrollLeft = self.scrollBox.scrollLeft;\n                    d.scrollTop = self.scrollBox.scrollTop;\n                    d.scrollIndexTop = self.scrollIndexTop;\n                    d.scrollPixelTop = self.scrollPixelTop;\n                    d.scrollIndexLeft = self.scrollIndexLeft;\n                    d.scrollPixelLeft = self.scrollPixelLeft;\n                    d.canvasOffsetLeft = self.canvasOffsetLeft;\n                    d.canvasOffsetTop = self.canvasOffsetTop;\n                    d.width = self.width;\n                    d.height = self.height;\n                    d.mousex = self.mouse.x;\n                    d.mousey = self.mouse.y;\n                    d.touchx = !self.touchStart ? 0 : self.touchStart.x;\n                    d.touchy = !self.touchStart ? 0 : self.touchStart.y;\n                    d.entities = self.visibleCells.length;\n                    d.hasFocus = self.hasFocus;\n                    d.dragMode = self.dragMode;\n                    if (self.currentCell) {\n                        d.columnIndex = self.currentCell.columnIndex;\n                        d.rowIndex = self.currentCell.rowIndex;\n                        d.sortColumnIndex = self.currentCell.sortColumnIndex;\n                        d.sortRowIndex = self.currentCell.sortRowIndex;\n                        d.context = self.currentCell.context;\n                        d.dragContext = self.currentCell.dragContext;\n                        d.style = self.currentCell.style;\n                        d.type = self.currentCell.type;\n                    }\n                    self.ctx.save();\n                    Object.keys(d).forEach(function (key, index) {\n                        var m = key + ': ' + d[key],\n                            lh = 14;\n                        self.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n                        fillRect(columnHeaderCellWidth, lh + (index * lh), 100, lh);\n                        self.ctx.fillStyle = 'rgba(0, 0, 0, 1)';\n                        fillText(m, columnHeaderCellWidth + 1, rowHeaderCellHeight + (index * lh));\n                    });\n                    self.ctx.restore();\n                }\n            }\n            self.ctx.save();\n            initDraw();\n            drawBackground();\n            drawRows();\n            drawSelectionBorders();\n            drawActiveCell();\n            drawHeaders();\n            drawReorderMarkers();\n            drawScrollBars();\n            if (checkScrollHeight) {\n                self.resize(true);\n            }\n            drawBorder();\n            drawDebug();\n            if (self.dispatchEvent('afterdraw', {})) { return; }\n            self.ctx.restore();\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/draw.js\n// module id = 1\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var touchDelta = {x: 0, y: 0, scrollTop: 0, scrollLeft: 0},\n            touchAnimateTo = {scrollLeft: 0, scrollTop: 0},\n            touchSigma = {scrollLeft: 0, scrollTop: 0},\n            xPPS = 0,\n            yPPS = 0,\n            touchingCell = false,\n            startingCell = false,\n            animationFrames = 0;\n        self.getTouchPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.touches[0].clientX - rect.left,\n                    y: e.touches[0].clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        self.calculatePPS = function () {\n            xPPS = ((touchDelta.scrollLeft - touchSigma.scrollLeft) / (touchDelta.t - touchSigma.t));\n            yPPS = ((touchDelta.scrollTop - touchSigma.scrollTop) / (touchDelta.t - touchSigma.t));\n            touchSigma = {\n                scrollLeft: touchDelta.scrollLeft,\n                scrollTop: touchDelta.scrollTop,\n                t: performance.now() / 1000\n            };\n        };\n        self.touchCell = function (e) {\n            return function () {\n                clearInterval(self.touchCalcTimeout);\n                var pos = self.getTouchPos(e);\n                if (Math.abs(touchDelta.x) + Math.abs(touchDelta.y) < self.attributes.touchDeadZone) {\n                    touchingCell = self.getCellAt(pos.x, pos.y);\n                    self.mousemove(e, pos);\n                    self.mousedown(e, pos);\n                    self.mousemove(e, pos);\n                    self.draw();\n                }\n            };\n        };\n        self.touchstart = function (e) {\n            touchingCell = false;\n            self.touchStart = self.getTouchPos(e);\n            startingCell = self.getCellAt(self.touchStart.x, self.touchStart.y, true);\n            if (self.dispatchEvent('touchstart', {NativeEvent: e, cell: self.startingCell})) { return; }\n            if (!self.hasFocus) { return; }\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (e.touches.length === 2) {\n                return self.contextmenu(e, self.touchStart);\n            }\n            self.touchScrollStart = {\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: performance.now() / 1000\n            };\n            touchDelta = {\n                x: self.touchStart.x,\n                y: self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: 0\n            };\n            self.touchmove(e);\n            clearTimeout(self.touchTimeout);\n            clearInterval(self.touchCalcTimeout);\n            self.touchTimeout = setTimeout(self.touchCell(e), self.attributes.touchSelectTimeMs);\n            self.touchCalcTimeout = setInterval(self.calculatePPS, 20);\n            self.touchHaltAnimation = true;\n            document.body.addEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.addEventListener('touchend', self.touchend, false);\n            document.body.addEventListener('touchcancel', self.touchcancel, false);\n        };\n        self.easing = function (t, b, c, d) {\n            return c * (t / d) * (2 - t) + b;\n        };\n        self.touchEndAnimation = function () {\n            if (!self.canvas || !self.scrollBox.scrollTo) { return requestAnimationFrame(self.touchEndAnimation); }\n            var x,\n                y,\n                n = performance.now() / 1000,\n                d = (self.attributes.touchReleaseAnimationDurationMs / 1000),\n                t;\n            touchDelta.t = touchDelta.t || n + d;\n            t = n - touchDelta.t + 1;\n            if (t > 1 || self.touchHaltAnimation || (animationFrames > 1000)) {\n                animationFrames = 0;\n                self.touchHaltAnimation = false;\n                touchAnimateTo = {scrollLeft: -1, scrollTop: -1};\n                return;\n            }\n            animationFrames += 1;\n            x = self.easing(t, touchDelta.scrollLeft, -touchAnimateTo.scrollLeft, d);\n            y = self.easing(t, touchDelta.scrollTop, -touchAnimateTo.scrollTop, d);\n            self.scrollBox.scrollTo(x, y);\n            requestAnimationFrame(self.touchEndAnimation);\n        };\n        self.touchend = function (e) {\n            if (self.dispatchEvent('touchend', {NativeEvent: e})) { return; }\n            var dz = Math.abs(touchDelta.x) + Math.abs(touchDelta.y) < self.attributes.touchDeadZone,\n                pos = {\n                    x: self.touchStart.x + touchDelta.x,\n                    y: self.touchStart.y + touchDelta.y\n                },\n                cell = self.getCellAt(pos.x, pos.y);\n            if (!self.hasFocus) { return; }\n            if (touchingCell) {\n                self.mouseup(e, self.touchStart);\n            } else if (dz) {\n                if (cell.active) {\n                    self.beginEditAt(cell.columnIndex, cell.rowIndex);\n                } else {\n                    self.mousedown(e, self.touchStart);\n                    self.mouseup(e, self.touchStart);\n                    self.click(e, self.touchStart);\n                }\n            }\n            touchingCell = false;\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n            clearTimeout(self.touchTimeout);\n            clearInterval(self.touchCalcTimeout);\n            self.calculatePPS();\n            touchAnimateTo.scrollLeft = xPPS * self.attributes.touchReleaseAcceleration;\n            touchAnimateTo.scrollTop = yPPS * self.attributes.touchReleaseAcceleration;\n            self.touchHaltAnimation = false;\n            if (animationFrames === 0 && !/-scroll-/.test(startingCell.style) && !dz) {\n                self.touchEndAnimation();\n            }\n        };\n        self.touchmove = function (e) {\n            var d = self.getTouchPos(e);\n            if (self.dispatchEvent('touchmove', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (!self.hasFocus) { return; }\n            touchDelta = {\n                x: d.x - self.touchStart.x,\n                y: d.y - self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: 0\n            };\n            if (/vertical-scroll-/.test(startingCell.style)) {\n                self.scrollBox.scrollTop = self.scrollBox.scrollHeight * (d.y / self.height);\n            } else if (/horizontal-scroll-/.test(startingCell.style)) {\n                self.scrollBox.scrollLeft = self.scrollBox.scrollWidth * (d.x / self.width);\n            } else if (touchingCell) {\n                self.mousemove(e, d);\n                self.draw();\n            } else {\n                if (animationFrames === 0) {\n                    self.scrollBox.scrollTo(self.touchScrollStart.scrollLeft - touchDelta.x,\n                        self.touchScrollStart.scrollTop - touchDelta.y);\n                }\n            }\n        };\n        self.touchcancel = function (e) {\n            if (self.dispatchEvent('touchcancel', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) { return; }\n            touchingCell = false;\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n            return;\n        };\n        self.stopPropagation = function (e) { e.stopPropagation(); };\n        self.addEventListener = function (ev, fn) {\n            self.events[ev] = self.events[ev] || [];\n            self.events[ev].unshift(fn);\n        };\n        self.removeEventListener = function (ev, fn) {\n            (self.events[ev] || []).forEach(function removeEachListener(sfn, idx) {\n                if (fn === sfn) {\n                    self.events[ev].splice(idx, 1);\n                }\n            });\n        };\n        self.dispatchEvent = function (ev, e) {\n            var defaultPrevented;\n            function preventDefault() {\n                defaultPrevented = true;\n            }\n            if (!self.events[ev]) { return; }\n            self.events[ev].forEach(function dispatchEachEvent(fn) {\n                e.ctx = self.ctx;\n                e.preventDefault = preventDefault;\n                fn.apply(self.intf, [e]);\n            });\n            return defaultPrevented;\n        };\n        self.resize = function (drawAfterResize) {\n            var cellBorder = self.style.cellBorderWidth * 2,\n                columnHeaderCellBorder =  self.style.columnHeaderCellBorderWidth * 2,\n                scrollHeight,\n                scrollWidth,\n                rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth(),\n                // TODO: What the hell are these numbers!?  They are probably some value in the style.\n                scrollDragPositionOffsetY = 30,\n                scrollDragPositionOffsetX = 15;\n            if (self.isChildGrid) {\n                self.height = self.parentNode.offsetHeight;\n                self.width = self.parentNode.offsetWidth;\n            } else {\n                self.parentNode = self.parentDOMNode;\n                if (!self.parentIsCanvas) {\n                    self.height = self.parentDOMNode.offsetHeight;\n                    self.width = self.parentDOMNode.offsetWidth;\n                    self.canvas.height = self.height * window.devicePixelRatio;\n                    self.canvas.width = self.width * window.devicePixelRatio;\n                    self.canvas.style.height = self.height + 'px';\n                    self.canvas.style.width = self.width + 'px';\n                }\n                self.canvasOffsetTop = self.args.canvasOffsetTop || 0;\n                self.canvasOffsetLeft = self.args.canvasOffsetLeft || 0;\n            }\n            scrollHeight = self.data.reduce(function reduceData(accumulator, row) {\n                return accumulator\n                    + (self.sizes.rows[row[self.uniqueId]] || self.style.cellHeight)\n                    + (self.sizes.trees[row[self.uniqueId]] || 0)\n                    + cellBorder;\n            }, 0) || 0;\n            scrollWidth = self.getVisibleSchema().reduce(function reduceSchema(accumulator, column) {\n                if (column.hidden) { return accumulator; }\n                return accumulator + (self.sizes.columns[column[self.uniqueId]] || column.width || self.style.columnWidth) + cellBorder;\n            }, 0) || 0;\n            if (self.attributes.showNewRow) {\n                scrollHeight += self.style.cellHeight + cellBorder;\n            }\n            self.scrollBox.width = self.width - columnHeaderCellWidth;\n            self.scrollBox.height = self.height - rowHeaderCellHeight - columnHeaderCellBorder;\n            self.scrollBox.top = rowHeaderCellHeight + columnHeaderCellBorder;\n            self.scrollBox.left = columnHeaderCellWidth;\n            self.scrollBox.scrollHeight = scrollHeight + self.style.scrollBarWidth - self.scrollBox.height;\n            self.scrollBox.scrollWidth = scrollWidth + self.style.scrollBarWidth - self.scrollBox.width;\n            self.scrollBox.widthBoxRatio = ((self.scrollBox.width - scrollDragPositionOffsetX)\n                / (self.scrollBox.scrollWidth + self.scrollBox.width - scrollDragPositionOffsetX));\n            self.scrollBox.scrollBoxWidth = self.scrollBox.width\n                * self.scrollBox.widthBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.heightBoxRatio = ((self.scrollBox.height - scrollDragPositionOffsetY)\n                / (self.scrollBox.scrollHeight + (self.scrollBox.height - scrollDragPositionOffsetY)));\n            self.scrollBox.scrollBoxHeight = self.scrollBox.height\n                * self.scrollBox.heightBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.scrollBoxWidth = Math.max(self.scrollBox.scrollBoxWidth, self.style.scrollBarBoxMinSize);\n            self.scrollBox.scrollBoxHeight = Math.max(self.scrollBox.scrollBoxHeight, self.style.scrollBarBoxMinSize);\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            self.resizeEditInput();\n            if (drawAfterResize) {\n                self.draw(true);\n            }\n            self.dispatchEvent('resize', {});\n            return true;\n        };\n        self.resizeEditInput = function () {\n            if (self.input) {\n                var pos = self.canvas.getBoundingClientRect(),\n                    s = self.scrollOffset(self.canvas),\n                    bx2 = (self.style.cellBorderWidth * 2),\n                    cell = self.getVisibleCellByIndex(self.input.editCell.columnIndex, self.input.editCell.rowIndex)\n                        || {x: -100, y: -100, height: 0, width: 0};\n                self.input.style.left = pos.left + cell.x - self.style.cellBorderWidth + self.canvasOffsetLeft - s.left + 'px';\n                self.input.style.top = pos.top + cell.y - bx2 + self.canvasOffsetTop - s.top + 'px';\n                self.input.style.height = cell.height - bx2 - 1 + 'px';\n                self.input.style.width = cell.width - bx2 - self.style.cellPaddingLeft + 'px';\n                self.clipElement(self.input);\n            }\n        };\n        self.scroll = function (e) {\n            var s = self.getVisibleSchema(),\n                cellBorder = self.style.cellBorderWidth * 2;\n            self.scrollIndexTop = 0;\n            self.scrollPixelTop = 0;\n            self.scrollIndexLeft = 0;\n            self.scrollPixelLeft = 0;\n            while (self.scrollPixelTop < self.scrollBox.scrollTop && self.scrollIndexTop < self.data.length) {\n                self.scrollPixelTop +=\n                    (self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || self.style.cellHeight)\n                    + (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0)\n                    + cellBorder;\n                self.scrollIndexTop += 1;\n            }\n            while (self.scrollPixelLeft < self.scrollBox.scrollLeft && self.scrollIndexLeft < s.length) {\n                self.scrollPixelLeft +=\n                    (self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width);\n                self.scrollIndexLeft += 1;\n            }\n            if (self.data.length > 0) {\n                self.scrollIndexLeft = Math.max(self.scrollIndexLeft - 1, 0);\n                self.scrollPixelLeft = Math.max(self.scrollPixelLeft\n                    - (self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width), 0);\n                self.scrollIndexTop = Math.max(self.scrollIndexTop - 1, 0);\n                self.scrollPixelTop = Math.max(self.scrollPixelTop\n                    - (self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || self.style.cellHeight)\n                    - (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0), 0);\n            }\n            self.ellipsisCache = {};\n            self.draw(true);\n            //TODO: figure out why this has to be delayed for child grids\n            //BUG: scrolling event on 3rd level hierarchy fails to move input box\n            requestAnimationFrame(self.resizeEditInput);\n            self.dispatchEvent('scroll', {top: self.scrollBox.scrollTop, left: self.scrollBox.scrollLeft});\n        };\n        self.mousemove = function (e, overridePos) {\n            if (self.contextMenu || self.input) {\n                return;\n            }\n            self.mouse = overridePos || self.getLayerPos(e);\n            var ctrl = (e.controlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                i,\n                s = self.getSchema(),\n                dragBounds,\n                sBounds,\n                x = self.mouse.x,\n                y = self.mouse.y,\n                o = self.getCellAt(x, y),\n                delta,\n                ev = {NativeEvent: e, cell: o, x: x, y: y},\n                previousCell = self.currentCell;\n            clearTimeout(self.scrollTimer);\n            if (!self.isInGrid({x: x, y: y})) {\n                self.hasFocus = false;\n            }\n            if (self.dispatchEvent('mousemove', ev)) {\n                return;\n            }\n            if (o && self.currentCell && (self.currentCell.rowIndex !== o.rowIndex\n                    || self.currentCell.columnIndex !== o.columnIndex)) {\n                self.cellBoundaryCrossed = true;\n                ev.cell = previousCell;\n                self.dispatchEvent('cellmouseout', ev);\n                ev.cell = o;\n                self.dispatchEvent('cellmouseover', ev);\n            }\n            self.currentCell = o;\n            if (!self.hasFocus) {\n                return;\n            }\n            self.hovers = {};\n            if (!self.draggingItem\n                    && o\n                    && self.scrollModes.indexOf(o.context) === -1) {\n                self.dragItem = o;\n                self.dragMode = o.dragContext;\n                self.canvas.style.cursor = o.context;\n                if (o.context === 'cell' && o.data) {\n                    self.canvas.style.cursor = 'pointer';\n                    self.hovers[o.data[self.uniqueId]] = [o.columnIndex];\n                }\n                if ((self.selecting || self.reorderObject)\n                        && o.context === 'cell'\n                        && o.data) {\n                    sBounds = self.getSelectionBounds();\n                    delta = {\n                        x: Math.abs(self.dragStart.x - x),\n                        y: Math.abs(self.dragStart.y - y),\n                    };\n                    if (self.dragStartObject.columnIndex !== -1 && e.shiftKey) {\n                        self.dragStartObject = {\n                            rowIndex: self.activeCell.rowIndex,\n                            columnIndex: self.activeCell.columnIndex\n                        };\n                    }\n                    dragBounds = {\n                        top: Math.min(self.dragStartObject.rowIndex, o.rowIndex),\n                        left: Math.min(self.dragStartObject.columnIndex, o.columnIndex),\n                        bottom: Math.max(self.dragStartObject.rowIndex, o.rowIndex),\n                        right: Math.max(self.dragStartObject.columnIndex, o.columnIndex)\n                    };\n                    if (self.dragStartObject.columnIndex === -1) {\n                        dragBounds.left = -1;\n                        dragBounds.right = s.length - 1;\n                        dragBounds.top = Math.min(sBounds.top, o.rowIndex);\n                        dragBounds.bottom = Math.max(sBounds.bottom, o.rowIndex);\n                    }\n                    if (self.dragStartObject.rowIndex !== o.rowIndex\n                                || self.dragStartObject.columnIndex !== o.columnIndex) {\n                        self.ignoreNextClick = true;\n                    }\n                    if (self.cellBoundaryCrossed || (delta.x === 0 && delta.y === 0) || self.attributes.rowSelectionMode) {\n                        if (self.attributes.rowSelectionMode || self.dragStartObject.columnIndex === -1) {\n                            self.selectRow(o.rowIndex, ctrl, true);\n                        } else {\n                            if (!self.dragAddToSelection && o.rowIndex) {\n                                if (self.selections[o.rowIndex] && self.selections[o.rowIndex].indexOf(o.columnIndex) !== -1) {\n                                    self.selections[o.rowIndex].splice(self.selections[o.rowIndex].indexOf(o.columnIndex), 1);\n                                }\n                            } else {\n                                self.selections[o.rowIndex] = self.selections[o.rowIndex] || [];\n                                if (self.selections[o.rowIndex].indexOf(o.columnIndex) === -1) {\n                                    self.selections[o.rowIndex].push(o.columnIndex);\n                                }\n                            }\n                        }\n                    }\n                    if ((!self.selectionBounds || (dragBounds.top !== self.selectionBounds.top\n                            || dragBounds.left !== self.selectionBounds.left\n                            || dragBounds.bottom !== self.selectionBounds.bottom\n                            || dragBounds.right !== self.selectionBounds.right)) && !ctrl) {\n                        self.selections = [];\n                        sBounds = dragBounds;\n                        if (self.attributes.rowSelectionMode) {\n                            for (i = sBounds.top; i <= sBounds.bottom; i += 1) {\n                                self.selectRow(i, true, true);\n                            }\n                        } else {\n                            self.selectArea(sBounds, true);\n                        }\n                    }\n                    self.autoScrollZone(e, x, y, ctrl);\n                }\n            }\n            self.cellBoundaryCrossed = false;\n            self.draw(true);\n        };\n        /**\n         * Ends editing, optionally aborting the edit.\n         * @memberof canvasDataGrid\n         * @name endEdit\n         * @method\n         * @param {boolean} abort When true, abort the edit.\n         */\n        self.endEdit = function (abort) {\n            var cell = self.input.editCell,\n                y = cell.rowIndex;\n            function abortEdit() {\n                abort = true;\n            }\n            if (self.dispatchEvent('beforeendedit', {\n                    cell: cell,\n                    newValue: self.input.value,\n                    oldValue: cell.value,\n                    abort: abortEdit,\n                    input: self.input\n                })) { return false; }\n            if (self.input.value !== cell.value && !abort) {\n                self.changes[y] = self.changes[y] || {};\n                self.changes[y][cell.header.name] = self.input.value;\n                cell.data[cell.header.name] = self.input.value;\n                if (y === self.data.length) {\n                    if (self.dispatchEvent('newrow', {\n                            value: self.input.value,\n                            defaultValue: cell.value,\n                            aborted: abort,\n                            cell: cell,\n                            input: self.input\n                        })) { return false; }\n                    self.uId += 1;\n                    self.addRow(cell.data);\n                    self.createNewRowData();\n                }\n                self.draw(true);\n            }\n            document.body.removeChild(self.input);\n            self.controlInput.focus();\n            self.dispatchEvent('endedit', {\n                cell: cell,\n                value: self.input.value,\n                aborted: abort,\n                input: self.input\n            });\n            self.input = undefined;\n            return true;\n        };\n        /**\n         * Begins editing at cell x, row y.\n         * @memberof canvasDataGrid\n         * @name beginEditAt\n         * @method\n         * @param {number} x The column index of the cell to edit.\n         * @param {number} y The row index of the cell to edit.\n         */\n        self.beginEditAt = function (x, y) {\n            if (!self.attributes.editable) { return; }\n            var cell = self.getVisibleCellByIndex(x, y),\n                s = self.getVisibleSchema(),\n                enumItems;\n            if (self.dispatchEvent('beforebeginedit', {cell: cell})) { return false; }\n            self.scrollIntoView(x, y);\n            self.setActiveCell(x, y);\n            if (cell.header.enum) {\n                self.input = document.createElement('select');\n            } else {\n                self.input = document.createElement(self.attributes.multiLine\n                    ? 'textarea' : 'input');\n            }\n            function postDraw() {\n                var option, valueInEnum;\n                cell = self.getVisibleCellByIndex(x, y);\n                if (cell.header.enum) {\n                    // add enums\n                    if (typeof cell.header.enum === 'function') {\n                        enumItems = cell.header.enum.apply(self.intf, [{cell: cell}]);\n                    } else if (Array.isArray(cell.header.enum)) {\n                        enumItems = cell.header.enum;\n                    }\n                    enumItems.forEach(function (e) {\n                        var i = document.createElement('option'),\n                            val,\n                            title;\n                        if (Array.isArray(e)) {\n                            val = e[0];\n                            title = e[1];\n                        } else {\n                            val = e;\n                            title = e;\n                        }\n                        if (val === cell.value) { valueInEnum = true; }\n                        i.value = val;\n                        i.innerHTML = title;\n                        self.input.appendChild(i);\n                    });\n                    if (!valueInEnum) {\n                        option = document.createElement('option');\n                        option.value = cell.value;\n                        option.innerHTML = cell.value;\n                        self.input.appendChild(option);\n                    }\n                    self.input.addEventListener('change', function () {\n                        self.endEdit();\n                        self.draw(true);\n                    });\n                }\n                document.body.appendChild(self.input);\n                self.createInlineStyle(self.input, 'canvas-datagrid-edit-input');\n                self.input.style.position = 'absolute';\n                self.input.editCell = cell;\n                self.resizeEditInput();\n                self.input.style.zIndex = '2';\n                self.input.value = cell.value;\n                self.input.focus();\n                self.input.addEventListener('click', self.stopPropagation);\n                self.input.addEventListener('dblclick', self.stopPropagation);\n                self.input.addEventListener('mouseup', self.stopPropagation);\n                self.input.addEventListener('mousedown', self.stopPropagation);\n                self.input.addEventListener('keydown', function (e) {\n                    var nx = cell.columnIndex,\n                        ny = cell.rowIndex;\n                    // esc\n                    if (e.keyCode === 27) {\n                        self.endEdit(true);\n                        self.draw(true);\n                    // enter\n                    } else if (e.keyCode === 13\n                            && (!self.attributes.multiLine\n                                || (self.attributes.multiLine && e.shiftKey))) {\n                        self.endEdit();\n                        self.draw(true);\n                    } else if (e.keyCode === 9) {\n                        e.preventDefault();\n                        if (!self.endEdit()) {\n                            return;\n                        }\n                        if (e.shiftKey) {\n                            nx -= 1;\n                        } else {\n                            nx += 1;\n                        }\n                        if (nx < 0) {\n                            nx = s.length - 1;\n                            ny -= 1;\n                        }\n                        if (nx > s.length - 1) {\n                            nx = 0;\n                            ny += 1;\n                        }\n                        if (ny < 0) {\n                            ny = self.data.length - 1;\n                        }\n                        if (ny > self.data.length - 1) {\n                            ny = 0;\n                        }\n                        self.beginEditAt(nx, ny);\n                    }\n                });\n            }\n            postDraw();\n            self.dispatchEvent('beginedit', {cell: cell, input: self.input});\n        };\n        self.click = function (e, overridePos) {\n            var i,\n                selectionChanged,\n                ctrl = (e.controlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                pos = overridePos || self.getLayerPos(e);\n            self.currentCell = self.getCellAt(pos.x, pos.y);\n            if (self.currentCell.grid !== undefined) {\n                return;\n            }\n            function checkSelectionChange() {\n                if (!selectionChanged) { return; }\n                self.dispatchEvent('selectionchanged', {\n                    selectedData: self.getSelectedData(),\n                    selections: self.selections,\n                    selectionBounds: self.selectionBounds\n                });\n            }\n            if (self.input) {\n                self.endEdit();\n            }\n            if (self.ignoreNextClick) {\n                self.ignoreNextClick = false;\n                return;\n            }\n            i = self.currentCell;\n            if (self.dispatchEvent('click', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'cell') {\n                if (self.currentCell.style === 'cornerCell') {\n                    self.order(self.uniqueId, 'asc');\n                    self.setFilter();\n                    checkSelectionChange();\n                    return;\n                }\n                if (self.currentCell.style === 'columnHeaderCell') {\n                    if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                        if (self.orderBy === i.header.name) {\n                            self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                        } else {\n                            self.orderDirection = 'asc';\n                        }\n                        self.order(i.header.name, self.orderDirection);\n                        checkSelectionChange();\n                        return;\n                    }\n                    if (self.attributes.columnHeaderClickBehavior === 'select') {\n                        self.selectColumn(i.header.index, ctrl, e.shiftKey, true);\n                        checkSelectionChange();\n                        self.draw();\n                        return;\n                    }\n                }\n                if (['rowHeaderCell', 'columnHeaderCell'].indexOf(self.currentCell.style) === -1 && !ctrl) {\n                    self.setActiveCell(i.columnIndex, i.rowIndex);\n                }\n                self.selections[i.rowIndex] = self.selections[i.rowIndex] || [];\n                if ((self.attributes.rowSelectionMode || self.currentCell.style === 'rowHeaderCell')) {\n                    if (self.currentCell.style === 'rowHeaderCell'\n                            && self.attributes.tree && pos.x > 0\n                            && pos.x - self.currentCell.x < self.style.treeArrowWidth\n                            + self.style.treeArrowMarginLeft\n                            + self.style.treeArrowMarginRight + self.style.treeArrowClickRadius\n                            && pos.y - self.currentCell.y < self.style.treeArrowHeight\n                            + self.style.treeArrowMarginTop + self.style.treeArrowClickRadius\n                            && pos.y > 0) {\n                        self.toggleTree(i.rowIndex);\n                        return;\n                    }\n                    selectionChanged = true;\n                    self.selectRow(i.rowIndex, ctrl, true);\n                }\n                if (e.shiftKey && !ctrl) {\n                    self.selectionBounds = self.getSelectionBounds();\n                    self.selectArea(undefined, false);\n                }\n            }\n            checkSelectionChange();\n            self.draw(true);\n        };\n        self.dragResizeColumn = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = self.resizingStartingWidth + pos.x - self.dragStart.x;\n            y = self.resizingStartingHeight + pos.y - self.dragStart.y;\n            if (x < self.style.minColumnWidth) {\n                x = self.style.minColumnWidth;\n            }\n            if (y < self.style.minRowHeight) {\n                y = self.style.minRowHeight;\n            }\n            if (self.dispatchEvent('resizecolumn', {x: x, y: y, draggingItem: self.draggingItem})) { return false; }\n            if (self.scrollBox.scrollLeft > self.scrollBox.scrollWidth - self.attributes.resizeScrollZone\n                    && self.dragMode === 'ew-resize') {\n                self.resize(true);\n                self.scrollBox.scrollLeft += x;\n            }\n            if (self.dragMode === 'ew-resize') {\n                self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] = x;\n                if (['rowHeaderCell', 'cornerCell'].indexOf(self.draggingItem.header.style) !== -1) {\n                    self.resize(true);\n                }\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.dragMode === 'ns-resize') {\n                if (self.draggingItem.rowOpen) {\n                    self.sizes.trees[self.draggingItem.data[self.uniqueId]] = y;\n                } else if (self.attributes.globalRowResize) {\n                    self.style.cellHeight = y;\n                } else {\n                    self.sizes.rows[self.draggingItem.data[self.uniqueId]] = y;\n                }\n                self.dispatchEvent('resizerow', {row: y});\n                self.resizeChildGrids();\n                return;\n            }\n            self.ellipsisCache = {};\n        };\n        self.stopDragResize = function () {\n            self.resize();\n            document.body.removeEventListener('mousemove', self.dragResizeColumn, false);\n            document.body.removeEventListener('mouseup', self.stopDragResize, false);\n            self.setStorageData();\n            self.draw(true);\n            self.ignoreNextClick = true;\n        };\n        self.scrollGrid = function (e) {\n            var pos = self.getLayerPos(e);\n            if (self.attributes.scrollPointerLock && self.pointerLockPosition\n                    && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                self.pointerLockPosition.x += e.movementX;\n                self.pointerLockPosition.y += e.movementY;\n                pos = self.pointerLockPosition;\n            }\n            self.scrollMode = self.getCellAt(pos.x, pos.y).context;\n            if (self.scrollMode === 'horizontal-scroll-box' && self.scrollStartMode !== 'horizontal-scroll-box') {\n                self.scrollStartMode = 'horizontal-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.left = self.scrollBox.scrollLeft;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box' && self.scrollStartMode !== 'vertical-scroll-box') {\n                self.scrollStartMode = 'vertical-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.top = self.scrollBox.scrollTop;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollStartMode === 'vertical-scroll-box'\n                    && self.scrollMode !== 'vertical-scroll-box') {\n                self.scrollMode = 'vertical-scroll-box';\n            }\n            if (self.scrollStartMode === 'horizontal-scroll-box'\n                    && self.scrollMode !== 'horizontal-scroll-box') {\n                self.scrollMode = 'horizontal-scroll-box';\n            }\n            clearTimeout(self.scrollTimer);\n            if (self.scrollModes.indexOf(self.scrollMode) === -1) {\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box') {\n                self.scrollBox.scrollTop = self.scrollStart.top + ((pos.y - self.dragStart.y)\n                    / self.scrollBox.heightBoxRatio);\n            } else if (self.scrollMode === 'vertical-scroll-top') {\n                self.scrollBox.scrollTop -= (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'vertical-scroll-bottom') {\n                self.scrollBox.scrollTop += (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n            if (self.scrollMode === 'horizontal-scroll-box') {\n                self.scrollBox.scrollLeft = self.scrollStart.left + ((pos.x - self.dragStart.x)\n                    / self.scrollBox.widthBoxRatio);\n            } else if (self.scrollMode === 'horizontal-scroll-right') {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'horizontal-scroll-left') {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.stopScrollGrid = function () {\n            clearTimeout(self.scrollTimer);\n            if (document.exitPointerLock) {\n                document.exitPointerLock();\n            }\n            document.body.removeEventListener('mousemove', self.scrollGrid, false);\n        };\n        self.dragReorder = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = pos.x - self.dragStart.x;\n            y = pos.y - self.dragStart.y;\n            if (!self.attributes.allowColumnReordering && self.dragMode === 'column-reorder') {\n                return;\n            }\n            if (!self.attributes.allowRowReordering && self.dragMode === 'row-reorder') {\n                return;\n            }\n            if (self.dispatchEvent('reordering', {\n                    NativeEvent: e,\n                    source: self.dragStartObject,\n                    target: self.currentCell,\n                    dragMode: self.dragMode\n                })) {\n                return;\n            }\n            if (Math.abs(x) > self.attributes.reorderDeadZone || Math.abs(y) > self.attributes.reorderDeadZone) {\n                self.reorderObject = self.dragStartObject;\n                self.reorderTarget = self.currentCell;\n                self.reorderObject.dragOffset = {\n                    x: x,\n                    y: y\n                };\n                self.autoScrollZone(e, pos.x, pos.x, false);\n            }\n        };\n        self.stopDragReorder = function (e) {\n            var cr = {\n                    'row-reorder': self.orders.rows,\n                    'column-reorder': self.orders.columns\n                },\n                i = {\n                    'row-reorder': 'rowIndex',\n                    'column-reorder': 'columnIndex'\n                }[self.dragMode];\n            document.body.removeEventListener('mousemove', self.dragReorder, false);\n            document.body.removeEventListener('mouseup', self.stopDragReorder, false);\n            if (self.reorderObject\n                    && self.reorderTarget) {\n                self.ignoreNextClick = true;\n                if (self.reorderObject[i] !== self.reorderTarget[i]\n                        && !self.dispatchEvent('reorder', {\n                            NativeEvent: e,\n                            source: self.reorderObject,\n                            target: self.reorderTarget,\n                            dragMode: self.dragMode\n                        })) {\n                    cr[self.dragMode].splice(cr[self.dragMode].indexOf(self.reorderObject[i]), 1);\n                    cr[self.dragMode].splice(cr[self.dragMode].indexOf(self.reorderTarget[i]), 0, self.reorderObject[i]);\n                    self.setStorageData();\n                }\n            }\n            self.reorderObject = undefined;\n            self.reorderTarget = undefined;\n            self.draw(true);\n        };\n        self.mousedown = function (e, overridePos) {\n            self.lastMouseDownTarget = e.target;\n            if (self.dispatchEvent('mousedown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (e.button === 2 || self.input) { return; }\n            var ctrl = (e.controlKey || e.metaKey);\n            self.dragStart = overridePos || self.getLayerPos(e);\n            self.scrollStart = {\n                left: self.scrollBox.scrollLeft,\n                top: self.scrollBox.scrollTop\n            };\n            self.dragStartObject = self.getCellAt(self.dragStart.x, self.dragStart.y);\n            self.dragAddToSelection = !self.dragStartObject.selected;\n            if (!ctrl && !e.shiftKey && !/(vertical|horizontal)-scroll-(bar|box)/\n                    .test(self.dragStartObject.context) && !self.currentCell.isColumnHeader) {\n                self.selections = [];\n            }\n            if (self.dragStartObject.isGrid) {\n                return;\n            }\n            if (self.scrollModes.indexOf(self.dragStartObject.context) !== -1) {\n                self.scrollMode = self.dragStartObject.context;\n                self.scrollStartMode = self.dragStartObject.context;\n                self.scrollGrid(e);\n                if (self.attributes.scrollPointerLock\n                        && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                    self.pointerLockPosition = {\n                        x: self.dragStart.x,\n                        y: self.dragStart.y\n                    };\n                    self.canvas.requestPointerLock();\n                }\n                document.body.addEventListener('mousemove', self.scrollGrid, false);\n                document.body.addEventListener('mouseup', self.stopScrollGrid, false);\n                self.ignoreNextClick = true;\n                return;\n            }\n            if (self.dragMode === 'cell') {\n                self.selecting = true;\n                if (self.attributes.rowSelectionMode) {\n                    self.selectRow(self.dragStartObject.rowIndex, ctrl, true);\n                }\n                return self.mousemove(e);\n            }\n            if (['ns-resize', 'ew-resize'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragItem;\n                if (self.draggingItem.rowOpen) {\n                    self.resizingStartingHeight = self.sizes.trees[self.draggingItem.data[self.uniqueId]];\n                } else {\n                    self.resizingStartingHeight = self.sizes.rows[self.draggingItem.data[self.uniqueId]] || self.style.cellHeight;\n                }\n                self.resizingStartingWidth = self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] || self.draggingItem.header.width;\n                document.body.addEventListener('mousemove', self.dragResizeColumn, false);\n                document.body.addEventListener('mouseup', self.stopDragResize, false);\n            }\n            if (['row-reorder', 'column-reorder'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragItem;\n                document.body.addEventListener('mousemove', self.dragReorder, false);\n                document.body.addEventListener('mouseup', self.stopDragReorder, false);\n            }\n        };\n        self.mouseup = function (e) {\n            clearTimeout(self.scrollTimer);\n            self.cellBoundaryCrossed = true;\n            self.selecting = undefined;\n            self.draggingItem = undefined;\n            self.dragStartObject = undefined;\n            if (self.dispatchEvent('mouseup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            if (self.currentCell && self.currentCell.grid !== undefined) {\n                return;\n            }\n            if (self.contextMenu || self.input) { return; }\n            if (self.dragStart && self.isInGrid(self.dragStart)) {\n                self.controlInput.focus();\n            }\n            e.preventDefault();\n        };\n        self.keydown = function (e) {\n            var i,\n                x = self.activeCell.columnIndex,\n                y = self.activeCell.rowIndex,\n                ctrl = (e.controlKey || e.metaKey),\n                last = self.data.length - 1,\n                cols = self.getVisibleSchema().length - 1;\n            if (self.dispatchEvent('keydown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            if (self.attributes.showNewRow) {\n                last += 1;\n            }\n            if (e.keyCode === 'Tab') {\n                e.preventDefault();\n            }\n            // ctrl + a\n            if (ctrl && e.keyCode === 65) {\n                self.selectAll();\n            //ArrowDown\n            } else if (e.keyCode === 40) {\n                y += 1;\n            //ArrowUp\n            } else if (e.keyCode === 38) {\n                y -= 1;\n            //ArrowLeft Tab\n            } else if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {\n                x -= 1;\n            //ArrowRight Tab\n            } else if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {\n                x += 1;\n            //PageUp\n            } else if (e.keyCode === 33) {\n                y -= self.page;\n                e.preventDefault();\n            //PageDown\n            } else if (e.keyCode === 34) {\n                y += self.page;\n                e.preventDefault();\n            //Home ArrowUp\n            } else if (e.keyCode === 36 || (ctrl && e.keyCode === 38)) {\n                y = 0;\n            //End ArrowDown\n            } else if (e.keyCode === 35 || (ctrl && e.keyCode === 40)) {\n                y = self.data.length - 1;\n            //ArrowRight\n            } else if (ctrl && e.keyCode === 39) {\n                x = cols;\n            //ArrowLeft\n            } else if (ctrl && e.keyCode === 37) {\n                x = 0;\n            }\n            //Enter\n            if (e.keyCode === 13) {\n                return self.beginEditAt(x, y);\n            }\n            //Space\n            if (e.keyCode === 32) {\n                self.selections = [];\n                self.selections[Math.max(y, 0)] = [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                if (self.attributes.rowSelectionMode) {\n                    for (i = self.selectionBounds.top; i <= self.selectionBounds.bottom; i += 1) {\n                        self.selectRow(i, ctrl, true);\n                    }\n                } else {\n                    self.selectArea(undefined, ctrl);\n                }\n                e.preventDefault();\n                self.draw(true);\n                return;\n            }\n            if (x < 0) {\n                x = 0;\n            }\n            if (y > last) {\n                y = last;\n            }\n            if (y < 0) {\n                y = 0;\n            }\n            if (x > cols) {\n                x = cols;\n            }\n            // Arrows\n            if (e.shiftKey && [37, 38, 39, 40].indexOf(e.keyCode) !== -1) {\n                self.selections[Math.max(y, 0)] = self.selections[Math.max(y, 0)] || [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                self.selectArea(undefined, ctrl);\n                self.draw(true);\n            }\n            if (x !== self.activeCell.columnIndex || y !== self.activeCell.rowIndex) {\n                self.scrollIntoView(x !== self.activeCell.columnIndex ? x : undefined, y !== self.activeCell.rowIndex ? y : undefined);\n                self.setActiveCell(x, y);\n                if (!e.shiftKey && self.attributes.selectionFollowsActiveCell) {\n                    if (!ctrl) {\n                        self.selections = [];\n                    }\n                    self.selections[y] = self.selections[y] || [];\n                    self.selections[y].push(x);\n                    self.dispatchEvent('selectionchanged', {\n                        selectedData: self.getSelectedData(),\n                        selections: self.selections,\n                        selectionBounds: self.selectionBounds\n                    });\n                }\n                self.draw(true);\n            }\n        };\n        self.keyup = function (e) {\n            if (self.dispatchEvent('keyup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            self.controlInput.value = '';\n        };\n        self.keypress = function (e) {\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.dispatchEvent('keypress', {NativeEvent: e, cell: self.currentCell})) { return; }\n        };\n        self.dblclick = function (e) {\n            if (self.dispatchEvent('dblclick', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'columnHeaderCell') {\n                self.fitColumnToValues(self.currentCell.header.name);\n            } else if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'cornerCell') {\n                self.autosize();\n            } else if (['cell', 'activeCell'].indexOf(self.currentCell.style) !== -1) {\n                self.beginEditAt(self.currentCell.columnIndex, self.currentCell.rowIndex);\n            }\n        };\n        self.scrollWheel = function (e) {\n            if (self.dispatchEvent('wheel', {NativeEvent: e})) {\n                return;\n            }\n            self.touchHaltAnimation = true;\n            var l = self.scrollBox.scrollLeft,\n                t = self.scrollBox.scrollTop;\n            if (self.hasFocus) {\n                self.scrollBox.scrollTop += e.deltaY;\n                self.scrollBox.scrollLeft += e.deltaX;\n            }\n            if (t !== self.scrollBox.scrollTop || l !== self.scrollBox.scrollLeft) {\n                e.preventDefault();\n            }\n        };\n        self.copy = function (e) {\n            if (self.dispatchEvent('copy', {NativeEvent: e})) { return; }\n            if (!self.hasFocus || !e.clipboardData) { return; }\n            var rows = [], sData = self.getSelectedData();\n            if (sData.length > 0) {\n                sData.forEach(function (row) {\n                    if (row) {\n                        var r = [];\n                        Object.keys(row).forEach(function (key) {\n                            r.push(row[key]);\n                        });\n                        r.join(',');\n                        rows.push(r);\n                    }\n                });\n                e.clipboardData.setData('text/plain', rows.join('\\n'));\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/events.js\n// module id = 2\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.orders = {\n            rows: [],\n            columns: []\n        };\n        self.hasFocus = false;\n        self.activeCell = {\n            columnIndex: 0,\n            rowIndex: 0\n        };\n        self.storageName = 'canvasDataGrid';\n        self.invalidSearchExpClass = 'canvas-datagrid-invalid-search-regExp';\n        self.localStyleLibraryStorageKey = 'canvas-datagrid-user-style-library';\n        self.uniqueId = '_canvasDataGridUniqueId';\n        self.orderBy = self.uniqueId;\n        self.orderDirection = 'asc';\n        self.columnFilters = {};\n        self.filters = {};\n        self.ellipsisCache = {};\n        self.scrollBox = {};\n        self.visibleRows = [];\n        self.sizes = {\n            rows: {},\n            columns: {},\n            trees: {}\n        };\n        self.currentFilter = function () {\n            return true;\n        };\n        self.selections = [];\n        self.hovers = {};\n        self.attributes = {};\n        self.style = {};\n        self.intf = {};\n        self.formatters = {};\n        self.sorters = {};\n        self.schemaHashes = {};\n        self.events = {};\n        self.uId = 0;\n        self.changes = [];\n        self.scrollIndexTop = 0;\n        self.scrollPixelTop = 0;\n        self.scrollIndexLeft = 0;\n        self.scrollPixelLeft = 0;\n        self.childGrids = {};\n        self.openChildren = {};\n        self.scrollModes = [\n            'vertical-scroll-box',\n            'vertical-scroll-top',\n            'vertical-scroll-bottom',\n            'horizontal-scroll-box',\n            'horizontal-scroll-right',\n            'horizontal-scroll-left'\n        ];\n        self.mouse = { x: 0, y: 0};\n        self.getSelectedData = function (expandToRow) {\n            var d = [], s = self.getSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                d[index] = {};\n                if (expandToRow) {\n                    s.forEach(function (column) {\n                        d[index][column.name] = self.data[index][column.name];\n                    });\n                } else {\n                    row.forEach(function (col) {\n                        if (col === -1) { return; }\n                        d[index][s[col].name] = self.data[index][s[col].name];\n                    });\n                }\n            });\n            return d;\n        };\n        self.scrollOffset = function (e) {\n            var x = 0, y = 0;\n            while (e.parentNode) {\n                if (e.nodeType !== 'canvas-datagrid-tree'\n                        && e.nodeType !== 'canvas-datagrid-cell') {\n                    x -= e.scrollLeft;\n                    y -= e.scrollTop;\n                }\n                e = e.parentNode;\n            }\n            return {left: x, top: y};\n        };\n        self.position = function (e, ignoreScrollOffset) {\n            var x = 0, y = 0, s = e, h, w;\n            while (e.offsetParent) {\n                x += e.offsetLeft;\n                y += e.offsetTop;\n                h = e.offsetHeight;\n                w = e.offsetWidth;\n                e = e.offsetParent;\n            }\n            if (ignoreScrollOffset) {\n                return {left: x, top: y, height: h, width: w};\n            }\n            e = s;\n            s = self.scrollOffset(e);\n            return { left: x + s.left, top: y + s.top, height: h, width: w };\n        };\n        self.getLayerPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.clientX - rect.left,\n                    y: e.clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        self.fillArray = function (low, high, step) {\n            step = step || 1;\n            var i = [], x;\n            for (x = low; x <= high; x += step) {\n                i[x] = x;\n            }\n            return i;\n        };\n        self.getRowHeaderCellHeight = function () {\n            if (!self.attributes.showColumnHeaders) { return 0; }\n            return self.sizes.rows[-1] || self.style.columnHeaderCellHeight;\n        };\n        self.getColumnHeaderCellWidth = function () {\n            if (!self.attributes.showRowHeaders) { return 0; }\n            return self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth;\n        };\n        self.setStorageData = function () {\n            if (!self.attributes.saveAppearance) { return; }\n            localStorage.setItem(self.storageName + '-' + self.attributes.name, JSON.stringify({\n                sizes: {\n                    rows: self.sizes.rows,\n                    columns: self.sizes.columns\n                },\n                orders: {\n                    rows: self.orders.rows,\n                    columns: self.orders.columns\n                },\n                orderBy: self.orderBy,\n                orderDirection: self.orderDirection\n            }));\n        };\n        self.getSchema = function () {\n            return self.schema || self.tempSchema;\n        };\n        self.createColumnOrders = function () {\n            var s = self.getSchema();\n            self.orders.columns = self.fillArray(0, s.length - 1);\n        };\n        self.createRowOrders = function () {\n            self.orders.rows = self.fillArray(0, self.data.length - 1);\n        };\n        self.getVisibleSchema = function () {\n            return self.getSchema().filter(function (col) { return !col.hidden; });\n        };\n        self.applyDefaultValue = function (row, header) {\n            var d = header.defaultValue || '';\n            if (typeof d === 'function') {\n                d = d.apply(self.intf, [header]);\n            }\n            row[header.name] = d;\n        };\n        self.createNewRowData = function () {\n            self.newRow = {};\n            self.newRow[self.uniqueId] = self.uId;\n            self.uId += 1;\n            self.getSchema().forEach(function forEachHeader(header) {\n                self.applyDefaultValue(self.newRow, header);\n            });\n        };\n        self.getSchemaNameHash = function (key) {\n            var n = 0;\n            while (self.schemaHashes[key]) {\n                n += 1;\n                key = key + n;\n            }\n            return key;\n        };\n        self.filter = function (type) {\n            var f = self.filters[type];\n            if (!f && type !== undefined) {\n                console.warn('Cannot find filter for type %s, falling back to substring match.', type);\n                f = self.filters.string;\n            }\n            return f;\n        };\n        self.getBestGuessDataType = function (columnName) {\n            var t, x, l = self.data.length;\n            for (x = 0; x < l; x += 1) {\n                if ([null, undefined].indexOf(self.data[x][columnName]) !== -1) {\n                    t = typeof self.data[x];\n                    return t === 'object' ? 'string' : t;\n                }\n            }\n            return 'string';\n        };\n        self.drawChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].draw();\n            });\n        };\n        self.resizeChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].resize();\n            });\n        };\n        self.getClippingRect = function (ele) {\n            var boundingRect = self.position(self.parentNode),\n                eleRect = self.position(ele),\n                s = self.scrollOffset(self.canvas),\n                clipRect = {\n                    x: 0,\n                    y: 0,\n                    h: 0,\n                    w: 0\n                },\n                parentRect = {\n                    x: -Infinity,\n                    y: -Infinity,\n                    h: Infinity,\n                    w: Infinity\n                },\n                rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth();\n            boundingRect.top -= s.top;\n            boundingRect.left -= s.left;\n            eleRect.top -= s.top;\n            eleRect.left -= s.left;\n            clipRect.h = boundingRect.top + boundingRect.height - ele.offsetTop - self.style.scrollBarWidth;\n            clipRect.w = boundingRect.left + boundingRect.width - ele.offsetLeft - self.style.scrollBarWidth;\n            clipRect.x = boundingRect.left + (eleRect.left * -1) + columnHeaderCellWidth;\n            clipRect.y = boundingRect.top + (eleRect.top * -1) + rowHeaderCellHeight;\n            return {\n                x: clipRect.x > parentRect.x ? clipRect.x : parentRect.x,\n                y: clipRect.y > parentRect.y ? clipRect.y : parentRect.y,\n                h: clipRect.h < parentRect.h ? clipRect.h : parentRect.h,\n                w: clipRect.w < parentRect.w ? clipRect.w : parentRect.w\n            };\n        };\n        self.clipElement = function (ele) {\n            var clipRect = self.getClippingRect(ele);\n            if (clipRect.w < 0) { clipRect.w = 0; }\n            if (clipRect.h < 0) { clipRect.h = 0; }\n            ele.style.clip = 'rect('\n                + clipRect.y + 'px,'\n                + clipRect.w + 'px,'\n                + clipRect.h + 'px,'\n                + clipRect.x + 'px'\n                + ')';\n            // INFO https://developer.mozilla.org/en-US/docs/Web/CSS/clip\n            // clip has been \"deprecated\" for clipPath.  Of course nothing but chrome\n            // supports clip path, so we'll keep using clip until someday clipPath becomes\n            // more widely support.  The code below works correctly, but setting clipPath and clip\n            // at the same time has undesirable results.\n            // ele.style.clipPath = 'polygon('\n            //     + clipRect.x + 'px ' + clipRect.y + 'px,'\n            //     + clipRect.x + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.y + 'px'\n            //     + ')';\n        };\n        self.autoScrollZone = function (e, x, y, ctrl) {\n            var setTimer,\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth(),\n                rowHeaderCellHeight = self.getRowHeaderCellHeight();\n            if (x > self.width - self.attributes.selectionScrollZone && x < self.width) {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y > self.height - self.attributes.selectionScrollZone && y < self.height) {\n                self.scrollBox.scrollTop += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (x - self.attributes.selectionScrollZone - columnHeaderCellWidth < 0) {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y - self.attributes.selectionScrollZone - rowHeaderCellHeight < 0) {\n                self.scrollBox.scrollTop -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (setTimer && !ctrl && self.currentCell && self.currentCell.columnIndex !== -1) {\n                self.scrollTimer = setTimeout(self.mousemove, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.refreshFromOrigialData = function () {\n            self.data = self.originalData.filter(function (row) {\n                return true;\n            });\n        };\n        self.validateColumn = function (c, s) {\n            if (!c.name) {\n                throw new Error('A column must contain at least a name.');\n            }\n            if (s.filter(function (i) { return i.name === c.name; }).length > 0) {\n                throw new Error('A column with the name '\n                    + c.name + ' already exists and cannot be added again.');\n            }\n            return true;\n        };\n        self.setDefaults = function (obj1, obj2, key, def) {\n            obj1[key] = obj2[key] === undefined ? def : obj2[key];\n        };\n        self.setAttributes = function () {\n            self.defaults.attributes.forEach(function eachAttribute(i) {\n                self.setDefaults(self.attributes, self.args, i[0], i[1]);\n            });\n        };\n        self.setStyle = function () {\n            self.defaults.styles.forEach(function eachStyle(i) {\n                self.setDefaults(self.style, self.args.style || {}, i[0], i[1]);\n            });\n        };\n        self.autosize = function (colName) {\n            self.getVisibleSchema().forEach(function (col) {\n                if (col.name === colName || colName === undefined) {\n                    self.fitColumnToValues(col.name);\n                }\n            });\n            self.fitColumnToValues('cornerCell');\n        };\n        self.dispose = function () {\n            if (!self.isChildGrid && self.canvas && self.canvas.parentNode) {\n                self.canvas.parentNode.removeChild(self.canvas);\n            }\n            self.eventParent.removeEventListener('mouseup', self.mouseup, false);\n            self.eventParent.removeEventListener('mousedown', self.mousedown, false);\n            self.eventParent.removeEventListener('dblclick', self.dblclick, false);\n            self.eventParent.removeEventListener('click', self.click, false);\n            self.eventParent.removeEventListener('mousemove', self.mousemove);\n            self.eventParent.removeEventListener('wheel', self.scrollWheel, false);\n            self.canvas.removeEventListener('contextmenu', self.contextmenu, false);\n            self.canvas.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('keypress', self.keypress, false);\n            self.controlInput.removeEventListener('keyup', self.keyup, false);\n            self.controlInput.removeEventListener('keydown', self.keydown, false);\n            window.removeEventListener('resize', self.resize);\n            if (self.observer && self.observer.disconnect) {\n                self.observer.disconnect();\n            }\n        };\n        self.tryLoadStoredOrders = function () {\n            var s;\n            if (self.storedSettings && typeof self.storedSettings.orders === 'object') {\n                if (self.storedSettings.orders.rows.length >= self.data.length) {\n                    self.orders.rows = self.storedSettings.orders.rows;\n                }\n                s = self.getSchema();\n                self.orders.columns = self.storedSettings.orders.columns;\n                s.forEach(function (h, i) {\n                    if (self.orders.columns.indexOf(i) === -1) {\n                        self.orders.columns.push(i);\n                    }\n                });\n                self.orderBy = self.storedSettings.orderBy === undefined\n                    ? self.uniqueId : self.storedSettings.orderBy;\n                self.orderDirection = self.storedSettings.orderDirection === undefined\n                    ? self.uniqueId : self.storedSettings.orderDirection;\n                if (self.getHeaderByName(self.orderBy) && self.orderDirection) {\n                    self.order(self.orderBy, self.orderDirection);\n                }\n            }\n        };\n        self.getFontHeight = function (fontStyle) {\n            return parseFloat(fontStyle, 10);\n        };\n        self.parseFont = function (key) {\n            if (/Font/.test(key)) {\n                self.style[key + 'Height'] = self.getFontHeight(self.style[key]);\n            }\n        };\n        self.init = function () {\n            var publicStyleKeyIntf = {};\n            self.setAttributes();\n            self.setStyle();\n            self.initScrollBox();\n            self.setDom();\n            Object.keys(self.style).forEach(self.parseFont);\n            self.intf.type = 'canvas-datagrid';\n            self.intf.addEventListener = self.addEventListener;\n            self.intf.removeEventListener = self.removeEventListener;\n            self.intf.dispatchEvent = self.dispatchEvent;\n            self.intf.dispose = self.dispose;\n            self.intf.appendTo = self.appendTo;\n            self.intf.filters = self.filters;\n            self.intf.sorters = self.sorters;\n            self.intf.autosize = self.autosize;\n            self.intf.beginEditAt = self.beginEditAt;\n            self.intf.endEdit = self.endEdit;\n            self.intf.setActiveCell = self.setActiveCell;\n            self.intf.scrollIntoView = self.scrollIntoView;\n            self.intf.clearChangeLog = self.clearChangeLog;\n            self.intf.gotoCell = self.gotoCell;\n            self.intf.gotoRow = self.gotoRow;\n            self.intf.findColumnScrollLeft = self.findColumnScrollLeft;\n            self.intf.findRowScrollTop = self.findRowScrollTop;\n            self.intf.fitColumnToValues = self.fitColumnToValues;\n            self.intf.findColumnMaxTextLength = self.findColumnMaxTextLength;\n            self.intf.disposeContextMenu = self.disposeContextMenu;\n            self.intf.getCellAt = self.getCellAt;\n            self.intf.isCellVisible = self.isCellVisible;\n            self.intf.order = self.order;\n            self.intf.draw = self.draw;\n            self.intf.selectArea = self.selectArea;\n            self.intf.clipElement = self.clipElement;\n            self.intf.getSchemaFromData = self.getSchemaFromData;\n            self.intf.setFilter = self.setFilter;\n            self.intf.selectRow = self.selectRow;\n            self.intf.parentGrid = self.parentGrid;\n            self.intf.toggleTree = self.toggleTree;\n            self.intf.expandTree = self.expandTree;\n            self.intf.collapseTree = self.collapseTree;\n            self.intf.canvas = self.canvas;\n            self.intf.context = self.ctx;\n            self.intf.insertRow = self.insertRow;\n            self.intf.deleteRow = self.deleteRow;\n            self.intf.addRow = self.addRow;\n            self.intf.insertColumn = self.insertColumn;\n            self.intf.deleteColumn = self.deleteColumn;\n            self.intf.addColumn = self.addColumn;\n            self.intf.getClippingRect = self.getClippingRect;\n            self.intf.setRowHeight = self.setRowHeight;\n            self.intf.setColumnWidth = self.setColumnWidth;\n            self.intf.resetColumnWidths = self.resetColumnWidths;\n            self.intf.resetRowHeights = self.resetRowHeights;\n            self.intf.resize = self.resize;\n            self.intf.drawChildGrids = self.drawChildGrids;\n            self.intf.assertPxColor = self.assertPxColor;\n            self.intf.clearPxColorAssertions = self.clearPxColorAssertions;\n            self.intf.integerToAlpha = self.integerToAlpha;\n            self.intf.style = {};\n            Object.keys(self.style).forEach(function (key) {\n                // unless this line is here, Object.keys() will not work on <instance>.style\n                publicStyleKeyIntf[key] = undefined;\n                Object.defineProperty(publicStyleKeyIntf, key, {\n                    get: function () {\n                        return self.style[key];\n                    },\n                    set: function (value) {\n                        self.parseFont(value);\n                        self.style[key] = value;\n                        self.draw(true);\n                        self.dispatchEvent('stylechanged', {name: key, value: value});\n                    }\n                });\n            });\n            /**\n             * When true, the grid is has focus.\n             * @memberof canvasDataGrid\n             * @property hasFocus\n             * @readonly\n             */\n            Object.defineProperty(self.intf, 'hasFocus', {\n                get: function () {\n                    return self.hasFocus;\n                }\n            });\n            Object.defineProperty(self.intf, 'style', {\n                get: function () {\n                    return publicStyleKeyIntf;\n                },\n                set: function (value) {\n                    Object.keys(value).forEach(function (key) {\n                        self.parseFont(value);\n                        self.style[key] = value[key];\n                    });\n                    self.draw(true);\n                    self.dispatchEvent('stylechanged', {name: 'style', value: value});\n                }\n            });\n            Object.keys(self.attributes).forEach(function (key) {\n                Object.defineProperty(self.intf.attributes, key, {\n                    get: function () {\n                        return self.attributes[key];\n                    },\n                    set: function (value) {\n                        self.attributes[key] = value;\n                        self.draw(true);\n                        self.dispatchEvent('attributechanged', {name: key, value: value[key]});\n                    }\n                });\n            });\n            self.filters.string = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                var filterRegExp;\n                self.invalidFilterRegEx = undefined;\n                try {\n                    filterRegExp = new RegExp(filterFor, 'ig');\n                } catch (e) {\n                    self.invalidFilterRegEx = e;\n                    return;\n                }\n                return filterRegExp.test(value);\n            };\n            self.filters.number = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                return value === filterFor;\n            };\n            if (self.attributes.name && self.attributes.saveAppearance) {\n                self.storedSettings = localStorage.getItem(self.storageName + '-' + self.attributes.name);\n                if (self.storedSettings) {\n                    try {\n                        self.storedSettings = JSON.parse(self.storedSettings);\n                    } catch (e) {\n                        console.warn('could not read settings from localStore', e);\n                        self.storedSettings = undefined;\n                    }\n                }\n                if (self.storedSettings) {\n                    if (typeof self.storedSettings.sizes === 'object') {\n                        self.sizes.rows = self.storedSettings.sizes.rows;\n                        self.sizes.columns = self.storedSettings.sizes.columns;\n                        ['trees', 'columns', 'rows'].forEach(function (i) {\n                            if (!self.sizes[i]) {\n                                self.sizes[i] = {};\n                            }\n                        });\n                    }\n                }\n            }\n            if (self.args.data) {\n                self.intf.data = self.args.data;\n            }\n            if (self.args.schema) {\n                self.intf.schema = self.args.schema;\n            }\n            if (!self.data) {\n                self.intf.data = [];\n            }\n            self.resize(true);\n        };\n        /**\n         * Removes focus from the grid.\n         * @memberof canvasDataGrid\n         * @name blur\n         * @method\n         */\n        self.intf.blur = function (e) {\n            self.hasFocus = false;\n        };\n        /**\n         * Focuses on the grid.\n         * @memberof canvasDataGrid\n         * @name focus\n         * @method\n         */\n        self.intf.focus = function () {\n            self.hasFocus = true;\n            self.controlInput.focus();\n        };\n        Object.defineProperty(self.intf, 'height', {\n            get: function () {\n                return self.parentNode.height;\n            },\n            set: function (value) {\n                self.parentNode.height = value;\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'width', {\n            get: function () {\n                return self.parentNode.width;\n            },\n            set: function (value) {\n                self.parentNode.width = value;\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'openChildren', {\n            get: function () {\n                return self.openChildren;\n            }\n        });\n        Object.defineProperty(self.intf, 'childGrids', {\n            get: function () {\n                return Object.keys(self.childGrids).map(function (gridId) {\n                    return self.childGrids[gridId];\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'isChildGrid', {\n            get: function () {\n                return self.isChildGrid;\n            }\n        });\n        Object.defineProperty(self.intf, 'parentNode', {\n            get: function () {\n                return self.parentNode;\n            },\n            set: function (value) {\n                self.parentNode = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetParent', {\n            get: function () {\n                return self.parentNode;\n            },\n            set: function (value) {\n                self.parentNode = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetLeft', {\n            get: function () {\n                return self.parentNode.offsetLeft;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetTop', {\n            get: function () {\n                return self.parentNode.offsetTop;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollHeight', {\n            get: function () {\n                return self.scrollBox.scrollHeight;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollWidth', {\n            get: function () {\n                return self.scrollBox.scrollWidth;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollTop', {\n            get: function () {\n                return self.scrollBox.scrollTop;\n            },\n            set: function (value) {\n                self.scrollBox.scrollTop = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollLeft', {\n            get: function () {\n                return self.scrollBox.scrollLeft;\n            },\n            set: function (value) {\n                self.scrollBox.scrollLeft = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'sizes', {\n            get: function () {\n                return self.sizes;\n            }\n        });\n        Object.defineProperty(self.intf, 'input', {\n            get: function () {\n                return self.input;\n            }\n        });\n        Object.defineProperty(self.intf, 'controlInput', {\n            get: function () {\n                return self.controlInput;\n            }\n        });\n        Object.defineProperty(self.intf, 'currentCell', {\n            get: function () {\n                return self.currentCell;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleCells', {\n            get: function () {\n                return self.visibleCells;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRows', {\n            get: function () {\n                return self.visibleRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'selections', {\n            get: function () {\n                return self.selections;\n            }\n        });\n        Object.defineProperty(self.intf, 'dragMode', {\n            get: function () {\n                return self.dragMode;\n            }\n        });\n        Object.defineProperty(self.intf, 'changes', {\n            get: function () {\n                return self.changes;\n            }\n        });\n        self.intf.attributes = {};\n        self.intf.formatters = self.formatters;\n        self.normalizeDataset = function (data) {\n            var i, d, max, syncFnInvoked;\n            if (data === null || data === '' || data === undefined) {\n                return [];\n            }\n            if (typeof data === 'string'\n                    || typeof data === 'number'\n                    || typeof data === 'boolean') {\n                data = [{'0': data}];\n            }\n            if ((!Array.isArray(data[0]) && typeof data[0] === 'object')\n                            || (Array.isArray(data) && data.length === 0)) {\n                return data;\n            }\n            if (typeof data === 'function') {\n                i = data.apply(self.intf, [function (d) {\n                    if (syncFnInvoked) {\n                        console.warn('Detected a callback to the data setter function after the same function already returned a value synchronously.');\n                    }\n                    self.normalizeDataset(d);\n                }]);\n                if (i) {\n                    syncFnInvoked = true;\n                    self.normalizeDataset(i);\n                }\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if (Array.isArray(data)) {\n                if (!Array.isArray(data[0])) {\n                    //array of something?  throw it all into 1 row!\n                    data = [data];\n                }\n                // find the longest length\n                max = 0;\n                d = [];\n                data.forEach(function (row) {\n                    max = Math.max(max, row.length);\n                });\n                // map against length indexes\n                data.forEach(function (row, index) {\n                    var x;\n                    d[index] = {};\n                    for (x = 0; x < max; x += 1) {\n                        d[index][x] = row[x] || null;\n                    }\n                });\n                return d;\n            }\n            throw new Error('Unsupported data type.  Must be an array of arrays or an array of objects, function or string.');\n        };\n        Object.defineProperty(self.intf, 'selectionBounds', {\n            get: function () {\n                return self.getSelectionBounds();\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedRows', {\n            get: function () {\n                return self.getSelectedData(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedCells', {\n            get: function () {\n                return self.getSelectedData();\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleSchema', {\n            get: function () {\n                return self.getVisibleSchema().map(function eachDataRow(col) {\n                    return col;\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'ctx', {\n            get: function () {\n                return self.ctx;\n            }\n        });\n        Object.defineProperty(self.intf, 'schema', {\n            get: function schemaGetter() {\n                return self.getSchema();\n            },\n            set: function schemaSetter(value) {\n                if (!Array.isArray(value) || typeof value[0] !== 'object') {\n                    throw new Error('Schema must be an array of objects.');\n                }\n                if (value[0].name === undefined) {\n                    throw new Error('Expected schema to contain an object with at least a name property.');\n                }\n                self.schema = value.map(function eachSchemaColumn(column, index) {\n                    column.width = column.width || self.style.columnWidth;\n                    column[self.uniqueId] = self.getSchemaNameHash(column.name);\n                    column.filter = column.filter || self.filter(column.type);\n                    column.type = column.type || 'string';\n                    column.index = index;\n                    column.columnIndex = index;\n                    column.rowIndex = -1;\n                    return column;\n                });\n                self.tempSchema = undefined;\n                self.createNewRowData();\n                self.createColumnOrders();\n                self.tryLoadStoredOrders();\n                self.resize(true);\n                self.dispatchEvent('schemachanged', {schema: self.schema});\n            }\n        });\n        Object.defineProperty(self.intf, 'data', {\n            get: function dataGetter() {\n                return self.data.map(function (row) {\n                    delete row[self.uniqueId];\n                    return row;\n                });\n            },\n            set: function dataSetter(value) {\n                self.originalData = self.normalizeDataset(value).map(function eachDataRow(row) {\n                    row[self.uniqueId] = self.uId;\n                    self.uId += 1;\n                    return row;\n                });\n                self.changes = [];\n                //TODO apply filter to incoming dataset\n                self.data = self.originalData;\n                if (!self.schema && self.data.length > 0) {\n                    self.tempSchema = self.getSchemaFromData();\n                }\n                if (!self.schema && self.data.length === 0) {\n                    self.tempSchema = [{name: ''}];\n                    self.tempSchema[0][self.uniqueId] = self.getSchemaNameHash('');\n                }\n                if (self.tempSchema && !self.schema) {\n                    self.createColumnOrders();\n                    self.tryLoadStoredOrders();\n                    self.dispatchEvent('schemachanged', {schema: self.tempSchema});\n                }\n                self.createNewRowData();\n                if (self.attributes.autoResizeColumns && self.data.length > 0\n                        && self.storedSettings === undefined) {\n                    self.autosize();\n                }\n                // width cannot be determined correctly until after inserted into the dom?\n                requestAnimationFrame(function () {\n                    self.fitColumnToValues('cornerCell');\n                });\n                if (!self.resize()) { self.draw(true); }\n                self.createRowOrders();\n                self.tryLoadStoredOrders();\n                self.dispatchEvent('datachanged', {data: self.data});\n            }\n        });\n        self.initScrollBox = function () {\n            var sHeight = 0,\n                sWidth = 0,\n                scrollTop = 0,\n                scrollLeft = 0,\n                scrollHeight = 0,\n                scrollWidth = 0,\n                scrollBoxHeight = 20,\n                scrollBoxWidth = 20;\n            function setScrollTop(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollTop value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollHeight) {\n                    value = scrollHeight;\n                }\n                if (scrollHeight < 0) {\n                    value = 0;\n                }\n                scrollTop = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            function setScrollLeft(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollLeft value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollWidth) {\n                    value = scrollWidth;\n                }\n                if (scrollWidth < 0) {\n                    value = 0;\n                }\n                scrollLeft = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            self.scrollBox.scrollTo = function (x, y) {\n                setScrollLeft(x, true);\n                setScrollTop(y);\n            };\n            Object.defineProperty(self.scrollBox, 'scrollBoxHeight', {\n                get: function () {\n                    return scrollBoxHeight;\n                },\n                set: function (value) {\n                    scrollBoxHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollBoxWidth', {\n                get: function () {\n                    return scrollBoxWidth;\n                },\n                set: function (value) {\n                    scrollBoxWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'height', {\n                get: function () {\n                    return sHeight;\n                },\n                set: function (value) {\n                    if (scrollHeight < value) {\n                        scrollTop = 0;\n                    }\n                    sHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'width', {\n                get: function () {\n                    return sWidth;\n                },\n                set: function (value) {\n                    sWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollTop', {\n                get: function () {\n                    return scrollTop;\n                },\n                set: setScrollTop\n            });\n            Object.defineProperty(self.scrollBox, 'scrollLeft', {\n                get: function () {\n                    return scrollLeft;\n                },\n                set: setScrollLeft\n            });\n            Object.defineProperty(self.scrollBox, 'scrollHeight', {\n                get: function () {\n                    return scrollHeight;\n                },\n                set: function (value) {\n                    if (scrollTop > value) {\n                        scrollTop = Math.max(value, 0);\n                    }\n                    if (scrollHeight < sHeight) {\n                        scrollTop = 0;\n                    }\n                    scrollHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollWidth', {\n                get: function () {\n                    return scrollWidth;\n                },\n                set: function (value) {\n                    if (scrollLeft > value) {\n                        scrollLeft = Math.max(value, 0);\n                    }\n                    scrollWidth = value;\n                }\n            });\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/intf.js\n// module id = 3\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false, Event: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var zIndexTop = 2, hoverScrollTimeout, autoCompleteContext;\n        function createContextMenu(ev, pos, items, parentContextMenu) {\n            var container = document.createElement('div'),\n                upArrow = document.createElement('div'),\n                downArrow = document.createElement('div'),\n                children = [],\n                selectedIndex = -1,\n                intf = {},\n                rect;\n            if (!Array.isArray(items)) { throw new Error('createContextMenu expects an array.'); }\n            function createItems() {\n                items.forEach(function (item) {\n                    var contextItemContainer = document.createElement('div'),\n                        childMenuArrow;\n                    function removeChildContext(e) {\n                        if (e.relatedTarget === container\n                                || item.contextMenu.container === e.relatedTarget\n                                || childMenuArrow === e.relatedTarget\n                                || (contextItemContainer === e.relatedTarget)\n                                ) { return; }\n                        item.contextMenu.dispose();\n                        children.splice(children.indexOf(item.contextMenu), 1);\n                        item.contextMenu = undefined;\n                        contextItemContainer.removeEventListener('mouseout', removeChildContext);\n                        container.removeEventListener('mouseout', removeChildContext);\n                        contextItemContainer.setAttribute('contextOpen', '0');\n                        contextItemContainer.setAttribute('opening', '0');\n                    }\n                    function contextAddCallback(items) {\n                        // check yet again if the user hasn't moved off\n                        if (contextItemContainer.getAttribute('opening') !== '1' ||\n                                contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        var cPos = contextItemContainer.getBoundingClientRect();\n                        cPos = {\n                            left: cPos.left + self.style.childContextMenuMarginLeft + container.offsetWidth,\n                            top: cPos.top + self.style.childContextMenuMarginTop,\n                            bottom: cPos.bottom,\n                            right: cPos.right,\n                        };\n                        item.contextMenu = createContextMenu(ev, cPos, items, intf);\n                        contextItemContainer.setAttribute('contextOpen', '1');\n                        contextItemContainer.addEventListener('mouseout', removeChildContext);\n                        container.addEventListener('mouseout', removeChildContext);\n                        children.push(item.contextMenu);\n                    }\n                    function createChildContext() {\n                        var i;\n                        if (contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        contextItemContainer.setAttribute('opening', '1');\n                        if (typeof item.items === 'function') {\n                            i  = item.items.apply(intf, [function (items) {\n                                contextAddCallback(items);\n                            }]);\n                            if (i !== undefined && Array.isArray(i)) {\n                                contextAddCallback(i);\n                            }\n                            return;\n                        }\n                        contextAddCallback(item.items);\n                    }\n                    function addItem(item) {\n                        function addContent(content) {\n                            if (typeof content === 'function') {\n                                return addContent(content(ev));\n                            }\n                            if (typeof content === 'object') {\n                                contextItemContainer.appendChild(content);\n                                return;\n                            }\n                            self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n                            contextItemContainer.addEventListener('mouseover', function () {\n                                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                            });\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n                            });\n                            contextItemContainer.innerHTML = content;\n                            return;\n                        }\n                        addContent(item.title);\n                        item.contextItemContainer = contextItemContainer;\n                        if (item.items && item.items.length > 0) {\n                            childMenuArrow = document.createElement('div');\n                            self.createInlineStyle(childMenuArrow, 'canvas-datagrid-context-child-arrow');\n                            childMenuArrow.innerHTML = self.style.childContextMenuArrowHTML;\n                            contextItemContainer.appendChild(childMenuArrow);\n                            contextItemContainer.addEventListener('mouseover', createChildContext);\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                contextItemContainer.setAttribute('opening', '0');\n                            });\n                        }\n                        if (item.click) {\n                            contextItemContainer.addEventListener('click', function (ev) {\n                                item.click.apply(self, [ev]);\n                            });\n                        }\n                    }\n                    addItem(item);\n                    container.appendChild(contextItemContainer);\n                });\n            }\n            function clickIndex(idx) {\n                items[idx].contextItemContainer.dispatchEvent(new Event('click'));\n            }\n            function checkArrowVisibility() {\n                if (container.scrollTop > 0) {\n                    document.body.appendChild(upArrow);\n                } else if (upArrow.parentNode) {\n                    upArrow.parentNode.removeChild(upArrow);\n                }\n                if (container.scrollTop >= container.scrollHeight - container.offsetHeight && downArrow.parentNode) {\n                    downArrow.parentNode.removeChild(downArrow);\n                } else if (container.scrollHeight - container.offsetHeight > 0\n                        && !(container.scrollTop >= container.scrollHeight - container.offsetHeight)) {\n                    document.body.appendChild(downArrow);\n                }\n            }\n            function startHoverScroll(type) {\n                return function t() {\n                    var a = self.attributes.contextHoverScrollAmount;\n                    if (type === 'up' && container.scrollTop === 0) { return; }\n                    if (type === 'down' && container.scrollTop === container.scrollHeight) { return; }\n                    container.scrollTop += (type === 'up' ? -a : a);\n                    hoverScrollTimeout = setTimeout(t, self.attributes.contextHoverScrollRateMs, type);\n                };\n            }\n            function endHoverScroll(type) {\n                return function () {\n                    clearTimeout(hoverScrollTimeout);\n                };\n            }\n            function init() {\n                var loc = {},\n                    s = self.scrollOffset(self.canvas);\n                createItems();\n                self.createInlineStyle(container, 'canvas-datagrid-context-menu');\n                loc.x = pos.left - s.left;\n                loc.y = pos.top - s.top;\n                loc.height = 0;\n                zIndexTop += 1;\n                container.style.position = 'absolute';\n                upArrow.style.color = self.style.contextMenuArrowColor;\n                downArrow.style.color = self.style.contextMenuArrowColor;\n                [upArrow, downArrow].forEach(function (el) {\n                    el.style.textAlign = 'center';\n                    el.style.position = 'absolute';\n                    el.style.zIndex = zIndexTop + 1;\n                });\n                container.style.zIndex = zIndexTop;\n                if (parentContextMenu && parentContextMenu.inputDropdown) {\n                    container.style.maxHeight = window.innerHeight - loc.y - self.style.autocompleteBottomMargin + 'px';\n                    container.style.minWidth = pos.width + 'px';\n                    loc.y += pos.height;\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                container.addEventListener('scroll', checkArrowVisibility);\n                container.addEventListener('wheel', function (e) {\n                    if (self.hasFocus) {\n                        container.scrollTop += e.deltaY;\n                        container.scrollLeft += e.deltaX;\n                    }\n                    checkArrowVisibility();\n                });\n                upArrow.innerHTML = self.style.contextMenuArrowUpHTML;\n                downArrow.innerHTML = self.style.contextMenuArrowDownHTML;\n                container.appendChild(upArrow);\n                document.body.appendChild(downArrow);\n                document.body.appendChild(container);\n                rect = container.getBoundingClientRect();\n                if (rect.bottom > window.innerHeight && !(parentContextMenu && parentContextMenu.inputDropdown)) {\n                    loc.y = window.innerHeight - container.offsetHeight;\n                    if (loc.y < 0) { loc.y = 0; }\n                    if (container.offsetHeight > window.innerHeight) {\n                        container.style.height = window.innerHeight - self.style.contextMenuWindowMargin + 'px';\n                    }\n                }\n                if (rect.right > window.innerWidth) {\n                    if (parentContextMenu) {\n                        loc.x = parentContextMenu.container.offsetLeft - container.offsetWidth;\n                    } else {\n                        loc.x = window.innerWidth - container.offsetWidth;\n                    }\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                rect = container.getBoundingClientRect();\n                upArrow.style.top = rect.top + 'px';\n                downArrow.style.top = rect.top + rect.height - downArrow.offsetHeight + 'px';\n                upArrow.style.left = rect.left + 'px';\n                downArrow.style.left = rect.left + 'px';\n                downArrow.style.width = container.offsetWidth + 'px';\n                upArrow.style.width = container.offsetWidth + 'px';\n                downArrow.addEventListener('mouseover', startHoverScroll('down'));\n                downArrow.addEventListener('mouseout', endHoverScroll('down'));\n                upArrow.addEventListener('mouseover', startHoverScroll('up'));\n                upArrow.addEventListener('mouseout', endHoverScroll('up'));\n                checkArrowVisibility();\n            }\n            intf.parentGrid = self.intf;\n            intf.parentContextMenu = parentContextMenu;\n            intf.container = container;\n            init();\n            intf.clickIndex = clickIndex;\n            intf.rect = rect;\n            intf.items = items;\n            intf.dispose = function () {\n                clearTimeout(hoverScrollTimeout);\n                children.forEach(function (c) {\n                    c.dispose();\n                });\n                [downArrow, upArrow, container].forEach(function (el) {\n                    if (el.parentNode) { el.parentNode.removeChild(el); }\n                });\n            };\n            Object.defineProperty(intf, 'selectedIndex', {\n                get: function () {\n                    return selectedIndex;\n                },\n                set: function (value) {\n                    if (typeof value !== 'number' || isNaN(value || !isFinite(value))) {\n                        throw new Error('Context menu selected index must be a sane number.');\n                    }\n                    selectedIndex = value;\n                    if (selectedIndex > items.length - 1) {\n                        selectedIndex = items.length - 1;\n                    }\n                    if (selectedIndex < 0) {\n                        selectedIndex = 0;\n                    }\n                    items.forEach(function (item, index) {\n                        if (index === selectedIndex) {\n                            return self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                        }\n                        self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item');\n                    });\n                }\n            });\n            return intf;\n        }\n        function createFilterContextMenuItems(e) {\n            var filterContainer = document.createElement('div'),\n                filterLabel = document.createElement('div'),\n                filterAutoCompleteButton = document.createElement('button'),\n                filterInput = document.createElement('input'),\n                n = e.cell && e.cell.header ? e.cell.header.title || e.cell.header.name : '',\n                autoCompleteItems,\n                iRect;\n            function fillAutoComplete() {\n                autoCompleteItems = {};\n                self.data.forEach(function (row) {\n                    var value = row[e.cell.header.name];\n                    if (autoCompleteItems[value]) { return; }\n                    autoCompleteItems[value] = {\n                        title: self.formatters[e.cell.header.type || 'string']({ cell: { value: value }}),\n                        click: function (e) {\n                            filterInput.value = value;\n                            e.stopPropagation();\n                            filterInput.dispatchEvent(new Event('keyup'));\n                            self.disposeAutocomplete();\n                            return;\n                        }\n                    };\n                });\n                autoCompleteItems = Object.keys(autoCompleteItems).map(function (key) {\n                    return autoCompleteItems[key];\n                });\n            }\n            function createAutoCompleteContext(ev) {\n                if (ev && [40, 38, 13, 9, 27].indexOf(ev.keyCode) !== -1) { return; }\n                fillAutoComplete();\n                iRect = filterInput.getBoundingClientRect();\n                if (autoCompleteContext) {\n                    autoCompleteContext.dispose();\n                    autoCompleteContext = undefined;\n                }\n                autoCompleteContext = createContextMenu(e, {\n                    left: iRect.left,\n                    top: iRect.top,\n                    right: iRect.right,\n                    bottom: iRect.bottom,\n                    height: iRect.height,\n                    width: iRect.width\n                }, autoCompleteItems, {inputDropdown: true});\n                autoCompleteContext.selectedIndex = 0;\n            }\n            self.createInlineStyle(filterLabel, 'canvas-datagrid-context-menu-label');\n            self.createInlineStyle(filterAutoCompleteButton, 'canvas-datagrid-context-menu-filter-button');\n            self.createInlineStyle(filterInput, 'canvas-datagrid-context-menu-filter-input');\n            filterInput.onclick = self.disposeAutocomplete;\n            filterInput.addEventListener('keydown', function (e) {\n                //down\n                if (e.keyCode === 40) {\n                    autoCompleteContext.selectedIndex += 1;\n                }\n                //up\n                if (e.keyCode === 38) {\n                    autoCompleteContext.selectedIndex -= 1;\n                }\n                //enter\n                if (e.keyCode === 13) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    self.disposeContextMenu();\n                }\n                //tab\n                if (e.keyCode === 9) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    e.preventDefault();\n                }\n                //esc\n                if (e.keyCode === 27) {\n                    self.disposeContextMenu();\n                }\n            });\n            filterInput.addEventListener('keyup', function () {\n                self.setFilter(e.cell.header.name, filterInput.value);\n            });\n            filterInput.addEventListener('keyup', createAutoCompleteContext);\n            filterInput.value = self.columnFilters[e.cell.header.name] || '';\n            filterLabel.innerHTML = self.attributes.filterOptionText.replace(/%s/g, n);\n            filterAutoCompleteButton.onclick = function () {\n                if (autoCompleteContext) {\n                    return self.disposeAutocomplete();\n                }\n                createAutoCompleteContext();\n            };\n            filterAutoCompleteButton.innerHTML = self.style.contextFilterButtonHTML;\n            filterContainer.addEventListener('click', function (e) {\n                return e.stopPropagation();\n            });\n            filterContainer.appendChild(filterLabel);\n            filterContainer.appendChild(filterInput);\n            filterContainer.appendChild(filterAutoCompleteButton);\n            e.items.push({\n                title: filterContainer\n            });\n            if (Object.keys(self.columnFilters).length) {\n                Object.keys(self.columnFilters).forEach(function (cf) {\n                    var h = self.getHeaderByName(cf);\n                    e.items.push({\n                        title: self.attributes.removeFilterOptionText.replace(/%s/g, h.title || h.name),\n                        click: function removeFilterClick(e) {\n                            e.preventDefault();\n                            self.setFilter(cf, '');\n                            self.controlInput.focus();\n                        }\n                    });\n                });\n            }\n        }\n        function addDefaultContextMenuItem(e) {\n            var isNormalCell = !(e.cell.isBackground || e.cell.isHeaderCellCap\n                            || e.cell.isScrollBar || e.cell.isCorner || e.cell.isRowHeader);\n            if (self.attributes.showFilter && isNormalCell) {\n                createFilterContextMenuItems(e);\n            }\n            if (self.attributes.showCopy\n                    && self.selections.reduce(function (p, r) {\n                        return p + r.length;\n                    }, 0) > 0) {\n                e.items.push({\n                    title: self.attributes.copyText,\n                    click: function () {\n                        document.execCommand('copy');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.saveAppearance && self.attributes.showClearSettingsOption\n                    && (Object.keys(self.sizes.rows).length > 0\n                        || Object.keys(self.sizes.columns).length > 0)) {\n                e.items.push({\n                    title: self.attributes.clearSettingsOptionText,\n                    click: function (e) {\n                        e.preventDefault();\n                        self.sizes.rows = {};\n                        self.sizes.columns = {};\n                        self.createRowOrders();\n                        self.createColumnOrders();\n                        self.storedSettings = undefined;\n                        self.dispatchEvent('resizecolumn', {columnWidth: self.style.columnWidth});\n                        self.dispatchEvent('resizerow', {cellHeight: self.style.cellHeight});\n                        self.setStorageData();\n                        self.resize(true);\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.allowSorting && self.attributes.showOrderByOption && isNormalCell) {\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextAsc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'asc');\n                        self.controlInput.focus();\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextDesc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'desc');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n        }\n        self.disposeAutocomplete = function () {\n            if (autoCompleteContext) {\n                autoCompleteContext.dispose();\n                autoCompleteContext = undefined;\n            }\n        };\n        self.disposeContextMenu = function () {\n            document.removeEventListener('click', self.disposeContextMenu);\n            zIndexTop = 2;\n            self.disposeAutocomplete();\n            if (self.contextMenu) {\n                self.contextMenu.dispose();\n            }\n            self.contextMenu = undefined;\n        };\n        self.contextmenuEvent = function (e, overridePos) {\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            var items = [],\n                pos = overridePos || self.getLayerPos(e, true),\n                ev = {\n                    NativeEvent: e,\n                    cell: self.getCellAt(pos.x, pos.y),\n                    items: items\n                };\n            if (!ev.cell.isGrid) {\n                addDefaultContextMenuItem(ev);\n            }\n            if (self.dispatchEvent('contextmenu', ev)) {\n                return;\n            }\n            if (!ev.cell.isGrid) {\n                if (self.contextMenu) {\n                    self.disposeContextMenu();\n                }\n                self.contextMenu = createContextMenu(ev, {\n                    left: pos.x + pos.rect.left + self.style.contextMenuMarginLeft + self.canvasOffsetLeft,\n                    top: pos.y + pos.rect.top + self.style.contextMenuMarginTop + self.canvasOffsetTop,\n                    right: ev.cell.width + ev.cell.x + pos.rect.left,\n                    bottom: ev.cell.height + ev.cell.y + pos.rect.top,\n                    height: ev.cell.height,\n                    width: ev.cell.width\n                }, items);\n                document.addEventListener('click', self.disposeContextMenu);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/contextMenu.js\n// module id = 4\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.defaults = {\n            attributes: [\n                ['name', ''],\n                ['tree', false],\n                ['showNewRow', false],\n                ['treeHorizontalScroll', false],\n                ['saveAppearance', true],\n                ['selectionFollowsActiveCell', false],\n                ['multiLine', false],\n                ['editable', true],\n                ['allowColumnReordering', true],\n                ['allowRowReordering', false],\n                ['allowSorting', true],\n                ['showFilter', true],\n                ['globalRowResize', false],\n                ['pageUpDownOverlap', 1],\n                ['persistantSelectionMode', false],\n                ['rowSelectionMode', false],\n                ['autoResizeColumns', false],\n                ['allowRowHeaderResize', true],\n                ['allowColumnResize', true],\n                ['allowRowResize', true],\n                ['allowRowResizeFromCell', false],\n                ['allowColumnResizeFromCell', false],\n                ['debug', false],\n                ['borderResizeZone', 10],\n                ['showColumnHeaders', true],\n                ['showRowNumbers', true],\n                ['showRowHeaders', true],\n                ['scrollRepeatRate', 75],\n                ['selectionScrollZone', 20],\n                ['resizeScrollZone', 20],\n                ['contextHoverScrollRateMs', 5],\n                ['contextHoverScrollAmount', 2],\n                ['selectionScrollIncrement', 20],\n                ['reorderDeadZone', 3],\n                ['showClearSettingsOption', true],\n                ['showOrderByOption', true],\n                ['clearSettingsOptionText', 'Clear saved settings'],\n                ['showOrderByOptionTextAsc', 'Order by %s ascending'],\n                ['showOrderByOptionTextDesc', 'Order by %s descending'],\n                ['removeFilterOptionText', 'Remove filter on %s'],\n                ['filterOptionText', 'Filter %s'],\n                ['filterTextPrefix', '(filtered) '],\n                ['touchReleaseAnimationDurationMs', 1000],\n                ['touchReleaseAcceleration', 30],\n                ['touchDeadZone', 3],\n                ['touchSelectTimeMs', 800],\n                ['touchScrollZone', 40],\n                ['copyText', 'Copy'],\n                ['showCopy', true],\n                ['columnHeaderClickBehavior', 'sort'],\n                ['scrollPointerLock', true]\n            ],\n            styles: [\n                ['activeCellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['activeCellBorderWidth', 0.25],\n                ['activeCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellFont', '16px sans-serif'],\n                ['activeCellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['activeCellOverlayBorderWidth', 0.5],\n                ['activeCellPaddingBottom', 5],\n                ['activeCellPaddingLeft', 5],\n                ['activeCellPaddingRight', 7],\n                ['activeCellPaddingTop', 5],\n                ['activeCellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['activeCellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['activeColumnHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeColumnHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeRowHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeRowHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['autocompleteBottomMargin', 60],\n                ['autosizeHeaderCellPadding', 8],\n                ['autosizePadding', 5],\n                ['backgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cellAutoResizePadding', 13],\n                ['cellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['cellBorderWidth', 0.5],\n                ['cellColor', 'rgba(0, 0, 0, 1)'],\n                ['cellFont', '16px sans-serif'],\n                ['cellHeight', 24],\n                ['cellHeightWithChildGrid', 150],\n                ['cellHorizontalAlignment', 'left'],\n                ['cellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['cellPaddingBottom', 5],\n                ['cellPaddingLeft', 5],\n                ['cellPaddingRight', 7],\n                ['cellPaddingTop', 5],\n                ['cellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['cellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['cellVerticalAlignment', 'center'],\n                ['cellWidthWithChildGrid', 250],\n                ['childContextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['childContextMenuArrowHTML', '&#x25BA;'],\n                ['childContextMenuMarginLeft', -15],\n                ['childContextMenuMarginTop', 0],\n                ['columnHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellBorderColor', 'rgba(152, 152, 152, 1)'],\n                ['columnHeaderCellBorderWidth', 0.25],\n                ['columnHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['columnHeaderCellFont', '16px sans-serif'],\n                ['columnHeaderCellHeight', 25],\n                ['columnHeaderCellHorizontalAlignment', 'left'],\n                ['columnHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['columnHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['columnHeaderCellPaddingBottom', 5],\n                ['columnHeaderCellPaddingLeft', 5],\n                ['columnHeaderCellPaddingRight', 7],\n                ['columnHeaderCellPaddingTop', 5],\n                ['columnHeaderCellVerticalAlignment', 'center'],\n                ['columnWidth', 250],\n                ['contextFilterButtonBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterButtonBorderRadius', '3px'],\n                ['contextFilterButtonHTML', '&#x25BC;'],\n                ['contextFilterInputBackground', 'rgba(255,255,255,1)'],\n                ['contextFilterInputBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterInputBorderRadius', '0'],\n                ['contextFilterInputColor', 'rgba(0,0,0,1)'],\n                ['contextFilterInputFontFamily', 'sans-serif'],\n                ['contextFilterInputFontSize', '14px'],\n                ['contextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuArrowDownHTML', '&#x25BC;'],\n                ['contextMenuArrowUpHTML', '&#x25B2;'],\n                ['contextMenuBackground', 'rgba(240, 240, 240, 1)'],\n                ['contextMenuBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextMenuBorderRadius', '3px'],\n                ['contextMenuChildArrowFontSize', '12px'],\n                ['contextMenuColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuFilterButtonFontFamily', 'sans-serif'],\n                ['contextMenuFilterButtonFontSize', '10px'],\n                ['contextMenuFilterInvalidExpresion', 'rgba(237, 155, 156, 1)'],\n                ['contextMenuFontFamily', 'sans-serif'],\n                ['contextMenuFontSize', '16px'],\n                ['contextMenuHoverBackground', 'rgba(182, 205, 250, 1)'],\n                ['contextMenuHoverColor', 'rgba(43, 48, 153, 1)'],\n                ['contextMenuItemBorderRadius', '3px'],\n                ['contextMenuItemMargin', '2px'],\n                ['contextMenuLabelDisplay', 'inline-block'],\n                ['contextMenuLabelMargin', '0 3px 0 0'],\n                ['contextMenuLabelMaxWidth', '700px'],\n                ['contextMenuLabelMinWidth', '75px'],\n                ['contextMenuMarginLeft', 3],\n                ['contextMenuMarginTop', -3],\n                ['contextMenuOpacity', '0.98'],\n                ['contextMenuPadding', '2px'],\n                ['contextMenuWindowMargin', 6],\n                ['cornerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cornerCellBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['editCellBackgroundColor', 'white'],\n                ['editCellBorder', 'solid 1px rgba(110, 168, 255, 1)'],\n                ['editCellBoxShadow', '0 2px 5px rgba(0,0,0,0.4)'],\n                ['editCellColor', 'black'],\n                ['editCellFontFamily', 'sans-serif'],\n                ['editCellFontSize', '16px'],\n                ['editCellPaddingLeft', 4],\n                ['gridBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['gridBorderWidth', 1],\n                ['columnHeaderOrderByArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['columnHeaderOrderByArrowBorderWidth', 1],\n                ['columnHeaderOrderByArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['columnHeaderOrderByArrowHeight', 8],\n                ['columnHeaderOrderByArrowMarginLeft', 0],\n                ['columnHeaderOrderByArrowMarginRight', 5],\n                ['columnHeaderOrderByArrowMarginTop', 6],\n                ['columnHeaderOrderByArrowWidth', 13],\n                ['minColumnWidth', 45],\n                ['minHeight', 24],\n                ['minRowHeight', 24],\n                ['name', 'default'],\n                ['reorderMarkerBackgroundColor', 'rgba(0, 0, 0, 0.1)'],\n                ['reorderMarkerBorderColor', 'rgba(0, 0, 0, 0.2)'],\n                ['reorderMarkerBorderWidth', 1.25],\n                ['reorderMarkerIndexBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['reorderMarkerIndexBorderWidth', 2.75],\n                ['rowHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['rowHeaderCellBorderColor', 'rgba(200, 200, 200, 1)'],\n                ['rowHeaderCellBorderWidth', 1],\n                ['rowHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellFont', '16px sans-serif'],\n                ['rowHeaderCellHeight', 25],\n                ['rowHeaderCellHorizontalAlignment', 'left'],\n                ['rowHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['rowHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['rowHeaderCellPaddingBottom', 5],\n                ['rowHeaderCellPaddingLeft', 5],\n                ['rowHeaderCellPaddingRight', 5],\n                ['rowHeaderCellPaddingTop', 5],\n                ['rowHeaderCellSelectedBackgroundColor', 'rgba(217, 217, 217, 1)'],\n                ['rowHeaderCellSelectedColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellVerticalAlignment', 'center'],\n                ['rowHeaderCellWidth', 57],\n                ['scrollBarActiveColor', 'rgba(125, 125, 125, 1)'],\n                ['scrollBarBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarBorderWidth', 0.5],\n                ['scrollBarBoxBorderRadius', 4.125],\n                ['scrollBarBoxColor', 'rgba(192, 192, 192, 1)'],\n                ['scrollBarBoxMargin', 2],\n                ['scrollBarBoxMinSize', 15],\n                ['scrollBarBoxWidth', 8],\n                ['scrollBarCornerBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarCornerBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarWidth', 11],\n                ['selectionOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionOverlayBorderWidth', 0.75],\n                ['treeArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['treeArrowBorderWidth', 1],\n                ['treeArrowClickRadius', 5],\n                ['treeArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['treeArrowHeight', 8],\n                ['treeArrowMarginLeft', 0],\n                ['treeArrowMarginRight', 5],\n                ['treeArrowMarginTop', 6],\n                ['treeArrowWidth', 13],\n                ['treeGridHeight', 250]\n            ]\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/defaults.js\n// module id = 5\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.createInlineStyle = function (el, className) {\n            var css = {\n                'canvas-datagrid-context-menu-filter-input': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextFilterInputBackground,\n                    color: self.style.contextFilterInputColor,\n                    border: self.style.contextFilterInputBorder,\n                    borderRadius: self.style.contextFilterInputBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextFilterInputFontFamily,\n                    fontSize: self.style.contextFilterInputFontSize\n                },\n                'canvas-datagrid-context-menu-filter-button': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextFilterButtonBorder,\n                    borderRadius: self.style.contextFilterButtonBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFilterButtonFontFamily,\n                    fontSize: self.style.contextMenuFilterButtonFontSize\n                },\n                'canvas-datagrid-context-child-arrow': {\n                    cssFloat: 'right',\n                    color: self.style.childContextMenuArrowColor,\n                    fontSize: self.style.contextMenuChildArrowFontSize,\n                    fontFamily: self.style.contextMenuFontFamily,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-autocomplete': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    position: 'absolute',\n                    zIndex: 3,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-autocomplete-item': {\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor\n                },\n                'canvas-datagrid-autocomplete-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-canvas': {\n                    position: 'absolute',\n                    zIndex: '-1'\n                },\n                'canvas-datagrid': {\n                    position: 'absolute',\n                    background: self.style.backgroundColor,\n                    zIndex: '1',\n                    boxSizing: 'content-box',\n                    padding: '0'\n                },\n                'canvas-datagrid-control-input': {\n                    position: 'fixed',\n                    top: '-5px',\n                    left: '-5px',\n                    border: 'none',\n                    opacity: '0',\n                    cursor: 'pointer',\n                    width: '1px',\n                    height: '1px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize\n                },\n                'canvas-datagrid-edit-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 ' + self.style.editCellPaddingLeft + 'px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.editCellFontFamily,\n                    fontSize: self.style.editCellFontSize,\n                    boxShadow: self.style.editCellBoxShadow,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-context-menu-item': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-context-menu-label': {\n                    margin: self.style.contextMenuLabelMargin,\n                    display: self.style.contextMenuLabelDisplay,\n                    minWidth: self.style.contextMenuLabelMinWidth,\n                    maxWidth: self.style.contextMenuLabelMaxWidth\n                },\n                'canvas-datagrid-context-menu': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-invalid-search-regExp': {\n                    background: self.style.contextMenuFilterInvalidExpresion\n                }\n            };\n            if (css[className]) {\n                Object.keys(css[className]).map(function (prop) {\n                    el.style[prop] = css[className][prop];\n                });\n            }\n            return;\n        };\n        self.appendTo = function (n) {\n            self.parentNode = n;\n            self.height = self.parentNode.offsetHeight;\n            self.width = self.parentNode.offsetWidth;\n            if (self.parentNode && /canvas-datagrid-(cell|tree)/.test(self.parentNode.nodeType)) {\n                self.isChildGrid = true;\n                self.parentGrid = self.parentNode.parentGrid;\n                self.ctx = self.parentGrid.context;\n                self.canvas = self.parentGrid.canvas;\n                self.controlInput = self.parentGrid.controlInput;\n                self.eventParent = self.canvas;\n                self.intf.offsetParent = self.parentNode;\n            } else {\n                self.controlInput = document.createElement('input');\n                self.controlInput.onblur = self.intf.blur;\n                self.createInlineStyle(self.controlInput, 'canvas-datagrid-control-input');\n                self.isChildGrid = false;\n                self.parentDOMNode = self.parentNode;\n                self.parentNode = self.parentDOMNode;\n                self.parentIsCanvas = /canvas/i.test(self.parentDOMNode.tagName);\n                if (self.parentIsCanvas) {\n                    self.canvas = self.parentDOMNode;\n                } else {\n                    self.canvas = document.createElement('canvas');\n                    self.parentDOMNode.appendChild(self.canvas);\n                }\n                self.ctx = self.canvas.getContext('2d');\n                self.ctx.textBaseline = 'alphabetic';\n                document.body.appendChild(self.controlInput);\n                self.eventParent = self.canvas;\n            }\n            self.controlInput.addEventListener('blur', function (e) {\n                if (e.target !== self.canvas) {\n                    self.hasFocus = false;\n                }\n            });\n            window.addEventListener('resize', self.resize);\n            if (MutationObserver) {\n                self.observer = new MutationObserver(function (mutations) {\n                    mutations.forEach(function (mutation) {\n                        self.resize(true);\n                    });\n                });\n                [self.canvas.parentNode].forEach(function (el) {\n                    self.observer.observe(el, { attributes: true });\n                });\n            }\n            self.eventParent.addEventListener('scroll', self.resize, false);\n            self.eventParent.addEventListener('touchstart', self.touchstart, false);\n            self.eventParent.addEventListener('mouseup', self.mouseup, false);\n            self.eventParent.addEventListener('mousedown', self.mousedown, false);\n            self.eventParent.addEventListener('dblclick', self.dblclick, false);\n            self.eventParent.addEventListener('click', self.click, false);\n            self.eventParent.addEventListener('mousemove', self.mousemove);\n            self.eventParent.addEventListener('wheel', self.scrollWheel, false);\n            self.canvas.addEventListener('contextmenu', self.contextmenuEvent, false);\n            (self.isChildGrid ? self.parentGrid : document).addEventListener('copy', self.copy);\n            self.controlInput.addEventListener('keypress', self.keypress, false);\n            self.controlInput.addEventListener('keyup', self.keyup, false);\n            self.controlInput.addEventListener('keydown', self.keydown, false);\n        };\n        self.setDom = function () {\n            self.appendTo(self.args.parentNode);\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/dom.js\n// module id = 6\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        // all methods here are exposed by intf\n        // to users\n        /**\n         * Converts a integer into a letter A - ZZZZZ...\n         * @memberof canvasDataGrid\n         * @name integerToAlpha\n         * @method\n         * @param {column} n The number to convert.\n         */\n        self.integerToAlpha = function (n) {\n            var ordA = 'a'.charCodeAt(0),\n                ordZ = 'z'.charCodeAt(0),\n                len = ordZ - ordA + 1,\n                s = '';\n            while (n >= 0) {\n                s = String.fromCharCode(n % len + ordA) + s;\n                n = Math.floor(n / len) - 1;\n            }\n            return s;\n        };\n        /**\n         * Inserts a new column before the specified index into the schema.\n         * @see canvasDataGrid#schema\n         * @tutorial schema\n         * @memberof canvasDataGrid\n         * @name insertColumn\n         * @method\n         * @param {column} c The column to insert into the schema.\n         * @param {number} index The index of the column to insert before.\n         */\n        self.insertColumn = function (c, index) {\n            var s = self.getSchema();\n            if (s.length < index) {\n                throw new Error('Index is beyond the length of the schema.');\n            }\n            self.validateColumn(c, s);\n            s.splice(index, 0, c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a column from the schema at the specified index.\n         * @memberof canvasDataGrid\n         * @name deleteColumn\n         * @tutorial schema\n         * @method\n         * @param {number} index The index of the column to delete.\n         */\n        self.deleteColumn = function (index) {\n            var s = self.getSchema();\n            // remove data matching this column name from data\n            self.data.forEach(function (row) {\n                delete row[s[index].name];\n            });\n            s.splice(index, 1);\n            self.intf.schema = s;\n        };\n        /**\n         * Adds a new column into the schema.\n         * @see canvasDataGrid#schema\n         * @tutorial schema\n         * @memberof canvasDataGrid\n         * @name addColumn\n         * @method\n         * @param {column} c The column to add to the schema.\n         */\n        self.addColumn = function (c) {\n            var s = self.getSchema();\n            self.validateColumn(c, s);\n            s.push(c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a row from the dataset at the specified index.\n         * @memberof canvasDataGrid\n         * @name deleteRow\n         * @method\n         * @param {number} index The index of the row to delete.\n         */\n        self.deleteRow = function (index) {\n            self.originalData.splice(index, 1);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Inserts a new row into the dataset before the specified index.\n         * @memberof canvasDataGrid\n         * @name insertRow\n         * @method\n         * @param {object} d data.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertRow = function (d, index) {\n            if (self.originalData.length < index) {\n                throw new Error('Index is beyond the length of the dataset.');\n            }\n            self.originalData.splice(index, 0, d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[index], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Adds a new row into the dataset.\n         * @memberof canvasDataGrid\n         * @name addRow\n         * @method\n         * @param {object} d data.\n         */\n        self.addRow = function (d) {\n            self.originalData.push(d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[self.originalData.length - 1], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Sets the height of a given row by index number.\n         * @memberof canvasDataGrid\n         * @name setRowHeight\n         * @method\n         * @param {number} rowIndex The index of the row to set.\n         * @param {number} height Height to set the row to.\n         */\n        self.setRowHeight = function (rowIndex, height) {\n            self.sizes.rows[self.data[rowIndex][self.uniqueId]] = height;\n            self.draw(true);\n        };\n        /**\n         * Sets the width of a given column by index number.\n         * @memberof canvasDataGrid\n         * @name setColumnWidth\n         * @method\n         * @param {number} colIndex The index of the column to set.\n         * @param {number} width Width to set the column to.\n         */\n        self.setColumnWidth = function (colIndex, width) {\n            var s = self.getSchema();\n            self.sizes.columns[s[colIndex][self.uniqueId]] = width;\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the width of the columns due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDataGrid\n         * @name resetColumnWidths\n         * @tutorial schema\n         * @method\n         */\n        self.resetColumnWidths = function () {\n            self.sizes.columns = {};\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the height of the rows due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDataGrid\n         * @name resetRowHeights\n         * @tutorial schema\n         * @method\n         */\n        self.resetRowHeights = function () {\n            self.sizes.rows = {};\n            self.draw(true);\n        };\n        /**\n         * Sets the value of the filter.\n         * @memberof canvasDataGrid\n         * @name setFilter\n         * @method\n         * @param {string} column Name of the column to filter.\n         * @param {string} value The value to filter for.\n         */\n        self.setFilter = function (column, value) {\n            function applyFilter() {\n                self.refreshFromOrigialData();\n                Object.keys(self.columnFilters).forEach(function (filter) {\n                    var header = self.getHeaderByName(column);\n                    if (!header) {\n                        return;\n                    }\n                    self.currentFilter = header.filter || self.filter(column.type || 'string');\n                    self.data = self.data.filter(function (row) {\n                        return self.currentFilter(row[filter], self.columnFilters[filter]);\n                    });\n                });\n                self.resize();\n                self.draw(true);\n            }\n            if (self.coulumn === undefined && value === undefined) {\n                return applyFilter();\n            }\n            if (column && (value === '' || value === undefined)) {\n                delete self.columnFilters[column];\n            } else {\n                self.columnFilters[column] = value;\n            }\n            applyFilter();\n        };\n        /**\n         * Returns the number of pixels to scroll down to line up with row rowIndex.\n         * @memberof canvasDataGrid\n         * @name findRowScrollTop\n         * @method\n         * @param {number} rowIndex The row index of the row to scroll find.\n         */\n        self.findRowScrollTop = function (rowIndex) {\n            var top = 0, x = 0, l = self.data.length,\n                cellBorder = self.style.cellBorderWidth * 2;\n            if (!self.attributes.showNewRow) {\n                l -= 1;\n            }\n            if (rowIndex > l) {\n                throw new Error('Impossible row index');\n            }\n            while (x < rowIndex) {\n                top += (self.sizes.rows[self.data[x][self.uniqueId]] || self.style.cellHeight) + cellBorder;\n                x += 1;\n            }\n            //TODO: This is not super accurate, causes pageUp/Dn to not move around right\n            return top - (self.sizes.rows[self.data[rowIndex][self.uniqueId]] || self.style.cellHeight);\n        };\n        /**\n         * Returns the number of pixels to scroll to the left to line up with column columnIndex.\n         * @memberof canvasDataGrid\n         * @name findColumnScrollLeft\n         * @method\n         * @param {number} columnIndex The column index of the column to find.\n         */\n        self.findColumnScrollLeft = function (columnIndex) {\n            var left = 0, y = 0, s = self.getSchema(), l = s.length - 1;\n            if (columnIndex > l) {\n                throw new Error('Impossible column index');\n            }\n            while (y < columnIndex) {\n                left += self.sizes.columns[s[y][self.uniqueId]] || s[y].width;\n                y += 1;\n            }\n            return left;\n        };\n        /**\n         * Scrolls the cell at cell x, row y.\n         * @memberof canvasDataGrid\n         * @name gotoCell\n         * @method\n         * @param {number} x The column index of the cell to scroll to.\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoCell = function (x, y) {\n            if (x !== undefined) {\n                self.scrollBox.scrollLeft = self.findColumnScrollLeft(x);\n            }\n            if (y !== undefined) {\n                self.scrollBox.scrollTop = self.findRowScrollTop(y);\n            }\n        };\n        /**\n         * Scrolls the row y.\n         * @memberof canvasDataGrid\n         * @name gotoRow\n         * @method\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoRow = function (y) {\n            self.gotoCell(0, y);\n        };\n        /**\n         * Scrolls the cell at cell x, row y into view if it is not already.\n         * @memberof canvasDataGrid\n         * @name scrollIntoView\n         * @method\n         * @param {number} x The column index of the cell to scroll into view.\n         * @param {number} y The row index of the cell to scroll into view.\n         */\n        self.scrollIntoView = function (x, y) {\n            if (self.visibleCells.filter(function (cell) {\n                    return (cell.rowIndex === y || y === undefined)\n                        && (cell.columnIndex === x || x === undefined)\n                        && cell.x > 0\n                        && cell.y > 0\n                        && cell.x + cell.width < self.width\n                        && cell.y + cell.height < self.height;\n                }).length === 0) {\n                self.gotoCell(x, y);\n            }\n        };\n        /**\n         * Sets the active cell. Requires redrawing.\n         * @memberof canvasDataGrid\n         * @name setActiveCell\n         * @method\n         * @param {number} x The column index of the cell to set active.\n         * @param {number} y The row index of the cell to set active.\n         */\n        self.setActiveCell = function (x, y) {\n            self.activeCell = {\n                rowIndex: y,\n                columnIndex: x\n            };\n        };\n        /**\n         * Selects every visible cell.\n         * @memberof canvasDataGrid\n         * @name selectAll\n         * @method\n         */\n        self.selectAll = function () {\n            self.selectArea({\n                top: 0,\n                left: 0,\n                right: self.getVisibleSchema().length - 1,\n                bottom: self.data.length - 1\n            });\n        };\n        /**\n         * Returns true if the selected columnIndex is selected on every row.\n         * @memberof canvasDataGrid\n         * @name isColumnSelected\n         * @method\n         * @param {number} columnIndex The column index to check.\n         */\n        self.isColumnSelected = function (columnIndex) {\n            var colIsSelected = true;\n            self.data.forEach(function (row, rowIndex) {\n                if (!self.selections[rowIndex] || self.selections[rowIndex].indexOf(self.orders.columns[columnIndex]) === -1) {\n                    colIsSelected = false;\n                }\n            });\n            return colIsSelected;\n        };\n        /**\n         * Selects a column.\n         * @memberof canvasDataGrid\n         * @name selectColumn\n         * @method\n         * @param {number} columnIndex The column index to select.\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the column.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the column.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectColumn = function (columnIndex, ctrl, shift, supressEvent) {\n            var s, e, x;\n            function addCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) === -1) {\n                        self.selections[rowIndex].push(i);\n                    }\n                });\n            }\n            function removeCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) !== -1) {\n                        self.selections[rowIndex].splice(self.selections[rowIndex].indexOf(i), 1);\n                    }\n                });\n            }\n            if (shift) {\n                if (!self.activeCell) { return; }\n                s = Math.min(self.activeCell.columnIndex, columnIndex);\n                e = Math.max(self.activeCell.columnIndex, columnIndex);\n                for (x = s; e > x; x += 1) {\n                    addCol(x);\n                }\n            }\n            if (!ctrl && !shift) {\n                self.selections = [];\n                self.activeCell.columnIndex = columnIndex;\n                self.activeCell.rowIndex = self.scrollIndexTop;\n            }\n            if (self.dragAddToSelection === true) {\n                if (ctrl && self.isColumnSelected(columnIndex)) {\n                    removeCol(columnIndex);\n                } else {\n                    addCol(columnIndex);\n                }\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Selects a row.\n         * @memberof canvasDataGrid\n         * @name selectRow\n         * @method\n         * @param {number} rowIndex The row index to select.\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the row.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectRow = function (rowIndex, ctrl, supressEvent) {\n            var s = self.getSchema();\n            if (self.dragAddToSelection === false) {\n                if (self.selections[rowIndex] && self.selections[rowIndex].length - 1 === s.length) {\n                    if (ctrl) {\n                        self.selections[rowIndex] = [];\n                        return;\n                    }\n                }\n            }\n            if (self.dragAddToSelection === true) {\n                self.selections[rowIndex] = [];\n                self.selections[rowIndex].push(-1);\n                s.forEach(function (col) {\n                    self.selections[rowIndex].push(col.index);\n                });\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Collapse a tree grid by row index.\n         * @memberof canvasDataGrid\n         * @name collapseTree\n         * @method\n         * @param {number} index The index of the row to collapse.\n         */\n        self.collapseTree = function (rowIndex) {\n            var rowId = self.data[rowIndex][self.uniqueId];\n            self.dispatchEvent('collapsetree', {\n                childGrid: self.childGrids[rowId],\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId].blur();\n            self.openChildren[rowId].dispose();\n            delete self.openChildren[rowId];\n            delete self.sizes.trees[rowId];\n            delete self.childGrids[rowId];\n            self.dispatchEvent('resizerow', {\n                cellHeight: self.style.cellHeight\n            });\n            self.resize(true);\n            self.draw(true);\n        };\n        /**\n         * Expands a tree grid by row index.\n         * @memberof canvasDataGrid\n         * @name expandTree\n         * @method\n         * @param {number} index The index of the row to expand.\n         */\n        self.expandTree = function (rowIndex) {\n            var rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth,\n                rowId = self.data[rowIndex][self.uniqueId],\n                h = self.sizes.trees[rowId] || self.style.treeGridHeight,\n                treeGrid;\n            if (!self.childGrids[rowId]) {\n                treeGrid = self.createGrid({\n                    debug: self.attributes.debug,\n                    name: self.attributes.saveAppearance\n                        ? self.attributes.name + 'tree' + rowId : undefined,\n                    parentNode: {\n                        parentGrid: self.intf,\n                        nodeType: 'canvas-datagrid-tree',\n                        offsetHeight: h,\n                        offsetWidth: self.width - columnHeaderCellWidth,\n                        header: { width: self.width - columnHeaderCellWidth },\n                        offsetLeft: columnHeaderCellWidth,\n                        offsetTop: rowHeaderCellHeight,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: 'tree',\n                        data: self.data[rowIndex]\n                    }\n                });\n                self.childGrids[rowId] = treeGrid;\n            }\n            treeGrid = self.childGrids[rowId];\n            treeGrid.visible = true;\n            self.dispatchEvent('expandtree', {\n                treeGrid: treeGrid,\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId] = treeGrid;\n            self.sizes.trees[rowId] = h;\n            self.dispatchEvent('resizerow', {height: self.style.cellHeight});\n            self.resize(true);\n        };\n        /**\n         * Toggles tree grid open and close by row index.\n         * @memberof canvasDataGrid\n         * @name toggleTree\n         * @method\n         * @param {number} index The index of the row to toggle.\n         */\n        self.toggleTree = function (rowIndex) {\n            var i = self.openChildren[self.data[rowIndex][self.uniqueId]];\n            if (i) {\n                return self.collapseTree(rowIndex);\n            }\n            self.expandTree(rowIndex);\n        };\n        /**\n         * Returns a header from the schema by name.\n         * @memberof canvasDataGrid\n         * @name getHeaderByName\n         * @tutorial schema\n         * @method\n         * @returns {header} header with the selected name, or undefined.\n         * @param {string} name The name of the column to resize.\n         */\n        self.getHeaderByName = function (name) {\n            var x, i = self.getSchema();\n            for (x = 0; x < i.length; x += 1) {\n                if (i[x].name === name) {\n                    return i[x];\n                }\n            }\n        };\n        /**\n         * Resizes a column to fit the longest value in the column. Call without a value to resize all columns.\n         * Warning, can be slow on very large record sets (1m records ~3-5 seconds on an i7).\n         * @memberof canvasDataGrid\n         * @name fitColumnToValues\n         * @method\n         * @param {string} name The name of the column to resize.\n         */\n        self.fitColumnToValues = function (name) {\n            self.sizes.columns[name === 'cornerCell' ? name : self.getHeaderByName(name)[self.uniqueId]]\n                = self.findColumnMaxTextLength(name);\n            self.resize();\n            self.draw(true);\n        };\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDataGrid\n         * @name isCellVisible\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {cell} cell The cell to check for.  Alternatively you can pass an object { x: <x-index>, y: <y-index> }.\n         */\n        self.isCellVisible = function (cell) {\n            var x, l = self.visibleCells.length;\n            for (x = 0; x < l; x += 1) {\n                if (cell.x === self.visibleCells[x].x && cell.y === self.visibleCells[x].y) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n         * Sets the order of the data.\n         * @memberof canvasDataGrid\n         * @name order\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} columnName Number of pixels from the left.\n         * @param {string} direction `asc` for ascending or `desc` for descending.\n         * @param {bool} dontSetStorageData Don't store this setting for future use.\n         */\n        self.order = function (columnName, direction, dontSetStorageData) {\n            var f,\n                c = self.getSchema().filter(function (col) {\n                    return col.name === columnName;\n                });\n            self.orderBy = columnName;\n            if (c.length === 0) {\n                throw new Error('Cannot sort.  No such column name');\n            }\n            f = self.sorters[c[0].type];\n            if (!f && c[0].type !== undefined) {\n                console.warn('Cannot sort type \"%s\" falling back to string sort.', c[0].type);\n            }\n            self.data = self.data.sort(typeof f === 'function' ? f(columnName, direction) : self.sorters.string);\n            self.dispatchEvent('ordercolumn', {name: columnName, direction: direction});\n            self.draw(true);\n            if (dontSetStorageData) { return; }\n            self.setStorageData();\n        };\n        self.isInGrid = function (e) {\n            if (e.x < 0\n                    || e.x > self.width\n                    || e.y < 0\n                    || e.y > self.height) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Gets the cell at columnIndex and rowIndex.\n         * @memberof canvasDataGrid\n         * @name getVisibleCellByIndex\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Column index.\n         * @param {number} y Row index.\n         */\n        self.getVisibleCellByIndex = function (x, y) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === x && c.rowIndex === y;\n            })[0];\n        };\n        /**\n         * Gets the cell at grid pixel coordinate x and y.\n         * @memberof canvasDataGrid\n         * @name getCellAt\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Number of pixels from the left.\n         * @param {number} y Number of pixels from the top.\n         */\n        self.getCellAt = function (x, y, useTouchScrollZones) {\n            var tsz = useTouchScrollZones ? self.attributes.touchScrollZone : 0, i, l = self.visibleCells.length, cell;\n            if (!self.visibleCells || !self.visibleCells.length) { return; }\n            self.hasFocus = true;\n            if (!(y < self.height\n                && y > 0\n                && x < self.width\n                && x > 0)) {\n                self.hasFocus = false;\n                return {\n                    dragContext: 'inherit',\n                    context: 'inherit'\n                };\n            }\n            for (i = 0; i < l; i += 1) {\n                cell = self.visibleCells[i];\n                if (useTouchScrollZones && /(vertical|horizontal)-scroll-/.test(cell.style)) {\n                    cell.x -= tsz;\n                    cell.y -= tsz;\n                    cell.height += tsz;\n                    cell.width += tsz;\n                }\n                if (cell.x - self.style.cellBorderWidth < x\n                        && cell.x + cell.width + self.style.cellBorderWidth > x\n                        && cell.y - self.style.cellBorderWidth < y\n                        && cell.y + cell.height + self.style.cellBorderWidth > y) {\n                    if (/vertical-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'vertical-scroll-box';\n                        cell.context = 'vertical-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isVerticalScrollBar = true;\n                        if (y > self.scrollBox.box.v.y + self.scrollBox.scrollBoxHeight) {\n                            cell.dragContext = 'vertical-scroll-bottom';\n                            cell.context = 'vertical-scroll-bottom';\n                        } else if (y < self.scrollBox.box.v.y) {\n                            cell.dragContext = 'vertical-scroll-top';\n                            cell.context = 'vertical-scroll-top';\n                        }\n                        self.canvas.style.cursor = 'default';\n                        return cell;\n                    }\n                    if (/horizontal-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'horizontal-scroll-box';\n                        cell.context = 'horizontal-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isHorizontalScrollBar = true;\n                        if (x > self.scrollBox.box.h.x + self.scrollBox.scrollBoxWidth) {\n                            cell.dragContext = 'horizontal-scroll-right';\n                            cell.context = 'horizontal-scroll-right';\n                        } else if (x < self.scrollBox.box.h.x) {\n                            cell.dragContext = 'horizontal-scroll-left';\n                            cell.context = 'horizontal-scroll-left';\n                        }\n                        self.canvas.style.cursor = 'default';\n                        return cell;\n                    }\n                    if (cell.x + cell.width - (self.attributes.borderResizeZone * 0.4) < x\n                            && cell.x + cell.width + (self.attributes.borderResizeZone * 0.6) > x\n                            && self.attributes.allowColumnResize\n                            && ((self.attributes.allowColumnResizeFromCell && cell.style === 'cell')\n                                || cell.style !== 'cell')\n                            && ((self.attributes.allowRowHeaderResize\n                                && ['rowHeaderCell', 'cornerCell'].indexOf(cell.style) !== -1)\n                                || ['rowHeaderCell', 'cornerCell'].indexOf(cell.style) === -1)) {\n                        cell.context = 'ew-resize';\n                        cell.dragContext = 'ew-resize';\n                        return cell;\n                    }\n                    if (cell.y + cell.height - (self.attributes.borderResizeZone * 0.4) < y\n                            && cell.y + cell.height + (self.attributes.borderResizeZone * 0.6) > y\n                            && self.attributes.allowRowResize\n                            && ((self.attributes.allowRowResizeFromCell && cell.style === 'cell')\n                                || cell.style !== 'cell')\n                            && cell.style !== 'columnHeaderCell') {\n                        cell.context = 'ns-resize';\n                        cell.dragContext = 'ns-resize';\n                        return cell;\n                    }\n                    if (cell.style === 'columnHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'column-reorder';\n                        return cell;\n                    }\n                    if (cell.style === 'rowHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'row-reorder';\n                        return cell;\n                    }\n                    if (cell.isGrid) {\n                        self.hasFocus = false;\n                        cell.dragContext = 'cell-grid';\n                        cell.context = 'cell-grid';\n                        return cell;\n                    }\n                    if (cell.style === 'tree-grid') {\n                        self.hasFocus = false;\n                        cell.dragContext = 'tree';\n                        cell.context = 'tree';\n                        return cell;\n                    }\n                    cell.dragContext = 'cell';\n                    cell.context = 'cell';\n                    return cell;\n                }\n            }\n            self.hasFocus = true;\n            self.canvas.style.cursor = 'default';\n            return {\n                dragContext: 'background',\n                context: 'background',\n                style: 'background',\n                isBackground: true\n            };\n        };\n        /**\n         * Gets the bounds of current selection. \n         * @returns {rect} selection.\n         * @memberof canvasDataGrid\n         * @name getSelectionBounds\n         * @method\n         */\n        self.getSelectionBounds = function () {\n            var low = {x: Infinity, y: Infinity},\n                high = {x: -Infinity, y: -Infinity};\n            self.data.forEach(function (row, rowIndex) {\n                var maxCol, minCol;\n                if (self.selections[rowIndex] && self.selections[rowIndex].length) {\n                    low.y = rowIndex < low.y ? rowIndex : low.y;\n                    high.y = rowIndex > high.y ? rowIndex : high.y;\n                    maxCol = Math.max.apply(null, self.selections[rowIndex]);\n                    minCol = Math.min.apply(null, self.selections[rowIndex]);\n                    low.x = minCol < low.x ? minCol : low.x;\n                    high.x = maxCol > high.x ? maxCol : high.x;\n                }\n            });\n            return {\n                top: low.y,\n                left: low.x,\n                bottom: high.y,\n                right: high.x\n            };\n        };\n        /**\n         * Returns an auto generated schema based on data structure.\n         * @memberof canvasDataGrid\n         * @name getSchemaFromData\n         * @method\n         * @tutorial schema\n         * @returns {schema} schema A schema based on the first item in the data array.\n         */\n        self.getSchemaFromData = function () {\n            return Object.keys(self.data[0] || {' ': ''}).map(function mapEachSchemaColumn(key, index) {\n                var type = self.getBestGuessDataType(key),\n                    i = {\n                        name: key,\n                        title: isNaN(parseInt(key, 10)) ? key : self.integerToAlpha(key).toUpperCase(),\n                        width: self.style.columnWidth,\n                        index: index,\n                        type: type,\n                        filter: self.filter(type)\n                    };\n                if (key === self.uniqueId) {\n                    i.hidden = true;\n                }\n                i[self.uniqueId] = self.getSchemaNameHash(key);\n                return i;\n            });\n        };\n        /**\n         * Clears the change log grid.changes that keeps track of changes to the data set.\n         * This does not undo changes or alter data it is simply a convince array to keep\n         * track of changes made to the data since last this method was called.\n         * @memberof canvasDataGrid\n         * @name clearChangeLog\n         * @method\n         */\n        self.clearChangeLog = function () {\n            self.changes = [];\n        };\n        /**\n         * Selects an area of the grid.\n         * @memberof canvasDataGrid\n         * @name selectArea\n         * @method\n         * @param {rect} bounds A rect object representing the selected values.\n         */\n        self.selectArea = function (bounds, ctrl) {\n            self.selectionBounds = bounds || self.selectionBounds;\n            var x, y, s = self.getSchema();\n            if (!ctrl) {\n                self.selections = [];\n            }\n            if (self.selectionBounds.top < -1\n                    || self.selectionBounds.bottom > self.data.length\n                    || self.selectionBounds.left < -1\n                    || self.selectionBounds.right > s.length) {\n                throw new Error('Impossible selection area');\n            }\n            for (x = self.selectionBounds.top; x <= self.selectionBounds.bottom; x += 1) {\n                self.selections[x] = [];\n                for (y = self.selectionBounds.left; y <= self.selectionBounds.right; y += 1) {\n                    if (self.selections[x].indexOf(y) === -1) {\n                        self.selections[x].push(y);\n                    }\n                }\n            }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Returns the maximum text width for a given column by column name.\n         * @memberof canvasDataGrid\n         * @name findColumnMaxTextLength\n         * @method\n         * @returns {number} The number of pixels wide the maximum width value in the selected column.\n         * @param {string} name The name of the column to calculate the value's width of.\n         */\n        self.findColumnMaxTextLength = function (name) {\n            var m = -Infinity;\n            if (name === 'cornerCell') {\n                self.ctx.font = self.style.rowHeaderCellFont;\n                return self.ctx.measureText((self.data.length + (self.attributes.showNewRow ? 1 : 0)).toString()).width\n                    + self.style.autosizePadding + self.style.autosizeHeaderCellPadding\n                    + self.style.rowHeaderCellPaddingRight\n                    + self.style.rowHeaderCellPaddingLeft\n                    + (self.attributes.tree ? self.style.treeArrowWidth\n                        + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight : 0);\n            }\n            self.getSchema().forEach(function (col) {\n                if (col.name !== name) { return; }\n                self.ctx.font = self.style.columnHeaderCellFont;\n                var t = self.ctx.measureText(col.title || col.name).width\n                    + self.style.headerCellPaddingRight\n                    + self.style.headerCellPaddingLeft;\n                m = t > m ? t : m;\n            });\n            self.data.forEach(function (row) {\n                self.ctx.font = self.style.cellFont;\n                var t = self.ctx.measureText(row[name]).width\n                    + self.style.cellPaddingRight\n                    + self.style.cellPaddingLeft + self.style.cellAutoResizePadding;\n                m = t > m ? t : m;\n            });\n            return m;\n        };\n        /**\n         * Gets the total width of all header columns.\n         * @memberof canvasDataGrid\n         * @name getHeaderWidth\n         * @method\n         */\n        self.getHeaderWidth = function () {\n            return self.getVisibleSchema().reduce(function (total, header) {\n                return total + header.width;\n            }, 0);\n        };\n        self.formatters.string = function cellFormatterString(e) {\n            return e.cell.value !== undefined ? e.cell.value : '';\n        };\n        self.formatters.rowHeaderCell = self.formatters.string;\n        self.formatters.headerCell = self.formatters.string;\n        self.formatters.number = self.formatters.string;\n        self.formatters.int = self.formatters.string;\n        self.formatters.html = self.formatters.string;\n        self.sorters.string = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (a[columnName] === undefined || a[columnName] === null) {\n                    return 1;\n                }\n                if (b[columnName] === undefined || b[columnName] === null) {\n                    return 0;\n                }\n                if (asc) {\n                    if (!a[columnName].localeCompare) { return 1; }\n                    return a[columnName].localeCompare(b[columnName]);\n                }\n                if (!b[columnName].localeCompare) { return 1; }\n                return b[columnName].localeCompare(a[columnName]);\n            };\n        };\n        self.sorters.number = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return a[columnName] - b[columnName];\n                }\n                return b[columnName] - a[columnName];\n            };\n        };\n        self.sorters.date = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return new Date(a[columnName]).getTime()\n                        - new Date(b[columnName]).getTime();\n                }\n                return new Date(b[columnName]).getTime()\n                        - new Date(a[columnName]).getTime();\n            };\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/publicMethods.js\n// module id = 7\n// module chunks = 0"],"sourceRoot":""}