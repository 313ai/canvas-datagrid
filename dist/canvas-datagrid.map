{"version":3,"sources":["webpack:///canvas-datagrid.js","webpack:///webpack/bootstrap 716da9dffe168b9561db","webpack:///./lib/main.js","webpack:///./lib/draw.js","webpack:///./lib/events.js","webpack:///./lib/intf.js","webpack:///./lib/contextMenu.js","webpack:///./lib/defaults.js","webpack:///./lib/dom.js","webpack:///./lib/publicMethods.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","undefined","grid","args","self","createGrid","orders","rows","columns","hasFocus","activeCell","columnIndex","rowIndex","storageName","invalidSearchExpClass","localStyleLibraryStorageKey","uniqueId","orderBy","orderDirection","columnFilters","filters","ellipsisCache","scrollBox","visibleRows","sizes","trees","currentFilter","selections","hovers","attributes","style","intf","formatters","sorters","schemaHashes","events","uId","changes","scrollIndexTop","scrollPixelTop","scrollIndexLeft","scrollPixelLeft","childGrids","openChildren","scrollModes","mouse","x","y","getSelectedData","expandToRow","getSchema","data","length","forEach","row","index","column","col","scrollOffset","e","parentNode","nodeType","scrollLeft","scrollTop","left","top","position","ignoreScrollOffset","h","w","offsetParent","offsetLeft","offsetTop","offsetHeight","offsetWidth","height","width","getLayerPos","rect","canvas","getBoundingClientRect","pos","clientX","clientY","isChildGrid","canvasOffsetLeft","canvasOffsetTop","fillArray","low","high","step","getHeaderCellHeight","showColumnHeaders","headerCellHeight","getHeaderCellWidth","showRowHeaders","cornerCell","headerRowWidth","setStorageData","saveAppearance","localStorage","setItem","JSON","stringify","schema","tempSchema","createColumnOrders","createRowOrders","getVisibleSchema","filter","hidden","createNewRowData","newRow","header","defaultValue","apply","getSchemaNameHash","key","type","f","console","warn","string","getBestGuessDataType","columnName","t","indexOf","drawChildGrids","keys","gridKey","draw","resizeChildGrids","resize","getClippingRect","ele","boundingRect","eleRect","clipRect","parentRect","Infinity","headerCellWidth","scrollBarWidth","clipElement","clip","autoScrollZone","ctrl","setTimer","selectionScrollZone","selectionScrollIncrement","currentCell","scrollTimer","setTimeout","mousemove","scrollRepeatRate","refreshFromOrigialData","originalData","validateColumn","Error","setDefaults","obj1","obj2","def","setAttributes","defaults","setStyle","styles","autosize","colName","fitColumnToValues","dispose","removeChild","eventParent","removeEventListener","mouseup","mousedown","dblclick","click","scrollWheel","contextmenu","copy","controlInput","keypress","keyup","keydown","window","observer","disconnect","tryLoadStoredOrders","storedSettings","push","getHeaderByName","order","getFontHeight","fontStyle","parseFloat","getFontHeightLong","pixels","start","end","document","createElement","ctx","getContext","save","fillRect","textBaseline","fillStyle","font","fillText","getImageData","restore","log","parseFont","test","init","publicStyleKeyIntf","initScrollBox","setDom","addEventListener","dispatchEvent","appendTo","beginEditAt","endEdit","setActiveCell","scrollIntoView","clearChangeLog","gotoCell","gotoRow","findColumnScrollLeft","findRowScrollTop","findColumnMaxTextLength","disposeContextMenu","getCellAt","isCellVisible","selectArea","getSchemaFromData","setFilter","selectRow","parentGrid","toggleTree","expandTree","collapseTree","context","insertRow","deleteRow","addRow","insertColumn","deleteColumn","addColumn","setRowHeight","setColumnWidth","resetColumnWidths","resetRowHeights","set","value","filterFor","filterRegExp","invalidFilterRegEx","RegExp","number","getItem","parse","Array","slice","arguments","canvasDatagrid","drawOnAllImagesLoaded","loaded","htmlImageCache","html","complete","drawHtml","cell","img","v","innerHTML","formattedValue","drawImage","Image","onload","src","btoa","drawOrderByArrow","headerOrderByArrowColor","strokeStyle","headerOrderByArrowBorderColor","beginPath","headerOrderByArrowMarginLeft","headerOrderByArrowMarginTop","moveTo","lineTo","headerOrderByArrowWidth","headerOrderByArrowHeight","stroke","fill","headerOrderByArrowMarginRight","drawTreeArrow","treeArrowColor","treeArrowBorderColor","treeArrowMarginLeft","treeArrowMarginTop","treeArrowWidth","treeArrowHeight","treeArrowMarginRight","radiusRect","radius","r","b","quadraticCurveTo","strokeRect","text","addBorderLine","addEllipsis","measureText","substring","drawText","paddingLeft","paddingTop","paddingRight","paddingBottom","vPos","hPos","orderByArrowWidth","fontHeight","horizontalAlignment","verticalAlignment","perfCounters","drawCount","perfWindowSize","internal","drawCell","rowOrderIndex","headerIndex","columnOrderIndex","childGridAttributes","val","cellStyle","isHeader","isCorner","isRowHeader","selected","hovered","active","isGrid","isArray","activeHeader","orderByArrowSize","treeArrowSize","cellWidth","ev","columnWidth","borderWidth","cx","cy","cellHeight","rowOpen","sortColumnIndex","sortRowIndex","gridId","title","userHeight","rowHeight","userWidth","visibleCells","unshift","lineWidth","cellHeightWithChildGrid","checkScrollHeight","cellWidthWithChildGrid","rd","tree","showRowNumbers","visible","toString","filterTextPrefix","aCell","selectionBorders","drawRowHeader","rowData","a","rowHeaderCell","drawRow","treeHeight","rowSansTreeHeight","g","treeGrid","rowHeaders","u","performance","now","cellBorderWidth","scale","devicePixelRatio","backgroundColor","showNewRow","selectionOverlayBorderWidth","selectionOverlayBorderColor","headerCell","rArgs","endCap","rowSelectionMode","activeCellOverlayBorderWidth","activeCellOverlayBorderColor","getHeaderWidth","reorderObject","dragOffset","heigth","reorderMarkerBackgroundColor","reorderMarkerBorderWidth","reorderMarkerBorderColor","dragMode","reorderMarkerIndexBorderWidth","reorderMarkerIndexBorderColor","vb","nb","co","scrollBarBoxMargin","scrollBarBorderColor","scrollBarBorderWidth","scrollBarBackgroundColor","scrollBoxHeight","scrollHeight","scrollBarBoxWidth","scrollBarBoxColor","scrollBarActiveColor","scrollBarBoxBorderRadius","scrollBoxWidth","scrollWidth","scrollBarCornerBorderColor","scrollBarCornerBackgroundColor","bar","box","gridBorderWidth","gridBorderColor","debug","perf","reduce","toFixed","map","join","htmlImages","mousex","mousey","touchx","touchStart","touchy","entities","dragContext","touchDelta","touchAnimateTo","touchSigma","xPPS","yPPS","touchingCell","startingCell","animationFrames","getTouchPos","touches","calculatePPS","touchCell","clearInterval","touchCalcTimeout","Math","abs","touchDeadZone","touchstart","NativeEvent","stopPropagation","preventDefault","touchScrollStart","touchmove","clearTimeout","touchTimeout","touchSelectTimeMs","setInterval","touchHaltAnimation","body","passive","touchend","touchcancel","easing","touchEndAnimation","scrollTo","requestAnimationFrame","touchReleaseAnimationDurationMs","dz","touchReleaseAcceleration","fn","sfn","idx","splice","defaultPrevented","drawAfterResize","cellBorder","headerCellBorder","headerCellBorderWidth","parentDOMNode","accumulator","widthBoxRatio","heightBoxRatio","max","scrollBarBoxMinSize","page","pageUpDownOverlap","resizeEditInput","input","bx2","getVisibleCellByIndex","editCell","cellPaddingLeft","scroll","overridePos","contextMenu","dragBounds","sBounds","delta","controlKey","metaKey","persistantSelectionMode","previousCell","isInGrid","cellBoundaryCrossed","draggingItem","dragItem","cursor","selecting","getSelectionBounds","dragStart","dragStartObject","shiftKey","min","bottom","right","ignoreNextClick","dragAddToSelection","selectionBounds","abort","abortEdit","newValue","oldValue","aborted","focus","postDraw","multiLine","appendChild","createInlineStyle","zIndex","nx","ny","keyCode","editable","checkSelectionChange","selectionChanged","selectedData","treeArrowClickRadius","dragResizeColumn","resizingStartingWidth","resizingStartingHeight","minColumnWidth","minRowHeight","resizeScrollZone","globalRowResize","stopDragResize","scrollGrid","scrollMode","scrollStartMode","scrollStart","stopScrollGrid","dragReorder","allowColumnReordering","allowRowReordering","source","target","reorderDeadZone","reorderTarget","stopDragReorder","cr","row-reorder","column-reorder","lastMouseDownTarget","button","last","cols","selectionFollowsActiveCell","deltaY","deltaX","clipboardData","sData","setData","blur","dataGroup","autoResizeColumns","createContextMenu","items","parentContextMenu","createItems","item","removeChildContext","relatedTarget","container","children","contextItemContainer","setAttribute","createChildContext","getAttribute","cPos","childContextMenuMarginLeft","childContextMenuMarginTop","childMenuArrow","addContent","content","childContextMenuArrowHTML","clickIndex","Event","checkArrowVisibility","upArrow","downArrow","startHoverScroll","contextHoverScrollAmount","hoverScrollTimeout","contextHoverScrollRateMs","endHoverScroll","selectedIndex","loc","zIndexTop","color","contextMenuArrowColor","el","textAlign","inputDropdown","maxHeight","innerHeight","autocompleteBottomMargin","minWidth","contextMenuArrowUpHTML","contextMenuArrowDownHTML","contextMenuWindowMargin","innerWidth","isNaN","isFinite","createFilterContextMenuItems","fillAutoComplete","autoCompleteItems","filterInput","disposeAutocomplete","createAutoCompleteContext","iRect","autoCompleteContext","filterContainer","filterLabel","filterAutoCompleteButton","onclick","filterOptionText","replace","contextFilterButtonHTML","cf","removeFilterOptionText","addDefaultContextMenuItem","showFilter","showCopy","copyText","execCommand","showClearSettingsOption","clearSettingsOptionText","allowSorting","showOrderByOption","showOrderByOptionTextAsc","showOrderByOptionTextDesc","contextmenuEvent","contextMenuMarginLeft","contextMenuMarginTop","className","css","canvas-datagrid-context-menu-filter-button","verticalAlign","marginLeft","padding","background","contextMenuBackground","contextMenuColor","border","contextFilterButtonBorder","borderRadius","contextFilterButtonBorderRadius","canvas-datagrid-context-child-arrow","cssFloat","childContextMenuArrowColor","fontSize","contextMenuChildArrowFontSize","fontFamily","contextMenuFontFamily","canvas-datagrid-autocomplete","contextMenuFontSize","contextMenuBorder","contextMenuPadding","contextMenuBorderRadius","opacity","contextMenuOpacity","overflow","canvas-datagrid-autocomplete-item","canvas-datagrid-autocomplete-item:hover","contextMenuHoverBackground","contextMenuHoverColor","canvas-datagrid-canvas","canvas-datagrid","boxSizing","canvas-datagrid-control-input","canvas-datagrid-edit-input","outline","margin","editCellPaddingLeft","editCellFontSize","editCellFontFamily","boxShadow","editCellBoxShadow","editCellBorder","editCellColor","editCellBackgroundColor","canvas-datagrid-context-menu-item","contextMenuItemMargin","contextMenuItemBorderRadius","canvas-datagrid-context-menu-item:hover","canvas-datagrid-context-menu-label","contextMenuLabelMargin","display","contextMenuLabelDisplay","contextMenuLabelMinWidth","maxWidth","contextMenuLabelMaxWidth","canvas-datagrid-context-menu","canvas-datagrid-invalid-search-regExp","contextMenuFilterInvalidExpresion","prop","onblur","MutationObserver","mutations","mutation","observe","setScrollTop","preventScrollEvent","setScrollLeft","sHeight","sWidth","colIndex","applyFilter","coulumn","supressEvent","rowId","childGrid","treeGridHeight","direction","dontSetStorageData","sort","useTouchScrollZones","tsz","touchScrollZone","borderResizeZone","allowColumnResize","allowColumnResizeFromCell","allowRowHeaderResize","allowRowResize","allowRowResizeFromCell","maxCol","minCol"," ","bounds","rowHeaderCellFont","autosizePadding","autosizeHeaderCellPadding","rowHeaderCellPaddingRight","rowHeaderCellPaddingLeft","headerCellFont","headerCellPaddingRight","headerCellPaddingLeft","cellFont","cellPaddingRight","cellAutoResizePadding","total","int","asc","localeCompare","date","Date","getTime"],"mappings":"CAAS,SAAUA,GCInB,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAE,OAGA,IAAAC,GAAAF,EAAAD,IACAI,EAAAJ,EACAK,GAAA,EACAH,WAUA,OANAJ,GAAAE,GAAAM,KAAAH,EAAAD,QAAAC,IAAAD,QAAAH,GAGAI,EAAAE,GAAA,EAGAF,EAAAD,QAvBA,GAAAD,KA4BAF,GAAAQ,EAAAT,EAGAC,EAAAS,EAAAP,EAGAF,EAAAU,EAAA,SAAAP,EAAAQ,EAAAC,GACAZ,EAAAa,EAAAV,EAAAQ,IACAG,OAAAC,eAAAZ,EAAAQ,GACAK,cAAA,EACAC,YAAA,EACAC,IAAAN,KAMAZ,EAAAmB,EAAA,SAAAf,GACA,GAAAQ,GAAAR,KAAAgB,WACA,WAA2B,MAAAhB,GAAA,SAC3B,WAAiC,MAAAA,GAEjC,OADAJ,GAAAU,EAAAE,EAAA,IAAAA,GACAA,GAIAZ,EAAAa,EAAA,SAAAQ,EAAAC,GAAsD,MAAAR,QAAAS,UAAAC,eAAAjB,KAAAc,EAAAC,IAGtDtB,EAAAyB,EAAA,GAGAzB,IAAA0B,EAAA,KDMM,SAAUtB,EAAQD,EAASH,GEnEjC,GAAA2B,GAAAC,CAEAD,IACA3B,EAAA,GACAA,EAAA,GACAA,EAAA,GACAA,EAAA,GACAA,EAAA,GACAA,EAAA,GACAA,EAAA,QAmkBC6B,MAlkBDD,EAAA,WACA,YAEA,SAAAE,GAAAC,GACAA,OACA,IAAAC,KAujBA,OAtjBAA,GAAAD,OACAC,EAAAC,WAAAH,EACAE,EAAAE,QACAC,QACAC,YAEAJ,EAAAK,UAAA,EACAL,EAAAM,YACAC,YAAA,EACAC,SAAA,GAEAR,EAAAS,YAAA,iBACAT,EAAAU,sBAAA,wCACAV,EAAAW,4BAAA,qCACAX,EAAAY,SAAA,0BACAZ,EAAAa,QAAAb,EAAAY,SACAZ,EAAAc,eAAA,MACAd,EAAAe,iBACAf,EAAAgB,WACAhB,EAAAiB,iBACAjB,EAAAkB,aACAlB,EAAAmB,eACAnB,EAAAoB,OACAjB,QACAC,WACAiB,UAEArB,EAAAsB,cAAA,WACA,UAEAtB,EAAAuB,cACAvB,EAAAwB,UACAxB,EAAAyB,cACAzB,EAAA0B,SACA1B,EAAA2B,QACA3B,EAAA4B,cACA5B,EAAA6B,WACA7B,EAAA8B,gBACA9B,EAAA+B,UACA/B,EAAAgC,IAAA,EACAhC,EAAAiC,WACAjC,EAAAkC,eAAA,EACAlC,EAAAmC,eAAA,EACAnC,EAAAoC,gBAAA,EACApC,EAAAqC,gBAAA,EACArC,EAAAsC,cACAtC,EAAAuC,gBACAvC,EAAAwC,aACA,sBACA,sBACA,yBACA,wBACA,0BACA,0BAEAxC,EAAAyC,OAAsBC,EAAA,EAAAC,EAAA,GACtB3C,EAAA4C,gBAAA,SAAAC,GACA,GAAAnE,MAAAgB,EAAAM,EAAA8C,YAAAxE,EAAA0B,EAAA+C,KAAAC,MAeA,OAdAhD,GAAAuB,WAAA0B,QAAA,SAAAC,EAAAC,GACAA,IAAA7E,IACAI,EAAAyE,MACAN,EACAnD,EAAAuD,QAAA,SAAAG,GACA1E,EAAAyE,GAAAC,EAAAzE,MAAAqB,EAAA+C,KAAAI,GAAAC,EAAAzE,QAGAuE,EAAAD,QAAA,SAAAI,IACA,IAAAA,IACA3E,EAAAyE,GAAAzD,EAAA2D,GAAA1E,MAAAqB,EAAA+C,KAAAI,GAAAzD,EAAA2D,GAAA1E,YAIAD,GAEAsB,EAAAsD,aAAA,SAAAC,GAEA,IADA,GAAAb,GAAA,EAAAC,EAAA,EACAY,EAAAC,YACA,yBAAAD,EAAAE,UACA,yBAAAF,EAAAE,WACAf,GAAAa,EAAAG,WACAf,GAAAY,EAAAI,WAEAJ,IAAAC,UAEA,QAAoBI,KAAAlB,EAAAmB,IAAAlB,IAEpB3C,EAAA8D,SAAA,SAAAP,EAAAQ,GAEA,IADA,GAAAC,GAAAC,EAAAvB,EAAA,EAAAC,EAAA,EAAAjD,EAAA6D,EACAA,EAAAW,cACAxB,GAAAa,EAAAY,WACAxB,GAAAY,EAAAa,UACAJ,EAAAT,EAAAc,aACAJ,EAAAV,EAAAe,YACAf,IAAAW,YAEA,OAAAH,IACwBH,KAAAlB,EAAAmB,IAAAlB,EAAA4B,OAAAP,EAAAQ,MAAAP,IAExBV,EAAA7D,EACAA,EAAAM,EAAAsD,aAAAC,IACoBK,KAAAlB,EAAAhD,EAAAkE,KAAAC,IAAAlB,EAAAjD,EAAAmE,IAAAU,OAAAP,EAAAQ,MAAAP,KAEpBjE,EAAAyE,YAAA,SAAAlB,GACA,GAAAmB,GAAA1E,EAAA2E,OAAAC,wBACAC,GACAnC,EAAAa,EAAAuB,QAAAJ,EAAAd,KACAjB,EAAAY,EAAAwB,QAAAL,EAAAb,IAMA,OAJA7D,GAAAgF,cACAH,EAAAnC,GAAA1C,EAAAiF,iBACAJ,EAAAlC,GAAA3C,EAAAkF,kBAGAxC,EAAAmC,EAAAnC,EACAC,EAAAkC,EAAAlC,EACA+B,SAGA1E,EAAAmF,UAAA,SAAAC,EAAAC,EAAAC,GACAA,KAAA,CACA,IAAA5C,GAAArE,IACA,KAAAqE,EAAA0C,EAAyB1C,GAAA2C,EAAW3C,GAAA4C,EACpCjH,EAAAqE,IAEA,OAAArE,IAEA2B,EAAAuF,oBAAA,WACA,MAAAvF,GAAAyB,WAAA+D,kBACAxF,EAAAoB,MAAAjB,MAAA,IAAAH,EAAA0B,MAAA+D,iBADqD,GAGrDzF,EAAA0F,mBAAA,WACA,MAAA1F,GAAAyB,WAAAkE,eACA3F,EAAAoB,MAAAhB,QAAAwF,YAAA5F,EAAA0B,MAAAmE,eADkD,GAGlD7F,EAAA8F,eAAA,WACA9F,EAAAyB,WAAAsE,gBACAC,aAAAC,QAAAjG,EAAAS,YAAA,IAAAT,EAAAyB,WAAA9C,KAAAuH,KAAAC,WACA/E,OACAjB,KAAAH,EAAAoB,MAAAjB,KACAC,QAAAJ,EAAAoB,MAAAhB,SAEAF,QACAC,KAAAH,EAAAE,OAAAC,KACAC,QAAAJ,EAAAE,OAAAE,SAEAS,QAAAb,EAAAa,QACAC,eAAAd,EAAAc,mBAGAd,EAAA8C,UAAA,WACA,MAAA9C,GAAAoG,QAAApG,EAAAqG,YAEArG,EAAAsG,mBAAA,WACA,GAAA5G,GAAAM,EAAA8C,WACA9C,GAAAE,OAAAE,QAAAJ,EAAAmF,UAAA,EAAAzF,EAAAsD,OAAA,IAEAhD,EAAAuG,gBAAA,WACAvG,EAAAE,OAAAC,KAAAH,EAAAmF,UAAA,EAAAnF,EAAA+C,KAAAC,OAAA,IAEAhD,EAAAwG,iBAAA,WACA,MAAAxG,GAAA8C,YAAA2D,OAAA,SAAApD,GAA2D,OAAAA,EAAAqD,UAE3D1G,EAAA2G,iBAAA,WACA3G,EAAA4G,UACA5G,EAAA4G,OAAA5G,EAAAY,UAAAZ,EAAAgC,IACAhC,EAAAgC,KAAA,EACAhC,EAAA8C,YAAAG,QAAA,SAAA4D,EAAA1D,GACA,GAAAzE,GAAAmI,EAAAC,cAAA,EACA,mBAAApI,KACAA,IAAAqI,MAAA/G,EAAA2B,MAAAkF,EAAA1D,KAEAnD,EAAA4G,OAAAC,EAAAlI,MAAAD,KAGAsB,EAAAgH,kBAAA,SAAAC,GAEA,IADA,GAAA9H,GAAA,EACAa,EAAA8B,aAAAmF,IACA9H,GAAA,EACA8H,GAAA9H,CAEA,OAAA8H,IAEAjH,EAAAyG,OAAA,SAAAS,GACA,GAAAC,GAAAnH,EAAAgB,QAAAkG,EAKA,OAJAC,QAAAtH,KAAAqH,IACAE,QAAAC,KAAA,mEAAAH,GACAC,EAAAnH,EAAAgB,QAAAsG,QAEAH,GAEAnH,EAAAuH,qBAAA,SAAAC,GACA,GAAAC,GAAA/E,EAAApE,EAAA0B,EAAA+C,KAAAC,MACA,KAAAN,EAAA,EAAuBA,EAAApE,EAAOoE,GAAA,EAC9B,kBAAA7C,IAAA6H,QAAA1H,EAAA+C,KAAAL,GAAA8E,IAEA,MADAC,SAAAzH,GAAA+C,KAAAL,GACA,WAAA+E,EAAA,SAAAA,CAGA,iBAEAzH,EAAA2H,eAAA,WACA7I,OAAA8I,KAAA5H,EAAAsC,YAAAW,QAAA,SAAA4E,GACA7H,EAAAsC,WAAAuF,GAAAC,UAGA9H,EAAA+H,iBAAA,WACAjJ,OAAA8I,KAAA5H,EAAAsC,YAAAW,QAAA,SAAA4E,GACA7H,EAAAsC,WAAAuF,GAAAG,YAGAhI,EAAAiI,gBAAA,SAAAC,GACA,GAAAC,GAAAnI,EAAA8D,SAAA9D,EAAAwD,YACA4E,EAAApI,EAAA8D,SAAAoE,GACAxI,EAAAM,EAAAsD,aAAAtD,EAAA2E,QACA0D,GACA3F,EAAA,EACAC,EAAA,EACAqB,EAAA,EACAC,EAAA,GAEAqE,GACA5F,GAAA6F,IACA5F,GAAA4F,IACAvE,EAAAuE,IACAtE,EAAAsE,KAEA9C,EAAAzF,EAAAuF,sBACAiD,EAAAxI,EAAA0F,oBASA,OARAyC,GAAAtE,KAAAnE,EAAAmE,IACAsE,EAAAvE,MAAAlE,EAAAkE,KACAwE,EAAAvE,KAAAnE,EAAAmE,IACAuE,EAAAxE,MAAAlE,EAAAkE,KACAyE,EAAArE,EAAAmE,EAAAtE,IAAAsE,EAAA5D,OAAA2D,EAAA9D,UAAApE,EAAA0B,MAAA+G,eACAJ,EAAApE,EAAAkE,EAAAvE,KAAAuE,EAAA3D,MAAA0D,EAAA/D,WAAAnE,EAAA0B,MAAA+G,eACAJ,EAAA3F,EAAAyF,EAAAvE,MAAA,EAAAwE,EAAAxE,KAAA4E,EACAH,EAAA1F,EAAAwF,EAAAtE,KAAA,EAAAuE,EAAAvE,IAAA4B,GAEA/C,EAAA2F,EAAA3F,EAAA4F,EAAA5F,EAAA2F,EAAA3F,EAAA4F,EAAA5F,EACAC,EAAA0F,EAAA1F,EAAA2F,EAAA3F,EAAA0F,EAAA1F,EAAA2F,EAAA3F,EACAqB,EAAAqE,EAAArE,EAAAsE,EAAAtE,EAAAqE,EAAArE,EAAAsE,EAAAtE,EACAC,EAAAoE,EAAApE,EAAAqE,EAAArE,EAAAoE,EAAApE,EAAAqE,EAAArE,IAGAjE,EAAA0I,YAAA,SAAAR,GACA,GAAAG,GAAArI,EAAAiI,gBAAAC,EACAG,GAAApE,EAAA,IAAiCoE,EAAApE,EAAA,GACjCoE,EAAArE,EAAA,IAAiCqE,EAAArE,EAAA,GACjCkE,EAAAxG,MAAAiH,KAAA,QACAN,EAAA1F,EAAA,MACA0F,EAAApE,EAAA,MACAoE,EAAArE,EAAA,MACAqE,EAAA3F,EAAA,OAcA1C,EAAA4I,eAAA,SAAArF,EAAAb,EAAAC,EAAAkG,GACA,GAAAC,GACAN,EAAAxI,EAAA0F,qBACAD,EAAAzF,EAAAuF,qBACA7C,GAAA1C,EAAAwE,MAAAxE,EAAAyB,WAAAsH,qBAAArG,EAAA1C,EAAAwE,QACAxE,EAAAkB,UAAAwC,YAAA1D,EAAAyB,WAAAuH,yBACAF,GAAA,GAEAnG,EAAA3C,EAAAuE,OAAAvE,EAAAyB,WAAAsH,qBAAApG,EAAA3C,EAAAuE,SACAvE,EAAAkB,UAAAyC,WAAA3D,EAAAyB,WAAAuH,yBACAF,GAAA,GAEApG,EAAA1C,EAAAyB,WAAAsH,oBAAAP,EAAA,IACAxI,EAAAkB,UAAAwC,YAAA1D,EAAAyB,WAAAuH,yBACAF,GAAA,GAEAnG,EAAA3C,EAAAyB,WAAAsH,oBAAAtD,EAAA,IACAzF,EAAAkB,UAAAyC,WAAA3D,EAAAyB,WAAAuH,yBACAF,GAAA,GAEAA,IAAAD,GAAA7I,EAAAiJ,cAAA,IAAAjJ,EAAAiJ,YAAA1I,cACAP,EAAAkJ,YAAAC,WAAAnJ,EAAAoJ,UAAApJ,EAAAyB,WAAA4H,iBAAA9F,KAGAvD,EAAAsJ,uBAAA,WACAtJ,EAAA+C,KAAA/C,EAAAuJ,aAAA9C,OAAA,SAAAvD,GACA,YAGAlD,EAAAwJ,eAAA,SAAA/K,EAAAiB,GACA,IAAAjB,EAAAE,KACA,SAAA8K,OAAA,yCAEA,IAAA/J,EAAA+G,OAAA,SAAApI,GAAuC,MAAAA,GAAAM,OAAAF,EAAAE,OAA4BqE,OAAA,EACnE,SAAAyG,OAAA,0BACAhL,EAAAE,KAAA,6CAEA,WAEAqB,EAAA0J,YAAA,SAAAC,EAAAC,EAAA3C,EAAA4C,GACAF,EAAA1C,OAAApH,KAAA+J,EAAA3C,GAAA4C,EAAAD,EAAA3C,IAEAjH,EAAA8J,cAAA,WACA9J,EAAA+J,SAAAtI,WAAAwB,QAAA,SAAA5E,GACA2B,EAAA0J,YAAA1J,EAAAyB,WAAA1B,EAAA1B,EAAA,GAAAA,EAAA,OAGA2B,EAAAgK,SAAA,WACAhK,EAAA+J,SAAAE,OAAAhH,QAAA,SAAA5E,GACA2B,EAAA0J,YAAA1J,EAAA0B,MAAA3B,EAAA2B,UAA6DrD,EAAA,GAAAA,EAAA,OAG7D2B,EAAAkK,SAAA,SAAAC,GACAnK,EAAAwG,mBAAAvD,QAAA,SAAAI,GACAA,EAAA1E,OAAAwL,OAAAtK,KAAAsK,GACAnK,EAAAoK,kBAAA/G,EAAA1E,QAGAqB,EAAAoK,kBAAA,eAEApK,EAAAqK,QAAA,YACArK,EAAAgF,aAAAhF,EAAA2E,QAAA3E,EAAA2E,OAAAnB,YACAxD,EAAA2E,OAAAnB,WAAA8G,YAAAtK,EAAA2E,QAEA3E,EAAAuK,YAAAC,oBAAA,UAAAxK,EAAAyK,SAAA,GACAzK,EAAAuK,YAAAC,oBAAA,YAAAxK,EAAA0K,WAAA,GACA1K,EAAAuK,YAAAC,oBAAA,WAAAxK,EAAA2K,UAAA,GACA3K,EAAAuK,YAAAC,oBAAA,QAAAxK,EAAA4K,OAAA,GACA5K,EAAAuK,YAAAC,oBAAA,YAAAxK,EAAAoJ,WACApJ,EAAAuK,YAAAC,oBAAA,QAAAxK,EAAA6K,aAAA,GACA7K,EAAA2E,OAAA6F,oBAAA,cAAAxK,EAAA8K,aAAA,GACA9K,EAAA2E,OAAA6F,oBAAA,OAAAxK,EAAA+K,MACA/K,EAAAgL,aAAAR,oBAAA,WAAAxK,EAAAiL,UAAA,GACAjL,EAAAgL,aAAAR,oBAAA,QAAAxK,EAAAkL,OAAA,GACAlL,EAAAgL,aAAAR,oBAAA,UAAAxK,EAAAmL,SAAA,GACAC,OAAAZ,oBAAA,SAAAxK,EAAAgI,QACAhI,EAAAqL,UAAArL,EAAAqL,SAAAC,YACAtL,EAAAqL,SAAAC,cAGAtL,EAAAuL,oBAAA,WACA,GAAA7L,EACAM,GAAAwL,gBAAA,gBAAAxL,GAAAwL,eAAAtL,SACAF,EAAAwL,eAAAtL,OAAAC,KAAA6C,QAAAhD,EAAA+C,KAAAC,SACAhD,EAAAE,OAAAC,KAAAH,EAAAwL,eAAAtL,OAAAC,MAEAT,EAAAM,EAAA8C,YACA9C,EAAAE,OAAAE,QAAAJ,EAAAwL,eAAAtL,OAAAE,QACAV,EAAAuD,QAAA,SAAAe,EAAA3F,IACA,IAAA2B,EAAAE,OAAAE,QAAAsH,QAAArJ,IACA2B,EAAAE,OAAAE,QAAAqL,KAAApN,KAGA2B,EAAAa,YAAAhB,KAAAG,EAAAwL,eAAA3K,QACAb,EAAAY,SAAAZ,EAAAwL,eAAA3K,QACAb,EAAAc,mBAAAjB,KAAAG,EAAAwL,eAAA1K,eACAd,EAAAY,SAAAZ,EAAAwL,eAAA1K,eACAd,EAAA0L,gBAAA1L,EAAAa,UAAAb,EAAAc,gBACAd,EAAA2L,MAAA3L,EAAAa,QAAAb,EAAAc,kBAIAd,EAAA4L,cAAA,SAAAC,GACA,MAAAC,YAAAD,EAAA,KAEA7L,EAAA+L,kBAAA,SAAAF,GACA,GAAAG,GACAC,EACAC,EACAhJ,EACAE,EACAD,EACAwB,EAAAwH,SAAAC,cAAA,UACAC,EAAA1H,EAAA2H,WAAA,KAYA,KAXA3H,EAAAJ,OAAA,IACAI,EAAAH,MAAA,IACA6H,EAAAE,OACAF,EAAAG,SAAA,IAAA7H,EAAAH,MAAAG,EAAAJ,QACA8H,EAAAI,aAAA,MACAJ,EAAAK,UAAA,QACAL,EAAAM,KAAAd,EACAQ,EAAAO,SAAA,UACAZ,EAAAK,EAAAQ,aAAA,IAAAlI,EAAAH,MAAAG,EAAAJ,QAAAxB,KACAkJ,GAAA,EACAC,GAAA,EACAhJ,EAAA,EAAyBA,EAAAyB,EAAAJ,OAAqBrB,GAAA,EAC9C,IAAAE,EAAA,EAAgCA,EAAAuB,EAAAH,MAAuBpB,GAAA,GAEvD,GADAD,EAAA,GAAAD,EAAAyB,EAAAH,MAAApB,GACA,IAAA4I,EAAA7I,GAMqB,EACrB,IAAA8I,IACAA,EAAA/I,EAEA,OATA,GAAAE,IAAAuB,EAAAH,MAAA,QAAAyH,EAAA,CACAC,EAAAhJ,EACAA,EAAAyB,EAAAJ,MACA,QAYA,MAFA8H,GAAAS,UACA1F,QAAA2F,IAAAb,EAAAD,GACAC,EAAAD,GAEAjM,EAAAgN,UAAA,SAAA/F,GACA,OAAAgG,KAAAhG,KACAjH,EAAA0B,MAAAuF,EAAA,UAAAjH,EAAA4L,cAAA5L,EAAA0B,MAAAuF,MAGAjH,EAAAkN,KAAA,WACA,GAAAC,KAgHA,IA/GAnN,EAAA8J,gBACA9J,EAAAgK,WACAhK,EAAAoN,gBACApN,EAAAqN,SACAvO,OAAA8I,KAAA5H,EAAA0B,OAAAuB,QAAAjD,EAAAgN,WACAhN,EAAA2B,KAAAuF,KAAA,kBACAlH,EAAA2B,KAAA2L,iBAAAtN,EAAAsN,iBACAtN,EAAA2B,KAAA6I,oBAAAxK,EAAAwK,oBACAxK,EAAA2B,KAAA4L,cAAAvN,EAAAuN,cACAvN,EAAA2B,KAAA0I,QAAArK,EAAAqK,QACArK,EAAA2B,KAAA6L,SAAAxN,EAAAwN,SACAxN,EAAA2B,KAAAX,QAAAhB,EAAAgB,QACAhB,EAAA2B,KAAAE,QAAA7B,EAAA6B,QACA7B,EAAA2B,KAAAuI,SAAAlK,EAAAkK,SACAlK,EAAA2B,KAAA8L,YAAAzN,EAAAyN,YACAzN,EAAA2B,KAAA+L,QAAA1N,EAAA0N,QACA1N,EAAA2B,KAAAgM,cAAA3N,EAAA2N,cACA3N,EAAA2B,KAAAiM,eAAA5N,EAAA4N,eACA5N,EAAA2B,KAAAkM,eAAA7N,EAAA6N,eACA7N,EAAA2B,KAAAmM,SAAA9N,EAAA8N,SACA9N,EAAA2B,KAAAoM,QAAA/N,EAAA+N,QACA/N,EAAA2B,KAAAqM,qBAAAhO,EAAAgO,qBACAhO,EAAA2B,KAAAsM,iBAAAjO,EAAAiO,iBACAjO,EAAA2B,KAAAyI,kBAAApK,EAAAoK,kBACApK,EAAA2B,KAAAuM,wBAAAlO,EAAAkO,wBACAlO,EAAA2B,KAAAwM,mBAAAnO,EAAAmO,mBACAnO,EAAA2B,KAAAyM,UAAApO,EAAAoO,UACApO,EAAA2B,KAAA0M,cAAArO,EAAAqO,cACArO,EAAA2B,KAAAgK,MAAA3L,EAAA2L,MACA3L,EAAA2B,KAAAmG,KAAA9H,EAAA8H,KACA9H,EAAA2B,KAAA2M,WAAAtO,EAAAsO,WACAtO,EAAA2B,KAAA+G,YAAA1I,EAAA0I,YACA1I,EAAA2B,KAAA4M,kBAAAvO,EAAAuO,kBACAvO,EAAA2B,KAAA6M,UAAAxO,EAAAwO,UACAxO,EAAA2B,KAAA8M,UAAAzO,EAAAyO,UACAzO,EAAA2B,KAAA+M,WAAA1O,EAAA0O,WACA1O,EAAA2B,KAAAgN,WAAA3O,EAAA2O,WACA3O,EAAA2B,KAAAiN,WAAA5O,EAAA4O,WACA5O,EAAA2B,KAAAkN,aAAA7O,EAAA6O,aACA7O,EAAA2B,KAAAgD,OAAA3E,EAAA2E,OACA3E,EAAA2B,KAAAmN,QAAA9O,EAAAqM,IACArM,EAAA2B,KAAAoN,UAAA/O,EAAA+O,UACA/O,EAAA2B,KAAAqN,UAAAhP,EAAAgP,UACAhP,EAAA2B,KAAAsN,OAAAjP,EAAAiP,OACAjP,EAAA2B,KAAAuN,aAAAlP,EAAAkP,aACAlP,EAAA2B,KAAAwN,aAAAnP,EAAAmP,aACAnP,EAAA2B,KAAAyN,UAAApP,EAAAoP,UACApP,EAAA2B,KAAAsG,gBAAAjI,EAAAiI,gBACAjI,EAAA2B,KAAA0N,aAAArP,EAAAqP,aACArP,EAAA2B,KAAA2N,eAAAtP,EAAAsP,eACAtP,EAAA2B,KAAA4N,kBAAAvP,EAAAuP,kBACAvP,EAAA2B,KAAA6N,gBAAAxP,EAAAwP,gBACAxP,EAAA2B,KAAAqG,OAAAhI,EAAAgI,OACAhI,EAAA2B,KAAAgG,eAAA3H,EAAA2H,eACA3H,EAAA2B,KAAAD,SACA5C,OAAA8I,KAAA5H,EAAA0B,OAAAuB,QAAA,SAAAgE,GAEAkG,EAAAlG,OAAApH,GACAf,OAAAC,eAAAoO,EAAAlG,GACA/H,IAAA,WACA,MAAAc,GAAA0B,MAAAuF,IAEAwI,IAAA,SAAAC,GACA1P,EAAAgN,UAAA0C,GACA1P,EAAA0B,MAAAuF,GAAAyI,EACA1P,EAAA8H,MAAA,GACA9H,EAAAuN,cAAA,gBAA4D5O,KAAAsI,EAAAyI,eAI5D5Q,OAAAC,eAAAiB,EAAA2B,KAAA,SACAzC,IAAA,WACA,MAAAiO,IAEAsC,IAAA,SAAAC,GACA5Q,OAAA8I,KAAA8H,GAAAzM,QAAA,SAAAgE,GACAjH,EAAAgN,UAAA0C,GACA1P,EAAA0B,MAAAuF,GAAAyI,EAAAzI,KAEAjH,EAAA8H,MAAA,GACA9H,EAAAuN,cAAA,gBAAwD5O,KAAA,QAAA+Q,aAGxD5Q,OAAA8I,KAAA5H,EAAAyB,YAAAwB,QAAA,SAAAgE,GACAnI,OAAAC,eAAAiB,EAAA2B,KAAAF,WAAAwF,GACA/H,IAAA,WACA,MAAAc,GAAAyB,WAAAwF,IAEAwI,IAAA,SAAAC,GACA1P,EAAAyB,WAAAwF,GAAAyI,EACA1P,EAAA8H,MAAA,GACA9H,EAAAuN,cAAA,oBAAgE5O,KAAAsI,EAAAyI,QAAAzI,UAIhEjH,EAAAgB,QAAAsG,OAAA,SAAAoI,EAAAC,GACA,IAAAA,EAAiC,QACjC,IAAAC,EACA5P,GAAA6P,uBAAAhQ,EACA,KACA+P,EAAA,GAAAE,QAAAH,EAAA,MACiB,MAAApM,GAEjB,YADAvD,EAAA6P,mBAAAtM,GAGA,MAAAqM,GAAA3C,KAAAyC,IAEA1P,EAAAgB,QAAA+O,OAAA,SAAAL,EAAAC,GACA,OAAAA,GACAD,IAAAC,GAEA3P,EAAAyB,WAAA9C,MAAAqB,EAAAyB,WAAAsE,eAAA,CAEA,GADA/F,EAAAwL,eAAAxF,aAAAgK,QAAAhQ,EAAAS,YAAA,IAAAT,EAAAyB,WAAA9C,MACAqB,EAAAwL,eACA,IACAxL,EAAAwL,eAAAtF,KAAA+J,MAAAjQ,EAAAwL,gBACqB,MAAAjI,GACrB6D,QAAAC,KAAA,0CAAA9D,GACAvD,EAAAwL,mBAAA3L,GAGAG,EAAAwL,gBACA,gBAAAxL,GAAAwL,eAAApK,QACApB,EAAAoB,MAAAjB,KAAAH,EAAAwL,eAAApK,MAAAjB,KACAH,EAAAoB,MAAAhB,QAAAJ,EAAAwL,eAAApK,MAAAhB,SACA,0BAAA6C,QAAA,SAAA5E,GACA2B,EAAAoB,MAAA/C,KACA2B,EAAAoB,MAAA/C,UAMA0B,EAAAgD,OACA/C,EAAA2B,KAAAoB,KAAAhD,EAAAgD,MAEAhD,EAAAqG,SACApG,EAAA2B,KAAAyE,OAAArG,EAAAqG,QAEApG,EAAA+C,OACA/C,EAAA2B,KAAAoB,SAEA/C,EAAAgI,QAAA,IAEAjK,EAAAkF,QAAA,SAAA7E,GACAA,EAAA4B,KAEAA,EAAAkN,OACAlN,EAAA2B,KA1jBA,GAAA5D,GAAAmS,MAAA3Q,UAAA4Q,MAAA5R,KAAA6R,UA+jBA,OAHAhF,iBAAAiF,iBACAjF,OAAAiF,eAAAvQ,GAEAA,GACCiH,MAAA5I,EAAAwB,MAAAvB,EAAAD,QAAAyB,IF2EK,SAAUxB,EAAQD,EAASH,GGvpBjC,GAAA2B,GAAAC,CAEAD,UA24BCE,MA34BDD,EAAA,WACA,YACA,iBAAAI,GAKA,QAAAsQ,KACA,GAAAC,IAAA,CACAzR,QAAA8I,KAAA5H,EAAAwQ,gBAAAvN,QAAA,SAAAwN,GACAzQ,EAAAwQ,eAAAC,GAAAC,WACAH,GAAA,KAGAA,GACAvQ,EAAA8H,OAGA,QAAA6I,GAAAC,GACA,GAAAC,GACAC,EAAAF,EAAAG,WAAAH,EAAAI,eACAtO,EAAAkO,EAAAlO,EAAA1C,EAAAiF,iBACAtC,EAAAiO,EAAAjO,EAAA3C,EAAAkF,eACA,IAAAlF,EAAAwQ,eAAAM,GAAA,CAEA,GADAD,EAAA7Q,EAAAwQ,eAAAM,GACAD,EAAAtM,SAAAqM,EAAArM,QAAAsM,EAAArM,QAAAoM,EAAApM,MAGiB,CACjB,IAAAqM,EAAAH,SACA,MAEA,OAAA1Q,GAAAqM,IAAA4E,UAAAJ,EAAAnO,EAAAC,GALA3C,EAAAwQ,eAAAM,OAAAjR,GAQAgR,EAAA,GAAAK,OAAAN,EAAApM,MAAAoM,EAAArM,QACAvE,EAAAwQ,eAAAM,GAAAD,EACAA,EAAAM,OAAA,WACAnR,EAAAqM,IAAA4E,UAAAJ,EAAAnO,EAAAC,GACA2N,KAEAO,EAAAO,IAAA,6BAA0CC,KAC1C,kDAAAT,EAAApM,MAAA,aAAAoM,EAAArM,OAAA,qJAGAuM,EAAA,uCAMA,QAAAQ,GAAA5O,EAAAC,GAqBA,MApBAD,IAAA1C,EAAAiF,iBACAtC,GAAA3C,EAAAkF,gBACAlF,EAAAqM,IAAAK,UAAA1M,EAAA0B,MAAA6P,wBACAvR,EAAAqM,IAAAmF,YAAAxR,EAAA0B,MAAA+P,8BACAzR,EAAAqM,IAAAqF,YACAhP,GAAA1C,EAAA0B,MAAAiQ,6BACAhP,GAAA3C,EAAA0B,MAAAkQ,4BACA,QAAA5R,EAAAc,gBACAd,EAAAqM,IAAAwF,OAAAnP,EAAAC,GACA3C,EAAAqM,IAAAyF,OAAApP,EAAA1C,EAAA0B,MAAAqQ,wBAAApP,GACA3C,EAAAqM,IAAAyF,OAAApP,EAAA,GAAA1C,EAAA0B,MAAAqQ,wBAAApP,EAAA3C,EAAA0B,MAAAsQ,0BACAhS,EAAAqM,IAAAwF,OAAAnP,EAAAC,KAEA3C,EAAAqM,IAAAyF,OAAApP,EAAAC,EAAA3C,EAAA0B,MAAAsQ,0BACAhS,EAAAqM,IAAAyF,OAAApP,EAAA1C,EAAA0B,MAAAqQ,wBAAApP,EAAA3C,EAAA0B,MAAAsQ,0BACAhS,EAAAqM,IAAAyF,OAAApP,EAAA,GAAA1C,EAAA0B,MAAAqQ,wBAAApP,GACA3C,EAAAqM,IAAAyF,OAAApP,EAAAC,EAAA3C,EAAA0B,MAAAsQ,2BAEAhS,EAAAqM,IAAA4F,SACAjS,EAAAqM,IAAA6F,OACAlS,EAAA0B,MAAAiQ,6BACA3R,EAAA0B,MAAAqQ,wBACA/R,EAAA0B,MAAAyQ,8BAEA,QAAAC,GAAAxB,EAAAlO,EAAAC,GAqBA,MApBAD,IAAA1C,EAAAiF,iBACAtC,GAAA3C,EAAAkF,gBACAlF,EAAAqM,IAAAK,UAAA1M,EAAA0B,MAAA2Q,eACArS,EAAAqM,IAAAmF,YAAAxR,EAAA0B,MAAA4Q,qBACAtS,EAAAqM,IAAAqF,YACAhP,GAAA1C,EAAA0B,MAAA6Q,oBACA5P,GAAA3C,EAAA0B,MAAA8Q,mBACAxS,EAAAuC,aAAAqO,EAAA7N,KAAA/C,EAAAY,YACAZ,EAAAqM,IAAAwF,OAAAnP,EAAAC,GACA3C,EAAAqM,IAAAyF,OAAApP,EAAA1C,EAAA0B,MAAA+Q,eAAA9P,GACA3C,EAAAqM,IAAAyF,OAAApP,EAAA,GAAA1C,EAAA0B,MAAA+Q,eAAA9P,EAAA3C,EAAA0B,MAAAgR,iBACA1S,EAAAqM,IAAAwF,OAAAnP,EAAAC,KAEA3C,EAAAqM,IAAAyF,OAAApP,EAAAC,GACA3C,EAAAqM,IAAAyF,OAAApP,EAAA1C,EAAA0B,MAAAgR,gBAAA/P,EAAA,GAAA3C,EAAA0B,MAAA+Q,gBACAzS,EAAAqM,IAAAyF,OAAApP,EAAAC,EAAA3C,EAAA0B,MAAA+Q,gBACAzS,EAAAqM,IAAAyF,OAAApP,EAAAC,IAEA3C,EAAAqM,IAAA4F,SACAjS,EAAAqM,IAAA6F,OACAlS,EAAA0B,MAAA6Q,oBACAvS,EAAA0B,MAAA+Q,eACAzS,EAAA0B,MAAAiR,qBAEA,QAAAC,GAAAlQ,EAAAC,EAAAsB,EAAAD,EAAA6O,GACAnQ,GAAA1C,EAAAiF,iBACAtC,GAAA3C,EAAAkF,eACA,IAAA4N,GAAApQ,EAAAuB,EAAA8O,EAAApQ,EAAAqB,CACAhE,GAAAqM,IAAAqF,YACA1R,EAAAqM,IAAAwF,OAAAnP,EAAAmQ,EAAAlQ,GACA3C,EAAAqM,IAAAyF,OAAAgB,EAAAD,EAAAlQ,GACA3C,EAAAqM,IAAA2G,iBAAAF,EAAAnQ,EAAAmQ,EAAAnQ,EAAAkQ,GACA7S,EAAAqM,IAAAyF,OAAAgB,EAAAnQ,EAAAqB,EAAA6O,GACA7S,EAAAqM,IAAA2G,iBAAAF,EAAAC,EAAAD,EAAAD,EAAAE,GACA/S,EAAAqM,IAAAyF,OAAApP,EAAAmQ,EAAAE,GACA/S,EAAAqM,IAAA2G,iBAAAtQ,EAAAqQ,EAAArQ,EAAAqQ,EAAAF,GACA7S,EAAAqM,IAAAyF,OAAApP,EAAAC,EAAAkQ,GACA7S,EAAAqM,IAAA2G,iBAAAtQ,EAAAC,EAAAD,EAAAmQ,EAAAlQ,GAEA,QAAA6J,GAAA9J,EAAAC,EAAAsB,EAAAD,GACAtB,GAAA1C,EAAAiF,iBACAtC,GAAA3C,EAAAkF,gBACAlF,EAAAqM,IAAAG,SAAA9J,EAAAC,EAAAsB,EAAAD,GAEA,QAAAiP,GAAAvQ,EAAAC,EAAAsB,EAAAD,GACAtB,GAAA1C,EAAAiF,iBACAtC,GAAA3C,EAAAkF,gBACAlF,EAAAqM,IAAA4G,WAAAvQ,EAAAC,EAAAsB,EAAAD,GAEA,QAAA4I,GAAAsG,EAAAxQ,EAAAC,GACAD,GAAA1C,EAAAiF,iBACAtC,GAAA3C,EAAAkF,gBACAlF,EAAAqM,IAAAO,SAAAsG,EAAAxQ,EAAAC,GAEA,QAAAwQ,GAAA1U,EAAAoG,GACA7E,EAAAqM,IAAAqF,aAEAjK,EAAA,WACAzH,EAAAqM,IAAAwF,OAAApT,EAAAiE,EAAA1C,EAAAiF,iBAAAxG,EAAAkE,EAAA3C,EAAAkF,iBACAlF,EAAAqM,IAAAyF,OAAArT,EAAAiE,EAAA1C,EAAAiF,iBAAAxG,EAAA+F,MAAA/F,EAAAkE,EAAA3C,EAAAkF,kBAEA4N,EAAA,WACA9S,EAAAqM,IAAAwF,OAAApT,EAAAiE,EAAA1C,EAAAiF,iBAAAxG,EAAA+F,MAAA/F,EAAAkE,EAAA3C,EAAAkF,iBACAlF,EAAAqM,IAAAyF,OAAArT,EAAAiE,EAAA1C,EAAAiF,iBAAAxG,EAAA+F,MAAA/F,EAAAkE,EAAA3C,EAAAkF,gBAAAzG,EAAA8F,SAEAwO,EAAA,WACA/S,EAAAqM,IAAAwF,OAAApT,EAAAiE,EAAA1C,EAAAiF,iBAAAxG,EAAAkE,EAAA3C,EAAAkF,gBAAAzG,EAAA8F,QACAvE,EAAAqM,IAAAyF,OAAArT,EAAAiE,EAAA1C,EAAAiF,iBAAAxG,EAAA+F,MAAA/F,EAAAkE,EAAA3C,EAAAkF,gBAAAzG,EAAA8F,SAEAjG,EAAA,WACA0B,EAAAqM,IAAAwF,OAAApT,EAAAiE,EAAA1C,EAAAiF,iBAAAxG,EAAAkE,EAAA3C,EAAAkF,iBACAlF,EAAAqM,IAAAyF,OAAArT,EAAAiE,EAAA1C,EAAAiF,iBAAAxG,EAAAkE,EAAA3C,EAAAkF,gBAAAzG,EAAA8F,UAGAM,KACA7E,EAAAqM,IAAA4F,SAEA,QAAAmB,GAAAF,EAAA1O,GACA,GAAA3F,GAAAR,EAAAI,EAAAwF,EAAA,CACA,IAAAjE,EAAAiB,cAAAiS,IAAAlT,EAAAiB,cAAAiS,GAAA1O,GACA,MAAAxE,GAAAiB,cAAAiS,GAAA1O,EAGA,KADAP,EAAAjE,EAAAqM,IAAAgH,YAAAH,GAAA1O,OACAA,EACA3F,EAAAqU,MACa,CACbrU,EAAAqU,EAAAI,UAAA,KACAjV,EAAA,CAEA,IACAA,GAAA,EACAQ,EAAAqU,EAAAI,UAAA,EAAAjV,GAAA,MACA4F,EAAAjE,EAAAqM,IAAAgH,YAAAxU,GAAA2F,YACiBA,EAAAP,GAKjB,MAHAjE,GAAAiB,cAAAiS,GAAAlT,EAAAiB,cAAAiS,OACAzU,GAAiBiR,MAAA7Q,EAAA2F,MAAAP,GACjBjE,EAAAiB,cAAAiS,GAAA1O,GAAA/F,EACAA,EAEA,QAAA8U,GAAA3C,GACA,GAAA4C,GAAAxT,EAAA0B,MAAAkP,EAAAlP,MAAA,eACA+R,EAAAzT,EAAA0B,MAAAkP,EAAAlP,MAAA,cACAgS,EAAA1T,EAAA0B,MAAAkP,EAAAlP,MAAA,gBACAiS,EAAA3T,EAAA0B,MAAAkP,EAAAlP,MAAA,iBACAkS,EAAAH,EAAA7C,EAAArM,OAAA,GAAAqM,EAAArM,OACAsP,EAAAL,EAAA5C,EAAA6B,eAAA7B,EAAAkD,iBACAlD,GAAAsC,KAAAE,EAAAxC,EAAAI,eAAAJ,EAAApM,MAAAkP,EAAAF,GACA5C,EAAAsC,KAAA3O,OAAAqM,EAAAmD,WACA,UAAAnD,EAAAoD,oBACAH,EAAAjD,EAAApM,MAAAoM,EAAAsC,KAAA1O,MAAAkP,EACa,WAAA9C,EAAAoD,sBACbH,EAAAjD,EAAApM,MAAA,EAAAoM,EAAAsC,KAAA1O,MAAA,GAEA,QAAAoM,EAAAqD,kBACAL,EAAAH,EAAA7C,EAAAsC,KAAA3O,OACa,WAAAqM,EAAAqD,oBACbL,EAAAhD,EAAArM,OAAAoP,EAAA/C,EAAAsC,KAAA3O,QAEAqM,EAAAsC,KAAAxQ,EAAAkO,EAAAlO,EAAAmR,EACAjD,EAAAsC,KAAAvQ,EAAAiO,EAAAjO,EAAAiR,EACAhH,EAAAgE,EAAAsC,KAAAxD,MAAAkB,EAAAsC,KAAAxQ,EAAAkO,EAAAsC,KAAAvQ,GAnMA,GAAAuR,MACAC,EAAA,EACAC,EAAA,EACApU,GAAAwQ,kBAwMAxQ,EAAA8H,KAAA,SAAAuM,GA2IA,QAAAC,GAAA5V,EAAA8B,EAAA+T,GACA,gBAAA1N,EAAA2N,EAAAC,GACA,GACAC,GACA9D,EAYA+D,EAdAC,EAAA/N,EAAAnF,OAAA,OAGAmT,EAAA,aAAA5H,KAAA2H,GACAE,EAAA,aAAA7H,KAAA2H,GACAG,EAAA,kBAAAH,EACAI,EAAAhV,EAAAuB,WAAAgT,KAAA,IAAAvU,EAAAuB,WAAAgT,GAAA7M,QAAA+M,GACAQ,EAAAjV,EAAAwB,OAAA9C,EAAAsB,EAAAY,aAAA,IAAAZ,EAAAwB,OAAA9C,EAAAsB,EAAAY,WAAA8G,QAAA+M,GACAS,EAAAlV,EAAAM,WAAAE,WAAA+T,GAAAvU,EAAAM,WAAAC,cAAAkU,EACAU,EAAAjF,MAAAkF,QAAA1W,EAAAmI,EAAAlI,OACA0W,IAAArV,EAAAE,OAAAC,KAAAH,EAAAM,WAAAE,YAAA+T,GACAvU,EAAAE,OAAAE,QAAAJ,EAAAM,WAAAC,eAAAkU,IACA,IAAAA,IAAA,IAAAF,KACAQ,EAAA,0CAEA5N,EAAAnH,EAAA4B,WAAAiF,EAAAK,MAAA,UACAoO,EAAA,EACAC,EAAA,EACAC,EAAAxV,EAAAoB,MAAAhB,QAAA2U,EAAA,aAAAlO,EAAA7G,EAAAY,YAAAiG,EAAArC,MACAiR,GACA/F,MAAAhR,EAAAmI,EAAAlI,MACAuE,IAAAxE,EACAmI,SAmBA,IAjBA,kBAAA+N,IACAY,EAAAvR,EAAAvB,OAGA7C,KAAA2V,IACAA,EAAAxV,EAAA0B,MAAAgU,aAEAhT,EAAA8S,EAAAG,EAAA,IACAjT,GAAA8S,EAAAG,GAEAT,IACAN,EAAA,eAEA,IAAA5U,EAAAmB,YAAAuG,QAAAlH,IAAAqU,GACA7U,EAAAmB,YAAAsK,KAAAjL,GAEAmU,EAAA3U,EAAAuN,cAAA,kBAAAkI,IACAzV,EAAAuN,cAAA,mBAAAkI,GAwLA,MAvLAG,GAAAlT,EACAmT,EAAAlT,EACA,eAAAiS,GACAgB,EAAA,EACAC,EAAA,GACyBd,EACzBa,EAAA,EACyBf,IACzBgB,EAAA,GAEAjF,GACA1J,KAAAiO,EAAA,uBAAAtO,EAAAK,KACAxF,MAAAkT,EACAnR,SAAA,uBACAf,EAAAkT,EACAjT,EAAAkT,EACA7B,oBAAAhU,EAAA0B,MAAAkT,EAAA,uBACAX,kBAAAjU,EAAA0B,MAAAkT,EAAA,qBACAxQ,UAAApE,EAAAkF,gBACAf,WAAAnE,EAAAiF,iBACAtB,UAAA3D,EAAAkB,UAAAyC,UACAD,WAAA1D,EAAAkB,UAAAwC,WACAwR,UAAAG,EACAJ,UACAD,WACAxQ,MAAAgR,EACAjR,OAAAuR,EACAxR,YAAAkR,EACAnR,aAAAyR,EACAtS,WAAAxD,EAAA2B,KAAA6B,WACAU,aAAAlE,EAAA2B,KAAA6B,WACAT,KAAArE,EACAoW,WACAD,WACAE,cACAgB,UACAlP,SACAtG,YAAAkU,EACAjU,SAAA+T,EACAyB,gBAAAxB,EACAyB,aAAAzV,EACA2U,SACAe,QAAAlW,EAAAyB,WAAA9C,MAAA,IAAAD,EAAAsB,EAAAY,UAAA,IAAAiG,EAAA7G,EAAAY,UAAAjC,KACA+P,WAAA1O,EAAA2B,KACAoP,UAAA,GACAsE,eACA3F,MAAAmF,EACAhO,EAAAsP,OAAAtP,EAAAlI,KAAAD,EAAAmI,EAAAlI,OAEA8W,EAAA7E,OACAA,EAAAwF,WAAAxF,EAAAiE,SAAA7U,EAAAoB,MAAAjB,MAAA,GAAAkW,EACAzF,EAAA0F,UAAA1F,EAAAiE,SAAA7U,EAAAoB,MAAAhB,QAAAwF,WAAA5F,EAAAoB,MAAAhB,QAAAyG,EAAA7G,EAAAY,WACAgQ,EAAA5Q,EAAAY,UAAAlC,EAAAsB,EAAAY,UACAZ,EAAAuW,aAAAC,QAAA5F,GACA5Q,EAAAqM,IAAAK,UAAA1M,EAAA0B,MAAAkT,EAAA,mBACA5U,EAAAqM,IAAAmF,YAAAxR,EAAA0B,MAAAkT,EAAA,eACA5U,EAAAqM,IAAAoK,UAAAzW,EAAA0B,MAAAkT,EAAA,eACAK,IACAjV,EAAAqM,IAAAK,UAAA1M,EAAA0B,MAAAkT,EAAA,wBACA5U,EAAAqM,IAAAmF,YAAAxR,EAAA0B,MAAAkT,EAAA,qBAEAI,IACAhV,EAAAqM,IAAAK,UAAA1M,EAAA0B,MAAAkT,EAAA,2BACA5U,EAAAqM,IAAAmF,YAAAxR,EAAA0B,MAAAkT,EAAA,wBAEAS,IACArV,EAAAqM,IAAAK,UAAA1M,EAAA0B,MAAA2T,EAAA,oBAEArV,EAAAuN,cAAA,aAAAkI,GACA7E,EAAAuE,SACAvE,EAAArM,SAAA8R,IACAzF,EAAArM,OAAA8R,GAAArW,EAAA0B,MAAAgV,wBACAC,GAAA,GAEA/F,EAAApM,MAAAxE,EAAAoB,MAAAhB,QAAAyG,EAAA7G,EAAAY,YAAAZ,EAAA0B,MAAAkV,wBAEAb,IAAAnF,EAAAmE,cACAnE,EAAArM,OAAAvE,EAAAoB,MAAAjB,KAAA0W,EAAA7W,EAAAY,YAAAZ,EAAA0B,MAAAoU,YAEAlF,EAAAuE,SACA3I,EAAAoJ,EAAAC,EAAAjF,EAAApM,MAAAoM,EAAArM,QACA0O,EAAA2C,EAAAC,EAAAjF,EAAApM,MAAAoM,EAAArM,SAEAvE,EAAAqM,IAAAE,OACAqG,EAAAhC,EAAAlO,EAAAkO,EAAAjO,EAAAiO,EAAApM,MAAAoM,EAAArM,OAAA,GACAvE,EAAAqM,IAAA1D,OACA3I,EAAAuN,cAAA,kBAAAkI,GACA7E,EAAArM,SAAAuR,GAAAC,IAAAnF,EAAAmE,cACA/U,EAAAoB,MAAAjB,KAAA0U,GAAA,EAAAnW,EAAAsB,EAAAY,WAAAgQ,EAAArM,OACAoS,GAAA,GAEA/F,EAAApM,QAAAgR,IACAxV,EAAAoB,MAAAhB,QAAAyG,EAAA7G,EAAAY,WAAAgQ,EAAApM,MACAmS,GAAA,GAEA5B,GAAA/U,EAAAyB,WAAAqV,OACA9W,EAAAuN,cAAA,kBAAAkI,KACAF,EAAAnD,EAAAxB,EAAA5Q,EAAA0B,MAAAkT,EAAA,eAAAiB,EAAA,MAGA7V,EAAAyB,WAAAsV,gBAAAhC,IACAA,KACAnE,EAAAuE,QACAnV,EAAAsC,WAAAsO,EAAAsF,UACAxB,EAAA1U,EAAAD,KAAA2U,qBAAA1U,EAAAD,KACA2U,EAAA/V,KAAAqB,EAAAyB,WAAAsE,eAAA6K,EAAAsF,WAAArW,GACA6U,EAAAlR,WAAAoN,EACA8D,EAAA3R,KAAArE,EAAAmI,EAAAlI,MACAqB,EAAAsC,WAAAsO,EAAAsF,QAAAlW,EAAAC,WAAAyU,GACAiC,GAAA,GAEA/F,EAAA9Q,KAAAE,EAAAsC,WAAAsO,EAAAsF,QACAtF,EAAA9Q,KAAA0D,WAAAoN,EACAA,EAAA9Q,KAAAkX,SAAA,EACApG,EAAA9Q,KAAAgI,OACA9H,EAAAuN,cAAA,iBAAAkI,KAEAzV,EAAAsC,WAAAsO,EAAAsF,UACAlW,EAAAsC,WAAAsO,EAAAsF,QAAA1S,WAAAa,aAAA,GAEAwQ,GAAA7U,EAAAa,UAAAgG,EAAAlI,OACAqB,EAAAuN,cAAA,qBAAAkI,KACAH,EAAAhE,EAAAsE,EAAA5V,EAAA0B,MAAAkT,EAAA,oBAGA5U,EAAAqM,IAAAK,UAAA1M,EAAA0B,MAAAkT,EAAA,SACAK,IACAjV,EAAAqM,IAAAK,UAAA1M,EAAA0B,MAAAkT,EAAA,eAEAI,IACAhV,EAAAqM,IAAAK,UAAA1M,EAAA0B,MAAAkT,EAAA,kBAEAS,IACArV,EAAAqM,IAAAK,UAAA1M,EAAA0B,MAAA2T,EAAA,UAEArV,EAAAqM,IAAAM,KAAA3M,EAAA0B,MAAAkT,EAAA,QACAhE,EAAAmD,WAAA/T,EAAA0B,MAAAkT,EAAA,cACAhE,EAAA6B,eAAA8C,EACA3E,EAAAkD,kBAAAwB,EACAX,MAAA9U,KAAA8U,IAAAxN,EACAA,EAAAnH,EAAAqM,IAAAuE,GAAA,OACA/Q,KAAA8U,GAAAxN,IACAwN,EAAA,GACAvN,QAAAC,KAAA,mCACAR,EAAAK,KAAA,wBAEA0J,EAAAI,oBAAAnR,KAAA8U,GAAA,OAAAA,IAAA,IAAAsC,WACAjX,EAAAe,mBAAAlB,KAAAG,EAAAe,cAAA4T,IAAAE,IACAjE,EAAAI,eAAAhR,EAAAyB,WAAAyV,iBAAAvC,GAEA3U,EAAAuN,cAAA,aAAAkI,KACA7E,EAAAG,WAAA,SAAAlK,EAAAK,KACAyJ,EAAAC,GAEA2C,EAAA3C,MAKAsE,IACAiC,EAAAvG,GAEAoE,IAAAD,GACA/U,EAAAuB,WAAAqP,EAAApQ,SAAA,KACA,IAAAR,EAAAuB,WAAAqP,EAAApQ,SAAA,GAAAkH,QAAAkJ,EAAArQ,cACA,IAAAqQ,EAAApQ,UACAoQ,EAAAiE,UACAuC,EAAA3L,MAAAmF,EAAA,MAEA5Q,EAAAuB,WAAAqP,EAAApQ,SAAA,KACA,IAAAR,EAAAuB,WAAAqP,EAAApQ,SAAA,GAAAkH,QAAAkJ,EAAArQ,cACA6W,EAAA3L,MAAAmF,EAAA,MAEA5Q,EAAAuB,WAAAqP,EAAApQ,WAAA,IAAAoQ,EAAArQ,cACA,IAAAP,EAAAuB,WAAAqP,EAAApQ,UAAAkH,QAAAkJ,EAAArQ,YAAA,IACA6W,EAAA3L,MAAAmF,EAAA,OAEyB5Q,EAAAuB,WAAAqP,EAAApQ,YACzB,IAAAR,EAAAuB,WAAAqP,EAAApQ,UAAAkH,QAAAkJ,EAAArQ,YAAA,IACA6W,EAAA3L,MAAAmF,EAAA,MAEA5Q,EAAAqM,IAAAS,UACApK,GAAAkO,EAAApM,MAAAmR,EACA/E,EAAApM,OAIA,QAAA6S,GAAAC,EAAAnU,EAAAoR,GACA,GAAAgD,EACAvX,GAAAyB,WAAAkE,iBACAjD,EAAA,EACA8U,GAAqCA,cAAArU,EAAA,GACrCqU,EAAAxX,EAAAY,UAAA0W,EAAAtX,EAAAY,UACA2W,GACA5Y,KAAA,gBACA6F,MAAAxE,EAAA0B,MAAAmE,eACAnE,MAAA,gBACAwF,KAAA,SACAnE,KAAAuU,EAAAtX,EAAAY,UACAuC,OAAA,GAEAoU,EAAAvX,EAAAY,UAAA0W,EAAAtX,EAAAY,UACAmV,EAAA/V,EAAAuC,aAAA+U,EAAAtX,EAAAY,WACA0T,EAAAkD,EAAArU,EAAAoR,GAAAgD,GAAA,OAmEA,QAAAE,GAAA3E,EAAApU,GACA,GAAAL,GAAAqZ,EAAAC,EAAA9Y,EAAA+Y,EAAAlY,EAAAsD,MACA,IAAAL,EAAA,EAAAmT,EAAA9R,EACA,QAOA,IALA6S,EAAA7W,EAAA+C,KAAA+P,GACAiD,EAAA/V,EAAAuC,aAAAsU,EAAA7W,EAAAY,WACA+W,EAAA3X,EAAAoB,MAAAjB,KAAA0W,EAAA7W,EAAAY,YAAAZ,EAAA0B,MAAAoU,WACA4B,EAAA3B,EAAA/V,EAAAoB,MAAAC,MAAAwV,EAAA7W,EAAAY,WAAA,EACAyV,EAAAsB,EAAAD,EACA/U,GAAA,EAAA0T,EACA,QAMA,KAJArW,EAAAyB,WAAAkE,iBACAjD,GAAA8F,GAEAsN,EAAAO,EACAxX,EAAAmB,EAAAoC,gBAA8CvD,EAAA+Y,IAC9CvZ,EAAA2B,EAAAE,OAAAE,QAAAvB,MACA6D,GAAA4R,EAAAuC,EAAA/D,EAAApU,GAAAgB,EAAArB,KAAAQ,IACAmB,EAAAwE,QAHqD3F,GAAA,GA4CrD,MApCAiX,GAAAO,EACA3T,GAAA,EAAA1C,EAAAkB,UAAAwC,WAAA1D,EAAAqC,gBAEAwV,EAAA7X,EAAAsC,WAAAuU,EAAA7W,EAAAY,WACAkS,IAAA9S,EAAA+C,KAAAC,QAAA+S,GACA8B,EAAAb,SAAA,EACAa,EAAArU,YACAY,UAAAzB,EAAAgV,EAAA3X,EAAAkF,gBACAf,WAAAqE,EAAA,EAAAxI,EAAAiF,iBACAZ,aAAAqT,EACApT,YAAAtE,EAAAwE,MAAAgE,EAAAxI,EAAA0B,MAAA+G,eAAA,EACAvE,aAAAlE,EAAA2B,KAAA6B,WACAA,WAAAxD,EAAA2B,KAAA6B,WACA9B,MAAA1B,EAAA0B,MACA+B,SAAA,uBACAE,UAAA3D,EAAAkB,UAAAyC,UACAD,WAAA1D,EAAAkB,UAAAwC,WACAlD,SAAAsS,GAEA9S,EAAAuW,aAAAC,SACAhW,SAAAkC,EACAnC,YAAA,EACAoC,EAAAkV,EAAArU,WAAAY,UACA1B,EAAAmV,EAAArU,WAAAW,WACAI,OAAAsT,EAAArU,WAAAa,aACAG,MAAAqT,EAAArU,WAAAc,YACA5C,MAAA,YACAwF,KAAA2Q,EAAArU,WAAAC,WAEAoU,EAAA/P,QACiB+P,IACjBA,EAAArU,WAAAa,aAAA,QACArE,GAAAoB,MAAAC,MAAAwV,EAAA7W,EAAAY,YAEAkX,EAAArM,MAAAoL,EAAA/D,EAAApU,EAAAiE,EAAA0T,IACA1T,GAAAmT,EAAAH,GACA,EAjgBA,GAAA3V,EAAAgF,aAAAhF,EAAAuE,QAAAvE,EAAAwE,MAAA,CAGA,GAAAxE,EAAAgF,aAAAqP,EAEA,WADArU,GAAA0O,WAAA5G,MAGA,SAAA9H,EAAA2B,KAAAqV,QAAA,CAIA,GAAAL,GAAAhB,EAAA6B,EAAA/X,EAAAmW,EAAAC,EAAAgC,EAAA9B,EACAM,EAAAzQ,EAAAjD,EAAAD,EAAAjE,EAAAuF,EAAAC,EAAAvE,EAAAoT,EAAA+D,EAAAM,EACAC,KACAU,KACAxZ,EAAA0B,EAAA+C,KAAAC,OACA+U,EAAA/X,EAAAiJ,gBACAxD,EAAAzF,EAAAuF,sBACAiD,EAAAxI,EAAA0F,qBACAoQ,EAAA9V,EAAA0B,MAAAoU,UACA3B,IAAA,EACA1U,EAAAuY,YAAAC,MAEAjY,EAAA+C,KAAAC,OAAAhD,EAAAE,OAAAC,KAAA6C,QACAhD,EAAAuG,kBAmpBAvG,EAAAqM,IAAAE,OAxKA,WACAoJ,EAAA3V,EAAA0B,MAAAwW,gBACAlY,EAAAmB,eACAzB,EAAAM,EAAAwG,mBACAxG,EAAAuW,gBACAvW,EAAAkF,gBAAAlF,EAAAgF,YAAAhF,EAAAwD,WAAAY,UAAA,EACApE,EAAAiF,iBAAAjF,EAAAgF,YAAAhF,EAAAwD,WAAAW,WAAA,EACAH,EAAAhE,EAAAuE,OACAN,EAAAjE,EAAAwE,MACAxE,EAAAgF,aACAhF,EAAAqM,IAAA8L,MAAA/M,OAAAgN,iBAAAhN,OAAAgN,qBAGA,WACAxF,EAAA,IAAA3O,EAAAD,EAAA,GACAhE,EAAAqM,IAAA1D,OACA3I,EAAAqM,IAAAK,UAAA1M,EAAA0B,MAAA2W,gBACA7L,EAAA,IAAAvI,EAAAD,MAEA,WACA,GAAAnF,GAAAM,EAAAd,EAAAuZ,EAAAlY,EAAAsD,MAGA,KAFAN,GAAA,EAAA1C,EAAAkB,UAAAwC,WAAA1D,EAAAqC,gBACAM,GAAA,EAAA3C,EAAAkB,UAAAyC,UAAA8B,EAAAzF,EAAAmC,eACA2Q,EAAA9S,EAAAkC,eAA6C4Q,EAAAxU,IAC7Ca,EAAAa,EAAAE,OAAAC,KAAA2S,GACA2E,EAAAtY,EAAA2T,IAFoDA,GAAA,GAMpD,GAAA9S,EAAAyB,WAAA6W,WAAA,CAMA,IALAtY,EAAAyB,WAAAkE,iBACAjD,GAAA8F,GAEA6N,EAAAP,EAAA9V,EAAA0B,MAAAoU,WACAC,GAAA,EACAlX,EAAAmB,EAAAoC,gBAAkDvD,EAAA+Y,IAClDvZ,EAAA2B,EAAAE,OAAAE,QAAAvB,MACA6D,GAAA4R,EAAAtU,EAAA4G,OAAA5G,EAAA+C,KAAAC,OAAAhD,EAAA+C,KAAAC,QAAAtD,EAAArB,KAAAQ,IACAmB,EAAAwE,MAAAxE,EAAAkB,UAAAwC,aAHyD7E,GAAA,GAOzDiZ,EAAArM,MAAAzL,EAAA4G,OAAA5G,EAAA+C,KAAAC,OAAAhD,EAAA+C,KAAAC,OAAAL,EAAA0T,QAqDA,WACArW,EAAAqM,IAAAoK,UAAAzW,EAAA0B,MAAA6W,4BACAvY,EAAAqM,IAAAmF,YAAAxR,EAAA0B,MAAA8W,4BACApB,EAAAnU,QAAA,SAAAxE,GACA0U,EAAA1U,EAAA,GAAAA,EAAA,SAlOA,WACA,GAAAC,GAAAL,EAAAQ,EAAA4Z,EAAA5R,EAAA+Q,EAAAlY,EAAAsD,MAMA,IALA8U,EAAA7U,QAAA,SAAAyV,GACA/V,EAAA+V,EAAA,GACA5C,EAAA4C,EAAA,GACArB,EAAAqB,EAAA,GAAAA,EAAA,GAAAA,EAAA,MAEA1Y,EAAAyB,WAAA+D,kBAAA,CAQA,IAPA9C,GAAA,EAAA1C,EAAAkB,UAAAwC,WAAA1D,EAAAqC,gBACArC,EAAAyB,WAAAkE,iBACAjD,GAAA8F,GAEA7F,EAAA,EAEAmT,EAAA9V,EAAAuF,sBACA1G,EAAAmB,EAAAoC,gBAAkDvD,EAAA+Y,IAClDvZ,EAAA2B,EAAAE,OAAAE,QAAAvB,GACAgI,EAAAnH,EAAArB,GACAK,GACAyX,MAAAtP,EAAAsP,MACAxX,KAAAkI,EAAAlI,KACA6F,MAAAqC,EAAArC,MACA9C,MAAA,aACAwF,KAAA,SACA/D,MAAAtE,EACA8M,MAAAtN,GAEAoa,GAAsCA,WAAA5R,EAAAsP,OAAAtP,EAAAlI,MACtC8Z,EAAAzY,EAAAY,UAAA,IAAAiG,EAAA7G,EAAAY,UACAlC,EAAAsB,EAAAY,UAAAiG,EAAA7G,EAAAY,aACA8B,GAAA4R,EAAAmE,GAAA,MAAA/Z,EAAAG,EAAAR,IACA2B,EAAAwE,MAAAxE,EAAAkB,UAAAwC,aAhByD7E,GAAA,GAqBzD6D,EAAAuB,IACAxF,GACAE,KAAA,GACA6F,MAAAxE,EAAA0B,MAAA+G,eACA/G,MAAA,gBACAwF,KAAA,SACA/D,MAAAzD,EAAAsD,QAEAvE,EAAAuB,EAAAY,UAAA,aACA0T,GAAkCqE,OAAA,KAAW,MAAAla,GAAA,OAG7CuB,EAAAyB,WAAAkE,iBACAC,GAAsCA,WAAA,IACtCA,EAAA5F,EAAAY,UAAA,aACA8B,EAAA,EACAjE,GACAE,KAAA,aACA6F,MAAAxE,EAAA0B,MAAAmE,eACAnE,MAAA,aACAwF,KAAA,SACA/D,OAAA,GAEA1E,EAAAuB,EAAAY,UAAA,aACA0T,EAAA1O,GAAA,MAAAnH,GAAA,WAyKA,WACA0Y,IACAnX,EAAAyB,WAAAmX,iBACA5Y,EAAAM,YAAAN,EAAAM,WAAAE,WAAA2W,EAAA3W,WACAR,EAAAqM,IAAAoK,UAAAzW,EAAA0B,MAAAmX,6BACA7Y,EAAAqM,IAAAmF,YAAAxR,EAAA0B,MAAAoX,6BACA7F,EAAA,EAAAkE,EAAAxU,EAAA3C,EAAA+Y,iBAAAvQ,EAAA6N,KAGArW,EAAAqM,IAAAoK,UAAAzW,EAAA0B,MAAAmX,6BACA7Y,EAAAqM,IAAAmF,YAAAxR,EAAA0B,MAAAoX,6BACA7F,EAAAkE,EAAAzU,EAAAyU,EAAAxU,EAAAwU,EAAA3S,MAAA2S,EAAA5S,aApEA,WACA,GAAAvE,EAAAgZ,cAAA,CACA,GAAAjG,IACAxO,OAAAvE,EAAAgZ,cAAAzU,OACAC,MAAAxE,EAAAgZ,cAAAxU,MACA9B,EAAA1C,EAAAgZ,cAAAtW,EAAA1C,EAAAgZ,cAAAC,WAAAvW,EACAC,EAAA3C,EAAAgZ,cAAArW,EAAA3C,EAAAgZ,cAAAC,WAAAtW,GAEAnE,GACAgG,MAAAP,EACAiV,OAAAlV,EACAtB,EAAA,EACAC,EAAA,EAEA3C,GAAAqM,IAAAK,UAAA1M,EAAA0B,MAAAyX,6BACAnZ,EAAAqM,IAAAoK,UAAAzW,EAAA0B,MAAA0X,yBACApZ,EAAAqM,IAAAmF,YAAAxR,EAAA0B,MAAA2X,yBACA,gBAAArZ,EAAAsZ,UACAvG,EAAAvO,MAAAP,EACA8O,EAAArQ,EAAA,EACAlE,EAAAgG,MAAAP,EACAzF,EAAAmE,EAAA3C,EAAAiJ,YAAAtG,EACA6J,EAAAuG,EAAArQ,EAAAqQ,EAAApQ,EAAAoQ,EAAAvO,MAAAuO,EAAAxO,QACA0O,EAAAF,EAAArQ,EAAAqQ,EAAApQ,EAAAoQ,EAAAvO,MAAAuO,EAAAxO,QACAvE,EAAAqM,IAAAoK,UAAAzW,EAAA0B,MAAA6X,8BACAvZ,EAAAqM,IAAAmF,YAAAxR,EAAA0B,MAAA8X,8BACAxZ,EAAAiJ,YAAAzI,WAAAR,EAAAgZ,cAAAxY,UACAR,EAAAiJ,YAAAzI,SAAA,IAAAR,EAAAgZ,cAAAxY,UACA2S,EAAA3U,EAAA,MAEiB,mBAAAwB,EAAAsZ,UAAAtZ,EAAAgZ,gBACjBjG,EAAAxO,OAAAP,EACA+O,EAAApQ,EAAA,EACAnE,EAAA+F,OAAAP,EACAxF,EAAAkE,EAAA1C,EAAAiJ,YAAAvG,EACA8J,EAAAuG,EAAArQ,EAAAqQ,EAAApQ,EAAAoQ,EAAAvO,MAAAuO,EAAAxO,QACA0O,EAAAF,EAAArQ,EAAAqQ,EAAApQ,EAAAoQ,EAAAvO,MAAAuO,EAAAxO,QACAvE,EAAAqM,IAAAoK,UAAAzW,EAAA0B,MAAA6X,8BACAvZ,EAAAqM,IAAAmF,YAAAxR,EAAA0B,MAAA8X,8BACAxZ,EAAAiJ,YAAA1I,cAAAP,EAAAgZ,cAAAzY,aACAP,EAAAiJ,YAAA1I,YAAA,IAAAP,EAAAgZ,cAAAzY,aACA4S,EAAA3U,EAAA,UA/jBA,WACA,GAAAsS,IACApO,EAAA,EACAC,EAAA,EACA4B,OAAA,EACAC,MAAA,EACA9C,MAAA,uBAEAvC,GACAuD,EAAA,EACAC,EAAA,EACA4B,OAAA,EACAC,MAAA,EACA9C,MAAA,yBAEA+X,GACA/W,EAAA,EACAC,EAAA,EACA4B,OAAA,EACAC,MAAA,EACA9C,MAAA,uBAEAgY,GACAhX,EAAA,EACAC,EAAA,EACA4B,OAAA,EACAC,MAAA,EACA9C,MAAA,yBAEAiY,GACAjX,EAAA,EACAC,EAAA,EACA4B,OAAA,EACAC,MAAA,EACA9C,MAAA,qBAEAlD,EAAA,EAAAwB,EAAA0B,MAAAkY,mBACAlb,EAAA,GAAAsB,EAAA0B,MAAAkY,kBACA5Z,GAAAqM,IAAAmF,YAAAxR,EAAA0B,MAAAmY,qBACA7Z,EAAAqM,IAAAoK,UAAAzW,EAAA0B,MAAAoY,qBAEAhJ,EAAApO,GAAAuB,EAAAjE,EAAA0B,MAAA+G,eAAAzI,EAAA0B,MAAAoY,qBAAApb,EACAoS,EAAAnO,GAAA8C,EACAqL,EAAAtM,MAAAxE,EAAA0B,MAAA+G,eAAAzI,EAAA0B,MAAAoY,qBAAApb,EACAoS,EAAAvM,OAAAP,EAAAyB,EAAAzF,EAAA0B,MAAA+G,eAAA/J,EAAAF,EACAwB,EAAAqM,IAAAK,UAAA1M,EAAA0B,MAAAqY,yBACAvN,EAAAsE,EAAApO,EAAAoO,EAAAnO,EAAAmO,EAAAtM,MAAAsM,EAAAvM,OAAA/F,GACAyU,EAAAnC,EAAApO,EAAAoO,EAAAnO,EAAAmO,EAAAtM,MAAAsM,EAAAvM,OAAA/F,GAEAib,EAAA/W,EAAAoO,EAAApO,EAAA1C,EAAA0B,MAAAkY,mBACAH,EAAA9W,EAAA8C,EAAAzF,EAAA0B,MAAAkY,oBACA9I,EAAAvM,OAAAvE,EAAAkB,UAAA8Y,kBACAha,EAAAkB,UAAAyC,UAAA3D,EAAAkB,UAAA+Y,cACAR,EAAAjV,MAAAxE,EAAA0B,MAAAwY,kBACAT,EAAAlV,OAAAvE,EAAAkB,UAAA8Y,gBACAha,EAAAqM,IAAAK,UAAA1M,EAAA0B,MAAAyY,kBACA,WAAAlN,KAAA8K,EAAAjJ,WACA9O,EAAAqM,IAAAK,UAAA1M,EAAA0B,MAAA0Y,sBAEAX,EAAAjV,MAAAsM,EAAAtM,QACAoO,EAAA6G,EAAA/W,EAAA+W,EAAA9W,EAAA8W,EAAAjV,MAAAiV,EAAAlV,OAAAvE,EAAA0B,MAAA2Y,0BACAra,EAAAqM,IAAA4F,SACAjS,EAAAqM,IAAA6F,QAGA/S,EAAAuD,GAAA8F,EACArJ,EAAAwD,GAAAqB,EAAAhE,EAAA0B,MAAA+G,eAAA/J,EACAS,EAAAqF,MAAAP,EAAAjE,EAAA0B,MAAA+G,eAAAD,EAAA9J,EAAAF,EACAW,EAAAoF,OAAAvE,EAAA0B,MAAA+G,eAAAzI,EAAA0B,MAAAoY,qBAAApb,EACAsB,EAAAqM,IAAAK,UAAA1M,EAAA0B,MAAAqY,yBACAvN,EAAArN,EAAAuD,EAAAvD,EAAAwD,EAAAxD,EAAAqF,MAAAhG,EAAAW,EAAAoF,QACA0O,EAAA9T,EAAAuD,EAAAvD,EAAAwD,EAAAxD,EAAAqF,MAAAhG,EAAAW,EAAAoF,QAEAmV,EAAA/W,EAAAxD,EAAAwD,EAAA3C,EAAA0B,MAAAkY,mBACAF,EAAAhX,EAAA8F,EAAAxI,EAAA0B,MAAAkY,oBACAza,EAAAqF,MAAAxE,EAAAkB,UAAAoZ,iBACAta,EAAAkB,UAAAwC,WAAA1D,EAAAkB,UAAAqZ,aACAb,EAAAlV,MAAAxE,EAAAkB,UAAAoZ,eACAZ,EAAAnV,OAAAvE,EAAA0B,MAAAwY,kBACAla,EAAAqM,IAAAK,UAAA1M,EAAA0B,MAAAyY,kBACA,aAAAlN,KAAA8K,EAAAjJ,WACA9O,EAAAqM,IAAAK,UAAA1M,EAAA0B,MAAA0Y,sBAEAV,EAAAlV,MAAArF,EAAAqF,QACAoO,EAAA8G,EAAAhX,EAAAgX,EAAA/W,EAAA+W,EAAAlV,MAAAkV,EAAAnV,OAAAvE,EAAA0B,MAAA2Y,0BACAra,EAAAqM,IAAA4F,SACAjS,EAAAqM,IAAA6F,QAGAlS,EAAAqM,IAAAmF,YAAAxR,EAAA0B,MAAA8Y,2BACAxa,EAAAqM,IAAAK,UAAA1M,EAAA0B,MAAA+Y,+BACAd,EAAAjX,EAAAvD,EAAAuD,EAAAvD,EAAAqF,MAAAhG,EACAmb,EAAAhX,EAAAmO,EAAAnO,EAAAmO,EAAAvM,OAAA/F,EACAmb,EAAAnV,MAAAxE,EAAA0B,MAAA+G,eAAAzI,EAAA0B,MAAAoY,qBACAH,EAAApV,OAAAvE,EAAA0B,MAAA+G,eAAAzI,EAAA0B,MAAAoY,qBACAlH,EAAA+G,EAAAjX,EAAAiX,EAAAhX,EAAAgX,EAAAnV,MAAAmV,EAAApV,OAAA,GACAvE,EAAAqM,IAAA4F,SACAjS,EAAAqM,IAAA6F,OACAlS,EAAAuW,aAAAC,QAAA1F,GACA9Q,EAAAuW,aAAAC,QAAAiD,GACAzZ,EAAAuW,aAAAC,QAAArX,GACAa,EAAAuW,aAAAC,QAAAkD,GACA1Z,EAAAuW,aAAAC,QAAAmD,GACA3Z,EAAAkB,UAAAwZ,KACA5J,IACA9M,EAAA7E,GAEAa,EAAAkB,UAAAyZ,KACA7J,EAAA2I,EACAzV,EAAA0V,MA6iBA/C,GACA3W,EAAAgI,QAAA,GAxFA,WACAhI,EAAAqM,IAAAoK,UAAAzW,EAAA0B,MAAAkZ,gBACA5a,EAAAqM,IAAAmF,YAAAxR,EAAA0B,MAAAmZ,gBACA5H,EAAA,IAAAjT,EAAAwE,MAAAxE,EAAAuE,WAwBA,WACA2P,EAAAC,EAAAC,GAAA4D,YAAAC,MAAAxY,CACA,IAAAf,EACAsB,GAAAyB,WAAAqZ,QACA9a,EAAAqM,IAAAM,KAAA,kBACAjO,KACAA,EAAAqc,MAAA7G,EAAA8G,OAAA,SAAAzD,EAAAxE,GACA,MAAAwE,GAAAxE,GACqB,GAAAmB,EAAAlR,QAAAiY,QAAA,GACrB,OACA/G,EAAAgH,IAAA,SAAA3D,GAAuD,MAAAA,GAAA0D,QAAA,KAAuBE,KAAA,UAC9Ezc,EAAA0c,WAAAtc,OAAA8I,KAAA5H,EAAAwQ,gBAAAxN,OACAtE,EAAAgF,WAAA1D,EAAAkB,UAAAwC,WACAhF,EAAAiF,UAAA3D,EAAAkB,UAAAyC,UACAjF,EAAAwD,eAAAlC,EAAAkC,eACAxD,EAAAyD,eAAAnC,EAAAmC,eACAzD,EAAA0D,gBAAApC,EAAAoC,gBACA1D,EAAA2D,gBAAArC,EAAAqC,gBACA3D,EAAAuG,iBAAAjF,EAAAiF,iBACAvG,EAAAwG,gBAAAlF,EAAAkF,gBACAxG,EAAA8F,MAAAxE,EAAAwE,MACA9F,EAAA6F,OAAAvE,EAAAuE,OACA7F,EAAA2c,OAAArb,EAAAyC,MAAAC,EACAhE,EAAA4c,OAAAtb,EAAAyC,MAAAE,EACAjE,EAAA6c,OAAAvb,EAAAwb,WAAAxb,EAAAwb,WAAA9Y,EAAA,EACAhE,EAAA+c,OAAAzb,EAAAwb,WAAAxb,EAAAwb,WAAA7Y,EAAA,EACAjE,EAAAgd,SAAA1b,EAAAuW,aAAAvT,OACAtE,EAAA2B,SAAAL,EAAAK,SACA3B,EAAA4a,SAAAtZ,EAAAsZ,SACAtZ,EAAAiJ,cACAvK,EAAA6B,YAAAP,EAAAiJ,YAAA1I,YACA7B,EAAA8B,SAAAR,EAAAiJ,YAAAzI,SACA9B,EAAAsX,gBAAAhW,EAAAiJ,YAAA+M,gBACAtX,EAAAuX,aAAAjW,EAAAiJ,YAAAgN,aACAvX,EAAAoQ,QAAA9O,EAAAiJ,YAAA6F,QACApQ,EAAAid,YAAA3b,EAAAiJ,YAAA0S,YACAjd,EAAAgD,MAAA1B,EAAAiJ,YAAAvH,MACAhD,EAAAwI,KAAAlH,EAAAiJ,YAAA/B,MAEAlH,EAAAqM,IAAAE,OACAzN,OAAA8I,KAAAlJ,GAAAuE,QAAA,SAAAgE,EAAA9D,GACA,GAAA3E,GAAAyI,EAAA,KAAAvI,EAAAuI,EAEAjH,GAAAqM,IAAAK,UAAA,2BACAF,EAAAhE,EAFA,MAEArF,EAAA,IAFA,IAGAnD,EAAAqM,IAAAK,UAAA,mBACAE,EAAApO,EAAAgK,EAAA,EAAA/C,EAJA,GAIAtC,KAEAnD,EAAAqM,IAAAS,cAiBA9M,EAAAqM,IAAAS,eAGC/F,MAAA5I,EAAAwB,MAAAvB,EAAAD,QAAAyB,IH+pBK,SAAUxB,EAAQD,EAASH,GI5iDjC,GAAA2B,GAAAC,CAEAD,UAugCCE,MAvgCDD,EAAA,WACA,YACA,iBAAAI,GACA,GAAA4b,IAA0BlZ,EAAA,EAAAC,EAAA,EAAAgB,UAAA,EAAAD,WAAA,GAC1BmY,GAA8BnY,WAAA,EAAAC,UAAA,GAC9BmY,GAA0BpY,WAAA,EAAAC,UAAA,GAC1BoY,EAAA,EACAC,EAAA,EACAC,GAAA,EACAC,GAAA,EACAC,EAAA,CACAnc,GAAAoc,YAAA,SAAA7Y,GACA,GAAAmB,GAAA1E,EAAA2E,OAAAC,wBACAC,GACAnC,EAAAa,EAAA8Y,QAAA,GAAAvX,QAAAJ,EAAAd,KACAjB,EAAAY,EAAA8Y,QAAA,GAAAtX,QAAAL,EAAAb,IAMA,OAJA7D,GAAAgF,cACAH,EAAAnC,GAAA1C,EAAAiF,iBACAJ,EAAAlC,GAAA3C,EAAAkF,kBAGAxC,EAAAmC,EAAAnC,EACAC,EAAAkC,EAAAlC,EACA+B,SAGA1E,EAAAsc,aAAA,WACAP,GAAAH,EAAAlY,WAAAoY,EAAApY,aAAAkY,EAAAnU,EAAAqU,EAAArU,GACAuU,GAAAJ,EAAAjY,UAAAmY,EAAAnY,YAAAiY,EAAAnU,EAAAqU,EAAArU,GACAqU,GACApY,WAAAkY,EAAAlY,WACAC,UAAAiY,EAAAjY,UACA8D,EAAAuQ,YAAAC,MAAA,MAGAjY,EAAAuc,UAAA,SAAAhZ,GACA,kBACAiZ,cAAAxc,EAAAyc,iBACA,IAAA5X,GAAA7E,EAAAoc,YAAA7Y,EACAmZ,MAAAC,IAAAf,EAAAlZ,GAAAga,KAAAC,IAAAf,EAAAjZ,GAAA3C,EAAAyB,WAAAmb,gBACAX,EAAAjc,EAAAoO,UAAAvJ,EAAAnC,EAAAmC,EAAAlC,GACA3C,EAAAoJ,UAAA7F,EAAAsB,GACA7E,EAAA0K,UAAAnH,EAAAsB,GACA7E,EAAAoJ,UAAA7F,EAAAsB,GACA7E,EAAA8H,UAIA9H,EAAA6c,WAAA,SAAAtZ,GAIA,GAHA0Y,GAAA,EACAjc,EAAAwb,WAAAxb,EAAAoc,YAAA7Y,GACA2Y,EAAAlc,EAAAoO,UAAApO,EAAAwb,WAAA9Y,EAAA1C,EAAAwb,WAAA7Y,GAAA,IACA3C,EAAAuN,cAAA,cAAkDuP,YAAAvZ,EAAAqN,KAAA5Q,EAAAkc,gBAClDlc,EAAAK,SAAA,CAGA,GAFAL,EAAA+c,gBAAAxZ,GACAA,EAAAyZ,iBACA,IAAAzZ,EAAA8Y,QAAArZ,OACA,MAAAhD,GAAA8K,YAAAvH,EAAAvD,EAAAwb,WAEAxb,GAAAid,kBACAvZ,WAAA1D,EAAAkB,UAAAwC,WACAC,UAAA3D,EAAAkB,UAAAyC,UACA8D,EAAAuQ,YAAAC,MAAA,KAEA2D,GACAlZ,EAAA1C,EAAAwb,WAAA9Y,EACAC,EAAA3C,EAAAwb,WAAA7Y,EACAe,WAAA1D,EAAAkB,UAAAwC,WACAC,UAAA3D,EAAAkB,UAAAyC,UACA8D,EAAA,GAEAzH,EAAAkd,UAAA3Z,GACA4Z,aAAAnd,EAAAod,cACAZ,cAAAxc,EAAAyc,kBACAzc,EAAAod,aAAAjU,WAAAnJ,EAAAuc,UAAAhZ,GAAAvD,EAAAyB,WAAA4b,mBACArd,EAAAyc,iBAAAa,YAAAtd,EAAAsc,aAAA,IACAtc,EAAAud,oBAAA,EACApR,SAAAqR,KAAAlQ,iBAAA,YAAAtN,EAAAkd,WAAyEO,SAAA,IACzEtR,SAAAqR,KAAAlQ,iBAAA,WAAAtN,EAAA0d,UAAA,GACAvR,SAAAqR,KAAAlQ,iBAAA,cAAAtN,EAAA2d,aAAA,KAEA3d,EAAA4d,OAAA,SAAAnW,EAAAsL,EAAAtU,EAAAC,GACA,MAAAD,IAAAgJ,EAAA/I,IAAA,EAAA+I,GAAAsL,GAEA/S,EAAA6d,kBAAA,WACA,IAAA7d,EAAA2E,SAAA3E,EAAAkB,UAAA4c,SAA2D,MAAAC,uBAAA/d,EAAA6d,kBAC3D,IAAAnb,GACAC,EAGA8E,EAFAtI,EAAA6Y,YAAAC,MAAA,IACAvZ,EAAAsB,EAAAyB,WAAAuc,gCAAA,GAIA,IAFApC,EAAAnU,EAAAmU,EAAAnU,GAAAtI,EAAAT,GACA+I,EAAAtI,EAAAyc,EAAAnU,EAAA,GACA,GAAAzH,EAAAud,oBAAApB,EAAA,IAIA,MAHAA,GAAA,EACAnc,EAAAud,oBAAA,OACA1B,GAAkCnY,YAAA,EAAAC,WAAA,GAGlCwY,IAAA,EACAzZ,EAAA1C,EAAA4d,OAAAnW,EAAAmU,EAAAlY,YAAAmY,EAAAnY,WAAAhF,GACAiE,EAAA3C,EAAA4d,OAAAnW,EAAAmU,EAAAjY,WAAAkY,EAAAlY,UAAAjF,GACAsB,EAAAkB,UAAA4c,SAAApb,EAAAC,GACAob,sBAAA/d,EAAA6d,oBAEA7d,EAAA0d,SAAA,SAAAna,GACA,IAAAvD,EAAAuN,cAAA,YAAgDuP,YAAAvZ,IAAhD,CACA,GAAA0a,GAAAvB,KAAAC,IAAAf,EAAAlZ,GAAAga,KAAAC,IAAAf,EAAAjZ,GAAA3C,EAAAyB,WAAAmb,cACA/X,GACAnC,EAAA1C,EAAAwb,WAAA9Y,EAAAkZ,EAAAlZ,EACAC,EAAA3C,EAAAwb,WAAA7Y,EAAAiZ,EAAAjZ,GAEAiO,EAAA5Q,EAAAoO,UAAAvJ,EAAAnC,EAAAmC,EAAAlC,EACA3C,GAAAK,WACA4b,EACAjc,EAAAyK,QAAAlH,EAAAvD,EAAAwb,YACayC,IACbrN,EAAAsE,OACAlV,EAAAyN,YAAAmD,EAAArQ,YAAAqQ,EAAApQ,WAEAR,EAAA0K,UAAAnH,EAAAvD,EAAAwb,YACAxb,EAAAyK,QAAAlH,EAAAvD,EAAAwb,YACAxb,EAAA4K,MAAArH,EAAAvD,EAAAwb,cAGAS,GAAA,EACA9P,SAAAqR,KAAAhT,oBAAA,YAAAxK,EAAAkd,WAA4EO,SAAA,IAC5EtR,SAAAqR,KAAAhT,oBAAA,WAAAxK,EAAA0d,UAAA,GACAvR,SAAAqR,KAAAhT,oBAAA,cAAAxK,EAAA2d,aAAA,GACAR,aAAAnd,EAAAod,cACAZ,cAAAxc,EAAAyc,kBACAzc,EAAAsc,eACAT,EAAAnY,WAAAqY,EAAA/b,EAAAyB,WAAAyc,yBACArC,EAAAlY,UAAAqY,EAAAhc,EAAAyB,WAAAyc,yBACAle,EAAAud,oBAAA,EACA,IAAApB,GAAA,WAAAlP,KAAAiP,EAAAxa,QAAAuc,GACAje,EAAA6d,uBAGA7d,EAAAkd,UAAA,SAAA3Z,GACA,GAAA7E,GAAAsB,EAAAoc,YAAA7Y,EACAvD,GAAAuN,cAAA,aAAiDuP,YAAAvZ,EAAAqN,KAAA5Q,EAAAiJ,gBACjDjJ,EAAA+c,gBAAAxZ,GACAA,EAAAyZ,iBACAhd,EAAAK,WACAub,GACAlZ,EAAAhE,EAAAgE,EAAA1C,EAAAwb,WAAA9Y,EACAC,EAAAjE,EAAAiE,EAAA3C,EAAAwb,WAAA7Y,EACAe,WAAA1D,EAAAkB,UAAAwC,WACAC,UAAA3D,EAAAkB,UAAAyC,UACA8D,EAAA,GAEA,mBAAAwF,KAAAiP,EAAAxa,OACA1B,EAAAkB,UAAAyC,UAAA3D,EAAAkB,UAAA+Y,cAAAvb,EAAAiE,EAAA3C,EAAAuE,QACa,qBAAA0I,KAAAiP,EAAAxa,OACb1B,EAAAkB,UAAAwC,WAAA1D,EAAAkB,UAAAqZ,aAAA7b,EAAAgE,EAAA1C,EAAAwE,OACayX,GACbjc,EAAAoJ,UAAA7F,EAAA7E,GACAsB,EAAA8H,QAEA,IAAAqU,GACAnc,EAAAkB,UAAA4c,SAAA9d,EAAAid,iBAAAvZ,WAAAkY,EAAAlZ,EACA1C,EAAAid,iBAAAtZ,UAAAiY,EAAAjZ,MAIA3C,EAAA2d,YAAA,SAAApa,GACAvD,EAAAuN,cAAA,eAAmDuP,YAAAvZ,EAAAqN,KAAA5Q,EAAAiJ,eACnDjJ,EAAAK,WACA4b,GAAA,EACA9P,SAAAqR,KAAAhT,oBAAA,YAAAxK,EAAAkd,WAA4EO,SAAA,IAC5EtR,SAAAqR,KAAAhT,oBAAA,WAAAxK,EAAA0d,UAAA,GACAvR,SAAAqR,KAAAhT,oBAAA,cAAAxK,EAAA2d,aAAA,KAGA3d,EAAA+c,gBAAA,SAAAxZ,GAA6CA,EAAAwZ,mBAC7C/c,EAAAsN,iBAAA,SAAAmI,EAAA0I,GACAne,EAAA+B,OAAA0T,GAAAzV,EAAA+B,OAAA0T,OACAzV,EAAA+B,OAAA0T,GAAAe,QAAA2H,IAEAne,EAAAwK,oBAAA,SAAAiL,EAAA0I,IACAne,EAAA+B,OAAA0T,QAAAxS,QAAA,SAAAmb,EAAAC,GACAF,IAAAC,GACApe,EAAA+B,OAAA0T,GAAA6I,OAAAD,EAAA,MAIAre,EAAAuN,cAAA,SAAAkI,EAAAlS,GAEA,QAAAyZ,KACAuB,GAAA,EAFA,GAAAA,EAIA,IAAAve,EAAA+B,OAAA0T,GAMA,MALAzV,GAAA+B,OAAA0T,GAAAxS,QAAA,SAAAkb,GACA5a,EAAA8I,IAAArM,EAAAqM,IACA9I,EAAAyZ,iBACAmB,EAAApX,MAAA/G,EAAA2B,MAAA4B,MAEAgb,GAEAve,EAAAgI,OAAA,SAAAwW,GACA,GAEAvE,GACAM,EAHAkE,EAAA,EAAAze,EAAA0B,MAAAwW,gBACAwG,EAAA,EAAA1e,EAAA0B,MAAAid,sBAGAlZ,EAAAzF,EAAAuF,sBACAiD,EAAAxI,EAAA0F,oBAuDA,OAnDA1F,GAAAgF,aACAhF,EAAAuE,OAAAvE,EAAAwD,WAAAa,aACArE,EAAAwE,MAAAxE,EAAAwD,WAAAc,cAEAtE,EAAAuE,OAAAvE,EAAA4e,cAAAva,aAAA,EAAArE,EAAA0B,MAAAkY,mBACA5Z,EAAAwE,MAAAxE,EAAA4e,cAAAta,YAAA,EAAAtE,EAAA0B,MAAAkY,mBACA5Z,EAAAwD,WAAAxD,EAAA4e,cACA5e,EAAA2E,OAAAJ,OAAAvE,EAAAuE,OAAA6G,OAAAgN,iBACApY,EAAA2E,OAAAH,MAAAxE,EAAAwE,MAAA4G,OAAAgN,iBACApY,EAAA2E,OAAAjD,MAAA6C,OAAAvE,EAAAuE,OAAA,KACAvE,EAAA2E,OAAAjD,MAAA8C,MAAAxE,EAAAwE,MAAA,KACAxE,EAAAkF,gBAAA,EACAlF,EAAAiF,iBAAA,GAEAgV,EAAAja,EAAA+C,KAAAiY,OAAA,SAAA6D,EAAA3b,GACA,MAAA2b,IACA7e,EAAAoB,MAAAjB,KAAA+C,EAAAlD,EAAAY,YAAAZ,EAAA0B,MAAAoU,aACA9V,EAAAoB,MAAAC,MAAA6B,EAAAlD,EAAAY,YAAA,GACA6d,GACa,MACblE,EAAAva,EAAAwG,mBAAAwU,OAAA,SAAA6D,EAAAzb,GACA,MAAAA,GAAAsD,OAAoCmY,EACpCA,GAAA7e,EAAAoB,MAAAhB,QAAAgD,EAAApD,EAAAY,YAAAwC,EAAAoB,OAAAxE,EAAA0B,MAAAgU,aAAA+I,GACa,MACbze,EAAAyB,WAAA6W,aACA2B,GAAAja,EAAA0B,MAAAoU,WAAA2I,GAEAze,EAAAkB,UAAAsD,MAAAxE,EAAAwE,MAAAgE,EACAxI,EAAAkB,UAAAqD,OAAAvE,EAAAuE,OAAAkB,EAAAiZ,EACA1e,EAAAkB,UAAA2C,IAAA4B,EAAAiZ,EACA1e,EAAAkB,UAAA0C,KAAA4E,EACAxI,EAAAkB,UAAA+Y,eAAAja,EAAA0B,MAAA+G,eAAAzI,EAAAkB,UAAAqD,OACAvE,EAAAkB,UAAAqZ,cAAAva,EAAA0B,MAAA+G,eAAAzI,EAAAkB,UAAAsD,MACAxE,EAAAkB,UAAA4d,eAAA9e,EAAAkB,UAAAsD,MAlCA,KAmCAxE,EAAAkB,UAAAqZ,YAAAva,EAAAkB,UAAAsD,MAnCA,IAoCAxE,EAAAkB,UAAAoZ,eAAAta,EAAAkB,UAAAsD,MACAxE,EAAAkB,UAAA4d,cACA9e,EAAA0B,MAAA+G,eACAzI,EAAAkB,UAAA6d,gBAAA/e,EAAAkB,UAAAqD,OAxCA,KAyCAvE,EAAAkB,UAAA+Y,cAAAja,EAAAkB,UAAAqD,OAzCA,KA0CAvE,EAAAkB,UAAA8Y,gBAAAha,EAAAkB,UAAAqD,OACAvE,EAAAkB,UAAA6d,eACA/e,EAAA0B,MAAA+G,eACAzI,EAAAkB,UAAAoZ,eAAAoC,KAAAsC,IAAAhf,EAAAkB,UAAAoZ,eAAAta,EAAA0B,MAAAud,qBACAjf,EAAAkB,UAAA8Y,gBAAA0C,KAAAsC,IAAAhf,EAAAkB,UAAA8Y,gBAAAha,EAAA0B,MAAAud,qBACAjf,EAAAkf,KAAAlf,EAAAmB,YAAA6B,OAAA,EAAAhD,EAAAyB,WAAA0d,kBACAnf,EAAAof,kBACAZ,GACAxe,EAAA8H,MAAA,GAEA9H,EAAAuN,cAAA,cACA,GAEAvN,EAAAof,gBAAA,WACA,GAAApf,EAAAqf,MAAA,CACA,GAAAxa,GAAA7E,EAAA2E,OAAAC,wBACAlF,EAAAM,EAAAsD,aAAAtD,EAAA2E,QACA2a,EAAA,EAAAtf,EAAA0B,MAAAwW,gBACAtH,EAAA5Q,EAAAuf,sBAAAvf,EAAAqf,MAAAG,SAAAjf,YAAAP,EAAAqf,MAAAG,SAAAhf,YAC4BkC,GAAA,IAAAC,GAAA,IAAA4B,OAAA,EAAAC,MAAA,EAC5BxE,GAAAqf,MAAA3d,MAAAkC,KAAAiB,EAAAjB,KAAAgN,EAAAlO,EAAA1C,EAAA0B,MAAAwW,gBAAAlY,EAAAiF,iBAAAvF,EAAAkE,KAAA,KACA5D,EAAAqf,MAAA3d,MAAAmC,IAAAgB,EAAAhB,IAAA+M,EAAAjO,EAAA2c,EAAAtf,EAAAkF,gBAAAxF,EAAAmE,IAAA,KACA7D,EAAAqf,MAAA3d,MAAA6C,OAAAqM,EAAArM,OAAA+a,EAAA,OACAtf,EAAAqf,MAAA3d,MAAA8C,MAAAoM,EAAApM,MAAA8a,EAAAtf,EAAA0B,MAAA+d,gBAAA,KACAzf,EAAA0I,YAAA1I,EAAAqf,SAGArf,EAAA0f,OAAA,SAAAnc,GACA,GAAA7D,GAAAM,EAAAwG,mBACAiY,EAAA,EAAAze,EAAA0B,MAAAwW,eAKA,KAJAlY,EAAAkC,eAAA,EACAlC,EAAAmC,eAAA,EACAnC,EAAAoC,gBAAA,EACApC,EAAAqC,gBAAA,EACArC,EAAAmC,eAAAnC,EAAAkB,UAAAyC,WAAA3D,EAAAkC,eAAAlC,EAAA+C,KAAAC,QACAhD,EAAAmC,iBACAnC,EAAAoB,MAAAjB,KAAAH,EAAA+C,KAAA/C,EAAAkC,gBAAAlC,EAAAY,YAAAZ,EAAA0B,MAAAoU,aACA9V,EAAAoB,MAAAC,MAAArB,EAAA+C,KAAA/C,EAAAkC,gBAAAlC,EAAAY,YAAA,GACA6d,EACAze,EAAAkC,gBAAA,CAEA,MAAAlC,EAAAqC,gBAAArC,EAAAkB,UAAAwC,YAAA1D,EAAAoC,gBAAA1C,EAAAsD,QACAhD,EAAAqC,iBACArC,EAAAoB,MAAAhB,QAAAV,EAAAM,EAAAoC,iBAAApC,EAAAY,YAAAlB,EAAAM,EAAAoC,iBAAAoC,MACAxE,EAAAoC,iBAAA,CAEApC,GAAA+C,KAAAC,OAAA,IACAhD,EAAAoC,gBAAAsa,KAAAsC,IAAAhf,EAAAoC,gBAAA,KACApC,EAAAqC,gBAAAqa,KAAAsC,IAAAhf,EAAAqC,iBACArC,EAAAoB,MAAAhB,QAAAV,EAAAM,EAAAoC,iBAAApC,EAAAY,YAAAlB,EAAAM,EAAAoC,iBAAAoC,OAAA,GACAxE,EAAAkC,eAAAwa,KAAAsC,IAAAhf,EAAAkC,eAAA,KACAlC,EAAAmC,eAAAua,KAAAsC,IAAAhf,EAAAmC,gBACAnC,EAAAoB,MAAAjB,KAAAH,EAAA+C,KAAA/C,EAAAkC,gBAAAlC,EAAAY,YAAAZ,EAAA0B,MAAAoU,aACA9V,EAAAoB,MAAAC,MAAArB,EAAA+C,KAAA/C,EAAAkC,gBAAAlC,EAAAY,YAAA,OAEAZ,EAAAiB,iBACAjB,EAAA8H,MAAA,GAGAiW,sBAAA/d,EAAAof,iBACApf,EAAAuN,cAAA,UAA0C1J,IAAA7D,EAAAkB,UAAAyC,UAAAC,KAAA5D,EAAAkB,UAAAwC,cAE1C1D,EAAAoJ,UAAA,SAAA7F,EAAAoc,GACA,IAAA3f,EAAA4f,cAAA5f,EAAAqf,MAAA,CAGArf,EAAAyC,MAAAkd,GAAA3f,EAAAyE,YAAAlB,EACA,IACAlF,GAEAwhB,EACAC,EAIAC,EARAlX,EAAAtF,EAAAyc,YAAAzc,EAAA0c,SAAAjgB,EAAAyB,WAAAye,wBAEAxgB,EAAAM,EAAA8C,YAGAJ,EAAA1C,EAAAyC,MAAAC,EACAC,EAAA3C,EAAAyC,MAAAE,EACA9D,EAAAmB,EAAAoO,UAAA1L,EAAAC,GAEA8S,GAAsBqH,YAAAvZ,EAAAqN,KAAA/R,EAAA6D,IAAAC,KACtBwd,EAAAngB,EAAAiJ,WAKA,IAJAkU,aAAAnd,EAAAkJ,aACAlJ,EAAAogB,UAAgC1d,IAAAC,QAChC3C,EAAAK,UAAA,IAEAL,EAAAuN,cAAA,YAAAkI,KAGA5W,GAAAmB,EAAAiJ,cAAAjJ,EAAAiJ,YAAAzI,WAAA3B,EAAA2B,UACAR,EAAAiJ,YAAA1I,cAAA1B,EAAA0B,eACAP,EAAAqgB,qBAAA,EACA5K,EAAA7E,KAAAuP,EACAngB,EAAAuN,cAAA,eAAAkI,GACAA,EAAA7E,KAAA/R,EACAmB,EAAAuN,cAAA,gBAAAkI,IAEAzV,EAAAiJ,YAAApK,EACAmB,EAAAK,UAAA,CAIA,GADAL,EAAAwB,WACAxB,EAAAsgB,cACAzhB,IACA,IAAAmB,EAAAwC,YAAAkF,QAAA7I,EAAAiQ,WACA9O,EAAAugB,SAAA1hB,EACAmB,EAAAsZ,SAAAza,EAAA8c,YACA3b,EAAA2E,OAAAjD,MAAA8e,OAAA3hB,EAAAiQ,QACA,SAAAjQ,EAAAiQ,SAAAjQ,EAAAkE,OACA/C,EAAA2E,OAAAjD,MAAA8e,OAAA,UACAxgB,EAAAwB,OAAA3C,EAAAkE,KAAA/C,EAAAY,YAAA/B,EAAA0B,eAEAP,EAAAygB,WAAAzgB,EAAAgZ,gBACA,SAAAna,EAAAiQ,SACAjQ,EAAAkE,MAAA,CA4CA,GA3CA+c,EAAA9f,EAAA0gB,qBACAX,GACArd,EAAAga,KAAAC,IAAA3c,EAAA2gB,UAAAje,KACAC,EAAA+Z,KAAAC,IAAA3c,EAAA2gB,UAAAhe,OAEA,IAAA3C,EAAA4gB,gBAAArgB,aAAAgD,EAAAsd,WACA7gB,EAAA4gB,iBACApgB,SAAAR,EAAAM,WAAAE,SACAD,YAAAP,EAAAM,WAAAC,cAGAsf,GACAhc,IAAA6Y,KAAAoE,IAAA9gB,EAAA4gB,gBAAApgB,SAAA3B,EAAA2B,UACAoD,KAAA8Y,KAAAoE,IAAA9gB,EAAA4gB,gBAAArgB,YAAA1B,EAAA0B,aACAwgB,OAAArE,KAAAsC,IAAAhf,EAAA4gB,gBAAApgB,SAAA3B,EAAA2B,UACAwgB,MAAAtE,KAAAsC,IAAAhf,EAAA4gB,gBAAArgB,YAAA1B,EAAA0B,eAEA,IAAAP,EAAA4gB,gBAAArgB,cACAsf,EAAAjc,MAAA,EACAic,EAAAmB,MAAAthB,EAAAsD,OAAA,EACA6c,EAAAhc,IAAA6Y,KAAAoE,IAAAhB,EAAAjc,IAAAhF,EAAA2B,UACAqf,EAAAkB,OAAArE,KAAAsC,IAAAc,EAAAiB,OAAAliB,EAAA2B,WAEAR,EAAA4gB,gBAAApgB,WAAA3B,EAAA2B,UACAR,EAAA4gB,gBAAArgB,cAAA1B,EAAA0B,cACAP,EAAAihB,iBAAA,IAEAjhB,EAAAqgB,qBAAA,IAAAN,EAAArd,GAAA,IAAAqd,EAAApd,GAAA3C,EAAAyB,WAAAmX,oBACA5Y,EAAAyB,WAAAmX,mBAAA,IAAA5Y,EAAA4gB,gBAAArgB,YACAP,EAAAyO,UAAA5P,EAAA2B,SAAAqI,GAAA,IAEA7I,EAAAkhB,oBAAAriB,EAAA2B,SACAR,EAAAuB,WAAA1C,EAAA2B,YAAA,IAAAR,EAAAuB,WAAA1C,EAAA2B,UAAAkH,QAAA7I,EAAA0B,cACAP,EAAAuB,WAAA1C,EAAA2B,UAAA8d,OAAAte,EAAAuB,WAAA1C,EAAA2B,UAAAkH,QAAA7I,EAAA0B,aAAA,IAGAP,EAAAuB,WAAA1C,EAAA2B,UAAAR,EAAAuB,WAAA1C,EAAA2B,eACA,IAAAR,EAAAuB,WAAA1C,EAAA2B,UAAAkH,QAAA7I,EAAA0B,cACAP,EAAAuB,WAAA1C,EAAA2B,UAAAiL,KAAA5M,EAAA0B,iBAKAP,EAAAmhB,iBAAAtB,EAAAhc,MAAA7D,EAAAmhB,gBAAAtd,KACAgc,EAAAjc,OAAA5D,EAAAmhB,gBAAAvd,MACAic,EAAAkB,SAAA/gB,EAAAmhB,gBAAAJ,QACAlB,EAAAmB,QAAAhhB,EAAAmhB,gBAAAH,OAAAnY,GAGA,GAFA7I,EAAAuB,cACAue,EAAAD,EACA7f,EAAAyB,WAAAmX,iBACA,IAAAva,EAAAyhB,EAAAjc,IAAiDxF,GAAAyhB,EAAAiB,OAAqB1iB,GAAA,EACtE2B,EAAAyO,UAAApQ,GAAA,UAGA2B,GAAAsO,WAAAwR,GAAA,EAGA9f,GAAA4I,eAAArF,EAAAb,EAAAC,EAAAkG,GAGA7I,EAAAqgB,qBAAA,EACArgB,EAAA8H,MAAA,MASA9H,EAAA0N,QAAA,SAAA0T,GAGA,QAAAC,KACAD,GAAA,EAHA,GAAAxQ,GAAA5Q,EAAAqf,MAAAG,SACA7c,EAAAiO,EAAApQ,QAIA,IAAAR,EAAAuN,cAAA,iBACAqD,OACA0Q,SAAAthB,EAAAqf,MAAA3P,MACA6R,SAAA3Q,EAAAlB,MACA0R,MAAAC,EACAhC,MAAArf,EAAAqf,QACqB,QACrB,IAAArf,EAAAqf,MAAA3P,QAAAkB,EAAAlB,QAAA0R,EAAA,CAIA,GAHAphB,EAAAiC,QAAAU,GAAA3C,EAAAiC,QAAAU,OACA3C,EAAAiC,QAAAU,GAAAiO,EAAA/J,OAAAlI,MAAAqB,EAAAqf,MAAA3P,MACAkB,EAAA7N,KAAA6N,EAAA/J,OAAAlI,MAAAqB,EAAAqf,MAAA3P,MACA/M,IAAA3C,EAAA+C,KAAAC,OAAA,CACA,GAAAhD,EAAAuN,cAAA,UACAmC,MAAA1P,EAAAqf,MAAA3P,MACA5I,aAAA8J,EAAAlB,MACA8R,QAAAJ,EACAxQ,OACAyO,MAAArf,EAAAqf,QAC6B,QAC7Brf,GAAAgC,KAAA,EACAhC,EAAAiP,OAAA2B,EAAA7N,MACA/C,EAAA2G,mBAEA3G,EAAA8H,MAAA,GAWA,MATAqE,UAAAqR,KAAAlT,YAAAtK,EAAAqf,OACArf,EAAAgL,aAAAyW,QACAzhB,EAAAuN,cAAA,WACAqD,OACAlB,MAAA1P,EAAAqf,MAAA3P,MACA8R,QAAAJ,EACA/B,MAAArf,EAAAqf,QAEArf,EAAAqf,UAAAxf,IACA,GAUAG,EAAAyN,YAAA,SAAA/K,EAAAC,GAOA,QAAA+e,KACA9Q,EAAA5Q,EAAAuf,sBAAA7c,EAAAC,GACA3C,EAAAqf,MAAAlT,SAAAC,cAAApM,EAAAyB,WAAAkgB,UAAA,oBACAxV,SAAAqR,KAAAoE,YAAA5hB,EAAAqf,OACArf,EAAA6hB,kBAAA7hB,EAAAqf,MAAA,8BACArf,EAAAqf,MAAA3d,MAAAoC,SAAA,WACA9D,EAAAqf,MAAAG,SAAA5O,EACA5Q,EAAAof,kBACApf,EAAAqf,MAAA3d,MAAAogB,OAAA,IACA9hB,EAAAqf,MAAA3P,MAAAkB,EAAAlB,MACA1P,EAAAqf,MAAAoC,QACAzhB,EAAAqf,MAAA/R,iBAAA,QAAAtN,EAAA+c,iBACA/c,EAAAqf,MAAA/R,iBAAA,WAAAtN,EAAA+c,iBACA/c,EAAAqf,MAAA/R,iBAAA,UAAAtN,EAAA+c,iBACA/c,EAAAqf,MAAA/R,iBAAA,YAAAtN,EAAA+c,iBACA/c,EAAAqf,MAAA/R,iBAAA,mBAAA/J,GACA,GAAAwe,GAAAnR,EAAArQ,YACAyhB,EAAApR,EAAApQ,QAEA,SAAA+C,EAAA0e,QACAjiB,EAAA0N,SAAA,GACA1N,EAAA8H,MAAA,OAEqB,SAAAvE,EAAA0e,WACrBjiB,EAAAyB,WAAAkgB,WACA3hB,EAAAyB,WAAAkgB,WAAApe,EAAAsd,UACA7gB,EAAA0N,UACA1N,EAAA8H,MAAA,OACqB,QAAAvE,EAAA0e,QAAA,CAErB,GADA1e,EAAAyZ,kBACAhd,EAAA0N,UACA,MAEAnK,GAAAsd,SACAkB,GAAA,EAEAA,GAAA,EAEAA,EAAA,IACAA,EAAAriB,EAAAsD,OAAA,EACAgf,GAAA,GAEAD,EAAAriB,EAAAsD,OAAA,IACA+e,EAAA,EACAC,GAAA,GAEAA,EAAA,IACAA,EAAAhiB,EAAA+C,KAAAC,OAAA,GAEAgf,EAAAhiB,EAAA+C,KAAAC,OAAA,IACAgf,EAAA,GAEAhiB,EAAAyN,YAAAsU,EAAAC,MA1DA,GAAAhiB,EAAAyB,WAAAygB,SAAA,CACA,GAAAtR,GAAA5Q,EAAAuf,sBAAA7c,EAAAC,GACAjD,EAAAM,EAAAwG,kBACA,IAAAxG,EAAAuN,cAAA,mBAAuDqD,SAAe,QACtE5Q,GAAA4N,eAAAlL,EAAAC,GACA3C,EAAA2N,cAAAjL,EAAAC,GAyDAob,sBAAA2D,GACA1hB,EAAAuN,cAAA,aAA6CqD,OAAAyO,MAAArf,EAAAqf,UAE7Crf,EAAA4K,MAAA,SAAArH,EAAAoc,GASA,QAAAwC,KACAC,GACApiB,EAAAuN,cAAA,oBACA8U,aAAAriB,EAAA4C,kBACArB,WAAAvB,EAAAuB,WACA4f,gBAAAnhB,EAAAmhB,kBAbA,GAAA9iB,GACA+jB,EACAvZ,EAAAtF,EAAAyc,YAAAzc,EAAA0c,SAAAjgB,EAAAyB,WAAAye,wBACArb,EAAA8a,GAAA3f,EAAAyE,YAAAlB,EAEA,IADAvD,EAAAiJ,YAAAjJ,EAAAoO,UAAAvJ,EAAAnC,EAAAmC,EAAAlC,OACA9C,KAAAG,EAAAiJ,YAAAnJ,KAAA,CAcA,GAHAE,EAAAqf,OACArf,EAAA0N,UAEA1N,EAAAihB,gBAEA,YADAjhB,EAAAihB,iBAAA,EAIA,IADA5iB,EAAA2B,EAAAiJ,aACAjJ,EAAAuN,cAAA,SAA6CuP,YAAAvZ,EAAAqN,KAAA5Q,EAAAiJ,eAC7CjJ,EAAAK,SAAA,CAGA,YAAAL,EAAAiJ,YAAA6F,QAAA,CACA,kBAAA9O,EAAAiJ,YAAAvH,MAIA,MAHA1B,GAAA2L,MAAA3L,EAAAY,SAAA,OACAZ,EAAAwO,gBACA2T,IAGA,mBAAAniB,EAAAiJ,YAAAvH,MAQA,MAPA1B,GAAAa,UAAAxC,EAAAwI,OAAAlI,KACAqB,EAAAc,eAAA,QAAAd,EAAAc,eAAA,aAEAd,EAAAc,eAAA,MAEAd,EAAA2L,MAAAtN,EAAAwI,OAAAlI,KAAAqB,EAAAc,oBACAqhB,IAOA,KAJA,mCAAAza,QAAA1H,EAAAiJ,YAAAvH,QAAAmH,GACA7I,EAAA2N,cAAAtP,EAAAkC,YAAAlC,EAAAmC,UAEAR,EAAAuB,WAAAlD,EAAAmC,UAAAR,EAAAuB,WAAAlD,EAAAmC,cACAR,EAAAyB,WAAAmX,kBAAA,kBAAA5Y,EAAAiJ,YAAAvH,MAAA,CACA,qBAAA1B,EAAAiJ,YAAAvH,OACA1B,EAAAyB,WAAAqV,MAAAjS,EAAAnC,EAAA,GACAmC,EAAAnC,EAAA1C,EAAAiJ,YAAAvG,EAAA1C,EAAA0B,MAAA+Q,eACAzS,EAAA0B,MAAA6Q,oBACAvS,EAAA0B,MAAAiR,qBAAA3S,EAAA0B,MAAA4gB,sBACAzd,EAAAlC,EAAA3C,EAAAiJ,YAAAtG,EAAA3C,EAAA0B,MAAAgR,gBACA1S,EAAA0B,MAAA8Q,mBAAAxS,EAAA0B,MAAA4gB,sBACAzd,EAAAlC,EAAA,EAEA,WADA3C,GAAA2O,WAAAtQ,EAAAmC,SAGA4hB,IAAA,EACApiB,EAAAyO,UAAApQ,EAAAmC,SAAAqI,GAAA,GAEAtF,EAAAsd,WAAAhY,IACA7I,EAAAmhB,gBAAAnhB,EAAA0gB,qBACA1gB,EAAAsO,eAAAzO,IAAA,IAGAsiB,IACAniB,EAAA8H,MAAA,MAEA9H,EAAAuiB,iBAAA,SAAAhf,GACA,GAAAsB,GAAAnC,EAAAC,CAUA,OATAkC,GAAA7E,EAAAyE,YAAAlB,GACAb,EAAA1C,EAAAwiB,sBAAA3d,EAAAnC,EAAA1C,EAAA2gB,UAAAje,EACAC,EAAA3C,EAAAyiB,uBAAA5d,EAAAlC,EAAA3C,EAAA2gB,UAAAhe,EACAD,EAAA1C,EAAA0B,MAAAghB,iBACAhgB,EAAA1C,EAAA0B,MAAAghB,gBAEA/f,EAAA3C,EAAA0B,MAAAihB,eACAhgB,EAAA3C,EAAA0B,MAAAihB,eAEA3iB,EAAAuN,cAAA,gBAAoD7K,IAAAC,IAAA2d,aAAAtgB,EAAAsgB,iBACpDtgB,EAAAkB,UAAAwC,WAAA1D,EAAAkB,UAAAqZ,YAAAva,EAAAyB,WAAAmhB,kBACA,cAAA5iB,EAAAsZ,WACAtZ,EAAAgI,QAAA,GACAhI,EAAAkB,UAAAwC,YAAAhB,GAEA,cAAA1C,EAAAsZ,UACAtZ,EAAAoB,MAAAhB,QAAA,kBAAAJ,EAAAsgB,aAAAzZ,OAAAnF,MACA,aAAA1B,EAAAsgB,aAAAzZ,OAAA7G,EAAAY,WAAA8B,GACA,mCAAAgF,QAAA1H,EAAAsgB,aAAAzZ,OAAAnF,QACA1B,EAAAgI,QAAA,OAEAhI,GAAA+H,oBAGA,cAAA/H,EAAAsZ,UACAtZ,EAAAsgB,aAAAvK,QACA/V,EAAAoB,MAAAC,MAAArB,EAAAsgB,aAAAvd,KAAA/C,EAAAY,WAAA+B,EACiB3C,EAAAyB,WAAAohB,gBACjB7iB,EAAA0B,MAAAoU,WAAAnT,EAEA3C,EAAAoB,MAAAjB,KAAAH,EAAAsgB,aAAAvd,KAAA/C,EAAAY,WAAA+B,EAEA3C,EAAAuN,cAAA,aAAiDrK,IAAAP,QACjD3C,GAAA+H,yBAGA/H,EAAAiB,oBAEAjB,EAAA8iB,eAAA,WACA9iB,EAAAgI,SACAmE,SAAAqR,KAAAhT,oBAAA,YAAAxK,EAAAuiB,kBAAA,GACApW,SAAAqR,KAAAhT,oBAAA,UAAAxK,EAAA8iB,gBAAA,GACA9iB,EAAA8F,iBACA9F,EAAA8H,MAAA,GACA9H,EAAAihB,iBAAA,GAEAjhB,EAAA+iB,WAAA,SAAAxf,GACA,GAAAsB,GAAA7E,EAAAyE,YAAAlB,EAEA,OADAvD,GAAAgjB,WAAAhjB,EAAAoO,UAAAvJ,EAAAnC,EAAAmC,EAAAlC,GAAAmM,QACA,0BAAA9O,EAAAgjB,YAAA,0BAAAhjB,EAAAijB,iBACAjjB,EAAAijB,gBAAA,wBACAjjB,EAAA2gB,UAAA9b,EACA7E,EAAAkjB,YAAAtf,KAAA5D,EAAAkB,UAAAwC,eACAyZ,cAAAnd,EAAAkJ,cAGA,wBAAAlJ,EAAAgjB,YAAA,wBAAAhjB,EAAAijB,iBACAjjB,EAAAijB,gBAAA,sBACAjjB,EAAA2gB,UAAA9b,EACA7E,EAAAkjB,YAAArf,IAAA7D,EAAAkB,UAAAyC,cACAwZ,cAAAnd,EAAAkJ,eAGA,wBAAAlJ,EAAAijB,iBACA,wBAAAjjB,EAAAgjB,aACAhjB,EAAAgjB,WAAA,uBAEA,0BAAAhjB,EAAAijB,iBACA,0BAAAjjB,EAAAgjB,aACAhjB,EAAAgjB,WAAA,yBAEA7F,aAAAnd,EAAAkJ,mBACA,IAAAlJ,EAAAwC,YAAAkF,QAAA1H,EAAAgjB,cAGA,wBAAAhjB,EAAAgjB,WACAhjB,EAAAkB,UAAAyC,UAAA3D,EAAAkjB,YAAArf,KAAAgB,EAAAlC,EAAA3C,EAAA2gB,UAAAhe,GACA3C,EAAAkB,UAAA6d,eACa,wBAAA/e,EAAAgjB,YACbhjB,EAAAkB,UAAAyC,WAAA3D,EAAAkf,KAAAlf,EAAA0B,MAAAoU,WACA9V,EAAAkJ,YAAAC,WAAAnJ,EAAA+iB,WAAA/iB,EAAAyB,WAAA4H,iBAAA9F,IACa,2BAAAvD,EAAAgjB,aACbhjB,EAAAkB,UAAAyC,WAAA3D,EAAAkf,KAAAlf,EAAA0B,MAAAoU,WACA9V,EAAAkJ,YAAAC,WAAAnJ,EAAA+iB,WAAA/iB,EAAAyB,WAAA4H,iBAAA9F,IAEA,0BAAAvD,EAAAgjB,WACAhjB,EAAAkB,UAAAwC,WAAA1D,EAAAkjB,YAAAtf,MAAAiB,EAAAnC,EAAA1C,EAAA2gB,UAAAje,GACA1C,EAAAkB,UAAA4d,cACa,4BAAA9e,EAAAgjB,YACbhjB,EAAAkB,UAAAwC,YAAA1D,EAAAyB,WAAAuH,yBACAhJ,EAAAkJ,YAAAC,WAAAnJ,EAAA+iB,WAAA/iB,EAAAyB,WAAA4H,iBAAA9F,IACa,2BAAAvD,EAAAgjB,aACbhjB,EAAAkB,UAAAwC,YAAA1D,EAAAyB,WAAAuH,yBACAhJ,EAAAkJ,YAAAC,WAAAnJ,EAAA+iB,WAAA/iB,EAAAyB,WAAA4H,iBAAA9F,QAGAvD,EAAAmjB,eAAA,WACAhG,aAAAnd,EAAAkJ,aACAiD,SAAAqR,KAAAhT,oBAAA,YAAAxK,EAAA+iB,YAAA,IAEA/iB,EAAAojB,YAAA,SAAA7f,GACA,GAAAsB,GAAAnC,EAAAC,CACAkC,GAAA7E,EAAAyE,YAAAlB,GACAb,EAAAmC,EAAAnC,EAAA1C,EAAA2gB,UAAAje,EACAC,EAAAkC,EAAAlC,EAAA3C,EAAA2gB,UAAAhe,GACA3C,EAAAyB,WAAA4hB,uBAAA,mBAAArjB,EAAAsZ,YAGAtZ,EAAAyB,WAAA6hB,oBAAA,gBAAAtjB,EAAAsZ,YAGAtZ,EAAAuN,cAAA,cACAuP,YAAAvZ,EACAggB,OAAAvjB,EAAA4gB,gBACA4C,OAAAxjB,EAAAiJ,YACAqQ,SAAAtZ,EAAAsZ,aAIAoD,KAAAC,IAAAja,GAAA1C,EAAAyB,WAAAgiB,iBAAA/G,KAAAC,IAAAha,GAAA3C,EAAAyB,WAAAgiB,mBACAzjB,EAAAgZ,cAAAhZ,EAAA4gB,gBACA5gB,EAAA0jB,cAAA1jB,EAAAiJ,YACAjJ,EAAAgZ,cAAAC,YACAvW,IACAC,KAEA3C,EAAA4I,eAAArF,EAAAsB,EAAAnC,EAAAmC,EAAAnC,GAAA,MAGA1C,EAAA2jB,gBAAA,SAAApgB,GACA,GAAAqgB,IACAC,cAAA7jB,EAAAE,OAAAC,KACA2jB,iBAAA9jB,EAAAE,OAAAE,SAEA/B,GACAwlB,cAAA,WACAC,iBAAA,eACiB9jB,EAAAsZ,SACjBnN,UAAAqR,KAAAhT,oBAAA,YAAAxK,EAAAojB,aAAA,GACAjX,SAAAqR,KAAAhT,oBAAA,UAAAxK,EAAA2jB,iBAAA,GACA3jB,EAAAgZ,eACAhZ,EAAA0jB,gBACA1jB,EAAAihB,iBAAA,EACAjhB,EAAAgZ,cAAA3a,KAAA2B,EAAA0jB,cAAArlB,IACA2B,EAAAuN,cAAA,WACAuP,YAAAvZ,EACAggB,OAAAvjB,EAAAgZ,cACAwK,OAAAxjB,EAAA0jB,cACApK,SAAAtZ,EAAAsZ,aAEAsK,EAAA5jB,EAAAsZ,UAAAgF,OAAAsF,EAAA5jB,EAAAsZ,UAAA5R,QAAA1H,EAAAgZ,cAAA3a,IAAA,GACAulB,EAAA5jB,EAAAsZ,UAAAgF,OAAAsF,EAAA5jB,EAAAsZ,UAAA5R,QAAA1H,EAAA0jB,cAAArlB,IAAA,EAAA2B,EAAAgZ,cAAA3a,IACA2B,EAAA8F,mBAGA9F,EAAAgZ,kBAAAnZ,GACAG,EAAA0jB,kBAAA7jB,GACAG,EAAA8H,MAAA,IAEA9H,EAAA0K,UAAA,SAAAnH,EAAAoc,GAEA,GADA3f,EAAA+jB,oBAAAxgB,EAAAigB,QACAxjB,EAAAuN,cAAA,aAAiDuP,YAAAvZ,EAAAqN,KAAA5Q,EAAAiJ,eACjDjJ,EAAAK,UAGA,IAAAkD,EAAAygB,SAAAhkB,EAAAqf,MAAA,CACA,GAAAxW,GAAAtF,EAAAyc,YAAAzc,EAAA0c,OAYA,IAXAjgB,EAAA2gB,UAAAhB,GAAA3f,EAAAyE,YAAAlB,GACAvD,EAAAkjB,aACAtf,KAAA5D,EAAAkB,UAAAwC,WACAG,IAAA7D,EAAAkB,UAAAyC,WAEA3D,EAAA4gB,gBAAA5gB,EAAAoO,UAAApO,EAAA2gB,UAAAje,EAAA1C,EAAA2gB,UAAAhe,GACA3C,EAAAkhB,oBAAAlhB,EAAA4gB,gBAAA5L,SACAnM,GAAAtF,EAAAsd,UAAA,yCACA5T,KAAAjN,EAAA4gB,gBAAA9R,WACA9O,EAAAuB,gBAEAvB,EAAA4gB,gBAAAzL,OAAA,CAGA,QAAAnV,EAAAwC,YAAAkF,QAAA1H,EAAA4gB,gBAAA9R,SAOA,MANA9O,GAAAgjB,WAAAhjB,EAAA4gB,gBAAA9R,QACA9O,EAAAijB,gBAAAjjB,EAAA4gB,gBAAA9R,QACA9O,EAAA+iB,WAAAxf,GACA4I,SAAAqR,KAAAlQ,iBAAA,YAAAtN,EAAA+iB,YAAA,GACA5W,SAAAqR,KAAAlQ,iBAAA,UAAAtN,EAAAmjB,gBAAA,QACAnjB,EAAAihB,iBAAA,EAGA,aAAAjhB,EAAAsZ,SAKA,MAJAtZ,GAAAygB,WAAA,EACAzgB,EAAAyB,WAAAmX,kBACA5Y,EAAAyO,UAAAzO,EAAA4gB,gBAAApgB,SAAAqI,GAAA,GAEA7I,EAAAoJ,UAAA7F,IAEA,8BAAAmE,QAAA1H,EAAAsZ,YACAtZ,EAAAsgB,aAAAtgB,EAAAugB,SACAvgB,EAAAsgB,aAAAvK,QACA/V,EAAAyiB,uBAAAziB,EAAAoB,MAAAC,MAAArB,EAAAsgB,aAAAvd,KAAA/C,EAAAY,WAEAZ,EAAAyiB,uBAAAziB,EAAAoB,MAAAjB,KAAAH,EAAAsgB,aAAAvd,KAAA/C,EAAAY,YAAAZ,EAAA0B,MAAAoU,WAEA9V,EAAAwiB,sBAAAxiB,EAAAoB,MAAAhB,QAAA,kBAAAJ,EAAAsgB,aAAAzZ,OAAAnF,MACA,aAAA1B,EAAAsgB,aAAAzZ,OAAA7G,EAAAY,YAAAZ,EAAAsgB,aAAAzZ,OAAArC,MACA2H,SAAAqR,KAAAlQ,iBAAA,YAAAtN,EAAAuiB,kBAAA,GACApW,SAAAqR,KAAAlQ,iBAAA,UAAAtN,EAAA8iB,gBAAA,KAEA,qCAAApb,QAAA1H,EAAAsZ,YACAtZ,EAAAsgB,aAAAtgB,EAAAugB,SACApU,SAAAqR,KAAAlQ,iBAAA,YAAAtN,EAAAojB,aAAA,GACAjX,SAAAqR,KAAAlQ,iBAAA,UAAAtN,EAAA2jB,iBAAA,OAGA3jB,EAAAyK,QAAA,SAAAlH,GACA4Z,aAAAnd,EAAAkJ,aACAlJ,EAAAqgB,qBAAA,EACArgB,EAAAygB,cAAA5gB,GACAG,EAAAsgB,iBAAAzgB,GACAG,EAAA4gB,oBAAA/gB,GACAG,EAAAuN,cAAA,WAA+CuP,YAAAvZ,EAAAqN,KAAA5Q,EAAAiJ,gBAC/CjJ,EAAAK,UAAAkD,EAAAigB,SAAAxjB,EAAA2E,UAGA3E,EAAAiJ,iBAAApJ,KAAAG,EAAAiJ,YAAAnJ,MAGAE,EAAA4f,aAAA5f,EAAAqf,QACArf,EAAA2gB,WAAA3gB,EAAAogB,SAAApgB,EAAA2gB,YACA3gB,EAAAgL,aAAAyW,QAEAle,EAAAyZ,oBAEAhd,EAAAmL,QAAA,SAAA5H,GACA,GAAAlF,GACAqE,EAAA1C,EAAAM,WAAAC,YACAoC,EAAA3C,EAAAM,WAAAE,SACAqI,EAAAtF,EAAAyc,YAAAzc,EAAA0c,QACAgE,EAAAjkB,EAAA+C,KAAAC,OAAA,EACAkhB,EAAAlkB,EAAAwG,mBAAAxD,OAAA,CACA,KAAAhD,EAAAuN,cAAA,WAA+CuP,YAAAvZ,EAAAqN,KAAA5Q,EAAAiJ,eAC/CjJ,EAAAK,SAAA,CA4CA,GAzCAL,EAAAkf,KAAAlf,EAAAmB,YAAA6B,OAAA,EAAAhD,EAAAyB,WAAA0d,kBACAnf,EAAAyB,WAAA6W,aACA2L,GAAA,GAEA,QAAA1gB,EAAA0e,SACA1e,EAAAyZ,iBAGA,KAAAzZ,EAAA0e,QACAtf,GAAA,EAEa,KAAAY,EAAA0e,QACbtf,GAAA,EAEa,KAAAY,EAAA0e,SAAA1e,EAAAsd,UAAA,IAAAtd,EAAA0e,QACbvf,GAAA,EAEa,KAAAa,EAAA0e,UAAA1e,EAAAsd,UAAA,IAAAtd,EAAA0e,QACbvf,GAAA,EAEa,KAAAa,EAAA0e,SACbtf,GAAA3C,EAAAkf,KACA3b,EAAAyZ,kBAEa,KAAAzZ,EAAA0e,SACbtf,GAAA3C,EAAAkf,KACA3b,EAAAyZ,kBAEa,KAAAzZ,EAAA0e,SAAApZ,GAAA,KAAAtF,EAAA0e,QACbtf,EAAA,EAEa,KAAAY,EAAA0e,SAAApZ,GAAA,KAAAtF,EAAA0e,QACbtf,EAAA3C,EAAA+C,KAAAC,OAAA,EAEa6F,GAAA,KAAAtF,EAAA0e,QACbvf,EAAAwhB,EAEarb,GAAA,KAAAtF,EAAA0e,UACbvf,EAAA,GAGA,KAAAa,EAAA0e,QACA,MAAAjiB,GAAAyN,YAAA/K,EAAAC,EAGA,SAAAY,EAAA0e,QAAA,CAKA,GAJAjiB,EAAAuB,cACAvB,EAAAuB,WAAAmb,KAAAsC,IAAArc,EAAA,OACA3C,EAAAuB,WAAAmb,KAAAsC,IAAArc,EAAA,IAAA8I,KAAA/I,GACA1C,EAAAmhB,gBAAAnhB,EAAA0gB,qBACA1gB,EAAAyB,WAAAmX,iBACA,IAAAva,EAAA2B,EAAAmhB,gBAAAtd,IAAsDxF,GAAA2B,EAAAmhB,gBAAAJ,OAAkC1iB,GAAA,EACxF2B,EAAAyO,UAAApQ,EAAAwK,GAAA,OAGA7I,GAAAsO,eAAAzO,GAAAgJ,EAIA,OAFAtF,GAAAyZ,qBACAhd,GAAA8H,MAAA,GAGApF,EAAA,IACAA,EAAA,GAEAC,EAAAshB,IACAthB,EAAAshB,GAEAthB,EAAA,IACAA,EAAA,GAEAD,EAAAwhB,IACAxhB,EAAAwhB,GAGA3gB,EAAAsd,WAAA,kBAAAnZ,QAAAnE,EAAA0e,WACAjiB,EAAAuB,WAAAmb,KAAAsC,IAAArc,EAAA,IAAA3C,EAAAuB,WAAAmb,KAAAsC,IAAArc,EAAA,QACA3C,EAAAuB,WAAAmb,KAAAsC,IAAArc,EAAA,IAAA8I,KAAA/I,GACA1C,EAAAmhB,gBAAAnhB,EAAA0gB,qBACA1gB,EAAAsO,eAAAzO,GAAAgJ,GACA7I,EAAA8H,MAAA,IAEApF,IAAA1C,EAAAM,WAAAC,aAAAoC,IAAA3C,EAAAM,WAAAE,WACAR,EAAA4N,eAAAlL,IAAA1C,EAAAM,WAAAC,YAAAmC,MAAA7C,GAAA8C,IAAA3C,EAAAM,WAAAE,SAAAmC,MAAA9C,IACAG,EAAA2N,cAAAjL,EAAAC,IACAY,EAAAsd,UAAA7gB,EAAAyB,WAAA0iB,6BACAtb,IACA7I,EAAAuB,eAEAvB,EAAAuB,WAAAoB,GAAA3C,EAAAuB,WAAAoB,OACA3C,EAAAuB,WAAAoB,GAAA8I,KAAA/I,GACA1C,EAAAuN,cAAA,oBACA8U,aAAAriB,EAAA4C,kBACArB,WAAAvB,EAAAuB,WACA4f,gBAAAnhB,EAAAmhB,mBAGAnhB,EAAA8H,MAAA,MAGA9H,EAAAkL,MAAA,SAAA3H,GACAvD,EAAAuN,cAAA,SAA6CuP,YAAAvZ,EAAAqN,KAAA5Q,EAAAiJ,eAC7CjJ,EAAAK,WAGAL,EAAAgL,aAAA0E,MAAA,KAEA1P,EAAAiL,SAAA,SAAA1H,GACAvD,EAAAK,UAGAL,EAAAuN,cAAA,YAAgDuP,YAAAvZ,EAAAqN,KAAA5Q,EAAAiJ,eAEhDjJ,EAAA2K,SAAA,SAAApH,GACAvD,EAAAuN,cAAA,YAAgDuP,YAAAvZ,EAAAqN,KAAA5Q,EAAAiJ,eAChDjJ,EAAAK,WAGA,cAAAL,EAAAiJ,YAAA6F,SACA,eAAA9O,EAAAiJ,YAAAvH,MACA1B,EAAAoK,kBAAApK,EAAAiJ,YAAApC,OAAAlI,MACa,cAAAqB,EAAAiJ,YAAA6F,SACb,eAAA9O,EAAAiJ,YAAAvH,MACA1B,EAAAkK,YACa,0BAAAxC,QAAA1H,EAAAiJ,YAAAvH,QACb1B,EAAAyN,YAAAzN,EAAAiJ,YAAA1I,YAAAP,EAAAiJ,YAAAzI,YAGAR,EAAA6K,YAAA,SAAAtH,GACA,IAAAvD,EAAAuN,cAAA,SAA6CuP,YAAAvZ,IAA7C,CAGAvD,EAAAud,oBAAA,CACA,IAAAjf,GAAA0B,EAAAkB,UAAAwC,WACA+D,EAAAzH,EAAAkB,UAAAyC,SACA3D,GAAAK,WACAL,EAAAkB,UAAAyC,WAAAJ,EAAA6gB,OACApkB,EAAAkB,UAAAwC,YAAAH,EAAA8gB,QAEA5c,IAAAzH,EAAAkB,UAAAyC,WAAArF,IAAA0B,EAAAkB,UAAAwC,YACAH,EAAAyZ,mBAGAhd,EAAA+K,KAAA,SAAAxH,GACA,IAAAvD,EAAAuN,cAAA,QAA4CuP,YAAAvZ,KAC5CvD,EAAAK,UAAAkD,EAAA+gB,cAAA,CACA,GAAAnkB,MAAAokB,EAAAvkB,EAAA4C,iBACA2hB,GAAAvhB,OAAA,IACAuhB,EAAAthB,QAAA,SAAAC,GACA,GAAAA,EAAA,CACA,GAAA4P,KACAhU,QAAA8I,KAAA1E,GAAAD,QAAA,SAAAgE,GACA6L,EAAArH,KAAAvI,EAAA+D,MAEA6L,EAAAqI,KAAA,KACAhb,EAAAsL,KAAAqH,MAGAvP,EAAA+gB,cAAAE,QAAA,aAAArkB,EAAAgb,KAAA,OACA5X,EAAAyZ,sBAKCjW,MAAA5I,EAAAwB,MAAAvB,EAAAD,QAAAyB,IJojDK,SAAUxB,EAAQD,EAASH,GK7jFjC,GAAA2B,GAAAC,CAEAD,UAuPCE,MAvPDD,EAAA,WACA,YACA,iBAAAI,GACAA,EAAA2B,KAAA8iB,KAAA,WACAzkB,EAAAK,UAAA,GAEAL,EAAA2B,KAAA8f,MAAA,WACAzhB,EAAAK,UAAA,EACAL,EAAAgL,aAAAyW,SAEA3iB,OAAAC,eAAAiB,EAAA2B,KAAA,UACAzC,IAAA,WACA,MAAAc,GAAAwD,WAAAe,QAEAkL,IAAA,SAAAC,GACA1P,EAAAwD,WAAAe,OAAAmL,EACA1P,EAAAgI,QAAA,MAGAlJ,OAAAC,eAAAiB,EAAA2B,KAAA,SACAzC,IAAA,WACA,MAAAc,GAAAwD,WAAAgB,OAEAiL,IAAA,SAAAC,GACA1P,EAAAwD,WAAAgB,MAAAkL,EACA1P,EAAAgI,QAAA,MAGAlJ,OAAAC,eAAAiB,EAAA2B,KAAA,gBACAzC,IAAA,WACA,MAAAc,GAAAuC,gBAGAzD,OAAAC,eAAAiB,EAAA2B,KAAA,cACAzC,IAAA,WACA,MAAAJ,QAAA8I,KAAA5H,EAAAsC,YAAA4Y,IAAA,SAAAhF,GACA,MAAAlW,GAAAsC,WAAA4T,QAIApX,OAAAC,eAAAiB,EAAA2B,KAAA,eACAzC,IAAA,WACA,MAAAc,GAAAgF,eAGAlG,OAAAC,eAAAiB,EAAA2B,KAAA,cACAzC,IAAA,WACA,MAAAc,GAAAwD,YAEAiM,IAAA,SAAAC,GACA1P,EAAAwD,WAAAkM,KAGA5Q,OAAAC,eAAAiB,EAAA2B,KAAA,gBACAzC,IAAA,WACA,MAAAc,GAAAwD,YAEAiM,IAAA,SAAAC,GACA1P,EAAAwD,WAAAkM,KAGA5Q,OAAAC,eAAAiB,EAAA2B,KAAA,cACAzC,IAAA,WACA,MAAAc,GAAAwD,WAAAW,cAGArF,OAAAC,eAAAiB,EAAA2B,KAAA,aACAzC,IAAA,WACA,MAAAc,GAAAwD,WAAAY,aAGAtF,OAAAC,eAAAiB,EAAA2B,KAAA,gBACAzC,IAAA,WACA,MAAAc,GAAAkB,UAAA+Y,gBAGAnb,OAAAC,eAAAiB,EAAA2B,KAAA,eACAzC,IAAA,WACA,MAAAc,GAAAkB,UAAAqZ,eAGAzb,OAAAC,eAAAiB,EAAA2B,KAAA,aACAzC,IAAA,WACA,MAAAc,GAAAkB,UAAAyC,WAEA8L,IAAA,SAAAC,GACA1P,EAAAkB,UAAAyC,UAAA+L,KAGA5Q,OAAAC,eAAAiB,EAAA2B,KAAA,cACAzC,IAAA,WACA,MAAAc,GAAAkB,UAAAwC,YAEA+L,IAAA,SAAAC,GACA1P,EAAAkB,UAAAwC,WAAAgM,KAGA5Q,OAAAC,eAAAiB,EAAA2B,KAAA,SACAzC,IAAA,WACA,MAAAc,GAAAoB,SAGAtC,OAAAC,eAAAiB,EAAA2B,KAAA,SACAzC,IAAA,WACA,MAAAc,GAAAqf,SAGAvgB,OAAAC,eAAAiB,EAAA2B,KAAA,gBACAzC,IAAA,WACA,MAAAc,GAAAgL,gBAGAlM,OAAAC,eAAAiB,EAAA2B,KAAA,eACAzC,IAAA,WACA,MAAAc,GAAAiJ,eAGAnK,OAAAC,eAAAiB,EAAA2B,KAAA,gBACAzC,IAAA,WACA,MAAAc,GAAAuW,gBAGAzX,OAAAC,eAAAiB,EAAA2B,KAAA,eACAzC,IAAA,WACA,MAAAc,GAAAmB,eAGArC,OAAAC,eAAAiB,EAAA2B,KAAA,cACAzC,IAAA,WACA,MAAAc,GAAAuB,cAGAzC,OAAAC,eAAAiB,EAAA2B,KAAA,YACAzC,IAAA,WACA,MAAAc,GAAAsZ,YAGAxa,OAAAC,eAAAiB,EAAA2B,KAAA,WACAzC,IAAA,WACA,MAAAc,GAAAiC,WAGAjC,EAAA2B,KAAAF,cACAzB,EAAA2B,KAAAC,WAAA5B,EAAA4B,WACA9C,OAAAC,eAAAiB,EAAA2B,KAAA,mBACAzC,IAAA,WACA,MAAAc,GAAA0gB,wBAGA5hB,OAAAC,eAAAiB,EAAA2B,KAAA,gBACAzC,IAAA,WACA,MAAAc,GAAA4C,iBAAA,MAGA9D,OAAAC,eAAAiB,EAAA2B,KAAA,iBACAzC,IAAA,WACA,MAAAc,GAAA4C,qBAGA9D,OAAAC,eAAAiB,EAAA2B,KAAA,iBACAzC,IAAA,WACA,MAAAc,GAAAwG,mBAAA0U,IAAA,SAAA7X,GACA,MAAAA,QAIAvE,OAAAC,eAAAiB,EAAA2B,KAAA,OACAzC,IAAA,WACA,MAAAc,GAAAqM,OAGAvN,OAAAC,eAAAiB,EAAA2B,KAAA,UACAzC,IAAA,WACA,MAAAc,GAAA8C,aAEA2M,IAAA,SAAAC,GACA,IAAAQ,MAAAkF,QAAA1F,IAAA,gBAAAA,GAAA,GACA,SAAAjG,OAAA,sCAEA,QAAA5J,KAAA6P,EAAA,GAAA/Q,KACA,SAAA8K,OAAA,sEAEAzJ,GAAAoG,OAAAsJ,EAAAwL,IAAA,SAAA9X,EAAAD,GAQA,MAPAC,GAAAoB,MAAApB,EAAAoB,OAAAxE,EAAA0B,MAAAgU,YACAtS,EAAApD,EAAAY,UAAAZ,EAAAgH,kBAAA5D,EAAAzE,MACAyE,EAAAqD,OAAArD,EAAAqD,QAAAzG,EAAAyG,OAAArD,EAAA8D,MACA9D,EAAA8D,KAAA9D,EAAA8D,MAAA,SACA9D,EAAAD,QACAC,EAAA7C,YAAA4C,EACAC,EAAA5C,UAAA,EACA4C,IAEApD,EAAAqG,eAAAxG,GACAG,EAAA2G,mBACA3G,EAAAsG,qBACAtG,EAAAuL,sBACAvL,EAAAgI,QAAA,GACAhI,EAAAuN,cAAA,iBAAqDnH,OAAApG,EAAAoG,YAGrDtH,OAAAC,eAAAiB,EAAA2B,KAAA,QACAzC,IAAA,WACA,MAAAc,GAAA+C,MAEA0M,IAAA,SAAAC,GACA,IAAAQ,MAAAkF,QAAA1F,IACAA,EAAA1M,OAAA,mBAAA0M,GAAA,GACA,SAAAjG,OAAA,oCAEAzJ,GAAA0kB,aACA1kB,EAAAuJ,aAAAmG,EAAAwL,IAAA,SAAAhY,GAGA,MAFAA,GAAAlD,EAAAY,UAAAZ,EAAAgC,IACAhC,EAAAgC,KAAA,EACAkB,IAEAlD,EAAAiC,WAEAjC,EAAA+C,KAAA/C,EAAAuJ,cACAvJ,EAAAoG,QAAApG,EAAA+C,KAAAC,OAAA,IACAhD,EAAAqG,WAAArG,EAAAuO,qBAEAvO,EAAAoG,QAAA,IAAApG,EAAA+C,KAAAC,SACAhD,EAAAqG,aAAwC1H,KAAA,KACxCqB,EAAAqG,WAAA,GAAArG,EAAAY,UAAAZ,EAAAgH,kBAAA,KAEAhH,EAAAqG,aAAArG,EAAAoG,SACApG,EAAAsG,qBACAtG,EAAAuL,sBACAvL,EAAAuN,cAAA,iBAAyDnH,OAAApG,EAAAqG,cAEzDrG,EAAA2G,mBACA3G,EAAAyB,WAAAkjB,mBAAA3kB,EAAA+C,KAAAC,OAAA,OACAnD,KAAAG,EAAAwL,gBACAxL,EAAAkK,WAGA6T,sBAAA,WACA/d,EAAAoK,kBAAA,gBAEApK,EAAAgI,UAAqChI,EAAA8H,MAAA,GACrC9H,EAAAuG,kBACAvG,EAAAuL,sBACAvL,EAAAuN,cAAA,eAAmDxK,KAAA/C,EAAA+C,YAKlDgE,MAAA5I,EAAAwB,MAAAvB,EAAAD,QAAAyB,ILqkFK,SAAUxB,EAAQD,EAASH,GM9zFjC,GAAA2B,GAAAC,CAEAD,UA+aCE,MA/aDD,EAAA,WACA,YACA,iBAAAI,GAEA,QAAA4kB,GAAAnP,EAAA5Q,EAAAggB,EAAAC,GAQA,QAAAC,KACAF,EAAA5hB,QAAA,SAAA+hB,GAGA,QAAAC,GAAA1hB,GACAA,EAAA2hB,gBAAAC,GACAH,EAAApF,YAAAuF,YAAA5hB,EAAA2hB,gBACAF,EAAApF,YAAAvV,UACA+a,EAAA9G,OAAA8G,EAAA1d,QAAAsd,EAAApF,aAAA,GACAoF,EAAApF,gBAAA/f,GACAwlB,EAAA7a,oBAAA,WAAAya,GACAE,EAAA3a,oBAAA,WAAAya,GACAI,EAAAC,aAAA,oBAEA,QAAAC,KACA,SAAAF,EAAAG,aAAA,gBAGA,GAAAC,GAAAJ,EAAAzgB,uBACAogB,GAAApF,YAAAgF,EAAAnP,GACA7R,KAAA6hB,EAAA7hB,KAAA5D,EAAA0B,MAAAgkB,2BAAAP,EAAA7gB,YACAT,IAAA4hB,EAAA5hB,IAAA7D,EAAA0B,MAAAikB,0BACA5E,OAAA0E,EAAA1E,OACAC,MAAAyE,EAAAzE,OACyBgE,EAAAH,MAAAljB,GACzB0jB,EAAAC,aAAA,mBACAD,EAAA/X,iBAAA,WAAA2X,GACAE,EAAA7X,iBAAA,WAAA2X,GACAG,EAAA3Z,KAAAuZ,EAAApF,cA1BA,GACAgG,GADAP,EAAAlZ,SAAAC,cAAA,QA4BA,SAAA4Y,GACA,QAAAa,GAAAC,GACA,wBAAAA,GACAD,EAAAC,EAAArQ,IAEA,gBAAAqQ,OACAT,GAAAzD,YAAAkE,IAGA9lB,EAAA6hB,kBAAAwD,EAAA,qCACAA,EAAA/X,iBAAA,uBACAtN,EAAA6hB,kBAAAwD,EAAA,6CAEAA,EAAA/X,iBAAA,sBACAtN,EAAA6hB,kBAAAwD,EAAA,4CAEAA,EAAAtU,UAAA+U,IAGAD,EAAAb,EAAA7O,OACA6O,EAAAK,uBACAL,EAAAH,OAAAG,EAAAH,MAAA7hB,OAAA,IACA4iB,EAAAzZ,SAAAC,cAAA,OACApM,EAAA6hB,kBAAA+D,EAAA,uCACAA,EAAA7U,UAAA/Q,EAAA0B,MAAAqkB,0BACAV,EAAAzD,YAAAgE,GACAP,EAAA/X,iBAAA,YAAAiY,IAEAP,EAAApa,OACAya,EAAA/X,iBAAA,iBAAAmI,GACAuP,EAAApa,MAAA7D,MAAA/G,GAAAyV,OAIAuP,GACAG,EAAAvD,YAAAyD,KAGA,QAAAW,GAAA3H,GACAwG,EAAAxG,GAAAgH,qBAAA9X,cAAA,GAAA0Y,OAAA,UAEA,QAAAC,KACAf,EAAAxhB,UAAA,EACAwI,SAAAqR,KAAAoE,YAAAuE,GACiBA,EAAA3iB,YACjB2iB,EAAA3iB,WAAA8G,YAAA6b,GAEAhB,EAAAxhB,WAAAwhB,EAAAlL,aAAAkL,EAAA9gB,cAAA+hB,EAAA5iB,WACA4iB,EAAA5iB,WAAA8G,YAAA8b,GACiBjB,EAAAlL,aAAAkL,EAAA9gB,aAAA,KACjB8gB,EAAAxhB,WAAAwhB,EAAAlL,aAAAkL,EAAA9gB,eACA8H,SAAAqR,KAAAoE,YAAAwE,GAGA,QAAAC,GAAAnf,GACA,eAAAO,KACA,GAAA8P,GAAAvX,EAAAyB,WAAA6kB,wBACA,QAAApf,GAAA,IAAAie,EAAAxhB,WACA,SAAAuD,GAAAie,EAAAxhB,YAAAwhB,EAAAlL,eACAkL,EAAAxhB,WAAA,OAAAuD,GAAAqQ,IACAgP,EAAApd,WAAA1B,EAAAzH,EAAAyB,WAAA+kB,yBAAAtf,KAGA,QAAAuf,GAAAvf,GACA,kBACAiW,aAAAoJ,IAtGA,GAKA5kB,GACA+C,EANAygB,EAAAhZ,SAAAC,cAAA,OACA+Z,EAAAha,SAAAC,cAAA,OACAga,EAAAja,SAAAC,cAAA,OACAgZ,KACAsB,GAAA,CAkNA,OA7GA,YACA,GAAAC,MACAjnB,EAAAM,EAAAsD,aAAAtD,EAAA2E,OACAogB,KACA/kB,EAAA6hB,kBAAAsD,EAAA,gCACAwB,EAAAjkB,EAAAmC,EAAAjB,KAAAlE,EAAAkE,KACA+iB,EAAAhkB,EAAAkC,EAAAhB,IAAAnE,EAAAmE,IACA8iB,EAAApiB,OAAA,EACAqiB,GAAA,EACAzB,EAAAzjB,MAAAoC,SAAA,WACAqiB,EAAAzkB,MAAAmlB,MAAA7mB,EAAA0B,MAAAolB,sBACAV,EAAA1kB,MAAAmlB,MAAA7mB,EAAA0B,MAAAolB,uBACAX,EAAAC,GAAAnjB,QAAA,SAAA8jB,GACAA,EAAArlB,MAAAslB,UAAA,SACAD,EAAArlB,MAAAoC,SAAA,WACAijB,EAAArlB,MAAAogB,OAAA8E,EAAA,IAEAzB,EAAAzjB,MAAAogB,OAAA8E,EACA9B,KAAAmC,gBACA9B,EAAAzjB,MAAAwlB,UAAA9b,OAAA+b,YAAAR,EAAAhkB,EAAA3C,EAAA0B,MAAA0lB,yBAAA,KACAjC,EAAAzjB,MAAA2lB,SAAAxiB,EAAAL,MAAA,KACAmiB,EAAAhkB,GAAAkC,EAAAN,QAEA4gB,EAAAzjB,MAAAkC,KAAA+iB,EAAAjkB,EAAA,KACAyiB,EAAAzjB,MAAAmC,IAAA8iB,EAAAhkB,EAAA,KACAwiB,EAAA7X,iBAAA,SAAA4Y,GACAf,EAAA7X,iBAAA,iBAAA/J,GACAvD,EAAAK,WACA8kB,EAAAxhB,WAAAJ,EAAA6gB,OACAe,EAAAzhB,YAAAH,EAAA8gB,QAEA6B,MAEAC,EAAApV,UAAA/Q,EAAA0B,MAAA4lB,uBACAlB,EAAArV,UAAA/Q,EAAA0B,MAAA6lB,yBACApC,EAAAvD,YAAAuE,GACAha,SAAAqR,KAAAoE,YAAAwE,GACAja,SAAAqR,KAAAoE,YAAAuD,GACAzgB,EAAAygB,EAAAvgB,0BACAF,EAAAqc,OAAA3V,OAAA+b,cAAArC,KAAAmC,gBACAN,EAAAhkB,EAAAyI,OAAA+b,YAAAhC,EAAA9gB,aACAsiB,EAAAhkB,EAAA,IAAoCgkB,EAAAhkB,EAAA,GACpCwiB,EAAA9gB,aAAA+G,OAAA+b,cACAhC,EAAAzjB,MAAA6C,OAAA6G,OAAA+b,YAAAnnB,EAAA0B,MAAA8lB,wBAAA,OAGA9iB,EAAAsc,MAAA5V,OAAAqc,aAEAd,EAAAjkB,EADAoiB,EACAA,EAAAK,UAAAhhB,WAAAghB,EAAA7gB,YAEA8G,OAAAqc,WAAAtC,EAAA7gB,aAGA6gB,EAAAzjB,MAAAkC,KAAA+iB,EAAAjkB,EAAA,KACAyiB,EAAAzjB,MAAAmC,IAAA8iB,EAAAhkB,EAAA,KACA+B,EAAAygB,EAAAvgB,wBACAuhB,EAAAzkB,MAAAmC,IAAAa,EAAAb,IAAA,KACAuiB,EAAA1kB,MAAAmC,IAAAa,EAAAb,IAAAa,EAAAH,OAAA6hB,EAAA/hB,aAAA,KACA8hB,EAAAzkB,MAAAkC,KAAAc,EAAAd,KAAA,KACAwiB,EAAA1kB,MAAAkC,KAAAc,EAAAd,KAAA,KACAwiB,EAAA1kB,MAAA8C,MAAA2gB,EAAA7gB,YAAA,KACA6hB,EAAAzkB,MAAA8C,MAAA2gB,EAAA7gB,YAAA,KACA8hB,EAAA9Y,iBAAA,YAAA+Y,EAAA,SACAD,EAAA9Y,iBAAA,WAAAmZ,EAAA,SACAN,EAAA7Y,iBAAA,YAAA+Y,EAAA,OACAF,EAAA7Y,iBAAA,WAAAmZ,EAAA,OACAP,OAGAvkB,GACAqkB,aACAthB,OACAogB,oBACAK,YACAN,QACAO,WACA/a,QAAA,WACA8S,aAAAoJ,GACAnB,EAAAniB,QAAA,SAAAxE,GACAA,EAAA4L,aAEA+b,EAAAD,EAAAhB,GAAAliB,QAAA,SAAA8jB,GACAA,EAAAvjB,YAA4CujB,EAAAvjB,WAAA8G,YAAAyc,OAI5CjoB,OAAAC,eAAA4C,EAAA,iBACAzC,IAAA,WACA,MAAAwnB,IAEAjX,IAAA,SAAAC,GACA,mBAAAA,IAAAgY,MAAAhY,IAAAiY,SAAAjY,IACA,SAAAjG,OAAA,qDAEAid,GAAAhX,EACAgX,EAAA7B,EAAA7hB,OAAA,IACA0jB,EAAA7B,EAAA7hB,OAAA,GAEA0jB,EAAA,IACAA,EAAA,GAEA7B,EAAA5hB,QAAA,SAAA+hB,EAAA7hB,GACA,GAAAA,IAAAujB,EACA,MAAA1mB,GAAA6hB,kBAAAmD,EAAAK,qBAAA,0CAEArlB,GAAA6hB,kBAAAmD,EAAAK,qBAAA,0CAIA1jB,EAEA,QAAAimB,GAAArkB,GAQA,QAAAskB,KACAC,KACA9nB,EAAA+C,KAAAE,QAAA,SAAAC,GACA,GAAAwM,GAAAxM,EAAAK,EAAAqN,KAAA/J,OAAAlI,KACAmpB,GAAApY,KACAoY,EAAApY,IACAyG,MAAAnW,EAAA4B,WAAA2B,EAAAqN,KAAA/J,OAAAK,MAAA,gBAAsFwI,UACtF9E,MAAA,SAAArH,GACAwkB,EAAArY,QACAnM,EAAAwZ,kBACAgL,EAAAxa,cAAA,GAAA0Y,OAAA,UACAjmB,EAAAgoB,2BAKAF,EAAAhpB,OAAA8I,KAAAkgB,GAAA5M,IAAA,SAAAjU,GACA,MAAA6gB,GAAA7gB,KAGA,QAAAghB,GAAAxS,GACAA,IAAA,oBAAA/N,QAAA+N,EAAAwM,WACA4F,IACAK,EAAAH,EAAAnjB,wBACAujB,IACAA,EAAA9d,UACA8d,MAAAtoB,IAEAsoB,EAAAvD,EAAArhB,GACAK,KAAAskB,EAAAtkB,KACAC,IAAAqkB,EAAArkB,IACAmd,MAAAkH,EAAAlH,MACAD,OAAAmH,EAAAnH,OACAxc,OAAA2jB,EAAA3jB,OACAC,MAAA0jB,EAAA1jB,OACiBsjB,GAAsBb,eAAA,IACvCkB,EAAAzB,cAAA,GA3CA,GAKAoB,GACAI,EANAE,EAAAjc,SAAAC,cAAA,OACAic,EAAAlc,SAAAC,cAAA,OACAkc,EAAAnc,SAAAC,cAAA,UACA2b,EAAA5b,SAAAC,cAAA,SACAjN,EAAAoE,EAAAqN,MAAArN,EAAAqN,KAAA/J,OAAAtD,EAAAqN,KAAA/J,OAAAsP,OAAA5S,EAAAqN,KAAA/J,OAAAlI,KAAA,EAyCAqB,GAAA6hB,kBAAAwG,EAAA,sCACAroB,EAAA6hB,kBAAAyG,EAAA,8CACAP,EAAAQ,QAAAvoB,EAAAgoB,oBACAD,EAAAza,iBAAA,mBAAA/J,GAEA,KAAAA,EAAA0e,UACAkG,EAAAzB,eAAA,GAGA,KAAAnjB,EAAA0e,UACAkG,EAAAzB,eAAA,GAGA,KAAAnjB,EAAA0e,UACAkG,EAAAnC,WAAAmC,EAAAzB,eACA1mB,EAAAmO,sBAGA,IAAA5K,EAAA0e,UACAkG,EAAAnC,WAAAmC,EAAAzB,eACAnjB,EAAAyZ,kBAGA,KAAAzZ,EAAA0e,SACAjiB,EAAAmO,uBAGA4Z,EAAAza,iBAAA,mBACAtN,EAAAwO,UAAAjL,EAAAqN,KAAA/J,OAAAlI,KAAAopB,EAAArY,SAEAqY,EAAAza,iBAAA,QAAA2a,GACAI,EAAAtX,UAAA/Q,EAAAyB,WAAA+mB,iBAAAC,QAAA,MAAAtpB,GACAmpB,EAAAC,QAAA,WACA,GAAAJ,EACA,MAAAnoB,GAAAgoB,qBAEAC,MAEAK,EAAAvX,UAAA/Q,EAAA0B,MAAAgnB,wBACAN,EAAA9a,iBAAA,iBAAA/J,GACA,MAAAA,GAAAwZ,oBAEAqL,EAAAxG,YAAAyG,GACAD,EAAAxG,YAAAmG,GACAK,EAAAxG,YAAA0G,GACA/kB,EAAAshB,MAAApZ,MACA0K,MAAAiS,IAEAtpB,OAAA8I,KAAA5H,EAAAe,eAAAiC,QACAlE,OAAA8I,KAAA5H,EAAAe,eAAAkC,QAAA,SAAA0lB,GACA,GAAA3kB,GAAAhE,EAAA0L,gBAAAid,EACAplB,GAAAshB,MAAApZ,MACA0K,MAAAnW,EAAAyB,WAAAmnB,uBAAAH,QAAA,MAAAzkB,EAAAmS,OAAAnS,EAAArF,MACAiM,MAAA,SAAArH,GACAA,EAAAyZ,iBACAhd,EAAAwO,UAAAma,EAAA,IACA3oB,EAAAgL,aAAAyW,aAMA,QAAAoH,GAAAtlB,GACAvD,EAAAyB,WAAAqnB,YACAlB,EAAArkB,GAEAvD,EAAAyB,WAAAsnB,UACA/oB,EAAAuB,WAAAyZ,OAAA,SAAAvb,EAAAqT,GACA,MAAArT,GAAAqT,EAAA9P,QACqB,MACrBO,EAAAshB,MAAApZ,MACA0K,MAAAnW,EAAAyB,WAAAunB,SACApe,MAAA,WACAuB,SAAA8c,YAAA,QACAjpB,EAAAmO,qBACAnO,EAAAgL,aAAAyW,WAIAzhB,EAAAyB,WAAAsE,gBAAA/F,EAAAyB,WAAAynB,0BACApqB,OAAA8I,KAAA5H,EAAAoB,MAAAjB,MAAA6C,OAAA,GACAlE,OAAA8I,KAAA5H,EAAAoB,MAAAhB,SAAA4C,OAAA,IACAO,EAAAshB,MAAApZ,MACA0K,MAAAnW,EAAAyB,WAAA0nB,wBACAve,MAAA,SAAArH,GACAA,EAAAyZ,iBACAhd,EAAAoB,MAAAjB,QACAH,EAAAoB,MAAAhB,WACAJ,EAAAuG,kBACAvG,EAAAsG,qBACAtG,EAAAwL,mBAAA3L,GACAG,EAAAuN,cAAA,gBAA4DmI,YAAA1V,EAAA0B,MAAAgU,cAC5D1V,EAAAuN,cAAA,aAAyDuI,WAAA9V,EAAA0B,MAAAoU,aACzD9V,EAAA8F,iBACA9F,EAAAgI,QAAA,GACAhI,EAAAmO,qBACAnO,EAAAgL,aAAAyW,WAIAzhB,EAAAyB,WAAA2nB,cAAAppB,EAAAyB,WAAA4nB,oBACA9lB,EAAAshB,MAAApZ,MACA0K,MAAAnW,EAAAyB,WAAA6nB,yBAAAb,QAAA,KAAAllB,EAAAqN,KAAA/J,OAAAsP,OAAA5S,EAAAqN,KAAA/J,OAAAlI,MACAiM,MAAA,SAAArH,GACAA,EAAAyZ,iBACAhd,EAAA2L,MAAApI,EAAAqN,KAAA/J,OAAAlI,KAAA,OACAqB,EAAAgL,aAAAyW,WAGAle,EAAAshB,MAAApZ,MACA0K,MAAAnW,EAAAyB,WAAA8nB,0BAAAd,QAAA,KAAAllB,EAAAqN,KAAA/J,OAAAsP,OAAA5S,EAAAqN,KAAA/J,OAAAlI,MACAiM,MAAA,SAAArH,GACAA,EAAAyZ,iBACAhd,EAAA2L,MAAApI,EAAAqN,KAAA/J,OAAAlI,KAAA,QACAqB,EAAAmO,qBACAnO,EAAAgL,aAAAyW,YA3XA,GAAA8E,GAAA4B,EAAAvB,EAAA,CAgYA5mB,GAAAgoB,oBAAA,WACAG,IACAA,EAAA9d,UACA8d,MAAAtoB,KAGAG,EAAAmO,mBAAA,WACAhC,SAAA3B,oBAAA,QAAAxK,EAAAmO,oBACAyY,EAAA,EACA5mB,EAAAgoB,sBACAhoB,EAAA4f,YAAAvV,UACArK,EAAA4f,gBAAA/f,IAEAG,EAAAwpB,iBAAA,SAAAjmB,EAAAoc,GACA,GAAA3f,EAAAK,UAAAkD,EAAAigB,SAAAxjB,EAAA2E,OAAA,CAGA,GAAAkgB,MACAhgB,EAAA8a,GAAA3f,EAAAyE,YAAAlB,GAAA,GACAkS,GACAqH,YAAAvZ,EACAqN,KAAA5Q,EAAAoO,UAAAvJ,EAAAnC,EAAAmC,EAAAlC,GACAkiB,QAEAgE,GAAApT,GACAzV,EAAAuN,cAAA,cAAAkI,KAGAzV,EAAA4f,aACA5f,EAAAmO,qBAEAnO,EAAA4f,YAAAgF,EAAAnP,GACA7R,KAAAiB,EAAAnC,EAAAmC,EAAAH,KAAAd,KAAA5D,EAAA0B,MAAA+nB,sBAAAzpB,EAAAiF,iBACApB,IAAAgB,EAAAlC,EAAAkC,EAAAH,KAAAb,IAAA7D,EAAA0B,MAAAgoB,qBAAA1pB,EAAAkF,gBACA8b,MAAAvL,EAAA7E,KAAApM,MAAAiR,EAAA7E,KAAAlO,EAAAmC,EAAAH,KAAAd,KACAmd,OAAAtL,EAAA7E,KAAArM,OAAAkR,EAAA7E,KAAAjO,EAAAkC,EAAAH,KAAAb,IACAU,OAAAkR,EAAA7E,KAAArM,OACAC,MAAAiR,EAAA7E,KAAApM,OACaqgB,GACb1Y,SAAAmB,iBAAA,QAAAtN,EAAAmO,oBACA5K,EAAAyZ,sBAICjW,MAAA5I,EAAAwB,MAAAvB,EAAAD,QAAAyB,INs0FK,SAAUxB,EAAQD,EAASH,GOvvGjC,GAAA2B,GAAAC,CAEAD,UAwNCE,MAxNDD,EAAA,WACA,YACA,iBAAAI,GACAA,EAAA+J,UACAtI,aACA,YACA,YACA,kBACA,4BACA,sBACA,kCACA,iBACA,gBACA,6BACA,0BACA,oBACA,kBACA,uBACA,wBACA,+BACA,wBACA,yBACA,4BACA,yBACA,sBACA,8BACA,iCACA,aACA,wBACA,yBACA,sBACA,sBACA,wBACA,2BACA,wBACA,+BACA,+BACA,gCACA,sBACA,+BACA,yBACA,mDACA,qDACA,uDACA,iDACA,iCACA,mCACA,wCACA,gCACA,oBACA,0BACA,uBACA,oBACA,gBAEAwI,SACA,uDACA,mDACA,8BACA,uCACA,qCACA,4DACA,4CACA,yDACA,qCACA,8BACA,4BACA,6BACA,2BACA,+DACA,+CACA,6DACA,6CACA,gEACA,gDACA,gCACA,gCACA,sBACA,6CACA,6BACA,iDACA,6CACA,wBACA,iCACA,+BACA,kBACA,gCACA,mCACA,sDACA,sCACA,wBACA,sBACA,uBACA,qBACA,yDACA,yCACA,mCACA,+BACA,kCACA,gCACA,yCACA,qDACA,yCACA,oBACA,mDACA,yDACA,kCACA,2CACA,+DACA,uCACA,+BACA,wDACA,iDACA,sCACA,gCACA,2CACA,uCACA,qCACA,oCACA,4BACA,4BACA,8BACA,8BACA,6BACA,sCACA,wCACA,gDACA,uCACA,iEACA,0CACA,uDACA,mDACA,sDACA,kDACA,oCACA,4BACA,0BACA,0BACA,oCACA,6CACA,sBACA,uDACA,mDACA,8BACA,0CACA,qCACA,wBACA,yCACA,4DACA,4CACA,8BACA,4BACA,6BACA,2BACA,yCACA,2DACA,oCACA,qDACA,+BACA,mCACA,oCACA,kCACA,+BACA,sBACA,sBACA,iBACA,oBACA,mBACA,sDACA,kDACA,kCACA,0DACA,uCACA,0DACA,sDACA,iCACA,6CACA,wCACA,2BACA,4CACA,+DACA,+CACA,iCACA,+BACA,gCACA,8BACA,kEACA,qDACA,4CACA,kDACA,sDACA,kDACA,4BACA,+BACA,+CACA,yBACA,2BACA,wBACA,4DACA,wDACA,sBACA,wDACA,oCACA,kDACA,2BACA,2BACA,4CACA,sBACA,0BACA,2BACA,yBACA,sBACA,0BAIClD,MAAA5I,EAAAwB,MAAAvB,EAAAD,QAAAyB,IP+vGK,SAAUxB,EAAQD,EAASH,GQz9GjC,GAAA2B,GAAAC,CAEAD,UA0SCE,MA1SDD,EAAA,WACA,YACA,iBAAA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","file":"canvas-datagrid.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n    __webpack_require__(1),\n    __webpack_require__(2),\n    __webpack_require__(3),\n    __webpack_require__(4),\n    __webpack_require__(5),\n    __webpack_require__(6),\n    __webpack_require__(7)\n], __WEBPACK_AMD_DEFINE_RESULT__ = function context() {\n    'use strict';\n    var modules = Array.prototype.slice.call(arguments);\n    function grid(args) {\n        args = args || {};\n        var self = {};\n        self.args = args;\n        self.createGrid = grid;\n        self.orders = {\n            rows: [],\n            columns: []\n        };\n        self.hasFocus = false;\n        self.activeCell = {\n            columnIndex: 0,\n            rowIndex: 0\n        };\n        self.storageName = 'canvasDataGrid';\n        self.invalidSearchExpClass = 'canvas-datagrid-invalid-search-regExp';\n        self.localStyleLibraryStorageKey = 'canvas-datagrid-user-style-library';\n        self.uniqueId = '_canvasDataGridUniqueId';\n        self.orderBy = self.uniqueId;\n        self.orderDirection = 'asc';\n        self.columnFilters = {};\n        self.filters = {};\n        self.ellipsisCache = {};\n        self.scrollBox = {};\n        self.visibleRows = [];\n        self.sizes = {\n            rows: {},\n            columns: {},\n            trees: {}\n        };\n        self.currentFilter = function () {\n            return true;\n        };\n        self.selections = [];\n        self.hovers = {};\n        self.attributes = {};\n        self.style = {};\n        self.intf = {};\n        self.formatters = {};\n        self.sorters = {};\n        self.schemaHashes = {};\n        self.events = {};\n        self.uId = 0;\n        self.changes = [];\n        self.scrollIndexTop = 0;\n        self.scrollPixelTop = 0;\n        self.scrollIndexLeft = 0;\n        self.scrollPixelLeft = 0;\n        self.childGrids = {};\n        self.openChildren = {};\n        self.scrollModes = [\n            'vertical-scroll-box',\n            'vertical-scroll-top',\n            'vertical-scroll-bottom',\n            'horizontal-scroll-box',\n            'horizontal-scroll-right',\n            'horizontal-scroll-left'\n        ];\n        self.mouse = { x: 0, y: 0};\n        self.getSelectedData = function (expandToRow) {\n            var d = [], s = self.getSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                d[index] = {};\n                if (expandToRow) {\n                    s.forEach(function (column) {\n                        d[index][column.name] = self.data[index][column.name];\n                    });\n                } else {\n                    row.forEach(function (col) {\n                        if (col === -1) { return; }\n                        d[index][s[col].name] = self.data[index][s[col].name];\n                    });\n                }\n            });\n            return d;\n        };\n        self.scrollOffset = function (e) {\n            var x = 0, y = 0;\n            while (e.parentNode) {\n                if (e.nodeType !== 'canvas-datagrid-tree'\n                        && e.nodeType !== 'canvas-datagrid-cell') {\n                    x -= e.scrollLeft;\n                    y -= e.scrollTop;\n                }\n                e = e.parentNode;\n            }\n            return {left: x, top: y};\n        };\n        self.position = function (e, ignoreScrollOffset) {\n            var x = 0, y = 0, s = e, h, w;\n            while (e.offsetParent) {\n                x += e.offsetLeft;\n                y += e.offsetTop;\n                h = e.offsetHeight;\n                w = e.offsetWidth;\n                e = e.offsetParent;\n            }\n            if (ignoreScrollOffset) {\n                return {left: x, top: y, height: h, width: w};\n            }\n            e = s;\n            s = self.scrollOffset(e);\n            return { left: x + s.left, top: y + s.top, height: h, width: w };\n        };\n        self.getLayerPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.clientX - rect.left,\n                    y: e.clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        self.fillArray = function (low, high, step) {\n            step = step || 1;\n            var i = [], x;\n            for (x = low; x <= high; x += step) {\n                i[x] = x;\n            }\n            return i;\n        };\n        self.getHeaderCellHeight = function () {\n            if (!self.attributes.showColumnHeaders) { return 0; }\n            return self.sizes.rows[-1] || self.style.headerCellHeight;\n        };\n        self.getHeaderCellWidth = function () {\n            if (!self.attributes.showRowHeaders) { return 0; }\n            return self.sizes.columns.cornerCell || self.style.headerRowWidth;\n        };\n        self.setStorageData = function () {\n            if (!self.attributes.saveAppearance) { return; }\n            localStorage.setItem(self.storageName + '-' + self.attributes.name, JSON.stringify({\n                sizes: {\n                    rows: self.sizes.rows,\n                    columns: self.sizes.columns\n                },\n                orders: {\n                    rows: self.orders.rows,\n                    columns: self.orders.columns\n                },\n                orderBy: self.orderBy,\n                orderDirection: self.orderDirection\n            }));\n        };\n        self.getSchema = function () {\n            return self.schema || self.tempSchema;\n        };\n        self.createColumnOrders = function () {\n            var s = self.getSchema();\n            self.orders.columns = self.fillArray(0, s.length - 1);\n        };\n        self.createRowOrders = function () {\n            self.orders.rows = self.fillArray(0, self.data.length - 1);\n        };\n        self.getVisibleSchema = function () {\n            return self.getSchema().filter(function (col) { return !col.hidden; });\n        };\n        self.createNewRowData = function () {\n            self.newRow = {};\n            self.newRow[self.uniqueId] = self.uId;\n            self.uId += 1;\n            self.getSchema().forEach(function forEachHeader(header, index) {\n                var d = header.defaultValue || '';\n                if (typeof d === 'function') {\n                    d = d.apply(self.intf, [header, index]);\n                }\n                self.newRow[header.name] = d;\n            });\n        };\n        self.getSchemaNameHash = function (key) {\n            var n = 0;\n            while (self.schemaHashes[key]) {\n                n += 1;\n                key = key + n;\n            }\n            return key;\n        };\n        self.filter = function (type) {\n            var f = self.filters[type];\n            if (!f && type !== undefined) {\n                console.warn('Cannot find filter for type %s, falling back to substring match.', type);\n                f = self.filters.string;\n            }\n            return f;\n        };\n        self.getBestGuessDataType = function (columnName) {\n            var t, x, l = self.data.length;\n            for (x = 0; x < l; x += 1) {\n                if ([null, undefined].indexOf(self.data[x][columnName]) !== -1) {\n                    t = typeof self.data[x];\n                    return t === 'object' ? 'string' : t;\n                }\n            }\n            return 'string';\n        };\n        self.drawChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].draw();\n            });\n        };\n        self.resizeChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].resize();\n            });\n        };\n        self.getClippingRect = function (ele) {\n            var boundingRect = self.position(self.parentNode),\n                eleRect = self.position(ele),\n                s = self.scrollOffset(self.canvas),\n                clipRect = {\n                    x: 0,\n                    y: 0,\n                    h: 0,\n                    w: 0\n                },\n                parentRect = {\n                    x: -Infinity,\n                    y: -Infinity,\n                    h: Infinity,\n                    w: Infinity\n                },\n                headerCellHeight = self.getHeaderCellHeight(),\n                headerCellWidth = self.getHeaderCellWidth();\n            boundingRect.top -= s.top;\n            boundingRect.left -= s.left;\n            eleRect.top -= s.top;\n            eleRect.left -= s.left;\n            clipRect.h = boundingRect.top + boundingRect.height - ele.offsetTop - self.style.scrollBarWidth;\n            clipRect.w = boundingRect.left + boundingRect.width - ele.offsetLeft - self.style.scrollBarWidth;\n            clipRect.x = boundingRect.left + (eleRect.left * -1) + headerCellWidth;\n            clipRect.y = boundingRect.top + (eleRect.top * -1) + headerCellHeight;\n            return {\n                x: clipRect.x > parentRect.x ? clipRect.x : parentRect.x,\n                y: clipRect.y > parentRect.y ? clipRect.y : parentRect.y,\n                h: clipRect.h < parentRect.h ? clipRect.h : parentRect.h,\n                w: clipRect.w < parentRect.w ? clipRect.w : parentRect.w\n            };\n        };\n        self.clipElement = function (ele) {\n            var clipRect = self.getClippingRect(ele);\n            if (clipRect.w < 0) { clipRect.w = 0; }\n            if (clipRect.h < 0) { clipRect.h = 0; }\n            ele.style.clip = 'rect('\n                + clipRect.y + 'px,'\n                + clipRect.w + 'px,'\n                + clipRect.h + 'px,'\n                + clipRect.x + 'px'\n                + ')';\n            // INFO https://developer.mozilla.org/en-US/docs/Web/CSS/clip\n            // clip has been \"deprecated\" for clipPath.  Of course nothing but chrome\n            // supports clip path, so we'll keep using clip until someday clipPath becomes\n            // more widely support.  The code below works correctly, but setting clipPath and clip\n            // at the same time has undesirable results.\n            // ele.style.clipPath = 'polygon('\n            //     + clipRect.x + 'px ' + clipRect.y + 'px,'\n            //     + clipRect.x + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.y + 'px'\n            //     + ')';\n        };\n        self.autoScrollZone = function (e, x, y, ctrl) {\n            var setTimer,\n                headerCellWidth = self.getHeaderCellWidth(),\n                headerCellHeight = self.getHeaderCellHeight();\n            if (x > self.width - self.attributes.selectionScrollZone && x < self.width) {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y > self.height - self.attributes.selectionScrollZone && y < self.height) {\n                self.scrollBox.scrollTop += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (x - self.attributes.selectionScrollZone - headerCellWidth < 0) {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y - self.attributes.selectionScrollZone - headerCellHeight < 0) {\n                self.scrollBox.scrollTop -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (setTimer && !ctrl && self.currentCell && self.currentCell.columnIndex !== -1) {\n                self.scrollTimer = setTimeout(self.mousemove, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.refreshFromOrigialData = function () {\n            self.data = self.originalData.filter(function (row) {\n                return true;\n            });\n        };\n        self.validateColumn = function (c, s) {\n            if (!c.name) {\n                throw new Error('A column must contain at least a name.');\n            }\n            if (s.filter(function (i) { return i.name === c.name; }).length > 0) {\n                throw new Error('A column with the name '\n                    + c.name + ' already exists and cannot be added again.');\n            }\n            return true;\n        };\n        self.setDefaults = function (obj1, obj2, key, def) {\n            obj1[key] = obj2[key] === undefined ? def : obj2[key];\n        };\n        self.setAttributes = function () {\n            self.defaults.attributes.forEach(function eachAttribute(i) {\n                self.setDefaults(self.attributes, args, i[0], i[1]);\n            });\n        };\n        self.setStyle = function () {\n            self.defaults.styles.forEach(function eachStyle(i) {\n                self.setDefaults(self.style, args.style || {}, i[0], i[1]);\n            });\n        };\n        self.autosize = function (colName) {\n            self.getVisibleSchema().forEach(function (col) {\n                if (col.name === colName || colName === undefined) {\n                    self.fitColumnToValues(col.name);\n                }\n            });\n            self.fitColumnToValues('cornerCell');\n        };\n        self.dispose = function () {\n            if (!self.isChildGrid && self.canvas && self.canvas.parentNode) {\n                self.canvas.parentNode.removeChild(self.canvas);\n            }\n            self.eventParent.removeEventListener('mouseup', self.mouseup, false);\n            self.eventParent.removeEventListener('mousedown', self.mousedown, false);\n            self.eventParent.removeEventListener('dblclick', self.dblclick, false);\n            self.eventParent.removeEventListener('click', self.click, false);\n            self.eventParent.removeEventListener('mousemove', self.mousemove);\n            self.eventParent.removeEventListener('wheel', self.scrollWheel, false);\n            self.canvas.removeEventListener('contextmenu', self.contextmenu, false);\n            self.canvas.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('keypress', self.keypress, false);\n            self.controlInput.removeEventListener('keyup', self.keyup, false);\n            self.controlInput.removeEventListener('keydown', self.keydown, false);\n            window.removeEventListener('resize', self.resize);\n            if (self.observer && self.observer.disconnect) {\n                self.observer.disconnect();\n            }\n        };\n        self.tryLoadStoredOrders = function () {\n            var s;\n            if (self.storedSettings && typeof self.storedSettings.orders === 'object') {\n                if (self.storedSettings.orders.rows.length >= self.data.length) {\n                    self.orders.rows = self.storedSettings.orders.rows;\n                }\n                s = self.getSchema();\n                self.orders.columns = self.storedSettings.orders.columns;\n                s.forEach(function (h, i) {\n                    if (self.orders.columns.indexOf(i) === -1) {\n                        self.orders.columns.push(i);\n                    }\n                });\n                self.orderBy = self.storedSettings.orderBy === undefined\n                    ? self.uniqueId : self.storedSettings.orderBy;\n                self.orderDirection = self.storedSettings.orderDirection === undefined\n                    ? self.uniqueId : self.storedSettings.orderDirection;\n                if (self.getHeaderByName(self.orderBy) && self.orderDirection) {\n                    self.order(self.orderBy, self.orderDirection);\n                }\n            }\n        };\n        self.getFontHeight = function (fontStyle) {\n            return parseFloat(fontStyle, 10);\n        };\n        self.getFontHeightLong = function (fontStyle) {\n            var pixels,\n                start,\n                end,\n                row,\n                column,\n                index,\n                canvas = document.createElement('canvas'),\n                ctx = canvas.getContext('2d');\n            canvas.height = 5000;\n            canvas.width = 5000;\n            ctx.save();\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\n            ctx.textBaseline = 'top';\n            ctx.fillStyle = 'white';\n            ctx.font = fontStyle;\n            ctx.fillText('gM', 0, 0);\n            pixels = ctx.getImageData(0, 0, canvas.width, canvas.height).data;\n            start = -1;\n            end = -1;\n            for (row = 0; row < canvas.height; row += 1) {\n                for (column = 0; column < canvas.width; column += 1) {\n                    index = (row * canvas.width + column) * 4;\n                    if (pixels[index] === 0) {\n                        if (column === canvas.width - 1 && start !== -1) {\n                            end = row;\n                            row = canvas.height;\n                            break;\n                        }\n                    } else {\n                        if (start === -1) {\n                            start = row;\n                        }\n                        break;\n                    }\n                }\n            }\n            ctx.restore();\n            console.log(end - start);\n            return end - start;\n        };\n        self.parseFont = function (key) {\n            if (/Font/.test(key)) {\n                self.style[key + 'Height'] = self.getFontHeight(self.style[key]);\n            }\n        };\n        self.init = function () {\n            var publicStyleKeyIntf = {};\n            self.setAttributes();\n            self.setStyle();\n            self.initScrollBox();\n            self.setDom();\n            Object.keys(self.style).forEach(self.parseFont);\n            self.intf.type = 'canvas-datagrid';\n            self.intf.addEventListener = self.addEventListener;\n            self.intf.removeEventListener = self.removeEventListener;\n            self.intf.dispatchEvent = self.dispatchEvent;\n            self.intf.dispose = self.dispose;\n            self.intf.appendTo = self.appendTo;\n            self.intf.filters = self.filters;\n            self.intf.sorters = self.sorters;\n            self.intf.autosize = self.autosize;\n            self.intf.beginEditAt = self.beginEditAt;\n            self.intf.endEdit = self.endEdit;\n            self.intf.setActiveCell = self.setActiveCell;\n            self.intf.scrollIntoView = self.scrollIntoView;\n            self.intf.clearChangeLog = self.clearChangeLog;\n            self.intf.gotoCell = self.gotoCell;\n            self.intf.gotoRow = self.gotoRow;\n            self.intf.findColumnScrollLeft = self.findColumnScrollLeft;\n            self.intf.findRowScrollTop = self.findRowScrollTop;\n            self.intf.fitColumnToValues = self.fitColumnToValues;\n            self.intf.findColumnMaxTextLength = self.findColumnMaxTextLength;\n            self.intf.disposeContextMenu = self.disposeContextMenu;\n            self.intf.getCellAt = self.getCellAt;\n            self.intf.isCellVisible = self.isCellVisible;\n            self.intf.order = self.order;\n            self.intf.draw = self.draw;\n            self.intf.selectArea = self.selectArea;\n            self.intf.clipElement = self.clipElement;\n            self.intf.getSchemaFromData = self.getSchemaFromData;\n            self.intf.setFilter = self.setFilter;\n            self.intf.selectRow = self.selectRow;\n            self.intf.parentGrid = self.parentGrid;\n            self.intf.toggleTree = self.toggleTree;\n            self.intf.expandTree = self.expandTree;\n            self.intf.collapseTree = self.collapseTree;\n            self.intf.canvas = self.canvas;\n            self.intf.context = self.ctx;\n            self.intf.insertRow = self.insertRow;\n            self.intf.deleteRow = self.deleteRow;\n            self.intf.addRow = self.addRow;\n            self.intf.insertColumn = self.insertColumn;\n            self.intf.deleteColumn = self.deleteColumn;\n            self.intf.addColumn = self.addColumn;\n            self.intf.getClippingRect = self.getClippingRect;\n            self.intf.setRowHeight = self.setRowHeight;\n            self.intf.setColumnWidth = self.setColumnWidth;\n            self.intf.resetColumnWidths = self.resetColumnWidths;\n            self.intf.resetRowHeights = self.resetRowHeights;\n            self.intf.resize = self.resize;\n            self.intf.drawChildGrids = self.drawChildGrids;\n            self.intf.style = {};\n            Object.keys(self.style).forEach(function (key) {\n                // unless this line is here, Object.keys() will not work on <instance>.style\n                publicStyleKeyIntf[key] = undefined;\n                Object.defineProperty(publicStyleKeyIntf, key, {\n                    get: function () {\n                        return self.style[key];\n                    },\n                    set: function (value) {\n                        self.parseFont(value);\n                        self.style[key] = value;\n                        self.draw(true);\n                        self.dispatchEvent('stylechanged', {name: key, value: value});\n                    }\n                });\n            });\n            Object.defineProperty(self.intf, 'style', {\n                get: function () {\n                    return publicStyleKeyIntf;\n                },\n                set: function (value) {\n                    Object.keys(value).forEach(function (key) {\n                        self.parseFont(value);\n                        self.style[key] = value[key];\n                    });\n                    self.draw(true);\n                    self.dispatchEvent('stylechanged', {name: 'style', value: value});\n                }\n            });\n            Object.keys(self.attributes).forEach(function (key) {\n                Object.defineProperty(self.intf.attributes, key, {\n                    get: function () {\n                        return self.attributes[key];\n                    },\n                    set: function (value) {\n                        self.attributes[key] = value;\n                        self.draw(true);\n                        self.dispatchEvent('attributechanged', {name: key, value: value[key]});\n                    }\n                });\n            });\n            self.filters.string = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                var filterRegExp;\n                self.invalidFilterRegEx = undefined;\n                try {\n                    filterRegExp = new RegExp(filterFor, 'ig');\n                } catch (e) {\n                    self.invalidFilterRegEx = e;\n                    return;\n                }\n                return filterRegExp.test(value);\n            };\n            self.filters.number = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                return value === filterFor;\n            };\n            if (self.attributes.name && self.attributes.saveAppearance) {\n                self.storedSettings = localStorage.getItem(self.storageName + '-' + self.attributes.name);\n                if (self.storedSettings) {\n                    try {\n                        self.storedSettings = JSON.parse(self.storedSettings);\n                    } catch (e) {\n                        console.warn('could not read settings from localStore', e);\n                        self.storedSettings = undefined;\n                    }\n                }\n                if (self.storedSettings) {\n                    if (typeof self.storedSettings.sizes === 'object') {\n                        self.sizes.rows = self.storedSettings.sizes.rows;\n                        self.sizes.columns = self.storedSettings.sizes.columns;\n                        ['trees', 'columns', 'rows'].forEach(function (i) {\n                            if (!self.sizes[i]) {\n                                self.sizes[i] = {};\n                            }\n                        });\n                    }\n                }\n            }\n            if (args.data) {\n                self.intf.data = args.data;\n            }\n            if (args.schema) {\n                self.intf.schema = args.schema;\n            }\n            if (!self.data) {\n                self.intf.data = [];\n            }\n            self.resize(true);\n        };\n        modules.forEach(function (module) {\n            module(self);\n        });\n        self.init();\n        return self.intf;\n    }\n    if (window && !window.canvasDatagrid) {\n        window.canvasDatagrid = grid;\n    }\n    return grid;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals XMLSerializer: false, define: true, Blob: false, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var perfCounters = [],\n            drawCount = 0,\n            perfWindowSize = 20;\n        self.htmlImageCache = {};\n        function drawOnAllImagesLoaded() {\n            var loaded = true;\n            Object.keys(self.htmlImageCache).forEach(function (html) {\n                if (!self.htmlImageCache[html].complete) {\n                    loaded = false;\n                }\n            });\n            if (loaded) {\n                self.draw();\n            }\n        }\n        function drawHtml(cell) {\n            var img,\n                v = cell.innerHTML || cell.formattedValue,\n                x = cell.x + self.canvasOffsetLeft,\n                y = cell.y + self.canvasOffsetTop;\n            if (self.htmlImageCache[v]) {\n                img = self.htmlImageCache[v];\n                if (img.height !== cell.height || img.width !== cell.width) {\n                    // height and width of the cell has changed, invalidate cache\n                    self.htmlImageCache[v] = undefined;\n                } else {\n                    if (!img.complete) {\n                        return;\n                    }\n                    return self.ctx.drawImage(img, x, y);\n                }\n            }\n            img = new Image(cell.width, cell.height);\n            self.htmlImageCache[v] = img;\n            img.onload = function () {\n                self.ctx.drawImage(img, x, y);\n                drawOnAllImagesLoaded();\n            };\n            img.src = 'data:image/svg+xml;base64,' + btoa(\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + cell.width + '\" height=\"' + cell.height + '\">\\n' +\n                    '<foreignObject class=\"node\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\\n' +\n                    '<body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;padding:0;\">\\n' +\n                    v + '\\n' +\n                    '</body>' +\n                    '</foreignObject>\\n' +\n                    '</svg>\\n'\n            );\n        }\n        function drawOrderByArrow(x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.headerOrderByArrowColor;\n            self.ctx.strokeStyle = self.style.headerOrderByArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + self.style.headerOrderByArrowMarginLeft;\n            y = y + self.style.headerOrderByArrowMarginTop;\n            if (self.orderDirection === 'asc') {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + self.style.headerOrderByArrowWidth, y);\n                self.ctx.lineTo(x + (self.style.headerOrderByArrowWidth * 0.5), y + self.style.headerOrderByArrowHeight);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y + self.style.headerOrderByArrowHeight);\n                self.ctx.lineTo(x + self.style.headerOrderByArrowWidth, y + self.style.headerOrderByArrowHeight);\n                self.ctx.lineTo(x + (self.style.headerOrderByArrowWidth * 0.5), y);\n                self.ctx.lineTo(x, y + self.style.headerOrderByArrowHeight);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return self.style.headerOrderByArrowMarginLeft\n                + self.style.headerOrderByArrowWidth\n                + self.style.headerOrderByArrowMarginRight;\n        }\n        function drawTreeArrow(cell, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.treeArrowColor;\n            self.ctx.strokeStyle = self.style.treeArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + self.style.treeArrowMarginLeft;\n            y = y + self.style.treeArrowMarginTop;\n            if (self.openChildren[cell.data[self.uniqueId]]) {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + self.style.treeArrowWidth, y);\n                self.ctx.lineTo(x + (self.style.treeArrowWidth * 0.5), y + self.style.treeArrowHeight);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y);\n                self.ctx.lineTo(x + self.style.treeArrowHeight, y + (self.style.treeArrowWidth * 0.5));\n                self.ctx.lineTo(x, y + self.style.treeArrowWidth);\n                self.ctx.lineTo(x, y);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return self.style.treeArrowMarginLeft\n                + self.style.treeArrowWidth\n                + self.style.treeArrowMarginRight;\n        }\n        function radiusRect(x, y, w, h, radius) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            var r = x + w, b = y + h;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x + radius, y);\n            self.ctx.lineTo(r - radius, y);\n            self.ctx.quadraticCurveTo(r, y, r, y + radius);\n            self.ctx.lineTo(r, y + h - radius);\n            self.ctx.quadraticCurveTo(r, b, r - radius, b);\n            self.ctx.lineTo(x + radius, b);\n            self.ctx.quadraticCurveTo(x, b, x, b - radius);\n            self.ctx.lineTo(x, y + radius);\n            self.ctx.quadraticCurveTo(x, y, x + radius, y);\n        }\n        function fillRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillRect(x, y, w, h);\n        }\n        function strokeRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.strokeRect(x, y, w, h);\n        }\n        function fillText(text, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillText(text, x, y);\n        }\n        function addBorderLine(c, pos) {\n            self.ctx.beginPath();\n            var p = {\n                t: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                },\n                r: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                b: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                l: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                },\n            };\n            p[pos]();\n            self.ctx.stroke();\n        }\n        function addEllipsis(text, width) {\n            var o, i, c, w = 0;\n            if (self.ellipsisCache[text] && self.ellipsisCache[text][width]) {\n                return self.ellipsisCache[text][width];\n            }\n            w = self.ctx.measureText(text).width;\n            if (w < width) {\n                o = text;\n            } else {\n                o = text.substring(0, 1);\n                i = 1;\n                // wow! a do while!  and I didn't intend to use one here\n                do {\n                    i += 1;\n                    o = text.substring(0, i) + '...';\n                    w = self.ctx.measureText(o).width;\n                } while (width > w);\n            }\n            self.ellipsisCache[text] = self.ellipsisCache[text] || {};\n            c = {value: o, width: w};\n            self.ellipsisCache[text][width] = c;\n            return c;\n        }\n        function drawText(cell) {\n            var paddingLeft = self.style[cell.style + 'PaddingLeft'],\n                paddingTop = self.style[cell.style + 'PaddingTop'],\n                paddingRight = self.style[cell.style + 'PaddingRight'],\n                paddingBottom = self.style[cell.style + 'PaddingBottom'],\n                vPos = paddingTop + cell.height - (cell.height * 0.5),\n                hPos = paddingLeft + cell.treeArrowWidth + cell.orderByArrowWidth;\n            cell.text = addEllipsis(cell.formattedValue, cell.width - paddingRight - paddingLeft);\n            cell.text.height = cell.fontHeight;\n            if (cell.horizontalAlignment === 'right') {\n                hPos = cell.width - cell.text.width - paddingRight;\n            } else if (cell.horizontalAlignment === 'center') {\n                hPos = (cell.width / 2) - (cell.text.width / 2);\n            }\n            if (cell.verticalAlignment === 'top') {\n                vPos = paddingTop + cell.text.height;\n            } else if (cell.verticalAlignment === 'bottom') {\n                vPos = cell.height - paddingBottom - cell.text.height;\n            }\n            cell.text.x = cell.x + hPos;\n            cell.text.y = cell.y + vPos;\n            fillText(cell.text.value, cell.text.x, cell.text.y);\n        }\n        /**\n         * Redraws the grid. No matter what the change, this is the only method required to refresh everything.\n         * @memberof canvasDataGrid\n         * @name draw\n         * @method\n         */\n        self.draw = function (internal) {\n            if (!self.isChildGrid && (!self.height || !self.width)) {\n                return;\n            }\n            if (self.isChildGrid && internal) {\n                self.parentGrid.draw();\n                return;\n            }\n            if (self.intf.visible === false) {\n                return;\n            }\n            // initial values\n            var checkScrollHeight, borderWidth, rowHeaderCell, p, cx, cy, treeGrid, rowOpen,\n                rowHeight, cornerCell, y, x, c, h, w, s, r, rd, aCell,\n                selectionBorders = [],\n                rowHeaders = [],\n                l = self.data.length,\n                u = self.currentCell || {},\n                headerCellHeight = self.getHeaderCellHeight(),\n                headerCellWidth = self.getHeaderCellWidth(),\n                cellHeight = self.style.cellHeight;\n            drawCount += 1;\n            p = performance.now();\n            // if data length has changed, there is no way to know\n            if (self.data.length > self.orders.rows.length) {\n                self.createRowOrders();\n            }\n            function drawScrollBars() {\n                var v = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-bar'\n                    },\n                    n = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-bar'\n                    },\n                    vb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-box'\n                    },\n                    nb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-box'\n                    },\n                    co = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'scroll-box-corner'\n                    },\n                    m = (self.style.scrollBarBoxMargin * 2),\n                    d = self.style.scrollBarBoxMargin * 0.5;\n                self.ctx.strokeStyle = self.style.scrollBarBorderColor;\n                self.ctx.lineWidth = self.style.scrollBarBorderWidth;\n                // vertical\n                v.x += w - self.style.scrollBarWidth - self.style.scrollBarBorderWidth - d;\n                v.y += headerCellHeight;\n                v.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                v.height = h - headerCellHeight - self.style.scrollBarWidth - d - m;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(v.x, v.y, v.width, v.height + m);\n                strokeRect(v.x, v.y, v.width, v.height + m);\n                // vertical box\n                vb.x = v.x + self.style.scrollBarBoxMargin;\n                vb.y = headerCellHeight + self.style.scrollBarBoxMargin\n                    + ((v.height - self.scrollBox.scrollBoxHeight)\n                        * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight));\n                vb.width = self.style.scrollBarBoxWidth;\n                vb.height = self.scrollBox.scrollBoxHeight;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/vertical/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (vb.width < v.width) {\n                    radiusRect(vb.x, vb.y, vb.width, vb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                // horizontal\n                n.x += headerCellWidth;\n                n.y += h - self.style.scrollBarWidth - d;\n                n.width = w - self.style.scrollBarWidth - headerCellWidth - d - m;\n                n.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(n.x, n.y, n.width + m, n.height);\n                strokeRect(n.x, n.y, n.width + m, n.height);\n                // horizontal box\n                nb.y = n.y + self.style.scrollBarBoxMargin;\n                nb.x = headerCellWidth + self.style.scrollBarBoxMargin\n                    + ((n.width - self.scrollBox.scrollBoxWidth)\n                        * (self.scrollBox.scrollLeft / self.scrollBox.scrollWidth));\n                nb.width = self.scrollBox.scrollBoxWidth;\n                nb.height = self.style.scrollBarBoxWidth;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/horizontal/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (nb.width < n.width) {\n                    radiusRect(nb.x, nb.y, nb.width, nb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                //corner\n                self.ctx.strokeStyle = self.style.scrollBarCornerBorderColor;\n                self.ctx.fillStyle = self.style.scrollBarCornerBackgroundColor;\n                co.x = n.x + n.width + m;\n                co.y = v.y + v.height + m;\n                co.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                co.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                radiusRect(co.x, co.y, co.width, co.height, 0);\n                self.ctx.stroke();\n                self.ctx.fill();\n                self.visibleCells.unshift(v);\n                self.visibleCells.unshift(vb);\n                self.visibleCells.unshift(n);\n                self.visibleCells.unshift(nb);\n                self.visibleCells.unshift(co);\n                self.scrollBox.bar = {\n                    v: v,\n                    h: n\n                };\n                self.scrollBox.box = {\n                    v: vb,\n                    h: nb\n                };\n            }\n            function drawCell(d, rowIndex, rowOrderIndex) {\n                return function drawEach(header, headerIndex, columnOrderIndex) {\n                    var cellStyle = header.style || 'cell',\n                        childGridAttributes,\n                        cell,\n                        isHeader = /headerCell/.test(cellStyle),\n                        isCorner = /cornerCell/.test(cellStyle),\n                        isRowHeader = 'rowHeaderCell' === cellStyle,\n                        selected = self.selections[rowOrderIndex] && self.selections[rowOrderIndex].indexOf(columnOrderIndex) !== -1,\n                        hovered = self.hovers[d[self.uniqueId]] && self.hovers[d[self.uniqueId]].indexOf(columnOrderIndex) !== -1,\n                        active = self.activeCell.rowIndex === rowOrderIndex && self.activeCell.columnIndex === columnOrderIndex,\n                        isGrid = Array.isArray(d[header.name]),\n                        activeHeader = (self.orders.rows[self.activeCell.rowIndex] === rowOrderIndex\n                                || self.orders.columns[self.activeCell.columnIndex] === columnOrderIndex)\n                            && (columnOrderIndex === -1 || rowOrderIndex === -1)\n                            ? (isRowHeader ? 'activeRowHeaderCell' : 'activeHeaderCell') : false,\n                        val,\n                        f = self.formatters[header.type || 'string'],\n                        orderByArrowSize = 0,\n                        treeArrowSize = 0,\n                        cellWidth = self.sizes.columns[isRowHeader ? 'cornerCell' : header[self.uniqueId]] || header.width,\n                        ev = {\n                            value: d[header.name],\n                            row: d,\n                            header: header\n                        };\n                    if (cellStyle === 'headerCellCap') {\n                        cellWidth = w - x;\n                    }\n                    // if no data or schema are defined, a width is provided to the stub column\n                    if (cellWidth === undefined) {\n                        cellWidth = self.style.columnWidth;\n                    }\n                    if (x + cellWidth + borderWidth < 0) {\n                        x += cellWidth + borderWidth;\n                    }\n                    if (active) {\n                        cellStyle = 'activeCell';\n                    }\n                    if (self.visibleRows.indexOf(rowIndex) === -1 && !isHeader) {\n                        self.visibleRows.push(rowIndex);\n                    }\n                    val = self.dispatchEvent('formatcellvalue', ev);\n                    if (!self.dispatchEvent('beforerendercell', ev)) {\n                        cx = x;\n                        cy = y;\n                        if (cellStyle === 'cornerCell') {\n                            cx = 0;\n                            cy = 0;\n                        } else if (isRowHeader) {\n                            cx = 0;\n                        } else if (isHeader) {\n                            cy = 0;\n                        }\n                        cell = {\n                            type: isGrid ? 'canvas-datagrid-cell' : header.type,\n                            style: cellStyle,\n                            nodeType: 'canvas-datagrid-cell',\n                            x: cx,\n                            y: cy,\n                            horizontalAlignment: self.style[cellStyle + 'HorizontalAlignment'],\n                            verticalAlignment: self.style[cellStyle + 'VerticalAlignment'],\n                            offsetTop: self.canvasOffsetTop,\n                            offsetLeft: self.canvasOffsetLeft,\n                            scrollTop: self.scrollBox.scrollTop,\n                            scrollLeft: self.scrollBox.scrollLeft,\n                            active: active || activeHeader,\n                            hovered: hovered,\n                            selected: selected,\n                            width: cellWidth,\n                            height: cellHeight,\n                            offsetWidth: cellWidth,\n                            offsetHeight: cellHeight,\n                            parentNode: self.intf.parentNode,\n                            offsetParent: self.intf.parentNode,\n                            data: d,\n                            isCorner: isCorner,\n                            isHeader: isHeader,\n                            isRowHeader: isRowHeader,\n                            rowOpen: rowOpen,\n                            header: header,\n                            columnIndex: columnOrderIndex,\n                            rowIndex: rowOrderIndex,\n                            sortColumnIndex: headerIndex,\n                            sortRowIndex: rowIndex,\n                            isGrid: isGrid,\n                            gridId: (self.attributes.name || '') + d[self.uniqueId] + ':' + header[self.uniqueId].name,\n                            parentGrid: self.intf,\n                            innerHTML: '',\n                            activeHeader: activeHeader,\n                            value: isHeader\n                                ? (header.title || header.name) : d[header.name]\n                        };\n                        ev.cell = cell;\n                        cell.userHeight = cell.isHeader ? self.sizes.rows[-1] : rowHeight;\n                        cell.userWidth = cell.isHeader ? self.sizes.columns.cornerCell : self.sizes.columns[header[self.uniqueId]];\n                        cell[self.uniqueId] = d[self.uniqueId];\n                        self.visibleCells.unshift(cell);\n                        self.ctx.fillStyle = self.style[cellStyle + 'BackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'BorderColor'];\n                        self.ctx.lineWidth = self.style[cellStyle + 'BorderWidth'];\n                        if (hovered) {\n                            self.ctx.fillStyle = self.style[cellStyle + 'HoverBackgroundColor'];\n                            self.ctx.strokeStyle = self.style[cellStyle + 'HoverBorderColor'];\n                        }\n                        if (selected) {\n                            self.ctx.fillStyle = self.style[cellStyle + 'SelectedBackgroundColor'];\n                            self.ctx.strokeStyle = self.style[cellStyle + 'SelectedBorderColor'];\n                        }\n                        if (activeHeader) {\n                            self.ctx.fillStyle = self.style[activeHeader + 'BackgroundColor'];\n                        }\n                        self.dispatchEvent('rendercell', ev);\n                        if (cell.isGrid) {\n                            if (cell.height !== rowHeight) {\n                                cell.height = rowHeight || self.style.cellHeightWithChildGrid;\n                                checkScrollHeight = true;\n                            }\n                            cell.width = self.sizes.columns[header[self.uniqueId]] || self.style.cellWidthWithChildGrid;\n                        }\n                        if (rowOpen && !cell.isRowHeader) {\n                            cell.height = self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight;\n                        }\n                        if (!cell.isGrid) {\n                            fillRect(cx, cy, cell.width, cell.height);\n                            strokeRect(cx, cy, cell.width, cell.height);\n                        }\n                        self.ctx.save();\n                        radiusRect(cell.x, cell.y, cell.width, cell.height, 0);\n                        self.ctx.clip();\n                        self.dispatchEvent('afterrendercell', ev);\n                        if (cell.height !== cellHeight && !(rowOpen && !cell.isRowHeader)) {\n                            self.sizes.rows[isHeader ? -1 : d[self.uniqueId]] = cell.height;\n                            checkScrollHeight = true;\n                        }\n                        if (cell.width !== cellWidth) {\n                            self.sizes.columns[header[self.uniqueId]] = cell.width;\n                            checkScrollHeight = true;\n                        }\n                        if (isRowHeader && self.attributes.tree) {\n                            if (!self.dispatchEvent('rendertreearrow', ev)) {\n                                treeArrowSize = drawTreeArrow(cell, self.style[cellStyle + 'PaddingLeft'], cy, 0);\n                            }\n                        }\n                        if ((self.attributes.showRowNumbers && isRowHeader)\n                                || !isRowHeader) {\n                            if (cell.isGrid) {\n                                if (!self.childGrids[cell.gridId]) {\n                                    childGridAttributes = self.args.childGridAttributes || self.args;\n                                    childGridAttributes.name = self.attributes.saveAppearance ? cell.gridId : undefined;\n                                    childGridAttributes.parentNode = cell;\n                                    childGridAttributes.data = d[header.name];\n                                    self.childGrids[cell.gridId] = self.createGrid(childGridAttributes);\n                                    checkScrollHeight = true;\n                                }\n                                cell.grid = self.childGrids[cell.gridId];\n                                cell.grid.parentNode = cell;\n                                cell.grid.visible = true;\n                                cell.grid.draw();\n                                self.dispatchEvent('rendercellgrid', ev);\n                            } else {\n                                if (self.childGrids[cell.gridId]) {\n                                    self.childGrids[cell.gridId].parentNode.offsetHeight = 0;\n                                }\n                                if (isHeader && self.orderBy === header.name) {\n                                    if (!self.dispatchEvent('renderorderbyarrow', ev)) {\n                                        orderByArrowSize = drawOrderByArrow(cx + self.style[cellStyle + 'PaddingLeft'], 0);\n                                    }\n                                }\n                                self.ctx.fillStyle = self.style[cellStyle + 'Color'];\n                                if (hovered) {\n                                    self.ctx.fillStyle = self.style[cellStyle + 'HoverColor'];\n                                }\n                                if (selected) {\n                                    self.ctx.fillStyle = self.style[cellStyle + 'SelectedColor'];\n                                }\n                                if (activeHeader) {\n                                    self.ctx.fillStyle = self.style[activeHeader + 'Color'];\n                                }\n                                self.ctx.font = self.style[cellStyle + 'Font'];\n                                cell.fontHeight = self.style[cellStyle + 'FontHeight'];\n                                cell.treeArrowWidth = treeArrowSize;\n                                cell.orderByArrowWidth = orderByArrowSize;\n                                val = val !== undefined ? val : f\n                                    ? f(self.ctx, cell) : '';\n                                if (val === undefined && !f) {\n                                    val = '';\n                                    console.warn('canvas-datagrid: Unknown format '\n                                        + header.type + ' add a cellFormater');\n                                }\n                                cell.formattedValue = ((val !== undefined && val !== null) ? val : '').toString();\n                                if (self.columnFilters && self.columnFilters[val] !== undefined && isHeader) {\n                                    cell.formattedValue = self.attributes.filterTextPrefix + val;\n                                }\n                                if (!self.dispatchEvent('rendertext', ev)) {\n                                    if (cell.innerHTML || header.type === 'html') {\n                                        drawHtml(cell);\n                                    } else {\n                                        drawText(cell);\n                                    }\n                                }\n                            }\n                        }\n                        if (active) {\n                            aCell = cell;\n                        }\n                        if (selected && !isRowHeader) {\n                            if ((!self.selections[cell.rowIndex - 1]\n                                    || self.selections[cell.rowIndex - 1].indexOf(cell.columnIndex) === -1\n                                    || cell.rowIndex === 0)\n                                    && !cell.isHeader) {\n                                selectionBorders.push([cell, 't']);\n                            }\n                            if (!self.selections[cell.rowIndex + 1]\n                                    || self.selections[cell.rowIndex + 1].indexOf(cell.columnIndex) === -1) {\n                                selectionBorders.push([cell, 'b']);\n                            }\n                            if (!self.selections[cell.rowIndex] || cell.columnIndex === 0\n                                    || self.selections[cell.rowIndex].indexOf(cell.columnIndex - 1) === -1) {\n                                selectionBorders.push([cell, 'l']);\n                            }\n                        } else if (self.selections[cell.rowIndex]\n                                && self.selections[cell.rowIndex].indexOf(cell.columnIndex - 1) !== -1) {\n                            selectionBorders.push([cell, 'l']);\n                        }\n                        self.ctx.restore();\n                        x += cell.width + borderWidth;\n                        return cell.width;\n                    }\n                };\n            }\n            function drawRowHeader(rowData, index, rowOrderIndex) {\n                var a;\n                if (self.attributes.showRowHeaders) {\n                    x = 0;\n                    rowHeaderCell = {'rowHeaderCell': index + 1 };\n                    rowHeaderCell[self.uniqueId] = rowData[self.uniqueId];\n                    a = {\n                        name: 'rowHeaderCell',\n                        width: self.style.headerRowWidth,\n                        style: 'rowHeaderCell',\n                        type: 'string',\n                        data: rowData[self.uniqueId],\n                        index: -1\n                    };\n                    a[self.uniqueId] = rowData[self.uniqueId];\n                    rowOpen = self.openChildren[rowData[self.uniqueId]];\n                    drawCell(rowHeaderCell, index, rowOrderIndex)(a, -1, -1);\n                }\n            }\n            function drawHeaders() {\n                var d, g = s.length, i, o, headerCell, header;\n                rowHeaders.forEach(function (rArgs) {\n                    y = rArgs[3];\n                    cellHeight = rArgs[4];\n                    drawRowHeader(rArgs[0], rArgs[1], rArgs[2]);\n                });\n                if (self.attributes.showColumnHeaders) {\n                    x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft;\n                    if (self.attributes.showRowHeaders) {\n                        x += headerCellWidth;\n                    }\n                    y = 0;\n                    // cell height might have changed during drawing\n                    cellHeight = self.getHeaderCellHeight();\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        header = s[i];\n                        d = {\n                            title: header.title,\n                            name: header.name,\n                            width: header.width,\n                            style: 'headerCell',\n                            type: 'string',\n                            index: o,\n                            order: i\n                        };\n                        headerCell = {'headerCell': header.title || header.name};\n                        headerCell[self.uniqueId] = 'h' + header[self.uniqueId];\n                        d[self.uniqueId] = header[self.uniqueId];\n                        x += drawCell(headerCell, -1, -1)(d, o, i);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    // fill in the space right of the headers\n                    if (x < w) {\n                        c = {\n                            name: '',\n                            width: self.style.scrollBarWidth,\n                            style: 'headerCellCap',\n                            type: 'string',\n                            index: s.length\n                        };\n                        c[self.uniqueId] = 'headerCell';\n                        drawCell({endCap: ''}, -1, -1)(c, -1, -1);\n                    }\n                    // fill in the space left of the headers\n                    if (self.attributes.showRowHeaders) {\n                        cornerCell = {'cornerCell': '' };\n                        cornerCell[self.uniqueId] = 'cornerCell';\n                        x = 0;\n                        c = {\n                            name: 'cornerCell',\n                            width: self.style.headerRowWidth,\n                            style: 'cornerCell',\n                            type: 'string',\n                            index: -1\n                        };\n                        c[self.uniqueId] = 'cornerCell';\n                        drawCell(cornerCell, -1, -1)(c, -1, -1);\n                    }\n                }\n            }\n            function drawRow(r, d) {\n                var i, treeHeight, rowSansTreeHeight, o, g = s.length;\n                if (y - (cellHeight * 2) > h) {\n                    return false;\n                }\n                rd = self.data[r];\n                rowOpen = self.openChildren[rd[self.uniqueId]];\n                rowSansTreeHeight = self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight;\n                treeHeight = (rowOpen ? self.sizes.trees[rd[self.uniqueId]] : 0);\n                rowHeight = rowSansTreeHeight + treeHeight;\n                if (y < rowHeight * -1) {\n                    return false;\n                }\n                if (self.attributes.showRowHeaders) {\n                    x += headerCellWidth;\n                }\n                cellHeight = rowHeight;\n                for (o = self.scrollIndexLeft; o < g; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        break;\n                    }\n                }\n                // cell height might have changed during drawing\n                cellHeight = rowHeight;\n                x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft;\n                // don't draw a tree for the new row\n                treeGrid = self.childGrids[rd[self.uniqueId]];\n                if (r !== self.data.length && rowOpen) {\n                    treeGrid.visible = true;\n                    treeGrid.parentNode = {\n                        offsetTop: y + rowSansTreeHeight + self.canvasOffsetTop,\n                        offsetLeft: headerCellWidth - 1 + self.canvasOffsetLeft,\n                        offsetHeight: treeHeight,\n                        offsetWidth: self.width - headerCellWidth - self.style.scrollBarWidth - 1,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: self.style,\n                        nodeType: 'canvas-datagrid-tree',\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        rowIndex: r\n                    };\n                    self.visibleCells.unshift({\n                        rowIndex: x,\n                        columnIndex: 0,\n                        y: treeGrid.parentNode.offsetTop,\n                        x: treeGrid.parentNode.offsetLeft,\n                        height: treeGrid.parentNode.offsetHeight,\n                        width: treeGrid.parentNode.offsetWidth,\n                        style: 'tree-grid',\n                        type: treeGrid.parentNode.nodeType\n                    });\n                    treeGrid.draw();\n                } else if (treeGrid) {\n                    treeGrid.parentNode.offsetHeight = 0;\n                    delete self.sizes.trees[rd[self.uniqueId]];\n                }\n                rowHeaders.push([rd, r, d, y, rowHeight]);\n                y += cellHeight + borderWidth;\n                return true;\n            }\n            function initDraw() {\n                borderWidth = self.style.cellBorderWidth;\n                self.visibleRows = [];\n                s = self.getVisibleSchema();\n                self.visibleCells = [];\n                self.canvasOffsetTop = self.isChildGrid ? self.parentNode.offsetTop : 0;\n                self.canvasOffsetLeft = self.isChildGrid ? self.parentNode.offsetLeft : 0;\n                h = self.height;\n                w = self.width;\n                if (!self.isChildGrid) {\n                    self.ctx.scale(window.devicePixelRatio, window.devicePixelRatio);\n                }\n            }\n            function drawBackground() {\n                radiusRect(0, 0, w, h, 0);\n                self.ctx.clip();\n                self.ctx.fillStyle = self.style.backgroundColor;\n                fillRect(0, 0, w, h);\n            }\n            function drawRows() {\n                var o, n, i, g = s.length;\n                x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft;\n                y = (self.scrollBox.scrollTop * -1) + headerCellHeight + self.scrollPixelTop;\n                for (r = self.scrollIndexTop; r < l; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.showNewRow) {\n                    if (self.attributes.showRowHeaders) {\n                        x += headerCellWidth;\n                    }\n                    rowHeight = cellHeight = self.style.cellHeight;\n                    rowOpen = false;\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        x += drawCell(self.newRow, self.data.length, self.data.length)(s[i], i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    rowHeaders.push([self.newRow, self.data.length, self.data.length, y, rowHeight]);\n                }\n            }\n            function drawReorderMarkers() {\n                if (!self.reorderObject) { return; }\n                var b = {\n                        height: self.reorderObject.height,\n                        width: self.reorderObject.width,\n                        x: self.reorderObject.x + self.reorderObject.dragOffset.x,\n                        y: self.reorderObject.y + self.reorderObject.dragOffset.y\n                    },\n                    m = {\n                        width: w,\n                        heigth: h,\n                        x: 0,\n                        y: 0\n                    };\n                self.ctx.fillStyle = self.style.reorderMarkerBackgroundColor;\n                self.ctx.lineWidth = self.style.reorderMarkerBorderWidth;\n                self.ctx.strokeStyle = self.style.reorderMarkerBorderColor;\n                if (self.dragMode === 'row-reorder') {\n                    b.width = w;\n                    b.x = 0;\n                    m.width = w;\n                    m.y = self.currentCell.y;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.rowIndex !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex - 1 !== self.reorderObject.rowIndex) {\n                        addBorderLine(m, 't');\n                    }\n                } else if (self.dragMode === 'column-reorder' && self.reorderObject) {\n                    b.height = h;\n                    b.y = 0;\n                    m.height = h;\n                    m.x = self.currentCell.x;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.columnIndex !== self.reorderObject.columnIndex\n                            && self.currentCell.columnIndex - 1 !== self.reorderObject.columnIndex) {\n                        addBorderLine(m, 'l');\n                    }\n                }\n            }\n            function drawBorder() {\n                self.ctx.lineWidth = self.style.gridBorderWidth;\n                self.ctx.strokeStyle = self.style.gridBorderColor;\n                strokeRect(0, 0, self.width, self.height);\n            }\n            function drawSelectionBorders() {\n                self.ctx.lineWidth = self.style.selectionOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.selectionOverlayBorderColor;\n                selectionBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n            }\n            function drawActiveCell() {\n                if (!aCell) { return; }\n                if (self.attributes.rowSelectionMode) {\n                    if (self.activeCell && self.activeCell.rowIndex === aCell.rowIndex) {\n                        self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                        self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                        strokeRect(0, aCell.y, self.getHeaderWidth() + headerCellWidth, rowHeight);\n                    }\n                } else {\n                    self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                    self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                    strokeRect(aCell.x, aCell.y, aCell.width, aCell.height);\n                }\n\n            }\n            function drawDebug() {\n                perfCounters[drawCount % perfWindowSize] = performance.now() - p;\n                var d;\n                if (self.attributes.debug) {\n                    self.ctx.font = '11px sans-serif';\n                    d = {};\n                    d.perf = (perfCounters.reduce(function (a, b) {\n                        return a + b;\n                    }, 0) / perfCounters.length).toFixed(1)\n                        + 'ms (' +\n                        perfCounters.map(function (a) { return a.toFixed(1); }).join(', ') + ')';\n                    d.htmlImages = Object.keys(self.htmlImageCache).length;\n                    d.scrollLeft = self.scrollBox.scrollLeft;\n                    d.scrollTop = self.scrollBox.scrollTop;\n                    d.scrollIndexTop = self.scrollIndexTop;\n                    d.scrollPixelTop = self.scrollPixelTop;\n                    d.scrollIndexLeft = self.scrollIndexLeft;\n                    d.scrollPixelLeft = self.scrollPixelLeft;\n                    d.canvasOffsetLeft = self.canvasOffsetLeft;\n                    d.canvasOffsetTop = self.canvasOffsetTop;\n                    d.width = self.width;\n                    d.height = self.height;\n                    d.mousex = self.mouse.x;\n                    d.mousey = self.mouse.y;\n                    d.touchx = !self.touchStart ? 0 : self.touchStart.x;\n                    d.touchy = !self.touchStart ? 0 : self.touchStart.y;\n                    d.entities = self.visibleCells.length;\n                    d.hasFocus = self.hasFocus;\n                    d.dragMode = self.dragMode;\n                    if (self.currentCell) {\n                        d.columnIndex = self.currentCell.columnIndex;\n                        d.rowIndex = self.currentCell.rowIndex;\n                        d.sortColumnIndex = self.currentCell.sortColumnIndex;\n                        d.sortRowIndex = self.currentCell.sortRowIndex;\n                        d.context = self.currentCell.context;\n                        d.dragContext = self.currentCell.dragContext;\n                        d.style = self.currentCell.style;\n                        d.type = self.currentCell.type;\n                    }\n                    self.ctx.save();\n                    Object.keys(d).forEach(function (key, index) {\n                        var m = key + ': ' + d[key],\n                            lh = 14;\n                        self.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n                        fillRect(headerCellWidth, lh + (index * lh), 100, lh);\n                        self.ctx.fillStyle = 'rgba(0, 0, 0, 1)';\n                        fillText(m, headerCellWidth + 1, headerCellHeight + (index * lh));\n                    });\n                    self.ctx.restore();\n                }\n            }\n            self.ctx.save();\n            initDraw();\n            drawBackground();\n            drawRows();\n            drawSelectionBorders();\n            drawHeaders();\n            drawActiveCell();\n            drawReorderMarkers();\n            drawScrollBars();\n            if (checkScrollHeight) {\n                self.resize(true);\n            }\n            drawBorder();\n            drawDebug();\n            self.ctx.restore();\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var touchDelta = {x: 0, y: 0, scrollTop: 0, scrollLeft: 0},\n            touchAnimateTo = {scrollLeft: 0, scrollTop: 0},\n            touchSigma = {scrollLeft: 0, scrollTop: 0},\n            xPPS = 0,\n            yPPS = 0,\n            touchingCell = false,\n            startingCell = false,\n            animationFrames = 0;\n        self.getTouchPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.touches[0].clientX - rect.left,\n                    y: e.touches[0].clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        self.calculatePPS = function () {\n            xPPS = ((touchDelta.scrollLeft - touchSigma.scrollLeft) / (touchDelta.t - touchSigma.t));\n            yPPS = ((touchDelta.scrollTop - touchSigma.scrollTop) / (touchDelta.t - touchSigma.t));\n            touchSigma = {\n                scrollLeft: touchDelta.scrollLeft,\n                scrollTop: touchDelta.scrollTop,\n                t: performance.now() / 1000\n            };\n        };\n        self.touchCell = function (e) {\n            return function () {\n                clearInterval(self.touchCalcTimeout);\n                var pos = self.getTouchPos(e);\n                if (Math.abs(touchDelta.x) + Math.abs(touchDelta.y) < self.attributes.touchDeadZone) {\n                    touchingCell = self.getCellAt(pos.x, pos.y);\n                    self.mousemove(e, pos);\n                    self.mousedown(e, pos);\n                    self.mousemove(e, pos);\n                    self.draw();\n                }\n            };\n        };\n        self.touchstart = function (e) {\n            touchingCell = false;\n            self.touchStart = self.getTouchPos(e);\n            startingCell = self.getCellAt(self.touchStart.x, self.touchStart.y, true);\n            if (self.dispatchEvent('touchstart', {NativeEvent: e, cell: self.startingCell})) { return; }\n            if (!self.hasFocus) { return; }\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (e.touches.length === 2) {\n                return self.contextmenu(e, self.touchStart);\n            }\n            self.touchScrollStart = {\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: performance.now() / 1000\n            };\n            touchDelta = {\n                x: self.touchStart.x,\n                y: self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: 0\n            };\n            self.touchmove(e);\n            clearTimeout(self.touchTimeout);\n            clearInterval(self.touchCalcTimeout);\n            self.touchTimeout = setTimeout(self.touchCell(e), self.attributes.touchSelectTimeMs);\n            self.touchCalcTimeout = setInterval(self.calculatePPS, 20);\n            self.touchHaltAnimation = true;\n            document.body.addEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.addEventListener('touchend', self.touchend, false);\n            document.body.addEventListener('touchcancel', self.touchcancel, false);\n        };\n        self.easing = function (t, b, c, d) {\n            return c * (t / d) * (2 - t) + b;\n        };\n        self.touchEndAnimation = function () {\n            if (!self.canvas || !self.scrollBox.scrollTo) { return requestAnimationFrame(self.touchEndAnimation); }\n            var x,\n                y,\n                n = performance.now() / 1000,\n                d = (self.attributes.touchReleaseAnimationDurationMs / 1000),\n                t;\n            touchDelta.t = touchDelta.t || n + d;\n            t = n - touchDelta.t + 1;\n            if (t > 1 || self.touchHaltAnimation || (animationFrames > 1000)) {\n                animationFrames = 0;\n                self.touchHaltAnimation = false;\n                touchAnimateTo = {scrollLeft: -1, scrollTop: -1};\n                return;\n            }\n            animationFrames += 1;\n            x = self.easing(t, touchDelta.scrollLeft, -touchAnimateTo.scrollLeft, d);\n            y = self.easing(t, touchDelta.scrollTop, -touchAnimateTo.scrollTop, d);\n            self.scrollBox.scrollTo(x, y);\n            requestAnimationFrame(self.touchEndAnimation);\n        };\n        self.touchend = function (e) {\n            if (self.dispatchEvent('touchend', {NativeEvent: e})) { return; }\n            var dz = Math.abs(touchDelta.x) + Math.abs(touchDelta.y) < self.attributes.touchDeadZone,\n                pos = {\n                    x: self.touchStart.x + touchDelta.x,\n                    y: self.touchStart.y + touchDelta.y\n                },\n                cell = self.getCellAt(pos.x, pos.y);\n            if (!self.hasFocus) { return; }\n            if (touchingCell) {\n                self.mouseup(e, self.touchStart);\n            } else if (dz) {\n                if (cell.active) {\n                    self.beginEditAt(cell.columnIndex, cell.rowIndex);\n                } else {\n                    self.mousedown(e, self.touchStart);\n                    self.mouseup(e, self.touchStart);\n                    self.click(e, self.touchStart);\n                }\n            }\n            touchingCell = false;\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n            clearTimeout(self.touchTimeout);\n            clearInterval(self.touchCalcTimeout);\n            self.calculatePPS();\n            touchAnimateTo.scrollLeft = xPPS * self.attributes.touchReleaseAcceleration;\n            touchAnimateTo.scrollTop = yPPS * self.attributes.touchReleaseAcceleration;\n            self.touchHaltAnimation = false;\n            if (animationFrames === 0 && !/-scroll-/.test(startingCell.style) && !dz) {\n                self.touchEndAnimation();\n            }\n        };\n        self.touchmove = function (e) {\n            var d = self.getTouchPos(e);\n            if (self.dispatchEvent('touchmove', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (!self.hasFocus) { return; }\n            touchDelta = {\n                x: d.x - self.touchStart.x,\n                y: d.y - self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: 0\n            };\n            if (/vertical-scroll-/.test(startingCell.style)) {\n                self.scrollBox.scrollTop = self.scrollBox.scrollHeight * (d.y / self.height);\n            } else if (/horizontal-scroll-/.test(startingCell.style)) {\n                self.scrollBox.scrollLeft = self.scrollBox.scrollWidth * (d.x / self.width);\n            } else if (touchingCell) {\n                self.mousemove(e, d);\n                self.draw();\n            } else {\n                if (animationFrames === 0) {\n                    self.scrollBox.scrollTo(self.touchScrollStart.scrollLeft - touchDelta.x,\n                        self.touchScrollStart.scrollTop - touchDelta.y);\n                }\n            }\n        };\n        self.touchcancel = function (e) {\n            if (self.dispatchEvent('touchcancel', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) { return; }\n            touchingCell = false;\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n            return;\n        };\n        self.stopPropagation = function (e) { e.stopPropagation(); };\n        self.addEventListener = function (ev, fn) {\n            self.events[ev] = self.events[ev] || [];\n            self.events[ev].unshift(fn);\n        };\n        self.removeEventListener = function (ev, fn) {\n            (self.events[ev] || []).forEach(function removeEachListener(sfn, idx) {\n                if (fn === sfn) {\n                    self.events[ev].splice(idx, 1);\n                }\n            });\n        };\n        self.dispatchEvent = function (ev, e) {\n            var defaultPrevented;\n            function preventDefault() {\n                defaultPrevented = true;\n            }\n            if (!self.events[ev]) { return; }\n            self.events[ev].forEach(function dispatchEachEvent(fn) {\n                e.ctx = self.ctx;\n                e.preventDefault = preventDefault;\n                fn.apply(self.intf, [e]);\n            });\n            return defaultPrevented;\n        };\n        self.resize = function (drawAfterResize) {\n            var cellBorder = self.style.cellBorderWidth * 2,\n                headerCellBorder =  self.style.headerCellBorderWidth * 2,\n                scrollHeight,\n                scrollWidth,\n                headerCellHeight = self.getHeaderCellHeight(),\n                headerCellWidth = self.getHeaderCellWidth(),\n                // TODO: What the hell are these numbers!?  They are probably some value in the style.\n                scrollDragPositionOffsetY = 30,\n                scrollDragPositionOffsetX = 15;\n            if (self.isChildGrid) {\n                self.height = self.parentNode.offsetHeight;\n                self.width = self.parentNode.offsetWidth;\n            } else {\n                self.height = self.parentDOMNode.offsetHeight - (self.style.scrollBarBoxMargin * 2);\n                self.width = self.parentDOMNode.offsetWidth - (self.style.scrollBarBoxMargin * 2);\n                self.parentNode = self.parentDOMNode;\n                self.canvas.height = self.height * window.devicePixelRatio;\n                self.canvas.width = self.width * window.devicePixelRatio;\n                self.canvas.style.height = self.height + 'px';\n                self.canvas.style.width = self.width + 'px';\n                self.canvasOffsetTop = 0;\n                self.canvasOffsetLeft = 0;\n            }\n            scrollHeight = self.data.reduce(function reduceData(accumulator, row) {\n                return accumulator\n                    + (self.sizes.rows[row[self.uniqueId]] || self.style.cellHeight)\n                    + (self.sizes.trees[row[self.uniqueId]] || 0)\n                    + cellBorder;\n            }, 0) || 0;\n            scrollWidth = self.getVisibleSchema().reduce(function reduceSchema(accumulator, column) {\n                if (column.hidden) { return accumulator; }\n                return accumulator + (self.sizes.columns[column[self.uniqueId]] || column.width || self.style.columnWidth) + cellBorder;\n            }, 0) || 0;\n            if (self.attributes.showNewRow) {\n                scrollHeight += self.style.cellHeight + cellBorder;\n            }\n            self.scrollBox.width = self.width - headerCellWidth;\n            self.scrollBox.height = self.height - headerCellHeight - headerCellBorder;\n            self.scrollBox.top = headerCellHeight + headerCellBorder;\n            self.scrollBox.left = headerCellWidth;\n            self.scrollBox.scrollHeight = scrollHeight + self.style.scrollBarWidth - self.scrollBox.height;\n            self.scrollBox.scrollWidth = scrollWidth + self.style.scrollBarWidth - self.scrollBox.width;\n            self.scrollBox.widthBoxRatio = ((self.scrollBox.width - scrollDragPositionOffsetX)\n                / (self.scrollBox.scrollWidth + self.scrollBox.width - scrollDragPositionOffsetX));\n            self.scrollBox.scrollBoxWidth = self.scrollBox.width\n                * self.scrollBox.widthBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.heightBoxRatio = ((self.scrollBox.height - scrollDragPositionOffsetY)\n                / (self.scrollBox.scrollHeight + (self.scrollBox.height - scrollDragPositionOffsetY)));\n            self.scrollBox.scrollBoxHeight = self.scrollBox.height\n                * self.scrollBox.heightBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.scrollBoxWidth = Math.max(self.scrollBox.scrollBoxWidth, self.style.scrollBarBoxMinSize);\n            self.scrollBox.scrollBoxHeight = Math.max(self.scrollBox.scrollBoxHeight, self.style.scrollBarBoxMinSize);\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            self.resizeEditInput();\n            if (drawAfterResize) {\n                self.draw(true);\n            }\n            self.dispatchEvent('resize', {});\n            return true;\n        };\n        self.resizeEditInput = function () {\n            if (self.input) {\n                var pos = self.canvas.getBoundingClientRect(),\n                    s = self.scrollOffset(self.canvas),\n                    bx2 = (self.style.cellBorderWidth * 2),\n                    cell = self.getVisibleCellByIndex(self.input.editCell.columnIndex, self.input.editCell.rowIndex)\n                        || {x: -100, y: -100, height: 0, width: 0};\n                self.input.style.left = pos.left + cell.x - self.style.cellBorderWidth + self.canvasOffsetLeft - s.left + 'px';\n                self.input.style.top = pos.top + cell.y - bx2 + self.canvasOffsetTop - s.top + 'px';\n                self.input.style.height = cell.height - bx2 - 1 + 'px';\n                self.input.style.width = cell.width - bx2 - self.style.cellPaddingLeft + 'px';\n                self.clipElement(self.input);\n            }\n        };\n        self.scroll = function (e) {\n            var s = self.getVisibleSchema(),\n                cellBorder = self.style.cellBorderWidth * 2;\n            self.scrollIndexTop = 0;\n            self.scrollPixelTop = 0;\n            self.scrollIndexLeft = 0;\n            self.scrollPixelLeft = 0;\n            while (self.scrollPixelTop < self.scrollBox.scrollTop && self.scrollIndexTop < self.data.length) {\n                self.scrollPixelTop +=\n                    (self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || self.style.cellHeight)\n                    + (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0)\n                    + cellBorder;\n                self.scrollIndexTop += 1;\n            }\n            while (self.scrollPixelLeft < self.scrollBox.scrollLeft && self.scrollIndexLeft < s.length) {\n                self.scrollPixelLeft +=\n                    (self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width);\n                self.scrollIndexLeft += 1;\n            }\n            if (self.data.length > 0) {\n                self.scrollIndexLeft = Math.max(self.scrollIndexLeft - 1, 0);\n                self.scrollPixelLeft = Math.max(self.scrollPixelLeft\n                    - (self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width), 0);\n                self.scrollIndexTop = Math.max(self.scrollIndexTop - 1, 0);\n                self.scrollPixelTop = Math.max(self.scrollPixelTop\n                    - (self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || self.style.cellHeight)\n                    - (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0), 0);\n            }\n            self.ellipsisCache = {};\n            self.draw(true);\n            //TODO: figure out why this has to be delayed for child grids\n            //BUG: scrolling event on 3rd level hierarchy fails to move input box\n            requestAnimationFrame(self.resizeEditInput);\n            self.dispatchEvent('scroll', {top: self.scrollBox.scrollTop, left: self.scrollBox.scrollLeft});\n        };\n        self.mousemove = function (e, overridePos) {\n            if (self.contextMenu || self.input) {\n                return;\n            }\n            self.mouse = overridePos || self.getLayerPos(e);\n            var ctrl = (e.controlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                i,\n                s = self.getSchema(),\n                dragBounds,\n                sBounds,\n                x = self.mouse.x,\n                y = self.mouse.y,\n                o = self.getCellAt(x, y),\n                delta,\n                ev = {NativeEvent: e, cell: o, x: x, y: y},\n                previousCell = self.currentCell;\n            clearTimeout(self.scrollTimer);\n            if (!self.isInGrid({x: x, y: y})) {\n                self.hasFocus = false;\n            }\n            if (self.dispatchEvent('mousemove', ev)) {\n                return;\n            }\n            if (o && self.currentCell && (self.currentCell.rowIndex !== o.rowIndex\n                    || self.currentCell.columnIndex !== o.columnIndex)) {\n                self.cellBoundaryCrossed = true;\n                ev.cell = previousCell;\n                self.dispatchEvent('cellmouseout', ev);\n                ev.cell = o;\n                self.dispatchEvent('cellmouseover', ev);\n            }\n            self.currentCell = o;\n            if (!self.hasFocus) {\n                return;\n            }\n            self.hovers = {};\n            if (!self.draggingItem\n                    && o\n                    && self.scrollModes.indexOf(o.context) === -1) {\n                self.dragItem = o;\n                self.dragMode = o.dragContext;\n                self.canvas.style.cursor = o.context;\n                if (o.context === 'cell' && o.data) {\n                    self.canvas.style.cursor = 'pointer';\n                    self.hovers[o.data[self.uniqueId]] = [o.columnIndex];\n                }\n                if ((self.selecting || self.reorderObject)\n                        && o.context === 'cell'\n                        && o.data) {\n                    sBounds = self.getSelectionBounds();\n                    delta = {\n                        x: Math.abs(self.dragStart.x - x),\n                        y: Math.abs(self.dragStart.y - y),\n                    };\n                    if (self.dragStartObject.columnIndex !== -1 && e.shiftKey) {\n                        self.dragStartObject = {\n                            rowIndex: self.activeCell.rowIndex,\n                            columnIndex: self.activeCell.columnIndex\n                        };\n                    }\n                    dragBounds = {\n                        top: Math.min(self.dragStartObject.rowIndex, o.rowIndex),\n                        left: Math.min(self.dragStartObject.columnIndex, o.columnIndex),\n                        bottom: Math.max(self.dragStartObject.rowIndex, o.rowIndex),\n                        right: Math.max(self.dragStartObject.columnIndex, o.columnIndex)\n                    };\n                    if (self.dragStartObject.columnIndex === -1) {\n                        dragBounds.left = -1;\n                        dragBounds.right = s.length - 1;\n                        dragBounds.top = Math.min(sBounds.top, o.rowIndex);\n                        dragBounds.bottom = Math.max(sBounds.bottom, o.rowIndex);\n                    }\n                    if (self.dragStartObject.rowIndex !== o.rowIndex\n                                || self.dragStartObject.columnIndex !== o.columnIndex) {\n                        self.ignoreNextClick = true;\n                    }\n                    if (self.cellBoundaryCrossed || (delta.x === 0 && delta.y === 0) || self.attributes.rowSelectionMode) {\n                        if (self.attributes.rowSelectionMode || self.dragStartObject.columnIndex === -1) {\n                            self.selectRow(o.rowIndex, ctrl, true);\n                        } else {\n                            if (!self.dragAddToSelection && o.rowIndex) {\n                                if (self.selections[o.rowIndex] && self.selections[o.rowIndex].indexOf(o.columnIndex) !== -1) {\n                                    self.selections[o.rowIndex].splice(self.selections[o.rowIndex].indexOf(o.columnIndex), 1);\n                                }\n                            } else {\n                                self.selections[o.rowIndex] = self.selections[o.rowIndex] || [];\n                                if (self.selections[o.rowIndex].indexOf(o.columnIndex) === -1) {\n                                    self.selections[o.rowIndex].push(o.columnIndex);\n                                }\n                            }\n                        }\n                    }\n                    if ((!self.selectionBounds || (dragBounds.top !== self.selectionBounds.top\n                            || dragBounds.left !== self.selectionBounds.left\n                            || dragBounds.bottom !== self.selectionBounds.bottom\n                            || dragBounds.right !== self.selectionBounds.right)) && !ctrl) {\n                        self.selections = [];\n                        sBounds = dragBounds;\n                        if (self.attributes.rowSelectionMode) {\n                            for (i = sBounds.top; i <= sBounds.bottom; i += 1) {\n                                self.selectRow(i, true, true);\n                            }\n                        } else {\n                            self.selectArea(sBounds, true);\n                        }\n                    }\n                    self.autoScrollZone(e, x, y, ctrl);\n                }\n            }\n            self.cellBoundaryCrossed = false;\n            self.draw(true);\n        };\n        /**\n         * Ends editing, optionally aborting the edit.\n         * @memberof canvasDataGrid\n         * @name endEdit\n         * @method\n         * @param {boolean} abort When true, abort the edit.\n         */\n        self.endEdit = function (abort) {\n            var cell = self.input.editCell,\n                y = cell.rowIndex;\n            function abortEdit() {\n                abort = true;\n            }\n            if (self.dispatchEvent('beforeendedit', {\n                    cell: cell,\n                    newValue: self.input.value,\n                    oldValue: cell.value,\n                    abort: abortEdit,\n                    input: self.input\n                })) { return false; }\n            if (self.input.value !== cell.value && !abort) {\n                self.changes[y] = self.changes[y] || {};\n                self.changes[y][cell.header.name] = self.input.value;\n                cell.data[cell.header.name] = self.input.value;\n                if (y === self.data.length) {\n                    if (self.dispatchEvent('newrow', {\n                            value: self.input.value,\n                            defaultValue: cell.value,\n                            aborted: abort,\n                            cell: cell,\n                            input: self.input\n                        })) { return false; }\n                    self.uId += 1;\n                    self.addRow(cell.data);\n                    self.createNewRowData();\n                }\n                self.draw(true);\n            }\n            document.body.removeChild(self.input);\n            self.controlInput.focus();\n            self.dispatchEvent('endedit', {\n                cell: cell,\n                value: self.input.value,\n                aborted: abort,\n                input: self.input\n            });\n            self.input = undefined;\n            return true;\n        };\n        /**\n         * Begins editing at cell x, row y.\n         * @memberof canvasDataGrid\n         * @name beginEditAt\n         * @method\n         * @param {number} x The column index of the cell to edit.\n         * @param {number} y The row index of the cell to edit.\n         */\n        self.beginEditAt = function (x, y) {\n            if (!self.attributes.editable) { return; }\n            var cell = self.getVisibleCellByIndex(x, y),\n                s = self.getVisibleSchema();\n            if (self.dispatchEvent('beforebeginedit', {cell: cell})) { return false; }\n            self.scrollIntoView(x, y);\n            self.setActiveCell(x, y);\n            function postDraw() {\n                cell = self.getVisibleCellByIndex(x, y);\n                self.input = document.createElement(self.attributes.multiLine ? 'textarea' : 'input');\n                document.body.appendChild(self.input);\n                self.createInlineStyle(self.input, 'canvas-datagrid-edit-input');\n                self.input.style.position = 'absolute';\n                self.input.editCell = cell;\n                self.resizeEditInput();\n                self.input.style.zIndex = '2';\n                self.input.value = cell.value;\n                self.input.focus();\n                self.input.addEventListener('click', self.stopPropagation);\n                self.input.addEventListener('dblclick', self.stopPropagation);\n                self.input.addEventListener('mouseup', self.stopPropagation);\n                self.input.addEventListener('mousedown', self.stopPropagation);\n                self.input.addEventListener('keydown', function (e) {\n                    var nx = cell.columnIndex,\n                        ny = cell.rowIndex;\n                    // esc\n                    if (e.keyCode === 27) {\n                        self.endEdit(true);\n                        self.draw(true);\n                    // enter\n                    } else if (e.keyCode === 13\n                            && (!self.attributes.multiLine\n                                || (self.attributes.multiLine && e.shiftKey))) {\n                        self.endEdit();\n                        self.draw(true);\n                    } else if (e.keyCode === 9) {\n                        e.preventDefault();\n                        if (!self.endEdit()) {\n                            return;\n                        }\n                        if (e.shiftKey) {\n                            nx -= 1;\n                        } else {\n                            nx += 1;\n                        }\n                        if (nx < 0) {\n                            nx = s.length - 1;\n                            ny -= 1;\n                        }\n                        if (nx > s.length - 1) {\n                            nx = 0;\n                            ny += 1;\n                        }\n                        if (ny < 0) {\n                            ny = self.data.length - 1;\n                        }\n                        if (ny > self.data.length - 1) {\n                            ny = 0;\n                        }\n                        self.beginEditAt(nx, ny);\n                    }\n                });\n            }\n            requestAnimationFrame(postDraw);\n            self.dispatchEvent('beginedit', {cell: cell, input: self.input});\n        };\n        self.click = function (e, overridePos) {\n            var i,\n                selectionChanged,\n                ctrl = (e.controlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                pos = overridePos || self.getLayerPos(e);\n            self.currentCell = self.getCellAt(pos.x, pos.y);\n            if (self.currentCell.grid !== undefined) {\n                return;\n            }\n            function checkSelectionChange() {\n                if (!selectionChanged) { return; }\n                self.dispatchEvent('selectionchanged', {\n                    selectedData: self.getSelectedData(),\n                    selections: self.selections,\n                    selectionBounds: self.selectionBounds\n                });\n            }\n            if (self.input) {\n                self.endEdit();\n            }\n            if (self.ignoreNextClick) {\n                self.ignoreNextClick = false;\n                return;\n            }\n            i = self.currentCell;\n            if (self.dispatchEvent('click', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'cell') {\n                if (self.currentCell.style === 'cornerCell') {\n                    self.order(self.uniqueId, 'asc');\n                    self.setFilter();\n                    checkSelectionChange();\n                    return;\n                }\n                if (self.currentCell.style === 'headerCell') {\n                    if (self.orderBy === i.header.name) {\n                        self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                    } else {\n                        self.orderDirection = 'asc';\n                    }\n                    self.order(i.header.name, self.orderDirection);\n                    checkSelectionChange();\n                    return;\n                }\n                if (['rowHeaderCell', 'headerCell'].indexOf(self.currentCell.style) === -1 && !ctrl) {\n                    self.setActiveCell(i.columnIndex, i.rowIndex);\n                }\n                self.selections[i.rowIndex] = self.selections[i.rowIndex] || [];\n                if ((self.attributes.rowSelectionMode || self.currentCell.style === 'rowHeaderCell')) {\n                    if (self.currentCell.style === 'rowHeaderCell'\n                            && self.attributes.tree && pos.x > 0\n                            && pos.x - self.currentCell.x < self.style.treeArrowWidth\n                            + self.style.treeArrowMarginLeft\n                            + self.style.treeArrowMarginRight + self.style.treeArrowClickRadius\n                            && pos.y - self.currentCell.y < self.style.treeArrowHeight\n                            + self.style.treeArrowMarginTop + self.style.treeArrowClickRadius\n                            && pos.y > 0) {\n                        self.toggleTree(i.rowIndex);\n                        return;\n                    }\n                    selectionChanged = true;\n                    self.selectRow(i.rowIndex, ctrl, true);\n                }\n                if (e.shiftKey && !ctrl) {\n                    self.selectionBounds = self.getSelectionBounds();\n                    self.selectArea(undefined, false);\n                }\n            }\n            checkSelectionChange();\n            self.draw(true);\n        };\n        self.dragResizeColumn = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = self.resizingStartingWidth + pos.x - self.dragStart.x;\n            y = self.resizingStartingHeight + pos.y - self.dragStart.y;\n            if (x < self.style.minColumnWidth) {\n                x = self.style.minColumnWidth;\n            }\n            if (y < self.style.minRowHeight) {\n                y = self.style.minRowHeight;\n            }\n            if (self.dispatchEvent('resizecolumn', {x: x, y: y, draggingItem: self.draggingItem})) { return false; }\n            if (self.scrollBox.scrollLeft > self.scrollBox.scrollWidth - self.attributes.resizeScrollZone\n                    && self.dragMode === 'ew-resize') {\n                self.resize(true);\n                self.scrollBox.scrollLeft += x;\n            }\n            if (self.dragMode === 'ew-resize') {\n                self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] = x;\n                if (['rowHeaderCell', 'cornerCell'].indexOf(self.draggingItem.header.style) !== -1) {\n                    self.resize(true);\n                }\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.dragMode === 'ns-resize') {\n                if (self.draggingItem.rowOpen) {\n                    self.sizes.trees[self.draggingItem.data[self.uniqueId]] = y;\n                } else if (self.attributes.globalRowResize) {\n                    self.style.cellHeight = y;\n                } else {\n                    self.sizes.rows[self.draggingItem.data[self.uniqueId]] = y;\n                }\n                self.dispatchEvent('resizerow', {row: y});\n                self.resizeChildGrids();\n                return;\n            }\n            self.ellipsisCache = {};\n        };\n        self.stopDragResize = function () {\n            self.resize();\n            document.body.removeEventListener('mousemove', self.dragResizeColumn, false);\n            document.body.removeEventListener('mouseup', self.stopDragResize, false);\n            self.setStorageData();\n            self.draw(true);\n            self.ignoreNextClick = true;\n        };\n        self.scrollGrid = function (e) {\n            var pos = self.getLayerPos(e);\n            self.scrollMode = self.getCellAt(pos.x, pos.y).context;\n            if (self.scrollMode === 'horizontal-scroll-box' && self.scrollStartMode !== 'horizontal-scroll-box') {\n                self.scrollStartMode = 'horizontal-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.left = self.scrollBox.scrollLeft;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box' && self.scrollStartMode !== 'vertical-scroll-box') {\n                self.scrollStartMode = 'vertical-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.top = self.scrollBox.scrollTop;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollStartMode === 'vertical-scroll-box'\n                    && self.scrollMode !== 'vertical-scroll-box') {\n                self.scrollMode = 'vertical-scroll-box';\n            }\n            if (self.scrollStartMode === 'horizontal-scroll-box'\n                    && self.scrollMode !== 'horizontal-scroll-box') {\n                self.scrollMode = 'horizontal-scroll-box';\n            }\n            clearTimeout(self.scrollTimer);\n            if (self.scrollModes.indexOf(self.scrollMode) === -1) {\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box') {\n                self.scrollBox.scrollTop = self.scrollStart.top + ((pos.y - self.dragStart.y)\n                    / self.scrollBox.heightBoxRatio);\n            } else if (self.scrollMode === 'vertical-scroll-top') {\n                self.scrollBox.scrollTop -= (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'vertical-scroll-bottom') {\n                self.scrollBox.scrollTop += (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n            if (self.scrollMode === 'horizontal-scroll-box') {\n                self.scrollBox.scrollLeft = self.scrollStart.left + ((pos.x - self.dragStart.x)\n                    / self.scrollBox.widthBoxRatio);\n            } else if (self.scrollMode === 'horizontal-scroll-right') {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'horizontal-scroll-left') {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.stopScrollGrid = function () {\n            clearTimeout(self.scrollTimer);\n            document.body.removeEventListener('mousemove', self.scrollGrid, false);\n        };\n        self.dragReorder = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = pos.x - self.dragStart.x;\n            y = pos.y - self.dragStart.y;\n            if (!self.attributes.allowColumnReordering && self.dragMode === 'column-reorder') {\n                return;\n            }\n            if (!self.attributes.allowRowReordering && self.dragMode === 'row-reorder') {\n                return;\n            }\n            if (self.dispatchEvent('reordering', {\n                    NativeEvent: e,\n                    source: self.dragStartObject,\n                    target: self.currentCell,\n                    dragMode: self.dragMode\n                })) {\n                return;\n            }\n            if (Math.abs(x) > self.attributes.reorderDeadZone || Math.abs(y) > self.attributes.reorderDeadZone) {\n                self.reorderObject = self.dragStartObject;\n                self.reorderTarget = self.currentCell;\n                self.reorderObject.dragOffset = {\n                    x: x,\n                    y: y\n                };\n                self.autoScrollZone(e, pos.x, pos.x, false);\n            }\n        };\n        self.stopDragReorder = function (e) {\n            var cr = {\n                    'row-reorder': self.orders.rows,\n                    'column-reorder': self.orders.columns\n                },\n                i = {\n                    'row-reorder': 'rowIndex',\n                    'column-reorder': 'columnIndex'\n                }[self.dragMode];\n            document.body.removeEventListener('mousemove', self.dragReorder, false);\n            document.body.removeEventListener('mouseup', self.stopDragReorder, false);\n            if (self.reorderObject\n                    && self.reorderTarget) {\n                self.ignoreNextClick = true;\n                if (self.reorderObject[i] !== self.reorderTarget[i]\n                        && !self.dispatchEvent('reorder', {\n                            NativeEvent: e,\n                            source: self.reorderObject,\n                            target: self.reorderTarget,\n                            dragMode: self.dragMode\n                        })) {\n                    cr[self.dragMode].splice(cr[self.dragMode].indexOf(self.reorderObject[i]), 1);\n                    cr[self.dragMode].splice(cr[self.dragMode].indexOf(self.reorderTarget[i]), 0, self.reorderObject[i]);\n                    self.setStorageData();\n                }\n            }\n            self.reorderObject = undefined;\n            self.reorderTarget = undefined;\n            self.draw(true);\n        };\n        self.mousedown = function (e, overridePos) {\n            self.lastMouseDownTarget = e.target;\n            if (self.dispatchEvent('mousedown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (e.button === 2 || self.input) { return; }\n            var ctrl = (e.controlKey || e.metaKey);\n            self.dragStart = overridePos || self.getLayerPos(e);\n            self.scrollStart = {\n                left: self.scrollBox.scrollLeft,\n                top: self.scrollBox.scrollTop\n            };\n            self.dragStartObject = self.getCellAt(self.dragStart.x, self.dragStart.y);\n            self.dragAddToSelection = !self.dragStartObject.selected;\n            if (!ctrl && !e.shiftKey && !/(vertical|horizontal)-scroll-(bar|box)/\n                    .test(self.dragStartObject.context)) {\n                self.selections = [];\n            }\n            if (self.dragStartObject.isGrid) {\n                return;\n            }\n            if (self.scrollModes.indexOf(self.dragStartObject.context) !== -1) {\n                self.scrollMode = self.dragStartObject.context;\n                self.scrollStartMode = self.dragStartObject.context;\n                self.scrollGrid(e);\n                document.body.addEventListener('mousemove', self.scrollGrid, false);\n                document.body.addEventListener('mouseup', self.stopScrollGrid, false);\n                self.ignoreNextClick = true;\n                return;\n            }\n            if (self.dragMode === 'cell') {\n                self.selecting = true;\n                if (self.attributes.rowSelectionMode) {\n                    self.selectRow(self.dragStartObject.rowIndex, ctrl, true);\n                }\n                return self.mousemove(e);\n            }\n            if (['ns-resize', 'ew-resize'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragItem;\n                if (self.draggingItem.rowOpen) {\n                    self.resizingStartingHeight = self.sizes.trees[self.draggingItem.data[self.uniqueId]];\n                } else {\n                    self.resizingStartingHeight = self.sizes.rows[self.draggingItem.data[self.uniqueId]] || self.style.cellHeight;\n                }\n                self.resizingStartingWidth = self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] || self.draggingItem.header.width;\n                document.body.addEventListener('mousemove', self.dragResizeColumn, false);\n                document.body.addEventListener('mouseup', self.stopDragResize, false);\n            }\n            if (['row-reorder', 'column-reorder'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragItem;\n                document.body.addEventListener('mousemove', self.dragReorder, false);\n                document.body.addEventListener('mouseup', self.stopDragReorder, false);\n            }\n        };\n        self.mouseup = function (e) {\n            clearTimeout(self.scrollTimer);\n            self.cellBoundaryCrossed = true;\n            self.selecting = undefined;\n            self.draggingItem = undefined;\n            self.dragStartObject = undefined;\n            if (self.dispatchEvent('mouseup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            if (self.currentCell && self.currentCell.grid !== undefined) {\n                return;\n            }\n            if (self.contextMenu || self.input) { return; }\n            if (self.dragStart && self.isInGrid(self.dragStart)) {\n                self.controlInput.focus();\n            }\n            e.preventDefault();\n        };\n        self.keydown = function (e) {\n            var i,\n                x = self.activeCell.columnIndex,\n                y = self.activeCell.rowIndex,\n                ctrl = (e.controlKey || e.metaKey),\n                last = self.data.length - 1,\n                cols = self.getVisibleSchema().length - 1;\n            if (self.dispatchEvent('keydown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            if (self.attributes.showNewRow) {\n                last += 1;\n            }\n            if (e.keyCode === 'Tab') {\n                e.preventDefault();\n            }\n            //ArrowDown\n            if (e.keyCode === 40) {\n                y += 1;\n            //ArrowUp\n            } else if (e.keyCode === 38) {\n                y -= 1;\n            //ArrowLeft Tab\n            } else if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {\n                x -= 1;\n            //ArrowRight Tab\n            } else if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {\n                x += 1;\n            //PageUp\n            } else if (e.keyCode === 33) {\n                y -= self.page;\n                e.preventDefault();\n            //PageDown\n            } else if (e.keyCode === 34) {\n                y += self.page;\n                e.preventDefault();\n            //Home ArrowUp\n            } else if (e.keyCode === 36 || (ctrl && e.keyCode === 38)) {\n                y = 0;\n            //End ArrowDown\n            } else if (e.keyCode === 35 || (ctrl && e.keyCode === 40)) {\n                y = self.data.length - 1;\n            //ArrowRight\n            } else if (ctrl && e.keyCode === 39) {\n                x = cols;\n            //ArrowLeft\n            } else if (ctrl && e.keyCode === 37) {\n                x = 0;\n            }\n            //Enter\n            if (e.keyCode === 13) {\n                return self.beginEditAt(x, y);\n            }\n            //Space\n            if (e.keyCode === 32) {\n                self.selections = [];\n                self.selections[Math.max(y, 0)] = [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                if (self.attributes.rowSelectionMode) {\n                    for (i = self.selectionBounds.top; i <= self.selectionBounds.bottom; i += 1) {\n                        self.selectRow(i, ctrl, true);\n                    }\n                } else {\n                    self.selectArea(undefined, ctrl);\n                }\n                e.preventDefault();\n                self.draw(true);\n                return;\n            }\n            if (x < 0) {\n                x = 0;\n            }\n            if (y > last) {\n                y = last;\n            }\n            if (y < 0) {\n                y = 0;\n            }\n            if (x > cols) {\n                x = cols;\n            }\n            // Arrows\n            if (e.shiftKey && [37, 38, 39, 40].indexOf(e.keyCode) !== -1) {\n                self.selections[Math.max(y, 0)] = self.selections[Math.max(y, 0)] || [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                self.selectArea(undefined, ctrl);\n                self.draw(true);\n            }\n            if (x !== self.activeCell.columnIndex || y !== self.activeCell.rowIndex) {\n                self.scrollIntoView(x !== self.activeCell.columnIndex ? x : undefined, y !== self.activeCell.rowIndex ? y : undefined);\n                self.setActiveCell(x, y);\n                if (!e.shiftKey && self.attributes.selectionFollowsActiveCell) {\n                    if (!ctrl) {\n                        self.selections = [];\n                    }\n                    self.selections[y] = self.selections[y] || [];\n                    self.selections[y].push(x);\n                    self.dispatchEvent('selectionchanged', {\n                        selectedData: self.getSelectedData(),\n                        selections: self.selections,\n                        selectionBounds: self.selectionBounds\n                    });\n                }\n                self.draw(true);\n            }\n        };\n        self.keyup = function (e) {\n            if (self.dispatchEvent('keyup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            self.controlInput.value = '';\n        };\n        self.keypress = function (e) {\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.dispatchEvent('keypress', {NativeEvent: e, cell: self.currentCell})) { return; }\n        };\n        self.dblclick = function (e) {\n            if (self.dispatchEvent('dblclick', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'headerCell') {\n                self.fitColumnToValues(self.currentCell.header.name);\n            } else if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'cornerCell') {\n                self.autosize();\n            } else if (['cell', 'activeCell'].indexOf(self.currentCell.style) !== -1) {\n                self.beginEditAt(self.currentCell.columnIndex, self.currentCell.rowIndex);\n            }\n        };\n        self.scrollWheel = function (e) {\n            if (self.dispatchEvent('wheel', {NativeEvent: e})) {\n                return;\n            }\n            self.touchHaltAnimation = true;\n            var l = self.scrollBox.scrollLeft,\n                t = self.scrollBox.scrollTop;\n            if (self.hasFocus) {\n                self.scrollBox.scrollTop += e.deltaY;\n                self.scrollBox.scrollLeft += e.deltaX;\n            }\n            if (t !== self.scrollBox.scrollTop || l !== self.scrollBox.scrollLeft) {\n                e.preventDefault();\n            }\n        };\n        self.copy = function (e) {\n            if (self.dispatchEvent('copy', {NativeEvent: e})) { return; }\n            if (!self.hasFocus || !e.clipboardData) { return; }\n            var rows = [], sData = self.getSelectedData();\n            if (sData.length > 0) {\n                sData.forEach(function (row) {\n                    if (row) {\n                        var r = [];\n                        Object.keys(row).forEach(function (key) {\n                            r.push(row[key]);\n                        });\n                        r.join(',');\n                        rows.push(r);\n                    }\n                });\n                e.clipboardData.setData('text/plain', rows.join('\\n'));\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        self.intf.blur = function () {\n            self.hasFocus = false;\n        };\n        self.intf.focus = function () {\n            self.hasFocus = true;\n            self.controlInput.focus();\n        };\n        Object.defineProperty(self.intf, 'height', {\n            get: function () {\n                return self.parentNode.height;\n            },\n            set: function (value) {\n                self.parentNode.height = value;\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'width', {\n            get: function () {\n                return self.parentNode.width;\n            },\n            set: function (value) {\n                self.parentNode.width = value;\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'openChildren', {\n            get: function () {\n                return self.openChildren;\n            }\n        });\n        Object.defineProperty(self.intf, 'childGrids', {\n            get: function () {\n                return Object.keys(self.childGrids).map(function (gridId) {\n                    return self.childGrids[gridId];\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'isChildGrid', {\n            get: function () {\n                return self.isChildGrid;\n            }\n        });\n        Object.defineProperty(self.intf, 'parentNode', {\n            get: function () {\n                return self.parentNode;\n            },\n            set: function (value) {\n                self.parentNode = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetParent', {\n            get: function () {\n                return self.parentNode;\n            },\n            set: function (value) {\n                self.parentNode = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetLeft', {\n            get: function () {\n                return self.parentNode.offsetLeft;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetTop', {\n            get: function () {\n                return self.parentNode.offsetTop;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollHeight', {\n            get: function () {\n                return self.scrollBox.scrollHeight;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollWidth', {\n            get: function () {\n                return self.scrollBox.scrollWidth;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollTop', {\n            get: function () {\n                return self.scrollBox.scrollTop;\n            },\n            set: function (value) {\n                self.scrollBox.scrollTop = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollLeft', {\n            get: function () {\n                return self.scrollBox.scrollLeft;\n            },\n            set: function (value) {\n                self.scrollBox.scrollLeft = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'sizes', {\n            get: function () {\n                return self.sizes;\n            }\n        });\n        Object.defineProperty(self.intf, 'input', {\n            get: function () {\n                return self.input;\n            }\n        });\n        Object.defineProperty(self.intf, 'controlInput', {\n            get: function () {\n                return self.controlInput;\n            }\n        });\n        Object.defineProperty(self.intf, 'currentCell', {\n            get: function () {\n                return self.currentCell;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleCells', {\n            get: function () {\n                return self.visibleCells;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRows', {\n            get: function () {\n                return self.visibleRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'selections', {\n            get: function () {\n                return self.selections;\n            }\n        });\n        Object.defineProperty(self.intf, 'dragMode', {\n            get: function () {\n                return self.dragMode;\n            }\n        });\n        Object.defineProperty(self.intf, 'changes', {\n            get: function () {\n                return self.changes;\n            }\n        });\n        self.intf.attributes = {};\n        self.intf.formatters = self.formatters;\n        Object.defineProperty(self.intf, 'selectionBounds', {\n            get: function () {\n                return self.getSelectionBounds();\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedRows', {\n            get: function () {\n                return self.getSelectedData(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedCells', {\n            get: function () {\n                return self.getSelectedData();\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleSchema', {\n            get: function () {\n                return self.getVisibleSchema().map(function eachDataRow(col) {\n                    return col;\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'ctx', {\n            get: function () {\n                return self.ctx;\n            }\n        });\n        Object.defineProperty(self.intf, 'schema', {\n            get: function schemaGetter() {\n                return self.getSchema();\n            },\n            set: function schemaSetter(value) {\n                if (!Array.isArray(value) || typeof value[0] !== 'object') {\n                    throw new Error('Schema must be an array of objects.');\n                }\n                if (value[0].name === undefined) {\n                    throw new Error('Expected schema to contain an object with at least a name property.');\n                }\n                self.schema = value.map(function eachSchemaColumn(column, index) {\n                    column.width = column.width || self.style.columnWidth;\n                    column[self.uniqueId] = self.getSchemaNameHash(column.name);\n                    column.filter = column.filter || self.filter(column.type);\n                    column.type = column.type || 'string';\n                    column.index = index;\n                    column.columnIndex = index;\n                    column.rowIndex = -1;\n                    return column;\n                });\n                self.tempSchema = undefined;\n                self.createNewRowData();\n                self.createColumnOrders();\n                self.tryLoadStoredOrders();\n                self.resize(true);\n                self.dispatchEvent('schemachanged', {schema: self.schema});\n            }\n        });\n        Object.defineProperty(self.intf, 'data', {\n            get: function dataGetter() {\n                return self.data;\n            },\n            set: function dataSetter(value) {\n                if (!Array.isArray(value)\n                        || (value.length > 0 && typeof value[0] !== 'object')) {\n                    throw new Error('Data must be an array of objects.');\n                }\n                self.dataGroup = {};\n                self.originalData = value.map(function eachDataRow(row) {\n                    row[self.uniqueId] = self.uId;\n                    self.uId += 1;\n                    return row;\n                });\n                self.changes = [];\n                //TODO apply filter to incoming dataset\n                self.data = self.originalData;\n                if (!self.schema && self.data.length > 0) {\n                    self.tempSchema = self.getSchemaFromData();\n                }\n                if (!self.schema && self.data.length === 0) {\n                    self.tempSchema = [{name: ''}];\n                    self.tempSchema[0][self.uniqueId] = self.getSchemaNameHash('');\n                }\n                if (self.tempSchema && !self.schema) {\n                    self.createColumnOrders();\n                    self.tryLoadStoredOrders();\n                    self.dispatchEvent('schemachanged', {schema: self.tempSchema});\n                }\n                self.createNewRowData();\n                if (self.attributes.autoResizeColumns && self.data.length > 0\n                        && self.storedSettings === undefined) {\n                    self.autosize();\n                }\n                // width cannot be determined correctly until after inserted into the dom?\n                requestAnimationFrame(function () {\n                    self.fitColumnToValues('cornerCell');\n                });\n                if (!self.resize()) { self.draw(true); }\n                self.createRowOrders();\n                self.tryLoadStoredOrders();\n                self.dispatchEvent('datachanged', {data: self.data});\n            }\n        });\n        return;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false, Event: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var zIndexTop = 2, hoverScrollTimeout, autoCompleteContext;\n        function createContextMenu(ev, pos, items, parentContextMenu) {\n            var container = document.createElement('div'),\n                upArrow = document.createElement('div'),\n                downArrow = document.createElement('div'),\n                children = [],\n                selectedIndex = -1,\n                intf,\n                rect;\n            function createItems() {\n                items.forEach(function (item) {\n                    var contextItemContainer = document.createElement('div'),\n                        childMenuArrow;\n                    function removeChildContext(e) {\n                        if (e.relatedTarget === container\n                                || item.contextMenu.container === e.relatedTarget) { return; }\n                        item.contextMenu.dispose();\n                        children.splice(children.indexOf(item.contextMenu), 1);\n                        item.contextMenu = undefined;\n                        contextItemContainer.removeEventListener('mouseout', removeChildContext);\n                        container.removeEventListener('mouseout', removeChildContext);\n                        contextItemContainer.setAttribute('contextOpen', '0');\n                    }\n                    function createChildContext() {\n                        if (contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        var cPos = contextItemContainer.getBoundingClientRect();\n                        item.contextMenu = createContextMenu(ev, {\n                            left: cPos.left + self.style.childContextMenuMarginLeft + container.offsetWidth,\n                            top: cPos.top + self.style.childContextMenuMarginTop,\n                            bottom: cPos.bottom,\n                            right: cPos.right,\n                        }, item.items, intf);\n                        contextItemContainer.setAttribute('contextOpen', '1');\n                        contextItemContainer.addEventListener('mouseout', removeChildContext);\n                        container.addEventListener('mouseout', removeChildContext);\n                        children.push(item.contextMenu);\n                    }\n                    function addItem(item) {\n                        function addContent(content) {\n                            if (typeof content === 'function') {\n                                return addContent(content(ev));\n                            }\n                            if (typeof content === 'object') {\n                                contextItemContainer.appendChild(content);\n                                return;\n                            }\n                            self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n                            contextItemContainer.addEventListener('mouseover', function () {\n                                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                            });\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n                            });\n                            contextItemContainer.innerHTML = content;\n                            return;\n                        }\n                        addContent(item.title);\n                        item.contextItemContainer = contextItemContainer;\n                        if (item.items && item.items.length > 0) {\n                            childMenuArrow = document.createElement('div');\n                            self.createInlineStyle(childMenuArrow, 'canvas-datagrid-context-child-arrow');\n                            childMenuArrow.innerHTML = self.style.childContextMenuArrowHTML;\n                            contextItemContainer.appendChild(childMenuArrow);\n                            contextItemContainer.addEventListener('mouseover', createChildContext);\n                        }\n                        if (item.click) {\n                            contextItemContainer.addEventListener('click', function (ev) {\n                                item.click.apply(self, [ev]);\n                            });\n                        }\n                    }\n                    addItem(item);\n                    container.appendChild(contextItemContainer);\n                });\n            }\n            function clickIndex(idx) {\n                items[idx].contextItemContainer.dispatchEvent(new Event('click'));\n            }\n            function checkArrowVisibility() {\n                if (container.scrollTop > 0) {\n                    document.body.appendChild(upArrow);\n                } else if (upArrow.parentNode) {\n                    upArrow.parentNode.removeChild(upArrow);\n                }\n                if (container.scrollTop >= container.scrollHeight - container.offsetHeight && downArrow.parentNode) {\n                    downArrow.parentNode.removeChild(downArrow);\n                } else if (container.scrollHeight - container.offsetHeight > 0\n                        && !(container.scrollTop >= container.scrollHeight - container.offsetHeight)) {\n                    document.body.appendChild(downArrow);\n                }\n            }\n            function startHoverScroll(type) {\n                return function t() {\n                    var a = self.attributes.contextHoverScrollAmount;\n                    if (type === 'up' && container.scrollTop === 0) { return; }\n                    if (type === 'down' && container.scrollTop === container.scrollHeight) { return; }\n                    container.scrollTop += (type === 'up' ? -a : a);\n                    hoverScrollTimeout = setTimeout(t, self.attributes.contextHoverScrollRateMs, type);\n                };\n            }\n            function endHoverScroll(type) {\n                return function () {\n                    clearTimeout(hoverScrollTimeout);\n                };\n            }\n            function init() {\n                var loc = {},\n                    s = self.scrollOffset(self.canvas);\n                createItems();\n                self.createInlineStyle(container, 'canvas-datagrid-context-menu');\n                loc.x = pos.left - s.left;\n                loc.y = pos.top - s.top;\n                loc.height = 0;\n                zIndexTop += 1;\n                container.style.position = 'absolute';\n                upArrow.style.color = self.style.contextMenuArrowColor;\n                downArrow.style.color = self.style.contextMenuArrowColor;\n                [upArrow, downArrow].forEach(function (el) {\n                    el.style.textAlign = 'center';\n                    el.style.position = 'absolute';\n                    el.style.zIndex = zIndexTop + 1;\n                });\n                container.style.zIndex = zIndexTop;\n                if (parentContextMenu && parentContextMenu.inputDropdown) {\n                    container.style.maxHeight = window.innerHeight - loc.y - self.style.autocompleteBottomMargin + 'px';\n                    container.style.minWidth = pos.width + 'px';\n                    loc.y += pos.height;\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                container.addEventListener('scroll', checkArrowVisibility);\n                container.addEventListener('wheel', function (e) {\n                    if (self.hasFocus) {\n                        container.scrollTop += e.deltaY;\n                        container.scrollLeft += e.deltaX;\n                    }\n                    checkArrowVisibility();\n                });\n                upArrow.innerHTML = self.style.contextMenuArrowUpHTML;\n                downArrow.innerHTML = self.style.contextMenuArrowDownHTML;\n                container.appendChild(upArrow);\n                document.body.appendChild(downArrow);\n                document.body.appendChild(container);\n                rect = container.getBoundingClientRect();\n                if (rect.bottom > window.innerHeight && !(parentContextMenu && parentContextMenu.inputDropdown)) {\n                    loc.y = window.innerHeight - container.offsetHeight;\n                    if (loc.y < 0) { loc.y = 0; }\n                    if (container.offsetHeight > window.innerHeight) {\n                        container.style.height = window.innerHeight - self.style.contextMenuWindowMargin + 'px';\n                    }\n                }\n                if (rect.right > window.innerWidth) {\n                    if (parentContextMenu) {\n                        loc.x = parentContextMenu.container.offsetLeft - container.offsetWidth;\n                    } else {\n                        loc.x = window.innerWidth - container.offsetWidth;\n                    }\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                rect = container.getBoundingClientRect();\n                upArrow.style.top = rect.top + 'px';\n                downArrow.style.top = rect.top + rect.height - downArrow.offsetHeight + 'px';\n                upArrow.style.left = rect.left + 'px';\n                downArrow.style.left = rect.left + 'px';\n                downArrow.style.width = container.offsetWidth + 'px';\n                upArrow.style.width = container.offsetWidth + 'px';\n                downArrow.addEventListener('mouseover', startHoverScroll('down'));\n                downArrow.addEventListener('mouseout', endHoverScroll('down'));\n                upArrow.addEventListener('mouseover', startHoverScroll('up'));\n                upArrow.addEventListener('mouseout', endHoverScroll('up'));\n                checkArrowVisibility();\n            }\n            init();\n            intf = {\n                clickIndex: clickIndex,\n                rect: rect,\n                parentContextMenu: parentContextMenu,\n                container: container,\n                items: items,\n                children: children,\n                dispose: function () {\n                    clearTimeout(hoverScrollTimeout);\n                    children.forEach(function (c) {\n                        c.dispose();\n                    });\n                    [downArrow, upArrow, container].forEach(function (el) {\n                        if (el.parentNode) { el.parentNode.removeChild(el); }\n                    });\n                }\n            };\n            Object.defineProperty(intf, 'selectedIndex', {\n                get: function () {\n                    return selectedIndex;\n                },\n                set: function (value) {\n                    if (typeof value !== 'number' || isNaN(value || !isFinite(value))) {\n                        throw new Error('Context menu selected index must be a sane number.');\n                    }\n                    selectedIndex = value;\n                    if (selectedIndex > items.length - 1) {\n                        selectedIndex = items.length - 1;\n                    }\n                    if (selectedIndex < 0) {\n                        selectedIndex = 0;\n                    }\n                    items.forEach(function (item, index) {\n                        if (index === selectedIndex) {\n                            return self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                        }\n                        self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item');\n                    });\n                }\n            });\n            return intf;\n        }\n        function createFilterContextMenuItems(e) {\n            var filterContainer = document.createElement('div'),\n                filterLabel = document.createElement('div'),\n                filterAutoCompleteButton = document.createElement('button'),\n                filterInput = document.createElement('input'),\n                n = e.cell && e.cell.header ? e.cell.header.title || e.cell.header.name : '',\n                autoCompleteItems,\n                iRect;\n            function fillAutoComplete() {\n                autoCompleteItems = {};\n                self.data.forEach(function (row) {\n                    var value = row[e.cell.header.name];\n                    if (autoCompleteItems[value]) { return; }\n                    autoCompleteItems[value] = {\n                        title: self.formatters[e.cell.header.type || 'string'](null, { value: value }),\n                        click: function (e) {\n                            filterInput.value = value;\n                            e.stopPropagation();\n                            filterInput.dispatchEvent(new Event('keyup'));\n                            self.disposeAutocomplete();\n                            return;\n                        }\n                    };\n                });\n                autoCompleteItems = Object.keys(autoCompleteItems).map(function (key) {\n                    return autoCompleteItems[key];\n                });\n            }\n            function createAutoCompleteContext(ev) {\n                if (ev && [40, 38, 13, 9, 27].indexOf(ev.keyCode) !== -1) { return; }\n                fillAutoComplete();\n                iRect = filterInput.getBoundingClientRect();\n                if (autoCompleteContext) {\n                    autoCompleteContext.dispose();\n                    autoCompleteContext = undefined;\n                }\n                autoCompleteContext = createContextMenu(e, {\n                    left: iRect.left,\n                    top: iRect.top,\n                    right: iRect.right,\n                    bottom: iRect.bottom,\n                    height: iRect.height,\n                    width: iRect.width\n                }, autoCompleteItems, {inputDropdown: true});\n                autoCompleteContext.selectedIndex = 0;\n            }\n            self.createInlineStyle(filterLabel, 'canvas-datagrid-context-menu-label');\n            self.createInlineStyle(filterAutoCompleteButton, 'canvas-datagrid-context-menu-filter-button');\n            filterInput.onclick = self.disposeAutocomplete;\n            filterInput.addEventListener('keydown', function (e) {\n                //down\n                if (e.keyCode === 40) {\n                    autoCompleteContext.selectedIndex += 1;\n                }\n                //up\n                if (e.keyCode === 38) {\n                    autoCompleteContext.selectedIndex -= 1;\n                }\n                //enter\n                if (e.keyCode === 13) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    self.disposeContextMenu();\n                }\n                //tab\n                if (e.keyCode === 9) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    e.preventDefault();\n                }\n                //esc\n                if (e.keyCode === 27) {\n                    self.disposeContextMenu();\n                }\n            });\n            filterInput.addEventListener('keyup', function () {\n                self.setFilter(e.cell.header.name, filterInput.value);\n            });\n            filterInput.addEventListener('keyup', createAutoCompleteContext);\n            filterLabel.innerHTML = self.attributes.filterOptionText.replace(/%s/g, n);\n            filterAutoCompleteButton.onclick = function () {\n                if (autoCompleteContext) {\n                    return self.disposeAutocomplete();\n                }\n                createAutoCompleteContext();\n            };\n            filterAutoCompleteButton.innerHTML = self.style.contextFilterButtonHTML;\n            filterContainer.addEventListener('click', function (e) {\n                return e.stopPropagation();\n            });\n            filterContainer.appendChild(filterLabel);\n            filterContainer.appendChild(filterInput);\n            filterContainer.appendChild(filterAutoCompleteButton);\n            e.items.push({\n                title: filterContainer\n            });\n            if (Object.keys(self.columnFilters).length) {\n                Object.keys(self.columnFilters).forEach(function (cf) {\n                    var h = self.getHeaderByName(cf);\n                    e.items.push({\n                        title: self.attributes.removeFilterOptionText.replace(/%s/g, h.title || h.name),\n                        click: function removeFilterClick(e) {\n                            e.preventDefault();\n                            self.setFilter(cf, '');\n                            self.controlInput.focus();\n                        }\n                    });\n                });\n            }\n        }\n        function addDefaultContextMenuItem(e) {\n            if (self.attributes.showFilter) {\n                createFilterContextMenuItems(e);\n            }\n            if (self.attributes.showCopy\n                    && self.selections.reduce(function (p, r) {\n                        return p + r.length;\n                    }, 0) > 0) {\n                e.items.push({\n                    title: self.attributes.copyText,\n                    click: function () {\n                        document.execCommand('copy');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.saveAppearance && self.attributes.showClearSettingsOption\n                    && (Object.keys(self.sizes.rows).length > 0\n                        || Object.keys(self.sizes.columns).length > 0)) {\n                e.items.push({\n                    title: self.attributes.clearSettingsOptionText,\n                    click: function (e) {\n                        e.preventDefault();\n                        self.sizes.rows = {};\n                        self.sizes.columns = {};\n                        self.createRowOrders();\n                        self.createColumnOrders();\n                        self.storedSettings = undefined;\n                        self.dispatchEvent('resizecolumn', {columnWidth: self.style.columnWidth});\n                        self.dispatchEvent('resizerow', {cellHeight: self.style.cellHeight});\n                        self.setStorageData();\n                        self.resize(true);\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.allowSorting && self.attributes.showOrderByOption) {\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextAsc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (e) {\n                        e.preventDefault();\n                        self.order(e.cell.header.name, 'asc');\n                        self.controlInput.focus();\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextDesc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (e) {\n                        e.preventDefault();\n                        self.order(e.cell.header.name, 'desc');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n        }\n        self.disposeAutocomplete = function () {\n            if (autoCompleteContext) {\n                autoCompleteContext.dispose();\n                autoCompleteContext = undefined;\n            }\n        };\n        self.disposeContextMenu = function () {\n            document.removeEventListener('click', self.disposeContextMenu);\n            zIndexTop = 2;\n            self.disposeAutocomplete();\n            self.contextMenu.dispose();\n            self.contextMenu = undefined;\n        };\n        self.contextmenuEvent = function (e, overridePos) {\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            var items = [],\n                pos = overridePos || self.getLayerPos(e, true),\n                ev = {\n                    NativeEvent: e,\n                    cell: self.getCellAt(pos.x, pos.y),\n                    items: items\n                };\n            addDefaultContextMenuItem(ev);\n            if (self.dispatchEvent('contextmenu', ev)) {\n                return;\n            }\n            if (self.contextMenu) {\n                self.disposeContextMenu();\n            }\n            self.contextMenu = createContextMenu(ev, {\n                left: pos.x + pos.rect.left + self.style.contextMenuMarginLeft + self.canvasOffsetLeft,\n                top: pos.y + pos.rect.top + self.style.contextMenuMarginTop + self.canvasOffsetTop,\n                right: ev.cell.width + ev.cell.x + pos.rect.left,\n                bottom: ev.cell.height + ev.cell.y + pos.rect.top,\n                height: ev.cell.height,\n                width: ev.cell.width\n            }, items);\n            document.addEventListener('click', self.disposeContextMenu);\n            e.preventDefault();\n        };\n        return;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        self.defaults = {\n            attributes: [\n                ['name', ''],\n                ['tree', false],\n                ['showNewRow', false],\n                ['treeHorizontalScroll', false],\n                ['saveAppearance', true],\n                ['selectionFollowsActiveCell', false],\n                ['multiLine', false],\n                ['editable', true],\n                ['allowColumnReordering', true],\n                ['allowRowReordering', false],\n                ['allowSorting', true],\n                ['showFilter', true],\n                ['globalRowResize', false],\n                ['pageUpDownOverlap', 1],\n                ['persistantSelectionMode', false],\n                ['rowSelectionMode', false],\n                ['autoResizeColumns', false],\n                ['allowRowHeaderResize', true],\n                ['allowColumnResize', true],\n                ['allowRowResize', true],\n                ['allowRowResizeFromCell', false],\n                ['allowColumnResizeFromCell', false],\n                ['debug', false],\n                ['borderResizeZone', 10],\n                ['showColumnHeaders', true],\n                ['showRowNumbers', true],\n                ['showRowHeaders', true],\n                ['scrollRepeatRate', 75],\n                ['selectionScrollZone', 20],\n                ['resizeScrollZone', 20],\n                ['contextHoverScrollRateMs', 5],\n                ['contextHoverScrollAmount', 2],\n                ['selectionScrollIncrement', 20],\n                ['reorderDeadZone', 3],\n                ['showClearSettingsOption', true],\n                ['showOrderByOption', true],\n                ['clearSettingsOptionText', 'Clear saved settings'],\n                ['showOrderByOptionTextAsc', 'Order by %s ascending'],\n                ['showOrderByOptionTextDesc', 'Order by %s descending'],\n                ['removeFilterOptionText', 'Remove filter on %s'],\n                ['filterOptionText', 'Filter %s'],\n                ['filterTextPrefix', '(filtered) '],\n                ['touchReleaseAnimationDurationMs', 1000],\n                ['touchReleaseAcceleration', 30],\n                ['touchDeadZone', 3],\n                ['touchSelectTimeMs', 800],\n                ['touchScrollZone', 40],\n                ['copyText', 'Copy'],\n                ['showCopy', true]\n            ],\n            styles: [\n                ['activeCellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['activeCellBorderWidth', 0.25],\n                ['activeCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellFont', '16px sans-serif'],\n                ['activeCellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['activeCellOverlayBorderWidth', 1.50],\n                ['activeCellPaddingBottom', 5],\n                ['activeCellPaddingLeft', 5],\n                ['activeCellPaddingRight', 7],\n                ['activeCellPaddingTop', 5],\n                ['activeCellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['activeCellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['activeHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeRowHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeRowHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['autocompleteBottomMargin', 60],\n                ['autosizeHeaderCellPadding', 8],\n                ['autosizePadding', 5],\n                ['backgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cellAutoResizePadding', 13],\n                ['cellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['cellBorderWidth', 0.25],\n                ['cellColor', 'rgba(0, 0, 0, 1)'],\n                ['cellFont', '16px sans-serif'],\n                ['cellHeight', 24],\n                ['cellHeightWithChildGrid', 150],\n                ['cellHorizontalAlignment', 'left'],\n                ['cellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['cellPaddingBottom', 5],\n                ['cellPaddingLeft', 5],\n                ['cellPaddingRight', 7],\n                ['cellPaddingTop', 5],\n                ['cellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['cellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['cellVerticalAlignment', 'center'],\n                ['cellWidthWithChildGrid', 250],\n                ['childContextMenuMarginLeft', -5],\n                ['childContextMenuMarginTop', 0],\n                ['childContextMenuArrowHTML', '&#x25BA;'],\n                ['childContextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuChildArrowFontSize', '12px'],\n                ['columnWidth', 250],\n                ['contextMenuBackground', 'rgba(240, 240, 240, 1)'],\n                ['contextMenuBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextMenuBorderRadius', '3px'],\n                ['contextMenuColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuFilterInvalidExpresion', 'rgba(237, 155, 156, 1)'],\n                ['contextMenuFontFamily', 'sans-serif'],\n                ['contextMenuFontSize', '16px'],\n                ['contextMenuHoverBackground', 'rgba(182, 205, 250, 1)'],\n                ['contextMenuHoverColor', 'rgba(43, 48, 153, 1)'],\n                ['contextMenuItemBorderRadius', '3px'],\n                ['contextMenuItemMargin', '2px'],\n                ['contextMenuLabelDisplay', 'inline-block'],\n                ['contextMenuLabelMargin', '0 3px 0 0'],\n                ['contextMenuLabelMaxWidth', '700px'],\n                ['contextMenuLabelMinWidth', '75px'],\n                ['contextMenuMarginLeft', 3],\n                ['contextMenuMarginTop', -3],\n                ['contextMenuWindowMargin', 6],\n                ['contextMenuOpacity', '0.98'],\n                ['contextMenuPadding', '2px'],\n                ['contextMenuArrowUpHTML', '&#x25B2;'],\n                ['contextMenuArrowDownHTML', '&#x25BC;'],\n                ['contextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextFilterButtonHTML', '&#x25BC;'],\n                ['contextFilterButtonBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterButtonBorderRadius', '3px'],\n                ['cornerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cornerCellBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['editCellBorder', 'solid 1px rgba(110, 168, 255, 1)'],\n                ['editCellBoxShadow', '0 2px 5px rgba(0,0,0,0.4)'],\n                ['editCellFontFamily', 'sans-serif'],\n                ['editCellFontSize', '16px'],\n                ['editCellPaddingLeft', 4],\n                ['editCellColor', 'black'],\n                ['editCellBackgroundColor', 'white'],\n                ['gridBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['gridBorderWidth', 1],\n                ['headerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['headerCellBorderColor', 'rgba(152, 152, 152, 1)'],\n                ['headerCellBorderWidth', 0.25],\n                ['headerCellColor', 'rgba(50, 50, 50, 1)'],\n                ['headerCellFont', '16px sans-serif'],\n                ['headerCellHeight', 25],\n                ['headerCellHorizontalAlignment', 'left'],\n                ['headerCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['headerCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['headerCellPaddingBottom', 5],\n                ['headerCellPaddingLeft', 5],\n                ['headerCellPaddingRight', 7],\n                ['headerCellPaddingTop', 5],\n                ['headerCellVerticalAlignment', 'center'],\n                ['headerOrderByArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['headerOrderByArrowBorderWidth', 1],\n                ['headerOrderByArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['headerOrderByArrowHeight', 8],\n                ['headerOrderByArrowMarginLeft', 0],\n                ['headerOrderByArrowMarginRight', 5],\n                ['headerOrderByArrowMarginTop', 6],\n                ['headerOrderByArrowWidth', 13],\n                ['headerRowWidth', 57],\n                ['minColumnWidth', 45],\n                ['minHeight', 24],\n                ['minRowHeight', 24],\n                ['name', 'default'],\n                ['reorderMarkerBackgroundColor', 'rgba(0, 0, 0, 0.1)'],\n                ['reorderMarkerBorderColor', 'rgba(0, 0, 0, 0.2)'],\n                ['reorderMarkerBorderWidth', 1.25],\n                ['reorderMarkerIndexBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['reorderMarkerIndexBorderWidth', 2.75],\n                ['rowHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['rowHeaderCellBorderColor', 'rgba(152, 152, 152, 1)'],\n                ['rowHeaderCellBorderWidth', 0.25],\n                ['rowHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellFont', '16px sans-serif'],\n                ['rowHeaderCellHeight', 25],\n                ['rowHeaderCellHorizontalAlignment', 'left'],\n                ['rowHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['rowHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['rowHeaderCellPaddingBottom', 5],\n                ['rowHeaderCellPaddingLeft', 5],\n                ['rowHeaderCellPaddingRight', 5],\n                ['rowHeaderCellPaddingTop', 5],\n                ['rowHeaderCellSelectedBackgroundColor', 'rgba(217, 217, 217, 1)'],\n                ['rowHeaderCellSelectedColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellVerticalAlignment', 'center'],\n                ['scrollBarActiveColor', 'rgba(125, 125, 125, 1)'],\n                ['scrollBarBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarBorderWidth', 0.5],\n                ['scrollBarBoxBorderRadius', 3],\n                ['scrollBarBoxColor', 'rgba(192, 192, 192, 1)'],\n                ['scrollBarBoxMargin', 2],\n                ['scrollBarBoxMinSize', 15],\n                ['scrollBarBoxWidth', 8],\n                ['scrollBarCornerBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarCornerBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarWidth', 11],\n                ['selectionOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionOverlayBorderWidth', 0.75],\n                ['treeArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['treeArrowBorderWidth', 1],\n                ['treeArrowClickRadius', 5],\n                ['treeArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['treeArrowHeight', 8],\n                ['treeArrowMarginLeft', 0],\n                ['treeArrowMarginRight', 5],\n                ['treeArrowMarginTop', 6],\n                ['treeArrowWidth', 13],\n                ['treeGridHeight', 250]\n            ]\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        self.createInlineStyle = function (el, className) {\n            var css = {\n                'canvas-datagrid-context-menu-filter-button': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextFilterButtonBorder,\n                    borderRadius: self.style.contextFilterButtonBorderRadius\n                },\n                'canvas-datagrid-context-child-arrow': {\n                    cssFloat: 'right',\n                    color: self.style.childContextMenuArrowColor,\n                    fontSize: self.style.contextMenuChildArrowFontSize,\n                    fontFamily: self.style.contextMenuFontFamily,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-autocomplete': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    position: 'absolute',\n                    zIndex: 3,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-autocomplete-item': {\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                },\n                'canvas-datagrid-autocomplete-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-canvas': {\n                    position: 'absolute',\n                    zIndex: '-1'\n                },\n                'canvas-datagrid': {\n                    position: 'absolute',\n                    background: self.style.backgroundColor,\n                    zIndex: '1',\n                    boxSizing: 'content-box',\n                    padding: '0'\n                },\n                'canvas-datagrid-control-input': {\n                    position: 'fixed',\n                    top: '-5px',\n                    left: '-5px',\n                    border: 'none',\n                    opacity: '0',\n                    cursor: 'pointer',\n                    width: '1px',\n                    height: '1px'\n                },\n                'canvas-datagrid-edit-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 ' + self.style.editCellPaddingLeft + 'px',\n                    fontSize: self.style.editCellFontSize,\n                    fontFamily: self.style.editCellFontFamily,\n                    boxShadow: self.style.editCellBoxShadow,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor\n                },\n                'canvas-datagrid-context-menu-item': {\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-context-menu-label': {\n                    margin: self.style.contextMenuLabelMargin,\n                    display: self.style.contextMenuLabelDisplay,\n                    minWidth: self.style.contextMenuLabelMinWidth,\n                    maxWidth: self.style.contextMenuLabelMaxWidth,\n                },\n                'canvas-datagrid-context-menu': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-invalid-search-regExp': {\n                    background: self.style.contextMenuFilterInvalidExpresion\n                }\n            };\n            if (css[className]) {\n                Object.keys(css[className]).map(function (prop) {\n                    el.style[prop] = css[className][prop];\n                });\n            }\n            return;\n        };\n        self.appendTo = function (n) {\n            self.parentNode = n;\n            self.height = self.parentNode.offsetHeight;\n            self.width = self.parentNode.offsetWidth;\n            if (self.parentNode && /canvas-datagrid-(cell|tree)/.test(self.parentNode.nodeType)) {\n                self.isChildGrid = true;\n                self.parentGrid = self.parentNode.parentGrid;\n                self.ctx = self.parentGrid.context;\n                self.canvas = self.parentGrid.canvas;\n                self.controlInput = self.parentGrid.controlInput;\n                self.eventParent = self.canvas;\n                self.intf.offsetParent = self.parentNode;\n            } else {\n                self.controlInput = document.createElement('input');\n                self.controlInput.onblur = self.blur;\n                self.createInlineStyle(self.controlInput, 'canvas-datagrid-control-input');\n                self.isChildGrid = false;\n                self.parentDOMNode = self.parentNode;\n                self.parentNode = self.parentDOMNode;\n                self.canvas = document.createElement('canvas');\n                self.ctx = self.canvas.getContext('2d');\n                self.ctx.textBaseline = 'alphabetic';\n                self.parentDOMNode.appendChild(self.canvas);\n                self.parentDOMNode.appendChild(self.controlInput);\n                self.eventParent = self.canvas;\n            }\n            self.controlInput.addEventListener('blur', function (e) {\n                if (e.target !== self.canvas) {\n                    self.hasFocus = false;\n                }\n            });\n            window.addEventListener('resize', self.resize);\n            if (MutationObserver) {\n                self.observer = new MutationObserver(function (mutations) {\n                    mutations.forEach(function (mutation) {\n                        self.resize(true);\n                    });\n                });\n                [self.canvas.parentNode].forEach(function (el) {\n                    self.observer.observe(el, { attributes: true });\n                });\n            }\n            self.eventParent.addEventListener('scroll', self.resize, false);\n            self.eventParent.addEventListener('touchstart', self.touchstart, false);\n            self.eventParent.addEventListener('mouseup', self.mouseup, false);\n            self.eventParent.addEventListener('mousedown', self.mousedown, false);\n            self.eventParent.addEventListener('dblclick', self.dblclick, false);\n            self.eventParent.addEventListener('click', self.click, false);\n            self.eventParent.addEventListener('mousemove', self.mousemove);\n            self.eventParent.addEventListener('wheel', self.scrollWheel, false);\n            self.canvas.addEventListener('contextmenu', self.contextmenuEvent, false);\n            (self.isChildGrid ? self.parentGrid : document).addEventListener('copy', self.copy);\n            self.controlInput.addEventListener('keypress', self.keypress, false);\n            self.controlInput.addEventListener('keyup', self.keyup, false);\n            self.controlInput.addEventListener('keydown', self.keydown, false);\n        };\n        self.setDom = function () {\n            self.appendTo(self.args.parentNode);\n        };\n        self.initScrollBox = function () {\n            var sHeight = 0,\n                sWidth = 0,\n                scrollTop = 0,\n                scrollLeft = 0,\n                scrollHeight = 0,\n                scrollWidth = 0,\n                scrollBoxHeight = 20,\n                scrollBoxWidth = 20;\n            function setScrollTop(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollTop value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollHeight) {\n                    value = scrollHeight;\n                }\n                if (scrollHeight < 0) {\n                    value = 0;\n                }\n                scrollTop = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            function setScrollLeft(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollLeft value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollWidth) {\n                    value = scrollWidth;\n                }\n                if (scrollWidth < 0) {\n                    value = 0;\n                }\n                scrollLeft = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            self.scrollBox.scrollTo = function (x, y) {\n\n                setScrollLeft(x, true);\n                setScrollTop(y);\n            };\n            Object.defineProperty(self.scrollBox, 'scrollBoxHeight', {\n                get: function () {\n                    return scrollBoxHeight;\n                },\n                set: function (value) {\n                    scrollBoxHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollBoxWidth', {\n                get: function () {\n                    return scrollBoxWidth;\n                },\n                set: function (value) {\n                    scrollBoxWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'height', {\n                get: function () {\n                    return sHeight;\n                },\n                set: function (value) {\n                    if (scrollHeight < value) {\n                        scrollTop = 0;\n                    }\n                    sHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'width', {\n                get: function () {\n                    return sWidth;\n                },\n                set: function (value) {\n                    sWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollTop', {\n                get: function () {\n                    return scrollTop;\n                },\n                set: setScrollTop\n            });\n            Object.defineProperty(self.scrollBox, 'scrollLeft', {\n                get: function () {\n                    return scrollLeft;\n                },\n                set: setScrollLeft\n            });\n            Object.defineProperty(self.scrollBox, 'scrollHeight', {\n                get: function () {\n                    return scrollHeight;\n                },\n                set: function (value) {\n                    if (scrollTop > value) {\n                        scrollTop = Math.max(value, 0);\n                    }\n                    if (scrollHeight < sHeight) {\n                        scrollTop = 0;\n                    }\n                    scrollHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollWidth', {\n                get: function () {\n                    return scrollWidth;\n                },\n                set: function (value) {\n                    if (scrollLeft > value) {\n                        scrollLeft = Math.max(value, 0);\n                    }\n                    scrollWidth = value;\n                }\n            });\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        // all methods here are exposed by intf\n        // to users\n        /**\n         * Inserts a new column before the specified index into the schema.\n         * @see canvasDataGrid#schema\n         * @tutorial schema\n         * @memberof canvasDataGrid\n         * @name insertColumn\n         * @method\n         * @param {column} rowIndex The column to insert into the schema.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertColumn = function (c, index) {\n            var s = self.getSchema();\n            if (s.length < index) {\n                throw new Error('Index is beyond the length of the schema.');\n            }\n            self.validateColumn(c, s);\n            self.intf.schema = s.splice(index, 0, c);\n        };\n        /**\n         * Deletes a column from the schema at the specified index.\n         * @memberof canvasDataGrid\n         * @name deleteColumn\n         * @tutorial schema\n         * @method\n         * @param {number} index The index of the column to delete.\n         */\n        self.deleteColumn = function (index) {\n            var s = self.getSchema();\n            self.intf.schema = s.splice(index, 1);\n        };\n        /**\n         * Adds a new column into the schema.\n         * @see canvasDataGrid#schema\n         * @tutorial schema\n         * @memberof canvasDataGrid\n         * @name addColumn\n         * @method\n         * @param {column} c The column to add to the schema.\n         */\n        self.addColumn = function (c) {\n            var s = self.getSchema();\n            self.validateColumn(c, s);\n            s.push(c);\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a row from the dataset at the specified index.\n         * @memberof canvasDataGrid\n         * @name deleteRow\n         * @method\n         * @param {number} index The index of the row to delete.\n         */\n        self.deleteRow = function (index) {\n            self.originalData.splice(index, 1);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Inserts a new row into the dataset before the specified index.\n         * @memberof canvasDataGrid\n         * @name insertRow\n         * @method\n         * @param {object} d data.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertRow = function (d, index) {\n            if (self.originalData.length < index) {\n                throw new Error('Index is beyond the length of the dataset.');\n            }\n            self.originalData.splice(index, 0, d);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Adds a new row into the dataset.\n         * @memberof canvasDataGrid\n         * @name addRow\n         * @method\n         * @param {object} d data.\n         */\n        self.addRow = function (d) {\n            self.originalData.push(d);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Sets the height of a given row by index number.\n         * @memberof canvasDataGrid\n         * @name setRowHeight\n         * @method\n         * @param {number} rowIndex The index of the row to set.\n         * @param {number} height Height to set the row to.\n         */\n        self.setRowHeight = function (rowIndex, height) {\n            self.sizes.rows[self.data[rowIndex][self.uniqueId]] = height;\n            self.draw(true);\n        };\n        /**\n         * Sets the width of a given column by index number.\n         * @memberof canvasDataGrid\n         * @name setColumnWidth\n         * @method\n         * @param {number} colIndex The index of the column to set.\n         * @param {number} width Width to set the column to.\n         */\n        self.setColumnWidth = function (colIndex, width) {\n            var s = self.getSchema();\n            self.sizes.columns[s[colIndex][self.uniqueId]] = width;\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the width of the columns due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDataGrid\n         * @name resetColumnWidths\n         * @tutorial schema\n         * @method\n         */\n        self.resetColumnWidths = function () {\n            self.sizes.columns = {};\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the height of the rows due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDataGrid\n         * @name resetRowHeights\n         * @tutorial schema\n         * @method\n         */\n        self.resetRowHeights = function () {\n            self.sizes.rows = {};\n            self.draw(true);\n        };\n        /**\n         * Sets the value of the filter.\n         * @memberof canvasDataGrid\n         * @name setFilter\n         * @method\n         * @param {string} column Name of the column to filter.\n         * @param {string} value The value to filter for.\n         */\n        self.setFilter = function (column, value) {\n            function applyFilter() {\n                self.refreshFromOrigialData();\n                Object.keys(self.columnFilters).forEach(function (filter) {\n                    var header = self.getHeaderByName(column);\n                    if (!header) {\n                        return;\n                    }\n                    self.currentFilter = header.filter || self.filter(column.type || 'string');\n                    self.data = self.data.filter(function (row) {\n                        return self.currentFilter(row[filter], self.columnFilters[filter]);\n                    });\n                });\n                self.resize();\n                self.draw(true);\n            }\n            if (self.coulumn === undefined && value === undefined) {\n                return applyFilter();\n            }\n            if (column && (value === '' || value === undefined)) {\n                delete self.columnFilters[column];\n            } else {\n                self.columnFilters[column] = value;\n            }\n            applyFilter();\n        };\n        /**\n         * Returns the number of pixels to scroll down to line up with row rowIndex.\n         * @memberof canvasDataGrid\n         * @name findRowScrollTop\n         * @method\n         * @param {number} rowIndex The row index of the row to scroll find.\n         */\n        self.findRowScrollTop = function (rowIndex) {\n            var top = 0, x = 0, l = self.data.length,\n                cellBorder = self.style.cellBorderWidth * 2;\n            if (!self.attributes.showNewRow) {\n                l -= 1;\n            }\n            if (rowIndex > l) {\n                throw new Error('Impossible row index');\n            }\n            while (x < rowIndex) {\n                top += (self.sizes.rows[self.data[x][self.uniqueId]] || self.style.cellHeight) + cellBorder;\n                x += 1;\n            }\n            //TODO: This is not super accurate, causes pageUp/Dn to not move around right\n            return top - (self.sizes.rows[self.data[rowIndex][self.uniqueId]] || self.style.cellHeight);\n        };\n        /**\n         * Returns the number of pixels to scroll to the left to line up with column columnIndex.\n         * @memberof canvasDataGrid\n         * @name findColumnScrollLeft\n         * @method\n         * @param {number} columnIndex The column index of the column to find.\n         */\n        self.findColumnScrollLeft = function (columnIndex) {\n            var left = 0, y = 0, s = self.getSchema(), l = s.length - 1;\n            if (columnIndex > l) {\n                throw new Error('Impossible column index');\n            }\n            while (y < columnIndex) {\n                left += self.sizes.columns[s[y][self.uniqueId]] || s[y].width;\n                y += 1;\n            }\n            return left;\n        };\n        /**\n         * Scrolls the cell at cell x, row y.\n         * @memberof canvasDataGrid\n         * @name gotoCell\n         * @method\n         * @param {number} x The column index of the cell to scroll to.\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoCell = function (x, y) {\n            if (x !== undefined) {\n                self.scrollBox.scrollLeft = self.findColumnScrollLeft(x);\n            }\n            if (y !== undefined) {\n                self.scrollBox.scrollTop = self.findRowScrollTop(y);\n            }\n        };\n        /**\n         * Scrolls the row y.\n         * @memberof canvasDataGrid\n         * @name gotoRow\n         * @method\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoRow = function (y) {\n            self.gotoCell(0, y);\n        };\n        /**\n         * Scrolls the cell at cell x, row y into view if it is not already.\n         * @memberof canvasDataGrid\n         * @name scrollIntoView\n         * @method\n         * @param {number} x The column index of the cell to scroll into view.\n         * @param {number} y The row index of the cell to scroll into view.\n         */\n        self.scrollIntoView = function (x, y) {\n            if (self.visibleCells.filter(function (cell) {\n                    return (cell.rowIndex === y || y === undefined)\n                        && (cell.columnIndex === x || x === undefined)\n                        && cell.x > 0\n                        && cell.y > 0\n                        && cell.x + cell.width < self.width\n                        && cell.y + cell.height < self.height;\n                }).length === 0) {\n                self.gotoCell(x, y);\n            }\n        };\n        /**\n         * Sets the active cell. Requires redrawing.\n         * @memberof canvasDataGrid\n         * @name setActiveCell\n         * @method\n         * @param {number} x The column index of the cell to set active.\n         * @param {number} y The row index of the cell to set active.\n         */\n        self.setActiveCell = function (x, y) {\n            self.activeCell = {\n                rowIndex: y,\n                columnIndex: x\n            };\n        };\n        /**\n         * Selects a row.\n         * @memberof canvasDataGrid\n         * @name selectRow\n         * @method\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the row.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectRow = function (rowIndex, ctrl, supressEvent) {\n            var s = self.getSchema();\n            if (self.dragAddToSelection === false) {\n                if (self.selections[rowIndex] && self.selections[rowIndex].length - 1 === s.length) {\n                    if (ctrl) {\n                        self.selections[rowIndex] = [];\n                        return;\n                    }\n                }\n            }\n            if (self.dragAddToSelection === true) {\n                self.selections[rowIndex] = [];\n                self.selections[rowIndex].push(-1);\n                s.forEach(function (col) {\n                    self.selections[rowIndex].push(col.index);\n                });\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Collapse a tree grid by row index.\n         * @memberof canvasDataGrid\n         * @name collapseTree\n         * @method\n         * @param {number} index The index of the row to collapse.\n         */\n        self.collapseTree = function (rowIndex) {\n            var rowId = self.data[rowIndex][self.uniqueId];\n            self.dispatchEvent('collapsetree', {\n                childGrid: self.childGrids[rowId],\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId].blur();\n            self.openChildren[rowId].dispose();\n            delete self.openChildren[rowId];\n            delete self.sizes.trees[rowId];\n            delete self.childGrids[rowId];\n            self.dispatchEvent('resizerow', {\n                cellHeight: self.style.cellHeight\n            });\n            self.resize(true);\n            self.draw(true);\n        };\n        /**\n         * Expands a tree grid by row index.\n         * @memberof canvasDataGrid\n         * @name expandTree\n         * @method\n         * @param {number} index The index of the row to expand.\n         */\n        self.expandTree = function (rowIndex) {\n            var headerCellHeight = self.getHeaderCellHeight(),\n                headerCellWidth = self.sizes.columns.cornerCell || self.style.headerRowWidth,\n                rowId = self.data[rowIndex][self.uniqueId],\n                h = self.sizes.trees[rowId] || self.style.treeGridHeight,\n                treeGrid;\n            if (!self.childGrids[rowId]) {\n                treeGrid = self.createGrid({\n                    debug: self.attributes.debug,\n                    name: self.attributes.saveAppearance\n                        ? self.attributes.name + 'tree' + rowId : undefined,\n                    parentNode: {\n                        parentGrid: self.intf,\n                        nodeType: 'canvas-datagrid-tree',\n                        offsetHeight: h,\n                        offsetWidth: self.width - headerCellWidth,\n                        header: { width: self.width - headerCellWidth },\n                        offsetLeft: headerCellWidth,\n                        offsetTop: headerCellHeight,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: 'tree',\n                        data: self.data[rowIndex]\n                    }\n                });\n                self.childGrids[rowId] = treeGrid;\n            }\n            treeGrid = self.childGrids[rowId];\n            treeGrid.visible = true;\n            self.dispatchEvent('expandtree', {\n                treeGrid: treeGrid,\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId] = treeGrid;\n            self.sizes.trees[rowId] = h;\n            self.dispatchEvent('resizerow', {height: self.style.cellHeight});\n            self.resize(true);\n        };\n        /**\n         * Toggles tree grid open and close by row index.\n         * @memberof canvasDataGrid\n         * @name toggleTree\n         * @method\n         * @param {number} index The index of the row to toggle.\n         */\n        self.toggleTree = function (rowIndex) {\n            var i = self.openChildren[self.data[rowIndex][self.uniqueId]];\n            if (i) {\n                return self.collapseTree(rowIndex);\n            }\n            self.expandTree(rowIndex);\n        };\n        /**\n         * Returns a header from the schema by name.\n         * @memberof canvasDataGrid\n         * @name getHeaderByName\n         * @tutorial schema\n         * @method\n         * @returns {header} header with the selected name, or undefined.\n         * @param {string} name The name of the column to resize.\n         */\n        self.getHeaderByName = function (name) {\n            var x, i = self.getSchema();\n            for (x = 0; x < i.length; x += 1) {\n                if (i[x].name === name) {\n                    return i[x];\n                }\n            }\n        };\n        /**\n         * Resizes a column to fit the longest value in the column. Call without a value to resize all columns.\n         * Warning, can be slow on very large record sets (1m records ~3-5 seconds on an i7).\n         * @memberof canvasDataGrid\n         * @name fitColumnToValues\n         * @method\n         * @param {string} name The name of the column to resize.\n         */\n        self.fitColumnToValues = function (name) {\n            self.sizes.columns[name === 'cornerCell' ? name : self.getHeaderByName(name)[self.uniqueId]]\n                = self.findColumnMaxTextLength(name);\n            self.resize();\n            self.draw(true);\n        };\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDataGrid\n         * @name isCellVisible\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {cell} cell The cell to check for.  Alternatively you can pass an object { x: <x-index>, y: <y-index> }.\n         */\n        self.isCellVisible = function (cell) {\n            var x, l = self.visibleCells.length;\n            for (x = 0; x < l; x += 1) {\n                if (cell.x === self.visibleCells[x].x && cell.y === self.visibleCells[x].y) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n         * Sets the order of the data.\n         * @memberof canvasDataGrid\n         * @name order\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} columnName Number of pixels from the left.\n         * @param {string} direction `asc` for ascending or `desc` for descending.\n         * @param {bool} dontSetStorageData Don't store this setting for future use.\n         */\n        self.order = function (columnName, direction, dontSetStorageData) {\n            var f,\n                c = self.getSchema().filter(function (col) {\n                    return col.name === columnName;\n                });\n            self.orderBy = columnName;\n            if (c.length === 0) {\n                throw new Error('Cannot sort.  No such column name');\n            }\n            f = self.sorters[c[0].type];\n            if (!f && c[0].type !== undefined) {\n                console.warn('Cannot sort type \"%s\" falling back to string sort.', c[0].type);\n            }\n            self.data = self.data.sort(typeof f === 'function' ? f(columnName, direction) : self.sorters.string);\n            self.dispatchEvent('ordercolumn', {name: columnName, direction: direction});\n            self.draw(true);\n            if (dontSetStorageData) { return; }\n            self.setStorageData();\n        };\n        self.isInGrid = function (e) {\n            if (e.x < 0\n                    || e.x > self.width\n                    || e.y < 0\n                    || e.y > self.height) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Gets the cell at columnIndex and rowIndex.\n         * @memberof canvasDataGrid\n         * @name getVisibleCellByIndex\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Column index.\n         * @param {number} y Row index.\n         */\n        self.getVisibleCellByIndex = function (x, y) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === x && c.rowIndex === y;\n            })[0];\n        };\n        /**\n         * Gets the cell at grid pixel coordinate x and y.\n         * @memberof canvasDataGrid\n         * @name getCellAt\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Number of pixels from the left.\n         * @param {number} y Number of pixels from the top.\n         */\n        self.getCellAt = function (x, y, useTouchScrollZones) {\n            var tsz = useTouchScrollZones ? self.attributes.touchScrollZone : 0, i, l = self.visibleCells.length, cell;\n            if (!self.visibleCells || !self.visibleCells.length) { return; }\n            self.hasFocus = true;\n            if (!(y < self.height\n                && y > 0\n                && x < self.width\n                && x > 0)) {\n                self.hasFocus = false;\n                return {\n                    dragContext: 'inherit',\n                    context: 'inherit'\n                };\n            }\n            for (i = 0; i < l; i += 1) {\n                cell = self.visibleCells[i];\n                if (useTouchScrollZones && /(vertical|horizontal)-scroll-/.test(cell.style)) {\n                    cell.x -= tsz;\n                    cell.y -= tsz;\n                    cell.height += tsz;\n                    cell.width += tsz;\n                }\n                if (cell.x - self.style.cellBorderWidth < x\n                        && cell.x + cell.width + self.style.cellBorderWidth > x\n                        && cell.y - self.style.cellBorderWidth < y\n                        && cell.y + cell.height + self.style.cellBorderWidth > y) {\n                    if (/vertical-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'vertical-scroll-box';\n                        cell.context = 'vertical-scroll-box';\n                        if (y > self.scrollBox.box.v.y + self.scrollBox.scrollBoxHeight) {\n                            cell.dragContext = 'vertical-scroll-bottom';\n                            cell.context = 'vertical-scroll-bottom';\n                        } else if (y < self.scrollBox.box.v.y) {\n                            cell.dragContext = 'vertical-scroll-top';\n                            cell.context = 'vertical-scroll-top';\n                        }\n                        self.canvas.style.cursor = 'default';\n                        return cell;\n                    }\n                    if (/horizontal-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'horizontal-scroll-box';\n                        cell.context = 'horizontal-scroll-box';\n                        if (x > self.scrollBox.box.h.x + self.scrollBox.scrollBoxWidth) {\n                            cell.dragContext = 'horizontal-scroll-right';\n                            cell.context = 'horizontal-scroll-right';\n                        } else if (x < self.scrollBox.box.h.x) {\n                            cell.dragContext = 'horizontal-scroll-left';\n                            cell.context = 'horizontal-scroll-left';\n                        }\n                        self.canvas.style.cursor = 'default';\n                        return cell;\n                    }\n                    if (cell.x + cell.width - (self.attributes.borderResizeZone * 0.4) < x\n                            && cell.x + cell.width + (self.attributes.borderResizeZone * 0.6) > x\n                            && self.attributes.allowColumnResize\n                            && ((self.attributes.allowColumnResizeFromCell && cell.style === 'cell')\n                                || cell.style !== 'cell')\n                            && ((self.attributes.allowRowHeaderResize\n                                && ['rowHeaderCell', 'cornerCell'].indexOf(cell.style) !== -1)\n                                || ['rowHeaderCell', 'cornerCell'].indexOf(cell.style) === -1)) {\n                        cell.context = 'ew-resize';\n                        cell.dragContext = 'ew-resize';\n                        return cell;\n                    }\n                    if (cell.y + cell.height - (self.attributes.borderResizeZone * 0.4) < y\n                            && cell.y + cell.height + (self.attributes.borderResizeZone * 0.6) > y\n                            && self.attributes.allowRowResize\n                            && ((self.attributes.allowRowResizeFromCell && cell.style === 'cell')\n                                || cell.style !== 'cell')\n                            && cell.style !== 'headerCell') {\n                        cell.context = 'ns-resize';\n                        cell.dragContext = 'ns-resize';\n                        return cell;\n                    }\n                    if (cell.style === 'headerCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'column-reorder';\n                        return cell;\n                    }\n                    if (cell.style === 'rowHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'row-reorder';\n                        return cell;\n                    }\n                    if (cell.isGrid) {\n                        self.hasFocus = false;\n                        cell.dragContext = 'cell-grid';\n                        cell.context = 'cell-grid';\n                        return cell;\n                    }\n                    if (cell.style === 'tree-grid') {\n                        self.hasFocus = false;\n                        cell.dragContext = 'tree';\n                        cell.context = 'tree';\n                        return cell;\n                    }\n                    cell.dragContext = 'cell';\n                    cell.context = 'cell';\n                    return cell;\n                }\n            }\n            self.hasFocus = false;\n            return {\n                context: 'inherit'\n            };\n        };\n        /**\n         * Gets the bounds of current selection. \n         * @returns {rect} selection.\n         * @memberof canvasDataGrid\n         * @name getSelectionBounds\n         * @method\n         */\n        self.getSelectionBounds = function () {\n            var low = {x: Infinity, y: Infinity},\n                high = {x: -Infinity, y: -Infinity};\n            self.data.forEach(function (row, rowIndex) {\n                var maxCol, minCol;\n                if (self.selections[rowIndex] && self.selections[rowIndex].length) {\n                    low.y = rowIndex < low.y ? rowIndex : low.y;\n                    high.y = rowIndex > high.y ? rowIndex : high.y;\n                    maxCol = Math.max.apply(null, self.selections[rowIndex]);\n                    minCol = Math.min.apply(null, self.selections[rowIndex]);\n                    low.x = minCol < low.x ? minCol : low.x;\n                    high.x = maxCol > high.x ? maxCol : high.x;\n                }\n            });\n            return {\n                top: low.y,\n                left: low.x,\n                bottom: high.y,\n                right: high.x\n            };\n        };\n        /**\n         * Returns an auto generated schema based on data structure.\n         * @memberof canvasDataGrid\n         * @name getSchemaFromData\n         * @method\n         * @tutorial schema\n         * @returns {schema} schema A schema based on the first item in the data array.\n         */\n        self.getSchemaFromData = function () {\n            return Object.keys(self.data[0] || {' ': ''}).map(function mapEachSchemaColumn(key, index) {\n                var type = self.getBestGuessDataType(key),\n                    i = {\n                        name: key,\n                        title: key,\n                        width: self.style.columnWidth,\n                        index: index,\n                        type: type,\n                        filter: self.filter(type)\n                    };\n                if (key === self.uniqueId) {\n                    i.hidden = true;\n                }\n                i[self.uniqueId] = self.getSchemaNameHash(key);\n                return i;\n            });\n        };\n        /**\n         * Clears the change log grid.changes that keeps track of changes to the data set.\n         * This does not undo changes or alter data it is simply a convince array to keep\n         * track of changes made to the data since last this method was called.\n         * @memberof canvasDataGrid\n         * @name clearChangeLog\n         * @method\n         */\n        self.clearChangeLog = function () {\n            self.changes = [];\n        };\n        /**\n         * Selects an area of the grid.\n         * @memberof canvasDataGrid\n         * @name selectArea\n         * @method\n         * @param {rect} bounds A rect object representing the selected values.\n         */\n        self.selectArea = function (bounds, ctrl) {\n            self.selectionBounds = bounds || self.selectionBounds;\n            var x, y, s = self.getSchema();\n            if (!ctrl) {\n                self.selections = [];\n            }\n            if (self.selectionBounds.top < -1\n                    || self.selectionBounds.bottom > self.data.length\n                    || self.selectionBounds.left < -1\n                    || self.selectionBounds.right > s.length) {\n                throw new Error('Impossible selection area');\n            }\n            for (x = self.selectionBounds.top; x <= self.selectionBounds.bottom; x += 1) {\n                self.selections[x] = [];\n                for (y = self.selectionBounds.left; y <= self.selectionBounds.right; y += 1) {\n                    if (self.selections[x].indexOf(y) === -1) {\n                        self.selections[x].push(y);\n                    }\n                }\n            }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Returns the maximum text width for a given column by column name.\n         * @memberof canvasDataGrid\n         * @name findColumnMaxTextLength\n         * @method\n         * @returns {number} The number of pixels wide the maximum width value in the selected column.\n         * @param {string} name The name of the column to calculate the value's width of.\n         */\n        self.findColumnMaxTextLength = function (name) {\n            var m = -Infinity;\n            if (name === 'cornerCell') {\n                self.ctx.font = self.style.rowHeaderCellFont;\n                return self.ctx.measureText((self.data.length + (self.attributes.showNewRow ? 1 : 0)).toString()).width\n                    + self.style.autosizePadding + self.style.autosizeHeaderCellPadding\n                    + self.style.rowHeaderCellPaddingRight\n                    + self.style.rowHeaderCellPaddingLeft\n                    + (self.attributes.tree ? self.style.treeArrowWidth\n                        + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight : 0);\n            }\n            self.getSchema().forEach(function (col) {\n                if (col.name !== name) { return; }\n                self.ctx.font = self.style.headerCellFont;\n                var t = self.ctx.measureText(col.title || col.name).width\n                    + self.style.headerCellPaddingRight\n                    + self.style.headerCellPaddingLeft;\n                m = t > m ? t : m;\n            });\n            self.data.forEach(function (row) {\n                self.ctx.font = self.style.cellFont;\n                var t = self.ctx.measureText(row[name]).width\n                    + self.style.cellPaddingRight\n                    + self.style.cellPaddingLeft + self.style.cellAutoResizePadding;\n                m = t > m ? t : m;\n            });\n            return m;\n        };\n        /**\n         * Gets the total width of all header columns.\n         * @memberof canvasDataGrid\n         * @name getHeaderWidth\n         * @method\n         */\n        self.getHeaderWidth = function () {\n            return self.getVisibleSchema().reduce(function (total, header) {\n                return total + header.width;\n            }, 0);\n        };\n        self.formatters.string = function cellFormatterString(ctx, cell) {\n            return cell.value !== undefined ? cell.value : '';\n        };\n        self.formatters.rowHeaderCell = self.formatters.string;\n        self.formatters.headerCell = self.formatters.string;\n        self.formatters.number = self.formatters.string;\n        self.formatters.int = self.formatters.string;\n        self.formatters.html = self.formatters.string;\n        self.sorters.string = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (a[columnName] === undefined || a[columnName] === null) {\n                    return 1;\n                }\n                if (b[columnName] === undefined || b[columnName] === null) {\n                    return 0;\n                }\n                if (asc) {\n                    if (!a[columnName].localeCompare) { return 1; }\n                    return a[columnName].localeCompare(b[columnName]);\n                }\n                if (!b[columnName].localeCompare) { return 1; }\n                return b[columnName].localeCompare(a[columnName]);\n            };\n        };\n        self.sorters.number = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return a[columnName] - b[columnName];\n                }\n                return b[columnName] - a[columnName];\n            };\n        };\n        self.sorters.date = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return new Date(a[columnName]).getTime()\n                        - new Date(b[columnName]).getTime();\n                }\n                return new Date(b[columnName]).getTime()\n                        - new Date(a[columnName]).getTime();\n            };\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ })\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// canvas-datagrid.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 716da9dffe168b9561db","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([\n    './draw',\n    './events',\n    './intf',\n    './contextMenu',\n    './defaults',\n    './dom',\n    './publicMethods'\n], function context() {\n    'use strict';\n    var modules = Array.prototype.slice.call(arguments);\n    function grid(args) {\n        args = args || {};\n        var self = {};\n        self.args = args;\n        self.createGrid = grid;\n        self.orders = {\n            rows: [],\n            columns: []\n        };\n        self.hasFocus = false;\n        self.activeCell = {\n            columnIndex: 0,\n            rowIndex: 0\n        };\n        self.storageName = 'canvasDataGrid';\n        self.invalidSearchExpClass = 'canvas-datagrid-invalid-search-regExp';\n        self.localStyleLibraryStorageKey = 'canvas-datagrid-user-style-library';\n        self.uniqueId = '_canvasDataGridUniqueId';\n        self.orderBy = self.uniqueId;\n        self.orderDirection = 'asc';\n        self.columnFilters = {};\n        self.filters = {};\n        self.ellipsisCache = {};\n        self.scrollBox = {};\n        self.visibleRows = [];\n        self.sizes = {\n            rows: {},\n            columns: {},\n            trees: {}\n        };\n        self.currentFilter = function () {\n            return true;\n        };\n        self.selections = [];\n        self.hovers = {};\n        self.attributes = {};\n        self.style = {};\n        self.intf = {};\n        self.formatters = {};\n        self.sorters = {};\n        self.schemaHashes = {};\n        self.events = {};\n        self.uId = 0;\n        self.changes = [];\n        self.scrollIndexTop = 0;\n        self.scrollPixelTop = 0;\n        self.scrollIndexLeft = 0;\n        self.scrollPixelLeft = 0;\n        self.childGrids = {};\n        self.openChildren = {};\n        self.scrollModes = [\n            'vertical-scroll-box',\n            'vertical-scroll-top',\n            'vertical-scroll-bottom',\n            'horizontal-scroll-box',\n            'horizontal-scroll-right',\n            'horizontal-scroll-left'\n        ];\n        self.mouse = { x: 0, y: 0};\n        self.getSelectedData = function (expandToRow) {\n            var d = [], s = self.getSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                d[index] = {};\n                if (expandToRow) {\n                    s.forEach(function (column) {\n                        d[index][column.name] = self.data[index][column.name];\n                    });\n                } else {\n                    row.forEach(function (col) {\n                        if (col === -1) { return; }\n                        d[index][s[col].name] = self.data[index][s[col].name];\n                    });\n                }\n            });\n            return d;\n        };\n        self.scrollOffset = function (e) {\n            var x = 0, y = 0;\n            while (e.parentNode) {\n                if (e.nodeType !== 'canvas-datagrid-tree'\n                        && e.nodeType !== 'canvas-datagrid-cell') {\n                    x -= e.scrollLeft;\n                    y -= e.scrollTop;\n                }\n                e = e.parentNode;\n            }\n            return {left: x, top: y};\n        };\n        self.position = function (e, ignoreScrollOffset) {\n            var x = 0, y = 0, s = e, h, w;\n            while (e.offsetParent) {\n                x += e.offsetLeft;\n                y += e.offsetTop;\n                h = e.offsetHeight;\n                w = e.offsetWidth;\n                e = e.offsetParent;\n            }\n            if (ignoreScrollOffset) {\n                return {left: x, top: y, height: h, width: w};\n            }\n            e = s;\n            s = self.scrollOffset(e);\n            return { left: x + s.left, top: y + s.top, height: h, width: w };\n        };\n        self.getLayerPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.clientX - rect.left,\n                    y: e.clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        self.fillArray = function (low, high, step) {\n            step = step || 1;\n            var i = [], x;\n            for (x = low; x <= high; x += step) {\n                i[x] = x;\n            }\n            return i;\n        };\n        self.getHeaderCellHeight = function () {\n            if (!self.attributes.showColumnHeaders) { return 0; }\n            return self.sizes.rows[-1] || self.style.headerCellHeight;\n        };\n        self.getHeaderCellWidth = function () {\n            if (!self.attributes.showRowHeaders) { return 0; }\n            return self.sizes.columns.cornerCell || self.style.headerRowWidth;\n        };\n        self.setStorageData = function () {\n            if (!self.attributes.saveAppearance) { return; }\n            localStorage.setItem(self.storageName + '-' + self.attributes.name, JSON.stringify({\n                sizes: {\n                    rows: self.sizes.rows,\n                    columns: self.sizes.columns\n                },\n                orders: {\n                    rows: self.orders.rows,\n                    columns: self.orders.columns\n                },\n                orderBy: self.orderBy,\n                orderDirection: self.orderDirection\n            }));\n        };\n        self.getSchema = function () {\n            return self.schema || self.tempSchema;\n        };\n        self.createColumnOrders = function () {\n            var s = self.getSchema();\n            self.orders.columns = self.fillArray(0, s.length - 1);\n        };\n        self.createRowOrders = function () {\n            self.orders.rows = self.fillArray(0, self.data.length - 1);\n        };\n        self.getVisibleSchema = function () {\n            return self.getSchema().filter(function (col) { return !col.hidden; });\n        };\n        self.createNewRowData = function () {\n            self.newRow = {};\n            self.newRow[self.uniqueId] = self.uId;\n            self.uId += 1;\n            self.getSchema().forEach(function forEachHeader(header, index) {\n                var d = header.defaultValue || '';\n                if (typeof d === 'function') {\n                    d = d.apply(self.intf, [header, index]);\n                }\n                self.newRow[header.name] = d;\n            });\n        };\n        self.getSchemaNameHash = function (key) {\n            var n = 0;\n            while (self.schemaHashes[key]) {\n                n += 1;\n                key = key + n;\n            }\n            return key;\n        };\n        self.filter = function (type) {\n            var f = self.filters[type];\n            if (!f && type !== undefined) {\n                console.warn('Cannot find filter for type %s, falling back to substring match.', type);\n                f = self.filters.string;\n            }\n            return f;\n        };\n        self.getBestGuessDataType = function (columnName) {\n            var t, x, l = self.data.length;\n            for (x = 0; x < l; x += 1) {\n                if ([null, undefined].indexOf(self.data[x][columnName]) !== -1) {\n                    t = typeof self.data[x];\n                    return t === 'object' ? 'string' : t;\n                }\n            }\n            return 'string';\n        };\n        self.drawChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].draw();\n            });\n        };\n        self.resizeChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].resize();\n            });\n        };\n        self.getClippingRect = function (ele) {\n            var boundingRect = self.position(self.parentNode),\n                eleRect = self.position(ele),\n                s = self.scrollOffset(self.canvas),\n                clipRect = {\n                    x: 0,\n                    y: 0,\n                    h: 0,\n                    w: 0\n                },\n                parentRect = {\n                    x: -Infinity,\n                    y: -Infinity,\n                    h: Infinity,\n                    w: Infinity\n                },\n                headerCellHeight = self.getHeaderCellHeight(),\n                headerCellWidth = self.getHeaderCellWidth();\n            boundingRect.top -= s.top;\n            boundingRect.left -= s.left;\n            eleRect.top -= s.top;\n            eleRect.left -= s.left;\n            clipRect.h = boundingRect.top + boundingRect.height - ele.offsetTop - self.style.scrollBarWidth;\n            clipRect.w = boundingRect.left + boundingRect.width - ele.offsetLeft - self.style.scrollBarWidth;\n            clipRect.x = boundingRect.left + (eleRect.left * -1) + headerCellWidth;\n            clipRect.y = boundingRect.top + (eleRect.top * -1) + headerCellHeight;\n            return {\n                x: clipRect.x > parentRect.x ? clipRect.x : parentRect.x,\n                y: clipRect.y > parentRect.y ? clipRect.y : parentRect.y,\n                h: clipRect.h < parentRect.h ? clipRect.h : parentRect.h,\n                w: clipRect.w < parentRect.w ? clipRect.w : parentRect.w\n            };\n        };\n        self.clipElement = function (ele) {\n            var clipRect = self.getClippingRect(ele);\n            if (clipRect.w < 0) { clipRect.w = 0; }\n            if (clipRect.h < 0) { clipRect.h = 0; }\n            ele.style.clip = 'rect('\n                + clipRect.y + 'px,'\n                + clipRect.w + 'px,'\n                + clipRect.h + 'px,'\n                + clipRect.x + 'px'\n                + ')';\n            // INFO https://developer.mozilla.org/en-US/docs/Web/CSS/clip\n            // clip has been \"deprecated\" for clipPath.  Of course nothing but chrome\n            // supports clip path, so we'll keep using clip until someday clipPath becomes\n            // more widely support.  The code below works correctly, but setting clipPath and clip\n            // at the same time has undesirable results.\n            // ele.style.clipPath = 'polygon('\n            //     + clipRect.x + 'px ' + clipRect.y + 'px,'\n            //     + clipRect.x + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.y + 'px'\n            //     + ')';\n        };\n        self.autoScrollZone = function (e, x, y, ctrl) {\n            var setTimer,\n                headerCellWidth = self.getHeaderCellWidth(),\n                headerCellHeight = self.getHeaderCellHeight();\n            if (x > self.width - self.attributes.selectionScrollZone && x < self.width) {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y > self.height - self.attributes.selectionScrollZone && y < self.height) {\n                self.scrollBox.scrollTop += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (x - self.attributes.selectionScrollZone - headerCellWidth < 0) {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y - self.attributes.selectionScrollZone - headerCellHeight < 0) {\n                self.scrollBox.scrollTop -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (setTimer && !ctrl && self.currentCell && self.currentCell.columnIndex !== -1) {\n                self.scrollTimer = setTimeout(self.mousemove, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.refreshFromOrigialData = function () {\n            self.data = self.originalData.filter(function (row) {\n                return true;\n            });\n        };\n        self.validateColumn = function (c, s) {\n            if (!c.name) {\n                throw new Error('A column must contain at least a name.');\n            }\n            if (s.filter(function (i) { return i.name === c.name; }).length > 0) {\n                throw new Error('A column with the name '\n                    + c.name + ' already exists and cannot be added again.');\n            }\n            return true;\n        };\n        self.setDefaults = function (obj1, obj2, key, def) {\n            obj1[key] = obj2[key] === undefined ? def : obj2[key];\n        };\n        self.setAttributes = function () {\n            self.defaults.attributes.forEach(function eachAttribute(i) {\n                self.setDefaults(self.attributes, args, i[0], i[1]);\n            });\n        };\n        self.setStyle = function () {\n            self.defaults.styles.forEach(function eachStyle(i) {\n                self.setDefaults(self.style, args.style || {}, i[0], i[1]);\n            });\n        };\n        self.autosize = function (colName) {\n            self.getVisibleSchema().forEach(function (col) {\n                if (col.name === colName || colName === undefined) {\n                    self.fitColumnToValues(col.name);\n                }\n            });\n            self.fitColumnToValues('cornerCell');\n        };\n        self.dispose = function () {\n            if (!self.isChildGrid && self.canvas && self.canvas.parentNode) {\n                self.canvas.parentNode.removeChild(self.canvas);\n            }\n            self.eventParent.removeEventListener('mouseup', self.mouseup, false);\n            self.eventParent.removeEventListener('mousedown', self.mousedown, false);\n            self.eventParent.removeEventListener('dblclick', self.dblclick, false);\n            self.eventParent.removeEventListener('click', self.click, false);\n            self.eventParent.removeEventListener('mousemove', self.mousemove);\n            self.eventParent.removeEventListener('wheel', self.scrollWheel, false);\n            self.canvas.removeEventListener('contextmenu', self.contextmenu, false);\n            self.canvas.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('keypress', self.keypress, false);\n            self.controlInput.removeEventListener('keyup', self.keyup, false);\n            self.controlInput.removeEventListener('keydown', self.keydown, false);\n            window.removeEventListener('resize', self.resize);\n            if (self.observer && self.observer.disconnect) {\n                self.observer.disconnect();\n            }\n        };\n        self.tryLoadStoredOrders = function () {\n            var s;\n            if (self.storedSettings && typeof self.storedSettings.orders === 'object') {\n                if (self.storedSettings.orders.rows.length >= self.data.length) {\n                    self.orders.rows = self.storedSettings.orders.rows;\n                }\n                s = self.getSchema();\n                self.orders.columns = self.storedSettings.orders.columns;\n                s.forEach(function (h, i) {\n                    if (self.orders.columns.indexOf(i) === -1) {\n                        self.orders.columns.push(i);\n                    }\n                });\n                self.orderBy = self.storedSettings.orderBy === undefined\n                    ? self.uniqueId : self.storedSettings.orderBy;\n                self.orderDirection = self.storedSettings.orderDirection === undefined\n                    ? self.uniqueId : self.storedSettings.orderDirection;\n                if (self.getHeaderByName(self.orderBy) && self.orderDirection) {\n                    self.order(self.orderBy, self.orderDirection);\n                }\n            }\n        };\n        self.getFontHeight = function (fontStyle) {\n            return parseFloat(fontStyle, 10);\n        };\n        self.getFontHeightLong = function (fontStyle) {\n            var pixels,\n                start,\n                end,\n                row,\n                column,\n                index,\n                canvas = document.createElement('canvas'),\n                ctx = canvas.getContext('2d');\n            canvas.height = 5000;\n            canvas.width = 5000;\n            ctx.save();\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\n            ctx.textBaseline = 'top';\n            ctx.fillStyle = 'white';\n            ctx.font = fontStyle;\n            ctx.fillText('gM', 0, 0);\n            pixels = ctx.getImageData(0, 0, canvas.width, canvas.height).data;\n            start = -1;\n            end = -1;\n            for (row = 0; row < canvas.height; row += 1) {\n                for (column = 0; column < canvas.width; column += 1) {\n                    index = (row * canvas.width + column) * 4;\n                    if (pixels[index] === 0) {\n                        if (column === canvas.width - 1 && start !== -1) {\n                            end = row;\n                            row = canvas.height;\n                            break;\n                        }\n                    } else {\n                        if (start === -1) {\n                            start = row;\n                        }\n                        break;\n                    }\n                }\n            }\n            ctx.restore();\n            console.log(end - start);\n            return end - start;\n        };\n        self.parseFont = function (key) {\n            if (/Font/.test(key)) {\n                self.style[key + 'Height'] = self.getFontHeight(self.style[key]);\n            }\n        };\n        self.init = function () {\n            var publicStyleKeyIntf = {};\n            self.setAttributes();\n            self.setStyle();\n            self.initScrollBox();\n            self.setDom();\n            Object.keys(self.style).forEach(self.parseFont);\n            self.intf.type = 'canvas-datagrid';\n            self.intf.addEventListener = self.addEventListener;\n            self.intf.removeEventListener = self.removeEventListener;\n            self.intf.dispatchEvent = self.dispatchEvent;\n            self.intf.dispose = self.dispose;\n            self.intf.appendTo = self.appendTo;\n            self.intf.filters = self.filters;\n            self.intf.sorters = self.sorters;\n            self.intf.autosize = self.autosize;\n            self.intf.beginEditAt = self.beginEditAt;\n            self.intf.endEdit = self.endEdit;\n            self.intf.setActiveCell = self.setActiveCell;\n            self.intf.scrollIntoView = self.scrollIntoView;\n            self.intf.clearChangeLog = self.clearChangeLog;\n            self.intf.gotoCell = self.gotoCell;\n            self.intf.gotoRow = self.gotoRow;\n            self.intf.findColumnScrollLeft = self.findColumnScrollLeft;\n            self.intf.findRowScrollTop = self.findRowScrollTop;\n            self.intf.fitColumnToValues = self.fitColumnToValues;\n            self.intf.findColumnMaxTextLength = self.findColumnMaxTextLength;\n            self.intf.disposeContextMenu = self.disposeContextMenu;\n            self.intf.getCellAt = self.getCellAt;\n            self.intf.isCellVisible = self.isCellVisible;\n            self.intf.order = self.order;\n            self.intf.draw = self.draw;\n            self.intf.selectArea = self.selectArea;\n            self.intf.clipElement = self.clipElement;\n            self.intf.getSchemaFromData = self.getSchemaFromData;\n            self.intf.setFilter = self.setFilter;\n            self.intf.selectRow = self.selectRow;\n            self.intf.parentGrid = self.parentGrid;\n            self.intf.toggleTree = self.toggleTree;\n            self.intf.expandTree = self.expandTree;\n            self.intf.collapseTree = self.collapseTree;\n            self.intf.canvas = self.canvas;\n            self.intf.context = self.ctx;\n            self.intf.insertRow = self.insertRow;\n            self.intf.deleteRow = self.deleteRow;\n            self.intf.addRow = self.addRow;\n            self.intf.insertColumn = self.insertColumn;\n            self.intf.deleteColumn = self.deleteColumn;\n            self.intf.addColumn = self.addColumn;\n            self.intf.getClippingRect = self.getClippingRect;\n            self.intf.setRowHeight = self.setRowHeight;\n            self.intf.setColumnWidth = self.setColumnWidth;\n            self.intf.resetColumnWidths = self.resetColumnWidths;\n            self.intf.resetRowHeights = self.resetRowHeights;\n            self.intf.resize = self.resize;\n            self.intf.drawChildGrids = self.drawChildGrids;\n            self.intf.style = {};\n            Object.keys(self.style).forEach(function (key) {\n                // unless this line is here, Object.keys() will not work on <instance>.style\n                publicStyleKeyIntf[key] = undefined;\n                Object.defineProperty(publicStyleKeyIntf, key, {\n                    get: function () {\n                        return self.style[key];\n                    },\n                    set: function (value) {\n                        self.parseFont(value);\n                        self.style[key] = value;\n                        self.draw(true);\n                        self.dispatchEvent('stylechanged', {name: key, value: value});\n                    }\n                });\n            });\n            Object.defineProperty(self.intf, 'style', {\n                get: function () {\n                    return publicStyleKeyIntf;\n                },\n                set: function (value) {\n                    Object.keys(value).forEach(function (key) {\n                        self.parseFont(value);\n                        self.style[key] = value[key];\n                    });\n                    self.draw(true);\n                    self.dispatchEvent('stylechanged', {name: 'style', value: value});\n                }\n            });\n            Object.keys(self.attributes).forEach(function (key) {\n                Object.defineProperty(self.intf.attributes, key, {\n                    get: function () {\n                        return self.attributes[key];\n                    },\n                    set: function (value) {\n                        self.attributes[key] = value;\n                        self.draw(true);\n                        self.dispatchEvent('attributechanged', {name: key, value: value[key]});\n                    }\n                });\n            });\n            self.filters.string = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                var filterRegExp;\n                self.invalidFilterRegEx = undefined;\n                try {\n                    filterRegExp = new RegExp(filterFor, 'ig');\n                } catch (e) {\n                    self.invalidFilterRegEx = e;\n                    return;\n                }\n                return filterRegExp.test(value);\n            };\n            self.filters.number = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                return value === filterFor;\n            };\n            if (self.attributes.name && self.attributes.saveAppearance) {\n                self.storedSettings = localStorage.getItem(self.storageName + '-' + self.attributes.name);\n                if (self.storedSettings) {\n                    try {\n                        self.storedSettings = JSON.parse(self.storedSettings);\n                    } catch (e) {\n                        console.warn('could not read settings from localStore', e);\n                        self.storedSettings = undefined;\n                    }\n                }\n                if (self.storedSettings) {\n                    if (typeof self.storedSettings.sizes === 'object') {\n                        self.sizes.rows = self.storedSettings.sizes.rows;\n                        self.sizes.columns = self.storedSettings.sizes.columns;\n                        ['trees', 'columns', 'rows'].forEach(function (i) {\n                            if (!self.sizes[i]) {\n                                self.sizes[i] = {};\n                            }\n                        });\n                    }\n                }\n            }\n            if (args.data) {\n                self.intf.data = args.data;\n            }\n            if (args.schema) {\n                self.intf.schema = args.schema;\n            }\n            if (!self.data) {\n                self.intf.data = [];\n            }\n            self.resize(true);\n        };\n        modules.forEach(function (module) {\n            module(self);\n        });\n        self.init();\n        return self.intf;\n    }\n    if (window && !window.canvasDatagrid) {\n        window.canvasDatagrid = grid;\n    }\n    return grid;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/main.js\n// module id = 0\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals XMLSerializer: false, define: true, Blob: false, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var perfCounters = [],\n            drawCount = 0,\n            perfWindowSize = 20;\n        self.htmlImageCache = {};\n        function drawOnAllImagesLoaded() {\n            var loaded = true;\n            Object.keys(self.htmlImageCache).forEach(function (html) {\n                if (!self.htmlImageCache[html].complete) {\n                    loaded = false;\n                }\n            });\n            if (loaded) {\n                self.draw();\n            }\n        }\n        function drawHtml(cell) {\n            var img,\n                v = cell.innerHTML || cell.formattedValue,\n                x = cell.x + self.canvasOffsetLeft,\n                y = cell.y + self.canvasOffsetTop;\n            if (self.htmlImageCache[v]) {\n                img = self.htmlImageCache[v];\n                if (img.height !== cell.height || img.width !== cell.width) {\n                    // height and width of the cell has changed, invalidate cache\n                    self.htmlImageCache[v] = undefined;\n                } else {\n                    if (!img.complete) {\n                        return;\n                    }\n                    return self.ctx.drawImage(img, x, y);\n                }\n            }\n            img = new Image(cell.width, cell.height);\n            self.htmlImageCache[v] = img;\n            img.onload = function () {\n                self.ctx.drawImage(img, x, y);\n                drawOnAllImagesLoaded();\n            };\n            img.src = 'data:image/svg+xml;base64,' + btoa(\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + cell.width + '\" height=\"' + cell.height + '\">\\n' +\n                    '<foreignObject class=\"node\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\\n' +\n                    '<body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;padding:0;\">\\n' +\n                    v + '\\n' +\n                    '</body>' +\n                    '</foreignObject>\\n' +\n                    '</svg>\\n'\n            );\n        }\n        function drawOrderByArrow(x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.headerOrderByArrowColor;\n            self.ctx.strokeStyle = self.style.headerOrderByArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + self.style.headerOrderByArrowMarginLeft;\n            y = y + self.style.headerOrderByArrowMarginTop;\n            if (self.orderDirection === 'asc') {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + self.style.headerOrderByArrowWidth, y);\n                self.ctx.lineTo(x + (self.style.headerOrderByArrowWidth * 0.5), y + self.style.headerOrderByArrowHeight);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y + self.style.headerOrderByArrowHeight);\n                self.ctx.lineTo(x + self.style.headerOrderByArrowWidth, y + self.style.headerOrderByArrowHeight);\n                self.ctx.lineTo(x + (self.style.headerOrderByArrowWidth * 0.5), y);\n                self.ctx.lineTo(x, y + self.style.headerOrderByArrowHeight);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return self.style.headerOrderByArrowMarginLeft\n                + self.style.headerOrderByArrowWidth\n                + self.style.headerOrderByArrowMarginRight;\n        }\n        function drawTreeArrow(cell, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.treeArrowColor;\n            self.ctx.strokeStyle = self.style.treeArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + self.style.treeArrowMarginLeft;\n            y = y + self.style.treeArrowMarginTop;\n            if (self.openChildren[cell.data[self.uniqueId]]) {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + self.style.treeArrowWidth, y);\n                self.ctx.lineTo(x + (self.style.treeArrowWidth * 0.5), y + self.style.treeArrowHeight);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y);\n                self.ctx.lineTo(x + self.style.treeArrowHeight, y + (self.style.treeArrowWidth * 0.5));\n                self.ctx.lineTo(x, y + self.style.treeArrowWidth);\n                self.ctx.lineTo(x, y);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return self.style.treeArrowMarginLeft\n                + self.style.treeArrowWidth\n                + self.style.treeArrowMarginRight;\n        }\n        function radiusRect(x, y, w, h, radius) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            var r = x + w, b = y + h;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x + radius, y);\n            self.ctx.lineTo(r - radius, y);\n            self.ctx.quadraticCurveTo(r, y, r, y + radius);\n            self.ctx.lineTo(r, y + h - radius);\n            self.ctx.quadraticCurveTo(r, b, r - radius, b);\n            self.ctx.lineTo(x + radius, b);\n            self.ctx.quadraticCurveTo(x, b, x, b - radius);\n            self.ctx.lineTo(x, y + radius);\n            self.ctx.quadraticCurveTo(x, y, x + radius, y);\n        }\n        function fillRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillRect(x, y, w, h);\n        }\n        function strokeRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.strokeRect(x, y, w, h);\n        }\n        function fillText(text, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillText(text, x, y);\n        }\n        function addBorderLine(c, pos) {\n            self.ctx.beginPath();\n            var p = {\n                t: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                },\n                r: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                b: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                l: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                },\n            };\n            p[pos]();\n            self.ctx.stroke();\n        }\n        function addEllipsis(text, width) {\n            var o, i, c, w = 0;\n            if (self.ellipsisCache[text] && self.ellipsisCache[text][width]) {\n                return self.ellipsisCache[text][width];\n            }\n            w = self.ctx.measureText(text).width;\n            if (w < width) {\n                o = text;\n            } else {\n                o = text.substring(0, 1);\n                i = 1;\n                // wow! a do while!  and I didn't intend to use one here\n                do {\n                    i += 1;\n                    o = text.substring(0, i) + '...';\n                    w = self.ctx.measureText(o).width;\n                } while (width > w);\n            }\n            self.ellipsisCache[text] = self.ellipsisCache[text] || {};\n            c = {value: o, width: w};\n            self.ellipsisCache[text][width] = c;\n            return c;\n        }\n        function drawText(cell) {\n            var paddingLeft = self.style[cell.style + 'PaddingLeft'],\n                paddingTop = self.style[cell.style + 'PaddingTop'],\n                paddingRight = self.style[cell.style + 'PaddingRight'],\n                paddingBottom = self.style[cell.style + 'PaddingBottom'],\n                vPos = paddingTop + cell.height - (cell.height * 0.5),\n                hPos = paddingLeft + cell.treeArrowWidth + cell.orderByArrowWidth;\n            cell.text = addEllipsis(cell.formattedValue, cell.width - paddingRight - paddingLeft);\n            cell.text.height = cell.fontHeight;\n            if (cell.horizontalAlignment === 'right') {\n                hPos = cell.width - cell.text.width - paddingRight;\n            } else if (cell.horizontalAlignment === 'center') {\n                hPos = (cell.width / 2) - (cell.text.width / 2);\n            }\n            if (cell.verticalAlignment === 'top') {\n                vPos = paddingTop + cell.text.height;\n            } else if (cell.verticalAlignment === 'bottom') {\n                vPos = cell.height - paddingBottom - cell.text.height;\n            }\n            cell.text.x = cell.x + hPos;\n            cell.text.y = cell.y + vPos;\n            fillText(cell.text.value, cell.text.x, cell.text.y);\n        }\n        /**\n         * Redraws the grid. No matter what the change, this is the only method required to refresh everything.\n         * @memberof canvasDataGrid\n         * @name draw\n         * @method\n         */\n        self.draw = function (internal) {\n            if (!self.isChildGrid && (!self.height || !self.width)) {\n                return;\n            }\n            if (self.isChildGrid && internal) {\n                self.parentGrid.draw();\n                return;\n            }\n            if (self.intf.visible === false) {\n                return;\n            }\n            // initial values\n            var checkScrollHeight, borderWidth, rowHeaderCell, p, cx, cy, treeGrid, rowOpen,\n                rowHeight, cornerCell, y, x, c, h, w, s, r, rd, aCell,\n                selectionBorders = [],\n                rowHeaders = [],\n                l = self.data.length,\n                u = self.currentCell || {},\n                headerCellHeight = self.getHeaderCellHeight(),\n                headerCellWidth = self.getHeaderCellWidth(),\n                cellHeight = self.style.cellHeight;\n            drawCount += 1;\n            p = performance.now();\n            // if data length has changed, there is no way to know\n            if (self.data.length > self.orders.rows.length) {\n                self.createRowOrders();\n            }\n            function drawScrollBars() {\n                var v = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-bar'\n                    },\n                    n = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-bar'\n                    },\n                    vb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-box'\n                    },\n                    nb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-box'\n                    },\n                    co = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'scroll-box-corner'\n                    },\n                    m = (self.style.scrollBarBoxMargin * 2),\n                    d = self.style.scrollBarBoxMargin * 0.5;\n                self.ctx.strokeStyle = self.style.scrollBarBorderColor;\n                self.ctx.lineWidth = self.style.scrollBarBorderWidth;\n                // vertical\n                v.x += w - self.style.scrollBarWidth - self.style.scrollBarBorderWidth - d;\n                v.y += headerCellHeight;\n                v.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                v.height = h - headerCellHeight - self.style.scrollBarWidth - d - m;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(v.x, v.y, v.width, v.height + m);\n                strokeRect(v.x, v.y, v.width, v.height + m);\n                // vertical box\n                vb.x = v.x + self.style.scrollBarBoxMargin;\n                vb.y = headerCellHeight + self.style.scrollBarBoxMargin\n                    + ((v.height - self.scrollBox.scrollBoxHeight)\n                        * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight));\n                vb.width = self.style.scrollBarBoxWidth;\n                vb.height = self.scrollBox.scrollBoxHeight;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/vertical/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (vb.width < v.width) {\n                    radiusRect(vb.x, vb.y, vb.width, vb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                // horizontal\n                n.x += headerCellWidth;\n                n.y += h - self.style.scrollBarWidth - d;\n                n.width = w - self.style.scrollBarWidth - headerCellWidth - d - m;\n                n.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(n.x, n.y, n.width + m, n.height);\n                strokeRect(n.x, n.y, n.width + m, n.height);\n                // horizontal box\n                nb.y = n.y + self.style.scrollBarBoxMargin;\n                nb.x = headerCellWidth + self.style.scrollBarBoxMargin\n                    + ((n.width - self.scrollBox.scrollBoxWidth)\n                        * (self.scrollBox.scrollLeft / self.scrollBox.scrollWidth));\n                nb.width = self.scrollBox.scrollBoxWidth;\n                nb.height = self.style.scrollBarBoxWidth;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/horizontal/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (nb.width < n.width) {\n                    radiusRect(nb.x, nb.y, nb.width, nb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                //corner\n                self.ctx.strokeStyle = self.style.scrollBarCornerBorderColor;\n                self.ctx.fillStyle = self.style.scrollBarCornerBackgroundColor;\n                co.x = n.x + n.width + m;\n                co.y = v.y + v.height + m;\n                co.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                co.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                radiusRect(co.x, co.y, co.width, co.height, 0);\n                self.ctx.stroke();\n                self.ctx.fill();\n                self.visibleCells.unshift(v);\n                self.visibleCells.unshift(vb);\n                self.visibleCells.unshift(n);\n                self.visibleCells.unshift(nb);\n                self.visibleCells.unshift(co);\n                self.scrollBox.bar = {\n                    v: v,\n                    h: n\n                };\n                self.scrollBox.box = {\n                    v: vb,\n                    h: nb\n                };\n            }\n            function drawCell(d, rowIndex, rowOrderIndex) {\n                return function drawEach(header, headerIndex, columnOrderIndex) {\n                    var cellStyle = header.style || 'cell',\n                        childGridAttributes,\n                        cell,\n                        isHeader = /headerCell/.test(cellStyle),\n                        isCorner = /cornerCell/.test(cellStyle),\n                        isRowHeader = 'rowHeaderCell' === cellStyle,\n                        selected = self.selections[rowOrderIndex] && self.selections[rowOrderIndex].indexOf(columnOrderIndex) !== -1,\n                        hovered = self.hovers[d[self.uniqueId]] && self.hovers[d[self.uniqueId]].indexOf(columnOrderIndex) !== -1,\n                        active = self.activeCell.rowIndex === rowOrderIndex && self.activeCell.columnIndex === columnOrderIndex,\n                        isGrid = Array.isArray(d[header.name]),\n                        activeHeader = (self.orders.rows[self.activeCell.rowIndex] === rowOrderIndex\n                                || self.orders.columns[self.activeCell.columnIndex] === columnOrderIndex)\n                            && (columnOrderIndex === -1 || rowOrderIndex === -1)\n                            ? (isRowHeader ? 'activeRowHeaderCell' : 'activeHeaderCell') : false,\n                        val,\n                        f = self.formatters[header.type || 'string'],\n                        orderByArrowSize = 0,\n                        treeArrowSize = 0,\n                        cellWidth = self.sizes.columns[isRowHeader ? 'cornerCell' : header[self.uniqueId]] || header.width,\n                        ev = {\n                            value: d[header.name],\n                            row: d,\n                            header: header\n                        };\n                    if (cellStyle === 'headerCellCap') {\n                        cellWidth = w - x;\n                    }\n                    // if no data or schema are defined, a width is provided to the stub column\n                    if (cellWidth === undefined) {\n                        cellWidth = self.style.columnWidth;\n                    }\n                    if (x + cellWidth + borderWidth < 0) {\n                        x += cellWidth + borderWidth;\n                    }\n                    if (active) {\n                        cellStyle = 'activeCell';\n                    }\n                    if (self.visibleRows.indexOf(rowIndex) === -1 && !isHeader) {\n                        self.visibleRows.push(rowIndex);\n                    }\n                    val = self.dispatchEvent('formatcellvalue', ev);\n                    if (!self.dispatchEvent('beforerendercell', ev)) {\n                        cx = x;\n                        cy = y;\n                        if (cellStyle === 'cornerCell') {\n                            cx = 0;\n                            cy = 0;\n                        } else if (isRowHeader) {\n                            cx = 0;\n                        } else if (isHeader) {\n                            cy = 0;\n                        }\n                        cell = {\n                            type: isGrid ? 'canvas-datagrid-cell' : header.type,\n                            style: cellStyle,\n                            nodeType: 'canvas-datagrid-cell',\n                            x: cx,\n                            y: cy,\n                            horizontalAlignment: self.style[cellStyle + 'HorizontalAlignment'],\n                            verticalAlignment: self.style[cellStyle + 'VerticalAlignment'],\n                            offsetTop: self.canvasOffsetTop,\n                            offsetLeft: self.canvasOffsetLeft,\n                            scrollTop: self.scrollBox.scrollTop,\n                            scrollLeft: self.scrollBox.scrollLeft,\n                            active: active || activeHeader,\n                            hovered: hovered,\n                            selected: selected,\n                            width: cellWidth,\n                            height: cellHeight,\n                            offsetWidth: cellWidth,\n                            offsetHeight: cellHeight,\n                            parentNode: self.intf.parentNode,\n                            offsetParent: self.intf.parentNode,\n                            data: d,\n                            isCorner: isCorner,\n                            isHeader: isHeader,\n                            isRowHeader: isRowHeader,\n                            rowOpen: rowOpen,\n                            header: header,\n                            columnIndex: columnOrderIndex,\n                            rowIndex: rowOrderIndex,\n                            sortColumnIndex: headerIndex,\n                            sortRowIndex: rowIndex,\n                            isGrid: isGrid,\n                            gridId: (self.attributes.name || '') + d[self.uniqueId] + ':' + header[self.uniqueId].name,\n                            parentGrid: self.intf,\n                            innerHTML: '',\n                            activeHeader: activeHeader,\n                            value: isHeader\n                                ? (header.title || header.name) : d[header.name]\n                        };\n                        ev.cell = cell;\n                        cell.userHeight = cell.isHeader ? self.sizes.rows[-1] : rowHeight;\n                        cell.userWidth = cell.isHeader ? self.sizes.columns.cornerCell : self.sizes.columns[header[self.uniqueId]];\n                        cell[self.uniqueId] = d[self.uniqueId];\n                        self.visibleCells.unshift(cell);\n                        self.ctx.fillStyle = self.style[cellStyle + 'BackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'BorderColor'];\n                        self.ctx.lineWidth = self.style[cellStyle + 'BorderWidth'];\n                        if (hovered) {\n                            self.ctx.fillStyle = self.style[cellStyle + 'HoverBackgroundColor'];\n                            self.ctx.strokeStyle = self.style[cellStyle + 'HoverBorderColor'];\n                        }\n                        if (selected) {\n                            self.ctx.fillStyle = self.style[cellStyle + 'SelectedBackgroundColor'];\n                            self.ctx.strokeStyle = self.style[cellStyle + 'SelectedBorderColor'];\n                        }\n                        if (activeHeader) {\n                            self.ctx.fillStyle = self.style[activeHeader + 'BackgroundColor'];\n                        }\n                        self.dispatchEvent('rendercell', ev);\n                        if (cell.isGrid) {\n                            if (cell.height !== rowHeight) {\n                                cell.height = rowHeight || self.style.cellHeightWithChildGrid;\n                                checkScrollHeight = true;\n                            }\n                            cell.width = self.sizes.columns[header[self.uniqueId]] || self.style.cellWidthWithChildGrid;\n                        }\n                        if (rowOpen && !cell.isRowHeader) {\n                            cell.height = self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight;\n                        }\n                        if (!cell.isGrid) {\n                            fillRect(cx, cy, cell.width, cell.height);\n                            strokeRect(cx, cy, cell.width, cell.height);\n                        }\n                        self.ctx.save();\n                        radiusRect(cell.x, cell.y, cell.width, cell.height, 0);\n                        self.ctx.clip();\n                        self.dispatchEvent('afterrendercell', ev);\n                        if (cell.height !== cellHeight && !(rowOpen && !cell.isRowHeader)) {\n                            self.sizes.rows[isHeader ? -1 : d[self.uniqueId]] = cell.height;\n                            checkScrollHeight = true;\n                        }\n                        if (cell.width !== cellWidth) {\n                            self.sizes.columns[header[self.uniqueId]] = cell.width;\n                            checkScrollHeight = true;\n                        }\n                        if (isRowHeader && self.attributes.tree) {\n                            if (!self.dispatchEvent('rendertreearrow', ev)) {\n                                treeArrowSize = drawTreeArrow(cell, self.style[cellStyle + 'PaddingLeft'], cy, 0);\n                            }\n                        }\n                        if ((self.attributes.showRowNumbers && isRowHeader)\n                                || !isRowHeader) {\n                            if (cell.isGrid) {\n                                if (!self.childGrids[cell.gridId]) {\n                                    childGridAttributes = self.args.childGridAttributes || self.args;\n                                    childGridAttributes.name = self.attributes.saveAppearance ? cell.gridId : undefined;\n                                    childGridAttributes.parentNode = cell;\n                                    childGridAttributes.data = d[header.name];\n                                    self.childGrids[cell.gridId] = self.createGrid(childGridAttributes);\n                                    checkScrollHeight = true;\n                                }\n                                cell.grid = self.childGrids[cell.gridId];\n                                cell.grid.parentNode = cell;\n                                cell.grid.visible = true;\n                                cell.grid.draw();\n                                self.dispatchEvent('rendercellgrid', ev);\n                            } else {\n                                if (self.childGrids[cell.gridId]) {\n                                    self.childGrids[cell.gridId].parentNode.offsetHeight = 0;\n                                }\n                                if (isHeader && self.orderBy === header.name) {\n                                    if (!self.dispatchEvent('renderorderbyarrow', ev)) {\n                                        orderByArrowSize = drawOrderByArrow(cx + self.style[cellStyle + 'PaddingLeft'], 0);\n                                    }\n                                }\n                                self.ctx.fillStyle = self.style[cellStyle + 'Color'];\n                                if (hovered) {\n                                    self.ctx.fillStyle = self.style[cellStyle + 'HoverColor'];\n                                }\n                                if (selected) {\n                                    self.ctx.fillStyle = self.style[cellStyle + 'SelectedColor'];\n                                }\n                                if (activeHeader) {\n                                    self.ctx.fillStyle = self.style[activeHeader + 'Color'];\n                                }\n                                self.ctx.font = self.style[cellStyle + 'Font'];\n                                cell.fontHeight = self.style[cellStyle + 'FontHeight'];\n                                cell.treeArrowWidth = treeArrowSize;\n                                cell.orderByArrowWidth = orderByArrowSize;\n                                val = val !== undefined ? val : f\n                                    ? f(self.ctx, cell) : '';\n                                if (val === undefined && !f) {\n                                    val = '';\n                                    console.warn('canvas-datagrid: Unknown format '\n                                        + header.type + ' add a cellFormater');\n                                }\n                                cell.formattedValue = ((val !== undefined && val !== null) ? val : '').toString();\n                                if (self.columnFilters && self.columnFilters[val] !== undefined && isHeader) {\n                                    cell.formattedValue = self.attributes.filterTextPrefix + val;\n                                }\n                                if (!self.dispatchEvent('rendertext', ev)) {\n                                    if (cell.innerHTML || header.type === 'html') {\n                                        drawHtml(cell);\n                                    } else {\n                                        drawText(cell);\n                                    }\n                                }\n                            }\n                        }\n                        if (active) {\n                            aCell = cell;\n                        }\n                        if (selected && !isRowHeader) {\n                            if ((!self.selections[cell.rowIndex - 1]\n                                    || self.selections[cell.rowIndex - 1].indexOf(cell.columnIndex) === -1\n                                    || cell.rowIndex === 0)\n                                    && !cell.isHeader) {\n                                selectionBorders.push([cell, 't']);\n                            }\n                            if (!self.selections[cell.rowIndex + 1]\n                                    || self.selections[cell.rowIndex + 1].indexOf(cell.columnIndex) === -1) {\n                                selectionBorders.push([cell, 'b']);\n                            }\n                            if (!self.selections[cell.rowIndex] || cell.columnIndex === 0\n                                    || self.selections[cell.rowIndex].indexOf(cell.columnIndex - 1) === -1) {\n                                selectionBorders.push([cell, 'l']);\n                            }\n                        } else if (self.selections[cell.rowIndex]\n                                && self.selections[cell.rowIndex].indexOf(cell.columnIndex - 1) !== -1) {\n                            selectionBorders.push([cell, 'l']);\n                        }\n                        self.ctx.restore();\n                        x += cell.width + borderWidth;\n                        return cell.width;\n                    }\n                };\n            }\n            function drawRowHeader(rowData, index, rowOrderIndex) {\n                var a;\n                if (self.attributes.showRowHeaders) {\n                    x = 0;\n                    rowHeaderCell = {'rowHeaderCell': index + 1 };\n                    rowHeaderCell[self.uniqueId] = rowData[self.uniqueId];\n                    a = {\n                        name: 'rowHeaderCell',\n                        width: self.style.headerRowWidth,\n                        style: 'rowHeaderCell',\n                        type: 'string',\n                        data: rowData[self.uniqueId],\n                        index: -1\n                    };\n                    a[self.uniqueId] = rowData[self.uniqueId];\n                    rowOpen = self.openChildren[rowData[self.uniqueId]];\n                    drawCell(rowHeaderCell, index, rowOrderIndex)(a, -1, -1);\n                }\n            }\n            function drawHeaders() {\n                var d, g = s.length, i, o, headerCell, header;\n                rowHeaders.forEach(function (rArgs) {\n                    y = rArgs[3];\n                    cellHeight = rArgs[4];\n                    drawRowHeader(rArgs[0], rArgs[1], rArgs[2]);\n                });\n                if (self.attributes.showColumnHeaders) {\n                    x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft;\n                    if (self.attributes.showRowHeaders) {\n                        x += headerCellWidth;\n                    }\n                    y = 0;\n                    // cell height might have changed during drawing\n                    cellHeight = self.getHeaderCellHeight();\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        header = s[i];\n                        d = {\n                            title: header.title,\n                            name: header.name,\n                            width: header.width,\n                            style: 'headerCell',\n                            type: 'string',\n                            index: o,\n                            order: i\n                        };\n                        headerCell = {'headerCell': header.title || header.name};\n                        headerCell[self.uniqueId] = 'h' + header[self.uniqueId];\n                        d[self.uniqueId] = header[self.uniqueId];\n                        x += drawCell(headerCell, -1, -1)(d, o, i);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    // fill in the space right of the headers\n                    if (x < w) {\n                        c = {\n                            name: '',\n                            width: self.style.scrollBarWidth,\n                            style: 'headerCellCap',\n                            type: 'string',\n                            index: s.length\n                        };\n                        c[self.uniqueId] = 'headerCell';\n                        drawCell({endCap: ''}, -1, -1)(c, -1, -1);\n                    }\n                    // fill in the space left of the headers\n                    if (self.attributes.showRowHeaders) {\n                        cornerCell = {'cornerCell': '' };\n                        cornerCell[self.uniqueId] = 'cornerCell';\n                        x = 0;\n                        c = {\n                            name: 'cornerCell',\n                            width: self.style.headerRowWidth,\n                            style: 'cornerCell',\n                            type: 'string',\n                            index: -1\n                        };\n                        c[self.uniqueId] = 'cornerCell';\n                        drawCell(cornerCell, -1, -1)(c, -1, -1);\n                    }\n                }\n            }\n            function drawRow(r, d) {\n                var i, treeHeight, rowSansTreeHeight, o, g = s.length;\n                if (y - (cellHeight * 2) > h) {\n                    return false;\n                }\n                rd = self.data[r];\n                rowOpen = self.openChildren[rd[self.uniqueId]];\n                rowSansTreeHeight = self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight;\n                treeHeight = (rowOpen ? self.sizes.trees[rd[self.uniqueId]] : 0);\n                rowHeight = rowSansTreeHeight + treeHeight;\n                if (y < rowHeight * -1) {\n                    return false;\n                }\n                if (self.attributes.showRowHeaders) {\n                    x += headerCellWidth;\n                }\n                cellHeight = rowHeight;\n                for (o = self.scrollIndexLeft; o < g; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        break;\n                    }\n                }\n                // cell height might have changed during drawing\n                cellHeight = rowHeight;\n                x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft;\n                // don't draw a tree for the new row\n                treeGrid = self.childGrids[rd[self.uniqueId]];\n                if (r !== self.data.length && rowOpen) {\n                    treeGrid.visible = true;\n                    treeGrid.parentNode = {\n                        offsetTop: y + rowSansTreeHeight + self.canvasOffsetTop,\n                        offsetLeft: headerCellWidth - 1 + self.canvasOffsetLeft,\n                        offsetHeight: treeHeight,\n                        offsetWidth: self.width - headerCellWidth - self.style.scrollBarWidth - 1,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: self.style,\n                        nodeType: 'canvas-datagrid-tree',\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        rowIndex: r\n                    };\n                    self.visibleCells.unshift({\n                        rowIndex: x,\n                        columnIndex: 0,\n                        y: treeGrid.parentNode.offsetTop,\n                        x: treeGrid.parentNode.offsetLeft,\n                        height: treeGrid.parentNode.offsetHeight,\n                        width: treeGrid.parentNode.offsetWidth,\n                        style: 'tree-grid',\n                        type: treeGrid.parentNode.nodeType\n                    });\n                    treeGrid.draw();\n                } else if (treeGrid) {\n                    treeGrid.parentNode.offsetHeight = 0;\n                    delete self.sizes.trees[rd[self.uniqueId]];\n                }\n                rowHeaders.push([rd, r, d, y, rowHeight]);\n                y += cellHeight + borderWidth;\n                return true;\n            }\n            function initDraw() {\n                borderWidth = self.style.cellBorderWidth;\n                self.visibleRows = [];\n                s = self.getVisibleSchema();\n                self.visibleCells = [];\n                self.canvasOffsetTop = self.isChildGrid ? self.parentNode.offsetTop : 0;\n                self.canvasOffsetLeft = self.isChildGrid ? self.parentNode.offsetLeft : 0;\n                h = self.height;\n                w = self.width;\n                if (!self.isChildGrid) {\n                    self.ctx.scale(window.devicePixelRatio, window.devicePixelRatio);\n                }\n            }\n            function drawBackground() {\n                radiusRect(0, 0, w, h, 0);\n                self.ctx.clip();\n                self.ctx.fillStyle = self.style.backgroundColor;\n                fillRect(0, 0, w, h);\n            }\n            function drawRows() {\n                var o, n, i, g = s.length;\n                x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft;\n                y = (self.scrollBox.scrollTop * -1) + headerCellHeight + self.scrollPixelTop;\n                for (r = self.scrollIndexTop; r < l; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.showNewRow) {\n                    if (self.attributes.showRowHeaders) {\n                        x += headerCellWidth;\n                    }\n                    rowHeight = cellHeight = self.style.cellHeight;\n                    rowOpen = false;\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        x += drawCell(self.newRow, self.data.length, self.data.length)(s[i], i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    rowHeaders.push([self.newRow, self.data.length, self.data.length, y, rowHeight]);\n                }\n            }\n            function drawReorderMarkers() {\n                if (!self.reorderObject) { return; }\n                var b = {\n                        height: self.reorderObject.height,\n                        width: self.reorderObject.width,\n                        x: self.reorderObject.x + self.reorderObject.dragOffset.x,\n                        y: self.reorderObject.y + self.reorderObject.dragOffset.y\n                    },\n                    m = {\n                        width: w,\n                        heigth: h,\n                        x: 0,\n                        y: 0\n                    };\n                self.ctx.fillStyle = self.style.reorderMarkerBackgroundColor;\n                self.ctx.lineWidth = self.style.reorderMarkerBorderWidth;\n                self.ctx.strokeStyle = self.style.reorderMarkerBorderColor;\n                if (self.dragMode === 'row-reorder') {\n                    b.width = w;\n                    b.x = 0;\n                    m.width = w;\n                    m.y = self.currentCell.y;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.rowIndex !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex - 1 !== self.reorderObject.rowIndex) {\n                        addBorderLine(m, 't');\n                    }\n                } else if (self.dragMode === 'column-reorder' && self.reorderObject) {\n                    b.height = h;\n                    b.y = 0;\n                    m.height = h;\n                    m.x = self.currentCell.x;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.columnIndex !== self.reorderObject.columnIndex\n                            && self.currentCell.columnIndex - 1 !== self.reorderObject.columnIndex) {\n                        addBorderLine(m, 'l');\n                    }\n                }\n            }\n            function drawBorder() {\n                self.ctx.lineWidth = self.style.gridBorderWidth;\n                self.ctx.strokeStyle = self.style.gridBorderColor;\n                strokeRect(0, 0, self.width, self.height);\n            }\n            function drawSelectionBorders() {\n                self.ctx.lineWidth = self.style.selectionOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.selectionOverlayBorderColor;\n                selectionBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n            }\n            function drawActiveCell() {\n                if (!aCell) { return; }\n                if (self.attributes.rowSelectionMode) {\n                    if (self.activeCell && self.activeCell.rowIndex === aCell.rowIndex) {\n                        self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                        self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                        strokeRect(0, aCell.y, self.getHeaderWidth() + headerCellWidth, rowHeight);\n                    }\n                } else {\n                    self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                    self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                    strokeRect(aCell.x, aCell.y, aCell.width, aCell.height);\n                }\n\n            }\n            function drawDebug() {\n                perfCounters[drawCount % perfWindowSize] = performance.now() - p;\n                var d;\n                if (self.attributes.debug) {\n                    self.ctx.font = '11px sans-serif';\n                    d = {};\n                    d.perf = (perfCounters.reduce(function (a, b) {\n                        return a + b;\n                    }, 0) / perfCounters.length).toFixed(1)\n                        + 'ms (' +\n                        perfCounters.map(function (a) { return a.toFixed(1); }).join(', ') + ')';\n                    d.htmlImages = Object.keys(self.htmlImageCache).length;\n                    d.scrollLeft = self.scrollBox.scrollLeft;\n                    d.scrollTop = self.scrollBox.scrollTop;\n                    d.scrollIndexTop = self.scrollIndexTop;\n                    d.scrollPixelTop = self.scrollPixelTop;\n                    d.scrollIndexLeft = self.scrollIndexLeft;\n                    d.scrollPixelLeft = self.scrollPixelLeft;\n                    d.canvasOffsetLeft = self.canvasOffsetLeft;\n                    d.canvasOffsetTop = self.canvasOffsetTop;\n                    d.width = self.width;\n                    d.height = self.height;\n                    d.mousex = self.mouse.x;\n                    d.mousey = self.mouse.y;\n                    d.touchx = !self.touchStart ? 0 : self.touchStart.x;\n                    d.touchy = !self.touchStart ? 0 : self.touchStart.y;\n                    d.entities = self.visibleCells.length;\n                    d.hasFocus = self.hasFocus;\n                    d.dragMode = self.dragMode;\n                    if (self.currentCell) {\n                        d.columnIndex = self.currentCell.columnIndex;\n                        d.rowIndex = self.currentCell.rowIndex;\n                        d.sortColumnIndex = self.currentCell.sortColumnIndex;\n                        d.sortRowIndex = self.currentCell.sortRowIndex;\n                        d.context = self.currentCell.context;\n                        d.dragContext = self.currentCell.dragContext;\n                        d.style = self.currentCell.style;\n                        d.type = self.currentCell.type;\n                    }\n                    self.ctx.save();\n                    Object.keys(d).forEach(function (key, index) {\n                        var m = key + ': ' + d[key],\n                            lh = 14;\n                        self.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n                        fillRect(headerCellWidth, lh + (index * lh), 100, lh);\n                        self.ctx.fillStyle = 'rgba(0, 0, 0, 1)';\n                        fillText(m, headerCellWidth + 1, headerCellHeight + (index * lh));\n                    });\n                    self.ctx.restore();\n                }\n            }\n            self.ctx.save();\n            initDraw();\n            drawBackground();\n            drawRows();\n            drawSelectionBorders();\n            drawHeaders();\n            drawActiveCell();\n            drawReorderMarkers();\n            drawScrollBars();\n            if (checkScrollHeight) {\n                self.resize(true);\n            }\n            drawBorder();\n            drawDebug();\n            self.ctx.restore();\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/draw.js\n// module id = 1\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var touchDelta = {x: 0, y: 0, scrollTop: 0, scrollLeft: 0},\n            touchAnimateTo = {scrollLeft: 0, scrollTop: 0},\n            touchSigma = {scrollLeft: 0, scrollTop: 0},\n            xPPS = 0,\n            yPPS = 0,\n            touchingCell = false,\n            startingCell = false,\n            animationFrames = 0;\n        self.getTouchPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.touches[0].clientX - rect.left,\n                    y: e.touches[0].clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        self.calculatePPS = function () {\n            xPPS = ((touchDelta.scrollLeft - touchSigma.scrollLeft) / (touchDelta.t - touchSigma.t));\n            yPPS = ((touchDelta.scrollTop - touchSigma.scrollTop) / (touchDelta.t - touchSigma.t));\n            touchSigma = {\n                scrollLeft: touchDelta.scrollLeft,\n                scrollTop: touchDelta.scrollTop,\n                t: performance.now() / 1000\n            };\n        };\n        self.touchCell = function (e) {\n            return function () {\n                clearInterval(self.touchCalcTimeout);\n                var pos = self.getTouchPos(e);\n                if (Math.abs(touchDelta.x) + Math.abs(touchDelta.y) < self.attributes.touchDeadZone) {\n                    touchingCell = self.getCellAt(pos.x, pos.y);\n                    self.mousemove(e, pos);\n                    self.mousedown(e, pos);\n                    self.mousemove(e, pos);\n                    self.draw();\n                }\n            };\n        };\n        self.touchstart = function (e) {\n            touchingCell = false;\n            self.touchStart = self.getTouchPos(e);\n            startingCell = self.getCellAt(self.touchStart.x, self.touchStart.y, true);\n            if (self.dispatchEvent('touchstart', {NativeEvent: e, cell: self.startingCell})) { return; }\n            if (!self.hasFocus) { return; }\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (e.touches.length === 2) {\n                return self.contextmenu(e, self.touchStart);\n            }\n            self.touchScrollStart = {\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: performance.now() / 1000\n            };\n            touchDelta = {\n                x: self.touchStart.x,\n                y: self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: 0\n            };\n            self.touchmove(e);\n            clearTimeout(self.touchTimeout);\n            clearInterval(self.touchCalcTimeout);\n            self.touchTimeout = setTimeout(self.touchCell(e), self.attributes.touchSelectTimeMs);\n            self.touchCalcTimeout = setInterval(self.calculatePPS, 20);\n            self.touchHaltAnimation = true;\n            document.body.addEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.addEventListener('touchend', self.touchend, false);\n            document.body.addEventListener('touchcancel', self.touchcancel, false);\n        };\n        self.easing = function (t, b, c, d) {\n            return c * (t / d) * (2 - t) + b;\n        };\n        self.touchEndAnimation = function () {\n            if (!self.canvas || !self.scrollBox.scrollTo) { return requestAnimationFrame(self.touchEndAnimation); }\n            var x,\n                y,\n                n = performance.now() / 1000,\n                d = (self.attributes.touchReleaseAnimationDurationMs / 1000),\n                t;\n            touchDelta.t = touchDelta.t || n + d;\n            t = n - touchDelta.t + 1;\n            if (t > 1 || self.touchHaltAnimation || (animationFrames > 1000)) {\n                animationFrames = 0;\n                self.touchHaltAnimation = false;\n                touchAnimateTo = {scrollLeft: -1, scrollTop: -1};\n                return;\n            }\n            animationFrames += 1;\n            x = self.easing(t, touchDelta.scrollLeft, -touchAnimateTo.scrollLeft, d);\n            y = self.easing(t, touchDelta.scrollTop, -touchAnimateTo.scrollTop, d);\n            self.scrollBox.scrollTo(x, y);\n            requestAnimationFrame(self.touchEndAnimation);\n        };\n        self.touchend = function (e) {\n            if (self.dispatchEvent('touchend', {NativeEvent: e})) { return; }\n            var dz = Math.abs(touchDelta.x) + Math.abs(touchDelta.y) < self.attributes.touchDeadZone,\n                pos = {\n                    x: self.touchStart.x + touchDelta.x,\n                    y: self.touchStart.y + touchDelta.y\n                },\n                cell = self.getCellAt(pos.x, pos.y);\n            if (!self.hasFocus) { return; }\n            if (touchingCell) {\n                self.mouseup(e, self.touchStart);\n            } else if (dz) {\n                if (cell.active) {\n                    self.beginEditAt(cell.columnIndex, cell.rowIndex);\n                } else {\n                    self.mousedown(e, self.touchStart);\n                    self.mouseup(e, self.touchStart);\n                    self.click(e, self.touchStart);\n                }\n            }\n            touchingCell = false;\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n            clearTimeout(self.touchTimeout);\n            clearInterval(self.touchCalcTimeout);\n            self.calculatePPS();\n            touchAnimateTo.scrollLeft = xPPS * self.attributes.touchReleaseAcceleration;\n            touchAnimateTo.scrollTop = yPPS * self.attributes.touchReleaseAcceleration;\n            self.touchHaltAnimation = false;\n            if (animationFrames === 0 && !/-scroll-/.test(startingCell.style) && !dz) {\n                self.touchEndAnimation();\n            }\n        };\n        self.touchmove = function (e) {\n            var d = self.getTouchPos(e);\n            if (self.dispatchEvent('touchmove', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (!self.hasFocus) { return; }\n            touchDelta = {\n                x: d.x - self.touchStart.x,\n                y: d.y - self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: 0\n            };\n            if (/vertical-scroll-/.test(startingCell.style)) {\n                self.scrollBox.scrollTop = self.scrollBox.scrollHeight * (d.y / self.height);\n            } else if (/horizontal-scroll-/.test(startingCell.style)) {\n                self.scrollBox.scrollLeft = self.scrollBox.scrollWidth * (d.x / self.width);\n            } else if (touchingCell) {\n                self.mousemove(e, d);\n                self.draw();\n            } else {\n                if (animationFrames === 0) {\n                    self.scrollBox.scrollTo(self.touchScrollStart.scrollLeft - touchDelta.x,\n                        self.touchScrollStart.scrollTop - touchDelta.y);\n                }\n            }\n        };\n        self.touchcancel = function (e) {\n            if (self.dispatchEvent('touchcancel', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) { return; }\n            touchingCell = false;\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n            return;\n        };\n        self.stopPropagation = function (e) { e.stopPropagation(); };\n        self.addEventListener = function (ev, fn) {\n            self.events[ev] = self.events[ev] || [];\n            self.events[ev].unshift(fn);\n        };\n        self.removeEventListener = function (ev, fn) {\n            (self.events[ev] || []).forEach(function removeEachListener(sfn, idx) {\n                if (fn === sfn) {\n                    self.events[ev].splice(idx, 1);\n                }\n            });\n        };\n        self.dispatchEvent = function (ev, e) {\n            var defaultPrevented;\n            function preventDefault() {\n                defaultPrevented = true;\n            }\n            if (!self.events[ev]) { return; }\n            self.events[ev].forEach(function dispatchEachEvent(fn) {\n                e.ctx = self.ctx;\n                e.preventDefault = preventDefault;\n                fn.apply(self.intf, [e]);\n            });\n            return defaultPrevented;\n        };\n        self.resize = function (drawAfterResize) {\n            var cellBorder = self.style.cellBorderWidth * 2,\n                headerCellBorder =  self.style.headerCellBorderWidth * 2,\n                scrollHeight,\n                scrollWidth,\n                headerCellHeight = self.getHeaderCellHeight(),\n                headerCellWidth = self.getHeaderCellWidth(),\n                // TODO: What the hell are these numbers!?  They are probably some value in the style.\n                scrollDragPositionOffsetY = 30,\n                scrollDragPositionOffsetX = 15;\n            if (self.isChildGrid) {\n                self.height = self.parentNode.offsetHeight;\n                self.width = self.parentNode.offsetWidth;\n            } else {\n                self.height = self.parentDOMNode.offsetHeight - (self.style.scrollBarBoxMargin * 2);\n                self.width = self.parentDOMNode.offsetWidth - (self.style.scrollBarBoxMargin * 2);\n                self.parentNode = self.parentDOMNode;\n                self.canvas.height = self.height * window.devicePixelRatio;\n                self.canvas.width = self.width * window.devicePixelRatio;\n                self.canvas.style.height = self.height + 'px';\n                self.canvas.style.width = self.width + 'px';\n                self.canvasOffsetTop = 0;\n                self.canvasOffsetLeft = 0;\n            }\n            scrollHeight = self.data.reduce(function reduceData(accumulator, row) {\n                return accumulator\n                    + (self.sizes.rows[row[self.uniqueId]] || self.style.cellHeight)\n                    + (self.sizes.trees[row[self.uniqueId]] || 0)\n                    + cellBorder;\n            }, 0) || 0;\n            scrollWidth = self.getVisibleSchema().reduce(function reduceSchema(accumulator, column) {\n                if (column.hidden) { return accumulator; }\n                return accumulator + (self.sizes.columns[column[self.uniqueId]] || column.width || self.style.columnWidth) + cellBorder;\n            }, 0) || 0;\n            if (self.attributes.showNewRow) {\n                scrollHeight += self.style.cellHeight + cellBorder;\n            }\n            self.scrollBox.width = self.width - headerCellWidth;\n            self.scrollBox.height = self.height - headerCellHeight - headerCellBorder;\n            self.scrollBox.top = headerCellHeight + headerCellBorder;\n            self.scrollBox.left = headerCellWidth;\n            self.scrollBox.scrollHeight = scrollHeight + self.style.scrollBarWidth - self.scrollBox.height;\n            self.scrollBox.scrollWidth = scrollWidth + self.style.scrollBarWidth - self.scrollBox.width;\n            self.scrollBox.widthBoxRatio = ((self.scrollBox.width - scrollDragPositionOffsetX)\n                / (self.scrollBox.scrollWidth + self.scrollBox.width - scrollDragPositionOffsetX));\n            self.scrollBox.scrollBoxWidth = self.scrollBox.width\n                * self.scrollBox.widthBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.heightBoxRatio = ((self.scrollBox.height - scrollDragPositionOffsetY)\n                / (self.scrollBox.scrollHeight + (self.scrollBox.height - scrollDragPositionOffsetY)));\n            self.scrollBox.scrollBoxHeight = self.scrollBox.height\n                * self.scrollBox.heightBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.scrollBoxWidth = Math.max(self.scrollBox.scrollBoxWidth, self.style.scrollBarBoxMinSize);\n            self.scrollBox.scrollBoxHeight = Math.max(self.scrollBox.scrollBoxHeight, self.style.scrollBarBoxMinSize);\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            self.resizeEditInput();\n            if (drawAfterResize) {\n                self.draw(true);\n            }\n            self.dispatchEvent('resize', {});\n            return true;\n        };\n        self.resizeEditInput = function () {\n            if (self.input) {\n                var pos = self.canvas.getBoundingClientRect(),\n                    s = self.scrollOffset(self.canvas),\n                    bx2 = (self.style.cellBorderWidth * 2),\n                    cell = self.getVisibleCellByIndex(self.input.editCell.columnIndex, self.input.editCell.rowIndex)\n                        || {x: -100, y: -100, height: 0, width: 0};\n                self.input.style.left = pos.left + cell.x - self.style.cellBorderWidth + self.canvasOffsetLeft - s.left + 'px';\n                self.input.style.top = pos.top + cell.y - bx2 + self.canvasOffsetTop - s.top + 'px';\n                self.input.style.height = cell.height - bx2 - 1 + 'px';\n                self.input.style.width = cell.width - bx2 - self.style.cellPaddingLeft + 'px';\n                self.clipElement(self.input);\n            }\n        };\n        self.scroll = function (e) {\n            var s = self.getVisibleSchema(),\n                cellBorder = self.style.cellBorderWidth * 2;\n            self.scrollIndexTop = 0;\n            self.scrollPixelTop = 0;\n            self.scrollIndexLeft = 0;\n            self.scrollPixelLeft = 0;\n            while (self.scrollPixelTop < self.scrollBox.scrollTop && self.scrollIndexTop < self.data.length) {\n                self.scrollPixelTop +=\n                    (self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || self.style.cellHeight)\n                    + (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0)\n                    + cellBorder;\n                self.scrollIndexTop += 1;\n            }\n            while (self.scrollPixelLeft < self.scrollBox.scrollLeft && self.scrollIndexLeft < s.length) {\n                self.scrollPixelLeft +=\n                    (self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width);\n                self.scrollIndexLeft += 1;\n            }\n            if (self.data.length > 0) {\n                self.scrollIndexLeft = Math.max(self.scrollIndexLeft - 1, 0);\n                self.scrollPixelLeft = Math.max(self.scrollPixelLeft\n                    - (self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width), 0);\n                self.scrollIndexTop = Math.max(self.scrollIndexTop - 1, 0);\n                self.scrollPixelTop = Math.max(self.scrollPixelTop\n                    - (self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || self.style.cellHeight)\n                    - (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0), 0);\n            }\n            self.ellipsisCache = {};\n            self.draw(true);\n            //TODO: figure out why this has to be delayed for child grids\n            //BUG: scrolling event on 3rd level hierarchy fails to move input box\n            requestAnimationFrame(self.resizeEditInput);\n            self.dispatchEvent('scroll', {top: self.scrollBox.scrollTop, left: self.scrollBox.scrollLeft});\n        };\n        self.mousemove = function (e, overridePos) {\n            if (self.contextMenu || self.input) {\n                return;\n            }\n            self.mouse = overridePos || self.getLayerPos(e);\n            var ctrl = (e.controlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                i,\n                s = self.getSchema(),\n                dragBounds,\n                sBounds,\n                x = self.mouse.x,\n                y = self.mouse.y,\n                o = self.getCellAt(x, y),\n                delta,\n                ev = {NativeEvent: e, cell: o, x: x, y: y},\n                previousCell = self.currentCell;\n            clearTimeout(self.scrollTimer);\n            if (!self.isInGrid({x: x, y: y})) {\n                self.hasFocus = false;\n            }\n            if (self.dispatchEvent('mousemove', ev)) {\n                return;\n            }\n            if (o && self.currentCell && (self.currentCell.rowIndex !== o.rowIndex\n                    || self.currentCell.columnIndex !== o.columnIndex)) {\n                self.cellBoundaryCrossed = true;\n                ev.cell = previousCell;\n                self.dispatchEvent('cellmouseout', ev);\n                ev.cell = o;\n                self.dispatchEvent('cellmouseover', ev);\n            }\n            self.currentCell = o;\n            if (!self.hasFocus) {\n                return;\n            }\n            self.hovers = {};\n            if (!self.draggingItem\n                    && o\n                    && self.scrollModes.indexOf(o.context) === -1) {\n                self.dragItem = o;\n                self.dragMode = o.dragContext;\n                self.canvas.style.cursor = o.context;\n                if (o.context === 'cell' && o.data) {\n                    self.canvas.style.cursor = 'pointer';\n                    self.hovers[o.data[self.uniqueId]] = [o.columnIndex];\n                }\n                if ((self.selecting || self.reorderObject)\n                        && o.context === 'cell'\n                        && o.data) {\n                    sBounds = self.getSelectionBounds();\n                    delta = {\n                        x: Math.abs(self.dragStart.x - x),\n                        y: Math.abs(self.dragStart.y - y),\n                    };\n                    if (self.dragStartObject.columnIndex !== -1 && e.shiftKey) {\n                        self.dragStartObject = {\n                            rowIndex: self.activeCell.rowIndex,\n                            columnIndex: self.activeCell.columnIndex\n                        };\n                    }\n                    dragBounds = {\n                        top: Math.min(self.dragStartObject.rowIndex, o.rowIndex),\n                        left: Math.min(self.dragStartObject.columnIndex, o.columnIndex),\n                        bottom: Math.max(self.dragStartObject.rowIndex, o.rowIndex),\n                        right: Math.max(self.dragStartObject.columnIndex, o.columnIndex)\n                    };\n                    if (self.dragStartObject.columnIndex === -1) {\n                        dragBounds.left = -1;\n                        dragBounds.right = s.length - 1;\n                        dragBounds.top = Math.min(sBounds.top, o.rowIndex);\n                        dragBounds.bottom = Math.max(sBounds.bottom, o.rowIndex);\n                    }\n                    if (self.dragStartObject.rowIndex !== o.rowIndex\n                                || self.dragStartObject.columnIndex !== o.columnIndex) {\n                        self.ignoreNextClick = true;\n                    }\n                    if (self.cellBoundaryCrossed || (delta.x === 0 && delta.y === 0) || self.attributes.rowSelectionMode) {\n                        if (self.attributes.rowSelectionMode || self.dragStartObject.columnIndex === -1) {\n                            self.selectRow(o.rowIndex, ctrl, true);\n                        } else {\n                            if (!self.dragAddToSelection && o.rowIndex) {\n                                if (self.selections[o.rowIndex] && self.selections[o.rowIndex].indexOf(o.columnIndex) !== -1) {\n                                    self.selections[o.rowIndex].splice(self.selections[o.rowIndex].indexOf(o.columnIndex), 1);\n                                }\n                            } else {\n                                self.selections[o.rowIndex] = self.selections[o.rowIndex] || [];\n                                if (self.selections[o.rowIndex].indexOf(o.columnIndex) === -1) {\n                                    self.selections[o.rowIndex].push(o.columnIndex);\n                                }\n                            }\n                        }\n                    }\n                    if ((!self.selectionBounds || (dragBounds.top !== self.selectionBounds.top\n                            || dragBounds.left !== self.selectionBounds.left\n                            || dragBounds.bottom !== self.selectionBounds.bottom\n                            || dragBounds.right !== self.selectionBounds.right)) && !ctrl) {\n                        self.selections = [];\n                        sBounds = dragBounds;\n                        if (self.attributes.rowSelectionMode) {\n                            for (i = sBounds.top; i <= sBounds.bottom; i += 1) {\n                                self.selectRow(i, true, true);\n                            }\n                        } else {\n                            self.selectArea(sBounds, true);\n                        }\n                    }\n                    self.autoScrollZone(e, x, y, ctrl);\n                }\n            }\n            self.cellBoundaryCrossed = false;\n            self.draw(true);\n        };\n        /**\n         * Ends editing, optionally aborting the edit.\n         * @memberof canvasDataGrid\n         * @name endEdit\n         * @method\n         * @param {boolean} abort When true, abort the edit.\n         */\n        self.endEdit = function (abort) {\n            var cell = self.input.editCell,\n                y = cell.rowIndex;\n            function abortEdit() {\n                abort = true;\n            }\n            if (self.dispatchEvent('beforeendedit', {\n                    cell: cell,\n                    newValue: self.input.value,\n                    oldValue: cell.value,\n                    abort: abortEdit,\n                    input: self.input\n                })) { return false; }\n            if (self.input.value !== cell.value && !abort) {\n                self.changes[y] = self.changes[y] || {};\n                self.changes[y][cell.header.name] = self.input.value;\n                cell.data[cell.header.name] = self.input.value;\n                if (y === self.data.length) {\n                    if (self.dispatchEvent('newrow', {\n                            value: self.input.value,\n                            defaultValue: cell.value,\n                            aborted: abort,\n                            cell: cell,\n                            input: self.input\n                        })) { return false; }\n                    self.uId += 1;\n                    self.addRow(cell.data);\n                    self.createNewRowData();\n                }\n                self.draw(true);\n            }\n            document.body.removeChild(self.input);\n            self.controlInput.focus();\n            self.dispatchEvent('endedit', {\n                cell: cell,\n                value: self.input.value,\n                aborted: abort,\n                input: self.input\n            });\n            self.input = undefined;\n            return true;\n        };\n        /**\n         * Begins editing at cell x, row y.\n         * @memberof canvasDataGrid\n         * @name beginEditAt\n         * @method\n         * @param {number} x The column index of the cell to edit.\n         * @param {number} y The row index of the cell to edit.\n         */\n        self.beginEditAt = function (x, y) {\n            if (!self.attributes.editable) { return; }\n            var cell = self.getVisibleCellByIndex(x, y),\n                s = self.getVisibleSchema();\n            if (self.dispatchEvent('beforebeginedit', {cell: cell})) { return false; }\n            self.scrollIntoView(x, y);\n            self.setActiveCell(x, y);\n            function postDraw() {\n                cell = self.getVisibleCellByIndex(x, y);\n                self.input = document.createElement(self.attributes.multiLine ? 'textarea' : 'input');\n                document.body.appendChild(self.input);\n                self.createInlineStyle(self.input, 'canvas-datagrid-edit-input');\n                self.input.style.position = 'absolute';\n                self.input.editCell = cell;\n                self.resizeEditInput();\n                self.input.style.zIndex = '2';\n                self.input.value = cell.value;\n                self.input.focus();\n                self.input.addEventListener('click', self.stopPropagation);\n                self.input.addEventListener('dblclick', self.stopPropagation);\n                self.input.addEventListener('mouseup', self.stopPropagation);\n                self.input.addEventListener('mousedown', self.stopPropagation);\n                self.input.addEventListener('keydown', function (e) {\n                    var nx = cell.columnIndex,\n                        ny = cell.rowIndex;\n                    // esc\n                    if (e.keyCode === 27) {\n                        self.endEdit(true);\n                        self.draw(true);\n                    // enter\n                    } else if (e.keyCode === 13\n                            && (!self.attributes.multiLine\n                                || (self.attributes.multiLine && e.shiftKey))) {\n                        self.endEdit();\n                        self.draw(true);\n                    } else if (e.keyCode === 9) {\n                        e.preventDefault();\n                        if (!self.endEdit()) {\n                            return;\n                        }\n                        if (e.shiftKey) {\n                            nx -= 1;\n                        } else {\n                            nx += 1;\n                        }\n                        if (nx < 0) {\n                            nx = s.length - 1;\n                            ny -= 1;\n                        }\n                        if (nx > s.length - 1) {\n                            nx = 0;\n                            ny += 1;\n                        }\n                        if (ny < 0) {\n                            ny = self.data.length - 1;\n                        }\n                        if (ny > self.data.length - 1) {\n                            ny = 0;\n                        }\n                        self.beginEditAt(nx, ny);\n                    }\n                });\n            }\n            requestAnimationFrame(postDraw);\n            self.dispatchEvent('beginedit', {cell: cell, input: self.input});\n        };\n        self.click = function (e, overridePos) {\n            var i,\n                selectionChanged,\n                ctrl = (e.controlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                pos = overridePos || self.getLayerPos(e);\n            self.currentCell = self.getCellAt(pos.x, pos.y);\n            if (self.currentCell.grid !== undefined) {\n                return;\n            }\n            function checkSelectionChange() {\n                if (!selectionChanged) { return; }\n                self.dispatchEvent('selectionchanged', {\n                    selectedData: self.getSelectedData(),\n                    selections: self.selections,\n                    selectionBounds: self.selectionBounds\n                });\n            }\n            if (self.input) {\n                self.endEdit();\n            }\n            if (self.ignoreNextClick) {\n                self.ignoreNextClick = false;\n                return;\n            }\n            i = self.currentCell;\n            if (self.dispatchEvent('click', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'cell') {\n                if (self.currentCell.style === 'cornerCell') {\n                    self.order(self.uniqueId, 'asc');\n                    self.setFilter();\n                    checkSelectionChange();\n                    return;\n                }\n                if (self.currentCell.style === 'headerCell') {\n                    if (self.orderBy === i.header.name) {\n                        self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                    } else {\n                        self.orderDirection = 'asc';\n                    }\n                    self.order(i.header.name, self.orderDirection);\n                    checkSelectionChange();\n                    return;\n                }\n                if (['rowHeaderCell', 'headerCell'].indexOf(self.currentCell.style) === -1 && !ctrl) {\n                    self.setActiveCell(i.columnIndex, i.rowIndex);\n                }\n                self.selections[i.rowIndex] = self.selections[i.rowIndex] || [];\n                if ((self.attributes.rowSelectionMode || self.currentCell.style === 'rowHeaderCell')) {\n                    if (self.currentCell.style === 'rowHeaderCell'\n                            && self.attributes.tree && pos.x > 0\n                            && pos.x - self.currentCell.x < self.style.treeArrowWidth\n                            + self.style.treeArrowMarginLeft\n                            + self.style.treeArrowMarginRight + self.style.treeArrowClickRadius\n                            && pos.y - self.currentCell.y < self.style.treeArrowHeight\n                            + self.style.treeArrowMarginTop + self.style.treeArrowClickRadius\n                            && pos.y > 0) {\n                        self.toggleTree(i.rowIndex);\n                        return;\n                    }\n                    selectionChanged = true;\n                    self.selectRow(i.rowIndex, ctrl, true);\n                }\n                if (e.shiftKey && !ctrl) {\n                    self.selectionBounds = self.getSelectionBounds();\n                    self.selectArea(undefined, false);\n                }\n            }\n            checkSelectionChange();\n            self.draw(true);\n        };\n        self.dragResizeColumn = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = self.resizingStartingWidth + pos.x - self.dragStart.x;\n            y = self.resizingStartingHeight + pos.y - self.dragStart.y;\n            if (x < self.style.minColumnWidth) {\n                x = self.style.minColumnWidth;\n            }\n            if (y < self.style.minRowHeight) {\n                y = self.style.minRowHeight;\n            }\n            if (self.dispatchEvent('resizecolumn', {x: x, y: y, draggingItem: self.draggingItem})) { return false; }\n            if (self.scrollBox.scrollLeft > self.scrollBox.scrollWidth - self.attributes.resizeScrollZone\n                    && self.dragMode === 'ew-resize') {\n                self.resize(true);\n                self.scrollBox.scrollLeft += x;\n            }\n            if (self.dragMode === 'ew-resize') {\n                self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] = x;\n                if (['rowHeaderCell', 'cornerCell'].indexOf(self.draggingItem.header.style) !== -1) {\n                    self.resize(true);\n                }\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.dragMode === 'ns-resize') {\n                if (self.draggingItem.rowOpen) {\n                    self.sizes.trees[self.draggingItem.data[self.uniqueId]] = y;\n                } else if (self.attributes.globalRowResize) {\n                    self.style.cellHeight = y;\n                } else {\n                    self.sizes.rows[self.draggingItem.data[self.uniqueId]] = y;\n                }\n                self.dispatchEvent('resizerow', {row: y});\n                self.resizeChildGrids();\n                return;\n            }\n            self.ellipsisCache = {};\n        };\n        self.stopDragResize = function () {\n            self.resize();\n            document.body.removeEventListener('mousemove', self.dragResizeColumn, false);\n            document.body.removeEventListener('mouseup', self.stopDragResize, false);\n            self.setStorageData();\n            self.draw(true);\n            self.ignoreNextClick = true;\n        };\n        self.scrollGrid = function (e) {\n            var pos = self.getLayerPos(e);\n            self.scrollMode = self.getCellAt(pos.x, pos.y).context;\n            if (self.scrollMode === 'horizontal-scroll-box' && self.scrollStartMode !== 'horizontal-scroll-box') {\n                self.scrollStartMode = 'horizontal-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.left = self.scrollBox.scrollLeft;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box' && self.scrollStartMode !== 'vertical-scroll-box') {\n                self.scrollStartMode = 'vertical-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.top = self.scrollBox.scrollTop;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollStartMode === 'vertical-scroll-box'\n                    && self.scrollMode !== 'vertical-scroll-box') {\n                self.scrollMode = 'vertical-scroll-box';\n            }\n            if (self.scrollStartMode === 'horizontal-scroll-box'\n                    && self.scrollMode !== 'horizontal-scroll-box') {\n                self.scrollMode = 'horizontal-scroll-box';\n            }\n            clearTimeout(self.scrollTimer);\n            if (self.scrollModes.indexOf(self.scrollMode) === -1) {\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box') {\n                self.scrollBox.scrollTop = self.scrollStart.top + ((pos.y - self.dragStart.y)\n                    / self.scrollBox.heightBoxRatio);\n            } else if (self.scrollMode === 'vertical-scroll-top') {\n                self.scrollBox.scrollTop -= (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'vertical-scroll-bottom') {\n                self.scrollBox.scrollTop += (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n            if (self.scrollMode === 'horizontal-scroll-box') {\n                self.scrollBox.scrollLeft = self.scrollStart.left + ((pos.x - self.dragStart.x)\n                    / self.scrollBox.widthBoxRatio);\n            } else if (self.scrollMode === 'horizontal-scroll-right') {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'horizontal-scroll-left') {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.stopScrollGrid = function () {\n            clearTimeout(self.scrollTimer);\n            document.body.removeEventListener('mousemove', self.scrollGrid, false);\n        };\n        self.dragReorder = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = pos.x - self.dragStart.x;\n            y = pos.y - self.dragStart.y;\n            if (!self.attributes.allowColumnReordering && self.dragMode === 'column-reorder') {\n                return;\n            }\n            if (!self.attributes.allowRowReordering && self.dragMode === 'row-reorder') {\n                return;\n            }\n            if (self.dispatchEvent('reordering', {\n                    NativeEvent: e,\n                    source: self.dragStartObject,\n                    target: self.currentCell,\n                    dragMode: self.dragMode\n                })) {\n                return;\n            }\n            if (Math.abs(x) > self.attributes.reorderDeadZone || Math.abs(y) > self.attributes.reorderDeadZone) {\n                self.reorderObject = self.dragStartObject;\n                self.reorderTarget = self.currentCell;\n                self.reorderObject.dragOffset = {\n                    x: x,\n                    y: y\n                };\n                self.autoScrollZone(e, pos.x, pos.x, false);\n            }\n        };\n        self.stopDragReorder = function (e) {\n            var cr = {\n                    'row-reorder': self.orders.rows,\n                    'column-reorder': self.orders.columns\n                },\n                i = {\n                    'row-reorder': 'rowIndex',\n                    'column-reorder': 'columnIndex'\n                }[self.dragMode];\n            document.body.removeEventListener('mousemove', self.dragReorder, false);\n            document.body.removeEventListener('mouseup', self.stopDragReorder, false);\n            if (self.reorderObject\n                    && self.reorderTarget) {\n                self.ignoreNextClick = true;\n                if (self.reorderObject[i] !== self.reorderTarget[i]\n                        && !self.dispatchEvent('reorder', {\n                            NativeEvent: e,\n                            source: self.reorderObject,\n                            target: self.reorderTarget,\n                            dragMode: self.dragMode\n                        })) {\n                    cr[self.dragMode].splice(cr[self.dragMode].indexOf(self.reorderObject[i]), 1);\n                    cr[self.dragMode].splice(cr[self.dragMode].indexOf(self.reorderTarget[i]), 0, self.reorderObject[i]);\n                    self.setStorageData();\n                }\n            }\n            self.reorderObject = undefined;\n            self.reorderTarget = undefined;\n            self.draw(true);\n        };\n        self.mousedown = function (e, overridePos) {\n            self.lastMouseDownTarget = e.target;\n            if (self.dispatchEvent('mousedown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (e.button === 2 || self.input) { return; }\n            var ctrl = (e.controlKey || e.metaKey);\n            self.dragStart = overridePos || self.getLayerPos(e);\n            self.scrollStart = {\n                left: self.scrollBox.scrollLeft,\n                top: self.scrollBox.scrollTop\n            };\n            self.dragStartObject = self.getCellAt(self.dragStart.x, self.dragStart.y);\n            self.dragAddToSelection = !self.dragStartObject.selected;\n            if (!ctrl && !e.shiftKey && !/(vertical|horizontal)-scroll-(bar|box)/\n                    .test(self.dragStartObject.context)) {\n                self.selections = [];\n            }\n            if (self.dragStartObject.isGrid) {\n                return;\n            }\n            if (self.scrollModes.indexOf(self.dragStartObject.context) !== -1) {\n                self.scrollMode = self.dragStartObject.context;\n                self.scrollStartMode = self.dragStartObject.context;\n                self.scrollGrid(e);\n                document.body.addEventListener('mousemove', self.scrollGrid, false);\n                document.body.addEventListener('mouseup', self.stopScrollGrid, false);\n                self.ignoreNextClick = true;\n                return;\n            }\n            if (self.dragMode === 'cell') {\n                self.selecting = true;\n                if (self.attributes.rowSelectionMode) {\n                    self.selectRow(self.dragStartObject.rowIndex, ctrl, true);\n                }\n                return self.mousemove(e);\n            }\n            if (['ns-resize', 'ew-resize'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragItem;\n                if (self.draggingItem.rowOpen) {\n                    self.resizingStartingHeight = self.sizes.trees[self.draggingItem.data[self.uniqueId]];\n                } else {\n                    self.resizingStartingHeight = self.sizes.rows[self.draggingItem.data[self.uniqueId]] || self.style.cellHeight;\n                }\n                self.resizingStartingWidth = self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] || self.draggingItem.header.width;\n                document.body.addEventListener('mousemove', self.dragResizeColumn, false);\n                document.body.addEventListener('mouseup', self.stopDragResize, false);\n            }\n            if (['row-reorder', 'column-reorder'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragItem;\n                document.body.addEventListener('mousemove', self.dragReorder, false);\n                document.body.addEventListener('mouseup', self.stopDragReorder, false);\n            }\n        };\n        self.mouseup = function (e) {\n            clearTimeout(self.scrollTimer);\n            self.cellBoundaryCrossed = true;\n            self.selecting = undefined;\n            self.draggingItem = undefined;\n            self.dragStartObject = undefined;\n            if (self.dispatchEvent('mouseup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            if (self.currentCell && self.currentCell.grid !== undefined) {\n                return;\n            }\n            if (self.contextMenu || self.input) { return; }\n            if (self.dragStart && self.isInGrid(self.dragStart)) {\n                self.controlInput.focus();\n            }\n            e.preventDefault();\n        };\n        self.keydown = function (e) {\n            var i,\n                x = self.activeCell.columnIndex,\n                y = self.activeCell.rowIndex,\n                ctrl = (e.controlKey || e.metaKey),\n                last = self.data.length - 1,\n                cols = self.getVisibleSchema().length - 1;\n            if (self.dispatchEvent('keydown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            if (self.attributes.showNewRow) {\n                last += 1;\n            }\n            if (e.keyCode === 'Tab') {\n                e.preventDefault();\n            }\n            //ArrowDown\n            if (e.keyCode === 40) {\n                y += 1;\n            //ArrowUp\n            } else if (e.keyCode === 38) {\n                y -= 1;\n            //ArrowLeft Tab\n            } else if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {\n                x -= 1;\n            //ArrowRight Tab\n            } else if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {\n                x += 1;\n            //PageUp\n            } else if (e.keyCode === 33) {\n                y -= self.page;\n                e.preventDefault();\n            //PageDown\n            } else if (e.keyCode === 34) {\n                y += self.page;\n                e.preventDefault();\n            //Home ArrowUp\n            } else if (e.keyCode === 36 || (ctrl && e.keyCode === 38)) {\n                y = 0;\n            //End ArrowDown\n            } else if (e.keyCode === 35 || (ctrl && e.keyCode === 40)) {\n                y = self.data.length - 1;\n            //ArrowRight\n            } else if (ctrl && e.keyCode === 39) {\n                x = cols;\n            //ArrowLeft\n            } else if (ctrl && e.keyCode === 37) {\n                x = 0;\n            }\n            //Enter\n            if (e.keyCode === 13) {\n                return self.beginEditAt(x, y);\n            }\n            //Space\n            if (e.keyCode === 32) {\n                self.selections = [];\n                self.selections[Math.max(y, 0)] = [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                if (self.attributes.rowSelectionMode) {\n                    for (i = self.selectionBounds.top; i <= self.selectionBounds.bottom; i += 1) {\n                        self.selectRow(i, ctrl, true);\n                    }\n                } else {\n                    self.selectArea(undefined, ctrl);\n                }\n                e.preventDefault();\n                self.draw(true);\n                return;\n            }\n            if (x < 0) {\n                x = 0;\n            }\n            if (y > last) {\n                y = last;\n            }\n            if (y < 0) {\n                y = 0;\n            }\n            if (x > cols) {\n                x = cols;\n            }\n            // Arrows\n            if (e.shiftKey && [37, 38, 39, 40].indexOf(e.keyCode) !== -1) {\n                self.selections[Math.max(y, 0)] = self.selections[Math.max(y, 0)] || [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                self.selectArea(undefined, ctrl);\n                self.draw(true);\n            }\n            if (x !== self.activeCell.columnIndex || y !== self.activeCell.rowIndex) {\n                self.scrollIntoView(x !== self.activeCell.columnIndex ? x : undefined, y !== self.activeCell.rowIndex ? y : undefined);\n                self.setActiveCell(x, y);\n                if (!e.shiftKey && self.attributes.selectionFollowsActiveCell) {\n                    if (!ctrl) {\n                        self.selections = [];\n                    }\n                    self.selections[y] = self.selections[y] || [];\n                    self.selections[y].push(x);\n                    self.dispatchEvent('selectionchanged', {\n                        selectedData: self.getSelectedData(),\n                        selections: self.selections,\n                        selectionBounds: self.selectionBounds\n                    });\n                }\n                self.draw(true);\n            }\n        };\n        self.keyup = function (e) {\n            if (self.dispatchEvent('keyup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            self.controlInput.value = '';\n        };\n        self.keypress = function (e) {\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.dispatchEvent('keypress', {NativeEvent: e, cell: self.currentCell})) { return; }\n        };\n        self.dblclick = function (e) {\n            if (self.dispatchEvent('dblclick', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'headerCell') {\n                self.fitColumnToValues(self.currentCell.header.name);\n            } else if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'cornerCell') {\n                self.autosize();\n            } else if (['cell', 'activeCell'].indexOf(self.currentCell.style) !== -1) {\n                self.beginEditAt(self.currentCell.columnIndex, self.currentCell.rowIndex);\n            }\n        };\n        self.scrollWheel = function (e) {\n            if (self.dispatchEvent('wheel', {NativeEvent: e})) {\n                return;\n            }\n            self.touchHaltAnimation = true;\n            var l = self.scrollBox.scrollLeft,\n                t = self.scrollBox.scrollTop;\n            if (self.hasFocus) {\n                self.scrollBox.scrollTop += e.deltaY;\n                self.scrollBox.scrollLeft += e.deltaX;\n            }\n            if (t !== self.scrollBox.scrollTop || l !== self.scrollBox.scrollLeft) {\n                e.preventDefault();\n            }\n        };\n        self.copy = function (e) {\n            if (self.dispatchEvent('copy', {NativeEvent: e})) { return; }\n            if (!self.hasFocus || !e.clipboardData) { return; }\n            var rows = [], sData = self.getSelectedData();\n            if (sData.length > 0) {\n                sData.forEach(function (row) {\n                    if (row) {\n                        var r = [];\n                        Object.keys(row).forEach(function (key) {\n                            r.push(row[key]);\n                        });\n                        r.join(',');\n                        rows.push(r);\n                    }\n                });\n                e.clipboardData.setData('text/plain', rows.join('\\n'));\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/events.js\n// module id = 2\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.intf.blur = function () {\n            self.hasFocus = false;\n        };\n        self.intf.focus = function () {\n            self.hasFocus = true;\n            self.controlInput.focus();\n        };\n        Object.defineProperty(self.intf, 'height', {\n            get: function () {\n                return self.parentNode.height;\n            },\n            set: function (value) {\n                self.parentNode.height = value;\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'width', {\n            get: function () {\n                return self.parentNode.width;\n            },\n            set: function (value) {\n                self.parentNode.width = value;\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'openChildren', {\n            get: function () {\n                return self.openChildren;\n            }\n        });\n        Object.defineProperty(self.intf, 'childGrids', {\n            get: function () {\n                return Object.keys(self.childGrids).map(function (gridId) {\n                    return self.childGrids[gridId];\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'isChildGrid', {\n            get: function () {\n                return self.isChildGrid;\n            }\n        });\n        Object.defineProperty(self.intf, 'parentNode', {\n            get: function () {\n                return self.parentNode;\n            },\n            set: function (value) {\n                self.parentNode = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetParent', {\n            get: function () {\n                return self.parentNode;\n            },\n            set: function (value) {\n                self.parentNode = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetLeft', {\n            get: function () {\n                return self.parentNode.offsetLeft;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetTop', {\n            get: function () {\n                return self.parentNode.offsetTop;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollHeight', {\n            get: function () {\n                return self.scrollBox.scrollHeight;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollWidth', {\n            get: function () {\n                return self.scrollBox.scrollWidth;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollTop', {\n            get: function () {\n                return self.scrollBox.scrollTop;\n            },\n            set: function (value) {\n                self.scrollBox.scrollTop = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollLeft', {\n            get: function () {\n                return self.scrollBox.scrollLeft;\n            },\n            set: function (value) {\n                self.scrollBox.scrollLeft = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'sizes', {\n            get: function () {\n                return self.sizes;\n            }\n        });\n        Object.defineProperty(self.intf, 'input', {\n            get: function () {\n                return self.input;\n            }\n        });\n        Object.defineProperty(self.intf, 'controlInput', {\n            get: function () {\n                return self.controlInput;\n            }\n        });\n        Object.defineProperty(self.intf, 'currentCell', {\n            get: function () {\n                return self.currentCell;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleCells', {\n            get: function () {\n                return self.visibleCells;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRows', {\n            get: function () {\n                return self.visibleRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'selections', {\n            get: function () {\n                return self.selections;\n            }\n        });\n        Object.defineProperty(self.intf, 'dragMode', {\n            get: function () {\n                return self.dragMode;\n            }\n        });\n        Object.defineProperty(self.intf, 'changes', {\n            get: function () {\n                return self.changes;\n            }\n        });\n        self.intf.attributes = {};\n        self.intf.formatters = self.formatters;\n        Object.defineProperty(self.intf, 'selectionBounds', {\n            get: function () {\n                return self.getSelectionBounds();\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedRows', {\n            get: function () {\n                return self.getSelectedData(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedCells', {\n            get: function () {\n                return self.getSelectedData();\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleSchema', {\n            get: function () {\n                return self.getVisibleSchema().map(function eachDataRow(col) {\n                    return col;\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'ctx', {\n            get: function () {\n                return self.ctx;\n            }\n        });\n        Object.defineProperty(self.intf, 'schema', {\n            get: function schemaGetter() {\n                return self.getSchema();\n            },\n            set: function schemaSetter(value) {\n                if (!Array.isArray(value) || typeof value[0] !== 'object') {\n                    throw new Error('Schema must be an array of objects.');\n                }\n                if (value[0].name === undefined) {\n                    throw new Error('Expected schema to contain an object with at least a name property.');\n                }\n                self.schema = value.map(function eachSchemaColumn(column, index) {\n                    column.width = column.width || self.style.columnWidth;\n                    column[self.uniqueId] = self.getSchemaNameHash(column.name);\n                    column.filter = column.filter || self.filter(column.type);\n                    column.type = column.type || 'string';\n                    column.index = index;\n                    column.columnIndex = index;\n                    column.rowIndex = -1;\n                    return column;\n                });\n                self.tempSchema = undefined;\n                self.createNewRowData();\n                self.createColumnOrders();\n                self.tryLoadStoredOrders();\n                self.resize(true);\n                self.dispatchEvent('schemachanged', {schema: self.schema});\n            }\n        });\n        Object.defineProperty(self.intf, 'data', {\n            get: function dataGetter() {\n                return self.data;\n            },\n            set: function dataSetter(value) {\n                if (!Array.isArray(value)\n                        || (value.length > 0 && typeof value[0] !== 'object')) {\n                    throw new Error('Data must be an array of objects.');\n                }\n                self.dataGroup = {};\n                self.originalData = value.map(function eachDataRow(row) {\n                    row[self.uniqueId] = self.uId;\n                    self.uId += 1;\n                    return row;\n                });\n                self.changes = [];\n                //TODO apply filter to incoming dataset\n                self.data = self.originalData;\n                if (!self.schema && self.data.length > 0) {\n                    self.tempSchema = self.getSchemaFromData();\n                }\n                if (!self.schema && self.data.length === 0) {\n                    self.tempSchema = [{name: ''}];\n                    self.tempSchema[0][self.uniqueId] = self.getSchemaNameHash('');\n                }\n                if (self.tempSchema && !self.schema) {\n                    self.createColumnOrders();\n                    self.tryLoadStoredOrders();\n                    self.dispatchEvent('schemachanged', {schema: self.tempSchema});\n                }\n                self.createNewRowData();\n                if (self.attributes.autoResizeColumns && self.data.length > 0\n                        && self.storedSettings === undefined) {\n                    self.autosize();\n                }\n                // width cannot be determined correctly until after inserted into the dom?\n                requestAnimationFrame(function () {\n                    self.fitColumnToValues('cornerCell');\n                });\n                if (!self.resize()) { self.draw(true); }\n                self.createRowOrders();\n                self.tryLoadStoredOrders();\n                self.dispatchEvent('datachanged', {data: self.data});\n            }\n        });\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/intf.js\n// module id = 3\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false, Event: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var zIndexTop = 2, hoverScrollTimeout, autoCompleteContext;\n        function createContextMenu(ev, pos, items, parentContextMenu) {\n            var container = document.createElement('div'),\n                upArrow = document.createElement('div'),\n                downArrow = document.createElement('div'),\n                children = [],\n                selectedIndex = -1,\n                intf,\n                rect;\n            function createItems() {\n                items.forEach(function (item) {\n                    var contextItemContainer = document.createElement('div'),\n                        childMenuArrow;\n                    function removeChildContext(e) {\n                        if (e.relatedTarget === container\n                                || item.contextMenu.container === e.relatedTarget) { return; }\n                        item.contextMenu.dispose();\n                        children.splice(children.indexOf(item.contextMenu), 1);\n                        item.contextMenu = undefined;\n                        contextItemContainer.removeEventListener('mouseout', removeChildContext);\n                        container.removeEventListener('mouseout', removeChildContext);\n                        contextItemContainer.setAttribute('contextOpen', '0');\n                    }\n                    function createChildContext() {\n                        if (contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        var cPos = contextItemContainer.getBoundingClientRect();\n                        item.contextMenu = createContextMenu(ev, {\n                            left: cPos.left + self.style.childContextMenuMarginLeft + container.offsetWidth,\n                            top: cPos.top + self.style.childContextMenuMarginTop,\n                            bottom: cPos.bottom,\n                            right: cPos.right,\n                        }, item.items, intf);\n                        contextItemContainer.setAttribute('contextOpen', '1');\n                        contextItemContainer.addEventListener('mouseout', removeChildContext);\n                        container.addEventListener('mouseout', removeChildContext);\n                        children.push(item.contextMenu);\n                    }\n                    function addItem(item) {\n                        function addContent(content) {\n                            if (typeof content === 'function') {\n                                return addContent(content(ev));\n                            }\n                            if (typeof content === 'object') {\n                                contextItemContainer.appendChild(content);\n                                return;\n                            }\n                            self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n                            contextItemContainer.addEventListener('mouseover', function () {\n                                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                            });\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n                            });\n                            contextItemContainer.innerHTML = content;\n                            return;\n                        }\n                        addContent(item.title);\n                        item.contextItemContainer = contextItemContainer;\n                        if (item.items && item.items.length > 0) {\n                            childMenuArrow = document.createElement('div');\n                            self.createInlineStyle(childMenuArrow, 'canvas-datagrid-context-child-arrow');\n                            childMenuArrow.innerHTML = self.style.childContextMenuArrowHTML;\n                            contextItemContainer.appendChild(childMenuArrow);\n                            contextItemContainer.addEventListener('mouseover', createChildContext);\n                        }\n                        if (item.click) {\n                            contextItemContainer.addEventListener('click', function (ev) {\n                                item.click.apply(self, [ev]);\n                            });\n                        }\n                    }\n                    addItem(item);\n                    container.appendChild(contextItemContainer);\n                });\n            }\n            function clickIndex(idx) {\n                items[idx].contextItemContainer.dispatchEvent(new Event('click'));\n            }\n            function checkArrowVisibility() {\n                if (container.scrollTop > 0) {\n                    document.body.appendChild(upArrow);\n                } else if (upArrow.parentNode) {\n                    upArrow.parentNode.removeChild(upArrow);\n                }\n                if (container.scrollTop >= container.scrollHeight - container.offsetHeight && downArrow.parentNode) {\n                    downArrow.parentNode.removeChild(downArrow);\n                } else if (container.scrollHeight - container.offsetHeight > 0\n                        && !(container.scrollTop >= container.scrollHeight - container.offsetHeight)) {\n                    document.body.appendChild(downArrow);\n                }\n            }\n            function startHoverScroll(type) {\n                return function t() {\n                    var a = self.attributes.contextHoverScrollAmount;\n                    if (type === 'up' && container.scrollTop === 0) { return; }\n                    if (type === 'down' && container.scrollTop === container.scrollHeight) { return; }\n                    container.scrollTop += (type === 'up' ? -a : a);\n                    hoverScrollTimeout = setTimeout(t, self.attributes.contextHoverScrollRateMs, type);\n                };\n            }\n            function endHoverScroll(type) {\n                return function () {\n                    clearTimeout(hoverScrollTimeout);\n                };\n            }\n            function init() {\n                var loc = {},\n                    s = self.scrollOffset(self.canvas);\n                createItems();\n                self.createInlineStyle(container, 'canvas-datagrid-context-menu');\n                loc.x = pos.left - s.left;\n                loc.y = pos.top - s.top;\n                loc.height = 0;\n                zIndexTop += 1;\n                container.style.position = 'absolute';\n                upArrow.style.color = self.style.contextMenuArrowColor;\n                downArrow.style.color = self.style.contextMenuArrowColor;\n                [upArrow, downArrow].forEach(function (el) {\n                    el.style.textAlign = 'center';\n                    el.style.position = 'absolute';\n                    el.style.zIndex = zIndexTop + 1;\n                });\n                container.style.zIndex = zIndexTop;\n                if (parentContextMenu && parentContextMenu.inputDropdown) {\n                    container.style.maxHeight = window.innerHeight - loc.y - self.style.autocompleteBottomMargin + 'px';\n                    container.style.minWidth = pos.width + 'px';\n                    loc.y += pos.height;\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                container.addEventListener('scroll', checkArrowVisibility);\n                container.addEventListener('wheel', function (e) {\n                    if (self.hasFocus) {\n                        container.scrollTop += e.deltaY;\n                        container.scrollLeft += e.deltaX;\n                    }\n                    checkArrowVisibility();\n                });\n                upArrow.innerHTML = self.style.contextMenuArrowUpHTML;\n                downArrow.innerHTML = self.style.contextMenuArrowDownHTML;\n                container.appendChild(upArrow);\n                document.body.appendChild(downArrow);\n                document.body.appendChild(container);\n                rect = container.getBoundingClientRect();\n                if (rect.bottom > window.innerHeight && !(parentContextMenu && parentContextMenu.inputDropdown)) {\n                    loc.y = window.innerHeight - container.offsetHeight;\n                    if (loc.y < 0) { loc.y = 0; }\n                    if (container.offsetHeight > window.innerHeight) {\n                        container.style.height = window.innerHeight - self.style.contextMenuWindowMargin + 'px';\n                    }\n                }\n                if (rect.right > window.innerWidth) {\n                    if (parentContextMenu) {\n                        loc.x = parentContextMenu.container.offsetLeft - container.offsetWidth;\n                    } else {\n                        loc.x = window.innerWidth - container.offsetWidth;\n                    }\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                rect = container.getBoundingClientRect();\n                upArrow.style.top = rect.top + 'px';\n                downArrow.style.top = rect.top + rect.height - downArrow.offsetHeight + 'px';\n                upArrow.style.left = rect.left + 'px';\n                downArrow.style.left = rect.left + 'px';\n                downArrow.style.width = container.offsetWidth + 'px';\n                upArrow.style.width = container.offsetWidth + 'px';\n                downArrow.addEventListener('mouseover', startHoverScroll('down'));\n                downArrow.addEventListener('mouseout', endHoverScroll('down'));\n                upArrow.addEventListener('mouseover', startHoverScroll('up'));\n                upArrow.addEventListener('mouseout', endHoverScroll('up'));\n                checkArrowVisibility();\n            }\n            init();\n            intf = {\n                clickIndex: clickIndex,\n                rect: rect,\n                parentContextMenu: parentContextMenu,\n                container: container,\n                items: items,\n                children: children,\n                dispose: function () {\n                    clearTimeout(hoverScrollTimeout);\n                    children.forEach(function (c) {\n                        c.dispose();\n                    });\n                    [downArrow, upArrow, container].forEach(function (el) {\n                        if (el.parentNode) { el.parentNode.removeChild(el); }\n                    });\n                }\n            };\n            Object.defineProperty(intf, 'selectedIndex', {\n                get: function () {\n                    return selectedIndex;\n                },\n                set: function (value) {\n                    if (typeof value !== 'number' || isNaN(value || !isFinite(value))) {\n                        throw new Error('Context menu selected index must be a sane number.');\n                    }\n                    selectedIndex = value;\n                    if (selectedIndex > items.length - 1) {\n                        selectedIndex = items.length - 1;\n                    }\n                    if (selectedIndex < 0) {\n                        selectedIndex = 0;\n                    }\n                    items.forEach(function (item, index) {\n                        if (index === selectedIndex) {\n                            return self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                        }\n                        self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item');\n                    });\n                }\n            });\n            return intf;\n        }\n        function createFilterContextMenuItems(e) {\n            var filterContainer = document.createElement('div'),\n                filterLabel = document.createElement('div'),\n                filterAutoCompleteButton = document.createElement('button'),\n                filterInput = document.createElement('input'),\n                n = e.cell && e.cell.header ? e.cell.header.title || e.cell.header.name : '',\n                autoCompleteItems,\n                iRect;\n            function fillAutoComplete() {\n                autoCompleteItems = {};\n                self.data.forEach(function (row) {\n                    var value = row[e.cell.header.name];\n                    if (autoCompleteItems[value]) { return; }\n                    autoCompleteItems[value] = {\n                        title: self.formatters[e.cell.header.type || 'string'](null, { value: value }),\n                        click: function (e) {\n                            filterInput.value = value;\n                            e.stopPropagation();\n                            filterInput.dispatchEvent(new Event('keyup'));\n                            self.disposeAutocomplete();\n                            return;\n                        }\n                    };\n                });\n                autoCompleteItems = Object.keys(autoCompleteItems).map(function (key) {\n                    return autoCompleteItems[key];\n                });\n            }\n            function createAutoCompleteContext(ev) {\n                if (ev && [40, 38, 13, 9, 27].indexOf(ev.keyCode) !== -1) { return; }\n                fillAutoComplete();\n                iRect = filterInput.getBoundingClientRect();\n                if (autoCompleteContext) {\n                    autoCompleteContext.dispose();\n                    autoCompleteContext = undefined;\n                }\n                autoCompleteContext = createContextMenu(e, {\n                    left: iRect.left,\n                    top: iRect.top,\n                    right: iRect.right,\n                    bottom: iRect.bottom,\n                    height: iRect.height,\n                    width: iRect.width\n                }, autoCompleteItems, {inputDropdown: true});\n                autoCompleteContext.selectedIndex = 0;\n            }\n            self.createInlineStyle(filterLabel, 'canvas-datagrid-context-menu-label');\n            self.createInlineStyle(filterAutoCompleteButton, 'canvas-datagrid-context-menu-filter-button');\n            filterInput.onclick = self.disposeAutocomplete;\n            filterInput.addEventListener('keydown', function (e) {\n                //down\n                if (e.keyCode === 40) {\n                    autoCompleteContext.selectedIndex += 1;\n                }\n                //up\n                if (e.keyCode === 38) {\n                    autoCompleteContext.selectedIndex -= 1;\n                }\n                //enter\n                if (e.keyCode === 13) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    self.disposeContextMenu();\n                }\n                //tab\n                if (e.keyCode === 9) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    e.preventDefault();\n                }\n                //esc\n                if (e.keyCode === 27) {\n                    self.disposeContextMenu();\n                }\n            });\n            filterInput.addEventListener('keyup', function () {\n                self.setFilter(e.cell.header.name, filterInput.value);\n            });\n            filterInput.addEventListener('keyup', createAutoCompleteContext);\n            filterLabel.innerHTML = self.attributes.filterOptionText.replace(/%s/g, n);\n            filterAutoCompleteButton.onclick = function () {\n                if (autoCompleteContext) {\n                    return self.disposeAutocomplete();\n                }\n                createAutoCompleteContext();\n            };\n            filterAutoCompleteButton.innerHTML = self.style.contextFilterButtonHTML;\n            filterContainer.addEventListener('click', function (e) {\n                return e.stopPropagation();\n            });\n            filterContainer.appendChild(filterLabel);\n            filterContainer.appendChild(filterInput);\n            filterContainer.appendChild(filterAutoCompleteButton);\n            e.items.push({\n                title: filterContainer\n            });\n            if (Object.keys(self.columnFilters).length) {\n                Object.keys(self.columnFilters).forEach(function (cf) {\n                    var h = self.getHeaderByName(cf);\n                    e.items.push({\n                        title: self.attributes.removeFilterOptionText.replace(/%s/g, h.title || h.name),\n                        click: function removeFilterClick(e) {\n                            e.preventDefault();\n                            self.setFilter(cf, '');\n                            self.controlInput.focus();\n                        }\n                    });\n                });\n            }\n        }\n        function addDefaultContextMenuItem(e) {\n            if (self.attributes.showFilter) {\n                createFilterContextMenuItems(e);\n            }\n            if (self.attributes.showCopy\n                    && self.selections.reduce(function (p, r) {\n                        return p + r.length;\n                    }, 0) > 0) {\n                e.items.push({\n                    title: self.attributes.copyText,\n                    click: function () {\n                        document.execCommand('copy');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.saveAppearance && self.attributes.showClearSettingsOption\n                    && (Object.keys(self.sizes.rows).length > 0\n                        || Object.keys(self.sizes.columns).length > 0)) {\n                e.items.push({\n                    title: self.attributes.clearSettingsOptionText,\n                    click: function (e) {\n                        e.preventDefault();\n                        self.sizes.rows = {};\n                        self.sizes.columns = {};\n                        self.createRowOrders();\n                        self.createColumnOrders();\n                        self.storedSettings = undefined;\n                        self.dispatchEvent('resizecolumn', {columnWidth: self.style.columnWidth});\n                        self.dispatchEvent('resizerow', {cellHeight: self.style.cellHeight});\n                        self.setStorageData();\n                        self.resize(true);\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.allowSorting && self.attributes.showOrderByOption) {\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextAsc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (e) {\n                        e.preventDefault();\n                        self.order(e.cell.header.name, 'asc');\n                        self.controlInput.focus();\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextDesc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (e) {\n                        e.preventDefault();\n                        self.order(e.cell.header.name, 'desc');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n        }\n        self.disposeAutocomplete = function () {\n            if (autoCompleteContext) {\n                autoCompleteContext.dispose();\n                autoCompleteContext = undefined;\n            }\n        };\n        self.disposeContextMenu = function () {\n            document.removeEventListener('click', self.disposeContextMenu);\n            zIndexTop = 2;\n            self.disposeAutocomplete();\n            self.contextMenu.dispose();\n            self.contextMenu = undefined;\n        };\n        self.contextmenuEvent = function (e, overridePos) {\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            var items = [],\n                pos = overridePos || self.getLayerPos(e, true),\n                ev = {\n                    NativeEvent: e,\n                    cell: self.getCellAt(pos.x, pos.y),\n                    items: items\n                };\n            addDefaultContextMenuItem(ev);\n            if (self.dispatchEvent('contextmenu', ev)) {\n                return;\n            }\n            if (self.contextMenu) {\n                self.disposeContextMenu();\n            }\n            self.contextMenu = createContextMenu(ev, {\n                left: pos.x + pos.rect.left + self.style.contextMenuMarginLeft + self.canvasOffsetLeft,\n                top: pos.y + pos.rect.top + self.style.contextMenuMarginTop + self.canvasOffsetTop,\n                right: ev.cell.width + ev.cell.x + pos.rect.left,\n                bottom: ev.cell.height + ev.cell.y + pos.rect.top,\n                height: ev.cell.height,\n                width: ev.cell.width\n            }, items);\n            document.addEventListener('click', self.disposeContextMenu);\n            e.preventDefault();\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/contextMenu.js\n// module id = 4\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.defaults = {\n            attributes: [\n                ['name', ''],\n                ['tree', false],\n                ['showNewRow', false],\n                ['treeHorizontalScroll', false],\n                ['saveAppearance', true],\n                ['selectionFollowsActiveCell', false],\n                ['multiLine', false],\n                ['editable', true],\n                ['allowColumnReordering', true],\n                ['allowRowReordering', false],\n                ['allowSorting', true],\n                ['showFilter', true],\n                ['globalRowResize', false],\n                ['pageUpDownOverlap', 1],\n                ['persistantSelectionMode', false],\n                ['rowSelectionMode', false],\n                ['autoResizeColumns', false],\n                ['allowRowHeaderResize', true],\n                ['allowColumnResize', true],\n                ['allowRowResize', true],\n                ['allowRowResizeFromCell', false],\n                ['allowColumnResizeFromCell', false],\n                ['debug', false],\n                ['borderResizeZone', 10],\n                ['showColumnHeaders', true],\n                ['showRowNumbers', true],\n                ['showRowHeaders', true],\n                ['scrollRepeatRate', 75],\n                ['selectionScrollZone', 20],\n                ['resizeScrollZone', 20],\n                ['contextHoverScrollRateMs', 5],\n                ['contextHoverScrollAmount', 2],\n                ['selectionScrollIncrement', 20],\n                ['reorderDeadZone', 3],\n                ['showClearSettingsOption', true],\n                ['showOrderByOption', true],\n                ['clearSettingsOptionText', 'Clear saved settings'],\n                ['showOrderByOptionTextAsc', 'Order by %s ascending'],\n                ['showOrderByOptionTextDesc', 'Order by %s descending'],\n                ['removeFilterOptionText', 'Remove filter on %s'],\n                ['filterOptionText', 'Filter %s'],\n                ['filterTextPrefix', '(filtered) '],\n                ['touchReleaseAnimationDurationMs', 1000],\n                ['touchReleaseAcceleration', 30],\n                ['touchDeadZone', 3],\n                ['touchSelectTimeMs', 800],\n                ['touchScrollZone', 40],\n                ['copyText', 'Copy'],\n                ['showCopy', true]\n            ],\n            styles: [\n                ['activeCellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['activeCellBorderWidth', 0.25],\n                ['activeCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellFont', '16px sans-serif'],\n                ['activeCellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['activeCellOverlayBorderWidth', 1.50],\n                ['activeCellPaddingBottom', 5],\n                ['activeCellPaddingLeft', 5],\n                ['activeCellPaddingRight', 7],\n                ['activeCellPaddingTop', 5],\n                ['activeCellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['activeCellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['activeHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeRowHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeRowHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['autocompleteBottomMargin', 60],\n                ['autosizeHeaderCellPadding', 8],\n                ['autosizePadding', 5],\n                ['backgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cellAutoResizePadding', 13],\n                ['cellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['cellBorderWidth', 0.25],\n                ['cellColor', 'rgba(0, 0, 0, 1)'],\n                ['cellFont', '16px sans-serif'],\n                ['cellHeight', 24],\n                ['cellHeightWithChildGrid', 150],\n                ['cellHorizontalAlignment', 'left'],\n                ['cellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['cellPaddingBottom', 5],\n                ['cellPaddingLeft', 5],\n                ['cellPaddingRight', 7],\n                ['cellPaddingTop', 5],\n                ['cellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['cellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['cellVerticalAlignment', 'center'],\n                ['cellWidthWithChildGrid', 250],\n                ['childContextMenuMarginLeft', -5],\n                ['childContextMenuMarginTop', 0],\n                ['childContextMenuArrowHTML', '&#x25BA;'],\n                ['childContextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuChildArrowFontSize', '12px'],\n                ['columnWidth', 250],\n                ['contextMenuBackground', 'rgba(240, 240, 240, 1)'],\n                ['contextMenuBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextMenuBorderRadius', '3px'],\n                ['contextMenuColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuFilterInvalidExpresion', 'rgba(237, 155, 156, 1)'],\n                ['contextMenuFontFamily', 'sans-serif'],\n                ['contextMenuFontSize', '16px'],\n                ['contextMenuHoverBackground', 'rgba(182, 205, 250, 1)'],\n                ['contextMenuHoverColor', 'rgba(43, 48, 153, 1)'],\n                ['contextMenuItemBorderRadius', '3px'],\n                ['contextMenuItemMargin', '2px'],\n                ['contextMenuLabelDisplay', 'inline-block'],\n                ['contextMenuLabelMargin', '0 3px 0 0'],\n                ['contextMenuLabelMaxWidth', '700px'],\n                ['contextMenuLabelMinWidth', '75px'],\n                ['contextMenuMarginLeft', 3],\n                ['contextMenuMarginTop', -3],\n                ['contextMenuWindowMargin', 6],\n                ['contextMenuOpacity', '0.98'],\n                ['contextMenuPadding', '2px'],\n                ['contextMenuArrowUpHTML', '&#x25B2;'],\n                ['contextMenuArrowDownHTML', '&#x25BC;'],\n                ['contextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextFilterButtonHTML', '&#x25BC;'],\n                ['contextFilterButtonBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterButtonBorderRadius', '3px'],\n                ['cornerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cornerCellBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['editCellBorder', 'solid 1px rgba(110, 168, 255, 1)'],\n                ['editCellBoxShadow', '0 2px 5px rgba(0,0,0,0.4)'],\n                ['editCellFontFamily', 'sans-serif'],\n                ['editCellFontSize', '16px'],\n                ['editCellPaddingLeft', 4],\n                ['editCellColor', 'black'],\n                ['editCellBackgroundColor', 'white'],\n                ['gridBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['gridBorderWidth', 1],\n                ['headerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['headerCellBorderColor', 'rgba(152, 152, 152, 1)'],\n                ['headerCellBorderWidth', 0.25],\n                ['headerCellColor', 'rgba(50, 50, 50, 1)'],\n                ['headerCellFont', '16px sans-serif'],\n                ['headerCellHeight', 25],\n                ['headerCellHorizontalAlignment', 'left'],\n                ['headerCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['headerCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['headerCellPaddingBottom', 5],\n                ['headerCellPaddingLeft', 5],\n                ['headerCellPaddingRight', 7],\n                ['headerCellPaddingTop', 5],\n                ['headerCellVerticalAlignment', 'center'],\n                ['headerOrderByArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['headerOrderByArrowBorderWidth', 1],\n                ['headerOrderByArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['headerOrderByArrowHeight', 8],\n                ['headerOrderByArrowMarginLeft', 0],\n                ['headerOrderByArrowMarginRight', 5],\n                ['headerOrderByArrowMarginTop', 6],\n                ['headerOrderByArrowWidth', 13],\n                ['headerRowWidth', 57],\n                ['minColumnWidth', 45],\n                ['minHeight', 24],\n                ['minRowHeight', 24],\n                ['name', 'default'],\n                ['reorderMarkerBackgroundColor', 'rgba(0, 0, 0, 0.1)'],\n                ['reorderMarkerBorderColor', 'rgba(0, 0, 0, 0.2)'],\n                ['reorderMarkerBorderWidth', 1.25],\n                ['reorderMarkerIndexBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['reorderMarkerIndexBorderWidth', 2.75],\n                ['rowHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['rowHeaderCellBorderColor', 'rgba(152, 152, 152, 1)'],\n                ['rowHeaderCellBorderWidth', 0.25],\n                ['rowHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellFont', '16px sans-serif'],\n                ['rowHeaderCellHeight', 25],\n                ['rowHeaderCellHorizontalAlignment', 'left'],\n                ['rowHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['rowHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['rowHeaderCellPaddingBottom', 5],\n                ['rowHeaderCellPaddingLeft', 5],\n                ['rowHeaderCellPaddingRight', 5],\n                ['rowHeaderCellPaddingTop', 5],\n                ['rowHeaderCellSelectedBackgroundColor', 'rgba(217, 217, 217, 1)'],\n                ['rowHeaderCellSelectedColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellVerticalAlignment', 'center'],\n                ['scrollBarActiveColor', 'rgba(125, 125, 125, 1)'],\n                ['scrollBarBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarBorderWidth', 0.5],\n                ['scrollBarBoxBorderRadius', 3],\n                ['scrollBarBoxColor', 'rgba(192, 192, 192, 1)'],\n                ['scrollBarBoxMargin', 2],\n                ['scrollBarBoxMinSize', 15],\n                ['scrollBarBoxWidth', 8],\n                ['scrollBarCornerBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarCornerBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarWidth', 11],\n                ['selectionOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionOverlayBorderWidth', 0.75],\n                ['treeArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['treeArrowBorderWidth', 1],\n                ['treeArrowClickRadius', 5],\n                ['treeArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['treeArrowHeight', 8],\n                ['treeArrowMarginLeft', 0],\n                ['treeArrowMarginRight', 5],\n                ['treeArrowMarginTop', 6],\n                ['treeArrowWidth', 13],\n                ['treeGridHeight', 250]\n            ]\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/defaults.js\n// module id = 5\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.createInlineStyle = function (el, className) {\n            var css = {\n                'canvas-datagrid-context-menu-filter-button': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextFilterButtonBorder,\n                    borderRadius: self.style.contextFilterButtonBorderRadius\n                },\n                'canvas-datagrid-context-child-arrow': {\n                    cssFloat: 'right',\n                    color: self.style.childContextMenuArrowColor,\n                    fontSize: self.style.contextMenuChildArrowFontSize,\n                    fontFamily: self.style.contextMenuFontFamily,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-autocomplete': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    position: 'absolute',\n                    zIndex: 3,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-autocomplete-item': {\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                },\n                'canvas-datagrid-autocomplete-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-canvas': {\n                    position: 'absolute',\n                    zIndex: '-1'\n                },\n                'canvas-datagrid': {\n                    position: 'absolute',\n                    background: self.style.backgroundColor,\n                    zIndex: '1',\n                    boxSizing: 'content-box',\n                    padding: '0'\n                },\n                'canvas-datagrid-control-input': {\n                    position: 'fixed',\n                    top: '-5px',\n                    left: '-5px',\n                    border: 'none',\n                    opacity: '0',\n                    cursor: 'pointer',\n                    width: '1px',\n                    height: '1px'\n                },\n                'canvas-datagrid-edit-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 ' + self.style.editCellPaddingLeft + 'px',\n                    fontSize: self.style.editCellFontSize,\n                    fontFamily: self.style.editCellFontFamily,\n                    boxShadow: self.style.editCellBoxShadow,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor\n                },\n                'canvas-datagrid-context-menu-item': {\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-context-menu-label': {\n                    margin: self.style.contextMenuLabelMargin,\n                    display: self.style.contextMenuLabelDisplay,\n                    minWidth: self.style.contextMenuLabelMinWidth,\n                    maxWidth: self.style.contextMenuLabelMaxWidth,\n                },\n                'canvas-datagrid-context-menu': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-invalid-search-regExp': {\n                    background: self.style.contextMenuFilterInvalidExpresion\n                }\n            };\n            if (css[className]) {\n                Object.keys(css[className]).map(function (prop) {\n                    el.style[prop] = css[className][prop];\n                });\n            }\n            return;\n        };\n        self.appendTo = function (n) {\n            self.parentNode = n;\n            self.height = self.parentNode.offsetHeight;\n            self.width = self.parentNode.offsetWidth;\n            if (self.parentNode && /canvas-datagrid-(cell|tree)/.test(self.parentNode.nodeType)) {\n                self.isChildGrid = true;\n                self.parentGrid = self.parentNode.parentGrid;\n                self.ctx = self.parentGrid.context;\n                self.canvas = self.parentGrid.canvas;\n                self.controlInput = self.parentGrid.controlInput;\n                self.eventParent = self.canvas;\n                self.intf.offsetParent = self.parentNode;\n            } else {\n                self.controlInput = document.createElement('input');\n                self.controlInput.onblur = self.blur;\n                self.createInlineStyle(self.controlInput, 'canvas-datagrid-control-input');\n                self.isChildGrid = false;\n                self.parentDOMNode = self.parentNode;\n                self.parentNode = self.parentDOMNode;\n                self.canvas = document.createElement('canvas');\n                self.ctx = self.canvas.getContext('2d');\n                self.ctx.textBaseline = 'alphabetic';\n                self.parentDOMNode.appendChild(self.canvas);\n                self.parentDOMNode.appendChild(self.controlInput);\n                self.eventParent = self.canvas;\n            }\n            self.controlInput.addEventListener('blur', function (e) {\n                if (e.target !== self.canvas) {\n                    self.hasFocus = false;\n                }\n            });\n            window.addEventListener('resize', self.resize);\n            if (MutationObserver) {\n                self.observer = new MutationObserver(function (mutations) {\n                    mutations.forEach(function (mutation) {\n                        self.resize(true);\n                    });\n                });\n                [self.canvas.parentNode].forEach(function (el) {\n                    self.observer.observe(el, { attributes: true });\n                });\n            }\n            self.eventParent.addEventListener('scroll', self.resize, false);\n            self.eventParent.addEventListener('touchstart', self.touchstart, false);\n            self.eventParent.addEventListener('mouseup', self.mouseup, false);\n            self.eventParent.addEventListener('mousedown', self.mousedown, false);\n            self.eventParent.addEventListener('dblclick', self.dblclick, false);\n            self.eventParent.addEventListener('click', self.click, false);\n            self.eventParent.addEventListener('mousemove', self.mousemove);\n            self.eventParent.addEventListener('wheel', self.scrollWheel, false);\n            self.canvas.addEventListener('contextmenu', self.contextmenuEvent, false);\n            (self.isChildGrid ? self.parentGrid : document).addEventListener('copy', self.copy);\n            self.controlInput.addEventListener('keypress', self.keypress, false);\n            self.controlInput.addEventListener('keyup', self.keyup, false);\n            self.controlInput.addEventListener('keydown', self.keydown, false);\n        };\n        self.setDom = function () {\n            self.appendTo(self.args.parentNode);\n        };\n        self.initScrollBox = function () {\n            var sHeight = 0,\n                sWidth = 0,\n                scrollTop = 0,\n                scrollLeft = 0,\n                scrollHeight = 0,\n                scrollWidth = 0,\n                scrollBoxHeight = 20,\n                scrollBoxWidth = 20;\n            function setScrollTop(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollTop value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollHeight) {\n                    value = scrollHeight;\n                }\n                if (scrollHeight < 0) {\n                    value = 0;\n                }\n                scrollTop = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            function setScrollLeft(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollLeft value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollWidth) {\n                    value = scrollWidth;\n                }\n                if (scrollWidth < 0) {\n                    value = 0;\n                }\n                scrollLeft = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            self.scrollBox.scrollTo = function (x, y) {\n\n                setScrollLeft(x, true);\n                setScrollTop(y);\n            };\n            Object.defineProperty(self.scrollBox, 'scrollBoxHeight', {\n                get: function () {\n                    return scrollBoxHeight;\n                },\n                set: function (value) {\n                    scrollBoxHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollBoxWidth', {\n                get: function () {\n                    return scrollBoxWidth;\n                },\n                set: function (value) {\n                    scrollBoxWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'height', {\n                get: function () {\n                    return sHeight;\n                },\n                set: function (value) {\n                    if (scrollHeight < value) {\n                        scrollTop = 0;\n                    }\n                    sHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'width', {\n                get: function () {\n                    return sWidth;\n                },\n                set: function (value) {\n                    sWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollTop', {\n                get: function () {\n                    return scrollTop;\n                },\n                set: setScrollTop\n            });\n            Object.defineProperty(self.scrollBox, 'scrollLeft', {\n                get: function () {\n                    return scrollLeft;\n                },\n                set: setScrollLeft\n            });\n            Object.defineProperty(self.scrollBox, 'scrollHeight', {\n                get: function () {\n                    return scrollHeight;\n                },\n                set: function (value) {\n                    if (scrollTop > value) {\n                        scrollTop = Math.max(value, 0);\n                    }\n                    if (scrollHeight < sHeight) {\n                        scrollTop = 0;\n                    }\n                    scrollHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollWidth', {\n                get: function () {\n                    return scrollWidth;\n                },\n                set: function (value) {\n                    if (scrollLeft > value) {\n                        scrollLeft = Math.max(value, 0);\n                    }\n                    scrollWidth = value;\n                }\n            });\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/dom.js\n// module id = 6\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        // all methods here are exposed by intf\n        // to users\n        /**\n         * Inserts a new column before the specified index into the schema.\n         * @see canvasDataGrid#schema\n         * @tutorial schema\n         * @memberof canvasDataGrid\n         * @name insertColumn\n         * @method\n         * @param {column} rowIndex The column to insert into the schema.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertColumn = function (c, index) {\n            var s = self.getSchema();\n            if (s.length < index) {\n                throw new Error('Index is beyond the length of the schema.');\n            }\n            self.validateColumn(c, s);\n            self.intf.schema = s.splice(index, 0, c);\n        };\n        /**\n         * Deletes a column from the schema at the specified index.\n         * @memberof canvasDataGrid\n         * @name deleteColumn\n         * @tutorial schema\n         * @method\n         * @param {number} index The index of the column to delete.\n         */\n        self.deleteColumn = function (index) {\n            var s = self.getSchema();\n            self.intf.schema = s.splice(index, 1);\n        };\n        /**\n         * Adds a new column into the schema.\n         * @see canvasDataGrid#schema\n         * @tutorial schema\n         * @memberof canvasDataGrid\n         * @name addColumn\n         * @method\n         * @param {column} c The column to add to the schema.\n         */\n        self.addColumn = function (c) {\n            var s = self.getSchema();\n            self.validateColumn(c, s);\n            s.push(c);\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a row from the dataset at the specified index.\n         * @memberof canvasDataGrid\n         * @name deleteRow\n         * @method\n         * @param {number} index The index of the row to delete.\n         */\n        self.deleteRow = function (index) {\n            self.originalData.splice(index, 1);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Inserts a new row into the dataset before the specified index.\n         * @memberof canvasDataGrid\n         * @name insertRow\n         * @method\n         * @param {object} d data.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertRow = function (d, index) {\n            if (self.originalData.length < index) {\n                throw new Error('Index is beyond the length of the dataset.');\n            }\n            self.originalData.splice(index, 0, d);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Adds a new row into the dataset.\n         * @memberof canvasDataGrid\n         * @name addRow\n         * @method\n         * @param {object} d data.\n         */\n        self.addRow = function (d) {\n            self.originalData.push(d);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Sets the height of a given row by index number.\n         * @memberof canvasDataGrid\n         * @name setRowHeight\n         * @method\n         * @param {number} rowIndex The index of the row to set.\n         * @param {number} height Height to set the row to.\n         */\n        self.setRowHeight = function (rowIndex, height) {\n            self.sizes.rows[self.data[rowIndex][self.uniqueId]] = height;\n            self.draw(true);\n        };\n        /**\n         * Sets the width of a given column by index number.\n         * @memberof canvasDataGrid\n         * @name setColumnWidth\n         * @method\n         * @param {number} colIndex The index of the column to set.\n         * @param {number} width Width to set the column to.\n         */\n        self.setColumnWidth = function (colIndex, width) {\n            var s = self.getSchema();\n            self.sizes.columns[s[colIndex][self.uniqueId]] = width;\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the width of the columns due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDataGrid\n         * @name resetColumnWidths\n         * @tutorial schema\n         * @method\n         */\n        self.resetColumnWidths = function () {\n            self.sizes.columns = {};\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the height of the rows due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDataGrid\n         * @name resetRowHeights\n         * @tutorial schema\n         * @method\n         */\n        self.resetRowHeights = function () {\n            self.sizes.rows = {};\n            self.draw(true);\n        };\n        /**\n         * Sets the value of the filter.\n         * @memberof canvasDataGrid\n         * @name setFilter\n         * @method\n         * @param {string} column Name of the column to filter.\n         * @param {string} value The value to filter for.\n         */\n        self.setFilter = function (column, value) {\n            function applyFilter() {\n                self.refreshFromOrigialData();\n                Object.keys(self.columnFilters).forEach(function (filter) {\n                    var header = self.getHeaderByName(column);\n                    if (!header) {\n                        return;\n                    }\n                    self.currentFilter = header.filter || self.filter(column.type || 'string');\n                    self.data = self.data.filter(function (row) {\n                        return self.currentFilter(row[filter], self.columnFilters[filter]);\n                    });\n                });\n                self.resize();\n                self.draw(true);\n            }\n            if (self.coulumn === undefined && value === undefined) {\n                return applyFilter();\n            }\n            if (column && (value === '' || value === undefined)) {\n                delete self.columnFilters[column];\n            } else {\n                self.columnFilters[column] = value;\n            }\n            applyFilter();\n        };\n        /**\n         * Returns the number of pixels to scroll down to line up with row rowIndex.\n         * @memberof canvasDataGrid\n         * @name findRowScrollTop\n         * @method\n         * @param {number} rowIndex The row index of the row to scroll find.\n         */\n        self.findRowScrollTop = function (rowIndex) {\n            var top = 0, x = 0, l = self.data.length,\n                cellBorder = self.style.cellBorderWidth * 2;\n            if (!self.attributes.showNewRow) {\n                l -= 1;\n            }\n            if (rowIndex > l) {\n                throw new Error('Impossible row index');\n            }\n            while (x < rowIndex) {\n                top += (self.sizes.rows[self.data[x][self.uniqueId]] || self.style.cellHeight) + cellBorder;\n                x += 1;\n            }\n            //TODO: This is not super accurate, causes pageUp/Dn to not move around right\n            return top - (self.sizes.rows[self.data[rowIndex][self.uniqueId]] || self.style.cellHeight);\n        };\n        /**\n         * Returns the number of pixels to scroll to the left to line up with column columnIndex.\n         * @memberof canvasDataGrid\n         * @name findColumnScrollLeft\n         * @method\n         * @param {number} columnIndex The column index of the column to find.\n         */\n        self.findColumnScrollLeft = function (columnIndex) {\n            var left = 0, y = 0, s = self.getSchema(), l = s.length - 1;\n            if (columnIndex > l) {\n                throw new Error('Impossible column index');\n            }\n            while (y < columnIndex) {\n                left += self.sizes.columns[s[y][self.uniqueId]] || s[y].width;\n                y += 1;\n            }\n            return left;\n        };\n        /**\n         * Scrolls the cell at cell x, row y.\n         * @memberof canvasDataGrid\n         * @name gotoCell\n         * @method\n         * @param {number} x The column index of the cell to scroll to.\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoCell = function (x, y) {\n            if (x !== undefined) {\n                self.scrollBox.scrollLeft = self.findColumnScrollLeft(x);\n            }\n            if (y !== undefined) {\n                self.scrollBox.scrollTop = self.findRowScrollTop(y);\n            }\n        };\n        /**\n         * Scrolls the row y.\n         * @memberof canvasDataGrid\n         * @name gotoRow\n         * @method\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoRow = function (y) {\n            self.gotoCell(0, y);\n        };\n        /**\n         * Scrolls the cell at cell x, row y into view if it is not already.\n         * @memberof canvasDataGrid\n         * @name scrollIntoView\n         * @method\n         * @param {number} x The column index of the cell to scroll into view.\n         * @param {number} y The row index of the cell to scroll into view.\n         */\n        self.scrollIntoView = function (x, y) {\n            if (self.visibleCells.filter(function (cell) {\n                    return (cell.rowIndex === y || y === undefined)\n                        && (cell.columnIndex === x || x === undefined)\n                        && cell.x > 0\n                        && cell.y > 0\n                        && cell.x + cell.width < self.width\n                        && cell.y + cell.height < self.height;\n                }).length === 0) {\n                self.gotoCell(x, y);\n            }\n        };\n        /**\n         * Sets the active cell. Requires redrawing.\n         * @memberof canvasDataGrid\n         * @name setActiveCell\n         * @method\n         * @param {number} x The column index of the cell to set active.\n         * @param {number} y The row index of the cell to set active.\n         */\n        self.setActiveCell = function (x, y) {\n            self.activeCell = {\n                rowIndex: y,\n                columnIndex: x\n            };\n        };\n        /**\n         * Selects a row.\n         * @memberof canvasDataGrid\n         * @name selectRow\n         * @method\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the row.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectRow = function (rowIndex, ctrl, supressEvent) {\n            var s = self.getSchema();\n            if (self.dragAddToSelection === false) {\n                if (self.selections[rowIndex] && self.selections[rowIndex].length - 1 === s.length) {\n                    if (ctrl) {\n                        self.selections[rowIndex] = [];\n                        return;\n                    }\n                }\n            }\n            if (self.dragAddToSelection === true) {\n                self.selections[rowIndex] = [];\n                self.selections[rowIndex].push(-1);\n                s.forEach(function (col) {\n                    self.selections[rowIndex].push(col.index);\n                });\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Collapse a tree grid by row index.\n         * @memberof canvasDataGrid\n         * @name collapseTree\n         * @method\n         * @param {number} index The index of the row to collapse.\n         */\n        self.collapseTree = function (rowIndex) {\n            var rowId = self.data[rowIndex][self.uniqueId];\n            self.dispatchEvent('collapsetree', {\n                childGrid: self.childGrids[rowId],\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId].blur();\n            self.openChildren[rowId].dispose();\n            delete self.openChildren[rowId];\n            delete self.sizes.trees[rowId];\n            delete self.childGrids[rowId];\n            self.dispatchEvent('resizerow', {\n                cellHeight: self.style.cellHeight\n            });\n            self.resize(true);\n            self.draw(true);\n        };\n        /**\n         * Expands a tree grid by row index.\n         * @memberof canvasDataGrid\n         * @name expandTree\n         * @method\n         * @param {number} index The index of the row to expand.\n         */\n        self.expandTree = function (rowIndex) {\n            var headerCellHeight = self.getHeaderCellHeight(),\n                headerCellWidth = self.sizes.columns.cornerCell || self.style.headerRowWidth,\n                rowId = self.data[rowIndex][self.uniqueId],\n                h = self.sizes.trees[rowId] || self.style.treeGridHeight,\n                treeGrid;\n            if (!self.childGrids[rowId]) {\n                treeGrid = self.createGrid({\n                    debug: self.attributes.debug,\n                    name: self.attributes.saveAppearance\n                        ? self.attributes.name + 'tree' + rowId : undefined,\n                    parentNode: {\n                        parentGrid: self.intf,\n                        nodeType: 'canvas-datagrid-tree',\n                        offsetHeight: h,\n                        offsetWidth: self.width - headerCellWidth,\n                        header: { width: self.width - headerCellWidth },\n                        offsetLeft: headerCellWidth,\n                        offsetTop: headerCellHeight,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: 'tree',\n                        data: self.data[rowIndex]\n                    }\n                });\n                self.childGrids[rowId] = treeGrid;\n            }\n            treeGrid = self.childGrids[rowId];\n            treeGrid.visible = true;\n            self.dispatchEvent('expandtree', {\n                treeGrid: treeGrid,\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId] = treeGrid;\n            self.sizes.trees[rowId] = h;\n            self.dispatchEvent('resizerow', {height: self.style.cellHeight});\n            self.resize(true);\n        };\n        /**\n         * Toggles tree grid open and close by row index.\n         * @memberof canvasDataGrid\n         * @name toggleTree\n         * @method\n         * @param {number} index The index of the row to toggle.\n         */\n        self.toggleTree = function (rowIndex) {\n            var i = self.openChildren[self.data[rowIndex][self.uniqueId]];\n            if (i) {\n                return self.collapseTree(rowIndex);\n            }\n            self.expandTree(rowIndex);\n        };\n        /**\n         * Returns a header from the schema by name.\n         * @memberof canvasDataGrid\n         * @name getHeaderByName\n         * @tutorial schema\n         * @method\n         * @returns {header} header with the selected name, or undefined.\n         * @param {string} name The name of the column to resize.\n         */\n        self.getHeaderByName = function (name) {\n            var x, i = self.getSchema();\n            for (x = 0; x < i.length; x += 1) {\n                if (i[x].name === name) {\n                    return i[x];\n                }\n            }\n        };\n        /**\n         * Resizes a column to fit the longest value in the column. Call without a value to resize all columns.\n         * Warning, can be slow on very large record sets (1m records ~3-5 seconds on an i7).\n         * @memberof canvasDataGrid\n         * @name fitColumnToValues\n         * @method\n         * @param {string} name The name of the column to resize.\n         */\n        self.fitColumnToValues = function (name) {\n            self.sizes.columns[name === 'cornerCell' ? name : self.getHeaderByName(name)[self.uniqueId]]\n                = self.findColumnMaxTextLength(name);\n            self.resize();\n            self.draw(true);\n        };\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDataGrid\n         * @name isCellVisible\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {cell} cell The cell to check for.  Alternatively you can pass an object { x: <x-index>, y: <y-index> }.\n         */\n        self.isCellVisible = function (cell) {\n            var x, l = self.visibleCells.length;\n            for (x = 0; x < l; x += 1) {\n                if (cell.x === self.visibleCells[x].x && cell.y === self.visibleCells[x].y) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n         * Sets the order of the data.\n         * @memberof canvasDataGrid\n         * @name order\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} columnName Number of pixels from the left.\n         * @param {string} direction `asc` for ascending or `desc` for descending.\n         * @param {bool} dontSetStorageData Don't store this setting for future use.\n         */\n        self.order = function (columnName, direction, dontSetStorageData) {\n            var f,\n                c = self.getSchema().filter(function (col) {\n                    return col.name === columnName;\n                });\n            self.orderBy = columnName;\n            if (c.length === 0) {\n                throw new Error('Cannot sort.  No such column name');\n            }\n            f = self.sorters[c[0].type];\n            if (!f && c[0].type !== undefined) {\n                console.warn('Cannot sort type \"%s\" falling back to string sort.', c[0].type);\n            }\n            self.data = self.data.sort(typeof f === 'function' ? f(columnName, direction) : self.sorters.string);\n            self.dispatchEvent('ordercolumn', {name: columnName, direction: direction});\n            self.draw(true);\n            if (dontSetStorageData) { return; }\n            self.setStorageData();\n        };\n        self.isInGrid = function (e) {\n            if (e.x < 0\n                    || e.x > self.width\n                    || e.y < 0\n                    || e.y > self.height) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Gets the cell at columnIndex and rowIndex.\n         * @memberof canvasDataGrid\n         * @name getVisibleCellByIndex\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Column index.\n         * @param {number} y Row index.\n         */\n        self.getVisibleCellByIndex = function (x, y) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === x && c.rowIndex === y;\n            })[0];\n        };\n        /**\n         * Gets the cell at grid pixel coordinate x and y.\n         * @memberof canvasDataGrid\n         * @name getCellAt\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Number of pixels from the left.\n         * @param {number} y Number of pixels from the top.\n         */\n        self.getCellAt = function (x, y, useTouchScrollZones) {\n            var tsz = useTouchScrollZones ? self.attributes.touchScrollZone : 0, i, l = self.visibleCells.length, cell;\n            if (!self.visibleCells || !self.visibleCells.length) { return; }\n            self.hasFocus = true;\n            if (!(y < self.height\n                && y > 0\n                && x < self.width\n                && x > 0)) {\n                self.hasFocus = false;\n                return {\n                    dragContext: 'inherit',\n                    context: 'inherit'\n                };\n            }\n            for (i = 0; i < l; i += 1) {\n                cell = self.visibleCells[i];\n                if (useTouchScrollZones && /(vertical|horizontal)-scroll-/.test(cell.style)) {\n                    cell.x -= tsz;\n                    cell.y -= tsz;\n                    cell.height += tsz;\n                    cell.width += tsz;\n                }\n                if (cell.x - self.style.cellBorderWidth < x\n                        && cell.x + cell.width + self.style.cellBorderWidth > x\n                        && cell.y - self.style.cellBorderWidth < y\n                        && cell.y + cell.height + self.style.cellBorderWidth > y) {\n                    if (/vertical-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'vertical-scroll-box';\n                        cell.context = 'vertical-scroll-box';\n                        if (y > self.scrollBox.box.v.y + self.scrollBox.scrollBoxHeight) {\n                            cell.dragContext = 'vertical-scroll-bottom';\n                            cell.context = 'vertical-scroll-bottom';\n                        } else if (y < self.scrollBox.box.v.y) {\n                            cell.dragContext = 'vertical-scroll-top';\n                            cell.context = 'vertical-scroll-top';\n                        }\n                        self.canvas.style.cursor = 'default';\n                        return cell;\n                    }\n                    if (/horizontal-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'horizontal-scroll-box';\n                        cell.context = 'horizontal-scroll-box';\n                        if (x > self.scrollBox.box.h.x + self.scrollBox.scrollBoxWidth) {\n                            cell.dragContext = 'horizontal-scroll-right';\n                            cell.context = 'horizontal-scroll-right';\n                        } else if (x < self.scrollBox.box.h.x) {\n                            cell.dragContext = 'horizontal-scroll-left';\n                            cell.context = 'horizontal-scroll-left';\n                        }\n                        self.canvas.style.cursor = 'default';\n                        return cell;\n                    }\n                    if (cell.x + cell.width - (self.attributes.borderResizeZone * 0.4) < x\n                            && cell.x + cell.width + (self.attributes.borderResizeZone * 0.6) > x\n                            && self.attributes.allowColumnResize\n                            && ((self.attributes.allowColumnResizeFromCell && cell.style === 'cell')\n                                || cell.style !== 'cell')\n                            && ((self.attributes.allowRowHeaderResize\n                                && ['rowHeaderCell', 'cornerCell'].indexOf(cell.style) !== -1)\n                                || ['rowHeaderCell', 'cornerCell'].indexOf(cell.style) === -1)) {\n                        cell.context = 'ew-resize';\n                        cell.dragContext = 'ew-resize';\n                        return cell;\n                    }\n                    if (cell.y + cell.height - (self.attributes.borderResizeZone * 0.4) < y\n                            && cell.y + cell.height + (self.attributes.borderResizeZone * 0.6) > y\n                            && self.attributes.allowRowResize\n                            && ((self.attributes.allowRowResizeFromCell && cell.style === 'cell')\n                                || cell.style !== 'cell')\n                            && cell.style !== 'headerCell') {\n                        cell.context = 'ns-resize';\n                        cell.dragContext = 'ns-resize';\n                        return cell;\n                    }\n                    if (cell.style === 'headerCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'column-reorder';\n                        return cell;\n                    }\n                    if (cell.style === 'rowHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'row-reorder';\n                        return cell;\n                    }\n                    if (cell.isGrid) {\n                        self.hasFocus = false;\n                        cell.dragContext = 'cell-grid';\n                        cell.context = 'cell-grid';\n                        return cell;\n                    }\n                    if (cell.style === 'tree-grid') {\n                        self.hasFocus = false;\n                        cell.dragContext = 'tree';\n                        cell.context = 'tree';\n                        return cell;\n                    }\n                    cell.dragContext = 'cell';\n                    cell.context = 'cell';\n                    return cell;\n                }\n            }\n            self.hasFocus = false;\n            return {\n                context: 'inherit'\n            };\n        };\n        /**\n         * Gets the bounds of current selection. \n         * @returns {rect} selection.\n         * @memberof canvasDataGrid\n         * @name getSelectionBounds\n         * @method\n         */\n        self.getSelectionBounds = function () {\n            var low = {x: Infinity, y: Infinity},\n                high = {x: -Infinity, y: -Infinity};\n            self.data.forEach(function (row, rowIndex) {\n                var maxCol, minCol;\n                if (self.selections[rowIndex] && self.selections[rowIndex].length) {\n                    low.y = rowIndex < low.y ? rowIndex : low.y;\n                    high.y = rowIndex > high.y ? rowIndex : high.y;\n                    maxCol = Math.max.apply(null, self.selections[rowIndex]);\n                    minCol = Math.min.apply(null, self.selections[rowIndex]);\n                    low.x = minCol < low.x ? minCol : low.x;\n                    high.x = maxCol > high.x ? maxCol : high.x;\n                }\n            });\n            return {\n                top: low.y,\n                left: low.x,\n                bottom: high.y,\n                right: high.x\n            };\n        };\n        /**\n         * Returns an auto generated schema based on data structure.\n         * @memberof canvasDataGrid\n         * @name getSchemaFromData\n         * @method\n         * @tutorial schema\n         * @returns {schema} schema A schema based on the first item in the data array.\n         */\n        self.getSchemaFromData = function () {\n            return Object.keys(self.data[0] || {' ': ''}).map(function mapEachSchemaColumn(key, index) {\n                var type = self.getBestGuessDataType(key),\n                    i = {\n                        name: key,\n                        title: key,\n                        width: self.style.columnWidth,\n                        index: index,\n                        type: type,\n                        filter: self.filter(type)\n                    };\n                if (key === self.uniqueId) {\n                    i.hidden = true;\n                }\n                i[self.uniqueId] = self.getSchemaNameHash(key);\n                return i;\n            });\n        };\n        /**\n         * Clears the change log grid.changes that keeps track of changes to the data set.\n         * This does not undo changes or alter data it is simply a convince array to keep\n         * track of changes made to the data since last this method was called.\n         * @memberof canvasDataGrid\n         * @name clearChangeLog\n         * @method\n         */\n        self.clearChangeLog = function () {\n            self.changes = [];\n        };\n        /**\n         * Selects an area of the grid.\n         * @memberof canvasDataGrid\n         * @name selectArea\n         * @method\n         * @param {rect} bounds A rect object representing the selected values.\n         */\n        self.selectArea = function (bounds, ctrl) {\n            self.selectionBounds = bounds || self.selectionBounds;\n            var x, y, s = self.getSchema();\n            if (!ctrl) {\n                self.selections = [];\n            }\n            if (self.selectionBounds.top < -1\n                    || self.selectionBounds.bottom > self.data.length\n                    || self.selectionBounds.left < -1\n                    || self.selectionBounds.right > s.length) {\n                throw new Error('Impossible selection area');\n            }\n            for (x = self.selectionBounds.top; x <= self.selectionBounds.bottom; x += 1) {\n                self.selections[x] = [];\n                for (y = self.selectionBounds.left; y <= self.selectionBounds.right; y += 1) {\n                    if (self.selections[x].indexOf(y) === -1) {\n                        self.selections[x].push(y);\n                    }\n                }\n            }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Returns the maximum text width for a given column by column name.\n         * @memberof canvasDataGrid\n         * @name findColumnMaxTextLength\n         * @method\n         * @returns {number} The number of pixels wide the maximum width value in the selected column.\n         * @param {string} name The name of the column to calculate the value's width of.\n         */\n        self.findColumnMaxTextLength = function (name) {\n            var m = -Infinity;\n            if (name === 'cornerCell') {\n                self.ctx.font = self.style.rowHeaderCellFont;\n                return self.ctx.measureText((self.data.length + (self.attributes.showNewRow ? 1 : 0)).toString()).width\n                    + self.style.autosizePadding + self.style.autosizeHeaderCellPadding\n                    + self.style.rowHeaderCellPaddingRight\n                    + self.style.rowHeaderCellPaddingLeft\n                    + (self.attributes.tree ? self.style.treeArrowWidth\n                        + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight : 0);\n            }\n            self.getSchema().forEach(function (col) {\n                if (col.name !== name) { return; }\n                self.ctx.font = self.style.headerCellFont;\n                var t = self.ctx.measureText(col.title || col.name).width\n                    + self.style.headerCellPaddingRight\n                    + self.style.headerCellPaddingLeft;\n                m = t > m ? t : m;\n            });\n            self.data.forEach(function (row) {\n                self.ctx.font = self.style.cellFont;\n                var t = self.ctx.measureText(row[name]).width\n                    + self.style.cellPaddingRight\n                    + self.style.cellPaddingLeft + self.style.cellAutoResizePadding;\n                m = t > m ? t : m;\n            });\n            return m;\n        };\n        /**\n         * Gets the total width of all header columns.\n         * @memberof canvasDataGrid\n         * @name getHeaderWidth\n         * @method\n         */\n        self.getHeaderWidth = function () {\n            return self.getVisibleSchema().reduce(function (total, header) {\n                return total + header.width;\n            }, 0);\n        };\n        self.formatters.string = function cellFormatterString(ctx, cell) {\n            return cell.value !== undefined ? cell.value : '';\n        };\n        self.formatters.rowHeaderCell = self.formatters.string;\n        self.formatters.headerCell = self.formatters.string;\n        self.formatters.number = self.formatters.string;\n        self.formatters.int = self.formatters.string;\n        self.formatters.html = self.formatters.string;\n        self.sorters.string = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (a[columnName] === undefined || a[columnName] === null) {\n                    return 1;\n                }\n                if (b[columnName] === undefined || b[columnName] === null) {\n                    return 0;\n                }\n                if (asc) {\n                    if (!a[columnName].localeCompare) { return 1; }\n                    return a[columnName].localeCompare(b[columnName]);\n                }\n                if (!b[columnName].localeCompare) { return 1; }\n                return b[columnName].localeCompare(a[columnName]);\n            };\n        };\n        self.sorters.number = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return a[columnName] - b[columnName];\n                }\n                return b[columnName] - a[columnName];\n            };\n        };\n        self.sorters.date = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return new Date(a[columnName]).getTime()\n                        - new Date(b[columnName]).getTime();\n                }\n                return new Date(b[columnName]).getTime()\n                        - new Date(a[columnName]).getTime();\n            };\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/publicMethods.js\n// module id = 7\n// module chunks = 0"],"sourceRoot":""}