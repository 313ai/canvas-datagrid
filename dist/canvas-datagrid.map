{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///canvas-datagrid.js","webpack:///webpack/bootstrap f34ed397d8a484f4af33","webpack:///./lib/main.js","webpack:///./lib/defaults.js","webpack:///./lib/draw.js","webpack:///./lib/events.js","webpack:///./lib/intf.js","webpack:///./lib/contextMenu.js","webpack:///./lib/dom.js","webpack:///./lib/publicMethods.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","undefined","context","defaults","hyphenateProperty","prop","cust","Array","forEach","char","toUpperCase","toLowerCase","getDefaultItem","base","item","filter","Grid","args","self","isComponent","component","intf","eval","createGrid","init","getObservableAttributes","attrs","attributes","attr","push","slice","arguments","typeMap","data","strData","JSON","parse","e","Error","style","fullStyleString","split","sd","indexOf","key","substring","val","idef","console","warn","schema","strSchema","number","strNum","parseInt","boolean","strBool","test","string","str","observedAttributes","create","HTMLElement","disconnectedCallback","dispose","attributeChangedCallback","attrName","oldVal","newVal","j","stringify","keys","connectedCallback","initialized","parentNode","createShadowRoot","shadowRootParentElement","parentElement","set","value","draw","window","canvasDatagrid","require","customElements","apply","styles","drawOnAllImagesLoaded","loaded","htmlImageCache","html","complete","drawHtml","cell","img","v","innerHTML","formattedValue","x","canvasOffsetLeft","y","canvasOffsetTop","height","width","ctx","drawImage","Image","onload","src","btoa","drawOrderByArrow","fillStyle","columnHeaderOrderByArrowColor","strokeStyle","columnHeaderOrderByArrowBorderColor","beginPath","columnHeaderOrderByArrowMarginLeft","columnHeaderOrderByArrowMarginTop","orderDirection","moveTo","lineTo","columnHeaderOrderByArrowWidth","columnHeaderOrderByArrowHeight","stroke","fill","columnHeaderOrderByArrowMarginRight","drawTreeArrow","treeArrowColor","treeArrowBorderColor","treeArrowMarginLeft","treeArrowMarginTop","openChildren","uniqueId","treeArrowWidth","treeArrowHeight","treeArrowMarginRight","radiusRect","w","h","radius","r","b","quadraticCurveTo","fillRect","strokeRect","fillText","text","addBorderLine","pos","t","addEllipsis","ellipsisCache","measureText","drawText","paddingLeft","paddingTop","paddingRight","paddingBottom","vPos","hPos","orderByArrowWidth","fontHeight","horizontalAlignment","verticalAlignment","perfCounters","drawCount","perfWindowSize","internal","drawCell","rowIndex","rowOrderIndex","header","headerIndex","columnOrderIndex","cellGridAttributes","cellStyle","isHeader","isCorner","isRowHeader","isColumnHeader","selected","selections","hovered","hovers","active","activeCell","columnIndex","isGrid","activeHeader","orders","rows","columns","f","formatters","type","orderByArrowSize","treeArrowSize","cellWidth","sizes","ev","row","columnWidth","cellBorderWidth","visibleRows","dispatchEvent","cx","cy","nodeType","offsetTop","offsetLeft","scrollTop","scrollBox","scrollLeft","cellHeight","offsetWidth","offsetHeight","offsetParent","isHeaderCellCap","rowOpen","sortColumnIndex","sortRowIndex","gridId","parentGrid","title","userHeight","rowHeight","userWidth","cornerCell","visibleCells","unshift","lineWidth","cellHeightWithChildGrid","checkScrollHeight","cellWidthWithChildGrid","rd","save","clip","tree","showRowNumbers","childGrids","saveAppearance","cellGridHeight","grid","visible","orderBy","font","toString","columnFilters","filterTextPrefix","aCell","selectionBorders","length","restore","drawRowHeader","rowData","index","a","showRowHeaders","rowHeaderCell","rowHeaderCellWidth","drawRow","treeHeight","rowSansTreeHeight","g","trees","columnHeaderCellWidth","scrollIndexLeft","scrollPixelLeft","treeGrid","scrollBarWidth","rowHeaders","isChildGrid","requestAnimationFrame","u","currentCell","rowHeaderCellHeight","getRowHeaderCellHeight","getColumnHeaderCellWidth","performance","now","createRowOrders","getVisibleSchema","scale","devicePixelRatio","backgroundColor","scrollPixelTop","scrollIndexTop","showNewRow","newRow","selectionOverlayBorderWidth","selectionOverlayBorderColor","selectionMode","activeCellOverlayBorderWidth","activeCellOverlayBorderColor","getHeaderWidth","columnHeaderCell","rArgs","showColumnHeaders","order","isHeaderCell","endCap","reorderObject","dragOffset","heigth","reorderMarkerBackgroundColor","reorderMarkerBorderWidth","reorderMarkerBorderColor","dragMode","reorderMarkerIndexBorderWidth","reorderMarkerIndexBorderColor","vb","nb","co","isScrollBoxCorner","scrollBarBoxMargin","scrollBarBorderColor","scrollBarBorderWidth","scrollBarBackgroundColor","scrollBoxHeight","scrollHeight","scrollBarBoxWidth","scrollBarBoxColor","scrollBarActiveColor","scrollBarBoxBorderRadius","scrollBoxWidth","scrollWidth","scrollBarCornerBorderColor","scrollBarCornerBackgroundColor","bar","box","resize","gridBorderWidth","gridBorderColor","debug","perf","reduce","toFixed","map","join","htmlImages","scrollIndex","scrollPixel","canvasOffset","pointerLockPosition","size","mouse","touch","touchStart","entities","hasFocus","dragContext","touchDelta","touchAnimateTo","touchSigma","xPPS","yPPS","touchingCell","startingCell","animationFrames","getTouchPos","rect","canvas","getBoundingClientRect","touches","clientX","left","clientY","top","calculatePPS","touchCell","clearInterval","touchCalcTimeout","Math","abs","touchDeadZone","getCellAt","mousemove","mousedown","touchstart","NativeEvent","stopPropagation","preventDefault","touchScrollStart","touchmove","clearTimeout","touchTimeout","setTimeout","touchSelectTimeMs","setInterval","touchHaltAnimation","document","body","addEventListener","passive","touchend","touchcancel","easing","touchEndAnimation","scrollTo","touchReleaseAnimationDurationMs","dz","mouseup","beginEditAt","click","removeEventListener","touchReleaseAcceleration","fn","events","sfn","idx","splice","defaultPrevented","drawAfterResize","cellBorder","columnHeaderCellBorder","columnHeaderCellBorderWidth","parentIsCanvas","parentDOMNode","accumulator","column","hidden","widthBoxRatio","heightBoxRatio","max","scrollBarBoxMinSize","page","pageUpDownOverlap","resizeEditInput","scroll","input","scrollOffset","bx2","getVisibleCellByIndex","editCell","cellPaddingLeft","clipElement","dontDraw","overridePos","contextMenu","getLayerPos","dragBounds","sBounds","delta","ctrl","controlKey","metaKey","persistantSelectionMode","getSchema","previousCell","scrollTimer","isInGrid","cellBoundaryCrossed","draggingItem","scrollModes","dragItem","cursor","selecting","getSelectionBounds","dragStart","dragStartObject","shiftKey","min","bottom","right","ignoreNextClick","selectRow","dragAddToSelection","selectionBounds","selectArea","autoScrollZone","checkSelectionChange","selectionChanged","selectedData","getSelectedData","endEdit","sorters","setFilter","columnHeaderClickBehavior","selectColumn","setActiveCell","treeArrowClickRadius","toggleTree","dragResizeColumn","resizingStartingWidth","resizingStartingHeight","minColumnWidth","minRowHeight","resizeScrollZone","resizeChildGrids","globalRowResize","stopDragResize","setStorageData","scrollGrid","scrollPointerLock","scrollStartMode","movementX","movementY","scrollMode","scrollStart","scrollRepeatRate","selectionScrollIncrement","stopScrollGrid","exitPointerLock","dragReorder","allowColumnReordering","allowRowReordering","source","target","reorderDeadZone","reorderTarget","stopDragReorder","cr","row-reorder","column-reorder","lastMouseDownTarget","button","requestPointerLock","controlInput","focus","keydown","last","cols","keyCode","selectAll","scrollIntoView","selectionFollowsActiveCell","keyup","keypress","dblclick","fitColumnToValues","autosize","scrollWheel","deltaX","deltaY","deltaMode","copy","clipboardData","sData","replace","setData","ctor","storageName","invalidSearchExpClass","localStyleLibraryStorageKey","filters","currentFilter","schemaHashes","uId","changes","expandToRow","col","position","ignoreScrollOffset","fillArray","low","high","step","columnHeaderCellHeight","localStorage","setItem","tempSchema","createColumnOrders","applyDefaultValue","defaultValue","createNewRowData","getSchemaNameHash","getBestGuessDataType","columnName","drawChildGrids","gridKey","getClippingRect","ele","boundingRect","eleRect","clipRect","parentRect","Infinity","setTimer","selectionScrollZone","refreshFromOrigialData","originalData","validateColumn","setDefaults","obj1","obj2","def","setAttributes","setStyle","colName","removeChild","eventParent","contextmenu","observer","disconnect","tryLoadStoredOrders","storedSettings","getHeaderByName","getFontHeight","fontStyle","parseFloat","parseFont","initProp","propName","publicStyleKeyIntf","initScrollBox","setDom","appendTo","clearChangeLog","gotoCell","gotoRow","findColumnScrollLeft","findRowScrollTop","findColumnMaxTextLength","disposeContextMenu","isCellVisible","getSchemaFromData","expandTree","collapseTree","insertRow","deleteRow","addRow","insertColumn","deleteColumn","addColumn","setRowHeight","setColumnWidth","resetColumnWidths","resetRowHeights","assertPxColor","clearPxColorAssertions","integerToAlpha","filterFor","filterRegExp","regEnd","pattern","exec","flags","flagLength","invalidFilterRegEx","RegExp","toLocaleUpperCase","getItem","blur","normalizeDataset","callback","syncFnInvoked","0","isArray","autoResizeColumns","setScrollTop","preventScrollEvent","isNaN","setScrollLeft","sHeight","sWidth","createContextMenu","items","parentContextMenu","createItems","removeChildContext","relatedTarget","container","childMenuArrow","contextItemContainer","children","setAttribute","contextAddCallback","getAttribute","cPos","childContextMenuMarginLeft","childContextMenuMarginTop","createChildContext","createElement","addContent","content","appendChild","createInlineStyle","childContextMenuArrowHTML","clickIndex","Event","checkArrowVisibility","upArrow","downArrow","startHoverScroll","contextHoverScrollAmount","hoverScrollTimeout","contextHoverScrollRateMs","endHoverScroll","selectedIndex","loc","zIndexTop","color","contextMenuArrowColor","el","textAlign","zIndex","inputDropdown","maxHeight","innerHeight","autocompleteBottomMargin","minWidth","contextMenuArrowUpHTML","contextMenuArrowDownHTML","contextMenuWindowMargin","innerWidth","isFinite","createFilterContextMenuItems","checkRegExpErrorState","filterInput","background","contextFilterInputBackground","contextFilterInputColor","contextFilterInvalidRegExpBackground","contextFilterInvalidRegExpColor","fillAutoComplete","autoCompleteItems","maxAutoCompleteItems","disposeAutocomplete","createAutoCompleteContext","iRect","autoCompleteContext","filterContainer","filterLabel","filterAutoCompleteButton","onclick","en","filterOptionText","contextFilterButtonHTML","cf","removeFilterOptionText","addDefaultContextMenuItem","isNormalCell","isBackground","isScrollBar","showFilter","showCopy","copyText","execCommand","showClearSettingsOption","clearSettingsOptionText","allowSorting","showOrderByOption","showOrderByOptionTextAsc","showOrderByOptionTextDesc","contextmenuEvent","createDiposeEvent","contextMenuMarginLeft","contextMenuMarginTop","abort","abortEdit","newValue","oldValue","aborted","editable","enumItems","enum","multiLine","option","valueInEnum","nx","ny","className","css","canvas-datagrid-context-menu-filter-input","verticalAlign","marginLeft","padding","border","contextFilterInputBorder","borderRadius","contextFilterInputBorderRadius","lineHeight","fontWeight","fontFamily","contextFilterInputFontFamily","fontSize","contextFilterInputFontSize","canvas-datagrid-context-menu-filter-button","contextMenuBackground","contextMenuColor","contextFilterButtonBorder","contextFilterButtonBorderRadius","contextMenuFilterButtonFontFamily","contextMenuFilterButtonFontSize","canvas-datagrid-context-child-arrow","cssFloat","childContextMenuArrowColor","contextMenuChildArrowFontSize","contextMenuFontFamily","canvas-datagrid-autocomplete","contextMenuFontSize","contextMenuBorder","contextMenuPadding","contextMenuBorderRadius","opacity","contextMenuOpacity","overflow","canvas-datagrid-autocomplete-item","canvas-datagrid-autocomplete-item:hover","contextMenuHoverBackground","contextMenuHoverColor","canvas-datagrid-canvas","canvas-datagrid","boxSizing","canvas-datagrid-control-input","canvas-datagrid-edit-input","outline","margin","editCellPaddingLeft","editCellFontFamily","editCellFontSize","boxShadow","editCellBoxShadow","editCellBorder","editCellColor","editCellBackgroundColor","appearance","webkitAppearance","mozAppearance","canvas-datagrid-context-menu-item","contextMenuItemMargin","contextMenuItemBorderRadius","canvas-datagrid-context-menu-item:hover","canvas-datagrid-context-menu-label","contextMenuLabelMargin","display","contextMenuLabelDisplay","contextMenuLabelMinWidth","maxWidth","contextMenuLabelMaxWidth","canvas-datagrid-context-menu","canvas-datagrid-invalid-search-regExp","contextMenuFilterInvalidExpresion","onblur","tagName","host","getContext","textBaseline","MutationObserver","mutations","mutation","observe","ordA","charCodeAt","ordZ","len","String","fromCharCode","floor","colIndex","applyFilter","isColumnSelected","colIsSelected","shift","supressEvent","addCol","ri","st","dragObject","rowId","childGrid","treeGridHeight","direction","sortFunction","dontSetStorageData","sort","useTouchScrollZones","tsz","touchScrollZone","isVerticalScrollBar","isHorizontalScrollBar","borderResizeZone","allowColumnResize","allowColumnResizeFromCell","allowRowHeaderResize","allowRowResize","allowRowResizeFromCell","maxCol","minCol"," ","bounds","rowHeaderCellFont","autosizePadding","autosizeHeaderCellPadding","rowHeaderCellPaddingRight","rowHeaderCellPaddingLeft","columnHeaderCellFont","headerCellPaddingRight","headerCellPaddingLeft","cellFont","cellPaddingRight","cellAutoResizePadding","total","headerCell","int","asc","localeCompare","date","Date","getTime"],"mappings":"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A,kBACA,4BACA,sBACA,kCACA,iBACA,gBACA,6BACA,0BACA,oBACA,kBACA,uBACA,wBACA,+BACA,wBACA,yBACA,yBACA,4BACA,yBACA,sBACA,8BACA,iCACA,aACA,wBACA,yBACA,sBACA,sBACA,wBACA,2BACA,wBACA,+BACA,+BACA,gCACA,sBACA,+BACA,yBACA,mDACA,qDACA,uDACA,iDACA,iCACA,mCACA,wCACA,gCACA,oBACA,0BACA,uBACA,oBACA,gBACA,qCACA,yBACA,6BAEA2D,SACA,uDACA,mDACA,8BACA,uCACA,qCACA,4DACA,4CACA,yDACA,oCACA,8BACA,4BACA,6BACA,2BACA,+DACA,+CACA,mEACA,mDACA,gEACA,gDACA,gCACA,gCACA,sBACA,6CACA,6BACA,iDACA,6CACA,uBACA,iCACA,+BACA,uBACA,kBACA,gCACA,mCACA,sDACA,sCACA,wBACA,sBACA,uBACA,qBACA,yDACA,yCACA,mCACA,+BACA,qDACA,yCACA,mCACA,gCACA,6DACA,yDACA,oCACA,gDACA,2CACA,8BACA,+CACA,kEACA,kDACA,oCACA,kCACA,mCACA,iCACA,+CACA,oBACA,iEACA,0CACA,uCACA,uDACA,gEACA,uCACA,4CACA,8CACA,sCACA,8DACA,6DACA,gDACA,wCACA,sCACA,mDACA,yDACA,kCACA,yCACA,2CACA,mDACA,2CACA,+DACA,uCACA,+BACA,wDACA,iDACA,sCACA,gCACA,2CACA,uCACA,qCACA,oCACA,4BACA,4BACA,8BACA,6BACA,8BACA,uDACA,mDACA,oCACA,sDACA,kDACA,0BACA,oCACA,4BACA,0BACA,6CACA,sBACA,iEACA,0CACA,2DACA,qCACA,yCACA,0CACA,wCACA,qCACA,sBACA,iBACA,oBACA,mBACA,sDACA,kDACA,kCACA,0DACA,uCACA,0DACA,sDACA,+BACA,6CACA,wCACA,2BACA,4CACA,+DACA,+CACA,iCACA,+BACA,gCACA,8BACA,kEACA,qDACA,4CACA,0BACA,kDACA,sDACA,kDACA,4BAC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","file":"canvas-datagrid.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"canvasDatagrid\"] = factory();\n\telse\n\t\troot[\"canvasDatagrid\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"canvasDatagrid\"] = factory();\n\telse\n\t\troot[\"canvasDatagrid\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, evil: true*/\n/*globals Reflect: false, HTMLElement: true, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n    __webpack_require__(1),\n    __webpack_require__(2),\n    __webpack_require__(3),\n    __webpack_require__(4),\n    __webpack_require__(5),\n    __webpack_require__(6),\n    __webpack_require__(7)\n], __WEBPACK_AMD_DEFINE_RESULT__ = function context(defaults) {\n    'use strict';\n    var modules = Array.prototype.slice.call(arguments),\n        typeMap;\n    function hyphenateProperty(prop, cust) {\n        var p = '';\n        Array.prototype.forEach.call(prop, function (char) {\n            if (char === char.toUpperCase()) {\n                p += '-' + char.toLowerCase();\n                return;\n            }\n            p += char;\n        });\n        return (cust ? '-cdg-' : '') + p;\n    }\n    function getDefaultItem(base, item) {\n        var i = {},\n            r;\n        defaults(i);\n        r = i.defaults[base].filter(function (i) {\n            return i[0].toLowerCase() === item.toLowerCase()\n                || hyphenateProperty(i[0]) === item.toLowerCase()\n                || hyphenateProperty(i[0], true) === item.toLowerCase();\n        })[0];\n        return r;\n    }\n    typeMap = {\n        data: function (strData) {\n            try {\n                return JSON.parse(strData);\n            } catch (e) {\n                throw new Error('Cannot read JSON data in canvas-data-grid data attribute.');\n            }\n        },\n        style: function (fullStyleString) {\n            var s = {};\n            fullStyleString.split(';').forEach(function (sd) {\n                if (!sd) { return; }\n                var i = sd.indexOf(':'),\n                    key = sd.substring(0, i),\n                    val = sd.substring(i + 1),\n                    idef = getDefaultItem('styles', key);\n                if (idef === undefined) {\n                    console.warn('Unrecognized style directive', key);\n                    return;\n                }\n                s[idef[0]] = typeMap[typeof idef[1]](val);\n            });\n            return s;\n        },\n        schema: function (strSchema) {\n            try {\n                return JSON.parse(strSchema);\n            } catch (e) {\n                throw new Error('Cannot read JSON data in canvas-data-grid data attribute.');\n            }\n        },\n        number: function (strNum) {\n            return parseInt(strNum, 10);\n        },\n        boolean: function (strBool) {\n            return (/true/i).test(strBool);\n        },\n        string: function (str) {\n            return str;\n        }\n    };\n    function Grid(args) {\n        args = args || {};\n        var self = {};\n        self.isComponent = args.component === undefined;\n        self.intf = self.isComponent ? eval('Reflect.construct(HTMLElement, [], new.target)') : {};\n        self.args = args;\n        self.createGrid = function grid(args) {\n            args.component = false;\n            return new Grid(args);\n        };\n        modules.forEach(function (module) {\n            module(self);\n        });\n        self.intf.args = self.args;\n        self.intf.init = self.init;\n        if (!self.isComponent) {\n            self.init();\n        }\n        return self.intf;\n    }\n    function getObservableAttributes() {\n        var i = {}, attrs = ['style', 'data', 'schema'];\n        defaults(i);\n        i.defaults.attributes.forEach(function (attr) {\n            attrs.push(attr[0].toLowerCase());\n        });\n        return attrs;\n    }\n    Grid.observedAttributes = getObservableAttributes();\n    Grid.prototype = Object.create(HTMLElement.prototype);\n    Grid.prototype.disconnectedCallback = function () {\n        this.dispose();\n    };\n    Grid.prototype.attributeChangedCallback = function (attrName, oldVal, newVal) {\n        var j, s, intf = this;\n        if (attrName === 'style') {\n            j = typeMap.style(newVal);\n            s = intf.args.style ? JSON.parse(JSON.stringify(intf.args.style)) : {};\n            Object.keys(j).forEach(function (key) {\n                s[key] = j[key];\n            });\n            intf.args.style = s;\n            return;\n        }\n        if (attrName === 'data') {\n            intf.args.data = typeMap.data(newVal);\n            return;\n        }\n        if (attrName === 'schema') {\n            intf.args.schema = typeMap.schema(newVal);\n            return;\n        }\n        intf.attributes[attrName] = typeMap[typeof getDefaultItem('attributes', attrName)[1]](newVal);\n        return;\n    };\n    Grid.prototype.connectedCallback = function () {\n        var intf = this, s;\n        if (intf.initialized) { return; }\n        intf.initialized = true;\n        intf.args.parentNode = intf.createShadowRoot();\n        intf.shadowRootParentElement = intf.parentElement;\n        //HACK init() will secretly return the internal reference object.\n        //since init is only run after instantiation in the component version\n        //it won't work in the amd version and won't return self, so it is still\n        //technically private since it's impossible to get at.\n        //this has to be done so intf setters can bet run and alter self without stack overflows\n        s = intf.init();\n        ['style', 'data', 'schema'].forEach(function (key) {\n            Object.defineProperty(intf.args, key, {\n                set: function (value) {\n                    s[key] = value;\n                    intf.draw();\n                },\n                get: function () {\n                    return s[key];\n                }\n            });\n        });\n    };\n    if (window && !window.canvasDatagrid && !window.require) {\n        window.canvasDatagrid = function (args) { return new Grid(args); };\n    }\n    if (window.customElements) {\n        window.customElements.define('canvas-data-grid', Grid);\n    }\n    module.exports = function grid(args) {\n        args = args || {};\n        args.component = false;\n        return new Grid(args);\n    };\n    return module.exports;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        self.defaults = {\n            attributes: [\n                ['name', ''],\n                ['tree', false],\n                ['showNewRow', false],\n                ['treeHorizontalScroll', false],\n                ['saveAppearance', true],\n                ['selectionFollowsActiveCell', false],\n                ['multiLine', false],\n                ['editable', true],\n                ['allowColumnReordering', true],\n                ['allowRowReordering', false],\n                ['allowSorting', true],\n                ['showFilter', true],\n                ['globalRowResize', false],\n                ['pageUpDownOverlap', 1],\n                ['persistantSelectionMode', false],\n                ['rowSelectionMode', false],\n                ['selectionMode', 'cell'],\n                ['autoResizeColumns', false],\n                ['allowRowHeaderResize', true],\n                ['allowColumnResize', true],\n                ['allowRowResize', true],\n                ['allowRowResizeFromCell', false],\n                ['allowColumnResizeFromCell', false],\n                ['debug', false],\n                ['borderResizeZone', 10],\n                ['showColumnHeaders', true],\n                ['showRowNumbers', true],\n                ['showRowHeaders', true],\n                ['scrollRepeatRate', 75],\n                ['selectionScrollZone', 20],\n                ['resizeScrollZone', 20],\n                ['contextHoverScrollRateMs', 5],\n                ['contextHoverScrollAmount', 2],\n                ['selectionScrollIncrement', 20],\n                ['reorderDeadZone', 3],\n                ['showClearSettingsOption', true],\n                ['showOrderByOption', true],\n                ['clearSettingsOptionText', 'Clear saved settings'],\n                ['showOrderByOptionTextAsc', 'Order by %s ascending'],\n                ['showOrderByOptionTextDesc', 'Order by %s descending'],\n                ['removeFilterOptionText', 'Remove filter on %s'],\n                ['filterOptionText', 'Filter %s'],\n                ['filterTextPrefix', '(filtered) '],\n                ['touchReleaseAnimationDurationMs', 2000],\n                ['touchReleaseAcceleration', 90],\n                ['touchDeadZone', 3],\n                ['touchSelectTimeMs', 800],\n                ['touchScrollZone', 30],\n                ['copyText', 'Copy'],\n                ['showCopy', true],\n                ['columnHeaderClickBehavior', 'sort'],\n                ['scrollPointerLock', false],\n                ['maxAutoCompleteItems', 200]\n            ],\n            styles: [\n                ['activeCellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['activeCellBorderWidth', 0.25],\n                ['activeCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellFont', '16px sans-serif'],\n                ['activeCellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['activeCellOverlayBorderWidth', 0.5],\n                ['activeCellPaddingBottom', 5],\n                ['activeCellPaddingLeft', 5],\n                ['activeCellPaddingRight', 7],\n                ['activeCellPaddingTop', 5],\n                ['activeCellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['activeCellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['activeColumnHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeColumnHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeRowHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeRowHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['autocompleteBottomMargin', 60],\n                ['autosizeHeaderCellPadding', 8],\n                ['autosizePadding', 5],\n                ['backgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cellAutoResizePadding', 13],\n                ['cellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['cellBorderWidth', 0.5],\n                ['cellColor', 'rgba(0, 0, 0, 1)'],\n                ['cellFont', '16px sans-serif'],\n                ['cellGridHeight', 250],\n                ['cellHeight', 24],\n                ['cellHeightWithChildGrid', 150],\n                ['cellHorizontalAlignment', 'left'],\n                ['cellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['cellPaddingBottom', 5],\n                ['cellPaddingLeft', 5],\n                ['cellPaddingRight', 7],\n                ['cellPaddingTop', 5],\n                ['cellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['cellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['cellVerticalAlignment', 'center'],\n                ['cellWidthWithChildGrid', 250],\n                ['childContextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['childContextMenuArrowHTML', '&#x25BA;'],\n                ['childContextMenuMarginLeft', -15],\n                ['childContextMenuMarginTop', 0],\n                ['columnHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellBorderColor', 'rgba(152, 152, 152, 1)'],\n                ['columnHeaderCellBorderWidth', 0.25],\n                ['columnHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['columnHeaderCellFont', '16px sans-serif'],\n                ['columnHeaderCellHeight', 25],\n                ['columnHeaderCellHorizontalAlignment', 'left'],\n                ['columnHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['columnHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['columnHeaderCellPaddingBottom', 5],\n                ['columnHeaderCellPaddingLeft', 5],\n                ['columnHeaderCellPaddingRight', 7],\n                ['columnHeaderCellPaddingTop', 5],\n                ['columnHeaderCellVerticalAlignment', 'center'],\n                ['columnWidth', 250],\n                ['contextFilterButtonBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterButtonBorderRadius', '3px'],\n                ['contextFilterButtonHTML', '&#x25BC;'],\n                ['contextFilterInputBackground', 'rgba(255,255,255,1)'],\n                ['contextFilterInputBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterInputBorderRadius', '0'],\n                ['contextFilterInputColor', 'rgba(0,0,0,1)'],\n                ['contextFilterInputFontFamily', 'sans-serif'],\n                ['contextFilterInputFontSize', '14px'],\n                ['contextFilterInvalidRegExpBackground', 'rgba(180, 6, 1, 1)'],\n                ['contextFilterInvalidRegExpColor', 'rgba(255, 255, 255, 1)'],\n                ['contextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuArrowDownHTML', '&#x25BC;'],\n                ['contextMenuArrowUpHTML', '&#x25B2;'],\n                ['contextMenuBackground', 'rgba(240, 240, 240, 1)'],\n                ['contextMenuBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextMenuBorderRadius', '3px'],\n                ['contextMenuChildArrowFontSize', '12px'],\n                ['contextMenuColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuFilterButtonFontFamily', 'sans-serif'],\n                ['contextMenuFilterButtonFontSize', '10px'],\n                ['contextMenuFilterInvalidExpresion', 'rgba(237, 155, 156, 1)'],\n                ['contextMenuFontFamily', 'sans-serif'],\n                ['contextMenuFontSize', '16px'],\n                ['contextMenuHoverBackground', 'rgba(182, 205, 250, 1)'],\n                ['contextMenuHoverColor', 'rgba(43, 48, 153, 1)'],\n                ['contextMenuItemBorderRadius', '3px'],\n                ['contextMenuItemMargin', '2px'],\n                ['contextMenuLabelDisplay', 'inline-block'],\n                ['contextMenuLabelMargin', '0 3px 0 0'],\n                ['contextMenuLabelMaxWidth', '700px'],\n                ['contextMenuLabelMinWidth', '75px'],\n                ['contextMenuMarginLeft', 3],\n                ['contextMenuMarginTop', -3],\n                ['contextMenuOpacity', '0.98'],\n                ['contextMenuPadding', '2px'],\n                ['contextMenuWindowMargin', 6],\n                ['cornerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cornerCellBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['editCellBackgroundColor', 'white'],\n                ['editCellBorder', 'solid 1px rgba(110, 168, 255, 1)'],\n                ['editCellBoxShadow', '0 2px 5px rgba(0,0,0,0.4)'],\n                ['editCellColor', 'black'],\n                ['editCellFontFamily', 'sans-serif'],\n                ['editCellFontSize', '16px'],\n                ['editCellPaddingLeft', 4],\n                ['gridBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['gridBorderWidth', 1],\n                ['columnHeaderOrderByArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['columnHeaderOrderByArrowBorderWidth', 1],\n                ['columnHeaderOrderByArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['columnHeaderOrderByArrowHeight', 8],\n                ['columnHeaderOrderByArrowMarginLeft', 0],\n                ['columnHeaderOrderByArrowMarginRight', 5],\n                ['columnHeaderOrderByArrowMarginTop', 6],\n                ['columnHeaderOrderByArrowWidth', 13],\n                ['minColumnWidth', 45],\n                ['minHeight', 24],\n                ['minRowHeight', 24],\n                ['name', 'default'],\n                ['reorderMarkerBackgroundColor', 'rgba(0, 0, 0, 0.1)'],\n                ['reorderMarkerBorderColor', 'rgba(0, 0, 0, 0.2)'],\n                ['reorderMarkerBorderWidth', 1.25],\n                ['reorderMarkerIndexBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['reorderMarkerIndexBorderWidth', 2.75],\n                ['rowHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['rowHeaderCellBorderColor', 'rgba(200, 200, 200, 1)'],\n                ['rowHeaderCellBorderWidth', 1],\n                ['rowHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellFont', '16px sans-serif'],\n                ['rowHeaderCellHeight', 25],\n                ['rowHeaderCellHorizontalAlignment', 'left'],\n                ['rowHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['rowHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['rowHeaderCellPaddingBottom', 5],\n                ['rowHeaderCellPaddingLeft', 5],\n                ['rowHeaderCellPaddingRight', 5],\n                ['rowHeaderCellPaddingTop', 5],\n                ['rowHeaderCellSelectedBackgroundColor', 'rgba(217, 217, 217, 1)'],\n                ['rowHeaderCellSelectedColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellVerticalAlignment', 'center'],\n                ['rowHeaderCellWidth', 57],\n                ['scrollBarActiveColor', 'rgba(125, 125, 125, 1)'],\n                ['scrollBarBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarBorderWidth', 0.5],\n                ['scrollBarBoxBorderRadius', 4.125],\n                ['scrollBarBoxColor', 'rgba(192, 192, 192, 1)'],\n                ['scrollBarBoxMargin', 2],\n                ['scrollBarBoxMinSize', 15],\n                ['scrollBarBoxWidth', 8],\n                ['scrollBarCornerBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarCornerBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarWidth', 11],\n                ['selectionOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionOverlayBorderWidth', 0.75],\n                ['treeArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['treeArrowBorderWidth', 1],\n                ['treeArrowClickRadius', 5],\n                ['treeArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['treeArrowHeight', 8],\n                ['treeArrowMarginLeft', 0],\n                ['treeArrowMarginRight', 5],\n                ['treeArrowMarginTop', 6],\n                ['treeArrowWidth', 13],\n                ['treeGridHeight', 250]\n            ]\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals XMLSerializer: false, define: true, Blob: false, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var perfCounters = [],\n            drawCount = 0,\n            perfWindowSize = 20;\n        self.htmlImageCache = {};\n        function drawOnAllImagesLoaded() {\n            var loaded = true;\n            Object.keys(self.htmlImageCache).forEach(function (html) {\n                if (!self.htmlImageCache[html].complete) {\n                    loaded = false;\n                }\n            });\n            if (loaded) {\n                self.draw();\n            }\n        }\n        function drawHtml(cell) {\n            var img,\n                v = cell.innerHTML || cell.formattedValue,\n                x = cell.x + self.canvasOffsetLeft,\n                y = cell.y + self.canvasOffsetTop;\n            if (self.htmlImageCache[v]) {\n                img = self.htmlImageCache[v];\n                if (img.height !== cell.height || img.width !== cell.width) {\n                    // height and width of the cell has changed, invalidate cache\n                    self.htmlImageCache[v] = undefined;\n                } else {\n                    if (!img.complete) {\n                        return;\n                    }\n                    return self.ctx.drawImage(img, x, y);\n                }\n            }\n            img = new Image(cell.width, cell.height);\n            self.htmlImageCache[v] = img;\n            img.onload = function () {\n                self.ctx.drawImage(img, x, y);\n                drawOnAllImagesLoaded();\n            };\n            img.src = 'data:image/svg+xml;base64,' + btoa(\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + cell.width + '\" height=\"' + cell.height + '\">\\n' +\n                    '<foreignObject class=\"node\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\\n' +\n                    '<body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;padding:0;\">\\n' +\n                    v + '\\n' +\n                    '</body>' +\n                    '</foreignObject>\\n' +\n                    '</svg>\\n'\n            );\n        }\n        function drawOrderByArrow(x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.columnHeaderOrderByArrowColor;\n            self.ctx.strokeStyle = self.style.columnHeaderOrderByArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + self.style.columnHeaderOrderByArrowMarginLeft;\n            y = y + self.style.columnHeaderOrderByArrowMarginTop;\n            if (self.orderDirection === 'asc') {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + self.style.columnHeaderOrderByArrowWidth, y);\n                self.ctx.lineTo(x + (self.style.columnHeaderOrderByArrowWidth * 0.5), y + self.style.columnHeaderOrderByArrowHeight);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y + self.style.columnHeaderOrderByArrowHeight);\n                self.ctx.lineTo(x + self.style.columnHeaderOrderByArrowWidth, y + self.style.columnHeaderOrderByArrowHeight);\n                self.ctx.lineTo(x + (self.style.columnHeaderOrderByArrowWidth * 0.5), y);\n                self.ctx.lineTo(x, y + self.style.columnHeaderOrderByArrowHeight);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return self.style.columnHeaderOrderByArrowMarginLeft\n                + self.style.columnHeaderOrderByArrowWidth\n                + self.style.columnHeaderOrderByArrowMarginRight;\n        }\n        function drawTreeArrow(cell, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.treeArrowColor;\n            self.ctx.strokeStyle = self.style.treeArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + self.style.treeArrowMarginLeft;\n            y = y + self.style.treeArrowMarginTop;\n            if (self.openChildren[cell.data[self.uniqueId]]) {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + self.style.treeArrowWidth, y);\n                self.ctx.lineTo(x + (self.style.treeArrowWidth * 0.5), y + self.style.treeArrowHeight);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y);\n                self.ctx.lineTo(x + self.style.treeArrowHeight, y + (self.style.treeArrowWidth * 0.5));\n                self.ctx.lineTo(x, y + self.style.treeArrowWidth);\n                self.ctx.lineTo(x, y);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return self.style.treeArrowMarginLeft\n                + self.style.treeArrowWidth\n                + self.style.treeArrowMarginRight;\n        }\n        function radiusRect(x, y, w, h, radius) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            var r = x + w, b = y + h;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x + radius, y);\n            self.ctx.lineTo(r - radius, y);\n            self.ctx.quadraticCurveTo(r, y, r, y + radius);\n            self.ctx.lineTo(r, y + h - radius);\n            self.ctx.quadraticCurveTo(r, b, r - radius, b);\n            self.ctx.lineTo(x + radius, b);\n            self.ctx.quadraticCurveTo(x, b, x, b - radius);\n            self.ctx.lineTo(x, y + radius);\n            self.ctx.quadraticCurveTo(x, y, x + radius, y);\n        }\n        function fillRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillRect(x, y, w, h);\n        }\n        function strokeRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.strokeRect(x, y, w, h);\n        }\n        function fillText(text, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillText(text, x, y);\n        }\n        function addBorderLine(c, pos) {\n            self.ctx.beginPath();\n            var p = {\n                t: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                },\n                r: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                b: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                l: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                },\n            };\n            p[pos]();\n            self.ctx.stroke();\n        }\n        function addEllipsis(text, width) {\n            var c, w = 0;\n            if (self.ellipsisCache[text] && self.ellipsisCache[text][width]) {\n                return self.ellipsisCache[text][width];\n            }\n            //TODO Add ellipsis back when there is a fast way to do it\n            w = self.ctx.measureText(text).width;\n            self.ellipsisCache[text] = self.ellipsisCache[text] || {};\n            c = {value: text, width: w};\n            self.ellipsisCache[text][width] = c;\n            return c;\n        }\n        function drawText(cell) {\n            var paddingLeft = self.style[cell.style + 'PaddingLeft'],\n                paddingTop = self.style[cell.style + 'PaddingTop'],\n                paddingRight = self.style[cell.style + 'PaddingRight'],\n                paddingBottom = self.style[cell.style + 'PaddingBottom'],\n                vPos = paddingTop + cell.height - (cell.height * 0.5),\n                hPos = paddingLeft + cell.treeArrowWidth + cell.orderByArrowWidth;\n            cell.text = addEllipsis(cell.formattedValue, cell.width - paddingRight - paddingLeft);\n            cell.text.height = cell.fontHeight;\n            if (cell.horizontalAlignment === 'right') {\n                hPos = cell.width - cell.text.width - paddingRight;\n            } else if (cell.horizontalAlignment === 'center') {\n                hPos = (cell.width / 2) - (cell.text.width / 2);\n            }\n            if (cell.verticalAlignment === 'top') {\n                vPos = paddingTop + cell.text.height;\n            } else if (cell.verticalAlignment === 'bottom') {\n                vPos = cell.height - paddingBottom - cell.text.height;\n            }\n            cell.text.x = cell.x + hPos;\n            cell.text.y = cell.y + vPos;\n            fillText(cell.text.value, cell.text.x, cell.text.y);\n        }\n        /**\n         * Redraws the grid. No matter what the change, this is the only method required to refresh everything.\n         * @memberof canvasDataGrid\n         * @name draw\n         * @method\n         */\n        self.draw = function (internal) {\n            if (self.dispatchEvent('beforedraw', {})) { return; }\n            if (!self.isChildGrid && (!self.height || !self.width)) {\n                return;\n            }\n            if (self.isChildGrid && internal) {\n                requestAnimationFrame(self.parentGrid.draw);\n                return;\n            }\n            if (self.intf.visible === false) {\n                return;\n            }\n            // initial values\n            var checkScrollHeight, rowHeaderCell, p, cx, cy, treeGrid, rowOpen,\n                rowHeight, cornerCell, y, x, c, h, w, s, r, rd, aCell,\n                selectionBorders = [],\n                rowHeaders = [],\n                l = self.data.length,\n                u = self.currentCell || {},\n                rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth(),\n                cellHeight = self.style.cellHeight;\n            drawCount += 1;\n            p = performance.now();\n            // if data length has changed, there is no way to know\n            if (self.data.length > self.orders.rows.length) {\n                self.createRowOrders();\n            }\n            function drawScrollBars() {\n                var v = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-bar'\n                    },\n                    n = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-bar'\n                    },\n                    vb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-box'\n                    },\n                    nb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-box'\n                    },\n                    co = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        isCorner: true,\n                        isScrollBoxCorner: true,\n                        style: 'scroll-box-corner'\n                    },\n                    m = (self.style.scrollBarBoxMargin * 2),\n                    d = self.style.scrollBarBoxMargin * 0.5;\n                self.ctx.strokeStyle = self.style.scrollBarBorderColor;\n                self.ctx.lineWidth = self.style.scrollBarBorderWidth;\n                // vertical\n                v.x += w - self.style.scrollBarWidth - self.style.scrollBarBorderWidth - d;\n                v.y += rowHeaderCellHeight;\n                v.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                v.height = h - rowHeaderCellHeight - self.style.scrollBarWidth - d - m;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(v.x, v.y, v.width, v.height + m);\n                strokeRect(v.x, v.y, v.width, v.height + m);\n                // vertical box\n                vb.x = v.x + self.style.scrollBarBoxMargin;\n                vb.y = rowHeaderCellHeight + self.style.scrollBarBoxMargin\n                    + ((v.height - self.scrollBox.scrollBoxHeight)\n                        * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight));\n                vb.width = self.style.scrollBarBoxWidth;\n                vb.height = self.scrollBox.scrollBoxHeight;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/vertical/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (vb.height < v.height) {\n                    radiusRect(vb.x, vb.y, vb.width, vb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                // horizontal\n                n.x += columnHeaderCellWidth;\n                n.y += h - self.style.scrollBarWidth - d;\n                n.width = w - self.style.scrollBarWidth - columnHeaderCellWidth - d - m;\n                n.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(n.x, n.y, n.width + m, n.height);\n                strokeRect(n.x, n.y, n.width + m, n.height);\n                // horizontal box\n                nb.y = n.y + self.style.scrollBarBoxMargin;\n                nb.x = columnHeaderCellWidth + self.style.scrollBarBoxMargin\n                    + ((n.width - self.scrollBox.scrollBoxWidth)\n                        * (self.scrollBox.scrollLeft / self.scrollBox.scrollWidth));\n                nb.width = self.scrollBox.scrollBoxWidth;\n                nb.height = self.style.scrollBarBoxWidth;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/horizontal/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (nb.width < n.width) {\n                    radiusRect(nb.x, nb.y, nb.width, nb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                //corner\n                self.ctx.strokeStyle = self.style.scrollBarCornerBorderColor;\n                self.ctx.fillStyle = self.style.scrollBarCornerBackgroundColor;\n                co.x = n.x + n.width + m;\n                co.y = v.y + v.height + m;\n                co.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                co.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                radiusRect(co.x, co.y, co.width, co.height, 0);\n                self.ctx.stroke();\n                self.ctx.fill();\n                self.visibleCells.unshift(v);\n                self.visibleCells.unshift(vb);\n                self.visibleCells.unshift(n);\n                self.visibleCells.unshift(nb);\n                self.visibleCells.unshift(co);\n                self.scrollBox.bar = {\n                    v: v,\n                    h: n\n                };\n                self.scrollBox.box = {\n                    v: vb,\n                    h: nb\n                };\n            }\n            function drawCell(d, rowIndex, rowOrderIndex) {\n                return function drawEach(header, headerIndex, columnOrderIndex) {\n                    var cellStyle = header.style || 'cell',\n                        cellGridAttributes,\n                        cell,\n                        isHeader = /HeaderCell/.test(cellStyle),\n                        isCorner = /cornerCell/.test(cellStyle),\n                        isRowHeader = 'rowHeaderCell' === cellStyle,\n                        isColumnHeader = 'columnHeaderCell' === cellStyle,\n                        selected = self.selections[rowOrderIndex] && self.selections[rowOrderIndex].indexOf(columnOrderIndex) !== -1,\n                        hovered = self.hovers[d[self.uniqueId]] && self.hovers[d[self.uniqueId]].indexOf(columnOrderIndex) !== -1,\n                        active = self.activeCell.rowIndex === rowOrderIndex && self.activeCell.columnIndex === columnOrderIndex,\n                        isGrid = typeof d[header.name] === 'object' && d[header.name] !== null && d[header.name] !== undefined,\n                        activeHeader = (self.orders.rows[self.activeCell.rowIndex] === rowOrderIndex\n                                || self.orders.columns[self.activeCell.columnIndex] === columnOrderIndex)\n                            && (columnOrderIndex === -1 || rowOrderIndex === -1)\n                            ? (isRowHeader ? 'activeRowHeaderCell' : 'activeColumnHeaderCell') : false,\n                        val,\n                        f = self.formatters[header.type || 'string'],\n                        orderByArrowSize = 0,\n                        treeArrowSize = 0,\n                        cellWidth = self.sizes.columns[isRowHeader ? 'cornerCell' : header[self.uniqueId]] || header.width,\n                        ev = {\n                            value: d[header.name],\n                            row: d,\n                            header: header\n                        };\n                    if (cellStyle === 'headerCellCap') {\n                        cellWidth = w - x;\n                    }\n                    // if no data or schema are defined, a width is provided to the stub column\n                    if (cellWidth === undefined) {\n                        cellWidth = self.style.columnWidth;\n                    }\n                    if (x + cellWidth + self.style.cellBorderWidth < 0) {\n                        x += cellWidth + self.style.cellBorderWidth;\n                    }\n                    if (active) {\n                        cellStyle = 'activeCell';\n                    }\n                    if (self.visibleRows.indexOf(rowIndex) === -1 && !isHeader) {\n                        self.visibleRows.push(rowIndex);\n                    }\n                    val = self.dispatchEvent('formatcellvalue', ev);\n                    if (!self.dispatchEvent('beforerendercell', ev)) {\n                        cx = x;\n                        cy = y;\n                        if (cellStyle === 'cornerCell') {\n                            cx = 0;\n                            cy = 0;\n                        } else if (isRowHeader) {\n                            cx = 0;\n                        } else if (isHeader) {\n                            cy = 0;\n                        }\n                        cell = {\n                            type: isGrid ? 'canvas-datagrid-cell' : header.type,\n                            style: cellStyle,\n                            nodeType: 'canvas-datagrid-cell',\n                            x: cx,\n                            y: cy,\n                            horizontalAlignment: self.style[cellStyle + 'HorizontalAlignment'],\n                            verticalAlignment: self.style[cellStyle + 'VerticalAlignment'],\n                            offsetTop: self.canvasOffsetTop + cy,\n                            offsetLeft: self.canvasOffsetLeft + cx,\n                            scrollTop: self.scrollBox.scrollTop,\n                            scrollLeft: self.scrollBox.scrollLeft,\n                            active: active || activeHeader,\n                            hovered: hovered,\n                            selected: selected,\n                            width: cellWidth,\n                            height: cellHeight,\n                            offsetWidth: cellWidth,\n                            offsetHeight: cellHeight,\n                            parentNode: self.intf.parentNode,\n                            offsetParent: self.intf.parentNode,\n                            data: d,\n                            isCorner: isCorner,\n                            isHeader: isHeader,\n                            isColumnHeader: isColumnHeader,\n                            isHeaderCellCap: !!header.isHeaderCellCap,\n                            isRowHeader: isRowHeader,\n                            rowOpen: rowOpen,\n                            header: header,\n                            columnIndex: columnOrderIndex,\n                            rowIndex: rowOrderIndex,\n                            sortColumnIndex: headerIndex,\n                            sortRowIndex: rowIndex,\n                            isGrid: isGrid,\n                            gridId: (self.attributes.name || '') + d[self.uniqueId] + ':' + header[self.uniqueId],\n                            parentGrid: self.intf,\n                            innerHTML: '',\n                            activeHeader: activeHeader,\n                            value: isHeader && !isRowHeader ? (header.title || header.name) : d[header.name]\n                        };\n                        ev.cell = cell;\n                        cell.userHeight = cell.isHeader ? self.sizes.rows[-1] : rowHeight;\n                        cell.userWidth = cell.isHeader ? self.sizes.columns.cornerCell : self.sizes.columns[header[self.uniqueId]];\n                        cell[self.uniqueId] = d[self.uniqueId];\n                        self.visibleCells.unshift(cell);\n                        self.ctx.fillStyle = self.style[cellStyle + 'BackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'BorderColor'];\n                        self.ctx.lineWidth = self.style[cellStyle + 'BorderWidth'];\n                        if (hovered) {\n                            self.ctx.fillStyle = self.style[cellStyle + 'HoverBackgroundColor'];\n                            self.ctx.strokeStyle = self.style[cellStyle + 'HoverBorderColor'];\n                        }\n                        if (selected) {\n                            self.ctx.fillStyle = self.style[cellStyle + 'SelectedBackgroundColor'];\n                            self.ctx.strokeStyle = self.style[cellStyle + 'SelectedBorderColor'];\n                        }\n                        if (activeHeader) {\n                            self.ctx.fillStyle = self.style[activeHeader + 'BackgroundColor'];\n                        }\n                        self.dispatchEvent('rendercell', ev);\n                        if (cell.isGrid) {\n                            if (cell.height !== rowHeight) {\n                                cell.height = rowHeight || self.style.cellHeightWithChildGrid;\n                                checkScrollHeight = true;\n                            }\n                            cell.width = self.sizes.columns[header[self.uniqueId]] || self.style.cellWidthWithChildGrid;\n                        }\n                        if (rowOpen && !cell.isRowHeader) {\n                            cell.height = self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight;\n                        }\n                        if (!cell.isGrid) {\n                            fillRect(cx, cy, cell.width, cell.height);\n                            strokeRect(cx, cy, cell.width, cell.height);\n                        }\n                        self.ctx.save();\n                        radiusRect(cell.x, cell.y, cell.width, cell.height, 0);\n                        self.ctx.clip();\n                        self.dispatchEvent('afterrendercell', ev);\n                        if (cell.height !== cellHeight && !(rowOpen && !cell.isRowHeader)) {\n                            self.sizes.rows[isHeader ? -1 : d[self.uniqueId]] = cell.height;\n                            checkScrollHeight = true;\n                        }\n                        if (cell.width !== cellWidth) {\n                            self.sizes.columns[header[self.uniqueId]] = cell.width;\n                            checkScrollHeight = true;\n                        }\n                        if (isRowHeader && self.attributes.tree) {\n                            if (!self.dispatchEvent('rendertreearrow', ev)) {\n                                treeArrowSize = drawTreeArrow(cell, self.style[cellStyle + 'PaddingLeft'], cy, 0);\n                            }\n                        }\n                        if ((self.attributes.showRowNumbers && isRowHeader)\n                                || !isRowHeader) {\n                            if (cell.isGrid) {\n                                if (!self.childGrids[cell.gridId]) {\n                                    cellGridAttributes = self.args.cellGridAttributes || self.args;\n                                    cellGridAttributes.name = self.attributes.saveAppearance ? cell.gridId : undefined;\n                                    cellGridAttributes.parentNode = cell;\n                                    cellGridAttributes.data = d[header.name];\n                                    self.childGrids[cell.gridId] = self.createGrid(cellGridAttributes);\n                                    self.sizes.rows[rd[self.uniqueId]]\n                                        = self.sizes.rows[rd[self.uniqueId]] || self.style.cellGridHeight;\n                                    checkScrollHeight = true;\n                                }\n                                cell.grid = self.childGrids[cell.gridId];\n                                cell.grid.parentNode = cell;\n                                cell.grid.visible = true;\n                                cell.grid.draw();\n                                self.dispatchEvent('rendercellgrid', ev);\n                            } else {\n                                if (self.childGrids[cell.gridId]) {\n                                    self.childGrids[cell.gridId].parentNode.offsetHeight = 0;\n                                }\n                                if (isHeader && self.orderBy === header.name) {\n                                    if (!self.dispatchEvent('renderorderbyarrow', ev)) {\n                                        orderByArrowSize = drawOrderByArrow(cx + self.style[cellStyle + 'PaddingLeft'], 0);\n                                    }\n                                }\n                                self.ctx.fillStyle = self.style[cellStyle + 'Color'];\n                                if (hovered) {\n                                    self.ctx.fillStyle = self.style[cellStyle + 'HoverColor'];\n                                }\n                                if (selected) {\n                                    self.ctx.fillStyle = self.style[cellStyle + 'SelectedColor'];\n                                }\n                                if (activeHeader) {\n                                    self.ctx.fillStyle = self.style[activeHeader + 'Color'];\n                                }\n                                self.ctx.font = self.style[cellStyle + 'Font'];\n                                cell.fontHeight = self.style[cellStyle + 'FontHeight'];\n                                cell.treeArrowWidth = treeArrowSize;\n                                cell.orderByArrowWidth = orderByArrowSize;\n                                val = val !== undefined ? val : f\n                                    ? f(ev) : '';\n                                if (val === undefined && !f) {\n                                    val = '';\n                                    console.warn('canvas-datagrid: Unknown format '\n                                        + header.type + ' add a cellFormater');\n                                }\n                                cell.formattedValue = ((val !== undefined && val !== null) ? val : '').toString();\n                                if (self.columnFilters && self.columnFilters[val] !== undefined && isHeader) {\n                                    cell.formattedValue = self.attributes.filterTextPrefix + val;\n                                }\n                                if (!self.dispatchEvent('rendertext', ev)) {\n                                    if (cell.innerHTML || header.type === 'html') {\n                                        drawHtml(cell);\n                                    } else {\n                                        drawText(cell);\n                                    }\n                                }\n                            }\n                        }\n                        if (active) {\n                            aCell = cell;\n                        }\n                        if (selected && !isRowHeader) {\n                            if ((!self.selections[cell.rowIndex - 1]\n                                    || self.selections[cell.rowIndex - 1].indexOf(cell.columnIndex) === -1\n                                    || cell.rowIndex === 0)\n                                    && !cell.isHeader) {\n                                selectionBorders.push([cell, 't']);\n                            }\n                            if (!self.selections[cell.rowIndex + 1]\n                                    || self.selections[cell.rowIndex + 1].indexOf(cell.columnIndex) === -1) {\n                                selectionBorders.push([cell, 'b']);\n                            }\n                            if (!self.selections[cell.rowIndex] || cell.columnIndex === 0\n                                    || self.selections[cell.rowIndex].indexOf(cell.columnIndex - 1) === -1) {\n                                selectionBorders.push([cell, 'l']);\n                            }\n                            if (!self.selections[cell.rowIndex] || cell.columnIndex === s.length\n                                    || self.selections[cell.rowIndex].indexOf(cell.columnIndex + 1) === -1) {\n                                selectionBorders.push([cell, 'r']);\n                            }\n                        }\n                        self.ctx.restore();\n                        x += cell.width + self.style.cellBorderWidth;\n                        return cell.width;\n                    }\n                };\n            }\n            function drawRowHeader(rowData, index, rowOrderIndex) {\n                var a;\n                if (self.attributes.showRowHeaders) {\n                    x = 0;\n                    rowHeaderCell = {'rowHeaderCell': index + 1 };\n                    rowHeaderCell[self.uniqueId] = rowData[self.uniqueId];\n                    a = {\n                        name: 'rowHeaderCell',\n                        width: self.style.rowHeaderCellWidth,\n                        style: 'rowHeaderCell',\n                        type: 'string',\n                        data: rowData[self.uniqueId],\n                        index: -1\n                    };\n                    a[self.uniqueId] = rowData[self.uniqueId];\n                    rowOpen = self.openChildren[rowData[self.uniqueId]];\n                    drawCell(rowHeaderCell, index, rowOrderIndex)(a, -1, -1);\n                }\n            }\n            function drawHeaders() {\n                var d, g = s.length, i, o, columnHeaderCell, header;\n                rowHeaders.forEach(function (rArgs) {\n                    y = rArgs[3];\n                    cellHeight = rArgs[4];\n                    drawRowHeader(rArgs[0], rArgs[1], rArgs[2]);\n                });\n                if (self.attributes.showColumnHeaders) {\n                    x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft;\n                    if (self.attributes.showRowHeaders) {\n                        x += columnHeaderCellWidth;\n                    }\n                    y = 0;\n                    // cell height might have changed during drawing\n                    cellHeight = self.getRowHeaderCellHeight();\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        header = s[i];\n                        d = {\n                            title: header.title,\n                            name: header.name,\n                            width: header.width,\n                            style: 'columnHeaderCell',\n                            type: 'string',\n                            index: o,\n                            order: i\n                        };\n                        columnHeaderCell = {'columnHeaderCell': header.title || header.name};\n                        columnHeaderCell[self.uniqueId] = 'h' + header[self.uniqueId];\n                        d[self.uniqueId] = header[self.uniqueId];\n                        x += drawCell(columnHeaderCell, -1, -1)(d, o, i);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    // fill in the space right of the headers\n                    if (x < w) {\n                        c = {\n                            name: '',\n                            width: self.style.scrollBarWidth,\n                            style: 'headerCellCap',\n                            isHeaderCell: true,\n                            isHeaderCellCap: true,\n                            type: 'string',\n                            index: s.length\n                        };\n                        c[self.uniqueId] = 'columnHeaderCell';\n                        drawCell({endCap: ''}, -1, -1)(c, -1, -1);\n                    }\n                    // fill in the space right of the headers\n                    if (self.attributes.showRowHeaders) {\n                        cornerCell = {'cornerCell': '' };\n                        cornerCell[self.uniqueId] = 'cornerCell';\n                        x = 0;\n                        c = {\n                            name: 'cornerCell',\n                            width: self.style.rowHeaderCellWidth,\n                            style: 'cornerCell',\n                            type: 'string',\n                            index: -1\n                        };\n                        c[self.uniqueId] = 'cornerCell';\n                        drawCell(cornerCell, -1, -1)(c, -1, -1);\n                    }\n                }\n            }\n            function drawRow(r, d) {\n                var i, treeHeight, rowSansTreeHeight, o, g = s.length;\n                if (y - (cellHeight * 2) > h) {\n                    return false;\n                }\n                rd = self.data[r];\n                rowOpen = self.openChildren[rd[self.uniqueId]];\n                rowSansTreeHeight = self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight;\n                treeHeight = (rowOpen ? self.sizes.trees[rd[self.uniqueId]] : 0);\n                rowHeight = rowSansTreeHeight + treeHeight;\n                if (y < rowHeight * -1) {\n                    return false;\n                }\n                if (self.attributes.showRowHeaders) {\n                    x += columnHeaderCellWidth;\n                }\n                cellHeight = rowHeight;\n                for (o = self.scrollIndexLeft; o < g; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        break;\n                    }\n                }\n                // cell height might have changed during drawing\n                cellHeight = rowHeight;\n                x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft + self.style.cellBorderWidth;\n                // don't draw a tree for the new row\n                treeGrid = self.childGrids[rd[self.uniqueId]];\n                if (r !== self.data.length && rowOpen) {\n                    treeGrid.visible = true;\n                    treeGrid.parentNode = {\n                        offsetTop: y + rowSansTreeHeight + self.canvasOffsetTop,\n                        offsetLeft: columnHeaderCellWidth - 1 + self.canvasOffsetLeft,\n                        offsetHeight: treeHeight,\n                        offsetWidth: self.width - columnHeaderCellWidth - self.style.scrollBarWidth - 1,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: self.style,\n                        nodeType: 'canvas-datagrid-tree',\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        rowIndex: r\n                    };\n                    self.visibleCells.unshift({\n                        rowIndex: x,\n                        columnIndex: 0,\n                        y: treeGrid.parentNode.offsetTop,\n                        x: treeGrid.parentNode.offsetLeft,\n                        height: treeGrid.parentNode.offsetHeight,\n                        width: treeGrid.parentNode.offsetWidth,\n                        style: 'tree-grid',\n                        type: treeGrid.parentNode.nodeType\n                    });\n                    treeGrid.draw();\n                } else if (treeGrid) {\n                    treeGrid.parentNode.offsetHeight = 0;\n                    delete self.sizes.trees[rd[self.uniqueId]];\n                }\n                rowHeaders.push([rd, r, d, y, rowHeight]);\n                y += cellHeight + self.style.cellBorderWidth;\n                return true;\n            }\n            function initDraw() {\n                self.visibleRows = [];\n                s = self.getVisibleSchema();\n                self.visibleCells = [];\n                self.canvasOffsetTop = self.isChildGrid ? self.parentNode.offsetTop : 0;\n                self.canvasOffsetLeft = self.isChildGrid ? self.parentNode.offsetLeft : 0;\n                h = self.height;\n                w = self.width;\n                if (!self.isChildGrid) {\n                    self.ctx.scale(window.devicePixelRatio, window.devicePixelRatio);\n                }\n            }\n            function drawBackground() {\n                radiusRect(0, 0, w, h, 0);\n                self.ctx.clip();\n                self.ctx.fillStyle = self.style.backgroundColor;\n                fillRect(0, 0, w, h);\n            }\n            function drawRows() {\n                var o, n, i, g = s.length;\n                x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft + self.style.cellBorderWidth;\n                y = (self.scrollBox.scrollTop * -1) + rowHeaderCellHeight + self.scrollPixelTop + self.style.cellBorderWidth;\n                for (r = self.scrollIndexTop; r < l; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.showNewRow) {\n                    if (self.attributes.showRowHeaders) {\n                        x += columnHeaderCellWidth;\n                    }\n                    rowHeight = cellHeight = self.style.cellHeight;\n                    rowOpen = false;\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        x += drawCell(self.newRow, self.data.length, self.data.length)(s[i], i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    rowHeaders.push([self.newRow, self.data.length, self.data.length, y, rowHeight]);\n                }\n            }\n            function drawReorderMarkers() {\n                if (!self.reorderObject) { return; }\n                var b = {\n                        height: self.reorderObject.height,\n                        width: self.reorderObject.width,\n                        x: self.reorderObject.x + self.reorderObject.dragOffset.x,\n                        y: self.reorderObject.y + self.reorderObject.dragOffset.y\n                    },\n                    m = {\n                        width: w,\n                        heigth: h,\n                        x: 0,\n                        y: 0\n                    };\n                self.ctx.fillStyle = self.style.reorderMarkerBackgroundColor;\n                self.ctx.lineWidth = self.style.reorderMarkerBorderWidth;\n                self.ctx.strokeStyle = self.style.reorderMarkerBorderColor;\n                if (self.dragMode === 'row-reorder') {\n                    b.width = w;\n                    b.x = 0;\n                    m.width = w;\n                    m.y = self.currentCell.y;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.rowIndex !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex - 1 !== self.reorderObject.rowIndex) {\n                        addBorderLine(m, 't');\n                    }\n                } else if (self.dragMode === 'column-reorder' && self.reorderObject) {\n                    b.height = h;\n                    b.y = 0;\n                    m.height = h;\n                    m.x = self.currentCell.x;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.columnIndex !== self.reorderObject.columnIndex\n                            && self.currentCell.columnIndex - 1 !== self.reorderObject.columnIndex) {\n                        addBorderLine(m, 'l');\n                    }\n                }\n            }\n            function drawBorder() {\n                self.ctx.lineWidth = self.style.gridBorderWidth;\n                self.ctx.strokeStyle = self.style.gridBorderColor;\n                strokeRect(0, 0, self.width, self.height);\n            }\n            function drawSelectionBorders() {\n                self.ctx.lineWidth = self.style.selectionOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.selectionOverlayBorderColor;\n                selectionBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n            }\n            function drawActiveCell() {\n                if (!aCell) { return; }\n                if (self.attributes.selectionMode === 'row') {\n                    if (self.activeCell && self.activeCell.rowIndex === aCell.rowIndex) {\n                        self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                        self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                        strokeRect(0, aCell.y, self.getHeaderWidth() + columnHeaderCellWidth, rowHeight);\n                    }\n                } else {\n                    self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                    self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                    strokeRect(aCell.x, aCell.y, aCell.width, aCell.height);\n                }\n            }\n            function drawDebug() {\n                perfCounters[drawCount % perfWindowSize] = performance.now() - p;\n                var d;\n                if (self.attributes.debug) {\n                    self.ctx.font = '11px sans-serif';\n                    d = {};\n                    d.perf = (perfCounters.reduce(function (a, b) {\n                        return a + b;\n                    }, 0) / perfCounters.length).toFixed(1)\n                        + 'ms (' +\n                        perfCounters.map(function (a) { return a.toFixed(1); }).join(', ') + ')';\n                    d.htmlImages = Object.keys(self.htmlImageCache).length;\n                    d.scrollBox = self.scrollBox.toString();\n                    d.scrollIndex = '{\"top\": ' + self.scrollIndexTop + ', \"left\": ' + self.scrollIndexLeft + '}';\n                    d.scrollPixel = '{\"top\": ' + self.scrollPixelTop + ', \"left\": ' + self.scrollPixelLeft + '}';\n                    d.canvasOffset = '{\"top\": ' + self.canvasOffsetTop + ', \"left\": ' + self.canvasOffsetLeft + '}';\n                    d.pointerLockPosition =  self.pointerLockPosition ?\n                            self.pointerLockPosition.x + ', ' + self.pointerLockPosition.y : '';\n                    d.size = '{\"width\": ' + self.width + ', \"height\": ' + self.height + '}';\n                    d.mouse = '{\"x\": ' + self.mouse.x + ', \"y\": ' + self.mouse.y + '}';\n                    d.touch = !self.touchStart\n                        ? '' : '{\"x\": ' + self.touchStart.x + ', \"y\": ' + self.touchStart.y + \"}\";\n                    d.entities = self.visibleCells.length;\n                    d.hasFocus = self.hasFocus;\n                    d.dragMode = self.dragMode;\n                    if (self.currentCell) {\n                        d.columnIndex = self.currentCell.columnIndex;\n                        d.rowIndex = self.currentCell.rowIndex;\n                        d.sortColumnIndex = self.currentCell.sortColumnIndex;\n                        d.sortRowIndex = self.currentCell.sortRowIndex;\n                        d.context = self.currentCell.context;\n                        d.dragContext = self.currentCell.dragContext;\n                        d.style = self.currentCell.style;\n                        d.type = self.currentCell.type;\n                    }\n                    self.ctx.save();\n                    Object.keys(d).forEach(function (key, index) {\n                        var m = key + ': ' + d[key],\n                            lh = 14;\n                        self.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n                        fillRect(columnHeaderCellWidth, lh + (index * lh), 800, lh);\n                        self.ctx.fillStyle = 'rgba(0, 0, 0, 1)';\n                        fillText(m, columnHeaderCellWidth + 1, rowHeaderCellHeight + (index * lh));\n                    });\n                    self.ctx.restore();\n                }\n            }\n            self.ctx.save();\n            initDraw();\n            drawBackground();\n            drawRows();\n            drawSelectionBorders();\n            drawActiveCell();\n            drawHeaders();\n            drawReorderMarkers();\n            drawScrollBars();\n            if (checkScrollHeight) {\n                self.resize(true);\n            }\n            drawBorder();\n            drawDebug();\n            if (self.dispatchEvent('afterdraw', {})) { return; }\n            self.ctx.restore();\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var touchDelta = {x: 0, y: 0, scrollTop: 0, scrollLeft: 0},\n            touchAnimateTo = {scrollLeft: 0, scrollTop: 0},\n            touchSigma = {scrollLeft: 0, scrollTop: 0},\n            xPPS = 0,\n            yPPS = 0,\n            touchingCell = false,\n            startingCell = false,\n            animationFrames = 0;\n        self.getTouchPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.touches[0].clientX - rect.left,\n                    y: e.touches[0].clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        self.calculatePPS = function () {\n            xPPS = ((touchDelta.scrollLeft - touchSigma.scrollLeft) / (touchDelta.t - touchSigma.t));\n            yPPS = ((touchDelta.scrollTop - touchSigma.scrollTop) / (touchDelta.t - touchSigma.t));\n            touchSigma = {\n                scrollLeft: touchDelta.scrollLeft,\n                scrollTop: touchDelta.scrollTop,\n                t: performance.now() / 1000\n            };\n        };\n        self.touchCell = function (e) {\n            return function () {\n                clearInterval(self.touchCalcTimeout);\n                var pos = self.getTouchPos(e);\n                if (Math.abs(touchDelta.x) + Math.abs(touchDelta.y) < self.attributes.touchDeadZone) {\n                    touchingCell = self.getCellAt(pos.x, pos.y);\n                    self.mousemove(e, pos);\n                    self.mousedown(e, pos);\n                    self.mousemove(e, pos);\n                    self.draw();\n                }\n            };\n        };\n        self.touchstart = function (e) {\n            touchingCell = false;\n            self.touchStart = self.getTouchPos(e);\n            startingCell = self.getCellAt(self.touchStart.x, self.touchStart.y, true);\n            if (self.dispatchEvent('touchstart', {NativeEvent: e, cell: self.startingCell})) { return; }\n            self.stopPropagation(e);\n            e.preventDefault();\n            self.touchScrollStart = {\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: performance.now() / 1000\n            };\n            touchDelta = {\n                x: self.touchStart.x,\n                y: self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: 0\n            };\n            self.touchmove(e);\n            clearTimeout(self.touchTimeout);\n            clearInterval(self.touchCalcTimeout);\n            self.touchTimeout = setTimeout(self.touchCell(e), self.attributes.touchSelectTimeMs);\n            self.touchCalcTimeout = setInterval(self.calculatePPS, 20);\n            self.touchHaltAnimation = true;\n            document.body.addEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.addEventListener('touchend', self.touchend, false);\n            document.body.addEventListener('touchcancel', self.touchcancel, false);\n        };\n        self.easing = function (t, b, c, d) {\n            return c * (t / d) * (2 - t) + b;\n        };\n        self.touchEndAnimation = function () {\n            if (!self.canvas || !self.scrollBox.scrollTo) { return requestAnimationFrame(self.touchEndAnimation); }\n            var x,\n                y,\n                n = performance.now() / 1000,\n                d = (self.attributes.touchReleaseAnimationDurationMs / 1000),\n                t;\n            touchDelta.t = touchDelta.t || n + d;\n            t = n - touchDelta.t + 1;\n            if (t > 1 || self.touchHaltAnimation || (animationFrames > 1000)) {\n                animationFrames = 0;\n                self.touchHaltAnimation = false;\n                touchAnimateTo = {scrollLeft: -1, scrollTop: -1};\n                return;\n            }\n            animationFrames += 1;\n            x = self.easing(t, touchDelta.scrollLeft, -touchAnimateTo.scrollLeft, d);\n            y = self.easing(t, touchDelta.scrollTop, -touchAnimateTo.scrollTop, d);\n            self.scrollBox.scrollTo(x, y);\n            requestAnimationFrame(self.touchEndAnimation);\n        };\n        self.touchend = function (e) {\n            if (self.dispatchEvent('touchend', {NativeEvent: e})) { return; }\n            var dz = Math.abs(touchDelta.x) + Math.abs(touchDelta.y) < self.attributes.touchDeadZone,\n                pos = {\n                    x: self.touchStart.x + touchDelta.x,\n                    y: self.touchStart.y + touchDelta.y\n                },\n                cell = self.getCellAt(pos.x, pos.y);\n            if (!self.hasFocus) { return; }\n            if (touchingCell) {\n                self.mouseup(e, self.touchStart);\n            } else if (dz) {\n                if (cell.active) {\n                    self.beginEditAt(cell.columnIndex, cell.rowIndex);\n                } else {\n                    self.mousedown(e, self.touchStart);\n                    self.mouseup(e, self.touchStart);\n                    self.click(e, self.touchStart);\n                }\n            }\n            touchingCell = false;\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n            clearTimeout(self.touchTimeout);\n            clearInterval(self.touchCalcTimeout);\n            self.calculatePPS();\n            touchAnimateTo.scrollLeft = xPPS * self.attributes.touchReleaseAcceleration;\n            touchAnimateTo.scrollTop = yPPS * self.attributes.touchReleaseAcceleration;\n            self.touchHaltAnimation = false;\n            if (animationFrames === 0 && !/-scroll-/.test(startingCell.style) && !dz) {\n                self.touchEndAnimation();\n            }\n        };\n        self.touchmove = function (e) {\n            var d = self.getTouchPos(e);\n            if (self.dispatchEvent('touchmove', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (!self.hasFocus) { return; }\n            touchDelta = {\n                x: d.x - self.touchStart.x,\n                y: d.y - self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: 0\n            };\n            if (/vertical-scroll-/.test(startingCell.style)) {\n                self.scrollBox.scrollTop = self.scrollBox.scrollHeight * (d.y / self.height);\n            } else if (/horizontal-scroll-/.test(startingCell.style)) {\n                self.scrollBox.scrollLeft = self.scrollBox.scrollWidth * (d.x / self.width);\n            } else if (touchingCell) {\n                self.mousemove(e, d);\n                self.draw();\n            } else {\n                if (animationFrames === 0) {\n                    self.scrollBox.scrollTo(self.touchScrollStart.scrollLeft - touchDelta.x,\n                        self.touchScrollStart.scrollTop - touchDelta.y);\n                }\n            }\n        };\n        self.touchcancel = function (e) {\n            if (self.dispatchEvent('touchcancel', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) { return; }\n            self.touchend(e);\n            touchingCell = false;\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n            return;\n        };\n        self.stopPropagation = function (e) { e.stopPropagation(); };\n        self.addEventListener = function (ev, fn) {\n            self.events[ev] = self.events[ev] || [];\n            self.events[ev].unshift(fn);\n        };\n        self.removeEventListener = function (ev, fn) {\n            (self.events[ev] || []).forEach(function removeEachListener(sfn, idx) {\n                if (fn === sfn) {\n                    self.events[ev].splice(idx, 1);\n                }\n            });\n        };\n        self.dispatchEvent = function (ev, e) {\n            var defaultPrevented;\n            function preventDefault() {\n                defaultPrevented = true;\n            }\n            if (!self.events[ev]) { return; }\n            self.events[ev].forEach(function dispatchEachEvent(fn) {\n                e.ctx = self.ctx;\n                e.preventDefault = preventDefault;\n                fn.apply(self.intf, [e]);\n            });\n            return defaultPrevented;\n        };\n        self.resize = function (drawAfterResize) {\n            var cellBorder = self.style.cellBorderWidth * 2,\n                columnHeaderCellBorder =  self.style.columnHeaderCellBorderWidth * 2,\n                scrollHeight,\n                scrollWidth,\n                rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth(),\n                // TODO: What the hell are these numbers!?  They are probably some value in the style.\n                scrollDragPositionOffsetY = 30,\n                scrollDragPositionOffsetX = 15;\n            if (self.isChildGrid) {\n                self.height = self.parentNode.offsetHeight;\n                self.width = self.parentNode.offsetWidth;\n            } else {\n                if (!self.parentIsCanvas) {\n                    self.height = self.parentDOMNode.offsetHeight;\n                    self.width = self.parentDOMNode.offsetWidth;\n                    if (self.isComponent) {\n                        self.height = self.shadowRootParentElement.offsetHeight;\n                        self.width = self.shadowRootParentElement.offsetWidth;\n                    }\n                    self.canvas.height = self.height * window.devicePixelRatio;\n                    self.canvas.width = self.width * window.devicePixelRatio;\n                    self.canvas.style.height = self.height + 'px';\n                    self.canvas.style.width = self.width + 'px';\n                }\n                self.canvasOffsetTop = self.args.canvasOffsetTop || 0;\n                self.canvasOffsetLeft = self.args.canvasOffsetLeft || 0;\n            }\n            scrollHeight = self.data.reduce(function reduceData(accumulator, row) {\n                return accumulator\n                    + (self.sizes.rows[row[self.uniqueId]] || self.style.cellHeight)\n                    + (self.sizes.trees[row[self.uniqueId]] || 0)\n                    + cellBorder;\n            }, 0) || 0;\n            scrollWidth = self.getVisibleSchema().reduce(function reduceSchema(accumulator, column) {\n                if (column.hidden) { return accumulator; }\n                return accumulator + (self.sizes.columns[column[self.uniqueId]] || column.width || self.style.columnWidth) + cellBorder;\n            }, 0) || 0;\n            if (self.attributes.showNewRow) {\n                scrollHeight += self.style.cellHeight + cellBorder;\n            }\n            self.scrollBox.width = self.width - columnHeaderCellWidth;\n            self.scrollBox.height = self.height - rowHeaderCellHeight - columnHeaderCellBorder;\n            self.scrollBox.top = rowHeaderCellHeight + columnHeaderCellBorder;\n            self.scrollBox.left = columnHeaderCellWidth;\n            self.scrollBox.scrollHeight = scrollHeight + self.style.scrollBarWidth - self.scrollBox.height;\n            self.scrollBox.scrollWidth = scrollWidth + self.style.scrollBarWidth - self.scrollBox.width;\n            self.scrollBox.widthBoxRatio = ((self.scrollBox.width - scrollDragPositionOffsetX)\n                / (self.scrollBox.scrollWidth + self.scrollBox.width - scrollDragPositionOffsetX));\n            self.scrollBox.scrollBoxWidth = self.scrollBox.width\n                * self.scrollBox.widthBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.heightBoxRatio = ((self.scrollBox.height - scrollDragPositionOffsetY)\n                / (self.scrollBox.scrollHeight + (self.scrollBox.height - scrollDragPositionOffsetY)));\n            self.scrollBox.scrollBoxHeight = self.scrollBox.height\n                * self.scrollBox.heightBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.scrollBoxWidth = Math.max(self.scrollBox.scrollBoxWidth, self.style.scrollBarBoxMinSize);\n            self.scrollBox.scrollBoxHeight = Math.max(self.scrollBox.scrollBoxHeight, self.style.scrollBarBoxMinSize);\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            self.resizeEditInput();\n            self.scroll(true);\n            if (drawAfterResize) {\n                self.draw(true);\n            }\n            self.dispatchEvent('resize', {});\n            return true;\n        };\n        self.resizeEditInput = function () {\n            if (self.input) {\n                var pos = self.canvas.getBoundingClientRect(),\n                    s = self.scrollOffset(self.canvas),\n                    bx2 = (self.style.cellBorderWidth * 2),\n                    cell = self.getVisibleCellByIndex(self.input.editCell.columnIndex, self.input.editCell.rowIndex)\n                        || {x: -100, y: -100, height: 0, width: 0};\n                self.input.style.left = pos.left + cell.x - self.style.cellBorderWidth + self.canvasOffsetLeft - s.left + 'px';\n                self.input.style.top = pos.top + cell.y - bx2 + self.canvasOffsetTop - s.top + 'px';\n                self.input.style.height = cell.height - bx2 - 1 + 'px';\n                self.input.style.width = cell.width - bx2 - self.style.cellPaddingLeft + 'px';\n                self.clipElement(self.input);\n            }\n        };\n        self.scroll = function (e, dontDraw) {\n            var s = self.getVisibleSchema(),\n                cellBorder = self.style.cellBorderWidth * 2;\n            self.scrollIndexTop = 0;\n            self.scrollPixelTop = 0;\n            self.scrollIndexLeft = 0;\n            self.scrollPixelLeft = 0;\n            while (self.scrollPixelTop < self.scrollBox.scrollTop && self.scrollIndexTop < self.data.length) {\n                self.scrollPixelTop +=\n                    (self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || self.style.cellHeight)\n                    + (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0)\n                    + cellBorder;\n                self.scrollIndexTop += 1;\n            }\n            while (self.scrollPixelLeft < self.scrollBox.scrollLeft && self.scrollIndexLeft < s.length) {\n                self.scrollPixelLeft +=\n                    (self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width);\n                self.scrollIndexLeft += 1;\n            }\n            if (self.data.length > 0) {\n                self.scrollIndexLeft = Math.max(self.scrollIndexLeft - 1, 0);\n                self.scrollPixelLeft = Math.max(self.scrollPixelLeft\n                    - (self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width), 0);\n                self.scrollIndexTop = Math.max(self.scrollIndexTop - 1, 0);\n                self.scrollPixelTop = Math.max(self.scrollPixelTop\n                    - (self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || self.style.cellHeight)\n                    - (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0), 0);\n            }\n            self.ellipsisCache = {};\n            if (!dontDraw) {\n                self.draw(true);\n            }\n            //TODO: figure out why this has to be delayed for child grids\n            //BUG: scrolling event on 3rd level hierarchy fails to move input box\n            requestAnimationFrame(self.resizeEditInput);\n            self.dispatchEvent('scroll', {top: self.scrollBox.scrollTop, left: self.scrollBox.scrollLeft});\n        };\n        self.mousemove = function (e, overridePos) {\n            if (self.contextMenu || self.input) {\n                return;\n            }\n            self.mouse = overridePos || self.getLayerPos(e);\n            var ctrl = (e.controlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                i,\n                s = self.getSchema(),\n                dragBounds,\n                sBounds,\n                x = self.mouse.x,\n                y = self.mouse.y,\n                o = self.getCellAt(x, y),\n                delta,\n                ev = {NativeEvent: e, cell: o, x: x, y: y},\n                previousCell = self.currentCell;\n            clearTimeout(self.scrollTimer);\n            if (!self.isInGrid({x: x, y: y})) {\n                self.hasFocus = false;\n            }\n            if (self.dispatchEvent('mousemove', ev)) {\n                return;\n            }\n            if (o && self.currentCell && (self.currentCell.rowIndex !== o.rowIndex\n                    || self.currentCell.columnIndex !== o.columnIndex)) {\n                self.cellBoundaryCrossed = true;\n                ev.cell = previousCell;\n                self.dispatchEvent('cellmouseout', ev);\n                ev.cell = o;\n                self.dispatchEvent('cellmouseover', ev);\n            }\n            self.currentCell = o;\n            if (!self.hasFocus) {\n                return;\n            }\n            self.hovers = {};\n            if (!self.draggingItem\n                    && o\n                    && self.scrollModes.indexOf(o.context) === -1) {\n                self.dragItem = o;\n                self.dragMode = o.dragContext;\n                self.canvas.style.cursor = o.context;\n                if (o.context === 'cell' && o.data) {\n                    self.canvas.style.cursor = 'pointer';\n                    self.hovers[o.data[self.uniqueId]] = [o.columnIndex];\n                }\n                if ((self.selecting || self.reorderObject)\n                        && o.context === 'cell'\n                        && o.data) {\n                    sBounds = self.getSelectionBounds();\n                    delta = {\n                        x: Math.abs(self.dragStart.x - x),\n                        y: Math.abs(self.dragStart.y - y),\n                    };\n                    if (self.dragStartObject.columnIndex !== -1 && e.shiftKey) {\n                        self.dragStartObject = {\n                            rowIndex: self.activeCell.rowIndex,\n                            columnIndex: self.activeCell.columnIndex\n                        };\n                    }\n                    dragBounds = {\n                        top: Math.min(self.dragStartObject.rowIndex, o.rowIndex),\n                        left: Math.min(self.dragStartObject.columnIndex, o.columnIndex),\n                        bottom: Math.max(self.dragStartObject.rowIndex, o.rowIndex),\n                        right: Math.max(self.dragStartObject.columnIndex, o.columnIndex)\n                    };\n                    if (self.dragStartObject.columnIndex === -1) {\n                        dragBounds.left = -1;\n                        dragBounds.right = s.length - 1;\n                        dragBounds.top = Math.min(sBounds.top, o.rowIndex);\n                        dragBounds.bottom = Math.max(sBounds.bottom, o.rowIndex);\n                    }\n                    if (self.dragStartObject.rowIndex !== o.rowIndex\n                                || self.dragStartObject.columnIndex !== o.columnIndex) {\n                        self.ignoreNextClick = true;\n                    }\n                    if (self.cellBoundaryCrossed || (delta.x === 0 && delta.y === 0) || (self.attributes.selectionMode === 'row')) {\n                        if ((self.attributes.selectionMode === 'row') || self.dragStartObject.columnIndex === -1) {\n                            self.selectRow(o.rowIndex, ctrl, null, true);\n                        } else {\n                            if (!self.dragAddToSelection && o.rowIndex !== undefined) {\n                                if (self.selections[o.rowIndex] && self.selections[o.rowIndex].indexOf(o.columnIndex) !== -1) {\n                                    self.selections[o.rowIndex].splice(self.selections[o.rowIndex].indexOf(o.columnIndex), 1);\n                                }\n                            } else {\n                                self.selections[o.rowIndex] = self.selections[o.rowIndex] || [];\n                                if (self.selections[o.rowIndex].indexOf(o.columnIndex) === -1) {\n                                    self.selections[o.rowIndex].push(o.columnIndex);\n                                }\n                            }\n                        }\n                    }\n                    if ((!self.selectionBounds || (dragBounds.top !== self.selectionBounds.top\n                            || dragBounds.left !== self.selectionBounds.left\n                            || dragBounds.bottom !== self.selectionBounds.bottom\n                            || dragBounds.right !== self.selectionBounds.right)) && !ctrl) {\n                        self.selections = [];\n                        sBounds = dragBounds;\n                        if (self.attributes.selectionMode === 'row') {\n                            for (i = sBounds.top; i <= sBounds.bottom; i += 1) {\n                                self.selectRow(i, true, null, true);\n                            }\n                        } else {\n                            self.selectArea(sBounds, true);\n                        }\n                    }\n                    self.autoScrollZone(e, x, y, ctrl);\n                }\n            }\n            self.cellBoundaryCrossed = false;\n            self.draw(true);\n        };\n        self.click = function (e, overridePos) {\n            var i,\n                selectionChanged,\n                ctrl = (e.controlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                pos = overridePos || self.getLayerPos(e);\n            self.currentCell = self.getCellAt(pos.x, pos.y);\n            if (self.currentCell.grid !== undefined) {\n                return;\n            }\n            function checkSelectionChange() {\n                if (!selectionChanged) { return; }\n                self.dispatchEvent('selectionchanged', {\n                    selectedData: self.getSelectedData(),\n                    selections: self.selections,\n                    selectionBounds: self.selectionBounds\n                });\n            }\n            if (self.input) {\n                self.endEdit();\n            }\n            if (self.ignoreNextClick) {\n                self.ignoreNextClick = false;\n                return;\n            }\n            i = self.currentCell;\n            if (self.dispatchEvent('click', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'cell') {\n                if (self.currentCell.style === 'cornerCell') {\n                    self.order(self.uniqueId, 'asc', self.sorters.number);\n                    self.setFilter();\n                    checkSelectionChange();\n                    return;\n                }\n                if (self.currentCell.style === 'columnHeaderCell') {\n                    if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                        if (self.orderBy === i.header.name) {\n                            self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                        } else {\n                            self.orderDirection = 'asc';\n                        }\n                        self.order(i.header.name, self.orderDirection);\n                        checkSelectionChange();\n                        return;\n                    }\n                    if (self.attributes.columnHeaderClickBehavior === 'select') {\n                        self.selectColumn(i.header.index, ctrl, e.shiftKey, true);\n                        checkSelectionChange();\n                        self.draw();\n                        return;\n                    }\n                }\n                if (['rowHeaderCell', 'columnHeaderCell'].indexOf(self.currentCell.style) === -1 && !ctrl) {\n                    self.setActiveCell(i.columnIndex, i.rowIndex);\n                }\n                self.selections[i.rowIndex] = self.selections[i.rowIndex] || [];\n                if (((self.attributes.selectionMode === 'row') || self.currentCell.style === 'rowHeaderCell')) {\n                    if (self.currentCell.style === 'rowHeaderCell'\n                            && self.attributes.tree && pos.x > 0\n                            && pos.x - self.currentCell.x < self.style.treeArrowWidth\n                            + self.style.treeArrowMarginLeft\n                            + self.style.treeArrowMarginRight + self.style.treeArrowClickRadius\n                            && pos.y - self.currentCell.y < self.style.treeArrowHeight\n                            + self.style.treeArrowMarginTop + self.style.treeArrowClickRadius\n                            && pos.y > 0) {\n                        self.toggleTree(i.rowIndex);\n                        return;\n                    }\n                    selectionChanged = true;\n                    self.selectRow(i.rowIndex, ctrl, null, true);\n                }\n                if (e.shiftKey && !ctrl) {\n                    self.selectionBounds = self.getSelectionBounds();\n                    self.selectArea(undefined, false);\n                }\n            }\n            checkSelectionChange();\n            self.draw(true);\n        };\n        self.dragResizeColumn = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = self.resizingStartingWidth + pos.x - self.dragStart.x;\n            y = self.resizingStartingHeight + pos.y - self.dragStart.y;\n            if (x < self.style.minColumnWidth) {\n                x = self.style.minColumnWidth;\n            }\n            if (y < self.style.minRowHeight) {\n                y = self.style.minRowHeight;\n            }\n            if (self.dispatchEvent('resizecolumn', {x: x, y: y, draggingItem: self.draggingItem})) { return false; }\n            if (self.scrollBox.scrollLeft > self.scrollBox.scrollWidth - self.attributes.resizeScrollZone\n                    && self.dragMode === 'ew-resize') {\n                self.resize(true);\n                self.scrollBox.scrollLeft += x;\n            }\n            if (self.dragMode === 'ew-resize') {\n                self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] = x;\n                if (['rowHeaderCell', 'cornerCell'].indexOf(self.draggingItem.header.style) !== -1) {\n                    self.resize(true);\n                }\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.dragMode === 'ns-resize') {\n                if (self.draggingItem.rowOpen) {\n                    self.sizes.trees[self.draggingItem.data[self.uniqueId]] = y;\n                } else if (self.attributes.globalRowResize) {\n                    self.style.cellHeight = y;\n                } else {\n                    self.sizes.rows[self.draggingItem.data[self.uniqueId]] = y;\n                }\n                self.dispatchEvent('resizerow', {row: y});\n                self.resizeChildGrids();\n                return;\n            }\n            self.ellipsisCache = {};\n        };\n        self.stopDragResize = function () {\n            self.resize();\n            document.body.removeEventListener('mousemove', self.dragResizeColumn, false);\n            document.body.removeEventListener('mouseup', self.stopDragResize, false);\n            self.setStorageData();\n            self.draw(true);\n            self.ignoreNextClick = true;\n        };\n        self.scrollGrid = function (e) {\n            var pos = self.getLayerPos(e);\n            if (self.attributes.scrollPointerLock && self.pointerLockPosition\n                    && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                self.pointerLockPosition.x += e.movementX;\n                self.pointerLockPosition.y += e.movementY;\n                self.pointerLockPosition.x = Math.min(self.width - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.x));\n                self.pointerLockPosition.y = Math.min(self.height - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.y));\n                pos = self.pointerLockPosition;\n            }\n            self.scrollMode = self.getCellAt(pos.x, pos.y).context;\n            if (self.scrollMode === 'horizontal-scroll-box' && self.scrollStartMode !== 'horizontal-scroll-box') {\n                self.scrollStartMode = 'horizontal-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.left = self.scrollBox.scrollLeft;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box' && self.scrollStartMode !== 'vertical-scroll-box') {\n                self.scrollStartMode = 'vertical-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.top = self.scrollBox.scrollTop;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollStartMode === 'vertical-scroll-box'\n                    && self.scrollMode !== 'vertical-scroll-box') {\n                self.scrollMode = 'vertical-scroll-box';\n            }\n            if (self.scrollStartMode === 'horizontal-scroll-box'\n                    && self.scrollMode !== 'horizontal-scroll-box') {\n                self.scrollMode = 'horizontal-scroll-box';\n            }\n            clearTimeout(self.scrollTimer);\n            if (self.scrollModes.indexOf(self.scrollMode) === -1) {\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box') {\n                self.scrollBox.scrollTop = self.scrollStart.top + ((pos.y - self.dragStart.y)\n                    / self.scrollBox.heightBoxRatio);\n            } else if (self.scrollMode === 'vertical-scroll-top') {\n                self.scrollBox.scrollTop -= (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'vertical-scroll-bottom') {\n                self.scrollBox.scrollTop += (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n            if (self.scrollMode === 'horizontal-scroll-box') {\n                self.scrollBox.scrollLeft = self.scrollStart.left + ((pos.x - self.dragStart.x)\n                    / self.scrollBox.widthBoxRatio);\n            } else if (self.scrollMode === 'horizontal-scroll-right') {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'horizontal-scroll-left') {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.stopScrollGrid = function () {\n            clearTimeout(self.scrollTimer);\n            if (document.exitPointerLock) {\n                document.exitPointerLock();\n            }\n            document.body.removeEventListener('mousemove', self.scrollGrid, false);\n        };\n        self.dragReorder = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = pos.x - self.dragStart.x;\n            y = pos.y - self.dragStart.y;\n            if (!self.attributes.allowColumnReordering && self.dragMode === 'column-reorder') {\n                return;\n            }\n            if (!self.attributes.allowRowReordering && self.dragMode === 'row-reorder') {\n                return;\n            }\n            if (self.dispatchEvent('reordering', {\n                    NativeEvent: e,\n                    source: self.dragStartObject,\n                    target: self.currentCell,\n                    dragMode: self.dragMode\n                })) {\n                return;\n            }\n            if (Math.abs(x) > self.attributes.reorderDeadZone || Math.abs(y) > self.attributes.reorderDeadZone) {\n                self.reorderObject = self.dragStartObject;\n                self.reorderTarget = self.currentCell;\n                self.reorderObject.dragOffset = {\n                    x: x,\n                    y: y\n                };\n                self.autoScrollZone(e, pos.x, pos.x, false);\n            }\n        };\n        self.stopDragReorder = function (e) {\n            var cr = {\n                    'row-reorder': self.orders.rows,\n                    'column-reorder': self.orders.columns\n                },\n                i = {\n                    'row-reorder': 'rowIndex',\n                    'column-reorder': 'columnIndex'\n                }[self.dragMode];\n            document.body.removeEventListener('mousemove', self.dragReorder, false);\n            document.body.removeEventListener('mouseup', self.stopDragReorder, false);\n            if (self.reorderObject\n                    && self.reorderTarget) {\n                self.ignoreNextClick = true;\n                if (self.reorderObject[i] !== self.reorderTarget[i]\n                        && !self.dispatchEvent('reorder', {\n                            NativeEvent: e,\n                            source: self.reorderObject,\n                            target: self.reorderTarget,\n                            dragMode: self.dragMode\n                        })) {\n                    cr[self.dragMode].splice(cr[self.dragMode].indexOf(self.reorderObject[i]), 1);\n                    cr[self.dragMode].splice(cr[self.dragMode].indexOf(self.reorderTarget[i]), 0, self.reorderObject[i]);\n                    self.setStorageData();\n                }\n            }\n            self.reorderObject = undefined;\n            self.reorderTarget = undefined;\n            self.draw(true);\n        };\n        self.mousedown = function (e, overridePos) {\n            self.lastMouseDownTarget = e.target;\n            if (self.dispatchEvent('mousedown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (e.button === 2 || self.input) { return; }\n            var ctrl = (e.controlKey || e.metaKey);\n            self.dragStart = overridePos || self.getLayerPos(e);\n            self.scrollStart = {\n                left: self.scrollBox.scrollLeft,\n                top: self.scrollBox.scrollTop\n            };\n            self.dragStartObject = self.getCellAt(self.dragStart.x, self.dragStart.y);\n            self.dragAddToSelection = !self.dragStartObject.selected;\n            if (!ctrl && !e.shiftKey && !/(vertical|horizontal)-scroll-(bar|box)/\n                    .test(self.dragStartObject.context) && !self.currentCell.isColumnHeader) {\n                self.selections = [];\n            }\n            if (self.dragStartObject.isGrid) {\n                return;\n            }\n            if (self.scrollModes.indexOf(self.dragStartObject.context) !== -1) {\n                self.scrollMode = self.dragStartObject.context;\n                self.scrollStartMode = self.dragStartObject.context;\n                self.scrollGrid(e);\n                if (self.attributes.scrollPointerLock\n                        && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                    self.pointerLockPosition = {\n                        x: self.dragStart.x,\n                        y: self.dragStart.y\n                    };\n                    self.canvas.requestPointerLock();\n                }\n                document.body.addEventListener('mousemove', self.scrollGrid, false);\n                document.body.addEventListener('mouseup', self.stopScrollGrid, false);\n                self.ignoreNextClick = true;\n                return;\n            }\n            if (self.dragMode === 'cell') {\n                self.selecting = true;\n                if (self.attributes.selectionMode === 'row') {\n                    self.selectRow(self.dragStartObject.rowIndex, ctrl, null, true);\n                }\n                return self.mousemove(e);\n            }\n            if (['ns-resize', 'ew-resize'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragItem;\n                if (self.draggingItem.rowOpen) {\n                    self.resizingStartingHeight = self.sizes.trees[self.draggingItem.data[self.uniqueId]];\n                } else {\n                    self.resizingStartingHeight = self.sizes.rows[self.draggingItem.data[self.uniqueId]] || self.style.cellHeight;\n                }\n                self.resizingStartingWidth = self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] || self.draggingItem.width;\n                document.body.addEventListener('mousemove', self.dragResizeColumn, false);\n                document.body.addEventListener('mouseup', self.stopDragResize, false);\n            }\n            if (['row-reorder', 'column-reorder'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragItem;\n                document.body.addEventListener('mousemove', self.dragReorder, false);\n                document.body.addEventListener('mouseup', self.stopDragReorder, false);\n            }\n        };\n        self.mouseup = function (e) {\n            clearTimeout(self.scrollTimer);\n            self.cellBoundaryCrossed = true;\n            self.selecting = undefined;\n            self.draggingItem = undefined;\n            self.dragStartObject = undefined;\n            if (self.dispatchEvent('mouseup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            if (self.currentCell && self.currentCell.grid !== undefined) {\n                return;\n            }\n            if (self.contextMenu || self.input) { return; }\n            if (self.dragStart && self.isInGrid(self.dragStart)) {\n                self.controlInput.focus();\n            }\n            e.preventDefault();\n        };\n        self.keydown = function (e) {\n            var i,\n                x = self.activeCell.columnIndex,\n                y = self.activeCell.rowIndex,\n                ctrl = (e.controlKey || e.metaKey),\n                last = self.data.length - 1,\n                cols = self.getVisibleSchema().length - 1;\n            if (self.dispatchEvent('keydown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            if (self.attributes.showNewRow) {\n                last += 1;\n            }\n            if (e.keyCode === 9) {\n                e.preventDefault();\n            }\n            // esc\n            if (e.keyCode === 27) {\n                self.selections = [];\n                self.draw(true);\n            // ctrl + a\n            } else if (ctrl && e.keyCode === 65) {\n                self.selectAll();\n            //ArrowDown\n            } else if (e.keyCode === 40) {\n                y += 1;\n            //ArrowUp\n            } else if (e.keyCode === 38) {\n                y -= 1;\n            //ArrowLeft Tab\n            } else if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {\n                x -= 1;\n            //ArrowRight Tab\n            } else if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {\n                x += 1;\n            //PageUp\n            } else if (e.keyCode === 33) {\n                y -= self.page;\n                e.preventDefault();\n            //PageDown\n            } else if (e.keyCode === 34) {\n                y += self.page;\n                e.preventDefault();\n            //Home ArrowUp\n            } else if (e.keyCode === 36 || (ctrl && e.keyCode === 38)) {\n                y = 0;\n            //End ArrowDown\n            } else if (e.keyCode === 35 || (ctrl && e.keyCode === 40)) {\n                y = self.data.length - 1;\n            //ArrowRight\n            } else if (ctrl && e.keyCode === 39) {\n                x = cols;\n            //ArrowLeft\n            } else if (ctrl && e.keyCode === 37) {\n                x = 0;\n            }\n            //Enter\n            if (e.keyCode === 13) {\n                return self.beginEditAt(x, y);\n            }\n            //Space\n            if (e.keyCode === 32) {\n                self.selections = [];\n                self.selections[Math.max(y, 0)] = [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                if (self.attributes.selectionMode === 'row') {\n                    for (i = self.selectionBounds.top; i <= self.selectionBounds.bottom; i += 1) {\n                        self.selectRow(i, ctrl, null, true);\n                    }\n                } else {\n                    self.selectArea(undefined, ctrl);\n                }\n                e.preventDefault();\n                self.draw(true);\n                return;\n            }\n            if (x < 0) {\n                x = 0;\n            }\n            if (y > last) {\n                y = last;\n            }\n            if (y < 0) {\n                y = 0;\n            }\n            if (x > cols) {\n                x = cols;\n            }\n            // Arrows\n            if (e.shiftKey && [37, 38, 39, 40].indexOf(e.keyCode) !== -1) {\n                self.selections[Math.max(y, 0)] = self.selections[Math.max(y, 0)] || [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                self.selectArea(undefined, ctrl);\n                self.draw(true);\n            }\n            if (x !== self.activeCell.columnIndex || y !== self.activeCell.rowIndex) {\n                self.scrollIntoView(x !== self.activeCell.columnIndex ? x : undefined, y !== self.activeCell.rowIndex ? y : undefined);\n                self.setActiveCell(x, y);\n                if (!e.shiftKey && self.attributes.selectionFollowsActiveCell) {\n                    if (!ctrl) {\n                        self.selections = [];\n                    }\n                    self.selections[y] = self.selections[y] || [];\n                    self.selections[y].push(x);\n                    self.dispatchEvent('selectionchanged', {\n                        selectedData: self.getSelectedData(),\n                        selections: self.selections,\n                        selectionBounds: self.selectionBounds\n                    });\n                }\n                self.draw(true);\n            }\n        };\n        self.keyup = function (e) {\n            if (self.dispatchEvent('keyup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            self.controlInput.value = '';\n        };\n        self.keypress = function (e) {\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.dispatchEvent('keypress', {NativeEvent: e, cell: self.currentCell})) { return; }\n        };\n        self.dblclick = function (e) {\n            if (self.dispatchEvent('dblclick', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'columnHeaderCell') {\n                self.fitColumnToValues(self.currentCell.header.name);\n            } else if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'cornerCell') {\n                self.autosize();\n            } else if (['cell', 'activeCell'].indexOf(self.currentCell.style) !== -1) {\n                self.beginEditAt(self.currentCell.columnIndex, self.currentCell.rowIndex);\n            }\n        };\n        self.scrollWheel = function (e) {\n            var l,\n                t,\n                deltaX = e.deltaX === undefined ? e.NativeEvent.deltaX : e.deltaX,\n                deltaY = e.deltaY === undefined ? e.NativeEvent.deltaY : e.deltaY,\n                deltaMode = e.deltaMode === undefined ? e.NativeEvent.deltaMode : e.deltaMode;\n            if (self.dispatchEvent('wheel', {NativeEvent: e})) {\n                return;\n            }\n            e = e.NativeEvent || e;\n            self.touchHaltAnimation = true;\n            l = self.scrollBox.scrollLeft;\n            t = self.scrollBox.scrollTop;\n            if (self.hasFocus) {\n                //BUG Issue 42: https://github.com/TonyGermaneri/canvas-datagrid/issues/42\n                //https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\n                if (deltaMode === 1) {\n                    // line mode = 17 pixels per line\n                    deltaY = deltaY * 17;\n                }\n                self.scrollBox.scrollTop += deltaY;\n                self.scrollBox.scrollLeft += deltaX;\n            }\n            if (t !== self.scrollBox.scrollTop || l !== self.scrollBox.scrollLeft) {\n                e.preventDefault();\n            }\n        };\n        self.copy = function (e) {\n            if (self.dispatchEvent('copy', {NativeEvent: e})) { return; }\n            if (!self.hasFocus || !e.clipboardData) { return; }\n            var rows = [], sData = self.getSelectedData();\n            if (sData.length > 0) {\n                sData.forEach(function (row) {\n                    if (row) {\n                        var r = [];\n                        Object.keys(row).forEach(function (key) {\n                            if (row[key] !== null\n                                    && row[key] !== false\n                                    && row[key] !== undefined\n                                    && row[key].replace) {\n                                return r.push('\"' + row[key].replace(/\"/g, '\"\"') + '\"');\n                            }\n                            r.push(row[key]);\n                        });\n                        r.join(',');\n                        rows.push(r);\n                    }\n                });\n                e.clipboardData.setData('text/plain', rows.join('\\n'));\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals HTMLElement: false, Reflect: false, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self, ctor) {\n        self.orders = {\n            rows: [],\n            columns: []\n        };\n        self.hasFocus = false;\n        self.activeCell = {\n            columnIndex: 0,\n            rowIndex: 0\n        };\n        self.storageName = 'canvasDataGrid';\n        self.invalidSearchExpClass = 'canvas-datagrid-invalid-search-regExp';\n        self.localStyleLibraryStorageKey = 'canvas-datagrid-user-style-library';\n        self.uniqueId = '_canvasDataGridUniqueId';\n        self.orderBy = self.uniqueId;\n        self.orderDirection = 'asc';\n        self.columnFilters = {};\n        self.filters = {};\n        self.ellipsisCache = {};\n        self.scrollBox = {};\n        self.visibleRows = [];\n        /**\n         * Used internally to keep track of sizes of row, columns and child grids.\n         * @memberof canvasDataGrid\n         * @property sizes\n         * @readonly\n         */\n        self.sizes = {\n            rows: {},\n            columns: {},\n            trees: {}\n        };\n        self.currentFilter = function () {\n            return true;\n        };\n        self.selections = [];\n        self.hovers = {};\n        self.attributes = {};\n        self.style = {};\n        self.formatters = {};\n        self.sorters = {};\n        self.schemaHashes = {};\n        self.events = {};\n        self.uId = 0;\n        self.changes = [];\n        self.scrollIndexTop = 0;\n        self.scrollPixelTop = 0;\n        self.scrollIndexLeft = 0;\n        self.scrollPixelLeft = 0;\n        self.childGrids = {};\n        self.openChildren = {};\n        self.scrollModes = [\n            'vertical-scroll-box',\n            'vertical-scroll-top',\n            'vertical-scroll-bottom',\n            'horizontal-scroll-box',\n            'horizontal-scroll-right',\n            'horizontal-scroll-left'\n        ];\n        self.mouse = { x: 0, y: 0};\n        self.getSelectedData = function (expandToRow) {\n            var d = [], s = self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                if (expandToRow) {\n                    s.forEach(function (column) {\n                        d[index][column.name] = self.data[index][column.name];\n                    });\n                } else {\n                    row.forEach(function (col) {\n                        if (col === -1 || !s[col]) { return; }\n                        d[index][s[col].name] = self.data[index][s[col].name];\n                    });\n                }\n            });\n            return d;\n        };\n        self.scrollOffset = function (e) {\n            var x = 0, y = 0;\n            while (e.parentNode) {\n                if (e.nodeType !== 'canvas-datagrid-tree'\n                        && e.nodeType !== 'canvas-datagrid-cell') {\n                    x -= e.scrollLeft;\n                    y -= e.scrollTop;\n                }\n                e = e.parentNode;\n            }\n            return {left: x, top: y};\n        };\n        self.position = function (e, ignoreScrollOffset) {\n            var x = 0, y = 0, s = e, h, w;\n            while (e.offsetParent) {\n                x += e.offsetLeft;\n                y += e.offsetTop;\n                h = e.offsetHeight;\n                w = e.offsetWidth;\n                e = e.offsetParent;\n            }\n            if (ignoreScrollOffset) {\n                return {left: x, top: y, height: h, width: w};\n            }\n            e = s;\n            s = self.scrollOffset(e);\n            return { left: x + s.left, top: y + s.top, height: h, width: w };\n        };\n        self.getLayerPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.clientX - rect.left,\n                    y: e.clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        self.fillArray = function (low, high, step) {\n            step = step || 1;\n            var i = [], x;\n            for (x = low; x <= high; x += step) {\n                i[x] = x;\n            }\n            return i;\n        };\n        self.getRowHeaderCellHeight = function () {\n            if (!self.attributes.showColumnHeaders) { return 0; }\n            return self.sizes.rows[-1] || self.style.columnHeaderCellHeight;\n        };\n        self.getColumnHeaderCellWidth = function () {\n            if (!self.attributes.showRowHeaders) { return 0; }\n            return self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth;\n        };\n        self.setStorageData = function () {\n            if (!self.attributes.saveAppearance) { return; }\n            localStorage.setItem(self.storageName + '-' + self.attributes.name, JSON.stringify({\n                sizes: {\n                    rows: self.sizes.rows,\n                    columns: self.sizes.columns\n                },\n                orders: {\n                    rows: self.orders.rows,\n                    columns: self.orders.columns\n                },\n                orderBy: self.orderBy,\n                orderDirection: self.orderDirection\n            }));\n        };\n        self.getSchema = function () {\n            return self.schema || self.tempSchema;\n        };\n        self.createColumnOrders = function () {\n            var s = self.getSchema();\n            self.orders.columns = self.fillArray(0, s.length - 1);\n        };\n        self.createRowOrders = function () {\n            self.orders.rows = self.fillArray(0, self.data.length - 1);\n        };\n        self.getVisibleSchema = function () {\n            return self.getSchema().filter(function (col) { return !col.hidden; });\n        };\n        self.applyDefaultValue = function (row, header) {\n            var d = header.defaultValue || '';\n            if (typeof d === 'function') {\n                d = d.apply(self.intf, [header]);\n            }\n            row[header.name] = d;\n        };\n        self.createNewRowData = function () {\n            self.newRow = {};\n            self.newRow[self.uniqueId] = self.uId;\n            self.uId += 1;\n            self.getSchema().forEach(function forEachHeader(header) {\n                self.applyDefaultValue(self.newRow, header);\n            });\n        };\n        self.getSchemaNameHash = function (key) {\n            var n = 0;\n            while (self.schemaHashes[key]) {\n                n += 1;\n                key = key + n;\n            }\n            return key;\n        };\n        self.filter = function (type) {\n            var f = self.filters[type];\n            if (!f && type !== undefined) {\n                console.warn('Cannot find filter for type %s, falling back to substring match.', type);\n                f = self.filters.string;\n            }\n            return f;\n        };\n        self.getBestGuessDataType = function (columnName) {\n            var t, x, l = self.data.length;\n            for (x = 0; x < l; x += 1) {\n                if ([null, undefined].indexOf(self.data[x][columnName]) !== -1) {\n                    t = typeof self.data[x];\n                    return t === 'object' ? 'string' : t;\n                }\n            }\n            return 'string';\n        };\n        self.drawChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].draw();\n            });\n        };\n        self.resizeChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].resize();\n            });\n        };\n        self.getClippingRect = function (ele) {\n            var boundingRect = self.position(self.parentNode),\n                eleRect = self.position(ele),\n                s = self.scrollOffset(self.canvas),\n                clipRect = {\n                    x: 0,\n                    y: 0,\n                    h: 0,\n                    w: 0\n                },\n                parentRect = {\n                    x: -Infinity,\n                    y: -Infinity,\n                    h: Infinity,\n                    w: Infinity\n                },\n                rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth();\n            boundingRect.top -= s.top;\n            boundingRect.left -= s.left;\n            eleRect.top -= s.top;\n            eleRect.left -= s.left;\n            clipRect.h = boundingRect.top + boundingRect.height - ele.offsetTop - self.style.scrollBarWidth;\n            clipRect.w = boundingRect.left + boundingRect.width - ele.offsetLeft - self.style.scrollBarWidth;\n            clipRect.x = boundingRect.left + (eleRect.left * -1) + columnHeaderCellWidth;\n            clipRect.y = boundingRect.top + (eleRect.top * -1) + rowHeaderCellHeight;\n            return {\n                x: clipRect.x > parentRect.x ? clipRect.x : parentRect.x,\n                y: clipRect.y > parentRect.y ? clipRect.y : parentRect.y,\n                h: clipRect.h < parentRect.h ? clipRect.h : parentRect.h,\n                w: clipRect.w < parentRect.w ? clipRect.w : parentRect.w\n            };\n        };\n        self.clipElement = function (ele) {\n            var clipRect = self.getClippingRect(ele);\n            if (clipRect.w < 0) { clipRect.w = 0; }\n            if (clipRect.h < 0) { clipRect.h = 0; }\n            ele.style.clip = 'rect('\n                + clipRect.y + 'px,'\n                + clipRect.w + 'px,'\n                + clipRect.h + 'px,'\n                + clipRect.x + 'px'\n                + ')';\n            // INFO https://developer.mozilla.org/en-US/docs/Web/CSS/clip\n            // clip has been \"deprecated\" for clipPath.  Of course nothing but chrome\n            // supports clip path, so we'll keep using clip until someday clipPath becomes\n            // more widely support.  The code below works correctly, but setting clipPath and clip\n            // at the same time has undesirable results.\n            // ele.style.clipPath = 'polygon('\n            //     + clipRect.x + 'px ' + clipRect.y + 'px,'\n            //     + clipRect.x + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.y + 'px'\n            //     + ')';\n        };\n        self.autoScrollZone = function (e, x, y, ctrl) {\n            var setTimer,\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth(),\n                rowHeaderCellHeight = self.getRowHeaderCellHeight();\n            if (x > self.width - self.attributes.selectionScrollZone && x < self.width) {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y > self.height - self.attributes.selectionScrollZone && y < self.height) {\n                self.scrollBox.scrollTop += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (x - self.attributes.selectionScrollZone - columnHeaderCellWidth < 0) {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y - self.attributes.selectionScrollZone - rowHeaderCellHeight < 0) {\n                self.scrollBox.scrollTop -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (setTimer && !ctrl && self.currentCell && self.currentCell.columnIndex !== -1) {\n                self.scrollTimer = setTimeout(self.mousemove, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.refreshFromOrigialData = function () {\n            self.data = self.originalData.filter(function (row) {\n                return true;\n            });\n        };\n        self.validateColumn = function (c, s) {\n            if (!c.name) {\n                throw new Error('A column must contain at least a name.');\n            }\n            if (s.filter(function (i) { return i.name === c.name; }).length > 0) {\n                throw new Error('A column with the name '\n                    + c.name + ' already exists and cannot be added again.');\n            }\n            return true;\n        };\n        self.setDefaults = function (obj1, obj2, key, def) {\n            obj1[key] = obj2[key] === undefined ? def : obj2[key];\n        };\n        self.setAttributes = function () {\n            self.defaults.attributes.forEach(function eachAttribute(i) {\n                self.setDefaults(self.attributes, self.args, i[0], i[1]);\n            });\n        };\n        self.setStyle = function () {\n            self.defaults.styles.forEach(function eachStyle(i) {\n                self.setDefaults(self.style, self.args.style || {}, i[0], i[1]);\n            });\n        };\n        self.autosize = function (colName) {\n            self.getVisibleSchema().forEach(function (col) {\n                if (col.name === colName || colName === undefined) {\n                    self.fitColumnToValues(col.name);\n                }\n            });\n            self.fitColumnToValues('cornerCell');\n        };\n        self.dispose = function () {\n            if (!self.isChildGrid && self.canvas && self.canvas.parentNode) {\n                self.canvas.parentNode.removeChild(self.canvas);\n            }\n            self.eventParent.removeEventListener('mouseup', self.mouseup, false);\n            self.eventParent.removeEventListener('mousedown', self.mousedown, false);\n            self.eventParent.removeEventListener('dblclick', self.dblclick, false);\n            self.eventParent.removeEventListener('click', self.click, false);\n            self.eventParent.removeEventListener('mousemove', self.mousemove);\n            self.eventParent.removeEventListener('wheel', self.scrollWheel, false);\n            self.canvas.removeEventListener('contextmenu', self.contextmenu, false);\n            self.canvas.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('keypress', self.keypress, false);\n            self.controlInput.removeEventListener('keyup', self.keyup, false);\n            self.controlInput.removeEventListener('keydown', self.keydown, false);\n            window.removeEventListener('resize', self.resize);\n            if (self.observer && self.observer.disconnect) {\n                self.observer.disconnect();\n            }\n        };\n        self.tryLoadStoredOrders = function () {\n            var s;\n            if (self.storedSettings && typeof self.storedSettings.orders === 'object') {\n                if (self.storedSettings.orders.rows.length >= self.data.length) {\n                    self.orders.rows = self.storedSettings.orders.rows;\n                }\n                s = self.getSchema();\n                if (self.storedSettings.orders.columns.length === s.length) {\n                    self.orders.columns = self.storedSettings.orders.columns;\n                }\n                self.orderBy = self.storedSettings.orderBy === undefined\n                    ? self.uniqueId : self.storedSettings.orderBy;\n                self.orderDirection = self.storedSettings.orderDirection === undefined\n                    ? self.uniqueId : self.storedSettings.orderDirection;\n                if (self.getHeaderByName(self.orderBy) && self.orderDirection) {\n                    self.order(self.orderBy, self.orderDirection);\n                }\n            }\n        };\n        self.getFontHeight = function (fontStyle) {\n            return parseFloat(fontStyle, 10);\n        };\n        self.parseFont = function (key) {\n            if (/Font/.test(key)) {\n                self.style[key + 'Height'] = self.getFontHeight(self.style[key]);\n            }\n        };\n        self.initProp = function (propName) {\n            if (!self.args[propName]) { return; }\n            Object.keys(self.args[propName]).forEach(function (key) {\n                self[propName][key] = self.args[propName][key];\n            });\n        };\n        self.init = function () {\n            var publicStyleKeyIntf = {};\n            self.setAttributes();\n            self.setStyle();\n            self.initScrollBox();\n            self.setDom();\n            self.shadowRootParentElement = this.shadowRootParentElement;\n            self.type = 'canvas-datagrid';\n            Object.keys(self.style).forEach(self.parseFont);\n            self.intf.type = self.type;\n            self.intf.addEventListener = self.addEventListener;\n            self.intf.removeEventListener = self.removeEventListener;\n            self.intf.dispatchEvent = self.dispatchEvent;\n            self.intf.dispose = self.dispose;\n            self.intf.appendTo = self.appendTo;\n            self.intf.filters = self.filters;\n            self.intf.sorters = self.sorters;\n            self.intf.autosize = self.autosize;\n            self.intf.beginEditAt = self.beginEditAt;\n            self.intf.endEdit = self.endEdit;\n            self.intf.setActiveCell = self.setActiveCell;\n            self.intf.scrollIntoView = self.scrollIntoView;\n            self.intf.clearChangeLog = self.clearChangeLog;\n            self.intf.gotoCell = self.gotoCell;\n            self.intf.gotoRow = self.gotoRow;\n            self.intf.findColumnScrollLeft = self.findColumnScrollLeft;\n            self.intf.findRowScrollTop = self.findRowScrollTop;\n            self.intf.fitColumnToValues = self.fitColumnToValues;\n            self.intf.findColumnMaxTextLength = self.findColumnMaxTextLength;\n            self.intf.disposeContextMenu = self.disposeContextMenu;\n            self.intf.getCellAt = self.getCellAt;\n            self.intf.isCellVisible = self.isCellVisible;\n            self.intf.order = self.order;\n            self.intf.draw = self.draw;\n            self.intf.selectArea = self.selectArea;\n            self.intf.clipElement = self.clipElement;\n            self.intf.getSchemaFromData = self.getSchemaFromData;\n            self.intf.setFilter = self.setFilter;\n            self.intf.selectRow = self.selectRow;\n            self.intf.parentGrid = self.parentGrid;\n            self.intf.toggleTree = self.toggleTree;\n            self.intf.expandTree = self.expandTree;\n            self.intf.collapseTree = self.collapseTree;\n            self.intf.canvas = self.canvas;\n            self.intf.context = self.ctx;\n            self.intf.insertRow = self.insertRow;\n            self.intf.deleteRow = self.deleteRow;\n            self.intf.addRow = self.addRow;\n            self.intf.insertColumn = self.insertColumn;\n            self.intf.deleteColumn = self.deleteColumn;\n            self.intf.addColumn = self.addColumn;\n            self.intf.getClippingRect = self.getClippingRect;\n            self.intf.setRowHeight = self.setRowHeight;\n            self.intf.setColumnWidth = self.setColumnWidth;\n            self.intf.resetColumnWidths = self.resetColumnWidths;\n            self.intf.resetRowHeights = self.resetRowHeights;\n            self.intf.resize = self.resize;\n            self.intf.selectColumn = self.selectColumn;\n            self.intf.selectRow = self.selectRow;\n            self.intf.selectAll = self.selectAll;\n            self.intf.drawChildGrids = self.drawChildGrids;\n            self.intf.assertPxColor = self.assertPxColor;\n            self.intf.clearPxColorAssertions = self.clearPxColorAssertions;\n            self.intf.integerToAlpha = self.integerToAlpha;\n            self.intf.copy = self.copy;\n            Object.keys(self.style).forEach(function (key) {\n                // unless this line is here, Object.keys() will not work on <instance>.style\n                publicStyleKeyIntf[key] = undefined;\n                Object.defineProperty(publicStyleKeyIntf, key, {\n                    get: function () {\n                        return self.style[key];\n                    },\n                    set: function (value) {\n                        self.parseFont(value);\n                        self.style[key] = value;\n                        self.draw(true);\n                        self.dispatchEvent('stylechanged', {name: key, value: value});\n                    }\n                });\n            });\n            Object.defineProperty(self.intf, 'activeCell', {\n                get: function () {\n                    return self.activeCell;\n                }\n            });\n            /**\n             * When true, the grid is has focus.\n             * @memberof canvasDataGrid\n             * @property hasFocus\n             * @readonly\n             */\n            Object.defineProperty(self.intf, 'hasFocus', {\n                get: function () {\n                    return self.hasFocus;\n                }\n            });\n            Object.defineProperty(self.intf, 'style', {\n                get: function () {\n                    return publicStyleKeyIntf;\n                },\n                set: function (value) {\n                    Object.keys(value).forEach(function (key) {\n                        self.parseFont(value);\n                        self.style[key] = value[key];\n                    });\n                    self.draw(true);\n                    self.dispatchEvent('stylechanged', {name: 'style', value: value});\n                }\n            });\n            Object.defineProperty(self.intf, 'attributes', { value: {}});\n            Object.keys(self.attributes).forEach(function (key) {\n                Object.defineProperty(self.intf.attributes, key, {\n                    get: function () {\n                        return self.attributes[key];\n                    },\n                    set: function (value) {\n                        self.attributes[key] = value;\n                        self.draw(true);\n                        self.dispatchEvent('attributechanged', {name: key, value: value[key]});\n                    }\n                });\n            });\n            self.filters.string = function (value, filterFor) {\n                var filterRegExp,\n                    regEnd = /\\/(i|g|m)*$/,\n                    pattern = regEnd.exec(filterFor),\n                    flags = pattern ? pattern[0].substring(1) : '',\n                    flagLength = flags.length;\n                self.invalidFilterRegEx = undefined;\n                if (filterFor.substring(0, 1) === '/' && pattern) {\n                    try {\n                        filterRegExp = new RegExp(filterFor.substring(1, filterFor.length - (flagLength + 1)), flags);\n                    } catch (e) {\n                        self.invalidFilterRegEx = e;\n                        return;\n                    }\n                    return filterRegExp.test(value);\n                }\n                return value.toString ? value.toString().toLocaleUpperCase()\n                    .indexOf(filterFor.toLocaleUpperCase()) !== -1 : false;\n            };\n            self.filters.number = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                return value === filterFor;\n            };\n            if (self.attributes.name && self.attributes.saveAppearance) {\n                self.storedSettings = localStorage.getItem(self.storageName + '-' + self.attributes.name);\n                if (self.storedSettings) {\n                    try {\n                        self.storedSettings = JSON.parse(self.storedSettings);\n                    } catch (e) {\n                        console.warn('could not read settings from localStore', e);\n                        self.storedSettings = undefined;\n                    }\n                }\n                if (self.storedSettings) {\n                    if (typeof self.storedSettings.sizes === 'object') {\n                        self.sizes.rows = self.storedSettings.sizes.rows;\n                        self.sizes.columns = self.storedSettings.sizes.columns;\n                        ['trees', 'columns', 'rows'].forEach(function (i) {\n                            if (!self.sizes[i]) {\n                                self.sizes[i] = {};\n                            }\n                        });\n                    }\n                }\n            }\n            ['formatters', 'filters', 'sorters'].forEach(self.initProp);\n            if (self.args.data) {\n                self.intf.data = self.args.data;\n            }\n            if (!self.data) {\n                self.intf.data = [];\n            }\n            if (self.args.schema) {\n                self.intf.schema = self.args.schema;\n            }\n            if (self.isChildGrid) {\n                requestAnimationFrame(function () { self.resize(true); });\n            } else {\n                self.resize(true);\n            }\n            return self;\n        };\n        /**\n         * Removes focus from the grid.\n         * @memberof canvasDataGrid\n         * @name blur\n         * @method\n         */\n        self.intf.blur = function (e) {\n            self.hasFocus = false;\n        };\n        /**\n         * Focuses on the grid.\n         * @memberof canvasDataGrid\n         * @name focus\n         * @method\n         */\n        self.intf.focus = function () {\n            self.hasFocus = true;\n            self.controlInput.focus();\n        };\n        Object.defineProperty(self.intf, 'height', {\n            get: function () {\n                return self.parentNode.height;\n            },\n            set: function (value) {\n                self.parentNode.height = value;\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'width', {\n            get: function () {\n                return self.parentNode.width;\n            },\n            set: function (value) {\n                self.parentNode.width = value;\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'openChildren', {\n            get: function () {\n                return self.openChildren;\n            }\n        });\n        Object.defineProperty(self.intf, 'childGrids', {\n            get: function () {\n                return Object.keys(self.childGrids).map(function (gridId) {\n                    return self.childGrids[gridId];\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'isChildGrid', {\n            get: function () {\n                return self.isChildGrid;\n            }\n        });\n        Object.defineProperty(self.intf, 'parentNode', {\n            get: function () {\n                return self.parentNode;\n            },\n            set: function (value) {\n                self.parentNode = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetParent', {\n            get: function () {\n                return self.parentNode;\n            },\n            set: function (value) {\n                self.parentNode = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetLeft', {\n            get: function () {\n                return self.parentNode.offsetLeft;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetTop', {\n            get: function () {\n                return self.parentNode.offsetTop;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollHeight', {\n            get: function () {\n                return self.scrollBox.scrollHeight;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollWidth', {\n            get: function () {\n                return self.scrollBox.scrollWidth;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollTop', {\n            get: function () {\n                return self.scrollBox.scrollTop;\n            },\n            set: function (value) {\n                self.scrollBox.scrollTop = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollLeft', {\n            get: function () {\n                return self.scrollBox.scrollLeft;\n            },\n            set: function (value) {\n                self.scrollBox.scrollLeft = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'sizes', {\n            get: function () {\n                return self.sizes;\n            }\n        });\n        Object.defineProperty(self.intf, 'input', {\n            get: function () {\n                return self.input;\n            }\n        });\n        Object.defineProperty(self.intf, 'controlInput', {\n            get: function () {\n                return self.controlInput;\n            }\n        });\n        Object.defineProperty(self.intf, 'currentCell', {\n            get: function () {\n                return self.currentCell;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleCells', {\n            get: function () {\n                return self.visibleCells;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRows', {\n            get: function () {\n                return self.visibleRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'selections', {\n            get: function () {\n                return self.selections;\n            }\n        });\n        Object.defineProperty(self.intf, 'dragMode', {\n            get: function () {\n                return self.dragMode;\n            }\n        });\n        Object.defineProperty(self.intf, 'changes', {\n            get: function () {\n                return self.changes;\n            }\n        });\n        self.intf.formatters = self.formatters;\n        self.normalizeDataset = function (data, callback) {\n            var i, d, max, syncFnInvoked;\n            if (data === null || data === '' || data === undefined) {\n                return callback([]);\n            }\n            if (typeof data === 'string'\n                    || typeof data === 'number'\n                    || typeof data === 'boolean') {\n                data = [{'0': data}];\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if ((!Array.isArray(data[0]) && typeof data[0] === 'object' && data[0] !== null)\n                            || (Array.isArray(data) && data.length === 0)) {\n                return callback(data);\n            }\n            if (typeof data === 'function') {\n                i = data.apply(self.intf, [function (d) {\n                    if (syncFnInvoked) {\n                        console.warn('Detected a callback to the data setter function after the same function already returned a value synchronously.');\n                    }\n                    self.normalizeDataset(d, callback);\n                }]);\n                if (i) {\n                    syncFnInvoked = true;\n                    self.normalizeDataset(i, callback);\n                }\n                return;\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if (Array.isArray(data)) {\n                if (!Array.isArray(data[0])) {\n                    //array of something?  throw it all into 1 row!\n                    data = [data];\n                }\n                // find the longest length\n                max = 0;\n                d = [];\n                data.forEach(function (row) {\n                    max = Math.max(max, row.length);\n                });\n                // map against length indexes\n                data.forEach(function (row, index) {\n                    var x;\n                    d[index] = {};\n                    for (x = 0; x < max; x += 1) {\n                        d[index][x] = row[x];\n                    }\n                });\n                return callback(d);\n            }\n            throw new Error('Unsupported data type.  Must be an array of arrays or an array of objects, function or string.');\n        };\n        Object.defineProperty(self.intf, 'selectionBounds', {\n            get: function () {\n                return self.getSelectionBounds();\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedRows', {\n            get: function () {\n                return self.getSelectedData(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedCells', {\n            get: function () {\n                return self.getSelectedData();\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleSchema', {\n            get: function () {\n                return self.getVisibleSchema().map(function eachDataRow(col) {\n                    return col;\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'ctx', {\n            get: function () {\n                return self.ctx;\n            }\n        });\n        Object.defineProperty(self.intf, 'schema', {\n            get: function schemaGetter() {\n                return self.getSchema();\n            },\n            set: function schemaSetter(value) {\n                if (!Array.isArray(value) || typeof value[0] !== 'object') {\n                    throw new Error('Schema must be an array of objects.');\n                }\n                if (value[0].name === undefined) {\n                    throw new Error('Expected schema to contain an object with at least a name property.');\n                }\n                self.schema = value.map(function eachSchemaColumn(column, index) {\n                    column.width = column.width || self.style.columnWidth;\n                    column[self.uniqueId] = self.getSchemaNameHash(column.name);\n                    column.filter = column.filter || self.filter(column.type);\n                    column.type = column.type || 'string';\n                    column.index = index;\n                    column.columnIndex = index;\n                    column.rowIndex = -1;\n                    return column;\n                });\n                self.tempSchema = undefined;\n                self.createNewRowData();\n                self.createColumnOrders();\n                self.tryLoadStoredOrders();\n                self.resize(true);\n                self.dispatchEvent('schemachanged', {schema: self.schema});\n            }\n        });\n        Object.defineProperty(self.intf, 'data', {\n            get: function dataGetter() {\n                return self.data.map(function (row) {\n                    delete row[self.uniqueId];\n                    return row;\n                });\n            },\n            set: function dataSetter(value) {\n                self.normalizeDataset(value, function (d) {\n                    self.originalData = d.map(function eachDataRow(row) {\n                        row[self.uniqueId] = self.uId;\n                        self.uId += 1;\n                        return row;\n                    });\n                    self.changes = [];\n                    //TODO apply filter to incoming dataset\n                    self.data = self.originalData;\n                    if (!self.schema) {\n                        self.tempSchema = self.getSchemaFromData();\n                    }\n                    if (!self.schema && self.data.length === 0) {\n                        self.tempSchema = [{name: ''}];\n                        self.tempSchema[0][self.uniqueId] = self.getSchemaNameHash('');\n                    }\n                    if (self.tempSchema && !self.schema) {\n                        self.createColumnOrders();\n                        self.tryLoadStoredOrders();\n                        self.dispatchEvent('schemachanged', {schema: self.tempSchema});\n                    }\n                    self.createNewRowData();\n                    if (self.attributes.autoResizeColumns && self.data.length > 0\n                            && self.storedSettings === undefined) {\n                        self.autosize();\n                    }\n                    self.fitColumnToValues('cornerCell', true);\n                    if (!self.resize() || !self.isChildGrid) { self.draw(true); }\n                    self.createRowOrders();\n                    self.tryLoadStoredOrders();\n                    self.dispatchEvent('datachanged', {data: self.data});\n                });\n            }\n        });\n        self.initScrollBox = function () {\n            var sHeight = 0,\n                sWidth = 0,\n                scrollTop = 0,\n                scrollLeft = 0,\n                scrollHeight = 0,\n                scrollWidth = 0,\n                scrollBoxHeight = 20,\n                scrollBoxWidth = 20;\n            function setScrollTop(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollTop value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollHeight) {\n                    value = scrollHeight;\n                }\n                if (scrollHeight < 0) {\n                    value = 0;\n                }\n                scrollTop = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            function setScrollLeft(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollLeft value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollWidth) {\n                    value = scrollWidth;\n                }\n                if (scrollWidth < 0) {\n                    value = 0;\n                }\n                scrollLeft = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            self.scrollBox.toString = function () {\n                return '{\"width\": ' + scrollWidth\n                    + ', \"height\": ' + scrollHeight\n                    + ', \"left\": ' + scrollLeft\n                    + ', \"top\": ' + scrollTop + '}';\n            };\n            self.scrollBox.scrollTo = function (x, y) {\n                setScrollLeft(x, true);\n                setScrollTop(y);\n            };\n            Object.defineProperty(self.scrollBox, 'scrollBoxHeight', {\n                get: function () {\n                    return scrollBoxHeight;\n                },\n                set: function (value) {\n                    scrollBoxHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollBoxWidth', {\n                get: function () {\n                    return scrollBoxWidth;\n                },\n                set: function (value) {\n                    scrollBoxWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'height', {\n                get: function () {\n                    return sHeight;\n                },\n                set: function (value) {\n                    if (scrollHeight < value) {\n                        scrollTop = 0;\n                    }\n                    sHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'width', {\n                get: function () {\n                    return sWidth;\n                },\n                set: function (value) {\n                    sWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollTop', {\n                get: function () {\n                    return scrollTop;\n                },\n                set: setScrollTop\n            });\n            Object.defineProperty(self.scrollBox, 'scrollLeft', {\n                get: function () {\n                    return scrollLeft;\n                },\n                set: setScrollLeft\n            });\n            Object.defineProperty(self.scrollBox, 'scrollHeight', {\n                get: function () {\n                    return scrollHeight;\n                },\n                set: function (value) {\n                    if (scrollTop > value) {\n                        scrollTop = Math.max(value, 0);\n                    }\n                    if (scrollHeight < sHeight) {\n                        scrollTop = 0;\n                    }\n                    scrollHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollWidth', {\n                get: function () {\n                    return scrollWidth;\n                },\n                set: function (value) {\n                    if (scrollLeft > value) {\n                        scrollLeft = Math.max(value, 0);\n                    }\n                    scrollWidth = value;\n                }\n            });\n        };\n        return;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false, Event: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var zIndexTop = 2, hoverScrollTimeout, autoCompleteContext;\n        function createContextMenu(ev, pos, items, parentContextMenu) {\n            var container = document.createElement('div'),\n                upArrow = document.createElement('div'),\n                downArrow = document.createElement('div'),\n                children = [],\n                selectedIndex = -1,\n                intf = {},\n                rect;\n            if (!Array.isArray(items)) { throw new Error('createContextMenu expects an array.'); }\n            function createItems() {\n                items.forEach(function (item) {\n                    var contextItemContainer = document.createElement('div'),\n                        childMenuArrow;\n                    function removeChildContext(e) {\n                        if (e.relatedTarget === container\n                                || item.contextMenu.container === e.relatedTarget\n                                || childMenuArrow === e.relatedTarget\n                                || (contextItemContainer === e.relatedTarget)\n                                ) { return; }\n                        item.contextMenu.dispose();\n                        children.splice(children.indexOf(item.contextMenu), 1);\n                        item.contextMenu = undefined;\n                        contextItemContainer.removeEventListener('mouseout', removeChildContext);\n                        container.removeEventListener('mouseout', removeChildContext);\n                        contextItemContainer.setAttribute('contextOpen', '0');\n                        contextItemContainer.setAttribute('opening', '0');\n                    }\n                    function contextAddCallback(items) {\n                        // check yet again if the user hasn't moved off\n                        if (contextItemContainer.getAttribute('opening') !== '1' ||\n                                contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        var cPos = contextItemContainer.getBoundingClientRect();\n                        cPos = {\n                            left: cPos.left + self.style.childContextMenuMarginLeft + container.offsetWidth,\n                            top: cPos.top + self.style.childContextMenuMarginTop,\n                            bottom: cPos.bottom,\n                            right: cPos.right,\n                        };\n                        item.contextMenu = createContextMenu(ev, cPos, items, intf);\n                        contextItemContainer.setAttribute('contextOpen', '1');\n                        contextItemContainer.addEventListener('mouseout', removeChildContext);\n                        container.addEventListener('mouseout', removeChildContext);\n                        children.push(item.contextMenu);\n                    }\n                    function createChildContext() {\n                        var i;\n                        if (contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        contextItemContainer.setAttribute('opening', '1');\n                        if (typeof item.items === 'function') {\n                            i  = item.items.apply(intf, [function (items) {\n                                contextAddCallback(items);\n                            }]);\n                            if (i !== undefined && Array.isArray(i)) {\n                                contextAddCallback(i);\n                            }\n                            return;\n                        }\n                        contextAddCallback(item.items);\n                    }\n                    function addItem(item) {\n                        function addContent(content) {\n                            if (typeof content === 'function') {\n                                return addContent(content(ev));\n                            }\n                            if (typeof content === 'object') {\n                                contextItemContainer.appendChild(content);\n                                return;\n                            }\n                            self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n                            contextItemContainer.addEventListener('mouseover', function () {\n                                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                            });\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n                            });\n                            contextItemContainer.innerHTML = content;\n                            return;\n                        }\n                        addContent(item.title);\n                        item.contextItemContainer = contextItemContainer;\n                        if ((item.items && item.items.length > 0) || typeof item.items === 'function') {\n                            childMenuArrow = document.createElement('div');\n                            self.createInlineStyle(childMenuArrow, 'canvas-datagrid-context-child-arrow');\n                            childMenuArrow.innerHTML = self.style.childContextMenuArrowHTML;\n                            contextItemContainer.appendChild(childMenuArrow);\n                            contextItemContainer.addEventListener('mouseover', createChildContext);\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                contextItemContainer.setAttribute('opening', '0');\n                            });\n                        }\n                        if (item.click) {\n                            contextItemContainer.addEventListener('click', function (ev) {\n                                item.click.apply(self, [ev]);\n                            });\n                        }\n                    }\n                    addItem(item);\n                    container.appendChild(contextItemContainer);\n                });\n            }\n            function clickIndex(idx) {\n                items[idx].contextItemContainer.dispatchEvent(new Event('click'));\n            }\n            function checkArrowVisibility() {\n                if (container.scrollTop > 0) {\n                    document.body.appendChild(upArrow);\n                } else if (upArrow.parentNode) {\n                    upArrow.parentNode.removeChild(upArrow);\n                }\n                if (container.scrollTop >= container.scrollHeight - container.offsetHeight && downArrow.parentNode) {\n                    downArrow.parentNode.removeChild(downArrow);\n                } else if (container.scrollHeight - container.offsetHeight > 0\n                        && !(container.scrollTop >= container.scrollHeight - container.offsetHeight)) {\n                    document.body.appendChild(downArrow);\n                }\n            }\n            function startHoverScroll(type) {\n                return function t() {\n                    var a = self.attributes.contextHoverScrollAmount;\n                    if (type === 'up' && container.scrollTop === 0) { return; }\n                    if (type === 'down' && container.scrollTop === container.scrollHeight) { return; }\n                    container.scrollTop += (type === 'up' ? -a : a);\n                    hoverScrollTimeout = setTimeout(t, self.attributes.contextHoverScrollRateMs, type);\n                };\n            }\n            function endHoverScroll(type) {\n                return function () {\n                    clearTimeout(hoverScrollTimeout);\n                };\n            }\n            function init() {\n                var loc = {},\n                    s = self.scrollOffset(self.canvas);\n                createItems();\n                self.createInlineStyle(container, 'canvas-datagrid-context-menu');\n                loc.x = pos.left - s.left;\n                loc.y = pos.top - s.top;\n                loc.height = 0;\n                zIndexTop += 1;\n                container.style.position = 'absolute';\n                upArrow.style.color = self.style.contextMenuArrowColor;\n                downArrow.style.color = self.style.contextMenuArrowColor;\n                [upArrow, downArrow].forEach(function (el) {\n                    el.style.textAlign = 'center';\n                    el.style.position = 'absolute';\n                    el.style.zIndex = zIndexTop + 1;\n                });\n                container.style.zIndex = zIndexTop;\n                if (parentContextMenu && parentContextMenu.inputDropdown) {\n                    container.style.maxHeight = window.innerHeight - loc.y - self.style.autocompleteBottomMargin + 'px';\n                    container.style.minWidth = pos.width + 'px';\n                    loc.y += pos.height;\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                container.addEventListener('scroll', checkArrowVisibility);\n                container.addEventListener('wheel', function (e) {\n                    if (self.hasFocus) {\n                        container.scrollTop += e.deltaY;\n                        container.scrollLeft += e.deltaX;\n                    }\n                    checkArrowVisibility();\n                });\n                upArrow.innerHTML = self.style.contextMenuArrowUpHTML;\n                downArrow.innerHTML = self.style.contextMenuArrowDownHTML;\n                container.appendChild(upArrow);\n                document.body.appendChild(downArrow);\n                document.body.appendChild(container);\n                rect = container.getBoundingClientRect();\n                if (rect.bottom > window.innerHeight && !(parentContextMenu && parentContextMenu.inputDropdown)) {\n                    loc.y = window.innerHeight - container.offsetHeight;\n                    if (loc.y < 0) { loc.y = 0; }\n                    if (container.offsetHeight > window.innerHeight) {\n                        container.style.height = window.innerHeight - self.style.contextMenuWindowMargin + 'px';\n                    }\n                }\n                if (rect.right > window.innerWidth) {\n                    if (parentContextMenu) {\n                        loc.x = parentContextMenu.container.offsetLeft - container.offsetWidth;\n                    } else {\n                        loc.x = window.innerWidth - container.offsetWidth;\n                    }\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                rect = container.getBoundingClientRect();\n                upArrow.style.top = rect.top + 'px';\n                downArrow.style.top = rect.top + rect.height - downArrow.offsetHeight + 'px';\n                upArrow.style.left = rect.left + 'px';\n                downArrow.style.left = rect.left + 'px';\n                downArrow.style.width = container.offsetWidth + 'px';\n                upArrow.style.width = container.offsetWidth + 'px';\n                downArrow.addEventListener('mouseover', startHoverScroll('down'));\n                downArrow.addEventListener('mouseout', endHoverScroll('down'));\n                upArrow.addEventListener('mouseover', startHoverScroll('up'));\n                upArrow.addEventListener('mouseout', endHoverScroll('up'));\n                checkArrowVisibility();\n            }\n            intf.parentGrid = self.intf;\n            intf.parentContextMenu = parentContextMenu;\n            intf.container = container;\n            init();\n            intf.clickIndex = clickIndex;\n            intf.rect = rect;\n            intf.items = items;\n            intf.upArrow = upArrow;\n            intf.downArrow = downArrow;\n            intf.dispose = function () {\n                clearTimeout(hoverScrollTimeout);\n                children.forEach(function (c) {\n                    c.dispose();\n                });\n                [downArrow, upArrow, container].forEach(function (el) {\n                    if (el.parentNode) { el.parentNode.removeChild(el); }\n                });\n            };\n            Object.defineProperty(intf, 'selectedIndex', {\n                get: function () {\n                    return selectedIndex;\n                },\n                set: function (value) {\n                    if (typeof value !== 'number' || isNaN(value || !isFinite(value))) {\n                        throw new Error('Context menu selected index must be a sane number.');\n                    }\n                    selectedIndex = value;\n                    if (selectedIndex > items.length - 1) {\n                        selectedIndex = items.length - 1;\n                    }\n                    if (selectedIndex < 0) {\n                        selectedIndex = 0;\n                    }\n                    items.forEach(function (item, index) {\n                        if (index === selectedIndex) {\n                            return self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                        }\n                        self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item');\n                    });\n                }\n            });\n            return intf;\n        }\n        function createFilterContextMenuItems(e) {\n            var filterContainer = document.createElement('div'),\n                filterLabel = document.createElement('div'),\n                filterAutoCompleteButton = document.createElement('button'),\n                filterInput = document.createElement('input'),\n                n = e.cell && e.cell.header ? e.cell.header.title || e.cell.header.name : '',\n                autoCompleteItems,\n                iRect;\n            function checkRegExpErrorState() {\n                filterInput.style.background = self.style.contextFilterInputBackground;\n                filterInput.style.color = self.style.contextFilterInputColor;\n                if (self.invalidFilterRegEx) {\n                    filterInput.style.background = self.style.contextFilterInvalidRegExpBackground;\n                    filterInput.style.color = self.style.contextFilterInvalidRegExpColor;\n                }\n            }\n            function fillAutoComplete() {\n                autoCompleteItems = {};\n                self.data.filter(function (d, i) { return i < self.attributes.maxAutoCompleteItems; }).forEach(function (row) {\n                    var value = row[e.cell.header.name];\n                    if (autoCompleteItems[value]) { return; }\n                    autoCompleteItems[value] = {\n                        title: self.formatters[e.cell.header.type || 'string']({ cell: { value: value }}),\n                        click: function (e) {\n                            filterInput.value = value;\n                            e.stopPropagation();\n                            filterInput.dispatchEvent(new Event('keyup'));\n                            self.disposeAutocomplete();\n                            return;\n                        }\n                    };\n                });\n                autoCompleteItems = Object.keys(autoCompleteItems).map(function (key) {\n                    return autoCompleteItems[key];\n                });\n            }\n            function createAutoCompleteContext(ev) {\n                if (ev && [40, 38, 13, 9, 27].indexOf(ev.keyCode) !== -1) { return; }\n                fillAutoComplete();\n                iRect = filterInput.getBoundingClientRect();\n                if (autoCompleteContext) {\n                    autoCompleteContext.dispose();\n                    autoCompleteContext = undefined;\n                }\n                autoCompleteContext = createContextMenu(e, {\n                    left: iRect.left,\n                    top: iRect.top,\n                    right: iRect.right,\n                    bottom: iRect.bottom,\n                    height: iRect.height,\n                    width: iRect.width\n                }, autoCompleteItems, {inputDropdown: true});\n                autoCompleteContext.selectedIndex = 0;\n            }\n            self.createInlineStyle(filterLabel, 'canvas-datagrid-context-menu-label');\n            self.createInlineStyle(filterAutoCompleteButton, 'canvas-datagrid-context-menu-filter-button');\n            self.createInlineStyle(filterInput, 'canvas-datagrid-context-menu-filter-input');\n            checkRegExpErrorState();\n            filterInput.onclick = self.disposeAutocomplete;\n            filterInput.addEventListener('keydown', function (e) {\n                //down\n                if (e.keyCode === 40) {\n                    autoCompleteContext.selectedIndex += 1;\n                }\n                //up\n                if (e.keyCode === 38) {\n                    autoCompleteContext.selectedIndex -= 1;\n                }\n                //enter\n                if (e.keyCode === 13) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    self.disposeContextMenu();\n                }\n                //tab\n                if (e.keyCode === 9) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    e.preventDefault();\n                }\n                //esc\n                if (e.keyCode === 27) {\n                    self.disposeContextMenu();\n                }\n            });\n            filterInput.addEventListener('keyup', function () {\n                self.setFilter(e.cell.header.name, filterInput.value);\n            });\n            filterInput.addEventListener('keyup', createAutoCompleteContext);\n            ['focus', 'blur', 'keydown', 'keyup', 'change'].forEach(function (en) {\n                filterInput.addEventListener(en, checkRegExpErrorState);\n            });\n            filterInput.value = e.cell.header ? self.columnFilters[e.cell.header.name] || '' : '';\n            filterLabel.innerHTML = self.attributes.filterOptionText.replace(/%s/g, n);\n            filterAutoCompleteButton.onclick = function () {\n                if (autoCompleteContext) {\n                    return self.disposeAutocomplete();\n                }\n                createAutoCompleteContext();\n            };\n            filterAutoCompleteButton.innerHTML = self.style.contextFilterButtonHTML;\n            filterContainer.addEventListener('click', function (e) {\n                return e.stopPropagation();\n            });\n            filterContainer.appendChild(filterLabel);\n            filterContainer.appendChild(filterInput);\n            filterContainer.appendChild(filterAutoCompleteButton);\n            e.items.push({\n                title: filterContainer\n            });\n            if (Object.keys(self.columnFilters).length) {\n                Object.keys(self.columnFilters).forEach(function (cf) {\n                    var h = self.getHeaderByName(cf);\n                    e.items.push({\n                        title: self.attributes.removeFilterOptionText.replace(/%s/g, h.title || h.name),\n                        click: function removeFilterClick(e) {\n                            e.preventDefault();\n                            self.setFilter(cf, '');\n                            self.controlInput.focus();\n                        }\n                    });\n                });\n            }\n        }\n        function addDefaultContextMenuItem(e) {\n            var isNormalCell = !(e.cell.isBackground || e.cell.isHeaderCellCap\n                    || e.cell.isScrollBar || e.cell.isCorner || e.cell.isRowHeader)\n                    && e.cell.header;\n            if (self.attributes.showFilter && isNormalCell) {\n                createFilterContextMenuItems(e);\n            }\n            if (self.attributes.showCopy\n                    && self.selections.reduce(function (p, r) {\n                        return p + r.length;\n                    }, 0) > 0) {\n                e.items.push({\n                    title: self.attributes.copyText,\n                    click: function () {\n                        document.execCommand('copy');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.saveAppearance && self.attributes.showClearSettingsOption\n                    && (Object.keys(self.sizes.rows).length > 0\n                        || Object.keys(self.sizes.columns).length > 0)) {\n                e.items.push({\n                    title: self.attributes.clearSettingsOptionText,\n                    click: function (e) {\n                        e.preventDefault();\n                        self.sizes.rows = {};\n                        self.sizes.columns = {};\n                        self.createRowOrders();\n                        self.createColumnOrders();\n                        self.storedSettings = undefined;\n                        self.dispatchEvent('resizecolumn', {columnWidth: self.style.columnWidth});\n                        self.dispatchEvent('resizerow', {cellHeight: self.style.cellHeight});\n                        self.setStorageData();\n                        self.resize(true);\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.allowSorting && self.attributes.showOrderByOption && isNormalCell) {\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextAsc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'asc');\n                        self.controlInput.focus();\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextDesc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'desc');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n        }\n        self.disposeAutocomplete = function () {\n            if (autoCompleteContext) {\n                autoCompleteContext.dispose();\n                autoCompleteContext = undefined;\n            }\n        };\n        self.disposeContextMenu = function () {\n            document.removeEventListener('click', self.disposeContextMenu);\n            zIndexTop = 2;\n            self.disposeAutocomplete();\n            if (self.contextMenu) {\n                self.contextMenu.dispose();\n            }\n            self.contextMenu = undefined;\n        };\n        self.contextmenuEvent = function (e, overridePos) {\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            function createDiposeEvent() {\n                requestAnimationFrame(function () {\n                    document.addEventListener('click', self.disposeContextMenu);\n                    document.removeEventListener('mouseup', createDiposeEvent);\n                });\n            }\n            var items = [],\n                pos = overridePos || self.getLayerPos(e, true),\n                ev = {\n                    NativeEvent: e,\n                    cell: self.getCellAt(pos.x, pos.y),\n                    items: items\n                };\n            if (!ev.cell.isGrid) {\n                addDefaultContextMenuItem(ev);\n            }\n            if (self.dispatchEvent('contextmenu', ev)) {\n                return;\n            }\n            if (!ev.cell.isGrid) {\n                if (self.contextMenu) {\n                    self.disposeContextMenu();\n                }\n                self.contextMenu = createContextMenu(ev, {\n                    left: pos.x + pos.rect.left + self.style.contextMenuMarginLeft + self.canvasOffsetLeft,\n                    top: pos.y + pos.rect.top + self.style.contextMenuMarginTop + self.canvasOffsetTop,\n                    right: ev.cell.width + ev.cell.x + pos.rect.left,\n                    bottom: ev.cell.height + ev.cell.y + pos.rect.top,\n                    height: ev.cell.height,\n                    width: ev.cell.width\n                }, items);\n                document.addEventListener('mouseup', createDiposeEvent);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        /**\n         * Ends editing, optionally aborting the edit.\n         * @memberof canvasDataGrid\n         * @name endEdit\n         * @method\n         * @param {boolean} abort When true, abort the edit.\n         */\n        self.endEdit = function (abort) {\n            var cell = self.input.editCell,\n                y = cell.rowIndex;\n            function abortEdit() {\n                abort = true;\n            }\n            if (self.dispatchEvent('beforeendedit', {\n                    cell: cell,\n                    newValue: self.input.value,\n                    oldValue: cell.value,\n                    abort: abortEdit,\n                    input: self.input\n                })) { return false; }\n            if (self.input.value !== cell.value && !abort) {\n                self.changes[y] = self.changes[y] || {};\n                self.changes[y][cell.header.name] = self.input.value;\n                cell.data[cell.header.name] = self.input.value;\n                if (y === self.data.length) {\n                    if (self.dispatchEvent('newrow', {\n                            value: self.input.value,\n                            defaultValue: cell.value,\n                            aborted: abort,\n                            cell: cell,\n                            input: self.input\n                        })) { return false; }\n                    self.uId += 1;\n                    self.addRow(cell.data);\n                    self.createNewRowData();\n                }\n                self.draw(true);\n            }\n            document.body.removeChild(self.input);\n            self.controlInput.focus();\n            self.dispatchEvent('endedit', {\n                cell: cell,\n                value: self.input.value,\n                aborted: abort,\n                input: self.input\n            });\n            self.input = undefined;\n            return true;\n        };\n        /**\n         * Begins editing at cell x, row y.\n         * @memberof canvasDataGrid\n         * @name beginEditAt\n         * @method\n         * @param {number} x The column index of the cell to edit.\n         * @param {number} y The row index of the cell to edit.\n         */\n        self.beginEditAt = function (x, y) {\n            if (!self.attributes.editable) { return; }\n            var cell = self.getVisibleCellByIndex(x, y),\n                s = self.getVisibleSchema(),\n                enumItems;\n            if (self.dispatchEvent('beforebeginedit', {cell: cell})) { return false; }\n            self.scrollIntoView(x, y);\n            self.setActiveCell(x, y);\n            if (cell.header.enum) {\n                self.input = document.createElement('select');\n            } else {\n                self.input = document.createElement(self.attributes.multiLine\n                    ? 'textarea' : 'input');\n            }\n            function postDraw() {\n                var option, valueInEnum;\n                cell = self.getVisibleCellByIndex(x, y);\n                if (cell.header.enum) {\n                    // add enums\n                    if (typeof cell.header.enum === 'function') {\n                        enumItems = cell.header.enum.apply(self.intf, [{cell: cell}]);\n                    } else if (Array.isArray(cell.header.enum)) {\n                        enumItems = cell.header.enum;\n                    }\n                    enumItems.forEach(function (e) {\n                        var i = document.createElement('option'),\n                            val,\n                            title;\n                        if (Array.isArray(e)) {\n                            val = e[0];\n                            title = e[1];\n                        } else {\n                            val = e;\n                            title = e;\n                        }\n                        if (val === cell.value) { valueInEnum = true; }\n                        i.value = val;\n                        i.innerHTML = title;\n                        self.input.appendChild(i);\n                    });\n                    if (!valueInEnum) {\n                        option = document.createElement('option');\n                        option.value = cell.value;\n                        option.innerHTML = cell.value;\n                        self.input.appendChild(option);\n                    }\n                    self.input.addEventListener('change', function () {\n                        self.endEdit();\n                        self.draw(true);\n                    });\n                }\n                document.body.appendChild(self.input);\n                self.createInlineStyle(self.input, 'canvas-datagrid-edit-input');\n                self.input.style.position = 'absolute';\n                self.input.editCell = cell;\n                self.resizeEditInput();\n                self.input.style.zIndex = '2';\n                self.input.value = cell.value;\n                self.input.focus();\n                self.input.addEventListener('click', self.stopPropagation);\n                self.input.addEventListener('dblclick', self.stopPropagation);\n                self.input.addEventListener('mouseup', self.stopPropagation);\n                self.input.addEventListener('mousedown', self.stopPropagation);\n                self.input.addEventListener('keydown', function (e) {\n                    var nx = cell.columnIndex,\n                        ny = cell.rowIndex;\n                    // esc\n                    if (e.keyCode === 27) {\n                        self.endEdit(true);\n                        self.draw(true);\n                    // enter\n                    } else if (e.keyCode === 13\n                            && (!self.attributes.multiLine\n                                || (self.attributes.multiLine && e.shiftKey))) {\n                        self.endEdit();\n                        self.draw(true);\n                    } else if (e.keyCode === 9) {\n                        e.preventDefault();\n                        if (!self.endEdit()) {\n                            return;\n                        }\n                        if (e.shiftKey) {\n                            nx -= 1;\n                        } else {\n                            nx += 1;\n                        }\n                        if (nx < 0) {\n                            nx = s.length - 1;\n                            ny -= 1;\n                        }\n                        if (nx > s.length - 1) {\n                            nx = 0;\n                            ny += 1;\n                        }\n                        if (ny < 0) {\n                            ny = self.data.length - 1;\n                        }\n                        if (ny > self.data.length - 1) {\n                            ny = 0;\n                        }\n                        self.scrollIntoView(nx, ny);\n                        self.beginEditAt(nx, ny);\n                    }\n                });\n            }\n            postDraw();\n            self.dispatchEvent('beginedit', {cell: cell, input: self.input});\n        };\n        self.createInlineStyle = function (el, className) {\n            var css = {\n                'canvas-datagrid-context-menu-filter-input': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextFilterInputBackground,\n                    color: self.style.contextFilterInputColor,\n                    border: self.style.contextFilterInputBorder,\n                    borderRadius: self.style.contextFilterInputBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextFilterInputFontFamily,\n                    fontSize: self.style.contextFilterInputFontSize\n                },\n                'canvas-datagrid-context-menu-filter-button': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextFilterButtonBorder,\n                    borderRadius: self.style.contextFilterButtonBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFilterButtonFontFamily,\n                    fontSize: self.style.contextMenuFilterButtonFontSize\n                },\n                'canvas-datagrid-context-child-arrow': {\n                    cssFloat: 'right',\n                    color: self.style.childContextMenuArrowColor,\n                    fontSize: self.style.contextMenuChildArrowFontSize,\n                    fontFamily: self.style.contextMenuFontFamily,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-autocomplete': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    position: 'absolute',\n                    zIndex: 3,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-autocomplete-item': {\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor\n                },\n                'canvas-datagrid-autocomplete-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-canvas': {\n                    position: 'absolute',\n                    zIndex: '-1'\n                },\n                'canvas-datagrid': {\n                    position: 'absolute',\n                    background: self.style.backgroundColor,\n                    zIndex: '1',\n                    boxSizing: 'content-box',\n                    padding: '0'\n                },\n                'canvas-datagrid-control-input': {\n                    position: 'fixed',\n                    top: '-5px',\n                    left: '-5px',\n                    border: 'none',\n                    opacity: '0',\n                    cursor: 'pointer',\n                    width: '1px',\n                    height: '1px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize\n                },\n                'canvas-datagrid-edit-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 ' + self.style.editCellPaddingLeft + 'px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.editCellFontFamily,\n                    fontSize: self.style.editCellFontSize,\n                    boxShadow: self.style.editCellBoxShadow,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-context-menu-item': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-context-menu-label': {\n                    margin: self.style.contextMenuLabelMargin,\n                    display: self.style.contextMenuLabelDisplay,\n                    minWidth: self.style.contextMenuLabelMinWidth,\n                    maxWidth: self.style.contextMenuLabelMaxWidth\n                },\n                'canvas-datagrid-context-menu': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-invalid-search-regExp': {\n                    background: self.style.contextMenuFilterInvalidExpresion\n                }\n            };\n            if (css[className]) {\n                Object.keys(css[className]).map(function (prop) {\n                    el.style[prop] = css[className][prop];\n                });\n            }\n            return;\n        };\n        self.appendTo = function (n) {\n            self.parentNode = n || document.createElement('canvas');\n            self.height = self.parentNode;\n            self.width = self.parentNode;\n            if (self.parentNode && /canvas-datagrid-(cell|tree)/.test(self.parentNode.nodeType)) {\n                self.isChildGrid = true;\n                self.parentGrid = self.parentNode.parentGrid;\n                self.ctx = self.parentGrid.context;\n                self.canvas = self.parentGrid.canvas;\n                self.controlInput = self.parentGrid.controlInput;\n                self.eventParent = self.canvas;\n                self.intf.offsetParent = self.parentNode;\n            } else {\n                self.controlInput = document.createElement('input');\n                self.controlInput.onblur = self.intf.blur;\n                self.createInlineStyle(self.controlInput, 'canvas-datagrid-control-input');\n                self.isChildGrid = false;\n                self.parentDOMNode = self.parentNode;\n                self.parentNode = self.parentDOMNode;\n                self.parentIsCanvas = /^canvas$/i.test(self.parentDOMNode.tagName);\n                if (self.isComponent) {\n                    self.parentDOMNode = self.parentNode.host.parentNode;\n                    self.canvas = document.createElement('canvas');\n                    self.parentNode.appendChild(self.canvas);\n                    self.parentNode.appendChild(self.controlInput);\n                } else if (self.parentIsCanvas) {\n                    self.canvas = self.parentDOMNode;\n                    document.body.appendChild(self.controlInput);\n                } else {\n                    self.canvas = document.createElement('canvas');\n                    self.parentDOMNode.appendChild(self.canvas);\n                    document.body.appendChild(self.controlInput);\n                }\n                self.ctx = self.canvas.getContext('2d');\n                self.ctx.textBaseline = 'alphabetic';\n                self.eventParent = self.canvas;\n            }\n            self.controlInput.addEventListener('blur', function (e) {\n                if (e.target !== self.canvas) {\n                    self.hasFocus = false;\n                }\n            });\n            window.addEventListener('resize', self.resize);\n            if (MutationObserver) {\n                self.observer = new MutationObserver(function (mutations) {\n                    mutations.forEach(function (mutation) {\n                        self.resize(true);\n                    });\n                });\n                [self.canvas.parentNode].forEach(function (el) {\n                    if (!el) { return; }\n                    self.observer.observe(el, { attributes: true });\n                });\n            }\n            self.eventParent.addEventListener('scroll', self.resize, false);\n            self.eventParent.addEventListener('touchstart', self.touchstart, false);\n            self.eventParent.addEventListener('mouseup', self.mouseup, false);\n            self.eventParent.addEventListener('mousedown', self.mousedown, false);\n            self.eventParent.addEventListener('dblclick', self.dblclick, false);\n            self.eventParent.addEventListener('click', self.click, false);\n            self.eventParent.addEventListener('mousemove', self.mousemove);\n            self.eventParent.addEventListener('wheel', self.scrollWheel, false);\n            self.canvas.addEventListener('contextmenu', self.contextmenuEvent, false);\n            (self.isChildGrid ? self.parentGrid : document).addEventListener('copy', self.copy);\n            self.controlInput.addEventListener('keypress', self.keypress, false);\n            self.controlInput.addEventListener('keyup', self.keyup, false);\n            self.controlInput.addEventListener('keydown', self.keydown, false);\n        };\n        self.setDom = function () {\n            self.appendTo(self.args.parentNode);\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        // all methods here are exposed by intf\n        // to users\n        /**\n         * Converts a integer into a letter A - ZZZZZ...\n         * @memberof canvasDataGrid\n         * @name integerToAlpha\n         * @method\n         * @param {column} n The number to convert.\n         */\n        self.integerToAlpha = function (n) {\n            var ordA = 'a'.charCodeAt(0),\n                ordZ = 'z'.charCodeAt(0),\n                len = ordZ - ordA + 1,\n                s = '';\n            while (n >= 0) {\n                s = String.fromCharCode(n % len + ordA) + s;\n                n = Math.floor(n / len) - 1;\n            }\n            return s;\n        };\n        /**\n         * Inserts a new column before the specified index into the schema.\n         * @see canvasDataGrid#schema\n         * @tutorial schema\n         * @memberof canvasDataGrid\n         * @name insertColumn\n         * @method\n         * @param {column} c The column to insert into the schema.\n         * @param {number} index The index of the column to insert before.\n         */\n        self.insertColumn = function (c, index) {\n            var s = self.getSchema();\n            if (s.length < index) {\n                throw new Error('Index is beyond the length of the schema.');\n            }\n            self.validateColumn(c, s);\n            s.splice(index, 0, c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a column from the schema at the specified index.\n         * @memberof canvasDataGrid\n         * @name deleteColumn\n         * @tutorial schema\n         * @method\n         * @param {number} index The index of the column to delete.\n         */\n        self.deleteColumn = function (index) {\n            var s = self.getSchema();\n            // remove data matching this column name from data\n            self.data.forEach(function (row) {\n                delete row[s[index].name];\n            });\n            s.splice(index, 1);\n            self.intf.schema = s;\n        };\n        /**\n         * Adds a new column into the schema.\n         * @see canvasDataGrid#schema\n         * @tutorial schema\n         * @memberof canvasDataGrid\n         * @name addColumn\n         * @method\n         * @param {column} c The column to add to the schema.\n         */\n        self.addColumn = function (c) {\n            var s = self.getSchema();\n            self.validateColumn(c, s);\n            s.push(c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a row from the dataset at the specified index.\n         * @memberof canvasDataGrid\n         * @name deleteRow\n         * @method\n         * @param {number} index The index of the row to delete.\n         */\n        self.deleteRow = function (index) {\n            self.originalData.splice(index, 1);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Inserts a new row into the dataset before the specified index.\n         * @memberof canvasDataGrid\n         * @name insertRow\n         * @method\n         * @param {object} d data.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertRow = function (d, index) {\n            if (self.originalData.length < index) {\n                throw new Error('Index is beyond the length of the dataset.');\n            }\n            self.originalData.splice(index, 0, d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[index], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Adds a new row into the dataset.\n         * @memberof canvasDataGrid\n         * @name addRow\n         * @method\n         * @param {object} d data.\n         */\n        self.addRow = function (d) {\n            self.originalData.push(d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[self.originalData.length - 1], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Sets the height of a given row by index number.\n         * @memberof canvasDataGrid\n         * @name setRowHeight\n         * @method\n         * @param {number} rowIndex The index of the row to set.\n         * @param {number} height Height to set the row to.\n         */\n        self.setRowHeight = function (rowIndex, height) {\n            self.sizes.rows[self.data[rowIndex][self.uniqueId]] = height;\n            self.draw(true);\n        };\n        /**\n         * Sets the width of a given column by index number.\n         * @memberof canvasDataGrid\n         * @name setColumnWidth\n         * @method\n         * @param {number} colIndex The index of the column to set.\n         * @param {number} width Width to set the column to.\n         */\n        self.setColumnWidth = function (colIndex, width) {\n            var s = self.getSchema();\n            self.sizes.columns[s[colIndex][self.uniqueId]] = width;\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the width of the columns due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDataGrid\n         * @name resetColumnWidths\n         * @tutorial schema\n         * @method\n         */\n        self.resetColumnWidths = function () {\n            self.sizes.columns = {};\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the height of the rows due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDataGrid\n         * @name resetRowHeights\n         * @tutorial schema\n         * @method\n         */\n        self.resetRowHeights = function () {\n            self.sizes.rows = {};\n            self.draw(true);\n        };\n        /**\n         * Sets the value of the filter.\n         * @memberof canvasDataGrid\n         * @name setFilter\n         * @method\n         * @param {string} column Name of the column to filter.\n         * @param {string} value The value to filter for.\n         */\n        self.setFilter = function (column, value) {\n            function applyFilter() {\n                self.refreshFromOrigialData();\n                Object.keys(self.columnFilters).forEach(function (filter) {\n                    var header = self.getHeaderByName(column);\n                    if (!header) {\n                        return;\n                    }\n                    self.currentFilter = header.filter || self.filter(column.type || 'string');\n                    self.data = self.data.filter(function (row) {\n                        return self.currentFilter(row[filter], self.columnFilters[filter]);\n                    });\n                });\n                self.resize();\n                self.draw(true);\n            }\n            if (column === undefined && value === undefined) {\n                self.columnFilters = {};\n                return applyFilter();\n            }\n            if (column && (value === '' || value === undefined)) {\n                delete self.columnFilters[column];\n            } else {\n                self.columnFilters[column] = value;\n            }\n            applyFilter();\n        };\n        /**\n         * Returns the number of pixels to scroll down to line up with row rowIndex.\n         * @memberof canvasDataGrid\n         * @name findRowScrollTop\n         * @method\n         * @param {number} rowIndex The row index of the row to scroll find.\n         */\n        self.findRowScrollTop = function (rowIndex) {\n            var top = 0, x = 0, l = self.data.length,\n                cellBorder = self.style.cellBorderWidth * 2;\n            if (!self.attributes.showNewRow) {\n                l -= 1;\n            }\n            if (rowIndex > l) {\n                throw new Error('Impossible row index');\n            }\n            while (x < rowIndex) {\n                top += (self.sizes.rows[self.data[x][self.uniqueId]] || self.style.cellHeight) + cellBorder;\n                x += 1;\n            }\n            //TODO: This is not super accurate, causes pageUp/Dn to not move around right\n            return top - (self.sizes.rows[self.data[rowIndex][self.uniqueId]] || self.style.cellHeight);\n        };\n        /**\n         * Returns the number of pixels to scroll to the left to line up with column columnIndex.\n         * @memberof canvasDataGrid\n         * @name findColumnScrollLeft\n         * @method\n         * @param {number} columnIndex The column index of the column to find.\n         */\n        self.findColumnScrollLeft = function (columnIndex) {\n            var left = 0, y = 0, s = self.getSchema(), l = s.length - 1;\n            if (columnIndex > l) {\n                throw new Error('Impossible column index');\n            }\n            while (y < columnIndex) {\n                left += self.sizes.columns[s[y][self.uniqueId]] || s[y].width;\n                y += 1;\n            }\n            return left;\n        };\n        /**\n         * Scrolls the cell at cell x, row y.\n         * @memberof canvasDataGrid\n         * @name gotoCell\n         * @method\n         * @param {number} x The column index of the cell to scroll to.\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoCell = function (x, y) {\n            if (x !== undefined) {\n                self.scrollBox.scrollLeft = self.findColumnScrollLeft(x);\n            }\n            if (y !== undefined) {\n                self.scrollBox.scrollTop = self.findRowScrollTop(y);\n            }\n        };\n        /**\n         * Scrolls the row y.\n         * @memberof canvasDataGrid\n         * @name gotoRow\n         * @method\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoRow = function (y) {\n            self.gotoCell(0, y);\n        };\n        /**\n         * Scrolls the cell at cell x, row y into view if it is not already.\n         * @memberof canvasDataGrid\n         * @name scrollIntoView\n         * @method\n         * @param {number} x The column index of the cell to scroll into view.\n         * @param {number} y The row index of the cell to scroll into view.\n         */\n        self.scrollIntoView = function (x, y) {\n            if (self.visibleCells.filter(function (cell) {\n                    return (cell.rowIndex === y || y === undefined)\n                        && (cell.columnIndex === x || x === undefined)\n                        && cell.x > 0\n                        && cell.y > 0\n                        && cell.x + cell.width < self.width\n                        && cell.y + cell.height < self.height;\n                }).length === 0) {\n                self.gotoCell(x, y);\n            }\n        };\n        /**\n         * Sets the active cell. Requires redrawing.\n         * @memberof canvasDataGrid\n         * @name setActiveCell\n         * @method\n         * @param {number} x The column index of the cell to set active.\n         * @param {number} y The row index of the cell to set active.\n         */\n        self.setActiveCell = function (x, y) {\n            self.activeCell = {\n                rowIndex: y,\n                columnIndex: x\n            };\n        };\n        /**\n         * Selects every visible cell.\n         * @memberof canvasDataGrid\n         * @name selectAll\n         * @method\n         */\n        self.selectAll = function () {\n            self.selectArea({\n                top: 0,\n                left: 0,\n                right: self.getVisibleSchema().length - 1,\n                bottom: self.data.length - 1\n            });\n        };\n        /**\n         * Returns true if the selected columnIndex is selected on every row.\n         * @memberof canvasDataGrid\n         * @name isColumnSelected\n         * @method\n         * @param {number} columnIndex The column index to check.\n         */\n        self.isColumnSelected = function (columnIndex) {\n            var colIsSelected = true;\n            self.data.forEach(function (row, rowIndex) {\n                if (!self.selections[rowIndex] || self.selections[rowIndex].indexOf(self.orders.columns[columnIndex]) === -1) {\n                    colIsSelected = false;\n                }\n            });\n            return colIsSelected;\n        };\n        /**\n         * Selects a column.\n         * @memberof canvasDataGrid\n         * @name selectColumn\n         * @method\n         * @param {number} columnIndex The column index to select.\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the column.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the column.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectColumn = function (columnIndex, ctrl, shift, supressEvent) {\n            var s, e, x;\n            function addCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) === -1) {\n                        self.selections[rowIndex].push(i);\n                    }\n                });\n            }\n            function removeCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) !== -1) {\n                        self.selections[rowIndex].splice(self.selections[rowIndex].indexOf(i), 1);\n                    }\n                });\n            }\n            if (shift) {\n                if (!self.activeCell) { return; }\n                s = Math.min(self.activeCell.columnIndex, columnIndex);\n                e = Math.max(self.activeCell.columnIndex, columnIndex);\n                for (x = s; e > x; x += 1) {\n                    addCol(x);\n                }\n            }\n            if (!ctrl && !shift) {\n                self.selections = [];\n                self.activeCell.columnIndex = columnIndex;\n                self.activeCell.rowIndex = self.scrollIndexTop;\n            }\n            if (ctrl && self.isColumnSelected(columnIndex)) {\n                removeCol(columnIndex);\n            } else {\n                addCol(columnIndex);\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.getSelectionBounds()\n            });\n        };\n        /**\n         * Selects a row.\n         * @memberof canvasDataGrid\n         * @name selectRow\n         * @method\n         * @param {number} rowIndex The row index to select.\n         * @param {boolean} ctrl When true, behaves as if you were holding control/command when you clicked the row.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the row.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectRow = function (rowIndex, ctrl, shift, supressEvent) {\n            var x, st, en, s = self.getSchema();\n            function addRow(ri) {\n                self.selections[ri] = [];\n                self.selections[ri].push(-1);\n                s.forEach(function (col) {\n                    self.selections[ri].push(col.index);\n                });\n            }\n            if (self.dragAddToSelection === false || self.dragObject === undefined) {\n                if (self.selections[rowIndex] && self.selections[rowIndex].length - 1 === s.length) {\n                    if (ctrl) {\n                        self.selections[rowIndex] = [];\n                        return;\n                    }\n                }\n            }\n            if (self.dragAddToSelection === true || self.dragObject === undefined) {\n                if (shift && self.dragObject === undefined) {\n                    if (!self.activeCell) { return; }\n                    st = Math.min(self.activeCell.rowIndex, rowIndex);\n                    en = Math.max(self.activeCell.rowIndex, rowIndex);\n                    for (x = st; en >= x; x += 1) {\n                        addRow(x);\n                    }\n                } else {\n                    addRow(rowIndex);\n                }\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Collapse a tree grid by row index.\n         * @memberof canvasDataGrid\n         * @name collapseTree\n         * @method\n         * @param {number} index The index of the row to collapse.\n         */\n        self.collapseTree = function (rowIndex) {\n            var rowId = self.data[rowIndex][self.uniqueId];\n            self.dispatchEvent('collapsetree', {\n                childGrid: self.childGrids[rowId],\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId].blur();\n            self.openChildren[rowId].dispose();\n            delete self.openChildren[rowId];\n            delete self.sizes.trees[rowId];\n            delete self.childGrids[rowId];\n            self.dispatchEvent('resizerow', {\n                cellHeight: self.style.cellHeight\n            });\n            self.resize(true);\n            self.draw(true);\n        };\n        /**\n         * Expands a tree grid by row index.\n         * @memberof canvasDataGrid\n         * @name expandTree\n         * @method\n         * @param {number} index The index of the row to expand.\n         */\n        self.expandTree = function (rowIndex) {\n            var rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth,\n                rowId = self.data[rowIndex][self.uniqueId],\n                h = self.sizes.trees[rowId] || self.style.treeGridHeight,\n                treeGrid;\n            if (!self.childGrids[rowId]) {\n                treeGrid = self.createGrid({\n                    debug: self.attributes.debug,\n                    name: self.attributes.saveAppearance\n                        ? self.attributes.name + 'tree' + rowId : undefined,\n                    parentNode: {\n                        parentGrid: self.intf,\n                        nodeType: 'canvas-datagrid-tree',\n                        offsetHeight: h,\n                        offsetWidth: self.width - columnHeaderCellWidth,\n                        header: { width: self.width - columnHeaderCellWidth },\n                        offsetLeft: columnHeaderCellWidth,\n                        offsetTop: rowHeaderCellHeight,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: 'tree',\n                        data: self.data[rowIndex]\n                    }\n                });\n                self.childGrids[rowId] = treeGrid;\n            }\n            treeGrid = self.childGrids[rowId];\n            treeGrid.visible = true;\n            self.dispatchEvent('expandtree', {\n                treeGrid: treeGrid,\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId] = treeGrid;\n            self.sizes.trees[rowId] = h;\n            self.dispatchEvent('resizerow', {height: self.style.cellHeight});\n            self.resize(true);\n        };\n        /**\n         * Toggles tree grid open and close by row index.\n         * @memberof canvasDataGrid\n         * @name toggleTree\n         * @method\n         * @param {number} index The index of the row to toggle.\n         */\n        self.toggleTree = function (rowIndex) {\n            var i = self.openChildren[self.data[rowIndex][self.uniqueId]];\n            if (i) {\n                return self.collapseTree(rowIndex);\n            }\n            self.expandTree(rowIndex);\n        };\n        /**\n         * Returns a header from the schema by name.\n         * @memberof canvasDataGrid\n         * @name getHeaderByName\n         * @tutorial schema\n         * @method\n         * @returns {header} header with the selected name, or undefined.\n         * @param {string} name The name of the column to resize.\n         */\n        self.getHeaderByName = function (name) {\n            var x, i = self.getSchema();\n            for (x = 0; x < i.length; x += 1) {\n                if (i[x].name === name) {\n                    return i[x];\n                }\n            }\n        };\n        /**\n         * Resizes a column to fit the longest value in the column. Call without a value to resize all columns.\n         * Warning, can be slow on very large record sets (1m records ~3-5 seconds on an i7).\n         * @memberof canvasDataGrid\n         * @name fitColumnToValues\n         * @method\n         * @param {string} name The name of the column to resize.\n         */\n        self.fitColumnToValues = function (name, internal) {\n            self.sizes.columns[name === 'cornerCell' ? name : self.getHeaderByName(name)[self.uniqueId]]\n                = self.findColumnMaxTextLength(name);\n            if (!internal) {\n                self.resize();\n                self.draw(true);\n            }\n        };\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDataGrid\n         * @name isCellVisible\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {cell} cell The cell to check for.  Alternatively you can pass an object { x: <x-index>, y: <y-index> }.\n         */\n        self.isCellVisible = function (cell) {\n            var x, l = self.visibleCells.length;\n            for (x = 0; x < l; x += 1) {\n                if (cell.x === self.visibleCells[x].x && cell.y === self.visibleCells[x].y) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n         * Sets the order of the data.\n         * @memberof canvasDataGrid\n         * @name order\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} columnName Number of pixels from the left.\n         * @param {string} direction `asc` for ascending or `desc` for descending.\n         * @param {function} [sortFunction] When defined, override the default sorting method defined in the column's schema and use this one.\n         * @param {bool} [dontSetStorageData] Don't store this setting for future use.\n         */\n        self.order = function (columnName, direction, sortFunction, dontSetStorageData) {\n            var f,\n                c = self.getSchema().filter(function (col) {\n                    return col.name === columnName;\n                });\n            self.orderBy = columnName;\n            if (c.length === 0) {\n                throw new Error('Cannot sort.  No such column name');\n            }\n            f = sortFunction || self.sorters[c[0].type];\n            if (!f && c[0].type !== undefined) {\n                console.warn('Cannot sort type \"%s\" falling back to string sort.', c[0].type);\n            }\n            self.data = self.data.sort(typeof f === 'function' ? f(columnName, direction) : self.sorters.string);\n            self.dispatchEvent('ordercolumn', {name: columnName, direction: direction});\n            self.draw(true);\n            if (dontSetStorageData) { return; }\n            self.setStorageData();\n        };\n        self.isInGrid = function (e) {\n            if (e.x < 0\n                    || e.x > self.width\n                    || e.y < 0\n                    || e.y > self.height) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Gets the cell at columnIndex and rowIndex.\n         * @memberof canvasDataGrid\n         * @name getVisibleCellByIndex\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Column index.\n         * @param {number} y Row index.\n         */\n        self.getVisibleCellByIndex = function (x, y) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === x && c.rowIndex === y;\n            })[0];\n        };\n        /**\n         * Gets the cell at grid pixel coordinate x and y.\n         * @memberof canvasDataGrid\n         * @name getCellAt\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Number of pixels from the left.\n         * @param {number} y Number of pixels from the top.\n         */\n        self.getCellAt = function (x, y, useTouchScrollZones) {\n            var tsz = useTouchScrollZones ? self.attributes.touchScrollZone : 0, i, l = self.visibleCells.length, cell;\n            if (!self.visibleCells || !self.visibleCells.length) { return; }\n            self.hasFocus = true;\n            if (!(y < self.height\n                && y > 0\n                && x < self.width\n                && x > 0)) {\n                self.hasFocus = false;\n                return {\n                    dragContext: 'inherit',\n                    context: 'inherit'\n                };\n            }\n            for (i = 0; i < l; i += 1) {\n                cell = self.visibleCells[i];\n                if (useTouchScrollZones && /(vertical|horizontal)-scroll-/.test(cell.style)) {\n                    cell.x -= tsz;\n                    cell.y -= tsz;\n                    cell.height += tsz;\n                    cell.width += tsz;\n                }\n                if (cell.x - self.style.cellBorderWidth < x\n                        && cell.x + cell.width + self.style.cellBorderWidth > x\n                        && cell.y - self.style.cellBorderWidth < y\n                        && cell.y + cell.height + self.style.cellBorderWidth > y) {\n                    if (/vertical-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'vertical-scroll-box';\n                        cell.context = 'vertical-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isVerticalScrollBar = true;\n                        if (y > self.scrollBox.box.v.y + self.scrollBox.scrollBoxHeight) {\n                            cell.dragContext = 'vertical-scroll-bottom';\n                            cell.context = 'vertical-scroll-bottom';\n                        } else if (y < self.scrollBox.box.v.y) {\n                            cell.dragContext = 'vertical-scroll-top';\n                            cell.context = 'vertical-scroll-top';\n                        }\n                        self.canvas.style.cursor = 'default';\n                        return cell;\n                    }\n                    if (/horizontal-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'horizontal-scroll-box';\n                        cell.context = 'horizontal-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isHorizontalScrollBar = true;\n                        if (x > self.scrollBox.box.h.x + self.scrollBox.scrollBoxWidth) {\n                            cell.dragContext = 'horizontal-scroll-right';\n                            cell.context = 'horizontal-scroll-right';\n                        } else if (x < self.scrollBox.box.h.x) {\n                            cell.dragContext = 'horizontal-scroll-left';\n                            cell.context = 'horizontal-scroll-left';\n                        }\n                        self.canvas.style.cursor = 'default';\n                        return cell;\n                    }\n                    if (cell.x + cell.width - (self.attributes.borderResizeZone * 0.4) < x\n                            && cell.x + cell.width + (self.attributes.borderResizeZone * 0.6) > x\n                            && self.attributes.allowColumnResize\n                            && ((self.attributes.allowColumnResizeFromCell && cell.style === 'cell')\n                                || cell.style !== 'cell')\n                            && ((self.attributes.allowRowHeaderResize\n                                && ['rowHeaderCell', 'cornerCell'].indexOf(cell.style) !== -1)\n                                || ['rowHeaderCell', 'cornerCell'].indexOf(cell.style) === -1)) {\n                        cell.context = 'ew-resize';\n                        cell.dragContext = 'ew-resize';\n                        return cell;\n                    }\n                    if (cell.y + cell.height - (self.attributes.borderResizeZone * 0.4) < y\n                            && cell.y + cell.height + (self.attributes.borderResizeZone * 0.6) > y\n                            && self.attributes.allowRowResize\n                            && ((self.attributes.allowRowResizeFromCell && cell.style === 'cell')\n                                || cell.style !== 'cell')\n                            && cell.style !== 'columnHeaderCell') {\n                        cell.context = 'ns-resize';\n                        cell.dragContext = 'ns-resize';\n                        return cell;\n                    }\n                    if (cell.style === 'columnHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'column-reorder';\n                        return cell;\n                    }\n                    if (cell.style === 'rowHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'row-reorder';\n                        return cell;\n                    }\n                    if (cell.isGrid) {\n                        self.hasFocus = false;\n                        cell.dragContext = 'cell-grid';\n                        cell.context = 'cell-grid';\n                        return cell;\n                    }\n                    if (cell.style === 'tree-grid') {\n                        self.hasFocus = false;\n                        cell.dragContext = 'tree';\n                        cell.context = 'tree';\n                        return cell;\n                    }\n                    cell.dragContext = 'cell';\n                    cell.context = 'cell';\n                    return cell;\n                }\n            }\n            self.hasFocus = true;\n            self.canvas.style.cursor = 'default';\n            return {\n                dragContext: 'background',\n                context: 'background',\n                style: 'background',\n                isBackground: true\n            };\n        };\n        /**\n         * Gets the bounds of current selection. \n         * @returns {rect} selection.\n         * @memberof canvasDataGrid\n         * @name getSelectionBounds\n         * @method\n         */\n        self.getSelectionBounds = function () {\n            var low = {x: Infinity, y: Infinity},\n                high = {x: -Infinity, y: -Infinity};\n            self.data.forEach(function (row, rowIndex) {\n                var maxCol, minCol;\n                if (self.selections[rowIndex] && self.selections[rowIndex].length) {\n                    low.y = rowIndex < low.y ? rowIndex : low.y;\n                    high.y = rowIndex > high.y ? rowIndex : high.y;\n                    maxCol = Math.max.apply(null, self.selections[rowIndex]);\n                    minCol = Math.min.apply(null, self.selections[rowIndex]);\n                    low.x = minCol < low.x ? minCol : low.x;\n                    high.x = maxCol > high.x ? maxCol : high.x;\n                }\n            });\n            return {\n                top: low.y,\n                left: low.x,\n                bottom: high.y,\n                right: high.x\n            };\n        };\n        /**\n         * Returns an auto generated schema based on data structure.\n         * @memberof canvasDataGrid\n         * @name getSchemaFromData\n         * @method\n         * @tutorial schema\n         * @returns {schema} schema A schema based on the first item in the data array.\n         */\n        self.getSchemaFromData = function () {\n            return Object.keys(self.data[0] || {' ': ''}).map(function mapEachSchemaColumn(key, index) {\n                var type = self.getBestGuessDataType(key),\n                    i = {\n                        name: key,\n                        title: isNaN(parseInt(key, 10)) ? key : self.integerToAlpha(key).toUpperCase(),\n                        width: self.style.columnWidth,\n                        index: index,\n                        type: type,\n                        filter: self.filter(type)\n                    };\n                if (key === self.uniqueId) {\n                    i.hidden = true;\n                }\n                i[self.uniqueId] = self.getSchemaNameHash(key);\n                return i;\n            });\n        };\n        /**\n         * Clears the change log grid.changes that keeps track of changes to the data set.\n         * This does not undo changes or alter data it is simply a convince array to keep\n         * track of changes made to the data since last this method was called.\n         * @memberof canvasDataGrid\n         * @name clearChangeLog\n         * @method\n         */\n        self.clearChangeLog = function () {\n            self.changes = [];\n        };\n        /**\n         * Selects an area of the grid.\n         * @memberof canvasDataGrid\n         * @name selectArea\n         * @method\n         * @param {rect} bounds A rect object representing the selected values.\n         */\n        self.selectArea = function (bounds, ctrl) {\n            self.selectionBounds = bounds || self.selectionBounds;\n            var x, y, s = self.getSchema();\n            if (!ctrl) {\n                self.selections = [];\n            }\n            if (self.selectionBounds.top < -1\n                    || self.selectionBounds.bottom > self.data.length\n                    || self.selectionBounds.left < -1\n                    || self.selectionBounds.right > s.length) {\n                throw new Error('Impossible selection area');\n            }\n            for (x = self.selectionBounds.top; x <= self.selectionBounds.bottom; x += 1) {\n                self.selections[x] = [];\n                for (y = self.selectionBounds.left; y <= self.selectionBounds.right; y += 1) {\n                    if (self.selections[x].indexOf(y) === -1) {\n                        self.selections[x].push(y);\n                    }\n                }\n            }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Returns the maximum text width for a given column by column name.\n         * @memberof canvasDataGrid\n         * @name findColumnMaxTextLength\n         * @method\n         * @returns {number} The number of pixels wide the maximum width value in the selected column.\n         * @param {string} name The name of the column to calculate the value's width of.\n         */\n        self.findColumnMaxTextLength = function (name) {\n            var m = -Infinity;\n            if (name === 'cornerCell') {\n                self.ctx.font = self.style.rowHeaderCellFont;\n                return self.ctx.measureText((self.data.length + (self.attributes.showNewRow ? 1 : 0)).toString()).width\n                    + self.style.autosizePadding + self.style.autosizeHeaderCellPadding\n                    + self.style.rowHeaderCellPaddingRight\n                    + self.style.rowHeaderCellPaddingLeft\n                    + (self.attributes.tree ? self.style.treeArrowWidth\n                        + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight : 0);\n            }\n            self.getSchema().forEach(function (col) {\n                if (col.name !== name) { return; }\n                self.ctx.font = self.style.columnHeaderCellFont;\n                var t = self.ctx.measureText(col.title || col.name).width\n                    + self.style.headerCellPaddingRight\n                    + self.style.headerCellPaddingLeft;\n                m = t > m ? t : m;\n            });\n            self.data.forEach(function (row) {\n                self.ctx.font = self.style.cellFont;\n                var t = self.ctx.measureText(row[name]).width\n                    + self.style.cellPaddingRight\n                    + self.style.cellPaddingLeft + self.style.cellAutoResizePadding;\n                m = t > m ? t : m;\n            });\n            return m;\n        };\n        /**\n         * Gets the total width of all header columns.\n         * @memberof canvasDataGrid\n         * @name getHeaderWidth\n         * @method\n         */\n        self.getHeaderWidth = function () {\n            return self.getVisibleSchema().reduce(function (total, header) {\n                return total + header.width;\n            }, 0);\n        };\n        self.formatters.string = function cellFormatterString(e) {\n            return e.cell.value !== undefined ? e.cell.value : '';\n        };\n        self.formatters.rowHeaderCell = self.formatters.string;\n        self.formatters.headerCell = self.formatters.string;\n        self.formatters.number = self.formatters.string;\n        self.formatters.int = self.formatters.string;\n        self.formatters.html = self.formatters.string;\n        self.sorters.string = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (a[columnName] === undefined || a[columnName] === null) {\n                    return 1;\n                }\n                if (b[columnName] === undefined || b[columnName] === null) {\n                    return 0;\n                }\n                if (asc) {\n                    if (!a[columnName].localeCompare) { return 1; }\n                    return a[columnName].localeCompare(b[columnName]);\n                }\n                if (!b[columnName].localeCompare) { return 1; }\n                return b[columnName].localeCompare(a[columnName]);\n            };\n        };\n        self.sorters.number = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return a[columnName] - b[columnName];\n                }\n                return b[columnName] - a[columnName];\n            };\n        };\n        self.sorters.date = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return new Date(a[columnName]).getTime()\n                        - new Date(b[columnName]).getTime();\n                }\n                return new Date(b[columnName]).getTime()\n                        - new Date(a[columnName]).getTime();\n            };\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// canvas-datagrid.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap f34ed397d8a484f4af33","/*jslint browser: true, unparam: true, todo: true, evil: true*/\n/*globals Reflect: false, HTMLElement: true, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([\n    './defaults',\n    './draw',\n    './events',\n    './intf',\n    './contextMenu',\n    './dom',\n    './publicMethods'\n], function context(defaults) {\n    'use strict';\n    var modules = Array.prototype.slice.call(arguments),\n        typeMap;\n    function hyphenateProperty(prop, cust) {\n        var p = '';\n        Array.prototype.forEach.call(prop, function (char) {\n            if (char === char.toUpperCase()) {\n                p += '-' + char.toLowerCase();\n                return;\n            }\n            p += char;\n        });\n        return (cust ? '-cdg-' : '') + p;\n    }\n    function getDefaultItem(base, item) {\n        var i = {},\n            r;\n        defaults(i);\n        r = i.defaults[base].filter(function (i) {\n            return i[0].toLowerCase() === item.toLowerCase()\n                || hyphenateProperty(i[0]) === item.toLowerCase()\n                || hyphenateProperty(i[0], true) === item.toLowerCase();\n        })[0];\n        return r;\n    }\n    typeMap = {\n        data: function (strData) {\n            try {\n                return JSON.parse(strData);\n            } catch (e) {\n                throw new Error('Cannot read JSON data in canvas-data-grid data attribute.');\n            }\n        },\n        style: function (fullStyleString) {\n            var s = {};\n            fullStyleString.split(';').forEach(function (sd) {\n                if (!sd) { return; }\n                var i = sd.indexOf(':'),\n                    key = sd.substring(0, i),\n                    val = sd.substring(i + 1),\n                    idef = getDefaultItem('styles', key);\n                if (idef === undefined) {\n                    console.warn('Unrecognized style directive', key);\n                    return;\n                }\n                s[idef[0]] = typeMap[typeof idef[1]](val);\n            });\n            return s;\n        },\n        schema: function (strSchema) {\n            try {\n                return JSON.parse(strSchema);\n            } catch (e) {\n                throw new Error('Cannot read JSON data in canvas-data-grid data attribute.');\n            }\n        },\n        number: function (strNum) {\n            return parseInt(strNum, 10);\n        },\n        boolean: function (strBool) {\n            return (/true/i).test(strBool);\n        },\n        string: function (str) {\n            return str;\n        }\n    };\n    function Grid(args) {\n        args = args || {};\n        var self = {};\n        self.isComponent = args.component === undefined;\n        self.intf = self.isComponent ? eval('Reflect.construct(HTMLElement, [], new.target)') : {};\n        self.args = args;\n        self.createGrid = function grid(args) {\n            args.component = false;\n            return new Grid(args);\n        };\n        modules.forEach(function (module) {\n            module(self);\n        });\n        self.intf.args = self.args;\n        self.intf.init = self.init;\n        if (!self.isComponent) {\n            self.init();\n        }\n        return self.intf;\n    }\n    function getObservableAttributes() {\n        var i = {}, attrs = ['style', 'data', 'schema'];\n        defaults(i);\n        i.defaults.attributes.forEach(function (attr) {\n            attrs.push(attr[0].toLowerCase());\n        });\n        return attrs;\n    }\n    Grid.observedAttributes = getObservableAttributes();\n    Grid.prototype = Object.create(HTMLElement.prototype);\n    Grid.prototype.disconnectedCallback = function () {\n        this.dispose();\n    };\n    Grid.prototype.attributeChangedCallback = function (attrName, oldVal, newVal) {\n        var j, s, intf = this;\n        if (attrName === 'style') {\n            j = typeMap.style(newVal);\n            s = intf.args.style ? JSON.parse(JSON.stringify(intf.args.style)) : {};\n            Object.keys(j).forEach(function (key) {\n                s[key] = j[key];\n            });\n            intf.args.style = s;\n            return;\n        }\n        if (attrName === 'data') {\n            intf.args.data = typeMap.data(newVal);\n            return;\n        }\n        if (attrName === 'schema') {\n            intf.args.schema = typeMap.schema(newVal);\n            return;\n        }\n        intf.attributes[attrName] = typeMap[typeof getDefaultItem('attributes', attrName)[1]](newVal);\n        return;\n    };\n    Grid.prototype.connectedCallback = function () {\n        var intf = this, s;\n        if (intf.initialized) { return; }\n        intf.initialized = true;\n        intf.args.parentNode = intf.createShadowRoot();\n        intf.shadowRootParentElement = intf.parentElement;\n        //HACK init() will secretly return the internal reference object.\n        //since init is only run after instantiation in the component version\n        //it won't work in the amd version and won't return self, so it is still\n        //technically private since it's impossible to get at.\n        //this has to be done so intf setters can bet run and alter self without stack overflows\n        s = intf.init();\n        ['style', 'data', 'schema'].forEach(function (key) {\n            Object.defineProperty(intf.args, key, {\n                set: function (value) {\n                    s[key] = value;\n                    intf.draw();\n                },\n                get: function () {\n                    return s[key];\n                }\n            });\n        });\n    };\n    if (window && !window.canvasDatagrid && !window.require) {\n        window.canvasDatagrid = function (args) { return new Grid(args); };\n    }\n    if (window.customElements) {\n        window.customElements.define('canvas-data-grid', Grid);\n    }\n    module.exports = function grid(args) {\n        args = args || {};\n        args.component = false;\n        return new Grid(args);\n    };\n    return module.exports;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/main.js\n// module id = 0\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.defaults = {\n            attributes: [\n                ['name', ''],\n                ['tree', false],\n                ['showNewRow', false],\n                ['treeHorizontalScroll', false],\n                ['saveAppearance', true],\n                ['selectionFollowsActiveCell', false],\n                ['multiLine', false],\n                ['editable', true],\n                ['allowColumnReordering', true],\n                ['allowRowReordering', false],\n                ['allowSorting', true],\n                ['showFilter', true],\n                ['globalRowResize', false],\n                ['pageUpDownOverlap', 1],\n                ['persistantSelectionMode', false],\n                ['rowSelectionMode', false],\n                ['selectionMode', 'cell'],\n                ['autoResizeColumns', false],\n                ['allowRowHeaderResize', true],\n                ['allowColumnResize', true],\n                ['allowRowResize', true],\n                ['allowRowResizeFromCell', false],\n                ['allowColumnResizeFromCell', false],\n                ['debug', false],\n                ['borderResizeZone', 10],\n                ['showColumnHeaders', true],\n                ['showRowNumbers', true],\n                ['showRowHeaders', true],\n                ['scrollRepeatRate', 75],\n                ['selectionScrollZone', 20],\n                ['resizeScrollZone', 20],\n                ['contextHoverScrollRateMs', 5],\n                ['contextHoverScrollAmount', 2],\n                ['selectionScrollIncrement', 20],\n                ['reorderDeadZone', 3],\n                ['showClearSettingsOption', true],\n                ['showOrderByOption', true],\n                ['clearSettingsOptionText', 'Clear saved settings'],\n                ['showOrderByOptionTextAsc', 'Order by %s ascending'],\n                ['showOrderByOptionTextDesc', 'Order by %s descending'],\n                ['removeFilterOptionText', 'Remove filter on %s'],\n                ['filterOptionText', 'Filter %s'],\n                ['filterTextPrefix', '(filtered) '],\n                ['touchReleaseAnimationDurationMs', 2000],\n                ['touchReleaseAcceleration', 90],\n                ['touchDeadZone', 3],\n                ['touchSelectTimeMs', 800],\n                ['touchScrollZone', 30],\n                ['copyText', 'Copy'],\n                ['showCopy', true],\n                ['columnHeaderClickBehavior', 'sort'],\n                ['scrollPointerLock', false],\n                ['maxAutoCompleteItems', 200]\n            ],\n            styles: [\n                ['activeCellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['activeCellBorderWidth', 0.25],\n                ['activeCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellFont', '16px sans-serif'],\n                ['activeCellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['activeCellOverlayBorderWidth', 0.5],\n                ['activeCellPaddingBottom', 5],\n                ['activeCellPaddingLeft', 5],\n                ['activeCellPaddingRight', 7],\n                ['activeCellPaddingTop', 5],\n                ['activeCellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['activeCellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['activeColumnHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeColumnHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeRowHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeRowHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['autocompleteBottomMargin', 60],\n                ['autosizeHeaderCellPadding', 8],\n                ['autosizePadding', 5],\n                ['backgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cellAutoResizePadding', 13],\n                ['cellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['cellBorderWidth', 0.5],\n                ['cellColor', 'rgba(0, 0, 0, 1)'],\n                ['cellFont', '16px sans-serif'],\n                ['cellGridHeight', 250],\n                ['cellHeight', 24],\n                ['cellHeightWithChildGrid', 150],\n                ['cellHorizontalAlignment', 'left'],\n                ['cellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['cellPaddingBottom', 5],\n                ['cellPaddingLeft', 5],\n                ['cellPaddingRight', 7],\n                ['cellPaddingTop', 5],\n                ['cellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['cellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['cellVerticalAlignment', 'center'],\n                ['cellWidthWithChildGrid', 250],\n                ['childContextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['childContextMenuArrowHTML', '&#x25BA;'],\n                ['childContextMenuMarginLeft', -15],\n                ['childContextMenuMarginTop', 0],\n                ['columnHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellBorderColor', 'rgba(152, 152, 152, 1)'],\n                ['columnHeaderCellBorderWidth', 0.25],\n                ['columnHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['columnHeaderCellFont', '16px sans-serif'],\n                ['columnHeaderCellHeight', 25],\n                ['columnHeaderCellHorizontalAlignment', 'left'],\n                ['columnHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['columnHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['columnHeaderCellPaddingBottom', 5],\n                ['columnHeaderCellPaddingLeft', 5],\n                ['columnHeaderCellPaddingRight', 7],\n                ['columnHeaderCellPaddingTop', 5],\n                ['columnHeaderCellVerticalAlignment', 'center'],\n                ['columnWidth', 250],\n                ['contextFilterButtonBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterButtonBorderRadius', '3px'],\n                ['contextFilterButtonHTML', '&#x25BC;'],\n                ['contextFilterInputBackground', 'rgba(255,255,255,1)'],\n                ['contextFilterInputBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterInputBorderRadius', '0'],\n                ['contextFilterInputColor', 'rgba(0,0,0,1)'],\n                ['contextFilterInputFontFamily', 'sans-serif'],\n                ['contextFilterInputFontSize', '14px'],\n                ['contextFilterInvalidRegExpBackground', 'rgba(180, 6, 1, 1)'],\n                ['contextFilterInvalidRegExpColor', 'rgba(255, 255, 255, 1)'],\n                ['contextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuArrowDownHTML', '&#x25BC;'],\n                ['contextMenuArrowUpHTML', '&#x25B2;'],\n                ['contextMenuBackground', 'rgba(240, 240, 240, 1)'],\n                ['contextMenuBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextMenuBorderRadius', '3px'],\n                ['contextMenuChildArrowFontSize', '12px'],\n                ['contextMenuColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuFilterButtonFontFamily', 'sans-serif'],\n                ['contextMenuFilterButtonFontSize', '10px'],\n                ['contextMenuFilterInvalidExpresion', 'rgba(237, 155, 156, 1)'],\n                ['contextMenuFontFamily', 'sans-serif'],\n                ['contextMenuFontSize', '16px'],\n                ['contextMenuHoverBackground', 'rgba(182, 205, 250, 1)'],\n                ['contextMenuHoverColor', 'rgba(43, 48, 153, 1)'],\n                ['contextMenuItemBorderRadius', '3px'],\n                ['contextMenuItemMargin', '2px'],\n                ['contextMenuLabelDisplay', 'inline-block'],\n                ['contextMenuLabelMargin', '0 3px 0 0'],\n                ['contextMenuLabelMaxWidth', '700px'],\n                ['contextMenuLabelMinWidth', '75px'],\n                ['contextMenuMarginLeft', 3],\n                ['contextMenuMarginTop', -3],\n                ['contextMenuOpacity', '0.98'],\n                ['contextMenuPadding', '2px'],\n                ['contextMenuWindowMargin', 6],\n                ['cornerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cornerCellBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['editCellBackgroundColor', 'white'],\n                ['editCellBorder', 'solid 1px rgba(110, 168, 255, 1)'],\n                ['editCellBoxShadow', '0 2px 5px rgba(0,0,0,0.4)'],\n                ['editCellColor', 'black'],\n                ['editCellFontFamily', 'sans-serif'],\n                ['editCellFontSize', '16px'],\n                ['editCellPaddingLeft', 4],\n                ['gridBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['gridBorderWidth', 1],\n                ['columnHeaderOrderByArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['columnHeaderOrderByArrowBorderWidth', 1],\n                ['columnHeaderOrderByArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['columnHeaderOrderByArrowHeight', 8],\n                ['columnHeaderOrderByArrowMarginLeft', 0],\n                ['columnHeaderOrderByArrowMarginRight', 5],\n                ['columnHeaderOrderByArrowMarginTop', 6],\n                ['columnHeaderOrderByArrowWidth', 13],\n                ['minColumnWidth', 45],\n                ['minHeight', 24],\n                ['minRowHeight', 24],\n                ['name', 'default'],\n                ['reorderMarkerBackgroundColor', 'rgba(0, 0, 0, 0.1)'],\n                ['reorderMarkerBorderColor', 'rgba(0, 0, 0, 0.2)'],\n                ['reorderMarkerBorderWidth', 1.25],\n                ['reorderMarkerIndexBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['reorderMarkerIndexBorderWidth', 2.75],\n                ['rowHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['rowHeaderCellBorderColor', 'rgba(200, 200, 200, 1)'],\n                ['rowHeaderCellBorderWidth', 1],\n                ['rowHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellFont', '16px sans-serif'],\n                ['rowHeaderCellHeight', 25],\n                ['rowHeaderCellHorizontalAlignment', 'left'],\n                ['rowHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['rowHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['rowHeaderCellPaddingBottom', 5],\n                ['rowHeaderCellPaddingLeft', 5],\n                ['rowHeaderCellPaddingRight', 5],\n                ['rowHeaderCellPaddingTop', 5],\n                ['rowHeaderCellSelectedBackgroundColor', 'rgba(217, 217, 217, 1)'],\n                ['rowHeaderCellSelectedColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellVerticalAlignment', 'center'],\n                ['rowHeaderCellWidth', 57],\n                ['scrollBarActiveColor', 'rgba(125, 125, 125, 1)'],\n                ['scrollBarBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarBorderWidth', 0.5],\n                ['scrollBarBoxBorderRadius', 4.125],\n                ['scrollBarBoxColor', 'rgba(192, 192, 192, 1)'],\n                ['scrollBarBoxMargin', 2],\n                ['scrollBarBoxMinSize', 15],\n                ['scrollBarBoxWidth', 8],\n                ['scrollBarCornerBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarCornerBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarWidth', 11],\n                ['selectionOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionOverlayBorderWidth', 0.75],\n                ['treeArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['treeArrowBorderWidth', 1],\n                ['treeArrowClickRadius', 5],\n                ['treeArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['treeArrowHeight', 8],\n                ['treeArrowMarginLeft', 0],\n                ['treeArrowMarginRight', 5],\n                ['treeArrowMarginTop', 6],\n                ['treeArrowWidth', 13],\n                ['treeGridHeight', 250]\n            ]\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/defaults.js\n// module id = 1\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals XMLSerializer: false, define: true, Blob: false, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var perfCounters = [],\n            drawCount = 0,\n            perfWindowSize = 20;\n        self.htmlImageCache = {};\n        function drawOnAllImagesLoaded() {\n            var loaded = true;\n            Object.keys(self.htmlImageCache).forEach(function (html) {\n                if (!self.htmlImageCache[html].complete) {\n                    loaded = false;\n                }\n            });\n            if (loaded) {\n                self.draw();\n            }\n        }\n        function drawHtml(cell) {\n            var img,\n                v = cell.innerHTML || cell.formattedValue,\n                x = cell.x + self.canvasOffsetLeft,\n                y = cell.y + self.canvasOffsetTop;\n            if (self.htmlImageCache[v]) {\n                img = self.htmlImageCache[v];\n                if (img.height !== cell.height || img.width !== cell.width) {\n                    // height and width of the cell has changed, invalidate cache\n                    self.htmlImageCache[v] = undefined;\n                } else {\n                    if (!img.complete) {\n                        return;\n                    }\n                    return self.ctx.drawImage(img, x, y);\n                }\n            }\n            img = new Image(cell.width, cell.height);\n            self.htmlImageCache[v] = img;\n            img.onload = function () {\n                self.ctx.drawImage(img, x, y);\n                drawOnAllImagesLoaded();\n            };\n            img.src = 'data:image/svg+xml;base64,' + btoa(\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + cell.width + '\" height=\"' + cell.height + '\">\\n' +\n                    '<foreignObject class=\"node\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\\n' +\n                    '<body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;padding:0;\">\\n' +\n                    v + '\\n' +\n                    '</body>' +\n                    '</foreignObject>\\n' +\n                    '</svg>\\n'\n            );\n        }\n        function drawOrderByArrow(x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.columnHeaderOrderByArrowColor;\n            self.ctx.strokeStyle = self.style.columnHeaderOrderByArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + self.style.columnHeaderOrderByArrowMarginLeft;\n            y = y + self.style.columnHeaderOrderByArrowMarginTop;\n            if (self.orderDirection === 'asc') {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + self.style.columnHeaderOrderByArrowWidth, y);\n                self.ctx.lineTo(x + (self.style.columnHeaderOrderByArrowWidth * 0.5), y + self.style.columnHeaderOrderByArrowHeight);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y + self.style.columnHeaderOrderByArrowHeight);\n                self.ctx.lineTo(x + self.style.columnHeaderOrderByArrowWidth, y + self.style.columnHeaderOrderByArrowHeight);\n                self.ctx.lineTo(x + (self.style.columnHeaderOrderByArrowWidth * 0.5), y);\n                self.ctx.lineTo(x, y + self.style.columnHeaderOrderByArrowHeight);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return self.style.columnHeaderOrderByArrowMarginLeft\n                + self.style.columnHeaderOrderByArrowWidth\n                + self.style.columnHeaderOrderByArrowMarginRight;\n        }\n        function drawTreeArrow(cell, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.treeArrowColor;\n            self.ctx.strokeStyle = self.style.treeArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + self.style.treeArrowMarginLeft;\n            y = y + self.style.treeArrowMarginTop;\n            if (self.openChildren[cell.data[self.uniqueId]]) {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + self.style.treeArrowWidth, y);\n                self.ctx.lineTo(x + (self.style.treeArrowWidth * 0.5), y + self.style.treeArrowHeight);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y);\n                self.ctx.lineTo(x + self.style.treeArrowHeight, y + (self.style.treeArrowWidth * 0.5));\n                self.ctx.lineTo(x, y + self.style.treeArrowWidth);\n                self.ctx.lineTo(x, y);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return self.style.treeArrowMarginLeft\n                + self.style.treeArrowWidth\n                + self.style.treeArrowMarginRight;\n        }\n        function radiusRect(x, y, w, h, radius) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            var r = x + w, b = y + h;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x + radius, y);\n            self.ctx.lineTo(r - radius, y);\n            self.ctx.quadraticCurveTo(r, y, r, y + radius);\n            self.ctx.lineTo(r, y + h - radius);\n            self.ctx.quadraticCurveTo(r, b, r - radius, b);\n            self.ctx.lineTo(x + radius, b);\n            self.ctx.quadraticCurveTo(x, b, x, b - radius);\n            self.ctx.lineTo(x, y + radius);\n            self.ctx.quadraticCurveTo(x, y, x + radius, y);\n        }\n        function fillRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillRect(x, y, w, h);\n        }\n        function strokeRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.strokeRect(x, y, w, h);\n        }\n        function fillText(text, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillText(text, x, y);\n        }\n        function addBorderLine(c, pos) {\n            self.ctx.beginPath();\n            var p = {\n                t: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                },\n                r: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                b: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                l: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                },\n            };\n            p[pos]();\n            self.ctx.stroke();\n        }\n        function addEllipsis(text, width) {\n            var c, w = 0;\n            if (self.ellipsisCache[text] && self.ellipsisCache[text][width]) {\n                return self.ellipsisCache[text][width];\n            }\n            //TODO Add ellipsis back when there is a fast way to do it\n            w = self.ctx.measureText(text).width;\n            self.ellipsisCache[text] = self.ellipsisCache[text] || {};\n            c = {value: text, width: w};\n            self.ellipsisCache[text][width] = c;\n            return c;\n        }\n        function drawText(cell) {\n            var paddingLeft = self.style[cell.style + 'PaddingLeft'],\n                paddingTop = self.style[cell.style + 'PaddingTop'],\n                paddingRight = self.style[cell.style + 'PaddingRight'],\n                paddingBottom = self.style[cell.style + 'PaddingBottom'],\n                vPos = paddingTop + cell.height - (cell.height * 0.5),\n                hPos = paddingLeft + cell.treeArrowWidth + cell.orderByArrowWidth;\n            cell.text = addEllipsis(cell.formattedValue, cell.width - paddingRight - paddingLeft);\n            cell.text.height = cell.fontHeight;\n            if (cell.horizontalAlignment === 'right') {\n                hPos = cell.width - cell.text.width - paddingRight;\n            } else if (cell.horizontalAlignment === 'center') {\n                hPos = (cell.width / 2) - (cell.text.width / 2);\n            }\n            if (cell.verticalAlignment === 'top') {\n                vPos = paddingTop + cell.text.height;\n            } else if (cell.verticalAlignment === 'bottom') {\n                vPos = cell.height - paddingBottom - cell.text.height;\n            }\n            cell.text.x = cell.x + hPos;\n            cell.text.y = cell.y + vPos;\n            fillText(cell.text.value, cell.text.x, cell.text.y);\n        }\n        /**\n         * Redraws the grid. No matter what the change, this is the only method required to refresh everything.\n         * @memberof canvasDataGrid\n         * @name draw\n         * @method\n         */\n        self.draw = function (internal) {\n            if (self.dispatchEvent('beforedraw', {})) { return; }\n            if (!self.isChildGrid && (!self.height || !self.width)) {\n                return;\n            }\n            if (self.isChildGrid && internal) {\n                requestAnimationFrame(self.parentGrid.draw);\n                return;\n            }\n            if (self.intf.visible === false) {\n                return;\n            }\n            // initial values\n            var checkScrollHeight, rowHeaderCell, p, cx, cy, treeGrid, rowOpen,\n                rowHeight, cornerCell, y, x, c, h, w, s, r, rd, aCell,\n                selectionBorders = [],\n                rowHeaders = [],\n                l = self.data.length,\n                u = self.currentCell || {},\n                rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth(),\n                cellHeight = self.style.cellHeight;\n            drawCount += 1;\n            p = performance.now();\n            // if data length has changed, there is no way to know\n            if (self.data.length > self.orders.rows.length) {\n                self.createRowOrders();\n            }\n            function drawScrollBars() {\n                var v = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-bar'\n                    },\n                    n = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-bar'\n                    },\n                    vb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-box'\n                    },\n                    nb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-box'\n                    },\n                    co = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        isCorner: true,\n                        isScrollBoxCorner: true,\n                        style: 'scroll-box-corner'\n                    },\n                    m = (self.style.scrollBarBoxMargin * 2),\n                    d = self.style.scrollBarBoxMargin * 0.5;\n                self.ctx.strokeStyle = self.style.scrollBarBorderColor;\n                self.ctx.lineWidth = self.style.scrollBarBorderWidth;\n                // vertical\n                v.x += w - self.style.scrollBarWidth - self.style.scrollBarBorderWidth - d;\n                v.y += rowHeaderCellHeight;\n                v.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                v.height = h - rowHeaderCellHeight - self.style.scrollBarWidth - d - m;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(v.x, v.y, v.width, v.height + m);\n                strokeRect(v.x, v.y, v.width, v.height + m);\n                // vertical box\n                vb.x = v.x + self.style.scrollBarBoxMargin;\n                vb.y = rowHeaderCellHeight + self.style.scrollBarBoxMargin\n                    + ((v.height - self.scrollBox.scrollBoxHeight)\n                        * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight));\n                vb.width = self.style.scrollBarBoxWidth;\n                vb.height = self.scrollBox.scrollBoxHeight;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/vertical/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (vb.height < v.height) {\n                    radiusRect(vb.x, vb.y, vb.width, vb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                // horizontal\n                n.x += columnHeaderCellWidth;\n                n.y += h - self.style.scrollBarWidth - d;\n                n.width = w - self.style.scrollBarWidth - columnHeaderCellWidth - d - m;\n                n.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(n.x, n.y, n.width + m, n.height);\n                strokeRect(n.x, n.y, n.width + m, n.height);\n                // horizontal box\n                nb.y = n.y + self.style.scrollBarBoxMargin;\n                nb.x = columnHeaderCellWidth + self.style.scrollBarBoxMargin\n                    + ((n.width - self.scrollBox.scrollBoxWidth)\n                        * (self.scrollBox.scrollLeft / self.scrollBox.scrollWidth));\n                nb.width = self.scrollBox.scrollBoxWidth;\n                nb.height = self.style.scrollBarBoxWidth;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/horizontal/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (nb.width < n.width) {\n                    radiusRect(nb.x, nb.y, nb.width, nb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                //corner\n                self.ctx.strokeStyle = self.style.scrollBarCornerBorderColor;\n                self.ctx.fillStyle = self.style.scrollBarCornerBackgroundColor;\n                co.x = n.x + n.width + m;\n                co.y = v.y + v.height + m;\n                co.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                co.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                radiusRect(co.x, co.y, co.width, co.height, 0);\n                self.ctx.stroke();\n                self.ctx.fill();\n                self.visibleCells.unshift(v);\n                self.visibleCells.unshift(vb);\n                self.visibleCells.unshift(n);\n                self.visibleCells.unshift(nb);\n                self.visibleCells.unshift(co);\n                self.scrollBox.bar = {\n                    v: v,\n                    h: n\n                };\n                self.scrollBox.box = {\n                    v: vb,\n                    h: nb\n                };\n            }\n            function drawCell(d, rowIndex, rowOrderIndex) {\n                return function drawEach(header, headerIndex, columnOrderIndex) {\n                    var cellStyle = header.style || 'cell',\n                        cellGridAttributes,\n                        cell,\n                        isHeader = /HeaderCell/.test(cellStyle),\n                        isCorner = /cornerCell/.test(cellStyle),\n                        isRowHeader = 'rowHeaderCell' === cellStyle,\n                        isColumnHeader = 'columnHeaderCell' === cellStyle,\n                        selected = self.selections[rowOrderIndex] && self.selections[rowOrderIndex].indexOf(columnOrderIndex) !== -1,\n                        hovered = self.hovers[d[self.uniqueId]] && self.hovers[d[self.uniqueId]].indexOf(columnOrderIndex) !== -1,\n                        active = self.activeCell.rowIndex === rowOrderIndex && self.activeCell.columnIndex === columnOrderIndex,\n                        isGrid = typeof d[header.name] === 'object' && d[header.name] !== null && d[header.name] !== undefined,\n                        activeHeader = (self.orders.rows[self.activeCell.rowIndex] === rowOrderIndex\n                                || self.orders.columns[self.activeCell.columnIndex] === columnOrderIndex)\n                            && (columnOrderIndex === -1 || rowOrderIndex === -1)\n                            ? (isRowHeader ? 'activeRowHeaderCell' : 'activeColumnHeaderCell') : false,\n                        val,\n                        f = self.formatters[header.type || 'string'],\n                        orderByArrowSize = 0,\n                        treeArrowSize = 0,\n                        cellWidth = self.sizes.columns[isRowHeader ? 'cornerCell' : header[self.uniqueId]] || header.width,\n                        ev = {\n                            value: d[header.name],\n                            row: d,\n                            header: header\n                        };\n                    if (cellStyle === 'headerCellCap') {\n                        cellWidth = w - x;\n                    }\n                    // if no data or schema are defined, a width is provided to the stub column\n                    if (cellWidth === undefined) {\n                        cellWidth = self.style.columnWidth;\n                    }\n                    if (x + cellWidth + self.style.cellBorderWidth < 0) {\n                        x += cellWidth + self.style.cellBorderWidth;\n                    }\n                    if (active) {\n                        cellStyle = 'activeCell';\n                    }\n                    if (self.visibleRows.indexOf(rowIndex) === -1 && !isHeader) {\n                        self.visibleRows.push(rowIndex);\n                    }\n                    val = self.dispatchEvent('formatcellvalue', ev);\n                    if (!self.dispatchEvent('beforerendercell', ev)) {\n                        cx = x;\n                        cy = y;\n                        if (cellStyle === 'cornerCell') {\n                            cx = 0;\n                            cy = 0;\n                        } else if (isRowHeader) {\n                            cx = 0;\n                        } else if (isHeader) {\n                            cy = 0;\n                        }\n                        cell = {\n                            type: isGrid ? 'canvas-datagrid-cell' : header.type,\n                            style: cellStyle,\n                            nodeType: 'canvas-datagrid-cell',\n                            x: cx,\n                            y: cy,\n                            horizontalAlignment: self.style[cellStyle + 'HorizontalAlignment'],\n                            verticalAlignment: self.style[cellStyle + 'VerticalAlignment'],\n                            offsetTop: self.canvasOffsetTop + cy,\n                            offsetLeft: self.canvasOffsetLeft + cx,\n                            scrollTop: self.scrollBox.scrollTop,\n                            scrollLeft: self.scrollBox.scrollLeft,\n                            active: active || activeHeader,\n                            hovered: hovered,\n                            selected: selected,\n                            width: cellWidth,\n                            height: cellHeight,\n                            offsetWidth: cellWidth,\n                            offsetHeight: cellHeight,\n                            parentNode: self.intf.parentNode,\n                            offsetParent: self.intf.parentNode,\n                            data: d,\n                            isCorner: isCorner,\n                            isHeader: isHeader,\n                            isColumnHeader: isColumnHeader,\n                            isHeaderCellCap: !!header.isHeaderCellCap,\n                            isRowHeader: isRowHeader,\n                            rowOpen: rowOpen,\n                            header: header,\n                            columnIndex: columnOrderIndex,\n                            rowIndex: rowOrderIndex,\n                            sortColumnIndex: headerIndex,\n                            sortRowIndex: rowIndex,\n                            isGrid: isGrid,\n                            gridId: (self.attributes.name || '') + d[self.uniqueId] + ':' + header[self.uniqueId],\n                            parentGrid: self.intf,\n                            innerHTML: '',\n                            activeHeader: activeHeader,\n                            value: isHeader && !isRowHeader ? (header.title || header.name) : d[header.name]\n                        };\n                        ev.cell = cell;\n                        cell.userHeight = cell.isHeader ? self.sizes.rows[-1] : rowHeight;\n                        cell.userWidth = cell.isHeader ? self.sizes.columns.cornerCell : self.sizes.columns[header[self.uniqueId]];\n                        cell[self.uniqueId] = d[self.uniqueId];\n                        self.visibleCells.unshift(cell);\n                        self.ctx.fillStyle = self.style[cellStyle + 'BackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'BorderColor'];\n                        self.ctx.lineWidth = self.style[cellStyle + 'BorderWidth'];\n                        if (hovered) {\n                            self.ctx.fillStyle = self.style[cellStyle + 'HoverBackgroundColor'];\n                            self.ctx.strokeStyle = self.style[cellStyle + 'HoverBorderColor'];\n                        }\n                        if (selected) {\n                            self.ctx.fillStyle = self.style[cellStyle + 'SelectedBackgroundColor'];\n                            self.ctx.strokeStyle = self.style[cellStyle + 'SelectedBorderColor'];\n                        }\n                        if (activeHeader) {\n                            self.ctx.fillStyle = self.style[activeHeader + 'BackgroundColor'];\n                        }\n                        self.dispatchEvent('rendercell', ev);\n                        if (cell.isGrid) {\n                            if (cell.height !== rowHeight) {\n                                cell.height = rowHeight || self.style.cellHeightWithChildGrid;\n                                checkScrollHeight = true;\n                            }\n                            cell.width = self.sizes.columns[header[self.uniqueId]] || self.style.cellWidthWithChildGrid;\n                        }\n                        if (rowOpen && !cell.isRowHeader) {\n                            cell.height = self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight;\n                        }\n                        if (!cell.isGrid) {\n                            fillRect(cx, cy, cell.width, cell.height);\n                            strokeRect(cx, cy, cell.width, cell.height);\n                        }\n                        self.ctx.save();\n                        radiusRect(cell.x, cell.y, cell.width, cell.height, 0);\n                        self.ctx.clip();\n                        self.dispatchEvent('afterrendercell', ev);\n                        if (cell.height !== cellHeight && !(rowOpen && !cell.isRowHeader)) {\n                            self.sizes.rows[isHeader ? -1 : d[self.uniqueId]] = cell.height;\n                            checkScrollHeight = true;\n                        }\n                        if (cell.width !== cellWidth) {\n                            self.sizes.columns[header[self.uniqueId]] = cell.width;\n                            checkScrollHeight = true;\n                        }\n                        if (isRowHeader && self.attributes.tree) {\n                            if (!self.dispatchEvent('rendertreearrow', ev)) {\n                                treeArrowSize = drawTreeArrow(cell, self.style[cellStyle + 'PaddingLeft'], cy, 0);\n                            }\n                        }\n                        if ((self.attributes.showRowNumbers && isRowHeader)\n                                || !isRowHeader) {\n                            if (cell.isGrid) {\n                                if (!self.childGrids[cell.gridId]) {\n                                    cellGridAttributes = self.args.cellGridAttributes || self.args;\n                                    cellGridAttributes.name = self.attributes.saveAppearance ? cell.gridId : undefined;\n                                    cellGridAttributes.parentNode = cell;\n                                    cellGridAttributes.data = d[header.name];\n                                    self.childGrids[cell.gridId] = self.createGrid(cellGridAttributes);\n                                    self.sizes.rows[rd[self.uniqueId]]\n                                        = self.sizes.rows[rd[self.uniqueId]] || self.style.cellGridHeight;\n                                    checkScrollHeight = true;\n                                }\n                                cell.grid = self.childGrids[cell.gridId];\n                                cell.grid.parentNode = cell;\n                                cell.grid.visible = true;\n                                cell.grid.draw();\n                                self.dispatchEvent('rendercellgrid', ev);\n                            } else {\n                                if (self.childGrids[cell.gridId]) {\n                                    self.childGrids[cell.gridId].parentNode.offsetHeight = 0;\n                                }\n                                if (isHeader && self.orderBy === header.name) {\n                                    if (!self.dispatchEvent('renderorderbyarrow', ev)) {\n                                        orderByArrowSize = drawOrderByArrow(cx + self.style[cellStyle + 'PaddingLeft'], 0);\n                                    }\n                                }\n                                self.ctx.fillStyle = self.style[cellStyle + 'Color'];\n                                if (hovered) {\n                                    self.ctx.fillStyle = self.style[cellStyle + 'HoverColor'];\n                                }\n                                if (selected) {\n                                    self.ctx.fillStyle = self.style[cellStyle + 'SelectedColor'];\n                                }\n                                if (activeHeader) {\n                                    self.ctx.fillStyle = self.style[activeHeader + 'Color'];\n                                }\n                                self.ctx.font = self.style[cellStyle + 'Font'];\n                                cell.fontHeight = self.style[cellStyle + 'FontHeight'];\n                                cell.treeArrowWidth = treeArrowSize;\n                                cell.orderByArrowWidth = orderByArrowSize;\n                                val = val !== undefined ? val : f\n                                    ? f(ev) : '';\n                                if (val === undefined && !f) {\n                                    val = '';\n                                    console.warn('canvas-datagrid: Unknown format '\n                                        + header.type + ' add a cellFormater');\n                                }\n                                cell.formattedValue = ((val !== undefined && val !== null) ? val : '').toString();\n                                if (self.columnFilters && self.columnFilters[val] !== undefined && isHeader) {\n                                    cell.formattedValue = self.attributes.filterTextPrefix + val;\n                                }\n                                if (!self.dispatchEvent('rendertext', ev)) {\n                                    if (cell.innerHTML || header.type === 'html') {\n                                        drawHtml(cell);\n                                    } else {\n                                        drawText(cell);\n                                    }\n                                }\n                            }\n                        }\n                        if (active) {\n                            aCell = cell;\n                        }\n                        if (selected && !isRowHeader) {\n                            if ((!self.selections[cell.rowIndex - 1]\n                                    || self.selections[cell.rowIndex - 1].indexOf(cell.columnIndex) === -1\n                                    || cell.rowIndex === 0)\n                                    && !cell.isHeader) {\n                                selectionBorders.push([cell, 't']);\n                            }\n                            if (!self.selections[cell.rowIndex + 1]\n                                    || self.selections[cell.rowIndex + 1].indexOf(cell.columnIndex) === -1) {\n                                selectionBorders.push([cell, 'b']);\n                            }\n                            if (!self.selections[cell.rowIndex] || cell.columnIndex === 0\n                                    || self.selections[cell.rowIndex].indexOf(cell.columnIndex - 1) === -1) {\n                                selectionBorders.push([cell, 'l']);\n                            }\n                            if (!self.selections[cell.rowIndex] || cell.columnIndex === s.length\n                                    || self.selections[cell.rowIndex].indexOf(cell.columnIndex + 1) === -1) {\n                                selectionBorders.push([cell, 'r']);\n                            }\n                        }\n                        self.ctx.restore();\n                        x += cell.width + self.style.cellBorderWidth;\n                        return cell.width;\n                    }\n                };\n            }\n            function drawRowHeader(rowData, index, rowOrderIndex) {\n                var a;\n                if (self.attributes.showRowHeaders) {\n                    x = 0;\n                    rowHeaderCell = {'rowHeaderCell': index + 1 };\n                    rowHeaderCell[self.uniqueId] = rowData[self.uniqueId];\n                    a = {\n                        name: 'rowHeaderCell',\n                        width: self.style.rowHeaderCellWidth,\n                        style: 'rowHeaderCell',\n                        type: 'string',\n                        data: rowData[self.uniqueId],\n                        index: -1\n                    };\n                    a[self.uniqueId] = rowData[self.uniqueId];\n                    rowOpen = self.openChildren[rowData[self.uniqueId]];\n                    drawCell(rowHeaderCell, index, rowOrderIndex)(a, -1, -1);\n                }\n            }\n            function drawHeaders() {\n                var d, g = s.length, i, o, columnHeaderCell, header;\n                rowHeaders.forEach(function (rArgs) {\n                    y = rArgs[3];\n                    cellHeight = rArgs[4];\n                    drawRowHeader(rArgs[0], rArgs[1], rArgs[2]);\n                });\n                if (self.attributes.showColumnHeaders) {\n                    x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft;\n                    if (self.attributes.showRowHeaders) {\n                        x += columnHeaderCellWidth;\n                    }\n                    y = 0;\n                    // cell height might have changed during drawing\n                    cellHeight = self.getRowHeaderCellHeight();\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        header = s[i];\n                        d = {\n                            title: header.title,\n                            name: header.name,\n                            width: header.width,\n                            style: 'columnHeaderCell',\n                            type: 'string',\n                            index: o,\n                            order: i\n                        };\n                        columnHeaderCell = {'columnHeaderCell': header.title || header.name};\n                        columnHeaderCell[self.uniqueId] = 'h' + header[self.uniqueId];\n                        d[self.uniqueId] = header[self.uniqueId];\n                        x += drawCell(columnHeaderCell, -1, -1)(d, o, i);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    // fill in the space right of the headers\n                    if (x < w) {\n                        c = {\n                            name: '',\n                            width: self.style.scrollBarWidth,\n                            style: 'headerCellCap',\n                            isHeaderCell: true,\n                            isHeaderCellCap: true,\n                            type: 'string',\n                            index: s.length\n                        };\n                        c[self.uniqueId] = 'columnHeaderCell';\n                        drawCell({endCap: ''}, -1, -1)(c, -1, -1);\n                    }\n                    // fill in the space right of the headers\n                    if (self.attributes.showRowHeaders) {\n                        cornerCell = {'cornerCell': '' };\n                        cornerCell[self.uniqueId] = 'cornerCell';\n                        x = 0;\n                        c = {\n                            name: 'cornerCell',\n                            width: self.style.rowHeaderCellWidth,\n                            style: 'cornerCell',\n                            type: 'string',\n                            index: -1\n                        };\n                        c[self.uniqueId] = 'cornerCell';\n                        drawCell(cornerCell, -1, -1)(c, -1, -1);\n                    }\n                }\n            }\n            function drawRow(r, d) {\n                var i, treeHeight, rowSansTreeHeight, o, g = s.length;\n                if (y - (cellHeight * 2) > h) {\n                    return false;\n                }\n                rd = self.data[r];\n                rowOpen = self.openChildren[rd[self.uniqueId]];\n                rowSansTreeHeight = self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight;\n                treeHeight = (rowOpen ? self.sizes.trees[rd[self.uniqueId]] : 0);\n                rowHeight = rowSansTreeHeight + treeHeight;\n                if (y < rowHeight * -1) {\n                    return false;\n                }\n                if (self.attributes.showRowHeaders) {\n                    x += columnHeaderCellWidth;\n                }\n                cellHeight = rowHeight;\n                for (o = self.scrollIndexLeft; o < g; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        break;\n                    }\n                }\n                // cell height might have changed during drawing\n                cellHeight = rowHeight;\n                x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft + self.style.cellBorderWidth;\n                // don't draw a tree for the new row\n                treeGrid = self.childGrids[rd[self.uniqueId]];\n                if (r !== self.data.length && rowOpen) {\n                    treeGrid.visible = true;\n                    treeGrid.parentNode = {\n                        offsetTop: y + rowSansTreeHeight + self.canvasOffsetTop,\n                        offsetLeft: columnHeaderCellWidth - 1 + self.canvasOffsetLeft,\n                        offsetHeight: treeHeight,\n                        offsetWidth: self.width - columnHeaderCellWidth - self.style.scrollBarWidth - 1,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: self.style,\n                        nodeType: 'canvas-datagrid-tree',\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        rowIndex: r\n                    };\n                    self.visibleCells.unshift({\n                        rowIndex: x,\n                        columnIndex: 0,\n                        y: treeGrid.parentNode.offsetTop,\n                        x: treeGrid.parentNode.offsetLeft,\n                        height: treeGrid.parentNode.offsetHeight,\n                        width: treeGrid.parentNode.offsetWidth,\n                        style: 'tree-grid',\n                        type: treeGrid.parentNode.nodeType\n                    });\n                    treeGrid.draw();\n                } else if (treeGrid) {\n                    treeGrid.parentNode.offsetHeight = 0;\n                    delete self.sizes.trees[rd[self.uniqueId]];\n                }\n                rowHeaders.push([rd, r, d, y, rowHeight]);\n                y += cellHeight + self.style.cellBorderWidth;\n                return true;\n            }\n            function initDraw() {\n                self.visibleRows = [];\n                s = self.getVisibleSchema();\n                self.visibleCells = [];\n                self.canvasOffsetTop = self.isChildGrid ? self.parentNode.offsetTop : 0;\n                self.canvasOffsetLeft = self.isChildGrid ? self.parentNode.offsetLeft : 0;\n                h = self.height;\n                w = self.width;\n                if (!self.isChildGrid) {\n                    self.ctx.scale(window.devicePixelRatio, window.devicePixelRatio);\n                }\n            }\n            function drawBackground() {\n                radiusRect(0, 0, w, h, 0);\n                self.ctx.clip();\n                self.ctx.fillStyle = self.style.backgroundColor;\n                fillRect(0, 0, w, h);\n            }\n            function drawRows() {\n                var o, n, i, g = s.length;\n                x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft + self.style.cellBorderWidth;\n                y = (self.scrollBox.scrollTop * -1) + rowHeaderCellHeight + self.scrollPixelTop + self.style.cellBorderWidth;\n                for (r = self.scrollIndexTop; r < l; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.showNewRow) {\n                    if (self.attributes.showRowHeaders) {\n                        x += columnHeaderCellWidth;\n                    }\n                    rowHeight = cellHeight = self.style.cellHeight;\n                    rowOpen = false;\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        x += drawCell(self.newRow, self.data.length, self.data.length)(s[i], i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    rowHeaders.push([self.newRow, self.data.length, self.data.length, y, rowHeight]);\n                }\n            }\n            function drawReorderMarkers() {\n                if (!self.reorderObject) { return; }\n                var b = {\n                        height: self.reorderObject.height,\n                        width: self.reorderObject.width,\n                        x: self.reorderObject.x + self.reorderObject.dragOffset.x,\n                        y: self.reorderObject.y + self.reorderObject.dragOffset.y\n                    },\n                    m = {\n                        width: w,\n                        heigth: h,\n                        x: 0,\n                        y: 0\n                    };\n                self.ctx.fillStyle = self.style.reorderMarkerBackgroundColor;\n                self.ctx.lineWidth = self.style.reorderMarkerBorderWidth;\n                self.ctx.strokeStyle = self.style.reorderMarkerBorderColor;\n                if (self.dragMode === 'row-reorder') {\n                    b.width = w;\n                    b.x = 0;\n                    m.width = w;\n                    m.y = self.currentCell.y;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.rowIndex !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex - 1 !== self.reorderObject.rowIndex) {\n                        addBorderLine(m, 't');\n                    }\n                } else if (self.dragMode === 'column-reorder' && self.reorderObject) {\n                    b.height = h;\n                    b.y = 0;\n                    m.height = h;\n                    m.x = self.currentCell.x;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.columnIndex !== self.reorderObject.columnIndex\n                            && self.currentCell.columnIndex - 1 !== self.reorderObject.columnIndex) {\n                        addBorderLine(m, 'l');\n                    }\n                }\n            }\n            function drawBorder() {\n                self.ctx.lineWidth = self.style.gridBorderWidth;\n                self.ctx.strokeStyle = self.style.gridBorderColor;\n                strokeRect(0, 0, self.width, self.height);\n            }\n            function drawSelectionBorders() {\n                self.ctx.lineWidth = self.style.selectionOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.selectionOverlayBorderColor;\n                selectionBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n            }\n            function drawActiveCell() {\n                if (!aCell) { return; }\n                if (self.attributes.selectionMode === 'row') {\n                    if (self.activeCell && self.activeCell.rowIndex === aCell.rowIndex) {\n                        self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                        self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                        strokeRect(0, aCell.y, self.getHeaderWidth() + columnHeaderCellWidth, rowHeight);\n                    }\n                } else {\n                    self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                    self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                    strokeRect(aCell.x, aCell.y, aCell.width, aCell.height);\n                }\n            }\n            function drawDebug() {\n                perfCounters[drawCount % perfWindowSize] = performance.now() - p;\n                var d;\n                if (self.attributes.debug) {\n                    self.ctx.font = '11px sans-serif';\n                    d = {};\n                    d.perf = (perfCounters.reduce(function (a, b) {\n                        return a + b;\n                    }, 0) / perfCounters.length).toFixed(1)\n                        + 'ms (' +\n                        perfCounters.map(function (a) { return a.toFixed(1); }).join(', ') + ')';\n                    d.htmlImages = Object.keys(self.htmlImageCache).length;\n                    d.scrollBox = self.scrollBox.toString();\n                    d.scrollIndex = '{\"top\": ' + self.scrollIndexTop + ', \"left\": ' + self.scrollIndexLeft + '}';\n                    d.scrollPixel = '{\"top\": ' + self.scrollPixelTop + ', \"left\": ' + self.scrollPixelLeft + '}';\n                    d.canvasOffset = '{\"top\": ' + self.canvasOffsetTop + ', \"left\": ' + self.canvasOffsetLeft + '}';\n                    d.pointerLockPosition =  self.pointerLockPosition ?\n                            self.pointerLockPosition.x + ', ' + self.pointerLockPosition.y : '';\n                    d.size = '{\"width\": ' + self.width + ', \"height\": ' + self.height + '}';\n                    d.mouse = '{\"x\": ' + self.mouse.x + ', \"y\": ' + self.mouse.y + '}';\n                    d.touch = !self.touchStart\n                        ? '' : '{\"x\": ' + self.touchStart.x + ', \"y\": ' + self.touchStart.y + \"}\";\n                    d.entities = self.visibleCells.length;\n                    d.hasFocus = self.hasFocus;\n                    d.dragMode = self.dragMode;\n                    if (self.currentCell) {\n                        d.columnIndex = self.currentCell.columnIndex;\n                        d.rowIndex = self.currentCell.rowIndex;\n                        d.sortColumnIndex = self.currentCell.sortColumnIndex;\n                        d.sortRowIndex = self.currentCell.sortRowIndex;\n                        d.context = self.currentCell.context;\n                        d.dragContext = self.currentCell.dragContext;\n                        d.style = self.currentCell.style;\n                        d.type = self.currentCell.type;\n                    }\n                    self.ctx.save();\n                    Object.keys(d).forEach(function (key, index) {\n                        var m = key + ': ' + d[key],\n                            lh = 14;\n                        self.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n                        fillRect(columnHeaderCellWidth, lh + (index * lh), 800, lh);\n                        self.ctx.fillStyle = 'rgba(0, 0, 0, 1)';\n                        fillText(m, columnHeaderCellWidth + 1, rowHeaderCellHeight + (index * lh));\n                    });\n                    self.ctx.restore();\n                }\n            }\n            self.ctx.save();\n            initDraw();\n            drawBackground();\n            drawRows();\n            drawSelectionBorders();\n            drawActiveCell();\n            drawHeaders();\n            drawReorderMarkers();\n            drawScrollBars();\n            if (checkScrollHeight) {\n                self.resize(true);\n            }\n            drawBorder();\n            drawDebug();\n            if (self.dispatchEvent('afterdraw', {})) { return; }\n            self.ctx.restore();\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/draw.js\n// module id = 2\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var touchDelta = {x: 0, y: 0, scrollTop: 0, scrollLeft: 0},\n            touchAnimateTo = {scrollLeft: 0, scrollTop: 0},\n            touchSigma = {scrollLeft: 0, scrollTop: 0},\n            xPPS = 0,\n            yPPS = 0,\n            touchingCell = false,\n            startingCell = false,\n            animationFrames = 0;\n        self.getTouchPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.touches[0].clientX - rect.left,\n                    y: e.touches[0].clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        self.calculatePPS = function () {\n            xPPS = ((touchDelta.scrollLeft - touchSigma.scrollLeft) / (touchDelta.t - touchSigma.t));\n            yPPS = ((touchDelta.scrollTop - touchSigma.scrollTop) / (touchDelta.t - touchSigma.t));\n            touchSigma = {\n                scrollLeft: touchDelta.scrollLeft,\n                scrollTop: touchDelta.scrollTop,\n                t: performance.now() / 1000\n            };\n        };\n        self.touchCell = function (e) {\n            return function () {\n                clearInterval(self.touchCalcTimeout);\n                var pos = self.getTouchPos(e);\n                if (Math.abs(touchDelta.x) + Math.abs(touchDelta.y) < self.attributes.touchDeadZone) {\n                    touchingCell = self.getCellAt(pos.x, pos.y);\n                    self.mousemove(e, pos);\n                    self.mousedown(e, pos);\n                    self.mousemove(e, pos);\n                    self.draw();\n                }\n            };\n        };\n        self.touchstart = function (e) {\n            touchingCell = false;\n            self.touchStart = self.getTouchPos(e);\n            startingCell = self.getCellAt(self.touchStart.x, self.touchStart.y, true);\n            if (self.dispatchEvent('touchstart', {NativeEvent: e, cell: self.startingCell})) { return; }\n            self.stopPropagation(e);\n            e.preventDefault();\n            self.touchScrollStart = {\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: performance.now() / 1000\n            };\n            touchDelta = {\n                x: self.touchStart.x,\n                y: self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: 0\n            };\n            self.touchmove(e);\n            clearTimeout(self.touchTimeout);\n            clearInterval(self.touchCalcTimeout);\n            self.touchTimeout = setTimeout(self.touchCell(e), self.attributes.touchSelectTimeMs);\n            self.touchCalcTimeout = setInterval(self.calculatePPS, 20);\n            self.touchHaltAnimation = true;\n            document.body.addEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.addEventListener('touchend', self.touchend, false);\n            document.body.addEventListener('touchcancel', self.touchcancel, false);\n        };\n        self.easing = function (t, b, c, d) {\n            return c * (t / d) * (2 - t) + b;\n        };\n        self.touchEndAnimation = function () {\n            if (!self.canvas || !self.scrollBox.scrollTo) { return requestAnimationFrame(self.touchEndAnimation); }\n            var x,\n                y,\n                n = performance.now() / 1000,\n                d = (self.attributes.touchReleaseAnimationDurationMs / 1000),\n                t;\n            touchDelta.t = touchDelta.t || n + d;\n            t = n - touchDelta.t + 1;\n            if (t > 1 || self.touchHaltAnimation || (animationFrames > 1000)) {\n                animationFrames = 0;\n                self.touchHaltAnimation = false;\n                touchAnimateTo = {scrollLeft: -1, scrollTop: -1};\n                return;\n            }\n            animationFrames += 1;\n            x = self.easing(t, touchDelta.scrollLeft, -touchAnimateTo.scrollLeft, d);\n            y = self.easing(t, touchDelta.scrollTop, -touchAnimateTo.scrollTop, d);\n            self.scrollBox.scrollTo(x, y);\n            requestAnimationFrame(self.touchEndAnimation);\n        };\n        self.touchend = function (e) {\n            if (self.dispatchEvent('touchend', {NativeEvent: e})) { return; }\n            var dz = Math.abs(touchDelta.x) + Math.abs(touchDelta.y) < self.attributes.touchDeadZone,\n                pos = {\n                    x: self.touchStart.x + touchDelta.x,\n                    y: self.touchStart.y + touchDelta.y\n                },\n                cell = self.getCellAt(pos.x, pos.y);\n            if (!self.hasFocus) { return; }\n            if (touchingCell) {\n                self.mouseup(e, self.touchStart);\n            } else if (dz) {\n                if (cell.active) {\n                    self.beginEditAt(cell.columnIndex, cell.rowIndex);\n                } else {\n                    self.mousedown(e, self.touchStart);\n                    self.mouseup(e, self.touchStart);\n                    self.click(e, self.touchStart);\n                }\n            }\n            touchingCell = false;\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n            clearTimeout(self.touchTimeout);\n            clearInterval(self.touchCalcTimeout);\n            self.calculatePPS();\n            touchAnimateTo.scrollLeft = xPPS * self.attributes.touchReleaseAcceleration;\n            touchAnimateTo.scrollTop = yPPS * self.attributes.touchReleaseAcceleration;\n            self.touchHaltAnimation = false;\n            if (animationFrames === 0 && !/-scroll-/.test(startingCell.style) && !dz) {\n                self.touchEndAnimation();\n            }\n        };\n        self.touchmove = function (e) {\n            var d = self.getTouchPos(e);\n            if (self.dispatchEvent('touchmove', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (!self.hasFocus) { return; }\n            touchDelta = {\n                x: d.x - self.touchStart.x,\n                y: d.y - self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: 0\n            };\n            if (/vertical-scroll-/.test(startingCell.style)) {\n                self.scrollBox.scrollTop = self.scrollBox.scrollHeight * (d.y / self.height);\n            } else if (/horizontal-scroll-/.test(startingCell.style)) {\n                self.scrollBox.scrollLeft = self.scrollBox.scrollWidth * (d.x / self.width);\n            } else if (touchingCell) {\n                self.mousemove(e, d);\n                self.draw();\n            } else {\n                if (animationFrames === 0) {\n                    self.scrollBox.scrollTo(self.touchScrollStart.scrollLeft - touchDelta.x,\n                        self.touchScrollStart.scrollTop - touchDelta.y);\n                }\n            }\n        };\n        self.touchcancel = function (e) {\n            if (self.dispatchEvent('touchcancel', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) { return; }\n            self.touchend(e);\n            touchingCell = false;\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n            return;\n        };\n        self.stopPropagation = function (e) { e.stopPropagation(); };\n        self.addEventListener = function (ev, fn) {\n            self.events[ev] = self.events[ev] || [];\n            self.events[ev].unshift(fn);\n        };\n        self.removeEventListener = function (ev, fn) {\n            (self.events[ev] || []).forEach(function removeEachListener(sfn, idx) {\n                if (fn === sfn) {\n                    self.events[ev].splice(idx, 1);\n                }\n            });\n        };\n        self.dispatchEvent = function (ev, e) {\n            var defaultPrevented;\n            function preventDefault() {\n                defaultPrevented = true;\n            }\n            if (!self.events[ev]) { return; }\n            self.events[ev].forEach(function dispatchEachEvent(fn) {\n                e.ctx = self.ctx;\n                e.preventDefault = preventDefault;\n                fn.apply(self.intf, [e]);\n            });\n            return defaultPrevented;\n        };\n        self.resize = function (drawAfterResize) {\n            var cellBorder = self.style.cellBorderWidth * 2,\n                columnHeaderCellBorder =  self.style.columnHeaderCellBorderWidth * 2,\n                scrollHeight,\n                scrollWidth,\n                rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth(),\n                // TODO: What the hell are these numbers!?  They are probably some value in the style.\n                scrollDragPositionOffsetY = 30,\n                scrollDragPositionOffsetX = 15;\n            if (self.isChildGrid) {\n                self.height = self.parentNode.offsetHeight;\n                self.width = self.parentNode.offsetWidth;\n            } else {\n                if (!self.parentIsCanvas) {\n                    self.height = self.parentDOMNode.offsetHeight;\n                    self.width = self.parentDOMNode.offsetWidth;\n                    if (self.isComponent) {\n                        self.height = self.shadowRootParentElement.offsetHeight;\n                        self.width = self.shadowRootParentElement.offsetWidth;\n                    }\n                    self.canvas.height = self.height * window.devicePixelRatio;\n                    self.canvas.width = self.width * window.devicePixelRatio;\n                    self.canvas.style.height = self.height + 'px';\n                    self.canvas.style.width = self.width + 'px';\n                }\n                self.canvasOffsetTop = self.args.canvasOffsetTop || 0;\n                self.canvasOffsetLeft = self.args.canvasOffsetLeft || 0;\n            }\n            scrollHeight = self.data.reduce(function reduceData(accumulator, row) {\n                return accumulator\n                    + (self.sizes.rows[row[self.uniqueId]] || self.style.cellHeight)\n                    + (self.sizes.trees[row[self.uniqueId]] || 0)\n                    + cellBorder;\n            }, 0) || 0;\n            scrollWidth = self.getVisibleSchema().reduce(function reduceSchema(accumulator, column) {\n                if (column.hidden) { return accumulator; }\n                return accumulator + (self.sizes.columns[column[self.uniqueId]] || column.width || self.style.columnWidth) + cellBorder;\n            }, 0) || 0;\n            if (self.attributes.showNewRow) {\n                scrollHeight += self.style.cellHeight + cellBorder;\n            }\n            self.scrollBox.width = self.width - columnHeaderCellWidth;\n            self.scrollBox.height = self.height - rowHeaderCellHeight - columnHeaderCellBorder;\n            self.scrollBox.top = rowHeaderCellHeight + columnHeaderCellBorder;\n            self.scrollBox.left = columnHeaderCellWidth;\n            self.scrollBox.scrollHeight = scrollHeight + self.style.scrollBarWidth - self.scrollBox.height;\n            self.scrollBox.scrollWidth = scrollWidth + self.style.scrollBarWidth - self.scrollBox.width;\n            self.scrollBox.widthBoxRatio = ((self.scrollBox.width - scrollDragPositionOffsetX)\n                / (self.scrollBox.scrollWidth + self.scrollBox.width - scrollDragPositionOffsetX));\n            self.scrollBox.scrollBoxWidth = self.scrollBox.width\n                * self.scrollBox.widthBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.heightBoxRatio = ((self.scrollBox.height - scrollDragPositionOffsetY)\n                / (self.scrollBox.scrollHeight + (self.scrollBox.height - scrollDragPositionOffsetY)));\n            self.scrollBox.scrollBoxHeight = self.scrollBox.height\n                * self.scrollBox.heightBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.scrollBoxWidth = Math.max(self.scrollBox.scrollBoxWidth, self.style.scrollBarBoxMinSize);\n            self.scrollBox.scrollBoxHeight = Math.max(self.scrollBox.scrollBoxHeight, self.style.scrollBarBoxMinSize);\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            self.resizeEditInput();\n            self.scroll(true);\n            if (drawAfterResize) {\n                self.draw(true);\n            }\n            self.dispatchEvent('resize', {});\n            return true;\n        };\n        self.resizeEditInput = function () {\n            if (self.input) {\n                var pos = self.canvas.getBoundingClientRect(),\n                    s = self.scrollOffset(self.canvas),\n                    bx2 = (self.style.cellBorderWidth * 2),\n                    cell = self.getVisibleCellByIndex(self.input.editCell.columnIndex, self.input.editCell.rowIndex)\n                        || {x: -100, y: -100, height: 0, width: 0};\n                self.input.style.left = pos.left + cell.x - self.style.cellBorderWidth + self.canvasOffsetLeft - s.left + 'px';\n                self.input.style.top = pos.top + cell.y - bx2 + self.canvasOffsetTop - s.top + 'px';\n                self.input.style.height = cell.height - bx2 - 1 + 'px';\n                self.input.style.width = cell.width - bx2 - self.style.cellPaddingLeft + 'px';\n                self.clipElement(self.input);\n            }\n        };\n        self.scroll = function (e, dontDraw) {\n            var s = self.getVisibleSchema(),\n                cellBorder = self.style.cellBorderWidth * 2;\n            self.scrollIndexTop = 0;\n            self.scrollPixelTop = 0;\n            self.scrollIndexLeft = 0;\n            self.scrollPixelLeft = 0;\n            while (self.scrollPixelTop < self.scrollBox.scrollTop && self.scrollIndexTop < self.data.length) {\n                self.scrollPixelTop +=\n                    (self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || self.style.cellHeight)\n                    + (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0)\n                    + cellBorder;\n                self.scrollIndexTop += 1;\n            }\n            while (self.scrollPixelLeft < self.scrollBox.scrollLeft && self.scrollIndexLeft < s.length) {\n                self.scrollPixelLeft +=\n                    (self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width);\n                self.scrollIndexLeft += 1;\n            }\n            if (self.data.length > 0) {\n                self.scrollIndexLeft = Math.max(self.scrollIndexLeft - 1, 0);\n                self.scrollPixelLeft = Math.max(self.scrollPixelLeft\n                    - (self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width), 0);\n                self.scrollIndexTop = Math.max(self.scrollIndexTop - 1, 0);\n                self.scrollPixelTop = Math.max(self.scrollPixelTop\n                    - (self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || self.style.cellHeight)\n                    - (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0), 0);\n            }\n            self.ellipsisCache = {};\n            if (!dontDraw) {\n                self.draw(true);\n            }\n            //TODO: figure out why this has to be delayed for child grids\n            //BUG: scrolling event on 3rd level hierarchy fails to move input box\n            requestAnimationFrame(self.resizeEditInput);\n            self.dispatchEvent('scroll', {top: self.scrollBox.scrollTop, left: self.scrollBox.scrollLeft});\n        };\n        self.mousemove = function (e, overridePos) {\n            if (self.contextMenu || self.input) {\n                return;\n            }\n            self.mouse = overridePos || self.getLayerPos(e);\n            var ctrl = (e.controlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                i,\n                s = self.getSchema(),\n                dragBounds,\n                sBounds,\n                x = self.mouse.x,\n                y = self.mouse.y,\n                o = self.getCellAt(x, y),\n                delta,\n                ev = {NativeEvent: e, cell: o, x: x, y: y},\n                previousCell = self.currentCell;\n            clearTimeout(self.scrollTimer);\n            if (!self.isInGrid({x: x, y: y})) {\n                self.hasFocus = false;\n            }\n            if (self.dispatchEvent('mousemove', ev)) {\n                return;\n            }\n            if (o && self.currentCell && (self.currentCell.rowIndex !== o.rowIndex\n                    || self.currentCell.columnIndex !== o.columnIndex)) {\n                self.cellBoundaryCrossed = true;\n                ev.cell = previousCell;\n                self.dispatchEvent('cellmouseout', ev);\n                ev.cell = o;\n                self.dispatchEvent('cellmouseover', ev);\n            }\n            self.currentCell = o;\n            if (!self.hasFocus) {\n                return;\n            }\n            self.hovers = {};\n            if (!self.draggingItem\n                    && o\n                    && self.scrollModes.indexOf(o.context) === -1) {\n                self.dragItem = o;\n                self.dragMode = o.dragContext;\n                self.canvas.style.cursor = o.context;\n                if (o.context === 'cell' && o.data) {\n                    self.canvas.style.cursor = 'pointer';\n                    self.hovers[o.data[self.uniqueId]] = [o.columnIndex];\n                }\n                if ((self.selecting || self.reorderObject)\n                        && o.context === 'cell'\n                        && o.data) {\n                    sBounds = self.getSelectionBounds();\n                    delta = {\n                        x: Math.abs(self.dragStart.x - x),\n                        y: Math.abs(self.dragStart.y - y),\n                    };\n                    if (self.dragStartObject.columnIndex !== -1 && e.shiftKey) {\n                        self.dragStartObject = {\n                            rowIndex: self.activeCell.rowIndex,\n                            columnIndex: self.activeCell.columnIndex\n                        };\n                    }\n                    dragBounds = {\n                        top: Math.min(self.dragStartObject.rowIndex, o.rowIndex),\n                        left: Math.min(self.dragStartObject.columnIndex, o.columnIndex),\n                        bottom: Math.max(self.dragStartObject.rowIndex, o.rowIndex),\n                        right: Math.max(self.dragStartObject.columnIndex, o.columnIndex)\n                    };\n                    if (self.dragStartObject.columnIndex === -1) {\n                        dragBounds.left = -1;\n                        dragBounds.right = s.length - 1;\n                        dragBounds.top = Math.min(sBounds.top, o.rowIndex);\n                        dragBounds.bottom = Math.max(sBounds.bottom, o.rowIndex);\n                    }\n                    if (self.dragStartObject.rowIndex !== o.rowIndex\n                                || self.dragStartObject.columnIndex !== o.columnIndex) {\n                        self.ignoreNextClick = true;\n                    }\n                    if (self.cellBoundaryCrossed || (delta.x === 0 && delta.y === 0) || (self.attributes.selectionMode === 'row')) {\n                        if ((self.attributes.selectionMode === 'row') || self.dragStartObject.columnIndex === -1) {\n                            self.selectRow(o.rowIndex, ctrl, null, true);\n                        } else {\n                            if (!self.dragAddToSelection && o.rowIndex !== undefined) {\n                                if (self.selections[o.rowIndex] && self.selections[o.rowIndex].indexOf(o.columnIndex) !== -1) {\n                                    self.selections[o.rowIndex].splice(self.selections[o.rowIndex].indexOf(o.columnIndex), 1);\n                                }\n                            } else {\n                                self.selections[o.rowIndex] = self.selections[o.rowIndex] || [];\n                                if (self.selections[o.rowIndex].indexOf(o.columnIndex) === -1) {\n                                    self.selections[o.rowIndex].push(o.columnIndex);\n                                }\n                            }\n                        }\n                    }\n                    if ((!self.selectionBounds || (dragBounds.top !== self.selectionBounds.top\n                            || dragBounds.left !== self.selectionBounds.left\n                            || dragBounds.bottom !== self.selectionBounds.bottom\n                            || dragBounds.right !== self.selectionBounds.right)) && !ctrl) {\n                        self.selections = [];\n                        sBounds = dragBounds;\n                        if (self.attributes.selectionMode === 'row') {\n                            for (i = sBounds.top; i <= sBounds.bottom; i += 1) {\n                                self.selectRow(i, true, null, true);\n                            }\n                        } else {\n                            self.selectArea(sBounds, true);\n                        }\n                    }\n                    self.autoScrollZone(e, x, y, ctrl);\n                }\n            }\n            self.cellBoundaryCrossed = false;\n            self.draw(true);\n        };\n        self.click = function (e, overridePos) {\n            var i,\n                selectionChanged,\n                ctrl = (e.controlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                pos = overridePos || self.getLayerPos(e);\n            self.currentCell = self.getCellAt(pos.x, pos.y);\n            if (self.currentCell.grid !== undefined) {\n                return;\n            }\n            function checkSelectionChange() {\n                if (!selectionChanged) { return; }\n                self.dispatchEvent('selectionchanged', {\n                    selectedData: self.getSelectedData(),\n                    selections: self.selections,\n                    selectionBounds: self.selectionBounds\n                });\n            }\n            if (self.input) {\n                self.endEdit();\n            }\n            if (self.ignoreNextClick) {\n                self.ignoreNextClick = false;\n                return;\n            }\n            i = self.currentCell;\n            if (self.dispatchEvent('click', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'cell') {\n                if (self.currentCell.style === 'cornerCell') {\n                    self.order(self.uniqueId, 'asc', self.sorters.number);\n                    self.setFilter();\n                    checkSelectionChange();\n                    return;\n                }\n                if (self.currentCell.style === 'columnHeaderCell') {\n                    if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                        if (self.orderBy === i.header.name) {\n                            self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                        } else {\n                            self.orderDirection = 'asc';\n                        }\n                        self.order(i.header.name, self.orderDirection);\n                        checkSelectionChange();\n                        return;\n                    }\n                    if (self.attributes.columnHeaderClickBehavior === 'select') {\n                        self.selectColumn(i.header.index, ctrl, e.shiftKey, true);\n                        checkSelectionChange();\n                        self.draw();\n                        return;\n                    }\n                }\n                if (['rowHeaderCell', 'columnHeaderCell'].indexOf(self.currentCell.style) === -1 && !ctrl) {\n                    self.setActiveCell(i.columnIndex, i.rowIndex);\n                }\n                self.selections[i.rowIndex] = self.selections[i.rowIndex] || [];\n                if (((self.attributes.selectionMode === 'row') || self.currentCell.style === 'rowHeaderCell')) {\n                    if (self.currentCell.style === 'rowHeaderCell'\n                            && self.attributes.tree && pos.x > 0\n                            && pos.x - self.currentCell.x < self.style.treeArrowWidth\n                            + self.style.treeArrowMarginLeft\n                            + self.style.treeArrowMarginRight + self.style.treeArrowClickRadius\n                            && pos.y - self.currentCell.y < self.style.treeArrowHeight\n                            + self.style.treeArrowMarginTop + self.style.treeArrowClickRadius\n                            && pos.y > 0) {\n                        self.toggleTree(i.rowIndex);\n                        return;\n                    }\n                    selectionChanged = true;\n                    self.selectRow(i.rowIndex, ctrl, null, true);\n                }\n                if (e.shiftKey && !ctrl) {\n                    self.selectionBounds = self.getSelectionBounds();\n                    self.selectArea(undefined, false);\n                }\n            }\n            checkSelectionChange();\n            self.draw(true);\n        };\n        self.dragResizeColumn = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = self.resizingStartingWidth + pos.x - self.dragStart.x;\n            y = self.resizingStartingHeight + pos.y - self.dragStart.y;\n            if (x < self.style.minColumnWidth) {\n                x = self.style.minColumnWidth;\n            }\n            if (y < self.style.minRowHeight) {\n                y = self.style.minRowHeight;\n            }\n            if (self.dispatchEvent('resizecolumn', {x: x, y: y, draggingItem: self.draggingItem})) { return false; }\n            if (self.scrollBox.scrollLeft > self.scrollBox.scrollWidth - self.attributes.resizeScrollZone\n                    && self.dragMode === 'ew-resize') {\n                self.resize(true);\n                self.scrollBox.scrollLeft += x;\n            }\n            if (self.dragMode === 'ew-resize') {\n                self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] = x;\n                if (['rowHeaderCell', 'cornerCell'].indexOf(self.draggingItem.header.style) !== -1) {\n                    self.resize(true);\n                }\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.dragMode === 'ns-resize') {\n                if (self.draggingItem.rowOpen) {\n                    self.sizes.trees[self.draggingItem.data[self.uniqueId]] = y;\n                } else if (self.attributes.globalRowResize) {\n                    self.style.cellHeight = y;\n                } else {\n                    self.sizes.rows[self.draggingItem.data[self.uniqueId]] = y;\n                }\n                self.dispatchEvent('resizerow', {row: y});\n                self.resizeChildGrids();\n                return;\n            }\n            self.ellipsisCache = {};\n        };\n        self.stopDragResize = function () {\n            self.resize();\n            document.body.removeEventListener('mousemove', self.dragResizeColumn, false);\n            document.body.removeEventListener('mouseup', self.stopDragResize, false);\n            self.setStorageData();\n            self.draw(true);\n            self.ignoreNextClick = true;\n        };\n        self.scrollGrid = function (e) {\n            var pos = self.getLayerPos(e);\n            if (self.attributes.scrollPointerLock && self.pointerLockPosition\n                    && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                self.pointerLockPosition.x += e.movementX;\n                self.pointerLockPosition.y += e.movementY;\n                self.pointerLockPosition.x = Math.min(self.width - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.x));\n                self.pointerLockPosition.y = Math.min(self.height - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.y));\n                pos = self.pointerLockPosition;\n            }\n            self.scrollMode = self.getCellAt(pos.x, pos.y).context;\n            if (self.scrollMode === 'horizontal-scroll-box' && self.scrollStartMode !== 'horizontal-scroll-box') {\n                self.scrollStartMode = 'horizontal-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.left = self.scrollBox.scrollLeft;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box' && self.scrollStartMode !== 'vertical-scroll-box') {\n                self.scrollStartMode = 'vertical-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.top = self.scrollBox.scrollTop;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollStartMode === 'vertical-scroll-box'\n                    && self.scrollMode !== 'vertical-scroll-box') {\n                self.scrollMode = 'vertical-scroll-box';\n            }\n            if (self.scrollStartMode === 'horizontal-scroll-box'\n                    && self.scrollMode !== 'horizontal-scroll-box') {\n                self.scrollMode = 'horizontal-scroll-box';\n            }\n            clearTimeout(self.scrollTimer);\n            if (self.scrollModes.indexOf(self.scrollMode) === -1) {\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box') {\n                self.scrollBox.scrollTop = self.scrollStart.top + ((pos.y - self.dragStart.y)\n                    / self.scrollBox.heightBoxRatio);\n            } else if (self.scrollMode === 'vertical-scroll-top') {\n                self.scrollBox.scrollTop -= (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'vertical-scroll-bottom') {\n                self.scrollBox.scrollTop += (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n            if (self.scrollMode === 'horizontal-scroll-box') {\n                self.scrollBox.scrollLeft = self.scrollStart.left + ((pos.x - self.dragStart.x)\n                    / self.scrollBox.widthBoxRatio);\n            } else if (self.scrollMode === 'horizontal-scroll-right') {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'horizontal-scroll-left') {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.stopScrollGrid = function () {\n            clearTimeout(self.scrollTimer);\n            if (document.exitPointerLock) {\n                document.exitPointerLock();\n            }\n            document.body.removeEventListener('mousemove', self.scrollGrid, false);\n        };\n        self.dragReorder = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = pos.x - self.dragStart.x;\n            y = pos.y - self.dragStart.y;\n            if (!self.attributes.allowColumnReordering && self.dragMode === 'column-reorder') {\n                return;\n            }\n            if (!self.attributes.allowRowReordering && self.dragMode === 'row-reorder') {\n                return;\n            }\n            if (self.dispatchEvent('reordering', {\n                    NativeEvent: e,\n                    source: self.dragStartObject,\n                    target: self.currentCell,\n                    dragMode: self.dragMode\n                })) {\n                return;\n            }\n            if (Math.abs(x) > self.attributes.reorderDeadZone || Math.abs(y) > self.attributes.reorderDeadZone) {\n                self.reorderObject = self.dragStartObject;\n                self.reorderTarget = self.currentCell;\n                self.reorderObject.dragOffset = {\n                    x: x,\n                    y: y\n                };\n                self.autoScrollZone(e, pos.x, pos.x, false);\n            }\n        };\n        self.stopDragReorder = function (e) {\n            var cr = {\n                    'row-reorder': self.orders.rows,\n                    'column-reorder': self.orders.columns\n                },\n                i = {\n                    'row-reorder': 'rowIndex',\n                    'column-reorder': 'columnIndex'\n                }[self.dragMode];\n            document.body.removeEventListener('mousemove', self.dragReorder, false);\n            document.body.removeEventListener('mouseup', self.stopDragReorder, false);\n            if (self.reorderObject\n                    && self.reorderTarget) {\n                self.ignoreNextClick = true;\n                if (self.reorderObject[i] !== self.reorderTarget[i]\n                        && !self.dispatchEvent('reorder', {\n                            NativeEvent: e,\n                            source: self.reorderObject,\n                            target: self.reorderTarget,\n                            dragMode: self.dragMode\n                        })) {\n                    cr[self.dragMode].splice(cr[self.dragMode].indexOf(self.reorderObject[i]), 1);\n                    cr[self.dragMode].splice(cr[self.dragMode].indexOf(self.reorderTarget[i]), 0, self.reorderObject[i]);\n                    self.setStorageData();\n                }\n            }\n            self.reorderObject = undefined;\n            self.reorderTarget = undefined;\n            self.draw(true);\n        };\n        self.mousedown = function (e, overridePos) {\n            self.lastMouseDownTarget = e.target;\n            if (self.dispatchEvent('mousedown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (e.button === 2 || self.input) { return; }\n            var ctrl = (e.controlKey || e.metaKey);\n            self.dragStart = overridePos || self.getLayerPos(e);\n            self.scrollStart = {\n                left: self.scrollBox.scrollLeft,\n                top: self.scrollBox.scrollTop\n            };\n            self.dragStartObject = self.getCellAt(self.dragStart.x, self.dragStart.y);\n            self.dragAddToSelection = !self.dragStartObject.selected;\n            if (!ctrl && !e.shiftKey && !/(vertical|horizontal)-scroll-(bar|box)/\n                    .test(self.dragStartObject.context) && !self.currentCell.isColumnHeader) {\n                self.selections = [];\n            }\n            if (self.dragStartObject.isGrid) {\n                return;\n            }\n            if (self.scrollModes.indexOf(self.dragStartObject.context) !== -1) {\n                self.scrollMode = self.dragStartObject.context;\n                self.scrollStartMode = self.dragStartObject.context;\n                self.scrollGrid(e);\n                if (self.attributes.scrollPointerLock\n                        && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                    self.pointerLockPosition = {\n                        x: self.dragStart.x,\n                        y: self.dragStart.y\n                    };\n                    self.canvas.requestPointerLock();\n                }\n                document.body.addEventListener('mousemove', self.scrollGrid, false);\n                document.body.addEventListener('mouseup', self.stopScrollGrid, false);\n                self.ignoreNextClick = true;\n                return;\n            }\n            if (self.dragMode === 'cell') {\n                self.selecting = true;\n                if (self.attributes.selectionMode === 'row') {\n                    self.selectRow(self.dragStartObject.rowIndex, ctrl, null, true);\n                }\n                return self.mousemove(e);\n            }\n            if (['ns-resize', 'ew-resize'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragItem;\n                if (self.draggingItem.rowOpen) {\n                    self.resizingStartingHeight = self.sizes.trees[self.draggingItem.data[self.uniqueId]];\n                } else {\n                    self.resizingStartingHeight = self.sizes.rows[self.draggingItem.data[self.uniqueId]] || self.style.cellHeight;\n                }\n                self.resizingStartingWidth = self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] || self.draggingItem.width;\n                document.body.addEventListener('mousemove', self.dragResizeColumn, false);\n                document.body.addEventListener('mouseup', self.stopDragResize, false);\n            }\n            if (['row-reorder', 'column-reorder'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragItem;\n                document.body.addEventListener('mousemove', self.dragReorder, false);\n                document.body.addEventListener('mouseup', self.stopDragReorder, false);\n            }\n        };\n        self.mouseup = function (e) {\n            clearTimeout(self.scrollTimer);\n            self.cellBoundaryCrossed = true;\n            self.selecting = undefined;\n            self.draggingItem = undefined;\n            self.dragStartObject = undefined;\n            if (self.dispatchEvent('mouseup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            if (self.currentCell && self.currentCell.grid !== undefined) {\n                return;\n            }\n            if (self.contextMenu || self.input) { return; }\n            if (self.dragStart && self.isInGrid(self.dragStart)) {\n                self.controlInput.focus();\n            }\n            e.preventDefault();\n        };\n        self.keydown = function (e) {\n            var i,\n                x = self.activeCell.columnIndex,\n                y = self.activeCell.rowIndex,\n                ctrl = (e.controlKey || e.metaKey),\n                last = self.data.length - 1,\n                cols = self.getVisibleSchema().length - 1;\n            if (self.dispatchEvent('keydown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            if (self.attributes.showNewRow) {\n                last += 1;\n            }\n            if (e.keyCode === 9) {\n                e.preventDefault();\n            }\n            // esc\n            if (e.keyCode === 27) {\n                self.selections = [];\n                self.draw(true);\n            // ctrl + a\n            } else if (ctrl && e.keyCode === 65) {\n                self.selectAll();\n            //ArrowDown\n            } else if (e.keyCode === 40) {\n                y += 1;\n            //ArrowUp\n            } else if (e.keyCode === 38) {\n                y -= 1;\n            //ArrowLeft Tab\n            } else if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {\n                x -= 1;\n            //ArrowRight Tab\n            } else if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {\n                x += 1;\n            //PageUp\n            } else if (e.keyCode === 33) {\n                y -= self.page;\n                e.preventDefault();\n            //PageDown\n            } else if (e.keyCode === 34) {\n                y += self.page;\n                e.preventDefault();\n            //Home ArrowUp\n            } else if (e.keyCode === 36 || (ctrl && e.keyCode === 38)) {\n                y = 0;\n            //End ArrowDown\n            } else if (e.keyCode === 35 || (ctrl && e.keyCode === 40)) {\n                y = self.data.length - 1;\n            //ArrowRight\n            } else if (ctrl && e.keyCode === 39) {\n                x = cols;\n            //ArrowLeft\n            } else if (ctrl && e.keyCode === 37) {\n                x = 0;\n            }\n            //Enter\n            if (e.keyCode === 13) {\n                return self.beginEditAt(x, y);\n            }\n            //Space\n            if (e.keyCode === 32) {\n                self.selections = [];\n                self.selections[Math.max(y, 0)] = [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                if (self.attributes.selectionMode === 'row') {\n                    for (i = self.selectionBounds.top; i <= self.selectionBounds.bottom; i += 1) {\n                        self.selectRow(i, ctrl, null, true);\n                    }\n                } else {\n                    self.selectArea(undefined, ctrl);\n                }\n                e.preventDefault();\n                self.draw(true);\n                return;\n            }\n            if (x < 0) {\n                x = 0;\n            }\n            if (y > last) {\n                y = last;\n            }\n            if (y < 0) {\n                y = 0;\n            }\n            if (x > cols) {\n                x = cols;\n            }\n            // Arrows\n            if (e.shiftKey && [37, 38, 39, 40].indexOf(e.keyCode) !== -1) {\n                self.selections[Math.max(y, 0)] = self.selections[Math.max(y, 0)] || [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                self.selectArea(undefined, ctrl);\n                self.draw(true);\n            }\n            if (x !== self.activeCell.columnIndex || y !== self.activeCell.rowIndex) {\n                self.scrollIntoView(x !== self.activeCell.columnIndex ? x : undefined, y !== self.activeCell.rowIndex ? y : undefined);\n                self.setActiveCell(x, y);\n                if (!e.shiftKey && self.attributes.selectionFollowsActiveCell) {\n                    if (!ctrl) {\n                        self.selections = [];\n                    }\n                    self.selections[y] = self.selections[y] || [];\n                    self.selections[y].push(x);\n                    self.dispatchEvent('selectionchanged', {\n                        selectedData: self.getSelectedData(),\n                        selections: self.selections,\n                        selectionBounds: self.selectionBounds\n                    });\n                }\n                self.draw(true);\n            }\n        };\n        self.keyup = function (e) {\n            if (self.dispatchEvent('keyup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            self.controlInput.value = '';\n        };\n        self.keypress = function (e) {\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.dispatchEvent('keypress', {NativeEvent: e, cell: self.currentCell})) { return; }\n        };\n        self.dblclick = function (e) {\n            if (self.dispatchEvent('dblclick', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'columnHeaderCell') {\n                self.fitColumnToValues(self.currentCell.header.name);\n            } else if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'cornerCell') {\n                self.autosize();\n            } else if (['cell', 'activeCell'].indexOf(self.currentCell.style) !== -1) {\n                self.beginEditAt(self.currentCell.columnIndex, self.currentCell.rowIndex);\n            }\n        };\n        self.scrollWheel = function (e) {\n            var l,\n                t,\n                deltaX = e.deltaX === undefined ? e.NativeEvent.deltaX : e.deltaX,\n                deltaY = e.deltaY === undefined ? e.NativeEvent.deltaY : e.deltaY,\n                deltaMode = e.deltaMode === undefined ? e.NativeEvent.deltaMode : e.deltaMode;\n            if (self.dispatchEvent('wheel', {NativeEvent: e})) {\n                return;\n            }\n            e = e.NativeEvent || e;\n            self.touchHaltAnimation = true;\n            l = self.scrollBox.scrollLeft;\n            t = self.scrollBox.scrollTop;\n            if (self.hasFocus) {\n                //BUG Issue 42: https://github.com/TonyGermaneri/canvas-datagrid/issues/42\n                //https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\n                if (deltaMode === 1) {\n                    // line mode = 17 pixels per line\n                    deltaY = deltaY * 17;\n                }\n                self.scrollBox.scrollTop += deltaY;\n                self.scrollBox.scrollLeft += deltaX;\n            }\n            if (t !== self.scrollBox.scrollTop || l !== self.scrollBox.scrollLeft) {\n                e.preventDefault();\n            }\n        };\n        self.copy = function (e) {\n            if (self.dispatchEvent('copy', {NativeEvent: e})) { return; }\n            if (!self.hasFocus || !e.clipboardData) { return; }\n            var rows = [], sData = self.getSelectedData();\n            if (sData.length > 0) {\n                sData.forEach(function (row) {\n                    if (row) {\n                        var r = [];\n                        Object.keys(row).forEach(function (key) {\n                            if (row[key] !== null\n                                    && row[key] !== false\n                                    && row[key] !== undefined\n                                    && row[key].replace) {\n                                return r.push('\"' + row[key].replace(/\"/g, '\"\"') + '\"');\n                            }\n                            r.push(row[key]);\n                        });\n                        r.join(',');\n                        rows.push(r);\n                    }\n                });\n                e.clipboardData.setData('text/plain', rows.join('\\n'));\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/events.js\n// module id = 3\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals HTMLElement: false, Reflect: false, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self, ctor) {\n        self.orders = {\n            rows: [],\n            columns: []\n        };\n        self.hasFocus = false;\n        self.activeCell = {\n            columnIndex: 0,\n            rowIndex: 0\n        };\n        self.storageName = 'canvasDataGrid';\n        self.invalidSearchExpClass = 'canvas-datagrid-invalid-search-regExp';\n        self.localStyleLibraryStorageKey = 'canvas-datagrid-user-style-library';\n        self.uniqueId = '_canvasDataGridUniqueId';\n        self.orderBy = self.uniqueId;\n        self.orderDirection = 'asc';\n        self.columnFilters = {};\n        self.filters = {};\n        self.ellipsisCache = {};\n        self.scrollBox = {};\n        self.visibleRows = [];\n        /**\n         * Used internally to keep track of sizes of row, columns and child grids.\n         * @memberof canvasDataGrid\n         * @property sizes\n         * @readonly\n         */\n        self.sizes = {\n            rows: {},\n            columns: {},\n            trees: {}\n        };\n        self.currentFilter = function () {\n            return true;\n        };\n        self.selections = [];\n        self.hovers = {};\n        self.attributes = {};\n        self.style = {};\n        self.formatters = {};\n        self.sorters = {};\n        self.schemaHashes = {};\n        self.events = {};\n        self.uId = 0;\n        self.changes = [];\n        self.scrollIndexTop = 0;\n        self.scrollPixelTop = 0;\n        self.scrollIndexLeft = 0;\n        self.scrollPixelLeft = 0;\n        self.childGrids = {};\n        self.openChildren = {};\n        self.scrollModes = [\n            'vertical-scroll-box',\n            'vertical-scroll-top',\n            'vertical-scroll-bottom',\n            'horizontal-scroll-box',\n            'horizontal-scroll-right',\n            'horizontal-scroll-left'\n        ];\n        self.mouse = { x: 0, y: 0};\n        self.getSelectedData = function (expandToRow) {\n            var d = [], s = self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                if (expandToRow) {\n                    s.forEach(function (column) {\n                        d[index][column.name] = self.data[index][column.name];\n                    });\n                } else {\n                    row.forEach(function (col) {\n                        if (col === -1 || !s[col]) { return; }\n                        d[index][s[col].name] = self.data[index][s[col].name];\n                    });\n                }\n            });\n            return d;\n        };\n        self.scrollOffset = function (e) {\n            var x = 0, y = 0;\n            while (e.parentNode) {\n                if (e.nodeType !== 'canvas-datagrid-tree'\n                        && e.nodeType !== 'canvas-datagrid-cell') {\n                    x -= e.scrollLeft;\n                    y -= e.scrollTop;\n                }\n                e = e.parentNode;\n            }\n            return {left: x, top: y};\n        };\n        self.position = function (e, ignoreScrollOffset) {\n            var x = 0, y = 0, s = e, h, w;\n            while (e.offsetParent) {\n                x += e.offsetLeft;\n                y += e.offsetTop;\n                h = e.offsetHeight;\n                w = e.offsetWidth;\n                e = e.offsetParent;\n            }\n            if (ignoreScrollOffset) {\n                return {left: x, top: y, height: h, width: w};\n            }\n            e = s;\n            s = self.scrollOffset(e);\n            return { left: x + s.left, top: y + s.top, height: h, width: w };\n        };\n        self.getLayerPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.clientX - rect.left,\n                    y: e.clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        self.fillArray = function (low, high, step) {\n            step = step || 1;\n            var i = [], x;\n            for (x = low; x <= high; x += step) {\n                i[x] = x;\n            }\n            return i;\n        };\n        self.getRowHeaderCellHeight = function () {\n            if (!self.attributes.showColumnHeaders) { return 0; }\n            return self.sizes.rows[-1] || self.style.columnHeaderCellHeight;\n        };\n        self.getColumnHeaderCellWidth = function () {\n            if (!self.attributes.showRowHeaders) { return 0; }\n            return self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth;\n        };\n        self.setStorageData = function () {\n            if (!self.attributes.saveAppearance) { return; }\n            localStorage.setItem(self.storageName + '-' + self.attributes.name, JSON.stringify({\n                sizes: {\n                    rows: self.sizes.rows,\n                    columns: self.sizes.columns\n                },\n                orders: {\n                    rows: self.orders.rows,\n                    columns: self.orders.columns\n                },\n                orderBy: self.orderBy,\n                orderDirection: self.orderDirection\n            }));\n        };\n        self.getSchema = function () {\n            return self.schema || self.tempSchema;\n        };\n        self.createColumnOrders = function () {\n            var s = self.getSchema();\n            self.orders.columns = self.fillArray(0, s.length - 1);\n        };\n        self.createRowOrders = function () {\n            self.orders.rows = self.fillArray(0, self.data.length - 1);\n        };\n        self.getVisibleSchema = function () {\n            return self.getSchema().filter(function (col) { return !col.hidden; });\n        };\n        self.applyDefaultValue = function (row, header) {\n            var d = header.defaultValue || '';\n            if (typeof d === 'function') {\n                d = d.apply(self.intf, [header]);\n            }\n            row[header.name] = d;\n        };\n        self.createNewRowData = function () {\n            self.newRow = {};\n            self.newRow[self.uniqueId] = self.uId;\n            self.uId += 1;\n            self.getSchema().forEach(function forEachHeader(header) {\n                self.applyDefaultValue(self.newRow, header);\n            });\n        };\n        self.getSchemaNameHash = function (key) {\n            var n = 0;\n            while (self.schemaHashes[key]) {\n                n += 1;\n                key = key + n;\n            }\n            return key;\n        };\n        self.filter = function (type) {\n            var f = self.filters[type];\n            if (!f && type !== undefined) {\n                console.warn('Cannot find filter for type %s, falling back to substring match.', type);\n                f = self.filters.string;\n            }\n            return f;\n        };\n        self.getBestGuessDataType = function (columnName) {\n            var t, x, l = self.data.length;\n            for (x = 0; x < l; x += 1) {\n                if ([null, undefined].indexOf(self.data[x][columnName]) !== -1) {\n                    t = typeof self.data[x];\n                    return t === 'object' ? 'string' : t;\n                }\n            }\n            return 'string';\n        };\n        self.drawChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].draw();\n            });\n        };\n        self.resizeChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].resize();\n            });\n        };\n        self.getClippingRect = function (ele) {\n            var boundingRect = self.position(self.parentNode),\n                eleRect = self.position(ele),\n                s = self.scrollOffset(self.canvas),\n                clipRect = {\n                    x: 0,\n                    y: 0,\n                    h: 0,\n                    w: 0\n                },\n                parentRect = {\n                    x: -Infinity,\n                    y: -Infinity,\n                    h: Infinity,\n                    w: Infinity\n                },\n                rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth();\n            boundingRect.top -= s.top;\n            boundingRect.left -= s.left;\n            eleRect.top -= s.top;\n            eleRect.left -= s.left;\n            clipRect.h = boundingRect.top + boundingRect.height - ele.offsetTop - self.style.scrollBarWidth;\n            clipRect.w = boundingRect.left + boundingRect.width - ele.offsetLeft - self.style.scrollBarWidth;\n            clipRect.x = boundingRect.left + (eleRect.left * -1) + columnHeaderCellWidth;\n            clipRect.y = boundingRect.top + (eleRect.top * -1) + rowHeaderCellHeight;\n            return {\n                x: clipRect.x > parentRect.x ? clipRect.x : parentRect.x,\n                y: clipRect.y > parentRect.y ? clipRect.y : parentRect.y,\n                h: clipRect.h < parentRect.h ? clipRect.h : parentRect.h,\n                w: clipRect.w < parentRect.w ? clipRect.w : parentRect.w\n            };\n        };\n        self.clipElement = function (ele) {\n            var clipRect = self.getClippingRect(ele);\n            if (clipRect.w < 0) { clipRect.w = 0; }\n            if (clipRect.h < 0) { clipRect.h = 0; }\n            ele.style.clip = 'rect('\n                + clipRect.y + 'px,'\n                + clipRect.w + 'px,'\n                + clipRect.h + 'px,'\n                + clipRect.x + 'px'\n                + ')';\n            // INFO https://developer.mozilla.org/en-US/docs/Web/CSS/clip\n            // clip has been \"deprecated\" for clipPath.  Of course nothing but chrome\n            // supports clip path, so we'll keep using clip until someday clipPath becomes\n            // more widely support.  The code below works correctly, but setting clipPath and clip\n            // at the same time has undesirable results.\n            // ele.style.clipPath = 'polygon('\n            //     + clipRect.x + 'px ' + clipRect.y + 'px,'\n            //     + clipRect.x + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.y + 'px'\n            //     + ')';\n        };\n        self.autoScrollZone = function (e, x, y, ctrl) {\n            var setTimer,\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth(),\n                rowHeaderCellHeight = self.getRowHeaderCellHeight();\n            if (x > self.width - self.attributes.selectionScrollZone && x < self.width) {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y > self.height - self.attributes.selectionScrollZone && y < self.height) {\n                self.scrollBox.scrollTop += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (x - self.attributes.selectionScrollZone - columnHeaderCellWidth < 0) {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y - self.attributes.selectionScrollZone - rowHeaderCellHeight < 0) {\n                self.scrollBox.scrollTop -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (setTimer && !ctrl && self.currentCell && self.currentCell.columnIndex !== -1) {\n                self.scrollTimer = setTimeout(self.mousemove, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.refreshFromOrigialData = function () {\n            self.data = self.originalData.filter(function (row) {\n                return true;\n            });\n        };\n        self.validateColumn = function (c, s) {\n            if (!c.name) {\n                throw new Error('A column must contain at least a name.');\n            }\n            if (s.filter(function (i) { return i.name === c.name; }).length > 0) {\n                throw new Error('A column with the name '\n                    + c.name + ' already exists and cannot be added again.');\n            }\n            return true;\n        };\n        self.setDefaults = function (obj1, obj2, key, def) {\n            obj1[key] = obj2[key] === undefined ? def : obj2[key];\n        };\n        self.setAttributes = function () {\n            self.defaults.attributes.forEach(function eachAttribute(i) {\n                self.setDefaults(self.attributes, self.args, i[0], i[1]);\n            });\n        };\n        self.setStyle = function () {\n            self.defaults.styles.forEach(function eachStyle(i) {\n                self.setDefaults(self.style, self.args.style || {}, i[0], i[1]);\n            });\n        };\n        self.autosize = function (colName) {\n            self.getVisibleSchema().forEach(function (col) {\n                if (col.name === colName || colName === undefined) {\n                    self.fitColumnToValues(col.name);\n                }\n            });\n            self.fitColumnToValues('cornerCell');\n        };\n        self.dispose = function () {\n            if (!self.isChildGrid && self.canvas && self.canvas.parentNode) {\n                self.canvas.parentNode.removeChild(self.canvas);\n            }\n            self.eventParent.removeEventListener('mouseup', self.mouseup, false);\n            self.eventParent.removeEventListener('mousedown', self.mousedown, false);\n            self.eventParent.removeEventListener('dblclick', self.dblclick, false);\n            self.eventParent.removeEventListener('click', self.click, false);\n            self.eventParent.removeEventListener('mousemove', self.mousemove);\n            self.eventParent.removeEventListener('wheel', self.scrollWheel, false);\n            self.canvas.removeEventListener('contextmenu', self.contextmenu, false);\n            self.canvas.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('keypress', self.keypress, false);\n            self.controlInput.removeEventListener('keyup', self.keyup, false);\n            self.controlInput.removeEventListener('keydown', self.keydown, false);\n            window.removeEventListener('resize', self.resize);\n            if (self.observer && self.observer.disconnect) {\n                self.observer.disconnect();\n            }\n        };\n        self.tryLoadStoredOrders = function () {\n            var s;\n            if (self.storedSettings && typeof self.storedSettings.orders === 'object') {\n                if (self.storedSettings.orders.rows.length >= self.data.length) {\n                    self.orders.rows = self.storedSettings.orders.rows;\n                }\n                s = self.getSchema();\n                if (self.storedSettings.orders.columns.length === s.length) {\n                    self.orders.columns = self.storedSettings.orders.columns;\n                }\n                self.orderBy = self.storedSettings.orderBy === undefined\n                    ? self.uniqueId : self.storedSettings.orderBy;\n                self.orderDirection = self.storedSettings.orderDirection === undefined\n                    ? self.uniqueId : self.storedSettings.orderDirection;\n                if (self.getHeaderByName(self.orderBy) && self.orderDirection) {\n                    self.order(self.orderBy, self.orderDirection);\n                }\n            }\n        };\n        self.getFontHeight = function (fontStyle) {\n            return parseFloat(fontStyle, 10);\n        };\n        self.parseFont = function (key) {\n            if (/Font/.test(key)) {\n                self.style[key + 'Height'] = self.getFontHeight(self.style[key]);\n            }\n        };\n        self.initProp = function (propName) {\n            if (!self.args[propName]) { return; }\n            Object.keys(self.args[propName]).forEach(function (key) {\n                self[propName][key] = self.args[propName][key];\n            });\n        };\n        self.init = function () {\n            var publicStyleKeyIntf = {};\n            self.setAttributes();\n            self.setStyle();\n            self.initScrollBox();\n            self.setDom();\n            self.shadowRootParentElement = this.shadowRootParentElement;\n            self.type = 'canvas-datagrid';\n            Object.keys(self.style).forEach(self.parseFont);\n            self.intf.type = self.type;\n            self.intf.addEventListener = self.addEventListener;\n            self.intf.removeEventListener = self.removeEventListener;\n            self.intf.dispatchEvent = self.dispatchEvent;\n            self.intf.dispose = self.dispose;\n            self.intf.appendTo = self.appendTo;\n            self.intf.filters = self.filters;\n            self.intf.sorters = self.sorters;\n            self.intf.autosize = self.autosize;\n            self.intf.beginEditAt = self.beginEditAt;\n            self.intf.endEdit = self.endEdit;\n            self.intf.setActiveCell = self.setActiveCell;\n            self.intf.scrollIntoView = self.scrollIntoView;\n            self.intf.clearChangeLog = self.clearChangeLog;\n            self.intf.gotoCell = self.gotoCell;\n            self.intf.gotoRow = self.gotoRow;\n            self.intf.findColumnScrollLeft = self.findColumnScrollLeft;\n            self.intf.findRowScrollTop = self.findRowScrollTop;\n            self.intf.fitColumnToValues = self.fitColumnToValues;\n            self.intf.findColumnMaxTextLength = self.findColumnMaxTextLength;\n            self.intf.disposeContextMenu = self.disposeContextMenu;\n            self.intf.getCellAt = self.getCellAt;\n            self.intf.isCellVisible = self.isCellVisible;\n            self.intf.order = self.order;\n            self.intf.draw = self.draw;\n            self.intf.selectArea = self.selectArea;\n            self.intf.clipElement = self.clipElement;\n            self.intf.getSchemaFromData = self.getSchemaFromData;\n            self.intf.setFilter = self.setFilter;\n            self.intf.selectRow = self.selectRow;\n            self.intf.parentGrid = self.parentGrid;\n            self.intf.toggleTree = self.toggleTree;\n            self.intf.expandTree = self.expandTree;\n            self.intf.collapseTree = self.collapseTree;\n            self.intf.canvas = self.canvas;\n            self.intf.context = self.ctx;\n            self.intf.insertRow = self.insertRow;\n            self.intf.deleteRow = self.deleteRow;\n            self.intf.addRow = self.addRow;\n            self.intf.insertColumn = self.insertColumn;\n            self.intf.deleteColumn = self.deleteColumn;\n            self.intf.addColumn = self.addColumn;\n            self.intf.getClippingRect = self.getClippingRect;\n            self.intf.setRowHeight = self.setRowHeight;\n            self.intf.setColumnWidth = self.setColumnWidth;\n            self.intf.resetColumnWidths = self.resetColumnWidths;\n            self.intf.resetRowHeights = self.resetRowHeights;\n            self.intf.resize = self.resize;\n            self.intf.selectColumn = self.selectColumn;\n            self.intf.selectRow = self.selectRow;\n            self.intf.selectAll = self.selectAll;\n            self.intf.drawChildGrids = self.drawChildGrids;\n            self.intf.assertPxColor = self.assertPxColor;\n            self.intf.clearPxColorAssertions = self.clearPxColorAssertions;\n            self.intf.integerToAlpha = self.integerToAlpha;\n            self.intf.copy = self.copy;\n            Object.keys(self.style).forEach(function (key) {\n                // unless this line is here, Object.keys() will not work on <instance>.style\n                publicStyleKeyIntf[key] = undefined;\n                Object.defineProperty(publicStyleKeyIntf, key, {\n                    get: function () {\n                        return self.style[key];\n                    },\n                    set: function (value) {\n                        self.parseFont(value);\n                        self.style[key] = value;\n                        self.draw(true);\n                        self.dispatchEvent('stylechanged', {name: key, value: value});\n                    }\n                });\n            });\n            Object.defineProperty(self.intf, 'activeCell', {\n                get: function () {\n                    return self.activeCell;\n                }\n            });\n            /**\n             * When true, the grid is has focus.\n             * @memberof canvasDataGrid\n             * @property hasFocus\n             * @readonly\n             */\n            Object.defineProperty(self.intf, 'hasFocus', {\n                get: function () {\n                    return self.hasFocus;\n                }\n            });\n            Object.defineProperty(self.intf, 'style', {\n                get: function () {\n                    return publicStyleKeyIntf;\n                },\n                set: function (value) {\n                    Object.keys(value).forEach(function (key) {\n                        self.parseFont(value);\n                        self.style[key] = value[key];\n                    });\n                    self.draw(true);\n                    self.dispatchEvent('stylechanged', {name: 'style', value: value});\n                }\n            });\n            Object.defineProperty(self.intf, 'attributes', { value: {}});\n            Object.keys(self.attributes).forEach(function (key) {\n                Object.defineProperty(self.intf.attributes, key, {\n                    get: function () {\n                        return self.attributes[key];\n                    },\n                    set: function (value) {\n                        self.attributes[key] = value;\n                        self.draw(true);\n                        self.dispatchEvent('attributechanged', {name: key, value: value[key]});\n                    }\n                });\n            });\n            self.filters.string = function (value, filterFor) {\n                var filterRegExp,\n                    regEnd = /\\/(i|g|m)*$/,\n                    pattern = regEnd.exec(filterFor),\n                    flags = pattern ? pattern[0].substring(1) : '',\n                    flagLength = flags.length;\n                self.invalidFilterRegEx = undefined;\n                if (filterFor.substring(0, 1) === '/' && pattern) {\n                    try {\n                        filterRegExp = new RegExp(filterFor.substring(1, filterFor.length - (flagLength + 1)), flags);\n                    } catch (e) {\n                        self.invalidFilterRegEx = e;\n                        return;\n                    }\n                    return filterRegExp.test(value);\n                }\n                return value.toString ? value.toString().toLocaleUpperCase()\n                    .indexOf(filterFor.toLocaleUpperCase()) !== -1 : false;\n            };\n            self.filters.number = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                return value === filterFor;\n            };\n            if (self.attributes.name && self.attributes.saveAppearance) {\n                self.storedSettings = localStorage.getItem(self.storageName + '-' + self.attributes.name);\n                if (self.storedSettings) {\n                    try {\n                        self.storedSettings = JSON.parse(self.storedSettings);\n                    } catch (e) {\n                        console.warn('could not read settings from localStore', e);\n                        self.storedSettings = undefined;\n                    }\n                }\n                if (self.storedSettings) {\n                    if (typeof self.storedSettings.sizes === 'object') {\n                        self.sizes.rows = self.storedSettings.sizes.rows;\n                        self.sizes.columns = self.storedSettings.sizes.columns;\n                        ['trees', 'columns', 'rows'].forEach(function (i) {\n                            if (!self.sizes[i]) {\n                                self.sizes[i] = {};\n                            }\n                        });\n                    }\n                }\n            }\n            ['formatters', 'filters', 'sorters'].forEach(self.initProp);\n            if (self.args.data) {\n                self.intf.data = self.args.data;\n            }\n            if (!self.data) {\n                self.intf.data = [];\n            }\n            if (self.args.schema) {\n                self.intf.schema = self.args.schema;\n            }\n            if (self.isChildGrid) {\n                requestAnimationFrame(function () { self.resize(true); });\n            } else {\n                self.resize(true);\n            }\n            return self;\n        };\n        /**\n         * Removes focus from the grid.\n         * @memberof canvasDataGrid\n         * @name blur\n         * @method\n         */\n        self.intf.blur = function (e) {\n            self.hasFocus = false;\n        };\n        /**\n         * Focuses on the grid.\n         * @memberof canvasDataGrid\n         * @name focus\n         * @method\n         */\n        self.intf.focus = function () {\n            self.hasFocus = true;\n            self.controlInput.focus();\n        };\n        Object.defineProperty(self.intf, 'height', {\n            get: function () {\n                return self.parentNode.height;\n            },\n            set: function (value) {\n                self.parentNode.height = value;\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'width', {\n            get: function () {\n                return self.parentNode.width;\n            },\n            set: function (value) {\n                self.parentNode.width = value;\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'openChildren', {\n            get: function () {\n                return self.openChildren;\n            }\n        });\n        Object.defineProperty(self.intf, 'childGrids', {\n            get: function () {\n                return Object.keys(self.childGrids).map(function (gridId) {\n                    return self.childGrids[gridId];\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'isChildGrid', {\n            get: function () {\n                return self.isChildGrid;\n            }\n        });\n        Object.defineProperty(self.intf, 'parentNode', {\n            get: function () {\n                return self.parentNode;\n            },\n            set: function (value) {\n                self.parentNode = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetParent', {\n            get: function () {\n                return self.parentNode;\n            },\n            set: function (value) {\n                self.parentNode = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetLeft', {\n            get: function () {\n                return self.parentNode.offsetLeft;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetTop', {\n            get: function () {\n                return self.parentNode.offsetTop;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollHeight', {\n            get: function () {\n                return self.scrollBox.scrollHeight;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollWidth', {\n            get: function () {\n                return self.scrollBox.scrollWidth;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollTop', {\n            get: function () {\n                return self.scrollBox.scrollTop;\n            },\n            set: function (value) {\n                self.scrollBox.scrollTop = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollLeft', {\n            get: function () {\n                return self.scrollBox.scrollLeft;\n            },\n            set: function (value) {\n                self.scrollBox.scrollLeft = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'sizes', {\n            get: function () {\n                return self.sizes;\n            }\n        });\n        Object.defineProperty(self.intf, 'input', {\n            get: function () {\n                return self.input;\n            }\n        });\n        Object.defineProperty(self.intf, 'controlInput', {\n            get: function () {\n                return self.controlInput;\n            }\n        });\n        Object.defineProperty(self.intf, 'currentCell', {\n            get: function () {\n                return self.currentCell;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleCells', {\n            get: function () {\n                return self.visibleCells;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRows', {\n            get: function () {\n                return self.visibleRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'selections', {\n            get: function () {\n                return self.selections;\n            }\n        });\n        Object.defineProperty(self.intf, 'dragMode', {\n            get: function () {\n                return self.dragMode;\n            }\n        });\n        Object.defineProperty(self.intf, 'changes', {\n            get: function () {\n                return self.changes;\n            }\n        });\n        self.intf.formatters = self.formatters;\n        self.normalizeDataset = function (data, callback) {\n            var i, d, max, syncFnInvoked;\n            if (data === null || data === '' || data === undefined) {\n                return callback([]);\n            }\n            if (typeof data === 'string'\n                    || typeof data === 'number'\n                    || typeof data === 'boolean') {\n                data = [{'0': data}];\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if ((!Array.isArray(data[0]) && typeof data[0] === 'object' && data[0] !== null)\n                            || (Array.isArray(data) && data.length === 0)) {\n                return callback(data);\n            }\n            if (typeof data === 'function') {\n                i = data.apply(self.intf, [function (d) {\n                    if (syncFnInvoked) {\n                        console.warn('Detected a callback to the data setter function after the same function already returned a value synchronously.');\n                    }\n                    self.normalizeDataset(d, callback);\n                }]);\n                if (i) {\n                    syncFnInvoked = true;\n                    self.normalizeDataset(i, callback);\n                }\n                return;\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if (Array.isArray(data)) {\n                if (!Array.isArray(data[0])) {\n                    //array of something?  throw it all into 1 row!\n                    data = [data];\n                }\n                // find the longest length\n                max = 0;\n                d = [];\n                data.forEach(function (row) {\n                    max = Math.max(max, row.length);\n                });\n                // map against length indexes\n                data.forEach(function (row, index) {\n                    var x;\n                    d[index] = {};\n                    for (x = 0; x < max; x += 1) {\n                        d[index][x] = row[x];\n                    }\n                });\n                return callback(d);\n            }\n            throw new Error('Unsupported data type.  Must be an array of arrays or an array of objects, function or string.');\n        };\n        Object.defineProperty(self.intf, 'selectionBounds', {\n            get: function () {\n                return self.getSelectionBounds();\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedRows', {\n            get: function () {\n                return self.getSelectedData(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedCells', {\n            get: function () {\n                return self.getSelectedData();\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleSchema', {\n            get: function () {\n                return self.getVisibleSchema().map(function eachDataRow(col) {\n                    return col;\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'ctx', {\n            get: function () {\n                return self.ctx;\n            }\n        });\n        Object.defineProperty(self.intf, 'schema', {\n            get: function schemaGetter() {\n                return self.getSchema();\n            },\n            set: function schemaSetter(value) {\n                if (!Array.isArray(value) || typeof value[0] !== 'object') {\n                    throw new Error('Schema must be an array of objects.');\n                }\n                if (value[0].name === undefined) {\n                    throw new Error('Expected schema to contain an object with at least a name property.');\n                }\n                self.schema = value.map(function eachSchemaColumn(column, index) {\n                    column.width = column.width || self.style.columnWidth;\n                    column[self.uniqueId] = self.getSchemaNameHash(column.name);\n                    column.filter = column.filter || self.filter(column.type);\n                    column.type = column.type || 'string';\n                    column.index = index;\n                    column.columnIndex = index;\n                    column.rowIndex = -1;\n                    return column;\n                });\n                self.tempSchema = undefined;\n                self.createNewRowData();\n                self.createColumnOrders();\n                self.tryLoadStoredOrders();\n                self.resize(true);\n                self.dispatchEvent('schemachanged', {schema: self.schema});\n            }\n        });\n        Object.defineProperty(self.intf, 'data', {\n            get: function dataGetter() {\n                return self.data.map(function (row) {\n                    delete row[self.uniqueId];\n                    return row;\n                });\n            },\n            set: function dataSetter(value) {\n                self.normalizeDataset(value, function (d) {\n                    self.originalData = d.map(function eachDataRow(row) {\n                        row[self.uniqueId] = self.uId;\n                        self.uId += 1;\n                        return row;\n                    });\n                    self.changes = [];\n                    //TODO apply filter to incoming dataset\n                    self.data = self.originalData;\n                    if (!self.schema) {\n                        self.tempSchema = self.getSchemaFromData();\n                    }\n                    if (!self.schema && self.data.length === 0) {\n                        self.tempSchema = [{name: ''}];\n                        self.tempSchema[0][self.uniqueId] = self.getSchemaNameHash('');\n                    }\n                    if (self.tempSchema && !self.schema) {\n                        self.createColumnOrders();\n                        self.tryLoadStoredOrders();\n                        self.dispatchEvent('schemachanged', {schema: self.tempSchema});\n                    }\n                    self.createNewRowData();\n                    if (self.attributes.autoResizeColumns && self.data.length > 0\n                            && self.storedSettings === undefined) {\n                        self.autosize();\n                    }\n                    self.fitColumnToValues('cornerCell', true);\n                    if (!self.resize() || !self.isChildGrid) { self.draw(true); }\n                    self.createRowOrders();\n                    self.tryLoadStoredOrders();\n                    self.dispatchEvent('datachanged', {data: self.data});\n                });\n            }\n        });\n        self.initScrollBox = function () {\n            var sHeight = 0,\n                sWidth = 0,\n                scrollTop = 0,\n                scrollLeft = 0,\n                scrollHeight = 0,\n                scrollWidth = 0,\n                scrollBoxHeight = 20,\n                scrollBoxWidth = 20;\n            function setScrollTop(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollTop value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollHeight) {\n                    value = scrollHeight;\n                }\n                if (scrollHeight < 0) {\n                    value = 0;\n                }\n                scrollTop = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            function setScrollLeft(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollLeft value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollWidth) {\n                    value = scrollWidth;\n                }\n                if (scrollWidth < 0) {\n                    value = 0;\n                }\n                scrollLeft = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            self.scrollBox.toString = function () {\n                return '{\"width\": ' + scrollWidth\n                    + ', \"height\": ' + scrollHeight\n                    + ', \"left\": ' + scrollLeft\n                    + ', \"top\": ' + scrollTop + '}';\n            };\n            self.scrollBox.scrollTo = function (x, y) {\n                setScrollLeft(x, true);\n                setScrollTop(y);\n            };\n            Object.defineProperty(self.scrollBox, 'scrollBoxHeight', {\n                get: function () {\n                    return scrollBoxHeight;\n                },\n                set: function (value) {\n                    scrollBoxHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollBoxWidth', {\n                get: function () {\n                    return scrollBoxWidth;\n                },\n                set: function (value) {\n                    scrollBoxWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'height', {\n                get: function () {\n                    return sHeight;\n                },\n                set: function (value) {\n                    if (scrollHeight < value) {\n                        scrollTop = 0;\n                    }\n                    sHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'width', {\n                get: function () {\n                    return sWidth;\n                },\n                set: function (value) {\n                    sWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollTop', {\n                get: function () {\n                    return scrollTop;\n                },\n                set: setScrollTop\n            });\n            Object.defineProperty(self.scrollBox, 'scrollLeft', {\n                get: function () {\n                    return scrollLeft;\n                },\n                set: setScrollLeft\n            });\n            Object.defineProperty(self.scrollBox, 'scrollHeight', {\n                get: function () {\n                    return scrollHeight;\n                },\n                set: function (value) {\n                    if (scrollTop > value) {\n                        scrollTop = Math.max(value, 0);\n                    }\n                    if (scrollHeight < sHeight) {\n                        scrollTop = 0;\n                    }\n                    scrollHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollWidth', {\n                get: function () {\n                    return scrollWidth;\n                },\n                set: function (value) {\n                    if (scrollLeft > value) {\n                        scrollLeft = Math.max(value, 0);\n                    }\n                    scrollWidth = value;\n                }\n            });\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/intf.js\n// module id = 4\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false, Event: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var zIndexTop = 2, hoverScrollTimeout, autoCompleteContext;\n        function createContextMenu(ev, pos, items, parentContextMenu) {\n            var container = document.createElement('div'),\n                upArrow = document.createElement('div'),\n                downArrow = document.createElement('div'),\n                children = [],\n                selectedIndex = -1,\n                intf = {},\n                rect;\n            if (!Array.isArray(items)) { throw new Error('createContextMenu expects an array.'); }\n            function createItems() {\n                items.forEach(function (item) {\n                    var contextItemContainer = document.createElement('div'),\n                        childMenuArrow;\n                    function removeChildContext(e) {\n                        if (e.relatedTarget === container\n                                || item.contextMenu.container === e.relatedTarget\n                                || childMenuArrow === e.relatedTarget\n                                || (contextItemContainer === e.relatedTarget)\n                                ) { return; }\n                        item.contextMenu.dispose();\n                        children.splice(children.indexOf(item.contextMenu), 1);\n                        item.contextMenu = undefined;\n                        contextItemContainer.removeEventListener('mouseout', removeChildContext);\n                        container.removeEventListener('mouseout', removeChildContext);\n                        contextItemContainer.setAttribute('contextOpen', '0');\n                        contextItemContainer.setAttribute('opening', '0');\n                    }\n                    function contextAddCallback(items) {\n                        // check yet again if the user hasn't moved off\n                        if (contextItemContainer.getAttribute('opening') !== '1' ||\n                                contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        var cPos = contextItemContainer.getBoundingClientRect();\n                        cPos = {\n                            left: cPos.left + self.style.childContextMenuMarginLeft + container.offsetWidth,\n                            top: cPos.top + self.style.childContextMenuMarginTop,\n                            bottom: cPos.bottom,\n                            right: cPos.right,\n                        };\n                        item.contextMenu = createContextMenu(ev, cPos, items, intf);\n                        contextItemContainer.setAttribute('contextOpen', '1');\n                        contextItemContainer.addEventListener('mouseout', removeChildContext);\n                        container.addEventListener('mouseout', removeChildContext);\n                        children.push(item.contextMenu);\n                    }\n                    function createChildContext() {\n                        var i;\n                        if (contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        contextItemContainer.setAttribute('opening', '1');\n                        if (typeof item.items === 'function') {\n                            i  = item.items.apply(intf, [function (items) {\n                                contextAddCallback(items);\n                            }]);\n                            if (i !== undefined && Array.isArray(i)) {\n                                contextAddCallback(i);\n                            }\n                            return;\n                        }\n                        contextAddCallback(item.items);\n                    }\n                    function addItem(item) {\n                        function addContent(content) {\n                            if (typeof content === 'function') {\n                                return addContent(content(ev));\n                            }\n                            if (typeof content === 'object') {\n                                contextItemContainer.appendChild(content);\n                                return;\n                            }\n                            self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n                            contextItemContainer.addEventListener('mouseover', function () {\n                                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                            });\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n                            });\n                            contextItemContainer.innerHTML = content;\n                            return;\n                        }\n                        addContent(item.title);\n                        item.contextItemContainer = contextItemContainer;\n                        if ((item.items && item.items.length > 0) || typeof item.items === 'function') {\n                            childMenuArrow = document.createElement('div');\n                            self.createInlineStyle(childMenuArrow, 'canvas-datagrid-context-child-arrow');\n                            childMenuArrow.innerHTML = self.style.childContextMenuArrowHTML;\n                            contextItemContainer.appendChild(childMenuArrow);\n                            contextItemContainer.addEventListener('mouseover', createChildContext);\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                contextItemContainer.setAttribute('opening', '0');\n                            });\n                        }\n                        if (item.click) {\n                            contextItemContainer.addEventListener('click', function (ev) {\n                                item.click.apply(self, [ev]);\n                            });\n                        }\n                    }\n                    addItem(item);\n                    container.appendChild(contextItemContainer);\n                });\n            }\n            function clickIndex(idx) {\n                items[idx].contextItemContainer.dispatchEvent(new Event('click'));\n            }\n            function checkArrowVisibility() {\n                if (container.scrollTop > 0) {\n                    document.body.appendChild(upArrow);\n                } else if (upArrow.parentNode) {\n                    upArrow.parentNode.removeChild(upArrow);\n                }\n                if (container.scrollTop >= container.scrollHeight - container.offsetHeight && downArrow.parentNode) {\n                    downArrow.parentNode.removeChild(downArrow);\n                } else if (container.scrollHeight - container.offsetHeight > 0\n                        && !(container.scrollTop >= container.scrollHeight - container.offsetHeight)) {\n                    document.body.appendChild(downArrow);\n                }\n            }\n            function startHoverScroll(type) {\n                return function t() {\n                    var a = self.attributes.contextHoverScrollAmount;\n                    if (type === 'up' && container.scrollTop === 0) { return; }\n                    if (type === 'down' && container.scrollTop === container.scrollHeight) { return; }\n                    container.scrollTop += (type === 'up' ? -a : a);\n                    hoverScrollTimeout = setTimeout(t, self.attributes.contextHoverScrollRateMs, type);\n                };\n            }\n            function endHoverScroll(type) {\n                return function () {\n                    clearTimeout(hoverScrollTimeout);\n                };\n            }\n            function init() {\n                var loc = {},\n                    s = self.scrollOffset(self.canvas);\n                createItems();\n                self.createInlineStyle(container, 'canvas-datagrid-context-menu');\n                loc.x = pos.left - s.left;\n                loc.y = pos.top - s.top;\n                loc.height = 0;\n                zIndexTop += 1;\n                container.style.position = 'absolute';\n                upArrow.style.color = self.style.contextMenuArrowColor;\n                downArrow.style.color = self.style.contextMenuArrowColor;\n                [upArrow, downArrow].forEach(function (el) {\n                    el.style.textAlign = 'center';\n                    el.style.position = 'absolute';\n                    el.style.zIndex = zIndexTop + 1;\n                });\n                container.style.zIndex = zIndexTop;\n                if (parentContextMenu && parentContextMenu.inputDropdown) {\n                    container.style.maxHeight = window.innerHeight - loc.y - self.style.autocompleteBottomMargin + 'px';\n                    container.style.minWidth = pos.width + 'px';\n                    loc.y += pos.height;\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                container.addEventListener('scroll', checkArrowVisibility);\n                container.addEventListener('wheel', function (e) {\n                    if (self.hasFocus) {\n                        container.scrollTop += e.deltaY;\n                        container.scrollLeft += e.deltaX;\n                    }\n                    checkArrowVisibility();\n                });\n                upArrow.innerHTML = self.style.contextMenuArrowUpHTML;\n                downArrow.innerHTML = self.style.contextMenuArrowDownHTML;\n                container.appendChild(upArrow);\n                document.body.appendChild(downArrow);\n                document.body.appendChild(container);\n                rect = container.getBoundingClientRect();\n                if (rect.bottom > window.innerHeight && !(parentContextMenu && parentContextMenu.inputDropdown)) {\n                    loc.y = window.innerHeight - container.offsetHeight;\n                    if (loc.y < 0) { loc.y = 0; }\n                    if (container.offsetHeight > window.innerHeight) {\n                        container.style.height = window.innerHeight - self.style.contextMenuWindowMargin + 'px';\n                    }\n                }\n                if (rect.right > window.innerWidth) {\n                    if (parentContextMenu) {\n                        loc.x = parentContextMenu.container.offsetLeft - container.offsetWidth;\n                    } else {\n                        loc.x = window.innerWidth - container.offsetWidth;\n                    }\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                rect = container.getBoundingClientRect();\n                upArrow.style.top = rect.top + 'px';\n                downArrow.style.top = rect.top + rect.height - downArrow.offsetHeight + 'px';\n                upArrow.style.left = rect.left + 'px';\n                downArrow.style.left = rect.left + 'px';\n                downArrow.style.width = container.offsetWidth + 'px';\n                upArrow.style.width = container.offsetWidth + 'px';\n                downArrow.addEventListener('mouseover', startHoverScroll('down'));\n                downArrow.addEventListener('mouseout', endHoverScroll('down'));\n                upArrow.addEventListener('mouseover', startHoverScroll('up'));\n                upArrow.addEventListener('mouseout', endHoverScroll('up'));\n                checkArrowVisibility();\n            }\n            intf.parentGrid = self.intf;\n            intf.parentContextMenu = parentContextMenu;\n            intf.container = container;\n            init();\n            intf.clickIndex = clickIndex;\n            intf.rect = rect;\n            intf.items = items;\n            intf.upArrow = upArrow;\n            intf.downArrow = downArrow;\n            intf.dispose = function () {\n                clearTimeout(hoverScrollTimeout);\n                children.forEach(function (c) {\n                    c.dispose();\n                });\n                [downArrow, upArrow, container].forEach(function (el) {\n                    if (el.parentNode) { el.parentNode.removeChild(el); }\n                });\n            };\n            Object.defineProperty(intf, 'selectedIndex', {\n                get: function () {\n                    return selectedIndex;\n                },\n                set: function (value) {\n                    if (typeof value !== 'number' || isNaN(value || !isFinite(value))) {\n                        throw new Error('Context menu selected index must be a sane number.');\n                    }\n                    selectedIndex = value;\n                    if (selectedIndex > items.length - 1) {\n                        selectedIndex = items.length - 1;\n                    }\n                    if (selectedIndex < 0) {\n                        selectedIndex = 0;\n                    }\n                    items.forEach(function (item, index) {\n                        if (index === selectedIndex) {\n                            return self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                        }\n                        self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item');\n                    });\n                }\n            });\n            return intf;\n        }\n        function createFilterContextMenuItems(e) {\n            var filterContainer = document.createElement('div'),\n                filterLabel = document.createElement('div'),\n                filterAutoCompleteButton = document.createElement('button'),\n                filterInput = document.createElement('input'),\n                n = e.cell && e.cell.header ? e.cell.header.title || e.cell.header.name : '',\n                autoCompleteItems,\n                iRect;\n            function checkRegExpErrorState() {\n                filterInput.style.background = self.style.contextFilterInputBackground;\n                filterInput.style.color = self.style.contextFilterInputColor;\n                if (self.invalidFilterRegEx) {\n                    filterInput.style.background = self.style.contextFilterInvalidRegExpBackground;\n                    filterInput.style.color = self.style.contextFilterInvalidRegExpColor;\n                }\n            }\n            function fillAutoComplete() {\n                autoCompleteItems = {};\n                self.data.filter(function (d, i) { return i < self.attributes.maxAutoCompleteItems; }).forEach(function (row) {\n                    var value = row[e.cell.header.name];\n                    if (autoCompleteItems[value]) { return; }\n                    autoCompleteItems[value] = {\n                        title: self.formatters[e.cell.header.type || 'string']({ cell: { value: value }}),\n                        click: function (e) {\n                            filterInput.value = value;\n                            e.stopPropagation();\n                            filterInput.dispatchEvent(new Event('keyup'));\n                            self.disposeAutocomplete();\n                            return;\n                        }\n                    };\n                });\n                autoCompleteItems = Object.keys(autoCompleteItems).map(function (key) {\n                    return autoCompleteItems[key];\n                });\n            }\n            function createAutoCompleteContext(ev) {\n                if (ev && [40, 38, 13, 9, 27].indexOf(ev.keyCode) !== -1) { return; }\n                fillAutoComplete();\n                iRect = filterInput.getBoundingClientRect();\n                if (autoCompleteContext) {\n                    autoCompleteContext.dispose();\n                    autoCompleteContext = undefined;\n                }\n                autoCompleteContext = createContextMenu(e, {\n                    left: iRect.left,\n                    top: iRect.top,\n                    right: iRect.right,\n                    bottom: iRect.bottom,\n                    height: iRect.height,\n                    width: iRect.width\n                }, autoCompleteItems, {inputDropdown: true});\n                autoCompleteContext.selectedIndex = 0;\n            }\n            self.createInlineStyle(filterLabel, 'canvas-datagrid-context-menu-label');\n            self.createInlineStyle(filterAutoCompleteButton, 'canvas-datagrid-context-menu-filter-button');\n            self.createInlineStyle(filterInput, 'canvas-datagrid-context-menu-filter-input');\n            checkRegExpErrorState();\n            filterInput.onclick = self.disposeAutocomplete;\n            filterInput.addEventListener('keydown', function (e) {\n                //down\n                if (e.keyCode === 40) {\n                    autoCompleteContext.selectedIndex += 1;\n                }\n                //up\n                if (e.keyCode === 38) {\n                    autoCompleteContext.selectedIndex -= 1;\n                }\n                //enter\n                if (e.keyCode === 13) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    self.disposeContextMenu();\n                }\n                //tab\n                if (e.keyCode === 9) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    e.preventDefault();\n                }\n                //esc\n                if (e.keyCode === 27) {\n                    self.disposeContextMenu();\n                }\n            });\n            filterInput.addEventListener('keyup', function () {\n                self.setFilter(e.cell.header.name, filterInput.value);\n            });\n            filterInput.addEventListener('keyup', createAutoCompleteContext);\n            ['focus', 'blur', 'keydown', 'keyup', 'change'].forEach(function (en) {\n                filterInput.addEventListener(en, checkRegExpErrorState);\n            });\n            filterInput.value = e.cell.header ? self.columnFilters[e.cell.header.name] || '' : '';\n            filterLabel.innerHTML = self.attributes.filterOptionText.replace(/%s/g, n);\n            filterAutoCompleteButton.onclick = function () {\n                if (autoCompleteContext) {\n                    return self.disposeAutocomplete();\n                }\n                createAutoCompleteContext();\n            };\n            filterAutoCompleteButton.innerHTML = self.style.contextFilterButtonHTML;\n            filterContainer.addEventListener('click', function (e) {\n                return e.stopPropagation();\n            });\n            filterContainer.appendChild(filterLabel);\n            filterContainer.appendChild(filterInput);\n            filterContainer.appendChild(filterAutoCompleteButton);\n            e.items.push({\n                title: filterContainer\n            });\n            if (Object.keys(self.columnFilters).length) {\n                Object.keys(self.columnFilters).forEach(function (cf) {\n                    var h = self.getHeaderByName(cf);\n                    e.items.push({\n                        title: self.attributes.removeFilterOptionText.replace(/%s/g, h.title || h.name),\n                        click: function removeFilterClick(e) {\n                            e.preventDefault();\n                            self.setFilter(cf, '');\n                            self.controlInput.focus();\n                        }\n                    });\n                });\n            }\n        }\n        function addDefaultContextMenuItem(e) {\n            var isNormalCell = !(e.cell.isBackground || e.cell.isHeaderCellCap\n                    || e.cell.isScrollBar || e.cell.isCorner || e.cell.isRowHeader)\n                    && e.cell.header;\n            if (self.attributes.showFilter && isNormalCell) {\n                createFilterContextMenuItems(e);\n            }\n            if (self.attributes.showCopy\n                    && self.selections.reduce(function (p, r) {\n                        return p + r.length;\n                    }, 0) > 0) {\n                e.items.push({\n                    title: self.attributes.copyText,\n                    click: function () {\n                        document.execCommand('copy');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.saveAppearance && self.attributes.showClearSettingsOption\n                    && (Object.keys(self.sizes.rows).length > 0\n                        || Object.keys(self.sizes.columns).length > 0)) {\n                e.items.push({\n                    title: self.attributes.clearSettingsOptionText,\n                    click: function (e) {\n                        e.preventDefault();\n                        self.sizes.rows = {};\n                        self.sizes.columns = {};\n                        self.createRowOrders();\n                        self.createColumnOrders();\n                        self.storedSettings = undefined;\n                        self.dispatchEvent('resizecolumn', {columnWidth: self.style.columnWidth});\n                        self.dispatchEvent('resizerow', {cellHeight: self.style.cellHeight});\n                        self.setStorageData();\n                        self.resize(true);\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.allowSorting && self.attributes.showOrderByOption && isNormalCell) {\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextAsc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'asc');\n                        self.controlInput.focus();\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextDesc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'desc');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n        }\n        self.disposeAutocomplete = function () {\n            if (autoCompleteContext) {\n                autoCompleteContext.dispose();\n                autoCompleteContext = undefined;\n            }\n        };\n        self.disposeContextMenu = function () {\n            document.removeEventListener('click', self.disposeContextMenu);\n            zIndexTop = 2;\n            self.disposeAutocomplete();\n            if (self.contextMenu) {\n                self.contextMenu.dispose();\n            }\n            self.contextMenu = undefined;\n        };\n        self.contextmenuEvent = function (e, overridePos) {\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            function createDiposeEvent() {\n                requestAnimationFrame(function () {\n                    document.addEventListener('click', self.disposeContextMenu);\n                    document.removeEventListener('mouseup', createDiposeEvent);\n                });\n            }\n            var items = [],\n                pos = overridePos || self.getLayerPos(e, true),\n                ev = {\n                    NativeEvent: e,\n                    cell: self.getCellAt(pos.x, pos.y),\n                    items: items\n                };\n            if (!ev.cell.isGrid) {\n                addDefaultContextMenuItem(ev);\n            }\n            if (self.dispatchEvent('contextmenu', ev)) {\n                return;\n            }\n            if (!ev.cell.isGrid) {\n                if (self.contextMenu) {\n                    self.disposeContextMenu();\n                }\n                self.contextMenu = createContextMenu(ev, {\n                    left: pos.x + pos.rect.left + self.style.contextMenuMarginLeft + self.canvasOffsetLeft,\n                    top: pos.y + pos.rect.top + self.style.contextMenuMarginTop + self.canvasOffsetTop,\n                    right: ev.cell.width + ev.cell.x + pos.rect.left,\n                    bottom: ev.cell.height + ev.cell.y + pos.rect.top,\n                    height: ev.cell.height,\n                    width: ev.cell.width\n                }, items);\n                document.addEventListener('mouseup', createDiposeEvent);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/contextMenu.js\n// module id = 5\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        /**\n         * Ends editing, optionally aborting the edit.\n         * @memberof canvasDataGrid\n         * @name endEdit\n         * @method\n         * @param {boolean} abort When true, abort the edit.\n         */\n        self.endEdit = function (abort) {\n            var cell = self.input.editCell,\n                y = cell.rowIndex;\n            function abortEdit() {\n                abort = true;\n            }\n            if (self.dispatchEvent('beforeendedit', {\n                    cell: cell,\n                    newValue: self.input.value,\n                    oldValue: cell.value,\n                    abort: abortEdit,\n                    input: self.input\n                })) { return false; }\n            if (self.input.value !== cell.value && !abort) {\n                self.changes[y] = self.changes[y] || {};\n                self.changes[y][cell.header.name] = self.input.value;\n                cell.data[cell.header.name] = self.input.value;\n                if (y === self.data.length) {\n                    if (self.dispatchEvent('newrow', {\n                            value: self.input.value,\n                            defaultValue: cell.value,\n                            aborted: abort,\n                            cell: cell,\n                            input: self.input\n                        })) { return false; }\n                    self.uId += 1;\n                    self.addRow(cell.data);\n                    self.createNewRowData();\n                }\n                self.draw(true);\n            }\n            document.body.removeChild(self.input);\n            self.controlInput.focus();\n            self.dispatchEvent('endedit', {\n                cell: cell,\n                value: self.input.value,\n                aborted: abort,\n                input: self.input\n            });\n            self.input = undefined;\n            return true;\n        };\n        /**\n         * Begins editing at cell x, row y.\n         * @memberof canvasDataGrid\n         * @name beginEditAt\n         * @method\n         * @param {number} x The column index of the cell to edit.\n         * @param {number} y The row index of the cell to edit.\n         */\n        self.beginEditAt = function (x, y) {\n            if (!self.attributes.editable) { return; }\n            var cell = self.getVisibleCellByIndex(x, y),\n                s = self.getVisibleSchema(),\n                enumItems;\n            if (self.dispatchEvent('beforebeginedit', {cell: cell})) { return false; }\n            self.scrollIntoView(x, y);\n            self.setActiveCell(x, y);\n            if (cell.header.enum) {\n                self.input = document.createElement('select');\n            } else {\n                self.input = document.createElement(self.attributes.multiLine\n                    ? 'textarea' : 'input');\n            }\n            function postDraw() {\n                var option, valueInEnum;\n                cell = self.getVisibleCellByIndex(x, y);\n                if (cell.header.enum) {\n                    // add enums\n                    if (typeof cell.header.enum === 'function') {\n                        enumItems = cell.header.enum.apply(self.intf, [{cell: cell}]);\n                    } else if (Array.isArray(cell.header.enum)) {\n                        enumItems = cell.header.enum;\n                    }\n                    enumItems.forEach(function (e) {\n                        var i = document.createElement('option'),\n                            val,\n                            title;\n                        if (Array.isArray(e)) {\n                            val = e[0];\n                            title = e[1];\n                        } else {\n                            val = e;\n                            title = e;\n                        }\n                        if (val === cell.value) { valueInEnum = true; }\n                        i.value = val;\n                        i.innerHTML = title;\n                        self.input.appendChild(i);\n                    });\n                    if (!valueInEnum) {\n                        option = document.createElement('option');\n                        option.value = cell.value;\n                        option.innerHTML = cell.value;\n                        self.input.appendChild(option);\n                    }\n                    self.input.addEventListener('change', function () {\n                        self.endEdit();\n                        self.draw(true);\n                    });\n                }\n                document.body.appendChild(self.input);\n                self.createInlineStyle(self.input, 'canvas-datagrid-edit-input');\n                self.input.style.position = 'absolute';\n                self.input.editCell = cell;\n                self.resizeEditInput();\n                self.input.style.zIndex = '2';\n                self.input.value = cell.value;\n                self.input.focus();\n                self.input.addEventListener('click', self.stopPropagation);\n                self.input.addEventListener('dblclick', self.stopPropagation);\n                self.input.addEventListener('mouseup', self.stopPropagation);\n                self.input.addEventListener('mousedown', self.stopPropagation);\n                self.input.addEventListener('keydown', function (e) {\n                    var nx = cell.columnIndex,\n                        ny = cell.rowIndex;\n                    // esc\n                    if (e.keyCode === 27) {\n                        self.endEdit(true);\n                        self.draw(true);\n                    // enter\n                    } else if (e.keyCode === 13\n                            && (!self.attributes.multiLine\n                                || (self.attributes.multiLine && e.shiftKey))) {\n                        self.endEdit();\n                        self.draw(true);\n                    } else if (e.keyCode === 9) {\n                        e.preventDefault();\n                        if (!self.endEdit()) {\n                            return;\n                        }\n                        if (e.shiftKey) {\n                            nx -= 1;\n                        } else {\n                            nx += 1;\n                        }\n                        if (nx < 0) {\n                            nx = s.length - 1;\n                            ny -= 1;\n                        }\n                        if (nx > s.length - 1) {\n                            nx = 0;\n                            ny += 1;\n                        }\n                        if (ny < 0) {\n                            ny = self.data.length - 1;\n                        }\n                        if (ny > self.data.length - 1) {\n                            ny = 0;\n                        }\n                        self.scrollIntoView(nx, ny);\n                        self.beginEditAt(nx, ny);\n                    }\n                });\n            }\n            postDraw();\n            self.dispatchEvent('beginedit', {cell: cell, input: self.input});\n        };\n        self.createInlineStyle = function (el, className) {\n            var css = {\n                'canvas-datagrid-context-menu-filter-input': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextFilterInputBackground,\n                    color: self.style.contextFilterInputColor,\n                    border: self.style.contextFilterInputBorder,\n                    borderRadius: self.style.contextFilterInputBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextFilterInputFontFamily,\n                    fontSize: self.style.contextFilterInputFontSize\n                },\n                'canvas-datagrid-context-menu-filter-button': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextFilterButtonBorder,\n                    borderRadius: self.style.contextFilterButtonBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFilterButtonFontFamily,\n                    fontSize: self.style.contextMenuFilterButtonFontSize\n                },\n                'canvas-datagrid-context-child-arrow': {\n                    cssFloat: 'right',\n                    color: self.style.childContextMenuArrowColor,\n                    fontSize: self.style.contextMenuChildArrowFontSize,\n                    fontFamily: self.style.contextMenuFontFamily,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-autocomplete': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    position: 'absolute',\n                    zIndex: 3,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-autocomplete-item': {\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor\n                },\n                'canvas-datagrid-autocomplete-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-canvas': {\n                    position: 'absolute',\n                    zIndex: '-1'\n                },\n                'canvas-datagrid': {\n                    position: 'absolute',\n                    background: self.style.backgroundColor,\n                    zIndex: '1',\n                    boxSizing: 'content-box',\n                    padding: '0'\n                },\n                'canvas-datagrid-control-input': {\n                    position: 'fixed',\n                    top: '-5px',\n                    left: '-5px',\n                    border: 'none',\n                    opacity: '0',\n                    cursor: 'pointer',\n                    width: '1px',\n                    height: '1px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize\n                },\n                'canvas-datagrid-edit-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 ' + self.style.editCellPaddingLeft + 'px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.editCellFontFamily,\n                    fontSize: self.style.editCellFontSize,\n                    boxShadow: self.style.editCellBoxShadow,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-context-menu-item': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-context-menu-label': {\n                    margin: self.style.contextMenuLabelMargin,\n                    display: self.style.contextMenuLabelDisplay,\n                    minWidth: self.style.contextMenuLabelMinWidth,\n                    maxWidth: self.style.contextMenuLabelMaxWidth\n                },\n                'canvas-datagrid-context-menu': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-invalid-search-regExp': {\n                    background: self.style.contextMenuFilterInvalidExpresion\n                }\n            };\n            if (css[className]) {\n                Object.keys(css[className]).map(function (prop) {\n                    el.style[prop] = css[className][prop];\n                });\n            }\n            return;\n        };\n        self.appendTo = function (n) {\n            self.parentNode = n || document.createElement('canvas');\n            self.height = self.parentNode;\n            self.width = self.parentNode;\n            if (self.parentNode && /canvas-datagrid-(cell|tree)/.test(self.parentNode.nodeType)) {\n                self.isChildGrid = true;\n                self.parentGrid = self.parentNode.parentGrid;\n                self.ctx = self.parentGrid.context;\n                self.canvas = self.parentGrid.canvas;\n                self.controlInput = self.parentGrid.controlInput;\n                self.eventParent = self.canvas;\n                self.intf.offsetParent = self.parentNode;\n            } else {\n                self.controlInput = document.createElement('input');\n                self.controlInput.onblur = self.intf.blur;\n                self.createInlineStyle(self.controlInput, 'canvas-datagrid-control-input');\n                self.isChildGrid = false;\n                self.parentDOMNode = self.parentNode;\n                self.parentNode = self.parentDOMNode;\n                self.parentIsCanvas = /^canvas$/i.test(self.parentDOMNode.tagName);\n                if (self.isComponent) {\n                    self.parentDOMNode = self.parentNode.host.parentNode;\n                    self.canvas = document.createElement('canvas');\n                    self.parentNode.appendChild(self.canvas);\n                    self.parentNode.appendChild(self.controlInput);\n                } else if (self.parentIsCanvas) {\n                    self.canvas = self.parentDOMNode;\n                    document.body.appendChild(self.controlInput);\n                } else {\n                    self.canvas = document.createElement('canvas');\n                    self.parentDOMNode.appendChild(self.canvas);\n                    document.body.appendChild(self.controlInput);\n                }\n                self.ctx = self.canvas.getContext('2d');\n                self.ctx.textBaseline = 'alphabetic';\n                self.eventParent = self.canvas;\n            }\n            self.controlInput.addEventListener('blur', function (e) {\n                if (e.target !== self.canvas) {\n                    self.hasFocus = false;\n                }\n            });\n            window.addEventListener('resize', self.resize);\n            if (MutationObserver) {\n                self.observer = new MutationObserver(function (mutations) {\n                    mutations.forEach(function (mutation) {\n                        self.resize(true);\n                    });\n                });\n                [self.canvas.parentNode].forEach(function (el) {\n                    if (!el) { return; }\n                    self.observer.observe(el, { attributes: true });\n                });\n            }\n            self.eventParent.addEventListener('scroll', self.resize, false);\n            self.eventParent.addEventListener('touchstart', self.touchstart, false);\n            self.eventParent.addEventListener('mouseup', self.mouseup, false);\n            self.eventParent.addEventListener('mousedown', self.mousedown, false);\n            self.eventParent.addEventListener('dblclick', self.dblclick, false);\n            self.eventParent.addEventListener('click', self.click, false);\n            self.eventParent.addEventListener('mousemove', self.mousemove);\n            self.eventParent.addEventListener('wheel', self.scrollWheel, false);\n            self.canvas.addEventListener('contextmenu', self.contextmenuEvent, false);\n            (self.isChildGrid ? self.parentGrid : document).addEventListener('copy', self.copy);\n            self.controlInput.addEventListener('keypress', self.keypress, false);\n            self.controlInput.addEventListener('keyup', self.keyup, false);\n            self.controlInput.addEventListener('keydown', self.keydown, false);\n        };\n        self.setDom = function () {\n            self.appendTo(self.args.parentNode);\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/dom.js\n// module id = 6\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        // all methods here are exposed by intf\n        // to users\n        /**\n         * Converts a integer into a letter A - ZZZZZ...\n         * @memberof canvasDataGrid\n         * @name integerToAlpha\n         * @method\n         * @param {column} n The number to convert.\n         */\n        self.integerToAlpha = function (n) {\n            var ordA = 'a'.charCodeAt(0),\n                ordZ = 'z'.charCodeAt(0),\n                len = ordZ - ordA + 1,\n                s = '';\n            while (n >= 0) {\n                s = String.fromCharCode(n % len + ordA) + s;\n                n = Math.floor(n / len) - 1;\n            }\n            return s;\n        };\n        /**\n         * Inserts a new column before the specified index into the schema.\n         * @see canvasDataGrid#schema\n         * @tutorial schema\n         * @memberof canvasDataGrid\n         * @name insertColumn\n         * @method\n         * @param {column} c The column to insert into the schema.\n         * @param {number} index The index of the column to insert before.\n         */\n        self.insertColumn = function (c, index) {\n            var s = self.getSchema();\n            if (s.length < index) {\n                throw new Error('Index is beyond the length of the schema.');\n            }\n            self.validateColumn(c, s);\n            s.splice(index, 0, c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a column from the schema at the specified index.\n         * @memberof canvasDataGrid\n         * @name deleteColumn\n         * @tutorial schema\n         * @method\n         * @param {number} index The index of the column to delete.\n         */\n        self.deleteColumn = function (index) {\n            var s = self.getSchema();\n            // remove data matching this column name from data\n            self.data.forEach(function (row) {\n                delete row[s[index].name];\n            });\n            s.splice(index, 1);\n            self.intf.schema = s;\n        };\n        /**\n         * Adds a new column into the schema.\n         * @see canvasDataGrid#schema\n         * @tutorial schema\n         * @memberof canvasDataGrid\n         * @name addColumn\n         * @method\n         * @param {column} c The column to add to the schema.\n         */\n        self.addColumn = function (c) {\n            var s = self.getSchema();\n            self.validateColumn(c, s);\n            s.push(c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a row from the dataset at the specified index.\n         * @memberof canvasDataGrid\n         * @name deleteRow\n         * @method\n         * @param {number} index The index of the row to delete.\n         */\n        self.deleteRow = function (index) {\n            self.originalData.splice(index, 1);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Inserts a new row into the dataset before the specified index.\n         * @memberof canvasDataGrid\n         * @name insertRow\n         * @method\n         * @param {object} d data.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertRow = function (d, index) {\n            if (self.originalData.length < index) {\n                throw new Error('Index is beyond the length of the dataset.');\n            }\n            self.originalData.splice(index, 0, d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[index], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Adds a new row into the dataset.\n         * @memberof canvasDataGrid\n         * @name addRow\n         * @method\n         * @param {object} d data.\n         */\n        self.addRow = function (d) {\n            self.originalData.push(d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[self.originalData.length - 1], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Sets the height of a given row by index number.\n         * @memberof canvasDataGrid\n         * @name setRowHeight\n         * @method\n         * @param {number} rowIndex The index of the row to set.\n         * @param {number} height Height to set the row to.\n         */\n        self.setRowHeight = function (rowIndex, height) {\n            self.sizes.rows[self.data[rowIndex][self.uniqueId]] = height;\n            self.draw(true);\n        };\n        /**\n         * Sets the width of a given column by index number.\n         * @memberof canvasDataGrid\n         * @name setColumnWidth\n         * @method\n         * @param {number} colIndex The index of the column to set.\n         * @param {number} width Width to set the column to.\n         */\n        self.setColumnWidth = function (colIndex, width) {\n            var s = self.getSchema();\n            self.sizes.columns[s[colIndex][self.uniqueId]] = width;\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the width of the columns due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDataGrid\n         * @name resetColumnWidths\n         * @tutorial schema\n         * @method\n         */\n        self.resetColumnWidths = function () {\n            self.sizes.columns = {};\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the height of the rows due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDataGrid\n         * @name resetRowHeights\n         * @tutorial schema\n         * @method\n         */\n        self.resetRowHeights = function () {\n            self.sizes.rows = {};\n            self.draw(true);\n        };\n        /**\n         * Sets the value of the filter.\n         * @memberof canvasDataGrid\n         * @name setFilter\n         * @method\n         * @param {string} column Name of the column to filter.\n         * @param {string} value The value to filter for.\n         */\n        self.setFilter = function (column, value) {\n            function applyFilter() {\n                self.refreshFromOrigialData();\n                Object.keys(self.columnFilters).forEach(function (filter) {\n                    var header = self.getHeaderByName(column);\n                    if (!header) {\n                        return;\n                    }\n                    self.currentFilter = header.filter || self.filter(column.type || 'string');\n                    self.data = self.data.filter(function (row) {\n                        return self.currentFilter(row[filter], self.columnFilters[filter]);\n                    });\n                });\n                self.resize();\n                self.draw(true);\n            }\n            if (column === undefined && value === undefined) {\n                self.columnFilters = {};\n                return applyFilter();\n            }\n            if (column && (value === '' || value === undefined)) {\n                delete self.columnFilters[column];\n            } else {\n                self.columnFilters[column] = value;\n            }\n            applyFilter();\n        };\n        /**\n         * Returns the number of pixels to scroll down to line up with row rowIndex.\n         * @memberof canvasDataGrid\n         * @name findRowScrollTop\n         * @method\n         * @param {number} rowIndex The row index of the row to scroll find.\n         */\n        self.findRowScrollTop = function (rowIndex) {\n            var top = 0, x = 0, l = self.data.length,\n                cellBorder = self.style.cellBorderWidth * 2;\n            if (!self.attributes.showNewRow) {\n                l -= 1;\n            }\n            if (rowIndex > l) {\n                throw new Error('Impossible row index');\n            }\n            while (x < rowIndex) {\n                top += (self.sizes.rows[self.data[x][self.uniqueId]] || self.style.cellHeight) + cellBorder;\n                x += 1;\n            }\n            //TODO: This is not super accurate, causes pageUp/Dn to not move around right\n            return top - (self.sizes.rows[self.data[rowIndex][self.uniqueId]] || self.style.cellHeight);\n        };\n        /**\n         * Returns the number of pixels to scroll to the left to line up with column columnIndex.\n         * @memberof canvasDataGrid\n         * @name findColumnScrollLeft\n         * @method\n         * @param {number} columnIndex The column index of the column to find.\n         */\n        self.findColumnScrollLeft = function (columnIndex) {\n            var left = 0, y = 0, s = self.getSchema(), l = s.length - 1;\n            if (columnIndex > l) {\n                throw new Error('Impossible column index');\n            }\n            while (y < columnIndex) {\n                left += self.sizes.columns[s[y][self.uniqueId]] || s[y].width;\n                y += 1;\n            }\n            return left;\n        };\n        /**\n         * Scrolls the cell at cell x, row y.\n         * @memberof canvasDataGrid\n         * @name gotoCell\n         * @method\n         * @param {number} x The column index of the cell to scroll to.\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoCell = function (x, y) {\n            if (x !== undefined) {\n                self.scrollBox.scrollLeft = self.findColumnScrollLeft(x);\n            }\n            if (y !== undefined) {\n                self.scrollBox.scrollTop = self.findRowScrollTop(y);\n            }\n        };\n        /**\n         * Scrolls the row y.\n         * @memberof canvasDataGrid\n         * @name gotoRow\n         * @method\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoRow = function (y) {\n            self.gotoCell(0, y);\n        };\n        /**\n         * Scrolls the cell at cell x, row y into view if it is not already.\n         * @memberof canvasDataGrid\n         * @name scrollIntoView\n         * @method\n         * @param {number} x The column index of the cell to scroll into view.\n         * @param {number} y The row index of the cell to scroll into view.\n         */\n        self.scrollIntoView = function (x, y) {\n            if (self.visibleCells.filter(function (cell) {\n                    return (cell.rowIndex === y || y === undefined)\n                        && (cell.columnIndex === x || x === undefined)\n                        && cell.x > 0\n                        && cell.y > 0\n                        && cell.x + cell.width < self.width\n                        && cell.y + cell.height < self.height;\n                }).length === 0) {\n                self.gotoCell(x, y);\n            }\n        };\n        /**\n         * Sets the active cell. Requires redrawing.\n         * @memberof canvasDataGrid\n         * @name setActiveCell\n         * @method\n         * @param {number} x The column index of the cell to set active.\n         * @param {number} y The row index of the cell to set active.\n         */\n        self.setActiveCell = function (x, y) {\n            self.activeCell = {\n                rowIndex: y,\n                columnIndex: x\n            };\n        };\n        /**\n         * Selects every visible cell.\n         * @memberof canvasDataGrid\n         * @name selectAll\n         * @method\n         */\n        self.selectAll = function () {\n            self.selectArea({\n                top: 0,\n                left: 0,\n                right: self.getVisibleSchema().length - 1,\n                bottom: self.data.length - 1\n            });\n        };\n        /**\n         * Returns true if the selected columnIndex is selected on every row.\n         * @memberof canvasDataGrid\n         * @name isColumnSelected\n         * @method\n         * @param {number} columnIndex The column index to check.\n         */\n        self.isColumnSelected = function (columnIndex) {\n            var colIsSelected = true;\n            self.data.forEach(function (row, rowIndex) {\n                if (!self.selections[rowIndex] || self.selections[rowIndex].indexOf(self.orders.columns[columnIndex]) === -1) {\n                    colIsSelected = false;\n                }\n            });\n            return colIsSelected;\n        };\n        /**\n         * Selects a column.\n         * @memberof canvasDataGrid\n         * @name selectColumn\n         * @method\n         * @param {number} columnIndex The column index to select.\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the column.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the column.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectColumn = function (columnIndex, ctrl, shift, supressEvent) {\n            var s, e, x;\n            function addCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) === -1) {\n                        self.selections[rowIndex].push(i);\n                    }\n                });\n            }\n            function removeCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) !== -1) {\n                        self.selections[rowIndex].splice(self.selections[rowIndex].indexOf(i), 1);\n                    }\n                });\n            }\n            if (shift) {\n                if (!self.activeCell) { return; }\n                s = Math.min(self.activeCell.columnIndex, columnIndex);\n                e = Math.max(self.activeCell.columnIndex, columnIndex);\n                for (x = s; e > x; x += 1) {\n                    addCol(x);\n                }\n            }\n            if (!ctrl && !shift) {\n                self.selections = [];\n                self.activeCell.columnIndex = columnIndex;\n                self.activeCell.rowIndex = self.scrollIndexTop;\n            }\n            if (ctrl && self.isColumnSelected(columnIndex)) {\n                removeCol(columnIndex);\n            } else {\n                addCol(columnIndex);\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.getSelectionBounds()\n            });\n        };\n        /**\n         * Selects a row.\n         * @memberof canvasDataGrid\n         * @name selectRow\n         * @method\n         * @param {number} rowIndex The row index to select.\n         * @param {boolean} ctrl When true, behaves as if you were holding control/command when you clicked the row.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the row.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectRow = function (rowIndex, ctrl, shift, supressEvent) {\n            var x, st, en, s = self.getSchema();\n            function addRow(ri) {\n                self.selections[ri] = [];\n                self.selections[ri].push(-1);\n                s.forEach(function (col) {\n                    self.selections[ri].push(col.index);\n                });\n            }\n            if (self.dragAddToSelection === false || self.dragObject === undefined) {\n                if (self.selections[rowIndex] && self.selections[rowIndex].length - 1 === s.length) {\n                    if (ctrl) {\n                        self.selections[rowIndex] = [];\n                        return;\n                    }\n                }\n            }\n            if (self.dragAddToSelection === true || self.dragObject === undefined) {\n                if (shift && self.dragObject === undefined) {\n                    if (!self.activeCell) { return; }\n                    st = Math.min(self.activeCell.rowIndex, rowIndex);\n                    en = Math.max(self.activeCell.rowIndex, rowIndex);\n                    for (x = st; en >= x; x += 1) {\n                        addRow(x);\n                    }\n                } else {\n                    addRow(rowIndex);\n                }\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Collapse a tree grid by row index.\n         * @memberof canvasDataGrid\n         * @name collapseTree\n         * @method\n         * @param {number} index The index of the row to collapse.\n         */\n        self.collapseTree = function (rowIndex) {\n            var rowId = self.data[rowIndex][self.uniqueId];\n            self.dispatchEvent('collapsetree', {\n                childGrid: self.childGrids[rowId],\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId].blur();\n            self.openChildren[rowId].dispose();\n            delete self.openChildren[rowId];\n            delete self.sizes.trees[rowId];\n            delete self.childGrids[rowId];\n            self.dispatchEvent('resizerow', {\n                cellHeight: self.style.cellHeight\n            });\n            self.resize(true);\n            self.draw(true);\n        };\n        /**\n         * Expands a tree grid by row index.\n         * @memberof canvasDataGrid\n         * @name expandTree\n         * @method\n         * @param {number} index The index of the row to expand.\n         */\n        self.expandTree = function (rowIndex) {\n            var rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth,\n                rowId = self.data[rowIndex][self.uniqueId],\n                h = self.sizes.trees[rowId] || self.style.treeGridHeight,\n                treeGrid;\n            if (!self.childGrids[rowId]) {\n                treeGrid = self.createGrid({\n                    debug: self.attributes.debug,\n                    name: self.attributes.saveAppearance\n                        ? self.attributes.name + 'tree' + rowId : undefined,\n                    parentNode: {\n                        parentGrid: self.intf,\n                        nodeType: 'canvas-datagrid-tree',\n                        offsetHeight: h,\n                        offsetWidth: self.width - columnHeaderCellWidth,\n                        header: { width: self.width - columnHeaderCellWidth },\n                        offsetLeft: columnHeaderCellWidth,\n                        offsetTop: rowHeaderCellHeight,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: 'tree',\n                        data: self.data[rowIndex]\n                    }\n                });\n                self.childGrids[rowId] = treeGrid;\n            }\n            treeGrid = self.childGrids[rowId];\n            treeGrid.visible = true;\n            self.dispatchEvent('expandtree', {\n                treeGrid: treeGrid,\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId] = treeGrid;\n            self.sizes.trees[rowId] = h;\n            self.dispatchEvent('resizerow', {height: self.style.cellHeight});\n            self.resize(true);\n        };\n        /**\n         * Toggles tree grid open and close by row index.\n         * @memberof canvasDataGrid\n         * @name toggleTree\n         * @method\n         * @param {number} index The index of the row to toggle.\n         */\n        self.toggleTree = function (rowIndex) {\n            var i = self.openChildren[self.data[rowIndex][self.uniqueId]];\n            if (i) {\n                return self.collapseTree(rowIndex);\n            }\n            self.expandTree(rowIndex);\n        };\n        /**\n         * Returns a header from the schema by name.\n         * @memberof canvasDataGrid\n         * @name getHeaderByName\n         * @tutorial schema\n         * @method\n         * @returns {header} header with the selected name, or undefined.\n         * @param {string} name The name of the column to resize.\n         */\n        self.getHeaderByName = function (name) {\n            var x, i = self.getSchema();\n            for (x = 0; x < i.length; x += 1) {\n                if (i[x].name === name) {\n                    return i[x];\n                }\n            }\n        };\n        /**\n         * Resizes a column to fit the longest value in the column. Call without a value to resize all columns.\n         * Warning, can be slow on very large record sets (1m records ~3-5 seconds on an i7).\n         * @memberof canvasDataGrid\n         * @name fitColumnToValues\n         * @method\n         * @param {string} name The name of the column to resize.\n         */\n        self.fitColumnToValues = function (name, internal) {\n            self.sizes.columns[name === 'cornerCell' ? name : self.getHeaderByName(name)[self.uniqueId]]\n                = self.findColumnMaxTextLength(name);\n            if (!internal) {\n                self.resize();\n                self.draw(true);\n            }\n        };\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDataGrid\n         * @name isCellVisible\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {cell} cell The cell to check for.  Alternatively you can pass an object { x: <x-index>, y: <y-index> }.\n         */\n        self.isCellVisible = function (cell) {\n            var x, l = self.visibleCells.length;\n            for (x = 0; x < l; x += 1) {\n                if (cell.x === self.visibleCells[x].x && cell.y === self.visibleCells[x].y) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n         * Sets the order of the data.\n         * @memberof canvasDataGrid\n         * @name order\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} columnName Number of pixels from the left.\n         * @param {string} direction `asc` for ascending or `desc` for descending.\n         * @param {function} [sortFunction] When defined, override the default sorting method defined in the column's schema and use this one.\n         * @param {bool} [dontSetStorageData] Don't store this setting for future use.\n         */\n        self.order = function (columnName, direction, sortFunction, dontSetStorageData) {\n            var f,\n                c = self.getSchema().filter(function (col) {\n                    return col.name === columnName;\n                });\n            self.orderBy = columnName;\n            if (c.length === 0) {\n                throw new Error('Cannot sort.  No such column name');\n            }\n            f = sortFunction || self.sorters[c[0].type];\n            if (!f && c[0].type !== undefined) {\n                console.warn('Cannot sort type \"%s\" falling back to string sort.', c[0].type);\n            }\n            self.data = self.data.sort(typeof f === 'function' ? f(columnName, direction) : self.sorters.string);\n            self.dispatchEvent('ordercolumn', {name: columnName, direction: direction});\n            self.draw(true);\n            if (dontSetStorageData) { return; }\n            self.setStorageData();\n        };\n        self.isInGrid = function (e) {\n            if (e.x < 0\n                    || e.x > self.width\n                    || e.y < 0\n                    || e.y > self.height) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Gets the cell at columnIndex and rowIndex.\n         * @memberof canvasDataGrid\n         * @name getVisibleCellByIndex\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Column index.\n         * @param {number} y Row index.\n         */\n        self.getVisibleCellByIndex = function (x, y) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === x && c.rowIndex === y;\n            })[0];\n        };\n        /**\n         * Gets the cell at grid pixel coordinate x and y.\n         * @memberof canvasDataGrid\n         * @name getCellAt\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Number of pixels from the left.\n         * @param {number} y Number of pixels from the top.\n         */\n        self.getCellAt = function (x, y, useTouchScrollZones) {\n            var tsz = useTouchScrollZones ? self.attributes.touchScrollZone : 0, i, l = self.visibleCells.length, cell;\n            if (!self.visibleCells || !self.visibleCells.length) { return; }\n            self.hasFocus = true;\n            if (!(y < self.height\n                && y > 0\n                && x < self.width\n                && x > 0)) {\n                self.hasFocus = false;\n                return {\n                    dragContext: 'inherit',\n                    context: 'inherit'\n                };\n            }\n            for (i = 0; i < l; i += 1) {\n                cell = self.visibleCells[i];\n                if (useTouchScrollZones && /(vertical|horizontal)-scroll-/.test(cell.style)) {\n                    cell.x -= tsz;\n                    cell.y -= tsz;\n                    cell.height += tsz;\n                    cell.width += tsz;\n                }\n                if (cell.x - self.style.cellBorderWidth < x\n                        && cell.x + cell.width + self.style.cellBorderWidth > x\n                        && cell.y - self.style.cellBorderWidth < y\n                        && cell.y + cell.height + self.style.cellBorderWidth > y) {\n                    if (/vertical-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'vertical-scroll-box';\n                        cell.context = 'vertical-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isVerticalScrollBar = true;\n                        if (y > self.scrollBox.box.v.y + self.scrollBox.scrollBoxHeight) {\n                            cell.dragContext = 'vertical-scroll-bottom';\n                            cell.context = 'vertical-scroll-bottom';\n                        } else if (y < self.scrollBox.box.v.y) {\n                            cell.dragContext = 'vertical-scroll-top';\n                            cell.context = 'vertical-scroll-top';\n                        }\n                        self.canvas.style.cursor = 'default';\n                        return cell;\n                    }\n                    if (/horizontal-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'horizontal-scroll-box';\n                        cell.context = 'horizontal-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isHorizontalScrollBar = true;\n                        if (x > self.scrollBox.box.h.x + self.scrollBox.scrollBoxWidth) {\n                            cell.dragContext = 'horizontal-scroll-right';\n                            cell.context = 'horizontal-scroll-right';\n                        } else if (x < self.scrollBox.box.h.x) {\n                            cell.dragContext = 'horizontal-scroll-left';\n                            cell.context = 'horizontal-scroll-left';\n                        }\n                        self.canvas.style.cursor = 'default';\n                        return cell;\n                    }\n                    if (cell.x + cell.width - (self.attributes.borderResizeZone * 0.4) < x\n                            && cell.x + cell.width + (self.attributes.borderResizeZone * 0.6) > x\n                            && self.attributes.allowColumnResize\n                            && ((self.attributes.allowColumnResizeFromCell && cell.style === 'cell')\n                                || cell.style !== 'cell')\n                            && ((self.attributes.allowRowHeaderResize\n                                && ['rowHeaderCell', 'cornerCell'].indexOf(cell.style) !== -1)\n                                || ['rowHeaderCell', 'cornerCell'].indexOf(cell.style) === -1)) {\n                        cell.context = 'ew-resize';\n                        cell.dragContext = 'ew-resize';\n                        return cell;\n                    }\n                    if (cell.y + cell.height - (self.attributes.borderResizeZone * 0.4) < y\n                            && cell.y + cell.height + (self.attributes.borderResizeZone * 0.6) > y\n                            && self.attributes.allowRowResize\n                            && ((self.attributes.allowRowResizeFromCell && cell.style === 'cell')\n                                || cell.style !== 'cell')\n                            && cell.style !== 'columnHeaderCell') {\n                        cell.context = 'ns-resize';\n                        cell.dragContext = 'ns-resize';\n                        return cell;\n                    }\n                    if (cell.style === 'columnHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'column-reorder';\n                        return cell;\n                    }\n                    if (cell.style === 'rowHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'row-reorder';\n                        return cell;\n                    }\n                    if (cell.isGrid) {\n                        self.hasFocus = false;\n                        cell.dragContext = 'cell-grid';\n                        cell.context = 'cell-grid';\n                        return cell;\n                    }\n                    if (cell.style === 'tree-grid') {\n                        self.hasFocus = false;\n                        cell.dragContext = 'tree';\n                        cell.context = 'tree';\n                        return cell;\n                    }\n                    cell.dragContext = 'cell';\n                    cell.context = 'cell';\n                    return cell;\n                }\n            }\n            self.hasFocus = true;\n            self.canvas.style.cursor = 'default';\n            return {\n                dragContext: 'background',\n                context: 'background',\n                style: 'background',\n                isBackground: true\n            };\n        };\n        /**\n         * Gets the bounds of current selection. \n         * @returns {rect} selection.\n         * @memberof canvasDataGrid\n         * @name getSelectionBounds\n         * @method\n         */\n        self.getSelectionBounds = function () {\n            var low = {x: Infinity, y: Infinity},\n                high = {x: -Infinity, y: -Infinity};\n            self.data.forEach(function (row, rowIndex) {\n                var maxCol, minCol;\n                if (self.selections[rowIndex] && self.selections[rowIndex].length) {\n                    low.y = rowIndex < low.y ? rowIndex : low.y;\n                    high.y = rowIndex > high.y ? rowIndex : high.y;\n                    maxCol = Math.max.apply(null, self.selections[rowIndex]);\n                    minCol = Math.min.apply(null, self.selections[rowIndex]);\n                    low.x = minCol < low.x ? minCol : low.x;\n                    high.x = maxCol > high.x ? maxCol : high.x;\n                }\n            });\n            return {\n                top: low.y,\n                left: low.x,\n                bottom: high.y,\n                right: high.x\n            };\n        };\n        /**\n         * Returns an auto generated schema based on data structure.\n         * @memberof canvasDataGrid\n         * @name getSchemaFromData\n         * @method\n         * @tutorial schema\n         * @returns {schema} schema A schema based on the first item in the data array.\n         */\n        self.getSchemaFromData = function () {\n            return Object.keys(self.data[0] || {' ': ''}).map(function mapEachSchemaColumn(key, index) {\n                var type = self.getBestGuessDataType(key),\n                    i = {\n                        name: key,\n                        title: isNaN(parseInt(key, 10)) ? key : self.integerToAlpha(key).toUpperCase(),\n                        width: self.style.columnWidth,\n                        index: index,\n                        type: type,\n                        filter: self.filter(type)\n                    };\n                if (key === self.uniqueId) {\n                    i.hidden = true;\n                }\n                i[self.uniqueId] = self.getSchemaNameHash(key);\n                return i;\n            });\n        };\n        /**\n         * Clears the change log grid.changes that keeps track of changes to the data set.\n         * This does not undo changes or alter data it is simply a convince array to keep\n         * track of changes made to the data since last this method was called.\n         * @memberof canvasDataGrid\n         * @name clearChangeLog\n         * @method\n         */\n        self.clearChangeLog = function () {\n            self.changes = [];\n        };\n        /**\n         * Selects an area of the grid.\n         * @memberof canvasDataGrid\n         * @name selectArea\n         * @method\n         * @param {rect} bounds A rect object representing the selected values.\n         */\n        self.selectArea = function (bounds, ctrl) {\n            self.selectionBounds = bounds || self.selectionBounds;\n            var x, y, s = self.getSchema();\n            if (!ctrl) {\n                self.selections = [];\n            }\n            if (self.selectionBounds.top < -1\n                    || self.selectionBounds.bottom > self.data.length\n                    || self.selectionBounds.left < -1\n                    || self.selectionBounds.right > s.length) {\n                throw new Error('Impossible selection area');\n            }\n            for (x = self.selectionBounds.top; x <= self.selectionBounds.bottom; x += 1) {\n                self.selections[x] = [];\n                for (y = self.selectionBounds.left; y <= self.selectionBounds.right; y += 1) {\n                    if (self.selections[x].indexOf(y) === -1) {\n                        self.selections[x].push(y);\n                    }\n                }\n            }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Returns the maximum text width for a given column by column name.\n         * @memberof canvasDataGrid\n         * @name findColumnMaxTextLength\n         * @method\n         * @returns {number} The number of pixels wide the maximum width value in the selected column.\n         * @param {string} name The name of the column to calculate the value's width of.\n         */\n        self.findColumnMaxTextLength = function (name) {\n            var m = -Infinity;\n            if (name === 'cornerCell') {\n                self.ctx.font = self.style.rowHeaderCellFont;\n                return self.ctx.measureText((self.data.length + (self.attributes.showNewRow ? 1 : 0)).toString()).width\n                    + self.style.autosizePadding + self.style.autosizeHeaderCellPadding\n                    + self.style.rowHeaderCellPaddingRight\n                    + self.style.rowHeaderCellPaddingLeft\n                    + (self.attributes.tree ? self.style.treeArrowWidth\n                        + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight : 0);\n            }\n            self.getSchema().forEach(function (col) {\n                if (col.name !== name) { return; }\n                self.ctx.font = self.style.columnHeaderCellFont;\n                var t = self.ctx.measureText(col.title || col.name).width\n                    + self.style.headerCellPaddingRight\n                    + self.style.headerCellPaddingLeft;\n                m = t > m ? t : m;\n            });\n            self.data.forEach(function (row) {\n                self.ctx.font = self.style.cellFont;\n                var t = self.ctx.measureText(row[name]).width\n                    + self.style.cellPaddingRight\n                    + self.style.cellPaddingLeft + self.style.cellAutoResizePadding;\n                m = t > m ? t : m;\n            });\n            return m;\n        };\n        /**\n         * Gets the total width of all header columns.\n         * @memberof canvasDataGrid\n         * @name getHeaderWidth\n         * @method\n         */\n        self.getHeaderWidth = function () {\n            return self.getVisibleSchema().reduce(function (total, header) {\n                return total + header.width;\n            }, 0);\n        };\n        self.formatters.string = function cellFormatterString(e) {\n            return e.cell.value !== undefined ? e.cell.value : '';\n        };\n        self.formatters.rowHeaderCell = self.formatters.string;\n        self.formatters.headerCell = self.formatters.string;\n        self.formatters.number = self.formatters.string;\n        self.formatters.int = self.formatters.string;\n        self.formatters.html = self.formatters.string;\n        self.sorters.string = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (a[columnName] === undefined || a[columnName] === null) {\n                    return 1;\n                }\n                if (b[columnName] === undefined || b[columnName] === null) {\n                    return 0;\n                }\n                if (asc) {\n                    if (!a[columnName].localeCompare) { return 1; }\n                    return a[columnName].localeCompare(b[columnName]);\n                }\n                if (!b[columnName].localeCompare) { return 1; }\n                return b[columnName].localeCompare(a[columnName]);\n            };\n        };\n        self.sorters.number = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return a[columnName] - b[columnName];\n                }\n                return b[columnName] - a[columnName];\n            };\n        };\n        self.sorters.date = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return new Date(a[columnName]).getTime()\n                        - new Date(b[columnName]).getTime();\n                }\n                return new Date(b[columnName]).getTime()\n                        - new Date(a[columnName]).getTime();\n            };\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/publicMethods.js\n// module id = 7\n// module chunks = 0"],"sourceRoot":""}