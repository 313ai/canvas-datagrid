{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///canvas-datagrid.js","webpack:///webpack/bootstrap 4794f79a3c1a8eebc5f3","webpack:///./lib/defaults.js","webpack:///./lib/main.js","webpack:///./lib/component.js","webpack:///./lib/draw.js","webpack:///./lib/events.js","webpack:///./lib/touch.js","webpack:///./lib/intf.js","webpack:///./lib/contextMenu.js","webpack:///./lib/dom.js","webpack:///./lib/publicMethods.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","undefined","self","defaults","attributes","styles","apply","context","component","Grid","args","isComponent","intf","eval","document","createElement","createGrid","forEach","createShadowRoot","shadowRoot","attachShadow","mode","debug","parentNode","init","Array","slice","arguments","window","HTMLElement","create","customElements","observedAttributes","getObservableAttributes","disconnectedCallback","attributeChangedCallback","connectedCallback","adoptedCallback","canvasDatagrid","require","tKeys","body","style","width","height","keys","argKey","appendChild","indexOf","tKey","sKey","hyphenateProperty","prop","cust","char","toUpperCase","toLowerCase","getDefaultItem","base","item","filter","applyComponentStyle","supressChangeAndDrawEvents","cStyle","getComputedStyle","defs","computedStyle","def","val","getPropertyValue","setStyleProperty","typeMap","requestAnimationFrame","resize","dispatchEvent","data","strData","JSON","parse","e","Error","schema","strSchema","number","strNum","parseInt","isNaN","boolean","strBool","test","string","str","attrs","attr","push","connected","observe","attrName","oldVal","newVal","tfn","addEventListener","observer","MutationObserver","mutations","checkInnerHTML","checkStyle","mutation","attributeName","target","nodeName","addedNodes","length","type","innerHTML","characterData","childList","subtree","canvas","querySelectorAll","el","drawPerfLine","w","h","x","y","perfArr","arrIndex","max","color","useAbs","r","canvasOffsetLeft","canvasOffsetTop","ctx","beginPath","moveTo","cx","cy","Math","abs","lineTo","strokeStyle","stroke","drawOnAllImagesLoaded","loaded","htmlImageCache","html","complete","draw","drawHtml","cell","img","v","formattedValue","drawImage","Image","onload","src","btoa","drawOrderByArrow","mt","columnHeaderOrderByArrowMarginTop","scale","ml","columnHeaderOrderByArrowMarginLeft","mr","columnHeaderOrderByArrowMarginRight","aw","columnHeaderOrderByArrowWidth","ah","columnHeaderOrderByArrowHeight","fillStyle","columnHeaderOrderByArrowColor","columnHeaderOrderByArrowBorderColor","orderDirection","fill","drawTreeArrow","treeArrowMarginTop","treeArrowMarginRight","treeArrowMarginLeft","treeArrowWidth","treeArrowHeight","treeArrowColor","treeArrowBorderColor","openChildren","uniqueId","radiusRect","radius","b","quadraticCurveTo","fillRect","strokeRect","fillText","text","fillCircle","arc","PI","strokeCircle","clipFrozenArea","lastFrozenColumnPixel","lastFrozenRowPixel","clip","fillHandle","selectionHandleType","strokeHandle","addselectionHandle","pos","hw","selectionHandleSize","tr","br","tl","bl","addBorderLine","t","addEllipsis","ellipsisCache","measureText","value","drawText","paddingLeft","paddingTop","paddingRight","paddingBottom","vPos","hPos","orderByArrowWidth","fontHeight","horizontalAlignment","verticalAlignment","getFrozenColumnsWidth","column","getVisibleSchema","min","frozenColumn","orders","columns","sizes","cellWidth","perfCounters","drawCount","perfWindowSize","entityCount","scrollDebugCounters","touchPPSCounters","internal","createHandlesOverlayArray","allowMovingSelection","mobile","selectionBorderTop","selectionBorderRight","selectionHandles","selectionHandle","selectionBorderLeft","selectionBorderBottom","selectionHandleBehavior","createBorderOverlayArray","drawArray","propPrefix","offsetPoint","selectionBorder","isRowHeader","selections","rowIndex","columnIndex","isHeader","drawCell","rowOrderIndex","header","headerIndex","columnOrderIndex","cellGridAttributes","cellStyle","isCorner","isColumnHeader","selected","hovered","hovers","active","activeCell","isGrid","activeHeader","rows","f","formatters","orderByArrowSize","treeArrowSize","ev","row","cellBorderWidth","visibleRows","nodeType","offsetTop","offsetLeft","scrollTop","scrollBox","scrollLeft","cellHeight","offsetWidth","offsetHeight","offsetParent","isHeaderCellCap","rowOpen","sortColumnIndex","sortRowIndex","isNormal","gridId","parentGrid","title","userHeight","rowHeight","userWidth","cornerCell","visibleCells","unshift","lineWidth","cellHeightWithChildGrid","checkScrollHeight","cellWidthWithChildGrid","rd","save","tree","showRowNumbers","childGrids","saveAppearance","cellGridHeight","grid","visible","orderBy","font","console","warn","toString","columnFilters","filterTextPrefix","aCell","selectionBorders","movingSelection","moveBorders","moveOffset","restore","bc","drawRowHeader","rowData","index","a","showRowHeaders","rowHeaderCell","rowHeaderCellWidth","drawRow","treeHeight","rowSansTreeHeight","g","trees","allowFreezingColumns","frozenColumnWidths","scrollIndexLeft","scrollIndexRight","scrollPixelRight","scrollPixelLeft","treeGrid","scrollBarWidth","rowHeaders","visibleRowHeights","isChildGrid","gridBorderCollapse","u","currentCell","columnHeaderCellHeight","getColumnHeaderCellHeight","getRowHeaderCellWidth","performance","now","createRowOrders","devicePixelRatio","gridBackgroundColor","ln","frozenRow","allowFreezingRows","frozenMarkerBorderWidth","frozenMarkerWidth","snapToRow","scrollPixelTop","scrollIndexTop","scrollIndexBottom","scrollPixelBottom","showNewRow","newRow","cl","selectionMode","activeCellOverlayBorderWidth","activeCellOverlayBorderColor","getHeaderWidth","drawHeaderColumnRange","start","end","order","columnHeaderCell","nonFrozenHeaderWidth","rArgs","rhIndex","showColumnHeaders","columnHeaderCellBorderWidth","isHeaderCell","endCap","my","mx","xHover","yHover","frozenMarkerHoverColor","frozenMarkerColor","frozenMarkerHoverBorderColor","frozenMarkerBorderColor","freezeMarkerPosition","frozenMarkerActiveColor","frozenMarkerActiveBorderColor","dragMode","dsb","selectionOverlayBorderWidth","selectionOverlayBorderColor","selectionHandleBorderWidth","selectionHandleBorderColor","selectionHandleColor","az","touchSelectHandleZone","ax","ay","reorderObject","dragOffset","reorderMarkerBackgroundColor","reorderMarkerBorderWidth","reorderMarkerBorderColor","reorderMarkerIndexBorderWidth","reorderMarkerIndexBorderColor","reorderTarget","moveOverlayBorderWidth","moveOverlayBorderColor","setLineDash","moveOverlayBorderSegments","vb","nb","co","isScrollBoxCorner","scrollBarBoxMargin","scrollBarBorderColor","scrollBarBorderWidth","scrollBarBackgroundColor","scrollBoxHeight","scrollHeight","scrollBarBoxWidth","scrollBarBoxColor","scrollBarActiveColor","scrollBarBoxBorderRadius","scrollBoxWidth","scrollWidth","scrollBarCornerBorderColor","scrollBarCornerBackgroundColor","bar","box","gridBorderWidth","gridBorderColor","showPerformance","fillArray","pop","perf","reduce","toFixed","htmlImages","startScale","scaleDelta","zoomDeltaStart","touchLength","touches","touchPosition","touchPosition1","scrollIndex","scrollPixel","canvasOffset","touchDelta","touchAnimateTo","scrollAnimation","touchPPS","xPPS","yPPS","touchPPST","xPPST","yPPST","touchDuration","pointerLockPosition","size","mouse","touch","touchStart","entities","hasFocus","dragContext","textAlign","key","dpl","pw","ph","px","py","wheeling","stopPropagation","fn","events","removeEventListener","sfn","idx","splice","preventDefault","defaultPrevented","drawAfterResize","bm","cellBorder","columnHeaderCellBorder","ch","accumulator","hidden","top","left","widthBoxRatio","heightBoxRatio","scrollBarBoxMinSize","page","pageUpDownOverlap","resizeEditInput","scroll","dontDraw","mousemove","overridePos","contextMenu","input","getLayerPos","dragBounds","sBounds","delta","ctrl","ctrlKey","metaKey","persistantSelectionMode","vs","getCellAt","NativeEvent","previousCell","clearTimeout","scrollTimer","isInGrid","cellBoundaryCrossed","draggingItem","scrollModes","dragItem","cursor","selecting","getSelectionBounds","dragStart","dragStartObject","shiftKey","bottom","right","ignoreNextClick","selectRow","dragAddToSelection","selectionBounds","selectArea","autoScrollZone","click","checkSelectionChange","selectedData","getSelectedData","endEdit","setActiveCell","selectAll","columnHeaderClickBehavior","selectColumn","treeArrowClickRadius","toggleTree","dragResizeColumn","resizingStartingWidth","resizingStartingHeight","minColumnWidth","minRowHeight","resizeScrollZone","resizeChildGrids","globalRowResize","stopDragResize","setStorageData","scrollGrid","scrollPointerLock","scrollStartMode","movementX","movementY","scrollMode","scrollStart","setTimeout","scrollRepeatRate","selectionScrollIncrement","stopScrollGrid","exitPointerLock","dragReorder","allowColumnReordering","allowRowReordering","source","reorderDeadZone","stopDragReorder","oIndex","tIndex","cr","row-reorder","column-reorder","dragMove","stopDragMove","moveSelection","freezeMove","stopFreezeMove","startFreezeMove","mousedown","lastMouseDownTarget","button","move","freeze","requestPointerLock","concat","dragging","mouseup","controlInput","focus","keydown","last","cols","keyCode","beginEditAt","scrollIntoView","selectionFollowsActiveCell","keyup","keypress","dblclick","fitColumnToValues","autosize","scrollWheel","deltaX","deltaY","deltaMode","touchHaltAnimation","scrollTo","pasteItem","clipData","mimeType","normalizeRowData","importingRow","existingRow","offsetX","isArray","map","colKey","substring","split","sel","cellData","colIndex","cName","yi","paste","clipboardData","items","dti","getAsString","cut","copy","forEachSelectedCell","colName","fCopyCell","replace","trows","sData","rt","join","setData","touchScrollTimeout","animationFrames","getTouchPos","touchIndex","rect","getBoundingClientRect","clientX","clientY","easingFunctions","linear","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easing","touchEasingMethod","calculatePPSTimed","touchSigmaTimed","calculatePPS","touchSigma","touchEndAnimation","touchReleaseAnimationDurationMs","stopAnimation","touchEditCell","touchCell","clearInterval","calculatePPSTimer","touchDeadZone","touchingCell","editCell","touchstart","disposeContextMenu","touchContextTimeout","touchStartEvent","changedTouches","zoomAltered","touchStart1","touchScrollStart","contextmenuEvent","touchContextMenuTimeMs","setInterval","startingCell","touchEndEvents","touchmove","passive","touchend","touchcancel","touchSelect","handleType","touchSelecting","bounds","getSchema","touchScroll","rScrollZone","bScrollZone","tScrollZone","lScrollZone","rw","sbw","t1","t2","touchZoomSensitivity","touchZoomMin","touchZoomMax","selectionScrollZone","dz","touchReleaseAcceleration","scrollAnimationPPSThreshold","ctor","storageName","invalidSearchExpClass","localStyleLibraryStorageKey","filters","currentFilter","sorters","schemaHashes","uId","changes","componentL1Events","eventNames","expandToRow","col","low","high","step","localStorage","setItem","stringify","tempSchema","createColumnOrders","applyDefaultValue","defaultValue","createNewRowData","getSchemaNameHash","getBestGuessDataType","columnName","drawChildGrids","gridKey","setTimer","refreshFromOrigialData","originalData","validateColumn","setDefaults","obj1","obj2","setAttributes","setStyle","dispose","removeChild","eventParent","contextmenu","disconnect","tryLoadStoredOrders","storedSettings","getHeaderByName","getDomRoot","host","getFontName","fontStyle","getFontHeight","parseFloat","parseStyleValue","initProp","propName","getStyleProperty","styleKeys","parentNodeStyle","supressDrawAndEvent","reloadStoredValues","getItem","initialized","publicStyleKeyIntf","initScrollBox","setDom","ie","navigator","userAgent","edge","webKit","moz","cursorGrab","cursorGrabing","cursorGrabbing","appendTo","clearChangeLog","gotoCell","gotoRow","findColumnScrollLeft","findRowScrollTop","findColumnMaxTextLength","isCellVisible","clipElement","getSchemaFromData","setFilter","expandTree","collapseTree","insertRow","deleteRow","addRow","insertColumn","deleteColumn","addColumn","getClippingRect","setRowHeight","setColumnWidth","resetColumnWidths","resetRowHeights","selectNone","assertPxColor","clearPxColorAssertions","integerToAlpha","DOMStyles","set","valueObject","filterFor","String","filterRegExp","regEnd","pattern","exec","flags","flagLength","invalidFilterRegEx","RegExp","toLocaleUpperCase","blur","TypeError","normalizeDataset","callback","syncFnInvoked","0","eventName","RangeError","autoResizeColumns","setScrollTop","preventScrollEvent","setScrollLeft","sHeight","sWidth","supressDrawEvent","applyContextItemStyle","contextItemContainer","createInlineStyle","createContextMenu","parentContextMenu","createItems","removeChildContext","relatedTarget","container","childMenuArrow","contains","children","setAttribute","contextAddCallback","getAttribute","cPos","childContextMenuMarginLeft","childContextMenuMarginTop","createChildContext","addContent","content","childContextMenuArrowHTML","clickIndex","Event","checkArrowVisibility","parentDOMNode","upArrow","downArrow","startHoverScroll","contextHoverScrollAmount","hoverScrollTimeout","contextHoverScrollRateMs","endHoverScroll","selectedIndex","loc","scrollOffset","zIndexTop","position","contextMenuArrowColor","zIndex","inputDropdown","maxHeight","innerHeight","autocompleteBottomMargin","minWidth","contextMenuArrowUpHTML","contextMenuArrowDownHTML","contextMenuWindowMargin","innerWidth","isFinite","createFilterContextMenuItems","checkRegExpErrorState","filterInput","background","contextFilterInputBackground","contextFilterInputColor","contextFilterInvalidRegExpBackground","contextFilterInvalidRegExpColor","fillAutoComplete","count","autoCompleteItems","maxAutoCompleteItems","disposeAutocomplete","createAutoCompleteContext","iRect","autoCompleteContext","filterContainer","filterLabel","filterAutoCompleteButton","onclick","en","filterOptionText","contextFilterButtonHTML","cf","removeFilterOptionText","addDefaultContextMenuItem","isNormalCell","isBackground","isScrollBar","showFilter","showCopy","copyText","execCommand","showPaste","clipBoardData","pasteText","showColumnSelector","columnSelectorText","toggleColumnVisibility","columnSelectorHiddenText","columnSelectorVisibleText","hideColumnText","showClearSettingsOption","clearSettingsOptionText","columnWidth","allowSorting","showOrderByOption","showOrderByOptionTextAsc","showOrderByOptionTextDesc","createDiposeEvent","contextPosition","st","sl","scrollingElement","contextMenuMarginLeft","contextMenuMarginTop","mobileContextMenuMargin","ele","boundingRect","eleRect","clipRect","parentRect","Infinity","borderWidth","getVisibleCellByIndex","mobileEditInputHeight","cellPaddingLeft","ignoreScrollOffset","abort","abortEdit","newValue","oldValue","aborted","editable","enumItems","enu","option","valueInEnum","multiLine","fontSize","editCellFontSize","nx","ny","className","css","canvas-datagrid-context-menu-filter-input","verticalAlign","marginLeft","padding","border","contextFilterInputBorder","borderRadius","contextFilterInputBorderRadius","lineHeight","fontWeight","fontFamily","contextFilterInputFontFamily","contextFilterInputFontSize","canvas-datagrid-context-menu-filter-button","contextMenuBackground","contextMenuColor","contextFilterButtonBorder","contextFilterButtonBorderRadius","contextMenuFilterButtonFontFamily","contextMenuFilterButtonFontSize","canvas-datagrid-context-child-arrow","cssFloat","childContextMenuArrowColor","contextMenuChildArrowFontSize","contextMenuFontFamily","canvas-datagrid-autocomplete","contextMenuFontSize","contextMenuBorder","contextMenuPadding","contextMenuBorderRadius","opacity","contextMenuOpacity","overflow","canvas-datagrid-autocomplete-item","canvas-datagrid-autocomplete-item:hover","contextMenuHoverBackground","contextMenuHoverColor","canvas-datagrid-canvas","canvas-datagrid","display","canvas-datagrid-control-input","canvas-datagrid-edit-mobile-input","boxSizing","outline","margin","mobileEditFontFamily","mobileEditFontSize","editCellBorder","editCellColor","editCellBackgroundColor","appearance","webkitAppearance","mozAppearance","canvas-datagrid-edit-input","editCellPaddingLeft","editCellFontFamily","boxShadow","editCellBoxShadow","canvas-datagrid-context-menu-item-mobile","contextMenuItemMargin","contextMenuItemBorderRadius","canvas-datagrid-context-menu-item","canvas-datagrid-context-menu-item:hover","canvas-datagrid-context-menu-label","contextMenuLabelMargin","contextMenuLabelDisplay","contextMenuLabelMinWidth","maxWidth","contextMenuLabelMaxWidth","canvas-datagrid-context-menu-mobile","whiteSpace","canvas-datagrid-context-menu","canvas-datagrid-invalid-search-regExp","contextMenuFilterInvalidExpresion","onblur","parentIsCanvas","tagName","getContext","textBaseline","ordA","charCodeAt","ordZ","len","fromCharCode","floor","applyFilter","isColumnSelected","colIsSelected","shift","supressEvent","addCol","ri","dragObject","rowId","childGrid","trArgs","treeGridAttributes","treeGridHeight","direction","sortFunction","dontSetStorageData","sort","offsetY","xi","cidx","isColumnVisible","isRowVisible","useTouchScrollZones","moveBorder","tsz","touchScrollZone","moveMode","borderDragBehavior","xBorderBehavior","yBorderBehavior","isVerticalScrollBar","isHorizontalScrollBar","borderResizeZone","allowColumnResize","allowColumnResizeFromCell","allowRowHeaderResize","allowRowResize","allowRowResizeFromCell","rowGrabZoneSize","maxCol","minCol"," ","rowHeaderCellFont","autosizePadding","autosizeHeaderCellPadding","rowHeaderCellPaddingRight","rowHeaderCellPaddingLeft","columnHeaderCellFont","headerCellPaddingRight","headerCellPaddingLeft","cellFont","cellPaddingRight","cellAutoResizePadding","total","headerCell","int","asc","localeCompare","date","Date","getTime"],"mappings":"CAAA,SAAAA,EAAAC,GACA,gBAAAC,UAAA,gBAAAC,QACAA,OAAAD,QAAAD,IACA,kBAAAG,gBAAAC,IACAD,UAAAH,GACA,gBAAAC,SACAA,QAAA,eAAAD,IAEAD,EAAA,eAAAC,KACCK,KAAA,WACD,MCAgB,UAAUC,GCN1B,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAP,OAGA,IAAAC,GAAAO,EAAAD,IACAE,EAAAF,EACAG,GAAA,EACAV,WAUA,OANAK,GAAAE,GAAAI,KAAAV,EAAAD,QAAAC,IAAAD,QAAAM,GAGAL,EAAAS,GAAA,EAGAT,EAAAD,QAvBA,GAAAQ,KA4DA,OAhCAF,GAAAM,EAAAP,EAGAC,EAAAO,EAAAL,EAGAF,EAAAQ,EAAA,SAAAd,EAAAe,EAAAC,GACAV,EAAAW,EAAAjB,EAAAe,IACAG,OAAAC,eAAAnB,EAAAe,GACAK,cAAA,EACAC,YAAA,EACAC,IAAAN,KAMAV,EAAAiB,EAAA,SAAAtB,GACA,GAAAe,GAAAf,KAAAuB,WACA,WAA2B,MAAAvB,GAAA,SAC3B,WAAiC,MAAAA,GAEjC,OADAK,GAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAQ,EAAAC,GAAsD,MAAAR,QAAAS,UAAAC,eAAAjB,KAAAc,EAAAC,IAGtDpB,EAAAuB,EAAA,GAGAvB,IAAAwB,EAAA,KDgBM,SAAU7B,EAAQD,EAASM,GE7EjC,GAAAyB,GAAAC,CAEAD,UA+QCE,MA/QDD,EAAA,WACA,YACA,iBAAAE,GACAA,EAAAC,UACAC,aACA,6BACA,yBACA,iCACA,yBACA,4BACA,4BACA,4BACA,0BACA,sBACA,8BACA,oBACA,yBACA,8BACA,wBACA,mDACA,qCACA,kDACA,4CACA,kCACA,+BACA,+BACA,oBACA,aACA,gBACA,iCACA,mCACA,uBACA,6BACA,6BACA,iBACA,YACA,wBACA,sBACA,+BACA,iDACA,sBACA,wBACA,sBACA,sBACA,oCACA,yBACA,wBACA,kCACA,mCACA,yBACA,gCACA,2BACA,+BACA,yBACA,0BACA,gBACA,kBACA,kBACA,yBACA,qDACA,uDACA,iBACA,uBACA,sBACA,sBACA,iBACA,+BACA,oBACA,oCACA,iCACA,wCACA,uBACA,6BACA,8BACA,oBACA,sBACA,YACA,4BAEAC,SACA,uDACA,mDACA,4BACA,uCACA,qCACA,4DACA,4CACA,yDACA,mCACA,8BACA,4BACA,6BACA,2BACA,+DACA,+CACA,mEACA,mDACA,gEACA,gDACA,gCACA,gCACA,sBACA,6BACA,iDACA,6CACA,sBACA,iCACA,+BACA,uBACA,kBACA,gCACA,mCACA,sDACA,sCACA,wBACA,sBACA,uBACA,qBACA,yDACA,yCACA,mCACA,kBACA,+BACA,qDACA,yCACA,mCACA,iCACA,6DACA,yDACA,kCACA,gDACA,2CACA,8BACA,+CACA,kEACA,kDACA,oCACA,kCACA,mCACA,iCACA,+CACA,iEACA,0CACA,2DACA,qCACA,yCACA,0CACA,wCACA,qCACA,iEACA,0CACA,uCACA,uDACA,gEACA,uCACA,4CACA,8CACA,sCACA,8DACA,6DACA,gDACA,wCACA,sCACA,mDACA,yDACA,kCACA,yCACA,2CACA,mDACA,2CACA,+DACA,uCACA,+BACA,wDACA,iDACA,sCACA,gCACA,2CACA,uCACA,qCACA,oCACA,4BACA,4BACA,8BACA,6BACA,gCACA,uDACA,mDACA,oCACA,sDACA,kDACA,0BACA,oCACA,4BACA,0BACA,oDACA,0DACA,qDACA,2DACA,+CACA,qDACA,8BACA,wBACA,iDACA,kCACA,6CACA,sBACA,sBACA,oBACA,+BACA,6BACA,sCACA,8BACA,6BACA,mDACA,sCACA,mBACA,sDACA,kDACA,kCACA,0DACA,uCACA,0DACA,sDACA,+BACA,6CACA,wCACA,2BACA,4CACA,+DACA,+CACA,iCACA,+BACA,gCACA,8BACA,kEACA,qDACA,4CACA,0BACA,kDACA,sDACA,kDACA,4BACA,mCACA,+CACA,yBACA,2BACA,wBACA,4DACA,wDACA,sBACA,wDACA,mCACA,iDACA,0BACA,iCACA,wDACA,kCACA,kDACA,2BA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","file":"canvas-datagrid.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"canvasDatagrid\"] = factory();\n\telse\n\t\troot[\"canvasDatagrid\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"canvasDatagrid\"] = factory();\n\telse\n\t\troot[\"canvasDatagrid\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 1);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        self.defaults = {\n            attributes: [\n                ['allowColumnReordering', true],\n                ['allowColumnResize', true],\n                ['allowColumnResizeFromCell', false],\n                ['allowFreezingRows', false],\n                ['allowFreezingColumns', false],\n                ['allowMovingSelection', true],\n                ['allowRowHeaderResize', true],\n                ['allowRowReordering', false],\n                ['allowRowResize', true],\n                ['allowRowResizeFromCell', false],\n                ['allowSorting', true],\n                ['autoResizeColumns', false],\n                ['borderDragBehavior', 'none'],\n                ['borderResizeZone', 10],\n                ['clearSettingsOptionText', 'Clear saved settings'],\n                ['columnHeaderClickBehavior', 'sort'],\n                ['columnSelectorHiddenText', '&nbsp;&nbsp;&nbsp;'],\n                ['columnSelectorText', 'Add/Remove columns'],\n                ['columnSelectorVisibleText', '\\u2713'],\n                ['contextHoverScrollAmount', 2],\n                ['contextHoverScrollRateMs', 5],\n                ['copyText', 'Copy'],\n                ['debug', false],\n                ['editable', true],\n                ['filterOptionText', 'Filter %s'],\n                ['filterTextPrefix', '(filtered) '],\n                ['globalRowResize', false],\n                ['hideColumnText', 'Hide %s'],\n                ['maxAutoCompleteItems', 200],\n                ['multiLine', false],\n                ['name', ''],\n                ['pageUpDownOverlap', 1],\n                ['pasteText', 'Paste'],\n                ['persistantSelectionMode', false],\n                ['removeFilterOptionText', 'Remove filter on %s'],\n                ['reorderDeadZone', 3],\n                ['resizeScrollZone', 20],\n                ['rowGrabZoneSize', 5],\n                ['saveAppearance', true],\n                ['scrollAnimationPPSThreshold', 0.75],\n                ['scrollPointerLock', false],\n                ['scrollRepeatRate', 75],\n                ['selectionFollowsActiveCell', false],\n                ['selectionHandleBehavior', 'none'],\n                ['selectionMode', 'cell'],\n                ['selectionScrollIncrement', 20],\n                ['selectionScrollZone', 20],\n                ['showClearSettingsOption', true],\n                ['showColumnHeaders', true],\n                ['showColumnSelector', true],\n                ['showCopy', true],\n                ['showFilter', true],\n                ['showNewRow', false],\n                ['showOrderByOption', true],\n                ['showOrderByOptionTextAsc', 'Order by %s ascending'],\n                ['showOrderByOptionTextDesc', 'Order by %s descending'],\n                ['showPaste', false],\n                ['showPerformance', false],\n                ['showRowHeaders', true],\n                ['showRowNumbers', true],\n                ['snapToRow', false],\n                ['touchContextMenuTimeMs', 800],\n                ['touchDeadZone', 3],\n                ['touchEasingMethod', 'easeOutQuad'],\n                ['touchReleaseAcceleration', 1000],\n                ['touchReleaseAnimationDurationMs', 2000],\n                ['touchScrollZone', 20],\n                ['touchSelectHandleZone', 20],\n                ['touchZoomSensitivity', 0.005],\n                ['touchZoomMin', 0.5],\n                ['touchZoomMax', 1.75],\n                ['tree', false],\n                ['treeHorizontalScroll', false]\n            ],\n            styles: [\n                ['activeCellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['activeCellBorderWidth', 1],\n                ['activeCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellFont', '16px sans-serif'],\n                ['activeCellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['activeCellOverlayBorderWidth', 1],\n                ['activeCellPaddingBottom', 5],\n                ['activeCellPaddingLeft', 5],\n                ['activeCellPaddingRight', 7],\n                ['activeCellPaddingTop', 5],\n                ['activeCellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['activeCellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['activeColumnHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeColumnHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeRowHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeRowHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['autocompleteBottomMargin', 60],\n                ['autosizeHeaderCellPadding', 8],\n                ['autosizePadding', 5],\n                ['cellAutoResizePadding', 13],\n                ['cellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['cellBorderWidth', 1],\n                ['cellColor', 'rgba(0, 0, 0, 1)'],\n                ['cellFont', '16px sans-serif'],\n                ['cellGridHeight', 250],\n                ['cellHeight', 24],\n                ['cellHeightWithChildGrid', 150],\n                ['cellHorizontalAlignment', 'left'],\n                ['cellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['cellPaddingBottom', 5],\n                ['cellPaddingLeft', 5],\n                ['cellPaddingRight', 7],\n                ['cellPaddingTop', 5],\n                ['cellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['cellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['cellVerticalAlignment', 'center'],\n                ['cellWidth', 250],\n                ['cellWidthWithChildGrid', 250],\n                ['childContextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['childContextMenuArrowHTML', '&#x25BA;'],\n                ['childContextMenuMarginLeft', -11],\n                ['childContextMenuMarginTop', -6],\n                ['columnHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellBorderColor', 'rgba(172, 172, 172, 1)'],\n                ['columnHeaderCellBorderWidth', 1],\n                ['columnHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['columnHeaderCellFont', '16px sans-serif'],\n                ['columnHeaderCellHeight', 25],\n                ['columnHeaderCellHorizontalAlignment', 'left'],\n                ['columnHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['columnHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['columnHeaderCellPaddingBottom', 5],\n                ['columnHeaderCellPaddingLeft', 5],\n                ['columnHeaderCellPaddingRight', 7],\n                ['columnHeaderCellPaddingTop', 5],\n                ['columnHeaderCellVerticalAlignment', 'center'],\n                ['columnHeaderOrderByArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['columnHeaderOrderByArrowBorderWidth', 1],\n                ['columnHeaderOrderByArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['columnHeaderOrderByArrowHeight', 8],\n                ['columnHeaderOrderByArrowMarginLeft', 0],\n                ['columnHeaderOrderByArrowMarginRight', 5],\n                ['columnHeaderOrderByArrowMarginTop', 6],\n                ['columnHeaderOrderByArrowWidth', 13],\n                ['contextFilterButtonBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterButtonBorderRadius', '3px'],\n                ['contextFilterButtonHTML', '&#x25BC;'],\n                ['contextFilterInputBackground', 'rgba(255,255,255,1)'],\n                ['contextFilterInputBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterInputBorderRadius', '0'],\n                ['contextFilterInputColor', 'rgba(0,0,0,1)'],\n                ['contextFilterInputFontFamily', 'sans-serif'],\n                ['contextFilterInputFontSize', '14px'],\n                ['contextFilterInvalidRegExpBackground', 'rgba(180, 6, 1, 1)'],\n                ['contextFilterInvalidRegExpColor', 'rgba(255, 255, 255, 1)'],\n                ['contextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuArrowDownHTML', '&#x25BC;'],\n                ['contextMenuArrowUpHTML', '&#x25B2;'],\n                ['contextMenuBackground', 'rgba(240, 240, 240, 1)'],\n                ['contextMenuBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextMenuBorderRadius', '3px'],\n                ['contextMenuChildArrowFontSize', '12px'],\n                ['contextMenuColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuFilterButtonFontFamily', 'sans-serif'],\n                ['contextMenuFilterButtonFontSize', '10px'],\n                ['contextMenuFilterInvalidExpresion', 'rgba(237, 155, 156, 1)'],\n                ['contextMenuFontFamily', 'sans-serif'],\n                ['contextMenuFontSize', '16px'],\n                ['contextMenuHoverBackground', 'rgba(182, 205, 250, 1)'],\n                ['contextMenuHoverColor', 'rgba(43, 48, 153, 1)'],\n                ['contextMenuItemBorderRadius', '3px'],\n                ['contextMenuItemMargin', '2px'],\n                ['contextMenuLabelDisplay', 'inline-block'],\n                ['contextMenuLabelMargin', '0 3px 0 0'],\n                ['contextMenuLabelMaxWidth', '700px'],\n                ['contextMenuLabelMinWidth', '75px'],\n                ['contextMenuMarginLeft', 3],\n                ['contextMenuMarginTop', -3],\n                ['contextMenuOpacity', '0.98'],\n                ['contextMenuPadding', '2px'],\n                ['contextMenuWindowMargin', 100],\n                ['cornerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cornerCellBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['editCellBackgroundColor', 'white'],\n                ['editCellBorder', 'solid 1px rgba(110, 168, 255, 1)'],\n                ['editCellBoxShadow', '0 2px 5px rgba(0,0,0,0.4)'],\n                ['editCellColor', 'black'],\n                ['editCellFontFamily', 'sans-serif'],\n                ['editCellFontSize', '16px'],\n                ['editCellPaddingLeft', 4],\n                ['frozenMarkerHoverColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerHoverBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerActiveColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerActiveBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerColor', 'rgba(222, 222, 222, 1)'],\n                ['frozenMarkerBorderColor', 'rgba(168, 168, 168, 1)'],\n                ['frozenMarkerBorderWidth', 1],\n                ['frozenMarkerWidth', 2],\n                ['gridBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['gridBorderCollapse', 'collapse'],\n                ['gridBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['gridBorderWidth', 1],\n                ['minColumnWidth', 45],\n                ['minRowHeight', 24],\n                ['mobileContextMenuMargin', 10],\n                ['mobileEditInputHeight', 30],\n                ['mobileEditFontFamily', 'sans-serif'],\n                ['mobileEditFontSize', '16px'],\n                ['moveOverlayBorderWidth', 1],\n                ['moveOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['moveOverlayBorderSegments', '12, 7'],\n                ['name', 'default'],\n                ['reorderMarkerBackgroundColor', 'rgba(0, 0, 0, 0.1)'],\n                ['reorderMarkerBorderColor', 'rgba(0, 0, 0, 0.2)'],\n                ['reorderMarkerBorderWidth', 1.25],\n                ['reorderMarkerIndexBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['reorderMarkerIndexBorderWidth', 2.75],\n                ['rowHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['rowHeaderCellBorderColor', 'rgba(200, 200, 200, 1)'],\n                ['rowHeaderCellBorderWidth', 1],\n                ['rowHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellFont', '16px sans-serif'],\n                ['rowHeaderCellHeight', 25],\n                ['rowHeaderCellHorizontalAlignment', 'left'],\n                ['rowHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['rowHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['rowHeaderCellPaddingBottom', 5],\n                ['rowHeaderCellPaddingLeft', 5],\n                ['rowHeaderCellPaddingRight', 5],\n                ['rowHeaderCellPaddingTop', 5],\n                ['rowHeaderCellSelectedBackgroundColor', 'rgba(217, 217, 217, 1)'],\n                ['rowHeaderCellSelectedColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellVerticalAlignment', 'center'],\n                ['rowHeaderCellWidth', 57],\n                ['scrollBarActiveColor', 'rgba(125, 125, 125, 1)'],\n                ['scrollBarBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarBorderWidth', 0.5],\n                ['scrollBarBoxBorderRadius', 4.125],\n                ['scrollBarBoxColor', 'rgba(192, 192, 192, 1)'],\n                ['scrollBarBoxMargin', 2],\n                ['scrollBarBoxMinSize', 15],\n                ['scrollBarBoxWidth', 8],\n                ['scrollBarCornerBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarCornerBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarWidth', 11],\n                ['selectionHandleBorderColor', 'rgba(255, 255, 255, 1)'],\n                ['selectionHandleBorderWidth', 1.5],\n                ['selectionHandleColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionHandleSize', 8],\n                ['selectionHandleType', 'square'],\n                ['selectionOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionOverlayBorderWidth', 1],\n                ['treeArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['treeArrowBorderWidth', 1],\n                ['treeArrowClickRadius', 5],\n                ['treeArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['treeArrowHeight', 8],\n                ['treeArrowMarginLeft', 0],\n                ['treeArrowMarginRight', 5],\n                ['treeArrowMarginTop', 6],\n                ['treeArrowWidth', 13],\n                ['treeGridHeight', 250]\n            ]\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, evil: true*/\n/*globals Reflect: false, HTMLElement: true, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n    __webpack_require__(2),\n    __webpack_require__(0),\n    __webpack_require__(3),\n    __webpack_require__(4),\n    __webpack_require__(5),\n    __webpack_require__(6),\n    __webpack_require__(7),\n    __webpack_require__(8),\n    __webpack_require__(9)\n], __WEBPACK_AMD_DEFINE_RESULT__ = function context(component) {\n    'use strict';\n    component = component();\n    var modules = Array.prototype.slice.call(arguments);\n    function Grid(args) {\n        debugger;\n        args = args || {};\n        var self = {};\n        self.isComponent = args.component === undefined;\n        self.intf = self.isComponent ? eval('Reflect.construct(HTMLElement, [], new.target)')\n            : document.createElement('section');\n        self.args = args;\n        self.createGrid = function grid(args) {\n            args.component = false;\n            return new Grid(args);\n        };\n        modules.forEach(function (module) {\n            module(self);\n        });\n        if (self.intf.createShadowRoot) {\n            self.shadowRoot = self.intf.attachShadow({mode: self.args.debug ? 'open' : 'closed'});\n            self.parentNode = self.shadowRoot;\n        } else {\n            self.parentNode = self.intf;\n        }\n        self.init();\n        return self.intf;\n    }\n    if (window.HTMLElement) {\n        Grid.prototype = Object.create(window.HTMLElement.prototype);\n    }\n    // export web component\n    if (window.customElements) {\n        Grid.observedAttributes = component.getObservableAttributes();\n        Grid.prototype.disconnectedCallback = component.disconnectedCallback;\n        Grid.prototype.attributeChangedCallback = component.attributeChangedCallback;\n        Grid.prototype.connectedCallback = component.connectedCallback;\n        Grid.prototype.adoptedCallback = component.adoptedCallback;\n        window.customElements.define('canvas-datagrid', Grid);\n    }\n    // export global\n    if (window && !window.canvasDatagrid && !window.require) {\n        window.canvasDatagrid = function (args) { return new Grid(args); };\n    }\n    // export amd loader\n    module.exports = function grid(args) {\n        args = args || {};\n        var i, tKeys = ['style', 'schema', 'data', 'formatters',\n                    'sorters', 'filters'];\n        if (window.customElements && document.body.createShadowRoot) {\n            i = document.createElement('canvas-datagrid');\n            // create \"block\" element effect\n            i.style.width = '100%';\n            i.style.height = '100%';\n            Object.keys(args).forEach(function (argKey) {\n                if (argKey === 'parentNode') {\n                    args.parentNode.appendChild(i);\n                    return;\n                }\n                // top level keys in args\n                if (tKeys.indexOf(argKey) !== -1) {\n                    tKeys.forEach(function (tKey) {\n                        if (args[tKey] === undefined || tKey !== argKey) { return; }\n                        if (['formatters', 'sorters', 'filters'].indexOf(argKey) !== -1) {\n                            if (typeof args[tKey] === 'object' && args[tKey] !== null) {\n                                Object.keys(args[tKey]).forEach(function (sKey) {\n                                    i[tKey][sKey] = args[tKey][sKey];\n                                });\n                            }\n                        } else {\n                            i[tKey] = args[tKey];\n                        }\n                    });\n                    return;\n                }\n                // all others are attribute level keys\n                i.attributes[argKey] = args[argKey];\n            });\n            return i;\n        }\n        args.component = false;\n        i = new Grid(args);\n        if (args.parentNode && args.parentNode.appendChild) {\n            args.parentNode.appendChild(i);\n        }\n        // create \"block\" element effect\n        i.style.width = '100%';\n        i.style.height = '100%';\n        return i;\n    };\n    return module.exports;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_RESULT__ = function (defaults) {\n    'use strict';\n    return function () {\n        var typeMap, component = {};\n        function hyphenateProperty(prop, cust) {\n            var p = '';\n            Array.prototype.forEach.call(prop, function (char) {\n                if (char === char.toUpperCase()) {\n                    p += '-' + char.toLowerCase();\n                    return;\n                }\n                p += char;\n            });\n            return (cust ? '--cdg-' : '') + p;\n        }\n        function getDefaultItem(base, item) {\n            var i = {},\n                r;\n            defaults(i);\n            r = i.defaults[base].filter(function (i) {\n                return i[0].toLowerCase() === item.toLowerCase()\n                    || hyphenateProperty(i[0]) === item.toLowerCase()\n                    || hyphenateProperty(i[0], true) === item.toLowerCase();\n            })[0];\n            return r;\n        }\n        function applyComponentStyle(supressChangeAndDrawEvents, intf) {\n            var cStyle = window.getComputedStyle(intf, null),\n                defs = {};\n            intf.computedStyle = cStyle;\n            defaults(defs);\n            defs = defs.defaults.styles;\n            defs.forEach(function (def) {\n                var val = cStyle.getPropertyValue(hyphenateProperty(def[0], true));\n                if (val === \"\") {\n                    val = cStyle.getPropertyValue(hyphenateProperty(def[0], false));\n                }\n                if (val !== \"\") {\n                    intf.setStyleProperty(def[0], typeMap[typeof def[1]](val, def[1]));\n                }\n            });\n            requestAnimationFrame(function () { intf.resize(true); });\n            if (!supressChangeAndDrawEvents && intf.dispatchEvent) {\n                intf.dispatchEvent('stylechanged', intf.style);\n            }\n        }\n        typeMap = {\n            data: function (strData) {\n                try {\n                    return JSON.parse(strData);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid data.');\n                }\n            },\n            schema: function (strSchema) {\n                try {\n                    return JSON.parse(strSchema);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid schema attribute.');\n                }\n            },\n            number: function (strNum, def) {\n                var n = parseInt(strNum, 10);\n                return isNaN(n) ? def : n;\n            },\n            boolean: function (strBool) {\n                return (/true/i).test(strBool);\n            },\n            string: function (str) {\n                return str;\n            }\n        };\n        component.getObservableAttributes = function () {\n            var i = {}, attrs = ['data', 'schema', 'style', 'className', 'name'];\n            defaults(i);\n            i.defaults.attributes.forEach(function (attr) {\n                attrs.push(attr[0].toLowerCase());\n            });\n            return attrs;\n        };\n        component.disconnectedCallback = function () {\n            this.connected = false;\n        };\n        component.connectedCallback = function () {\n            var intf = this;\n            intf.connected = true;\n            component.observe(intf);\n            applyComponentStyle(true, intf);\n            intf.resize(true);\n        };\n        component.adoptedCallback = function () {\n            this.resize();\n        };\n        component.attributeChangedCallback = function (attrName, oldVal, newVal) {\n            var tfn, intf = this, def;\n            if (attrName === 'style') {\n                requestAnimationFrame(function () { applyComponentStyle(false, intf); });\n                return;\n            }\n            if (attrName === 'data') {\n                intf.args.data = typeMap.data(newVal);\n                return;\n            }\n            if (attrName === 'schema') {\n                intf.args.schema = typeMap.schema(newVal);\n                return;\n            }\n            if (attrName === 'name') {\n                intf.name = newVal;\n                return;\n            }\n            if (attrName === 'class' || attrName === 'className') {\n                return;\n            }\n            def = getDefaultItem('attributes', attrName);\n            if (def) {\n                tfn = typeMap[typeof def[1]];\n                intf.attributes[def[0]] = tfn(newVal);\n                return;\n            }\n            if (/^on/.test(attrName)) {\n                intf.addEventListener('on' + attrName, function (e) {\n                    eval(newVal);\n                });\n            }\n            return;\n        };\n        component.observe = function (intf) {\n            var observer;\n            if (!window.MutationObserver) { return; }\n            intf.applyComponentStyle = function () { applyComponentStyle(false, intf); intf.resize(); };\n            /**\n             * Applies the computed css styles to the grid.  In some browsers, changing directives in attached style sheets does not automatically update the styles in this component.  It is necessary to call this method to update in these cases.\n             * @memberof canvasDatagrid\n             * @name applyComponentStyle\n             * @method\n             */\n            observer = new window.MutationObserver(function (mutations) {\n                var checkInnerHTML, checkStyle;\n                Array.prototype.forEach.call(mutations, function (mutation) {\n                    if (mutation.attributeName === 'class'\n                            || mutation.attributeName === 'style') {\n                        intf.applyComponentStyle(false, intf);\n                        return;\n                    }\n                    if (mutation.target.parentNode\n                            && mutation.target.parentNode.nodeName === 'STYLE') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.addedNodes.length > 0 || mutation.type === 'characterData') {\n                        checkInnerHTML = true;\n                    }\n                });\n                if (checkStyle) {\n                    intf.applyComponentStyle(false, intf);\n                }\n                if (checkInnerHTML) {\n                    intf.data = typeMap.data(intf.innerHTML);\n                }\n            });\n            observer.observe(intf, { characterData: true, childList: true, attributes: true, subtree: true });\n            observer.observe(intf.canvas, { attributes: true });\n            Array.prototype.forEach.call(document.querySelectorAll('style'), function (el) {\n                observer.observe(el, { characterData: true, childList: true, attributes: true, subtree: true });\n            });\n        };\n        return component;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals XMLSerializer: false, define: true, Blob: false, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var perfCounters = [],\n            drawCount = 0,\n            perfWindowSize = 300,\n            entityCount = [],\n            scrollDebugCounters = [],\n            touchPPSCounters = [];\n        self.htmlImageCache = {};\n        function drawPerfLine(w, h, x, y, perfArr, arrIndex, max, color, useAbs) {\n            var i = w / perfArr.length,\n                r = h / max;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x, y + h);\n            perfArr.forEach(function (n) {\n                var val = (arrIndex === undefined ? n : n[arrIndex]),\n                    cx,\n                    cy;\n                if (useAbs) {\n                    val = Math.abs(val);\n                }\n                cx = x + i;\n                cy = y + h - (val * r);\n                self.ctx.lineTo(cx, cy);\n                x += i;\n            });\n            self.ctx.moveTo(x + w, y + h);\n            self.ctx.strokeStyle = color;\n            self.ctx.stroke();\n        }\n        function drawOnAllImagesLoaded() {\n            var loaded = true;\n            Object.keys(self.htmlImageCache).forEach(function (html) {\n                if (!self.htmlImageCache[html].complete) {\n                    loaded = false;\n                }\n            });\n            if (loaded) {\n                self.draw();\n            }\n        }\n        function drawHtml(cell) {\n            var img,\n                v = cell.innerHTML || cell.formattedValue,\n                x = cell.x + self.canvasOffsetLeft,\n                y = cell.y + self.canvasOffsetTop;\n            if (self.htmlImageCache[v]) {\n                img = self.htmlImageCache[v];\n                if (img.height !== cell.height || img.width !== cell.width) {\n                    // height and width of the cell has changed, invalidate cache\n                    self.htmlImageCache[v] = undefined;\n                } else {\n                    if (!img.complete) {\n                        return;\n                    }\n                    return self.ctx.drawImage(img, x, y);\n                }\n            }\n            img = new Image(cell.width, cell.height);\n            self.htmlImageCache[v] = img;\n            img.onload = function () {\n                self.ctx.drawImage(img, x, y);\n                drawOnAllImagesLoaded();\n            };\n            img.src = 'data:image/svg+xml;base64,' + btoa(\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + cell.width + '\" height=\"' + cell.height + '\">\\n' +\n                    '<foreignObject class=\"node\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\\n' +\n                    '<body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;padding:0;\">\\n' +\n                    v + '\\n' +\n                    '</body>' +\n                    '</foreignObject>\\n' +\n                    '</svg>\\n'\n            );\n        }\n        function drawOrderByArrow(x, y) {\n            var mt = self.style.columnHeaderOrderByArrowMarginTop * self.scale,\n                ml = self.style.columnHeaderOrderByArrowMarginLeft * self.scale,\n                mr = self.style.columnHeaderOrderByArrowMarginRight * self.scale,\n                aw = self.style.columnHeaderOrderByArrowWidth * self.scale,\n                ah = self.style.columnHeaderOrderByArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.columnHeaderOrderByArrowColor;\n            self.ctx.strokeStyle = self.style.columnHeaderOrderByArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.orderDirection === 'asc') {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y + ah);\n                self.ctx.lineTo(x + aw, y + ah);\n                self.ctx.lineTo(x + (aw * 0.5), y);\n                self.ctx.lineTo(x, y + ah);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function drawTreeArrow(cell, x, y) {\n            var mt = self.style.treeArrowMarginTop * self.scale,\n                mr = self.style.treeArrowMarginRight * self.scale,\n                ml = self.style.treeArrowMarginLeft * self.scale,\n                aw = self.style.treeArrowWidth * self.scale,\n                ah = self.style.treeArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.treeArrowColor;\n            self.ctx.strokeStyle = self.style.treeArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.openChildren[cell.data[self.uniqueId]]) {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y);\n                self.ctx.lineTo(x + ah, y + (aw * 0.5));\n                self.ctx.lineTo(x, y + aw);\n                self.ctx.lineTo(x, y);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function radiusRect(x, y, w, h, radius) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            var r = x + w, b = y + h;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x + radius, y);\n            self.ctx.lineTo(r - radius, y);\n            self.ctx.quadraticCurveTo(r, y, r, y + radius);\n            self.ctx.lineTo(r, y + h - radius);\n            self.ctx.quadraticCurveTo(r, b, r - radius, b);\n            self.ctx.lineTo(x + radius, b);\n            self.ctx.quadraticCurveTo(x, b, x, b - radius);\n            self.ctx.lineTo(x, y + radius);\n            self.ctx.quadraticCurveTo(x, y, x + radius, y);\n        }\n        function fillRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillRect(x, y, w, h);\n        }\n        function strokeRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.strokeRect(x, y, w, h);\n        }\n        function fillText(text, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillText(text, x, y);\n        }\n        function fillCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.fill();\n        }\n        function strokeCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.stroke();\n        }\n        function clipFrozenArea(mode) {\n            // 0 both, 1 rows, 2 cols\n            // self.lastFrozenColumnPixel;\n            // self.lastFrozenRowPixel;\n            self.ctx.beginPath();\n            if (mode === 0) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, self.lastFrozenRowPixel);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 1) {\n                self.ctx.moveTo(0, self.lastFrozenRowPixel);\n                self.ctx.lineTo(0, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 2) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, 0);\n                self.ctx.lineTo(self.width, 0);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n            }\n            self.ctx.clip();\n        }\n        function fillHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return fillCircle(x, y, r * 0.5);\n            }\n            fillRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function strokeHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return strokeCircle(x, y, r * 0.5);\n            }\n            strokeRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function addselectionHandle(c, pos) {\n            var hw = self.style.selectionHandleSize,\n                p = {\n                    tr: function () {\n                        fillHandle(c.x + c.width, c.y, hw);\n                        strokeHandle(c.x + c.width, c.y, hw);\n                    },\n                    br: function () {\n                        fillHandle(c.x + c.width, c.y + c.height, hw);\n                        strokeHandle(c.x + c.width, c.y + c.height, hw);\n                    },\n                    tl: function () {\n                        fillHandle(c.x, c.y, hw);\n                        strokeHandle(c.x, c.y, hw);\n                    },\n                    bl: function () {\n                        fillHandle(c.x, c.y + c.height, hw);\n                        strokeHandle(c.x, c.y + c.height, hw);\n                    }\n                };\n            p[pos]();\n        }\n        function addBorderLine(c, pos) {\n            self.ctx.beginPath();\n            var p = {\n                t: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                },\n                r: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                b: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                l: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                }\n            };\n            p[pos]();\n            self.ctx.stroke();\n        }\n        function addEllipsis(text, width) {\n            var c, w = 0;\n            if (self.ellipsisCache[text] && self.ellipsisCache[text][width]) {\n                return self.ellipsisCache[text][width];\n            }\n            //TODO Add ellipsis back when there is a fast way to do it\n            w = self.ctx.measureText(text).width;\n            self.ellipsisCache[text] = self.ellipsisCache[text] || {};\n            c = {value: text, width: w};\n            self.ellipsisCache[text][width] = c;\n            return c;\n        }\n        function drawText(cell) {\n            var paddingLeft = self.style[cell.style + 'PaddingLeft'] * self.scale,\n                paddingTop = self.style[cell.style + 'PaddingTop'] * self.scale,\n                paddingRight = self.style[cell.style + 'PaddingRight'] * self.scale,\n                paddingBottom = self.style[cell.style + 'PaddingBottom'] * self.scale,\n                vPos = paddingTop + cell.height - (cell.height * 0.5),\n                hPos = paddingLeft + cell.treeArrowWidth + cell.orderByArrowWidth;\n            cell.text = addEllipsis(cell.formattedValue, cell.width - paddingRight - paddingLeft);\n            cell.text.height = cell.fontHeight;\n            if (cell.horizontalAlignment === 'right') {\n                hPos = cell.width - cell.text.width - paddingRight;\n            } else if (cell.horizontalAlignment === 'center') {\n                hPos = (cell.width / 2) - (cell.text.width / 2);\n            }\n            if (cell.verticalAlignment === 'top') {\n                vPos = paddingTop + cell.text.height;\n            } else if (cell.verticalAlignment === 'bottom') {\n                vPos = cell.height - paddingBottom - cell.text.height;\n            }\n            cell.text.x = cell.x + hPos;\n            cell.text.y = cell.y + vPos;\n            fillText(cell.text.value, cell.text.x, cell.text.y);\n        }\n        function getFrozenColumnsWidth() {\n            var w = 0,\n                s = self.getVisibleSchema(),\n                x = 0,\n                n = Math.min(self.frozenColumn, s.length),\n                column;\n            while (x < n) {\n                column = s[self.orders.columns[x]];\n                w += ((self.sizes.columns[column[self.uniqueId]] || column.width || self.style.cellWidth) * self.scale);\n                x += 1;\n            }\n            return w;\n        }\n        /**\n         * Redraws the grid. No matter what the change, this is the only method required to refresh everything.\n         * @memberof canvasDatagrid\n         * @name draw\n         * @method\n         */\n         // r = literal row index\n         // rd = row data array\n         // i = user order index\n         // o = literal data index\n         // y = y drawing cursor\n         // x = x drawing cursor\n         // s = visible schema array\n         // cx = current x drawing cursor sub calculation var\n         // cy = current y drawing cursor sub calculation var\n         // a = static cell (like corner cell)\n         // p = perf counter\n         // l = data length\n         // u = current cell\n         // h = current height\n         // w = current width\n        self.draw = function (internal) {\n            if (self.dispatchEvent('beforedraw', {})) { return; }\n            if (!self.isChildGrid && (!self.height || !self.width)) {\n                return;\n            }\n            if (self.isChildGrid && internal) {\n                requestAnimationFrame(self.parentGrid.draw);\n                return;\n            }\n            if (self.intf.visible === false) {\n                return;\n            }\n            // initial values\n            var checkScrollHeight, rowHeaderCell, p, cx, cy, treeGrid, rowOpen,\n                rowHeight, cornerCell, y, x, c, h, w, s, r, rd, aCell,\n                bc = self.style.gridBorderCollapse === 'collapse',\n                selectionBorders = [],\n                moveBorders = [],\n                selectionHandles = [],\n                rowHeaders = [],\n                frozenColumnWidths = getFrozenColumnsWidth(),\n                l = self.data.length,\n                u = self.currentCell || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                cellHeight = self.style.cellHeight;\n            drawCount += 1;\n            p = performance.now();\n            self.visibleRowHeights = [];\n            // if data length has changed, there is no way to know\n            if (self.data.length > self.orders.rows.length) {\n                self.createRowOrders();\n            }\n            function drawScrollBars() {\n                var v = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-bar'\n                    },\n                    n = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-bar'\n                    },\n                    vb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-box'\n                    },\n                    nb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-box'\n                    },\n                    co = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        isCorner: true,\n                        isScrollBoxCorner: true,\n                        style: 'scroll-box-corner'\n                    },\n                    m = (self.style.scrollBarBoxMargin * 2),\n                    d = self.style.scrollBarBoxMargin * 0.5;\n                self.ctx.strokeStyle = self.style.scrollBarBorderColor;\n                self.ctx.lineWidth = self.style.scrollBarBorderWidth;\n                // vertical\n                v.x += w - self.style.scrollBarWidth - self.style.scrollBarBorderWidth - d;\n                v.y += columnHeaderCellHeight;\n                v.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                v.height = h - columnHeaderCellHeight - self.style.scrollBarWidth - d - m;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(v.x, v.y, v.width, v.height + m);\n                strokeRect(v.x, v.y, v.width, v.height + m);\n                // vertical box\n                vb.x = v.x + self.style.scrollBarBoxMargin;\n                vb.y = columnHeaderCellHeight + self.style.scrollBarBoxMargin\n                    + ((v.height - self.scrollBox.scrollBoxHeight)\n                        * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight));\n                vb.width = self.style.scrollBarBoxWidth;\n                vb.height = self.scrollBox.scrollBoxHeight;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/vertical/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (vb.height < v.height) {\n                    radiusRect(vb.x, vb.y, vb.width, vb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                // horizontal\n                n.x += rowHeaderCellWidth;\n                n.y += h - self.style.scrollBarWidth - d;\n                n.width = w - self.style.scrollBarWidth - rowHeaderCellWidth - d - m;\n                n.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(n.x, n.y, n.width + m, n.height);\n                strokeRect(n.x, n.y, n.width + m, n.height);\n                // horizontal box\n                nb.y = n.y + self.style.scrollBarBoxMargin;\n                nb.x = rowHeaderCellWidth + self.style.scrollBarBoxMargin\n                    + ((n.width - self.scrollBox.scrollBoxWidth)\n                        * (self.scrollBox.scrollLeft / self.scrollBox.scrollWidth));\n                nb.width = self.scrollBox.scrollBoxWidth;\n                nb.height = self.style.scrollBarBoxWidth;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/horizontal/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (nb.width < n.width) {\n                    radiusRect(nb.x, nb.y, nb.width, nb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                //corner\n                self.ctx.strokeStyle = self.style.scrollBarCornerBorderColor;\n                self.ctx.fillStyle = self.style.scrollBarCornerBackgroundColor;\n                co.x = n.x + n.width + m;\n                co.y = v.y + v.height + m;\n                co.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                co.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                radiusRect(co.x, co.y, co.width, co.height, 0);\n                self.ctx.stroke();\n                self.ctx.fill();\n                self.visibleCells.unshift(v);\n                self.visibleCells.unshift(vb);\n                self.visibleCells.unshift(n);\n                self.visibleCells.unshift(nb);\n                self.visibleCells.unshift(co);\n                self.scrollBox.bar = {\n                    v: v,\n                    h: n\n                };\n                self.scrollBox.box = {\n                    v: vb,\n                    h: nb\n                };\n            }\n            function createHandlesOverlayArray(cell) {\n                if (self.attributes.allowMovingSelection || self.mobile) {\n                    if (cell.selectionBorderTop && cell.selectionBorderRight && self.mobile) {\n                        selectionHandles.push([cell, 'tr']);\n                        cell.selectionHandle = 'tr';\n                    }\n                    if (cell.selectionBorderTop && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'tl']);\n                        cell.selectionHandle = 'tl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'bl']);\n                        cell.selectionHandle = 'bl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderRight\n                            && (self.attributes.selectionHandleBehavior !== 'none' || self.mobile)) {\n                        selectionHandles.push([cell, 'br']);\n                        cell.selectionHandle = 'br';\n                    }\n                }\n            }\n            function createBorderOverlayArray(cell, drawArray, propPrefix, offsetPoint) {\n                offsetPoint = offsetPoint || {x: 0, y: 0};\n                cell.selectionBorder = '';\n                if (!cell.isRowHeader\n                        && self.selections[cell.rowIndex + -offsetPoint.y]\n                        && self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) !== -1) {\n                    if ((!self.selections[cell.rowIndex - 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex - 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1\n                            || cell.rowIndex === 0)\n                            && !cell.isHeader) {\n                        drawArray.push([cell, 't']);\n                        cell[propPrefix + 'BorderTop'] = true;\n                        cell[propPrefix + 'Border'] += 't';\n                    }\n                    if (!self.selections[cell.rowIndex + 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex + 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'b']);\n                        cell[propPrefix + 'BorderBottom'] = true;\n                        cell[propPrefix + 'Border'] += 'b';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === 0\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex - 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'l']);\n                        cell[propPrefix + 'BorderLeft'] = true;\n                        cell[propPrefix + 'Border'] += 'l';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === s.length\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'r']);\n                        cell[propPrefix + 'BorderRight'] = true;\n                        cell[propPrefix + 'Border'] += 'r';\n                    }\n                }\n            }\n            function drawCell(d, rowOrderIndex, rowIndex) {\n                return function drawEach(header, headerIndex, columnOrderIndex) {\n                    var cellStyle = header.style || 'cell',\n                        cellGridAttributes,\n                        cell,\n                        isHeader = /HeaderCell/.test(cellStyle),\n                        isCorner = /cornerCell/.test(cellStyle),\n                        isRowHeader = 'rowHeaderCell' === cellStyle,\n                        isColumnHeader = 'columnHeaderCell' === cellStyle,\n                        selected = self.selections[rowOrderIndex] && self.selections[rowOrderIndex].indexOf(columnOrderIndex) !== -1,\n                        hovered = self.hovers[d[self.uniqueId]] && self.hovers[d[self.uniqueId]].indexOf(columnOrderIndex) !== -1,\n                        active = self.activeCell.rowIndex === rowOrderIndex && self.activeCell.columnIndex === columnOrderIndex,\n                        isGrid = typeof d[header.name] === 'object' && d[header.name] !== null && d[header.name] !== undefined,\n                        activeHeader = (self.orders.rows[self.activeCell.rowIndex] === rowOrderIndex\n                                || self.orders.columns[self.activeCell.columnIndex] === columnOrderIndex)\n                            && (columnOrderIndex === -1 || rowOrderIndex === -1)\n                            ? (isRowHeader ? 'activeRowHeaderCell' : 'activeColumnHeaderCell') : false,\n                        val,\n                        f = self.formatters[header.type || 'string'],\n                        orderByArrowSize = 0,\n                        treeArrowSize = 0,\n                        cellWidth = self.sizes.columns[isRowHeader ? 'cornerCell' : header[self.uniqueId]] || header.width,\n                        ev = {\n                            value: d[header.name],\n                            row: d,\n                            header: header\n                        };\n                    if (cellStyle === 'headerCellCap') {\n                        cellWidth = w - x;\n                    }\n                    // if no data or schema are defined, a width is provided to the stub column\n                    if (cellWidth === undefined) {\n                        cellWidth = self.style.cellWidth;\n                    }\n                    cellWidth = cellWidth * self.scale;\n                    if (x + cellWidth + self.style.cellBorderWidth < 0) {\n                        x += cellWidth + self.style.cellBorderWidth;\n                    }\n                    if (active) {\n                        cellStyle = 'activeCell';\n                    }\n                    if (self.visibleRows.indexOf(rowIndex) === -1 && !isHeader) {\n                        self.visibleRows.push(rowIndex);\n                    }\n                    val = self.dispatchEvent('formatcellvalue', ev);\n                    cx = x;\n                    cy = y;\n                    if (cellStyle === 'cornerCell') {\n                        cx = 0;\n                        cy = 0;\n                    } else if (isRowHeader) {\n                        cx = 0;\n                    } else if (isHeader) {\n                        cy = 0;\n                    }\n                    cell = {\n                        type: isGrid ? 'canvas-datagrid-cell' : header.type,\n                        style: cellStyle,\n                        nodeType: 'canvas-datagrid-cell',\n                        x: cx,\n                        y: cy,\n                        horizontalAlignment: self.style[cellStyle + 'HorizontalAlignment'],\n                        verticalAlignment: self.style[cellStyle + 'VerticalAlignment'],\n                        offsetTop: self.canvasOffsetTop + cy,\n                        offsetLeft: self.canvasOffsetLeft + cx,\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        active: active || activeHeader,\n                        hovered: hovered,\n                        selected: selected,\n                        width: cellWidth,\n                        height: cellHeight,\n                        offsetWidth: cellWidth,\n                        offsetHeight: cellHeight,\n                        parentNode: self.intf.parentNode,\n                        offsetParent: self.intf.parentNode,\n                        data: d,\n                        isCorner: isCorner,\n                        isHeader: isHeader,\n                        isColumnHeader: isColumnHeader,\n                        isHeaderCellCap: !!header.isHeaderCellCap,\n                        isRowHeader: isRowHeader,\n                        rowOpen: rowOpen,\n                        header: header,\n                        columnIndex: columnOrderIndex,\n                        rowIndex: rowOrderIndex,\n                        sortColumnIndex: headerIndex,\n                        sortRowIndex: rowIndex,\n                        isGrid: isGrid,\n                        isNormal: !isGrid && !isCorner && !isHeader,\n                        gridId: (self.attributes.name || '') + d[self.uniqueId] + ':' + header[self.uniqueId],\n                        parentGrid: self.intf,\n                        innerHTML: '',\n                        activeHeader: activeHeader,\n                        value: isHeader && !isRowHeader ? (header.title || header.name) : d[header.name]\n                    };\n                    ev.cell = cell;\n                    cell.userHeight = cell.isHeader ? self.sizes.rows[-1] : rowHeight;\n                    cell.userWidth = cell.isHeader ? self.sizes.columns.cornerCell : self.sizes.columns[header[self.uniqueId]];\n                    cell[self.uniqueId] = d[self.uniqueId];\n                    self.visibleCells.unshift(cell);\n                    if (self.dispatchEvent('beforerendercell', ev)) { return; }\n                    self.ctx.fillStyle = self.style[cellStyle + 'BackgroundColor'];\n                    self.ctx.strokeStyle = self.style[cellStyle + 'BorderColor'];\n                    self.ctx.lineWidth = self.style[cellStyle + 'BorderWidth'];\n                    if (hovered) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'HoverBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'HoverBorderColor'];\n                    }\n                    if (selected) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'SelectedBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'SelectedBorderColor'];\n                    }\n                    if (activeHeader) {\n                        self.ctx.fillStyle = self.style[activeHeader + 'BackgroundColor'];\n                    }\n                    self.dispatchEvent('rendercell', ev);\n                    if (cell.isGrid) {\n                        if (cell.height !== rowHeight) {\n                            cell.height = rowHeight || self.style.cellHeightWithChildGrid;\n                            checkScrollHeight = true;\n                        }\n                        cell.width = self.sizes.columns[header[self.uniqueId]] || self.style.cellWidthWithChildGrid;\n                    }\n                    if (rowOpen && !cell.isRowHeader) {\n                        cell.height = self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight;\n                    }\n                    if (!cell.isGrid) {\n                        fillRect(cx, cy, cell.width, cell.height);\n                        strokeRect(cx, cy, cell.width, cell.height);\n                    }\n                    self.ctx.save();\n                    radiusRect(cell.x, cell.y, cell.width, cell.height, 0);\n                    self.ctx.clip();\n                    self.dispatchEvent('afterrendercell', ev);\n                    if (cell.height !== cellHeight && !(rowOpen && !cell.isRowHeader)) {\n                        self.sizes.rows[isHeader ? -1 : d[self.uniqueId]] = cell.height;\n                        checkScrollHeight = true;\n                    }\n                    if (cell.width !== cellWidth) {\n                        self.sizes.columns[header[self.uniqueId]] = cell.width;\n                        checkScrollHeight = true;\n                    }\n                    if (isRowHeader && self.attributes.tree) {\n                        if (!self.dispatchEvent('rendertreearrow', ev)) {\n                            treeArrowSize = drawTreeArrow(cell, self.style[cellStyle + 'PaddingLeft'], cy, 0);\n                        }\n                    }\n                    if ((self.attributes.showRowNumbers && isRowHeader)\n                            || !isRowHeader) {\n                        if (cell.isGrid && !self.dispatchEvent('beforerendercellgrid', ev)) {\n                            if (!self.childGrids[cell.gridId]) {\n                                cellGridAttributes = self.args.cellGridAttributes || self.args;\n                                cellGridAttributes.name = self.attributes.saveAppearance ? cell.gridId : undefined;\n                                cellGridAttributes.parentNode = cell;\n                                cellGridAttributes.data = d[header.name];\n                                cellGridAttributes.style = cellGridAttributes.style || self.style;\n                                ev.cellGridAttributes = cellGridAttributes;\n                                if (self.dispatchEvent('beforecreatecellgrid', ev)) { return; }\n                                self.childGrids[cell.gridId] = self.createGrid(cellGridAttributes);\n                                self.sizes.rows[rd[self.uniqueId]]\n                                    = self.sizes.rows[rd[self.uniqueId]] || self.style.cellGridHeight;\n                                checkScrollHeight = true;\n                            }\n                            cell.grid = self.childGrids[cell.gridId];\n                            cell.grid.parentNode = cell;\n                            cell.grid.visible = true;\n                            cell.grid.draw();\n                            self.dispatchEvent('rendercellgrid', ev);\n                        } else if (!cell.isGrid) {\n                            if (self.childGrids[cell.gridId]) {\n                                self.childGrids[cell.gridId].parentNode.offsetHeight = 0;\n                            }\n                            if (isHeader && self.orderBy === header.name) {\n                                if (!self.dispatchEvent('renderorderbyarrow', ev)) {\n                                    orderByArrowSize = drawOrderByArrow(cx + self.style[cellStyle + 'PaddingLeft'], 0);\n                                }\n                            }\n                            self.ctx.fillStyle = self.style[cellStyle + 'Color'];\n                            if (hovered) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'HoverColor'];\n                            }\n                            if (selected) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'SelectedColor'];\n                            }\n                            if (activeHeader) {\n                                self.ctx.fillStyle = self.style[activeHeader + 'Color'];\n                            }\n                            self.ctx.font = (self.style[cellStyle + 'FontHeight'] * self.scale) + 'px ' + self.style[cellStyle + 'FontName'];\n                            cell.fontHeight = (self.style[cellStyle + 'FontHeight'] * self.scale);\n                            cell.treeArrowWidth = treeArrowSize;\n                            cell.orderByArrowWidth = orderByArrowSize;\n                            val = val !== undefined ? val : f\n                                ? f(ev) : '';\n                            if (val === undefined && !f) {\n                                val = '';\n                                console.warn('canvas-datagrid: Unknown format '\n                                    + header.type + ' add a cellFormater');\n                            }\n                            cell.formattedValue = ((val !== undefined && val !== null) ? val : '').toString();\n                            if (self.columnFilters && self.columnFilters[val] !== undefined && isHeader) {\n                                cell.formattedValue = self.attributes.filterTextPrefix + val;\n                            }\n                            if (!self.dispatchEvent('rendertext', ev)) {\n                                if (cell.innerHTML || header.type === 'html') {\n                                    drawHtml(cell);\n                                } else {\n                                    drawText(cell);\n                                }\n                            }\n                        }\n                    }\n                    if (active) {\n                        aCell = cell;\n                    }\n                    createBorderOverlayArray(cell, selectionBorders, 'selection');\n                    // createBorderOverlayArray calculates data for createHandlesOverlayArray so it must go 2nd\n                    createHandlesOverlayArray(cell);\n                    if (self.movingSelection) {\n                        createBorderOverlayArray(cell, moveBorders, 'move', self.moveOffset);\n                    }\n                    self.ctx.restore();\n                    x += cell.width + (bc ? 0 : self.style.cellBorderWidth);\n                    return cell.width;\n                };\n            }\n            function drawRowHeader(rowData, index, rowOrderIndex) {\n                var a;\n                if (self.attributes.showRowHeaders) {\n                    x = 0;\n                    rowHeaderCell = {'rowHeaderCell': index + 1 };\n                    rowHeaderCell[self.uniqueId] = rowData[self.uniqueId];\n                    a = {\n                        name: 'rowHeaderCell',\n                        width: self.style.rowHeaderCellWidth,\n                        style: 'rowHeaderCell',\n                        type: 'string',\n                        data: rowData[self.uniqueId],\n                        index: -1\n                    };\n                    a[self.uniqueId] = rowData[self.uniqueId];\n                    rowOpen = self.openChildren[rowData[self.uniqueId]];\n                    drawCell(rowHeaderCell, index, rowOrderIndex)(a, -1, -1);\n                }\n            }\n            function drawHeaders() {\n                var d, g = s.length, i, o, columnHeaderCell, header, nonFrozenHeaderWidth;\n                function drawHeaderColumnRange(start, end) {\n                    end = Math.min(end, g);\n                    for (o = start; o < end; o += 1) {\n                        i = self.orders.columns[o];\n                        header = s[i];\n                        d = {\n                            title: header.title,\n                            name: header.name,\n                            width: header.width || self.style.cellWidth,\n                            style: 'columnHeaderCell',\n                            type: 'string',\n                            index: o,\n                            order: i\n                        };\n                        columnHeaderCell = {'columnHeaderCell': header.title || header.name};\n                        columnHeaderCell[self.uniqueId] = 'h' + header[self.uniqueId];\n                        d[self.uniqueId] = header[self.uniqueId];\n                        x += drawCell(columnHeaderCell, -1, -1)(d, o, i);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                }\n                rowHeaders.forEach(function (rArgs, rhIndex) {\n                    y = rArgs[3];\n                    cellHeight = rArgs[4];\n                    if (rhIndex === self.frozenRow) {\n                        self.ctx.save();\n                        radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                        self.ctx.clip();\n                    }\n                    drawRowHeader(rArgs[0], rArgs[1], rArgs[2]);\n                });\n                self.ctx.restore();\n                if (self.attributes.showColumnHeaders) {\n                    x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    x += frozenColumnWidths;\n                    y = 0;\n                    // cell height might have changed during drawing\n                    cellHeight = self.getColumnHeaderCellHeight();\n                    drawHeaderColumnRange(self.scrollIndexLeft + self.frozenColumn, g);\n                    nonFrozenHeaderWidth = x;\n                    x = self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    drawHeaderColumnRange(0, self.frozenColumn);\n                    // fill in the space right of the headers\n                    x = nonFrozenHeaderWidth;\n                    if (x < w) {\n                        c = {\n                            name: '',\n                            width: self.style.scrollBarWidth,\n                            style: 'headerCellCap',\n                            isHeaderCell: true,\n                            isHeaderCellCap: true,\n                            type: 'string',\n                            index: s.length\n                        };\n                        c[self.uniqueId] = 'columnHeaderCell';\n                        drawCell({endCap: ''}, -1, -1)(c, -1, -1);\n                    }\n                    // fill in the space right of the headers\n                    if (self.attributes.showRowHeaders) {\n                        cornerCell = {'cornerCell': '' };\n                        cornerCell[self.uniqueId] = 'cornerCell';\n                        x = 0;\n                        c = {\n                            name: 'cornerCell',\n                            width: self.style.rowHeaderCellWidth,\n                            style: 'cornerCell',\n                            type: 'string',\n                            index: -1\n                        };\n                        c[self.uniqueId] = 'cornerCell';\n                        drawCell(cornerCell, -1, -1)(c, -1, -1);\n                    }\n                }\n            }\n            function drawRow(r, d) {\n                var i, treeHeight, rowSansTreeHeight, o, g = s.length;\n                if (y - (cellHeight * 2) > h) {\n                    return false;\n                }\n                rd = self.data[r];\n                rowOpen = self.openChildren[rd[self.uniqueId]];\n                rowSansTreeHeight = (self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight) * self.scale;\n                treeHeight = (rowOpen ? self.sizes.trees[rd[self.uniqueId]] : 0) * self.scale;\n                rowHeight = (rowSansTreeHeight + treeHeight);\n                if (y < -rowHeight) {\n                    return false;\n                }\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                cellHeight = rowHeight;\n                if (self.attributes.allowFreezingColumns) {\n                    x += frozenColumnWidths;\n                }\n                //draw normal columns\n                for (o = (self.scrollIndexLeft + self.frozenColumn); o < g; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        self.scrollIndexRight = o;\n                        self.scrollPixelRight = x;\n                        break;\n                    }\n                }\n                //draw frozen columns\n                x = 0;\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                for (o = 0; o < self.frozenColumn; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        break;\n                    }\n                }\n                self.lastFrozenColumnPixel = x;\n                // cell height might have changed during drawing\n                cellHeight = rowHeight;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                // don't draw a tree for the new row\n                treeGrid = self.childGrids[rd[self.uniqueId]];\n                if (r !== self.data.length && rowOpen) {\n                    treeGrid.visible = true;\n                    treeGrid.parentNode = {\n                        offsetTop: y + rowSansTreeHeight + self.canvasOffsetTop,\n                        offsetLeft: rowHeaderCellWidth - 1 + self.canvasOffsetLeft,\n                        offsetHeight: treeHeight,\n                        offsetWidth: self.width - rowHeaderCellWidth - self.style.scrollBarWidth - 1,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: self.style,\n                        nodeType: 'canvas-datagrid-tree',\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        rowIndex: r\n                    };\n                    self.visibleCells.unshift({\n                        rowIndex: r,\n                        columnIndex: 0,\n                        y: treeGrid.parentNode.offsetTop,\n                        x: treeGrid.parentNode.offsetLeft,\n                        height: treeGrid.height,\n                        width: treeGrid.width,\n                        style: 'tree-grid',\n                        type: treeGrid.parentNode.nodeType\n                    });\n                    treeGrid.draw();\n                } else if (treeGrid) {\n                    treeGrid.parentNode.offsetHeight = 0;\n                    delete self.sizes.trees[rd[self.uniqueId]];\n                }\n                rowHeaders.push([rd, r, d, y, rowHeight]);\n                self.visibleRowHeights[r] = rowHeight;\n                y += cellHeight + (bc ? 0 : self.style.cellBorderWidth);\n                return true;\n            }\n            function initDraw() {\n                self.visibleRows = [];\n                s = self.getVisibleSchema();\n                self.visibleCells = [];\n                self.canvasOffsetTop = self.isChildGrid ? self.parentNode.offsetTop : 0;\n                self.canvasOffsetLeft = self.isChildGrid ? self.parentNode.offsetLeft : 0;\n                h = self.height;\n                w = self.width;\n                if (!self.isChildGrid) {\n                    self.ctx.scale(window.devicePixelRatio, window.devicePixelRatio);\n                }\n            }\n            function drawBackground() {\n                radiusRect(0, 0, w, h, 0);\n                self.ctx.clip();\n                self.ctx.fillStyle = self.style.gridBackgroundColor;\n                fillRect(0, 0, w, h);\n            }\n            function drawFrozenRows() {\n                var n, ln = Math.min(self.data.length, self.frozenRow);\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                y = columnHeaderCellHeight;\n                for (r = 0; r < ln; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.allowFreezingRows) {\n                    // HACK great, another stupid magic number.\n                    // Background will appear as a 0.5px artifact behind the row freeze bar without this hack\n                    y += self.style.frozenMarkerBorderWidth + self.style.frozenMarkerWidth - 0.4999999999;\n                }\n                self.lastFrozenRowPixel = y;\n            }\n            function drawRows() {\n                self.ctx.save();\n                if (self.frozenRow > 0) {\n                    radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                    self.ctx.clip();\n                }\n                var o, n, i, g = s.length;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                if (!self.attributes.snapToRow) {\n                    y += -self.scrollBox.scrollTop + self.scrollPixelTop;\n                }\n                for (r = self.frozenRow + self.scrollIndexTop; r < l; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        self.scrollIndexBottom = r;\n                        self.scrollPixelBottom = y;\n                        break;\n                    }\n                }\n                if (self.attributes.showNewRow) {\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    rowHeight = cellHeight = self.style.cellHeight;\n                    rowOpen = false;\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        x += drawCell(self.newRow, self.data.length, self.data.length)(s[i], i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    rowHeaders.push([self.newRow, self.data.length, self.data.length, y, rowHeight]);\n                }\n                self.ctx.restore();\n            }\n            function drawMoveMarkers() {\n                if (!self.movingSelection) { return; }\n                self.ctx.lineWidth = self.style.moveOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.moveOverlayBorderColor;\n                self.ctx.setLineDash(self.style.moveOverlayBorderSegments);\n                moveBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n                self.ctx.setLineDash([]);\n            }\n            function drawReorderMarkers() {\n                if (!self.reorderObject) { return; }\n                var b = {\n                        height: self.reorderObject.height,\n                        width: self.reorderObject.width,\n                        x: self.reorderObject.x + self.reorderObject.dragOffset.x,\n                        y: self.reorderObject.y + self.reorderObject.dragOffset.y\n                    },\n                    m = {\n                        width: w,\n                        height: h,\n                        x: 0,\n                        y: 0\n                    };\n                self.ctx.fillStyle = self.style.reorderMarkerBackgroundColor;\n                self.ctx.lineWidth = self.style.reorderMarkerBorderWidth;\n                self.ctx.strokeStyle = self.style.reorderMarkerBorderColor;\n                if (self.dragMode === 'row-reorder') {\n                    b.width = w;\n                    b.x = 0;\n                    m.width = w;\n                    m.height = self.currentCell.height;\n                    m.y = self.currentCell.y;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.rowIndex !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex > -1\n                            && self.currentCell.rowIndex < l) {\n                        addBorderLine(m, self.reorderTarget.sortRowIndex > self.reorderObject.sortRowIndex ? 'b' : 't');\n                    }\n                } else if (self.dragMode === 'column-reorder' && self.reorderObject) {\n                    b.height = h;\n                    b.y = 0;\n                    m.height = h;\n                    m.width = self.currentCell.width;\n                    m.y = 0;\n                    m.x = self.currentCell.x;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.columnIndex !== self.reorderObject.columnIndex\n                            && self.currentCell.columnIndex > -1\n                            && self.currentCell.columnIndex < s.length) {\n                        addBorderLine(m, self.reorderTarget.sortColumnIndex > self.reorderObject.sortColumnIndex ? 'r' : 'l');\n                    }\n                }\n            }\n            function drawBorder() {\n                self.ctx.lineWidth = self.style.gridBorderWidth;\n                self.ctx.strokeStyle = self.style.gridBorderColor;\n                strokeRect(0, 0, self.width, self.height);\n            }\n            function drawSelectionBorders() {\n                self.ctx.lineWidth = self.style.selectionOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.selectionOverlayBorderColor;\n                function dsb(c) {\n                    addBorderLine(c[0], c[1]);\n                }\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.save();\n                clipFrozenArea(0);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(1);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(2);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n            }\n            function drawSelectionHandles() {\n                if (self.mobile || self.attributes.allowMovingSelection) {\n                    self.ctx.lineWidth = self.style.selectionHandleBorderWidth;\n                    self.ctx.strokeStyle = self.style.selectionHandleBorderColor;\n                    self.ctx.fillStyle = self.style.selectionHandleColor;\n                    selectionHandles.forEach(function (c) {\n                        addselectionHandle(c[0], c[1]);\n                        var az = self.attributes.touchSelectHandleZone / 2,\n                            ax = c[0].x + (c[1] === 'tl' || c[1] === 'bl' ? 0 : c[0].width) - az,\n                            ay = c[0].y + (c[1] === 'bl' || c[1] === 'br' ? c[0].height : 0) - az;\n                        self.visibleCells.unshift({\n                            x: ax,\n                            y: ay,\n                            height: self.style.selectionHandleSize + az,\n                            width: self.style.selectionHandleSize + az,\n                            style: 'selection-handle-' + c[1]\n                        });\n                    });\n                }\n            }\n            function drawActiveCell() {\n                if (!aCell) { return; }\n                self.ctx.save();\n                var cl = self.activeCell.columnIndex + 1 > self.frozenColumn || self.activeCell.rowIndex + 1 > self.frozenRow,\n                    acx = cl ? self.lastFrozenColumnPixel : 0,\n                    acy = cl ? self.lastFrozenRowPixel : 0,\n                    acw = cl ? self.width - self.lastFrozenColumnPixel : self.width,\n                    ach = cl ? self.height - self.lastFrozenRowPixel : self.height;\n                radiusRect(acx, acy, acw, ach, 0);\n                self.ctx.clip();\n                if (self.attributes.selectionMode === 'row') {\n                    if (self.activeCell && self.activeCell.rowIndex === aCell.rowIndex) {\n                        self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                        self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                        strokeRect(0, aCell.y, self.getHeaderWidth() + rowHeaderCellWidth, self.visibleRowHeights[aCell.rowIndex]);\n                    }\n                } else {\n                    self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                    self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                    strokeRect(aCell.x, aCell.y, aCell.width, aCell.height);\n                }\n                self.ctx.restore();\n            }\n            function drawFrozenMarkers() {\n                var my = self.lastFrozenRowPixel - self.style.frozenMarkerWidth,\n                    mx = self.lastFrozenColumnPixel - self.style.frozenMarkerBorderWidth,\n                    xHover = self.currentCell && self.currentCell.style === 'frozen-row-marker',\n                    yHover = self.currentCell && self.currentCell.style === 'frozen-column-marker';\n                self.ctx.lineWidth = self.style.frozenMarkerBorderWidth;\n                if (self.attributes.allowFreezingColumns) {\n                    self.ctx.fillStyle = yHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = yHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    strokeRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    self.visibleCells.unshift({\n                        x: mx,\n                        y: 0,\n                        height: self.height,\n                        width: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        style: 'frozen-column-marker'\n                    });\n                }\n                if (self.attributes.allowFreezingRows) {\n                    self.ctx.fillStyle = xHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = xHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    strokeRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    self.visibleCells.unshift({\n                        x: 0,\n                        y: my,\n                        height: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        width: self.width,\n                        style: 'frozen-row-marker'\n                    });\n                }\n                if (self.freezeMarkerPosition) {\n                    self.ctx.fillStyle = self.style.frozenMarkerActiveColor;\n                    self.ctx.strokeStyle = self.style.frozenMarkerActiveBorderColor;\n                    if (self.dragMode === 'frozen-column-marker') {\n                        fillRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                        strokeRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                    } else {\n                        fillRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                        strokeRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                    }\n                }\n            }\n            function drawPerfLines() {\n                if (!self.attributes.showPerformance) { return; }\n                var pw = 250,\n                    px = self.width - pw - self.style.scrollBarWidth - (self.style.scrollBarBorderWidth * 2),\n                    py = columnHeaderCellHeight,\n                    ph = 100;\n                if (scrollDebugCounters.length === 0) { scrollDebugCounters = self.fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (touchPPSCounters.length === 0) { touchPPSCounters = self.fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (entityCount.length === 0) { entityCount = self.fillArray(0, perfWindowSize, 1, 0); }\n                self.ctx.lineWidth = 0.5;\n                function dpl(name, perfArr, arrIndex, max, color, useAbs, rowIndex) {\n                    var v;\n                    drawPerfLine(pw, ph, px, py, perfArr, arrIndex, max, color, useAbs);\n                    self.ctx.fillStyle = color;\n                    fillRect(3 + px, py + 9 + (rowIndex * 11), 8, 8);\n                    self.ctx.fillStyle = '#999999';\n                    v = arrIndex !== undefined ? perfArr[0][arrIndex] : perfArr[0];\n                    fillText(name + ' ' + (isNaN(v) ? 0 : v).toFixed(3), 14 + px, py + 16 + (rowIndex * 11));\n                }\n                self.ctx.textAlign = 'left';\n                self.ctx.font = '8px sans-serif';\n                self.ctx.fillStyle = 'rgba(29, 25, 26, 1.00)';\n                fillRect(px, py, pw, ph);\n                [['Scroll Height', scrollDebugCounters, 0, self.scrollBox.scrollHeight, 'rgba(248, 33, 103, 1.00)', false],\n                    ['Scroll Width', scrollDebugCounters, 1, self.scrollBox.scrollWidth, 'rgba(66, 255, 27, 1.00)', false],\n                    ['Performance', perfCounters, undefined, 200, 'rgba(252, 255, 37, 1.00)', false],\n                    ['Entities', entityCount, undefined, 1500, 'rgba(76, 231, 239, 1.00)', false],\n                    ['TouchPPSX', touchPPSCounters, 0, 1000, 'rgba(246, 102, 24, 1.00)', true],\n                    ['TouchPPSY', touchPPSCounters, 1, 1000, 'purple', true]\n                    ].forEach(function (i, index) {\n                    i.push(index);\n                    dpl.apply(null, i);\n                });\n                self.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n                entityCount.pop();\n                entityCount.unshift(self.visibleCells.length);\n                scrollDebugCounters.pop();\n                scrollDebugCounters.unshift([self.scrollBox.scrollTop, self.scrollBox.scrollLeft]);\n                touchPPSCounters.pop();\n                touchPPSCounters.unshift([self.yPPS, self.xPPS]);\n            }\n            function drawDebug() {\n                self.ctx.save();\n                var d;\n                if (self.attributes.showPerformance || self.attributes.debug) {\n                    if (perfCounters.length === 0) { perfCounters = self.fillArray(0, perfWindowSize, 1, 0); }\n                    perfCounters.pop();\n                    perfCounters.unshift(performance.now() - p);\n                }\n                if (!self.attributes.debug) {\n                    self.ctx.restore();\n                    return;\n                }\n                self.ctx.font = '14px sans-serif';\n                d = {};\n                d.perf = (perfCounters.reduce(function (a, b) {\n                    return a + b;\n                }, 0) / Math.min(drawCount, perfCounters.length)).toFixed(1);\n                d.htmlImages = Object.keys(self.htmlImageCache).length;\n                d.reorderObject = 'x: ' + (self.reorderObject || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderObject || {rowIndex: 0}).rowIndex;\n                d.reorderTarget = 'x: ' + (self.reorderTarget || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderTarget || {rowIndex: 0}).rowIndex;\n                d.scale = self.scale;\n                d.startScale = self.startScale;\n                d.scaleDelta = self.scaleDelta;\n                d.zoomDeltaStart = self.zoomDeltaStart;\n                d.touchLength = self.touchLength;\n                d.touches = 'y0: ' + (self.touchPosition || {y: 0}).y + ' y1: ' + (self.touchPosition1 || {y: 0}).y;\n                d.scrollBox = self.scrollBox.toString();\n                d.scrollIndex = 'x: ' + self.scrollIndexLeft + ', y: ' + self.scrollIndexTop;\n                d.scrollPixel = 'x: ' + self.scrollPixelLeft + ', y: ' + self.scrollPixelTop;\n                d.canvasOffset = 'x: ' + self.canvasOffsetLeft + ', y: ' + self.canvasOffsetTop;\n                d.touchDelta = 'x: ' + self.touchDelta.x + ', y: ' + self.touchDelta.y;\n                d.touchAnimateTo = 'x: ' + self.touchAnimateTo.x + ', y: ' + self.touchAnimateTo.y;\n                d.scrollAnimation = 'x: ' + self.scrollAnimation.x + ', y: ' + self.scrollAnimation.y;\n                d.touchPPS = 'x: ' + self.xPPS + ', y: ' + self.yPPS;\n                d.touchPPST = 'x: ' + self.xPPST + ', y: ' + self.yPPST;\n                d.touchDuration = self.touchDuration;\n                d.pointerLockPosition =  self.pointerLockPosition ?\n                        self.pointerLockPosition.x + ', ' + self.pointerLockPosition.y : '';\n                d.size = 'w: ' + self.width + ', h: ' + self.height;\n                d.mouse = 'x: ' + self.mouse.x + ', y: ' + self.mouse.y;\n                d.touch = !self.touchStart\n                    ? '' : 'x: ' + self.touchStart.x + ', y: ' + self.touchStart.y;\n                d.entities = self.visibleCells.length;\n                d.hasFocus = self.hasFocus;\n                d.dragMode = self.dragMode;\n                if (self.currentCell) {\n                    d.columnIndex = self.currentCell.columnIndex;\n                    d.rowIndex = self.currentCell.rowIndex;\n                    d.sortColumnIndex = self.currentCell.sortColumnIndex;\n                    d.sortRowIndex = self.currentCell.sortRowIndex;\n                    d.context = self.currentCell.context;\n                    d.dragContext = self.currentCell.dragContext;\n                    d.style = self.currentCell.style;\n                    d.type = self.currentCell.type;\n                }\n                self.ctx.textAlign = 'right';\n                self.ctx.fillStyle = 'rgba(0, 0, 0, .60)';\n                fillRect(0, 0, self.width, self.height);\n                Object.keys(d).forEach(function (key, index) {\n                    var m = key + ': ' + d[key],\n                        lh = 14;\n                    self.ctx.fillStyle = 'rgba(37, 254, 21, 1)';\n                    fillText(m, w - 20, 140 + (index * lh));\n                });\n                self.ctx.restore();\n            }\n            self.ctx.save();\n            initDraw();\n            drawBackground();\n            drawFrozenRows();\n            drawRows();\n            drawActiveCell();\n            drawHeaders();\n            drawFrozenMarkers();\n            drawSelectionBorders();\n            drawSelectionHandles();\n            drawReorderMarkers();\n            drawMoveMarkers();\n            drawScrollBars();\n            if (checkScrollHeight) {\n                self.resize(true);\n            }\n            drawBorder();\n            drawDebug();\n            drawPerfLines();\n            if (self.dispatchEvent('afterdraw', {})) { return; }\n            self.ctx.restore();\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var wheeling;\n        self.stopPropagation = function (e) { e.stopPropagation(); };\n        /**\n         * Adds an event listener to the given event.\n         * @memberof canvasDatagrid\n         * @name addEventListener\n         * @method\n         * @param {string} ev The name of the event to subscribe to.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.addEventListener = function (ev, fn) {\n            self.events[ev] = self.events[ev] || [];\n            self.events[ev].unshift(fn);\n        };\n        /**\n         * Removes the given listener function from the given event.  Must be an actual reference to the function that was bound.\n         * @memberof canvasDatagrid\n         * @name removeEventListener\n         * @method\n         * @param {string} ev The name of the event to unsubscribe from.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.removeEventListener = function (ev, fn) {\n            (self.events[ev] || []).forEach(function removeEachListener(sfn, idx) {\n                if (fn === sfn) {\n                    self.events[ev].splice(idx, 1);\n                }\n            });\n        };\n        /**\n         * Fires the given event, padding an event object to the event subscribers.\n         * @memberof canvasDatagrid\n         * @name dispatchEvent\n         * @method\n         * @param {number} ev The name of the event to dispatch.\n         * @param {number} e The event object.\n         */\n        self.dispatchEvent = function (ev, e) {\n            var defaultPrevented;\n            function preventDefault() {\n                defaultPrevented = true;\n            }\n            if (!self.events[ev]) { return; }\n            self.events[ev].forEach(function dispatchEachEvent(fn) {\n                e.ctx = self.ctx;\n                e.preventDefault = preventDefault;\n                fn.apply(self.intf, [e]);\n            });\n            return defaultPrevented;\n        };\n        self.resize = function (drawAfterResize) {\n            if (!self.canvas) { return; }\n            var bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                cellBorder = self.style.cellBorderWidth * bm,\n                columnHeaderCellBorder = self.style.columnHeaderCellBorderWidth * bm,\n                scrollHeight,\n                scrollWidth,\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                ch = self.style.cellHeight,\n                // TODO: What the hell are these numbers!?  They are probably some value in the style.\n                scrollDragPositionOffsetY = 30,\n                scrollDragPositionOffsetX = 15;\n            scrollHeight = self.data.reduce(function reduceData(accumulator, row, rowIndex) {\n                return accumulator\n                    + (((self.sizes.rows[row[self.uniqueId]] || ch) + (self.sizes.trees[row[self.uniqueId]] || 0)) * self.scale)\n                    + cellBorder\n                    // HACK? if an expanded tree row is frozen it is necessary to add the tree row's height a second time.\n                    + (self.frozenRow > rowIndex ? (self.sizes.trees[row[self.uniqueId]] || 0) : 0);\n            }, 0) || 0;\n            scrollWidth = self.getVisibleSchema().reduce(function reduceSchema(accumulator, column) {\n                if (column.hidden) { return accumulator; }\n                return accumulator + ((self.sizes.columns[column[self.uniqueId]] || column.width || self.style.cellWidth) * self.scale) + cellBorder;\n            }, 0) || 0;\n            if (self.isChildGrid) {\n                self.width = self.parentNode.offsetWidth;\n                self.height = self.parentNode.offsetHeight;\n            } else {\n                self.height = self.canvas.offsetHeight;\n                self.width = self.canvas.offsetWidth;\n                self.canvas.width = self.width * window.devicePixelRatio;\n                self.canvas.height = self.height * window.devicePixelRatio;\n                self.canvasOffsetLeft = self.args.canvasOffsetLeft || 0;\n                self.canvasOffsetTop = self.args.canvasOffsetTop || 0;\n            }\n            if (self.attributes.showNewRow) {\n                scrollHeight += ch + cellBorder;\n            }\n            self.scrollBox.width = self.width - rowHeaderCellWidth;\n            self.scrollBox.height = self.height - columnHeaderCellHeight - columnHeaderCellBorder;\n            self.scrollBox.top = columnHeaderCellHeight + columnHeaderCellBorder;\n            self.scrollBox.left = rowHeaderCellWidth;\n            self.scrollBox.scrollHeight = scrollHeight + self.style.scrollBarWidth - self.scrollBox.height;\n            self.scrollBox.scrollWidth = scrollWidth + self.style.scrollBarWidth - self.scrollBox.width;\n            self.scrollBox.widthBoxRatio = ((self.scrollBox.width - scrollDragPositionOffsetX)\n                / (self.scrollBox.scrollWidth + self.scrollBox.width - scrollDragPositionOffsetX));\n            self.scrollBox.scrollBoxWidth = self.scrollBox.width\n                * self.scrollBox.widthBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.heightBoxRatio = ((self.scrollBox.height - scrollDragPositionOffsetY)\n                / (self.scrollBox.scrollHeight + (self.scrollBox.height - scrollDragPositionOffsetY)));\n            self.scrollBox.scrollBoxHeight = self.scrollBox.height\n                * self.scrollBox.heightBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.scrollBoxWidth = Math.max(self.scrollBox.scrollBoxWidth, self.style.scrollBarBoxMinSize);\n            self.scrollBox.scrollBoxHeight = Math.max(self.scrollBox.scrollBoxHeight, self.style.scrollBarBoxMinSize);\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            self.resizeEditInput();\n            self.scroll(true);\n            if (drawAfterResize) {\n                self.draw(true);\n            }\n            self.dispatchEvent('resize', {});\n            return true;\n        };\n        self.scroll = function (dontDraw) {\n            var bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                s = self.getVisibleSchema(),\n                cellBorder = self.style.cellBorderWidth * bm,\n                ch = self.style.cellHeight;\n            self.scrollIndexTop = 0;\n            self.scrollPixelTop = 0;\n            self.scrollIndexLeft = 0;\n            self.scrollPixelLeft = 0;\n            while (self.scrollPixelTop < self.scrollBox.scrollTop && self.scrollIndexTop < self.data.length) {\n                self.scrollPixelTop +=\n                    (((self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || ch)\n                        + (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0)) * self.scale)\n                    + cellBorder;\n                self.scrollIndexTop += 1;\n            }\n            while (self.scrollPixelLeft < self.scrollBox.scrollLeft && self.scrollIndexLeft < s.length) {\n                self.scrollPixelLeft +=\n                    ((self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]]\n                        || s[self.scrollIndexLeft].width\n                        || self.style.cellWidth) * self.scale)\n                    + cellBorder;\n                self.scrollIndexLeft += 1;\n            }\n            if (self.data.length > 0) {\n                self.scrollIndexLeft = Math.max(self.scrollIndexLeft - 1, 0);\n                self.scrollPixelLeft = Math.max(self.scrollPixelLeft\n                    - ((self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width || self.style.cellWidth) * self.scale), 0);\n                self.scrollIndexTop = Math.max(self.scrollIndexTop - 1, 0);\n                self.scrollPixelTop = Math.max((self.scrollPixelTop\n                    - ((self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || ch)\n                    + (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0)) * self.scale), 0);\n            }\n            self.ellipsisCache = {};\n            if (!dontDraw) {\n                self.draw(true);\n            }\n            //TODO: figure out why this has to be delayed for child grids\n            //BUG: wheeling event on 3rd level hierarchy fails to move input box\n            requestAnimationFrame(self.resizeEditInput);\n            self.dispatchEvent('scroll', {top: self.scrollBox.scrollTop, left: self.scrollBox.scrollLeft});\n        };\n        self.mousemove = function (e, overridePos) {\n            if (self.contextMenu || self.input) {\n                return;\n            }\n            self.mouse = overridePos || self.getLayerPos(e);\n            var ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                i,\n                vs = self.getVisibleSchema(),\n                dragBounds,\n                sBounds,\n                x = self.mouse.x,\n                y = self.mouse.y,\n                o = self.getCellAt(x, y),\n                delta,\n                ev = {NativeEvent: e, cell: o, x: x, y: y},\n                previousCell = self.currentCell;\n            clearTimeout(self.scrollTimer);\n            if (!self.isInGrid({x: x, y: y})) {\n                self.hasFocus = false;\n            }\n            if (self.dispatchEvent('mousemove', ev)) {\n                return;\n            }\n            if (o && self.currentCell && (self.currentCell.rowIndex !== o.rowIndex\n                    || self.currentCell.columnIndex !== o.columnIndex)) {\n                self.cellBoundaryCrossed = true;\n                ev.cell = previousCell;\n                self.dispatchEvent('cellmouseout', ev);\n                ev.cell = o;\n                self.dispatchEvent('cellmouseover', ev);\n            }\n            self.currentCell = o;\n            if (!self.hasFocus) {\n                return;\n            }\n            self.hovers = {};\n            if (!self.draggingItem\n                    && o\n                    && self.scrollModes.indexOf(o.context) === -1) {\n                self.dragItem = o;\n                self.dragMode = o.dragContext;\n                self.canvas.style.cursor = o.context;\n                if (o.context === 'cell' && o.data) {\n                    self.canvas.style.cursor = 'default';\n                    self.hovers[o.data[self.uniqueId]] = [o.columnIndex];\n                }\n                if ((self.selecting || self.reorderObject)\n                        && o.context === 'cell'\n                        && o.data) {\n                    sBounds = self.getSelectionBounds();\n                    delta = {\n                        x: Math.abs(self.dragStart.x - x),\n                        y: Math.abs(self.dragStart.y - y)\n                    };\n                    if (self.dragStartObject.columnIndex !== -1 && e.shiftKey) {\n                        self.dragStartObject = {\n                            rowIndex: self.activeCell.rowIndex,\n                            columnIndex: self.activeCell.columnIndex\n                        };\n                    }\n                    dragBounds = {\n                        top: Math.min(self.dragStartObject.rowIndex, o.rowIndex),\n                        left: Math.min(self.dragStartObject.columnIndex, o.columnIndex),\n                        bottom: Math.max(self.dragStartObject.rowIndex, o.rowIndex),\n                        right: Math.max(self.dragStartObject.columnIndex, o.columnIndex)\n                    };\n                    if (self.dragStartObject.columnIndex === -1) {\n                        dragBounds.left = -1;\n                        dragBounds.right = vs.length - 1;\n                        dragBounds.top = Math.min(sBounds.top, o.rowIndex);\n                        dragBounds.bottom = Math.max(sBounds.bottom, o.rowIndex);\n                    }\n                    if (self.dragStartObject.rowIndex !== o.rowIndex\n                                || self.dragStartObject.columnIndex !== o.columnIndex) {\n                        self.ignoreNextClick = true;\n                    }\n                    if (self.cellBoundaryCrossed || (delta.x === 0 && delta.y === 0) || (self.attributes.selectionMode === 'row')) {\n                        if ((self.attributes.selectionMode === 'row') || self.dragStartObject.columnIndex === -1) {\n                            self.selectRow(o.rowIndex, ctrl, null, true);\n                        } else {\n                            if (!self.dragAddToSelection && o.rowIndex !== undefined) {\n                                if (self.selections[o.rowIndex] && self.selections[o.rowIndex].indexOf(o.columnIndex) !== -1) {\n                                    self.selections[o.rowIndex].splice(self.selections[o.rowIndex].indexOf(o.columnIndex), 1);\n                                }\n                            } else {\n                                self.selections[o.rowIndex] = self.selections[o.rowIndex] || [];\n                                if (self.selections[o.rowIndex].indexOf(o.columnIndex) === -1) {\n                                    self.selections[o.rowIndex].push(o.columnIndex);\n                                }\n                            }\n                        }\n                    }\n                    if ((!self.selectionBounds || (dragBounds.top !== self.selectionBounds.top\n                            || dragBounds.left !== self.selectionBounds.left\n                            || dragBounds.bottom !== self.selectionBounds.bottom\n                            || dragBounds.right !== self.selectionBounds.right)) && !ctrl) {\n                        self.selections = [];\n                        sBounds = dragBounds;\n                        if (self.attributes.selectionMode === 'row') {\n                            for (i = sBounds.top; i <= sBounds.bottom; i += 1) {\n                                self.selectRow(i, true, null, true);\n                            }\n                        } else {\n                            self.selectArea(sBounds, true);\n                        }\n                    }\n                    self.autoScrollZone(e, x, y, ctrl);\n                }\n            }\n            self.cellBoundaryCrossed = false;\n            self.draw(true);\n        };\n        self.click = function (e, overridePos) {\n            var i,\n                ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                pos = overridePos || self.getLayerPos(e);\n            self.currentCell = self.getCellAt(pos.x, pos.y);\n            if (self.currentCell.grid !== undefined) {\n                return;\n            }\n            function checkSelectionChange() {\n                self.dispatchEvent('selectionchanged', {\n                    selectedData: self.getSelectedData(),\n                    selections: self.selections,\n                    selectionBounds: self.selectionBounds\n                });\n            }\n            if (self.input) {\n                self.endEdit();\n            }\n            if (self.ignoreNextClick) {\n                self.ignoreNextClick = false;\n                return;\n            }\n            i = self.currentCell;\n            if (self.dispatchEvent('click', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (['rowHeaderCell', 'columnHeaderCell'].indexOf(self.currentCell.style) === -1 && !ctrl) {\n                self.setActiveCell(i.columnIndex, i.rowIndex);\n            }\n            if (self.currentCell.context === 'cell') {\n                if (self.currentCell.style === 'cornerCell') {\n                    self.selectAll();\n                    self.draw();\n                    checkSelectionChange();\n                    return;\n                }\n                if (self.currentCell.style === 'columnHeaderCell') {\n                    if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                        if (self.orderBy === i.header.name) {\n                            self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                        } else {\n                            self.orderDirection = 'asc';\n                        }\n                        self.order(i.header.name, self.orderDirection);\n                        checkSelectionChange();\n                        return;\n                    }\n                    if (self.attributes.columnHeaderClickBehavior === 'select') {\n                        self.selectColumn(i.header.index, ctrl, e.shiftKey, true);\n                        checkSelectionChange();\n                        self.draw();\n                        return;\n                    }\n                }\n                self.selections[i.rowIndex] = self.selections[i.rowIndex] || [];\n                if (((self.attributes.selectionMode === 'row') || self.currentCell.style === 'rowHeaderCell')) {\n                    if (self.currentCell.style === 'rowHeaderCell'\n                            && self.attributes.tree && pos.x > 0\n                            && pos.x - self.currentCell.x < self.style.treeArrowWidth\n                            + self.style.treeArrowMarginLeft\n                            + self.style.treeArrowMarginRight + self.style.treeArrowClickRadius\n                            && pos.y - self.currentCell.y < self.style.treeArrowHeight\n                            + self.style.treeArrowMarginTop + self.style.treeArrowClickRadius\n                            && pos.y > 0) {\n                        self.toggleTree(i.rowIndex);\n                        return;\n                    }\n                }\n                if (e.shiftKey && !ctrl) {\n                    self.selectionBounds = self.getSelectionBounds();\n                    self.selectArea(undefined, false);\n                }\n            }\n            checkSelectionChange();\n            self.draw(true);\n        };\n        self.dragResizeColumn = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = self.resizingStartingWidth + pos.x - self.dragStart.x;\n            y = self.resizingStartingHeight + pos.y - self.dragStart.y;\n            if (x < self.style.minColumnWidth) {\n                x = self.style.minColumnWidth;\n            }\n            if (y < self.style.minRowHeight) {\n                y = self.style.minRowHeight;\n            }\n            if (self.dispatchEvent('resizecolumn', {x: x, y: y, draggingItem: self.draggingItem})) { return false; }\n            if (self.scrollBox.scrollLeft > self.scrollBox.scrollWidth - self.attributes.resizeScrollZone\n                    && self.dragMode === 'ew-resize') {\n                self.resize(true);\n                self.scrollBox.scrollLeft += x;\n            }\n            if (self.dragMode === 'ew-resize') {\n                self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] = x;\n                if (['rowHeaderCell', 'cornerCell'].indexOf(self.draggingItem.header.style) !== -1) {\n                    self.resize(true);\n                }\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.dragMode === 'ns-resize') {\n                if (self.draggingItem.rowOpen) {\n                    self.sizes.trees[self.draggingItem.data[self.uniqueId]] = y;\n                } else if (self.attributes.globalRowResize) {\n                    self.style.cellHeight = y;\n                } else {\n                    self.sizes.rows[self.draggingItem.data[self.uniqueId]] = y;\n                }\n                self.dispatchEvent('resizerow', {row: y});\n                self.resizeChildGrids();\n                return;\n            }\n            self.ellipsisCache = {};\n        };\n        self.stopDragResize = function () {\n            self.resize();\n            document.body.removeEventListener('mousemove', self.dragResizeColumn, false);\n            document.body.removeEventListener('mouseup', self.stopDragResize, false);\n            self.setStorageData();\n            self.draw(true);\n            self.ignoreNextClick = true;\n        };\n        self.scrollGrid = function (e) {\n            var pos = self.getLayerPos(e);\n            if (self.attributes.scrollPointerLock && self.pointerLockPosition\n                    && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                self.pointerLockPosition.x += e.movementX;\n                self.pointerLockPosition.y += e.movementY;\n                self.pointerLockPosition.x = Math.min(self.width - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.x));\n                self.pointerLockPosition.y = Math.min(self.height - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.y));\n                pos = self.pointerLockPosition;\n            }\n            self.scrollMode = self.getCellAt(pos.x, pos.y).context;\n            if (self.scrollMode === 'horizontal-scroll-box' && self.scrollStartMode !== 'horizontal-scroll-box') {\n                self.scrollStartMode = 'horizontal-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.left = self.scrollBox.scrollLeft;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box' && self.scrollStartMode !== 'vertical-scroll-box') {\n                self.scrollStartMode = 'vertical-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.top = self.scrollBox.scrollTop;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollStartMode === 'vertical-scroll-box'\n                    && self.scrollMode !== 'vertical-scroll-box') {\n                self.scrollMode = 'vertical-scroll-box';\n            }\n            if (self.scrollStartMode === 'horizontal-scroll-box'\n                    && self.scrollMode !== 'horizontal-scroll-box') {\n                self.scrollMode = 'horizontal-scroll-box';\n            }\n            clearTimeout(self.scrollTimer);\n            if (self.scrollModes.indexOf(self.scrollMode) === -1) {\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box') {\n                self.scrollBox.scrollTop = self.scrollStart.top + ((pos.y - self.dragStart.y)\n                    / self.scrollBox.heightBoxRatio);\n            } else if (self.scrollMode === 'vertical-scroll-top') {\n                self.scrollBox.scrollTop -= (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'vertical-scroll-bottom') {\n                self.scrollBox.scrollTop += (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n            if (self.scrollMode === 'horizontal-scroll-box') {\n                self.scrollBox.scrollLeft = self.scrollStart.left + ((pos.x - self.dragStart.x)\n                    / self.scrollBox.widthBoxRatio);\n            } else if (self.scrollMode === 'horizontal-scroll-right') {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'horizontal-scroll-left') {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.stopScrollGrid = function () {\n            clearTimeout(self.scrollTimer);\n            if (document.exitPointerLock) {\n                document.exitPointerLock();\n            }\n            document.body.removeEventListener('mousemove', self.scrollGrid, false);\n        };\n        self.dragReorder = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = pos.x - self.dragStart.x;\n            y = pos.y - self.dragStart.y;\n            if (!self.attributes.allowColumnReordering && self.dragMode === 'column-reorder') {\n                return;\n            }\n            if (!self.attributes.allowRowReordering && self.dragMode === 'row-reorder') {\n                return;\n            }\n            if (self.dispatchEvent('reordering', {\n                    NativeEvent: e,\n                    source: self.dragStartObject,\n                    target: self.currentCell,\n                    dragMode: self.dragMode\n                })) {\n                return;\n            }\n            if (Math.abs(x) > self.attributes.reorderDeadZone || Math.abs(y) > self.attributes.reorderDeadZone) {\n                self.reorderObject = self.draggingItem;\n                self.reorderTarget = self.currentCell;\n                self.reorderObject.dragOffset = {\n                    x: x,\n                    y: y\n                };\n                self.autoScrollZone(e, pos.x, pos.y, false);\n            }\n        };\n        self.stopDragReorder = function (e) {\n            var oIndex,\n                tIndex,\n                cr = {\n                    'row-reorder': self.orders.rows,\n                    'column-reorder': self.orders.columns\n                },\n                i = {\n                    'row-reorder': 'rowIndex',\n                    'column-reorder': 'columnIndex'\n                }[self.dragMode];\n            document.body.removeEventListener('mousemove', self.dragReorder, false);\n            document.body.removeEventListener('mouseup', self.stopDragReorder, false);\n            if (self.reorderObject\n                    && self.reorderTarget\n                    && ((self.dragMode === 'column-reorder' && self.reorderTarget.columnIndex > -1\n                        && self.reorderTarget.columnIndex < self.getVisibleSchema().length)\n                    || (self.dragMode === 'row-reorder' && self.reorderTarget.rowIndex > -1\n                        && self.reorderTarget.rowIndex < self.data.length))\n                    && self.reorderObject[i] !== self.reorderTarget[i]\n                    && !self.dispatchEvent('reorder', {\n                        NativeEvent: e,\n                        source: self.reorderObject,\n                        target: self.reorderTarget,\n                        dragMode: self.dragMode\n                    })) {\n                self.ignoreNextClick = true;\n                oIndex = cr[self.dragMode].indexOf(self.reorderObject[i]);\n                tIndex = cr[self.dragMode].indexOf(self.reorderTarget[i]);\n                cr[self.dragMode].splice(oIndex, 1);\n                cr[self.dragMode].splice(tIndex, 0, self.reorderObject[i]);\n                self.setStorageData();\n            }\n            self.reorderObject = undefined;\n            self.reorderTarget = undefined;\n            self.draw(true);\n        };\n        self.dragMove = function (e) {\n            if (self.dispatchEvent('moving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.moveOffset = {\n                x: self.currentCell.columnIndex - self.dragStartObject.columnIndex,\n                y: self.currentCell.rowIndex - self.dragStartObject.rowIndex\n            };\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopDragMove = function (e) {\n            document.body.removeEventListener('mousemove', self.dragMove, false);\n            document.body.removeEventListener('mouseup', self.stopDragMove, false);\n            var b = self.getSelectionBounds();\n            if (self.dispatchEvent('endmove', {NativeEvent: e, cell: self.currentCell})) {\n                self.movingSelection = undefined;\n                self.moveOffset = undefined;\n                self.draw(true);\n                return;\n            }\n            if (self.moveOffset) {\n                self.moveTo(self.movingSelection, b.left + self.moveOffset.x, b.top + self.moveOffset.y);\n                self.moveSelection(self.moveOffset.x, self.moveOffset.y);\n            }\n            self.movingSelection = undefined;\n            self.moveOffset = undefined;\n            self.draw(true);\n        };\n        self.freezeMove = function (e) {\n            if (self.dispatchEvent('freezemoving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.ignoreNextClick = true;\n            self.freezeMarkerPosition = pos;\n            if (self.currentCell && self.currentCell.rowIndex !== undefined && self.dragMode === 'frozen-row-marker') {\n                self.scrollBox.scrollTop = 0;\n                self.frozenRow = self.currentCell.rowIndex + 1;\n            }\n            if (self.currentCell && self.currentCell.columnIndex !== undefined && self.dragMode === 'frozen-column-marker') {\n                self.scrollBox.scrollLeft = 0;\n                self.frozenColumn = self.currentCell.columnIndex + 1;\n            }\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopFreezeMove = function (e) {\n            document.body.removeEventListener('mousemove', self.freezeMove, false);\n            document.body.removeEventListener('mouseup', self.stopFreezeMove, false);\n            self.freezeMarkerPosition = undefined;\n            if (self.dispatchEvent('endfreezemove', {NativeEvent: e})) {\n                self.frozenRow = self.startFreezeMove.x;\n                self.frozenColumn = self.startFreezeMove.y;\n                self.draw(true);\n                return;\n            }\n            self.draw(true);\n        };\n        self.mousedown = function (e, overridePos) {\n            self.lastMouseDownTarget = e.target;\n            if (self.dispatchEvent('mousedown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (e.button === 2 || self.input) { return; }\n            var ctrl = (e.ctrlKey || e.metaKey),\n                move = /-move/.test(self.dragMode),\n                freeze = /frozen-row-marker|frozen-column-marker/.test(self.dragMode),\n                resize = /-resize/.test(self.dragMode);\n            self.dragStart = overridePos || self.getLayerPos(e);\n            self.scrollStart = {\n                left: self.scrollBox.scrollLeft,\n                top: self.scrollBox.scrollTop\n            };\n            self.dragStartObject = self.getCellAt(self.dragStart.x, self.dragStart.y);\n            self.dragAddToSelection = !self.dragStartObject.selected;\n            if (!ctrl && !e.shiftKey && !/(vertical|horizontal)-scroll-(bar|box)/\n                    .test(self.dragStartObject.context)\n                    && self.currentCell\n                    && !self.currentCell.isColumnHeader\n                    && !move\n                    && !freeze\n                    && !resize) {\n                self.selections = [];\n            }\n            if (self.dragStartObject.isGrid) {\n                return;\n            }\n            if (self.scrollModes.indexOf(self.dragStartObject.context) !== -1) {\n                self.scrollMode = self.dragStartObject.context;\n                self.scrollStartMode = self.dragStartObject.context;\n                self.scrollGrid(e);\n                if (self.attributes.scrollPointerLock\n                        && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                    self.pointerLockPosition = {\n                        x: self.dragStart.x,\n                        y: self.dragStart.y\n                    };\n                    self.canvas.requestPointerLock();\n                }\n                document.body.addEventListener('mousemove', self.scrollGrid, false);\n                document.body.addEventListener('mouseup', self.stopScrollGrid, false);\n                self.ignoreNextClick = true;\n                return;\n            }\n            if (self.dragMode === 'cell') {\n                self.selecting = true;\n                if (self.attributes.selectionMode === 'row') {\n                    self.selectRow(self.dragStartObject.rowIndex, ctrl, null, true);\n                }\n                return self.mousemove(e);\n            }\n            if (move) {\n                self.draggingItem = self.dragItem;\n                self.movingSelection = self.selections.concat([]);\n                self.dragging = self.dragStartObject;\n                if (self.dispatchEvent('beginmove', {NativeEvent: e, cell: self.currentCell})) { return; }\n                document.body.addEventListener('mousemove', self.dragMove, false);\n                document.body.addEventListener('mouseup', self.stopDragMove, false);\n                return self.mousemove(e);\n            }\n            if (freeze) {\n                self.draggingItem = self.dragItem;\n                self.startFreezeMove = {\n                    x: self.frozenRow,\n                    y: self.frozenColumn\n                };\n                if (self.dispatchEvent('beginfreezemove', {NativeEvent: e})) { return; }\n                document.body.addEventListener('mousemove', self.freezeMove, false);\n                document.body.addEventListener('mouseup', self.stopFreezeMove, false);\n                return self.mousemove(e);\n            }\n            if (resize) {\n                self.draggingItem = self.dragItem;\n                if (self.draggingItem.rowOpen) {\n                    self.resizingStartingHeight = self.sizes.trees[self.draggingItem.data[self.uniqueId]];\n                } else {\n                    self.resizingStartingHeight = self.sizes.rows[self.draggingItem.data[self.uniqueId]] || self.style.cellHeight;\n                }\n                self.resizingStartingWidth = self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] || self.draggingItem.width;\n                document.body.addEventListener('mousemove', self.dragResizeColumn, false);\n                document.body.addEventListener('mouseup', self.stopDragResize, false);\n            }\n            if (['row-reorder', 'column-reorder'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragStartObject;\n                document.body.addEventListener('mousemove', self.dragReorder, false);\n                document.body.addEventListener('mouseup', self.stopDragReorder, false);\n            }\n        };\n        self.mouseup = function (e) {\n            clearTimeout(self.scrollTimer);\n            self.cellBoundaryCrossed = true;\n            self.selecting = undefined;\n            self.draggingItem = undefined;\n            self.dragStartObject = undefined;\n            if (self.dispatchEvent('mouseup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            if (self.currentCell && self.currentCell.grid !== undefined) {\n                return;\n            }\n            if (self.contextMenu || self.input) { return; }\n            if (self.dragStart && self.isInGrid(self.dragStart)) {\n                self.controlInput.focus();\n            }\n            e.preventDefault();\n        };\n        self.keydown = function (e) {\n            var i,\n                x = self.activeCell.columnIndex,\n                y = self.activeCell.rowIndex,\n                ctrl = (e.ctrlKey || e.metaKey),\n                last = self.data.length - 1,\n                cols = self.getVisibleSchema().length - 1;\n            if (self.dispatchEvent('keydown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            if (self.attributes.showNewRow) {\n                last += 1;\n            }\n            if (e.keyCode === 9) {\n                e.preventDefault();\n            }\n            // esc\n            if (e.keyCode === 27) {\n                self.selections = [];\n                self.draw(true);\n            // ctrl + a\n            } else if (ctrl && e.keyCode === 65) {\n                self.selectAll();\n            //ArrowDown\n            } else if (e.keyCode === 40) {\n                y += 1;\n            //ArrowUp\n            } else if (e.keyCode === 38) {\n                y -= 1;\n            //ArrowLeft Tab\n            } else if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {\n                x -= 1;\n            //ArrowRight Tab\n            } else if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {\n                x += 1;\n            //PageUp\n            } else if (e.keyCode === 33) {\n                y -= self.page;\n                e.preventDefault();\n            //PageDown\n            } else if (e.keyCode === 34) {\n                y += self.page;\n                e.preventDefault();\n            //Home ArrowUp\n            } else if (e.keyCode === 36 || (ctrl && e.keyCode === 38)) {\n                y = 0;\n            //End ArrowDown\n            } else if (e.keyCode === 35 || (ctrl && e.keyCode === 40)) {\n                y = self.data.length - 1;\n            //ArrowRight\n            } else if (ctrl && e.keyCode === 39) {\n                x = cols;\n            //ArrowLeft\n            } else if (ctrl && e.keyCode === 37) {\n                x = 0;\n            }\n            //Enter\n            if (e.keyCode === 13) {\n                return self.beginEditAt(x, y);\n            }\n            //Space\n            if (e.keyCode === 32) {\n                self.selections = [];\n                self.selections[Math.max(y, 0)] = [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                if (self.attributes.selectionMode === 'row') {\n                    for (i = self.selectionBounds.top; i <= self.selectionBounds.bottom; i += 1) {\n                        self.selectRow(i, ctrl, null, true);\n                    }\n                } else {\n                    self.selectArea(undefined, ctrl);\n                }\n                e.preventDefault();\n                self.draw(true);\n                return;\n            }\n            if (x < 0) {\n                x = 0;\n            }\n            if (y > last) {\n                y = last;\n            }\n            if (y < 0) {\n                y = 0;\n            }\n            if (x > cols) {\n                x = cols;\n            }\n            // Arrows\n            if (e.shiftKey && [37, 38, 39, 40].indexOf(e.keyCode) !== -1) {\n                self.selections[Math.max(y, 0)] = self.selections[Math.max(y, 0)] || [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                self.selectArea(undefined, ctrl);\n                self.draw(true);\n            }\n            if (x !== self.activeCell.columnIndex || y !== self.activeCell.rowIndex) {\n                self.scrollIntoView(x !== self.activeCell.columnIndex ? x : undefined, y !== self.activeCell.rowIndex ? y : undefined);\n                self.setActiveCell(x, y);\n                if (!e.shiftKey && self.attributes.selectionFollowsActiveCell) {\n                    if (!ctrl) {\n                        self.selections = [];\n                    }\n                    self.selections[y] = self.selections[y] || [];\n                    self.selections[y].push(x);\n                    self.dispatchEvent('selectionchanged', {\n                        selectedData: self.getSelectedData(),\n                        selections: self.selections,\n                        selectionBounds: self.selectionBounds\n                    });\n                }\n                self.draw(true);\n            }\n        };\n        self.keyup = function (e) {\n            if (self.dispatchEvent('keyup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n        };\n        self.keypress = function (e) {\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.dispatchEvent('keypress', {NativeEvent: e, cell: self.currentCell})) { return; }\n        };\n        self.dblclick = function (e) {\n            if (self.dispatchEvent('dblclick', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'columnHeaderCell') {\n                self.fitColumnToValues(self.currentCell.header.name);\n            } else if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'cornerCell') {\n                self.autosize();\n            } else if (['cell', 'activeCell'].indexOf(self.currentCell.style) !== -1) {\n                self.beginEditAt(self.currentCell.columnIndex, self.currentCell.rowIndex);\n            }\n        };\n        self.scrollWheel = function (e) {\n            var l,\n                t,\n                deltaX = e.deltaX === undefined ? e.NativeEvent.deltaX : e.deltaX,\n                deltaY = e.deltaY === undefined ? e.NativeEvent.deltaY : e.deltaY,\n                deltaMode = e.deltaMode === undefined ? e.NativeEvent.deltaMode : e.deltaMode;\n            if (wheeling) {\n                return;\n            }\n            if (self.dispatchEvent('wheel', {NativeEvent: e})) {\n                return;\n            }\n            e = e.NativeEvent || e;\n            self.touchHaltAnimation = true;\n            l = self.scrollBox.scrollLeft;\n            t = self.scrollBox.scrollTop;\n            if (self.hasFocus) {\n                //BUG Issue 42: https://github.com/TonyGermaneri/canvas-datagrid/issues/42\n                //https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\n                if (deltaMode === 1) {\n                    // line mode = 17 pixels per line\n                    deltaY = deltaY * 17;\n                }\n                if ((self.scrollBox.scrollTop < self.scrollBox.scrollHeight && deltaY > 0)\n                        || (self.scrollBox.scrollLeft < self.scrollBox.scrollWidth && deltaX > 0)\n                        || (self.scrollBox.scrollTop > 0 && deltaY < 0)\n                        || (self.scrollBox.scrollLeft > 0 && deltaX < 0)) {\n                    e.preventDefault(e);\n                }\n                wheeling = setTimeout(function () {\n                    wheeling = undefined;\n                    self.scrollBox.scrollTo(deltaX + l, deltaY + t);\n                }, 1);\n            }\n        };\n        self.pasteItem = function (clipData, x, y, mimeType) {\n            var l, s = self.getVisibleSchema(), yi = y - 1, sel = [];\n            function normalizeRowData(importingRow, existingRow, offsetX, schema, mimeType, rowIndex) {\n                var r = existingRow;\n                if (!Array.isArray(importingRow) && importingRow !== null && typeof importingRow === 'object') {\n                    importingRow = Object.keys(importingRow).map(function (colKey) {\n                        return importingRow[colKey];\n                    });\n                }\n                if (/^text\\/html/.test(mimeType)) {\n                    importingRow = importingRow.substring(4, importingRow.length - 5).split('</td><td>');\n                }\n                if (typeof importingRow === 'string') {\n                    importingRow = [importingRow];\n                }\n                sel[rowIndex] = [];\n                importingRow.forEach(function (cellData, colIndex) {\n                    var cName = schema[colIndex + offsetX].name;\n                    if (importingRow[colIndex] === undefined || importingRow[colIndex] === null) {\n                        r[cName] = existingRow[cName];\n                        return;\n                    }\n                    sel[rowIndex].push(colIndex + offsetX);\n                    r[cName] = importingRow[colIndex];\n                });\n                return r;\n            }\n            if (/^text\\/html/.test(mimeType)) {\n                if (!/^(<meta[^>]+>)?<table>/.test(clipData.substring(0, 29))) {\n                    console.warn('Unrecognized HTML format.  HTML must be a simple table, e.g.: <table><tr><td>data</td></tr></table>.  Data with the mime type text/html not in this format will not be imported as row data.');\n                    return;\n                }\n                // strip table beginning and ending off, then split at rows\n                clipData = clipData.substring(clipData.indexOf('<table><tr>') + 11, clipData.length - 13).split('</tr><tr>');\n            } else {\n                clipData = clipData.split('\\n');\n            }\n            l = clipData.length;\n            clipData.forEach(function (rowData) {\n                yi += 1;\n                self.data[yi] = normalizeRowData(rowData, self.data[yi], x, s, mimeType, yi);\n            });\n            self.selections = sel;\n            return l;\n        };\n        self.paste = function (e) {\n            var d;\n            function getItem(dti) {\n                var type = dti.type;\n                dti.getAsString(function (s) {\n                    self.pasteItem(s, self.activeCell.columnIndex, self.activeCell.rowIndex, type);\n                    self.draw();\n                });\n            }\n            d = Array.prototype.filter.call(e.clipboardData.items, function (dti) {\n                return dti.type === 'text/html';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/csv';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/plain';\n            })[0];\n            if (!d) {\n                console.warn('Cannot find supported clipboard data type.  Supported types are text/html, text/csv, text/plain.');\n                return;\n            }\n            getItem(d);\n        };\n        self.cut = function (e) {\n            self.copy(e);\n            self.forEachSelectedCell(function (data, index, colName) {\n                data[index][colName] = '';\n            });\n        };\n        self.copy = function (e) {\n            if (self.dispatchEvent('copy', {NativeEvent: e})) { return; }\n            if (!self.hasFocus || !e.clipboardData) { return; }\n            var t,\n                d,\n                rows = [],\n                trows = [],\n                sData = self.getSelectedData();\n            function fCopyCell(d) {\n                d = d === null || d === undefined ? '' : d;\n                return '<td>' + (typeof d === 'string' ? d.replace(/</g, '&lt;').replace(/>/g, '&gt;') : d) + '</td>';\n            }\n            if (sData.length > 0) {\n                sData.forEach(function (row) {\n                    if (row) {\n                        // r = array for HTML, rt = array for plain text\n                        var r = [],\n                            rt = [];\n                        Object.keys(row).forEach(function (key) {\n                            // escape strings\n                            if (row[key] !== null\n                                    && row[key] !== false\n                                    && row[key] !== undefined\n                                    && row[key].replace) {\n                                rt.push('\"' + row[key].replace(/\"/g, '\"\"') + '\"');\n                                r.push(fCopyCell(row[key]));\n                                return;\n                            }\n                            rt.push(row[key]);\n                            r.push(fCopyCell(row[key]));\n                        });\n                        rows.push(r.join(''));\n                        trows.push(rt.join(','));\n                    }\n                });\n                d = '<table><tr>' + rows.join('</tr><tr>') + '</tr></table>';\n                t = trows.join('\\n');\n                e.clipboardData.setData('text/html', d);\n                e.clipboardData.setData('text/plain', t);\n                e.clipboardData.setData('text/csv', t);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var touchTimerMs = 50,\n            touchScrollTimeout;\n        self.scrollAnimation = {};\n        self.touchDelta = {};\n        self.touchAnimateTo = {};\n        self.animationFrames = 0;\n        self.getTouchPos = function (e, touchIndex) {\n            var t = touchIndex ? e.touches[touchIndex] : e.touches[0],\n                rect = self.canvas.getBoundingClientRect(),\n                pos;\n            if (!t) { return; }\n            pos = {\n                x: t.clientX - rect.left,\n                y: t.clientY - rect.top\n            };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        // shamelessly stolen from from https://gist.github.com/gre/1650294\n        self.easingFunctions = {\n            linear: function (t) { return t; },\n            easeInQuad: function (t) { return t * t; },\n            easeOutQuad: function (t) { return t * (2 - t); },\n            easeInOutQuad: function (t) { return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t; },\n            easeInCubic: function (t) { return t * t * t; },\n            easeOutCubic: function (t) { return (--t) * t * t + 1; },\n            easeInOutCubic: function (t) { return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1; },\n            easeInQuart: function (t) { return t * t * t * t; },\n            easeOutQuart: function (t) { return 1 - (--t) * t * t * t; },\n            easeInOutQuart: function (t) { return t < 0.5 ? 8 * t  * t  * t * t : 1 - 8 * (--t) * t * t * t; },\n            easeInQuint: function (t) { return t * t * t * t * t; },\n            easeOutQuint: function (t) { return 1 + (--t) * t *  t * t * t; },\n            easeInOutQuint: function (t) { return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t; }\n        };\n        self.easing = function (t, b, c, d) {\n            return c * self.easingFunctions[self.attributes.touchEasingMethod](t / d) + b;\n        };\n        self.calculatePPSTimed = function () {\n            self.xPPST = -((self.touchDelta.x - self.touchSigmaTimed.x) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.yPPST = -((self.touchDelta.y - self.touchSigmaTimed.y) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.touchSigmaTimed = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.calculatePPS = function () {\n            self.xPPS = -((self.touchDelta.x - self.touchSigma.x) / (self.touchDelta.t - self.touchSigma.t));\n            self.yPPS = -((self.touchDelta.y - self.touchSigma.y) / (self.touchDelta.t - self.touchSigma.t));\n            self.touchSigma = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.touchEndAnimation = function () {\n            if (!self.canvas || !self.scrollBox.scrollTo) { return requestAnimationFrame(self.touchEndAnimation); }\n            var n = performance.now(),\n                d = self.attributes.touchReleaseAnimationDurationMs,\n                t;\n            t = n - self.touchDelta.t;\n            self.animationFrames += 1;\n            self.scrollAnimation.x = self.easing(t, self.touchDelta.scrollLeft, self.touchAnimateTo.x, d);\n            self.scrollAnimation.y = self.easing(t, self.touchDelta.scrollTop, self.touchAnimateTo.y, d);\n            if (t > d || (self.scrollAnimation.y === self.scrollBox.scrollTop\n                    && self.scrollAnimation.x === self.scrollBox.scrollLeft) || self.stopAnimation) {\n                return;\n            }\n            self.scrollBox.scrollTo(self.scrollAnimation.x, self.scrollAnimation.y);\n            requestAnimationFrame(self.touchEndAnimation);\n        };\n        self.touchEditCell = function (cell) {\n            self.beginEditAt(cell.columnIndex, cell.rowIndex);\n        };\n        self.touchCell = function (e) {\n            return function () {\n                clearInterval(self.calculatePPSTimer);\n                var i, pos = self.getTouchPos(e);\n                if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone) {\n                    i = self.getCellAt(pos.x, pos.y);\n                    if (!i) { return; }\n                    if (self.touchingCell && self.touchingCell.rowIndex === i.rowIndex\n                            && self.touchingCell.columnIndex === i.columnIndex) {\n                        self.touchEditCell(i);\n                        return;\n                    }\n                    if (self.input && self.input.editCell) {\n                        self.endEdit();\n                    }\n                    self.touchingCell = i;\n                    self.selectArea({\n                        top: i.rowIndex,\n                        bottom: i.rowIndex,\n                        left: i.columnIndex,\n                        right: i.columnIndex\n                    });\n                    self.draw(true);\n                }\n            };\n        };\n        self.touchstart = function (e) {\n            if (self.dispatchEvent('touchstart', {NativeEvent: e})) { return; }\n            self.disposeContextMenu();\n            clearInterval(self.calculatePPSTimer);\n            clearTimeout(self.touchContextTimeout);\n            self.touchStartEvent = e;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (e.changedTouches[0]) {\n                self.touchStart = self.getTouchPos(e);\n            }\n            if (e.touches.length === 1 && e.changedTouches[0] && !self.zoomAltered) {\n                self.touchLength = 1;\n                self.touchStart = self.touchStart || self.touchStart1;\n                self.touchScrollStart = {\n                    x: self.scrollBox.scrollLeft,\n                    y: self.scrollBox.scrollTop,\n                    t: performance.now()\n                };\n                self.touchDelta = {\n                    x: 0,\n                    y: 0,\n                    scrollLeft: self.scrollBox.scrollLeft,\n                    scrollTop: self.scrollBox.scrollTop,\n                    t: self.touchScrollStart.t\n                };\n                self.touchSigma = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchSigmaTimed = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchContextTimeout = setTimeout(function () {\n                    self.contextmenuEvent(e, self.touchStart);\n                }, self.attributes.touchContextMenuTimeMs);\n                self.calculatePPSTimer = setInterval(self.calculatePPSTimed, touchTimerMs);\n                self.startingCell = self.getCellAt(self.touchStart.x, self.touchStart.y, true);\n                if (self.startingCell && (self.startingCell.isGrid || ['tree', 'inherit'].indexOf(self.startingCell.context) !== -1)) {\n                    self.hasFocus = false;\n                    return;\n                }\n                self.hasFocus = true;\n                if (self.startingCell.isHeader) {\n                    if (self.startingCell.isRowHeader) {\n                        self.selectArea({\n                            top: self.startingCell.rowIndex,\n                            bottom: self.startingCell.rowIndex,\n                            left: 0,\n                            right: self.getVisibleSchema().length - 1,\n                        });\n                        self.draw(true);\n                    } else if (self.startingCell.isColumnHeader) {\n                        if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                            if (self.orderBy === self.startingCell.header.name) {\n                                self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                            } else {\n                                self.orderDirection = 'asc';\n                            }\n                            self.order(self.startingCell.header.name, self.orderDirection);\n                        }\n                        if (self.attributes.columnHeaderClickBehavior === 'select') {\n                            self.selectArea({\n                                top: 0,\n                                bottom: self.data.length - 1,\n                                left: self.startingCell.columnIndex,\n                                right: self.startingCell.columnIndex,\n                            });\n                            self.draw(true);\n                        }\n                    }\n                    self.touchEndEvents(e);\n                    return;\n                }\n            }\n            if (self.zoomAltered) { return; }\n            document.body.addEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.addEventListener('touchend', self.touchend, false);\n            document.body.addEventListener('touchcancel', self.touchcancel, false);\n            self.draw(true);\n        };\n        self.touchSelect = function (cell, handleType) {\n            if (cell.rowIndex === undefined || cell.columnIndex === undefined) { return; }\n            self.touchSelecting = true;\n            var bounds = self.getSelectionBounds();\n            if (handleType === 'selection-handle-bl'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex <= bounds.right) {\n                bounds.bottom = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tl'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex <= bounds.right) {\n                bounds.top = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tr'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex >= bounds.left) {\n                bounds.top = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            } else if (handleType === 'selection-handle-br'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex >= bounds.left) {\n                bounds.bottom = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            }\n            if (self.attributes.selectionMode === 'row' || cell.rowIndex === -1) {\n                bounds.left = 0;\n                bounds.right = self.getSchema().length - 1;\n            } else {\n                bounds.left = Math.max(0, bounds.left);\n            }\n            self.selectArea(bounds);\n            self.draw(true);\n        };\n        self.touchmove = function (e) {\n            var ch, rw, rScrollZone, lScrollZone, bScrollZone, tScrollZone, sbw, t1, t2;\n            if (self.dispatchEvent('touchmove', {NativeEvent: e})) { return; }\n            clearTimeout(touchScrollTimeout);\n            if (e.changedTouches[0]) {\n                self.touchPosition = self.getTouchPos(e);\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = self.getTouchPos(e, 1);\n            }\n            if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) > self.attributes.touchDeadZone) {\n                clearTimeout(self.touchContextTimeout);\n            }\n            if (e.touches.length === 2 && self.touchPosition && self.touchPosition1) {\n                t1 = self.touchPosition.y;\n                t2 = self.touchPosition1.y;\n                if (!self.zoomDeltaStart) {\n                    self.zoomDeltaStart = Math.abs(t1 - t2);\n                    self.startScale = self.scale;\n                }\n                self.touchLength = 2;\n                self.scaleDelta = self.zoomDeltaStart - Math.abs(t1 - t2);\n                self.scale = self.startScale - (self.scaleDelta * self.attributes.touchZoomSensitivity);\n                self.scale = Math.min(Math.max(self.scale, self.attributes.touchZoomMin), self.attributes.touchZoomMax);\n                self.zoomAltered = true;\n                self.resize(true);\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.zoomAltered) { return; }\n            self.touchLength = 1;\n            self.touchPosition = self.touchPosition || self.touchPosition1;\n            ch = self.getColumnHeaderCellHeight();\n            rw = self.getRowHeaderCellWidth();\n            rScrollZone = self.width - self.style.scrollBarWidth - self.touchPosition.x < self.attributes.selectionScrollZone;\n            lScrollZone = self.touchPosition.x - rw < self.attributes.selectionScrollZone;\n            bScrollZone = self.height - self.style.scrollBarWidth - self.touchPosition.y < self.attributes.selectionScrollZone;\n            tScrollZone = self.touchPosition.y - ch < self.attributes.selectionScrollZone;\n            sbw = self.style.scrollBarWidth;\n            function touchScroll() {\n                var x = self.scrollBox.scrollLeft,\n                    y = self.scrollBox.scrollTop;\n                x += (rScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y += (bScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y -= (tScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                x -= (lScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                self.scrollBox.scrollTo(x, y);\n                touchScrollTimeout = setTimeout(touchScroll, self.attributes.scrollRepeatRate);\n            }\n            e.stopPropagation();\n            self.touchDelta = {\n                x: self.touchPosition.x - self.touchStart.x,\n                y: self.touchPosition.y - self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: performance.now()\n            };\n            self.currentCell = self.getCellAt(self.touchPosition.x, self.touchPosition.y);\n            self.calculatePPS();\n            self.touchDuration = performance.now() - self.touchScrollStart.t;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            if (self.touchSelecting && (rScrollZone || lScrollZone || tScrollZone || bScrollZone)) {\n                touchScroll();\n            }\n            if (/vertical-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollTop = self.scrollBox.scrollHeight\n                    * ((self.touchPosition.y - ch - sbw) / (self.scrollBox.height - sbw - ch));\n                return;\n            }\n            if (/horizontal-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollLeft = self.scrollBox.scrollWidth\n                    * ((self.touchPosition.x - rw - sbw) / (self.scrollBox.width - sbw - rw));\n                return;\n            }\n            if (/selection-handle-/.test(self.startingCell.style)) {\n                self.touchSelect(self.currentCell, self.startingCell.style);\n                return;\n            }\n            self.scrollBox.scrollTo(self.touchScrollStart.x - self.touchDelta.x,\n                self.touchScrollStart.y - self.touchDelta.y);\n            self.draw(true);\n        };\n        self.touchEndEvents = function (e) {\n            self.zoomDeltaStart = undefined;\n            self.touchSelecting = false;\n            clearInterval(self.touchScrollTimeout);\n            clearInterval(self.touchContextTimeout);\n            clearInterval(self.calculatePPSTimer);\n            e.stopPropagation();\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n        };\n        self.touchend = function (e) {\n            if (self.dispatchEvent('touchend', {NativeEvent: e})) { return; }\n            self.zoomDeltaStart = undefined;\n            if (e.changedTouches[0]) {\n                self.touchPosition = undefined;\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = undefined;\n            }\n            if (self.zoomAltered) {\n                if (e.touches.length === 0) {\n                    self.zoomAltered = false;\n                }\n                return;\n            }\n            var dz = Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone;\n            if (isNaN(self.xPPS)) {\n                self.xPPS = 0;\n            }\n            if (isNaN(self.yPPS)) {\n                self.yPPS = 0;\n            }\n            if (isNaN(self.xPPST)) {\n                self.xPPST = 0;\n            }\n            if (isNaN(self.yPPST)) {\n                self.yPPST = 0;\n            }\n            self.touchAnimateTo.x = self.xPPS * self.attributes.touchReleaseAcceleration;\n            self.touchAnimateTo.y = self.yPPS * self.attributes.touchReleaseAcceleration;\n            self.calculatePPSTimed();\n            if (dz && !self.contextMenu) {\n                self.touchCell(self.touchStartEvent)();\n            } else if (self.animationFrames === 0\n                    && (Math.abs(self.xPPST) > self.attributes.scrollAnimationPPSThreshold\n                        || Math.abs(self.yPPST) > self.attributes.scrollAnimationPPSThreshold)\n                    && !/-scroll-/.test(self.startingCell.style)\n                    && !dz) {\n                self.stopAnimation = false;\n                self.touchEndAnimation();\n            }\n            self.touchEndEvents(e);\n        };\n        self.touchcancel = function (e) {\n            if (self.dispatchEvent('touchcancel', {NativeEvent: e})) { return; }\n            self.touchEndEvents(e);\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals HTMLElement: false, Reflect: false, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self, ctor) {\n        self.scale = 1;\n        self.orders = {\n            rows: [],\n            columns: []\n        };\n        self.visibleRowHeights = [];\n        self.hasFocus = false;\n        self.activeCell = {\n            columnIndex: 0,\n            rowIndex: 0\n        };\n        self.storageName = 'canvasDataGrid';\n        self.invalidSearchExpClass = 'canvas-datagrid-invalid-search-regExp';\n        self.localStyleLibraryStorageKey = 'canvas-datagrid-user-style-library';\n        self.uniqueId = '_canvasDataGridUniqueId';\n        self.orderBy = self.uniqueId;\n        self.orderDirection = 'asc';\n        self.columnFilters = {};\n        self.filters = {};\n        self.frozenRow = 0;\n        self.frozenColumn = 0;\n        self.ellipsisCache = {};\n        self.scrollBox = {};\n        self.visibleRows = [];\n        self.sizes = {\n            rows: {},\n            columns: {},\n            trees: {}\n        };\n        self.currentFilter = function () {\n            return true;\n        };\n        self.selections = [];\n        self.hovers = {};\n        self.attributes = {};\n        self.style = {};\n        self.formatters = {};\n        self.sorters = {};\n        self.schemaHashes = {};\n        self.events = {};\n        self.uId = 0;\n        self.changes = [];\n        self.scrollIndexTop = 0;\n        self.scrollPixelTop = 0;\n        self.scrollIndexLeft = 0;\n        self.scrollPixelLeft = 0;\n        self.childGrids = {};\n        self.openChildren = {};\n        self.scrollModes = [\n            'vertical-scroll-box',\n            'vertical-scroll-top',\n            'vertical-scroll-bottom',\n            'horizontal-scroll-box',\n            'horizontal-scroll-right',\n            'horizontal-scroll-left'\n        ];\n        self.componentL1Events = {};\n        self.eventNames = ['afterdraw', 'afterrendercell', 'attributechanged', 'beforebeginedit',\n            'beforecreatecellgrid', 'beforedraw', 'beforeendedit', 'beforerendercell', 'beforerendercellgrid',\n            'beginedit', 'cellmouseout', 'cellmouseover', 'click', 'collapsetree', 'contextmenu', 'copy',\n            'datachanged', 'dblclick', 'endedit', 'expandtree', 'formatcellvalue', 'keydown', 'keypress',\n            'keyup', 'mousedown', 'mousemove', 'mouseup', 'newrow', 'ordercolumn', 'rendercell', 'rendercellgrid',\n            'renderorderbyarrow', 'rendertext', 'rendertreearrow', 'reorder', 'reordering', 'resize',\n            'resizecolumn', 'resizerow', 'schemachanged', 'scroll', 'selectionchanged', 'stylechanged',\n            'touchcancel', 'touchend', 'touchmove', 'touchstart', 'wheel'];\n        self.mouse = { x: 0, y: 0};\n        self.getSelectedData = function (expandToRow) {\n            var d = [], s = expandToRow ? self.getSchema() : self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    if (col === -1 || !s[col]) { return; }\n                    d[index][s[col].name] = self.data[index][s[col].name];\n                });\n            });\n            return d;\n        };\n        self.fillArray = function (low, high, step, def) {\n            step = step || 1;\n            var i = [], x;\n            for (x = low; x <= high; x += step) {\n                i[x] = def === undefined ? x : (typeof def === 'function' ? def(x) : def);\n            }\n            return i;\n        };\n        self.getColumnHeaderCellHeight = function () {\n            if (!self.attributes.showColumnHeaders) { return 0; }\n            return ((self.sizes.rows[-1] || self.style.columnHeaderCellHeight) * self.scale);\n        };\n        self.getRowHeaderCellWidth = function () {\n            if (!self.attributes.showRowHeaders) { return 0; }\n            return (self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth) * self.scale;\n        };\n        self.setStorageData = function () {\n            if (!self.attributes.saveAppearance || !self.attributes.name) { return; }\n            localStorage.setItem(self.storageName + '-' + self.attributes.name, JSON.stringify({\n                sizes: {\n                    rows: self.sizes.rows,\n                    columns: self.sizes.columns\n                },\n                orders: {\n                    rows: self.orders.rows,\n                    columns: self.orders.columns\n                },\n                orderBy: self.orderBy,\n                orderDirection: self.orderDirection\n            }));\n        };\n        self.getSchema = function () {\n            return self.schema || self.tempSchema;\n        };\n        self.createColumnOrders = function () {\n            var s = self.getSchema();\n            self.orders.columns = self.fillArray(0, s.length - 1);\n        };\n        self.createRowOrders = function () {\n            self.orders.rows = self.fillArray(0, self.data.length - 1);\n        };\n        self.getVisibleSchema = function () {\n            return self.getSchema().filter(function (col) {\n                return !col.hidden && col.name !== self.uniqueId;\n            });\n        };\n        self.applyDefaultValue = function (row, header) {\n            var d = header.defaultValue || '';\n            if (typeof d === 'function') {\n                d = d.apply(self.intf, [header]);\n            }\n            row[header.name] = d;\n        };\n        self.createNewRowData = function () {\n            self.newRow = {};\n            self.newRow[self.uniqueId] = self.uId;\n            self.uId += 1;\n            self.getSchema().forEach(function forEachHeader(header) {\n                self.applyDefaultValue(self.newRow, header);\n            });\n        };\n        self.getSchemaNameHash = function (key) {\n            var n = 0;\n            while (self.schemaHashes[key]) {\n                n += 1;\n                key = key + n;\n            }\n            return key;\n        };\n        self.filter = function (type) {\n            var f = self.filters[type];\n            if (!f && type !== undefined) {\n                console.warn('Cannot find filter for type %s, falling back to substring match.', type);\n                f = self.filters.string;\n            }\n            return f;\n        };\n        self.getBestGuessDataType = function (columnName) {\n            var t, x, l = self.data.length;\n            for (x = 0; x < l; x += 1) {\n                if ([null, undefined].indexOf(self.data[x][columnName]) !== -1) {\n                    t = typeof self.data[x];\n                    return t === 'object' ? 'string' : t;\n                }\n            }\n            return 'string';\n        };\n        self.drawChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].draw();\n            });\n        };\n        self.resizeChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].resize();\n            });\n        };\n        self.autoScrollZone = function (e, x, y, ctrl) {\n            var setTimer,\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight();\n            if (x > self.width - self.attributes.selectionScrollZone && x < self.width) {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y > self.height - self.attributes.selectionScrollZone && y < self.height) {\n                self.scrollBox.scrollTop += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (x - self.attributes.selectionScrollZone - rowHeaderCellWidth < 0) {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y - self.attributes.selectionScrollZone - columnHeaderCellHeight < 0) {\n                self.scrollBox.scrollTop -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (setTimer && !ctrl && self.currentCell && self.currentCell.columnIndex !== -1) {\n                self.scrollTimer = setTimeout(self.mousemove, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.refreshFromOrigialData = function () {\n            self.data = self.originalData.filter(function (row) {\n                return true;\n            });\n        };\n        self.validateColumn = function (c, s) {\n            if (!c.name) {\n                throw new Error('A column must contain at least a name.');\n            }\n            if (s.filter(function (i) { return i.name === c.name; }).length > 0) {\n                throw new Error('A column with the name '\n                    + c.name + ' already exists and cannot be added again.');\n            }\n            return true;\n        };\n        self.setDefaults = function (obj1, obj2, key, def) {\n            obj1[key] = obj2[key] === undefined ? def : obj2[key];\n        };\n        self.setAttributes = function () {\n            self.defaults.attributes.forEach(function eachAttribute(i) {\n                self.setDefaults(self.attributes, self.args, i[0], i[1]);\n            });\n        };\n        self.setStyle = function () {\n            self.defaults.styles.forEach(function eachStyle(i) {\n                self.setDefaults(self.style, self.args.style || {}, i[0], i[1]);\n            });\n        };\n        self.autosize = function (colName) {\n            self.getVisibleSchema().forEach(function (col) {\n                if (col.name === colName || colName === undefined) {\n                    self.fitColumnToValues(col.name);\n                }\n            });\n            self.fitColumnToValues('cornerCell');\n        };\n        self.dispose = function () {\n            if (!self.isChildGrid && self.canvas && self.canvas.parentNode) {\n                self.canvas.parentNode.removeChild(self.canvas);\n            }\n            self.eventParent.removeEventListener('mouseup', self.mouseup, false);\n            self.eventParent.removeEventListener('mousedown', self.mousedown, false);\n            self.eventParent.removeEventListener('dblclick', self.dblclick, false);\n            self.eventParent.removeEventListener('click', self.click, false);\n            self.eventParent.removeEventListener('mousemove', self.mousemove);\n            self.eventParent.removeEventListener('wheel', self.scrollWheel, false);\n            self.canvas.removeEventListener('contextmenu', self.contextmenu, false);\n            self.canvas.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('keypress', self.keypress, false);\n            self.controlInput.removeEventListener('keyup', self.keyup, false);\n            self.controlInput.removeEventListener('keydown', self.keydown, false);\n            window.removeEventListener('resize', self.resize);\n            if (self.observer && self.observer.disconnect) {\n                self.observer.disconnect();\n            }\n        };\n        self.tryLoadStoredOrders = function () {\n            var s;\n            if (self.storedSettings\n                    && typeof self.storedSettings.orders === 'object'\n                    && self.storedSettings.orders !== null) {\n                if (self.storedSettings.orders.rows.length >= self.data.length) {\n                    self.orders.rows = self.storedSettings.orders.rows;\n                }\n                s = self.getSchema();\n                if (self.storedSettings.orders.columns.length === s.length) {\n                    self.orders.columns = self.storedSettings.orders.columns;\n                }\n                self.orderBy = self.storedSettings.orderBy === undefined\n                    ? self.uniqueId : self.storedSettings.orderBy;\n                self.orderDirection = self.storedSettings.orderDirection === undefined\n                    ? self.uniqueId : self.storedSettings.orderDirection;\n                if (self.orderBy !== self.uniqueId && self.getHeaderByName(self.orderBy) && self.orderDirection) {\n                    self.order(self.orderBy, self.orderDirection);\n                }\n            }\n        };\n        self.getDomRoot = function () {\n            return self.shadowRoot ? self.shadowRoot.host : self.parentNode;\n        };\n        self.getFontName = function (fontStyle) {\n            return fontStyle.replace(/\\d+\\.?\\d*px/, '');\n        };\n        self.getFontHeight = function (fontStyle) {\n            return parseFloat(fontStyle, 10);\n        };\n        self.parseStyleValue = function (key) {\n            if (/Font/.test(key)) {\n                self.style[key + 'Height'] = self.getFontHeight(self.style[key]);\n                self.style[key + 'Name'] = self.getFontName(self.style[key]);\n                return;\n            }\n            // when inheriting styles from already instantiated grids, don't parse already parsed values.\n            if (key === 'moveOverlayBorderSegments' && typeof self.style[key] === 'string') {\n                self.style[key] = self.style[key].split(',')\n                    .map(function (i) { return parseInt(i, 10); });\n            }\n        };\n        self.initProp = function (propName) {\n            if (!self.args[propName]) { return; }\n            Object.keys(self.args[propName]).forEach(function (key) {\n                self[propName][key] = self.args[propName][key];\n            });\n        };\n        self.getStyleProperty = function (key) {\n            if (self.styleKeys.indexOf(key) === -1) {\n                return self.parentNodeStyle[key];\n            }\n            return self.style[key];\n        };\n        self.setStyleProperty = function (key, value, supressDrawAndEvent) {\n            if (self.styleKeys.indexOf(key) === -1) {\n                self.parentNodeStyle[key] = value;\n            } else {\n                self.style[key] = value;\n                self.parseStyleValue(key);\n            }\n            if (!supressDrawAndEvent) {\n                self.draw(true);\n                self.dispatchEvent('stylechanged', {name: 'style', value: value});\n            }\n        };\n        self.reloadStoredValues = function () {\n            if (self.attributes.name && self.attributes.saveAppearance) {\n                self.storedSettings = localStorage.getItem(self.storageName + '-' + self.attributes.name);\n                if (self.storedSettings) {\n                    try {\n                        self.storedSettings = JSON.parse(self.storedSettings);\n                    } catch (e) {\n                        console.warn('could not read settings from localStore', e);\n                        self.storedSettings = undefined;\n                    }\n                }\n                if (self.storedSettings) {\n                    if (typeof self.storedSettings.sizes === 'object'\n                            && self.storedSettings.sizes !== null) {\n                        self.sizes.rows = self.storedSettings.sizes.rows;\n                        self.sizes.columns = self.storedSettings.sizes.columns;\n                        ['trees', 'columns', 'rows'].forEach(function (i) {\n                            if (!self.sizes[i]) {\n                                self.sizes[i] = {};\n                            }\n                        });\n                    }\n                }\n            }\n        };\n        self.init = function () {\n            if (self.initialized) { return; }\n            var publicStyleKeyIntf = {};\n            self.setAttributes();\n            self.setStyle();\n            self.initScrollBox();\n            self.setDom();\n            self.type = 'canvas-datagrid';\n            self.initialized = true;\n            self.ie = /Trident/.test(window.navigator.userAgent);\n            self.edge = /Edge/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.moz = /Gecko/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.mobile = /Mobile/i.test(window.navigator.userAgent);\n            self.cursorGrab = 'grab';\n            self.cursorGrabing = 'grabbing';\n            self.cursorGrab = self.webKit ? '-webkit-grab' : self.cursorGrab;\n            self.cursorGrabing = self.moz ? '-webkit-grabbing' : self.cursorGrabbing;\n            self.pointerLockPosition = {x: 0, y: 0};\n            Object.keys(self.style).forEach(self.parseStyleValue);\n            self.intf.moveSelection = self.moveSelection;\n            self.intf.moveTo = self.moveTo;\n            self.intf.type = self.type;\n            self.intf.addEventListener = self.addEventListener;\n            self.intf.removeEventListener = self.removeEventListener;\n            self.intf.dispatchEvent = self.dispatchEvent;\n            /**\n             * Releases grid resources and removes grid elements.\n             * @memberof canvasDatagrid\n             * @name dispose\n             * @method\n             */\n            self.intf.dispose = self.dispose;\n            /**\n             * Appends the grid to another element later.  Not implemented.\n             * @memberof canvasDatagrid\n             * @name appendTo\n             * @method\n             * @param {number} el The element to append the grid to.\n             */\n            self.intf.appendTo = self.appendTo;\n            self.intf.filters = self.filters;\n            self.intf.sorters = self.sorters;\n            self.intf.autosize = self.autosize;\n            self.intf.beginEditAt = self.beginEditAt;\n            self.intf.endEdit = self.endEdit;\n            self.intf.setActiveCell = self.setActiveCell;\n            self.intf.forEachSelectedCell = self.forEachSelectedCell;\n            self.intf.scrollIntoView = self.scrollIntoView;\n            self.intf.clearChangeLog = self.clearChangeLog;\n            self.intf.gotoCell = self.gotoCell;\n            self.intf.gotoRow = self.gotoRow;\n            self.intf.getHeaderByName = self.getHeaderByName;\n            self.intf.findColumnScrollLeft = self.findColumnScrollLeft;\n            self.intf.findRowScrollTop = self.findRowScrollTop;\n            self.intf.fitColumnToValues = self.fitColumnToValues;\n            self.intf.findColumnMaxTextLength = self.findColumnMaxTextLength;\n            self.intf.disposeContextMenu = self.disposeContextMenu;\n            self.intf.getCellAt = self.getCellAt;\n            self.intf.isCellVisible = self.isCellVisible;\n            self.intf.order = self.order;\n            self.intf.draw = self.draw;\n            self.intf.selectArea = self.selectArea;\n            self.intf.clipElement = self.clipElement;\n            self.intf.getSchemaFromData = self.getSchemaFromData;\n            self.intf.setFilter = self.setFilter;\n            self.intf.selectRow = self.selectRow;\n            self.intf.parentGrid = self.parentGrid;\n            self.intf.toggleTree = self.toggleTree;\n            self.intf.expandTree = self.expandTree;\n            self.intf.collapseTree = self.collapseTree;\n            self.intf.canvas = self.canvas;\n            self.intf.context = self.ctx;\n            self.intf.insertRow = self.insertRow;\n            self.intf.deleteRow = self.deleteRow;\n            self.intf.addRow = self.addRow;\n            self.intf.insertColumn = self.insertColumn;\n            self.intf.deleteColumn = self.deleteColumn;\n            self.intf.addColumn = self.addColumn;\n            self.intf.getClippingRect = self.getClippingRect;\n            self.intf.setRowHeight = self.setRowHeight;\n            self.intf.setColumnWidth = self.setColumnWidth;\n            self.intf.resetColumnWidths = self.resetColumnWidths;\n            self.intf.resetRowHeights = self.resetRowHeights;\n            self.intf.resize = self.resize;\n            self.intf.selectColumn = self.selectColumn;\n            self.intf.selectRow = self.selectRow;\n            self.intf.selectAll = self.selectAll;\n            self.intf.selectNone = self.selectNone;\n            self.intf.drawChildGrids = self.drawChildGrids;\n            self.intf.assertPxColor = self.assertPxColor;\n            self.intf.clearPxColorAssertions = self.clearPxColorAssertions;\n            self.intf.integerToAlpha = self.integerToAlpha;\n            self.intf.copy = self.copy;\n            self.intf.setStyleProperty = self.setStyleProperty;\n            Object.defineProperty(self.intf, 'defaults', {\n                get: function () {\n                    return {\n                        styles: self.defaults.styles.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {}),\n                        attributes: self.defaults.attributes.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {})\n                    };\n                }\n            });\n            self.styleKeys = Object.keys(self.intf.defaults.styles);\n            self.DOMStyles = window.getComputedStyle(document.body, null);\n            Object.keys(self.DOMStyles).concat(Object.keys(self.style)).forEach(function (key) {\n                // unless this line is here, Object.keys() will not work on <instance>.style\n                publicStyleKeyIntf[key] = undefined;\n                Object.defineProperty(publicStyleKeyIntf, key, {\n                    get: function () {\n                        return self.getStyleProperty(key);\n                    },\n                    set: function (value) {\n                        self.setStyleProperty(key, value);\n                    }\n                });\n            });\n            Object.defineProperty(self.intf, 'shadowRoot', {\n                get: function () {\n                    return self.shadowRoot;\n                }\n            });\n            Object.defineProperty(self.intf, 'activeCell', {\n                get: function () {\n                    return self.activeCell;\n                }\n            });\n            Object.defineProperty(self.intf, 'hasFocus', {\n                get: function () {\n                    return self.hasFocus;\n                }\n            });\n            Object.defineProperty(self.intf, 'style', {\n                get: function () {\n                    return publicStyleKeyIntf;\n                },\n                set: function (valueObject) {\n                    Object.keys(valueObject).forEach(function (key) {\n                        self.setStyleProperty(key, valueObject[key], true);\n                    });\n                    self.draw(true);\n                    self.dispatchEvent('stylechanged', {name: 'style', value: valueObject});\n                }\n            });\n            Object.defineProperty(self.intf, 'attributes', { value: {}});\n            Object.keys(self.attributes).forEach(function (key) {\n                Object.defineProperty(self.intf.attributes, key, {\n                    get: function () {\n                        return self.attributes[key];\n                    },\n                    set: function (value) {\n                        self.attributes[key] = value;\n                        if (key === 'name') {\n                            self.reloadStoredValues();\n                            self.tryLoadStoredOrders();\n                        }\n                        self.draw(true);\n                        self.dispatchEvent('attributechanged', {name: key, value: value[key]});\n                    }\n                });\n            });\n            self.filters.string = function (value, filterFor) {\n                value = String(value);\n                var filterRegExp,\n                    regEnd = /\\/(i|g|m)*$/,\n                    pattern = regEnd.exec(filterFor),\n                    flags = pattern ? pattern[0].substring(1) : '',\n                    flagLength = flags.length;\n                self.invalidFilterRegEx = undefined;\n                if (filterFor.substring(0, 1) === '/' && pattern) {\n                    try {\n                        filterRegExp = new RegExp(filterFor.substring(1, filterFor.length - (flagLength + 1)), flags);\n                    } catch (e) {\n                        self.invalidFilterRegEx = e;\n                        return;\n                    }\n                    return filterRegExp.test(value);\n                }\n                return value.toString ? value.toString().toLocaleUpperCase()\n                    .indexOf(filterFor.toLocaleUpperCase()) !== -1 : false;\n            };\n            self.filters.number = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                return value === filterFor;\n            };\n            ['formatters', 'filters', 'sorters'].forEach(self.initProp);\n            self.reloadStoredValues();\n            if (self.args.data) {\n                self.intf.data = self.args.data;\n            }\n            if (!self.data) {\n                self.intf.data = [];\n            }\n            if (self.args.schema) {\n                self.intf.schema = self.args.schema;\n            }\n            if (self.isChildGrid) {\n                requestAnimationFrame(function () { self.resize(true); });\n            } else {\n                self.resize(true);\n            }\n            return self;\n        };\n        /**\n         * Removes focus from the grid.\n         * @memberof canvasDatagrid\n         * @name blur\n         * @method\n         */\n        self.intf.blur = function (e) {\n            self.hasFocus = false;\n        };\n        /**\n         * Focuses on the grid.\n         * @memberof canvasDatagrid\n         * @name focus\n         * @method\n         */\n        self.intf.focus = function () {\n            self.hasFocus = true;\n            self.controlInput.focus();\n        };\n        Object.defineProperty(self.intf, 'height', {\n            get: function () {\n                if (self.shadowRoot) {\n                    return self.shadowRoot.height;\n                }\n                return self.parentNode.height;\n            },\n            set: function (value) {\n                if (self.shadowRoot) {\n                    self.shadowRoot.height = value;\n                } else {\n                    self.parentNode.height = value;\n                }\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'width', {\n            get: function () {\n                if (self.shadowRoot) {\n                    return self.shadowRoot.width;\n                }\n                return self.parentNode.width;\n            },\n            set: function (value) {\n                if (self.shadowRoot) {\n                    self.shadowRoot.width = value;\n                } else {\n                    self.parentNode.width = value;\n                }\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRowHeights', {\n            get: function () {\n                return self.visibleRowHeights;\n            }\n        });\n        Object.defineProperty(self.intf, 'openChildren', {\n            get: function () {\n                return self.openChildren;\n            }\n        });\n        Object.defineProperty(self.intf, 'childGrids', {\n            get: function () {\n                return Object.keys(self.childGrids).map(function (gridId) {\n                    return self.childGrids[gridId];\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'isChildGrid', {\n            get: function () {\n                return self.isChildGrid;\n            }\n        });\n        Object.defineProperty(self.intf, 'parentNode', {\n            get: function () {\n                return self.parentNode;\n            },\n            set: function (value) {\n                if (!self.isChildGrid) {\n                    throw new TypeError('Cannot set property parentNode which has only a getter');\n                }\n                self.parentNode = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetParent', {\n            get: function () {\n                return self.parentNode;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetLeft', {\n            get: function () {\n                return self.parentNode.offsetLeft;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetTop', {\n            get: function () {\n                return self.parentNode.offsetTop;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollHeight', {\n            get: function () {\n                return self.scrollBox.scrollHeight;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollWidth', {\n            get: function () {\n                return self.scrollBox.scrollWidth;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollTop', {\n            get: function () {\n                return self.scrollBox.scrollTop;\n            },\n            set: function (value) {\n                self.scrollBox.scrollTop = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollLeft', {\n            get: function () {\n                return self.scrollBox.scrollLeft;\n            },\n            set: function (value) {\n                self.scrollBox.scrollLeft = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'sizes', {\n            get: function () {\n                return self.sizes;\n            }\n        });\n        Object.defineProperty(self.intf, 'input', {\n            get: function () {\n                return self.input;\n            }\n        });\n        Object.defineProperty(self.intf, 'controlInput', {\n            get: function () {\n                return self.controlInput;\n            }\n        });\n        Object.defineProperty(self.intf, 'currentCell', {\n            get: function () {\n                return self.currentCell;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleCells', {\n            get: function () {\n                return self.visibleCells;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRows', {\n            get: function () {\n                return self.visibleRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'selections', {\n            get: function () {\n                return self.selections;\n            }\n        });\n        Object.defineProperty(self.intf, 'dragMode', {\n            get: function () {\n                return self.dragMode;\n            }\n        });\n        Object.defineProperty(self.intf, 'changes', {\n            get: function () {\n                return self.changes;\n            }\n        });\n        self.intf.formatters = self.formatters;\n        self.normalizeDataset = function (data, callback) {\n            var i, d, max, syncFnInvoked;\n            if (data === null || data === '' || data === undefined) {\n                return callback([]);\n            }\n            if (typeof data === 'string'\n                    || typeof data === 'number'\n                    || typeof data === 'boolean') {\n                data = [{'0': data}];\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if ((!Array.isArray(data[0]) && typeof data[0] === 'object' && data[0] !== null)\n                            || (Array.isArray(data) && data.length === 0)) {\n                return callback(data);\n            }\n            if (typeof data === 'function') {\n                i = data.apply(self.intf, [function (d) {\n                    if (syncFnInvoked) {\n                        console.warn('Detected a callback to the data setter function after the same function already returned a value synchronously.');\n                    }\n                    self.normalizeDataset(d, callback);\n                }]);\n                if (i) {\n                    syncFnInvoked = true;\n                    self.normalizeDataset(i, callback);\n                }\n                return;\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if (Array.isArray(data)) {\n                if (!Array.isArray(data[0])) {\n                    //array of something?  throw it all into 1 row!\n                    data = [data];\n                }\n                // find the longest length\n                max = 0;\n                d = [];\n                data.forEach(function (row) {\n                    max = Math.max(max, row.length);\n                });\n                // map against length indexes\n                data.forEach(function (row, index) {\n                    var x;\n                    d[index] = {};\n                    for (x = 0; x < max; x += 1) {\n                        d[index][x] = row[x];\n                    }\n                });\n                return callback(d);\n            }\n            throw new Error('Unsupported data type.  Must be an array of arrays or an array of objects, function or string.');\n        };\n        self.eventNames.forEach(function (eventName) {\n            Object.defineProperty(self.intf, 'on' + eventName, {\n                get: function () {\n                    return self.componentL1Events[eventName];\n                },\n                set: function (value) {\n                    self.events[eventName] = [];\n                    self.componentL1Events[eventName] = value;\n                    if (!value) { return; }\n                    self.addEventListener(eventName, value);\n                }\n            });\n        });\n        Object.defineProperty(self.intf, 'frozenRow', {\n            get: function () {\n                return self.frozenRow;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.visibleRows.length > val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible rows.');\n                }\n                self.frozenRow = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'frozenColumn', {\n            get: function () {\n                return self.frozenColumn;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.getVisibleSchema().length > val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible columns.');\n                }\n                self.frozenColumn = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollIndexRect', {\n            get: function () {\n                return {\n                    top: self.scrollIndexTop,\n                    right: self.scrollIndexRight,\n                    bottom: self.scrollIndexBottom,\n                    left: self.scrollIndexLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollPixelRect', {\n            get: function () {\n                return {\n                    top: self.scrollPixelTop,\n                    right: self.scrollPixelRight,\n                    bottom: self.scrollPixelBottom,\n                    left: self.scrollPixelLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'selectionBounds', {\n            get: function () {\n                return self.getSelectionBounds();\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedRows', {\n            get: function () {\n                return self.getSelectedData(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedCells', {\n            get: function () {\n                return self.getSelectedData();\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleSchema', {\n            get: function () {\n                return self.getVisibleSchema().map(function eachDataRow(col) {\n                    return col;\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'ctx', {\n            get: function () {\n                return self.ctx;\n            }\n        });\n        Object.defineProperty(self.intf, 'schema', {\n            get: function schemaGetter() {\n                return self.getSchema();\n            },\n            set: function schemaSetter(value) {\n                if (!Array.isArray(value) || typeof value[0] !== 'object') {\n                    throw new Error('Schema must be an array of objects.');\n                }\n                if (value[0].name === undefined) {\n                    throw new Error('Expected schema to contain an object with at least a name property.');\n                }\n                self.schema = value.map(function eachSchemaColumn(column, index) {\n                    column.width = column.width || self.style.cellWidth;\n                    column[self.uniqueId] = self.getSchemaNameHash(column.name);\n                    column.filter = column.filter || self.filter(column.type);\n                    column.type = column.type || 'string';\n                    column.index = index;\n                    column.columnIndex = index;\n                    column.rowIndex = -1;\n                    return column;\n                });\n                self.tempSchema = undefined;\n                self.createNewRowData();\n                self.createColumnOrders();\n                self.tryLoadStoredOrders();\n                self.resize(true);\n                self.dispatchEvent('schemachanged', {schema: self.schema});\n            }\n        });\n        Object.defineProperty(self.intf, 'data', {\n            get: function dataGetter() {\n                return self.data.map(function (row) {\n                    delete row[self.uniqueId];\n                    return row;\n                });\n            },\n            set: function dataSetter(value) {\n                self.normalizeDataset(value, function (d) {\n                    self.originalData = d.map(function eachDataRow(row) {\n                        row[self.uniqueId] = self.uId;\n                        self.uId += 1;\n                        return row;\n                    });\n                    self.changes = [];\n                    //TODO apply filter to incoming dataset\n                    self.data = self.originalData;\n                    if (!self.schema) {\n                        self.tempSchema = self.getSchemaFromData();\n                    }\n                    if (!self.schema && self.data.length === 0) {\n                        self.tempSchema = [{name: ''}];\n                        self.tempSchema[0][self.uniqueId] = self.getSchemaNameHash('');\n                    }\n                    if (self.tempSchema && !self.schema) {\n                        self.createColumnOrders();\n                        self.tryLoadStoredOrders();\n                        self.dispatchEvent('schemachanged', {schema: self.tempSchema});\n                    }\n                    self.createNewRowData();\n                    if (self.attributes.autoResizeColumns && self.data.length > 0\n                            && self.storedSettings === undefined) {\n                        self.autosize();\n                    }\n                    self.fitColumnToValues('cornerCell', true);\n                    self.resize(true);\n                    self.createRowOrders();\n                    self.tryLoadStoredOrders();\n                    self.dispatchEvent('datachanged', {data: self.data});\n                });\n            }\n        });\n        self.initScrollBox = function () {\n            var sHeight = 0,\n                sWidth = 0,\n                scrollTop = 0,\n                scrollLeft = 0,\n                scrollHeight = 0,\n                scrollWidth = 0,\n                scrollBoxHeight = 20,\n                scrollBoxWidth = 20;\n            function setScrollTop(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollTop value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollHeight) {\n                    value = scrollHeight;\n                }\n                if (scrollHeight < 0) {\n                    value = 0;\n                }\n                scrollTop = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            function setScrollLeft(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollLeft value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollWidth) {\n                    value = scrollWidth;\n                }\n                if (scrollWidth < 0) {\n                    value = 0;\n                }\n                scrollLeft = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            self.scrollBox.toString = function () {\n                return '{\"width\": ' + scrollWidth\n                    + ', \"height\": ' + scrollHeight\n                    + ', \"left\": ' + scrollLeft\n                    + ', \"top\": ' + scrollTop + '}';\n            };\n            self.scrollBox.scrollTo = function (x, y, supressDrawEvent) {\n                setScrollLeft(x, true);\n                setScrollTop(y, supressDrawEvent);\n            };\n            Object.defineProperty(self.scrollBox, 'scrollBoxHeight', {\n                get: function () {\n                    return scrollBoxHeight;\n                },\n                set: function (value) {\n                    scrollBoxHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollBoxWidth', {\n                get: function () {\n                    return scrollBoxWidth;\n                },\n                set: function (value) {\n                    scrollBoxWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'height', {\n                get: function () {\n                    return sHeight;\n                },\n                set: function (value) {\n                    if (scrollHeight < value) {\n                        scrollTop = 0;\n                    }\n                    sHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'width', {\n                get: function () {\n                    return sWidth;\n                },\n                set: function (value) {\n                    sWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollTop', {\n                get: function () {\n                    return scrollTop;\n                },\n                set: setScrollTop\n            });\n            Object.defineProperty(self.scrollBox, 'scrollLeft', {\n                get: function () {\n                    return scrollLeft;\n                },\n                set: setScrollLeft\n            });\n            Object.defineProperty(self.scrollBox, 'scrollHeight', {\n                get: function () {\n                    return scrollHeight;\n                },\n                set: function (value) {\n                    if (scrollTop > value) {\n                        scrollTop = Math.max(value, 0);\n                    }\n                    if (scrollHeight < sHeight) {\n                        scrollTop = 0;\n                    }\n                    scrollHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollWidth', {\n                get: function () {\n                    return scrollWidth;\n                },\n                set: function (value) {\n                    if (scrollLeft > value) {\n                        scrollLeft = Math.max(value, 0);\n                    }\n                    scrollWidth = value;\n                }\n            });\n        };\n        return;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false, Event: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var zIndexTop = 9000, hoverScrollTimeout, autoCompleteContext;\n        function applyContextItemStyle(contextItemContainer) {\n            self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item' + (self.mobile ? '-mobile' : ''));\n            contextItemContainer.addEventListener('mouseover', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n            });\n            contextItemContainer.addEventListener('mouseout', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n            });\n        }\n        function createContextMenu(ev, pos, items, parentContextMenu) {\n            var container = document.createElement('div'),\n                upArrow = document.createElement('div'),\n                downArrow = document.createElement('div'),\n                children = [],\n                selectedIndex = -1,\n                intf = {},\n                rect;\n            if (!Array.isArray(items)) { throw new Error('createContextMenu expects an array.'); }\n            function createItems() {\n                items.forEach(function (item) {\n                    var contextItemContainer = document.createElement('div'),\n                        childMenuArrow;\n                    function removeChildContext(e) {\n                        if (e.relatedTarget === container\n                                || item.contextMenu.container === e.relatedTarget\n                                || childMenuArrow === e.relatedTarget\n                                || (contextItemContainer === e.relatedTarget)\n                                || item.contextMenu.container.contains(e.relatedTarget)\n                                ) { return; }\n                        item.contextMenu.dispose();\n                        children.splice(children.indexOf(item.contextMenu), 1);\n                        item.contextMenu = undefined;\n                        contextItemContainer.removeEventListener('mouseout', removeChildContext);\n                        container.removeEventListener('mouseout', removeChildContext);\n                        contextItemContainer.setAttribute('contextOpen', '0');\n                        contextItemContainer.setAttribute('opening', '0');\n                    }\n                    function contextAddCallback(items) {\n                        // check yet again if the user hasn't moved off\n                        if (contextItemContainer.getAttribute('opening') !== '1' ||\n                                contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        var cPos = contextItemContainer.getBoundingClientRect();\n                        cPos = {\n                            left: cPos.left + self.style.childContextMenuMarginLeft + container.offsetWidth,\n                            top: cPos.top + self.style.childContextMenuMarginTop,\n                            bottom: cPos.bottom,\n                            right: cPos.right\n                        };\n                        item.contextMenu = createContextMenu(ev, cPos, items, intf);\n                        contextItemContainer.setAttribute('contextOpen', '1');\n                        contextItemContainer.addEventListener('mouseout', removeChildContext);\n                        container.addEventListener('mouseout', removeChildContext);\n                        children.push(item.contextMenu);\n                    }\n                    function createChildContext() {\n                        var i;\n                        if (contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        contextItemContainer.setAttribute('opening', '1');\n                        if (typeof item.items === 'function') {\n                            i  = item.items.apply(intf, [function (items) {\n                                contextAddCallback(items);\n                            }]);\n                            if (i !== undefined && Array.isArray(i)) {\n                                contextAddCallback(i);\n                            }\n                            return;\n                        }\n                        contextAddCallback(item.items);\n                    }\n                    function addItem(item) {\n                        function addContent(content) {\n                            if (content === null) { return; }\n                            if (typeof content === 'function') {\n                                return addContent(content(ev));\n                            }\n                            if (typeof content === 'object') {\n                                contextItemContainer.appendChild(content);\n                                return;\n                            }\n                            applyContextItemStyle(contextItemContainer);\n                            contextItemContainer.innerHTML = content;\n                            return;\n                        }\n                        addContent(item.title);\n                        item.contextItemContainer = contextItemContainer;\n                        if ((item.items && item.items.length > 0) || typeof item.items === 'function') {\n                            childMenuArrow = document.createElement('div');\n                            self.createInlineStyle(childMenuArrow, 'canvas-datagrid-context-child-arrow');\n                            childMenuArrow.innerHTML = self.style.childContextMenuArrowHTML;\n                            contextItemContainer.appendChild(childMenuArrow);\n                            contextItemContainer.addEventListener('mouseover', createChildContext);\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                contextItemContainer.setAttribute('opening', '0');\n                            });\n                        }\n                        if (item.click) {\n                            contextItemContainer.addEventListener('click', function (ev) {\n                                item.click.apply(self, [ev]);\n                            });\n                        }\n                    }\n                    addItem(item);\n                    container.appendChild(contextItemContainer);\n                });\n            }\n            function clickIndex(idx) {\n                items[idx].contextItemContainer.dispatchEvent(new Event('click'));\n            }\n            function checkArrowVisibility() {\n                if (container.scrollTop > 0) {\n                    self.parentDOMNode.appendChild(upArrow);\n                } else if (upArrow.parentNode) {\n                    upArrow.parentNode.removeChild(upArrow);\n                }\n                if (container.scrollTop >= container.scrollHeight - container.offsetHeight && downArrow.parentNode) {\n                    downArrow.parentNode.removeChild(downArrow);\n                } else if (container.scrollHeight - container.offsetHeight > 0\n                        && !(container.scrollTop >= container.scrollHeight - container.offsetHeight)) {\n                    self.parentDOMNode.appendChild(downArrow);\n                }\n            }\n            function startHoverScroll(type) {\n                return function t() {\n                    var a = self.attributes.contextHoverScrollAmount;\n                    if (type === 'up' && container.scrollTop === 0) { return; }\n                    if (type === 'down' && container.scrollTop === container.scrollHeight) { return; }\n                    container.scrollTop += (type === 'up' ? -a : a);\n                    hoverScrollTimeout = setTimeout(t, self.attributes.contextHoverScrollRateMs, type);\n                };\n            }\n            function endHoverScroll(type) {\n                return function () {\n                    clearTimeout(hoverScrollTimeout);\n                };\n            }\n            function init() {\n                var loc = {},\n                    s = self.scrollOffset(self.canvas);\n                createItems();\n                self.createInlineStyle(container, 'canvas-datagrid-context-menu' + (self.mobile ? '-mobile' : ''));\n                loc.x = pos.left - s.left;\n                loc.y = pos.top - s.top;\n                loc.height = 0;\n                zIndexTop += 1;\n                container.style.position = 'absolute';\n                upArrow.style.color = self.style.contextMenuArrowColor;\n                downArrow.style.color = self.style.contextMenuArrowColor;\n                [upArrow, downArrow].forEach(function (el) {\n                    el.style.textAlign = 'center';\n                    el.style.position = 'absolute';\n                    el.style.zIndex = zIndexTop + 1;\n                });\n                container.style.zIndex = zIndexTop;\n                if (parentContextMenu && parentContextMenu.inputDropdown) {\n                    container.style.maxHeight = window.innerHeight - loc.y - self.style.autocompleteBottomMargin + 'px';\n                    container.style.minWidth = pos.width + 'px';\n                    loc.y += pos.height;\n                }\n                if (self.mobile) {\n                    container.style.width = pos.width + 'px';\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                container.addEventListener('scroll', checkArrowVisibility);\n                container.addEventListener('wheel', function (e) {\n                    if (self.hasFocus) {\n                        container.scrollTop += e.deltaY;\n                        container.scrollLeft += e.deltaX;\n                    }\n                    checkArrowVisibility();\n                });\n                upArrow.innerHTML = self.style.contextMenuArrowUpHTML;\n                downArrow.innerHTML = self.style.contextMenuArrowDownHTML;\n                container.appendChild(upArrow);\n                document.body.appendChild(downArrow);\n                document.body.appendChild(container);\n                rect = container.getBoundingClientRect();\n                if (rect.bottom > window.innerHeight && !(parentContextMenu && parentContextMenu.inputDropdown)) {\n                    loc.y = window.innerHeight - container.offsetHeight;\n                    if (loc.y < 0) { loc.y = 0; }\n                    if (container.offsetHeight > window.innerHeight - self.style.contextMenuWindowMargin) {\n                        container.style.height = window.innerHeight - self.style.contextMenuWindowMargin + 'px';\n                        loc.y += self.style.contextMenuWindowMargin * 0.5;\n                    }\n                }\n                if (rect.right > window.innerWidth) {\n                    if (parentContextMenu && parentContextMenu.container) {\n                        loc.x = parentContextMenu.container.offsetLeft - container.offsetWidth;\n                    } else {\n                        loc.x = window.innerWidth - container.offsetWidth;\n                    }\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                rect = container.getBoundingClientRect();\n                upArrow.style.top = rect.top + 'px';\n                downArrow.style.top = rect.top + rect.height - downArrow.offsetHeight + 'px';\n                upArrow.style.left = rect.left + 'px';\n                downArrow.style.left = rect.left + 'px';\n                downArrow.style.width = container.offsetWidth + 'px';\n                upArrow.style.width = container.offsetWidth + 'px';\n                downArrow.addEventListener('mouseover', startHoverScroll('down'));\n                downArrow.addEventListener('mouseout', endHoverScroll('down'));\n                upArrow.addEventListener('mouseover', startHoverScroll('up'));\n                upArrow.addEventListener('mouseout', endHoverScroll('up'));\n                checkArrowVisibility();\n            }\n            intf.parentGrid = self.intf;\n            intf.parentContextMenu = parentContextMenu;\n            intf.container = container;\n            init();\n            intf.clickIndex = clickIndex;\n            intf.rect = rect;\n            intf.items = items;\n            intf.upArrow = upArrow;\n            intf.downArrow = downArrow;\n            intf.dispose = function () {\n                clearTimeout(hoverScrollTimeout);\n                children.forEach(function (c) {\n                    c.dispose();\n                });\n                [downArrow, upArrow, container].forEach(function (el) {\n                    if (el.parentNode) { el.parentNode.removeChild(el); }\n                });\n            };\n            Object.defineProperty(intf, 'selectedIndex', {\n                get: function () {\n                    return selectedIndex;\n                },\n                set: function (value) {\n                    if (typeof value !== 'number' || isNaN(value || !isFinite(value))) {\n                        throw new Error('Context menu selected index must be a sane number.');\n                    }\n                    selectedIndex = value;\n                    if (selectedIndex > items.length - 1) {\n                        selectedIndex = items.length - 1;\n                    }\n                    if (selectedIndex < 0) {\n                        selectedIndex = 0;\n                    }\n                    items.forEach(function (item, index) {\n                        if (index === selectedIndex) {\n                            return self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                        }\n                        self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item');\n                    });\n                }\n            });\n            return intf;\n        }\n        function createFilterContextMenuItems(e) {\n            var filterContainer = document.createElement('div'),\n                filterLabel = document.createElement('div'),\n                filterAutoCompleteButton = document.createElement('button'),\n                filterInput = document.createElement('input'),\n                n = e.cell && e.cell.header ? e.cell.header.title || e.cell.header.name : '',\n                autoCompleteItems,\n                iRect;\n            function checkRegExpErrorState() {\n                filterInput.style.background = self.style.contextFilterInputBackground;\n                filterInput.style.color = self.style.contextFilterInputColor;\n                if (self.invalidFilterRegEx) {\n                    filterInput.style.background = self.style.contextFilterInvalidRegExpBackground;\n                    filterInput.style.color = self.style.contextFilterInvalidRegExpColor;\n                }\n            }\n            function fillAutoComplete() {\n                var count = 0;\n                autoCompleteItems = {};\n                self.data.forEach(function (row) {\n                    var value = row[e.cell.header.name];\n                    if (autoCompleteItems[value] || count > self.attributes.maxAutoCompleteItems) { return; }\n                    count += 1;\n                    autoCompleteItems[value] = {\n                        title: self.formatters[e.cell.header.type || 'string']({ cell: { value: value }}),\n                        click: function (e) {\n                            filterInput.value = value;\n                            e.stopPropagation();\n                            filterInput.dispatchEvent(new Event('keyup'));\n                            self.disposeAutocomplete();\n                            return;\n                        }\n                    };\n                });\n                autoCompleteItems = Object.keys(autoCompleteItems).map(function (key) {\n                    return autoCompleteItems[key];\n                });\n            }\n            function createAutoCompleteContext(ev) {\n                if (ev && [40, 38, 13, 9].indexOf(ev.keyCode) !== -1) { return; }\n                fillAutoComplete();\n                iRect = filterInput.getBoundingClientRect();\n                if (autoCompleteContext) {\n                    autoCompleteContext.dispose();\n                    autoCompleteContext = undefined;\n                }\n                autoCompleteContext = createContextMenu(e, {\n                    left: iRect.left,\n                    top: iRect.top,\n                    right: iRect.right,\n                    bottom: iRect.bottom,\n                    height: iRect.height,\n                    width: iRect.width\n                }, autoCompleteItems, {inputDropdown: true});\n                autoCompleteContext.selectedIndex = 0;\n            }\n            self.createInlineStyle(filterLabel, 'canvas-datagrid-context-menu-label');\n            self.createInlineStyle(filterAutoCompleteButton, 'canvas-datagrid-context-menu-filter-button');\n            self.createInlineStyle(filterInput, 'canvas-datagrid-context-menu-filter-input');\n            checkRegExpErrorState();\n            filterInput.onclick = self.disposeAutocomplete;\n            filterInput.addEventListener('keydown', function (e) {\n                //down\n                if (e.keyCode === 40) {\n                    autoCompleteContext.selectedIndex += 1;\n                }\n                //up\n                if (e.keyCode === 38) {\n                    autoCompleteContext.selectedIndex -= 1;\n                }\n                //enter\n                if (e.keyCode === 13) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    self.disposeContextMenu();\n                }\n                //tab\n                if (e.keyCode === 9) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    e.preventDefault();\n                }\n                //esc\n                if (e.keyCode === 27) {\n                    self.disposeContextMenu();\n                }\n            });\n            filterInput.addEventListener('keyup', function () {\n                self.setFilter(e.cell.header.name, filterInput.value);\n            });\n            filterInput.addEventListener('keyup', createAutoCompleteContext);\n            ['focus', 'blur', 'keydown', 'keyup', 'change'].forEach(function (en) {\n                filterInput.addEventListener(en, checkRegExpErrorState);\n            });\n            filterInput.value = e.cell.header ? self.columnFilters[e.cell.header.name] || '' : '';\n            filterLabel.innerHTML = self.attributes.filterOptionText.replace(/%s/g, n);\n            filterAutoCompleteButton.onclick = function () {\n                if (autoCompleteContext) {\n                    return self.disposeAutocomplete();\n                }\n                createAutoCompleteContext();\n            };\n            filterAutoCompleteButton.innerHTML = self.style.contextFilterButtonHTML;\n            filterContainer.addEventListener('click', function (e) {\n                return e.stopPropagation();\n            });\n            filterContainer.appendChild(filterLabel);\n            filterContainer.appendChild(filterInput);\n            filterContainer.appendChild(filterAutoCompleteButton);\n            e.items.push({\n                title: filterContainer\n            });\n            if (Object.keys(self.columnFilters).length) {\n                Object.keys(self.columnFilters).forEach(function (cf) {\n                    var h = self.getHeaderByName(cf);\n                    e.items.push({\n                        title: self.attributes.removeFilterOptionText.replace(/%s/g, h.title || h.name),\n                        click: function removeFilterClick(e) {\n                            e.preventDefault();\n                            self.setFilter(cf, '');\n                            self.controlInput.focus();\n                        }\n                    });\n                });\n            }\n        }\n        function addDefaultContextMenuItem(e) {\n            var isNormalCell = !(e.cell.isBackground || e.cell.isHeaderCellCap\n                    || e.cell.isScrollBar || e.cell.isCorner || e.cell.isRowHeader)\n                    && e.cell.header;\n            if (self.attributes.showFilter && isNormalCell) {\n                createFilterContextMenuItems(e);\n            }\n            if (self.attributes.showCopy\n                    && self.selections.reduce(function (p, r) {\n                        return p + r.length;\n                    }, 0) > 0) {\n                e.items.push({\n                    title: self.attributes.copyText,\n                    click: function () {\n                        document.execCommand('copy');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.showPaste && self.clipBoardData) {\n                e.items.push({\n                    title: self.attributes.pasteText,\n                    click: function () {\n                        self.paste(self.clipBoardData, e.cell.columnIndex, e.cell.rowIndex);\n                        self.draw();\n                    }\n                });\n            }\n            if (self.attributes.showColumnSelector) {\n                e.items.push({\n                    title: self.attributes.columnSelectorText,\n                    items: function () {\n                        var d = [];\n                        self.getSchema().forEach(function (column) {\n                            if (column.name === self.uniqueId) { return; }\n                            function toggleColumnVisibility(e) {\n                                column.hidden = !column.hidden;\n                                e.preventDefault();\n                                self.stopPropagation(e);\n                                self.disposeContextMenu();\n                                self.resize(true);\n                            }\n                            var el = document.createElement('div');\n                            applyContextItemStyle(el);\n                            el.addEventListener('touchstart', toggleColumnVisibility);\n                            el.addEventListener('click', toggleColumnVisibility);\n                            el.innerHTML = (column.hidden ? self.attributes.columnSelectorHiddenText\n                                    : self.attributes.columnSelectorVisibleText)\n                                    + (column.title || column.name);\n                            d.push({\n                                title: el\n                            });\n                        });\n                        return d;\n                    }\n                });\n                if (e.cell && e.cell.header) {\n                    e.items.push({\n                        title: self.attributes.hideColumnText\n                            .replace(/%s/ig, e.cell.header.title || e.cell.header.name),\n                        click: function (ev) {\n                            e.cell.header.hidden = true;\n                            ev.preventDefault();\n                            self.stopPropagation(ev);\n                            self.disposeContextMenu();\n                            setTimeout(function () { self.resize(true); }, 10);\n                        }\n                    });\n                }\n            }\n            if (self.attributes.saveAppearance && self.attributes.showClearSettingsOption\n                    && (Object.keys(self.sizes.rows).length > 0\n                        || Object.keys(self.sizes.columns).length > 0)) {\n                e.items.push({\n                    title: self.attributes.clearSettingsOptionText,\n                    click: function (e) {\n                        e.preventDefault();\n                        self.sizes.rows = {};\n                        self.sizes.columns = {};\n                        self.createRowOrders();\n                        self.createColumnOrders();\n                        self.storedSettings = undefined;\n                        self.dispatchEvent('resizecolumn', {columnWidth: self.style.cellWidth});\n                        self.dispatchEvent('resizerow', {cellHeight: self.style.cellHeight});\n                        self.setStorageData();\n                        self.resize(true);\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.allowSorting && self.attributes.showOrderByOption && isNormalCell) {\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextAsc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'asc');\n                        self.controlInput.focus();\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextDesc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'desc');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n        }\n        self.disposeAutocomplete = function () {\n            if (autoCompleteContext) {\n                autoCompleteContext.dispose();\n                autoCompleteContext = undefined;\n            }\n        };\n        self.disposeContextMenu = function () {\n            document.removeEventListener('click', self.disposeContextMenu);\n            zIndexTop = 9000;\n            self.disposeAutocomplete();\n            if (self.contextMenu) {\n                self.contextMenu.dispose();\n            }\n            self.contextMenu = undefined;\n        };\n        self.contextmenuEvent = function (e, overridePos) {\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            function createDiposeEvent() {\n                requestAnimationFrame(function () {\n                    document.addEventListener('click', self.disposeContextMenu);\n                    document.removeEventListener('mouseup', createDiposeEvent);\n                });\n            }\n            var contextPosition,\n                items = [],\n                pos = overridePos || self.getLayerPos(e),\n                ev = {\n                    NativeEvent: e,\n                    cell: self.getCellAt(pos.x, pos.y),\n                    items: items\n                },\n                st,\n                sl;\n            if (!ev.cell.isGrid) {\n                addDefaultContextMenuItem(ev);\n            }\n            if (document.scrollingElement) {\n                sl = document.scrollingElement.scrollLeft;\n                st = document.scrollingElement.scrollTop;\n            }\n            if (self.dispatchEvent('contextmenu', ev)) {\n                return;\n            }\n            if (!ev.cell.isGrid) {\n                if (self.contextMenu) {\n                    self.disposeContextMenu();\n                }\n                contextPosition = {\n                    left: pos.x + sl + pos.rect.left + self.style.contextMenuMarginLeft + self.canvasOffsetLeft,\n                    top: pos.y + st + pos.rect.top + self.style.contextMenuMarginTop + self.canvasOffsetTop,\n                    right: ev.cell.width + ev.cell.x + pos.rect.left,\n                    bottom: ev.cell.height + ev.cell.y + pos.rect.top,\n                    height: ev.cell.height,\n                    width: ev.cell.width\n                };\n                if (self.mobile) {\n                    contextPosition.left = self.style.mobileContextMenuMargin + 'px';\n                    contextPosition.width = self.width - (self.style.mobileContextMenuMargin * 2) + 'px';\n                }\n                self.contextMenu = createContextMenu(ev, contextPosition, items);\n                document.addEventListener('mouseup', createDiposeEvent);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        self.getClippingRect = function (ele) {\n            var boundingRect = self.position(self.parentNode),\n                eleRect = self.position(ele),\n                s = self.scrollOffset(self.canvas),\n                clipRect = {\n                    x: 0,\n                    y: 0,\n                    h: 0,\n                    w: 0\n                },\n                parentRect = {\n                    x: -Infinity,\n                    y: -Infinity,\n                    h: Infinity,\n                    w: Infinity\n                },\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth();\n            boundingRect.top -= s.top;\n            boundingRect.left -= s.left;\n            eleRect.top -= s.top;\n            eleRect.left -= s.left;\n            clipRect.h = boundingRect.top + boundingRect.height - ele.offsetTop - self.style.scrollBarWidth;\n            clipRect.w = boundingRect.left + boundingRect.width - ele.offsetLeft - self.style.scrollBarWidth;\n            clipRect.x = boundingRect.left + (eleRect.left * -1) + rowHeaderCellWidth;\n            clipRect.y = boundingRect.top + (eleRect.top * -1) + columnHeaderCellHeight;\n            return {\n                x: clipRect.x > parentRect.x ? clipRect.x : parentRect.x,\n                y: clipRect.y > parentRect.y ? clipRect.y : parentRect.y,\n                h: clipRect.h < parentRect.h ? clipRect.h : parentRect.h,\n                w: clipRect.w < parentRect.w ? clipRect.w : parentRect.w\n            };\n        };\n        self.clipElement = function (ele) {\n            var clipRect = self.getClippingRect(ele);\n            if (clipRect.w < 0) { clipRect.w = 0; }\n            if (clipRect.h < 0) { clipRect.h = 0; }\n            ele.style.clip = 'rect('\n                + clipRect.y + 'px,'\n                + clipRect.w + 'px,'\n                + clipRect.h + 'px,'\n                + clipRect.x + 'px'\n                + ')';\n            // INFO https://developer.mozilla.org/en-US/docs/Web/CSS/clip\n            // clip has been \"deprecated\" for clipPath.  Of course nothing but chrome\n            // supports clip path, so we'll keep using clip until someday clipPath becomes\n            // more widely support.  The code below works correctly, but setting clipPath and clip\n            // at the same time has undesirable results.\n            // ele.style.clipPath = 'polygon('\n            //     + clipRect.x + 'px ' + clipRect.y + 'px,'\n            //     + clipRect.x + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.y + 'px'\n            //     + ')';\n        };\n        self.scrollOffset = function (e) {\n            var x = 0, y = 0;\n            while (e.parentNode && e.nodeName !== 'CANVAS-DATAGRID') {\n                if (e.nodeType !== 'canvas-datagrid-tree'\n                        && e.nodeType !== 'canvas-datagrid-cell') {\n                    x -= e.scrollLeft;\n                    y -= e.scrollTop;\n                }\n                e = e.parentNode;\n            }\n            return {left: x, top: y};\n        };\n        self.resizeEditInput = function () {\n            if (self.input && self.input.editCell) {\n                var pos = self.canvas.getBoundingClientRect(),\n                    s = self.scrollOffset(self.canvas),\n                    bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                    borderWidth = (self.style.cellBorderWidth * bm),\n                    cell = self.getVisibleCellByIndex(self.input.editCell.columnIndex, self.input.editCell.rowIndex)\n                        || {x: -100, y: -100, height: 0, width: 0};\n                if (self.mobile) {\n                    self.input.style.left = '0';\n                    self.input.style.top = (self.height - self.style.mobileEditInputHeight) - borderWidth - 1 + 'px';\n                    self.input.style.height = self.style.mobileEditInputHeight + 'px';\n                    self.input.style.width = self.width - borderWidth - 1 + 'px';\n                    return;\n                }\n                self.input.style.left = pos.left + cell.x + self.canvasOffsetLeft - s.left + 'px';\n                self.input.style.top = pos.top + cell.y - self.style.cellBorderWidth + self.canvasOffsetTop - s.top + 'px';\n                self.input.style.height = cell.height - borderWidth + 'px';\n                self.input.style.width = cell.width - self.style.cellPaddingLeft + 'px';\n                self.clipElement(self.input);\n            }\n        };\n        self.position = function (e, ignoreScrollOffset) {\n            var x = 0, y = 0, s = e, h, w;\n            while (e.offsetParent && e.nodeName !== 'CANVAS-DATAGRID') {\n                x += e.offsetLeft;\n                y += e.offsetTop;\n                h = e.offsetHeight;\n                w = e.offsetWidth;\n                e = e.offsetParent;\n            }\n            if (ignoreScrollOffset) {\n                return {left: x, top: y, height: h, width: w};\n            }\n            e = s;\n            s = self.scrollOffset(e);\n            return { left: x + s.left, top: y + s.top, height: h, width: w };\n        };\n        self.getLayerPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.clientX - rect.left,\n                    y: e.clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        /**\n         * Ends editing, optionally aborting the edit.\n         * @memberof canvasDatagrid\n         * @name endEdit\n         * @method\n         * @param {boolean} abort When true, abort the edit.\n         */\n        self.endEdit = function (abort) {\n            var cell = self.input.editCell,\n                y = cell.rowIndex;\n            function abortEdit() {\n                abort = true;\n            }\n            if (self.dispatchEvent('beforeendedit', {\n                    cell: cell,\n                    newValue: self.input.value,\n                    oldValue: cell.value,\n                    abort: abortEdit,\n                    input: self.input\n                })) { return false; }\n            if (self.input.value !== cell.value && !abort) {\n                self.changes[y] = self.changes[y] || {};\n                self.changes[y][cell.header.name] = self.input.value;\n                cell.data[cell.header.name] = self.input.value;\n                if (y === self.data.length) {\n                    if (self.dispatchEvent('newrow', {\n                            value: self.input.value,\n                            defaultValue: cell.value,\n                            aborted: abort,\n                            cell: cell,\n                            input: self.input\n                        })) { return false; }\n                    self.uId += 1;\n                    self.addRow(cell.data);\n                    self.createNewRowData();\n                }\n                self.draw(true);\n            }\n            document.body.removeChild(self.input);\n            self.intf.focus();\n            self.dispatchEvent('endedit', {\n                cell: cell,\n                value: self.input.value,\n                aborted: abort,\n                input: self.input\n            });\n            self.input = undefined;\n            return true;\n        };\n        /**\n         * Begins editing at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name beginEditAt\n         * @method\n         * @param {number} x The column index of the cell to edit.\n         * @param {number} y The row index of the cell to edit.\n         */\n        self.beginEditAt = function (x, y) {\n            if (!self.attributes.editable) { return; }\n            if (self.input) {\n                self.endEdit();\n            }\n            var cell = self.getVisibleCellByIndex(x, y),\n                s = self.getVisibleSchema(),\n                enumItems,\n                enu,\n                option,\n                valueInEnum;\n            if (!(cell && cell.header)) { return; }\n            //HACK for IE10, does not like literal enum\n            enu = cell.header['enum'];\n            if (self.dispatchEvent('beforebeginedit', {cell: cell})) { return false; }\n            self.scrollIntoView(x, y);\n            self.setActiveCell(x, y);\n            if (enu) {\n                self.input = document.createElement('select');\n            } else {\n                self.input = document.createElement(self.attributes.multiLine\n                    ? 'textarea' : 'input');\n            }\n            cell = self.getVisibleCellByIndex(x, y);\n            //HACK on mobile devices sometimes edit can begin without the cell being in view, I don't know how.\n            if (!cell) { return; }\n            if (enu) {\n                // add enums\n                if (typeof enu === 'function') {\n                    enumItems = enu.apply(self.intf, [{cell: cell}]);\n                } else if (Array.isArray(enu)) {\n                    enumItems = enu;\n                }\n                enumItems.forEach(function (e) {\n                    var i = document.createElement('option'),\n                        val,\n                        title;\n                    if (Array.isArray(e)) {\n                        val = e[0];\n                        title = e[1];\n                    } else {\n                        val = e;\n                        title = e;\n                    }\n                    if (val === cell.value) { valueInEnum = true; }\n                    i.value = val;\n                    i.innerHTML = title;\n                    self.input.appendChild(i);\n                });\n                if (!valueInEnum) {\n                    option = document.createElement('option');\n                    option.value = cell.value;\n                    option.innerHTML = cell.value;\n                    self.input.appendChild(option);\n                }\n                self.input.addEventListener('change', function () {\n                    self.endEdit();\n                    self.draw(true);\n                });\n            }\n            document.body.appendChild(self.input);\n            self.createInlineStyle(self.input, self.mobile ? 'canvas-datagrid-edit-mobile-input' : 'canvas-datagrid-edit-input');\n            self.input.style.position = 'absolute';\n            self.input.editCell = cell;\n            self.resizeEditInput();\n            self.input.style.zIndex = '2';\n            self.input.style.fontSize = (parseInt(self.style.editCellFontSize, 10) * self.scale) + 'px';\n            self.input.value = cell.value;\n            self.input.focus();\n            self.input.addEventListener('click', self.stopPropagation);\n            self.input.addEventListener('dblclick', self.stopPropagation);\n            self.input.addEventListener('mouseup', self.stopPropagation);\n            self.input.addEventListener('mousedown', self.stopPropagation);\n            self.input.addEventListener('keydown', function (e) {\n                var nx = cell.columnIndex,\n                    ny = cell.rowIndex;\n                // esc\n                if (e.keyCode === 27) {\n                    self.endEdit(true);\n                    self.draw(true);\n                // enter\n                } else if (e.keyCode === 13\n                        && (!self.attributes.multiLine\n                            || (self.attributes.multiLine && e.shiftKey))) {\n                    self.endEdit();\n                    self.draw(true);\n                } else if (e.keyCode === 9) {\n                    e.preventDefault();\n                    if (!self.endEdit()) {\n                        return;\n                    }\n                    if (e.shiftKey) {\n                        nx -= 1;\n                    } else {\n                        nx += 1;\n                    }\n                    if (nx < 0) {\n                        nx = s.length - 1;\n                        ny -= 1;\n                    }\n                    if (nx > s.length - 1) {\n                        nx = 0;\n                        ny += 1;\n                    }\n                    if (ny < 0) {\n                        ny = self.data.length - 1;\n                    }\n                    if (ny > self.data.length - 1) {\n                        ny = 0;\n                    }\n                    self.scrollIntoView(nx, ny);\n                    self.beginEditAt(nx, ny);\n                }\n            });\n            self.dispatchEvent('beginedit', {cell: cell, input: self.input});\n        };\n        self.createInlineStyle = function (el, className) {\n            var css = {\n                'canvas-datagrid-context-menu-filter-input': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextFilterInputBackground,\n                    color: self.style.contextFilterInputColor,\n                    border: self.style.contextFilterInputBorder,\n                    borderRadius: self.style.contextFilterInputBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextFilterInputFontFamily,\n                    fontSize: self.style.contextFilterInputFontSize\n                },\n                'canvas-datagrid-context-menu-filter-button': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextFilterButtonBorder,\n                    borderRadius: self.style.contextFilterButtonBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFilterButtonFontFamily,\n                    fontSize: self.style.contextMenuFilterButtonFontSize\n                },\n                'canvas-datagrid-context-child-arrow': {\n                    cssFloat: 'right',\n                    color: self.style.childContextMenuArrowColor,\n                    fontSize: self.style.contextMenuChildArrowFontSize,\n                    fontFamily: self.style.contextMenuFontFamily,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-autocomplete': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    position: 'absolute',\n                    zIndex: 9999,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-autocomplete-item': {\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor\n                },\n                'canvas-datagrid-autocomplete-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-canvas': {\n                    position: 'absolute',\n                    zIndex: '-1'\n                },\n                'canvas-datagrid': {\n                    display: 'block'\n                },\n                'canvas-datagrid-control-input': {\n                    position: 'fixed',\n                    top: '-5px',\n                    left: '-5px',\n                    border: 'none',\n                    opacity: '0',\n                    cursor: 'pointer',\n                    width: '1px',\n                    height: '1px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize\n                },\n                'canvas-datagrid-edit-mobile-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 0',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.mobileEditFontFamily,\n                    fontSize: self.style.mobileEditFontSize,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-edit-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 ' + self.style.editCellPaddingLeft + 'px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.editCellFontFamily,\n                    fontSize: self.style.editCellFontSize,\n                    boxShadow: self.style.editCellBoxShadow,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-context-menu-item-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-context-menu-label': {\n                    margin: self.style.contextMenuLabelMargin,\n                    display: self.style.contextMenuLabelDisplay,\n                    minWidth: self.style.contextMenuLabelMinWidth,\n                    maxWidth: self.style.contextMenuLabelMaxWidth\n                },\n                'canvas-datagrid-context-menu-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-context-menu': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-invalid-search-regExp': {\n                    background: self.style.contextMenuFilterInvalidExpresion\n                }\n            };\n            if (css[className]) {\n                Object.keys(css[className]).map(function (prop) {\n                    el.style[prop] = css[className][prop];\n                });\n            }\n            return;\n        };\n        self.appendTo = function (e) {\n            self.parentNode = e;\n            self.setDom();\n        };\n        self.setDom = function () {\n            if (self.parentNode && /canvas-datagrid-(cell|tree)/.test(self.parentNode.nodeType)) {\n                self.isChildGrid = true;\n                self.parentGrid = self.parentNode.parentGrid;\n                self.ctx = self.parentGrid.context;\n                self.canvas = self.parentGrid.canvas;\n                self.controlInput = self.parentGrid.controlInput;\n                self.eventParent = self.canvas;\n            } else {\n                self.controlInput = self.controlInput || document.createElement('input');\n                self.controlInput.onblur = self.intf.blur;\n                self.createInlineStyle(self.controlInput, 'canvas-datagrid-control-input');\n                self.isChildGrid = false;\n                self.parentDOMNode = self.parentNode;\n                self.parentIsCanvas = /^canvas$/i.test(self.parentDOMNode.tagName);\n                if (self.parentIsCanvas) {\n                    self.canvas = self.parentDOMNode;\n                    self.parentDOMNode.appendChild(self.controlInput);\n                } else {\n                    self.canvas = document.createElement('canvas');\n                    self.parentDOMNode.appendChild(self.canvas);\n                    self.parentDOMNode.appendChild(self.controlInput);\n                }\n                self.createInlineStyle(self.canvas, 'canvas-datagrid');\n                self.ctx = self.canvas.getContext('2d');\n                self.ctx.textBaseline = 'alphabetic';\n                self.eventParent = self.canvas;\n            }\n            self.parentNodeStyle = self.canvas.style;\n            // simulate a block element\n            self.parentNodeStyle.width = '100%';\n            self.parentNodeStyle.height = '100%';\n            self.controlInput.setAttribute('readonly', true);\n            self.controlInput.addEventListener('blur', function (e) {\n                if (e.target !== self.canvas) {\n                    self.hasFocus = false;\n                }\n            });\n            self.eventParent.addEventListener('scroll', self.resize, false);\n            self.eventParent.addEventListener('touchstart', self.touchstart, false);\n            self.eventParent.addEventListener('mouseup', self.mouseup, false);\n            self.eventParent.addEventListener('mousedown', self.mousedown, false);\n            self.eventParent.addEventListener('dblclick', self.dblclick, false);\n            self.eventParent.addEventListener('click', self.click, false);\n            self.eventParent.addEventListener('mousemove', self.mousemove);\n            self.eventParent.addEventListener('wheel', self.scrollWheel, false);\n            self.canvas.addEventListener('contextmenu', self.contextmenuEvent, false);\n            self.controlInput.addEventListener('copy', self.copy);\n            self.controlInput.addEventListener('cut', self.cut);\n            self.controlInput.addEventListener('paste', self.paste);\n            self.controlInput.addEventListener('keypress', self.keypress, false);\n            self.controlInput.addEventListener('keyup', self.keyup, false);\n            self.controlInput.addEventListener('keydown', self.keydown, false);\n            window.addEventListener('resize', self.resize);\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        // all methods here are exposed by intf\n        // to users\n        /**\n         * Converts a integer into a letter A - ZZZZZ...\n         * @memberof canvasDatagrid\n         * @name integerToAlpha\n         * @method\n         * @param {column} n The number to convert.\n         */\n        self.integerToAlpha = function (n) {\n            var ordA = 'a'.charCodeAt(0),\n                ordZ = 'z'.charCodeAt(0),\n                len = ordZ - ordA + 1,\n                s = '';\n            while (n >= 0) {\n                s = String.fromCharCode(n % len + ordA) + s;\n                n = Math.floor(n / len) - 1;\n            }\n            return s;\n        };\n        /**\n         * Inserts a new column before the specified index into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name insertColumn\n         * @method\n         * @param {column} c The column to insert into the schema.\n         * @param {number} index The index of the column to insert before.\n         */\n        self.insertColumn = function (c, index) {\n            var s = self.getSchema();\n            if (s.length < index) {\n                throw new Error('Index is beyond the length of the schema.');\n            }\n            self.validateColumn(c, s);\n            s.splice(index, 0, c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a column from the schema at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteColumn\n         * @tutorial schema\n         * @method\n         * @param {number} index The index of the column to delete.\n         */\n        self.deleteColumn = function (index) {\n            var s = self.getSchema();\n            // remove data matching this column name from data\n            self.data.forEach(function (row) {\n                delete row[s[index].name];\n            });\n            s.splice(index, 1);\n            self.intf.schema = s;\n        };\n        /**\n         * Adds a new column into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name addColumn\n         * @method\n         * @param {column} c The column to add to the schema.\n         */\n        self.addColumn = function (c) {\n            var s = self.getSchema();\n            self.validateColumn(c, s);\n            s.push(c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a row from the dataset at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteRow\n         * @method\n         * @param {number} index The index of the row to delete.\n         */\n        self.deleteRow = function (index) {\n            self.originalData.splice(index, 1);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Inserts a new row into the dataset before the specified index.\n         * @memberof canvasDatagrid\n         * @name insertRow\n         * @method\n         * @param {object} d data.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertRow = function (d, index) {\n            if (self.originalData.length < index) {\n                throw new Error('Index is beyond the length of the dataset.');\n            }\n            self.originalData.splice(index, 0, d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[index], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Adds a new row into the dataset.\n         * @memberof canvasDatagrid\n         * @name addRow\n         * @method\n         * @param {object} d data.\n         */\n        self.addRow = function (d) {\n            self.originalData.push(d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[self.originalData.length - 1], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Sets the height of a given row by index number.\n         * @memberof canvasDatagrid\n         * @name setRowHeight\n         * @method\n         * @param {number} rowIndex The index of the row to set.\n         * @param {number} height Height to set the row to.\n         */\n        self.setRowHeight = function (rowIndex, height) {\n            self.sizes.rows[self.data[rowIndex][self.uniqueId]] = height;\n            self.draw(true);\n        };\n        /**\n         * Sets the width of a given column by index number.\n         * @memberof canvasDatagrid\n         * @name setColumnWidth\n         * @method\n         * @param {number} colIndex The index of the column to set.\n         * @param {number} width Width to set the column to.\n         */\n        self.setColumnWidth = function (colIndex, width) {\n            var s = self.getSchema();\n            self.sizes.columns[s[colIndex][self.uniqueId]] = width;\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the width of the columns due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetColumnWidths\n         * @tutorial schema\n         * @method\n         */\n        self.resetColumnWidths = function () {\n            self.sizes.columns = {};\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the height of the rows due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetRowHeights\n         * @tutorial schema\n         * @method\n         */\n        self.resetRowHeights = function () {\n            self.sizes.rows = {};\n            self.draw(true);\n        };\n        /**\n         * Sets the value of the filter.\n         * @memberof canvasDatagrid\n         * @name setFilter\n         * @method\n         * @param {string} column Name of the column to filter.\n         * @param {string} value The value to filter for.\n         */\n        self.setFilter = function (column, value) {\n            function applyFilter() {\n                self.refreshFromOrigialData();\n                Object.keys(self.columnFilters).forEach(function (filter) {\n                    var header = self.getHeaderByName(column);\n                    if (!header) {\n                        return;\n                    }\n                    self.currentFilter = header.filter || self.filter(column.type || 'string');\n                    self.data = self.data.filter(function (row) {\n                        return self.currentFilter(row[filter], self.columnFilters[filter]);\n                    });\n                });\n                self.resize();\n                self.draw(true);\n            }\n            if (column === undefined && value === undefined) {\n                self.columnFilters = {};\n                return applyFilter();\n            }\n            if (column && (value === '' || value === undefined)) {\n                delete self.columnFilters[column];\n            } else {\n                self.columnFilters[column] = value;\n            }\n            applyFilter();\n        };\n        /**\n         * Returns the number of pixels to scroll down to line up with row rowIndex.\n         * @memberof canvasDatagrid\n         * @name findRowScrollTop\n         * @method\n         * @param {number} rowIndex The row index of the row to scroll find.\n         */\n        self.findRowScrollTop = function (rowIndex) {\n            var top = 0, x = 0, l = self.data.length,\n                bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                cellBorder = self.style.cellBorderWidth * bm;\n            if (!self.attributes.showNewRow) {\n                l -= 1;\n            }\n            if (rowIndex > l) {\n                throw new Error('Impossible row index');\n            }\n            while (x < rowIndex) {\n                top += (self.sizes.rows[self.data[x][self.uniqueId]] || self.style.cellHeight) + cellBorder;\n                x += 1;\n            }\n            //TODO: This is not super accurate, causes pageUp/Dn to not move around right\n            return top - (self.sizes.rows[self.data[rowIndex][self.uniqueId]] || self.style.cellHeight);\n        };\n        /**\n         * Returns the number of pixels to scroll to the left to line up with column columnIndex.\n         * @memberof canvasDatagrid\n         * @name findColumnScrollLeft\n         * @method\n         * @param {number} columnIndex The column index of the column to find.\n         */\n        self.findColumnScrollLeft = function (columnIndex) {\n            var left = 0, y = 0, s = self.getSchema(), l = s.length - 1;\n            if (columnIndex > l) {\n                throw new Error('Impossible column index');\n            }\n            while (y < columnIndex) {\n                left += self.sizes.columns[s[y][self.uniqueId]] || s[y].width || self.style.cellWidth;\n                y += 1;\n            }\n            return left;\n        };\n        /**\n         * Scrolls the cell at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name gotoCell\n         * @method\n         * @param {number} x The column index of the cell to scroll to.\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoCell = function (x, y) {\n            if (x !== undefined) {\n                self.scrollBox.scrollLeft = self.findColumnScrollLeft(x);\n            }\n            if (y !== undefined) {\n                self.scrollBox.scrollTop = self.findRowScrollTop(y);\n            }\n        };\n        /**\n         * Scrolls the row y.\n         * @memberof canvasDatagrid\n         * @name gotoRow\n         * @method\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoRow = function (y) {\n            self.gotoCell(0, y);\n        };\n        /**\n         * Scrolls the cell at cell x, row y into view if it is not already.\n         * @memberof canvasDatagrid\n         * @name scrollIntoView\n         * @method\n         * @param {number} x The column index of the cell to scroll into view.\n         * @param {number} y The row index of the cell to scroll into view.\n         */\n        self.scrollIntoView = function (x, y) {\n            if (self.visibleCells.filter(function (cell) {\n                    return (cell.rowIndex === y || y === undefined)\n                        && (cell.columnIndex === x || x === undefined)\n                        && cell.x > 0\n                        && cell.y > 0\n                        && cell.x + cell.width < self.width\n                        && cell.y + cell.height < self.height;\n                }).length === 0) {\n                self.gotoCell(x, y);\n            }\n        };\n        /**\n         * Sets the active cell. Requires redrawing.\n         * @memberof canvasDatagrid\n         * @name setActiveCell\n         * @method\n         * @param {number} x The column index of the cell to set active.\n         * @param {number} y The row index of the cell to set active.\n         */\n        self.setActiveCell = function (x, y) {\n            self.activeCell = {\n                rowIndex: y,\n                columnIndex: x\n            };\n        };\n        /**\n         * Removes the selection.\n         * @memberof canvasDatagrid\n         * @name selectNone\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectNone = function (dontDraw) {\n            self.selections = [];\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Selects every visible cell.\n         * @memberof canvasDatagrid\n         * @name selectAll\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectAll = function (dontDraw) {\n            self.selectArea({\n                top: 0,\n                left: 0,\n                right: self.getVisibleSchema().length - 1,\n                bottom: self.data.length - 1\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Returns true if the selected columnIndex is selected on every row.\n         * @memberof canvasDatagrid\n         * @name isColumnSelected\n         * @method\n         * @param {number} columnIndex The column index to check.\n         */\n        self.isColumnSelected = function (columnIndex) {\n            var colIsSelected = true;\n            self.data.forEach(function (row, rowIndex) {\n                if (!self.selections[rowIndex] || self.selections[rowIndex].indexOf(self.orders.columns[columnIndex]) === -1) {\n                    colIsSelected = false;\n                }\n            });\n            return colIsSelected;\n        };\n        /**\n         * Runs the defined method on each selected cell.\n         * @memberof canvasDatagrid\n         * @name forEachSelectedCell\n         * @method\n         * @param {number} fn The function to execute.  The signature of the function is: (data, rowIndex, columnName).\n         * @param {number} expandToRow When true the data in the array is expanded to the entire row.\n         */\n        self.forEachSelectedCell = function (fn, expandToRow) {\n            var d = [], s = expandToRow ? self.getSchema() : self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    if (col === -1 || !s[col]) { return; }\n                    fn(self.data, index, s[col].name);\n                });\n            });\n        };\n        /**\n         * Selects a column.\n         * @memberof canvasDatagrid\n         * @name selectColumn\n         * @method\n         * @param {number} columnIndex The column index to select.\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the column.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the column.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectColumn = function (columnIndex, ctrl, shift, supressEvent) {\n            var s, e, x;\n            function addCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) === -1) {\n                        self.selections[rowIndex].push(i);\n                    }\n                });\n            }\n            function removeCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) !== -1) {\n                        self.selections[rowIndex].splice(self.selections[rowIndex].indexOf(i), 1);\n                    }\n                });\n            }\n            if (shift) {\n                if (!self.activeCell) { return; }\n                s = Math.min(self.activeCell.columnIndex, columnIndex);\n                e = Math.max(self.activeCell.columnIndex, columnIndex);\n                for (x = s; e > x; x += 1) {\n                    addCol(x);\n                }\n            }\n            if (!ctrl && !shift) {\n                self.selections = [];\n                self.activeCell.columnIndex = columnIndex;\n                self.activeCell.rowIndex = self.scrollIndexTop;\n            }\n            if (ctrl && self.isColumnSelected(columnIndex)) {\n                removeCol(columnIndex);\n            } else {\n                addCol(columnIndex);\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.getSelectionBounds()\n            });\n        };\n        /**\n         * Selects a row.\n         * @memberof canvasDatagrid\n         * @name selectRow\n         * @method\n         * @param {number} rowIndex The row index to select.\n         * @param {boolean} ctrl When true, behaves as if you were holding control/command when you clicked the row.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the row.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectRow = function (rowIndex, ctrl, shift, supressEvent) {\n            var x, st, en, s = self.getVisibleSchema();\n            function addRow(ri) {\n                self.selections[ri] = [];\n                self.selections[ri].push(-1);\n                s.forEach(function (col, index) {\n                    self.selections[ri].push(index);\n                });\n            }\n            if (self.dragAddToSelection === false || self.dragObject === undefined) {\n                if (self.selections[rowIndex] && self.selections[rowIndex].length - 1 === s.length) {\n                    if (ctrl) {\n                        self.selections[rowIndex] = [];\n                        return;\n                    }\n                }\n            }\n            if (self.dragAddToSelection === true || self.dragObject === undefined) {\n                if (shift && self.dragObject === undefined) {\n                    if (!self.activeCell) { return; }\n                    st = Math.min(self.activeCell.rowIndex, rowIndex);\n                    en = Math.max(self.activeCell.rowIndex, rowIndex);\n                    for (x = st; en >= x; x += 1) {\n                        addRow(x);\n                    }\n                } else {\n                    addRow(rowIndex);\n                }\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Collapse a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name collapseTree\n         * @method\n         * @param {number} index The index of the row to collapse.\n         */\n        self.collapseTree = function (rowIndex) {\n            var rowId = self.data[rowIndex][self.uniqueId];\n            self.dispatchEvent('collapsetree', {\n                childGrid: self.childGrids[rowId],\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId].blur();\n            self.openChildren[rowId].dispose();\n            delete self.openChildren[rowId];\n            delete self.sizes.trees[rowId];\n            delete self.childGrids[rowId];\n            self.dispatchEvent('resizerow', {\n                cellHeight: self.style.cellHeight\n            });\n            self.resize(true);\n            self.draw(true);\n        };\n        /**\n         * Expands a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name expandTree\n         * @method\n         * @param {number} index The index of the row to expand.\n         */\n        self.expandTree = function (rowIndex) {\n            var trArgs = self.args.treeGridAttributes || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth,\n                rowId = self.data[rowIndex][self.uniqueId],\n                h = self.sizes.trees[rowId] || self.style.treeGridHeight,\n                treeGrid;\n            if (!self.childGrids[rowId]) {\n                trArgs.debug = self.attributes.debug;\n                trArgs.name = self.attributes.saveAppearance ? self.attributes.name + 'tree' + rowId : undefined;\n                trArgs.style = trArgs.style || self.style;\n                trArgs.parentNode = {\n                    parentGrid: self.intf,\n                    nodeType: 'canvas-datagrid-tree',\n                    offsetHeight: h,\n                    offsetWidth: self.width - rowHeaderCellWidth,\n                    header: { width: self.width - rowHeaderCellWidth },\n                    offsetLeft: rowHeaderCellWidth,\n                    offsetTop: columnHeaderCellHeight,\n                    offsetParent: self.intf.parentNode,\n                    parentNode: self.intf.parentNode,\n                    style: 'tree',\n                    data: self.data[rowIndex]\n                };\n                treeGrid = self.createGrid(trArgs);\n                self.childGrids[rowId] = treeGrid;\n            }\n            treeGrid = self.childGrids[rowId];\n            treeGrid.visible = true;\n            self.dispatchEvent('expandtree', {\n                treeGrid: treeGrid,\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId] = treeGrid;\n            self.sizes.trees[rowId] = h;\n            self.dispatchEvent('resizerow', {height: self.style.cellHeight});\n            self.resize(true);\n        };\n        /**\n         * Toggles tree grid open and close by row index.\n         * @memberof canvasDatagrid\n         * @name toggleTree\n         * @method\n         * @param {number} index The index of the row to toggle.\n         */\n        self.toggleTree = function (rowIndex) {\n            var i = self.openChildren[self.data[rowIndex][self.uniqueId]];\n            if (i) {\n                return self.collapseTree(rowIndex);\n            }\n            self.expandTree(rowIndex);\n        };\n        /**\n         * Returns a header from the schema by name.\n         * @memberof canvasDatagrid\n         * @name getHeaderByName\n         * @tutorial schema\n         * @method\n         * @returns {header} header with the selected name, or undefined.\n         * @param {string} name The name of the column to resize.\n         */\n        self.getHeaderByName = function (name) {\n            var x, i = self.getSchema();\n            for (x = 0; x < i.length; x += 1) {\n                if (i[x].name === name) {\n                    return i[x];\n                }\n            }\n        };\n        /**\n         * Resizes a column to fit the longest value in the column. Call without a value to resize all columns.\n         * Warning, can be slow on very large record sets (1m records ~3-5 seconds on an i7).\n         * @memberof canvasDatagrid\n         * @name fitColumnToValues\n         * @method\n         * @param {string} name The name of the column to resize.\n         */\n        self.fitColumnToValues = function (name, internal) {\n            if (!self.canvas) { return; }\n            self.sizes.columns[name === 'cornerCell' ? name : self.getHeaderByName(name)[self.uniqueId]]\n                = self.findColumnMaxTextLength(name);\n            if (!internal) {\n                self.resize();\n                self.draw(true);\n            }\n        };\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @overload\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {number} columnIndex The column index of the cell to check.\n         * @param {number} rowIndex The row index of the cell to check.\n         */\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {cell} cell The cell to check for.  Alternatively you can pass an object { x: <x-pixel-value>, y: <y-pixel-value> }.\n         */\n        self.isCellVisible = function (cell, rowIndex) {\n            // overload\n            if (rowIndex !== undefined) {\n                return self.visibleCells.filter(function (c) {\n                    return c.columnIndex === cell && c.rowIndex === rowIndex;\n                }).length > 0;\n            }\n            var x, l = self.visibleCells.length;\n            for (x = 0; x < l; x += 1) {\n                if (cell.x === self.visibleCells[x].x && cell.y === self.visibleCells[x].y) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n         * Sets the order of the data.\n         * @memberof canvasDatagrid\n         * @name order\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} columnName Number of pixels from the left.\n         * @param {string} direction `asc` for ascending or `desc` for descending.\n         * @param {function} [sortFunction] When defined, override the default sorting method defined in the column's schema and use this one.\n         * @param {bool} [dontSetStorageData] Don't store this setting for future use.\n         */\n        self.order = function (columnName, direction, sortFunction, dontSetStorageData) {\n            var f,\n                c = self.getSchema().filter(function (col) {\n                    return col.name === columnName;\n                });\n            self.orderBy = columnName;\n            if (c.length === 0) {\n                throw new Error('Cannot sort.  No such column name');\n            }\n            f = sortFunction || self.sorters[c[0].type];\n            if (!f && c[0].type !== undefined) {\n                console.warn('Cannot sort type \"%s\" falling back to string sort.', c[0].type);\n            }\n            self.data = self.data.sort(typeof f === 'function' ? f(columnName, direction) : self.sorters.string);\n            self.dispatchEvent('ordercolumn', {name: columnName, direction: direction});\n            self.draw(true);\n            if (dontSetStorageData) { return; }\n            self.setStorageData();\n        };\n        self.isInGrid = function (e) {\n            if (e.x < 0\n                    || e.x > self.width\n                    || e.y < 0\n                    || e.y > self.height) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Moves the current selection relative to the its current position.  Note: this method does not move the selected data, just the selection itself.\n         * @memberof canvasDatagrid\n         * @name moveSelection\n         * @method\n         * @param {number} offsetX The number of columns to offset the selection.\n         * @param {number} offsetY The number of rows to offset the selection.\n         */\n        self.moveSelection = function (offsetX, offsetY) {\n            var sel = [];\n            self.selections.forEach(function (row, rowIndex) {\n                sel[rowIndex + offsetY] = [];\n                row.forEach(function (colIndex) {\n                    sel[rowIndex + offsetY].push(colIndex + offsetX);\n                });\n            });\n            self.selections = sel;\n        };\n        /**\n         * Moves data in the provided selection to another position in the grid.  Moving data off the edge of the schema (columns/x) will truncate data.\n         * @memberof canvasDatagrid\n         * @name moveTo\n         * @method\n         * @param {array} sel 2D array representing selected rows and columns.  `canvasDatagrid.selections` is in this format and can be used here.\n         * @param {number} x The column index to start inserting the selection at.\n         * @param {number} y The row index to start inserting the selection at.\n         */\n        self.moveTo = function (sel, x, y) {\n            var d = self.getSelectedData(),\n                s = self.getVisibleSchema(),\n                l = sel.length,\n                xi,\n                yi = y - 1;\n            sel.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) { return; }\n                row.forEach(function (col) {\n                    if (!s[col]) { return; }\n                    self.data[index][s[col].name] = null;\n                });\n            });\n            sel.forEach(function (row, index) {\n                yi += 1;\n                xi = x - 1;\n                row.forEach(function (col, cidx) {\n                    xi += 1;\n                    if (col === -1\n                            || !s[xi]\n                            || !s[col]\n                            || self.data.length - 1 < yi\n                            || yi < 0) { return; }\n                    self.data[yi][s[xi].name] = d[index][s[col].name];\n                });\n            });\n        };\n        /**\n         * Checks if a given column is visible.\n         * @memberof canvasDatagrid\n         * @name isColumnVisible\n         * @method\n         * @returns {boolean} When true, the column is visible.\n         * @param {number} columnIndex Column index.\n         */\n        self.isColumnVisible = function (columnIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === columnIndex;\n            }).length > 0;\n        };\n        /**\n         * Checks if a given row is visible.\n         * @memberof canvasDatagrid\n         * @name isRowVisible\n         * @method\n         * @returns {boolean} When true, the row is visible.\n         * @param {number} rowIndex Row index.\n         */\n        self.isRowVisible = function (rowIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.rowIndex === rowIndex;\n            }).length > 0;\n        };\n        /**\n         * Gets the cell at columnIndex and rowIndex.\n         * @memberof canvasDatagrid\n         * @name getVisibleCellByIndex\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Column index.\n         * @param {number} y Row index.\n         */\n        self.getVisibleCellByIndex = function (x, y) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === x && c.rowIndex === y;\n            })[0];\n        };\n        /**\n         * Gets the cell at grid pixel coordinate x and y.  Author's note.  This function ties drawing and events together.  This is a very complex function and is core to the component.\n         * @memberof canvasDatagrid\n         * @name getCellAt\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Number of pixels from the left.\n         * @param {number} y Number of pixels from the top.\n         */\n        self.getCellAt = function (x, y, useTouchScrollZones) {\n            function getBorder(cell) {\n                if (cell.x + cell.width - (self.attributes.borderResizeZone * 0.4) < x && cell.x + cell.width + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'r';\n                }\n                if (cell.x - (self.attributes.borderResizeZone * 0.4) < x && cell.x + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'l';\n                }\n                if (cell.y + cell.height - (self.attributes.borderResizeZone * 0.4) < y && cell.y + cell.height + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 'b';\n                }\n                if (cell.y - (self.attributes.borderResizeZone * 0.4) < y && cell.y + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 't';\n                }\n            }\n            var border,\n                tsz = useTouchScrollZones ? self.attributes.touchScrollZone : 0,\n                moveMode = self.attributes.borderDragBehavior === 'move',\n                i,\n                l = self.visibleCells.length,\n                moveBorder,\n                xBorderBehavior = moveMode ? self.cursorGrab : 'ew-resize',\n                yBorderBehavior = moveMode ? self.cursorGrab : 'ns-resize',\n                cell;\n            if (!self.visibleCells || !self.visibleCells.length) { return; }\n            self.hasFocus = true;\n            if (!(y < self.height\n                && y > 0\n                && x < self.width\n                && x > 0)) {\n                self.hasFocus = false;\n                return {\n                    dragContext: 'inherit',\n                    context: 'inherit'\n                };\n            }\n            for (i = 0; i < l; i += 1) {\n                cell = self.visibleCells[i];\n                if (useTouchScrollZones && /(vertical|horizontal)-scroll-/.test(cell.style)) {\n                    cell.x -= tsz;\n                    cell.y -= tsz;\n                    cell.height += tsz;\n                    cell.width += tsz;\n                }\n                if (cell.x - self.style.cellBorderWidth < x\n                        && cell.x + cell.width + self.style.cellBorderWidth > x\n                        && cell.y - self.style.cellBorderWidth < y\n                        && cell.y + cell.height + self.style.cellBorderWidth > y) {\n                    if (/frozen-row-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'row-resize';\n                        return cell;\n                    }\n                    if (/frozen-column-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'col-resize';\n                        return cell;\n                    }\n                    if (/selection-handle-/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'crosshair';\n                        return cell;\n                    }\n                    if (/vertical-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'vertical-scroll-box';\n                        cell.context = 'vertical-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isVerticalScrollBar = true;\n                        if (y > self.scrollBox.box.v.y + self.scrollBox.scrollBoxHeight) {\n                            cell.dragContext = 'vertical-scroll-bottom';\n                            cell.context = 'vertical-scroll-bottom';\n                        } else if (y < self.scrollBox.box.v.y) {\n                            cell.dragContext = 'vertical-scroll-top';\n                            cell.context = 'vertical-scroll-top';\n                        }\n                        self.canvas.style.cursor = 'default';\n                        return cell;\n                    }\n                    if (/horizontal-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'horizontal-scroll-box';\n                        cell.context = 'horizontal-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isHorizontalScrollBar = true;\n                        if (x > self.scrollBox.box.h.x + self.scrollBox.scrollBoxWidth) {\n                            cell.dragContext = 'horizontal-scroll-right';\n                            cell.context = 'horizontal-scroll-right';\n                        } else if (x < self.scrollBox.box.h.x) {\n                            cell.dragContext = 'horizontal-scroll-left';\n                            cell.context = 'horizontal-scroll-left';\n                        }\n                        self.canvas.style.cursor = 'default';\n                        return cell;\n                    }\n                    border = getBorder(cell);\n                    // check if the border of this cell is the border of the selection and if so show move cursor in move mode\n                    moveBorder = moveMode && cell.selectionBorder && cell.selectionBorder.indexOf(border) !== -1;\n                    if (['l', 'r'].indexOf(border) !== -1\n                            && (self.attributes.allowColumnResize || moveBorder)\n                            && ((self.attributes.allowColumnResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && ((self.attributes.allowRowHeaderResize && (cell.isRowHeader || cell.isCorner)) || !(cell.isRowHeader && cell.isCorner))) {\n                        if (((cell.isColumnHeader || cell.isCorner) || (self.attributes.allowColumnResizeFromCell && cell.isNormal)) && border === 'r') {\n                            cell.context = 'ew-resize';\n                            cell.dragContext = 'ew-resize';\n                            return cell;\n                        }\n                        if (!(cell.isColumnHeader || cell.isCorner) && moveBorder) {\n                            cell.context = xBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (['t', 'b'].indexOf(border) !== -1\n                            && cell.rowIndex > -1\n                            && (self.attributes.allowRowResize || moveBorder)\n                            && ((self.attributes.allowRowResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && !cell.isColumnHeader) {\n                        if (((cell.isRowHeader || cell.isCorner) || (self.attributes.allowRowResizeFromCell && cell.isNormal)) && border === 'b') {\n                            cell.context = 'ns-resize';\n                            cell.dragContext = 'ns-resize';\n                            return cell;\n                        }\n                        if (!(cell.isRowHeader || cell.isCorner) && moveBorder) {\n                            cell.context = yBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (cell.style === 'columnHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'column-reorder';\n                        return cell;\n                    }\n                    if (cell.style === 'rowHeaderCell') {\n                        if ((self.attributes.rowGrabZoneSize + (cell.y - self.style.cellBorderWidth) < y)\n                                || !self.attributes.allowRowReordering) {\n                            cell.dragContext = 'cell';\n                            cell.context = 'cell';\n                        } else {\n                            cell.context = self.cursorGrab;\n                            cell.dragContext = 'row-reorder';\n                        }\n                        return cell;\n                    }\n                    if (cell.isGrid) {\n                        self.hasFocus = false;\n                        cell.dragContext = 'cell-grid';\n                        cell.context = 'cell-grid';\n                        return cell;\n                    }\n                    if (cell.style === 'tree-grid') {\n                        self.hasFocus = false;\n                        cell.dragContext = 'tree';\n                        cell.context = 'tree';\n                        return cell;\n                    }\n                    cell.dragContext = 'cell';\n                    cell.context = 'cell';\n                    return cell;\n                }\n            }\n            self.hasFocus = true;\n            self.canvas.style.cursor = 'default';\n            return {\n                dragContext: 'background',\n                context: 'background',\n                style: 'background',\n                isBackground: true\n            };\n        };\n        /**\n         * Gets the bounds of current selection. \n         * @returns {rect} selection.\n         * @memberof canvasDatagrid\n         * @name getSelectionBounds\n         * @method\n         */\n        self.getSelectionBounds = function () {\n            var low = {x: Infinity, y: Infinity},\n                high = {x: -Infinity, y: -Infinity};\n            self.data.forEach(function (row, rowIndex) {\n                var maxCol, minCol;\n                if (self.selections[rowIndex] && self.selections[rowIndex].length) {\n                    low.y = rowIndex < low.y ? rowIndex : low.y;\n                    high.y = rowIndex > high.y ? rowIndex : high.y;\n                    maxCol = Math.max.apply(null, self.selections[rowIndex]);\n                    minCol = Math.min.apply(null, self.selections[rowIndex]);\n                    low.x = minCol < low.x ? minCol : low.x;\n                    high.x = maxCol > high.x ? maxCol : high.x;\n                }\n            });\n            return {\n                top: low.y,\n                left: low.x,\n                bottom: high.y,\n                right: high.x\n            };\n        };\n        /**\n         * Returns an auto generated schema based on data structure.\n         * @memberof canvasDatagrid\n         * @name getSchemaFromData\n         * @method\n         * @tutorial schema\n         * @returns {schema} schema A schema based on the first item in the data array.\n         */\n        self.getSchemaFromData = function () {\n            return Object.keys(self.data[0] || {' ': ''}).map(function mapEachSchemaColumn(key, index) {\n                var type = self.getBestGuessDataType(key),\n                    i = {\n                        name: key,\n                        title: isNaN(parseInt(key, 10)) ? key : self.integerToAlpha(key).toUpperCase(),\n                        index: index,\n                        type: type,\n                        filter: self.filter(type)\n                    };\n                if (key === self.uniqueId) {\n                    i.hidden = true;\n                }\n                i[self.uniqueId] = self.getSchemaNameHash(key);\n                return i;\n            });\n        };\n        /**\n         * Clears the change log grid.changes that keeps track of changes to the data set.\n         * This does not undo changes or alter data it is simply a convince array to keep\n         * track of changes made to the data since last this method was called.\n         * @memberof canvasDatagrid\n         * @name clearChangeLog\n         * @method\n         */\n        self.clearChangeLog = function () {\n            self.changes = [];\n        };\n        /**\n         * Selects an area of the grid.\n         * @memberof canvasDatagrid\n         * @name selectArea\n         * @method\n         * @param {rect} bounds A rect object representing the selected values.\n         */\n        self.selectArea = function (bounds, ctrl) {\n            self.selectionBounds = bounds || self.selectionBounds;\n            var x, y, s = self.getSchema();\n            if (!ctrl) {\n                self.selections = [];\n            }\n            if (self.selectionBounds.top < -1\n                    || self.selectionBounds.bottom > self.data.length\n                    || self.selectionBounds.left < -1\n                    || self.selectionBounds.right > s.length) {\n                throw new Error('Impossible selection area');\n            }\n            for (x = self.selectionBounds.top; x <= self.selectionBounds.bottom; x += 1) {\n                self.selections[x] = [];\n                for (y = self.selectionBounds.left; y <= self.selectionBounds.right; y += 1) {\n                    if (self.selections[x].indexOf(y) === -1) {\n                        self.selections[x].push(y);\n                    }\n                }\n            }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Returns the maximum text width for a given column by column name.\n         * @memberof canvasDatagrid\n         * @name findColumnMaxTextLength\n         * @method\n         * @returns {number} The number of pixels wide the maximum width value in the selected column.\n         * @param {string} name The name of the column to calculate the value's width of.\n         */\n        self.findColumnMaxTextLength = function (name) {\n            var m = -Infinity;\n            if (name === 'cornerCell') {\n                self.ctx.font = self.style.rowHeaderCellFont;\n                return self.ctx.measureText((self.data.length + (self.attributes.showNewRow ? 1 : 0)).toString()).width\n                    + self.style.autosizePadding + self.style.autosizeHeaderCellPadding\n                    + self.style.rowHeaderCellPaddingRight\n                    + self.style.rowHeaderCellPaddingLeft\n                    + (self.attributes.tree ? self.style.treeArrowWidth\n                        + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight : 0);\n            }\n            self.getSchema().forEach(function (col) {\n                if (col.name !== name) { return; }\n                self.ctx.font = self.style.columnHeaderCellFont;\n                var t = self.ctx.measureText(col.title || col.name).width\n                    + self.style.headerCellPaddingRight\n                    + self.style.headerCellPaddingLeft;\n                m = t > m ? t : m;\n            });\n            self.data.forEach(function (row) {\n                self.ctx.font = self.style.cellFont;\n                var t = self.ctx.measureText(row[name]).width\n                    + self.style.cellPaddingRight\n                    + self.style.cellPaddingLeft + self.style.cellAutoResizePadding;\n                m = t > m ? t : m;\n            });\n            return m;\n        };\n        /**\n         * Gets the total width of all header columns.\n         * @memberof canvasDatagrid\n         * @name getHeaderWidth\n         * @method\n         */\n        self.getHeaderWidth = function () {\n            return self.getVisibleSchema().reduce(function (total, header) {\n                return total + (header.width || self.style.cellWidth);\n            }, 0);\n        };\n        self.formatters.string = function cellFormatterString(e) {\n            return e.cell.value !== undefined ? e.cell.value : '';\n        };\n        self.formatters.rowHeaderCell = self.formatters.string;\n        self.formatters.headerCell = self.formatters.string;\n        self.formatters.number = self.formatters.string;\n        self.formatters.int = self.formatters.string;\n        self.formatters.html = self.formatters.string;\n        self.sorters.string = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (a[columnName] === undefined || a[columnName] === null) {\n                    return 1;\n                }\n                if (b[columnName] === undefined || b[columnName] === null) {\n                    return 0;\n                }\n                if (asc) {\n                    if (!a[columnName].localeCompare) { return 1; }\n                    return a[columnName].localeCompare(b[columnName]);\n                }\n                if (!b[columnName].localeCompare) { return 1; }\n                return b[columnName].localeCompare(a[columnName]);\n            };\n        };\n        self.sorters.number = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return a[columnName] - b[columnName];\n                }\n                return b[columnName] - a[columnName];\n            };\n        };\n        self.sorters.date = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return new Date(a[columnName]).getTime()\n                        - new Date(b[columnName]).getTime();\n                }\n                return new Date(b[columnName]).getTime()\n                        - new Date(a[columnName]).getTime();\n            };\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// canvas-datagrid.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 4794f79a3c1a8eebc5f3","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.defaults = {\n            attributes: [\n                ['allowColumnReordering', true],\n                ['allowColumnResize', true],\n                ['allowColumnResizeFromCell', false],\n                ['allowFreezingRows', false],\n                ['allowFreezingColumns', false],\n                ['allowMovingSelection', true],\n                ['allowRowHeaderResize', true],\n                ['allowRowReordering', false],\n                ['allowRowResize', true],\n                ['allowRowResizeFromCell', false],\n                ['allowSorting', true],\n                ['autoResizeColumns', false],\n                ['borderDragBehavior', 'none'],\n                ['borderResizeZone', 10],\n                ['clearSettingsOptionText', 'Clear saved settings'],\n                ['columnHeaderClickBehavior', 'sort'],\n                ['columnSelectorHiddenText', '&nbsp;&nbsp;&nbsp;'],\n                ['columnSelectorText', 'Add/Remove columns'],\n                ['columnSelectorVisibleText', '\\u2713'],\n                ['contextHoverScrollAmount', 2],\n                ['contextHoverScrollRateMs', 5],\n                ['copyText', 'Copy'],\n                ['debug', false],\n                ['editable', true],\n                ['filterOptionText', 'Filter %s'],\n                ['filterTextPrefix', '(filtered) '],\n                ['globalRowResize', false],\n                ['hideColumnText', 'Hide %s'],\n                ['maxAutoCompleteItems', 200],\n                ['multiLine', false],\n                ['name', ''],\n                ['pageUpDownOverlap', 1],\n                ['pasteText', 'Paste'],\n                ['persistantSelectionMode', false],\n                ['removeFilterOptionText', 'Remove filter on %s'],\n                ['reorderDeadZone', 3],\n                ['resizeScrollZone', 20],\n                ['rowGrabZoneSize', 5],\n                ['saveAppearance', true],\n                ['scrollAnimationPPSThreshold', 0.75],\n                ['scrollPointerLock', false],\n                ['scrollRepeatRate', 75],\n                ['selectionFollowsActiveCell', false],\n                ['selectionHandleBehavior', 'none'],\n                ['selectionMode', 'cell'],\n                ['selectionScrollIncrement', 20],\n                ['selectionScrollZone', 20],\n                ['showClearSettingsOption', true],\n                ['showColumnHeaders', true],\n                ['showColumnSelector', true],\n                ['showCopy', true],\n                ['showFilter', true],\n                ['showNewRow', false],\n                ['showOrderByOption', true],\n                ['showOrderByOptionTextAsc', 'Order by %s ascending'],\n                ['showOrderByOptionTextDesc', 'Order by %s descending'],\n                ['showPaste', false],\n                ['showPerformance', false],\n                ['showRowHeaders', true],\n                ['showRowNumbers', true],\n                ['snapToRow', false],\n                ['touchContextMenuTimeMs', 800],\n                ['touchDeadZone', 3],\n                ['touchEasingMethod', 'easeOutQuad'],\n                ['touchReleaseAcceleration', 1000],\n                ['touchReleaseAnimationDurationMs', 2000],\n                ['touchScrollZone', 20],\n                ['touchSelectHandleZone', 20],\n                ['touchZoomSensitivity', 0.005],\n                ['touchZoomMin', 0.5],\n                ['touchZoomMax', 1.75],\n                ['tree', false],\n                ['treeHorizontalScroll', false]\n            ],\n            styles: [\n                ['activeCellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['activeCellBorderWidth', 1],\n                ['activeCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellFont', '16px sans-serif'],\n                ['activeCellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['activeCellOverlayBorderWidth', 1],\n                ['activeCellPaddingBottom', 5],\n                ['activeCellPaddingLeft', 5],\n                ['activeCellPaddingRight', 7],\n                ['activeCellPaddingTop', 5],\n                ['activeCellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['activeCellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['activeColumnHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeColumnHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeRowHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeRowHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['autocompleteBottomMargin', 60],\n                ['autosizeHeaderCellPadding', 8],\n                ['autosizePadding', 5],\n                ['cellAutoResizePadding', 13],\n                ['cellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['cellBorderWidth', 1],\n                ['cellColor', 'rgba(0, 0, 0, 1)'],\n                ['cellFont', '16px sans-serif'],\n                ['cellGridHeight', 250],\n                ['cellHeight', 24],\n                ['cellHeightWithChildGrid', 150],\n                ['cellHorizontalAlignment', 'left'],\n                ['cellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['cellPaddingBottom', 5],\n                ['cellPaddingLeft', 5],\n                ['cellPaddingRight', 7],\n                ['cellPaddingTop', 5],\n                ['cellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['cellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['cellVerticalAlignment', 'center'],\n                ['cellWidth', 250],\n                ['cellWidthWithChildGrid', 250],\n                ['childContextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['childContextMenuArrowHTML', '&#x25BA;'],\n                ['childContextMenuMarginLeft', -11],\n                ['childContextMenuMarginTop', -6],\n                ['columnHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellBorderColor', 'rgba(172, 172, 172, 1)'],\n                ['columnHeaderCellBorderWidth', 1],\n                ['columnHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['columnHeaderCellFont', '16px sans-serif'],\n                ['columnHeaderCellHeight', 25],\n                ['columnHeaderCellHorizontalAlignment', 'left'],\n                ['columnHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['columnHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['columnHeaderCellPaddingBottom', 5],\n                ['columnHeaderCellPaddingLeft', 5],\n                ['columnHeaderCellPaddingRight', 7],\n                ['columnHeaderCellPaddingTop', 5],\n                ['columnHeaderCellVerticalAlignment', 'center'],\n                ['columnHeaderOrderByArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['columnHeaderOrderByArrowBorderWidth', 1],\n                ['columnHeaderOrderByArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['columnHeaderOrderByArrowHeight', 8],\n                ['columnHeaderOrderByArrowMarginLeft', 0],\n                ['columnHeaderOrderByArrowMarginRight', 5],\n                ['columnHeaderOrderByArrowMarginTop', 6],\n                ['columnHeaderOrderByArrowWidth', 13],\n                ['contextFilterButtonBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterButtonBorderRadius', '3px'],\n                ['contextFilterButtonHTML', '&#x25BC;'],\n                ['contextFilterInputBackground', 'rgba(255,255,255,1)'],\n                ['contextFilterInputBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterInputBorderRadius', '0'],\n                ['contextFilterInputColor', 'rgba(0,0,0,1)'],\n                ['contextFilterInputFontFamily', 'sans-serif'],\n                ['contextFilterInputFontSize', '14px'],\n                ['contextFilterInvalidRegExpBackground', 'rgba(180, 6, 1, 1)'],\n                ['contextFilterInvalidRegExpColor', 'rgba(255, 255, 255, 1)'],\n                ['contextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuArrowDownHTML', '&#x25BC;'],\n                ['contextMenuArrowUpHTML', '&#x25B2;'],\n                ['contextMenuBackground', 'rgba(240, 240, 240, 1)'],\n                ['contextMenuBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextMenuBorderRadius', '3px'],\n                ['contextMenuChildArrowFontSize', '12px'],\n                ['contextMenuColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuFilterButtonFontFamily', 'sans-serif'],\n                ['contextMenuFilterButtonFontSize', '10px'],\n                ['contextMenuFilterInvalidExpresion', 'rgba(237, 155, 156, 1)'],\n                ['contextMenuFontFamily', 'sans-serif'],\n                ['contextMenuFontSize', '16px'],\n                ['contextMenuHoverBackground', 'rgba(182, 205, 250, 1)'],\n                ['contextMenuHoverColor', 'rgba(43, 48, 153, 1)'],\n                ['contextMenuItemBorderRadius', '3px'],\n                ['contextMenuItemMargin', '2px'],\n                ['contextMenuLabelDisplay', 'inline-block'],\n                ['contextMenuLabelMargin', '0 3px 0 0'],\n                ['contextMenuLabelMaxWidth', '700px'],\n                ['contextMenuLabelMinWidth', '75px'],\n                ['contextMenuMarginLeft', 3],\n                ['contextMenuMarginTop', -3],\n                ['contextMenuOpacity', '0.98'],\n                ['contextMenuPadding', '2px'],\n                ['contextMenuWindowMargin', 100],\n                ['cornerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cornerCellBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['editCellBackgroundColor', 'white'],\n                ['editCellBorder', 'solid 1px rgba(110, 168, 255, 1)'],\n                ['editCellBoxShadow', '0 2px 5px rgba(0,0,0,0.4)'],\n                ['editCellColor', 'black'],\n                ['editCellFontFamily', 'sans-serif'],\n                ['editCellFontSize', '16px'],\n                ['editCellPaddingLeft', 4],\n                ['frozenMarkerHoverColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerHoverBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerActiveColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerActiveBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerColor', 'rgba(222, 222, 222, 1)'],\n                ['frozenMarkerBorderColor', 'rgba(168, 168, 168, 1)'],\n                ['frozenMarkerBorderWidth', 1],\n                ['frozenMarkerWidth', 2],\n                ['gridBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['gridBorderCollapse', 'collapse'],\n                ['gridBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['gridBorderWidth', 1],\n                ['minColumnWidth', 45],\n                ['minRowHeight', 24],\n                ['mobileContextMenuMargin', 10],\n                ['mobileEditInputHeight', 30],\n                ['mobileEditFontFamily', 'sans-serif'],\n                ['mobileEditFontSize', '16px'],\n                ['moveOverlayBorderWidth', 1],\n                ['moveOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['moveOverlayBorderSegments', '12, 7'],\n                ['name', 'default'],\n                ['reorderMarkerBackgroundColor', 'rgba(0, 0, 0, 0.1)'],\n                ['reorderMarkerBorderColor', 'rgba(0, 0, 0, 0.2)'],\n                ['reorderMarkerBorderWidth', 1.25],\n                ['reorderMarkerIndexBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['reorderMarkerIndexBorderWidth', 2.75],\n                ['rowHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['rowHeaderCellBorderColor', 'rgba(200, 200, 200, 1)'],\n                ['rowHeaderCellBorderWidth', 1],\n                ['rowHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellFont', '16px sans-serif'],\n                ['rowHeaderCellHeight', 25],\n                ['rowHeaderCellHorizontalAlignment', 'left'],\n                ['rowHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['rowHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['rowHeaderCellPaddingBottom', 5],\n                ['rowHeaderCellPaddingLeft', 5],\n                ['rowHeaderCellPaddingRight', 5],\n                ['rowHeaderCellPaddingTop', 5],\n                ['rowHeaderCellSelectedBackgroundColor', 'rgba(217, 217, 217, 1)'],\n                ['rowHeaderCellSelectedColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellVerticalAlignment', 'center'],\n                ['rowHeaderCellWidth', 57],\n                ['scrollBarActiveColor', 'rgba(125, 125, 125, 1)'],\n                ['scrollBarBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarBorderWidth', 0.5],\n                ['scrollBarBoxBorderRadius', 4.125],\n                ['scrollBarBoxColor', 'rgba(192, 192, 192, 1)'],\n                ['scrollBarBoxMargin', 2],\n                ['scrollBarBoxMinSize', 15],\n                ['scrollBarBoxWidth', 8],\n                ['scrollBarCornerBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarCornerBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarWidth', 11],\n                ['selectionHandleBorderColor', 'rgba(255, 255, 255, 1)'],\n                ['selectionHandleBorderWidth', 1.5],\n                ['selectionHandleColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionHandleSize', 8],\n                ['selectionHandleType', 'square'],\n                ['selectionOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionOverlayBorderWidth', 1],\n                ['treeArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['treeArrowBorderWidth', 1],\n                ['treeArrowClickRadius', 5],\n                ['treeArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['treeArrowHeight', 8],\n                ['treeArrowMarginLeft', 0],\n                ['treeArrowMarginRight', 5],\n                ['treeArrowMarginTop', 6],\n                ['treeArrowWidth', 13],\n                ['treeGridHeight', 250]\n            ]\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/defaults.js\n// module id = 0\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true, evil: true*/\n/*globals Reflect: false, HTMLElement: true, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([\n    './component',\n    './defaults',\n    './draw',\n    './events',\n    './touch',\n    './intf',\n    './contextMenu',\n    './dom',\n    './publicMethods'\n], function context(component) {\n    'use strict';\n    component = component();\n    var modules = Array.prototype.slice.call(arguments);\n    function Grid(args) {\n        debugger;\n        args = args || {};\n        var self = {};\n        self.isComponent = args.component === undefined;\n        self.intf = self.isComponent ? eval('Reflect.construct(HTMLElement, [], new.target)')\n            : document.createElement('section');\n        self.args = args;\n        self.createGrid = function grid(args) {\n            args.component = false;\n            return new Grid(args);\n        };\n        modules.forEach(function (module) {\n            module(self);\n        });\n        if (self.intf.createShadowRoot) {\n            self.shadowRoot = self.intf.attachShadow({mode: self.args.debug ? 'open' : 'closed'});\n            self.parentNode = self.shadowRoot;\n        } else {\n            self.parentNode = self.intf;\n        }\n        self.init();\n        return self.intf;\n    }\n    if (window.HTMLElement) {\n        Grid.prototype = Object.create(window.HTMLElement.prototype);\n    }\n    // export web component\n    if (window.customElements) {\n        Grid.observedAttributes = component.getObservableAttributes();\n        Grid.prototype.disconnectedCallback = component.disconnectedCallback;\n        Grid.prototype.attributeChangedCallback = component.attributeChangedCallback;\n        Grid.prototype.connectedCallback = component.connectedCallback;\n        Grid.prototype.adoptedCallback = component.adoptedCallback;\n        window.customElements.define('canvas-datagrid', Grid);\n    }\n    // export global\n    if (window && !window.canvasDatagrid && !window.require) {\n        window.canvasDatagrid = function (args) { return new Grid(args); };\n    }\n    // export amd loader\n    module.exports = function grid(args) {\n        args = args || {};\n        var i, tKeys = ['style', 'schema', 'data', 'formatters',\n                    'sorters', 'filters'];\n        if (window.customElements && document.body.createShadowRoot) {\n            i = document.createElement('canvas-datagrid');\n            // create \"block\" element effect\n            i.style.width = '100%';\n            i.style.height = '100%';\n            Object.keys(args).forEach(function (argKey) {\n                if (argKey === 'parentNode') {\n                    args.parentNode.appendChild(i);\n                    return;\n                }\n                // top level keys in args\n                if (tKeys.indexOf(argKey) !== -1) {\n                    tKeys.forEach(function (tKey) {\n                        if (args[tKey] === undefined || tKey !== argKey) { return; }\n                        if (['formatters', 'sorters', 'filters'].indexOf(argKey) !== -1) {\n                            if (typeof args[tKey] === 'object' && args[tKey] !== null) {\n                                Object.keys(args[tKey]).forEach(function (sKey) {\n                                    i[tKey][sKey] = args[tKey][sKey];\n                                });\n                            }\n                        } else {\n                            i[tKey] = args[tKey];\n                        }\n                    });\n                    return;\n                }\n                // all others are attribute level keys\n                i.attributes[argKey] = args[argKey];\n            });\n            return i;\n        }\n        args.component = false;\n        i = new Grid(args);\n        if (args.parentNode && args.parentNode.appendChild) {\n            args.parentNode.appendChild(i);\n        }\n        // create \"block\" element effect\n        i.style.width = '100%';\n        i.style.height = '100%';\n        return i;\n    };\n    return module.exports;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/main.js\n// module id = 1\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine(['./defaults'], function (defaults) {\n    'use strict';\n    return function () {\n        var typeMap, component = {};\n        function hyphenateProperty(prop, cust) {\n            var p = '';\n            Array.prototype.forEach.call(prop, function (char) {\n                if (char === char.toUpperCase()) {\n                    p += '-' + char.toLowerCase();\n                    return;\n                }\n                p += char;\n            });\n            return (cust ? '--cdg-' : '') + p;\n        }\n        function getDefaultItem(base, item) {\n            var i = {},\n                r;\n            defaults(i);\n            r = i.defaults[base].filter(function (i) {\n                return i[0].toLowerCase() === item.toLowerCase()\n                    || hyphenateProperty(i[0]) === item.toLowerCase()\n                    || hyphenateProperty(i[0], true) === item.toLowerCase();\n            })[0];\n            return r;\n        }\n        function applyComponentStyle(supressChangeAndDrawEvents, intf) {\n            var cStyle = window.getComputedStyle(intf, null),\n                defs = {};\n            intf.computedStyle = cStyle;\n            defaults(defs);\n            defs = defs.defaults.styles;\n            defs.forEach(function (def) {\n                var val = cStyle.getPropertyValue(hyphenateProperty(def[0], true));\n                if (val === \"\") {\n                    val = cStyle.getPropertyValue(hyphenateProperty(def[0], false));\n                }\n                if (val !== \"\") {\n                    intf.setStyleProperty(def[0], typeMap[typeof def[1]](val, def[1]));\n                }\n            });\n            requestAnimationFrame(function () { intf.resize(true); });\n            if (!supressChangeAndDrawEvents && intf.dispatchEvent) {\n                intf.dispatchEvent('stylechanged', intf.style);\n            }\n        }\n        typeMap = {\n            data: function (strData) {\n                try {\n                    return JSON.parse(strData);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid data.');\n                }\n            },\n            schema: function (strSchema) {\n                try {\n                    return JSON.parse(strSchema);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid schema attribute.');\n                }\n            },\n            number: function (strNum, def) {\n                var n = parseInt(strNum, 10);\n                return isNaN(n) ? def : n;\n            },\n            boolean: function (strBool) {\n                return (/true/i).test(strBool);\n            },\n            string: function (str) {\n                return str;\n            }\n        };\n        component.getObservableAttributes = function () {\n            var i = {}, attrs = ['data', 'schema', 'style', 'className', 'name'];\n            defaults(i);\n            i.defaults.attributes.forEach(function (attr) {\n                attrs.push(attr[0].toLowerCase());\n            });\n            return attrs;\n        };\n        component.disconnectedCallback = function () {\n            this.connected = false;\n        };\n        component.connectedCallback = function () {\n            var intf = this;\n            intf.connected = true;\n            component.observe(intf);\n            applyComponentStyle(true, intf);\n            intf.resize(true);\n        };\n        component.adoptedCallback = function () {\n            this.resize();\n        };\n        component.attributeChangedCallback = function (attrName, oldVal, newVal) {\n            var tfn, intf = this, def;\n            if (attrName === 'style') {\n                requestAnimationFrame(function () { applyComponentStyle(false, intf); });\n                return;\n            }\n            if (attrName === 'data') {\n                intf.args.data = typeMap.data(newVal);\n                return;\n            }\n            if (attrName === 'schema') {\n                intf.args.schema = typeMap.schema(newVal);\n                return;\n            }\n            if (attrName === 'name') {\n                intf.name = newVal;\n                return;\n            }\n            if (attrName === 'class' || attrName === 'className') {\n                return;\n            }\n            def = getDefaultItem('attributes', attrName);\n            if (def) {\n                tfn = typeMap[typeof def[1]];\n                intf.attributes[def[0]] = tfn(newVal);\n                return;\n            }\n            if (/^on/.test(attrName)) {\n                intf.addEventListener('on' + attrName, function (e) {\n                    eval(newVal);\n                });\n            }\n            return;\n        };\n        component.observe = function (intf) {\n            var observer;\n            if (!window.MutationObserver) { return; }\n            intf.applyComponentStyle = function () { applyComponentStyle(false, intf); intf.resize(); };\n            /**\n             * Applies the computed css styles to the grid.  In some browsers, changing directives in attached style sheets does not automatically update the styles in this component.  It is necessary to call this method to update in these cases.\n             * @memberof canvasDatagrid\n             * @name applyComponentStyle\n             * @method\n             */\n            observer = new window.MutationObserver(function (mutations) {\n                var checkInnerHTML, checkStyle;\n                Array.prototype.forEach.call(mutations, function (mutation) {\n                    if (mutation.attributeName === 'class'\n                            || mutation.attributeName === 'style') {\n                        intf.applyComponentStyle(false, intf);\n                        return;\n                    }\n                    if (mutation.target.parentNode\n                            && mutation.target.parentNode.nodeName === 'STYLE') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.addedNodes.length > 0 || mutation.type === 'characterData') {\n                        checkInnerHTML = true;\n                    }\n                });\n                if (checkStyle) {\n                    intf.applyComponentStyle(false, intf);\n                }\n                if (checkInnerHTML) {\n                    intf.data = typeMap.data(intf.innerHTML);\n                }\n            });\n            observer.observe(intf, { characterData: true, childList: true, attributes: true, subtree: true });\n            observer.observe(intf.canvas, { attributes: true });\n            Array.prototype.forEach.call(document.querySelectorAll('style'), function (el) {\n                observer.observe(el, { characterData: true, childList: true, attributes: true, subtree: true });\n            });\n        };\n        return component;\n    };\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/component.js\n// module id = 2\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals XMLSerializer: false, define: true, Blob: false, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var perfCounters = [],\n            drawCount = 0,\n            perfWindowSize = 300,\n            entityCount = [],\n            scrollDebugCounters = [],\n            touchPPSCounters = [];\n        self.htmlImageCache = {};\n        function drawPerfLine(w, h, x, y, perfArr, arrIndex, max, color, useAbs) {\n            var i = w / perfArr.length,\n                r = h / max;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x, y + h);\n            perfArr.forEach(function (n) {\n                var val = (arrIndex === undefined ? n : n[arrIndex]),\n                    cx,\n                    cy;\n                if (useAbs) {\n                    val = Math.abs(val);\n                }\n                cx = x + i;\n                cy = y + h - (val * r);\n                self.ctx.lineTo(cx, cy);\n                x += i;\n            });\n            self.ctx.moveTo(x + w, y + h);\n            self.ctx.strokeStyle = color;\n            self.ctx.stroke();\n        }\n        function drawOnAllImagesLoaded() {\n            var loaded = true;\n            Object.keys(self.htmlImageCache).forEach(function (html) {\n                if (!self.htmlImageCache[html].complete) {\n                    loaded = false;\n                }\n            });\n            if (loaded) {\n                self.draw();\n            }\n        }\n        function drawHtml(cell) {\n            var img,\n                v = cell.innerHTML || cell.formattedValue,\n                x = cell.x + self.canvasOffsetLeft,\n                y = cell.y + self.canvasOffsetTop;\n            if (self.htmlImageCache[v]) {\n                img = self.htmlImageCache[v];\n                if (img.height !== cell.height || img.width !== cell.width) {\n                    // height and width of the cell has changed, invalidate cache\n                    self.htmlImageCache[v] = undefined;\n                } else {\n                    if (!img.complete) {\n                        return;\n                    }\n                    return self.ctx.drawImage(img, x, y);\n                }\n            }\n            img = new Image(cell.width, cell.height);\n            self.htmlImageCache[v] = img;\n            img.onload = function () {\n                self.ctx.drawImage(img, x, y);\n                drawOnAllImagesLoaded();\n            };\n            img.src = 'data:image/svg+xml;base64,' + btoa(\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + cell.width + '\" height=\"' + cell.height + '\">\\n' +\n                    '<foreignObject class=\"node\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\\n' +\n                    '<body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;padding:0;\">\\n' +\n                    v + '\\n' +\n                    '</body>' +\n                    '</foreignObject>\\n' +\n                    '</svg>\\n'\n            );\n        }\n        function drawOrderByArrow(x, y) {\n            var mt = self.style.columnHeaderOrderByArrowMarginTop * self.scale,\n                ml = self.style.columnHeaderOrderByArrowMarginLeft * self.scale,\n                mr = self.style.columnHeaderOrderByArrowMarginRight * self.scale,\n                aw = self.style.columnHeaderOrderByArrowWidth * self.scale,\n                ah = self.style.columnHeaderOrderByArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.columnHeaderOrderByArrowColor;\n            self.ctx.strokeStyle = self.style.columnHeaderOrderByArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.orderDirection === 'asc') {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y + ah);\n                self.ctx.lineTo(x + aw, y + ah);\n                self.ctx.lineTo(x + (aw * 0.5), y);\n                self.ctx.lineTo(x, y + ah);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function drawTreeArrow(cell, x, y) {\n            var mt = self.style.treeArrowMarginTop * self.scale,\n                mr = self.style.treeArrowMarginRight * self.scale,\n                ml = self.style.treeArrowMarginLeft * self.scale,\n                aw = self.style.treeArrowWidth * self.scale,\n                ah = self.style.treeArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.treeArrowColor;\n            self.ctx.strokeStyle = self.style.treeArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.openChildren[cell.data[self.uniqueId]]) {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y);\n                self.ctx.lineTo(x + ah, y + (aw * 0.5));\n                self.ctx.lineTo(x, y + aw);\n                self.ctx.lineTo(x, y);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function radiusRect(x, y, w, h, radius) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            var r = x + w, b = y + h;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x + radius, y);\n            self.ctx.lineTo(r - radius, y);\n            self.ctx.quadraticCurveTo(r, y, r, y + radius);\n            self.ctx.lineTo(r, y + h - radius);\n            self.ctx.quadraticCurveTo(r, b, r - radius, b);\n            self.ctx.lineTo(x + radius, b);\n            self.ctx.quadraticCurveTo(x, b, x, b - radius);\n            self.ctx.lineTo(x, y + radius);\n            self.ctx.quadraticCurveTo(x, y, x + radius, y);\n        }\n        function fillRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillRect(x, y, w, h);\n        }\n        function strokeRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.strokeRect(x, y, w, h);\n        }\n        function fillText(text, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillText(text, x, y);\n        }\n        function fillCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.fill();\n        }\n        function strokeCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.stroke();\n        }\n        function clipFrozenArea(mode) {\n            // 0 both, 1 rows, 2 cols\n            // self.lastFrozenColumnPixel;\n            // self.lastFrozenRowPixel;\n            self.ctx.beginPath();\n            if (mode === 0) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, self.lastFrozenRowPixel);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 1) {\n                self.ctx.moveTo(0, self.lastFrozenRowPixel);\n                self.ctx.lineTo(0, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 2) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, 0);\n                self.ctx.lineTo(self.width, 0);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n            }\n            self.ctx.clip();\n        }\n        function fillHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return fillCircle(x, y, r * 0.5);\n            }\n            fillRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function strokeHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return strokeCircle(x, y, r * 0.5);\n            }\n            strokeRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function addselectionHandle(c, pos) {\n            var hw = self.style.selectionHandleSize,\n                p = {\n                    tr: function () {\n                        fillHandle(c.x + c.width, c.y, hw);\n                        strokeHandle(c.x + c.width, c.y, hw);\n                    },\n                    br: function () {\n                        fillHandle(c.x + c.width, c.y + c.height, hw);\n                        strokeHandle(c.x + c.width, c.y + c.height, hw);\n                    },\n                    tl: function () {\n                        fillHandle(c.x, c.y, hw);\n                        strokeHandle(c.x, c.y, hw);\n                    },\n                    bl: function () {\n                        fillHandle(c.x, c.y + c.height, hw);\n                        strokeHandle(c.x, c.y + c.height, hw);\n                    }\n                };\n            p[pos]();\n        }\n        function addBorderLine(c, pos) {\n            self.ctx.beginPath();\n            var p = {\n                t: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                },\n                r: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                b: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                l: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                }\n            };\n            p[pos]();\n            self.ctx.stroke();\n        }\n        function addEllipsis(text, width) {\n            var c, w = 0;\n            if (self.ellipsisCache[text] && self.ellipsisCache[text][width]) {\n                return self.ellipsisCache[text][width];\n            }\n            //TODO Add ellipsis back when there is a fast way to do it\n            w = self.ctx.measureText(text).width;\n            self.ellipsisCache[text] = self.ellipsisCache[text] || {};\n            c = {value: text, width: w};\n            self.ellipsisCache[text][width] = c;\n            return c;\n        }\n        function drawText(cell) {\n            var paddingLeft = self.style[cell.style + 'PaddingLeft'] * self.scale,\n                paddingTop = self.style[cell.style + 'PaddingTop'] * self.scale,\n                paddingRight = self.style[cell.style + 'PaddingRight'] * self.scale,\n                paddingBottom = self.style[cell.style + 'PaddingBottom'] * self.scale,\n                vPos = paddingTop + cell.height - (cell.height * 0.5),\n                hPos = paddingLeft + cell.treeArrowWidth + cell.orderByArrowWidth;\n            cell.text = addEllipsis(cell.formattedValue, cell.width - paddingRight - paddingLeft);\n            cell.text.height = cell.fontHeight;\n            if (cell.horizontalAlignment === 'right') {\n                hPos = cell.width - cell.text.width - paddingRight;\n            } else if (cell.horizontalAlignment === 'center') {\n                hPos = (cell.width / 2) - (cell.text.width / 2);\n            }\n            if (cell.verticalAlignment === 'top') {\n                vPos = paddingTop + cell.text.height;\n            } else if (cell.verticalAlignment === 'bottom') {\n                vPos = cell.height - paddingBottom - cell.text.height;\n            }\n            cell.text.x = cell.x + hPos;\n            cell.text.y = cell.y + vPos;\n            fillText(cell.text.value, cell.text.x, cell.text.y);\n        }\n        function getFrozenColumnsWidth() {\n            var w = 0,\n                s = self.getVisibleSchema(),\n                x = 0,\n                n = Math.min(self.frozenColumn, s.length),\n                column;\n            while (x < n) {\n                column = s[self.orders.columns[x]];\n                w += ((self.sizes.columns[column[self.uniqueId]] || column.width || self.style.cellWidth) * self.scale);\n                x += 1;\n            }\n            return w;\n        }\n        /**\n         * Redraws the grid. No matter what the change, this is the only method required to refresh everything.\n         * @memberof canvasDatagrid\n         * @name draw\n         * @method\n         */\n         // r = literal row index\n         // rd = row data array\n         // i = user order index\n         // o = literal data index\n         // y = y drawing cursor\n         // x = x drawing cursor\n         // s = visible schema array\n         // cx = current x drawing cursor sub calculation var\n         // cy = current y drawing cursor sub calculation var\n         // a = static cell (like corner cell)\n         // p = perf counter\n         // l = data length\n         // u = current cell\n         // h = current height\n         // w = current width\n        self.draw = function (internal) {\n            if (self.dispatchEvent('beforedraw', {})) { return; }\n            if (!self.isChildGrid && (!self.height || !self.width)) {\n                return;\n            }\n            if (self.isChildGrid && internal) {\n                requestAnimationFrame(self.parentGrid.draw);\n                return;\n            }\n            if (self.intf.visible === false) {\n                return;\n            }\n            // initial values\n            var checkScrollHeight, rowHeaderCell, p, cx, cy, treeGrid, rowOpen,\n                rowHeight, cornerCell, y, x, c, h, w, s, r, rd, aCell,\n                bc = self.style.gridBorderCollapse === 'collapse',\n                selectionBorders = [],\n                moveBorders = [],\n                selectionHandles = [],\n                rowHeaders = [],\n                frozenColumnWidths = getFrozenColumnsWidth(),\n                l = self.data.length,\n                u = self.currentCell || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                cellHeight = self.style.cellHeight;\n            drawCount += 1;\n            p = performance.now();\n            self.visibleRowHeights = [];\n            // if data length has changed, there is no way to know\n            if (self.data.length > self.orders.rows.length) {\n                self.createRowOrders();\n            }\n            function drawScrollBars() {\n                var v = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-bar'\n                    },\n                    n = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-bar'\n                    },\n                    vb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-box'\n                    },\n                    nb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-box'\n                    },\n                    co = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        isCorner: true,\n                        isScrollBoxCorner: true,\n                        style: 'scroll-box-corner'\n                    },\n                    m = (self.style.scrollBarBoxMargin * 2),\n                    d = self.style.scrollBarBoxMargin * 0.5;\n                self.ctx.strokeStyle = self.style.scrollBarBorderColor;\n                self.ctx.lineWidth = self.style.scrollBarBorderWidth;\n                // vertical\n                v.x += w - self.style.scrollBarWidth - self.style.scrollBarBorderWidth - d;\n                v.y += columnHeaderCellHeight;\n                v.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                v.height = h - columnHeaderCellHeight - self.style.scrollBarWidth - d - m;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(v.x, v.y, v.width, v.height + m);\n                strokeRect(v.x, v.y, v.width, v.height + m);\n                // vertical box\n                vb.x = v.x + self.style.scrollBarBoxMargin;\n                vb.y = columnHeaderCellHeight + self.style.scrollBarBoxMargin\n                    + ((v.height - self.scrollBox.scrollBoxHeight)\n                        * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight));\n                vb.width = self.style.scrollBarBoxWidth;\n                vb.height = self.scrollBox.scrollBoxHeight;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/vertical/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (vb.height < v.height) {\n                    radiusRect(vb.x, vb.y, vb.width, vb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                // horizontal\n                n.x += rowHeaderCellWidth;\n                n.y += h - self.style.scrollBarWidth - d;\n                n.width = w - self.style.scrollBarWidth - rowHeaderCellWidth - d - m;\n                n.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(n.x, n.y, n.width + m, n.height);\n                strokeRect(n.x, n.y, n.width + m, n.height);\n                // horizontal box\n                nb.y = n.y + self.style.scrollBarBoxMargin;\n                nb.x = rowHeaderCellWidth + self.style.scrollBarBoxMargin\n                    + ((n.width - self.scrollBox.scrollBoxWidth)\n                        * (self.scrollBox.scrollLeft / self.scrollBox.scrollWidth));\n                nb.width = self.scrollBox.scrollBoxWidth;\n                nb.height = self.style.scrollBarBoxWidth;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/horizontal/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (nb.width < n.width) {\n                    radiusRect(nb.x, nb.y, nb.width, nb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                //corner\n                self.ctx.strokeStyle = self.style.scrollBarCornerBorderColor;\n                self.ctx.fillStyle = self.style.scrollBarCornerBackgroundColor;\n                co.x = n.x + n.width + m;\n                co.y = v.y + v.height + m;\n                co.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                co.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                radiusRect(co.x, co.y, co.width, co.height, 0);\n                self.ctx.stroke();\n                self.ctx.fill();\n                self.visibleCells.unshift(v);\n                self.visibleCells.unshift(vb);\n                self.visibleCells.unshift(n);\n                self.visibleCells.unshift(nb);\n                self.visibleCells.unshift(co);\n                self.scrollBox.bar = {\n                    v: v,\n                    h: n\n                };\n                self.scrollBox.box = {\n                    v: vb,\n                    h: nb\n                };\n            }\n            function createHandlesOverlayArray(cell) {\n                if (self.attributes.allowMovingSelection || self.mobile) {\n                    if (cell.selectionBorderTop && cell.selectionBorderRight && self.mobile) {\n                        selectionHandles.push([cell, 'tr']);\n                        cell.selectionHandle = 'tr';\n                    }\n                    if (cell.selectionBorderTop && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'tl']);\n                        cell.selectionHandle = 'tl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'bl']);\n                        cell.selectionHandle = 'bl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderRight\n                            && (self.attributes.selectionHandleBehavior !== 'none' || self.mobile)) {\n                        selectionHandles.push([cell, 'br']);\n                        cell.selectionHandle = 'br';\n                    }\n                }\n            }\n            function createBorderOverlayArray(cell, drawArray, propPrefix, offsetPoint) {\n                offsetPoint = offsetPoint || {x: 0, y: 0};\n                cell.selectionBorder = '';\n                if (!cell.isRowHeader\n                        && self.selections[cell.rowIndex + -offsetPoint.y]\n                        && self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) !== -1) {\n                    if ((!self.selections[cell.rowIndex - 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex - 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1\n                            || cell.rowIndex === 0)\n                            && !cell.isHeader) {\n                        drawArray.push([cell, 't']);\n                        cell[propPrefix + 'BorderTop'] = true;\n                        cell[propPrefix + 'Border'] += 't';\n                    }\n                    if (!self.selections[cell.rowIndex + 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex + 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'b']);\n                        cell[propPrefix + 'BorderBottom'] = true;\n                        cell[propPrefix + 'Border'] += 'b';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === 0\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex - 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'l']);\n                        cell[propPrefix + 'BorderLeft'] = true;\n                        cell[propPrefix + 'Border'] += 'l';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === s.length\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'r']);\n                        cell[propPrefix + 'BorderRight'] = true;\n                        cell[propPrefix + 'Border'] += 'r';\n                    }\n                }\n            }\n            function drawCell(d, rowOrderIndex, rowIndex) {\n                return function drawEach(header, headerIndex, columnOrderIndex) {\n                    var cellStyle = header.style || 'cell',\n                        cellGridAttributes,\n                        cell,\n                        isHeader = /HeaderCell/.test(cellStyle),\n                        isCorner = /cornerCell/.test(cellStyle),\n                        isRowHeader = 'rowHeaderCell' === cellStyle,\n                        isColumnHeader = 'columnHeaderCell' === cellStyle,\n                        selected = self.selections[rowOrderIndex] && self.selections[rowOrderIndex].indexOf(columnOrderIndex) !== -1,\n                        hovered = self.hovers[d[self.uniqueId]] && self.hovers[d[self.uniqueId]].indexOf(columnOrderIndex) !== -1,\n                        active = self.activeCell.rowIndex === rowOrderIndex && self.activeCell.columnIndex === columnOrderIndex,\n                        isGrid = typeof d[header.name] === 'object' && d[header.name] !== null && d[header.name] !== undefined,\n                        activeHeader = (self.orders.rows[self.activeCell.rowIndex] === rowOrderIndex\n                                || self.orders.columns[self.activeCell.columnIndex] === columnOrderIndex)\n                            && (columnOrderIndex === -1 || rowOrderIndex === -1)\n                            ? (isRowHeader ? 'activeRowHeaderCell' : 'activeColumnHeaderCell') : false,\n                        val,\n                        f = self.formatters[header.type || 'string'],\n                        orderByArrowSize = 0,\n                        treeArrowSize = 0,\n                        cellWidth = self.sizes.columns[isRowHeader ? 'cornerCell' : header[self.uniqueId]] || header.width,\n                        ev = {\n                            value: d[header.name],\n                            row: d,\n                            header: header\n                        };\n                    if (cellStyle === 'headerCellCap') {\n                        cellWidth = w - x;\n                    }\n                    // if no data or schema are defined, a width is provided to the stub column\n                    if (cellWidth === undefined) {\n                        cellWidth = self.style.cellWidth;\n                    }\n                    cellWidth = cellWidth * self.scale;\n                    if (x + cellWidth + self.style.cellBorderWidth < 0) {\n                        x += cellWidth + self.style.cellBorderWidth;\n                    }\n                    if (active) {\n                        cellStyle = 'activeCell';\n                    }\n                    if (self.visibleRows.indexOf(rowIndex) === -1 && !isHeader) {\n                        self.visibleRows.push(rowIndex);\n                    }\n                    val = self.dispatchEvent('formatcellvalue', ev);\n                    cx = x;\n                    cy = y;\n                    if (cellStyle === 'cornerCell') {\n                        cx = 0;\n                        cy = 0;\n                    } else if (isRowHeader) {\n                        cx = 0;\n                    } else if (isHeader) {\n                        cy = 0;\n                    }\n                    cell = {\n                        type: isGrid ? 'canvas-datagrid-cell' : header.type,\n                        style: cellStyle,\n                        nodeType: 'canvas-datagrid-cell',\n                        x: cx,\n                        y: cy,\n                        horizontalAlignment: self.style[cellStyle + 'HorizontalAlignment'],\n                        verticalAlignment: self.style[cellStyle + 'VerticalAlignment'],\n                        offsetTop: self.canvasOffsetTop + cy,\n                        offsetLeft: self.canvasOffsetLeft + cx,\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        active: active || activeHeader,\n                        hovered: hovered,\n                        selected: selected,\n                        width: cellWidth,\n                        height: cellHeight,\n                        offsetWidth: cellWidth,\n                        offsetHeight: cellHeight,\n                        parentNode: self.intf.parentNode,\n                        offsetParent: self.intf.parentNode,\n                        data: d,\n                        isCorner: isCorner,\n                        isHeader: isHeader,\n                        isColumnHeader: isColumnHeader,\n                        isHeaderCellCap: !!header.isHeaderCellCap,\n                        isRowHeader: isRowHeader,\n                        rowOpen: rowOpen,\n                        header: header,\n                        columnIndex: columnOrderIndex,\n                        rowIndex: rowOrderIndex,\n                        sortColumnIndex: headerIndex,\n                        sortRowIndex: rowIndex,\n                        isGrid: isGrid,\n                        isNormal: !isGrid && !isCorner && !isHeader,\n                        gridId: (self.attributes.name || '') + d[self.uniqueId] + ':' + header[self.uniqueId],\n                        parentGrid: self.intf,\n                        innerHTML: '',\n                        activeHeader: activeHeader,\n                        value: isHeader && !isRowHeader ? (header.title || header.name) : d[header.name]\n                    };\n                    ev.cell = cell;\n                    cell.userHeight = cell.isHeader ? self.sizes.rows[-1] : rowHeight;\n                    cell.userWidth = cell.isHeader ? self.sizes.columns.cornerCell : self.sizes.columns[header[self.uniqueId]];\n                    cell[self.uniqueId] = d[self.uniqueId];\n                    self.visibleCells.unshift(cell);\n                    if (self.dispatchEvent('beforerendercell', ev)) { return; }\n                    self.ctx.fillStyle = self.style[cellStyle + 'BackgroundColor'];\n                    self.ctx.strokeStyle = self.style[cellStyle + 'BorderColor'];\n                    self.ctx.lineWidth = self.style[cellStyle + 'BorderWidth'];\n                    if (hovered) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'HoverBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'HoverBorderColor'];\n                    }\n                    if (selected) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'SelectedBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'SelectedBorderColor'];\n                    }\n                    if (activeHeader) {\n                        self.ctx.fillStyle = self.style[activeHeader + 'BackgroundColor'];\n                    }\n                    self.dispatchEvent('rendercell', ev);\n                    if (cell.isGrid) {\n                        if (cell.height !== rowHeight) {\n                            cell.height = rowHeight || self.style.cellHeightWithChildGrid;\n                            checkScrollHeight = true;\n                        }\n                        cell.width = self.sizes.columns[header[self.uniqueId]] || self.style.cellWidthWithChildGrid;\n                    }\n                    if (rowOpen && !cell.isRowHeader) {\n                        cell.height = self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight;\n                    }\n                    if (!cell.isGrid) {\n                        fillRect(cx, cy, cell.width, cell.height);\n                        strokeRect(cx, cy, cell.width, cell.height);\n                    }\n                    self.ctx.save();\n                    radiusRect(cell.x, cell.y, cell.width, cell.height, 0);\n                    self.ctx.clip();\n                    self.dispatchEvent('afterrendercell', ev);\n                    if (cell.height !== cellHeight && !(rowOpen && !cell.isRowHeader)) {\n                        self.sizes.rows[isHeader ? -1 : d[self.uniqueId]] = cell.height;\n                        checkScrollHeight = true;\n                    }\n                    if (cell.width !== cellWidth) {\n                        self.sizes.columns[header[self.uniqueId]] = cell.width;\n                        checkScrollHeight = true;\n                    }\n                    if (isRowHeader && self.attributes.tree) {\n                        if (!self.dispatchEvent('rendertreearrow', ev)) {\n                            treeArrowSize = drawTreeArrow(cell, self.style[cellStyle + 'PaddingLeft'], cy, 0);\n                        }\n                    }\n                    if ((self.attributes.showRowNumbers && isRowHeader)\n                            || !isRowHeader) {\n                        if (cell.isGrid && !self.dispatchEvent('beforerendercellgrid', ev)) {\n                            if (!self.childGrids[cell.gridId]) {\n                                cellGridAttributes = self.args.cellGridAttributes || self.args;\n                                cellGridAttributes.name = self.attributes.saveAppearance ? cell.gridId : undefined;\n                                cellGridAttributes.parentNode = cell;\n                                cellGridAttributes.data = d[header.name];\n                                cellGridAttributes.style = cellGridAttributes.style || self.style;\n                                ev.cellGridAttributes = cellGridAttributes;\n                                if (self.dispatchEvent('beforecreatecellgrid', ev)) { return; }\n                                self.childGrids[cell.gridId] = self.createGrid(cellGridAttributes);\n                                self.sizes.rows[rd[self.uniqueId]]\n                                    = self.sizes.rows[rd[self.uniqueId]] || self.style.cellGridHeight;\n                                checkScrollHeight = true;\n                            }\n                            cell.grid = self.childGrids[cell.gridId];\n                            cell.grid.parentNode = cell;\n                            cell.grid.visible = true;\n                            cell.grid.draw();\n                            self.dispatchEvent('rendercellgrid', ev);\n                        } else if (!cell.isGrid) {\n                            if (self.childGrids[cell.gridId]) {\n                                self.childGrids[cell.gridId].parentNode.offsetHeight = 0;\n                            }\n                            if (isHeader && self.orderBy === header.name) {\n                                if (!self.dispatchEvent('renderorderbyarrow', ev)) {\n                                    orderByArrowSize = drawOrderByArrow(cx + self.style[cellStyle + 'PaddingLeft'], 0);\n                                }\n                            }\n                            self.ctx.fillStyle = self.style[cellStyle + 'Color'];\n                            if (hovered) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'HoverColor'];\n                            }\n                            if (selected) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'SelectedColor'];\n                            }\n                            if (activeHeader) {\n                                self.ctx.fillStyle = self.style[activeHeader + 'Color'];\n                            }\n                            self.ctx.font = (self.style[cellStyle + 'FontHeight'] * self.scale) + 'px ' + self.style[cellStyle + 'FontName'];\n                            cell.fontHeight = (self.style[cellStyle + 'FontHeight'] * self.scale);\n                            cell.treeArrowWidth = treeArrowSize;\n                            cell.orderByArrowWidth = orderByArrowSize;\n                            val = val !== undefined ? val : f\n                                ? f(ev) : '';\n                            if (val === undefined && !f) {\n                                val = '';\n                                console.warn('canvas-datagrid: Unknown format '\n                                    + header.type + ' add a cellFormater');\n                            }\n                            cell.formattedValue = ((val !== undefined && val !== null) ? val : '').toString();\n                            if (self.columnFilters && self.columnFilters[val] !== undefined && isHeader) {\n                                cell.formattedValue = self.attributes.filterTextPrefix + val;\n                            }\n                            if (!self.dispatchEvent('rendertext', ev)) {\n                                if (cell.innerHTML || header.type === 'html') {\n                                    drawHtml(cell);\n                                } else {\n                                    drawText(cell);\n                                }\n                            }\n                        }\n                    }\n                    if (active) {\n                        aCell = cell;\n                    }\n                    createBorderOverlayArray(cell, selectionBorders, 'selection');\n                    // createBorderOverlayArray calculates data for createHandlesOverlayArray so it must go 2nd\n                    createHandlesOverlayArray(cell);\n                    if (self.movingSelection) {\n                        createBorderOverlayArray(cell, moveBorders, 'move', self.moveOffset);\n                    }\n                    self.ctx.restore();\n                    x += cell.width + (bc ? 0 : self.style.cellBorderWidth);\n                    return cell.width;\n                };\n            }\n            function drawRowHeader(rowData, index, rowOrderIndex) {\n                var a;\n                if (self.attributes.showRowHeaders) {\n                    x = 0;\n                    rowHeaderCell = {'rowHeaderCell': index + 1 };\n                    rowHeaderCell[self.uniqueId] = rowData[self.uniqueId];\n                    a = {\n                        name: 'rowHeaderCell',\n                        width: self.style.rowHeaderCellWidth,\n                        style: 'rowHeaderCell',\n                        type: 'string',\n                        data: rowData[self.uniqueId],\n                        index: -1\n                    };\n                    a[self.uniqueId] = rowData[self.uniqueId];\n                    rowOpen = self.openChildren[rowData[self.uniqueId]];\n                    drawCell(rowHeaderCell, index, rowOrderIndex)(a, -1, -1);\n                }\n            }\n            function drawHeaders() {\n                var d, g = s.length, i, o, columnHeaderCell, header, nonFrozenHeaderWidth;\n                function drawHeaderColumnRange(start, end) {\n                    end = Math.min(end, g);\n                    for (o = start; o < end; o += 1) {\n                        i = self.orders.columns[o];\n                        header = s[i];\n                        d = {\n                            title: header.title,\n                            name: header.name,\n                            width: header.width || self.style.cellWidth,\n                            style: 'columnHeaderCell',\n                            type: 'string',\n                            index: o,\n                            order: i\n                        };\n                        columnHeaderCell = {'columnHeaderCell': header.title || header.name};\n                        columnHeaderCell[self.uniqueId] = 'h' + header[self.uniqueId];\n                        d[self.uniqueId] = header[self.uniqueId];\n                        x += drawCell(columnHeaderCell, -1, -1)(d, o, i);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                }\n                rowHeaders.forEach(function (rArgs, rhIndex) {\n                    y = rArgs[3];\n                    cellHeight = rArgs[4];\n                    if (rhIndex === self.frozenRow) {\n                        self.ctx.save();\n                        radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                        self.ctx.clip();\n                    }\n                    drawRowHeader(rArgs[0], rArgs[1], rArgs[2]);\n                });\n                self.ctx.restore();\n                if (self.attributes.showColumnHeaders) {\n                    x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    x += frozenColumnWidths;\n                    y = 0;\n                    // cell height might have changed during drawing\n                    cellHeight = self.getColumnHeaderCellHeight();\n                    drawHeaderColumnRange(self.scrollIndexLeft + self.frozenColumn, g);\n                    nonFrozenHeaderWidth = x;\n                    x = self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    drawHeaderColumnRange(0, self.frozenColumn);\n                    // fill in the space right of the headers\n                    x = nonFrozenHeaderWidth;\n                    if (x < w) {\n                        c = {\n                            name: '',\n                            width: self.style.scrollBarWidth,\n                            style: 'headerCellCap',\n                            isHeaderCell: true,\n                            isHeaderCellCap: true,\n                            type: 'string',\n                            index: s.length\n                        };\n                        c[self.uniqueId] = 'columnHeaderCell';\n                        drawCell({endCap: ''}, -1, -1)(c, -1, -1);\n                    }\n                    // fill in the space right of the headers\n                    if (self.attributes.showRowHeaders) {\n                        cornerCell = {'cornerCell': '' };\n                        cornerCell[self.uniqueId] = 'cornerCell';\n                        x = 0;\n                        c = {\n                            name: 'cornerCell',\n                            width: self.style.rowHeaderCellWidth,\n                            style: 'cornerCell',\n                            type: 'string',\n                            index: -1\n                        };\n                        c[self.uniqueId] = 'cornerCell';\n                        drawCell(cornerCell, -1, -1)(c, -1, -1);\n                    }\n                }\n            }\n            function drawRow(r, d) {\n                var i, treeHeight, rowSansTreeHeight, o, g = s.length;\n                if (y - (cellHeight * 2) > h) {\n                    return false;\n                }\n                rd = self.data[r];\n                rowOpen = self.openChildren[rd[self.uniqueId]];\n                rowSansTreeHeight = (self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight) * self.scale;\n                treeHeight = (rowOpen ? self.sizes.trees[rd[self.uniqueId]] : 0) * self.scale;\n                rowHeight = (rowSansTreeHeight + treeHeight);\n                if (y < -rowHeight) {\n                    return false;\n                }\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                cellHeight = rowHeight;\n                if (self.attributes.allowFreezingColumns) {\n                    x += frozenColumnWidths;\n                }\n                //draw normal columns\n                for (o = (self.scrollIndexLeft + self.frozenColumn); o < g; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        self.scrollIndexRight = o;\n                        self.scrollPixelRight = x;\n                        break;\n                    }\n                }\n                //draw frozen columns\n                x = 0;\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                for (o = 0; o < self.frozenColumn; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        break;\n                    }\n                }\n                self.lastFrozenColumnPixel = x;\n                // cell height might have changed during drawing\n                cellHeight = rowHeight;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                // don't draw a tree for the new row\n                treeGrid = self.childGrids[rd[self.uniqueId]];\n                if (r !== self.data.length && rowOpen) {\n                    treeGrid.visible = true;\n                    treeGrid.parentNode = {\n                        offsetTop: y + rowSansTreeHeight + self.canvasOffsetTop,\n                        offsetLeft: rowHeaderCellWidth - 1 + self.canvasOffsetLeft,\n                        offsetHeight: treeHeight,\n                        offsetWidth: self.width - rowHeaderCellWidth - self.style.scrollBarWidth - 1,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: self.style,\n                        nodeType: 'canvas-datagrid-tree',\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        rowIndex: r\n                    };\n                    self.visibleCells.unshift({\n                        rowIndex: r,\n                        columnIndex: 0,\n                        y: treeGrid.parentNode.offsetTop,\n                        x: treeGrid.parentNode.offsetLeft,\n                        height: treeGrid.height,\n                        width: treeGrid.width,\n                        style: 'tree-grid',\n                        type: treeGrid.parentNode.nodeType\n                    });\n                    treeGrid.draw();\n                } else if (treeGrid) {\n                    treeGrid.parentNode.offsetHeight = 0;\n                    delete self.sizes.trees[rd[self.uniqueId]];\n                }\n                rowHeaders.push([rd, r, d, y, rowHeight]);\n                self.visibleRowHeights[r] = rowHeight;\n                y += cellHeight + (bc ? 0 : self.style.cellBorderWidth);\n                return true;\n            }\n            function initDraw() {\n                self.visibleRows = [];\n                s = self.getVisibleSchema();\n                self.visibleCells = [];\n                self.canvasOffsetTop = self.isChildGrid ? self.parentNode.offsetTop : 0;\n                self.canvasOffsetLeft = self.isChildGrid ? self.parentNode.offsetLeft : 0;\n                h = self.height;\n                w = self.width;\n                if (!self.isChildGrid) {\n                    self.ctx.scale(window.devicePixelRatio, window.devicePixelRatio);\n                }\n            }\n            function drawBackground() {\n                radiusRect(0, 0, w, h, 0);\n                self.ctx.clip();\n                self.ctx.fillStyle = self.style.gridBackgroundColor;\n                fillRect(0, 0, w, h);\n            }\n            function drawFrozenRows() {\n                var n, ln = Math.min(self.data.length, self.frozenRow);\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                y = columnHeaderCellHeight;\n                for (r = 0; r < ln; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.allowFreezingRows) {\n                    // HACK great, another stupid magic number.\n                    // Background will appear as a 0.5px artifact behind the row freeze bar without this hack\n                    y += self.style.frozenMarkerBorderWidth + self.style.frozenMarkerWidth - 0.4999999999;\n                }\n                self.lastFrozenRowPixel = y;\n            }\n            function drawRows() {\n                self.ctx.save();\n                if (self.frozenRow > 0) {\n                    radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                    self.ctx.clip();\n                }\n                var o, n, i, g = s.length;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                if (!self.attributes.snapToRow) {\n                    y += -self.scrollBox.scrollTop + self.scrollPixelTop;\n                }\n                for (r = self.frozenRow + self.scrollIndexTop; r < l; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        self.scrollIndexBottom = r;\n                        self.scrollPixelBottom = y;\n                        break;\n                    }\n                }\n                if (self.attributes.showNewRow) {\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    rowHeight = cellHeight = self.style.cellHeight;\n                    rowOpen = false;\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        x += drawCell(self.newRow, self.data.length, self.data.length)(s[i], i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    rowHeaders.push([self.newRow, self.data.length, self.data.length, y, rowHeight]);\n                }\n                self.ctx.restore();\n            }\n            function drawMoveMarkers() {\n                if (!self.movingSelection) { return; }\n                self.ctx.lineWidth = self.style.moveOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.moveOverlayBorderColor;\n                self.ctx.setLineDash(self.style.moveOverlayBorderSegments);\n                moveBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n                self.ctx.setLineDash([]);\n            }\n            function drawReorderMarkers() {\n                if (!self.reorderObject) { return; }\n                var b = {\n                        height: self.reorderObject.height,\n                        width: self.reorderObject.width,\n                        x: self.reorderObject.x + self.reorderObject.dragOffset.x,\n                        y: self.reorderObject.y + self.reorderObject.dragOffset.y\n                    },\n                    m = {\n                        width: w,\n                        height: h,\n                        x: 0,\n                        y: 0\n                    };\n                self.ctx.fillStyle = self.style.reorderMarkerBackgroundColor;\n                self.ctx.lineWidth = self.style.reorderMarkerBorderWidth;\n                self.ctx.strokeStyle = self.style.reorderMarkerBorderColor;\n                if (self.dragMode === 'row-reorder') {\n                    b.width = w;\n                    b.x = 0;\n                    m.width = w;\n                    m.height = self.currentCell.height;\n                    m.y = self.currentCell.y;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.rowIndex !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex > -1\n                            && self.currentCell.rowIndex < l) {\n                        addBorderLine(m, self.reorderTarget.sortRowIndex > self.reorderObject.sortRowIndex ? 'b' : 't');\n                    }\n                } else if (self.dragMode === 'column-reorder' && self.reorderObject) {\n                    b.height = h;\n                    b.y = 0;\n                    m.height = h;\n                    m.width = self.currentCell.width;\n                    m.y = 0;\n                    m.x = self.currentCell.x;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.columnIndex !== self.reorderObject.columnIndex\n                            && self.currentCell.columnIndex > -1\n                            && self.currentCell.columnIndex < s.length) {\n                        addBorderLine(m, self.reorderTarget.sortColumnIndex > self.reorderObject.sortColumnIndex ? 'r' : 'l');\n                    }\n                }\n            }\n            function drawBorder() {\n                self.ctx.lineWidth = self.style.gridBorderWidth;\n                self.ctx.strokeStyle = self.style.gridBorderColor;\n                strokeRect(0, 0, self.width, self.height);\n            }\n            function drawSelectionBorders() {\n                self.ctx.lineWidth = self.style.selectionOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.selectionOverlayBorderColor;\n                function dsb(c) {\n                    addBorderLine(c[0], c[1]);\n                }\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.save();\n                clipFrozenArea(0);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(1);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(2);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n            }\n            function drawSelectionHandles() {\n                if (self.mobile || self.attributes.allowMovingSelection) {\n                    self.ctx.lineWidth = self.style.selectionHandleBorderWidth;\n                    self.ctx.strokeStyle = self.style.selectionHandleBorderColor;\n                    self.ctx.fillStyle = self.style.selectionHandleColor;\n                    selectionHandles.forEach(function (c) {\n                        addselectionHandle(c[0], c[1]);\n                        var az = self.attributes.touchSelectHandleZone / 2,\n                            ax = c[0].x + (c[1] === 'tl' || c[1] === 'bl' ? 0 : c[0].width) - az,\n                            ay = c[0].y + (c[1] === 'bl' || c[1] === 'br' ? c[0].height : 0) - az;\n                        self.visibleCells.unshift({\n                            x: ax,\n                            y: ay,\n                            height: self.style.selectionHandleSize + az,\n                            width: self.style.selectionHandleSize + az,\n                            style: 'selection-handle-' + c[1]\n                        });\n                    });\n                }\n            }\n            function drawActiveCell() {\n                if (!aCell) { return; }\n                self.ctx.save();\n                var cl = self.activeCell.columnIndex + 1 > self.frozenColumn || self.activeCell.rowIndex + 1 > self.frozenRow,\n                    acx = cl ? self.lastFrozenColumnPixel : 0,\n                    acy = cl ? self.lastFrozenRowPixel : 0,\n                    acw = cl ? self.width - self.lastFrozenColumnPixel : self.width,\n                    ach = cl ? self.height - self.lastFrozenRowPixel : self.height;\n                radiusRect(acx, acy, acw, ach, 0);\n                self.ctx.clip();\n                if (self.attributes.selectionMode === 'row') {\n                    if (self.activeCell && self.activeCell.rowIndex === aCell.rowIndex) {\n                        self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                        self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                        strokeRect(0, aCell.y, self.getHeaderWidth() + rowHeaderCellWidth, self.visibleRowHeights[aCell.rowIndex]);\n                    }\n                } else {\n                    self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                    self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                    strokeRect(aCell.x, aCell.y, aCell.width, aCell.height);\n                }\n                self.ctx.restore();\n            }\n            function drawFrozenMarkers() {\n                var my = self.lastFrozenRowPixel - self.style.frozenMarkerWidth,\n                    mx = self.lastFrozenColumnPixel - self.style.frozenMarkerBorderWidth,\n                    xHover = self.currentCell && self.currentCell.style === 'frozen-row-marker',\n                    yHover = self.currentCell && self.currentCell.style === 'frozen-column-marker';\n                self.ctx.lineWidth = self.style.frozenMarkerBorderWidth;\n                if (self.attributes.allowFreezingColumns) {\n                    self.ctx.fillStyle = yHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = yHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    strokeRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    self.visibleCells.unshift({\n                        x: mx,\n                        y: 0,\n                        height: self.height,\n                        width: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        style: 'frozen-column-marker'\n                    });\n                }\n                if (self.attributes.allowFreezingRows) {\n                    self.ctx.fillStyle = xHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = xHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    strokeRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    self.visibleCells.unshift({\n                        x: 0,\n                        y: my,\n                        height: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        width: self.width,\n                        style: 'frozen-row-marker'\n                    });\n                }\n                if (self.freezeMarkerPosition) {\n                    self.ctx.fillStyle = self.style.frozenMarkerActiveColor;\n                    self.ctx.strokeStyle = self.style.frozenMarkerActiveBorderColor;\n                    if (self.dragMode === 'frozen-column-marker') {\n                        fillRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                        strokeRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                    } else {\n                        fillRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                        strokeRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                    }\n                }\n            }\n            function drawPerfLines() {\n                if (!self.attributes.showPerformance) { return; }\n                var pw = 250,\n                    px = self.width - pw - self.style.scrollBarWidth - (self.style.scrollBarBorderWidth * 2),\n                    py = columnHeaderCellHeight,\n                    ph = 100;\n                if (scrollDebugCounters.length === 0) { scrollDebugCounters = self.fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (touchPPSCounters.length === 0) { touchPPSCounters = self.fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (entityCount.length === 0) { entityCount = self.fillArray(0, perfWindowSize, 1, 0); }\n                self.ctx.lineWidth = 0.5;\n                function dpl(name, perfArr, arrIndex, max, color, useAbs, rowIndex) {\n                    var v;\n                    drawPerfLine(pw, ph, px, py, perfArr, arrIndex, max, color, useAbs);\n                    self.ctx.fillStyle = color;\n                    fillRect(3 + px, py + 9 + (rowIndex * 11), 8, 8);\n                    self.ctx.fillStyle = '#999999';\n                    v = arrIndex !== undefined ? perfArr[0][arrIndex] : perfArr[0];\n                    fillText(name + ' ' + (isNaN(v) ? 0 : v).toFixed(3), 14 + px, py + 16 + (rowIndex * 11));\n                }\n                self.ctx.textAlign = 'left';\n                self.ctx.font = '8px sans-serif';\n                self.ctx.fillStyle = 'rgba(29, 25, 26, 1.00)';\n                fillRect(px, py, pw, ph);\n                [['Scroll Height', scrollDebugCounters, 0, self.scrollBox.scrollHeight, 'rgba(248, 33, 103, 1.00)', false],\n                    ['Scroll Width', scrollDebugCounters, 1, self.scrollBox.scrollWidth, 'rgba(66, 255, 27, 1.00)', false],\n                    ['Performance', perfCounters, undefined, 200, 'rgba(252, 255, 37, 1.00)', false],\n                    ['Entities', entityCount, undefined, 1500, 'rgba(76, 231, 239, 1.00)', false],\n                    ['TouchPPSX', touchPPSCounters, 0, 1000, 'rgba(246, 102, 24, 1.00)', true],\n                    ['TouchPPSY', touchPPSCounters, 1, 1000, 'purple', true]\n                    ].forEach(function (i, index) {\n                    i.push(index);\n                    dpl.apply(null, i);\n                });\n                self.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n                entityCount.pop();\n                entityCount.unshift(self.visibleCells.length);\n                scrollDebugCounters.pop();\n                scrollDebugCounters.unshift([self.scrollBox.scrollTop, self.scrollBox.scrollLeft]);\n                touchPPSCounters.pop();\n                touchPPSCounters.unshift([self.yPPS, self.xPPS]);\n            }\n            function drawDebug() {\n                self.ctx.save();\n                var d;\n                if (self.attributes.showPerformance || self.attributes.debug) {\n                    if (perfCounters.length === 0) { perfCounters = self.fillArray(0, perfWindowSize, 1, 0); }\n                    perfCounters.pop();\n                    perfCounters.unshift(performance.now() - p);\n                }\n                if (!self.attributes.debug) {\n                    self.ctx.restore();\n                    return;\n                }\n                self.ctx.font = '14px sans-serif';\n                d = {};\n                d.perf = (perfCounters.reduce(function (a, b) {\n                    return a + b;\n                }, 0) / Math.min(drawCount, perfCounters.length)).toFixed(1);\n                d.htmlImages = Object.keys(self.htmlImageCache).length;\n                d.reorderObject = 'x: ' + (self.reorderObject || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderObject || {rowIndex: 0}).rowIndex;\n                d.reorderTarget = 'x: ' + (self.reorderTarget || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderTarget || {rowIndex: 0}).rowIndex;\n                d.scale = self.scale;\n                d.startScale = self.startScale;\n                d.scaleDelta = self.scaleDelta;\n                d.zoomDeltaStart = self.zoomDeltaStart;\n                d.touchLength = self.touchLength;\n                d.touches = 'y0: ' + (self.touchPosition || {y: 0}).y + ' y1: ' + (self.touchPosition1 || {y: 0}).y;\n                d.scrollBox = self.scrollBox.toString();\n                d.scrollIndex = 'x: ' + self.scrollIndexLeft + ', y: ' + self.scrollIndexTop;\n                d.scrollPixel = 'x: ' + self.scrollPixelLeft + ', y: ' + self.scrollPixelTop;\n                d.canvasOffset = 'x: ' + self.canvasOffsetLeft + ', y: ' + self.canvasOffsetTop;\n                d.touchDelta = 'x: ' + self.touchDelta.x + ', y: ' + self.touchDelta.y;\n                d.touchAnimateTo = 'x: ' + self.touchAnimateTo.x + ', y: ' + self.touchAnimateTo.y;\n                d.scrollAnimation = 'x: ' + self.scrollAnimation.x + ', y: ' + self.scrollAnimation.y;\n                d.touchPPS = 'x: ' + self.xPPS + ', y: ' + self.yPPS;\n                d.touchPPST = 'x: ' + self.xPPST + ', y: ' + self.yPPST;\n                d.touchDuration = self.touchDuration;\n                d.pointerLockPosition =  self.pointerLockPosition ?\n                        self.pointerLockPosition.x + ', ' + self.pointerLockPosition.y : '';\n                d.size = 'w: ' + self.width + ', h: ' + self.height;\n                d.mouse = 'x: ' + self.mouse.x + ', y: ' + self.mouse.y;\n                d.touch = !self.touchStart\n                    ? '' : 'x: ' + self.touchStart.x + ', y: ' + self.touchStart.y;\n                d.entities = self.visibleCells.length;\n                d.hasFocus = self.hasFocus;\n                d.dragMode = self.dragMode;\n                if (self.currentCell) {\n                    d.columnIndex = self.currentCell.columnIndex;\n                    d.rowIndex = self.currentCell.rowIndex;\n                    d.sortColumnIndex = self.currentCell.sortColumnIndex;\n                    d.sortRowIndex = self.currentCell.sortRowIndex;\n                    d.context = self.currentCell.context;\n                    d.dragContext = self.currentCell.dragContext;\n                    d.style = self.currentCell.style;\n                    d.type = self.currentCell.type;\n                }\n                self.ctx.textAlign = 'right';\n                self.ctx.fillStyle = 'rgba(0, 0, 0, .60)';\n                fillRect(0, 0, self.width, self.height);\n                Object.keys(d).forEach(function (key, index) {\n                    var m = key + ': ' + d[key],\n                        lh = 14;\n                    self.ctx.fillStyle = 'rgba(37, 254, 21, 1)';\n                    fillText(m, w - 20, 140 + (index * lh));\n                });\n                self.ctx.restore();\n            }\n            self.ctx.save();\n            initDraw();\n            drawBackground();\n            drawFrozenRows();\n            drawRows();\n            drawActiveCell();\n            drawHeaders();\n            drawFrozenMarkers();\n            drawSelectionBorders();\n            drawSelectionHandles();\n            drawReorderMarkers();\n            drawMoveMarkers();\n            drawScrollBars();\n            if (checkScrollHeight) {\n                self.resize(true);\n            }\n            drawBorder();\n            drawDebug();\n            drawPerfLines();\n            if (self.dispatchEvent('afterdraw', {})) { return; }\n            self.ctx.restore();\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/draw.js\n// module id = 3\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var wheeling;\n        self.stopPropagation = function (e) { e.stopPropagation(); };\n        /**\n         * Adds an event listener to the given event.\n         * @memberof canvasDatagrid\n         * @name addEventListener\n         * @method\n         * @param {string} ev The name of the event to subscribe to.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.addEventListener = function (ev, fn) {\n            self.events[ev] = self.events[ev] || [];\n            self.events[ev].unshift(fn);\n        };\n        /**\n         * Removes the given listener function from the given event.  Must be an actual reference to the function that was bound.\n         * @memberof canvasDatagrid\n         * @name removeEventListener\n         * @method\n         * @param {string} ev The name of the event to unsubscribe from.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.removeEventListener = function (ev, fn) {\n            (self.events[ev] || []).forEach(function removeEachListener(sfn, idx) {\n                if (fn === sfn) {\n                    self.events[ev].splice(idx, 1);\n                }\n            });\n        };\n        /**\n         * Fires the given event, padding an event object to the event subscribers.\n         * @memberof canvasDatagrid\n         * @name dispatchEvent\n         * @method\n         * @param {number} ev The name of the event to dispatch.\n         * @param {number} e The event object.\n         */\n        self.dispatchEvent = function (ev, e) {\n            var defaultPrevented;\n            function preventDefault() {\n                defaultPrevented = true;\n            }\n            if (!self.events[ev]) { return; }\n            self.events[ev].forEach(function dispatchEachEvent(fn) {\n                e.ctx = self.ctx;\n                e.preventDefault = preventDefault;\n                fn.apply(self.intf, [e]);\n            });\n            return defaultPrevented;\n        };\n        self.resize = function (drawAfterResize) {\n            if (!self.canvas) { return; }\n            var bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                cellBorder = self.style.cellBorderWidth * bm,\n                columnHeaderCellBorder = self.style.columnHeaderCellBorderWidth * bm,\n                scrollHeight,\n                scrollWidth,\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                ch = self.style.cellHeight,\n                // TODO: What the hell are these numbers!?  They are probably some value in the style.\n                scrollDragPositionOffsetY = 30,\n                scrollDragPositionOffsetX = 15;\n            scrollHeight = self.data.reduce(function reduceData(accumulator, row, rowIndex) {\n                return accumulator\n                    + (((self.sizes.rows[row[self.uniqueId]] || ch) + (self.sizes.trees[row[self.uniqueId]] || 0)) * self.scale)\n                    + cellBorder\n                    // HACK? if an expanded tree row is frozen it is necessary to add the tree row's height a second time.\n                    + (self.frozenRow > rowIndex ? (self.sizes.trees[row[self.uniqueId]] || 0) : 0);\n            }, 0) || 0;\n            scrollWidth = self.getVisibleSchema().reduce(function reduceSchema(accumulator, column) {\n                if (column.hidden) { return accumulator; }\n                return accumulator + ((self.sizes.columns[column[self.uniqueId]] || column.width || self.style.cellWidth) * self.scale) + cellBorder;\n            }, 0) || 0;\n            if (self.isChildGrid) {\n                self.width = self.parentNode.offsetWidth;\n                self.height = self.parentNode.offsetHeight;\n            } else {\n                self.height = self.canvas.offsetHeight;\n                self.width = self.canvas.offsetWidth;\n                self.canvas.width = self.width * window.devicePixelRatio;\n                self.canvas.height = self.height * window.devicePixelRatio;\n                self.canvasOffsetLeft = self.args.canvasOffsetLeft || 0;\n                self.canvasOffsetTop = self.args.canvasOffsetTop || 0;\n            }\n            if (self.attributes.showNewRow) {\n                scrollHeight += ch + cellBorder;\n            }\n            self.scrollBox.width = self.width - rowHeaderCellWidth;\n            self.scrollBox.height = self.height - columnHeaderCellHeight - columnHeaderCellBorder;\n            self.scrollBox.top = columnHeaderCellHeight + columnHeaderCellBorder;\n            self.scrollBox.left = rowHeaderCellWidth;\n            self.scrollBox.scrollHeight = scrollHeight + self.style.scrollBarWidth - self.scrollBox.height;\n            self.scrollBox.scrollWidth = scrollWidth + self.style.scrollBarWidth - self.scrollBox.width;\n            self.scrollBox.widthBoxRatio = ((self.scrollBox.width - scrollDragPositionOffsetX)\n                / (self.scrollBox.scrollWidth + self.scrollBox.width - scrollDragPositionOffsetX));\n            self.scrollBox.scrollBoxWidth = self.scrollBox.width\n                * self.scrollBox.widthBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.heightBoxRatio = ((self.scrollBox.height - scrollDragPositionOffsetY)\n                / (self.scrollBox.scrollHeight + (self.scrollBox.height - scrollDragPositionOffsetY)));\n            self.scrollBox.scrollBoxHeight = self.scrollBox.height\n                * self.scrollBox.heightBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.scrollBoxWidth = Math.max(self.scrollBox.scrollBoxWidth, self.style.scrollBarBoxMinSize);\n            self.scrollBox.scrollBoxHeight = Math.max(self.scrollBox.scrollBoxHeight, self.style.scrollBarBoxMinSize);\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            self.resizeEditInput();\n            self.scroll(true);\n            if (drawAfterResize) {\n                self.draw(true);\n            }\n            self.dispatchEvent('resize', {});\n            return true;\n        };\n        self.scroll = function (dontDraw) {\n            var bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                s = self.getVisibleSchema(),\n                cellBorder = self.style.cellBorderWidth * bm,\n                ch = self.style.cellHeight;\n            self.scrollIndexTop = 0;\n            self.scrollPixelTop = 0;\n            self.scrollIndexLeft = 0;\n            self.scrollPixelLeft = 0;\n            while (self.scrollPixelTop < self.scrollBox.scrollTop && self.scrollIndexTop < self.data.length) {\n                self.scrollPixelTop +=\n                    (((self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || ch)\n                        + (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0)) * self.scale)\n                    + cellBorder;\n                self.scrollIndexTop += 1;\n            }\n            while (self.scrollPixelLeft < self.scrollBox.scrollLeft && self.scrollIndexLeft < s.length) {\n                self.scrollPixelLeft +=\n                    ((self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]]\n                        || s[self.scrollIndexLeft].width\n                        || self.style.cellWidth) * self.scale)\n                    + cellBorder;\n                self.scrollIndexLeft += 1;\n            }\n            if (self.data.length > 0) {\n                self.scrollIndexLeft = Math.max(self.scrollIndexLeft - 1, 0);\n                self.scrollPixelLeft = Math.max(self.scrollPixelLeft\n                    - ((self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width || self.style.cellWidth) * self.scale), 0);\n                self.scrollIndexTop = Math.max(self.scrollIndexTop - 1, 0);\n                self.scrollPixelTop = Math.max((self.scrollPixelTop\n                    - ((self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || ch)\n                    + (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0)) * self.scale), 0);\n            }\n            self.ellipsisCache = {};\n            if (!dontDraw) {\n                self.draw(true);\n            }\n            //TODO: figure out why this has to be delayed for child grids\n            //BUG: wheeling event on 3rd level hierarchy fails to move input box\n            requestAnimationFrame(self.resizeEditInput);\n            self.dispatchEvent('scroll', {top: self.scrollBox.scrollTop, left: self.scrollBox.scrollLeft});\n        };\n        self.mousemove = function (e, overridePos) {\n            if (self.contextMenu || self.input) {\n                return;\n            }\n            self.mouse = overridePos || self.getLayerPos(e);\n            var ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                i,\n                vs = self.getVisibleSchema(),\n                dragBounds,\n                sBounds,\n                x = self.mouse.x,\n                y = self.mouse.y,\n                o = self.getCellAt(x, y),\n                delta,\n                ev = {NativeEvent: e, cell: o, x: x, y: y},\n                previousCell = self.currentCell;\n            clearTimeout(self.scrollTimer);\n            if (!self.isInGrid({x: x, y: y})) {\n                self.hasFocus = false;\n            }\n            if (self.dispatchEvent('mousemove', ev)) {\n                return;\n            }\n            if (o && self.currentCell && (self.currentCell.rowIndex !== o.rowIndex\n                    || self.currentCell.columnIndex !== o.columnIndex)) {\n                self.cellBoundaryCrossed = true;\n                ev.cell = previousCell;\n                self.dispatchEvent('cellmouseout', ev);\n                ev.cell = o;\n                self.dispatchEvent('cellmouseover', ev);\n            }\n            self.currentCell = o;\n            if (!self.hasFocus) {\n                return;\n            }\n            self.hovers = {};\n            if (!self.draggingItem\n                    && o\n                    && self.scrollModes.indexOf(o.context) === -1) {\n                self.dragItem = o;\n                self.dragMode = o.dragContext;\n                self.canvas.style.cursor = o.context;\n                if (o.context === 'cell' && o.data) {\n                    self.canvas.style.cursor = 'default';\n                    self.hovers[o.data[self.uniqueId]] = [o.columnIndex];\n                }\n                if ((self.selecting || self.reorderObject)\n                        && o.context === 'cell'\n                        && o.data) {\n                    sBounds = self.getSelectionBounds();\n                    delta = {\n                        x: Math.abs(self.dragStart.x - x),\n                        y: Math.abs(self.dragStart.y - y)\n                    };\n                    if (self.dragStartObject.columnIndex !== -1 && e.shiftKey) {\n                        self.dragStartObject = {\n                            rowIndex: self.activeCell.rowIndex,\n                            columnIndex: self.activeCell.columnIndex\n                        };\n                    }\n                    dragBounds = {\n                        top: Math.min(self.dragStartObject.rowIndex, o.rowIndex),\n                        left: Math.min(self.dragStartObject.columnIndex, o.columnIndex),\n                        bottom: Math.max(self.dragStartObject.rowIndex, o.rowIndex),\n                        right: Math.max(self.dragStartObject.columnIndex, o.columnIndex)\n                    };\n                    if (self.dragStartObject.columnIndex === -1) {\n                        dragBounds.left = -1;\n                        dragBounds.right = vs.length - 1;\n                        dragBounds.top = Math.min(sBounds.top, o.rowIndex);\n                        dragBounds.bottom = Math.max(sBounds.bottom, o.rowIndex);\n                    }\n                    if (self.dragStartObject.rowIndex !== o.rowIndex\n                                || self.dragStartObject.columnIndex !== o.columnIndex) {\n                        self.ignoreNextClick = true;\n                    }\n                    if (self.cellBoundaryCrossed || (delta.x === 0 && delta.y === 0) || (self.attributes.selectionMode === 'row')) {\n                        if ((self.attributes.selectionMode === 'row') || self.dragStartObject.columnIndex === -1) {\n                            self.selectRow(o.rowIndex, ctrl, null, true);\n                        } else {\n                            if (!self.dragAddToSelection && o.rowIndex !== undefined) {\n                                if (self.selections[o.rowIndex] && self.selections[o.rowIndex].indexOf(o.columnIndex) !== -1) {\n                                    self.selections[o.rowIndex].splice(self.selections[o.rowIndex].indexOf(o.columnIndex), 1);\n                                }\n                            } else {\n                                self.selections[o.rowIndex] = self.selections[o.rowIndex] || [];\n                                if (self.selections[o.rowIndex].indexOf(o.columnIndex) === -1) {\n                                    self.selections[o.rowIndex].push(o.columnIndex);\n                                }\n                            }\n                        }\n                    }\n                    if ((!self.selectionBounds || (dragBounds.top !== self.selectionBounds.top\n                            || dragBounds.left !== self.selectionBounds.left\n                            || dragBounds.bottom !== self.selectionBounds.bottom\n                            || dragBounds.right !== self.selectionBounds.right)) && !ctrl) {\n                        self.selections = [];\n                        sBounds = dragBounds;\n                        if (self.attributes.selectionMode === 'row') {\n                            for (i = sBounds.top; i <= sBounds.bottom; i += 1) {\n                                self.selectRow(i, true, null, true);\n                            }\n                        } else {\n                            self.selectArea(sBounds, true);\n                        }\n                    }\n                    self.autoScrollZone(e, x, y, ctrl);\n                }\n            }\n            self.cellBoundaryCrossed = false;\n            self.draw(true);\n        };\n        self.click = function (e, overridePos) {\n            var i,\n                ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                pos = overridePos || self.getLayerPos(e);\n            self.currentCell = self.getCellAt(pos.x, pos.y);\n            if (self.currentCell.grid !== undefined) {\n                return;\n            }\n            function checkSelectionChange() {\n                self.dispatchEvent('selectionchanged', {\n                    selectedData: self.getSelectedData(),\n                    selections: self.selections,\n                    selectionBounds: self.selectionBounds\n                });\n            }\n            if (self.input) {\n                self.endEdit();\n            }\n            if (self.ignoreNextClick) {\n                self.ignoreNextClick = false;\n                return;\n            }\n            i = self.currentCell;\n            if (self.dispatchEvent('click', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (['rowHeaderCell', 'columnHeaderCell'].indexOf(self.currentCell.style) === -1 && !ctrl) {\n                self.setActiveCell(i.columnIndex, i.rowIndex);\n            }\n            if (self.currentCell.context === 'cell') {\n                if (self.currentCell.style === 'cornerCell') {\n                    self.selectAll();\n                    self.draw();\n                    checkSelectionChange();\n                    return;\n                }\n                if (self.currentCell.style === 'columnHeaderCell') {\n                    if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                        if (self.orderBy === i.header.name) {\n                            self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                        } else {\n                            self.orderDirection = 'asc';\n                        }\n                        self.order(i.header.name, self.orderDirection);\n                        checkSelectionChange();\n                        return;\n                    }\n                    if (self.attributes.columnHeaderClickBehavior === 'select') {\n                        self.selectColumn(i.header.index, ctrl, e.shiftKey, true);\n                        checkSelectionChange();\n                        self.draw();\n                        return;\n                    }\n                }\n                self.selections[i.rowIndex] = self.selections[i.rowIndex] || [];\n                if (((self.attributes.selectionMode === 'row') || self.currentCell.style === 'rowHeaderCell')) {\n                    if (self.currentCell.style === 'rowHeaderCell'\n                            && self.attributes.tree && pos.x > 0\n                            && pos.x - self.currentCell.x < self.style.treeArrowWidth\n                            + self.style.treeArrowMarginLeft\n                            + self.style.treeArrowMarginRight + self.style.treeArrowClickRadius\n                            && pos.y - self.currentCell.y < self.style.treeArrowHeight\n                            + self.style.treeArrowMarginTop + self.style.treeArrowClickRadius\n                            && pos.y > 0) {\n                        self.toggleTree(i.rowIndex);\n                        return;\n                    }\n                }\n                if (e.shiftKey && !ctrl) {\n                    self.selectionBounds = self.getSelectionBounds();\n                    self.selectArea(undefined, false);\n                }\n            }\n            checkSelectionChange();\n            self.draw(true);\n        };\n        self.dragResizeColumn = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = self.resizingStartingWidth + pos.x - self.dragStart.x;\n            y = self.resizingStartingHeight + pos.y - self.dragStart.y;\n            if (x < self.style.minColumnWidth) {\n                x = self.style.minColumnWidth;\n            }\n            if (y < self.style.minRowHeight) {\n                y = self.style.minRowHeight;\n            }\n            if (self.dispatchEvent('resizecolumn', {x: x, y: y, draggingItem: self.draggingItem})) { return false; }\n            if (self.scrollBox.scrollLeft > self.scrollBox.scrollWidth - self.attributes.resizeScrollZone\n                    && self.dragMode === 'ew-resize') {\n                self.resize(true);\n                self.scrollBox.scrollLeft += x;\n            }\n            if (self.dragMode === 'ew-resize') {\n                self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] = x;\n                if (['rowHeaderCell', 'cornerCell'].indexOf(self.draggingItem.header.style) !== -1) {\n                    self.resize(true);\n                }\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.dragMode === 'ns-resize') {\n                if (self.draggingItem.rowOpen) {\n                    self.sizes.trees[self.draggingItem.data[self.uniqueId]] = y;\n                } else if (self.attributes.globalRowResize) {\n                    self.style.cellHeight = y;\n                } else {\n                    self.sizes.rows[self.draggingItem.data[self.uniqueId]] = y;\n                }\n                self.dispatchEvent('resizerow', {row: y});\n                self.resizeChildGrids();\n                return;\n            }\n            self.ellipsisCache = {};\n        };\n        self.stopDragResize = function () {\n            self.resize();\n            document.body.removeEventListener('mousemove', self.dragResizeColumn, false);\n            document.body.removeEventListener('mouseup', self.stopDragResize, false);\n            self.setStorageData();\n            self.draw(true);\n            self.ignoreNextClick = true;\n        };\n        self.scrollGrid = function (e) {\n            var pos = self.getLayerPos(e);\n            if (self.attributes.scrollPointerLock && self.pointerLockPosition\n                    && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                self.pointerLockPosition.x += e.movementX;\n                self.pointerLockPosition.y += e.movementY;\n                self.pointerLockPosition.x = Math.min(self.width - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.x));\n                self.pointerLockPosition.y = Math.min(self.height - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.y));\n                pos = self.pointerLockPosition;\n            }\n            self.scrollMode = self.getCellAt(pos.x, pos.y).context;\n            if (self.scrollMode === 'horizontal-scroll-box' && self.scrollStartMode !== 'horizontal-scroll-box') {\n                self.scrollStartMode = 'horizontal-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.left = self.scrollBox.scrollLeft;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box' && self.scrollStartMode !== 'vertical-scroll-box') {\n                self.scrollStartMode = 'vertical-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.top = self.scrollBox.scrollTop;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollStartMode === 'vertical-scroll-box'\n                    && self.scrollMode !== 'vertical-scroll-box') {\n                self.scrollMode = 'vertical-scroll-box';\n            }\n            if (self.scrollStartMode === 'horizontal-scroll-box'\n                    && self.scrollMode !== 'horizontal-scroll-box') {\n                self.scrollMode = 'horizontal-scroll-box';\n            }\n            clearTimeout(self.scrollTimer);\n            if (self.scrollModes.indexOf(self.scrollMode) === -1) {\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box') {\n                self.scrollBox.scrollTop = self.scrollStart.top + ((pos.y - self.dragStart.y)\n                    / self.scrollBox.heightBoxRatio);\n            } else if (self.scrollMode === 'vertical-scroll-top') {\n                self.scrollBox.scrollTop -= (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'vertical-scroll-bottom') {\n                self.scrollBox.scrollTop += (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n            if (self.scrollMode === 'horizontal-scroll-box') {\n                self.scrollBox.scrollLeft = self.scrollStart.left + ((pos.x - self.dragStart.x)\n                    / self.scrollBox.widthBoxRatio);\n            } else if (self.scrollMode === 'horizontal-scroll-right') {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'horizontal-scroll-left') {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.stopScrollGrid = function () {\n            clearTimeout(self.scrollTimer);\n            if (document.exitPointerLock) {\n                document.exitPointerLock();\n            }\n            document.body.removeEventListener('mousemove', self.scrollGrid, false);\n        };\n        self.dragReorder = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = pos.x - self.dragStart.x;\n            y = pos.y - self.dragStart.y;\n            if (!self.attributes.allowColumnReordering && self.dragMode === 'column-reorder') {\n                return;\n            }\n            if (!self.attributes.allowRowReordering && self.dragMode === 'row-reorder') {\n                return;\n            }\n            if (self.dispatchEvent('reordering', {\n                    NativeEvent: e,\n                    source: self.dragStartObject,\n                    target: self.currentCell,\n                    dragMode: self.dragMode\n                })) {\n                return;\n            }\n            if (Math.abs(x) > self.attributes.reorderDeadZone || Math.abs(y) > self.attributes.reorderDeadZone) {\n                self.reorderObject = self.draggingItem;\n                self.reorderTarget = self.currentCell;\n                self.reorderObject.dragOffset = {\n                    x: x,\n                    y: y\n                };\n                self.autoScrollZone(e, pos.x, pos.y, false);\n            }\n        };\n        self.stopDragReorder = function (e) {\n            var oIndex,\n                tIndex,\n                cr = {\n                    'row-reorder': self.orders.rows,\n                    'column-reorder': self.orders.columns\n                },\n                i = {\n                    'row-reorder': 'rowIndex',\n                    'column-reorder': 'columnIndex'\n                }[self.dragMode];\n            document.body.removeEventListener('mousemove', self.dragReorder, false);\n            document.body.removeEventListener('mouseup', self.stopDragReorder, false);\n            if (self.reorderObject\n                    && self.reorderTarget\n                    && ((self.dragMode === 'column-reorder' && self.reorderTarget.columnIndex > -1\n                        && self.reorderTarget.columnIndex < self.getVisibleSchema().length)\n                    || (self.dragMode === 'row-reorder' && self.reorderTarget.rowIndex > -1\n                        && self.reorderTarget.rowIndex < self.data.length))\n                    && self.reorderObject[i] !== self.reorderTarget[i]\n                    && !self.dispatchEvent('reorder', {\n                        NativeEvent: e,\n                        source: self.reorderObject,\n                        target: self.reorderTarget,\n                        dragMode: self.dragMode\n                    })) {\n                self.ignoreNextClick = true;\n                oIndex = cr[self.dragMode].indexOf(self.reorderObject[i]);\n                tIndex = cr[self.dragMode].indexOf(self.reorderTarget[i]);\n                cr[self.dragMode].splice(oIndex, 1);\n                cr[self.dragMode].splice(tIndex, 0, self.reorderObject[i]);\n                self.setStorageData();\n            }\n            self.reorderObject = undefined;\n            self.reorderTarget = undefined;\n            self.draw(true);\n        };\n        self.dragMove = function (e) {\n            if (self.dispatchEvent('moving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.moveOffset = {\n                x: self.currentCell.columnIndex - self.dragStartObject.columnIndex,\n                y: self.currentCell.rowIndex - self.dragStartObject.rowIndex\n            };\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopDragMove = function (e) {\n            document.body.removeEventListener('mousemove', self.dragMove, false);\n            document.body.removeEventListener('mouseup', self.stopDragMove, false);\n            var b = self.getSelectionBounds();\n            if (self.dispatchEvent('endmove', {NativeEvent: e, cell: self.currentCell})) {\n                self.movingSelection = undefined;\n                self.moveOffset = undefined;\n                self.draw(true);\n                return;\n            }\n            if (self.moveOffset) {\n                self.moveTo(self.movingSelection, b.left + self.moveOffset.x, b.top + self.moveOffset.y);\n                self.moveSelection(self.moveOffset.x, self.moveOffset.y);\n            }\n            self.movingSelection = undefined;\n            self.moveOffset = undefined;\n            self.draw(true);\n        };\n        self.freezeMove = function (e) {\n            if (self.dispatchEvent('freezemoving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.ignoreNextClick = true;\n            self.freezeMarkerPosition = pos;\n            if (self.currentCell && self.currentCell.rowIndex !== undefined && self.dragMode === 'frozen-row-marker') {\n                self.scrollBox.scrollTop = 0;\n                self.frozenRow = self.currentCell.rowIndex + 1;\n            }\n            if (self.currentCell && self.currentCell.columnIndex !== undefined && self.dragMode === 'frozen-column-marker') {\n                self.scrollBox.scrollLeft = 0;\n                self.frozenColumn = self.currentCell.columnIndex + 1;\n            }\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopFreezeMove = function (e) {\n            document.body.removeEventListener('mousemove', self.freezeMove, false);\n            document.body.removeEventListener('mouseup', self.stopFreezeMove, false);\n            self.freezeMarkerPosition = undefined;\n            if (self.dispatchEvent('endfreezemove', {NativeEvent: e})) {\n                self.frozenRow = self.startFreezeMove.x;\n                self.frozenColumn = self.startFreezeMove.y;\n                self.draw(true);\n                return;\n            }\n            self.draw(true);\n        };\n        self.mousedown = function (e, overridePos) {\n            self.lastMouseDownTarget = e.target;\n            if (self.dispatchEvent('mousedown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (e.button === 2 || self.input) { return; }\n            var ctrl = (e.ctrlKey || e.metaKey),\n                move = /-move/.test(self.dragMode),\n                freeze = /frozen-row-marker|frozen-column-marker/.test(self.dragMode),\n                resize = /-resize/.test(self.dragMode);\n            self.dragStart = overridePos || self.getLayerPos(e);\n            self.scrollStart = {\n                left: self.scrollBox.scrollLeft,\n                top: self.scrollBox.scrollTop\n            };\n            self.dragStartObject = self.getCellAt(self.dragStart.x, self.dragStart.y);\n            self.dragAddToSelection = !self.dragStartObject.selected;\n            if (!ctrl && !e.shiftKey && !/(vertical|horizontal)-scroll-(bar|box)/\n                    .test(self.dragStartObject.context)\n                    && self.currentCell\n                    && !self.currentCell.isColumnHeader\n                    && !move\n                    && !freeze\n                    && !resize) {\n                self.selections = [];\n            }\n            if (self.dragStartObject.isGrid) {\n                return;\n            }\n            if (self.scrollModes.indexOf(self.dragStartObject.context) !== -1) {\n                self.scrollMode = self.dragStartObject.context;\n                self.scrollStartMode = self.dragStartObject.context;\n                self.scrollGrid(e);\n                if (self.attributes.scrollPointerLock\n                        && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                    self.pointerLockPosition = {\n                        x: self.dragStart.x,\n                        y: self.dragStart.y\n                    };\n                    self.canvas.requestPointerLock();\n                }\n                document.body.addEventListener('mousemove', self.scrollGrid, false);\n                document.body.addEventListener('mouseup', self.stopScrollGrid, false);\n                self.ignoreNextClick = true;\n                return;\n            }\n            if (self.dragMode === 'cell') {\n                self.selecting = true;\n                if (self.attributes.selectionMode === 'row') {\n                    self.selectRow(self.dragStartObject.rowIndex, ctrl, null, true);\n                }\n                return self.mousemove(e);\n            }\n            if (move) {\n                self.draggingItem = self.dragItem;\n                self.movingSelection = self.selections.concat([]);\n                self.dragging = self.dragStartObject;\n                if (self.dispatchEvent('beginmove', {NativeEvent: e, cell: self.currentCell})) { return; }\n                document.body.addEventListener('mousemove', self.dragMove, false);\n                document.body.addEventListener('mouseup', self.stopDragMove, false);\n                return self.mousemove(e);\n            }\n            if (freeze) {\n                self.draggingItem = self.dragItem;\n                self.startFreezeMove = {\n                    x: self.frozenRow,\n                    y: self.frozenColumn\n                };\n                if (self.dispatchEvent('beginfreezemove', {NativeEvent: e})) { return; }\n                document.body.addEventListener('mousemove', self.freezeMove, false);\n                document.body.addEventListener('mouseup', self.stopFreezeMove, false);\n                return self.mousemove(e);\n            }\n            if (resize) {\n                self.draggingItem = self.dragItem;\n                if (self.draggingItem.rowOpen) {\n                    self.resizingStartingHeight = self.sizes.trees[self.draggingItem.data[self.uniqueId]];\n                } else {\n                    self.resizingStartingHeight = self.sizes.rows[self.draggingItem.data[self.uniqueId]] || self.style.cellHeight;\n                }\n                self.resizingStartingWidth = self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] || self.draggingItem.width;\n                document.body.addEventListener('mousemove', self.dragResizeColumn, false);\n                document.body.addEventListener('mouseup', self.stopDragResize, false);\n            }\n            if (['row-reorder', 'column-reorder'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragStartObject;\n                document.body.addEventListener('mousemove', self.dragReorder, false);\n                document.body.addEventListener('mouseup', self.stopDragReorder, false);\n            }\n        };\n        self.mouseup = function (e) {\n            clearTimeout(self.scrollTimer);\n            self.cellBoundaryCrossed = true;\n            self.selecting = undefined;\n            self.draggingItem = undefined;\n            self.dragStartObject = undefined;\n            if (self.dispatchEvent('mouseup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            if (self.currentCell && self.currentCell.grid !== undefined) {\n                return;\n            }\n            if (self.contextMenu || self.input) { return; }\n            if (self.dragStart && self.isInGrid(self.dragStart)) {\n                self.controlInput.focus();\n            }\n            e.preventDefault();\n        };\n        self.keydown = function (e) {\n            var i,\n                x = self.activeCell.columnIndex,\n                y = self.activeCell.rowIndex,\n                ctrl = (e.ctrlKey || e.metaKey),\n                last = self.data.length - 1,\n                cols = self.getVisibleSchema().length - 1;\n            if (self.dispatchEvent('keydown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            if (self.attributes.showNewRow) {\n                last += 1;\n            }\n            if (e.keyCode === 9) {\n                e.preventDefault();\n            }\n            // esc\n            if (e.keyCode === 27) {\n                self.selections = [];\n                self.draw(true);\n            // ctrl + a\n            } else if (ctrl && e.keyCode === 65) {\n                self.selectAll();\n            //ArrowDown\n            } else if (e.keyCode === 40) {\n                y += 1;\n            //ArrowUp\n            } else if (e.keyCode === 38) {\n                y -= 1;\n            //ArrowLeft Tab\n            } else if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {\n                x -= 1;\n            //ArrowRight Tab\n            } else if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {\n                x += 1;\n            //PageUp\n            } else if (e.keyCode === 33) {\n                y -= self.page;\n                e.preventDefault();\n            //PageDown\n            } else if (e.keyCode === 34) {\n                y += self.page;\n                e.preventDefault();\n            //Home ArrowUp\n            } else if (e.keyCode === 36 || (ctrl && e.keyCode === 38)) {\n                y = 0;\n            //End ArrowDown\n            } else if (e.keyCode === 35 || (ctrl && e.keyCode === 40)) {\n                y = self.data.length - 1;\n            //ArrowRight\n            } else if (ctrl && e.keyCode === 39) {\n                x = cols;\n            //ArrowLeft\n            } else if (ctrl && e.keyCode === 37) {\n                x = 0;\n            }\n            //Enter\n            if (e.keyCode === 13) {\n                return self.beginEditAt(x, y);\n            }\n            //Space\n            if (e.keyCode === 32) {\n                self.selections = [];\n                self.selections[Math.max(y, 0)] = [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                if (self.attributes.selectionMode === 'row') {\n                    for (i = self.selectionBounds.top; i <= self.selectionBounds.bottom; i += 1) {\n                        self.selectRow(i, ctrl, null, true);\n                    }\n                } else {\n                    self.selectArea(undefined, ctrl);\n                }\n                e.preventDefault();\n                self.draw(true);\n                return;\n            }\n            if (x < 0) {\n                x = 0;\n            }\n            if (y > last) {\n                y = last;\n            }\n            if (y < 0) {\n                y = 0;\n            }\n            if (x > cols) {\n                x = cols;\n            }\n            // Arrows\n            if (e.shiftKey && [37, 38, 39, 40].indexOf(e.keyCode) !== -1) {\n                self.selections[Math.max(y, 0)] = self.selections[Math.max(y, 0)] || [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                self.selectArea(undefined, ctrl);\n                self.draw(true);\n            }\n            if (x !== self.activeCell.columnIndex || y !== self.activeCell.rowIndex) {\n                self.scrollIntoView(x !== self.activeCell.columnIndex ? x : undefined, y !== self.activeCell.rowIndex ? y : undefined);\n                self.setActiveCell(x, y);\n                if (!e.shiftKey && self.attributes.selectionFollowsActiveCell) {\n                    if (!ctrl) {\n                        self.selections = [];\n                    }\n                    self.selections[y] = self.selections[y] || [];\n                    self.selections[y].push(x);\n                    self.dispatchEvent('selectionchanged', {\n                        selectedData: self.getSelectedData(),\n                        selections: self.selections,\n                        selectionBounds: self.selectionBounds\n                    });\n                }\n                self.draw(true);\n            }\n        };\n        self.keyup = function (e) {\n            if (self.dispatchEvent('keyup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n        };\n        self.keypress = function (e) {\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.dispatchEvent('keypress', {NativeEvent: e, cell: self.currentCell})) { return; }\n        };\n        self.dblclick = function (e) {\n            if (self.dispatchEvent('dblclick', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'columnHeaderCell') {\n                self.fitColumnToValues(self.currentCell.header.name);\n            } else if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'cornerCell') {\n                self.autosize();\n            } else if (['cell', 'activeCell'].indexOf(self.currentCell.style) !== -1) {\n                self.beginEditAt(self.currentCell.columnIndex, self.currentCell.rowIndex);\n            }\n        };\n        self.scrollWheel = function (e) {\n            var l,\n                t,\n                deltaX = e.deltaX === undefined ? e.NativeEvent.deltaX : e.deltaX,\n                deltaY = e.deltaY === undefined ? e.NativeEvent.deltaY : e.deltaY,\n                deltaMode = e.deltaMode === undefined ? e.NativeEvent.deltaMode : e.deltaMode;\n            if (wheeling) {\n                return;\n            }\n            if (self.dispatchEvent('wheel', {NativeEvent: e})) {\n                return;\n            }\n            e = e.NativeEvent || e;\n            self.touchHaltAnimation = true;\n            l = self.scrollBox.scrollLeft;\n            t = self.scrollBox.scrollTop;\n            if (self.hasFocus) {\n                //BUG Issue 42: https://github.com/TonyGermaneri/canvas-datagrid/issues/42\n                //https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\n                if (deltaMode === 1) {\n                    // line mode = 17 pixels per line\n                    deltaY = deltaY * 17;\n                }\n                if ((self.scrollBox.scrollTop < self.scrollBox.scrollHeight && deltaY > 0)\n                        || (self.scrollBox.scrollLeft < self.scrollBox.scrollWidth && deltaX > 0)\n                        || (self.scrollBox.scrollTop > 0 && deltaY < 0)\n                        || (self.scrollBox.scrollLeft > 0 && deltaX < 0)) {\n                    e.preventDefault(e);\n                }\n                wheeling = setTimeout(function () {\n                    wheeling = undefined;\n                    self.scrollBox.scrollTo(deltaX + l, deltaY + t);\n                }, 1);\n            }\n        };\n        self.pasteItem = function (clipData, x, y, mimeType) {\n            var l, s = self.getVisibleSchema(), yi = y - 1, sel = [];\n            function normalizeRowData(importingRow, existingRow, offsetX, schema, mimeType, rowIndex) {\n                var r = existingRow;\n                if (!Array.isArray(importingRow) && importingRow !== null && typeof importingRow === 'object') {\n                    importingRow = Object.keys(importingRow).map(function (colKey) {\n                        return importingRow[colKey];\n                    });\n                }\n                if (/^text\\/html/.test(mimeType)) {\n                    importingRow = importingRow.substring(4, importingRow.length - 5).split('</td><td>');\n                }\n                if (typeof importingRow === 'string') {\n                    importingRow = [importingRow];\n                }\n                sel[rowIndex] = [];\n                importingRow.forEach(function (cellData, colIndex) {\n                    var cName = schema[colIndex + offsetX].name;\n                    if (importingRow[colIndex] === undefined || importingRow[colIndex] === null) {\n                        r[cName] = existingRow[cName];\n                        return;\n                    }\n                    sel[rowIndex].push(colIndex + offsetX);\n                    r[cName] = importingRow[colIndex];\n                });\n                return r;\n            }\n            if (/^text\\/html/.test(mimeType)) {\n                if (!/^(<meta[^>]+>)?<table>/.test(clipData.substring(0, 29))) {\n                    console.warn('Unrecognized HTML format.  HTML must be a simple table, e.g.: <table><tr><td>data</td></tr></table>.  Data with the mime type text/html not in this format will not be imported as row data.');\n                    return;\n                }\n                // strip table beginning and ending off, then split at rows\n                clipData = clipData.substring(clipData.indexOf('<table><tr>') + 11, clipData.length - 13).split('</tr><tr>');\n            } else {\n                clipData = clipData.split('\\n');\n            }\n            l = clipData.length;\n            clipData.forEach(function (rowData) {\n                yi += 1;\n                self.data[yi] = normalizeRowData(rowData, self.data[yi], x, s, mimeType, yi);\n            });\n            self.selections = sel;\n            return l;\n        };\n        self.paste = function (e) {\n            var d;\n            function getItem(dti) {\n                var type = dti.type;\n                dti.getAsString(function (s) {\n                    self.pasteItem(s, self.activeCell.columnIndex, self.activeCell.rowIndex, type);\n                    self.draw();\n                });\n            }\n            d = Array.prototype.filter.call(e.clipboardData.items, function (dti) {\n                return dti.type === 'text/html';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/csv';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/plain';\n            })[0];\n            if (!d) {\n                console.warn('Cannot find supported clipboard data type.  Supported types are text/html, text/csv, text/plain.');\n                return;\n            }\n            getItem(d);\n        };\n        self.cut = function (e) {\n            self.copy(e);\n            self.forEachSelectedCell(function (data, index, colName) {\n                data[index][colName] = '';\n            });\n        };\n        self.copy = function (e) {\n            if (self.dispatchEvent('copy', {NativeEvent: e})) { return; }\n            if (!self.hasFocus || !e.clipboardData) { return; }\n            var t,\n                d,\n                rows = [],\n                trows = [],\n                sData = self.getSelectedData();\n            function fCopyCell(d) {\n                d = d === null || d === undefined ? '' : d;\n                return '<td>' + (typeof d === 'string' ? d.replace(/</g, '&lt;').replace(/>/g, '&gt;') : d) + '</td>';\n            }\n            if (sData.length > 0) {\n                sData.forEach(function (row) {\n                    if (row) {\n                        // r = array for HTML, rt = array for plain text\n                        var r = [],\n                            rt = [];\n                        Object.keys(row).forEach(function (key) {\n                            // escape strings\n                            if (row[key] !== null\n                                    && row[key] !== false\n                                    && row[key] !== undefined\n                                    && row[key].replace) {\n                                rt.push('\"' + row[key].replace(/\"/g, '\"\"') + '\"');\n                                r.push(fCopyCell(row[key]));\n                                return;\n                            }\n                            rt.push(row[key]);\n                            r.push(fCopyCell(row[key]));\n                        });\n                        rows.push(r.join(''));\n                        trows.push(rt.join(','));\n                    }\n                });\n                d = '<table><tr>' + rows.join('</tr><tr>') + '</tr></table>';\n                t = trows.join('\\n');\n                e.clipboardData.setData('text/html', d);\n                e.clipboardData.setData('text/plain', t);\n                e.clipboardData.setData('text/csv', t);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/events.js\n// module id = 4\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var touchTimerMs = 50,\n            touchScrollTimeout;\n        self.scrollAnimation = {};\n        self.touchDelta = {};\n        self.touchAnimateTo = {};\n        self.animationFrames = 0;\n        self.getTouchPos = function (e, touchIndex) {\n            var t = touchIndex ? e.touches[touchIndex] : e.touches[0],\n                rect = self.canvas.getBoundingClientRect(),\n                pos;\n            if (!t) { return; }\n            pos = {\n                x: t.clientX - rect.left,\n                y: t.clientY - rect.top\n            };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        // shamelessly stolen from from https://gist.github.com/gre/1650294\n        self.easingFunctions = {\n            linear: function (t) { return t; },\n            easeInQuad: function (t) { return t * t; },\n            easeOutQuad: function (t) { return t * (2 - t); },\n            easeInOutQuad: function (t) { return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t; },\n            easeInCubic: function (t) { return t * t * t; },\n            easeOutCubic: function (t) { return (--t) * t * t + 1; },\n            easeInOutCubic: function (t) { return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1; },\n            easeInQuart: function (t) { return t * t * t * t; },\n            easeOutQuart: function (t) { return 1 - (--t) * t * t * t; },\n            easeInOutQuart: function (t) { return t < 0.5 ? 8 * t  * t  * t * t : 1 - 8 * (--t) * t * t * t; },\n            easeInQuint: function (t) { return t * t * t * t * t; },\n            easeOutQuint: function (t) { return 1 + (--t) * t *  t * t * t; },\n            easeInOutQuint: function (t) { return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t; }\n        };\n        self.easing = function (t, b, c, d) {\n            return c * self.easingFunctions[self.attributes.touchEasingMethod](t / d) + b;\n        };\n        self.calculatePPSTimed = function () {\n            self.xPPST = -((self.touchDelta.x - self.touchSigmaTimed.x) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.yPPST = -((self.touchDelta.y - self.touchSigmaTimed.y) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.touchSigmaTimed = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.calculatePPS = function () {\n            self.xPPS = -((self.touchDelta.x - self.touchSigma.x) / (self.touchDelta.t - self.touchSigma.t));\n            self.yPPS = -((self.touchDelta.y - self.touchSigma.y) / (self.touchDelta.t - self.touchSigma.t));\n            self.touchSigma = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.touchEndAnimation = function () {\n            if (!self.canvas || !self.scrollBox.scrollTo) { return requestAnimationFrame(self.touchEndAnimation); }\n            var n = performance.now(),\n                d = self.attributes.touchReleaseAnimationDurationMs,\n                t;\n            t = n - self.touchDelta.t;\n            self.animationFrames += 1;\n            self.scrollAnimation.x = self.easing(t, self.touchDelta.scrollLeft, self.touchAnimateTo.x, d);\n            self.scrollAnimation.y = self.easing(t, self.touchDelta.scrollTop, self.touchAnimateTo.y, d);\n            if (t > d || (self.scrollAnimation.y === self.scrollBox.scrollTop\n                    && self.scrollAnimation.x === self.scrollBox.scrollLeft) || self.stopAnimation) {\n                return;\n            }\n            self.scrollBox.scrollTo(self.scrollAnimation.x, self.scrollAnimation.y);\n            requestAnimationFrame(self.touchEndAnimation);\n        };\n        self.touchEditCell = function (cell) {\n            self.beginEditAt(cell.columnIndex, cell.rowIndex);\n        };\n        self.touchCell = function (e) {\n            return function () {\n                clearInterval(self.calculatePPSTimer);\n                var i, pos = self.getTouchPos(e);\n                if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone) {\n                    i = self.getCellAt(pos.x, pos.y);\n                    if (!i) { return; }\n                    if (self.touchingCell && self.touchingCell.rowIndex === i.rowIndex\n                            && self.touchingCell.columnIndex === i.columnIndex) {\n                        self.touchEditCell(i);\n                        return;\n                    }\n                    if (self.input && self.input.editCell) {\n                        self.endEdit();\n                    }\n                    self.touchingCell = i;\n                    self.selectArea({\n                        top: i.rowIndex,\n                        bottom: i.rowIndex,\n                        left: i.columnIndex,\n                        right: i.columnIndex\n                    });\n                    self.draw(true);\n                }\n            };\n        };\n        self.touchstart = function (e) {\n            if (self.dispatchEvent('touchstart', {NativeEvent: e})) { return; }\n            self.disposeContextMenu();\n            clearInterval(self.calculatePPSTimer);\n            clearTimeout(self.touchContextTimeout);\n            self.touchStartEvent = e;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (e.changedTouches[0]) {\n                self.touchStart = self.getTouchPos(e);\n            }\n            if (e.touches.length === 1 && e.changedTouches[0] && !self.zoomAltered) {\n                self.touchLength = 1;\n                self.touchStart = self.touchStart || self.touchStart1;\n                self.touchScrollStart = {\n                    x: self.scrollBox.scrollLeft,\n                    y: self.scrollBox.scrollTop,\n                    t: performance.now()\n                };\n                self.touchDelta = {\n                    x: 0,\n                    y: 0,\n                    scrollLeft: self.scrollBox.scrollLeft,\n                    scrollTop: self.scrollBox.scrollTop,\n                    t: self.touchScrollStart.t\n                };\n                self.touchSigma = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchSigmaTimed = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchContextTimeout = setTimeout(function () {\n                    self.contextmenuEvent(e, self.touchStart);\n                }, self.attributes.touchContextMenuTimeMs);\n                self.calculatePPSTimer = setInterval(self.calculatePPSTimed, touchTimerMs);\n                self.startingCell = self.getCellAt(self.touchStart.x, self.touchStart.y, true);\n                if (self.startingCell && (self.startingCell.isGrid || ['tree', 'inherit'].indexOf(self.startingCell.context) !== -1)) {\n                    self.hasFocus = false;\n                    return;\n                }\n                self.hasFocus = true;\n                if (self.startingCell.isHeader) {\n                    if (self.startingCell.isRowHeader) {\n                        self.selectArea({\n                            top: self.startingCell.rowIndex,\n                            bottom: self.startingCell.rowIndex,\n                            left: 0,\n                            right: self.getVisibleSchema().length - 1,\n                        });\n                        self.draw(true);\n                    } else if (self.startingCell.isColumnHeader) {\n                        if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                            if (self.orderBy === self.startingCell.header.name) {\n                                self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                            } else {\n                                self.orderDirection = 'asc';\n                            }\n                            self.order(self.startingCell.header.name, self.orderDirection);\n                        }\n                        if (self.attributes.columnHeaderClickBehavior === 'select') {\n                            self.selectArea({\n                                top: 0,\n                                bottom: self.data.length - 1,\n                                left: self.startingCell.columnIndex,\n                                right: self.startingCell.columnIndex,\n                            });\n                            self.draw(true);\n                        }\n                    }\n                    self.touchEndEvents(e);\n                    return;\n                }\n            }\n            if (self.zoomAltered) { return; }\n            document.body.addEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.addEventListener('touchend', self.touchend, false);\n            document.body.addEventListener('touchcancel', self.touchcancel, false);\n            self.draw(true);\n        };\n        self.touchSelect = function (cell, handleType) {\n            if (cell.rowIndex === undefined || cell.columnIndex === undefined) { return; }\n            self.touchSelecting = true;\n            var bounds = self.getSelectionBounds();\n            if (handleType === 'selection-handle-bl'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex <= bounds.right) {\n                bounds.bottom = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tl'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex <= bounds.right) {\n                bounds.top = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tr'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex >= bounds.left) {\n                bounds.top = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            } else if (handleType === 'selection-handle-br'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex >= bounds.left) {\n                bounds.bottom = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            }\n            if (self.attributes.selectionMode === 'row' || cell.rowIndex === -1) {\n                bounds.left = 0;\n                bounds.right = self.getSchema().length - 1;\n            } else {\n                bounds.left = Math.max(0, bounds.left);\n            }\n            self.selectArea(bounds);\n            self.draw(true);\n        };\n        self.touchmove = function (e) {\n            var ch, rw, rScrollZone, lScrollZone, bScrollZone, tScrollZone, sbw, t1, t2;\n            if (self.dispatchEvent('touchmove', {NativeEvent: e})) { return; }\n            clearTimeout(touchScrollTimeout);\n            if (e.changedTouches[0]) {\n                self.touchPosition = self.getTouchPos(e);\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = self.getTouchPos(e, 1);\n            }\n            if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) > self.attributes.touchDeadZone) {\n                clearTimeout(self.touchContextTimeout);\n            }\n            if (e.touches.length === 2 && self.touchPosition && self.touchPosition1) {\n                t1 = self.touchPosition.y;\n                t2 = self.touchPosition1.y;\n                if (!self.zoomDeltaStart) {\n                    self.zoomDeltaStart = Math.abs(t1 - t2);\n                    self.startScale = self.scale;\n                }\n                self.touchLength = 2;\n                self.scaleDelta = self.zoomDeltaStart - Math.abs(t1 - t2);\n                self.scale = self.startScale - (self.scaleDelta * self.attributes.touchZoomSensitivity);\n                self.scale = Math.min(Math.max(self.scale, self.attributes.touchZoomMin), self.attributes.touchZoomMax);\n                self.zoomAltered = true;\n                self.resize(true);\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.zoomAltered) { return; }\n            self.touchLength = 1;\n            self.touchPosition = self.touchPosition || self.touchPosition1;\n            ch = self.getColumnHeaderCellHeight();\n            rw = self.getRowHeaderCellWidth();\n            rScrollZone = self.width - self.style.scrollBarWidth - self.touchPosition.x < self.attributes.selectionScrollZone;\n            lScrollZone = self.touchPosition.x - rw < self.attributes.selectionScrollZone;\n            bScrollZone = self.height - self.style.scrollBarWidth - self.touchPosition.y < self.attributes.selectionScrollZone;\n            tScrollZone = self.touchPosition.y - ch < self.attributes.selectionScrollZone;\n            sbw = self.style.scrollBarWidth;\n            function touchScroll() {\n                var x = self.scrollBox.scrollLeft,\n                    y = self.scrollBox.scrollTop;\n                x += (rScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y += (bScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y -= (tScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                x -= (lScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                self.scrollBox.scrollTo(x, y);\n                touchScrollTimeout = setTimeout(touchScroll, self.attributes.scrollRepeatRate);\n            }\n            e.stopPropagation();\n            self.touchDelta = {\n                x: self.touchPosition.x - self.touchStart.x,\n                y: self.touchPosition.y - self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: performance.now()\n            };\n            self.currentCell = self.getCellAt(self.touchPosition.x, self.touchPosition.y);\n            self.calculatePPS();\n            self.touchDuration = performance.now() - self.touchScrollStart.t;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            if (self.touchSelecting && (rScrollZone || lScrollZone || tScrollZone || bScrollZone)) {\n                touchScroll();\n            }\n            if (/vertical-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollTop = self.scrollBox.scrollHeight\n                    * ((self.touchPosition.y - ch - sbw) / (self.scrollBox.height - sbw - ch));\n                return;\n            }\n            if (/horizontal-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollLeft = self.scrollBox.scrollWidth\n                    * ((self.touchPosition.x - rw - sbw) / (self.scrollBox.width - sbw - rw));\n                return;\n            }\n            if (/selection-handle-/.test(self.startingCell.style)) {\n                self.touchSelect(self.currentCell, self.startingCell.style);\n                return;\n            }\n            self.scrollBox.scrollTo(self.touchScrollStart.x - self.touchDelta.x,\n                self.touchScrollStart.y - self.touchDelta.y);\n            self.draw(true);\n        };\n        self.touchEndEvents = function (e) {\n            self.zoomDeltaStart = undefined;\n            self.touchSelecting = false;\n            clearInterval(self.touchScrollTimeout);\n            clearInterval(self.touchContextTimeout);\n            clearInterval(self.calculatePPSTimer);\n            e.stopPropagation();\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n        };\n        self.touchend = function (e) {\n            if (self.dispatchEvent('touchend', {NativeEvent: e})) { return; }\n            self.zoomDeltaStart = undefined;\n            if (e.changedTouches[0]) {\n                self.touchPosition = undefined;\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = undefined;\n            }\n            if (self.zoomAltered) {\n                if (e.touches.length === 0) {\n                    self.zoomAltered = false;\n                }\n                return;\n            }\n            var dz = Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone;\n            if (isNaN(self.xPPS)) {\n                self.xPPS = 0;\n            }\n            if (isNaN(self.yPPS)) {\n                self.yPPS = 0;\n            }\n            if (isNaN(self.xPPST)) {\n                self.xPPST = 0;\n            }\n            if (isNaN(self.yPPST)) {\n                self.yPPST = 0;\n            }\n            self.touchAnimateTo.x = self.xPPS * self.attributes.touchReleaseAcceleration;\n            self.touchAnimateTo.y = self.yPPS * self.attributes.touchReleaseAcceleration;\n            self.calculatePPSTimed();\n            if (dz && !self.contextMenu) {\n                self.touchCell(self.touchStartEvent)();\n            } else if (self.animationFrames === 0\n                    && (Math.abs(self.xPPST) > self.attributes.scrollAnimationPPSThreshold\n                        || Math.abs(self.yPPST) > self.attributes.scrollAnimationPPSThreshold)\n                    && !/-scroll-/.test(self.startingCell.style)\n                    && !dz) {\n                self.stopAnimation = false;\n                self.touchEndAnimation();\n            }\n            self.touchEndEvents(e);\n        };\n        self.touchcancel = function (e) {\n            if (self.dispatchEvent('touchcancel', {NativeEvent: e})) { return; }\n            self.touchEndEvents(e);\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/touch.js\n// module id = 5\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals HTMLElement: false, Reflect: false, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self, ctor) {\n        self.scale = 1;\n        self.orders = {\n            rows: [],\n            columns: []\n        };\n        self.visibleRowHeights = [];\n        self.hasFocus = false;\n        self.activeCell = {\n            columnIndex: 0,\n            rowIndex: 0\n        };\n        self.storageName = 'canvasDataGrid';\n        self.invalidSearchExpClass = 'canvas-datagrid-invalid-search-regExp';\n        self.localStyleLibraryStorageKey = 'canvas-datagrid-user-style-library';\n        self.uniqueId = '_canvasDataGridUniqueId';\n        self.orderBy = self.uniqueId;\n        self.orderDirection = 'asc';\n        self.columnFilters = {};\n        self.filters = {};\n        self.frozenRow = 0;\n        self.frozenColumn = 0;\n        self.ellipsisCache = {};\n        self.scrollBox = {};\n        self.visibleRows = [];\n        self.sizes = {\n            rows: {},\n            columns: {},\n            trees: {}\n        };\n        self.currentFilter = function () {\n            return true;\n        };\n        self.selections = [];\n        self.hovers = {};\n        self.attributes = {};\n        self.style = {};\n        self.formatters = {};\n        self.sorters = {};\n        self.schemaHashes = {};\n        self.events = {};\n        self.uId = 0;\n        self.changes = [];\n        self.scrollIndexTop = 0;\n        self.scrollPixelTop = 0;\n        self.scrollIndexLeft = 0;\n        self.scrollPixelLeft = 0;\n        self.childGrids = {};\n        self.openChildren = {};\n        self.scrollModes = [\n            'vertical-scroll-box',\n            'vertical-scroll-top',\n            'vertical-scroll-bottom',\n            'horizontal-scroll-box',\n            'horizontal-scroll-right',\n            'horizontal-scroll-left'\n        ];\n        self.componentL1Events = {};\n        self.eventNames = ['afterdraw', 'afterrendercell', 'attributechanged', 'beforebeginedit',\n            'beforecreatecellgrid', 'beforedraw', 'beforeendedit', 'beforerendercell', 'beforerendercellgrid',\n            'beginedit', 'cellmouseout', 'cellmouseover', 'click', 'collapsetree', 'contextmenu', 'copy',\n            'datachanged', 'dblclick', 'endedit', 'expandtree', 'formatcellvalue', 'keydown', 'keypress',\n            'keyup', 'mousedown', 'mousemove', 'mouseup', 'newrow', 'ordercolumn', 'rendercell', 'rendercellgrid',\n            'renderorderbyarrow', 'rendertext', 'rendertreearrow', 'reorder', 'reordering', 'resize',\n            'resizecolumn', 'resizerow', 'schemachanged', 'scroll', 'selectionchanged', 'stylechanged',\n            'touchcancel', 'touchend', 'touchmove', 'touchstart', 'wheel'];\n        self.mouse = { x: 0, y: 0};\n        self.getSelectedData = function (expandToRow) {\n            var d = [], s = expandToRow ? self.getSchema() : self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    if (col === -1 || !s[col]) { return; }\n                    d[index][s[col].name] = self.data[index][s[col].name];\n                });\n            });\n            return d;\n        };\n        self.fillArray = function (low, high, step, def) {\n            step = step || 1;\n            var i = [], x;\n            for (x = low; x <= high; x += step) {\n                i[x] = def === undefined ? x : (typeof def === 'function' ? def(x) : def);\n            }\n            return i;\n        };\n        self.getColumnHeaderCellHeight = function () {\n            if (!self.attributes.showColumnHeaders) { return 0; }\n            return ((self.sizes.rows[-1] || self.style.columnHeaderCellHeight) * self.scale);\n        };\n        self.getRowHeaderCellWidth = function () {\n            if (!self.attributes.showRowHeaders) { return 0; }\n            return (self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth) * self.scale;\n        };\n        self.setStorageData = function () {\n            if (!self.attributes.saveAppearance || !self.attributes.name) { return; }\n            localStorage.setItem(self.storageName + '-' + self.attributes.name, JSON.stringify({\n                sizes: {\n                    rows: self.sizes.rows,\n                    columns: self.sizes.columns\n                },\n                orders: {\n                    rows: self.orders.rows,\n                    columns: self.orders.columns\n                },\n                orderBy: self.orderBy,\n                orderDirection: self.orderDirection\n            }));\n        };\n        self.getSchema = function () {\n            return self.schema || self.tempSchema;\n        };\n        self.createColumnOrders = function () {\n            var s = self.getSchema();\n            self.orders.columns = self.fillArray(0, s.length - 1);\n        };\n        self.createRowOrders = function () {\n            self.orders.rows = self.fillArray(0, self.data.length - 1);\n        };\n        self.getVisibleSchema = function () {\n            return self.getSchema().filter(function (col) {\n                return !col.hidden && col.name !== self.uniqueId;\n            });\n        };\n        self.applyDefaultValue = function (row, header) {\n            var d = header.defaultValue || '';\n            if (typeof d === 'function') {\n                d = d.apply(self.intf, [header]);\n            }\n            row[header.name] = d;\n        };\n        self.createNewRowData = function () {\n            self.newRow = {};\n            self.newRow[self.uniqueId] = self.uId;\n            self.uId += 1;\n            self.getSchema().forEach(function forEachHeader(header) {\n                self.applyDefaultValue(self.newRow, header);\n            });\n        };\n        self.getSchemaNameHash = function (key) {\n            var n = 0;\n            while (self.schemaHashes[key]) {\n                n += 1;\n                key = key + n;\n            }\n            return key;\n        };\n        self.filter = function (type) {\n            var f = self.filters[type];\n            if (!f && type !== undefined) {\n                console.warn('Cannot find filter for type %s, falling back to substring match.', type);\n                f = self.filters.string;\n            }\n            return f;\n        };\n        self.getBestGuessDataType = function (columnName) {\n            var t, x, l = self.data.length;\n            for (x = 0; x < l; x += 1) {\n                if ([null, undefined].indexOf(self.data[x][columnName]) !== -1) {\n                    t = typeof self.data[x];\n                    return t === 'object' ? 'string' : t;\n                }\n            }\n            return 'string';\n        };\n        self.drawChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].draw();\n            });\n        };\n        self.resizeChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].resize();\n            });\n        };\n        self.autoScrollZone = function (e, x, y, ctrl) {\n            var setTimer,\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight();\n            if (x > self.width - self.attributes.selectionScrollZone && x < self.width) {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y > self.height - self.attributes.selectionScrollZone && y < self.height) {\n                self.scrollBox.scrollTop += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (x - self.attributes.selectionScrollZone - rowHeaderCellWidth < 0) {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y - self.attributes.selectionScrollZone - columnHeaderCellHeight < 0) {\n                self.scrollBox.scrollTop -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (setTimer && !ctrl && self.currentCell && self.currentCell.columnIndex !== -1) {\n                self.scrollTimer = setTimeout(self.mousemove, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.refreshFromOrigialData = function () {\n            self.data = self.originalData.filter(function (row) {\n                return true;\n            });\n        };\n        self.validateColumn = function (c, s) {\n            if (!c.name) {\n                throw new Error('A column must contain at least a name.');\n            }\n            if (s.filter(function (i) { return i.name === c.name; }).length > 0) {\n                throw new Error('A column with the name '\n                    + c.name + ' already exists and cannot be added again.');\n            }\n            return true;\n        };\n        self.setDefaults = function (obj1, obj2, key, def) {\n            obj1[key] = obj2[key] === undefined ? def : obj2[key];\n        };\n        self.setAttributes = function () {\n            self.defaults.attributes.forEach(function eachAttribute(i) {\n                self.setDefaults(self.attributes, self.args, i[0], i[1]);\n            });\n        };\n        self.setStyle = function () {\n            self.defaults.styles.forEach(function eachStyle(i) {\n                self.setDefaults(self.style, self.args.style || {}, i[0], i[1]);\n            });\n        };\n        self.autosize = function (colName) {\n            self.getVisibleSchema().forEach(function (col) {\n                if (col.name === colName || colName === undefined) {\n                    self.fitColumnToValues(col.name);\n                }\n            });\n            self.fitColumnToValues('cornerCell');\n        };\n        self.dispose = function () {\n            if (!self.isChildGrid && self.canvas && self.canvas.parentNode) {\n                self.canvas.parentNode.removeChild(self.canvas);\n            }\n            self.eventParent.removeEventListener('mouseup', self.mouseup, false);\n            self.eventParent.removeEventListener('mousedown', self.mousedown, false);\n            self.eventParent.removeEventListener('dblclick', self.dblclick, false);\n            self.eventParent.removeEventListener('click', self.click, false);\n            self.eventParent.removeEventListener('mousemove', self.mousemove);\n            self.eventParent.removeEventListener('wheel', self.scrollWheel, false);\n            self.canvas.removeEventListener('contextmenu', self.contextmenu, false);\n            self.canvas.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('keypress', self.keypress, false);\n            self.controlInput.removeEventListener('keyup', self.keyup, false);\n            self.controlInput.removeEventListener('keydown', self.keydown, false);\n            window.removeEventListener('resize', self.resize);\n            if (self.observer && self.observer.disconnect) {\n                self.observer.disconnect();\n            }\n        };\n        self.tryLoadStoredOrders = function () {\n            var s;\n            if (self.storedSettings\n                    && typeof self.storedSettings.orders === 'object'\n                    && self.storedSettings.orders !== null) {\n                if (self.storedSettings.orders.rows.length >= self.data.length) {\n                    self.orders.rows = self.storedSettings.orders.rows;\n                }\n                s = self.getSchema();\n                if (self.storedSettings.orders.columns.length === s.length) {\n                    self.orders.columns = self.storedSettings.orders.columns;\n                }\n                self.orderBy = self.storedSettings.orderBy === undefined\n                    ? self.uniqueId : self.storedSettings.orderBy;\n                self.orderDirection = self.storedSettings.orderDirection === undefined\n                    ? self.uniqueId : self.storedSettings.orderDirection;\n                if (self.orderBy !== self.uniqueId && self.getHeaderByName(self.orderBy) && self.orderDirection) {\n                    self.order(self.orderBy, self.orderDirection);\n                }\n            }\n        };\n        self.getDomRoot = function () {\n            return self.shadowRoot ? self.shadowRoot.host : self.parentNode;\n        };\n        self.getFontName = function (fontStyle) {\n            return fontStyle.replace(/\\d+\\.?\\d*px/, '');\n        };\n        self.getFontHeight = function (fontStyle) {\n            return parseFloat(fontStyle, 10);\n        };\n        self.parseStyleValue = function (key) {\n            if (/Font/.test(key)) {\n                self.style[key + 'Height'] = self.getFontHeight(self.style[key]);\n                self.style[key + 'Name'] = self.getFontName(self.style[key]);\n                return;\n            }\n            // when inheriting styles from already instantiated grids, don't parse already parsed values.\n            if (key === 'moveOverlayBorderSegments' && typeof self.style[key] === 'string') {\n                self.style[key] = self.style[key].split(',')\n                    .map(function (i) { return parseInt(i, 10); });\n            }\n        };\n        self.initProp = function (propName) {\n            if (!self.args[propName]) { return; }\n            Object.keys(self.args[propName]).forEach(function (key) {\n                self[propName][key] = self.args[propName][key];\n            });\n        };\n        self.getStyleProperty = function (key) {\n            if (self.styleKeys.indexOf(key) === -1) {\n                return self.parentNodeStyle[key];\n            }\n            return self.style[key];\n        };\n        self.setStyleProperty = function (key, value, supressDrawAndEvent) {\n            if (self.styleKeys.indexOf(key) === -1) {\n                self.parentNodeStyle[key] = value;\n            } else {\n                self.style[key] = value;\n                self.parseStyleValue(key);\n            }\n            if (!supressDrawAndEvent) {\n                self.draw(true);\n                self.dispatchEvent('stylechanged', {name: 'style', value: value});\n            }\n        };\n        self.reloadStoredValues = function () {\n            if (self.attributes.name && self.attributes.saveAppearance) {\n                self.storedSettings = localStorage.getItem(self.storageName + '-' + self.attributes.name);\n                if (self.storedSettings) {\n                    try {\n                        self.storedSettings = JSON.parse(self.storedSettings);\n                    } catch (e) {\n                        console.warn('could not read settings from localStore', e);\n                        self.storedSettings = undefined;\n                    }\n                }\n                if (self.storedSettings) {\n                    if (typeof self.storedSettings.sizes === 'object'\n                            && self.storedSettings.sizes !== null) {\n                        self.sizes.rows = self.storedSettings.sizes.rows;\n                        self.sizes.columns = self.storedSettings.sizes.columns;\n                        ['trees', 'columns', 'rows'].forEach(function (i) {\n                            if (!self.sizes[i]) {\n                                self.sizes[i] = {};\n                            }\n                        });\n                    }\n                }\n            }\n        };\n        self.init = function () {\n            if (self.initialized) { return; }\n            var publicStyleKeyIntf = {};\n            self.setAttributes();\n            self.setStyle();\n            self.initScrollBox();\n            self.setDom();\n            self.type = 'canvas-datagrid';\n            self.initialized = true;\n            self.ie = /Trident/.test(window.navigator.userAgent);\n            self.edge = /Edge/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.moz = /Gecko/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.mobile = /Mobile/i.test(window.navigator.userAgent);\n            self.cursorGrab = 'grab';\n            self.cursorGrabing = 'grabbing';\n            self.cursorGrab = self.webKit ? '-webkit-grab' : self.cursorGrab;\n            self.cursorGrabing = self.moz ? '-webkit-grabbing' : self.cursorGrabbing;\n            self.pointerLockPosition = {x: 0, y: 0};\n            Object.keys(self.style).forEach(self.parseStyleValue);\n            self.intf.moveSelection = self.moveSelection;\n            self.intf.moveTo = self.moveTo;\n            self.intf.type = self.type;\n            self.intf.addEventListener = self.addEventListener;\n            self.intf.removeEventListener = self.removeEventListener;\n            self.intf.dispatchEvent = self.dispatchEvent;\n            /**\n             * Releases grid resources and removes grid elements.\n             * @memberof canvasDatagrid\n             * @name dispose\n             * @method\n             */\n            self.intf.dispose = self.dispose;\n            /**\n             * Appends the grid to another element later.  Not implemented.\n             * @memberof canvasDatagrid\n             * @name appendTo\n             * @method\n             * @param {number} el The element to append the grid to.\n             */\n            self.intf.appendTo = self.appendTo;\n            self.intf.filters = self.filters;\n            self.intf.sorters = self.sorters;\n            self.intf.autosize = self.autosize;\n            self.intf.beginEditAt = self.beginEditAt;\n            self.intf.endEdit = self.endEdit;\n            self.intf.setActiveCell = self.setActiveCell;\n            self.intf.forEachSelectedCell = self.forEachSelectedCell;\n            self.intf.scrollIntoView = self.scrollIntoView;\n            self.intf.clearChangeLog = self.clearChangeLog;\n            self.intf.gotoCell = self.gotoCell;\n            self.intf.gotoRow = self.gotoRow;\n            self.intf.getHeaderByName = self.getHeaderByName;\n            self.intf.findColumnScrollLeft = self.findColumnScrollLeft;\n            self.intf.findRowScrollTop = self.findRowScrollTop;\n            self.intf.fitColumnToValues = self.fitColumnToValues;\n            self.intf.findColumnMaxTextLength = self.findColumnMaxTextLength;\n            self.intf.disposeContextMenu = self.disposeContextMenu;\n            self.intf.getCellAt = self.getCellAt;\n            self.intf.isCellVisible = self.isCellVisible;\n            self.intf.order = self.order;\n            self.intf.draw = self.draw;\n            self.intf.selectArea = self.selectArea;\n            self.intf.clipElement = self.clipElement;\n            self.intf.getSchemaFromData = self.getSchemaFromData;\n            self.intf.setFilter = self.setFilter;\n            self.intf.selectRow = self.selectRow;\n            self.intf.parentGrid = self.parentGrid;\n            self.intf.toggleTree = self.toggleTree;\n            self.intf.expandTree = self.expandTree;\n            self.intf.collapseTree = self.collapseTree;\n            self.intf.canvas = self.canvas;\n            self.intf.context = self.ctx;\n            self.intf.insertRow = self.insertRow;\n            self.intf.deleteRow = self.deleteRow;\n            self.intf.addRow = self.addRow;\n            self.intf.insertColumn = self.insertColumn;\n            self.intf.deleteColumn = self.deleteColumn;\n            self.intf.addColumn = self.addColumn;\n            self.intf.getClippingRect = self.getClippingRect;\n            self.intf.setRowHeight = self.setRowHeight;\n            self.intf.setColumnWidth = self.setColumnWidth;\n            self.intf.resetColumnWidths = self.resetColumnWidths;\n            self.intf.resetRowHeights = self.resetRowHeights;\n            self.intf.resize = self.resize;\n            self.intf.selectColumn = self.selectColumn;\n            self.intf.selectRow = self.selectRow;\n            self.intf.selectAll = self.selectAll;\n            self.intf.selectNone = self.selectNone;\n            self.intf.drawChildGrids = self.drawChildGrids;\n            self.intf.assertPxColor = self.assertPxColor;\n            self.intf.clearPxColorAssertions = self.clearPxColorAssertions;\n            self.intf.integerToAlpha = self.integerToAlpha;\n            self.intf.copy = self.copy;\n            self.intf.setStyleProperty = self.setStyleProperty;\n            Object.defineProperty(self.intf, 'defaults', {\n                get: function () {\n                    return {\n                        styles: self.defaults.styles.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {}),\n                        attributes: self.defaults.attributes.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {})\n                    };\n                }\n            });\n            self.styleKeys = Object.keys(self.intf.defaults.styles);\n            self.DOMStyles = window.getComputedStyle(document.body, null);\n            Object.keys(self.DOMStyles).concat(Object.keys(self.style)).forEach(function (key) {\n                // unless this line is here, Object.keys() will not work on <instance>.style\n                publicStyleKeyIntf[key] = undefined;\n                Object.defineProperty(publicStyleKeyIntf, key, {\n                    get: function () {\n                        return self.getStyleProperty(key);\n                    },\n                    set: function (value) {\n                        self.setStyleProperty(key, value);\n                    }\n                });\n            });\n            Object.defineProperty(self.intf, 'shadowRoot', {\n                get: function () {\n                    return self.shadowRoot;\n                }\n            });\n            Object.defineProperty(self.intf, 'activeCell', {\n                get: function () {\n                    return self.activeCell;\n                }\n            });\n            Object.defineProperty(self.intf, 'hasFocus', {\n                get: function () {\n                    return self.hasFocus;\n                }\n            });\n            Object.defineProperty(self.intf, 'style', {\n                get: function () {\n                    return publicStyleKeyIntf;\n                },\n                set: function (valueObject) {\n                    Object.keys(valueObject).forEach(function (key) {\n                        self.setStyleProperty(key, valueObject[key], true);\n                    });\n                    self.draw(true);\n                    self.dispatchEvent('stylechanged', {name: 'style', value: valueObject});\n                }\n            });\n            Object.defineProperty(self.intf, 'attributes', { value: {}});\n            Object.keys(self.attributes).forEach(function (key) {\n                Object.defineProperty(self.intf.attributes, key, {\n                    get: function () {\n                        return self.attributes[key];\n                    },\n                    set: function (value) {\n                        self.attributes[key] = value;\n                        if (key === 'name') {\n                            self.reloadStoredValues();\n                            self.tryLoadStoredOrders();\n                        }\n                        self.draw(true);\n                        self.dispatchEvent('attributechanged', {name: key, value: value[key]});\n                    }\n                });\n            });\n            self.filters.string = function (value, filterFor) {\n                value = String(value);\n                var filterRegExp,\n                    regEnd = /\\/(i|g|m)*$/,\n                    pattern = regEnd.exec(filterFor),\n                    flags = pattern ? pattern[0].substring(1) : '',\n                    flagLength = flags.length;\n                self.invalidFilterRegEx = undefined;\n                if (filterFor.substring(0, 1) === '/' && pattern) {\n                    try {\n                        filterRegExp = new RegExp(filterFor.substring(1, filterFor.length - (flagLength + 1)), flags);\n                    } catch (e) {\n                        self.invalidFilterRegEx = e;\n                        return;\n                    }\n                    return filterRegExp.test(value);\n                }\n                return value.toString ? value.toString().toLocaleUpperCase()\n                    .indexOf(filterFor.toLocaleUpperCase()) !== -1 : false;\n            };\n            self.filters.number = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                return value === filterFor;\n            };\n            ['formatters', 'filters', 'sorters'].forEach(self.initProp);\n            self.reloadStoredValues();\n            if (self.args.data) {\n                self.intf.data = self.args.data;\n            }\n            if (!self.data) {\n                self.intf.data = [];\n            }\n            if (self.args.schema) {\n                self.intf.schema = self.args.schema;\n            }\n            if (self.isChildGrid) {\n                requestAnimationFrame(function () { self.resize(true); });\n            } else {\n                self.resize(true);\n            }\n            return self;\n        };\n        /**\n         * Removes focus from the grid.\n         * @memberof canvasDatagrid\n         * @name blur\n         * @method\n         */\n        self.intf.blur = function (e) {\n            self.hasFocus = false;\n        };\n        /**\n         * Focuses on the grid.\n         * @memberof canvasDatagrid\n         * @name focus\n         * @method\n         */\n        self.intf.focus = function () {\n            self.hasFocus = true;\n            self.controlInput.focus();\n        };\n        Object.defineProperty(self.intf, 'height', {\n            get: function () {\n                if (self.shadowRoot) {\n                    return self.shadowRoot.height;\n                }\n                return self.parentNode.height;\n            },\n            set: function (value) {\n                if (self.shadowRoot) {\n                    self.shadowRoot.height = value;\n                } else {\n                    self.parentNode.height = value;\n                }\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'width', {\n            get: function () {\n                if (self.shadowRoot) {\n                    return self.shadowRoot.width;\n                }\n                return self.parentNode.width;\n            },\n            set: function (value) {\n                if (self.shadowRoot) {\n                    self.shadowRoot.width = value;\n                } else {\n                    self.parentNode.width = value;\n                }\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRowHeights', {\n            get: function () {\n                return self.visibleRowHeights;\n            }\n        });\n        Object.defineProperty(self.intf, 'openChildren', {\n            get: function () {\n                return self.openChildren;\n            }\n        });\n        Object.defineProperty(self.intf, 'childGrids', {\n            get: function () {\n                return Object.keys(self.childGrids).map(function (gridId) {\n                    return self.childGrids[gridId];\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'isChildGrid', {\n            get: function () {\n                return self.isChildGrid;\n            }\n        });\n        Object.defineProperty(self.intf, 'parentNode', {\n            get: function () {\n                return self.parentNode;\n            },\n            set: function (value) {\n                if (!self.isChildGrid) {\n                    throw new TypeError('Cannot set property parentNode which has only a getter');\n                }\n                self.parentNode = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetParent', {\n            get: function () {\n                return self.parentNode;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetLeft', {\n            get: function () {\n                return self.parentNode.offsetLeft;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetTop', {\n            get: function () {\n                return self.parentNode.offsetTop;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollHeight', {\n            get: function () {\n                return self.scrollBox.scrollHeight;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollWidth', {\n            get: function () {\n                return self.scrollBox.scrollWidth;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollTop', {\n            get: function () {\n                return self.scrollBox.scrollTop;\n            },\n            set: function (value) {\n                self.scrollBox.scrollTop = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollLeft', {\n            get: function () {\n                return self.scrollBox.scrollLeft;\n            },\n            set: function (value) {\n                self.scrollBox.scrollLeft = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'sizes', {\n            get: function () {\n                return self.sizes;\n            }\n        });\n        Object.defineProperty(self.intf, 'input', {\n            get: function () {\n                return self.input;\n            }\n        });\n        Object.defineProperty(self.intf, 'controlInput', {\n            get: function () {\n                return self.controlInput;\n            }\n        });\n        Object.defineProperty(self.intf, 'currentCell', {\n            get: function () {\n                return self.currentCell;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleCells', {\n            get: function () {\n                return self.visibleCells;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRows', {\n            get: function () {\n                return self.visibleRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'selections', {\n            get: function () {\n                return self.selections;\n            }\n        });\n        Object.defineProperty(self.intf, 'dragMode', {\n            get: function () {\n                return self.dragMode;\n            }\n        });\n        Object.defineProperty(self.intf, 'changes', {\n            get: function () {\n                return self.changes;\n            }\n        });\n        self.intf.formatters = self.formatters;\n        self.normalizeDataset = function (data, callback) {\n            var i, d, max, syncFnInvoked;\n            if (data === null || data === '' || data === undefined) {\n                return callback([]);\n            }\n            if (typeof data === 'string'\n                    || typeof data === 'number'\n                    || typeof data === 'boolean') {\n                data = [{'0': data}];\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if ((!Array.isArray(data[0]) && typeof data[0] === 'object' && data[0] !== null)\n                            || (Array.isArray(data) && data.length === 0)) {\n                return callback(data);\n            }\n            if (typeof data === 'function') {\n                i = data.apply(self.intf, [function (d) {\n                    if (syncFnInvoked) {\n                        console.warn('Detected a callback to the data setter function after the same function already returned a value synchronously.');\n                    }\n                    self.normalizeDataset(d, callback);\n                }]);\n                if (i) {\n                    syncFnInvoked = true;\n                    self.normalizeDataset(i, callback);\n                }\n                return;\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if (Array.isArray(data)) {\n                if (!Array.isArray(data[0])) {\n                    //array of something?  throw it all into 1 row!\n                    data = [data];\n                }\n                // find the longest length\n                max = 0;\n                d = [];\n                data.forEach(function (row) {\n                    max = Math.max(max, row.length);\n                });\n                // map against length indexes\n                data.forEach(function (row, index) {\n                    var x;\n                    d[index] = {};\n                    for (x = 0; x < max; x += 1) {\n                        d[index][x] = row[x];\n                    }\n                });\n                return callback(d);\n            }\n            throw new Error('Unsupported data type.  Must be an array of arrays or an array of objects, function or string.');\n        };\n        self.eventNames.forEach(function (eventName) {\n            Object.defineProperty(self.intf, 'on' + eventName, {\n                get: function () {\n                    return self.componentL1Events[eventName];\n                },\n                set: function (value) {\n                    self.events[eventName] = [];\n                    self.componentL1Events[eventName] = value;\n                    if (!value) { return; }\n                    self.addEventListener(eventName, value);\n                }\n            });\n        });\n        Object.defineProperty(self.intf, 'frozenRow', {\n            get: function () {\n                return self.frozenRow;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.visibleRows.length > val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible rows.');\n                }\n                self.frozenRow = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'frozenColumn', {\n            get: function () {\n                return self.frozenColumn;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.getVisibleSchema().length > val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible columns.');\n                }\n                self.frozenColumn = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollIndexRect', {\n            get: function () {\n                return {\n                    top: self.scrollIndexTop,\n                    right: self.scrollIndexRight,\n                    bottom: self.scrollIndexBottom,\n                    left: self.scrollIndexLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollPixelRect', {\n            get: function () {\n                return {\n                    top: self.scrollPixelTop,\n                    right: self.scrollPixelRight,\n                    bottom: self.scrollPixelBottom,\n                    left: self.scrollPixelLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'selectionBounds', {\n            get: function () {\n                return self.getSelectionBounds();\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedRows', {\n            get: function () {\n                return self.getSelectedData(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedCells', {\n            get: function () {\n                return self.getSelectedData();\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleSchema', {\n            get: function () {\n                return self.getVisibleSchema().map(function eachDataRow(col) {\n                    return col;\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'ctx', {\n            get: function () {\n                return self.ctx;\n            }\n        });\n        Object.defineProperty(self.intf, 'schema', {\n            get: function schemaGetter() {\n                return self.getSchema();\n            },\n            set: function schemaSetter(value) {\n                if (!Array.isArray(value) || typeof value[0] !== 'object') {\n                    throw new Error('Schema must be an array of objects.');\n                }\n                if (value[0].name === undefined) {\n                    throw new Error('Expected schema to contain an object with at least a name property.');\n                }\n                self.schema = value.map(function eachSchemaColumn(column, index) {\n                    column.width = column.width || self.style.cellWidth;\n                    column[self.uniqueId] = self.getSchemaNameHash(column.name);\n                    column.filter = column.filter || self.filter(column.type);\n                    column.type = column.type || 'string';\n                    column.index = index;\n                    column.columnIndex = index;\n                    column.rowIndex = -1;\n                    return column;\n                });\n                self.tempSchema = undefined;\n                self.createNewRowData();\n                self.createColumnOrders();\n                self.tryLoadStoredOrders();\n                self.resize(true);\n                self.dispatchEvent('schemachanged', {schema: self.schema});\n            }\n        });\n        Object.defineProperty(self.intf, 'data', {\n            get: function dataGetter() {\n                return self.data.map(function (row) {\n                    delete row[self.uniqueId];\n                    return row;\n                });\n            },\n            set: function dataSetter(value) {\n                self.normalizeDataset(value, function (d) {\n                    self.originalData = d.map(function eachDataRow(row) {\n                        row[self.uniqueId] = self.uId;\n                        self.uId += 1;\n                        return row;\n                    });\n                    self.changes = [];\n                    //TODO apply filter to incoming dataset\n                    self.data = self.originalData;\n                    if (!self.schema) {\n                        self.tempSchema = self.getSchemaFromData();\n                    }\n                    if (!self.schema && self.data.length === 0) {\n                        self.tempSchema = [{name: ''}];\n                        self.tempSchema[0][self.uniqueId] = self.getSchemaNameHash('');\n                    }\n                    if (self.tempSchema && !self.schema) {\n                        self.createColumnOrders();\n                        self.tryLoadStoredOrders();\n                        self.dispatchEvent('schemachanged', {schema: self.tempSchema});\n                    }\n                    self.createNewRowData();\n                    if (self.attributes.autoResizeColumns && self.data.length > 0\n                            && self.storedSettings === undefined) {\n                        self.autosize();\n                    }\n                    self.fitColumnToValues('cornerCell', true);\n                    self.resize(true);\n                    self.createRowOrders();\n                    self.tryLoadStoredOrders();\n                    self.dispatchEvent('datachanged', {data: self.data});\n                });\n            }\n        });\n        self.initScrollBox = function () {\n            var sHeight = 0,\n                sWidth = 0,\n                scrollTop = 0,\n                scrollLeft = 0,\n                scrollHeight = 0,\n                scrollWidth = 0,\n                scrollBoxHeight = 20,\n                scrollBoxWidth = 20;\n            function setScrollTop(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollTop value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollHeight) {\n                    value = scrollHeight;\n                }\n                if (scrollHeight < 0) {\n                    value = 0;\n                }\n                scrollTop = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            function setScrollLeft(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollLeft value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollWidth) {\n                    value = scrollWidth;\n                }\n                if (scrollWidth < 0) {\n                    value = 0;\n                }\n                scrollLeft = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            self.scrollBox.toString = function () {\n                return '{\"width\": ' + scrollWidth\n                    + ', \"height\": ' + scrollHeight\n                    + ', \"left\": ' + scrollLeft\n                    + ', \"top\": ' + scrollTop + '}';\n            };\n            self.scrollBox.scrollTo = function (x, y, supressDrawEvent) {\n                setScrollLeft(x, true);\n                setScrollTop(y, supressDrawEvent);\n            };\n            Object.defineProperty(self.scrollBox, 'scrollBoxHeight', {\n                get: function () {\n                    return scrollBoxHeight;\n                },\n                set: function (value) {\n                    scrollBoxHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollBoxWidth', {\n                get: function () {\n                    return scrollBoxWidth;\n                },\n                set: function (value) {\n                    scrollBoxWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'height', {\n                get: function () {\n                    return sHeight;\n                },\n                set: function (value) {\n                    if (scrollHeight < value) {\n                        scrollTop = 0;\n                    }\n                    sHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'width', {\n                get: function () {\n                    return sWidth;\n                },\n                set: function (value) {\n                    sWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollTop', {\n                get: function () {\n                    return scrollTop;\n                },\n                set: setScrollTop\n            });\n            Object.defineProperty(self.scrollBox, 'scrollLeft', {\n                get: function () {\n                    return scrollLeft;\n                },\n                set: setScrollLeft\n            });\n            Object.defineProperty(self.scrollBox, 'scrollHeight', {\n                get: function () {\n                    return scrollHeight;\n                },\n                set: function (value) {\n                    if (scrollTop > value) {\n                        scrollTop = Math.max(value, 0);\n                    }\n                    if (scrollHeight < sHeight) {\n                        scrollTop = 0;\n                    }\n                    scrollHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollWidth', {\n                get: function () {\n                    return scrollWidth;\n                },\n                set: function (value) {\n                    if (scrollLeft > value) {\n                        scrollLeft = Math.max(value, 0);\n                    }\n                    scrollWidth = value;\n                }\n            });\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/intf.js\n// module id = 6\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false, Event: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var zIndexTop = 9000, hoverScrollTimeout, autoCompleteContext;\n        function applyContextItemStyle(contextItemContainer) {\n            self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item' + (self.mobile ? '-mobile' : ''));\n            contextItemContainer.addEventListener('mouseover', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n            });\n            contextItemContainer.addEventListener('mouseout', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n            });\n        }\n        function createContextMenu(ev, pos, items, parentContextMenu) {\n            var container = document.createElement('div'),\n                upArrow = document.createElement('div'),\n                downArrow = document.createElement('div'),\n                children = [],\n                selectedIndex = -1,\n                intf = {},\n                rect;\n            if (!Array.isArray(items)) { throw new Error('createContextMenu expects an array.'); }\n            function createItems() {\n                items.forEach(function (item) {\n                    var contextItemContainer = document.createElement('div'),\n                        childMenuArrow;\n                    function removeChildContext(e) {\n                        if (e.relatedTarget === container\n                                || item.contextMenu.container === e.relatedTarget\n                                || childMenuArrow === e.relatedTarget\n                                || (contextItemContainer === e.relatedTarget)\n                                || item.contextMenu.container.contains(e.relatedTarget)\n                                ) { return; }\n                        item.contextMenu.dispose();\n                        children.splice(children.indexOf(item.contextMenu), 1);\n                        item.contextMenu = undefined;\n                        contextItemContainer.removeEventListener('mouseout', removeChildContext);\n                        container.removeEventListener('mouseout', removeChildContext);\n                        contextItemContainer.setAttribute('contextOpen', '0');\n                        contextItemContainer.setAttribute('opening', '0');\n                    }\n                    function contextAddCallback(items) {\n                        // check yet again if the user hasn't moved off\n                        if (contextItemContainer.getAttribute('opening') !== '1' ||\n                                contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        var cPos = contextItemContainer.getBoundingClientRect();\n                        cPos = {\n                            left: cPos.left + self.style.childContextMenuMarginLeft + container.offsetWidth,\n                            top: cPos.top + self.style.childContextMenuMarginTop,\n                            bottom: cPos.bottom,\n                            right: cPos.right\n                        };\n                        item.contextMenu = createContextMenu(ev, cPos, items, intf);\n                        contextItemContainer.setAttribute('contextOpen', '1');\n                        contextItemContainer.addEventListener('mouseout', removeChildContext);\n                        container.addEventListener('mouseout', removeChildContext);\n                        children.push(item.contextMenu);\n                    }\n                    function createChildContext() {\n                        var i;\n                        if (contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        contextItemContainer.setAttribute('opening', '1');\n                        if (typeof item.items === 'function') {\n                            i  = item.items.apply(intf, [function (items) {\n                                contextAddCallback(items);\n                            }]);\n                            if (i !== undefined && Array.isArray(i)) {\n                                contextAddCallback(i);\n                            }\n                            return;\n                        }\n                        contextAddCallback(item.items);\n                    }\n                    function addItem(item) {\n                        function addContent(content) {\n                            if (content === null) { return; }\n                            if (typeof content === 'function') {\n                                return addContent(content(ev));\n                            }\n                            if (typeof content === 'object') {\n                                contextItemContainer.appendChild(content);\n                                return;\n                            }\n                            applyContextItemStyle(contextItemContainer);\n                            contextItemContainer.innerHTML = content;\n                            return;\n                        }\n                        addContent(item.title);\n                        item.contextItemContainer = contextItemContainer;\n                        if ((item.items && item.items.length > 0) || typeof item.items === 'function') {\n                            childMenuArrow = document.createElement('div');\n                            self.createInlineStyle(childMenuArrow, 'canvas-datagrid-context-child-arrow');\n                            childMenuArrow.innerHTML = self.style.childContextMenuArrowHTML;\n                            contextItemContainer.appendChild(childMenuArrow);\n                            contextItemContainer.addEventListener('mouseover', createChildContext);\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                contextItemContainer.setAttribute('opening', '0');\n                            });\n                        }\n                        if (item.click) {\n                            contextItemContainer.addEventListener('click', function (ev) {\n                                item.click.apply(self, [ev]);\n                            });\n                        }\n                    }\n                    addItem(item);\n                    container.appendChild(contextItemContainer);\n                });\n            }\n            function clickIndex(idx) {\n                items[idx].contextItemContainer.dispatchEvent(new Event('click'));\n            }\n            function checkArrowVisibility() {\n                if (container.scrollTop > 0) {\n                    self.parentDOMNode.appendChild(upArrow);\n                } else if (upArrow.parentNode) {\n                    upArrow.parentNode.removeChild(upArrow);\n                }\n                if (container.scrollTop >= container.scrollHeight - container.offsetHeight && downArrow.parentNode) {\n                    downArrow.parentNode.removeChild(downArrow);\n                } else if (container.scrollHeight - container.offsetHeight > 0\n                        && !(container.scrollTop >= container.scrollHeight - container.offsetHeight)) {\n                    self.parentDOMNode.appendChild(downArrow);\n                }\n            }\n            function startHoverScroll(type) {\n                return function t() {\n                    var a = self.attributes.contextHoverScrollAmount;\n                    if (type === 'up' && container.scrollTop === 0) { return; }\n                    if (type === 'down' && container.scrollTop === container.scrollHeight) { return; }\n                    container.scrollTop += (type === 'up' ? -a : a);\n                    hoverScrollTimeout = setTimeout(t, self.attributes.contextHoverScrollRateMs, type);\n                };\n            }\n            function endHoverScroll(type) {\n                return function () {\n                    clearTimeout(hoverScrollTimeout);\n                };\n            }\n            function init() {\n                var loc = {},\n                    s = self.scrollOffset(self.canvas);\n                createItems();\n                self.createInlineStyle(container, 'canvas-datagrid-context-menu' + (self.mobile ? '-mobile' : ''));\n                loc.x = pos.left - s.left;\n                loc.y = pos.top - s.top;\n                loc.height = 0;\n                zIndexTop += 1;\n                container.style.position = 'absolute';\n                upArrow.style.color = self.style.contextMenuArrowColor;\n                downArrow.style.color = self.style.contextMenuArrowColor;\n                [upArrow, downArrow].forEach(function (el) {\n                    el.style.textAlign = 'center';\n                    el.style.position = 'absolute';\n                    el.style.zIndex = zIndexTop + 1;\n                });\n                container.style.zIndex = zIndexTop;\n                if (parentContextMenu && parentContextMenu.inputDropdown) {\n                    container.style.maxHeight = window.innerHeight - loc.y - self.style.autocompleteBottomMargin + 'px';\n                    container.style.minWidth = pos.width + 'px';\n                    loc.y += pos.height;\n                }\n                if (self.mobile) {\n                    container.style.width = pos.width + 'px';\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                container.addEventListener('scroll', checkArrowVisibility);\n                container.addEventListener('wheel', function (e) {\n                    if (self.hasFocus) {\n                        container.scrollTop += e.deltaY;\n                        container.scrollLeft += e.deltaX;\n                    }\n                    checkArrowVisibility();\n                });\n                upArrow.innerHTML = self.style.contextMenuArrowUpHTML;\n                downArrow.innerHTML = self.style.contextMenuArrowDownHTML;\n                container.appendChild(upArrow);\n                document.body.appendChild(downArrow);\n                document.body.appendChild(container);\n                rect = container.getBoundingClientRect();\n                if (rect.bottom > window.innerHeight && !(parentContextMenu && parentContextMenu.inputDropdown)) {\n                    loc.y = window.innerHeight - container.offsetHeight;\n                    if (loc.y < 0) { loc.y = 0; }\n                    if (container.offsetHeight > window.innerHeight - self.style.contextMenuWindowMargin) {\n                        container.style.height = window.innerHeight - self.style.contextMenuWindowMargin + 'px';\n                        loc.y += self.style.contextMenuWindowMargin * 0.5;\n                    }\n                }\n                if (rect.right > window.innerWidth) {\n                    if (parentContextMenu && parentContextMenu.container) {\n                        loc.x = parentContextMenu.container.offsetLeft - container.offsetWidth;\n                    } else {\n                        loc.x = window.innerWidth - container.offsetWidth;\n                    }\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                rect = container.getBoundingClientRect();\n                upArrow.style.top = rect.top + 'px';\n                downArrow.style.top = rect.top + rect.height - downArrow.offsetHeight + 'px';\n                upArrow.style.left = rect.left + 'px';\n                downArrow.style.left = rect.left + 'px';\n                downArrow.style.width = container.offsetWidth + 'px';\n                upArrow.style.width = container.offsetWidth + 'px';\n                downArrow.addEventListener('mouseover', startHoverScroll('down'));\n                downArrow.addEventListener('mouseout', endHoverScroll('down'));\n                upArrow.addEventListener('mouseover', startHoverScroll('up'));\n                upArrow.addEventListener('mouseout', endHoverScroll('up'));\n                checkArrowVisibility();\n            }\n            intf.parentGrid = self.intf;\n            intf.parentContextMenu = parentContextMenu;\n            intf.container = container;\n            init();\n            intf.clickIndex = clickIndex;\n            intf.rect = rect;\n            intf.items = items;\n            intf.upArrow = upArrow;\n            intf.downArrow = downArrow;\n            intf.dispose = function () {\n                clearTimeout(hoverScrollTimeout);\n                children.forEach(function (c) {\n                    c.dispose();\n                });\n                [downArrow, upArrow, container].forEach(function (el) {\n                    if (el.parentNode) { el.parentNode.removeChild(el); }\n                });\n            };\n            Object.defineProperty(intf, 'selectedIndex', {\n                get: function () {\n                    return selectedIndex;\n                },\n                set: function (value) {\n                    if (typeof value !== 'number' || isNaN(value || !isFinite(value))) {\n                        throw new Error('Context menu selected index must be a sane number.');\n                    }\n                    selectedIndex = value;\n                    if (selectedIndex > items.length - 1) {\n                        selectedIndex = items.length - 1;\n                    }\n                    if (selectedIndex < 0) {\n                        selectedIndex = 0;\n                    }\n                    items.forEach(function (item, index) {\n                        if (index === selectedIndex) {\n                            return self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                        }\n                        self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item');\n                    });\n                }\n            });\n            return intf;\n        }\n        function createFilterContextMenuItems(e) {\n            var filterContainer = document.createElement('div'),\n                filterLabel = document.createElement('div'),\n                filterAutoCompleteButton = document.createElement('button'),\n                filterInput = document.createElement('input'),\n                n = e.cell && e.cell.header ? e.cell.header.title || e.cell.header.name : '',\n                autoCompleteItems,\n                iRect;\n            function checkRegExpErrorState() {\n                filterInput.style.background = self.style.contextFilterInputBackground;\n                filterInput.style.color = self.style.contextFilterInputColor;\n                if (self.invalidFilterRegEx) {\n                    filterInput.style.background = self.style.contextFilterInvalidRegExpBackground;\n                    filterInput.style.color = self.style.contextFilterInvalidRegExpColor;\n                }\n            }\n            function fillAutoComplete() {\n                var count = 0;\n                autoCompleteItems = {};\n                self.data.forEach(function (row) {\n                    var value = row[e.cell.header.name];\n                    if (autoCompleteItems[value] || count > self.attributes.maxAutoCompleteItems) { return; }\n                    count += 1;\n                    autoCompleteItems[value] = {\n                        title: self.formatters[e.cell.header.type || 'string']({ cell: { value: value }}),\n                        click: function (e) {\n                            filterInput.value = value;\n                            e.stopPropagation();\n                            filterInput.dispatchEvent(new Event('keyup'));\n                            self.disposeAutocomplete();\n                            return;\n                        }\n                    };\n                });\n                autoCompleteItems = Object.keys(autoCompleteItems).map(function (key) {\n                    return autoCompleteItems[key];\n                });\n            }\n            function createAutoCompleteContext(ev) {\n                if (ev && [40, 38, 13, 9].indexOf(ev.keyCode) !== -1) { return; }\n                fillAutoComplete();\n                iRect = filterInput.getBoundingClientRect();\n                if (autoCompleteContext) {\n                    autoCompleteContext.dispose();\n                    autoCompleteContext = undefined;\n                }\n                autoCompleteContext = createContextMenu(e, {\n                    left: iRect.left,\n                    top: iRect.top,\n                    right: iRect.right,\n                    bottom: iRect.bottom,\n                    height: iRect.height,\n                    width: iRect.width\n                }, autoCompleteItems, {inputDropdown: true});\n                autoCompleteContext.selectedIndex = 0;\n            }\n            self.createInlineStyle(filterLabel, 'canvas-datagrid-context-menu-label');\n            self.createInlineStyle(filterAutoCompleteButton, 'canvas-datagrid-context-menu-filter-button');\n            self.createInlineStyle(filterInput, 'canvas-datagrid-context-menu-filter-input');\n            checkRegExpErrorState();\n            filterInput.onclick = self.disposeAutocomplete;\n            filterInput.addEventListener('keydown', function (e) {\n                //down\n                if (e.keyCode === 40) {\n                    autoCompleteContext.selectedIndex += 1;\n                }\n                //up\n                if (e.keyCode === 38) {\n                    autoCompleteContext.selectedIndex -= 1;\n                }\n                //enter\n                if (e.keyCode === 13) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    self.disposeContextMenu();\n                }\n                //tab\n                if (e.keyCode === 9) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    e.preventDefault();\n                }\n                //esc\n                if (e.keyCode === 27) {\n                    self.disposeContextMenu();\n                }\n            });\n            filterInput.addEventListener('keyup', function () {\n                self.setFilter(e.cell.header.name, filterInput.value);\n            });\n            filterInput.addEventListener('keyup', createAutoCompleteContext);\n            ['focus', 'blur', 'keydown', 'keyup', 'change'].forEach(function (en) {\n                filterInput.addEventListener(en, checkRegExpErrorState);\n            });\n            filterInput.value = e.cell.header ? self.columnFilters[e.cell.header.name] || '' : '';\n            filterLabel.innerHTML = self.attributes.filterOptionText.replace(/%s/g, n);\n            filterAutoCompleteButton.onclick = function () {\n                if (autoCompleteContext) {\n                    return self.disposeAutocomplete();\n                }\n                createAutoCompleteContext();\n            };\n            filterAutoCompleteButton.innerHTML = self.style.contextFilterButtonHTML;\n            filterContainer.addEventListener('click', function (e) {\n                return e.stopPropagation();\n            });\n            filterContainer.appendChild(filterLabel);\n            filterContainer.appendChild(filterInput);\n            filterContainer.appendChild(filterAutoCompleteButton);\n            e.items.push({\n                title: filterContainer\n            });\n            if (Object.keys(self.columnFilters).length) {\n                Object.keys(self.columnFilters).forEach(function (cf) {\n                    var h = self.getHeaderByName(cf);\n                    e.items.push({\n                        title: self.attributes.removeFilterOptionText.replace(/%s/g, h.title || h.name),\n                        click: function removeFilterClick(e) {\n                            e.preventDefault();\n                            self.setFilter(cf, '');\n                            self.controlInput.focus();\n                        }\n                    });\n                });\n            }\n        }\n        function addDefaultContextMenuItem(e) {\n            var isNormalCell = !(e.cell.isBackground || e.cell.isHeaderCellCap\n                    || e.cell.isScrollBar || e.cell.isCorner || e.cell.isRowHeader)\n                    && e.cell.header;\n            if (self.attributes.showFilter && isNormalCell) {\n                createFilterContextMenuItems(e);\n            }\n            if (self.attributes.showCopy\n                    && self.selections.reduce(function (p, r) {\n                        return p + r.length;\n                    }, 0) > 0) {\n                e.items.push({\n                    title: self.attributes.copyText,\n                    click: function () {\n                        document.execCommand('copy');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.showPaste && self.clipBoardData) {\n                e.items.push({\n                    title: self.attributes.pasteText,\n                    click: function () {\n                        self.paste(self.clipBoardData, e.cell.columnIndex, e.cell.rowIndex);\n                        self.draw();\n                    }\n                });\n            }\n            if (self.attributes.showColumnSelector) {\n                e.items.push({\n                    title: self.attributes.columnSelectorText,\n                    items: function () {\n                        var d = [];\n                        self.getSchema().forEach(function (column) {\n                            if (column.name === self.uniqueId) { return; }\n                            function toggleColumnVisibility(e) {\n                                column.hidden = !column.hidden;\n                                e.preventDefault();\n                                self.stopPropagation(e);\n                                self.disposeContextMenu();\n                                self.resize(true);\n                            }\n                            var el = document.createElement('div');\n                            applyContextItemStyle(el);\n                            el.addEventListener('touchstart', toggleColumnVisibility);\n                            el.addEventListener('click', toggleColumnVisibility);\n                            el.innerHTML = (column.hidden ? self.attributes.columnSelectorHiddenText\n                                    : self.attributes.columnSelectorVisibleText)\n                                    + (column.title || column.name);\n                            d.push({\n                                title: el\n                            });\n                        });\n                        return d;\n                    }\n                });\n                if (e.cell && e.cell.header) {\n                    e.items.push({\n                        title: self.attributes.hideColumnText\n                            .replace(/%s/ig, e.cell.header.title || e.cell.header.name),\n                        click: function (ev) {\n                            e.cell.header.hidden = true;\n                            ev.preventDefault();\n                            self.stopPropagation(ev);\n                            self.disposeContextMenu();\n                            setTimeout(function () { self.resize(true); }, 10);\n                        }\n                    });\n                }\n            }\n            if (self.attributes.saveAppearance && self.attributes.showClearSettingsOption\n                    && (Object.keys(self.sizes.rows).length > 0\n                        || Object.keys(self.sizes.columns).length > 0)) {\n                e.items.push({\n                    title: self.attributes.clearSettingsOptionText,\n                    click: function (e) {\n                        e.preventDefault();\n                        self.sizes.rows = {};\n                        self.sizes.columns = {};\n                        self.createRowOrders();\n                        self.createColumnOrders();\n                        self.storedSettings = undefined;\n                        self.dispatchEvent('resizecolumn', {columnWidth: self.style.cellWidth});\n                        self.dispatchEvent('resizerow', {cellHeight: self.style.cellHeight});\n                        self.setStorageData();\n                        self.resize(true);\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.allowSorting && self.attributes.showOrderByOption && isNormalCell) {\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextAsc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'asc');\n                        self.controlInput.focus();\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextDesc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'desc');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n        }\n        self.disposeAutocomplete = function () {\n            if (autoCompleteContext) {\n                autoCompleteContext.dispose();\n                autoCompleteContext = undefined;\n            }\n        };\n        self.disposeContextMenu = function () {\n            document.removeEventListener('click', self.disposeContextMenu);\n            zIndexTop = 9000;\n            self.disposeAutocomplete();\n            if (self.contextMenu) {\n                self.contextMenu.dispose();\n            }\n            self.contextMenu = undefined;\n        };\n        self.contextmenuEvent = function (e, overridePos) {\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            function createDiposeEvent() {\n                requestAnimationFrame(function () {\n                    document.addEventListener('click', self.disposeContextMenu);\n                    document.removeEventListener('mouseup', createDiposeEvent);\n                });\n            }\n            var contextPosition,\n                items = [],\n                pos = overridePos || self.getLayerPos(e),\n                ev = {\n                    NativeEvent: e,\n                    cell: self.getCellAt(pos.x, pos.y),\n                    items: items\n                },\n                st,\n                sl;\n            if (!ev.cell.isGrid) {\n                addDefaultContextMenuItem(ev);\n            }\n            if (document.scrollingElement) {\n                sl = document.scrollingElement.scrollLeft;\n                st = document.scrollingElement.scrollTop;\n            }\n            if (self.dispatchEvent('contextmenu', ev)) {\n                return;\n            }\n            if (!ev.cell.isGrid) {\n                if (self.contextMenu) {\n                    self.disposeContextMenu();\n                }\n                contextPosition = {\n                    left: pos.x + sl + pos.rect.left + self.style.contextMenuMarginLeft + self.canvasOffsetLeft,\n                    top: pos.y + st + pos.rect.top + self.style.contextMenuMarginTop + self.canvasOffsetTop,\n                    right: ev.cell.width + ev.cell.x + pos.rect.left,\n                    bottom: ev.cell.height + ev.cell.y + pos.rect.top,\n                    height: ev.cell.height,\n                    width: ev.cell.width\n                };\n                if (self.mobile) {\n                    contextPosition.left = self.style.mobileContextMenuMargin + 'px';\n                    contextPosition.width = self.width - (self.style.mobileContextMenuMargin * 2) + 'px';\n                }\n                self.contextMenu = createContextMenu(ev, contextPosition, items);\n                document.addEventListener('mouseup', createDiposeEvent);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/contextMenu.js\n// module id = 7\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.getClippingRect = function (ele) {\n            var boundingRect = self.position(self.parentNode),\n                eleRect = self.position(ele),\n                s = self.scrollOffset(self.canvas),\n                clipRect = {\n                    x: 0,\n                    y: 0,\n                    h: 0,\n                    w: 0\n                },\n                parentRect = {\n                    x: -Infinity,\n                    y: -Infinity,\n                    h: Infinity,\n                    w: Infinity\n                },\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth();\n            boundingRect.top -= s.top;\n            boundingRect.left -= s.left;\n            eleRect.top -= s.top;\n            eleRect.left -= s.left;\n            clipRect.h = boundingRect.top + boundingRect.height - ele.offsetTop - self.style.scrollBarWidth;\n            clipRect.w = boundingRect.left + boundingRect.width - ele.offsetLeft - self.style.scrollBarWidth;\n            clipRect.x = boundingRect.left + (eleRect.left * -1) + rowHeaderCellWidth;\n            clipRect.y = boundingRect.top + (eleRect.top * -1) + columnHeaderCellHeight;\n            return {\n                x: clipRect.x > parentRect.x ? clipRect.x : parentRect.x,\n                y: clipRect.y > parentRect.y ? clipRect.y : parentRect.y,\n                h: clipRect.h < parentRect.h ? clipRect.h : parentRect.h,\n                w: clipRect.w < parentRect.w ? clipRect.w : parentRect.w\n            };\n        };\n        self.clipElement = function (ele) {\n            var clipRect = self.getClippingRect(ele);\n            if (clipRect.w < 0) { clipRect.w = 0; }\n            if (clipRect.h < 0) { clipRect.h = 0; }\n            ele.style.clip = 'rect('\n                + clipRect.y + 'px,'\n                + clipRect.w + 'px,'\n                + clipRect.h + 'px,'\n                + clipRect.x + 'px'\n                + ')';\n            // INFO https://developer.mozilla.org/en-US/docs/Web/CSS/clip\n            // clip has been \"deprecated\" for clipPath.  Of course nothing but chrome\n            // supports clip path, so we'll keep using clip until someday clipPath becomes\n            // more widely support.  The code below works correctly, but setting clipPath and clip\n            // at the same time has undesirable results.\n            // ele.style.clipPath = 'polygon('\n            //     + clipRect.x + 'px ' + clipRect.y + 'px,'\n            //     + clipRect.x + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.y + 'px'\n            //     + ')';\n        };\n        self.scrollOffset = function (e) {\n            var x = 0, y = 0;\n            while (e.parentNode && e.nodeName !== 'CANVAS-DATAGRID') {\n                if (e.nodeType !== 'canvas-datagrid-tree'\n                        && e.nodeType !== 'canvas-datagrid-cell') {\n                    x -= e.scrollLeft;\n                    y -= e.scrollTop;\n                }\n                e = e.parentNode;\n            }\n            return {left: x, top: y};\n        };\n        self.resizeEditInput = function () {\n            if (self.input && self.input.editCell) {\n                var pos = self.canvas.getBoundingClientRect(),\n                    s = self.scrollOffset(self.canvas),\n                    bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                    borderWidth = (self.style.cellBorderWidth * bm),\n                    cell = self.getVisibleCellByIndex(self.input.editCell.columnIndex, self.input.editCell.rowIndex)\n                        || {x: -100, y: -100, height: 0, width: 0};\n                if (self.mobile) {\n                    self.input.style.left = '0';\n                    self.input.style.top = (self.height - self.style.mobileEditInputHeight) - borderWidth - 1 + 'px';\n                    self.input.style.height = self.style.mobileEditInputHeight + 'px';\n                    self.input.style.width = self.width - borderWidth - 1 + 'px';\n                    return;\n                }\n                self.input.style.left = pos.left + cell.x + self.canvasOffsetLeft - s.left + 'px';\n                self.input.style.top = pos.top + cell.y - self.style.cellBorderWidth + self.canvasOffsetTop - s.top + 'px';\n                self.input.style.height = cell.height - borderWidth + 'px';\n                self.input.style.width = cell.width - self.style.cellPaddingLeft + 'px';\n                self.clipElement(self.input);\n            }\n        };\n        self.position = function (e, ignoreScrollOffset) {\n            var x = 0, y = 0, s = e, h, w;\n            while (e.offsetParent && e.nodeName !== 'CANVAS-DATAGRID') {\n                x += e.offsetLeft;\n                y += e.offsetTop;\n                h = e.offsetHeight;\n                w = e.offsetWidth;\n                e = e.offsetParent;\n            }\n            if (ignoreScrollOffset) {\n                return {left: x, top: y, height: h, width: w};\n            }\n            e = s;\n            s = self.scrollOffset(e);\n            return { left: x + s.left, top: y + s.top, height: h, width: w };\n        };\n        self.getLayerPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.clientX - rect.left,\n                    y: e.clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        /**\n         * Ends editing, optionally aborting the edit.\n         * @memberof canvasDatagrid\n         * @name endEdit\n         * @method\n         * @param {boolean} abort When true, abort the edit.\n         */\n        self.endEdit = function (abort) {\n            var cell = self.input.editCell,\n                y = cell.rowIndex;\n            function abortEdit() {\n                abort = true;\n            }\n            if (self.dispatchEvent('beforeendedit', {\n                    cell: cell,\n                    newValue: self.input.value,\n                    oldValue: cell.value,\n                    abort: abortEdit,\n                    input: self.input\n                })) { return false; }\n            if (self.input.value !== cell.value && !abort) {\n                self.changes[y] = self.changes[y] || {};\n                self.changes[y][cell.header.name] = self.input.value;\n                cell.data[cell.header.name] = self.input.value;\n                if (y === self.data.length) {\n                    if (self.dispatchEvent('newrow', {\n                            value: self.input.value,\n                            defaultValue: cell.value,\n                            aborted: abort,\n                            cell: cell,\n                            input: self.input\n                        })) { return false; }\n                    self.uId += 1;\n                    self.addRow(cell.data);\n                    self.createNewRowData();\n                }\n                self.draw(true);\n            }\n            document.body.removeChild(self.input);\n            self.intf.focus();\n            self.dispatchEvent('endedit', {\n                cell: cell,\n                value: self.input.value,\n                aborted: abort,\n                input: self.input\n            });\n            self.input = undefined;\n            return true;\n        };\n        /**\n         * Begins editing at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name beginEditAt\n         * @method\n         * @param {number} x The column index of the cell to edit.\n         * @param {number} y The row index of the cell to edit.\n         */\n        self.beginEditAt = function (x, y) {\n            if (!self.attributes.editable) { return; }\n            if (self.input) {\n                self.endEdit();\n            }\n            var cell = self.getVisibleCellByIndex(x, y),\n                s = self.getVisibleSchema(),\n                enumItems,\n                enu,\n                option,\n                valueInEnum;\n            if (!(cell && cell.header)) { return; }\n            //HACK for IE10, does not like literal enum\n            enu = cell.header['enum'];\n            if (self.dispatchEvent('beforebeginedit', {cell: cell})) { return false; }\n            self.scrollIntoView(x, y);\n            self.setActiveCell(x, y);\n            if (enu) {\n                self.input = document.createElement('select');\n            } else {\n                self.input = document.createElement(self.attributes.multiLine\n                    ? 'textarea' : 'input');\n            }\n            cell = self.getVisibleCellByIndex(x, y);\n            //HACK on mobile devices sometimes edit can begin without the cell being in view, I don't know how.\n            if (!cell) { return; }\n            if (enu) {\n                // add enums\n                if (typeof enu === 'function') {\n                    enumItems = enu.apply(self.intf, [{cell: cell}]);\n                } else if (Array.isArray(enu)) {\n                    enumItems = enu;\n                }\n                enumItems.forEach(function (e) {\n                    var i = document.createElement('option'),\n                        val,\n                        title;\n                    if (Array.isArray(e)) {\n                        val = e[0];\n                        title = e[1];\n                    } else {\n                        val = e;\n                        title = e;\n                    }\n                    if (val === cell.value) { valueInEnum = true; }\n                    i.value = val;\n                    i.innerHTML = title;\n                    self.input.appendChild(i);\n                });\n                if (!valueInEnum) {\n                    option = document.createElement('option');\n                    option.value = cell.value;\n                    option.innerHTML = cell.value;\n                    self.input.appendChild(option);\n                }\n                self.input.addEventListener('change', function () {\n                    self.endEdit();\n                    self.draw(true);\n                });\n            }\n            document.body.appendChild(self.input);\n            self.createInlineStyle(self.input, self.mobile ? 'canvas-datagrid-edit-mobile-input' : 'canvas-datagrid-edit-input');\n            self.input.style.position = 'absolute';\n            self.input.editCell = cell;\n            self.resizeEditInput();\n            self.input.style.zIndex = '2';\n            self.input.style.fontSize = (parseInt(self.style.editCellFontSize, 10) * self.scale) + 'px';\n            self.input.value = cell.value;\n            self.input.focus();\n            self.input.addEventListener('click', self.stopPropagation);\n            self.input.addEventListener('dblclick', self.stopPropagation);\n            self.input.addEventListener('mouseup', self.stopPropagation);\n            self.input.addEventListener('mousedown', self.stopPropagation);\n            self.input.addEventListener('keydown', function (e) {\n                var nx = cell.columnIndex,\n                    ny = cell.rowIndex;\n                // esc\n                if (e.keyCode === 27) {\n                    self.endEdit(true);\n                    self.draw(true);\n                // enter\n                } else if (e.keyCode === 13\n                        && (!self.attributes.multiLine\n                            || (self.attributes.multiLine && e.shiftKey))) {\n                    self.endEdit();\n                    self.draw(true);\n                } else if (e.keyCode === 9) {\n                    e.preventDefault();\n                    if (!self.endEdit()) {\n                        return;\n                    }\n                    if (e.shiftKey) {\n                        nx -= 1;\n                    } else {\n                        nx += 1;\n                    }\n                    if (nx < 0) {\n                        nx = s.length - 1;\n                        ny -= 1;\n                    }\n                    if (nx > s.length - 1) {\n                        nx = 0;\n                        ny += 1;\n                    }\n                    if (ny < 0) {\n                        ny = self.data.length - 1;\n                    }\n                    if (ny > self.data.length - 1) {\n                        ny = 0;\n                    }\n                    self.scrollIntoView(nx, ny);\n                    self.beginEditAt(nx, ny);\n                }\n            });\n            self.dispatchEvent('beginedit', {cell: cell, input: self.input});\n        };\n        self.createInlineStyle = function (el, className) {\n            var css = {\n                'canvas-datagrid-context-menu-filter-input': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextFilterInputBackground,\n                    color: self.style.contextFilterInputColor,\n                    border: self.style.contextFilterInputBorder,\n                    borderRadius: self.style.contextFilterInputBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextFilterInputFontFamily,\n                    fontSize: self.style.contextFilterInputFontSize\n                },\n                'canvas-datagrid-context-menu-filter-button': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextFilterButtonBorder,\n                    borderRadius: self.style.contextFilterButtonBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFilterButtonFontFamily,\n                    fontSize: self.style.contextMenuFilterButtonFontSize\n                },\n                'canvas-datagrid-context-child-arrow': {\n                    cssFloat: 'right',\n                    color: self.style.childContextMenuArrowColor,\n                    fontSize: self.style.contextMenuChildArrowFontSize,\n                    fontFamily: self.style.contextMenuFontFamily,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-autocomplete': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    position: 'absolute',\n                    zIndex: 9999,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-autocomplete-item': {\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor\n                },\n                'canvas-datagrid-autocomplete-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-canvas': {\n                    position: 'absolute',\n                    zIndex: '-1'\n                },\n                'canvas-datagrid': {\n                    display: 'block'\n                },\n                'canvas-datagrid-control-input': {\n                    position: 'fixed',\n                    top: '-5px',\n                    left: '-5px',\n                    border: 'none',\n                    opacity: '0',\n                    cursor: 'pointer',\n                    width: '1px',\n                    height: '1px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize\n                },\n                'canvas-datagrid-edit-mobile-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 0',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.mobileEditFontFamily,\n                    fontSize: self.style.mobileEditFontSize,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-edit-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 ' + self.style.editCellPaddingLeft + 'px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.editCellFontFamily,\n                    fontSize: self.style.editCellFontSize,\n                    boxShadow: self.style.editCellBoxShadow,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-context-menu-item-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-context-menu-label': {\n                    margin: self.style.contextMenuLabelMargin,\n                    display: self.style.contextMenuLabelDisplay,\n                    minWidth: self.style.contextMenuLabelMinWidth,\n                    maxWidth: self.style.contextMenuLabelMaxWidth\n                },\n                'canvas-datagrid-context-menu-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-context-menu': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-invalid-search-regExp': {\n                    background: self.style.contextMenuFilterInvalidExpresion\n                }\n            };\n            if (css[className]) {\n                Object.keys(css[className]).map(function (prop) {\n                    el.style[prop] = css[className][prop];\n                });\n            }\n            return;\n        };\n        self.appendTo = function (e) {\n            self.parentNode = e;\n            self.setDom();\n        };\n        self.setDom = function () {\n            if (self.parentNode && /canvas-datagrid-(cell|tree)/.test(self.parentNode.nodeType)) {\n                self.isChildGrid = true;\n                self.parentGrid = self.parentNode.parentGrid;\n                self.ctx = self.parentGrid.context;\n                self.canvas = self.parentGrid.canvas;\n                self.controlInput = self.parentGrid.controlInput;\n                self.eventParent = self.canvas;\n            } else {\n                self.controlInput = self.controlInput || document.createElement('input');\n                self.controlInput.onblur = self.intf.blur;\n                self.createInlineStyle(self.controlInput, 'canvas-datagrid-control-input');\n                self.isChildGrid = false;\n                self.parentDOMNode = self.parentNode;\n                self.parentIsCanvas = /^canvas$/i.test(self.parentDOMNode.tagName);\n                if (self.parentIsCanvas) {\n                    self.canvas = self.parentDOMNode;\n                    self.parentDOMNode.appendChild(self.controlInput);\n                } else {\n                    self.canvas = document.createElement('canvas');\n                    self.parentDOMNode.appendChild(self.canvas);\n                    self.parentDOMNode.appendChild(self.controlInput);\n                }\n                self.createInlineStyle(self.canvas, 'canvas-datagrid');\n                self.ctx = self.canvas.getContext('2d');\n                self.ctx.textBaseline = 'alphabetic';\n                self.eventParent = self.canvas;\n            }\n            self.parentNodeStyle = self.canvas.style;\n            // simulate a block element\n            self.parentNodeStyle.width = '100%';\n            self.parentNodeStyle.height = '100%';\n            self.controlInput.setAttribute('readonly', true);\n            self.controlInput.addEventListener('blur', function (e) {\n                if (e.target !== self.canvas) {\n                    self.hasFocus = false;\n                }\n            });\n            self.eventParent.addEventListener('scroll', self.resize, false);\n            self.eventParent.addEventListener('touchstart', self.touchstart, false);\n            self.eventParent.addEventListener('mouseup', self.mouseup, false);\n            self.eventParent.addEventListener('mousedown', self.mousedown, false);\n            self.eventParent.addEventListener('dblclick', self.dblclick, false);\n            self.eventParent.addEventListener('click', self.click, false);\n            self.eventParent.addEventListener('mousemove', self.mousemove);\n            self.eventParent.addEventListener('wheel', self.scrollWheel, false);\n            self.canvas.addEventListener('contextmenu', self.contextmenuEvent, false);\n            self.controlInput.addEventListener('copy', self.copy);\n            self.controlInput.addEventListener('cut', self.cut);\n            self.controlInput.addEventListener('paste', self.paste);\n            self.controlInput.addEventListener('keypress', self.keypress, false);\n            self.controlInput.addEventListener('keyup', self.keyup, false);\n            self.controlInput.addEventListener('keydown', self.keydown, false);\n            window.addEventListener('resize', self.resize);\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/dom.js\n// module id = 8\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        // all methods here are exposed by intf\n        // to users\n        /**\n         * Converts a integer into a letter A - ZZZZZ...\n         * @memberof canvasDatagrid\n         * @name integerToAlpha\n         * @method\n         * @param {column} n The number to convert.\n         */\n        self.integerToAlpha = function (n) {\n            var ordA = 'a'.charCodeAt(0),\n                ordZ = 'z'.charCodeAt(0),\n                len = ordZ - ordA + 1,\n                s = '';\n            while (n >= 0) {\n                s = String.fromCharCode(n % len + ordA) + s;\n                n = Math.floor(n / len) - 1;\n            }\n            return s;\n        };\n        /**\n         * Inserts a new column before the specified index into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name insertColumn\n         * @method\n         * @param {column} c The column to insert into the schema.\n         * @param {number} index The index of the column to insert before.\n         */\n        self.insertColumn = function (c, index) {\n            var s = self.getSchema();\n            if (s.length < index) {\n                throw new Error('Index is beyond the length of the schema.');\n            }\n            self.validateColumn(c, s);\n            s.splice(index, 0, c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a column from the schema at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteColumn\n         * @tutorial schema\n         * @method\n         * @param {number} index The index of the column to delete.\n         */\n        self.deleteColumn = function (index) {\n            var s = self.getSchema();\n            // remove data matching this column name from data\n            self.data.forEach(function (row) {\n                delete row[s[index].name];\n            });\n            s.splice(index, 1);\n            self.intf.schema = s;\n        };\n        /**\n         * Adds a new column into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name addColumn\n         * @method\n         * @param {column} c The column to add to the schema.\n         */\n        self.addColumn = function (c) {\n            var s = self.getSchema();\n            self.validateColumn(c, s);\n            s.push(c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a row from the dataset at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteRow\n         * @method\n         * @param {number} index The index of the row to delete.\n         */\n        self.deleteRow = function (index) {\n            self.originalData.splice(index, 1);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Inserts a new row into the dataset before the specified index.\n         * @memberof canvasDatagrid\n         * @name insertRow\n         * @method\n         * @param {object} d data.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertRow = function (d, index) {\n            if (self.originalData.length < index) {\n                throw new Error('Index is beyond the length of the dataset.');\n            }\n            self.originalData.splice(index, 0, d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[index], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Adds a new row into the dataset.\n         * @memberof canvasDatagrid\n         * @name addRow\n         * @method\n         * @param {object} d data.\n         */\n        self.addRow = function (d) {\n            self.originalData.push(d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[self.originalData.length - 1], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Sets the height of a given row by index number.\n         * @memberof canvasDatagrid\n         * @name setRowHeight\n         * @method\n         * @param {number} rowIndex The index of the row to set.\n         * @param {number} height Height to set the row to.\n         */\n        self.setRowHeight = function (rowIndex, height) {\n            self.sizes.rows[self.data[rowIndex][self.uniqueId]] = height;\n            self.draw(true);\n        };\n        /**\n         * Sets the width of a given column by index number.\n         * @memberof canvasDatagrid\n         * @name setColumnWidth\n         * @method\n         * @param {number} colIndex The index of the column to set.\n         * @param {number} width Width to set the column to.\n         */\n        self.setColumnWidth = function (colIndex, width) {\n            var s = self.getSchema();\n            self.sizes.columns[s[colIndex][self.uniqueId]] = width;\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the width of the columns due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetColumnWidths\n         * @tutorial schema\n         * @method\n         */\n        self.resetColumnWidths = function () {\n            self.sizes.columns = {};\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the height of the rows due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetRowHeights\n         * @tutorial schema\n         * @method\n         */\n        self.resetRowHeights = function () {\n            self.sizes.rows = {};\n            self.draw(true);\n        };\n        /**\n         * Sets the value of the filter.\n         * @memberof canvasDatagrid\n         * @name setFilter\n         * @method\n         * @param {string} column Name of the column to filter.\n         * @param {string} value The value to filter for.\n         */\n        self.setFilter = function (column, value) {\n            function applyFilter() {\n                self.refreshFromOrigialData();\n                Object.keys(self.columnFilters).forEach(function (filter) {\n                    var header = self.getHeaderByName(column);\n                    if (!header) {\n                        return;\n                    }\n                    self.currentFilter = header.filter || self.filter(column.type || 'string');\n                    self.data = self.data.filter(function (row) {\n                        return self.currentFilter(row[filter], self.columnFilters[filter]);\n                    });\n                });\n                self.resize();\n                self.draw(true);\n            }\n            if (column === undefined && value === undefined) {\n                self.columnFilters = {};\n                return applyFilter();\n            }\n            if (column && (value === '' || value === undefined)) {\n                delete self.columnFilters[column];\n            } else {\n                self.columnFilters[column] = value;\n            }\n            applyFilter();\n        };\n        /**\n         * Returns the number of pixels to scroll down to line up with row rowIndex.\n         * @memberof canvasDatagrid\n         * @name findRowScrollTop\n         * @method\n         * @param {number} rowIndex The row index of the row to scroll find.\n         */\n        self.findRowScrollTop = function (rowIndex) {\n            var top = 0, x = 0, l = self.data.length,\n                bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                cellBorder = self.style.cellBorderWidth * bm;\n            if (!self.attributes.showNewRow) {\n                l -= 1;\n            }\n            if (rowIndex > l) {\n                throw new Error('Impossible row index');\n            }\n            while (x < rowIndex) {\n                top += (self.sizes.rows[self.data[x][self.uniqueId]] || self.style.cellHeight) + cellBorder;\n                x += 1;\n            }\n            //TODO: This is not super accurate, causes pageUp/Dn to not move around right\n            return top - (self.sizes.rows[self.data[rowIndex][self.uniqueId]] || self.style.cellHeight);\n        };\n        /**\n         * Returns the number of pixels to scroll to the left to line up with column columnIndex.\n         * @memberof canvasDatagrid\n         * @name findColumnScrollLeft\n         * @method\n         * @param {number} columnIndex The column index of the column to find.\n         */\n        self.findColumnScrollLeft = function (columnIndex) {\n            var left = 0, y = 0, s = self.getSchema(), l = s.length - 1;\n            if (columnIndex > l) {\n                throw new Error('Impossible column index');\n            }\n            while (y < columnIndex) {\n                left += self.sizes.columns[s[y][self.uniqueId]] || s[y].width || self.style.cellWidth;\n                y += 1;\n            }\n            return left;\n        };\n        /**\n         * Scrolls the cell at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name gotoCell\n         * @method\n         * @param {number} x The column index of the cell to scroll to.\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoCell = function (x, y) {\n            if (x !== undefined) {\n                self.scrollBox.scrollLeft = self.findColumnScrollLeft(x);\n            }\n            if (y !== undefined) {\n                self.scrollBox.scrollTop = self.findRowScrollTop(y);\n            }\n        };\n        /**\n         * Scrolls the row y.\n         * @memberof canvasDatagrid\n         * @name gotoRow\n         * @method\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoRow = function (y) {\n            self.gotoCell(0, y);\n        };\n        /**\n         * Scrolls the cell at cell x, row y into view if it is not already.\n         * @memberof canvasDatagrid\n         * @name scrollIntoView\n         * @method\n         * @param {number} x The column index of the cell to scroll into view.\n         * @param {number} y The row index of the cell to scroll into view.\n         */\n        self.scrollIntoView = function (x, y) {\n            if (self.visibleCells.filter(function (cell) {\n                    return (cell.rowIndex === y || y === undefined)\n                        && (cell.columnIndex === x || x === undefined)\n                        && cell.x > 0\n                        && cell.y > 0\n                        && cell.x + cell.width < self.width\n                        && cell.y + cell.height < self.height;\n                }).length === 0) {\n                self.gotoCell(x, y);\n            }\n        };\n        /**\n         * Sets the active cell. Requires redrawing.\n         * @memberof canvasDatagrid\n         * @name setActiveCell\n         * @method\n         * @param {number} x The column index of the cell to set active.\n         * @param {number} y The row index of the cell to set active.\n         */\n        self.setActiveCell = function (x, y) {\n            self.activeCell = {\n                rowIndex: y,\n                columnIndex: x\n            };\n        };\n        /**\n         * Removes the selection.\n         * @memberof canvasDatagrid\n         * @name selectNone\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectNone = function (dontDraw) {\n            self.selections = [];\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Selects every visible cell.\n         * @memberof canvasDatagrid\n         * @name selectAll\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectAll = function (dontDraw) {\n            self.selectArea({\n                top: 0,\n                left: 0,\n                right: self.getVisibleSchema().length - 1,\n                bottom: self.data.length - 1\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Returns true if the selected columnIndex is selected on every row.\n         * @memberof canvasDatagrid\n         * @name isColumnSelected\n         * @method\n         * @param {number} columnIndex The column index to check.\n         */\n        self.isColumnSelected = function (columnIndex) {\n            var colIsSelected = true;\n            self.data.forEach(function (row, rowIndex) {\n                if (!self.selections[rowIndex] || self.selections[rowIndex].indexOf(self.orders.columns[columnIndex]) === -1) {\n                    colIsSelected = false;\n                }\n            });\n            return colIsSelected;\n        };\n        /**\n         * Runs the defined method on each selected cell.\n         * @memberof canvasDatagrid\n         * @name forEachSelectedCell\n         * @method\n         * @param {number} fn The function to execute.  The signature of the function is: (data, rowIndex, columnName).\n         * @param {number} expandToRow When true the data in the array is expanded to the entire row.\n         */\n        self.forEachSelectedCell = function (fn, expandToRow) {\n            var d = [], s = expandToRow ? self.getSchema() : self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    if (col === -1 || !s[col]) { return; }\n                    fn(self.data, index, s[col].name);\n                });\n            });\n        };\n        /**\n         * Selects a column.\n         * @memberof canvasDatagrid\n         * @name selectColumn\n         * @method\n         * @param {number} columnIndex The column index to select.\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the column.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the column.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectColumn = function (columnIndex, ctrl, shift, supressEvent) {\n            var s, e, x;\n            function addCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) === -1) {\n                        self.selections[rowIndex].push(i);\n                    }\n                });\n            }\n            function removeCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) !== -1) {\n                        self.selections[rowIndex].splice(self.selections[rowIndex].indexOf(i), 1);\n                    }\n                });\n            }\n            if (shift) {\n                if (!self.activeCell) { return; }\n                s = Math.min(self.activeCell.columnIndex, columnIndex);\n                e = Math.max(self.activeCell.columnIndex, columnIndex);\n                for (x = s; e > x; x += 1) {\n                    addCol(x);\n                }\n            }\n            if (!ctrl && !shift) {\n                self.selections = [];\n                self.activeCell.columnIndex = columnIndex;\n                self.activeCell.rowIndex = self.scrollIndexTop;\n            }\n            if (ctrl && self.isColumnSelected(columnIndex)) {\n                removeCol(columnIndex);\n            } else {\n                addCol(columnIndex);\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.getSelectionBounds()\n            });\n        };\n        /**\n         * Selects a row.\n         * @memberof canvasDatagrid\n         * @name selectRow\n         * @method\n         * @param {number} rowIndex The row index to select.\n         * @param {boolean} ctrl When true, behaves as if you were holding control/command when you clicked the row.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the row.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectRow = function (rowIndex, ctrl, shift, supressEvent) {\n            var x, st, en, s = self.getVisibleSchema();\n            function addRow(ri) {\n                self.selections[ri] = [];\n                self.selections[ri].push(-1);\n                s.forEach(function (col, index) {\n                    self.selections[ri].push(index);\n                });\n            }\n            if (self.dragAddToSelection === false || self.dragObject === undefined) {\n                if (self.selections[rowIndex] && self.selections[rowIndex].length - 1 === s.length) {\n                    if (ctrl) {\n                        self.selections[rowIndex] = [];\n                        return;\n                    }\n                }\n            }\n            if (self.dragAddToSelection === true || self.dragObject === undefined) {\n                if (shift && self.dragObject === undefined) {\n                    if (!self.activeCell) { return; }\n                    st = Math.min(self.activeCell.rowIndex, rowIndex);\n                    en = Math.max(self.activeCell.rowIndex, rowIndex);\n                    for (x = st; en >= x; x += 1) {\n                        addRow(x);\n                    }\n                } else {\n                    addRow(rowIndex);\n                }\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Collapse a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name collapseTree\n         * @method\n         * @param {number} index The index of the row to collapse.\n         */\n        self.collapseTree = function (rowIndex) {\n            var rowId = self.data[rowIndex][self.uniqueId];\n            self.dispatchEvent('collapsetree', {\n                childGrid: self.childGrids[rowId],\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId].blur();\n            self.openChildren[rowId].dispose();\n            delete self.openChildren[rowId];\n            delete self.sizes.trees[rowId];\n            delete self.childGrids[rowId];\n            self.dispatchEvent('resizerow', {\n                cellHeight: self.style.cellHeight\n            });\n            self.resize(true);\n            self.draw(true);\n        };\n        /**\n         * Expands a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name expandTree\n         * @method\n         * @param {number} index The index of the row to expand.\n         */\n        self.expandTree = function (rowIndex) {\n            var trArgs = self.args.treeGridAttributes || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth,\n                rowId = self.data[rowIndex][self.uniqueId],\n                h = self.sizes.trees[rowId] || self.style.treeGridHeight,\n                treeGrid;\n            if (!self.childGrids[rowId]) {\n                trArgs.debug = self.attributes.debug;\n                trArgs.name = self.attributes.saveAppearance ? self.attributes.name + 'tree' + rowId : undefined;\n                trArgs.style = trArgs.style || self.style;\n                trArgs.parentNode = {\n                    parentGrid: self.intf,\n                    nodeType: 'canvas-datagrid-tree',\n                    offsetHeight: h,\n                    offsetWidth: self.width - rowHeaderCellWidth,\n                    header: { width: self.width - rowHeaderCellWidth },\n                    offsetLeft: rowHeaderCellWidth,\n                    offsetTop: columnHeaderCellHeight,\n                    offsetParent: self.intf.parentNode,\n                    parentNode: self.intf.parentNode,\n                    style: 'tree',\n                    data: self.data[rowIndex]\n                };\n                treeGrid = self.createGrid(trArgs);\n                self.childGrids[rowId] = treeGrid;\n            }\n            treeGrid = self.childGrids[rowId];\n            treeGrid.visible = true;\n            self.dispatchEvent('expandtree', {\n                treeGrid: treeGrid,\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId] = treeGrid;\n            self.sizes.trees[rowId] = h;\n            self.dispatchEvent('resizerow', {height: self.style.cellHeight});\n            self.resize(true);\n        };\n        /**\n         * Toggles tree grid open and close by row index.\n         * @memberof canvasDatagrid\n         * @name toggleTree\n         * @method\n         * @param {number} index The index of the row to toggle.\n         */\n        self.toggleTree = function (rowIndex) {\n            var i = self.openChildren[self.data[rowIndex][self.uniqueId]];\n            if (i) {\n                return self.collapseTree(rowIndex);\n            }\n            self.expandTree(rowIndex);\n        };\n        /**\n         * Returns a header from the schema by name.\n         * @memberof canvasDatagrid\n         * @name getHeaderByName\n         * @tutorial schema\n         * @method\n         * @returns {header} header with the selected name, or undefined.\n         * @param {string} name The name of the column to resize.\n         */\n        self.getHeaderByName = function (name) {\n            var x, i = self.getSchema();\n            for (x = 0; x < i.length; x += 1) {\n                if (i[x].name === name) {\n                    return i[x];\n                }\n            }\n        };\n        /**\n         * Resizes a column to fit the longest value in the column. Call without a value to resize all columns.\n         * Warning, can be slow on very large record sets (1m records ~3-5 seconds on an i7).\n         * @memberof canvasDatagrid\n         * @name fitColumnToValues\n         * @method\n         * @param {string} name The name of the column to resize.\n         */\n        self.fitColumnToValues = function (name, internal) {\n            if (!self.canvas) { return; }\n            self.sizes.columns[name === 'cornerCell' ? name : self.getHeaderByName(name)[self.uniqueId]]\n                = self.findColumnMaxTextLength(name);\n            if (!internal) {\n                self.resize();\n                self.draw(true);\n            }\n        };\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @overload\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {number} columnIndex The column index of the cell to check.\n         * @param {number} rowIndex The row index of the cell to check.\n         */\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {cell} cell The cell to check for.  Alternatively you can pass an object { x: <x-pixel-value>, y: <y-pixel-value> }.\n         */\n        self.isCellVisible = function (cell, rowIndex) {\n            // overload\n            if (rowIndex !== undefined) {\n                return self.visibleCells.filter(function (c) {\n                    return c.columnIndex === cell && c.rowIndex === rowIndex;\n                }).length > 0;\n            }\n            var x, l = self.visibleCells.length;\n            for (x = 0; x < l; x += 1) {\n                if (cell.x === self.visibleCells[x].x && cell.y === self.visibleCells[x].y) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n         * Sets the order of the data.\n         * @memberof canvasDatagrid\n         * @name order\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} columnName Number of pixels from the left.\n         * @param {string} direction `asc` for ascending or `desc` for descending.\n         * @param {function} [sortFunction] When defined, override the default sorting method defined in the column's schema and use this one.\n         * @param {bool} [dontSetStorageData] Don't store this setting for future use.\n         */\n        self.order = function (columnName, direction, sortFunction, dontSetStorageData) {\n            var f,\n                c = self.getSchema().filter(function (col) {\n                    return col.name === columnName;\n                });\n            self.orderBy = columnName;\n            if (c.length === 0) {\n                throw new Error('Cannot sort.  No such column name');\n            }\n            f = sortFunction || self.sorters[c[0].type];\n            if (!f && c[0].type !== undefined) {\n                console.warn('Cannot sort type \"%s\" falling back to string sort.', c[0].type);\n            }\n            self.data = self.data.sort(typeof f === 'function' ? f(columnName, direction) : self.sorters.string);\n            self.dispatchEvent('ordercolumn', {name: columnName, direction: direction});\n            self.draw(true);\n            if (dontSetStorageData) { return; }\n            self.setStorageData();\n        };\n        self.isInGrid = function (e) {\n            if (e.x < 0\n                    || e.x > self.width\n                    || e.y < 0\n                    || e.y > self.height) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Moves the current selection relative to the its current position.  Note: this method does not move the selected data, just the selection itself.\n         * @memberof canvasDatagrid\n         * @name moveSelection\n         * @method\n         * @param {number} offsetX The number of columns to offset the selection.\n         * @param {number} offsetY The number of rows to offset the selection.\n         */\n        self.moveSelection = function (offsetX, offsetY) {\n            var sel = [];\n            self.selections.forEach(function (row, rowIndex) {\n                sel[rowIndex + offsetY] = [];\n                row.forEach(function (colIndex) {\n                    sel[rowIndex + offsetY].push(colIndex + offsetX);\n                });\n            });\n            self.selections = sel;\n        };\n        /**\n         * Moves data in the provided selection to another position in the grid.  Moving data off the edge of the schema (columns/x) will truncate data.\n         * @memberof canvasDatagrid\n         * @name moveTo\n         * @method\n         * @param {array} sel 2D array representing selected rows and columns.  `canvasDatagrid.selections` is in this format and can be used here.\n         * @param {number} x The column index to start inserting the selection at.\n         * @param {number} y The row index to start inserting the selection at.\n         */\n        self.moveTo = function (sel, x, y) {\n            var d = self.getSelectedData(),\n                s = self.getVisibleSchema(),\n                l = sel.length,\n                xi,\n                yi = y - 1;\n            sel.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) { return; }\n                row.forEach(function (col) {\n                    if (!s[col]) { return; }\n                    self.data[index][s[col].name] = null;\n                });\n            });\n            sel.forEach(function (row, index) {\n                yi += 1;\n                xi = x - 1;\n                row.forEach(function (col, cidx) {\n                    xi += 1;\n                    if (col === -1\n                            || !s[xi]\n                            || !s[col]\n                            || self.data.length - 1 < yi\n                            || yi < 0) { return; }\n                    self.data[yi][s[xi].name] = d[index][s[col].name];\n                });\n            });\n        };\n        /**\n         * Checks if a given column is visible.\n         * @memberof canvasDatagrid\n         * @name isColumnVisible\n         * @method\n         * @returns {boolean} When true, the column is visible.\n         * @param {number} columnIndex Column index.\n         */\n        self.isColumnVisible = function (columnIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === columnIndex;\n            }).length > 0;\n        };\n        /**\n         * Checks if a given row is visible.\n         * @memberof canvasDatagrid\n         * @name isRowVisible\n         * @method\n         * @returns {boolean} When true, the row is visible.\n         * @param {number} rowIndex Row index.\n         */\n        self.isRowVisible = function (rowIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.rowIndex === rowIndex;\n            }).length > 0;\n        };\n        /**\n         * Gets the cell at columnIndex and rowIndex.\n         * @memberof canvasDatagrid\n         * @name getVisibleCellByIndex\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Column index.\n         * @param {number} y Row index.\n         */\n        self.getVisibleCellByIndex = function (x, y) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === x && c.rowIndex === y;\n            })[0];\n        };\n        /**\n         * Gets the cell at grid pixel coordinate x and y.  Author's note.  This function ties drawing and events together.  This is a very complex function and is core to the component.\n         * @memberof canvasDatagrid\n         * @name getCellAt\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Number of pixels from the left.\n         * @param {number} y Number of pixels from the top.\n         */\n        self.getCellAt = function (x, y, useTouchScrollZones) {\n            function getBorder(cell) {\n                if (cell.x + cell.width - (self.attributes.borderResizeZone * 0.4) < x && cell.x + cell.width + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'r';\n                }\n                if (cell.x - (self.attributes.borderResizeZone * 0.4) < x && cell.x + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'l';\n                }\n                if (cell.y + cell.height - (self.attributes.borderResizeZone * 0.4) < y && cell.y + cell.height + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 'b';\n                }\n                if (cell.y - (self.attributes.borderResizeZone * 0.4) < y && cell.y + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 't';\n                }\n            }\n            var border,\n                tsz = useTouchScrollZones ? self.attributes.touchScrollZone : 0,\n                moveMode = self.attributes.borderDragBehavior === 'move',\n                i,\n                l = self.visibleCells.length,\n                moveBorder,\n                xBorderBehavior = moveMode ? self.cursorGrab : 'ew-resize',\n                yBorderBehavior = moveMode ? self.cursorGrab : 'ns-resize',\n                cell;\n            if (!self.visibleCells || !self.visibleCells.length) { return; }\n            self.hasFocus = true;\n            if (!(y < self.height\n                && y > 0\n                && x < self.width\n                && x > 0)) {\n                self.hasFocus = false;\n                return {\n                    dragContext: 'inherit',\n                    context: 'inherit'\n                };\n            }\n            for (i = 0; i < l; i += 1) {\n                cell = self.visibleCells[i];\n                if (useTouchScrollZones && /(vertical|horizontal)-scroll-/.test(cell.style)) {\n                    cell.x -= tsz;\n                    cell.y -= tsz;\n                    cell.height += tsz;\n                    cell.width += tsz;\n                }\n                if (cell.x - self.style.cellBorderWidth < x\n                        && cell.x + cell.width + self.style.cellBorderWidth > x\n                        && cell.y - self.style.cellBorderWidth < y\n                        && cell.y + cell.height + self.style.cellBorderWidth > y) {\n                    if (/frozen-row-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'row-resize';\n                        return cell;\n                    }\n                    if (/frozen-column-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'col-resize';\n                        return cell;\n                    }\n                    if (/selection-handle-/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'crosshair';\n                        return cell;\n                    }\n                    if (/vertical-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'vertical-scroll-box';\n                        cell.context = 'vertical-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isVerticalScrollBar = true;\n                        if (y > self.scrollBox.box.v.y + self.scrollBox.scrollBoxHeight) {\n                            cell.dragContext = 'vertical-scroll-bottom';\n                            cell.context = 'vertical-scroll-bottom';\n                        } else if (y < self.scrollBox.box.v.y) {\n                            cell.dragContext = 'vertical-scroll-top';\n                            cell.context = 'vertical-scroll-top';\n                        }\n                        self.canvas.style.cursor = 'default';\n                        return cell;\n                    }\n                    if (/horizontal-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'horizontal-scroll-box';\n                        cell.context = 'horizontal-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isHorizontalScrollBar = true;\n                        if (x > self.scrollBox.box.h.x + self.scrollBox.scrollBoxWidth) {\n                            cell.dragContext = 'horizontal-scroll-right';\n                            cell.context = 'horizontal-scroll-right';\n                        } else if (x < self.scrollBox.box.h.x) {\n                            cell.dragContext = 'horizontal-scroll-left';\n                            cell.context = 'horizontal-scroll-left';\n                        }\n                        self.canvas.style.cursor = 'default';\n                        return cell;\n                    }\n                    border = getBorder(cell);\n                    // check if the border of this cell is the border of the selection and if so show move cursor in move mode\n                    moveBorder = moveMode && cell.selectionBorder && cell.selectionBorder.indexOf(border) !== -1;\n                    if (['l', 'r'].indexOf(border) !== -1\n                            && (self.attributes.allowColumnResize || moveBorder)\n                            && ((self.attributes.allowColumnResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && ((self.attributes.allowRowHeaderResize && (cell.isRowHeader || cell.isCorner)) || !(cell.isRowHeader && cell.isCorner))) {\n                        if (((cell.isColumnHeader || cell.isCorner) || (self.attributes.allowColumnResizeFromCell && cell.isNormal)) && border === 'r') {\n                            cell.context = 'ew-resize';\n                            cell.dragContext = 'ew-resize';\n                            return cell;\n                        }\n                        if (!(cell.isColumnHeader || cell.isCorner) && moveBorder) {\n                            cell.context = xBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (['t', 'b'].indexOf(border) !== -1\n                            && cell.rowIndex > -1\n                            && (self.attributes.allowRowResize || moveBorder)\n                            && ((self.attributes.allowRowResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && !cell.isColumnHeader) {\n                        if (((cell.isRowHeader || cell.isCorner) || (self.attributes.allowRowResizeFromCell && cell.isNormal)) && border === 'b') {\n                            cell.context = 'ns-resize';\n                            cell.dragContext = 'ns-resize';\n                            return cell;\n                        }\n                        if (!(cell.isRowHeader || cell.isCorner) && moveBorder) {\n                            cell.context = yBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (cell.style === 'columnHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'column-reorder';\n                        return cell;\n                    }\n                    if (cell.style === 'rowHeaderCell') {\n                        if ((self.attributes.rowGrabZoneSize + (cell.y - self.style.cellBorderWidth) < y)\n                                || !self.attributes.allowRowReordering) {\n                            cell.dragContext = 'cell';\n                            cell.context = 'cell';\n                        } else {\n                            cell.context = self.cursorGrab;\n                            cell.dragContext = 'row-reorder';\n                        }\n                        return cell;\n                    }\n                    if (cell.isGrid) {\n                        self.hasFocus = false;\n                        cell.dragContext = 'cell-grid';\n                        cell.context = 'cell-grid';\n                        return cell;\n                    }\n                    if (cell.style === 'tree-grid') {\n                        self.hasFocus = false;\n                        cell.dragContext = 'tree';\n                        cell.context = 'tree';\n                        return cell;\n                    }\n                    cell.dragContext = 'cell';\n                    cell.context = 'cell';\n                    return cell;\n                }\n            }\n            self.hasFocus = true;\n            self.canvas.style.cursor = 'default';\n            return {\n                dragContext: 'background',\n                context: 'background',\n                style: 'background',\n                isBackground: true\n            };\n        };\n        /**\n         * Gets the bounds of current selection. \n         * @returns {rect} selection.\n         * @memberof canvasDatagrid\n         * @name getSelectionBounds\n         * @method\n         */\n        self.getSelectionBounds = function () {\n            var low = {x: Infinity, y: Infinity},\n                high = {x: -Infinity, y: -Infinity};\n            self.data.forEach(function (row, rowIndex) {\n                var maxCol, minCol;\n                if (self.selections[rowIndex] && self.selections[rowIndex].length) {\n                    low.y = rowIndex < low.y ? rowIndex : low.y;\n                    high.y = rowIndex > high.y ? rowIndex : high.y;\n                    maxCol = Math.max.apply(null, self.selections[rowIndex]);\n                    minCol = Math.min.apply(null, self.selections[rowIndex]);\n                    low.x = minCol < low.x ? minCol : low.x;\n                    high.x = maxCol > high.x ? maxCol : high.x;\n                }\n            });\n            return {\n                top: low.y,\n                left: low.x,\n                bottom: high.y,\n                right: high.x\n            };\n        };\n        /**\n         * Returns an auto generated schema based on data structure.\n         * @memberof canvasDatagrid\n         * @name getSchemaFromData\n         * @method\n         * @tutorial schema\n         * @returns {schema} schema A schema based on the first item in the data array.\n         */\n        self.getSchemaFromData = function () {\n            return Object.keys(self.data[0] || {' ': ''}).map(function mapEachSchemaColumn(key, index) {\n                var type = self.getBestGuessDataType(key),\n                    i = {\n                        name: key,\n                        title: isNaN(parseInt(key, 10)) ? key : self.integerToAlpha(key).toUpperCase(),\n                        index: index,\n                        type: type,\n                        filter: self.filter(type)\n                    };\n                if (key === self.uniqueId) {\n                    i.hidden = true;\n                }\n                i[self.uniqueId] = self.getSchemaNameHash(key);\n                return i;\n            });\n        };\n        /**\n         * Clears the change log grid.changes that keeps track of changes to the data set.\n         * This does not undo changes or alter data it is simply a convince array to keep\n         * track of changes made to the data since last this method was called.\n         * @memberof canvasDatagrid\n         * @name clearChangeLog\n         * @method\n         */\n        self.clearChangeLog = function () {\n            self.changes = [];\n        };\n        /**\n         * Selects an area of the grid.\n         * @memberof canvasDatagrid\n         * @name selectArea\n         * @method\n         * @param {rect} bounds A rect object representing the selected values.\n         */\n        self.selectArea = function (bounds, ctrl) {\n            self.selectionBounds = bounds || self.selectionBounds;\n            var x, y, s = self.getSchema();\n            if (!ctrl) {\n                self.selections = [];\n            }\n            if (self.selectionBounds.top < -1\n                    || self.selectionBounds.bottom > self.data.length\n                    || self.selectionBounds.left < -1\n                    || self.selectionBounds.right > s.length) {\n                throw new Error('Impossible selection area');\n            }\n            for (x = self.selectionBounds.top; x <= self.selectionBounds.bottom; x += 1) {\n                self.selections[x] = [];\n                for (y = self.selectionBounds.left; y <= self.selectionBounds.right; y += 1) {\n                    if (self.selections[x].indexOf(y) === -1) {\n                        self.selections[x].push(y);\n                    }\n                }\n            }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Returns the maximum text width for a given column by column name.\n         * @memberof canvasDatagrid\n         * @name findColumnMaxTextLength\n         * @method\n         * @returns {number} The number of pixels wide the maximum width value in the selected column.\n         * @param {string} name The name of the column to calculate the value's width of.\n         */\n        self.findColumnMaxTextLength = function (name) {\n            var m = -Infinity;\n            if (name === 'cornerCell') {\n                self.ctx.font = self.style.rowHeaderCellFont;\n                return self.ctx.measureText((self.data.length + (self.attributes.showNewRow ? 1 : 0)).toString()).width\n                    + self.style.autosizePadding + self.style.autosizeHeaderCellPadding\n                    + self.style.rowHeaderCellPaddingRight\n                    + self.style.rowHeaderCellPaddingLeft\n                    + (self.attributes.tree ? self.style.treeArrowWidth\n                        + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight : 0);\n            }\n            self.getSchema().forEach(function (col) {\n                if (col.name !== name) { return; }\n                self.ctx.font = self.style.columnHeaderCellFont;\n                var t = self.ctx.measureText(col.title || col.name).width\n                    + self.style.headerCellPaddingRight\n                    + self.style.headerCellPaddingLeft;\n                m = t > m ? t : m;\n            });\n            self.data.forEach(function (row) {\n                self.ctx.font = self.style.cellFont;\n                var t = self.ctx.measureText(row[name]).width\n                    + self.style.cellPaddingRight\n                    + self.style.cellPaddingLeft + self.style.cellAutoResizePadding;\n                m = t > m ? t : m;\n            });\n            return m;\n        };\n        /**\n         * Gets the total width of all header columns.\n         * @memberof canvasDatagrid\n         * @name getHeaderWidth\n         * @method\n         */\n        self.getHeaderWidth = function () {\n            return self.getVisibleSchema().reduce(function (total, header) {\n                return total + (header.width || self.style.cellWidth);\n            }, 0);\n        };\n        self.formatters.string = function cellFormatterString(e) {\n            return e.cell.value !== undefined ? e.cell.value : '';\n        };\n        self.formatters.rowHeaderCell = self.formatters.string;\n        self.formatters.headerCell = self.formatters.string;\n        self.formatters.number = self.formatters.string;\n        self.formatters.int = self.formatters.string;\n        self.formatters.html = self.formatters.string;\n        self.sorters.string = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (a[columnName] === undefined || a[columnName] === null) {\n                    return 1;\n                }\n                if (b[columnName] === undefined || b[columnName] === null) {\n                    return 0;\n                }\n                if (asc) {\n                    if (!a[columnName].localeCompare) { return 1; }\n                    return a[columnName].localeCompare(b[columnName]);\n                }\n                if (!b[columnName].localeCompare) { return 1; }\n                return b[columnName].localeCompare(a[columnName]);\n            };\n        };\n        self.sorters.number = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return a[columnName] - b[columnName];\n                }\n                return b[columnName] - a[columnName];\n            };\n        };\n        self.sorters.date = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return new Date(a[columnName]).getTime()\n                        - new Date(b[columnName]).getTime();\n                }\n                return new Date(b[columnName]).getTime()\n                        - new Date(a[columnName]).getTime();\n            };\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/publicMethods.js\n// module id = 9\n// module chunks = 0"],"sourceRoot":""}