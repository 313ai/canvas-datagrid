{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///canvas-datagrid.js","webpack:///webpack/bootstrap f2e069db9b18d40cb099","webpack:///./lib/defaults.js","webpack:///./lib/main.js","webpack:///./lib/component.js","webpack:///./lib/draw.js","webpack:///./lib/events.js","webpack:///./lib/touch.js","webpack:///./lib/intf.js","webpack:///./lib/contextMenu.js","webpack:///./lib/dom.js","webpack:///./lib/publicMethods.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","undefined","self","defaults","attributes","styles","apply","context","component","Grid","args","isComponent","intf","eval","createGrid","forEach","parentNode","createShadowRoot","shadowRoot","attachShadow","mode","debug","init","Array","slice","arguments","window","HTMLElement","create","customElements","observedAttributes","getObservableAttributes","disconnectedCallback","attributeChangedCallback","connectedCallback","adoptedCallback","canvasDatagrid","require","hyphenateProperty","prop","cust","char","toUpperCase","toLowerCase","getDefaultItem","base","item","filter","applyComponentStyle","supressChangeAndDrawEvents","cStyle","getComputedStyle","defs","computedStyle","def","val","getPropertyValue","setStyleProperty","typeMap","resize","dispatchEvent","style","data","strData","JSON","parse","e","Error","schema","strSchema","number","strNum","parseInt","isNaN","boolean","strBool","test","string","str","attrs","attr","push","connected","dispose","observe","attrName","oldVal","newVal","tfn","requestAnimationFrame","addEventListener","observer","MutationObserver","mutations","checkInnerHTML","checkStyle","mutation","attributeName","target","nodeName","addedNodes","length","type","innerHTML","characterData","childList","subtree","document","querySelectorAll","el","drawPerfLine","w","h","x","y","perfArr","arrIndex","max","color","useAbs","r","canvasOffsetLeft","canvasOffsetTop","ctx","beginPath","moveTo","cx","cy","Math","abs","lineTo","strokeStyle","stroke","drawOnAllImagesLoaded","loaded","keys","htmlImageCache","html","complete","draw","drawHtml","cell","img","v","formattedValue","height","width","drawImage","Image","onload","src","btoa","drawOrderByArrow","mt","columnHeaderOrderByArrowMarginTop","scale","ml","columnHeaderOrderByArrowMarginLeft","mr","columnHeaderOrderByArrowMarginRight","aw","columnHeaderOrderByArrowWidth","ah","columnHeaderOrderByArrowHeight","fillStyle","columnHeaderOrderByArrowColor","columnHeaderOrderByArrowBorderColor","orderDirection","fill","drawTreeArrow","treeArrowMarginTop","treeArrowMarginRight","treeArrowMarginLeft","treeArrowWidth","treeArrowHeight","treeArrowColor","treeArrowBorderColor","openChildren","uniqueId","radiusRect","radius","b","quadraticCurveTo","fillRect","strokeRect","fillText","text","fillCircle","arc","PI","strokeCircle","clipFrozenArea","lastFrozenColumnPixel","lastFrozenRowPixel","clip","fillHandle","selectionHandleType","strokeHandle","addselectionHandle","pos","hw","selectionHandleSize","tr","br","tl","bl","addBorderLine","t","addEllipsis","ellipsisCache","measureText","value","drawText","paddingLeft","paddingTop","paddingRight","paddingBottom","vPos","hPos","orderByArrowWidth","fontHeight","horizontalAlignment","verticalAlignment","getFrozenColumnsWidth","column","getVisibleSchema","min","frozenColumn","orders","columns","sizes","cellWidth","perfCounters","drawCount","perfWindowSize","entityCount","scrollDebugCounters","touchPPSCounters","internal","createHandlesOverlayArray","allowMovingSelection","mobile","selectionBorderTop","selectionBorderRight","selectionHandles","selectionHandle","selectionBorderLeft","selectionBorderBottom","selectionHandleBehavior","createBorderOverlayArray","drawArray","propPrefix","offsetPoint","selectionBorder","isRowHeader","selections","rowIndex","indexOf","columnIndex","isHeader","drawCell","rowOrderIndex","header","headerIndex","columnOrderIndex","cellGridAttributes","cellStyle","isCorner","isColumnHeader","selected","hovered","hovers","active","activeCell","isGrid","activeHeader","rows","f","formatters","orderByArrowSize","treeArrowSize","ev","row","cellBorderWidth","visibleRows","nodeType","offsetTop","offsetLeft","scrollTop","scrollBox","scrollLeft","cellHeight","offsetWidth","offsetHeight","offsetParent","isHeaderCellCap","rowOpen","sortColumnIndex","sortRowIndex","isNormal","gridId","parentGrid","title","userHeight","rowHeight","userWidth","cornerCell","visibleCells","unshift","lineWidth","cellHeightWithChildGrid","checkScrollHeight","cellWidthWithChildGrid","rd","save","tree","showRowNumbers","childGrids","saveAppearance","cellGridHeight","grid","visible","orderBy","font","console","warn","toString","columnFilters","filterTextPrefix","aCell","selectionBorders","movingSelection","moveBorders","moveOffset","restore","bc","drawRowHeader","rowData","index","a","showRowHeaders","rowHeaderCell","rowHeaderCellWidth","drawRow","treeHeight","rowSansTreeHeight","g","trees","allowFreezingColumns","frozenColumnWidths","scrollIndexLeft","scrollIndexRight","scrollPixelRight","scrollPixelLeft","treeGrid","scrollBarWidth","rowHeaders","visibleRowHeights","isChildGrid","borderCollapse","u","currentCell","columnHeaderCellHeight","getColumnHeaderCellHeight","getRowHeaderCellWidth","performance","now","createRowOrders","devicePixelRatio","gridBackgroundColor","ln","frozenRow","allowFreezingRows","frozenMarkerBorderWidth","frozenMarkerWidth","snapToRow","scrollPixelTop","scrollIndexTop","scrollIndexBottom","scrollPixelBottom","showNewRow","newRow","cl","selectionMode","activeCellOverlayBorderWidth","activeCellOverlayBorderColor","getHeaderWidth","drawHeaderColumnRange","start","end","order","columnHeaderCell","nonFrozenHeaderWidth","rArgs","rhIndex","showColumnHeaders","columnHeaderCellBorderWidth","isHeaderCell","endCap","my","mx","xHover","yHover","frozenMarkerHoverColor","frozenMarkerColor","frozenMarkerHoverBorderColor","frozenMarkerBorderColor","freezeMarkerPosition","frozenMarkerActiveColor","frozenMarkerActiveBorderColor","dragMode","dsb","selectionOverlayBorderWidth","selectionOverlayBorderColor","selectionHandleBorderWidth","selectionHandleBorderColor","selectionHandleColor","az","touchSelectHandleZone","ax","ay","reorderObject","dragOffset","reorderMarkerBackgroundColor","reorderMarkerBorderWidth","reorderMarkerBorderColor","reorderMarkerIndexBorderWidth","reorderMarkerIndexBorderColor","reorderTarget","moveOverlayBorderWidth","moveOverlayBorderColor","setLineDash","moveOverlayBorderSegments","vb","nb","co","isScrollBoxCorner","scrollBarBoxMargin","scrollBarBorderColor","scrollBarBorderWidth","scrollBarBackgroundColor","scrollBoxHeight","scrollHeight","scrollBarBoxWidth","scrollBarBoxColor","scrollBarActiveColor","scrollBarBoxBorderRadius","scrollBoxWidth","scrollWidth","scrollBarCornerBorderColor","scrollBarCornerBackgroundColor","bar","box","gridBorderWidth","gridBorderColor","showPerformance","fillArray","pop","perf","reduce","toFixed","htmlImages","startScale","scaleDelta","zoomDeltaStart","touchLength","touches","touchPosition","touchPosition1","scrollIndex","scrollPixel","canvasOffset","touchDelta","touchAnimateTo","scrollAnimation","touchPPS","xPPS","yPPS","touchPPST","xPPST","yPPST","touchDuration","pointerLockPosition","size","mouse","touch","touchStart","entities","hasFocus","dragContext","textAlign","key","dpl","pw","ph","px","py","wheeling","stopPropagation","fn","events","removeEventListener","sfn","idx","splice","preventDefault","defaultPrevented","drawAfterResize","canvas","bm","cellBorder","columnHeaderCellBorder","ch","accumulator","hidden","top","left","widthBoxRatio","heightBoxRatio","scrollBarBoxMinSize","page","pageUpDownOverlap","resizeEditInput","scroll","dontDraw","mousemove","overridePos","contextMenu","input","getLayerPos","dragBounds","sBounds","delta","ctrl","ctrlKey","metaKey","persistantSelectionMode","vs","getCellAt","NativeEvent","previousCell","clearTimeout","scrollTimer","isInGrid","cellBoundaryCrossed","draggingItem","scrollModes","dragItem","cursor","selecting","getSelectionBounds","dragStart","dragStartObject","shiftKey","bottom","right","ignoreNextClick","selectRow","dragAddToSelection","selectionBounds","selectArea","autoScrollZone","click","checkSelectionChange","selectedData","getSelectedData","endEdit","setActiveCell","selectAll","columnHeaderClickBehavior","selectColumn","treeArrowClickRadius","toggleTree","dragResizeColumn","resizingStartingWidth","resizingStartingHeight","minColumnWidth","minRowHeight","resizeScrollZone","resizeChildGrids","globalRowResize","stopDragResize","body","setStorageData","scrollGrid","scrollPointerLock","scrollStartMode","movementX","movementY","scrollMode","scrollStart","setTimeout","scrollRepeatRate","selectionScrollIncrement","stopScrollGrid","exitPointerLock","dragReorder","allowColumnReordering","allowRowReordering","source","reorderDeadZone","stopDragReorder","oIndex","tIndex","cr","row-reorder","column-reorder","dragMove","stopDragMove","moveSelection","freezeMove","stopFreezeMove","startFreezeMove","mousedown","lastMouseDownTarget","button","move","freeze","requestPointerLock","concat","dragging","mouseup","controlInput","focus","keydown","last","cols","keyCode","beginEditAt","scrollIntoView","selectionFollowsActiveCell","keyup","keypress","dblclick","fitColumnToValues","autosize","scrollWheel","deltaX","deltaY","deltaMode","touchHaltAnimation","scrollTo","pasteItem","clipData","mimeType","normalizeRowData","importingRow","existingRow","offsetX","isArray","map","colKey","substring","split","sel","cellData","colIndex","cName","yi","paste","clipboardData","items","dti","getAsString","cut","copy","forEachSelectedCell","colName","fCopyCell","replace","trows","sData","rt","join","setData","touchScrollTimeout","animationFrames","getTouchPos","touchIndex","rect","getBoundingClientRect","clientX","clientY","easingFunctions","linear","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easing","touchEasingMethod","calculatePPSTimed","touchSigmaTimed","calculatePPS","touchSigma","touchEndAnimation","touchReleaseAnimationDurationMs","stopAnimation","touchEditCell","touchCell","clearInterval","calculatePPSTimer","touchDeadZone","touchingCell","touchstart","disposeContextMenu","touchContextTimeout","touchStartEvent","changedTouches","zoomAltered","touchStart1","touchScrollStart","contextmenuEvent","touchContextMenuTimeMs","setInterval","startingCell","touchEndEvents","touchmove","passive","touchend","touchcancel","touchSelect","handleType","touchSelecting","bounds","getSchema","touchScroll","rScrollZone","bScrollZone","tScrollZone","lScrollZone","rw","sbw","t1","t2","touchZoomSensitivity","touchZoomMin","touchZoomMax","selectionScrollZone","dz","touchReleaseAcceleration","scrollAnimationPPSThreshold","ctor","storageName","invalidSearchExpClass","localStyleLibraryStorageKey","filters","currentFilter","sorters","schemaHashes","uId","changes","componentL1Events","eventNames","expandToRow","col","low","high","step","localStorage","setItem","stringify","tempSchema","createColumnOrders","applyDefaultValue","defaultValue","createNewRowData","getSchemaNameHash","getBestGuessDataType","columnName","drawChildGrids","gridKey","setTimer","refreshFromOrigialData","originalData","validateColumn","setDefaults","obj1","obj2","setAttributes","setStyle","removeChild","eventParent","contextmenu","disconnect","tryLoadStoredOrders","storedSettings","getHeaderByName","getDomRoot","host","getFontName","fontStyle","getFontHeight","parseFloat","parseStyleValue","initProp","propName","styleKeys","parentNodeStyle","initialized","publicStyleKeyIntf","initScrollBox","setDom","ie","navigator","userAgent","edge","webKit","moz","cursorGrab","cursorGrabing","cursorGrabbing","appendTo","clearChangeLog","gotoCell","gotoRow","findColumnScrollLeft","findRowScrollTop","findColumnMaxTextLength","isCellVisible","clipElement","getSchemaFromData","setFilter","expandTree","collapseTree","insertRow","deleteRow","addRow","insertColumn","deleteColumn","addColumn","getClippingRect","setRowHeight","setColumnWidth","resetColumnWidths","resetRowHeights","selectNone","assertPxColor","clearPxColorAssertions","integerToAlpha","DOMStyles","set","filterFor","String","filterRegExp","regEnd","pattern","exec","flags","flagLength","invalidFilterRegEx","RegExp","toLocaleUpperCase","getItem","blur","TypeError","normalizeDataset","callback","syncFnInvoked","0","eventName","RangeError","autoResizeColumns","setScrollTop","preventScrollEvent","setScrollLeft","sHeight","sWidth","supressDrawEvent","applyContextItemStyle","contextItemContainer","createInlineStyle","createContextMenu","parentContextMenu","createItems","removeChildContext","relatedTarget","container","childMenuArrow","contains","children","setAttribute","contextAddCallback","getAttribute","cPos","childContextMenuMarginLeft","childContextMenuMarginTop","createChildContext","createElement","addContent","content","appendChild","childContextMenuArrowHTML","clickIndex","Event","checkArrowVisibility","parentDOMNode","upArrow","downArrow","startHoverScroll","contextHoverScrollAmount","hoverScrollTimeout","contextHoverScrollRateMs","endHoverScroll","selectedIndex","loc","scrollOffset","zIndexTop","position","contextMenuArrowColor","zIndex","inputDropdown","maxHeight","innerHeight","autocompleteBottomMargin","minWidth","contextMenuArrowUpHTML","contextMenuArrowDownHTML","contextMenuWindowMargin","innerWidth","isFinite","createFilterContextMenuItems","checkRegExpErrorState","filterInput","background","contextFilterInputBackground","contextFilterInputColor","contextFilterInvalidRegExpBackground","contextFilterInvalidRegExpColor","fillAutoComplete","count","autoCompleteItems","maxAutoCompleteItems","disposeAutocomplete","createAutoCompleteContext","iRect","autoCompleteContext","filterContainer","filterLabel","filterAutoCompleteButton","onclick","en","filterOptionText","contextFilterButtonHTML","cf","removeFilterOptionText","addDefaultContextMenuItem","isNormalCell","isBackground","isScrollBar","showFilter","showCopy","copyText","execCommand","showPaste","clipBoardData","pasteText","showColumnSelector","columnSelectorText","toggleColumnVisibility","columnSelectorHiddenText","columnSelectorVisibleText","hideColumnText","showClearSettingsOption","clearSettingsOptionText","columnWidth","allowSorting","showOrderByOption","showOrderByOptionTextAsc","showOrderByOptionTextDesc","createDiposeEvent","contextPosition","st","sl","scrollingElement","contextMenuMarginLeft","contextMenuMarginTop","mobileContextMenuMargin","ele","boundingRect","eleRect","clipRect","parentRect","Infinity","borderWidth","getVisibleCellByIndex","editCell","mobileEditInputHeight","cellPaddingLeft","ignoreScrollOffset","abort","abortEdit","newValue","oldValue","aborted","editable","enumItems","enu","option","valueInEnum","multiLine","fontSize","editCellFontSize","nx","ny","className","css","canvas-datagrid-context-menu-filter-input","verticalAlign","marginLeft","padding","border","contextFilterInputBorder","borderRadius","contextFilterInputBorderRadius","lineHeight","fontWeight","fontFamily","contextFilterInputFontFamily","contextFilterInputFontSize","canvas-datagrid-context-menu-filter-button","contextMenuBackground","contextMenuColor","contextFilterButtonBorder","contextFilterButtonBorderRadius","contextMenuFilterButtonFontFamily","contextMenuFilterButtonFontSize","canvas-datagrid-context-child-arrow","cssFloat","childContextMenuArrowColor","contextMenuChildArrowFontSize","contextMenuFontFamily","canvas-datagrid-autocomplete","contextMenuFontSize","contextMenuBorder","contextMenuPadding","contextMenuBorderRadius","opacity","contextMenuOpacity","overflow","canvas-datagrid-autocomplete-item","canvas-datagrid-autocomplete-item:hover","contextMenuHoverBackground","contextMenuHoverColor","canvas-datagrid-canvas","canvas-datagrid","display","boxSizing","canvas-datagrid-control-input","canvas-datagrid-edit-mobile-input","outline","margin","mobileEditFontFamily","mobileEditFontSize","editCellBorder","editCellColor","editCellBackgroundColor","appearance","webkitAppearance","mozAppearance","canvas-datagrid-edit-input","editCellPaddingLeft","editCellFontFamily","boxShadow","editCellBoxShadow","canvas-datagrid-context-menu-item-mobile","contextMenuItemMargin","contextMenuItemBorderRadius","canvas-datagrid-context-menu-item","canvas-datagrid-context-menu-item:hover","canvas-datagrid-context-menu-label","contextMenuLabelMargin","contextMenuLabelDisplay","contextMenuLabelMinWidth","maxWidth","contextMenuLabelMaxWidth","canvas-datagrid-context-menu-mobile","whiteSpace","canvas-datagrid-context-menu","canvas-datagrid-invalid-search-regExp","contextMenuFilterInvalidExpresion","onblur","parentIsCanvas","tagName","getContext","textBaseline","ordA","charCodeAt","ordZ","len","fromCharCode","floor","applyFilter","isColumnSelected","colIsSelected","shift","supressEvent","addCol","ri","dragObject","rowId","childGrid","treeGridHeight","direction","sortFunction","dontSetStorageData","sort","offsetY","xi","cidx","isColumnVisible","isRowVisible","useTouchScrollZones","moveBorder","tsz","touchScrollZone","moveMode","borderDragBehavior","xBorderBehavior","yBorderBehavior","isVerticalScrollBar","isHorizontalScrollBar","borderResizeZone","allowColumnResize","allowColumnResizeFromCell","allowRowHeaderResize","allowRowResize","allowRowResizeFromCell","rowGrabZoneSize","maxCol","minCol"," ","rowHeaderCellFont","autosizePadding","autosizeHeaderCellPadding","rowHeaderCellPaddingRight","rowHeaderCellPaddingLeft","columnHeaderCellFont","headerCellPaddingRight","headerCellPaddingLeft","cellFont","cellPaddingRight","cellAutoResizePadding","total","headerCell","int","asc","localeCompare","date","Date","getTime"],"mappings":"CAAA,SAAAA,EAAAC,GACA,gBAAAC,UAAA,gBAAAC,QACAA,OAAAD,QAAAD,IACA,kBAAAG,gBAAAC,IACAD,UAAAH,GACA,gBAAAC,SACAA,QAAA,eAAAD,IAEAD,EAAA,eAAAC,KACCK,KAAA,WACD,MCAgB,UAAUC,GCN1B,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAP,OAGA,IAAAC,GAAAO,EAAAD,IACAE,EAAAF,EACAG,GAAA,EACAV,WAUA,OANAK,GAAAE,GAAAI,KAAAV,EAAAD,QAAAC,IAAAD,QAAAM,GAGAL,EAAAS,GAAA,EAGAT,EAAAD,QAvBA,GAAAQ,KA4DA,OAhCAF,GAAAM,EAAAP,EAGAC,EAAAO,EAAAL,EAGAF,EAAAQ,EAAA,SAAAd,EAAAe,EAAAC,GACAV,EAAAW,EAAAjB,EAAAe,IACAG,OAAAC,eAAAnB,EAAAe,GACAK,cAAA,EACAC,YAAA,EACAC,IAAAN,KAMAV,EAAAiB,EAAA,SAAAtB,GACA,GAAAe,GAAAf,KAAAuB,WACA,WAA2B,MAAAvB,GAAA,SAC3B,WAAiC,MAAAA,GAEjC,OADAK,GAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAQ,EAAAC,GAAsD,MAAAR,QAAAS,UAAAC,eAAAjB,KAAAc,EAAAC,IAGtDpB,EAAAuB,EAAA,GAGAvB,IAAAwB,EAAA,KDgBM,SAAU7B,EAAQD,EAASM,GE7EjC,GAAAyB,GAAAC,CAEAD,UA+QCE,MA/QDD,EAAA,WACA,YACA,iBAAAE,GACAA,EAAAC,UACAC,aACA,6BACA,yBACA,iCACA,yBACA,4BACA,4BACA,4BACA,0BACA,sBACA,8BACA,oBACA,yBACA,8BACA,wBACA,mDACA,qCACA,kDACA,4CACA,kCACA,+BACA,+BACA,oBACA,aACA,gBACA,iCACA,mCACA,uBACA,6BACA,6BACA,iBACA,YACA,wBACA,sBACA,+BACA,iDACA,sBACA,wBACA,sBACA,sBACA,oCACA,yBACA,wBACA,kCACA,mCACA,yBACA,gCACA,2BACA,+BACA,yBACA,0BACA,gBACA,kBACA,kBACA,yBACA,qDACA,uDACA,iBACA,uBACA,sBACA,sBACA,iBACA,+BACA,oBACA,oCACA,iCACA,wCACA,uBACA,6BACA,8BACA,oBACA,sBACA,YACA,4BAEAC,SACA,uDACA,mDACA,4BACA,uCACA,qCACA,4DACA,4CACA,yDACA,mCACA,8BACA,4BACA,6BACA,2BACA,+DACA,+CACA,mEACA,mDACA,gEACA,gDACA,gCACA,gCACA,sBACA,8BACA,6BACA,iDACA,6CACA,sBACA,iCACA,+BACA,uBACA,kBACA,gCACA,mCACA,sDACA,sCACA,wBACA,sBACA,uBACA,qBACA,yDACA,yCACA,mCACA,kBACA,+BACA,qDACA,yCACA,mCACA,iCACA,6DACA,yDACA,kCACA,gDACA,2CACA,8BACA,+CACA,kEACA,kDACA,oCACA,kCACA,mCACA,iCACA,+CACA,iEACA,0CACA,2DACA,qCACA,yCACA,0CACA,wCACA,qCACA,iEACA,0CACA,uCACA,uDACA,gEACA,uCACA,4CACA,8CACA,sCACA,8DACA,6DACA,gDACA,wCACA,sCACA,mDACA,yDACA,kCACA,yCACA,2CACA,mDACA,2CACA,+DACA,uCACA,+BACA,wDACA,iDACA,sCACA,gCACA,2CACA,uCACA,qCACA,oCACA,4BACA,4BACA,8BACA,6BACA,gCACA,uDACA,mDACA,oCACA,sDACA,kDACA,0BACA,oCACA,4BACA,0BACA,oDACA,0DACA,qDACA,2DACA,+CACA,qDACA,8BACA,wBACA,iDACA,6CACA,sBACA,sBACA,oBACA,+BACA,6BACA,sCACA,8BACA,6BACA,mDACA,sCACA,mBACA,sDACA,kDACA,kCACA,0DACA,uCACA,0DACA,sDACA,+BACA,6CACA,wCACA,2BACA,4CACA,+DACA,+CACA,iCACA,+BACA,gCACA,8BACA,kEACA,qDACA,4CACA,0BACA,kDACA,sDACA,kDACA,4BACA,mCACA,+CACA,yBACA,2BACA,wBACA,4DACA,wDACA,sBACA,wDACA,mCACA,iDACA,0BACA,iCACA,wDACA,kCACA,kDACA,2BA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","file":"canvas-datagrid.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"canvasDatagrid\"] = factory();\n\telse\n\t\troot[\"canvasDatagrid\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"canvasDatagrid\"] = factory();\n\telse\n\t\troot[\"canvasDatagrid\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 1);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        self.defaults = {\n            attributes: [\n                ['allowColumnReordering', true],\n                ['allowColumnResize', true],\n                ['allowColumnResizeFromCell', false],\n                ['allowFreezingRows', false],\n                ['allowFreezingColumns', false],\n                ['allowMovingSelection', true],\n                ['allowRowHeaderResize', true],\n                ['allowRowReordering', false],\n                ['allowRowResize', true],\n                ['allowRowResizeFromCell', false],\n                ['allowSorting', true],\n                ['autoResizeColumns', false],\n                ['borderDragBehavior', 'none'],\n                ['borderResizeZone', 10],\n                ['clearSettingsOptionText', 'Clear saved settings'],\n                ['columnHeaderClickBehavior', 'sort'],\n                ['columnSelectorHiddenText', '&nbsp;&nbsp;&nbsp;'],\n                ['columnSelectorText', 'Add/Remove columns'],\n                ['columnSelectorVisibleText', '\\u2713'],\n                ['contextHoverScrollAmount', 2],\n                ['contextHoverScrollRateMs', 5],\n                ['copyText', 'Copy'],\n                ['debug', false],\n                ['editable', true],\n                ['filterOptionText', 'Filter %s'],\n                ['filterTextPrefix', '(filtered) '],\n                ['globalRowResize', false],\n                ['hideColumnText', 'Hide %s'],\n                ['maxAutoCompleteItems', 200],\n                ['multiLine', false],\n                ['name', ''],\n                ['pageUpDownOverlap', 1],\n                ['pasteText', 'Paste'],\n                ['persistantSelectionMode', false],\n                ['removeFilterOptionText', 'Remove filter on %s'],\n                ['reorderDeadZone', 3],\n                ['resizeScrollZone', 20],\n                ['rowGrabZoneSize', 5],\n                ['saveAppearance', true],\n                ['scrollAnimationPPSThreshold', 0.75],\n                ['scrollPointerLock', false],\n                ['scrollRepeatRate', 75],\n                ['selectionFollowsActiveCell', false],\n                ['selectionHandleBehavior', 'none'],\n                ['selectionMode', 'cell'],\n                ['selectionScrollIncrement', 20],\n                ['selectionScrollZone', 20],\n                ['showClearSettingsOption', true],\n                ['showColumnHeaders', true],\n                ['showColumnSelector', true],\n                ['showCopy', true],\n                ['showFilter', true],\n                ['showNewRow', false],\n                ['showOrderByOption', true],\n                ['showOrderByOptionTextAsc', 'Order by %s ascending'],\n                ['showOrderByOptionTextDesc', 'Order by %s descending'],\n                ['showPaste', false],\n                ['showPerformance', false],\n                ['showRowHeaders', true],\n                ['showRowNumbers', true],\n                ['snapToRow', false],\n                ['touchContextMenuTimeMs', 800],\n                ['touchDeadZone', 3],\n                ['touchEasingMethod', 'easeOutQuad'],\n                ['touchReleaseAcceleration', 1000],\n                ['touchReleaseAnimationDurationMs', 2000],\n                ['touchScrollZone', 20],\n                ['touchSelectHandleZone', 20],\n                ['touchZoomSensitivity', 0.005],\n                ['touchZoomMin', 0.5],\n                ['touchZoomMax', 1.75],\n                ['tree', false],\n                ['treeHorizontalScroll', false]\n            ],\n            styles: [\n                ['activeCellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['activeCellBorderWidth', 1],\n                ['activeCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellFont', '16px sans-serif'],\n                ['activeCellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['activeCellOverlayBorderWidth', 1],\n                ['activeCellPaddingBottom', 5],\n                ['activeCellPaddingLeft', 5],\n                ['activeCellPaddingRight', 7],\n                ['activeCellPaddingTop', 5],\n                ['activeCellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['activeCellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['activeColumnHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeColumnHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeRowHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeRowHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['autocompleteBottomMargin', 60],\n                ['autosizeHeaderCellPadding', 8],\n                ['autosizePadding', 5],\n                ['borderCollapse', 'collapse'],\n                ['cellAutoResizePadding', 13],\n                ['cellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['cellBorderWidth', 1],\n                ['cellColor', 'rgba(0, 0, 0, 1)'],\n                ['cellFont', '16px sans-serif'],\n                ['cellGridHeight', 250],\n                ['cellHeight', 24],\n                ['cellHeightWithChildGrid', 150],\n                ['cellHorizontalAlignment', 'left'],\n                ['cellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['cellPaddingBottom', 5],\n                ['cellPaddingLeft', 5],\n                ['cellPaddingRight', 7],\n                ['cellPaddingTop', 5],\n                ['cellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['cellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['cellVerticalAlignment', 'center'],\n                ['cellWidth', 250],\n                ['cellWidthWithChildGrid', 250],\n                ['childContextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['childContextMenuArrowHTML', '&#x25BA;'],\n                ['childContextMenuMarginLeft', -11],\n                ['childContextMenuMarginTop', -6],\n                ['columnHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellBorderColor', 'rgba(172, 172, 172, 1)'],\n                ['columnHeaderCellBorderWidth', 1],\n                ['columnHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['columnHeaderCellFont', '16px sans-serif'],\n                ['columnHeaderCellHeight', 25],\n                ['columnHeaderCellHorizontalAlignment', 'left'],\n                ['columnHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['columnHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['columnHeaderCellPaddingBottom', 5],\n                ['columnHeaderCellPaddingLeft', 5],\n                ['columnHeaderCellPaddingRight', 7],\n                ['columnHeaderCellPaddingTop', 5],\n                ['columnHeaderCellVerticalAlignment', 'center'],\n                ['columnHeaderOrderByArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['columnHeaderOrderByArrowBorderWidth', 1],\n                ['columnHeaderOrderByArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['columnHeaderOrderByArrowHeight', 8],\n                ['columnHeaderOrderByArrowMarginLeft', 0],\n                ['columnHeaderOrderByArrowMarginRight', 5],\n                ['columnHeaderOrderByArrowMarginTop', 6],\n                ['columnHeaderOrderByArrowWidth', 13],\n                ['contextFilterButtonBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterButtonBorderRadius', '3px'],\n                ['contextFilterButtonHTML', '&#x25BC;'],\n                ['contextFilterInputBackground', 'rgba(255,255,255,1)'],\n                ['contextFilterInputBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterInputBorderRadius', '0'],\n                ['contextFilterInputColor', 'rgba(0,0,0,1)'],\n                ['contextFilterInputFontFamily', 'sans-serif'],\n                ['contextFilterInputFontSize', '14px'],\n                ['contextFilterInvalidRegExpBackground', 'rgba(180, 6, 1, 1)'],\n                ['contextFilterInvalidRegExpColor', 'rgba(255, 255, 255, 1)'],\n                ['contextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuArrowDownHTML', '&#x25BC;'],\n                ['contextMenuArrowUpHTML', '&#x25B2;'],\n                ['contextMenuBackground', 'rgba(240, 240, 240, 1)'],\n                ['contextMenuBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextMenuBorderRadius', '3px'],\n                ['contextMenuChildArrowFontSize', '12px'],\n                ['contextMenuColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuFilterButtonFontFamily', 'sans-serif'],\n                ['contextMenuFilterButtonFontSize', '10px'],\n                ['contextMenuFilterInvalidExpresion', 'rgba(237, 155, 156, 1)'],\n                ['contextMenuFontFamily', 'sans-serif'],\n                ['contextMenuFontSize', '16px'],\n                ['contextMenuHoverBackground', 'rgba(182, 205, 250, 1)'],\n                ['contextMenuHoverColor', 'rgba(43, 48, 153, 1)'],\n                ['contextMenuItemBorderRadius', '3px'],\n                ['contextMenuItemMargin', '2px'],\n                ['contextMenuLabelDisplay', 'inline-block'],\n                ['contextMenuLabelMargin', '0 3px 0 0'],\n                ['contextMenuLabelMaxWidth', '700px'],\n                ['contextMenuLabelMinWidth', '75px'],\n                ['contextMenuMarginLeft', 3],\n                ['contextMenuMarginTop', -3],\n                ['contextMenuOpacity', '0.98'],\n                ['contextMenuPadding', '2px'],\n                ['contextMenuWindowMargin', 100],\n                ['cornerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cornerCellBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['editCellBackgroundColor', 'white'],\n                ['editCellBorder', 'solid 1px rgba(110, 168, 255, 1)'],\n                ['editCellBoxShadow', '0 2px 5px rgba(0,0,0,0.4)'],\n                ['editCellColor', 'black'],\n                ['editCellFontFamily', 'sans-serif'],\n                ['editCellFontSize', '16px'],\n                ['editCellPaddingLeft', 4],\n                ['frozenMarkerHoverColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerHoverBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerActiveColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerActiveBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerColor', 'rgba(222, 222, 222, 1)'],\n                ['frozenMarkerBorderColor', 'rgba(168, 168, 168, 1)'],\n                ['frozenMarkerBorderWidth', 1],\n                ['frozenMarkerWidth', 2],\n                ['gridBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['gridBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['gridBorderWidth', 1],\n                ['minColumnWidth', 45],\n                ['minRowHeight', 24],\n                ['mobileContextMenuMargin', 10],\n                ['mobileEditInputHeight', 30],\n                ['mobileEditFontFamily', 'sans-serif'],\n                ['mobileEditFontSize', '16px'],\n                ['moveOverlayBorderWidth', 1],\n                ['moveOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['moveOverlayBorderSegments', '12, 7'],\n                ['name', 'default'],\n                ['reorderMarkerBackgroundColor', 'rgba(0, 0, 0, 0.1)'],\n                ['reorderMarkerBorderColor', 'rgba(0, 0, 0, 0.2)'],\n                ['reorderMarkerBorderWidth', 1.25],\n                ['reorderMarkerIndexBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['reorderMarkerIndexBorderWidth', 2.75],\n                ['rowHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['rowHeaderCellBorderColor', 'rgba(200, 200, 200, 1)'],\n                ['rowHeaderCellBorderWidth', 1],\n                ['rowHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellFont', '16px sans-serif'],\n                ['rowHeaderCellHeight', 25],\n                ['rowHeaderCellHorizontalAlignment', 'left'],\n                ['rowHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['rowHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['rowHeaderCellPaddingBottom', 5],\n                ['rowHeaderCellPaddingLeft', 5],\n                ['rowHeaderCellPaddingRight', 5],\n                ['rowHeaderCellPaddingTop', 5],\n                ['rowHeaderCellSelectedBackgroundColor', 'rgba(217, 217, 217, 1)'],\n                ['rowHeaderCellSelectedColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellVerticalAlignment', 'center'],\n                ['rowHeaderCellWidth', 57],\n                ['scrollBarActiveColor', 'rgba(125, 125, 125, 1)'],\n                ['scrollBarBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarBorderWidth', 0.5],\n                ['scrollBarBoxBorderRadius', 4.125],\n                ['scrollBarBoxColor', 'rgba(192, 192, 192, 1)'],\n                ['scrollBarBoxMargin', 2],\n                ['scrollBarBoxMinSize', 15],\n                ['scrollBarBoxWidth', 8],\n                ['scrollBarCornerBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarCornerBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarWidth', 11],\n                ['selectionHandleBorderColor', 'rgba(255, 255, 255, 1)'],\n                ['selectionHandleBorderWidth', 1.5],\n                ['selectionHandleColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionHandleSize', 8],\n                ['selectionHandleType', 'square'],\n                ['selectionOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionOverlayBorderWidth', 1],\n                ['treeArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['treeArrowBorderWidth', 1],\n                ['treeArrowClickRadius', 5],\n                ['treeArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['treeArrowHeight', 8],\n                ['treeArrowMarginLeft', 0],\n                ['treeArrowMarginRight', 5],\n                ['treeArrowMarginTop', 6],\n                ['treeArrowWidth', 13],\n                ['treeGridHeight', 250]\n            ]\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, evil: true*/\n/*globals Reflect: false, HTMLElement: true, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n    __webpack_require__(2),\n    __webpack_require__(0),\n    __webpack_require__(3),\n    __webpack_require__(4),\n    __webpack_require__(5),\n    __webpack_require__(6),\n    __webpack_require__(7),\n    __webpack_require__(8),\n    __webpack_require__(9)\n], __WEBPACK_AMD_DEFINE_RESULT__ = function context(component) {\n    'use strict';\n    component = component();\n    var modules = Array.prototype.slice.call(arguments);\n    function Grid(args) {\n        args = args || {};\n        var self = {};\n        self.isComponent = args.component === undefined;\n        self.intf = self.isComponent ? eval('Reflect.construct(HTMLElement, [], new.target)') : {};\n        self.args = args;\n        self.createGrid = function grid(args) {\n            args.component = false;\n            return new Grid(args);\n        };\n        modules.forEach(function (module) {\n            module(self);\n        });\n        if (self.isComponent) {\n            self.args.parentNode = self.intf;\n        } else {\n            self.args.parentNode = args.parentNode;\n        }\n        if (self.args.parentNode && self.args.parentNode.createShadowRoot) {\n            self.shadowRoot = self.args.parentNode.attachShadow({mode: self.args.debug ? 'open' : 'closed'});\n            self.parentNode = self.shadowRoot;\n        } else {\n            self.parentNode = args.parentNode;\n        }\n        self.init();\n        return self.intf;\n    }\n    if (window.HTMLElement) {\n        Grid.prototype = Object.create(window.HTMLElement.prototype);\n    }\n    // export web component\n    if (window.customElements) {\n        Grid.observedAttributes = component.getObservableAttributes();\n        Grid.prototype.disconnectedCallback = component.disconnectedCallback;\n        Grid.prototype.attributeChangedCallback = component.attributeChangedCallback;\n        Grid.prototype.connectedCallback = component.connectedCallback;\n        Grid.prototype.adoptedCallback = component.adoptedCallback;\n        window.customElements.define('canvas-datagrid', Grid);\n    }\n    // export global\n    if (window && !window.canvasDatagrid && !window.require) {\n        window.canvasDatagrid = function (args) { return new Grid(args); };\n    }\n    // export amd loader\n    module.exports = function grid(args) {\n        args = args || {};\n        args.component = false;\n        return new Grid(args);\n    };\n    return module.exports;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_RESULT__ = function (defaults) {\n    'use strict';\n    return function () {\n        var typeMap, component = {};\n        function hyphenateProperty(prop, cust) {\n            var p = '';\n            Array.prototype.forEach.call(prop, function (char) {\n                if (char === char.toUpperCase()) {\n                    p += '-' + char.toLowerCase();\n                    return;\n                }\n                p += char;\n            });\n            return (cust ? '--cdg-' : '') + p;\n        }\n        function getDefaultItem(base, item) {\n            var i = {},\n                r;\n            defaults(i);\n            r = i.defaults[base].filter(function (i) {\n                return i[0].toLowerCase() === item.toLowerCase()\n                    || hyphenateProperty(i[0]) === item.toLowerCase()\n                    || hyphenateProperty(i[0], true) === item.toLowerCase();\n            })[0];\n            return r;\n        }\n        function applyComponentStyle(supressChangeAndDrawEvents, intf) {\n            var cStyle = window.getComputedStyle(intf, null),\n                defs = {};\n            intf.computedStyle = cStyle;\n            defaults(defs);\n            defs = defs.defaults.styles;\n            defs.forEach(function (def) {\n                var val = cStyle.getPropertyValue(hyphenateProperty(def[0], true));\n                if (val === \"\") {\n                    val = cStyle.getPropertyValue(hyphenateProperty(def[0], false));\n                }\n                if (val !== \"\") {\n                    intf.setStyleProperty(def[0], typeMap[typeof def[1]](val, def[1]));\n                }\n            });\n            intf.resize(true);\n            if (!supressChangeAndDrawEvents && intf.dispatchEvent) {\n                intf.dispatchEvent('stylechanged', intf.style);\n            }\n        }\n        typeMap = {\n            data: function (strData) {\n                try {\n                    return JSON.parse(strData);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid data.');\n                }\n            },\n            schema: function (strSchema) {\n                try {\n                    return JSON.parse(strSchema);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid schema attribute.');\n                }\n            },\n            number: function (strNum, def) {\n                var n = parseInt(strNum, 10);\n                return isNaN(n) ? def : n;\n            },\n            boolean: function (strBool) {\n                return (/true/i).test(strBool);\n            },\n            string: function (str) {\n                return str;\n            }\n        };\n        component.getObservableAttributes = function () {\n            var i = {}, attrs = ['data', 'schema', 'style', 'className'];\n            defaults(i);\n            i.defaults.attributes.forEach(function (attr) {\n                attrs.push(attr[0].toLowerCase());\n            });\n            return attrs;\n        };\n        component.disconnectedCallback = function () {\n            this.connected = false;\n            this.dispose();\n        };\n        component.connectedCallback = function () {\n            var intf = this;\n            intf.connected = true;\n            component.observe(intf);\n            applyComponentStyle(true, intf);\n            intf.resize();\n        };\n        component.adoptedCallback = function () {\n            this.resize();\n        };\n        component.attributeChangedCallback = function (attrName, oldVal, newVal) {\n            var tfn, intf = this, def;\n            if (attrName === 'style') {\n                requestAnimationFrame(function () { applyComponentStyle(false, intf); });\n                return;\n            }\n            if (attrName === 'data') {\n                intf.args.data = typeMap.data(newVal);\n                return;\n            }\n            if (attrName === 'schema') {\n                intf.args.schema = typeMap.schema(newVal);\n                return;\n            }\n            if (attrName === 'class' || attrName === 'className') {\n                return;\n            }\n            def = getDefaultItem('attributes', attrName);\n            if (def) {\n                tfn = typeMap[typeof def[1]];\n                intf.attributes[def[0]] = tfn(newVal);\n                return;\n            }\n            if (/^on/.test(attrName)) {\n                intf.addEventListener('on' + attrName, function (e) {\n                    eval(newVal);\n                });\n            }\n            return;\n        };\n        component.observe = function (intf) {\n            var observer;\n            if (!window.MutationObserver) { return; }\n            intf.applyComponentStyle = function () { applyComponentStyle(intf); intf.resize(); };\n            /**\n             * Applies the computed css styles to the grid.  In some browsers, changing directives in attached style sheets does not automatically update the styles in this component.  It is necessary to call this method to update in these cases.\n             * @memberof canvasDatagrid\n             * @name applyComponentStyle\n             * @method\n             */\n            observer = new window.MutationObserver(function (mutations) {\n                var checkInnerHTML, checkStyle;\n                Array.prototype.forEach.call(mutations, function (mutation) {\n                    if (mutation.attributeName === 'class'\n                            || mutation.attributeName === 'style') {\n                        intf.applyComponentStyle(intf);\n                        return;\n                    }\n                    if (mutation.target.parentNode.nodeName === 'STYLE') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.addedNodes.length > 0 || mutation.type === 'characterData') {\n                        checkInnerHTML = true;\n                    }\n                });\n                if (checkStyle) {\n                    intf.applyComponentStyle();\n                }\n                if (checkInnerHTML) {\n                    intf.data = typeMap.data(intf.innerHTML);\n                }\n            });\n            observer.observe(intf, { characterData: true, childList: true, attributes: true, subtree: true });\n            Array.prototype.forEach.call(document.querySelectorAll('style'), function (el) {\n                observer.observe(el, { characterData: true, childList: true, attributes: true, subtree: true });\n            });\n        };\n        return component;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals XMLSerializer: false, define: true, Blob: false, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var perfCounters = [],\n            drawCount = 0,\n            perfWindowSize = 300,\n            entityCount = [],\n            scrollDebugCounters = [],\n            touchPPSCounters = [];\n        self.htmlImageCache = {};\n        function drawPerfLine(w, h, x, y, perfArr, arrIndex, max, color, useAbs) {\n            var i = w / perfArr.length,\n                r = h / max;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x, y + h);\n            perfArr.forEach(function (n) {\n                var val = (arrIndex === undefined ? n : n[arrIndex]),\n                    cx,\n                    cy;\n                if (useAbs) {\n                    val = Math.abs(val);\n                }\n                cx = x + i;\n                cy = y + h - (val * r);\n                self.ctx.lineTo(cx, cy);\n                x += i;\n            });\n            self.ctx.moveTo(x + w, y + h);\n            self.ctx.strokeStyle = color;\n            self.ctx.stroke();\n        }\n        function drawOnAllImagesLoaded() {\n            var loaded = true;\n            Object.keys(self.htmlImageCache).forEach(function (html) {\n                if (!self.htmlImageCache[html].complete) {\n                    loaded = false;\n                }\n            });\n            if (loaded) {\n                self.draw();\n            }\n        }\n        function drawHtml(cell) {\n            var img,\n                v = cell.innerHTML || cell.formattedValue,\n                x = cell.x + self.canvasOffsetLeft,\n                y = cell.y + self.canvasOffsetTop;\n            if (self.htmlImageCache[v]) {\n                img = self.htmlImageCache[v];\n                if (img.height !== cell.height || img.width !== cell.width) {\n                    // height and width of the cell has changed, invalidate cache\n                    self.htmlImageCache[v] = undefined;\n                } else {\n                    if (!img.complete) {\n                        return;\n                    }\n                    return self.ctx.drawImage(img, x, y);\n                }\n            }\n            img = new Image(cell.width, cell.height);\n            self.htmlImageCache[v] = img;\n            img.onload = function () {\n                self.ctx.drawImage(img, x, y);\n                drawOnAllImagesLoaded();\n            };\n            img.src = 'data:image/svg+xml;base64,' + btoa(\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + cell.width + '\" height=\"' + cell.height + '\">\\n' +\n                    '<foreignObject class=\"node\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\\n' +\n                    '<body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;padding:0;\">\\n' +\n                    v + '\\n' +\n                    '</body>' +\n                    '</foreignObject>\\n' +\n                    '</svg>\\n'\n            );\n        }\n        function drawOrderByArrow(x, y) {\n            var mt = self.style.columnHeaderOrderByArrowMarginTop * self.scale,\n                ml = self.style.columnHeaderOrderByArrowMarginLeft * self.scale,\n                mr = self.style.columnHeaderOrderByArrowMarginRight * self.scale,\n                aw = self.style.columnHeaderOrderByArrowWidth * self.scale,\n                ah = self.style.columnHeaderOrderByArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.columnHeaderOrderByArrowColor;\n            self.ctx.strokeStyle = self.style.columnHeaderOrderByArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.orderDirection === 'asc') {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y + ah);\n                self.ctx.lineTo(x + aw, y + ah);\n                self.ctx.lineTo(x + (aw * 0.5), y);\n                self.ctx.lineTo(x, y + ah);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function drawTreeArrow(cell, x, y) {\n            var mt = self.style.treeArrowMarginTop * self.scale,\n                mr = self.style.treeArrowMarginRight * self.scale,\n                ml = self.style.treeArrowMarginLeft * self.scale,\n                aw = self.style.treeArrowWidth * self.scale,\n                ah = self.style.treeArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.treeArrowColor;\n            self.ctx.strokeStyle = self.style.treeArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.openChildren[cell.data[self.uniqueId]]) {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y);\n                self.ctx.lineTo(x + ah, y + (aw * 0.5));\n                self.ctx.lineTo(x, y + aw);\n                self.ctx.lineTo(x, y);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function radiusRect(x, y, w, h, radius) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            var r = x + w, b = y + h;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x + radius, y);\n            self.ctx.lineTo(r - radius, y);\n            self.ctx.quadraticCurveTo(r, y, r, y + radius);\n            self.ctx.lineTo(r, y + h - radius);\n            self.ctx.quadraticCurveTo(r, b, r - radius, b);\n            self.ctx.lineTo(x + radius, b);\n            self.ctx.quadraticCurveTo(x, b, x, b - radius);\n            self.ctx.lineTo(x, y + radius);\n            self.ctx.quadraticCurveTo(x, y, x + radius, y);\n        }\n        function fillRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillRect(x, y, w, h);\n        }\n        function strokeRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.strokeRect(x, y, w, h);\n        }\n        function fillText(text, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillText(text, x, y);\n        }\n        function fillCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.fill();\n        }\n        function strokeCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.stroke();\n        }\n        function clipFrozenArea(mode) {\n            // 0 both, 1 rows, 2 cols\n            // self.lastFrozenColumnPixel;\n            // self.lastFrozenRowPixel;\n            self.ctx.beginPath();\n            if (mode === 0) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, self.lastFrozenRowPixel);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 1) {\n                self.ctx.moveTo(0, self.lastFrozenRowPixel);\n                self.ctx.lineTo(0, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 2) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, 0);\n                self.ctx.lineTo(self.width, 0);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n            }\n            self.ctx.clip();\n        }\n        function fillHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return fillCircle(x, y, r * 0.5);\n            }\n            fillRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function strokeHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return strokeCircle(x, y, r * 0.5);\n            }\n            strokeRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function addselectionHandle(c, pos) {\n            var hw = self.style.selectionHandleSize,\n                p = {\n                    tr: function () {\n                        fillHandle(c.x + c.width, c.y, hw);\n                        strokeHandle(c.x + c.width, c.y, hw);\n                    },\n                    br: function () {\n                        fillHandle(c.x + c.width, c.y + c.height, hw);\n                        strokeHandle(c.x + c.width, c.y + c.height, hw);\n                    },\n                    tl: function () {\n                        fillHandle(c.x, c.y, hw);\n                        strokeHandle(c.x, c.y, hw);\n                    },\n                    bl: function () {\n                        fillHandle(c.x, c.y + c.height, hw);\n                        strokeHandle(c.x, c.y + c.height, hw);\n                    }\n                };\n            p[pos]();\n        }\n        function addBorderLine(c, pos) {\n            self.ctx.beginPath();\n            var p = {\n                t: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                },\n                r: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                b: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                l: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                }\n            };\n            p[pos]();\n            self.ctx.stroke();\n        }\n        function addEllipsis(text, width) {\n            var c, w = 0;\n            if (self.ellipsisCache[text] && self.ellipsisCache[text][width]) {\n                return self.ellipsisCache[text][width];\n            }\n            //TODO Add ellipsis back when there is a fast way to do it\n            w = self.ctx.measureText(text).width;\n            self.ellipsisCache[text] = self.ellipsisCache[text] || {};\n            c = {value: text, width: w};\n            self.ellipsisCache[text][width] = c;\n            return c;\n        }\n        function drawText(cell) {\n            var paddingLeft = self.style[cell.style + 'PaddingLeft'] * self.scale,\n                paddingTop = self.style[cell.style + 'PaddingTop'] * self.scale,\n                paddingRight = self.style[cell.style + 'PaddingRight'] * self.scale,\n                paddingBottom = self.style[cell.style + 'PaddingBottom'] * self.scale,\n                vPos = paddingTop + cell.height - (cell.height * 0.5),\n                hPos = paddingLeft + cell.treeArrowWidth + cell.orderByArrowWidth;\n            cell.text = addEllipsis(cell.formattedValue, cell.width - paddingRight - paddingLeft);\n            cell.text.height = cell.fontHeight;\n            if (cell.horizontalAlignment === 'right') {\n                hPos = cell.width - cell.text.width - paddingRight;\n            } else if (cell.horizontalAlignment === 'center') {\n                hPos = (cell.width / 2) - (cell.text.width / 2);\n            }\n            if (cell.verticalAlignment === 'top') {\n                vPos = paddingTop + cell.text.height;\n            } else if (cell.verticalAlignment === 'bottom') {\n                vPos = cell.height - paddingBottom - cell.text.height;\n            }\n            cell.text.x = cell.x + hPos;\n            cell.text.y = cell.y + vPos;\n            fillText(cell.text.value, cell.text.x, cell.text.y);\n        }\n        function getFrozenColumnsWidth() {\n            var w = 0,\n                s = self.getVisibleSchema(),\n                x = 0,\n                n = Math.min(self.frozenColumn, s.length),\n                column;\n            while (x < n) {\n                column = s[self.orders.columns[x]];\n                w += ((self.sizes.columns[column[self.uniqueId]] || column.width || self.style.cellWidth) * self.scale);\n                x += 1;\n            }\n            return w;\n        }\n        /**\n         * Redraws the grid. No matter what the change, this is the only method required to refresh everything.\n         * @memberof canvasDatagrid\n         * @name draw\n         * @method\n         */\n         // r = literal row index\n         // rd = row data array\n         // i = user order index\n         // o = literal data index\n         // y = y drawing cursor\n         // x = x drawing cursor\n         // s = visible schema array\n         // cx = current x drawing cursor sub calculation var\n         // cy = current y drawing cursor sub calculation var\n         // a = static cell (like corner cell)\n         // p = perf counter\n         // l = data length\n         // u = current cell\n         // h = current height\n         // w = current width\n        self.draw = function (internal) {\n            if (self.dispatchEvent('beforedraw', {})) { return; }\n            if (!self.isChildGrid && (!self.height || !self.width)) {\n                return;\n            }\n            if (self.isChildGrid && internal) {\n                requestAnimationFrame(self.parentGrid.draw);\n                return;\n            }\n            if (self.intf.visible === false) {\n                return;\n            }\n            // initial values\n            var checkScrollHeight, rowHeaderCell, p, cx, cy, treeGrid, rowOpen,\n                rowHeight, cornerCell, y, x, c, h, w, s, r, rd, aCell,\n                bc = self.style.borderCollapse === 'collapse',\n                selectionBorders = [],\n                moveBorders = [],\n                selectionHandles = [],\n                rowHeaders = [],\n                frozenColumnWidths = getFrozenColumnsWidth(),\n                l = self.data.length,\n                u = self.currentCell || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                cellHeight = self.style.cellHeight;\n            drawCount += 1;\n            p = performance.now();\n            self.visibleRowHeights = [];\n            // if data length has changed, there is no way to know\n            if (self.data.length > self.orders.rows.length) {\n                self.createRowOrders();\n            }\n            function drawScrollBars() {\n                var v = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-bar'\n                    },\n                    n = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-bar'\n                    },\n                    vb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-box'\n                    },\n                    nb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-box'\n                    },\n                    co = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        isCorner: true,\n                        isScrollBoxCorner: true,\n                        style: 'scroll-box-corner'\n                    },\n                    m = (self.style.scrollBarBoxMargin * 2),\n                    d = self.style.scrollBarBoxMargin * 0.5;\n                self.ctx.strokeStyle = self.style.scrollBarBorderColor;\n                self.ctx.lineWidth = self.style.scrollBarBorderWidth;\n                // vertical\n                v.x += w - self.style.scrollBarWidth - self.style.scrollBarBorderWidth - d;\n                v.y += columnHeaderCellHeight;\n                v.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                v.height = h - columnHeaderCellHeight - self.style.scrollBarWidth - d - m;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(v.x, v.y, v.width, v.height + m);\n                strokeRect(v.x, v.y, v.width, v.height + m);\n                // vertical box\n                vb.x = v.x + self.style.scrollBarBoxMargin;\n                vb.y = columnHeaderCellHeight + self.style.scrollBarBoxMargin\n                    + ((v.height - self.scrollBox.scrollBoxHeight)\n                        * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight));\n                vb.width = self.style.scrollBarBoxWidth;\n                vb.height = self.scrollBox.scrollBoxHeight;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/vertical/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (vb.height < v.height) {\n                    radiusRect(vb.x, vb.y, vb.width, vb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                // horizontal\n                n.x += rowHeaderCellWidth;\n                n.y += h - self.style.scrollBarWidth - d;\n                n.width = w - self.style.scrollBarWidth - rowHeaderCellWidth - d - m;\n                n.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(n.x, n.y, n.width + m, n.height);\n                strokeRect(n.x, n.y, n.width + m, n.height);\n                // horizontal box\n                nb.y = n.y + self.style.scrollBarBoxMargin;\n                nb.x = rowHeaderCellWidth + self.style.scrollBarBoxMargin\n                    + ((n.width - self.scrollBox.scrollBoxWidth)\n                        * (self.scrollBox.scrollLeft / self.scrollBox.scrollWidth));\n                nb.width = self.scrollBox.scrollBoxWidth;\n                nb.height = self.style.scrollBarBoxWidth;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/horizontal/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (nb.width < n.width) {\n                    radiusRect(nb.x, nb.y, nb.width, nb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                //corner\n                self.ctx.strokeStyle = self.style.scrollBarCornerBorderColor;\n                self.ctx.fillStyle = self.style.scrollBarCornerBackgroundColor;\n                co.x = n.x + n.width + m;\n                co.y = v.y + v.height + m;\n                co.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                co.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                radiusRect(co.x, co.y, co.width, co.height, 0);\n                self.ctx.stroke();\n                self.ctx.fill();\n                self.visibleCells.unshift(v);\n                self.visibleCells.unshift(vb);\n                self.visibleCells.unshift(n);\n                self.visibleCells.unshift(nb);\n                self.visibleCells.unshift(co);\n                self.scrollBox.bar = {\n                    v: v,\n                    h: n\n                };\n                self.scrollBox.box = {\n                    v: vb,\n                    h: nb\n                };\n            }\n            function createHandlesOverlayArray(cell) {\n                if (self.attributes.allowMovingSelection || self.mobile) {\n                    if (cell.selectionBorderTop && cell.selectionBorderRight && self.mobile) {\n                        selectionHandles.push([cell, 'tr']);\n                        cell.selectionHandle = 'tr';\n                    }\n                    if (cell.selectionBorderTop && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'tl']);\n                        cell.selectionHandle = 'tl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'bl']);\n                        cell.selectionHandle = 'bl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderRight\n                            && (self.attributes.selectionHandleBehavior !== 'none' || self.mobile)) {\n                        selectionHandles.push([cell, 'br']);\n                        cell.selectionHandle = 'br';\n                    }\n                }\n            }\n            function createBorderOverlayArray(cell, drawArray, propPrefix, offsetPoint) {\n                offsetPoint = offsetPoint || {x: 0, y: 0};\n                cell.selectionBorder = '';\n                if (!cell.isRowHeader\n                        && self.selections[cell.rowIndex + -offsetPoint.y]\n                        && self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) !== -1) {\n                    if ((!self.selections[cell.rowIndex - 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex - 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1\n                            || cell.rowIndex === 0)\n                            && !cell.isHeader) {\n                        drawArray.push([cell, 't']);\n                        cell[propPrefix + 'BorderTop'] = true;\n                        cell[propPrefix + 'Border'] += 't';\n                    }\n                    if (!self.selections[cell.rowIndex + 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex + 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'b']);\n                        cell[propPrefix + 'BorderBottom'] = true;\n                        cell[propPrefix + 'Border'] += 'b';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === 0\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex - 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'l']);\n                        cell[propPrefix + 'BorderLeft'] = true;\n                        cell[propPrefix + 'Border'] += 'l';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === s.length\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'r']);\n                        cell[propPrefix + 'BorderRight'] = true;\n                        cell[propPrefix + 'Border'] += 'r';\n                    }\n                }\n            }\n            function drawCell(d, rowOrderIndex, rowIndex) {\n                return function drawEach(header, headerIndex, columnOrderIndex) {\n                    var cellStyle = header.style || 'cell',\n                        cellGridAttributes,\n                        cell,\n                        isHeader = /HeaderCell/.test(cellStyle),\n                        isCorner = /cornerCell/.test(cellStyle),\n                        isRowHeader = 'rowHeaderCell' === cellStyle,\n                        isColumnHeader = 'columnHeaderCell' === cellStyle,\n                        selected = self.selections[rowOrderIndex] && self.selections[rowOrderIndex].indexOf(columnOrderIndex) !== -1,\n                        hovered = self.hovers[d[self.uniqueId]] && self.hovers[d[self.uniqueId]].indexOf(columnOrderIndex) !== -1,\n                        active = self.activeCell.rowIndex === rowOrderIndex && self.activeCell.columnIndex === columnOrderIndex,\n                        isGrid = typeof d[header.name] === 'object' && d[header.name] !== null && d[header.name] !== undefined,\n                        activeHeader = (self.orders.rows[self.activeCell.rowIndex] === rowOrderIndex\n                                || self.orders.columns[self.activeCell.columnIndex] === columnOrderIndex)\n                            && (columnOrderIndex === -1 || rowOrderIndex === -1)\n                            ? (isRowHeader ? 'activeRowHeaderCell' : 'activeColumnHeaderCell') : false,\n                        val,\n                        f = self.formatters[header.type || 'string'],\n                        orderByArrowSize = 0,\n                        treeArrowSize = 0,\n                        cellWidth = self.sizes.columns[isRowHeader ? 'cornerCell' : header[self.uniqueId]] || header.width,\n                        ev = {\n                            value: d[header.name],\n                            row: d,\n                            header: header\n                        };\n                    if (cellStyle === 'headerCellCap') {\n                        cellWidth = w - x;\n                    }\n                    // if no data or schema are defined, a width is provided to the stub column\n                    if (cellWidth === undefined) {\n                        cellWidth = self.style.cellWidth;\n                    }\n                    cellWidth = cellWidth * self.scale;\n                    if (x + cellWidth + self.style.cellBorderWidth < 0) {\n                        x += cellWidth + self.style.cellBorderWidth;\n                    }\n                    if (active) {\n                        cellStyle = 'activeCell';\n                    }\n                    if (self.visibleRows.indexOf(rowIndex) === -1 && !isHeader) {\n                        self.visibleRows.push(rowIndex);\n                    }\n                    val = self.dispatchEvent('formatcellvalue', ev);\n                    cx = x;\n                    cy = y;\n                    if (cellStyle === 'cornerCell') {\n                        cx = 0;\n                        cy = 0;\n                    } else if (isRowHeader) {\n                        cx = 0;\n                    } else if (isHeader) {\n                        cy = 0;\n                    }\n                    cell = {\n                        type: isGrid ? 'canvas-datagrid-cell' : header.type,\n                        style: cellStyle,\n                        nodeType: 'canvas-datagrid-cell',\n                        x: cx,\n                        y: cy,\n                        horizontalAlignment: self.style[cellStyle + 'HorizontalAlignment'],\n                        verticalAlignment: self.style[cellStyle + 'VerticalAlignment'],\n                        offsetTop: self.canvasOffsetTop + cy,\n                        offsetLeft: self.canvasOffsetLeft + cx,\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        active: active || activeHeader,\n                        hovered: hovered,\n                        selected: selected,\n                        width: cellWidth,\n                        height: cellHeight,\n                        offsetWidth: cellWidth,\n                        offsetHeight: cellHeight,\n                        parentNode: self.intf.parentNode,\n                        offsetParent: self.intf.parentNode,\n                        data: d,\n                        isCorner: isCorner,\n                        isHeader: isHeader,\n                        isColumnHeader: isColumnHeader,\n                        isHeaderCellCap: !!header.isHeaderCellCap,\n                        isRowHeader: isRowHeader,\n                        rowOpen: rowOpen,\n                        header: header,\n                        columnIndex: columnOrderIndex,\n                        rowIndex: rowOrderIndex,\n                        sortColumnIndex: headerIndex,\n                        sortRowIndex: rowIndex,\n                        isGrid: isGrid,\n                        isNormal: !isGrid && !isCorner && !isHeader,\n                        gridId: (self.attributes.name || '') + d[self.uniqueId] + ':' + header[self.uniqueId],\n                        parentGrid: self.intf,\n                        innerHTML: '',\n                        activeHeader: activeHeader,\n                        value: isHeader && !isRowHeader ? (header.title || header.name) : d[header.name]\n                    };\n                    ev.cell = cell;\n                    cell.userHeight = cell.isHeader ? self.sizes.rows[-1] : rowHeight;\n                    cell.userWidth = cell.isHeader ? self.sizes.columns.cornerCell : self.sizes.columns[header[self.uniqueId]];\n                    cell[self.uniqueId] = d[self.uniqueId];\n                    self.visibleCells.unshift(cell);\n                    if (self.dispatchEvent('beforerendercell', ev)) { return; }\n                    self.ctx.fillStyle = self.style[cellStyle + 'BackgroundColor'];\n                    self.ctx.strokeStyle = self.style[cellStyle + 'BorderColor'];\n                    self.ctx.lineWidth = self.style[cellStyle + 'BorderWidth'];\n                    if (hovered) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'HoverBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'HoverBorderColor'];\n                    }\n                    if (selected) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'SelectedBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'SelectedBorderColor'];\n                    }\n                    if (activeHeader) {\n                        self.ctx.fillStyle = self.style[activeHeader + 'BackgroundColor'];\n                    }\n                    self.dispatchEvent('rendercell', ev);\n                    if (cell.isGrid) {\n                        if (cell.height !== rowHeight) {\n                            cell.height = rowHeight || self.style.cellHeightWithChildGrid;\n                            checkScrollHeight = true;\n                        }\n                        cell.width = self.sizes.columns[header[self.uniqueId]] || self.style.cellWidthWithChildGrid;\n                    }\n                    if (rowOpen && !cell.isRowHeader) {\n                        cell.height = self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight;\n                    }\n                    if (!cell.isGrid) {\n                        fillRect(cx, cy, cell.width, cell.height);\n                        strokeRect(cx, cy, cell.width, cell.height);\n                    }\n                    self.ctx.save();\n                    radiusRect(cell.x, cell.y, cell.width, cell.height, 0);\n                    self.ctx.clip();\n                    self.dispatchEvent('afterrendercell', ev);\n                    if (cell.height !== cellHeight && !(rowOpen && !cell.isRowHeader)) {\n                        self.sizes.rows[isHeader ? -1 : d[self.uniqueId]] = cell.height;\n                        checkScrollHeight = true;\n                    }\n                    if (cell.width !== cellWidth) {\n                        self.sizes.columns[header[self.uniqueId]] = cell.width;\n                        checkScrollHeight = true;\n                    }\n                    if (isRowHeader && self.attributes.tree) {\n                        if (!self.dispatchEvent('rendertreearrow', ev)) {\n                            treeArrowSize = drawTreeArrow(cell, self.style[cellStyle + 'PaddingLeft'], cy, 0);\n                        }\n                    }\n                    if ((self.attributes.showRowNumbers && isRowHeader)\n                            || !isRowHeader) {\n                        if (cell.isGrid && !self.dispatchEvent('beforerendercellgrid', ev)) {\n                            if (!self.childGrids[cell.gridId]) {\n                                cellGridAttributes = self.args.cellGridAttributes || self.args;\n                                cellGridAttributes.name = self.attributes.saveAppearance ? cell.gridId : undefined;\n                                cellGridAttributes.parentNode = cell;\n                                cellGridAttributes.data = d[header.name];\n                                ev.cellGridAttributes = cellGridAttributes;\n                                if (self.dispatchEvent('beforecreatecellgrid', ev)) { return; }\n                                self.childGrids[cell.gridId] = self.createGrid(cellGridAttributes);\n                                self.sizes.rows[rd[self.uniqueId]]\n                                    = self.sizes.rows[rd[self.uniqueId]] || self.style.cellGridHeight;\n                                checkScrollHeight = true;\n                            }\n                            cell.grid = self.childGrids[cell.gridId];\n                            cell.grid.parentNode = cell;\n                            cell.grid.visible = true;\n                            cell.grid.draw();\n                            self.dispatchEvent('rendercellgrid', ev);\n                        } else if (!cell.isGrid) {\n                            if (self.childGrids[cell.gridId]) {\n                                self.childGrids[cell.gridId].parentNode.offsetHeight = 0;\n                            }\n                            if (isHeader && self.orderBy === header.name) {\n                                if (!self.dispatchEvent('renderorderbyarrow', ev)) {\n                                    orderByArrowSize = drawOrderByArrow(cx + self.style[cellStyle + 'PaddingLeft'], 0);\n                                }\n                            }\n                            self.ctx.fillStyle = self.style[cellStyle + 'Color'];\n                            if (hovered) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'HoverColor'];\n                            }\n                            if (selected) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'SelectedColor'];\n                            }\n                            if (activeHeader) {\n                                self.ctx.fillStyle = self.style[activeHeader + 'Color'];\n                            }\n                            self.ctx.font = (self.style[cellStyle + 'FontHeight'] * self.scale) + 'px ' + self.style[cellStyle + 'FontName'];\n                            cell.fontHeight = (self.style[cellStyle + 'FontHeight'] * self.scale);\n                            cell.treeArrowWidth = treeArrowSize;\n                            cell.orderByArrowWidth = orderByArrowSize;\n                            val = val !== undefined ? val : f\n                                ? f(ev) : '';\n                            if (val === undefined && !f) {\n                                val = '';\n                                console.warn('canvas-datagrid: Unknown format '\n                                    + header.type + ' add a cellFormater');\n                            }\n                            cell.formattedValue = ((val !== undefined && val !== null) ? val : '').toString();\n                            if (self.columnFilters && self.columnFilters[val] !== undefined && isHeader) {\n                                cell.formattedValue = self.attributes.filterTextPrefix + val;\n                            }\n                            if (!self.dispatchEvent('rendertext', ev)) {\n                                if (cell.innerHTML || header.type === 'html') {\n                                    drawHtml(cell);\n                                } else {\n                                    drawText(cell);\n                                }\n                            }\n                        }\n                    }\n                    if (active) {\n                        aCell = cell;\n                    }\n                    createBorderOverlayArray(cell, selectionBorders, 'selection');\n                    // createBorderOverlayArray calculates data for createHandlesOverlayArray so it must go 2nd\n                    createHandlesOverlayArray(cell);\n                    if (self.movingSelection) {\n                        createBorderOverlayArray(cell, moveBorders, 'move', self.moveOffset);\n                    }\n                    self.ctx.restore();\n                    x += cell.width + (bc ? 0 : self.style.cellBorderWidth);\n                    return cell.width;\n                };\n            }\n            function drawRowHeader(rowData, index, rowOrderIndex) {\n                var a;\n                if (self.attributes.showRowHeaders) {\n                    x = 0;\n                    rowHeaderCell = {'rowHeaderCell': index + 1 };\n                    rowHeaderCell[self.uniqueId] = rowData[self.uniqueId];\n                    a = {\n                        name: 'rowHeaderCell',\n                        width: self.style.rowHeaderCellWidth,\n                        style: 'rowHeaderCell',\n                        type: 'string',\n                        data: rowData[self.uniqueId],\n                        index: -1\n                    };\n                    a[self.uniqueId] = rowData[self.uniqueId];\n                    rowOpen = self.openChildren[rowData[self.uniqueId]];\n                    drawCell(rowHeaderCell, index, rowOrderIndex)(a, -1, -1);\n                }\n            }\n            function drawHeaders() {\n                var d, g = s.length, i, o, columnHeaderCell, header, nonFrozenHeaderWidth;\n                function drawHeaderColumnRange(start, end) {\n                    end = Math.min(end, g);\n                    for (o = start; o < end; o += 1) {\n                        i = self.orders.columns[o];\n                        header = s[i];\n                        d = {\n                            title: header.title,\n                            name: header.name,\n                            width: header.width,\n                            style: 'columnHeaderCell',\n                            type: 'string',\n                            index: o,\n                            order: i\n                        };\n                        columnHeaderCell = {'columnHeaderCell': header.title || header.name};\n                        columnHeaderCell[self.uniqueId] = 'h' + header[self.uniqueId];\n                        d[self.uniqueId] = header[self.uniqueId];\n                        x += drawCell(columnHeaderCell, -1, -1)(d, o, i);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                }\n                rowHeaders.forEach(function (rArgs, rhIndex) {\n                    y = rArgs[3];\n                    cellHeight = rArgs[4];\n                    if (rhIndex === self.frozenRow) {\n                        self.ctx.save();\n                        radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                        self.ctx.clip();\n                    }\n                    drawRowHeader(rArgs[0], rArgs[1], rArgs[2]);\n                });\n                self.ctx.restore();\n                if (self.attributes.showColumnHeaders) {\n                    x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    x += frozenColumnWidths;\n                    y = 0;\n                    // cell height might have changed during drawing\n                    cellHeight = self.getColumnHeaderCellHeight();\n                    drawHeaderColumnRange(self.scrollIndexLeft + self.frozenColumn, g);\n                    nonFrozenHeaderWidth = x;\n                    x = self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    drawHeaderColumnRange(0, self.frozenColumn);\n                    // fill in the space right of the headers\n                    x = nonFrozenHeaderWidth;\n                    if (x < w) {\n                        c = {\n                            name: '',\n                            width: self.style.scrollBarWidth,\n                            style: 'headerCellCap',\n                            isHeaderCell: true,\n                            isHeaderCellCap: true,\n                            type: 'string',\n                            index: s.length\n                        };\n                        c[self.uniqueId] = 'columnHeaderCell';\n                        drawCell({endCap: ''}, -1, -1)(c, -1, -1);\n                    }\n                    // fill in the space right of the headers\n                    if (self.attributes.showRowHeaders) {\n                        cornerCell = {'cornerCell': '' };\n                        cornerCell[self.uniqueId] = 'cornerCell';\n                        x = 0;\n                        c = {\n                            name: 'cornerCell',\n                            width: self.style.rowHeaderCellWidth,\n                            style: 'cornerCell',\n                            type: 'string',\n                            index: -1\n                        };\n                        c[self.uniqueId] = 'cornerCell';\n                        drawCell(cornerCell, -1, -1)(c, -1, -1);\n                    }\n                }\n            }\n            function drawRow(r, d) {\n                var i, treeHeight, rowSansTreeHeight, o, g = s.length;\n                if (y - (cellHeight * 2) > h) {\n                    return false;\n                }\n                rd = self.data[r];\n                rowOpen = self.openChildren[rd[self.uniqueId]];\n                rowSansTreeHeight = (self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight) * self.scale;\n                treeHeight = (rowOpen ? self.sizes.trees[rd[self.uniqueId]] : 0) * self.scale;\n                rowHeight = (rowSansTreeHeight + treeHeight);\n                if (y < -rowHeight) {\n                    return false;\n                }\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                cellHeight = rowHeight;\n                if (self.attributes.allowFreezingColumns) {\n                    x += frozenColumnWidths;\n                }\n                //draw normal columns\n                for (o = (self.scrollIndexLeft + self.frozenColumn); o < g; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        self.scrollIndexRight = o;\n                        self.scrollPixelRight = x;\n                        break;\n                    }\n                }\n                //draw frozen columns\n                x = 0;\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                for (o = 0; o < self.frozenColumn; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        break;\n                    }\n                }\n                self.lastFrozenColumnPixel = x;\n                // cell height might have changed during drawing\n                cellHeight = rowHeight;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                // don't draw a tree for the new row\n                treeGrid = self.childGrids[rd[self.uniqueId]];\n                if (r !== self.data.length && rowOpen) {\n                    treeGrid.visible = true;\n                    treeGrid.parentNode = {\n                        offsetTop: y + rowSansTreeHeight + self.canvasOffsetTop,\n                        offsetLeft: rowHeaderCellWidth - 1 + self.canvasOffsetLeft,\n                        offsetHeight: treeHeight,\n                        offsetWidth: self.width - rowHeaderCellWidth - self.style.scrollBarWidth - 1,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: self.style,\n                        nodeType: 'canvas-datagrid-tree',\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        rowIndex: r\n                    };\n                    self.visibleCells.unshift({\n                        rowIndex: r,\n                        columnIndex: 0,\n                        y: treeGrid.parentNode.offsetTop,\n                        x: treeGrid.parentNode.offsetLeft,\n                        height: treeGrid.height,\n                        width: treeGrid.width,\n                        style: 'tree-grid',\n                        type: treeGrid.parentNode.nodeType\n                    });\n                    treeGrid.draw();\n                } else if (treeGrid) {\n                    treeGrid.parentNode.offsetHeight = 0;\n                    delete self.sizes.trees[rd[self.uniqueId]];\n                }\n                rowHeaders.push([rd, r, d, y, rowHeight]);\n                self.visibleRowHeights[r] = rowHeight;\n                y += cellHeight + (bc ? 0 : self.style.cellBorderWidth);\n                return true;\n            }\n            function initDraw() {\n                self.visibleRows = [];\n                s = self.getVisibleSchema();\n                self.visibleCells = [];\n                self.canvasOffsetTop = self.isChildGrid ? self.parentNode.offsetTop : 0;\n                self.canvasOffsetLeft = self.isChildGrid ? self.parentNode.offsetLeft : 0;\n                h = self.height;\n                w = self.width;\n                if (!self.isChildGrid) {\n                    self.ctx.scale(window.devicePixelRatio, window.devicePixelRatio);\n                }\n            }\n            function drawBackground() {\n                radiusRect(0, 0, w, h, 0);\n                self.ctx.clip();\n                self.ctx.fillStyle = self.style.gridBackgroundColor;\n                fillRect(0, 0, w, h);\n            }\n            function drawFrozenRows() {\n                var n, ln = Math.min(self.data.length, self.frozenRow);\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                y = columnHeaderCellHeight;\n                for (r = 0; r < ln; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.allowFreezingRows) {\n                    // HACK great, another stupid magic number.\n                    // Background will appear as a 0.5px artifact behind the row freeze bar without this hack\n                    y += self.style.frozenMarkerBorderWidth + self.style.frozenMarkerWidth - 0.4999999999;\n                }\n                self.lastFrozenRowPixel = y;\n            }\n            function drawRows() {\n                self.ctx.save();\n                if (self.frozenRow > 0) {\n                    radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                    self.ctx.clip();\n                }\n                var o, n, i, g = s.length;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                if (!self.attributes.snapToRow) {\n                    y += -self.scrollBox.scrollTop + self.scrollPixelTop;\n                }\n                for (r = self.frozenRow + self.scrollIndexTop; r < l; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        self.scrollIndexBottom = r;\n                        self.scrollPixelBottom = y;\n                        break;\n                    }\n                }\n                if (self.attributes.showNewRow) {\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    rowHeight = cellHeight = self.style.cellHeight;\n                    rowOpen = false;\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        x += drawCell(self.newRow, self.data.length, self.data.length)(s[i], i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    rowHeaders.push([self.newRow, self.data.length, self.data.length, y, rowHeight]);\n                }\n                self.ctx.restore();\n            }\n            function drawMoveMarkers() {\n                if (!self.movingSelection) { return; }\n                self.ctx.lineWidth = self.style.moveOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.moveOverlayBorderColor;\n                self.ctx.setLineDash(self.style.moveOverlayBorderSegments);\n                moveBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n                self.ctx.setLineDash([]);\n            }\n            function drawReorderMarkers() {\n                if (!self.reorderObject) { return; }\n                var b = {\n                        height: self.reorderObject.height,\n                        width: self.reorderObject.width,\n                        x: self.reorderObject.x + self.reorderObject.dragOffset.x,\n                        y: self.reorderObject.y + self.reorderObject.dragOffset.y\n                    },\n                    m = {\n                        width: w,\n                        height: h,\n                        x: 0,\n                        y: 0\n                    };\n                self.ctx.fillStyle = self.style.reorderMarkerBackgroundColor;\n                self.ctx.lineWidth = self.style.reorderMarkerBorderWidth;\n                self.ctx.strokeStyle = self.style.reorderMarkerBorderColor;\n                if (self.dragMode === 'row-reorder') {\n                    b.width = w;\n                    b.x = 0;\n                    m.width = w;\n                    m.height = self.currentCell.height;\n                    m.y = self.currentCell.y;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.rowIndex !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex > -1\n                            && self.currentCell.rowIndex < l) {\n                        addBorderLine(m, self.reorderTarget.sortRowIndex > self.reorderObject.sortRowIndex ? 'b' : 't');\n                    }\n                } else if (self.dragMode === 'column-reorder' && self.reorderObject) {\n                    b.height = h;\n                    b.y = 0;\n                    m.height = h;\n                    m.width = self.currentCell.width;\n                    m.y = 0;\n                    m.x = self.currentCell.x;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.columnIndex !== self.reorderObject.columnIndex\n                            && self.currentCell.columnIndex > -1\n                            && self.currentCell.columnIndex < s.length) {\n                        addBorderLine(m, self.reorderTarget.sortColumnIndex > self.reorderObject.sortColumnIndex ? 'r' : 'l');\n                    }\n                }\n            }\n            function drawBorder() {\n                self.ctx.lineWidth = self.style.gridBorderWidth;\n                self.ctx.strokeStyle = self.style.gridBorderColor;\n                strokeRect(0, 0, self.width, self.height);\n            }\n            function drawSelectionBorders() {\n                self.ctx.lineWidth = self.style.selectionOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.selectionOverlayBorderColor;\n                function dsb(c) {\n                    addBorderLine(c[0], c[1]);\n                }\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.save();\n                clipFrozenArea(0);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(1);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(2);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n            }\n            function drawSelectionHandles() {\n                if (self.mobile || self.attributes.allowMovingSelection) {\n                    self.ctx.lineWidth = self.style.selectionHandleBorderWidth;\n                    self.ctx.strokeStyle = self.style.selectionHandleBorderColor;\n                    self.ctx.fillStyle = self.style.selectionHandleColor;\n                    selectionHandles.forEach(function (c) {\n                        addselectionHandle(c[0], c[1]);\n                        var az = self.attributes.touchSelectHandleZone / 2,\n                            ax = c[0].x + (c[1] === 'tl' || c[1] === 'bl' ? 0 : c[0].width) - az,\n                            ay = c[0].y + (c[1] === 'bl' || c[1] === 'br' ? c[0].height : 0) - az;\n                        self.visibleCells.unshift({\n                            x: ax,\n                            y: ay,\n                            height: self.style.selectionHandleSize + az,\n                            width: self.style.selectionHandleSize + az,\n                            style: 'selection-handle-' + c[1]\n                        });\n                    });\n                }\n            }\n            function drawActiveCell() {\n                if (!aCell) { return; }\n                self.ctx.save();\n                var cl = self.activeCell.columnIndex + 1 > self.frozenColumn || self.activeCell.rowIndex + 1 > self.frozenRow,\n                    acx = cl ? self.lastFrozenColumnPixel : 0,\n                    acy = cl ? self.lastFrozenRowPixel : 0,\n                    acw = cl ? self.width - self.lastFrozenColumnPixel : self.width,\n                    ach = cl ? self.height - self.lastFrozenRowPixel : self.height;\n                radiusRect(acx, acy, acw, ach, 0);\n                self.ctx.clip();\n                if (self.attributes.selectionMode === 'row') {\n                    if (self.activeCell && self.activeCell.rowIndex === aCell.rowIndex) {\n                        self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                        self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                        strokeRect(0, aCell.y, self.getHeaderWidth() + rowHeaderCellWidth, self.visibleRowHeights[aCell.rowIndex]);\n                    }\n                } else {\n                    self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                    self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                    strokeRect(aCell.x, aCell.y, aCell.width, aCell.height);\n                }\n                self.ctx.restore();\n            }\n            function drawFrozenMarkers() {\n                var my = self.lastFrozenRowPixel - self.style.frozenMarkerWidth,\n                    mx = self.lastFrozenColumnPixel - self.style.frozenMarkerBorderWidth,\n                    xHover = self.currentCell && self.currentCell.style === 'frozen-row-marker',\n                    yHover = self.currentCell && self.currentCell.style === 'frozen-column-marker';\n                self.ctx.lineWidth = self.style.frozenMarkerBorderWidth;\n                if (self.attributes.allowFreezingColumns) {\n                    self.ctx.fillStyle = yHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = yHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    strokeRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    self.visibleCells.unshift({\n                        x: mx,\n                        y: 0,\n                        height: self.height,\n                        width: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        style: 'frozen-column-marker'\n                    });\n                }\n                if (self.attributes.allowFreezingRows) {\n                    self.ctx.fillStyle = xHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = xHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    strokeRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    self.visibleCells.unshift({\n                        x: 0,\n                        y: my,\n                        height: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        width: self.width,\n                        style: 'frozen-row-marker'\n                    });\n                }\n                if (self.freezeMarkerPosition) {\n                    self.ctx.fillStyle = self.style.frozenMarkerActiveColor;\n                    self.ctx.strokeStyle = self.style.frozenMarkerActiveBorderColor;\n                    if (self.dragMode === 'frozen-column-marker') {\n                        fillRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                        strokeRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                    } else {\n                        fillRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                        strokeRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                    }\n                }\n            }\n            function drawPerfLines() {\n                if (!self.attributes.showPerformance) { return; }\n                var pw = 250,\n                    px = self.width - pw - self.style.scrollBarWidth - (self.style.scrollBarBorderWidth * 2),\n                    py = columnHeaderCellHeight,\n                    ph = 100;\n                if (scrollDebugCounters.length === 0) { scrollDebugCounters = self.fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (touchPPSCounters.length === 0) { touchPPSCounters = self.fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (entityCount.length === 0) { entityCount = self.fillArray(0, perfWindowSize, 1, 0); }\n                self.ctx.lineWidth = 0.5;\n                function dpl(name, perfArr, arrIndex, max, color, useAbs, rowIndex) {\n                    var v;\n                    drawPerfLine(pw, ph, px, py, perfArr, arrIndex, max, color, useAbs);\n                    self.ctx.fillStyle = color;\n                    fillRect(3 + px, py + 9 + (rowIndex * 11), 8, 8);\n                    self.ctx.fillStyle = '#999999';\n                    v = arrIndex !== undefined ? perfArr[0][arrIndex] : perfArr[0];\n                    fillText(name + ' ' + (isNaN(v) ? 0 : v).toFixed(3), 14 + px, py + 16 + (rowIndex * 11));\n                }\n                self.ctx.textAlign = 'left';\n                self.ctx.font = '8px sans-serif';\n                self.ctx.fillStyle = 'rgba(29, 25, 26, 1.00)';\n                fillRect(px, py, pw, ph);\n                [['Scroll Height', scrollDebugCounters, 0, self.scrollBox.scrollHeight, 'rgba(248, 33, 103, 1.00)', false],\n                    ['Scroll Width', scrollDebugCounters, 1, self.scrollBox.scrollWidth, 'rgba(66, 255, 27, 1.00)', false],\n                    ['Performance', perfCounters, undefined, 200, 'rgba(252, 255, 37, 1.00)', false],\n                    ['Entities', entityCount, undefined, 1500, 'rgba(76, 231, 239, 1.00)', false],\n                    ['TouchPPSX', touchPPSCounters, 0, 1000, 'rgba(246, 102, 24, 1.00)', true],\n                    ['TouchPPSY', touchPPSCounters, 1, 1000, 'purple', true]\n                    ].forEach(function (i, index) {\n                    i.push(index);\n                    dpl.apply(null, i);\n                });\n                self.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n                entityCount.pop();\n                entityCount.unshift(self.visibleCells.length);\n                scrollDebugCounters.pop();\n                scrollDebugCounters.unshift([self.scrollBox.scrollTop, self.scrollBox.scrollLeft]);\n                touchPPSCounters.pop();\n                touchPPSCounters.unshift([self.yPPS, self.xPPS]);\n            }\n            function drawDebug() {\n                self.ctx.save();\n                var d;\n                if (self.attributes.showPerformance || self.attributes.debug) {\n                    if (perfCounters.length === 0) { perfCounters = self.fillArray(0, perfWindowSize, 1, 0); }\n                    perfCounters.pop();\n                    perfCounters.unshift(performance.now() - p);\n                }\n                if (!self.attributes.debug) {\n                    self.ctx.restore();\n                    return;\n                }\n                self.ctx.font = '14px sans-serif';\n                d = {};\n                d.perf = (perfCounters.reduce(function (a, b) {\n                    return a + b;\n                }, 0) / Math.min(drawCount, perfCounters.length)).toFixed(1);\n                d.htmlImages = Object.keys(self.htmlImageCache).length;\n                d.reorderObject = 'x: ' + (self.reorderObject || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderObject || {rowIndex: 0}).rowIndex;\n                d.reorderTarget = 'x: ' + (self.reorderTarget || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderTarget || {rowIndex: 0}).rowIndex;\n                d.scale = self.scale;\n                d.startScale = self.startScale;\n                d.scaleDelta = self.scaleDelta;\n                d.zoomDeltaStart = self.zoomDeltaStart;\n                d.touchLength = self.touchLength;\n                d.touches = 'y0: ' + (self.touchPosition || {y: 0}).y + ' y1: ' + (self.touchPosition1 || {y: 0}).y;\n                d.scrollBox = self.scrollBox.toString();\n                d.scrollIndex = 'x: ' + self.scrollIndexLeft + ', y: ' + self.scrollIndexTop;\n                d.scrollPixel = 'x: ' + self.scrollPixelLeft + ', y: ' + self.scrollPixelTop;\n                d.canvasOffset = 'x: ' + self.canvasOffsetLeft + ', y: ' + self.canvasOffsetTop;\n                d.touchDelta = 'x: ' + self.touchDelta.x + ', y: ' + self.touchDelta.y;\n                d.touchAnimateTo = 'x: ' + self.touchAnimateTo.x + ', y: ' + self.touchAnimateTo.y;\n                d.scrollAnimation = 'x: ' + self.scrollAnimation.x + ', y: ' + self.scrollAnimation.y;\n                d.touchPPS = 'x: ' + self.xPPS + ', y: ' + self.yPPS;\n                d.touchPPST = 'x: ' + self.xPPST + ', y: ' + self.yPPST;\n                d.touchDuration = self.touchDuration;\n                d.pointerLockPosition =  self.pointerLockPosition ?\n                        self.pointerLockPosition.x + ', ' + self.pointerLockPosition.y : '';\n                d.size = 'w: ' + self.width + ', h: ' + self.height;\n                d.mouse = 'x: ' + self.mouse.x + ', y: ' + self.mouse.y;\n                d.touch = !self.touchStart\n                    ? '' : 'x: ' + self.touchStart.x + ', y: ' + self.touchStart.y;\n                d.entities = self.visibleCells.length;\n                d.hasFocus = self.hasFocus;\n                d.dragMode = self.dragMode;\n                if (self.currentCell) {\n                    d.columnIndex = self.currentCell.columnIndex;\n                    d.rowIndex = self.currentCell.rowIndex;\n                    d.sortColumnIndex = self.currentCell.sortColumnIndex;\n                    d.sortRowIndex = self.currentCell.sortRowIndex;\n                    d.context = self.currentCell.context;\n                    d.dragContext = self.currentCell.dragContext;\n                    d.style = self.currentCell.style;\n                    d.type = self.currentCell.type;\n                }\n                self.ctx.textAlign = 'right';\n                self.ctx.fillStyle = 'rgba(0, 0, 0, .60)';\n                fillRect(0, 0, self.width, self.height);\n                Object.keys(d).forEach(function (key, index) {\n                    var m = key + ': ' + d[key],\n                        lh = 14;\n                    self.ctx.fillStyle = 'rgba(37, 254, 21, 1)';\n                    fillText(m, w - 20, 140 + (index * lh));\n                });\n                self.ctx.restore();\n            }\n            self.ctx.save();\n            initDraw();\n            drawBackground();\n            drawFrozenRows();\n            drawRows();\n            drawActiveCell();\n            drawHeaders();\n            drawFrozenMarkers();\n            drawSelectionBorders();\n            drawSelectionHandles();\n            drawReorderMarkers();\n            drawMoveMarkers();\n            drawScrollBars();\n            if (checkScrollHeight) {\n                self.resize(true);\n            }\n            drawBorder();\n            drawDebug();\n            drawPerfLines();\n            if (self.dispatchEvent('afterdraw', {})) { return; }\n            self.ctx.restore();\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var wheeling;\n        self.stopPropagation = function (e) { e.stopPropagation(); };\n        /**\n         * Adds an event listener to the given event.\n         * @memberof canvasDatagrid\n         * @name addEventListener\n         * @method\n         * @param {string} ev The name of the event to subscribe to.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.addEventListener = function (ev, fn) {\n            self.events[ev] = self.events[ev] || [];\n            self.events[ev].unshift(fn);\n        };\n        /**\n         * Removes the given listener function from the given event.  Must be an actual reference to the function that was bound.\n         * @memberof canvasDatagrid\n         * @name removeEventListener\n         * @method\n         * @param {string} ev The name of the event to unsubscribe from.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.removeEventListener = function (ev, fn) {\n            (self.events[ev] || []).forEach(function removeEachListener(sfn, idx) {\n                if (fn === sfn) {\n                    self.events[ev].splice(idx, 1);\n                }\n            });\n        };\n        /**\n         * Fires the given event, padding an event object to the event subscribers.\n         * @memberof canvasDatagrid\n         * @name dispatchEvent\n         * @method\n         * @param {number} ev The name of the event to dispatch.\n         * @param {number} e The event object.\n         */\n        self.dispatchEvent = function (ev, e) {\n            var defaultPrevented;\n            function preventDefault() {\n                defaultPrevented = true;\n            }\n            if (!self.events[ev]) { return; }\n            self.events[ev].forEach(function dispatchEachEvent(fn) {\n                e.ctx = self.ctx;\n                e.preventDefault = preventDefault;\n                fn.apply(self.intf, [e]);\n            });\n            return defaultPrevented;\n        };\n        self.resize = function (drawAfterResize) {\n            if (!self.canvas) { return; }\n            var bm = self.style.borderCollapse === 'collapse' ? 1 : 2,\n                cellBorder = self.style.cellBorderWidth * bm,\n                columnHeaderCellBorder = self.style.columnHeaderCellBorderWidth * bm,\n                scrollHeight,\n                scrollWidth,\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                ch = self.style.cellHeight,\n                // TODO: What the hell are these numbers!?  They are probably some value in the style.\n                scrollDragPositionOffsetY = 30,\n                scrollDragPositionOffsetX = 15;\n            scrollHeight = self.data.reduce(function reduceData(accumulator, row, rowIndex) {\n                return accumulator\n                    + (((self.sizes.rows[row[self.uniqueId]] || ch) + (self.sizes.trees[row[self.uniqueId]] || 0)) * self.scale)\n                    + cellBorder\n                    // HACK? if an expanded tree row is frozen it is necessary to add the tree row's height a second time.\n                    + (self.frozenRow > rowIndex ? (self.sizes.trees[row[self.uniqueId]] || 0) : 0);\n            }, 0) || 0;\n            scrollWidth = self.getVisibleSchema().reduce(function reduceSchema(accumulator, column) {\n                if (column.hidden) { return accumulator; }\n                return accumulator + ((self.sizes.columns[column[self.uniqueId]] || column.width || self.style.cellWidth) * self.scale) + cellBorder;\n            }, 0) || 0;\n            if (self.isChildGrid) {\n                self.width = self.parentNode.offsetWidth;\n                self.height = self.parentNode.offsetHeight;\n            } else {\n                self.height = self.canvas.offsetHeight;\n                self.width = self.canvas.offsetWidth;\n                self.canvas.width = self.width * window.devicePixelRatio;\n                self.canvas.height = self.height * window.devicePixelRatio;\n                self.canvasOffsetLeft = self.args.canvasOffsetLeft || 0;\n                self.canvasOffsetTop = self.args.canvasOffsetTop || 0;\n            }\n            if (self.attributes.showNewRow) {\n                scrollHeight += ch + cellBorder;\n            }\n            self.scrollBox.width = self.width - rowHeaderCellWidth;\n            self.scrollBox.height = self.height - columnHeaderCellHeight - columnHeaderCellBorder;\n            self.scrollBox.top = columnHeaderCellHeight + columnHeaderCellBorder;\n            self.scrollBox.left = rowHeaderCellWidth;\n            self.scrollBox.scrollHeight = scrollHeight + self.style.scrollBarWidth - self.scrollBox.height;\n            self.scrollBox.scrollWidth = scrollWidth + self.style.scrollBarWidth - self.scrollBox.width;\n            self.scrollBox.widthBoxRatio = ((self.scrollBox.width - scrollDragPositionOffsetX)\n                / (self.scrollBox.scrollWidth + self.scrollBox.width - scrollDragPositionOffsetX));\n            self.scrollBox.scrollBoxWidth = self.scrollBox.width\n                * self.scrollBox.widthBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.heightBoxRatio = ((self.scrollBox.height - scrollDragPositionOffsetY)\n                / (self.scrollBox.scrollHeight + (self.scrollBox.height - scrollDragPositionOffsetY)));\n            self.scrollBox.scrollBoxHeight = self.scrollBox.height\n                * self.scrollBox.heightBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.scrollBoxWidth = Math.max(self.scrollBox.scrollBoxWidth, self.style.scrollBarBoxMinSize);\n            self.scrollBox.scrollBoxHeight = Math.max(self.scrollBox.scrollBoxHeight, self.style.scrollBarBoxMinSize);\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            self.resizeEditInput();\n            self.scroll(true);\n            if (drawAfterResize) {\n                self.draw(true);\n            }\n            self.dispatchEvent('resize', {});\n            return true;\n        };\n        self.scroll = function (dontDraw) {\n            var bm = self.style.borderCollapse === 'collapse' ? 1 : 2,\n                s = self.getVisibleSchema(),\n                cellBorder = self.style.cellBorderWidth * bm,\n                ch = self.style.cellHeight;\n            self.scrollIndexTop = 0;\n            self.scrollPixelTop = 0;\n            self.scrollIndexLeft = 0;\n            self.scrollPixelLeft = 0;\n            while (self.scrollPixelTop < self.scrollBox.scrollTop && self.scrollIndexTop < self.data.length) {\n                self.scrollPixelTop +=\n                    (((self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || ch)\n                        + (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0)) * self.scale)\n                    + cellBorder;\n                self.scrollIndexTop += 1;\n            }\n            while (self.scrollPixelLeft < self.scrollBox.scrollLeft && self.scrollIndexLeft < s.length) {\n                self.scrollPixelLeft +=\n                    ((self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width) * self.scale)\n                    + cellBorder;\n                self.scrollIndexLeft += 1;\n            }\n            if (self.data.length > 0) {\n                self.scrollIndexLeft = Math.max(self.scrollIndexLeft - 1, 0);\n                self.scrollPixelLeft = Math.max(self.scrollPixelLeft\n                    - ((self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width) * self.scale), 0);\n                self.scrollIndexTop = Math.max(self.scrollIndexTop - 1, 0);\n                self.scrollPixelTop = Math.max((self.scrollPixelTop\n                    - ((self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || ch)\n                    + (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0)) * self.scale), 0);\n            }\n            self.ellipsisCache = {};\n            if (!dontDraw) {\n                self.draw(true);\n            }\n            //TODO: figure out why this has to be delayed for child grids\n            //BUG: wheeling event on 3rd level hierarchy fails to move input box\n            requestAnimationFrame(self.resizeEditInput);\n            self.dispatchEvent('scroll', {top: self.scrollBox.scrollTop, left: self.scrollBox.scrollLeft});\n        };\n        self.mousemove = function (e, overridePos) {\n            if (self.contextMenu || self.input) {\n                return;\n            }\n            self.mouse = overridePos || self.getLayerPos(e);\n            var ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                i,\n                vs = self.getVisibleSchema(),\n                dragBounds,\n                sBounds,\n                x = self.mouse.x,\n                y = self.mouse.y,\n                o = self.getCellAt(x, y),\n                delta,\n                ev = {NativeEvent: e, cell: o, x: x, y: y},\n                previousCell = self.currentCell;\n            clearTimeout(self.scrollTimer);\n            if (!self.isInGrid({x: x, y: y})) {\n                self.hasFocus = false;\n            }\n            if (self.dispatchEvent('mousemove', ev)) {\n                return;\n            }\n            if (o && self.currentCell && (self.currentCell.rowIndex !== o.rowIndex\n                    || self.currentCell.columnIndex !== o.columnIndex)) {\n                self.cellBoundaryCrossed = true;\n                ev.cell = previousCell;\n                self.dispatchEvent('cellmouseout', ev);\n                ev.cell = o;\n                self.dispatchEvent('cellmouseover', ev);\n            }\n            self.currentCell = o;\n            if (!self.hasFocus) {\n                return;\n            }\n            self.hovers = {};\n            if (!self.draggingItem\n                    && o\n                    && self.scrollModes.indexOf(o.context) === -1) {\n                self.dragItem = o;\n                self.dragMode = o.dragContext;\n                self.canvas.style.cursor = o.context;\n                if (o.context === 'cell' && o.data) {\n                    self.canvas.style.cursor = 'default';\n                    self.hovers[o.data[self.uniqueId]] = [o.columnIndex];\n                }\n                if ((self.selecting || self.reorderObject)\n                        && o.context === 'cell'\n                        && o.data) {\n                    sBounds = self.getSelectionBounds();\n                    delta = {\n                        x: Math.abs(self.dragStart.x - x),\n                        y: Math.abs(self.dragStart.y - y)\n                    };\n                    if (self.dragStartObject.columnIndex !== -1 && e.shiftKey) {\n                        self.dragStartObject = {\n                            rowIndex: self.activeCell.rowIndex,\n                            columnIndex: self.activeCell.columnIndex\n                        };\n                    }\n                    dragBounds = {\n                        top: Math.min(self.dragStartObject.rowIndex, o.rowIndex),\n                        left: Math.min(self.dragStartObject.columnIndex, o.columnIndex),\n                        bottom: Math.max(self.dragStartObject.rowIndex, o.rowIndex),\n                        right: Math.max(self.dragStartObject.columnIndex, o.columnIndex)\n                    };\n                    if (self.dragStartObject.columnIndex === -1) {\n                        dragBounds.left = -1;\n                        dragBounds.right = vs.length - 1;\n                        dragBounds.top = Math.min(sBounds.top, o.rowIndex);\n                        dragBounds.bottom = Math.max(sBounds.bottom, o.rowIndex);\n                    }\n                    if (self.dragStartObject.rowIndex !== o.rowIndex\n                                || self.dragStartObject.columnIndex !== o.columnIndex) {\n                        self.ignoreNextClick = true;\n                    }\n                    if (self.cellBoundaryCrossed || (delta.x === 0 && delta.y === 0) || (self.attributes.selectionMode === 'row')) {\n                        if ((self.attributes.selectionMode === 'row') || self.dragStartObject.columnIndex === -1) {\n                            self.selectRow(o.rowIndex, ctrl, null, true);\n                        } else {\n                            if (!self.dragAddToSelection && o.rowIndex !== undefined) {\n                                if (self.selections[o.rowIndex] && self.selections[o.rowIndex].indexOf(o.columnIndex) !== -1) {\n                                    self.selections[o.rowIndex].splice(self.selections[o.rowIndex].indexOf(o.columnIndex), 1);\n                                }\n                            } else {\n                                self.selections[o.rowIndex] = self.selections[o.rowIndex] || [];\n                                if (self.selections[o.rowIndex].indexOf(o.columnIndex) === -1) {\n                                    self.selections[o.rowIndex].push(o.columnIndex);\n                                }\n                            }\n                        }\n                    }\n                    if ((!self.selectionBounds || (dragBounds.top !== self.selectionBounds.top\n                            || dragBounds.left !== self.selectionBounds.left\n                            || dragBounds.bottom !== self.selectionBounds.bottom\n                            || dragBounds.right !== self.selectionBounds.right)) && !ctrl) {\n                        self.selections = [];\n                        sBounds = dragBounds;\n                        if (self.attributes.selectionMode === 'row') {\n                            for (i = sBounds.top; i <= sBounds.bottom; i += 1) {\n                                self.selectRow(i, true, null, true);\n                            }\n                        } else {\n                            self.selectArea(sBounds, true);\n                        }\n                    }\n                    self.autoScrollZone(e, x, y, ctrl);\n                }\n            }\n            self.cellBoundaryCrossed = false;\n            self.draw(true);\n        };\n        self.click = function (e, overridePos) {\n            var i,\n                ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                pos = overridePos || self.getLayerPos(e);\n            self.currentCell = self.getCellAt(pos.x, pos.y);\n            if (self.currentCell.grid !== undefined) {\n                return;\n            }\n            function checkSelectionChange() {\n                self.dispatchEvent('selectionchanged', {\n                    selectedData: self.getSelectedData(),\n                    selections: self.selections,\n                    selectionBounds: self.selectionBounds\n                });\n            }\n            if (self.input) {\n                self.endEdit();\n            }\n            if (self.ignoreNextClick) {\n                self.ignoreNextClick = false;\n                return;\n            }\n            i = self.currentCell;\n            if (self.dispatchEvent('click', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (['rowHeaderCell', 'columnHeaderCell'].indexOf(self.currentCell.style) === -1 && !ctrl) {\n                self.setActiveCell(i.columnIndex, i.rowIndex);\n            }\n            if (self.currentCell.context === 'cell') {\n                if (self.currentCell.style === 'cornerCell') {\n                    self.selectAll();\n                    self.draw();\n                    checkSelectionChange();\n                    return;\n                }\n                if (self.currentCell.style === 'columnHeaderCell') {\n                    if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                        if (self.orderBy === i.header.name) {\n                            self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                        } else {\n                            self.orderDirection = 'asc';\n                        }\n                        self.order(i.header.name, self.orderDirection);\n                        checkSelectionChange();\n                        return;\n                    }\n                    if (self.attributes.columnHeaderClickBehavior === 'select') {\n                        self.selectColumn(i.header.index, ctrl, e.shiftKey, true);\n                        checkSelectionChange();\n                        self.draw();\n                        return;\n                    }\n                }\n                self.selections[i.rowIndex] = self.selections[i.rowIndex] || [];\n                if (((self.attributes.selectionMode === 'row') || self.currentCell.style === 'rowHeaderCell')) {\n                    if (self.currentCell.style === 'rowHeaderCell'\n                            && self.attributes.tree && pos.x > 0\n                            && pos.x - self.currentCell.x < self.style.treeArrowWidth\n                            + self.style.treeArrowMarginLeft\n                            + self.style.treeArrowMarginRight + self.style.treeArrowClickRadius\n                            && pos.y - self.currentCell.y < self.style.treeArrowHeight\n                            + self.style.treeArrowMarginTop + self.style.treeArrowClickRadius\n                            && pos.y > 0) {\n                        self.toggleTree(i.rowIndex);\n                        return;\n                    }\n                }\n                if (e.shiftKey && !ctrl) {\n                    self.selectionBounds = self.getSelectionBounds();\n                    self.selectArea(undefined, false);\n                }\n            }\n            checkSelectionChange();\n            self.draw(true);\n        };\n        self.dragResizeColumn = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = self.resizingStartingWidth + pos.x - self.dragStart.x;\n            y = self.resizingStartingHeight + pos.y - self.dragStart.y;\n            if (x < self.style.minColumnWidth) {\n                x = self.style.minColumnWidth;\n            }\n            if (y < self.style.minRowHeight) {\n                y = self.style.minRowHeight;\n            }\n            if (self.dispatchEvent('resizecolumn', {x: x, y: y, draggingItem: self.draggingItem})) { return false; }\n            if (self.scrollBox.scrollLeft > self.scrollBox.scrollWidth - self.attributes.resizeScrollZone\n                    && self.dragMode === 'ew-resize') {\n                self.resize(true);\n                self.scrollBox.scrollLeft += x;\n            }\n            if (self.dragMode === 'ew-resize') {\n                self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] = x;\n                if (['rowHeaderCell', 'cornerCell'].indexOf(self.draggingItem.header.style) !== -1) {\n                    self.resize(true);\n                }\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.dragMode === 'ns-resize') {\n                if (self.draggingItem.rowOpen) {\n                    self.sizes.trees[self.draggingItem.data[self.uniqueId]] = y;\n                } else if (self.attributes.globalRowResize) {\n                    self.style.cellHeight = y;\n                } else {\n                    self.sizes.rows[self.draggingItem.data[self.uniqueId]] = y;\n                }\n                self.dispatchEvent('resizerow', {row: y});\n                self.resizeChildGrids();\n                return;\n            }\n            self.ellipsisCache = {};\n        };\n        self.stopDragResize = function () {\n            self.resize();\n            document.body.removeEventListener('mousemove', self.dragResizeColumn, false);\n            document.body.removeEventListener('mouseup', self.stopDragResize, false);\n            self.setStorageData();\n            self.draw(true);\n            self.ignoreNextClick = true;\n        };\n        self.scrollGrid = function (e) {\n            var pos = self.getLayerPos(e);\n            if (self.attributes.scrollPointerLock && self.pointerLockPosition\n                    && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                self.pointerLockPosition.x += e.movementX;\n                self.pointerLockPosition.y += e.movementY;\n                self.pointerLockPosition.x = Math.min(self.width - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.x));\n                self.pointerLockPosition.y = Math.min(self.height - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.y));\n                pos = self.pointerLockPosition;\n            }\n            self.scrollMode = self.getCellAt(pos.x, pos.y).context;\n            if (self.scrollMode === 'horizontal-scroll-box' && self.scrollStartMode !== 'horizontal-scroll-box') {\n                self.scrollStartMode = 'horizontal-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.left = self.scrollBox.scrollLeft;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box' && self.scrollStartMode !== 'vertical-scroll-box') {\n                self.scrollStartMode = 'vertical-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.top = self.scrollBox.scrollTop;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollStartMode === 'vertical-scroll-box'\n                    && self.scrollMode !== 'vertical-scroll-box') {\n                self.scrollMode = 'vertical-scroll-box';\n            }\n            if (self.scrollStartMode === 'horizontal-scroll-box'\n                    && self.scrollMode !== 'horizontal-scroll-box') {\n                self.scrollMode = 'horizontal-scroll-box';\n            }\n            clearTimeout(self.scrollTimer);\n            if (self.scrollModes.indexOf(self.scrollMode) === -1) {\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box') {\n                self.scrollBox.scrollTop = self.scrollStart.top + ((pos.y - self.dragStart.y)\n                    / self.scrollBox.heightBoxRatio);\n            } else if (self.scrollMode === 'vertical-scroll-top') {\n                self.scrollBox.scrollTop -= (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'vertical-scroll-bottom') {\n                self.scrollBox.scrollTop += (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n            if (self.scrollMode === 'horizontal-scroll-box') {\n                self.scrollBox.scrollLeft = self.scrollStart.left + ((pos.x - self.dragStart.x)\n                    / self.scrollBox.widthBoxRatio);\n            } else if (self.scrollMode === 'horizontal-scroll-right') {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'horizontal-scroll-left') {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.stopScrollGrid = function () {\n            clearTimeout(self.scrollTimer);\n            if (document.exitPointerLock) {\n                document.exitPointerLock();\n            }\n            document.body.removeEventListener('mousemove', self.scrollGrid, false);\n        };\n        self.dragReorder = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = pos.x - self.dragStart.x;\n            y = pos.y - self.dragStart.y;\n            if (!self.attributes.allowColumnReordering && self.dragMode === 'column-reorder') {\n                return;\n            }\n            if (!self.attributes.allowRowReordering && self.dragMode === 'row-reorder') {\n                return;\n            }\n            if (self.dispatchEvent('reordering', {\n                    NativeEvent: e,\n                    source: self.dragStartObject,\n                    target: self.currentCell,\n                    dragMode: self.dragMode\n                })) {\n                return;\n            }\n            if (Math.abs(x) > self.attributes.reorderDeadZone || Math.abs(y) > self.attributes.reorderDeadZone) {\n                self.reorderObject = self.draggingItem;\n                self.reorderTarget = self.currentCell;\n                self.reorderObject.dragOffset = {\n                    x: x,\n                    y: y\n                };\n                self.autoScrollZone(e, pos.x, pos.y, false);\n            }\n        };\n        self.stopDragReorder = function (e) {\n            var oIndex,\n                tIndex,\n                cr = {\n                    'row-reorder': self.orders.rows,\n                    'column-reorder': self.orders.columns\n                },\n                i = {\n                    'row-reorder': 'rowIndex',\n                    'column-reorder': 'columnIndex'\n                }[self.dragMode];\n            document.body.removeEventListener('mousemove', self.dragReorder, false);\n            document.body.removeEventListener('mouseup', self.stopDragReorder, false);\n            if (self.reorderObject\n                    && self.reorderTarget\n                    && ((self.dragMode === 'column-reorder' && self.reorderTarget.columnIndex > -1\n                        && self.reorderTarget.columnIndex < self.getVisibleSchema().length)\n                    || (self.dragMode === 'row-reorder' && self.reorderTarget.rowIndex > -1\n                        && self.reorderTarget.rowIndex < self.data.length))\n                    && self.reorderObject[i] !== self.reorderTarget[i]\n                    && !self.dispatchEvent('reorder', {\n                        NativeEvent: e,\n                        source: self.reorderObject,\n                        target: self.reorderTarget,\n                        dragMode: self.dragMode\n                    })) {\n                self.ignoreNextClick = true;\n                oIndex = cr[self.dragMode].indexOf(self.reorderObject[i]);\n                tIndex = cr[self.dragMode].indexOf(self.reorderTarget[i]);\n                cr[self.dragMode].splice(oIndex, 1);\n                cr[self.dragMode].splice(tIndex, 0, self.reorderObject[i]);\n                self.setStorageData();\n            }\n            self.reorderObject = undefined;\n            self.reorderTarget = undefined;\n            self.draw(true);\n        };\n        self.dragMove = function (e) {\n            if (self.dispatchEvent('moving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.moveOffset = {\n                x: self.currentCell.columnIndex - self.dragStartObject.columnIndex,\n                y: self.currentCell.rowIndex - self.dragStartObject.rowIndex\n            };\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopDragMove = function (e) {\n            document.body.removeEventListener('mousemove', self.dragMove, false);\n            document.body.removeEventListener('mouseup', self.stopDragMove, false);\n            var b = self.getSelectionBounds();\n            if (self.dispatchEvent('endmove', {NativeEvent: e, cell: self.currentCell})) {\n                self.movingSelection = undefined;\n                self.moveOffset = undefined;\n                self.draw(true);\n                return;\n            }\n            if (self.moveOffset) {\n                self.moveTo(self.movingSelection, b.left + self.moveOffset.x, b.top + self.moveOffset.y);\n                self.moveSelection(self.moveOffset.x, self.moveOffset.y);\n            }\n            self.movingSelection = undefined;\n            self.moveOffset = undefined;\n            self.draw(true);\n        };\n        self.freezeMove = function (e) {\n            if (self.dispatchEvent('freezemoving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.ignoreNextClick = true;\n            self.freezeMarkerPosition = pos;\n            if (self.currentCell && self.currentCell.rowIndex !== undefined && self.dragMode === 'frozen-row-marker') {\n                self.scrollBox.scrollTop = 0;\n                self.frozenRow = self.currentCell.rowIndex + 1;\n            }\n            if (self.currentCell && self.currentCell.columnIndex !== undefined && self.dragMode === 'frozen-column-marker') {\n                self.scrollBox.scrollLeft = 0;\n                self.frozenColumn = self.currentCell.columnIndex + 1;\n            }\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopFreezeMove = function (e) {\n            document.body.removeEventListener('mousemove', self.freezeMove, false);\n            document.body.removeEventListener('mouseup', self.stopFreezeMove, false);\n            self.freezeMarkerPosition = undefined;\n            if (self.dispatchEvent('endfreezemove', {NativeEvent: e})) {\n                self.frozenRow = self.startFreezeMove.x;\n                self.frozenColumn = self.startFreezeMove.y;\n                self.draw(true);\n                return;\n            }\n            self.draw(true);\n        };\n        self.mousedown = function (e, overridePos) {\n            self.lastMouseDownTarget = e.target;\n            if (self.dispatchEvent('mousedown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (e.button === 2 || self.input) { return; }\n            var ctrl = (e.ctrlKey || e.metaKey),\n                move = /-move/.test(self.dragMode),\n                freeze = /frozen-row-marker|frozen-column-marker/.test(self.dragMode),\n                resize = /-resize/.test(self.dragMode);\n            self.dragStart = overridePos || self.getLayerPos(e);\n            self.scrollStart = {\n                left: self.scrollBox.scrollLeft,\n                top: self.scrollBox.scrollTop\n            };\n            self.dragStartObject = self.getCellAt(self.dragStart.x, self.dragStart.y);\n            self.dragAddToSelection = !self.dragStartObject.selected;\n            if (!ctrl && !e.shiftKey && !/(vertical|horizontal)-scroll-(bar|box)/\n                    .test(self.dragStartObject.context)\n                    && self.currentCell\n                    && !self.currentCell.isColumnHeader\n                    && !move\n                    && !freeze\n                    && !resize) {\n                self.selections = [];\n            }\n            if (self.dragStartObject.isGrid) {\n                return;\n            }\n            if (self.scrollModes.indexOf(self.dragStartObject.context) !== -1) {\n                self.scrollMode = self.dragStartObject.context;\n                self.scrollStartMode = self.dragStartObject.context;\n                self.scrollGrid(e);\n                if (self.attributes.scrollPointerLock\n                        && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                    self.pointerLockPosition = {\n                        x: self.dragStart.x,\n                        y: self.dragStart.y\n                    };\n                    self.canvas.requestPointerLock();\n                }\n                document.body.addEventListener('mousemove', self.scrollGrid, false);\n                document.body.addEventListener('mouseup', self.stopScrollGrid, false);\n                self.ignoreNextClick = true;\n                return;\n            }\n            if (self.dragMode === 'cell') {\n                self.selecting = true;\n                if (self.attributes.selectionMode === 'row') {\n                    self.selectRow(self.dragStartObject.rowIndex, ctrl, null, true);\n                }\n                return self.mousemove(e);\n            }\n            if (move) {\n                self.draggingItem = self.dragItem;\n                self.movingSelection = self.selections.concat([]);\n                self.dragging = self.dragStartObject;\n                if (self.dispatchEvent('beginmove', {NativeEvent: e, cell: self.currentCell})) { return; }\n                document.body.addEventListener('mousemove', self.dragMove, false);\n                document.body.addEventListener('mouseup', self.stopDragMove, false);\n                return self.mousemove(e);\n            }\n            if (freeze) {\n                self.draggingItem = self.dragItem;\n                self.startFreezeMove = {\n                    x: self.frozenRow,\n                    y: self.frozenColumn\n                };\n                if (self.dispatchEvent('beginfreezemove', {NativeEvent: e})) { return; }\n                document.body.addEventListener('mousemove', self.freezeMove, false);\n                document.body.addEventListener('mouseup', self.stopFreezeMove, false);\n                return self.mousemove(e);\n            }\n            if (resize) {\n                self.draggingItem = self.dragItem;\n                if (self.draggingItem.rowOpen) {\n                    self.resizingStartingHeight = self.sizes.trees[self.draggingItem.data[self.uniqueId]];\n                } else {\n                    self.resizingStartingHeight = self.sizes.rows[self.draggingItem.data[self.uniqueId]] || self.style.cellHeight;\n                }\n                self.resizingStartingWidth = self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] || self.draggingItem.width;\n                document.body.addEventListener('mousemove', self.dragResizeColumn, false);\n                document.body.addEventListener('mouseup', self.stopDragResize, false);\n            }\n            if (['row-reorder', 'column-reorder'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragStartObject;\n                document.body.addEventListener('mousemove', self.dragReorder, false);\n                document.body.addEventListener('mouseup', self.stopDragReorder, false);\n            }\n        };\n        self.mouseup = function (e) {\n            clearTimeout(self.scrollTimer);\n            self.cellBoundaryCrossed = true;\n            self.selecting = undefined;\n            self.draggingItem = undefined;\n            self.dragStartObject = undefined;\n            if (self.dispatchEvent('mouseup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            if (self.currentCell && self.currentCell.grid !== undefined) {\n                return;\n            }\n            if (self.contextMenu || self.input) { return; }\n            if (self.dragStart && self.isInGrid(self.dragStart)) {\n                self.controlInput.focus();\n            }\n            e.preventDefault();\n        };\n        self.keydown = function (e) {\n            var i,\n                x = self.activeCell.columnIndex,\n                y = self.activeCell.rowIndex,\n                ctrl = (e.ctrlKey || e.metaKey),\n                last = self.data.length - 1,\n                cols = self.getVisibleSchema().length - 1;\n            if (self.dispatchEvent('keydown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            if (self.attributes.showNewRow) {\n                last += 1;\n            }\n            if (e.keyCode === 9) {\n                e.preventDefault();\n            }\n            // esc\n            if (e.keyCode === 27) {\n                self.selections = [];\n                self.draw(true);\n            // ctrl + a\n            } else if (ctrl && e.keyCode === 65) {\n                self.selectAll();\n            //ArrowDown\n            } else if (e.keyCode === 40) {\n                y += 1;\n            //ArrowUp\n            } else if (e.keyCode === 38) {\n                y -= 1;\n            //ArrowLeft Tab\n            } else if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {\n                x -= 1;\n            //ArrowRight Tab\n            } else if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {\n                x += 1;\n            //PageUp\n            } else if (e.keyCode === 33) {\n                y -= self.page;\n                e.preventDefault();\n            //PageDown\n            } else if (e.keyCode === 34) {\n                y += self.page;\n                e.preventDefault();\n            //Home ArrowUp\n            } else if (e.keyCode === 36 || (ctrl && e.keyCode === 38)) {\n                y = 0;\n            //End ArrowDown\n            } else if (e.keyCode === 35 || (ctrl && e.keyCode === 40)) {\n                y = self.data.length - 1;\n            //ArrowRight\n            } else if (ctrl && e.keyCode === 39) {\n                x = cols;\n            //ArrowLeft\n            } else if (ctrl && e.keyCode === 37) {\n                x = 0;\n            }\n            //Enter\n            if (e.keyCode === 13) {\n                return self.beginEditAt(x, y);\n            }\n            //Space\n            if (e.keyCode === 32) {\n                self.selections = [];\n                self.selections[Math.max(y, 0)] = [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                if (self.attributes.selectionMode === 'row') {\n                    for (i = self.selectionBounds.top; i <= self.selectionBounds.bottom; i += 1) {\n                        self.selectRow(i, ctrl, null, true);\n                    }\n                } else {\n                    self.selectArea(undefined, ctrl);\n                }\n                e.preventDefault();\n                self.draw(true);\n                return;\n            }\n            if (x < 0) {\n                x = 0;\n            }\n            if (y > last) {\n                y = last;\n            }\n            if (y < 0) {\n                y = 0;\n            }\n            if (x > cols) {\n                x = cols;\n            }\n            // Arrows\n            if (e.shiftKey && [37, 38, 39, 40].indexOf(e.keyCode) !== -1) {\n                self.selections[Math.max(y, 0)] = self.selections[Math.max(y, 0)] || [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                self.selectArea(undefined, ctrl);\n                self.draw(true);\n            }\n            if (x !== self.activeCell.columnIndex || y !== self.activeCell.rowIndex) {\n                self.scrollIntoView(x !== self.activeCell.columnIndex ? x : undefined, y !== self.activeCell.rowIndex ? y : undefined);\n                self.setActiveCell(x, y);\n                if (!e.shiftKey && self.attributes.selectionFollowsActiveCell) {\n                    if (!ctrl) {\n                        self.selections = [];\n                    }\n                    self.selections[y] = self.selections[y] || [];\n                    self.selections[y].push(x);\n                    self.dispatchEvent('selectionchanged', {\n                        selectedData: self.getSelectedData(),\n                        selections: self.selections,\n                        selectionBounds: self.selectionBounds\n                    });\n                }\n                self.draw(true);\n            }\n        };\n        self.keyup = function (e) {\n            if (self.dispatchEvent('keyup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n        };\n        self.keypress = function (e) {\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.dispatchEvent('keypress', {NativeEvent: e, cell: self.currentCell})) { return; }\n        };\n        self.dblclick = function (e) {\n            if (self.dispatchEvent('dblclick', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'columnHeaderCell') {\n                self.fitColumnToValues(self.currentCell.header.name);\n            } else if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'cornerCell') {\n                self.autosize();\n            } else if (['cell', 'activeCell'].indexOf(self.currentCell.style) !== -1) {\n                self.beginEditAt(self.currentCell.columnIndex, self.currentCell.rowIndex);\n            }\n        };\n        self.scrollWheel = function (e) {\n            var l,\n                t,\n                deltaX = e.deltaX === undefined ? e.NativeEvent.deltaX : e.deltaX,\n                deltaY = e.deltaY === undefined ? e.NativeEvent.deltaY : e.deltaY,\n                deltaMode = e.deltaMode === undefined ? e.NativeEvent.deltaMode : e.deltaMode;\n            if (wheeling) {\n                return;\n            }\n            if (self.dispatchEvent('wheel', {NativeEvent: e})) {\n                return;\n            }\n            e = e.NativeEvent || e;\n            self.touchHaltAnimation = true;\n            l = self.scrollBox.scrollLeft;\n            t = self.scrollBox.scrollTop;\n            if (self.hasFocus) {\n                //BUG Issue 42: https://github.com/TonyGermaneri/canvas-datagrid/issues/42\n                //https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\n                if (deltaMode === 1) {\n                    // line mode = 17 pixels per line\n                    deltaY = deltaY * 17;\n                }\n                if ((self.scrollBox.scrollTop < self.scrollBox.scrollHeight && deltaY > 0)\n                        || (self.scrollBox.scrollLeft < self.scrollBox.scrollWidth && deltaX > 0)\n                        || (self.scrollBox.scrollTop > 0 && deltaY < 0)\n                        || (self.scrollBox.scrollLeft > 0 && deltaX < 0)) {\n                    e.preventDefault(e);\n                }\n                wheeling = setTimeout(function () {\n                    wheeling = undefined;\n                    self.scrollBox.scrollTo(deltaX + l, deltaY + t);\n                }, 1);\n            }\n        };\n        self.pasteItem = function (clipData, x, y, mimeType) {\n            var l, s = self.getVisibleSchema(), yi = y - 1, sel = [];\n            function normalizeRowData(importingRow, existingRow, offsetX, schema, mimeType, rowIndex) {\n                var r = existingRow;\n                if (!Array.isArray(importingRow) && importingRow !== null && typeof importingRow === 'object') {\n                    importingRow = Object.keys(importingRow).map(function (colKey) {\n                        return importingRow[colKey];\n                    });\n                }\n                if (/^text\\/html/.test(mimeType)) {\n                    importingRow = importingRow.substring(4, importingRow.length - 5).split('</td><td>');\n                }\n                if (typeof importingRow === 'string') {\n                    importingRow = [importingRow];\n                }\n                sel[rowIndex] = [];\n                importingRow.forEach(function (cellData, colIndex) {\n                    var cName = schema[colIndex + offsetX].name;\n                    if (importingRow[colIndex] === undefined || importingRow[colIndex] === null) {\n                        r[cName] = existingRow[cName];\n                        return;\n                    }\n                    sel[rowIndex].push(colIndex + offsetX);\n                    r[cName] = importingRow[colIndex];\n                });\n                return r;\n            }\n            if (/^text\\/html/.test(mimeType)) {\n                if (!/^(<meta[^>]+>)?<table>/.test(clipData.substring(0, 29))) {\n                    console.warn('Unrecognized HTML format.  HTML must be a simple table, e.g.: <table><tr><td>data</td></tr></table>.  Data with the mime type text/html not in this format will not be imported as row data.');\n                    return;\n                }\n                // strip table beginning and ending off, then split at rows\n                clipData = clipData.substring(clipData.indexOf('<table><tr>') + 11, clipData.length - 13).split('</tr><tr>');\n            } else {\n                clipData = clipData.split('\\n');\n            }\n            l = clipData.length;\n            clipData.forEach(function (rowData) {\n                yi += 1;\n                self.data[yi] = normalizeRowData(rowData, self.data[yi], x, s, mimeType, yi);\n            });\n            self.selections = sel;\n            return l;\n        };\n        self.paste = function (e) {\n            var d;\n            function getItem(dti) {\n                var type = dti.type;\n                dti.getAsString(function (s) {\n                    self.pasteItem(s, self.activeCell.columnIndex, self.activeCell.rowIndex, type);\n                    self.draw();\n                });\n            }\n            d = Array.prototype.filter.call(e.clipboardData.items, function (dti) {\n                return dti.type === 'text/html';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/csv';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/plain';\n            })[0];\n            if (!d) {\n                console.warn('Cannot find supported clipboard data type.  Supported types are text/html, text/csv, text/plain.');\n                return;\n            }\n            getItem(d);\n        };\n        self.cut = function (e) {\n            self.copy(e);\n            self.forEachSelectedCell(function (data, index, colName) {\n                data[index][colName] = '';\n            });\n        };\n        self.copy = function (e) {\n            if (self.dispatchEvent('copy', {NativeEvent: e})) { return; }\n            if (!self.hasFocus || !e.clipboardData) { return; }\n            var t,\n                d,\n                rows = [],\n                trows = [],\n                sData = self.getSelectedData();\n            function fCopyCell(d) {\n                d = d === null || d === undefined ? '' : d;\n                return '<td>' + (typeof d === 'string' ? d.replace(/</g, '&lt;').replace(/>/g, '&gt;') : d) + '</td>';\n            }\n            if (sData.length > 0) {\n                sData.forEach(function (row) {\n                    if (row) {\n                        // r = array for HTML, rt = array for plain text\n                        var r = [],\n                            rt = [];\n                        Object.keys(row).forEach(function (key) {\n                            // escape strings\n                            if (row[key] !== null\n                                    && row[key] !== false\n                                    && row[key] !== undefined\n                                    && row[key].replace) {\n                                rt.push('\"' + row[key].replace(/\"/g, '\"\"') + '\"');\n                                r.push(fCopyCell(row[key]));\n                                return;\n                            }\n                            rt.push(row[key]);\n                            r.push(fCopyCell(row[key]));\n                        });\n                        rows.push(r.join(''));\n                        trows.push(rt.join(','));\n                    }\n                });\n                d = '<table><tr>' + rows.join('</tr><tr>') + '</tr></table>';\n                t = trows.join('\\n');\n                e.clipboardData.setData('text/html', d);\n                e.clipboardData.setData('text/plain', t);\n                e.clipboardData.setData('text/csv', t);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var touchTimerMs = 50,\n            touchScrollTimeout;\n        self.scrollAnimation = {};\n        self.touchDelta = {};\n        self.touchAnimateTo = {};\n        self.animationFrames = 0;\n        self.getTouchPos = function (e, touchIndex) {\n            var t = touchIndex ? e.touches[touchIndex] : e.touches[0],\n                rect = self.canvas.getBoundingClientRect(),\n                pos;\n            if (!t) { return; }\n            pos = {\n                x: t.clientX - rect.left,\n                y: t.clientY - rect.top\n            };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        // shamelessly stolen from from https://gist.github.com/gre/1650294\n        self.easingFunctions = {\n            linear: function (t) { return t; },\n            easeInQuad: function (t) { return t * t; },\n            easeOutQuad: function (t) { return t * (2 - t); },\n            easeInOutQuad: function (t) { return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t; },\n            easeInCubic: function (t) { return t * t * t; },\n            easeOutCubic: function (t) { return (--t) * t * t + 1; },\n            easeInOutCubic: function (t) { return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1; },\n            easeInQuart: function (t) { return t * t * t * t; },\n            easeOutQuart: function (t) { return 1 - (--t) * t * t * t; },\n            easeInOutQuart: function (t) { return t < 0.5 ? 8 * t  * t  * t * t : 1 - 8 * (--t) * t * t * t; },\n            easeInQuint: function (t) { return t * t * t * t * t; },\n            easeOutQuint: function (t) { return 1 + (--t) * t *  t * t * t; },\n            easeInOutQuint: function (t) { return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t; }\n        };\n        self.easing = function (t, b, c, d) {\n            return c * self.easingFunctions[self.attributes.touchEasingMethod](t / d) + b;\n        };\n        self.calculatePPSTimed = function () {\n            self.xPPST = -((self.touchDelta.x - self.touchSigmaTimed.x) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.yPPST = -((self.touchDelta.y - self.touchSigmaTimed.y) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.touchSigmaTimed = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.calculatePPS = function () {\n            self.xPPS = -((self.touchDelta.x - self.touchSigma.x) / (self.touchDelta.t - self.touchSigma.t));\n            self.yPPS = -((self.touchDelta.y - self.touchSigma.y) / (self.touchDelta.t - self.touchSigma.t));\n            self.touchSigma = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.touchEndAnimation = function () {\n            if (!self.canvas || !self.scrollBox.scrollTo) { return requestAnimationFrame(self.touchEndAnimation); }\n            var n = performance.now(),\n                d = self.attributes.touchReleaseAnimationDurationMs,\n                t;\n            t = n - self.touchDelta.t;\n            self.animationFrames += 1;\n            self.scrollAnimation.x = self.easing(t, self.touchDelta.scrollLeft, self.touchAnimateTo.x, d);\n            self.scrollAnimation.y = self.easing(t, self.touchDelta.scrollTop, self.touchAnimateTo.y, d);\n            if (t > d || (self.scrollAnimation.y === self.scrollBox.scrollTop\n                    && self.scrollAnimation.x === self.scrollBox.scrollLeft) || self.stopAnimation) {\n                return;\n            }\n            self.scrollBox.scrollTo(self.scrollAnimation.x, self.scrollAnimation.y);\n            requestAnimationFrame(self.touchEndAnimation);\n        };\n        self.touchEditCell = function (cell) {\n            self.beginEditAt(cell.columnIndex, cell.rowIndex);\n        };\n        self.touchCell = function (e) {\n            return function () {\n                clearInterval(self.calculatePPSTimer);\n                var i, pos = self.getTouchPos(e);\n                if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone) {\n                    i = self.getCellAt(pos.x, pos.y);\n                    if (!i) { return; }\n                    if (self.touchingCell && self.touchingCell.rowIndex === i.rowIndex\n                            && self.touchingCell.columnIndex === i.columnIndex) {\n                        self.touchEditCell(i);\n                        return;\n                    }\n                    if (self.input) {\n                        self.endEdit();\n                    }\n                    self.touchingCell = i;\n                    self.selectArea({\n                        top: i.rowIndex,\n                        bottom: i.rowIndex,\n                        left: i.columnIndex,\n                        right: i.columnIndex\n                    });\n                    self.draw(true);\n                }\n            };\n        };\n        self.touchstart = function (e) {\n            if (self.dispatchEvent('touchstart', {NativeEvent: e})) { return; }\n            self.disposeContextMenu();\n            clearInterval(self.calculatePPSTimer);\n            clearTimeout(self.touchContextTimeout);\n            self.touchStartEvent = e;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (e.changedTouches[0]) {\n                self.touchStart = self.getTouchPos(e);\n            }\n            if (e.touches.length === 1 && e.changedTouches[0] && !self.zoomAltered) {\n                self.touchLength = 1;\n                self.touchStart = self.touchStart || self.touchStart1;\n                self.touchScrollStart = {\n                    x: self.scrollBox.scrollLeft,\n                    y: self.scrollBox.scrollTop,\n                    t: performance.now()\n                };\n                self.touchDelta = {\n                    x: 0,\n                    y: 0,\n                    scrollLeft: self.scrollBox.scrollLeft,\n                    scrollTop: self.scrollBox.scrollTop,\n                    t: self.touchScrollStart.t\n                };\n                self.touchSigma = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchSigmaTimed = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchContextTimeout = setTimeout(function () {\n                    self.contextmenuEvent(e, self.touchStart);\n                }, self.attributes.touchContextMenuTimeMs);\n                self.calculatePPSTimer = setInterval(self.calculatePPSTimed, touchTimerMs);\n                self.startingCell = self.getCellAt(self.touchStart.x, self.touchStart.y, true);\n                if (self.startingCell && (self.startingCell.isGrid || ['tree', 'inherit'].indexOf(self.startingCell.context) !== -1)) {\n                    self.hasFocus = false;\n                    return;\n                }\n                self.hasFocus = true;\n                if (self.startingCell.isHeader) {\n                    if (self.startingCell.isRowHeader) {\n                        self.selectArea({\n                            top: self.startingCell.rowIndex,\n                            bottom: self.startingCell.rowIndex,\n                            left: 0,\n                            right: self.getVisibleSchema().length - 1,\n                        });\n                        self.draw(true);\n                    } else if (self.startingCell.isColumnHeader) {\n                        if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                            if (self.orderBy === self.startingCell.header.name) {\n                                self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                            } else {\n                                self.orderDirection = 'asc';\n                            }\n                            self.order(self.startingCell.header.name, self.orderDirection);\n                        }\n                        if (self.attributes.columnHeaderClickBehavior === 'select') {\n                            self.selectArea({\n                                top: 0,\n                                bottom: self.data.length - 1,\n                                left: self.startingCell.columnIndex,\n                                right: self.startingCell.columnIndex,\n                            });\n                            self.draw(true);\n                        }\n                    }\n                    self.touchEndEvents(e);\n                    return;\n                }\n            }\n            if (self.zoomAltered) { return; }\n            document.body.addEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.addEventListener('touchend', self.touchend, false);\n            document.body.addEventListener('touchcancel', self.touchcancel, false);\n            self.draw(true);\n        };\n        self.touchSelect = function (cell, handleType) {\n            if (cell.rowIndex === undefined || cell.columnIndex === undefined) { return; }\n            self.touchSelecting = true;\n            var bounds = self.getSelectionBounds();\n            if (handleType === 'selection-handle-bl'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex <= bounds.right) {\n                bounds.bottom = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tl'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex <= bounds.right) {\n                bounds.top = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tr'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex >= bounds.left) {\n                bounds.top = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            } else if (handleType === 'selection-handle-br'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex >= bounds.left) {\n                bounds.bottom = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            }\n            if (self.attributes.selectionMode === 'row' || cell.rowIndex === -1) {\n                bounds.left = 0;\n                bounds.right = self.getSchema().length - 1;\n            } else {\n                bounds.left = Math.max(0, bounds.left);\n            }\n            self.selectArea(bounds);\n            self.draw(true);\n        };\n        self.touchmove = function (e) {\n            var ch, rw, rScrollZone, lScrollZone, bScrollZone, tScrollZone, sbw, t1, t2;\n            if (self.dispatchEvent('touchmove', {NativeEvent: e})) { return; }\n            clearTimeout(touchScrollTimeout);\n            if (e.changedTouches[0]) {\n                self.touchPosition = self.getTouchPos(e);\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = self.getTouchPos(e, 1);\n            }\n            if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) > self.attributes.touchDeadZone) {\n                clearTimeout(self.touchContextTimeout);\n            }\n            if (e.touches.length === 2 && self.touchPosition && self.touchPosition1) {\n                t1 = self.touchPosition.y;\n                t2 = self.touchPosition1.y;\n                if (!self.zoomDeltaStart) {\n                    self.zoomDeltaStart = Math.abs(t1 - t2);\n                    self.startScale = self.scale;\n                }\n                self.touchLength = 2;\n                self.scaleDelta = self.zoomDeltaStart - Math.abs(t1 - t2);\n                self.scale = self.startScale - (self.scaleDelta * self.attributes.touchZoomSensitivity);\n                self.scale = Math.min(Math.max(self.scale, self.attributes.touchZoomMin), self.attributes.touchZoomMax);\n                self.zoomAltered = true;\n                self.resize(true);\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.zoomAltered) { return; }\n            self.touchLength = 1;\n            self.touchPosition = self.touchPosition || self.touchPosition1;\n            ch = self.getColumnHeaderCellHeight();\n            rw = self.getRowHeaderCellWidth();\n            rScrollZone = self.width - self.style.scrollBarWidth - self.touchPosition.x < self.attributes.selectionScrollZone;\n            lScrollZone = self.touchPosition.x - rw < self.attributes.selectionScrollZone;\n            bScrollZone = self.height - self.style.scrollBarWidth - self.touchPosition.y < self.attributes.selectionScrollZone;\n            tScrollZone = self.touchPosition.y - ch < self.attributes.selectionScrollZone;\n            sbw = self.style.scrollBarWidth;\n            function touchScroll() {\n                var x = self.scrollBox.scrollLeft,\n                    y = self.scrollBox.scrollTop;\n                x += (rScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y += (bScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y -= (tScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                x -= (lScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                self.scrollBox.scrollTo(x, y);\n                touchScrollTimeout = setTimeout(touchScroll, self.attributes.scrollRepeatRate);\n            }\n            e.stopPropagation();\n            self.touchDelta = {\n                x: self.touchPosition.x - self.touchStart.x,\n                y: self.touchPosition.y - self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: performance.now()\n            };\n            self.currentCell = self.getCellAt(self.touchPosition.x, self.touchPosition.y);\n            self.calculatePPS();\n            self.touchDuration = performance.now() - self.touchScrollStart.t;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            if (self.touchSelecting && (rScrollZone || lScrollZone || tScrollZone || bScrollZone)) {\n                touchScroll();\n            }\n            if (/vertical-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollTop = self.scrollBox.scrollHeight\n                    * ((self.touchPosition.y - ch - sbw) / (self.scrollBox.height - sbw - ch));\n                return;\n            }\n            if (/horizontal-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollLeft = self.scrollBox.scrollWidth\n                    * ((self.touchPosition.x - rw - sbw) / (self.scrollBox.width - sbw - rw));\n                return;\n            }\n            if (/selection-handle-/.test(self.startingCell.style)) {\n                self.touchSelect(self.currentCell, self.startingCell.style);\n                return;\n            }\n            self.scrollBox.scrollTo(self.touchScrollStart.x - self.touchDelta.x,\n                self.touchScrollStart.y - self.touchDelta.y);\n            self.draw(true);\n        };\n        self.touchEndEvents = function (e) {\n            self.zoomDeltaStart = undefined;\n            self.touchSelecting = false;\n            clearInterval(self.touchScrollTimeout);\n            clearInterval(self.touchContextTimeout);\n            clearInterval(self.calculatePPSTimer);\n            e.stopPropagation();\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n        };\n        self.touchend = function (e) {\n            if (self.dispatchEvent('touchend', {NativeEvent: e})) { return; }\n            self.zoomDeltaStart = undefined;\n            if (e.changedTouches[0]) {\n                self.touchPosition = undefined;\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = undefined;\n            }\n            if (self.zoomAltered) {\n                if (e.touches.length === 0) {\n                    self.zoomAltered = false;\n                }\n                return;\n            }\n            var dz = Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone;\n            if (isNaN(self.xPPS)) {\n                self.xPPS = 0;\n            }\n            if (isNaN(self.yPPS)) {\n                self.yPPS = 0;\n            }\n            if (isNaN(self.xPPST)) {\n                self.xPPST = 0;\n            }\n            if (isNaN(self.yPPST)) {\n                self.yPPST = 0;\n            }\n            self.touchAnimateTo.x = self.xPPS * self.attributes.touchReleaseAcceleration;\n            self.touchAnimateTo.y = self.yPPS * self.attributes.touchReleaseAcceleration;\n            self.calculatePPSTimed();\n            if (dz && !self.contextMenu) {\n                self.touchCell(self.touchStartEvent)();\n            } else if (self.animationFrames === 0\n                    && (Math.abs(self.xPPST) > self.attributes.scrollAnimationPPSThreshold\n                        || Math.abs(self.yPPST) > self.attributes.scrollAnimationPPSThreshold)\n                    && !/-scroll-/.test(self.startingCell.style)\n                    && !dz) {\n                self.stopAnimation = false;\n                self.touchEndAnimation();\n            }\n            self.touchEndEvents(e);\n        };\n        self.touchcancel = function (e) {\n            if (self.dispatchEvent('touchcancel', {NativeEvent: e})) { return; }\n            self.touchEndEvents(e);\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals HTMLElement: false, Reflect: false, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self, ctor) {\n        self.scale = 1;\n        self.orders = {\n            rows: [],\n            columns: []\n        };\n        self.visibleRowHeights = [];\n        self.hasFocus = false;\n        self.activeCell = {\n            columnIndex: 0,\n            rowIndex: 0\n        };\n        self.storageName = 'canvasDataGrid';\n        self.invalidSearchExpClass = 'canvas-datagrid-invalid-search-regExp';\n        self.localStyleLibraryStorageKey = 'canvas-datagrid-user-style-library';\n        self.uniqueId = '_canvasDataGridUniqueId';\n        self.orderBy = self.uniqueId;\n        self.orderDirection = 'asc';\n        self.columnFilters = {};\n        self.filters = {};\n        self.frozenRow = 0;\n        self.frozenColumn = 0;\n        self.ellipsisCache = {};\n        self.scrollBox = {};\n        self.visibleRows = [];\n        self.sizes = {\n            rows: {},\n            columns: {},\n            trees: {}\n        };\n        self.currentFilter = function () {\n            return true;\n        };\n        self.selections = [];\n        self.hovers = {};\n        self.attributes = {};\n        self.style = {};\n        self.formatters = {};\n        self.sorters = {};\n        self.schemaHashes = {};\n        self.events = {};\n        self.uId = 0;\n        self.changes = [];\n        self.scrollIndexTop = 0;\n        self.scrollPixelTop = 0;\n        self.scrollIndexLeft = 0;\n        self.scrollPixelLeft = 0;\n        self.childGrids = {};\n        self.openChildren = {};\n        self.scrollModes = [\n            'vertical-scroll-box',\n            'vertical-scroll-top',\n            'vertical-scroll-bottom',\n            'horizontal-scroll-box',\n            'horizontal-scroll-right',\n            'horizontal-scroll-left'\n        ];\n        self.componentL1Events = {};\n        self.eventNames = ['afterdraw', 'afterrendercell', 'attributechanged', 'beforebeginedit',\n            'beforecreatecellgrid', 'beforedraw', 'beforeendedit', 'beforerendercell', 'beforerendercellgrid',\n            'beginedit', 'cellmouseout', 'cellmouseover', 'click', 'collapsetree', 'contextmenu', 'copy',\n            'datachanged', 'dblclick', 'endedit', 'expandtree', 'formatcellvalue', 'keydown', 'keypress',\n            'keyup', 'mousedown', 'mousemove', 'mouseup', 'newrow', 'ordercolumn', 'rendercell', 'rendercellgrid',\n            'renderorderbyarrow', 'rendertext', 'rendertreearrow', 'reorder', 'reordering', 'resize',\n            'resizecolumn', 'resizerow', 'schemachanged', 'scroll', 'selectionchanged', 'stylechanged',\n            'touchcancel', 'touchend', 'touchmove', 'touchstart', 'wheel'];\n        self.mouse = { x: 0, y: 0};\n        self.getSelectedData = function (expandToRow) {\n            var d = [], s = expandToRow ? self.getSchema() : self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    if (col === -1 || !s[col]) { return; }\n                    d[index][s[col].name] = self.data[index][s[col].name];\n                });\n            });\n            return d;\n        };\n        self.fillArray = function (low, high, step, def) {\n            step = step || 1;\n            var i = [], x;\n            for (x = low; x <= high; x += step) {\n                i[x] = def === undefined ? x : (typeof def === 'function' ? def(x) : def);\n            }\n            return i;\n        };\n        self.getColumnHeaderCellHeight = function () {\n            if (!self.attributes.showColumnHeaders) { return 0; }\n            return ((self.sizes.rows[-1] || self.style.columnHeaderCellHeight) * self.scale);\n        };\n        self.getRowHeaderCellWidth = function () {\n            if (!self.attributes.showRowHeaders) { return 0; }\n            return (self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth) * self.scale;\n        };\n        self.setStorageData = function () {\n            if (!self.attributes.saveAppearance) { return; }\n            localStorage.setItem(self.storageName + '-' + self.attributes.name, JSON.stringify({\n                sizes: {\n                    rows: self.sizes.rows,\n                    columns: self.sizes.columns\n                },\n                orders: {\n                    rows: self.orders.rows,\n                    columns: self.orders.columns\n                },\n                orderBy: self.orderBy,\n                orderDirection: self.orderDirection\n            }));\n        };\n        self.getSchema = function () {\n            return self.schema || self.tempSchema;\n        };\n        self.createColumnOrders = function () {\n            var s = self.getSchema();\n            self.orders.columns = self.fillArray(0, s.length - 1);\n        };\n        self.createRowOrders = function () {\n            self.orders.rows = self.fillArray(0, self.data.length - 1);\n        };\n        self.getVisibleSchema = function () {\n            return self.getSchema().filter(function (col) {\n                return !col.hidden && col.name !== self.uniqueId;\n            });\n        };\n        self.applyDefaultValue = function (row, header) {\n            var d = header.defaultValue || '';\n            if (typeof d === 'function') {\n                d = d.apply(self.intf, [header]);\n            }\n            row[header.name] = d;\n        };\n        self.createNewRowData = function () {\n            self.newRow = {};\n            self.newRow[self.uniqueId] = self.uId;\n            self.uId += 1;\n            self.getSchema().forEach(function forEachHeader(header) {\n                self.applyDefaultValue(self.newRow, header);\n            });\n        };\n        self.getSchemaNameHash = function (key) {\n            var n = 0;\n            while (self.schemaHashes[key]) {\n                n += 1;\n                key = key + n;\n            }\n            return key;\n        };\n        self.filter = function (type) {\n            var f = self.filters[type];\n            if (!f && type !== undefined) {\n                console.warn('Cannot find filter for type %s, falling back to substring match.', type);\n                f = self.filters.string;\n            }\n            return f;\n        };\n        self.getBestGuessDataType = function (columnName) {\n            var t, x, l = self.data.length;\n            for (x = 0; x < l; x += 1) {\n                if ([null, undefined].indexOf(self.data[x][columnName]) !== -1) {\n                    t = typeof self.data[x];\n                    return t === 'object' ? 'string' : t;\n                }\n            }\n            return 'string';\n        };\n        self.drawChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].draw();\n            });\n        };\n        self.resizeChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].resize();\n            });\n        };\n        self.autoScrollZone = function (e, x, y, ctrl) {\n            var setTimer,\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight();\n            if (x > self.width - self.attributes.selectionScrollZone && x < self.width) {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y > self.height - self.attributes.selectionScrollZone && y < self.height) {\n                self.scrollBox.scrollTop += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (x - self.attributes.selectionScrollZone - rowHeaderCellWidth < 0) {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y - self.attributes.selectionScrollZone - columnHeaderCellHeight < 0) {\n                self.scrollBox.scrollTop -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (setTimer && !ctrl && self.currentCell && self.currentCell.columnIndex !== -1) {\n                self.scrollTimer = setTimeout(self.mousemove, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.refreshFromOrigialData = function () {\n            self.data = self.originalData.filter(function (row) {\n                return true;\n            });\n        };\n        self.validateColumn = function (c, s) {\n            if (!c.name) {\n                throw new Error('A column must contain at least a name.');\n            }\n            if (s.filter(function (i) { return i.name === c.name; }).length > 0) {\n                throw new Error('A column with the name '\n                    + c.name + ' already exists and cannot be added again.');\n            }\n            return true;\n        };\n        self.setDefaults = function (obj1, obj2, key, def) {\n            obj1[key] = obj2[key] === undefined ? def : obj2[key];\n        };\n        self.setAttributes = function () {\n            self.defaults.attributes.forEach(function eachAttribute(i) {\n                self.setDefaults(self.attributes, self.args, i[0], i[1]);\n            });\n        };\n        self.setStyle = function () {\n            self.defaults.styles.forEach(function eachStyle(i) {\n                self.setDefaults(self.style, self.args.style || {}, i[0], i[1]);\n            });\n        };\n        self.autosize = function (colName) {\n            self.getVisibleSchema().forEach(function (col) {\n                if (col.name === colName || colName === undefined) {\n                    self.fitColumnToValues(col.name);\n                }\n            });\n            self.fitColumnToValues('cornerCell');\n        };\n        self.dispose = function () {\n            if (!self.isChildGrid && self.canvas && self.canvas.parentNode) {\n                self.canvas.parentNode.removeChild(self.canvas);\n            }\n            self.eventParent.removeEventListener('mouseup', self.mouseup, false);\n            self.eventParent.removeEventListener('mousedown', self.mousedown, false);\n            self.eventParent.removeEventListener('dblclick', self.dblclick, false);\n            self.eventParent.removeEventListener('click', self.click, false);\n            self.eventParent.removeEventListener('mousemove', self.mousemove);\n            self.eventParent.removeEventListener('wheel', self.scrollWheel, false);\n            self.canvas.removeEventListener('contextmenu', self.contextmenu, false);\n            self.canvas.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('keypress', self.keypress, false);\n            self.controlInput.removeEventListener('keyup', self.keyup, false);\n            self.controlInput.removeEventListener('keydown', self.keydown, false);\n            window.removeEventListener('resize', self.resize);\n            if (self.observer && self.observer.disconnect) {\n                self.observer.disconnect();\n            }\n        };\n        self.tryLoadStoredOrders = function () {\n            var s;\n            if (self.storedSettings\n                    && typeof self.storedSettings.orders === 'object'\n                    && self.storedSettings.orders !== null) {\n                if (self.storedSettings.orders.rows.length >= self.data.length) {\n                    self.orders.rows = self.storedSettings.orders.rows;\n                }\n                s = self.getSchema();\n                if (self.storedSettings.orders.columns.length === s.length) {\n                    self.orders.columns = self.storedSettings.orders.columns;\n                }\n                self.orderBy = self.storedSettings.orderBy === undefined\n                    ? self.uniqueId : self.storedSettings.orderBy;\n                self.orderDirection = self.storedSettings.orderDirection === undefined\n                    ? self.uniqueId : self.storedSettings.orderDirection;\n                if (self.orderBy !== self.uniqueId && self.getHeaderByName(self.orderBy) && self.orderDirection) {\n                    self.order(self.orderBy, self.orderDirection);\n                }\n            }\n        };\n        self.getDomRoot = function () {\n            return self.shadowRoot ? self.shadowRoot.host : self.parentNode;\n        };\n        self.getFontName = function (fontStyle) {\n            return fontStyle.replace(/\\d+\\.?\\d*px/, '');\n        };\n        self.getFontHeight = function (fontStyle) {\n            return parseFloat(fontStyle, 10);\n        };\n        self.parseStyleValue = function (key) {\n            if (/Font/.test(key)) {\n                self.style[key + 'Height'] = self.getFontHeight(self.style[key]);\n                self.style[key + 'Name'] = self.getFontName(self.style[key]);\n                return;\n            }\n            if (key === 'moveOverlayBorderSegments') {\n                self.style[key] = self.style[key].split(',')\n                    .map(function (i) { return parseInt(i, 10); });\n            }\n        };\n        self.initProp = function (propName) {\n            if (!self.args[propName]) { return; }\n            Object.keys(self.args[propName]).forEach(function (key) {\n                self[propName][key] = self.args[propName][key];\n            });\n        };\n        self.setStyleProperty = function (key, value) {\n            if (self.styleKeys.indexOf(key) === -1) {\n                self.parentNodeStyle[key] = value;\n            } else {\n                self.parseStyleValue(value);\n                self.style[key] = value;\n                self.draw(true);\n                self.dispatchEvent('stylechanged', {name: 'style', value: value});\n            }\n        };\n        self.init = function () {\n            if (self.initialized) { return; }\n            var publicStyleKeyIntf = {};\n            self.setAttributes();\n            self.setStyle();\n            self.initScrollBox();\n            self.setDom();\n            self.type = 'canvas-datagrid';\n            self.initialized = true;\n            self.ie = /Trident/.test(window.navigator.userAgent);\n            self.edge = /Edge/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.moz = /Gecko/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.mobile = /Mobile/i.test(window.navigator.userAgent);\n            self.cursorGrab = 'grab';\n            self.cursorGrabing = 'grabbing';\n            self.cursorGrab = self.webKit ? '-webkit-grab' : self.cursorGrab;\n            self.cursorGrabing = self.moz ? '-webkit-grabbing' : self.cursorGrabbing;\n            self.pointerLockPosition = {x: 0, y: 0};\n            Object.keys(self.style).forEach(self.parseStyleValue);\n            self.intf.moveSelection = self.moveSelection;\n            self.intf.moveTo = self.moveTo;\n            self.intf.type = self.type;\n            self.intf.addEventListener = self.addEventListener;\n            self.intf.removeEventListener = self.removeEventListener;\n            self.intf.dispatchEvent = self.dispatchEvent;\n            /**\n             * Releases grid resources and removes grid elements.\n             * @memberof canvasDatagrid\n             * @name dispose\n             * @method\n             */\n            self.intf.dispose = self.dispose;\n            /**\n             * Appends the grid to another element later.  Not implemented.\n             * @memberof canvasDatagrid\n             * @name appendTo\n             * @method\n             * @param {number} el The element to append the grid to.\n             */\n            self.intf.appendTo = self.appendTo;\n            self.intf.filters = self.filters;\n            self.intf.sorters = self.sorters;\n            self.intf.autosize = self.autosize;\n            self.intf.beginEditAt = self.beginEditAt;\n            self.intf.endEdit = self.endEdit;\n            self.intf.setActiveCell = self.setActiveCell;\n            self.intf.forEachSelectedCell = self.forEachSelectedCell;\n            self.intf.scrollIntoView = self.scrollIntoView;\n            self.intf.clearChangeLog = self.clearChangeLog;\n            self.intf.gotoCell = self.gotoCell;\n            self.intf.gotoRow = self.gotoRow;\n            self.intf.getHeaderByName = self.getHeaderByName;\n            self.intf.findColumnScrollLeft = self.findColumnScrollLeft;\n            self.intf.findRowScrollTop = self.findRowScrollTop;\n            self.intf.fitColumnToValues = self.fitColumnToValues;\n            self.intf.findColumnMaxTextLength = self.findColumnMaxTextLength;\n            self.intf.disposeContextMenu = self.disposeContextMenu;\n            self.intf.getCellAt = self.getCellAt;\n            self.intf.isCellVisible = self.isCellVisible;\n            self.intf.order = self.order;\n            self.intf.draw = self.draw;\n            self.intf.selectArea = self.selectArea;\n            self.intf.clipElement = self.clipElement;\n            self.intf.getSchemaFromData = self.getSchemaFromData;\n            self.intf.setFilter = self.setFilter;\n            self.intf.selectRow = self.selectRow;\n            self.intf.parentGrid = self.parentGrid;\n            self.intf.toggleTree = self.toggleTree;\n            self.intf.expandTree = self.expandTree;\n            self.intf.collapseTree = self.collapseTree;\n            self.intf.canvas = self.canvas;\n            self.intf.context = self.ctx;\n            self.intf.insertRow = self.insertRow;\n            self.intf.deleteRow = self.deleteRow;\n            self.intf.addRow = self.addRow;\n            self.intf.insertColumn = self.insertColumn;\n            self.intf.deleteColumn = self.deleteColumn;\n            self.intf.addColumn = self.addColumn;\n            self.intf.getClippingRect = self.getClippingRect;\n            self.intf.setRowHeight = self.setRowHeight;\n            self.intf.setColumnWidth = self.setColumnWidth;\n            self.intf.resetColumnWidths = self.resetColumnWidths;\n            self.intf.resetRowHeights = self.resetRowHeights;\n            self.intf.resize = self.resize;\n            self.intf.selectColumn = self.selectColumn;\n            self.intf.selectRow = self.selectRow;\n            self.intf.selectAll = self.selectAll;\n            self.intf.selectNone = self.selectNone;\n            self.intf.drawChildGrids = self.drawChildGrids;\n            self.intf.assertPxColor = self.assertPxColor;\n            self.intf.clearPxColorAssertions = self.clearPxColorAssertions;\n            self.intf.integerToAlpha = self.integerToAlpha;\n            self.intf.copy = self.copy;\n            self.intf.setStyleProperty = self.setStyleProperty;\n            self.styleKeys = self.defaults.styles.map(function (i) {\n                return i[0];\n            });\n            self.DOMStyles = window.getComputedStyle(document.body, null);\n            Object.keys(self.DOMStyles).concat(Object.keys(self.style)).forEach(function (key) {\n                // unless this line is here, Object.keys() will not work on <instance>.style\n                publicStyleKeyIntf[key] = undefined;\n                Object.defineProperty(publicStyleKeyIntf, key, {\n                    get: function () {\n                        if (self.defaults.styles.indexOf(key) !== -1) {\n                            return self.style[key];\n                        }\n                        return self.canvas.style[key];\n                    },\n                    set: function (value) {\n                        self.setStyleProperty(key, value);\n                    }\n                });\n            });\n            Object.defineProperty(self.intf, 'shadowRoot', {\n                get: function () {\n                    return self.shadowRoot;\n                }\n            });\n            Object.defineProperty(self.intf, 'activeCell', {\n                get: function () {\n                    return self.activeCell;\n                }\n            });\n            Object.defineProperty(self.intf, 'hasFocus', {\n                get: function () {\n                    return self.hasFocus;\n                }\n            });\n            Object.defineProperty(self.intf, 'style', {\n                get: function () {\n                    return publicStyleKeyIntf;\n                },\n                set: function (value) {\n                    Object.keys(value).forEach(function (key) {\n                        if (self.defaults.styles.indexOf(key) === -1) {\n                            self.parentNodeStyle[key] = value;\n                        } else {\n                            self.parseStyleValue(value);\n                            self.style[key] = value[key];\n                        }\n                    });\n                    self.draw(true);\n                    self.dispatchEvent('stylechanged', {name: 'style', value: value});\n                }\n            });\n            Object.defineProperty(self.intf, 'attributes', { value: {}});\n            Object.keys(self.attributes).forEach(function (key) {\n                Object.defineProperty(self.intf.attributes, key, {\n                    get: function () {\n                        return self.attributes[key];\n                    },\n                    set: function (value) {\n                        self.attributes[key] = value;\n                        self.draw(true);\n                        self.dispatchEvent('attributechanged', {name: key, value: value[key]});\n                    }\n                });\n            });\n            self.filters.string = function (value, filterFor) {\n                value = String(value);\n                var filterRegExp,\n                    regEnd = /\\/(i|g|m)*$/,\n                    pattern = regEnd.exec(filterFor),\n                    flags = pattern ? pattern[0].substring(1) : '',\n                    flagLength = flags.length;\n                self.invalidFilterRegEx = undefined;\n                if (filterFor.substring(0, 1) === '/' && pattern) {\n                    try {\n                        filterRegExp = new RegExp(filterFor.substring(1, filterFor.length - (flagLength + 1)), flags);\n                    } catch (e) {\n                        self.invalidFilterRegEx = e;\n                        return;\n                    }\n                    return filterRegExp.test(value);\n                }\n                return value.toString ? value.toString().toLocaleUpperCase()\n                    .indexOf(filterFor.toLocaleUpperCase()) !== -1 : false;\n            };\n            self.filters.number = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                return value === filterFor;\n            };\n            if (self.attributes.name && self.attributes.saveAppearance) {\n                self.storedSettings = localStorage.getItem(self.storageName + '-' + self.attributes.name);\n                if (self.storedSettings) {\n                    try {\n                        self.storedSettings = JSON.parse(self.storedSettings);\n                    } catch (e) {\n                        console.warn('could not read settings from localStore', e);\n                        self.storedSettings = undefined;\n                    }\n                }\n                if (self.storedSettings) {\n                    if (typeof self.storedSettings.sizes === 'object'\n                            && self.storedSettings.sizes !== null) {\n                        self.sizes.rows = self.storedSettings.sizes.rows;\n                        self.sizes.columns = self.storedSettings.sizes.columns;\n                        ['trees', 'columns', 'rows'].forEach(function (i) {\n                            if (!self.sizes[i]) {\n                                self.sizes[i] = {};\n                            }\n                        });\n                    }\n                }\n            }\n            ['formatters', 'filters', 'sorters'].forEach(self.initProp);\n            if (self.args.data) {\n                self.intf.data = self.args.data;\n            }\n            if (!self.data) {\n                self.intf.data = [];\n            }\n            if (self.args.schema) {\n                self.intf.schema = self.args.schema;\n            }\n            if (self.isChildGrid) {\n                requestAnimationFrame(function () { self.resize(true); });\n            } else {\n                self.resize(true);\n            }\n            return self;\n        };\n        /**\n         * Removes focus from the grid.\n         * @memberof canvasDatagrid\n         * @name blur\n         * @method\n         */\n        self.intf.blur = function (e) {\n            self.hasFocus = false;\n        };\n        /**\n         * Focuses on the grid.\n         * @memberof canvasDatagrid\n         * @name focus\n         * @method\n         */\n        self.intf.focus = function () {\n            self.hasFocus = true;\n            self.controlInput.focus();\n        };\n        Object.defineProperty(self.intf, 'height', {\n            get: function () {\n                if (self.shadowRoot) {\n                    return self.shadowRoot.height;\n                }\n                return self.parentNode.height;\n            },\n            set: function (value) {\n                if (self.shadowRoot) {\n                    self.shadowRoot.height = value;\n                } else {\n                    self.parentNode.height = value;\n                }\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'width', {\n            get: function () {\n                if (self.shadowRoot) {\n                    return self.shadowRoot.width;\n                }\n                return self.parentNode.width;\n            },\n            set: function (value) {\n                if (self.shadowRoot) {\n                    self.shadowRoot.width = value;\n                } else {\n                    self.parentNode.width = value;\n                }\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRowHeights', {\n            get: function () {\n                return self.visibleRowHeights;\n            }\n        });\n        Object.defineProperty(self.intf, 'openChildren', {\n            get: function () {\n                return self.openChildren;\n            }\n        });\n        Object.defineProperty(self.intf, 'childGrids', {\n            get: function () {\n                return Object.keys(self.childGrids).map(function (gridId) {\n                    return self.childGrids[gridId];\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'isChildGrid', {\n            get: function () {\n                return self.isChildGrid;\n            }\n        });\n        Object.defineProperty(self.intf, 'parentNode', {\n            get: function () {\n                return self.parentNode;\n            },\n            set: function (value) {\n                if (!self.isChildGrid) {\n                    throw new TypeError('Cannot set property parentNode which has only a getter');\n                }\n                self.parentNode = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetParent', {\n            get: function () {\n                return self.parentNode;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetLeft', {\n            get: function () {\n                return self.parentNode.offsetLeft;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetTop', {\n            get: function () {\n                return self.parentNode.offsetTop;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollHeight', {\n            get: function () {\n                return self.scrollBox.scrollHeight;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollWidth', {\n            get: function () {\n                return self.scrollBox.scrollWidth;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollTop', {\n            get: function () {\n                return self.scrollBox.scrollTop;\n            },\n            set: function (value) {\n                self.scrollBox.scrollTop = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollLeft', {\n            get: function () {\n                return self.scrollBox.scrollLeft;\n            },\n            set: function (value) {\n                self.scrollBox.scrollLeft = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'sizes', {\n            get: function () {\n                return self.sizes;\n            }\n        });\n        Object.defineProperty(self.intf, 'input', {\n            get: function () {\n                return self.input;\n            }\n        });\n        Object.defineProperty(self.intf, 'controlInput', {\n            get: function () {\n                return self.controlInput;\n            }\n        });\n        Object.defineProperty(self.intf, 'currentCell', {\n            get: function () {\n                return self.currentCell;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleCells', {\n            get: function () {\n                return self.visibleCells;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRows', {\n            get: function () {\n                return self.visibleRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'selections', {\n            get: function () {\n                return self.selections;\n            }\n        });\n        Object.defineProperty(self.intf, 'dragMode', {\n            get: function () {\n                return self.dragMode;\n            }\n        });\n        Object.defineProperty(self.intf, 'changes', {\n            get: function () {\n                return self.changes;\n            }\n        });\n        self.intf.formatters = self.formatters;\n        self.normalizeDataset = function (data, callback) {\n            var i, d, max, syncFnInvoked;\n            if (data === null || data === '' || data === undefined) {\n                return callback([]);\n            }\n            if (typeof data === 'string'\n                    || typeof data === 'number'\n                    || typeof data === 'boolean') {\n                data = [{'0': data}];\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if ((!Array.isArray(data[0]) && typeof data[0] === 'object' && data[0] !== null)\n                            || (Array.isArray(data) && data.length === 0)) {\n                return callback(data);\n            }\n            if (typeof data === 'function') {\n                i = data.apply(self.intf, [function (d) {\n                    if (syncFnInvoked) {\n                        console.warn('Detected a callback to the data setter function after the same function already returned a value synchronously.');\n                    }\n                    self.normalizeDataset(d, callback);\n                }]);\n                if (i) {\n                    syncFnInvoked = true;\n                    self.normalizeDataset(i, callback);\n                }\n                return;\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if (Array.isArray(data)) {\n                if (!Array.isArray(data[0])) {\n                    //array of something?  throw it all into 1 row!\n                    data = [data];\n                }\n                // find the longest length\n                max = 0;\n                d = [];\n                data.forEach(function (row) {\n                    max = Math.max(max, row.length);\n                });\n                // map against length indexes\n                data.forEach(function (row, index) {\n                    var x;\n                    d[index] = {};\n                    for (x = 0; x < max; x += 1) {\n                        d[index][x] = row[x];\n                    }\n                });\n                return callback(d);\n            }\n            throw new Error('Unsupported data type.  Must be an array of arrays or an array of objects, function or string.');\n        };\n        self.eventNames.forEach(function (eventName) {\n            Object.defineProperty(self.intf, 'on' + eventName, {\n                get: function () {\n                    return self.componentL1Events[eventName];\n                },\n                set: function (value) {\n                    self.events[eventName] = [];\n                    self.componentL1Events[eventName] = value;\n                    if (!value) { return; }\n                    self.addEventListener(eventName, value);\n                }\n            });\n        });\n        Object.defineProperty(self.intf, 'frozenRow', {\n            get: function () {\n                return self.frozenRow;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.visibleRows.length > val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible rows.');\n                }\n                self.frozenRow = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'frozenColumn', {\n            get: function () {\n                return self.frozenColumn;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.getVisibleSchema().length > val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible columns.');\n                }\n                self.frozenColumn = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollIndexRect', {\n            get: function () {\n                return {\n                    top: self.scrollIndexTop,\n                    right: self.scrollIndexRight,\n                    bottom: self.scrollIndexBottom,\n                    left: self.scrollIndexLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollPixelRect', {\n            get: function () {\n                return {\n                    top: self.scrollPixelTop,\n                    right: self.scrollPixelRight,\n                    bottom: self.scrollPixelBottom,\n                    left: self.scrollPixelLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'selectionBounds', {\n            get: function () {\n                return self.getSelectionBounds();\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedRows', {\n            get: function () {\n                return self.getSelectedData(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedCells', {\n            get: function () {\n                return self.getSelectedData();\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleSchema', {\n            get: function () {\n                return self.getVisibleSchema().map(function eachDataRow(col) {\n                    return col;\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'ctx', {\n            get: function () {\n                return self.ctx;\n            }\n        });\n        Object.defineProperty(self.intf, 'schema', {\n            get: function schemaGetter() {\n                return self.getSchema();\n            },\n            set: function schemaSetter(value) {\n                if (!Array.isArray(value) || typeof value[0] !== 'object') {\n                    throw new Error('Schema must be an array of objects.');\n                }\n                if (value[0].name === undefined) {\n                    throw new Error('Expected schema to contain an object with at least a name property.');\n                }\n                self.schema = value.map(function eachSchemaColumn(column, index) {\n                    column.width = column.width || self.style.cellWidth;\n                    column[self.uniqueId] = self.getSchemaNameHash(column.name);\n                    column.filter = column.filter || self.filter(column.type);\n                    column.type = column.type || 'string';\n                    column.index = index;\n                    column.columnIndex = index;\n                    column.rowIndex = -1;\n                    return column;\n                });\n                self.tempSchema = undefined;\n                self.createNewRowData();\n                self.createColumnOrders();\n                self.tryLoadStoredOrders();\n                self.resize(true);\n                self.dispatchEvent('schemachanged', {schema: self.schema});\n            }\n        });\n        Object.defineProperty(self.intf, 'data', {\n            get: function dataGetter() {\n                return self.data.map(function (row) {\n                    delete row[self.uniqueId];\n                    return row;\n                });\n            },\n            set: function dataSetter(value) {\n                self.normalizeDataset(value, function (d) {\n                    self.originalData = d.map(function eachDataRow(row) {\n                        row[self.uniqueId] = self.uId;\n                        self.uId += 1;\n                        return row;\n                    });\n                    self.changes = [];\n                    //TODO apply filter to incoming dataset\n                    self.data = self.originalData;\n                    if (!self.schema) {\n                        self.tempSchema = self.getSchemaFromData();\n                    }\n                    if (!self.schema && self.data.length === 0) {\n                        self.tempSchema = [{name: ''}];\n                        self.tempSchema[0][self.uniqueId] = self.getSchemaNameHash('');\n                    }\n                    if (self.tempSchema && !self.schema) {\n                        self.createColumnOrders();\n                        self.tryLoadStoredOrders();\n                        self.dispatchEvent('schemachanged', {schema: self.tempSchema});\n                    }\n                    self.createNewRowData();\n                    if (self.attributes.autoResizeColumns && self.data.length > 0\n                            && self.storedSettings === undefined) {\n                        self.autosize();\n                    }\n                    self.fitColumnToValues('cornerCell', true);\n                    self.resize(true);\n                    self.createRowOrders();\n                    self.tryLoadStoredOrders();\n                    self.dispatchEvent('datachanged', {data: self.data});\n                });\n            }\n        });\n        self.initScrollBox = function () {\n            var sHeight = 0,\n                sWidth = 0,\n                scrollTop = 0,\n                scrollLeft = 0,\n                scrollHeight = 0,\n                scrollWidth = 0,\n                scrollBoxHeight = 20,\n                scrollBoxWidth = 20;\n            function setScrollTop(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollTop value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollHeight) {\n                    value = scrollHeight;\n                }\n                if (scrollHeight < 0) {\n                    value = 0;\n                }\n                scrollTop = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            function setScrollLeft(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollLeft value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollWidth) {\n                    value = scrollWidth;\n                }\n                if (scrollWidth < 0) {\n                    value = 0;\n                }\n                scrollLeft = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            self.scrollBox.toString = function () {\n                return '{\"width\": ' + scrollWidth\n                    + ', \"height\": ' + scrollHeight\n                    + ', \"left\": ' + scrollLeft\n                    + ', \"top\": ' + scrollTop + '}';\n            };\n            self.scrollBox.scrollTo = function (x, y, supressDrawEvent) {\n                setScrollLeft(x, true);\n                setScrollTop(y, supressDrawEvent);\n            };\n            Object.defineProperty(self.scrollBox, 'scrollBoxHeight', {\n                get: function () {\n                    return scrollBoxHeight;\n                },\n                set: function (value) {\n                    scrollBoxHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollBoxWidth', {\n                get: function () {\n                    return scrollBoxWidth;\n                },\n                set: function (value) {\n                    scrollBoxWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'height', {\n                get: function () {\n                    return sHeight;\n                },\n                set: function (value) {\n                    if (scrollHeight < value) {\n                        scrollTop = 0;\n                    }\n                    sHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'width', {\n                get: function () {\n                    return sWidth;\n                },\n                set: function (value) {\n                    sWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollTop', {\n                get: function () {\n                    return scrollTop;\n                },\n                set: setScrollTop\n            });\n            Object.defineProperty(self.scrollBox, 'scrollLeft', {\n                get: function () {\n                    return scrollLeft;\n                },\n                set: setScrollLeft\n            });\n            Object.defineProperty(self.scrollBox, 'scrollHeight', {\n                get: function () {\n                    return scrollHeight;\n                },\n                set: function (value) {\n                    if (scrollTop > value) {\n                        scrollTop = Math.max(value, 0);\n                    }\n                    if (scrollHeight < sHeight) {\n                        scrollTop = 0;\n                    }\n                    scrollHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollWidth', {\n                get: function () {\n                    return scrollWidth;\n                },\n                set: function (value) {\n                    if (scrollLeft > value) {\n                        scrollLeft = Math.max(value, 0);\n                    }\n                    scrollWidth = value;\n                }\n            });\n        };\n        return;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false, Event: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var zIndexTop = 9000, hoverScrollTimeout, autoCompleteContext;\n        function applyContextItemStyle(contextItemContainer) {\n            self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item' + (self.mobile ? '-mobile' : ''));\n            contextItemContainer.addEventListener('mouseover', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n            });\n            contextItemContainer.addEventListener('mouseout', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n            });\n        }\n        function createContextMenu(ev, pos, items, parentContextMenu) {\n            var container = document.createElement('div'),\n                upArrow = document.createElement('div'),\n                downArrow = document.createElement('div'),\n                children = [],\n                selectedIndex = -1,\n                intf = {},\n                rect;\n            if (!Array.isArray(items)) { throw new Error('createContextMenu expects an array.'); }\n            function createItems() {\n                items.forEach(function (item) {\n                    var contextItemContainer = document.createElement('div'),\n                        childMenuArrow;\n                    function removeChildContext(e) {\n                        if (e.relatedTarget === container\n                                || item.contextMenu.container === e.relatedTarget\n                                || childMenuArrow === e.relatedTarget\n                                || (contextItemContainer === e.relatedTarget)\n                                || item.contextMenu.container.contains(e.relatedTarget)\n                                ) { return; }\n                        item.contextMenu.dispose();\n                        children.splice(children.indexOf(item.contextMenu), 1);\n                        item.contextMenu = undefined;\n                        contextItemContainer.removeEventListener('mouseout', removeChildContext);\n                        container.removeEventListener('mouseout', removeChildContext);\n                        contextItemContainer.setAttribute('contextOpen', '0');\n                        contextItemContainer.setAttribute('opening', '0');\n                    }\n                    function contextAddCallback(items) {\n                        // check yet again if the user hasn't moved off\n                        if (contextItemContainer.getAttribute('opening') !== '1' ||\n                                contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        var cPos = contextItemContainer.getBoundingClientRect();\n                        cPos = {\n                            left: cPos.left + self.style.childContextMenuMarginLeft + container.offsetWidth,\n                            top: cPos.top + self.style.childContextMenuMarginTop,\n                            bottom: cPos.bottom,\n                            right: cPos.right\n                        };\n                        item.contextMenu = createContextMenu(ev, cPos, items, intf);\n                        contextItemContainer.setAttribute('contextOpen', '1');\n                        contextItemContainer.addEventListener('mouseout', removeChildContext);\n                        container.addEventListener('mouseout', removeChildContext);\n                        children.push(item.contextMenu);\n                    }\n                    function createChildContext() {\n                        var i;\n                        if (contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        contextItemContainer.setAttribute('opening', '1');\n                        if (typeof item.items === 'function') {\n                            i  = item.items.apply(intf, [function (items) {\n                                contextAddCallback(items);\n                            }]);\n                            if (i !== undefined && Array.isArray(i)) {\n                                contextAddCallback(i);\n                            }\n                            return;\n                        }\n                        contextAddCallback(item.items);\n                    }\n                    function addItem(item) {\n                        function addContent(content) {\n                            if (content === null) { return; }\n                            if (typeof content === 'function') {\n                                return addContent(content(ev));\n                            }\n                            if (typeof content === 'object') {\n                                contextItemContainer.appendChild(content);\n                                return;\n                            }\n                            applyContextItemStyle(contextItemContainer);\n                            contextItemContainer.innerHTML = content;\n                            return;\n                        }\n                        addContent(item.title);\n                        item.contextItemContainer = contextItemContainer;\n                        if ((item.items && item.items.length > 0) || typeof item.items === 'function') {\n                            childMenuArrow = document.createElement('div');\n                            self.createInlineStyle(childMenuArrow, 'canvas-datagrid-context-child-arrow');\n                            childMenuArrow.innerHTML = self.style.childContextMenuArrowHTML;\n                            contextItemContainer.appendChild(childMenuArrow);\n                            contextItemContainer.addEventListener('mouseover', createChildContext);\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                contextItemContainer.setAttribute('opening', '0');\n                            });\n                        }\n                        if (item.click) {\n                            contextItemContainer.addEventListener('click', function (ev) {\n                                item.click.apply(self, [ev]);\n                            });\n                        }\n                    }\n                    addItem(item);\n                    container.appendChild(contextItemContainer);\n                });\n            }\n            function clickIndex(idx) {\n                items[idx].contextItemContainer.dispatchEvent(new Event('click'));\n            }\n            function checkArrowVisibility() {\n                if (container.scrollTop > 0) {\n                    self.parentDOMNode.appendChild(upArrow);\n                } else if (upArrow.parentNode) {\n                    upArrow.parentNode.removeChild(upArrow);\n                }\n                if (container.scrollTop >= container.scrollHeight - container.offsetHeight && downArrow.parentNode) {\n                    downArrow.parentNode.removeChild(downArrow);\n                } else if (container.scrollHeight - container.offsetHeight > 0\n                        && !(container.scrollTop >= container.scrollHeight - container.offsetHeight)) {\n                    self.parentDOMNode.appendChild(downArrow);\n                }\n            }\n            function startHoverScroll(type) {\n                return function t() {\n                    var a = self.attributes.contextHoverScrollAmount;\n                    if (type === 'up' && container.scrollTop === 0) { return; }\n                    if (type === 'down' && container.scrollTop === container.scrollHeight) { return; }\n                    container.scrollTop += (type === 'up' ? -a : a);\n                    hoverScrollTimeout = setTimeout(t, self.attributes.contextHoverScrollRateMs, type);\n                };\n            }\n            function endHoverScroll(type) {\n                return function () {\n                    clearTimeout(hoverScrollTimeout);\n                };\n            }\n            function init() {\n                var loc = {},\n                    s = self.scrollOffset(self.canvas);\n                createItems();\n                self.createInlineStyle(container, 'canvas-datagrid-context-menu' + (self.mobile ? '-mobile' : ''));\n                loc.x = pos.left - s.left;\n                loc.y = pos.top - s.top;\n                loc.height = 0;\n                zIndexTop += 1;\n                container.style.position = 'absolute';\n                upArrow.style.color = self.style.contextMenuArrowColor;\n                downArrow.style.color = self.style.contextMenuArrowColor;\n                [upArrow, downArrow].forEach(function (el) {\n                    el.style.textAlign = 'center';\n                    el.style.position = 'absolute';\n                    el.style.zIndex = zIndexTop + 1;\n                });\n                container.style.zIndex = zIndexTop;\n                if (parentContextMenu && parentContextMenu.inputDropdown) {\n                    container.style.maxHeight = window.innerHeight - loc.y - self.style.autocompleteBottomMargin + 'px';\n                    container.style.minWidth = pos.width + 'px';\n                    loc.y += pos.height;\n                }\n                if (self.mobile) {\n                    container.style.width = pos.width + 'px';\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                container.addEventListener('scroll', checkArrowVisibility);\n                container.addEventListener('wheel', function (e) {\n                    if (self.hasFocus) {\n                        container.scrollTop += e.deltaY;\n                        container.scrollLeft += e.deltaX;\n                    }\n                    checkArrowVisibility();\n                });\n                upArrow.innerHTML = self.style.contextMenuArrowUpHTML;\n                downArrow.innerHTML = self.style.contextMenuArrowDownHTML;\n                container.appendChild(upArrow);\n                document.body.appendChild(downArrow);\n                document.body.appendChild(container);\n                rect = container.getBoundingClientRect();\n                if (rect.bottom > window.innerHeight && !(parentContextMenu && parentContextMenu.inputDropdown)) {\n                    loc.y = window.innerHeight - container.offsetHeight;\n                    if (loc.y < 0) { loc.y = 0; }\n                    if (container.offsetHeight > window.innerHeight - self.style.contextMenuWindowMargin) {\n                        container.style.height = window.innerHeight - self.style.contextMenuWindowMargin + 'px';\n                        loc.y += self.style.contextMenuWindowMargin * 0.5;\n                    }\n                }\n                if (rect.right > window.innerWidth) {\n                    if (parentContextMenu && parentContextMenu.container) {\n                        loc.x = parentContextMenu.container.offsetLeft - container.offsetWidth;\n                    } else {\n                        loc.x = window.innerWidth - container.offsetWidth;\n                    }\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                rect = container.getBoundingClientRect();\n                upArrow.style.top = rect.top + 'px';\n                downArrow.style.top = rect.top + rect.height - downArrow.offsetHeight + 'px';\n                upArrow.style.left = rect.left + 'px';\n                downArrow.style.left = rect.left + 'px';\n                downArrow.style.width = container.offsetWidth + 'px';\n                upArrow.style.width = container.offsetWidth + 'px';\n                downArrow.addEventListener('mouseover', startHoverScroll('down'));\n                downArrow.addEventListener('mouseout', endHoverScroll('down'));\n                upArrow.addEventListener('mouseover', startHoverScroll('up'));\n                upArrow.addEventListener('mouseout', endHoverScroll('up'));\n                checkArrowVisibility();\n            }\n            intf.parentGrid = self.intf;\n            intf.parentContextMenu = parentContextMenu;\n            intf.container = container;\n            init();\n            intf.clickIndex = clickIndex;\n            intf.rect = rect;\n            intf.items = items;\n            intf.upArrow = upArrow;\n            intf.downArrow = downArrow;\n            intf.dispose = function () {\n                clearTimeout(hoverScrollTimeout);\n                children.forEach(function (c) {\n                    c.dispose();\n                });\n                [downArrow, upArrow, container].forEach(function (el) {\n                    if (el.parentNode) { el.parentNode.removeChild(el); }\n                });\n            };\n            Object.defineProperty(intf, 'selectedIndex', {\n                get: function () {\n                    return selectedIndex;\n                },\n                set: function (value) {\n                    if (typeof value !== 'number' || isNaN(value || !isFinite(value))) {\n                        throw new Error('Context menu selected index must be a sane number.');\n                    }\n                    selectedIndex = value;\n                    if (selectedIndex > items.length - 1) {\n                        selectedIndex = items.length - 1;\n                    }\n                    if (selectedIndex < 0) {\n                        selectedIndex = 0;\n                    }\n                    items.forEach(function (item, index) {\n                        if (index === selectedIndex) {\n                            return self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                        }\n                        self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item');\n                    });\n                }\n            });\n            return intf;\n        }\n        function createFilterContextMenuItems(e) {\n            var filterContainer = document.createElement('div'),\n                filterLabel = document.createElement('div'),\n                filterAutoCompleteButton = document.createElement('button'),\n                filterInput = document.createElement('input'),\n                n = e.cell && e.cell.header ? e.cell.header.title || e.cell.header.name : '',\n                autoCompleteItems,\n                iRect;\n            function checkRegExpErrorState() {\n                filterInput.style.background = self.style.contextFilterInputBackground;\n                filterInput.style.color = self.style.contextFilterInputColor;\n                if (self.invalidFilterRegEx) {\n                    filterInput.style.background = self.style.contextFilterInvalidRegExpBackground;\n                    filterInput.style.color = self.style.contextFilterInvalidRegExpColor;\n                }\n            }\n            function fillAutoComplete() {\n                var count = 0;\n                autoCompleteItems = {};\n                self.data.forEach(function (row) {\n                    var value = row[e.cell.header.name];\n                    if (autoCompleteItems[value] || count > self.attributes.maxAutoCompleteItems) { return; }\n                    count += 1;\n                    autoCompleteItems[value] = {\n                        title: self.formatters[e.cell.header.type || 'string']({ cell: { value: value }}),\n                        click: function (e) {\n                            filterInput.value = value;\n                            e.stopPropagation();\n                            filterInput.dispatchEvent(new Event('keyup'));\n                            self.disposeAutocomplete();\n                            return;\n                        }\n                    };\n                });\n                autoCompleteItems = Object.keys(autoCompleteItems).map(function (key) {\n                    return autoCompleteItems[key];\n                });\n            }\n            function createAutoCompleteContext(ev) {\n                if (ev && [40, 38, 13, 9].indexOf(ev.keyCode) !== -1) { return; }\n                fillAutoComplete();\n                iRect = filterInput.getBoundingClientRect();\n                if (autoCompleteContext) {\n                    autoCompleteContext.dispose();\n                    autoCompleteContext = undefined;\n                }\n                autoCompleteContext = createContextMenu(e, {\n                    left: iRect.left,\n                    top: iRect.top,\n                    right: iRect.right,\n                    bottom: iRect.bottom,\n                    height: iRect.height,\n                    width: iRect.width\n                }, autoCompleteItems, {inputDropdown: true});\n                autoCompleteContext.selectedIndex = 0;\n            }\n            self.createInlineStyle(filterLabel, 'canvas-datagrid-context-menu-label');\n            self.createInlineStyle(filterAutoCompleteButton, 'canvas-datagrid-context-menu-filter-button');\n            self.createInlineStyle(filterInput, 'canvas-datagrid-context-menu-filter-input');\n            checkRegExpErrorState();\n            filterInput.onclick = self.disposeAutocomplete;\n            filterInput.addEventListener('keydown', function (e) {\n                //down\n                if (e.keyCode === 40) {\n                    autoCompleteContext.selectedIndex += 1;\n                }\n                //up\n                if (e.keyCode === 38) {\n                    autoCompleteContext.selectedIndex -= 1;\n                }\n                //enter\n                if (e.keyCode === 13) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    self.disposeContextMenu();\n                }\n                //tab\n                if (e.keyCode === 9) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    e.preventDefault();\n                }\n                //esc\n                if (e.keyCode === 27) {\n                    self.disposeContextMenu();\n                }\n            });\n            filterInput.addEventListener('keyup', function () {\n                self.setFilter(e.cell.header.name, filterInput.value);\n            });\n            filterInput.addEventListener('keyup', createAutoCompleteContext);\n            ['focus', 'blur', 'keydown', 'keyup', 'change'].forEach(function (en) {\n                filterInput.addEventListener(en, checkRegExpErrorState);\n            });\n            filterInput.value = e.cell.header ? self.columnFilters[e.cell.header.name] || '' : '';\n            filterLabel.innerHTML = self.attributes.filterOptionText.replace(/%s/g, n);\n            filterAutoCompleteButton.onclick = function () {\n                if (autoCompleteContext) {\n                    return self.disposeAutocomplete();\n                }\n                createAutoCompleteContext();\n            };\n            filterAutoCompleteButton.innerHTML = self.style.contextFilterButtonHTML;\n            filterContainer.addEventListener('click', function (e) {\n                return e.stopPropagation();\n            });\n            filterContainer.appendChild(filterLabel);\n            filterContainer.appendChild(filterInput);\n            filterContainer.appendChild(filterAutoCompleteButton);\n            e.items.push({\n                title: filterContainer\n            });\n            if (Object.keys(self.columnFilters).length) {\n                Object.keys(self.columnFilters).forEach(function (cf) {\n                    var h = self.getHeaderByName(cf);\n                    e.items.push({\n                        title: self.attributes.removeFilterOptionText.replace(/%s/g, h.title || h.name),\n                        click: function removeFilterClick(e) {\n                            e.preventDefault();\n                            self.setFilter(cf, '');\n                            self.controlInput.focus();\n                        }\n                    });\n                });\n            }\n        }\n        function addDefaultContextMenuItem(e) {\n            var isNormalCell = !(e.cell.isBackground || e.cell.isHeaderCellCap\n                    || e.cell.isScrollBar || e.cell.isCorner || e.cell.isRowHeader)\n                    && e.cell.header;\n            if (self.attributes.showFilter && isNormalCell) {\n                createFilterContextMenuItems(e);\n            }\n            if (self.attributes.showCopy\n                    && self.selections.reduce(function (p, r) {\n                        return p + r.length;\n                    }, 0) > 0) {\n                e.items.push({\n                    title: self.attributes.copyText,\n                    click: function () {\n                        document.execCommand('copy');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.showPaste && self.clipBoardData) {\n                e.items.push({\n                    title: self.attributes.pasteText,\n                    click: function () {\n                        self.paste(self.clipBoardData, e.cell.columnIndex, e.cell.rowIndex);\n                        self.draw();\n                    }\n                });\n            }\n            if (self.attributes.showColumnSelector) {\n                e.items.push({\n                    title: self.attributes.columnSelectorText,\n                    items: function () {\n                        var d = [];\n                        self.getSchema().forEach(function (column) {\n                            function toggleColumnVisibility(e) {\n                                column.hidden = !column.hidden;\n                                e.preventDefault();\n                                self.stopPropagation(e);\n                                self.disposeContextMenu();\n                                self.draw();\n                            }\n                            var el = document.createElement('div');\n                            applyContextItemStyle(el);\n                            el.addEventListener('touchstart', toggleColumnVisibility);\n                            el.addEventListener('click', toggleColumnVisibility);\n                            el.innerHTML = (column.hidden ? self.attributes.columnSelectorHiddenText\n                                    : self.attributes.columnSelectorVisibleText)\n                                    + (column.title || column.name);\n                            d.push({\n                                title: el\n                            });\n                        });\n                        return d;\n                    }\n                });\n                if (e.cell && e.cell.header) {\n                    e.items.push({\n                        title: self.attributes.hideColumnText\n                            .replace(/%s/ig, e.cell.header.title || e.cell.header.name),\n                        click: function (ev) {\n                            e.cell.header.hidden = true;\n                            ev.preventDefault();\n                            self.stopPropagation(ev);\n                            self.disposeContextMenu();\n                            setTimeout(self.draw, 10);\n                        }\n                    });\n                }\n            }\n            if (self.attributes.saveAppearance && self.attributes.showClearSettingsOption\n                    && (Object.keys(self.sizes.rows).length > 0\n                        || Object.keys(self.sizes.columns).length > 0)) {\n                e.items.push({\n                    title: self.attributes.clearSettingsOptionText,\n                    click: function (e) {\n                        e.preventDefault();\n                        self.sizes.rows = {};\n                        self.sizes.columns = {};\n                        self.createRowOrders();\n                        self.createColumnOrders();\n                        self.storedSettings = undefined;\n                        self.dispatchEvent('resizecolumn', {columnWidth: self.style.cellWidth});\n                        self.dispatchEvent('resizerow', {cellHeight: self.style.cellHeight});\n                        self.setStorageData();\n                        self.resize(true);\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.allowSorting && self.attributes.showOrderByOption && isNormalCell) {\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextAsc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'asc');\n                        self.controlInput.focus();\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextDesc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'desc');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n        }\n        self.disposeAutocomplete = function () {\n            if (autoCompleteContext) {\n                autoCompleteContext.dispose();\n                autoCompleteContext = undefined;\n            }\n        };\n        self.disposeContextMenu = function () {\n            document.removeEventListener('click', self.disposeContextMenu);\n            zIndexTop = 9000;\n            self.disposeAutocomplete();\n            if (self.contextMenu) {\n                self.contextMenu.dispose();\n            }\n            self.contextMenu = undefined;\n        };\n        self.contextmenuEvent = function (e, overridePos) {\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            function createDiposeEvent() {\n                requestAnimationFrame(function () {\n                    document.addEventListener('click', self.disposeContextMenu);\n                    document.removeEventListener('mouseup', createDiposeEvent);\n                });\n            }\n            var contextPosition,\n                items = [],\n                pos = overridePos || self.getLayerPos(e),\n                ev = {\n                    NativeEvent: e,\n                    cell: self.getCellAt(pos.x, pos.y),\n                    items: items\n                },\n                st,\n                sl;\n            if (!ev.cell.isGrid) {\n                addDefaultContextMenuItem(ev);\n            }\n            if (document.scrollingElement) {\n                sl = document.scrollingElement.scrollLeft;\n                st = document.scrollingElement.scrollTop;\n            }\n            if (self.dispatchEvent('contextmenu', ev)) {\n                return;\n            }\n            if (!ev.cell.isGrid) {\n                if (self.contextMenu) {\n                    self.disposeContextMenu();\n                }\n                contextPosition = {\n                    left: pos.x + sl + pos.rect.left + self.style.contextMenuMarginLeft + self.canvasOffsetLeft,\n                    top: pos.y + st + pos.rect.top + self.style.contextMenuMarginTop + self.canvasOffsetTop,\n                    right: ev.cell.width + ev.cell.x + pos.rect.left,\n                    bottom: ev.cell.height + ev.cell.y + pos.rect.top,\n                    height: ev.cell.height,\n                    width: ev.cell.width\n                };\n                if (self.mobile) {\n                    contextPosition.left = self.style.mobileContextMenuMargin + 'px';\n                    contextPosition.width = self.width - (self.style.mobileContextMenuMargin * 2) + 'px';\n                }\n                self.contextMenu = createContextMenu(ev, contextPosition, items);\n                document.addEventListener('mouseup', createDiposeEvent);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        self.getClippingRect = function (ele) {\n            var boundingRect = self.position(self.parentNode),\n                eleRect = self.position(ele),\n                s = self.scrollOffset(self.canvas),\n                clipRect = {\n                    x: 0,\n                    y: 0,\n                    h: 0,\n                    w: 0\n                },\n                parentRect = {\n                    x: -Infinity,\n                    y: -Infinity,\n                    h: Infinity,\n                    w: Infinity\n                },\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth();\n            boundingRect.top -= s.top;\n            boundingRect.left -= s.left;\n            eleRect.top -= s.top;\n            eleRect.left -= s.left;\n            clipRect.h = boundingRect.top + boundingRect.height - ele.offsetTop - self.style.scrollBarWidth;\n            clipRect.w = boundingRect.left + boundingRect.width - ele.offsetLeft - self.style.scrollBarWidth;\n            clipRect.x = boundingRect.left + (eleRect.left * -1) + rowHeaderCellWidth;\n            clipRect.y = boundingRect.top + (eleRect.top * -1) + columnHeaderCellHeight;\n            return {\n                x: clipRect.x > parentRect.x ? clipRect.x : parentRect.x,\n                y: clipRect.y > parentRect.y ? clipRect.y : parentRect.y,\n                h: clipRect.h < parentRect.h ? clipRect.h : parentRect.h,\n                w: clipRect.w < parentRect.w ? clipRect.w : parentRect.w\n            };\n        };\n        self.clipElement = function (ele) {\n            var clipRect = self.getClippingRect(ele);\n            if (clipRect.w < 0) { clipRect.w = 0; }\n            if (clipRect.h < 0) { clipRect.h = 0; }\n            ele.style.clip = 'rect('\n                + clipRect.y + 'px,'\n                + clipRect.w + 'px,'\n                + clipRect.h + 'px,'\n                + clipRect.x + 'px'\n                + ')';\n            // INFO https://developer.mozilla.org/en-US/docs/Web/CSS/clip\n            // clip has been \"deprecated\" for clipPath.  Of course nothing but chrome\n            // supports clip path, so we'll keep using clip until someday clipPath becomes\n            // more widely support.  The code below works correctly, but setting clipPath and clip\n            // at the same time has undesirable results.\n            // ele.style.clipPath = 'polygon('\n            //     + clipRect.x + 'px ' + clipRect.y + 'px,'\n            //     + clipRect.x + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.y + 'px'\n            //     + ')';\n        };\n        self.scrollOffset = function (e) {\n            var x = 0, y = 0;\n            while (e.parentNode && e.nodeName !== 'CANVAS-DATAGRID') {\n                if (e.nodeType !== 'canvas-datagrid-tree'\n                        && e.nodeType !== 'canvas-datagrid-cell') {\n                    x -= e.scrollLeft;\n                    y -= e.scrollTop;\n                }\n                e = e.parentNode;\n            }\n            return {left: x, top: y};\n        };\n        self.resizeEditInput = function () {\n            if (self.input) {\n                var pos = self.canvas.getBoundingClientRect(),\n                    s = self.scrollOffset(self.canvas),\n                    bm = self.style.borderCollapse === 'collapse' ? 1 : 2,\n                    borderWidth = (self.style.cellBorderWidth * bm),\n                    cell = self.getVisibleCellByIndex(self.input.editCell.columnIndex, self.input.editCell.rowIndex)\n                        || {x: -100, y: -100, height: 0, width: 0};\n                if (self.mobile) {\n                    self.input.style.left = '0';\n                    self.input.style.top = (self.height - self.style.mobileEditInputHeight) - borderWidth - 1 + 'px';\n                    self.input.style.height = self.style.mobileEditInputHeight + 'px';\n                    self.input.style.width = self.width - borderWidth - 1 + 'px';\n                    return;\n                }\n                self.input.style.left = pos.left + cell.x + self.canvasOffsetLeft - s.left + 'px';\n                self.input.style.top = pos.top + cell.y - borderWidth + self.canvasOffsetTop - s.top + 'px';\n                self.input.style.height = cell.height - borderWidth + 'px';\n                self.input.style.width = cell.width - self.style.cellPaddingLeft + 'px';\n                self.clipElement(self.input);\n            }\n        };\n        self.position = function (e, ignoreScrollOffset) {\n            var x = 0, y = 0, s = e, h, w;\n            while (e.offsetParent && e.nodeName !== 'CANVAS-DATAGRID') {\n                x += e.offsetLeft;\n                y += e.offsetTop;\n                h = e.offsetHeight;\n                w = e.offsetWidth;\n                e = e.offsetParent;\n            }\n            if (ignoreScrollOffset) {\n                return {left: x, top: y, height: h, width: w};\n            }\n            e = s;\n            s = self.scrollOffset(e);\n            return { left: x + s.left, top: y + s.top, height: h, width: w };\n        };\n        self.getLayerPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.clientX - rect.left,\n                    y: e.clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        /**\n         * Ends editing, optionally aborting the edit.\n         * @memberof canvasDatagrid\n         * @name endEdit\n         * @method\n         * @param {boolean} abort When true, abort the edit.\n         */\n        self.endEdit = function (abort) {\n            var cell = self.input.editCell,\n                y = cell.rowIndex;\n            function abortEdit() {\n                abort = true;\n            }\n            if (self.dispatchEvent('beforeendedit', {\n                    cell: cell,\n                    newValue: self.input.value,\n                    oldValue: cell.value,\n                    abort: abortEdit,\n                    input: self.input\n                })) { return false; }\n            if (self.input.value !== cell.value && !abort) {\n                self.changes[y] = self.changes[y] || {};\n                self.changes[y][cell.header.name] = self.input.value;\n                cell.data[cell.header.name] = self.input.value;\n                if (y === self.data.length) {\n                    if (self.dispatchEvent('newrow', {\n                            value: self.input.value,\n                            defaultValue: cell.value,\n                            aborted: abort,\n                            cell: cell,\n                            input: self.input\n                        })) { return false; }\n                    self.uId += 1;\n                    self.addRow(cell.data);\n                    self.createNewRowData();\n                }\n                self.draw(true);\n            }\n            document.body.removeChild(self.input);\n            self.controlInput.focus();\n            self.dispatchEvent('endedit', {\n                cell: cell,\n                value: self.input.value,\n                aborted: abort,\n                input: self.input\n            });\n            self.input = undefined;\n            return true;\n        };\n        /**\n         * Begins editing at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name beginEditAt\n         * @method\n         * @param {number} x The column index of the cell to edit.\n         * @param {number} y The row index of the cell to edit.\n         */\n        self.beginEditAt = function (x, y) {\n            if (!self.attributes.editable) { return; }\n            if (self.input) {\n                self.endEdit();\n            }\n            var cell = self.getVisibleCellByIndex(x, y),\n                s = self.getVisibleSchema(),\n                enumItems,\n                enu,\n                option,\n                valueInEnum;\n            if (!(cell && cell.header)) { return; }\n            //HACK for IE10, does not like literal enum\n            enu = cell.header['enum'];\n            if (self.dispatchEvent('beforebeginedit', {cell: cell})) { return false; }\n            self.scrollIntoView(x, y);\n            self.setActiveCell(x, y);\n            if (enu) {\n                self.input = document.createElement('select');\n            } else {\n                self.input = document.createElement(self.attributes.multiLine\n                    ? 'textarea' : 'input');\n            }\n            cell = self.getVisibleCellByIndex(x, y);\n            //HACK on mobile devices sometimes edit can begin without the cell being in view, I don't know how.\n            if (!cell) { return; }\n            if (enu) {\n                // add enums\n                if (typeof enu === 'function') {\n                    enumItems = enu.apply(self.intf, [{cell: cell}]);\n                } else if (Array.isArray(enu)) {\n                    enumItems = enu;\n                }\n                enumItems.forEach(function (e) {\n                    var i = document.createElement('option'),\n                        val,\n                        title;\n                    if (Array.isArray(e)) {\n                        val = e[0];\n                        title = e[1];\n                    } else {\n                        val = e;\n                        title = e;\n                    }\n                    if (val === cell.value) { valueInEnum = true; }\n                    i.value = val;\n                    i.innerHTML = title;\n                    self.input.appendChild(i);\n                });\n                if (!valueInEnum) {\n                    option = document.createElement('option');\n                    option.value = cell.value;\n                    option.innerHTML = cell.value;\n                    self.input.appendChild(option);\n                }\n                self.input.addEventListener('change', function () {\n                    self.endEdit();\n                    self.draw(true);\n                });\n            }\n            document.body.appendChild(self.input);\n            self.createInlineStyle(self.input, self.mobile ? 'canvas-datagrid-edit-mobile-input' : 'canvas-datagrid-edit-input');\n            self.input.style.position = 'absolute';\n            self.input.editCell = cell;\n            self.resizeEditInput();\n            self.input.style.zIndex = '2';\n            self.input.style.fontSize = (parseInt(self.style.editCellFontSize, 10) * self.scale) + 'px';\n            self.input.value = cell.value;\n            self.input.focus();\n            self.input.addEventListener('click', self.stopPropagation);\n            self.input.addEventListener('dblclick', self.stopPropagation);\n            self.input.addEventListener('mouseup', self.stopPropagation);\n            self.input.addEventListener('mousedown', self.stopPropagation);\n            self.input.addEventListener('keydown', function (e) {\n                var nx = cell.columnIndex,\n                    ny = cell.rowIndex;\n                // esc\n                if (e.keyCode === 27) {\n                    self.endEdit(true);\n                    self.draw(true);\n                // enter\n                } else if (e.keyCode === 13\n                        && (!self.attributes.multiLine\n                            || (self.attributes.multiLine && e.shiftKey))) {\n                    self.endEdit();\n                    self.draw(true);\n                } else if (e.keyCode === 9) {\n                    e.preventDefault();\n                    if (!self.endEdit()) {\n                        return;\n                    }\n                    if (e.shiftKey) {\n                        nx -= 1;\n                    } else {\n                        nx += 1;\n                    }\n                    if (nx < 0) {\n                        nx = s.length - 1;\n                        ny -= 1;\n                    }\n                    if (nx > s.length - 1) {\n                        nx = 0;\n                        ny += 1;\n                    }\n                    if (ny < 0) {\n                        ny = self.data.length - 1;\n                    }\n                    if (ny > self.data.length - 1) {\n                        ny = 0;\n                    }\n                    self.scrollIntoView(nx, ny);\n                    self.beginEditAt(nx, ny);\n                }\n            });\n            self.dispatchEvent('beginedit', {cell: cell, input: self.input});\n        };\n        self.createInlineStyle = function (el, className) {\n            var css = {\n                'canvas-datagrid-context-menu-filter-input': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextFilterInputBackground,\n                    color: self.style.contextFilterInputColor,\n                    border: self.style.contextFilterInputBorder,\n                    borderRadius: self.style.contextFilterInputBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextFilterInputFontFamily,\n                    fontSize: self.style.contextFilterInputFontSize\n                },\n                'canvas-datagrid-context-menu-filter-button': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextFilterButtonBorder,\n                    borderRadius: self.style.contextFilterButtonBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFilterButtonFontFamily,\n                    fontSize: self.style.contextMenuFilterButtonFontSize\n                },\n                'canvas-datagrid-context-child-arrow': {\n                    cssFloat: 'right',\n                    color: self.style.childContextMenuArrowColor,\n                    fontSize: self.style.contextMenuChildArrowFontSize,\n                    fontFamily: self.style.contextMenuFontFamily,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-autocomplete': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    position: 'absolute',\n                    zIndex: 9999,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-autocomplete-item': {\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor\n                },\n                'canvas-datagrid-autocomplete-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-canvas': {\n                    position: 'absolute',\n                    zIndex: '-1'\n                },\n                'canvas-datagrid': {\n                    display: 'block',\n                    zIndex: '1',\n                    boxSizing: 'content-box',\n                    width: '100%',\n                    height: '100%'\n                },\n                'canvas-datagrid-control-input': {\n                    position: 'fixed',\n                    top: '-5px',\n                    left: '-5px',\n                    border: 'none',\n                    opacity: '0',\n                    cursor: 'pointer',\n                    width: '1px',\n                    height: '1px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize\n                },\n                'canvas-datagrid-edit-mobile-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 0',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.mobileEditFontFamily,\n                    fontSize: self.style.mobileEditFontSize,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-edit-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 ' + self.style.editCellPaddingLeft + 'px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.editCellFontFamily,\n                    fontSize: self.style.editCellFontSize,\n                    boxShadow: self.style.editCellBoxShadow,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-context-menu-item-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-context-menu-label': {\n                    margin: self.style.contextMenuLabelMargin,\n                    display: self.style.contextMenuLabelDisplay,\n                    minWidth: self.style.contextMenuLabelMinWidth,\n                    maxWidth: self.style.contextMenuLabelMaxWidth\n                },\n                'canvas-datagrid-context-menu-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-context-menu': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-invalid-search-regExp': {\n                    background: self.style.contextMenuFilterInvalidExpresion\n                }\n            };\n            if (css[className]) {\n                Object.keys(css[className]).map(function (prop) {\n                    el.style[prop] = css[className][prop];\n                });\n            }\n            return;\n        };\n        self.appendTo = function (e) {\n            self.parentNode = e;\n            self.setDom();\n        };\n        self.setDom = function () {\n            if (!self.parentNode) { return; }\n            if (self.parentNode && /canvas-datagrid-(cell|tree)/.test(self.parentNode.nodeType)) {\n                self.isChildGrid = true;\n                self.parentGrid = self.parentNode.parentGrid;\n                self.ctx = self.parentGrid.context;\n                self.canvas = self.parentGrid.canvas;\n                self.controlInput = self.parentGrid.controlInput;\n                self.eventParent = self.canvas;\n            } else {\n                self.controlInput = self.controlInput || document.createElement('input');\n                self.controlInput.onblur = self.intf.blur;\n                self.createInlineStyle(self.controlInput, 'canvas-datagrid-control-input');\n                self.isChildGrid = false;\n                self.parentDOMNode = self.parentNode;\n                self.parentIsCanvas = /^canvas$/i.test(self.parentDOMNode.tagName);\n                if (self.parentIsCanvas) {\n                    self.canvas = self.parentDOMNode;\n                    self.parentDOMNode.appendChild(self.controlInput);\n                } else {\n                    self.canvas = document.createElement('canvas');\n                    self.parentDOMNode.appendChild(self.canvas);\n                    self.parentDOMNode.appendChild(self.controlInput);\n                }\n                self.createInlineStyle(self.canvas, 'canvas-datagrid');\n                self.ctx = self.canvas.getContext('2d');\n                self.ctx.textBaseline = 'alphabetic';\n                self.eventParent = self.canvas;\n            }\n            self.parentNodeStyle = (self.isComponent ? self.intf : self.canvas).style;\n            self.controlInput.setAttribute('readonly', true);\n            self.controlInput.addEventListener('blur', function (e) {\n                if (e.target !== self.canvas) {\n                    self.hasFocus = false;\n                }\n            });\n            self.eventParent.addEventListener('scroll', self.resize, false);\n            self.eventParent.addEventListener('touchstart', self.touchstart, false);\n            self.eventParent.addEventListener('mouseup', self.mouseup, false);\n            self.eventParent.addEventListener('mousedown', self.mousedown, false);\n            self.eventParent.addEventListener('dblclick', self.dblclick, false);\n            self.eventParent.addEventListener('click', self.click, false);\n            self.eventParent.addEventListener('mousemove', self.mousemove);\n            self.eventParent.addEventListener('wheel', self.scrollWheel, false);\n            self.canvas.addEventListener('contextmenu', self.contextmenuEvent, false);\n            self.controlInput.addEventListener('copy', self.copy);\n            self.controlInput.addEventListener('cut', self.cut);\n            self.controlInput.addEventListener('paste', self.paste);\n            self.controlInput.addEventListener('keypress', self.keypress, false);\n            self.controlInput.addEventListener('keyup', self.keyup, false);\n            self.controlInput.addEventListener('keydown', self.keydown, false);\n            window.addEventListener('resize', self.resize);\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        // all methods here are exposed by intf\n        // to users\n        /**\n         * Converts a integer into a letter A - ZZZZZ...\n         * @memberof canvasDatagrid\n         * @name integerToAlpha\n         * @method\n         * @param {column} n The number to convert.\n         */\n        self.integerToAlpha = function (n) {\n            var ordA = 'a'.charCodeAt(0),\n                ordZ = 'z'.charCodeAt(0),\n                len = ordZ - ordA + 1,\n                s = '';\n            while (n >= 0) {\n                s = String.fromCharCode(n % len + ordA) + s;\n                n = Math.floor(n / len) - 1;\n            }\n            return s;\n        };\n        /**\n         * Inserts a new column before the specified index into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name insertColumn\n         * @method\n         * @param {column} c The column to insert into the schema.\n         * @param {number} index The index of the column to insert before.\n         */\n        self.insertColumn = function (c, index) {\n            var s = self.getSchema();\n            if (s.length < index) {\n                throw new Error('Index is beyond the length of the schema.');\n            }\n            self.validateColumn(c, s);\n            s.splice(index, 0, c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a column from the schema at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteColumn\n         * @tutorial schema\n         * @method\n         * @param {number} index The index of the column to delete.\n         */\n        self.deleteColumn = function (index) {\n            var s = self.getSchema();\n            // remove data matching this column name from data\n            self.data.forEach(function (row) {\n                delete row[s[index].name];\n            });\n            s.splice(index, 1);\n            self.intf.schema = s;\n        };\n        /**\n         * Adds a new column into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name addColumn\n         * @method\n         * @param {column} c The column to add to the schema.\n         */\n        self.addColumn = function (c) {\n            var s = self.getSchema();\n            self.validateColumn(c, s);\n            s.push(c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a row from the dataset at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteRow\n         * @method\n         * @param {number} index The index of the row to delete.\n         */\n        self.deleteRow = function (index) {\n            self.originalData.splice(index, 1);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Inserts a new row into the dataset before the specified index.\n         * @memberof canvasDatagrid\n         * @name insertRow\n         * @method\n         * @param {object} d data.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertRow = function (d, index) {\n            if (self.originalData.length < index) {\n                throw new Error('Index is beyond the length of the dataset.');\n            }\n            self.originalData.splice(index, 0, d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[index], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Adds a new row into the dataset.\n         * @memberof canvasDatagrid\n         * @name addRow\n         * @method\n         * @param {object} d data.\n         */\n        self.addRow = function (d) {\n            self.originalData.push(d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[self.originalData.length - 1], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Sets the height of a given row by index number.\n         * @memberof canvasDatagrid\n         * @name setRowHeight\n         * @method\n         * @param {number} rowIndex The index of the row to set.\n         * @param {number} height Height to set the row to.\n         */\n        self.setRowHeight = function (rowIndex, height) {\n            self.sizes.rows[self.data[rowIndex][self.uniqueId]] = height;\n            self.draw(true);\n        };\n        /**\n         * Sets the width of a given column by index number.\n         * @memberof canvasDatagrid\n         * @name setColumnWidth\n         * @method\n         * @param {number} colIndex The index of the column to set.\n         * @param {number} width Width to set the column to.\n         */\n        self.setColumnWidth = function (colIndex, width) {\n            var s = self.getSchema();\n            self.sizes.columns[s[colIndex][self.uniqueId]] = width;\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the width of the columns due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetColumnWidths\n         * @tutorial schema\n         * @method\n         */\n        self.resetColumnWidths = function () {\n            self.sizes.columns = {};\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the height of the rows due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetRowHeights\n         * @tutorial schema\n         * @method\n         */\n        self.resetRowHeights = function () {\n            self.sizes.rows = {};\n            self.draw(true);\n        };\n        /**\n         * Sets the value of the filter.\n         * @memberof canvasDatagrid\n         * @name setFilter\n         * @method\n         * @param {string} column Name of the column to filter.\n         * @param {string} value The value to filter for.\n         */\n        self.setFilter = function (column, value) {\n            function applyFilter() {\n                self.refreshFromOrigialData();\n                Object.keys(self.columnFilters).forEach(function (filter) {\n                    var header = self.getHeaderByName(column);\n                    if (!header) {\n                        return;\n                    }\n                    self.currentFilter = header.filter || self.filter(column.type || 'string');\n                    self.data = self.data.filter(function (row) {\n                        return self.currentFilter(row[filter], self.columnFilters[filter]);\n                    });\n                });\n                self.resize();\n                self.draw(true);\n            }\n            if (column === undefined && value === undefined) {\n                self.columnFilters = {};\n                return applyFilter();\n            }\n            if (column && (value === '' || value === undefined)) {\n                delete self.columnFilters[column];\n            } else {\n                self.columnFilters[column] = value;\n            }\n            applyFilter();\n        };\n        /**\n         * Returns the number of pixels to scroll down to line up with row rowIndex.\n         * @memberof canvasDatagrid\n         * @name findRowScrollTop\n         * @method\n         * @param {number} rowIndex The row index of the row to scroll find.\n         */\n        self.findRowScrollTop = function (rowIndex) {\n            var top = 0, x = 0, l = self.data.length,\n                bm = self.style.borderCollapse === 'collapse' ? 1 : 2,\n                cellBorder = self.style.cellBorderWidth * bm;\n            if (!self.attributes.showNewRow) {\n                l -= 1;\n            }\n            if (rowIndex > l) {\n                throw new Error('Impossible row index');\n            }\n            while (x < rowIndex) {\n                top += (self.sizes.rows[self.data[x][self.uniqueId]] || self.style.cellHeight) + cellBorder;\n                x += 1;\n            }\n            //TODO: This is not super accurate, causes pageUp/Dn to not move around right\n            return top - (self.sizes.rows[self.data[rowIndex][self.uniqueId]] || self.style.cellHeight);\n        };\n        /**\n         * Returns the number of pixels to scroll to the left to line up with column columnIndex.\n         * @memberof canvasDatagrid\n         * @name findColumnScrollLeft\n         * @method\n         * @param {number} columnIndex The column index of the column to find.\n         */\n        self.findColumnScrollLeft = function (columnIndex) {\n            var left = 0, y = 0, s = self.getSchema(), l = s.length - 1;\n            if (columnIndex > l) {\n                throw new Error('Impossible column index');\n            }\n            while (y < columnIndex) {\n                left += self.sizes.columns[s[y][self.uniqueId]] || s[y].width;\n                y += 1;\n            }\n            return left;\n        };\n        /**\n         * Scrolls the cell at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name gotoCell\n         * @method\n         * @param {number} x The column index of the cell to scroll to.\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoCell = function (x, y) {\n            if (x !== undefined) {\n                self.scrollBox.scrollLeft = self.findColumnScrollLeft(x);\n            }\n            if (y !== undefined) {\n                self.scrollBox.scrollTop = self.findRowScrollTop(y);\n            }\n        };\n        /**\n         * Scrolls the row y.\n         * @memberof canvasDatagrid\n         * @name gotoRow\n         * @method\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoRow = function (y) {\n            self.gotoCell(0, y);\n        };\n        /**\n         * Scrolls the cell at cell x, row y into view if it is not already.\n         * @memberof canvasDatagrid\n         * @name scrollIntoView\n         * @method\n         * @param {number} x The column index of the cell to scroll into view.\n         * @param {number} y The row index of the cell to scroll into view.\n         */\n        self.scrollIntoView = function (x, y) {\n            if (self.visibleCells.filter(function (cell) {\n                    return (cell.rowIndex === y || y === undefined)\n                        && (cell.columnIndex === x || x === undefined)\n                        && cell.x > 0\n                        && cell.y > 0\n                        && cell.x + cell.width < self.width\n                        && cell.y + cell.height < self.height;\n                }).length === 0) {\n                self.gotoCell(x, y);\n            }\n        };\n        /**\n         * Sets the active cell. Requires redrawing.\n         * @memberof canvasDatagrid\n         * @name setActiveCell\n         * @method\n         * @param {number} x The column index of the cell to set active.\n         * @param {number} y The row index of the cell to set active.\n         */\n        self.setActiveCell = function (x, y) {\n            self.activeCell = {\n                rowIndex: y,\n                columnIndex: x\n            };\n        };\n        /**\n         * Removes the selection.\n         * @memberof canvasDatagrid\n         * @name selectNone\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectNone = function (dontDraw) {\n            self.selections = [];\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Selects every visible cell.\n         * @memberof canvasDatagrid\n         * @name selectAll\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectAll = function (dontDraw) {\n            self.selectArea({\n                top: 0,\n                left: 0,\n                right: self.getVisibleSchema().length - 1,\n                bottom: self.data.length - 1\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Returns true if the selected columnIndex is selected on every row.\n         * @memberof canvasDatagrid\n         * @name isColumnSelected\n         * @method\n         * @param {number} columnIndex The column index to check.\n         */\n        self.isColumnSelected = function (columnIndex) {\n            var colIsSelected = true;\n            self.data.forEach(function (row, rowIndex) {\n                if (!self.selections[rowIndex] || self.selections[rowIndex].indexOf(self.orders.columns[columnIndex]) === -1) {\n                    colIsSelected = false;\n                }\n            });\n            return colIsSelected;\n        };\n        /**\n         * Runs the defined method on each selected cell.\n         * @memberof canvasDatagrid\n         * @name forEachSelectedCell\n         * @method\n         * @param {number} fn The function to execute.  The signature of the function is: (data, rowIndex, columnName).\n         * @param {number} expandToRow When true the data in the array is expanded to the entire row.\n         */\n        self.forEachSelectedCell = function (fn, expandToRow) {\n            var d = [], s = expandToRow ? self.getSchema() : self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    if (col === -1 || !s[col]) { return; }\n                    fn(self.data, index, s[col].name);\n                });\n            });\n        };\n        /**\n         * Selects a column.\n         * @memberof canvasDatagrid\n         * @name selectColumn\n         * @method\n         * @param {number} columnIndex The column index to select.\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the column.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the column.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectColumn = function (columnIndex, ctrl, shift, supressEvent) {\n            var s, e, x;\n            function addCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) === -1) {\n                        self.selections[rowIndex].push(i);\n                    }\n                });\n            }\n            function removeCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) !== -1) {\n                        self.selections[rowIndex].splice(self.selections[rowIndex].indexOf(i), 1);\n                    }\n                });\n            }\n            if (shift) {\n                if (!self.activeCell) { return; }\n                s = Math.min(self.activeCell.columnIndex, columnIndex);\n                e = Math.max(self.activeCell.columnIndex, columnIndex);\n                for (x = s; e > x; x += 1) {\n                    addCol(x);\n                }\n            }\n            if (!ctrl && !shift) {\n                self.selections = [];\n                self.activeCell.columnIndex = columnIndex;\n                self.activeCell.rowIndex = self.scrollIndexTop;\n            }\n            if (ctrl && self.isColumnSelected(columnIndex)) {\n                removeCol(columnIndex);\n            } else {\n                addCol(columnIndex);\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.getSelectionBounds()\n            });\n        };\n        /**\n         * Selects a row.\n         * @memberof canvasDatagrid\n         * @name selectRow\n         * @method\n         * @param {number} rowIndex The row index to select.\n         * @param {boolean} ctrl When true, behaves as if you were holding control/command when you clicked the row.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the row.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectRow = function (rowIndex, ctrl, shift, supressEvent) {\n            var x, st, en, s = self.getVisibleSchema();\n            function addRow(ri) {\n                self.selections[ri] = [];\n                self.selections[ri].push(-1);\n                s.forEach(function (col, index) {\n                    self.selections[ri].push(index);\n                });\n            }\n            if (self.dragAddToSelection === false || self.dragObject === undefined) {\n                if (self.selections[rowIndex] && self.selections[rowIndex].length - 1 === s.length) {\n                    if (ctrl) {\n                        self.selections[rowIndex] = [];\n                        return;\n                    }\n                }\n            }\n            if (self.dragAddToSelection === true || self.dragObject === undefined) {\n                if (shift && self.dragObject === undefined) {\n                    if (!self.activeCell) { return; }\n                    st = Math.min(self.activeCell.rowIndex, rowIndex);\n                    en = Math.max(self.activeCell.rowIndex, rowIndex);\n                    for (x = st; en >= x; x += 1) {\n                        addRow(x);\n                    }\n                } else {\n                    addRow(rowIndex);\n                }\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Collapse a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name collapseTree\n         * @method\n         * @param {number} index The index of the row to collapse.\n         */\n        self.collapseTree = function (rowIndex) {\n            var rowId = self.data[rowIndex][self.uniqueId];\n            self.dispatchEvent('collapsetree', {\n                childGrid: self.childGrids[rowId],\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId].blur();\n            self.openChildren[rowId].dispose();\n            delete self.openChildren[rowId];\n            delete self.sizes.trees[rowId];\n            delete self.childGrids[rowId];\n            self.dispatchEvent('resizerow', {\n                cellHeight: self.style.cellHeight\n            });\n            self.resize(true);\n            self.draw(true);\n        };\n        /**\n         * Expands a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name expandTree\n         * @method\n         * @param {number} index The index of the row to expand.\n         */\n        self.expandTree = function (rowIndex) {\n            var columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth,\n                rowId = self.data[rowIndex][self.uniqueId],\n                h = self.sizes.trees[rowId] || self.style.treeGridHeight,\n                treeGrid;\n            if (!self.childGrids[rowId]) {\n                treeGrid = self.createGrid({\n                    debug: self.attributes.debug,\n                    name: self.attributes.saveAppearance\n                        ? self.attributes.name + 'tree' + rowId : undefined,\n                    parentNode: {\n                        parentGrid: self.intf,\n                        nodeType: 'canvas-datagrid-tree',\n                        offsetHeight: h,\n                        offsetWidth: self.width - rowHeaderCellWidth,\n                        header: { width: self.width - rowHeaderCellWidth },\n                        offsetLeft: rowHeaderCellWidth,\n                        offsetTop: columnHeaderCellHeight,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: 'tree',\n                        data: self.data[rowIndex]\n                    }\n                });\n                self.childGrids[rowId] = treeGrid;\n            }\n            treeGrid = self.childGrids[rowId];\n            treeGrid.visible = true;\n            self.dispatchEvent('expandtree', {\n                treeGrid: treeGrid,\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId] = treeGrid;\n            self.sizes.trees[rowId] = h;\n            self.dispatchEvent('resizerow', {height: self.style.cellHeight});\n            self.resize(true);\n        };\n        /**\n         * Toggles tree grid open and close by row index.\n         * @memberof canvasDatagrid\n         * @name toggleTree\n         * @method\n         * @param {number} index The index of the row to toggle.\n         */\n        self.toggleTree = function (rowIndex) {\n            var i = self.openChildren[self.data[rowIndex][self.uniqueId]];\n            if (i) {\n                return self.collapseTree(rowIndex);\n            }\n            self.expandTree(rowIndex);\n        };\n        /**\n         * Returns a header from the schema by name.\n         * @memberof canvasDatagrid\n         * @name getHeaderByName\n         * @tutorial schema\n         * @method\n         * @returns {header} header with the selected name, or undefined.\n         * @param {string} name The name of the column to resize.\n         */\n        self.getHeaderByName = function (name) {\n            var x, i = self.getSchema();\n            for (x = 0; x < i.length; x += 1) {\n                if (i[x].name === name) {\n                    return i[x];\n                }\n            }\n        };\n        /**\n         * Resizes a column to fit the longest value in the column. Call without a value to resize all columns.\n         * Warning, can be slow on very large record sets (1m records ~3-5 seconds on an i7).\n         * @memberof canvasDatagrid\n         * @name fitColumnToValues\n         * @method\n         * @param {string} name The name of the column to resize.\n         */\n        self.fitColumnToValues = function (name, internal) {\n            if (!self.canvas) { return; }\n            self.sizes.columns[name === 'cornerCell' ? name : self.getHeaderByName(name)[self.uniqueId]]\n                = self.findColumnMaxTextLength(name);\n            if (!internal) {\n                self.resize();\n                self.draw(true);\n            }\n        };\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @overload\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {number} columnIndex The column index of the cell to check.\n         * @param {number} rowIndex The row index of the cell to check.\n         */\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {cell} cell The cell to check for.  Alternatively you can pass an object { x: <x-pixel-value>, y: <y-pixel-value> }.\n         */\n        self.isCellVisible = function (cell, rowIndex) {\n            // overload\n            if (rowIndex !== undefined) {\n                return self.visibleCells.filter(function (c) {\n                    return c.columnIndex === cell && c.rowIndex === rowIndex;\n                }).length > 0;\n            }\n            var x, l = self.visibleCells.length;\n            for (x = 0; x < l; x += 1) {\n                if (cell.x === self.visibleCells[x].x && cell.y === self.visibleCells[x].y) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n         * Sets the order of the data.\n         * @memberof canvasDatagrid\n         * @name order\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} columnName Number of pixels from the left.\n         * @param {string} direction `asc` for ascending or `desc` for descending.\n         * @param {function} [sortFunction] When defined, override the default sorting method defined in the column's schema and use this one.\n         * @param {bool} [dontSetStorageData] Don't store this setting for future use.\n         */\n        self.order = function (columnName, direction, sortFunction, dontSetStorageData) {\n            var f,\n                c = self.getSchema().filter(function (col) {\n                    return col.name === columnName;\n                });\n            self.orderBy = columnName;\n            if (c.length === 0) {\n                throw new Error('Cannot sort.  No such column name');\n            }\n            f = sortFunction || self.sorters[c[0].type];\n            if (!f && c[0].type !== undefined) {\n                console.warn('Cannot sort type \"%s\" falling back to string sort.', c[0].type);\n            }\n            self.data = self.data.sort(typeof f === 'function' ? f(columnName, direction) : self.sorters.string);\n            self.dispatchEvent('ordercolumn', {name: columnName, direction: direction});\n            self.draw(true);\n            if (dontSetStorageData) { return; }\n            self.setStorageData();\n        };\n        self.isInGrid = function (e) {\n            if (e.x < 0\n                    || e.x > self.width\n                    || e.y < 0\n                    || e.y > self.height) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Moves the current selection relative to the its current position.  Note: this method does not move the selected data, just the selection itself.\n         * @memberof canvasDatagrid\n         * @name moveSelection\n         * @method\n         * @param {number} offsetX The number of columns to offset the selection.\n         * @param {number} offsetY The number of rows to offset the selection.\n         */\n        self.moveSelection = function (offsetX, offsetY) {\n            var sel = [];\n            self.selections.forEach(function (row, rowIndex) {\n                sel[rowIndex + offsetY] = [];\n                row.forEach(function (colIndex) {\n                    sel[rowIndex + offsetY].push(colIndex + offsetX);\n                });\n            });\n            self.selections = sel;\n        };\n        /**\n         * Moves data in the provided selection to another position in the grid.  Moving data off the edge of the schema (columns/x) will truncate data.\n         * @memberof canvasDatagrid\n         * @name moveTo\n         * @method\n         * @param {array} sel 2D array representing selected rows and columns.  `canvasDatagrid.selections` is in this format and can be used here.\n         * @param {number} x The column index to start inserting the selection at.\n         * @param {number} y The row index to start inserting the selection at.\n         */\n        self.moveTo = function (sel, x, y) {\n            var d = self.getSelectedData(),\n                s = self.getVisibleSchema(),\n                l = sel.length,\n                xi,\n                yi = y - 1;\n            sel.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) { return; }\n                row.forEach(function (col) {\n                    if (!s[col]) { return; }\n                    self.data[index][s[col].name] = null;\n                });\n            });\n            sel.forEach(function (row, index) {\n                yi += 1;\n                xi = x - 1;\n                row.forEach(function (col, cidx) {\n                    xi += 1;\n                    if (col === -1\n                            || !s[xi]\n                            || !s[col]\n                            || self.data.length - 1 < yi\n                            || yi < 0) { return; }\n                    self.data[yi][s[xi].name] = d[index][s[col].name];\n                });\n            });\n        };\n        /**\n         * Checks if a given column is visible.\n         * @memberof canvasDatagrid\n         * @name isColumnVisible\n         * @method\n         * @returns {boolean} When true, the column is visible.\n         * @param {number} columnIndex Column index.\n         */\n        self.isColumnVisible = function (columnIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === columnIndex;\n            }).length > 0;\n        };\n        /**\n         * Checks if a given row is visible.\n         * @memberof canvasDatagrid\n         * @name isRowVisible\n         * @method\n         * @returns {boolean} When true, the row is visible.\n         * @param {number} rowIndex Row index.\n         */\n        self.isRowVisible = function (rowIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.rowIndex === rowIndex;\n            }).length > 0;\n        };\n        /**\n         * Gets the cell at columnIndex and rowIndex.\n         * @memberof canvasDatagrid\n         * @name getVisibleCellByIndex\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Column index.\n         * @param {number} y Row index.\n         */\n        self.getVisibleCellByIndex = function (x, y) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === x && c.rowIndex === y;\n            })[0];\n        };\n        /**\n         * Gets the cell at grid pixel coordinate x and y.  Author's note.  This function ties drawing and events together.  This is a very complex function and is core to the component.\n         * @memberof canvasDatagrid\n         * @name getCellAt\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Number of pixels from the left.\n         * @param {number} y Number of pixels from the top.\n         */\n        self.getCellAt = function (x, y, useTouchScrollZones) {\n            function getBorder(cell) {\n                if (cell.x + cell.width - (self.attributes.borderResizeZone * 0.4) < x && cell.x + cell.width + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'r';\n                }\n                if (cell.x - (self.attributes.borderResizeZone * 0.4) < x && cell.x + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'l';\n                }\n                if (cell.y + cell.height - (self.attributes.borderResizeZone * 0.4) < y && cell.y + cell.height + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 'b';\n                }\n                if (cell.y - (self.attributes.borderResizeZone * 0.4) < y && cell.y + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 't';\n                }\n            }\n            var border,\n                tsz = useTouchScrollZones ? self.attributes.touchScrollZone : 0,\n                moveMode = self.attributes.borderDragBehavior === 'move',\n                i,\n                l = self.visibleCells.length,\n                moveBorder,\n                xBorderBehavior = moveMode ? self.cursorGrab : 'ew-resize',\n                yBorderBehavior = moveMode ? self.cursorGrab : 'ns-resize',\n                cell;\n            if (!self.visibleCells || !self.visibleCells.length) { return; }\n            self.hasFocus = true;\n            if (!(y < self.height\n                && y > 0\n                && x < self.width\n                && x > 0)) {\n                self.hasFocus = false;\n                return {\n                    dragContext: 'inherit',\n                    context: 'inherit'\n                };\n            }\n            for (i = 0; i < l; i += 1) {\n                cell = self.visibleCells[i];\n                if (useTouchScrollZones && /(vertical|horizontal)-scroll-/.test(cell.style)) {\n                    cell.x -= tsz;\n                    cell.y -= tsz;\n                    cell.height += tsz;\n                    cell.width += tsz;\n                }\n                if (cell.x - self.style.cellBorderWidth < x\n                        && cell.x + cell.width + self.style.cellBorderWidth > x\n                        && cell.y - self.style.cellBorderWidth < y\n                        && cell.y + cell.height + self.style.cellBorderWidth > y) {\n                    if (/frozen-row-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'row-resize';\n                        return cell;\n                    }\n                    if (/frozen-column-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'col-resize';\n                        return cell;\n                    }\n                    if (/selection-handle-/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'crosshair';\n                        return cell;\n                    }\n                    if (/vertical-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'vertical-scroll-box';\n                        cell.context = 'vertical-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isVerticalScrollBar = true;\n                        if (y > self.scrollBox.box.v.y + self.scrollBox.scrollBoxHeight) {\n                            cell.dragContext = 'vertical-scroll-bottom';\n                            cell.context = 'vertical-scroll-bottom';\n                        } else if (y < self.scrollBox.box.v.y) {\n                            cell.dragContext = 'vertical-scroll-top';\n                            cell.context = 'vertical-scroll-top';\n                        }\n                        self.canvas.style.cursor = 'default';\n                        return cell;\n                    }\n                    if (/horizontal-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'horizontal-scroll-box';\n                        cell.context = 'horizontal-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isHorizontalScrollBar = true;\n                        if (x > self.scrollBox.box.h.x + self.scrollBox.scrollBoxWidth) {\n                            cell.dragContext = 'horizontal-scroll-right';\n                            cell.context = 'horizontal-scroll-right';\n                        } else if (x < self.scrollBox.box.h.x) {\n                            cell.dragContext = 'horizontal-scroll-left';\n                            cell.context = 'horizontal-scroll-left';\n                        }\n                        self.canvas.style.cursor = 'default';\n                        return cell;\n                    }\n                    border = getBorder(cell);\n                    // check if the border of this cell is the border of the selection and if so show move cursor in move mode\n                    moveBorder = moveMode && cell.selectionBorder && cell.selectionBorder.indexOf(border) !== -1;\n                    if (['l', 'r'].indexOf(border) !== -1\n                            && (self.attributes.allowColumnResize || moveBorder)\n                            && ((self.attributes.allowColumnResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && ((self.attributes.allowRowHeaderResize && (cell.isRowHeader || cell.isCorner)) || !(cell.isRowHeader && cell.isCorner))) {\n                        if (((cell.isColumnHeader || cell.isCorner) || (self.attributes.allowColumnResizeFromCell && cell.isNormal)) && border === 'r') {\n                            cell.context = 'ew-resize';\n                            cell.dragContext = 'ew-resize';\n                            return cell;\n                        }\n                        if (!(cell.isColumnHeader || cell.isCorner) && moveBorder) {\n                            cell.context = xBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (['t', 'b'].indexOf(border) !== -1\n                            && cell.rowIndex > -1\n                            && (self.attributes.allowRowResize || moveBorder)\n                            && ((self.attributes.allowRowResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && !cell.isColumnHeader) {\n                        if (((cell.isRowHeader || cell.isCorner) || (self.attributes.allowRowResizeFromCell && cell.isNormal)) && border === 'b') {\n                            cell.context = 'ns-resize';\n                            cell.dragContext = 'ns-resize';\n                            return cell;\n                        }\n                        if (!(cell.isRowHeader || cell.isCorner) && moveBorder) {\n                            cell.context = yBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (cell.style === 'columnHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'column-reorder';\n                        return cell;\n                    }\n                    if (cell.style === 'rowHeaderCell') {\n                        if ((self.attributes.rowGrabZoneSize + (cell.y - self.style.cellBorderWidth) < y)\n                                || !self.attributes.allowRowReordering) {\n                            cell.dragContext = 'cell';\n                            cell.context = 'cell';\n                        } else {\n                            cell.context = self.cursorGrab;\n                            cell.dragContext = 'row-reorder';\n                        }\n                        return cell;\n                    }\n                    if (cell.isGrid) {\n                        self.hasFocus = false;\n                        cell.dragContext = 'cell-grid';\n                        cell.context = 'cell-grid';\n                        return cell;\n                    }\n                    if (cell.style === 'tree-grid') {\n                        self.hasFocus = false;\n                        cell.dragContext = 'tree';\n                        cell.context = 'tree';\n                        return cell;\n                    }\n                    cell.dragContext = 'cell';\n                    cell.context = 'cell';\n                    return cell;\n                }\n            }\n            self.hasFocus = true;\n            self.canvas.style.cursor = 'default';\n            return {\n                dragContext: 'background',\n                context: 'background',\n                style: 'background',\n                isBackground: true\n            };\n        };\n        /**\n         * Gets the bounds of current selection. \n         * @returns {rect} selection.\n         * @memberof canvasDatagrid\n         * @name getSelectionBounds\n         * @method\n         */\n        self.getSelectionBounds = function () {\n            var low = {x: Infinity, y: Infinity},\n                high = {x: -Infinity, y: -Infinity};\n            self.data.forEach(function (row, rowIndex) {\n                var maxCol, minCol;\n                if (self.selections[rowIndex] && self.selections[rowIndex].length) {\n                    low.y = rowIndex < low.y ? rowIndex : low.y;\n                    high.y = rowIndex > high.y ? rowIndex : high.y;\n                    maxCol = Math.max.apply(null, self.selections[rowIndex]);\n                    minCol = Math.min.apply(null, self.selections[rowIndex]);\n                    low.x = minCol < low.x ? minCol : low.x;\n                    high.x = maxCol > high.x ? maxCol : high.x;\n                }\n            });\n            return {\n                top: low.y,\n                left: low.x,\n                bottom: high.y,\n                right: high.x\n            };\n        };\n        /**\n         * Returns an auto generated schema based on data structure.\n         * @memberof canvasDatagrid\n         * @name getSchemaFromData\n         * @method\n         * @tutorial schema\n         * @returns {schema} schema A schema based on the first item in the data array.\n         */\n        self.getSchemaFromData = function () {\n            return Object.keys(self.data[0] || {' ': ''}).map(function mapEachSchemaColumn(key, index) {\n                var type = self.getBestGuessDataType(key),\n                    i = {\n                        name: key,\n                        title: isNaN(parseInt(key, 10)) ? key : self.integerToAlpha(key).toUpperCase(),\n                        width: self.style.cellWidth,\n                        index: index,\n                        type: type,\n                        filter: self.filter(type)\n                    };\n                if (key === self.uniqueId) {\n                    i.hidden = true;\n                }\n                i[self.uniqueId] = self.getSchemaNameHash(key);\n                return i;\n            });\n        };\n        /**\n         * Clears the change log grid.changes that keeps track of changes to the data set.\n         * This does not undo changes or alter data it is simply a convince array to keep\n         * track of changes made to the data since last this method was called.\n         * @memberof canvasDatagrid\n         * @name clearChangeLog\n         * @method\n         */\n        self.clearChangeLog = function () {\n            self.changes = [];\n        };\n        /**\n         * Selects an area of the grid.\n         * @memberof canvasDatagrid\n         * @name selectArea\n         * @method\n         * @param {rect} bounds A rect object representing the selected values.\n         */\n        self.selectArea = function (bounds, ctrl) {\n            self.selectionBounds = bounds || self.selectionBounds;\n            var x, y, s = self.getSchema();\n            if (!ctrl) {\n                self.selections = [];\n            }\n            if (self.selectionBounds.top < -1\n                    || self.selectionBounds.bottom > self.data.length\n                    || self.selectionBounds.left < -1\n                    || self.selectionBounds.right > s.length) {\n                throw new Error('Impossible selection area');\n            }\n            for (x = self.selectionBounds.top; x <= self.selectionBounds.bottom; x += 1) {\n                self.selections[x] = [];\n                for (y = self.selectionBounds.left; y <= self.selectionBounds.right; y += 1) {\n                    if (self.selections[x].indexOf(y) === -1) {\n                        self.selections[x].push(y);\n                    }\n                }\n            }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Returns the maximum text width for a given column by column name.\n         * @memberof canvasDatagrid\n         * @name findColumnMaxTextLength\n         * @method\n         * @returns {number} The number of pixels wide the maximum width value in the selected column.\n         * @param {string} name The name of the column to calculate the value's width of.\n         */\n        self.findColumnMaxTextLength = function (name) {\n            var m = -Infinity;\n            if (name === 'cornerCell') {\n                self.ctx.font = self.style.rowHeaderCellFont;\n                return self.ctx.measureText((self.data.length + (self.attributes.showNewRow ? 1 : 0)).toString()).width\n                    + self.style.autosizePadding + self.style.autosizeHeaderCellPadding\n                    + self.style.rowHeaderCellPaddingRight\n                    + self.style.rowHeaderCellPaddingLeft\n                    + (self.attributes.tree ? self.style.treeArrowWidth\n                        + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight : 0);\n            }\n            self.getSchema().forEach(function (col) {\n                if (col.name !== name) { return; }\n                self.ctx.font = self.style.columnHeaderCellFont;\n                var t = self.ctx.measureText(col.title || col.name).width\n                    + self.style.headerCellPaddingRight\n                    + self.style.headerCellPaddingLeft;\n                m = t > m ? t : m;\n            });\n            self.data.forEach(function (row) {\n                self.ctx.font = self.style.cellFont;\n                var t = self.ctx.measureText(row[name]).width\n                    + self.style.cellPaddingRight\n                    + self.style.cellPaddingLeft + self.style.cellAutoResizePadding;\n                m = t > m ? t : m;\n            });\n            return m;\n        };\n        /**\n         * Gets the total width of all header columns.\n         * @memberof canvasDatagrid\n         * @name getHeaderWidth\n         * @method\n         */\n        self.getHeaderWidth = function () {\n            return self.getVisibleSchema().reduce(function (total, header) {\n                return total + header.width;\n            }, 0);\n        };\n        self.formatters.string = function cellFormatterString(e) {\n            return e.cell.value !== undefined ? e.cell.value : '';\n        };\n        self.formatters.rowHeaderCell = self.formatters.string;\n        self.formatters.headerCell = self.formatters.string;\n        self.formatters.number = self.formatters.string;\n        self.formatters.int = self.formatters.string;\n        self.formatters.html = self.formatters.string;\n        self.sorters.string = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (a[columnName] === undefined || a[columnName] === null) {\n                    return 1;\n                }\n                if (b[columnName] === undefined || b[columnName] === null) {\n                    return 0;\n                }\n                if (asc) {\n                    if (!a[columnName].localeCompare) { return 1; }\n                    return a[columnName].localeCompare(b[columnName]);\n                }\n                if (!b[columnName].localeCompare) { return 1; }\n                return b[columnName].localeCompare(a[columnName]);\n            };\n        };\n        self.sorters.number = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return a[columnName] - b[columnName];\n                }\n                return b[columnName] - a[columnName];\n            };\n        };\n        self.sorters.date = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return new Date(a[columnName]).getTime()\n                        - new Date(b[columnName]).getTime();\n                }\n                return new Date(b[columnName]).getTime()\n                        - new Date(a[columnName]).getTime();\n            };\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// canvas-datagrid.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap f2e069db9b18d40cb099","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.defaults = {\n            attributes: [\n                ['allowColumnReordering', true],\n                ['allowColumnResize', true],\n                ['allowColumnResizeFromCell', false],\n                ['allowFreezingRows', false],\n                ['allowFreezingColumns', false],\n                ['allowMovingSelection', true],\n                ['allowRowHeaderResize', true],\n                ['allowRowReordering', false],\n                ['allowRowResize', true],\n                ['allowRowResizeFromCell', false],\n                ['allowSorting', true],\n                ['autoResizeColumns', false],\n                ['borderDragBehavior', 'none'],\n                ['borderResizeZone', 10],\n                ['clearSettingsOptionText', 'Clear saved settings'],\n                ['columnHeaderClickBehavior', 'sort'],\n                ['columnSelectorHiddenText', '&nbsp;&nbsp;&nbsp;'],\n                ['columnSelectorText', 'Add/Remove columns'],\n                ['columnSelectorVisibleText', '\\u2713'],\n                ['contextHoverScrollAmount', 2],\n                ['contextHoverScrollRateMs', 5],\n                ['copyText', 'Copy'],\n                ['debug', false],\n                ['editable', true],\n                ['filterOptionText', 'Filter %s'],\n                ['filterTextPrefix', '(filtered) '],\n                ['globalRowResize', false],\n                ['hideColumnText', 'Hide %s'],\n                ['maxAutoCompleteItems', 200],\n                ['multiLine', false],\n                ['name', ''],\n                ['pageUpDownOverlap', 1],\n                ['pasteText', 'Paste'],\n                ['persistantSelectionMode', false],\n                ['removeFilterOptionText', 'Remove filter on %s'],\n                ['reorderDeadZone', 3],\n                ['resizeScrollZone', 20],\n                ['rowGrabZoneSize', 5],\n                ['saveAppearance', true],\n                ['scrollAnimationPPSThreshold', 0.75],\n                ['scrollPointerLock', false],\n                ['scrollRepeatRate', 75],\n                ['selectionFollowsActiveCell', false],\n                ['selectionHandleBehavior', 'none'],\n                ['selectionMode', 'cell'],\n                ['selectionScrollIncrement', 20],\n                ['selectionScrollZone', 20],\n                ['showClearSettingsOption', true],\n                ['showColumnHeaders', true],\n                ['showColumnSelector', true],\n                ['showCopy', true],\n                ['showFilter', true],\n                ['showNewRow', false],\n                ['showOrderByOption', true],\n                ['showOrderByOptionTextAsc', 'Order by %s ascending'],\n                ['showOrderByOptionTextDesc', 'Order by %s descending'],\n                ['showPaste', false],\n                ['showPerformance', false],\n                ['showRowHeaders', true],\n                ['showRowNumbers', true],\n                ['snapToRow', false],\n                ['touchContextMenuTimeMs', 800],\n                ['touchDeadZone', 3],\n                ['touchEasingMethod', 'easeOutQuad'],\n                ['touchReleaseAcceleration', 1000],\n                ['touchReleaseAnimationDurationMs', 2000],\n                ['touchScrollZone', 20],\n                ['touchSelectHandleZone', 20],\n                ['touchZoomSensitivity', 0.005],\n                ['touchZoomMin', 0.5],\n                ['touchZoomMax', 1.75],\n                ['tree', false],\n                ['treeHorizontalScroll', false]\n            ],\n            styles: [\n                ['activeCellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['activeCellBorderWidth', 1],\n                ['activeCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellFont', '16px sans-serif'],\n                ['activeCellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['activeCellOverlayBorderWidth', 1],\n                ['activeCellPaddingBottom', 5],\n                ['activeCellPaddingLeft', 5],\n                ['activeCellPaddingRight', 7],\n                ['activeCellPaddingTop', 5],\n                ['activeCellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['activeCellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['activeColumnHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeColumnHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeRowHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeRowHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['autocompleteBottomMargin', 60],\n                ['autosizeHeaderCellPadding', 8],\n                ['autosizePadding', 5],\n                ['borderCollapse', 'collapse'],\n                ['cellAutoResizePadding', 13],\n                ['cellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['cellBorderWidth', 1],\n                ['cellColor', 'rgba(0, 0, 0, 1)'],\n                ['cellFont', '16px sans-serif'],\n                ['cellGridHeight', 250],\n                ['cellHeight', 24],\n                ['cellHeightWithChildGrid', 150],\n                ['cellHorizontalAlignment', 'left'],\n                ['cellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['cellPaddingBottom', 5],\n                ['cellPaddingLeft', 5],\n                ['cellPaddingRight', 7],\n                ['cellPaddingTop', 5],\n                ['cellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['cellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['cellVerticalAlignment', 'center'],\n                ['cellWidth', 250],\n                ['cellWidthWithChildGrid', 250],\n                ['childContextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['childContextMenuArrowHTML', '&#x25BA;'],\n                ['childContextMenuMarginLeft', -11],\n                ['childContextMenuMarginTop', -6],\n                ['columnHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellBorderColor', 'rgba(172, 172, 172, 1)'],\n                ['columnHeaderCellBorderWidth', 1],\n                ['columnHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['columnHeaderCellFont', '16px sans-serif'],\n                ['columnHeaderCellHeight', 25],\n                ['columnHeaderCellHorizontalAlignment', 'left'],\n                ['columnHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['columnHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['columnHeaderCellPaddingBottom', 5],\n                ['columnHeaderCellPaddingLeft', 5],\n                ['columnHeaderCellPaddingRight', 7],\n                ['columnHeaderCellPaddingTop', 5],\n                ['columnHeaderCellVerticalAlignment', 'center'],\n                ['columnHeaderOrderByArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['columnHeaderOrderByArrowBorderWidth', 1],\n                ['columnHeaderOrderByArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['columnHeaderOrderByArrowHeight', 8],\n                ['columnHeaderOrderByArrowMarginLeft', 0],\n                ['columnHeaderOrderByArrowMarginRight', 5],\n                ['columnHeaderOrderByArrowMarginTop', 6],\n                ['columnHeaderOrderByArrowWidth', 13],\n                ['contextFilterButtonBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterButtonBorderRadius', '3px'],\n                ['contextFilterButtonHTML', '&#x25BC;'],\n                ['contextFilterInputBackground', 'rgba(255,255,255,1)'],\n                ['contextFilterInputBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterInputBorderRadius', '0'],\n                ['contextFilterInputColor', 'rgba(0,0,0,1)'],\n                ['contextFilterInputFontFamily', 'sans-serif'],\n                ['contextFilterInputFontSize', '14px'],\n                ['contextFilterInvalidRegExpBackground', 'rgba(180, 6, 1, 1)'],\n                ['contextFilterInvalidRegExpColor', 'rgba(255, 255, 255, 1)'],\n                ['contextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuArrowDownHTML', '&#x25BC;'],\n                ['contextMenuArrowUpHTML', '&#x25B2;'],\n                ['contextMenuBackground', 'rgba(240, 240, 240, 1)'],\n                ['contextMenuBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextMenuBorderRadius', '3px'],\n                ['contextMenuChildArrowFontSize', '12px'],\n                ['contextMenuColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuFilterButtonFontFamily', 'sans-serif'],\n                ['contextMenuFilterButtonFontSize', '10px'],\n                ['contextMenuFilterInvalidExpresion', 'rgba(237, 155, 156, 1)'],\n                ['contextMenuFontFamily', 'sans-serif'],\n                ['contextMenuFontSize', '16px'],\n                ['contextMenuHoverBackground', 'rgba(182, 205, 250, 1)'],\n                ['contextMenuHoverColor', 'rgba(43, 48, 153, 1)'],\n                ['contextMenuItemBorderRadius', '3px'],\n                ['contextMenuItemMargin', '2px'],\n                ['contextMenuLabelDisplay', 'inline-block'],\n                ['contextMenuLabelMargin', '0 3px 0 0'],\n                ['contextMenuLabelMaxWidth', '700px'],\n                ['contextMenuLabelMinWidth', '75px'],\n                ['contextMenuMarginLeft', 3],\n                ['contextMenuMarginTop', -3],\n                ['contextMenuOpacity', '0.98'],\n                ['contextMenuPadding', '2px'],\n                ['contextMenuWindowMargin', 100],\n                ['cornerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cornerCellBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['editCellBackgroundColor', 'white'],\n                ['editCellBorder', 'solid 1px rgba(110, 168, 255, 1)'],\n                ['editCellBoxShadow', '0 2px 5px rgba(0,0,0,0.4)'],\n                ['editCellColor', 'black'],\n                ['editCellFontFamily', 'sans-serif'],\n                ['editCellFontSize', '16px'],\n                ['editCellPaddingLeft', 4],\n                ['frozenMarkerHoverColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerHoverBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerActiveColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerActiveBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerColor', 'rgba(222, 222, 222, 1)'],\n                ['frozenMarkerBorderColor', 'rgba(168, 168, 168, 1)'],\n                ['frozenMarkerBorderWidth', 1],\n                ['frozenMarkerWidth', 2],\n                ['gridBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['gridBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['gridBorderWidth', 1],\n                ['minColumnWidth', 45],\n                ['minRowHeight', 24],\n                ['mobileContextMenuMargin', 10],\n                ['mobileEditInputHeight', 30],\n                ['mobileEditFontFamily', 'sans-serif'],\n                ['mobileEditFontSize', '16px'],\n                ['moveOverlayBorderWidth', 1],\n                ['moveOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['moveOverlayBorderSegments', '12, 7'],\n                ['name', 'default'],\n                ['reorderMarkerBackgroundColor', 'rgba(0, 0, 0, 0.1)'],\n                ['reorderMarkerBorderColor', 'rgba(0, 0, 0, 0.2)'],\n                ['reorderMarkerBorderWidth', 1.25],\n                ['reorderMarkerIndexBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['reorderMarkerIndexBorderWidth', 2.75],\n                ['rowHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['rowHeaderCellBorderColor', 'rgba(200, 200, 200, 1)'],\n                ['rowHeaderCellBorderWidth', 1],\n                ['rowHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellFont', '16px sans-serif'],\n                ['rowHeaderCellHeight', 25],\n                ['rowHeaderCellHorizontalAlignment', 'left'],\n                ['rowHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['rowHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['rowHeaderCellPaddingBottom', 5],\n                ['rowHeaderCellPaddingLeft', 5],\n                ['rowHeaderCellPaddingRight', 5],\n                ['rowHeaderCellPaddingTop', 5],\n                ['rowHeaderCellSelectedBackgroundColor', 'rgba(217, 217, 217, 1)'],\n                ['rowHeaderCellSelectedColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellVerticalAlignment', 'center'],\n                ['rowHeaderCellWidth', 57],\n                ['scrollBarActiveColor', 'rgba(125, 125, 125, 1)'],\n                ['scrollBarBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarBorderWidth', 0.5],\n                ['scrollBarBoxBorderRadius', 4.125],\n                ['scrollBarBoxColor', 'rgba(192, 192, 192, 1)'],\n                ['scrollBarBoxMargin', 2],\n                ['scrollBarBoxMinSize', 15],\n                ['scrollBarBoxWidth', 8],\n                ['scrollBarCornerBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarCornerBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarWidth', 11],\n                ['selectionHandleBorderColor', 'rgba(255, 255, 255, 1)'],\n                ['selectionHandleBorderWidth', 1.5],\n                ['selectionHandleColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionHandleSize', 8],\n                ['selectionHandleType', 'square'],\n                ['selectionOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionOverlayBorderWidth', 1],\n                ['treeArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['treeArrowBorderWidth', 1],\n                ['treeArrowClickRadius', 5],\n                ['treeArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['treeArrowHeight', 8],\n                ['treeArrowMarginLeft', 0],\n                ['treeArrowMarginRight', 5],\n                ['treeArrowMarginTop', 6],\n                ['treeArrowWidth', 13],\n                ['treeGridHeight', 250]\n            ]\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/defaults.js\n// module id = 0\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true, evil: true*/\n/*globals Reflect: false, HTMLElement: true, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([\n    './component',\n    './defaults',\n    './draw',\n    './events',\n    './touch',\n    './intf',\n    './contextMenu',\n    './dom',\n    './publicMethods'\n], function context(component) {\n    'use strict';\n    component = component();\n    var modules = Array.prototype.slice.call(arguments);\n    function Grid(args) {\n        args = args || {};\n        var self = {};\n        self.isComponent = args.component === undefined;\n        self.intf = self.isComponent ? eval('Reflect.construct(HTMLElement, [], new.target)') : {};\n        self.args = args;\n        self.createGrid = function grid(args) {\n            args.component = false;\n            return new Grid(args);\n        };\n        modules.forEach(function (module) {\n            module(self);\n        });\n        if (self.isComponent) {\n            self.args.parentNode = self.intf;\n        } else {\n            self.args.parentNode = args.parentNode;\n        }\n        if (self.args.parentNode && self.args.parentNode.createShadowRoot) {\n            self.shadowRoot = self.args.parentNode.attachShadow({mode: self.args.debug ? 'open' : 'closed'});\n            self.parentNode = self.shadowRoot;\n        } else {\n            self.parentNode = args.parentNode;\n        }\n        self.init();\n        return self.intf;\n    }\n    if (window.HTMLElement) {\n        Grid.prototype = Object.create(window.HTMLElement.prototype);\n    }\n    // export web component\n    if (window.customElements) {\n        Grid.observedAttributes = component.getObservableAttributes();\n        Grid.prototype.disconnectedCallback = component.disconnectedCallback;\n        Grid.prototype.attributeChangedCallback = component.attributeChangedCallback;\n        Grid.prototype.connectedCallback = component.connectedCallback;\n        Grid.prototype.adoptedCallback = component.adoptedCallback;\n        window.customElements.define('canvas-datagrid', Grid);\n    }\n    // export global\n    if (window && !window.canvasDatagrid && !window.require) {\n        window.canvasDatagrid = function (args) { return new Grid(args); };\n    }\n    // export amd loader\n    module.exports = function grid(args) {\n        args = args || {};\n        args.component = false;\n        return new Grid(args);\n    };\n    return module.exports;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/main.js\n// module id = 1\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine(['./defaults'], function (defaults) {\n    'use strict';\n    return function () {\n        var typeMap, component = {};\n        function hyphenateProperty(prop, cust) {\n            var p = '';\n            Array.prototype.forEach.call(prop, function (char) {\n                if (char === char.toUpperCase()) {\n                    p += '-' + char.toLowerCase();\n                    return;\n                }\n                p += char;\n            });\n            return (cust ? '--cdg-' : '') + p;\n        }\n        function getDefaultItem(base, item) {\n            var i = {},\n                r;\n            defaults(i);\n            r = i.defaults[base].filter(function (i) {\n                return i[0].toLowerCase() === item.toLowerCase()\n                    || hyphenateProperty(i[0]) === item.toLowerCase()\n                    || hyphenateProperty(i[0], true) === item.toLowerCase();\n            })[0];\n            return r;\n        }\n        function applyComponentStyle(supressChangeAndDrawEvents, intf) {\n            var cStyle = window.getComputedStyle(intf, null),\n                defs = {};\n            intf.computedStyle = cStyle;\n            defaults(defs);\n            defs = defs.defaults.styles;\n            defs.forEach(function (def) {\n                var val = cStyle.getPropertyValue(hyphenateProperty(def[0], true));\n                if (val === \"\") {\n                    val = cStyle.getPropertyValue(hyphenateProperty(def[0], false));\n                }\n                if (val !== \"\") {\n                    intf.setStyleProperty(def[0], typeMap[typeof def[1]](val, def[1]));\n                }\n            });\n            intf.resize(true);\n            if (!supressChangeAndDrawEvents && intf.dispatchEvent) {\n                intf.dispatchEvent('stylechanged', intf.style);\n            }\n        }\n        typeMap = {\n            data: function (strData) {\n                try {\n                    return JSON.parse(strData);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid data.');\n                }\n            },\n            schema: function (strSchema) {\n                try {\n                    return JSON.parse(strSchema);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid schema attribute.');\n                }\n            },\n            number: function (strNum, def) {\n                var n = parseInt(strNum, 10);\n                return isNaN(n) ? def : n;\n            },\n            boolean: function (strBool) {\n                return (/true/i).test(strBool);\n            },\n            string: function (str) {\n                return str;\n            }\n        };\n        component.getObservableAttributes = function () {\n            var i = {}, attrs = ['data', 'schema', 'style', 'className'];\n            defaults(i);\n            i.defaults.attributes.forEach(function (attr) {\n                attrs.push(attr[0].toLowerCase());\n            });\n            return attrs;\n        };\n        component.disconnectedCallback = function () {\n            this.connected = false;\n            this.dispose();\n        };\n        component.connectedCallback = function () {\n            var intf = this;\n            intf.connected = true;\n            component.observe(intf);\n            applyComponentStyle(true, intf);\n            intf.resize();\n        };\n        component.adoptedCallback = function () {\n            this.resize();\n        };\n        component.attributeChangedCallback = function (attrName, oldVal, newVal) {\n            var tfn, intf = this, def;\n            if (attrName === 'style') {\n                requestAnimationFrame(function () { applyComponentStyle(false, intf); });\n                return;\n            }\n            if (attrName === 'data') {\n                intf.args.data = typeMap.data(newVal);\n                return;\n            }\n            if (attrName === 'schema') {\n                intf.args.schema = typeMap.schema(newVal);\n                return;\n            }\n            if (attrName === 'class' || attrName === 'className') {\n                return;\n            }\n            def = getDefaultItem('attributes', attrName);\n            if (def) {\n                tfn = typeMap[typeof def[1]];\n                intf.attributes[def[0]] = tfn(newVal);\n                return;\n            }\n            if (/^on/.test(attrName)) {\n                intf.addEventListener('on' + attrName, function (e) {\n                    eval(newVal);\n                });\n            }\n            return;\n        };\n        component.observe = function (intf) {\n            var observer;\n            if (!window.MutationObserver) { return; }\n            intf.applyComponentStyle = function () { applyComponentStyle(intf); intf.resize(); };\n            /**\n             * Applies the computed css styles to the grid.  In some browsers, changing directives in attached style sheets does not automatically update the styles in this component.  It is necessary to call this method to update in these cases.\n             * @memberof canvasDatagrid\n             * @name applyComponentStyle\n             * @method\n             */\n            observer = new window.MutationObserver(function (mutations) {\n                var checkInnerHTML, checkStyle;\n                Array.prototype.forEach.call(mutations, function (mutation) {\n                    if (mutation.attributeName === 'class'\n                            || mutation.attributeName === 'style') {\n                        intf.applyComponentStyle(intf);\n                        return;\n                    }\n                    if (mutation.target.parentNode.nodeName === 'STYLE') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.addedNodes.length > 0 || mutation.type === 'characterData') {\n                        checkInnerHTML = true;\n                    }\n                });\n                if (checkStyle) {\n                    intf.applyComponentStyle();\n                }\n                if (checkInnerHTML) {\n                    intf.data = typeMap.data(intf.innerHTML);\n                }\n            });\n            observer.observe(intf, { characterData: true, childList: true, attributes: true, subtree: true });\n            Array.prototype.forEach.call(document.querySelectorAll('style'), function (el) {\n                observer.observe(el, { characterData: true, childList: true, attributes: true, subtree: true });\n            });\n        };\n        return component;\n    };\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/component.js\n// module id = 2\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals XMLSerializer: false, define: true, Blob: false, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var perfCounters = [],\n            drawCount = 0,\n            perfWindowSize = 300,\n            entityCount = [],\n            scrollDebugCounters = [],\n            touchPPSCounters = [];\n        self.htmlImageCache = {};\n        function drawPerfLine(w, h, x, y, perfArr, arrIndex, max, color, useAbs) {\n            var i = w / perfArr.length,\n                r = h / max;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x, y + h);\n            perfArr.forEach(function (n) {\n                var val = (arrIndex === undefined ? n : n[arrIndex]),\n                    cx,\n                    cy;\n                if (useAbs) {\n                    val = Math.abs(val);\n                }\n                cx = x + i;\n                cy = y + h - (val * r);\n                self.ctx.lineTo(cx, cy);\n                x += i;\n            });\n            self.ctx.moveTo(x + w, y + h);\n            self.ctx.strokeStyle = color;\n            self.ctx.stroke();\n        }\n        function drawOnAllImagesLoaded() {\n            var loaded = true;\n            Object.keys(self.htmlImageCache).forEach(function (html) {\n                if (!self.htmlImageCache[html].complete) {\n                    loaded = false;\n                }\n            });\n            if (loaded) {\n                self.draw();\n            }\n        }\n        function drawHtml(cell) {\n            var img,\n                v = cell.innerHTML || cell.formattedValue,\n                x = cell.x + self.canvasOffsetLeft,\n                y = cell.y + self.canvasOffsetTop;\n            if (self.htmlImageCache[v]) {\n                img = self.htmlImageCache[v];\n                if (img.height !== cell.height || img.width !== cell.width) {\n                    // height and width of the cell has changed, invalidate cache\n                    self.htmlImageCache[v] = undefined;\n                } else {\n                    if (!img.complete) {\n                        return;\n                    }\n                    return self.ctx.drawImage(img, x, y);\n                }\n            }\n            img = new Image(cell.width, cell.height);\n            self.htmlImageCache[v] = img;\n            img.onload = function () {\n                self.ctx.drawImage(img, x, y);\n                drawOnAllImagesLoaded();\n            };\n            img.src = 'data:image/svg+xml;base64,' + btoa(\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + cell.width + '\" height=\"' + cell.height + '\">\\n' +\n                    '<foreignObject class=\"node\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\\n' +\n                    '<body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;padding:0;\">\\n' +\n                    v + '\\n' +\n                    '</body>' +\n                    '</foreignObject>\\n' +\n                    '</svg>\\n'\n            );\n        }\n        function drawOrderByArrow(x, y) {\n            var mt = self.style.columnHeaderOrderByArrowMarginTop * self.scale,\n                ml = self.style.columnHeaderOrderByArrowMarginLeft * self.scale,\n                mr = self.style.columnHeaderOrderByArrowMarginRight * self.scale,\n                aw = self.style.columnHeaderOrderByArrowWidth * self.scale,\n                ah = self.style.columnHeaderOrderByArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.columnHeaderOrderByArrowColor;\n            self.ctx.strokeStyle = self.style.columnHeaderOrderByArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.orderDirection === 'asc') {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y + ah);\n                self.ctx.lineTo(x + aw, y + ah);\n                self.ctx.lineTo(x + (aw * 0.5), y);\n                self.ctx.lineTo(x, y + ah);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function drawTreeArrow(cell, x, y) {\n            var mt = self.style.treeArrowMarginTop * self.scale,\n                mr = self.style.treeArrowMarginRight * self.scale,\n                ml = self.style.treeArrowMarginLeft * self.scale,\n                aw = self.style.treeArrowWidth * self.scale,\n                ah = self.style.treeArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.treeArrowColor;\n            self.ctx.strokeStyle = self.style.treeArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.openChildren[cell.data[self.uniqueId]]) {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y);\n                self.ctx.lineTo(x + ah, y + (aw * 0.5));\n                self.ctx.lineTo(x, y + aw);\n                self.ctx.lineTo(x, y);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function radiusRect(x, y, w, h, radius) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            var r = x + w, b = y + h;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x + radius, y);\n            self.ctx.lineTo(r - radius, y);\n            self.ctx.quadraticCurveTo(r, y, r, y + radius);\n            self.ctx.lineTo(r, y + h - radius);\n            self.ctx.quadraticCurveTo(r, b, r - radius, b);\n            self.ctx.lineTo(x + radius, b);\n            self.ctx.quadraticCurveTo(x, b, x, b - radius);\n            self.ctx.lineTo(x, y + radius);\n            self.ctx.quadraticCurveTo(x, y, x + radius, y);\n        }\n        function fillRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillRect(x, y, w, h);\n        }\n        function strokeRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.strokeRect(x, y, w, h);\n        }\n        function fillText(text, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillText(text, x, y);\n        }\n        function fillCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.fill();\n        }\n        function strokeCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.stroke();\n        }\n        function clipFrozenArea(mode) {\n            // 0 both, 1 rows, 2 cols\n            // self.lastFrozenColumnPixel;\n            // self.lastFrozenRowPixel;\n            self.ctx.beginPath();\n            if (mode === 0) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, self.lastFrozenRowPixel);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 1) {\n                self.ctx.moveTo(0, self.lastFrozenRowPixel);\n                self.ctx.lineTo(0, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 2) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, 0);\n                self.ctx.lineTo(self.width, 0);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n            }\n            self.ctx.clip();\n        }\n        function fillHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return fillCircle(x, y, r * 0.5);\n            }\n            fillRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function strokeHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return strokeCircle(x, y, r * 0.5);\n            }\n            strokeRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function addselectionHandle(c, pos) {\n            var hw = self.style.selectionHandleSize,\n                p = {\n                    tr: function () {\n                        fillHandle(c.x + c.width, c.y, hw);\n                        strokeHandle(c.x + c.width, c.y, hw);\n                    },\n                    br: function () {\n                        fillHandle(c.x + c.width, c.y + c.height, hw);\n                        strokeHandle(c.x + c.width, c.y + c.height, hw);\n                    },\n                    tl: function () {\n                        fillHandle(c.x, c.y, hw);\n                        strokeHandle(c.x, c.y, hw);\n                    },\n                    bl: function () {\n                        fillHandle(c.x, c.y + c.height, hw);\n                        strokeHandle(c.x, c.y + c.height, hw);\n                    }\n                };\n            p[pos]();\n        }\n        function addBorderLine(c, pos) {\n            self.ctx.beginPath();\n            var p = {\n                t: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                },\n                r: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                b: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                l: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                }\n            };\n            p[pos]();\n            self.ctx.stroke();\n        }\n        function addEllipsis(text, width) {\n            var c, w = 0;\n            if (self.ellipsisCache[text] && self.ellipsisCache[text][width]) {\n                return self.ellipsisCache[text][width];\n            }\n            //TODO Add ellipsis back when there is a fast way to do it\n            w = self.ctx.measureText(text).width;\n            self.ellipsisCache[text] = self.ellipsisCache[text] || {};\n            c = {value: text, width: w};\n            self.ellipsisCache[text][width] = c;\n            return c;\n        }\n        function drawText(cell) {\n            var paddingLeft = self.style[cell.style + 'PaddingLeft'] * self.scale,\n                paddingTop = self.style[cell.style + 'PaddingTop'] * self.scale,\n                paddingRight = self.style[cell.style + 'PaddingRight'] * self.scale,\n                paddingBottom = self.style[cell.style + 'PaddingBottom'] * self.scale,\n                vPos = paddingTop + cell.height - (cell.height * 0.5),\n                hPos = paddingLeft + cell.treeArrowWidth + cell.orderByArrowWidth;\n            cell.text = addEllipsis(cell.formattedValue, cell.width - paddingRight - paddingLeft);\n            cell.text.height = cell.fontHeight;\n            if (cell.horizontalAlignment === 'right') {\n                hPos = cell.width - cell.text.width - paddingRight;\n            } else if (cell.horizontalAlignment === 'center') {\n                hPos = (cell.width / 2) - (cell.text.width / 2);\n            }\n            if (cell.verticalAlignment === 'top') {\n                vPos = paddingTop + cell.text.height;\n            } else if (cell.verticalAlignment === 'bottom') {\n                vPos = cell.height - paddingBottom - cell.text.height;\n            }\n            cell.text.x = cell.x + hPos;\n            cell.text.y = cell.y + vPos;\n            fillText(cell.text.value, cell.text.x, cell.text.y);\n        }\n        function getFrozenColumnsWidth() {\n            var w = 0,\n                s = self.getVisibleSchema(),\n                x = 0,\n                n = Math.min(self.frozenColumn, s.length),\n                column;\n            while (x < n) {\n                column = s[self.orders.columns[x]];\n                w += ((self.sizes.columns[column[self.uniqueId]] || column.width || self.style.cellWidth) * self.scale);\n                x += 1;\n            }\n            return w;\n        }\n        /**\n         * Redraws the grid. No matter what the change, this is the only method required to refresh everything.\n         * @memberof canvasDatagrid\n         * @name draw\n         * @method\n         */\n         // r = literal row index\n         // rd = row data array\n         // i = user order index\n         // o = literal data index\n         // y = y drawing cursor\n         // x = x drawing cursor\n         // s = visible schema array\n         // cx = current x drawing cursor sub calculation var\n         // cy = current y drawing cursor sub calculation var\n         // a = static cell (like corner cell)\n         // p = perf counter\n         // l = data length\n         // u = current cell\n         // h = current height\n         // w = current width\n        self.draw = function (internal) {\n            if (self.dispatchEvent('beforedraw', {})) { return; }\n            if (!self.isChildGrid && (!self.height || !self.width)) {\n                return;\n            }\n            if (self.isChildGrid && internal) {\n                requestAnimationFrame(self.parentGrid.draw);\n                return;\n            }\n            if (self.intf.visible === false) {\n                return;\n            }\n            // initial values\n            var checkScrollHeight, rowHeaderCell, p, cx, cy, treeGrid, rowOpen,\n                rowHeight, cornerCell, y, x, c, h, w, s, r, rd, aCell,\n                bc = self.style.borderCollapse === 'collapse',\n                selectionBorders = [],\n                moveBorders = [],\n                selectionHandles = [],\n                rowHeaders = [],\n                frozenColumnWidths = getFrozenColumnsWidth(),\n                l = self.data.length,\n                u = self.currentCell || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                cellHeight = self.style.cellHeight;\n            drawCount += 1;\n            p = performance.now();\n            self.visibleRowHeights = [];\n            // if data length has changed, there is no way to know\n            if (self.data.length > self.orders.rows.length) {\n                self.createRowOrders();\n            }\n            function drawScrollBars() {\n                var v = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-bar'\n                    },\n                    n = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-bar'\n                    },\n                    vb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-box'\n                    },\n                    nb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-box'\n                    },\n                    co = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        isCorner: true,\n                        isScrollBoxCorner: true,\n                        style: 'scroll-box-corner'\n                    },\n                    m = (self.style.scrollBarBoxMargin * 2),\n                    d = self.style.scrollBarBoxMargin * 0.5;\n                self.ctx.strokeStyle = self.style.scrollBarBorderColor;\n                self.ctx.lineWidth = self.style.scrollBarBorderWidth;\n                // vertical\n                v.x += w - self.style.scrollBarWidth - self.style.scrollBarBorderWidth - d;\n                v.y += columnHeaderCellHeight;\n                v.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                v.height = h - columnHeaderCellHeight - self.style.scrollBarWidth - d - m;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(v.x, v.y, v.width, v.height + m);\n                strokeRect(v.x, v.y, v.width, v.height + m);\n                // vertical box\n                vb.x = v.x + self.style.scrollBarBoxMargin;\n                vb.y = columnHeaderCellHeight + self.style.scrollBarBoxMargin\n                    + ((v.height - self.scrollBox.scrollBoxHeight)\n                        * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight));\n                vb.width = self.style.scrollBarBoxWidth;\n                vb.height = self.scrollBox.scrollBoxHeight;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/vertical/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (vb.height < v.height) {\n                    radiusRect(vb.x, vb.y, vb.width, vb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                // horizontal\n                n.x += rowHeaderCellWidth;\n                n.y += h - self.style.scrollBarWidth - d;\n                n.width = w - self.style.scrollBarWidth - rowHeaderCellWidth - d - m;\n                n.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(n.x, n.y, n.width + m, n.height);\n                strokeRect(n.x, n.y, n.width + m, n.height);\n                // horizontal box\n                nb.y = n.y + self.style.scrollBarBoxMargin;\n                nb.x = rowHeaderCellWidth + self.style.scrollBarBoxMargin\n                    + ((n.width - self.scrollBox.scrollBoxWidth)\n                        * (self.scrollBox.scrollLeft / self.scrollBox.scrollWidth));\n                nb.width = self.scrollBox.scrollBoxWidth;\n                nb.height = self.style.scrollBarBoxWidth;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/horizontal/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (nb.width < n.width) {\n                    radiusRect(nb.x, nb.y, nb.width, nb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                //corner\n                self.ctx.strokeStyle = self.style.scrollBarCornerBorderColor;\n                self.ctx.fillStyle = self.style.scrollBarCornerBackgroundColor;\n                co.x = n.x + n.width + m;\n                co.y = v.y + v.height + m;\n                co.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                co.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                radiusRect(co.x, co.y, co.width, co.height, 0);\n                self.ctx.stroke();\n                self.ctx.fill();\n                self.visibleCells.unshift(v);\n                self.visibleCells.unshift(vb);\n                self.visibleCells.unshift(n);\n                self.visibleCells.unshift(nb);\n                self.visibleCells.unshift(co);\n                self.scrollBox.bar = {\n                    v: v,\n                    h: n\n                };\n                self.scrollBox.box = {\n                    v: vb,\n                    h: nb\n                };\n            }\n            function createHandlesOverlayArray(cell) {\n                if (self.attributes.allowMovingSelection || self.mobile) {\n                    if (cell.selectionBorderTop && cell.selectionBorderRight && self.mobile) {\n                        selectionHandles.push([cell, 'tr']);\n                        cell.selectionHandle = 'tr';\n                    }\n                    if (cell.selectionBorderTop && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'tl']);\n                        cell.selectionHandle = 'tl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'bl']);\n                        cell.selectionHandle = 'bl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderRight\n                            && (self.attributes.selectionHandleBehavior !== 'none' || self.mobile)) {\n                        selectionHandles.push([cell, 'br']);\n                        cell.selectionHandle = 'br';\n                    }\n                }\n            }\n            function createBorderOverlayArray(cell, drawArray, propPrefix, offsetPoint) {\n                offsetPoint = offsetPoint || {x: 0, y: 0};\n                cell.selectionBorder = '';\n                if (!cell.isRowHeader\n                        && self.selections[cell.rowIndex + -offsetPoint.y]\n                        && self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) !== -1) {\n                    if ((!self.selections[cell.rowIndex - 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex - 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1\n                            || cell.rowIndex === 0)\n                            && !cell.isHeader) {\n                        drawArray.push([cell, 't']);\n                        cell[propPrefix + 'BorderTop'] = true;\n                        cell[propPrefix + 'Border'] += 't';\n                    }\n                    if (!self.selections[cell.rowIndex + 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex + 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'b']);\n                        cell[propPrefix + 'BorderBottom'] = true;\n                        cell[propPrefix + 'Border'] += 'b';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === 0\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex - 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'l']);\n                        cell[propPrefix + 'BorderLeft'] = true;\n                        cell[propPrefix + 'Border'] += 'l';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === s.length\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'r']);\n                        cell[propPrefix + 'BorderRight'] = true;\n                        cell[propPrefix + 'Border'] += 'r';\n                    }\n                }\n            }\n            function drawCell(d, rowOrderIndex, rowIndex) {\n                return function drawEach(header, headerIndex, columnOrderIndex) {\n                    var cellStyle = header.style || 'cell',\n                        cellGridAttributes,\n                        cell,\n                        isHeader = /HeaderCell/.test(cellStyle),\n                        isCorner = /cornerCell/.test(cellStyle),\n                        isRowHeader = 'rowHeaderCell' === cellStyle,\n                        isColumnHeader = 'columnHeaderCell' === cellStyle,\n                        selected = self.selections[rowOrderIndex] && self.selections[rowOrderIndex].indexOf(columnOrderIndex) !== -1,\n                        hovered = self.hovers[d[self.uniqueId]] && self.hovers[d[self.uniqueId]].indexOf(columnOrderIndex) !== -1,\n                        active = self.activeCell.rowIndex === rowOrderIndex && self.activeCell.columnIndex === columnOrderIndex,\n                        isGrid = typeof d[header.name] === 'object' && d[header.name] !== null && d[header.name] !== undefined,\n                        activeHeader = (self.orders.rows[self.activeCell.rowIndex] === rowOrderIndex\n                                || self.orders.columns[self.activeCell.columnIndex] === columnOrderIndex)\n                            && (columnOrderIndex === -1 || rowOrderIndex === -1)\n                            ? (isRowHeader ? 'activeRowHeaderCell' : 'activeColumnHeaderCell') : false,\n                        val,\n                        f = self.formatters[header.type || 'string'],\n                        orderByArrowSize = 0,\n                        treeArrowSize = 0,\n                        cellWidth = self.sizes.columns[isRowHeader ? 'cornerCell' : header[self.uniqueId]] || header.width,\n                        ev = {\n                            value: d[header.name],\n                            row: d,\n                            header: header\n                        };\n                    if (cellStyle === 'headerCellCap') {\n                        cellWidth = w - x;\n                    }\n                    // if no data or schema are defined, a width is provided to the stub column\n                    if (cellWidth === undefined) {\n                        cellWidth = self.style.cellWidth;\n                    }\n                    cellWidth = cellWidth * self.scale;\n                    if (x + cellWidth + self.style.cellBorderWidth < 0) {\n                        x += cellWidth + self.style.cellBorderWidth;\n                    }\n                    if (active) {\n                        cellStyle = 'activeCell';\n                    }\n                    if (self.visibleRows.indexOf(rowIndex) === -1 && !isHeader) {\n                        self.visibleRows.push(rowIndex);\n                    }\n                    val = self.dispatchEvent('formatcellvalue', ev);\n                    cx = x;\n                    cy = y;\n                    if (cellStyle === 'cornerCell') {\n                        cx = 0;\n                        cy = 0;\n                    } else if (isRowHeader) {\n                        cx = 0;\n                    } else if (isHeader) {\n                        cy = 0;\n                    }\n                    cell = {\n                        type: isGrid ? 'canvas-datagrid-cell' : header.type,\n                        style: cellStyle,\n                        nodeType: 'canvas-datagrid-cell',\n                        x: cx,\n                        y: cy,\n                        horizontalAlignment: self.style[cellStyle + 'HorizontalAlignment'],\n                        verticalAlignment: self.style[cellStyle + 'VerticalAlignment'],\n                        offsetTop: self.canvasOffsetTop + cy,\n                        offsetLeft: self.canvasOffsetLeft + cx,\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        active: active || activeHeader,\n                        hovered: hovered,\n                        selected: selected,\n                        width: cellWidth,\n                        height: cellHeight,\n                        offsetWidth: cellWidth,\n                        offsetHeight: cellHeight,\n                        parentNode: self.intf.parentNode,\n                        offsetParent: self.intf.parentNode,\n                        data: d,\n                        isCorner: isCorner,\n                        isHeader: isHeader,\n                        isColumnHeader: isColumnHeader,\n                        isHeaderCellCap: !!header.isHeaderCellCap,\n                        isRowHeader: isRowHeader,\n                        rowOpen: rowOpen,\n                        header: header,\n                        columnIndex: columnOrderIndex,\n                        rowIndex: rowOrderIndex,\n                        sortColumnIndex: headerIndex,\n                        sortRowIndex: rowIndex,\n                        isGrid: isGrid,\n                        isNormal: !isGrid && !isCorner && !isHeader,\n                        gridId: (self.attributes.name || '') + d[self.uniqueId] + ':' + header[self.uniqueId],\n                        parentGrid: self.intf,\n                        innerHTML: '',\n                        activeHeader: activeHeader,\n                        value: isHeader && !isRowHeader ? (header.title || header.name) : d[header.name]\n                    };\n                    ev.cell = cell;\n                    cell.userHeight = cell.isHeader ? self.sizes.rows[-1] : rowHeight;\n                    cell.userWidth = cell.isHeader ? self.sizes.columns.cornerCell : self.sizes.columns[header[self.uniqueId]];\n                    cell[self.uniqueId] = d[self.uniqueId];\n                    self.visibleCells.unshift(cell);\n                    if (self.dispatchEvent('beforerendercell', ev)) { return; }\n                    self.ctx.fillStyle = self.style[cellStyle + 'BackgroundColor'];\n                    self.ctx.strokeStyle = self.style[cellStyle + 'BorderColor'];\n                    self.ctx.lineWidth = self.style[cellStyle + 'BorderWidth'];\n                    if (hovered) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'HoverBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'HoverBorderColor'];\n                    }\n                    if (selected) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'SelectedBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'SelectedBorderColor'];\n                    }\n                    if (activeHeader) {\n                        self.ctx.fillStyle = self.style[activeHeader + 'BackgroundColor'];\n                    }\n                    self.dispatchEvent('rendercell', ev);\n                    if (cell.isGrid) {\n                        if (cell.height !== rowHeight) {\n                            cell.height = rowHeight || self.style.cellHeightWithChildGrid;\n                            checkScrollHeight = true;\n                        }\n                        cell.width = self.sizes.columns[header[self.uniqueId]] || self.style.cellWidthWithChildGrid;\n                    }\n                    if (rowOpen && !cell.isRowHeader) {\n                        cell.height = self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight;\n                    }\n                    if (!cell.isGrid) {\n                        fillRect(cx, cy, cell.width, cell.height);\n                        strokeRect(cx, cy, cell.width, cell.height);\n                    }\n                    self.ctx.save();\n                    radiusRect(cell.x, cell.y, cell.width, cell.height, 0);\n                    self.ctx.clip();\n                    self.dispatchEvent('afterrendercell', ev);\n                    if (cell.height !== cellHeight && !(rowOpen && !cell.isRowHeader)) {\n                        self.sizes.rows[isHeader ? -1 : d[self.uniqueId]] = cell.height;\n                        checkScrollHeight = true;\n                    }\n                    if (cell.width !== cellWidth) {\n                        self.sizes.columns[header[self.uniqueId]] = cell.width;\n                        checkScrollHeight = true;\n                    }\n                    if (isRowHeader && self.attributes.tree) {\n                        if (!self.dispatchEvent('rendertreearrow', ev)) {\n                            treeArrowSize = drawTreeArrow(cell, self.style[cellStyle + 'PaddingLeft'], cy, 0);\n                        }\n                    }\n                    if ((self.attributes.showRowNumbers && isRowHeader)\n                            || !isRowHeader) {\n                        if (cell.isGrid && !self.dispatchEvent('beforerendercellgrid', ev)) {\n                            if (!self.childGrids[cell.gridId]) {\n                                cellGridAttributes = self.args.cellGridAttributes || self.args;\n                                cellGridAttributes.name = self.attributes.saveAppearance ? cell.gridId : undefined;\n                                cellGridAttributes.parentNode = cell;\n                                cellGridAttributes.data = d[header.name];\n                                ev.cellGridAttributes = cellGridAttributes;\n                                if (self.dispatchEvent('beforecreatecellgrid', ev)) { return; }\n                                self.childGrids[cell.gridId] = self.createGrid(cellGridAttributes);\n                                self.sizes.rows[rd[self.uniqueId]]\n                                    = self.sizes.rows[rd[self.uniqueId]] || self.style.cellGridHeight;\n                                checkScrollHeight = true;\n                            }\n                            cell.grid = self.childGrids[cell.gridId];\n                            cell.grid.parentNode = cell;\n                            cell.grid.visible = true;\n                            cell.grid.draw();\n                            self.dispatchEvent('rendercellgrid', ev);\n                        } else if (!cell.isGrid) {\n                            if (self.childGrids[cell.gridId]) {\n                                self.childGrids[cell.gridId].parentNode.offsetHeight = 0;\n                            }\n                            if (isHeader && self.orderBy === header.name) {\n                                if (!self.dispatchEvent('renderorderbyarrow', ev)) {\n                                    orderByArrowSize = drawOrderByArrow(cx + self.style[cellStyle + 'PaddingLeft'], 0);\n                                }\n                            }\n                            self.ctx.fillStyle = self.style[cellStyle + 'Color'];\n                            if (hovered) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'HoverColor'];\n                            }\n                            if (selected) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'SelectedColor'];\n                            }\n                            if (activeHeader) {\n                                self.ctx.fillStyle = self.style[activeHeader + 'Color'];\n                            }\n                            self.ctx.font = (self.style[cellStyle + 'FontHeight'] * self.scale) + 'px ' + self.style[cellStyle + 'FontName'];\n                            cell.fontHeight = (self.style[cellStyle + 'FontHeight'] * self.scale);\n                            cell.treeArrowWidth = treeArrowSize;\n                            cell.orderByArrowWidth = orderByArrowSize;\n                            val = val !== undefined ? val : f\n                                ? f(ev) : '';\n                            if (val === undefined && !f) {\n                                val = '';\n                                console.warn('canvas-datagrid: Unknown format '\n                                    + header.type + ' add a cellFormater');\n                            }\n                            cell.formattedValue = ((val !== undefined && val !== null) ? val : '').toString();\n                            if (self.columnFilters && self.columnFilters[val] !== undefined && isHeader) {\n                                cell.formattedValue = self.attributes.filterTextPrefix + val;\n                            }\n                            if (!self.dispatchEvent('rendertext', ev)) {\n                                if (cell.innerHTML || header.type === 'html') {\n                                    drawHtml(cell);\n                                } else {\n                                    drawText(cell);\n                                }\n                            }\n                        }\n                    }\n                    if (active) {\n                        aCell = cell;\n                    }\n                    createBorderOverlayArray(cell, selectionBorders, 'selection');\n                    // createBorderOverlayArray calculates data for createHandlesOverlayArray so it must go 2nd\n                    createHandlesOverlayArray(cell);\n                    if (self.movingSelection) {\n                        createBorderOverlayArray(cell, moveBorders, 'move', self.moveOffset);\n                    }\n                    self.ctx.restore();\n                    x += cell.width + (bc ? 0 : self.style.cellBorderWidth);\n                    return cell.width;\n                };\n            }\n            function drawRowHeader(rowData, index, rowOrderIndex) {\n                var a;\n                if (self.attributes.showRowHeaders) {\n                    x = 0;\n                    rowHeaderCell = {'rowHeaderCell': index + 1 };\n                    rowHeaderCell[self.uniqueId] = rowData[self.uniqueId];\n                    a = {\n                        name: 'rowHeaderCell',\n                        width: self.style.rowHeaderCellWidth,\n                        style: 'rowHeaderCell',\n                        type: 'string',\n                        data: rowData[self.uniqueId],\n                        index: -1\n                    };\n                    a[self.uniqueId] = rowData[self.uniqueId];\n                    rowOpen = self.openChildren[rowData[self.uniqueId]];\n                    drawCell(rowHeaderCell, index, rowOrderIndex)(a, -1, -1);\n                }\n            }\n            function drawHeaders() {\n                var d, g = s.length, i, o, columnHeaderCell, header, nonFrozenHeaderWidth;\n                function drawHeaderColumnRange(start, end) {\n                    end = Math.min(end, g);\n                    for (o = start; o < end; o += 1) {\n                        i = self.orders.columns[o];\n                        header = s[i];\n                        d = {\n                            title: header.title,\n                            name: header.name,\n                            width: header.width,\n                            style: 'columnHeaderCell',\n                            type: 'string',\n                            index: o,\n                            order: i\n                        };\n                        columnHeaderCell = {'columnHeaderCell': header.title || header.name};\n                        columnHeaderCell[self.uniqueId] = 'h' + header[self.uniqueId];\n                        d[self.uniqueId] = header[self.uniqueId];\n                        x += drawCell(columnHeaderCell, -1, -1)(d, o, i);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                }\n                rowHeaders.forEach(function (rArgs, rhIndex) {\n                    y = rArgs[3];\n                    cellHeight = rArgs[4];\n                    if (rhIndex === self.frozenRow) {\n                        self.ctx.save();\n                        radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                        self.ctx.clip();\n                    }\n                    drawRowHeader(rArgs[0], rArgs[1], rArgs[2]);\n                });\n                self.ctx.restore();\n                if (self.attributes.showColumnHeaders) {\n                    x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    x += frozenColumnWidths;\n                    y = 0;\n                    // cell height might have changed during drawing\n                    cellHeight = self.getColumnHeaderCellHeight();\n                    drawHeaderColumnRange(self.scrollIndexLeft + self.frozenColumn, g);\n                    nonFrozenHeaderWidth = x;\n                    x = self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    drawHeaderColumnRange(0, self.frozenColumn);\n                    // fill in the space right of the headers\n                    x = nonFrozenHeaderWidth;\n                    if (x < w) {\n                        c = {\n                            name: '',\n                            width: self.style.scrollBarWidth,\n                            style: 'headerCellCap',\n                            isHeaderCell: true,\n                            isHeaderCellCap: true,\n                            type: 'string',\n                            index: s.length\n                        };\n                        c[self.uniqueId] = 'columnHeaderCell';\n                        drawCell({endCap: ''}, -1, -1)(c, -1, -1);\n                    }\n                    // fill in the space right of the headers\n                    if (self.attributes.showRowHeaders) {\n                        cornerCell = {'cornerCell': '' };\n                        cornerCell[self.uniqueId] = 'cornerCell';\n                        x = 0;\n                        c = {\n                            name: 'cornerCell',\n                            width: self.style.rowHeaderCellWidth,\n                            style: 'cornerCell',\n                            type: 'string',\n                            index: -1\n                        };\n                        c[self.uniqueId] = 'cornerCell';\n                        drawCell(cornerCell, -1, -1)(c, -1, -1);\n                    }\n                }\n            }\n            function drawRow(r, d) {\n                var i, treeHeight, rowSansTreeHeight, o, g = s.length;\n                if (y - (cellHeight * 2) > h) {\n                    return false;\n                }\n                rd = self.data[r];\n                rowOpen = self.openChildren[rd[self.uniqueId]];\n                rowSansTreeHeight = (self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight) * self.scale;\n                treeHeight = (rowOpen ? self.sizes.trees[rd[self.uniqueId]] : 0) * self.scale;\n                rowHeight = (rowSansTreeHeight + treeHeight);\n                if (y < -rowHeight) {\n                    return false;\n                }\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                cellHeight = rowHeight;\n                if (self.attributes.allowFreezingColumns) {\n                    x += frozenColumnWidths;\n                }\n                //draw normal columns\n                for (o = (self.scrollIndexLeft + self.frozenColumn); o < g; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        self.scrollIndexRight = o;\n                        self.scrollPixelRight = x;\n                        break;\n                    }\n                }\n                //draw frozen columns\n                x = 0;\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                for (o = 0; o < self.frozenColumn; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        break;\n                    }\n                }\n                self.lastFrozenColumnPixel = x;\n                // cell height might have changed during drawing\n                cellHeight = rowHeight;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                // don't draw a tree for the new row\n                treeGrid = self.childGrids[rd[self.uniqueId]];\n                if (r !== self.data.length && rowOpen) {\n                    treeGrid.visible = true;\n                    treeGrid.parentNode = {\n                        offsetTop: y + rowSansTreeHeight + self.canvasOffsetTop,\n                        offsetLeft: rowHeaderCellWidth - 1 + self.canvasOffsetLeft,\n                        offsetHeight: treeHeight,\n                        offsetWidth: self.width - rowHeaderCellWidth - self.style.scrollBarWidth - 1,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: self.style,\n                        nodeType: 'canvas-datagrid-tree',\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        rowIndex: r\n                    };\n                    self.visibleCells.unshift({\n                        rowIndex: r,\n                        columnIndex: 0,\n                        y: treeGrid.parentNode.offsetTop,\n                        x: treeGrid.parentNode.offsetLeft,\n                        height: treeGrid.height,\n                        width: treeGrid.width,\n                        style: 'tree-grid',\n                        type: treeGrid.parentNode.nodeType\n                    });\n                    treeGrid.draw();\n                } else if (treeGrid) {\n                    treeGrid.parentNode.offsetHeight = 0;\n                    delete self.sizes.trees[rd[self.uniqueId]];\n                }\n                rowHeaders.push([rd, r, d, y, rowHeight]);\n                self.visibleRowHeights[r] = rowHeight;\n                y += cellHeight + (bc ? 0 : self.style.cellBorderWidth);\n                return true;\n            }\n            function initDraw() {\n                self.visibleRows = [];\n                s = self.getVisibleSchema();\n                self.visibleCells = [];\n                self.canvasOffsetTop = self.isChildGrid ? self.parentNode.offsetTop : 0;\n                self.canvasOffsetLeft = self.isChildGrid ? self.parentNode.offsetLeft : 0;\n                h = self.height;\n                w = self.width;\n                if (!self.isChildGrid) {\n                    self.ctx.scale(window.devicePixelRatio, window.devicePixelRatio);\n                }\n            }\n            function drawBackground() {\n                radiusRect(0, 0, w, h, 0);\n                self.ctx.clip();\n                self.ctx.fillStyle = self.style.gridBackgroundColor;\n                fillRect(0, 0, w, h);\n            }\n            function drawFrozenRows() {\n                var n, ln = Math.min(self.data.length, self.frozenRow);\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                y = columnHeaderCellHeight;\n                for (r = 0; r < ln; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.allowFreezingRows) {\n                    // HACK great, another stupid magic number.\n                    // Background will appear as a 0.5px artifact behind the row freeze bar without this hack\n                    y += self.style.frozenMarkerBorderWidth + self.style.frozenMarkerWidth - 0.4999999999;\n                }\n                self.lastFrozenRowPixel = y;\n            }\n            function drawRows() {\n                self.ctx.save();\n                if (self.frozenRow > 0) {\n                    radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                    self.ctx.clip();\n                }\n                var o, n, i, g = s.length;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                if (!self.attributes.snapToRow) {\n                    y += -self.scrollBox.scrollTop + self.scrollPixelTop;\n                }\n                for (r = self.frozenRow + self.scrollIndexTop; r < l; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        self.scrollIndexBottom = r;\n                        self.scrollPixelBottom = y;\n                        break;\n                    }\n                }\n                if (self.attributes.showNewRow) {\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    rowHeight = cellHeight = self.style.cellHeight;\n                    rowOpen = false;\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        x += drawCell(self.newRow, self.data.length, self.data.length)(s[i], i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    rowHeaders.push([self.newRow, self.data.length, self.data.length, y, rowHeight]);\n                }\n                self.ctx.restore();\n            }\n            function drawMoveMarkers() {\n                if (!self.movingSelection) { return; }\n                self.ctx.lineWidth = self.style.moveOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.moveOverlayBorderColor;\n                self.ctx.setLineDash(self.style.moveOverlayBorderSegments);\n                moveBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n                self.ctx.setLineDash([]);\n            }\n            function drawReorderMarkers() {\n                if (!self.reorderObject) { return; }\n                var b = {\n                        height: self.reorderObject.height,\n                        width: self.reorderObject.width,\n                        x: self.reorderObject.x + self.reorderObject.dragOffset.x,\n                        y: self.reorderObject.y + self.reorderObject.dragOffset.y\n                    },\n                    m = {\n                        width: w,\n                        height: h,\n                        x: 0,\n                        y: 0\n                    };\n                self.ctx.fillStyle = self.style.reorderMarkerBackgroundColor;\n                self.ctx.lineWidth = self.style.reorderMarkerBorderWidth;\n                self.ctx.strokeStyle = self.style.reorderMarkerBorderColor;\n                if (self.dragMode === 'row-reorder') {\n                    b.width = w;\n                    b.x = 0;\n                    m.width = w;\n                    m.height = self.currentCell.height;\n                    m.y = self.currentCell.y;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.rowIndex !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex > -1\n                            && self.currentCell.rowIndex < l) {\n                        addBorderLine(m, self.reorderTarget.sortRowIndex > self.reorderObject.sortRowIndex ? 'b' : 't');\n                    }\n                } else if (self.dragMode === 'column-reorder' && self.reorderObject) {\n                    b.height = h;\n                    b.y = 0;\n                    m.height = h;\n                    m.width = self.currentCell.width;\n                    m.y = 0;\n                    m.x = self.currentCell.x;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.columnIndex !== self.reorderObject.columnIndex\n                            && self.currentCell.columnIndex > -1\n                            && self.currentCell.columnIndex < s.length) {\n                        addBorderLine(m, self.reorderTarget.sortColumnIndex > self.reorderObject.sortColumnIndex ? 'r' : 'l');\n                    }\n                }\n            }\n            function drawBorder() {\n                self.ctx.lineWidth = self.style.gridBorderWidth;\n                self.ctx.strokeStyle = self.style.gridBorderColor;\n                strokeRect(0, 0, self.width, self.height);\n            }\n            function drawSelectionBorders() {\n                self.ctx.lineWidth = self.style.selectionOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.selectionOverlayBorderColor;\n                function dsb(c) {\n                    addBorderLine(c[0], c[1]);\n                }\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.save();\n                clipFrozenArea(0);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(1);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(2);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n            }\n            function drawSelectionHandles() {\n                if (self.mobile || self.attributes.allowMovingSelection) {\n                    self.ctx.lineWidth = self.style.selectionHandleBorderWidth;\n                    self.ctx.strokeStyle = self.style.selectionHandleBorderColor;\n                    self.ctx.fillStyle = self.style.selectionHandleColor;\n                    selectionHandles.forEach(function (c) {\n                        addselectionHandle(c[0], c[1]);\n                        var az = self.attributes.touchSelectHandleZone / 2,\n                            ax = c[0].x + (c[1] === 'tl' || c[1] === 'bl' ? 0 : c[0].width) - az,\n                            ay = c[0].y + (c[1] === 'bl' || c[1] === 'br' ? c[0].height : 0) - az;\n                        self.visibleCells.unshift({\n                            x: ax,\n                            y: ay,\n                            height: self.style.selectionHandleSize + az,\n                            width: self.style.selectionHandleSize + az,\n                            style: 'selection-handle-' + c[1]\n                        });\n                    });\n                }\n            }\n            function drawActiveCell() {\n                if (!aCell) { return; }\n                self.ctx.save();\n                var cl = self.activeCell.columnIndex + 1 > self.frozenColumn || self.activeCell.rowIndex + 1 > self.frozenRow,\n                    acx = cl ? self.lastFrozenColumnPixel : 0,\n                    acy = cl ? self.lastFrozenRowPixel : 0,\n                    acw = cl ? self.width - self.lastFrozenColumnPixel : self.width,\n                    ach = cl ? self.height - self.lastFrozenRowPixel : self.height;\n                radiusRect(acx, acy, acw, ach, 0);\n                self.ctx.clip();\n                if (self.attributes.selectionMode === 'row') {\n                    if (self.activeCell && self.activeCell.rowIndex === aCell.rowIndex) {\n                        self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                        self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                        strokeRect(0, aCell.y, self.getHeaderWidth() + rowHeaderCellWidth, self.visibleRowHeights[aCell.rowIndex]);\n                    }\n                } else {\n                    self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                    self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                    strokeRect(aCell.x, aCell.y, aCell.width, aCell.height);\n                }\n                self.ctx.restore();\n            }\n            function drawFrozenMarkers() {\n                var my = self.lastFrozenRowPixel - self.style.frozenMarkerWidth,\n                    mx = self.lastFrozenColumnPixel - self.style.frozenMarkerBorderWidth,\n                    xHover = self.currentCell && self.currentCell.style === 'frozen-row-marker',\n                    yHover = self.currentCell && self.currentCell.style === 'frozen-column-marker';\n                self.ctx.lineWidth = self.style.frozenMarkerBorderWidth;\n                if (self.attributes.allowFreezingColumns) {\n                    self.ctx.fillStyle = yHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = yHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    strokeRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    self.visibleCells.unshift({\n                        x: mx,\n                        y: 0,\n                        height: self.height,\n                        width: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        style: 'frozen-column-marker'\n                    });\n                }\n                if (self.attributes.allowFreezingRows) {\n                    self.ctx.fillStyle = xHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = xHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    strokeRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    self.visibleCells.unshift({\n                        x: 0,\n                        y: my,\n                        height: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        width: self.width,\n                        style: 'frozen-row-marker'\n                    });\n                }\n                if (self.freezeMarkerPosition) {\n                    self.ctx.fillStyle = self.style.frozenMarkerActiveColor;\n                    self.ctx.strokeStyle = self.style.frozenMarkerActiveBorderColor;\n                    if (self.dragMode === 'frozen-column-marker') {\n                        fillRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                        strokeRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                    } else {\n                        fillRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                        strokeRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                    }\n                }\n            }\n            function drawPerfLines() {\n                if (!self.attributes.showPerformance) { return; }\n                var pw = 250,\n                    px = self.width - pw - self.style.scrollBarWidth - (self.style.scrollBarBorderWidth * 2),\n                    py = columnHeaderCellHeight,\n                    ph = 100;\n                if (scrollDebugCounters.length === 0) { scrollDebugCounters = self.fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (touchPPSCounters.length === 0) { touchPPSCounters = self.fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (entityCount.length === 0) { entityCount = self.fillArray(0, perfWindowSize, 1, 0); }\n                self.ctx.lineWidth = 0.5;\n                function dpl(name, perfArr, arrIndex, max, color, useAbs, rowIndex) {\n                    var v;\n                    drawPerfLine(pw, ph, px, py, perfArr, arrIndex, max, color, useAbs);\n                    self.ctx.fillStyle = color;\n                    fillRect(3 + px, py + 9 + (rowIndex * 11), 8, 8);\n                    self.ctx.fillStyle = '#999999';\n                    v = arrIndex !== undefined ? perfArr[0][arrIndex] : perfArr[0];\n                    fillText(name + ' ' + (isNaN(v) ? 0 : v).toFixed(3), 14 + px, py + 16 + (rowIndex * 11));\n                }\n                self.ctx.textAlign = 'left';\n                self.ctx.font = '8px sans-serif';\n                self.ctx.fillStyle = 'rgba(29, 25, 26, 1.00)';\n                fillRect(px, py, pw, ph);\n                [['Scroll Height', scrollDebugCounters, 0, self.scrollBox.scrollHeight, 'rgba(248, 33, 103, 1.00)', false],\n                    ['Scroll Width', scrollDebugCounters, 1, self.scrollBox.scrollWidth, 'rgba(66, 255, 27, 1.00)', false],\n                    ['Performance', perfCounters, undefined, 200, 'rgba(252, 255, 37, 1.00)', false],\n                    ['Entities', entityCount, undefined, 1500, 'rgba(76, 231, 239, 1.00)', false],\n                    ['TouchPPSX', touchPPSCounters, 0, 1000, 'rgba(246, 102, 24, 1.00)', true],\n                    ['TouchPPSY', touchPPSCounters, 1, 1000, 'purple', true]\n                    ].forEach(function (i, index) {\n                    i.push(index);\n                    dpl.apply(null, i);\n                });\n                self.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n                entityCount.pop();\n                entityCount.unshift(self.visibleCells.length);\n                scrollDebugCounters.pop();\n                scrollDebugCounters.unshift([self.scrollBox.scrollTop, self.scrollBox.scrollLeft]);\n                touchPPSCounters.pop();\n                touchPPSCounters.unshift([self.yPPS, self.xPPS]);\n            }\n            function drawDebug() {\n                self.ctx.save();\n                var d;\n                if (self.attributes.showPerformance || self.attributes.debug) {\n                    if (perfCounters.length === 0) { perfCounters = self.fillArray(0, perfWindowSize, 1, 0); }\n                    perfCounters.pop();\n                    perfCounters.unshift(performance.now() - p);\n                }\n                if (!self.attributes.debug) {\n                    self.ctx.restore();\n                    return;\n                }\n                self.ctx.font = '14px sans-serif';\n                d = {};\n                d.perf = (perfCounters.reduce(function (a, b) {\n                    return a + b;\n                }, 0) / Math.min(drawCount, perfCounters.length)).toFixed(1);\n                d.htmlImages = Object.keys(self.htmlImageCache).length;\n                d.reorderObject = 'x: ' + (self.reorderObject || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderObject || {rowIndex: 0}).rowIndex;\n                d.reorderTarget = 'x: ' + (self.reorderTarget || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderTarget || {rowIndex: 0}).rowIndex;\n                d.scale = self.scale;\n                d.startScale = self.startScale;\n                d.scaleDelta = self.scaleDelta;\n                d.zoomDeltaStart = self.zoomDeltaStart;\n                d.touchLength = self.touchLength;\n                d.touches = 'y0: ' + (self.touchPosition || {y: 0}).y + ' y1: ' + (self.touchPosition1 || {y: 0}).y;\n                d.scrollBox = self.scrollBox.toString();\n                d.scrollIndex = 'x: ' + self.scrollIndexLeft + ', y: ' + self.scrollIndexTop;\n                d.scrollPixel = 'x: ' + self.scrollPixelLeft + ', y: ' + self.scrollPixelTop;\n                d.canvasOffset = 'x: ' + self.canvasOffsetLeft + ', y: ' + self.canvasOffsetTop;\n                d.touchDelta = 'x: ' + self.touchDelta.x + ', y: ' + self.touchDelta.y;\n                d.touchAnimateTo = 'x: ' + self.touchAnimateTo.x + ', y: ' + self.touchAnimateTo.y;\n                d.scrollAnimation = 'x: ' + self.scrollAnimation.x + ', y: ' + self.scrollAnimation.y;\n                d.touchPPS = 'x: ' + self.xPPS + ', y: ' + self.yPPS;\n                d.touchPPST = 'x: ' + self.xPPST + ', y: ' + self.yPPST;\n                d.touchDuration = self.touchDuration;\n                d.pointerLockPosition =  self.pointerLockPosition ?\n                        self.pointerLockPosition.x + ', ' + self.pointerLockPosition.y : '';\n                d.size = 'w: ' + self.width + ', h: ' + self.height;\n                d.mouse = 'x: ' + self.mouse.x + ', y: ' + self.mouse.y;\n                d.touch = !self.touchStart\n                    ? '' : 'x: ' + self.touchStart.x + ', y: ' + self.touchStart.y;\n                d.entities = self.visibleCells.length;\n                d.hasFocus = self.hasFocus;\n                d.dragMode = self.dragMode;\n                if (self.currentCell) {\n                    d.columnIndex = self.currentCell.columnIndex;\n                    d.rowIndex = self.currentCell.rowIndex;\n                    d.sortColumnIndex = self.currentCell.sortColumnIndex;\n                    d.sortRowIndex = self.currentCell.sortRowIndex;\n                    d.context = self.currentCell.context;\n                    d.dragContext = self.currentCell.dragContext;\n                    d.style = self.currentCell.style;\n                    d.type = self.currentCell.type;\n                }\n                self.ctx.textAlign = 'right';\n                self.ctx.fillStyle = 'rgba(0, 0, 0, .60)';\n                fillRect(0, 0, self.width, self.height);\n                Object.keys(d).forEach(function (key, index) {\n                    var m = key + ': ' + d[key],\n                        lh = 14;\n                    self.ctx.fillStyle = 'rgba(37, 254, 21, 1)';\n                    fillText(m, w - 20, 140 + (index * lh));\n                });\n                self.ctx.restore();\n            }\n            self.ctx.save();\n            initDraw();\n            drawBackground();\n            drawFrozenRows();\n            drawRows();\n            drawActiveCell();\n            drawHeaders();\n            drawFrozenMarkers();\n            drawSelectionBorders();\n            drawSelectionHandles();\n            drawReorderMarkers();\n            drawMoveMarkers();\n            drawScrollBars();\n            if (checkScrollHeight) {\n                self.resize(true);\n            }\n            drawBorder();\n            drawDebug();\n            drawPerfLines();\n            if (self.dispatchEvent('afterdraw', {})) { return; }\n            self.ctx.restore();\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/draw.js\n// module id = 3\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var wheeling;\n        self.stopPropagation = function (e) { e.stopPropagation(); };\n        /**\n         * Adds an event listener to the given event.\n         * @memberof canvasDatagrid\n         * @name addEventListener\n         * @method\n         * @param {string} ev The name of the event to subscribe to.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.addEventListener = function (ev, fn) {\n            self.events[ev] = self.events[ev] || [];\n            self.events[ev].unshift(fn);\n        };\n        /**\n         * Removes the given listener function from the given event.  Must be an actual reference to the function that was bound.\n         * @memberof canvasDatagrid\n         * @name removeEventListener\n         * @method\n         * @param {string} ev The name of the event to unsubscribe from.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.removeEventListener = function (ev, fn) {\n            (self.events[ev] || []).forEach(function removeEachListener(sfn, idx) {\n                if (fn === sfn) {\n                    self.events[ev].splice(idx, 1);\n                }\n            });\n        };\n        /**\n         * Fires the given event, padding an event object to the event subscribers.\n         * @memberof canvasDatagrid\n         * @name dispatchEvent\n         * @method\n         * @param {number} ev The name of the event to dispatch.\n         * @param {number} e The event object.\n         */\n        self.dispatchEvent = function (ev, e) {\n            var defaultPrevented;\n            function preventDefault() {\n                defaultPrevented = true;\n            }\n            if (!self.events[ev]) { return; }\n            self.events[ev].forEach(function dispatchEachEvent(fn) {\n                e.ctx = self.ctx;\n                e.preventDefault = preventDefault;\n                fn.apply(self.intf, [e]);\n            });\n            return defaultPrevented;\n        };\n        self.resize = function (drawAfterResize) {\n            if (!self.canvas) { return; }\n            var bm = self.style.borderCollapse === 'collapse' ? 1 : 2,\n                cellBorder = self.style.cellBorderWidth * bm,\n                columnHeaderCellBorder = self.style.columnHeaderCellBorderWidth * bm,\n                scrollHeight,\n                scrollWidth,\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                ch = self.style.cellHeight,\n                // TODO: What the hell are these numbers!?  They are probably some value in the style.\n                scrollDragPositionOffsetY = 30,\n                scrollDragPositionOffsetX = 15;\n            scrollHeight = self.data.reduce(function reduceData(accumulator, row, rowIndex) {\n                return accumulator\n                    + (((self.sizes.rows[row[self.uniqueId]] || ch) + (self.sizes.trees[row[self.uniqueId]] || 0)) * self.scale)\n                    + cellBorder\n                    // HACK? if an expanded tree row is frozen it is necessary to add the tree row's height a second time.\n                    + (self.frozenRow > rowIndex ? (self.sizes.trees[row[self.uniqueId]] || 0) : 0);\n            }, 0) || 0;\n            scrollWidth = self.getVisibleSchema().reduce(function reduceSchema(accumulator, column) {\n                if (column.hidden) { return accumulator; }\n                return accumulator + ((self.sizes.columns[column[self.uniqueId]] || column.width || self.style.cellWidth) * self.scale) + cellBorder;\n            }, 0) || 0;\n            if (self.isChildGrid) {\n                self.width = self.parentNode.offsetWidth;\n                self.height = self.parentNode.offsetHeight;\n            } else {\n                self.height = self.canvas.offsetHeight;\n                self.width = self.canvas.offsetWidth;\n                self.canvas.width = self.width * window.devicePixelRatio;\n                self.canvas.height = self.height * window.devicePixelRatio;\n                self.canvasOffsetLeft = self.args.canvasOffsetLeft || 0;\n                self.canvasOffsetTop = self.args.canvasOffsetTop || 0;\n            }\n            if (self.attributes.showNewRow) {\n                scrollHeight += ch + cellBorder;\n            }\n            self.scrollBox.width = self.width - rowHeaderCellWidth;\n            self.scrollBox.height = self.height - columnHeaderCellHeight - columnHeaderCellBorder;\n            self.scrollBox.top = columnHeaderCellHeight + columnHeaderCellBorder;\n            self.scrollBox.left = rowHeaderCellWidth;\n            self.scrollBox.scrollHeight = scrollHeight + self.style.scrollBarWidth - self.scrollBox.height;\n            self.scrollBox.scrollWidth = scrollWidth + self.style.scrollBarWidth - self.scrollBox.width;\n            self.scrollBox.widthBoxRatio = ((self.scrollBox.width - scrollDragPositionOffsetX)\n                / (self.scrollBox.scrollWidth + self.scrollBox.width - scrollDragPositionOffsetX));\n            self.scrollBox.scrollBoxWidth = self.scrollBox.width\n                * self.scrollBox.widthBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.heightBoxRatio = ((self.scrollBox.height - scrollDragPositionOffsetY)\n                / (self.scrollBox.scrollHeight + (self.scrollBox.height - scrollDragPositionOffsetY)));\n            self.scrollBox.scrollBoxHeight = self.scrollBox.height\n                * self.scrollBox.heightBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.scrollBoxWidth = Math.max(self.scrollBox.scrollBoxWidth, self.style.scrollBarBoxMinSize);\n            self.scrollBox.scrollBoxHeight = Math.max(self.scrollBox.scrollBoxHeight, self.style.scrollBarBoxMinSize);\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            self.resizeEditInput();\n            self.scroll(true);\n            if (drawAfterResize) {\n                self.draw(true);\n            }\n            self.dispatchEvent('resize', {});\n            return true;\n        };\n        self.scroll = function (dontDraw) {\n            var bm = self.style.borderCollapse === 'collapse' ? 1 : 2,\n                s = self.getVisibleSchema(),\n                cellBorder = self.style.cellBorderWidth * bm,\n                ch = self.style.cellHeight;\n            self.scrollIndexTop = 0;\n            self.scrollPixelTop = 0;\n            self.scrollIndexLeft = 0;\n            self.scrollPixelLeft = 0;\n            while (self.scrollPixelTop < self.scrollBox.scrollTop && self.scrollIndexTop < self.data.length) {\n                self.scrollPixelTop +=\n                    (((self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || ch)\n                        + (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0)) * self.scale)\n                    + cellBorder;\n                self.scrollIndexTop += 1;\n            }\n            while (self.scrollPixelLeft < self.scrollBox.scrollLeft && self.scrollIndexLeft < s.length) {\n                self.scrollPixelLeft +=\n                    ((self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width) * self.scale)\n                    + cellBorder;\n                self.scrollIndexLeft += 1;\n            }\n            if (self.data.length > 0) {\n                self.scrollIndexLeft = Math.max(self.scrollIndexLeft - 1, 0);\n                self.scrollPixelLeft = Math.max(self.scrollPixelLeft\n                    - ((self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width) * self.scale), 0);\n                self.scrollIndexTop = Math.max(self.scrollIndexTop - 1, 0);\n                self.scrollPixelTop = Math.max((self.scrollPixelTop\n                    - ((self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || ch)\n                    + (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0)) * self.scale), 0);\n            }\n            self.ellipsisCache = {};\n            if (!dontDraw) {\n                self.draw(true);\n            }\n            //TODO: figure out why this has to be delayed for child grids\n            //BUG: wheeling event on 3rd level hierarchy fails to move input box\n            requestAnimationFrame(self.resizeEditInput);\n            self.dispatchEvent('scroll', {top: self.scrollBox.scrollTop, left: self.scrollBox.scrollLeft});\n        };\n        self.mousemove = function (e, overridePos) {\n            if (self.contextMenu || self.input) {\n                return;\n            }\n            self.mouse = overridePos || self.getLayerPos(e);\n            var ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                i,\n                vs = self.getVisibleSchema(),\n                dragBounds,\n                sBounds,\n                x = self.mouse.x,\n                y = self.mouse.y,\n                o = self.getCellAt(x, y),\n                delta,\n                ev = {NativeEvent: e, cell: o, x: x, y: y},\n                previousCell = self.currentCell;\n            clearTimeout(self.scrollTimer);\n            if (!self.isInGrid({x: x, y: y})) {\n                self.hasFocus = false;\n            }\n            if (self.dispatchEvent('mousemove', ev)) {\n                return;\n            }\n            if (o && self.currentCell && (self.currentCell.rowIndex !== o.rowIndex\n                    || self.currentCell.columnIndex !== o.columnIndex)) {\n                self.cellBoundaryCrossed = true;\n                ev.cell = previousCell;\n                self.dispatchEvent('cellmouseout', ev);\n                ev.cell = o;\n                self.dispatchEvent('cellmouseover', ev);\n            }\n            self.currentCell = o;\n            if (!self.hasFocus) {\n                return;\n            }\n            self.hovers = {};\n            if (!self.draggingItem\n                    && o\n                    && self.scrollModes.indexOf(o.context) === -1) {\n                self.dragItem = o;\n                self.dragMode = o.dragContext;\n                self.canvas.style.cursor = o.context;\n                if (o.context === 'cell' && o.data) {\n                    self.canvas.style.cursor = 'default';\n                    self.hovers[o.data[self.uniqueId]] = [o.columnIndex];\n                }\n                if ((self.selecting || self.reorderObject)\n                        && o.context === 'cell'\n                        && o.data) {\n                    sBounds = self.getSelectionBounds();\n                    delta = {\n                        x: Math.abs(self.dragStart.x - x),\n                        y: Math.abs(self.dragStart.y - y)\n                    };\n                    if (self.dragStartObject.columnIndex !== -1 && e.shiftKey) {\n                        self.dragStartObject = {\n                            rowIndex: self.activeCell.rowIndex,\n                            columnIndex: self.activeCell.columnIndex\n                        };\n                    }\n                    dragBounds = {\n                        top: Math.min(self.dragStartObject.rowIndex, o.rowIndex),\n                        left: Math.min(self.dragStartObject.columnIndex, o.columnIndex),\n                        bottom: Math.max(self.dragStartObject.rowIndex, o.rowIndex),\n                        right: Math.max(self.dragStartObject.columnIndex, o.columnIndex)\n                    };\n                    if (self.dragStartObject.columnIndex === -1) {\n                        dragBounds.left = -1;\n                        dragBounds.right = vs.length - 1;\n                        dragBounds.top = Math.min(sBounds.top, o.rowIndex);\n                        dragBounds.bottom = Math.max(sBounds.bottom, o.rowIndex);\n                    }\n                    if (self.dragStartObject.rowIndex !== o.rowIndex\n                                || self.dragStartObject.columnIndex !== o.columnIndex) {\n                        self.ignoreNextClick = true;\n                    }\n                    if (self.cellBoundaryCrossed || (delta.x === 0 && delta.y === 0) || (self.attributes.selectionMode === 'row')) {\n                        if ((self.attributes.selectionMode === 'row') || self.dragStartObject.columnIndex === -1) {\n                            self.selectRow(o.rowIndex, ctrl, null, true);\n                        } else {\n                            if (!self.dragAddToSelection && o.rowIndex !== undefined) {\n                                if (self.selections[o.rowIndex] && self.selections[o.rowIndex].indexOf(o.columnIndex) !== -1) {\n                                    self.selections[o.rowIndex].splice(self.selections[o.rowIndex].indexOf(o.columnIndex), 1);\n                                }\n                            } else {\n                                self.selections[o.rowIndex] = self.selections[o.rowIndex] || [];\n                                if (self.selections[o.rowIndex].indexOf(o.columnIndex) === -1) {\n                                    self.selections[o.rowIndex].push(o.columnIndex);\n                                }\n                            }\n                        }\n                    }\n                    if ((!self.selectionBounds || (dragBounds.top !== self.selectionBounds.top\n                            || dragBounds.left !== self.selectionBounds.left\n                            || dragBounds.bottom !== self.selectionBounds.bottom\n                            || dragBounds.right !== self.selectionBounds.right)) && !ctrl) {\n                        self.selections = [];\n                        sBounds = dragBounds;\n                        if (self.attributes.selectionMode === 'row') {\n                            for (i = sBounds.top; i <= sBounds.bottom; i += 1) {\n                                self.selectRow(i, true, null, true);\n                            }\n                        } else {\n                            self.selectArea(sBounds, true);\n                        }\n                    }\n                    self.autoScrollZone(e, x, y, ctrl);\n                }\n            }\n            self.cellBoundaryCrossed = false;\n            self.draw(true);\n        };\n        self.click = function (e, overridePos) {\n            var i,\n                ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                pos = overridePos || self.getLayerPos(e);\n            self.currentCell = self.getCellAt(pos.x, pos.y);\n            if (self.currentCell.grid !== undefined) {\n                return;\n            }\n            function checkSelectionChange() {\n                self.dispatchEvent('selectionchanged', {\n                    selectedData: self.getSelectedData(),\n                    selections: self.selections,\n                    selectionBounds: self.selectionBounds\n                });\n            }\n            if (self.input) {\n                self.endEdit();\n            }\n            if (self.ignoreNextClick) {\n                self.ignoreNextClick = false;\n                return;\n            }\n            i = self.currentCell;\n            if (self.dispatchEvent('click', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (['rowHeaderCell', 'columnHeaderCell'].indexOf(self.currentCell.style) === -1 && !ctrl) {\n                self.setActiveCell(i.columnIndex, i.rowIndex);\n            }\n            if (self.currentCell.context === 'cell') {\n                if (self.currentCell.style === 'cornerCell') {\n                    self.selectAll();\n                    self.draw();\n                    checkSelectionChange();\n                    return;\n                }\n                if (self.currentCell.style === 'columnHeaderCell') {\n                    if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                        if (self.orderBy === i.header.name) {\n                            self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                        } else {\n                            self.orderDirection = 'asc';\n                        }\n                        self.order(i.header.name, self.orderDirection);\n                        checkSelectionChange();\n                        return;\n                    }\n                    if (self.attributes.columnHeaderClickBehavior === 'select') {\n                        self.selectColumn(i.header.index, ctrl, e.shiftKey, true);\n                        checkSelectionChange();\n                        self.draw();\n                        return;\n                    }\n                }\n                self.selections[i.rowIndex] = self.selections[i.rowIndex] || [];\n                if (((self.attributes.selectionMode === 'row') || self.currentCell.style === 'rowHeaderCell')) {\n                    if (self.currentCell.style === 'rowHeaderCell'\n                            && self.attributes.tree && pos.x > 0\n                            && pos.x - self.currentCell.x < self.style.treeArrowWidth\n                            + self.style.treeArrowMarginLeft\n                            + self.style.treeArrowMarginRight + self.style.treeArrowClickRadius\n                            && pos.y - self.currentCell.y < self.style.treeArrowHeight\n                            + self.style.treeArrowMarginTop + self.style.treeArrowClickRadius\n                            && pos.y > 0) {\n                        self.toggleTree(i.rowIndex);\n                        return;\n                    }\n                }\n                if (e.shiftKey && !ctrl) {\n                    self.selectionBounds = self.getSelectionBounds();\n                    self.selectArea(undefined, false);\n                }\n            }\n            checkSelectionChange();\n            self.draw(true);\n        };\n        self.dragResizeColumn = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = self.resizingStartingWidth + pos.x - self.dragStart.x;\n            y = self.resizingStartingHeight + pos.y - self.dragStart.y;\n            if (x < self.style.minColumnWidth) {\n                x = self.style.minColumnWidth;\n            }\n            if (y < self.style.minRowHeight) {\n                y = self.style.minRowHeight;\n            }\n            if (self.dispatchEvent('resizecolumn', {x: x, y: y, draggingItem: self.draggingItem})) { return false; }\n            if (self.scrollBox.scrollLeft > self.scrollBox.scrollWidth - self.attributes.resizeScrollZone\n                    && self.dragMode === 'ew-resize') {\n                self.resize(true);\n                self.scrollBox.scrollLeft += x;\n            }\n            if (self.dragMode === 'ew-resize') {\n                self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] = x;\n                if (['rowHeaderCell', 'cornerCell'].indexOf(self.draggingItem.header.style) !== -1) {\n                    self.resize(true);\n                }\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.dragMode === 'ns-resize') {\n                if (self.draggingItem.rowOpen) {\n                    self.sizes.trees[self.draggingItem.data[self.uniqueId]] = y;\n                } else if (self.attributes.globalRowResize) {\n                    self.style.cellHeight = y;\n                } else {\n                    self.sizes.rows[self.draggingItem.data[self.uniqueId]] = y;\n                }\n                self.dispatchEvent('resizerow', {row: y});\n                self.resizeChildGrids();\n                return;\n            }\n            self.ellipsisCache = {};\n        };\n        self.stopDragResize = function () {\n            self.resize();\n            document.body.removeEventListener('mousemove', self.dragResizeColumn, false);\n            document.body.removeEventListener('mouseup', self.stopDragResize, false);\n            self.setStorageData();\n            self.draw(true);\n            self.ignoreNextClick = true;\n        };\n        self.scrollGrid = function (e) {\n            var pos = self.getLayerPos(e);\n            if (self.attributes.scrollPointerLock && self.pointerLockPosition\n                    && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                self.pointerLockPosition.x += e.movementX;\n                self.pointerLockPosition.y += e.movementY;\n                self.pointerLockPosition.x = Math.min(self.width - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.x));\n                self.pointerLockPosition.y = Math.min(self.height - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.y));\n                pos = self.pointerLockPosition;\n            }\n            self.scrollMode = self.getCellAt(pos.x, pos.y).context;\n            if (self.scrollMode === 'horizontal-scroll-box' && self.scrollStartMode !== 'horizontal-scroll-box') {\n                self.scrollStartMode = 'horizontal-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.left = self.scrollBox.scrollLeft;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box' && self.scrollStartMode !== 'vertical-scroll-box') {\n                self.scrollStartMode = 'vertical-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.top = self.scrollBox.scrollTop;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollStartMode === 'vertical-scroll-box'\n                    && self.scrollMode !== 'vertical-scroll-box') {\n                self.scrollMode = 'vertical-scroll-box';\n            }\n            if (self.scrollStartMode === 'horizontal-scroll-box'\n                    && self.scrollMode !== 'horizontal-scroll-box') {\n                self.scrollMode = 'horizontal-scroll-box';\n            }\n            clearTimeout(self.scrollTimer);\n            if (self.scrollModes.indexOf(self.scrollMode) === -1) {\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box') {\n                self.scrollBox.scrollTop = self.scrollStart.top + ((pos.y - self.dragStart.y)\n                    / self.scrollBox.heightBoxRatio);\n            } else if (self.scrollMode === 'vertical-scroll-top') {\n                self.scrollBox.scrollTop -= (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'vertical-scroll-bottom') {\n                self.scrollBox.scrollTop += (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n            if (self.scrollMode === 'horizontal-scroll-box') {\n                self.scrollBox.scrollLeft = self.scrollStart.left + ((pos.x - self.dragStart.x)\n                    / self.scrollBox.widthBoxRatio);\n            } else if (self.scrollMode === 'horizontal-scroll-right') {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'horizontal-scroll-left') {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.stopScrollGrid = function () {\n            clearTimeout(self.scrollTimer);\n            if (document.exitPointerLock) {\n                document.exitPointerLock();\n            }\n            document.body.removeEventListener('mousemove', self.scrollGrid, false);\n        };\n        self.dragReorder = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = pos.x - self.dragStart.x;\n            y = pos.y - self.dragStart.y;\n            if (!self.attributes.allowColumnReordering && self.dragMode === 'column-reorder') {\n                return;\n            }\n            if (!self.attributes.allowRowReordering && self.dragMode === 'row-reorder') {\n                return;\n            }\n            if (self.dispatchEvent('reordering', {\n                    NativeEvent: e,\n                    source: self.dragStartObject,\n                    target: self.currentCell,\n                    dragMode: self.dragMode\n                })) {\n                return;\n            }\n            if (Math.abs(x) > self.attributes.reorderDeadZone || Math.abs(y) > self.attributes.reorderDeadZone) {\n                self.reorderObject = self.draggingItem;\n                self.reorderTarget = self.currentCell;\n                self.reorderObject.dragOffset = {\n                    x: x,\n                    y: y\n                };\n                self.autoScrollZone(e, pos.x, pos.y, false);\n            }\n        };\n        self.stopDragReorder = function (e) {\n            var oIndex,\n                tIndex,\n                cr = {\n                    'row-reorder': self.orders.rows,\n                    'column-reorder': self.orders.columns\n                },\n                i = {\n                    'row-reorder': 'rowIndex',\n                    'column-reorder': 'columnIndex'\n                }[self.dragMode];\n            document.body.removeEventListener('mousemove', self.dragReorder, false);\n            document.body.removeEventListener('mouseup', self.stopDragReorder, false);\n            if (self.reorderObject\n                    && self.reorderTarget\n                    && ((self.dragMode === 'column-reorder' && self.reorderTarget.columnIndex > -1\n                        && self.reorderTarget.columnIndex < self.getVisibleSchema().length)\n                    || (self.dragMode === 'row-reorder' && self.reorderTarget.rowIndex > -1\n                        && self.reorderTarget.rowIndex < self.data.length))\n                    && self.reorderObject[i] !== self.reorderTarget[i]\n                    && !self.dispatchEvent('reorder', {\n                        NativeEvent: e,\n                        source: self.reorderObject,\n                        target: self.reorderTarget,\n                        dragMode: self.dragMode\n                    })) {\n                self.ignoreNextClick = true;\n                oIndex = cr[self.dragMode].indexOf(self.reorderObject[i]);\n                tIndex = cr[self.dragMode].indexOf(self.reorderTarget[i]);\n                cr[self.dragMode].splice(oIndex, 1);\n                cr[self.dragMode].splice(tIndex, 0, self.reorderObject[i]);\n                self.setStorageData();\n            }\n            self.reorderObject = undefined;\n            self.reorderTarget = undefined;\n            self.draw(true);\n        };\n        self.dragMove = function (e) {\n            if (self.dispatchEvent('moving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.moveOffset = {\n                x: self.currentCell.columnIndex - self.dragStartObject.columnIndex,\n                y: self.currentCell.rowIndex - self.dragStartObject.rowIndex\n            };\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopDragMove = function (e) {\n            document.body.removeEventListener('mousemove', self.dragMove, false);\n            document.body.removeEventListener('mouseup', self.stopDragMove, false);\n            var b = self.getSelectionBounds();\n            if (self.dispatchEvent('endmove', {NativeEvent: e, cell: self.currentCell})) {\n                self.movingSelection = undefined;\n                self.moveOffset = undefined;\n                self.draw(true);\n                return;\n            }\n            if (self.moveOffset) {\n                self.moveTo(self.movingSelection, b.left + self.moveOffset.x, b.top + self.moveOffset.y);\n                self.moveSelection(self.moveOffset.x, self.moveOffset.y);\n            }\n            self.movingSelection = undefined;\n            self.moveOffset = undefined;\n            self.draw(true);\n        };\n        self.freezeMove = function (e) {\n            if (self.dispatchEvent('freezemoving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.ignoreNextClick = true;\n            self.freezeMarkerPosition = pos;\n            if (self.currentCell && self.currentCell.rowIndex !== undefined && self.dragMode === 'frozen-row-marker') {\n                self.scrollBox.scrollTop = 0;\n                self.frozenRow = self.currentCell.rowIndex + 1;\n            }\n            if (self.currentCell && self.currentCell.columnIndex !== undefined && self.dragMode === 'frozen-column-marker') {\n                self.scrollBox.scrollLeft = 0;\n                self.frozenColumn = self.currentCell.columnIndex + 1;\n            }\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopFreezeMove = function (e) {\n            document.body.removeEventListener('mousemove', self.freezeMove, false);\n            document.body.removeEventListener('mouseup', self.stopFreezeMove, false);\n            self.freezeMarkerPosition = undefined;\n            if (self.dispatchEvent('endfreezemove', {NativeEvent: e})) {\n                self.frozenRow = self.startFreezeMove.x;\n                self.frozenColumn = self.startFreezeMove.y;\n                self.draw(true);\n                return;\n            }\n            self.draw(true);\n        };\n        self.mousedown = function (e, overridePos) {\n            self.lastMouseDownTarget = e.target;\n            if (self.dispatchEvent('mousedown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (e.button === 2 || self.input) { return; }\n            var ctrl = (e.ctrlKey || e.metaKey),\n                move = /-move/.test(self.dragMode),\n                freeze = /frozen-row-marker|frozen-column-marker/.test(self.dragMode),\n                resize = /-resize/.test(self.dragMode);\n            self.dragStart = overridePos || self.getLayerPos(e);\n            self.scrollStart = {\n                left: self.scrollBox.scrollLeft,\n                top: self.scrollBox.scrollTop\n            };\n            self.dragStartObject = self.getCellAt(self.dragStart.x, self.dragStart.y);\n            self.dragAddToSelection = !self.dragStartObject.selected;\n            if (!ctrl && !e.shiftKey && !/(vertical|horizontal)-scroll-(bar|box)/\n                    .test(self.dragStartObject.context)\n                    && self.currentCell\n                    && !self.currentCell.isColumnHeader\n                    && !move\n                    && !freeze\n                    && !resize) {\n                self.selections = [];\n            }\n            if (self.dragStartObject.isGrid) {\n                return;\n            }\n            if (self.scrollModes.indexOf(self.dragStartObject.context) !== -1) {\n                self.scrollMode = self.dragStartObject.context;\n                self.scrollStartMode = self.dragStartObject.context;\n                self.scrollGrid(e);\n                if (self.attributes.scrollPointerLock\n                        && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                    self.pointerLockPosition = {\n                        x: self.dragStart.x,\n                        y: self.dragStart.y\n                    };\n                    self.canvas.requestPointerLock();\n                }\n                document.body.addEventListener('mousemove', self.scrollGrid, false);\n                document.body.addEventListener('mouseup', self.stopScrollGrid, false);\n                self.ignoreNextClick = true;\n                return;\n            }\n            if (self.dragMode === 'cell') {\n                self.selecting = true;\n                if (self.attributes.selectionMode === 'row') {\n                    self.selectRow(self.dragStartObject.rowIndex, ctrl, null, true);\n                }\n                return self.mousemove(e);\n            }\n            if (move) {\n                self.draggingItem = self.dragItem;\n                self.movingSelection = self.selections.concat([]);\n                self.dragging = self.dragStartObject;\n                if (self.dispatchEvent('beginmove', {NativeEvent: e, cell: self.currentCell})) { return; }\n                document.body.addEventListener('mousemove', self.dragMove, false);\n                document.body.addEventListener('mouseup', self.stopDragMove, false);\n                return self.mousemove(e);\n            }\n            if (freeze) {\n                self.draggingItem = self.dragItem;\n                self.startFreezeMove = {\n                    x: self.frozenRow,\n                    y: self.frozenColumn\n                };\n                if (self.dispatchEvent('beginfreezemove', {NativeEvent: e})) { return; }\n                document.body.addEventListener('mousemove', self.freezeMove, false);\n                document.body.addEventListener('mouseup', self.stopFreezeMove, false);\n                return self.mousemove(e);\n            }\n            if (resize) {\n                self.draggingItem = self.dragItem;\n                if (self.draggingItem.rowOpen) {\n                    self.resizingStartingHeight = self.sizes.trees[self.draggingItem.data[self.uniqueId]];\n                } else {\n                    self.resizingStartingHeight = self.sizes.rows[self.draggingItem.data[self.uniqueId]] || self.style.cellHeight;\n                }\n                self.resizingStartingWidth = self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] || self.draggingItem.width;\n                document.body.addEventListener('mousemove', self.dragResizeColumn, false);\n                document.body.addEventListener('mouseup', self.stopDragResize, false);\n            }\n            if (['row-reorder', 'column-reorder'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragStartObject;\n                document.body.addEventListener('mousemove', self.dragReorder, false);\n                document.body.addEventListener('mouseup', self.stopDragReorder, false);\n            }\n        };\n        self.mouseup = function (e) {\n            clearTimeout(self.scrollTimer);\n            self.cellBoundaryCrossed = true;\n            self.selecting = undefined;\n            self.draggingItem = undefined;\n            self.dragStartObject = undefined;\n            if (self.dispatchEvent('mouseup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            if (self.currentCell && self.currentCell.grid !== undefined) {\n                return;\n            }\n            if (self.contextMenu || self.input) { return; }\n            if (self.dragStart && self.isInGrid(self.dragStart)) {\n                self.controlInput.focus();\n            }\n            e.preventDefault();\n        };\n        self.keydown = function (e) {\n            var i,\n                x = self.activeCell.columnIndex,\n                y = self.activeCell.rowIndex,\n                ctrl = (e.ctrlKey || e.metaKey),\n                last = self.data.length - 1,\n                cols = self.getVisibleSchema().length - 1;\n            if (self.dispatchEvent('keydown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            if (self.attributes.showNewRow) {\n                last += 1;\n            }\n            if (e.keyCode === 9) {\n                e.preventDefault();\n            }\n            // esc\n            if (e.keyCode === 27) {\n                self.selections = [];\n                self.draw(true);\n            // ctrl + a\n            } else if (ctrl && e.keyCode === 65) {\n                self.selectAll();\n            //ArrowDown\n            } else if (e.keyCode === 40) {\n                y += 1;\n            //ArrowUp\n            } else if (e.keyCode === 38) {\n                y -= 1;\n            //ArrowLeft Tab\n            } else if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {\n                x -= 1;\n            //ArrowRight Tab\n            } else if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {\n                x += 1;\n            //PageUp\n            } else if (e.keyCode === 33) {\n                y -= self.page;\n                e.preventDefault();\n            //PageDown\n            } else if (e.keyCode === 34) {\n                y += self.page;\n                e.preventDefault();\n            //Home ArrowUp\n            } else if (e.keyCode === 36 || (ctrl && e.keyCode === 38)) {\n                y = 0;\n            //End ArrowDown\n            } else if (e.keyCode === 35 || (ctrl && e.keyCode === 40)) {\n                y = self.data.length - 1;\n            //ArrowRight\n            } else if (ctrl && e.keyCode === 39) {\n                x = cols;\n            //ArrowLeft\n            } else if (ctrl && e.keyCode === 37) {\n                x = 0;\n            }\n            //Enter\n            if (e.keyCode === 13) {\n                return self.beginEditAt(x, y);\n            }\n            //Space\n            if (e.keyCode === 32) {\n                self.selections = [];\n                self.selections[Math.max(y, 0)] = [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                if (self.attributes.selectionMode === 'row') {\n                    for (i = self.selectionBounds.top; i <= self.selectionBounds.bottom; i += 1) {\n                        self.selectRow(i, ctrl, null, true);\n                    }\n                } else {\n                    self.selectArea(undefined, ctrl);\n                }\n                e.preventDefault();\n                self.draw(true);\n                return;\n            }\n            if (x < 0) {\n                x = 0;\n            }\n            if (y > last) {\n                y = last;\n            }\n            if (y < 0) {\n                y = 0;\n            }\n            if (x > cols) {\n                x = cols;\n            }\n            // Arrows\n            if (e.shiftKey && [37, 38, 39, 40].indexOf(e.keyCode) !== -1) {\n                self.selections[Math.max(y, 0)] = self.selections[Math.max(y, 0)] || [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                self.selectArea(undefined, ctrl);\n                self.draw(true);\n            }\n            if (x !== self.activeCell.columnIndex || y !== self.activeCell.rowIndex) {\n                self.scrollIntoView(x !== self.activeCell.columnIndex ? x : undefined, y !== self.activeCell.rowIndex ? y : undefined);\n                self.setActiveCell(x, y);\n                if (!e.shiftKey && self.attributes.selectionFollowsActiveCell) {\n                    if (!ctrl) {\n                        self.selections = [];\n                    }\n                    self.selections[y] = self.selections[y] || [];\n                    self.selections[y].push(x);\n                    self.dispatchEvent('selectionchanged', {\n                        selectedData: self.getSelectedData(),\n                        selections: self.selections,\n                        selectionBounds: self.selectionBounds\n                    });\n                }\n                self.draw(true);\n            }\n        };\n        self.keyup = function (e) {\n            if (self.dispatchEvent('keyup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n        };\n        self.keypress = function (e) {\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.dispatchEvent('keypress', {NativeEvent: e, cell: self.currentCell})) { return; }\n        };\n        self.dblclick = function (e) {\n            if (self.dispatchEvent('dblclick', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'columnHeaderCell') {\n                self.fitColumnToValues(self.currentCell.header.name);\n            } else if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'cornerCell') {\n                self.autosize();\n            } else if (['cell', 'activeCell'].indexOf(self.currentCell.style) !== -1) {\n                self.beginEditAt(self.currentCell.columnIndex, self.currentCell.rowIndex);\n            }\n        };\n        self.scrollWheel = function (e) {\n            var l,\n                t,\n                deltaX = e.deltaX === undefined ? e.NativeEvent.deltaX : e.deltaX,\n                deltaY = e.deltaY === undefined ? e.NativeEvent.deltaY : e.deltaY,\n                deltaMode = e.deltaMode === undefined ? e.NativeEvent.deltaMode : e.deltaMode;\n            if (wheeling) {\n                return;\n            }\n            if (self.dispatchEvent('wheel', {NativeEvent: e})) {\n                return;\n            }\n            e = e.NativeEvent || e;\n            self.touchHaltAnimation = true;\n            l = self.scrollBox.scrollLeft;\n            t = self.scrollBox.scrollTop;\n            if (self.hasFocus) {\n                //BUG Issue 42: https://github.com/TonyGermaneri/canvas-datagrid/issues/42\n                //https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\n                if (deltaMode === 1) {\n                    // line mode = 17 pixels per line\n                    deltaY = deltaY * 17;\n                }\n                if ((self.scrollBox.scrollTop < self.scrollBox.scrollHeight && deltaY > 0)\n                        || (self.scrollBox.scrollLeft < self.scrollBox.scrollWidth && deltaX > 0)\n                        || (self.scrollBox.scrollTop > 0 && deltaY < 0)\n                        || (self.scrollBox.scrollLeft > 0 && deltaX < 0)) {\n                    e.preventDefault(e);\n                }\n                wheeling = setTimeout(function () {\n                    wheeling = undefined;\n                    self.scrollBox.scrollTo(deltaX + l, deltaY + t);\n                }, 1);\n            }\n        };\n        self.pasteItem = function (clipData, x, y, mimeType) {\n            var l, s = self.getVisibleSchema(), yi = y - 1, sel = [];\n            function normalizeRowData(importingRow, existingRow, offsetX, schema, mimeType, rowIndex) {\n                var r = existingRow;\n                if (!Array.isArray(importingRow) && importingRow !== null && typeof importingRow === 'object') {\n                    importingRow = Object.keys(importingRow).map(function (colKey) {\n                        return importingRow[colKey];\n                    });\n                }\n                if (/^text\\/html/.test(mimeType)) {\n                    importingRow = importingRow.substring(4, importingRow.length - 5).split('</td><td>');\n                }\n                if (typeof importingRow === 'string') {\n                    importingRow = [importingRow];\n                }\n                sel[rowIndex] = [];\n                importingRow.forEach(function (cellData, colIndex) {\n                    var cName = schema[colIndex + offsetX].name;\n                    if (importingRow[colIndex] === undefined || importingRow[colIndex] === null) {\n                        r[cName] = existingRow[cName];\n                        return;\n                    }\n                    sel[rowIndex].push(colIndex + offsetX);\n                    r[cName] = importingRow[colIndex];\n                });\n                return r;\n            }\n            if (/^text\\/html/.test(mimeType)) {\n                if (!/^(<meta[^>]+>)?<table>/.test(clipData.substring(0, 29))) {\n                    console.warn('Unrecognized HTML format.  HTML must be a simple table, e.g.: <table><tr><td>data</td></tr></table>.  Data with the mime type text/html not in this format will not be imported as row data.');\n                    return;\n                }\n                // strip table beginning and ending off, then split at rows\n                clipData = clipData.substring(clipData.indexOf('<table><tr>') + 11, clipData.length - 13).split('</tr><tr>');\n            } else {\n                clipData = clipData.split('\\n');\n            }\n            l = clipData.length;\n            clipData.forEach(function (rowData) {\n                yi += 1;\n                self.data[yi] = normalizeRowData(rowData, self.data[yi], x, s, mimeType, yi);\n            });\n            self.selections = sel;\n            return l;\n        };\n        self.paste = function (e) {\n            var d;\n            function getItem(dti) {\n                var type = dti.type;\n                dti.getAsString(function (s) {\n                    self.pasteItem(s, self.activeCell.columnIndex, self.activeCell.rowIndex, type);\n                    self.draw();\n                });\n            }\n            d = Array.prototype.filter.call(e.clipboardData.items, function (dti) {\n                return dti.type === 'text/html';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/csv';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/plain';\n            })[0];\n            if (!d) {\n                console.warn('Cannot find supported clipboard data type.  Supported types are text/html, text/csv, text/plain.');\n                return;\n            }\n            getItem(d);\n        };\n        self.cut = function (e) {\n            self.copy(e);\n            self.forEachSelectedCell(function (data, index, colName) {\n                data[index][colName] = '';\n            });\n        };\n        self.copy = function (e) {\n            if (self.dispatchEvent('copy', {NativeEvent: e})) { return; }\n            if (!self.hasFocus || !e.clipboardData) { return; }\n            var t,\n                d,\n                rows = [],\n                trows = [],\n                sData = self.getSelectedData();\n            function fCopyCell(d) {\n                d = d === null || d === undefined ? '' : d;\n                return '<td>' + (typeof d === 'string' ? d.replace(/</g, '&lt;').replace(/>/g, '&gt;') : d) + '</td>';\n            }\n            if (sData.length > 0) {\n                sData.forEach(function (row) {\n                    if (row) {\n                        // r = array for HTML, rt = array for plain text\n                        var r = [],\n                            rt = [];\n                        Object.keys(row).forEach(function (key) {\n                            // escape strings\n                            if (row[key] !== null\n                                    && row[key] !== false\n                                    && row[key] !== undefined\n                                    && row[key].replace) {\n                                rt.push('\"' + row[key].replace(/\"/g, '\"\"') + '\"');\n                                r.push(fCopyCell(row[key]));\n                                return;\n                            }\n                            rt.push(row[key]);\n                            r.push(fCopyCell(row[key]));\n                        });\n                        rows.push(r.join(''));\n                        trows.push(rt.join(','));\n                    }\n                });\n                d = '<table><tr>' + rows.join('</tr><tr>') + '</tr></table>';\n                t = trows.join('\\n');\n                e.clipboardData.setData('text/html', d);\n                e.clipboardData.setData('text/plain', t);\n                e.clipboardData.setData('text/csv', t);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/events.js\n// module id = 4\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var touchTimerMs = 50,\n            touchScrollTimeout;\n        self.scrollAnimation = {};\n        self.touchDelta = {};\n        self.touchAnimateTo = {};\n        self.animationFrames = 0;\n        self.getTouchPos = function (e, touchIndex) {\n            var t = touchIndex ? e.touches[touchIndex] : e.touches[0],\n                rect = self.canvas.getBoundingClientRect(),\n                pos;\n            if (!t) { return; }\n            pos = {\n                x: t.clientX - rect.left,\n                y: t.clientY - rect.top\n            };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        // shamelessly stolen from from https://gist.github.com/gre/1650294\n        self.easingFunctions = {\n            linear: function (t) { return t; },\n            easeInQuad: function (t) { return t * t; },\n            easeOutQuad: function (t) { return t * (2 - t); },\n            easeInOutQuad: function (t) { return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t; },\n            easeInCubic: function (t) { return t * t * t; },\n            easeOutCubic: function (t) { return (--t) * t * t + 1; },\n            easeInOutCubic: function (t) { return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1; },\n            easeInQuart: function (t) { return t * t * t * t; },\n            easeOutQuart: function (t) { return 1 - (--t) * t * t * t; },\n            easeInOutQuart: function (t) { return t < 0.5 ? 8 * t  * t  * t * t : 1 - 8 * (--t) * t * t * t; },\n            easeInQuint: function (t) { return t * t * t * t * t; },\n            easeOutQuint: function (t) { return 1 + (--t) * t *  t * t * t; },\n            easeInOutQuint: function (t) { return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t; }\n        };\n        self.easing = function (t, b, c, d) {\n            return c * self.easingFunctions[self.attributes.touchEasingMethod](t / d) + b;\n        };\n        self.calculatePPSTimed = function () {\n            self.xPPST = -((self.touchDelta.x - self.touchSigmaTimed.x) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.yPPST = -((self.touchDelta.y - self.touchSigmaTimed.y) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.touchSigmaTimed = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.calculatePPS = function () {\n            self.xPPS = -((self.touchDelta.x - self.touchSigma.x) / (self.touchDelta.t - self.touchSigma.t));\n            self.yPPS = -((self.touchDelta.y - self.touchSigma.y) / (self.touchDelta.t - self.touchSigma.t));\n            self.touchSigma = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.touchEndAnimation = function () {\n            if (!self.canvas || !self.scrollBox.scrollTo) { return requestAnimationFrame(self.touchEndAnimation); }\n            var n = performance.now(),\n                d = self.attributes.touchReleaseAnimationDurationMs,\n                t;\n            t = n - self.touchDelta.t;\n            self.animationFrames += 1;\n            self.scrollAnimation.x = self.easing(t, self.touchDelta.scrollLeft, self.touchAnimateTo.x, d);\n            self.scrollAnimation.y = self.easing(t, self.touchDelta.scrollTop, self.touchAnimateTo.y, d);\n            if (t > d || (self.scrollAnimation.y === self.scrollBox.scrollTop\n                    && self.scrollAnimation.x === self.scrollBox.scrollLeft) || self.stopAnimation) {\n                return;\n            }\n            self.scrollBox.scrollTo(self.scrollAnimation.x, self.scrollAnimation.y);\n            requestAnimationFrame(self.touchEndAnimation);\n        };\n        self.touchEditCell = function (cell) {\n            self.beginEditAt(cell.columnIndex, cell.rowIndex);\n        };\n        self.touchCell = function (e) {\n            return function () {\n                clearInterval(self.calculatePPSTimer);\n                var i, pos = self.getTouchPos(e);\n                if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone) {\n                    i = self.getCellAt(pos.x, pos.y);\n                    if (!i) { return; }\n                    if (self.touchingCell && self.touchingCell.rowIndex === i.rowIndex\n                            && self.touchingCell.columnIndex === i.columnIndex) {\n                        self.touchEditCell(i);\n                        return;\n                    }\n                    if (self.input) {\n                        self.endEdit();\n                    }\n                    self.touchingCell = i;\n                    self.selectArea({\n                        top: i.rowIndex,\n                        bottom: i.rowIndex,\n                        left: i.columnIndex,\n                        right: i.columnIndex\n                    });\n                    self.draw(true);\n                }\n            };\n        };\n        self.touchstart = function (e) {\n            if (self.dispatchEvent('touchstart', {NativeEvent: e})) { return; }\n            self.disposeContextMenu();\n            clearInterval(self.calculatePPSTimer);\n            clearTimeout(self.touchContextTimeout);\n            self.touchStartEvent = e;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (e.changedTouches[0]) {\n                self.touchStart = self.getTouchPos(e);\n            }\n            if (e.touches.length === 1 && e.changedTouches[0] && !self.zoomAltered) {\n                self.touchLength = 1;\n                self.touchStart = self.touchStart || self.touchStart1;\n                self.touchScrollStart = {\n                    x: self.scrollBox.scrollLeft,\n                    y: self.scrollBox.scrollTop,\n                    t: performance.now()\n                };\n                self.touchDelta = {\n                    x: 0,\n                    y: 0,\n                    scrollLeft: self.scrollBox.scrollLeft,\n                    scrollTop: self.scrollBox.scrollTop,\n                    t: self.touchScrollStart.t\n                };\n                self.touchSigma = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchSigmaTimed = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchContextTimeout = setTimeout(function () {\n                    self.contextmenuEvent(e, self.touchStart);\n                }, self.attributes.touchContextMenuTimeMs);\n                self.calculatePPSTimer = setInterval(self.calculatePPSTimed, touchTimerMs);\n                self.startingCell = self.getCellAt(self.touchStart.x, self.touchStart.y, true);\n                if (self.startingCell && (self.startingCell.isGrid || ['tree', 'inherit'].indexOf(self.startingCell.context) !== -1)) {\n                    self.hasFocus = false;\n                    return;\n                }\n                self.hasFocus = true;\n                if (self.startingCell.isHeader) {\n                    if (self.startingCell.isRowHeader) {\n                        self.selectArea({\n                            top: self.startingCell.rowIndex,\n                            bottom: self.startingCell.rowIndex,\n                            left: 0,\n                            right: self.getVisibleSchema().length - 1,\n                        });\n                        self.draw(true);\n                    } else if (self.startingCell.isColumnHeader) {\n                        if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                            if (self.orderBy === self.startingCell.header.name) {\n                                self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                            } else {\n                                self.orderDirection = 'asc';\n                            }\n                            self.order(self.startingCell.header.name, self.orderDirection);\n                        }\n                        if (self.attributes.columnHeaderClickBehavior === 'select') {\n                            self.selectArea({\n                                top: 0,\n                                bottom: self.data.length - 1,\n                                left: self.startingCell.columnIndex,\n                                right: self.startingCell.columnIndex,\n                            });\n                            self.draw(true);\n                        }\n                    }\n                    self.touchEndEvents(e);\n                    return;\n                }\n            }\n            if (self.zoomAltered) { return; }\n            document.body.addEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.addEventListener('touchend', self.touchend, false);\n            document.body.addEventListener('touchcancel', self.touchcancel, false);\n            self.draw(true);\n        };\n        self.touchSelect = function (cell, handleType) {\n            if (cell.rowIndex === undefined || cell.columnIndex === undefined) { return; }\n            self.touchSelecting = true;\n            var bounds = self.getSelectionBounds();\n            if (handleType === 'selection-handle-bl'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex <= bounds.right) {\n                bounds.bottom = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tl'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex <= bounds.right) {\n                bounds.top = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tr'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex >= bounds.left) {\n                bounds.top = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            } else if (handleType === 'selection-handle-br'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex >= bounds.left) {\n                bounds.bottom = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            }\n            if (self.attributes.selectionMode === 'row' || cell.rowIndex === -1) {\n                bounds.left = 0;\n                bounds.right = self.getSchema().length - 1;\n            } else {\n                bounds.left = Math.max(0, bounds.left);\n            }\n            self.selectArea(bounds);\n            self.draw(true);\n        };\n        self.touchmove = function (e) {\n            var ch, rw, rScrollZone, lScrollZone, bScrollZone, tScrollZone, sbw, t1, t2;\n            if (self.dispatchEvent('touchmove', {NativeEvent: e})) { return; }\n            clearTimeout(touchScrollTimeout);\n            if (e.changedTouches[0]) {\n                self.touchPosition = self.getTouchPos(e);\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = self.getTouchPos(e, 1);\n            }\n            if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) > self.attributes.touchDeadZone) {\n                clearTimeout(self.touchContextTimeout);\n            }\n            if (e.touches.length === 2 && self.touchPosition && self.touchPosition1) {\n                t1 = self.touchPosition.y;\n                t2 = self.touchPosition1.y;\n                if (!self.zoomDeltaStart) {\n                    self.zoomDeltaStart = Math.abs(t1 - t2);\n                    self.startScale = self.scale;\n                }\n                self.touchLength = 2;\n                self.scaleDelta = self.zoomDeltaStart - Math.abs(t1 - t2);\n                self.scale = self.startScale - (self.scaleDelta * self.attributes.touchZoomSensitivity);\n                self.scale = Math.min(Math.max(self.scale, self.attributes.touchZoomMin), self.attributes.touchZoomMax);\n                self.zoomAltered = true;\n                self.resize(true);\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.zoomAltered) { return; }\n            self.touchLength = 1;\n            self.touchPosition = self.touchPosition || self.touchPosition1;\n            ch = self.getColumnHeaderCellHeight();\n            rw = self.getRowHeaderCellWidth();\n            rScrollZone = self.width - self.style.scrollBarWidth - self.touchPosition.x < self.attributes.selectionScrollZone;\n            lScrollZone = self.touchPosition.x - rw < self.attributes.selectionScrollZone;\n            bScrollZone = self.height - self.style.scrollBarWidth - self.touchPosition.y < self.attributes.selectionScrollZone;\n            tScrollZone = self.touchPosition.y - ch < self.attributes.selectionScrollZone;\n            sbw = self.style.scrollBarWidth;\n            function touchScroll() {\n                var x = self.scrollBox.scrollLeft,\n                    y = self.scrollBox.scrollTop;\n                x += (rScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y += (bScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y -= (tScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                x -= (lScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                self.scrollBox.scrollTo(x, y);\n                touchScrollTimeout = setTimeout(touchScroll, self.attributes.scrollRepeatRate);\n            }\n            e.stopPropagation();\n            self.touchDelta = {\n                x: self.touchPosition.x - self.touchStart.x,\n                y: self.touchPosition.y - self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: performance.now()\n            };\n            self.currentCell = self.getCellAt(self.touchPosition.x, self.touchPosition.y);\n            self.calculatePPS();\n            self.touchDuration = performance.now() - self.touchScrollStart.t;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            if (self.touchSelecting && (rScrollZone || lScrollZone || tScrollZone || bScrollZone)) {\n                touchScroll();\n            }\n            if (/vertical-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollTop = self.scrollBox.scrollHeight\n                    * ((self.touchPosition.y - ch - sbw) / (self.scrollBox.height - sbw - ch));\n                return;\n            }\n            if (/horizontal-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollLeft = self.scrollBox.scrollWidth\n                    * ((self.touchPosition.x - rw - sbw) / (self.scrollBox.width - sbw - rw));\n                return;\n            }\n            if (/selection-handle-/.test(self.startingCell.style)) {\n                self.touchSelect(self.currentCell, self.startingCell.style);\n                return;\n            }\n            self.scrollBox.scrollTo(self.touchScrollStart.x - self.touchDelta.x,\n                self.touchScrollStart.y - self.touchDelta.y);\n            self.draw(true);\n        };\n        self.touchEndEvents = function (e) {\n            self.zoomDeltaStart = undefined;\n            self.touchSelecting = false;\n            clearInterval(self.touchScrollTimeout);\n            clearInterval(self.touchContextTimeout);\n            clearInterval(self.calculatePPSTimer);\n            e.stopPropagation();\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n        };\n        self.touchend = function (e) {\n            if (self.dispatchEvent('touchend', {NativeEvent: e})) { return; }\n            self.zoomDeltaStart = undefined;\n            if (e.changedTouches[0]) {\n                self.touchPosition = undefined;\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = undefined;\n            }\n            if (self.zoomAltered) {\n                if (e.touches.length === 0) {\n                    self.zoomAltered = false;\n                }\n                return;\n            }\n            var dz = Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone;\n            if (isNaN(self.xPPS)) {\n                self.xPPS = 0;\n            }\n            if (isNaN(self.yPPS)) {\n                self.yPPS = 0;\n            }\n            if (isNaN(self.xPPST)) {\n                self.xPPST = 0;\n            }\n            if (isNaN(self.yPPST)) {\n                self.yPPST = 0;\n            }\n            self.touchAnimateTo.x = self.xPPS * self.attributes.touchReleaseAcceleration;\n            self.touchAnimateTo.y = self.yPPS * self.attributes.touchReleaseAcceleration;\n            self.calculatePPSTimed();\n            if (dz && !self.contextMenu) {\n                self.touchCell(self.touchStartEvent)();\n            } else if (self.animationFrames === 0\n                    && (Math.abs(self.xPPST) > self.attributes.scrollAnimationPPSThreshold\n                        || Math.abs(self.yPPST) > self.attributes.scrollAnimationPPSThreshold)\n                    && !/-scroll-/.test(self.startingCell.style)\n                    && !dz) {\n                self.stopAnimation = false;\n                self.touchEndAnimation();\n            }\n            self.touchEndEvents(e);\n        };\n        self.touchcancel = function (e) {\n            if (self.dispatchEvent('touchcancel', {NativeEvent: e})) { return; }\n            self.touchEndEvents(e);\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/touch.js\n// module id = 5\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals HTMLElement: false, Reflect: false, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self, ctor) {\n        self.scale = 1;\n        self.orders = {\n            rows: [],\n            columns: []\n        };\n        self.visibleRowHeights = [];\n        self.hasFocus = false;\n        self.activeCell = {\n            columnIndex: 0,\n            rowIndex: 0\n        };\n        self.storageName = 'canvasDataGrid';\n        self.invalidSearchExpClass = 'canvas-datagrid-invalid-search-regExp';\n        self.localStyleLibraryStorageKey = 'canvas-datagrid-user-style-library';\n        self.uniqueId = '_canvasDataGridUniqueId';\n        self.orderBy = self.uniqueId;\n        self.orderDirection = 'asc';\n        self.columnFilters = {};\n        self.filters = {};\n        self.frozenRow = 0;\n        self.frozenColumn = 0;\n        self.ellipsisCache = {};\n        self.scrollBox = {};\n        self.visibleRows = [];\n        self.sizes = {\n            rows: {},\n            columns: {},\n            trees: {}\n        };\n        self.currentFilter = function () {\n            return true;\n        };\n        self.selections = [];\n        self.hovers = {};\n        self.attributes = {};\n        self.style = {};\n        self.formatters = {};\n        self.sorters = {};\n        self.schemaHashes = {};\n        self.events = {};\n        self.uId = 0;\n        self.changes = [];\n        self.scrollIndexTop = 0;\n        self.scrollPixelTop = 0;\n        self.scrollIndexLeft = 0;\n        self.scrollPixelLeft = 0;\n        self.childGrids = {};\n        self.openChildren = {};\n        self.scrollModes = [\n            'vertical-scroll-box',\n            'vertical-scroll-top',\n            'vertical-scroll-bottom',\n            'horizontal-scroll-box',\n            'horizontal-scroll-right',\n            'horizontal-scroll-left'\n        ];\n        self.componentL1Events = {};\n        self.eventNames = ['afterdraw', 'afterrendercell', 'attributechanged', 'beforebeginedit',\n            'beforecreatecellgrid', 'beforedraw', 'beforeendedit', 'beforerendercell', 'beforerendercellgrid',\n            'beginedit', 'cellmouseout', 'cellmouseover', 'click', 'collapsetree', 'contextmenu', 'copy',\n            'datachanged', 'dblclick', 'endedit', 'expandtree', 'formatcellvalue', 'keydown', 'keypress',\n            'keyup', 'mousedown', 'mousemove', 'mouseup', 'newrow', 'ordercolumn', 'rendercell', 'rendercellgrid',\n            'renderorderbyarrow', 'rendertext', 'rendertreearrow', 'reorder', 'reordering', 'resize',\n            'resizecolumn', 'resizerow', 'schemachanged', 'scroll', 'selectionchanged', 'stylechanged',\n            'touchcancel', 'touchend', 'touchmove', 'touchstart', 'wheel'];\n        self.mouse = { x: 0, y: 0};\n        self.getSelectedData = function (expandToRow) {\n            var d = [], s = expandToRow ? self.getSchema() : self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    if (col === -1 || !s[col]) { return; }\n                    d[index][s[col].name] = self.data[index][s[col].name];\n                });\n            });\n            return d;\n        };\n        self.fillArray = function (low, high, step, def) {\n            step = step || 1;\n            var i = [], x;\n            for (x = low; x <= high; x += step) {\n                i[x] = def === undefined ? x : (typeof def === 'function' ? def(x) : def);\n            }\n            return i;\n        };\n        self.getColumnHeaderCellHeight = function () {\n            if (!self.attributes.showColumnHeaders) { return 0; }\n            return ((self.sizes.rows[-1] || self.style.columnHeaderCellHeight) * self.scale);\n        };\n        self.getRowHeaderCellWidth = function () {\n            if (!self.attributes.showRowHeaders) { return 0; }\n            return (self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth) * self.scale;\n        };\n        self.setStorageData = function () {\n            if (!self.attributes.saveAppearance) { return; }\n            localStorage.setItem(self.storageName + '-' + self.attributes.name, JSON.stringify({\n                sizes: {\n                    rows: self.sizes.rows,\n                    columns: self.sizes.columns\n                },\n                orders: {\n                    rows: self.orders.rows,\n                    columns: self.orders.columns\n                },\n                orderBy: self.orderBy,\n                orderDirection: self.orderDirection\n            }));\n        };\n        self.getSchema = function () {\n            return self.schema || self.tempSchema;\n        };\n        self.createColumnOrders = function () {\n            var s = self.getSchema();\n            self.orders.columns = self.fillArray(0, s.length - 1);\n        };\n        self.createRowOrders = function () {\n            self.orders.rows = self.fillArray(0, self.data.length - 1);\n        };\n        self.getVisibleSchema = function () {\n            return self.getSchema().filter(function (col) {\n                return !col.hidden && col.name !== self.uniqueId;\n            });\n        };\n        self.applyDefaultValue = function (row, header) {\n            var d = header.defaultValue || '';\n            if (typeof d === 'function') {\n                d = d.apply(self.intf, [header]);\n            }\n            row[header.name] = d;\n        };\n        self.createNewRowData = function () {\n            self.newRow = {};\n            self.newRow[self.uniqueId] = self.uId;\n            self.uId += 1;\n            self.getSchema().forEach(function forEachHeader(header) {\n                self.applyDefaultValue(self.newRow, header);\n            });\n        };\n        self.getSchemaNameHash = function (key) {\n            var n = 0;\n            while (self.schemaHashes[key]) {\n                n += 1;\n                key = key + n;\n            }\n            return key;\n        };\n        self.filter = function (type) {\n            var f = self.filters[type];\n            if (!f && type !== undefined) {\n                console.warn('Cannot find filter for type %s, falling back to substring match.', type);\n                f = self.filters.string;\n            }\n            return f;\n        };\n        self.getBestGuessDataType = function (columnName) {\n            var t, x, l = self.data.length;\n            for (x = 0; x < l; x += 1) {\n                if ([null, undefined].indexOf(self.data[x][columnName]) !== -1) {\n                    t = typeof self.data[x];\n                    return t === 'object' ? 'string' : t;\n                }\n            }\n            return 'string';\n        };\n        self.drawChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].draw();\n            });\n        };\n        self.resizeChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].resize();\n            });\n        };\n        self.autoScrollZone = function (e, x, y, ctrl) {\n            var setTimer,\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight();\n            if (x > self.width - self.attributes.selectionScrollZone && x < self.width) {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y > self.height - self.attributes.selectionScrollZone && y < self.height) {\n                self.scrollBox.scrollTop += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (x - self.attributes.selectionScrollZone - rowHeaderCellWidth < 0) {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y - self.attributes.selectionScrollZone - columnHeaderCellHeight < 0) {\n                self.scrollBox.scrollTop -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (setTimer && !ctrl && self.currentCell && self.currentCell.columnIndex !== -1) {\n                self.scrollTimer = setTimeout(self.mousemove, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.refreshFromOrigialData = function () {\n            self.data = self.originalData.filter(function (row) {\n                return true;\n            });\n        };\n        self.validateColumn = function (c, s) {\n            if (!c.name) {\n                throw new Error('A column must contain at least a name.');\n            }\n            if (s.filter(function (i) { return i.name === c.name; }).length > 0) {\n                throw new Error('A column with the name '\n                    + c.name + ' already exists and cannot be added again.');\n            }\n            return true;\n        };\n        self.setDefaults = function (obj1, obj2, key, def) {\n            obj1[key] = obj2[key] === undefined ? def : obj2[key];\n        };\n        self.setAttributes = function () {\n            self.defaults.attributes.forEach(function eachAttribute(i) {\n                self.setDefaults(self.attributes, self.args, i[0], i[1]);\n            });\n        };\n        self.setStyle = function () {\n            self.defaults.styles.forEach(function eachStyle(i) {\n                self.setDefaults(self.style, self.args.style || {}, i[0], i[1]);\n            });\n        };\n        self.autosize = function (colName) {\n            self.getVisibleSchema().forEach(function (col) {\n                if (col.name === colName || colName === undefined) {\n                    self.fitColumnToValues(col.name);\n                }\n            });\n            self.fitColumnToValues('cornerCell');\n        };\n        self.dispose = function () {\n            if (!self.isChildGrid && self.canvas && self.canvas.parentNode) {\n                self.canvas.parentNode.removeChild(self.canvas);\n            }\n            self.eventParent.removeEventListener('mouseup', self.mouseup, false);\n            self.eventParent.removeEventListener('mousedown', self.mousedown, false);\n            self.eventParent.removeEventListener('dblclick', self.dblclick, false);\n            self.eventParent.removeEventListener('click', self.click, false);\n            self.eventParent.removeEventListener('mousemove', self.mousemove);\n            self.eventParent.removeEventListener('wheel', self.scrollWheel, false);\n            self.canvas.removeEventListener('contextmenu', self.contextmenu, false);\n            self.canvas.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('keypress', self.keypress, false);\n            self.controlInput.removeEventListener('keyup', self.keyup, false);\n            self.controlInput.removeEventListener('keydown', self.keydown, false);\n            window.removeEventListener('resize', self.resize);\n            if (self.observer && self.observer.disconnect) {\n                self.observer.disconnect();\n            }\n        };\n        self.tryLoadStoredOrders = function () {\n            var s;\n            if (self.storedSettings\n                    && typeof self.storedSettings.orders === 'object'\n                    && self.storedSettings.orders !== null) {\n                if (self.storedSettings.orders.rows.length >= self.data.length) {\n                    self.orders.rows = self.storedSettings.orders.rows;\n                }\n                s = self.getSchema();\n                if (self.storedSettings.orders.columns.length === s.length) {\n                    self.orders.columns = self.storedSettings.orders.columns;\n                }\n                self.orderBy = self.storedSettings.orderBy === undefined\n                    ? self.uniqueId : self.storedSettings.orderBy;\n                self.orderDirection = self.storedSettings.orderDirection === undefined\n                    ? self.uniqueId : self.storedSettings.orderDirection;\n                if (self.orderBy !== self.uniqueId && self.getHeaderByName(self.orderBy) && self.orderDirection) {\n                    self.order(self.orderBy, self.orderDirection);\n                }\n            }\n        };\n        self.getDomRoot = function () {\n            return self.shadowRoot ? self.shadowRoot.host : self.parentNode;\n        };\n        self.getFontName = function (fontStyle) {\n            return fontStyle.replace(/\\d+\\.?\\d*px/, '');\n        };\n        self.getFontHeight = function (fontStyle) {\n            return parseFloat(fontStyle, 10);\n        };\n        self.parseStyleValue = function (key) {\n            if (/Font/.test(key)) {\n                self.style[key + 'Height'] = self.getFontHeight(self.style[key]);\n                self.style[key + 'Name'] = self.getFontName(self.style[key]);\n                return;\n            }\n            if (key === 'moveOverlayBorderSegments') {\n                self.style[key] = self.style[key].split(',')\n                    .map(function (i) { return parseInt(i, 10); });\n            }\n        };\n        self.initProp = function (propName) {\n            if (!self.args[propName]) { return; }\n            Object.keys(self.args[propName]).forEach(function (key) {\n                self[propName][key] = self.args[propName][key];\n            });\n        };\n        self.setStyleProperty = function (key, value) {\n            if (self.styleKeys.indexOf(key) === -1) {\n                self.parentNodeStyle[key] = value;\n            } else {\n                self.parseStyleValue(value);\n                self.style[key] = value;\n                self.draw(true);\n                self.dispatchEvent('stylechanged', {name: 'style', value: value});\n            }\n        };\n        self.init = function () {\n            if (self.initialized) { return; }\n            var publicStyleKeyIntf = {};\n            self.setAttributes();\n            self.setStyle();\n            self.initScrollBox();\n            self.setDom();\n            self.type = 'canvas-datagrid';\n            self.initialized = true;\n            self.ie = /Trident/.test(window.navigator.userAgent);\n            self.edge = /Edge/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.moz = /Gecko/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.mobile = /Mobile/i.test(window.navigator.userAgent);\n            self.cursorGrab = 'grab';\n            self.cursorGrabing = 'grabbing';\n            self.cursorGrab = self.webKit ? '-webkit-grab' : self.cursorGrab;\n            self.cursorGrabing = self.moz ? '-webkit-grabbing' : self.cursorGrabbing;\n            self.pointerLockPosition = {x: 0, y: 0};\n            Object.keys(self.style).forEach(self.parseStyleValue);\n            self.intf.moveSelection = self.moveSelection;\n            self.intf.moveTo = self.moveTo;\n            self.intf.type = self.type;\n            self.intf.addEventListener = self.addEventListener;\n            self.intf.removeEventListener = self.removeEventListener;\n            self.intf.dispatchEvent = self.dispatchEvent;\n            /**\n             * Releases grid resources and removes grid elements.\n             * @memberof canvasDatagrid\n             * @name dispose\n             * @method\n             */\n            self.intf.dispose = self.dispose;\n            /**\n             * Appends the grid to another element later.  Not implemented.\n             * @memberof canvasDatagrid\n             * @name appendTo\n             * @method\n             * @param {number} el The element to append the grid to.\n             */\n            self.intf.appendTo = self.appendTo;\n            self.intf.filters = self.filters;\n            self.intf.sorters = self.sorters;\n            self.intf.autosize = self.autosize;\n            self.intf.beginEditAt = self.beginEditAt;\n            self.intf.endEdit = self.endEdit;\n            self.intf.setActiveCell = self.setActiveCell;\n            self.intf.forEachSelectedCell = self.forEachSelectedCell;\n            self.intf.scrollIntoView = self.scrollIntoView;\n            self.intf.clearChangeLog = self.clearChangeLog;\n            self.intf.gotoCell = self.gotoCell;\n            self.intf.gotoRow = self.gotoRow;\n            self.intf.getHeaderByName = self.getHeaderByName;\n            self.intf.findColumnScrollLeft = self.findColumnScrollLeft;\n            self.intf.findRowScrollTop = self.findRowScrollTop;\n            self.intf.fitColumnToValues = self.fitColumnToValues;\n            self.intf.findColumnMaxTextLength = self.findColumnMaxTextLength;\n            self.intf.disposeContextMenu = self.disposeContextMenu;\n            self.intf.getCellAt = self.getCellAt;\n            self.intf.isCellVisible = self.isCellVisible;\n            self.intf.order = self.order;\n            self.intf.draw = self.draw;\n            self.intf.selectArea = self.selectArea;\n            self.intf.clipElement = self.clipElement;\n            self.intf.getSchemaFromData = self.getSchemaFromData;\n            self.intf.setFilter = self.setFilter;\n            self.intf.selectRow = self.selectRow;\n            self.intf.parentGrid = self.parentGrid;\n            self.intf.toggleTree = self.toggleTree;\n            self.intf.expandTree = self.expandTree;\n            self.intf.collapseTree = self.collapseTree;\n            self.intf.canvas = self.canvas;\n            self.intf.context = self.ctx;\n            self.intf.insertRow = self.insertRow;\n            self.intf.deleteRow = self.deleteRow;\n            self.intf.addRow = self.addRow;\n            self.intf.insertColumn = self.insertColumn;\n            self.intf.deleteColumn = self.deleteColumn;\n            self.intf.addColumn = self.addColumn;\n            self.intf.getClippingRect = self.getClippingRect;\n            self.intf.setRowHeight = self.setRowHeight;\n            self.intf.setColumnWidth = self.setColumnWidth;\n            self.intf.resetColumnWidths = self.resetColumnWidths;\n            self.intf.resetRowHeights = self.resetRowHeights;\n            self.intf.resize = self.resize;\n            self.intf.selectColumn = self.selectColumn;\n            self.intf.selectRow = self.selectRow;\n            self.intf.selectAll = self.selectAll;\n            self.intf.selectNone = self.selectNone;\n            self.intf.drawChildGrids = self.drawChildGrids;\n            self.intf.assertPxColor = self.assertPxColor;\n            self.intf.clearPxColorAssertions = self.clearPxColorAssertions;\n            self.intf.integerToAlpha = self.integerToAlpha;\n            self.intf.copy = self.copy;\n            self.intf.setStyleProperty = self.setStyleProperty;\n            self.styleKeys = self.defaults.styles.map(function (i) {\n                return i[0];\n            });\n            self.DOMStyles = window.getComputedStyle(document.body, null);\n            Object.keys(self.DOMStyles).concat(Object.keys(self.style)).forEach(function (key) {\n                // unless this line is here, Object.keys() will not work on <instance>.style\n                publicStyleKeyIntf[key] = undefined;\n                Object.defineProperty(publicStyleKeyIntf, key, {\n                    get: function () {\n                        if (self.defaults.styles.indexOf(key) !== -1) {\n                            return self.style[key];\n                        }\n                        return self.canvas.style[key];\n                    },\n                    set: function (value) {\n                        self.setStyleProperty(key, value);\n                    }\n                });\n            });\n            Object.defineProperty(self.intf, 'shadowRoot', {\n                get: function () {\n                    return self.shadowRoot;\n                }\n            });\n            Object.defineProperty(self.intf, 'activeCell', {\n                get: function () {\n                    return self.activeCell;\n                }\n            });\n            Object.defineProperty(self.intf, 'hasFocus', {\n                get: function () {\n                    return self.hasFocus;\n                }\n            });\n            Object.defineProperty(self.intf, 'style', {\n                get: function () {\n                    return publicStyleKeyIntf;\n                },\n                set: function (value) {\n                    Object.keys(value).forEach(function (key) {\n                        if (self.defaults.styles.indexOf(key) === -1) {\n                            self.parentNodeStyle[key] = value;\n                        } else {\n                            self.parseStyleValue(value);\n                            self.style[key] = value[key];\n                        }\n                    });\n                    self.draw(true);\n                    self.dispatchEvent('stylechanged', {name: 'style', value: value});\n                }\n            });\n            Object.defineProperty(self.intf, 'attributes', { value: {}});\n            Object.keys(self.attributes).forEach(function (key) {\n                Object.defineProperty(self.intf.attributes, key, {\n                    get: function () {\n                        return self.attributes[key];\n                    },\n                    set: function (value) {\n                        self.attributes[key] = value;\n                        self.draw(true);\n                        self.dispatchEvent('attributechanged', {name: key, value: value[key]});\n                    }\n                });\n            });\n            self.filters.string = function (value, filterFor) {\n                value = String(value);\n                var filterRegExp,\n                    regEnd = /\\/(i|g|m)*$/,\n                    pattern = regEnd.exec(filterFor),\n                    flags = pattern ? pattern[0].substring(1) : '',\n                    flagLength = flags.length;\n                self.invalidFilterRegEx = undefined;\n                if (filterFor.substring(0, 1) === '/' && pattern) {\n                    try {\n                        filterRegExp = new RegExp(filterFor.substring(1, filterFor.length - (flagLength + 1)), flags);\n                    } catch (e) {\n                        self.invalidFilterRegEx = e;\n                        return;\n                    }\n                    return filterRegExp.test(value);\n                }\n                return value.toString ? value.toString().toLocaleUpperCase()\n                    .indexOf(filterFor.toLocaleUpperCase()) !== -1 : false;\n            };\n            self.filters.number = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                return value === filterFor;\n            };\n            if (self.attributes.name && self.attributes.saveAppearance) {\n                self.storedSettings = localStorage.getItem(self.storageName + '-' + self.attributes.name);\n                if (self.storedSettings) {\n                    try {\n                        self.storedSettings = JSON.parse(self.storedSettings);\n                    } catch (e) {\n                        console.warn('could not read settings from localStore', e);\n                        self.storedSettings = undefined;\n                    }\n                }\n                if (self.storedSettings) {\n                    if (typeof self.storedSettings.sizes === 'object'\n                            && self.storedSettings.sizes !== null) {\n                        self.sizes.rows = self.storedSettings.sizes.rows;\n                        self.sizes.columns = self.storedSettings.sizes.columns;\n                        ['trees', 'columns', 'rows'].forEach(function (i) {\n                            if (!self.sizes[i]) {\n                                self.sizes[i] = {};\n                            }\n                        });\n                    }\n                }\n            }\n            ['formatters', 'filters', 'sorters'].forEach(self.initProp);\n            if (self.args.data) {\n                self.intf.data = self.args.data;\n            }\n            if (!self.data) {\n                self.intf.data = [];\n            }\n            if (self.args.schema) {\n                self.intf.schema = self.args.schema;\n            }\n            if (self.isChildGrid) {\n                requestAnimationFrame(function () { self.resize(true); });\n            } else {\n                self.resize(true);\n            }\n            return self;\n        };\n        /**\n         * Removes focus from the grid.\n         * @memberof canvasDatagrid\n         * @name blur\n         * @method\n         */\n        self.intf.blur = function (e) {\n            self.hasFocus = false;\n        };\n        /**\n         * Focuses on the grid.\n         * @memberof canvasDatagrid\n         * @name focus\n         * @method\n         */\n        self.intf.focus = function () {\n            self.hasFocus = true;\n            self.controlInput.focus();\n        };\n        Object.defineProperty(self.intf, 'height', {\n            get: function () {\n                if (self.shadowRoot) {\n                    return self.shadowRoot.height;\n                }\n                return self.parentNode.height;\n            },\n            set: function (value) {\n                if (self.shadowRoot) {\n                    self.shadowRoot.height = value;\n                } else {\n                    self.parentNode.height = value;\n                }\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'width', {\n            get: function () {\n                if (self.shadowRoot) {\n                    return self.shadowRoot.width;\n                }\n                return self.parentNode.width;\n            },\n            set: function (value) {\n                if (self.shadowRoot) {\n                    self.shadowRoot.width = value;\n                } else {\n                    self.parentNode.width = value;\n                }\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRowHeights', {\n            get: function () {\n                return self.visibleRowHeights;\n            }\n        });\n        Object.defineProperty(self.intf, 'openChildren', {\n            get: function () {\n                return self.openChildren;\n            }\n        });\n        Object.defineProperty(self.intf, 'childGrids', {\n            get: function () {\n                return Object.keys(self.childGrids).map(function (gridId) {\n                    return self.childGrids[gridId];\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'isChildGrid', {\n            get: function () {\n                return self.isChildGrid;\n            }\n        });\n        Object.defineProperty(self.intf, 'parentNode', {\n            get: function () {\n                return self.parentNode;\n            },\n            set: function (value) {\n                if (!self.isChildGrid) {\n                    throw new TypeError('Cannot set property parentNode which has only a getter');\n                }\n                self.parentNode = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetParent', {\n            get: function () {\n                return self.parentNode;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetLeft', {\n            get: function () {\n                return self.parentNode.offsetLeft;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetTop', {\n            get: function () {\n                return self.parentNode.offsetTop;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollHeight', {\n            get: function () {\n                return self.scrollBox.scrollHeight;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollWidth', {\n            get: function () {\n                return self.scrollBox.scrollWidth;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollTop', {\n            get: function () {\n                return self.scrollBox.scrollTop;\n            },\n            set: function (value) {\n                self.scrollBox.scrollTop = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollLeft', {\n            get: function () {\n                return self.scrollBox.scrollLeft;\n            },\n            set: function (value) {\n                self.scrollBox.scrollLeft = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'sizes', {\n            get: function () {\n                return self.sizes;\n            }\n        });\n        Object.defineProperty(self.intf, 'input', {\n            get: function () {\n                return self.input;\n            }\n        });\n        Object.defineProperty(self.intf, 'controlInput', {\n            get: function () {\n                return self.controlInput;\n            }\n        });\n        Object.defineProperty(self.intf, 'currentCell', {\n            get: function () {\n                return self.currentCell;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleCells', {\n            get: function () {\n                return self.visibleCells;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRows', {\n            get: function () {\n                return self.visibleRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'selections', {\n            get: function () {\n                return self.selections;\n            }\n        });\n        Object.defineProperty(self.intf, 'dragMode', {\n            get: function () {\n                return self.dragMode;\n            }\n        });\n        Object.defineProperty(self.intf, 'changes', {\n            get: function () {\n                return self.changes;\n            }\n        });\n        self.intf.formatters = self.formatters;\n        self.normalizeDataset = function (data, callback) {\n            var i, d, max, syncFnInvoked;\n            if (data === null || data === '' || data === undefined) {\n                return callback([]);\n            }\n            if (typeof data === 'string'\n                    || typeof data === 'number'\n                    || typeof data === 'boolean') {\n                data = [{'0': data}];\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if ((!Array.isArray(data[0]) && typeof data[0] === 'object' && data[0] !== null)\n                            || (Array.isArray(data) && data.length === 0)) {\n                return callback(data);\n            }\n            if (typeof data === 'function') {\n                i = data.apply(self.intf, [function (d) {\n                    if (syncFnInvoked) {\n                        console.warn('Detected a callback to the data setter function after the same function already returned a value synchronously.');\n                    }\n                    self.normalizeDataset(d, callback);\n                }]);\n                if (i) {\n                    syncFnInvoked = true;\n                    self.normalizeDataset(i, callback);\n                }\n                return;\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if (Array.isArray(data)) {\n                if (!Array.isArray(data[0])) {\n                    //array of something?  throw it all into 1 row!\n                    data = [data];\n                }\n                // find the longest length\n                max = 0;\n                d = [];\n                data.forEach(function (row) {\n                    max = Math.max(max, row.length);\n                });\n                // map against length indexes\n                data.forEach(function (row, index) {\n                    var x;\n                    d[index] = {};\n                    for (x = 0; x < max; x += 1) {\n                        d[index][x] = row[x];\n                    }\n                });\n                return callback(d);\n            }\n            throw new Error('Unsupported data type.  Must be an array of arrays or an array of objects, function or string.');\n        };\n        self.eventNames.forEach(function (eventName) {\n            Object.defineProperty(self.intf, 'on' + eventName, {\n                get: function () {\n                    return self.componentL1Events[eventName];\n                },\n                set: function (value) {\n                    self.events[eventName] = [];\n                    self.componentL1Events[eventName] = value;\n                    if (!value) { return; }\n                    self.addEventListener(eventName, value);\n                }\n            });\n        });\n        Object.defineProperty(self.intf, 'frozenRow', {\n            get: function () {\n                return self.frozenRow;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.visibleRows.length > val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible rows.');\n                }\n                self.frozenRow = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'frozenColumn', {\n            get: function () {\n                return self.frozenColumn;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.getVisibleSchema().length > val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible columns.');\n                }\n                self.frozenColumn = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollIndexRect', {\n            get: function () {\n                return {\n                    top: self.scrollIndexTop,\n                    right: self.scrollIndexRight,\n                    bottom: self.scrollIndexBottom,\n                    left: self.scrollIndexLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollPixelRect', {\n            get: function () {\n                return {\n                    top: self.scrollPixelTop,\n                    right: self.scrollPixelRight,\n                    bottom: self.scrollPixelBottom,\n                    left: self.scrollPixelLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'selectionBounds', {\n            get: function () {\n                return self.getSelectionBounds();\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedRows', {\n            get: function () {\n                return self.getSelectedData(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedCells', {\n            get: function () {\n                return self.getSelectedData();\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleSchema', {\n            get: function () {\n                return self.getVisibleSchema().map(function eachDataRow(col) {\n                    return col;\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'ctx', {\n            get: function () {\n                return self.ctx;\n            }\n        });\n        Object.defineProperty(self.intf, 'schema', {\n            get: function schemaGetter() {\n                return self.getSchema();\n            },\n            set: function schemaSetter(value) {\n                if (!Array.isArray(value) || typeof value[0] !== 'object') {\n                    throw new Error('Schema must be an array of objects.');\n                }\n                if (value[0].name === undefined) {\n                    throw new Error('Expected schema to contain an object with at least a name property.');\n                }\n                self.schema = value.map(function eachSchemaColumn(column, index) {\n                    column.width = column.width || self.style.cellWidth;\n                    column[self.uniqueId] = self.getSchemaNameHash(column.name);\n                    column.filter = column.filter || self.filter(column.type);\n                    column.type = column.type || 'string';\n                    column.index = index;\n                    column.columnIndex = index;\n                    column.rowIndex = -1;\n                    return column;\n                });\n                self.tempSchema = undefined;\n                self.createNewRowData();\n                self.createColumnOrders();\n                self.tryLoadStoredOrders();\n                self.resize(true);\n                self.dispatchEvent('schemachanged', {schema: self.schema});\n            }\n        });\n        Object.defineProperty(self.intf, 'data', {\n            get: function dataGetter() {\n                return self.data.map(function (row) {\n                    delete row[self.uniqueId];\n                    return row;\n                });\n            },\n            set: function dataSetter(value) {\n                self.normalizeDataset(value, function (d) {\n                    self.originalData = d.map(function eachDataRow(row) {\n                        row[self.uniqueId] = self.uId;\n                        self.uId += 1;\n                        return row;\n                    });\n                    self.changes = [];\n                    //TODO apply filter to incoming dataset\n                    self.data = self.originalData;\n                    if (!self.schema) {\n                        self.tempSchema = self.getSchemaFromData();\n                    }\n                    if (!self.schema && self.data.length === 0) {\n                        self.tempSchema = [{name: ''}];\n                        self.tempSchema[0][self.uniqueId] = self.getSchemaNameHash('');\n                    }\n                    if (self.tempSchema && !self.schema) {\n                        self.createColumnOrders();\n                        self.tryLoadStoredOrders();\n                        self.dispatchEvent('schemachanged', {schema: self.tempSchema});\n                    }\n                    self.createNewRowData();\n                    if (self.attributes.autoResizeColumns && self.data.length > 0\n                            && self.storedSettings === undefined) {\n                        self.autosize();\n                    }\n                    self.fitColumnToValues('cornerCell', true);\n                    self.resize(true);\n                    self.createRowOrders();\n                    self.tryLoadStoredOrders();\n                    self.dispatchEvent('datachanged', {data: self.data});\n                });\n            }\n        });\n        self.initScrollBox = function () {\n            var sHeight = 0,\n                sWidth = 0,\n                scrollTop = 0,\n                scrollLeft = 0,\n                scrollHeight = 0,\n                scrollWidth = 0,\n                scrollBoxHeight = 20,\n                scrollBoxWidth = 20;\n            function setScrollTop(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollTop value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollHeight) {\n                    value = scrollHeight;\n                }\n                if (scrollHeight < 0) {\n                    value = 0;\n                }\n                scrollTop = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            function setScrollLeft(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollLeft value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollWidth) {\n                    value = scrollWidth;\n                }\n                if (scrollWidth < 0) {\n                    value = 0;\n                }\n                scrollLeft = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            self.scrollBox.toString = function () {\n                return '{\"width\": ' + scrollWidth\n                    + ', \"height\": ' + scrollHeight\n                    + ', \"left\": ' + scrollLeft\n                    + ', \"top\": ' + scrollTop + '}';\n            };\n            self.scrollBox.scrollTo = function (x, y, supressDrawEvent) {\n                setScrollLeft(x, true);\n                setScrollTop(y, supressDrawEvent);\n            };\n            Object.defineProperty(self.scrollBox, 'scrollBoxHeight', {\n                get: function () {\n                    return scrollBoxHeight;\n                },\n                set: function (value) {\n                    scrollBoxHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollBoxWidth', {\n                get: function () {\n                    return scrollBoxWidth;\n                },\n                set: function (value) {\n                    scrollBoxWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'height', {\n                get: function () {\n                    return sHeight;\n                },\n                set: function (value) {\n                    if (scrollHeight < value) {\n                        scrollTop = 0;\n                    }\n                    sHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'width', {\n                get: function () {\n                    return sWidth;\n                },\n                set: function (value) {\n                    sWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollTop', {\n                get: function () {\n                    return scrollTop;\n                },\n                set: setScrollTop\n            });\n            Object.defineProperty(self.scrollBox, 'scrollLeft', {\n                get: function () {\n                    return scrollLeft;\n                },\n                set: setScrollLeft\n            });\n            Object.defineProperty(self.scrollBox, 'scrollHeight', {\n                get: function () {\n                    return scrollHeight;\n                },\n                set: function (value) {\n                    if (scrollTop > value) {\n                        scrollTop = Math.max(value, 0);\n                    }\n                    if (scrollHeight < sHeight) {\n                        scrollTop = 0;\n                    }\n                    scrollHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollWidth', {\n                get: function () {\n                    return scrollWidth;\n                },\n                set: function (value) {\n                    if (scrollLeft > value) {\n                        scrollLeft = Math.max(value, 0);\n                    }\n                    scrollWidth = value;\n                }\n            });\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/intf.js\n// module id = 6\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false, Event: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var zIndexTop = 9000, hoverScrollTimeout, autoCompleteContext;\n        function applyContextItemStyle(contextItemContainer) {\n            self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item' + (self.mobile ? '-mobile' : ''));\n            contextItemContainer.addEventListener('mouseover', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n            });\n            contextItemContainer.addEventListener('mouseout', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n            });\n        }\n        function createContextMenu(ev, pos, items, parentContextMenu) {\n            var container = document.createElement('div'),\n                upArrow = document.createElement('div'),\n                downArrow = document.createElement('div'),\n                children = [],\n                selectedIndex = -1,\n                intf = {},\n                rect;\n            if (!Array.isArray(items)) { throw new Error('createContextMenu expects an array.'); }\n            function createItems() {\n                items.forEach(function (item) {\n                    var contextItemContainer = document.createElement('div'),\n                        childMenuArrow;\n                    function removeChildContext(e) {\n                        if (e.relatedTarget === container\n                                || item.contextMenu.container === e.relatedTarget\n                                || childMenuArrow === e.relatedTarget\n                                || (contextItemContainer === e.relatedTarget)\n                                || item.contextMenu.container.contains(e.relatedTarget)\n                                ) { return; }\n                        item.contextMenu.dispose();\n                        children.splice(children.indexOf(item.contextMenu), 1);\n                        item.contextMenu = undefined;\n                        contextItemContainer.removeEventListener('mouseout', removeChildContext);\n                        container.removeEventListener('mouseout', removeChildContext);\n                        contextItemContainer.setAttribute('contextOpen', '0');\n                        contextItemContainer.setAttribute('opening', '0');\n                    }\n                    function contextAddCallback(items) {\n                        // check yet again if the user hasn't moved off\n                        if (contextItemContainer.getAttribute('opening') !== '1' ||\n                                contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        var cPos = contextItemContainer.getBoundingClientRect();\n                        cPos = {\n                            left: cPos.left + self.style.childContextMenuMarginLeft + container.offsetWidth,\n                            top: cPos.top + self.style.childContextMenuMarginTop,\n                            bottom: cPos.bottom,\n                            right: cPos.right\n                        };\n                        item.contextMenu = createContextMenu(ev, cPos, items, intf);\n                        contextItemContainer.setAttribute('contextOpen', '1');\n                        contextItemContainer.addEventListener('mouseout', removeChildContext);\n                        container.addEventListener('mouseout', removeChildContext);\n                        children.push(item.contextMenu);\n                    }\n                    function createChildContext() {\n                        var i;\n                        if (contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        contextItemContainer.setAttribute('opening', '1');\n                        if (typeof item.items === 'function') {\n                            i  = item.items.apply(intf, [function (items) {\n                                contextAddCallback(items);\n                            }]);\n                            if (i !== undefined && Array.isArray(i)) {\n                                contextAddCallback(i);\n                            }\n                            return;\n                        }\n                        contextAddCallback(item.items);\n                    }\n                    function addItem(item) {\n                        function addContent(content) {\n                            if (content === null) { return; }\n                            if (typeof content === 'function') {\n                                return addContent(content(ev));\n                            }\n                            if (typeof content === 'object') {\n                                contextItemContainer.appendChild(content);\n                                return;\n                            }\n                            applyContextItemStyle(contextItemContainer);\n                            contextItemContainer.innerHTML = content;\n                            return;\n                        }\n                        addContent(item.title);\n                        item.contextItemContainer = contextItemContainer;\n                        if ((item.items && item.items.length > 0) || typeof item.items === 'function') {\n                            childMenuArrow = document.createElement('div');\n                            self.createInlineStyle(childMenuArrow, 'canvas-datagrid-context-child-arrow');\n                            childMenuArrow.innerHTML = self.style.childContextMenuArrowHTML;\n                            contextItemContainer.appendChild(childMenuArrow);\n                            contextItemContainer.addEventListener('mouseover', createChildContext);\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                contextItemContainer.setAttribute('opening', '0');\n                            });\n                        }\n                        if (item.click) {\n                            contextItemContainer.addEventListener('click', function (ev) {\n                                item.click.apply(self, [ev]);\n                            });\n                        }\n                    }\n                    addItem(item);\n                    container.appendChild(contextItemContainer);\n                });\n            }\n            function clickIndex(idx) {\n                items[idx].contextItemContainer.dispatchEvent(new Event('click'));\n            }\n            function checkArrowVisibility() {\n                if (container.scrollTop > 0) {\n                    self.parentDOMNode.appendChild(upArrow);\n                } else if (upArrow.parentNode) {\n                    upArrow.parentNode.removeChild(upArrow);\n                }\n                if (container.scrollTop >= container.scrollHeight - container.offsetHeight && downArrow.parentNode) {\n                    downArrow.parentNode.removeChild(downArrow);\n                } else if (container.scrollHeight - container.offsetHeight > 0\n                        && !(container.scrollTop >= container.scrollHeight - container.offsetHeight)) {\n                    self.parentDOMNode.appendChild(downArrow);\n                }\n            }\n            function startHoverScroll(type) {\n                return function t() {\n                    var a = self.attributes.contextHoverScrollAmount;\n                    if (type === 'up' && container.scrollTop === 0) { return; }\n                    if (type === 'down' && container.scrollTop === container.scrollHeight) { return; }\n                    container.scrollTop += (type === 'up' ? -a : a);\n                    hoverScrollTimeout = setTimeout(t, self.attributes.contextHoverScrollRateMs, type);\n                };\n            }\n            function endHoverScroll(type) {\n                return function () {\n                    clearTimeout(hoverScrollTimeout);\n                };\n            }\n            function init() {\n                var loc = {},\n                    s = self.scrollOffset(self.canvas);\n                createItems();\n                self.createInlineStyle(container, 'canvas-datagrid-context-menu' + (self.mobile ? '-mobile' : ''));\n                loc.x = pos.left - s.left;\n                loc.y = pos.top - s.top;\n                loc.height = 0;\n                zIndexTop += 1;\n                container.style.position = 'absolute';\n                upArrow.style.color = self.style.contextMenuArrowColor;\n                downArrow.style.color = self.style.contextMenuArrowColor;\n                [upArrow, downArrow].forEach(function (el) {\n                    el.style.textAlign = 'center';\n                    el.style.position = 'absolute';\n                    el.style.zIndex = zIndexTop + 1;\n                });\n                container.style.zIndex = zIndexTop;\n                if (parentContextMenu && parentContextMenu.inputDropdown) {\n                    container.style.maxHeight = window.innerHeight - loc.y - self.style.autocompleteBottomMargin + 'px';\n                    container.style.minWidth = pos.width + 'px';\n                    loc.y += pos.height;\n                }\n                if (self.mobile) {\n                    container.style.width = pos.width + 'px';\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                container.addEventListener('scroll', checkArrowVisibility);\n                container.addEventListener('wheel', function (e) {\n                    if (self.hasFocus) {\n                        container.scrollTop += e.deltaY;\n                        container.scrollLeft += e.deltaX;\n                    }\n                    checkArrowVisibility();\n                });\n                upArrow.innerHTML = self.style.contextMenuArrowUpHTML;\n                downArrow.innerHTML = self.style.contextMenuArrowDownHTML;\n                container.appendChild(upArrow);\n                document.body.appendChild(downArrow);\n                document.body.appendChild(container);\n                rect = container.getBoundingClientRect();\n                if (rect.bottom > window.innerHeight && !(parentContextMenu && parentContextMenu.inputDropdown)) {\n                    loc.y = window.innerHeight - container.offsetHeight;\n                    if (loc.y < 0) { loc.y = 0; }\n                    if (container.offsetHeight > window.innerHeight - self.style.contextMenuWindowMargin) {\n                        container.style.height = window.innerHeight - self.style.contextMenuWindowMargin + 'px';\n                        loc.y += self.style.contextMenuWindowMargin * 0.5;\n                    }\n                }\n                if (rect.right > window.innerWidth) {\n                    if (parentContextMenu && parentContextMenu.container) {\n                        loc.x = parentContextMenu.container.offsetLeft - container.offsetWidth;\n                    } else {\n                        loc.x = window.innerWidth - container.offsetWidth;\n                    }\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                rect = container.getBoundingClientRect();\n                upArrow.style.top = rect.top + 'px';\n                downArrow.style.top = rect.top + rect.height - downArrow.offsetHeight + 'px';\n                upArrow.style.left = rect.left + 'px';\n                downArrow.style.left = rect.left + 'px';\n                downArrow.style.width = container.offsetWidth + 'px';\n                upArrow.style.width = container.offsetWidth + 'px';\n                downArrow.addEventListener('mouseover', startHoverScroll('down'));\n                downArrow.addEventListener('mouseout', endHoverScroll('down'));\n                upArrow.addEventListener('mouseover', startHoverScroll('up'));\n                upArrow.addEventListener('mouseout', endHoverScroll('up'));\n                checkArrowVisibility();\n            }\n            intf.parentGrid = self.intf;\n            intf.parentContextMenu = parentContextMenu;\n            intf.container = container;\n            init();\n            intf.clickIndex = clickIndex;\n            intf.rect = rect;\n            intf.items = items;\n            intf.upArrow = upArrow;\n            intf.downArrow = downArrow;\n            intf.dispose = function () {\n                clearTimeout(hoverScrollTimeout);\n                children.forEach(function (c) {\n                    c.dispose();\n                });\n                [downArrow, upArrow, container].forEach(function (el) {\n                    if (el.parentNode) { el.parentNode.removeChild(el); }\n                });\n            };\n            Object.defineProperty(intf, 'selectedIndex', {\n                get: function () {\n                    return selectedIndex;\n                },\n                set: function (value) {\n                    if (typeof value !== 'number' || isNaN(value || !isFinite(value))) {\n                        throw new Error('Context menu selected index must be a sane number.');\n                    }\n                    selectedIndex = value;\n                    if (selectedIndex > items.length - 1) {\n                        selectedIndex = items.length - 1;\n                    }\n                    if (selectedIndex < 0) {\n                        selectedIndex = 0;\n                    }\n                    items.forEach(function (item, index) {\n                        if (index === selectedIndex) {\n                            return self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                        }\n                        self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item');\n                    });\n                }\n            });\n            return intf;\n        }\n        function createFilterContextMenuItems(e) {\n            var filterContainer = document.createElement('div'),\n                filterLabel = document.createElement('div'),\n                filterAutoCompleteButton = document.createElement('button'),\n                filterInput = document.createElement('input'),\n                n = e.cell && e.cell.header ? e.cell.header.title || e.cell.header.name : '',\n                autoCompleteItems,\n                iRect;\n            function checkRegExpErrorState() {\n                filterInput.style.background = self.style.contextFilterInputBackground;\n                filterInput.style.color = self.style.contextFilterInputColor;\n                if (self.invalidFilterRegEx) {\n                    filterInput.style.background = self.style.contextFilterInvalidRegExpBackground;\n                    filterInput.style.color = self.style.contextFilterInvalidRegExpColor;\n                }\n            }\n            function fillAutoComplete() {\n                var count = 0;\n                autoCompleteItems = {};\n                self.data.forEach(function (row) {\n                    var value = row[e.cell.header.name];\n                    if (autoCompleteItems[value] || count > self.attributes.maxAutoCompleteItems) { return; }\n                    count += 1;\n                    autoCompleteItems[value] = {\n                        title: self.formatters[e.cell.header.type || 'string']({ cell: { value: value }}),\n                        click: function (e) {\n                            filterInput.value = value;\n                            e.stopPropagation();\n                            filterInput.dispatchEvent(new Event('keyup'));\n                            self.disposeAutocomplete();\n                            return;\n                        }\n                    };\n                });\n                autoCompleteItems = Object.keys(autoCompleteItems).map(function (key) {\n                    return autoCompleteItems[key];\n                });\n            }\n            function createAutoCompleteContext(ev) {\n                if (ev && [40, 38, 13, 9].indexOf(ev.keyCode) !== -1) { return; }\n                fillAutoComplete();\n                iRect = filterInput.getBoundingClientRect();\n                if (autoCompleteContext) {\n                    autoCompleteContext.dispose();\n                    autoCompleteContext = undefined;\n                }\n                autoCompleteContext = createContextMenu(e, {\n                    left: iRect.left,\n                    top: iRect.top,\n                    right: iRect.right,\n                    bottom: iRect.bottom,\n                    height: iRect.height,\n                    width: iRect.width\n                }, autoCompleteItems, {inputDropdown: true});\n                autoCompleteContext.selectedIndex = 0;\n            }\n            self.createInlineStyle(filterLabel, 'canvas-datagrid-context-menu-label');\n            self.createInlineStyle(filterAutoCompleteButton, 'canvas-datagrid-context-menu-filter-button');\n            self.createInlineStyle(filterInput, 'canvas-datagrid-context-menu-filter-input');\n            checkRegExpErrorState();\n            filterInput.onclick = self.disposeAutocomplete;\n            filterInput.addEventListener('keydown', function (e) {\n                //down\n                if (e.keyCode === 40) {\n                    autoCompleteContext.selectedIndex += 1;\n                }\n                //up\n                if (e.keyCode === 38) {\n                    autoCompleteContext.selectedIndex -= 1;\n                }\n                //enter\n                if (e.keyCode === 13) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    self.disposeContextMenu();\n                }\n                //tab\n                if (e.keyCode === 9) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    e.preventDefault();\n                }\n                //esc\n                if (e.keyCode === 27) {\n                    self.disposeContextMenu();\n                }\n            });\n            filterInput.addEventListener('keyup', function () {\n                self.setFilter(e.cell.header.name, filterInput.value);\n            });\n            filterInput.addEventListener('keyup', createAutoCompleteContext);\n            ['focus', 'blur', 'keydown', 'keyup', 'change'].forEach(function (en) {\n                filterInput.addEventListener(en, checkRegExpErrorState);\n            });\n            filterInput.value = e.cell.header ? self.columnFilters[e.cell.header.name] || '' : '';\n            filterLabel.innerHTML = self.attributes.filterOptionText.replace(/%s/g, n);\n            filterAutoCompleteButton.onclick = function () {\n                if (autoCompleteContext) {\n                    return self.disposeAutocomplete();\n                }\n                createAutoCompleteContext();\n            };\n            filterAutoCompleteButton.innerHTML = self.style.contextFilterButtonHTML;\n            filterContainer.addEventListener('click', function (e) {\n                return e.stopPropagation();\n            });\n            filterContainer.appendChild(filterLabel);\n            filterContainer.appendChild(filterInput);\n            filterContainer.appendChild(filterAutoCompleteButton);\n            e.items.push({\n                title: filterContainer\n            });\n            if (Object.keys(self.columnFilters).length) {\n                Object.keys(self.columnFilters).forEach(function (cf) {\n                    var h = self.getHeaderByName(cf);\n                    e.items.push({\n                        title: self.attributes.removeFilterOptionText.replace(/%s/g, h.title || h.name),\n                        click: function removeFilterClick(e) {\n                            e.preventDefault();\n                            self.setFilter(cf, '');\n                            self.controlInput.focus();\n                        }\n                    });\n                });\n            }\n        }\n        function addDefaultContextMenuItem(e) {\n            var isNormalCell = !(e.cell.isBackground || e.cell.isHeaderCellCap\n                    || e.cell.isScrollBar || e.cell.isCorner || e.cell.isRowHeader)\n                    && e.cell.header;\n            if (self.attributes.showFilter && isNormalCell) {\n                createFilterContextMenuItems(e);\n            }\n            if (self.attributes.showCopy\n                    && self.selections.reduce(function (p, r) {\n                        return p + r.length;\n                    }, 0) > 0) {\n                e.items.push({\n                    title: self.attributes.copyText,\n                    click: function () {\n                        document.execCommand('copy');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.showPaste && self.clipBoardData) {\n                e.items.push({\n                    title: self.attributes.pasteText,\n                    click: function () {\n                        self.paste(self.clipBoardData, e.cell.columnIndex, e.cell.rowIndex);\n                        self.draw();\n                    }\n                });\n            }\n            if (self.attributes.showColumnSelector) {\n                e.items.push({\n                    title: self.attributes.columnSelectorText,\n                    items: function () {\n                        var d = [];\n                        self.getSchema().forEach(function (column) {\n                            function toggleColumnVisibility(e) {\n                                column.hidden = !column.hidden;\n                                e.preventDefault();\n                                self.stopPropagation(e);\n                                self.disposeContextMenu();\n                                self.draw();\n                            }\n                            var el = document.createElement('div');\n                            applyContextItemStyle(el);\n                            el.addEventListener('touchstart', toggleColumnVisibility);\n                            el.addEventListener('click', toggleColumnVisibility);\n                            el.innerHTML = (column.hidden ? self.attributes.columnSelectorHiddenText\n                                    : self.attributes.columnSelectorVisibleText)\n                                    + (column.title || column.name);\n                            d.push({\n                                title: el\n                            });\n                        });\n                        return d;\n                    }\n                });\n                if (e.cell && e.cell.header) {\n                    e.items.push({\n                        title: self.attributes.hideColumnText\n                            .replace(/%s/ig, e.cell.header.title || e.cell.header.name),\n                        click: function (ev) {\n                            e.cell.header.hidden = true;\n                            ev.preventDefault();\n                            self.stopPropagation(ev);\n                            self.disposeContextMenu();\n                            setTimeout(self.draw, 10);\n                        }\n                    });\n                }\n            }\n            if (self.attributes.saveAppearance && self.attributes.showClearSettingsOption\n                    && (Object.keys(self.sizes.rows).length > 0\n                        || Object.keys(self.sizes.columns).length > 0)) {\n                e.items.push({\n                    title: self.attributes.clearSettingsOptionText,\n                    click: function (e) {\n                        e.preventDefault();\n                        self.sizes.rows = {};\n                        self.sizes.columns = {};\n                        self.createRowOrders();\n                        self.createColumnOrders();\n                        self.storedSettings = undefined;\n                        self.dispatchEvent('resizecolumn', {columnWidth: self.style.cellWidth});\n                        self.dispatchEvent('resizerow', {cellHeight: self.style.cellHeight});\n                        self.setStorageData();\n                        self.resize(true);\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.allowSorting && self.attributes.showOrderByOption && isNormalCell) {\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextAsc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'asc');\n                        self.controlInput.focus();\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextDesc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'desc');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n        }\n        self.disposeAutocomplete = function () {\n            if (autoCompleteContext) {\n                autoCompleteContext.dispose();\n                autoCompleteContext = undefined;\n            }\n        };\n        self.disposeContextMenu = function () {\n            document.removeEventListener('click', self.disposeContextMenu);\n            zIndexTop = 9000;\n            self.disposeAutocomplete();\n            if (self.contextMenu) {\n                self.contextMenu.dispose();\n            }\n            self.contextMenu = undefined;\n        };\n        self.contextmenuEvent = function (e, overridePos) {\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            function createDiposeEvent() {\n                requestAnimationFrame(function () {\n                    document.addEventListener('click', self.disposeContextMenu);\n                    document.removeEventListener('mouseup', createDiposeEvent);\n                });\n            }\n            var contextPosition,\n                items = [],\n                pos = overridePos || self.getLayerPos(e),\n                ev = {\n                    NativeEvent: e,\n                    cell: self.getCellAt(pos.x, pos.y),\n                    items: items\n                },\n                st,\n                sl;\n            if (!ev.cell.isGrid) {\n                addDefaultContextMenuItem(ev);\n            }\n            if (document.scrollingElement) {\n                sl = document.scrollingElement.scrollLeft;\n                st = document.scrollingElement.scrollTop;\n            }\n            if (self.dispatchEvent('contextmenu', ev)) {\n                return;\n            }\n            if (!ev.cell.isGrid) {\n                if (self.contextMenu) {\n                    self.disposeContextMenu();\n                }\n                contextPosition = {\n                    left: pos.x + sl + pos.rect.left + self.style.contextMenuMarginLeft + self.canvasOffsetLeft,\n                    top: pos.y + st + pos.rect.top + self.style.contextMenuMarginTop + self.canvasOffsetTop,\n                    right: ev.cell.width + ev.cell.x + pos.rect.left,\n                    bottom: ev.cell.height + ev.cell.y + pos.rect.top,\n                    height: ev.cell.height,\n                    width: ev.cell.width\n                };\n                if (self.mobile) {\n                    contextPosition.left = self.style.mobileContextMenuMargin + 'px';\n                    contextPosition.width = self.width - (self.style.mobileContextMenuMargin * 2) + 'px';\n                }\n                self.contextMenu = createContextMenu(ev, contextPosition, items);\n                document.addEventListener('mouseup', createDiposeEvent);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/contextMenu.js\n// module id = 7\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.getClippingRect = function (ele) {\n            var boundingRect = self.position(self.parentNode),\n                eleRect = self.position(ele),\n                s = self.scrollOffset(self.canvas),\n                clipRect = {\n                    x: 0,\n                    y: 0,\n                    h: 0,\n                    w: 0\n                },\n                parentRect = {\n                    x: -Infinity,\n                    y: -Infinity,\n                    h: Infinity,\n                    w: Infinity\n                },\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth();\n            boundingRect.top -= s.top;\n            boundingRect.left -= s.left;\n            eleRect.top -= s.top;\n            eleRect.left -= s.left;\n            clipRect.h = boundingRect.top + boundingRect.height - ele.offsetTop - self.style.scrollBarWidth;\n            clipRect.w = boundingRect.left + boundingRect.width - ele.offsetLeft - self.style.scrollBarWidth;\n            clipRect.x = boundingRect.left + (eleRect.left * -1) + rowHeaderCellWidth;\n            clipRect.y = boundingRect.top + (eleRect.top * -1) + columnHeaderCellHeight;\n            return {\n                x: clipRect.x > parentRect.x ? clipRect.x : parentRect.x,\n                y: clipRect.y > parentRect.y ? clipRect.y : parentRect.y,\n                h: clipRect.h < parentRect.h ? clipRect.h : parentRect.h,\n                w: clipRect.w < parentRect.w ? clipRect.w : parentRect.w\n            };\n        };\n        self.clipElement = function (ele) {\n            var clipRect = self.getClippingRect(ele);\n            if (clipRect.w < 0) { clipRect.w = 0; }\n            if (clipRect.h < 0) { clipRect.h = 0; }\n            ele.style.clip = 'rect('\n                + clipRect.y + 'px,'\n                + clipRect.w + 'px,'\n                + clipRect.h + 'px,'\n                + clipRect.x + 'px'\n                + ')';\n            // INFO https://developer.mozilla.org/en-US/docs/Web/CSS/clip\n            // clip has been \"deprecated\" for clipPath.  Of course nothing but chrome\n            // supports clip path, so we'll keep using clip until someday clipPath becomes\n            // more widely support.  The code below works correctly, but setting clipPath and clip\n            // at the same time has undesirable results.\n            // ele.style.clipPath = 'polygon('\n            //     + clipRect.x + 'px ' + clipRect.y + 'px,'\n            //     + clipRect.x + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.y + 'px'\n            //     + ')';\n        };\n        self.scrollOffset = function (e) {\n            var x = 0, y = 0;\n            while (e.parentNode && e.nodeName !== 'CANVAS-DATAGRID') {\n                if (e.nodeType !== 'canvas-datagrid-tree'\n                        && e.nodeType !== 'canvas-datagrid-cell') {\n                    x -= e.scrollLeft;\n                    y -= e.scrollTop;\n                }\n                e = e.parentNode;\n            }\n            return {left: x, top: y};\n        };\n        self.resizeEditInput = function () {\n            if (self.input) {\n                var pos = self.canvas.getBoundingClientRect(),\n                    s = self.scrollOffset(self.canvas),\n                    bm = self.style.borderCollapse === 'collapse' ? 1 : 2,\n                    borderWidth = (self.style.cellBorderWidth * bm),\n                    cell = self.getVisibleCellByIndex(self.input.editCell.columnIndex, self.input.editCell.rowIndex)\n                        || {x: -100, y: -100, height: 0, width: 0};\n                if (self.mobile) {\n                    self.input.style.left = '0';\n                    self.input.style.top = (self.height - self.style.mobileEditInputHeight) - borderWidth - 1 + 'px';\n                    self.input.style.height = self.style.mobileEditInputHeight + 'px';\n                    self.input.style.width = self.width - borderWidth - 1 + 'px';\n                    return;\n                }\n                self.input.style.left = pos.left + cell.x + self.canvasOffsetLeft - s.left + 'px';\n                self.input.style.top = pos.top + cell.y - borderWidth + self.canvasOffsetTop - s.top + 'px';\n                self.input.style.height = cell.height - borderWidth + 'px';\n                self.input.style.width = cell.width - self.style.cellPaddingLeft + 'px';\n                self.clipElement(self.input);\n            }\n        };\n        self.position = function (e, ignoreScrollOffset) {\n            var x = 0, y = 0, s = e, h, w;\n            while (e.offsetParent && e.nodeName !== 'CANVAS-DATAGRID') {\n                x += e.offsetLeft;\n                y += e.offsetTop;\n                h = e.offsetHeight;\n                w = e.offsetWidth;\n                e = e.offsetParent;\n            }\n            if (ignoreScrollOffset) {\n                return {left: x, top: y, height: h, width: w};\n            }\n            e = s;\n            s = self.scrollOffset(e);\n            return { left: x + s.left, top: y + s.top, height: h, width: w };\n        };\n        self.getLayerPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.clientX - rect.left,\n                    y: e.clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        /**\n         * Ends editing, optionally aborting the edit.\n         * @memberof canvasDatagrid\n         * @name endEdit\n         * @method\n         * @param {boolean} abort When true, abort the edit.\n         */\n        self.endEdit = function (abort) {\n            var cell = self.input.editCell,\n                y = cell.rowIndex;\n            function abortEdit() {\n                abort = true;\n            }\n            if (self.dispatchEvent('beforeendedit', {\n                    cell: cell,\n                    newValue: self.input.value,\n                    oldValue: cell.value,\n                    abort: abortEdit,\n                    input: self.input\n                })) { return false; }\n            if (self.input.value !== cell.value && !abort) {\n                self.changes[y] = self.changes[y] || {};\n                self.changes[y][cell.header.name] = self.input.value;\n                cell.data[cell.header.name] = self.input.value;\n                if (y === self.data.length) {\n                    if (self.dispatchEvent('newrow', {\n                            value: self.input.value,\n                            defaultValue: cell.value,\n                            aborted: abort,\n                            cell: cell,\n                            input: self.input\n                        })) { return false; }\n                    self.uId += 1;\n                    self.addRow(cell.data);\n                    self.createNewRowData();\n                }\n                self.draw(true);\n            }\n            document.body.removeChild(self.input);\n            self.controlInput.focus();\n            self.dispatchEvent('endedit', {\n                cell: cell,\n                value: self.input.value,\n                aborted: abort,\n                input: self.input\n            });\n            self.input = undefined;\n            return true;\n        };\n        /**\n         * Begins editing at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name beginEditAt\n         * @method\n         * @param {number} x The column index of the cell to edit.\n         * @param {number} y The row index of the cell to edit.\n         */\n        self.beginEditAt = function (x, y) {\n            if (!self.attributes.editable) { return; }\n            if (self.input) {\n                self.endEdit();\n            }\n            var cell = self.getVisibleCellByIndex(x, y),\n                s = self.getVisibleSchema(),\n                enumItems,\n                enu,\n                option,\n                valueInEnum;\n            if (!(cell && cell.header)) { return; }\n            //HACK for IE10, does not like literal enum\n            enu = cell.header['enum'];\n            if (self.dispatchEvent('beforebeginedit', {cell: cell})) { return false; }\n            self.scrollIntoView(x, y);\n            self.setActiveCell(x, y);\n            if (enu) {\n                self.input = document.createElement('select');\n            } else {\n                self.input = document.createElement(self.attributes.multiLine\n                    ? 'textarea' : 'input');\n            }\n            cell = self.getVisibleCellByIndex(x, y);\n            //HACK on mobile devices sometimes edit can begin without the cell being in view, I don't know how.\n            if (!cell) { return; }\n            if (enu) {\n                // add enums\n                if (typeof enu === 'function') {\n                    enumItems = enu.apply(self.intf, [{cell: cell}]);\n                } else if (Array.isArray(enu)) {\n                    enumItems = enu;\n                }\n                enumItems.forEach(function (e) {\n                    var i = document.createElement('option'),\n                        val,\n                        title;\n                    if (Array.isArray(e)) {\n                        val = e[0];\n                        title = e[1];\n                    } else {\n                        val = e;\n                        title = e;\n                    }\n                    if (val === cell.value) { valueInEnum = true; }\n                    i.value = val;\n                    i.innerHTML = title;\n                    self.input.appendChild(i);\n                });\n                if (!valueInEnum) {\n                    option = document.createElement('option');\n                    option.value = cell.value;\n                    option.innerHTML = cell.value;\n                    self.input.appendChild(option);\n                }\n                self.input.addEventListener('change', function () {\n                    self.endEdit();\n                    self.draw(true);\n                });\n            }\n            document.body.appendChild(self.input);\n            self.createInlineStyle(self.input, self.mobile ? 'canvas-datagrid-edit-mobile-input' : 'canvas-datagrid-edit-input');\n            self.input.style.position = 'absolute';\n            self.input.editCell = cell;\n            self.resizeEditInput();\n            self.input.style.zIndex = '2';\n            self.input.style.fontSize = (parseInt(self.style.editCellFontSize, 10) * self.scale) + 'px';\n            self.input.value = cell.value;\n            self.input.focus();\n            self.input.addEventListener('click', self.stopPropagation);\n            self.input.addEventListener('dblclick', self.stopPropagation);\n            self.input.addEventListener('mouseup', self.stopPropagation);\n            self.input.addEventListener('mousedown', self.stopPropagation);\n            self.input.addEventListener('keydown', function (e) {\n                var nx = cell.columnIndex,\n                    ny = cell.rowIndex;\n                // esc\n                if (e.keyCode === 27) {\n                    self.endEdit(true);\n                    self.draw(true);\n                // enter\n                } else if (e.keyCode === 13\n                        && (!self.attributes.multiLine\n                            || (self.attributes.multiLine && e.shiftKey))) {\n                    self.endEdit();\n                    self.draw(true);\n                } else if (e.keyCode === 9) {\n                    e.preventDefault();\n                    if (!self.endEdit()) {\n                        return;\n                    }\n                    if (e.shiftKey) {\n                        nx -= 1;\n                    } else {\n                        nx += 1;\n                    }\n                    if (nx < 0) {\n                        nx = s.length - 1;\n                        ny -= 1;\n                    }\n                    if (nx > s.length - 1) {\n                        nx = 0;\n                        ny += 1;\n                    }\n                    if (ny < 0) {\n                        ny = self.data.length - 1;\n                    }\n                    if (ny > self.data.length - 1) {\n                        ny = 0;\n                    }\n                    self.scrollIntoView(nx, ny);\n                    self.beginEditAt(nx, ny);\n                }\n            });\n            self.dispatchEvent('beginedit', {cell: cell, input: self.input});\n        };\n        self.createInlineStyle = function (el, className) {\n            var css = {\n                'canvas-datagrid-context-menu-filter-input': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextFilterInputBackground,\n                    color: self.style.contextFilterInputColor,\n                    border: self.style.contextFilterInputBorder,\n                    borderRadius: self.style.contextFilterInputBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextFilterInputFontFamily,\n                    fontSize: self.style.contextFilterInputFontSize\n                },\n                'canvas-datagrid-context-menu-filter-button': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextFilterButtonBorder,\n                    borderRadius: self.style.contextFilterButtonBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFilterButtonFontFamily,\n                    fontSize: self.style.contextMenuFilterButtonFontSize\n                },\n                'canvas-datagrid-context-child-arrow': {\n                    cssFloat: 'right',\n                    color: self.style.childContextMenuArrowColor,\n                    fontSize: self.style.contextMenuChildArrowFontSize,\n                    fontFamily: self.style.contextMenuFontFamily,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-autocomplete': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    position: 'absolute',\n                    zIndex: 9999,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-autocomplete-item': {\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor\n                },\n                'canvas-datagrid-autocomplete-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-canvas': {\n                    position: 'absolute',\n                    zIndex: '-1'\n                },\n                'canvas-datagrid': {\n                    display: 'block',\n                    zIndex: '1',\n                    boxSizing: 'content-box',\n                    width: '100%',\n                    height: '100%'\n                },\n                'canvas-datagrid-control-input': {\n                    position: 'fixed',\n                    top: '-5px',\n                    left: '-5px',\n                    border: 'none',\n                    opacity: '0',\n                    cursor: 'pointer',\n                    width: '1px',\n                    height: '1px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize\n                },\n                'canvas-datagrid-edit-mobile-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 0',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.mobileEditFontFamily,\n                    fontSize: self.style.mobileEditFontSize,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-edit-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 ' + self.style.editCellPaddingLeft + 'px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.editCellFontFamily,\n                    fontSize: self.style.editCellFontSize,\n                    boxShadow: self.style.editCellBoxShadow,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-context-menu-item-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-context-menu-label': {\n                    margin: self.style.contextMenuLabelMargin,\n                    display: self.style.contextMenuLabelDisplay,\n                    minWidth: self.style.contextMenuLabelMinWidth,\n                    maxWidth: self.style.contextMenuLabelMaxWidth\n                },\n                'canvas-datagrid-context-menu-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-context-menu': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-invalid-search-regExp': {\n                    background: self.style.contextMenuFilterInvalidExpresion\n                }\n            };\n            if (css[className]) {\n                Object.keys(css[className]).map(function (prop) {\n                    el.style[prop] = css[className][prop];\n                });\n            }\n            return;\n        };\n        self.appendTo = function (e) {\n            self.parentNode = e;\n            self.setDom();\n        };\n        self.setDom = function () {\n            if (!self.parentNode) { return; }\n            if (self.parentNode && /canvas-datagrid-(cell|tree)/.test(self.parentNode.nodeType)) {\n                self.isChildGrid = true;\n                self.parentGrid = self.parentNode.parentGrid;\n                self.ctx = self.parentGrid.context;\n                self.canvas = self.parentGrid.canvas;\n                self.controlInput = self.parentGrid.controlInput;\n                self.eventParent = self.canvas;\n            } else {\n                self.controlInput = self.controlInput || document.createElement('input');\n                self.controlInput.onblur = self.intf.blur;\n                self.createInlineStyle(self.controlInput, 'canvas-datagrid-control-input');\n                self.isChildGrid = false;\n                self.parentDOMNode = self.parentNode;\n                self.parentIsCanvas = /^canvas$/i.test(self.parentDOMNode.tagName);\n                if (self.parentIsCanvas) {\n                    self.canvas = self.parentDOMNode;\n                    self.parentDOMNode.appendChild(self.controlInput);\n                } else {\n                    self.canvas = document.createElement('canvas');\n                    self.parentDOMNode.appendChild(self.canvas);\n                    self.parentDOMNode.appendChild(self.controlInput);\n                }\n                self.createInlineStyle(self.canvas, 'canvas-datagrid');\n                self.ctx = self.canvas.getContext('2d');\n                self.ctx.textBaseline = 'alphabetic';\n                self.eventParent = self.canvas;\n            }\n            self.parentNodeStyle = (self.isComponent ? self.intf : self.canvas).style;\n            self.controlInput.setAttribute('readonly', true);\n            self.controlInput.addEventListener('blur', function (e) {\n                if (e.target !== self.canvas) {\n                    self.hasFocus = false;\n                }\n            });\n            self.eventParent.addEventListener('scroll', self.resize, false);\n            self.eventParent.addEventListener('touchstart', self.touchstart, false);\n            self.eventParent.addEventListener('mouseup', self.mouseup, false);\n            self.eventParent.addEventListener('mousedown', self.mousedown, false);\n            self.eventParent.addEventListener('dblclick', self.dblclick, false);\n            self.eventParent.addEventListener('click', self.click, false);\n            self.eventParent.addEventListener('mousemove', self.mousemove);\n            self.eventParent.addEventListener('wheel', self.scrollWheel, false);\n            self.canvas.addEventListener('contextmenu', self.contextmenuEvent, false);\n            self.controlInput.addEventListener('copy', self.copy);\n            self.controlInput.addEventListener('cut', self.cut);\n            self.controlInput.addEventListener('paste', self.paste);\n            self.controlInput.addEventListener('keypress', self.keypress, false);\n            self.controlInput.addEventListener('keyup', self.keyup, false);\n            self.controlInput.addEventListener('keydown', self.keydown, false);\n            window.addEventListener('resize', self.resize);\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/dom.js\n// module id = 8\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        // all methods here are exposed by intf\n        // to users\n        /**\n         * Converts a integer into a letter A - ZZZZZ...\n         * @memberof canvasDatagrid\n         * @name integerToAlpha\n         * @method\n         * @param {column} n The number to convert.\n         */\n        self.integerToAlpha = function (n) {\n            var ordA = 'a'.charCodeAt(0),\n                ordZ = 'z'.charCodeAt(0),\n                len = ordZ - ordA + 1,\n                s = '';\n            while (n >= 0) {\n                s = String.fromCharCode(n % len + ordA) + s;\n                n = Math.floor(n / len) - 1;\n            }\n            return s;\n        };\n        /**\n         * Inserts a new column before the specified index into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name insertColumn\n         * @method\n         * @param {column} c The column to insert into the schema.\n         * @param {number} index The index of the column to insert before.\n         */\n        self.insertColumn = function (c, index) {\n            var s = self.getSchema();\n            if (s.length < index) {\n                throw new Error('Index is beyond the length of the schema.');\n            }\n            self.validateColumn(c, s);\n            s.splice(index, 0, c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a column from the schema at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteColumn\n         * @tutorial schema\n         * @method\n         * @param {number} index The index of the column to delete.\n         */\n        self.deleteColumn = function (index) {\n            var s = self.getSchema();\n            // remove data matching this column name from data\n            self.data.forEach(function (row) {\n                delete row[s[index].name];\n            });\n            s.splice(index, 1);\n            self.intf.schema = s;\n        };\n        /**\n         * Adds a new column into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name addColumn\n         * @method\n         * @param {column} c The column to add to the schema.\n         */\n        self.addColumn = function (c) {\n            var s = self.getSchema();\n            self.validateColumn(c, s);\n            s.push(c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a row from the dataset at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteRow\n         * @method\n         * @param {number} index The index of the row to delete.\n         */\n        self.deleteRow = function (index) {\n            self.originalData.splice(index, 1);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Inserts a new row into the dataset before the specified index.\n         * @memberof canvasDatagrid\n         * @name insertRow\n         * @method\n         * @param {object} d data.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertRow = function (d, index) {\n            if (self.originalData.length < index) {\n                throw new Error('Index is beyond the length of the dataset.');\n            }\n            self.originalData.splice(index, 0, d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[index], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Adds a new row into the dataset.\n         * @memberof canvasDatagrid\n         * @name addRow\n         * @method\n         * @param {object} d data.\n         */\n        self.addRow = function (d) {\n            self.originalData.push(d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[self.originalData.length - 1], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Sets the height of a given row by index number.\n         * @memberof canvasDatagrid\n         * @name setRowHeight\n         * @method\n         * @param {number} rowIndex The index of the row to set.\n         * @param {number} height Height to set the row to.\n         */\n        self.setRowHeight = function (rowIndex, height) {\n            self.sizes.rows[self.data[rowIndex][self.uniqueId]] = height;\n            self.draw(true);\n        };\n        /**\n         * Sets the width of a given column by index number.\n         * @memberof canvasDatagrid\n         * @name setColumnWidth\n         * @method\n         * @param {number} colIndex The index of the column to set.\n         * @param {number} width Width to set the column to.\n         */\n        self.setColumnWidth = function (colIndex, width) {\n            var s = self.getSchema();\n            self.sizes.columns[s[colIndex][self.uniqueId]] = width;\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the width of the columns due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetColumnWidths\n         * @tutorial schema\n         * @method\n         */\n        self.resetColumnWidths = function () {\n            self.sizes.columns = {};\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the height of the rows due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetRowHeights\n         * @tutorial schema\n         * @method\n         */\n        self.resetRowHeights = function () {\n            self.sizes.rows = {};\n            self.draw(true);\n        };\n        /**\n         * Sets the value of the filter.\n         * @memberof canvasDatagrid\n         * @name setFilter\n         * @method\n         * @param {string} column Name of the column to filter.\n         * @param {string} value The value to filter for.\n         */\n        self.setFilter = function (column, value) {\n            function applyFilter() {\n                self.refreshFromOrigialData();\n                Object.keys(self.columnFilters).forEach(function (filter) {\n                    var header = self.getHeaderByName(column);\n                    if (!header) {\n                        return;\n                    }\n                    self.currentFilter = header.filter || self.filter(column.type || 'string');\n                    self.data = self.data.filter(function (row) {\n                        return self.currentFilter(row[filter], self.columnFilters[filter]);\n                    });\n                });\n                self.resize();\n                self.draw(true);\n            }\n            if (column === undefined && value === undefined) {\n                self.columnFilters = {};\n                return applyFilter();\n            }\n            if (column && (value === '' || value === undefined)) {\n                delete self.columnFilters[column];\n            } else {\n                self.columnFilters[column] = value;\n            }\n            applyFilter();\n        };\n        /**\n         * Returns the number of pixels to scroll down to line up with row rowIndex.\n         * @memberof canvasDatagrid\n         * @name findRowScrollTop\n         * @method\n         * @param {number} rowIndex The row index of the row to scroll find.\n         */\n        self.findRowScrollTop = function (rowIndex) {\n            var top = 0, x = 0, l = self.data.length,\n                bm = self.style.borderCollapse === 'collapse' ? 1 : 2,\n                cellBorder = self.style.cellBorderWidth * bm;\n            if (!self.attributes.showNewRow) {\n                l -= 1;\n            }\n            if (rowIndex > l) {\n                throw new Error('Impossible row index');\n            }\n            while (x < rowIndex) {\n                top += (self.sizes.rows[self.data[x][self.uniqueId]] || self.style.cellHeight) + cellBorder;\n                x += 1;\n            }\n            //TODO: This is not super accurate, causes pageUp/Dn to not move around right\n            return top - (self.sizes.rows[self.data[rowIndex][self.uniqueId]] || self.style.cellHeight);\n        };\n        /**\n         * Returns the number of pixels to scroll to the left to line up with column columnIndex.\n         * @memberof canvasDatagrid\n         * @name findColumnScrollLeft\n         * @method\n         * @param {number} columnIndex The column index of the column to find.\n         */\n        self.findColumnScrollLeft = function (columnIndex) {\n            var left = 0, y = 0, s = self.getSchema(), l = s.length - 1;\n            if (columnIndex > l) {\n                throw new Error('Impossible column index');\n            }\n            while (y < columnIndex) {\n                left += self.sizes.columns[s[y][self.uniqueId]] || s[y].width;\n                y += 1;\n            }\n            return left;\n        };\n        /**\n         * Scrolls the cell at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name gotoCell\n         * @method\n         * @param {number} x The column index of the cell to scroll to.\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoCell = function (x, y) {\n            if (x !== undefined) {\n                self.scrollBox.scrollLeft = self.findColumnScrollLeft(x);\n            }\n            if (y !== undefined) {\n                self.scrollBox.scrollTop = self.findRowScrollTop(y);\n            }\n        };\n        /**\n         * Scrolls the row y.\n         * @memberof canvasDatagrid\n         * @name gotoRow\n         * @method\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoRow = function (y) {\n            self.gotoCell(0, y);\n        };\n        /**\n         * Scrolls the cell at cell x, row y into view if it is not already.\n         * @memberof canvasDatagrid\n         * @name scrollIntoView\n         * @method\n         * @param {number} x The column index of the cell to scroll into view.\n         * @param {number} y The row index of the cell to scroll into view.\n         */\n        self.scrollIntoView = function (x, y) {\n            if (self.visibleCells.filter(function (cell) {\n                    return (cell.rowIndex === y || y === undefined)\n                        && (cell.columnIndex === x || x === undefined)\n                        && cell.x > 0\n                        && cell.y > 0\n                        && cell.x + cell.width < self.width\n                        && cell.y + cell.height < self.height;\n                }).length === 0) {\n                self.gotoCell(x, y);\n            }\n        };\n        /**\n         * Sets the active cell. Requires redrawing.\n         * @memberof canvasDatagrid\n         * @name setActiveCell\n         * @method\n         * @param {number} x The column index of the cell to set active.\n         * @param {number} y The row index of the cell to set active.\n         */\n        self.setActiveCell = function (x, y) {\n            self.activeCell = {\n                rowIndex: y,\n                columnIndex: x\n            };\n        };\n        /**\n         * Removes the selection.\n         * @memberof canvasDatagrid\n         * @name selectNone\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectNone = function (dontDraw) {\n            self.selections = [];\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Selects every visible cell.\n         * @memberof canvasDatagrid\n         * @name selectAll\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectAll = function (dontDraw) {\n            self.selectArea({\n                top: 0,\n                left: 0,\n                right: self.getVisibleSchema().length - 1,\n                bottom: self.data.length - 1\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Returns true if the selected columnIndex is selected on every row.\n         * @memberof canvasDatagrid\n         * @name isColumnSelected\n         * @method\n         * @param {number} columnIndex The column index to check.\n         */\n        self.isColumnSelected = function (columnIndex) {\n            var colIsSelected = true;\n            self.data.forEach(function (row, rowIndex) {\n                if (!self.selections[rowIndex] || self.selections[rowIndex].indexOf(self.orders.columns[columnIndex]) === -1) {\n                    colIsSelected = false;\n                }\n            });\n            return colIsSelected;\n        };\n        /**\n         * Runs the defined method on each selected cell.\n         * @memberof canvasDatagrid\n         * @name forEachSelectedCell\n         * @method\n         * @param {number} fn The function to execute.  The signature of the function is: (data, rowIndex, columnName).\n         * @param {number} expandToRow When true the data in the array is expanded to the entire row.\n         */\n        self.forEachSelectedCell = function (fn, expandToRow) {\n            var d = [], s = expandToRow ? self.getSchema() : self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    if (col === -1 || !s[col]) { return; }\n                    fn(self.data, index, s[col].name);\n                });\n            });\n        };\n        /**\n         * Selects a column.\n         * @memberof canvasDatagrid\n         * @name selectColumn\n         * @method\n         * @param {number} columnIndex The column index to select.\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the column.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the column.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectColumn = function (columnIndex, ctrl, shift, supressEvent) {\n            var s, e, x;\n            function addCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) === -1) {\n                        self.selections[rowIndex].push(i);\n                    }\n                });\n            }\n            function removeCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) !== -1) {\n                        self.selections[rowIndex].splice(self.selections[rowIndex].indexOf(i), 1);\n                    }\n                });\n            }\n            if (shift) {\n                if (!self.activeCell) { return; }\n                s = Math.min(self.activeCell.columnIndex, columnIndex);\n                e = Math.max(self.activeCell.columnIndex, columnIndex);\n                for (x = s; e > x; x += 1) {\n                    addCol(x);\n                }\n            }\n            if (!ctrl && !shift) {\n                self.selections = [];\n                self.activeCell.columnIndex = columnIndex;\n                self.activeCell.rowIndex = self.scrollIndexTop;\n            }\n            if (ctrl && self.isColumnSelected(columnIndex)) {\n                removeCol(columnIndex);\n            } else {\n                addCol(columnIndex);\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.getSelectionBounds()\n            });\n        };\n        /**\n         * Selects a row.\n         * @memberof canvasDatagrid\n         * @name selectRow\n         * @method\n         * @param {number} rowIndex The row index to select.\n         * @param {boolean} ctrl When true, behaves as if you were holding control/command when you clicked the row.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the row.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectRow = function (rowIndex, ctrl, shift, supressEvent) {\n            var x, st, en, s = self.getVisibleSchema();\n            function addRow(ri) {\n                self.selections[ri] = [];\n                self.selections[ri].push(-1);\n                s.forEach(function (col, index) {\n                    self.selections[ri].push(index);\n                });\n            }\n            if (self.dragAddToSelection === false || self.dragObject === undefined) {\n                if (self.selections[rowIndex] && self.selections[rowIndex].length - 1 === s.length) {\n                    if (ctrl) {\n                        self.selections[rowIndex] = [];\n                        return;\n                    }\n                }\n            }\n            if (self.dragAddToSelection === true || self.dragObject === undefined) {\n                if (shift && self.dragObject === undefined) {\n                    if (!self.activeCell) { return; }\n                    st = Math.min(self.activeCell.rowIndex, rowIndex);\n                    en = Math.max(self.activeCell.rowIndex, rowIndex);\n                    for (x = st; en >= x; x += 1) {\n                        addRow(x);\n                    }\n                } else {\n                    addRow(rowIndex);\n                }\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Collapse a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name collapseTree\n         * @method\n         * @param {number} index The index of the row to collapse.\n         */\n        self.collapseTree = function (rowIndex) {\n            var rowId = self.data[rowIndex][self.uniqueId];\n            self.dispatchEvent('collapsetree', {\n                childGrid: self.childGrids[rowId],\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId].blur();\n            self.openChildren[rowId].dispose();\n            delete self.openChildren[rowId];\n            delete self.sizes.trees[rowId];\n            delete self.childGrids[rowId];\n            self.dispatchEvent('resizerow', {\n                cellHeight: self.style.cellHeight\n            });\n            self.resize(true);\n            self.draw(true);\n        };\n        /**\n         * Expands a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name expandTree\n         * @method\n         * @param {number} index The index of the row to expand.\n         */\n        self.expandTree = function (rowIndex) {\n            var columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth,\n                rowId = self.data[rowIndex][self.uniqueId],\n                h = self.sizes.trees[rowId] || self.style.treeGridHeight,\n                treeGrid;\n            if (!self.childGrids[rowId]) {\n                treeGrid = self.createGrid({\n                    debug: self.attributes.debug,\n                    name: self.attributes.saveAppearance\n                        ? self.attributes.name + 'tree' + rowId : undefined,\n                    parentNode: {\n                        parentGrid: self.intf,\n                        nodeType: 'canvas-datagrid-tree',\n                        offsetHeight: h,\n                        offsetWidth: self.width - rowHeaderCellWidth,\n                        header: { width: self.width - rowHeaderCellWidth },\n                        offsetLeft: rowHeaderCellWidth,\n                        offsetTop: columnHeaderCellHeight,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: 'tree',\n                        data: self.data[rowIndex]\n                    }\n                });\n                self.childGrids[rowId] = treeGrid;\n            }\n            treeGrid = self.childGrids[rowId];\n            treeGrid.visible = true;\n            self.dispatchEvent('expandtree', {\n                treeGrid: treeGrid,\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId] = treeGrid;\n            self.sizes.trees[rowId] = h;\n            self.dispatchEvent('resizerow', {height: self.style.cellHeight});\n            self.resize(true);\n        };\n        /**\n         * Toggles tree grid open and close by row index.\n         * @memberof canvasDatagrid\n         * @name toggleTree\n         * @method\n         * @param {number} index The index of the row to toggle.\n         */\n        self.toggleTree = function (rowIndex) {\n            var i = self.openChildren[self.data[rowIndex][self.uniqueId]];\n            if (i) {\n                return self.collapseTree(rowIndex);\n            }\n            self.expandTree(rowIndex);\n        };\n        /**\n         * Returns a header from the schema by name.\n         * @memberof canvasDatagrid\n         * @name getHeaderByName\n         * @tutorial schema\n         * @method\n         * @returns {header} header with the selected name, or undefined.\n         * @param {string} name The name of the column to resize.\n         */\n        self.getHeaderByName = function (name) {\n            var x, i = self.getSchema();\n            for (x = 0; x < i.length; x += 1) {\n                if (i[x].name === name) {\n                    return i[x];\n                }\n            }\n        };\n        /**\n         * Resizes a column to fit the longest value in the column. Call without a value to resize all columns.\n         * Warning, can be slow on very large record sets (1m records ~3-5 seconds on an i7).\n         * @memberof canvasDatagrid\n         * @name fitColumnToValues\n         * @method\n         * @param {string} name The name of the column to resize.\n         */\n        self.fitColumnToValues = function (name, internal) {\n            if (!self.canvas) { return; }\n            self.sizes.columns[name === 'cornerCell' ? name : self.getHeaderByName(name)[self.uniqueId]]\n                = self.findColumnMaxTextLength(name);\n            if (!internal) {\n                self.resize();\n                self.draw(true);\n            }\n        };\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @overload\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {number} columnIndex The column index of the cell to check.\n         * @param {number} rowIndex The row index of the cell to check.\n         */\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {cell} cell The cell to check for.  Alternatively you can pass an object { x: <x-pixel-value>, y: <y-pixel-value> }.\n         */\n        self.isCellVisible = function (cell, rowIndex) {\n            // overload\n            if (rowIndex !== undefined) {\n                return self.visibleCells.filter(function (c) {\n                    return c.columnIndex === cell && c.rowIndex === rowIndex;\n                }).length > 0;\n            }\n            var x, l = self.visibleCells.length;\n            for (x = 0; x < l; x += 1) {\n                if (cell.x === self.visibleCells[x].x && cell.y === self.visibleCells[x].y) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n         * Sets the order of the data.\n         * @memberof canvasDatagrid\n         * @name order\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} columnName Number of pixels from the left.\n         * @param {string} direction `asc` for ascending or `desc` for descending.\n         * @param {function} [sortFunction] When defined, override the default sorting method defined in the column's schema and use this one.\n         * @param {bool} [dontSetStorageData] Don't store this setting for future use.\n         */\n        self.order = function (columnName, direction, sortFunction, dontSetStorageData) {\n            var f,\n                c = self.getSchema().filter(function (col) {\n                    return col.name === columnName;\n                });\n            self.orderBy = columnName;\n            if (c.length === 0) {\n                throw new Error('Cannot sort.  No such column name');\n            }\n            f = sortFunction || self.sorters[c[0].type];\n            if (!f && c[0].type !== undefined) {\n                console.warn('Cannot sort type \"%s\" falling back to string sort.', c[0].type);\n            }\n            self.data = self.data.sort(typeof f === 'function' ? f(columnName, direction) : self.sorters.string);\n            self.dispatchEvent('ordercolumn', {name: columnName, direction: direction});\n            self.draw(true);\n            if (dontSetStorageData) { return; }\n            self.setStorageData();\n        };\n        self.isInGrid = function (e) {\n            if (e.x < 0\n                    || e.x > self.width\n                    || e.y < 0\n                    || e.y > self.height) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Moves the current selection relative to the its current position.  Note: this method does not move the selected data, just the selection itself.\n         * @memberof canvasDatagrid\n         * @name moveSelection\n         * @method\n         * @param {number} offsetX The number of columns to offset the selection.\n         * @param {number} offsetY The number of rows to offset the selection.\n         */\n        self.moveSelection = function (offsetX, offsetY) {\n            var sel = [];\n            self.selections.forEach(function (row, rowIndex) {\n                sel[rowIndex + offsetY] = [];\n                row.forEach(function (colIndex) {\n                    sel[rowIndex + offsetY].push(colIndex + offsetX);\n                });\n            });\n            self.selections = sel;\n        };\n        /**\n         * Moves data in the provided selection to another position in the grid.  Moving data off the edge of the schema (columns/x) will truncate data.\n         * @memberof canvasDatagrid\n         * @name moveTo\n         * @method\n         * @param {array} sel 2D array representing selected rows and columns.  `canvasDatagrid.selections` is in this format and can be used here.\n         * @param {number} x The column index to start inserting the selection at.\n         * @param {number} y The row index to start inserting the selection at.\n         */\n        self.moveTo = function (sel, x, y) {\n            var d = self.getSelectedData(),\n                s = self.getVisibleSchema(),\n                l = sel.length,\n                xi,\n                yi = y - 1;\n            sel.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) { return; }\n                row.forEach(function (col) {\n                    if (!s[col]) { return; }\n                    self.data[index][s[col].name] = null;\n                });\n            });\n            sel.forEach(function (row, index) {\n                yi += 1;\n                xi = x - 1;\n                row.forEach(function (col, cidx) {\n                    xi += 1;\n                    if (col === -1\n                            || !s[xi]\n                            || !s[col]\n                            || self.data.length - 1 < yi\n                            || yi < 0) { return; }\n                    self.data[yi][s[xi].name] = d[index][s[col].name];\n                });\n            });\n        };\n        /**\n         * Checks if a given column is visible.\n         * @memberof canvasDatagrid\n         * @name isColumnVisible\n         * @method\n         * @returns {boolean} When true, the column is visible.\n         * @param {number} columnIndex Column index.\n         */\n        self.isColumnVisible = function (columnIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === columnIndex;\n            }).length > 0;\n        };\n        /**\n         * Checks if a given row is visible.\n         * @memberof canvasDatagrid\n         * @name isRowVisible\n         * @method\n         * @returns {boolean} When true, the row is visible.\n         * @param {number} rowIndex Row index.\n         */\n        self.isRowVisible = function (rowIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.rowIndex === rowIndex;\n            }).length > 0;\n        };\n        /**\n         * Gets the cell at columnIndex and rowIndex.\n         * @memberof canvasDatagrid\n         * @name getVisibleCellByIndex\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Column index.\n         * @param {number} y Row index.\n         */\n        self.getVisibleCellByIndex = function (x, y) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === x && c.rowIndex === y;\n            })[0];\n        };\n        /**\n         * Gets the cell at grid pixel coordinate x and y.  Author's note.  This function ties drawing and events together.  This is a very complex function and is core to the component.\n         * @memberof canvasDatagrid\n         * @name getCellAt\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Number of pixels from the left.\n         * @param {number} y Number of pixels from the top.\n         */\n        self.getCellAt = function (x, y, useTouchScrollZones) {\n            function getBorder(cell) {\n                if (cell.x + cell.width - (self.attributes.borderResizeZone * 0.4) < x && cell.x + cell.width + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'r';\n                }\n                if (cell.x - (self.attributes.borderResizeZone * 0.4) < x && cell.x + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'l';\n                }\n                if (cell.y + cell.height - (self.attributes.borderResizeZone * 0.4) < y && cell.y + cell.height + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 'b';\n                }\n                if (cell.y - (self.attributes.borderResizeZone * 0.4) < y && cell.y + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 't';\n                }\n            }\n            var border,\n                tsz = useTouchScrollZones ? self.attributes.touchScrollZone : 0,\n                moveMode = self.attributes.borderDragBehavior === 'move',\n                i,\n                l = self.visibleCells.length,\n                moveBorder,\n                xBorderBehavior = moveMode ? self.cursorGrab : 'ew-resize',\n                yBorderBehavior = moveMode ? self.cursorGrab : 'ns-resize',\n                cell;\n            if (!self.visibleCells || !self.visibleCells.length) { return; }\n            self.hasFocus = true;\n            if (!(y < self.height\n                && y > 0\n                && x < self.width\n                && x > 0)) {\n                self.hasFocus = false;\n                return {\n                    dragContext: 'inherit',\n                    context: 'inherit'\n                };\n            }\n            for (i = 0; i < l; i += 1) {\n                cell = self.visibleCells[i];\n                if (useTouchScrollZones && /(vertical|horizontal)-scroll-/.test(cell.style)) {\n                    cell.x -= tsz;\n                    cell.y -= tsz;\n                    cell.height += tsz;\n                    cell.width += tsz;\n                }\n                if (cell.x - self.style.cellBorderWidth < x\n                        && cell.x + cell.width + self.style.cellBorderWidth > x\n                        && cell.y - self.style.cellBorderWidth < y\n                        && cell.y + cell.height + self.style.cellBorderWidth > y) {\n                    if (/frozen-row-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'row-resize';\n                        return cell;\n                    }\n                    if (/frozen-column-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'col-resize';\n                        return cell;\n                    }\n                    if (/selection-handle-/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'crosshair';\n                        return cell;\n                    }\n                    if (/vertical-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'vertical-scroll-box';\n                        cell.context = 'vertical-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isVerticalScrollBar = true;\n                        if (y > self.scrollBox.box.v.y + self.scrollBox.scrollBoxHeight) {\n                            cell.dragContext = 'vertical-scroll-bottom';\n                            cell.context = 'vertical-scroll-bottom';\n                        } else if (y < self.scrollBox.box.v.y) {\n                            cell.dragContext = 'vertical-scroll-top';\n                            cell.context = 'vertical-scroll-top';\n                        }\n                        self.canvas.style.cursor = 'default';\n                        return cell;\n                    }\n                    if (/horizontal-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'horizontal-scroll-box';\n                        cell.context = 'horizontal-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isHorizontalScrollBar = true;\n                        if (x > self.scrollBox.box.h.x + self.scrollBox.scrollBoxWidth) {\n                            cell.dragContext = 'horizontal-scroll-right';\n                            cell.context = 'horizontal-scroll-right';\n                        } else if (x < self.scrollBox.box.h.x) {\n                            cell.dragContext = 'horizontal-scroll-left';\n                            cell.context = 'horizontal-scroll-left';\n                        }\n                        self.canvas.style.cursor = 'default';\n                        return cell;\n                    }\n                    border = getBorder(cell);\n                    // check if the border of this cell is the border of the selection and if so show move cursor in move mode\n                    moveBorder = moveMode && cell.selectionBorder && cell.selectionBorder.indexOf(border) !== -1;\n                    if (['l', 'r'].indexOf(border) !== -1\n                            && (self.attributes.allowColumnResize || moveBorder)\n                            && ((self.attributes.allowColumnResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && ((self.attributes.allowRowHeaderResize && (cell.isRowHeader || cell.isCorner)) || !(cell.isRowHeader && cell.isCorner))) {\n                        if (((cell.isColumnHeader || cell.isCorner) || (self.attributes.allowColumnResizeFromCell && cell.isNormal)) && border === 'r') {\n                            cell.context = 'ew-resize';\n                            cell.dragContext = 'ew-resize';\n                            return cell;\n                        }\n                        if (!(cell.isColumnHeader || cell.isCorner) && moveBorder) {\n                            cell.context = xBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (['t', 'b'].indexOf(border) !== -1\n                            && cell.rowIndex > -1\n                            && (self.attributes.allowRowResize || moveBorder)\n                            && ((self.attributes.allowRowResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && !cell.isColumnHeader) {\n                        if (((cell.isRowHeader || cell.isCorner) || (self.attributes.allowRowResizeFromCell && cell.isNormal)) && border === 'b') {\n                            cell.context = 'ns-resize';\n                            cell.dragContext = 'ns-resize';\n                            return cell;\n                        }\n                        if (!(cell.isRowHeader || cell.isCorner) && moveBorder) {\n                            cell.context = yBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (cell.style === 'columnHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'column-reorder';\n                        return cell;\n                    }\n                    if (cell.style === 'rowHeaderCell') {\n                        if ((self.attributes.rowGrabZoneSize + (cell.y - self.style.cellBorderWidth) < y)\n                                || !self.attributes.allowRowReordering) {\n                            cell.dragContext = 'cell';\n                            cell.context = 'cell';\n                        } else {\n                            cell.context = self.cursorGrab;\n                            cell.dragContext = 'row-reorder';\n                        }\n                        return cell;\n                    }\n                    if (cell.isGrid) {\n                        self.hasFocus = false;\n                        cell.dragContext = 'cell-grid';\n                        cell.context = 'cell-grid';\n                        return cell;\n                    }\n                    if (cell.style === 'tree-grid') {\n                        self.hasFocus = false;\n                        cell.dragContext = 'tree';\n                        cell.context = 'tree';\n                        return cell;\n                    }\n                    cell.dragContext = 'cell';\n                    cell.context = 'cell';\n                    return cell;\n                }\n            }\n            self.hasFocus = true;\n            self.canvas.style.cursor = 'default';\n            return {\n                dragContext: 'background',\n                context: 'background',\n                style: 'background',\n                isBackground: true\n            };\n        };\n        /**\n         * Gets the bounds of current selection. \n         * @returns {rect} selection.\n         * @memberof canvasDatagrid\n         * @name getSelectionBounds\n         * @method\n         */\n        self.getSelectionBounds = function () {\n            var low = {x: Infinity, y: Infinity},\n                high = {x: -Infinity, y: -Infinity};\n            self.data.forEach(function (row, rowIndex) {\n                var maxCol, minCol;\n                if (self.selections[rowIndex] && self.selections[rowIndex].length) {\n                    low.y = rowIndex < low.y ? rowIndex : low.y;\n                    high.y = rowIndex > high.y ? rowIndex : high.y;\n                    maxCol = Math.max.apply(null, self.selections[rowIndex]);\n                    minCol = Math.min.apply(null, self.selections[rowIndex]);\n                    low.x = minCol < low.x ? minCol : low.x;\n                    high.x = maxCol > high.x ? maxCol : high.x;\n                }\n            });\n            return {\n                top: low.y,\n                left: low.x,\n                bottom: high.y,\n                right: high.x\n            };\n        };\n        /**\n         * Returns an auto generated schema based on data structure.\n         * @memberof canvasDatagrid\n         * @name getSchemaFromData\n         * @method\n         * @tutorial schema\n         * @returns {schema} schema A schema based on the first item in the data array.\n         */\n        self.getSchemaFromData = function () {\n            return Object.keys(self.data[0] || {' ': ''}).map(function mapEachSchemaColumn(key, index) {\n                var type = self.getBestGuessDataType(key),\n                    i = {\n                        name: key,\n                        title: isNaN(parseInt(key, 10)) ? key : self.integerToAlpha(key).toUpperCase(),\n                        width: self.style.cellWidth,\n                        index: index,\n                        type: type,\n                        filter: self.filter(type)\n                    };\n                if (key === self.uniqueId) {\n                    i.hidden = true;\n                }\n                i[self.uniqueId] = self.getSchemaNameHash(key);\n                return i;\n            });\n        };\n        /**\n         * Clears the change log grid.changes that keeps track of changes to the data set.\n         * This does not undo changes or alter data it is simply a convince array to keep\n         * track of changes made to the data since last this method was called.\n         * @memberof canvasDatagrid\n         * @name clearChangeLog\n         * @method\n         */\n        self.clearChangeLog = function () {\n            self.changes = [];\n        };\n        /**\n         * Selects an area of the grid.\n         * @memberof canvasDatagrid\n         * @name selectArea\n         * @method\n         * @param {rect} bounds A rect object representing the selected values.\n         */\n        self.selectArea = function (bounds, ctrl) {\n            self.selectionBounds = bounds || self.selectionBounds;\n            var x, y, s = self.getSchema();\n            if (!ctrl) {\n                self.selections = [];\n            }\n            if (self.selectionBounds.top < -1\n                    || self.selectionBounds.bottom > self.data.length\n                    || self.selectionBounds.left < -1\n                    || self.selectionBounds.right > s.length) {\n                throw new Error('Impossible selection area');\n            }\n            for (x = self.selectionBounds.top; x <= self.selectionBounds.bottom; x += 1) {\n                self.selections[x] = [];\n                for (y = self.selectionBounds.left; y <= self.selectionBounds.right; y += 1) {\n                    if (self.selections[x].indexOf(y) === -1) {\n                        self.selections[x].push(y);\n                    }\n                }\n            }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Returns the maximum text width for a given column by column name.\n         * @memberof canvasDatagrid\n         * @name findColumnMaxTextLength\n         * @method\n         * @returns {number} The number of pixels wide the maximum width value in the selected column.\n         * @param {string} name The name of the column to calculate the value's width of.\n         */\n        self.findColumnMaxTextLength = function (name) {\n            var m = -Infinity;\n            if (name === 'cornerCell') {\n                self.ctx.font = self.style.rowHeaderCellFont;\n                return self.ctx.measureText((self.data.length + (self.attributes.showNewRow ? 1 : 0)).toString()).width\n                    + self.style.autosizePadding + self.style.autosizeHeaderCellPadding\n                    + self.style.rowHeaderCellPaddingRight\n                    + self.style.rowHeaderCellPaddingLeft\n                    + (self.attributes.tree ? self.style.treeArrowWidth\n                        + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight : 0);\n            }\n            self.getSchema().forEach(function (col) {\n                if (col.name !== name) { return; }\n                self.ctx.font = self.style.columnHeaderCellFont;\n                var t = self.ctx.measureText(col.title || col.name).width\n                    + self.style.headerCellPaddingRight\n                    + self.style.headerCellPaddingLeft;\n                m = t > m ? t : m;\n            });\n            self.data.forEach(function (row) {\n                self.ctx.font = self.style.cellFont;\n                var t = self.ctx.measureText(row[name]).width\n                    + self.style.cellPaddingRight\n                    + self.style.cellPaddingLeft + self.style.cellAutoResizePadding;\n                m = t > m ? t : m;\n            });\n            return m;\n        };\n        /**\n         * Gets the total width of all header columns.\n         * @memberof canvasDatagrid\n         * @name getHeaderWidth\n         * @method\n         */\n        self.getHeaderWidth = function () {\n            return self.getVisibleSchema().reduce(function (total, header) {\n                return total + header.width;\n            }, 0);\n        };\n        self.formatters.string = function cellFormatterString(e) {\n            return e.cell.value !== undefined ? e.cell.value : '';\n        };\n        self.formatters.rowHeaderCell = self.formatters.string;\n        self.formatters.headerCell = self.formatters.string;\n        self.formatters.number = self.formatters.string;\n        self.formatters.int = self.formatters.string;\n        self.formatters.html = self.formatters.string;\n        self.sorters.string = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (a[columnName] === undefined || a[columnName] === null) {\n                    return 1;\n                }\n                if (b[columnName] === undefined || b[columnName] === null) {\n                    return 0;\n                }\n                if (asc) {\n                    if (!a[columnName].localeCompare) { return 1; }\n                    return a[columnName].localeCompare(b[columnName]);\n                }\n                if (!b[columnName].localeCompare) { return 1; }\n                return b[columnName].localeCompare(a[columnName]);\n            };\n        };\n        self.sorters.number = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return a[columnName] - b[columnName];\n                }\n                return b[columnName] - a[columnName];\n            };\n        };\n        self.sorters.date = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return new Date(a[columnName]).getTime()\n                        - new Date(b[columnName]).getTime();\n                }\n                return new Date(b[columnName]).getTime()\n                        - new Date(a[columnName]).getTime();\n            };\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/publicMethods.js\n// module id = 9\n// module chunks = 0"],"sourceRoot":""}